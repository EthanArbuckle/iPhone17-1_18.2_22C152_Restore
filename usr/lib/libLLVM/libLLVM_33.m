BOOL sub_1CC81FD40(uint64_t a1)
{
  BOOL result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (v3 - 33);
  if (v4 > 0x37) {
    return result;
  }
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v5 = *(void *)(a1 + 64);
    if (v5 && (*(unsigned char *)(v5 + 17) & 0x30) != 0) {
      return 0;
    }
    v6 = *(_DWORD *)(a1 + 20);
    if (v6 < 0 && (v12 = a1 - 32 * (v6 & 0x7FFFFFF), v15 = *(void *)(v12 - 8), v13 = v12 - 8, (v14 = v15) != 0))
    {
      v16 = -v14;
      while (1)
      {
        v17 = *(_DWORD *)(*(void *)(v13 + v16) + 8);
        v18 = v17 > 7;
        v19 = (1 << v17) & 0x83;
        if (v18 || v19 == 0) {
          break;
        }
        v16 += 16;
        if (!v16) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
      {
        return 0;
      }
      v3 = *(unsigned __int8 *)(a1 + 16);
    }
  }
  else
  {
    if (v4 == 27)
    {
      if ((*(_WORD *)(a1 + 18) & 0x301) == 0) {
        return 0;
      }
      goto LABEL_20;
    }
    if (((1 << (v3 - 33)) & 0x808001D0000010) == 0) {
      return result;
    }
  }
  if (v3 == 84)
  {
    v7 = *(void *)(a1 - 32);
    if (v7)
    {
      if (!*(unsigned char *)(v7 + 16)
        && *(void *)(v7 + 24) == *(void *)(a1 + 72)
        && (*(unsigned char *)(v7 + 33) & 0x20) != 0
        && *(_DWORD *)(v7 + 36) == 2792)
      {
        return 0;
      }
    }
  }
LABEL_20:
  v8 = sub_1CC7A57E4(a1);
  if (v8 == 0xFFFFFFFFLL) {
    return 1;
  }
  v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0) {
    v10 = *(void *)(a1 - 8);
  }
  else {
    v10 = a1 - 32 * (v9 & 0x7FFFFFF);
  }
  v11 = *(_DWORD *)(**(void **)(v10 + 32 * v8) + 8);
  if (v11 < 0x100) {
    return 0;
  }
  return (v11 & 0xFFFFFF00) != 768;
}

BOOL sub_1CC81FEF0(uint64_t a1)
{
  BOOL result = 0;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v3 > 0x37) {
    return result;
  }
  if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (v3 != 27)
    {
      if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x808001D0000010) == 0) {
        return result;
      }
      goto LABEL_13;
    }
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0) {
      goto LABEL_13;
    }
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 && (*(unsigned char *)(v4 + 17) & 0x30) != 0) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 20);
  if (v5 < 0)
  {
    uint64_t v9 = a1 - 32 * (v5 & 0x7FFFFFF);
    uint64_t v12 = *(void *)(v9 - 8);
    uint64_t v10 = v9 - 8;
    uint64_t v11 = v12;
    if (v12)
    {
      uint64_t v13 = -v11;
      do
      {
        unsigned int v14 = *(_DWORD *)(*(void *)(v10 + v13) + 8);
        BOOL v15 = v14 > 7;
        int v16 = (1 << v14) & 0x83;
        if (v15 || v16 == 0) {
          goto LABEL_13;
        }
        v13 += 16;
      }
      while (v13);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
    || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
  {
    return 0;
  }
LABEL_13:
  unsigned int v6 = sub_1CC7A57E4(a1);
  if (v6 == 0xFFFFFFFFLL) {
    return 1;
  }
  int v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v8 = a1 - 32 * (v7 & 0x7FFFFFF);
  }
  return (*(_DWORD *)(**(void **)(v8 + 32 * v6) + 8) & 0xFFFFFF00) != 1536;
}

void sub_1CC820058(uint64_t a1)
{
  v5[8] = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1 != a1 + 40)
  {
    unsigned int v2 = 0;
    do
    {
      if (v1) {
        uint64_t v3 = v1 - 24;
      }
      else {
        uint64_t v3 = 0;
      }
      if (*(unsigned char *)(v3 + 16) == 59)
      {
        if (v2 >= 8) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v5[v2] = v3;
        unsigned int v2 = ++v4;
      }
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1 != a1 + 40);
    if (v2) {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
}

void sub_1CC820200()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v0 = "gOS";
  __int16 v1 = 259;
  operator new();
}

void sub_1CC82079C(uint64_t a1, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)(a1 + 72);
  uint64_t v9 = *(void **)(a1 + 80);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a1 + 72, a2);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  uint64_t v11 = (void *)*v10;
  *((void *)a2 + 4) = v10;
  *((void *)a2 + 3) = v11;
  v11[1] = (char *)a2 + 24;
  *uint64_t v10 = (char *)a2 + 24;
  uint64_t v12 = **(void **)a2;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[6] = v12;
  v28[7] = &v34;
  v28[8] = v35;
  v28[9] = 0;
  int v29 = 0;
  __int16 v30 = 512;
  char v31 = 7;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v34 = &unk_1F2616E88;
  v35[0] = &unk_1F2617008;
  v28[4] = a2;
  v28[5] = (char *)a2 + 40;
  uint64_t v13 = *(uint64_t ***)(a1 + 40);
  llvm::Intrinsic::getType(*v13, 2796, 0, 0);
  Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v13, 2796, 0, 0);
  llvm::Module::getOrInsertFunction((uint64_t)v13, "llvm.agx3.object.shader.gOS.pass", (const char *)0x20, Type, 0);
  int v16 = (uint64_t **)v15;
  if (v15) {
    uint64_t v15 = *(void *)(v15 + 24);
  }
  v25[0] = "gOS_pass";
  __int16 v26 = 259;
  v17 = (llvm::ConstantInt **)sub_1CB845BAC((uint64_t *)v27, (uint64_t **)v15, v16, 0, 0, (uint64_t)v25, 0);
  Signed = llvm::ConstantInt::getSigned(*v17, 1uLL, v18);
  __int16 v26 = 257;
  v20 = sub_1CB845F20((uint64_t)v27, 32, v17, (uint64_t)Signed, (uint64_t)v25);
  v21 = operator new(0xA0uLL);
  uint64_t v22 = 0;
  v23 = (llvm::Instruction *)(v21 + 24);
  v21[29] = v21[29] & 0x38000000 | 3;
  do
  {
    v24 = &v21[v22];
    void *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v23;
    v22 += 8;
  }
  while (v22 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v21 + 24), a3, a4, v20, 0);
  __int16 v26 = 257;
  sub_1CB844E0C((uint64_t *)v27, v23, (uint64_t)v25);
  if (v27[0] != v28) {
    free(v27[0]);
  }
}

uint64_t sub_1CC8209FC(void **a1, int a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1F261F8B8;
  v8[1] = sub_1CC81FD40;
  uint64_t v9 = v8;
  sub_1CC823D28(a1, a2, (uint64_t)v8, a4, a5, a6, a7);
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

void *sub_1CC820AE8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 3360);
  if (v1)
  {
    uint64_t v4 = *(void *)(a1 + 3352);
    uint64_t v5 = 32 * v1;
    do
    {
      uint64_t v6 = a1;
      int v7 = *(void **)(v4 + v5 - 24);
      if ((void *)(v4 + v5 - 8) != v7) {
        free(v7);
      }
      v5 -= 32;
      a1 = v6;
    }
    while (v5);
  }
  *(_DWORD *)(a1 + 3360) = 0;
  uint64_t v2 = (void *)(a1 + 3688);

  return sub_1CC821BE4(v2);
}

void sub_1CC820B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 80);
  uint64_t v141 = a2 + 72;
  if (v4 != a2 + 72)
  {
    uint64_t v5 = a3;
    v143 = (unsigned char *)(a1 + 1672);
    uint64_t v138 = a1 + 1680;
    uint64_t v139 = a1 + 8;
    do
    {
      if (v4) {
        unint64_t v6 = v4 - 24;
      }
      else {
        unint64_t v6 = 0;
      }
      unint64_t v144 = v6;
      unsigned int v7 = v6 >> 4;
      if (*v143)
      {
        int v8 = 16;
        uint64_t v9 = v138;
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 1688);
        if (!v8)
        {
          v18 = 0;
          goto LABEL_22;
        }
        uint64_t v9 = *(void *)(a1 + 1680);
      }
      int v10 = v8 - 1;
      unsigned int v11 = v10 & (v7 ^ (v6 >> 9));
      uint64_t v12 = (void *)(v9 + 104 * v11);
      uint64_t v13 = *v12;
      if (v6 == *v12) {
        goto LABEL_23;
      }
      unsigned int v14 = 0;
      int v15 = 1;
      while (v13 != -4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -8192;
        }
        if (v16) {
          unsigned int v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v9 + 104 * v11);
        uint64_t v13 = *v12;
        if (v6 == *v12) {
          goto LABEL_23;
        }
      }
      if (v14) {
        v18 = v14;
      }
      else {
        v18 = v12;
      }
LABEL_22:
      v19 = sub_1CBA9D634((uint64_t)v143, (uint64_t)&v144, &v144, v18);
      void *v19 = v144;
      v19[1] = v19 + 5;
      v19[2] = v19 + 5;
      v19[3] = 8;
      *((_DWORD *)v19 + 8) = 0;
LABEL_23:
      unint64_t v144 = v6;
      if (*(unsigned char *)a1)
      {
        int v20 = 16;
        uint64_t v21 = v139;
      }
      else
      {
        int v20 = *(_DWORD *)(a1 + 16);
        if (!v20)
        {
          __int16 v30 = 0;
          goto LABEL_39;
        }
        uint64_t v21 = *(void *)(a1 + 8);
      }
      int v22 = v20 - 1;
      unsigned int v23 = v22 & (v7 ^ (v6 >> 9));
      v24 = (void *)(v21 + 104 * v23);
      uint64_t v25 = *v24;
      if (v6 == *v24) {
        goto LABEL_40;
      }
      __int16 v26 = 0;
      int v27 = 1;
      while (v25 != -4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -8192;
        }
        if (v28) {
          __int16 v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        v24 = (void *)(v21 + 104 * v23);
        uint64_t v25 = *v24;
        if (v6 == *v24) {
          goto LABEL_40;
        }
      }
      if (v26) {
        __int16 v30 = v26;
      }
      else {
        __int16 v30 = v24;
      }
LABEL_39:
      char v31 = sub_1CBA9D634(a1, (uint64_t)&v144, &v144, v30);
      *char v31 = v144;
      v31[1] = v31 + 5;
      v31[2] = v31 + 5;
      v31[3] = 8;
      *((_DWORD *)v31 + 8) = 0;
LABEL_40:
      uint64_t v33 = v6 + 40;
      uint64_t v32 = *(void *)(v6 + 40);
      if (v32 == v6 + 40)
      {
LABEL_250:
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = v32 - 24;
        if (!v32) {
          uint64_t v34 = 0;
        }
        if (*(unsigned __int8 *)(v34 + 16) - 29 >= 0xB) {
          uint64_t v34 = 0;
        }
      }
      if (*(unsigned char *)(v34 + 16) != 30)
      {
        switch(*(unsigned char *)(v34 + 16))
        {
          case 0x1E:
LABEL_249:
            __break(1u);
            goto LABEL_250;
          case 0x1F:
            unsigned int v86 = (*(_DWORD *)(v34 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_147;
          case 0x20:
          case 0x26:
            unsigned int v86 = (*(_DWORD *)(v34 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_147;
          case 0x21:
            goto LABEL_47;
          case 0x27:
            unsigned int v86 = *(_DWORD *)(v34 + 80) + 1;
LABEL_147:
            if (v86 < 2) {
              goto LABEL_138;
            }
            goto LABEL_47;
          default:
            goto LABEL_138;
        }
      }
      if ((*(_DWORD *)(v34 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_47:
        uint64_t v35 = *(void *)(v5 + 48);
        uint64_t v36 = *(unsigned int *)(v5 + 64);
        if (v36)
        {
          LODWORD(v37) = (v36 - 1) & (v7 ^ (v6 >> 9));
          v38 = (uint64_t *)(v35 + 16 * v37);
          uint64_t v39 = *v38;
          if (v6 != *v38)
          {
            int v81 = 1;
            do
            {
              if (v39 == -4096) {
                goto LABEL_136;
              }
              int v82 = v37 + v81++;
              uint64_t v37 = v82 & (v36 - 1);
              uint64_t v39 = *(void *)(v35 + 16 * v37);
            }
            while (v6 != v39);
            v38 = (uint64_t *)(v35 + 16 * v37);
          }
        }
        else
        {
LABEL_136:
          v38 = (uint64_t *)(v35 + 16 * v36);
        }
        if (v32 == v33) {
          goto LABEL_138;
        }
        if (v32) {
          uint64_t v40 = v32 - 24;
        }
        else {
          uint64_t v40 = 0;
        }
        int v41 = *(unsigned __int8 *)(v40 + 16);
        int v42 = v41 - 29;
        if ((v41 - 29) >= 0xB) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = v40;
        }
        uint64_t v140 = v43;
        uint64_t v33 = *(void *)(v38[1] + 8);
        uint64_t v44 = *(void *)v33;
        if (v41 != 30)
        {
          uint64_t v32 = 2;
          switch(v42)
          {
            case 1:
              goto LABEL_249;
            case 2:
              LODWORD(v32) = (*(_DWORD *)(v40 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_233;
            case 3:
            case 9:
              LODWORD(v32) = (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_233;
            case 4:
              goto LABEL_62;
            case 7:
              LODWORD(v32) = *(_WORD *)(v40 + 18) & 1;
              goto LABEL_233;
            case 8:
              LODWORD(v32) = 1;
              goto LABEL_62;
            case 10:
              LODWORD(v32) = *(_DWORD *)(v40 + 80) + 1;
LABEL_233:
              if (v32) {
                goto LABEL_62;
              }
              goto LABEL_138;
            default:
              goto LABEL_138;
          }
        }
        if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 3) {
          LODWORD(v32) = 2;
        }
        else {
          LODWORD(v32) = 1;
        }
LABEL_62:
        uint64_t v45 = 0;
        uint64_t v46 = v40 - 32;
        uint64_t v47 = v32;
LABEL_63:
        unint64_t v144 = 0;
        int v48 = *(unsigned __int8 *)(v40 + 16);
        if (v48 == 30)
        {
          uint64_t v32 = v46 - 32 * v45;
        }
        else
        {
          uint64_t v83 = (v48 - 31);
          uint64_t v32 = v40 - 32;
          switch(v83)
          {
            case 1:
            case 7:
              int v134 = *(_DWORD *)(v40 + 20);
              if ((v134 & 0x40000000) != 0)
              {
                uint64_t v135 = *(void *)(v40 - 8);
              }
              else
              {
                uint64_t v33 = v140;
                uint64_t v135 = v140 - 32 * (v134 & 0x7FFFFFF);
              }
              uint64_t v137 = v135 + 32 * v45;
              goto LABEL_277;
            case 2:
              uint64_t v136 = -64;
              if (!v45) {
                uint64_t v136 = -96;
              }
              uint64_t v33 = v140;
              uint64_t v32 = v140 + v136;
              goto LABEL_66;
            case 3:
            case 4:
              goto LABEL_249;
            case 5:
              if ((*(_WORD *)(v40 + 18) & 1) == 0)
              {
                unint64_t v49 = 0;
                uint64_t v5 = a3;
                goto LABEL_67;
              }
              uint64_t v137 = v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF);
LABEL_277:
              uint64_t v32 = v137 + 32;
LABEL_278:
              uint64_t v5 = a3;
              break;
            case 6:
              goto LABEL_66;
            case 8:
              if (v45) {
                uint64_t v32 = v46 - 32 * *(unsigned int *)(v40 + 80) + 32 * v45 - 32;
              }
              else {
                uint64_t v32 = v40 - 32 * *(unsigned int *)(v40 + 80) - 64;
              }
              goto LABEL_278;
            default:
              int v84 = *(_DWORD *)(v40 + 20);
              if ((v84 & 0x40000000) != 0) {
                uint64_t v85 = *(void *)(v40 - 8);
              }
              else {
                uint64_t v85 = v140 - 32 * (v84 & 0x7FFFFFF);
              }
              uint64_t v33 = (2 * v45);
              uint64_t v32 = v85 + 32 * v33 + 32;
              goto LABEL_66;
          }
        }
        while (1)
        {
LABEL_66:
          unint64_t v49 = *(void *)v32;
LABEL_67:
          unint64_t v144 = v49;
          if (v44 == v49)
          {
LABEL_100:
            if (++v45 == v47) {
              break;
            }
            goto LABEL_63;
          }
          if (*(unsigned char *)a1)
          {
            int v50 = 16;
            uint64_t v51 = v139;
          }
          else
          {
            int v50 = *(_DWORD *)(a1 + 16);
            if (!v50)
            {
              v60 = 0;
              goto LABEL_84;
            }
            uint64_t v51 = *(void *)(a1 + 8);
          }
          int v52 = v50 - 1;
          unsigned int v53 = v52 & ((v49 >> 4) ^ (v49 >> 9));
          v54 = (void *)(v51 + 104 * v53);
          uint64_t v55 = *v54;
          if (v49 == *v54) {
            goto LABEL_85;
          }
          v56 = 0;
          int v57 = 1;
          while (v55 != -4096)
          {
            if (v56) {
              BOOL v58 = 0;
            }
            else {
              BOOL v58 = v55 == -8192;
            }
            if (v58) {
              v56 = v54;
            }
            unsigned int v59 = v53 + v57++;
            unsigned int v53 = v59 & v52;
            v54 = (void *)(v51 + 104 * v53);
            uint64_t v55 = *v54;
            if (v49 == *v54) {
              goto LABEL_85;
            }
          }
          if (v56) {
            v60 = v56;
          }
          else {
            v60 = v54;
          }
LABEL_84:
          v54 = sub_1CBA9D634(a1, (uint64_t)&v144, &v144, v60);
          void *v54 = v144;
          v54[1] = v54 + 5;
          v54[2] = v54 + 5;
          v54[3] = 8;
          *((_DWORD *)v54 + 8) = 0;
LABEL_85:
          uint64_t v61 = v54[2];
          uint64_t v33 = *((unsigned int *)v54 + 7);
          if (v61 != v54[1])
          {
            unsigned int v70 = *((_DWORD *)v54 + 6);
            goto LABEL_105;
          }
          if (!v33)
          {
LABEL_94:
            unsigned int v70 = *((_DWORD *)v54 + 6);
            if (v33 < v70)
            {
              *((_DWORD *)v54 + 7) = v33 + 1;
              *(void *)(v61 + 8 * v33) = v6;
              goto LABEL_96;
            }
LABEL_105:
            if (3 * v70 <= 4 * ((int)v33 - *((_DWORD *)v54 + 8)))
            {
              if (v70 >= 0x40) {
                v70 *= 2;
              }
              else {
                unsigned int v70 = 128;
              }
            }
            else if (v70 - v33 >= v70 >> 3)
            {
              goto LABEL_107;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v54 + 1), v70);
            unsigned int v70 = *((_DWORD *)v54 + 6);
            uint64_t v61 = v54[2];
LABEL_107:
            unsigned int v71 = v70 - 1;
            unsigned int v72 = (v70 - 1) & (v7 ^ (v6 >> 9));
            uint64_t v33 = v61 + 8 * v72;
            uint64_t v73 = *(void *)v33;
            if (*(void *)v33 == -1)
            {
              v79 = 0;
LABEL_122:
              if (v79) {
                v80 = v79;
              }
              else {
                v80 = (uint64_t *)v33;
              }
              uint64_t v33 = *v80;
              if (*v80 != v6)
              {
                if (v33 == -2)
                {
                  uint64_t v33 = (*((_DWORD *)v54 + 8) - 1);
                  *((_DWORD *)v54 + 8) = v33;
                }
                else
                {
                  uint64_t v33 = (*((_DWORD *)v54 + 7) + 1);
                  *((_DWORD *)v54 + 7) = v33;
                }
                uint64_t *v80 = v6;
              }
            }
            else
            {
              v79 = 0;
              int v74 = 1;
              while (v73 != v6)
              {
                if (v79) {
                  BOOL v75 = 0;
                }
                else {
                  BOOL v75 = v73 == -2;
                }
                if (v75) {
                  v79 = (uint64_t *)v33;
                }
                unsigned int v76 = v72 + v74++;
                unsigned int v72 = v76 & v71;
                uint64_t v33 = v61 + 8 * (v76 & v71);
                uint64_t v73 = *(void *)v33;
                if (*(void *)v33 == -1) {
                  goto LABEL_122;
                }
              }
            }
            goto LABEL_96;
          }
          v62 = 0;
          uint64_t v63 = 8 * v33;
          v64 = (unint64_t *)v54[2];
          while (*v64 != v6)
          {
            if (*v64 == -2) {
              v62 = v64;
            }
            ++v64;
            v63 -= 8;
            if (!v63)
            {
              if (!v62) {
                goto LABEL_94;
              }
              unint64_t *v62 = v6;
              --*((_DWORD *)v54 + 8);
              break;
            }
          }
LABEL_96:
          uint64_t v5 = a3;
          uint64_t v65 = *(unsigned int *)(a3 + 64);
          if (!v65) {
            goto LABEL_100;
          }
          uint64_t v33 = *(void *)(a3 + 48);
          LODWORD(v66) = ((v144 >> 4) ^ (v144 >> 9)) & (v65 - 1);
          v67 = (uint64_t *)(v33 + 16 * v66);
          uint64_t v68 = *v67;
          if (v144 != *v67)
          {
            int v77 = 1;
            while (v68 != -4096)
            {
              int v78 = v66 + v77++;
              uint64_t v66 = v78 & (v65 - 1);
              uint64_t v68 = *(void *)(v33 + 16 * v66);
              if (v144 == v68)
              {
                v67 = (uint64_t *)(v33 + 16 * v66);
                goto LABEL_99;
              }
            }
            goto LABEL_100;
          }
LABEL_99:
          if (v67 != (uint64_t *)(v33 + 16 * v65))
          {
            uint64_t v69 = v67[1];
            if (v69)
            {
              uint64_t v32 = *(void *)(v69 + 8);
              if (v32) {
                continue;
              }
            }
          }
          goto LABEL_100;
        }
      }
LABEL_138:
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v141);
  }
  int v87 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u)
  {
    if (v87)
    {
      uint64_t v132 = a1 + 8;
      unsigned int v133 = 16;
    }
    else
    {
      uint64_t v132 = *(void *)(a1 + 8);
      unsigned int v133 = *(_DWORD *)(a1 + 16);
    }
    v90 = (void *)(v132 + 104 * v133);
    v89 = v90;
  }
  else
  {
    if (v87)
    {
      v88 = (void *)(a1 + 8);
      v89 = (void *)(a1 + 1672);
    }
    else
    {
      v88 = *(void **)(a1 + 8);
      unsigned int v131 = *(_DWORD *)(a1 + 16);
      if (!v131)
      {
        unsigned int v92 = 0;
        v90 = *(void **)(a1 + 8);
        v91 = v90;
        goto LABEL_160;
      }
      v89 = &v88[13 * v131];
    }
    int v87 = *(_DWORD *)a1 & 1;
    v90 = v88;
    while (*v90 == -4096 || *v90 == -8192)
    {
      v90 += 13;
      if (v90 == v89)
      {
        v90 = v89;
        break;
      }
    }
  }
  if (v87)
  {
    v91 = (void *)(a1 + 8);
    unsigned int v92 = 16;
  }
  else
  {
    v91 = *(void **)(a1 + 8);
    unsigned int v92 = *(_DWORD *)(a1 + 16);
  }
  v88 = v89;
LABEL_160:
  v93 = &v91[13 * v92];
  while (v90 != v93)
  {
    uint64_t v94 = v90[2];
    uint64_t v95 = *v90;
    if (v94 == v90[1]) {
      uint64_t v96 = 28;
    }
    else {
      uint64_t v96 = 24;
    }
    uint64_t v97 = *(unsigned int *)((char *)v90 + v96);
    if (v97)
    {
      uint64_t v98 = 8 * v97;
      v99 = (unint64_t *)v90[2];
      while (*v99 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v99;
        v98 -= 8;
        if (!v98) {
          goto LABEL_221;
        }
      }
    }
    else
    {
      v99 = (unint64_t *)v90[2];
    }
    v100 = (unint64_t *)(v94 + 8 * v97);
    if (v99 == v100) {
      goto LABEL_221;
    }
LABEL_192:
    unint64_t v144 = 0;
    unint64_t v113 = *v99;
    unint64_t v144 = *v99;
    if (*(unsigned char *)(a1 + 1672))
    {
      int v114 = 16;
      uint64_t v115 = a1 + 1680;
    }
    else
    {
      int v114 = *(_DWORD *)(a1 + 1688);
      if (!v114)
      {
        v124 = 0;
        goto LABEL_208;
      }
      uint64_t v115 = *(void *)(a1 + 1680);
    }
    int v116 = v114 - 1;
    unsigned int v117 = v116 & ((v113 >> 4) ^ (v113 >> 9));
    v118 = (void *)(v115 + 104 * v117);
    uint64_t v119 = *v118;
    if (v113 == *v118) {
      goto LABEL_209;
    }
    v120 = 0;
    int v121 = 1;
    while (v119 != -4096)
    {
      if (v120) {
        BOOL v122 = 0;
      }
      else {
        BOOL v122 = v119 == -8192;
      }
      if (v122) {
        v120 = v118;
      }
      unsigned int v123 = v117 + v121++;
      unsigned int v117 = v123 & v116;
      v118 = (void *)(v115 + 104 * v117);
      uint64_t v119 = *v118;
      if (v113 == *v118) {
        goto LABEL_209;
      }
    }
    if (v120) {
      v124 = v120;
    }
    else {
      v124 = v118;
    }
LABEL_208:
    v118 = sub_1CBA9D634(a1 + 1672, (uint64_t)&v144, &v144, v124);
    void *v118 = v144;
    v118[1] = v118 + 5;
    v118[2] = v118 + 5;
    v118[3] = 8;
    *((_DWORD *)v118 + 8) = 0;
LABEL_209:
    uint64_t v125 = v118[2];
    uint64_t v126 = *((unsigned int *)v118 + 7);
    if (v125 != v118[1])
    {
      unsigned int v103 = *((_DWORD *)v118 + 6);
LABEL_173:
      if (3 * v103 <= 4 * ((int)v126 - *((_DWORD *)v118 + 8)))
      {
        if (v103 >= 0x40) {
          v103 *= 2;
        }
        else {
          unsigned int v103 = 128;
        }
      }
      else if (v103 - v126 >= v103 >> 3)
      {
        goto LABEL_175;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v118 + 1), v103);
      unsigned int v103 = *((_DWORD *)v118 + 6);
      uint64_t v125 = v118[2];
LABEL_175:
      unsigned int v104 = v103 - 1;
      unsigned int v105 = (v103 - 1) & ((v95 >> 4) ^ (v95 >> 9));
      v106 = (void *)(v125 + 8 * v105);
      uint64_t v107 = *v106;
      if (*v106 == -1)
      {
        v108 = 0;
LABEL_185:
        if (v108) {
          v112 = v108;
        }
        else {
          v112 = v106;
        }
        if (*v112 != v95)
        {
          if (*v112 == -2) {
            --*((_DWORD *)v118 + 8);
          }
          else {
            ++*((_DWORD *)v118 + 7);
          }
          void *v112 = v95;
        }
      }
      else
      {
        v108 = 0;
        int v109 = 1;
        while (v107 != v95)
        {
          if (v108) {
            BOOL v110 = 0;
          }
          else {
            BOOL v110 = v107 == -2;
          }
          if (v110) {
            v108 = v106;
          }
          unsigned int v111 = v105 + v109++;
          unsigned int v105 = v111 & v104;
          v106 = (void *)(v125 + 8 * (v111 & v104));
          uint64_t v107 = *v106;
          if (*v106 == -1) {
            goto LABEL_185;
          }
        }
      }
      goto LABEL_219;
    }
    if (v126)
    {
      v127 = 0;
      uint64_t v128 = 8 * v126;
      v129 = (void *)v118[2];
      while (*v129 != v95)
      {
        if (*v129 == -2) {
          v127 = v129;
        }
        ++v129;
        v128 -= 8;
        if (!v128)
        {
          if (!v127) {
            goto LABEL_217;
          }
          void *v127 = v95;
          --*((_DWORD *)v118 + 8);
          goto LABEL_219;
        }
      }
      goto LABEL_219;
    }
LABEL_217:
    unsigned int v103 = *((_DWORD *)v118 + 6);
    if (v126 >= v103) {
      goto LABEL_173;
    }
    *((_DWORD *)v118 + 7) = v126 + 1;
    *(void *)(v125 + 8 * v126) = v95;
LABEL_219:
    v101 = v99 + 1;
    while (v101 != v100)
    {
      unint64_t v102 = *v101++;
      if (v102 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v99 = v101 - 1;
        goto LABEL_192;
      }
    }
LABEL_221:
    v130 = v90 + 13;
    v90 = v88;
    if (v130 != v88)
    {
      v90 = v130;
      while ((*v90 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v90 += 13;
        if (v90 == v88)
        {
          v90 = v88;
          break;
        }
      }
    }
  }
}

uint64_t sub_1CC821768(uint64_t a1, unsigned int *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    uint64_t v5 = a1 + 8;
    unsigned int v6 = 16;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    if (!v6) {
      goto LABEL_10;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v7 = 104 * v6;
  int v8 = (void **)(v5 + 16);
  do
  {
    uint64_t v9 = (uint64_t)*(v8 - 2);
    if (v9 != -4096 && v9 != -8192 && *v8 != *(v8 - 1)) {
      free(*v8);
    }
    v8 += 13;
    v7 -= 104;
  }
  while (v7);
  unsigned int v4 = *(_DWORD *)a1;
LABEL_10:
  if ((v4 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  *(void *)a1 = 1;
  for (uint64_t i = 8; i != 1672; i += 104)
    *(void *)(a1 + i) = -4096;
  sub_1CC821844((unsigned int *)a1, a2);
  return a1;
}

void sub_1CC821844(unsigned int *a1, unsigned int *a2)
{
  uint64_t v3 = a1;
  unsigned int v4 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  unsigned int v5 = a1[1];
  *a1 = v4 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v5;
  unsigned int v6 = *a2;
  if (*a1)
  {
    if ((v6 & 1) == 0)
    {
      int v8 = a2;
      goto LABEL_7;
    }
    unint64_t v19 = 0;
    while (1)
    {
      int v20 = &v3[v19];
      int v22 = (long long *)&a2[v19 + 2];
      uint64_t v21 = *(void *)v22;
      uint64_t v23 = *(void *)&v3[v19 + 2];
      if (v23 != -4096 && v23 != -8192 && v21 != -4096 && v21 != -8192)
      {
        v24 = &v3[v19];
        uint64_t v25 = *(const void **)&v3[v19 + 4];
        *(void *)&long long v42 = *(void *)&v3[v19 + 2];
        *((void *)&v42 + 1) = v47;
        __int16 v26 = *(const void **)&v3[v19 + 6];
        if (v26 == v25)
        {
          uint64_t v43 = v47;
          uint64_t v27 = v24[9];
          if (v27) {
            memmove(v47, v26, 8 * v27);
          }
        }
        else
        {
          uint64_t v43 = *(unsigned char **)&v3[v19 + 6];
          *((void *)v24 + 3) = v25;
          LODWORD(v27) = v24[9];
          uint64_t v21 = *(void *)v22;
        }
        BOOL v28 = &v3[v19];
        unsigned int v44 = v3[v19 + 8];
        int v45 = v27;
        unsigned int v46 = v3[v19 + 10];
        *((void *)v28 + 4) = 8;
        void v28[10] = 0;
        *((void *)v20 + 1) = v21;
        if (a2 != v3)
        {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)&v3[v19 + 4], 8, (double *)&a2[v19 + 4]);
          uint64_t v23 = v42;
        }
        *(void *)int v22 = v23;
        if (v22 != &v42) {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)&a2[v19 + 4], 8, (double *)&v42 + 1);
        }
        unsigned int v29 = v43;
        if (v43 == *((unsigned char **)&v42 + 1)) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      *((void *)v20 + 1) = v21;
      *(void *)int v22 = v23;
      if ((v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000) {
          goto LABEL_44;
        }
        __int16 v30 = &v3[v19];
        char v31 = (int *)&a2[v19];
        uint64_t v32 = &v3[v19 + 12];
        *(void *)&v3[v19 + 4] = v32;
        uint64_t v33 = *(const void **)&a2[v19 + 4];
        uint64_t v34 = *(const void **)&a2[v19 + 6];
        if (v34 == v33)
        {
          *((void *)v30 + 3) = v32;
          uint64_t v35 = v31[9];
          uint64_t v33 = (const void *)*((void *)v31 + 3);
          if (v35)
          {
            memmove(v32, v33, 8 * v35);
            uint64_t v34 = (const void *)*((void *)v31 + 2);
            uint64_t v33 = (const void *)*((void *)v31 + 3);
          }
        }
        else
        {
          *((void *)v30 + 3) = v34;
          *((void *)v31 + 3) = v33;
          uint64_t v34 = v33;
        }
        uint64_t v36 = (int *)&a2[v19];
        uint64_t v37 = (int *)&v3[v19];
      }
      else
      {
        v38 = (int *)&a2[v19];
        uint64_t v39 = &v3[v19];
        uint64_t v40 = (int *)&a2[v19 + 12];
        *(void *)&a2[v19 + 4] = v40;
        uint64_t v33 = *(const void **)&v3[v19 + 4];
        uint64_t v34 = *(const void **)&v3[v19 + 6];
        if (v34 == v33)
        {
          *((void *)v38 + 3) = v40;
          uint64_t v41 = v39[9];
          uint64_t v33 = (const void *)*((void *)v39 + 3);
          if (v41)
          {
            memmove(v40, v33, 8 * v41);
            uint64_t v34 = (const void *)*((void *)v39 + 2);
            uint64_t v33 = (const void *)*((void *)v39 + 3);
          }
        }
        else
        {
          *((void *)v38 + 3) = v34;
          *((void *)v39 + 3) = v33;
          uint64_t v34 = v33;
        }
        uint64_t v36 = (int *)&v3[v19];
        uint64_t v37 = (int *)&a2[v19];
      }
      *((void *)v37 + 4) = *((void *)v36 + 4);
      v37[10] = v36[10];
      *((void *)v36 + 4) = 8;
      v36[10] = 0;
      if (v33 != v34)
      {
        unsigned int v29 = (void *)v33;
LABEL_43:
        free(v29);
      }
LABEL_44:
      v19 += 26;
      if (v19 == 416) {
        return;
      }
    }
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = *((void *)a1 + 1);
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v7;
    LODWORD(v7) = a1[4];
    a1[4] = a2[4];
    a2[4] = v7;
    return;
  }
  unsigned int v6 = *a1;
  int v8 = a1;
  uint64_t v3 = a2;
LABEL_7:
  uint64_t v9 = 0;
  long long v42 = *(_OWORD *)(v8 + 2);
  *int v8 = v6 | 1;
  do
  {
    int v10 = &v8[v9];
    unsigned int v11 = &v3[v9];
    uint64_t v12 = *(void *)&v3[v9 + 2];
    *(void *)&v8[v9 + 2] = v12;
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v13 = v10 + 12;
      *((void *)v10 + 2) = v10 + 12;
      unsigned int v14 = (void *)*((void *)v11 + 2);
      int v15 = (void *)*((void *)v11 + 3);
      if (v15 == v14)
      {
        *((void *)v10 + 3) = v13;
        uint64_t v16 = v3[v9 + 9];
        unsigned int v14 = (void *)*((void *)v11 + 3);
        if (v16)
        {
          memmove(v13, v14, 8 * v16);
          int v15 = (void *)*((void *)v11 + 2);
          unsigned int v14 = (void *)*((void *)v11 + 3);
        }
      }
      else
      {
        *((void *)v10 + 3) = v15;
        *((void *)v11 + 3) = v14;
        int v15 = v14;
      }
      unsigned int v17 = &v3[v9];
      v18 = &v8[v9];
      *((void *)v18 + 4) = *(void *)&v3[v9 + 8];
      v18[10] = v3[v9 + 10];
      *((void *)v17 + 4) = 8;
      v17[10] = 0;
      if (v14 != v15) {
        free(v14);
      }
    }
    v9 += 26;
  }
  while (v9 != 416);
  *v3 &= ~1u;
  *(_OWORD *)(v3 + 2) = v42;
}

void *sub_1CC821BE4(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v3 = result + 1;
      unsigned int v4 = result + 17;
      goto LABEL_9;
    }
    uint64_t v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!v2)
      {
        int v5 = 0;
LABEL_11:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v3 = (void *)result[1];
      unsigned int v4 = &v3[2 * v2];
      do
      {
LABEL_9:
        *uint64_t v3 = -4096;
        v3 += 2;
      }
      while (v3 != v4);
      int v5 = *(_DWORD *)result & 1;
      goto LABEL_11;
    }
    return sub_1CD643230(result);
  }
  return result;
}

void sub_1CC821C60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v134[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a4 + 3352) + 32 * sub_1CC8228B4(a4, a2);
  v124[8] = *(void *)v7;
  uint64_t v125 = &v127;
  uint64_t v126 = 0x100000000;
  if (*(_DWORD *)(v7 + 16))
  {
    sub_1CC823C14((uint64_t)&v125, v7 + 8);
    unsigned int v8 = v126;
  }
  else
  {
    unsigned int v8 = 0;
  }
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x500000000;
  uint64_t v132 = v134;
  uint64_t v133 = 0x500000000;
  v120 = (char *)v124;
  int v121 = (char *)v124;
  uint64_t v122 = 8;
  int v123 = 0;
  if (!v8) {
    goto LABEL_278;
  }
  uint64_t v9 = (char *)v125;
  uint64_t v115 = (char *)v125 + 4 * v8;
  do
  {
    v128[0] = v129;
    v128[1] = (void *)0xA00000000;
    v131[0] = 0;
    v131[1] = 0;
    v130 = v131;
    if (v133 >= (unint64_t)HIDWORD(v133)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v132[v133] = *(_DWORD *)v9;
    BOOL v10 = __CFADD__(v133, 1);
    int v11 = v133 + 1;
    LODWORD(v133) = v133 + 1;
    if (!v10)
    {
      while (1)
      {
        int v12 = v132[v11 - 1];
        LODWORD(v133) = v11 - 1;
        uint64_t v13 = *(void *)&v12 & 0xFFFFFFLL;
        LODWORD(v116) = v12 & 0xFFFFFF;
        if ((sub_1CC8227A0((uint64_t)v128, (unsigned int *)&v116) & 0x100000000) != 0) {
          break;
        }
LABEL_238:
        int v11 = v133;
        if (!v133) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = *(void *)(a4 + 3352) + 32 * v13;
      uint64_t v15 = *(void *)v14;
      uint64_t v116 = *(void *)v14;
      unsigned int v117 = &v119;
      uint64_t v118 = 0x100000000;
      if (*(_DWORD *)(v14 + 16))
      {
        sub_1CC823C14((uint64_t)&v117, v14 + 8);
        uint64_t v15 = v116;
      }
      uint64_t v16 = *(void *)(v15 + 40);
      if (v16 == v15 + 40)
      {
        uint64_t v18 = 0;
      }
      else
      {
        if (v16) {
          uint64_t v17 = v16 - 24;
        }
        else {
          uint64_t v17 = 0;
        }
        if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v17;
        }
      }
      uint64_t v19 = *(void *)(a3 + 8);
      uint64_t v20 = *(unsigned int *)(a3 + 20);
      if (v19 == *(void *)a3)
      {
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 8 * v20;
          uint64_t v23 = *(void **)(a3 + 8);
          while (*v23 != v15)
          {
            if (*v23 == -2) {
              uint64_t v21 = v23;
            }
            ++v23;
            v22 -= 8;
            if (!v22)
            {
              if (!v21) {
                goto LABEL_32;
              }
              void *v21 = v15;
              --*(_DWORD *)(a3 + 24);
              break;
            }
          }
LABEL_56:
          int v34 = *(unsigned __int8 *)(v18 + 16);
          if (v34 == 30 && v18 != 0)
          {
            uint64_t v40 = *(void *)(v18 - 96);
            uint64_t v41 = v120;
            if (v121 == v120)
            {
              int v42 = HIDWORD(v122);
              uint64_t v43 = &v121[8 * HIDWORD(v122)];
              if (HIDWORD(v122))
              {
                uint64_t v44 = 0;
                while (*(void *)&v121[v44] != v40)
                {
                  v44 += 8;
                  if (8 * HIDWORD(v122) == v44) {
                    goto LABEL_106;
                  }
                }
                uint64_t v43 = &v121[v44];
              }
LABEL_106:
              uint64_t v41 = v121;
            }
            else
            {
              int v47 = v122 - 1;
              unsigned int v48 = (v122 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              uint64_t v43 = &v121[8 * v48];
              uint64_t v49 = *(void *)v43;
              if (*(void *)v43 == -1)
              {
                int v50 = 0;
LABEL_195:
                if (v50) {
                  uint64_t v43 = v50;
                }
                int v42 = HIDWORD(v122);
                if (*(void *)v43 != v40) {
                  uint64_t v43 = &v121[8 * v122];
                }
              }
              else
              {
                int v50 = 0;
                int v51 = 1;
                while (v49 != v40)
                {
                  if (v50) {
                    BOOL v52 = 0;
                  }
                  else {
                    BOOL v52 = v49 == -2;
                  }
                  if (v52) {
                    int v50 = v43;
                  }
                  unsigned int v53 = v48 + v51++;
                  unsigned int v48 = v53 & v47;
                  uint64_t v43 = &v121[8 * (v53 & v47)];
                  uint64_t v49 = *(void *)v43;
                  if (*(void *)v43 == -1) {
                    goto LABEL_195;
                  }
                }
                int v42 = HIDWORD(v122);
              }
            }
            if (v121 == v41) {
              int v62 = v42;
            }
            else {
              int v62 = v122;
            }
            if (v43 != &v121[8 * v62]) {
              goto LABEL_236;
            }
            unint64_t v63 = *(unsigned int *)(a1 + 8);
            if (v63 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v63) = v40;
            ++*(_DWORD *)(a1 + 8);
            v64 = v121;
            uint64_t v65 = HIDWORD(v122);
            if (v121 != v120)
            {
              unsigned int v69 = v122;
              goto LABEL_145;
            }
            if (HIDWORD(v122))
            {
              uint64_t v66 = 0;
              uint64_t v67 = 8 * HIDWORD(v122);
              uint64_t v68 = v121;
              while (*v68 != v40)
              {
                if (*v68 == -2) {
                  uint64_t v66 = v68;
                }
                ++v68;
                v67 -= 8;
                if (!v67)
                {
                  if (v66) {
                    goto LABEL_253;
                  }
                  goto LABEL_120;
                }
              }
              goto LABEL_236;
            }
LABEL_120:
            unsigned int v69 = v122;
            if (HIDWORD(v122) >= v122)
            {
LABEL_145:
              if (3 * v69 <= 4 * (HIDWORD(v122) - v123))
              {
                if (v69 >= 0x40) {
                  v69 *= 2;
                }
                else {
                  unsigned int v69 = 128;
                }
              }
              else if (v69 - HIDWORD(v122) >= v69 >> 3)
              {
                goto LABEL_147;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v120, v69);
              unsigned int v69 = v122;
              v64 = v121;
LABEL_147:
              unsigned int v84 = v69 - 1;
              unsigned int v85 = (v69 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              unsigned int v86 = &v64[v85];
              uint64_t v87 = *v86;
              if (*v86 != -1)
              {
                v88 = 0;
                int v89 = 1;
                while (v87 != v40)
                {
                  if (v88) {
                    BOOL v90 = 0;
                  }
                  else {
                    BOOL v90 = v87 == -2;
                  }
                  if (v90) {
                    v88 = v86;
                  }
                  unsigned int v91 = v85 + v89++;
                  unsigned int v85 = v91 & v84;
                  unsigned int v86 = &v64[v91 & v84];
                  uint64_t v87 = *v86;
                  if (*v86 == -1) {
                    goto LABEL_229;
                  }
                }
                goto LABEL_236;
              }
LABEL_228:
              v88 = 0;
LABEL_229:
              if (v88) {
                int v114 = v88;
              }
              else {
                int v114 = v86;
              }
              if (*v114 != v40)
              {
                if (*v114 == -2) {
                  --v123;
                }
                else {
                  ++HIDWORD(v122);
                }
                *int v114 = v40;
              }
              goto LABEL_236;
            }
LABEL_193:
            HIDWORD(v122) = v65 + 1;
            v64[v65] = v40;
LABEL_236:
            sub_1CBE559EC((unsigned int *)&v132, v117, (unsigned char *)v117 + 4 * v118);
            if (v117 != &v119) {
              free(v117);
            }
            goto LABEL_238;
          }
          if (v34 == 32 && v18 != 0)
          {
            int v45 = *(_DWORD *)(v18 + 20);
            if ((v45 & 0x40000000) != 0) {
              unsigned int v46 = *(uint64_t **)(v18 - 8);
            }
            else {
              unsigned int v46 = (uint64_t *)(v18 - 32 * (v45 & 0x7FFFFFF));
            }
            uint64_t v40 = *v46;
            BOOL v58 = v120;
            if (v121 == v120)
            {
              int v59 = HIDWORD(v122);
              v60 = &v121[8 * HIDWORD(v122)];
              if (HIDWORD(v122))
              {
                uint64_t v61 = 0;
                while (*(void *)&v121[v61] != v40)
                {
                  v61 += 8;
                  if (8 * HIDWORD(v122) == v61) {
                    goto LABEL_178;
                  }
                }
                v60 = &v121[v61];
              }
LABEL_178:
              BOOL v58 = v121;
            }
            else
            {
              int v77 = v122 - 1;
              unsigned int v78 = (v122 - 1) & ((v40 >> 4) ^ (v40 >> 9));
              v60 = &v121[8 * v78];
              uint64_t v79 = *(void *)v60;
              if (*(void *)v60 == -1)
              {
                v80 = 0;
LABEL_248:
                if (v80) {
                  v60 = v80;
                }
                int v59 = HIDWORD(v122);
                if (*(void *)v60 != v40) {
                  v60 = &v121[8 * v122];
                }
              }
              else
              {
                v80 = 0;
                int v81 = 1;
                while (v79 != v40)
                {
                  if (v80) {
                    BOOL v82 = 0;
                  }
                  else {
                    BOOL v82 = v79 == -2;
                  }
                  if (v82) {
                    v80 = v60;
                  }
                  unsigned int v83 = v78 + v81++;
                  unsigned int v78 = v83 & v77;
                  v60 = &v121[8 * (v83 & v77)];
                  uint64_t v79 = *(void *)v60;
                  if (*(void *)v60 == -1) {
                    goto LABEL_248;
                  }
                }
                int v59 = HIDWORD(v122);
              }
            }
            if (v121 == v58) {
              int v97 = v59;
            }
            else {
              int v97 = v122;
            }
            if (v60 != &v121[8 * v97]) {
              goto LABEL_236;
            }
            unint64_t v98 = *(unsigned int *)(a1 + 8);
            if (v98 >= *(unsigned int *)(a1 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a1 + 8 * v98) = v40;
            ++*(_DWORD *)(a1 + 8);
            v64 = v121;
            uint64_t v65 = HIDWORD(v122);
            if (v121 == v120)
            {
              if (HIDWORD(v122))
              {
                uint64_t v66 = 0;
                uint64_t v99 = 8 * HIDWORD(v122);
                v100 = v121;
                while (*v100 != v40)
                {
                  if (*v100 == -2) {
                    uint64_t v66 = v100;
                  }
                  ++v100;
                  v99 -= 8;
                  if (!v99)
                  {
                    if (v66) {
                      goto LABEL_253;
                    }
                    goto LABEL_192;
                  }
                }
                goto LABEL_236;
              }
LABEL_192:
              unsigned int v101 = v122;
              if (HIDWORD(v122) < v122) {
                goto LABEL_193;
              }
            }
            else
            {
              unsigned int v101 = v122;
            }
            if (3 * v101 <= 4 * (HIDWORD(v122) - v123))
            {
              if (v101 >= 0x40) {
                v101 *= 2;
              }
              else {
                unsigned int v101 = 128;
              }
            }
            else if (v101 - HIDWORD(v122) >= v101 >> 3)
            {
              goto LABEL_217;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v120, v101);
            unsigned int v101 = v122;
            v64 = v121;
LABEL_217:
            unsigned int v108 = v101 - 1;
            unsigned int v109 = (v101 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            unsigned int v86 = &v64[v109];
            uint64_t v110 = *v86;
            if (*v86 != -1)
            {
              v88 = 0;
              int v111 = 1;
              while (v110 != v40)
              {
                if (v88) {
                  BOOL v112 = 0;
                }
                else {
                  BOOL v112 = v110 == -2;
                }
                if (v112) {
                  v88 = v86;
                }
                unsigned int v113 = v109 + v111++;
                unsigned int v109 = v113 & v108;
                unsigned int v86 = &v64[v113 & v108];
                uint64_t v110 = *v86;
                if (*v86 == -1) {
                  goto LABEL_229;
                }
              }
              goto LABEL_236;
            }
            goto LABEL_228;
          }
          if (v34 == 31) {
            uint64_t v37 = v18;
          }
          else {
            uint64_t v37 = 0;
          }
          int v38 = *(_DWORD *)(v37 + 20);
          if ((v38 & 0x40000000) != 0) {
            uint64_t v39 = *(uint64_t **)(v37 - 8);
          }
          else {
            uint64_t v39 = (uint64_t *)(v37 - 32 * (v38 & 0x7FFFFFF));
          }
          uint64_t v40 = *v39;
          v54 = v120;
          if (v121 == v120)
          {
            int v55 = HIDWORD(v122);
            v56 = &v121[8 * HIDWORD(v122)];
            if (HIDWORD(v122))
            {
              uint64_t v57 = 0;
              while (*(void *)&v121[v57] != v40)
              {
                v57 += 8;
                if (8 * HIDWORD(v122) == v57) {
                  goto LABEL_161;
                }
              }
              v56 = &v121[v57];
            }
LABEL_161:
            v54 = v121;
          }
          else
          {
            int v70 = v122 - 1;
            unsigned int v71 = (v122 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            v56 = &v121[8 * v71];
            uint64_t v72 = *(void *)v56;
            if (*(void *)v56 == -1)
            {
              uint64_t v73 = 0;
LABEL_242:
              if (v73) {
                v56 = v73;
              }
              int v55 = HIDWORD(v122);
              if (*(void *)v56 != v40) {
                v56 = &v121[8 * v122];
              }
            }
            else
            {
              uint64_t v73 = 0;
              int v74 = 1;
              while (v72 != v40)
              {
                if (v73) {
                  BOOL v75 = 0;
                }
                else {
                  BOOL v75 = v72 == -2;
                }
                if (v75) {
                  uint64_t v73 = v56;
                }
                unsigned int v76 = v71 + v74++;
                unsigned int v71 = v76 & v70;
                v56 = &v121[8 * (v76 & v70)];
                uint64_t v72 = *(void *)v56;
                if (*(void *)v56 == -1) {
                  goto LABEL_242;
                }
              }
              int v55 = HIDWORD(v122);
            }
          }
          if (v121 == v54) {
            int v92 = v55;
          }
          else {
            int v92 = v122;
          }
          if (v56 != &v121[8 * v92]) {
            goto LABEL_236;
          }
          unint64_t v93 = *(unsigned int *)(a1 + 8);
          if (v93 >= *(unsigned int *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a1 + 8 * v93) = v40;
          ++*(_DWORD *)(a1 + 8);
          v64 = v121;
          uint64_t v65 = HIDWORD(v122);
          if (v121 == v120)
          {
            if (HIDWORD(v122))
            {
              uint64_t v66 = 0;
              uint64_t v94 = 8 * HIDWORD(v122);
              uint64_t v95 = v121;
              while (*v95 != v40)
              {
                if (*v95 == -2) {
                  uint64_t v66 = v95;
                }
                ++v95;
                v94 -= 8;
                if (!v94)
                {
                  if (!v66) {
                    goto LABEL_175;
                  }
LABEL_253:
                  *uint64_t v66 = v40;
                  --v123;
                  goto LABEL_236;
                }
              }
              goto LABEL_236;
            }
LABEL_175:
            unsigned int v96 = v122;
            if (HIDWORD(v122) < v122) {
              goto LABEL_193;
            }
          }
          else
          {
            unsigned int v96 = v122;
          }
          if (3 * v96 <= 4 * (HIDWORD(v122) - v123))
          {
            if (v96 >= 0x40) {
              v96 *= 2;
            }
            else {
              unsigned int v96 = 128;
            }
          }
          else if (v96 - HIDWORD(v122) >= v96 >> 3)
          {
            goto LABEL_203;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v120, v96);
          unsigned int v96 = v122;
          v64 = v121;
LABEL_203:
          unsigned int v102 = v96 - 1;
          unsigned int v103 = (v96 - 1) & ((v40 >> 4) ^ (v40 >> 9));
          unsigned int v86 = &v64[v103];
          uint64_t v104 = *v86;
          if (*v86 != -1)
          {
            v88 = 0;
            int v105 = 1;
            while (v104 != v40)
            {
              if (v88) {
                BOOL v106 = 0;
              }
              else {
                BOOL v106 = v104 == -2;
              }
              if (v106) {
                v88 = v86;
              }
              unsigned int v107 = v103 + v105++;
              unsigned int v103 = v107 & v102;
              unsigned int v86 = &v64[v107 & v102];
              uint64_t v104 = *v86;
              if (*v86 == -1) {
                goto LABEL_229;
              }
            }
            goto LABEL_236;
          }
          goto LABEL_228;
        }
LABEL_32:
        unsigned int v24 = *(_DWORD *)(a3 + 16);
        if (v20 < v24)
        {
          *(_DWORD *)(a3 + 20) = v20 + 1;
          *(void *)(v19 + 8 * v20) = v15;
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v24 = *(_DWORD *)(a3 + 16);
      }
      if (3 * v24 <= 4 * ((int)v20 - *(_DWORD *)(a3 + 24)))
      {
        if (v24 >= 0x40) {
          v24 *= 2;
        }
        else {
          unsigned int v24 = 128;
        }
      }
      else if (v24 - v20 >= v24 >> 3)
      {
        goto LABEL_37;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v24);
      unsigned int v24 = *(_DWORD *)(a3 + 16);
      uint64_t v19 = *(void *)(a3 + 8);
LABEL_37:
      unsigned int v25 = v24 - 1;
      unsigned int v26 = (v24 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v27 = (void *)(v19 + 8 * v26);
      uint64_t v28 = *v27;
      if (*v27 == -1)
      {
        unsigned int v29 = 0;
LABEL_49:
        if (v29) {
          uint64_t v33 = v29;
        }
        else {
          uint64_t v33 = v27;
        }
        if (*v33 != v15)
        {
          if (*v33 == -2) {
            --*(_DWORD *)(a3 + 24);
          }
          else {
            ++*(_DWORD *)(a3 + 20);
          }
          *uint64_t v33 = v15;
        }
      }
      else
      {
        unsigned int v29 = 0;
        int v30 = 1;
        while (v28 != v15)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            unsigned int v29 = v27;
          }
          unsigned int v32 = v26 + v30++;
          unsigned int v26 = v32 & v25;
          uint64_t v27 = (void *)(v19 + 8 * (v32 & v25));
          uint64_t v28 = *v27;
          if (*v27 == -1) {
            goto LABEL_49;
          }
        }
      }
      goto LABEL_56;
    }
LABEL_9:
    sub_1CB833A08((uint64_t)&v130, v131[0]);
    if (v128[0] != v129) {
      free(v128[0]);
    }
    v9 += 4;
  }
  while (v9 != v115);
  if (v121 != v120) {
    free(v121);
  }
LABEL_278:
  if (v132 != (_DWORD *)v134) {
    free(v132);
  }
  if (v125 != &v127) {
    free(v125);
  }
}

unint64_t sub_1CC8227A0(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 72))
  {
    sub_1CB84AEB8((uint64_t **)(a1 + 56), a2, a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (v4)
    {
      uint64_t v6 = 4 * v4;
      uint64_t v7 = *(_DWORD **)a1;
      while (*v7 != v5)
      {
        ++v7;
        v6 -= 4;
        if (!v6) {
          goto LABEL_6;
        }
      }
      if (v6) {
        return 1;
      }
LABEL_6:
      if (v4 <= 9) {
        goto LABEL_7;
      }
      do
      {
        BOOL v10 = (unsigned int *)(*(void *)a1 + 4 * v4 - 4);
        sub_1CB84AEB8((uint64_t **)(a1 + 56), v10, v10);
        LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
      }
      while (v4);
      sub_1CB84AEB8((uint64_t **)(a1 + 56), a2, a2);
    }
    else
    {
LABEL_7:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1CC8228B4(uint64_t a1, void *a2)
{
  v101[24] = *MEMORY[0x1E4F143B8];
  int v97 = a2;
  int v3 = *(_DWORD *)(a1 + 3688);
  uint64_t v4 = a1 + 3696;
  if (v3)
  {
    int v6 = 8;
    uint64_t v5 = a1 + 3696;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 3696);
    int v6 = *(_DWORD *)(a1 + 3704);
    if (!v6)
    {
      uint64_t v13 = 0;
      goto LABEL_10;
    }
  }
  int v7 = v6 - 1;
  LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = v5 + 16 * v8;
  BOOL v10 = *(void **)v9;
  if (*(void **)v9 == a2) {
    goto LABEL_11;
  }
  int v11 = 1;
  while (v10 != (void *)-4096)
  {
    int v12 = v8 + v11++;
    uint64_t v8 = v12 & v7;
    BOOL v10 = *(void **)(v5 + 16 * v8);
    if (v10 == a2)
    {
      uint64_t v9 = v5 + 16 * v8;
      goto LABEL_11;
    }
  }
  if (v3)
  {
    uint64_t v13 = 8;
    uint64_t v5 = a1 + 3696;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 3696);
    uint64_t v13 = *(unsigned int *)(a1 + 3704);
  }
LABEL_10:
  uint64_t v9 = v5 + 16 * v13;
LABEL_11:
  if (v3)
  {
    uint64_t v15 = 8;
    uint64_t v14 = a1 + 3696;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 3696);
    uint64_t v15 = *(unsigned int *)(a1 + 3704);
  }
  if (v14 + 16 * v15 != v9) {
    return *(unsigned int *)(v9 + 8);
  }
  uint64_t v16 = *(unsigned int *)(a1 + 3360);
  *((_DWORD *)sub_1CC8233D8(a1 + 3688, &v97) + 2) = v16;
  unint64_t v98 = v97;
  uint64_t v99 = v101;
  uint64_t v100 = 0x100000000;
  sub_1CC823010(a1 + 3352, (unint64_t)&v98);
  if (v99 != v101) {
    free(v99);
  }
  uint64_t v18 = sub_1CC823A34(a1, (uint64_t)v97);
  if (*(unsigned char *)a1)
  {
    unsigned int v20 = 16;
    uint64_t v19 = a1 + 8;
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 8);
    unsigned int v20 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v21 = (uint64_t *)(v19 + 104 * v20);
  uint64_t v22 = v18 + 1;
  if (v21 == v18) {
    uint64_t v22 = 0;
  }
  if (*((_DWORD *)v22 + 5) != *((_DWORD *)v22 + 6))
  {
    uint64_t v23 = (void *)v22[1];
    uint64_t v24 = 16;
    if (v23 == (void *)*v22) {
      uint64_t v24 = 20;
    }
    uint64_t v25 = *(unsigned int *)((char *)v22 + v24);
    unsigned int v26 = &v23[v25];
    if (v25)
    {
      uint64_t v27 = 8 * v25;
      do
      {
        if (*v23 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_28;
        }
        ++v23;
        v27 -= 8;
      }
      while (v27);
      uint64_t v23 = v26;
    }
LABEL_28:
    *(void *)&long long v93 = v97;
    *((void *)&v93 + 1) = v23;
    uint64_t v94 = (uint64_t)v26;
    uint64_t v95 = v26;
    v96[0] = v26;
    unint64_t v98 = &v100;
    uint64_t v99 = (void *)0x500000000;
    sub_1CC823AF8((uint64_t *)&v98, 1uLL, &v93);
    *(void *)&long long v93 = v96;
    *((void *)&v93 + 1) = v96;
    uint64_t v94 = 16;
    LODWORD(v95) = 0;
    unsigned int v28 = v99;
    if (!v99) {
      goto LABEL_115;
    }
LABEL_29:
    unsigned int v29 = (char *)v98 + 40 * v28;
    if (*((void *)v29 - 4) == *((void *)v29 - 2))
    {
      --v28;
      goto LABEL_86;
    }
    while (1)
    {
      uint64_t v92 = 0;
      uint64_t v30 = **((void **)v29 - 4);
      uint64_t v92 = v30;
      int v31 = *(_DWORD *)(a1 + 3688);
      unsigned int v32 = v30 >> 4;
      if (v31)
      {
        int v34 = 8;
        uint64_t v33 = v4;
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 3696);
        int v34 = *(_DWORD *)(a1 + 3704);
        if (!v34)
        {
          uint64_t v36 = 0;
          goto LABEL_39;
        }
      }
      int v35 = v34 - 1;
      LODWORD(v36) = (v34 - 1) & (v32 ^ (v30 >> 9));
      uint64_t v37 = (uint64_t *)(v33 + 16 * v36);
      uint64_t v38 = *v37;
      if (*v37 == v30) {
        goto LABEL_40;
      }
      int v39 = 1;
      while (v38 != -4096)
      {
        int v40 = v36 + v39++;
        uint64_t v36 = v40 & v35;
        uint64_t v38 = *(void *)(v33 + 16 * v36);
        if (v38 == v30) {
          goto LABEL_39;
        }
      }
      if (v31)
      {
        uint64_t v33 = v4;
        uint64_t v36 = 8;
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 3696);
        uint64_t v36 = *(unsigned int *)(a1 + 3704);
      }
LABEL_39:
      uint64_t v37 = (uint64_t *)(v33 + 16 * v36);
LABEL_40:
      if (v31)
      {
        if ((uint64_t *)(a1 + 3824) != v37)
        {
          uint64_t v43 = *((void *)v29 - 5);
          LODWORD(v42) = 8;
          uint64_t v41 = v4;
LABEL_43:
          unsigned int v44 = v42 - 1;
          LODWORD(v42) = ((v43 >> 4) ^ (v43 >> 9)) & (v42 - 1);
          int v45 = (uint64_t *)(v41 + 16 * v42);
          uint64_t v46 = *v45;
          if (*v45 != v43)
          {
            int v47 = 1;
            while (v46 != -4096)
            {
              int v48 = v42 + v47++;
              uint64_t v42 = v48 & v44;
              uint64_t v46 = *(void *)(v41 + 16 * v42);
              if (v46 == v43)
              {
                int v45 = (uint64_t *)(v41 + 16 * v42);
                goto LABEL_51;
              }
            }
            if (v31)
            {
              uint64_t v41 = v4;
              uint64_t v49 = 8;
            }
            else
            {
              uint64_t v41 = *(void *)(a1 + 3696);
              uint64_t v49 = *(unsigned int *)(a1 + 3704);
            }
            goto LABEL_50;
          }
LABEL_51:
          uint64_t v50 = *((unsigned int *)v45 + 2);
          uint64_t v51 = *(void *)(a1 + 3352);
          unsigned __int8 v52 = sub_1CC8230C4(v30);
          uint64_t v53 = v51 + 32 * v50;
          int v54 = *((_DWORD *)v37 + 2);
          unint64_t v55 = *(unsigned int *)(v53 + 16);
          if (v55 >= *(unsigned int *)(v53 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(v53 + 8) + 4 * v55) = v54 & 0xFFFFFF | (v52 << 24);
          ++*(_DWORD *)(v53 + 16);
          v56 = (unint64_t *)*((void *)v29 - 3);
          uint64_t v57 = (unint64_t *)(*((void *)v29 - 4) + 8);
          do
          {
            *((void *)v29 - 4) = v57;
            if (v57 == v56) {
              break;
            }
            unint64_t v58 = *v57++;
          }
          while (v58 > 0xFFFFFFFFFFFFFFFDLL);
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(a1 + 3696);
        uint64_t v42 = *(unsigned int *)(a1 + 3704);
        if ((uint64_t *)(v41 + 16 * v42) != v37)
        {
          uint64_t v43 = *((void *)v29 - 5);
          if (v42) {
            goto LABEL_43;
          }
          uint64_t v49 = 0;
LABEL_50:
          int v45 = (uint64_t *)(v41 + 16 * v49);
          goto LABEL_51;
        }
      }
      uint64_t v59 = *((void *)&v93 + 1);
      uint64_t v60 = HIDWORD(v94);
      if (*((void *)&v93 + 1) == (void)v93)
      {
        if (HIDWORD(v94))
        {
          uint64_t v61 = 0;
          uint64_t v62 = 8 * HIDWORD(v94);
          unint64_t v63 = (uint64_t *)*((void *)&v93 + 1);
          while (*v63 != v30)
          {
            if (*v63 == -2) {
              uint64_t v61 = v63;
            }
            ++v63;
            v62 -= 8;
            if (!v62)
            {
              if (!v61) {
                goto LABEL_67;
              }
              *uint64_t v61 = v30;
              LODWORD(v95) = v95 - 1;
              goto LABEL_90;
            }
          }
          goto LABEL_55;
        }
LABEL_67:
        unsigned int v64 = v94;
        if (HIDWORD(v94) < v94)
        {
          ++HIDWORD(v94);
          *(void *)(*((void *)&v93 + 1) + 8 * v60) = v30;
          goto LABEL_90;
        }
      }
      else
      {
        unsigned int v64 = v94;
      }
      if (3 * v64 <= 4 * (HIDWORD(v94) - (int)v95))
      {
        if (v64 >= 0x40) {
          v64 *= 2;
        }
        else {
          unsigned int v64 = 128;
        }
      }
      else if (v64 - HIDWORD(v94) >= v64 >> 3)
      {
        goto LABEL_83;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v93, v64);
      unsigned int v64 = v94;
      uint64_t v59 = *((void *)&v93 + 1);
LABEL_83:
      unsigned int v72 = v64 - 1;
      unsigned int v69 = (v64 - 1) & (v32 ^ (v30 >> 9));
      int v70 = (uint64_t *)(v59 + 8 * v69);
      uint64_t v71 = *v70;
      if (*v70 == -1)
      {
        uint64_t v66 = 0;
LABEL_106:
        if (v66) {
          uint64_t v87 = v66;
        }
        else {
          uint64_t v87 = v70;
        }
        if (*v87 != v30)
        {
          if (*v87 == -2) {
            LODWORD(v95) = v95 - 1;
          }
          else {
            ++HIDWORD(v94);
          }
          *uint64_t v87 = v30;
LABEL_90:
          uint64_t v73 = sub_1CC823A34(a1, v92);
          if (*(unsigned char *)a1)
          {
            uint64_t v74 = a1 + 8;
            unsigned int v75 = 16;
          }
          else
          {
            uint64_t v74 = *(void *)(a1 + 8);
            unsigned int v75 = *(_DWORD *)(a1 + 16);
          }
          if ((uint64_t *)(v74 + 104 * v75) == v73) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = v73 + 1;
          }
          int v77 = *(_DWORD *)(a1 + 3360);
          *((_DWORD *)sub_1CC8233D8(a1 + 3688, &v92) + 2) = v77;
          uint64_t v88 = v92;
          int v89 = v91;
          uint64_t v90 = 0x100000000;
          sub_1CC823010(a1 + 3352, (unint64_t)&v88);
          if (v89 != v91) {
            free(v89);
          }
          unsigned int v78 = (void *)v76[1];
          uint64_t v79 = 16;
          if (v78 == (void *)*v76) {
            uint64_t v79 = 20;
          }
          uint64_t v80 = *(unsigned int *)((char *)v76 + v79);
          int v81 = &v78[v80];
          if (v80)
          {
            uint64_t v82 = 8 * v80;
            while (*v78 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v78;
              v82 -= 8;
              if (!v82)
              {
                unsigned int v78 = v81;
                break;
              }
            }
          }
          uint64_t v88 = v92;
          int v89 = v78;
          uint64_t v90 = (uint64_t)v81;
          v91[0] = v81;
          v91[1] = v81;
          unint64_t v83 = sub_1CD59E054((uint64_t)&v98, (unint64_t)&v88, 1);
          unsigned int v84 = (char *)v98 + 40 * v99;
          uint64_t v85 = *(void *)(v83 + 32);
          long long v86 = *(_OWORD *)(v83 + 16);
          *(_OWORD *)unsigned int v84 = *(_OWORD *)v83;
          *((_OWORD *)v84 + 1) = v86;
          *((void *)v84 + 4) = v85;
          unsigned int v28 = v99 + 1;
LABEL_86:
          LODWORD(v99) = v28;
LABEL_87:
          if (!v28)
          {
            if (*((void *)&v93 + 1) != (void)v93) {
              free(*((void **)&v93 + 1));
            }
LABEL_115:
            if (v98 != &v100) {
              free(v98);
            }
            return v16;
          }
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v66 = 0;
        int v68 = 1;
        while (v71 != v30)
        {
          if (v66) {
            BOOL v65 = 0;
          }
          else {
            BOOL v65 = v71 == -2;
          }
          if (v65) {
            uint64_t v66 = v70;
          }
          unsigned int v67 = v69 + v68++;
          unsigned int v69 = v67 & v72;
          int v70 = (uint64_t *)(v59 + 8 * (v67 & v72));
          uint64_t v71 = *v70;
          if (*v70 == -1) {
            goto LABEL_106;
          }
        }
      }
LABEL_55:
      if (*((void *)v29 - 4) == *((void *)v29 - 2))
      {
        unsigned int v28 = v99;
        goto LABEL_87;
      }
    }
  }
  return v16;
}

uint64_t sub_1CC823010(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 32 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      unint64_t v11 = a2 - v5;
      sub_1CC8238B8(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = *(void *)a1 + v11;
    }
    else
    {
      sub_1CC8238B8(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  int v6 = (void *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  *int v6 = *(void *)a2;
  v6[2] = 0x100000000;
  v6[1] = v6 + 3;
  uint64_t result = (uint64_t)(v6 + 1);
  if (*(_DWORD *)(a2 + 16)) {
    uint64_t result = sub_1CBBF2654(result, (const void **)(a2 + 8));
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CC8230C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 != a1 + 40)
  {
    if (v1) {
      uint64_t v2 = v1 - 24;
    }
    else {
      uint64_t v2 = 0;
    }
    if (*(unsigned char *)(v2 + 16) == 30)
    {
LABEL_6:
      if (*(unsigned char *)(v2 + 16) != 30)
      {
        switch(*(unsigned char *)(v2 + 16))
        {
          case '""':
          case '#':
            goto LABEL_14;
          default:
            break;
        }
      }
LABEL_7:
      llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
    }
    switch(*(unsigned char *)(v2 + 16))
    {
      case 0x1E:
LABEL_14:
        __break(1u);
        goto LABEL_7;
      case 0x1F:
        int v4 = (*(_DWORD *)(v2 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_12;
      case 0x20:
      case 0x26:
        int v4 = (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_12;
      case 0x21:
      case 0x25:
        goto LABEL_6;
      case 0x24:
        int v4 = *(_WORD *)(v2 + 18) & 1;
        goto LABEL_12;
      case 0x27:
        int v4 = *(_DWORD *)(v2 + 80) + 1;
LABEL_12:
        if (!v4) {
          return 255;
        }
        goto LABEL_6;
      default:
        return 255;
    }
  }
  return 255;
}

uint64_t sub_1CC823330(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_14;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_14:
  *a3 = v7;
  return result;
}

void *sub_1CC8233D8(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v13 = 0;
LABEL_17:
      int v7 = sub_1CC8234AC(a1, (uint64_t)a2, a2, v13);
      *int v7 = *a2;
      *((_DWORD *)v7 + 2) = 0;
      return v7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 != *v7)
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return v7;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v7;
    }
    goto LABEL_17;
  }
  return v7;
}

void *sub_1CC8234AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 8;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC823624(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 8;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC823624(a1, v8);
      unsigned int v20 = 0;
      sub_1CC823330(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC823624(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC8237B0((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC8237B0((int *)a1, v14, v7);
}

int *sub_1CC8237B0(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 34;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 8;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v8[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1CC8238B8(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(32 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  sub_1CC823970((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC823970(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + 32 * v2;
    uint64_t v5 = a2 + 24;
    uint64_t v6 = *a1 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *(void *)(v5 - 24) = *(void *)(v6 - 8);
      *(void *)(v5 - 16) = v5;
      *(void *)(v5 - 8) = 0x100000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CBBF2654(v5 - 16, (const void **)v6);
      }
      v5 += 32;
      v6 += 32;
    }
    while (v7 + 32 != v4);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    if (v8)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = 32 * v8;
      do
      {
        unsigned int v11 = *(void **)(v9 + v10 - 24);
        if ((void *)(v9 + v10 - 8) != v11) {
          free(v11);
        }
        v10 -= 32;
      }
      while (v10);
    }
  }
}

uint64_t *sub_1CC823A34(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v3 = 16;
    uint64_t v2 = a1 + 8;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      unsigned int v10 = 0;
      return (uint64_t *)(v2 + 104 * v10);
    }
  }
  int v4 = v3 - 1;
  unsigned int v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = (uint64_t *)(v2 + 104 * v5);
  uint64_t v7 = *v6;
  if (*v6 == a2) {
    return v6;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    unsigned int v9 = v5 + v8++;
    unsigned int v5 = v9 & v4;
    uint64_t v6 = (uint64_t *)(v2 + 104 * (v9 & v4));
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      return v6;
    }
  }
  if (*(_DWORD *)a1)
  {
    unsigned int v10 = 16;
    uint64_t v2 = a1 + 8;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  return (uint64_t *)(v2 + 104 * v10);
}

uint64_t *sub_1CC823AF8(uint64_t *result, unint64_t a2, long long *a3)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v3 = result + 1;
  unint64_t v4 = *((unsigned int *)result + 2);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *((unsigned int *)result + 2);
  }
  if (v5)
  {
    uint64_t v11 = *result;
    do
    {
      *(void *)uint64_t v11 = *(void *)a3;
      *(_OWORD *)(v11 + 8) = *(long long *)((char *)a3 + 8);
      *(_OWORD *)(v11 + 24) = *(long long *)((char *)a3 + 24);
      v11 += 40;
      --v5;
    }
    while (v5);
    unint64_t v4 = *v3;
  }
  unint64_t v6 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v7 = *result + 40 * v4;
    do
    {
      long long v8 = *a3;
      long long v9 = a3[1];
      *(void *)(v7 + 32) = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      v7 += 40;
    }
    while (!__CFADD__(v6++, 1));
  }
  *int v3 = a2;
  return result;
}

uint64_t sub_1CC823C14(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5)
      {
        uint64_t v9 = *(unsigned int *)(a1 + 8);
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
        uint64_t v6 = v9;
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7) {
        memcpy((void *)(*(void *)a1 + 4 * v6), (const void *)(*(void *)a2 + 4 * v6), *(void *)a2 + 4 * v7 - (*(void *)a2 + 4 * v6));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CC823CF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261F8B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC823D1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void sub_1CC823D28(void **a1, int a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v25[8] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    long long v8 = a1;
    uint64_t v23 = &a1[a2];
    do
    {
      uint64_t v9 = *v8;
      unsigned int v24 = 0;
      uint64_t v10 = (uint64_t)(*v8 + 5);
      while (1)
      {
        uint64_t v11 = v9[6];
        if (v11 == v10)
        {
          char v12 = 0;
        }
        else
        {
          char v12 = 0;
          do
          {
            if (v11) {
              uint64_t v13 = v11 - 24;
            }
            else {
              uint64_t v13 = 0;
            }
            if (*(unsigned char *)(v13 + 16) != 84) {
              goto LABEL_14;
            }
            uint64_t v14 = *(void *)(v13 - 32);
            if (!v14
              || *(unsigned char *)(v14 + 16)
              || *(void *)(v14 + 24) != *(void *)(v13 + 72)
              || (*(unsigned char *)(v14 + 33) & 0x20) == 0)
            {
              goto LABEL_14;
            }
            int v18 = *(_DWORD *)(*(void *)(v11 - 56) + 36);
            BOOL v19 = (v18 - 2622) > 0x2E || ((1 << (v18 - 62)) & 0x460000000001) == 0;
            if (v19 && (v18 - 2421) >= 2 && v18 != 2577) {
              goto LABEL_14;
            }
            uint64_t v20 = *(void *)(v11 - 24 - 32 * (*(_DWORD *)(v11 - 4) & 0x7FFFFFF));
            if (v20 && *(unsigned char *)(v20 + 16) == 16)
            {
              uint64_t v22 = (void *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u) {
                uint64_t v22 = (void *)*v22;
              }
              if ((*(unsigned char *)v22 & 2) == 0)
              {
LABEL_14:
                uint64_t v15 = *(void *)(a3 + 24);
                if (!v15) {
                  sub_1CB920400();
                }
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v13))
                {
                  uint64_t v16 = *(void *)(v13 + 8);
                  if (!v16) {
                    goto LABEL_20;
                  }
                  int v17 = 0;
                  do
                  {
                    uint64_t v16 = *(void *)(v16 + 8);
                    --v17;
                  }
                  while (v16);
                  if (!v17)
                  {
LABEL_20:
                    if (v24 >= 8uLL) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v25[v24++] = v13;
                    char v12 = 1;
                  }
                }
              }
            }
            uint64_t v11 = *(void *)(v11 + 8);
          }
          while (v11 != v10);
        }
        if (v24) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        unsigned int v24 = 0;
        if ((v12 & 1) == 0) {
          break;
        }
        llvm::SimplifyInstructionsInBlock(v9, 0, a3, a4, a5, a6, a7);
      }
      ++v8;
    }
    while (v8 != v23);
  }
}

void sub_1CC823FD0()
{
}

__n128 sub_1CC823FE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F261F900;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CC824038(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F261F900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC824070(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *a2;
  uint64_t v16 = 0;
  int v3 = *(uint64_t **)(a1 + 8);
  v17[0] = v15;
  uint64_t result = sub_1CD50F704(v3, v17, &v16);
  if (result) {
    return result;
  }
  uint64_t result = sub_1CD50F67C(*(void *)(a1 + 8), &v15, (uint64_t)v17);
  uint64_t v5 = v15;
  int v6 = *(_DWORD *)(v15 + 20);
  if ((v6 & 0x40000000) == 0)
  {
    uint64_t v7 = v6 & 0x7FFFFFF;
    uint64_t v8 = v15 - 32 * v7;
    if (!v7) {
      goto LABEL_17;
    }
LABEL_6:
    uint64_t v9 = 32 * v7;
    do
    {
      if (*(void *)v8) {
        BOOL v10 = *(unsigned __int8 *)(*(void *)v8 + 16) >= 0x1Cu;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10 && *(void *)(*(void *)v8 + 40) == **(void **)(a1 + 16))
      {
        uint64_t v11 = *(void *)(a1 + 24);
        v17[0] = *(void *)v8;
        uint64_t v12 = *(void *)(v11 + 24);
        if (!v12)
        {
          sub_1CB920400();
          JUMPOUT(0x1CC8241C0);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v17);
      }
      v8 += 32;
      v9 -= 32;
    }
    while (v9);
    uint64_t v5 = v15;
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(v15 - 8);
  uint64_t v7 = v6 & 0x7FFFFFF;
  if (v7) {
    goto LABEL_6;
  }
LABEL_17:
  uint64_t v13 = *(void *)(a1 + 32);
  unsigned int v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v13 + 8 * v14) = v5;
  ++*(_DWORD *)(v13 + 8);
  return result;
}

void sub_1CC8241C4()
{
}

void *sub_1CC8241D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F261F948;
  return result;
}

void sub_1CC824210(uint64_t a1, void *a2)
{
  *a2 = &unk_1F261F948;
}

BOOL sub_1CC824238(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CC81FD40(a2);
  if (result)
  {
    return sub_1CC81FEF0(a2);
  }
  return result;
}

void sub_1CC824284(llvm::raw_ostream *a1)
{
  uint64_t v1 = 0;
  v68[14] = *MEMORY[0x1E4F143B8];
  unint64_t v63 = v67;
  unsigned int v64 = v67;
  uint64_t v65 = 8;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *((void *)a1 + 1);
  v68[0] = "PreHeader";
  v68[1] = v2;
  v68[2] = "Header";
  v68[3] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  v68[4] = "BodyBegin";
  v68[5] = v4;
  v68[6] = "BodyEnd";
  v68[7] = v5;
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  v68[8] = "PreLatch";
  v68[9] = v6;
  v68[10] = "Latch";
  v68[11] = v7;
  uint64_t v8 = *((void *)a1 + 6);
  v68[12] = "Exit";
  v68[13] = v8;
  uint64_t v9 = (const char **)v68;
  int v66 = 0;
  do
  {
    BOOL v10 = (llvm::Value *)v68[2 * v1 + 1];
    if (!v10)
    {
      uint64_t v11 = llvm::dbgs(a1);
      uint64_t v12 = *v9;
      if (*v9)
      {
        size_t v13 = strlen(*v9);
        unsigned int v14 = (void *)*((void *)v11 + 4);
        if (v13 <= *((void *)v11 + 3) - (void)v14)
        {
          if (v13)
          {
            memcpy(v14, v12, v13);
            *((void *)v11 + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(v11, v12, v13);
        }
      }
      uint64_t v15 = *((void *)v11 + 4);
      if ((unint64_t)(*((void *)v11 + 3) - v15) > 2)
      {
        *(unsigned char *)(v15 + 2) = 32;
        *(_WORD *)uint64_t v15 = 15648;
        *((void *)v11 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v11, " = ", 3uLL);
      }
      a1 = llvm::write_hex(v11, 0, 3, 0, 0);
      uint64_t v16 = (unsigned char *)*((void *)v11 + 4);
      if (*((unsigned char **)v11 + 3) == v16)
      {
        int v17 = v11;
LABEL_54:
        a1 = llvm::raw_ostream::write(v17, "\n", 1uLL);
        goto LABEL_55;
      }
      *uint64_t v16 = 10;
      ++*((void *)v11 + 4);
      goto LABEL_55;
    }
    int v18 = v63;
    unsigned int v19 = v10 >> 4;
    if (v64 == v63)
    {
      int v20 = HIDWORD(v65);
      uint64_t v21 = &v64[8 * HIDWORD(v65)];
      if (HIDWORD(v65))
      {
        uint64_t v22 = 0;
        while (*(llvm::Value **)&v64[v22] != v10)
        {
          v22 += 8;
          if (8 * HIDWORD(v65) == v22) {
            goto LABEL_29;
          }
        }
        uint64_t v21 = &v64[v22];
      }
LABEL_29:
      int v18 = v64;
    }
    else
    {
      int v23 = (v65 - 1) & (v19 ^ (v10 >> 9));
      uint64_t v21 = &v64[8 * v23];
      unsigned int v24 = *(llvm::Value **)v21;
      if (*(void *)v21 == -1)
      {
        uint64_t v25 = 0;
LABEL_58:
        if (!v25) {
          uint64_t v25 = (llvm::Value **)v21;
        }
        int v20 = HIDWORD(v65);
        if (*v25 == v10) {
          uint64_t v21 = (char *)v25;
        }
        else {
          uint64_t v21 = &v64[8 * v65];
        }
      }
      else
      {
        uint64_t v25 = 0;
        int v26 = 1;
        while (v24 != v10)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == (llvm::Value *)-2;
          }
          if (v27) {
            uint64_t v25 = (llvm::Value **)v21;
          }
          int v28 = v23 + v26++;
          int v23 = v28 & (v65 - 1);
          uint64_t v21 = &v64[8 * v23];
          unsigned int v24 = *(llvm::Value **)v21;
          if (*(void *)v21 == -1) {
            goto LABEL_58;
          }
        }
        int v20 = HIDWORD(v65);
      }
    }
    if (v64 == v18) {
      int v29 = v20;
    }
    else {
      int v29 = v65;
    }
    uint64_t v30 = &v64[8 * v29];
    int v31 = llvm::dbgs(a1);
    if (v21 != v30)
    {
      unsigned int v32 = *v9;
      if (v32)
      {
        size_t v33 = strlen(v32);
        int v34 = (void *)*((void *)v31 + 4);
        if (v33 <= *((void *)v31 + 3) - (void)v34)
        {
          if (v33)
          {
            memcpy(v34, v32, v33);
            *((void *)v31 + 4) += v33;
          }
        }
        else
        {
          llvm::raw_ostream::write(v31, v32, v33);
        }
      }
      uint64_t v35 = *((void *)v31 + 4);
      if ((unint64_t)(*((void *)v31 + 3) - v35) > 2)
      {
        *(unsigned char *)(v35 + 2) = 32;
        *(_WORD *)uint64_t v35 = 15648;
        *((void *)v31 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v31, " = ", 3uLL);
      }
      if ((*((unsigned char *)v10 + 23) & 0x10) == 0) {
        goto LABEL_49;
      }
      uint64_t v36 = ***(void ***)v10;
      uint64_t v37 = *(void *)(v36 + 152);
      uint64_t v38 = *(unsigned int *)(v36 + 168);
      if (v38)
      {
        LODWORD(v39) = (v38 - 1) & (v19 ^ (v10 >> 9));
        int v40 = (llvm::Value **)(v37 + 16 * v39);
        uint64_t v41 = *v40;
        if (*v40 == v10)
        {
LABEL_47:
          unsigned int v44 = (size_t *)v40[1];
          size_t v47 = *v44;
          int v45 = v44 + 2;
          size_t v46 = v47;
          a1 = (llvm::raw_ostream *)*((void *)v31 + 4);
          if (v47 <= *((void *)v31 + 3) - (void)a1)
          {
            if (v46)
            {
              memcpy(a1, v45, v46);
              a1 = (llvm::raw_ostream *)(*((void *)v31 + 4) + v46);
              *((void *)v31 + 4) = a1;
            }
            goto LABEL_52;
          }
          llvm::raw_ostream::write(v31, (const char *)v45, v46);
LABEL_49:
          a1 = (llvm::raw_ostream *)*((void *)v31 + 4);
LABEL_52:
          if (*((llvm::raw_ostream **)v31 + 3) == a1)
          {
            int v17 = v31;
            goto LABEL_54;
          }
          *(unsigned char *)a1 = 10;
          ++*((void *)v31 + 4);
          goto LABEL_55;
        }
        int v42 = 1;
        while (v41 != (llvm::Value *)-4096)
        {
          int v43 = v39 + v42++;
          uint64_t v39 = v43 & (v38 - 1);
          uint64_t v41 = *(llvm::Value **)(v37 + 16 * v39);
          if (v41 == v10)
          {
            int v40 = (llvm::Value **)(v37 + 16 * v39);
            goto LABEL_47;
          }
        }
      }
      int v40 = (llvm::Value **)(v37 + 16 * v38);
      goto LABEL_47;
    }
    llvm::Value::print(v10, v31, 0);
    int v48 = v64;
    uint64_t v49 = HIDWORD(v65);
    if (v64 != v63)
    {
      unsigned int v53 = v65;
      goto LABEL_74;
    }
    if (!HIDWORD(v65))
    {
LABEL_71:
      unsigned int v53 = v65;
      if (HIDWORD(v65) < v65)
      {
        ++HIDWORD(v65);
        *(void *)&v64[8 * v49] = v10;
        goto LABEL_55;
      }
LABEL_74:
      if (3 * v53 <= 4 * (HIDWORD(v65) - v66))
      {
        if (v53 >= 0x40) {
          v53 *= 2;
        }
        else {
          unsigned int v53 = 128;
        }
      }
      else if (v53 - HIDWORD(v65) >= v53 >> 3)
      {
        goto LABEL_76;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v63, v53);
      unsigned int v53 = v65;
      int v48 = v64;
LABEL_76:
      unsigned int v54 = v53 - 1;
      unsigned int v55 = (v53 - 1) & (v19 ^ (v10 >> 9));
      v56 = &v48[8 * v55];
      uint64_t v57 = *(llvm::Value **)v56;
      if (*(void *)v56 == -1)
      {
        unint64_t v58 = 0;
LABEL_96:
        if (v58) {
          uint64_t v62 = v58;
        }
        else {
          uint64_t v62 = (llvm::Value **)v56;
        }
        if (*v62 != v10)
        {
          if (*v62 == (llvm::Value *)-2) {
            --v66;
          }
          else {
            ++HIDWORD(v65);
          }
          unint64_t *v62 = v10;
        }
      }
      else
      {
        unint64_t v58 = 0;
        int v59 = 1;
        while (v57 != v10)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v57 == (llvm::Value *)-2;
          }
          if (v60) {
            unint64_t v58 = (llvm::Value **)v56;
          }
          unsigned int v61 = v55 + v59++;
          unsigned int v55 = v61 & v54;
          v56 = &v48[8 * (v61 & v54)];
          uint64_t v57 = *(llvm::Value **)v56;
          if (*(void *)v56 == -1) {
            goto LABEL_96;
          }
        }
      }
      goto LABEL_55;
    }
    uint64_t v50 = 0;
    uint64_t v51 = 8 * HIDWORD(v65);
    unsigned __int8 v52 = (llvm::Value **)v64;
    while (*v52 != v10)
    {
      if (*v52 == (llvm::Value *)-2) {
        uint64_t v50 = v52;
      }
      ++v52;
      v51 -= 8;
      if (!v51)
      {
        if (!v50) {
          goto LABEL_71;
        }
        *uint64_t v50 = v10;
        --v66;
        break;
      }
    }
LABEL_55:
    ++v1;
    uint64_t v9 = (const char **)&v68[2 * v1];
  }
  while (v1 != 7);
  if (v64 != v63) {
    free(v64);
  }
}

void sub_1CC82487C(uint64_t a1)
{
}

void sub_1CC82493C()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC824AC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC3F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261F990;
  sub_1CC84EB80(a1 + 32, a2);
  uint64_t v9 = (llvm::PassRegistry *)sub_1CC84EB80(a1 + 64, a3);
  *(unsigned char *)(a1 + 96) = a4;
  *(unsigned char *)(a1 + 97) = a5;
  if (byte_1EBCDC488)
  {
    __int16 v10 = 1;
LABEL_9:
    *(_WORD *)(a1 + 28) = v10;
    goto LABEL_10;
  }
  if (byte_1EBCDC548)
  {
    __int16 v10 = 2;
    goto LABEL_9;
  }
  if (byte_1EBCDC6C8)
  {
    __int16 v10 = 4;
    goto LABEL_9;
  }
  if (byte_1EBCDC608)
  {
    __int16 v10 = 8;
    goto LABEL_9;
  }
  *(_WORD *)(a1 + 28) = 0;
LABEL_10:
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v9);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC400, memory_order_acquire) != -1)
  {
    v14[0] = sub_1CC82487C;
    v14[1] = &PassRegistry;
    size_t v13 = v14;
    std::__call_once(&qword_1EBCDC400, &v13, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC824C00()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC824D54(llvm::Pass *this)
{
  *(void *)this = &unk_1F261F990;
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC824E6C(llvm::Pass *this)
{
  *(void *)this = &unk_1F261F990;
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 11);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 7);
  if (v4 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC824F98()
{
  return "MultiRate Transformation Pass";
}

void sub_1CC824FA8(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

BOOL sub_1CC82504C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  v1454[16] = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDC908) {
    *(unsigned char *)(v4 + 97) = 1;
  }
  uint64_t v8 = *(void *)(v4 + 56);
  if (v8) {
    *(_WORD *)(v7 + 28) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v5);
  }
  uint64_t v9 = *(uint64_t **)(v7 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v1308 = v7;
  if (v10 == v11)
  {
LABEL_8:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID)
      + 32;
  unsigned int v14 = *(uint64_t **)(v1308 + 8);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_13:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_13;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::PostDominatorTreeWrapperPass::ID)+ 32;
  unsigned int v19 = *(uint64_t **)(v1308 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_18:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(char **)v20 != llvm::TargetTransformInfoWrapperPass::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_18;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  int v23 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v22 + 96))(v22, llvm::TargetTransformInfoWrapperPass::ID);
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v23, (const Function *)v6);
  *(void *)&long long v1353 = v13;
  long long v1358 = 0u;
  long long v1359 = 0u;
  *((void *)&v1353 + 1) = v18;
  v1305 = v1362;
  __dst = v1362;
  uint64_t v1361 = 0x800000000;
  v1304 = v1365;
  v1363 = v1365;
  uint64_t v1364 = 0x800000000;
  long long v1367 = 0u;
  long long v1368 = 0u;
  long long v1369 = 0u;
  unsigned int v1370 = 0;
  uint64_t v1372 = 0;
  v1371 = 0;
  unsigned int v1373 = 0;
  v1374 = v1378;
  v1375 = v1378;
  uint64_t v1376 = 16;
  int v1377 = 0;
  v1306 = v1381;
  v1379 = v1381;
  uint64_t v1380 = 0x1400000000;
  v1382 = v1386;
  v1383 = v1386;
  uint64_t v1384 = 32;
  int v1385 = 0;
  v1387 = v1391;
  v1388 = v1391;
  uint64_t v1389 = 32;
  int v1390 = 0;
  v1392 = v1395;
  __b = v1395;
  *(void *)v1394 = 16;
  *(_DWORD *)&v1394[8] = 0;
  char v1396 = 0;
  uint64_t v1397 = v6;
  char v1399 = 0;
  uint64_t v24 = *(void *)(v6 + 40) + 216;
  LOWORD(__src) = 260;
  *(void *)v1400 = v24;
  llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v1400);
  int v1366 = v1336;
  uint64_t v25 = *(uint64_t ***)(v6 + 40);
  uint64_t v1354 = sub_1CD110204(v25, 1268, 0, 0);
  uint64_t v1355 = sub_1CD110204(v25, 1280, 0, 0);
  uint64_t v1356 = sub_1CD110204(v25, 2709, 0, 0);
  if (!v1356) {
    uint64_t v1356 = sub_1CD110204(v25, 2710, 0, 0);
  }
  uint64_t v1357 = sub_1CD110204(v25, 2711, 0, 0);
  int v26 = (*(unsigned __int16 *)(v6 + 18) >> 4) & 0x3FF;
  BOOL v27 = *(llvm::Module **)(v6 + 40);
  uint64_t v1307 = v6;
  if ((v26 - 103) >= 2)
  {
    if (v26 != 106 && v26 != 102
      || (*(void *)v1400 = "agx.vertex_amp_mode",
          LOWORD(__src) = 259,
          !llvm::Module::getNamedMetadata(v27, (const char **)v1400))
      && ((uint64_t v132 = sub_1CD110204(*(uint64_t ***)(v6 + 40), 2710, 0, 0)) == 0 || !*(void *)(v132 + 8)))
    {
      int v133 = 0;
      uint64_t v134 = v1308;
      goto LABEL_1482;
    }
    char v1399 = 1;
  }
  *(void *)v1400 = "agx.vertex_amp_mode";
  LOWORD(__src) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v27, (const char **)v1400);
  if (NamedMetadata)
  {
    uint64_t v29 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 8);
    if (*(void *)v29 == 5)
    {
      if (*(_DWORD *)(v29 + 24) ^ 0x6E756F63 | *(unsigned __int8 *)(v29 + 28) ^ 0x74) {
        char v30 = 2;
      }
      else {
        char v30 = 1;
      }
    }
    else
    {
      char v30 = 2;
    }
  }
  else
  {
    char v30 = 0;
  }
  char v1396 = v30;
  *((void *)&v1367 + 1) = sub_1CC82E878(v27, "agx.sample_rate", (const char *)0xF);
  *(void *)&long long v1367 = *((void *)&v1367 + 1);
  *(void *)&long long v1368 = sub_1CC82E878(v27, "agx.color_sample_rate", (const char *)0x15);
  *(void *)v1400 = "agx.fragment_rate";
  LOWORD(__src) = 259;
  uint64_t v31 = llvm::Module::getNamedMetadata(v27, (const char **)v1400);
  if (v31
    && (uint64_t v32 = *(void *)(***(void ***)(v31 + 48) - 8 * *(unsigned int *)(***(void ***)(v31 + 48) + 8)),
        !*(unsigned char *)v32))
  {
    *((void *)&v1368 + 1) = sub_1CC82E878(v27, "agx.sample_mapping", (const char *)0x12);
    uint64_t v128 = *(void *)(v32 + 8);
    if (*(void *)v128 == 5)
    {
      int v129 = *(_DWORD *)(v128 + 24);
      int v130 = *(unsigned __int8 *)(v128 + 28);
      if (v129 == 1869377379 && v130 == 114)
      {
        uint64_t v33 = v1368;
        *((void *)&v1367 + 1) = v1368;
        goto LABEL_38;
      }
    }
  }
  else
  {
    *((void *)&v1368 + 1) = sub_1CC82E878(v27, "agx.sample_mapping", (const char *)0x12);
  }
  uint64_t v33 = v1368;
LABEL_38:
  v1323 = (llvm::SmallPtrSetImplBase *)&v1369;
  v1314 = (llvm::SmallPtrSetImplBase *)&v1374;
  if (!v33) {
    *(void *)&long long v1368 = *((void *)&v1367 + 1);
  }
  int v34 = *(void ***)(v1397 + 80);
  v1322 = (void **)(v1397 + 72);
  while (v34 != v1322)
  {
    uint64_t v35 = v34 - 3;
    v1324 = (long long *)v34;
    if (!v34) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = v35 + 5;
    for (uint64_t i = (void **)v35[6]; i != v36; uint64_t i = (void **)i[1])
    {
      if (i) {
        uint64_t v38 = (uint64_t)(i - 3);
      }
      else {
        uint64_t v38 = 0;
      }
      int v39 = sub_1CC82E8C8(&TTI, v38);
      if ((v39 & 0xFFFD) != 0)
      {
        uint64_t v40 = *(void *)(v38 + 8);
        if (v40)
        {
          int v41 = v39;
          while (1)
          {
            if (*(unsigned __int8 *)(*(void *)(v40 + 24) + 16) <= 0x1Bu) {
              uint64_t v42 = 0;
            }
            else {
              uint64_t v42 = *(void *)(v40 + 24);
            }
            *(void *)v1400 = v42;
            if (!v42) {
              goto LABEL_126;
            }
            if (*(void *)(v42 + 8))
            {
              int v43 = sub_1CC82E9A4((uint64_t)&v1371, (uint64_t *)v1400);
              *(_WORD *)int v43 = v41;
              *((unsigned char *)v43 + 2) = BYTE2(v41);
              unsigned int v44 = v1375;
              uint64_t v45 = HIDWORD(v1376);
              if (v1375 == v1374)
              {
                if (HIDWORD(v1376))
                {
                  size_t v46 = 0;
                  uint64_t v47 = 8 * HIDWORD(v1376);
                  int v48 = (uint64_t *)v1375;
                  while (*v48 != v42)
                  {
                    if (*v48 == -2) {
                      size_t v46 = v48;
                    }
                    ++v48;
                    v47 -= 8;
                    if (!v47)
                    {
                      if (v46) {
                        goto LABEL_128;
                      }
                      goto LABEL_64;
                    }
                  }
                  goto LABEL_126;
                }
LABEL_64:
                unsigned int v49 = v1376;
                if (HIDWORD(v1376) < v1376) {
                  goto LABEL_65;
                }
              }
              else
              {
                unsigned int v49 = v1376;
              }
              if (3 * v49 <= 4 * (HIDWORD(v1376) - v1377))
              {
                if (v49 >= 0x40) {
                  v49 *= 2;
                }
                else {
                  unsigned int v49 = 128;
                }
              }
              else if (v49 - HIDWORD(v1376) >= v49 >> 3)
              {
LABEL_93:
                unsigned int v58 = v49 - 1;
                unsigned int v59 = (v49 - 1) & ((v42 >> 4) ^ (v42 >> 9));
                BOOL v60 = &v44[v59];
                uint64_t v61 = *v60;
                if (*v60 == -1) {
                  goto LABEL_118;
                }
                uint64_t v62 = 0;
                int v63 = 1;
                while (v61 != v42)
                {
                  if (v62) {
                    BOOL v64 = 0;
                  }
                  else {
                    BOOL v64 = v61 == -2;
                  }
                  if (v64) {
                    uint64_t v62 = v60;
                  }
                  unsigned int v65 = v59 + v63++;
                  unsigned int v59 = v65 & v58;
                  BOOL v60 = &v44[v65 & v58];
                  uint64_t v61 = *v60;
                  if (*v60 == -1) {
                    goto LABEL_119;
                  }
                }
                goto LABEL_126;
              }
              llvm::SmallPtrSetImplBase::Grow(v1314, v49);
              unsigned int v49 = v1376;
              unsigned int v44 = v1375;
              goto LABEL_93;
            }
            if (!sub_1CC82EA14(v42))
            {
              if (*(unsigned __int8 *)(v42 + 16) - 29 > 0xA) {
                goto LABEL_126;
              }
              unsigned int v54 = sub_1CC82E9A4((uint64_t)&v1371, (uint64_t *)v1400);
              *(_WORD *)unsigned int v54 = v41;
              *((unsigned char *)v54 + 2) = BYTE2(v41);
              unsigned int v44 = v1375;
              uint64_t v45 = HIDWORD(v1376);
              if (v1375 != v1374)
              {
                unsigned int v57 = v1376;
LABEL_105:
                if (3 * v57 <= 4 * (HIDWORD(v1376) - v1377))
                {
                  if (v57 >= 0x40) {
                    v57 *= 2;
                  }
                  else {
                    unsigned int v57 = 128;
                  }
                }
                else if (v57 - HIDWORD(v1376) >= v57 >> 3)
                {
                  goto LABEL_107;
                }
                llvm::SmallPtrSetImplBase::Grow(v1314, v57);
                unsigned int v57 = v1376;
                unsigned int v44 = v1375;
LABEL_107:
                unsigned int v66 = v57 - 1;
                unsigned int v67 = (v57 - 1) & ((v42 >> 4) ^ (v42 >> 9));
                BOOL v60 = &v44[v67];
                uint64_t v68 = *v60;
                if (*v60 != -1)
                {
                  uint64_t v62 = 0;
                  int v69 = 1;
                  while (v68 != v42)
                  {
                    if (v62) {
                      BOOL v70 = 0;
                    }
                    else {
                      BOOL v70 = v68 == -2;
                    }
                    if (v70) {
                      uint64_t v62 = v60;
                    }
                    unsigned int v71 = v67 + v69++;
                    unsigned int v67 = v71 & v66;
                    BOOL v60 = &v44[v71 & v66];
                    uint64_t v68 = *v60;
                    if (*v60 == -1) {
                      goto LABEL_119;
                    }
                  }
                  goto LABEL_126;
                }
LABEL_118:
                uint64_t v62 = 0;
LABEL_119:
                if (v62) {
                  unsigned int v72 = v62;
                }
                else {
                  unsigned int v72 = v60;
                }
                if (*v72 != v42)
                {
                  if (*v72 == -2) {
                    --v1377;
                  }
                  else {
                    ++HIDWORD(v1376);
                  }
                  *unsigned int v72 = v42;
                }
                goto LABEL_126;
              }
              if (HIDWORD(v1376))
              {
                size_t v46 = 0;
                uint64_t v55 = 8 * HIDWORD(v1376);
                v56 = (uint64_t *)v1375;
                while (*v56 != v42)
                {
                  if (*v56 == -2) {
                    size_t v46 = v56;
                  }
                  ++v56;
                  v55 -= 8;
                  if (!v55)
                  {
                    if (!v46) {
                      goto LABEL_88;
                    }
LABEL_128:
                    *size_t v46 = v42;
                    --v1377;
                    goto LABEL_126;
                  }
                }
                goto LABEL_126;
              }
LABEL_88:
              unsigned int v57 = v1376;
              if (HIDWORD(v1376) >= v1376) {
                goto LABEL_105;
              }
LABEL_65:
              HIDWORD(v1376) = v45 + 1;
              v44[v45] = v42;
              goto LABEL_126;
            }
            if (*(unsigned char *)(v38 + 16) == 84)
            {
              uint64_t v50 = *(void *)(v38 - 32);
              if (!v50) {
                goto LABEL_72;
              }
              if (!*(unsigned char *)(v50 + 16) && *(void *)(v50 + 24) == *(void *)(v38 + 72))
              {
                if ((*(unsigned char *)(v50 + 33) & 0x20) != 0) {
                  uint64_t v50 = v38;
                }
                else {
                  uint64_t v50 = 0;
                }
                goto LABEL_72;
              }
            }
            uint64_t v50 = 0;
LABEL_72:
            if (*(unsigned char *)(v42 + 16) != 84) {
              goto LABEL_76;
            }
            uint64_t v51 = *(void *)(v42 - 32);
            if (!v51 || *(unsigned char *)(v51 + 16) || *(void *)(v51 + 24) != *(void *)(v42 + 72)) {
              goto LABEL_76;
            }
            int v73 = *(_DWORD *)(v51 + 32) & 0x2000;
            uint64_t v74 = v73 ? v42 : 0;
            if (!v50 || !v73) {
              goto LABEL_76;
            }
            int v75 = *(_DWORD *)(v74 + 20);
            uint64_t v76 = v75 & 0x7FFFFFF;
            if ((v75 & 0x7FFFFFF) != 0)
            {
              unsigned int v77 = sub_1CD0FF364(*(_DWORD *)(*(void *)(v74 - 32) + 36));
              unsigned int v78 = (void *)(v74 - 32 * v76);
              uint64_t v79 = v77;
              while (!v79 || *v78 != v38)
              {
                v78 += 4;
                --v79;
                if (!--v76) {
                  goto LABEL_126;
                }
              }
LABEL_76:
              unsigned __int8 v52 = sub_1CC82EB78((uint64_t)v1323, (uint64_t *)v1400);
              unsigned int v53 = *((unsigned __int16 *)v52 + 8);
              if (v53 <= (unsigned __int16)v41) {
                LOWORD(v53) = v41;
              }
              *((unsigned char *)v52 + 18) |= BYTE2(v41);
              *((_WORD *)v52 + 8) = v53;
              *(unsigned char *)unsigned __int8 v52 = sub_1CC82EC04(v42);
            }
LABEL_126:
            uint64_t v40 = *(void *)(v40 + 8);
            if (!v40) {
              goto LABEL_238;
            }
          }
        }
        continue;
      }
      if (!sub_1CC82EA14(v38)) {
        continue;
      }
      int v80 = *(unsigned __int8 *)(v38 + 16);
      if (!i || v80 != 60)
      {
        if (i && v80 == 61)
        {
          int v85 = 1;
          char v86 = 1;
        }
        else
        {
          if (i) {
            BOOL v87 = (v80 - 66) >= 0xFFFFFFFE;
          }
          else {
            BOOL v87 = 0;
          }
          int v88 = !v87;
          if (v80 != 84 || v88 == 0) {
            goto LABEL_155;
          }
          uint64_t v90 = *(void *)(v38 - 32);
          if (!v90
            || *(unsigned char *)(v90 + 16)
            || *(void *)(v90 + 24) != *(void *)(v38 + 72)
            || (*(unsigned char *)(v90 + 33) & 0x20) == 0)
          {
            goto LABEL_155;
          }
          int v85 = 0;
          uint64_t v91 = (uint64_t)*(i - 7);
          int v92 = *(_DWORD *)(v91 + 36);
          if (v92 != 2142 && v92 != 2144)
          {
            if (sub_1CC7A8558(*(_DWORD *)(v91 + 36)))
            {
              int v85 = 2;
            }
            else if ((v92 - 2784) >= 3)
            {
              if (sub_1CC7A857C(v92))
              {
                int v85 = 3;
              }
              else if ((v92 - 2841) >= 0xFFFFFFFD)
              {
                int v85 = 0;
              }
              else
              {
                int v85 = -1;
              }
            }
            else
            {
              int v85 = 0;
            }
          }
          BOOL v119 = sub_1CC7A8558(v92);
          if ((v92 - 2784) < 3 || v119) {
            goto LABEL_155;
          }
          BOOL v120 = sub_1CC7A857C(v92);
          char v86 = (v92 - 2838) < 3 || v120;
        }
        if (v85 != -1 && (v86 & 1) != 0) {
          continue;
        }
      }
LABEL_155:
      if (sub_1CC82EC04(v38)) {
        continue;
      }
      if (v1373)
      {
        unsigned int v81 = (v1373 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        uint64_t v82 = *((void *)v1371 + 2 * v81);
        if (v82 == v38) {
          continue;
        }
        int v83 = 1;
        while (v82 != -4096)
        {
          unsigned int v84 = v81 + v83++;
          unsigned int v81 = v84 & (v1373 - 1);
          uint64_t v82 = *((void *)v1371 + 2 * v81);
          if (v82 == v38) {
            goto LABEL_238;
          }
        }
      }
      if (sub_1CC82ED00(v38)) {
        break;
      }
      *(void *)v1400 = v38;
      if (!v1373)
      {
        uint64_t v100 = 0;
LABEL_199:
        uint64_t v94 = sub_1CC82EE94((uint64_t)&v1371, (uint64_t *)v1400, v100);
        *uint64_t v94 = v38;
        *((_WORD *)v94 + 4) = 0;
        *((unsigned char *)v94 + 10) = 0;
        goto LABEL_200;
      }
      unsigned int v93 = (v1373 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      uint64_t v94 = (void *)((char *)v1371 + 16 * v93);
      uint64_t v95 = *v94;
      if (v38 != *v94)
      {
        unsigned int v96 = 0;
        int v97 = 1;
        while (v95 != -4096)
        {
          if (v96) {
            BOOL v98 = 0;
          }
          else {
            BOOL v98 = v95 == -8192;
          }
          if (v98) {
            unsigned int v96 = v94;
          }
          unsigned int v99 = v93 + v97++;
          unsigned int v93 = v99 & (v1373 - 1);
          uint64_t v94 = (void *)((char *)v1371 + 16 * v93);
          uint64_t v95 = *v94;
          if (v38 == *v94) {
            goto LABEL_200;
          }
        }
        if (v96) {
          uint64_t v100 = v96;
        }
        else {
          uint64_t v100 = v94;
        }
        goto LABEL_199;
      }
LABEL_200:
      BOOL v101 = v1399 == 0;
      if (v1399) {
        __int16 v102 = 1;
      }
      else {
        __int16 v102 = 5;
      }
      *((_WORD *)v94 + 4) = v102;
      if (v101) {
        char v103 = 2;
      }
      else {
        char v103 = 4;
      }
      *((unsigned char *)v94 + 10) |= v103;
      uint64_t v104 = (char *)v1375;
      uint64_t v105 = HIDWORD(v1376);
      if (v1375 != v1374)
      {
        unsigned int v109 = v1376;
        goto LABEL_217;
      }
      if (!HIDWORD(v1376))
      {
LABEL_214:
        unsigned int v109 = v1376;
        if (HIDWORD(v1376) < v1376)
        {
          ++HIDWORD(v1376);
          *((void *)v1375 + v105) = v38;
          continue;
        }
LABEL_217:
        if (3 * v109 <= 4 * (HIDWORD(v1376) - v1377))
        {
          if (v109 >= 0x40) {
            v109 *= 2;
          }
          else {
            unsigned int v109 = 128;
          }
        }
        else if (v109 - HIDWORD(v1376) >= v109 >> 3)
        {
          goto LABEL_219;
        }
        llvm::SmallPtrSetImplBase::Grow(v1314, v109);
        unsigned int v109 = v1376;
        uint64_t v104 = (char *)v1375;
LABEL_219:
        unsigned int v110 = v109 - 1;
        unsigned int v111 = (v109 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        BOOL v112 = &v104[8 * v111];
        uint64_t v113 = *(void *)v112;
        if (*(void *)v112 == -1)
        {
          int v114 = 0;
LABEL_231:
          if (v114) {
            uint64_t v118 = v114;
          }
          else {
            uint64_t v118 = (uint64_t *)v112;
          }
          if (*v118 != v38)
          {
            if (*v118 == -2) {
              --v1377;
            }
            else {
              ++HIDWORD(v1376);
            }
            uint64_t *v118 = v38;
          }
        }
        else
        {
          int v114 = 0;
          int v115 = 1;
          while (v113 != v38)
          {
            if (v114) {
              BOOL v116 = 0;
            }
            else {
              BOOL v116 = v113 == -2;
            }
            if (v116) {
              int v114 = (uint64_t *)v112;
            }
            unsigned int v117 = v111 + v115++;
            unsigned int v111 = v117 & v110;
            BOOL v112 = &v104[8 * (v117 & v110)];
            uint64_t v113 = *(void *)v112;
            if (*(void *)v112 == -1) {
              goto LABEL_231;
            }
          }
        }
        continue;
      }
      BOOL v106 = 0;
      uint64_t v107 = 8 * HIDWORD(v1376);
      unsigned int v108 = (uint64_t *)v1375;
      while (*v108 != v38)
      {
        if (*v108 == -2) {
          BOOL v106 = v108;
        }
        ++v108;
        v107 -= 8;
        if (!v107)
        {
          if (!v106) {
            goto LABEL_214;
          }
          uint64_t *v106 = v38;
          --v1377;
          break;
        }
      }
LABEL_238:
      ;
    }
    int v34 = (void **)*((void *)v1324 + 1);
  }
  int v121 = v1372;
  uint64_t v122 = v1371;
  uint64_t v123 = v1373;
  v124 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
  unsigned int v125 = v1373;
  uint64_t v126 = v124;
  if (v1372)
  {
    if (v1373)
    {
      uint64_t v127 = 16 * v1373;
      uint64_t v126 = v1371;
      while ((*(void *)v126 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        uint64_t v126 = (llvm::SmallPtrSetImplBase *)((char *)v126 + 16);
        v127 -= 16;
        if (!v127)
        {
          unsigned int v125 = v1373;
          uint64_t v126 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
          goto LABEL_279;
        }
      }
      unsigned int v125 = v1373;
    }
    else
    {
      unsigned int v125 = 0;
      uint64_t v126 = v1371;
    }
  }
LABEL_279:
  uint64_t v135 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v125);
  if (v126 == v135) {
    goto LABEL_415;
  }
  do
  {
    uint64_t v136 = *(void **)v126;
    if (*(unsigned char *)(*(void *)v126 + 16) != 84) {
      goto LABEL_408;
    }
    uint64_t v137 = *(v136 - 4);
    if (!v137
      || *(unsigned char *)(v137 + 16)
      || *(void *)(v137 + 24) != v136[9]
      || (*(unsigned char *)(v137 + 33) & 0x20) == 0
      || (sub_1CD0FF1D0(*(_DWORD *)(v137 + 36)) & 1) == 0)
    {
      goto LABEL_408;
    }
    uint64_t v138 = (void *)v136[5];
    *(void *)v1400 = &__src;
    *(void *)&v1400[8] = &__src;
    *(void *)&v1400[16] = 4;
    *(_DWORD *)&v1400[24] = 0;
    uint64_t v139 = v136[1];
    if (!v139)
    {
      unsigned int v140 = 0;
      goto LABEL_345;
    }
    unsigned int v140 = 0;
    unsigned int v141 = 4;
    p_src = &__src;
    v143 = &__src;
    while (1)
    {
      uint64_t v144 = *(void *)(v139 + 24);
      unsigned int v145 = *(unsigned __int8 *)(v144 + 16);
      if (v144) {
        BOOL v146 = v145 >= 0x1C;
      }
      else {
        BOOL v146 = 0;
      }
      if (!v146) {
        goto LABEL_334;
      }
      v147 = *(void **)(v144 + 40);
      if (v145 == 83)
      {
        int v148 = *(_DWORD *)(v144 + 20);
        uint64_t v149 = v148 & 0x7FFFFFF;
        if ((v148 & 0x7FFFFFF) != 0)
        {
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          uint64_t v152 = 32 * v149;
          uint64_t v153 = v144 - 32 * v149;
          do
          {
            if ((v148 & 0x40000000) != 0)
            {
              uint64_t v155 = *(void *)(v144 - 8);
              v154 = *(void **)(v155 + v151);
            }
            else
            {
              v154 = *(void **)(v153 + v151);
              uint64_t v155 = v153;
            }
            if (v154 == v136) {
              v147 = *(void **)(v155 + 32 * *(unsigned int *)(v144 + 60) + v150);
            }
            v151 += 32;
            v150 += 8;
          }
          while (v152 != v151);
        }
      }
      if (v147 == v138) {
        break;
      }
      if (v143 != p_src) {
        goto LABEL_313;
      }
      if (v140)
      {
        v156 = 0;
        uint64_t v157 = 8 * v140;
        v158 = p_src;
        while (*v158 != v147)
        {
          if (*v158 == (void *)-2) {
            v156 = v158;
          }
          ++v158;
          v157 -= 8;
          if (!v157)
          {
            if (!v156) {
              goto LABEL_311;
            }
            *v156 = v147;
            --*(_DWORD *)&v1400[24];
            goto LABEL_333;
          }
        }
        goto LABEL_333;
      }
LABEL_311:
      if (v141 <= v140)
      {
LABEL_313:
        if (3 * v141 <= 4 * (v140 - *(_DWORD *)&v1400[24]))
        {
          if (v141 >= 0x40) {
            v141 *= 2;
          }
          else {
            unsigned int v141 = 128;
          }
        }
        else if (v141 - v140 >= v141 >> 3)
        {
          goto LABEL_315;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1400, v141);
        unsigned int v141 = *(_DWORD *)&v1400[16];
        v143 = *(void ***)&v1400[8];
LABEL_315:
        unsigned int v159 = v141 - 1;
        unsigned int v160 = (v141 - 1) & ((v147 >> 4) ^ (v147 >> 9));
        v161 = &v143[v160];
        v162 = *v161;
        if (*v161 == (void *)-1)
        {
          v163 = 0;
LABEL_327:
          if (v163) {
            v161 = v163;
          }
          if (*v161 != v147)
          {
            if (*v161 == (void *)-2) {
              --*(_DWORD *)&v1400[24];
            }
            else {
              ++*(_DWORD *)&v1400[20];
            }
            *v161 = v147;
          }
        }
        else
        {
          v163 = 0;
          int v164 = 1;
          while (v162 != v147)
          {
            if (v163) {
              BOOL v165 = 0;
            }
            else {
              BOOL v165 = v162 == (void *)-2;
            }
            if (v165) {
              v163 = v161;
            }
            unsigned int v166 = v160 + v164++;
            unsigned int v160 = v166 & v159;
            v161 = &v143[v166 & v159];
            v162 = *v161;
            if (*v161 == (void *)-1) {
              goto LABEL_327;
            }
          }
        }
        goto LABEL_333;
      }
      *(_DWORD *)&v1400[20] = v140 + 1;
      p_src[v140] = v147;
LABEL_333:
      v143 = *(void ***)&v1400[8];
      p_src = *(void ***)v1400;
      unsigned int v140 = *(_DWORD *)&v1400[20];
      unsigned int v141 = *(_DWORD *)&v1400[16];
LABEL_334:
      uint64_t v139 = *(void *)(v139 + 8);
      if (!v139) {
        goto LABEL_345;
      }
    }
    if (v143 == p_src) {
      goto LABEL_344;
    }
    if (v141 >= 0x21 && 4 * (v140 - *(_DWORD *)&v1400[24]) < v141)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v1400);
      unsigned int v140 = *(_DWORD *)&v1400[20];
    }
    else
    {
      memset(v143, 255, 8 * v141);
LABEL_344:
      unsigned int v140 = 0;
      *(_DWORD *)&v1400[24] = 0;
      *(_DWORD *)&v1400[20] = 0;
    }
LABEL_345:
    if (v140 != *(_DWORD *)&v1400[24])
    {
      if (*(void *)&v1400[8] == *(void *)v1400) {
        uint64_t v167 = v140;
      }
      else {
        uint64_t v167 = *(unsigned int *)&v1400[16];
      }
      v168 = (unint64_t *)(*(void *)&v1400[8] + 8 * v167);
      if (v167)
      {
        uint64_t v169 = 8 * v167;
        uint64_t v170 = 8 * v167;
        v171 = *(unint64_t **)&v1400[8];
        while (1)
        {
          unint64_t v172 = *v171;
          if (*v171 < 0xFFFFFFFFFFFFFFFELL) {
            break;
          }
          ++v171;
          v170 -= 8;
          if (!v170)
          {
            unint64_t v172 = *v168;
            break;
          }
        }
        v173 = *(unint64_t **)&v1400[8];
        while (1)
        {
          unint64_t v174 = *v173;
          if (*v173 < 0xFFFFFFFFFFFFFFFELL) {
            break;
          }
          ++v173;
          v169 -= 8;
          if (!v169) {
            goto LABEL_400;
          }
        }
      }
      else
      {
        unint64_t v174 = **(void **)&v1400[8];
        unint64_t v172 = **(void **)&v1400[8];
        v173 = *(unint64_t **)&v1400[8];
      }
      if (v173 != v168)
      {
LABEL_360:
        uint64_t v175 = *(void *)(*(void *)(v172 + 56) + 80);
        if (v175) {
          unint64_t v176 = v175 - 24;
        }
        else {
          unint64_t v176 = 0;
        }
        if (v176 == v172 || v176 == v174)
        {
          unint64_t v172 = v176;
        }
        else
        {
          uint64_t v178 = *(void *)(v1353 + 24);
          uint64_t v179 = *(unsigned int *)(v1353 + 40);
          if (!v179) {
            goto LABEL_374;
          }
          LODWORD(v180) = (v179 - 1) & ((v172 >> 4) ^ (v172 >> 9));
          v181 = (uint64_t *)(v178 + 16 * v180);
          uint64_t v182 = *v181;
          if (*v181 != v172)
          {
            int v183 = 1;
            while (v182 != -4096)
            {
              int v184 = v180 + v183++;
              uint64_t v180 = v184 & (v179 - 1);
              uint64_t v182 = *(void *)(v178 + 16 * v180);
              if (v182 == v172)
              {
                v181 = (uint64_t *)(v178 + 16 * v180);
                goto LABEL_375;
              }
            }
LABEL_374:
            v181 = (uint64_t *)(v178 + 16 * v179);
          }
LABEL_375:
          v185 = (uint64_t *)(v178 + 16 * v179);
          if (v181 == v185)
          {
            uint64_t v186 = 0;
            if (!v179) {
              goto LABEL_399;
            }
LABEL_377:
            unsigned int v187 = v179 - 1;
            LODWORD(v179) = (v179 - 1) & ((v174 >> 4) ^ (v174 >> 9));
            v188 = (uint64_t *)(v178 + 16 * v179);
            uint64_t v189 = *v188;
            if (*v188 != v174)
            {
              int v190 = 1;
              while (v189 != -4096)
              {
                int v191 = v179 + v190++;
                uint64_t v179 = v191 & v187;
                uint64_t v189 = *(void *)(v178 + 16 * v179);
                if (v189 == v174)
                {
                  v188 = (uint64_t *)(v178 + 16 * v179);
                  goto LABEL_382;
                }
              }
              goto LABEL_399;
            }
LABEL_382:
            if (v188 == v185) {
              goto LABEL_399;
            }
            uint64_t v192 = v188[1];
          }
          else
          {
            uint64_t v186 = v181[1];
            if (v179) {
              goto LABEL_377;
            }
LABEL_399:
            uint64_t v192 = 0;
          }
          if (v186 == v192)
          {
            uint64_t v192 = v186;
          }
          else
          {
            do
            {
              unsigned int v193 = *(_DWORD *)(v186 + 16);
              unsigned int v194 = *(_DWORD *)(v192 + 16);
              BOOL v195 = v193 >= v194;
              if (v193 >= v194) {
                uint64_t v196 = v186;
              }
              else {
                uint64_t v196 = v192;
              }
              if (!v195) {
                uint64_t v192 = v186;
              }
              uint64_t v186 = *(void *)(v196 + 8);
            }
            while (v186 != v192);
          }
          unint64_t v172 = *(void *)v192;
        }
        v197 = v173 + 1;
        while (v197 != v168)
        {
          unint64_t v198 = *v197++;
          unint64_t v174 = v198;
          if (v198 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v173 = v197 - 1;
            goto LABEL_360;
          }
        }
      }
LABEL_400:
      if ((void *)v172 != v138) {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
      }
    }
    if (*(void *)&v1400[8] != *(void *)v1400) {
      free(*(void **)&v1400[8]);
    }
LABEL_408:
    v199 = (llvm::SmallPtrSetImplBase *)((char *)v126 + 16);
    uint64_t v126 = v124;
    if (v199 != v124)
    {
      uint64_t v126 = v199;
      while ((*(void *)v126 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        uint64_t v126 = (llvm::SmallPtrSetImplBase *)((char *)v126 + 16);
        if (v126 == v124)
        {
          uint64_t v126 = v124;
          break;
        }
      }
    }
  }
  while (v126 != v135);
  int v121 = v1372;
  uint64_t v122 = v1371;
  uint64_t v123 = v1373;
LABEL_415:
  if (v121)
  {
    if (v123)
    {
      uint64_t v200 = 16 * v123;
      v201 = v122;
      while ((*(void *)v201 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v201 = (llvm::SmallPtrSetImplBase *)((char *)v201 + 16);
        v200 -= 16;
        if (!v200) {
          goto LABEL_420;
        }
      }
    }
    else
    {
      v201 = v122;
    }
  }
  else
  {
LABEL_420:
    v201 = (llvm::SmallPtrSetImplBase *)((char *)v122 + 16 * v123);
  }
  v1313 = (llvm::SmallPtrSetImplBase *)((char *)v122 + 16 * v123);
  if (v201 == v1313) {
    goto LABEL_865;
  }
  LODWORD(v1324) = 0;
  v1312 = (char *)&v1415 + 8;
  v202 = (char **)&v1443;
  v203 = &v1435;
  v204 = &v1452;
  v1320 = &__src;
  v1317 = &v1452;
  v1310 = (char **)&v1443;
  v1311 = (llvm::SmallPtrSetImplBase *)((char *)v122 + 16 * v123);
  v1309 = &v1435;
  v1322 = (void **)&v1344;
  while (2)
  {
    v1412 = v1312;
    p_TTI = v1312;
    uint64_t v1414 = 16;
    LODWORD(v1415) = 0;
    v1321 = v201;
    unint64_t v205 = *(void *)v201;
    *(void *)&long long v1442 = v202;
    v1443.n128_u64[0] = v205;
    *((void *)&v1442 + 1) = 0x500000001;
    v1434.n128_u64[0] = (unint64_t)v203;
    v1434.n128_u64[1] = 0x500000000;
    v206 = (__n128 *)&v1442;
    v207 = &v1434;
    unsigned int v208 = 1;
    while (2)
    {
      uint64_t v209 = (uint64_t)v207;
      v1318 = (void **)&v207[1];
      while (2)
      {
        uint64_t v210 = *(void *)(v206->n128_u64[0] + 8 * v208 - 8);
        v206->n128_u32[2] = v208 - 1;
        if (*(unsigned __int8 *)(v210 + 16) <= 0x1Bu) {
          uint64_t v211 = 0;
        }
        else {
          uint64_t v211 = v210;
        }
        v1338 = (unsigned char *)v211;
        if (v211)
        {
          v212 = (char *)p_TTI;
          v213 = v1412;
          if (p_TTI == v1412)
          {
            unsigned int v214 = HIDWORD(v1414);
            v215 = (char *)p_TTI + 8 * HIDWORD(v1414);
            if (HIDWORD(v1414))
            {
              uint64_t v216 = 0;
              while (*(void *)((char *)p_TTI + v216) != v211)
              {
                v216 += 8;
                if (8 * HIDWORD(v1414) == v216) {
                  goto LABEL_449;
                }
              }
              v215 = (char *)p_TTI + v216;
            }
LABEL_449:
            v213 = p_TTI;
          }
          else
          {
            int v217 = v1414 - 1;
            unsigned int v218 = (v1414 - 1) & ((v211 >> 4) ^ (v211 >> 9));
            v215 = (char *)p_TTI + 8 * v218;
            uint64_t v219 = *(void *)v215;
            if (*(void *)v215 == -1)
            {
              v220 = 0;
LABEL_478:
              if (v220) {
                v215 = v220;
              }
              unsigned int v214 = HIDWORD(v1414);
              if (*(void *)v215 != v211) {
                v215 = (char *)p_TTI + 8 * v1414;
              }
            }
            else
            {
              v220 = 0;
              int v221 = 1;
              while (v219 != v211)
              {
                if (v220) {
                  BOOL v222 = 0;
                }
                else {
                  BOOL v222 = v219 == -2;
                }
                if (v222) {
                  v220 = v215;
                }
                unsigned int v223 = v218 + v221++;
                unsigned int v218 = v223 & v217;
                v215 = (char *)p_TTI + 8 * (v223 & v217);
                uint64_t v219 = *(void *)v215;
                if (*(void *)v215 == -1) {
                  goto LABEL_478;
                }
              }
              unsigned int v214 = HIDWORD(v1414);
            }
          }
          unsigned int v224 = v1414;
          unsigned int v225 = p_TTI == v213 ? v214 : v1414;
          if (v215 == (char *)p_TTI + 8 * v225)
          {
            if (p_TTI == v213)
            {
              if (v214)
              {
                v226 = 0;
                uint64_t v227 = 8 * v214;
                v228 = (uint64_t *)p_TTI;
                while (*v228 != v211)
                {
                  if (*v228 == -2) {
                    v226 = v228;
                  }
                  ++v228;
                  v227 -= 8;
                  if (!v227)
                  {
                    if (!v226) {
                      goto LABEL_462;
                    }
                    uint64_t *v226 = v211;
                    LODWORD(v1415) = v1415 - 1;
                    break;
                  }
                }
LABEL_491:
                if (sub_1CC82EA14(v211))
                {
                  v238 = sub_1CC82EB78((uint64_t)v1323, (uint64_t *)&v1338);
                  v239 = v238;
                  unsigned int v240 = *((unsigned __int16 *)v238 + 8);
                  v241 = v1321;
                  if (v240 <= *((unsigned __int16 *)v1321 + 4)) {
                    LOWORD(v240) = *((_WORD *)v1321 + 4);
                  }
                  *((unsigned char *)v238 + 18) |= *((unsigned char *)v1321 + 10);
                  *((_WORD *)v238 + 8) = v240;
                  unint64_t v242 = *((unsigned int *)v238 + 8);
                  if (v242 >= *((unsigned int *)v238 + 9)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v238[3] + 8 * v242) = *(void *)v241;
                  ++*((_DWORD *)v238 + 8);
                  int v243 = sub_1CC82EC04(v211);
                  unsigned char *v239 = v243;
                  LODWORD(v1324) = (v243 == 0) | v1324;
                  goto LABEL_764;
                }
                if (*(unsigned __int8 *)(v211 + 16) - 29 > 0xA) {
                  goto LABEL_731;
                }
                uint64_t v244 = *(void *)(v211 + 40);
                uint64_t v245 = *(void *)(*((void *)&v1353 + 1) + 48);
                uint64_t v246 = *(unsigned int *)(*((void *)&v1353 + 1) + 64);
                if (!v246) {
                  goto LABEL_503;
                }
                LODWORD(v247) = ((v244 >> 4) ^ (v244 >> 9)) & (v246 - 1);
                v248 = (uint64_t *)(v245 + 16 * v247);
                uint64_t v249 = *v248;
                if (v244 != *v248)
                {
                  int v250 = 1;
                  while (v249 != -4096)
                  {
                    int v251 = v247 + v250++;
                    uint64_t v247 = v251 & (v246 - 1);
                    uint64_t v249 = *(void *)(v245 + 16 * v247);
                    if (v244 == v249)
                    {
                      v248 = (uint64_t *)(v245 + 16 * v247);
                      goto LABEL_504;
                    }
                  }
LABEL_503:
                  v248 = (uint64_t *)(v245 + 16 * v246);
                }
LABEL_504:
                v252 = **(void ****)(v248[1] + 8);
                uint64_t v253 = *(void *)(v244 + 40);
                if (v253 == v244 + 40)
                {
LABEL_541:
                  unsigned int v359 = 0;
                  v267 = (llvm::DominatorTree *)v1322;
                  v1343[0] = (llvm::DominatorTree *)v1322;
                  HIDWORD(v1343[1]) = 10;
                }
                else
                {
                  if (v253) {
                    uint64_t v254 = v253 - 24;
                  }
                  else {
                    uint64_t v254 = 0;
                  }
                  int v255 = *(unsigned __int8 *)(v254 + 16);
                  if (v255 != 30)
                  {
                    unsigned int v359 = 0;
                    switch(*(unsigned char *)(v254 + 16))
                    {
                      case 0x1D:
                      case 0x22:
                      case 0x23:
                        goto LABEL_513;
                      case 0x1E:
LABEL_3013:
                        __break(1u);
                        return result;
                      case 0x1F:
                        unsigned int v359 = (*(_DWORD *)(v254 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_775;
                      case 0x20:
                      case 0x26:
                        unsigned int v359 = (*(_DWORD *)(v254 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_775;
                      case 0x21:
                        unsigned int v359 = 2;
                        goto LABEL_513;
                      case 0x24:
                        unsigned int v359 = *(_WORD *)(v254 + 18) & 1;
                        goto LABEL_513;
                      case 0x25:
                        unsigned int v359 = 1;
                        goto LABEL_513;
                      case 0x27:
                        unsigned int v359 = *(_DWORD *)(v254 + 80) + 1;
LABEL_775:
                        v1343[0] = (llvm::DominatorTree *)v1322;
                        v1343[1] = (llvm::DominatorTree *)0xA00000000;
                        if (v359 >= 0xB) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        goto LABEL_514;
                      default:
                        goto LABEL_541;
                    }
                  }
                  if ((*(_DWORD *)(v254 + 20) & 0x7FFFFFF) == 3) {
                    unsigned int v359 = 2;
                  }
                  else {
                    unsigned int v359 = 1;
                  }
LABEL_513:
                  v1343[0] = (llvm::DominatorTree *)v1322;
                  HIDWORD(v1343[1]) = 10;
LABEL_514:
                  if (v359)
                  {
                    int v256 = 0;
                    uint64_t v257 = 0;
                    v258 = v1322;
                    uint64_t v259 = v254 - 64;
                    do
                    {
                      if (v255 == 30)
                      {
                        v261 = (void **)(v254 - 32 - 32 * v257);
                      }
                      else
                      {
                        v261 = (void **)(v254 - 32);
                        switch(v255)
                        {
                          case ' ':
                          case '&':
                            int v264 = *(_DWORD *)(v254 + 20);
                            if ((v264 & 0x40000000) != 0) {
                              uint64_t v265 = *(void *)(v254 - 8);
                            }
                            else {
                              uint64_t v265 = v254 - 32 * (v264 & 0x7FFFFFF);
                            }
                            v261 = (void **)(v265 + 32 * (v257 + 1));
                            goto LABEL_540;
                          case '!':
                            uint64_t v266 = -64;
                            if (!v257) {
                              uint64_t v266 = -96;
                            }
                            v261 = (void **)(v254 + v266);
                            break;
                          case '""':
                          case '#':
                            goto LABEL_3013;
                          case '$':
                            if ((*(_WORD *)(v254 + 18) & 1) == 0)
                            {
                              v260 = 0;
                              v204 = v1317;
                              goto LABEL_520;
                            }
                            v261 = (void **)(v254 + 32 - 32 * (*(_DWORD *)(v254 + 20) & 0x7FFFFFF));
LABEL_540:
                            v204 = v1317;
                            break;
                          case '%':
                            break;
                          case '\'':
                            if (v257) {
                              v261 = (void **)(v259 - 32 * *(unsigned int *)(v254 + 80));
                            }
                            else {
                              v261 = (void **)(v254 - 64 - 32 * *(unsigned int *)(v254 + 80));
                            }
                            goto LABEL_540;
                          default:
                            int v262 = *(_DWORD *)(v254 + 20);
                            if ((v262 & 0x40000000) != 0) {
                              uint64_t v263 = *(void *)(v254 - 8);
                            }
                            else {
                              uint64_t v263 = v254 - 32 * (v262 & 0x7FFFFFF);
                            }
                            v261 = (void **)(v263 + 32 * (v256 & 0xFFFFFFFE) + 32);
                            break;
                        }
                      }
                      v260 = *v261;
LABEL_520:
                      v258[v257++] = v260;
                      v256 += 2;
                      v259 += 32;
                    }
                    while (v359 != v257);
                    v267 = v1343[0];
                  }
                  else
                  {
                    unsigned int v359 = 0;
                    v267 = (llvm::DominatorTree *)v1322;
                  }
                }
                *(void *)v1400 = v1320;
                *(void *)&v1400[8] = v1320;
                *(void *)&v1400[16] = 16;
                *(_DWORD *)&v1400[24] = 0;
                LODWORD(v1343[1]) = v359;
                if (!v359) {
                  goto LABEL_728;
                }
                unsigned int v268 = 16;
                v269 = v1320;
                v270 = v1320;
                v271 = (llvm::DominatorTree *)((char *)v267 + 8 * v359);
                while (1)
                {
                  v272 = *(void **)v267;
                  uint64_t v273 = *(unsigned int *)&v1400[20];
                  if (v269 != v270) {
                    break;
                  }
                  if (*(_DWORD *)&v1400[20])
                  {
                    v274 = 0;
                    uint64_t v275 = 8 * *(unsigned int *)&v1400[20];
                    v276 = v270;
                    while (*v276 != v272)
                    {
                      if (*v276 == (void *)-2) {
                        v274 = v276;
                      }
                      ++v276;
                      v275 -= 8;
                      if (!v275)
                      {
                        if (!v274) {
                          goto LABEL_552;
                        }
                        *v274 = v272;
                        --*(_DWORD *)&v1400[24];
                        goto LABEL_574;
                      }
                    }
                    goto LABEL_574;
                  }
LABEL_552:
                  if (*(_DWORD *)&v1400[20] >= v268) {
                    break;
                  }
                  ++*(_DWORD *)&v1400[20];
                  v270[v273] = v272;
LABEL_574:
                  v269 = *(void ***)&v1400[8];
                  v270 = *(void ***)v1400;
                  v267 = (llvm::DominatorTree *)((char *)v267 + 8);
                  if (v267 == v271)
                  {
                    unsigned int v285 = v1343[1];
                    if (LODWORD(v1343[1]))
                    {
                      p_dst = v252;
                      while (1)
                      {
                        uint64_t v286 = *((void *)v1343[0] + v285 - 1);
                        LODWORD(v1343[1]) = v285 - 1;
                        v1450 = v204;
                        v1451 = (void *)0x400000000;
                        v287 = (void *)(v286 + 40);
                        for (uint64_t j = *(void *)(v286 + 48); ; uint64_t j = *((void *)v1328 + 1))
                        {
                          v1328 = (char *)j;
                          if ((void *)j == v287) {
                            break;
                          }
                          if (j) {
                            uint64_t v289 = j - 24;
                          }
                          else {
                            uint64_t v289 = 0;
                          }
                          if (*(unsigned char *)(v289 + 16) == 83)
                          {
                            unint64_t v290 = *(unsigned int *)(v209 + 8);
                            if (v290 >= *(unsigned int *)(v209 + 12)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)(*(void *)v209 + 8 * v290) = v289;
                            ++*(_DWORD *)(v209 + 8);
                          }
                          int v291 = sub_1CC82F368(&v1328);
                          v292 = v1328 - 24;
                          if (v1328) {
                            uint64_t v293 = (uint64_t)(v1328 - 24);
                          }
                          else {
                            uint64_t v293 = 0;
                          }
                          if (v291 && v1328 && *(_DWORD *)(*(void *)(v293 - 32) + 36) == 2470)
                          {
                            unint64_t v294 = *(unsigned int *)(v209 + 8);
                            if (v294 >= *(unsigned int *)(v209 + 12)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            v295 = (void **)v209;
                          }
                          else
                          {
                            if (!sub_1CC82EA14(v293)) {
                              continue;
                            }
                            if (v1328) {
                              v292 = v1328 - 24;
                            }
                            else {
                              v292 = 0;
                            }
                            unint64_t v294 = v1451;
                            if (v1451 >= (unint64_t)HIDWORD(v1451)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            v295 = &v1450;
                          }
                          *((void *)*v295 + v294) = v292;
                          ++*((_DWORD *)v295 + 2);
                        }
                        if ((void **)v286 != v252)
                        {
                          if (v1451)
                          {
                            v296 = v1450;
                            unsigned int v297 = *(_DWORD *)(v209 + 8);
                            uint64_t v298 = 8 * v1451;
                            do
                            {
                              if (v297 >= *(_DWORD *)(v209 + 12)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)(*(void *)v209 + 8 * v297) = *v296;
                              unsigned int v297 = *(_DWORD *)(v209 + 8) + 1;
                              *(_DWORD *)(v209 + 8) = v297;
                              ++v296;
                              v298 -= 8;
                            }
                            while (v298);
                          }
                          v299 = (void *)*v287;
                          if ((void *)*v287 != v287) {
                            break;
                          }
                        }
LABEL_715:
                        if (v1450 != v204) {
                          free(v1450);
                        }
                        unsigned int v285 = v1343[1];
                        if (!LODWORD(v1343[1]))
                        {
                          v269 = *(void ***)&v1400[8];
                          v270 = *(void ***)v1400;
                          goto LABEL_726;
                        }
                      }
                      if (v299) {
                        v300 = (__n128 *)(v299 - 3);
                      }
                      else {
                        v300 = 0;
                      }
                      int v301 = v300[1].n128_u8[0];
                      int v302 = v301 - 29;
                      if ((v301 - 29) >= 0xB) {
                        v303 = 0;
                      }
                      else {
                        v303 = v300;
                      }
                      if (v301 != 30)
                      {
                        unsigned int v304 = 2;
                        switch(v302)
                        {
                          case 1:
                            goto LABEL_3013;
                          case 2:
                            unsigned int v304 = (v300[1].n128_u32[1] >> 1) & 0x3FFFFFF;
                            goto LABEL_720;
                          case 3:
                          case 9:
                            unsigned int v304 = (v300[1].n128_u32[1] & 0x7FFFFFF) - 1;
                            goto LABEL_720;
                          case 4:
                            goto LABEL_627;
                          case 7:
                            unsigned int v304 = v300[1].n128_u16[1] & 1;
                            goto LABEL_720;
                          case 8:
                            unsigned int v304 = 1;
                            goto LABEL_627;
                          case 10:
                            unsigned int v304 = v300[5].n128_u32[0] + 1;
LABEL_720:
                            if (!v304) {
                              goto LABEL_715;
                            }
                            goto LABEL_627;
                          default:
                            goto LABEL_715;
                        }
                      }
                      if ((v300[1].n128_u32[1] & 0x7FFFFFF) == 3) {
                        unsigned int v304 = 2;
                      }
                      else {
                        unsigned int v304 = 1;
                      }
LABEL_627:
                      uint64_t v305 = 0;
                      v306 = v300 + 2;
                      v307 = v300 - 2;
                      v308 = (llvm::SmallPtrSetImplBase *)&v300[-4];
                      uint64_t v309 = v304;
                      while (2)
                      {
                        int v310 = v300[1].n128_u8[0];
                        if (v310 == 30)
                        {
                          v311 = &v307[-2 * v305];
                        }
                        else
                        {
                          v311 = v300 - 2;
                          switch(v300[1].n128_u8[0])
                          {
                            case ' ':
                            case '&':
                              __int32 v338 = v300[1].n128_i32[1];
                              if ((v338 & 0x40000000) != 0) {
                                uint64_t v339 = v300[-1].n128_i64[1];
                              }
                              else {
                                uint64_t v339 = (uint64_t)&v303[-2 * (v338 & 0x7FFFFFF)];
                              }
                              v311 = (__n128 *)(v339 + 32 * v305 + 32);
                              goto LABEL_711;
                            case '!':
                              uint64_t v340 = 0xFFFFFFFFFFFFFFCLL;
                              if (!v305) {
                                uint64_t v340 = 0xFFFFFFFFFFFFFFALL;
                              }
                              v311 = &v303[v340];
                              break;
                            case '""':
                            case '#':
                              goto LABEL_3013;
                            case '$':
                              if ((v300[1].n128_u16[1] & 1) == 0)
                              {
                                unint64_t v312 = 0;
                                v204 = v1317;
                                goto LABEL_631;
                              }
                              v311 = &v306[-2 * (v300[1].n128_u32[1] & 0x7FFFFFF)];
LABEL_711:
                              v204 = v1317;
                              break;
                            case '%':
                              break;
                            case '\'':
                              if (v305) {
                                v311 = &v307[2 * v305 - 2 + -2 * v300[5].n128_u32[0]];
                              }
                              else {
                                v311 = (__n128 *)((char *)v308 - 32 * v300[5].n128_u32[0]);
                              }
                              goto LABEL_711;
                            default:
                              __int32 v329 = v300[1].n128_i32[1];
                              if ((v329 & 0x40000000) != 0) {
                                uint64_t v330 = v300[-1].n128_i64[1];
                              }
                              else {
                                uint64_t v330 = (uint64_t)&v303[-2 * (v329 & 0x7FFFFFF)];
                              }
                              v311 = (__n128 *)(v330 + 32 * (2 * v305) + 32);
                              break;
                          }
                        }
                        unint64_t v312 = v311->n128_u64[0];
LABEL_631:
                        uint64_t v313 = *(void *)&v1400[8];
                        uint64_t v314 = *(unsigned int *)&v1400[20];
                        if (*(void *)&v1400[8] == *(void *)v1400)
                        {
                          if (*(_DWORD *)&v1400[20])
                          {
                            v315 = 0;
                            uint64_t v316 = 8 * *(unsigned int *)&v1400[20];
                            v317 = *(unint64_t **)&v1400[8];
                            while (*v317 != v312)
                            {
                              if (*v317 == -2) {
                                v315 = v317;
                              }
                              ++v317;
                              v316 -= 8;
                              if (!v316)
                              {
                                if (!v315) {
                                  goto LABEL_639;
                                }
                                unint64_t *v315 = v312;
                                --*(_DWORD *)&v1400[24];
                                goto LABEL_662;
                              }
                            }
                            goto LABEL_667;
                          }
LABEL_639:
                          unsigned int v318 = *(_DWORD *)&v1400[16];
                          if (*(_DWORD *)&v1400[20] < *(_DWORD *)&v1400[16])
                          {
                            ++*(_DWORD *)&v1400[20];
                            *(void *)(*(void *)&v1400[8] + 8 * v314) = v312;
                            goto LABEL_662;
                          }
                        }
                        else
                        {
                          unsigned int v318 = *(_DWORD *)&v1400[16];
                        }
                        if (3 * v318 <= 4 * (*(_DWORD *)&v1400[20] - *(_DWORD *)&v1400[24]))
                        {
                          if (v318 >= 0x40) {
                            v318 *= 2;
                          }
                          else {
                            unsigned int v318 = 128;
                          }
                        }
                        else if (v318 - *(_DWORD *)&v1400[20] >= v318 >> 3)
                        {
LABEL_644:
                          unsigned int v319 = v318 - 1;
                          unsigned int v320 = (v318 - 1) & ((v312 >> 4) ^ (v312 >> 9));
                          v321 = (unint64_t *)(v313 + 8 * v320);
                          unint64_t v322 = *v321;
                          if (*v321 != -1)
                          {
                            v323 = 0;
                            int v324 = 1;
                            while (v322 != v312)
                            {
                              if (v323) {
                                BOOL v325 = 0;
                              }
                              else {
                                BOOL v325 = v322 == -2;
                              }
                              if (v325) {
                                v323 = v321;
                              }
                              unsigned int v326 = v320 + v324++;
                              unsigned int v320 = v326 & v319;
                              v321 = (unint64_t *)(v313 + 8 * (v326 & v319));
                              unint64_t v322 = *v321;
                              if (*v321 == -1) {
                                goto LABEL_656;
                              }
                            }
                            goto LABEL_667;
                          }
                          v323 = 0;
LABEL_656:
                          if (v323) {
                            v321 = v323;
                          }
                          if (*v321 == v312)
                          {
LABEL_667:
                            if (++v305 == v309) {
                              goto LABEL_715;
                            }
                            continue;
                          }
                          if (*v321 == -2) {
                            --*(_DWORD *)&v1400[24];
                          }
                          else {
                            ++*(_DWORD *)&v1400[20];
                          }
                          unint64_t *v321 = v312;
                          int v310 = v300[1].n128_u8[0];
LABEL_662:
                          if (v310 == 30)
                          {
                            v327 = &v307[-2 * v305];
                          }
                          else
                          {
                            uint64_t v331 = (v310 - 31);
                            v327 = v300 - 2;
                            switch(v331)
                            {
                              case 1:
                              case 7:
                                __int32 v341 = v300[1].n128_i32[1];
                                if ((v341 & 0x40000000) != 0) {
                                  uint64_t v342 = v300[-1].n128_i64[1];
                                }
                                else {
                                  uint64_t v342 = (uint64_t)&v303[-2 * (v341 & 0x7FFFFFF)];
                                }
                                v327 = (__n128 *)(v342 + 32 * v305 + 32);
                                goto LABEL_713;
                              case 2:
                                uint64_t v343 = 0xFFFFFFFFFFFFFFCLL;
                                if (!v305) {
                                  uint64_t v343 = 0xFFFFFFFFFFFFFFALL;
                                }
                                v327 = &v303[v343];
                                break;
                              case 3:
                              case 4:
                                goto LABEL_3013;
                              case 5:
                                if ((v300[1].n128_u16[1] & 1) == 0)
                                {
                                  unint64_t v328 = 0;
                                  v204 = v1317;
                                  goto LABEL_665;
                                }
                                v327 = &v306[-2 * (v300[1].n128_u32[1] & 0x7FFFFFF)];
LABEL_713:
                                v204 = v1317;
                                break;
                              case 6:
                                break;
                              case 8:
                                if (v305) {
                                  v327 = &v307[2 * v305 - 2 + -2 * v300[5].n128_u32[0]];
                                }
                                else {
                                  v327 = (__n128 *)((char *)v308 - 32 * v300[5].n128_u32[0]);
                                }
                                goto LABEL_713;
                              default:
                                __int32 v332 = v300[1].n128_i32[1];
                                if ((v332 & 0x40000000) != 0) {
                                  uint64_t v333 = v300[-1].n128_i64[1];
                                }
                                else {
                                  uint64_t v333 = (uint64_t)&v303[-2 * (v332 & 0x7FFFFFF)];
                                }
                                v327 = (__n128 *)(v333 + 32 * (2 * v305) + 32);
                                break;
                            }
                          }
                          unint64_t v328 = v327->n128_u64[0];
LABEL_665:
                          if (LODWORD(v1343[1]) >= (unint64_t)HIDWORD(v1343[1]))
                          {
                            v1315 = v308;
                            v1316 = v306;
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v1343[0] + LODWORD(v1343[1])) = v328;
                          ++LODWORD(v1343[1]);
                          goto LABEL_667;
                        }
                        break;
                      }
                      v334 = v303;
                      v335 = v306;
                      v336 = v206;
                      v337 = v308;
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1400, v318);
                      v308 = v337;
                      v206 = v336;
                      v306 = v335;
                      v303 = v334;
                      v252 = p_dst;
                      v204 = v1317;
                      unsigned int v318 = *(_DWORD *)&v1400[16];
                      uint64_t v313 = *(void *)&v1400[8];
                      goto LABEL_644;
                    }
LABEL_726:
                    if (v269 != v270) {
                      free(v269);
                    }
LABEL_728:
                    if ((void **)v1343[0] != v1322) {
                      free(v1343[0]);
                    }
                    uint64_t v210 = (uint64_t)v1338;
LABEL_731:
                    v344 = (char *)v1375;
                    uint64_t v345 = HIDWORD(v1376);
                    if (v1375 != v1374)
                    {
                      unsigned int v349 = v1376;
                      goto LABEL_742;
                    }
                    if (HIDWORD(v1376))
                    {
                      v346 = 0;
                      uint64_t v347 = 8 * HIDWORD(v1376);
                      v348 = (uint64_t *)v1375;
                      while (*v348 != v210)
                      {
                        if (*v348 == -2) {
                          v346 = v348;
                        }
                        ++v348;
                        v347 -= 8;
                        if (!v347)
                        {
                          if (!v346) {
                            goto LABEL_740;
                          }
                          uint64_t *v346 = v210;
                          --v1377;
                          goto LABEL_763;
                        }
                      }
                      goto LABEL_763;
                    }
LABEL_740:
                    unsigned int v349 = v1376;
                    if (HIDWORD(v1376) < v1376)
                    {
                      ++HIDWORD(v1376);
                      *((void *)v1375 + v345) = v210;
LABEL_763:
                      sub_1CC472E24(v209, *(void *)(v210 + 8), 0);
                      goto LABEL_764;
                    }
LABEL_742:
                    if (3 * v349 <= 4 * (HIDWORD(v1376) - v1377))
                    {
                      if (v349 >= 0x40) {
                        v349 *= 2;
                      }
                      else {
                        unsigned int v349 = 128;
                      }
                    }
                    else if (v349 - HIDWORD(v1376) >= v349 >> 3)
                    {
                      goto LABEL_744;
                    }
                    llvm::SmallPtrSetImplBase::Grow(v1314, v349);
                    unsigned int v349 = v1376;
                    v344 = (char *)v1375;
LABEL_744:
                    unsigned int v350 = v349 - 1;
                    unsigned int v351 = (v349 - 1) & ((v210 >> 4) ^ (v210 >> 9));
                    v352 = &v344[8 * v351];
                    uint64_t v353 = *(void *)v352;
                    if (*(void *)v352 == -1)
                    {
                      v357 = 0;
LABEL_755:
                      if (v357) {
                        v358 = v357;
                      }
                      else {
                        v358 = (uint64_t *)v352;
                      }
                      if (*v358 != v210)
                      {
                        if (*v358 == -2) {
                          --v1377;
                        }
                        else {
                          ++HIDWORD(v1376);
                        }
                        uint64_t *v358 = v210;
                      }
                    }
                    else
                    {
                      v357 = 0;
                      int v354 = 1;
                      while (v353 != v210)
                      {
                        if (v357) {
                          BOOL v355 = 0;
                        }
                        else {
                          BOOL v355 = v353 == -2;
                        }
                        if (v355) {
                          v357 = (uint64_t *)v352;
                        }
                        unsigned int v356 = v351 + v354++;
                        unsigned int v351 = v356 & v350;
                        v352 = &v344[8 * (v356 & v350)];
                        uint64_t v353 = *(void *)v352;
                        if (*(void *)v352 == -1) {
                          goto LABEL_755;
                        }
                      }
                    }
                    goto LABEL_763;
                  }
                }
                if (3 * v268 <= 4 * (*(_DWORD *)&v1400[20] - *(_DWORD *)&v1400[24]))
                {
                  if (v268 >= 0x40) {
                    v268 *= 2;
                  }
                  else {
                    unsigned int v268 = 128;
                  }
                }
                else if (v268 - *(_DWORD *)&v1400[20] >= v268 >> 3)
                {
                  goto LABEL_556;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1400, v268);
                unsigned int v268 = *(_DWORD *)&v1400[16];
                v269 = *(void ***)&v1400[8];
LABEL_556:
                unsigned int v277 = v268 - 1;
                unsigned int v278 = (v268 - 1) & ((v272 >> 4) ^ (v272 >> 9));
                v279 = &v269[v278];
                v280 = *v279;
                if (*v279 == (void *)-1)
                {
                  v284 = 0;
LABEL_567:
                  if (v284) {
                    v279 = v284;
                  }
                  if (*v279 != v272)
                  {
                    if (*v279 == (void *)-2) {
                      --*(_DWORD *)&v1400[24];
                    }
                    else {
                      ++*(_DWORD *)&v1400[20];
                    }
                    *v279 = v272;
                  }
                }
                else
                {
                  v284 = 0;
                  int v281 = 1;
                  while (v280 != v272)
                  {
                    if (v284) {
                      BOOL v282 = 0;
                    }
                    else {
                      BOOL v282 = v280 == (void *)-2;
                    }
                    if (v282) {
                      v284 = v279;
                    }
                    unsigned int v283 = v278 + v281++;
                    unsigned int v278 = v283 & v277;
                    v279 = &v269[v283 & v277];
                    v280 = *v279;
                    if (*v279 == (void *)-1) {
                      goto LABEL_567;
                    }
                  }
                }
                goto LABEL_574;
              }
LABEL_462:
              if (v1414 > v214)
              {
                HIDWORD(v1414) = v214 + 1;
                *((void *)p_TTI + v214) = v211;
                goto LABEL_491;
              }
            }
            if (3 * (int)v1414 <= 4 * (v214 - v1415))
            {
              if (v1414 >= 0x40) {
                unsigned int v224 = 2 * v1414;
              }
              else {
                unsigned int v224 = 128;
              }
            }
            else if (v1414 - v214 >= v1414 >> 3)
            {
              goto LABEL_466;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1412, v224);
            unsigned int v224 = v1414;
            v212 = (char *)p_TTI;
LABEL_466:
            unsigned int v229 = v224 - 1;
            unsigned int v230 = (v224 - 1) & ((v211 >> 4) ^ (v211 >> 9));
            v231 = &v212[8 * v230];
            uint64_t v232 = *(void *)v231;
            if (*(void *)v231 == -1)
            {
              v233 = 0;
LABEL_484:
              if (v233) {
                v237 = v233;
              }
              else {
                v237 = (uint64_t *)v231;
              }
              if (*v237 != v211)
              {
                if (*v237 == -2) {
                  LODWORD(v1415) = v1415 - 1;
                }
                else {
                  ++HIDWORD(v1414);
                }
                uint64_t *v237 = v211;
              }
            }
            else
            {
              v233 = 0;
              int v234 = 1;
              while (v232 != v211)
              {
                if (v233) {
                  BOOL v235 = 0;
                }
                else {
                  BOOL v235 = v232 == -2;
                }
                if (v235) {
                  v233 = (uint64_t *)v231;
                }
                unsigned int v236 = v230 + v234++;
                unsigned int v230 = v236 & v229;
                v231 = &v212[8 * (v236 & v229)];
                uint64_t v232 = *(void *)v231;
                if (*(void *)v231 == -1) {
                  goto LABEL_484;
                }
              }
            }
            goto LABEL_491;
          }
        }
LABEL_764:
        unsigned int v208 = v206->n128_u32[2];
        if (v208) {
          continue;
        }
        break;
      }
      unsigned int v208 = *(_DWORD *)(v209 + 8);
      v207 = v206;
      v206 = (__n128 *)v209;
      if (v208) {
        continue;
      }
      break;
    }
    v203 = v1309;
    if ((long long *)v1434.n128_u64[0] != v1309) {
      free((void *)v1434.n128_u64[0]);
    }
    v202 = v1310;
    if ((char **)v1442 != v1310) {
      free((void *)v1442);
    }
    if (p_TTI != v1412) {
      free(p_TTI);
    }
    v201 = v1311;
    if ((llvm::SmallPtrSetImplBase *)((char *)v1321 + 16) != v1311)
    {
      v201 = (llvm::SmallPtrSetImplBase *)((char *)v1321 + 16);
      while ((*(void *)v201 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v201 = (llvm::SmallPtrSetImplBase *)((char *)v201 + 16);
        if (v201 == v1311)
        {
          v201 = v1311;
          break;
        }
      }
    }
    if (v201 != v1313) {
      continue;
    }
    break;
  }
  if ((v1324 & 1) == 0) {
    goto LABEL_865;
  }
  uint64_t v360 = v1397 + 72;
  for (uint64_t k = *(void *)(v1397 + 80); ; uint64_t k = *(void *)(k + 8))
  {
    if (k == v360) {
      goto LABEL_865;
    }
    uint64_t v362 = k - 24;
    if (!k) {
      uint64_t v362 = 0;
    }
    uint64_t v363 = *(void *)(v362 + 48);
    if (v363 != v362 + 40) {
      break;
    }
  }
  while (2)
  {
    if (v363) {
      uint64_t v364 = v363 - 24;
    }
    else {
      uint64_t v364 = 0;
    }
    if (!v1370)
    {
LABEL_817:
      if (!sub_1CC82EA14(v364)) {
        goto LABEL_853;
      }
      if (sub_1CC82ED00(v364)) {
        goto LABEL_865;
      }
      *(void *)v1400 = v364;
      if (v1370)
      {
        uint64_t v369 = (v1370 - 1) & ((v364 >> 4) ^ (v364 >> 9));
        v370 = (void *)(v1369 + (v369 << 6));
        uint64_t v371 = *v370;
        if (v364 == *v370)
        {
LABEL_832:
          v377 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
          if (v1372)
          {
            if (v1373)
            {
              uint64_t v378 = 16 * v1373;
              v379 = v1371;
              while ((*(void *)v379 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v379 = (llvm::SmallPtrSetImplBase *)((char *)v379 + 16);
                v378 -= 16;
                if (!v378) {
                  goto LABEL_837;
                }
              }
            }
            else
            {
              v379 = v1371;
            }
          }
          else
          {
LABEL_837:
            v379 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
          }
          v380 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
          if (v379 != v380)
          {
            unsigned int v381 = *((_DWORD *)v370 + 10);
            do
            {
              unsigned int v382 = *((unsigned __int16 *)v370 + 12);
              if (v382 <= *((unsigned __int16 *)v379 + 4)) {
                LOWORD(v382) = *((_WORD *)v379 + 4);
              }
              *((unsigned char *)v370 + 26) |= *((unsigned char *)v379 + 10);
              *((_WORD *)v370 + 12) = v382;
              if (v381 >= *((_DWORD *)v370 + 11))
              {
                v1324 = (long long *)(v370 + 4);
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v370[4] + 8 * v381) = *(void *)v379;
              unsigned int v381 = *((_DWORD *)v370 + 10) + 1;
              *((_DWORD *)v370 + 10) = v381;
              v383 = (llvm::SmallPtrSetImplBase *)((char *)v379 + 16);
              v379 = v377;
              if (v383 != v377)
              {
                v379 = v383;
                while ((*(void *)v379 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v379 = (llvm::SmallPtrSetImplBase *)((char *)v379 + 16);
                  if (v379 == v377)
                  {
                    v379 = v377;
                    break;
                  }
                }
              }
            }
            while (v379 != v380);
          }
          *((unsigned char *)v370 + 8) = sub_1CC82EC04(v364);
          goto LABEL_853;
        }
        v372 = 0;
        int v373 = 1;
        while (v371 != -4096)
        {
          if (v372) {
            BOOL v374 = 0;
          }
          else {
            BOOL v374 = v371 == -8192;
          }
          if (v374) {
            v372 = v370;
          }
          int v375 = v369 + v373++;
          uint64_t v369 = v375 & (v1370 - 1);
          v370 = (void *)(v1369 + (v369 << 6));
          uint64_t v371 = *v370;
          if (v364 == *v370) {
            goto LABEL_832;
          }
        }
        if (v372) {
          v376 = v372;
        }
        else {
          v376 = v370;
        }
      }
      else
      {
        v376 = 0;
      }
      v370 = sub_1CC82F0E4((uint64_t)v1323, (uint64_t *)v1400, v376);
      void *v370 = v364;
      *((unsigned char *)v370 + 8) = 0;
      v370[2] = 0;
      *((_WORD *)v370 + 12) = 0;
      *((unsigned char *)v370 + 26) = 0;
      v370[4] = v370 + 6;
      v370[5] = 0x200000000;
      goto LABEL_832;
    }
    unsigned int v365 = ((v364 >> 4) ^ (v364 >> 9)) & (v1370 - 1);
    uint64_t v366 = *(void *)(v1369 + ((unint64_t)v365 << 6));
    if (v364 != v366)
    {
      int v367 = 1;
      while (v366 != -4096)
      {
        unsigned int v368 = v365 + v367++;
        unsigned int v365 = v368 & (v1370 - 1);
        uint64_t v366 = *(void *)(v1369 + ((unint64_t)v365 << 6));
        if (v364 == v366) {
          goto LABEL_853;
        }
      }
      goto LABEL_817;
    }
LABEL_853:
    uint64_t v363 = *(void *)(v363 + 8);
    uint64_t v384 = k - 24;
    if (!k) {
      uint64_t v384 = 0;
    }
    if (v363 != v384 + 40)
    {
LABEL_860:
      if (k == v360) {
        goto LABEL_865;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t k = *(void *)(k + 8);
    if (k == v360) {
      break;
    }
    uint64_t v385 = k - 24;
    if (!k) {
      uint64_t v385 = 0;
    }
    uint64_t v363 = *(void *)(v385 + 48);
    if (v363 != v385 + 40) {
      goto LABEL_860;
    }
  }
LABEL_865:
  if (!DWORD2(v1369))
  {
    int v133 = 0;
    uint64_t v6 = v1307;
    uint64_t v134 = v1308;
    goto LABEL_1482;
  }
  v1434.n128_u64[0] = (unint64_t)&v1436;
  v1434.n128_u64[1] = (unint64_t)&v1436;
  *(void *)&long long v1435 = 8;
  DWORD2(v1435) = 0;
  v1450 = v1454;
  v1451 = v1454;
  uint64_t v1452 = 8;
  int v1453 = 0;
  if (v1370)
  {
    unint64_t v386 = (unint64_t)v1370 << 6;
    v387 = (uint64_t *)v1369;
    while ((*v387 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v387 += 8;
      v386 -= 64;
      if (!v386) {
        goto LABEL_924;
      }
    }
  }
  else
  {
    v387 = (uint64_t *)v1369;
  }
  v388 = (uint64_t *)(v1369 + ((unint64_t)v1370 << 6));
  if (v387 == v388) {
    goto LABEL_924;
  }
  uint64_t v389 = *v387;
LABEL_875:
  int v390 = *(_DWORD *)((char *)v387 + 23);
  *(_OWORD *)&v1400[8] = *(_OWORD *)(v387 + 1);
  *(_DWORD *)&v1400[23] = v390;
  *(void *)v1400 = v389;
  __src = v1403;
  uint64_t v1402 = 0x200000000;
  unsigned int v391 = *((_DWORD *)v387 + 10);
  if (v391 && v1400 != (unsigned char *)v387)
  {
    if (v391 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v1403, (const void *)v387[4], 8 * *((unsigned int *)v387 + 10));
    LODWORD(v1402) = v391;
    uint64_t v389 = *(void *)v1400;
  }
  unint64_t v392 = v1434.n128_u64[1];
  uint64_t v393 = DWORD1(v1435);
  if (v1434.n128_u64[1] != v1434.n128_u64[0])
  {
    unsigned int v397 = v1435;
    goto LABEL_890;
  }
  if (!DWORD1(v1435))
  {
LABEL_887:
    unsigned int v397 = v1435;
    if (DWORD1(v1435) < v1435)
    {
      ++DWORD1(v1435);
      *(void *)(v1434.n128_u64[1] + 8 * v393) = v389;
      goto LABEL_911;
    }
LABEL_890:
    if (3 * v397 <= 4 * (DWORD1(v1435) - DWORD2(v1435)))
    {
      if (v397 >= 0x40) {
        v397 *= 2;
      }
      else {
        unsigned int v397 = 128;
      }
    }
    else if (v397 - DWORD1(v1435) >= v397 >> 3)
    {
      goto LABEL_892;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1434, v397);
    unsigned int v397 = v1435;
    unint64_t v392 = v1434.n128_u64[1];
LABEL_892:
    unsigned int v398 = v397 - 1;
    unsigned int v399 = (v397 - 1) & ((v389 >> 4) ^ (v389 >> 9));
    v400 = (void *)(v392 + 8 * v399);
    uint64_t v401 = *v400;
    if (*v400 == -1)
    {
      v402 = 0;
LABEL_904:
      if (v402) {
        v406 = v402;
      }
      else {
        v406 = v400;
      }
      if (*v406 != v389)
      {
        if (*v406 == -2) {
          --DWORD2(v1435);
        }
        else {
          ++DWORD1(v1435);
        }
        void *v406 = v389;
      }
    }
    else
    {
      v402 = 0;
      int v403 = 1;
      while (v401 != v389)
      {
        if (v402) {
          BOOL v404 = 0;
        }
        else {
          BOOL v404 = v401 == -2;
        }
        if (v404) {
          v402 = v400;
        }
        unsigned int v405 = v399 + v403++;
        unsigned int v399 = v405 & v398;
        v400 = (void *)(v392 + 8 * (v405 & v398));
        uint64_t v401 = *v400;
        if (*v400 == -1) {
          goto LABEL_904;
        }
      }
    }
    goto LABEL_911;
  }
  v394 = 0;
  uint64_t v395 = 8 * DWORD1(v1435);
  v396 = (void *)v1434.n128_u64[1];
  while (*v396 != v389)
  {
    if (*v396 == -2) {
      v394 = v396;
    }
    ++v396;
    v395 -= 8;
    if (!v395)
    {
      if (!v394) {
        goto LABEL_887;
      }
      void *v394 = v389;
      --DWORD2(v1435);
      break;
    }
  }
LABEL_911:
  if (__src != v1403) {
    free(__src);
  }
  while (1)
  {
    v387 += 8;
    if (v387 == v388) {
      break;
    }
    uint64_t v389 = *v387;
    if ((*v387 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v387 != v388) {
        goto LABEL_875;
      }
      break;
    }
  }
LABEL_924:
  v407 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
  if (v1372)
  {
    if (v1373)
    {
      uint64_t v408 = 16 * v1373;
      v409 = v1371;
      while ((*(void *)v409 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v409 = (llvm::SmallPtrSetImplBase *)((char *)v409 + 16);
        v408 -= 16;
        if (!v408)
        {
          v409 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
          break;
        }
      }
    }
    else
    {
      v409 = v1371;
    }
  }
  else
  {
    v409 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
  }
  v1321 = (llvm::SmallPtrSetImplBase *)&v1392;
  v410 = (llvm::SmallPtrSetImplBase *)((char *)v1371 + 16 * v1373);
  if (v409 != v410)
  {
    v411 = (char *)v1451;
    v412 = (char *)v1450;
    while (1)
    {
      uint64_t v413 = *(void *)v409;
      uint64_t v414 = HIDWORD(v1452);
      if (v411 != v412) {
        break;
      }
      if (HIDWORD(v1452))
      {
        v415 = 0;
        uint64_t v416 = 8 * HIDWORD(v1452);
        v417 = v412;
        while (*(void *)v417 != v413)
        {
          if (*(void *)v417 == -2) {
            v415 = v417;
          }
          v417 += 8;
          v416 -= 8;
          if (!v416)
          {
            if (!v415) {
              goto LABEL_942;
            }
            *(void *)v415 = v413;
            --v1453;
            goto LABEL_966;
          }
        }
        goto LABEL_966;
      }
LABEL_942:
      unsigned int v418 = v1452;
      if (HIDWORD(v1452) >= v1452) {
        goto LABEL_945;
      }
      ++HIDWORD(v1452);
      *(void *)&v412[8 * v414] = v413;
LABEL_966:
      v411 = (char *)v1451;
      v412 = (char *)v1450;
      v428 = (llvm::SmallPtrSetImplBase *)((char *)v409 + 16);
      v409 = v407;
      if (v428 != v407)
      {
        v409 = v428;
        while ((*(void *)v409 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v409 = (llvm::SmallPtrSetImplBase *)((char *)v409 + 16);
          if (v409 == v407)
          {
            v409 = v407;
            break;
          }
        }
      }
      if (v409 == v410) {
        goto LABEL_979;
      }
    }
    unsigned int v418 = v1452;
LABEL_945:
    if (3 * v418 <= 4 * (HIDWORD(v1452) - v1453))
    {
      if (v418 >= 0x40) {
        v418 *= 2;
      }
      else {
        unsigned int v418 = 128;
      }
    }
    else if (v418 - HIDWORD(v1452) >= v418 >> 3)
    {
      goto LABEL_947;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1450, v418);
    unsigned int v418 = v1452;
    v411 = (char *)v1451;
LABEL_947:
    unsigned int v419 = v418 - 1;
    unsigned int v420 = (v418 - 1) & ((v413 >> 4) ^ (v413 >> 9));
    v421 = &v411[8 * v420];
    uint64_t v422 = *(void *)v421;
    if (*(void *)v421 == -1)
    {
      v423 = 0;
LABEL_959:
      if (v423) {
        v427 = v423;
      }
      else {
        v427 = v421;
      }
      if (*(void *)v427 != v413)
      {
        if (*(void *)v427 == -2) {
          --v1453;
        }
        else {
          ++HIDWORD(v1452);
        }
        *(void *)v427 = v413;
      }
    }
    else
    {
      v423 = 0;
      int v424 = 1;
      while (v422 != v413)
      {
        if (v423) {
          BOOL v425 = 0;
        }
        else {
          BOOL v425 = v422 == -2;
        }
        if (v425) {
          v423 = v421;
        }
        unsigned int v426 = v420 + v424++;
        unsigned int v420 = v426 & v419;
        v421 = &v411[8 * (v426 & v419)];
        uint64_t v422 = *(void *)v421;
        if (*(void *)v421 == -1) {
          goto LABEL_959;
        }
      }
    }
    goto LABEL_966;
  }
LABEL_979:
  p_dst = &__dst;
  v1320 = &v1363;
  v1322 = &v1379;
  v1323 = (llvm::SmallPtrSetImplBase *)&v1382;
  if (__b != v1392)
  {
    if (*(_DWORD *)v1394 >= 0x21u
      && (4 * (*(_DWORD *)&v1394[4] - *(_DWORD *)&v1394[8])) < *(_DWORD *)v1394)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v1321);
      goto LABEL_981;
    }
    memset(__b, 255, 8 * *(unsigned int *)v1394);
  }
  *(void *)&v1394[4] = 0;
LABEL_981:
  v1324 = &v1358;
  v1343[0] = (llvm::DominatorTree *)&v1346;
  v1343[1] = (llvm::DominatorTree *)&v1346;
  uint64_t v1344 = 8;
  LODWORD(v1345) = 0;
  *(void *)&long long v1442 = &v1444;
  *((void *)&v1442 + 1) = &v1444;
  v1443.n128_u64[0] = 8;
  v1443.n128_u32[2] = 0;
  uint64_t v429 = *(void *)(v1397 + 80);
  if (v429) {
    uint64_t v430 = v429 - 24;
  }
  else {
    uint64_t v430 = 0;
  }
  sub_1CC82F3B8((llvm::SmallPtrSetImplBase *)v1400, v430);
  uint64_t v431 = 0;
  long long v1427 = 0u;
  long long v1428 = 0u;
  v1429[0] = 0;
  __n128 v1426 = 0u;
  long long v1425 = 0u;
  long long v1424 = 0u;
  memset(v1423, 0, sizeof(v1423));
  long long v1422 = 0u;
  long long v1421 = 0u;
  uint64_t v1419 = 0;
  long long v1418 = 0u;
  long long v1417 = 0u;
  long long v1416 = 0u;
  long long v1415 = 0u;
  v432 = (void **)&v1421 + 1;
  v1412 = (char *)&v1415 + 8;
  p_TTI = (char *)&v1415 + 8;
  uint64_t v1414 = 8;
  DWORD1(v1421) = 8;
  v1420 = (char *)&v1421 + 8;
  while (1)
  {
    if (v1405 != v431) {
      goto LABEL_995;
    }
    if (!v431) {
      break;
    }
    v433 = (char *)v1404 + 24 * v431;
    v434 = v1420;
    v435 = (char *)v1404;
    while (*(void *)v435 == *(void *)v434 && *((_DWORD *)v435 + 4) == v434[4])
    {
      v435 += 24;
      v434 += 6;
      if (v435 == v433) {
        goto LABEL_1284;
      }
    }
LABEL_995:
    uint64_t v437 = *((void *)v1404 + 3 * v1405 - 3);
    uint64_t v438 = *(void *)(v437 + 40);
    if (v438 != v437 + 40)
    {
      uint64_t v439 = v438 - 24;
      if (v438) {
        uint64_t v440 = v438 - 24;
      }
      else {
        uint64_t v440 = 0;
      }
      int v441 = *(unsigned __int8 *)(v440 + 16);
      int v442 = v441 - 29;
      if (v441 != 30)
      {
        unsigned int v503 = 2;
        switch(v442)
        {
          case 1:
            goto LABEL_3013;
          case 2:
            unsigned int v503 = (*(_DWORD *)(v440 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_1270;
          case 3:
          case 9:
            unsigned int v503 = (*(_DWORD *)(v440 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_1270;
          case 4:
            goto LABEL_1004;
          case 7:
            unsigned int v503 = *(_WORD *)(v440 + 18) & 1;
            goto LABEL_1270;
          case 8:
            unsigned int v503 = 1;
            goto LABEL_1004;
          case 10:
            unsigned int v503 = *(_DWORD *)(v440 + 80) + 1;
LABEL_1270:
            if (!v503) {
              goto LABEL_1137;
            }
            goto LABEL_1004;
          default:
            goto LABEL_1137;
        }
      }
      if ((*(_DWORD *)(v440 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v503 = 2;
      }
      else {
        unsigned int v503 = 1;
      }
LABEL_1004:
      uint64_t v443 = 0;
      v444 = (uint64_t *)(v438 + 8);
      uint64_t v445 = v438 - 56;
      uint64_t v446 = v438 - 88;
      uint64_t v447 = v503;
      do
      {
        int v448 = *(unsigned __int8 *)(v438 - 8);
        if (v448 == 30)
        {
          v491 = (uint64_t *)(v445 - 32 * v443);
        }
        else
        {
          uint64_t v490 = (v448 - 31);
          v491 = (uint64_t *)(v438 - 56);
          switch(v490)
          {
            case 1:
            case 7:
              int v500 = *(_DWORD *)(v438 - 4);
              if ((v500 & 0x40000000) != 0) {
                uint64_t v501 = *(void *)(v438 - 32);
              }
              else {
                uint64_t v501 = v439 - 32 * (v500 & 0x7FFFFFF);
              }
              v491 = (uint64_t *)(v501 + 32 * v443 + 32);
              break;
            case 2:
              uint64_t v502 = -64;
              if (!v443) {
                uint64_t v502 = -96;
              }
              v491 = (uint64_t *)(v439 + v502);
              break;
            case 3:
            case 4:
              goto LABEL_3013;
            case 5:
              if ((*(_WORD *)(v438 - 6) & 1) == 0)
              {
                uint64_t v449 = 0;
                goto LABEL_1009;
              }
              v491 = &v444[-4 * (*(_DWORD *)(v438 - 4) & 0x7FFFFFF)];
              break;
            case 6:
              break;
            case 8:
              if (v443) {
                v491 = (uint64_t *)(v445 - 32 * *(unsigned int *)(v438 + 56) + 32 * v443 - 32);
              }
              else {
                v491 = (uint64_t *)(v446 - 32 * *(unsigned int *)(v438 + 56));
              }
              break;
            default:
              int v492 = *(_DWORD *)(v438 - 4);
              if ((v492 & 0x40000000) != 0) {
                uint64_t v493 = *(void *)(v438 - 32);
              }
              else {
                uint64_t v493 = v439 - 32 * (v492 & 0x7FFFFFF);
              }
              v491 = (uint64_t *)(v493 + 32 * (2 * v443) + 32);
              break;
          }
        }
        uint64_t v449 = *v491;
LABEL_1009:
        if (v449 == v437)
        {
          v454 = (char *)__b;
          uint64_t v455 = *(unsigned int *)&v1394[4];
          if (__b != v1392)
          {
            unsigned int v465 = *(_DWORD *)v1394;
LABEL_1040:
            if (3 * v465 <= 4 * (*(_DWORD *)&v1394[4] - *(_DWORD *)&v1394[8]))
            {
              if (v465 >= 0x40) {
                v465 *= 2;
              }
              else {
                unsigned int v465 = 128;
              }
            }
            else if (v465 - *(_DWORD *)&v1394[4] >= v465 >> 3)
            {
              goto LABEL_1042;
            }
            v496 = v444;
            v497 = v432;
            uint64_t v498 = v446;
            llvm::SmallPtrSetImplBase::Grow(v1321, v465);
            uint64_t v446 = v498;
            v432 = v497;
            v444 = v496;
            unsigned int v465 = *(_DWORD *)v1394;
            v454 = (char *)__b;
LABEL_1042:
            unsigned int v466 = v465 - 1;
            unsigned int v467 = (v465 - 1) & ((v437 >> 4) ^ (v437 >> 9));
            v468 = &v454[8 * v467];
            uint64_t v469 = *(void *)v468;
            if (*(void *)v468 == -1)
            {
              v488 = 0;
LABEL_1090:
              if (v488) {
                v489 = v488;
              }
              else {
                v489 = v468;
              }
              if (*(void *)v489 != v437)
              {
                if (*(void *)v489 == -2) {
                  --*(_DWORD *)&v1394[8];
                }
                else {
                  ++*(_DWORD *)&v1394[4];
                }
                *(void *)v489 = v437;
              }
            }
            else
            {
              v488 = 0;
              int v470 = 1;
              while (v469 != v437)
              {
                if (v488) {
                  BOOL v471 = 0;
                }
                else {
                  BOOL v471 = v469 == -2;
                }
                if (v471) {
                  v488 = v468;
                }
                unsigned int v472 = v467 + v470++;
                unsigned int v467 = v472 & v466;
                v468 = &v454[8 * (v472 & v466)];
                uint64_t v469 = *(void *)v468;
                if (*(void *)v468 == -1) {
                  goto LABEL_1090;
                }
              }
            }
            goto LABEL_1110;
          }
          if (*(_DWORD *)&v1394[4])
          {
            v456 = 0;
            uint64_t v457 = 8 * *(unsigned int *)&v1394[4];
            v458 = __b;
            while (*v458 != v437)
            {
              if (*v458 == -2) {
                v456 = v458;
              }
              ++v458;
              v457 -= 8;
              if (!v457)
              {
                if (!v456) {
                  goto LABEL_1026;
                }
                void *v456 = v437;
                --*(_DWORD *)&v1394[8];
                goto LABEL_1110;
              }
            }
            goto LABEL_1110;
          }
LABEL_1026:
          unsigned int v465 = *(_DWORD *)v1394;
          if (*(_DWORD *)&v1394[4] >= *(_DWORD *)v1394) {
            goto LABEL_1040;
          }
          ++*(_DWORD *)&v1394[4];
          *((void *)__b + v455) = v437;
        }
        else
        {
          v450 = v1343[0];
          if (v1343[1] == v1343[0])
          {
            unsigned int v451 = HIDWORD(v1344);
            v452 = (llvm::DominatorTree *)((char *)v1343[1] + 8 * HIDWORD(v1344));
            if (HIDWORD(v1344))
            {
              uint64_t v453 = 0;
              while (*(void *)((char *)v1343[1] + v453) != v449)
              {
                v453 += 8;
                if (8 * HIDWORD(v1344) == v453) {
                  goto LABEL_1055;
                }
              }
              v452 = (llvm::DominatorTree *)((char *)v1343[1] + v453);
            }
LABEL_1055:
            v450 = v1343[1];
          }
          else
          {
            int v459 = v1344 - 1;
            unsigned int v460 = (v1344 - 1) & ((v449 >> 4) ^ (v449 >> 9));
            v452 = (llvm::DominatorTree *)((char *)v1343[1] + 8 * v460);
            uint64_t v461 = *(void *)v452;
            if (*(void *)v452 == -1)
            {
              v487 = 0;
LABEL_1085:
              if (v487) {
                v452 = v487;
              }
              unsigned int v451 = HIDWORD(v1344);
              if (*(void *)v452 != v449) {
                v452 = (llvm::DominatorTree *)((char *)v1343[1] + 8 * v1344);
              }
            }
            else
            {
              v487 = 0;
              int v462 = 1;
              while (v461 != v449)
              {
                if (v487) {
                  BOOL v463 = 0;
                }
                else {
                  BOOL v463 = v461 == -2;
                }
                if (v463) {
                  v487 = v452;
                }
                unsigned int v464 = v460 + v462++;
                unsigned int v460 = v464 & v459;
                v452 = (llvm::DominatorTree *)((char *)v1343[1] + 8 * (v464 & v459));
                uint64_t v461 = *(void *)v452;
                if (*(void *)v452 == -1) {
                  goto LABEL_1085;
                }
              }
              unsigned int v451 = HIDWORD(v1344);
            }
          }
          if (v1343[1] == v450) {
            unsigned int v473 = v451;
          }
          else {
            unsigned int v473 = v1344;
          }
          if (v452 != (llvm::DominatorTree *)((char *)v1343[1] + 8 * v473)) {
            goto LABEL_1110;
          }
          uint64_t v474 = *((void *)&v1442 + 1);
          uint64_t v475 = v1443.n128_u32[1];
          if (*((void *)&v1442 + 1) != (void)v1442)
          {
            unsigned int v479 = v1443.n128_u32[0];
LABEL_1071:
            if (3 * v479 <= 4 * (v1443.n128_u32[1] - v1443.n128_u32[2]))
            {
              if (v479 >= 0x40) {
                v479 *= 2;
              }
              else {
                unsigned int v479 = 128;
              }
            }
            else if (v479 - v1443.n128_u32[1] >= v479 >> 3)
            {
              goto LABEL_1073;
            }
            v1317 = v444;
            v1318 = v432;
            uint64_t v499 = v446;
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1442, v479);
            uint64_t v446 = v499;
            v444 = v1317;
            v432 = v1318;
            unsigned int v479 = v1443.n128_u32[0];
            uint64_t v474 = *((void *)&v1442 + 1);
LABEL_1073:
            unsigned int v480 = v479 - 1;
            unsigned int v481 = (v479 - 1) & ((v449 >> 4) ^ (v449 >> 9));
            v482 = (uint64_t *)(v474 + 8 * v481);
            uint64_t v483 = *v482;
            if (*v482 == -1)
            {
              v494 = 0;
LABEL_1102:
              if (v494) {
                v495 = v494;
              }
              else {
                v495 = v482;
              }
              if (*v495 != v449)
              {
                if (*v495 == -2) {
                  --v1443.n128_u32[2];
                }
                else {
                  ++v1443.n128_u32[1];
                }
                uint64_t *v495 = v449;
              }
            }
            else
            {
              v494 = 0;
              int v484 = 1;
              while (v483 != v449)
              {
                if (v494) {
                  BOOL v485 = 0;
                }
                else {
                  BOOL v485 = v483 == -2;
                }
                if (v485) {
                  v494 = v482;
                }
                unsigned int v486 = v481 + v484++;
                unsigned int v481 = v486 & v480;
                v482 = (uint64_t *)(v474 + 8 * (v486 & v480));
                uint64_t v483 = *v482;
                if (*v482 == -1) {
                  goto LABEL_1102;
                }
              }
            }
            goto LABEL_1110;
          }
          if (v1443.n128_u32[1])
          {
            v476 = 0;
            uint64_t v477 = 8 * v1443.n128_u32[1];
            v478 = (uint64_t *)*((void *)&v1442 + 1);
            while (*v478 != v449)
            {
              if (*v478 == -2) {
                v476 = v478;
              }
              ++v478;
              v477 -= 8;
              if (!v477)
              {
                if (!v476) {
                  goto LABEL_1069;
                }
                uint64_t *v476 = v449;
                --v1443.n128_u32[2];
                goto LABEL_1110;
              }
            }
            goto LABEL_1110;
          }
LABEL_1069:
          unsigned int v479 = v1443.n128_u32[0];
          if (v1443.n128_u32[1] >= v1443.n128_u32[0]) {
            goto LABEL_1071;
          }
          ++v1443.n128_u32[1];
          *(void *)(*((void *)&v1442 + 1) + 8 * v475) = v449;
        }
LABEL_1110:
        ++v443;
      }
      while (v443 != v447);
    }
LABEL_1137:
    v504 = v1343[1];
    uint64_t v505 = HIDWORD(v1344);
    if (v1343[1] != v1343[0])
    {
      unsigned int v509 = v1344;
      goto LABEL_1148;
    }
    if (!HIDWORD(v1344))
    {
LABEL_1146:
      unsigned int v509 = v1344;
      if (HIDWORD(v1344) < v1344)
      {
        ++HIDWORD(v1344);
        *((void *)v1343[1] + v505) = v437;
        goto LABEL_1169;
      }
LABEL_1148:
      if (3 * v509 <= 4 * (HIDWORD(v1344) - (int)v1345))
      {
        if (v509 >= 0x40) {
          v509 *= 2;
        }
        else {
          unsigned int v509 = 128;
        }
      }
      else if (v509 - HIDWORD(v1344) >= v509 >> 3)
      {
        goto LABEL_1150;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1343, v509);
      unsigned int v509 = v1344;
      v504 = v1343[1];
LABEL_1150:
      unsigned int v510 = v509 - 1;
      unsigned int v511 = (v509 - 1) & ((v437 >> 4) ^ (v437 >> 9));
      v512 = (void *)((char *)v504 + 8 * v511);
      uint64_t v513 = *v512;
      if (*v512 == -1)
      {
        v517 = 0;
LABEL_1161:
        if (v517) {
          v518 = v517;
        }
        else {
          v518 = v512;
        }
        if (*v518 != v437)
        {
          if (*v518 == -2) {
            LODWORD(v1345) = v1345 - 1;
          }
          else {
            ++HIDWORD(v1344);
          }
          void *v518 = v437;
        }
      }
      else
      {
        v517 = 0;
        int v514 = 1;
        while (v513 != v437)
        {
          if (v517) {
            BOOL v515 = 0;
          }
          else {
            BOOL v515 = v513 == -2;
          }
          if (v515) {
            v517 = v512;
          }
          unsigned int v516 = v511 + v514++;
          unsigned int v511 = v516 & v510;
          v512 = (void *)((char *)v504 + 8 * (v516 & v510));
          uint64_t v513 = *v512;
          if (*v512 == -1) {
            goto LABEL_1161;
          }
        }
      }
      goto LABEL_1169;
    }
    v506 = 0;
    uint64_t v507 = 8 * HIDWORD(v1344);
    v508 = v1343[1];
    while (*(void *)v508 != v437)
    {
      if (*(void *)v508 == -2) {
        v506 = v508;
      }
      v508 = (llvm::DominatorTree *)((char *)v508 + 8);
      v507 -= 8;
      if (!v507)
      {
        if (!v506) {
          goto LABEL_1146;
        }
        *(void *)v506 = v437;
        LODWORD(v1345) = v1345 - 1;
        break;
      }
    }
LABEL_1169:
    if (v1443.n128_u32[1] == v1443.n128_u32[2]) {
      goto LABEL_1256;
    }
    v519 = (char *)__b;
    uint64_t v520 = *(unsigned int *)&v1394[4];
    if (__b != v1392)
    {
      unsigned int v524 = *(_DWORD *)v1394;
LABEL_1181:
      if (3 * v524 <= 4 * (*(_DWORD *)&v1394[4] - *(_DWORD *)&v1394[8]))
      {
        if (v524 >= 0x40) {
          v524 *= 2;
        }
        else {
          unsigned int v524 = 128;
        }
      }
      else if (v524 - *(_DWORD *)&v1394[4] >= v524 >> 3)
      {
        goto LABEL_1183;
      }
      llvm::SmallPtrSetImplBase::Grow(v1321, v524);
      unsigned int v524 = *(_DWORD *)v1394;
      v519 = (char *)__b;
LABEL_1183:
      unsigned int v525 = v524 - 1;
      unsigned int v526 = (v524 - 1) & ((v437 >> 4) ^ (v437 >> 9));
      v527 = &v519[8 * v526];
      uint64_t v528 = *(void *)v527;
      if (*(void *)v527 == -1)
      {
        v532 = 0;
LABEL_1194:
        if (v532) {
          v533 = v532;
        }
        else {
          v533 = v527;
        }
        if (*(void *)v533 != v437)
        {
          if (*(void *)v533 == -2) {
            --*(_DWORD *)&v1394[8];
          }
          else {
            ++*(_DWORD *)&v1394[4];
          }
          *(void *)v533 = v437;
        }
      }
      else
      {
        v532 = 0;
        int v529 = 1;
        while (v528 != v437)
        {
          if (v532) {
            BOOL v530 = 0;
          }
          else {
            BOOL v530 = v528 == -2;
          }
          if (v530) {
            v532 = v527;
          }
          unsigned int v531 = v526 + v529++;
          unsigned int v526 = v531 & v525;
          v527 = &v519[8 * (v531 & v525)];
          uint64_t v528 = *(void *)v527;
          if (*(void *)v527 == -1) {
            goto LABEL_1194;
          }
        }
      }
      goto LABEL_1202;
    }
    if (*(_DWORD *)&v1394[4])
    {
      v521 = 0;
      uint64_t v522 = 8 * *(unsigned int *)&v1394[4];
      v523 = __b;
      while (*v523 != v437)
      {
        if (*v523 == -2) {
          v521 = v523;
        }
        ++v523;
        v522 -= 8;
        if (!v522)
        {
          if (!v521) {
            goto LABEL_1179;
          }
          void *v521 = v437;
          --*(_DWORD *)&v1394[8];
          goto LABEL_1202;
        }
      }
      goto LABEL_1202;
    }
LABEL_1179:
    unsigned int v524 = *(_DWORD *)v1394;
    if (*(_DWORD *)&v1394[4] >= *(_DWORD *)v1394) {
      goto LABEL_1181;
    }
    ++*(_DWORD *)&v1394[4];
    *((void *)__b + v520) = v437;
LABEL_1202:
    uint64_t v534 = v1442;
    if (*((void *)&v1442 + 1) == (void)v1442)
    {
      unsigned int v535 = v1443.n128_u32[1];
      v536 = (void *)(*((void *)&v1442 + 1) + 8 * v1443.n128_u32[1]);
      if (v1443.n128_u32[1])
      {
        uint64_t v537 = 0;
        while (*(void *)(*((void *)&v1442 + 1) + v537) != v437)
        {
          v537 += 8;
          if (8 * v1443.n128_u32[1] == v537) {
            goto LABEL_1222;
          }
        }
        v536 = (void *)(*((void *)&v1442 + 1) + v537);
      }
LABEL_1222:
      uint64_t v544 = *((void *)&v1442 + 1);
    }
    else
    {
      unsigned __int32 v538 = v1443.n128_u32[0] - 1;
      unsigned int v539 = (v1443.n128_u32[0] - 1) & ((v437 >> 4) ^ (v437 >> 9));
      v536 = (void *)(*((void *)&v1442 + 1) + 8 * v539);
      uint64_t v540 = *v536;
      if (*v536 == -1)
      {
        v545 = 0;
LABEL_1223:
        if (v545) {
          v536 = v545;
        }
        unsigned int v535 = v1443.n128_u32[1];
        if (*v536 != v437) {
          v536 = (void *)(*((void *)&v1442 + 1) + 8 * v1443.n128_u32[0]);
        }
      }
      else
      {
        v545 = 0;
        int v541 = 1;
        while (v540 != v437)
        {
          if (v545) {
            BOOL v542 = 0;
          }
          else {
            BOOL v542 = v540 == -2;
          }
          if (v542) {
            v545 = v536;
          }
          unsigned int v543 = v539 + v541++;
          unsigned int v539 = v543 & v538;
          v536 = (void *)(*((void *)&v1442 + 1) + 8 * (v543 & v538));
          uint64_t v540 = *v536;
          if (*v536 == -1) {
            goto LABEL_1223;
          }
        }
        unsigned int v535 = v1443.n128_u32[1];
      }
      uint64_t v544 = v1442;
    }
    if (*((void *)&v1442 + 1) == v544) {
      unsigned int v546 = v535;
    }
    else {
      unsigned int v546 = v1443.n128_u32[0];
    }
    if (v536 != (void *)(*((void *)&v1442 + 1) + 8 * v546))
    {
      if (*((void *)&v1442 + 1) == v544)
      {
        v547 = (void *)(*((void *)&v1442 + 1) + 8 * v535);
        if (v535)
        {
          uint64_t v548 = 0;
          while (*(void *)(*((void *)&v1442 + 1) + v548) != v437)
          {
            v548 += 8;
            if (8 * v535 == v548) {
              goto LABEL_1250;
            }
          }
          v547 = (void *)(*((void *)&v1442 + 1) + v548);
        }
LABEL_1250:
        uint64_t v534 = *((void *)&v1442 + 1);
      }
      else
      {
        unsigned __int32 v549 = v1443.n128_u32[0] - 1;
        unsigned int v550 = (v1443.n128_u32[0] - 1) & ((v437 >> 4) ^ (v437 >> 9));
        v547 = (void *)(*((void *)&v1442 + 1) + 8 * v550);
        uint64_t v551 = *v547;
        if (*v547 == -1)
        {
          v552 = 0;
LABEL_1261:
          if (v552) {
            v547 = v552;
          }
          if (*v547 != v437)
          {
            if (*((void *)&v1442 + 1) == (void)v1442) {
              unsigned int v557 = v535;
            }
            else {
              unsigned int v557 = v1443.n128_u32[0];
            }
            v547 = (void *)(*((void *)&v1442 + 1) + 8 * v557);
          }
        }
        else
        {
          v552 = 0;
          int v553 = 1;
          while (v551 != v437)
          {
            if (v552) {
              BOOL v554 = 0;
            }
            else {
              BOOL v554 = v551 == -2;
            }
            if (v554) {
              v552 = v547;
            }
            unsigned int v555 = v550 + v553++;
            unsigned int v550 = v555 & v549;
            v547 = (void *)(*((void *)&v1442 + 1) + 8 * (v555 & v549));
            uint64_t v551 = *v547;
            if (*v547 == -1) {
              goto LABEL_1261;
            }
          }
        }
      }
      if (*((void *)&v1442 + 1) == v534) {
        unsigned int v556 = v535;
      }
      else {
        unsigned int v556 = v1443.n128_u32[0];
      }
      if (v547 != (void *)(*((void *)&v1442 + 1) + 8 * v556))
      {
        void *v547 = -2;
        ++v1443.n128_u32[2];
      }
    }
LABEL_1256:
    if (--v1405) {
      sub_1CC82F454((llvm::SmallPtrSetImplBase *)v1400);
    }
    uint64_t v431 = v1421;
  }
LABEL_1284:
  if (v1420 != v432) {
    free(v1420);
  }
  if (p_TTI != v1412) {
    free(p_TTI);
  }
  if (v1404 != &v1406) {
    free(v1404);
  }
  if (*(void *)&v1400[8] != *(void *)v1400) {
    free(*(void **)&v1400[8]);
  }
  if (*((void *)&v1442 + 1) != (void)v1442) {
    free(*((void **)&v1442 + 1));
  }
  if (v1343[1] != v1343[0]) {
    free(v1343[1]);
  }
  sub_1CC82DDB4((uint64_t **)v1400, (uint64_t)&TTI, (uint64_t)&v1434, (uint64_t)&v1450);
  long long v558 = *(_OWORD *)&v1400[16];
  v559 = v1324;
  long long *v1324 = *(_OWORD *)v1400;
  v559[1] = v558;
  v560 = __src;
  if (__src == v1403)
  {
    int v561 = v1402;
    uint64_t v562 = v1361;
    if (v1361 >= v1402)
    {
      if (v1402) {
        memmove(__dst, __src, 8 * v1402);
      }
    }
    else
    {
      if (HIDWORD(v1361) < v1402)
      {
        LODWORD(v1361) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v1361) {
        memmove(__dst, __src, 8 * v1361);
      }
      else {
        uint64_t v562 = 0;
      }
      if (v562 != v1402) {
        memcpy((char *)__dst + 8 * v562, (char *)__src + 8 * v562, 8 * v1402 - 8 * v562);
      }
    }
    LODWORD(v1361) = v561;
  }
  else
  {
    if (__dst != v1305)
    {
      free(__dst);
      v560 = __src;
    }
    __dst = v560;
    uint64_t v1361 = v1402;
    __src = v1403;
    HIDWORD(v1402) = 0;
  }
  LODWORD(v1402) = 0;
  v563 = v1406;
  if (v1406 == v1408)
  {
    int v564 = v1407;
    uint64_t v565 = v1364;
    if (v1364 >= v1407)
    {
      if (v1407) {
        memmove(v1363, v1406, 8 * v1407);
      }
    }
    else
    {
      if (HIDWORD(v1364) < v1407)
      {
        LODWORD(v1364) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v1364) {
        memmove(v1363, v1406, 8 * v1364);
      }
      else {
        uint64_t v565 = 0;
      }
      if (v565 != v1407) {
        memcpy((char *)v1363 + 8 * v565, (char *)v1406 + 8 * v565, 8 * v1407 - 8 * v565);
      }
    }
    LODWORD(v1364) = v564;
  }
  else
  {
    if (v1363 != v1304)
    {
      free(v1363);
      v563 = v1406;
    }
    v1363 = v563;
    uint64_t v1364 = v1407;
    v1406 = v1408;
    HIDWORD(v1407) = 0;
  }
  LODWORD(v1407) = 0;
  if (v1406 != v1408) {
    free(v1406);
  }
  if (__src != v1403) {
    free(__src);
  }
  uint64_t v566 = v1358;
  uint64_t v567 = v1359;
  uint64_t v568 = *(void *)(v1358 + 40);
  v1412 = &v1414;
  uint64_t v1414 = v568;
  *(void *)&long long v1415 = 0;
  p_TTI = (void *)0x400000001;
  v1343[0] = (llvm::DominatorTree *)&v1344;
  v1343[1] = (llvm::DominatorTree *)0x800000000;
  *(void *)v1400 = &__src;
  *(void *)&v1400[8] = &__src;
  *(void *)&v1400[16] = 8;
  *(_DWORD *)&v1400[24] = 0;
  unsigned int v569 = 1;
  while (2)
  {
    v570 = (char *)v1412 + 16 * v569;
    uint64_t v571 = *((void *)v570 - 2);
    uint64_t v572 = *(void *)(v571 + 40);
    if (v572 == v571 + 40)
    {
      uint64_t v573 = 0;
    }
    else
    {
      if (v572) {
        uint64_t v573 = v572 - 24;
      }
      else {
        uint64_t v573 = 0;
      }
      if (*(unsigned __int8 *)(v573 + 16) - 29 >= 0xB) {
        uint64_t v573 = 0;
      }
    }
    if (v571 == *(void *)(v567 + 40)) {
      goto LABEL_1331;
    }
    uint64_t v574 = *((unsigned int *)v570 - 2);
    int v575 = *(unsigned __int8 *)(v573 + 16);
    if (v575 != 30)
    {
      int v576 = 0;
      switch(*(unsigned char *)(v573 + 16))
      {
        case 0x1E:
          goto LABEL_3013;
        case 0x1F:
          int v576 = (*(_DWORD *)(v573 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_1330;
        case 0x20:
        case 0x26:
          int v576 = (*(_DWORD *)(v573 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_1330;
        case 0x21:
          int v576 = 2;
          goto LABEL_1330;
        case 0x24:
          int v576 = *(_WORD *)(v573 + 18) & 1;
          goto LABEL_1330;
        case 0x25:
          int v576 = 1;
          goto LABEL_1330;
        case 0x27:
          int v576 = *(_DWORD *)(v573 + 80) + 1;
          goto LABEL_1330;
        default:
          goto LABEL_1330;
      }
    }
    int v576 = (*(_DWORD *)(v573 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_1330:
    if (v574 == v576)
    {
LABEL_1331:
      LODWORD(p_TTI) = v569 - 1;
      if (LODWORD(v1343[1]) >= (unint64_t)HIDWORD(v1343[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v1343[0] + LODWORD(v1343[1])) = v571;
      ++LODWORD(v1343[1]);
      goto LABEL_1333;
    }
    uint64_t v577 = (v574 + 1);
    *((_DWORD *)v570 - 2) = v577;
    if (v575 == 30)
    {
      v573 -= 32 * v574;
LABEL_1336:
      v578 = (uint64_t *)(v573 - 32);
    }
    else
    {
      switch(v575)
      {
        case ' ':
        case '&':
          int v597 = *(_DWORD *)(v573 + 20);
          if ((v597 & 0x40000000) != 0) {
            uint64_t v598 = *(void *)(v573 - 8);
          }
          else {
            uint64_t v598 = v573 - 32 * (v597 & 0x7FFFFFF);
          }
          v578 = (uint64_t *)(v598 + 32 * v577);
          break;
        case '!':
          if (v574) {
            uint64_t v599 = -64;
          }
          else {
            uint64_t v599 = -96;
          }
          v578 = (uint64_t *)(v573 + v599);
          break;
        case '""':
        case '#':
          goto LABEL_3013;
        case '$':
          if ((*(_WORD *)(v573 + 18) & 1) == 0)
          {
            uint64_t v579 = 0;
            goto LABEL_1338;
          }
          v578 = (uint64_t *)(v573 - 32 * (*(_DWORD *)(v573 + 20) & 0x7FFFFFF) + 32);
          break;
        case '%':
          goto LABEL_1336;
        case '\'':
          if (v574)
          {
            uint64_t v573 = v573 - 32 * *(unsigned int *)(v573 + 80) + 32 * (v574 - 1);
            goto LABEL_1336;
          }
          v578 = (uint64_t *)(v573 - 32 * *(unsigned int *)(v573 + 80) - 64);
          break;
        default:
          int v595 = *(_DWORD *)(v573 + 20);
          if ((v595 & 0x40000000) != 0) {
            uint64_t v596 = *(void *)(v573 - 8);
          }
          else {
            uint64_t v596 = v573 - 32 * (v595 & 0x7FFFFFF);
          }
          v578 = (uint64_t *)(v596 + 32 * ((2 * v574) | 1u));
          break;
      }
    }
    uint64_t v579 = *v578;
LABEL_1338:
    uint64_t v580 = *(void *)&v1400[8];
    uint64_t v581 = *(unsigned int *)&v1400[20];
    if (*(void *)&v1400[8] != *(void *)v1400)
    {
      unsigned int v585 = *(_DWORD *)&v1400[16];
      goto LABEL_1349;
    }
    if (!*(_DWORD *)&v1400[20])
    {
LABEL_1346:
      unsigned int v585 = *(_DWORD *)&v1400[16];
      if (*(_DWORD *)&v1400[20] < *(_DWORD *)&v1400[16])
      {
        ++*(_DWORD *)&v1400[20];
        *(void *)(*(void *)&v1400[8] + 8 * v581) = v579;
LABEL_1371:
        if (v569 >= HIDWORD(p_TTI)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v594 = (char *)v1412 + 16 * v569;
        void *v594 = v579;
        v594[1] = 0;
        unsigned int v569 = p_TTI + 1;
        LODWORD(p_TTI) = p_TTI + 1;
        goto LABEL_1373;
      }
LABEL_1349:
      if (3 * v585 <= 4 * (*(_DWORD *)&v1400[20] - *(_DWORD *)&v1400[24]))
      {
        if (v585 >= 0x40) {
          v585 *= 2;
        }
        else {
          unsigned int v585 = 128;
        }
      }
      else if (v585 - *(_DWORD *)&v1400[20] >= v585 >> 3)
      {
        goto LABEL_1351;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v1400, v585);
      unsigned int v585 = *(_DWORD *)&v1400[16];
      uint64_t v580 = *(void *)&v1400[8];
LABEL_1351:
      unsigned int v586 = v585 - 1;
      unsigned int v587 = (v585 - 1) & ((v579 >> 4) ^ (v579 >> 9));
      v588 = (void *)(v580 + 8 * v587);
      uint64_t v589 = *v588;
      if (*v588 == -1)
      {
        v590 = 0;
LABEL_1365:
        if (v590) {
          v588 = v590;
        }
        if (*v588 != v579)
        {
          if (*v588 == -2) {
            --*(_DWORD *)&v1400[24];
          }
          else {
            ++*(_DWORD *)&v1400[20];
          }
          void *v588 = v579;
          unsigned int v569 = p_TTI;
          goto LABEL_1371;
        }
      }
      else
      {
        v590 = 0;
        int v591 = 1;
        while (v589 != v579)
        {
          if (v590) {
            BOOL v592 = 0;
          }
          else {
            BOOL v592 = v589 == -2;
          }
          if (v592) {
            v590 = v588;
          }
          unsigned int v593 = v587 + v591++;
          unsigned int v587 = v593 & v586;
          v588 = (void *)(v580 + 8 * (v593 & v586));
          uint64_t v589 = *v588;
          if (*v588 == -1) {
            goto LABEL_1365;
          }
        }
      }
LABEL_1333:
      unsigned int v569 = p_TTI;
      goto LABEL_1373;
    }
    v582 = 0;
    uint64_t v583 = 8 * *(unsigned int *)&v1400[20];
    v584 = *(void **)&v1400[8];
    while (*v584 != v579)
    {
      if (*v584 == -2) {
        v582 = v584;
      }
      ++v584;
      v583 -= 8;
      if (!v583)
      {
        if (!v582) {
          goto LABEL_1346;
        }
        void *v582 = v579;
        --*(_DWORD *)&v1400[24];
        goto LABEL_1371;
      }
    }
LABEL_1373:
    if (v569) {
      continue;
    }
    break;
  }
  v600 = v1343[0];
  uint64_t v601 = LODWORD(v1343[1]);
  v602 = (llvm::DominatorTree *)((char *)v1343[0] + 8 * LODWORD(v1343[1]) - 8);
  if (LODWORD(v1343[1])) {
    BOOL v603 = v1343[0] >= v602;
  }
  else {
    BOOL v603 = 1;
  }
  if (!v603)
  {
    v604 = (char *)v1343[0] + 8;
    do
    {
      uint64_t v605 = *((void *)v604 - 1);
      *((void *)v604 - 1) = *(void *)v602;
      *(void *)v602 = v605;
      v602 = (llvm::DominatorTree *)((char *)v602 - 8);
      BOOL v87 = v604 >= (char *)v602;
      v604 += 8;
    }
    while (!v87);
    v600 = v1343[0];
  }
  if (v601)
  {
    char v606 = 0;
    char v607 = 0;
    v608 = (llvm::DominatorTree *)((char *)v600 + 8 * v601);
    do
    {
      uint64_t v609 = *(void *)v600 + 40;
      for (uint64_t m = *(void *)(*(void *)v600 + 48); m != v609; uint64_t m = *(void *)(m + 8))
      {
        if (m) {
          uint64_t v611 = m - 24;
        }
        else {
          uint64_t v611 = 0;
        }
        if (v611 != v566)
        {
          v607 |= v611 == v567;
          if ((v606 & 1) == 0)
          {
            char v606 = 0;
            continue;
          }
        }
        if (v607)
        {
          char v607 = 1;
          char v606 = 1;
          break;
        }
        if (v1380 >= (unint64_t)HIDWORD(v1380)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v1379 + v1380) = v611;
        LODWORD(v1380) = v1380 + 1;
        v612 = (char *)v1383;
        uint64_t v613 = HIDWORD(v1384);
        if (v1383 != v1382)
        {
          unsigned int v617 = v1384;
LABEL_1438:
          if (3 * v617 <= 4 * (HIDWORD(v1384) - v1385))
          {
            if (v617 >= 0x40) {
              v617 *= 2;
            }
            else {
              unsigned int v617 = 128;
            }
          }
          else if (v617 - HIDWORD(v1384) >= v617 >> 3)
          {
LABEL_1440:
            unsigned int v618 = v617 - 1;
            unsigned int v619 = (v617 - 1) & ((v611 >> 4) ^ (v611 >> 9));
            v620 = &v612[8 * v619];
            uint64_t v621 = *(void *)v620;
            if (*(void *)v620 == -1)
            {
              v622 = 0;
LABEL_1452:
              if (v622) {
                v626 = v622;
              }
              else {
                v626 = v620;
              }
              if (*(void *)v626 != v611)
              {
                if (*(void *)v626 == -2) {
                  --v1385;
                }
                else {
                  ++HIDWORD(v1384);
                }
                char v607 = 0;
                *(void *)v626 = v611;
                goto LABEL_1460;
              }
            }
            else
            {
              v622 = 0;
              int v623 = 1;
              while (v621 != v611)
              {
                if (v622) {
                  BOOL v624 = 0;
                }
                else {
                  BOOL v624 = v621 == -2;
                }
                if (v624) {
                  v622 = v620;
                }
                unsigned int v625 = v619 + v623++;
                unsigned int v619 = v625 & v618;
                v620 = &v612[8 * (v625 & v618)];
                uint64_t v621 = *(void *)v620;
                if (*(void *)v620 == -1) {
                  goto LABEL_1452;
                }
              }
            }
            goto LABEL_1459;
          }
          llvm::SmallPtrSetImplBase::Grow(v1323, v617);
          unsigned int v617 = v1384;
          v612 = (char *)v1383;
          goto LABEL_1440;
        }
        if (HIDWORD(v1384))
        {
          v614 = 0;
          uint64_t v615 = 8 * HIDWORD(v1384);
          v616 = v1383;
          while (*v616 != v611)
          {
            if (*v616 == -2) {
              v614 = v616;
            }
            ++v616;
            v615 -= 8;
            if (!v615)
            {
              if (!v614) {
                goto LABEL_1434;
              }
              char v607 = 0;
              void *v614 = v611;
              --v1385;
              goto LABEL_1460;
            }
          }
LABEL_1459:
          char v607 = 0;
          goto LABEL_1460;
        }
LABEL_1434:
        unsigned int v617 = v1384;
        if (HIDWORD(v1384) >= v1384) {
          goto LABEL_1438;
        }
        char v607 = 0;
        ++HIDWORD(v1384);
        *((void *)v1383 + v613) = v611;
LABEL_1460:
        char v606 = 1;
      }
      v600 = (llvm::DominatorTree *)((char *)v600 + 8);
    }
    while (v600 != v608);
  }
  if (*(void *)&v1400[8] != *(void *)v1400) {
    free(*(void **)&v1400[8]);
  }
  uint64_t v6 = v1307;
  if ((uint64_t *)v1343[0] != &v1344) {
    free(v1343[0]);
  }
  if (v1412 != &v1414) {
    free(v1412);
  }
  uint64_t v134 = v1308;
  if (v1451 != v1450) {
    free(v1451);
  }
  if (v1434.n128_u64[1] != v1434.n128_u64[0]) {
    free((void *)v1434.n128_u64[1]);
  }
  int v133 = 1;
LABEL_1482:
  unsigned __int8 v1398 = v133;
  if (SHIBYTE(v1335) < 0)
  {
    operator delete(__p);
    int v133 = v1398;
    if (v1398) {
      goto LABEL_1484;
    }
LABEL_1489:
    sub_1CC82D774(v6);
    goto LABEL_2960;
  }
  if (!v133) {
    goto LABEL_1489;
  }
LABEL_1484:
  v627 = *(uint64_t **)(v134 + 8);
  uint64_t v628 = *v627;
  uint64_t v629 = v627[1];
  if (v628 == v629)
  {
LABEL_1487:
    uint64_t v630 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v628 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v628 += 16;
      if (v628 == v629) {
        goto LABEL_1487;
      }
    }
    uint64_t v630 = *(void *)(v628 + 8);
  }
  uint64_t v631 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v630 + 96))(v630, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v632 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v631 + 32) + 24))(*(void *)(v631 + 32), v6);
  v633 = (char *)v632;
  uint64_t v634 = *(void *)(v6 + 80);
LABEL_1492:
  if (v634 != v6 + 72)
  {
    if (v634) {
      uint64_t v635 = v634 - 24;
    }
    else {
      uint64_t v635 = 0;
    }
    uint64_t v636 = v635 + 40;
    for (uint64_t n = *(void *)(v635 + 48); ; uint64_t n = *(void *)(n + 8))
    {
      if (n == v636)
      {
        uint64_t v634 = *(void *)(v634 + 8);
        goto LABEL_1492;
      }
      uint64_t v638 = n ? n - 24 : 0;
      if (*(unsigned char *)(v638 + 16) == 84)
      {
        uint64_t v639 = *(void *)(v638 - 32);
        if (v639)
        {
          if (!*(unsigned char *)(v639 + 16)
            && *(void *)(v639 + 24) == *(void *)(v638 + 72)
            && (*(unsigned char *)(v639 + 33) & 0x20) != 0
            && (*(_DWORD *)(*(void *)(n - 56) + 36) - 2471) <= 7)
          {
            uint64_t v640 = *(void *)(n - 24 - 32 * (*(_DWORD *)(n - 4) & 0x7FFFFFF) + 64);
            if (*(unsigned char *)(v640 + 16) != 84) {
              break;
            }
            uint64_t v641 = *(void *)(v640 - 32);
            if (!v641
              || *(unsigned char *)(v641 + 16)
              || *(void *)(v641 + 24) != *(void *)(v640 + 72)
              || (*(unsigned char *)(v641 + 33) & 0x20) == 0
              || *(_DWORD *)(v641 + 36) != 1268)
            {
              break;
            }
          }
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v632 + 8))(v632, 29, 1, 1, 0, 1, 2);
  }
  v1312 = v633;
  *(_OWORD *)v1343 = v1353;
  uint64_t v1344 = (uint64_t)v1348;
  v1345 = v1348;
  uint64_t v1346 = 16;
  int v1347 = 0;
  v1314 = (llvm::SmallPtrSetImplBase *)v1351;
  v1315 = (llvm::SmallPtrSetImplBase *)&v1344;
  v1349 = v1351;
  uint64_t v1350 = 0x400000000;
  if ((void)v1358)
  {
    v642 = (void **)(v1358 + 24);
  }
  else
  {
    uint64_t v643 = *((void *)&v1358 + 1);
    FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(*((llvm::BasicBlock **)&v1358 + 1), 1);
    v642 = (void **)(FirstNonPHIOrDbgOrLifetime + 24);
    if (!FirstNonPHIOrDbgOrLifetime) {
      v642 = (void **)(v643 + 40);
    }
  }
  p_dst = v642;
  v645 = (llvm::SmallPtrSetImplBase *)v1379;
  uint64_t v646 = v1380;
  *(void *)v1400 = 1;
  v1318 = &v1409;
  for (iuint64_t i = 8; ii != 520; ii += 16)
    *(void *)&v1400[ii] = -4096;
  v1320 = (void **)v1411;
  v1409 = v1411;
  uint64_t v1410 = 0x2000000000;
  v648 = (uint64_t *)(v1369 + ((unint64_t)v1370 << 6));
  LODWORD(v1313) = v133;
  if (DWORD2(v1369))
  {
    if (v1370)
    {
      unint64_t v649 = (unint64_t)v1370 << 6;
      v650 = (uint64_t *)v1369;
      while ((*v650 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v650 += 8;
        v649 -= 64;
        if (!v649) {
          goto LABEL_1527;
        }
      }
    }
    else
    {
      v650 = (uint64_t *)v1369;
    }
  }
  else
  {
LABEL_1527:
    v650 = (uint64_t *)(v1369 + ((unint64_t)v1370 << 6));
  }
  v651 = (uint64_t *)(v1369 + ((unint64_t)v1370 << 6));
LABEL_1530:
  while (v650 != v651)
  {
    if (sub_1CC82F948(*v650))
    {
      if (v1350 >= (unint64_t)HIDWORD(v1350)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v1349 + v1350) = *v650;
      LODWORD(v1350) = v1350 + 1;
    }
    v652 = v650 + 8;
    v650 = v648;
    if (v652 != v648)
    {
      v650 = v652;
      while ((*v650 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v650 += 8;
        if (v650 == v648)
        {
          v650 = v648;
          goto LABEL_1530;
        }
      }
    }
  }
  if (v646)
  {
    LODWORD(v1322) = 0;
    v1321 = (llvm::SmallPtrSetImplBase *)&v1414;
    v1323 = (llvm::SmallPtrSetImplBase *)((char *)v645 + 8 * v646);
    do
    {
      uint64_t v653 = 0;
      uint64_t v654 = *(void *)v645;
      int v655 = *(unsigned __int8 *)(*(void *)v645 + 16);
      if (v655 == 60) {
        uint64_t v656 = *(void *)v645;
      }
      else {
        uint64_t v656 = 0;
      }
      if (v655 == 84)
      {
        uint64_t v657 = *(void *)(v654 - 32);
        if (v657 && !*(unsigned char *)(v657 + 16) && *(void *)(v657 + 24) == *(void *)(v654 + 72))
        {
          if ((*(unsigned char *)(v657 + 33) & 0x20) != 0) {
            uint64_t v653 = *(void *)v645;
          }
          else {
            uint64_t v653 = 0;
          }
        }
        else
        {
          uint64_t v653 = 0;
        }
      }
      if (v656)
      {
        uint64_t v658 = **(void **)(v656 - 32);
        unsigned int v659 = *(_DWORD *)(v658 + 8);
        if ((v659 & 0xFE) == 0x12) {
          unsigned int v659 = *(_DWORD *)(**(void **)(v658 + 16) + 8);
        }
        int v660 = v659 >> 8;
      }
      else
      {
        int v660 = -1;
      }
      LODWORD(v1324) = v660;
      if (v653) {
        BOOL v661 = sub_1CB859A14(*(_DWORD *)(*(void *)(v653 - 32) + 36));
      }
      else {
        BOOL v661 = 0;
      }
      if (!sub_1CC82F948(v654)) {
        goto LABEL_1586;
      }
      uint64_t v662 = *(void *)(v654 + 40);
      uint64_t v663 = *(void *)(*(void *)(v662 + 56) + 80);
      uint64_t v664 = v663 - 24;
      if (!v663) {
        uint64_t v664 = 0;
      }
      uint64_t v665 = *((void *)v1343[1] + 6);
      uint64_t v666 = *((unsigned int *)v1343[1] + 16);
      if (v666)
      {
        LODWORD(v667) = (v666 - 1) & ((v662 >> 4) ^ (v662 >> 9));
        v668 = (uint64_t *)(v665 + 16 * v667);
        uint64_t v669 = *v668;
        if (v662 == *v668) {
          goto LABEL_1568;
        }
        int v670 = 1;
        while (v669 != -4096)
        {
          int v671 = v667 + v670++;
          uint64_t v667 = v671 & (v666 - 1);
          uint64_t v669 = *(void *)(v665 + 16 * v667);
          if (v662 == v669)
          {
            v668 = (uint64_t *)(v665 + 16 * v667);
            goto LABEL_1568;
          }
        }
      }
      v668 = (uint64_t *)(v665 + 16 * v666);
LABEL_1568:
      v672 = (uint64_t *)(v665 + 16 * v666);
      if (v668 == v672)
      {
        uint64_t v673 = 0;
        if (!v666) {
          goto LABEL_1587;
        }
      }
      else
      {
        uint64_t v673 = v668[1];
        if (!v666) {
          goto LABEL_1587;
        }
      }
      unsigned int v674 = v666 - 1;
      LODWORD(v666) = ((v664 >> 4) ^ (v664 >> 9)) & (v666 - 1);
      v675 = (uint64_t *)(v665 + 16 * v666);
      uint64_t v676 = *v675;
      if (v664 != *v675)
      {
        int v677 = 1;
        while (v676 != -4096)
        {
          int v678 = v666 + v677++;
          uint64_t v666 = v678 & v674;
          uint64_t v676 = *(void *)(v665 + 16 * v666);
          if (v664 == v676)
          {
            v675 = (uint64_t *)(v665 + 16 * v666);
            goto LABEL_1577;
          }
        }
LABEL_1587:
        LODWORD(v673) = 1;
        goto LABEL_1588;
      }
LABEL_1577:
      if (v675 == v672) {
        goto LABEL_1587;
      }
      uint64_t v679 = v675[1];
      if (v679 == v673 || v679 == 0) {
        goto LABEL_1587;
      }
      if (v673)
      {
        if (*(void *)(v679 + 8) == v673) {
          goto LABEL_1587;
        }
        if (*(void *)(v673 + 8) == v679) {
          goto LABEL_1586;
        }
        unsigned int v681 = *(_DWORD *)(v673 + 16);
        if (v681 >= *(_DWORD *)(v679 + 16)) {
          goto LABEL_1586;
        }
        if (*((unsigned char *)v1343[1] + 88))
        {
          if (*(_DWORD *)(v679 + 72) >= *(_DWORD *)(v673 + 72))
          {
            LODWORD(v673) = *(_DWORD *)(v679 + 76) <= *(_DWORD *)(v673 + 76);
            goto LABEL_1588;
          }
LABEL_1586:
          LODWORD(v673) = 0;
          goto LABEL_1588;
        }
        unsigned int v757 = *((_DWORD *)v1343[1] + 23) + 1;
        *((_DWORD *)v1343[1] + 23) = v757;
        if (v757 > 0x20) {
          llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
        }
        do
        {
          uint64_t v758 = v679;
          uint64_t v679 = *(void *)(v679 + 8);
        }
        while (v679 && *(_DWORD *)(v679 + 16) >= v681);
        LODWORD(v673) = v758 == v673;
      }
LABEL_1588:
      if (v653)
      {
        if ((*(_DWORD *)(*(void *)(v653 - 32) + 36) - 2712) <= 0x13
          && ((1 << (*(unsigned char *)(*(void *)(v653 - 32) + 36) + 104)) & 0xFCCFF) != 0)
        {
          goto LABEL_1593;
        }
      }
      int v689 = *(unsigned __int8 *)(v654 + 16);
      if (v689 == 84
        && (uint64_t v690 = *(void *)(v654 - 32)) != 0
        && !*(unsigned char *)(v690 + 16)
        && *(void *)(v690 + 24) == *(void *)(v654 + 72)
        && (*(unsigned char *)(v690 + 33) & 0x20) != 0)
      {
        int v691 = sub_1CD0FF1D0(*(_DWORD *)(v690 + 36)) & 1;
      }
      else
      {
        int v691 = 0;
      }
      if (v689 == 83 || (v689 - 29) < 0xB) {
        goto LABEL_1882;
      }
      uint64_t v693 = (v689 - 33);
      if (v693 <= 0x37)
      {
        if (((1 << (v689 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v759 = *(void *)(v654 + 64);
          if (!v759 || (*(unsigned char *)(v759 + 17) & 0x30) == 0)
          {
            int v760 = *(_DWORD *)(v654 + 20);
            if (v760 < 0)
            {
              uint64_t v808 = v654 - 32 * (v760 & 0x7FFFFFF);
              uint64_t v811 = *(void *)(v808 - 8);
              uint64_t v809 = v808 - 8;
              uint64_t v810 = v811;
              if (v811)
              {
                uint64_t v812 = -v810;
                while (1)
                {
                  unsigned int v813 = *(_DWORD *)(*(void *)(v809 + v812) + 8);
                  BOOL v814 = v813 > 7;
                  int v815 = (1 << v813) & 0x83;
                  if (v814 || v815 == 0) {
                    break;
                  }
                  v812 += 16;
                  if (!v812) {
                    goto LABEL_1773;
                  }
                }
LABEL_1875:
                int v761 = 1;
LABEL_1876:
                BOOL v694 = v1322 == 0;
                if (v1322) {
                  int v817 = 0;
                }
                else {
                  int v817 = v673;
                }
                if (v761 && !v817)
                {
LABEL_1881:
                  LODWORD(v1322) = 1;
                  goto LABEL_1882;
                }
                goto LABEL_1622;
              }
            }
LABEL_1773:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v654, 45) & 1) == 0)
            {
              int v761 = llvm::CallBase::hasFnAttrOnCalledFunction(v654, 44) ^ 1;
              goto LABEL_1876;
            }
          }
        }
        else
        {
          if (v693 == 27)
          {
            int v761 = (*(_WORD *)(v654 + 18) & 0x301) != 0;
            goto LABEL_1876;
          }
          if (((1 << (v689 - 33)) & 0x808001D0000010) != 0) {
            goto LABEL_1875;
          }
        }
      }
      BOOL v694 = v1322 == 0;
LABEL_1622:
      if (((v661 | v691) & 1) != 0 || v1324 == 2 || v1324 == 64) {
        goto LABEL_1593;
      }
      int v683 = *(unsigned __int8 *)(v654 + 16);
      uint64_t v695 = (v683 - 33);
      if (v695 <= 0x37)
      {
        if (((1 << (v683 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v772 = *(void *)(v654 + 64);
          if (v772 && ((*(unsigned char *)(v772 + 20) & 4) != 0 || (*(unsigned char *)(v772 + 17) & 0x10) != 0)) {
            goto LABEL_1593;
          }
          LODWORD(v1412) = 7;
          if ((!sub_1CC5CB59C(v654, (__int32 *)&v1412, 1uLL)
             || (uint64_t v818 = *(void *)(v654 - 32)) != 0
             && !*(unsigned char *)(v818 + 16)
             && *(void *)(v818 + 24) == *(void *)(v654 + 72)
             && *(_DWORD *)(v818 + 36) == 7)
            && ((llvm::CallBase::hasFnAttrOnCalledFunction(v654, 66) & 1) != 0
             || (llvm::CallBase::hasFnAttrOnCalledFunction(v654, 44) & 1) != 0))
          {
            goto LABEL_1593;
          }
          goto LABEL_1791;
        }
        if (((1 << (v683 - 33)) & 0x808001C8000010) != 0) {
          goto LABEL_1791;
        }
        if (v695 == 28)
        {
          if ((*(_WORD *)(v654 + 18) & 0x301) == 0)
          {
LABEL_1593:
            int v683 = *(unsigned __int8 *)(v654 + 16);
            goto LABEL_1594;
          }
LABEL_1791:
          if (!v694) {
            goto LABEL_1881;
          }
          uint64_t v773 = *((void *)v1343[1] + 6);
          uint64_t v774 = *((unsigned int *)v1343[1] + 16);
          if (v774)
          {
            v775 = *(void **)(v654 + 40);
            LODWORD(v776) = ((v775 >> 4) ^ (v775 >> 9)) & (v774 - 1);
            v777 = (void **)(v773 + 16 * v776);
            v778 = *v777;
            if (v775 != *v777)
            {
              int v779 = 1;
              while (v778 != (void *)-4096)
              {
                int v780 = v776 + v779++;
                uint64_t v776 = v780 & (v774 - 1);
                v778 = *(void **)(v773 + 16 * v776);
                if (v775 == v778)
                {
                  v777 = (void **)(v773 + 16 * v776);
                  goto LABEL_1830;
                }
              }
              goto LABEL_1829;
            }
          }
          else
          {
LABEL_1829:
            v777 = (void **)(v773 + 16 * v774);
          }
LABEL_1830:
          v793 = (void **)(v773 + 16 * v774);
          if (v777 == v793) {
            v794 = 0;
          }
          else {
            v794 = v777[1];
          }
          if (v774)
          {
            v795 = p_dst[2];
            unsigned int v796 = v774 - 1;
            LODWORD(v774) = (v774 - 1) & ((v795 >> 4) ^ (v795 >> 9));
            v797 = (void **)(v773 + 16 * v774);
            v798 = *v797;
            if (v795 == *v797)
            {
LABEL_1839:
              if (v797 != v793)
              {
                v801 = v797[1];
                if (v801 != v794 && v801 != 0)
                {
                  if (!v794) {
                    goto LABEL_1848;
                  }
                  if (*((_DWORD **)v801 + 1) != v794)
                  {
                    if (*((_DWORD **)v794 + 1) == v801) {
                      goto LABEL_1848;
                    }
                    unsigned int v803 = v794[4];
                    if (v803 >= v801[4]) {
                      goto LABEL_1848;
                    }
                    if (*((unsigned char *)v1343[1] + 88))
                    {
                      if (v801[18] < v794[18] || v801[19] > v794[19]) {
                        goto LABEL_1848;
                      }
                    }
                    else
                    {
                      unsigned int v804 = *((_DWORD *)v1343[1] + 23) + 1;
                      *((_DWORD *)v1343[1] + 23) = v804;
                      if (v804 > 0x20) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                      }
                      do
                      {
                        v805 = v801;
                        v801 = (_DWORD *)*((void *)v801 + 1);
                      }
                      while (v801 && v801[4] >= v803);
                      if (v805 != v794)
                      {
LABEL_1848:
                        LODWORD(v1322) = 0;
                        goto LABEL_1882;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              int v799 = 1;
              while (v798 != (void *)-4096)
              {
                int v800 = v774 + v799++;
                uint64_t v774 = v800 & v796;
                v798 = *(void **)(v773 + 16 * v774);
                if (v795 == v798)
                {
                  v797 = (void **)(v773 + 16 * v774);
                  goto LABEL_1839;
                }
              }
            }
          }
          goto LABEL_1593;
        }
      }
LABEL_1594:
      if (v683 == 84)
      {
        uint64_t v684 = *(void *)(v654 - 32);
        if (v684)
        {
          if (!*(unsigned char *)(v684 + 16)
            && *(void *)(v684 + 24) == *(void *)(v654 + 72)
            && (*(unsigned char *)(v684 + 33) & 0x20) != 0
            && *(_DWORD *)(v684 + 36) == 2306
            && v1350 != 0)
          {
            uint64_t v762 = *(void *)(v654 + 40);
            uint64_t v763 = *(void *)(*(void *)(v762 + 56) + 80);
            uint64_t v764 = v763 - 24;
            if (!v763) {
              uint64_t v764 = 0;
            }
            uint64_t v765 = *((void *)v1343[1] + 6);
            uint64_t v766 = *((unsigned int *)v1343[1] + 16);
            if (!v766) {
              goto LABEL_1800;
            }
            LODWORD(v767) = (v766 - 1) & ((v762 >> 4) ^ (v762 >> 9));
            v768 = (uint64_t *)(v765 + 16 * v767);
            uint64_t v769 = *v768;
            if (v762 != *v768)
            {
              int v770 = 1;
              while (v769 != -4096)
              {
                int v771 = v767 + v770++;
                uint64_t v767 = v771 & (v766 - 1);
                uint64_t v769 = *(void *)(v765 + 16 * v767);
                if (v762 == v769)
                {
                  v768 = (uint64_t *)(v765 + 16 * v767);
                  goto LABEL_1801;
                }
              }
LABEL_1800:
              v768 = (uint64_t *)(v765 + 16 * v766);
            }
LABEL_1801:
            v781 = (uint64_t *)(v765 + 16 * v766);
            if (v768 == v781)
            {
              uint64_t v782 = 0;
              if (!v766) {
                goto LABEL_1858;
              }
            }
            else
            {
              uint64_t v782 = v768[1];
              if (!v766)
              {
LABEL_1858:
                if (v1350)
                {
                  v806 = (const llvm::Instruction **)v1349;
                  uint64_t v807 = 8 * v1350;
                  while ((llvm::DominatorTree::dominates(v1343[0], (const llvm::Value *)v654, *v806) & 1) != 0)
                  {
                    ++v806;
                    v807 -= 8;
                    if (!v807) {
                      goto LABEL_1604;
                    }
                  }
                  goto LABEL_1882;
                }
                goto LABEL_1604;
              }
            }
            unsigned int v783 = v766 - 1;
            LODWORD(v766) = ((v764 >> 4) ^ (v764 >> 9)) & (v766 - 1);
            v784 = (uint64_t *)(v765 + 16 * v766);
            uint64_t v785 = *v784;
            if (v764 == *v784)
            {
LABEL_1810:
              if (v784 != v781)
              {
                uint64_t v788 = v784[1];
                if (v788 != v782 && v788 != 0)
                {
                  if (!v782) {
                    goto LABEL_1882;
                  }
                  if (*(void *)(v788 + 8) != v782)
                  {
                    if (*(void *)(v782 + 8) == v788) {
                      goto LABEL_1882;
                    }
                    unsigned int v790 = *(_DWORD *)(v782 + 16);
                    if (v790 >= *(_DWORD *)(v788 + 16)) {
                      goto LABEL_1882;
                    }
                    if (*((unsigned char *)v1343[1] + 88))
                    {
                      if (*(_DWORD *)(v788 + 72) < *(_DWORD *)(v782 + 72)
                        || *(_DWORD *)(v788 + 76) > *(_DWORD *)(v782 + 76))
                      {
                        goto LABEL_1882;
                      }
                    }
                    else
                    {
                      unsigned int v791 = *((_DWORD *)v1343[1] + 23) + 1;
                      *((_DWORD *)v1343[1] + 23) = v791;
                      if (v791 > 0x20) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                      }
                      do
                      {
                        uint64_t v792 = v788;
                        uint64_t v788 = *(void *)(v788 + 8);
                      }
                      while (v788 && *(_DWORD *)(v788 + 16) >= v790);
                      if (v792 != v782) {
                        goto LABEL_1882;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              int v786 = 1;
              while (v785 != -4096)
              {
                int v787 = v766 + v786++;
                uint64_t v766 = v787 & v783;
                uint64_t v785 = *(void *)(v765 + 16 * v766);
                if (v764 == v785)
                {
                  v784 = (uint64_t *)(v765 + 16 * v766);
                  goto LABEL_1810;
                }
              }
            }
            goto LABEL_1858;
          }
        }
      }
LABEL_1604:
      int v686 = *(_DWORD *)(v654 + 20);
      if ((v686 & 0x40000000) != 0)
      {
        v688 = *(uint64_t **)(v654 - 8);
        uint64_t v687 = v686 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v687 = v686 & 0x7FFFFFF;
        v688 = (uint64_t *)(v654 - 32 * v687);
      }
      if (v687)
      {
        v696 = &v688[4 * v687];
        do
        {
          uint64_t v697 = *v688;
          if (*v688 && *(unsigned __int8 *)(*v688 + 16) >= 0x1Cu)
          {
            v699 = v1382;
            if (v1383 == v1382)
            {
              int v700 = HIDWORD(v1384);
              v701 = (char *)v1383 + 8 * HIDWORD(v1384);
              if (HIDWORD(v1384))
              {
                uint64_t v702 = 0;
                while (*(void *)((char *)v1383 + v702) != v697)
                {
                  v702 += 8;
                  if (8 * HIDWORD(v1384) == v702) {
                    goto LABEL_1658;
                  }
                }
                v701 = (char *)v1383 + v702;
              }
LABEL_1658:
              v699 = v1383;
            }
            else
            {
              int v703 = v1384 - 1;
              unsigned int v704 = (v1384 - 1) & ((v697 >> 4) ^ (v697 >> 9));
              v701 = (char *)v1383 + 8 * v704;
              uint64_t v705 = *(void *)v701;
              if (*(void *)v701 == -1)
              {
                v706 = 0;
LABEL_1679:
                if (v706) {
                  v701 = v706;
                }
                int v700 = HIDWORD(v1384);
                if (*(void *)v701 != v697) {
                  v701 = (char *)v1383 + 8 * v1384;
                }
              }
              else
              {
                v706 = 0;
                int v707 = 1;
                while (v705 != v697)
                {
                  if (v706) {
                    BOOL v708 = 0;
                  }
                  else {
                    BOOL v708 = v705 == -2;
                  }
                  if (v708) {
                    v706 = v701;
                  }
                  unsigned int v709 = v704 + v707++;
                  unsigned int v704 = v709 & v703;
                  v701 = (char *)v1383 + 8 * (v709 & v703);
                  uint64_t v705 = *(void *)v701;
                  if (*(void *)v701 == -1) {
                    goto LABEL_1679;
                  }
                }
                int v700 = HIDWORD(v1384);
              }
            }
            unsigned int v710 = v1383 == v699 ? v700 : v1384;
            if (v701 != (char *)v1383 + 8 * v710)
            {
              v1412 = 0;
              if (sub_1CC82F9AC((uint64_t)v1400, v697, &v1412))
              {
                v716 = v1412;
                v712 = *(unsigned char **)&v1400[8];
                unsigned int v713 = *(_DWORD *)&v1400[16];
                int v711 = v1400[0] & 1;
              }
              else
              {
                int v711 = v1400[0] & 1;
                v712 = *(unsigned char **)&v1400[8];
                unsigned int v713 = *(_DWORD *)&v1400[16];
                v714 = (v1400[0] & 1) != 0 ? &v1400[8] : *(unsigned char **)&v1400[8];
                unsigned int v715 = (v1400[0] & 1) != 0 ? 32 : *(_DWORD *)&v1400[16];
                v716 = &v714[16 * v715];
              }
              if (v711)
              {
                v712 = &v1400[8];
                unsigned int v717 = 32;
              }
              else
              {
                unsigned int v717 = v713;
              }
              if (&v712[16 * v717] == v716) {
                goto LABEL_1882;
              }
            }
          }
          v688 += 4;
        }
        while (v688 != v696);
      }
      v718 = v1374;
      if (v1375 == v1374)
      {
        unsigned int v719 = HIDWORD(v1376);
        v720 = (char *)v1375 + 8 * HIDWORD(v1376);
        if (HIDWORD(v1376))
        {
          uint64_t v721 = 0;
          while (*(void *)((char *)v1375 + v721) != v654)
          {
            v721 += 8;
            if (8 * HIDWORD(v1376) == v721) {
              goto LABEL_1703;
            }
          }
          v720 = (char *)v1375 + v721;
        }
LABEL_1703:
        v718 = v1375;
      }
      else
      {
        int v722 = v1376 - 1;
        unsigned int v723 = (v1376 - 1) & ((v654 >> 4) ^ (v654 >> 9));
        v720 = (char *)v1375 + 8 * v723;
        uint64_t v724 = *(void *)v720;
        if (*(void *)v720 == -1)
        {
          v725 = 0;
LABEL_1760:
          if (v725) {
            v720 = v725;
          }
          unsigned int v719 = HIDWORD(v1376);
          if (*(void *)v720 != v654) {
            v720 = (char *)v1375 + 8 * v1376;
          }
        }
        else
        {
          v725 = 0;
          int v726 = 1;
          while (v724 != v654)
          {
            if (v725) {
              BOOL v727 = 0;
            }
            else {
              BOOL v727 = v724 == -2;
            }
            if (v727) {
              v725 = v720;
            }
            unsigned int v728 = v723 + v726++;
            unsigned int v723 = v728 & v722;
            v720 = (char *)v1375 + 8 * (v728 & v722);
            uint64_t v724 = *(void *)v720;
            if (*(void *)v720 == -1) {
              goto LABEL_1760;
            }
          }
          unsigned int v719 = HIDWORD(v1376);
        }
      }
      if (v1375 == v718) {
        unsigned int v729 = v719;
      }
      else {
        unsigned int v729 = v1376;
      }
      if (v720 == (char *)v1375 + 8 * v729)
      {
        if (!v1370) {
          goto LABEL_1714;
        }
        unsigned int v730 = (v1370 - 1) & ((v654 >> 4) ^ (v654 >> 9));
        uint64_t v731 = *(void *)(v1369 + ((unint64_t)v730 << 6));
        if (v654 != v731)
        {
          int v732 = 1;
          while (v731 != -4096)
          {
            unsigned int v733 = v730 + v732++;
            unsigned int v730 = v733 & (v1370 - 1);
            uint64_t v731 = *(void *)(v1369 + ((unint64_t)v730 << 6));
            if (v654 == v731) {
              goto LABEL_1882;
            }
          }
LABEL_1714:
          BOOL v734 = sub_1CD109AEC(v654, 1);
          v1412 = 0;
          if ((sub_1CC82FA50((uint64_t)v1400, v654, &v1412) & 1) == 0)
          {
            int v735 = *(_DWORD *)v1400 >> 1;
            if (v1400[0]) {
              unsigned int v736 = 32;
            }
            else {
              unsigned int v736 = *(_DWORD *)&v1400[16];
            }
            if (4 * v735 + 4 >= 3 * v736)
            {
              v736 *= 2;
            }
            else if (v736 + ~v735 - *(_DWORD *)&v1400[4] > v736 >> 3)
            {
              goto LABEL_1720;
            }
            sub_1CC82FAF4((uint64_t)v1400, v736);
            v1412 = 0;
            sub_1CC82FA50((uint64_t)v1400, v654, &v1412);
LABEL_1720:
            v737 = v1412;
            *(_DWORD *)v1400 += 2;
            if (*(void *)v1412 != -4096) {
              --*(_DWORD *)&v1400[4];
            }
            *(void *)v1412 = v654;
            v737[2] = 0;
            uint64_t v738 = v1410;
            v737[2] = v1410;
            if (v738 >= HIDWORD(v1410)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v739 = (char *)v1409 + 16 * v738;
            *(void *)v739 = v654;
            v739[8] = v734;
            LODWORD(v1410) = v738 + 1;
          }
          if (v734)
          {
            v1412 = v1321;
            p_TTI = (void *)0x2000000000;
            sub_1CB91FBE0((uint64_t)&v1412, 1uLL, v654);
LABEL_1726:
            unsigned int v740 = p_TTI;
            while (v740)
            {
              uint64_t v741 = *((void *)v1412 + --v740);
              LODWORD(p_TTI) = v740;
              int v742 = *(_DWORD *)(v741 + 20);
              if ((v742 & 0x40000000) != 0)
              {
                v744 = *(uint64_t **)(v741 - 8);
                uint64_t v743 = v742 & 0x7FFFFFF;
                if (v743)
                {
LABEL_1732:
                  uint64_t v745 = 32 * v743;
                  do
                  {
                    uint64_t v746 = *v744;
                    if (*v744) {
                      BOOL v747 = *(unsigned __int8 *)(*v744 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v747 = 0;
                    }
                    if (v747)
                    {
                      *(void *)&long long v1442 = 0;
                      int v748 = sub_1CC82F9AC((uint64_t)v1400, v746, &v1442);
                      if (v1400[0]) {
                        v749 = &v1400[8];
                      }
                      else {
                        v749 = *(unsigned char **)&v1400[8];
                      }
                      unsigned int v750 = *(_DWORD *)&v1400[16];
                      if (v1400[0]) {
                        unsigned int v750 = 32;
                      }
                      v751 = &v749[16 * v750];
                      BOOL v752 = (void)v1442 != (void)v751;
                      v753 = (uint64_t *)(v1442 + 8);
                      v754 = (uint64_t *)(v751 + 8);
                      if (!v748) {
                        v753 = v754;
                      }
                      if ((v748 & v752) == 0) {
                        v753 = &v1410;
                      }
                      uint64_t v755 = *(unsigned int *)v753;
                      if (v755 != v1410)
                      {
                        v756 = (char *)v1409 + 16 * v755;
                        if (!v756[8])
                        {
                          v756[8] = 1;
                          if (p_TTI >= (unint64_t)HIDWORD(p_TTI)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v1412 + p_TTI) = *(void *)v756;
                          LODWORD(p_TTI) = p_TTI + 1;
                        }
                      }
                    }
                    v744 += 4;
                    v745 -= 32;
                  }
                  while (v745);
                  goto LABEL_1726;
                }
              }
              else
              {
                uint64_t v743 = v742 & 0x7FFFFFF;
                v744 = (uint64_t *)(v741 - 32 * v743);
                if (v743) {
                  goto LABEL_1732;
                }
              }
            }
            if (v1412 != v1321) {
              free(v1412);
            }
          }
        }
      }
LABEL_1882:
      v645 = (llvm::SmallPtrSetImplBase *)((char *)v645 + 8);
    }
    while (v645 != v1323);
  }
  v819 = (void **)v1409;
  if (!v1410) {
    goto LABEL_1932;
  }
  v820 = (llvm::Instruction *)(p_dst - 3);
  v821 = (void **)((char *)v1409 + 16 * v1410);
  do
  {
    if (((_BYTE)v819[1] & 1) == 0) {
      goto LABEL_1924;
    }
    v822 = (llvm::Instruction *)*v819;
    llvm::Instruction::moveBefore((llvm::Instruction *)*v819, v820);
    v823 = (char *)v1345;
    uint64_t v824 = HIDWORD(v1346);
    if (v1345 != (void *)v1344)
    {
      unsigned int v828 = v1346;
      goto LABEL_1903;
    }
    if (!HIDWORD(v1346))
    {
LABEL_1900:
      unsigned int v828 = v1346;
      if (HIDWORD(v1346) < v1346)
      {
        ++HIDWORD(v1346);
        *((void *)v1345 + v824) = v822;
        goto LABEL_1924;
      }
LABEL_1903:
      if (3 * v828 <= 4 * (HIDWORD(v1346) - v1347))
      {
        if (v828 >= 0x40) {
          v828 *= 2;
        }
        else {
          unsigned int v828 = 128;
        }
      }
      else if (v828 - HIDWORD(v1346) >= v828 >> 3)
      {
        goto LABEL_1905;
      }
      llvm::SmallPtrSetImplBase::Grow(v1315, v828);
      unsigned int v828 = v1346;
      v823 = (char *)v1345;
LABEL_1905:
      unsigned int v829 = v828 - 1;
      unsigned int v830 = (v828 - 1) & ((v822 >> 4) ^ (v822 >> 9));
      v831 = &v823[8 * v830];
      v832 = *(llvm::Instruction **)v831;
      if (*(void *)v831 == -1)
      {
        v833 = 0;
LABEL_1917:
        if (v833) {
          v837 = v833;
        }
        else {
          v837 = (llvm::Instruction **)v831;
        }
        if (*v837 != v822)
        {
          if (*v837 == (llvm::Instruction *)-2) {
            --v1347;
          }
          else {
            ++HIDWORD(v1346);
          }
          *v837 = v822;
        }
      }
      else
      {
        v833 = 0;
        int v834 = 1;
        while (v832 != v822)
        {
          if (v833) {
            BOOL v835 = 0;
          }
          else {
            BOOL v835 = v832 == (llvm::Instruction *)-2;
          }
          if (v835) {
            v833 = (llvm::Instruction **)v831;
          }
          unsigned int v836 = v830 + v834++;
          unsigned int v830 = v836 & v829;
          v831 = &v823[8 * (v836 & v829)];
          v832 = *(llvm::Instruction **)v831;
          if (*(void *)v831 == -1) {
            goto LABEL_1917;
          }
        }
      }
      goto LABEL_1924;
    }
    v825 = 0;
    uint64_t v826 = 8 * HIDWORD(v1346);
    v827 = (llvm::Instruction **)v1345;
    while (*v827 != v822)
    {
      if (*v827 == (llvm::Instruction *)-2) {
        v825 = v827;
      }
      ++v827;
      v826 -= 8;
      if (!v826)
      {
        if (!v825) {
          goto LABEL_1900;
        }
        *v825 = v822;
        --v1347;
        break;
      }
    }
LABEL_1924:
    v819 += 2;
  }
  while (v819 != v821);
  v819 = (void **)v1409;
LABEL_1932:
  if (v819 != v1320) {
    free(v819);
  }
  if ((v1400[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v1400[8], 8);
  }
  __int16 v838 = *(_WORD *)(v1308 + 28);
  *(void *)v1400 = &TTI;
  *(void *)&v1400[8] = v1343;
  *(_WORD *)&v1400[16] = v838;
  v1310 = (char **)&v1400[24];
  v1311 = (llvm::SmallPtrSetImplBase *)&v1402;
  *(void *)&v1400[24] = &v1402;
  __src = (void *)0x200000000;
  __p = v1337;
  v1334 = v1337;
  uint64_t v1335 = 16;
  int v1336 = 0;
  v1328 = v1332;
  v1329 = v1332;
  uint64_t v1330 = 16;
  int v1331 = 0;
  uint64_t v1325 = 0;
  uint64_t v1326 = 0;
  unsigned int v1327 = 0;
  v839 = (void **)(v1369 + ((unint64_t)v1370 << 6));
  if (DWORD2(v1369))
  {
    if (v1370)
    {
      unint64_t v840 = (unint64_t)v1370 << 6;
      v841 = (llvm::SmallPtrSetImplBase *)v1369;
      while ((*(void *)v841 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v841 = (llvm::SmallPtrSetImplBase *)((char *)v841 + 64);
        v840 -= 64;
        if (!v840) {
          goto LABEL_1941;
        }
      }
    }
    else
    {
      v841 = (llvm::SmallPtrSetImplBase *)v1369;
    }
  }
  else
  {
LABEL_1941:
    v841 = (llvm::SmallPtrSetImplBase *)(v1369 + ((unint64_t)v1370 << 6));
  }
  v842 = (llvm::SmallPtrSetImplBase *)(v1369 + ((unint64_t)v1370 << 6));
  if (v841 == v842) {
    goto LABEL_2568;
  }
  v1318 = (void **)&v1415 + 1;
  v843 = (uint64_t *)&v1443;
  v844 = (__n128 *)&v1435;
  p_dst = (void **)(v1369 + ((unint64_t)v1370 << 6));
  v1320 = p_dst;
  v1316 = (__n128 *)&v1435;
  v1317 = (uint64_t *)&v1443;
  while (2)
  {
    uint64_t v845 = *(void *)v841;
    uint64_t v847 = *(void *)(*(void *)&v1400[8] + 16);
    uint64_t v846 = *(void *)(*(void *)&v1400[8] + 24);
    if (v846 == v847)
    {
      uint64_t v848 = *(unsigned int *)(*(void *)&v1400[8] + 36);
      v849 = (void *)(v846 + 8 * v848);
      if (v848)
      {
        uint64_t v850 = 0;
        uint64_t v851 = 8 * v848;
        while (*(void *)(v846 + v850) != v845)
        {
          v850 += 8;
          if (v851 == v850) {
            goto LABEL_1963;
          }
        }
        v849 = (void *)(v846 + v850);
      }
LABEL_1963:
      uint64_t v847 = *(void *)(*(void *)&v1400[8] + 24);
    }
    else
    {
      uint64_t v852 = *(unsigned int *)(*(void *)&v1400[8] + 32);
      int v853 = v852 - 1;
      unsigned int v854 = (v852 - 1) & ((v845 >> 4) ^ (v845 >> 9));
      v849 = (void *)(v846 + 8 * v854);
      uint64_t v855 = *v849;
      if (*v849 == -1)
      {
        v856 = 0;
LABEL_2163:
        if (v856) {
          v849 = v856;
        }
        if (*v849 != v845) {
          v849 = (void *)(v846 + 8 * v852);
        }
      }
      else
      {
        v856 = 0;
        int v857 = 1;
        while (v855 != v845)
        {
          if (v856) {
            BOOL v858 = 0;
          }
          else {
            BOOL v858 = v855 == -2;
          }
          if (v858) {
            v856 = v849;
          }
          unsigned int v859 = v854 + v857++;
          unsigned int v854 = v859 & v853;
          v849 = (void *)(v846 + 8 * (v859 & v853));
          uint64_t v855 = *v849;
          if (*v849 == -1) {
            goto LABEL_2163;
          }
        }
      }
    }
    if (v846 == v847) {
      uint64_t v860 = 36;
    }
    else {
      uint64_t v860 = 32;
    }
    if (v849 != (void *)(v846 + 8 * *(unsigned int *)(*(void *)&v1400[8] + v860))) {
      goto LABEL_2208;
    }
    v1321 = v841;
    uint64_t v861 = *(void *)v1400;
    v1412 = v1318;
    p_TTI = v1318;
    uint64_t v1414 = 16;
    LODWORD(v1415) = 0;
    *(void *)&long long v1442 = v843;
    *((void *)&v1442 + 1) = 0x500000000;
    v862 = (__n128 *)&v1442;
    sub_1CB91FBE0((uint64_t)&v1442, 1uLL, v845);
    v1434.n128_u64[0] = (unint64_t)v844;
    v1434.n128_u64[1] = 0x500000000;
    unsigned __int32 v863 = DWORD2(v1442);
    LODWORD(v1323) = (v845 >> 4) ^ (v845 >> 9);
    v864 = &v1434;
    do
    {
      v865 = v864;
      if (v863)
      {
        v1322 = (void **)&v864[1];
        v1324 = (long long *)v862;
        while (1)
        {
          uint64_t v866 = *(void *)(v862->n128_u64[0] + 8 * v863-- - 8);
          v862->n128_u32[2] = v863;
          if (v866) {
            break;
          }
LABEL_1997:
          if (!v863) {
            goto LABEL_2131;
          }
        }
        v867 = (char *)p_TTI;
        v868 = v1412;
        if (p_TTI == v1412)
        {
          unsigned int v869 = HIDWORD(v1414);
          v870 = (char *)p_TTI + 8 * HIDWORD(v1414);
          if (HIDWORD(v1414))
          {
            uint64_t v871 = 0;
            while (*(void *)((char *)p_TTI + v871) != v866)
            {
              v871 += 8;
              if (8 * HIDWORD(v1414) == v871) {
                goto LABEL_1991;
              }
            }
            v870 = (char *)p_TTI + v871;
          }
LABEL_1991:
          v868 = p_TTI;
        }
        else
        {
          int v872 = v1414 - 1;
          unsigned int v873 = (v1414 - 1) & ((v866 >> 4) ^ (v866 >> 9));
          v870 = (char *)p_TTI + 8 * v873;
          uint64_t v874 = *(void *)v870;
          if (*(void *)v870 == -1)
          {
            v875 = 0;
LABEL_2023:
            if (v875) {
              v870 = v875;
            }
            unsigned int v869 = HIDWORD(v1414);
            if (*(void *)v870 != v866) {
              v870 = (char *)p_TTI + 8 * v1414;
            }
          }
          else
          {
            v875 = 0;
            int v876 = 1;
            while (v874 != v866)
            {
              if (v875) {
                BOOL v877 = 0;
              }
              else {
                BOOL v877 = v874 == -2;
              }
              if (v877) {
                v875 = v870;
              }
              unsigned int v878 = v873 + v876++;
              unsigned int v873 = v878 & v872;
              v870 = (char *)p_TTI + 8 * (v878 & v872);
              uint64_t v874 = *(void *)v870;
              if (*(void *)v870 == -1) {
                goto LABEL_2023;
              }
            }
            unsigned int v869 = HIDWORD(v1414);
          }
        }
        unsigned int v879 = v1414;
        if (p_TTI == v868) {
          unsigned int v880 = v869;
        }
        else {
          unsigned int v880 = v1414;
        }
        if (v870 != (char *)p_TTI + 8 * v880) {
          goto LABEL_1996;
        }
        if (p_TTI == v868)
        {
          if (v869)
          {
            v881 = 0;
            uint64_t v882 = 8 * v869;
            v883 = p_TTI;
            while (*v883 != v866)
            {
              if (*v883 == -2) {
                v881 = v883;
              }
              ++v883;
              v882 -= 8;
              if (!v882)
              {
                if (!v881) {
                  goto LABEL_2007;
                }
                void *v881 = v866;
                LODWORD(v1415) = v1415 - 1;
                goto LABEL_2036;
              }
            }
            goto LABEL_2036;
          }
LABEL_2007:
          if (v1414 > v869)
          {
            HIDWORD(v1414) = v869 + 1;
            *((void *)p_TTI + v869) = v866;
LABEL_2036:
            int v893 = *(_DWORD *)(v866 + 20);
            if ((v893 & 0x40000000) == 0)
            {
              uint64_t v894 = v893 & 0x7FFFFFF;
              v895 = (uint64_t *)(v866 - 32 * v894);
              if (v894) {
                goto LABEL_2040;
              }
              goto LABEL_1996;
            }
            v895 = *(uint64_t **)(v866 - 8);
            uint64_t v894 = v893 & 0x7FFFFFF;
            if (!v894)
            {
LABEL_1996:
              v862 = (__n128 *)v1324;
              unsigned __int32 v863 = *((_DWORD *)v1324 + 2);
              goto LABEL_1997;
            }
LABEL_2040:
            v896 = &v895[4 * v894];
            while (1)
            {
              uint64_t v897 = *v895;
              if (*v895) {
                BOOL v898 = *(unsigned __int8 *)(*v895 + 16) >= 0x1Cu;
              }
              else {
                BOOL v898 = 0;
              }
              if (!v898) {
                goto LABEL_2108;
              }
              uint64_t v899 = *(void *)(v861 + 680);
              uint64_t v900 = *(void *)(v861 + 672);
              if (v899 == v900)
              {
                uint64_t v901 = *(unsigned int *)(v861 + 692);
                v902 = (void *)(v899 + 8 * v901);
                if (v901)
                {
                  uint64_t v903 = 0;
                  uint64_t v904 = 8 * v901;
                  while (*(void *)(v899 + v903) != v897)
                  {
                    v903 += 8;
                    if (v904 == v903) {
                      goto LABEL_2064;
                    }
                  }
                  v902 = (void *)(v899 + v903);
                }
LABEL_2064:
                uint64_t v900 = *(void *)(v861 + 680);
              }
              else
              {
                uint64_t v905 = *(unsigned int *)(v861 + 688);
                int v906 = v905 - 1;
                unsigned int v907 = (v905 - 1) & ((v897 >> 4) ^ (v897 >> 9));
                v902 = (void *)(v899 + 8 * v907);
                uint64_t v908 = *v902;
                if (*v902 == -1)
                {
                  v909 = 0;
LABEL_2111:
                  if (v909) {
                    v902 = v909;
                  }
                  if (*v902 != v897) {
                    v902 = (void *)(v899 + 8 * v905);
                  }
                }
                else
                {
                  v909 = 0;
                  int v910 = 1;
                  while (v908 != v897)
                  {
                    if (v909) {
                      BOOL v911 = 0;
                    }
                    else {
                      BOOL v911 = v908 == -2;
                    }
                    if (v911) {
                      v909 = v902;
                    }
                    unsigned int v912 = v907 + v910++;
                    unsigned int v907 = v912 & v906;
                    v902 = (void *)(v899 + 8 * (v912 & v906));
                    uint64_t v908 = *v902;
                    if (*v902 == -1) {
                      goto LABEL_2111;
                    }
                  }
                }
              }
              v913 = (unsigned int *)(v899 == v900 ? v861 + 692 : v861 + 688);
              if (v902 == (void *)(v899 + 8 * *v913)) {
                goto LABEL_2108;
              }
              unint64_t v914 = v865->n128_u32[2];
              if (v914 >= v865->n128_u32[3]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(v865->n128_u64[0] + 8 * v914) = v897;
              ++v865->n128_u32[2];
              v1450 = 0;
              unsigned int v915 = v1327;
              char v916 = sub_1CC82FFE4(v1325, v1327, v897, &v1450);
              v917 = (unsigned int *)v1450;
              if ((v916 & 1) == 0) {
                break;
              }
              v919 = (llvm::SmallPtrSetImplBase *)((char *)v1450 + 8);
              v921 = (uint64_t *)*((void *)v1450 + 1);
              v920 = (char **)((char *)v1450 + 16);
              v918 = (char *)*((void *)v1450 + 2);
              if (v918 != (char *)v921)
              {
                unsigned int v926 = *((_DWORD *)v1450 + 6);
                LODWORD(v922) = *((_DWORD *)v1450 + 7);
LABEL_2087:
                if (3 * v926 <= 4 * (v922 - v917[8]))
                {
                  if (v926 >= 0x40) {
                    v926 *= 2;
                  }
                  else {
                    unsigned int v926 = 128;
                  }
                }
                else if (v926 - v922 >= v926 >> 3)
                {
                  goto LABEL_2089;
                }
                llvm::SmallPtrSetImplBase::Grow(v919, v926);
                unsigned int v926 = v917[6];
                v918 = *v920;
LABEL_2089:
                unsigned int v927 = v926 - 1;
                unsigned int v928 = (v926 - 1) & v1323;
                v929 = &v918[8 * v928];
                uint64_t v930 = *(void *)v929;
                if (*(void *)v929 == -1)
                {
                  v931 = 0;
LABEL_2101:
                  if (v931) {
                    v935 = v931;
                  }
                  else {
                    v935 = (uint64_t *)v929;
                  }
                  if (*v935 != v845)
                  {
                    if (*v935 == -2) {
                      --v917[8];
                    }
                    else {
                      ++v917[7];
                    }
                    uint64_t *v935 = v845;
                  }
                }
                else
                {
                  v931 = 0;
                  int v932 = 1;
                  while (v930 != v845)
                  {
                    if (v931) {
                      BOOL v933 = 0;
                    }
                    else {
                      BOOL v933 = v930 == -2;
                    }
                    if (v933) {
                      v931 = (uint64_t *)v929;
                    }
                    unsigned int v934 = v928 + v932++;
                    unsigned int v928 = v934 & v927;
                    v929 = &v918[8 * (v934 & v927)];
                    uint64_t v930 = *(void *)v929;
                    if (*(void *)v929 == -1) {
                      goto LABEL_2101;
                    }
                  }
                }
                goto LABEL_2108;
              }
LABEL_2076:
              uint64_t v922 = v917[7];
              if (v922)
              {
                v923 = 0;
                uint64_t v924 = 8 * v922;
                v925 = v921;
                while (*v925 != v845)
                {
                  if (*v925 == -2) {
                    v923 = v925;
                  }
                  ++v925;
                  v924 -= 8;
                  if (!v924)
                  {
                    if (!v923) {
                      goto LABEL_2083;
                    }
                    uint64_t *v923 = v845;
                    --v917[8];
                    goto LABEL_2108;
                  }
                }
                goto LABEL_2108;
              }
LABEL_2083:
              unsigned int v926 = v917[6];
              if (v922 >= v926) {
                goto LABEL_2087;
              }
              v917[7] = v922 + 1;
              v921[v922] = v845;
LABEL_2108:
              v895 += 4;
              if (v895 == v896) {
                goto LABEL_1996;
              }
            }
            if (4 * (int)v1326 + 4 >= 3 * v915)
            {
              int v936 = 2 * v915;
            }
            else
            {
              if (v915 + ~v1326 - HIDWORD(v1326) > v915 >> 3)
              {
LABEL_2073:
                LODWORD(v1326) = v1326 + 1;
                if (*(void *)v917 != -4096) {
                  --HIDWORD(v1326);
                }
                *(void *)v917 = v897;
                v918 = (char *)(v917 + 10);
                *((void *)v917 + 1) = v917 + 10;
                v919 = (llvm::SmallPtrSetImplBase *)(v917 + 2);
                *((void *)v917 + 2) = v917 + 10;
                v920 = (char **)(v917 + 4);
                *((void *)v917 + 3) = 1;
                v921 = (uint64_t *)(v917 + 10);
                v917[8] = 0;
                goto LABEL_2076;
              }
              int v936 = v915;
            }
            sub_1CC830070((uint64_t)&v1325, v936);
            v1450 = 0;
            sub_1CC82FFE4(v1325, v1327, v897, &v1450);
            v917 = (unsigned int *)v1450;
            goto LABEL_2073;
          }
        }
        if (3 * (int)v1414 <= 4 * (v869 - v1415))
        {
          if (v1414 >= 0x40) {
            unsigned int v879 = 2 * v1414;
          }
          else {
            unsigned int v879 = 128;
          }
        }
        else if (v1414 - v869 >= v1414 >> 3)
        {
          goto LABEL_2011;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1412, v879);
        unsigned int v879 = v1414;
        v867 = (char *)p_TTI;
LABEL_2011:
        unsigned int v884 = v879 - 1;
        unsigned int v885 = (v879 - 1) & ((v866 >> 4) ^ (v866 >> 9));
        v886 = &v867[8 * v885];
        uint64_t v887 = *(void *)v886;
        if (*(void *)v886 == -1)
        {
          v888 = 0;
LABEL_2029:
          if (v888) {
            v892 = v888;
          }
          else {
            v892 = v886;
          }
          if (*(void *)v892 != v866)
          {
            if (*(void *)v892 == -2) {
              LODWORD(v1415) = v1415 - 1;
            }
            else {
              ++HIDWORD(v1414);
            }
            *(void *)v892 = v866;
          }
        }
        else
        {
          v888 = 0;
          int v889 = 1;
          while (v887 != v866)
          {
            if (v888) {
              BOOL v890 = 0;
            }
            else {
              BOOL v890 = v887 == -2;
            }
            if (v890) {
              v888 = v886;
            }
            unsigned int v891 = v885 + v889++;
            unsigned int v885 = v891 & v884;
            v886 = &v867[8 * (v891 & v884)];
            uint64_t v887 = *(void *)v886;
            if (*(void *)v886 == -1) {
              goto LABEL_2029;
            }
          }
        }
        goto LABEL_2036;
      }
LABEL_2131:
      unsigned __int32 v863 = v865->n128_u32[2];
      v864 = v862;
      v862 = v865;
    }
    while (v863);
    v844 = v1316;
    if ((__n128 *)v1434.n128_u64[0] != v1316) {
      free((void *)v1434.n128_u64[0]);
    }
    v843 = v1317;
    v839 = v1320;
    v841 = v1321;
    v842 = (llvm::SmallPtrSetImplBase *)p_dst;
    if ((uint64_t *)v1442 != v1317) {
      free((void *)v1442);
    }
    if (p_TTI != v1412) {
      free(p_TTI);
    }
    v937 = v1329;
    uint64_t v938 = HIDWORD(v1330);
    if (v1329 != v1328)
    {
      unsigned int v942 = v1330;
      goto LABEL_2149;
    }
    if (!HIDWORD(v1330))
    {
LABEL_2146:
      unsigned int v942 = v1330;
      if (HIDWORD(v1330) < v1330)
      {
        ++HIDWORD(v1330);
        *(void *)&v1329[8 * v938] = v845;
        goto LABEL_2175;
      }
LABEL_2149:
      if (3 * v942 <= 4 * (HIDWORD(v1330) - v1331))
      {
        if (v942 >= 0x40) {
          v942 *= 2;
        }
        else {
          unsigned int v942 = 128;
        }
      }
      else if (v942 - HIDWORD(v1330) >= v942 >> 3)
      {
        goto LABEL_2151;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1328, v942);
      unsigned int v942 = v1330;
      v937 = v1329;
LABEL_2151:
      unsigned int v943 = v942 - 1;
      unsigned int v944 = (v942 - 1) & v1323;
      v945 = &v937[8 * v944];
      uint64_t v946 = *(void *)v945;
      if (*(void *)v945 == -1)
      {
        v947 = 0;
LABEL_2168:
        if (v947) {
          v951 = v947;
        }
        else {
          v951 = (uint64_t *)v945;
        }
        if (*v951 != v845)
        {
          if (*v951 == -2) {
            --v1331;
          }
          else {
            ++HIDWORD(v1330);
          }
          uint64_t *v951 = v845;
        }
      }
      else
      {
        v947 = 0;
        int v948 = 1;
        while (v946 != v845)
        {
          if (v947) {
            BOOL v949 = 0;
          }
          else {
            BOOL v949 = v946 == -2;
          }
          if (v949) {
            v947 = (uint64_t *)v945;
          }
          unsigned int v950 = v944 + v948++;
          unsigned int v944 = v950 & v943;
          v945 = &v937[8 * (v950 & v943)];
          uint64_t v946 = *(void *)v945;
          if (*(void *)v945 == -1) {
            goto LABEL_2168;
          }
        }
      }
      goto LABEL_2175;
    }
    v939 = 0;
    uint64_t v940 = 8 * HIDWORD(v1330);
    v941 = (uint64_t *)v1329;
    while (*v941 != v845)
    {
      if (*v941 == -2) {
        v939 = v941;
      }
      ++v941;
      v940 -= 8;
      if (!v940)
      {
        if (!v939) {
          goto LABEL_2146;
        }
        uint64_t *v939 = v845;
        --v1331;
        break;
      }
    }
LABEL_2175:
    if (sub_1CC82F948(v845))
    {
      v952 = v1334;
      uint64_t v953 = HIDWORD(v1335);
      if (v1334 == __p)
      {
        if (HIDWORD(v1335))
        {
          v954 = 0;
          uint64_t v955 = 8 * HIDWORD(v1335);
          v956 = (uint64_t *)v1334;
          while (*v956 != v845)
          {
            if (*v956 == -2) {
              v954 = v956;
            }
            ++v956;
            v955 -= 8;
            if (!v955)
            {
              if (!v954) {
                goto LABEL_2184;
              }
              uint64_t *v954 = v845;
              --v1336;
              goto LABEL_2208;
            }
          }
          goto LABEL_2208;
        }
LABEL_2184:
        unsigned int v957 = v1335;
        if (HIDWORD(v1335) < v1335)
        {
          ++HIDWORD(v1335);
          *(void *)&v1334[8 * v953] = v845;
          goto LABEL_2208;
        }
      }
      else
      {
        unsigned int v957 = v1335;
      }
      if (3 * v957 <= 4 * (HIDWORD(v1335) - v1336))
      {
        if (v957 >= 0x40) {
          v957 *= 2;
        }
        else {
          unsigned int v957 = 128;
        }
      }
      else if (v957 - HIDWORD(v1335) >= v957 >> 3)
      {
        goto LABEL_2189;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__p, v957);
      unsigned int v957 = v1335;
      v952 = v1334;
LABEL_2189:
      unsigned int v958 = v957 - 1;
      unsigned int v959 = (v957 - 1) & v1323;
      v960 = &v952[8 * v959];
      uint64_t v961 = *(void *)v960;
      if (*(void *)v960 == -1)
      {
        v962 = 0;
LABEL_2201:
        if (v962) {
          v966 = v962;
        }
        else {
          v966 = (uint64_t *)v960;
        }
        if (*v966 != v845)
        {
          if (*v966 == -2) {
            --v1336;
          }
          else {
            ++HIDWORD(v1335);
          }
          uint64_t *v966 = v845;
        }
      }
      else
      {
        v962 = 0;
        int v963 = 1;
        while (v961 != v845)
        {
          if (v962) {
            BOOL v964 = 0;
          }
          else {
            BOOL v964 = v961 == -2;
          }
          if (v964) {
            v962 = (uint64_t *)v960;
          }
          unsigned int v965 = v959 + v963++;
          unsigned int v959 = v965 & v958;
          v960 = &v952[8 * (v965 & v958)];
          uint64_t v961 = *(void *)v960;
          if (*(void *)v960 == -1) {
            goto LABEL_2201;
          }
        }
      }
    }
LABEL_2208:
    v967 = (llvm::SmallPtrSetImplBase *)((char *)v841 + 64);
    v841 = (llvm::SmallPtrSetImplBase *)v839;
    if (v967 != (llvm::SmallPtrSetImplBase *)v839)
    {
      v841 = v967;
      while ((*(void *)v841 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v841 = (llvm::SmallPtrSetImplBase *)((char *)v841 + 64);
        if (v841 == (llvm::SmallPtrSetImplBase *)v839)
        {
          v841 = (llvm::SmallPtrSetImplBase *)v839;
          break;
        }
      }
    }
    if (v841 != v842) {
      continue;
    }
    break;
  }
  if (HIDWORD(v1335) == v1336) {
    goto LABEL_2568;
  }
  v1412 = &v1414;
  p_TTI = (void *)0x200000000;
  *((void *)&v1415 + 1) = (char *)&v1416 + 8;
  *(void *)&long long v1416 = 0x200000000;
  *((void *)&v1417 + 1) = &v1420;
  *(void *)&long long v1418 = &v1420;
  *((void *)&v1418 + 1) = 4;
  LODWORD(v1419) = 0;
  *((void *)&v1422 + 1) = &v1423[1];
  v1423[0] = 0xA00000000;
  BYTE8(v1424) = 1;
  *(void *)&long long v1425 = 1;
  WORD4(v1425) = 0;
  BYTE10(v1425) = 0;
  long long v1427 = 0u;
  __n128 v1426 = 0u;
  *(void *)&long long v1428 = v1429;
  *((void *)&v1428 + 1) = 0x800000000;
  v1320 = (void **)v1432;
  v1321 = (llvm::SmallPtrSetImplBase *)v1429;
  v1430 = v1432;
  uint64_t v1431 = 0x800000000;
  v968 = *(void ***)v1400;
  v1324 = *(long long **)(*(void *)v1400 + 8);
  v969 = &v1436;
  v1434.n128_u64[0] = (unint64_t)&v1436;
  v1434.n128_u64[1] = (unint64_t)&v1436;
  *(void *)&long long v1435 = 16;
  if (v1334 == __p) {
    uint64_t v970 = HIDWORD(v1335);
  }
  else {
    uint64_t v970 = v1335;
  }
  DWORD2(v1435) = 0;
  v1322 = *(void ***)v1400;
  v1318 = (void **)&v1416 + 1;
  p_dst = (void **)&v1414;
  v1316 = &v1426;
  v1317 = &v1423[1];
  if (v970)
  {
    uint64_t v971 = 8 * v970;
    v972 = (uint64_t *)v1334;
    while ((unint64_t)*v972 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v972;
      v971 -= 8;
      if (!v971) {
        goto LABEL_2288;
      }
    }
  }
  else
  {
    v972 = (uint64_t *)v1334;
  }
  v973 = &v1334[8 * v970];
  if (v972 == (uint64_t *)v973)
  {
LABEL_2288:
    LODWORD(v1323) = 0;
  }
  else
  {
    unint64_t v974 = 0;
    LODWORD(v1323) = 0;
    uint64_t v975 = *v972;
    unint64_t v976 = 16;
    v977 = &v1436;
LABEL_2239:
    *(void *)&long long v1442 = 0;
    if (sub_1CC82F050((uint64_t)v968[36], *((_DWORD *)v968 + 76), v975, &v1442)) {
      unint64_t v978 = v1442;
    }
    else {
      unint64_t v978 = (unint64_t)v968[36] + 64 * (unint64_t)*((unsigned int *)v968 + 76);
    }
    BOOL v979 = *(unsigned __int8 *)(v978 + 8) - 1 < 2;
    __int16 v980 = WORD4(v1425);
    if (WORD4(v1425) <= *(unsigned __int16 *)(v978 + 24)) {
      __int16 v980 = *(_WORD *)(v978 + 24);
    }
    BYTE10(v1425) |= *(unsigned char *)(v978 + 26);
    WORD4(v1425) = v980;
    uint64_t v981 = *(unsigned int *)(v978 + 40);
    if (v981)
    {
      v982 = *(void ***)(v978 + 32);
      v983 = &v982[v981];
      while (2)
      {
        v984 = *v982;
        if (v977 == v969)
        {
          if (v974)
          {
            v985 = 0;
            uint64_t v986 = 8 * v974;
            v987 = v969;
            while (*v987 != v984)
            {
              if (*v987 == (void *)-2) {
                v985 = v987;
              }
              ++v987;
              v986 -= 8;
              if (!v986)
              {
                if (!v985) {
                  goto LABEL_2254;
                }
                *v985 = v984;
                --DWORD2(v1435);
                goto LABEL_2276;
              }
            }
            goto LABEL_2276;
          }
LABEL_2254:
          if (v974 < v976)
          {
            DWORD1(v1435) = v974 + 1;
            v969[v974] = v984;
            goto LABEL_2276;
          }
        }
        unsigned int v988 = v1435;
        if (3 * (int)v1435 <= (4 * (DWORD1(v1435) - DWORD2(v1435))))
        {
          if (v1435 >= 0x40) {
            unsigned int v988 = 2 * v1435;
          }
          else {
            unsigned int v988 = 128;
          }
        }
        else if ((int)v1435 - DWORD1(v1435) >= v1435 >> 3)
        {
          goto LABEL_2258;
        }
        BOOL v997 = v979;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1434, v988);
        BOOL v979 = v997;
        unsigned int v988 = v1435;
LABEL_2258:
        unsigned int v989 = v988 - 1;
        unsigned int v990 = (v988 - 1) & ((v984 >> 4) ^ (v984 >> 9));
        v991 = (void *)(v1434.n128_u64[1] + 8 * v990);
        v992 = (void *)*v991;
        if (*v991 == -1)
        {
          v993 = 0;
LABEL_2270:
          if (v993) {
            v991 = v993;
          }
          if ((void *)*v991 != v984)
          {
            if (*v991 == -2) {
              --DWORD2(v1435);
            }
            else {
              ++DWORD1(v1435);
            }
            void *v991 = v984;
          }
        }
        else
        {
          v993 = 0;
          int v994 = 1;
          while (v992 != v984)
          {
            if (v993) {
              BOOL v995 = 0;
            }
            else {
              BOOL v995 = v992 == (void *)-2;
            }
            if (v995) {
              v993 = v991;
            }
            unsigned int v996 = v990 + v994++;
            unsigned int v990 = v996 & v989;
            v991 = (void *)(v1434.n128_u64[1] + 8 * (v996 & v989));
            v992 = (void *)*v991;
            if (*v991 == -1) {
              goto LABEL_2270;
            }
          }
        }
LABEL_2276:
        v977 = (void **)v1434.n128_u64[1];
        v969 = (void **)v1434.n128_u64[0];
        unint64_t v974 = DWORD1(v1435);
        unint64_t v976 = v1435;
        if (++v982 == v983) {
          break;
        }
        continue;
      }
    }
    LODWORD(v1323) = v1323 | v979;
    v998 = (unint64_t *)(v972 + 1);
    v968 = v1322;
    while (v998 != (unint64_t *)v973)
    {
      unint64_t v999 = *v998++;
      uint64_t v975 = v999;
      if (v999 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v972 = (uint64_t *)(v998 - 1);
        goto LABEL_2239;
      }
    }
  }
  v1000 = (char *)v968[36];
  uint64_t v1001 = *((unsigned int *)v968 + 76);
  v1002 = &v1000[64 * v1001];
  if (*((_DWORD *)v968 + 74))
  {
    if (v1001)
    {
      uint64_t v1003 = v1001 << 6;
      v1004 = (char *)v968[36];
      while ((*(void *)v1004 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1004 += 64;
        v1003 -= 64;
        if (!v1003) {
          goto LABEL_2294;
        }
      }
    }
    else
    {
      v1004 = (char *)v968[36];
    }
  }
  else
  {
LABEL_2294:
    v1004 = &v1000[64 * v1001];
  }
  v1005 = &v1000[64 * (unint64_t)v1001];
  if (v1004 == v1005)
  {
LABEL_2387:
    uint64_t v1044 = *((unsigned int *)v1322 + 126);
    if (!v1044)
    {
LABEL_2490:
      sub_1CC830248((uint64_t *)v1400, (uint64_t)&v1412, (uint64_t *)&v1434, (uint64_t *)&__p, &v1325);
      sub_1CC82DDB4((uint64_t **)&v1442, *(uint64_t *)v1400, (uint64_t)&__p, (uint64_t)&v1434);
      __n128 v1100 = v1443;
      v1101 = v1316;
      __n128 *v1316 = (__n128)v1442;
      v1101[1] = v1100;
      v1102 = v1444;
      if (v1444 == v1446)
      {
        int v1103 = v1445;
        uint64_t v1104 = DWORD2(v1428);
        if (DWORD2(v1428) >= v1445)
        {
          if (v1445) {
            memmove((void *)v1428, v1444, 8 * v1445);
          }
        }
        else
        {
          if (HIDWORD(v1428) < v1445)
          {
            DWORD2(v1428) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (DWORD2(v1428)) {
            memmove((void *)v1428, v1444, 8 * DWORD2(v1428));
          }
          else {
            uint64_t v1104 = 0;
          }
          if (v1104 != v1445) {
            memcpy((void *)(v1428 + 8 * v1104), (char *)v1444 + 8 * v1104, 8 * v1445 - 8 * v1104);
          }
        }
        DWORD2(v1428) = v1103;
      }
      else
      {
        if ((llvm::SmallPtrSetImplBase *)v1428 != v1321)
        {
          free((void *)v1428);
          v1102 = v1444;
        }
        *(void *)&long long v1428 = v1102;
        *((void *)&v1428 + 1) = v1445;
        v1444 = v1446;
        HIDWORD(v1445) = 0;
      }
      LODWORD(v1445) = 0;
      v1105 = v1447;
      if (v1447 == v1449)
      {
        int v1106 = v1448;
        uint64_t v1107 = v1431;
        if (v1431 >= v1448)
        {
          if (v1448) {
            memmove(v1430, v1447, 8 * v1448);
          }
        }
        else
        {
          if (HIDWORD(v1431) < v1448)
          {
            LODWORD(v1431) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v1431) {
            memmove(v1430, v1447, 8 * v1431);
          }
          else {
            uint64_t v1107 = 0;
          }
          if (v1107 != v1448) {
            memcpy((char *)v1430 + 8 * v1107, (char *)v1447 + 8 * v1107, 8 * v1448 - 8 * v1107);
          }
        }
        LODWORD(v1431) = v1106;
      }
      else
      {
        if (v1430 != v1320)
        {
          free(v1430);
          v1105 = v1447;
        }
        v1430 = v1105;
        uint64_t v1431 = v1448;
        v1447 = v1449;
        HIDWORD(v1448) = 0;
      }
      LODWORD(v1448) = 0;
      if (v1447 != v1449) {
        free(v1447);
      }
      v1099 = v1318;
      v1098 = p_dst;
      if (v1444 != v1446) {
        free(v1444);
      }
      int v1097 = 1;
      HIBYTE(v1433) = 1;
      LOBYTE(v1433) = 2 * (v1426.n128_u64[1] == *((void *)&v1427 + 1));
      if (v1426.n128_u64[1] == *((void *)&v1427 + 1))
      {
        if (WORD4(v1425) >= 4u && *(void *)(*(void *)v1400 + 264))
        {
          HIBYTE(v1433) = 17;
          char v1108 = 25;
        }
        else
        {
          char v1108 = 9;
        }
        if ((v1323 & 1) == 0) {
          HIBYTE(v1433) = v1108;
        }
      }
      goto LABEL_2517;
    }
    int v1045 = 0;
    v1046 = (uint64_t *)v1322[62];
    v1047 = &v1046[v1044];
    int v1048 = HIDWORD(v1335) - v1336;
    while (1)
    {
      if (v1045 == v1048) {
        goto LABEL_2490;
      }
      uint64_t v1049 = *v1046;
      if (v1334 == __p) {
        v1050 = (uint64_t *)((char *)&v1335 + 4);
      }
      else {
        v1050 = &v1335;
      }
      uint64_t v1051 = *(unsigned int *)v1050;
      if (v1051)
      {
        uint64_t v1052 = 8 * v1051;
        v1053 = v1334;
        while (*(void *)v1053 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v1053 += 8;
          v1052 -= 8;
          if (!v1052) {
            goto LABEL_2409;
          }
        }
      }
      else
      {
        v1053 = v1334;
      }
      v1054 = &v1334[8 * v1051];
      if (v1053 != v1054)
      {
        if (*(void *)v1053 == v1049)
        {
LABEL_2408:
          ++v1045;
          goto LABEL_2468;
        }
        v1055 = (unint64_t *)(v1053 + 8);
        while (v1055 != (unint64_t *)v1054)
        {
          unint64_t v1057 = *v1055++;
          unint64_t v1056 = v1057;
          if (v1057 <= 0xFFFFFFFFFFFFFFFDLL && v1056 == v1049) {
            goto LABEL_2408;
          }
        }
      }
LABEL_2409:
      uint64_t v1059 = *(unsigned __int8 *)(v1049 + 16) - 33;
      if (v1059 <= 0x37)
      {
        if (((1 << (*(unsigned char *)(v1049 + 16) - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v1060 = *(void *)(v1049 + 64);
          if (!v1060 || (*(unsigned char *)(v1060 + 17) & 0x30) == 0)
          {
            int v1061 = *(_DWORD *)(v1049 + 20);
            if (v1061 < 0)
            {
              uint64_t v1089 = v1049 - 32 * (v1061 & 0x7FFFFFF);
              uint64_t v1092 = *(void *)(v1089 - 8);
              uint64_t v1090 = v1089 - 8;
              uint64_t v1091 = v1092;
              if (v1092)
              {
                uint64_t v1093 = -v1091;
                while (1)
                {
                  unsigned int v1094 = *(_DWORD *)(*(void *)(v1090 + v1093) + 8);
                  BOOL v814 = v1094 > 7;
                  int v1095 = (1 << v1094) & 0x83;
                  if (v814 || v1095 == 0) {
                    break;
                  }
                  v1093 += 16;
                  if (!v1093) {
                    goto LABEL_2417;
                  }
                }
LABEL_2421:
                uint64_t v1063 = *(void *)(*(void *)&v1400[8] + 16);
                uint64_t v1062 = *(void *)(*(void *)&v1400[8] + 24);
                if (v1062 == v1063)
                {
                  uint64_t v1064 = *(unsigned int *)(*(void *)&v1400[8] + 36);
                  v1065 = (void *)(v1062 + 8 * v1064);
                  if (v1064)
                  {
                    uint64_t v1066 = 0;
                    uint64_t v1067 = 8 * v1064;
                    while (*(void *)(v1062 + v1066) != v1049)
                    {
                      v1066 += 8;
                      if (v1067 == v1066) {
                        goto LABEL_2439;
                      }
                    }
                    v1065 = (void *)(v1062 + v1066);
                  }
LABEL_2439:
                  uint64_t v1063 = *(void *)(*(void *)&v1400[8] + 24);
                }
                else
                {
                  uint64_t v1068 = *(unsigned int *)(*(void *)&v1400[8] + 32);
                  int v1069 = v1068 - 1;
                  unsigned int v1070 = (v1068 - 1) & ((v1049 >> 4) ^ (v1049 >> 9));
                  v1065 = (void *)(v1062 + 8 * v1070);
                  uint64_t v1071 = *v1065;
                  if (*v1065 == -1)
                  {
                    v1072 = 0;
LABEL_2477:
                    if (v1072) {
                      v1065 = v1072;
                    }
                    if (*v1065 != v1049) {
                      v1065 = (void *)(v1062 + 8 * v1068);
                    }
                  }
                  else
                  {
                    v1072 = 0;
                    int v1073 = 1;
                    while (v1071 != v1049)
                    {
                      if (v1072) {
                        BOOL v1074 = 0;
                      }
                      else {
                        BOOL v1074 = v1071 == -2;
                      }
                      if (v1074) {
                        v1072 = v1065;
                      }
                      unsigned int v1075 = v1070 + v1073++;
                      unsigned int v1070 = v1075 & v1069;
                      v1065 = (void *)(v1062 + 8 * (v1075 & v1069));
                      uint64_t v1071 = *v1065;
                      if (*v1065 == -1) {
                        goto LABEL_2477;
                      }
                    }
                  }
                }
                BOOL v64 = v1062 == v1063;
                uint64_t v1076 = 32;
                if (v64) {
                  uint64_t v1076 = 36;
                }
                if (v1065 == (void *)(v1062 + 8 * *(unsigned int *)(*(void *)&v1400[8] + v1076))) {
                  goto LABEL_2489;
                }
                goto LABEL_2443;
              }
            }
LABEL_2417:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(*v1046, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v1049, 44) & 1) == 0)
            {
              goto LABEL_2421;
            }
          }
        }
        else if (v1059 == 27)
        {
          if ((*(_WORD *)(v1049 + 18) & 0x301) != 0) {
            goto LABEL_2421;
          }
        }
        else if (((1 << (*(unsigned char *)(v1049 + 16) - 33)) & 0x808001D0000010) != 0)
        {
          goto LABEL_2421;
        }
      }
LABEL_2443:
      unint64_t v1077 = v1434.n128_u64[0];
      if (v1434.n128_u64[1] == v1434.n128_u64[0])
      {
        unsigned int v1078 = DWORD1(v1435);
        v1079 = (void *)(v1434.n128_u64[1] + 8 * DWORD1(v1435));
        if (DWORD1(v1435))
        {
          uint64_t v1080 = 0;
          while (*(void *)(v1434.n128_u64[1] + v1080) != v1049)
          {
            v1080 += 8;
            if (8 * DWORD1(v1435) == v1080) {
              goto LABEL_2462;
            }
          }
          v1079 = (void *)(v1434.n128_u64[1] + v1080);
        }
LABEL_2462:
        unint64_t v1077 = v1434.n128_u64[1];
      }
      else
      {
        int v1081 = v1435 - 1;
        unsigned int v1082 = (v1435 - 1) & ((v1049 >> 4) ^ (v1049 >> 9));
        v1079 = (void *)(v1434.n128_u64[1] + 8 * v1082);
        uint64_t v1083 = *v1079;
        if (*v1079 == -1)
        {
          v1084 = 0;
LABEL_2471:
          if (v1084) {
            v1079 = v1084;
          }
          unsigned int v1078 = DWORD1(v1435);
          if (*v1079 != v1049) {
            v1079 = (void *)(v1434.n128_u64[1] + 8 * v1435);
          }
        }
        else
        {
          v1084 = 0;
          int v1085 = 1;
          while (v1083 != v1049)
          {
            if (v1084) {
              BOOL v1086 = 0;
            }
            else {
              BOOL v1086 = v1083 == -2;
            }
            if (v1086) {
              v1084 = v1079;
            }
            unsigned int v1087 = v1082 + v1085++;
            unsigned int v1082 = v1087 & v1081;
            v1079 = (void *)(v1434.n128_u64[1] + 8 * (v1087 & v1081));
            uint64_t v1083 = *v1079;
            if (*v1079 == -1) {
              goto LABEL_2471;
            }
          }
          unsigned int v1078 = DWORD1(v1435);
        }
      }
      if (v1434.n128_u64[1] == v1077) {
        unsigned int v1088 = v1078;
      }
      else {
        unsigned int v1088 = v1435;
      }
      if (v1079 == (void *)(v1434.n128_u64[1] + 8 * v1088)
        && sub_1CC82EC98(*(void *)(*(void *)v1400 + 312), *(_DWORD *)(*(void *)v1400 + 328), v1049))
      {
        goto LABEL_2489;
      }
LABEL_2468:
      if (++v1046 == v1047) {
        goto LABEL_2490;
      }
    }
  }
  while (1)
  {
    uint64_t v1006 = *(void *)v1004;
    v1007 = (char *)__p;
    if (v1334 == __p)
    {
      int v1008 = HIDWORD(v1335);
      v1009 = &v1334[8 * HIDWORD(v1335)];
      if (HIDWORD(v1335))
      {
        uint64_t v1010 = 0;
        while (*(void *)&v1334[v1010] != v1006)
        {
          v1010 += 8;
          if (8 * HIDWORD(v1335) == v1010) {
            goto LABEL_2319;
          }
        }
        v1009 = &v1334[v1010];
      }
LABEL_2319:
      v1007 = v1334;
    }
    else
    {
      int v1011 = v1335 - 1;
      unsigned int v1012 = (v1335 - 1) & ((v1006 >> 4) ^ (v1006 >> 9));
      v1009 = &v1334[8 * v1012];
      uint64_t v1013 = *(void *)v1009;
      if (*(void *)v1009 == -1)
      {
        v1014 = 0;
LABEL_2382:
        if (v1014) {
          v1009 = v1014;
        }
        int v1008 = HIDWORD(v1335);
        if (*(void *)v1009 != v1006) {
          v1009 = &v1334[8 * v1335];
        }
      }
      else
      {
        v1014 = 0;
        int v1015 = 1;
        while (v1013 != v1006)
        {
          if (v1014) {
            BOOL v1016 = 0;
          }
          else {
            BOOL v1016 = v1013 == -2;
          }
          if (v1016) {
            v1014 = v1009;
          }
          unsigned int v1017 = v1012 + v1015++;
          unsigned int v1012 = v1017 & v1011;
          v1009 = &v1334[8 * (v1017 & v1011)];
          uint64_t v1013 = *(void *)v1009;
          if (*(void *)v1009 == -1) {
            goto LABEL_2382;
          }
        }
        int v1008 = HIDWORD(v1335);
      }
    }
    int v1018 = v1335;
    if (v1334 == v1007) {
      int v1018 = v1008;
    }
    if (v1009 == &v1334[8 * v1018])
    {
      uint64_t v1020 = *((unsigned int *)v1004 + 10);
      if (v1020) {
        break;
      }
    }
LABEL_2323:
    v1019 = v1004 + 64;
    v1004 = v1002;
    if (v1019 != v1002)
    {
      v1004 = v1019;
      while ((*(void *)v1004 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1004 += 64;
        if (v1004 == v1002)
        {
          v1004 = v1002;
          break;
        }
      }
    }
    if (v1004 == v1005) {
      goto LABEL_2387;
    }
  }
  v1021 = (uint64_t *)*((void *)v1004 + 4);
  v1022 = &v1021[v1020];
  while (1)
  {
    uint64_t v1023 = *v1021;
    v1024 = v1334 == __p ? (uint64_t *)((char *)&v1335 + 4) : &v1335;
    uint64_t v1025 = *(unsigned int *)v1024;
    if (v1025)
    {
      uint64_t v1026 = 8 * v1025;
      v1027 = (unint64_t *)v1334;
      while (*v1027 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v1027;
        v1026 -= 8;
        if (!v1026) {
          goto LABEL_2349;
        }
      }
    }
    else
    {
      v1027 = (unint64_t *)v1334;
    }
    v1028 = &v1334[8 * v1025];
    if (v1027 != (unint64_t *)v1028)
    {
      unint64_t v1029 = *v1027;
LABEL_2343:
      if (*(void *)(v1029 + 40) != *(void *)(v1023 + 40)) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      v1030 = v1027 + 1;
      while (v1030 != (unint64_t *)v1028)
      {
        unint64_t v1031 = *v1030++;
        unint64_t v1029 = v1031;
        if (v1031 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v1027 = v1030 - 1;
          goto LABEL_2343;
        }
      }
    }
LABEL_2349:
    unint64_t v1032 = v1434.n128_u64[0];
    if (v1434.n128_u64[1] == v1434.n128_u64[0])
    {
      int v1033 = DWORD1(v1435);
      v1034 = (void *)(v1434.n128_u64[1] + 8 * DWORD1(v1435));
      if (DWORD1(v1435))
      {
        uint64_t v1035 = 0;
        while (*(void *)(v1434.n128_u64[1] + v1035) != v1023)
        {
          v1035 += 8;
          if (8 * DWORD1(v1435) == v1035) {
            goto LABEL_2368;
          }
        }
        v1034 = (void *)(v1434.n128_u64[1] + v1035);
      }
LABEL_2368:
      unint64_t v1032 = v1434.n128_u64[1];
    }
    else
    {
      int v1036 = v1435 - 1;
      unsigned int v1037 = (v1435 - 1) & ((v1023 >> 4) ^ (v1023 >> 9));
      v1034 = (void *)(v1434.n128_u64[1] + 8 * v1037);
      uint64_t v1038 = *v1034;
      if (*v1034 == -1)
      {
        v1039 = 0;
LABEL_2376:
        if (v1039) {
          v1034 = v1039;
        }
        int v1033 = DWORD1(v1435);
        if (*v1034 != v1023) {
          v1034 = (void *)(v1434.n128_u64[1] + 8 * v1435);
        }
      }
      else
      {
        v1039 = 0;
        int v1040 = 1;
        while (v1038 != v1023)
        {
          if (v1039) {
            BOOL v1041 = 0;
          }
          else {
            BOOL v1041 = v1038 == -2;
          }
          if (v1041) {
            v1039 = v1034;
          }
          unsigned int v1042 = v1037 + v1040++;
          unsigned int v1037 = v1042 & v1036;
          v1034 = (void *)(v1434.n128_u64[1] + 8 * (v1042 & v1036));
          uint64_t v1038 = *v1034;
          if (*v1034 == -1) {
            goto LABEL_2376;
          }
        }
        int v1033 = DWORD1(v1435);
      }
    }
    unsigned int v1043 = v1434.n128_u64[1] == v1032 ? v1033 : v1435;
    if (v1034 != (void *)(v1434.n128_u64[1] + 8 * v1043)) {
      break;
    }
    if (++v1021 == v1022) {
      goto LABEL_2323;
    }
  }
LABEL_2489:
  int v1097 = 0;
  v1099 = v1318;
  v1098 = p_dst;
LABEL_2517:
  if (v1434.n128_u64[1] != v1434.n128_u64[0]) {
    free((void *)v1434.n128_u64[1]);
  }
  if (v1097)
  {
    if (p_TTI)
    {
      v1109 = (char *)v1412;
      v1110 = (char *)v1412 + 8 * p_TTI;
      int v1111 = v1331;
      do
      {
        uint64_t v1112 = *(void *)v1109;
        v1113 = v1328;
        if (v1329 == v1328)
        {
          int v1114 = HIDWORD(v1330);
          v1115 = &v1329[8 * HIDWORD(v1330)];
          if (HIDWORD(v1330))
          {
            uint64_t v1116 = 0;
            while (*(void *)&v1329[v1116] != v1112)
            {
              v1116 += 8;
              if (8 * HIDWORD(v1330) == v1116) {
                goto LABEL_2541;
              }
            }
            v1115 = &v1329[v1116];
          }
LABEL_2541:
          v1113 = v1329;
        }
        else
        {
          int v1117 = v1330 - 1;
          unsigned int v1118 = (v1330 - 1) & ((v1112 >> 4) ^ (v1112 >> 9));
          v1115 = &v1329[8 * v1118];
          uint64_t v1119 = *(void *)v1115;
          if (*(void *)v1115 == -1)
          {
            v1120 = 0;
LABEL_2549:
            if (v1120) {
              v1115 = v1120;
            }
            int v1114 = HIDWORD(v1330);
            if (*(void *)v1115 != v1112) {
              v1115 = &v1329[8 * v1330];
            }
          }
          else
          {
            v1120 = 0;
            int v1121 = 1;
            while (v1119 != v1112)
            {
              if (v1120) {
                BOOL v1122 = 0;
              }
              else {
                BOOL v1122 = v1119 == -2;
              }
              if (v1122) {
                v1120 = v1115;
              }
              unsigned int v1123 = v1118 + v1121++;
              unsigned int v1118 = v1123 & v1117;
              v1115 = &v1329[8 * (v1123 & v1117)];
              uint64_t v1119 = *(void *)v1115;
              if (*(void *)v1115 == -1) {
                goto LABEL_2549;
              }
            }
            int v1114 = HIDWORD(v1330);
          }
        }
        int v1124 = v1330;
        if (v1329 == v1113) {
          int v1124 = v1114;
        }
        if (v1115 != &v1329[8 * v1124])
        {
          *(void *)v1115 = -2;
          int v1331 = ++v1111;
        }
        v1109 += 8;
      }
      while (v1109 != v1110);
    }
    sub_1CC82FD50(v1310, (unint64_t)&v1412);
  }
  if (v1430 != v1320) {
    free(v1430);
  }
  if ((llvm::SmallPtrSetImplBase *)v1428 != v1321) {
    free((void *)v1428);
  }
  uint64_t v1125 = v1425;
  if ((v1425 & 1) == 0 && (void)v1425)
  {
    if (*(void *)v1425 != (void)v1425 + 16) {
      free(*(void **)v1425);
    }
    MEMORY[0x1D25D9CE0](v1125, 0x1080C40EF38A13ELL);
  }
  if (*((uint64_t **)&v1422 + 1) != v1317) {
    free(*((void **)&v1422 + 1));
  }
  if ((void)v1418 != *((void *)&v1417 + 1)) {
    free((void *)v1418);
  }
  if (*((void ***)&v1415 + 1) != v1099) {
    free(*((void **)&v1415 + 1));
  }
  if (v1412 != v1098) {
    free(v1412);
  }
LABEL_2568:
  v1126 = (llvm::SmallPtrSetImplBase *)&v1414;
  v1412 = &v1414;
  p_TTI = (void *)0x200000000;
  v1127 = (void **)&v1416 + 1;
  *((void *)&v1415 + 1) = (char *)&v1416 + 8;
  *(void *)&long long v1416 = 0x200000000;
  *((void *)&v1417 + 1) = &v1420;
  *(void *)&long long v1418 = &v1420;
  *((void *)&v1418 + 1) = 4;
  LODWORD(v1419) = 0;
  v1128 = (llvm::SmallPtrSetImplBase *)&v1423[1];
  *((void *)&v1422 + 1) = &v1423[1];
  v1423[0] = 0xA00000000;
  BYTE8(v1424) = 1;
  *(void *)&long long v1425 = 1;
  WORD4(v1425) = 0;
  BYTE10(v1425) = 0;
  v1129 = (void **)v1429;
  long long v1427 = 0u;
  __n128 v1426 = 0u;
  *(void *)&long long v1428 = v1429;
  *((void *)&v1428 + 1) = 0x800000000;
  v1430 = v1432;
  uint64_t v1431 = 0x800000000;
  if (HIDWORD(v1330) != v1331)
  {
    v1323 = (llvm::SmallPtrSetImplBase *)&v1414;
    v1324 = (long long *)v1432;
    v1321 = (llvm::SmallPtrSetImplBase *)&v1423[1];
    v1322 = (void **)&v1416 + 1;
    uint64_t v1130 = *(void *)v1400;
    __int16 v1433 = 0;
    v1450 = v1454;
    v1451 = v1454;
    uint64_t v1452 = 16;
    int v1453 = 0;
    v1320 = (void **)&v1443;
    *(void *)&long long v1442 = &v1443;
    *((void *)&v1442 + 1) = 0x800000000;
    v1338 = v1342;
    v1339 = v1342;
    uint64_t v1340 = 8;
    if (v1329 == v1328) {
      uint64_t v1131 = HIDWORD(v1330);
    }
    else {
      uint64_t v1131 = v1330;
    }
    int v1341 = 0;
    if (v1131)
    {
      uint64_t v1132 = 8 * v1131;
      v1133 = (uint64_t *)v1329;
      while ((unint64_t)*v1133 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v1133;
        v1132 -= 8;
        if (!v1132) {
          goto LABEL_2689;
        }
      }
    }
    else
    {
      v1133 = (uint64_t *)v1329;
    }
    v1134 = &v1329[8 * v1131];
    if (v1133 == (uint64_t *)v1134) {
      goto LABEL_2689;
    }
    uint64_t v1135 = *v1133;
    v1318 = (void **)v1429;
LABEL_2580:
    v1434.n128_u64[0] = 0;
    if (sub_1CC82F050(*(void *)(v1130 + 288), *(_DWORD *)(v1130 + 304), v1135, &v1434)) {
      unint64_t v1136 = v1434.n128_u64[0];
    }
    else {
      unint64_t v1136 = *(void *)(v1130 + 288) + ((unint64_t)*(unsigned int *)(v1130 + 304) << 6);
    }
    __int16 v1137 = WORD4(v1425);
    if (WORD4(v1425) <= *(unsigned __int16 *)(v1136 + 24)) {
      __int16 v1137 = *(_WORD *)(v1136 + 24);
    }
    char v1138 = *(unsigned char *)(v1136 + 26);
    WORD4(v1425) = v1137;
    BYTE10(v1425) |= v1138;
    if (*(unsigned char *)(v1135 + 16) == 84)
    {
      uint64_t v1139 = *(void *)(v1135 - 32);
      if (v1139)
      {
        if (!*(unsigned char *)(v1139 + 16)
          && *(void *)(v1139 + 24) == *(void *)(v1135 + 72)
          && (*(unsigned char *)(v1139 + 33) & 0x20) != 0)
        {
          int v1140 = *(_DWORD *)(v1139 + 36);
          if ((v1140 - 2471) < 8 || (v1140 - 2703) < 2 || (v1140 - 1996) <= 1)
          {
            __n128 v1434 = 0uLL;
            *(void *)&long long v1435 = 0;
            sub_1CC8310A4((uint64_t)&v1434, v1135);
            sub_1CBC0D590((uint64_t)&v1442, &v1434);
          }
        }
      }
    }
    uint64_t v1141 = *(unsigned int *)(v1136 + 40);
    if (!v1141) {
      goto LABEL_2684;
    }
    v1142 = *(uint64_t **)(v1136 + 32);
    v1143 = &v1142[v1141];
    while (2)
    {
      uint64_t v1144 = *v1142;
      v1145 = (char *)v1339;
      uint64_t v1146 = HIDWORD(v1340);
      if (v1339 == v1338)
      {
        if (HIDWORD(v1340))
        {
          v1147 = 0;
          uint64_t v1148 = 8 * HIDWORD(v1340);
          v1149 = (uint64_t *)v1339;
          while (*v1149 != v1144)
          {
            if (*v1149 == -2) {
              v1147 = v1149;
            }
            ++v1149;
            v1148 -= 8;
            if (!v1148)
            {
              if (!v1147) {
                goto LABEL_2603;
              }
              uint64_t *v1147 = v1144;
              --v1341;
              goto LABEL_2627;
            }
          }
          goto LABEL_2634;
        }
LABEL_2603:
        unsigned int v1150 = v1340;
        if (HIDWORD(v1340) < v1340)
        {
          ++HIDWORD(v1340);
          *((void *)v1339 + v1146) = v1144;
          goto LABEL_2627;
        }
      }
      else
      {
        unsigned int v1150 = v1340;
      }
      if (3 * v1150 <= 4 * (HIDWORD(v1340) - v1341))
      {
        if (v1150 >= 0x40) {
          v1150 *= 2;
        }
        else {
          unsigned int v1150 = 128;
        }
      }
      else if (v1150 - HIDWORD(v1340) >= v1150 >> 3)
      {
        goto LABEL_2608;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1338, v1150);
      unsigned int v1150 = v1340;
      v1145 = (char *)v1339;
LABEL_2608:
      unsigned int v1151 = v1150 - 1;
      unsigned int v1152 = (v1150 - 1) & ((v1144 >> 4) ^ (v1144 >> 9));
      v1153 = &v1145[8 * v1152];
      uint64_t v1154 = *(void *)v1153;
      if (*(void *)v1153 != -1)
      {
        v1155 = 0;
        int v1156 = 1;
        while (v1154 != v1144)
        {
          if (v1155) {
            BOOL v1157 = 0;
          }
          else {
            BOOL v1157 = v1154 == -2;
          }
          if (v1157) {
            v1155 = (uint64_t *)v1153;
          }
          unsigned int v1158 = v1152 + v1156++;
          unsigned int v1152 = v1158 & v1151;
          v1153 = &v1145[8 * (v1158 & v1151)];
          uint64_t v1154 = *(void *)v1153;
          if (*(void *)v1153 == -1) {
            goto LABEL_2620;
          }
        }
        goto LABEL_2634;
      }
      v1155 = 0;
LABEL_2620:
      if (v1155) {
        v1159 = v1155;
      }
      else {
        v1159 = (uint64_t *)v1153;
      }
      if (*v1159 != v1144)
      {
        if (*v1159 == -2) {
          --v1341;
        }
        else {
          ++HIDWORD(v1340);
        }
        uint64_t *v1159 = v1144;
LABEL_2627:
        if (*(unsigned char *)(v1144 + 16) == 84)
        {
          uint64_t v1160 = *(void *)(v1144 - 32);
          if (v1160)
          {
            if (!*(unsigned char *)(v1160 + 16)
              && *(void *)(v1160 + 24) == *(void *)(v1144 + 72)
              && (*(unsigned char *)(v1160 + 33) & 0x20) != 0
              && (sub_1CD0FF1D0(*(_DWORD *)(v1160 + 36)) & 1) != 0)
            {
              __n128 v1434 = 0uLL;
              *(void *)&long long v1435 = 0;
              sub_1CC8310A4((uint64_t)&v1434, v1144);
              sub_1CBC0D590((uint64_t)&v1442, &v1434);
            }
          }
        }
      }
LABEL_2634:
      if (++v1142 != v1143) {
        continue;
      }
      break;
    }
    uint64_t v1161 = *(unsigned int *)(v1136 + 40);
    if (v1161)
    {
      v1162 = *(uint64_t **)(v1136 + 32);
      v1163 = &v1162[v1161];
      v1164 = v1451;
      while (1)
      {
        uint64_t v1165 = *v1162;
        uint64_t v1166 = HIDWORD(v1452);
        if (v1164 != v1450) {
          break;
        }
        if (HIDWORD(v1452))
        {
          v1167 = 0;
          uint64_t v1168 = 8 * HIDWORD(v1452);
          v1169 = v1164;
          while (*v1169 != v1165)
          {
            if (*v1169 == -2) {
              v1167 = v1169;
            }
            ++v1169;
            v1168 -= 8;
            if (!v1168)
            {
              if (!v1167) {
                goto LABEL_2652;
              }
              void *v1167 = v1165;
              --v1453;
              goto LABEL_2676;
            }
          }
          goto LABEL_2676;
        }
LABEL_2652:
        unsigned int v1170 = v1452;
        if (HIDWORD(v1452) >= v1452) {
          goto LABEL_2655;
        }
        ++HIDWORD(v1452);
        v1164[v1166] = v1165;
LABEL_2676:
        v1164 = v1451;
        if (++v1162 == v1163) {
          goto LABEL_2684;
        }
      }
      unsigned int v1170 = v1452;
LABEL_2655:
      if (3 * v1170 <= 4 * (HIDWORD(v1452) - v1453))
      {
        if (v1170 >= 0x40) {
          v1170 *= 2;
        }
        else {
          unsigned int v1170 = 128;
        }
      }
      else if (v1170 - HIDWORD(v1452) >= v1170 >> 3)
      {
        goto LABEL_2657;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1450, v1170);
      unsigned int v1170 = v1452;
      v1164 = v1451;
LABEL_2657:
      unsigned int v1171 = v1170 - 1;
      unsigned int v1172 = (v1170 - 1) & ((v1165 >> 4) ^ (v1165 >> 9));
      v1173 = &v1164[v1172];
      uint64_t v1174 = *v1173;
      if (*v1173 == -1)
      {
        v1175 = 0;
LABEL_2669:
        if (v1175) {
          v1179 = v1175;
        }
        else {
          v1179 = v1173;
        }
        if (*v1179 != v1165)
        {
          if (*v1179 == -2) {
            --v1453;
          }
          else {
            ++HIDWORD(v1452);
          }
          void *v1179 = v1165;
        }
      }
      else
      {
        v1175 = 0;
        int v1176 = 1;
        while (v1174 != v1165)
        {
          if (v1175) {
            BOOL v1177 = 0;
          }
          else {
            BOOL v1177 = v1174 == -2;
          }
          if (v1177) {
            v1175 = v1173;
          }
          unsigned int v1178 = v1172 + v1176++;
          unsigned int v1172 = v1178 & v1171;
          v1173 = &v1164[v1178 & v1171];
          uint64_t v1174 = *v1173;
          if (*v1173 == -1) {
            goto LABEL_2669;
          }
        }
      }
      goto LABEL_2676;
    }
LABEL_2684:
    v1180 = (unint64_t *)(v1133 + 1);
    v1129 = v1318;
    while (v1180 != (unint64_t *)v1134)
    {
      unint64_t v1181 = *v1180++;
      uint64_t v1135 = v1181;
      if (v1181 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v1133 = (uint64_t *)(v1180 - 1);
        goto LABEL_2580;
      }
    }
LABEL_2689:
    sub_1CC830248((uint64_t *)v1400, (uint64_t)&v1412, (uint64_t *)&v1450, (uint64_t *)&v1328, &v1325);
    sub_1CC82DDB4((uint64_t **)&v1434, *(uint64_t *)v1400, (uint64_t)&v1328, (uint64_t)&v1450);
    __n128 v1426 = v1434;
    long long v1427 = v1435;
    v1182 = v1436;
    if (v1436 == v1438)
    {
      int v1183 = v1437;
      uint64_t v1184 = DWORD2(v1428);
      if (DWORD2(v1428) >= v1437)
      {
        v1185 = v1324;
        if (v1437) {
          memmove((void *)v1428, v1436, 8 * v1437);
        }
      }
      else
      {
        v1185 = v1324;
        if (HIDWORD(v1428) < v1437)
        {
          DWORD2(v1428) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (DWORD2(v1428)) {
          memmove((void *)v1428, v1436, 8 * DWORD2(v1428));
        }
        else {
          uint64_t v1184 = 0;
        }
        if (v1184 != v1437) {
          memcpy((void *)(v1428 + 8 * v1184), (char *)v1436 + 8 * v1184, 8 * v1437 - 8 * v1184);
        }
      }
      DWORD2(v1428) = v1183;
    }
    else
    {
      if ((void **)v1428 != v1129)
      {
        free((void *)v1428);
        v1182 = v1436;
      }
      *(void *)&long long v1428 = v1182;
      *((void *)&v1428 + 1) = v1437;
      v1436 = v1438;
      HIDWORD(v1437) = 0;
      v1185 = v1324;
    }
    LODWORD(v1437) = 0;
    v1186 = v1439;
    if (v1439 == v1441)
    {
      int v1187 = v1440;
      uint64_t v1188 = v1431;
      if (v1431 >= v1440)
      {
        if (v1440) {
          memmove(v1430, v1439, 8 * v1440);
        }
      }
      else
      {
        if (HIDWORD(v1431) < v1440)
        {
          LODWORD(v1431) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v1431) {
          memmove(v1430, v1439, 8 * v1431);
        }
        else {
          uint64_t v1188 = 0;
        }
        if (v1188 != v1440) {
          memcpy((char *)v1430 + 8 * v1188, (char *)v1439 + 8 * v1188, 8 * v1440 - 8 * v1188);
        }
      }
      LODWORD(v1431) = v1187;
    }
    else
    {
      if (v1430 != v1185)
      {
        free(v1430);
        v1186 = v1439;
      }
      v1430 = v1186;
      uint64_t v1431 = v1440;
      v1439 = v1441;
      HIDWORD(v1440) = 0;
    }
    LODWORD(v1440) = 0;
    if (v1439 != v1441) {
      free(v1439);
    }
    if (v1436 != v1438) {
      free(v1436);
    }
    if (v1426.n128_u64[1] != *((void *)&v1427 + 1)) {
      goto LABEL_2855;
    }
    uint64_t v1189 = *(unsigned int *)(v1130 + 504);
    if (!v1189)
    {
      LOBYTE(v1191) = 1;
      goto LABEL_2817;
    }
    int v1190 = (int)p_TTI;
    int v1191 = 1;
    if (p_TTI)
    {
      v1318 = v1129;
      int v1192 = 0;
      int v1193 = 0;
      int v1194 = 0;
      v1195 = *(uint64_t **)(v1130 + 496);
      v1196 = &v1195[v1189];
      LODWORD(p_dst) = 1;
      while (1)
      {
        uint64_t v1197 = *v1195;
        v1192 |= v1426.n128_u64[0] == *v1195;
        if ((v1192 & 1) == 0) {
          goto LABEL_2795;
        }
        if (sub_1CC82F050(*(void *)(v1130 + 288), *(_DWORD *)(v1130 + 304), *v1195, &v1434))
        {
          if (*(unsigned char *)(v1197 + 16) != 84) {
            goto LABEL_2731;
          }
          uint64_t v1198 = *(void *)(v1197 - 32);
          if (!v1198
            || *(unsigned char *)(v1198 + 16)
            || *(void *)(v1198 + 24) != *(void *)(v1197 + 72)
            || (*(unsigned char *)(v1198 + 33) & 0x20) == 0)
          {
            goto LABEL_2731;
          }
          int v1199 = *(_DWORD *)(v1198 + 36);
          if ((v1199 - 2471) < 8 || (v1199 - 2703) < 2 || (v1199 - 1996) < 2) {
            goto LABEL_2732;
          }
          if (sub_1CC82F948(v1197))
          {
            LODWORD(p_dst) = 0;
          }
          else
          {
LABEL_2731:
            LODWORD(p_dst) = 0;
            int v1193 = 1;
          }
LABEL_2732:
          ++v1194;
          goto LABEL_2795;
        }
        if (v1194)
        {
          uint64_t v1200 = *(unsigned __int8 *)(v1197 + 16) - 33;
          if (v1200 > 0x37) {
            goto LABEL_2730;
          }
          if (((1 << (*(unsigned char *)(v1197 + 16) - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v1201 = *(void *)(v1197 + 64);
            if (v1201 && ((*(unsigned char *)(v1201 + 20) & 4) != 0 || (*(unsigned char *)(v1201 + 17) & 0x10) != 0))
            {
LABEL_2730:
              uint64_t v1197 = *v1195;
              goto LABEL_2761;
            }
            v1434.n128_u32[0] = 7;
            if (sub_1CC5CB59C(v1197, (__int32 *)&v1434, 1uLL))
            {
              uint64_t v1204 = *(void *)(v1197 - 32);
              if (!v1204
                || *(unsigned char *)(v1204 + 16)
                || *(void *)(v1204 + 24) != *(void *)(v1197 + 72)
                || *(_DWORD *)(v1204 + 36) != 7)
              {
LABEL_2746:
                uint64_t v1197 = *v1195;
LABEL_2747:
                int v1205 = *(unsigned __int8 *)(v1197 + 16);
                if (v1205 == 60)
                {
                  uint64_t v1207 = **(void **)(v1197 - 32);
                  if ((*(_DWORD *)(v1207 + 8) & 0xFE) == 0x12) {
                    unsigned int v1208 = *(_DWORD *)(**(void **)(v1207 + 16) + 8) & 0xFFFFFF00;
                  }
                  else {
                    unsigned int v1208 = *(_DWORD *)(v1207 + 8) & 0xFFFFFF00;
                  }
                  if (v1208 != 0x4000) {
                    int v1191 = (v1208 == 512) & v1191;
                  }
                }
                else if (v1205 == 84 {
                       && (uint64_t v1206 = *(void *)(v1197 - 32)) != 0
                }
                       && !*(unsigned char *)(v1206 + 16)
                       && *(void *)(v1206 + 24) == *(void *)(v1197 + 72)
                       && (*(unsigned char *)(v1206 + 33) & 0x20) != 0)
                {
                  LODWORD(v1317) = *(_DWORD *)(v1206 + 36);
                  if (!sub_1CB859A14((int)v1317)) {
                    v1191 &= sub_1CD0FF1D0((int)v1317);
                  }
                }
                else
                {
                  int v1191 = 0;
                }
                goto LABEL_2761;
              }
            }
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v1197, 66)) {
              goto LABEL_2730;
            }
            hasFnAttrOnCalledFunctiouint64_t n = llvm::CallBase::hasFnAttrOnCalledFunction(v1197, 44);
            uint64_t v1197 = *v1195;
            if ((hasFnAttrOnCalledFunction & 1) == 0) {
              goto LABEL_2747;
            }
          }
          else
          {
            if (((1 << (*(unsigned char *)(v1197 + 16) - 33)) & 0x808001C8000010) != 0) {
              goto LABEL_2746;
            }
            if (v1200 != 28) {
              goto LABEL_2730;
            }
            __int16 v1203 = *(_WORD *)(v1197 + 18);
            uint64_t v1197 = *v1195;
            if ((v1203 & 0x301) != 0) {
              goto LABEL_2747;
            }
          }
        }
LABEL_2761:
        uint64_t v1209 = *(unsigned __int8 *)(v1197 + 16) - 33;
        if (v1209 <= 0x37)
        {
          if (((1 << (*(unsigned char *)(v1197 + 16) - 33)) & 0x8000000000041) != 0)
          {
            uint64_t v1210 = *(void *)(v1197 + 64);
            if (!v1210 || (*(unsigned char *)(v1210 + 17) & 0x30) == 0)
            {
              int v1211 = *(_DWORD *)(v1197 + 20);
              if (v1211 < 0)
              {
                uint64_t v1228 = v1197 - 32 * (v1211 & 0x7FFFFFF);
                uint64_t v1231 = *(void *)(v1228 - 8);
                uint64_t v1229 = v1228 - 8;
                uint64_t v1230 = v1231;
                if (v1231)
                {
                  uint64_t v1232 = -v1230;
                  while (1)
                  {
                    unsigned int v1233 = *(_DWORD *)(*(void *)(v1229 + v1232) + 8);
                    BOOL v814 = v1233 > 7;
                    int v1234 = (1 << v1233) & 0x83;
                    if (v814 || v1234 == 0) {
                      break;
                    }
                    v1232 += 16;
                    if (!v1232) {
                      goto LABEL_2769;
                    }
                  }
LABEL_2773:
                  uint64_t v1212 = *v1195;
                  uint64_t v1214 = *(void *)(*(void *)&v1400[8] + 16);
                  uint64_t v1213 = *(void *)(*(void *)&v1400[8] + 24);
                  if (v1213 == v1214)
                  {
                    uint64_t v1215 = *(unsigned int *)(*(void *)&v1400[8] + 36);
                    v1216 = (void *)(v1213 + 8 * v1215);
                    if (v1215)
                    {
                      uint64_t v1217 = 0;
                      uint64_t v1218 = 8 * v1215;
                      while (*(void *)(v1213 + v1217) != v1212)
                      {
                        v1217 += 8;
                        if (v1218 == v1217) {
                          goto LABEL_2791;
                        }
                      }
                      v1216 = (void *)(v1213 + v1217);
                    }
LABEL_2791:
                    uint64_t v1214 = *(void *)(*(void *)&v1400[8] + 24);
                  }
                  else
                  {
                    uint64_t v1219 = *(unsigned int *)(*(void *)&v1400[8] + 32);
                    int v1220 = v1219 - 1;
                    unsigned int v1221 = (v1219 - 1) & ((v1212 >> 4) ^ (v1212 >> 9));
                    v1216 = (void *)(v1213 + 8 * v1221);
                    uint64_t v1222 = *v1216;
                    if (*v1216 == -1)
                    {
                      v1223 = 0;
LABEL_2799:
                      if (v1223) {
                        v1216 = v1223;
                      }
                      if (*v1216 != v1212) {
                        v1216 = (void *)(v1213 + 8 * v1219);
                      }
                    }
                    else
                    {
                      v1223 = 0;
                      int v1224 = 1;
                      while (v1222 != v1212)
                      {
                        if (v1223) {
                          BOOL v1225 = 0;
                        }
                        else {
                          BOOL v1225 = v1222 == -2;
                        }
                        if (v1225) {
                          v1223 = v1216;
                        }
                        unsigned int v1226 = v1221 + v1224++;
                        unsigned int v1221 = v1226 & v1220;
                        v1216 = (void *)(v1213 + 8 * (v1226 & v1220));
                        uint64_t v1222 = *v1216;
                        if (*v1216 == -1) {
                          goto LABEL_2799;
                        }
                      }
                    }
                  }
                  BOOL v64 = v1213 == v1214;
                  uint64_t v1227 = 32;
                  if (v64) {
                    uint64_t v1227 = 36;
                  }
                  v1193 |= v1216 == (void *)(v1213 + 8 * *(unsigned int *)(*(void *)&v1400[8] + v1227));
                  goto LABEL_2795;
                }
              }
LABEL_2769:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v1197, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v1197, 44) & 1) == 0)
              {
                goto LABEL_2773;
              }
            }
          }
          else if (v1209 == 27)
          {
            if ((*(_WORD *)(v1197 + 18) & 0x301) != 0) {
              goto LABEL_2773;
            }
          }
          else if (((1 << (*(unsigned char *)(v1197 + 16) - 33)) & 0x808001D0000010) != 0)
          {
            goto LABEL_2773;
          }
        }
LABEL_2795:
        if (++v1195 == v1196 || v1194 == v1190)
        {
          v1129 = v1318;
          v1185 = v1324;
          if (v1193 & 1 | ((p_dst & 1) == 0))
          {
            if ((v1193 & 1) == 0)
            {
              char v1236 = 1;
              goto LABEL_2815;
            }
            goto LABEL_2855;
          }
          break;
        }
      }
    }
LABEL_2817:
    LOBYTE(v1433) = 1;
    if (WORD4(v1425) >= 4u && *(void *)(*(void *)v1400 + 264))
    {
      if (!byte_1EBCDC788 && *(_DWORD *)(v1130 + 504) <= 0x30u)
      {
        if (v1191) {
          char v1237 = 32;
        }
        else {
          char v1237 = 16;
        }
LABEL_2851:
        HIBYTE(v1433) = v1237;
      }
LABEL_2854:
      WORD4(v1425) = 4;
      goto LABEL_2855;
    }
    if ((v1191 & 1) == 0)
    {
LABEL_2853:
      if (WORD4(v1425) <= 3u) {
        goto LABEL_2855;
      }
      goto LABEL_2854;
    }
    char v1238 = 4;
    char v1237 = 32;
    switch(v1400[16] & 0xF)
    {
      case 1:
        goto LABEL_2851;
      case 2:
        goto LABEL_2852;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_3013;
      case 4:
        char v1238 = 4;
        if (byte_1EBCDC788 || *(_DWORD *)(v1130 + 504) > 0x30u) {
          goto LABEL_2852;
        }
        if (WORD4(v1425) > 3u)
        {
          char v1237 = 32;
          goto LABEL_2851;
        }
        char v1236 = 64;
        break;
      case 8:
        if (WORD4(v1425) > 3u) {
          goto LABEL_2854;
        }
        if (*(_DWORD *)(v1130 + 504) < 0x31u && byte_1EBCDC788 == 0) {
          char v1236 = 68;
        }
        else {
          char v1236 = 4;
        }
        break;
      default:
        char v1238 = 2;
LABEL_2852:
        HIBYTE(v1433) = v1238;
        goto LABEL_2853;
    }
LABEL_2815:
    HIBYTE(v1433) = v1236;
LABEL_2855:
    if (DWORD2(v1442))
    {
      uint64_t v1239 = v1442 + 16;
      uint64_t v1240 = 24 * DWORD2(v1442);
      do
      {
        unsigned int v1241 = *(_DWORD *)(v1239 - 8);
        if (v1241 == -1)
        {
          BYTE8(v1424) = 0;
        }
        else
        {
          if (v1425) {
            unint64_t v1242 = (unint64_t)v1425 >> 58;
          }
          else {
            unint64_t v1242 = *(unsigned int *)(v1425 + 64);
          }
          unsigned int v1243 = *(_DWORD *)(v1239 - 4) + v1241;
          if (v1242 <= v1243) {
            sub_1CBA7B5AC((unint64_t *)&v1425, *(_DWORD *)(v1239 - 4) + v1241, 0);
          }
          sub_1CB9F9F38((unint64_t *)&v1425, v1241, v1243);
        }
        v1239 += 24;
        v1240 -= 24;
      }
      while (v1240);
    }
    if (v1339 != v1338) {
      free(v1339);
    }
    v1128 = v1321;
    v1127 = v1322;
    v1126 = v1323;
    if ((void **)v1442 != v1320) {
      free((void *)v1442);
    }
    if (v1451 != v1450) {
      free(v1451);
    }
    sub_1CC82FD50(v1310, (unint64_t)&v1412);
    if (v1430 != v1185) {
      free(v1430);
    }
  }
  if ((void **)v1428 != v1129) {
    free((void *)v1428);
  }
  uint64_t v1244 = v1425;
  int v133 = (int)v1313;
  if ((v1425 & 1) == 0 && (void)v1425)
  {
    if (*(void *)v1425 != (void)v1425 + 16) {
      free(*(void **)v1425);
    }
    MEMORY[0x1D25D9CE0](v1244, 0x1080C40EF38A13ELL);
  }
  if (*((llvm::SmallPtrSetImplBase **)&v1422 + 1) != v1128) {
    free(*((void **)&v1422 + 1));
  }
  if ((void)v1418 != *((void *)&v1417 + 1)) {
    free((void *)v1418);
  }
  if (*((void ***)&v1415 + 1) != v1127) {
    free(*((void **)&v1415 + 1));
  }
  if (v1412 != v1126) {
    free(v1412);
  }
  uint64_t v1245 = v1325;
  if (v1327)
  {
    v1246 = (void **)(v1325 + 16);
    uint64_t v1247 = 48 * v1327;
    do
    {
      if (((unint64_t)*(v1246 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v1246 != *(v1246 - 1)) {
        free(*v1246);
      }
      v1246 += 6;
      v1247 -= 48;
    }
    while (v1247);
  }
  MEMORY[0x1D25D9CD0](v1245, 8);
  if (v1329 != v1328) {
    free(v1329);
  }
  uint64_t v1248 = v1307;
  if (v1334 != __p) {
    free(v1334);
  }
  v1249 = *(_DWORD **)(v1307 + 40);
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(v1249, "multirate_transform", 0x13uLL);
  if (!*(_DWORD *)(*(void *)(inserted + 48) + 8))
  {
    uint64_t v1252 = inserted;
    uint64_t v1253 = *(void *)v1249;
    uint64_t v1254 = **(void **)v1249;
    v1255 = *(llvm::ConstantInt **)(v1254 + 1960);
    unint64_t v1256 = *(unsigned int *)(v1254 + 1968);
    LODWORD(p_TTI) = v1256 >> 8;
    if (v1256 >> 8 > 0x40) {
      operator new[]();
    }
    if (v1256 <= 0xFF) {
      LOBYTE(v1257) = 0;
    }
    else {
      unint64_t v1257 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1256) + 63);
    }
    v1412 = (void *)(v1257 & 1);
    v1259 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v1255, (llvm::LLVMContext *)&v1412, v1251);
    if (p_TTI >= 0x41 && v1412) {
      MEMORY[0x1D25D9CB0](v1412, 0x1000C8000313F17);
    }
    *(void *)&long long v1442 = llvm::ValueAsMetadata::get(v1259, v1258);
    Impl = llvm::MDTuple::getImpl(v1253, &v1442, 1, 0, 1);
    v1412 = Impl;
    uint64_t v1261 = *(void *)(v1252 + 48);
    uint64_t v1262 = *(unsigned int *)(v1261 + 8);
    if (v1262 >= *(_DWORD *)(v1261 + 12))
    {
      sub_1CC608328(v1261, (unsigned __int8 **)&v1412);
      uint64_t v1248 = v1307;
    }
    else
    {
      v1263 = (unsigned __int8 *)Impl;
      v1264 = (unsigned __int8 **)(*(void *)v1261 + 8 * v1262);
      *v1264 = v1263;
      uint64_t v1248 = v1307;
      if (v1263)
      {
        llvm::MetadataTracking::track((uint64_t)v1264, v1263, 2);
        LODWORD(v1262) = *(_DWORD *)(v1261 + 8);
      }
      *(_DWORD *)(v1261 + 8) = v1262 + 1;
    }
  }
  __int16 v1265 = *(_WORD *)(v1308 + 28);
  int v1266 = *(unsigned __int8 *)(v1308 + 97);
  BOOL v1267 = v1366 != 28 && v1266 == 0;
  v1412 = v1400;
  p_TTI = &TTI;
  uint64_t v1414 = (uint64_t)v1315;
  *(void *)&long long v1415 = v1249;
  *((void *)&v1415 + 1) = v1248;
  long long v1416 = (unint64_t)v1312;
  LOWORD(v1417) = v1265;
  if (v1267) {
    int v1268 = 4;
  }
  else {
    int v1268 = 8;
  }
  DWORD1(v1417) = v1268;
  BYTE8(v1417) = v1266;
  uint64_t v1269 = v1248;
  if (__src)
  {
    uint64_t v1270 = *(void *)&v1400[24];
    uint64_t v1271 = 448 * __src;
    do
    {
      if (*(unsigned __int16 *)(v1270 + 240) >= 4u) {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v1416 + 8))(v1416, 29, 1, 1, 0, 1, 2);
      }
      sub_1CC83123C(&v1412, v1270);
      v1270 += 448;
      v1271 -= 448;
    }
    while (v1271);
    uint64_t v1269 = *((void *)&v1415 + 1);
  }
  uint64_t v1272 = v1269 + 72;
  uint64_t v1273 = *(void *)(v1269 + 80);
  if (v1273 != v1269 + 72)
  {
    do
    {
      uint64_t v1274 = *(void *)(v1273 + 8);
      if (v1273) {
        v1275 = (llvm *)(v1273 - 24);
      }
      else {
        v1275 = 0;
      }
      llvm::MergeBlockIntoPredecessor(v1275, 0, 0, 0, 0, 0);
      uint64_t v1273 = v1274;
    }
    while (v1274 != v1272);
  }
  sub_1CC82D774(v1248);
  v1276 = *(uint64_t **)(v1308 + 8);
  uint64_t v1277 = *v1276;
  uint64_t v1278 = v1276[1];
  if (v1277 == v1278)
  {
LABEL_2925:
    uint64_t v1279 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v1277 != &llvm::LoopInfoWrapperPass::ID)
    {
      v1277 += 16;
      if (v1277 == v1278) {
        goto LABEL_2925;
      }
    }
    uint64_t v1279 = *(void *)(v1277 + 8);
  }
  v1280 = (uint64_t *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v1279 + 96))(v1279, &llvm::LoopInfoWrapperPass::ID)+ 32);
  if (*(unsigned char *)(v1308 + 96))
  {
    uint64_t v1281 = v1248;
    BOOL v1282 = 1;
    char v1283 = 1;
  }
  else
  {
    uint64_t v1284 = *(void *)(v1308 + 88);
    if (v1284) {
      BOOL v1282 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1284 + 48))(v1284, v1248) != 0;
    }
    else {
      BOOL v1282 = 0;
    }
    uint64_t v1281 = v1248;
    char v1283 = 0;
  }
  sub_1CD105760(v1281, 0, 1u, v1282, v1283, v1280);
  v1285 = *(llvm::SmallPtrSetImplBase **)&v1400[24];
  if (__src)
  {
    uint64_t v1286 = 0;
    uint64_t v1287 = 448 * __src;
    do
    {
      v1288 = (char *)v1285 + v1287;
      v1289 = *(char **)((char *)v1285 + v1287 - 88);
      if ((char *)v1285 + v1287 - 72 != v1289) {
        free(v1289);
      }
      v1290 = (char *)*((void *)v1288 - 21);
      if (v1288 - 152 != v1290) {
        free(v1290);
      }
      v1291 = (char *)v1285 + v1287;
      v1292 = *(void ***)((char *)v1285 + v1287 - 216);
      if ((v1292 & 1) == 0 && v1292)
      {
        if (*v1292 != v1292 + 2) {
          free(*v1292);
        }
        MEMORY[0x1D25D9CE0](v1292, 0x1080C40EF38A13ELL);
      }
      v1293 = (char *)*((void *)v1291 - 40);
      if (v1291 - 304 != v1293) {
        free(v1293);
      }
      v1294 = (char *)v1285 + v1287;
      v1295 = *(void **)((char *)v1285 + v1287 - 376);
      if (v1295 != *(void **)((char *)v1285 + v1287 - 384)) {
        free(v1295);
      }
      v1296 = (char *)*((void *)v1294 - 52);
      if (v1294 - 400 != v1296) {
        free(v1296);
      }
      v1297 = (char *)*((void *)v1288 - 56);
      if ((char *)v1285 + v1287 - 432 != v1297) {
        free(v1297);
      }
      v1285 = (llvm::SmallPtrSetImplBase *)((char *)v1285 - 448);
      v1286 += 448;
    }
    while (v1287 != v1286);
    v1285 = *(llvm::SmallPtrSetImplBase **)&v1400[24];
  }
  if (v1285 != v1311) {
    free(v1285);
  }
  if (v1349 != v1314) {
    free(v1349);
  }
  if (v1345 != (void *)v1344) {
    free(v1345);
  }
LABEL_2960:
  if (__b != v1392) {
    free(__b);
  }
  if (v1388 != v1387) {
    free(v1388);
  }
  if (v1383 != v1382) {
    free(v1383);
  }
  if (v1379 != v1306) {
    free(v1379);
  }
  if (v1375 != v1374) {
    free(v1375);
  }
  MEMORY[0x1D25D9CD0](v1371, 8);
  uint64_t v1298 = v1369;
  if (v1370)
  {
    unint64_t v1299 = (unint64_t)v1370 << 6;
    v1300 = (void *)(v1369 + 48);
    do
    {
      if ((*(v1300 - 6) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v1301 = (void *)*(v1300 - 2);
        if (v1300 != v1301) {
          free(v1301);
        }
      }
      v1300 += 8;
      v1299 -= 64;
    }
    while (v1299);
    uint64_t v1298 = v1369;
  }
  MEMORY[0x1D25D9CD0](v1298, 8);
  if (v1363 != v1304) {
    free(v1363);
  }
  if (__dst != v1305) {
    free(__dst);
  }
  return v133 != 0;
}

void sub_1CC82D774(uint64_t a1)
{
  v48[10] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t ***)(a1 + 40);
  int v3 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v3 == 102 || v3 == 106)
  {
    llvm::Intrinsic::getType(*v2, 2710, 0, 0);
    Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v2, 2710, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v2, "llvm.agx2.vertex.amp.id.count.i32", (const char *)0x21, Type, 0);
    uint64_t v6 = v5;
    llvm::Intrinsic::getType(*v2, 2711, 0, 0);
    uint64_t v7 = (llvm::PointerType *)llvm::Intrinsic::getType(*v2, 2711, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v2, "llvm.agx2.vertex.amp.id.mask.i32", (const char *)0x20, v7, 0);
    uint64_t v9 = v8;
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(void *)(v6 + 24) + 16), 0, 0);
    uint64_t v11 = *(void *)(v6 + 8);
    if (v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v11;
      do
      {
        uint64_t v13 = *(void *)(v13 + 8);
        --v12;
      }
      while (v13);
      if (v12 <= 0xFFFFFFFFFFFFFFF5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v14 = v48;
      do
      {
        *v14++ = *(void *)(v11 + 24);
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11);
      uint64_t v15 = (llvm::ValueAsMetadata **)v48;
      uint64_t v16 = 8 * -(int)v12;
      do
      {
        uint64_t v17 = *v15;
        if (*v15 && *((unsigned char *)v17 + 16) == 84 && *(void *)(*((void *)v17 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v15, v10, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(void *)(v9 + 24) + 16), 1uLL, 0);
    uint64_t v19 = *(void *)(v9 + 8);
    if (v19)
    {
      unint64_t v20 = 0;
      uint64_t v21 = v19;
      do
      {
        uint64_t v21 = *(void *)(v21 + 8);
        --v20;
      }
      while (v21);
      if (v20 <= 0xFFFFFFFFFFFFFFF5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v22 = v48;
      do
      {
        *v22++ = *(void *)(v19 + 24);
        uint64_t v19 = *(void *)(v19 + 8);
      }
      while (v19);
      int v23 = (llvm::ValueAsMetadata **)v48;
      uint64_t v24 = 8 * -(int)v20;
      do
      {
        uint64_t v25 = *v23;
        if (*v23 && *((unsigned char *)v25 + 16) == 84 && *(void *)(*((void *)v25 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v23, v18, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
  else
  {
    llvm::Intrinsic::getType(*v2, 1268, 0, 0);
    int v26 = (llvm::PointerType *)llvm::Intrinsic::getType(*v2, 1268, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v2, "llvm.agx.color.coverage.mask", (const char *)0x1C, v26, 0);
    uint64_t v28 = v27;
    llvm::Intrinsic::getType(*v2, 1280, 0, 0);
    uint64_t v29 = (llvm::PointerType *)llvm::Intrinsic::getType(*v2, 1280, 0, 0);
    llvm::Module::getOrInsertFunction((uint64_t)v2, "llvm.agx.read.sample.number", (const char *)0x1B, v29, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(void *)(v28 + 24) + 16), 0xFFuLL, 0);
    uint64_t v33 = *(void *)(v28 + 8);
    if (v33)
    {
      unint64_t v34 = 0;
      uint64_t v35 = v33;
      do
      {
        uint64_t v35 = *(void *)(v35 + 8);
        --v34;
      }
      while (v35);
      if (v34 <= 0xFFFFFFFFFFFFFFF5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v36 = v48;
      do
      {
        *v36++ = *(void *)(v33 + 24);
        uint64_t v33 = *(void *)(v33 + 8);
      }
      while (v33);
      uint64_t v37 = (llvm::ValueAsMetadata **)v48;
      uint64_t v38 = 8 * -(int)v34;
      do
      {
        int v39 = *v37;
        if (*v37 && *((unsigned char *)v39 + 16) == 84 && *(void *)(*((void *)v39 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v37, v32, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(void *)(v31 + 24) + 16), 0, 0);
    uint64_t v41 = *(void *)(v31 + 8);
    if (v41)
    {
      unint64_t v42 = 0;
      uint64_t v43 = v41;
      do
      {
        uint64_t v43 = *(void *)(v43 + 8);
        --v42;
      }
      while (v43);
      if (v42 <= 0xFFFFFFFFFFFFFFF5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v44 = v48;
      do
      {
        *v44++ = *(void *)(v41 + 24);
        uint64_t v41 = *(void *)(v41 + 8);
      }
      while (v41);
      uint64_t v45 = (llvm::ValueAsMetadata **)v48;
      uint64_t v46 = 8 * -(int)v42;
      do
      {
        uint64_t v47 = *v45;
        if (*v45 && *((unsigned char *)v47 + 16) == 84 && *(void *)(*((void *)v47 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v45, v40, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        ++v45;
        v46 -= 8;
      }
      while (v46);
    }
  }
}

double sub_1CC82DDB4(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)(a3 + 8);
  if (v6 == *(void **)a3) {
    uint64_t v7 = (unsigned int *)(a3 + 20);
  }
  else {
    uint64_t v7 = (unsigned int *)(a3 + 16);
  }
  uint64_t v8 = *v7;
  uint64_t v9 = &v6[v8];
  uint64_t v10 = 8 * v8;
  unint64_t v11 = *(void *)(a3 + 8);
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    unint64_t v11 = *(void *)(a3 + 8);
    while (*(void *)v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v11 += 8;
      v12 -= 8;
      if (!v12)
      {
        unint64_t v11 = (unint64_t)&v6[v8];
        break;
      }
    }
  }
  uint64_t v13 = *(uint64_t **)(*(void *)v11 + 40);
  LODWORD(v11) = *(_DWORD *)(a4 + 20);
  unsigned int v14 = v13;
  if (v11 != *(_DWORD *)(a4 + 24))
  {
    uint64_t v15 = *(void *)(a4 + 8);
    if (v15 == *(void *)a4) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = *(unsigned int *)(a4 + 16);
    }
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      uint64_t v18 = v15 + 8 * v16;
      while (*(void *)v15 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v15 += 8;
        v17 -= 8;
        if (!v17)
        {
          uint64_t v15 = v18;
          break;
        }
      }
    }
    unsigned int v14 = *(uint64_t **)(*(void *)v15 + 40);
  }
  if (v8)
  {
    while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v6;
      v10 -= 8;
      if (!v10) {
        goto LABEL_27;
      }
    }
  }
  if (v6 != v9)
  {
    if (v13) {
      llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator();
    }
    LODWORD(v11) = *(_DWORD *)(a4 + 20);
  }
LABEL_27:
  uint64_t v19 = *(void *)(a4 + 8);
  if (v19 == *(void *)a4) {
    unint64_t v11 = v11;
  }
  else {
    unint64_t v11 = *(unsigned int *)(a4 + 16);
  }
  if (v11)
  {
    uint64_t v20 = 8 * v11;
    uint64_t v21 = *(void **)(a4 + 8);
    while (*v21 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v21;
      v20 -= 8;
      if (!v20) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    uint64_t v21 = *(void **)(a4 + 8);
  }
  if (v21 != (void *)(v19 + 8 * v11))
  {
    if (v13) {
      llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator();
    }
    goto LABEL_40;
  }
LABEL_39:
  if (!v13)
  {
LABEL_40:
    uint64_t v22 = *(void *)(a2 + 1416);
    int v23 = (uint64_t *)(v22 + 72);
    uint64_t v24 = *(uint64_t **)(v22 + 80);
    if (v24 == v23)
    {
LABEL_52:
      int v26 = 0;
    }
    else
    {
      uint64_t v25 = v24;
      while (1)
      {
        int v26 = v25 - 3;
        if (v25) {
          uint64_t v27 = v25 - 3;
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = v27[5];
        if (v28) {
          uint64_t v29 = v28 - 24;
        }
        else {
          uint64_t v29 = 0;
        }
        if (*(unsigned __int8 *)(v29 + 16) - 29 >= 0xB) {
          uint64_t v29 = 0;
        }
        if (*(unsigned char *)(v29 + 16) == 29) {
          break;
        }
        uint64_t v25 = (uint64_t *)v25[1];
        if (v25 == v23) {
          goto LABEL_52;
        }
      }
    }
    uint64_t v30 = *v23;
    if (v30) {
      uint64_t v31 = (uint64_t *)(v30 - 24);
    }
    else {
      uint64_t v31 = 0;
    }
    if (v26) {
      uint64_t v13 = v26;
    }
    else {
      uint64_t v13 = v31;
    }
    if (v24) {
      unsigned int v14 = v24 - 3;
    }
    else {
      unsigned int v14 = 0;
    }
  }
  uint64_t v32 = (unsigned int *)(a2 + 1268);
  uint64_t v33 = (_DWORD *)(a2 + 1264);
  uint64_t v34 = *(void *)(a2 + 1256);
  uint64_t v35 = *(void *)(a2 + 1248);
  if (v34 == v35) {
    uint64_t v36 = (unsigned int *)(a2 + 1268);
  }
  else {
    uint64_t v36 = (unsigned int *)(a2 + 1264);
  }
  uint64_t v37 = *(void *)(a2 + 1256);
  while (1)
  {
    unsigned int v38 = v14 >> 4;
    if (v37 == v35)
    {
      uint64_t v39 = *v32;
      uint64_t v40 = (uint64_t **)(v35 + 8 * v39);
      if (v39)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 8 * v39;
        while (*(uint64_t **)(v35 + v41) != v14)
        {
          v41 += 8;
          if (v42 == v41) {
            goto LABEL_84;
          }
        }
        uint64_t v40 = (uint64_t **)(v35 + v41);
      }
LABEL_84:
      uint64_t v37 = *(void *)(a2 + 1248);
    }
    else
    {
      int v43 = *v33 - 1;
      unsigned int v44 = v43 & (v38 ^ (v14 >> 9));
      uint64_t v40 = (uint64_t **)(v34 + 8 * v44);
      uint64_t v45 = *v40;
      if (*v40 == (uint64_t *)-1)
      {
        uint64_t v46 = 0;
LABEL_86:
        if (v46) {
          uint64_t v40 = v46;
        }
        if (*v40 != v14) {
          uint64_t v40 = (uint64_t **)(v34 + 8 * *v36);
        }
      }
      else
      {
        uint64_t v46 = 0;
        int v47 = 1;
        while (v45 != v14)
        {
          if (v46) {
            BOOL v48 = 0;
          }
          else {
            BOOL v48 = v45 == (uint64_t *)-2;
          }
          if (v48) {
            uint64_t v46 = v40;
          }
          unsigned int v49 = v44 + v47++;
          unsigned int v44 = v49 & v43;
          uint64_t v40 = (uint64_t **)(v34 + 8 * (v49 & v43));
          uint64_t v45 = *v40;
          if (*v40 == (uint64_t *)-1) {
            goto LABEL_86;
          }
        }
      }
      uint64_t v37 = *(void *)(a2 + 1256);
    }
    uint64_t v50 = (unsigned int *)(v37 == v35 ? a2 + 1268 : a2 + 1264);
    if (v40 == (uint64_t **)(v37 + 8 * *v50)) {
      break;
    }
    uint64_t v51 = *(void *)(a2 + 8);
    uint64_t v52 = *(void *)(v51 + 24);
    uint64_t v53 = *(unsigned int *)(v51 + 40);
    if (v53)
    {
      LODWORD(v54) = (v53 - 1) & (v38 ^ (v14 >> 9));
      uint64_t v55 = (uint64_t **)(v52 + 16 * v54);
      v56 = *v55;
      if (v14 == *v55) {
        goto LABEL_102;
      }
      int v57 = 1;
      while (v56 != (uint64_t *)-4096)
      {
        int v58 = v54 + v57++;
        uint64_t v54 = v58 & (v53 - 1);
        v56 = *(uint64_t **)(v52 + 16 * v54);
        if (v14 == v56)
        {
          uint64_t v55 = (uint64_t **)(v52 + 16 * v54);
          goto LABEL_102;
        }
      }
    }
    uint64_t v55 = (uint64_t **)(v52 + 16 * v53);
LABEL_102:
    unsigned int v14 = *(uint64_t **)v55[1][1];
  }
  while (2)
  {
    unsigned int v59 = v13;
    unsigned int v60 = v13 >> 4;
    if (v37 == v35)
    {
      uint64_t v61 = *v32;
      uint64_t v62 = (uint64_t **)(v35 + 8 * v61);
      if (v61)
      {
        uint64_t v63 = 0;
        uint64_t v64 = 8 * v61;
        while (*(uint64_t **)(v35 + v63) != v13)
        {
          v63 += 8;
          if (v64 == v63) {
            goto LABEL_121;
          }
        }
        uint64_t v62 = (uint64_t **)(v35 + v63);
      }
LABEL_121:
      uint64_t v37 = *(void *)(a2 + 1248);
    }
    else
    {
      int v65 = *v33 - 1;
      unsigned int v66 = v65 & (v60 ^ (v13 >> 9));
      uint64_t v62 = (uint64_t **)(v34 + 8 * v66);
      unsigned int v67 = *v62;
      if (*v62 == (uint64_t *)-1)
      {
        uint64_t v68 = 0;
LABEL_123:
        if (v68) {
          uint64_t v62 = (uint64_t **)v68;
        }
        if (*v62 != v59) {
          uint64_t v62 = (uint64_t **)(v34 + 8 * *v36);
        }
      }
      else
      {
        uint64_t v68 = 0;
        int v69 = 1;
        while (v67 != v59)
        {
          if (v68) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v67 == (uint64_t *)-2;
          }
          if (v70) {
            uint64_t v68 = v62;
          }
          unsigned int v71 = v66 + v69++;
          unsigned int v66 = v71 & v65;
          uint64_t v62 = (uint64_t **)(v34 + 8 * (v71 & v65));
          unsigned int v67 = *v62;
          if (*v62 == (uint64_t *)-1) {
            goto LABEL_123;
          }
        }
      }
      uint64_t v37 = *(void *)(a2 + 1256);
    }
    if (v37 == v35) {
      unsigned int v72 = (unsigned int *)(a2 + 1268);
    }
    else {
      unsigned int v72 = (unsigned int *)(a2 + 1264);
    }
    if (v62 != (uint64_t **)(v37 + 8 * *v72))
    {
      uint64_t v73 = *(void *)(a2 + 16);
      uint64_t v74 = *(void *)(v73 + 48);
      uint64_t v75 = *(unsigned int *)(v73 + 64);
      if (!v75) {
        goto LABEL_138;
      }
      LODWORD(v76) = (v75 - 1) & (v60 ^ (v59 >> 9));
      unsigned int v77 = (uint64_t **)(v74 + 16 * v76);
      unsigned int v78 = *v77;
      if (v59 != *v77)
      {
        int v79 = 1;
        while (v78 != (uint64_t *)-4096)
        {
          int v80 = v76 + v79++;
          uint64_t v76 = v80 & (v75 - 1);
          unsigned int v78 = *(uint64_t **)(v74 + 16 * v76);
          if (v59 == v78)
          {
            unsigned int v77 = (uint64_t **)(v74 + 16 * v76);
            goto LABEL_139;
          }
        }
LABEL_138:
        unsigned int v77 = (uint64_t **)(v74 + 16 * v75);
      }
LABEL_139:
      uint64_t v13 = *(uint64_t **)v77[1][1];
      if (!v13) {
        break;
      }
      continue;
    }
    break;
  }
  uint64_t v82 = *(void **)a3;
  unsigned int v81 = *(void **)(a3 + 8);
  uint64_t v83 = *(unsigned int *)(a3 + 16);
  uint64_t v84 = *(unsigned int *)(a3 + 20);
  int v85 = v83 - 1;
  char v86 = v59 + 5;
  int v123 = v83 - 1;
  do
  {
    char v86 = (uint64_t *)*v86;
    if (v86 == v59 + 5)
    {
      uint64_t v121 = 0;
      goto LABEL_181;
    }
    BOOL v87 = v86 - 3;
    if (!v86) {
      BOOL v87 = 0;
    }
    if (v81 == v82)
    {
      if (v84)
      {
        uint64_t v88 = 0;
        while ((void *)v81[v88] != v87)
        {
          if (*(unsigned int *)(a3 + 20) == ++v88)
          {
            int v89 = *(_DWORD *)(a3 + 20);
            goto LABEL_164;
          }
        }
        BOOL v98 = &v81[v88];
        int v89 = *(_DWORD *)(a3 + 20);
        unsigned int v99 = *(void **)(a3 + 8);
      }
      else
      {
        int v89 = 0;
LABEL_164:
        unsigned int v99 = *(void **)(a3 + 8);
        BOOL v98 = &v81[v84];
      }
    }
    else
    {
      unsigned int v90 = v85 & ((v87 >> 4) ^ (v87 >> 9));
      uint64_t v91 = &v81[v90];
      int v92 = (void *)*v91;
      if (*v91 == -1)
      {
        unsigned int v93 = 0;
LABEL_166:
        if (v93) {
          uint64_t v91 = v93;
        }
        int v97 = (void *)*v91;
      }
      else
      {
        unsigned int v93 = 0;
        int v94 = 1;
        while (v92 != v87)
        {
          if (v93) {
            BOOL v95 = 0;
          }
          else {
            BOOL v95 = v92 == (void *)-2;
          }
          if (v95) {
            unsigned int v93 = v91;
          }
          unsigned int v96 = v90 + v94++;
          unsigned int v90 = v96 & v85;
          uint64_t v91 = &v81[v96 & v85];
          int v92 = (void *)*v91;
          if (*v91 == -1) {
            goto LABEL_166;
          }
        }
        int v97 = v87;
      }
      if (v97 == v87) {
        BOOL v98 = v91;
      }
      else {
        BOOL v98 = &v81[v83];
      }
      int v89 = *(_DWORD *)(a3 + 20);
      unsigned int v99 = *(void **)a3;
    }
    if (v81 != v99) {
      int v89 = *(_DWORD *)(a3 + 16);
    }
  }
  while (v98 == &v81[v89]);
  uint64_t v100 = v86[1];
  if (v100) {
    uint64_t v101 = v100 - 24;
  }
  else {
    uint64_t v101 = 0;
  }
  uint64_t v121 = v101;
LABEL_181:
  __int16 v102 = (uint64_t *)v14[6];
  uint64_t v126 = v14 + 5;
  if (v102 == v14 + 5) {
    goto LABEL_221;
  }
  uint64_t v125 = *(void *)(a2 + 312);
  int v124 = *(_DWORD *)(a2 + 328);
  while (1)
  {
    char v103 = v102 - 3;
    uint64_t v104 = v102 ? (uint64_t)(v102 - 3) : 0;
    if (sub_1CC82EC98(v125, v124, v104)) {
      break;
    }
    if (v81 == v82)
    {
      if (v84)
      {
        uint64_t v105 = 0;
        while (v81[v105] != v104)
        {
          if (v84 == ++v105)
          {
            int v106 = v84;
            goto LABEL_207;
          }
        }
        unsigned int v108 = &v81[v105];
        int v106 = v84;
        int v115 = v81;
      }
      else
      {
        int v106 = 0;
LABEL_207:
        int v115 = v81;
        unsigned int v108 = &v81[v84];
      }
    }
    else
    {
      unsigned int v107 = v123 & ((v104 >> 4) ^ (v104 >> 9));
      unsigned int v108 = &v81[v107];
      uint64_t v109 = *v108;
      if (*v108 == -1)
      {
        unsigned int v110 = 0;
LABEL_209:
        if (v110) {
          unsigned int v108 = v110;
        }
        uint64_t v114 = *v108;
      }
      else
      {
        unsigned int v110 = 0;
        int v111 = 1;
        while (v109 != v104)
        {
          if (v110) {
            BOOL v112 = 0;
          }
          else {
            BOOL v112 = v109 == -2;
          }
          if (v112) {
            unsigned int v110 = v108;
          }
          unsigned int v113 = v107 + v111++;
          unsigned int v107 = v113 & v123;
          unsigned int v108 = &v81[v113 & v123];
          uint64_t v109 = *v108;
          if (*v108 == -1) {
            goto LABEL_209;
          }
        }
        uint64_t v114 = v104;
      }
      if (v114 != v104) {
        unsigned int v108 = &v81[v83];
      }
      int v106 = v84;
      int v115 = v82;
    }
    if (v81 != v115) {
      int v106 = v83;
    }
    if (v108 != &v81[v106]) {
      break;
    }
    __int16 v102 = (uint64_t *)v102[1];
    if (v102 == v126) {
      goto LABEL_221;
    }
  }
  if (!v102)
  {
LABEL_221:
    BOOL v116 = (void *)*v126;
    if ((uint64_t *)*v126 == v126)
    {
      char v103 = 0;
    }
    else
    {
      if (v116) {
        unsigned int v117 = v116 - 3;
      }
      else {
        unsigned int v117 = 0;
      }
      if (*((unsigned __int8 *)v117 + 16) - 29 >= 0xB) {
        char v103 = 0;
      }
      else {
        char v103 = v117;
      }
    }
  }
  uint64_t v118 = v121;
  if (!v121)
  {
    uint64_t v119 = v59[6];
    if (v119) {
      uint64_t v118 = v119 - 24;
    }
    else {
      uint64_t v118 = 0;
    }
  }
  *a1 = v103;
  a1[1] = v14;
  a1[2] = v118;
  a1[3] = v59;
  a1[4] = a1 + 6;
  *(void *)&double result = 0x800000000;
  a1[5] = 0x800000000;
  a1[14] = a1 + 16;
  a1[15] = 0x800000000;
  return result;
}

uint64_t sub_1CC82E878(llvm::Module *a1, const char *a2, const char *a3)
{
  __int16 v5 = 261;
  v4[0] = a2;
  v4[1] = a3;
  uint64_t result = llvm::Module::getNamedMetadata(a1, v4);
  if (result) {
    return *(void *)(*(void *)(***(void ***)(result + 48)
  }
                                 - 8 * *(unsigned int *)(***(void ***)(result + 48) + 8))
                     + 128);
  return result;
}

uint64_t sub_1CC82E8C8(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v2 = *(void *)(a2 - 32);
    if (!v2)
    {
      int v3 = 0;
      return v2 | v3;
    }
    if (!*(unsigned char *)(v2 + 16) && *(void *)(v2 + 24) == *(void *)(a2 + 72) && (*(unsigned char *)(v2 + 33) & 0x20) != 0)
    {
      uint64_t v5 = a1[3];
      if (v5 && *(_DWORD *)(v5 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 3;
        int v3 = 0x10000;
        return v2 | v3;
      }
      uint64_t v6 = a1[4];
      if (v6 && *(_DWORD *)(v6 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 5;
        int v3 = 0x20000;
        return v2 | v3;
      }
      uint64_t v7 = a1[5];
      if (v7 && *(_DWORD *)(v7 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 1;
        int v3 = 0x40000;
        return v2 | v3;
      }
      uint64_t v8 = a1[6];
      if (v8 && *(_DWORD *)(v8 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 1;
        int v3 = 0x80000;
        return v2 | v3;
      }
    }
  }
  int v3 = 0;
  LODWORD(v2) = 0;
  return v2 | v3;
}

void *sub_1CC82E9A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC82EE94(a1, a2, v7);
    *uint64_t v5 = *a2;
    *((_WORD *)v5 + 4) = 0;
    *((unsigned char *)v5 + 10) = 0;
  }
  return v5 + 1;
}

uint64_t sub_1CC82EA14(uint64_t a1)
{
  uint64_t result = 0;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 0x3B)
  {
    unsigned int v4 = v3 - 60;
    if (v4 > 0x1C) {
      return result;
    }
    if (v4 == 24)
    {
      uint64_t v5 = *(void *)(a1 - 32);
      if (!v5) {
        goto LABEL_10;
      }
      if (*(unsigned char *)(v5 + 16)) {
        goto LABEL_10;
      }
      if (*(void *)(v5 + 24) != *(void *)(a1 + 72)) {
        goto LABEL_10;
      }
      if ((*(unsigned char *)(v5 + 33) & 0x20) == 0) {
        goto LABEL_10;
      }
      uint64_t result = 0;
      int v6 = *(_DWORD *)(v5 + 36);
      if ((v6 - 167) >= 2 && v6 != 1823) {
        goto LABEL_10;
      }
      return result;
    }
    if (((1 << v4) & 0x1010003A) == 0)
    {
      if (!v4) {
        return (*(_WORD *)(a1 + 18) & 0x301) != 0;
      }
      return result;
    }
    return 1;
  }
  if (v3 == 37) {
    return 1;
  }
  if (v3 == 33 || v3 == 39)
  {
LABEL_10:
    uint64_t v7 = *(void *)(a1 + 64);
    if (!v7 || (*(unsigned char *)(v7 + 17) & 0x30) == 0)
    {
      int v8 = *(_DWORD *)(a1 + 20);
      if (v8 < 0)
      {
        uint64_t v9 = a1 - 32 * (v8 & 0x7FFFFFF);
        uint64_t v12 = *(void *)(v9 - 8);
        uint64_t v10 = v9 - 8;
        uint64_t v11 = v12;
        if (v12)
        {
          uint64_t v13 = -v11;
          do
          {
            unsigned int v14 = *(_DWORD *)(*(void *)(v10 + v13) + 8);
            BOOL v15 = v14 > 7;
            int v16 = (1 << v14) & 0x83;
            if (v15 || v16 == 0) {
              return 1;
            }
            v13 += 16;
          }
          while (v13);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0) {
        return llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) ^ 1;
      }
    }
    return 0;
  }
  return result;
}

void *sub_1CC82EB78(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC82F050(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC82F0E4(a1, a2, v7);
    *uint64_t v5 = *a2;
    *((unsigned char *)v5 + 8) = 0;
    v5[2] = 0;
    *((_WORD *)v5 + 12) = 0;
    *((unsigned char *)v5 + 26) = 0;
    v5[4] = v5 + 6;
    v5[5] = 0x200000000;
  }
  return v5 + 1;
}

uint64_t sub_1CC82EC04(uint64_t a1)
{
  if (sub_1CD0FF4EC(a1, 17)) {
    return 4;
  }
  if (sub_1CD0FF4EC(a1, 10)) {
    return 3;
  }
  if (sub_1CD0FF4EC(a1, 11)) {
    return 1;
  }
  if (sub_1CD0FF4EC(a1, 12)) {
    return 2;
  }
  if (sub_1CD0FF4EC(a1, 16)) {
    return 5;
  }
  return 0;
}

uint64_t sub_1CC82EC98(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  uint64_t v5 = *(void *)(a1 + 16 * v4);
  if (v5 != a3)
  {
    int v7 = 1;
    while (v5 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      uint64_t v5 = *(void *)(a1 + 16 * (v8 & v3));
      uint64_t v6 = 1;
      if (v5 == a3) {
        return v6;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1CC82ED00(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 56);
  int v3 = (*(unsigned __int16 *)(v2 + 18) >> 4) & 0x3FF;
  if (v3 != 106 && v3 != 102) {
    return 0;
  }
  unsigned int v4 = *(llvm::Module **)(v2 + 40);
  unsigned int v14 = "agx.vertex_amp_mode";
  __int16 v15 = 259;
  if (llvm::Module::getNamedMetadata(v4, &v14))
  {
    if (*(unsigned char *)(a1 + 16) != 84) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_1CD110204(*(uint64_t ***)(v2 + 40), 2710, 0, 0);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    uint64_t result = 0;
    if (!*(void *)(v6 + 8) || *(unsigned char *)(a1 + 16) != 84) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(a1 - 32);
  if (!v7
    || *(unsigned char *)(v7 + 16)
    || *(void *)(v7 + 24) != *(void *)(a1 + 72)
    || (*(unsigned char *)(v7 + 33) & 0x20) == 0
    || *(_DWORD *)(v7 + 36) != 2668)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v8 - 24;
  if (!v8) {
    uint64_t v9 = 0;
  }
  if (*(unsigned char *)(v9 + 16) != 84) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 - 32);
  if (!v10
    || *(unsigned char *)(v10 + 16)
    || *(void *)(v10 + 24) != *(void *)(v9 + 72)
    || (*(unsigned char *)(v10 + 33) & 0x20) == 0
    || *(_DWORD *)(*(void *)(v8 - 56) + 36) != 2750)
  {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v11 = *(void *)(v8 + 8);
  if (v11 && *(unsigned char *)(v11 - 8) == 84)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 40);
    if (v12) {
      uint64_t v13 = v12 - 24;
    }
    else {
      uint64_t v13 = 0;
    }
    if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB) {
      uint64_t v13 = 0;
    }
    return *(unsigned __int8 *)(v13 + 16) == 29;
  }
  return result;
}

void *sub_1CC82EE94(uint64_t a1, uint64_t *a2, void *a3)
{
  int v23 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  unsigned int v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      do
      {
        *unsigned int v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v6)
    {
      uint64_t v17 = (_DWORD *)(v9 + 8);
      uint64_t v18 = 16 * v6;
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v24 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v24);
          uint64_t v20 = v24;
          uint64_t *v24 = v19;
          *((_DWORD *)v20 + 2) = *v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v17 += 4;
        v18 -= 16;
      }
      while (v18);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    unsigned int v14 = *(void **)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v21 = *(unsigned int *)(a1 + 16);
    if (v21)
    {
      uint64_t v22 = 0;
      do
      {
        v14[v22] = -4096;
        v22 += 2;
      }
      while (2 * v21 != v22);
    }
  }
  sub_1CBB0BF40((uint64_t)v14, v21, *a2, &v23);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v23;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC82F050(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v5 = (void *)(a1 + (v4 << 6));
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        int v5 = (void *)(a1 + (v4 << 6));
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        int v5 = v9;
      }
    }
  }
  else
  {
    int v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

void *sub_1CC82F0E4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v27 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  unsigned int v14 = operator new((unint64_t)v13 << 6, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = v15 << 6;
      do
      {
        *unsigned int v14 = -4096;
        v14 += 8;
        v16 -= 64;
      }
      while (v16);
    }
    if (v6)
    {
      uint64_t v17 = (void *)(v9 + 48);
      uint64_t v18 = v6 << 6;
      do
      {
        uint64_t v19 = *(v17 - 6);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v28 = 0;
          sub_1CC82F050(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v28);
          uint64_t v20 = v28;
          *uint64_t v28 = v19;
          long long v21 = *(_OWORD *)(v17 - 5);
          *(_DWORD *)((char *)v20 + 23) = *(_DWORD *)((char *)v17 - 25);
          *(_OWORD *)(v20 + 1) = v21;
          v20[4] = (uint64_t)(v20 + 6);
          v20[5] = 0x200000000;
          unsigned int v22 = *((_DWORD *)v17 - 2);
          if (v22 && v17 - 6 != v20)
          {
            int v23 = (void *)*(v17 - 2);
            if (v17 == v23)
            {
              if (v22 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v20 + 6, v23, 8 * *((unsigned int *)v17 - 2));
              *((_DWORD *)v20 + 10) = v22;
            }
            else
            {
              v20[4] = (uint64_t)v23;
              *((_DWORD *)v20 + 10) = v22;
              *((_DWORD *)v20 + 11) = *((_DWORD *)v17 - 1);
              *(v17 - 2) = v17;
              *((_DWORD *)v17 - 1) = 0;
            }
            *((_DWORD *)v17 - 2) = 0;
          }
          ++*(_DWORD *)(a1 + 8);
          uint64_t v24 = (void *)*(v17 - 2);
          if (v17 != v24) {
            free(v24);
          }
        }
        v17 += 8;
        v18 -= 64;
      }
      while (v18);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    unsigned int v14 = *(void **)a1;
    LODWORD(v25) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v25 = *(unsigned int *)(a1 + 16);
    if (v25)
    {
      unint64_t v26 = 0;
      do
      {
        v14[v26 / 8] = -4096;
        v26 += 64;
      }
      while (v25 << 6 != v26);
    }
  }
  sub_1CC82F050((uint64_t)v14, v25, *a2, &v27);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v27;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CC82F368(void *a1)
{
  if (*a1) {
    uint64_t v1 = *a1 - 24;
  }
  else {
    uint64_t v1 = 0;
  }
  if (*(unsigned char *)(v1 + 16) == 84
    && (uint64_t v2 = *(void *)(v1 - 32)) != 0
    && !*(unsigned char *)(v2 + 16)
    && *(void *)(v2 + 24) == *(void *)(v1 + 72))
  {
    return (*(unsigned __int8 *)(v2 + 33) >> 5) & 1;
  }
  else
  {
    return 0;
  }
}

llvm::SmallPtrSetImplBase *sub_1CC82F3B8(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  *((void *)this + 4) = a2;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 12) = (char *)this + 112;
  *((_DWORD *)this + 27) = 8;
  *((void *)this + 2) = 0x100000008;
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3 == a2 + 40)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3) {
      uint64_t v4 = v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB) {
      uint64_t v4 = 0;
    }
  }
  *((void *)this + 14) = a2;
  *((void *)this + 15) = v4;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 26) = 1;
  sub_1CC82F454(this);
  return this;
}

void sub_1CC82F454(llvm::SmallPtrSetImplBase *this)
{
  while (1)
  {
LABEL_1:
    uint64_t v2 = *((void *)this + 12) + 24 * *((unsigned int *)this + 26);
    uint64_t v3 = *(void *)(v2 - 24);
    uint64_t v4 = *(void *)(v3 + 40);
    if (v4 == v3 + 40)
    {
LABEL_68:
      int v35 = 0;
    }
    else
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      int v6 = *(unsigned __int8 *)(v5 + 16);
      int v7 = v6 - 29;
      if (v6 == 30)
      {
        int v35 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        int v35 = 0;
        switch(v7)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
LABEL_80:
            __break(1u);
            goto LABEL_81;
          case 2:
            int v35 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            int v35 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            int v35 = 2;
            break;
          case 7:
            int v35 = *(_WORD *)(v5 + 18) & 1;
            break;
          case 8:
LABEL_81:
            int v35 = 1;
            break;
          case 10:
            int v35 = *(_DWORD *)(v5 + 80) + 1;
            break;
          default:
            goto LABEL_68;
        }
      }
    }
    if (*(_DWORD *)(v2 - 8) == v35) {
      break;
    }
    uint64_t v8 = *(void *)(v2 - 16);
    uint64_t v9 = *(void *)(v2 - 8);
    uint64_t v10 = (v9 + 1);
    *(_DWORD *)(v2 - 8) = v10;
    uint64_t v2 = *(unsigned __int8 *)(v8 + 16);
    if (v2 == 30)
    {
      uint64_t v11 = v8 - 32 * v9;
LABEL_12:
      int v12 = (uint64_t *)(v11 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v8 + 16))
      {
        case ' ':
        case '&':
          int v42 = *(_DWORD *)(v8 + 20);
          if ((v42 & 0x40000000) != 0) {
            uint64_t v43 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v43 = v8 - 32 * (v42 & 0x7FFFFFF);
          }
          int v12 = (uint64_t *)(v43 + 32 * v10);
          break;
        case '!':
          uint64_t v44 = -64;
          if (!v9) {
            uint64_t v44 = -96;
          }
          int v12 = (uint64_t *)(v8 + v44);
          break;
        case '""':
        case '#':
          goto LABEL_80;
        case '$':
          if ((*(_WORD *)(v8 + 18) & 1) == 0)
          {
            uint64_t v13 = 0;
            goto LABEL_14;
          }
          uint64_t v38 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
LABEL_59:
          int v12 = (uint64_t *)(v38 + 32);
          break;
        case '%':
          int v12 = (uint64_t *)(v8 - 32);
          break;
        case '\'':
          if (v9)
          {
            uint64_t v11 = v8 - 32 * *(unsigned int *)(v8 + 80) + 32 * (v9 - 1);
            goto LABEL_12;
          }
          int v12 = (uint64_t *)(v8 - 32 * *(unsigned int *)(v8 + 80) - 64);
          break;
        default:
          int v36 = *(_DWORD *)(v8 + 20);
          if ((v36 & 0x40000000) != 0) {
            uint64_t v37 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v37 = v8 - 32 * (v36 & 0x7FFFFFF);
          }
          uint64_t v38 = v37 + 32 * (2 * v9);
          goto LABEL_59;
      }
    }
    uint64_t v13 = *v12;
LABEL_14:
    uint64_t v14 = *((void *)this + 1);
    uint64_t v15 = *((unsigned int *)this + 5);
    if (v14 == *(void *)this)
    {
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 8 * v15;
        uint64_t v18 = (void *)*((void *)this + 1);
        do
        {
          if (*v18 == v13) {
            goto LABEL_1;
          }
          if (*v18 == -2) {
            uint64_t v16 = v18;
          }
          ++v18;
          v17 -= 8;
        }
        while (v17);
        if (v16)
        {
          *uint64_t v16 = v13;
          --*((_DWORD *)this + 6);
          goto LABEL_25;
        }
      }
      unsigned int v25 = *((_DWORD *)this + 4);
      if (v15 < v25)
      {
        *((_DWORD *)this + 5) = v15 + 1;
        *(void *)(v14 + 8 * v15) = v13;
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v25 = *((_DWORD *)this + 4);
    }
    if (3 * v25 <= 4 * ((int)v15 - *((_DWORD *)this + 6)))
    {
      if (v25 >= 0x40) {
        v25 *= 2;
      }
      else {
        unsigned int v25 = 128;
      }
LABEL_67:
      llvm::SmallPtrSetImplBase::Grow(this, v25);
      unsigned int v25 = *((_DWORD *)this + 4);
      uint64_t v14 = *((void *)this + 1);
      goto LABEL_34;
    }
    if (v25 - v15 < v25 >> 3) {
      goto LABEL_67;
    }
LABEL_34:
    unsigned int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v28 = (void *)(v14 + 8 * v27);
    uint64_t v29 = *v28;
    if (*v28 == -1)
    {
      uint64_t v33 = 0;
LABEL_45:
      if (v33) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = v28;
      }
      if (*v34 != v13)
      {
        if (*v34 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v34 = v13;
LABEL_25:
        uint64_t v19 = *(void *)(v13 + 40);
        if (v19 == v13 + 40 || !v19)
        {
          if (v19 == v13 + 40)
          {
            uint64_t v45 = 0;
          }
          else
          {
            if (v19) {
              uint64_t v45 = v19 - 24;
            }
            else {
              uint64_t v45 = 0;
            }
            if (*(unsigned __int8 *)(v45 + 16) - 29 >= 0xB) {
              uint64_t v45 = 0;
            }
          }
          *(void *)&long long v46 = v13;
          *((void *)&v46 + 1) = v45;
          uint64_t v47 = 0;
          unsigned int v40 = *((_DWORD *)this + 26);
          unint64_t v22 = *((void *)this + 12);
          if (v40 >= *((_DWORD *)this + 27))
          {
            BOOL v41 = v22 + 24 * v40 > (unint64_t)&v46;
            if (v22 <= (unint64_t)&v46 && v41) {
LABEL_79:
            }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_63:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
        }
        else
        {
          if (*(unsigned __int8 *)(v19 - 8) - 29 >= 0xB) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = v19 - 24;
          }
          *(void *)&long long v46 = v13;
          *((void *)&v46 + 1) = v20;
          uint64_t v47 = 0;
          unsigned int v21 = *((_DWORD *)this + 26);
          unint64_t v22 = *((void *)this + 12);
          if (v21 >= *((_DWORD *)this + 27))
          {
            BOOL v39 = v22 + 24 * v21 > (unint64_t)&v46;
            if (v22 <= (unint64_t)&v46 && v39) {
              goto LABEL_79;
            }
            goto LABEL_63;
          }
        }
        uint64_t v23 = v22 + 24 * *((unsigned int *)this + 26);
        long long v24 = v46;
        *(void *)(v23 + 16) = v47;
        *(_OWORD *)uint64_t v23 = v24;
        ++*((_DWORD *)this + 26);
      }
    }
    else
    {
      uint64_t v33 = 0;
      int v30 = 1;
      while (v29 != v13)
      {
        if (v33) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v29 == -2;
        }
        if (v31) {
          uint64_t v33 = v28;
        }
        unsigned int v32 = v27 + v30++;
        unsigned int v27 = v32 & v26;
        uint64_t v28 = (void *)(v14 + 8 * (v32 & v26));
        uint64_t v29 = *v28;
        if (*v28 == -1) {
          goto LABEL_45;
        }
      }
    }
  }
}

uint64_t sub_1CC82F948(uint64_t a1)
{
  if (sub_1CD0FF4EC(a1, 11) & 1) != 0 || (sub_1CD0FF4EC(a1, 10)) {
    return 1;
  }

  return sub_1CD0FF4EC(a1, 12);
}

uint64_t sub_1CC82F9AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_13;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_13:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC82FA50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC82FAF4(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC82FC8C(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC82FC8C(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CC82FC8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 520);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC82FA50((uint64_t)v5, v10, &v12);
      uint64_t v11 = v12;
      *uint64_t v12 = *(void *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1CC82FD50(char **a1, unint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v5 = *((unsigned int *)a1 + 3);
  int v6 = *a1;
  if (v4 >= v5)
  {
    unint64_t v8 = v4 + 1;
    BOOL v10 = (unint64_t)v6 <= a2 && (unint64_t)&v6[448 * v4] > a2;
    if (v10) {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - (void)v6) >> 6);
    }
    else {
      uint64_t v11 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v8);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v12 = (2 * v5) | 1;
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 >= 0xFFFFFFFF) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (char *)malloc_type_malloc(448 * v13, 0x4065EBACuLL);
    if (!v14) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    int v6 = v14;
    uint64_t v15 = *a1;
    uint64_t v16 = *((unsigned int *)a1 + 2);
    if (v16)
    {
      uint64_t v17 = 448 * v16;
      do
      {
        uint64_t v18 = sub_1CC830CE0((uint64_t)v14, (uint64_t)v15);
        v15 += 448;
        uint64_t v14 = (char *)(v18 + 448);
        v17 -= 448;
      }
      while (v17);
      uint64_t v15 = *a1;
      uint64_t v19 = *((unsigned int *)a1 + 2);
      if (v19)
      {
        uint64_t v33 = v11;
        uint64_t v20 = 0;
        uint64_t v21 = 448 * v19;
        do
        {
          unint64_t v22 = &v15[v21];
          uint64_t v23 = *(char **)&v15[v21 - 88];
          if (&v15[v21 - 72] != v23) {
            free(v23);
          }
          long long v24 = (char *)*((void *)v22 - 21);
          if (v22 - 152 != v24) {
            free(v24);
          }
          unsigned int v25 = &v15[v21];
          unsigned int v26 = *(void ***)&v15[v21 - 216];
          if ((v26 & 1) == 0 && v26)
          {
            uint64_t v32 = *(void *)&v15[v21 - 216];
            if (*v26 != v26 + 2) {
              free(*v26);
            }
            MEMORY[0x1D25D9CE0](v32, 0x1080C40EF38A13ELL);
          }
          unsigned int v27 = (char *)*((void *)v25 - 40);
          if (v25 - 304 != v27) {
            free(v27);
          }
          uint64_t v28 = &v15[v21];
          uint64_t v29 = *(void **)&v15[v21 - 376];
          if (v29 != *(void **)&v15[v21 - 384]) {
            free(v29);
          }
          int v30 = (char *)*((void *)v28 - 52);
          if (v28 - 400 != v30) {
            free(v30);
          }
          BOOL v31 = (char *)*((void *)v22 - 56);
          if (&v15[v21 - 432] != v31) {
            free(v31);
          }
          v15 -= 448;
          v20 += 448;
        }
        while (v21 != v20);
        uint64_t v15 = *a1;
        uint64_t v11 = v33;
      }
    }
    if (v15 != (char *)(a1 + 2)) {
      free(v15);
    }
    *a1 = v6;
    *((_DWORD *)a1 + 3) = v13;
    if (v10) {
      uint64_t v2 = (uint64_t)&v6[448 * v11];
    }
    LODWORD(v4) = *((_DWORD *)a1 + 2);
  }
  uint64_t result = sub_1CC830CE0((uint64_t)&v6[448 * v4], v2);
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CC82FFE4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 48 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(a1 + 48 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CC830070(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 48 * v12;
      do
      {
        *uint64_t result = -4096;
        result += 6;
        v13 -= 48;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 48 * v3;
      uint64_t v15 = v4 + 16;
      do
      {
        uint64_t v16 = *(void *)(v15 - 16);
        if ((v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v22 = 0;
          sub_1CC82FFE4(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v22);
          uint64_t v17 = v22;
          uint64_t v18 = v22 + 5;
          *unint64_t v22 = *(void *)(v15 - 16);
          v17[1] = v18;
          uint64_t v19 = *(void **)(v15 - 8);
          uint64_t v20 = *(void **)v15;
          if (*(void **)v15 == v19)
          {
            v17[2] = v18;
            uint64_t v21 = *(unsigned int *)(v15 + 12);
            uint64_t v19 = *(void **)v15;
            if (v21)
            {
              memmove(v18, v19, 8 * v21);
              uint64_t v20 = *(void **)(v15 - 8);
              uint64_t v19 = *(void **)v15;
            }
          }
          else
          {
            v17[2] = v20;
            *(void *)uint64_t v15 = v19;
            uint64_t v20 = v19;
          }
          void v17[3] = *(void *)(v15 + 8);
          *((_DWORD *)v17 + 8) = *(_DWORD *)(v15 + 16);
          *(void *)(v15 + 8) = 1;
          *(_DWORD *)(v15 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (v19 != v20) {
            free(v19);
          }
        }
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 48 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

void sub_1CC830248(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v163 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 504);
  if (v5)
  {
    unint64_t v6 = a4;
    int v7 = a3;
    int v9 = *(uint64_t **)(v163 + 496);
    uint64_t v10 = &v9[v5];
    v154 = (llvm::SmallPtrSetImplBase *)(a2 + 64);
    v158 = v10;
    while (1)
    {
      uint64_t v11 = *v9;
      uint64_t v13 = *v6;
      uint64_t v12 = v6[1];
      if (v12 == *v6)
      {
        uint64_t v14 = *((unsigned int *)v6 + 5);
        uint64_t v15 = (void *)(v12 + 8 * v14);
        if (v14)
        {
          uint64_t v16 = 0;
          while (*(void *)(v12 + v16) != v11)
          {
            v16 += 8;
            if (8 * v14 == v16) {
              goto LABEL_22;
            }
          }
          uint64_t v15 = (void *)(v12 + v16);
        }
LABEL_22:
        uint64_t v13 = v6[1];
      }
      else
      {
        uint64_t v17 = *((unsigned int *)v6 + 4);
        int v18 = v17 - 1;
        unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v15 = (void *)(v12 + 8 * v19);
        uint64_t v20 = *v15;
        if (*v15 == -1)
        {
          uint64_t v21 = 0;
LABEL_49:
          if (v21) {
            uint64_t v15 = v21;
          }
          LODWORD(v14) = *((_DWORD *)v6 + 5);
          unsigned int v40 = (void *)(v12 + 8 * v17);
          if (*v15 != v11) {
            uint64_t v15 = v40;
          }
        }
        else
        {
          uint64_t v21 = 0;
          int v22 = 1;
          while (v20 != v11)
          {
            if (v21) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v20 == -2;
            }
            if (v23) {
              uint64_t v21 = v15;
            }
            unsigned int v24 = v19 + v22++;
            unsigned int v19 = v24 & v18;
            uint64_t v15 = (void *)(v12 + 8 * (v24 & v18));
            uint64_t v20 = *v15;
            if (*v15 == -1) {
              goto LABEL_49;
            }
          }
          LODWORD(v14) = *((_DWORD *)v6 + 5);
        }
      }
      if (v12 == v13) {
        unsigned int v25 = v14;
      }
      else {
        unsigned int v25 = *((_DWORD *)v6 + 4);
      }
      if (v15 != (void *)(v12 + 8 * v25))
      {
        unint64_t v26 = *(unsigned int *)(a2 + 8);
        if (v26 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v26) = v11;
        ++*(_DWORD *)(a2 + 8);
        goto LABEL_29;
      }
      uint64_t v28 = *v7;
      uint64_t v27 = v7[1];
      if (v27 == *v7)
      {
        uint64_t v29 = *((unsigned int *)v7 + 5);
        int v30 = (void *)(v27 + 8 * v29);
        if (v29)
        {
          uint64_t v31 = 0;
          while (*(void *)(v27 + v31) != v11)
          {
            v31 += 8;
            if (8 * v29 == v31) {
              goto LABEL_56;
            }
          }
          int v30 = (void *)(v27 + v31);
        }
LABEL_56:
        uint64_t v28 = v7[1];
      }
      else
      {
        uint64_t v32 = *((unsigned int *)v7 + 4);
        int v33 = v32 - 1;
        unsigned int v34 = (v32 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        int v30 = (void *)(v27 + 8 * v34);
        uint64_t v35 = *v30;
        if (*v30 == -1)
        {
          int v36 = 0;
LABEL_180:
          if (v36) {
            int v30 = v36;
          }
          LODWORD(v29) = *((_DWORD *)v7 + 5);
          unsigned int v110 = (void *)(v27 + 8 * v32);
          if (*v30 != v11) {
            int v30 = v110;
          }
        }
        else
        {
          int v36 = 0;
          int v37 = 1;
          while (v35 != v11)
          {
            if (v36) {
              BOOL v38 = 0;
            }
            else {
              BOOL v38 = v35 == -2;
            }
            if (v38) {
              int v36 = v30;
            }
            unsigned int v39 = v34 + v37++;
            unsigned int v34 = v39 & v33;
            int v30 = (void *)(v27 + 8 * (v39 & v33));
            uint64_t v35 = *v30;
            if (*v30 == -1) {
              goto LABEL_180;
            }
          }
          LODWORD(v29) = *((_DWORD *)v7 + 5);
        }
      }
      if (v27 == v28) {
        unsigned int v41 = v29;
      }
      else {
        unsigned int v41 = *((_DWORD *)v7 + 4);
      }
      if (v30 == (void *)(v27 + 8 * v41)) {
        goto LABEL_142;
      }
      unint64_t v42 = *(unsigned int *)(a2 + 40);
      if (v42 >= *(unsigned int *)(a2 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 32) + 8 * v42) = v11;
      ++*(_DWORD *)(a2 + 40);
      int v43 = *(_DWORD *)(v11 + 20);
      if ((v43 & 0x40000000) != 0)
      {
        uint64_t v45 = *(uint64_t **)(v11 - 8);
        uint64_t v44 = v43 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v44 = v43 & 0x7FFFFFF;
        uint64_t v45 = (uint64_t *)(v11 - 32 * v44);
      }
      uint64_t v47 = *(void **)(a2 + 64);
      long long v46 = *(void **)(a2 + 72);
      uint64_t v48 = *(unsigned int *)(a2 + 84);
      if (v44) {
        break;
      }
LABEL_132:
      if (v46 != v47)
      {
        unsigned int v83 = *(_DWORD *)(a2 + 80);
        int v7 = a3;
        unint64_t v6 = a4;
        uint64_t v10 = v158;
LABEL_158:
        if (3 * v83 <= 4 * ((int)v48 - *(_DWORD *)(a2 + 88)))
        {
          if (v83 >= 0x40) {
            v83 *= 2;
          }
          else {
            unsigned int v83 = 128;
          }
        }
        else if (v83 - v48 >= v83 >> 3)
        {
          goto LABEL_160;
        }
        llvm::SmallPtrSetImplBase::Grow(v154, v83);
        unsigned int v83 = *(_DWORD *)(a2 + 80);
        long long v46 = *(void **)(a2 + 72);
LABEL_160:
        unsigned int v98 = v83 - 1;
        unsigned int v99 = (v83 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v100 = &v46[v99];
        uint64_t v101 = *v100;
        if (*v100 == -1)
        {
          __int16 v102 = 0;
LABEL_186:
          if (v102) {
            uint64_t v100 = v102;
          }
          if (*v100 != v11)
          {
            if (*v100 == -2) {
              --*(_DWORD *)(a2 + 88);
            }
            else {
              ++*(_DWORD *)(a2 + 84);
            }
            void *v100 = v11;
          }
        }
        else
        {
          __int16 v102 = 0;
          int v103 = 1;
          while (v101 != v11)
          {
            if (v102) {
              BOOL v104 = 0;
            }
            else {
              BOOL v104 = v101 == -2;
            }
            if (v104) {
              __int16 v102 = v100;
            }
            unsigned int v105 = v99 + v103++;
            unsigned int v99 = v105 & v98;
            uint64_t v100 = &v46[v105 & v98];
            uint64_t v101 = *v100;
            if (*v100 == -1) {
              goto LABEL_186;
            }
          }
        }
        goto LABEL_29;
      }
      int v7 = a3;
      unint64_t v6 = a4;
      uint64_t v10 = v158;
      if (v48)
      {
        int v80 = 0;
        uint64_t v81 = 8 * v48;
        uint64_t v82 = v46;
        while (*v82 != v11)
        {
          if (*v82 == -2) {
            int v80 = v82;
          }
          ++v82;
          v81 -= 8;
          if (!v81)
          {
            if (!v80) {
              goto LABEL_140;
            }
            void *v80 = v11;
            --*(_DWORD *)(a2 + 88);
            goto LABEL_29;
          }
        }
        goto LABEL_29;
      }
LABEL_140:
      unsigned int v83 = *(_DWORD *)(a2 + 80);
      if (v48 >= v83) {
        goto LABEL_158;
      }
      *(_DWORD *)(a2 + 84) = v48 + 1;
      v46[v48] = v11;
LABEL_29:
      if (++v9 == v10) {
        return;
      }
    }
    unsigned int v49 = &v45[4 * v44];
    uint64_t v50 = (void *)*a1;
    uint64_t v51 = *(unsigned int *)(a2 + 80);
    int v161 = v51 - 1;
    int v162 = *(_DWORD *)(a2 + 80);
    uint64_t v157 = &v46[v51];
    while (1)
    {
      uint64_t v52 = *v45;
      if ((sub_1CC82E8C8(v50, *v45) & 0xFFFD) == 0 && v52 && *(unsigned __int8 *)(v52 + 16) >= 0x1Cu)
      {
        uint64_t v54 = *(void *)(v163 + 680);
        uint64_t v55 = *(void *)(v163 + 672);
        if (v54 == v55)
        {
          uint64_t v56 = *(unsigned int *)(v163 + 692);
          int v57 = (void *)(v54 + 8 * v56);
          if (v56)
          {
            uint64_t v58 = 0;
            uint64_t v59 = 8 * v56;
            while (*(void *)(v54 + v58) != v52)
            {
              v58 += 8;
              if (v59 == v58) {
                goto LABEL_91;
              }
            }
            int v57 = (void *)(v54 + v58);
          }
LABEL_91:
          uint64_t v55 = *(void *)(v163 + 680);
        }
        else
        {
          uint64_t v60 = *(unsigned int *)(v163 + 688);
          int v61 = v60 - 1;
          unsigned int v62 = (v60 - 1) & ((v52 >> 4) ^ (v52 >> 9));
          int v57 = (void *)(v54 + 8 * v62);
          uint64_t v63 = *v57;
          if (*v57 == -1)
          {
            uint64_t v64 = 0;
LABEL_115:
            if (v64) {
              int v57 = v64;
            }
            if (*v57 != v52) {
              int v57 = (void *)(v54 + 8 * v60);
            }
          }
          else
          {
            uint64_t v64 = 0;
            int v65 = 1;
            while (v63 != v52)
            {
              if (v64) {
                BOOL v66 = 0;
              }
              else {
                BOOL v66 = v63 == -2;
              }
              if (v66) {
                uint64_t v64 = v57;
              }
              unsigned int v67 = v62 + v65++;
              unsigned int v62 = v67 & v61;
              int v57 = (void *)(v54 + 8 * (v67 & v61));
              uint64_t v63 = *v57;
              if (*v57 == -1) {
                goto LABEL_115;
              }
            }
          }
        }
        BOOL v23 = v54 == v55;
        uint64_t v68 = (unsigned int *)(v163 + 692);
        if (!v23) {
          uint64_t v68 = (unsigned int *)(v163 + 688);
        }
        if (v57 != (void *)(v54 + 8 * *v68))
        {
          if (v46 == v47)
          {
            if (v48)
            {
              uint64_t v69 = 0;
              while (v46[v69] != v52)
              {
                if (v48 == ++v69)
                {
                  int v70 = v48;
                  goto LABEL_120;
                }
              }
              unsigned int v72 = &v46[v69];
              int v70 = v48;
              int v79 = v46;
            }
            else
            {
              int v70 = 0;
LABEL_120:
              int v79 = v46;
              unsigned int v72 = &v46[v48];
            }
          }
          else
          {
            unsigned int v71 = v161 & ((v52 >> 4) ^ (v52 >> 9));
            unsigned int v72 = &v46[v71];
            uint64_t v73 = *v72;
            if (*v72 == -1)
            {
              uint64_t v74 = 0;
LABEL_122:
              if (v74) {
                unsigned int v72 = v74;
              }
              uint64_t v78 = *v72;
            }
            else
            {
              uint64_t v74 = 0;
              int v75 = 1;
              while (v73 != v52)
              {
                if (v74) {
                  BOOL v76 = 0;
                }
                else {
                  BOOL v76 = v73 == -2;
                }
                if (v76) {
                  uint64_t v74 = v72;
                }
                unsigned int v77 = v71 + v75++;
                unsigned int v71 = v77 & v161;
                unsigned int v72 = &v46[v77 & v161];
                uint64_t v73 = *v72;
                if (*v72 == -1) {
                  goto LABEL_122;
                }
              }
              uint64_t v78 = v52;
            }
            if (v78 != v52) {
              unsigned int v72 = v157;
            }
            int v70 = v48;
            int v79 = v47;
          }
          if (v46 != v79) {
            int v70 = v162;
          }
          if (v72 == &v46[v70]) {
            break;
          }
        }
      }
      v45 += 4;
      if (v45 == v49) {
        goto LABEL_132;
      }
    }
LABEL_142:
    uint64_t v84 = *a5;
    unsigned int v85 = *((_DWORD *)a5 + 4);
    unint64_t v6 = a4;
    uint64_t v10 = v158;
    if (v85)
    {
      unsigned int v86 = (v85 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      BOOL v87 = (uint64_t *)(v84 + 48 * v86);
      uint64_t v88 = *v87;
      if (*v87 == v11) {
        goto LABEL_147;
      }
      int v89 = 1;
      while (v88 != -4096)
      {
        unsigned int v90 = v86 + v89++;
        unsigned int v86 = v90 & (v85 - 1);
        BOOL v87 = (uint64_t *)(v84 + 48 * v86);
        uint64_t v88 = *v87;
        if (*v87 == v11) {
          goto LABEL_147;
        }
      }
    }
    BOOL v87 = (uint64_t *)(v84 + 48 * v85);
LABEL_147:
    int v7 = a3;
    if ((uint64_t *)(v84 + 48 * v85) != v87)
    {
      uint64_t v91 = *((unsigned int *)v87 + 7);
      int v92 = (unsigned int *)v87 + 7;
      unsigned int v93 = *((_DWORD *)a4 + 5);
      if ((int)v91 - *((_DWORD *)v87 + 8) <= v93 - *((_DWORD *)a4 + 6))
      {
        uint64_t v106 = v87[2];
        if (v106 == v87[1]) {
          uint64_t v107 = v91;
        }
        else {
          uint64_t v107 = *((unsigned int *)v87 + 6);
        }
        if (v107)
        {
          uint64_t v108 = 8 * v107;
          uint64_t v109 = (unint64_t *)v87[2];
          while (*v109 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v109;
            v108 -= 8;
            if (!v108) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v109 = (unint64_t *)v87[2];
        }
        unsigned int v131 = (unint64_t *)(v106 + 8 * v107);
        if (v109 == v131) {
          goto LABEL_29;
        }
        uint64_t v133 = *a4;
        uint64_t v132 = a4[1];
        int v134 = *((_DWORD *)a4 + 4) - 1;
        if (v132 == *a4) {
          unsigned int v135 = *((_DWORD *)a4 + 5);
        }
        else {
          unsigned int v135 = *((_DWORD *)a4 + 4);
        }
        uint64_t v136 = (unint64_t *)(v132 + 8 * v135);
        unint64_t v137 = *v109;
        unsigned int v138 = *((_DWORD *)a4 + 5);
        uint64_t v139 = a4[1];
LABEL_235:
        if (v139 == v133)
        {
          unsigned int v140 = (unint64_t *)(v133 + 8 * v138);
          if (v138)
          {
            uint64_t v141 = 0;
            while (*(void *)(v133 + v141) != v137)
            {
              v141 += 8;
              if (8 * v138 == v141) {
                goto LABEL_254;
              }
            }
            unsigned int v140 = (unint64_t *)(v133 + v141);
          }
LABEL_254:
          uint64_t v139 = *a4;
        }
        else
        {
          unsigned int v142 = v134 & ((v137 >> 4) ^ (v137 >> 9));
          v143 = (unint64_t *)(v132 + 8 * v142);
          unint64_t v144 = *v143;
          if (*v143 == -1)
          {
            unsigned int v145 = 0;
LABEL_256:
            if (v145) {
              v143 = v145;
            }
            unint64_t v149 = *v143;
          }
          else
          {
            unsigned int v145 = 0;
            int v146 = 1;
            while (v144 != v137)
            {
              if (v145) {
                BOOL v147 = 0;
              }
              else {
                BOOL v147 = v144 == -2;
              }
              if (v147) {
                unsigned int v145 = v143;
              }
              unsigned int v148 = v142 + v146++;
              unsigned int v142 = v148 & v134;
              v143 = (unint64_t *)(v132 + 8 * (v148 & v134));
              unint64_t v144 = *v143;
              if (*v143 == -1) {
                goto LABEL_256;
              }
            }
            unint64_t v149 = v137;
          }
          if (v149 == v137) {
            unsigned int v140 = v143;
          }
          else {
            unsigned int v140 = v136;
          }
          unsigned int v138 = *((_DWORD *)a4 + 5);
          uint64_t v139 = a4[1];
        }
        if (v139 == v133) {
          unsigned int v150 = v138;
        }
        else {
          unsigned int v150 = *((_DWORD *)a4 + 4);
        }
        if (v140 == (unint64_t *)(v139 + 8 * v150))
        {
          uint64_t v151 = v109 + 1;
          while (v151 != v131)
          {
            unint64_t v152 = *v151++;
            unint64_t v137 = v152;
            if (v152 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v109 = v151 - 1;
              goto LABEL_235;
            }
          }
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v94 = a4[1];
        if (v94 == *a4) {
          uint64_t v95 = v93;
        }
        else {
          uint64_t v95 = *((unsigned int *)a4 + 4);
        }
        if (v95)
        {
          uint64_t v96 = 8 * v95;
          int v97 = (unint64_t *)a4[1];
          while (*v97 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v97;
            v96 -= 8;
            if (!v96) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          int v97 = (unint64_t *)a4[1];
        }
        int v111 = (unint64_t *)(v94 + 8 * v95);
        if (v97 == v111) {
          goto LABEL_29;
        }
        unsigned int v114 = *((_DWORD *)v87 + 6);
        unsigned int v113 = (unsigned int *)(v87 + 3);
        unsigned int v112 = v114;
        uint64_t v116 = *((void *)v113 - 2);
        uint64_t v115 = *((void *)v113 - 1);
        if (v115 == v116) {
          unsigned int v113 = v92;
        }
        unint64_t v117 = *v97;
        unsigned int v118 = v112 - 1;
        uint64_t v119 = v115;
LABEL_197:
        if (v119 == v116)
        {
          uint64_t v119 = v116;
          BOOL v120 = (void *)(v116 + 8 * v91);
          if (v91)
          {
            uint64_t v121 = 0;
            while (*(void *)(v116 + v121) != v117)
            {
              v121 += 8;
              if (8 * v91 == v121)
              {
                uint64_t v119 = v116;
                BOOL v120 = (void *)(v116 + 8 * v91);
                goto LABEL_221;
              }
            }
            BOOL v120 = (void *)(v116 + v121);
            uint64_t v119 = v116;
          }
        }
        else
        {
          unsigned int v122 = v118 & ((v117 >> 4) ^ (v117 >> 9));
          BOOL v120 = (void *)(v115 + 8 * v122);
          uint64_t v123 = *v120;
          if (*v120 == -1)
          {
            int v124 = 0;
LABEL_216:
            if (v124) {
              BOOL v120 = v124;
            }
            if (*v120 != v117) {
              BOOL v120 = (void *)(v115 + 8 * *v113);
            }
          }
          else
          {
            int v124 = 0;
            int v125 = 1;
            while (v123 != v117)
            {
              if (v124) {
                BOOL v126 = 0;
              }
              else {
                BOOL v126 = v123 == -2;
              }
              if (v126) {
                int v124 = v120;
              }
              unsigned int v127 = v122 + v125++;
              unsigned int v122 = v127 & v118;
              BOOL v120 = (void *)(v115 + 8 * (v127 & v118));
              uint64_t v123 = *v120;
              if (*v120 == -1) {
                goto LABEL_216;
              }
            }
          }
          uint64_t v119 = v115;
        }
LABEL_221:
        if (v119 == v116) {
          unsigned int v128 = v91;
        }
        else {
          unsigned int v128 = v112;
        }
        if (v120 == (void *)(v119 + 8 * v128))
        {
          int v129 = v97 + 1;
          while (v129 != v111)
          {
            unint64_t v130 = *v129++;
            unint64_t v117 = v130;
            if (v130 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v97 = v129 - 1;
              goto LABEL_197;
            }
          }
          goto LABEL_29;
        }
      }
      unint64_t v153 = *(unsigned int *)(a2 + 136);
      if (v153 >= *(unsigned int *)(a2 + 140)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a2 + 128) + 8 * v153) = v11;
      ++*(_DWORD *)(a2 + 136);
    }
    goto LABEL_29;
  }
}

uint64_t sub_1CC830CE0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v22 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v22;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x200000000;
  unsigned int v6 = *(_DWORD *)(a2 + 40);
  if (v6 && a1 != a2)
  {
    int v7 = *(const void **)(a2 + 32);
    if (v7 == (const void *)(a2 + 48))
    {
      if (v6 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 48), v7, 8 * *(unsigned int *)(a2 + 40));
      *(_DWORD *)(a1 + 40) = v6;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
      int v20 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 40) = v6;
      *(_DWORD *)(a1 + 44) = v20;
      *(void *)(a2 + 32) = a2 + 48;
      *(_DWORD *)(a2 + 44) = 0;
    }
    *(_DWORD *)(a2 + 40) = 0;
  }
  unsigned int v8 = (void *)(a1 + 96);
  *(void *)(a1 + 64) = a1 + 96;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  if (v9 == v10)
  {
    *(void *)(a1 + 72) = v8;
    uint64_t v11 = *(unsigned int *)(a2 + 84);
    if (v11) {
      memmove(v8, *(const void **)(a2 + 72), 8 * v11);
    }
  }
  else
  {
    *(void *)(a1 + 72) = v9;
    *(void *)(a2 + 72) = v10;
  }
  *(void *)(a1 + 128) = a1 + 144;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a2 + 80) = 4;
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a1 + 136) = 0xA00000000;
  unsigned int v12 = *(_DWORD *)(a2 + 136);
  if (v12 && a1 != a2)
  {
    uint64_t v13 = *(const void **)(a2 + 128);
    if (v13 == (const void *)(a2 + 144))
    {
      if (v12 >= 0xB) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 144), v13, 8 * *(unsigned int *)(a2 + 136));
      *(_DWORD *)(a1 + 136) = v12;
    }
    else
    {
      *(void *)(a1 + 128) = v13;
      int v21 = *(_DWORD *)(a2 + 140);
      *(_DWORD *)(a1 + 136) = v12;
      *(_DWORD *)(a1 + 140) = v21;
      *(void *)(a2 + 128) = a2 + 144;
      *(_DWORD *)(a2 + 140) = 0;
    }
    *(_DWORD *)(a2 + 136) = 0;
  }
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 1;
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  long long v14 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v14;
  *(void *)(a1 + 280) = a1 + 296;
  *(void *)(a1 + 288) = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a2 + 288);
  if (v15 && a1 != a2)
  {
    uint64_t v16 = *(const void **)(a2 + 280);
    if (v16 == (const void *)(a2 + 296))
    {
      if (v15 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 296), v16, 8 * *(unsigned int *)(a2 + 288));
      *(_DWORD *)(a1 + 288) = v15;
    }
    else
    {
      *(void *)(a1 + 280) = v16;
      *(_DWORD *)(a1 + 288) = v15;
      *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
      *(void *)(a2 + 280) = a2 + 296;
      *(_DWORD *)(a2 + 292) = 0;
    }
    *(_DWORD *)(a2 + 288) = 0;
  }
  *(void *)(a1 + 360) = a1 + 376;
  *(void *)(a1 + 368) = 0x800000000;
  unsigned int v17 = *(_DWORD *)(a2 + 368);
  if (v17 && a1 != a2)
  {
    int v18 = *(const void **)(a2 + 360);
    if (v18 == (const void *)(a2 + 376))
    {
      if (v17 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a1 + 376), v18, 8 * *(unsigned int *)(a2 + 368));
      *(_DWORD *)(a1 + 368) = v17;
    }
    else
    {
      *(void *)(a1 + 360) = v18;
      *(_DWORD *)(a1 + 368) = v17;
      *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
      *(void *)(a2 + 360) = a2 + 376;
      *(_DWORD *)(a2 + 372) = 0;
    }
    *(_DWORD *)(a2 + 368) = 0;
  }
  *(_WORD *)(a1 + 440) = *(_WORD *)(a2 + 440);
  return a1;
}

uint64_t sub_1CC8310A4(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 32) + 36);
  uint64_t v3 = 5;
  if (v2 > 2560)
  {
    if ((v2 - 2561) >= 0x10)
    {
      int v17 = -1;
      int v13 = 2;
      int v15 = 4;
      goto LABEL_26;
    }
  }
  else
  {
    if ((v2 - 2471) < 4) {
      uint64_t v3 = 6;
    }
    if ((v2 - 2545) < 0x10) {
      uint64_t v3 = 4;
    }
  }
  unsigned int v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v5 = v4[4 * v3];
  if (*(unsigned char *)(v5 + 16) != 16) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v4[4];
  if (v6)
  {
    int v7 = (void *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u) {
      int v7 = (void *)*v7;
    }
    int v8 = *(_DWORD *)v7;
  }
  else
  {
    int v8 = 1;
  }
  uint64_t v9 = *v4;
  uint64_t v10 = (unint64_t *)(v9 + 24);
  unsigned int v11 = *(_DWORD *)(v9 + 32);
  unsigned int v12 = (void *)(v9 + 24);
  if (v11 >= 0x41) {
    unsigned int v12 = (void *)*v10;
  }
  int v13 = *(_DWORD *)((char *)&unk_1CFB27104 + ((uint64_t)(*v12 << 32) >> 30));
  if (v11 > 0x40) {
    uint64_t v10 = (unint64_t *)*v10;
  }
  unint64_t v14 = *v10;
  if ((v14 | 4) != 0xC && (v14 != 16 ? (BOOL v24 = (v8 & 8) == 0) : (BOOL v24 = 0), v24))
  {
    int v15 = 4;
    unsigned int v25 = 8;
    do
    {
      BOOL v24 = (v8 & (v25 >> 1)) == 0;
      v25 >>= 1;
      --v15;
    }
    while (v24);
  }
  else
  {
    int v15 = 4;
  }
  if (v5)
  {
    uint64_t v16 = (void *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      uint64_t v16 = (void *)*v16;
    }
    int v17 = *(_DWORD *)v16;
  }
  else
  {
    int v17 = -1;
  }
LABEL_26:
  unsigned int v18 = v2 - 2545;
  if ((v2 - 2471) >= 8) {
    int v19 = 0;
  }
  else {
    int v19 = v17;
  }
  if ((v2 - 2471) >= 8) {
    int v20 = 1;
  }
  else {
    int v20 = v15;
  }
  if ((v2 - 2471) >= 8) {
    char v21 = 3;
  }
  else {
    char v21 = 2;
  }
  if (v18 <= 0x1F) {
    int v22 = v17;
  }
  else {
    int v22 = v19;
  }
  if (v18 <= 0x1F)
  {
    char v23 = 1;
  }
  else
  {
    int v15 = v20;
    char v23 = v21;
  }
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = v22;
  *(_DWORD *)(result + 12) = v15 * v13;
  *(unsigned char *)(result + 16) = v23;
  return result;
}

#error "1CC83123C: too big function (funcsize=0)"

uint64_t sub_1CC846D4C(uint64_t result, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)(result + 448 * a2);
  if (v5 != a3)
  {
    uint64_t v6 = (void *)(a5 + 40);
    do
    {
      if (a3[32] == a4)
      {
        a3[32] = a5;
        if (*(void *)(a3[31] + 40) != a5)
        {
          uint64_t v7 = *(void *)(a5 + 48);
          if (v7) {
            uint64_t v8 = v7 - 24;
          }
          else {
            uint64_t v8 = 0;
          }
          a3[31] = v8;
        }
      }
      if (a3[34] == a4)
      {
        a3[34] = a5;
        if (*(void *)(a3[33] + 40) != a5)
        {
          uint64_t v9 = (void *)*v6;
          if ((void *)*v6 == v6)
          {
            uint64_t v10 = 0;
          }
          else
          {
            if (v9) {
              uint64_t v10 = v9 - 3;
            }
            else {
              uint64_t v10 = 0;
            }
            if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB) {
              uint64_t v10 = 0;
            }
          }
          a3[33] = v10;
        }
      }
      a3 += 56;
    }
    while (a3 != v5);
  }
  return result;
}

void sub_1CC846DF8(llvm::Value **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t ***a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  uint64_t v10 = a5;
  v271[1] = *MEMORY[0x1E4F143B8];
  if (a4 >= 4)
  {
    int v13 = **a5;
    int v256 = v258;
    uint64_t v257 = 0x200000000;
    v261 = v13;
    int v262 = &v270;
    uint64_t v263 = v271;
    uint64_t v264 = 0;
    int v265 = 0;
    __int16 v266 = 512;
    char v267 = 7;
    uint64_t v268 = 0;
    uint64_t v269 = 0;
    v270 = &unk_1F2616E88;
    v271[0] = &unk_1F2617008;
    uint64_t v259 = a5;
    v260 = a5 + 5;
    for (uint64_t i = *(void *)(a6 + 48); i != a6 + 40; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v15 = i - 24;
      if (i) {
        uint64_t v16 = i - 24;
      }
      else {
        uint64_t v16 = 0;
      }
      if (*(unsigned char *)(v16 + 16) != 83) {
        goto LABEL_17;
      }
    }
    uint64_t v15 = 0;
LABEL_17:
    if (v15) {
      uint64_t v22 = v15 + 24;
    }
    else {
      uint64_t v22 = a6 + 40;
    }
    sub_1CBF537B4((uint64_t)&v248, (uint64_t **)a6, v22, 0, 0, 0);
    uint64_t v23 = **a7;
    uint64_t v232 = v234;
    uint64_t v233 = 0x200000000;
    uint64_t v237 = v23;
    v238 = &v246;
    v239 = &v247;
    uint64_t v240 = 0;
    int v241 = 0;
    __int16 v242 = 512;
    char v243 = 7;
    uint64_t v244 = 0;
    uint64_t v245 = 0;
    uint64_t v246 = &unk_1F2616E88;
    uint64_t v247 = &unk_1F2617008;
    BOOL v235 = a7;
    unsigned int v236 = a7 + 5;
    uint64_t v24 = *v261 + 1936;
    if (*(void *)(*(void *)(a2 + 8) + 280))
    {
      uint64_t v25 = *v261 + 1960;
      v228 = "smp-mask";
      __int16 v230 = 259;
      uint64_t v27 = sub_1CB93113C((uint64_t)&v248, v25, 2, (uint64_t)&v228);
      uint64_t v28 = *(void *)(*(void *)(a2 + 8) + 280);
      uint64_t v29 = (unsigned int *)(v28 + 24);
      if (*(_DWORD *)(v28 + 32) >= 0x41u) {
        uint64_t v29 = *(unsigned int **)v29;
      }
      uint64_t v30 = *v29;
      uint64_t v31 = *(llvm::ConstantInt **)(*(void *)v253 + 1960);
      unsigned int v32 = *(_DWORD *)(*(void *)v253 + 1968);
      unsigned int v229 = v32 >> 8;
      if (v32 >> 8 > 0x40) {
        operator new[]();
      }
      if (v32 <= 0xFF) {
        unint64_t v33 = 0;
      }
      else {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v32) + 63);
      }
      v228 = (const char *)(v33 & v30);
      uint64_t v35 = llvm::ConstantInt::get(v31, (llvm::LLVMContext *)&v228, v26);
      if (v229 >= 0x41 && v228) {
        MEMORY[0x1D25D9CB0](v228, 0x1000C8000313F17);
      }
      int v36 = *((_DWORD *)v27 + 5);
      uint64_t v37 = v36 & 0x7FFFFFF;
      if ((v36 & 0x7FFFFFF) == *((_DWORD *)v27 + 15))
      {
        unsigned int v109 = v37 + (v37 >> 1);
        if (v109 <= 2) {
          uint64_t v110 = 2;
        }
        else {
          uint64_t v110 = v109;
        }
        *((_DWORD *)v27 + 15) = v110;
        __p = v10;
        if ((v36 & 0x40000000) != 0) {
          int v111 = (uint64_t *)*((void *)v27 - 1);
        }
        else {
          int v111 = (uint64_t *)((char *)v27 - 32 * v37);
        }
        unsigned int v112 = operator new(40 * v110);
        *((void *)v27 - 1) = v112;
        unsigned int v113 = v112;
        do
        {
          *unsigned int v113 = 0;
          v113[1] = 0;
          v113[2] = 0;
          v113[3] = v27;
          v113 += 4;
        }
        while (v113 != &v112[4 * v110]);
        int v114 = *((_DWORD *)v27 + 5);
        if ((v114 & 0x40000000) != 0) {
          uint64_t v115 = (uint64_t)v112;
        }
        else {
          uint64_t v115 = (uint64_t)v27 - 32 * (v114 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v228, v111, &v111[4 * v37], v115);
        if (v37)
        {
          memmove((void *)(v115 + 32 * v110), &v111[4 * v37], 8 * v37);
          uint64_t v116 = 4 * v37;
          do
          {
            unint64_t v117 = &v111[v116];
            if (v111[v116 - 4])
            {
              *(void *)*(v117 - 2) = *(v117 - 3);
              uint64_t v118 = *(v117 - 3);
              if (v118) {
                *(void *)(v118 + 16) = *(v117 - 2);
              }
            }
            v116 -= 4;
          }
          while (v116 * 8);
        }
        operator delete(v111);
        int v36 = *((_DWORD *)v27 + 5);
        uint64_t v10 = __p;
      }
      uint64_t v38 = (v36 + 1) & 0x7FFFFFF;
      *((_DWORD *)v27 + 5) = v36 & 0xF8000000 | (v36 + 1) & 0x7FFFFFF;
      uint64_t v39 = (v38 - 1);
      if ((v36 & 0x40000000) != 0) {
        unsigned int v40 = (char *)*((void *)v27 - 1);
      }
      else {
        unsigned int v40 = (char *)v27 - 32 * v38;
      }
      unsigned int v41 = &v40[32 * v39];
      if (*(void *)v41)
      {
        **((void **)v41 + 2) = *((void *)v41 + 1);
        uint64_t v108 = *((void *)v41 + 1);
        if (v108) {
          *(void *)(v108 + 16) = *((void *)v41 + 2);
        }
      }
      *(void *)unsigned int v41 = v35;
      if (v35)
      {
        uint64_t v44 = v35[1];
        int v43 = (char **)(v35 + 1);
        uint64_t v42 = v44;
        uint64_t v45 = &v40[32 * v39];
        *((void *)v45 + 1) = v44;
        if (v44) {
          *(void *)(v42 + 16) = v45 + 8;
        }
        *((void *)v45 + 2) = v43;
        *int v43 = v41;
      }
      int v46 = *((_DWORD *)v27 + 5);
      uint64_t v47 = v46 & 0x7FFFFFF;
      if ((v46 & 0x40000000) != 0) {
        uint64_t v48 = (char *)*((void *)v27 - 1);
      }
      else {
        uint64_t v48 = (char *)v27 - 32 * v47;
      }
      *(void *)&v48[32 * *((unsigned int *)v27 + 15) + 8 * (v47 - 1)] = v10;
      uint64_t v49 = *(void *)(*(void *)(a2 + 8) + 256);
      uint64_t v50 = (unsigned int *)(v49 + 24);
      if (*(_DWORD *)(v49 + 32) >= 0x41u) {
        uint64_t v50 = *(unsigned int **)v50;
      }
      uint64_t v51 = *v50;
      uint64_t v52 = *(llvm::ConstantInt **)(*(void *)v237 + 1960);
      unsigned int v53 = *(_DWORD *)(*(void *)v237 + 1968);
      unsigned int v229 = v53 >> 8;
      if (v53 >> 8 > 0x40) {
        operator new[]();
      }
      if (v53 <= 0xFF) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
      }
      v228 = (const char *)(v54 & v51);
      uint64_t v55 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v228, v34);
      if (v229 >= 0x41 && v228) {
        MEMORY[0x1D25D9CB0](v228, 0x1000C8000313F17);
      }
      __int16 v230 = 257;
      uint64_t v56 = sub_1CC2429AC((uint64_t)&v232, (uint64_t)v27, (uint64_t)v55, (uint64_t)&v228, 0);
      __int16 v227 = 257;
      int v57 = v27;
      if (*(void *)v27 != v24)
      {
        if (*((unsigned __int8 *)v27 + 16) <= 0x14u)
        {
          uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v254 + 224))(v254, 38, v27, v24);
          int v57 = (llvm::Value *)v83;
          if (v83)
          {
            if (*(unsigned __int8 *)(v83 + 16) >= 0x1Cu)
            {
              (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)v255 + 16))(v255, v83, v226, v251, v252);
              if (v249)
              {
                int v217 = (llvm::MDNode **)v248;
                unsigned int v218 = (llvm::MDNode **)((char *)v248 + 16 * v249);
                do
                {
                  llvm::Instruction::setMetadata(v57, *(_DWORD *)v217, v217[1]);
                  v217 += 2;
                }
                while (v217 != v218);
              }
            }
          }
        }
        else
        {
          __int16 v230 = 257;
          int v57 = llvm::CastInst::Create(38, (uint64_t)v27, v24, &v228, 0);
          (*(void (**)(uint64_t, llvm::Value *, _OWORD *, uint64_t, uint64_t))(*(void *)v255 + 16))(v255, v57, v226, v251, v252);
          if (v249)
          {
            uint64_t v58 = (llvm::MDNode **)v248;
            uint64_t v59 = (llvm::MDNode **)((char *)v248 + 16 * v249);
            do
            {
              llvm::Instruction::setMetadata(v57, *(_DWORD *)v58, v58[1]);
              v58 += 2;
            }
            while (v58 != v59);
          }
        }
      }
    }
    else
    {
      v228 = "smp-mask";
      __int16 v230 = 259;
      int v57 = sub_1CB93113C((uint64_t)&v248, v24, 2, (uint64_t)&v228);
      int v61 = *(llvm::ConstantInt **)(*(void *)v253 + 1936);
      unsigned int v62 = *(_DWORD *)(*(void *)v253 + 1944);
      unsigned int v229 = v62 >> 8;
      if (v62 >> 8 > 0x40) {
        operator new[]();
      }
      if (v62 <= 0xFF) {
        LOBYTE(v63) = 0;
      }
      else {
        unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v62) + 63);
      }
      v228 = (const char *)(v63 & 1);
      int v65 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v228, v60);
      if (v229 >= 0x41 && v228) {
        MEMORY[0x1D25D9CB0](v228, 0x1000C8000313F17);
      }
      int v66 = *((_DWORD *)v57 + 5);
      uint64_t v67 = v66 & 0x7FFFFFF;
      if ((v66 & 0x7FFFFFF) == *((_DWORD *)v57 + 15))
      {
        unsigned int v120 = v67 + (v67 >> 1);
        if (v120 <= 2) {
          uint64_t v121 = 2;
        }
        else {
          uint64_t v121 = v120;
        }
        *((_DWORD *)v57 + 15) = v121;
        if ((v66 & 0x40000000) != 0) {
          unsigned int v122 = (uint64_t *)*((void *)v57 - 1);
        }
        else {
          unsigned int v122 = (uint64_t *)((char *)v57 - 32 * v67);
        }
        uint64_t v123 = operator new(40 * v121);
        *((void *)v57 - 1) = v123;
        int v124 = v123;
        do
        {
          void *v124 = 0;
          v124[1] = 0;
          v124[2] = 0;
          v124[3] = v57;
          v124 += 4;
        }
        while (v124 != &v123[4 * v121]);
        int v125 = *((_DWORD *)v57 + 5);
        if ((v125 & 0x40000000) != 0) {
          uint64_t v126 = (uint64_t)v123;
        }
        else {
          uint64_t v126 = (uint64_t)v57 - 32 * (v125 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v228, v122, &v122[4 * v67], v126);
        if (v67)
        {
          memmove((void *)(v126 + 32 * v121), &v122[4 * v67], 8 * v67);
          uint64_t v127 = 4 * v67;
          do
          {
            unsigned int v128 = &v122[v127];
            if (v122[v127 - 4])
            {
              *(void *)*(v128 - 2) = *(v128 - 3);
              uint64_t v129 = *(v128 - 3);
              if (v129) {
                *(void *)(v129 + 16) = *(v128 - 2);
              }
            }
            v127 -= 4;
          }
          while (v127 * 8);
        }
        operator delete(v122);
        int v66 = *((_DWORD *)v57 + 5);
      }
      uint64_t v68 = (v66 + 1) & 0x7FFFFFF;
      *((_DWORD *)v57 + 5) = v66 & 0xF8000000 | (v66 + 1) & 0x7FFFFFF;
      uint64_t v69 = (v68 - 1);
      if ((v66 & 0x40000000) != 0) {
        int v70 = (char *)*((void *)v57 - 1);
      }
      else {
        int v70 = (char *)v57 - 32 * v68;
      }
      unsigned int v71 = &v70[32 * v69];
      if (*(void *)v71)
      {
        **((void **)v71 + 2) = *((void *)v71 + 1);
        uint64_t v119 = *((void *)v71 + 1);
        if (v119) {
          *(void *)(v119 + 16) = *((void *)v71 + 2);
        }
      }
      *(void *)unsigned int v71 = v65;
      if (v65)
      {
        uint64_t v74 = v65[1];
        uint64_t v73 = (char **)(v65 + 1);
        uint64_t v72 = v74;
        int v75 = &v70[32 * v69];
        *((void *)v75 + 1) = v74;
        if (v74) {
          *(void *)(v72 + 16) = v75 + 8;
        }
        *((void *)v75 + 2) = v73;
        *uint64_t v73 = v71;
      }
      int v76 = *((_DWORD *)v57 + 5);
      uint64_t v77 = v76 & 0x7FFFFFF;
      if ((v76 & 0x40000000) != 0) {
        uint64_t v78 = (char *)*((void *)v57 - 1);
      }
      else {
        uint64_t v78 = (char *)v57 - 32 * v77;
      }
      *(void *)&v78[32 * *((unsigned int *)v57 + 15) + 8 * (v77 - 1)] = v10;
      int v79 = *(llvm::ConstantInt **)(*(void *)v237 + 1936);
      unsigned int v80 = *(_DWORD *)(*(void *)v237 + 1944);
      unsigned int v229 = v80 >> 8;
      if (v80 >> 8 > 0x40) {
        operator new[]();
      }
      if (v80 <= 0xFF) {
        LOBYTE(v81) = 0;
      }
      else {
        unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v80) + 63);
      }
      v228 = (const char *)(v81 & 1);
      uint64_t v82 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v228, v64);
      if (v229 >= 0x41 && v228) {
        MEMORY[0x1D25D9CB0](v228, 0x1000C8000313F17);
      }
      __int16 v230 = 257;
      uint64_t v56 = sub_1CC242524((uint64_t)&v232, (uint64_t)v57, (uint64_t)v82, (uint64_t)&v228, 0, 0);
      uint64_t v27 = v57;
    }
    int v84 = *((_DWORD *)v27 + 5);
    uint64_t v85 = v84 & 0x7FFFFFF;
    if ((v84 & 0x7FFFFFF) == *((_DWORD *)v27 + 15))
    {
      unsigned int v98 = v85 + (v85 >> 1);
      if (v98 <= 2) {
        uint64_t v99 = 2;
      }
      else {
        uint64_t v99 = v98;
      }
      *((_DWORD *)v27 + 15) = v99;
      if ((v84 & 0x40000000) != 0) {
        uint64_t v100 = (uint64_t *)*((void *)v27 - 1);
      }
      else {
        uint64_t v100 = (uint64_t *)((char *)v27 - 32 * v85);
      }
      uint64_t v101 = operator new(40 * v99);
      *((void *)v27 - 1) = v101;
      __int16 v102 = v101;
      do
      {
        *__int16 v102 = 0;
        v102[1] = 0;
        v102[2] = 0;
        v102[3] = v27;
        v102 += 4;
      }
      while (v102 != &v101[4 * v99]);
      int v103 = *((_DWORD *)v27 + 5);
      if ((v103 & 0x40000000) != 0) {
        uint64_t v104 = (uint64_t)v101;
      }
      else {
        uint64_t v104 = (uint64_t)v27 - 32 * (v103 & 0x7FFFFFF);
      }
      sub_1CC5E4108((uint64_t)&v228, v100, &v100[4 * v85], v104);
      if (v85)
      {
        memmove((void *)(v104 + 32 * v99), &v100[4 * v85], 8 * v85);
        uint64_t v105 = 4 * v85;
        do
        {
          uint64_t v106 = &v100[v105];
          if (v100[v105 - 4])
          {
            *(void *)*(v106 - 2) = *(v106 - 3);
            uint64_t v107 = *(v106 - 3);
            if (v107) {
              *(void *)(v107 + 16) = *(v106 - 2);
            }
          }
          v105 -= 4;
        }
        while (v105 * 8);
      }
      operator delete(v100);
      int v84 = *((_DWORD *)v27 + 5);
    }
    uint64_t v86 = (v84 + 1) & 0x7FFFFFF;
    *((_DWORD *)v27 + 5) = v84 & 0xF8000000 | (v84 + 1) & 0x7FFFFFF;
    uint64_t v87 = (v86 - 1);
    if ((v84 & 0x40000000) != 0) {
      uint64_t v88 = (char *)*((void *)v27 - 1);
    }
    else {
      uint64_t v88 = (char *)v27 - 32 * v86;
    }
    int v89 = &v88[32 * v87];
    if (*(void *)v89)
    {
      **((void **)v89 + 2) = *((void *)v89 + 1);
      uint64_t v97 = *((void *)v89 + 1);
      if (v97) {
        *(void *)(v97 + 16) = *((void *)v89 + 2);
      }
    }
    *(void *)int v89 = v56;
    if (v56)
    {
      unsigned int v90 = (char **)((char *)v56 + 8);
      uint64_t v91 = *((void *)v56 + 1);
      int v92 = &v88[32 * v87];
      *((void *)v92 + 1) = v91;
      if (v91) {
        *(void *)(v91 + 16) = v92 + 8;
      }
      *((void *)v92 + 2) = v90;
      void *v90 = v89;
    }
    int v93 = *((_DWORD *)v27 + 5);
    uint64_t v94 = v93 & 0x7FFFFFF;
    if ((v93 & 0x40000000) != 0) {
      uint64_t v95 = (char *)*((void *)v27 - 1);
    }
    else {
      uint64_t v95 = (char *)v27 - 32 * v94;
    }
    *(void *)&v95[32 * *((unsigned int *)v27 + 15) + 8 * (v94 - 1)] = a8;
    *a1 = v57;
    a1[1] = v56;
    a1[2] = 0;
    if (v232 != v234) {
      free(v232);
    }
    if (v248 != v250) {
      free(v248);
    }
    uint64_t v96 = v256;
    if (v256 == v258) {
      return;
    }
LABEL_222:
    free(v96);
    return;
  }
  unsigned int v18 = **a5;
  int v256 = v258;
  uint64_t v257 = 0x200000000;
  v261 = v18;
  int v262 = &v270;
  uint64_t v263 = v271;
  uint64_t v264 = 0;
  int v265 = 0;
  __int16 v266 = 512;
  char v267 = 7;
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  v270 = &unk_1F2616E88;
  v271[0] = &unk_1F2617008;
  uint64_t v259 = a5;
  v260 = a5 + 5;
  for (uint64_t j = *(void *)(a6 + 48); j != a6 + 40; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v20 = j - 24;
    if (j) {
      uint64_t v21 = j - 24;
    }
    else {
      uint64_t v21 = 0;
    }
    if (*(unsigned char *)(v21 + 16) != 83) {
      goto LABEL_148;
    }
  }
  uint64_t v20 = 0;
LABEL_148:
  if (v20) {
    uint64_t v130 = v20 + 24;
  }
  else {
    uint64_t v130 = a6 + 40;
  }
  sub_1CBF537B4((uint64_t)&v248, (uint64_t **)a6, v130, 0, 0, 0);
  uint64_t v131 = **a7;
  uint64_t v232 = v234;
  uint64_t v233 = 0x200000000;
  uint64_t v237 = v131;
  v238 = &v246;
  v239 = &v247;
  uint64_t v240 = 0;
  int v241 = 0;
  __int16 v242 = 512;
  char v243 = 7;
  uint64_t v244 = 0;
  uint64_t v245 = 0;
  uint64_t v246 = &unk_1F2616E88;
  uint64_t v247 = &unk_1F2617008;
  BOOL v235 = a7;
  unsigned int v236 = a7 + 5;
  uint64_t v132 = *v261;
  uint64_t v133 = *v261 + 1936;
  if (*(unsigned char *)(a3 + 224))
  {
    memset(v226, 0, sizeof(v226));
    sub_1CC849BD0((unint64_t *)(a3 + 232), v226);
    unsigned int v135 = sub_1CC849CD4(***v10, (uint64_t *)v226, v134);
    if (*(unsigned char *)(a2 + 64)) {
      int v136 = 7;
    }
    else {
      int v136 = 6;
    }
    uint64_t v137 = sub_1CD0FF450(*(uint64_t ***)(a2 + 24), v136);
    unsigned int v138 = (uint64_t **)v137;
    if (v137) {
      uint64_t v139 = *(uint64_t ***)(v137 + 24);
    }
    else {
      uint64_t v139 = 0;
    }
    v231 = v135;
    v228 = "orig-col-msk";
    __int16 v230 = 259;
    unsigned int v142 = (uint64_t *)&v231;
    uint64_t v143 = 1;
  }
  else
  {
    if (*(unsigned char *)(a2 + 64)) {
      int v140 = 5;
    }
    else {
      int v140 = 4;
    }
    uint64_t v141 = sub_1CD0FF450(*(uint64_t ***)(a2 + 24), v140);
    unsigned int v138 = (uint64_t **)v141;
    if (v141) {
      uint64_t v139 = *(uint64_t ***)(v141 + 24);
    }
    else {
      uint64_t v139 = 0;
    }
    v228 = "orig-col-msk";
    __int16 v230 = 259;
    unsigned int v142 = 0;
    uint64_t v143 = 0;
  }
  uint64_t v144 = sub_1CB845BAC((uint64_t *)&v256, v139, v138, v142, v143, (uint64_t)&v228, 0);
  unsigned int v145 = (llvm::Value *)v144;
  if (*(_DWORD *)(a2 + 60) != 4) {
    goto LABEL_306;
  }
  *(void *)&v226[0] = "orig-col-msk-16";
  __int16 v227 = 259;
  if (*(void *)v144 != v133)
  {
    if (*(unsigned __int8 *)(v144 + 16) <= 0x14u)
    {
      uint64_t v148 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v262 + 28))(v262, 38, v144, v132 + 1936);
      unsigned int v145 = (llvm::Value *)v148;
      if (v148)
      {
        if (*(unsigned __int8 *)(v148 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, _OWORD *, uint64_t ***, void **))(*v263 + 16))(v263, v148, v226, v259, v260);
          if (v257)
          {
            uint64_t v219 = (uint64_t)v256;
            v220 = &v256[16 * v257];
            do
            {
              llvm::Instruction::setMetadata(v145, *(_DWORD *)v219, *(llvm::MDNode **)(v219 + 8));
              v219 += 16;
            }
            while ((unsigned char *)v219 != v220);
          }
        }
      }
    }
    else
    {
      __int16 v230 = 257;
      unsigned int v145 = llvm::CastInst::Create(38, v144, v132 + 1936, &v228, 0);
      (*(void (**)(void *, llvm::Value *, _OWORD *, uint64_t ***, void **))(*v263 + 16))(v263, v145, v226, v259, v260);
      if (v257)
      {
        uint64_t v146 = (uint64_t)v256;
        BOOL v147 = &v256[16 * v257];
        do
        {
          llvm::Instruction::setMetadata(v145, *(_DWORD *)v146, *(llvm::MDNode **)(v146 + 8));
          v146 += 16;
        }
        while ((unsigned char *)v146 != v147);
      }
    }
  }
  uint64_t v149 = v132 + 1936;
  if (*(_DWORD *)(a2 + 60) != 4)
  {
LABEL_306:
    if (*(unsigned char *)(a2 + 64)) {
      uint64_t v149 = v132 + 1984;
    }
    else {
      uint64_t v149 = v132 + 1960;
    }
  }
  v228 = "col-mask";
  __int16 v230 = 259;
  unsigned int v150 = sub_1CB93113C((uint64_t)&v248, v149, 2, (uint64_t)&v228);
  unint64_t v151 = *(unsigned int *)(a2 + 60);
  v228 = "cvg-msk-next";
  __int16 v230 = 259;
  unint64_t v152 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v150, v151, 0);
  unint64_t v153 = sub_1CC2429AC((uint64_t)&v232, (uint64_t)v150, (uint64_t)v152, (uint64_t)&v228, 0);
  *(void *)&v226[0] = "col-mask-16";
  __int16 v227 = 259;
  v154 = (unsigned __int8 *)v150;
  if (*(void *)v150 != v133)
  {
    if (*((unsigned __int8 *)v150 + 16) <= 0x14u)
    {
      v154 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Instruction *, uint64_t))(*(void *)v254 + 224))(v254, 38, v150, v133);
      if (v154) {
        BOOL v157 = v154[16] >= 0x1Cu;
      }
      else {
        BOOL v157 = 0;
      }
      if (v157)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, _OWORD *, uint64_t, uint64_t))(*(void *)v255 + 16))(v255, v154, v226, v251, v252);
        if (v249)
        {
          v213 = (llvm::MDNode **)v248;
          unsigned int v214 = (llvm::MDNode **)((char *)v248 + 16 * v249);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v154, *(_DWORD *)v213, v213[1]);
            v213 += 2;
          }
          while (v213 != v214);
        }
      }
    }
    else
    {
      __int16 v230 = 257;
      v154 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v150, v133, &v228, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, _OWORD *, uint64_t, uint64_t))(*(void *)v255 + 16))(v255, v154, v226, v251, v252);
      if (v249)
      {
        uint64_t v155 = (llvm::MDNode **)v248;
        v156 = (llvm::MDNode **)((char *)v248 + 16 * v249);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v154, *(_DWORD *)v155, v155[1]);
          v155 += 2;
        }
        while (v155 != v156);
      }
    }
  }
  *(void *)&v226[0] = "cvg-mask-next-16";
  __int16 v227 = 259;
  v158 = (unsigned __int8 *)v153;
  if (*(void *)v153 != v133)
  {
    if (*((unsigned __int8 *)v153 + 16) <= 0x14u)
    {
      v158 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v238 + 28))(v238, 38, v153, v133);
      if (v158) {
        BOOL v161 = v158[16] >= 0x1Cu;
      }
      else {
        BOOL v161 = 0;
      }
      if (v161)
      {
        (*((void (**)(void **, unsigned __int8 *, _OWORD *, uint64_t **, void **))*v239 + 2))(v239, v158, v226, v235, v236);
        if (v233)
        {
          v215 = (llvm::MDNode **)v232;
          uint64_t v216 = (llvm::MDNode **)((char *)v232 + 16 * v233);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v158, *(_DWORD *)v215, v215[1]);
            v215 += 2;
          }
          while (v215 != v216);
        }
      }
    }
    else
    {
      __int16 v230 = 257;
      v158 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v153, v133, &v228, 0);
      (*((void (**)(void **, unsigned __int8 *, _OWORD *, uint64_t **, void **))*v239 + 2))(v239, v158, v226, v235, v236);
      if (v233)
      {
        unsigned int v159 = (llvm::MDNode **)v232;
        unsigned int v160 = (llvm::MDNode **)((char *)v232 + 16 * v233);
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v158, *(_DWORD *)v159, v159[1]);
          v159 += 2;
        }
        while (v159 != v160);
      }
    }
  }
  int v162 = *((_DWORD *)v150 + 5);
  uint64_t v163 = v162 & 0x7FFFFFF;
  if ((v162 & 0x7FFFFFF) == *((_DWORD *)v150 + 15))
  {
    unsigned int v193 = v163 + (v163 >> 1);
    if (v193 <= 2) {
      uint64_t v194 = 2;
    }
    else {
      uint64_t v194 = v193;
    }
    *((_DWORD *)v150 + 15) = v194;
    __pa = v10;
    if ((v162 & 0x40000000) != 0) {
      BOOL v195 = (uint64_t *)*((void *)v150 - 1);
    }
    else {
      BOOL v195 = (uint64_t *)((char *)v150 - 32 * v163);
    }
    int v221 = a1;
    uint64_t v196 = operator new(40 * v194);
    *((void *)v150 - 1) = v196;
    v197 = v196;
    do
    {
      void *v197 = 0;
      v197[1] = 0;
      v197[2] = 0;
      v197[3] = v150;
      v197 += 4;
    }
    while (v197 != &v196[4 * v194]);
    int v198 = *((_DWORD *)v150 + 5);
    if ((v198 & 0x40000000) != 0) {
      uint64_t v199 = (uint64_t)v196;
    }
    else {
      uint64_t v199 = (uint64_t)v150 - 32 * (v198 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v228, v195, &v195[4 * v163], v199);
    if (v163)
    {
      memmove((void *)(v199 + 32 * v194), &v195[4 * v163], 8 * v163);
      uint64_t v200 = 4 * v163;
      do
      {
        v201 = &v195[v200];
        if (v195[v200 - 4])
        {
          *(void *)*(v201 - 2) = *(v201 - 3);
          uint64_t v202 = *(v201 - 3);
          if (v202) {
            *(void *)(v202 + 16) = *(v201 - 2);
          }
        }
        v200 -= 4;
      }
      while (v200 * 8);
    }
    operator delete(v195);
    int v162 = *((_DWORD *)v150 + 5);
    a1 = v221;
    uint64_t v10 = __pa;
  }
  uint64_t v164 = a8;
  uint64_t v165 = (v162 + 1) & 0x7FFFFFF;
  *((_DWORD *)v150 + 5) = v162 & 0xF8000000 | (v162 + 1) & 0x7FFFFFF;
  uint64_t v166 = (v165 - 1);
  if ((v162 & 0x40000000) != 0) {
    uint64_t v167 = (char *)*((void *)v150 - 1);
  }
  else {
    uint64_t v167 = (char *)v150 - 32 * v165;
  }
  v168 = &v167[32 * v166];
  if (*(void *)v168)
  {
    **((void **)v168 + 2) = *((void *)v168 + 1);
    uint64_t v191 = *((void *)v168 + 1);
    if (v191) {
      *(void *)(v191 + 16) = *((void *)v168 + 2);
    }
  }
  *(void *)v168 = v145;
  if (v145)
  {
    uint64_t v169 = (char **)((char *)v145 + 8);
    uint64_t v170 = *((void *)v145 + 1);
    v171 = &v167[32 * v166];
    *((void *)v171 + 1) = v170;
    if (v170) {
      *(void *)(v170 + 16) = v171 + 8;
    }
    *((void *)v171 + 2) = v169;
    *uint64_t v169 = v168;
  }
  unint64_t v172 = v10;
  int v173 = *((_DWORD *)v150 + 5);
  uint64_t v174 = v173 & 0x7FFFFFF;
  uint64_t v175 = (unsigned __int8 **)a1;
  if ((v173 & 0x40000000) != 0) {
    unint64_t v176 = (char *)*((void *)v150 - 1);
  }
  else {
    unint64_t v176 = (char *)v150 - 32 * v174;
  }
  uint64_t v177 = *((unsigned int *)v150 + 15);
  *(void *)&v176[32 * v177 + 8 * (v174 - 1)] = v172;
  int v178 = *((_DWORD *)v150 + 5);
  if ((v178 & 0x7FFFFFF) == v177)
  {
    unsigned int v203 = v177 + (v177 >> 1);
    if (v203 <= 2) {
      uint64_t v204 = 2;
    }
    else {
      uint64_t v204 = v203;
    }
    *((_DWORD *)v150 + 15) = v204;
    if ((v178 & 0x40000000) != 0) {
      unint64_t v205 = (uint64_t *)*((void *)v150 - 1);
    }
    else {
      unint64_t v205 = (uint64_t *)((char *)v150 - 32 * v177);
    }
    __pb = v205;
    v206 = operator new(40 * v204);
    *((void *)v150 - 1) = v206;
    v207 = v206;
    do
    {
      void *v207 = 0;
      v207[1] = 0;
      v207[2] = 0;
      v207[3] = v150;
      v207 += 4;
    }
    while (v207 != &v206[4 * v204]);
    int v208 = *((_DWORD *)v150 + 5);
    if ((v208 & 0x40000000) != 0) {
      uint64_t v209 = (uint64_t)v206;
    }
    else {
      uint64_t v209 = (uint64_t)v150 - 32 * (v208 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v228, __pb, &__pb[4 * v177], v209);
    if (v177)
    {
      memmove((void *)(v209 + 32 * v204), &__pb[4 * v177], 8 * v177);
      uint64_t v210 = 4 * v177;
      do
      {
        uint64_t v211 = &__pb[v210];
        if (__pb[v210 - 4])
        {
          *(void *)*(v211 - 2) = *(v211 - 3);
          uint64_t v212 = *(v211 - 3);
          if (v212) {
            *(void *)(v212 + 16) = *(v211 - 2);
          }
        }
        v210 -= 4;
      }
      while (v210 * 8);
    }
    operator delete(__pb);
    int v178 = *((_DWORD *)v150 + 5);
    uint64_t v164 = a8;
  }
  uint64_t v179 = (v178 + 1) & 0x7FFFFFF;
  *((_DWORD *)v150 + 5) = v178 & 0xF8000000 | (v178 + 1) & 0x7FFFFFF;
  uint64_t v180 = (v179 - 1);
  if ((v178 & 0x40000000) != 0) {
    v181 = (char *)*((void *)v150 - 1);
  }
  else {
    v181 = (char *)v150 - 32 * v179;
  }
  uint64_t v182 = &v181[32 * v180];
  int v183 = v182;
  if (*(void *)v182)
  {
    **((void **)v182 + 2) = *((void *)v182 + 1);
    uint64_t v192 = *((void *)v182 + 1);
    if (v192) {
      *(void *)(v192 + 16) = *((void *)v182 + 2);
    }
  }
  *(void *)uint64_t v182 = v153;
  uint64_t v186 = *((void *)v153 + 1);
  v185 = (char **)((char *)v153 + 8);
  uint64_t v184 = v186;
  *((void *)v182 + 1) = v186;
  unsigned int v187 = v182 + 8;
  if (v186) {
    *(void *)(v184 + 16) = v187;
  }
  *(void *)&v181[32 * v180 + 16] = v185;
  uint64_t *v185 = v183;
  int v188 = *((_DWORD *)v150 + 5);
  uint64_t v189 = v188 & 0x7FFFFFF;
  if ((v188 & 0x40000000) != 0) {
    int v190 = (char *)*((void *)v150 - 1);
  }
  else {
    int v190 = (char *)v150 - 32 * v189;
  }
  *(void *)&v190[32 * *((unsigned int *)v150 + 15) + 8 * (v189 - 1)] = v164;
  *uint64_t v175 = v154;
  v175[1] = v158;
  v175[2] = (unsigned __int8 *)v145;
  if (v232 != v234) {
    free(v232);
  }
  if (v248 != v250) {
    free(v248);
  }
  uint64_t v96 = v256;
  if (v256 != v258) {
    goto LABEL_222;
  }
}

llvm::Instruction *sub_1CC8485D4(unsigned int a1, void **a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  v107[1] = *MEMORY[0x1E4F143B8];
  if (a1 < 4) {
    return 0;
  }
  uint64_t v9 = (void *)**a2;
  uint64_t v94 = v96;
  uint64_t v95 = 0x200000000;
  uint64_t v97 = v9;
  unsigned int v98 = &v106;
  uint64_t v99 = v107;
  uint64_t v100 = 0;
  int v101 = 0;
  __int16 v102 = 512;
  char v103 = 7;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = &unk_1F2616E88;
  v107[0] = &unk_1F2617008;
  v96[4] = a2;
  v96[5] = a2 + 5;
  uint64_t v10 = a3 + 40;
  for (uint64_t i = *(void *)(a3 + 48); i != v10; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = i - 24;
    if (i) {
      uint64_t v13 = i - 24;
    }
    else {
      uint64_t v13 = 0;
    }
    if (*(unsigned char *)(v13 + 16) != 83) {
      goto LABEL_11;
    }
  }
  uint64_t v12 = 0;
LABEL_11:
  if (v12) {
    uint64_t v10 = v12 + 24;
  }
  sub_1CBF537B4((uint64_t)v91, (uint64_t **)a3, v10, 0, 0, 0);
  uint64_t v14 = **a4;
  v78[0] = v79;
  v78[1] = (void *)0x200000000;
  uint64_t v80 = v14;
  unint64_t v81 = &v89;
  uint64_t v82 = &v90;
  uint64_t v83 = 0;
  int v84 = 0;
  __int16 v85 = 512;
  char v86 = 7;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = &unk_1F2616E88;
  unsigned int v90 = &unk_1F2617008;
  v79[4] = a4;
  v79[5] = a4 + 5;
  uint64_t v15 = *v97 + 1960;
  int v75 = "smp-num";
  __int16 v77 = 259;
  uint64_t v5 = sub_1CB93113C((uint64_t)v91, v15, 2, (uint64_t)&v75);
  int v17 = *(llvm::ConstantInt **)(*(void *)v80 + 1960);
  unsigned int v18 = *(_DWORD *)(*(void *)v80 + 1968);
  unsigned int v76 = v18 >> 8;
  if (v18 >> 8 > 0x40) {
    operator new[]();
  }
  if (v18 <= 0xFF) {
    LOBYTE(v19) = 0;
  }
  else {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v18) + 63);
  }
  int v75 = (const char *)(v19 & 1);
  uint64_t v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v75, v16);
  if (v76 >= 0x41 && v75) {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
  }
  int v75 = "smp-num-next";
  __int16 v77 = 259;
  uint64_t v22 = sub_1CB844A3C((uint64_t)v78, v5, (uint64_t)v20, (uint64_t)&v75, 1, 1);
  uint64_t v23 = *(llvm::ConstantInt **)(*(void *)v93 + 1960);
  unsigned int v24 = *(_DWORD *)(*(void *)v93 + 1968);
  unsigned int v76 = v24 >> 8;
  if (v24 >> 8 >= 0x41) {
    operator new[]();
  }
  int v75 = 0;
  uint64_t v25 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v75, v21);
  if (v76 >= 0x41 && v75) {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
  }
  int v26 = *((_DWORD *)v5 + 5);
  uint64_t v27 = v26 & 0x7FFFFFF;
  if ((v26 & 0x7FFFFFF) == *((_DWORD *)v5 + 15))
  {
    unsigned int v54 = v27 + (v27 >> 1);
    if (v54 <= 2) {
      uint64_t v55 = 2;
    }
    else {
      uint64_t v55 = v54;
    }
    *((_DWORD *)v5 + 15) = v55;
    if ((v26 & 0x40000000) != 0) {
      uint64_t v56 = (uint64_t *)*((void *)v5 - 1);
    }
    else {
      uint64_t v56 = (uint64_t *)((char *)v5 - 32 * v27);
    }
    __p = v56;
    int v57 = operator new(40 * v55);
    *((void *)v5 - 1) = v57;
    uint64_t v58 = v57;
    do
    {
      *uint64_t v58 = 0;
      v58[1] = 0;
      v58[2] = 0;
      v58[3] = v5;
      v58 += 4;
    }
    while (v58 != &v57[4 * v55]);
    int v59 = *((_DWORD *)v5 + 5);
    if ((v59 & 0x40000000) != 0) {
      uint64_t v60 = (uint64_t)v57;
    }
    else {
      uint64_t v60 = (uint64_t)v5 - 32 * (v59 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v75, __p, &__p[4 * v27], v60);
    if (v27)
    {
      memmove((void *)(v60 + 32 * v55), &__p[4 * v27], 8 * v27);
      uint64_t v61 = 4 * v27;
      do
      {
        unsigned int v62 = &__p[v61];
        if (__p[v61 - 4])
        {
          *(void *)*(v62 - 2) = *(v62 - 3);
          uint64_t v63 = *(v62 - 3);
          if (v63) {
            *(void *)(v63 + 16) = *(v62 - 2);
          }
        }
        v61 -= 4;
      }
      while (v61 * 8);
    }
    operator delete(__p);
    int v26 = *((_DWORD *)v5 + 5);
  }
  uint64_t v28 = (v26 + 1) & 0x7FFFFFF;
  *((_DWORD *)v5 + 5) = v26 & 0xF8000000 | (v26 + 1) & 0x7FFFFFF;
  uint64_t v29 = (v28 - 1);
  if ((v26 & 0x40000000) != 0) {
    uint64_t v30 = (char *)*((void *)v5 - 1);
  }
  else {
    uint64_t v30 = (char *)v5 - 32 * v28;
  }
  uint64_t v31 = &v30[32 * v29];
  if (*(void *)v31)
  {
    **((void **)v31 + 2) = *((void *)v31 + 1);
    uint64_t v52 = *((void *)v31 + 1);
    if (v52) {
      *(void *)(v52 + 16) = *((void *)v31 + 2);
    }
  }
  *(void *)uint64_t v31 = v25;
  if (v25)
  {
    uint64_t v34 = v25[1];
    unint64_t v33 = (char **)(v25 + 1);
    uint64_t v32 = v34;
    uint64_t v35 = &v30[32 * v29];
    *((void *)v35 + 1) = v34;
    if (v34) {
      *(void *)(v32 + 16) = v35 + 8;
    }
    *((void *)v35 + 2) = v33;
    *unint64_t v33 = v31;
  }
  int v36 = *((_DWORD *)v5 + 5);
  uint64_t v37 = v36 & 0x7FFFFFF;
  if ((v36 & 0x40000000) != 0) {
    uint64_t v38 = (char *)*((void *)v5 - 1);
  }
  else {
    uint64_t v38 = (char *)v5 - 32 * v37;
  }
  uint64_t v39 = *((unsigned int *)v5 + 15);
  *(void *)&v38[32 * v39 + 8 * (v37 - 1)] = a2;
  int v40 = *((_DWORD *)v5 + 5);
  if ((v40 & 0x7FFFFFF) == v39)
  {
    unsigned int v64 = v39 + (v39 >> 1);
    if (v64 <= 2) {
      uint64_t v65 = 2;
    }
    else {
      uint64_t v65 = v64;
    }
    *((_DWORD *)v5 + 15) = v65;
    if ((v40 & 0x40000000) != 0) {
      int v66 = (uint64_t *)*((void *)v5 - 1);
    }
    else {
      int v66 = (uint64_t *)((char *)v5 - 32 * v39);
    }
    uint64_t v67 = operator new(40 * v65);
    *((void *)v5 - 1) = v67;
    uint64_t v68 = v67;
    do
    {
      *uint64_t v68 = 0;
      v68[1] = 0;
      v68[2] = 0;
      v68[3] = v5;
      v68 += 4;
    }
    while (v68 != &v67[4 * v65]);
    int v69 = *((_DWORD *)v5 + 5);
    if ((v69 & 0x40000000) != 0) {
      uint64_t v70 = (uint64_t)v67;
    }
    else {
      uint64_t v70 = (uint64_t)v5 - 32 * (v69 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v75, v66, &v66[4 * v39], v70);
    if (v39)
    {
      memmove((void *)(v70 + 32 * v65), &v66[4 * v39], 8 * v39);
      uint64_t v71 = 4 * v39;
      do
      {
        uint64_t v72 = &v66[v71];
        if (v66[v71 - 4])
        {
          *(void *)*(v72 - 2) = *(v72 - 3);
          uint64_t v73 = *(v72 - 3);
          if (v73) {
            *(void *)(v73 + 16) = *(v72 - 2);
          }
        }
        v71 -= 4;
      }
      while (v71 * 8);
    }
    operator delete(v66);
    int v40 = *((_DWORD *)v5 + 5);
  }
  uint64_t v41 = (v40 + 1) & 0x7FFFFFF;
  *((_DWORD *)v5 + 5) = v40 & 0xF8000000 | (v40 + 1) & 0x7FFFFFF;
  uint64_t v42 = (v41 - 1);
  if ((v40 & 0x40000000) != 0) {
    int v43 = (char *)*((void *)v5 - 1);
  }
  else {
    int v43 = (char *)v5 - 32 * v41;
  }
  uint64_t v44 = &v43[32 * v42];
  if (*(void *)v44)
  {
    **((void **)v44 + 2) = *((void *)v44 + 1);
    uint64_t v53 = *((void *)v44 + 1);
    if (v53) {
      *(void *)(v53 + 16) = *((void *)v44 + 2);
    }
  }
  *(void *)uint64_t v44 = v22;
  if (v22)
  {
    uint64_t v45 = (char **)((char *)v22 + 8);
    uint64_t v46 = *((void *)v22 + 1);
    uint64_t v47 = &v43[32 * v42];
    *((void *)v47 + 1) = v46;
    if (v46) {
      *(void *)(v46 + 16) = v47 + 8;
    }
    *((void *)v47 + 2) = v45;
    *uint64_t v45 = v44;
  }
  int v48 = *((_DWORD *)v5 + 5);
  uint64_t v49 = v48 & 0x7FFFFFF;
  if ((v48 & 0x40000000) != 0) {
    uint64_t v50 = (char *)*((void *)v5 - 1);
  }
  else {
    uint64_t v50 = (char *)v5 - 32 * v49;
  }
  *(void *)&v50[32 * *((unsigned int *)v5 + 15) + 8 * (v49 - 1)] = a5;
  if (v78[0] != v79) {
    free(v78[0]);
  }
  if (v91[0] != &v92) {
    free(v91[0]);
  }
  if (v94 != v96) {
    free(v94);
  }
  return v5;
}

llvm::Instruction *sub_1CC848D5C(uint64_t a1, void **a2, uint64_t a3)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (void *)**a2;
  unint64_t v19 = v21;
  uint64_t v20 = 0x200000000;
  unsigned int v24 = v4;
  uint64_t v25 = &v33;
  int v26 = v34;
  uint64_t v27 = 0;
  int v28 = 0;
  __int16 v29 = 512;
  char v30 = 7;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = &unk_1F2616E88;
  v34[0] = &unk_1F2617008;
  if (a3)
  {
    sub_1CBF5385C((uint64_t)&v19, (uint64_t)a2, a3 + 24);
  }
  else
  {
    uint64_t v22 = a2;
    uint64_t v23 = a2 + 5;
  }
  uint64_t v5 = sub_1CD0FF450(*(uint64_t ***)(a1 + 24), 8);
  if (v5) {
    uint64_t v6 = *(uint64_t ***)(v5 + 24);
  }
  else {
    uint64_t v6 = 0;
  }
  v17[0] = "coverage_mask";
  __int16 v18 = 259;
  uint64_t v7 = sub_1CB845BAC((uint64_t *)&v19, v6, (uint64_t **)v5, 0, 0, (uint64_t)v17, 0);
  uint64_t v8 = (llvm::Instruction *)v7;
  uint64_t v9 = *v24 + 1936;
  v16[16] = 257;
  if (*(void *)v7 != v9)
  {
    if (*(unsigned __int8 *)(v7 + 16) <= 0x14u)
    {
      uint64_t v12 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v25 + 28))(v25, 38, v7, v9);
      uint64_t v8 = (llvm::Instruction *)v12;
      if (v12)
      {
        if (*(unsigned __int8 *)(v12 + 16) >= 0x1Cu)
        {
          (*(void (**)(void *, uint64_t, _WORD *, void **, void **))(*v26 + 16))(v26, v12, v16, v22, v23);
          if (v20)
          {
            uint64_t v14 = (llvm::MDNode **)v19;
            uint64_t v15 = (llvm::MDNode **)((char *)v19 + 16 * v20);
            do
            {
              llvm::Instruction::setMetadata(v8, *(_DWORD *)v14, v14[1]);
              v14 += 2;
            }
            while (v14 != v15);
          }
        }
      }
    }
    else
    {
      __int16 v18 = 257;
      uint64_t v8 = llvm::CastInst::Create(38, v7, v9, v17, 0);
      (*(void (**)(void *, llvm::Instruction *, _WORD *, void **, void **))(*v26 + 16))(v26, v8, v16, v22, v23);
      if (v20)
      {
        uint64_t v10 = (llvm::MDNode **)v19;
        unsigned int v11 = (llvm::MDNode **)((char *)v19 + 16 * v20);
        do
        {
          llvm::Instruction::setMetadata(v8, *(_DWORD *)v10, v10[1]);
          v10 += 2;
        }
        while (v10 != v11);
      }
    }
  }
  if (v19 != v21) {
    free(v19);
  }
  return v8;
}

llvm::Instruction *sub_1CC849030(uint64_t *a1, void **a2, uint64_t a3)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v7 = sub_1CC848D5C(*a1, a2, a3);
  uint64_t v8 = **(void **)(v6 + 24);
  v28[0] = v29;
  v28[1] = (void *)0x200000000;
  uint64_t v32 = v8;
  unint64_t v33 = &v41;
  uint64_t v34 = v42;
  uint64_t v35 = 0;
  int v36 = 0;
  __int16 v37 = 512;
  char v38 = 7;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = &unk_1F2616E88;
  v42[0] = &unk_1F2617008;
  if (!a3)
  {
    char v30 = a2;
    uint64_t v31 = a2 + 5;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned __int8 **)(a3 + 48);
  char v30 = *(void ***)(a3 + 40);
  uint64_t v31 = (void **)(a3 + 24);
  uint64_t v23 = (const char *)v9;
  if (v9)
  {
    llvm::MetadataTracking::track((uint64_t)&v23, v9, 2);
    uint64_t v10 = (uint64_t)v23;
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_1CB8461A4((uint64_t)v28, 0, v10);
  if (v23)
  {
    int v11 = *(unsigned __int8 *)v23;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        uint64_t v22 = v23;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v11 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v13 = (unint64_t)(v22 + 8);
LABEL_23:
        v26[0] = &v23;
        sub_1CC5FA668(v13 + 16, v26);
        goto LABEL_12;
      }
      if (v11 == 3) {
        *((void *)v23 + 1) = 0;
      }
    }
    else if ((v23[1] & 0x7F) == 2 || *((_DWORD *)v23 + 3))
    {
      uint64_t v12 = *((void *)v23 + 2);
      if ((v12 & 4) != 0)
      {
        unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v13) {
          goto LABEL_23;
        }
      }
    }
  }
LABEL_12:
  uint64_t v14 = (void *)a1[1];
  __int16 v27 = 257;
  uint64_t v16 = sub_1CBF52474((uint64_t)v28, v14, (uint64_t)v7, (uint64_t)v26);
  int v17 = *(llvm::ConstantInt **)(*(void *)v32 + 1936);
  unsigned int v18 = *(_DWORD *)(*(void *)v32 + 1944);
  unsigned int v24 = v18 >> 8;
  if (v18 >> 8 >= 0x41) {
    operator new[]();
  }
  uint64_t v23 = 0;
  unint64_t v19 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v23, v15);
  if (v24 >= 0x41 && v23) {
    MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
  }
  uint64_t v23 = "skip-cond";
  __int16 v25 = 259;
  uint64_t v20 = sub_1CB845F20((uint64_t)v28, 32, v16, (uint64_t)v19, (uint64_t)&v23);
  if (v28[0] != v29) {
    free(v28[0]);
  }
  return v20;
}

void sub_1CC849324(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  v51[10] = *MEMORY[0x1E4F143B8];
  uint64_t v49 = v51;
  uint64_t v50 = 0xA00000000;
  sub_1CB935BDC((unsigned int *)&v49, a2, &a2[8 * a3]);
  sub_1CB935BDC((unsigned int *)&v49, a4, &a4[8 * a5]);
  uint64_t v12 = (char *)v49;
  if (!v50) {
    goto LABEL_51;
  }
  int v43 = (char *)v49 + 8 * v50;
  do
  {
    uint64_t v13 = *(void *)v12;
    if (a7)
    {
      uint64_t v45 = 2;
      uint64_t v46 = 0;
      uint64_t v47 = (int32x2_t ****)v13;
      if (v13 != -8192 && v13 != -4096 && v13 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v45);
      }
      uint64_t v44 = &unk_1F2615EC8;
      uint64_t v48 = a7;
      uint64_t v15 = sub_1CC4CFF80(a7, &v44);
      if (v47 != (int32x2_t ****)-8192 && v47 != (int32x2_t ****)-4096 && v47)
      {
        unint64_t v16 = v45 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v45 & 0xFFFFFFFFFFFFFFF8) = v46;
        if (v46)
        {
          *uint64_t v46 = *v46 & 7 | v16;
        }
        else
        {
          int v17 = v47;
          unsigned int v18 = ***v47;
          unint64_t v19 = (unint64_t)v18[303];
          if (v19 <= v16)
          {
            uint64_t v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v16)
            {
              unsigned int v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v47 >> 4) ^ (v47 >> 9));
              uint64_t v23 = (int32x2_t *****)(v19 + 16 * v22);
              unsigned int v24 = *v23;
              if (v47 == *v23)
              {
LABEL_21:
                const char *v23 = (int32x2_t ****)-8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                int v17 = v47;
              }
              else
              {
                int v25 = 1;
                while (v24 != (int32x2_t ****)-4096)
                {
                  int v26 = v22 + v25++;
                  uint64_t v22 = v26 & v21;
                  unsigned int v24 = *(int32x2_t *****)(v19 + 16 * v22);
                  if (v47 == v24)
                  {
                    uint64_t v23 = (int32x2_t *****)(v19 + 16 * v22);
                    goto LABEL_21;
                  }
                }
              }
              *((unsigned char *)v17 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v13 = v15[7];
      if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu) {
        uint64_t v13 = 0;
      }
    }
    int v27 = *(_DWORD *)(v13 + 20);
    if ((v27 & 0x40000000) != 0)
    {
      uint64_t v29 = *(void *)(v13 - 8);
      uint64_t v28 = v27 & 0x7FFFFFF;
      if (!v28) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v28 = v27 & 0x7FFFFFF;
      uint64_t v29 = v13 - 32 * v28;
      if (!v28) {
        goto LABEL_49;
      }
    }
    uint64_t v30 = 32 * v28;
    uint64_t v31 = (void **)(v29 + 8);
    do
    {
      unint64_t v33 = v31 - 1;
      uint64_t v32 = (uint64_t)*(v31 - 1);
      uint64_t v34 = *(void **)(a1 + 8);
      if ((sub_1CC82E8C8(v34, v32) & 0xFFFD) != 0)
      {
        int v35 = *(_DWORD *)(*(void *)(v32 - 32) + 36);
        uint64_t v36 = v34[3];
        if (v36 && *(_DWORD *)(v36 + 36) == v35)
        {
          uint64_t v37 = *a6;
        }
        else
        {
          uint64_t v38 = v34[4];
          if (v38 && *(_DWORD *)(v38 + 36) == v35)
          {
            uint64_t v37 = a6[1];
          }
          else
          {
            uint64_t v39 = v34[5];
            if (v39 && *(_DWORD *)(v39 + 36) == v35) {
              uint64_t v37 = a6[2];
            }
            else {
              uint64_t v37 = a6[3];
            }
          }
        }
        *v31[1] = *v31;
        if (*v31) {
          (*v31)[2] = v31[1];
        }
        *unint64_t v33 = v37;
        if (v37)
        {
          uint64_t v42 = *(void **)(v37 + 8);
          uint64_t v40 = (void *)(v37 + 8);
          uint64_t v41 = v42;
          *uint64_t v31 = v42;
          if (v42) {
            v41[2] = v31;
          }
          v31[1] = v40;
          *uint64_t v40 = v33;
        }
      }
      v31 += 4;
      v30 -= 32;
    }
    while (v30);
LABEL_49:
    v12 += 8;
  }
  while (v12 != v43);
  uint64_t v12 = (char *)v49;
LABEL_51:
  if (v12 != (char *)v51) {
    free(v12);
  }
}

llvm::Instruction *sub_1CC849674(uint64_t a1, unsigned int a2, const llvm::APInt *a3, const llvm::APInt *a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **(void ***)a4;
  uint64_t v45 = v47;
  uint64_t v46 = 0x200000000;
  uint64_t v50 = v5;
  uint64_t v51 = &v59;
  uint64_t v52 = &v60;
  uint64_t v53 = 0;
  int v54 = 0;
  __int16 v55 = 512;
  char v56 = 7;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  int v59 = &unk_1F2616E88;
  uint64_t v60 = &unk_1F2617008;
  if (a2 > 3)
  {
    uint64_t v17 = 264;
    if (a2 == 4) {
      uint64_t v17 = 272;
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 8) + v17);
    if (v18)
    {
      unint64_t v19 = (unsigned __int16 *)(v18 + 24);
      if (*(_DWORD *)(v18 + 32) >= 0x41u) {
        unint64_t v19 = *(unsigned __int16 **)v19;
      }
      uint64_t v20 = *v19;
      uint64_t v21 = *v5;
      uint64_t v22 = *(llvm::ConstantInt **)(v21 + 1936);
      unint64_t v23 = *(unsigned int *)(v21 + 1944);
      unsigned int v62 = v23 >> 8;
      if (v23 >> 8 > 0x40) {
        operator new[]();
      }
      if (v23 <= 0xFF) {
        unint64_t v24 = 0;
      }
      else {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v23) + 63);
      }
      uint64_t v61 = (char *)(v24 & v20);
      int v25 = (unsigned __int8 *)llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v61, a3);
      if (v62 >= 0x41 && v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
    }
    else
    {
      sub_1CD8719F0(*(uint64_t ***)(a1 + 24), (uint64_t)&v61);
      int v27 = v61;
      if (v62)
      {
        uint64_t v28 = (uint64_t *)(a5 + 40);
        uint64_t v29 = 8 * v62;
        do
        {
          uint64_t v30 = *(void *)v27;
          *(void *)(v30 + 40) = a5;
          *(_WORD *)(a5 + 18) &= ~0x8000u;
          if ((*(unsigned char *)(v30 + 23) & 0x10) != 0)
          {
            uint64_t v33 = *(void *)(a5 + 56);
            if (v33)
            {
              uint64_t v34 = *(llvm::ValueSymbolTable **)(v33 + 104);
              if (v34) {
                llvm::ValueSymbolTable::reinsertValue(v34, (llvm::Value *)v30);
              }
            }
          }
          uint64_t v31 = *v28;
          *(void *)(v30 + 24) = *v28;
          *(void *)(v30 + 32) = v28;
          uint64_t v32 = v30 + 24;
          *(void *)(v31 + 8) = v32;
          *uint64_t v28 = v32;
          v27 += 8;
          v29 -= 8;
        }
        while (v29);
        int v27 = v61;
        uint64_t v35 = v62;
      }
      else
      {
        uint64_t v35 = 0;
      }
      int v25 = *(unsigned __int8 **)&v27[8 * v35 - 8];
      if (v27 != (char *)&v63) {
        free(v27);
      }
    }
    uint64_t v36 = *v50 + 1960;
    v44[16] = 257;
    if (*(void *)v25 != v36)
    {
      if (v25[16] <= 0x14u)
      {
        int v25 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v51 + 28))(v51, 39, v25, v36);
        if (v25) {
          BOOL v39 = v25[16] >= 0x1Cu;
        }
        else {
          BOOL v39 = 0;
        }
        if (v39)
        {
          (*((void (**)(void **, unsigned __int8 *, _WORD *, uint64_t, uint64_t))*v52 + 2))(v52, v25, v44, v48, v49);
          if (v46)
          {
            uint64_t v42 = (llvm::MDNode **)v45;
            int v43 = (llvm::MDNode **)((char *)v45 + 16 * v46);
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v25, *(_DWORD *)v42, v42[1]);
              v42 += 2;
            }
            while (v42 != v43);
          }
        }
      }
      else
      {
        __int16 v64 = 257;
        int v25 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v25, v36, (const char **)&v61, 0);
        (*((void (**)(void **, unsigned __int8 *, _WORD *, uint64_t, uint64_t))*v52 + 2))(v52, v25, v44, v48, v49);
        if (v46)
        {
          uint64_t v37 = (llvm::MDNode **)v45;
          uint64_t v38 = (llvm::MDNode **)((char *)v45 + 16 * v46);
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v25, *(_DWORD *)v37, v37[1]);
            v37 += 2;
          }
          while (v37 != v38);
        }
      }
    }
    __int16 v64 = 257;
    __int16 v13 = 32;
    uint64_t v14 = a3;
    uint64_t v15 = (uint64_t)v25;
  }
  else
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (unsigned __int16)~(-1 << *(_DWORD *)(a1 + 60));
    uint64_t v9 = *(llvm::ConstantInt **)(v7 + 1936);
    unint64_t v10 = *(unsigned int *)(v7 + 1944);
    unsigned int v62 = v10 >> 8;
    if (v10 >> 8 > 0x40) {
      operator new[]();
    }
    if (v10 <= 0xFF) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v10) + 63);
    }
    uint64_t v61 = (char *)(v11 & v8);
    uint64_t v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v61, a3);
    if (v62 >= 0x41 && v61) {
      MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
    }
    __int16 v64 = 257;
    __int16 v13 = 37;
    uint64_t v14 = a4;
    uint64_t v15 = (uint64_t)v12;
  }
  uint64_t v40 = sub_1CB845F20((uint64_t)&v45, v13, v14, v15, (uint64_t)&v61);
  if (v45 != v47) {
    free(v45);
  }
  return v40;
}

unint64_t *sub_1CC849BD0(unint64_t *result, _OWORD *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *result;
  if (*result)
  {
    unint64_t v7 = (v4 >> 1) & ~(-1 << (v4 >> 58));
    if (!v7) {
      return result;
    }
    int v8 = __clz(__rbit64(v7));
    goto LABEL_16;
  }
  unsigned int v5 = *(_DWORD *)(v4 + 64);
  if (v5 < 0x101)
  {
    if (!v5) {
      return result;
    }
  }
  else
  {
    *(void *)&long long v6 = -1;
    *((void *)&v6 + 1) = -1;
    *a2 = v6;
    a2[1] = v6;
  }
  uint64_t v9 = 0;
  unsigned int v10 = v5 - 1;
  unint64_t v11 = *(uint64_t **)v4;
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  uint64_t v13 = v10 & 0xFFFFFFC0;
  while (1)
  {
    uint64_t v15 = *v11++;
    uint64_t v14 = v15;
    uint64_t v16 = v13 + v9 ? -1 : v12;
    unint64_t v17 = v16 & v14;
    if (v17) {
      break;
    }
    v9 -= 64;
    if (v13 + v9 == -64) {
      return result;
    }
  }
  int v18 = __clz(__rbit64(v17));
  if (v18 + 1 != v9)
  {
    int v8 = v18 - v9;
    do
    {
LABEL_16:
      *(void *)((char *)a2 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      uint64_t result = (unint64_t *)sub_1CB9F9DF0(v3, v8);
      int v8 = (int)result;
    }
    while (result != -1);
  }
  return result;
}

llvm::Value *sub_1CC849CD4(uint64_t a1, uint64_t *a2, const llvm::APInt *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  long long v6 = *(llvm::ConstantInt **)(a1 + 1984);
  unsigned int v7 = *(_DWORD *)(a1 + 1992);
  LODWORD(v33) = v7 >> 8;
  if (v7 >> 8 > 0x40) {
    operator new[]();
  }
  if (v7 <= 0xFF) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v7) + 63);
  }
  uint64_t v32 = (llvm::FixedVectorType **)(v8 & v5);
  unsigned int v10 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v32, a3);
  if (v33 >= 0x41 && v32) {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
  }
  uint64_t v32 = v10;
  uint64_t v11 = a2[1];
  unint64_t v12 = *(llvm::ConstantInt **)(a1 + 1984);
  unsigned int v13 = *(_DWORD *)(a1 + 1992);
  unsigned int v31 = v13 >> 8;
  if (v13 >> 8 > 0x40) {
    operator new[]();
  }
  if (v13 <= 0xFF) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
  }
  unint64_t v30 = v14 & v11;
  uint64_t v16 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v30, v9);
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  uint64_t v33 = v16;
  uint64_t v17 = a2[2];
  int v18 = *(llvm::ConstantInt **)(a1 + 1984);
  unsigned int v19 = *(_DWORD *)(a1 + 1992);
  unsigned int v31 = v19 >> 8;
  if (v19 >> 8 > 0x40) {
    operator new[]();
  }
  if (v19 <= 0xFF) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63);
  }
  unint64_t v30 = v20 & v17;
  uint64_t v22 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v30, v15);
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  uint64_t v34 = v22;
  uint64_t v23 = a2[3];
  unint64_t v24 = *(llvm::ConstantInt **)(a1 + 1984);
  unsigned int v25 = *(_DWORD *)(a1 + 1992);
  unsigned int v31 = v25 >> 8;
  if (v25 >> 8 > 0x40) {
    operator new[]();
  }
  if (v25 <= 0xFF) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v25) + 63);
  }
  unint64_t v30 = v26 & v23;
  int v27 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v30, v21);
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  uint64_t v35 = v27;
  uint64_t result = llvm::ConstantVector::getImpl(&v32, (llvm::Type *)4);
  if (!result)
  {
    llvm::FixedVectorType::get(*v32, (llvm::Type *)4);
    return (llvm::Value *)sub_1CC56A4DC(**v29 + 1288, (uint64_t)v29, &v32, 4);
  }
  return result;
}

uint64_t sub_1CC84A0F8(uint64_t a1, uint64_t *a2)
{
  unsigned int v7 = 0;
  uint64_t result = sub_1CC84A190(a1, *a2, &v7);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1CD643470((_DWORD *)a1, a2, v7);
    *(void *)uint64_t result = *a2;
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1CC84A190(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_9;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_9;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC84A23C(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int v11 = (uint64_t *)result;
  while (2)
  {
    unsigned int v112 = a2 - 2;
    int v114 = a2 - 1;
    int v111 = a2 - 3;
    BOOL v12 = v11;
    unint64_t v117 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          uint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v53 = *(a2 - 1);
                uint64_t v119 = *v11;
                uint64_t v120 = v53;
                unsigned int v54 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                if (v54 < *(_DWORD *)(result + 8))
                {
                  uint64_t v55 = *v11;
                  *int v11 = *(a2 - 1);
                  *(a2 - 1) = v55;
                }
                break;
              case 3:
                uint64_t result = (uint64_t)sub_1CC84AD80(v11, v11 + 1, v114, a3);
                break;
              case 4:
                uint64_t result = (uint64_t)sub_1CC84B140(v11, v11 + 1, v11 + 2, v114, a3);
                break;
              case 5:
                uint64_t result = (uint64_t)sub_1CC84AC14(v11, v11 + 1, v11 + 2, v11 + 3, v114, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            char v56 = v11 + 1;
            BOOL v58 = v11 == a2 || v56 == a2;
            if (a5)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                uint64_t v60 = v11;
                do
                {
                  uint64_t v62 = *v60;
                  uint64_t v61 = v60[1];
                  uint64_t v60 = v56;
                  uint64_t v119 = v62;
                  uint64_t v120 = v61;
                  unsigned int v63 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                  uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                  if (v63 < *(_DWORD *)(result + 8))
                  {
                    uint64_t v64 = *v60;
                    uint64_t v65 = v59;
                    while (1)
                    {
                      *(uint64_t *)((char *)v11 + v65 + 8) = *(uint64_t *)((char *)v11 + v65);
                      if (!v65) {
                        break;
                      }
                      uint64_t v119 = *(uint64_t *)((char *)v11 + v65 - 8);
                      uint64_t v120 = v64;
                      unsigned int v66 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                      uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                      v65 -= 8;
                      if (v66 >= *(_DWORD *)(result + 8))
                      {
                        uint64_t v67 = (uint64_t *)((char *)v11 + v65 + 8);
                        goto LABEL_73;
                      }
                    }
                    uint64_t v67 = v11;
LABEL_73:
                    uint64_t *v67 = v64;
                  }
                  char v56 = v60 + 1;
                  v59 += 8;
                }
                while (v60 + 1 != a2);
              }
            }
            else if (!v58)
            {
              do
              {
                uint64_t v104 = *v11;
                uint64_t v103 = v11[1];
                int v11 = v56;
                uint64_t v119 = v104;
                uint64_t v120 = v103;
                unsigned int v105 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                if (v105 < *(_DWORD *)(result + 8))
                {
                  uint64_t v106 = *v11;
                  uint64_t v107 = v11;
                  do
                  {
                    uint64_t v108 = v107;
                    uint64_t v109 = *--v107;
                    uint64_t *v108 = v109;
                    uint64_t v119 = *(v108 - 2);
                    uint64_t v120 = v106;
                    unsigned int v110 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                    uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                  }
                  while (v110 < *(_DWORD *)(result + 8));
                  *uint64_t v107 = v106;
                }
                char v56 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v68 = (unint64_t)(v14 - 2) >> 1;
              int64_t v115 = v68;
              do
              {
                int64_t v69 = v68;
                if (v115 >= v68)
                {
                  uint64_t v70 = (2 * v68) | 1;
                  uint64_t v71 = &v11[v70];
                  if (2 * v68 + 2 < v14)
                  {
                    uint64_t v72 = *v71;
                    uint64_t v119 = v71[1];
                    uint64_t v120 = v72;
                    unsigned int v73 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                    if (v73 < *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2))
                    {
                      ++v71;
                      uint64_t v70 = 2 * v69 + 2;
                    }
                  }
                  uint64_t v74 = &v11[v69];
                  uint64_t v75 = *v71;
                  uint64_t v119 = *v74;
                  uint64_t v120 = v75;
                  unsigned int v76 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                  uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                  if (v76 >= *(_DWORD *)(result + 8))
                  {
                    int64_t v113 = v69;
                    uint64_t v77 = *v74;
                    do
                    {
                      uint64_t v78 = v71;
                      *uint64_t v74 = *v71;
                      if (v115 < v70) {
                        break;
                      }
                      uint64_t v79 = (2 * v70) | 1;
                      uint64_t v71 = &v11[v79];
                      uint64_t v80 = 2 * v70 + 2;
                      if (v80 < v14)
                      {
                        uint64_t v81 = *v71;
                        uint64_t v119 = v71[1];
                        uint64_t v120 = v81;
                        unsigned int v82 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                        if (v82 < *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2))
                        {
                          ++v71;
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t v83 = *v71;
                      uint64_t v119 = v77;
                      uint64_t v120 = v83;
                      unsigned int v84 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                      uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                      uint64_t v74 = v78;
                      uint64_t v70 = v79;
                    }
                    while (v84 >= *(_DWORD *)(result + 8));
                    *uint64_t v78 = v77;
                    int64_t v69 = v113;
                  }
                }
                int64_t v68 = v69 - 1;
              }
              while (v69);
              __int16 v85 = v117;
              do
              {
                uint64_t v86 = 0;
                uint64_t v116 = *v11;
                uint64_t v118 = v85;
                uint64_t v87 = v11;
                do
                {
                  uint64_t v88 = &v87[v86 + 1];
                  uint64_t v89 = (2 * v86) | 1;
                  uint64_t v90 = 2 * v86 + 2;
                  if (v90 < v14)
                  {
                    uint64_t v91 = *v88;
                    uint64_t v119 = v88[1];
                    uint64_t v120 = v91;
                    unsigned int v92 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                    uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                    if (v92 < *(_DWORD *)(result + 8))
                    {
                      ++v88;
                      uint64_t v89 = v90;
                    }
                  }
                  *uint64_t v87 = *v88;
                  uint64_t v87 = v88;
                  uint64_t v86 = v89;
                }
                while (v89 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                __int16 v85 = v118 - 1;
                if (v88 == v118 - 1)
                {
                  uint64_t *v88 = v116;
                }
                else
                {
                  uint64_t *v88 = *v85;
                  *__int16 v85 = v116;
                  uint64_t v93 = (char *)v88 - (char *)v11 + 8;
                  if (v93 >= 9)
                  {
                    unint64_t v94 = (((unint64_t)v93 >> 3) - 2) >> 1;
                    uint64_t v95 = &v11[v94];
                    uint64_t v96 = *v95;
                    uint64_t v119 = *v88;
                    uint64_t v120 = v96;
                    unsigned int v97 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                    uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                    if (v97 < *(_DWORD *)(result + 8))
                    {
                      uint64_t v98 = *v88;
                      do
                      {
                        uint64_t v99 = v95;
                        uint64_t *v88 = *v95;
                        if (!v94) {
                          break;
                        }
                        unint64_t v94 = (v94 - 1) >> 1;
                        uint64_t v95 = &v11[v94];
                        uint64_t v100 = *v95;
                        uint64_t v119 = v98;
                        uint64_t v120 = v100;
                        unsigned int v101 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
                        uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
                        uint64_t v88 = v99;
                      }
                      while (v101 < *(_DWORD *)(result + 8));
                      uint64_t *v99 = v98;
                      __int16 v85 = v118 - 1;
                    }
                  }
                }
              }
              while (v14-- > 2);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v11[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CC84AD80(v16, v11, v114, a3);
          }
          else
          {
            sub_1CC84AD80(v11, v16, v114, a3);
            sub_1CC84AD80(v11 + 1, v16 - 1, v112, a3);
            sub_1CC84AD80(v11 + 2, &v11[v15 + 1], v111, a3);
            sub_1CC84AD80(v16 - 1, v16, &v11[v15 + 1], a3);
            uint64_t v17 = *v11;
            *int v11 = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v18 = *(v11 - 1);
          uint64_t v119 = *v11;
          uint64_t v120 = v18;
          unsigned int v19 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
          if (v19 < *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2)) {
            break;
          }
          uint64_t v38 = *v11;
          uint64_t v119 = *v114;
          uint64_t v120 = v38;
          unsigned int v39 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
          uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
          if (v39 >= *(_DWORD *)(result + 8))
          {
            uint64_t v42 = v11 + 1;
            do
            {
              BOOL v12 = v42;
              if (v42 >= a2) {
                break;
              }
              ++v42;
              uint64_t v119 = *v12;
              uint64_t v120 = v38;
              unsigned int v43 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
              uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
            }
            while (v43 >= *(_DWORD *)(result + 8));
          }
          else
          {
            BOOL v12 = v11;
            do
            {
              uint64_t v40 = v12[1];
              ++v12;
              uint64_t v119 = v40;
              uint64_t v120 = v38;
              unsigned int v41 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
              uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
            }
            while (v41 >= *(_DWORD *)(result + 8));
          }
          uint64_t v44 = a2;
          if (v12 < a2)
          {
            uint64_t v44 = a2;
            do
            {
              uint64_t v45 = *--v44;
              uint64_t v119 = v45;
              uint64_t v120 = v38;
              unsigned int v46 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
              uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
            }
            while (v46 < *(_DWORD *)(result + 8));
          }
          while (v12 < v44)
          {
            uint64_t v47 = *v12;
            *BOOL v12 = *v44;
            *uint64_t v44 = v47;
            do
            {
              uint64_t v48 = v12[1];
              ++v12;
              uint64_t v119 = v48;
              uint64_t v120 = v38;
              unsigned int v49 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
            }
            while (v49 >= *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
            do
            {
              uint64_t v50 = *--v44;
              uint64_t v119 = v50;
              uint64_t v120 = v38;
              unsigned int v51 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
              uint64_t result = (uint64_t)sub_1CC21C478(*a3, &v119);
            }
            while (v51 < *(_DWORD *)(result + 8));
          }
          uint64_t v52 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *int v11 = *v52;
          }
          a5 = 0;
          *uint64_t v52 = v38;
        }
        uint64_t v20 = 0;
        uint64_t v21 = *v11;
        do
        {
          uint64_t v22 = v11[v20 + 1];
          uint64_t v119 = v21;
          uint64_t v120 = v22;
          unsigned int v23 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
          ++v20;
        }
        while (v23 < *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
        unint64_t v24 = &v11[v20];
        unsigned int v25 = v117;
        if (v20 == 1)
        {
          unsigned int v25 = v117;
          do
          {
            if (v24 >= v25) {
              break;
            }
            uint64_t v28 = *--v25;
            uint64_t v119 = v21;
            uint64_t v120 = v28;
            unsigned int v29 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
          }
          while (v29 >= *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
        }
        else
        {
          do
          {
            uint64_t v26 = *--v25;
            uint64_t v119 = v21;
            uint64_t v120 = v26;
            unsigned int v27 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
          }
          while (v27 >= *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
        }
        BOOL v12 = v24;
        if (v24 < v25)
        {
          unint64_t v30 = v25;
          do
          {
            uint64_t v31 = *v12;
            *BOOL v12 = *v30;
            *unint64_t v30 = v31;
            do
            {
              uint64_t v32 = v12[1];
              ++v12;
              uint64_t v119 = v21;
              uint64_t v120 = v32;
              unsigned int v33 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
            }
            while (v33 < *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
            do
            {
              uint64_t v34 = *--v30;
              uint64_t v119 = v21;
              uint64_t v120 = v34;
              unsigned int v35 = *((_DWORD *)sub_1CC21C478(*a3, &v120) + 2);
            }
            while (v35 >= *((_DWORD *)sub_1CC21C478(*a3, &v119) + 2));
          }
          while (v12 < v30);
        }
        uint64_t v36 = v12 - 1;
        if (v12 - 1 != v11) {
          *int v11 = *v36;
        }
        *uint64_t v36 = v21;
        a2 = v117;
        if (v24 >= v25) {
          break;
        }
LABEL_31:
        uint64_t result = sub_1CC84A23C(v11, v12 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v37 = sub_1CC84AF0C(v11, v12 - 1, a3);
      uint64_t result = sub_1CC84AF0C(v12, v117, a3);
      if (result) {
        break;
      }
      if (!v37) {
        goto LABEL_31;
      }
    }
    a2 = v12 - 1;
    if (!v37) {
      continue;
    }
    return result;
  }
}

void *sub_1CC84AC14(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1CC84B140(a1, a2, a3, a4, a6);
  uint64_t v12 = *a5;
  uint64_t v25 = *a4;
  uint64_t v26 = v12;
  unsigned int v13 = *((_DWORD *)sub_1CC21C478(*a6, &v26) + 2);
  uint64_t result = sub_1CC21C478(*a6, &v25);
  if (v13 < *((_DWORD *)result + 2))
  {
    uint64_t v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    uint64_t v16 = *a4;
    uint64_t v25 = *a3;
    uint64_t v26 = v16;
    unsigned int v17 = *((_DWORD *)sub_1CC21C478(*a6, &v26) + 2);
    uint64_t result = sub_1CC21C478(*a6, &v25);
    if (v17 < *((_DWORD *)result + 2))
    {
      uint64_t v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      uint64_t v19 = *a3;
      uint64_t v25 = *a2;
      uint64_t v26 = v19;
      unsigned int v20 = *((_DWORD *)sub_1CC21C478(*a6, &v26) + 2);
      uint64_t result = sub_1CC21C478(*a6, &v25);
      if (v20 < *((_DWORD *)result + 2))
      {
        uint64_t v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        uint64_t v22 = *a2;
        uint64_t v25 = *a1;
        uint64_t v26 = v22;
        unsigned int v23 = *((_DWORD *)sub_1CC21C478(*a6, &v26) + 2);
        uint64_t result = sub_1CC21C478(*a6, &v25);
        if (v23 < *((_DWORD *)result + 2))
        {
          uint64_t v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

void *sub_1CC84AD80(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v22 = *a1;
  uint64_t v23 = v8;
  unsigned int v9 = *((_DWORD *)sub_1CC21C478(*a4, &v23) + 2);
  unsigned int v10 = sub_1CC21C478(*a4, &v22);
  uint64_t v11 = *a3;
  if (v9 >= *((_DWORD *)v10 + 2))
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    unsigned int v15 = *((_DWORD *)sub_1CC21C478(*a4, &v23) + 2);
    uint64_t result = sub_1CC21C478(*a4, &v22);
    if (v15 < *((_DWORD *)result + 2))
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v22 = *a1;
      uint64_t v23 = v17;
      unsigned int v18 = *((_DWORD *)sub_1CC21C478(*a4, &v23) + 2);
      uint64_t result = sub_1CC21C478(*a4, &v22);
      if (v18 < *((_DWORD *)result + 2))
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    uint64_t v22 = *a2;
    uint64_t v23 = v11;
    unsigned int v12 = *((_DWORD *)sub_1CC21C478(*a4, &v23) + 2);
    uint64_t result = sub_1CC21C478(*a4, &v22);
    uint64_t v14 = *a1;
    if (v12 >= *((_DWORD *)result + 2))
    {
      *a1 = *a2;
      *a2 = v14;
      uint64_t v20 = *a3;
      uint64_t v22 = v14;
      uint64_t v23 = v20;
      unsigned int v21 = *((_DWORD *)sub_1CC21C478(*a4, &v23) + 2);
      uint64_t result = sub_1CC21C478(*a4, &v22);
      if (v21 >= *((_DWORD *)result + 2)) {
        return result;
      }
      uint64_t v14 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v14;
  }
  return result;
}

BOOL sub_1CC84AF0C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v21 = *a1;
      uint64_t v22 = v8;
      unsigned int v9 = *((_DWORD *)sub_1CC21C478(*a3, &v22) + 2);
      if (v9 < *((_DWORD *)sub_1CC21C478(*a3, &v21) + 2))
      {
        uint64_t v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1CC84AD80(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC84B140(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC84AC14(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v11 = a1 + 2;
      sub_1CC84AD80(a1, a1 + 1, a1 + 2, a3);
      unsigned int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v12;
    uint64_t v21 = *v11;
    uint64_t v22 = v15;
    unsigned int v16 = *((_DWORD *)sub_1CC21C478(*a3, &v22) + 2);
    if (v16 < *((_DWORD *)sub_1CC21C478(*a3, &v21) + 2))
    {
      uint64_t v17 = *v12;
      uint64_t v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16) {
          break;
        }
        uint64_t v21 = *(uint64_t *)((char *)a1 + v18 + 8);
        uint64_t v22 = v17;
        unsigned int v19 = *((_DWORD *)sub_1CC21C478(*a3, &v22) + 2);
        v18 -= 8;
        if (v19 >= *((_DWORD *)sub_1CC21C478(*a3, &v21) + 2))
        {
          uint64_t v20 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      uint64_t *v20 = v17;
      if (++v14 == 8) {
        return v12 + 1 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

void *sub_1CC84B140(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CC84AD80(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v20 = *a3;
  uint64_t v21 = v10;
  unsigned int v11 = *((_DWORD *)sub_1CC21C478(*a5, &v21) + 2);
  BOOL result = sub_1CC21C478(*a5, &v20);
  if (v11 < *((_DWORD *)result + 2))
  {
    uint64_t v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    uint64_t v14 = *a3;
    uint64_t v20 = *a2;
    uint64_t v21 = v14;
    unsigned int v15 = *((_DWORD *)sub_1CC21C478(*a5, &v21) + 2);
    BOOL result = sub_1CC21C478(*a5, &v20);
    if (v15 < *((_DWORD *)result + 2))
    {
      uint64_t v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      uint64_t v17 = *a2;
      uint64_t v20 = *a1;
      uint64_t v21 = v17;
      unsigned int v18 = *((_DWORD *)sub_1CC21C478(*a5, &v21) + 2);
      BOOL result = sub_1CC21C478(*a5, &v20);
      if (v18 < *((_DWORD *)result + 2))
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

void sub_1CC84B25C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v6 = a3;
    unsigned int v9 = (uint64_t *)(a2 + 40);
    uint64_t v10 = &a3[a4];
    do
    {
      uint64_t v11 = *v6;
      unsigned int v12 = *(uint64_t **)(a1 + 16);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      if (v13 == *v12)
      {
        uint64_t v15 = *((unsigned int *)v12 + 5);
        uint64_t v16 = (void *)(v13 + 8 * v15);
        if (v15)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 8 * v15;
          while (*(void *)(v13 + v17) != v11)
          {
            v17 += 8;
            if (v18 == v17) {
              goto LABEL_21;
            }
          }
          uint64_t v16 = (void *)(v13 + v17);
        }
LABEL_21:
        uint64_t v14 = v12[1];
      }
      else
      {
        uint64_t v19 = *((unsigned int *)v12 + 4);
        int v20 = v19 - 1;
        unsigned int v21 = (v19 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v16 = (void *)(v13 + 8 * v21);
        uint64_t v22 = *v16;
        if (*v16 == -1)
        {
          uint64_t v23 = 0;
LABEL_36:
          if (v23) {
            uint64_t v16 = v23;
          }
          if (*v16 != v11) {
            uint64_t v16 = (void *)(v13 + 8 * v19);
          }
        }
        else
        {
          uint64_t v23 = 0;
          int v24 = 1;
          while (v22 != v11)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v22 == -2;
            }
            if (v25) {
              uint64_t v23 = v16;
            }
            unsigned int v26 = v21 + v24++;
            unsigned int v21 = v26 & v20;
            uint64_t v16 = (void *)(v13 + 8 * (v26 & v20));
            uint64_t v22 = *v16;
            if (*v16 == -1) {
              goto LABEL_36;
            }
          }
        }
      }
      if (v13 == v14) {
        uint64_t v27 = 20;
      }
      else {
        uint64_t v27 = 16;
      }
      if (v16 == (void *)(v13 + 8 * *(unsigned int *)((char *)v12 + v27)))
      {
        if (*(void *)(v11 + 40)) {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
        if (a2)
        {
          uint64_t v28 = *(void *)(a5 + 24);
          if (v28)
          {
            uint64_t v33 = *v6;
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v28 + 48))(v28, &v33);
          }
          else
          {
            *(void *)(v11 + 40) = a2;
            *(_WORD *)(a2 + 18) &= ~0x8000u;
            if ((*(unsigned char *)(v11 + 23) & 0x10) != 0)
            {
              uint64_t v31 = *(void *)(a2 + 56);
              if (v31)
              {
                uint64_t v32 = *(llvm::ValueSymbolTable **)(v31 + 104);
                if (v32) {
                  llvm::ValueSymbolTable::reinsertValue(v32, (llvm::Value *)v11);
                }
              }
            }
            uint64_t v29 = *v9;
            *(void *)(v11 + 24) = *v9;
            *(void *)(v11 + 32) = v9;
            uint64_t v30 = v11 + 24;
            *(void *)(v29 + 8) = v30;
            *unsigned int v9 = v30;
          }
        }
      }
      ++v6;
    }
    while (v6 != v10);
  }
}

void sub_1CC84B468(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator new();
  }
}

void sub_1CC84B568(uint64_t *a1, llvm::Instruction *this, unsigned int a3)
{
  v56[8] = *MEMORY[0x1E4F143B8];
  unsigned int v54 = v56;
  v56[0] = this;
  uint64_t v55 = 0x800000001;
  int v6 = 7;
  do
  {
    unsigned int v7 = llvm::Instruction::clone(this);
    if (v55 >= (unint64_t)HIDWORD(v55)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v54 + v55) = v7;
    LODWORD(v55) = v55 + 1;
    --v6;
  }
  while (v6);
  for (uint64_t i = 1; i != 8; ++i)
  {
    uint64_t v9 = *((void *)v54 + i);
    uint64_t v10 = *a1;
    uint64_t v50 = 2;
    unsigned int v51 = 0;
    uint64_t v52 = this;
    if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v50);
    }
    unsigned int v49 = &unk_1F2615EC8;
    uint64_t v53 = v10 + (i << 6);
    uint64_t v11 = sub_1CC4CFF80(v53, &v49);
    if (v52 != (llvm::Instruction *)-8192 && v52 != (llvm::Instruction *)-4096 && v52 != 0)
    {
      unint64_t v13 = v50 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v50 & 0xFFFFFFFFFFFFFFF8) = v51;
      if (v51)
      {
        *unsigned int v51 = *v51 & 7 | v13;
      }
      else
      {
        uint64_t v14 = v52;
        uint64_t v15 = ***(int32x2_t ****)v52;
        unint64_t v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          uint64_t v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            unsigned int v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v52 >> 4) ^ (v52 >> 9));
            int v20 = (llvm::Instruction **)(v16 + 16 * v19);
            unsigned int v21 = *v20;
            if (v52 == *v20)
            {
LABEL_23:
              uint64_t *v20 = (llvm::Instruction *)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v14 = v52;
            }
            else
            {
              int v22 = 1;
              while (v21 != (llvm::Instruction *)-4096)
              {
                int v23 = v19 + v22++;
                uint64_t v19 = v23 & v18;
                unsigned int v21 = *(llvm::Instruction **)(v16 + 16 * v19);
                if (v52 == v21)
                {
                  int v20 = (llvm::Instruction **)(v16 + 16 * v19);
                  goto LABEL_23;
                }
              }
            }
            *((unsigned char *)v14 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v24 = v11[7];
    if (v24 != v9)
    {
      if (v24 && v24 != -8192 && v24 != -4096)
      {
        unint64_t v27 = v11[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v27 = v11[6];
        uint64_t v28 = (unint64_t *)v11[6];
        if (v28)
        {
          *uint64_t v28 = *v28 & 7 | v27;
        }
        else
        {
          uint64_t v29 = v11[7];
          uint64_t v30 = ***(int32x2_t ****)v29;
          unint64_t v31 = (unint64_t)v30[303];
          if (v31 <= v27)
          {
            uint64_t v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v27)
            {
              unsigned int v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
              unsigned int v35 = (uint64_t *)(v31 + 16 * v34);
              uint64_t v36 = *v35;
              if (v29 == *v35)
              {
LABEL_45:
                *unsigned int v35 = -8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v29 = v11[7];
              }
              else
              {
                int v37 = 1;
                while (v36 != -4096)
                {
                  int v38 = v34 + v37++;
                  uint64_t v34 = v38 & v33;
                  uint64_t v36 = *(void *)(v31 + 16 * v34);
                  if (v29 == v36)
                  {
                    unsigned int v35 = (uint64_t *)(v31 + 16 * v34);
                    goto LABEL_45;
                  }
                }
              }
              *(unsigned char *)(v29 + 17) &= ~1u;
            }
          }
        }
      }
      v11[7] = v9;
      if (v9 != -8192 && v9 != -4096 && v9) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v11 + 5));
      }
    }
    uint64_t v25 = a1[1] + 96 * i;
    unint64_t v26 = *(unsigned int *)(v25 + 8);
    if (v26 >= *(unsigned int *)(v25 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v25 + 8 * v26) = v9;
    ++*(_DWORD *)(v25 + 8);
  }
  if (*((void *)this + 5)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v39 = 0;
  unint64_t v40 = a3 + 8;
  uint64_t v41 = 8 * a3;
  uint64_t v42 = a3;
  do
  {
    uint64_t v43 = *(void *)(a1[2] + v41 + 8 * v39);
    uint64_t v44 = *((void *)v54 + v39);
    *(void *)(v44 + 40) = v43;
    *(_WORD *)(v43 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(v44 + 23) & 0x10) != 0)
    {
      uint64_t v47 = *(void *)(v43 + 56);
      if (v47)
      {
        uint64_t v48 = *(llvm::ValueSymbolTable **)(v47 + 104);
        if (v48) {
          llvm::ValueSymbolTable::reinsertValue(v48, (llvm::Value *)v44);
        }
      }
    }
    uint64_t v45 = *(void *)(v43 + 40);
    *(void *)(v44 + 24) = v45;
    *(void *)(v44 + 32) = v43 + 40;
    uint64_t v46 = v44 + 24;
    *(void *)(v45 + 8) = v46;
    *(void *)(v43 + 40) = v46;
    ++v39;
  }
  while (v42 + v39 < v40);
  if (v54 != v56) {
    free(v54);
  }
}

void sub_1CC84B9D0()
{
}

void *sub_1CC84B9E4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261FA30;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC84BA2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FA30;
  a2[1] = v2;
  return result;
}

void sub_1CC84BA58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  *(void *)(v2 + 40) = v3;
  *(_WORD *)(v3 + 18) &= ~0x8000u;
  if ((*(unsigned char *)(v2 + 23) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    if (v7)
    {
      uint64_t v8 = *(llvm::ValueSymbolTable **)(v7 + 104);
      if (v8) {
        llvm::ValueSymbolTable::reinsertValue(v8, (llvm::Value *)v2);
      }
    }
  }
  uint64_t v5 = *(void *)(v3 + 40);
  int v4 = (void *)(v3 + 40);
  *(void *)(v2 + 24) = v5;
  *(void *)(v2 + 32) = v4;
  uint64_t v6 = v2 + 24;
  *(void *)(v5 + 8) = v6;
  *int v4 = v6;
}

void sub_1CC84BAC4(uint64_t *a1, llvm::Instruction *this, unsigned int a3)
{
  v56[4] = *MEMORY[0x1E4F143B8];
  unsigned int v54 = v56;
  v56[0] = this;
  uint64_t v55 = 0x400000001;
  int v6 = 3;
  do
  {
    uint64_t v7 = llvm::Instruction::clone(this);
    if (v55 >= (unint64_t)HIDWORD(v55)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v54 + v55) = v7;
    LODWORD(v55) = v55 + 1;
    --v6;
  }
  while (v6);
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v9 = *((void *)v54 + i);
    uint64_t v10 = *a1;
    uint64_t v50 = 2;
    unsigned int v51 = 0;
    uint64_t v52 = this;
    if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v50);
    }
    unsigned int v49 = &unk_1F2615EC8;
    uint64_t v53 = v10 + (i << 6);
    uint64_t v11 = sub_1CC4CFF80(v53, &v49);
    if (v52 != (llvm::Instruction *)-8192 && v52 != (llvm::Instruction *)-4096 && v52 != 0)
    {
      unint64_t v13 = v50 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v50 & 0xFFFFFFFFFFFFFFF8) = v51;
      if (v51)
      {
        *unsigned int v51 = *v51 & 7 | v13;
      }
      else
      {
        uint64_t v14 = v52;
        uint64_t v15 = ***(int32x2_t ****)v52;
        unint64_t v16 = (unint64_t)v15[303];
        if (v16 <= v13)
        {
          uint64_t v17 = v15[305].u32[0];
          if (v16 + 16 * v17 > v13)
          {
            unsigned int v18 = v17 - 1;
            LODWORD(v19) = v18 & ((v52 >> 4) ^ (v52 >> 9));
            int v20 = (llvm::Instruction **)(v16 + 16 * v19);
            unsigned int v21 = *v20;
            if (v52 == *v20)
            {
LABEL_23:
              uint64_t *v20 = (llvm::Instruction *)-8192;
              v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v14 = v52;
            }
            else
            {
              int v22 = 1;
              while (v21 != (llvm::Instruction *)-4096)
              {
                int v23 = v19 + v22++;
                uint64_t v19 = v23 & v18;
                unsigned int v21 = *(llvm::Instruction **)(v16 + 16 * v19);
                if (v52 == v21)
                {
                  int v20 = (llvm::Instruction **)(v16 + 16 * v19);
                  goto LABEL_23;
                }
              }
            }
            *((unsigned char *)v14 + 17) &= ~1u;
          }
        }
      }
    }
    uint64_t v24 = v11[7];
    if (v24 != v9)
    {
      if (v24 && v24 != -8192 && v24 != -4096)
      {
        unint64_t v27 = v11[5] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v27 = v11[6];
        uint64_t v28 = (unint64_t *)v11[6];
        if (v28)
        {
          *uint64_t v28 = *v28 & 7 | v27;
        }
        else
        {
          uint64_t v29 = v11[7];
          uint64_t v30 = ***(int32x2_t ****)v29;
          unint64_t v31 = (unint64_t)v30[303];
          if (v31 <= v27)
          {
            uint64_t v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v27)
            {
              unsigned int v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
              unsigned int v35 = (uint64_t *)(v31 + 16 * v34);
              uint64_t v36 = *v35;
              if (v29 == *v35)
              {
LABEL_45:
                *unsigned int v35 = -8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v29 = v11[7];
              }
              else
              {
                int v37 = 1;
                while (v36 != -4096)
                {
                  int v38 = v34 + v37++;
                  uint64_t v34 = v38 & v33;
                  uint64_t v36 = *(void *)(v31 + 16 * v34);
                  if (v29 == v36)
                  {
                    unsigned int v35 = (uint64_t *)(v31 + 16 * v34);
                    goto LABEL_45;
                  }
                }
              }
              *(unsigned char *)(v29 + 17) &= ~1u;
            }
          }
        }
      }
      v11[7] = v9;
      if (v9 != -8192 && v9 != -4096 && v9) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v11 + 5));
      }
    }
    uint64_t v25 = a1[1] + 96 * i;
    unint64_t v26 = *(unsigned int *)(v25 + 8);
    if (v26 >= *(unsigned int *)(v25 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v25 + 8 * v26) = v9;
    ++*(_DWORD *)(v25 + 8);
  }
  if (*((void *)this + 5)) {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v39 = 0;
  unint64_t v40 = a3 + 4;
  uint64_t v41 = 8 * a3;
  uint64_t v42 = a3;
  do
  {
    uint64_t v43 = *(void *)(a1[2] + v41 + 8 * v39);
    uint64_t v44 = *((void *)v54 + v39);
    *(void *)(v44 + 40) = v43;
    *(_WORD *)(v43 + 18) &= ~0x8000u;
    if ((*(unsigned char *)(v44 + 23) & 0x10) != 0)
    {
      uint64_t v47 = *(void *)(v43 + 56);
      if (v47)
      {
        uint64_t v48 = *(llvm::ValueSymbolTable **)(v47 + 104);
        if (v48) {
          llvm::ValueSymbolTable::reinsertValue(v48, (llvm::Value *)v44);
        }
      }
    }
    uint64_t v45 = *(void *)(v43 + 40);
    *(void *)(v44 + 24) = v45;
    *(void *)(v44 + 32) = v43 + 40;
    uint64_t v46 = v44 + 24;
    *(void *)(v45 + 8) = v46;
    *(void *)(v43 + 40) = v46;
    ++v39;
  }
  while (v42 + v39 < v40);
  if (v54 != v56) {
    free(v54);
  }
}

void sub_1CC84BF2C()
{
}

void *sub_1CC84BF40(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261FA78;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC84BF88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FA78;
  a2[1] = v2;
  return result;
}

void sub_1CC84BFB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  *(void *)(v2 + 40) = v3;
  *(_WORD *)(v3 + 18) &= ~0x8000u;
  if ((*(unsigned char *)(v2 + 23) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(v3 + 56);
    if (v7)
    {
      uint64_t v8 = *(llvm::ValueSymbolTable **)(v7 + 104);
      if (v8) {
        llvm::ValueSymbolTable::reinsertValue(v8, (llvm::Value *)v2);
      }
    }
  }
  uint64_t v5 = *(void *)(v3 + 40);
  int v4 = (void *)(v3 + 40);
  *(void *)(v2 + 24) = v5;
  *(void *)(v2 + 32) = v4;
  uint64_t v6 = v2 + 24;
  *(void *)(v5 + 8) = v6;
  *int v4 = v6;
}

uint64_t sub_1CC84C020(uint64_t result)
{
  if (*(void *)(result + 48) != result + 40) {
    operator new();
  }
  return result;
}

void sub_1CC84C130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v26[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 40;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 != a1 + 40)
  {
    do
    {
      uint64_t v10 = *(void *)(v8 + 8);
      if (v8) {
        uint64_t v11 = v8 - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!*(void *)(v11 + 8) && llvm::wouldInstructionBeTriviallyDead(v11, 0)) {
        goto LABEL_17;
      }
      uint64_t v20 = a2;
      long long v21 = 0u;
      long long v22 = 0u;
      __int16 v23 = 257;
      int v12 = *(_DWORD *)(v11 + 20);
      if ((v12 & 0x40000000) != 0)
      {
        uint64_t v14 = *(uint64_t **)(v11 - 8);
        unint64_t v13 = v12 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v13 = v12 & 0x7FFFFFF;
        uint64_t v14 = (uint64_t *)(v11 - 32 * v13);
      }
      uint64_t v24 = v26;
      uint64_t v25 = 0x800000000;
      if (v13 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v13)
      {
        uint64_t v15 = 32 * v13;
        unint64_t v16 = v26;
        do
        {
          uint64_t v17 = *v14;
          v14 += 4;
          *v16++ = v17;
          v15 -= 32;
        }
        while (v15);
        unsigned int v18 = v24;
      }
      else
      {
        unsigned int v18 = v26;
      }
      LODWORD(v25) = v13;
      uint64_t v19 = llvm::SimplifyInstructionWithOperands((llvm *)v11, (uint64_t)v18, v13, (uint64_t)&v20, a5, a6, a7);
      if (v24 == v26)
      {
        if (v19) {
          goto LABEL_16;
        }
      }
      else
      {
        free(v24);
        if (v19)
        {
LABEL_16:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v19, (llvm::Value *)1);
LABEL_17:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
        }
      }
      uint64_t v8 = v10;
    }
    while (v10 != v7);
  }
}

void sub_1CC84C340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int a6, char a7)
{
  uint64_t v10 = a2;
  v346[17] = *MEMORY[0x1E4F143B8];
  v346[0] = 1;
  for (uint64_t i = 1; i != 17; i += 2)
    v346[i] = -4096;
  uint64_t v12 = a5[1];
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(void *)(v12 + 48);
  if (v14 != v12 + 40)
  {
    while (1)
    {
      if (v14) {
        uint64_t v15 = v14 - 24;
      }
      else {
        uint64_t v15 = 0;
      }
      if (*(unsigned char *)(v15 + 16) != 83)
      {
LABEL_58:
        uint64_t v12 = a5[1];
        uint64_t v13 = *(void *)(v12 + 48);
        uint64_t v10 = a2;
        break;
      }
      if (v15 != a5[7] && v15 != a5[8])
      {
        int v324 = (void *)sub_1CBF73380(v15, a5[5]);
        sub_1CD643D4C(v346, &v324)[1] = v15;
        uint64_t v17 = *(unsigned int *)(a3 + 16);
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)a3;
        uint64_t v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v20 = *(void *)a3 + (v19 << 6);
        uint64_t v21 = *(void *)(v20 + 24);
        if (v15 != v21)
        {
          int v22 = 1;
          while (v21 != -4096)
          {
            int v23 = v19 + v22++;
            uint64_t v19 = v23 & (v17 - 1);
            uint64_t v20 = v18 + (v19 << 6);
            uint64_t v21 = *(void *)(v20 + 24);
            if (v15 == v21) {
              goto LABEL_20;
            }
          }
LABEL_21:
          uint64_t v24 = sub_1CBF73380(v15, *a5);
          uint64_t v325 = 2;
          uint64_t v326 = 0;
          v327 = (int32x2_t ****)v15;
          if (v15 != -8192 && v15 != -4096 && v15) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v325);
          }
          int v324 = &unk_1F2615EC8;
          v328[0] = a3;
          uint64_t v25 = sub_1CC4CFF80(a3, &v324);
          if (v327 != (int32x2_t ****)-8192 && v327 != (int32x2_t ****)-4096 && v327)
          {
            unint64_t v26 = v325 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v325 & 0xFFFFFFFFFFFFFFF8) = v326;
            if (v326)
            {
              *(void *)uint64_t v326 = *(void *)v326 & 7 | v26;
            }
            else
            {
              unint64_t v27 = v327;
              uint64_t v28 = ***v327;
              unint64_t v29 = (unint64_t)v28[303];
              if (v29 <= v26)
              {
                uint64_t v30 = v28[305].u32[0];
                if (v29 + 16 * v30 > v26)
                {
                  unsigned int v31 = v30 - 1;
                  LODWORD(v32) = v31 & ((v327 >> 4) ^ (v327 >> 9));
                  unsigned int v33 = (int32x2_t *****)(v29 + 16 * v32);
                  uint64_t v34 = *v33;
                  if (v327 != *v33)
                  {
                    int v35 = 1;
                    do
                    {
                      if (v34 == (int32x2_t ****)-4096) {
                        goto LABEL_37;
                      }
                      int v36 = v32 + v35++;
                      uint64_t v32 = v36 & v31;
                      uint64_t v34 = *(int32x2_t *****)(v29 + 16 * v32);
                    }
                    while (v327 != v34);
                    unsigned int v33 = (int32x2_t *****)(v29 + 16 * v32);
                  }
                  *unsigned int v33 = (int32x2_t ****)-8192;
                  v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                  unint64_t v27 = v327;
LABEL_37:
                  *((unsigned char *)v27 + 17) &= ~1u;
                }
              }
            }
          }
          uint64_t v37 = v25[7];
          if (v37 != v24)
          {
            if (v37 && v37 != -8192 && v37 != -4096)
            {
              unint64_t v38 = v25[5] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v38 = v25[6];
              uint64_t v39 = (unint64_t *)v25[6];
              if (v39)
              {
                *uint64_t v39 = *v39 & 7 | v38;
              }
              else
              {
                uint64_t v40 = v25[7];
                uint64_t v41 = ***(int32x2_t ****)v40;
                unint64_t v42 = (unint64_t)v41[303];
                if (v42 <= v38)
                {
                  uint64_t v43 = v41[305].u32[0];
                  if (v42 + 16 * v43 > v38)
                  {
                    unsigned int v44 = v43 - 1;
                    LODWORD(v45) = v44 & ((v40 >> 4) ^ (v40 >> 9));
                    uint64_t v46 = (uint64_t *)(v42 + 16 * v45);
                    uint64_t v47 = *v46;
                    if (v40 != *v46)
                    {
                      int v48 = 1;
                      do
                      {
                        if (v47 == -4096) {
                          goto LABEL_56;
                        }
                        int v49 = v45 + v48++;
                        uint64_t v45 = v49 & v44;
                        uint64_t v47 = *(void *)(v42 + 16 * v45);
                      }
                      while (v40 != v47);
                      uint64_t v46 = (uint64_t *)(v42 + 16 * v45);
                    }
                    *uint64_t v46 = -8192;
                    v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v40 = v25[7];
LABEL_56:
                    *(unsigned char *)(v40 + 17) &= ~1u;
                  }
                }
              }
            }
            v25[7] = v24;
            if (v24 != -8192 && v24 != -4096 && v24) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v25 + 5));
            }
          }
          goto LABEL_13;
        }
LABEL_20:
        if (v20 == v18 + (v17 << 6)) {
          goto LABEL_21;
        }
      }
LABEL_13:
      uint64_t v14 = *(void *)(v14 + 8);
      if (v14 == v13) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v343 = &v345;
  uint64_t v344 = 0xA00000000;
  int v324 = v328;
  uint64_t v325 = (uint64_t)v328;
  uint64_t v326 = 16;
  LODWORD(v327) = 0;
  uint64_t v340 = &v342;
  uint64_t v341 = 0xA00000000;
  uint64_t v50 = (unint64_t *)v323;
  unsigned int v319 = (unint64_t *)v323;
  unsigned int v320 = (unint64_t *)v323;
  uint64_t v321 = 8;
  int v322 = 0;
  uint64_t v314 = v318;
  v315 = v318;
  uint64_t v316 = 8;
  int v317 = 0;
  v337 = &v339;
  uint64_t v338 = 0x500000000;
  v334 = &v336;
  uint64_t v51 = v12 + 40;
  uint64_t v335 = 0x500000000;
  if (v13 != v12 + 40)
  {
    while (1)
    {
      if (v13) {
        uint64_t v52 = v13 - 24;
      }
      else {
        uint64_t v52 = 0;
      }
      int v53 = *(unsigned __int8 *)(v52 + 16);
      if (v53 != 83 && (v53 - 29) >= 0xB)
      {
        if (v344 >= (unint64_t)HIDWORD(v344)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v343 + v344) = v52;
        LODWORD(v344) = v344 + 1;
        uint64_t v55 = v320;
        uint64_t v56 = HIDWORD(v321);
        if (v320 != v319)
        {
          unsigned int v60 = v321;
LABEL_80:
          if (3 * v60 <= 4 * (HIDWORD(v321) - v322))
          {
            if (v60 >= 0x40) {
              v60 *= 2;
            }
            else {
              unsigned int v60 = 128;
            }
          }
          else if (v60 - HIDWORD(v321) >= v60 >> 3)
          {
            goto LABEL_82;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v319, v60);
          unsigned int v60 = v321;
          uint64_t v55 = v320;
LABEL_82:
          unsigned int v61 = v60 - 1;
          unsigned int v62 = (v60 - 1) & ((v52 >> 4) ^ (v52 >> 9));
          unsigned int v63 = &v55[v62];
          unint64_t v64 = *v63;
          if (*v63 == -1)
          {
            uint64_t v65 = 0;
LABEL_94:
            if (v65) {
              int64_t v69 = v65;
            }
            else {
              int64_t v69 = (uint64_t *)v63;
            }
            if (*v69 != v52)
            {
              if (*v69 == -2) {
                --v322;
              }
              else {
                ++HIDWORD(v321);
              }
              *int64_t v69 = v52;
            }
          }
          else
          {
            uint64_t v65 = 0;
            int v66 = 1;
            while (v64 != v52)
            {
              if (v65) {
                BOOL v67 = 0;
              }
              else {
                BOOL v67 = v64 == -2;
              }
              if (v67) {
                uint64_t v65 = (uint64_t *)v63;
              }
              unsigned int v68 = v62 + v66++;
              unsigned int v62 = v68 & v61;
              unsigned int v63 = &v55[v68 & v61];
              unint64_t v64 = *v63;
              if (*v63 == -1) {
                goto LABEL_94;
              }
            }
          }
          goto LABEL_101;
        }
        if (!HIDWORD(v321)) {
          goto LABEL_77;
        }
        uint64_t v57 = 0;
        uint64_t v58 = 8 * HIDWORD(v321);
        uint64_t v59 = v320;
        do
        {
          if (*v59 == v52) {
            goto LABEL_101;
          }
          if (*v59 == -2) {
            uint64_t v57 = v59;
          }
          ++v59;
          v58 -= 8;
        }
        while (v58);
        if (v57)
        {
          *uint64_t v57 = v52;
          --v322;
        }
        else
        {
LABEL_77:
          unsigned int v60 = v321;
          if (HIDWORD(v321) >= v321) {
            goto LABEL_80;
          }
          ++HIDWORD(v321);
          v320[v56] = v52;
        }
      }
LABEL_101:
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == v51)
      {
        uint64_t v50 = v319;
        uint64_t v70 = v320;
        unsigned int v72 = v321;
        LODWORD(v71) = HIDWORD(v321);
        goto LABEL_111;
      }
    }
  }
  LODWORD(v71) = 0;
  unsigned int v72 = 8;
  uint64_t v70 = (unint64_t *)v323;
LABEL_111:
  if (v70 == v50) {
    uint64_t v71 = v71;
  }
  else {
    uint64_t v71 = v72;
  }
  unsigned int v73 = &v70[v71];
  if (v71)
  {
    uint64_t v74 = 8 * v71;
    do
    {
      if (*v70 < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_119;
      }
      ++v70;
      v74 -= 8;
    }
    while (v74);
    uint64_t v70 = v73;
  }
LABEL_119:
  sub_1CC002B9C((llvm::SmallPtrSetImplBase *)&v324, v70, v73, v73);
  uint64_t v75 = a5[2];
  uint64_t v76 = v75 + 40;
  uint64_t v77 = *(void *)(v75 + 48);
  if (v77 != v75 + 40)
  {
    do
    {
      if (v77) {
        uint64_t v78 = v77 - 24;
      }
      else {
        uint64_t v78 = 0;
      }
      int v79 = *(unsigned __int8 *)(v78 + 16);
      if (v79 != 83 && (v79 - 29) >= 0xB)
      {
        if (v344 >= (unint64_t)HIDWORD(v344)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v343 + v344) = v78;
        LODWORD(v344) = v344 + 1;
        uint64_t v81 = v325;
        uint64_t v82 = HIDWORD(v326);
        if ((void *)v325 != v324)
        {
          unsigned int v86 = v326;
LABEL_140:
          if (3 * v86 <= 4 * (HIDWORD(v326) - (int)v327))
          {
            if (v86 >= 0x40) {
              v86 *= 2;
            }
            else {
              unsigned int v86 = 128;
            }
          }
          else if (v86 - HIDWORD(v326) >= v86 >> 3)
          {
            goto LABEL_142;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v324, v86);
          unsigned int v86 = v326;
          uint64_t v81 = v325;
LABEL_142:
          unsigned int v87 = v86 - 1;
          unsigned int v88 = (v86 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          uint64_t v89 = (void *)(v81 + 8 * v88);
          uint64_t v90 = *v89;
          if (*v89 == -1)
          {
            uint64_t v91 = 0;
LABEL_154:
            if (v91) {
              uint64_t v95 = v91;
            }
            else {
              uint64_t v95 = v89;
            }
            if (*v95 != v78)
            {
              if (*v95 == -2) {
                LODWORD(v327) = v327 - 1;
              }
              else {
                ++HIDWORD(v326);
              }
              *uint64_t v95 = v78;
            }
          }
          else
          {
            uint64_t v91 = 0;
            int v92 = 1;
            while (v90 != v78)
            {
              if (v91) {
                BOOL v93 = 0;
              }
              else {
                BOOL v93 = v90 == -2;
              }
              if (v93) {
                uint64_t v91 = v89;
              }
              unsigned int v94 = v88 + v92++;
              unsigned int v88 = v94 & v87;
              uint64_t v89 = (void *)(v81 + 8 * (v94 & v87));
              uint64_t v90 = *v89;
              if (*v89 == -1) {
                goto LABEL_154;
              }
            }
          }
          goto LABEL_161;
        }
        if (!HIDWORD(v326)) {
          goto LABEL_137;
        }
        uint64_t v83 = 0;
        uint64_t v84 = 8 * HIDWORD(v326);
        __int16 v85 = (void *)v325;
        do
        {
          if (*v85 == v78) {
            goto LABEL_161;
          }
          if (*v85 == -2) {
            uint64_t v83 = v85;
          }
          ++v85;
          v84 -= 8;
        }
        while (v84);
        if (v83)
        {
          *uint64_t v83 = v78;
          LODWORD(v327) = v327 - 1;
        }
        else
        {
LABEL_137:
          unsigned int v86 = v326;
          if (HIDWORD(v326) >= v326) {
            goto LABEL_140;
          }
          ++HIDWORD(v326);
          *(void *)(v325 + 8 * v82) = v78;
        }
      }
LABEL_161:
      uint64_t v77 = *(void *)(v77 + 8);
    }
    while (v77 != v76);
  }
  uint64_t v96 = a5[4];
  uint64_t v97 = v96 + 40;
  uint64_t v98 = *(void *)(v96 + 48);
  if (v98 != v96 + 40)
  {
    do
    {
      if (v98) {
        uint64_t v99 = v98 - 24;
      }
      else {
        uint64_t v99 = 0;
      }
      int v100 = *(unsigned __int8 *)(v99 + 16);
      if (v100 != 83 && (v100 - 29) >= 0xB)
      {
        if (v344 >= (unint64_t)HIDWORD(v344)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v343 + v344) = v99;
        LODWORD(v344) = v344 + 1;
        uint64_t v102 = v325;
        uint64_t v103 = HIDWORD(v326);
        if ((void *)v325 != v324)
        {
          unsigned int v107 = v326;
LABEL_191:
          if (3 * v107 <= 4 * (HIDWORD(v326) - (int)v327))
          {
            if (v107 >= 0x40) {
              v107 *= 2;
            }
            else {
              unsigned int v107 = 128;
            }
          }
          else if (v107 - HIDWORD(v326) >= v107 >> 3)
          {
            goto LABEL_193;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v324, v107);
          unsigned int v107 = v326;
          uint64_t v102 = v325;
LABEL_193:
          unsigned int v108 = v107 - 1;
          unsigned int v109 = (v107 - 1) & ((v99 >> 4) ^ (v99 >> 9));
          unsigned int v110 = (void *)(v102 + 8 * v109);
          uint64_t v111 = *v110;
          if (*v110 == -1)
          {
            unsigned int v112 = 0;
LABEL_205:
            if (v112) {
              uint64_t v116 = v112;
            }
            else {
              uint64_t v116 = v110;
            }
            if (*v116 != v99)
            {
              if (*v116 == -2) {
                LODWORD(v327) = v327 - 1;
              }
              else {
                ++HIDWORD(v326);
              }
              *uint64_t v116 = v99;
            }
          }
          else
          {
            unsigned int v112 = 0;
            int v113 = 1;
            while (v111 != v99)
            {
              if (v112) {
                BOOL v114 = 0;
              }
              else {
                BOOL v114 = v111 == -2;
              }
              if (v114) {
                unsigned int v112 = v110;
              }
              unsigned int v115 = v109 + v113++;
              unsigned int v109 = v115 & v108;
              unsigned int v110 = (void *)(v102 + 8 * (v115 & v108));
              uint64_t v111 = *v110;
              if (*v110 == -1) {
                goto LABEL_205;
              }
            }
          }
          goto LABEL_212;
        }
        if (!HIDWORD(v326)) {
          goto LABEL_188;
        }
        uint64_t v104 = 0;
        uint64_t v105 = 8 * HIDWORD(v326);
        uint64_t v106 = (void *)v325;
        do
        {
          if (*v106 == v99) {
            goto LABEL_212;
          }
          if (*v106 == -2) {
            uint64_t v104 = v106;
          }
          ++v106;
          v105 -= 8;
        }
        while (v105);
        if (v104)
        {
          *uint64_t v104 = v99;
          LODWORD(v327) = v327 - 1;
        }
        else
        {
LABEL_188:
          unsigned int v107 = v326;
          if (HIDWORD(v326) >= v326) {
            goto LABEL_191;
          }
          ++HIDWORD(v326);
          *(void *)(v325 + 8 * v103) = v99;
        }
      }
LABEL_212:
      uint64_t v98 = *(void *)(v98 + 8);
    }
    while (v98 != v97);
  }
  uint64_t v117 = a5[5];
  uint64_t v118 = v117 + 40;
  uint64_t v119 = *(void *)(v117 + 48);
  if (v119 != v117 + 40)
  {
    do
    {
      if (v119) {
        uint64_t v120 = v119 - 24;
      }
      else {
        uint64_t v120 = 0;
      }
      int v121 = *(unsigned __int8 *)(v120 + 16);
      if (v121 != 83 && (v121 - 29) >= 0xB)
      {
        if (v344 >= (unint64_t)HIDWORD(v344)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v343 + v344) = v120;
        LODWORD(v344) = v344 + 1;
        uint64_t v123 = v315;
        uint64_t v124 = HIDWORD(v316);
        if (v315 != v314)
        {
          unsigned int v128 = v316;
LABEL_242:
          if (3 * v128 <= 4 * (HIDWORD(v316) - v317))
          {
            if (v128 >= 0x40) {
              v128 *= 2;
            }
            else {
              unsigned int v128 = 128;
            }
          }
          else if (v128 - HIDWORD(v316) >= v128 >> 3)
          {
            goto LABEL_244;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v314, v128);
          unsigned int v128 = v316;
          uint64_t v123 = v315;
LABEL_244:
          unsigned int v129 = v128 - 1;
          unsigned int v130 = (v128 - 1) & ((v120 >> 4) ^ (v120 >> 9));
          uint64_t v131 = &v123[8 * v130];
          uint64_t v132 = *v131;
          if (*v131 == -1)
          {
            uint64_t v133 = 0;
LABEL_256:
            if (v133) {
              uint64_t v137 = v133;
            }
            else {
              uint64_t v137 = v131;
            }
            if (*v137 != v120)
            {
              if (*v137 == -2) {
                --v317;
              }
              else {
                ++HIDWORD(v316);
              }
              *uint64_t v137 = v120;
            }
          }
          else
          {
            uint64_t v133 = 0;
            int v134 = 1;
            while (v132 != v120)
            {
              if (v133) {
                BOOL v135 = 0;
              }
              else {
                BOOL v135 = v132 == -2;
              }
              if (v135) {
                uint64_t v133 = v131;
              }
              unsigned int v136 = v130 + v134++;
              unsigned int v130 = v136 & v129;
              uint64_t v131 = &v123[8 * (v136 & v129)];
              uint64_t v132 = *v131;
              if (*v131 == -1) {
                goto LABEL_256;
              }
            }
          }
          goto LABEL_263;
        }
        if (!HIDWORD(v316)) {
          goto LABEL_239;
        }
        int v125 = 0;
        uint64_t v126 = 8 * HIDWORD(v316);
        uint64_t v127 = v315;
        do
        {
          if (*v127 == v120) {
            goto LABEL_263;
          }
          if (*v127 == -2) {
            int v125 = v127;
          }
          ++v127;
          v126 -= 8;
        }
        while (v126);
        if (v125)
        {
          *int v125 = v120;
          --v317;
        }
        else
        {
LABEL_239:
          unsigned int v128 = v316;
          if (HIDWORD(v316) >= v316) {
            goto LABEL_242;
          }
          ++HIDWORD(v316);
          *(void *)&v315[8 * v124] = v120;
        }
      }
LABEL_263:
      uint64_t v119 = *(void *)(v119 + 8);
    }
    while (v119 != v118);
  }
  unsigned int v138 = (unint64_t *)v315;
  if (v315 == v314) {
    uint64_t v139 = (uint64_t *)((char *)&v316 + 4);
  }
  else {
    uint64_t v139 = &v316;
  }
  uint64_t v140 = *(unsigned int *)v139;
  uint64_t v141 = (unint64_t *)&v315[8 * v140];
  if (v140)
  {
    uint64_t v142 = 8 * v140;
    do
    {
      if (*v138 < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_280;
      }
      ++v138;
      v142 -= 8;
    }
    while (v142);
    unsigned int v138 = v141;
  }
LABEL_280:
  sub_1CC002B9C((llvm::SmallPtrSetImplBase *)&v324, v138, v141, v141);
  uint64_t v143 = a5[6];
  uint64_t v144 = v143 + 40;
  uint64_t v145 = *(void *)(v143 + 48);
  if (v145 != v143 + 40)
  {
    do
    {
      if (v145) {
        uint64_t v146 = v145 - 24;
      }
      else {
        uint64_t v146 = 0;
      }
      int v147 = *(unsigned __int8 *)(v146 + 16);
      if (v147 != 83 && (v147 - 29) >= 0xB)
      {
        if (v341 >= (unint64_t)HIDWORD(v341)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v340 + v341) = v146;
        LODWORD(v341) = v341 + 1;
        uint64_t v149 = v325;
        uint64_t v150 = HIDWORD(v326);
        if ((void *)v325 != v324)
        {
          unsigned int v154 = v326;
LABEL_301:
          if (3 * v154 <= 4 * (HIDWORD(v326) - (int)v327))
          {
            if (v154 >= 0x40) {
              v154 *= 2;
            }
            else {
              unsigned int v154 = 128;
            }
          }
          else if (v154 - HIDWORD(v326) >= v154 >> 3)
          {
            goto LABEL_303;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v324, v154);
          unsigned int v154 = v326;
          uint64_t v149 = v325;
LABEL_303:
          unsigned int v155 = v154 - 1;
          unsigned int v156 = (v154 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          BOOL v157 = (void *)(v149 + 8 * v156);
          uint64_t v158 = *v157;
          if (*v157 == -1)
          {
            unsigned int v159 = 0;
LABEL_315:
            if (v159) {
              uint64_t v163 = v159;
            }
            else {
              uint64_t v163 = v157;
            }
            if (*v163 != v146)
            {
              if (*v163 == -2) {
                LODWORD(v327) = v327 - 1;
              }
              else {
                ++HIDWORD(v326);
              }
              *uint64_t v163 = v146;
            }
          }
          else
          {
            unsigned int v159 = 0;
            int v160 = 1;
            while (v158 != v146)
            {
              if (v159) {
                BOOL v161 = 0;
              }
              else {
                BOOL v161 = v158 == -2;
              }
              if (v161) {
                unsigned int v159 = v157;
              }
              unsigned int v162 = v156 + v160++;
              unsigned int v156 = v162 & v155;
              BOOL v157 = (void *)(v149 + 8 * (v162 & v155));
              uint64_t v158 = *v157;
              if (*v157 == -1) {
                goto LABEL_315;
              }
            }
          }
          goto LABEL_322;
        }
        if (!HIDWORD(v326)) {
          goto LABEL_298;
        }
        unint64_t v151 = 0;
        uint64_t v152 = 8 * HIDWORD(v326);
        unint64_t v153 = (void *)v325;
        do
        {
          if (*v153 == v146) {
            goto LABEL_322;
          }
          if (*v153 == -2) {
            unint64_t v151 = v153;
          }
          ++v153;
          v152 -= 8;
        }
        while (v152);
        if (v151)
        {
          *unint64_t v151 = v146;
          LODWORD(v327) = v327 - 1;
        }
        else
        {
LABEL_298:
          unsigned int v154 = v326;
          if (HIDWORD(v326) >= v326) {
            goto LABEL_301;
          }
          ++HIDWORD(v326);
          *(void *)(v325 + 8 * v150) = v146;
        }
      }
LABEL_322:
      uint64_t v145 = *(void *)(v145 + 8);
    }
    while (v145 != v144);
  }
  uint64_t v164 = *(void *)(v10 + 40);
  v308 = (uint64_t *)(v10 + 40);
  if (v164 == v10 + 40)
  {
    uint64_t v166 = 0;
  }
  else
  {
    uint64_t v165 = v164 - 24;
    if (!v164) {
      uint64_t v165 = 0;
    }
    if (*(unsigned __int8 *)(v165 + 16) - 29 >= 0xB) {
      uint64_t v166 = 0;
    }
    else {
      uint64_t v166 = v165;
    }
  }
  uint64_t v167 = (void *)(v166 + 24);
  v168 = (void *)(v166 + 24);
  if (v166 + 24 != *(void *)(v10 + 48)) {
    v168 = (void *)*v167;
  }
  if (!a6)
  {
    if ((a7 & 0x20) == 0) {
      goto LABEL_484;
    }
LABEL_470:
    if (v168 == v167) {
      v168 = *(void **)(a2 + 48);
    }
    if (v338)
    {
      unsigned int v249 = (llvm::Instruction **)v337;
      uint64_t v250 = 8 * v338;
      do
      {
        uint64_t v252 = *v249++;
        uint64_t v251 = v252;
        if (v168) {
          uint64_t v253 = (llvm::Instruction *)(v168 - 3);
        }
        else {
          uint64_t v253 = 0;
        }
        llvm::Instruction::moveBefore(v251, v253);
        v168 = (void *)*((void *)v251 + 4);
        v250 -= 8;
      }
      while (v250);
    }
    if (v335)
    {
      uint64_t v254 = (llvm::Instruction **)v334;
      if (v164) {
        uint64_t v255 = (llvm::Instruction *)(v164 - 24);
      }
      else {
        uint64_t v255 = 0;
      }
      uint64_t v256 = 8 * v335;
      do
      {
        uint64_t v257 = *v254++;
        llvm::Instruction::moveBefore(v257, v255);
        v256 -= 8;
      }
      while (v256);
    }
LABEL_484:
    if (v341)
    {
      v258 = (llvm::Instruction **)v340;
      do
      {
        uint64_t v259 = *v258;
        v260 = *(uint64_t **)(a1 + 16);
        uint64_t v262 = *v260;
        uint64_t v261 = v260[1];
        if (v261 == *v260)
        {
          uint64_t v263 = *((unsigned int *)v260 + 5);
          uint64_t v264 = (llvm::Instruction **)(v261 + 8 * v263);
          if (v263)
          {
            uint64_t v265 = 0;
            uint64_t v266 = 8 * v263;
            while (*(llvm::Instruction **)(v261 + v265) != v259)
            {
              v265 += 8;
              if (v266 == v265) {
                goto LABEL_504;
              }
            }
            uint64_t v264 = (llvm::Instruction **)(v261 + v265);
          }
LABEL_504:
          uint64_t v262 = v260[1];
        }
        else
        {
          uint64_t v267 = *((unsigned int *)v260 + 4);
          int v268 = v267 - 1;
          unsigned int v269 = (v267 - 1) & ((v259 >> 4) ^ (v259 >> 9));
          uint64_t v264 = (llvm::Instruction **)(v261 + 8 * v269);
          v270 = *v264;
          if (*v264 == (llvm::Instruction *)-1)
          {
            v271 = 0;
LABEL_540:
            if (v271) {
              uint64_t v264 = v271;
            }
            if (*v264 != v259) {
              uint64_t v264 = (llvm::Instruction **)(v261 + 8 * v267);
            }
          }
          else
          {
            v271 = 0;
            int v272 = 1;
            while (v270 != v259)
            {
              if (v271) {
                BOOL v273 = 0;
              }
              else {
                BOOL v273 = v270 == (llvm::Instruction *)-2;
              }
              if (v273) {
                v271 = v264;
              }
              unsigned int v274 = v269 + v272++;
              unsigned int v269 = v274 & v268;
              uint64_t v264 = (llvm::Instruction **)(v261 + 8 * (v274 & v268));
              v270 = *v264;
              if (*v264 == (llvm::Instruction *)-1) {
                goto LABEL_540;
              }
            }
          }
        }
        if (v261 == v262) {
          uint64_t v275 = 20;
        }
        else {
          uint64_t v275 = 16;
        }
        if (v264 == (llvm::Instruction **)(v261 + 8 * *(unsigned int *)((char *)v260 + v275)))
        {
          v276 = (llvm::Value *)llvm::Instruction::clone(*v258);
          unsigned int v277 = v276;
          if (a2)
          {
            *((void *)v276 + 5) = a2;
            *(_WORD *)(a2 + 18) &= ~0x8000u;
            if ((*((unsigned char *)v276 + 23) & 0x10) != 0)
            {
              uint64_t v304 = *(void *)(a2 + 56);
              if (v304)
              {
                uint64_t v305 = *(llvm::ValueSymbolTable **)(v304 + 104);
                if (v305) {
                  llvm::ValueSymbolTable::reinsertValue(v305, v277);
                }
              }
            }
            uint64_t v278 = *v308;
            *((void *)v277 + 3) = *v308;
            *((void *)v277 + 4) = v308;
            *(void *)(v278 + 8) = (char *)v277 + 24;
            uint64_t *v308 = (uint64_t)v277 + 24;
          }
          uint64_t v330 = 2;
          uint64_t v331 = 0;
          __int32 v332 = (int32x2_t ****)v259;
          if (v259 != (llvm::Instruction *)-8192 && v259 != (llvm::Instruction *)-4096 && v259) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v330);
          }
          __int32 v329 = &unk_1F2615EC8;
          uint64_t v333 = a3;
          v279 = sub_1CC4CFF80(a3, &v329);
          if (v332 != (int32x2_t ****)-8192 && v332 != (int32x2_t ****)-4096 && v332)
          {
            unint64_t v280 = v330 & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v330 & 0xFFFFFFFFFFFFFFF8) = v331;
            if (v331)
            {
              *uint64_t v331 = *v331 & 7 | v280;
            }
            else
            {
              int v281 = v332;
              BOOL v282 = ***v332;
              unint64_t v283 = (unint64_t)v282[303];
              if (v283 <= v280)
              {
                uint64_t v284 = v282[305].u32[0];
                if (v283 + 16 * v284 > v280)
                {
                  unsigned int v285 = v284 - 1;
                  LODWORD(v286) = v285 & ((v332 >> 4) ^ (v332 >> 9));
                  v287 = (int32x2_t *****)(v283 + 16 * v286);
                  v288 = *v287;
                  if (v332 != *v287)
                  {
                    int v289 = 1;
                    do
                    {
                      if (v288 == (int32x2_t ****)-4096) {
                        goto LABEL_528;
                      }
                      int v290 = v286 + v289++;
                      uint64_t v286 = v290 & v285;
                      v288 = *(int32x2_t *****)(v283 + 16 * v286);
                    }
                    while (v332 != v288);
                    v287 = (int32x2_t *****)(v283 + 16 * v286);
                  }
                  void *v287 = (int32x2_t ****)-8192;
                  v282[304] = vadd_s32(v282[304], (int32x2_t)0x1FFFFFFFFLL);
                  int v281 = v332;
LABEL_528:
                  *((unsigned char *)v281 + 17) &= ~1u;
                }
              }
            }
          }
          int v291 = (llvm::Value *)v279[7];
          if (v291 != v277)
          {
            if (v291 && v291 != (llvm::Value *)-8192 && v291 != (llvm::Value *)-4096)
            {
              unint64_t v292 = v279[5] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v292 = v279[6];
              uint64_t v293 = (unint64_t *)v279[6];
              if (v293)
              {
                *uint64_t v293 = *v293 & 7 | v292;
              }
              else
              {
                uint64_t v294 = v279[7];
                v295 = ***(int32x2_t ****)v294;
                unint64_t v296 = (unint64_t)v295[303];
                if (v296 <= v292)
                {
                  uint64_t v297 = v295[305].u32[0];
                  if (v296 + 16 * v297 > v292)
                  {
                    unsigned int v298 = v297 - 1;
                    LODWORD(v299) = v298 & ((v294 >> 4) ^ (v294 >> 9));
                    v300 = (uint64_t *)(v296 + 16 * v299);
                    uint64_t v301 = *v300;
                    if (v294 != *v300)
                    {
                      int v302 = 1;
                      do
                      {
                        if (v301 == -4096) {
                          goto LABEL_555;
                        }
                        int v303 = v299 + v302++;
                        uint64_t v299 = v303 & v298;
                        uint64_t v301 = *(void *)(v296 + 16 * v299);
                      }
                      while (v294 != v301);
                      v300 = (uint64_t *)(v296 + 16 * v299);
                    }
                    uint64_t *v300 = -8192;
                    v295[304] = vadd_s32(v295[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v294 = v279[7];
LABEL_555:
                    *(unsigned char *)(v294 + 17) &= ~1u;
                  }
                }
              }
            }
            v279[7] = v277;
            if (v277 != (llvm::Value *)-8192 && v277 != (llvm::Value *)-4096 && v277) {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v279 + 5));
            }
          }
          operator new();
        }
        ++v258;
      }
      while (v258 != (llvm::Instruction **)((char *)v340 + 8 * v341));
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  v306 = v168;
  unint64_t v169 = 0;
  uint64_t v310 = a6;
  while (1)
  {
    if (*(unsigned __int16 *)(a4 + 240) >= 4u)
    {
      uint64_t v170 = (llvm::ConstantInt **)a5[7];
      if (v170)
      {
        v171 = llvm::ConstantInt::get(*v170, 1 << v169, 0);
        unint64_t v172 = (int32x2_t ****)a5[7];
        uint64_t v330 = 2;
        uint64_t v331 = 0;
        __int32 v332 = v172;
        if (v172 != (int32x2_t ****)-8192 && v172 != (int32x2_t ****)-4096 && v172) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v330);
        }
        __int32 v329 = &unk_1F2615EC8;
        uint64_t v333 = a3;
        int v173 = sub_1CC4CFF80(a3, &v329);
        if (v332 != (int32x2_t ****)-8192 && v332 != (int32x2_t ****)-4096 && v332)
        {
          unint64_t v174 = v330 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v330 & 0xFFFFFFFFFFFFFFF8) = v331;
          if (v331)
          {
            *uint64_t v331 = *v331 & 7 | v174;
          }
          else
          {
            uint64_t v175 = v332;
            unint64_t v176 = ***v332;
            unint64_t v177 = (unint64_t)v176[303];
            if (v177 <= v174)
            {
              uint64_t v178 = v176[305].u32[0];
              if (v177 + 16 * v178 > v174)
              {
                unsigned int v179 = v178 - 1;
                LODWORD(v180) = v179 & ((v332 >> 4) ^ (v332 >> 9));
                v181 = (int32x2_t *****)(v177 + 16 * v180);
                uint64_t v182 = *v181;
                if (v332 != *v181)
                {
                  int v183 = 1;
                  do
                  {
                    if (v182 == (int32x2_t ****)-4096) {
                      goto LABEL_360;
                    }
                    int v184 = v180 + v183++;
                    uint64_t v180 = v184 & v179;
                    uint64_t v182 = *(int32x2_t *****)(v177 + 16 * v180);
                  }
                  while (v332 != v182);
                  v181 = (int32x2_t *****)(v177 + 16 * v180);
                }
                char *v181 = (int32x2_t ****)-8192;
                v176[304] = vadd_s32(v176[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v175 = v332;
LABEL_360:
                *((unsigned char *)v175 + 17) &= ~1u;
              }
            }
          }
        }
        v185 = (void *)v173[7];
        if (v185 != v171)
        {
          if (v185 && v185 != (void *)-8192 && v185 != (void *)-4096)
          {
            unint64_t v225 = v173[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v225 = v173[6];
            v226 = (unint64_t *)v173[6];
            if (v226)
            {
              unint64_t *v226 = *v226 & 7 | v225;
            }
            else
            {
              uint64_t v227 = v173[7];
              v228 = ***(int32x2_t ****)v227;
              unint64_t v229 = (unint64_t)v228[303];
              if (v229 <= v225)
              {
                uint64_t v230 = v228[305].u32[0];
                if (v229 + 16 * v230 > v225)
                {
                  unsigned int v231 = v230 - 1;
                  LODWORD(v232) = v231 & ((v227 >> 4) ^ (v227 >> 9));
                  uint64_t v233 = (uint64_t *)(v229 + 16 * v232);
                  uint64_t v234 = *v233;
                  if (v227 != *v233)
                  {
                    int v235 = 1;
                    do
                    {
                      if (v234 == -4096) {
                        goto LABEL_452;
                      }
                      int v236 = v232 + v235++;
                      uint64_t v232 = v236 & v231;
                      uint64_t v234 = *(void *)(v229 + 16 * v232);
                    }
                    while (v227 != v234);
                    uint64_t v233 = (uint64_t *)(v229 + 16 * v232);
                  }
                  uint64_t *v233 = -8192;
                  v228[304] = vadd_s32(v228[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v227 = v173[7];
LABEL_452:
                  *(unsigned char *)(v227 + 17) &= ~1u;
                }
              }
            }
          }
          v173[7] = v171;
          if (v171 != (void *)-8192 && v171 != (void *)-4096 && v171) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v173 + 5));
          }
        }
      }
      uint64_t v186 = (llvm::ConstantInt **)a5[8];
      if (v186)
      {
        unsigned int v187 = llvm::ConstantInt::get(*v186, v169, 0);
        int v188 = (int32x2_t ****)a5[8];
        uint64_t v330 = 2;
        uint64_t v331 = 0;
        __int32 v332 = v188;
        if (v188 != (int32x2_t ****)-8192 && v188 != (int32x2_t ****)-4096 && v188) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v330);
        }
        __int32 v329 = &unk_1F2615EC8;
        uint64_t v333 = a3;
        uint64_t v189 = sub_1CC4CFF80(a3, &v329);
        if (v332 != (int32x2_t ****)-8192 && v332 != (int32x2_t ****)-4096 && v332)
        {
          unint64_t v190 = v330 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v330 & 0xFFFFFFFFFFFFFFF8) = v331;
          if (v331)
          {
            *uint64_t v331 = *v331 & 7 | v190;
          }
          else
          {
            uint64_t v191 = v332;
            uint64_t v192 = ***v332;
            unint64_t v193 = (unint64_t)v192[303];
            if (v193 <= v190)
            {
              uint64_t v194 = v192[305].u32[0];
              if (v193 + 16 * v194 > v190)
              {
                unsigned int v195 = v194 - 1;
                LODWORD(v196) = v195 & ((v332 >> 4) ^ (v332 >> 9));
                v197 = (int32x2_t *****)(v193 + 16 * v196);
                int v198 = *v197;
                if (v332 != *v197)
                {
                  int v199 = 1;
                  do
                  {
                    if (v198 == (int32x2_t ****)-4096) {
                      goto LABEL_385;
                    }
                    int v200 = v196 + v199++;
                    uint64_t v196 = v200 & v195;
                    int v198 = *(int32x2_t *****)(v193 + 16 * v196);
                  }
                  while (v332 != v198);
                  v197 = (int32x2_t *****)(v193 + 16 * v196);
                }
                void *v197 = (int32x2_t ****)-8192;
                v192[304] = vadd_s32(v192[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v191 = v332;
LABEL_385:
                *((unsigned char *)v191 + 17) &= ~1u;
              }
            }
          }
        }
        v201 = (void *)v189[7];
        if (v201 != v187)
        {
          if (v201 && v201 != (void *)-8192 && v201 != (void *)-4096)
          {
            unint64_t v237 = v189[5] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v237 = v189[6];
            v238 = (unint64_t *)v189[6];
            if (v238)
            {
              unint64_t *v238 = *v238 & 7 | v237;
            }
            else
            {
              uint64_t v239 = v189[7];
              uint64_t v240 = ***(int32x2_t ****)v239;
              unint64_t v241 = (unint64_t)v240[303];
              if (v241 <= v237)
              {
                uint64_t v242 = v240[305].u32[0];
                if (v241 + 16 * v242 > v237)
                {
                  unsigned int v243 = v242 - 1;
                  LODWORD(v244) = v243 & ((v239 >> 4) ^ (v239 >> 9));
                  uint64_t v245 = (uint64_t *)(v241 + 16 * v244);
                  uint64_t v246 = *v245;
                  if (v239 != *v245)
                  {
                    int v247 = 1;
                    do
                    {
                      if (v246 == -4096) {
                        goto LABEL_464;
                      }
                      int v248 = v244 + v247++;
                      uint64_t v244 = v248 & v243;
                      uint64_t v246 = *(void *)(v241 + 16 * v244);
                    }
                    while (v239 != v246);
                    uint64_t v245 = (uint64_t *)(v241 + 16 * v244);
                  }
                  *uint64_t v245 = -8192;
                  v240[304] = vadd_s32(v240[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v239 = v189[7];
LABEL_464:
                  *(unsigned char *)(v239 + 17) &= ~1u;
                }
              }
            }
          }
          v189[7] = v187;
          if (v187 != (void *)-8192 && v187 != (void *)-4096 && v187) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v189 + 5));
          }
        }
      }
    }
    unint64_t v311 = v169;
    if (v344) {
      break;
    }
    ++v169;
    if (v311 + 1 == v310)
    {
      uint64_t v164 = *v308;
      v168 = v306;
      if ((a7 & 0x20) == 0) {
        goto LABEL_484;
      }
      goto LABEL_470;
    }
  }
  uint64_t v202 = *(llvm::Instruction **)v343;
  unsigned int v203 = llvm::Instruction::clone(*(llvm::Instruction **)v343);
  uint64_t v205 = *(void *)(a4 + 64);
  uint64_t v204 = *(void *)(a4 + 72);
  if (v204 == v205)
  {
    uint64_t v206 = *(unsigned int *)(a4 + 84);
    v207 = (llvm::Instruction **)(v204 + 8 * v206);
    if (v206)
    {
      uint64_t v208 = 0;
      while (*(llvm::Instruction **)(v204 + v208) != v202)
      {
        v208 += 8;
        if (8 * v206 == v208) {
          goto LABEL_413;
        }
      }
      v207 = (llvm::Instruction **)(v204 + v208);
    }
LABEL_413:
    uint64_t v205 = *(void *)(a4 + 72);
  }
  else
  {
    uint64_t v209 = *(unsigned int *)(a4 + 80);
    int v210 = v209 - 1;
    unsigned int v211 = (v209 - 1) & ((v202 >> 4) ^ (v202 >> 9));
    v207 = (llvm::Instruction **)(v204 + 8 * v211);
    uint64_t v212 = *v207;
    if (*v207 == (llvm::Instruction *)-1)
    {
      v213 = 0;
LABEL_432:
      if (v213) {
        v207 = v213;
      }
      LODWORD(v206) = *(_DWORD *)(a4 + 84);
      unsigned int v224 = (llvm::Instruction **)(v204 + 8 * v209);
      if (*v207 != v202) {
        v207 = v224;
      }
    }
    else
    {
      v213 = 0;
      int v214 = 1;
      while (v212 != v202)
      {
        if (v213) {
          BOOL v215 = 0;
        }
        else {
          BOOL v215 = v212 == (llvm::Instruction *)-2;
        }
        if (v215) {
          v213 = v207;
        }
        unsigned int v216 = v211 + v214++;
        unsigned int v211 = v216 & v210;
        v207 = (llvm::Instruction **)(v204 + 8 * (v216 & v210));
        uint64_t v212 = *v207;
        if (*v207 == (llvm::Instruction *)-1) {
          goto LABEL_432;
        }
      }
      LODWORD(v206) = *(_DWORD *)(a4 + 84);
    }
  }
  if (v204 == v205) {
    unsigned int v217 = v206;
  }
  else {
    unsigned int v217 = *(_DWORD *)(a4 + 80);
  }
  if (v207 == (llvm::Instruction **)(v204 + 8 * v217))
  {
    v220 = *(llvm::Instruction ***)a4;
    uint64_t v221 = *(unsigned int *)(a4 + 8);
    if (v221)
    {
      uint64_t v222 = 8 * v221;
      unsigned int v223 = *(llvm::Instruction ***)a4;
      do
      {
        if (*v223 == v202) {
          goto LABEL_426;
        }
        ++v223;
        v222 -= 8;
      }
      while (v222);
      unsigned int v223 = &v220[v221];
    }
    else
    {
      unsigned int v223 = *(llvm::Instruction ***)a4;
    }
LABEL_426:
    if (v221 == v223 - v220) {
LABEL_430:
    }
      operator new();
    uint64_t v218 = v335;
    if (v335 >= (unint64_t)HIDWORD(v335)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v219 = &v334;
  }
  else
  {
    uint64_t v218 = v338;
    if (v338 >= (unint64_t)HIDWORD(v338)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v219 = &v337;
  }
  *((void *)*v219 + v218) = v203;
  ++*((_DWORD *)v219 + 2);
  goto LABEL_430;
}

uint64_t sub_1CC84E698(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CC84EAD8(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v5 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1CC84E718(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_17;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_14:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_17:
  *a3 = v7;
  return result;
}

void *sub_1CC84E7C0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC84E884((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC84E718((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC84E884(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(void **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC84EA10(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC84EA10(a1, v14, v7);
}

uint64_t sub_1CC84EA10(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CC84E718((uint64_t)v5, a2, &v11);
      int v10 = v11;
      *BOOL v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC84EAD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC84EB80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC84EC18()
{
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Unroll the loops to sample-rate";
  v1.n128_u64[1] = 31;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC408, "unroll-samplerate", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC408, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Version 2 of the color loop";
  v1.n128_u64[1] = 27;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC4C8, "colorloop-v2", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC4C8, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Version 2 of the color loop, unrolled";
  v1.n128_u64[1] = 37;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC588, "colorloop-v2-unroll", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC588, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Always unroll the color loop";
  v1.n128_u64[1] = 28;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC648, "unroll-colorloop", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC648, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Make the unroll heuristic always return false";
  v1.n128_u64[1] = 45;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC708, "multirate-unroll-force-no", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC708, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Sample mask produced by pixinfo can be directly used by lldsmp";
  v1.n128_u64[1] = 62;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC7C8, "direct-smpmsk", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC7C8, &dword_1CB82C000);
  char v3 = 0;
  int v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force 8xMSAA codepath";
  v1.n128_u64[1] = 21;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCDC888, "multirate-force-8xmsaa", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC888, &dword_1CB82C000);
}

void sub_1CC84EE84()
{
}

uint64_t sub_1CC84EF20(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC948;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261FAC0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC950, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC84EE84;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDC950, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC84EFD0()
{
}

void sub_1CC84F010(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC84F048()
{
  return "GPU fence optimizer";
}

void sub_1CC84F058(llvm::PassRegistry *a1, uint64_t a2)
{
  v3[0] = &unk_1F2617E40;
  v3[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v3);
}

uint64_t sub_1CC84F0A4(uint64_t a1, uint64_t a2)
{
  v55[8] = *MEMORY[0x1E4F143B8];
  char v3 = *(llvm::Module **)(a2 + 40);
  v38[0] = "agx.max_work_group_size";
  v39[8] = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v3, (const char **)v38);
  if (NamedMetadata)
  {
    uint64_t v33 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 128);
    uint64_t v34 = (unsigned int *)(v33 + 24);
    if (*(_DWORD *)(v33 + 32) >= 0x41u) {
      uint64_t v34 = *(unsigned int **)v34;
    }
    uint64_t v5 = *v34 | 0x100000000;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v5 < 0x21) {
    int v6 = HIDWORD(v5);
  }
  else {
    int v6 = 0;
  }
  int v53 = v55;
  uint64_t v54 = 0x800000000;
  uint64_t v7 = *(void *)(a2 + 80);
  if (v7 == a2 + 72)
  {
    char v8 = 0;
  }
  else
  {
    char v8 = 0;
    do
    {
      uint64_t v9 = v7 - 24;
      if (!v7) {
        uint64_t v9 = 0;
      }
      uint64_t v10 = v9 + 40;
      uint64_t v11 = *(void *)(v9 + 48);
      if (v11 != v9 + 40)
      {
        uint64_t v12 = 0;
        do
        {
          if (v11) {
            uint64_t v13 = v11 - 24;
          }
          else {
            uint64_t v13 = 0;
          }
          if (*(unsigned char *)(v13 + 16) == 84)
          {
            uint64_t v14 = *(void *)(v13 - 32);
            if (v14)
            {
              if (!*(unsigned char *)(v14 + 16)
                && *(void *)(v14 + 24) == *(void *)(v13 + 72)
                && (*(unsigned char *)(v14 + 33) & 0x20) != 0)
              {
                int v15 = *(_DWORD *)(*(void *)(v11 - 56) + 36);
                if (v15 == 2668) {
                  int v16 = v6;
                }
                else {
                  int v16 = 0;
                }
                if (v16 == 1)
                {
                  if (v54 >= (unint64_t)HIDWORD(v54)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v53[v54] = v11 - 24;
                  LODWORD(v54) = v54 + 1;
                }
                else if ((v15 - 1282) < 0x190 {
                       || (v15 - 2824) < 0xC
                }
                       || (v15 - 1682) < 0x8C)
                {
                  uint64_t v12 = 0;
                }
                else if (v15 == 2663)
                {
                  if (v12) {
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                  }
                  uint64_t v12 = v11 - 24;
                }
              }
            }
          }
          uint64_t v11 = *(void *)(v11 + 8);
        }
        while (v11 != v10);
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != a2 + 72);
    if (v54)
    {
      uint64_t v17 = *(void *)v3;
      v38[0] = v39;
      v38[1] = (void *)0x200000000;
      uint64_t v42 = v17;
      uint64_t v43 = &v51;
      unsigned int v44 = &v52;
      uint64_t v45 = 0;
      int v46 = 0;
      __int16 v47 = 512;
      char v48 = 7;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = &unk_1F2616E88;
      uint64_t v52 = &unk_1F2617008;
      uint64_t v18 = *(uint64_t ***)(a2 + 40);
      llvm::Intrinsic::getType(*v18, 2622, 0, 0);
      Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v18, 2622, 0, 0);
      llvm::Module::getOrInsertFunction((uint64_t)v18, "llvm.agx2.simdgroup.barrier.with.scope", (const char *)0x26, Type, 0);
      if (v54)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *v53;
        uint64_t v23 = *v53 + 24;
        uint64_t v40 = *(void *)(*v53 + 40);
        uint64_t v41 = v23;
        uint64_t v24 = *(unsigned __int8 **)(v22 + 48);
        v37[0] = (uint64_t)v24;
        if (v24)
        {
          llvm::MetadataTracking::track((uint64_t)v37, v24, 2);
          uint64_t v25 = v37[0];
        }
        else
        {
          uint64_t v25 = 0;
        }
        sub_1CB8461A4((uint64_t)v38, 0, v25);
        if (!v37[0]) {
          goto LABEL_43;
        }
        int v28 = *(unsigned __int8 *)v37[0];
        if ((v28 - 4) > 0x1E)
        {
          if ((v28 - 3) >= 0xFFFFFFFE) {
            uint64_t v31 = v37[0];
          }
          else {
            uint64_t v31 = 0;
          }
          if ((v28 - 3) < 0xFFFFFFFE)
          {
            if (v28 == 3) {
              *(void *)(v37[0] + 8) = 0;
            }
LABEL_43:
            if (v21) {
              unint64_t v26 = *(uint64_t ***)(v21 + 24);
            }
            else {
              unint64_t v26 = 0;
            }
            unint64_t v27 = (uint64_t *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
            v37[0] = *v27;
            v37[1] = v27[4];
            __int16 v36 = 257;
            sub_1CB845BAC((uint64_t *)v38, v26, (uint64_t **)v21, v37, 2, (uint64_t)v35, 0);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
          unint64_t v30 = v31 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v37[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v37[0] + 12)) {
            goto LABEL_43;
          }
          uint64_t v29 = *(void *)(v37[0] + 16);
          if ((v29 & 4) == 0) {
            goto LABEL_43;
          }
          unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFF8;
          if (!v30) {
            goto LABEL_43;
          }
        }
        v35[0] = v37;
        sub_1CC5FA668(v30 + 16, v35);
        goto LABEL_43;
      }
      if (v38[0] != v39) {
        free(v38[0]);
      }
      char v8 = 1;
    }
  }
  if (v53 != v55) {
    free(v53);
  }
  return v8 & 1;
}

void sub_1CC84F574(uint64_t a1)
{
}

uint64_t sub_1CC84F628(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC958;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F261FB60;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC960, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC84F574;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDC960, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC84F6D8()
{
}

void sub_1CC84F718(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC84F750(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CC84F7E0(uint64_t a1, uint64_t a2)
{
  v339[1] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = ((*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF) - 101;
  if (v2 > 3 || v2 == 1)
  {
    char v9 = 0;
  }
  else
  {
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    if (v6 == v7)
    {
LABEL_8:
      uint64_t v8 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v6 != &llvm::PostDominatorTreeWrapperPass::ID)
      {
        v6 += 16;
        if (v6 == v7) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *(void *)(v6 + 8);
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::PostDominatorTreeWrapperPass::ID);
    unint64_t v311 = (llvm *)a2;
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = v11 + 24;
    uint64_t v13 = *(void *)(v11 + 32);
    if (v13 == v11 + 24)
    {
      char v9 = 0;
      uint64_t v58 = a1;
      uint64_t v59 = (llvm *)a2;
    }
    else
    {
      uint64_t v14 = v10;
      do
      {
        uint64_t v15 = v13 - 56;
        if (!v13) {
          uint64_t v15 = 0;
        }
        if ((*(unsigned char *)(v15 + 33) & 0x20) != 0 && *(_DWORD *)(v15 + 36) == 2470)
        {
          uint64_t v16 = *(void *)(v15 + 8);
          if (v16)
          {
            while (1)
            {
              uint64_t v17 = *(void *)(v16 + 24);
              if (*(unsigned char *)(v17 + 16) != 84) {
                goto LABEL_79;
              }
              uint64_t v18 = *(void *)(v17 - 32);
              if (!v18) {
                goto LABEL_79;
              }
              if (*(unsigned char *)(v18 + 16)) {
                goto LABEL_79;
              }
              if (*(void *)(v18 + 24) != *(void *)(v17 + 72)) {
                goto LABEL_79;
              }
              if ((*(unsigned char *)(v18 + 33) & 0x20) == 0) {
                goto LABEL_79;
              }
              uint64_t v19 = *(void *)(v17 + 40);
              if (*(llvm **)(v19 + 56) != v311) {
                goto LABEL_79;
              }
              uint64_t v20 = *((void *)v311 + 10);
              uint64_t v21 = v20 ? v20 - 24 : 0;
              if (!sub_1CC85184C(*(void *)(v16 + 24))) {
                goto LABEL_79;
              }
              uint64_t v22 = *(void *)(v14 + 80);
              uint64_t v23 = *(unsigned int *)(v14 + 96);
              unsigned int v24 = v19 >> 4;
              if (!v23) {
                goto LABEL_34;
              }
              LODWORD(v25) = (v23 - 1) & (v24 ^ (v19 >> 9));
              unint64_t v26 = (uint64_t *)(v22 + 16 * v25);
              uint64_t v27 = *v26;
              if (v19 != *v26) {
                break;
              }
LABEL_35:
              unint64_t v30 = (uint64_t *)(v22 + 16 * v23);
              if (v26 == v30) {
                uint64_t v31 = 0;
              }
              else {
                uint64_t v31 = v26[1];
              }
              uint64_t v32 = v19;
              if (!v23) {
                goto LABEL_60;
              }
              unsigned int v33 = v23 - 1;
              LODWORD(v23) = (v23 - 1) & ((v21 >> 4) ^ (v21 >> 9));
              uint64_t v34 = (uint64_t *)(v22 + 16 * v23);
              uint64_t v35 = *v34;
              if (v21 != *v34)
              {
                int v36 = 1;
                while (v35 != -4096)
                {
                  int v37 = v23 + v36++;
                  uint64_t v23 = v37 & v33;
                  uint64_t v35 = *(void *)(v22 + 16 * v23);
                  if (v21 == v35)
                  {
                    uint64_t v34 = (uint64_t *)(v22 + 16 * v23);
                    goto LABEL_44;
                  }
                }
                uint64_t v32 = v19;
LABEL_60:
                uint64_t v43 = *(void *)(v17 + 32);
                if (v43) {
                  BOOL v44 = v43 == v32 + 40;
                }
                else {
                  BOOL v44 = 1;
                }
                if (v44) {
                  uint64_t v45 = 0;
                }
                else {
                  uint64_t v45 = v43 - 24;
                }
                if ((*(unsigned char *)(v19 + 23) & 0x10) != 0)
                {
                  uint64_t v46 = ***(void ***)v19;
                  uint64_t v47 = *(void *)(v46 + 152);
                  uint64_t v48 = *(unsigned int *)(v46 + 168);
                  if (v48)
                  {
                    LODWORD(v49) = (v48 - 1) & (v24 ^ (v19 >> 9));
                    uint64_t v50 = (uint64_t *)(v47 + 16 * v49);
                    uint64_t v51 = *v50;
                    if (*v50 != v19)
                    {
                      int v52 = 1;
                      do
                      {
                        if (v51 == -4096) {
                          goto LABEL_76;
                        }
                        int v53 = v49 + v52++;
                        uint64_t v49 = v53 & (v48 - 1);
                        uint64_t v51 = *(void *)(v47 + 16 * v49);
                      }
                      while (v51 != v19);
                      uint64_t v50 = (uint64_t *)(v47 + 16 * v49);
                    }
                  }
                  else
                  {
LABEL_76:
                    uint64_t v50 = (uint64_t *)(v47 + 16 * v48);
                  }
                  uint64_t v54 = (void *)v50[1];
                  uint64_t v57 = *v54;
                  uint64_t v56 = (char *)(v54 + 2);
                  uint64_t v55 = v57;
                }
                else
                {
                  uint64_t v55 = 0;
                  uint64_t v56 = &byte_1CFBCE98E;
                }
                __int16 v326 = 773;
                v323 = v56;
                uint64_t v324 = v55;
                v325[0] = ".after";
                llvm::BasicBlock::splitBasicBlock(v19, v45 + 24, (uint64_t)&v323, 0);
              }
LABEL_44:
              uint64_t v32 = v19;
              if (v34 == v30) {
                goto LABEL_60;
              }
              uint64_t v38 = v34[1];
              BOOL v39 = v38 == v31 || v38 == 0;
              uint64_t v32 = v19;
              if (v39) {
                goto LABEL_60;
              }
              if (v31)
              {
                uint64_t v32 = v19;
                if (*(void *)(v38 + 8) == v31) {
                  goto LABEL_60;
                }
                if (*(void *)(v31 + 8) != v38)
                {
                  unsigned int v40 = *(_DWORD *)(v31 + 16);
                  if (v40 < *(_DWORD *)(v38 + 16))
                  {
                    if (*(unsigned char *)(v14 + 120))
                    {
                      if (*(_DWORD *)(v38 + 72) >= *(_DWORD *)(v31 + 72))
                      {
                        uint64_t v32 = v19;
                        if (*(_DWORD *)(v38 + 76) <= *(_DWORD *)(v31 + 76)) {
                          goto LABEL_60;
                        }
                      }
                    }
                    else
                    {
                      unsigned int v41 = *(_DWORD *)(v14 + 124) + 1;
                      *(_DWORD *)(v14 + 124) = v41;
                      if (v41 > 0x20) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                      }
                      do
                      {
                        uint64_t v42 = v38;
                        uint64_t v38 = *(void *)(v38 + 8);
                      }
                      while (v38 && *(_DWORD *)(v38 + 16) >= v40);
                      uint64_t v32 = v19;
                      if (v42 == v31) {
                        goto LABEL_60;
                      }
                    }
                  }
                }
              }
LABEL_79:
              uint64_t v16 = *(void *)(v16 + 8);
              if (!v16) {
                goto LABEL_83;
              }
            }
            int v28 = 1;
            while (v27 != -4096)
            {
              int v29 = v25 + v28++;
              uint64_t v25 = v29 & (v23 - 1);
              uint64_t v27 = *(void *)(v22 + 16 * v25);
              if (v19 == v27)
              {
                unint64_t v26 = (uint64_t *)(v22 + 16 * v25);
                goto LABEL_35;
              }
            }
LABEL_34:
            unint64_t v26 = (uint64_t *)(v22 + 16 * v23);
            goto LABEL_35;
          }
        }
LABEL_83:
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v12);
      uint64_t v58 = a1;
      char v9 = 0;
      uint64_t v59 = v311;
    }
    unsigned int v60 = *(uint64_t **)(v58 + 8);
    uint64_t v61 = *v60;
    uint64_t v62 = v60[1];
    if (v61 == v62)
    {
LABEL_89:
      uint64_t v63 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v61 != &llvm::FunctionGroupInfoWrapperPass::ID)
      {
        v61 += 16;
        if (v61 == v62) {
          goto LABEL_89;
        }
      }
      uint64_t v63 = *(void *)(v61 + 8);
    }
    uint64_t v64 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v63 + 96))(v63, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
    int v317 = v319;
    uint64_t v318 = 0x400000000;
    uint64_t v65 = *((void *)v59 + 5);
    uint64_t v66 = v65 + 24;
    for (uint64_t i = *(void *)(v65 + 32); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v66) {
        goto LABEL_365;
      }
      uint64_t v68 = i - 56;
      if (!i) {
        uint64_t v68 = 0;
      }
      if ((*(unsigned char *)(v68 + 33) & 0x20) != 0 && *(_DWORD *)(v68 + 36) == 2470) {
        break;
      }
    }
    uint64_t v69 = *(void *)(v68 + 8);
    if (v69)
    {
      do
      {
        uint64_t v70 = *(void *)(v69 + 24);
        if (*(unsigned char *)(v70 + 16) == 84)
        {
          uint64_t v71 = *(void *)(v70 - 32);
          if (v71)
          {
            if (!*(unsigned char *)(v71 + 16)
              && *(void *)(v71 + 24) == *(void *)(v70 + 72)
              && (*(unsigned char *)(v71 + 33) & 0x20) != 0)
            {
              if (*(llvm **)(*(void *)(v70 + 40) + 56) == v59)
              {
                if (v318 >= (unint64_t)HIDWORD(v318)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v317 + v318) = v70;
                LODWORD(v318) = v318 + 1;
              }
              else
              {
                uint64_t v72 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v64 + 24))(v64);
                if ((llvm *)(*(uint64_t (**)(void))(v72 + 560))() == v59) {
                  goto LABEL_365;
                }
              }
            }
          }
        }
        uint64_t v69 = *(void *)(v69 + 8);
      }
      while (v69);
      if (v318)
      {
        unsigned int v73 = *(uint64_t **)(v58 + 8);
        uint64_t v74 = *v73;
        uint64_t v75 = v73[1];
        if (v74 == v75)
        {
LABEL_116:
          uint64_t v76 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v74 != &llvm::PostDominatorTreeWrapperPass::ID)
          {
            v74 += 16;
            if (v74 == v75) {
              goto LABEL_116;
            }
          }
          uint64_t v76 = *(void *)(v74 + 8);
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v76 + 96))(v76, &llvm::PostDominatorTreeWrapperPass::ID);
        uint64_t v78 = *(uint64_t **)(a1 + 8);
        uint64_t v79 = *v78;
        uint64_t v80 = v78[1];
        if (v79 == v80)
        {
LABEL_121:
          uint64_t v81 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v79 != &llvm::LoopInfoWrapperPass::ID)
          {
            v79 += 16;
            if (v79 == v80) {
              goto LABEL_121;
            }
          }
          uint64_t v81 = *(void *)(v79 + 8);
        }
        uint64_t v82 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v81 + 96))(v81, &llvm::LoopInfoWrapperPass::ID);
        uint64_t v83 = *((void *)v59 + 10);
        if (v83) {
          uint64_t v84 = v83 - 24;
        }
        else {
          uint64_t v84 = 0;
        }
        unsigned int v320 = v322;
        uint64_t v321 = 0x400000000;
        uint64_t v85 = 0;
        uint64_t v305 = 0;
        uint64_t v304 = v82 + 32;
        unsigned int v86 = (uint64_t *)v317;
        v306 = (uint64_t *)((char *)v317 + 8 * v318);
        unsigned int v307 = (v84 >> 4) ^ (v84 >> 9);
        uint64_t v308 = v82;
        while (1)
        {
          uint64_t v87 = v85;
          uint64_t v85 = *v86;
          uint64_t v88 = *(void *)(*v86 - 32 * (*(_DWORD *)(*v86 + 20) & 0x7FFFFFF));
          if (v88) {
            BOOL v89 = *(unsigned char *)(v88 + 16) == 16;
          }
          else {
            BOOL v89 = 0;
          }
          if (!v89) {
            goto LABEL_158;
          }
          uint64_t v90 = (void *)(v88 + 24);
          uint64_t v91 = *(unsigned int *)(v88 + 32);
          if (v91 >= 0x41)
          {
            int v92 = 0;
            int64_t v93 = (unint64_t)(v91 + 63) >> 6;
            do
            {
              BOOL v94 = v93-- < 1;
              if (v94) {
                break;
              }
              unint64_t v95 = *(void *)(*v90 + 8 * v93);
              v92 += __clz(v95);
            }
            while (!v95);
            int v96 = v91 | 0xFFFFFFC0;
            if ((v91 & 0x3F) == 0) {
              int v96 = 0;
            }
            if ((v91 - v92 - v96) > 0x40) {
              goto LABEL_158;
            }
            uint64_t v90 = (void *)*v90;
          }
          if (*v90 == 1)
          {
            if (v305 || !sub_1CD0FF278(v85)) {
              goto LABEL_275;
            }
            uint64_t v97 = *(void *)(v85 + 40);
            int v98 = *(_DWORD *)(v308 + 48);
            unsigned int v99 = v97 >> 4;
            if (v98)
            {
              uint64_t v100 = *(void *)(v308 + 32);
              unsigned int v101 = v98 - 1;
              uint64_t v102 = (v99 ^ (v97 >> 9)) & (v98 - 1);
              uint64_t v103 = *(void *)(v100 + 16 * v102);
              if (v97 == v103)
              {
LABEL_148:
                uint64_t v106 = *(void **)(v100 + 16 * v102 + 8);
                if (v106)
                {
                  int v107 = 0;
                  do
                  {
                    uint64_t v106 = (void *)*v106;
                    --v107;
                  }
                  while (v106);
                  if (v107) {
                    goto LABEL_275;
                  }
                }
              }
              else
              {
                int v104 = 1;
                while (v103 != -4096)
                {
                  int v105 = v102 + v104++;
                  uint64_t v102 = v105 & v101;
                  uint64_t v103 = *(void *)(v100 + 16 * v102);
                  if (v97 == v103) {
                    goto LABEL_148;
                  }
                }
              }
            }
            uint64_t v108 = *(void *)(v77 + 80);
            uint64_t v109 = *(unsigned int *)(v77 + 96);
            if (v109)
            {
              LODWORD(v110) = (v109 - 1) & (v99 ^ (v97 >> 9));
              uint64_t v111 = (uint64_t *)(v108 + 16 * v110);
              uint64_t v112 = *v111;
              if (v97 != *v111)
              {
                int v113 = 1;
                while (v112 != -4096)
                {
                  int v114 = v110 + v113++;
                  uint64_t v110 = v114 & (v109 - 1);
                  uint64_t v112 = *(void *)(v108 + 16 * v110);
                  if (v97 == v112)
                  {
                    uint64_t v111 = (uint64_t *)(v108 + 16 * v110);
                    goto LABEL_192;
                  }
                }
                goto LABEL_191;
              }
            }
            else
            {
LABEL_191:
              uint64_t v111 = (uint64_t *)(v108 + 16 * v109);
            }
LABEL_192:
            uint64_t v137 = (uint64_t *)(v108 + 16 * v109);
            if (v111 == v137) {
              uint64_t v138 = 0;
            }
            else {
              uint64_t v138 = v111[1];
            }
            if (v109)
            {
              unsigned int v139 = v109 - 1;
              LODWORD(v140) = v139 & v307;
              uint64_t v141 = (uint64_t *)(v108 + 16 * (v139 & v307));
              uint64_t v142 = *v141;
              if (v84 != *v141)
              {
                int v143 = 1;
                do
                {
                  if (v142 == -4096) {
                    goto LABEL_216;
                  }
                  int v144 = v140 + v143++;
                  uint64_t v140 = v144 & v139;
                  uint64_t v142 = *(void *)(v108 + 16 * v140);
                }
                while (v84 != v142);
                uint64_t v141 = (uint64_t *)(v108 + 16 * v140);
              }
              if (v141 != v137)
              {
                uint64_t v145 = v141[1];
                if (v145 != v138 && v145 != 0)
                {
                  if (!v138) {
                    goto LABEL_305;
                  }
                  if (*(void *)(v145 + 8) != v138)
                  {
                    if (*(void *)(v138 + 8) == v145) {
                      goto LABEL_275;
                    }
                    unsigned int v147 = *(_DWORD *)(v138 + 16);
                    if (v147 >= *(_DWORD *)(v145 + 16)) {
                      goto LABEL_275;
                    }
                    if (*(unsigned char *)(v77 + 120))
                    {
                      if (*(_DWORD *)(v145 + 72) < *(_DWORD *)(v138 + 72)) {
                        goto LABEL_275;
                      }
                      uint64_t v305 = v85;
                      uint64_t v85 = v87;
                      if (*(_DWORD *)(v145 + 76) > *(_DWORD *)(v138 + 76)) {
                        goto LABEL_275;
                      }
                    }
                    else
                    {
                      unsigned int v148 = *(_DWORD *)(v77 + 124) + 1;
                      *(_DWORD *)(v77 + 124) = v148;
                      if (v148 > 0x20) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                      }
                      do
                      {
                        uint64_t v149 = v145;
                        uint64_t v145 = *(void *)(v145 + 8);
                      }
                      while (v145 && *(_DWORD *)(v145 + 16) >= v147);
                      uint64_t v305 = v85;
                      uint64_t v85 = v87;
                      if (v149 != v138)
                      {
LABEL_275:
                        LOBYTE(v138) = 0;
                        goto LABEL_305;
                      }
                    }
                    goto LABEL_271;
                  }
                }
              }
            }
LABEL_216:
            uint64_t v305 = v85;
            goto LABEL_234;
          }
LABEL_158:
          if (!sub_1CC85184C(*v86) || !sub_1CC8518D8(v85)) {
            goto LABEL_275;
          }
          uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v85 + 40));
          uint64_t v116 = UniquePredecessor;
          uint64_t v117 = *(void *)(v77 + 80);
          uint64_t v118 = *(unsigned int *)(v77 + 96);
          unsigned int v119 = UniquePredecessor >> 4;
          if (v118)
          {
            LODWORD(v120) = (v119 ^ (UniquePredecessor >> 9)) & (v118 - 1);
            int v121 = (uint64_t *)(v117 + 16 * v120);
            uint64_t v122 = *v121;
            if (UniquePredecessor == *v121) {
              goto LABEL_167;
            }
            int v123 = 1;
            while (v122 != -4096)
            {
              int v124 = v120 + v123++;
              uint64_t v120 = v124 & (v118 - 1);
              uint64_t v122 = *(void *)(v117 + 16 * v120);
              if (UniquePredecessor == v122)
              {
                int v121 = (uint64_t *)(v117 + 16 * v120);
                goto LABEL_167;
              }
            }
          }
          int v121 = (uint64_t *)(v117 + 16 * v118);
LABEL_167:
          int v125 = (uint64_t *)(v117 + 16 * v118);
          if (v121 == v125)
          {
            uint64_t v126 = 0;
            if (!v118) {
              goto LABEL_223;
            }
          }
          else
          {
            uint64_t v126 = v121[1];
            if (!v118) {
              goto LABEL_223;
            }
          }
          unsigned int v127 = v118 - 1;
          LODWORD(v118) = (v118 - 1) & v307;
          unsigned int v128 = (uint64_t *)(v117 + 16 * v118);
          uint64_t v129 = *v128;
          if (v84 == *v128)
          {
LABEL_176:
            if (v128 != v125)
            {
              uint64_t v132 = v128[1];
              if (v132 != v126 && v132 != 0)
              {
                if (!v126) {
                  goto LABEL_232;
                }
                if (*(void *)(v132 + 8) != v126)
                {
                  if (*(void *)(v126 + 8) == v132) {
                    goto LABEL_232;
                  }
                  unsigned int v134 = *(_DWORD *)(v126 + 16);
                  if (v134 >= *(_DWORD *)(v132 + 16)) {
                    goto LABEL_232;
                  }
                  if (*(unsigned char *)(v77 + 120))
                  {
                    if (*(_DWORD *)(v132 + 72) < *(_DWORD *)(v126 + 72)
                      || *(_DWORD *)(v132 + 76) > *(_DWORD *)(v126 + 76))
                    {
                      goto LABEL_232;
                    }
                  }
                  else
                  {
                    unsigned int v135 = *(_DWORD *)(v77 + 124) + 1;
                    *(_DWORD *)(v77 + 124) = v135;
                    if (v135 > 0x20) {
                      llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                    }
                    do
                    {
                      uint64_t v136 = v132;
                      uint64_t v132 = *(void *)(v132 + 8);
                    }
                    while (v132 && *(_DWORD *)(v132 + 16) >= v134);
                    if (v136 != v126)
                    {
LABEL_232:
                      if (v321 >= (unint64_t)HIDWORD(v321)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      uint64_t v59 = v311;
                      *((void *)v320 + v321) = v85;
                      LODWORD(v321) = v321 + 1;
LABEL_234:
                      uint64_t v85 = v87;
                      goto LABEL_271;
                    }
                  }
                }
              }
            }
          }
          else
          {
            int v130 = 1;
            while (v129 != -4096)
            {
              int v131 = v118 + v130++;
              uint64_t v118 = v131 & v127;
              uint64_t v129 = *(void *)(v117 + 16 * v118);
              if (v84 == v129)
              {
                unsigned int v128 = (uint64_t *)(v117 + 16 * v118);
                goto LABEL_176;
              }
            }
          }
LABEL_223:
          int v150 = *(_DWORD *)(v308 + 48);
          if (v150)
          {
            uint64_t v151 = *(void *)(v308 + 32);
            unsigned int v152 = v150 - 1;
            uint64_t v153 = (v150 - 1) & (v119 ^ (UniquePredecessor >> 9));
            uint64_t v154 = *(void *)(v151 + 16 * v153);
            if (UniquePredecessor == v154)
            {
LABEL_228:
              BOOL v157 = *(void **)(v151 + 16 * v153 + 8);
              if (v157)
              {
                int v158 = 0;
                do
                {
                  BOOL v157 = (void *)*v157;
                  --v158;
                }
                while (v157);
                if (v158) {
                  goto LABEL_232;
                }
              }
            }
            else
            {
              int v155 = 1;
              while (v154 != -4096)
              {
                int v156 = v153 + v155++;
                uint64_t v153 = v156 & v152;
                uint64_t v154 = *(void *)(v151 + 16 * v153);
                if (UniquePredecessor == v154) {
                  goto LABEL_228;
                }
              }
            }
          }
          if (!v87)
          {
            uint64_t v59 = v311;
            goto LABEL_271;
          }
          uint64_t v159 = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(v87 + 40));
          uint64_t v160 = *(void *)(v77 + 80);
          uint64_t v161 = *(unsigned int *)(v77 + 96);
          if (!v161) {
            goto LABEL_243;
          }
          LODWORD(v162) = (v161 - 1) & (v119 ^ (v116 >> 9));
          uint64_t v163 = (uint64_t *)(v160 + 16 * v162);
          uint64_t v164 = *v163;
          if (v116 != *v163)
          {
            int v165 = 1;
            while (v164 != -4096)
            {
              int v166 = v162 + v165++;
              uint64_t v162 = v166 & (v161 - 1);
              uint64_t v164 = *(void *)(v160 + 16 * v162);
              if (v116 == v164)
              {
                uint64_t v163 = (uint64_t *)(v160 + 16 * v162);
                goto LABEL_244;
              }
            }
LABEL_243:
            uint64_t v163 = (uint64_t *)(v160 + 16 * v161);
          }
LABEL_244:
          uint64_t v167 = (uint64_t *)(v160 + 16 * v161);
          if (v163 == v167) {
            uint64_t v168 = 0;
          }
          else {
            uint64_t v168 = v163[1];
          }
          uint64_t v59 = v311;
          if (v161)
          {
            unsigned int v169 = v161 - 1;
            LODWORD(v161) = ((v159 >> 4) ^ (v159 >> 9)) & (v161 - 1);
            uint64_t v170 = (uint64_t *)(v160 + 16 * v161);
            uint64_t v171 = *v170;
            if (v159 != *v170)
            {
              int v172 = 1;
              while (v171 != -4096)
              {
                int v173 = v161 + v172++;
                uint64_t v161 = v173 & v169;
                uint64_t v171 = *(void *)(v160 + 16 * v161);
                if (v159 == v171)
                {
                  uint64_t v170 = (uint64_t *)(v160 + 16 * v161);
                  goto LABEL_253;
                }
              }
              goto LABEL_271;
            }
LABEL_253:
            if (v170 != v167)
            {
              uint64_t v174 = v170[1];
              if (v174 != v168 && v174 != 0)
              {
                if (v168)
                {
                  if (*(void *)(v174 + 8) == v168) {
                    goto LABEL_271;
                  }
                  if (*(void *)(v168 + 8) != v174)
                  {
                    unsigned int v176 = *(_DWORD *)(v168 + 16);
                    if (v176 < *(_DWORD *)(v174 + 16))
                    {
                      if (*(unsigned char *)(v77 + 120))
                      {
                        if (*(_DWORD *)(v174 + 72) >= *(_DWORD *)(v168 + 72)
                          && *(_DWORD *)(v174 + 76) <= *(_DWORD *)(v168 + 76))
                        {
                          goto LABEL_271;
                        }
                      }
                      else
                      {
                        unsigned int v177 = *(_DWORD *)(v77 + 124) + 1;
                        *(_DWORD *)(v77 + 124) = v177;
                        if (v177 > 0x20) {
                          llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
                        }
                        do
                        {
                          uint64_t v178 = v174;
                          uint64_t v174 = *(void *)(v174 + 8);
                        }
                        while (v174 && *(_DWORD *)(v174 + 16) >= v176);
                        if (v178 == v168) {
                          goto LABEL_271;
                        }
                      }
                    }
                  }
                }
                goto LABEL_234;
              }
            }
          }
LABEL_271:
          if (++v86 == v306)
          {
            LOBYTE(v138) = 0;
            if (v85 && v305)
            {
              uint64_t v179 = *(void *)(v77 + 80);
              uint64_t v180 = *(unsigned int *)(v77 + 96);
              if (v180)
              {
                uint64_t v181 = *(void *)(v305 + 40);
                LODWORD(v182) = ((v181 >> 4) ^ (v181 >> 9)) & (v180 - 1);
                int v183 = (uint64_t *)(v179 + 16 * v182);
                uint64_t v184 = *v183;
                if (v181 != *v183)
                {
                  int v185 = 1;
                  do
                  {
                    if (v184 == -4096) {
                      goto LABEL_285;
                    }
                    int v186 = v182 + v185++;
                    uint64_t v182 = v186 & (v180 - 1);
                    uint64_t v184 = *(void *)(v179 + 16 * v182);
                  }
                  while (v181 != v184);
                  int v183 = (uint64_t *)(v179 + 16 * v182);
                }
              }
              else
              {
LABEL_285:
                int v183 = (uint64_t *)(v179 + 16 * v180);
              }
              unsigned int v187 = (uint64_t *)(v179 + 16 * v180);
              if (v183 == v187) {
                uint64_t v138 = 0;
              }
              else {
                uint64_t v138 = v183[1];
              }
              if (!v180) {
                goto LABEL_376;
              }
              uint64_t v188 = *(void *)(v85 + 40);
              unsigned int v189 = v180 - 1;
              LODWORD(v180) = ((v188 >> 4) ^ (v188 >> 9)) & (v180 - 1);
              unint64_t v190 = (uint64_t *)(v179 + 16 * v180);
              uint64_t v191 = *v190;
              if (v188 != *v190)
              {
                int v192 = 1;
                do
                {
                  if (v191 == -4096) {
                    goto LABEL_376;
                  }
                  int v193 = v180 + v192++;
                  uint64_t v180 = v193 & v189;
                  uint64_t v191 = *(void *)(v179 + 16 * v180);
                }
                while (v188 != v191);
                unint64_t v190 = (uint64_t *)(v179 + 16 * v180);
              }
              if (v190 == v187) {
                goto LABEL_376;
              }
              uint64_t v194 = v190[1];
              if (v194 == v138 || v194 == 0) {
                goto LABEL_376;
              }
              if (!v138) {
                goto LABEL_305;
              }
              if (*(void *)(v194 + 8) == v138) {
                goto LABEL_376;
              }
              if (*(void *)(v138 + 8) == v194) {
                goto LABEL_304;
              }
              unsigned int v196 = *(_DWORD *)(v138 + 16);
              if (v196 >= *(_DWORD *)(v194 + 16)) {
                goto LABEL_304;
              }
              if (*(unsigned char *)(v77 + 120))
              {
                if (*(_DWORD *)(v194 + 72) >= *(_DWORD *)(v138 + 72)
                  && *(_DWORD *)(v194 + 76) <= *(_DWORD *)(v138 + 76))
                {
                  goto LABEL_376;
                }
LABEL_304:
                LOBYTE(v138) = 0;
                goto LABEL_305;
              }
              unsigned int v232 = *(_DWORD *)(v77 + 124) + 1;
              *(_DWORD *)(v77 + 124) = v232;
              if (v232 > 0x20) {
                llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers();
              }
              do
              {
                uint64_t v233 = v194;
                uint64_t v194 = *(void *)(v194 + 8);
              }
              while (v194 && *(_DWORD *)(v194 + 16) >= v196);
              if (v233 != v138) {
                goto LABEL_304;
              }
LABEL_376:
              uint64_t v234 = *(uint64_t **)(a1 + 8);
              uint64_t v235 = *v234;
              uint64_t v236 = v234[1];
              if (v235 == v236)
              {
                uint64_t v238 = 0;
                uint64_t v237 = v304;
              }
              else
              {
                uint64_t v237 = v304;
                while (*(_UNKNOWN **)v235 != &llvm::DominatorTreeWrapperPass::ID)
                {
                  v235 += 16;
                  if (v235 == v236)
                  {
                    uint64_t v238 = 0;
                    goto LABEL_383;
                  }
                }
                uint64_t v238 = *(void *)(v235 + 8);
              }
LABEL_383:
              uint64_t v239 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v238 + 96))(v238, &llvm::DominatorTreeWrapperPass::ID);
              if (v321)
              {
                uint64_t v240 = v239 + 32;
                unint64_t v241 = (uint64_t *)v320;
                uint64_t v242 = 8 * v321;
                while ((llvm::isPotentiallyReachable(*v241, v85, 0, v240, v237) & 1) != 0)
                {
                  ++v241;
                  v242 -= 8;
                  if (!v242) {
                    goto LABEL_387;
                  }
                }
                goto LABEL_304;
              }
LABEL_387:
              uint64_t v243 = *((void *)v59 + 5);
              if (*(char *)(v243 + 239) < 0) {
                sub_1CB8BDF7C((uint64_t)&v314, *(const void **)(v243 + 216), *(void *)(v243 + 224));
              }
              else {
                std::string v314 = *(std::string *)(v243 + 216);
              }
              if (std::string::compare(&v314, 0, 4uLL, "agx1") && std::string::compare(&v314, 0, 4uLL, "agx2")) {
                std::string::compare(&v314, 0, 4uLL, "agx3");
              }
              if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v314.__r_.__value_.__l.__data_);
              }
              uint64_t v244 = *(void *)(v305 + 40);
              uint64_t v245 = v244 + 40;
              uint64_t v246 = *(void *)(v244 + 48);
              if (v246 != v244 + 40)
              {
                while (2)
                {
                  if (v246) {
                    uint64_t v247 = v246 - 24;
                  }
                  else {
                    uint64_t v247 = 0;
                  }
                  if (v247 == v305) {
                    goto LABEL_439;
                  }
                  uint64_t v248 = *(unsigned __int8 *)(v247 + 16) - 33;
                  if (v248 <= 0x37)
                  {
                    if (((1 << (*(unsigned char *)(v247 + 16) - 33)) & 0x8000000000041) == 0)
                    {
                      if (v248 == 27) {
                        int v249 = (*(_WORD *)(v247 + 18) & 0x301) != 0;
                      }
                      else {
                        int v249 = ((1 << (*(unsigned char *)(v247 + 16) - 33)) & 0x808001D0000010) != 0;
                      }
                      goto LABEL_410;
                    }
                    uint64_t v250 = *(void *)(v247 + 64);
                    if (!v250 || (*(unsigned char *)(v250 + 17) & 0x30) == 0)
                    {
                      int v251 = *(_DWORD *)(v247 + 20);
                      if (v251 < 0)
                      {
                        uint64_t v257 = v247 - 32 * (v251 & 0x7FFFFFF);
                        uint64_t v260 = *(void *)(v257 - 8);
                        uint64_t v258 = v257 - 8;
                        uint64_t v259 = v260;
                        if (v260)
                        {
                          uint64_t v261 = -v259;
                          while (1)
                          {
                            unsigned int v262 = *(_DWORD *)(*(void *)(v258 + v261) + 8);
                            BOOL v94 = v262 > 7;
                            int v263 = (1 << v262) & 0x83;
                            if (v94 || v263 == 0) {
                              break;
                            }
                            v261 += 16;
                            if (!v261) {
                              goto LABEL_407;
                            }
                          }
                          int v249 = 1;
LABEL_410:
                          int v252 = *(unsigned __int8 *)(v247 + 16);
                          if (v252 == 84) {
                            uint64_t v253 = v247;
                          }
                          else {
                            uint64_t v253 = 0;
                          }
                          if (!v246 || v252 != 84) {
                            goto LABEL_423;
                          }
                          uint64_t v254 = *(void *)(v253 - 32);
                          if (!v254
                            || *(unsigned char *)(v254 + 16)
                            || *(void *)(v254 + 24) != *(void *)(v253 + 72)
                            || (*(unsigned char *)(v254 + 33) & 0x20) == 0)
                          {
LABEL_495:
                            LOBYTE(v138) = 0;
                            uint64_t v59 = v311;
                            goto LABEL_305;
                          }
                          if (((int v255 = *(_DWORD *)(*(void *)(v247 - 32) + 36), (v256 = *(void *)(v253 + 64)) != 0)
                             && (*(unsigned char *)(v256 + 12) & 0x40) != 0
                             || llvm::CallBase::hasFnAttrOnCalledFunction(v253, 6))
                            && (v255 - 1282) >= 0x190
                            && (v255 - 2824) >= 0xC)
                          {
                            if ((sub_1CD11346C(v255) ^ 1 | v249)) {
                              goto LABEL_495;
                            }
                          }
                          else
                          {
LABEL_423:
                            if (v249) {
                              goto LABEL_495;
                            }
                          }
                          uint64_t v246 = *(void *)(v246 + 8);
                          if (v246 == v245) {
                            goto LABEL_439;
                          }
                          continue;
                        }
                      }
LABEL_407:
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v247, 45) & 1) == 0)
                      {
                        int v249 = llvm::CallBase::hasFnAttrOnCalledFunction(v247, 44) ^ 1;
                        goto LABEL_410;
                      }
                    }
                  }
                  break;
                }
                int v249 = 0;
                goto LABEL_410;
              }
LABEL_439:
              uint64_t v265 = *(llvm::BasicBlock **)(v85 + 40);
              uint64_t v266 = llvm::BasicBlock::getUniquePredecessor(v265);
              uint64_t UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v265);
              uint64_t v268 = UniqueSuccessor;
              uint64_t v59 = v311;
              if (*(void *)(UniqueSuccessor + 40) != UniqueSuccessor + 40)
              {
                uint64_t v269 = *(void *)(UniqueSuccessor + 48);
                if (v269)
                {
                  if (*(unsigned char *)(v269 - 8) == 83)
                  {
                    LOBYTE(v138) = 0;
                    goto LABEL_305;
                  }
                }
              }
              uint64_t v270 = *(void *)(v266 + 40);
              if (v270 == v266 + 40)
              {
                uint64_t v271 = 0;
              }
              else
              {
                if (v270) {
                  uint64_t v271 = v270 - 24;
                }
                else {
                  uint64_t v271 = 0;
                }
                if (*(unsigned __int8 *)(v271 + 16) - 29 >= 0xB) {
                  uint64_t v271 = 0;
                }
              }
              if (*(unsigned char *)(v271 + 16) == 30) {
                uint64_t v272 = v271;
              }
              else {
                uint64_t v272 = 0;
              }
              for (uint64_t j = (void *)*((void *)v265 + 6); ; uint64_t j = (void *)j[1])
              {
                unsigned int v274 = j - 3;
                if (!j) {
                  unsigned int v274 = 0;
                }
                if (*((unsigned char *)v274 + 16) != 83) {
                  break;
                }
              }
              uint64_t v275 = 0;
              uint64_t v276 = *(void *)*(j - 3);
              v323 = (char *)v325;
              uint64_t v324 = 0x200000000;
              uint64_t v329 = v276;
              uint64_t v330 = &v338;
              uint64_t v331 = v339;
              uint64_t v332 = 0;
              int v333 = 0;
              __int16 v334 = 512;
              char v335 = 7;
              uint64_t v327 = 0;
              unint64_t v328 = 0;
              uint64_t v336 = 0;
              uint64_t v337 = 0;
              uint64_t v338 = &unk_1F2616E88;
              v339[0] = &unk_1F2617008;
              uint64_t v327 = j[2];
              unint64_t v328 = j;
              unsigned int v277 = (unsigned __int8 *)j[3];
              v312[0] = v277;
              if (v277)
              {
                llvm::MetadataTracking::track((uint64_t)v312, v277, 2);
                uint64_t v275 = v312[0];
              }
              sub_1CB8461A4((uint64_t)&v323, 0, v275);
              if (!v312[0])
              {
LABEL_462:
                v279 = *(unsigned __int8 **)(v272 - 96);
                if (*(void *)(v272 - 32) != v268 || *(llvm::BasicBlock **)(v272 - 64) != v265)
                {
                  __int16 v316 = 257;
                  v279 = (unsigned __int8 *)sub_1CC2427E8((uint64_t)&v323, (uint64_t)v279, (uint64_t)v315, v278);
                }
                uint64_t v280 = *(void *)v329 + 1936;
                __int16 v313 = 257;
                if (*(void *)v279 != v280)
                {
                  if (v279[16] <= 0x14u)
                  {
                    uint64_t v281 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v330 + 28))(v330, 39, v279, v280);
                    v279 = (unsigned __int8 *)v281;
                    if (v281)
                    {
                      if (*(unsigned __int8 *)(v281 + 16) >= 0x1Cu)
                      {
                        (*(void (**)(void *, uint64_t, void *, uint64_t, void *))(*v331 + 16))(v331, v281, v312, v327, v328);
                        if (v324)
                        {
                          int v302 = v323;
                          int v303 = &v323[16 * v324];
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v279, *(_DWORD *)v302, *((llvm::MDNode **)v302 + 1));
                            v302 += 16;
                          }
                          while (v302 != v303);
                        }
                      }
                    }
                  }
                  else
                  {
                    __int16 v316 = 257;
                    v279 = (unsigned __int8 *)llvm::CastInst::Create(39, (uint64_t)v279, v280, v315, 0);
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t, void *))(*v331 + 16))(v331, v279, v312, v327, v328);
                    if (v324)
                    {
                      uint64_t v299 = v323;
                      v300 = &v323[16 * v324];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v279, *(_DWORD *)v299, *((llvm::MDNode **)v299 + 1));
                        v299 += 16;
                      }
                      while (v299 != v300);
                    }
                  }
                }
                uint64_t v282 = *(void *)(v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF));
                __int16 v316 = 257;
                unint64_t v283 = sub_1CB844AF4((uint64_t)&v323, v279, v282, (uint64_t)v315);
                uint64_t v285 = *(_DWORD *)(v85 + 20) & 0x7FFFFFF;
                uint64_t v286 = -v285;
                v287 = (llvm::Instruction **)(v85 - 32 * v285);
                if (*v287)
                {
                  uint64_t v288 = v85 + 32 * v286;
                  int v290 = *(void **)(v288 + 16);
                  int v289 = (void *)(v288 + 16);
                  *int v290 = *(v289 - 1);
                  uint64_t v291 = *(v289 - 1);
                  if (v291) {
                    *(void *)(v291 + 16) = *v289;
                  }
                }
                void *v287 = v283;
                if (v283)
                {
                  uint64_t v294 = *((void *)v283 + 1);
                  unint64_t v292 = (llvm::Instruction ***)((char *)v283 + 8);
                  uint64_t v293 = v294;
                  uint64_t v295 = v85 + 32 * v286;
                  *(void *)(v295 + 8) = v294;
                  if (v294) {
                    *(void *)(v293 + 16) = v295 + 8;
                  }
                  *(void *)(v295 + 16) = v292;
                  char *v292 = v287;
                }
                llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v265, 0, v284);
              }
              int v296 = *(unsigned __int8 *)v312[0];
              if ((v296 - 4) > 0x1E)
              {
                if ((v296 - 3) >= 0xFFFFFFFE) {
                  uint64_t v301 = v312[0];
                }
                else {
                  uint64_t v301 = 0;
                }
                if ((v296 - 3) < 0xFFFFFFFE)
                {
                  if (v296 == 3) {
                    *(void *)(v312[0] + 8) = 0;
                  }
                  goto LABEL_462;
                }
                unint64_t v298 = v301 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v312[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v312[0] + 12)) {
                  goto LABEL_462;
                }
                uint64_t v297 = *(void *)(v312[0] + 16);
                if ((v297 & 4) == 0) {
                  goto LABEL_462;
                }
                unint64_t v298 = v297 & 0xFFFFFFFFFFFFFFF8;
                if (!v298) {
                  goto LABEL_462;
                }
              }
              v315[0] = (const char *)v312;
              sub_1CC5FA668(v298 + 16, v315);
              goto LABEL_462;
            }
LABEL_305:
            if (v320 != v322) {
              free(v320);
            }
            if (((*((unsigned __int16 *)v59 + 9) >> 4) & 0x3FFu) - 103 >= 2 && v318)
            {
              v197 = (uint64_t *)v317;
              uint64_t v198 = 8 * v318;
              while (1)
              {
                uint64_t v199 = *v197;
                if (sub_1CC8518D8(*v197))
                {
                  int v200 = *(llvm::BasicBlock **)(v199 + 40);
                  uint64_t v201 = llvm::BasicBlock::getUniquePredecessor(v200);
                  uint64_t v202 = llvm::BasicBlock::getUniqueSuccessor(v200);
                  uint64_t v203 = v202;
                  if (*(void *)(v202 + 40) == v202 + 40) {
                    break;
                  }
                  uint64_t v204 = *(void *)(v202 + 48);
                  if (!v204 || *(unsigned char *)(v204 - 8) != 83) {
                    break;
                  }
                }
                ++v197;
                v198 -= 8;
                if (!v198) {
                  goto LABEL_364;
                }
              }
              uint64_t v205 = *(void *)(v201 + 40);
              if (v205 == v201 + 40)
              {
                uint64_t v206 = 0;
              }
              else
              {
                if (v205) {
                  uint64_t v206 = v205 - 24;
                }
                else {
                  uint64_t v206 = 0;
                }
                if (*(unsigned __int8 *)(v206 + 16) - 29 >= 0xB) {
                  uint64_t v206 = 0;
                }
              }
              v207 = 0;
              if (*(unsigned char *)(v206 + 16) != 30) {
                uint64_t v206 = 0;
              }
              uint64_t v310 = v206;
              uint64_t v208 = **(void **)v199;
              v323 = (char *)v325;
              uint64_t v324 = 0x200000000;
              uint64_t v329 = v208;
              uint64_t v330 = &v338;
              uint64_t v331 = v339;
              uint64_t v332 = 0;
              int v333 = 0;
              __int16 v334 = 512;
              char v335 = 7;
              uint64_t v327 = 0;
              unint64_t v328 = 0;
              uint64_t v336 = 0;
              uint64_t v337 = 0;
              uint64_t v338 = &unk_1F2616E88;
              v339[0] = &unk_1F2617008;
              uint64_t v327 = *(void *)(v199 + 40);
              unint64_t v328 = (void *)(v199 + 24);
              uint64_t v209 = *(char **)(v199 + 48);
              v315[0] = v209;
              if (v209)
              {
                llvm::MetadataTracking::track((uint64_t)v315, (unsigned __int8 *)v209, 2);
                v207 = v315[0];
              }
              sub_1CB8461A4((uint64_t)&v323, 0, (uint64_t)v207);
              if (!v315[0])
              {
LABEL_328:
                unsigned int v211 = *(llvm::Value **)(v199 - 32 * (*(_DWORD *)(v199 + 20) & 0x7FFFFFF) + 32);
                uint64_t v212 = *(llvm::ConstantInt **)(*(void *)v329 + 1936);
                unsigned int v213 = *(_DWORD *)(*(void *)v329 + 1944);
                LODWORD(v321) = v213 >> 8;
                if (v213 >> 8 < 0x41)
                {
                  unsigned int v320 = 0;
                  int v214 = (llvm::Value *)llvm::ConstantInt::get(v212, (llvm::LLVMContext *)&v320, v210);
                  if (v321 >= 0x41 && v320) {
                    MEMORY[0x1D25D9CB0](v320, 0x1000C8000313F17);
                  }
                  if (*(void *)(v310 - 32) == v203)
                  {
                    BOOL v215 = *(llvm::BasicBlock **)(v310 - 64);
                    BOOL v216 = v215 == v200;
                    if (v215 == v200) {
                      unsigned int v217 = v214;
                    }
                    else {
                      unsigned int v217 = v211;
                    }
                    if (v216) {
                      int v214 = v211;
                    }
                    unsigned int v211 = v217;
                  }
                  uint64_t v218 = *(llvm::Value **)(v310 - 96);
                  v322[8] = 257;
                  Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v323, v218, v211, v214, (const llvm::Twine *)&v320, 0);
                  uint64_t v221 = v199 - 32 * (*(_DWORD *)(v199 + 20) & 0x7FFFFFF);
                  uint64_t v222 = (llvm::Value **)(v221 + 32);
                  if (*(void *)(v221 + 32))
                  {
                    **(void **)(v221 + 48) = *(void *)(v221 + 40);
                    uint64_t v223 = *(void *)(v221 + 40);
                    if (v223) {
                      *(void *)(v223 + 16) = *(void *)(v221 + 48);
                    }
                  }
                  *uint64_t v222 = Select;
                  if (Select)
                  {
                    uint64_t v226 = *((void *)Select + 1);
                    unsigned int v224 = (llvm::Value ***)((char *)Select + 8);
                    uint64_t v225 = v226;
                    *(void *)(v221 + 40) = v226;
                    if (v226) {
                      *(void *)(v225 + 16) = v221 + 40;
                    }
                    *(void *)(v221 + 48) = v224;
                    *unsigned int v224 = v222;
                  }
                  llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v200, 0, v220);
                }
                operator new[]();
              }
              int v227 = *v315[0];
              if ((v227 - 4) > 0x1E)
              {
                if ((v227 - 3) >= 0xFFFFFFFE) {
                  uint64_t v230 = v315[0];
                }
                else {
                  uint64_t v230 = 0;
                }
                if ((v227 - 3) < 0xFFFFFFFE)
                {
                  if (v227 == 3) {
                    *((void *)v315[0] + 1) = 0;
                  }
                  goto LABEL_328;
                }
                unint64_t v229 = (unint64_t)(v230 + 8);
              }
              else
              {
                if ((v315[0][1] & 0x7F) != 2 && !*((_DWORD *)v315[0] + 3)) {
                  goto LABEL_328;
                }
                uint64_t v228 = *((void *)v315[0] + 2);
                if ((v228 & 4) == 0) {
                  goto LABEL_328;
                }
                unint64_t v229 = v228 & 0xFFFFFFFFFFFFFFF8;
                if (!v229) {
                  goto LABEL_328;
                }
              }
              unsigned int v320 = v315;
              sub_1CC5FA668(v229 + 16, &v320);
              goto LABEL_328;
            }
LABEL_364:
            char v9 = v138;
            break;
          }
        }
      }
    }
LABEL_365:
    if (v317 != v319) {
      free(v317);
    }
  }
  return v9 & 1;
}

BOOL sub_1CC85184C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 16) == 16;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  char v3 = (void *)(v1 + 24);
  uint64_t v4 = *(unsigned int *)(v1 + 32);
  if (v4 >= 0x41)
  {
    int v5 = 0;
    int64_t v6 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v6-- < 1) {
        break;
      }
      unint64_t v8 = *(void *)(*v3 + 8 * v6);
      v5 += __clz(v8);
    }
    while (!v8);
    int v9 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v9 = 0;
    }
    if ((v4 - v5 - v9) > 0x40) {
      return 0;
    }
    char v3 = (void *)*v3;
  }
  if (*v3) {
    return 0;
  }
  return sub_1CD0FF278(a1);
}

BOOL sub_1CC8518D8(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(llvm::BasicBlock **)(a1 + 40);
  uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v2);
  uint64_t UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v2);
  if (UniquePredecessor) {
    BOOL v5 = UniqueSuccessor == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(UniquePredecessor + 40);
  if (v6 == UniquePredecessor + 40) {
    return 0;
  }
  BOOL v7 = 0;
  uint64_t v8 = v6 - 24;
  if (!v6) {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(v8 + 16) - 40;
  if (v9 < 0xFFFFFFF5) {
    uint64_t v8 = 0;
  }
  if (v6)
  {
    if (*(unsigned char *)(v8 + 16) == 30 && v9 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3) {
        return 0;
      }
      uint64_t v11 = *(llvm::BasicBlock **)(v8 - 32);
      if ((v11 != v2 || *(void *)(v8 - 64) != UniqueSuccessor)
        && (v11 != (llvm::BasicBlock *)UniqueSuccessor || *(llvm::BasicBlock **)(v8 - 64) != v2))
      {
        return 0;
      }
      unint64_t v12 = -1;
      uint64_t v13 = (void *)((char *)v2 + 40);
      do
      {
        uint64_t v13 = (void *)v13[1];
        ++v12;
      }
      while (v13 != (void *)((char *)v2 + 40));
      if (v12 < 2) {
        return 0;
      }
      llvm::BasicBlock::instructionsWithoutDebug(v2, 1, (uint64_t)&v42);
      long long v48 = v42;
      if (v44)
      {
        if (v44 == v43)
        {
          uint64_t v50 = v49;
          (*(void (**)(void))(*v44 + 24))();
        }
        else
        {
          uint64_t v50 = (void *)(*(uint64_t (**)(void))(*v44 + 16))();
        }
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v15 = v47;
      if (v47 == v46)
      {
        (*(void (**)(void *))(v46[0] + 32))(v46);
      }
      else
      {
LABEL_123:
        if (v15) {
          (*(void (**)(void *))(*v15 + 40))(v15);
        }
      }
      if (v44 == v43)
      {
        (*(void (**)(void *))(v43[0] + 32))(v43);
      }
      else if (v44)
      {
        (*(void (**)(void))(*v44 + 40))();
      }
      uint64_t v16 = 0;
      uint64_t v17 = v48 - 24;
      if (!(void)v48) {
        uint64_t v17 = 0;
      }
      if (*(unsigned char *)(v17 + 16) == 84)
      {
        uint64_t v18 = *(void *)(v17 - 32);
        if (v18 && !*(unsigned char *)(v18 + 16) && *(void *)(v18 + 24) == *(void *)(v17 + 72))
        {
          if ((*(unsigned char *)(v18 + 33) & 0x20) != 0) {
            uint64_t v16 = v17;
          }
          else {
            uint64_t v16 = 0;
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
      }
      long long v39 = v48;
      if (v50)
      {
        if (v50 == v49)
        {
          unsigned int v41 = v40;
          (*(void (**)(void *, void *))(v49[0] + 24))(v49, v40);
        }
        else
        {
          unsigned int v41 = (void *)(*(uint64_t (**)(void *))(*v50 + 16))(v50);
        }
      }
      else
      {
        unsigned int v41 = 0;
      }
      do
      {
        uint64_t v19 = *(void *)(v48 + 8);
        *(void *)&long long v48 = v19;
        if (v19 == *((void *)&v48 + 1)) {
          break;
        }
        if (!v50)
        {
LABEL_122:
          sub_1CB920400();
          goto LABEL_123;
        }
        if (v19) {
          uint64_t v20 = v19 - 24;
        }
        else {
          uint64_t v20 = 0;
        }
      }
      while (((*(uint64_t (**)(void *, uint64_t))(*v50 + 48))(v50, v20) & 1) == 0);
      if (v41 == v40)
      {
        (*(void (**)(void *))(v40[0] + 32))(v40);
      }
      else if (v41)
      {
        (*(void (**)(void))(*v41 + 40))();
      }
      uint64_t v21 = v48 - 24;
      if ((void)v48) {
        uint64_t v22 = v48 - 24;
      }
      else {
        uint64_t v22 = 0;
      }
      if (*(unsigned char *)(v22 + 16) == 84
        && (uint64_t v23 = *(void *)(v22 - 32)) != 0
        && !*(unsigned char *)(v23 + 16)
        && *(void *)(v23 + 24) == *(void *)(v22 + 72)
        && (*(unsigned char *)(v23 + 33) & 0x20) != 0)
      {
        long long v36 = v48;
        if (v50)
        {
          if (v50 == v49)
          {
            uint64_t v38 = v37;
            (*(void (**)(void *, void *))(v49[0] + 24))(v49, v37);
          }
          else
          {
            uint64_t v38 = (void *)(*(uint64_t (**)(void))(*v50 + 16))();
          }
        }
        else
        {
          uint64_t v38 = 0;
        }
        do
        {
          *(void *)&long long v48 = *(void *)(v48 + 8);
          if ((void)v48 == *((void *)&v48 + 1)) {
            break;
          }
          if (!v50) {
            goto LABEL_122;
          }
        }
        while (((*(uint64_t (**)(void))(*v50 + 48))() & 1) == 0);
        if (v38 == v37)
        {
          (*(void (**)(void *))(v37[0] + 32))(v37);
        }
        else if (v38)
        {
          (*(void (**)(void))(*v38 + 40))();
        }
        uint64_t v24 = v16;
        uint64_t v16 = v21;
      }
      else
      {
        uint64_t v24 = 0;
      }
      llvm::BasicBlock::instructionsWithoutDebug(v2, 1, (uint64_t)&v42);
      uint64_t v33 = v45;
      if (v47)
      {
        if (v47 == v46)
        {
          uint64_t v35 = v34;
          (*(void (**)(void))(*v47 + 24))();
          uint64_t v25 = v35;
        }
        else
        {
          uint64_t v25 = (void *)(*(uint64_t (**)(void))(*v47 + 16))();
          uint64_t v35 = v25;
        }
        BOOL v26 = (void)v48 == v33;
        if (v25 == v34)
        {
          (*(void (**)(void *))(v34[0] + 32))(v34);
        }
        else if (v25)
        {
          (*(void (**)(void *))(*v25 + 40))(v25);
        }
      }
      else
      {
        uint64_t v35 = 0;
        BOOL v26 = (void)v48 == (void)v45;
      }
      if (v47 == v46)
      {
        (*(void (**)(void *))(v46[0] + 32))(v46);
      }
      else if (v47)
      {
        (*(void (**)(void))(*v47 + 40))();
      }
      if (v44 == v43)
      {
        (*(void (**)(void *))(v43[0] + 32))(v43);
      }
      else if (v44)
      {
        (*(void (**)(void))(*v44 + 40))();
      }
      uint64_t v27 = v48 - 24;
      if ((void)v48) {
        int v28 = v26;
      }
      else {
        int v28 = 1;
      }
      if (v28) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v48 - 24;
      }
      if (v24)
      {
        BOOL v7 = 0;
        if (*(_DWORD *)(*(void *)(v24 - 32) + 36) != 1268 || v16 != a1)
        {
LABEL_102:
          if (v50 == v49)
          {
            (*(void (**)(void *))(v49[0] + 32))(v49);
          }
          else if (v50)
          {
            (*(void (**)(void))(*v50 + 40))();
          }
          return v7;
        }
      }
      else if (v16 != a1)
      {
        BOOL v7 = 0;
        goto LABEL_102;
      }
      if (!(void)v48) {
        uint64_t v27 = 0;
      }
      uint64_t v30 = *(void *)(v27 + 40);
      uint64_t v31 = *(void *)(v30 + 40);
      if (v31 == v30 + 40)
      {
        uint64_t v32 = 0;
      }
      else
      {
        if (v31) {
          uint64_t v32 = v31 - 24;
        }
        else {
          uint64_t v32 = 0;
        }
        if (*(unsigned __int8 *)(v32 + 16) - 29 >= 0xB) {
          uint64_t v32 = 0;
        }
      }
      BOOL v7 = v32 == v29;
      goto LABEL_102;
    }
  }
  return v7;
}

void sub_1CC852168(uint64_t a1)
{
}

void sub_1CC852218()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC852418(llvm::Pass *this)
{
  *(void *)this = &unk_1F261FC00;
  BOOL v2 = (char *)this + 96;
  char v3 = (char *)*((void *)this + 15);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 11);
  if (v4 == (llvm::Pass *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  BOOL v5 = (llvm::Pass *)*((void *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v5)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v5 + 40))(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC852594(llvm::Pass *this)
{
  *(void *)this = &unk_1F261FC00;
  BOOL v2 = (char *)this + 96;
  char v3 = (char *)*((void *)this + 15);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (llvm::Pass *)*((void *)this + 11);
  if (v4 == (llvm::Pass *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  BOOL v5 = (llvm::Pass *)*((void *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v5)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v5 + 40))(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC852724(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC85279C(void *a1, uint64_t a2)
{
  v530[32] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::PostDominatorTreeWrapperPass::ID);
  uint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::LoopInfoWrapperPass::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v13 = (uint64_t *)a1[1];
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  uint64_t v17 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  uint64_t v18 = a1[11];
  if (v18) {
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, a2);
  }
  else {
    int v19 = 0;
  }
  uint64_t v20 = a1[7];
  if (v20) {
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, a2);
  }
  if ((v19 | v20) != 1) {
    return 0;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, a2);
  if (sub_1CD11373C(v17, v21, *(void *)(a2 + 40)) < 4) {
    return 0;
  }
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v23 = v22 + 24;
  uint64_t v24 = *(void *)(v22 + 32);
  if (v24 == v23) {
    goto LABEL_38;
  }
  unsigned int v25 = 0;
  do
  {
    uint64_t v26 = v24 - 56;
    if (!v24)
    {
      uint64_t v26 = 0;
LABEL_30:
      if (!*(unsigned char *)(v26 + 16) && *(void *)(v26 + 72) == v26 + 72 && (*(unsigned char *)(v26 + 34) & 0x80) == 0) {
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    if (*(unsigned char *)(v24 - 40) != 3) {
      goto LABEL_30;
    }
    if ((*(_DWORD *)(v24 - 36) & 0x7FFFFFF) == 0) {
      goto LABEL_35;
    }
LABEL_33:
    if ((*(_WORD *)(v26 + 18) & 0x3FF0) != 0x640) {
      ++v25;
    }
LABEL_35:
    uint64_t v24 = *(void *)(v24 + 8);
  }
  while (v24 != v23);
  if (v25 > 1) {
    return 0;
  }
LABEL_38:
  v488 = v492;
  v489 = v492;
  uint64_t v490 = 32;
  int v491 = 0;
  int v28 = v530;
  uint64_t v528 = v530;
  uint64_t v529 = 0x2000000000;
  uint64_t v29 = *(void *)(a2 + 80);
  if (v29 != a2 + 72)
  {
    unsigned int v30 = 0;
    do
    {
      if (v29) {
        uint64_t v31 = v29 - 24;
      }
      else {
        uint64_t v31 = 0;
      }
      if (v30 >= HIDWORD(v529)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v528 + v30) = v31;
      unsigned int v30 = v529 + 1;
      LODWORD(v529) = v529 + 1;
      uint64_t v29 = *(void *)(v29 + 8);
    }
    while (v29 != a2 + 72);
    if (v30)
    {
      uint64_t v32 = (uint64_t *)v528;
      uint64_t v33 = (char *)v528 + 8 * v30;
      uint64_t v34 = (char *)&v486;
      uint64_t v35 = &v526;
      long long v36 = &v524;
      int v37 = (void **)&v481;
      uint64_t v38 = &v508;
      long long v39 = &v501;
      unsigned int v40 = &v506;
      unsigned int v41 = &v503;
      long long v42 = &v518;
      while (2)
      {
        uint64_t v43 = *v32;
        BOOL v44 = v488;
        if (v489 == v488)
        {
          unsigned int v45 = HIDWORD(v490);
          uint64_t v46 = (char *)v489 + 8 * HIDWORD(v490);
          if (HIDWORD(v490))
          {
            uint64_t v47 = 0;
            while (*(void *)((char *)v489 + v47) != v43)
            {
              v47 += 8;
              if (8 * HIDWORD(v490) == v47) {
                goto LABEL_68;
              }
            }
            uint64_t v46 = (char *)v489 + v47;
          }
LABEL_68:
          BOOL v44 = v489;
        }
        else
        {
          int v48 = v490 - 1;
          unsigned int v49 = (v490 - 1) & ((v43 >> 4) ^ (v43 >> 9));
          uint64_t v46 = (char *)v489 + 8 * v49;
          uint64_t v50 = *(void *)v46;
          if (*(void *)v46 == -1)
          {
            uint64_t v51 = 0;
LABEL_96:
            if (v51) {
              uint64_t v46 = v51;
            }
            unsigned int v45 = HIDWORD(v490);
            if (*(void *)v46 != v43) {
              uint64_t v46 = (char *)v489 + 8 * v490;
            }
          }
          else
          {
            uint64_t v51 = 0;
            int v52 = 1;
            while (v50 != v43)
            {
              if (v51) {
                BOOL v53 = 0;
              }
              else {
                BOOL v53 = v50 == -2;
              }
              if (v53) {
                uint64_t v51 = v46;
              }
              unsigned int v54 = v49 + v52++;
              unsigned int v49 = v54 & v48;
              uint64_t v46 = (char *)v489 + 8 * (v54 & v48);
              uint64_t v50 = *(void *)v46;
              if (*(void *)v46 == -1) {
                goto LABEL_96;
              }
            }
            unsigned int v45 = HIDWORD(v490);
          }
        }
        if (v489 == v44) {
          unsigned int v55 = v45;
        }
        else {
          unsigned int v55 = v490;
        }
        if (v46 != (char *)v489 + 8 * v55) {
          goto LABEL_73;
        }
        uint64_t v56 = *(void *)(v43 + 40);
        if (v56 == v43 + 40) {
          goto LABEL_73;
        }
        uint64_t v57 = v56 ? v56 - 24 : 0;
        unsigned int v58 = *(unsigned __int8 *)(v57 + 16) - 40;
        uint64_t v59 = v58 >= 0xFFFFFFF5 ? v57 : 0;
        if (!v56) {
          goto LABEL_73;
        }
        if (*(unsigned char *)(v59 + 16) != 31 || v58 < 0xFFFFFFF5) {
          goto LABEL_73;
        }
        int v61 = *(_DWORD *)(v59 + 20);
        if ((v61 & 0x7FFFFFEu) < 6) {
          goto LABEL_73;
        }
        int v62 = *(_DWORD *)(v12 + 48);
        if (v62)
        {
          uint64_t v63 = *(void *)(v59 + 40);
          uint64_t v64 = *(void *)(v12 + 32);
          unsigned int v65 = v62 - 1;
          uint64_t v66 = ((v63 >> 4) ^ (v63 >> 9)) & (v62 - 1);
          uint64_t v67 = *(void *)(v64 + 16 * v66);
          if (v63 != v67)
          {
            int v68 = 1;
            while (v67 != -4096)
            {
              int v69 = v66 + v68++;
              uint64_t v66 = v69 & v65;
              uint64_t v67 = *(void *)(v64 + 16 * v66);
              if (v63 == v67) {
                goto LABEL_94;
              }
            }
            goto LABEL_101;
          }
LABEL_94:
          __p = *(void **)(v64 + 16 * v66 + 8);
        }
        else
        {
LABEL_101:
          __p = 0;
        }
        v487 = 0;
        if ((v61 & 0x40000000) != 0) {
          uint64_t v70 = *(void *)(v59 - 8);
        }
        else {
          uint64_t v70 = v59 - 32 * (v61 & 0x7FFFFFF);
        }
        v487 = *(void **)(v70 + 32);
        v482 = v34;
        uint64_t v483 = (uint64_t *)v34;
        uint64_t v484 = 16;
        int v485 = 0;
        uint64_t v525 = 1;
        for (uint64_t i = 8; i != 264; i += 16)
          *(uint64_t *)((char *)&v525 + i) = -4096;
        int v470 = v36;
        BOOL v471 = v28;
        BOOL v463 = v34;
        unsigned int v464 = v33;
        uint64_t v474 = v35;
        v468 = v40;
        uint64_t v469 = v37;
        unsigned int v472 = v38;
        unsigned int v465 = v39;
        unsigned int v466 = v41;
        unsigned int v467 = v42;
        if (*(unsigned char *)(v59 + 16) != 30)
        {
          int v72 = 2;
          switch(*(unsigned char *)(v59 + 16))
          {
            case 0x1E:
LABEL_936:
              __break(1u);
              JUMPOUT(0x1CC856820);
            case 0x1F:
              int v72 = (*(_DWORD *)(v59 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_118;
            case 0x20:
            case 0x26:
              int v72 = (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_118;
            case 0x21:
              goto LABEL_111;
            case 0x24:
              int v72 = *(_WORD *)(v59 + 18) & 1;
              goto LABEL_118;
            case 0x25:
              int v72 = 1;
              goto LABEL_111;
            case 0x27:
              int v72 = *(_DWORD *)(v59 + 80) + 1;
LABEL_118:
              if (!v72) {
                goto LABEL_119;
              }
              goto LABEL_111;
            default:
              goto LABEL_119;
          }
        }
        if ((*(_DWORD *)(v59 + 20) & 0x7FFFFFF) == 3) {
          int v72 = 2;
        }
        else {
          int v72 = 1;
        }
LABEL_111:
        for (unsigned int j = 0; j != v72; ++j)
        {
          v521[0] = 0;
          v521[0] = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v59, j);
          if (llvm::BasicBlock::getFirstNonPHIOrDbg(v521[0], 1)[16] != 35)
          {
            uint64_t v74 = v521[0];
            sub_1CD644138(&v525, v521)[1] = v74;
          }
        }
LABEL_119:
        int v473 = v19;
        uint64_t v75 = *((void *)sub_1CD643F80((int *)&v525) + 1);
        v487 = (void *)v75;
        uint64_t v76 = sub_1CD643F80((int *)&v525);
        uint64_t v77 = v474;
        if ((v525 & 1) == 0) {
          uint64_t v77 = v526;
        }
        unsigned int v78 = v527;
        if (v525) {
          unsigned int v78 = 16;
        }
        if (&v77[2 * v78] != (void *)v76) {
          llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator();
        }
        if (v75)
        {
          int v28 = v471;
          if (sub_1CC8568A4(v75, __p, *(void *)(v12 + 32), *(_DWORD *)(v12 + 48)))
          {
            uint64_t v455 = a2;
            uint64_t v522 = v470;
            uint64_t v523 = 0xA00000000;
            uint64_t v79 = 1;
            v521[0] = (llvm::BasicBlock *)1;
            do
            {
              v521[v79] = (llvm::BasicBlock *)-4096;
              v79 += 11;
            }
            while (v79 != 89);
            uint64_t v477 = v469;
            v478 = v469;
            uint64_t v479 = 16;
            int v480 = 0;
            uint64_t v80 = sub_1CD643F80((int *)&v525);
            if (v525) {
              uint64_t v82 = v474;
            }
            else {
              uint64_t v82 = v526;
            }
            unsigned int v83 = v527;
            if (v525) {
              unsigned int v83 = 16;
            }
            uint64_t v84 = (int *)&v82[2 * v83];
            if (v84 == v80)
            {
              char v457 = 1;
              goto LABEL_361;
            }
            uint64_t v85 = v80;
            unsigned int v86 = v81;
            char v457 = 1;
            uint64_t v87 = v472;
            v452 = (int *)&v82[2 * v83];
            uint64_t v456 = v12;
            while (1)
            {
              *(_OWORD *)int v500 = *(_OWORD *)v85;
              uint64_t v88 = v500[1];
              v497 = v500[1];
              if (v500[1] != v487) {
                break;
              }
              if (v19) {
                goto LABEL_170;
              }
              BOOL v89 = v478;
              uint64_t v90 = HIDWORD(v479);
              if (v478 == v477)
              {
                if (HIDWORD(v479))
                {
                  uint64_t v91 = 0;
                  uint64_t v92 = 8 * HIDWORD(v479);
                  int64_t v93 = v478;
                  do
                  {
                    if (*v93 == v500[1]) {
                      goto LABEL_170;
                    }
                    if (*v93 == (void *)-2) {
                      uint64_t v91 = v93;
                    }
                    ++v93;
                    v92 -= 8;
                  }
                  while (v92);
                  if (v91)
                  {
                    void *v91 = v500[1];
                    --v480;
                    goto LABEL_170;
                  }
                }
                unsigned int v94 = v479;
                if (HIDWORD(v479) < v479)
                {
                  ++HIDWORD(v479);
                  v478[v90] = v500[1];
                  goto LABEL_170;
                }
              }
              else
              {
                unsigned int v94 = v479;
              }
              if (3 * v94 <= 4 * (HIDWORD(v479) - v480))
              {
                if (v94 >= 0x40) {
                  v94 *= 2;
                }
                else {
                  unsigned int v94 = 128;
                }
              }
              else if (v94 - HIDWORD(v479) >= v94 >> 3)
              {
                goto LABEL_151;
              }
              __srca = v500[1];
              uint64_t v170 = v87;
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v477, v94);
              uint64_t v87 = v170;
              uint64_t v84 = v452;
              uint64_t v88 = __srca;
              unsigned int v94 = v479;
              BOOL v89 = v478;
LABEL_151:
              unsigned int v95 = v94 - 1;
              unsigned int v96 = (v94 - 1) & ((v88 >> 4) ^ (v88 >> 9));
              uint64_t v97 = &v89[v96];
              int v98 = *v97;
              if (*v97 == (void *)-1)
              {
                unsigned int v99 = 0;
              }
              else
              {
                unsigned int v99 = 0;
                int v100 = 1;
                do
                {
                  if (v98 == v88) {
                    goto LABEL_170;
                  }
                  if (v99) {
                    BOOL v101 = 0;
                  }
                  else {
                    BOOL v101 = v98 == (void *)-2;
                  }
                  if (v101) {
                    unsigned int v99 = v97;
                  }
                  unsigned int v102 = v96 + v100++;
                  unsigned int v96 = v102 & v95;
                  uint64_t v97 = &v89[v102 & v95];
                  int v98 = *v97;
                }
                while (*v97 != (void *)-1);
              }
              if (v99) {
                uint64_t v103 = v99;
              }
              else {
                uint64_t v103 = v97;
              }
              if (*v103 != v88)
              {
                if (*v103 == (void *)-2) {
                  --v480;
                }
                else {
                  ++HIDWORD(v479);
                }
                *uint64_t v103 = v88;
              }
LABEL_170:
              while (1)
              {
                v85 += 4;
                if (v85 == v86) {
                  break;
                }
                if ((*(void *)v85 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                  goto LABEL_174;
                }
              }
              uint64_t v85 = v86;
LABEL_174:
              if (v85 == v84) {
                goto LABEL_361;
              }
            }
            v504 = v87;
            uint64_t v505 = v87;
            int v507 = 0;
            uint64_t v506 = 0x100000010;
            v508 = v500[1];
            if (v523 >= (unint64_t)HIDWORD(v523)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void **)v522 + v523) = v500[1];
            LODWORD(v523) = v523 + 1;
            int v104 = sub_1CD644574(v521, (uint64_t *)&v497);
            unint64_t v105 = *((unsigned int *)v104 + 4);
            if (v105 >= *((unsigned int *)v104 + 5)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            __src = (uint64_t *)v88;
            *(void *)(v104[1] + 8 * v105) = v88;
            ++*((_DWORD *)v104 + 4);
            unsigned int v106 = v523;
            if (!v523) {
              goto LABEL_277;
            }
            while (2)
            {
              uint64_t v107 = *((void *)v522 + --v106);
              LODWORD(v523) = v106;
              uint64_t v108 = v482;
              if (v483 == (uint64_t *)v482)
              {
                int v109 = HIDWORD(v484);
                uint64_t v110 = (char *)&v483[HIDWORD(v484)];
                if (HIDWORD(v484))
                {
                  uint64_t v111 = 0;
                  while (v483[v111] != v107)
                  {
                    if (HIDWORD(v484) == ++v111) {
                      goto LABEL_198;
                    }
                  }
                  uint64_t v110 = (char *)&v483[v111];
                }
LABEL_198:
                uint64_t v108 = (char *)v483;
              }
              else
              {
                int v112 = v484 - 1;
                unsigned int v113 = (v484 - 1) & ((v107 >> 4) ^ (v107 >> 9));
                uint64_t v110 = (char *)&v483[v113];
                uint64_t v114 = *(void *)v110;
                if (*(void *)v110 == -1)
                {
                  unsigned int v115 = 0;
LABEL_264:
                  if (v115) {
                    uint64_t v110 = v115;
                  }
                  int v109 = HIDWORD(v484);
                  if (*(void *)v110 != v107) {
                    uint64_t v110 = (char *)&v483[v484];
                  }
                }
                else
                {
                  unsigned int v115 = 0;
                  int v116 = 1;
                  while (v114 != v107)
                  {
                    if (v115) {
                      BOOL v117 = 0;
                    }
                    else {
                      BOOL v117 = v114 == -2;
                    }
                    if (v117) {
                      unsigned int v115 = v110;
                    }
                    unsigned int v118 = v113 + v116++;
                    unsigned int v113 = v118 & v112;
                    uint64_t v110 = (char *)&v483[v118 & v112];
                    uint64_t v114 = *(void *)v110;
                    if (*(void *)v110 == -1) {
                      goto LABEL_264;
                    }
                  }
                  int v109 = HIDWORD(v484);
                }
              }
              if (v483 == (uint64_t *)v108) {
                int v119 = v109;
              }
              else {
                int v119 = v484;
              }
              if (v110 != (char *)&v483[v119]
                || !sub_1CC8568A4(v107, __p, *(void *)(v12 + 32), *(_DWORD *)(v12 + 48)))
              {
                goto LABEL_299;
              }
              uint64_t v120 = *(void *)(v107 + 40);
              if (v120 == v107 + 40) {
                goto LABEL_261;
              }
              int v121 = (llvm::Instruction *)(v120 - 24);
              if (v120) {
                uint64_t v122 = v120 - 24;
              }
              else {
                uint64_t v122 = 0;
              }
              if (*(unsigned char *)(v122 + 16) != 30)
              {
                int v460 = 2;
                switch(*(unsigned char *)(v122 + 16))
                {
                  case 0x1E:
                    goto LABEL_936;
                  case 0x1F:
                    int v144 = (*(_DWORD *)(v122 + 20) >> 1) & 0x3FFFFFF;
                    goto LABEL_271;
                  case 0x20:
                  case 0x26:
                    int v144 = (*(_DWORD *)(v122 + 20) & 0x7FFFFFF) - 1;
                    goto LABEL_271;
                  case 0x21:
                    goto LABEL_214;
                  case 0x24:
                    int v144 = *(_WORD *)(v122 + 18) & 1;
                    goto LABEL_271;
                  case 0x25:
                    int v123 = 1;
                    goto LABEL_213;
                  case 0x27:
                    int v144 = *(_DWORD *)(v122 + 80) + 1;
LABEL_271:
                    int v460 = v144;
                    if (!v144) {
                      goto LABEL_261;
                    }
                    goto LABEL_214;
                  default:
                    goto LABEL_261;
                }
              }
              if ((*(_DWORD *)(v122 + 20) & 0x7FFFFFF) == 3) {
                int v123 = 2;
              }
              else {
                int v123 = 1;
              }
LABEL_213:
              int v460 = v123;
LABEL_214:
              unsigned int v124 = 0;
              while (2)
              {
                uint64_t Successor = llvm::Instruction::getSuccessor(v121, v124);
                if ((void *)Successor == v487) {
                  goto LABEL_251;
                }
                uint64_t v126 = Successor;
                unsigned int v127 = (char *)v505;
                uint64_t v128 = HIDWORD(v506);
                if (v505 == v504)
                {
                  if (HIDWORD(v506))
                  {
                    uint64_t v129 = 0;
                    uint64_t v130 = 8 * HIDWORD(v506);
                    int v131 = (uint64_t *)v505;
                    while (*v131 != Successor)
                    {
                      if (*v131 == -2) {
                        uint64_t v129 = v131;
                      }
                      ++v131;
                      v130 -= 8;
                      if (!v130)
                      {
                        if (!v129) {
                          goto LABEL_224;
                        }
                        uint64_t *v129 = Successor;
                        --v507;
                        goto LABEL_248;
                      }
                    }
                    goto LABEL_251;
                  }
LABEL_224:
                  unsigned int v132 = v506;
                  if (HIDWORD(v506) < v506)
                  {
                    ++HIDWORD(v506);
                    *((void *)v505 + v128) = Successor;
LABEL_248:
                    if (v523 >= (unint64_t)HIDWORD(v523)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v522 + v523) = v126;
                    LODWORD(v523) = v523 + 1;
                    uint64_t v142 = sub_1CD644574(v521, (uint64_t *)&v500[1]);
                    unint64_t v143 = *((unsigned int *)v142 + 4);
                    if (v143 >= *((unsigned int *)v142 + 5)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(v142[1] + 8 * v143) = v126;
                    ++*((_DWORD *)v142 + 4);
                    goto LABEL_251;
                  }
                }
                else
                {
                  unsigned int v132 = v506;
                }
                if (3 * v132 <= 4 * (HIDWORD(v506) - v507))
                {
                  if (v132 >= 0x40) {
                    v132 *= 2;
                  }
                  else {
                    unsigned int v132 = 128;
                  }
LABEL_258:
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v504, v132);
                  unsigned int v132 = v506;
                  unsigned int v127 = (char *)v505;
                  goto LABEL_229;
                }
                if (v132 - HIDWORD(v506) < v132 >> 3) {
                  goto LABEL_258;
                }
LABEL_229:
                unsigned int v133 = v132 - 1;
                unsigned int v134 = (v132 - 1) & ((v126 >> 4) ^ (v126 >> 9));
                unsigned int v135 = &v127[8 * v134];
                uint64_t v136 = *(void *)v135;
                if (*(void *)v135 != -1)
                {
                  uint64_t v137 = 0;
                  int v138 = 1;
                  while (v136 != v126)
                  {
                    if (v137) {
                      BOOL v139 = 0;
                    }
                    else {
                      BOOL v139 = v136 == -2;
                    }
                    if (v139) {
                      uint64_t v137 = (uint64_t *)v135;
                    }
                    unsigned int v140 = v134 + v138++;
                    unsigned int v134 = v140 & v133;
                    unsigned int v135 = &v127[8 * (v140 & v133)];
                    uint64_t v136 = *(void *)v135;
                    if (*(void *)v135 == -1) {
                      goto LABEL_241;
                    }
                  }
                  goto LABEL_251;
                }
                uint64_t v137 = 0;
LABEL_241:
                if (v137) {
                  uint64_t v141 = v137;
                }
                else {
                  uint64_t v141 = (uint64_t *)v135;
                }
                if (*v141 != v126)
                {
                  if (*v141 == -2) {
                    --v507;
                  }
                  else {
                    ++HIDWORD(v506);
                  }
                  *uint64_t v141 = v126;
                  goto LABEL_248;
                }
LABEL_251:
                if (v460 != ++v124) {
                  continue;
                }
                break;
              }
              unsigned int v106 = v523;
              uint64_t v12 = v456;
LABEL_261:
              int v19 = v473;
              if (v106) {
                continue;
              }
              break;
            }
LABEL_277:
            if ((v457 & 1) == 0)
            {
LABEL_299:
              char v457 = 0;
              int v156 = 10;
              goto LABEL_339;
            }
            LODWORD(v523) = 0;
            if (v19) {
              goto LABEL_315;
            }
            uint64_t v145 = __src + 5;
            unint64_t v146 = -1;
            unsigned int v147 = __src + 5;
            do
            {
              unsigned int v147 = (uint64_t *)v147[1];
              ++v146;
            }
            while (v147 != v145);
            if (v146 > 0x1D) {
              goto LABEL_315;
            }
            uint64_t v148 = *v145;
            if (v148) {
              uint64_t v149 = v148 - 24;
            }
            else {
              uint64_t v149 = 0;
            }
            if (*(unsigned __int8 *)(v149 + 16) - 29 >= 0xB) {
              uint64_t v149 = 0;
            }
            if (*(unsigned char *)(v149 + 16) != 30 || (*(_DWORD *)(v149 + 20) & 0x7FFFFFF) != 1)
            {
LABEL_315:
              int v165 = (uint64_t *)v505;
              if (v505 == v504) {
                int v166 = (uint64_t *)((char *)&v506 + 4);
              }
              else {
                int v166 = &v506;
              }
              uint64_t v167 = *(unsigned int *)v166;
              uint64_t v168 = (uint64_t *)((char *)v505 + 8 * v167);
              if (v167)
              {
                uint64_t v169 = 8 * v167;
                while ((unint64_t)*v165 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v165;
                  v169 -= 8;
                  if (!v169)
                  {
                    int v165 = v168;
                    break;
                  }
                }
              }
              sub_1CD63F044((llvm::SmallPtrSetImplBase *)&v482, v165, v168, v168);
              int v156 = 0;
              goto LABEL_338;
            }
            int v150 = v478;
            uint64_t v151 = HIDWORD(v479);
            if (v478 != v477)
            {
              unsigned int v155 = v479;
              goto LABEL_302;
            }
            if (!HIDWORD(v479))
            {
LABEL_297:
              unsigned int v155 = v479;
              if (HIDWORD(v479) < v479)
              {
                ++HIDWORD(v479);
                v478[v151] = __src;
                goto LABEL_337;
              }
LABEL_302:
              if (3 * v155 <= 4 * (HIDWORD(v479) - v480))
              {
                if (v155 >= 0x40) {
                  v155 *= 2;
                }
                else {
                  unsigned int v155 = 128;
                }
              }
              else if (v155 - HIDWORD(v479) >= v155 >> 3)
              {
                goto LABEL_304;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v477, v155);
              unsigned int v155 = v479;
              int v150 = v478;
LABEL_304:
              unsigned int v157 = v155 - 1;
              unsigned int v158 = (v155 - 1) & ((__src >> 4) ^ (__src >> 9));
              uint64_t v159 = &v150[v158];
              uint64_t v160 = (uint64_t *)*v159;
              if (*v159 == (void *)-1)
              {
                uint64_t v161 = 0;
LABEL_330:
                if (v161) {
                  uint64_t v171 = v161;
                }
                else {
                  uint64_t v171 = v159;
                }
                if (*v171 != __src)
                {
                  if (*v171 == (void *)-2) {
                    --v480;
                  }
                  else {
                    ++HIDWORD(v479);
                  }
                  void *v171 = __src;
                }
              }
              else
              {
                uint64_t v161 = 0;
                int v162 = 1;
                while (v160 != __src)
                {
                  if (v161) {
                    BOOL v163 = 0;
                  }
                  else {
                    BOOL v163 = v160 == (uint64_t *)-2;
                  }
                  if (v163) {
                    uint64_t v161 = v159;
                  }
                  unsigned int v164 = v158 + v162++;
                  unsigned int v158 = v164 & v157;
                  uint64_t v159 = &v150[v164 & v157];
                  uint64_t v160 = (uint64_t *)*v159;
                  if (*v159 == (void *)-1) {
                    goto LABEL_330;
                  }
                }
              }
              goto LABEL_337;
            }
            unsigned int v152 = 0;
            uint64_t v153 = 8 * HIDWORD(v479);
            uint64_t v154 = v478;
            while (*v154 != __src)
            {
              if (*v154 == (void *)-2) {
                unsigned int v152 = v154;
              }
              ++v154;
              v153 -= 8;
              if (!v153)
              {
                if (!v152) {
                  goto LABEL_297;
                }
                *unsigned int v152 = __src;
                --v480;
                break;
              }
            }
LABEL_337:
            int v156 = 11;
LABEL_338:
            char v457 = 1;
            int v19 = v473;
LABEL_339:
            if (v505 != v504) {
              free(v505);
            }
            uint64_t v87 = v472;
            if (v156 == 11)
            {
              uint64_t v84 = v452;
              goto LABEL_170;
            }
            uint64_t v84 = v452;
            if (!v156) {
              goto LABEL_170;
            }
LABEL_361:
            uint64_t v174 = v483;
            if (v483 == (uint64_t *)v482) {
              uint64_t v175 = HIDWORD(v484);
            }
            else {
              uint64_t v175 = v484;
            }
            unsigned int v176 = &v483[v175];
            unsigned int v177 = v483;
            a2 = v455;
            int v28 = v471;
            if (v175)
            {
              uint64_t v178 = 8 * v175;
              unsigned int v177 = v483;
              while ((unint64_t)*v177 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v177;
                v178 -= 8;
                if (!v178) {
                  goto LABEL_420;
                }
              }
            }
            if (v177 != v176)
            {
              int v179 = v484 - 1;
              unint64_t v180 = *v177;
              while (1)
              {
                unint64_t v180 = *(void *)(v180 + 8);
                if (!v180) {
                  goto LABEL_415;
                }
                uint64_t v181 = *(void *)(v180 + 24);
                unsigned int v182 = *(unsigned __int8 *)(v181 + 16);
                if (v181) {
                  BOOL v183 = v182 >= 0x1C;
                }
                else {
                  BOOL v183 = 0;
                }
                if (v183 && v182 - 29 <= 0xA)
                {
LABEL_388:
                  uint64_t v188 = *(void *)(v181 + 40);
                  if (v483 == (uint64_t *)v482)
                  {
                    unsigned int v189 = &v482[8 * HIDWORD(v484)];
                    if (HIDWORD(v484))
                    {
                      unsigned int v189 = (char *)v483;
                      while (*(void *)v189 != v188)
                      {
                        v189 += 8;
                        if (v189 == &v482[8 * HIDWORD(v484)])
                        {
                          unsigned int v189 = &v482[8 * HIDWORD(v484)];
                          break;
                        }
                      }
                    }
                  }
                  else
                  {
                    unsigned int v190 = ((v188 >> 4) ^ (v188 >> 9)) & v179;
                    unsigned int v189 = (char *)&v483[v190];
                    uint64_t v191 = *(void *)v189;
                    if (*(void *)v189 == -1)
                    {
                      int v192 = 0;
LABEL_407:
                      if (v192) {
                        unsigned int v189 = v192;
                      }
                      uint64_t v196 = *(void *)v189;
                    }
                    else
                    {
                      int v192 = 0;
                      int v193 = 1;
                      while (v191 != v188)
                      {
                        if (v192) {
                          BOOL v194 = 0;
                        }
                        else {
                          BOOL v194 = v191 == -2;
                        }
                        if (v194) {
                          int v192 = v189;
                        }
                        unsigned int v195 = v190 + v193++;
                        unsigned int v190 = v195 & v179;
                        unsigned int v189 = (char *)&v483[v195 & v179];
                        uint64_t v191 = *(void *)v189;
                        if (*(void *)v189 == -1) {
                          goto LABEL_407;
                        }
                      }
                      uint64_t v196 = v188;
                    }
                    if (v196 != v188) {
                      unsigned int v189 = (char *)&v483[v175];
                    }
                  }
                  if (v189 == (char *)v176 && v188 != v43) {
                    goto LABEL_870;
                  }
                  while (1)
                  {
                    unint64_t v180 = *(void *)(v180 + 8);
                    if (!v180) {
                      break;
                    }
                    uint64_t v181 = *(void *)(v180 + 24);
                    unsigned int v185 = *(unsigned __int8 *)(v181 + 16);
                    if (v181) {
                      BOOL v186 = v185 >= 0x1C;
                    }
                    else {
                      BOOL v186 = 0;
                    }
                    if (v186 && v185 - 29 < 0xB) {
                      goto LABEL_388;
                    }
                  }
LABEL_415:
                  if ((v457 & 1) == 0) {
                    goto LABEL_870;
                  }
                  v197 = (unint64_t *)(v177 + 1);
                  do
                  {
                    if (v197 == (unint64_t *)v176) {
                      goto LABEL_420;
                    }
                    unint64_t v198 = *v197++;
                    unint64_t v180 = v198;
                  }
                  while (v198 > 0xFFFFFFFFFFFFFFFDLL);
                  unsigned int v177 = (uint64_t *)(v197 - 1);
                }
              }
            }
LABEL_420:
            if ((v457 & 1) != 0
              && (HIDWORD(v479) - v480) <= 2
              && HIDWORD(v479) - v480 < v525 >> 2)
            {
              if (v175)
              {
                uint64_t v200 = 8 * v175;
                do
                {
                  if ((unint64_t)*v174 < 0xFFFFFFFFFFFFFFFELL) {
                    goto LABEL_430;
                  }
                  ++v174;
                  v200 -= 8;
                }
                while (v200);
                uint64_t v174 = v176;
              }
LABEL_430:
              sub_1CD63F044((llvm::SmallPtrSetImplBase *)&v488, v174, v176, v176);
              uint64_t v201 = v487;
              do
              {
                uint64_t v201 = (void *)v201[1];
                if (!v201) {
                  break;
                }
                uint64_t v202 = v201[3];
                unsigned int v203 = *(unsigned __int8 *)(v202 + 16);
                BOOL v204 = v202 && v203 >= 0x1C;
              }
              while (!v204 || v203 - 29 >= 0xB);
              int v206 = v484 - 1;
              while (v201)
              {
                uint64_t v207 = *(void *)(v201[3] + 40);
                if (v483 == (uint64_t *)v482)
                {
                  if (HIDWORD(v484))
                  {
                    uint64_t v208 = 0;
                    while (v483[v208] != v207)
                    {
                      if (HIDWORD(v484) == ++v208)
                      {
                        int v209 = HIDWORD(v484);
                        goto LABEL_461;
                      }
                    }
                    unsigned int v211 = (char *)&v483[v208];
                    int v209 = HIDWORD(v484);
                    uint64_t v218 = (char *)v483;
                  }
                  else
                  {
                    int v209 = 0;
LABEL_461:
                    uint64_t v218 = (char *)v483;
                    unsigned int v211 = (char *)&v483[HIDWORD(v484)];
                  }
                }
                else
                {
                  unsigned int v210 = v206 & ((v207 >> 4) ^ (v207 >> 9));
                  unsigned int v211 = (char *)&v483[v210];
                  uint64_t v212 = *(void *)v211;
                  if (*(void *)v211 == -1)
                  {
                    unsigned int v213 = 0;
LABEL_463:
                    if (v213) {
                      unsigned int v211 = v213;
                    }
                    uint64_t v217 = *(void *)v211;
                  }
                  else
                  {
                    unsigned int v213 = 0;
                    int v214 = 1;
                    while (v212 != v207)
                    {
                      if (v213) {
                        BOOL v215 = 0;
                      }
                      else {
                        BOOL v215 = v212 == -2;
                      }
                      if (v215) {
                        unsigned int v213 = v211;
                      }
                      unsigned int v216 = v210 + v214++;
                      unsigned int v210 = v216 & v206;
                      unsigned int v211 = (char *)&v483[v216 & v206];
                      uint64_t v212 = *(void *)v211;
                      if (*(void *)v211 == -1) {
                        goto LABEL_463;
                      }
                    }
                    uint64_t v217 = *(void *)(v201[3] + 40);
                  }
                  if (v217 != v207) {
                    unsigned int v211 = (char *)&v483[v484];
                  }
                  int v209 = HIDWORD(v484);
                  uint64_t v218 = v482;
                }
                if (v483 != (uint64_t *)v218) {
                  int v209 = v484;
                }
                BOOL v220 = v211 == (char *)&v483[v209] && v207 != v43;
                do
                {
                  uint64_t v201 = (void *)v201[1];
                  if (!v201) {
                    break;
                  }
                  uint64_t v221 = v201[3];
                  unsigned int v222 = *(unsigned __int8 *)(v221 + 16);
                  BOOL v223 = v221 && v222 >= 0x1C;
                }
                while (!v223 || v222 - 29 > 0xA);
                if (v220)
                {
                  sub_1CC856928(&v525, &v487);
                  v504 = "switch_pdom";
                  LOWORD(v508) = 259;
                  operator new();
                }
              }
              sub_1CC856928(&v525, &v487);
              v476 = (const char *)v487;
              v500[0] = v466;
              v500[1] = v466;
              uint64_t v501 = 8;
              int v502 = 0;
              unint64_t v225 = ((unint64_t)*(unsigned int *)(v59 + 20) >> 1) & 0x3FFFFFF;
              if (!v225)
              {
LABEL_488:
                int v226 = *(_DWORD *)(v59 + 20);
                if ((v226 & 0x40000000) != 0) {
                  uint64_t v227 = *(void *)(v59 - 8);
                }
                else {
                  uint64_t v227 = v59 - 32 * (v226 & 0x7FFFFFF);
                }
                uint64_t v259 = sub_1CD643FF8((uint64_t)&v525, *(void *)(v227 + 32));
                uint64_t v260 = v474;
                if ((v525 & 1) == 0) {
                  uint64_t v260 = v526;
                }
                unsigned int v261 = v527;
                if (v525) {
                  unsigned int v261 = 16;
                }
                if (&v260[2 * v261] == (void *)v259)
                {
                  int v262 = HIDWORD(v479);
                  goto LABEL_602;
                }
                int v263 = *(llvm::BlockAddress ***)(v259 + 8);
                uint64_t v264 = v477;
                if (v478 == v477)
                {
                  int v262 = HIDWORD(v479);
                  uint64_t v265 = &v478[HIDWORD(v479)];
                  if (HIDWORD(v479))
                  {
                    uint64_t v266 = 0;
                    while (v478[v266] != v263)
                    {
                      if (HIDWORD(v479) == ++v266) {
                        goto LABEL_595;
                      }
                    }
                    uint64_t v265 = &v478[v266];
                  }
LABEL_595:
                  uint64_t v264 = v478;
                }
                else
                {
                  int v267 = v479 - 1;
                  unsigned int v268 = (v479 - 1) & ((v263 >> 4) ^ (v263 >> 9));
                  uint64_t v265 = &v478[v268];
                  uint64_t v269 = (llvm::BlockAddress **)*v265;
                  if (*v265 == (void *)-1)
                  {
                    uint64_t v270 = 0;
LABEL_916:
                    if (v270) {
                      uint64_t v265 = v270;
                    }
                    int v262 = HIDWORD(v479);
                    if (*v265 != v263) {
                      uint64_t v265 = &v478[v479];
                    }
                  }
                  else
                  {
                    uint64_t v270 = 0;
                    int v271 = 1;
                    while (v269 != v263)
                    {
                      if (v270) {
                        BOOL v272 = 0;
                      }
                      else {
                        BOOL v272 = v269 == (llvm::BlockAddress **)-2;
                      }
                      if (v272) {
                        uint64_t v270 = v265;
                      }
                      unsigned int v273 = v268 + v271++;
                      unsigned int v268 = v273 & v267;
                      uint64_t v265 = &v478[v273 & v267];
                      uint64_t v269 = (llvm::BlockAddress **)*v265;
                      if (*v265 == (void *)-1) {
                        goto LABEL_916;
                      }
                    }
                    int v262 = HIDWORD(v479);
                  }
                }
                if (v478 == v264) {
                  int v274 = v262;
                }
                else {
                  int v274 = v479;
                }
                if (v265 == &v478[v274])
                {
                  v497 = v499;
                  uint64_t v498 = 0xA00000000;
                  if (v263)
                  {
                    v499[0] = v263;
                    LODWORD(v498) = 1;
                  }
                }
                else
                {
LABEL_602:
                  int v263 = 0;
                  v497 = v499;
                  uint64_t v498 = 0xA00000000;
                }
                if (v262 != v480)
                {
                  v504 = "indirectbr_bb";
                  LOWORD(v508) = 259;
                  operator new();
                }
                uint64_t v275 = *(llvm::BasicBlock **)(v59 + 40);
                uint64_t v276 = **(void ***)v275;
                v504 = v468;
                uint64_t v505 = (void *)0x200000000;
                unsigned int v511 = v276;
                v512 = &v519;
                uint64_t v513 = &v520;
                uint64_t v514 = 0;
                int v515 = 0;
                __int16 v516 = 512;
                char v517 = 7;
                *unsigned int v467 = 0;
                v467[1] = 0;
                v519 = &unk_1F2616E88;
                uint64_t v520 = &unk_1F2617008;
                __pa = v275;
                unsigned int v509 = v275;
                unsigned int v510 = (void **)((char *)v275 + 40);
                unsigned int v277 = *(_DWORD *)(v59 + 20);
                int v278 = (v277 >> 1) & 0x3FFFFFF;
                uint64_t v279 = (v278 - 1);
                if (v278 == 1) {
                  goto LABEL_619;
                }
                uint64_t v280 = 0;
                unint64_t v281 = 0;
                do
                {
                  uint64_t v282 = v59 - 32 * (v277 & 0x7FFFFFF);
                  if ((v277 & 0x40000000) != 0) {
                    uint64_t v282 = *(void *)(v59 - 8);
                  }
                  uint64_t v283 = *(void *)(v282 + 32 * ((v280 + 2) & 0xFFFFFFFE));
                  unsigned int v284 = *(_DWORD *)(v283 + 32);
                  if (v284 > 0x40) {
                    uint64_t v285 = **(void **)(v283 + 24);
                  }
                  else {
                    uint64_t v285 = (uint64_t)(*(void *)(v283 + 24) << -(char)v284) >> -(char)v284;
                  }
                  if (v285 < 0) {
                    uint64_t v285 = -v285;
                  }
                  if (v285 > v281) {
                    unint64_t v281 = v285;
                  }
                  v280 += 2;
                }
                while (2 * v279 != v280);
                if (v281 >> 24)
                {
                  Select = 0;
                  uint64_t v368 = 0;
                  do
                  {
                    int v369 = *(_DWORD *)(v59 + 20);
                    if ((v369 & 0x40000000) != 0) {
                      uint64_t v370 = *(void *)(v59 - 8);
                    }
                    else {
                      uint64_t v370 = v59 - 32 * (v369 & 0x7FFFFFF);
                    }
                    uint64_t v371 = *(void *)(v370 + 32 * (2 * v368 + 2));
                    uint64_t v372 = (2 * v368 + 3);
                    if (v368 == 4294967294) {
                      uint64_t v372 = 1;
                    }
                    uint64_t v373 = *(void *)(v370 + 32 * v372);
                    uint64_t v374 = sub_1CD643FF8((uint64_t)&v525, v373);
                    uint64_t v375 = v374;
                    v376 = v477;
                    if (v478 == v477)
                    {
                      int v377 = HIDWORD(v479);
                      uint64_t v378 = &v478[HIDWORD(v479)];
                      if (HIDWORD(v479))
                      {
                        uint64_t v379 = 0;
                        while (v478[v379] != (void *)v373)
                        {
                          if (HIDWORD(v479) == ++v379) {
                            goto LABEL_784;
                          }
                        }
                        uint64_t v378 = &v478[v379];
                      }
LABEL_784:
                      v376 = v478;
                    }
                    else
                    {
                      int v380 = v479 - 1;
                      unsigned int v381 = (v479 - 1) & ((v373 >> 4) ^ (v373 >> 9));
                      uint64_t v378 = &v478[v381];
                      unsigned int v382 = *v378;
                      if (*v378 == (void *)-1)
                      {
                        v383 = 0;
LABEL_801:
                        if (v383) {
                          uint64_t v378 = v383;
                        }
                        int v377 = HIDWORD(v479);
                        if (*v378 != (void *)v373) {
                          uint64_t v378 = &v478[v479];
                        }
                      }
                      else
                      {
                        v383 = 0;
                        int v384 = 1;
                        while (v382 != (void *)v373)
                        {
                          if (v383) {
                            BOOL v385 = 0;
                          }
                          else {
                            BOOL v385 = v382 == (void *)-2;
                          }
                          if (v385) {
                            v383 = v378;
                          }
                          unsigned int v386 = v381 + v384++;
                          unsigned int v381 = v386 & v380;
                          uint64_t v378 = &v478[v386 & v380];
                          unsigned int v382 = *v378;
                          if (*v378 == (void *)-1) {
                            goto LABEL_801;
                          }
                        }
                        int v377 = HIDWORD(v479);
                      }
                    }
                    if (v478 == v376) {
                      int v387 = v377;
                    }
                    else {
                      int v387 = v479;
                    }
                    if (v378 == &v478[v387])
                    {
                      v388 = v474;
                      if ((v525 & 1) == 0) {
                        v388 = v526;
                      }
                      unsigned int v389 = v527;
                      if (v525) {
                        unsigned int v389 = 16;
                      }
                      if (&v388[2 * v389] != (void *)v374)
                      {
                        if (v498 >= (unint64_t)HIDWORD(v498)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v497 + v498) = *(void *)(v374 + 8);
                        unsigned int v390 = v498 + 1;
                        LODWORD(v498) = v498 + 1;
                        if (v263)
                        {
                          int v391 = *(_DWORD *)(v59 + 20);
                          if ((v391 & 0x40000000) != 0) {
                            unint64_t v392 = *(void ***)(v59 - 8);
                          }
                          else {
                            unint64_t v392 = (void **)(v59 - 32 * (v391 & 0x7FFFFFF));
                          }
                          uint64_t v393 = *v392;
                          v495[0] = "sw_cond";
                          __int16 v496 = 259;
                          int v462 = sub_1CB845F20((uint64_t)&v504, 32, v393, v371, (uint64_t)v495);
                          uint64_t v395 = llvm::BlockAddress::get(*(llvm::BlockAddress **)(*(void *)(v375 + 8) + 56), *(llvm::Function **)(v375 + 8), v394);
                          unsigned int v397 = (unsigned __int8 *)v395;
                          uint64_t v398 = *v511 + 1984;
                          v493[0] = "ptr_cast";
                          __int16 v494 = 259;
                          if (*(void *)v395 != v398)
                          {
                            if (*((unsigned __int8 *)v395 + 16) <= 0x14u)
                            {
                              uint64_t v401 = (*((uint64_t (**)(void **, uint64_t, llvm::BlockAddress *, uint64_t))*v512
                                      + 28))(v512, 47, v395, v398);
                              unsigned int v397 = (unsigned __int8 *)v401;
                              if (v401)
                              {
                                if (*(unsigned __int8 *)(v401 + 16) >= 0x1Cu)
                                {
                                  (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                   + 2))(v513, v401, v493, v509, v510);
                                  if (v505)
                                  {
                                    unsigned int v419 = (llvm::MDNode **)v504;
                                    unsigned int v420 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v397, *(_DWORD *)v419, v419[1]);
                                      v419 += 2;
                                    }
                                    while (v419 != v420);
                                  }
                                }
                              }
                            }
                            else
                            {
                              __int16 v496 = 257;
                              unsigned int v397 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v395, v398, v495, 0);
                              (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                               + 2))(v513, v397, v493, v509, v510);
                              if (v505)
                              {
                                unsigned int v399 = (llvm::MDNode **)v504;
                                v400 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v397, *(_DWORD *)v399, v399[1]);
                                  v399 += 2;
                                }
                                while (v399 != v400);
                              }
                            }
                          }
                          uint64_t v402 = *v511 + 1960;
                          v493[0] = "ptr_trunc";
                          __int16 v494 = 259;
                          if (*(void *)v397 != v402)
                          {
                            if (v397[16] <= 0x14u)
                            {
                              unsigned int v397 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v512
                                                         + 28))(v512, 38, v397, v402);
                              if (v397) {
                                BOOL v405 = v397[16] >= 0x1Cu;
                              }
                              else {
                                BOOL v405 = 0;
                              }
                              if (v405)
                              {
                                (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                                 + 2))(v513, v397, v493, v509, v510);
                                if (v505)
                                {
                                  v417 = (llvm::MDNode **)v504;
                                  unsigned int v418 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                  do
                                  {
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v397, *(_DWORD *)v417, v417[1]);
                                    v417 += 2;
                                  }
                                  while (v417 != v418);
                                }
                              }
                            }
                            else
                            {
                              __int16 v496 = 257;
                              unsigned int v397 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v397, v402, v495, 0);
                              (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                               + 2))(v513, v397, v493, v509, v510);
                              if (v505)
                              {
                                int v403 = (llvm::MDNode **)v504;
                                BOOL v404 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v397, *(_DWORD *)v403, v403[1]);
                                  v403 += 2;
                                }
                                while (v403 != v404);
                              }
                            }
                          }
                          if (!Select)
                          {
                            v406 = llvm::BlockAddress::get(v263[7], (llvm::Function *)v263, v396);
                            uint64_t v407 = *v511 + 1984;
                            v493[0] = "ptr_cast";
                            __int16 v494 = 259;
                            Select = v406;
                            if (*(void *)v406 != v407)
                            {
                              if (*((unsigned __int8 *)v406 + 16) <= 0x14u)
                              {
                                uint64_t v410 = (*((uint64_t (**)(void **, uint64_t, llvm::BlockAddress *, uint64_t))*v512
                                        + 28))(v512, 47, v406, v407);
                                Select = (llvm::Instruction *)v410;
                                if (v410) {
                                  BOOL v411 = *(unsigned __int8 *)(v410 + 16) >= 0x1Cu;
                                }
                                else {
                                  BOOL v411 = 0;
                                }
                                if (v411)
                                {
                                  (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                   + 2))(v513, v410, v493, v509, v510);
                                  if (v505)
                                  {
                                    v421 = (llvm::MDNode **)v504;
                                    uint64_t v422 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(Select, *(_DWORD *)v421, v421[1]);
                                      v421 += 2;
                                    }
                                    while (v421 != v422);
                                  }
                                }
                              }
                              else
                              {
                                __int16 v496 = 257;
                                Select = llvm::CastInst::Create(47, (uint64_t)v406, v407, v495, 0);
                                (*((void (**)(void **))*v513 + 2))(v513);
                                if (v505)
                                {
                                  uint64_t v408 = (llvm::MDNode **)v504;
                                  v409 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(Select, *(_DWORD *)v408, v408[1]);
                                    v408 += 2;
                                  }
                                  while (v408 != v409);
                                }
                              }
                            }
                            uint64_t v412 = *v511 + 1960;
                            v493[0] = "ptr_trunc";
                            __int16 v494 = 259;
                            if (*(void *)Select != v412)
                            {
                              if (*((unsigned __int8 *)Select + 16) <= 0x14u)
                              {
                                uint64_t v415 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v512
                                        + 28))(v512, 38, Select, v412);
                                Select = (llvm::Instruction *)v415;
                                if (v415) {
                                  BOOL v416 = *(unsigned __int8 *)(v415 + 16) >= 0x1Cu;
                                }
                                else {
                                  BOOL v416 = 0;
                                }
                                if (v416)
                                {
                                  (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                   + 2))(v513, v415, v493, v509, v510);
                                  if (v505)
                                  {
                                    v423 = (llvm::MDNode **)v504;
                                    int v424 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(Select, *(_DWORD *)v423, v423[1]);
                                      v423 += 2;
                                    }
                                    while (v423 != v424);
                                  }
                                }
                              }
                              else
                              {
                                __int16 v496 = 257;
                                Select = llvm::CastInst::Create(38, (uint64_t)Select, v412, v495, 0);
                                (*((void (**)(void **))*v513 + 2))(v513);
                                if (v505)
                                {
                                  uint64_t v413 = (llvm::MDNode **)v504;
                                  uint64_t v414 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(Select, *(_DWORD *)v413, v413[1]);
                                    v413 += 2;
                                  }
                                  while (v413 != v414);
                                }
                              }
                            }
                          }
                          __int16 v496 = 257;
                          Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v504, v462, (llvm::Value *)v397, Select, (const llvm::Twine *)v495, 0);
                        }
                        else
                        {
                          int v263 = *(llvm::BlockAddress ***)(v374 + 8);
                          if (v390 >= HIDWORD(v498)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v497 + v390) = v263;
                          LODWORD(v498) = v498 + 1;
                        }
                      }
                    }
                    ++v368;
                  }
                  while (v368 != v279);
                }
                else
                {
LABEL_619:
                  if ((v277 & 0x40000000) != 0) {
                    uint64_t v286 = *(uint64_t **)(v59 - 8);
                  }
                  else {
                    uint64_t v286 = (uint64_t *)(v59 - 32 * (v277 & 0x7FFFFFF));
                  }
                  uint64_t v287 = *v286;
                  uint64_t v288 = (uint64_t *)(*v276 + 1624);
                  __int16 v496 = 257;
                  uint64_t v461 = sub_1CB845378((uint64_t)&v504, v287, v288, (uint64_t)v495);
                  int v289 = (*(_DWORD *)(v59 + 20) >> 1) & 0x3FFFFFF;
                  uint64_t v290 = (v289 - 1);
                  if (v289 == 1)
                  {
                    Select = 0;
                  }
                  else
                  {
                    Select = 0;
                    uint64_t v309 = 0;
                    do
                    {
                      int v310 = *(_DWORD *)(v59 + 20);
                      if ((v310 & 0x40000000) != 0) {
                        uint64_t v311 = *(void *)(v59 - 8);
                      }
                      else {
                        uint64_t v311 = v59 - 32 * (v310 & 0x7FFFFFF);
                      }
                      uint64_t v312 = (2 * v309 + 3);
                      if (v309 == 4294967294) {
                        uint64_t v312 = 1;
                      }
                      uint64_t v313 = *(void *)(v311 + 32 * v312);
                      std::string v314 = v477;
                      if (v478 == v477)
                      {
                        int v315 = HIDWORD(v479);
                        __int16 v316 = &v478[HIDWORD(v479)];
                        if (HIDWORD(v479))
                        {
                          uint64_t v317 = 0;
                          while (v478[v317] != (void *)v313)
                          {
                            if (HIDWORD(v479) == ++v317) {
                              goto LABEL_675;
                            }
                          }
                          __int16 v316 = &v478[v317];
                        }
LABEL_675:
                        std::string v314 = v478;
                      }
                      else
                      {
                        int v318 = v479 - 1;
                        unsigned int v319 = (v479 - 1) & ((v313 >> 4) ^ (v313 >> 9));
                        __int16 v316 = &v478[v319];
                        unsigned int v320 = *v316;
                        if (*v316 == (void *)-1)
                        {
                          uint64_t v321 = 0;
LABEL_683:
                          if (v321) {
                            __int16 v316 = v321;
                          }
                          int v315 = HIDWORD(v479);
                          if (*v316 != (void *)v313) {
                            __int16 v316 = &v478[v479];
                          }
                        }
                        else
                        {
                          uint64_t v321 = 0;
                          int v322 = 1;
                          while (v320 != (void *)v313)
                          {
                            if (v321) {
                              BOOL v323 = 0;
                            }
                            else {
                              BOOL v323 = v320 == (void *)-2;
                            }
                            if (v323) {
                              uint64_t v321 = v316;
                            }
                            unsigned int v324 = v319 + v322++;
                            unsigned int v319 = v324 & v318;
                            __int16 v316 = &v478[v324 & v318];
                            unsigned int v320 = *v316;
                            if (*v316 == (void *)-1) {
                              goto LABEL_683;
                            }
                          }
                          int v315 = HIDWORD(v479);
                        }
                      }
                      if (v478 == v314) {
                        int v325 = v315;
                      }
                      else {
                        int v325 = v479;
                      }
                      if (v316 == &v478[v325])
                      {
                        uint64_t v326 = *(void *)(v311 + 32 * (2 * v309 + 2));
                        uint64_t v327 = sub_1CD643FF8((uint64_t)&v525, v313);
                        uint64_t v329 = v474;
                        if ((v525 & 1) == 0) {
                          uint64_t v329 = v526;
                        }
                        unsigned int v330 = v527;
                        if (v525) {
                          unsigned int v330 = 16;
                        }
                        if (&v329[2 * v330] != (void *)v327)
                        {
                          uint64_t v331 = v327;
                          if (v498 >= (unint64_t)HIDWORD(v498)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v497 + v498) = *(void *)(v327 + 8);
                          unsigned int v332 = v498 + 1;
                          LODWORD(v498) = v498 + 1;
                          if (v263)
                          {
                            unsigned int v333 = *(_DWORD *)(v326 + 32);
                            if (v333 > 0x40) {
                              uint64_t v334 = **(void **)(v326 + 24);
                            }
                            else {
                              uint64_t v334 = (uint64_t)(*(void *)(v326 + 24) << -(char)v333) >> -(char)v333;
                            }
                            char v335 = llvm::ConstantFP::get((llvm::ConstantFP **)(*v511 + 1624), v328, (double)v334);
                            v495[0] = "sw_cond";
                            __int16 v496 = 259;
                            FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v504, 1, (uint64_t)v461, (uint64_t)v335, (uint64_t)v495, 0, 0);
                            uint64_t v338 = llvm::BlockAddress::get(*(llvm::BlockAddress **)(*(void *)(v331 + 8) + 56), *(llvm::Function **)(v331 + 8), v337);
                            uint64_t v340 = (unsigned __int8 *)v338;
                            uint64_t v341 = *v511 + 1984;
                            v493[0] = "ptr_cast";
                            __int16 v494 = 259;
                            if (*(void *)v338 != v341)
                            {
                              if (*((unsigned __int8 *)v338 + 16) <= 0x14u)
                              {
                                uint64_t v344 = (*((uint64_t (**)(void **, uint64_t, llvm::BlockAddress *, uint64_t))*v512
                                        + 28))(v512, 47, v338, v341);
                                uint64_t v340 = (unsigned __int8 *)v344;
                                if (v344)
                                {
                                  if (*(unsigned __int8 *)(v344 + 16) >= 0x1Cu)
                                  {
                                    (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                     + 2))(v513, v344, v493, v509, v510);
                                    if (v505)
                                    {
                                      uint64_t v364 = (llvm::MDNode **)v504;
                                      unsigned int v365 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v340, *(_DWORD *)v364, v364[1]);
                                        v364 += 2;
                                      }
                                      while (v364 != v365);
                                    }
                                  }
                                }
                              }
                              else
                              {
                                __int16 v496 = 257;
                                uint64_t v340 = (unsigned __int8 *)llvm::CastInst::Create(47, (uint64_t)v338, v341, v495, 0);
                                (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                                 + 2))(v513, v340, v493, v509, v510);
                                if (v505)
                                {
                                  uint64_t v342 = (llvm::MDNode **)v504;
                                  uint64_t v343 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                  do
                                  {
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v340, *(_DWORD *)v342, v342[1]);
                                    v342 += 2;
                                  }
                                  while (v342 != v343);
                                }
                              }
                            }
                            uint64_t v345 = *v511 + 1960;
                            v493[0] = "ptr_trunc";
                            __int16 v494 = 259;
                            if (*(void *)v340 != v345)
                            {
                              if (v340[16] <= 0x14u)
                              {
                                uint64_t v340 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v512
                                                           + 28))(v512, 38, v340, v345);
                                if (v340) {
                                  BOOL v348 = v340[16] >= 0x1Cu;
                                }
                                else {
                                  BOOL v348 = 0;
                                }
                                if (v348)
                                {
                                  (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                                   + 2))(v513, v340, v493, v509, v510);
                                  if (v505)
                                  {
                                    uint64_t v362 = (llvm::MDNode **)v504;
                                    uint64_t v363 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v340, *(_DWORD *)v362, v362[1]);
                                      v362 += 2;
                                    }
                                    while (v362 != v363);
                                  }
                                }
                              }
                              else
                              {
                                __int16 v496 = 257;
                                uint64_t v340 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v340, v345, v495, 0);
                                (*((void (**)(void **, unsigned __int8 *, void *, llvm::BasicBlock *, void **))*v513
                                 + 2))(v513, v340, v493, v509, v510);
                                if (v505)
                                {
                                  v346 = (llvm::MDNode **)v504;
                                  uint64_t v347 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                  do
                                  {
                                    llvm::Instruction::setMetadata((llvm::Instruction *)v340, *(_DWORD *)v346, v346[1]);
                                    v346 += 2;
                                  }
                                  while (v346 != v347);
                                }
                              }
                            }
                            if (!Select)
                            {
                              unsigned int v349 = llvm::BlockAddress::get(v263[7], (llvm::Function *)v263, v339);
                              uint64_t v350 = *v511 + 1984;
                              v493[0] = "ptr_cast";
                              __int16 v494 = 259;
                              Select = v349;
                              if (*(void *)v349 != v350)
                              {
                                if (*((unsigned __int8 *)v349 + 16) <= 0x14u)
                                {
                                  uint64_t v353 = (*((uint64_t (**)(void **, uint64_t, llvm::BlockAddress *, uint64_t))*v512
                                          + 28))(v512, 47, v349, v350);
                                  Select = (llvm::Instruction *)v353;
                                  if (v353) {
                                    BOOL v354 = *(unsigned __int8 *)(v353 + 16) >= 0x1Cu;
                                  }
                                  else {
                                    BOOL v354 = 0;
                                  }
                                  if (v354)
                                  {
                                    (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                     + 2))(v513, v353, v493, v509, v510);
                                    if (v505)
                                    {
                                      uint64_t v366 = (llvm::MDNode **)v504;
                                      int v367 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                      do
                                      {
                                        llvm::Instruction::setMetadata(Select, *(_DWORD *)v366, v366[1]);
                                        v366 += 2;
                                      }
                                      while (v366 != v367);
                                    }
                                  }
                                }
                                else
                                {
                                  __int16 v496 = 257;
                                  Select = llvm::CastInst::Create(47, (uint64_t)v349, v350, v495, 0);
                                  (*((void (**)(void **))*v513 + 2))(v513);
                                  if (v505)
                                  {
                                    unsigned int v351 = (llvm::MDNode **)v504;
                                    v352 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(Select, *(_DWORD *)v351, v351[1]);
                                      v351 += 2;
                                    }
                                    while (v351 != v352);
                                  }
                                }
                              }
                              uint64_t v355 = *v511 + 1960;
                              v493[0] = "ptr_trunc";
                              __int16 v494 = 259;
                              if (*(void *)Select != v355)
                              {
                                if (*((unsigned __int8 *)Select + 16) <= 0x14u)
                                {
                                  uint64_t v358 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v512
                                          + 28))(v512, 38, Select, v355);
                                  Select = (llvm::Instruction *)v358;
                                  if (v358) {
                                    BOOL v359 = *(unsigned __int8 *)(v358 + 16) >= 0x1Cu;
                                  }
                                  else {
                                    BOOL v359 = 0;
                                  }
                                  if (v359)
                                  {
                                    (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513
                                     + 2))(v513, v358, v493, v509, v510);
                                    if (v505)
                                    {
                                      uint64_t v360 = (llvm::MDNode **)v504;
                                      v361 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                      do
                                      {
                                        llvm::Instruction::setMetadata(Select, *(_DWORD *)v360, v360[1]);
                                        v360 += 2;
                                      }
                                      while (v360 != v361);
                                    }
                                  }
                                }
                                else
                                {
                                  __int16 v496 = 257;
                                  Select = llvm::CastInst::Create(38, (uint64_t)Select, v355, v495, 0);
                                  (*((void (**)(void **))*v513 + 2))(v513);
                                  if (v505)
                                  {
                                    unsigned int v356 = (llvm::MDNode **)v504;
                                    v357 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                                    do
                                    {
                                      llvm::Instruction::setMetadata(Select, *(_DWORD *)v356, v356[1]);
                                      v356 += 2;
                                    }
                                    while (v356 != v357);
                                  }
                                }
                              }
                            }
                            __int16 v496 = 257;
                            Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v504, FCmpHelper, (llvm::Value *)v340, Select, (const llvm::Twine *)v495, 0);
                          }
                          else
                          {
                            int v263 = *(llvm::BlockAddress ***)(v327 + 8);
                            if (v332 >= HIDWORD(v498)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *((void *)v497 + v332) = v263;
                            LODWORD(v498) = v498 + 1;
                          }
                        }
                      }
                      ++v309;
                    }
                    while (v309 != v290);
                  }
                }
                uint64_t v291 = *v511 + 1984;
                __int16 v494 = 257;
                if (*(void *)Select != v291)
                {
                  if (*((unsigned __int8 *)Select + 16) <= 0x14u)
                  {
                    uint64_t v294 = (*((uint64_t (**)(void **, uint64_t))*v512 + 28))(v512, 39);
                    Select = (llvm::Instruction *)v294;
                    if (v294) {
                      BOOL v295 = *(unsigned __int8 *)(v294 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v295 = 0;
                    }
                    if (v295)
                    {
                      (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513 + 2))(v513, v294, v493, v509, v510);
                      if (v505)
                      {
                        int v448 = (llvm::MDNode **)v504;
                        uint64_t v449 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                        do
                        {
                          llvm::Instruction::setMetadata(Select, *(_DWORD *)v448, v448[1]);
                          v448 += 2;
                        }
                        while (v448 != v449);
                      }
                    }
                  }
                  else
                  {
                    __int16 v496 = 257;
                    Select = llvm::CastInst::Create(39, (uint64_t)Select, v291, v495, 0);
                    (*((void (**)(void **))*v513 + 2))(v513);
                    if (v505)
                    {
                      unint64_t v292 = (llvm::MDNode **)v504;
                      uint64_t v293 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                      do
                      {
                        llvm::Instruction::setMetadata(Select, *(_DWORD *)v292, v292[1]);
                        v292 += 2;
                      }
                      while (v292 != v293);
                    }
                  }
                }
                unint64_t v296 = llvm::PointerType::get((llvm::PointerType *)(*v511 + 1912), 0);
                __int16 v494 = 257;
                if (*(void *)Select != v296)
                {
                  if (*((unsigned __int8 *)Select + 16) <= 0x14u)
                  {
                    uint64_t v299 = (*((uint64_t (**)(void **, uint64_t))*v512 + 28))(v512, 48);
                    Select = (llvm::Instruction *)v299;
                    if (v299) {
                      BOOL v300 = *(unsigned __int8 *)(v299 + 16) >= 0x1Cu;
                    }
                    else {
                      BOOL v300 = 0;
                    }
                    if (v300)
                    {
                      (*((void (**)(void **, uint64_t, void *, llvm::BasicBlock *, void **))*v513 + 2))(v513, v299, v493, v509, v510);
                      if (v505)
                      {
                        v450 = (llvm::MDNode **)v504;
                        unsigned int v451 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                        do
                        {
                          llvm::Instruction::setMetadata(Select, *(_DWORD *)v450, v450[1]);
                          v450 += 2;
                        }
                        while (v450 != v451);
                      }
                    }
                  }
                  else
                  {
                    __int16 v496 = 257;
                    Select = llvm::CastInst::Create(48, (uint64_t)Select, v296, v495, 0);
                    (*((void (**)(void **))*v513 + 2))(v513);
                    if (v505)
                    {
                      uint64_t v297 = (llvm::MDNode **)v504;
                      unint64_t v298 = (llvm::MDNode **)((char *)v504 + 16 * v505);
                      do
                      {
                        llvm::Instruction::setMetadata(Select, *(_DWORD *)v297, v297[1]);
                        v297 += 2;
                      }
                      while (v297 != v298);
                    }
                  }
                }
                uint64_t v301 = sub_1CD64405C((uint64_t *)&v504, Select, v525 >> 1);
                if (v498)
                {
                  int v302 = v301;
                  int v303 = (llvm::BasicBlock **)v497;
                  uint64_t v304 = 8 * v498;
                  do
                  {
                    uint64_t v305 = *v303++;
                    llvm::IndirectBrInst::addDestination(v302, v305);
                    v304 -= 8;
                  }
                  while (v304);
                }
                if (HIDWORD(v479) != v480)
                {
                  uint64_t v306 = *(void *)(v59 + 40) + 40;
                  unsigned int v509 = *(llvm::BasicBlock **)(v59 + 40);
                  unsigned int v510 = (void **)v306;
                  int v307 = *(_DWORD *)(v59 + 20);
                  uint64_t v308 = (v307 & 0x40000000) != 0
                       ? *(llvm::Value ***)(v59 - 8)
                       : (llvm::Value **)(v59 - 32 * (v307 & 0x7FFFFFF));
                  BOOL v425 = sub_1CD6440C8((uint64_t *)&v504, *v308, __pa);
                  int v426 = (*(_DWORD *)(v59 + 20) >> 1) & 0x3FFFFFF;
                  uint64_t v427 = (v426 - 1);
                  if (v426 != 1)
                  {
                    v428 = v425;
                    uint64_t v429 = 0;
                    do
                    {
                      int v430 = *(_DWORD *)(v59 + 20);
                      if ((v430 & 0x40000000) != 0) {
                        uint64_t v431 = *(void *)(v59 - 8);
                      }
                      else {
                        uint64_t v431 = v59 - 32 * (v430 & 0x7FFFFFF);
                      }
                      uint64_t v432 = (2 * v429 + 3);
                      if (v429 == 4294967294) {
                        uint64_t v432 = 1;
                      }
                      uint64_t v433 = 32 * v432;
                      v434 = *(void **)(v431 + v433);
                      v435 = v477;
                      if (v478 == v477)
                      {
                        int v436 = HIDWORD(v479);
                        uint64_t v437 = &v478[HIDWORD(v479)];
                        if (HIDWORD(v479))
                        {
                          uint64_t v438 = 0;
                          while (v478[v438] != v434)
                          {
                            if (HIDWORD(v479) == ++v438) {
                              goto LABEL_899;
                            }
                          }
                          uint64_t v437 = &v478[v438];
                        }
LABEL_899:
                        v435 = v478;
                      }
                      else
                      {
                        int v439 = v479 - 1;
                        unsigned int v440 = (v479 - 1) & ((v434 >> 4) ^ (v434 >> 9));
                        uint64_t v437 = &v478[v440];
                        int v441 = *v437;
                        if (*v437 == (void *)-1)
                        {
                          int v442 = 0;
LABEL_910:
                          if (v442) {
                            uint64_t v437 = v442;
                          }
                          int v436 = HIDWORD(v479);
                          if (*v437 != v434) {
                            uint64_t v437 = &v478[v479];
                          }
                        }
                        else
                        {
                          int v442 = 0;
                          int v443 = 1;
                          while (v441 != v434)
                          {
                            if (v442) {
                              BOOL v444 = 0;
                            }
                            else {
                              BOOL v444 = v441 == (void *)-2;
                            }
                            if (v444) {
                              int v442 = v437;
                            }
                            unsigned int v445 = v440 + v443++;
                            unsigned int v440 = v445 & v439;
                            uint64_t v437 = &v478[v445 & v439];
                            int v441 = *v437;
                            if (*v437 == (void *)-1) {
                              goto LABEL_910;
                            }
                          }
                          int v436 = HIDWORD(v479);
                        }
                      }
                      int v446 = v479;
                      if (v478 == v435) {
                        int v446 = v436;
                      }
                      if (v437 != &v478[v446])
                      {
                        if ((v430 & 0x40000000) != 0) {
                          uint64_t v447 = *(void *)(v59 - 8);
                        }
                        else {
                          uint64_t v447 = v59 - 32 * (v430 & 0x7FFFFFF);
                        }
                        llvm::SwitchInst::addCase(v428, *(llvm::ConstantInt **)(v447 + 32 * ((2 * v429 + 2) & 0xFFFFFFFE)), *(llvm::BasicBlock **)(v447 + v433));
                      }
                      ++v429;
                    }
                    while (v429 != v427);
                  }
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              uint64_t v228 = 0;
              while (2)
              {
                v495[0] = 0;
                int v229 = *(_DWORD *)(v59 + 20);
                if ((v229 & 0x40000000) != 0) {
                  uint64_t v230 = *(void *)(v59 - 8);
                }
                else {
                  uint64_t v230 = v59 - 32 * (v229 & 0x7FFFFFF);
                }
                unsigned int v231 = *(const char **)(v230 + (v228 << 6) + 32);
                v495[0] = v231;
                unsigned int v232 = (char *)v500[1];
                uint64_t v233 = v500[0];
                if (v500[1] == v500[0])
                {
                  unsigned int v234 = HIDWORD(v501);
                  uint64_t v235 = (char *)v500[1] + 8 * HIDWORD(v501);
                  if (HIDWORD(v501))
                  {
                    uint64_t v236 = 0;
                    while (*(const char **)((char *)v500[1] + v236) != v231)
                    {
                      v236 += 8;
                      if (8 * HIDWORD(v501) == v236) {
                        goto LABEL_513;
                      }
                    }
                    uint64_t v235 = (char *)v500[1] + v236;
                  }
LABEL_513:
                  uint64_t v233 = v500[1];
                }
                else
                {
                  int v237 = v501 - 1;
                  unsigned int v238 = (v501 - 1) & ((v231 >> 4) ^ (v231 >> 9));
                  uint64_t v235 = (char *)v500[1] + 8 * v238;
                  uint64_t v239 = *(const char **)v235;
                  if (*(void *)v235 == -1)
                  {
                    uint64_t v240 = 0;
LABEL_521:
                    if (v240) {
                      uint64_t v235 = v240;
                    }
                    unsigned int v234 = HIDWORD(v501);
                    if (*(const char **)v235 != v231) {
                      uint64_t v235 = (char *)v500[1] + 8 * v501;
                    }
                  }
                  else
                  {
                    uint64_t v240 = 0;
                    int v241 = 1;
                    while (v239 != v231)
                    {
                      if (v240) {
                        BOOL v242 = 0;
                      }
                      else {
                        BOOL v242 = v239 == (const char *)-2;
                      }
                      if (v242) {
                        uint64_t v240 = v235;
                      }
                      unsigned int v243 = v238 + v241++;
                      unsigned int v238 = v243 & v237;
                      uint64_t v235 = (char *)v500[1] + 8 * (v243 & v237);
                      uint64_t v239 = *(const char **)v235;
                      if (*(void *)v235 == -1) {
                        goto LABEL_521;
                      }
                    }
                    unsigned int v234 = HIDWORD(v501);
                  }
                }
                unsigned int v244 = v501;
                if (v500[1] == v233) {
                  unsigned int v245 = v234;
                }
                else {
                  unsigned int v245 = v501;
                }
                if (v235 != (char *)v500[1] + 8 * v245)
                {
LABEL_518:
                  if (++v228 == v225) {
                    goto LABEL_488;
                  }
                  continue;
                }
                break;
              }
              if (v500[1] == v233)
              {
                if (v234)
                {
                  uint64_t v246 = 0;
                  uint64_t v247 = 8 * v234;
                  uint64_t v248 = (const char **)v500[1];
                  do
                  {
                    if (*v248 == v231) {
                      goto LABEL_557;
                    }
                    if (*v248 == (const char *)-2) {
                      uint64_t v246 = v248;
                    }
                    ++v248;
                    v247 -= 8;
                  }
                  while (v247);
                  if (v246)
                  {
                    *uint64_t v246 = v231;
                    --v502;
LABEL_557:
                    if (*((_DWORD *)sub_1CD644574(v521, (uint64_t *)v495) + 4)) {
                      BOOL v258 = 0;
                    }
                    else {
                      BOOL v258 = v231 == v476;
                    }
                    if (v258)
                    {
                      v504 = "switch_prepdom";
                      LOWORD(v508) = 259;
                      operator new();
                    }
                    goto LABEL_518;
                  }
                }
                if (v501 > v234)
                {
                  HIDWORD(v501) = v234 + 1;
                  *((void *)v500[1] + v234) = v231;
                  goto LABEL_557;
                }
              }
              if (3 * (int)v501 <= 4 * (v234 - v502))
              {
                if (v501 >= 0x40) {
                  unsigned int v244 = 2 * v501;
                }
                else {
                  unsigned int v244 = 128;
                }
              }
              else if (v501 - v234 >= v501 >> 3)
              {
                goto LABEL_538;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v500, v244);
              unsigned int v244 = v501;
              unsigned int v232 = (char *)v500[1];
LABEL_538:
              unsigned int v249 = v244 - 1;
              unsigned int v250 = (v244 - 1) & ((v231 >> 4) ^ (v231 >> 9));
              int v251 = &v232[8 * v250];
              int v252 = *(const char **)v251;
              if (*(void *)v251 == -1)
              {
                uint64_t v253 = 0;
LABEL_550:
                if (v253) {
                  uint64_t v257 = v253;
                }
                else {
                  uint64_t v257 = (const char **)v251;
                }
                if (*v257 != v231)
                {
                  if (*v257 == (const char *)-2) {
                    --v502;
                  }
                  else {
                    ++HIDWORD(v501);
                  }
                  *uint64_t v257 = v231;
                }
              }
              else
              {
                uint64_t v253 = 0;
                int v254 = 1;
                while (v252 != v231)
                {
                  if (v253) {
                    BOOL v255 = 0;
                  }
                  else {
                    BOOL v255 = v252 == (const char *)-2;
                  }
                  if (v255) {
                    uint64_t v253 = (const char **)v251;
                  }
                  unsigned int v256 = v250 + v254++;
                  unsigned int v250 = v256 & v249;
                  int v251 = &v232[8 * (v256 & v249)];
                  int v252 = *(const char **)v251;
                  if (*(void *)v251 == -1) {
                    goto LABEL_550;
                  }
                }
              }
              goto LABEL_557;
            }
LABEL_870:
            if (v478 != v477) {
              free(v478);
            }
            sub_1CD644A60((uint64_t)v521);
            long long v36 = v470;
            if (v522 != v470)
            {
              free(v522);
              long long v36 = v470;
            }
LABEL_355:
            if ((v525 & 1) == 0)
            {
              int v172 = v36;
              MEMORY[0x1D25D9CD0](v526, 8);
              long long v36 = v172;
            }
            uint64_t v35 = v474;
            if (v483 != (uint64_t *)v482)
            {
              int v173 = v36;
              free(v483);
              long long v36 = v173;
            }
            uint64_t v34 = v463;
            uint64_t v33 = v464;
            unsigned int v40 = v468;
            int v37 = v469;
            uint64_t v38 = v472;
            long long v39 = v465;
            unsigned int v41 = v466;
            long long v42 = v467;
LABEL_73:
            if (++v32 == (uint64_t *)v33) {
              goto LABEL_932;
            }
            continue;
          }
        }
        else
        {
          int v28 = v471;
        }
        break;
      }
      long long v36 = v470;
      goto LABEL_355;
    }
  }
LABEL_932:
  if (v528 != v28) {
    free(v528);
  }
  if (v489 != v488) {
    free(v489);
  }
  return 0;
}

BOOL sub_1CC8568A4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v4 = (a4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v5 = *(void *)(a3 + 16 * v4);
    if (v5 == a1)
    {
LABEL_6:
      uint64_t v8 = *(void **)(a3 + 16 * v4 + 8);
      goto LABEL_8;
    }
    int v6 = 1;
    while (v5 != -4096)
    {
      int v7 = v4 + v6++;
      uint64_t v4 = v7 & (a4 - 1);
      uint64_t v5 = *(void *)(a3 + 16 * v4);
      if (v5 == a1) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v8 = 0;
LABEL_8:
  BOOL result = 1;
  if (a2)
  {
    while (v8 != a2)
    {
      BOOL result = v8 != 0;
      if (!v8) {
        break;
      }
      uint64_t v8 = (void *)*v8;
    }
  }
  return result;
}

uint64_t sub_1CC856928(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CD64419C((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1CC85697C(uint64_t a1, llvm::DataLayout *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  int v7 = *(unsigned __int8 *)(a1 + 16);
  if ((v7 - 66) < 0xD) {
    return 0x100000000;
  }
  if (v7 == 62)
  {
    unsigned int v25 = 64;
    uint64_t v24 = 0;
    int v10 = *(_DWORD *)(a1 + 20);
    if ((v10 & 0x40000000) != 0)
    {
      uint64_t v12 = *(void *)(a1 - 8);
      uint64_t v11 = v10 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v11 = v10 & 0x7FFFFFF;
      uint64_t v12 = a1 - 32 * v11;
    }
    uint64_t v26 = v28;
    uint64_t v27 = 0x600000000;
    unint64_t v13 = 32 * v11 - 32;
    if (v13 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v14 = (llvm::Constant **)v28;
    if (v11 != 1)
    {
      uint64_t v15 = (uint64_t *)(v12 + 32);
      uint64_t v16 = v28;
      uint64_t v17 = 32 * v11 - 32;
      do
      {
        uint64_t v18 = *v15;
        v15 += 4;
        *v16++ = v18;
        v17 -= 32;
      }
      while (v17);
      uint64_t v14 = (llvm::Constant **)v26;
    }
    LODWORD(v27) = v13 >> 5;
    uint64_t v19 = 24;
    if (*(unsigned char *)(a1 + 16) == 62) {
      uint64_t v19 = 64;
    }
    int v20 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a1 + v19), v14, (v13 >> 5), this, (llvm::APInt *)&v24, 0, a7);
    if (v26 != v28) {
      free(v26);
    }
    if (v20)
    {
      if (v25 > 0x40)
      {
        LODWORD(v21) = *v24;
        MEMORY[0x1D25D9CB0]();
      }
      else
      {
        uint64_t v21 = (uint64_t)((void)v24 << -(uint64_t)v25) >> -(uint64_t)v25;
      }
      uint64_t v22 = v21;
      uint64_t v23 = 0x100000000;
      return v23 | v22;
    }
    if (v25 >= 0x41 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  return v23 | v22;
}

uint64_t sub_1CC856B74(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 20);
  int v4 = (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 84)
  {
    uint64_t v6 = 0;
  }
  else if (v5 == 39)
  {
    uint64_t v6 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v6 = 2;
  }
  if (v3 < 0 && (uint64_t v43 = *(v4 - 1), (v43 & 0xFFFFFFFF0) != 0)) {
    uint64_t v7 = (*((_DWORD *)v4 - 3) - *(_DWORD *)((char *)v4 - v43));
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a2 - 32 * v6 - 32 * v7 - 32;
  if (v4 == (uint64_t *)v8) {
    return 1;
  }
  while (1)
  {
    uint64_t v9 = *v4;
    unsigned int v10 = *(unsigned __int8 *)(*v4 + 16);
    if (*v4 && v10 == 23) {
      break;
    }
    if (v9) {
      BOOL v12 = v10 >= 0x1C;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 304);
      if (*(unsigned char *)(v13 + 784))
      {
        uint64_t v15 = v13 + 792;
        int v14 = 32;
      }
      else
      {
        int v14 = *(_DWORD *)(v13 + 800);
        if (!v14) {
          return 0;
        }
        uint64_t v15 = *(void *)(v13 + 792);
      }
      unsigned int v21 = (v9 >> 4) ^ (v9 >> 9);
      int v22 = v14 - 1;
      unsigned int v23 = v22 & v21;
      uint64_t v24 = *(void *)(v15 + 8 * (v22 & v21));
      if (v9 != v24)
      {
        int v25 = 1;
        while (v24 != -4096)
        {
          unsigned int v26 = v23 + v25++;
          unsigned int v23 = v26 & v22;
          uint64_t v24 = *(void *)(v15 + 8 * v23);
          if (v9 == v24) {
            goto LABEL_35;
          }
        }
        return 0;
      }
LABEL_35:
      uint64_t v27 = *(void *)(v13 + 1864);
      uint64_t v28 = *(void *)(v13 + 1856);
      if (v27 == v28)
      {
        uint64_t v29 = *(unsigned int *)(v13 + 1876);
        unsigned int v30 = (void *)(v27 + 8 * v29);
        if (v29)
        {
          uint64_t v31 = 0;
          uint64_t v32 = 8 * v29;
          while (*(void *)(v27 + v31) != v9)
          {
            v31 += 8;
            if (v32 == v31) {
              goto LABEL_53;
            }
          }
          unsigned int v30 = (void *)(v27 + v31);
        }
LABEL_53:
        uint64_t v28 = *(void *)(v13 + 1864);
      }
      else
      {
        uint64_t v33 = *(unsigned int *)(v13 + 1872);
        int v34 = v33 - 1;
        unsigned int v35 = (v33 - 1) & v21;
        unsigned int v30 = (void *)(v27 + 8 * v35);
        uint64_t v36 = *v30;
        if (*v30 == -1)
        {
          int v37 = 0;
LABEL_61:
          if (v37) {
            unsigned int v30 = v37;
          }
          if (*v30 != v9) {
            unsigned int v30 = (void *)(v27 + 8 * v33);
          }
        }
        else
        {
          int v37 = 0;
          int v38 = 1;
          while (v36 != v9)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -2;
            }
            if (v39) {
              int v37 = v30;
            }
            unsigned int v40 = v35 + v38++;
            unsigned int v35 = v40 & v34;
            unsigned int v30 = (void *)(v27 + 8 * (v40 & v34));
            uint64_t v36 = *v30;
            if (*v30 == -1) {
              goto LABEL_61;
            }
          }
        }
      }
      if (v27 == v28) {
        uint64_t v41 = 1876;
      }
      else {
        uint64_t v41 = 1872;
      }
      if (v30 != (void *)(v27 + 8 * *(unsigned int *)(v13 + v41))) {
        return 0;
      }
    }
LABEL_58:
    v4 += 4;
    if (v4 == (uint64_t *)v8) {
      return 1;
    }
  }
  uint64_t v16 = *(unsigned __int8 **)(v9 + 24);
  int v17 = *v16;
  if (v17 != 32)
  {
    if ((v17 - 3) >= 0xFEu)
    {
      if ((sub_1CC856E34(a1, *v16, *((void *)v16 + 16)) & 1) == 0) {
        return 0;
      }
    }
    else if ((v17 - 35) >= 0xE1u && !sub_1CD644BA0(a1, (uint64_t)v16))
    {
      return 0;
    }
    goto LABEL_58;
  }
  uint64_t v18 = *((unsigned int *)v16 + 8);
  if (!v18) {
    goto LABEL_58;
  }
  uint64_t v19 = (char **)*((void *)v16 + 3);
  uint64_t v20 = 8 * v18;
  while ((sub_1CC856E34(a1, **v19, *((void *)*v19 + 16)) & 1) != 0)
  {
    ++v19;
    v20 -= 8;
    if (!v20) {
      goto LABEL_58;
    }
  }
  return 0;
}

uint64_t sub_1CC856E34(uint64_t a1, char a2, uint64_t a3)
{
  if (a2 != 2) {
    return 1;
  }
  unsigned int v3 = *(unsigned __int8 *)(a3 + 16);
  if (!a3 || v3 < 0x1C)
  {
    if (!a3 || v3 != 22)
    {
      if (a3) {
        BOOL v8 = v3 == 21;
      }
      else {
        BOOL v8 = 0;
      }
      return !v8;
    }
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 304);
  if (*(unsigned char *)(v4 + 784))
  {
    uint64_t v6 = v4 + 792;
    int v5 = 32;
    goto LABEL_18;
  }
  int v5 = *(_DWORD *)(v4 + 800);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 792);
LABEL_18:
  unsigned int v9 = (a3 >> 4) ^ (a3 >> 9);
  int v10 = v5 - 1;
  unsigned int v11 = v10 & v9;
  uint64_t v12 = *(void *)(v6 + 8 * (v10 & v9));
  if (v12 != a3)
  {
    int v13 = 1;
    while (v12 != -4096)
    {
      unsigned int v14 = v11 + v13++;
      unsigned int v11 = v14 & v10;
      uint64_t v12 = *(void *)(v6 + 8 * v11);
      if (v12 == a3) {
        goto LABEL_22;
      }
    }
    return 0;
  }
LABEL_22:
  uint64_t v15 = *(void *)(v4 + 1864);
  uint64_t v16 = *(void *)(v4 + 1856);
  if (v15 == v16)
  {
    uint64_t v17 = *(unsigned int *)(v4 + 1876);
    uint64_t v18 = (void *)(v15 + 8 * v17);
    if (v17)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v17;
      while (*(void *)(v15 + v19) != a3)
      {
        v19 += 8;
        if (v20 == v19) {
          goto LABEL_40;
        }
      }
      uint64_t v18 = (void *)(v15 + v19);
    }
LABEL_40:
    uint64_t v16 = *(void *)(v4 + 1864);
  }
  else
  {
    uint64_t v21 = *(unsigned int *)(v4 + 1872);
    int v22 = v21 - 1;
    unsigned int v23 = (v21 - 1) & v9;
    uint64_t v18 = (void *)(v15 + 8 * v23);
    uint64_t v24 = *v18;
    if (*v18 == -1)
    {
      int v25 = 0;
LABEL_45:
      if (v25) {
        uint64_t v18 = v25;
      }
      if (*v18 != a3) {
        uint64_t v18 = (void *)(v15 + 8 * v21);
      }
    }
    else
    {
      int v25 = 0;
      int v26 = 1;
      while (v24 != a3)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == -2;
        }
        if (v27) {
          int v25 = v18;
        }
        unsigned int v28 = v23 + v26++;
        unsigned int v23 = v28 & v22;
        uint64_t v18 = (void *)(v15 + 8 * (v28 & v22));
        uint64_t v24 = *v18;
        if (*v18 == -1) {
          goto LABEL_45;
        }
      }
    }
  }
  BOOL v8 = v15 == v16;
  uint64_t v29 = 1872;
  if (v8) {
    uint64_t v29 = 1876;
  }
  return v18 == (void *)(v15 + 8 * *(unsigned int *)(v4 + v29));
}

void sub_1CC856FC8(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeGPUFunctionCallInfoWrapperPass(a1, v2);
  operator new();
}

void sub_1CC857088()
{
}

uint64_t sub_1CC857578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDC970;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261FCA0;
  sub_1CB93141C(a1 + 32, a2);
  sub_1CB93141C(a1 + 64, a3);
  sub_1CB93141C(a1 + 96, a4);
  sub_1CB93141C(a1 + 128, a5);
  sub_1CB93141C(a1 + 160, a6);
  sub_1CB93141C(a1 + 192, a7);
  sub_1CB93141C(a1 + 224, a8);
  sub_1CB93141C(a1 + 256, a9);
  sub_1CB93141C(a1 + 288, a10);
  *(unsigned char *)(a1 + 327) = a11;
  if (dword_1EBCDCDD0 == 2) {
    a12 = 0;
  }
  if (dword_1EBCDCDD0 == 1) {
    char v20 = 1;
  }
  else {
    char v20 = a12;
  }
  *(unsigned char *)(a1 + 329) = v20;
  *(_DWORD *)(a1 + 360) = 128;
  uint64_t v21 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 344) = v21;
  *(void *)(a1 + 352) = 0;
  p_atomic_ullong PassRegistry = 2;
  uint64_t v85 = 0;
  uint64_t v86 = -4096;
  uint64_t v87 = 0;
  unsigned int v83 = (uint64_t (*)())&unk_1F2615EC8;
  uint64_t v22 = *(unsigned int *)(a1 + 360);
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v22 << 6;
    int v25 = v21 + 16;
    do
    {
      uint64_t v26 = p_PassRegistry;
      uint64_t v27 = v86;
      *(v25 - 1) = p_PassRegistry & 6;
      *int v25 = 0;
      v25[1] = v27;
      if (v27 != -4096 && v27 != -8192 && v27 != 0)
      {
        *int v25 = *(void *)(v26 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v26 & 0xFFFFFFFFFFFFFFF8) = v25 - 1;
        *(v25 - 1) = v26 & 0xFFFFFFFFFFFFFFFELL;
        if (*v25) {
          *(void *)*int v25 = *(void *)*v25 & 7 | (unint64_t)(v21 + 16);
        }
        uint64_t v23 = v87;
      }
      *(v25 - 2) = &unk_1F2615EC8;
      v25[2] = v23;
      v25 += 8;
      v21 += 64;
      v24 -= 64;
    }
    while (v24);
    if (v86 != -8192 && v86 != -4096 && v86)
    {
      unint64_t v48 = p_PassRegistry & 0xFFFFFFFFFFFFFFF8;
      *(void *)(p_PassRegistry & 0xFFFFFFFFFFFFFFF8) = v85;
      if (v85)
      {
        *uint64_t v85 = *v85 & 7 | v48;
      }
      else
      {
        uint64_t v49 = v86;
        uint64_t v50 = ***(int32x2_t ****)v86;
        unint64_t v51 = (unint64_t)v50[303];
        if (v51 <= v48)
        {
          uint64_t v52 = v50[305].u32[0];
          if (v51 + 16 * v52 > v48)
          {
            unsigned int v53 = v52 - 1;
            LODWORD(v54) = v53 & ((v86 >> 4) ^ (v86 >> 9));
            unsigned int v55 = (uint64_t *)(v51 + 16 * v54);
            uint64_t v56 = *v55;
            if (v86 == *v55)
            {
LABEL_64:
              *unsigned int v55 = -8192;
              v50[304] = vadd_s32(v50[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v49 = v86;
            }
            else
            {
              int v57 = 1;
              while (v56 != -4096)
              {
                int v58 = v54 + v57++;
                uint64_t v54 = v58 & v53;
                uint64_t v56 = *(void *)(v51 + 16 * v54);
                if (v86 == v56)
                {
                  unsigned int v55 = (uint64_t *)(v51 + 16 * v54);
                  goto LABEL_64;
                }
              }
            }
            *(unsigned char *)(v49 + 17) &= ~1u;
          }
        }
      }
    }
  }
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 424) = 128;
  uint64_t v29 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 408) = v29;
  *(void *)(a1 + 416) = 0;
  p_atomic_ullong PassRegistry = 2;
  uint64_t v85 = 0;
  uint64_t v86 = -4096;
  uint64_t v87 = 0;
  unsigned int v83 = (uint64_t (*)())&unk_1F2615EC8;
  uint64_t v30 = *(unsigned int *)(a1 + 424);
  if (v30)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v30 << 6;
    uint64_t v33 = v29 + 16;
    do
    {
      uint64_t v34 = p_PassRegistry;
      uint64_t v35 = v86;
      *(v33 - 1) = p_PassRegistry & 6;
      *uint64_t v33 = 0;
      v33[1] = v35;
      if (v35 != -4096 && v35 != -8192 && v35 != 0)
      {
        *uint64_t v33 = *(void *)(v34 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = v33 - 1;
        *(v33 - 1) = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (*v33) {
          *(void *)*uint64_t v33 = *(void *)*v33 & 7 | (unint64_t)(v29 + 16);
        }
        uint64_t v31 = v87;
      }
      *(v33 - 2) = &unk_1F2615EC8;
      v33[2] = v31;
      v33 += 8;
      v29 += 64;
      v32 -= 64;
    }
    while (v32);
    if (v86 != -8192 && v86 != -4096 && v86)
    {
      unint64_t v59 = p_PassRegistry & 0xFFFFFFFFFFFFFFF8;
      *(void *)(p_PassRegistry & 0xFFFFFFFFFFFFFFF8) = v85;
      if (v85)
      {
        *uint64_t v85 = *v85 & 7 | v59;
      }
      else
      {
        uint64_t v60 = v86;
        int v61 = ***(int32x2_t ****)v86;
        unint64_t v62 = (unint64_t)v61[303];
        if (v62 <= v59)
        {
          uint64_t v63 = v61[305].u32[0];
          if (v62 + 16 * v63 > v59)
          {
            unsigned int v64 = v63 - 1;
            LODWORD(v65) = v64 & ((v86 >> 4) ^ (v86 >> 9));
            uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
            uint64_t v67 = *v66;
            if (v86 == *v66)
            {
LABEL_74:
              *uint64_t v66 = -8192;
              v61[304] = vadd_s32(v61[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v60 = v86;
            }
            else
            {
              int v68 = 1;
              while (v67 != -4096)
              {
                int v69 = v65 + v68++;
                uint64_t v65 = v69 & v64;
                uint64_t v67 = *(void *)(v62 + 16 * v65);
                if (v86 == v67)
                {
                  uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
                  goto LABEL_74;
                }
              }
            }
            *(unsigned char *)(v60 + 17) &= ~1u;
          }
        }
      }
    }
  }
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 488) = 128;
  int v37 = (llvm::PassRegistry *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(void *)(a1 + 472) = v37;
  *(void *)(a1 + 480) = 0;
  p_atomic_ullong PassRegistry = 2;
  uint64_t v85 = 0;
  uint64_t v86 = -4096;
  uint64_t v87 = 0;
  unsigned int v83 = (uint64_t (*)())&unk_1F2615EC8;
  uint64_t v38 = *(unsigned int *)(a1 + 488);
  if (v38)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v38 << 6;
    uint64_t v41 = (void *)((char *)v37 + 16);
    do
    {
      uint64_t v42 = p_PassRegistry;
      uint64_t v43 = v86;
      *(v41 - 1) = p_PassRegistry & 6;
      *uint64_t v41 = 0;
      v41[1] = v43;
      if (v43 != -4096 && v43 != -8192 && v43 != 0)
      {
        *uint64_t v41 = *(void *)(v42 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v42 & 0xFFFFFFFFFFFFFFF8) = v41 - 1;
        *(v41 - 1) = v42 & 0xFFFFFFFFFFFFFFFELL;
        if (*v41) {
          *(void *)*uint64_t v41 = *(void *)*v41 & 7 | ((unint64_t)v37 + 16);
        }
        uint64_t v39 = v87;
      }
      *(v41 - 2) = &unk_1F2615EC8;
      v41[2] = v39;
      v41 += 8;
      int v37 = (llvm::PassRegistry *)((char *)v37 + 64);
      v40 -= 64;
    }
    while (v40);
    if (v86 != -8192 && v86 != -4096 && v86)
    {
      unint64_t v70 = p_PassRegistry & 0xFFFFFFFFFFFFFFF8;
      *(void *)(p_PassRegistry & 0xFFFFFFFFFFFFFFF8) = v85;
      if (v85)
      {
        *uint64_t v85 = *v85 & 7 | v70;
      }
      else
      {
        uint64_t v71 = v86;
        int v72 = ***(int32x2_t ****)v86;
        unint64_t v73 = (unint64_t)v72[303];
        if (v73 <= v70)
        {
          uint64_t v74 = v72[305].u32[0];
          if (v73 + 16 * v74 > v70)
          {
            unsigned int v75 = v74 - 1;
            LODWORD(v76) = v75 & ((v86 >> 4) ^ (v86 >> 9));
            uint64_t v77 = (uint64_t *)(v73 + 16 * v76);
            uint64_t v78 = *v77;
            if (v86 == *v77)
            {
LABEL_84:
              *uint64_t v77 = -8192;
              v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v71 = v86;
            }
            else
            {
              int v79 = 1;
              while (v78 != -4096)
              {
                int v80 = v76 + v79++;
                uint64_t v76 = v80 & v75;
                uint64_t v78 = *(void *)(v73 + 16 * v76);
                if (v86 == v78)
                {
                  uint64_t v77 = (uint64_t *)(v73 + 16 * v76);
                  goto LABEL_84;
                }
              }
            }
            *(unsigned char *)(v71 + 17) &= ~1u;
          }
        }
      }
    }
  }
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 1;
  uint64_t v45 = 544;
  int64x2_t v46 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v45) = v46;
    v45 += 16;
  }
  while (v45 != 800);
  *(void *)(a1 + 800) = a1 + 816;
  *(void *)(a1 + 808) = 0x2000000000;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 1088) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v37);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDC978, memory_order_acquire) != -1)
  {
    unsigned int v83 = sub_1CC856FC8;
    p_atomic_ullong PassRegistry = (uint64_t)&PassRegistry;
    uint64_t v82 = &v83;
    std::__call_once(&qword_1EBCDC978, &v82, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC857CF0()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC858140(uint64_t a1)
{
  *(void *)a1 = &unk_1F261FCA0;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1072), 8);
  BOOL v2 = *(void **)(a1 + 800);
  if (v2 != (void *)(a1 + 816)) {
    free(v2);
  }
  if ((*(unsigned char *)(a1 + 536) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 544), 8);
  }
  if (*(unsigned char *)(a1 + 520))
  {
    sub_1CC009394(a1 + 496);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 496), 8);
    *(unsigned char *)(a1 + 520) = 0;
  }
  sub_1CC4D021C((void *)(a1 + 472));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 472), 8);
  if (*(unsigned char *)(a1 + 456))
  {
    sub_1CC009394(a1 + 432);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 432), 8);
    *(unsigned char *)(a1 + 456) = 0;
  }
  sub_1CC4D021C((void *)(a1 + 408));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 408), 8);
  if (*(unsigned char *)(a1 + 392))
  {
    sub_1CC009394(a1 + 368);
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 368), 8);
    *(unsigned char *)(a1 + 392) = 0;
  }
  sub_1CC4D021C((void *)(a1 + 344));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 344), 8);
  uint64_t v3 = *(void *)(a1 + 312);
  if (v3 == a1 + 288)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 288) + 32))(a1 + 288);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if (v4 == a1 + 256)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 256) + 32))(a1 + 256);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 248);
  if (v5 == a1 + 224)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 224) + 32))(a1 + 224);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 216);
  if (v6 == a1 + 192)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 192) + 32))(a1 + 192);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  if (v7 == a1 + 160)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 160) + 32))(a1 + 160);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 152);
  if (v8 == a1 + 128)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 32))(a1 + 128);
  }
  else if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 88);
  if (v10 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
  }
  else if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11 == a1 + 32)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
  else if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC8585FC(uint64_t a1)
{
  sub_1CC858140(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC858634()
{
  return "Generation of constant programs";
}

void sub_1CC858644(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 112;
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, v3, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);

  sub_1CB843600(a2, v3, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1CC858740(uint64_t a1, llvm::Module *a2)
{
  uint64_t v617 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (void *)((char *)a2 + 24);
  uint64_t v3 = (void *)*((void *)a2 + 4);
  if (v3 == (void *)((char *)a2 + 24))
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    if (v3) {
      uint64_t v6 = v3 - 7;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 120);
    BOOL v8 = v7 && ((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, v6) & 1) != 0
      || byte_1EBCDCAD0 != 0;
    *(unsigned char *)(a1 + 320) = v8;
    uint64_t v9 = *(void *)(a1 + 88);
    BOOL v10 = v9 && ((*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, v6) & 1) != 0
       || byte_1EBCDCC50 != 0;
    *(unsigned char *)(a1 + 321) = v10;
    uint64_t v11 = *(void *)(a1 + 152);
    if (v11) {
      LOBYTE(v11) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v6);
    }
    *(unsigned char *)(a1 + 322) = v11;
    uint64_t v12 = *(void *)(a1 + 184);
    if (v12) {
      LOBYTE(v12) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v6);
    }
    *(unsigned char *)(a1 + 323) = v12;
    uint64_t v542 = a1;
    uint64_t v13 = *(void *)(a1 + 216);
    BOOL v14 = v13 && ((*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 48))(v13, v6) & 1) != 0
       || byte_1EBCDCB90 != 0;
    *(unsigned char *)(a1 + 324) = v14;
    uint64_t v15 = *(void *)(a1 + 248);
    BOOL v16 = v15 && ((*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, v6) & 1) != 0
       || byte_1EBCDCB90 != 0;
    *(unsigned char *)(a1 + 325) = v16;
    uint64_t v17 = *(void *)(a1 + 280);
    if (v17) {
      LOBYTE(v17) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v6);
    }
    *(unsigned char *)(a1 + 326) = v17;
    *(unsigned char *)(a1 + 328) = 0;
    uint64_t v18 = *(uint64_t **)(a1 + 8);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (v19 == v20)
    {
LABEL_30:
      uint64_t v21 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v19 != &llvm::FunctionGroupInfoWrapperPass::ID)
      {
        v19 += 16;
        if (v19 == v20) {
          goto LABEL_30;
        }
      }
      uint64_t v21 = *(void *)(v19 + 8);
    }
    uint64_t v23 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
    (*(void (**)(uint64_t, llvm::Module *))(*(void *)v23 + 16))(v23, a2);
    v563[0] = 1;
    for (uint64_t i = 1; i != 65; i += 4)
      v563[i] = -4096;
    sub_1CD10AFA4(a2, (uint64_t)v563);
    sub_1CD10A3A4(a2);
    if ((v25 & 0x1000000000000) != 0) {
      *(unsigned char *)(a1 + 328) = 1;
    }
    uint64_t v560 = 1;
    for (uint64_t j = 8; j != 264; j += 16)
      *(uint64_t *)((char *)&v560 + j) = -4096;
    uint64_t v27 = (void *)*((void *)a2 + 4);
    if (v27 != v2)
    {
      while (1)
      {
        uint64_t v28 = v27 ? (uint64_t)(v27 - 7) : 0;
        int v29 = v560;
        int v30 = v560 & 1;
        unsigned int v31 = v28 >> 4;
        if (v560)
        {
          int v32 = 16;
          uint64_t v33 = &v561;
        }
        else
        {
          int v32 = v562;
          if (!v562)
          {
            uint64_t v42 = 0;
            unsigned int v43 = 0;
            goto LABEL_63;
          }
          uint64_t v33 = v561;
        }
        int v34 = v32 - 1;
        unsigned int v35 = v34 & (v31 ^ (v28 >> 9));
        uint64_t v36 = &v33[2 * v35];
        uint64_t v37 = *v36;
        if (v28 != *v36) {
          break;
        }
LABEL_69:
        uint64_t v27 = (void *)v27[1];
        if (v27 == v2) {
          goto LABEL_90;
        }
      }
      uint64_t v38 = 0;
      int v39 = 1;
      while (v37 != -4096)
      {
        if (v38) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = v37 == -8192;
        }
        if (v40) {
          uint64_t v38 = v36;
        }
        unsigned int v41 = v35 + v39++;
        unsigned int v35 = v41 & v34;
        uint64_t v36 = &v33[2 * v35];
        uint64_t v37 = *v36;
        if (v28 == *v36) {
          goto LABEL_69;
        }
      }
      if (v38) {
        uint64_t v42 = v38;
      }
      else {
        uint64_t v42 = v36;
      }
      if (v560) {
        unsigned int v43 = 16;
      }
      else {
        unsigned int v43 = v562;
      }
LABEL_63:
      if (4 * (v560 >> 1) + 4 < 3 * v43)
      {
        if (v43 + ~(v560 >> 1) - HIDWORD(v560) <= v43 >> 3)
        {
          sub_1CB920100((uint64_t)&v560, v43);
          __p = 0;
          sub_1CC85BD6C((uint64_t)&v560, v28, &__p);
          uint64_t v42 = __p;
          int v29 = v560;
          int v30 = v560 & 1;
        }
        goto LABEL_66;
      }
      sub_1CB920100((uint64_t)&v560, 2 * v43);
      int v29 = v560;
      if (v560)
      {
        int v44 = 16;
        uint64_t v45 = &v561;
      }
      else
      {
        int v44 = v562;
        if (!v562)
        {
          int v30 = 0;
          uint64_t v42 = 0;
LABEL_66:
          LODWORD(v560) = (v29 & 0xFFFFFFFE | v30) + 2;
          if (*v42 != -4096) {
            --HIDWORD(v560);
          }
          *uint64_t v42 = v28;
          v42[1] = v27;
          goto LABEL_69;
        }
        uint64_t v45 = v561;
      }
      int v30 = v560 & 1;
      int v46 = v44 - 1;
      unsigned int v47 = (v44 - 1) & (v31 ^ (v28 >> 9));
      uint64_t v42 = &v45[2 * v47];
      uint64_t v48 = *v42;
      if (v28 != *v42)
      {
        uint64_t v49 = 0;
        int v50 = 1;
        while (v48 != -4096)
        {
          if (v49) {
            BOOL v51 = 0;
          }
          else {
            BOOL v51 = v48 == -8192;
          }
          if (v51) {
            uint64_t v49 = v42;
          }
          unsigned int v52 = v47 + v50++;
          unsigned int v47 = v52 & v46;
          uint64_t v42 = &v45[2 * (v52 & v46)];
          uint64_t v48 = *v42;
          if (v28 == *v42) {
            goto LABEL_66;
          }
        }
        if (v49) {
          uint64_t v42 = v49;
        }
      }
      goto LABEL_66;
    }
LABEL_90:
    unsigned int v53 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
    uint64_t v539 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 56))(v23);
    if (v53 != (uint64_t *)v539)
    {
      int v22 = 0;
      uint64_t v54 = v542;
      uint64_t v538 = v23;
      while (1)
      {
        int v541 = v22;
        uint64_t v540 = v53;
        uint64_t v55 = *v53;
        uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)*v53 + 560))(*v53);
        if (v56)
        {
          uint64_t v57 = v56;
          uint64_t v58 = *(void *)(v54 + 56);
          if (!v58 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v58 + 48))(v58, v57)) {
            break;
          }
        }
        int v60 = 0;
LABEL_884:
        v22 |= v60;
        if (++v53 == (uint64_t *)v539) {
          goto LABEL_970;
        }
      }
      unint64_t v59 = *(void **)(v57 + 40);
      *(void *)(v54 + 336) = 0;
      sub_1CC7B6DC8((char *)(v542 + 344));
      if (*(unsigned char *)(v54 + 392))
      {
        sub_1CC009394(v542 + 368);
        MEMORY[0x1D25D9CD0](*(void *)(v54 + 368), 8);
        *(unsigned char *)(v54 + 392) = 0;
      }
      sub_1CC7B6DC8((char *)(v542 + 408));
      if (*(unsigned char *)(v54 + 456))
      {
        sub_1CC009394(v542 + 432);
        MEMORY[0x1D25D9CD0](*(void *)(v54 + 432), 8);
        *(unsigned char *)(v54 + 456) = 0;
      }
      sub_1CC7B6DC8((char *)(v542 + 472));
      if (*(unsigned char *)(v54 + 520))
      {
        sub_1CC009394(v542 + 496);
        MEMORY[0x1D25D9CD0](*(void *)(v54 + 496), 8);
        *(unsigned char *)(v54 + 520) = 0;
      }
      if (*(unsigned char *)(v54 + 329))
      {
        uint64_t v567 = v569;
        uint64_t v568 = 0x1000000000;
      }
      else
      {
        uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 336))(v55);
        int v62 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 8))(v61);
        uint64_t v567 = v569;
        uint64_t v568 = 0x1000000000;
        uint64_t v63 = v59 + 3;
        unsigned int v64 = (void *)v59[4];
        uint64_t v65 = v59;
        uint64_t v66 = v59 + 1;
        uint64_t v67 = (void *)v65[2];
        int v68 = v65 + 5;
        uint64_t v69 = v65[6];
        unint64_t v70 = v65 + 7;
        uint64_t v71 = v65;
        int v72 = (void *)v65[8];
        __p = v64;
        uint64_t v571 = v67;
        uint64_t v572 = v69;
        uint64_t v573 = v72;
        uint64_t v574 = v63;
        int v575 = v66;
        int v576 = v68;
        uint64_t v577 = v70;
        while (v64 != v63
             || v67 != v66
             || (void *)v69 != v68
             || v72 != v70
             || v574 != v63
             || v575 != v66
             || v576 != v68
             || v577 != v70)
        {
          unint64_t v73 = (void *)sub_1CC4AD368((uint64_t)&__p);
          if ((*(_DWORD *)(*v73 + 8) & 0xFFFFFF00) == 0x4000 && v73[1] != 0)
          {
            unsigned int v75 = v73;
            if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v55 + 408))(v55, v73))
            {
              (*(void (**)(uint64_t, void *))(*(void *)v55 + 400))(v55, v75);
              if ((*(unsigned int (**)(uint64_t))(*(void *)v61 + 16))(v61) == v62)
              {
                if (v568 >= (unint64_t)HIDWORD(v568)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v567 + v568) = v75;
                LODWORD(v568) = v568 + 1;
              }
            }
          }
          sub_1CC4AD1DC((uint64_t)&__p);
          unsigned int v64 = __p;
          uint64_t v67 = v571;
          uint64_t v69 = v572;
          int v72 = v573;
        }
        uint64_t v54 = v542;
        uint64_t v23 = v538;
        unint64_t v59 = v71;
      }
      uint64_t v548 = v552;
      unsigned __int32 v549 = v552;
      uint64_t v550 = 16;
      int v551 = 0;
      v598[0] = 260;
      v594 = v59 + 27;
      llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)&v594);
      if (v573 == 29)
      {
        v582 = "agx.may_be_called_from_intersection_function";
        LOWORD(v586) = 259;
        uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v59, (const char **)&v582);
        if (NamedMetadata)
        {
          uint64_t v77 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                      - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                          + 128);
          uint64_t v78 = (void *)(v77 + 24);
          if (*(_DWORD *)(v77 + 32) >= 0x41u) {
            uint64_t v78 = (void *)*v78;
          }
          BOOL v79 = *v78 != 0;
        }
        else
        {
          BOOL v79 = 0;
        }
        if (SHIBYTE(v572) < 0)
        {
          operator delete(__p);
          if (v79) {
            goto LABEL_219;
          }
        }
        else if (v79)
        {
          goto LABEL_219;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDC980, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCDC980))
        {
          __cxa_guard_release(&qword_1EBCDC980);
        }
        v582 = &v584;
        uint64_t v583 = 0x300000000;
        v594 = v598;
        int v595 = v598;
        uint64_t v596 = 1;
        int v597 = 0;
        uint64_t v80 = 8;
        __p = (void *)1;
        do
        {
          *(void **)((char *)&__p + v80) = (void *)-4096;
          v80 += 56;
        }
        while (v80 != 232);
        LODWORD(v612) = 0;
        if (sub_1CD114510((llvm::Module *)v59, v23, (uint64_t)&v582, (uint64_t)&v594, (int *)&__p, &v612))
        {
          uint64_t v81 = v594;
          if (v595 == v594)
          {
            int v82 = HIDWORD(v596);
            unsigned int v83 = (char *)v595 + 8 * HIDWORD(v596);
            if (HIDWORD(v596))
            {
              uint64_t v84 = 0;
              while (*(void *)((char *)v595 + v84) != v55)
              {
                v84 += 8;
                if (8 * HIDWORD(v596) == v84) {
                  goto LABEL_159;
                }
              }
              unsigned int v83 = (char *)v595 + v84;
            }
LABEL_159:
            uint64_t v81 = v595;
          }
          else
          {
            int v85 = v596 - 1;
            unsigned int v86 = (v596 - 1) & ((v55 >> 4) ^ (v55 >> 9));
            unsigned int v83 = (char *)v595 + 8 * v86;
            uint64_t v87 = *(void *)v83;
            if (*(void *)v83 == -1)
            {
              uint64_t v88 = 0;
LABEL_931:
              if (v88) {
                unsigned int v83 = v88;
              }
              int v82 = HIDWORD(v596);
              if (*(void *)v83 != v55) {
                unsigned int v83 = (char *)v595 + 8 * v596;
              }
            }
            else
            {
              uint64_t v88 = 0;
              int v89 = 1;
              while (v87 != v55)
              {
                if (v88) {
                  BOOL v90 = 0;
                }
                else {
                  BOOL v90 = v87 == -2;
                }
                if (v90) {
                  uint64_t v88 = v83;
                }
                unsigned int v91 = v86 + v89++;
                unsigned int v86 = v91 & v85;
                unsigned int v83 = (char *)v595 + 8 * (v91 & v85);
                uint64_t v87 = *(void *)v83;
                if (*(void *)v83 == -1) {
                  goto LABEL_931;
                }
              }
              int v82 = HIDWORD(v596);
            }
          }
          unsigned int v92 = v595 == v81 ? v82 : v596;
          if (v83 != (char *)v595 + 8 * v92 && v583)
          {
            int64_t v93 = (void **)v582;
            unsigned int v94 = (void **)((char *)v582 + 8 * v583);
            unsigned int v95 = (v57 >> 4) ^ (v57 >> 9);
            do
            {
              int v591 = 0;
              int v591 = *v93;
              unsigned int v96 = sub_1CC85D214(&__p, &v591);
              if (v96[1])
              {
                int v98 = v96 + 2;
                int v97 = 1;
              }
              else
              {
                int v97 = *((_DWORD *)v96 + 6);
                if (!v97) {
                  goto LABEL_202;
                }
                int v98 = (void *)v96[2];
              }
              int v99 = v97 - 1;
              unsigned int v100 = v99 & v95;
              uint64_t v101 = v98[v99 & v95];
              if (v101 != v57)
              {
                int v118 = 1;
                while (v101 != -4096)
                {
                  unsigned int v119 = v100 + v118++;
                  unsigned int v100 = v119 & v99;
                  uint64_t v101 = v98[v100];
                  if (v101 == v57) {
                    goto LABEL_170;
                  }
                }
                goto LABEL_202;
              }
LABEL_170:
              unsigned int v102 = v591;
              uint64_t v103 = v549;
              uint64_t v104 = HIDWORD(v550);
              if (v549 != v548)
              {
                unsigned int v108 = v550;
LABEL_181:
                if (3 * v108 <= 4 * (HIDWORD(v550) - v551))
                {
                  if (v108 >= 0x40) {
                    v108 *= 2;
                  }
                  else {
                    unsigned int v108 = 128;
                  }
                }
                else if (v108 - HIDWORD(v550) >= v108 >> 3)
                {
                  goto LABEL_183;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v548, v108);
                unsigned int v108 = v550;
                uint64_t v103 = v549;
LABEL_183:
                unsigned int v109 = v108 - 1;
                unsigned int v110 = (v108 - 1) & ((v102 >> 4) ^ (v102 >> 9));
                uint64_t v111 = &v103[8 * v110];
                int v112 = *(void **)v111;
                if (*(void *)v111 == -1)
                {
                  unsigned int v113 = 0;
LABEL_195:
                  if (v113) {
                    BOOL v117 = v113;
                  }
                  else {
                    BOOL v117 = (void **)v111;
                  }
                  if (*v117 != v102)
                  {
                    if (*v117 == (void *)-2) {
                      --v551;
                    }
                    else {
                      ++HIDWORD(v550);
                    }
                    *BOOL v117 = v102;
                  }
                }
                else
                {
                  unsigned int v113 = 0;
                  int v114 = 1;
                  while (v112 != v102)
                  {
                    if (v113) {
                      BOOL v115 = 0;
                    }
                    else {
                      BOOL v115 = v112 == (void *)-2;
                    }
                    if (v115) {
                      unsigned int v113 = (void **)v111;
                    }
                    unsigned int v116 = v110 + v114++;
                    unsigned int v110 = v116 & v109;
                    uint64_t v111 = &v103[8 * (v116 & v109)];
                    int v112 = *(void **)v111;
                    if (*(void *)v111 == -1) {
                      goto LABEL_195;
                    }
                  }
                }
                goto LABEL_202;
              }
              if (HIDWORD(v550))
              {
                unint64_t v105 = 0;
                uint64_t v106 = 8 * HIDWORD(v550);
                uint64_t v107 = (void **)v549;
                while (*v107 != v591)
                {
                  if (*v107 == (void *)-2) {
                    unint64_t v105 = v107;
                  }
                  ++v107;
                  v106 -= 8;
                  if (!v106)
                  {
                    if (!v105) {
                      goto LABEL_178;
                    }
                    *unint64_t v105 = v591;
                    --v551;
                    goto LABEL_202;
                  }
                }
                goto LABEL_202;
              }
LABEL_178:
              unsigned int v108 = v550;
              if (HIDWORD(v550) >= v550) {
                goto LABEL_181;
              }
              ++HIDWORD(v550);
              *(void *)&v549[8 * v104] = v591;
LABEL_202:
              ++v93;
            }
            while (v93 != v94);
          }
        }
        sub_1CC7E5E14((uint64_t)&__p);
        if (v595 != v594) {
          free(v595);
        }
        uint64_t v23 = v538;
        if (v582 != &v584) {
          free(v582);
        }
      }
      else if (SHIBYTE(v572) < 0)
      {
        operator delete(__p);
      }
LABEL_219:
      sub_1CD11373C(v23, v55, (uint64_t)v59);
      int v547 = sub_1CC85BE04(v54, v57, (uint64_t)v563, v55);
      if (!*(void *)(v54 + 336))
      {
LABEL_879:
        int v22 = v541;
        unsigned int v53 = v540;
        if (v549 != v548) {
          free(v549);
        }
        if (v567 != v569) {
          free(v567);
        }
        int v60 = v547;
        goto LABEL_884;
      }
      int v564 = v566;
      uint64_t v565 = 0x400000000;
      if (byte_1EBCDD010 && (*(_DWORD *)(v54 + 352) || *(_DWORD *)(v54 + 416)))
      {
        uint64_t v120 = *(uint64_t **)(v54 + 8);
        uint64_t v121 = *v120;
        uint64_t v122 = v120[1];
        if (v121 == v122)
        {
          uint64_t v124 = 0;
          uint64_t v123 = v542 + 472;
        }
        else
        {
          uint64_t v123 = v542 + 472;
          while (*(_UNKNOWN **)v121 != &llvm::GPUFunctionCallInfoWrapper::ID)
          {
            v121 += 16;
            if (v121 == v122)
            {
              uint64_t v124 = 0;
              goto LABEL_230;
            }
          }
          uint64_t v124 = *(void *)(v121 + 8);
        }
LABEL_230:
        uint64_t v125 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v124 + 96))(v124, &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
        uint64_t v126 = (unint64_t *)&v574;
        __p = &v574;
        uint64_t v571 = &v574;
        uint64_t v572 = 16;
        LODWORD(v573) = 0;
        uint64_t v127 = *(void *)(v57 + 40);
        uint64_t v128 = v127 + 24;
        uint64_t v129 = *(void *)(v127 + 32);
        uint64_t v544 = v59;
        if (v129 != v127 + 24)
        {
LABEL_231:
          if (v129) {
            uint64_t v130 = v129 - 56;
          }
          else {
            uint64_t v130 = 0;
          }
          if (v129 && *(unsigned char *)(v130 + 16) == 3)
          {
            BOOL v131 = (*(_DWORD *)(v130 + 20) & 0x7FFFFFF) == 0;
          }
          else
          {
            if (*(unsigned char *)(v130 + 16) || *(void *)(v130 + 72) != v130 + 72)
            {
              char v132 = 0;
              goto LABEL_243;
            }
            BOOL v131 = (*(unsigned char *)(v130 + 34) & 0x80) == 0;
          }
          char v132 = v131;
LABEL_243:
          if (v130 == v57) {
            goto LABEL_289;
          }
          if (v132) {
            goto LABEL_289;
          }
          if (v130 == *(void *)(v54 + 336)) {
            goto LABEL_289;
          }
          uint64_t v133 = *(void *)(v130 + 8);
          if (!v133) {
            goto LABEL_289;
          }
          while (1)
          {
            uint64_t v134 = *(void *)(v133 + 24);
            unsigned int v135 = *(unsigned __int8 *)(v134 + 16);
            if (v134) {
              BOOL v136 = v135 >= 0x1C;
            }
            else {
              BOOL v136 = 0;
            }
            if (v136)
            {
              if (v135 == 33)
              {
                unint64_t v137 = v134 & 0xFFFFFFFFFFFFFFFBLL;
                if ((v137 & 4) != 0) {
                  goto LABEL_257;
                }
              }
              else if (v135 == 84)
              {
                unint64_t v137 = v134 | 4;
                if ((v137 & 4) != 0)
                {
LABEL_257:
                  uint64_t v138 = *(void *)(*(void *)((v137 & 0xFFFFFFFFFFFFFFF8) + 40) + 56);
                  if (v138 != v130 && v138 != v57) {
                    goto LABEL_289;
                  }
                }
              }
            }
            uint64_t v133 = *(void *)(v133 + 8);
            if (!v133)
            {
              uint64_t v141 = *(void *)(v125 + 48);
              uint64_t v140 = *(void *)(v125 + 56);
              if (v140 == v141)
              {
                uint64_t v142 = *(unsigned int *)(v125 + 68);
                unint64_t v143 = (void *)(v140 + 8 * v142);
                if (v142)
                {
                  uint64_t v144 = 0;
                  uint64_t v145 = 8 * v142;
                  while (*(void *)(v140 + v144) != v130)
                  {
                    v144 += 8;
                    if (v145 == v144) {
                      goto LABEL_282;
                    }
                  }
                  unint64_t v143 = (void *)(v140 + v144);
                }
LABEL_282:
                uint64_t v141 = *(void *)(v125 + 56);
              }
              else
              {
                uint64_t v146 = *(unsigned int *)(v125 + 64);
                int v147 = v146 - 1;
                unsigned int v148 = (v146 - 1) & ((v130 >> 4) ^ (v130 >> 9));
                unint64_t v143 = (void *)(v140 + 8 * v148);
                uint64_t v149 = *v143;
                if (*v143 == -1)
                {
                  int v150 = 0;
LABEL_302:
                  if (v150) {
                    unint64_t v143 = v150;
                  }
                  if (*v143 != v130) {
                    unint64_t v143 = (void *)(v140 + 8 * v146);
                  }
                }
                else
                {
                  int v150 = 0;
                  int v151 = 1;
                  while (v149 != v130)
                  {
                    if (v150) {
                      BOOL v152 = 0;
                    }
                    else {
                      BOOL v152 = v149 == -2;
                    }
                    if (v152) {
                      int v150 = v143;
                    }
                    unsigned int v153 = v148 + v151++;
                    unsigned int v148 = v153 & v147;
                    unint64_t v143 = (void *)(v140 + 8 * (v153 & v147));
                    uint64_t v149 = *v143;
                    if (*v143 == -1) {
                      goto LABEL_302;
                    }
                  }
                }
              }
              if (v140 == v141) {
                uint64_t v154 = (unsigned int *)(v125 + 68);
              }
              else {
                uint64_t v154 = (unsigned int *)(v125 + 64);
              }
              if (v143 != (void *)(v140 + 8 * *v154) || sub_1CC87F018(v125, v130))
              {
                sub_1CC87F018(v125, v130);
                goto LABEL_289;
              }
              unsigned int v155 = (char *)v571;
              uint64_t v156 = HIDWORD(v572);
              if (v571 != __p)
              {
                unsigned int v160 = v572;
                goto LABEL_307;
              }
              if (!HIDWORD(v572))
              {
LABEL_299:
                unsigned int v160 = v572;
                if (HIDWORD(v572) < v572)
                {
                  ++HIDWORD(v572);
                  *((void *)v571 + v156) = v130;
                  goto LABEL_289;
                }
LABEL_307:
                if (3 * v160 <= 4 * (HIDWORD(v572) - (int)v573))
                {
                  if (v160 >= 0x40) {
                    v160 *= 2;
                  }
                  else {
                    unsigned int v160 = 128;
                  }
                }
                else if (v160 - HIDWORD(v572) >= v160 >> 3)
                {
                  goto LABEL_309;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__p, v160);
                unsigned int v160 = v572;
                unsigned int v155 = (char *)v571;
LABEL_309:
                unsigned int v161 = v160 - 1;
                unsigned int v162 = (v160 - 1) & ((v130 >> 4) ^ (v130 >> 9));
                BOOL v163 = &v155[8 * v162];
                uint64_t v164 = *(void *)v163;
                if (*(void *)v163 == -1)
                {
                  int v165 = 0;
LABEL_321:
                  if (v165) {
                    uint64_t v169 = v165;
                  }
                  else {
                    uint64_t v169 = (uint64_t *)v163;
                  }
                  if (*v169 != v130)
                  {
                    if (*v169 == -2) {
                      LODWORD(v573) = v573 - 1;
                    }
                    else {
                      ++HIDWORD(v572);
                    }
                    *uint64_t v169 = v130;
                  }
                }
                else
                {
                  int v165 = 0;
                  int v166 = 1;
                  while (v164 != v130)
                  {
                    if (v165) {
                      BOOL v167 = 0;
                    }
                    else {
                      BOOL v167 = v164 == -2;
                    }
                    if (v167) {
                      int v165 = (uint64_t *)v163;
                    }
                    unsigned int v168 = v162 + v166++;
                    unsigned int v162 = v168 & v161;
                    BOOL v163 = &v155[8 * (v168 & v161)];
                    uint64_t v164 = *(void *)v163;
                    if (*(void *)v163 == -1) {
                      goto LABEL_321;
                    }
                  }
                }
                goto LABEL_289;
              }
              unsigned int v157 = 0;
              uint64_t v158 = 8 * HIDWORD(v572);
              uint64_t v159 = (uint64_t *)v571;
              while (*v159 != v130)
              {
                if (*v159 == -2) {
                  unsigned int v157 = v159;
                }
                ++v159;
                v158 -= 8;
                if (!v158)
                {
                  if (!v157) {
                    goto LABEL_299;
                  }
                  *unsigned int v157 = v130;
                  LODWORD(v573) = v573 - 1;
                  break;
                }
              }
LABEL_289:
              uint64_t v129 = *(void *)(v129 + 8);
              if (v129 == v128)
              {
                uint64_t v126 = (unint64_t *)v571;
                uint64_t v170 = (unint64_t *)__p;
                LODWORD(v171) = HIDWORD(v572);
                unsigned int v172 = v572;
                uint64_t v23 = v538;
                goto LABEL_335;
              }
              goto LABEL_231;
            }
          }
        }
        LODWORD(v171) = 0;
        unsigned int v172 = 16;
        uint64_t v170 = (unint64_t *)&v574;
LABEL_335:
        if (v126 == v170) {
          uint64_t v171 = v171;
        }
        else {
          uint64_t v171 = v172;
        }
        int v173 = v126;
        if (v171)
        {
          uint64_t v174 = 0;
          while (v126[v174] >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (v171 == ++v174) {
              goto LABEL_469;
            }
          }
          int v173 = &v126[v174];
        }
        uint64_t v175 = &v126[v171];
        if (v173 != v175)
        {
          unint64_t v176 = *v173;
LABEL_346:
          if (*(_WORD *)(v176 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v176);
          }
          if (*(void *)(v176 + 96))
          {
            uint64_t v177 = 0;
            char v178 = 0;
            unsigned int v179 = 0;
            uint64_t v180 = *(void *)(v176 + 88);
            while (1)
            {
              uint64_t v181 = *(void *)(v176 + 8);
              if (!v181)
              {
                uint64_t v182 = 0;
                goto LABEL_377;
              }
              uint64_t v182 = 0;
              char v183 = 1;
              do
              {
                uint64_t v184 = *(void *)(v181 + 24);
                unsigned int v185 = *(unsigned __int8 *)(v184 + 16);
                if (v185 <= 0x1B) {
                  uint64_t v186 = 0;
                }
                else {
                  uint64_t v186 = *(void *)(v181 + 24);
                }
                if (v184) {
                  BOOL v187 = v185 >= 0x1C;
                }
                else {
                  BOOL v187 = 0;
                }
                if (v187)
                {
                  if (v185 == 33)
                  {
                    unint64_t v188 = v184 & 0xFFFFFFFFFFFFFFFBLL;
                    if ((v188 & 4) == 0) {
                      goto LABEL_373;
                    }
                  }
                  else
                  {
                    if (v185 != 84) {
                      goto LABEL_373;
                    }
                    unint64_t v188 = v184 | 4;
                    if ((v188 & 4) == 0) {
                      goto LABEL_373;
                    }
                  }
                  uint64_t v189 = *(void *)(*(void *)(v186 + 40) + 56);
                  uint64_t v190 = *(void *)((v188 & 0xFFFFFFFFFFFFFFF8)
                                   - 32 * (*(_DWORD *)((v188 & 0xFFFFFFFFFFFFFFF8) + 20) & 0x7FFFFFF)
                                   + 32 * v177);
                  if (v189 == v176)
                  {
                    if (v190 != v180) {
                      goto LABEL_445;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int8 *)(v190 + 16) <= 0x1Bu) {
                      uint64_t v190 = 0;
                    }
                    if (v182) {
                      v183 &= v182 == v190;
                    }
                    else {
                      uint64_t v182 = v190;
                    }
                  }
                }
LABEL_373:
                uint64_t v181 = *(void *)(v181 + 8);
              }
              while (v181);
              if ((v183 & 1) == 0) {
                goto LABEL_445;
              }
LABEL_377:
              uint64_t v191 = *(void *)(v54 + 344);
              uint64_t v192 = *(unsigned int *)(v54 + 360);
              unsigned int v193 = v182 >> 4;
              if (!v192)
              {
LABEL_385:
                uint64_t v199 = v191 + (v192 << 6);
LABEL_386:
                uint64_t v200 = v191 + (v192 << 6);
                if (v199 == v200) {
                  goto LABEL_394;
                }
                if (v192)
                {
                  unsigned int v194 = v192 - 1;
                  uint64_t v195 = (v193 ^ (v182 >> 9)) & (v192 - 1);
LABEL_389:
                  LODWORD(v201) = v195;
                  uint64_t v202 = v191 + (v195 << 6);
                  uint64_t v203 = *(void *)(v202 + 24);
                  if (v182 != v203)
                  {
                    int v204 = 1;
                    while (v203 != -4096)
                    {
                      int v205 = v201 + v204++;
                      uint64_t v201 = v205 & v194;
                      uint64_t v202 = v191 + (v201 << 6);
                      uint64_t v203 = *(void *)(v202 + 24);
                      if (v182 == v203) {
                        goto LABEL_396;
                      }
                    }
                    goto LABEL_395;
                  }
                }
                else
                {
LABEL_395:
                  uint64_t v202 = v200;
                }
LABEL_396:
                uint64_t v206 = *(void *)(v202 + 56);
                goto LABEL_397;
              }
              unsigned int v194 = v192 - 1;
              uint64_t v195 = (v193 ^ (v182 >> 9)) & (v192 - 1);
              uint64_t v196 = *(void *)(v191 + (v195 << 6) + 24);
              if (v182 != v196)
              {
                int v197 = 1;
                while (v196 != -4096)
                {
                  int v198 = v195 + v197++;
                  uint64_t v195 = v198 & v194;
                  uint64_t v199 = v191 + (v195 << 6);
                  uint64_t v196 = *(void *)(v199 + 24);
                  if (v182 == v196) {
                    goto LABEL_386;
                  }
                }
                goto LABEL_385;
              }
              if (v195 != v192)
              {
                uint64_t v200 = v191 + (v192 << 6);
                goto LABEL_389;
              }
LABEL_394:
              uint64_t v206 = 0;
LABEL_397:
              uint64_t v207 = *(void *)(v54 + 408);
              uint64_t v208 = *(unsigned int *)(v54 + 424);
              if (!v208)
              {
LABEL_405:
                uint64_t v214 = v207 + (v208 << 6);
LABEL_406:
                uint64_t v215 = v207 + (v208 << 6);
                if (v214 == v215) {
                  goto LABEL_416;
                }
                if (v208)
                {
                  unsigned int v209 = v208 - 1;
                  uint64_t v210 = (v208 - 1) & (v193 ^ (v182 >> 9));
LABEL_409:
                  LODWORD(v216) = v210;
                  uint64_t v217 = v207 + (v210 << 6);
                  uint64_t v218 = *(void *)(v217 + 24);
                  if (v182 != v218)
                  {
                    int v219 = 1;
                    while (v218 != -4096)
                    {
                      int v220 = v216 + v219++;
                      uint64_t v216 = v220 & v209;
                      uint64_t v217 = v207 + (v216 << 6);
                      uint64_t v218 = *(void *)(v217 + 24);
                      if (v182 == v218) {
                        goto LABEL_415;
                      }
                    }
                    goto LABEL_414;
                  }
                }
                else
                {
LABEL_414:
                  uint64_t v217 = v215;
                }
LABEL_415:
                uint64_t v206 = *(void *)(v217 + 56);
                goto LABEL_416;
              }
              unsigned int v209 = v208 - 1;
              uint64_t v210 = (v208 - 1) & (v193 ^ (v182 >> 9));
              uint64_t v211 = *(void *)(v207 + (v210 << 6) + 24);
              if (v182 != v211)
              {
                int v212 = 1;
                while (v211 != -4096)
                {
                  int v213 = v210 + v212++;
                  uint64_t v210 = v213 & v209;
                  uint64_t v214 = v207 + (v210 << 6);
                  uint64_t v211 = *(void *)(v214 + 24);
                  if (v182 == v211) {
                    goto LABEL_406;
                  }
                }
                goto LABEL_405;
              }
              if (v210 != v208)
              {
                uint64_t v215 = v207 + (v208 << 6);
                goto LABEL_409;
              }
LABEL_416:
              if (!v206) {
                goto LABEL_445;
              }
              if (*(_WORD *)(v176 + 18)) {
                llvm::Function::BuildLazyArguments((llvm::Function *)v176);
              }
              uint64_t v221 = *(void *)(v176 + 88) + 40 * v177;
              uint64_t v583 = 2;
              v584 = 0;
              unsigned int v585 = (int32x2_t ****)v221;
              if (v221 != -8192 && v221 != -4096 && v221 != 0) {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v583);
              }
              v582 = &unk_1F2615EC8;
              unsigned int v586 = (char *)v123;
              BOOL v223 = sub_1CC4CFF80(v123, &v582);
              if (v585 != (int32x2_t ****)-8192 && v585 != (int32x2_t ****)-4096 && v585)
              {
                unint64_t v224 = v583 & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v583 & 0xFFFFFFFFFFFFFFF8) = v584;
                if (v584)
                {
                  unint64_t *v584 = *v584 & 7 | v224;
                }
                else
                {
                  unint64_t v225 = v585;
                  int v226 = ***v585;
                  unint64_t v227 = (unint64_t)v226[303];
                  if (v227 <= v224)
                  {
                    uint64_t v228 = v226[305].u32[0];
                    if (v227 + 16 * v228 > v224)
                    {
                      unsigned int v229 = v228 - 1;
                      LODWORD(v230) = v229 & ((v585 >> 4) ^ (v585 >> 9));
                      unsigned int v231 = (int32x2_t *****)(v227 + 16 * v230);
                      unsigned int v232 = *v231;
                      if (v585 == *v231)
                      {
LABEL_436:
                        const char *v231 = (int32x2_t ****)-8192;
                        v226[304] = vadd_s32(v226[304], (int32x2_t)0x1FFFFFFFFLL);
                        unint64_t v225 = v585;
                      }
                      else
                      {
                        int v233 = 1;
                        while (v232 != (int32x2_t ****)-4096)
                        {
                          int v234 = v230 + v233++;
                          uint64_t v230 = v234 & v229;
                          unsigned int v232 = *(int32x2_t *****)(v227 + 16 * v230);
                          if (v585 == v232)
                          {
                            unsigned int v231 = (int32x2_t *****)(v227 + 16 * v230);
                            goto LABEL_436;
                          }
                        }
                      }
                      *((unsigned char *)v225 + 17) &= ~1u;
                    }
                  }
                }
              }
              uint64_t v235 = v223[7];
              if (v235 == v206)
              {
LABEL_444:
                char v178 = 1;
                goto LABEL_445;
              }
              if (v235 && v235 != -8192 && v235 != -4096)
              {
                unint64_t v236 = v223[5] & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v236 = v223[6];
                int v237 = (unint64_t *)v223[6];
                if (v237)
                {
                  unint64_t *v237 = *v237 & 7 | v236;
                }
                else
                {
                  uint64_t v238 = v223[7];
                  uint64_t v239 = ***(int32x2_t ****)v238;
                  unint64_t v240 = (unint64_t)v239[303];
                  if (v240 <= v236)
                  {
                    uint64_t v241 = v239[305].u32[0];
                    if (v240 + 16 * v241 > v236)
                    {
                      unsigned int v242 = v241 - 1;
                      LODWORD(v243) = v242 & ((v238 >> 4) ^ (v238 >> 9));
                      unsigned int v244 = (uint64_t *)(v240 + 16 * v243);
                      uint64_t v245 = *v244;
                      if (v238 == *v244)
                      {
LABEL_457:
                        *unsigned int v244 = -8192;
                        v239[304] = vadd_s32(v239[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v238 = v223[7];
                      }
                      else
                      {
                        int v246 = 1;
                        while (v245 != -4096)
                        {
                          int v247 = v243 + v246++;
                          uint64_t v243 = v247 & v242;
                          uint64_t v245 = *(void *)(v240 + 16 * v243);
                          if (v238 == v245)
                          {
                            unsigned int v244 = (uint64_t *)(v240 + 16 * v243);
                            goto LABEL_457;
                          }
                        }
                      }
                      *(unsigned char *)(v238 + 17) &= ~1u;
                    }
                  }
                }
              }
              v223[7] = v206;
              char v178 = 1;
              if (v206 != -8192 && v206 != -4096)
              {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v223 + 5));
                goto LABEL_444;
              }
LABEL_445:
              v180 += 40;
              uint64_t v177 = ++v179;
              if (*(void *)(v176 + 96) <= (unint64_t)v179)
              {
                uint64_t v23 = v538;
                unint64_t v59 = v544;
                if (v178)
                {
                  if (v565 >= (unint64_t)HIDWORD(v565)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v564 + v565) = v176;
                  LODWORD(v565) = v565 + 1;
                }
                break;
              }
            }
          }
          uint64_t v248 = v173 + 1;
          while (v248 != v175)
          {
            unint64_t v249 = *v248++;
            unint64_t v176 = v249;
            if (v249 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              int v173 = v248 - 1;
              goto LABEL_346;
            }
          }
          uint64_t v126 = (unint64_t *)v571;
          uint64_t v170 = (unint64_t *)__p;
        }
LABEL_469:
        if (v126 != v170) {
          free(v126);
        }
        if (v565)
        {
          unsigned int v250 = (uint64_t *)v564;
          uint64_t v251 = 8 * v565;
          do
          {
            uint64_t v252 = *v250;
            if (!sub_1CD11373C(v23, v55, (uint64_t)v59)) {
              break;
            }
            v547 |= sub_1CC85BE04(v54, v252, (uint64_t)v563, v55);
            ++v250;
            v251 -= 8;
          }
          while (v251);
        }
      }
      uint64_t v253 = *(uint64_t ****)(v54 + 336);
      int v254 = v253 + 9;
      BOOL v255 = (uint64_t ***)v253[9];
      if (v255 != v253 + 9)
      {
        do
        {
          if (v255) {
            unsigned int v256 = v255 - 3;
          }
          else {
            unsigned int v256 = 0;
          }
          uint64_t v259 = v256[5];
          uint64_t v257 = (uint64_t *)(v256 + 5);
          BOOL v258 = v259;
          uint64_t v260 = *v259;
          if (*v259 != v257)
          {
            do
            {
              if (v260) {
                uint64_t v261 = (uint64_t)(v260 - 3);
              }
              else {
                uint64_t v261 = 0;
              }
              if (!*(void *)(v261 + 8) && llvm::wouldInstructionBeTriviallyDead(v261, 0)) {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
              }
              uint64_t v260 = (uint64_t *)v258;
              BOOL v40 = v258 == (uint64_t **)v257;
              BOOL v258 = (uint64_t **)*v258;
            }
            while (!v40);
          }
          BOOL v255 = (uint64_t ***)*v255;
        }
        while (v255 != v254);
        uint64_t v253 = *(uint64_t ****)(v542 + 336);
      }
      if ((*((unsigned char *)v253 + 23) & 0x20) == 0) {
        goto LABEL_654;
      }
      uint64_t v262 = ***v253;
      __p = v253;
      int v263 = *(_DWORD *)(v262 + 2496);
      if (v263)
      {
        uint64_t v264 = *(void *)(v262 + 2480);
        int v265 = v263 - 1;
        unsigned int v266 = v265 & ((v253 >> 4) ^ (v253 >> 9));
        int v267 = (uint64_t ****)(v264 + 40 * v266);
        unsigned int v268 = *v267;
        if (*v267 == v253)
        {
LABEL_502:
          uint64_t v273 = *((unsigned int *)v267 + 4);
          if (v273)
          {
            int v274 = (uint64_t *)(v267[1] + 1);
            uint64_t v275 = 16 * v273;
            while (*((_DWORD *)v274 - 2))
            {
              v274 += 2;
              v275 -= 16;
              if (!v275) {
                goto LABEL_654;
              }
            }
            uint64_t v276 = *v274;
            if (*v274)
            {
              llvm::DIBuilder::DIBuilder((uint64_t)&__p, v253[5], 0, *(void *)(v276 - 8 * *(unsigned int *)(v276 + 8) + 40));
              uint64_t v277 = *(void *)(v276 + 16);
              int v278 = (uint64_t *)(v277 & 0xFFFFFFFFFFFFFFF8);
              if ((v277 & 4) != 0) {
                int v278 = (uint64_t *)*v278;
              }
              v582 = (void *)1;
              for (uint64_t k = 8; k != 72; k += 16)
                *(void **)((char *)&v582 + k) = (void *)-4096;
              uint64_t v280 = v253 + 9;
              unint64_t v281 = v253[10];
              unsigned int v543 = v253 + 9;
LABEL_513:
              if (v281 != (uint64_t **)v280)
              {
                uint64_t v282 = v281 - 3;
                v545 = v281;
                if (!v281) {
                  uint64_t v282 = 0;
                }
                uint64_t v283 = v282 + 5;
                for (uint64_t m = v282[6]; ; uint64_t m = (uint64_t *)m[1])
                {
                  if (m == (uint64_t *)v283)
                  {
                    uint64_t v280 = v543;
                    unint64_t v281 = (uint64_t **)v545[1];
                    goto LABEL_513;
                  }
                  if (m) {
                    uint64_t v285 = (uint64_t)(m - 3);
                  }
                  else {
                    uint64_t v285 = 0;
                  }
                  uint64_t v287 = (void **)(v285 + 48);
                  uint64_t v286 = *(void **)(v285 + 48);
                  int v591 = v286;
                  if (!v286) {
                    goto LABEL_534;
                  }
                  llvm::MetadataTracking::track((uint64_t)&v591, (unsigned __int8 *)v286, 2);
                  if (!v591) {
                    goto LABEL_534;
                  }
                  llvm::DebugLoc::get((unsigned __int8 *)*((unsigned int *)v591 + 1), 0, 0, *((unsigned __int16 *)v591 + 1), v276, &v612);
                  if (v591)
                  {
                    int v335 = *(unsigned __int8 *)v591;
                    if ((v335 - 4) > 0x1E)
                    {
                      if ((v335 - 3) >= 0xFFFFFFFE) {
                        v357 = v591;
                      }
                      else {
                        v357 = 0;
                      }
                      if ((v335 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v337 = (unint64_t)v357 + 8;
LABEL_620:
                        v594 = &v591;
                        sub_1CC5FA668(v337 + 16, &v594);
                        goto LABEL_524;
                      }
                      if (v335 == 3) {
                        *((void *)v591 + 1) = 0;
                      }
                    }
                    else if ((*((unsigned char *)v591 + 1) & 0x7F) == 2 || *((_DWORD *)v591 + 3))
                    {
                      uint64_t v336 = *((void *)v591 + 2);
                      if ((v336 & 4) != 0)
                      {
                        unint64_t v337 = v336 & 0xFFFFFFFFFFFFFFF8;
                        if (v337) {
                          goto LABEL_620;
                        }
                      }
                    }
                  }
LABEL_524:
                  int v591 = v612;
                  if (v612)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v612, v612, (uint64_t)&v591);
                    v579[0] = v591;
                    if (v591) {
                      llvm::MetadataTracking::track((uint64_t)v579, (unsigned __int8 *)v591, 2);
                    }
                  }
                  else
                  {
                    v579[0] = 0;
                  }
                  if (v579 != v287)
                  {
                    uint64_t v288 = (unsigned __int8 *)*v287;
                    if (!*v287) {
                      goto LABEL_528;
                    }
                    int v338 = *v288;
                    if ((v338 - 4) > 0x1E)
                    {
                      if ((v338 - 3) >= 0xFFFFFFFE) {
                        uint64_t v358 = *v287;
                      }
                      else {
                        uint64_t v358 = 0;
                      }
                      if ((v338 - 3) < 0xFFFFFFFE)
                      {
                        if (v338 == 3) {
                          *((void *)v288 + 1) = 0;
                        }
                        goto LABEL_528;
                      }
                      unint64_t v340 = (unint64_t)v358 + 8;
LABEL_626:
                      v594 = (void *)(v285 + 48);
                      sub_1CC5FA668(v340 + 16, &v594);
                    }
                    else if ((v288[1] & 0x7F) == 2 || *((_DWORD *)v288 + 3))
                    {
                      uint64_t v339 = *((void *)v288 + 2);
                      if ((v339 & 4) != 0)
                      {
                        unint64_t v340 = v339 & 0xFFFFFFFFFFFFFFF8;
                        if (v340) {
                          goto LABEL_626;
                        }
                      }
                    }
LABEL_528:
                    int v289 = (unsigned __int8 *)v579[0];
                    void *v287 = v579[0];
                    if (v289)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)v579, v289, v285 + 48);
                      v579[0] = 0;
                    }
                    goto LABEL_530;
                  }
                  if (!v579[0]) {
                    goto LABEL_530;
                  }
                  int v360 = *(unsigned __int8 *)v579[0];
                  if ((v360 - 4) > 0x1E)
                  {
                    if ((v360 - 3) >= 0xFFFFFFFE) {
                      uint64_t v363 = v579[0];
                    }
                    else {
                      uint64_t v363 = 0;
                    }
                    if ((v360 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v362 = (unint64_t)v363 + 8;
LABEL_647:
                      v594 = v579;
                      sub_1CC5FA668(v362 + 16, &v594);
                      goto LABEL_530;
                    }
                    if (v360 == 3) {
                      *((void *)v579[0] + 1) = 0;
                    }
                  }
                  else if ((*((unsigned char *)v579[0] + 1) & 0x7F) == 2 || *((_DWORD *)v579[0] + 3))
                  {
                    uint64_t v361 = *((void *)v579[0] + 2);
                    if ((v361 & 4) != 0)
                    {
                      unint64_t v362 = v361 & 0xFFFFFFFFFFFFFFF8;
                      if (v362) {
                        goto LABEL_647;
                      }
                    }
                  }
LABEL_530:
                  if (!v591) {
                    goto LABEL_534;
                  }
                  int v290 = *(unsigned __int8 *)v591;
                  if ((v290 - 4) > 0x1E)
                  {
                    if ((v290 - 3) >= 0xFFFFFFFE) {
                      uint64_t v313 = v591;
                    }
                    else {
                      uint64_t v313 = 0;
                    }
                    if ((v290 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v314 = (unint64_t)v313 + 8;
LABEL_572:
                      v594 = &v591;
                      sub_1CC5FA668(v314 + 16, &v594);
                      goto LABEL_534;
                    }
                    if (v290 == 3) {
                      *((void *)v591 + 1) = 0;
                    }
                  }
                  else if ((*((unsigned char *)v591 + 1) & 0x7F) == 2 || *((_DWORD *)v591 + 3))
                  {
                    uint64_t v359 = *((void *)v591 + 2);
                    if ((v359 & 4) != 0)
                    {
                      unint64_t v314 = v359 & 0xFFFFFFFFFFFFFFF8;
                      if (v314) {
                        goto LABEL_572;
                      }
                    }
                  }
LABEL_534:
                  if ((*(unsigned char *)(v285 + 23) & 0x20) == 0) {
                    goto LABEL_549;
                  }
                  uint64_t v291 = ***(void ***)v285;
                  v594 = (void *)v285;
                  int v292 = *(_DWORD *)(v291 + 2496);
                  if (v292)
                  {
                    uint64_t v293 = *(void *)(v291 + 2480);
                    int v294 = v292 - 1;
                    unsigned int v295 = v294 & ((v285 >> 4) ^ (v285 >> 9));
                    unint64_t v296 = (void *)(v293 + 40 * v295);
                    uint64_t v297 = *v296;
                    if (*v296 == v285) {
                      goto LABEL_545;
                    }
                    unint64_t v298 = 0;
                    int v299 = 1;
                    while (v297 != -4096)
                    {
                      if (v298) {
                        BOOL v300 = 0;
                      }
                      else {
                        BOOL v300 = v297 == -8192;
                      }
                      if (v300) {
                        unint64_t v298 = v296;
                      }
                      unsigned int v301 = v295 + v299++;
                      unsigned int v295 = v301 & v294;
                      unint64_t v296 = (void *)(v293 + 40 * v295);
                      uint64_t v297 = *v296;
                      if (*v296 == v285) {
                        goto LABEL_545;
                      }
                    }
                    if (v298) {
                      uint64_t v341 = v298;
                    }
                    else {
                      uint64_t v341 = v296;
                    }
                  }
                  else
                  {
                    uint64_t v341 = 0;
                  }
                  unint64_t v296 = sub_1CC609054(v291 + 2480, (uint64_t)&v594, (uint64_t *)&v594, v341);
                  uint64_t v342 = v594;
                  v296[4] = 0;
                  v296[3] = 0;
                  void *v296 = v342;
                  v296[1] = v296 + 3;
                  v296[2] = 0x100000000;
LABEL_545:
                  uint64_t v302 = *((unsigned int *)v296 + 4);
                  if (v302)
                  {
                    int v303 = (void *)(v296[1] + 8);
                    uint64_t v304 = 16 * v302;
                    while (*((_DWORD *)v303 - 2) != 18)
                    {
                      v303 += 2;
                      v304 -= 16;
                      if (!v304) {
                        goto LABEL_549;
                      }
                    }
                    uint64_t v308 = *v303;
                    if (*v303)
                    {
                      v594 = &v596;
                      int v595 = (void *)0x400000000;
                      unint64_t v309 = *(unsigned int *)(v308 + 8);
                      if (v309 < 2)
                      {
                        unsigned int v310 = 0;
                        unsigned int v333 = &v596;
                      }
                      else
                      {
                        unsigned int v310 = 0;
                        for (unint64_t n = 1; n < v309; ++n)
                        {
                          uint64_t Impl = *(void *)(v308 - 8 * v309 + 8 * n);
                          if (Impl && *(unsigned char *)Impl == 5)
                          {
                            uint64_t Impl = llvm::DILocation::getImpl(v278, *(_DWORD *)(Impl + 4), *(unsigned __int16 *)(Impl + 2), v276, 0, 0, 0, 1);
                            unsigned int v310 = v595;
                          }
                          if (v310 >= HIDWORD(v595)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v594 + v310) = Impl;
                          unsigned int v310 = v595 + 1;
                          LODWORD(v595) = v595 + 1;
                          unint64_t v309 = *(unsigned int *)(v308 + 8);
                        }
                        unsigned int v333 = (uint64_t *)v594;
                      }
                      uint64_t v334 = llvm::MDTuple::getImpl((uint64_t)v278, v333, v310, 0, 1);
                      llvm::Instruction::setMetadata((llvm::Instruction *)v285, 18, v334);
                      if (v594 != &v596) {
                        free(v594);
                      }
                    }
                  }
LABEL_549:
                  int v305 = sub_1CC5817B4(v285);
                  if (v305) {
                    uint64_t v306 = v285;
                  }
                  else {
                    uint64_t v306 = 0;
                  }
                  if (m && v305)
                  {
                    uint64_t v315 = *(void *)(*(void *)(v306 - 32 * (*(_DWORD *)(v306 + 20) & 0x7FFFFFF) + 32) + 24);
                    v594 = (void *)v315;
                    __int16 v316 = sub_1CD645138(&v582, &v594);
                    uint64_t v317 = (unsigned __int8 *)v316[1];
                    if (!v317)
                    {
                      int v318 = v316;
                      unsigned int v319 = (void *)(v315 - 8 * *(unsigned int *)(v315 + 8));
                      uint64_t v320 = v319[1];
                      if (v320)
                      {
                        uint64_t v343 = *(void **)(v320 + 8);
                        size_t v344 = *v343;
                        int v322 = (unsigned __int8 *)(v343 + 3);
                        size_t v321 = v344;
                      }
                      else
                      {
                        size_t v321 = 0;
                        int v322 = 0;
                      }
                      uint64_t v317 = sub_1CC582A74((uint64_t *)v571, (uint64_t)&v578, (unsigned char *)v276, v322, v321, 0, v319[2], *(_DWORD *)(v315 + 24), v319[3], 0, 0, *(_DWORD *)(v315 + 28), 0);
                      v318[1] = v317;
                    }
                    sub_1CD6450E8(v306, (uint64_t)v317);
                  }
                  BOOL v307 = sub_1CC58180C(v285);
                  if (m && v307)
                  {
                    BOOL v323 = *(unsigned int **)(*(void *)(v285 - 32 * (*(_DWORD *)(v285 + 20) & 0x7FFFFFF)) + 24);
                    v594 = v323;
                    unsigned int v324 = sub_1CD645138(&v582, &v594);
                    int v325 = (unsigned __int8 *)v324[1];
                    if (!v325)
                    {
                      uint64_t v326 = v324;
                      uint64_t v327 = &v323[-2 * v323[2]];
                      uint64_t v328 = *((void *)v327 + 1);
                      if (v328)
                      {
                        uint64_t v329 = *(void *)(v328 + 8);
                        unsigned int v330 = *(void **)v329;
                        uint64_t v331 = *((void *)v327 + 2);
                        int v332 = v323[6];
                        if (*(void *)v329) {
                          unsigned int v330 = llvm::MDString::get(v278, (unsigned __int8 *)(v329 + 24), (size_t)v330);
                        }
                      }
                      else
                      {
                        unsigned int v330 = 0;
                        uint64_t v331 = *((void *)v327 + 2);
                        int v332 = v323[6];
                      }
                      int v325 = (unsigned __int8 *)llvm::DILabel::getImpl(v278, v276, (uint64_t)v330, v331, v332, 0, 1);
                      v326[1] = v325;
                    }
                    uint64_t v345 = llvm::MetadataAsValue::get((uint64_t)v278, v325);
                    uint64_t v346 = *(_DWORD *)(v285 + 20) & 0x7FFFFFF;
                    uint64_t v347 = -v346;
                    BOOL v348 = (uint64_t *)(v285 - 32 * v346);
                    if (*v348)
                    {
                      uint64_t v349 = v285 + 32 * v347;
                      unsigned int v351 = *(void **)(v349 + 16);
                      uint64_t v350 = (void *)(v349 + 16);
                      *unsigned int v351 = *(v350 - 1);
                      uint64_t v352 = *(v350 - 1);
                      if (v352) {
                        *(void *)(v352 + 16) = *v350;
                      }
                    }
                    uint64_t *v348 = v345;
                    if (v345)
                    {
                      uint64_t v355 = *(void *)(v345 + 8);
                      uint64_t v353 = (uint64_t **)(v345 + 8);
                      uint64_t v354 = v355;
                      uint64_t v356 = v285 + 32 * v347;
                      *(void *)(v356 + 8) = v355;
                      if (v355) {
                        *(void *)(v354 + 16) = v356 + 8;
                      }
                      *(void *)(v356 + 16) = v353;
                      *uint64_t v353 = v348;
                    }
                  }
                }
              }
              if ((v582 & 1) == 0) {
                MEMORY[0x1D25D9CD0](v583, 8);
              }
              sub_1CC2DBB1C((uint64_t)&__p);
            }
          }
LABEL_654:
          uint64_t v54 = v542;
          uint64_t v364 = *(void *)(v542 + 336);
          if (!v568)
          {
LABEL_847:
            uint64_t v479 = v364 + 72;
            uint64_t v480 = *(void *)(v364 + 80);
            BOOL v40 = v480 == v364 + 72;
            uint64_t v23 = v538;
            if (!v40)
            {
              while (1)
              {
                uint64_t v481 = v480 - 24;
                if (!v480) {
                  uint64_t v481 = 0;
                }
                uint64_t v482 = v481 + 40;
                uint64_t v483 = *(void *)(v481 + 48);
                if (v483 != v482) {
                  break;
                }
                uint64_t v480 = *(void *)(v480 + 8);
                if (v480 == v479) {
                  goto LABEL_877;
                }
              }
              while (1)
              {
                uint64_t v484 = v483 ? v483 - 24 : 0;
                if (*(unsigned char *)(v484 + 16) == 84)
                {
                  uint64_t v485 = *(void *)(v484 - 32);
                  if (!v485
                    || *(unsigned char *)(v485 + 16)
                    || *(void *)(v485 + 24) != *(void *)(v484 + 72)
                    || (*(unsigned char *)(v485 + 33) & 0x20) == 0)
                  {
                    int v486 = (*(unsigned __int16 *)(v485 + 18) >> 4) & 0x3FF;
                    if (!v486) {
                      break;
                    }
                    if (v486 == 255 || v486 == 8) {
                      break;
                    }
                  }
                }
                uint64_t v483 = *(void *)(v483 + 8);
                uint64_t v488 = v480 - 24;
                if (!v480) {
                  uint64_t v488 = 0;
                }
                uint64_t v489 = v488 + 40;
                while (v483 == v489)
                {
                  uint64_t v480 = *(void *)(v480 + 8);
                  if (v480 == v479) {
                    goto LABEL_877;
                  }
                  uint64_t v490 = v480 - 24;
                  if (!v480) {
                    uint64_t v490 = 0;
                  }
                  uint64_t v489 = v490 + 40;
                  uint64_t v483 = *(void *)(v490 + 48);
                }
                if (v480 == v479) {
                  goto LABEL_877;
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 368))(v55, 1);
            }
LABEL_877:
            if (v564 != v566) {
              free(v564);
            }
            goto LABEL_879;
          }
          unsigned int v365 = *(uint64_t ***)(v364 + 40);
          __p = &v572;
          uint64_t v571 = (void *)0x1000000000;
          uint64_t v366 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 336))(v55);
          uint64_t v367 = (*(uint64_t (**)(uint64_t))(*(void *)v366 + 8))(v366);
          int v368 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v366 + 56))(v366, v367);
          unsigned int v374 = ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v366 + 48))(v366, v367) >> 1) * v368;
          v612 = v615;
          int v614 = 6;
          if (v374 + 63 >= 0x1C0)
          {
            unsigned int v613 = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v374 + 63 >= 0x40) {
            bzero(v615, 8 * ((v374 + 63) >> 6));
          }
          uint64_t v375 = (llvm::DataLayout *)(v365 + 34);
          unsigned int v613 = (v374 + 63) >> 6;
          unsigned int v616 = v374;
          v376 = *v365;
          v594 = &v596;
          int v595 = (void *)0x200000000;
          uint64_t v601 = v376;
          v602 = &v610;
          BOOL v603 = &v611;
          uint64_t v604 = 0;
          int v605 = 0;
          __int16 v606 = 512;
          char v607 = 7;
          uint64_t v599 = 0;
          uint64_t v600 = 0;
          uint64_t v608 = 0;
          uint64_t v609 = 0;
          v610 = &unk_1F2616E88;
          uint64_t v611 = &unk_1F2617008;
          int v591 = v593;
          uint64_t v592 = 0x800000000;
          if (v568)
          {
            int v377 = (llvm::GlobalValue **)v567;
            uint64_t v378 = (llvm::GlobalValue **)((char *)v567 + 8 * v568);
            while (1)
            {
              uint64_t v379 = *v377;
              v582 = &v584;
              uint64_t v583 = 0x800000000;
              uint64_t v380 = *((void *)v379 + 1);
              if (v380) {
                break;
              }
LABEL_700:
              if (v582 != &v584) {
                free(v582);
              }
              if (++v377 == v378)
              {
                unsigned int v409 = v592;
                while (v409)
                {
                  uint64_t v410 = *((void *)v591 + --v409);
                  LODWORD(v592) = v409;
                  if (v410) {
                    BOOL v411 = *(unsigned __int8 *)(v410 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v411 = 0;
                  }
                  if (v411)
                  {
                    if (*(void *)(*(void *)(v410 + 40) + 56) == v364) {
                      llvm::report_fatal_error((llvm *)"Unsupported instruction in uniform function", (const llvm::Twine *)1);
                    }
                  }
                  else
                  {
                    for (iuint64_t i = *(void *)(v410 + 8); ii; iuint64_t i = *(void *)(ii + 8))
                    {
                      if (v409 >= HIDWORD(v592)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v591 + v409) = *(void *)(ii + 24);
                      unsigned int v409 = v592 + 1;
                      LODWORD(v592) = v592 + 1;
                    }
                  }
                }
                goto LABEL_716;
              }
            }
            unsigned int v381 = 0;
            do
            {
              if (v381 >= HIDWORD(v583)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v382 = (char *)v582 + 16 * v381;
              *(void *)unsigned int v382 = *(void *)(v380 + 24);
              *((_DWORD *)v382 + 2) = 0;
              LODWORD(v583) = ++v381;
              uint64_t v380 = *(void *)(v380 + 8);
            }
            while (v380);
            while (1)
            {
              while (1)
              {
                if (!v381) {
                  goto LABEL_700;
                }
                v383 = (char *)v582 + 16 * v381;
                uint64_t v385 = *((void *)v383 - 2);
                uint64_t v384 = *((void *)v383 - 1);
                LODWORD(v583) = v381 - 1;
                unsigned int v386 = *(unsigned __int8 *)(v385 + 16);
                if (v385 && v386 >= 0x1C) {
                  break;
                }
                if (v385) {
                  BOOL v388 = v386 == 5;
                }
                else {
                  BOOL v388 = 0;
                }
                if (!v388)
                {
LABEL_688:
                  if (v592 >= (unint64_t)HIDWORD(v592)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v591 + v592) = v385;
                  LODWORD(v592) = v592 + 1;
                  goto LABEL_690;
                }
                AsInstructiounint64_t n = (void (**)(void))llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v385, 0);
                unint64_t v395 = sub_1CC85697C((uint64_t)AsInstruction, v375, v390, v391, v392, v393, v394);
                llvm::Value::deleteValue(AsInstruction, v396);
LABEL_687:
                if (!HIDWORD(v395)) {
                  goto LABEL_688;
                }
                uint64_t v406 = *(void *)(v385 + 8);
                if (!v406) {
                  goto LABEL_690;
                }
                int v407 = v395 + v384;
                unsigned int v381 = v583;
                do
                {
                  if (v381 >= HIDWORD(v583)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v408 = (char *)v582 + 16 * v381;
                  *(void *)uint64_t v408 = *(void *)(v406 + 24);
                  *((_DWORD *)v408 + 2) = v407;
                  LODWORD(v583) = ++v381;
                  uint64_t v406 = *(void *)(v406 + 8);
                }
                while (v406);
              }
              if (*(void *)(*(void *)(v385 + 40) + 56) != v364) {
                goto LABEL_690;
              }
              if (v386 != 60)
              {
                unint64_t v395 = sub_1CC85697C(v385, v375, v369, v370, v371, v372, v373);
                goto LABEL_687;
              }
              unsigned int v397 = sub_1CD1117B0(v379, (int)v384, v55, 0);
              if (v571 >= (unint64_t)HIDWORD(v571)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v398 = v397;
              unsigned int v399 = (uint64_t *)((char *)__p + 16 * v571);
              *unsigned int v399 = v385;
              v399[1] = v397;
              LODWORD(v571) = v571 + 1;
              uint64_t v401 = sub_1CB83544C((uint64_t)v375, *(void *)v385);
              if (v400 == 1) {
              unsigned int v402 = v398 >> 1;
              }
              unsigned int v403 = v398 + ((unint64_t)(v401 + 7) >> 3) + 1;
              if (v398 >> 1 < v403 >> 1)
              {
                unsigned int v404 = v403 >> 1;
                BOOL v405 = v612;
                do
                {
                  *(void *)&v405[8 * (v402 >> 6)] |= 1 << v402;
                  ++v402;
                }
                while (v404 != v402);
              }
LABEL_690:
              unsigned int v381 = v583;
            }
          }
LABEL_716:
          if (!v571)
          {
LABEL_838:
            if (v591 != v593) {
              free(v591);
            }
            uint64_t v54 = v542;
            if (v594 != &v596) {
              free(v594);
            }
            if (v612 != v615) {
              free(v612);
            }
            if (__p != &v572) {
              free(__p);
            }
            uint64_t v364 = *(void *)(v542 + 336);
            goto LABEL_847;
          }
          v558[1] = 0;
          v558[0] = 0;
          int v559 = 0;
          if (!v616) {
            goto LABEL_726;
          }
          uint64_t v413 = 0;
          uint64_t v414 = v612;
          uint64_t v415 = (v616 - 1) & 0xFFFFFFC0;
          while (1)
          {
            uint64_t v417 = *(void *)v414;
            v414 += 8;
            uint64_t v416 = v417;
            unint64_t v418 = v415 + v413 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v616;
            unint64_t v419 = v418 & v416;
            if (v419) {
              break;
            }
            v413 -= 64;
            if (v415 + v413 == -64) {
              goto LABEL_726;
            }
          }
          unint64_t v420 = __clz(__rbit64(v419));
          if (v420 + 1 == v413)
          {
LABEL_726:
            LOWORD(v421) = 0;
LABEL_727:
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDC988, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCDC988))
            {
              __cxa_guard_release(&qword_1EBCDC988);
            }
            uint64_t v422 = 0;
            uint64_t v423 = *(void *)(v364 + 80);
            if (v423) {
              uint64_t v424 = v423 - 24;
            }
            else {
              uint64_t v424 = 0;
            }
            uint64_t v425 = *(void *)(v424 + 48);
            if (v425) {
              uint64_t v426 = v425 - 24;
            }
            else {
              uint64_t v426 = 0;
            }
            uint64_t v599 = *(void *)(v426 + 40);
            uint64_t v600 = v426 + 24;
            uint64_t v427 = *(void **)(v426 + 48);
            v579[0] = v427;
            if (v427)
            {
              llvm::MetadataTracking::track((uint64_t)v579, (unsigned __int8 *)v427, 2);
              uint64_t v422 = v579[0];
            }
            sub_1CB8461A4((uint64_t)&v594, 0, (uint64_t)v422);
            if (!v579[0])
            {
LABEL_737:
              uint64_t v428 = *(void *)(v364 + 80);
              if (v428) {
                uint64_t v429 = v428 - 24;
              }
              else {
                uint64_t v429 = 0;
              }
              int v430 = *(uint64_t ***)(*(void *)(v429 + 56) + 40);
              llvm::Intrinsic::getType(*v430, 2755, 0, 0);
              Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v430, 2755, 0, 0);
              llvm::Module::getOrInsertFunction((uint64_t)v430, "llvm.agx3.gather.buffer.stk", (const char *)0x1B, Type, 0);
              v434 = (uint64_t **)v432;
              if (v432) {
                v435 = *(uint64_t ***)(v432 + 24);
              }
              else {
                v435 = 0;
              }
              uint64_t v436 = (unsigned __int16)v421;
              uint64_t v437 = *(llvm::ConstantInt **)(*v601 + 1936);
              unsigned int v438 = *(_DWORD *)(*v601 + 1944);
              LODWORD(v583) = v438 >> 8;
              if (v438 >> 8 > 0x40) {
                operator new[]();
              }
              if (v438 <= 0xFF) {
                unint64_t v439 = 0;
              }
              else {
                unint64_t v439 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v438) + 63);
              }
              v582 = (void *)(v439 & v436);
              unsigned int v440 = llvm::ConstantInt::get(v437, (llvm::LLVMContext *)&v582, v433);
              if (v583 >= 0x41 && v582) {
                MEMORY[0x1D25D9CB0](v582, 0x1000C8000313F17);
              }
              v579[0] = v440;
              LOWORD(v586) = 257;
              int v441 = (llvm::Value *)sub_1CB845BAC((uint64_t *)&v594, v435, v434, (uint64_t *)v579, 1, (uint64_t)&v582, 0);
              v582 = "gather_buffer_stk";
              LOWORD(v586) = 259;
              llvm::Value::setNameImpl(v441, (const char **)&v582);
              if (!v441 || *((unsigned char *)v441 + 16)) {
                goto LABEL_750;
              }
              if ((*((unsigned char *)v441 + 23) & 0x10) == 0) {
                goto LABEL_959;
              }
              uint64_t v523 = ***(void ***)v441;
              uint64_t v524 = *(void *)(v523 + 152);
              uint64_t v525 = *(unsigned int *)(v523 + 168);
              if (v525)
              {
                LODWORD(v526) = (v525 - 1) & ((v441 >> 4) ^ (v441 >> 9));
                unsigned int v527 = (llvm::Value **)(v524 + 16 * v526);
                uint64_t v528 = *v527;
                if (*v527 == v441)
                {
LABEL_952:
                  unsigned int v531 = v527[1];
                  unint64_t v534 = *(void *)v531;
                  v532 = (char *)v531 + 16;
                  unint64_t v533 = v534;
                  if (v534 >= 5 && *(_DWORD *)v532 == *(_DWORD *)"llvm." && v532[4] == aLlvm_1[4])
                  {
                    *((_DWORD *)v441 + 8) |= 0x2000u;
                    int v536 = llvm::Function::lookupIntrinsicID(v532, v533);
LABEL_960:
                    *((_DWORD *)v441 + 9) = v536;
LABEL_750:
                    unsigned int v546 = v441;
                    if (v571)
                    {
                      int v442 = *(uint64_t **)__p;
                      unsigned int v443 = *((_DWORD *)__p + 2);
                      sub_1CB83544C((uint64_t)v375, **(void **)__p);
                      if (v444 == 1) {
                      unsigned int v557 = v443 >> 1;
                      }
                      int v445 = sub_1CB8387D8((uint64_t)v558, &v557)[1];
                      unint64_t v446 = v557;
                      v579[1] = 0;
                      v579[0] = 0;
                      uint64_t v580 = 0;
                      LODWORD(v583) = 0;
                      char v587 = 0;
                      uint64_t v588 = 0;
                      v582 = &unk_1F2646F30;
                      v590 = v579;
                      int v589 = 0;
                      unsigned int v585 = 0;
                      unsigned int v586 = 0;
                      v584 = 0;
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v582, 117);
                      sub_1CD098D14((llvm::raw_ostream *)&v582, v446 >> 1, 0, 0, 0);
                      uint64_t v447 = v586;
                      if (v446)
                      {
                        if (v586 < (char *)v585)
                        {
                          ++v586;
                          char v448 = 104;
                          goto LABEL_758;
                        }
                        char v449 = 104;
                      }
                      else
                      {
                        if (v586 < (char *)v585)
                        {
                          ++v586;
                          char v448 = 108;
LABEL_758:
                          *uint64_t v447 = v448;
                          goto LABEL_762;
                        }
                        char v449 = 108;
                      }
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v582, v449);
LABEL_762:
                      if (*((char *)v590 + 23) < 0)
                      {
                        sub_1CB8BDF7C((uint64_t)v555, *v590, (unint64_t)v590[1]);
                      }
                      else
                      {
                        long long v450 = *(_OWORD *)v590;
                        unsigned int v556 = v590[2];
                        *(_OWORD *)unsigned int v555 = v450;
                      }
                      v582 = &unk_1F2646B98;
                      if (v589 == 1 && v584) {
                        MEMORY[0x1D25D9CB0](v584, 0x1000C8077774924);
                      }
                      if (SHIBYTE(v580) < 0) {
                        operator delete(v579[0]);
                      }
                      sub_1CBF5385C((uint64_t)&v594, v442[5], (uint64_t)(v442 + 3));
                      uint64_t v451 = *v601;
                      if (SHIBYTE(v556) >= 0) {
                        size_t v452 = HIBYTE(v556) & 0x7F;
                      }
                      else {
                        size_t v452 = (size_t)v555[1];
                      }
                      sub_1CB907098((uint64_t)v579, v452 + 5);
                      if (v580 >= 0) {
                        uint64_t v453 = v579;
                      }
                      else {
                        uint64_t v453 = (void **)v579[0];
                      }
                      if (v452)
                      {
                        if (SHIBYTE(v556) >= 0) {
                          v454 = v555;
                        }
                        else {
                          v454 = (void **)v555[0];
                        }
                        memmove(v453, v454, v452);
                      }
                      strcpy((char *)v453 + v452, "_addr");
                      LOWORD(v586) = 260;
                      v582 = v579;
                      uint64_t v455 = (unsigned __int8 *)sub_1CB930CF4((uint64_t *)&v594, v451 + 1912, v546, v445 + (v443 & 1), (uint64_t)&v582);
                      if (SHIBYTE(v580) < 0) {
                        operator delete(v579[0]);
                      }
                      unint64_t v456 = llvm::PointerType::get((llvm::PointerType *)*v442, (llvm::Type *)(*(_DWORD *)(*(void *)v455 + 8) >> 8));
                      if (SHIBYTE(v556) >= 0) {
                        size_t v457 = HIBYTE(v556) & 0x7F;
                      }
                      else {
                        size_t v457 = (size_t)v555[1];
                      }
                      sub_1CB907098((uint64_t)v553, v457 + 11);
                      if (v554 >= 0) {
                        v458 = v553;
                      }
                      else {
                        v458 = (void **)v553[0];
                      }
                      if (v457)
                      {
                        if (SHIBYTE(v556) >= 0) {
                          int v459 = v555;
                        }
                        else {
                          int v459 = (void **)v555[0];
                        }
                        memmove(v458, v459, v457);
                      }
                      strcpy((char *)v458 + v457, "_typed_addr");
                      __int16 v581 = 260;
                      v579[0] = v553;
                      if (*(void *)v455 != v456)
                      {
                        if (v455[16] <= 0x14u)
                        {
                          uint64_t v460 = (*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v602
                                  + 28))(v602, 49, v455, v456);
                          uint64_t v455 = (unsigned __int8 *)v460;
                          if (v460)
                          {
                            if (*(unsigned __int8 *)(v460 + 16) >= 0x1Cu)
                            {
                              (*((void (**)(void **, uint64_t, void **, uint64_t, uint64_t))*v603 + 2))(v603, v460, v579, v599, v600);
                              if (v595)
                              {
                                uint64_t v477 = (llvm::MDNode **)v594;
                                v478 = (llvm::MDNode **)((char *)v594 + 16 * v595);
                                do
                                {
                                  llvm::Instruction::setMetadata((llvm::Instruction *)v455, *(_DWORD *)v477, v477[1]);
                                  v477 += 2;
                                }
                                while (v477 != v478);
                              }
                            }
                          }
                        }
                        else
                        {
                          LOWORD(v586) = 257;
                          uint64_t v455 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v455, v456, (const char **)&v582, 0);
                          (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v603 + 2))(v603, v455, v579, v599, v600);
                          if (v595)
                          {
                            uint64_t v475 = (llvm::MDNode **)v594;
                            v476 = (llvm::MDNode **)((char *)v594 + 16 * v595);
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v455, *(_DWORD *)v475, v475[1]);
                              v475 += 2;
                            }
                            while (v475 != v476);
                          }
                        }
                      }
                      if (v554 < 0) {
                        operator delete(v553[0]);
                      }
                      uint64_t v461 = (llvm::Type *)*v442;
                      if (SHIBYTE(v556) >= 0) {
                        size_t v462 = HIBYTE(v556) & 0x7F;
                      }
                      else {
                        size_t v462 = (size_t)v555[1];
                      }
                      sub_1CB907098((uint64_t)v553, v462 + 6);
                      if (v554 >= 0) {
                        BOOL v463 = v553;
                      }
                      else {
                        BOOL v463 = (void **)v553[0];
                      }
                      if (v462)
                      {
                        if (SHIBYTE(v556) >= 0) {
                          unsigned int v464 = v555;
                        }
                        else {
                          unsigned int v464 = (void **)v555[0];
                        }
                        memmove(v463, v464, v462);
                      }
                      strcpy((char *)v463 + v462, "_value");
                      __int16 v581 = 260;
                      v579[0] = v553;
                      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(v599 + 56) + 40) + 272), v461, 1);
                      unsigned int v466 = operator new(0x60uLL);
                      v466[13] = v466[13] & 0x38000000 | 1;
                      unsigned int v467 = (llvm::Instruction *)(v466 + 8);
                      *(void *)unsigned int v466 = 0;
                      *((void *)v466 + 1) = 0;
                      *((void *)v466 + 2) = 0;
                      *((void *)v466 + 3) = v466 + 8;
                      LOWORD(v586) = 257;
                      llvm::LoadInst::LoadInst((llvm::Value *)(v466 + 8), (uint64_t)v461, (uint64_t)v455, (const char **)&v582, 0, Alignment, 0);
                      (*((void (**)(void **, llvm::Instruction *, void **, uint64_t, uint64_t))*v603 + 2))(v603, v467, v579, v599, v600);
                      if (v595)
                      {
                        int v473 = (llvm::MDNode **)v594;
                        uint64_t v474 = (llvm::MDNode **)((char *)v594 + 16 * v595);
                        do
                        {
                          llvm::Instruction::setMetadata(v467, *(_DWORD *)v473, v473[1]);
                          v473 += 2;
                        }
                        while (v473 != v474);
                      }
                      if (v554 < 0) {
                        operator delete(v553[0]);
                      }
                      if (sub_1CC871168(v542 + 536, (uint64_t)v442))
                      {
                        v468 = *(uint64_t ***)(v542 + 800);
                        uint64_t v469 = *(unsigned int *)(v542 + 808);
                        int v470 = &v468[v469];
                        if (v469)
                        {
                          uint64_t v471 = 8 * v469;
                          do
                          {
                            if (*v468 == v442) {
                              goto LABEL_820;
                            }
                            ++v468;
                            v471 -= 8;
                          }
                          while (v471);
                          v468 = v470;
                        }
LABEL_820:
                        if (v470 == v468 + 1)
                        {
                          uint64_t v472 = v542;
                        }
                        else
                        {
                          memmove(v468, v468 + 1, (char *)v470 - (char *)(v468 + 1));
                          uint64_t v472 = v542;
                          LODWORD(v469) = *(_DWORD *)(v542 + 808);
                        }
                        *(_DWORD *)(v472 + 808) = v469 - 1;
                      }
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v442, v467, (llvm::Value *)1);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                    }
                    MEMORY[0x1D25D9CD0](v558[0], 4);
                    goto LABEL_838;
                  }
LABEL_959:
                  int v536 = 0;
                  *((_DWORD *)v441 + 8) &= ~0x2000u;
                  goto LABEL_960;
                }
                int v529 = 1;
                while (v528 != (llvm::Value *)-4096)
                {
                  int v530 = v526 + v529++;
                  uint64_t v526 = v530 & (v525 - 1);
                  uint64_t v528 = *(llvm::Value **)(v524 + 16 * v526);
                  if (v528 == v441)
                  {
                    unsigned int v527 = (llvm::Value **)(v524 + 16 * v526);
                    goto LABEL_952;
                  }
                }
              }
              unsigned int v527 = (llvm::Value **)(v524 + 16 * v525);
              goto LABEL_952;
            }
            int v519 = *(unsigned __int8 *)v579[0];
            if ((v519 - 4) > 0x1E)
            {
              if ((v519 - 3) >= 0xFFFFFFFE) {
                uint64_t v522 = v579[0];
              }
              else {
                uint64_t v522 = 0;
              }
              if ((v519 - 3) < 0xFFFFFFFE)
              {
                if (v519 == 3) {
                  *((void *)v579[0] + 1) = 0;
                }
                goto LABEL_737;
              }
              unint64_t v521 = (unint64_t)v522 + 8;
            }
            else
            {
              if ((*((unsigned char *)v579[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v579[0] + 3)) {
                goto LABEL_737;
              }
              uint64_t v520 = *((void *)v579[0] + 2);
              if ((v520 & 4) == 0) {
                goto LABEL_737;
              }
              unint64_t v521 = v520 & 0xFFFFFFFFFFFFFFF8;
              if (!v521) {
                goto LABEL_737;
              }
            }
            v582 = v579;
            sub_1CC5FA668(v521 + 16, &v582);
            goto LABEL_737;
          }
          int v421 = 0;
          uint64_t v491 = v420 - v413;
          while (1)
          {
            LODWORD(v582) = v491;
            if (!v559) {
              break;
            }
            unsigned int v492 = (v559 - 1) & (37 * v491);
            uint64_t v493 = (_DWORD *)(v558[0] + 8 * v492);
            int v494 = *v493;
            uint64_t v495 = v491;
            if (v491 != *v493)
            {
              __int16 v496 = 0;
              int v497 = 1;
              while (v494 != -1)
              {
                if (v496) {
                  BOOL v498 = 0;
                }
                else {
                  BOOL v498 = v494 == -2;
                }
                if (v498) {
                  __int16 v496 = v493;
                }
                unsigned int v499 = v492 + v497++;
                unsigned int v492 = v499 & (v559 - 1);
                uint64_t v493 = (_DWORD *)(v558[0] + 8 * v492);
                int v494 = *v493;
                if (v491 == *v493)
                {
                  uint64_t v495 = v491;
                  goto LABEL_902;
                }
              }
              if (v496) {
                int v500 = v496;
              }
              else {
                int v500 = v493;
              }
              goto LABEL_901;
            }
LABEL_902:
            (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 608))(v55, v495);
            v421 += 2;
            unsigned int v502 = v491 + 1;
            if (v491 + 1 != v616)
            {
              unsigned int v503 = v502 >> 6;
              unsigned int v504 = v616 - 1;
              if (v502 >> 6 <= (v616 - 1) >> 6)
              {
                uint64_t v505 = 0;
                uint64_t v506 = v504 >> 6;
                int v507 = v502 & 0x3F;
                BOOL v40 = v507 == 0;
                unint64_t v508 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v507;
                uint64_t v509 = v40 ? -1 : ~v508;
                unint64_t v510 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v504;
                int v511 = v503 << 6;
                uint64_t v512 = v506 - v503;
                uint64_t v513 = &v612[8 * v503];
                while (1)
                {
                  uint64_t v514 = v505 ? -1 : v509;
                  unint64_t v515 = v512 == v505 ? v510 : -1;
                  unint64_t v516 = v514 & v515 & *(void *)&v513[8 * v505];
                  if (v516) {
                    break;
                  }
                  v511 += 64;
                  if (v512 + 1 == ++v505) {
                    goto LABEL_727;
                  }
                }
                uint64_t v491 = __clz(__rbit64(v516)) + v511;
                if (v491 != -1) {
                  continue;
                }
              }
            }
            goto LABEL_727;
          }
          int v500 = 0;
LABEL_901:
          uint64_t v501 = sub_1CB83889C((uint64_t)v558, (uint64_t)&v582, &v582, v500);
          *uint64_t v501 = v582;
          v501[1] = v421;
          uint64_t v495 = v582;
          goto LABEL_902;
        }
        uint64_t v269 = 0;
        int v270 = 1;
        while (v268 != (uint64_t ***)-4096)
        {
          if (v269) {
            BOOL v271 = 0;
          }
          else {
            BOOL v271 = v268 == (uint64_t ***)-8192;
          }
          if (v271) {
            uint64_t v269 = v267;
          }
          unsigned int v272 = v266 + v270++;
          unsigned int v266 = v272 & v265;
          int v267 = (uint64_t ****)(v264 + 40 * v266);
          unsigned int v268 = *v267;
          if (*v267 == v253) {
            goto LABEL_502;
          }
        }
        if (v269) {
          char v517 = v269;
        }
        else {
          char v517 = v267;
        }
      }
      else
      {
        char v517 = 0;
      }
      int v267 = (uint64_t ****)sub_1CC609054(v262 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v517);
      uint64_t v518 = (uint64_t ***)__p;
      v267[4] = 0;
      v267[3] = 0;
      llvm::DominatorTree *v267 = v518;
      v267[1] = (uint64_t ***)(v267 + 3);
      v267[2] = (uint64_t ***)0x100000000;
      goto LABEL_502;
    }
    LOBYTE(v22) = 0;
LABEL_970:
    if ((v560 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v561, 8);
    }
    if ((v563[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v563[1], 8);
    }
  }
  return v22 & 1;
}

uint64_t sub_1CC85BD6C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC85BE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  unsigned int v6 = v5;
  int v137 = v7;
  uint64_t v132 = v8;
  uint64_t v140 = v9;
  uint64_t v139 = v10;
  uint64_t v12 = v11;
  uint64_t v13 = v4;
  uint64_t v259 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(v11 + 40);
  sub_1CD0FFA48(v11, (llvm::BinaryOperator *)1);
  __int16 v249 = 260;
  uint64_t v246 = v14 + 216;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v246);
  int v133 = v152;
  if (v151 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(*(void *)(v13 + 8) + 24) + 32))(*(void *)(*(void *)(v13 + 8) + 24), v13, &llvm::DominatorTreeWrapperPass::ID, v12);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v17 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(*(void *)(v13 + 8) + 24) + 32))(*(void *)(*(void *)(v13 + 8) + 24), v13, &llvm::PostDominatorTreeWrapperPass::ID, v12);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::PostDominatorTreeWrapperPass::ID);
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(*(void *)(v13 + 8) + 24) + 32))(*(void *)(*(void *)(v13 + 8) + 24), v13, &llvm::LoopInfoWrapperPass::ID, v12);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v246 = 1;
  for (uint64_t i = 8; i != 1672; i += 104)
    *(uint64_t *)((char *)&v246 + i) = -4096;
  uint64_t v250 = 1;
  for (uint64_t j = 1680; j != 3344; j += 104)
    *(uint64_t *)((char *)&v246 + j) = -4096;
  uint64_t v138 = v18 + 32;
  uint64_t v253 = v18 + 32;
  int v254 = v256;
  uint64_t v255 = 0xA00000000;
  uint64_t v257 = 1;
  for (uint64_t k = 3696; k != 3824; k += 16)
    *(uint64_t *)((char *)&v246 + k) = -4096;
  uint64_t v25 = (llvm::Loop *)(v16 + 32);
  uint64_t v26 = (llvm::DominatorTree *)(v20 + 32);
  unsigned int v135 = v6;
  if (*(unsigned char *)(v13 + 320))
  {
    if (*(_DWORD *)(v18 + 40) == 1)
    {
      uint64_t v27 = *(void *)(v18 + 104);
      if (v27)
      {
        if (*(_DWORD *)(v27 + 32) == 1) {
          sub_1CD10FEF8(v12);
        }
      }
    }
  }
  if (byte_1EBCDCA10)
  {
    uint64_t v28 = *(llvm ***)(v20 + 56);
    if (v28 != *(llvm ***)(v20 + 64))
    {
      int v29 = *v28;
      llvm::simplifyLoop(*v28, v25, v26, 0, 0, 0, 0, v21);
      llvm::formLCSSARecursively(v29, v25, v26, 0, v30);
    }
  }
  char v31 = sub_1CD109868((llvm::Module *)v14);
  uint64_t v32 = *(void *)(v12 + 40) + 216;
  __int16 v239 = 260;
  uint64_t v236 = v32;
  llvm::Triple::Triple((llvm::Triple *)__p, (const llvm::Twine *)&v236);
  int v33 = v152;
  if (v151 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v34 = *(unsigned __int16 *)(v12 + 18);
  uint64_t v142 = sub_1CC85D888;
  int v35 = (v34 >> 4) & 0x3FF;
  LOBYTE(v143) = 0;
  BOOL v37 = v35 == 101 || v35 == 108;
  BYTE1(v143) = *(unsigned char *)(v13 + 321);
  BYTE2(v143) = v31;
  HIBYTE(v143) = v37;
  *(void *)&long long v144 = 0;
  *((void *)&v144 + 1) = v13 + 472;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  int v147 = 0;
  sub_1CBFCBCC4((uint64_t)&v145, v13 + 1072);
  BOOL v148 = v33 == 29;
  uint64_t v38 = (char *)operator new(0x48uLL);
  int v39 = v142;
  *(void *)uint64_t v38 = &unk_1F261FD40;
  *((void *)v38 + 1) = v39;
  *((_DWORD *)v38 + 4) = v143;
  *(_OWORD *)(v38 + 24) = v144;
  *((void *)v38 + 5) = v145;
  *((void *)v38 + 6) = v146;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  *((_DWORD *)v38 + 14) = v147;
  int v147 = 0;
  v38[64] = v33 == 29;
  uint64_t v235 = v38;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)&v236, (llvm::Function *)v12, (uint64_t)v25, v138, (const llvm::DataLayout *)(v14 + 272), v139, (uint64_t)v234, 1, 0);
  BOOL v136 = v33 == 29;
  if (v235 == v234)
  {
    (*(void (**)(void *))(v234[0] + 32))(v234);
  }
  else if (v235)
  {
    (*(void (**)(void))(*v235 + 40))();
  }
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v41 = v12 + 72;
  for (uint64_t m = *(void *)(v12 + 80); m != v41; uint64_t m = *(void *)(m + 8))
  {
    uint64_t v43 = m - 24;
    if (!m) {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(void *)(v43 + 48);
    if (v44 != v43 + 40)
    {
      while (1)
      {
        if (v44) {
          uint64_t v50 = v44 - 24;
        }
        else {
          uint64_t v50 = 0;
        }
        if (*(unsigned char *)(v50 + 16) == 84)
        {
          uint64_t v51 = *(void *)(v50 - 32);
          if (v51)
          {
            if (!*(unsigned char *)(v51 + 16)
              && *(void *)(v51 + 24) == *(void *)(v50 + 72)
              && (*(unsigned char *)(v51 + 33) & 0x20) != 0)
            {
              int v52 = *(_DWORD *)(*(void *)(v44 - 56) + 36);
              if (sub_1CB859A14(v52))
              {
                llvm::SampleInfo::SampleInfo((uint64_t)__p, v52, 1);
                uint64_t v53 = v44 - 24 - 32 * (*(_DWORD *)(v44 - 4) & 0x7FFFFFF);
                uint64_t v46 = *(void *)(v53 + 32 * v154);
                if (v46) {
                  BOOL v54 = *(unsigned __int8 *)(v46 + 16) > 0x1Bu;
                }
                else {
                  BOOL v54 = 0;
                }
                if (!v54)
                {
                  uint64_t v46 = *(void *)(v53 + 32 * v153);
                  goto LABEL_57;
                }
                do
                {
                  uint64_t v55 = v240;
                  if (v241 == v240)
                  {
                    unsigned int v49 = v243;
                    uint64_t v48 = &v241[v243];
                    if (v243)
                    {
                      uint64_t v56 = 0;
                      while (v241[v56] != v46)
                      {
                        if (v243 == ++v56) {
                          goto LABEL_77;
                        }
                      }
                      uint64_t v48 = &v241[v56];
                    }
LABEL_77:
                    uint64_t v55 = v241;
                  }
                  else
                  {
                    unsigned int v57 = v242 - 1;
                    unsigned int v58 = (v242 - 1) & ((v46 >> 4) ^ (v46 >> 9));
                    uint64_t v48 = &v241[v58];
                    uint64_t v59 = *v48;
                    if (*v48 == -1)
                    {
                      unsigned int v47 = 0;
LABEL_38:
                      if (v47) {
                        uint64_t v48 = v47;
                      }
                      unsigned int v49 = v243;
                      if (*v48 != v46) {
                        uint64_t v48 = &v241[v242];
                      }
                    }
                    else
                    {
                      unsigned int v47 = 0;
                      int v60 = 1;
                      while (v59 != v46)
                      {
                        if (v47) {
                          BOOL v61 = 0;
                        }
                        else {
                          BOOL v61 = v59 == -2;
                        }
                        if (v61) {
                          unsigned int v47 = v48;
                        }
                        unsigned int v62 = v58 + v60++;
                        unsigned int v58 = v62 & v57;
                        uint64_t v48 = &v241[v62 & v57];
                        uint64_t v59 = *v48;
                        if (*v48 == -1) {
                          goto LABEL_38;
                        }
                      }
                      unsigned int v49 = v243;
                    }
                  }
                  if (v241 == v55) {
                    unsigned int v63 = v49;
                  }
                  else {
                    unsigned int v63 = v242;
                  }
                  if (v48 != &v241[v63]) {
                    break;
                  }
                  uint64_t Impl = llvm::MDTuple::getImpl(**(void **)v50, 0, 0, 0, 1);
                  if (Impl || *(void *)(v46 + 48) || (*(unsigned char *)(v46 + 23) & 0x20) != 0)
                  {
                    int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v46, "agx.uniform", 0xBuLL);
                    llvm::Instruction::setMetadata((llvm::Instruction *)v46, MDKindID, Impl);
                  }
                  if (*(unsigned __int8 *)(v46 + 16) - 66 > 0xC) {
                    break;
                  }
                  int v66 = *(_DWORD *)(v46 + 20);
                  uint64_t v45 = (v66 & 0x40000000) != 0 ? *(uint64_t **)(v46 - 8) : (uint64_t *)(v46 - 32 * (v66 & 0x7FFFFFF));
                  uint64_t v46 = *v45;
LABEL_57:
                  ;
                }
                while (*(unsigned __int8 *)(v46 + 16) > 0x1Bu);
              }
            }
          }
        }
        uint64_t v44 = *(void *)(v44 + 8);
        uint64_t v67 = m - 24;
        if (!m) {
          uint64_t v67 = 0;
        }
        if (v44 == v67 + 40) {
          break;
        }
LABEL_96:
        if (m == v41) {
          goto LABEL_97;
        }
      }
      while (1)
      {
        uint64_t m = *(void *)(m + 8);
        if (m == v41) {
          goto LABEL_97;
        }
        uint64_t v68 = m - 24;
        if (!m) {
          uint64_t v68 = 0;
        }
        uint64_t v44 = *(void *)(v68 + 48);
        if (v44 != v68 + 40) {
          goto LABEL_96;
        }
      }
    }
  }
LABEL_97:
  uint64_t v69 = v135[1];
  if (v69 == *v135) {
    unint64_t v70 = (unsigned int *)v135 + 5;
  }
  else {
    unint64_t v70 = (unsigned int *)(v135 + 2);
  }
  uint64_t v71 = *v70;
  if (v71)
  {
    uint64_t v72 = 8 * v71;
    unint64_t v73 = (unint64_t *)v135[1];
    while (*v73 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v73;
      v72 -= 8;
      if (!v72) {
        goto LABEL_152;
      }
    }
  }
  else
  {
    unint64_t v73 = (unint64_t *)v135[1];
  }
  uint64_t v74 = (unint64_t *)(v69 + 8 * v71);
  if (v73 != v74)
  {
    unint64_t v75 = *v73;
LABEL_108:
    if (v237 >= (unint64_t)v238) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(v236 + 8 * v237++) = v75;
    uint64_t v76 = v241;
    uint64_t v77 = v243;
    if (v241 == v240)
    {
      if (v243)
      {
        uint64_t v78 = 0;
        uint64_t v79 = 8 * v243;
        uint64_t v80 = v241;
        while (*v80 != v75)
        {
          if (*v80 == -2) {
            uint64_t v78 = v80;
          }
          ++v80;
          v79 -= 8;
          if (!v79)
          {
            if (!v78) {
              goto LABEL_117;
            }
            *uint64_t v78 = v75;
            --v244;
            goto LABEL_141;
          }
        }
        goto LABEL_141;
      }
LABEL_117:
      unsigned int v81 = v242;
      if (v243 < v242)
      {
        ++v243;
        v241[v77] = v75;
LABEL_141:
        llvm::DivergenceTracker::propagateDivergence((unsigned int *)&v236, (uint64_t)&v236);
        unsigned int v91 = v73 + 1;
        while (v91 != v74)
        {
          unint64_t v92 = *v91++;
          unint64_t v75 = v92;
          if (v92 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v73 = v91 - 1;
            goto LABEL_108;
          }
        }
        goto LABEL_152;
      }
    }
    else
    {
      unsigned int v81 = v242;
    }
    if (3 * v81 <= 4 * (v243 - v244))
    {
      if (v81 >= 0x40) {
        v81 *= 2;
      }
      else {
        unsigned int v81 = 128;
      }
    }
    else if (v81 - v243 >= v81 >> 3)
    {
      goto LABEL_122;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v240, v81);
    unsigned int v81 = v242;
    uint64_t v76 = v241;
LABEL_122:
    unsigned int v82 = v81 - 1;
    unsigned int v83 = (v81 - 1) & ((v75 >> 4) ^ (v75 >> 9));
    uint64_t v84 = &v76[v83];
    unint64_t v85 = *v84;
    if (*v84 == -1)
    {
      unsigned int v86 = 0;
LABEL_134:
      if (v86) {
        BOOL v90 = v86;
      }
      else {
        BOOL v90 = v84;
      }
      if (*v90 != v75)
      {
        if (*v90 == -2) {
          --v244;
        }
        else {
          ++v243;
        }
        unint64_t *v90 = v75;
      }
    }
    else
    {
      unsigned int v86 = 0;
      int v87 = 1;
      while (v85 != v75)
      {
        if (v86) {
          BOOL v88 = 0;
        }
        else {
          BOOL v88 = v85 == -2;
        }
        if (v88) {
          unsigned int v86 = v84;
        }
        unsigned int v89 = v83 + v87++;
        unsigned int v83 = v89 & v82;
        uint64_t v84 = &v76[v89 & v82];
        unint64_t v85 = *v84;
        if (*v84 == -1) {
          goto LABEL_134;
        }
      }
    }
    goto LABEL_141;
  }
LABEL_152:
  uint64_t v93 = *(void *)(v13 + 312);
  if (v93) {
    char v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v93 + 48))(v93, v12);
  }
  else {
    char v94 = 0;
  }
  v40.i32[0] = *(_DWORD *)(v13 + 321);
  int16x8_t v134 = (int16x8_t)vmovl_u8(v40);
  char v95 = *(unsigned char *)(v13 + 325);
  char v96 = *(unsigned char *)(v13 + 328);
  __p[0] = v150;
  __p[1] = (void *)0x2000000000;
  uint64_t v155 = 1;
  uint64_t v97 = 99;
  int64x2_t v98 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v97] = v98;
    v97 += 2;
  }
  while (v97 != 131);
  unsigned int v157 = v159;
  uint64_t v158 = 0x2000000000;
  uint64_t v160 = 1;
  uint64_t v99 = 166;
  int64x2_t v100 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v99] = v100;
    v99 += 2;
  }
  while (v99 != 198);
  unsigned int v162 = v164;
  uint64_t v163 = 0x2000000000;
  int v165 = v169;
  int v166 = v169;
  uint64_t v167 = 32;
  int v168 = 0;
  long long v170 = 0u;
  int v171 = 0;
  long long v172 = 0u;
  unsigned int v173 = 0;
  int v101 = (*(uint64_t (**)(void))(*(void *)v140 + 456))();
  long long v174 = 0u;
  int v175 = 0;
  int v176 = v101;
  uint64_t v177 = v181;
  char v178 = v181;
  uint64_t v179 = 16;
  int v180 = 0;
  uint64_t v182 = 1;
  uint64_t v102 = 299;
  int64x2_t v103 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v102] = v103;
    v102 += 2;
  }
  while (v102 != 315);
  uint64_t v184 = v186;
  uint64_t v185 = 0x1000000000;
  uint64_t v187 = 1;
  uint64_t v104 = 334;
  int64x2_t v105 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&__p[v104] = v105;
    v104 += 2;
  }
  while (v104 != 366);
  uint64_t v106 = 0;
  uint64_t v189 = v191;
  uint64_t v190 = 0x2000000000;
  uint64_t v192 = v196;
  unsigned int v193 = v196;
  uint64_t v194 = 8;
  int v195 = 0;
  int v197 = v200;
  int v198 = v200;
  *(void *)uint64_t v199 = 16;
  *(_DWORD *)&v199[8] = 0;
  uint64_t v201 = v204;
  __b = v204;
  *(void *)uint64_t v203 = 16;
  *(_DWORD *)&v203[8] = 0;
  int64x2_t v107 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int v205 = v207;
  uint64_t v206 = 0x2000000000;
  uint64_t v208 = 1;
  do
  {
    *(int64x2_t *)&v209[v106] = v107;
    v106 += 2;
  }
  while (v106 != 32);
  uint64_t v210 = v212;
  uint64_t v211 = 0x2000000000;
  int v213 = v215;
  uint64_t v214 = 0x2000000000;
  v141[0] = v245;
  uint64_t v216 = 0;
  uint64_t v218 = 0;
  uint64_t v217 = 0;
  sub_1CC86D39C((char **)&v216, (uint64_t)v141);
  uint64_t v219 = v139;
  int v220 = v25;
  uint64_t v221 = v26;
  uint64_t v222 = 0;
  uint64_t v223 = v140;
  int v224 = 0;
  int v225 = v137;
  int v226 = 0;
  __int16 v227 = 0;
  unsigned __int32 v228 = vmovn_s16(v134).u32[0];
  char v229 = v95;
  char v230 = v94;
  BOOL v231 = v136;
  char v232 = v96;
  char v233 = sub_1CD109868(*(llvm::Module **)(v245 + 40));
  sub_1CC85F7B8((uint64_t)__p, (uint64_t)&v236, v140);
  if (__b == v201) {
    goto LABEL_166;
  }
  if (*(_DWORD *)v203 < 0x21u || (4 * (*(_DWORD *)&v203[4] - *(_DWORD *)&v203[8])) >= *(_DWORD *)v203)
  {
    memset(__b, 255, 8 * *(unsigned int *)v203);
LABEL_166:
    *(void *)&v203[4] = 0;
    goto LABEL_167;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v201);
LABEL_167:
  if (v198 != v197)
  {
    if (*(_DWORD *)v199 >= 0x21u && (4 * (*(_DWORD *)&v199[4] - *(_DWORD *)&v199[8])) < *(_DWORD *)v199)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v197);
      goto LABEL_169;
    }
    memset(v198, 255, 8 * *(unsigned int *)v199);
  }
  *(void *)&v199[4] = 0;
LABEL_169:
  if ((_BYTE)v227 || v133 == 29)
  {
    v141[1] = *(void *)(v13 + 336);
    sub_1CC875428((uint64_t)v141, v12, (uint64_t)__p, v140, 0, v132);
  }
  int v108 = HIBYTE(v227);
  uint64_t v109 = HIBYTE(v227) != 0;
  if (byte_1EBCDCA10)
  {
    int v110 = sub_1CC85DC1C((uint64_t)v189, v190, (uint64_t)v25, (uint64_t *)v26, (uint64_t **)v12);
    unsigned int v111 = v110 | sub_1CC85DDF0((uint64_t)v220, (uint64_t)v221);
    if (v108) {
      uint64_t v109 = 1;
    }
    else {
      uint64_t v109 = v111;
    }
  }
  if (v216)
  {
    uint64_t v217 = v216;
    operator delete(v216);
  }
  int v112 = &v251;
  if (v213 != v215) {
    free(v213);
  }
  if (v210 != v212) {
    free(v210);
  }
  if ((v208 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v209[0], 8);
  }
  if (v205 != v207) {
    free(v205);
  }
  if (__b != v201) {
    free(__b);
  }
  if (v198 != v197) {
    free(v198);
  }
  if (v193 != v192) {
    free(v193);
  }
  if (v189 != v191) {
    free(v189);
  }
  if ((v187 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v188, 8);
  }
  if (v184 != v186) {
    free(v184);
  }
  if ((v182 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v183, 8);
  }
  if (v178 != v177) {
    free(v178);
  }
  MEMORY[0x1D25D9CD0](v174, 8);
  uint64_t v113 = v172;
  if (v173)
  {
    uint64_t v114 = 32 * v173;
    BOOL v115 = (void *)(v172 + 24);
    do
    {
      if ((*(v115 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v116 = (void *)*(v115 - 2);
        if (v115 != v116) {
          free(v116);
        }
      }
      v115 += 4;
      v114 -= 32;
    }
    while (v114);
    uint64_t v113 = v172;
  }
  MEMORY[0x1D25D9CD0](v113, 8);
  MEMORY[0x1D25D9CD0](v170, 8);
  if (v166 != v165) {
    free(v166);
  }
  if (v162 != v164) {
    free(v162);
  }
  if ((v160 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v161, 8);
  }
  if (v157 != v159) {
    free(v157);
  }
  if ((v155 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v156, 8);
  }
  if (__p[0] != v150) {
    free(__p[0]);
  }
  sub_1CC79BE3C((uint64_t)&v236);
  if ((v257 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v258, 8);
  }
  BOOL v117 = (char *)v254;
  if (v255)
  {
    uint64_t v118 = 32 * v255;
    do
    {
      unsigned int v119 = *(char **)&v117[v118 - 24];
      if (&v117[v118 - 8] != v119) {
        free(v119);
      }
      v118 -= 32;
    }
    while (v118);
    BOOL v117 = (char *)v254;
  }
  if (v117 != v256) {
    free(v117);
  }
  char v120 = v250;
  if (v250)
  {
    unsigned int v121 = 16;
  }
  else
  {
    unsigned int v121 = v252;
    if (!v252) {
      goto LABEL_240;
    }
    int v112 = v251;
  }
  uint64_t v122 = 104 * v121;
  uint64_t v123 = (void **)(v112 + 2);
  do
  {
    uint64_t v124 = (uint64_t)*(v123 - 2);
    if (v124 != -4096 && v124 != -8192 && *v123 != *(v123 - 1)) {
      free(*v123);
    }
    v123 += 13;
    v122 -= 104;
  }
  while (v122);
  char v120 = v250;
LABEL_240:
  uint64_t v125 = &v247;
  if ((v120 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v251, 8);
  }
  char v126 = v246;
  if (v246)
  {
    unsigned int v127 = 16;
  }
  else
  {
    unsigned int v127 = v248;
    if (!v248) {
      goto LABEL_251;
    }
    uint64_t v125 = v247;
  }
  uint64_t v128 = 104 * v127;
  uint64_t v129 = (void **)(v125 + 2);
  do
  {
    uint64_t v130 = (uint64_t)*(v129 - 2);
    if (v130 != -4096 && v130 != -8192 && *v129 != *(v129 - 1)) {
      free(*v129);
    }
    v129 += 13;
    v128 -= 104;
  }
  while (v128);
  char v126 = v246;
LABEL_251:
  if ((v126 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v247, 8);
  }
  return v109;
}

void *sub_1CC85D214(_DWORD *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CC85D2A4((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC85D358(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    v5[1] = 1;
    void v5[2] = -4096;
    v5[4] = v5 + 6;
    *((_DWORD *)v5 + 11) = 1;
  }
  return v5;
}

uint64_t sub_1CC85D2A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 56 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 56 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC85D358(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC85D41C((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC85D2A4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

void sub_1CC85D41C(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(void *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC85D664(a1, v12, v12 + 56 * v13);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  uint64_t v8 = v14;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v8 = v10;
      *((void *)v8 + 1) = 1;
      *((void *)v8 + 2) = -4096;
      sub_1CC85D7B4((unsigned int *)v8 + 2, (unsigned int *)(v9 + 16));
      *((void *)v8 + 4) = v8 + 48;
      *((void *)v8 + 5) = 0x100000000;
      if (*(_DWORD *)(v9 + 48)) {
        sub_1CC00811C((uint64_t)(v8 + 32), a1 + v7 + 40);
      }
      uint64_t v11 = *(void **)(a1 + v7 + 40);
      if ((void *)(a1 + v7 + 56) != v11) {
        free(v11);
      }
      v8 += 56;
      if ((*(unsigned char *)(v9 + 16) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(a1 + v7 + 24), 8);
      }
    }
    v7 += 56;
  }
  while (v7 != 224);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CC85D664(a1, (uint64_t)v14, (uint64_t)v8);
}

void sub_1CC85D664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 232);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_5;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[7 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 7;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v13 = 0;
        sub_1CC85D2A4(a1, (void *)v4, &v13);
        uint64_t v10 = v13;
        *(void *)unsigned int v13 = *(void *)v4;
        *((void *)v10 + 1) = 1;
        *((void *)v10 + 2) = -4096;
        sub_1CC85D7B4(v10 + 2, (unsigned int *)(v4 + 8));
        *((void *)v10 + 4) = v10 + 12;
        uint64_t v11 = (uint64_t)(v10 + 8);
        *(void *)(v11 + 8) = 0x100000000;
        if (*(_DWORD *)(v4 + 40)) {
          sub_1CC00811C(v11, v4 + 32);
        }
        *(_DWORD *)a1 += 2;
        uint64_t v12 = *(void **)(v4 + 32);
        if ((void *)(v4 + 48) != v12) {
          free(v12);
        }
        if ((*(unsigned char *)(v4 + 8) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v4 + 16), 8);
        }
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

unsigned int *sub_1CC85D7B4(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  int v3 = result[1];
  *uint64_t result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if ((v4 & 1) == 0)
    {
      unint64_t v5 = a2;
LABEL_4:
      long long v6 = *(_OWORD *)(v5 + 2);
      *unint64_t v5 = v4 | 1;
      *((void *)v5 + 1) = *((void *)result + 1);
      *result &= ~1u;
      *(_OWORD *)(result + 2) = v6;
      return result;
    }
    uint64_t v8 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v8;
  }
  else
  {
    if (v4)
    {
      unsigned int v4 = *result;
      unint64_t v5 = result;
      uint64_t result = a2;
      goto LABEL_4;
    }
    uint64_t v7 = *((void *)result + 1);
    *((void *)result + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v7;
    LODWORD(v7) = result[4];
    result[4] = a2[4];
    a2[4] = v7;
  }
  return result;
}

uint64_t sub_1CC85D888(llvm::Instruction *this, uint64_t a2, int *a3, int a4, int a5, int a6, int a7, uint64_t a8, uint64_t *a9, uint64_t a10, char a11)
{
  if (!*((_DWORD *)a9 + 2)) {
    goto LABEL_11;
  }
  uint64_t v13 = *a9;
  uint64_t v14 = *((unsigned int *)a9 + 4);
  if (v14)
  {
    uint64_t v15 = (v14 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v16 = v13 + (v15 << 6);
    uint64_t v17 = *(llvm::Instruction **)(v16 + 24);
    if (v17 == this) {
      goto LABEL_9;
    }
    int v18 = 1;
    while (v17 != (llvm::Instruction *)-4096)
    {
      int v19 = v15 + v18++;
      uint64_t v15 = v19 & (v14 - 1);
      uint64_t v16 = v13 + (v15 << 6);
      uint64_t v17 = *(llvm::Instruction **)(v16 + 24);
      if (v17 == this) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v16 = v13 + (v14 << 6);
LABEL_9:
  if (v16 != v13 + (v14 << 6)) {
    return 0;
  }
LABEL_11:
  unsigned int v21 = *((unsigned __int8 *)this + 16);
  if (!this || v21 < 0x1C)
  {
    uint64_t result = 1;
    if (this && v21 <= 3)
    {
      int v23 = *(_DWORD *)(*(void *)this + 8) >> 8;
      return v23 != 64 && v23 != 2;
    }
    return result;
  }
  if (v21 == 60)
  {
    unsigned int v25 = *((unsigned __int16 *)this + 9);
    if ((v25 & 1) == 0)
    {
      int v26 = (v25 >> 7) & 7;
      uint64_t result = 1;
      if (v26 == 4 || v26 == 7) {
        return result;
      }
      uint64_t v27 = **((void **)this - 4);
      unsigned int v28 = *(_DWORD *)(v27 + 8);
      if ((v28 & 0xFE) == 0x12) {
        unsigned int v28 = *(_DWORD *)(**(void **)(v27 + 16) + 8);
      }
      unsigned int v29 = v28 >> 8;
      if (a5)
      {
        if (v29 == 64) {
          return 0;
        }
        unsigned int v30 = v29 - 3;
        uint64_t result = v30 < 0xFFFFFFFE;
        if (v30 < 0xFFFFFFFE || (a4 & 1) != 0) {
          return result;
        }
      }
      else
      {
        if (v29 == 64) {
          return 0;
        }
        if (v29 != 2) {
          return result;
        }
      }
      return !sub_1CC85ED24((uint64_t)this, a2, a3, a8, a6, 0);
    }
    return 1;
  }
  if (v21 == 84)
  {
    uint64_t v22 = *((void *)this - 4);
    if (v22 && !*(unsigned char *)(v22 + 16) && *(void *)(v22 + 24) == *((void *)this + 9))
    {
      if ((*(unsigned char *)(v22 + 33) & 0x20) != 0)
      {
        if (sub_1CC85ED24((uint64_t)this, a2, a3, a8, a6, 0))
        {
          int v32 = *(_DWORD *)(*((void *)this - 4) + 36);
          return sub_1CD0FF67C(v32);
        }
        return 1;
      }
      if (a11)
      {
        uint64_t v38 = *((void *)this - 4);
        v36[0] = 0;
        if (!sub_1CBAEB668((uint64_t *)a10, &v38, v36)
          || v36[0] == *(void *)a10 + 16 * *(unsigned int *)(a10 + 16))
        {
          v36[0] = 0;
          v36[1] = 0;
          int v37 = 0;
          BOOL v34 = sub_1CC85F25C(v22, a10, (uint64_t)v36);
          MEMORY[0x1D25D9CD0](v36[0], 8);
          if (v34) {
            return 1;
          }
        }
        else if (*(unsigned char *)(v36[0] + 8))
        {
          return 1;
        }
      }
    }
    else if (a11)
    {
      return 1;
    }
    unsigned int v21 = *((unsigned __int8 *)this + 16);
  }
  if (v21 == 59) {
    return 1;
  }
  if (v21 == 83) {
    return a4 ^ 1u;
  }
  if (llvm::Instruction::mayHaveSideEffects(this)) {
    return 1;
  }
  uint64_t result = 0;
  uint64_t v31 = *((unsigned __int8 *)this + 16) - 33;
  if (v31 > 0x37) {
    return result;
  }
  if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v33 = *((void *)this + 8);
    if (v33 && ((*(unsigned char *)(v33 + 20) & 4) != 0 || (*(unsigned char *)(v33 + 17) & 0x10) != 0)) {
      return 0;
    }
    LODWORD(v36[0]) = 7;
    if ((!sub_1CC5CB59C((uint64_t)this, (__int32 *)v36, 1uLL)
       || (uint64_t v35 = *((void *)this - 4)) != 0
       && !*(unsigned char *)(v35 + 16)
       && *(void *)(v35 + 24) == *((void *)this + 9)
       && *(_DWORD *)(v35 + 36) == 7)
      && ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) != 0
       || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0))
    {
      return 0;
    }
    return 1;
  }
  if (((1 << (*((unsigned char *)this + 16) - 33)) & 0x808001C8000010) != 0) {
    return 1;
  }
  if (v31 == 28) {
    return (*((_WORD *)this + 9) & 0x301) != 0;
  }
  return result;
}

uint64_t sub_1CC85DC1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  v22[32] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  unsigned int v6 = 0;
  uint64_t v20 = v22;
  uint64_t v21 = 0x2000000000;
  uint64_t v7 = 8 * a2;
  do
  {
    if (*(uint64_t ***)(*(void *)(*(void *)a1 + 40) + 56) == a5)
    {
      if (v6 >= HIDWORD(v21)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v20 + v6) = *(void *)a1;
      unsigned int v6 = v21 + 1;
      LODWORD(v21) = v21 + 1;
    }
    a1 += 8;
    v7 -= 8;
  }
  while (v7);
  uint64_t v8 = **a5;
  v11[0] = v12;
  v11[1] = (void *)0x200000000;
  v12[6] = v8;
  v12[7] = &v18;
  v12[8] = &v19;
  v12[9] = 0;
  int v13 = 0;
  __int16 v14 = 512;
  char v15 = 7;
  v12[4] = 0;
  v12[5] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = &unk_1F2616E88;
  int v19 = &unk_1F2617008;
  uint64_t v9 = llvm::formLCSSAForInstructions((uint64_t)&v20, a3, a4, 0, (uint64_t)v11, 0);
  if (v11[0] != v12) {
    free(v11[0]);
  }
  if (v20 != v22) {
    free(v20);
  }
  return v9;
}

uint64_t sub_1CC85DDF0(uint64_t a1, uint64_t a2)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0x1000000000;
  unsigned int v2 = *(uint64_t **)(a2 + 24);
  int v3 = *(uint64_t **)(a2 + 32);
  v11[0] = &unk_1F261FE60;
  v11[1] = &v13;
  uint64_t v12 = v11;
  int v13 = v15;
  sub_1CC7AF6B8(v2, v3, (uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  unsigned int v4 = v13;
  int v5 = v14;
  if (v14)
  {
    unsigned int v6 = (char *)v13 + 8 * v14 - 8;
    if (v13 < v6)
    {
      uint64_t v7 = (char *)v13 + 8;
      do
      {
        uint64_t v8 = *((void *)v7 - 1);
        *((void *)v7 - 1) = *(void *)v6;
        *(void *)unsigned int v6 = v8;
        v6 -= 8;
        BOOL v9 = v7 >= v6;
        v7 += 8;
      }
      while (!v9);
      unsigned int v4 = v13;
    }
  }
  if (v5)
  {
    uint64_t v16 = v18;
    uint64_t v17 = 0x400000000;
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits();
  }
  if (v4 != v15) {
    free(v4);
  }
  return 0;
}

BOOL sub_1CC85ED24(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 80);
  if (v7) {
    uint64_t v8 = v7 - 24;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == v6) {
    return 1;
  }
  int v15 = *(unsigned __int8 *)(a1 + 16);
  BOOL v16 = v15 != 84;
  if (v15 == 84)
  {
    uint64_t v19 = *(void *)(a1 - 32);
    if (!v19
      || *(unsigned char *)(v19 + 16)
      || *(void *)(v19 + 24) != *(void *)(a1 + 72)
      || (*(unsigned char *)(v19 + 33) & 0x20) == 0)
    {
      uint64_t v17 = 0;
      BOOL v16 = 1;
      goto LABEL_17;
    }
    uint64_t v37 = *(void *)(a1 + 64);
    if (v37 && (*(unsigned char *)(v37 + 12) & 0x40) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 6) & 1) != 0) {
      return 0;
    }
    if (sub_1CD0FF4EC(a1, 22)) {
      return 1;
    }
    int v15 = *(unsigned __int8 *)(a1 + 16);
    uint64_t v17 = a1;
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = (v15 - 33);
  if (v18 > 0x37)
  {
LABEL_22:
    uint64_t v22 = *(unsigned __int8 *)(a1 + 16) - 33;
    if (v22 <= 0x37)
    {
      if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v24 = *(void *)(a1 + 64);
        if (v24 && ((*(unsigned char *)(v24 + 20) & 4) != 0 || (*(unsigned char *)(v24 + 17) & 0x10) != 0)) {
          return 1;
        }
        __int32 v47 = 7;
        if ((!sub_1CC5CB59C(a1, &v47, 1uLL)
           || (uint64_t v46 = *(void *)(a1 - 32)) != 0
           && !*(unsigned char *)(v46 + 16)
           && *(void *)(v46 + 24) == *(void *)(a1 + 72)
           && *(_DWORD *)(v46 + 36) == 7)
          && ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) != 0
           || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0))
        {
          return 1;
        }
      }
      else if (((1 << (*(unsigned char *)(a1 + 16) - 33)) & 0x808001C8000010) == 0 {
             && (v22 != 28 || (*(_WORD *)(a1 + 18) & 0x301) == 0))
      }
      {
        return 1;
      }
      if (v16)
      {
        if (*(unsigned char *)(a1 + 16) != 60) {
          return 0;
        }
        if ((sub_1CD10A990(a1, a2, a3, 0) & 1) == 0)
        {
          if (!a5) {
            goto LABEL_44;
          }
          uint64_t v25 = **(void **)(a1 - 32);
          unsigned int v26 = *(_DWORD *)(v25 + 8);
          if ((v26 & 0xFE) == 0x12) {
            unsigned int v26 = *(_DWORD *)(**(void **)(v25 + 16) + 8);
          }
          unsigned int v27 = (v26 >> 8) - 1;
          BOOL v28 = v27 > 0x3F;
          unint64_t v29 = (1 << v27) & 0x8000000000000003;
          if (v28 || v29 == 0)
          {
LABEL_44:
            if (!a4) {
              return 0;
            }
            uint64_t v31 = *(llvm::BasicBlock **)(a1 + 40);
            if (!a6 || (sub_1CC85F0FC(v31) & 1) == 0)
            {
              uint64_t v32 = a4;
              uint64_t v33 = v31;
              goto LABEL_56;
            }
          }
        }
      }
      else if ((!a5 || *(_DWORD *)(*(void *)(v17 - 32) + 36) != 2785) && (sub_1CD0FF4EC(v17, 20) & 1) == 0)
      {
        return 0;
      }
    }
    return 1;
  }
  if (((1 << v18) & 0x808001D0000010) != 0) {
    goto LABEL_53;
  }
  if (v18 == 27)
  {
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0) {
      goto LABEL_53;
    }
    goto LABEL_22;
  }
  if (((1 << v18) & 0x8000000000041) == 0) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20 && (*(unsigned char *)(v20 + 17) & 0x30) != 0) {
    goto LABEL_22;
  }
  int v21 = *(_DWORD *)(a1 + 20);
  if (v21 < 0)
  {
    uint64_t v38 = a1 - 32 * (v21 & 0x7FFFFFF);
    uint64_t v41 = *(void *)(v38 - 8);
    uint64_t v39 = v38 - 8;
    uint64_t v40 = v41;
    if (v41)
    {
      uint64_t v42 = -v40;
      do
      {
        unsigned int v43 = *(_DWORD *)(*(void *)(v39 + v42) + 8);
        BOOL v28 = v43 > 7;
        int v44 = (1 << v43) & 0x83;
        if (v28 || v44 == 0) {
          goto LABEL_53;
        }
        v42 += 16;
      }
      while (v42);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
    || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
  {
    goto LABEL_22;
  }
LABEL_53:
  if (!a4 || *(unsigned char *)(a1 + 16) != 61) {
    return 0;
  }
  uint64_t v33 = *(llvm::BasicBlock **)(a1 + 40);
  uint64_t v32 = a4;
LABEL_56:
  unsigned int v34 = sub_1CC8228B4(v32, v33);
  uint64_t v35 = *(void *)(a4 + 3352) + 32 * v34;
  int v36 = *(_DWORD *)(v35 + 16);
  if (!v36) {
    return 1;
  }
  if (v36 == 1) {
    return (**(_DWORD **)(v35 + 8) & 0xFFFFFF) == v34;
  }
  return 0;
}

uint64_t sub_1CC85F0FC(llvm::BasicBlock *a1)
{
  uint64_t result = llvm::BasicBlock::getSinglePredecessor(a1);
  if (!result) {
    return result;
  }
  uint64_t v3 = *(void *)(result + 40);
  if (v3 == result + 40) {
    return 0;
  }
  uint64_t result = 0;
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(unsigned __int8 *)(v4 + 16) - 40;
  if (v5 >= 0xFFFFFFF5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v3)
  {
    if (*(unsigned char *)(v6 + 16) == 30 && v5 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 3) {
        return 0;
      }
      uint64_t v8 = *(void *)(v6 - 96);
      unsigned int v9 = *(unsigned __int8 *)(v8 + 16);
      BOOL v10 = v9 != 81 || v8 == 0;
      BOOL v11 = !v10 && v9 >= 0x1C;
      if (!v11 || v9 - 83 < 0xFFFFFFFE) {
        return 0;
      }
      uint64_t v13 = *(void *)(v8 - 64);
      if (!v13) {
        return 0;
      }
      uint64_t result = *(void *)(v8 - 32);
      if (!result) {
        return result;
      }
      uint64_t v14 = *(_WORD *)(v8 + 18) & 0x3FLL;
      if (sub_1CC85F210(result))
      {
        LODWORD(v14) = dword_1CFB27154[v14];
        goto LABEL_32;
      }
      if (sub_1CC85F210(v13))
      {
LABEL_32:
        if (*(llvm::BasicBlock **)(v6 - 64) == a1)
        {
          LODWORD(v14) = dword_1CFB271FC[(__int16)v14];
        }
        else if (*(llvm::BasicBlock **)(v6 - 32) != a1)
        {
          return 0;
        }
        return v14 == 37;
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1CC85F210(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 2365;
}

BOOL sub_1CC85F25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a1;
  v19[0] = 0;
  uint64_t v20 = a1;
  if (sub_1CBAEB668((uint64_t *)a2, &v20, v19)
    && v19[0] != *(void *)a2 + 16 * *(unsigned int *)(a2 + 16))
  {
    return *(unsigned char *)(v19[0] + 8) != 0;
  }
  sub_1CC85F498(a3, &v18, (uint64_t)v19);
  uint64_t v6 = v18 + 72;
  uint64_t v7 = *(void *)(v18 + 80);
LABEL_5:
  if (v7 != v6)
  {
    uint64_t v8 = v7 - 24;
    if (!v7) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 + 40;
    for (uint64_t i = *(void *)(v8 + 48); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v9)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        goto LABEL_5;
      }
      if (i) {
        uint64_t v11 = i - 24;
      }
      else {
        uint64_t v11 = 0;
      }
      int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 84) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = 0;
      }
      if (i && v12 == 84)
      {
        uint64_t v14 = *(void *)(v13 - 32);
        if (!v14) {
          goto LABEL_31;
        }
        if (*(unsigned char *)(v14 + 16)) {
          goto LABEL_31;
        }
        if (*(void *)(v14 + 24) != *(void *)(v13 + 72)) {
          goto LABEL_31;
        }
        v19[0] = *(void *)(v13 - 32);
        uint64_t v20 = 0;
        if ((sub_1CC020A5C((uint64_t *)a3, v19, &v20) & 1) == 0)
        {
          if (sub_1CC85F25C(v14, a2, a3)) {
            goto LABEL_31;
          }
        }
      }
      else if (i && v12 == 60)
      {
        uint64_t v15 = **(void **)(v11 - 32);
        int v16 = *(_DWORD *)(v15 + 8);
        if ((v16 & 0xFE) == 0x12) {
          int v16 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
        }
        if ((v16 & 0xFFFFFF00) == 0x4000)
        {
LABEL_31:
          v19[0] = 0;
          if (sub_1CC020A5C((uint64_t *)a3, &v18, v19))
          {
            *(void *)v19[0] = -8192;
            *(int32x2_t *)(a3 + 8) = vadd_s32(*(int32x2_t *)(a3 + 8), (int32x2_t)0x1FFFFFFFFLL);
          }
          uint64_t v5 = 1;
          LOBYTE(v20) = 1;
          sub_1CBAEB5D4(a2, &v18, &v20, (uint64_t)v19);
          return v5;
        }
      }
    }
  }
  v19[0] = 0;
  if (sub_1CC020A5C((uint64_t *)a3, &v18, v19))
  {
    *(void *)v19[0] = -8192;
    *(int32x2_t *)(a3 + 8) = vadd_s32(*(int32x2_t *)(a3 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  LOBYTE(v20) = 0;
  sub_1CBAEB5D4(a2, &v18, &v20, (uint64_t)v19);
  return 0;
}

uint64_t sub_1CC85F498@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v10 = 0;
  uint64_t result = sub_1CC020A5C((uint64_t *)a1, a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC85F520(a1, (uint64_t)a2, a2, v10);
    uint64_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

void *sub_1CC85F520(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC85F5D4(a1, v7);
  uint64_t v9 = 0;
  sub_1CC020A5C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC85F5D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD644CF4(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

char *sub_1CC85F6A0(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x48uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)unsigned int v2 = &unk_1F261FD40;
  *((void *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 6) = 0;
  *((_DWORD *)v2 + 14) = 0;
  *((void *)v2 + 5) = 0;
  sub_1CBFCBCC4((uint64_t)(v2 + 40), a1 + 40);
  v2[64] = *(unsigned char *)(a1 + 64);
  return v2;
}

void sub_1CC85F71C(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[5], 8);

  operator delete(a1);
}

uint64_t sub_1CC85F75C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = *(unsigned char *)(a1 + 64);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, void, void, void, void, uint64_t, char))(a1 + 8))(*a2, a3, a4, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(unsigned __int8 *)(a1 + 18), *(unsigned __int8 *)(a1 + 19), *(void *)(a1 + 24), *(void *)(a1 + 32), a1 + 40, v5);
}

void sub_1CC85F7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v2475 = *MEMORY[0x1E4F143B8];
  v2333 = (unsigned char *)(a1 + 4644);
  v2413 = (unsigned char *)(a1 + 4645);
  uint64_t v2398 = *(void *)(a2 + 1280);
  uint64_t v2388 = *(void *)(v2398 + 40);
  uint64_t v2449 = 1;
  uint64_t v6 = 8;
  int64x2_t v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v2449 + v6) = v7;
    v6 += 16;
  }
  while (v6 != 264);
  v2452 = v2454;
  uint64_t v2453 = 0x2000000000;
  if (dword_1EBCDCD10 == -1) {
    int v8 = (*(_DWORD *)(a1 + 4636) >> 1) & 0x7FFFFFFC;
  }
  else {
    int v8 = dword_1EBCDCD10;
  }
  int v9 = ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 440))(a3) + 7) & 0xFFFFFFF8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
  int v11 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10) + 4);
  if (v11 >= 256) {
    int v11 = 256;
  }
  BOOL v12 = __OFSUB__(v11, v9);
  int v13 = v11 - v9;
  if (v13 < 0 != v12) {
    ++v13;
  }
  int v2334 = v13;
  int v2335 = v8;
  if (v8 < 1) {
    goto LABEL_4526;
  }
  v2412 = (llvm::DataLayout *)(v2388 + 272);
  uint64_t v14 = &unk_1CD91C000;
  if (!*(void *)(a1 + 4616))
  {
    BOOL v307 = *(llvm::Module **)(v2398 + 40);
    goto LABEL_592;
  }
  *(void *)&long long v2459 = &v2460;
  *((void *)&v2459 + 1) = 0x1000000000;
  v2426[0] = &v2429;
  v2426[1] = &v2429;
  uint64_t v2427 = 16;
  int v2428 = 0;
  uint64_t v15 = *(void *)(a1 + 4608);
  int v16 = *(char **)(v15 + 24);
  uint64_t v17 = *(char **)(v15 + 32);
  v2444 = &v2446;
  uint64_t v2445 = 0x800000000;
  sub_1CBAACC38((uint64_t)&v2444, v16, v17);
  unsigned int v18 = v2445;
  if (v2445)
  {
    v2389 = (llvm::SmallPtrSetImplBase *)(a1 + 3200);
    do
    {
      uint64_t v19 = v2444[v18 - 1];
      LODWORD(v2445) = v18 - 1;
      uint64_t v20 = **(void ***)(v19 + 32);
      uint64_t v21 = *(void *)(a1 + 4616);
      uint64_t v22 = *(void *)(v21 + 3352) + 32 * sub_1CC8228B4(v21, v20);
      uint64_t v23 = *(unsigned int *)(v22 + 16);
      if (v23)
      {
        uint64_t v24 = *(_DWORD **)(v22 + 8);
        for (uint64_t i = 4 * v23; i; i -= 4)
        {
          uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 4616) + 3352) + 32 * (*v24 & 0xFFFFFF));
          uint64_t v27 = *(void *)(v26 + 40);
          if (v27 != v26 + 40)
          {
            BOOL v28 = v27 == 0;
            if (v27) {
              uint64_t v29 = v27 - 24;
            }
            else {
              uint64_t v29 = 0;
            }
            unsigned int v30 = *(unsigned __int8 *)(v29 + 16) - 40;
            BOOL v31 = __CFADD__(v30, 11);
            if (v30 < 0xFFFFFFF5) {
              uint64_t v29 = 0;
            }
            int v32 = *(unsigned __int8 *)(v29 + 16);
            if (!v31) {
              BOOL v28 = 1;
            }
            if (v32 == 30 && !v28)
            {
              uint64_t v33 = *(void *)(v29 - 96);
              goto LABEL_35;
            }
            char v34 = v32 != 31 || v28;
            if ((v34 & 1) == 0)
            {
              int v35 = *(_DWORD *)(v29 + 20);
              if ((v35 & 0x40000000) != 0) {
                int v36 = *(uint64_t **)(v29 - 8);
              }
              else {
                int v36 = (uint64_t *)(v29 - 32 * (v35 & 0x7FFFFFF));
              }
              uint64_t v33 = *v36;
LABEL_35:
              if (v33) {
                BOOL v37 = *(unsigned __int8 *)(v33 + 16) >= 0x1Cu;
              }
              else {
                BOOL v37 = 0;
              }
              if (v37)
              {
                if (DWORD2(v2459) >= (unint64_t)HIDWORD(v2459)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(v2459 + 8 * DWORD2(v2459)) = v33;
                ++DWORD2(v2459);
              }
            }
          }
          ++v24;
        }
      }
      if (!v2413[2]) {
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits();
      }
      int v38 = 0;
      uint64_t v39 = v20 + 5;
      uint64_t v40 = (void *)v20[6];
      if (v40 == v39) {
        goto LABEL_341;
      }
      uint64_t v41 = (v19 >> 4) ^ (v19 >> 9);
      do
      {
        if (v40) {
          uint64_t v42 = v40 - 3;
        }
        else {
          uint64_t v42 = 0;
        }
        if (*((unsigned char *)v42 + 16) != 83) {
          break;
        }
        uint64_t v43 = *(void *)(a2 + 536);
        uint64_t v44 = *(void *)(a2 + 528);
        if (v43 == v44)
        {
          uint64_t v45 = *(unsigned int *)(a2 + 548);
          uint64_t v46 = (void *)(v43 + 8 * v45);
          if (v45)
          {
            uint64_t v47 = 0;
            while (*(void **)(v43 + v47) != v42)
            {
              v47 += 8;
              if (8 * v45 == v47) {
                goto LABEL_73;
              }
            }
            uint64_t v46 = (void *)(v43 + v47);
          }
LABEL_73:
          uint64_t v44 = *(void *)(a2 + 536);
        }
        else
        {
          uint64_t v48 = *(unsigned int *)(a2 + 544);
          int v49 = v48 - 1;
          unsigned int v50 = (v48 - 1) & ((v42 >> 4) ^ (v42 >> 9));
          uint64_t v46 = (void *)(v43 + 8 * v50);
          uint64_t v51 = (void *)*v46;
          if (*v46 == -1)
          {
            int v52 = 0;
LABEL_127:
            if (v52) {
              uint64_t v46 = v52;
            }
            LODWORD(v45) = *(_DWORD *)(a2 + 548);
            unint64_t v85 = (void *)(v43 + 8 * v48);
            if ((void *)*v46 != v42) {
              uint64_t v46 = v85;
            }
          }
          else
          {
            int v52 = 0;
            int v53 = 1;
            while (v51 != v42)
            {
              if (v52) {
                BOOL v54 = 0;
              }
              else {
                BOOL v54 = v51 == (void *)-2;
              }
              if (v54) {
                int v52 = v46;
              }
              unsigned int v55 = v50 + v53++;
              unsigned int v50 = v55 & v49;
              uint64_t v46 = (void *)(v43 + 8 * (v55 & v49));
              uint64_t v51 = (void *)*v46;
              if (*v46 == -1) {
                goto LABEL_127;
              }
            }
            LODWORD(v45) = *(_DWORD *)(a2 + 548);
          }
        }
        if (v43 == v44) {
          unsigned int v56 = v45;
        }
        else {
          unsigned int v56 = *(_DWORD *)(a2 + 544);
        }
        if (v46 != (void *)(v43 + 8 * v56))
        {
          if (v2413[2]) {
            goto LABEL_326;
          }
          uint64_t v57 = *(void *)(a1 + 3208);
          uint64_t v58 = *(unsigned int *)(a1 + 3220);
          if (v57 == *(void *)(a1 + 3200))
          {
            if (v58)
            {
              uint64_t v59 = 0;
              uint64_t v60 = 8 * v58;
              BOOL v61 = *(uint64_t **)(a1 + 3208);
              while (*v61 != v19)
              {
                if (*v61 == -2) {
                  uint64_t v59 = v61;
                }
                ++v61;
                v60 -= 8;
                if (!v60)
                {
                  if (!v59) {
                    goto LABEL_87;
                  }
                  *uint64_t v59 = v19;
                  --*(_DWORD *)(a1 + 3224);
                  goto LABEL_326;
                }
              }
              goto LABEL_326;
            }
LABEL_87:
            unsigned int v62 = *(_DWORD *)(a1 + 3216);
            if (v58 < v62)
            {
              *(_DWORD *)(a1 + 3220) = v58 + 1;
              *(void *)(v57 + 8 * v58) = v19;
              goto LABEL_326;
            }
          }
          else
          {
            unsigned int v62 = *(_DWORD *)(a1 + 3216);
          }
          if (3 * v62 <= 4 * ((int)v58 - *(_DWORD *)(a1 + 3224)))
          {
            if (v62 >= 0x40) {
              v62 *= 2;
            }
            else {
              unsigned int v62 = 128;
            }
          }
          else if (v62 - v58 >= v62 >> 3)
          {
            goto LABEL_115;
          }
          uint64_t v180 = v41;
          llvm::SmallPtrSetImplBase::Grow(v2389, v62);
          uint64_t v41 = v180;
          unsigned int v62 = *(_DWORD *)(a1 + 3216);
          uint64_t v57 = *(void *)(a1 + 3208);
LABEL_115:
          unsigned int v77 = v62 - 1;
          unsigned int v78 = (v62 - 1) & v41;
          uint64_t v79 = (uint64_t *)(v57 + 8 * v78);
          uint64_t v80 = *v79;
          if (*v79 == -1)
          {
            unsigned int v81 = 0;
LABEL_319:
            if (v81) {
              char v178 = v81;
            }
            else {
              char v178 = v79;
            }
            if (*v178 != v19)
            {
              if (*v178 == -2) {
                --*(_DWORD *)(a1 + 3224);
              }
              else {
                ++*(_DWORD *)(a1 + 3220);
              }
              *char v178 = v19;
            }
          }
          else
          {
            unsigned int v81 = 0;
            int v82 = 1;
            while (v80 != v19)
            {
              if (v81) {
                BOOL v83 = 0;
              }
              else {
                BOOL v83 = v80 == -2;
              }
              if (v83) {
                unsigned int v81 = v79;
              }
              unsigned int v84 = v78 + v82++;
              unsigned int v78 = v84 & v77;
              uint64_t v79 = (uint64_t *)(v57 + 8 * (v84 & v77));
              uint64_t v80 = *v79;
              if (*v79 == -1) {
                goto LABEL_319;
              }
            }
          }
          goto LABEL_326;
        }
        unsigned int v63 = (char *)v2426[1];
        uint64_t v64 = HIDWORD(v2427);
        if (v2426[1] == v2426[0])
        {
          if (HIDWORD(v2427))
          {
            uint64_t v65 = 0;
            uint64_t v66 = 8 * HIDWORD(v2427);
            uint64_t v67 = v2426[1];
            do
            {
              if ((void *)*v67 == v42) {
                goto LABEL_326;
              }
              if (*v67 == -2) {
                uint64_t v65 = v67;
              }
              ++v67;
              v66 -= 8;
            }
            while (v66);
            if (v65)
            {
              *uint64_t v65 = v42;
              --v2428;
              goto LABEL_140;
            }
          }
          if (HIDWORD(v2427) < v2427)
          {
            ++HIDWORD(v2427);
            *((void *)v2426[1] + v64) = v42;
LABEL_140:
            unint64_t v87 = *(unsigned int *)(a1 + 3624);
            if (v87 >= *(unsigned int *)(a1 + 3628)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 3616) + 8 * v87) = v42;
            int v88 = *(_DWORD *)(a1 + 3624);
            BOOL v31 = __CFADD__(v88, 1);
            unsigned int v89 = v88 + 1;
            *(_DWORD *)(a1 + 3624) = v89;
            if (v31) {
              goto LABEL_326;
            }
            while (2)
            {
              uint64_t v90 = *(void *)(*(void *)(a1 + 3616) + 8 * v89 - 8);
              *(_DWORD *)(a1 + 3624) = v89 - 1;
              unsigned int v91 = *(uint64_t **)(a1 + 4608);
              int v92 = *((_DWORD *)v91 + 4);
              if (v92)
              {
                uint64_t v93 = *(void *)(v90 + 40);
                uint64_t v94 = *v91;
                unsigned int v95 = v92 - 1;
                uint64_t v96 = ((v93 >> 4) ^ (v93 >> 9)) & (v92 - 1);
                uint64_t v97 = *(void *)(v94 + 16 * v96);
                if (v93 != v97)
                {
                  int v98 = 1;
                  while (v97 != -4096)
                  {
                    int v99 = v96 + v98++;
                    uint64_t v96 = v99 & v95;
                    uint64_t v97 = *(void *)(v94 + 16 * v96);
                    if (v93 == v97) {
                      goto LABEL_147;
                    }
                  }
                  goto LABEL_148;
                }
LABEL_147:
                int64x2_t v100 = *(void **)(v94 + 16 * v96 + 8);
              }
              else
              {
LABEL_148:
                int64x2_t v100 = 0;
              }
              uint64_t v101 = *(void *)(a1 + 3304);
              uint64_t v102 = *(unsigned int *)(a1 + 3316);
              if (v101 == *(void *)(a1 + 3296))
              {
                if (v102)
                {
                  int64x2_t v103 = 0;
                  uint64_t v104 = 8 * v102;
                  int64x2_t v105 = *(void **)(a1 + 3304);
                  while (*v105 != v90)
                  {
                    if (*v105 == -2) {
                      int64x2_t v103 = v105;
                    }
                    ++v105;
                    v104 -= 8;
                    if (!v104)
                    {
                      if (!v103) {
                        goto LABEL_157;
                      }
                      *int64x2_t v103 = v90;
                      --*(_DWORD *)(a1 + 3320);
                      break;
                    }
                  }
LABEL_181:
                  uint64_t v116 = *(void *)(a2 + 536);
                  uint64_t v117 = *(void *)(a2 + 528);
                  if (v116 == v117)
                  {
                    uint64_t v118 = *(unsigned int *)(a2 + 548);
                    unsigned int v119 = (void *)(v116 + 8 * v118);
                    if (v118)
                    {
                      uint64_t v120 = 0;
                      while (*(void *)(v116 + v120) != v90)
                      {
                        v120 += 8;
                        if (8 * v118 == v120) {
                          goto LABEL_200;
                        }
                      }
                      unsigned int v119 = (void *)(v116 + v120);
                    }
LABEL_200:
                    uint64_t v117 = *(void *)(a2 + 536);
                  }
                  else
                  {
                    uint64_t v121 = *(unsigned int *)(a2 + 544);
                    int v122 = v121 - 1;
                    unsigned int v123 = (v121 - 1) & ((v90 >> 4) ^ (v90 >> 9));
                    unsigned int v119 = (void *)(v116 + 8 * v123);
                    uint64_t v124 = *v119;
                    if (*v119 == -1)
                    {
                      uint64_t v125 = 0;
LABEL_288:
                      if (v125) {
                        unsigned int v119 = v125;
                      }
                      LODWORD(v118) = *(_DWORD *)(a2 + 548);
                      long long v174 = (void *)(v116 + 8 * v121);
                      if (*v119 != v90) {
                        unsigned int v119 = v174;
                      }
                    }
                    else
                    {
                      uint64_t v125 = 0;
                      int v126 = 1;
                      while (v124 != v90)
                      {
                        if (v125) {
                          BOOL v127 = 0;
                        }
                        else {
                          BOOL v127 = v124 == -2;
                        }
                        if (v127) {
                          uint64_t v125 = v119;
                        }
                        unsigned int v128 = v123 + v126++;
                        unsigned int v123 = v128 & v122;
                        unsigned int v119 = (void *)(v116 + 8 * (v128 & v122));
                        uint64_t v124 = *v119;
                        if (*v119 == -1) {
                          goto LABEL_288;
                        }
                      }
                      LODWORD(v118) = *(_DWORD *)(a2 + 548);
                    }
                  }
                  if (v116 == v117) {
                    unsigned int v129 = v118;
                  }
                  else {
                    unsigned int v129 = *(_DWORD *)(a2 + 544);
                  }
                  if (v119 != (void *)(v116 + 8 * v129))
                  {
                    if (v2413[2])
                    {
LABEL_301:
                      if (DWORD2(v2459) >= (unint64_t)HIDWORD(v2459)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(v2459 + 8 * DWORD2(v2459)) = v90;
                      ++DWORD2(v2459);
LABEL_303:
                      unsigned int v89 = *(_DWORD *)(a1 + 3624);
                      if (!v89) {
                        goto LABEL_326;
                      }
                      continue;
                    }
                    uint64_t v130 = *(void *)(a1 + 3208);
                    uint64_t v131 = *(unsigned int *)(a1 + 3220);
                    if (v130 == *(void *)(a1 + 3200))
                    {
                      if (v131)
                      {
                        uint64_t v132 = 0;
                        uint64_t v133 = 8 * v131;
                        int16x8_t v134 = *(void **)(a1 + 3208);
                        while ((void *)*v134 != v100)
                        {
                          if (*v134 == -2) {
                            uint64_t v132 = v134;
                          }
                          ++v134;
                          v133 -= 8;
                          if (!v133)
                          {
                            if (!v132) {
                              goto LABEL_214;
                            }
                            *uint64_t v132 = v100;
                            --*(_DWORD *)(a1 + 3224);
                            goto LABEL_301;
                          }
                        }
                        goto LABEL_301;
                      }
LABEL_214:
                      unsigned int v135 = *(_DWORD *)(a1 + 3216);
                      if (v131 < v135)
                      {
                        *(_DWORD *)(a1 + 3220) = v131 + 1;
                        *(void *)(v130 + 8 * v131) = v100;
                        goto LABEL_301;
                      }
                    }
                    else
                    {
                      unsigned int v135 = *(_DWORD *)(a1 + 3216);
                    }
                    if (3 * v135 <= 4 * ((int)v131 - *(_DWORD *)(a1 + 3224)))
                    {
                      if (v135 >= 0x40) {
                        v135 *= 2;
                      }
                      else {
                        unsigned int v135 = 128;
                      }
                    }
                    else if (v135 - v131 >= v135 >> 3)
                    {
                      goto LABEL_276;
                    }
                    uint64_t v177 = v41;
                    llvm::SmallPtrSetImplBase::Grow(v2389, v135);
                    uint64_t v41 = v177;
                    unsigned int v135 = *(_DWORD *)(a1 + 3216);
                    uint64_t v130 = *(void *)(a1 + 3208);
LABEL_276:
                    unsigned int v166 = v135 - 1;
                    unsigned int v167 = (v135 - 1) & ((v100 >> 4) ^ (v100 >> 9));
                    int v168 = (void *)(v130 + 8 * v167);
                    uint64_t v169 = (void *)*v168;
                    if (*v168 == -1)
                    {
                      long long v170 = 0;
LABEL_294:
                      if (v170) {
                        int v175 = v170;
                      }
                      else {
                        int v175 = v168;
                      }
                      if ((void *)*v175 != v100)
                      {
                        if (*v175 == -2) {
                          --*(_DWORD *)(a1 + 3224);
                        }
                        else {
                          ++*(_DWORD *)(a1 + 3220);
                        }
                        *int v175 = v100;
                      }
                    }
                    else
                    {
                      long long v170 = 0;
                      int v171 = 1;
                      while (v169 != v100)
                      {
                        if (v170) {
                          BOOL v172 = 0;
                        }
                        else {
                          BOOL v172 = v169 == (void *)-2;
                        }
                        if (v172) {
                          long long v170 = v168;
                        }
                        unsigned int v173 = v167 + v171++;
                        unsigned int v167 = v173 & v166;
                        int v168 = (void *)(v130 + 8 * (v173 & v166));
                        uint64_t v169 = (void *)*v168;
                        if (*v168 == -1) {
                          goto LABEL_294;
                        }
                      }
                    }
                    goto LABEL_301;
                  }
                  if (*(unsigned __int8 *)(v90 + 16) - 29 < 0xB) {
                    goto LABEL_301;
                  }
                  while (1)
                  {
                    while (1)
                    {
                      do
                      {
                        while (1)
                        {
                          while (1)
                          {
LABEL_217:
                            uint64_t v90 = *(void *)(v90 + 8);
                            if (!v90) {
                              goto LABEL_303;
                            }
                            uint64_t v136 = *(void *)(v90 + 24);
                            if (*(unsigned __int8 *)(v136 + 16) >= 0x1Cu)
                            {
                              int v137 = *(uint64_t **)(a1 + 4608);
                              int v138 = *((_DWORD *)v137 + 4);
                              if (v138) {
                                break;
                              }
                            }
                          }
                          uint64_t v139 = *(void *)(v136 + 40);
                          uint64_t v140 = *v137;
                          unsigned int v141 = v138 - 1;
                          uint64_t v142 = ((v139 >> 4) ^ (v139 >> 9)) & (v138 - 1);
                          uint64_t v143 = *(void *)(v140 + 16 * v142);
                          if (v139 == v143) {
                            break;
                          }
                          int v144 = 1;
                          while (v143 != -4096)
                          {
                            int v145 = v142 + v144++;
                            uint64_t v142 = v145 & v141;
                            uint64_t v143 = *(void *)(v140 + 16 * v142);
                            if (v139 == v143) {
                              goto LABEL_224;
                            }
                          }
                        }
LABEL_224:
                        uint64_t v146 = *(void **)(v140 + 16 * v142 + 8);
                      }
                      while (!v146);
                      if (v100 == v146) {
                        break;
                      }
                      int v147 = v100;
                      while (v147)
                      {
                        int v147 = (void *)*v147;
                        if (v147 == v146) {
                          goto LABEL_232;
                        }
                      }
                      while (v146)
                      {
                        uint64_t v146 = (void *)*v146;
                        if (v146 == v100) {
                          goto LABEL_232;
                        }
                      }
                    }
LABEL_232:
                    BOOL v148 = (char *)v2426[1];
                    uint64_t v149 = HIDWORD(v2427);
                    if (v2426[1] == v2426[0])
                    {
                      if (HIDWORD(v2427))
                      {
                        int v150 = 0;
                        uint64_t v151 = 8 * HIDWORD(v2427);
                        int v152 = v2426[1];
                        while (*v152 != v136)
                        {
                          if (*v152 == -2) {
                            int v150 = v152;
                          }
                          ++v152;
                          v151 -= 8;
                          if (!v151)
                          {
                            if (!v150) {
                              goto LABEL_240;
                            }
                            *int v150 = v136;
                            --v2428;
                            goto LABEL_264;
                          }
                        }
                        goto LABEL_217;
                      }
LABEL_240:
                      unsigned int v153 = v2427;
                      if (HIDWORD(v2427) < v2427)
                      {
                        ++HIDWORD(v2427);
                        *((void *)v2426[1] + v149) = v136;
LABEL_264:
                        unint64_t v163 = *(unsigned int *)(a1 + 3624);
                        if (v163 >= *(unsigned int *)(a1 + 3628)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*(void *)(a1 + 3616) + 8 * v163) = v136;
                        ++*(_DWORD *)(a1 + 3624);
                        goto LABEL_217;
                      }
                    }
                    else
                    {
                      unsigned int v153 = v2427;
                    }
                    if (3 * v153 <= 4 * (HIDWORD(v2427) - v2428)) {
                      break;
                    }
                    if (v153 - HIDWORD(v2427) < v153 >> 3) {
                      goto LABEL_271;
                    }
LABEL_245:
                    unsigned int v154 = v153 - 1;
                    unsigned int v155 = (v153 - 1) & ((v136 >> 4) ^ (v136 >> 9));
                    uint64_t v156 = &v148[8 * v155];
                    uint64_t v157 = *(void *)v156;
                    if (*(void *)v156 == -1)
                    {
                      uint64_t v158 = 0;
LABEL_257:
                      if (v158) {
                        unsigned int v162 = v158;
                      }
                      else {
                        unsigned int v162 = v156;
                      }
                      if (*(void *)v162 != v136)
                      {
                        if (*(void *)v162 == -2) {
                          --v2428;
                        }
                        else {
                          ++HIDWORD(v2427);
                        }
                        *(void *)unsigned int v162 = v136;
                        goto LABEL_264;
                      }
                    }
                    else
                    {
                      uint64_t v158 = 0;
                      int v159 = 1;
                      while (v157 != v136)
                      {
                        if (v158) {
                          BOOL v160 = 0;
                        }
                        else {
                          BOOL v160 = v157 == -2;
                        }
                        if (v160) {
                          uint64_t v158 = v156;
                        }
                        unsigned int v161 = v155 + v159++;
                        unsigned int v155 = v161 & v154;
                        uint64_t v156 = &v148[8 * (v161 & v154)];
                        uint64_t v157 = *(void *)v156;
                        if (*(void *)v156 == -1) {
                          goto LABEL_257;
                        }
                      }
                    }
                  }
                  if (v153 >= 0x40) {
                    v153 *= 2;
                  }
                  else {
                    unsigned int v153 = 128;
                  }
LABEL_271:
                  int v2391 = v38;
                  uint64_t v164 = v19;
                  uint64_t v165 = v41;
                  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2426, v153);
                  uint64_t v41 = v165;
                  uint64_t v19 = v164;
                  int v38 = v2391;
                  unsigned int v153 = v2427;
                  BOOL v148 = (char *)v2426[1];
                  goto LABEL_245;
                }
LABEL_157:
                unsigned int v106 = *(_DWORD *)(a1 + 3312);
                if (v102 < v106)
                {
                  *(_DWORD *)(a1 + 3316) = v102 + 1;
                  *(void *)(v101 + 8 * v102) = v90;
                  goto LABEL_181;
                }
              }
              else
              {
                unsigned int v106 = *(_DWORD *)(a1 + 3312);
              }
              break;
            }
            if (3 * v106 <= 4 * ((int)v102 - *(_DWORD *)(a1 + 3320)))
            {
              if (v106 >= 0x40) {
                v106 *= 2;
              }
              else {
                unsigned int v106 = 128;
              }
            }
            else if (v106 - v102 >= v106 >> 3)
            {
              goto LABEL_162;
            }
            uint64_t v176 = v41;
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 3296), v106);
            uint64_t v41 = v176;
            unsigned int v106 = *(_DWORD *)(a1 + 3312);
            uint64_t v101 = *(void *)(a1 + 3304);
LABEL_162:
            unsigned int v107 = v106 - 1;
            unsigned int v108 = (v106 - 1) & ((v90 >> 4) ^ (v90 >> 9));
            uint64_t v109 = (void *)(v101 + 8 * v108);
            uint64_t v110 = *v109;
            if (*v109 == -1)
            {
              unsigned int v111 = 0;
LABEL_174:
              if (v111) {
                BOOL v115 = v111;
              }
              else {
                BOOL v115 = v109;
              }
              if (*v115 != v90)
              {
                if (*v115 == -2) {
                  --*(_DWORD *)(a1 + 3320);
                }
                else {
                  ++*(_DWORD *)(a1 + 3316);
                }
                *BOOL v115 = v90;
              }
            }
            else
            {
              unsigned int v111 = 0;
              int v112 = 1;
              while (v110 != v90)
              {
                if (v111) {
                  BOOL v113 = 0;
                }
                else {
                  BOOL v113 = v110 == -2;
                }
                if (v113) {
                  unsigned int v111 = v109;
                }
                unsigned int v114 = v108 + v112++;
                unsigned int v108 = v114 & v107;
                uint64_t v109 = (void *)(v101 + 8 * (v114 & v107));
                uint64_t v110 = *v109;
                if (*v109 == -1) {
                  goto LABEL_174;
                }
              }
            }
            goto LABEL_181;
          }
        }
        unsigned int v68 = v2427;
        if (3 * (int)v2427 <= (4 * (HIDWORD(v2427) - v2428)))
        {
          if (v2427 >= 0x40) {
            unsigned int v68 = 2 * v2427;
          }
          else {
            unsigned int v68 = 128;
          }
        }
        else if ((int)v2427 - HIDWORD(v2427) >= v2427 >> 3)
        {
          goto LABEL_101;
        }
        uint64_t v179 = v41;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2426, v68);
        uint64_t v41 = v179;
        unsigned int v68 = v2427;
        unsigned int v63 = (char *)v2426[1];
LABEL_101:
        unsigned int v69 = v68 - 1;
        unsigned int v70 = (v68 - 1) & ((v42 >> 4) ^ (v42 >> 9));
        uint64_t v71 = &v63[8 * v70];
        uint64_t v72 = *(void **)v71;
        if (*(void *)v71 == -1)
        {
          unint64_t v73 = 0;
LABEL_133:
          if (v73) {
            unsigned int v86 = v73;
          }
          else {
            unsigned int v86 = v71;
          }
          if (*(void **)v86 != v42)
          {
            if (*(void *)v86 == -2) {
              --v2428;
            }
            else {
              ++HIDWORD(v2427);
            }
            *(void *)unsigned int v86 = v42;
            goto LABEL_140;
          }
        }
        else
        {
          unint64_t v73 = 0;
          int v74 = 1;
          while (v72 != v42)
          {
            if (v73) {
              BOOL v75 = 0;
            }
            else {
              BOOL v75 = v72 == (void *)-2;
            }
            if (v75) {
              unint64_t v73 = v71;
            }
            unsigned int v76 = v70 + v74++;
            unsigned int v70 = v76 & v69;
            uint64_t v71 = &v63[8 * (v76 & v69)];
            uint64_t v72 = *(void **)v71;
            if (*(void *)v71 == -1) {
              goto LABEL_133;
            }
          }
        }
LABEL_326:
        uint64_t v40 = (void *)v40[1];
      }
      while (v40 != v39);
LABEL_341:
      sub_1CBAACC38((uint64_t)&v2444, *(char **)(v19 + 8), *(char **)(v19 + 16));
      unsigned int v18 = v2445;
    }
    while (v2445);
  }
  if (v2426[1] != v2426[0])
  {
    if (v2427 >= 0x21 && 4 * (HIDWORD(v2427) - v2428) < v2427)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(v2426);
      goto LABEL_344;
    }
    memset(v2426[1], 255, 8 * v2427);
  }
  int v2428 = 0;
  HIDWORD(v2427) = 0;
LABEL_344:
  if (DWORD2(v2459))
  {
    uint64_t v181 = (uint64_t *)v2459;
    uint64_t v182 = (llvm::SmallPtrSetImplBase *)(v2459 + 8 * DWORD2(v2459));
    uint64_t v183 = (unsigned int *)(a1 + 3316);
    uint64_t v184 = (unsigned int *)(a1 + 3312);
    uint64_t v185 = (_DWORD *)(a1 + 3476);
    uint64_t v186 = (unsigned int *)(a1 + 3472);
    v2400 = v182;
    while (1)
    {
      uint64_t v187 = *v181;
      uint64_t v188 = v2426[0];
      if (v2426[1] == v2426[0])
      {
        unsigned int v189 = HIDWORD(v2427);
        uint64_t v190 = (char *)v2426[1] + 8 * HIDWORD(v2427);
        if (HIDWORD(v2427))
        {
          uint64_t v191 = 0;
          while (*(void *)((char *)v2426[1] + v191) != v187)
          {
            v191 += 8;
            if (8 * HIDWORD(v2427) == v191) {
              goto LABEL_365;
            }
          }
          uint64_t v190 = (char *)v2426[1] + v191;
        }
LABEL_365:
        uint64_t v188 = v2426[1];
      }
      else
      {
        int v192 = v2427 - 1;
        unsigned int v193 = (v2427 - 1) & ((v187 >> 4) ^ (v187 >> 9));
        uint64_t v190 = (char *)v2426[1] + 8 * v193;
        uint64_t v194 = *(void *)v190;
        if (*(void *)v190 == -1)
        {
          int v195 = 0;
LABEL_568:
          if (v195) {
            uint64_t v190 = v195;
          }
          unsigned int v189 = HIDWORD(v2427);
          if (*(void *)v190 != v187) {
            uint64_t v190 = (char *)v2426[1] + 8 * v2427;
          }
        }
        else
        {
          int v195 = 0;
          int v196 = 1;
          while (v194 != v187)
          {
            if (v195) {
              BOOL v197 = 0;
            }
            else {
              BOOL v197 = v194 == -2;
            }
            if (v197) {
              int v195 = v190;
            }
            unsigned int v198 = v193 + v196++;
            unsigned int v193 = v198 & v192;
            uint64_t v190 = (char *)v2426[1] + 8 * (v198 & v192);
            uint64_t v194 = *(void *)v190;
            if (*(void *)v190 == -1) {
              goto LABEL_568;
            }
          }
          unsigned int v189 = HIDWORD(v2427);
        }
      }
      if (v2426[1] == v188) {
        unsigned int v199 = v189;
      }
      else {
        unsigned int v199 = v2427;
      }
      if (v190 != (char *)v2426[1] + 8 * v199) {
        goto LABEL_370;
      }
      uint64_t v200 = *(uint64_t **)(a1 + 4608);
      int v201 = *((_DWORD *)v200 + 4);
      if (!v201) {
        goto LABEL_370;
      }
      uint64_t v202 = *(void *)(v187 + 40);
      uint64_t v203 = *v200;
      unsigned int v204 = v201 - 1;
      uint64_t v205 = ((v202 >> 4) ^ (v202 >> 9)) & (v201 - 1);
      uint64_t v206 = *(void *)(v203 + 16 * v205);
      if (v202 != v206)
      {
        int v207 = 1;
        while (v206 != -4096)
        {
          int v208 = v205 + v207++;
          uint64_t v205 = v208 & v204;
          uint64_t v206 = *(void *)(v203 + 16 * v205);
          if (v202 == v206) {
            goto LABEL_377;
          }
        }
        goto LABEL_370;
      }
LABEL_377:
      unsigned int v209 = *(llvm::SmallPtrSetImplBase **)(v203 + 16 * v205 + 8);
      if (v209)
      {
        unint64_t v210 = *(unsigned int *)(a1 + 3624);
        if (v210 >= *(unsigned int *)(a1 + 3628)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 3616) + 8 * v210) = v187;
        int v211 = *(_DWORD *)(a1 + 3624);
        BOOL v31 = __CFADD__(v211, 1);
        unsigned int v212 = v211 + 1;
        *(_DWORD *)(a1 + 3624) = v212;
        if (!v31) {
          break;
        }
      }
LABEL_370:
      if (++v181 == (uint64_t *)v182) {
        goto LABEL_574;
      }
    }
    v2406 = v209;
    while (1)
    {
      uint64_t v213 = *(void *)(*(void *)(a1 + 3616) + 8 * v212 - 8);
      *(_DWORD *)(a1 + 3624) = v212 - 1;
      uint64_t v214 = *(void *)(a1 + 3304);
      uint64_t v215 = *(void *)(a1 + 3296);
      if (v214 == v215)
      {
        uint64_t v216 = *v183;
        uint64_t v217 = (void *)(v214 + 8 * v216);
        if (v216)
        {
          uint64_t v218 = 0;
          uint64_t v219 = 8 * v216;
          while (*(void *)(v214 + v218) != v213)
          {
            v218 += 8;
            if (v219 == v218) {
              goto LABEL_399;
            }
          }
          uint64_t v217 = (void *)(v214 + v218);
        }
LABEL_399:
        uint64_t v215 = *(void *)(a1 + 3304);
      }
      else
      {
        uint64_t v220 = *v184;
        int v221 = v220 - 1;
        unsigned int v222 = (v220 - 1) & ((v213 >> 4) ^ (v213 >> 9));
        uint64_t v217 = (void *)(v214 + 8 * v222);
        uint64_t v223 = *v217;
        if (*v217 == -1)
        {
          int v224 = 0;
LABEL_557:
          if (v224) {
            uint64_t v217 = v224;
          }
          if (*v217 != v213) {
            uint64_t v217 = (void *)(v214 + 8 * v220);
          }
        }
        else
        {
          int v224 = 0;
          int v225 = 1;
          while (v223 != v213)
          {
            if (v224) {
              BOOL v226 = 0;
            }
            else {
              BOOL v226 = v223 == -2;
            }
            if (v226) {
              int v224 = v217;
            }
            unsigned int v227 = v222 + v225++;
            unsigned int v222 = v227 & v221;
            uint64_t v217 = (void *)(v214 + 8 * (v227 & v221));
            uint64_t v223 = *v217;
            if (*v217 == -1) {
              goto LABEL_557;
            }
          }
        }
      }
      if (v214 == v215) {
        unsigned __int32 v228 = (unsigned int *)(a1 + 3316);
      }
      else {
        unsigned __int32 v228 = (unsigned int *)(a1 + 3312);
      }
      if (v217 != (void *)(v214 + 8 * *v228))
      {
        uint64_t v229 = *(void *)(a1 + 3464);
        uint64_t v230 = *(unsigned int *)(a1 + 3476);
        if (v229 != *(void *)(a1 + 3456))
        {
          unsigned int v234 = *v186;
          goto LABEL_415;
        }
        if (!v230)
        {
LABEL_412:
          unsigned int v234 = *v186;
          if (v230 < *v186)
          {
            _DWORD *v185 = v230 + 1;
            *(void *)(v229 + 8 * v230) = v213;
            goto LABEL_436;
          }
LABEL_415:
          if (3 * v234 <= 4 * ((int)v230 - *(_DWORD *)(a1 + 3480)))
          {
            if (v234 >= 0x40) {
              v234 *= 2;
            }
            else {
              unsigned int v234 = 128;
            }
          }
          else if (v234 - v230 >= v234 >> 3)
          {
            goto LABEL_417;
          }
          uint64_t v306 = v209;
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 3456), v234);
          unsigned int v209 = v306;
          uint64_t v182 = v2400;
          unsigned int v234 = *(_DWORD *)(a1 + 3472);
          uint64_t v229 = *(void *)(a1 + 3464);
LABEL_417:
          unsigned int v235 = v234 - 1;
          unsigned int v236 = (v234 - 1) & ((v213 >> 4) ^ (v213 >> 9));
          unsigned int v237 = (void *)(v229 + 8 * v236);
          uint64_t v238 = *v237;
          if (*v237 == -1)
          {
            __int16 v239 = 0;
LABEL_429:
            if (v239) {
              unsigned int v243 = v239;
            }
            else {
              unsigned int v243 = v237;
            }
            if (*v243 != v213)
            {
              if (*v243 == -2) {
                --*(_DWORD *)(a1 + 3480);
              }
              else {
                ++*v185;
              }
              *unsigned int v243 = v213;
            }
          }
          else
          {
            __int16 v239 = 0;
            int v240 = 1;
            while (v238 != v213)
            {
              if (v239) {
                BOOL v241 = 0;
              }
              else {
                BOOL v241 = v238 == -2;
              }
              if (v241) {
                __int16 v239 = v237;
              }
              unsigned int v242 = v236 + v240++;
              unsigned int v236 = v242 & v235;
              unsigned int v237 = (void *)(v229 + 8 * (v242 & v235));
              uint64_t v238 = *v237;
              if (*v237 == -1) {
                goto LABEL_429;
              }
            }
          }
          goto LABEL_436;
        }
        BOOL v231 = 0;
        uint64_t v232 = 8 * v230;
        char v233 = *(void **)(a1 + 3464);
        while (*v233 != v213)
        {
          if (*v233 == -2) {
            BOOL v231 = v233;
          }
          ++v233;
          v232 -= 8;
          if (!v232)
          {
            if (!v231) {
              goto LABEL_412;
            }
            void *v231 = v213;
            --*(_DWORD *)(a1 + 3480);
            break;
          }
        }
      }
LABEL_436:
      int v244 = *(_DWORD *)(v213 + 20);
      if ((v244 & 0x40000000) == 0)
      {
        uint64_t v245 = v244 & 0x7FFFFFF;
        uint64_t v246 = (uint64_t *)(v213 - 32 * v245);
        if (v245) {
          goto LABEL_440;
        }
        goto LABEL_554;
      }
      uint64_t v246 = *(uint64_t **)(v213 - 8);
      uint64_t v245 = v244 & 0x7FFFFFF;
      if (v245)
      {
LABEL_440:
        int v247 = &v246[4 * v245];
        while (1)
        {
          uint64_t v248 = *v246;
          if (*(unsigned __int8 *)(*v246 + 16) < 0x1Cu) {
            goto LABEL_520;
          }
          uint64_t v249 = *(void *)(a1 + 3304);
          uint64_t v250 = *(void *)(a1 + 3296);
          if (v249 == v250)
          {
            uint64_t v251 = *v183;
            unsigned int v252 = (void *)(v249 + 8 * v251);
            if (v251)
            {
              uint64_t v253 = 0;
              uint64_t v254 = 8 * v251;
              while (*(void *)(v249 + v253) != v248)
              {
                v253 += 8;
                if (v254 == v253) {
                  goto LABEL_460;
                }
              }
              unsigned int v252 = (void *)(v249 + v253);
            }
LABEL_460:
            uint64_t v250 = *(void *)(a1 + 3304);
          }
          else
          {
            uint64_t v255 = *v184;
            int v256 = v255 - 1;
            unsigned int v257 = (v255 - 1) & ((v248 >> 4) ^ (v248 >> 9));
            unsigned int v252 = (void *)(v249 + 8 * v257);
            uint64_t v258 = *v252;
            if (*v252 == -1)
            {
              uint64_t v259 = 0;
LABEL_534:
              if (v259) {
                unsigned int v252 = v259;
              }
              if (*v252 != v248) {
                unsigned int v252 = (void *)(v249 + 8 * v255);
              }
            }
            else
            {
              uint64_t v259 = 0;
              int v260 = 1;
              while (v258 != v248)
              {
                if (v259) {
                  BOOL v261 = 0;
                }
                else {
                  BOOL v261 = v258 == -2;
                }
                if (v261) {
                  uint64_t v259 = v252;
                }
                unsigned int v262 = v257 + v260++;
                unsigned int v257 = v262 & v256;
                unsigned int v252 = (void *)(v249 + 8 * (v262 & v256));
                uint64_t v258 = *v252;
                if (*v252 == -1) {
                  goto LABEL_534;
                }
              }
            }
          }
          int v263 = (unsigned int *)(v249 == v250 ? a1 + 3316 : a1 + 3312);
          if (v252 == (void *)(v249 + 8 * *v263)) {
            goto LABEL_520;
          }
          uint64_t v264 = (char *)v2426[1];
          uint64_t v265 = HIDWORD(v2427);
          if (v2426[1] == v2426[0])
          {
            if (HIDWORD(v2427))
            {
              unsigned int v266 = 0;
              uint64_t v267 = 8 * HIDWORD(v2427);
              unsigned int v268 = v2426[1];
              while (*v268 != v248)
              {
                if (*v268 == -2) {
                  unsigned int v266 = v268;
                }
                ++v268;
                v267 -= 8;
                if (!v267)
                {
                  if (!v266) {
                    goto LABEL_473;
                  }
                  *unsigned int v266 = v248;
                  --v2428;
                  goto LABEL_497;
                }
              }
              goto LABEL_520;
            }
LABEL_473:
            unsigned int v269 = v2427;
            if (HIDWORD(v2427) < v2427)
            {
              ++HIDWORD(v2427);
              *((void *)v2426[1] + v265) = v248;
              goto LABEL_497;
            }
          }
          else
          {
            unsigned int v269 = v2427;
          }
          if (3 * v269 <= 4 * (HIDWORD(v2427) - v2428)) {
            break;
          }
          if (v269 - HIDWORD(v2427) < v269 >> 3) {
            goto LABEL_552;
          }
LABEL_478:
          unsigned int v270 = v269 - 1;
          unsigned int v271 = (v269 - 1) & ((v248 >> 4) ^ (v248 >> 9));
          unsigned int v272 = &v264[8 * v271];
          uint64_t v273 = *(void *)v272;
          if (*(void *)v272 != -1)
          {
            int v274 = 0;
            int v275 = 1;
            while (v273 != v248)
            {
              if (v274) {
                BOOL v276 = 0;
              }
              else {
                BOOL v276 = v273 == -2;
              }
              if (v276) {
                int v274 = v272;
              }
              unsigned int v277 = v271 + v275++;
              unsigned int v271 = v277 & v270;
              unsigned int v272 = &v264[8 * (v277 & v270)];
              uint64_t v273 = *(void *)v272;
              if (*(void *)v272 == -1) {
                goto LABEL_490;
              }
            }
            goto LABEL_520;
          }
          int v274 = 0;
LABEL_490:
          if (v274) {
            int v278 = v274;
          }
          else {
            int v278 = v272;
          }
          if (*(void *)v278 == v248) {
            goto LABEL_520;
          }
          if (*(void *)v278 == -2) {
            --v2428;
          }
          else {
            ++HIDWORD(v2427);
          }
          *(void *)int v278 = v248;
LABEL_497:
          uint64_t v279 = *(void *)(a1 + 3464);
          uint64_t v280 = *(void *)(a1 + 3456);
          if (v279 == v280)
          {
            uint64_t v281 = *v185;
            uint64_t v282 = (void *)(v279 + 8 * v281);
            if (v281)
            {
              uint64_t v283 = 0;
              uint64_t v284 = 8 * v281;
              while (*(void *)(v279 + v283) != v248)
              {
                v283 += 8;
                if (v284 == v283) {
                  goto LABEL_515;
                }
              }
              uint64_t v282 = (void *)(v279 + v283);
            }
LABEL_515:
            uint64_t v280 = *(void *)(a1 + 3464);
          }
          else
          {
            uint64_t v285 = *v186;
            int v286 = v285 - 1;
            unsigned int v287 = (v285 - 1) & ((v248 >> 4) ^ (v248 >> 9));
            uint64_t v282 = (void *)(v279 + 8 * v287);
            uint64_t v288 = *v282;
            if (*v282 == -1)
            {
              int v289 = 0;
LABEL_539:
              if (v289) {
                uint64_t v282 = v289;
              }
              if (*v282 != v248) {
                uint64_t v282 = (void *)(v279 + 8 * v285);
              }
            }
            else
            {
              int v289 = 0;
              int v290 = 1;
              while (v288 != v248)
              {
                if (v289) {
                  BOOL v291 = 0;
                }
                else {
                  BOOL v291 = v288 == -2;
                }
                if (v291) {
                  int v289 = v282;
                }
                unsigned int v292 = v287 + v290++;
                unsigned int v287 = v292 & v286;
                uint64_t v282 = (void *)(v279 + 8 * (v292 & v286));
                uint64_t v288 = *v282;
                if (*v282 == -1) {
                  goto LABEL_539;
                }
              }
            }
          }
          if (v279 == v280) {
            uint64_t v293 = (unsigned int *)(a1 + 3476);
          }
          else {
            uint64_t v293 = (unsigned int *)(a1 + 3472);
          }
          if (v282 == (void *)(v279 + 8 * *v293))
          {
            int v294 = *(uint64_t **)(a1 + 4608);
            int v295 = *((_DWORD *)v294 + 4);
            if (v295)
            {
              uint64_t v296 = *(void *)(v248 + 40);
              uint64_t v297 = *v294;
              unsigned int v298 = v295 - 1;
              uint64_t v299 = ((v296 >> 4) ^ (v296 >> 9)) & (v295 - 1);
              uint64_t v300 = *(void *)(v297 + 16 * v299);
              if (v296 == v300)
              {
LABEL_527:
                int v303 = *(llvm::SmallPtrSetImplBase **)(v297 + 16 * v299 + 8);
                if (v303)
                {
                  if (v209 == v303)
                  {
LABEL_546:
                    unint64_t v305 = *(unsigned int *)(a1 + 3624);
                    if (v305 >= *(unsigned int *)(a1 + 3628)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)(a1 + 3616) + 8 * v305) = v248;
                    ++*(_DWORD *)(a1 + 3624);
                  }
                  else
                  {
                    uint64_t v304 = v209;
                    while (v304)
                    {
                      uint64_t v304 = *(llvm::SmallPtrSetImplBase **)v304;
                      if (v304 == v303) {
                        goto LABEL_546;
                      }
                    }
                    while (v303)
                    {
                      int v303 = *(llvm::SmallPtrSetImplBase **)v303;
                      if (v303 == v209) {
                        goto LABEL_546;
                      }
                    }
                  }
                }
              }
              else
              {
                int v301 = 1;
                while (v300 != -4096)
                {
                  int v302 = v299 + v301++;
                  uint64_t v299 = v302 & v298;
                  uint64_t v300 = *(void *)(v297 + 16 * v299);
                  if (v296 == v300) {
                    goto LABEL_527;
                  }
                }
              }
            }
          }
LABEL_520:
          v246 += 4;
          if (v246 == v247) {
            goto LABEL_554;
          }
        }
        if (v269 >= 0x40) {
          v269 *= 2;
        }
        else {
          unsigned int v269 = 128;
        }
LABEL_552:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2426, v269);
        uint64_t v182 = v2400;
        unsigned int v209 = v2406;
        unsigned int v269 = v2427;
        uint64_t v264 = (char *)v2426[1];
        goto LABEL_478;
      }
LABEL_554:
      unsigned int v212 = *(_DWORD *)(a1 + 3624);
      if (!v212) {
        goto LABEL_370;
      }
    }
  }
LABEL_574:
  if (v2444 != &v2446) {
    free(v2444);
  }
  if (v2426[1] != v2426[0]) {
    free(v2426[1]);
  }
  if ((long long *)v2459 != &v2460) {
    free((void *)v2459);
  }
  if (!v2413[2])
  {
    uint64_t v309 = *(void *)(a1 + 3208);
    uint64_t v310 = 3216;
    if (v309 == *(void *)(a1 + 3200)) {
      uint64_t v310 = 3220;
    }
    uint64_t v311 = *(unsigned int *)(a1 + v310);
    if (v311)
    {
      uint64_t v312 = 8 * v311;
      uint64_t v313 = *(unint64_t **)(a1 + 3208);
      while (*v313 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v313;
        v312 -= 8;
        if (!v312) {
          goto LABEL_581;
        }
      }
    }
    else
    {
      uint64_t v313 = *(unint64_t **)(a1 + 3208);
    }
    v2097 = (llvm::SmallPtrSetImplBase *)(v309 + 8 * v311);
    if (v313 != (unint64_t *)v2097)
    {
      v2396 = v2097;
      unint64_t v2098 = *v313;
LABEL_4134:
      v2099 = *(llvm::SmallPtrSetImplBase **)(v2098 + 32);
      v2410 = *(llvm::SmallPtrSetImplBase **)(v2098 + 40);
      while (v2099 != v2410)
      {
        uint64_t v2100 = *(void *)v2099 + 40;
        for (uint64_t j = *(void *)(*(void *)v2099 + 48); j != v2100; uint64_t j = *(void *)(j + 8))
        {
          if (j) {
            uint64_t v2102 = j - 24;
          }
          else {
            uint64_t v2102 = 0;
          }
          uint64_t v2103 = *(void *)(a1 + 3304);
          uint64_t v2104 = *(void *)(a1 + 3296);
          if (v2103 == v2104)
          {
            uint64_t v2105 = *(unsigned int *)(a1 + 3316);
            v2106 = (void *)(v2103 + 8 * v2105);
            if (v2105)
            {
              uint64_t v2107 = 0;
              uint64_t v2108 = 8 * v2105;
              while (*(void *)(v2103 + v2107) != v2102)
              {
                v2107 += 8;
                if (v2108 == v2107) {
                  goto LABEL_4158;
                }
              }
              v2106 = (void *)(v2103 + v2107);
            }
LABEL_4158:
            uint64_t v2104 = *(void *)(a1 + 3304);
          }
          else
          {
            uint64_t v2109 = *(unsigned int *)(a1 + 3312);
            int v2110 = v2109 - 1;
            unsigned int v2111 = (v2109 - 1) & ((v2102 >> 4) ^ (v2102 >> 9));
            v2106 = (void *)(v2103 + 8 * v2111);
            uint64_t v2112 = *v2106;
            if (*v2106 == -1)
            {
              v2113 = 0;
LABEL_4201:
              if (v2113) {
                v2106 = v2113;
              }
              if (*v2106 != v2102) {
                v2106 = (void *)(v2103 + 8 * v2109);
              }
            }
            else
            {
              v2113 = 0;
              int v2114 = 1;
              while (v2112 != v2102)
              {
                if (v2113) {
                  BOOL v2115 = 0;
                }
                else {
                  BOOL v2115 = v2112 == -2;
                }
                if (v2115) {
                  v2113 = v2106;
                }
                unsigned int v2116 = v2111 + v2114++;
                unsigned int v2111 = v2116 & v2110;
                v2106 = (void *)(v2103 + 8 * (v2116 & v2110));
                uint64_t v2112 = *v2106;
                if (*v2106 == -1) {
                  goto LABEL_4201;
                }
              }
            }
          }
          if (v2103 == v2104) {
            v2117 = (unsigned int *)(a1 + 3316);
          }
          else {
            v2117 = (unsigned int *)(a1 + 3312);
          }
          if (v2106 != (void *)(v2103 + 8 * *v2117)
            || *(unsigned char *)(v2102 + 16) == 83
            || !sub_1CC85ED24(v2102, (uint64_t)v2412, *(int **)(a1 + 4592), *(void *)(a1 + 4616), v2413[9], 0))
          {
            unint64_t v2118 = *(unsigned int *)(a2 + 8);
            if (v2118 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a2 + 8 * v2118) = v2102;
            ++*(_DWORD *)(a2 + 8);
            uint64_t v2119 = *(void *)(a2 + 536);
            uint64_t v2120 = *(unsigned int *)(a2 + 548);
            if (v2119 == *(void *)(a2 + 528))
            {
              if (v2120)
              {
                v2121 = 0;
                uint64_t v2122 = 8 * v2120;
                v2123 = *(uint64_t **)(a2 + 536);
                while (*v2123 != v2102)
                {
                  if (*v2123 == -2) {
                    v2121 = v2123;
                  }
                  ++v2123;
                  v2122 -= 8;
                  if (!v2122)
                  {
                    if (!v2121) {
                      goto LABEL_4174;
                    }
                    uint64_t *v2121 = v2102;
                    --*(_DWORD *)(a2 + 552);
                    goto LABEL_4198;
                  }
                }
                goto LABEL_4198;
              }
LABEL_4174:
              unsigned int v2124 = *(_DWORD *)(a2 + 544);
              if (v2120 < v2124)
              {
                *(_DWORD *)(a2 + 548) = v2120 + 1;
                *(void *)(v2119 + 8 * v2120) = v2102;
LABEL_4198:
                llvm::DivergenceTracker::propagateDivergence((unsigned int *)a2, a2);
                continue;
              }
            }
            else
            {
              unsigned int v2124 = *(_DWORD *)(a2 + 544);
            }
            if (3 * v2124 <= 4 * ((int)v2120 - *(_DWORD *)(a2 + 552)))
            {
              if (v2124 >= 0x40) {
                v2124 *= 2;
              }
              else {
                unsigned int v2124 = 128;
              }
            }
            else if (v2124 - v2120 >= v2124 >> 3)
            {
              goto LABEL_4179;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a2 + 528), v2124);
            unsigned int v2124 = *(_DWORD *)(a2 + 544);
            uint64_t v2119 = *(void *)(a2 + 536);
LABEL_4179:
            unsigned int v2125 = v2124 - 1;
            unsigned int v2126 = (v2124 - 1) & ((v2102 >> 4) ^ (v2102 >> 9));
            v2127 = (uint64_t *)(v2119 + 8 * v2126);
            uint64_t v2128 = *v2127;
            if (*v2127 == -1)
            {
              v2129 = 0;
LABEL_4191:
              if (v2129) {
                v2133 = v2129;
              }
              else {
                v2133 = v2127;
              }
              if (*v2133 != v2102)
              {
                if (*v2133 == -2) {
                  --*(_DWORD *)(a2 + 552);
                }
                else {
                  ++*(_DWORD *)(a2 + 548);
                }
                uint64_t *v2133 = v2102;
              }
            }
            else
            {
              v2129 = 0;
              int v2130 = 1;
              while (v2128 != v2102)
              {
                if (v2129) {
                  BOOL v2131 = 0;
                }
                else {
                  BOOL v2131 = v2128 == -2;
                }
                if (v2131) {
                  v2129 = v2127;
                }
                unsigned int v2132 = v2126 + v2130++;
                unsigned int v2126 = v2132 & v2125;
                v2127 = (uint64_t *)(v2119 + 8 * (v2132 & v2125));
                uint64_t v2128 = *v2127;
                if (*v2127 == -1) {
                  goto LABEL_4191;
                }
              }
            }
            goto LABEL_4198;
          }
        }
        v2099 = (llvm::SmallPtrSetImplBase *)((char *)v2099 + 8);
      }
      v2134 = v313 + 1;
      while (v2134 != (unint64_t *)v2396)
      {
        unint64_t v2135 = *v2134++;
        unint64_t v2098 = v2135;
        if (v2135 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v313 = v2134 - 1;
          goto LABEL_4134;
        }
      }
    }
  }
LABEL_581:
  BOOL v307 = *(llvm::Module **)(v2398 + 40);
  if (*(void *)(a1 + 4616))
  {
    int v308 = v2413[1];
    uint64_t v14 = (void *)&unk_1CD91C000;
    goto LABEL_594;
  }
  uint64_t v14 = &unk_1CD91C000;
LABEL_592:
  if (!v2413[1]) {
    goto LABEL_1099;
  }
  int v308 = 1;
LABEL_594:
  *(void *)&long long v2459 = v2461;
  *((void *)&v2459 + 1) = v2461;
  *(void *)&long long v2460 = 16;
  DWORD2(v2460) = 0;
  v2407 = (llvm::SmallPtrSetImplBase *)(a1 + 3888);
  if (v308)
  {
    v2420 = 0;
    uint64_t v2421 = 0;
    int v2422 = 0;
    v2426[0] = &v2427;
    v2426[1] = (void *)0xA00000000;
    v2456 = 0;
    v2455 = 0;
    LODWORD(v2457) = 0;
    sub_1CD10B93C(v307, (uint64_t)&v2420, (uint64_t)v2426, (uint64_t)&v2455);
    int v2392 = v2421;
    v2444 = &v2446;
    uint64_t v2445 = v14[24];
    unint64_t v314 = *(llvm::SmallPtrSetImplBase **)(a1 + 4576);
    v2401 = *(llvm::SmallPtrSetImplBase **)(a1 + 4568);
    if (v314 != v2401)
    {
      while (1)
      {
        uint64_t v316 = *((void *)v314 - 1);
        unint64_t v314 = (llvm::SmallPtrSetImplBase *)((char *)v314 - 8);
        uint64_t v315 = v316;
        uint64_t v317 = v316 + 40;
        uint64_t v318 = *(void *)(v316 + 48);
        if (v318 != v316 + 40) {
          break;
        }
LABEL_758:
        if (v314 == v2401) {
          goto LABEL_759;
        }
      }
      unsigned int v319 = (v315 >> 4) ^ (v315 >> 9);
      while (1)
      {
        if (v318) {
          uint64_t v320 = v318 - 24;
        }
        else {
          uint64_t v320 = 0;
        }
        int v321 = *(unsigned __int8 *)(v320 + 16);
        if (v318 && v321 == 61)
        {
          uint64_t v322 = **(void **)(v320 - 32);
          int v323 = *(_DWORD *)(v322 + 8);
          if ((v323 & 0xFE) == 0x12)
          {
            uint64_t v324 = *(void *)(v322 + 16);
            goto LABEL_605;
          }
          goto LABEL_606;
        }
        if (v321 == 84)
        {
          uint64_t v330 = *(void *)(v320 - 32);
          if (!v330
            || *(unsigned char *)(v330 + 16)
            || *(void *)(v330 + 24) != *(void *)(v320 + 72)
            || (*(unsigned char *)(v330 + 33) & 0x20) == 0)
          {
            goto LABEL_678;
          }
          unsigned int v331 = *(_DWORD *)(*(void *)(v318 - 56) + 36);
          char v332 = 1;
          if (v331 - 2630 >= 0x20 && v331 != 2144)
          {
            if (v331 - 2838 > 2) {
              goto LABEL_678;
            }
            char v332 = 0;
          }
          if (v331 - 2376 >= 0x20)
          {
            if (v331 == 2144)
            {
              uint64_t v333 = 0;
            }
            else
            {
              if (v331 - 2784 < 3) {
                char v332 = 1;
              }
              uint64_t v406 = 3;
              if (v331 - 2784 < 3) {
                uint64_t v406 = 0;
              }
              BOOL v31 = v331 >= 0xB16;
              uint64_t v333 = 0xFFFFFFFFLL;
              if (v31) {
                uint64_t v333 = 0;
              }
              if (v332) {
                uint64_t v333 = v406;
              }
            }
          }
          else
          {
            uint64_t v333 = 2;
          }
          uint64_t v324 = *(void *)(v318 - 24 - 32 * (*(_DWORD *)(v318 - 4) & 0x7FFFFFF) + 32 * v333);
LABEL_605:
          int v323 = *(_DWORD *)(*(void *)v324 + 8);
LABEL_606:
          if ((v323 & 0xFFFFFF00) == 0x100)
          {
            uint64_t v325 = *(void *)(a2 + 536);
            uint64_t v326 = *(void *)(a2 + 528);
            if (v325 == v326)
            {
              uint64_t v327 = *(unsigned int *)(a2 + 548);
              uint64_t v328 = (void *)(v325 + 8 * v327);
              if (v327)
              {
                uint64_t v329 = 0;
                while (*(void *)(v325 + v329) != v320)
                {
                  v329 += 8;
                  if (8 * v327 == v329) {
                    goto LABEL_656;
                  }
                }
                uint64_t v328 = (void *)(v325 + v329);
              }
LABEL_656:
              uint64_t v326 = *(void *)(a2 + 536);
            }
            else
            {
              uint64_t v342 = *(unsigned int *)(a2 + 544);
              int v343 = v342 - 1;
              unsigned int v344 = (v342 - 1) & ((v320 >> 4) ^ (v320 >> 9));
              uint64_t v328 = (void *)(v325 + 8 * v344);
              uint64_t v345 = *v328;
              if (*v328 == -1)
              {
                uint64_t v346 = 0;
LABEL_681:
                if (v346) {
                  uint64_t v328 = v346;
                }
                LODWORD(v327) = *(_DWORD *)(a2 + 548);
                if (*v328 != v320) {
                  uint64_t v328 = (void *)(v325 + 8 * v342);
                }
              }
              else
              {
                uint64_t v346 = 0;
                int v347 = 1;
                while (v345 != v320)
                {
                  if (v346) {
                    BOOL v348 = 0;
                  }
                  else {
                    BOOL v348 = v345 == -2;
                  }
                  if (v348) {
                    uint64_t v346 = v328;
                  }
                  unsigned int v349 = v344 + v347++;
                  unsigned int v344 = v349 & v343;
                  uint64_t v328 = (void *)(v325 + 8 * (v349 & v343));
                  uint64_t v345 = *v328;
                  if (*v328 == -1) {
                    goto LABEL_681;
                  }
                }
                LODWORD(v327) = *(_DWORD *)(a2 + 548);
              }
            }
            unsigned int v350 = *(_DWORD *)(a2 + 544);
            if (v325 == v326) {
              unsigned int v350 = v327;
            }
            if (v328 != (void *)(v325 + 8 * v350)) {
              break;
            }
            unsigned int v351 = *(uint64_t **)(a1 + 4608);
            int v352 = *((_DWORD *)v351 + 4);
            if (v352)
            {
              uint64_t v353 = *v351;
              unsigned int v354 = v352 - 1;
              uint64_t v355 = (v352 - 1) & v319;
              uint64_t v356 = *(void *)(v353 + 16 * v355);
              if (v315 == v356)
              {
LABEL_665:
                if (*(void *)(v353 + 16 * v355 + 8) && v2445)
                {
                  uint64_t v359 = v2444;
                  int v360 = &v2444[v2445];
                  do
                  {
                    uint64_t v361 = *v359;
                    if (sub_1CC871168((uint64_t)v2407, *v359))
                    {
                      unint64_t v362 = *(void **)(a1 + 4152);
                      uint64_t v363 = *(unsigned int *)(a1 + 4160);
                      uint64_t v364 = &v362[v363];
                      if (v363)
                      {
                        uint64_t v365 = 8 * v363;
                        while (*v362 != v361)
                        {
                          ++v362;
                          v365 -= 8;
                          if (!v365)
                          {
                            unint64_t v362 = v364;
                            break;
                          }
                        }
                      }
                      if (v364 != v362 + 1)
                      {
                        memmove(v362, v362 + 1, (char *)v364 - (char *)(v362 + 1));
                        LODWORD(v363) = *(_DWORD *)(a1 + 4160);
                      }
                      *(_DWORD *)(a1 + 4160) = v363 - 1;
                    }
                    ++v359;
                  }
                  while (v359 != v360);
                }
              }
              else
              {
                int v357 = 1;
                while (v356 != -4096)
                {
                  int v358 = v355 + v357++;
                  uint64_t v355 = v358 & v354;
                  uint64_t v356 = *(void *)(v353 + 16 * v355);
                  if (v315 == v356) {
                    goto LABEL_665;
                  }
                }
              }
            }
          }
          goto LABEL_678;
        }
        if (v321 == 60) {
          uint64_t v334 = v320;
        }
        else {
          uint64_t v334 = 0;
        }
        if (!v318 || v321 != 60) {
          goto LABEL_678;
        }
        int v335 = *(llvm **)(v334 - 32);
        int v336 = *(_DWORD *)(*(void *)v335 + 8);
        if ((v336 & 0xFE) == 0x12) {
          int v336 = *(_DWORD *)(**(void **)(*(void *)v335 + 16) + 8);
        }
        if (v336 & 0xFFFFFF00) != 0x100 || (*(_WORD *)(v334 + 18)) {
          goto LABEL_678;
        }
        if (v2392)
        {
          if (*((unsigned char *)v335 + 16) != 3)
          {
            UnderlyingObject = llvm::getUnderlyingObject(v335, (const llvm::Value *)6);
            if (!UnderlyingObject) {
              goto LABEL_678;
            }
            if (*((unsigned char *)UnderlyingObject + 16) != 60) {
              goto LABEL_678;
            }
            int v335 = llvm::getUnderlyingObject(*((llvm **)UnderlyingObject - 4), (const llvm::Value *)6);
            if (!v335 || *((unsigned char *)v335 + 16) != 3) {
              goto LABEL_678;
            }
          }
          if (v2422)
          {
            unsigned int v338 = ((v335 >> 4) ^ (v335 >> 9)) & (v2422 - 1);
            uint64_t v339 = (llvm *)*((void *)v2420 + 8 * (unint64_t)v338);
            if (v335 == v339) {
              goto LABEL_678;
            }
            int v340 = 1;
            while (v339 != (llvm *)-4096)
            {
              unsigned int v341 = v338 + v340++;
              unsigned int v338 = v341 & (v2422 - 1);
              uint64_t v339 = (llvm *)*((void *)v2420 + 8 * (unint64_t)v338);
              if (v335 == v339) {
                goto LABEL_678;
              }
            }
          }
          v2424 = (void *)v334;
          if (*(unsigned char *)v2407)
          {
            int v387 = 32;
            uint64_t v388 = a1 + 3896;
LABEL_713:
            int v389 = v387 - 1;
            unsigned int v390 = v389 & ((v334 >> 4) ^ (v334 >> 9));
            uint64_t v391 = (void *)(v388 + 8 * v390);
            uint64_t v392 = *v391;
            if (v334 != *v391)
            {
              uint64_t v393 = 0;
              int v394 = 1;
              while (v392 != -4096)
              {
                if (v393) {
                  BOOL v395 = 0;
                }
                else {
                  BOOL v395 = v392 == -8192;
                }
                if (v395) {
                  uint64_t v393 = v391;
                }
                unsigned int v396 = v390 + v394++;
                unsigned int v390 = v396 & v389;
                uint64_t v391 = (void *)(v388 + 8 * v390);
                uint64_t v392 = *v391;
                if (v334 == *v391) {
                  goto LABEL_728;
                }
              }
              if (v393) {
                unsigned int v397 = v393;
              }
              else {
                unsigned int v397 = v391;
              }
              goto LABEL_726;
            }
          }
          else
          {
            int v387 = *(_DWORD *)(a1 + 3904);
            if (v387)
            {
              uint64_t v388 = *(void *)(a1 + 3896);
              goto LABEL_713;
            }
            unsigned int v397 = 0;
LABEL_726:
            unsigned int v398 = sub_1CC872F3C((uint64_t)v2407, (uint64_t)&v2424, &v2424, v397);
            *unsigned int v398 = v2424;
            unint64_t v399 = *(unsigned int *)(a1 + 4160);
            if (v399 >= *(unsigned int *)(a1 + 4164)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 4152) + 8 * v399) = v2424;
            ++*(_DWORD *)(a1 + 4160);
          }
LABEL_728:
          v400 = *(uint64_t **)(a1 + 4608);
          int v401 = *((_DWORD *)v400 + 4);
          if (v401)
          {
            uint64_t v381 = *v400;
            unsigned int v402 = v401 - 1;
            uint64_t v383 = (v401 - 1) & v319;
            uint64_t v403 = *(void *)(v381 + 16 * v383);
            if (v315 != v403)
            {
              int v404 = 1;
              while (v403 != -4096)
              {
                int v405 = v383 + v404++;
                uint64_t v383 = v405 & v402;
                uint64_t v403 = *(void *)(v381 + 16 * v383);
                if (v315 == v403) {
                  goto LABEL_733;
                }
              }
              goto LABEL_678;
            }
            goto LABEL_733;
          }
          goto LABEL_678;
        }
        v2424 = (void *)v334;
        if (*(unsigned char *)v2407)
        {
          int v366 = 32;
          uint64_t v367 = a1 + 3896;
        }
        else
        {
          int v366 = *(_DWORD *)(a1 + 3904);
          if (!v366)
          {
            v376 = 0;
            goto LABEL_702;
          }
          uint64_t v367 = *(void *)(a1 + 3896);
        }
        int v368 = v366 - 1;
        unsigned int v369 = v368 & ((v334 >> 4) ^ (v334 >> 9));
        uint64_t v370 = (void *)(v367 + 8 * v369);
        uint64_t v371 = *v370;
        if (v334 == *v370) {
          goto LABEL_704;
        }
        uint64_t v372 = 0;
        int v373 = 1;
        while (v371 != -4096)
        {
          if (v372) {
            BOOL v374 = 0;
          }
          else {
            BOOL v374 = v371 == -8192;
          }
          if (v374) {
            uint64_t v372 = v370;
          }
          unsigned int v375 = v369 + v373++;
          unsigned int v369 = v375 & v368;
          uint64_t v370 = (void *)(v367 + 8 * v369);
          uint64_t v371 = *v370;
          if (v334 == *v370) {
            goto LABEL_704;
          }
        }
        if (v372) {
          v376 = v372;
        }
        else {
          v376 = v370;
        }
LABEL_702:
        int v377 = sub_1CC872F3C((uint64_t)v2407, (uint64_t)&v2424, &v2424, v376);
        void *v377 = v2424;
        unint64_t v378 = *(unsigned int *)(a1 + 4160);
        if (v378 >= *(unsigned int *)(a1 + 4164)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 4152) + 8 * v378) = v2424;
        ++*(_DWORD *)(a1 + 4160);
LABEL_704:
        uint64_t v379 = *(uint64_t **)(a1 + 4608);
        int v380 = *((_DWORD *)v379 + 4);
        if (v380)
        {
          uint64_t v381 = *v379;
          unsigned int v382 = v380 - 1;
          uint64_t v383 = (v380 - 1) & v319;
          uint64_t v384 = *(void *)(v381 + 16 * v383);
          if (v315 != v384)
          {
            int v385 = 1;
            while (v384 != -4096)
            {
              int v386 = v383 + v385++;
              uint64_t v383 = v386 & v382;
              uint64_t v384 = *(void *)(v381 + 16 * v383);
              if (v315 == v384) {
                goto LABEL_733;
              }
            }
            goto LABEL_678;
          }
LABEL_733:
          if (*(void *)(v381 + 16 * v383 + 8))
          {
            if (v2445 >= (unint64_t)HIDWORD(v2445)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2444[v2445] = v334;
            LODWORD(v2445) = v2445 + 1;
          }
        }
LABEL_678:
        uint64_t v318 = *(void *)(v318 + 8);
        if (v318 == v317) {
          goto LABEL_758;
        }
      }
    }
LABEL_759:
    if (v2444 != &v2446) {
      free(v2444);
    }
    MEMORY[0x1D25D9CD0](v2455, 4);
    int v407 = (uint64_t *)v2426[0];
    if (LODWORD(v2426[1]))
    {
      uint64_t v408 = 16 * LODWORD(v2426[1]);
      unsigned int v409 = (char *)v2426[0] - 16;
      do
      {
        uint64_t v410 = *(void ***)&v409[v408];
        if ((v410 & 1) == 0 && v410)
        {
          if (*v410 != v410 + 2) {
            free(*v410);
          }
          MEMORY[0x1D25D9CE0](v410, 0x1080C40EF38A13ELL);
        }
        v408 -= 16;
      }
      while (v408);
      int v407 = (uint64_t *)v2426[0];
    }
    if (v407 != &v2427) {
      free(v407);
    }
    sub_1CBA6598C((uint64_t)&v2420);
    MEMORY[0x1D25D9CD0](v2420, 8);
  }
  v2426[0] = &v2427;
  v2426[1] = (void *)0x2000000000;
  BOOL v411 = *(llvm::SmallPtrSetImplBase **)(a1 + 4576);
  v2393 = *(llvm::SmallPtrSetImplBase **)(a1 + 4568);
  if (v411 == v2393) {
    goto LABEL_1095;
  }
  char v412 = 0;
  v2385 = (llvm::SmallPtrSetImplBase *)(a2 + 528);
  do
  {
    uint64_t v413 = *((void *)v411 - 1);
    v2402 = (llvm::SmallPtrSetImplBase *)((char *)v411 - 8);
    uint64_t v414 = v413 + 40;
    for (uint64_t k = *(void *)(v413 + 48); k != v414; uint64_t k = *(void *)(k + 8))
    {
      if (k) {
        uint64_t v416 = k - 24;
      }
      else {
        uint64_t v416 = 0;
      }
      if (!v2413[1]) {
        goto LABEL_901;
      }
      int v417 = *(unsigned __int8 *)(v416 + 16);
      if (v417 == 60) {
        uint64_t v418 = v416;
      }
      else {
        uint64_t v418 = 0;
      }
      BOOL v419 = v417 == 60 && k != 0;
      if (!v419)
      {
        BOOL v424 = 1;
        goto LABEL_844;
      }
      uint64_t v420 = **(void **)(v418 - 32);
      int v421 = *(_DWORD *)(v420 + 8);
      if ((v421 & 0xFE) == 0x12) {
        int v421 = *(_DWORD *)(**(void **)(v420 + 16) + 8);
      }
      if ((v421 & 0xFFFFFF00) != 0x100)
      {
        LOBYTE(v419) = 0;
        BOOL v424 = 1;
        goto LABEL_808;
      }
      int v422 = (*(unsigned __int16 *)(v418 + 18) >> 7) & 7;
      BOOL v424 = v422 == 4 || v422 == 7;
      unsigned int v425 = v418 >> 4;
      if (*(unsigned char *)v2407)
      {
        int v426 = 32;
        uint64_t v427 = a1 + 3896;
      }
      else
      {
        int v426 = *(_DWORD *)(a1 + 3904);
        if (!v426) {
          goto LABEL_810;
        }
        uint64_t v427 = *(void *)(a1 + 3896);
      }
      int v428 = v426 - 1;
      unsigned int v429 = v428 & (v425 ^ (v418 >> 9));
      uint64_t v430 = *(void *)(v427 + 8 * v429);
      if (v418 == v430)
      {
LABEL_807:
        LOBYTE(v419) = 0;
LABEL_808:
        if ((*(_WORD *)(v416 + 18) & 0x301) != 0) {
          goto LABEL_854;
        }
        goto LABEL_900;
      }
      int v431 = 1;
      while (v430 != -4096)
      {
        unsigned int v432 = v429 + v431++;
        unsigned int v429 = v432 & v428;
        uint64_t v430 = *(void *)(v427 + 8 * v429);
        if (v418 == v430) {
          goto LABEL_807;
        }
      }
LABEL_810:
      unint64_t v433 = *(unsigned int *)(a2 + 8);
      if (v433 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v433) = v418;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v434 = *(void *)(a2 + 536);
      uint64_t v435 = *(unsigned int *)(a2 + 548);
      if (v434 != *(void *)(a2 + 528))
      {
        unsigned int v439 = *(_DWORD *)(a2 + 544);
LABEL_822:
        if (3 * v439 <= 4 * ((int)v435 - *(_DWORD *)(a2 + 552)))
        {
          if (v439 >= 0x40) {
            v439 *= 2;
          }
          else {
            unsigned int v439 = 128;
          }
        }
        else if (v439 - v435 >= v439 >> 3)
        {
          goto LABEL_824;
        }
        llvm::SmallPtrSetImplBase::Grow(v2385, v439);
        unsigned int v439 = *(_DWORD *)(a2 + 544);
        uint64_t v434 = *(void *)(a2 + 536);
LABEL_824:
        unsigned int v440 = v439 - 1;
        unsigned int v441 = (v439 - 1) & (v425 ^ (v418 >> 9));
        int v442 = (uint64_t *)(v434 + 8 * v441);
        uint64_t v443 = *v442;
        if (*v442 == -1)
        {
          BOOL v444 = 0;
LABEL_836:
          if (v444) {
            char v448 = v444;
          }
          else {
            char v448 = v442;
          }
          if (*v448 != v418)
          {
            if (*v448 == -2) {
              --*(_DWORD *)(a2 + 552);
            }
            else {
              ++*(_DWORD *)(a2 + 548);
            }
            *char v448 = v418;
          }
        }
        else
        {
          BOOL v444 = 0;
          int v445 = 1;
          while (v443 != v418)
          {
            if (v444) {
              BOOL v446 = 0;
            }
            else {
              BOOL v446 = v443 == -2;
            }
            if (v446) {
              BOOL v444 = v442;
            }
            unsigned int v447 = v441 + v445++;
            unsigned int v441 = v447 & v440;
            int v442 = (uint64_t *)(v434 + 8 * (v447 & v440));
            uint64_t v443 = *v442;
            if (*v442 == -1) {
              goto LABEL_836;
            }
          }
        }
        goto LABEL_843;
      }
      if (v435)
      {
        uint64_t v436 = 0;
        uint64_t v437 = 8 * v435;
        unsigned int v438 = *(uint64_t **)(a2 + 536);
        while (*v438 != v418)
        {
          if (*v438 == -2) {
            uint64_t v436 = v438;
          }
          ++v438;
          v437 -= 8;
          if (!v437)
          {
            if (!v436) {
              goto LABEL_819;
            }
            *uint64_t v436 = v418;
            --*(_DWORD *)(a2 + 552);
            goto LABEL_843;
          }
        }
        goto LABEL_843;
      }
LABEL_819:
      unsigned int v439 = *(_DWORD *)(a2 + 544);
      if (v435 >= v439) {
        goto LABEL_822;
      }
      *(_DWORD *)(a2 + 548) = v435 + 1;
      *(void *)(v434 + 8 * v435) = v418;
LABEL_843:
      llvm::DivergenceTracker::propagateDivergence((unsigned int *)a2, a2);
      int v417 = *(unsigned __int8 *)(v416 + 16);
LABEL_844:
      uint64_t v449 = (v417 - 33);
      if (v449 > 0x37) {
        goto LABEL_900;
      }
      if (((1 << v449) & 0x8000000000041) != 0)
      {
        uint64_t v450 = *(void *)(v416 + 64);
        if (!v450 || (*(unsigned char *)(v450 + 17) & 0x30) == 0)
        {
          int v451 = *(_DWORD *)(v416 + 20);
          if (v451 < 0)
          {
            uint64_t v505 = v416 - 32 * (v451 & 0x7FFFFFF);
            uint64_t v508 = *(void *)(v505 - 8);
            uint64_t v506 = v505 - 8;
            uint64_t v507 = v508;
            if (v508)
            {
              uint64_t v509 = -v507;
              while (1)
              {
                unsigned int v510 = *(_DWORD *)(*(void *)(v506 + v509) + 8);
                BOOL v2141 = v510 > 7;
                int v511 = (1 << v510) & 0x83;
                if (v2141 || v511 == 0) {
                  break;
                }
                v509 += 16;
                if (!v509) {
                  goto LABEL_852;
                }
              }
LABEL_854:
              if (sub_1CD10D9B4(v416) && v424)
              {
                uint64_t v452 = *(unsigned int *)(a1 + 4160);
                if (!v452)
                {
LABEL_910:
                  sub_1CC874880(v2407);
                  *(_DWORD *)(a1 + 4160) = 0;
                  goto LABEL_976;
                }
                uint64_t v453 = *(uint64_t **)(a1 + 4152);
                v454 = &v453[v452];
                while (2)
                {
                  uint64_t v455 = *v453;
                  unint64_t v456 = *(unsigned int *)(a2 + 8);
                  if (v456 >= *(unsigned int *)(a2 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)a2 + 8 * v456) = v455;
                  ++*(_DWORD *)(a2 + 8);
                  uint64_t v457 = *(void *)(a2 + 536);
                  uint64_t v458 = *(unsigned int *)(a2 + 548);
                  if (v457 == *(void *)(a2 + 528))
                  {
                    if (v458)
                    {
                      int v459 = 0;
                      uint64_t v460 = 8 * v458;
                      uint64_t v461 = *(void **)(a2 + 536);
                      while (*v461 != v455)
                      {
                        if (*v461 == -2) {
                          int v459 = v461;
                        }
                        ++v461;
                        v460 -= 8;
                        if (!v460)
                        {
                          if (!v459) {
                            goto LABEL_867;
                          }
                          *int v459 = v455;
                          --*(_DWORD *)(a2 + 552);
                          break;
                        }
                      }
LABEL_891:
                      llvm::DivergenceTracker::propagateDivergence((unsigned int *)a2, a2);
                      if (++v453 == v454) {
                        goto LABEL_910;
                      }
                      continue;
                    }
LABEL_867:
                    unsigned int v462 = *(_DWORD *)(a2 + 544);
                    if (v458 < v462)
                    {
                      *(_DWORD *)(a2 + 548) = v458 + 1;
                      *(void *)(v457 + 8 * v458) = v455;
                      goto LABEL_891;
                    }
                  }
                  else
                  {
                    unsigned int v462 = *(_DWORD *)(a2 + 544);
                  }
                  break;
                }
                if (3 * v462 <= 4 * ((int)v458 - *(_DWORD *)(a2 + 552)))
                {
                  if (v462 >= 0x40) {
                    v462 *= 2;
                  }
                  else {
                    unsigned int v462 = 128;
                  }
                }
                else if (v462 - v458 >= v462 >> 3)
                {
                  goto LABEL_872;
                }
                llvm::SmallPtrSetImplBase::Grow(v2385, v462);
                unsigned int v462 = *(_DWORD *)(a2 + 544);
                uint64_t v457 = *(void *)(a2 + 536);
LABEL_872:
                unsigned int v463 = v462 - 1;
                unsigned int v464 = (v462 - 1) & ((v455 >> 4) ^ (v455 >> 9));
                unsigned int v465 = (void *)(v457 + 8 * v464);
                uint64_t v466 = *v465;
                if (*v465 == -1)
                {
                  unsigned int v467 = 0;
LABEL_884:
                  if (v467) {
                    uint64_t v471 = v467;
                  }
                  else {
                    uint64_t v471 = v465;
                  }
                  if (*v471 != v455)
                  {
                    if (*v471 == -2) {
                      --*(_DWORD *)(a2 + 552);
                    }
                    else {
                      ++*(_DWORD *)(a2 + 548);
                    }
                    *uint64_t v471 = v455;
                  }
                }
                else
                {
                  unsigned int v467 = 0;
                  int v468 = 1;
                  while (v466 != v455)
                  {
                    if (v467) {
                      BOOL v469 = 0;
                    }
                    else {
                      BOOL v469 = v466 == -2;
                    }
                    if (v469) {
                      unsigned int v467 = v465;
                    }
                    unsigned int v470 = v464 + v468++;
                    unsigned int v464 = v470 & v463;
                    unsigned int v465 = (void *)(v457 + 8 * (v470 & v463));
                    uint64_t v466 = *v465;
                    if (*v465 == -1) {
                      goto LABEL_884;
                    }
                  }
                }
                goto LABEL_891;
              }
              goto LABEL_900;
            }
          }
LABEL_852:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v416, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v416, 44) & 1) == 0)
          {
            goto LABEL_854;
          }
        }
      }
      else
      {
        if (((1 << v449) & 0x808001D0000010) != 0) {
          goto LABEL_854;
        }
        if (v449 == 27) {
          goto LABEL_808;
        }
      }
LABEL_900:
      if (v419) {
        goto LABEL_976;
      }
LABEL_901:
      uint64_t v472 = *(void *)(a1 + 4616);
      if (v472
        && (*(unsigned char *)(v416 + 16) == 83
         || !sub_1CC85ED24(v416, (uint64_t)v2412, *(int **)(a1 + 4592), v472, v2413[9], 0)))
      {
        uint64_t v473 = *(void *)(a2 + 536);
        uint64_t v474 = *(void *)(a2 + 528);
        if (v473 == v474)
        {
          uint64_t v475 = *(unsigned int *)(a2 + 548);
          v476 = (void *)(v473 + 8 * v475);
          if (v475)
          {
            uint64_t v477 = 0;
            while (*(void *)(v473 + v477) != v416)
            {
              v477 += 8;
              if (8 * v475 == v477) {
                goto LABEL_924;
              }
            }
            v476 = (void *)(v473 + v477);
          }
LABEL_924:
          uint64_t v474 = *(void *)(a2 + 536);
        }
        else
        {
          uint64_t v478 = *(unsigned int *)(a2 + 544);
          int v479 = v478 - 1;
          unsigned int v480 = (v478 - 1) & ((v416 >> 4) ^ (v416 >> 9));
          v476 = (void *)(v473 + 8 * v480);
          uint64_t v481 = *v476;
          if (*v476 == -1)
          {
            uint64_t v482 = 0;
LABEL_962:
            if (v482) {
              v476 = v482;
            }
            LODWORD(v475) = *(_DWORD *)(a2 + 548);
            unsigned int v503 = (void *)(v473 + 8 * v478);
            if (*v476 != v416) {
              v476 = v503;
            }
          }
          else
          {
            uint64_t v482 = 0;
            int v483 = 1;
            while (v481 != v416)
            {
              if (v482) {
                BOOL v484 = 0;
              }
              else {
                BOOL v484 = v481 == -2;
              }
              if (v484) {
                uint64_t v482 = v476;
              }
              unsigned int v485 = v480 + v483++;
              unsigned int v480 = v485 & v479;
              v476 = (void *)(v473 + 8 * (v485 & v479));
              uint64_t v481 = *v476;
              if (*v476 == -1) {
                goto LABEL_962;
              }
            }
            LODWORD(v475) = *(_DWORD *)(a2 + 548);
          }
        }
        unsigned int v486 = v473 == v474 ? v475 : *(_DWORD *)(a2 + 544);
        if (v476 == (void *)(v473 + 8 * v486))
        {
          *(void *)&long long v2467 = &unk_1F261FD88;
          *((void *)&v2467 + 1) = &v2459;
          *((void *)&v2468 + 1) = &v2467;
          uint64_t v487 = sub_1CC8707C0(a1, v416, a2, (uint64_t)v2412, &v2467, 0);
          if (*((long long **)&v2468 + 1) == &v2467)
          {
            (*(void (**)(long long *))(v2467 + 32))(&v2467);
            if (v487) {
              goto LABEL_933;
            }
          }
          else
          {
            if (*((void *)&v2468 + 1)) {
              (*(void (**)(void))(**((void **)&v2468 + 1) + 40))();
            }
            if (v487)
            {
LABEL_933:
              unint64_t v488 = *(unsigned int *)(a2 + 8);
              if (v488 >= *(unsigned int *)(a2 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)a2 + 8 * v488) = v487;
              ++*(_DWORD *)(a2 + 8);
              uint64_t v489 = *(void *)(a2 + 536);
              uint64_t v490 = *(unsigned int *)(a2 + 548);
              if (v489 == *(void *)(a2 + 528))
              {
                if (v490)
                {
                  uint64_t v491 = 0;
                  uint64_t v492 = 8 * v490;
                  uint64_t v493 = *(uint64_t **)(a2 + 536);
                  while (*v493 != v487)
                  {
                    if (*v493 == -2) {
                      uint64_t v491 = v493;
                    }
                    ++v493;
                    v492 -= 8;
                    if (!v492)
                    {
                      if (!v491) {
                        goto LABEL_942;
                      }
                      uint64_t *v491 = v487;
                      --*(_DWORD *)(a2 + 552);
                      break;
                    }
                  }
LABEL_975:
                  llvm::DivergenceTracker::propagateDivergence((unsigned int *)a2, a2);
LABEL_976:
                  char v412 = 1;
                  continue;
                }
LABEL_942:
                unsigned int v494 = *(_DWORD *)(a2 + 544);
                if (v490 < v494)
                {
                  *(_DWORD *)(a2 + 548) = v490 + 1;
                  *(void *)(v489 + 8 * v490) = v487;
                  goto LABEL_975;
                }
              }
              else
              {
                unsigned int v494 = *(_DWORD *)(a2 + 544);
              }
              if (3 * v494 <= 4 * ((int)v490 - *(_DWORD *)(a2 + 552)))
              {
                if (v494 >= 0x40) {
                  v494 *= 2;
                }
                else {
                  unsigned int v494 = 128;
                }
              }
              else if (v494 - v490 >= v494 >> 3)
              {
                goto LABEL_950;
              }
              llvm::SmallPtrSetImplBase::Grow(v2385, v494);
              unsigned int v494 = *(_DWORD *)(a2 + 544);
              uint64_t v489 = *(void *)(a2 + 536);
LABEL_950:
              unsigned int v495 = v494 - 1;
              unsigned int v496 = (v494 - 1) & ((v487 >> 4) ^ (v487 >> 9));
              int v497 = (uint64_t *)(v489 + 8 * v496);
              uint64_t v498 = *v497;
              if (*v497 == -1)
              {
                unsigned int v499 = 0;
LABEL_968:
                if (v499) {
                  unsigned int v504 = v499;
                }
                else {
                  unsigned int v504 = v497;
                }
                if (*v504 != v487)
                {
                  if (*v504 == -2) {
                    --*(_DWORD *)(a2 + 552);
                  }
                  else {
                    ++*(_DWORD *)(a2 + 548);
                  }
                  uint64_t *v504 = v487;
                }
              }
              else
              {
                unsigned int v499 = 0;
                int v500 = 1;
                while (v498 != v487)
                {
                  if (v499) {
                    BOOL v501 = 0;
                  }
                  else {
                    BOOL v501 = v498 == -2;
                  }
                  if (v501) {
                    unsigned int v499 = v497;
                  }
                  unsigned int v502 = v496 + v500++;
                  unsigned int v496 = v502 & v495;
                  int v497 = (uint64_t *)(v489 + 8 * (v502 & v495));
                  uint64_t v498 = *v497;
                  if (*v497 == -1) {
                    goto LABEL_968;
                  }
                }
              }
              goto LABEL_975;
            }
          }
          if (LODWORD(v2426[1]) >= (unint64_t)HIDWORD(v2426[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v2426[0] + LODWORD(v2426[1])) = v416;
          ++LODWORD(v2426[1]);
        }
      }
    }
    BOOL v411 = v2402;
  }
  while (v2402 != v2393);
  if ((v412 & 1) == 0) {
    goto LABEL_1095;
  }
  while (2)
  {
    if (*((void *)&v2459 + 1) == (void)v2459)
    {
LABEL_1005:
      *(void *)((char *)&v2460 + 4) = 0;
    }
    else
    {
      if (v2460 < 0x21 || 4 * (DWORD1(v2460) - DWORD2(v2460)) >= v2460)
      {
        memset(*((void **)&v2459 + 1), 255, 8 * v2460);
        goto LABEL_1005;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v2459);
    }
    if (!LODWORD(v2426[1])) {
      break;
    }
    char v513 = 0;
    uint64_t v514 = (uint64_t *)v2426[0];
    unint64_t v515 = (uint64_t *)((char *)v2426[0] + 8 * LODWORD(v2426[1]));
    while (2)
    {
      uint64_t v516 = *v514;
      uint64_t v517 = *(void *)(a2 + 536);
      uint64_t v518 = *(void *)(a2 + 528);
      if (v517 == v518)
      {
        uint64_t v519 = *(unsigned int *)(a2 + 548);
        uint64_t v520 = (void *)(v517 + 8 * v519);
        if (v519)
        {
          uint64_t v521 = 0;
          while (*(void *)(v517 + v521) != v516)
          {
            v521 += 8;
            if (8 * v519 == v521) {
              goto LABEL_1027;
            }
          }
          uint64_t v520 = (void *)(v517 + v521);
        }
LABEL_1027:
        uint64_t v518 = *(void *)(a2 + 536);
      }
      else
      {
        uint64_t v522 = *(unsigned int *)(a2 + 544);
        int v523 = v522 - 1;
        unsigned int v524 = (v522 - 1) & ((v516 >> 4) ^ (v516 >> 9));
        uint64_t v520 = (void *)(v517 + 8 * v524);
        uint64_t v525 = *v520;
        if (*v520 == -1)
        {
          uint64_t v526 = 0;
LABEL_1064:
          if (v526) {
            uint64_t v520 = v526;
          }
          LODWORD(v519) = *(_DWORD *)(a2 + 548);
          int v547 = (void *)(v517 + 8 * v522);
          if (*v520 != v516) {
            uint64_t v520 = v547;
          }
        }
        else
        {
          uint64_t v526 = 0;
          int v527 = 1;
          while (v525 != v516)
          {
            if (v526) {
              BOOL v528 = 0;
            }
            else {
              BOOL v528 = v525 == -2;
            }
            if (v528) {
              uint64_t v526 = v520;
            }
            unsigned int v529 = v524 + v527++;
            unsigned int v524 = v529 & v523;
            uint64_t v520 = (void *)(v517 + 8 * (v529 & v523));
            uint64_t v525 = *v520;
            if (*v520 == -1) {
              goto LABEL_1064;
            }
          }
          LODWORD(v519) = *(_DWORD *)(a2 + 548);
        }
      }
      if (v517 == v518) {
        unsigned int v530 = v519;
      }
      else {
        unsigned int v530 = *(_DWORD *)(a2 + 544);
      }
      if (v520 == (void *)(v517 + 8 * v530))
      {
        v2470 = (llvm::Instruction *)&unk_1F261FDD0;
        uint64_t v2471 = (uint64_t)&v2459;
        v2473 = (uint64_t *)&v2470;
        uint64_t v531 = sub_1CC8707C0(a1, v516, a2, (uint64_t)v2412, &v2470, 0);
        if (v2473 == (uint64_t *)&v2470)
        {
          (*((void (**)(llvm::Instruction **))v2470 + 4))(&v2470);
          if (!v531) {
            goto LABEL_1078;
          }
        }
        else
        {
          if (v2473) {
            (*(void (**)(void))(*v2473 + 40))();
          }
          if (!v531) {
            goto LABEL_1078;
          }
        }
        unint64_t v532 = *(unsigned int *)(a2 + 8);
        if (v532 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v532) = v531;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v533 = *(void *)(a2 + 536);
        uint64_t v534 = *(unsigned int *)(a2 + 548);
        if (v533 == *(void *)(a2 + 528))
        {
          if (v534)
          {
            unsigned int v535 = 0;
            uint64_t v536 = 8 * v534;
            uint64_t v537 = *(uint64_t **)(a2 + 536);
            while (*v537 != v531)
            {
              if (*v537 == -2) {
                unsigned int v535 = v537;
              }
              ++v537;
              v536 -= 8;
              if (!v536)
              {
                if (!v535) {
                  goto LABEL_1047;
                }
                *unsigned int v535 = v531;
                --*(_DWORD *)(a2 + 552);
                goto LABEL_1077;
              }
            }
            goto LABEL_1077;
          }
LABEL_1047:
          unsigned int v538 = *(_DWORD *)(a2 + 544);
          if (v534 < v538)
          {
            *(_DWORD *)(a2 + 548) = v534 + 1;
            *(void *)(v533 + 8 * v534) = v531;
LABEL_1077:
            llvm::DivergenceTracker::propagateDivergence((unsigned int *)a2, a2);
            char v513 = 1;
            goto LABEL_1078;
          }
        }
        else
        {
          unsigned int v538 = *(_DWORD *)(a2 + 544);
        }
        if (3 * v538 <= 4 * ((int)v534 - *(_DWORD *)(a2 + 552)))
        {
          if (v538 >= 0x40) {
            v538 *= 2;
          }
          else {
            unsigned int v538 = 128;
          }
        }
        else if (v538 - v534 >= v538 >> 3)
        {
          goto LABEL_1052;
        }
        llvm::SmallPtrSetImplBase::Grow(v2385, v538);
        unsigned int v538 = *(_DWORD *)(a2 + 544);
        uint64_t v533 = *(void *)(a2 + 536);
LABEL_1052:
        unsigned int v539 = v538 - 1;
        unsigned int v540 = (v538 - 1) & ((v531 >> 4) ^ (v531 >> 9));
        int v541 = (uint64_t *)(v533 + 8 * v540);
        uint64_t v542 = *v541;
        if (*v541 == -1)
        {
          unsigned int v543 = 0;
LABEL_1070:
          if (v543) {
            uint64_t v548 = v543;
          }
          else {
            uint64_t v548 = v541;
          }
          if (*v548 != v531)
          {
            if (*v548 == -2) {
              --*(_DWORD *)(a2 + 552);
            }
            else {
              ++*(_DWORD *)(a2 + 548);
            }
            *uint64_t v548 = v531;
          }
        }
        else
        {
          unsigned int v543 = 0;
          int v544 = 1;
          while (v542 != v531)
          {
            if (v543) {
              BOOL v545 = 0;
            }
            else {
              BOOL v545 = v542 == -2;
            }
            if (v545) {
              unsigned int v543 = v541;
            }
            unsigned int v546 = v540 + v544++;
            unsigned int v540 = v546 & v539;
            int v541 = (uint64_t *)(v533 + 8 * (v546 & v539));
            uint64_t v542 = *v541;
            if (*v541 == -1) {
              goto LABEL_1070;
            }
          }
        }
        goto LABEL_1077;
      }
LABEL_1078:
      if (++v514 != v515) {
        continue;
      }
      break;
    }
    if (v513) {
      continue;
    }
    break;
  }
LABEL_1095:
  if (v2426[0] != &v2427) {
    free(v2426[0]);
  }
  sub_1CC874880(v2407);
  *(_DWORD *)(a1 + 4160) = 0;
  if (*((void *)&v2459 + 1) != (void)v2459) {
    free(*((void **)&v2459 + 1));
  }
LABEL_1099:
  uint64_t v550 = *(llvm::SmallPtrSetImplBase **)(a1 + 4576);
  v2383 = *(llvm::SmallPtrSetImplBase **)(a1 + 4568);
  if (v550 == v2383)
  {
    v2444 = (uint64_t *)v2448;
    uint64_t v2445 = (uint64_t)v2448;
    uint64_t v2446 = 16;
    int v2447 = 0;
    goto LABEL_2815;
  }
  v2408 = (llvm::SmallPtrSetImplBase *)(a1 + 3476);
  v2403 = (llvm::SmallPtrSetImplBase *)(a1 + 3472);
  unint64_t v2305 = a1 + 3456;
  v2306 = (llvm::SmallPtrSetImplBase *)(a2 + 528);
  v2302 = (llvm::SmallPtrSetImplBase *)(a1 + 3296);
  v2390 = (llvm::SmallPtrSetImplBase *)(a1 + 3312);
  v2394 = (llvm::SmallPtrSetImplBase *)(a1 + 3316);
  while (2)
  {
    uint64_t v551 = *((void *)v550 - 1);
    v2386 = (llvm::SmallPtrSetImplBase *)((char *)v550 - 8);
    v2384 = *(uint64_t ***)(*(void *)(a2 + 1280) + 40);
    *(void *)&long long v2459 = 1;
    for (uint64_t m = 8; m != 136; m += 16)
      *(void *)((char *)&v2459 + m) = -4096;
    int v553 = (void **)(v551 + 40);
    char v554 = *(void ***)(v551 + 48);
    if (v554 != (void **)(v551 + 40))
    {
      while (2)
      {
        unsigned int v555 = (void **)v554[1];
        if (v554) {
          unsigned int v556 = v554 - 3;
        }
        else {
          unsigned int v556 = 0;
        }
        if (((*v556)[1] & 0xFE) != 0x12)
        {
          if (*((unsigned char *)v556 + 16) == 49)
          {
            int v557 = *((_DWORD *)v556 + 5);
            if ((v557 & 0x40000000) != 0)
            {
              int v561 = *(v556 - 1);
              if (*(unsigned char *)(v561[4] + 16) != 17)
              {
                uint64_t v560 = *v561;
                v2470 = 0;
                uint64_t v559 = (*(v556 - 1))[4];
                goto LABEL_1114;
              }
            }
            else
            {
              long long v558 = (uint64_t *)&v556[-4 * (v557 & 0x7FFFFFF)];
              uint64_t v559 = v558[4];
              if (*(unsigned char *)(v559 + 16) != 17)
              {
                uint64_t v560 = *v558;
LABEL_1114:
                v2470 = (llvm::Instruction *)v559;
                uint64_t v562 = *(void *)(a1 + 3464);
                uint64_t v563 = *(void *)(a1 + 3456);
                if (v562 == v563)
                {
                  uint64_t v564 = *(unsigned int *)v2408;
                  uint64_t v565 = (void *)(v562 + 8 * v564);
                  if (v564)
                  {
                    uint64_t v566 = 0;
                    uint64_t v567 = 8 * v564;
                    while (*(void *)(v562 + v566) != v560)
                    {
                      v566 += 8;
                      if (v567 == v566) {
                        goto LABEL_1132;
                      }
                    }
                    uint64_t v565 = (void *)(v562 + v566);
                  }
LABEL_1132:
                  uint64_t v575 = *(void *)(a1 + 3464);
                }
                else
                {
                  uint64_t v568 = *(unsigned int *)v2403;
                  unsigned int v569 = (v568 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                  uint64_t v565 = (void *)(v562 + 8 * v569);
                  uint64_t v570 = *v565;
                  if (*v565 == -1)
                  {
                    uint64_t v571 = 0;
LABEL_1134:
                    if (v571) {
                      uint64_t v565 = v571;
                    }
                    if (*v565 != v560) {
                      uint64_t v565 = (void *)(v562 + 8 * v568);
                    }
                  }
                  else
                  {
                    uint64_t v571 = 0;
                    int v572 = 1;
                    while (v570 != v560)
                    {
                      if (v571) {
                        BOOL v573 = 0;
                      }
                      else {
                        BOOL v573 = v570 == -2;
                      }
                      if (v573) {
                        uint64_t v571 = v565;
                      }
                      unsigned int v574 = v569 + v572++;
                      unsigned int v569 = v574 & (v568 - 1);
                      uint64_t v565 = (void *)(v562 + 8 * v569);
                      uint64_t v570 = *v565;
                      if (*v565 == -1) {
                        goto LABEL_1134;
                      }
                    }
                  }
                  uint64_t v575 = *(void *)(a1 + 3456);
                }
                BOOL v54 = v562 == v575;
                int v576 = (unsigned int *)(a1 + 3476);
                if (!v54) {
                  int v576 = (unsigned int *)(a1 + 3472);
                }
                uint64_t v577 = *v576;
                uint64_t v578 = *(void *)(a2 + 536);
                uint64_t v579 = *(void *)(a2 + 528);
                if (v578 == v579)
                {
                  uint64_t v580 = *(unsigned int *)(a2 + 548);
                  __int16 v581 = (void *)(v578 + 8 * v580);
                  if (v580)
                  {
                    uint64_t v582 = 0;
                    while (*(void *)(v578 + v582) != v560)
                    {
                      v582 += 8;
                      if (8 * v580 == v582) {
                        goto LABEL_1160;
                      }
                    }
                    __int16 v581 = (void *)(v578 + v582);
                  }
LABEL_1160:
                  uint64_t v590 = *(void *)(a2 + 536);
                }
                else
                {
                  uint64_t v583 = *(unsigned int *)(a2 + 544);
                  unsigned int v584 = (v583 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                  __int16 v581 = (void *)(v578 + 8 * v584);
                  uint64_t v585 = *v581;
                  if (*v581 == -1)
                  {
                    unsigned int v586 = 0;
LABEL_1162:
                    if (!v586) {
                      unsigned int v586 = v581;
                    }
                    LODWORD(v580) = *(_DWORD *)(a2 + 548);
                    int v591 = (void *)(v578 + 8 * v583);
                    if (*v586 == v560) {
                      __int16 v581 = v586;
                    }
                    else {
                      __int16 v581 = v591;
                    }
                  }
                  else
                  {
                    unsigned int v586 = 0;
                    int v587 = 1;
                    while (v585 != v560)
                    {
                      if (v586) {
                        BOOL v588 = 0;
                      }
                      else {
                        BOOL v588 = v585 == -2;
                      }
                      if (v588) {
                        unsigned int v586 = v581;
                      }
                      unsigned int v589 = v584 + v587++;
                      unsigned int v584 = v589 & (v583 - 1);
                      __int16 v581 = (void *)(v578 + 8 * v584);
                      uint64_t v585 = *v581;
                      if (*v581 == -1) {
                        goto LABEL_1162;
                      }
                    }
                    LODWORD(v580) = *(_DWORD *)(a2 + 548);
                  }
                  uint64_t v590 = *(void *)(a2 + 528);
                }
                uint64_t v592 = (void *)(v562 + 8 * v577);
                uint64_t v593 = *(unsigned int *)(a2 + 544);
                if (v578 == v590) {
                  unsigned int v594 = v580;
                }
                else {
                  unsigned int v594 = *(_DWORD *)(a2 + 544);
                }
                int v595 = (void *)(v578 + 8 * v594);
                if (v565 != v592 || v581 != v595)
                {
                  if (v562 == v563)
                  {
                    uint64_t v610 = *(unsigned int *)v2408;
                    uint64_t v611 = (void *)(v562 + 8 * v610);
                    if (v610)
                    {
                      uint64_t v612 = 0;
                      uint64_t v613 = 8 * v610;
                      while (*(void *)(v562 + v612) != v559)
                      {
                        v612 += 8;
                        if (v613 == v612) {
                          goto LABEL_1351;
                        }
                      }
                      uint64_t v611 = (void *)(v562 + v612);
                    }
LABEL_1351:
                    uint64_t v563 = *(void *)(a1 + 3464);
                  }
                  else
                  {
                    uint64_t v615 = *(unsigned int *)v2403;
                    int v616 = v615 - 1;
                    unsigned int v617 = (v615 - 1) & ((v559 >> 4) ^ (v559 >> 9));
                    uint64_t v611 = (void *)(v562 + 8 * v617);
                    uint64_t v618 = *v611;
                    if (*v611 == -1)
                    {
                      unsigned int v619 = 0;
LABEL_1407:
                      if (v619) {
                        uint64_t v611 = v619;
                      }
                      if (*v611 != v559) {
                        uint64_t v611 = (void *)(v562 + 8 * v615);
                      }
                    }
                    else
                    {
                      unsigned int v619 = 0;
                      int v620 = 1;
                      while (v618 != v559)
                      {
                        if (v619) {
                          BOOL v621 = 0;
                        }
                        else {
                          BOOL v621 = v618 == -2;
                        }
                        if (v621) {
                          unsigned int v619 = v611;
                        }
                        unsigned int v622 = v617 + v620++;
                        unsigned int v617 = v622 & v616;
                        uint64_t v611 = (void *)(v562 + 8 * (v622 & v616));
                        uint64_t v618 = *v611;
                        if (*v611 == -1) {
                          goto LABEL_1407;
                        }
                      }
                    }
                  }
                  BOOL v54 = v562 == v563;
                  uint64_t v695 = (unsigned int *)(a1 + 3476);
                  if (!v54) {
                    uint64_t v695 = (unsigned int *)(a1 + 3472);
                  }
                  uint64_t v696 = *v695;
                  if (v578 == v579)
                  {
                    uint64_t v697 = (void *)(v578 + 8 * v580);
                    if (v580)
                    {
                      uint64_t v698 = 0;
                      while (*(void *)(v578 + v698) != v559)
                      {
                        v698 += 8;
                        if (8 * v580 == v698) {
                          goto LABEL_1372;
                        }
                      }
                      uint64_t v697 = (void *)(v578 + v698);
                    }
LABEL_1372:
                    uint64_t v579 = *(void *)(a2 + 536);
                  }
                  else
                  {
                    int v699 = v593 - 1;
                    unsigned int v700 = (v593 - 1) & ((v559 >> 4) ^ (v559 >> 9));
                    uint64_t v697 = (void *)(v578 + 8 * v700);
                    uint64_t v701 = *v697;
                    if (*v697 == -1)
                    {
                      uint64_t v702 = 0;
LABEL_1412:
                      if (v702) {
                        uint64_t v697 = v702;
                      }
                      if (*v697 != v559) {
                        uint64_t v697 = (void *)(v578 + 8 * v593);
                      }
                    }
                    else
                    {
                      uint64_t v702 = 0;
                      int v703 = 1;
                      while (v701 != v559)
                      {
                        if (v702) {
                          BOOL v704 = 0;
                        }
                        else {
                          BOOL v704 = v701 == -2;
                        }
                        if (v704) {
                          uint64_t v702 = v697;
                        }
                        unsigned int v705 = v700 + v703++;
                        unsigned int v700 = v705 & v699;
                        uint64_t v697 = (void *)(v578 + 8 * (v705 & v699));
                        uint64_t v701 = *v697;
                        if (*v697 == -1) {
                          goto LABEL_1412;
                        }
                      }
                    }
                  }
                  v706 = (void *)(v562 + 8 * v696);
                  unsigned int v707 = v578 == v579 ? v580 : *(_DWORD *)(a2 + 544);
                  if (v611 == v706 && v697 == (void *)(v578 + 8 * v707))
                  {
                    int v708 = *((unsigned __int8 *)v556 + 17) >> 1;
                    if (v708 == 127) {
                      LOBYTE(v708) = -1;
                    }
                    if ((v708 & 0x10) != 0)
                    {
                      v2378 = v595;
                      char v2381 = v708;
                      v2376 = v592;
                      uint64_t v709 = 0;
                      uint64_t v710 = **v556;
                      v2426[0] = &v2427;
                      v2426[1] = (void *)0x200000000;
                      uint64_t v2433 = v710;
                      v2434 = &v2442;
                      v2435 = v2443;
                      uint64_t v2436 = 0;
                      int v2437 = 0;
                      __int16 v2438 = 512;
                      char v2439 = 7;
                      v2431 = 0;
                      v2432 = 0;
                      uint64_t v2440 = 0;
                      uint64_t v2441 = 0;
                      v2442 = &unk_1F2616E88;
                      v2443[0] = &unk_1F2617008;
                      v2431 = v556[5];
                      v2432 = v556 + 3;
                      int v711 = (unsigned __int8 *)v556[6];
                      *(void *)&long long v2467 = v711;
                      if (v711)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v2467, v711, 2);
                        uint64_t v709 = v2467;
                      }
                      sub_1CB8461A4((uint64_t)v2426, 0, v709);
                      if ((void)v2467)
                      {
                        int v757 = *(unsigned __int8 *)v2467;
                        if ((v757 - 4) > 0x1E)
                        {
                          if ((v757 - 3) >= 0xFFFFFFFE) {
                            uint64_t v888 = v2467;
                          }
                          else {
                            uint64_t v888 = 0;
                          }
                          if ((v757 - 3) < 0xFFFFFFFE)
                          {
                            if (v757 == 3) {
                              *(void *)(v2467 + 8) = 0;
                            }
                            goto LABEL_1384;
                          }
                          unint64_t v759 = v888 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2 && !*(_DWORD *)(v2467 + 12)) {
                            goto LABEL_1384;
                          }
                          uint64_t v758 = *(void *)(v2467 + 16);
                          if ((v758 & 4) == 0) {
                            goto LABEL_1384;
                          }
                          unint64_t v759 = v758 & 0xFFFFFFFFFFFFFFF8;
                          if (!v759) {
                            goto LABEL_1384;
                          }
                        }
                        v2444 = (uint64_t *)&v2467;
                        sub_1CC5FA668(v759 + 16, &v2444);
                      }
LABEL_1384:
                      uint64_t v712 = sub_1CC84E698((uint64_t)&v2459, (uint64_t)v2470);
                      unsigned int v713 = (char *)*((void *)&v2459 + 1);
                      if (v2459)
                      {
                        unsigned int v713 = (char *)&v2459 + 8;
                        unsigned int v714 = 8;
                      }
                      else
                      {
                        unsigned int v714 = v2460;
                      }
                      if (&v713[16 * v714] != (char *)v712)
                      {
                        uint64_t v715 = *(void *)(v712 + 8);
                        goto LABEL_1421;
                      }
                      v2444 = (uint64_t *)(*(void *)v2433 + 1672);
                      Declaratiounint64_t n = llvm::Intrinsic::getDeclaration(v2384, 253, (uint64_t)&v2444, 1);
                      uint64_t v717 = Declaration;
                      if (*((unsigned char *)*v556 + 8))
                      {
                        if (Declaration) {
                          goto LABEL_1391;
                        }
LABEL_1417:
                        v718 = 0;
                      }
                      else
                      {
                        unsigned int v729 = (uint64_t *)(*(void *)v2433 + 1672);
                        v2448[0] = 257;
                        v2470 = sub_1CB843944((uint64_t)v2426, (uint64_t)v2470, v729, (uint64_t)&v2444);
                        if (!v717) {
                          goto LABEL_1417;
                        }
LABEL_1391:
                        v718 = *(uint64_t ***)(v717 + 24);
                      }
                      v2448[0] = 257;
                      unsigned int v730 = (llvm::Type *)sub_1CB845BAC((uint64_t *)v2426, v718, (uint64_t **)v717, (uint64_t *)&v2470, 1, (uint64_t)&v2444, 0);
                      *((unsigned char *)v730 + 17) |= 2 * v2381;
                      v2444 = (uint64_t *)v2470;
                      uint64_t v2445 = (uint64_t)v730;
                      v2372 = v730;
                      *(void *)&long long v2467 = 0;
                      if ((sub_1CC84E718((uint64_t)&v2459, &v2444, &v2467) & 1) == 0)
                      {
                        uint64_t v731 = sub_1CC84E7C0(&v2459, (uint64_t)&v2444, &v2444, (void *)v2467);
                        *uint64_t v731 = v2444;
                        v731[1] = v2445;
                      }
                      uint64_t v715 = (uint64_t)v2372;
LABEL_1421:
                      if (*((unsigned char *)*v556 + 8)) {
                        goto LABEL_1539;
                      }
                      v2373 = (llvm::Type *)v715;
                      int v732 = (uint64_t *)(*(void *)v2433 + 1672);
                      v2448[0] = 257;
                      unsigned int v733 = sub_1CB843944((uint64_t)v2426, v560, v732, (uint64_t)&v2444);
                      uint64_t v560 = (uint64_t)v733;
                      if (v581 == v2378) {
                        goto LABEL_1473;
                      }
                      uint64_t v734 = *(void *)(a2 + 536);
                      uint64_t v735 = *(unsigned int *)(a2 + 548);
                      if (v734 != *(void *)(a2 + 528))
                      {
                        unsigned int v739 = *(_DWORD *)(a2 + 544);
                        goto LABEL_1434;
                      }
                      if (v735)
                      {
                        unsigned int v736 = 0;
                        uint64_t v737 = 8 * v735;
                        uint64_t v738 = *(llvm::Instruction ***)(a2 + 536);
                        do
                        {
                          if (*v738 == v733) {
                            goto LABEL_1473;
                          }
                          if (*v738 == (llvm::Instruction *)-2) {
                            unsigned int v736 = v738;
                          }
                          ++v738;
                          v737 -= 8;
                        }
                        while (v737);
                        if (v736)
                        {
                          *unsigned int v736 = v733;
                          --*(_DWORD *)(a2 + 552);
                          goto LABEL_1473;
                        }
                      }
                      unsigned int v739 = *(_DWORD *)(a2 + 544);
                      if (v735 < v739)
                      {
                        *(_DWORD *)(a2 + 548) = v735 + 1;
                        *(void *)(v734 + 8 * v735) = v733;
                        goto LABEL_1473;
                      }
LABEL_1434:
                      if (3 * v739 <= 4 * ((int)v735 - *(_DWORD *)(a2 + 552)))
                      {
                        if (v739 >= 0x40) {
                          v739 *= 2;
                        }
                        else {
                          unsigned int v739 = 128;
                        }
                      }
                      else if (v739 - v735 >= v739 >> 3)
                      {
LABEL_1436:
                        unsigned int v740 = v739 - 1;
                        unsigned int v741 = (v739 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                        int v742 = (uint64_t *)(v734 + 8 * v741);
                        uint64_t v743 = *v742;
                        if (*v742 == -1)
                        {
                          v744 = 0;
LABEL_1466:
                          if (v744) {
                            int v761 = v744;
                          }
                          else {
                            int v761 = v742;
                          }
                          if (*v761 != v560)
                          {
                            if (*v761 == -2) {
                              --*(_DWORD *)(a2 + 552);
                            }
                            else {
                              ++*(_DWORD *)(a2 + 548);
                            }
                            *int v761 = v560;
                          }
                        }
                        else
                        {
                          v744 = 0;
                          int v745 = 1;
                          while (v743 != v560)
                          {
                            if (v744) {
                              BOOL v746 = 0;
                            }
                            else {
                              BOOL v746 = v743 == -2;
                            }
                            if (v746) {
                              v744 = v742;
                            }
                            unsigned int v747 = v741 + v745++;
                            unsigned int v741 = v747 & v740;
                            int v742 = (uint64_t *)(v734 + 8 * (v747 & v740));
                            uint64_t v743 = *v742;
                            if (*v742 == -1) {
                              goto LABEL_1466;
                            }
                          }
                        }
LABEL_1473:
                        if (v565 != v2376)
                        {
                          uint64_t v762 = *(void *)(a1 + 3464);
                          uint64_t v763 = *(unsigned int *)(a1 + 3476);
                          if (v762 != *(void *)(a1 + 3456))
                          {
                            unsigned int v767 = *(_DWORD *)v2403;
                            goto LABEL_1485;
                          }
                          if (v763)
                          {
                            uint64_t v764 = 0;
                            uint64_t v765 = 8 * v763;
                            uint64_t v766 = *(uint64_t **)(a1 + 3464);
                            do
                            {
                              if (*v766 == v560) {
                                goto LABEL_1506;
                              }
                              if (*v766 == -2) {
                                uint64_t v764 = v766;
                              }
                              ++v766;
                              v765 -= 8;
                            }
                            while (v765);
                            if (v764)
                            {
                              *uint64_t v764 = v560;
                              --*(_DWORD *)(a1 + 3480);
                              goto LABEL_1506;
                            }
                          }
                          unsigned int v767 = *(_DWORD *)v2403;
                          if (v763 < *(_DWORD *)v2403)
                          {
                            *(_DWORD *)v2408 = v763 + 1;
                            *(void *)(v762 + 8 * v763) = v560;
                            goto LABEL_1506;
                          }
LABEL_1485:
                          if (3 * v767 <= 4 * ((int)v763 - *(_DWORD *)(a1 + 3480)))
                          {
                            if (v767 >= 0x40) {
                              v767 *= 2;
                            }
                            else {
                              unsigned int v767 = 128;
                            }
                          }
                          else if (v767 - v763 >= v767 >> 3)
                          {
LABEL_1487:
                            unsigned int v768 = v767 - 1;
                            unsigned int v769 = (v767 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                            int v770 = (uint64_t *)(v762 + 8 * v769);
                            uint64_t v771 = *v770;
                            if (*v770 == -1)
                            {
                              uint64_t v772 = 0;
LABEL_1499:
                              if (v772) {
                                uint64_t v776 = v772;
                              }
                              else {
                                uint64_t v776 = v770;
                              }
                              if (*v776 != v560)
                              {
                                if (*v776 == -2) {
                                  --*(_DWORD *)(a1 + 3480);
                                }
                                else {
                                  ++*(_DWORD *)v2408;
                                }
                                *uint64_t v776 = v560;
                              }
                            }
                            else
                            {
                              uint64_t v772 = 0;
                              int v773 = 1;
                              while (v771 != v560)
                              {
                                if (v772) {
                                  BOOL v774 = 0;
                                }
                                else {
                                  BOOL v774 = v771 == -2;
                                }
                                if (v774) {
                                  uint64_t v772 = v770;
                                }
                                unsigned int v775 = v769 + v773++;
                                unsigned int v769 = v775 & v768;
                                int v770 = (uint64_t *)(v762 + 8 * (v775 & v768));
                                uint64_t v771 = *v770;
                                if (*v770 == -1) {
                                  goto LABEL_1499;
                                }
                              }
                            }
LABEL_1506:
                            uint64_t v777 = *(void *)(a1 + 3304);
                            uint64_t v778 = *(unsigned int *)(a1 + 3316);
                            if (v777 != *(void *)(a1 + 3296))
                            {
                              unsigned int v782 = *(_DWORD *)v2390;
                              goto LABEL_1517;
                            }
                            if (v778)
                            {
                              int v779 = 0;
                              uint64_t v780 = 8 * v778;
                              v781 = *(uint64_t **)(a1 + 3304);
                              do
                              {
                                if (*v781 == v560) {
                                  goto LABEL_1538;
                                }
                                if (*v781 == -2) {
                                  int v779 = v781;
                                }
                                ++v781;
                                v780 -= 8;
                              }
                              while (v780);
                              if (v779)
                              {
                                *int v779 = v560;
                                --*(_DWORD *)(a1 + 3320);
                                goto LABEL_1538;
                              }
                            }
                            unsigned int v782 = *(_DWORD *)v2390;
                            if (v778 < *(_DWORD *)v2390)
                            {
                              *(_DWORD *)v2394 = v778 + 1;
                              *(void *)(v777 + 8 * v778) = v560;
                              goto LABEL_1538;
                            }
LABEL_1517:
                            if (3 * v782 <= 4 * ((int)v778 - *(_DWORD *)(a1 + 3320)))
                            {
                              if (v782 >= 0x40) {
                                v782 *= 2;
                              }
                              else {
                                unsigned int v782 = 128;
                              }
                            }
                            else if (v782 - v778 >= v782 >> 3)
                            {
LABEL_1519:
                              unsigned int v783 = v782 - 1;
                              unsigned int v784 = (v782 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                              uint64_t v785 = (uint64_t *)(v777 + 8 * v784);
                              uint64_t v786 = *v785;
                              if (*v785 == -1)
                              {
                                int v787 = 0;
LABEL_1531:
                                if (v787) {
                                  unsigned int v791 = v787;
                                }
                                else {
                                  unsigned int v791 = v785;
                                }
                                if (*v791 != v560)
                                {
                                  if (*v791 == -2) {
                                    --*(_DWORD *)(a1 + 3320);
                                  }
                                  else {
                                    ++*(_DWORD *)v2394;
                                  }
                                  *unsigned int v791 = v560;
                                }
                              }
                              else
                              {
                                int v787 = 0;
                                int v788 = 1;
                                while (v786 != v560)
                                {
                                  if (v787) {
                                    BOOL v789 = 0;
                                  }
                                  else {
                                    BOOL v789 = v786 == -2;
                                  }
                                  if (v789) {
                                    int v787 = v785;
                                  }
                                  unsigned int v790 = v784 + v788++;
                                  unsigned int v784 = v790 & v783;
                                  uint64_t v785 = (uint64_t *)(v777 + 8 * (v790 & v783));
                                  uint64_t v786 = *v785;
                                  if (*v785 == -1) {
                                    goto LABEL_1531;
                                  }
                                }
                              }
                              goto LABEL_1538;
                            }
                            llvm::SmallPtrSetImplBase::Grow(v2302, v782);
                            unsigned int v782 = *(_DWORD *)(a1 + 3312);
                            uint64_t v777 = *(void *)(a1 + 3304);
                            goto LABEL_1519;
                          }
                          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2305, v767);
                          unsigned int v767 = *(_DWORD *)(a1 + 3472);
                          uint64_t v762 = *(void *)(a1 + 3464);
                          goto LABEL_1487;
                        }
LABEL_1538:
                        uint64_t v715 = (uint64_t)v2373;
LABEL_1539:
                        v2448[0] = 257;
                        uint64_t v792 = sub_1CB843C88((uint64_t)v2426, v560, v715, (uint64_t)&v2444, 0);
                        v793 = (llvm::Value *)v792;
                        if (v581 != v2378)
                        {
                          uint64_t v794 = *(void *)(a2 + 536);
                          uint64_t v795 = *(unsigned int *)(a2 + 548);
                          if (v794 != *(void *)(a2 + 528))
                          {
                            unsigned int v799 = *(_DWORD *)(a2 + 544);
                            goto LABEL_1551;
                          }
                          if (v795)
                          {
                            unsigned int v796 = 0;
                            uint64_t v797 = 8 * v795;
                            v798 = *(uint64_t **)(a2 + 536);
                            do
                            {
                              if (*v798 == v792) {
                                goto LABEL_1572;
                              }
                              if (*v798 == -2) {
                                unsigned int v796 = v798;
                              }
                              ++v798;
                              v797 -= 8;
                            }
                            while (v797);
                            if (v796)
                            {
                              *unsigned int v796 = v792;
                              --*(_DWORD *)(a2 + 552);
                              goto LABEL_1572;
                            }
                          }
                          unsigned int v799 = *(_DWORD *)(a2 + 544);
                          if (v795 < v799)
                          {
                            *(_DWORD *)(a2 + 548) = v795 + 1;
                            *(void *)(v794 + 8 * v795) = v792;
                            goto LABEL_1572;
                          }
LABEL_1551:
                          if (3 * v799 <= 4 * ((int)v795 - *(_DWORD *)(a2 + 552)))
                          {
                            if (v799 >= 0x40) {
                              v799 *= 2;
                            }
                            else {
                              unsigned int v799 = 128;
                            }
                          }
                          else if (v799 - v795 >= v799 >> 3)
                          {
LABEL_1553:
                            unsigned int v800 = v799 - 1;
                            unsigned int v801 = (v799 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                            v802 = (llvm::Value **)(v794 + 8 * v801);
                            unsigned int v803 = *v802;
                            if (*v802 == (llvm::Value *)-1)
                            {
                              unsigned int v804 = 0;
LABEL_1565:
                              if (v804) {
                                uint64_t v808 = v804;
                              }
                              else {
                                uint64_t v808 = v802;
                              }
                              if (*v808 != v793)
                              {
                                if (*v808 == (llvm::Value *)-2) {
                                  --*(_DWORD *)(a2 + 552);
                                }
                                else {
                                  ++*(_DWORD *)(a2 + 548);
                                }
                                *uint64_t v808 = v793;
                              }
                            }
                            else
                            {
                              unsigned int v804 = 0;
                              int v805 = 1;
                              while (v803 != v793)
                              {
                                if (v804) {
                                  BOOL v806 = 0;
                                }
                                else {
                                  BOOL v806 = v803 == (llvm::Value *)-2;
                                }
                                if (v806) {
                                  unsigned int v804 = v802;
                                }
                                unsigned int v807 = v801 + v805++;
                                unsigned int v801 = v807 & v800;
                                v802 = (llvm::Value **)(v794 + 8 * (v807 & v800));
                                unsigned int v803 = *v802;
                                if (*v802 == (llvm::Value *)-1) {
                                  goto LABEL_1565;
                                }
                              }
                            }
                            goto LABEL_1572;
                          }
                          llvm::SmallPtrSetImplBase::Grow(v2306, v799);
                          unsigned int v799 = *(_DWORD *)(a2 + 544);
                          uint64_t v794 = *(void *)(a2 + 536);
                          goto LABEL_1553;
                        }
LABEL_1572:
                        if (v565 != v2376)
                        {
                          uint64_t v809 = *(void *)(a1 + 3464);
                          uint64_t v810 = *(unsigned int *)(a1 + 3476);
                          if (v809 != *(void *)(a1 + 3456))
                          {
                            unsigned int v814 = *(_DWORD *)v2403;
                            goto LABEL_1584;
                          }
                          if (v810)
                          {
                            uint64_t v811 = 0;
                            uint64_t v812 = 8 * v810;
                            unsigned int v813 = *(llvm::Value ***)(a1 + 3464);
                            do
                            {
                              if (*v813 == v793) {
                                goto LABEL_1605;
                              }
                              if (*v813 == (llvm::Value *)-2) {
                                uint64_t v811 = v813;
                              }
                              ++v813;
                              v812 -= 8;
                            }
                            while (v812);
                            if (v811)
                            {
                              *uint64_t v811 = v793;
                              --*(_DWORD *)(a1 + 3480);
                              goto LABEL_1605;
                            }
                          }
                          unsigned int v814 = *(_DWORD *)v2403;
                          if (v810 < *(_DWORD *)v2403)
                          {
                            *(_DWORD *)v2408 = v810 + 1;
                            *(void *)(v809 + 8 * v810) = v793;
                            goto LABEL_1605;
                          }
LABEL_1584:
                          if (3 * v814 <= 4 * ((int)v810 - *(_DWORD *)(a1 + 3480)))
                          {
                            if (v814 >= 0x40) {
                              v814 *= 2;
                            }
                            else {
                              unsigned int v814 = 128;
                            }
                          }
                          else if (v814 - v810 >= v814 >> 3)
                          {
LABEL_1586:
                            unsigned int v815 = v814 - 1;
                            unsigned int v816 = (v814 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                            int v817 = (llvm::Value **)(v809 + 8 * v816);
                            uint64_t v818 = *v817;
                            if (*v817 == (llvm::Value *)-1)
                            {
                              v819 = 0;
LABEL_1598:
                              if (v819) {
                                v823 = v819;
                              }
                              else {
                                v823 = v817;
                              }
                              if (*v823 != v793)
                              {
                                if (*v823 == (llvm::Value *)-2) {
                                  --*(_DWORD *)(a1 + 3480);
                                }
                                else {
                                  ++*(_DWORD *)v2408;
                                }
                                char *v823 = v793;
                              }
                            }
                            else
                            {
                              v819 = 0;
                              int v820 = 1;
                              while (v818 != v793)
                              {
                                if (v819) {
                                  BOOL v821 = 0;
                                }
                                else {
                                  BOOL v821 = v818 == (llvm::Value *)-2;
                                }
                                if (v821) {
                                  v819 = v817;
                                }
                                unsigned int v822 = v816 + v820++;
                                unsigned int v816 = v822 & v815;
                                int v817 = (llvm::Value **)(v809 + 8 * (v822 & v815));
                                uint64_t v818 = *v817;
                                if (*v817 == (llvm::Value *)-1) {
                                  goto LABEL_1598;
                                }
                              }
                            }
LABEL_1605:
                            uint64_t v824 = *(void *)(a1 + 3304);
                            uint64_t v825 = *(unsigned int *)(a1 + 3316);
                            if (v824 != *(void *)(a1 + 3296))
                            {
                              unsigned int v829 = *(_DWORD *)v2390;
                              goto LABEL_1616;
                            }
                            if (v825)
                            {
                              uint64_t v826 = 0;
                              uint64_t v827 = 8 * v825;
                              unsigned int v828 = *(llvm::Value ***)(a1 + 3304);
                              do
                              {
                                if (*v828 == v793) {
                                  goto LABEL_1637;
                                }
                                if (*v828 == (llvm::Value *)-2) {
                                  uint64_t v826 = v828;
                                }
                                ++v828;
                                v827 -= 8;
                              }
                              while (v827);
                              if (v826)
                              {
                                *uint64_t v826 = v793;
                                --*(_DWORD *)(a1 + 3320);
                                goto LABEL_1637;
                              }
                            }
                            unsigned int v829 = *(_DWORD *)v2390;
                            if (v825 < *(_DWORD *)v2390)
                            {
                              *(_DWORD *)v2394 = v825 + 1;
                              *(void *)(v824 + 8 * v825) = v793;
                              goto LABEL_1637;
                            }
LABEL_1616:
                            if (3 * v829 <= 4 * ((int)v825 - *(_DWORD *)(a1 + 3320)))
                            {
                              if (v829 >= 0x40) {
                                v829 *= 2;
                              }
                              else {
                                unsigned int v829 = 128;
                              }
                            }
                            else if (v829 - v825 >= v829 >> 3)
                            {
LABEL_1618:
                              unsigned int v830 = v829 - 1;
                              unsigned int v831 = (v829 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                              v832 = (llvm::Value **)(v824 + 8 * v831);
                              v833 = *v832;
                              if (*v832 == (llvm::Value *)-1)
                              {
                                int v834 = 0;
LABEL_1630:
                                if (v834) {
                                  __int16 v838 = v834;
                                }
                                else {
                                  __int16 v838 = v832;
                                }
                                if (*v838 != v793)
                                {
                                  if (*v838 == (llvm::Value *)-2) {
                                    --*(_DWORD *)(a1 + 3320);
                                  }
                                  else {
                                    ++*(_DWORD *)v2394;
                                  }
                                  *__int16 v838 = v793;
                                }
                              }
                              else
                              {
                                int v834 = 0;
                                int v835 = 1;
                                while (v833 != v793)
                                {
                                  if (v834) {
                                    BOOL v836 = 0;
                                  }
                                  else {
                                    BOOL v836 = v833 == (llvm::Value *)-2;
                                  }
                                  if (v836) {
                                    int v834 = v832;
                                  }
                                  unsigned int v837 = v831 + v835++;
                                  unsigned int v831 = v837 & v830;
                                  v832 = (llvm::Value **)(v824 + 8 * (v837 & v830));
                                  v833 = *v832;
                                  if (*v832 == (llvm::Value *)-1) {
                                    goto LABEL_1630;
                                  }
                                }
                              }
                              goto LABEL_1637;
                            }
                            llvm::SmallPtrSetImplBase::Grow(v2302, v829);
                            unsigned int v829 = *(_DWORD *)(a1 + 3312);
                            uint64_t v824 = *(void *)(a1 + 3304);
                            goto LABEL_1618;
                          }
                          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2305, v814);
                          unsigned int v814 = *(_DWORD *)(a1 + 3472);
                          uint64_t v809 = *(void *)(a1 + 3464);
                          goto LABEL_1586;
                        }
LABEL_1637:
                        *((unsigned char *)v793 + 17) |= 2 * v2381;
                        if (*((unsigned char *)*v556 + 8)) {
                          goto LABEL_1735;
                        }
                        v839 = (uint64_t *)(*(void *)v2433 + 1624);
                        v2448[0] = 257;
                        unint64_t v840 = sub_1CB845034((uint64_t)v2426, (uint64_t)v793, v839, (uint64_t)&v2444);
                        v793 = v840;
                        uint64_t v841 = *(void *)(a2 + 536);
                        uint64_t v842 = *(unsigned int *)(a2 + 548);
                        if (v841 != *(void *)(a2 + 528))
                        {
                          unsigned int v846 = *(_DWORD *)(a2 + 544);
                          goto LABEL_1649;
                        }
                        if (v842)
                        {
                          v843 = 0;
                          uint64_t v844 = 8 * v842;
                          uint64_t v845 = *(llvm::Instruction ***)(a2 + 536);
                          do
                          {
                            if (*v845 == v840) {
                              goto LABEL_1670;
                            }
                            if (*v845 == (llvm::Instruction *)-2) {
                              v843 = v845;
                            }
                            ++v845;
                            v844 -= 8;
                          }
                          while (v844);
                          if (v843)
                          {
                            uint64_t *v843 = v840;
                            --*(_DWORD *)(a2 + 552);
                            goto LABEL_1670;
                          }
                        }
                        unsigned int v846 = *(_DWORD *)(a2 + 544);
                        if (v842 < v846)
                        {
                          *(_DWORD *)(a2 + 548) = v842 + 1;
                          *(void *)(v841 + 8 * v842) = v840;
                          goto LABEL_1670;
                        }
LABEL_1649:
                        if (3 * v846 <= 4 * ((int)v842 - *(_DWORD *)(a2 + 552)))
                        {
                          if (v846 >= 0x40) {
                            v846 *= 2;
                          }
                          else {
                            unsigned int v846 = 128;
                          }
                        }
                        else if (v846 - v842 >= v846 >> 3)
                        {
LABEL_1651:
                          unsigned int v847 = v846 - 1;
                          unsigned int v848 = (v846 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                          v849 = (llvm::Value **)(v841 + 8 * v848);
                          uint64_t v850 = *v849;
                          if (*v849 == (llvm::Value *)-1)
                          {
                            uint64_t v851 = 0;
LABEL_1663:
                            if (v851) {
                              uint64_t v855 = v851;
                            }
                            else {
                              uint64_t v855 = v849;
                            }
                            if (*v855 != v793)
                            {
                              if (*v855 == (llvm::Value *)-2) {
                                --*(_DWORD *)(a2 + 552);
                              }
                              else {
                                ++*(_DWORD *)(a2 + 548);
                              }
                              *uint64_t v855 = v793;
                            }
                          }
                          else
                          {
                            uint64_t v851 = 0;
                            int v852 = 1;
                            while (v850 != v793)
                            {
                              if (v851) {
                                BOOL v853 = 0;
                              }
                              else {
                                BOOL v853 = v850 == (llvm::Value *)-2;
                              }
                              if (v853) {
                                uint64_t v851 = v849;
                              }
                              unsigned int v854 = v848 + v852++;
                              unsigned int v848 = v854 & v847;
                              v849 = (llvm::Value **)(v841 + 8 * (v854 & v847));
                              uint64_t v850 = *v849;
                              if (*v849 == (llvm::Value *)-1) {
                                goto LABEL_1663;
                              }
                            }
                          }
LABEL_1670:
                          if (v565 != v2376)
                          {
                            uint64_t v856 = *(void *)(a1 + 3464);
                            uint64_t v857 = *(unsigned int *)(a1 + 3476);
                            if (v856 != *(void *)(a1 + 3456))
                            {
                              unsigned int v861 = *(_DWORD *)v2403;
                              goto LABEL_1682;
                            }
                            if (v857)
                            {
                              BOOL v858 = 0;
                              uint64_t v859 = 8 * v857;
                              uint64_t v860 = *(llvm::Value ***)(a1 + 3464);
                              do
                              {
                                if (*v860 == v793) {
                                  goto LABEL_1703;
                                }
                                if (*v860 == (llvm::Value *)-2) {
                                  BOOL v858 = v860;
                                }
                                ++v860;
                                v859 -= 8;
                              }
                              while (v859);
                              if (v858)
                              {
                                *BOOL v858 = v793;
                                --*(_DWORD *)(a1 + 3480);
                                goto LABEL_1703;
                              }
                            }
                            unsigned int v861 = *(_DWORD *)v2403;
                            if (v857 < *(_DWORD *)v2403)
                            {
                              *(_DWORD *)v2408 = v857 + 1;
                              *(void *)(v856 + 8 * v857) = v793;
                              goto LABEL_1703;
                            }
LABEL_1682:
                            if (3 * v861 <= 4 * ((int)v857 - *(_DWORD *)(a1 + 3480)))
                            {
                              if (v861 >= 0x40) {
                                v861 *= 2;
                              }
                              else {
                                unsigned int v861 = 128;
                              }
                            }
                            else if (v861 - v857 >= v861 >> 3)
                            {
LABEL_1684:
                              unsigned int v862 = v861 - 1;
                              unsigned int v863 = (v861 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                              v864 = (llvm::Value **)(v856 + 8 * v863);
                              v865 = *v864;
                              if (*v864 == (llvm::Value *)-1)
                              {
                                uint64_t v866 = 0;
LABEL_1696:
                                if (v866) {
                                  v870 = v866;
                                }
                                else {
                                  v870 = v864;
                                }
                                if (*v870 != v793)
                                {
                                  if (*v870 == (llvm::Value *)-2) {
                                    --*(_DWORD *)(a1 + 3480);
                                  }
                                  else {
                                    ++*(_DWORD *)v2408;
                                  }
                                  char *v870 = v793;
                                }
                              }
                              else
                              {
                                uint64_t v866 = 0;
                                int v867 = 1;
                                while (v865 != v793)
                                {
                                  if (v866) {
                                    BOOL v868 = 0;
                                  }
                                  else {
                                    BOOL v868 = v865 == (llvm::Value *)-2;
                                  }
                                  if (v868) {
                                    uint64_t v866 = v864;
                                  }
                                  unsigned int v869 = v863 + v867++;
                                  unsigned int v863 = v869 & v862;
                                  v864 = (llvm::Value **)(v856 + 8 * (v869 & v862));
                                  v865 = *v864;
                                  if (*v864 == (llvm::Value *)-1) {
                                    goto LABEL_1696;
                                  }
                                }
                              }
LABEL_1703:
                              uint64_t v871 = *(void *)(a1 + 3304);
                              uint64_t v872 = *(unsigned int *)(a1 + 3316);
                              if (v871 != *(void *)(a1 + 3296))
                              {
                                unsigned int v876 = *(_DWORD *)v2390;
                                goto LABEL_1714;
                              }
                              if (v872)
                              {
                                unsigned int v873 = 0;
                                uint64_t v874 = 8 * v872;
                                v875 = *(llvm::Value ***)(a1 + 3304);
                                do
                                {
                                  if (*v875 == v793) {
                                    goto LABEL_1735;
                                  }
                                  if (*v875 == (llvm::Value *)-2) {
                                    unsigned int v873 = v875;
                                  }
                                  ++v875;
                                  v874 -= 8;
                                }
                                while (v874);
                                if (v873)
                                {
                                  *unsigned int v873 = v793;
                                  --*(_DWORD *)(a1 + 3320);
                                  goto LABEL_1735;
                                }
                              }
                              unsigned int v876 = *(_DWORD *)v2390;
                              if (v872 < *(_DWORD *)v2390)
                              {
                                *(_DWORD *)v2394 = v872 + 1;
                                *(void *)(v871 + 8 * v872) = v793;
                                goto LABEL_1735;
                              }
LABEL_1714:
                              if (3 * v876 <= 4 * ((int)v872 - *(_DWORD *)(a1 + 3320)))
                              {
                                if (v876 >= 0x40) {
                                  v876 *= 2;
                                }
                                else {
                                  unsigned int v876 = 128;
                                }
                              }
                              else if (v876 - v872 >= v876 >> 3)
                              {
LABEL_1716:
                                unsigned int v877 = v876 - 1;
                                unsigned int v878 = (v876 - 1) & ((v793 >> 4) ^ (v793 >> 9));
                                unsigned int v879 = (llvm::Value **)(v871 + 8 * v878);
                                unsigned int v880 = *v879;
                                if (*v879 == (llvm::Value *)-1)
                                {
                                  v881 = 0;
LABEL_1728:
                                  if (v881) {
                                    unsigned int v885 = v881;
                                  }
                                  else {
                                    unsigned int v885 = v879;
                                  }
                                  if (*v885 != v793)
                                  {
                                    if (*v885 == (llvm::Value *)-2) {
                                      --*(_DWORD *)(a1 + 3320);
                                    }
                                    else {
                                      ++*(_DWORD *)v2394;
                                    }
                                    *unsigned int v885 = v793;
                                  }
                                }
                                else
                                {
                                  v881 = 0;
                                  int v882 = 1;
                                  while (v880 != v793)
                                  {
                                    if (v881) {
                                      BOOL v883 = 0;
                                    }
                                    else {
                                      BOOL v883 = v880 == (llvm::Value *)-2;
                                    }
                                    if (v883) {
                                      v881 = v879;
                                    }
                                    unsigned int v884 = v878 + v882++;
                                    unsigned int v878 = v884 & v877;
                                    unsigned int v879 = (llvm::Value **)(v871 + 8 * (v884 & v877));
                                    unsigned int v880 = *v879;
                                    if (*v879 == (llvm::Value *)-1) {
                                      goto LABEL_1728;
                                    }
                                  }
                                }
                                goto LABEL_1735;
                              }
                              llvm::SmallPtrSetImplBase::Grow(v2302, v876);
                              unsigned int v876 = *(_DWORD *)(a1 + 3312);
                              uint64_t v871 = *(void *)(a1 + 3304);
                              goto LABEL_1716;
                            }
                            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2305, v861);
                            unsigned int v861 = *(_DWORD *)(a1 + 3472);
                            uint64_t v856 = *(void *)(a1 + 3464);
                            goto LABEL_1684;
                          }
LABEL_1735:
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v556, v793, (llvm::Value *)1);
                          sub_1CC871B3C(a1, (uint64_t)v556, a2);
                        }
                        llvm::SmallPtrSetImplBase::Grow(v2306, v846);
                        unsigned int v846 = *(_DWORD *)(a2 + 544);
                        uint64_t v841 = *(void *)(a2 + 536);
                        goto LABEL_1651;
                      }
                      llvm::SmallPtrSetImplBase::Grow(v2306, v739);
                      unsigned int v739 = *(_DWORD *)(a2 + 544);
                      uint64_t v734 = *(void *)(a2 + 536);
                      goto LABEL_1436;
                    }
                  }
                }
              }
            }
          }
          uint64_t v596 = v553;
          LOBYTE(v2470) = 0;
          if (sub_1CC871FF4((uint64_t)v556, &v2470))
          {
            uint64_t v597 = *(void *)(a2 + 536);
            uint64_t v598 = *(void *)(a2 + 528);
            if (v597 == v598)
            {
              uint64_t v599 = *(unsigned int *)(a2 + 548);
              uint64_t v600 = (uint64_t ***)(v597 + 8 * v599);
              if (v599)
              {
                uint64_t v601 = 0;
                while (*(uint64_t ***)(v597 + v601) != v556)
                {
                  v601 += 8;
                  if (8 * v599 == v601) {
                    goto LABEL_1199;
                  }
                }
                uint64_t v600 = (uint64_t ***)(v597 + v601);
              }
LABEL_1199:
              uint64_t v614 = *(void *)(a2 + 536);
            }
            else
            {
              uint64_t v602 = *(unsigned int *)(a2 + 544);
              int v603 = v602 - 1;
              unsigned int v604 = (v602 - 1) & ((v556 >> 4) ^ (v556 >> 9));
              uint64_t v600 = (uint64_t ***)(v597 + 8 * v604);
              int v605 = *v600;
              if (*v600 == (uint64_t **)-1)
              {
                __int16 v606 = 0;
LABEL_1212:
                if (v606) {
                  uint64_t v600 = v606;
                }
                LODWORD(v599) = *(_DWORD *)(a2 + 548);
                int v623 = (uint64_t ***)(v597 + 8 * v602);
                if (*v600 != v556) {
                  uint64_t v600 = v623;
                }
              }
              else
              {
                __int16 v606 = 0;
                int v607 = 1;
                while (v605 != v556)
                {
                  if (v606) {
                    BOOL v608 = 0;
                  }
                  else {
                    BOOL v608 = v605 == (uint64_t **)-2;
                  }
                  if (v608) {
                    __int16 v606 = v600;
                  }
                  unsigned int v609 = v604 + v607++;
                  unsigned int v604 = v609 & v603;
                  uint64_t v600 = (uint64_t ***)(v597 + 8 * (v609 & v603));
                  int v605 = *v600;
                  if (*v600 == (uint64_t **)-1) {
                    goto LABEL_1212;
                  }
                }
                LODWORD(v599) = *(_DWORD *)(a2 + 548);
              }
              uint64_t v614 = *(void *)(a2 + 528);
            }
            uint64_t v624 = *(unsigned int *)(a2 + 544);
            unsigned int v625 = v597 == v614 ? v599 : *(_DWORD *)(a2 + 544);
            if (v600 != (uint64_t ***)(v597 + 8 * v625))
            {
              int v626 = *((_DWORD *)v556 + 5);
              v627 = (v626 & 0x40000000) != 0 ? *(v556 - 1) : (uint64_t *)&v556[-4 * (v626 & 0x7FFFFFF)];
              uint64_t v628 = *v627;
              uint64_t v629 = v627[4];
              if (v597 == v614)
              {
                uint64_t v630 = v599;
                if (v599)
                {
                  uint64_t v631 = 8 * v599;
                  uint64_t v632 = *(void **)(a2 + 536);
                  while (*v632 != v628)
                  {
                    ++v632;
                    v631 -= 8;
                    if (!v631) {
                      goto LABEL_1229;
                    }
                  }
                }
                else
                {
LABEL_1229:
                  uint64_t v632 = (void *)(v597 + 8 * v599);
                }
                BOOL v633 = v632 != (void *)(v597 + 8 * v599);
LABEL_1231:
                uint64_t v634 = (void *)(v597 + 8 * v630);
                if (v599)
                {
                  uint64_t v635 = 0;
                  uint64_t v636 = 8 * v630;
                  while (*(void *)(v597 + v635) != v629)
                  {
                    v635 += 8;
                    if (v636 == v635) {
                      goto LABEL_1249;
                    }
                  }
                  uint64_t v634 = (void *)(v597 + v635);
                }
LABEL_1249:
                uint64_t v598 = *(void *)(a2 + 536);
              }
              else
              {
                int v637 = v624 - 1;
                unsigned int v638 = (v624 - 1) & ((v628 >> 4) ^ (v628 >> 9));
                uint64_t v639 = (uint64_t *)(v597 + 8 * v638);
                uint64_t v640 = *v639;
                if (*v639 == -1)
                {
                  uint64_t v641 = 0;
LABEL_1279:
                  if (v641) {
                    uint64_t v639 = v641;
                  }
                  uint64_t v645 = *v639;
                }
                else
                {
                  uint64_t v641 = 0;
                  int v642 = 1;
                  while (v640 != v628)
                  {
                    if (v641) {
                      BOOL v643 = 0;
                    }
                    else {
                      BOOL v643 = v640 == -2;
                    }
                    if (v643) {
                      uint64_t v641 = v639;
                    }
                    unsigned int v644 = v638 + v642++;
                    unsigned int v638 = v644 & v637;
                    uint64_t v639 = (uint64_t *)(v597 + 8 * (v644 & v637));
                    uint64_t v640 = *v639;
                    if (*v639 == -1) {
                      goto LABEL_1279;
                    }
                  }
                  uint64_t v645 = v628;
                }
                if (v597 == v598) {
                  unsigned int v667 = v599;
                }
                else {
                  unsigned int v667 = *(_DWORD *)(a2 + 544);
                }
                BOOL v633 = v645 == v628 && v639 != (uint64_t *)(v597 + 8 * v667);
                if (v597 == v598)
                {
                  uint64_t v630 = v599;
                  goto LABEL_1231;
                }
                unsigned int v669 = v637 & ((v629 >> 4) ^ (v629 >> 9));
                uint64_t v634 = (void *)(v597 + 8 * v669);
                uint64_t v670 = *v634;
                if (*v634 == -1)
                {
                  int v671 = 0;
LABEL_1345:
                  if (v671) {
                    uint64_t v634 = v671;
                  }
                  if (*v634 != v629) {
                    uint64_t v634 = (void *)(v597 + 8 * v624);
                  }
                }
                else
                {
                  int v671 = 0;
                  int v672 = 1;
                  while (v670 != v629)
                  {
                    if (v671) {
                      BOOL v673 = 0;
                    }
                    else {
                      BOOL v673 = v670 == -2;
                    }
                    if (v673) {
                      int v671 = v634;
                    }
                    unsigned int v674 = v669 + v672++;
                    unsigned int v669 = v674 & v637;
                    uint64_t v634 = (void *)(v597 + 8 * (v674 & v637));
                    uint64_t v670 = *v634;
                    if (*v634 == -1) {
                      goto LABEL_1345;
                    }
                  }
                }
              }
              unsigned int v646 = v597 == v598 ? v599 : *(_DWORD *)(a2 + 544);
              v647 = (void *)(v597 + 8 * v646);
              BOOL v648 = v634 != v647;
              unint64_t v649 = *(uint64_t **)(a1 + 3464);
              v650 = *(uint64_t **)(a1 + 3456);
              if (v649 == v650)
              {
                uint64_t v651 = *(unsigned int *)v2408;
                if (v651)
                {
                  unint64_t v652 = 0;
                  uint64_t v653 = 8 * v651;
                  uint64_t v654 = &v649[v651];
                  while (v649[v652 / 8] != v628)
                  {
                    v652 += 8;
                    if (v653 == v652)
                    {
                      int v655 = v654;
                      goto LABEL_1271;
                    }
                  }
                  int v655 = &v649[v652 / 8];
LABEL_1271:
                  unint64_t v665 = 0;
                  BOOL v666 = v655 != v654;
                  while (v649[v665 / 8] != v629)
                  {
                    v665 += 8;
                    if (v653 == v665) {
                      goto LABEL_1276;
                    }
                  }
                  uint64_t v654 = &v649[v665 / 8];
LABEL_1276:
                  v650 = *(uint64_t **)(a1 + 3464);
                }
                else
                {
                  BOOL v666 = 0;
                  v650 = *(uint64_t **)(a1 + 3464);
                  uint64_t v654 = v650;
                }
              }
              else
              {
                uint64_t v656 = *(unsigned int *)v2403;
                int v657 = v656 - 1;
                unsigned int v658 = (v656 - 1) & ((v628 >> 4) ^ (v628 >> 9));
                unsigned int v659 = &v649[v658];
                uint64_t v660 = *v659;
                if (*v659 == -1)
                {
                  BOOL v661 = 0;
LABEL_1304:
                  if (v661) {
                    unsigned int v659 = v661;
                  }
                  if (*v659 != v628) {
                    unsigned int v659 = &v649[v656];
                  }
                }
                else
                {
                  BOOL v661 = 0;
                  int v662 = 1;
                  while (v660 != v628)
                  {
                    if (v661) {
                      BOOL v663 = 0;
                    }
                    else {
                      BOOL v663 = v660 == -2;
                    }
                    if (v663) {
                      BOOL v661 = v659;
                    }
                    unsigned int v664 = v658 + v662++;
                    unsigned int v658 = v664 & v657;
                    unsigned int v659 = &v649[v664 & v657];
                    uint64_t v660 = *v659;
                    if (*v659 == -1) {
                      goto LABEL_1304;
                    }
                  }
                }
                v675 = &v649[v656];
                BOOL v666 = v659 != v675;
                unsigned int v676 = v657 & ((v629 >> 4) ^ (v629 >> 9));
                int v677 = &v649[v676];
                uint64_t v678 = *v677;
                if (*v677 == -1)
                {
                  uint64_t v679 = 0;
LABEL_1321:
                  if (v679) {
                    int v677 = v679;
                  }
                  uint64_t v683 = *v677;
                }
                else
                {
                  uint64_t v679 = 0;
                  int v680 = 1;
                  while (v678 != v629)
                  {
                    if (v679) {
                      BOOL v681 = 0;
                    }
                    else {
                      BOOL v681 = v678 == -2;
                    }
                    if (v681) {
                      uint64_t v679 = v677;
                    }
                    unsigned int v682 = v676 + v680++;
                    unsigned int v676 = v682 & v657;
                    int v677 = &v649[v682 & v657];
                    uint64_t v678 = *v677;
                    if (*v677 == -1) {
                      goto LABEL_1321;
                    }
                  }
                  uint64_t v683 = v629;
                }
                uint64_t v654 = v683 == v629 ? v677 : v675;
              }
              BOOL v684 = v634 != v647;
              v685 = (unsigned int *)(a1 + 3476);
              if (v649 != v650) {
                v685 = (unsigned int *)(a1 + 3472);
              }
              int v686 = &v649[*v685];
              BOOL v54 = v654 == v686;
              BOOL v687 = v654 != v686;
              BOOL v688 = !v54 || v684;
              if ((v633 || v666) != v688)
              {
                int v689 = v2470;
                if (v688)
                {
                  int v690 = 0;
                  BOOL v666 = v687;
                  BOOL v633 = v648;
                  uint64_t v691 = v628;
                  uint64_t v628 = v629;
                  if (!v629) {
                    goto LABEL_1840;
                  }
                }
                else
                {
                  int v690 = v2470;
                  uint64_t v691 = v629;
                  int v689 = 0;
                  if (!v628) {
                    goto LABEL_1840;
                  }
                }
                unsigned int v692 = *(unsigned __int8 *)(v628 + 16);
                if (v692 < 0x1C) {
                  goto LABEL_1840;
                }
                if (v692 - 59 < 0xFFFFFFEE) {
                  goto LABEL_1840;
                }
                if (*(uint64_t **)(v628 + 40) != v556[5]) {
                  goto LABEL_1840;
                }
                int v2382 = v690;
                uint64_t v2380 = v691;
                if (!sub_1CC871FF4(v628, &v2470)) {
                  goto LABEL_1840;
                }
                int v693 = *(unsigned __int8 *)(v628 + 16);
                if ((_BYTE)v2470 || v693 != *((unsigned __int8 *)v556 + 16))
                {
                  if ((v693 - 41) > 3 || *((unsigned __int8 *)v556 + 16) - 41 > 3) {
                    goto LABEL_1840;
                  }
                  if (*((unsigned char *)*v556 + 8) == 13) {
                    int v719 = 13;
                  }
                  else {
                    int v719 = 14;
                  }
                  unsigned int v2375 = v719;
                  if (*((unsigned char *)*v556 + 8) == 13) {
                    int v694 = 15;
                  }
                  else {
                    int v694 = 16;
                  }
                }
                else
                {
                  int v694 = v693 - 28;
                  unsigned int v2375 = v694;
                }
                unsigned int v2379 = v694;
                v720 = *(llvm::Type **)(v628 - 64);
                uint64_t v721 = *(llvm::Type **)(v628 - 32);
                int v722 = *(llvm::Type ***)(a2 + 536);
                unsigned int v723 = *(llvm::Type ***)(a2 + 528);
                if (v722 == v723)
                {
                  uint64_t v724 = *(unsigned int *)(a2 + 548);
                  if (v724)
                  {
                    unint64_t v725 = 0;
                    uint64_t v726 = 8 * v724;
                    BOOL v727 = &v722[v724];
                    while (v722[v725 / 8] != v720)
                    {
                      v725 += 8;
                      if (v726 == v725)
                      {
                        unsigned int v728 = &v722[v724];
                        goto LABEL_1737;
                      }
                    }
                    unsigned int v728 = &v722[v725 / 8];
LABEL_1737:
                    unint64_t v886 = 0;
                    LODWORD(v748) = *(_DWORD *)(a2 + 544);
                    BOOL v887 = v728 != v727;
                    while (v722[v886 / 8] != v721)
                    {
                      v886 += 8;
                      if (v726 == v886) {
                        goto LABEL_1742;
                      }
                    }
                    BOOL v727 = &v722[v886 / 8];
LABEL_1742:
                    unsigned int v723 = *(llvm::Type ***)(a2 + 536);
                  }
                  else
                  {
                    BOOL v887 = 0;
                    LODWORD(v748) = *(_DWORD *)(a2 + 544);
                    unsigned int v723 = *(llvm::Type ***)(a2 + 536);
                    BOOL v727 = v723;
                  }
                }
                else
                {
                  uint64_t v748 = *(unsigned int *)(a2 + 544);
                  int v749 = v748 - 1;
                  unsigned int v750 = (v748 - 1) & ((v720 >> 4) ^ (v720 >> 9));
                  v751 = &v722[v750];
                  BOOL v752 = *v751;
                  if (*v751 == (llvm::Type *)-1)
                  {
                    v753 = 0;
LABEL_1754:
                    if (v753) {
                      v751 = v753;
                    }
                    int v760 = *v751;
                  }
                  else
                  {
                    v753 = 0;
                    int v754 = 1;
                    while (v752 != v720)
                    {
                      if (v753) {
                        BOOL v755 = 0;
                      }
                      else {
                        BOOL v755 = v752 == (llvm::Type *)-2;
                      }
                      if (v755) {
                        v753 = v751;
                      }
                      unsigned int v756 = v750 + v754++;
                      unsigned int v750 = v756 & v749;
                      v751 = &v722[v756 & v749];
                      BOOL v752 = *v751;
                      if (*v751 == (llvm::Type *)-1) {
                        goto LABEL_1754;
                      }
                    }
                    int v760 = *(llvm::Type **)(v628 - 64);
                  }
                  BOOL v887 = v760 == v720 && v751 != &v722[v748];
                  unsigned int v890 = v749 & ((v721 >> 4) ^ (v721 >> 9));
                  unsigned int v891 = &v722[v890];
                  v892 = *v891;
                  if (*v891 == (llvm::Type *)-1)
                  {
                    int v893 = 0;
LABEL_1776:
                    if (v893) {
                      unsigned int v891 = v893;
                    }
                    uint64_t v897 = *v891;
                  }
                  else
                  {
                    int v893 = 0;
                    int v894 = 1;
                    while (v892 != v721)
                    {
                      if (v893) {
                        BOOL v895 = 0;
                      }
                      else {
                        BOOL v895 = v892 == (llvm::Type *)-2;
                      }
                      if (v895) {
                        int v893 = v891;
                      }
                      unsigned int v896 = v890 + v894++;
                      unsigned int v890 = v896 & v749;
                      unsigned int v891 = &v722[v896 & v749];
                      v892 = *v891;
                      if (*v891 == (llvm::Type *)-1) {
                        goto LABEL_1776;
                      }
                    }
                    uint64_t v897 = *(llvm::Type **)(v628 - 32);
                  }
                  LODWORD(v724) = *(_DWORD *)(a2 + 548);
                  if (v897 == v721) {
                    BOOL v727 = v891;
                  }
                  else {
                    BOOL v727 = &v722[v748];
                  }
                }
                if (v722 == v723) {
                  LODWORD(v748) = v724;
                }
                BOOL v898 = &v722[v748];
                BOOL v899 = v727 != v898;
                uint64_t v900 = *(llvm::Type ***)(a1 + 3464);
                uint64_t v901 = *(llvm::Type ***)(a1 + 3456);
                if (v900 == v901)
                {
                  uint64_t v902 = *(unsigned int *)v2408;
                  if (v902)
                  {
                    unint64_t v903 = 0;
                    uint64_t v904 = 8 * v902;
                    uint64_t v905 = &v900[v902];
                    while (v900[v903 / 8] != v720)
                    {
                      v903 += 8;
                      if (v904 == v903)
                      {
                        int v906 = v905;
                        goto LABEL_1802;
                      }
                    }
                    int v906 = &v900[v903 / 8];
LABEL_1802:
                    unint64_t v916 = 0;
                    BOOL v917 = v906 != v905;
                    while (v900[v916 / 8] != v721)
                    {
                      v916 += 8;
                      if (v904 == v916) {
                        goto LABEL_1807;
                      }
                    }
                    uint64_t v905 = &v900[v916 / 8];
LABEL_1807:
                    uint64_t v901 = *(llvm::Type ***)(a1 + 3464);
                  }
                  else
                  {
                    BOOL v917 = 0;
                    uint64_t v901 = *(llvm::Type ***)(a1 + 3464);
                    uint64_t v905 = v901;
                  }
                }
                else
                {
                  uint64_t v907 = *(unsigned int *)v2403;
                  int v908 = v907 - 1;
                  unsigned int v909 = (v907 - 1) & ((v720 >> 4) ^ (v720 >> 9));
                  int v910 = &v900[v909];
                  BOOL v911 = *v910;
                  if (*v910 == (llvm::Type *)-1)
                  {
                    unsigned int v912 = 0;
LABEL_1810:
                    if (v912) {
                      int v910 = v912;
                    }
                    if (*v910 != v720) {
                      int v910 = &v900[v907];
                    }
                  }
                  else
                  {
                    unsigned int v912 = 0;
                    int v913 = 1;
                    while (v911 != v720)
                    {
                      if (v912) {
                        BOOL v914 = 0;
                      }
                      else {
                        BOOL v914 = v911 == (llvm::Type *)-2;
                      }
                      if (v914) {
                        unsigned int v912 = v910;
                      }
                      unsigned int v915 = v909 + v913++;
                      unsigned int v909 = v915 & v908;
                      int v910 = &v900[v915 & v908];
                      BOOL v911 = *v910;
                      if (*v910 == (llvm::Type *)-1) {
                        goto LABEL_1810;
                      }
                    }
                  }
                  v918 = &v900[v907];
                  BOOL v917 = v910 != v918;
                  unsigned int v919 = v908 & ((v721 >> 4) ^ (v721 >> 9));
                  v920 = &v900[v919];
                  v921 = *v920;
                  if (*v920 == (llvm::Type *)-1)
                  {
                    uint64_t v922 = 0;
LABEL_1827:
                    if (v922) {
                      v920 = v922;
                    }
                    unsigned int v926 = *v920;
                  }
                  else
                  {
                    uint64_t v922 = 0;
                    int v923 = 1;
                    while (v921 != v721)
                    {
                      if (v922) {
                        BOOL v924 = 0;
                      }
                      else {
                        BOOL v924 = v921 == (llvm::Type *)-2;
                      }
                      if (v924) {
                        uint64_t v922 = v920;
                      }
                      unsigned int v925 = v919 + v923++;
                      unsigned int v919 = v925 & v908;
                      v920 = &v900[v925 & v908];
                      v921 = *v920;
                      if (*v920 == (llvm::Type *)-1) {
                        goto LABEL_1827;
                      }
                    }
                    unsigned int v926 = *(llvm::Type **)(v628 - 32);
                  }
                  if (v926 == v721) {
                    uint64_t v905 = v920;
                  }
                  else {
                    uint64_t v905 = v918;
                  }
                }
                int v927 = v727 != v898;
                unsigned int v928 = (unsigned int *)(a1 + 3476);
                if (v900 != v901) {
                  unsigned int v928 = (unsigned int *)(a1 + 3472);
                }
                v929 = &v900[*v928];
                BOOL v930 = v689 != v2470;
                if (v905 != v929) {
                  int v927 = 1;
                }
                if ((v887 || v917) != v927)
                {
                  unsigned char *v2413 = 1;
                  if (v927)
                  {
                    BOOL v2311 = v930;
                    v2374 = v720;
                    uint64_t v2321 = (uint64_t)v721;
                    BOOL v2324 = v899;
                    BOOL v2326 = v905 != v929;
                    int v2377 = v689;
                  }
                  else
                  {
                    BOOL v2326 = v917;
                    BOOL v2324 = v887;
                    uint64_t v2321 = (uint64_t)v720;
                    v2374 = v721;
                    int v2377 = v930;
                    BOOL v2311 = v689;
                  }
                  uint64_t v1002 = 0;
                  uint64_t v1003 = **v556;
                  v2426[0] = &v2427;
                  v2426[1] = (void *)0x200000000;
                  uint64_t v2433 = v1003;
                  v2434 = &v2442;
                  v2435 = v2443;
                  uint64_t v2436 = 0;
                  int v2437 = 0;
                  __int16 v2438 = 512;
                  char v2439 = 7;
                  v2431 = 0;
                  v2432 = 0;
                  uint64_t v2440 = 0;
                  uint64_t v2441 = 0;
                  v2442 = &unk_1F2616E88;
                  v2443[0] = &unk_1F2617008;
                  v2431 = v556[5];
                  v2432 = v556 + 3;
                  v1004 = (unsigned __int8 *)v556[6];
                  *(void *)&long long v2467 = v1004;
                  if (v1004)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v2467, v1004, 2);
                    uint64_t v1002 = v2467;
                  }
                  sub_1CB8461A4((uint64_t)v2426, 0, v1002);
                  int v1005 = v2382;
                  uint64_t v1006 = v2380;
                  uint64_t v1007 = (uint64_t)v2374;
                  if ((void)v2467)
                  {
                    int v1068 = *(unsigned __int8 *)v2467;
                    if ((v1068 - 4) > 0x1E)
                    {
                      if ((v1068 - 3) >= 0xFFFFFFFE) {
                        uint64_t v1072 = v2467;
                      }
                      else {
                        uint64_t v1072 = 0;
                      }
                      if ((v1068 - 3) < 0xFFFFFFFE)
                      {
                        if (v1068 == 3) {
                          *(void *)(v2467 + 8) = 0;
                        }
                        goto LABEL_1975;
                      }
                      unint64_t v1070 = v1072 + 8;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2 && !*(_DWORD *)(v2467 + 12)) {
                        goto LABEL_1975;
                      }
                      uint64_t v1069 = *(void *)(v2467 + 16);
                      if ((v1069 & 4) == 0) {
                        goto LABEL_1975;
                      }
                      unint64_t v1070 = v1069 & 0xFFFFFFFFFFFFFFF8;
                      if (!v1070) {
                        goto LABEL_1975;
                      }
                    }
                    v2444 = (uint64_t *)&v2467;
                    sub_1CC5FA668(v1070 + 16, &v2444);
                    int v1005 = v2382;
                    uint64_t v1006 = v2380;
                    uint64_t v1007 = (uint64_t)v2374;
                  }
LABEL_1975:
                  if (v1005 == v2377)
                  {
                    v2448[0] = 257;
                    uint64_t v1008 = v2375;
                    goto LABEL_1980;
                  }
                  if (v1005)
                  {
                    v2448[0] = 257;
                    uint64_t v1008 = v2379;
                    uint64_t v1009 = v1007;
                    uint64_t v1007 = v1006;
                  }
                  else
                  {
                    v2448[0] = 257;
                    uint64_t v1008 = v2379;
LABEL_1980:
                    uint64_t v1009 = v1006;
                  }
                  uint64_t v1010 = sub_1CB844E98((uint64_t)v2426, v1008, v1009, v1007, (uint64_t)&v2444, 0);
                  uint64_t v1011 = (uint64_t)v1010;
                  unsigned int v1012 = *((unsigned __int8 *)v1010 + 16);
                  if (v1010 && v1012 >= 0x1C && v1012 - 59 >= 0xFFFFFFEE)
                  {
                    llvm::Instruction::copyIRFlags((uint64_t)v1010, (uint64_t)v556, 1);
                    llvm::Instruction::andIRFlags(v1011, v628);
                  }
                  if (v2382 && v2377)
                  {
                    v2448[0] = 257;
                    uint64_t v1013 = v2379;
                    uint64_t v1014 = v2321;
                    uint64_t v1015 = v1011;
                  }
                  else
                  {
                    v2448[0] = 257;
                    if (v2311) {
                      uint64_t v1013 = v2379;
                    }
                    else {
                      uint64_t v1013 = v2375;
                    }
                    uint64_t v1014 = v1011;
                    uint64_t v1015 = v2321;
                  }
                  BOOL v1016 = sub_1CB844E98((uint64_t)v2426, v1013, v1014, v1015, (uint64_t)&v2444, 0);
                  unsigned int v1017 = v1016;
                  unsigned int v1018 = *((unsigned __int8 *)v1016 + 16);
                  if (v1016 && v1018 >= 0x1C && v1018 - 59 >= 0xFFFFFFEE)
                  {
                    llvm::Instruction::copyIRFlags((uint64_t)v1016, (uint64_t)v556, 1);
                    llvm::Instruction::andIRFlags((uint64_t)v1017, v628);
                  }
                  BOOL v1019 = v2326;
                  if (v633 || v2324)
                  {
                    uint64_t v1020 = *(void *)(a2 + 536);
                    uint64_t v1021 = *(unsigned int *)(a2 + 548);
                    if (v1020 != *(void *)(a2 + 528))
                    {
                      unsigned int v1025 = *(_DWORD *)(a2 + 544);
                      goto LABEL_2008;
                    }
                    if (v1021)
                    {
                      v1022 = 0;
                      uint64_t v1023 = 8 * v1021;
                      v1024 = *(llvm::Value ***)(a2 + 536);
                      do
                      {
                        if (*v1024 == v1017) {
                          goto LABEL_2043;
                        }
                        if (*v1024 == (llvm::Value *)-2) {
                          v1022 = v1024;
                        }
                        ++v1024;
                        v1023 -= 8;
                      }
                      while (v1023);
                      if (v1022)
                      {
                        uint64_t *v1022 = v1017;
                        --*(_DWORD *)(a2 + 552);
                        goto LABEL_2043;
                      }
                    }
                    unsigned int v1025 = *(_DWORD *)(a2 + 544);
                    if (v1021 < v1025)
                    {
                      *(_DWORD *)(a2 + 548) = v1021 + 1;
                      *(void *)(v1020 + 8 * v1021) = v1017;
                      goto LABEL_2043;
                    }
LABEL_2008:
                    if (3 * v1025 <= 4 * ((int)v1021 - *(_DWORD *)(a2 + 552)))
                    {
                      if (v1025 >= 0x40) {
                        v1025 *= 2;
                      }
                      else {
                        unsigned int v1025 = 128;
                      }
                    }
                    else if (v1025 - v1021 >= v1025 >> 3)
                    {
LABEL_2010:
                      unsigned int v1026 = v1025 - 1;
                      unsigned int v1027 = (v1025 - 1) & ((v1017 >> 4) ^ (v1017 >> 9));
                      v1028 = (llvm::Value **)(v1020 + 8 * v1027);
                      unint64_t v1029 = *v1028;
                      if (*v1028 == (llvm::Value *)-1)
                      {
                        v1030 = 0;
LABEL_2036:
                        if (v1030) {
                          unsigned int v1037 = v1030;
                        }
                        else {
                          unsigned int v1037 = v1028;
                        }
                        if (*v1037 != v1017)
                        {
                          if (*v1037 == (llvm::Value *)-2) {
                            --*(_DWORD *)(a2 + 552);
                          }
                          else {
                            ++*(_DWORD *)(a2 + 548);
                          }
                          *unsigned int v1037 = v1017;
                        }
                      }
                      else
                      {
                        v1030 = 0;
                        int v1031 = 1;
                        while (v1029 != v1017)
                        {
                          if (v1030) {
                            BOOL v1032 = 0;
                          }
                          else {
                            BOOL v1032 = v1029 == (llvm::Value *)-2;
                          }
                          if (v1032) {
                            v1030 = v1028;
                          }
                          unsigned int v1033 = v1027 + v1031++;
                          unsigned int v1027 = v1033 & v1026;
                          v1028 = (llvm::Value **)(v1020 + 8 * (v1033 & v1026));
                          unint64_t v1029 = *v1028;
                          if (*v1028 == (llvm::Value *)-1) {
                            goto LABEL_2036;
                          }
                        }
                      }
                      goto LABEL_2043;
                    }
                    llvm::SmallPtrSetImplBase::Grow(v2306, v1025);
                    BOOL v1019 = v2326;
                    unsigned int v1025 = *(_DWORD *)(a2 + 544);
                    uint64_t v1020 = *(void *)(a2 + 536);
                    goto LABEL_2010;
                  }
LABEL_2043:
                  if (v666 || v1019)
                  {
                    uint64_t v1038 = *(void *)(a1 + 3304);
                    uint64_t v1039 = *(unsigned int *)(a1 + 3316);
                    if (v1038 != *(void *)(a1 + 3296))
                    {
                      unsigned int v1043 = *(_DWORD *)v2390;
                      goto LABEL_2055;
                    }
                    if (v1039)
                    {
                      int v1040 = 0;
                      uint64_t v1041 = 8 * v1039;
                      unsigned int v1042 = *(llvm::Value ***)(a1 + 3304);
                      do
                      {
                        if (*v1042 == v1017) {
                          goto LABEL_2076;
                        }
                        if (*v1042 == (llvm::Value *)-2) {
                          int v1040 = v1042;
                        }
                        ++v1042;
                        v1041 -= 8;
                      }
                      while (v1041);
                      if (v1040)
                      {
                        *int v1040 = v1017;
                        --*(_DWORD *)(a1 + 3320);
                        goto LABEL_2076;
                      }
                    }
                    unsigned int v1043 = *(_DWORD *)v2390;
                    if (v1039 < *(_DWORD *)v2390)
                    {
                      *(_DWORD *)v2394 = v1039 + 1;
                      *(void *)(v1038 + 8 * v1039) = v1017;
                      goto LABEL_2076;
                    }
LABEL_2055:
                    if (3 * v1043 <= 4 * ((int)v1039 - *(_DWORD *)(a1 + 3320)))
                    {
                      if (v1043 >= 0x40) {
                        v1043 *= 2;
                      }
                      else {
                        unsigned int v1043 = 128;
                      }
                    }
                    else if (v1043 - v1039 >= v1043 >> 3)
                    {
LABEL_2057:
                      unsigned int v1044 = v1043 - 1;
                      unsigned int v1045 = (v1043 - 1) & ((v1017 >> 4) ^ (v1017 >> 9));
                      v1046 = (llvm::Value **)(v1038 + 8 * v1045);
                      v1047 = *v1046;
                      if (*v1046 == (llvm::Value *)-1)
                      {
                        int v1048 = 0;
LABEL_2069:
                        if (v1048) {
                          uint64_t v1052 = v1048;
                        }
                        else {
                          uint64_t v1052 = v1046;
                        }
                        if (*v1052 != v1017)
                        {
                          if (*v1052 == (llvm::Value *)-2) {
                            --*(_DWORD *)(a1 + 3320);
                          }
                          else {
                            ++*(_DWORD *)v2394;
                          }
                          *uint64_t v1052 = v1017;
                        }
                      }
                      else
                      {
                        int v1048 = 0;
                        int v1049 = 1;
                        while (v1047 != v1017)
                        {
                          if (v1048) {
                            BOOL v1050 = 0;
                          }
                          else {
                            BOOL v1050 = v1047 == (llvm::Value *)-2;
                          }
                          if (v1050) {
                            int v1048 = v1046;
                          }
                          unsigned int v1051 = v1045 + v1049++;
                          unsigned int v1045 = v1051 & v1044;
                          v1046 = (llvm::Value **)(v1038 + 8 * (v1051 & v1044));
                          v1047 = *v1046;
                          if (*v1046 == (llvm::Value *)-1) {
                            goto LABEL_2069;
                          }
                        }
                      }
LABEL_2076:
                      uint64_t v1053 = *(void *)(a1 + 3464);
                      uint64_t v1054 = *(unsigned int *)(a1 + 3476);
                      if (v1053 != *(void *)(a1 + 3456))
                      {
                        unsigned int v1058 = *(_DWORD *)v2403;
                        goto LABEL_2087;
                      }
                      if (v1054)
                      {
                        v1055 = 0;
                        uint64_t v1056 = 8 * v1054;
                        unint64_t v1057 = *(llvm::Value ***)(a1 + 3464);
                        do
                        {
                          if (*v1057 == v1017) {
                            goto LABEL_2108;
                          }
                          if (*v1057 == (llvm::Value *)-2) {
                            v1055 = v1057;
                          }
                          ++v1057;
                          v1056 -= 8;
                        }
                        while (v1056);
                        if (v1055)
                        {
                          unint64_t *v1055 = v1017;
                          --*(_DWORD *)(a1 + 3480);
                          goto LABEL_2108;
                        }
                      }
                      unsigned int v1058 = *(_DWORD *)v2403;
                      if (v1054 < *(_DWORD *)v2403)
                      {
                        *(_DWORD *)v2408 = v1054 + 1;
                        *(void *)(v1053 + 8 * v1054) = v1017;
                        goto LABEL_2108;
                      }
LABEL_2087:
                      if (3 * v1058 <= 4 * ((int)v1054 - *(_DWORD *)(a1 + 3480)))
                      {
                        if (v1058 >= 0x40) {
                          v1058 *= 2;
                        }
                        else {
                          unsigned int v1058 = 128;
                        }
                      }
                      else if (v1058 - v1054 >= v1058 >> 3)
                      {
LABEL_2089:
                        unsigned int v1059 = v1058 - 1;
                        unsigned int v1060 = (v1058 - 1) & ((v1017 >> 4) ^ (v1017 >> 9));
                        int v1061 = (llvm::Value **)(v1053 + 8 * v1060);
                        uint64_t v1062 = *v1061;
                        if (*v1061 == (llvm::Value *)-1)
                        {
                          uint64_t v1063 = 0;
LABEL_2101:
                          if (v1063) {
                            uint64_t v1067 = v1063;
                          }
                          else {
                            uint64_t v1067 = v1061;
                          }
                          if (*v1067 != v1017)
                          {
                            if (*v1067 == (llvm::Value *)-2) {
                              --*(_DWORD *)(a1 + 3480);
                            }
                            else {
                              ++*(_DWORD *)v2408;
                            }
                            *uint64_t v1067 = v1017;
                          }
                        }
                        else
                        {
                          uint64_t v1063 = 0;
                          int v1064 = 1;
                          while (v1062 != v1017)
                          {
                            if (v1063) {
                              BOOL v1065 = 0;
                            }
                            else {
                              BOOL v1065 = v1062 == (llvm::Value *)-2;
                            }
                            if (v1065) {
                              uint64_t v1063 = v1061;
                            }
                            unsigned int v1066 = v1060 + v1064++;
                            unsigned int v1060 = v1066 & v1059;
                            int v1061 = (llvm::Value **)(v1053 + 8 * (v1066 & v1059));
                            uint64_t v1062 = *v1061;
                            if (*v1061 == (llvm::Value *)-1) {
                              goto LABEL_2101;
                            }
                          }
                        }
                        goto LABEL_2108;
                      }
                      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2305, v1058);
                      unsigned int v1058 = *(_DWORD *)(a1 + 3472);
                      uint64_t v1053 = *(void *)(a1 + 3464);
                      goto LABEL_2089;
                    }
                    llvm::SmallPtrSetImplBase::Grow(v2302, v1043);
                    unsigned int v1043 = *(_DWORD *)(a1 + 3312);
                    uint64_t v1038 = *(void *)(a1 + 3304);
                    goto LABEL_2057;
                  }
LABEL_2108:
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v556, v1017, (llvm::Value *)1);
                  sub_1CC871B3C(a1, (uint64_t)v556, a2);
                }
              }
            }
          }
LABEL_1840:
          int v553 = v596;
          if (*((_DWORD *)*v556 + 2) == 269)
          {
            int v931 = *((unsigned __int8 *)v556 + 16);
            unsigned int v932 = v931 - 83;
            if (v931 != 83)
            {
              uint64_t v933 = *(void *)(a2 + 536);
              uint64_t v934 = *(void *)(a2 + 528);
              if (v933 == v934)
              {
                uint64_t v935 = *(unsigned int *)(a2 + 548);
                int v936 = (uint64_t ***)(v933 + 8 * v935);
                if (v935)
                {
                  uint64_t v937 = 0;
                  while (*(uint64_t ***)(v933 + v937) != v556)
                  {
                    v937 += 8;
                    if (8 * v935 == v937) {
                      goto LABEL_1861;
                    }
                  }
                  int v936 = (uint64_t ***)(v933 + v937);
                }
LABEL_1861:
                uint64_t v946 = *(void *)(a2 + 536);
              }
              else
              {
                uint64_t v938 = *(unsigned int *)(a2 + 544);
                int v939 = v938 - 1;
                unsigned int v940 = (v938 - 1) & ((v556 >> 4) ^ (v556 >> 9));
                int v936 = (uint64_t ***)(v933 + 8 * v940);
                v941 = *v936;
                if (*v936 == (uint64_t **)-1)
                {
                  unsigned int v942 = 0;
LABEL_1863:
                  if (v942) {
                    int v936 = v942;
                  }
                  LODWORD(v935) = *(_DWORD *)(a2 + 548);
                  v947 = (uint64_t ***)(v933 + 8 * v938);
                  if (*v936 != v556) {
                    int v936 = v947;
                  }
                }
                else
                {
                  unsigned int v942 = 0;
                  int v943 = 1;
                  while (v941 != v556)
                  {
                    if (v942) {
                      BOOL v944 = 0;
                    }
                    else {
                      BOOL v944 = v941 == (uint64_t **)-2;
                    }
                    if (v944) {
                      unsigned int v942 = v936;
                    }
                    unsigned int v945 = v940 + v943++;
                    unsigned int v940 = v945 & v939;
                    int v936 = (uint64_t ***)(v933 + 8 * (v945 & v939));
                    v941 = *v936;
                    if (*v936 == (uint64_t **)-1) {
                      goto LABEL_1863;
                    }
                  }
                  LODWORD(v935) = *(_DWORD *)(a2 + 548);
                }
                uint64_t v946 = *(void *)(a2 + 528);
              }
              unsigned int v948 = v933 == v946 ? v935 : *(_DWORD *)(a2 + 544);
              if (v936 == (uint64_t ***)(v933 + 8 * v948))
              {
                uint64_t v949 = *(void *)(a1 + 3304);
                uint64_t v950 = *(void *)(a1 + 3296);
                if (v949 == v950)
                {
                  uint64_t v951 = *(unsigned int *)v2394;
                  v952 = (uint64_t ***)(v949 + 8 * v951);
                  if (v951)
                  {
                    uint64_t v953 = 0;
                    uint64_t v954 = 8 * v951;
                    while (*(uint64_t ***)(v949 + v953) != v556)
                    {
                      v953 += 8;
                      if (v954 == v953) {
                        goto LABEL_1890;
                      }
                    }
                    v952 = (uint64_t ***)(v949 + v953);
                  }
LABEL_1890:
                  uint64_t v950 = *(void *)(a1 + 3304);
                }
                else
                {
                  uint64_t v955 = *(unsigned int *)v2390;
                  int v956 = v955 - 1;
                  unsigned int v957 = (v955 - 1) & ((v556 >> 4) ^ (v556 >> 9));
                  v952 = (uint64_t ***)(v949 + 8 * v957);
                  unsigned int v958 = *v952;
                  if (*v952 == (uint64_t **)-1)
                  {
                    unsigned int v959 = 0;
LABEL_1964:
                    if (v959) {
                      v952 = v959;
                    }
                    if (*v952 != v556) {
                      v952 = (uint64_t ***)(v949 + 8 * v955);
                    }
                  }
                  else
                  {
                    unsigned int v959 = 0;
                    int v960 = 1;
                    while (v958 != v556)
                    {
                      if (v959) {
                        BOOL v961 = 0;
                      }
                      else {
                        BOOL v961 = v958 == (uint64_t **)-2;
                      }
                      if (v961) {
                        unsigned int v959 = v952;
                      }
                      unsigned int v962 = v957 + v960++;
                      unsigned int v957 = v962 & v956;
                      v952 = (uint64_t ***)(v949 + 8 * (v962 & v956));
                      unsigned int v958 = *v952;
                      if (*v952 == (uint64_t **)-1) {
                        goto LABEL_1964;
                      }
                    }
                  }
                }
                BOOL v54 = v949 == v950;
                int v963 = (unsigned int *)(a1 + 3316);
                if (!v54) {
                  int v963 = (unsigned int *)(a1 + 3312);
                }
                if (v952 == (uint64_t ***)(v949 + 8 * *v963))
                {
                  if (v932 < 0xFFFFFFFE
                    || ((uint64_t v982 = (uint64_t)*(v556 - 8), *(_DWORD *)(*(void *)v982 + 8) != 269)
                      ? (BOOL v983 = *(_DWORD *)(*(void *)v982 + 8) == 0)
                      : (BOOL v983 = 1),
                        !v983
                     && ((uint64_t v984 = (uint64_t)*(v556 - 4), *(unsigned __int8 *)(v982 + 16) < 0x15u)
                      || (uint64_t v1001 = *(void *)(v982 + 8)) != 0 && !*(void *)(v1001 + 8))
                     && (*(unsigned __int8 *)(v984 + 16) < 0x15u
                      || (uint64_t v985 = *(void *)(v984 + 8)) != 0 && !*(void *)(v985 + 8))))
                  {
                    unsigned int v965 = (uint64_t *)(v556 + 1);
                    BOOL v964 = v556[1];
                    if (v964)
                    {
                      int v966 = *(_DWORD *)(a2 + 544) - 1;
                      if (v933 == v934) {
                        unsigned int v967 = v935;
                      }
                      else {
                        unsigned int v967 = *(_DWORD *)(a2 + 544);
                      }
                      v968 = (void *)(v933 + 8 * v967);
                      uint64_t v969 = *(void *)(a2 + 536);
                      while (1)
                      {
                        uint64_t v970 = v964[3];
                        if (v969 == v934)
                        {
                          if (v935)
                          {
                            uint64_t v971 = 0;
                            while (*(void *)(v934 + v971) != v970)
                            {
                              v971 += 8;
                              if (8 * v935 == v971)
                              {
                                unsigned int v972 = v935;
                                goto LABEL_1920;
                              }
                            }
                            uint64_t v981 = (void *)(v934 + v971);
                            unsigned int v972 = v935;
                            uint64_t v969 = *(void *)(a2 + 528);
                          }
                          else
                          {
                            unsigned int v972 = 0;
LABEL_1920:
                            uint64_t v969 = *(void *)(a2 + 528);
                            uint64_t v981 = (void *)(v934 + 8 * v935);
                          }
                        }
                        else
                        {
                          unsigned int v973 = v966 & ((v970 >> 4) ^ (v970 >> 9));
                          unint64_t v974 = (void *)(v933 + 8 * v973);
                          uint64_t v975 = *v974;
                          if (*v974 == -1)
                          {
                            unint64_t v976 = 0;
LABEL_1922:
                            if (v976) {
                              unint64_t v974 = v976;
                            }
                            uint64_t v980 = *v974;
                          }
                          else
                          {
                            unint64_t v976 = 0;
                            int v977 = 1;
                            while (v975 != v970)
                            {
                              if (v976) {
                                BOOL v978 = 0;
                              }
                              else {
                                BOOL v978 = v975 == -2;
                              }
                              if (v978) {
                                unint64_t v976 = v974;
                              }
                              unsigned int v979 = v973 + v977++;
                              unsigned int v973 = v979 & v966;
                              unint64_t v974 = (void *)(v933 + 8 * (v979 & v966));
                              uint64_t v975 = *v974;
                              if (*v974 == -1) {
                                goto LABEL_1922;
                              }
                            }
                            uint64_t v980 = v964[3];
                          }
                          uint64_t v981 = v980 == v970 ? v974 : v968;
                          unsigned int v972 = v935;
                          uint64_t v969 = *(void *)(a2 + 536);
                        }
                        if (v969 != v934) {
                          unsigned int v972 = *(_DWORD *)(a2 + 544);
                        }
                        if (v981 != (void *)(v969 + 8 * v972) || *(unsigned char *)(v970 + 16) == 30) {
                          break;
                        }
                        BOOL v964 = (uint64_t *)v964[1];
                        if (!v964) {
                          goto LABEL_1961;
                        }
                      }
                      uint64_t v986 = 0;
                      unsigned char *v2413 = 1;
                      v987 = v555 - 3;
                      if (!v555) {
                        v987 = 0;
                      }
                      uint64_t v988 = **v987;
                      v2426[0] = &v2427;
                      v2426[1] = (void *)0x200000000;
                      uint64_t v2433 = v988;
                      v2434 = &v2442;
                      v2435 = v2443;
                      uint64_t v2436 = 0;
                      int v2437 = 0;
                      __int16 v2438 = 512;
                      char v2439 = 7;
                      v2431 = 0;
                      v2432 = 0;
                      uint64_t v2440 = 0;
                      uint64_t v2441 = 0;
                      v2442 = &unk_1F2616E88;
                      v2443[0] = &unk_1F2617008;
                      v2431 = v987[5];
                      v2432 = v987 + 3;
                      unsigned int v989 = (unsigned __int8 *)v987[6];
                      *(void *)&long long v2467 = v989;
                      if (v989)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v2467, v989, 2);
                        uint64_t v986 = v2467;
                      }
                      sub_1CB8461A4((uint64_t)v2426, 0, v986);
                      if ((void)v2467)
                      {
                        int v1034 = *(unsigned __int8 *)v2467;
                        if ((v1034 - 4) > 0x1E)
                        {
                          if ((v1034 - 3) >= 0xFFFFFFFE) {
                            uint64_t v1071 = v2467;
                          }
                          else {
                            uint64_t v1071 = 0;
                          }
                          if ((v1034 - 3) < 0xFFFFFFFE)
                          {
                            if (v1034 == 3) {
                              *(void *)(v2467 + 8) = 0;
                            }
                            goto LABEL_1949;
                          }
                          unint64_t v1036 = v1071 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2 && !*(_DWORD *)(v2467 + 12)) {
                            goto LABEL_1949;
                          }
                          uint64_t v1035 = *(void *)(v2467 + 16);
                          if ((v1035 & 4) == 0) {
                            goto LABEL_1949;
                          }
                          unint64_t v1036 = v1035 & 0xFFFFFFFFFFFFFFF8;
                          if (!v1036) {
                            goto LABEL_1949;
                          }
                        }
                        v2444 = (uint64_t *)&v2467;
                        sub_1CC5FA668(v1036 + 16, &v2444);
                      }
LABEL_1949:
                      v991 = (llvm::ConstantFP **)(*(void *)**v556 + 1624);
                      v992 = llvm::ConstantFP::get(v991, v990, 0.0);
                      int v994 = llvm::ConstantFP::get(v991, v993, 1.0);
                      v2448[0] = 257;
                      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v2426, (llvm::Value *)v556, v992, v994, (const llvm::Twine *)&v2444, 0);
                      v2448[0] = 257;
                      FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v2426, 1, (uint64_t)Select, (uint64_t)v992, (uint64_t)&v2444, 0, 0);
                      llvm::Instruction::copyIRFlags((uint64_t)FCmpHelper, (uint64_t)v556, 1);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v556, FCmpHelper, (llvm::Value *)1);
                      int v997 = *((_DWORD *)Select + 5);
                      if ((v997 & 0x40000000) != 0) {
                        v998 = (char *)*((void *)Select - 1);
                      }
                      else {
                        v998 = (char *)Select - 32 * (v997 & 0x7FFFFFF);
                      }
                      int v553 = v596;
                      if (*(void *)v998)
                      {
                        **((void **)v998 + 2) = *((void *)v998 + 1);
                        uint64_t v999 = *((void *)v998 + 1);
                        if (v999) {
                          *(void *)(v999 + 16) = *((void *)v998 + 2);
                        }
                      }
                      *(void *)v998 = v556;
                      if (v554)
                      {
                        uint64_t v1000 = *v965;
                        *((void *)v998 + 1) = *v965;
                        if (v1000) {
                          *(void *)(v1000 + 16) = v998 + 8;
                        }
                        *((void *)v998 + 2) = v965;
                        *unsigned int v965 = (uint64_t)v998;
                      }
                      if (v2426[0] != &v2427) {
                        free(v2426[0]);
                      }
                      unsigned int v555 = (void **)**v555;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_1961:
        char v554 = v555;
        if (v555 == v553) {
          break;
        }
        continue;
      }
    }
    if ((v2459 & 1) == 0) {
      MEMORY[0x1D25D9CD0](*((void *)&v2459 + 1), 8);
    }
    uint64_t v550 = v2386;
    if (v2386 != v2383) {
      continue;
    }
    break;
  }
  int v1073 = *(llvm::SmallPtrSetImplBase **)(a1 + 4576);
  BOOL v1074 = *(llvm::SmallPtrSetImplBase **)(a1 + 4568);
  v2444 = (uint64_t *)v2448;
  uint64_t v2445 = (uint64_t)v2448;
  uint64_t v2446 = 16;
  int v2447 = 0;
  if (v1073 == v1074) {
    goto LABEL_2815;
  }
  while (2)
  {
    uint64_t v1076 = *((void *)v1073 - 1);
    int v1073 = (llvm::SmallPtrSetImplBase *)((char *)v1073 - 8);
    uint64_t v1075 = v1076;
    unint64_t v1077 = *(uint64_t **)(a1 + 4608);
    int v1078 = *((_DWORD *)v1077 + 4);
    if (v1078)
    {
      uint64_t v1079 = *v1077;
      unsigned int v1080 = v1078 - 1;
      uint64_t v1081 = ((v1075 >> 4) ^ (v1075 >> 9)) & (v1078 - 1);
      uint64_t v1082 = *(void *)(v1079 + 16 * v1081);
      if (v1075 != v1082)
      {
        int v1083 = 1;
        while (v1082 != -4096)
        {
          int v1084 = v1081 + v1083++;
          uint64_t v1081 = v1084 & v1080;
          uint64_t v1082 = *(void *)(v1079 + 16 * v1081);
          if (v1075 == v1082) {
            goto LABEL_2205;
          }
        }
        goto LABEL_2206;
      }
LABEL_2205:
      uint64_t v1085 = *(void *)(v1079 + 16 * v1081 + 8);
    }
    else
    {
LABEL_2206:
      uint64_t v1085 = 0;
    }
    uint64_t v1086 = v1075 + 40;
    uint64_t v1087 = *(void *)(v1075 + 48);
    while (2)
    {
      if (v1087 != v1086)
      {
        uint64_t v1088 = v1087 ? v1087 - 24 : 0;
        uint64_t v2419 = v1088;
        int v1089 = *(unsigned __int8 *)(v1088 + 16);
        if ((v1089 - 29) >= 0xB)
        {
          uint64_t v1090 = *(void *)(a2 + 536);
          uint64_t v1091 = *(void *)(a2 + 528);
          if (v1090 == v1091)
          {
            uint64_t v1092 = *(unsigned int *)(a2 + 548);
            uint64_t v1093 = (void *)(v1090 + 8 * v1092);
            if (v1092)
            {
              uint64_t v1094 = 0;
              while (*(void *)(v1090 + v1094) != v1088)
              {
                v1094 += 8;
                if (8 * v1092 == v1094) {
                  goto LABEL_2232;
                }
              }
              uint64_t v1093 = (void *)(v1090 + v1094);
            }
LABEL_2232:
            uint64_t v1091 = *(void *)(a2 + 536);
          }
          else
          {
            uint64_t v1095 = *(unsigned int *)(a2 + 544);
            int v1096 = v1095 - 1;
            unsigned int v1097 = (v1095 - 1) & ((v1088 >> 4) ^ (v1088 >> 9));
            uint64_t v1093 = (void *)(v1090 + 8 * v1097);
            uint64_t v1098 = *v1093;
            if (*v1093 == -1)
            {
              v1099 = 0;
LABEL_2251:
              if (v1099) {
                uint64_t v1093 = v1099;
              }
              LODWORD(v1092) = *(_DWORD *)(a2 + 548);
              v1109 = (void *)(v1090 + 8 * v1095);
              if (*v1093 != v1088) {
                uint64_t v1093 = v1109;
              }
            }
            else
            {
              v1099 = 0;
              int v1100 = 1;
              while (v1098 != v1088)
              {
                if (v1099) {
                  BOOL v1101 = 0;
                }
                else {
                  BOOL v1101 = v1098 == -2;
                }
                if (v1101) {
                  v1099 = v1093;
                }
                unsigned int v1102 = v1097 + v1100++;
                unsigned int v1097 = v1102 & v1096;
                uint64_t v1093 = (void *)(v1090 + 8 * (v1102 & v1096));
                uint64_t v1098 = *v1093;
                if (*v1093 == -1) {
                  goto LABEL_2251;
                }
              }
              LODWORD(v1092) = *(_DWORD *)(a2 + 548);
            }
          }
          if (v1090 == v1091) {
            unsigned int v1103 = v1092;
          }
          else {
            unsigned int v1103 = *(_DWORD *)(a2 + 544);
          }
          if (v1093 == (void *)(v1090 + 8 * v1103)) {
            goto LABEL_2375;
          }
          if (v1089 != 84) {
            goto LABEL_2314;
          }
          if (!v2413[5]) {
            goto LABEL_2314;
          }
          uint64_t v1104 = *(void *)(v1088 - 32);
          if (!v1104) {
            goto LABEL_2314;
          }
          if (*(unsigned char *)(v1104 + 16)) {
            goto LABEL_2314;
          }
          if (*(void *)(v1104 + 24) != *(void *)(v1088 + 72)) {
            goto LABEL_2314;
          }
          if ((*(unsigned char *)(v1104 + 33) & 0x20) == 0) {
            goto LABEL_2314;
          }
          int v1105 = *(_DWORD *)(v1104 + 36);
          if (!sub_1CB859A14(v1105) && (v1105 - 1682) > 0x8B) {
            goto LABEL_2314;
          }
          llvm::SampleInfo::SampleInfo((uint64_t)v2426, v1105, 1);
          int v1106 = *(_DWORD *)(v1088 + 20);
          uint64_t v1107 = *(void *)(v1088 - 32 * (v1106 & 0x7FFFFFF) + 32 * v2430);
          int v1108 = *(unsigned __int8 *)(v1107 + 16);
          if (v1107 && v1108 == 5)
          {
            if (*(_WORD *)(v1107 + 18) == 48
              && !llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v1107
                                                                    - 32 * (*(_DWORD *)(v1107 + 20) & 0x7FFFFFF))))
            {
              int v1106 = *(_DWORD *)(v1088 + 20);
              goto LABEL_2257;
            }
LABEL_2314:
            if (!v1085)
            {
              uint64_t v1088 = v2419;
              if (v2419)
              {
                if (*(unsigned char *)(v2419 + 16) == 60)
                {
                  v1143 = *(unsigned char **)(v2419 - 32);
                  unsigned int v1144 = *(_DWORD *)(*(void *)v1143 + 8);
                  if ((v1144 & 0xFE) == 0x12) {
                    unsigned int v1144 = *(_DWORD *)(**(void **)(*(void *)v1143 + 16) + 8);
                  }
                  if ((v1144 >> 8) - 3 >= 0xFFFFFFFE && sub_1CC85F0FC(*(llvm::BasicBlock **)(v2419 + 40)))
                  {
                    uint64_t v1145 = *(void *)(a2 + 536);
                    uint64_t v1146 = *(void *)(a2 + 528);
                    uint64_t v1147 = v1146;
                    if (v1143[16] != 62) {
                      goto LABEL_2351;
                    }
                    if (v1145 == v1146)
                    {
                      uint64_t v1148 = *(unsigned int *)(a2 + 548);
                      v1149 = (void *)(v1145 + 8 * v1148);
                      if (v1148)
                      {
                        uint64_t v1150 = 0;
                        while (*(unsigned char **)(v1145 + v1150) != v1143)
                        {
                          v1150 += 8;
                          if (8 * v1148 == v1150) {
                            goto LABEL_2341;
                          }
                        }
                        v1149 = (void *)(v1145 + v1150);
                      }
LABEL_2341:
                      uint64_t v1147 = *(void *)(a2 + 536);
                    }
                    else
                    {
                      uint64_t v1151 = *(unsigned int *)(a2 + 544);
                      int v1152 = v1151 - 1;
                      unsigned int v1153 = (v1151 - 1) & ((v1143 >> 4) ^ (v1143 >> 9));
                      v1149 = (void *)(v1145 + 8 * v1153);
                      uint64_t v1154 = (unsigned char *)*v1149;
                      if (*v1149 == -1)
                      {
                        v1155 = 0;
LABEL_2343:
                        if (v1155) {
                          v1149 = v1155;
                        }
                        LODWORD(v1148) = *(_DWORD *)(a2 + 548);
                        v1159 = (void *)(v1145 + 8 * v1151);
                        if ((unsigned char *)*v1149 != v1143) {
                          v1149 = v1159;
                        }
                      }
                      else
                      {
                        v1155 = 0;
                        int v1156 = 1;
                        while (v1154 != v1143)
                        {
                          if (v1155) {
                            BOOL v1157 = 0;
                          }
                          else {
                            BOOL v1157 = v1154 == (unsigned char *)-2;
                          }
                          if (v1157) {
                            v1155 = v1149;
                          }
                          unsigned int v1158 = v1153 + v1156++;
                          unsigned int v1153 = v1158 & v1152;
                          v1149 = (void *)(v1145 + 8 * (v1158 & v1152));
                          uint64_t v1154 = (unsigned char *)*v1149;
                          if (*v1149 == -1) {
                            goto LABEL_2343;
                          }
                        }
                        LODWORD(v1148) = *(_DWORD *)(a2 + 548);
                      }
                      uint64_t v1147 = *(void *)(a2 + 528);
                    }
                    if (v1145 != v1147) {
                      LODWORD(v1148) = *(_DWORD *)(a2 + 544);
                    }
                    if (v1149 == (void *)(v1145 + 8 * v1148))
                    {
LABEL_2351:
                      if (v1145 == v1147)
                      {
                        uint64_t v1160 = *(unsigned int *)(a2 + 548);
                        uint64_t v1161 = (void *)(v1145 + 8 * v1160);
                        if (v1160)
                        {
                          uint64_t v1162 = 0;
                          while (*(unsigned char **)(v1145 + v1162) != v1143)
                          {
                            v1162 += 8;
                            if (8 * v1160 == v1162) {
                              goto LABEL_2370;
                            }
                          }
                          uint64_t v1161 = (void *)(v1145 + v1162);
                        }
LABEL_2370:
                        uint64_t v1146 = *(void *)(a2 + 536);
                      }
                      else
                      {
                        unsigned int v1163 = *(_DWORD *)(a2 + 544);
                        unsigned int v1164 = v1163 - 1;
                        unsigned int v1165 = (v1163 - 1) & ((v1143 >> 4) ^ (v1143 >> 9));
                        uint64_t v1161 = (void *)(v1145 + 8 * v1165);
                        uint64_t v1166 = (unsigned char *)*v1161;
                        if (*v1161 == -1)
                        {
                          v1167 = 0;
LABEL_2424:
                          if (v1167) {
                            uint64_t v1161 = v1167;
                          }
                          LODWORD(v1160) = *(_DWORD *)(a2 + 548);
                          if (v1145 == v1146) {
                            unsigned int v1163 = *(_DWORD *)(a2 + 548);
                          }
                          int v1199 = (void *)(v1145 + 8 * v1163);
                          if ((unsigned char *)*v1161 != v1143) {
                            uint64_t v1161 = v1199;
                          }
                        }
                        else
                        {
                          v1167 = 0;
                          int v1168 = 1;
                          while (v1166 != v1143)
                          {
                            if (v1167) {
                              BOOL v1169 = 0;
                            }
                            else {
                              BOOL v1169 = v1166 == (unsigned char *)-2;
                            }
                            if (v1169) {
                              v1167 = v1161;
                            }
                            unsigned int v1170 = v1165 + v1168++;
                            unsigned int v1165 = v1170 & v1164;
                            uint64_t v1161 = (void *)(v1145 + 8 * (v1170 & v1164));
                            uint64_t v1166 = (unsigned char *)*v1161;
                            if (*v1161 == -1) {
                              goto LABEL_2424;
                            }
                          }
                          LODWORD(v1160) = *(_DWORD *)(a2 + 548);
                        }
                      }
                      unsigned int v1171 = v1145 == v1146 ? v1160 : *(_DWORD *)(a2 + 544);
                      if (v1161 == (void *)(v1145 + 8 * v1171))
                      {
LABEL_2375:
                        if (sub_1CC8720F8(a1, v1088, (uint64_t)v2412, (llvm::SmallPtrSetImplBase *)&v2444))
                        {
                          uint64_t v1172 = *(void *)(a1 + 3304);
                          uint64_t v1173 = *(void *)(a1 + 3296);
                          if (v1172 == v1173)
                          {
                            uint64_t v1174 = *(unsigned int *)v2394;
                            v1175 = (void *)(v1172 + 8 * v1174);
                            if (v1174)
                            {
                              uint64_t v1176 = 0;
                              uint64_t v1177 = 8 * v1174;
                              while (*(void *)(v1172 + v1176) != v2419)
                              {
                                v1176 += 8;
                                if (v1177 == v1176) {
                                  goto LABEL_2394;
                                }
                              }
                              v1175 = (void *)(v1172 + v1176);
                            }
LABEL_2394:
                            uint64_t v1173 = *(void *)(a1 + 3304);
                          }
                          else
                          {
                            uint64_t v1178 = *(unsigned int *)v2390;
                            int v1179 = v1178 - 1;
                            unsigned int v1180 = (v1178 - 1) & ((v2419 >> 4) ^ (v2419 >> 9));
                            v1175 = (void *)(v1172 + 8 * v1180);
                            uint64_t v1181 = *v1175;
                            if (*v1175 == -1)
                            {
                              v1182 = 0;
LABEL_2418:
                              if (v1182) {
                                v1175 = v1182;
                              }
                              if (*v1175 != v2419) {
                                v1175 = (void *)(v1172 + 8 * v1178);
                              }
                            }
                            else
                            {
                              v1182 = 0;
                              int v1183 = 1;
                              while (v1181 != v2419)
                              {
                                if (v1182) {
                                  BOOL v1184 = 0;
                                }
                                else {
                                  BOOL v1184 = v1181 == -2;
                                }
                                if (v1184) {
                                  v1182 = v1175;
                                }
                                unsigned int v1185 = v1180 + v1183++;
                                unsigned int v1180 = v1185 & v1179;
                                v1175 = (void *)(v1172 + 8 * (v1185 & v1179));
                                uint64_t v1181 = *v1175;
                                if (*v1175 == -1) {
                                  goto LABEL_2418;
                                }
                              }
                            }
                          }
                          BOOL v54 = v1172 == v1173;
                          v1186 = (unsigned int *)(a1 + 3316);
                          if (!v54) {
                            v1186 = (unsigned int *)(a1 + 3312);
                          }
                          if (v1175 == (void *)(v1172 + 8 * *v1186))
                          {
                            if (v2449)
                            {
                              int v1187 = 32;
                              uint64_t v1188 = &v2450;
LABEL_2401:
                              int v1189 = v1187 - 1;
                              unsigned int v1190 = v1189 & ((v2419 >> 4) ^ (v2419 >> 9));
                              int v1191 = &v1188[v1190];
                              uint64_t v1192 = *v1191;
                              if (v2419 != *v1191)
                              {
                                int v1193 = 0;
                                int v1194 = 1;
                                while (v1192 != -4096)
                                {
                                  if (v1193) {
                                    BOOL v1195 = 0;
                                  }
                                  else {
                                    BOOL v1195 = v1192 == -8192;
                                  }
                                  if (v1195) {
                                    int v1193 = v1191;
                                  }
                                  unsigned int v1196 = v1190 + v1194++;
                                  unsigned int v1190 = v1196 & v1189;
                                  int v1191 = &v1188[v1190];
                                  uint64_t v1192 = *v1191;
                                  if (v2419 == *v1191) {
                                    goto LABEL_2416;
                                  }
                                }
                                if (v1193) {
                                  uint64_t v1197 = v1193;
                                }
                                else {
                                  uint64_t v1197 = v1191;
                                }
                                goto LABEL_2414;
                              }
                            }
                            else
                            {
                              int v1187 = v2451;
                              if (v2451)
                              {
                                uint64_t v1188 = v2450;
                                goto LABEL_2401;
                              }
                              uint64_t v1197 = 0;
LABEL_2414:
                              uint64_t v1198 = sub_1CC872F3C((uint64_t)&v2449, (uint64_t)&v2419, &v2419, v1197);
                              *uint64_t v1198 = v2419;
                              if (v2453 >= (unint64_t)HIDWORD(v2453)) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              *(void *)&v2452[8 * v2453] = v2419;
                              LODWORD(v2453) = v2453 + 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_2416:
            uint64_t v1087 = *(void *)(v1087 + 8);
            continue;
          }
          if (v1108 != 76) {
            goto LABEL_2314;
          }
LABEL_2257:
          v2387 = v1074;
          if ((v1106 & 0x40000000) != 0)
          {
            uint64_t v1110 = *(void *)(v1088 - 8);
            if (!v1110)
            {
LABEL_2313:
              BOOL v1074 = v2387;
              goto LABEL_2314;
            }
          }
          else
          {
            uint64_t v1110 = v1088 - 32 * (v1106 & 0x7FFFFFF);
            if (!v1110) {
              goto LABEL_2313;
            }
          }
          int v1111 = (uint64_t *)(v1110 + 32 * v2430);
          uint64_t v1112 = *v1111;
          uint64_t v1113 = *(void *)(a2 + 536);
          uint64_t v1114 = *(void *)(a2 + 528);
          if (v1113 == v1114)
          {
            uint64_t v1115 = *(unsigned int *)(a2 + 548);
            uint64_t v1116 = (void *)(v1113 + 8 * v1115);
            if (v1115)
            {
              uint64_t v1117 = 0;
              while (*(void *)(v1113 + v1117) != v1112)
              {
                v1117 += 8;
                if (8 * v1115 == v1117) {
                  goto LABEL_2280;
                }
              }
              uint64_t v1116 = (void *)(v1113 + v1117);
            }
LABEL_2280:
            uint64_t v1114 = *(void *)(a2 + 536);
          }
          else
          {
            uint64_t v1118 = *(unsigned int *)(a2 + 544);
            int v1119 = v1118 - 1;
            unsigned int v1120 = (v1118 - 1) & ((v1112 >> 4) ^ (v1112 >> 9));
            uint64_t v1116 = (void *)(v1113 + 8 * v1120);
            uint64_t v1121 = *v1116;
            if (*v1116 == -1)
            {
              BOOL v1122 = 0;
LABEL_2303:
              if (v1122) {
                uint64_t v1116 = v1122;
              }
              LODWORD(v1115) = *(_DWORD *)(a2 + 548);
              uint64_t v1141 = (void *)(v1113 + 8 * v1118);
              if (*v1116 != v1112) {
                uint64_t v1116 = v1141;
              }
            }
            else
            {
              BOOL v1122 = 0;
              int v1123 = 1;
              while (v1121 != v1112)
              {
                if (v1122) {
                  BOOL v1124 = 0;
                }
                else {
                  BOOL v1124 = v1121 == -2;
                }
                if (v1124) {
                  BOOL v1122 = v1116;
                }
                unsigned int v1125 = v1120 + v1123++;
                unsigned int v1120 = v1125 & v1119;
                uint64_t v1116 = (void *)(v1113 + 8 * (v1125 & v1119));
                uint64_t v1121 = *v1116;
                if (*v1116 == -1) {
                  goto LABEL_2303;
                }
              }
              LODWORD(v1115) = *(_DWORD *)(a2 + 548);
            }
          }
          if (v1113 == v1114) {
            unsigned int v1126 = v1115;
          }
          else {
            unsigned int v1126 = *(_DWORD *)(a2 + 544);
          }
          if (v1116 != (void *)(v1113 + 8 * v1126)) {
            goto LABEL_2313;
          }
          uint64_t v1127 = *(void *)(a1 + 3464);
          uint64_t v1128 = *(void *)(a1 + 3456);
          if (v1127 == v1128)
          {
            uint64_t v1129 = *(unsigned int *)v2408;
            uint64_t v1130 = (void *)(v1127 + 8 * v1129);
            if (v1129)
            {
              uint64_t v1131 = 0;
              uint64_t v1132 = 8 * v1129;
              while (*(void *)(v1127 + v1131) != v1112)
              {
                v1131 += 8;
                if (v1132 == v1131) {
                  goto LABEL_2309;
                }
              }
              uint64_t v1130 = (void *)(v1127 + v1131);
            }
LABEL_2309:
            uint64_t v1128 = *(void *)(a1 + 3464);
          }
          else
          {
            uint64_t v1133 = *(unsigned int *)v2403;
            int v1134 = v1133 - 1;
            unsigned int v1135 = (v1133 - 1) & ((v1112 >> 4) ^ (v1112 >> 9));
            uint64_t v1130 = (void *)(v1127 + 8 * v1135);
            uint64_t v1136 = *v1130;
            if (*v1130 == -1)
            {
              __int16 v1137 = 0;
LABEL_2457:
              if (v1137) {
                uint64_t v1130 = v1137;
              }
              if (*v1130 != v1112) {
                uint64_t v1130 = (void *)(v1127 + 8 * v1133);
              }
            }
            else
            {
              __int16 v1137 = 0;
              int v1138 = 1;
              while (v1136 != v1112)
              {
                if (v1137) {
                  BOOL v1139 = 0;
                }
                else {
                  BOOL v1139 = v1136 == -2;
                }
                if (v1139) {
                  __int16 v1137 = v1130;
                }
                unsigned int v1140 = v1135 + v1138++;
                unsigned int v1135 = v1140 & v1134;
                uint64_t v1130 = (void *)(v1127 + 8 * (v1140 & v1134));
                uint64_t v1136 = *v1130;
                if (*v1130 == -1) {
                  goto LABEL_2457;
                }
              }
            }
          }
          BOOL v54 = v1127 == v1128;
          v1142 = (unsigned int *)(a1 + 3476);
          if (!v54) {
            v1142 = (unsigned int *)(a1 + 3472);
          }
          if (v1130 != (void *)(v1127 + 8 * *v1142)) {
            goto LABEL_2313;
          }
          uint64_t v1200 = (uint64_t **)(v1110 + 32 * v2429);
          v2357 = (uint64_t *)(v1110 + 32 * v2430);
          v2358 = v1200;
          if (!v2413[4])
          {
LABEL_2433:
            uint64_t v1201 = *v1200;
            uint64_t v1202 = **v1200;
            if (v1202) {
              BOOL v1203 = *(unsigned char *)(v1202 + 8) == 15;
            }
            else {
              BOOL v1203 = 0;
            }
            if (!v1203 || *(void *)(v1202 + 24))
            {
              int v1204 = *((_DWORD *)v1201 + 5);
              if ((v1204 & 0x40000000) != 0) {
                int v1205 = (llvm::Function ***)*(v1201 - 1);
              }
              else {
                int v1205 = (llvm::Function ***)&v1201[-4 * (v1204 & 0x7FFFFFF)];
              }
              uint64_t v1206 = *v1111;
              int v1207 = *(_DWORD *)(*v1111 + 20);
              v2360 = (llvm::Value *)*v1111;
              if ((v1207 & 0x40000000) != 0) {
                unsigned int v1208 = *(size_t ***)(v1206 - 8);
              }
              else {
                unsigned int v1208 = (size_t **)(v1206 - 32 * (v1207 & 0x7FFFFFF));
              }
              uint64_t v1209 = 0;
              v2327 = **v1205;
              size_t v2336 = **v1208;
              uint64_t v1210 = **(void **)v1088;
              v2426[0] = &v2427;
              v2426[1] = (void *)0x200000000;
              uint64_t v2433 = v1210;
              v2434 = &v2442;
              v2435 = v2443;
              uint64_t v2436 = 0;
              int v2437 = 0;
              __int16 v2438 = 512;
              char v2439 = 7;
              v2431 = 0;
              v2432 = 0;
              uint64_t v2440 = 0;
              uint64_t v2441 = 0;
              v2442 = &unk_1F2616E88;
              v2443[0] = &unk_1F2617008;
              v2431 = *(uint64_t **)(v1088 + 40);
              v2432 = (void **)(v1088 + 24);
              int v1211 = *(unsigned __int8 **)(v1088 + 48);
              *(void *)&long long v2467 = v1211;
              if (v1211)
              {
                llvm::MetadataTracking::track((uint64_t)&v2467, v1211, 2);
                uint64_t v1209 = v2467;
              }
              sub_1CB8461A4((uint64_t)v2426, 0, v1209);
              uint64_t v1212 = (llvm::Instruction *)v1201;
              if ((void)v2467)
              {
                int v1271 = *(unsigned __int8 *)v2467;
                if ((v1271 - 4) > 0x1E)
                {
                  if ((v1271 - 3) >= 0xFFFFFFFE) {
                    uint64_t v1312 = v2467;
                  }
                  else {
                    uint64_t v1312 = 0;
                  }
                  if ((v1271 - 3) < 0xFFFFFFFE)
                  {
                    if (v1271 == 3) {
                      *(void *)(v2467 + 8) = 0;
                    }
                    goto LABEL_2448;
                  }
                  unint64_t v1273 = v1312 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2 && !*(_DWORD *)(v2467 + 12)) {
                    goto LABEL_2448;
                  }
                  uint64_t v1272 = *(void *)(v2467 + 16);
                  if ((v1272 & 4) == 0) {
                    goto LABEL_2448;
                  }
                  unint64_t v1273 = v1272 & 0xFFFFFFFFFFFFFFF8;
                  if (!v1273) {
                    goto LABEL_2448;
                  }
                }
                *(void *)&long long v2459 = &v2467;
                sub_1CC5FA668(v1273 + 16, &v2459);
              }
LABEL_2448:
              LOWORD(v2469) = 257;
              if ((llvm::Function *)*v1201 != v2327)
              {
                if (*((unsigned __int8 *)v1201 + 16) > 0x14u)
                {
                  LOWORD(v2461[0]) = 257;
                  uint64_t v1212 = llvm::CastInst::Create(49, (uint64_t)v1201, (uint64_t)v2327, (const char **)&v2459, 0);
                  (*(void (**)(void *, llvm::Instruction *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1212, &v2467, v2431, v2432);
                  if (LODWORD(v2426[1]))
                  {
                    uint64_t v1213 = (llvm::MDNode **)v2426[0];
                    v2349 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                    do
                    {
                      llvm::Instruction::setMetadata(v1212, *(_DWORD *)v1213, v1213[1]);
                      v1213 += 2;
                    }
                    while (v1213 != v2349);
                  }
                  goto LABEL_2455;
                }
                uint64_t v1214 = (*((uint64_t (**)(void **, uint64_t, uint64_t *, llvm::Function *))*v2434 + 28))(v2434, 49, v1201, v2327);
                uint64_t v1212 = (llvm::Instruction *)v1214;
                if (!v1214) {
                  goto LABEL_2455;
                }
                uint64_t v1215 = (uint64_t)v2360;
                uint64_t v1216 = v2336;
                if (*(unsigned __int8 *)(v1214 + 16) < 0x1Cu)
                {
LABEL_2464:
                  LOWORD(v2469) = 257;
                  if (*(void *)v1215 != v1216)
                  {
                    if (*(unsigned __int8 *)(v1215 + 16) <= 0x14u)
                    {
                      uint64_t v1221 = (*((uint64_t (**)(void **, uint64_t))*v2434 + 28))(v2434, 47);
                      v2360 = (llvm::Value *)v1221;
                      if (v1221) {
                        BOOL v1222 = *(unsigned __int8 *)(v1221 + 16) >= 0x1Cu;
                      }
                      else {
                        BOOL v1222 = 0;
                      }
                      if (v1222)
                      {
                        (*(void (**)(void *, uint64_t, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1221, &v2467, v2431, v2432);
                        if (LODWORD(v2426[1]))
                        {
                          v1393 = (llvm::MDNode **)v2426[0];
                          v2346 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                          do
                          {
                            llvm::Instruction::setMetadata(v2360, *(_DWORD *)v1393, v1393[1]);
                            v1393 += 2;
                          }
                          while (v1393 != v2346);
                        }
                      }
                    }
                    else
                    {
                      LOWORD(v2461[0]) = 257;
                      v2360 = llvm::CastInst::Create(47, v1215, v1216, (const char **)&v2459, 0);
                      (*(void (**)(void *))(*v2435 + 16))(v2435);
                      if (LODWORD(v2426[1]))
                      {
                        int v1220 = (llvm::MDNode **)v2426[0];
                        v2337 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                        do
                        {
                          llvm::Instruction::setMetadata(v2360, *(_DWORD *)v1220, v1220[1]);
                          v1220 += 2;
                        }
                        while (v1220 != v2337);
                      }
                    }
                  }
                  v1223 = **(llvm::Type ***)(*(void *)v1212 + 16);
                  size_t v2338 = (size_t)v1223;
                  uint64_t v2350 = (uint64_t)v1212;
                  LOWORD(v2469) = 257;
                  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v2431[7] + 40) + 272), v1223, 1);
                  int v1224 = (char *)operator new(0x60uLL);
                  *((_DWORD *)v1224 + 13) = *((_DWORD *)v1224 + 13) & 0x38000000 | 1;
                  BOOL v1225 = (unsigned __int8 *)(v1224 + 32);
                  *(void *)int v1224 = 0;
                  *((void *)v1224 + 1) = 0;
                  *((void *)v1224 + 2) = 0;
                  *((void *)v1224 + 3) = v1224 + 32;
                  LOWORD(v2461[0]) = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v1224 + 32), v2338, v2350, (const char **)&v2459, 0, Alignment, 0);
                  (*(void (**)(void *, char *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1224 + 32, &v2467, v2431, v2432);
                  if (LODWORD(v2426[1]))
                  {
                    __int16 v1265 = (llvm::MDNode **)v2426[0];
                    v2343 = (char *)v2426[0] + 16 * LODWORD(v2426[1]);
                    do
                    {
                      v2353 = v1265;
                      llvm::Instruction::setMetadata((llvm::Instruction *)v1225, *(_DWORD *)v1265, v1265[1]);
                      __int16 v1265 = v2353 + 2;
                    }
                    while (v2353 + 2 != (llvm::MDNode **)v2343);
                  }
                  uint64_t v2351 = *(void *)v1225;
                  unint64_t v1226 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v2433 + 1912), (llvm::Type *)(*(_DWORD *)(*(void *)v1225 + 8) >> 8));
                  LOWORD(v2469) = 257;
                  if (*(void *)v1225 == v1226)
                  {
LABEL_2485:
                    uint64_t v1229 = (const char *)v2360;
                  }
                  else
                  {
                    if (v1224[48] > 0x14u)
                    {
                      LOWORD(v2461[0]) = 257;
                      BOOL v1225 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1225, v1226, (const char **)&v2459, 0);
                      (*(void (**)(void *, unsigned __int8 *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1225, &v2467, v2431, v2432);
                      if (LODWORD(v2426[1]))
                      {
                        uint64_t v1227 = (llvm::MDNode **)v2426[0];
                        v2339 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v1225, *(_DWORD *)v1227, v1227[1]);
                          v1227 += 2;
                        }
                        while (v1227 != v2339);
                      }
                      goto LABEL_2485;
                    }
                    BOOL v1225 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v2434
                                                + 28))(v2434, 49, v1225, v1226);
                    if (v1225) {
                      BOOL v1228 = v1225[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v1228 = 0;
                    }
                    if (!v1228) {
                      goto LABEL_2485;
                    }
                    v1394 = (llvm::Instruction *)v1225;
                    (*(void (**)(void *, unsigned __int8 *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1225, &v2467, v2431, v2432);
                    if (LODWORD(v2426[1]))
                    {
                      uint64_t v1397 = (llvm::MDNode **)v2426[0];
                      v2348 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                      do
                      {
                        llvm::Instruction::setMetadata(v1394, *(_DWORD *)v1397, v1397[1]);
                        v1397 += 2;
                      }
                      while (v1397 != v2348);
                    }
                    uint64_t v1229 = (const char *)v2360;
                    BOOL v1225 = (unsigned __int8 *)v1394;
                  }
                  uint64_t v1230 = *(void *)v1225;
                  if ((*(_DWORD *)(*(void *)v1225 + 8) & 0xFE) == 0x12) {
                    uint64_t v1230 = **(void **)(v1230 + 16);
                  }
                  uint64_t v1231 = **(void **)(v1230 + 16);
                  LOWORD(v2461[0]) = 257;
                  uint64_t v1232 = sub_1CC278130((uint64_t *)v2426, v1231, (uint64_t *)v1225, v1229, (uint64_t)&v2459);
                  unsigned int v1233 = (unsigned __int8 *)v1232;
                  LOWORD(v2469) = 257;
                  if (*(void *)v1232 != v2351)
                  {
                    if (*((unsigned __int8 *)v1232 + 16) <= 0x14u)
                    {
                      unsigned int v1233 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v2434
                                                  + 28))(v2434, 49, v1232, v2351);
                      if (v1233) {
                        BOOL v1235 = v1233[16] >= 0x1Cu;
                      }
                      else {
                        BOOL v1235 = 0;
                      }
                      if (v1235)
                      {
                        (*(void (**)(void *, unsigned __int8 *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1233, &v2467, v2431, v2432);
                        if (LODWORD(v2426[1]))
                        {
                          char v1236 = (llvm::Instruction *)v2426[0];
                          v2363 = (llvm::Instruction *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                          do
                          {
                            llvm::Instruction::setMetadata((llvm::Instruction *)v1233, *(_DWORD *)v1236, *((llvm::MDNode **)v1236 + 1));
                            char v1236 = (llvm::Instruction *)((char *)v1236 + 16);
                          }
                          while (v1236 != v2363);
                        }
                      }
                    }
                    else
                    {
                      LOWORD(v2461[0]) = 257;
                      unsigned int v1233 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v1232, v2351, (const char **)&v2459, 0);
                      (*(void (**)(void *, unsigned __int8 *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1233, &v2467, v2431, v2432);
                      if (LODWORD(v2426[1]))
                      {
                        int v1234 = (llvm::Instruction *)v2426[0];
                        v2362 = (llvm::Instruction *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v1233, *(_DWORD *)v1234, *((llvm::MDNode **)v1234 + 1));
                          int v1234 = (llvm::Instruction *)((char *)v1234 + 16);
                        }
                        while (v1234 != v2362);
                      }
                    }
                  }
LABEL_2517:
                  if (v2426[0] != &v2427) {
                    free(v2426[0]);
                  }
                  unsigned char *v2413 = 1;
                  *(void *)&long long v2459 = v2358;
                  *((void *)&v2459 + 1) = v2357;
                  *(void *)&long long v2460 = v1233;
                  *(_OWORD *)v2426 = v2459;
                  uint64_t v2427 = (uint64_t)v1233;
                  v2420 = 0;
                  if ((sub_1CBF98030(*(void *)(a1 + 2144), *(_DWORD *)(a1 + 2160), v1088, &v2420) & 1) == 0)
                  {
                    uint64_t v1247 = v2420;
                    v2470 = v2420;
                    int v1248 = *(_DWORD *)(a1 + 2152);
                    uint64_t v1249 = *(unsigned int *)(a1 + 2160);
                    if (4 * v1248 + 4 >= (3 * v1249))
                    {
                      int v1250 = 2 * v1249;
                    }
                    else
                    {
                      int v1250 = *(_DWORD *)(a1 + 2160);
                      if ((int)v1249 + ~v1248 - *(_DWORD *)(a1 + 2156) > v1249 >> 3) {
                        goto LABEL_2522;
                      }
                    }
                    uint64_t v1376 = *(void *)(a1 + 2144);
                    unint64_t v1377 = (v1250 - 1) | ((unint64_t)(v1250 - 1) >> 1);
                    unint64_t v1378 = v1377 | (v1377 >> 2) | ((v1377 | (v1377 >> 2)) >> 4);
                    int v1379 = ((v1378 | (v1378 >> 8)) >> 16) | v1378 | (v1378 >> 8);
                    if ((v1379 + 1) > 0x40) {
                      unsigned int v1380 = v1379 + 1;
                    }
                    else {
                      unsigned int v1380 = 64;
                    }
                    *(_DWORD *)(a1 + 2160) = v1380;
                    v1381 = operator new(32 * v1380, (std::align_val_t)8uLL);
                    *(void *)(a1 + 2144) = v1381;
                    uint64_t v2359 = v1376;
                    __n128 v1382 = 0uLL;
                    if (v1376)
                    {
                      *(void *)(a1 + 2152) = 0;
                      uint64_t v1383 = *(unsigned int *)(a1 + 2160);
                      if (v1383)
                      {
                        uint64_t v1384 = 32 * v1383;
                        do
                        {
                          void *v1381 = -4096;
                          v1381 += 4;
                          v1384 -= 32;
                        }
                        while (v1384);
                      }
                      if (v1249)
                      {
                        int v1385 = (__n128 *)(v1376 + 8);
                        uint64_t v1386 = 32 * v1249;
                        do
                        {
                          uint64_t v1387 = v1385[-1].n128_i64[1];
                          if ((v1387 | 0x1000) != 0xFFFFFFFFFFFFF000)
                          {
                            *(void *)&long long v2467 = 0;
                            v2368 = (llvm::Instruction *)v1387;
                            sub_1CBF98030(*(void *)(a1 + 2144), *(_DWORD *)(a1 + 2160), v1387, &v2467);
                            uint64_t v1388 = v2467;
                            *(void *)long long v2467 = v2368;
                            __n128 v1382 = *v1385;
                            *(void *)(v1388 + 24) = v1385[1].n128_u64[0];
                            *(__n128 *)(v1388 + 8) = v1382;
                            ++*(_DWORD *)(a1 + 2152);
                          }
                          v1385 += 2;
                          v1386 -= 32;
                        }
                        while (v1386);
                      }
                      MEMORY[0x1D25D9CD0](v2359, 8, v1382);
                      v1381 = *(void **)(a1 + 2144);
                      LODWORD(v1389) = *(_DWORD *)(a1 + 2160);
                    }
                    else
                    {
                      *(void *)(a1 + 2152) = 0;
                      uint64_t v1389 = *(unsigned int *)(a1 + 2160);
                      if (v1389)
                      {
                        uint64_t v1390 = 0;
                        do
                        {
                          v1381[v1390] = -4096;
                          v1390 += 4;
                        }
                        while (4 * v1389 != v1390);
                      }
                    }
                    sub_1CBF98030((uint64_t)v1381, v1389, v1088, &v2470);
                    int v1248 = *(_DWORD *)(a1 + 2152);
                    uint64_t v1247 = v2470;
LABEL_2522:
                    *(_DWORD *)(a1 + 2152) = v1248 + 1;
                    if (*(void *)v1247 != -4096) {
                      --*(_DWORD *)(a1 + 2156);
                    }
                    *(void *)uint64_t v1247 = v1088;
                    *(_OWORD *)((char *)v1247 + 8) = *(_OWORD *)v2426;
                    *((void *)v1247 + 3) = v2427;
                  }
                  sub_1CC872A2C(a1 + 2168, (uint64_t *)&v2460);
                  unint64_t v1252 = *(unsigned int *)(v1251 + 16);
                  BOOL v1074 = v2387;
                  if (v1252 >= *(unsigned int *)(v1251 + 20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v1251 + 8) + 8 * v1252) = v1088;
                  ++*(_DWORD *)(v1251 + 16);
                  if (v2449)
                  {
                    int v1253 = 32;
                    uint64_t v1254 = &v2450;
LABEL_2529:
                    int v1255 = v1253 - 1;
                    unsigned int v1256 = ((v2460 >> 4) ^ (v2460 >> 9)) & v1255;
                    unint64_t v1257 = &v1254[v1256];
                    uint64_t v1258 = *v1257;
                    if ((void)v2460 == *v1257) {
                      goto LABEL_2314;
                    }
                    v1259 = 0;
                    int v1260 = 1;
                    while (v1258 != -4096)
                    {
                      if (v1259) {
                        BOOL v1261 = 0;
                      }
                      else {
                        BOOL v1261 = v1258 == -8192;
                      }
                      if (v1261) {
                        v1259 = v1257;
                      }
                      unsigned int v1262 = v1256 + v1260++;
                      unsigned int v1256 = v1262 & v1255;
                      unint64_t v1257 = &v1254[v1256];
                      uint64_t v1258 = *v1257;
                      if ((void)v2460 == *v1257) {
                        goto LABEL_2314;
                      }
                    }
                    if (v1259) {
                      v1263 = v1259;
                    }
                    else {
                      v1263 = v1257;
                    }
                  }
                  else
                  {
                    int v1253 = v2451;
                    if (v2451)
                    {
                      uint64_t v1254 = v2450;
                      goto LABEL_2529;
                    }
                    v1263 = 0;
                  }
                  v1264 = sub_1CC872F3C((uint64_t)&v2449, (uint64_t)&v2460, &v2460, v1263);
                  void *v1264 = v2460;
                  if (v2453 >= (unint64_t)HIDWORD(v2453)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)&v2452[8 * v2453] = v2460;
                  LODWORD(v2453) = v2453 + 1;
                  goto LABEL_2314;
                }
                v1395 = (llvm::Instruction *)v1214;
                (*(void (**)(void *, uint64_t, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1214, &v2467, v2431, v2432);
                if (LODWORD(v2426[1]))
                {
                  v1400 = (llvm::MDNode **)v2426[0];
                  v2356 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                  do
                  {
                    llvm::Instruction::setMetadata(v1395, *(_DWORD *)v1400, v1400[1]);
                    v1400 += 2;
                  }
                  while (v1400 != v2356);
                }
                uint64_t v1212 = v1395;
              }
LABEL_2455:
              uint64_t v1215 = (uint64_t)v2360;
              uint64_t v1216 = v2336;
              goto LABEL_2464;
            }
            uint64_t v1217 = *v1111;
            int v1218 = *(_DWORD *)(*v1111 + 20);
            v2361 = (llvm::Instruction *)*v1111;
            if ((v1218 & 0x40000000) != 0) {
              uint64_t v1219 = *(size_t ***)(v1217 - 8);
            }
            else {
              uint64_t v1219 = (size_t **)(v1217 - 32 * (v1218 & 0x7FFFFFF));
            }
            uint64_t v1237 = 0;
            size_t v2340 = **v1219;
            uint64_t v1238 = **(void **)v1088;
            v2426[0] = &v2427;
            v2426[1] = (void *)0x200000000;
            uint64_t v2433 = v1238;
            v2434 = &v2442;
            v2435 = v2443;
            uint64_t v2436 = 0;
            int v2437 = 0;
            __int16 v2438 = 512;
            char v2439 = 7;
            v2431 = 0;
            v2432 = 0;
            uint64_t v2440 = 0;
            uint64_t v2441 = 0;
            v2442 = &unk_1F2616E88;
            v2443[0] = &unk_1F2617008;
            v2431 = *(uint64_t **)(v1088 + 40);
            v2432 = (void **)(v1088 + 24);
            uint64_t v1239 = *(unsigned __int8 **)(v1088 + 48);
            *(void *)&long long v2467 = v1239;
            if (v1239)
            {
              llvm::MetadataTracking::track((uint64_t)&v2467, v1239, 2);
              uint64_t v1237 = v2467;
            }
            sub_1CB8461A4((uint64_t)v2426, 0, v1237);
            uint64_t v1240 = v1201;
            if ((void)v2467)
            {
              int v1313 = *(unsigned __int8 *)v2467;
              if ((v1313 - 4) > 0x1E)
              {
                if ((v1313 - 3) >= 0xFFFFFFFE) {
                  uint64_t v1319 = v2467;
                }
                else {
                  uint64_t v1319 = 0;
                }
                if ((v1313 - 3) < 0xFFFFFFFE)
                {
                  if (v1313 == 3) {
                    *(void *)(v2467 + 8) = 0;
                  }
                  goto LABEL_2507;
                }
                unint64_t v1315 = v1319 + 8;
              }
              else
              {
                if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2 && !*(_DWORD *)(v2467 + 12)) {
                  goto LABEL_2507;
                }
                uint64_t v1314 = *(void *)(v2467 + 16);
                if ((v1314 & 4) == 0) {
                  goto LABEL_2507;
                }
                unint64_t v1315 = v1314 & 0xFFFFFFFFFFFFFFF8;
                if (!v1315) {
                  goto LABEL_2507;
                }
              }
              *(void *)&long long v2459 = &v2467;
              sub_1CC5FA668(v1315 + 16, &v2459);
            }
LABEL_2507:
            LOWORD(v2469) = 257;
            if (*(void *)v2361 != v2340)
            {
              if (*((unsigned __int8 *)v2361 + 16) <= 0x14u)
              {
                uint64_t v1242 = (*((uint64_t (**)(void **, uint64_t))*v2434 + 28))(v2434, 47);
                v2361 = (llvm::Instruction *)v1242;
                if (v1242)
                {
                  if (*(unsigned __int8 *)(v1242 + 16) >= 0x1Cu)
                  {
                    (*(void (**)(void *, uint64_t, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1242, &v2467, v2431, v2432);
                    if (LODWORD(v2426[1]))
                    {
                      char v1396 = (llvm::MDNode **)v2426[0];
                      v2347 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                      do
                      {
                        llvm::Instruction::setMetadata(v2361, *(_DWORD *)v1396, v1396[1]);
                        v1396 += 2;
                      }
                      while (v1396 != v2347);
                    }
                  }
                }
              }
              else
              {
                LOWORD(v2461[0]) = 257;
                v2361 = llvm::CastInst::Create(47, (uint64_t)v2361, v2340, (const char **)&v2459, 0);
                (*(void (**)(void *))(*v2435 + 16))(v2435);
                if (LODWORD(v2426[1]))
                {
                  unsigned int v1241 = (llvm::MDNode **)v2426[0];
                  v2341 = (llvm::MDNode **)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                  do
                  {
                    llvm::Instruction::setMetadata(v2361, *(_DWORD *)v1241, v1241[1]);
                    v1241 += 2;
                  }
                  while (v1241 != v2341);
                }
              }
            }
            uint64_t v2352 = (uint64_t)v1240;
            unsigned int v1243 = (llvm::Type *)v1240[3];
            LOWORD(v2469) = 257;
            char v2342 = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(v2431[7] + 40) + 272), v1243, 1);
            uint64_t v1244 = operator new(0x60uLL);
            v1244[13] = v1244[13] & 0x38000000 | 1;
            uint64_t v1245 = (llvm::Instruction *)(v1244 + 8);
            *(void *)uint64_t v1244 = 0;
            *((void *)v1244 + 1) = 0;
            *((void *)v1244 + 2) = 0;
            *((void *)v1244 + 3) = v1244 + 8;
            LOWORD(v2461[0]) = 257;
            llvm::LoadInst::LoadInst((llvm::Value *)(v1244 + 8), (uint64_t)v1243, v2352, (const char **)&v2459, 0, v2342, 0);
            (*(void (**)(void *, llvm::Instruction *, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1245, &v2467, v2431, v2432);
            if (LODWORD(v2426[1]))
            {
              v1285 = (llvm::MDNode **)v2426[0];
              v2345 = (char *)v2426[0] + 16 * LODWORD(v2426[1]);
              do
              {
                v2355 = v1285;
                llvm::Instruction::setMetadata(v1245, *(_DWORD *)v1285, v1285[1]);
                v1285 = v2355 + 2;
              }
              while (v2355 + 2 != (llvm::MDNode **)v2345);
            }
            uint64_t v1246 = *(void *)v2433 + 1912;
            LOWORD(v2461[0]) = 257;
            unsigned int v1233 = (unsigned __int8 *)sub_1CC278130((uint64_t *)v2426, v1246, (uint64_t *)v1245, (const char *)v2361, (uint64_t)&v2459);
            goto LABEL_2517;
          }
          int v1266 = *v1200;
          uint64_t v1267 = **v1200;
          if (v1267) {
            BOOL v1268 = *(unsigned char *)(v1267 + 8) == 15;
          }
          else {
            BOOL v1268 = 0;
          }
          if (!v1268 || *(void *)(v1267 + 24))
          {
            int v1269 = *((_DWORD *)v1266 + 5);
            if ((v1269 & 0x40000000) != 0) {
              uint64_t v1270 = (uint64_t **)*(v1266 - 1);
            }
            else {
              uint64_t v1270 = (uint64_t **)&v1266[-4 * (v1269 & 0x7FFFFFF)];
            }
            int v1266 = *v1270;
          }
          v2364 = (llvm::Instruction *)v1266;
          size_t v2344 = v2429;
          uint64_t v2354 = v2430;
          uint64_t v1274 = 0;
          v2329 = *(llvm::Function **)(a1 + 4624);
          v2424 = v1266;
          uint64_t v2425 = v1112;
          uint64_t v1275 = **(void **)v1088;
          v2426[0] = &v2427;
          v2426[1] = (void *)0x200000000;
          uint64_t v2433 = v1275;
          v2434 = &v2442;
          v2435 = v2443;
          uint64_t v2436 = 0;
          int v2437 = 0;
          __int16 v2438 = 512;
          char v2439 = 7;
          v2431 = 0;
          v2432 = 0;
          uint64_t v2440 = 0;
          uint64_t v2441 = 0;
          v2442 = &unk_1F2616E88;
          v2443[0] = &unk_1F2617008;
          v2431 = *(uint64_t **)(v1088 + 40);
          v2432 = (void **)(v1088 + 24);
          v1276 = *(unsigned __int8 **)(v1088 + 48);
          *(void *)&long long v2467 = v1276;
          if (v1276)
          {
            llvm::MetadataTracking::track((uint64_t)&v2467, v1276, 2);
            uint64_t v1274 = v2467;
          }
          sub_1CB8461A4((uint64_t)v2426, 0, v1274);
          uint64_t v1277 = v1112;
          uint64_t v1278 = (uint64_t)v2364;
          if ((void)v2467)
          {
            int v1316 = *(unsigned __int8 *)v2467;
            if ((v1316 - 4) > 0x1E)
            {
              if ((v1316 - 3) >= 0xFFFFFFFE) {
                uint64_t v1343 = v2467;
              }
              else {
                uint64_t v1343 = 0;
              }
              if ((v1316 - 3) < 0xFFFFFFFE)
              {
                uint64_t v1277 = v1112;
                uint64_t v1278 = (uint64_t)v2364;
                if (v1316 == 3)
                {
                  *(void *)(v2467 + 8) = 0;
                  uint64_t v1277 = v1112;
                  uint64_t v1278 = (uint64_t)v2364;
                }
                goto LABEL_2567;
              }
              unint64_t v1318 = v1343 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v2467 + 1) & 0x7F) != 2)
              {
                uint64_t v1277 = v1112;
                uint64_t v1278 = (uint64_t)v2364;
                if (!*(_DWORD *)(v2467 + 12)) {
                  goto LABEL_2567;
                }
              }
              uint64_t v1317 = *(void *)(v2467 + 16);
              uint64_t v1277 = v1112;
              uint64_t v1278 = (uint64_t)v2364;
              if ((v1317 & 4) == 0) {
                goto LABEL_2567;
              }
              uint64_t v1277 = v1112;
              uint64_t v1278 = (uint64_t)v2364;
              unint64_t v1318 = v1317 & 0xFFFFFFFFFFFFFFF8;
              if (!v1318) {
                goto LABEL_2567;
              }
            }
            *(void *)&long long v2459 = &v2467;
            sub_1CC5FA668(v1318 + 16, &v2459);
            uint64_t v1278 = (uint64_t)v2424;
            uint64_t v1277 = v2425;
          }
LABEL_2567:
          *(void *)&long long v2459 = 0;
          if (sub_1CD553C1C(*(void *)(a1 + 2192), *(_DWORD *)(a1 + 2208), v1278, v1277, &v2459)
            && (void)v2459 != *(void *)(a1 + 2192) + 24 * *(unsigned int *)(a1 + 2208))
          {
            uint64_t v1280 = *(void *)(v2459 + 16);
            goto LABEL_2570;
          }
          if (*(_DWORD *)(a1 + 2200) >= *(_DWORD *)(a1 + 2216))
          {
            if (v2426[0] != &v2427) {
              free(v2426[0]);
            }
            int v1111 = v2357;
            uint64_t v1200 = v2358;
            goto LABEL_2433;
          }
          unint64_t v2312 = *(unsigned int *)(a1 + 2200);
          v2322 = *(uint64_t ***)(*(void *)(*(void *)(v1088 + 40) + 56) + 40);
          v2307 = llvm::ArrayType::get((llvm::ArrayType *)(**v2322 + 1672), (llvm::Type *)6);
          v1320 = (char *)operator new(0x78uLL);
          *((_DWORD *)v1320 + 13) = *((_DWORD *)v1320 + 13) & 0x38000000 | 1;
          *(void *)v1320 = 0;
          *((void *)v1320 + 1) = 0;
          *((void *)v1320 + 2) = 0;
          *((void *)v1320 + 3) = v1320 + 32;
          v2325 = (uint64_t ***)(v1320 + 32);
          *(void *)&long long v2459 = "agc.cprog.ts.dma.";
          unint64_t v2305 = v2305 & 0xFFFFFFFF00000000 | v2312;
          *(void *)&long long v2460 = v2305;
          LOWORD(v2461[0]) = 2051;
          llvm::GlobalVariable::GlobalVariable((unint64_t *)v1320 + 4, (uint64_t)v2322, v2307, 1, 0, 0, (const char **)&v2459, 0, 0, (llvm::Type *)0x40, 0);
          v2301 = (uint64_t ***)llvm::UniqueStringSaver::save(***((void ***)v1320 + 4) + 2136, "image_state", 0xBuLL);
          v2303 = v1321;
          size_t v2308 = (size_t)v1320;
          uint64_t v1323 = ***((void ***)v1320 + 4);
          *(void *)&long long v2459 = v1320 + 32;
          int v1324 = *(_DWORD *)(v1323 + 2520);
          if (v1324)
          {
            uint64_t v1325 = *(void *)(v1323 + 2504);
            int v1326 = v1324 - 1;
            unsigned int v1327 = v1326 & ((v2325 >> 4) ^ (v2325 >> 9));
            v1328 = (uint64_t ****)(v1325 + 24 * v1327);
            v1329 = *v1328;
            if (*v1328 == v2325) {
              goto LABEL_2648;
            }
            uint64_t v1372 = 0;
            int v1373 = 1;
            while (v1329 != (uint64_t ***)-4096)
            {
              if (v1372) {
                BOOL v1374 = 0;
              }
              else {
                BOOL v1374 = v1329 == (uint64_t ***)-8192;
              }
              if (v1374) {
                uint64_t v1372 = v1328;
              }
              unsigned int v1375 = v1327 + v1373++;
              unsigned int v1327 = v1375 & v1326;
              v1328 = (uint64_t ****)(v1325 + 24 * v1327);
              v1329 = *v1328;
              if (*v1328 == v2325) {
                goto LABEL_2648;
              }
            }
            if (v1372) {
              v1391 = v1372;
            }
            else {
              v1391 = v1328;
            }
          }
          else
          {
            v1391 = 0;
          }
          v1328 = (uint64_t ****)sub_1CC5BF31C(v1323 + 2504, (uint64_t)&v2459, (uint64_t *)&v2459, v1391);
          v1392 = (uint64_t ***)v2459;
          v1328[1] = 0;
          v1328[2] = 0;
          char *v1328 = v1392;
LABEL_2648:
          v1328[1] = v2301;
          v1328[2] = (uint64_t ***)v2303;
          if (v2303) {
            int v1330 = 4456448;
          }
          else {
            int v1330 = 0x40000;
          }
          *((_DWORD *)v1320 + 16) = v1330 | *((_DWORD *)v1320 + 16) & 0xFF80FFFF;
          uint64_t v1331 = (uint64_t)*v2322;
          uint64_t v1332 = **v2322;
          v2304 = *(llvm::ConstantInt **)(v1332 + 1960);
          unint64_t v1333 = *(unsigned int *)(v1332 + 1968);
          DWORD2(v2459) = v1333 >> 8;
          if (v1333 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1333 <= 0xFF) {
            unint64_t v1334 = 0;
          }
          else {
            unint64_t v1334 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1333) + 63);
          }
          *(void *)&long long v2459 = v1334 & v2312;
          v2313 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v2304, (llvm::LLVMContext *)&v2459, v1322);
          if (DWORD2(v2459) >= 0x41 && (void)v2459) {
            MEMORY[0x1D25D9CB0](v2459, 0x1000C8000313F17);
          }
          *(void *)&long long v2467 = llvm::ValueAsMetadata::get(v2313, v1335);
          uint64_t Impl = llvm::MDTuple::getImpl(v1331, &v2467, 1, 0, 1);
          int MDKindID = llvm::LLVMContext::getMDKindID(**v2325, "agx.ts.dma", 0xAuLL);
          llvm::Value::addMetadata((llvm::Value *)v2325, MDKindID, Impl);
          (*(void (**)(llvm::Function *, void, uint64_t ***))(*(void *)v2329 + 144))(v2329, 0, v2325);
          (*(void (**)(llvm::Function *, uint64_t ***, uint64_t **, void))(*(void *)v2329 + 496))(v2329, v2325, v2322 + 34, 0);
          llvm::Intrinsic::getType(*v2322, 2149, 0, 0);
          Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v2322, 2149, 0, 0);
          llvm::Module::getOrInsertFunction((uint64_t)v2322, "llvm.agx2.dmatsri", (const char *)0x11, Type, 0);
          v2323 = 0;
          v2330 = (llvm::Function *)v1338;
          if (v1338) {
            v2323 = *(uint64_t ***)(v1338 + 24);
          }
          if (*(_WORD *)(v1338 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v1338);
          }
          uint64_t v1340 = (llvm::Instruction *)v2325;
          uint64_t v1341 = **((void **)v2330 + 11);
          LOWORD(v2469) = 257;
          if (*v2325 != (uint64_t **)v1341)
          {
            if (*(unsigned __int8 *)(v2308 + 48) <= 0x14u)
            {
              uint64_t v1344 = (*((uint64_t (**)(void **, uint64_t, uint64_t ***, uint64_t))*v2434 + 28))(v2434, 49, v2325, v1341);
              uint64_t v1340 = (llvm::Instruction *)v1344;
              if (v1344)
              {
                if (*(unsigned __int8 *)(v1344 + 16) >= 0x1Cu)
                {
                  (*(void (**)(void *, uint64_t, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1344, &v2467, v2431, v2432);
                  if (LODWORD(v2426[1]))
                  {
                    v1403 = v2426[0];
                    v2320 = (llvm::ValueAsMetadata *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                    do
                    {
                      size_t v2310 = (size_t)v1403;
                      llvm::Instruction::setMetadata(v1340, *(_DWORD *)v1403, *((llvm::MDNode **)v1403 + 1));
                      v1403 = (void *)(v2310 + 16);
                    }
                    while ((llvm::ValueAsMetadata *)(v2310 + 16) != v2320);
                  }
                }
              }
            }
            else
            {
              LOWORD(v2461[0]) = 257;
              uint64_t v1340 = llvm::CastInst::Create(49, (uint64_t)v2325, v1341, (const char **)&v2459, 0);
              (*(void (**)(void *))(*v2435 + 16))(v2435);
              if (LODWORD(v2426[1]))
              {
                v1342 = (llvm::MDNode **)v2426[0];
                v2309 = (char *)v2426[0] + 16 * LODWORD(v2426[1]);
                do
                {
                  v2315 = (llvm::ValueAsMetadata *)v1342;
                  llvm::Instruction::setMetadata(v1340, *(_DWORD *)v1342, v1342[1]);
                  v1342 = (llvm::MDNode **)((char *)v2315 + 16);
                }
                while ((char *)v2315 + 16 != v2309);
              }
            }
          }
          v2455 = v1340;
          if (*((_WORD *)v2330 + 9)) {
            llvm::Function::BuildLazyArguments(v2330);
          }
          uint64_t v1345 = *(void *)(*((void *)v2330 + 11) + 40);
          __int16 v2474 = 257;
          if (*(void *)v2364 != v1345)
          {
            if (*((unsigned __int8 *)v2364 + 16) <= 0x14u)
            {
              uint64_t v1347 = (*((uint64_t (**)(void **, uint64_t, llvm::Instruction *, uint64_t))*v2434 + 28))(v2434, 49, v2364, v1345);
              v2364 = (llvm::Instruction *)v1347;
              if (v1347) {
                BOOL v1348 = *(unsigned __int8 *)(v1347 + 16) >= 0x1Cu;
              }
              else {
                BOOL v1348 = 0;
              }
              if (v1348)
              {
                (*(void (**)(void *, uint64_t, llvm::Instruction **, uint64_t *, void **))(*v2435 + 16))(v2435, v1347, &v2470, v2431, v2432);
                if (LODWORD(v2426[1]))
                {
                  v1401 = (llvm::ValueAsMetadata *)v2426[0];
                  v2318 = (llvm::ValueAsMetadata *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                  do
                  {
                    llvm::Instruction::setMetadata(v2364, *(_DWORD *)v1401, *((llvm::MDNode **)v1401 + 1));
                    v1401 = (llvm::ValueAsMetadata *)((char *)v1401 + 16);
                  }
                  while (v1401 != v2318);
                }
              }
            }
            else
            {
              LOWORD(v2461[0]) = 257;
              v2364 = llvm::CastInst::Create(49, (uint64_t)v2364, v1345, (const char **)&v2459, 0);
              (*(void (**)(void *))(*v2435 + 16))(v2435);
              if (LODWORD(v2426[1]))
              {
                uint64_t v1346 = (llvm::ValueAsMetadata *)v2426[0];
                v2316 = (llvm::ValueAsMetadata *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                do
                {
                  llvm::Instruction::setMetadata(v2364, *(_DWORD *)v1346, *((llvm::MDNode **)v1346 + 1));
                  uint64_t v1346 = (llvm::ValueAsMetadata *)((char *)v1346 + 16);
                }
                while (v1346 != v2316);
              }
            }
          }
          v2456 = v2364;
          uint64_t v1349 = *(void *)v2433 + 1960;
          __int16 v2423 = 257;
          uint64_t v1350 = (unsigned __int8 *)v1112;
          if (*(void *)v1112 != v1349)
          {
            if (*(unsigned __int8 *)(v1112 + 16) <= 0x14u)
            {
              uint64_t v1350 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v2434 + 28))(v2434, 47, v1112, v1349);
              if (v1350) {
                BOOL v1352 = v1350[16] >= 0x1Cu;
              }
              else {
                BOOL v1352 = 0;
              }
              if (v1352)
              {
                (*(void (**)(void *, unsigned __int8 *, llvm::Instruction **, uint64_t *, void **))(*v2435 + 16))(v2435, v1350, &v2420, v2431, v2432);
                if (LODWORD(v2426[1]))
                {
                  uint64_t v1402 = (llvm::MDNode **)v2426[0];
                  v2371 = (llvm::Instruction *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                  do
                  {
                    v2319 = (llvm::ValueAsMetadata *)v1402;
                    llvm::Instruction::setMetadata((llvm::Instruction *)v1350, *(_DWORD *)v1402, v1402[1]);
                    uint64_t v1402 = (llvm::MDNode **)((char *)v2319 + 16);
                  }
                  while ((llvm::ValueAsMetadata *)((char *)v2319 + 16) != v2371);
                }
              }
            }
            else
            {
              LOWORD(v2461[0]) = 257;
              uint64_t v1350 = (unsigned __int8 *)llvm::CastInst::Create(47, v1112, v1349, (const char **)&v2459, 0);
              (*(void (**)(void *, unsigned __int8 *, llvm::Instruction **, uint64_t *, void **))(*v2435 + 16))(v2435, v1350, &v2420, v2431, v2432);
              if (LODWORD(v2426[1]))
              {
                v1351 = (llvm::MDNode **)v2426[0];
                v2317 = (llvm::ValueAsMetadata *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                do
                {
                  v2366 = (llvm::Instruction *)v1351;
                  llvm::Instruction::setMetadata((llvm::Instruction *)v1350, *(_DWORD *)v1351, v1351[1]);
                  v1351 = (llvm::MDNode **)((char *)v2366 + 16);
                }
                while ((llvm::Instruction *)((char *)v2366 + 16) != v2317);
              }
            }
          }
          v2457 = v1350;
          long long v1353 = *(llvm::ConstantInt **)(*(void *)v2433 + 1936);
          unsigned int v1354 = *(_DWORD *)(*(void *)v2433 + 1944);
          DWORD2(v2459) = v1354 >> 8;
          if (v1354 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1354 <= 0xFF) {
            char v1355 = 0;
          }
          else {
            char v1355 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1354) + 63);
          }
          *(void *)&long long v2459 = v1355 & 1;
          uint64_t v1356 = llvm::ConstantInt::get(v1353, (llvm::LLVMContext *)&v2459, v1339);
          if (DWORD2(v2459) >= 0x41 && (void)v2459) {
            MEMORY[0x1D25D9CB0](v2459, 0x1000C8000313F17);
          }
          v2458 = v1356;
          LOWORD(v2461[0]) = 257;
          uint64_t v1357 = sub_1CB845BAC((uint64_t *)v2426, v2323, (uint64_t **)v2330, (uint64_t *)&v2455, 4, (uint64_t)&v2459, 0);
          *(void *)&long long v2459 = v1357;
          if (v2449)
          {
            int v1358 = 32;
            long long v1359 = &v2450;
LABEL_2706:
            int v1360 = v1358 - 1;
            unsigned int v1361 = v1360 & ((v1357 >> 4) ^ (v1357 >> 9));
            v1362 = &v1359[v1361];
            uint64_t v1363 = *v1362;
            if (v1357 != *v1362)
            {
              uint64_t v1364 = 0;
              int v1365 = 1;
              while (v1363 != -4096)
              {
                if (v1364) {
                  BOOL v1366 = 0;
                }
                else {
                  BOOL v1366 = v1363 == -8192;
                }
                if (v1366) {
                  uint64_t v1364 = v1362;
                }
                unsigned int v1367 = v1361 + v1365++;
                unsigned int v1361 = v1367 & v1360;
                v1362 = &v1359[v1361];
                uint64_t v1363 = *v1362;
                if (v1357 == *v1362) {
                  goto LABEL_2721;
                }
              }
              if (v1364) {
                long long v1368 = v1364;
              }
              else {
                long long v1368 = v1362;
              }
              goto LABEL_2719;
            }
          }
          else
          {
            int v1358 = v2451;
            if (v2451)
            {
              long long v1359 = v2450;
              goto LABEL_2706;
            }
            long long v1368 = 0;
LABEL_2719:
            long long v1369 = sub_1CC872F3C((uint64_t)&v2449, (uint64_t)&v2459, &v2459, v1368);
            *long long v1369 = v2459;
            if (v2453 >= (unint64_t)HIDWORD(v2453)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)&v2452[8 * v2453] = v2459;
            LODWORD(v2453) = v2453 + 1;
          }
LABEL_2721:
          unsigned int v1370 = sub_1CD644EF4(a1 + 2192, (uint64_t *)&v2424);
          uint64_t v1280 = (uint64_t)v2325;
          v1370[2] = v2325;
LABEL_2570:
          uint64_t v1281 = v2358;
          uint64_t v1282 = **v2358;
          LOWORD(v2469) = 257;
          if (*(void *)v1280 == v1282)
          {
LABEL_2586:
            size_t v1284 = v2344;
          }
          else
          {
            if (*(unsigned __int8 *)(v1280 + 16) > 0x14u)
            {
              LOWORD(v2461[0]) = 257;
              char v1283 = llvm::CastInst::Create(49, v1280, v1282, (const char **)&v2459, 0);
              (*(void (**)(void *))(*v2435 + 16))(v2435);
              if (LODWORD(v2426[1]))
              {
                v1371 = (llvm::MDNode **)v2426[0];
                v2331 = (llvm::Function *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                do
                {
                  v2367 = (llvm::Instruction *)v1371;
                  llvm::Instruction::setMetadata(v1283, *(_DWORD *)v1371, v1371[1]);
                  v1371 = (llvm::MDNode **)((char *)v2367 + 16);
                }
                while ((llvm::Instruction *)((char *)v2367 + 16) != v2331);
              }
              goto LABEL_2573;
            }
            uint64_t v1280 = (*((uint64_t (**)(void **, uint64_t, uint64_t, uint64_t))*v2434 + 28))(v2434, 49, v1280, v1282);
            if (v1280) {
              BOOL v1286 = *(unsigned __int8 *)(v1280 + 16) >= 0x1Cu;
            }
            else {
              BOOL v1286 = 0;
            }
            if (!v1286)
            {
              uint64_t v1281 = v2358;
              goto LABEL_2586;
            }
            char v1283 = (llvm::Instruction *)v1280;
            (*(void (**)(void *, uint64_t, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1280, &v2467, v2431, v2432);
            if (LODWORD(v2426[1]))
            {
              unsigned __int8 v1398 = (llvm::MDNode **)v2426[0];
              v2332 = (llvm::Function *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
              do
              {
                v2369 = (llvm::Instruction *)v1398;
                llvm::Instruction::setMetadata(v1283, *(_DWORD *)v1398, v1398[1]);
                unsigned __int8 v1398 = (llvm::MDNode **)((char *)v2369 + 16);
              }
              while ((llvm::Instruction *)((char *)v2369 + 16) != v2332);
            }
LABEL_2573:
            uint64_t v1281 = v2358;
            size_t v1284 = v2344;
            uint64_t v1280 = (uint64_t)v1283;
          }
          if (*v1281)
          {
            size_t v1287 = v1110 + 32 * v1284;
            v1289 = *(void **)(v1287 + 16);
            v1288 = (void *)(v1287 + 16);
            void *v1289 = *(v1288 - 1);
            uint64_t v1290 = *(v1288 - 1);
            if (v1290) {
              *(void *)(v1290 + 16) = *v1288;
            }
          }
          *uint64_t v1281 = v1280;
          if (v1280)
          {
            uint64_t v1293 = *(void *)(v1280 + 8);
            v1292 = (void *)(v1280 + 8);
            uint64_t v1291 = v1293;
            size_t v1294 = v1110 + 32 * v1284;
            *(void *)(v1294 + 8) = v1293;
            size_t v1295 = v1294 + 8;
            if (v1293) {
              *(void *)(v1291 + 16) = v1295;
            }
            *(void *)(v1110 + 32 * v1284 + 16) = v1292;
            void *v1292 = v1281;
          }
          v1296 = *(llvm::ConstantInt **)(*(void *)v2433 + 1984);
          unsigned int v1297 = *(_DWORD *)(*(void *)v2433 + 1992);
          DWORD2(v2459) = v1297 >> 8;
          if (v1297 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1297 <= 0xFF) {
            unint64_t v1298 = 0;
          }
          else {
            unint64_t v1298 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1297) + 63);
          }
          *(void *)&long long v2459 = v1298;
          unint64_t v1299 = (uint64_t **)llvm::ConstantInt::get(v1296, (llvm::LLVMContext *)&v2459, v1279);
          if (DWORD2(v2459) >= 0x41 && (void)v2459) {
            MEMORY[0x1D25D9CB0](v2459, 0x1000C8000313F17);
          }
          uint64_t v1300 = *(void *)v1112;
          LOWORD(v2469) = 257;
          if (*v1299 != (uint64_t *)v1300)
          {
            if (*((unsigned __int8 *)v1299 + 16) <= 0x14u)
            {
              unint64_t v1299 = (uint64_t **)(*((uint64_t (**)(void **, uint64_t, uint64_t **, uint64_t))*v2434 + 28))(v2434, 48, v1299, v1300);
              if (v1299) {
                BOOL v1302 = *((unsigned __int8 *)v1299 + 16) >= 0x1Cu;
              }
              else {
                BOOL v1302 = 0;
              }
              if (v1302)
              {
                (*(void (**)(void *, uint64_t **, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1299, &v2467, v2431, v2432);
                if (LODWORD(v2426[1]))
                {
                  char v1399 = (llvm::Instruction *)v2426[0];
                  v2370 = (llvm::Instruction *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                  do
                  {
                    llvm::Instruction::setMetadata((llvm::Instruction *)v1299, *(_DWORD *)v1399, *((llvm::MDNode **)v1399 + 1));
                    char v1399 = (llvm::Instruction *)((char *)v1399 + 16);
                  }
                  while (v1399 != v2370);
                }
              }
            }
            else
            {
              LOWORD(v2461[0]) = 257;
              unint64_t v1299 = (uint64_t **)llvm::CastInst::Create(48, (uint64_t)v1299, v1300, (const char **)&v2459, 0);
              (*(void (**)(void *, uint64_t **, long long *, uint64_t *, void **))(*v2435 + 16))(v2435, v1299, &v2467, v2431, v2432);
              if (LODWORD(v2426[1]))
              {
                v1301 = (llvm::Instruction *)v2426[0];
                v2365 = (llvm::Instruction *)((char *)v2426[0] + 16 * LODWORD(v2426[1]));
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v1299, *(_DWORD *)v1301, *((llvm::MDNode **)v1301 + 1));
                  v1301 = (llvm::Instruction *)((char *)v1301 + 16);
                }
                while (v1301 != v2365);
              }
            }
          }
          if (*v2357)
          {
            uint64_t v1303 = v1110 + 32 * v2354;
            v1305 = *(void **)(v1303 + 16);
            v1304 = (void *)(v1303 + 16);
            void *v1305 = *(v1304 - 1);
            uint64_t v1306 = *(v1304 - 1);
            if (v1306) {
              *(void *)(v1306 + 16) = *v1304;
            }
          }
          uint64_t *v2357 = (uint64_t)v1299;
          if (v1299)
          {
            v1309 = v1299[1];
            uint64_t v1308 = v1299 + 1;
            uint64_t v1307 = v1309;
            uint64_t v1310 = v1110 + 32 * v2354;
            *(void *)(v1310 + 8) = v1309;
            uint64_t v1311 = v1310 + 8;
            if (v1309) {
              v1307[2] = v1311;
            }
            *(void *)(v1110 + 32 * v2354 + 16) = v1308;
            *uint64_t v1308 = v2357;
          }
          if (v2426[0] != &v2427) {
            free(v2426[0]);
          }
          unsigned char *v2413 = 1;
          goto LABEL_2313;
        }
      }
      break;
    }
    if (v1073 != v1074) {
      continue;
    }
    break;
  }
LABEL_2815:
  if (!v2453) {
    goto LABEL_4524;
  }
  v2409 = (llvm::SmallPtrSetImplBase *)(a1 + 1856);
  v2426[0] = &v2427;
  v2426[1] = (void *)0x2000000000;
  sub_1CB935BDC((unsigned int *)v2426, v2452, &v2452[8 * v2453]);
  if (LODWORD(v2426[1]))
  {
    v1404 = (uint64_t *)v2426[0];
    uint64_t v1405 = 8 * LODWORD(v2426[1]);
    do
    {
      uint64_t v1406 = *v1404;
      *(void *)&long long v2459 = &unk_1F261FE18;
      *((void *)&v2459 + 1) = &v2449;
      *((void *)&v2460 + 1) = &v2459;
      sub_1CC8707C0(a1, v1406, a2, (uint64_t)v2412, &v2459, a1 + 2224);
      if (*((long long **)&v2460 + 1) == &v2459)
      {
        (*(void (**)(long long *))(v2459 + 32))(&v2459);
      }
      else if (*((void *)&v2460 + 1))
      {
        (*(void (**)(void))(**((void **)&v2460 + 1) + 40))();
      }
      ++v1404;
      v1405 -= 8;
    }
    while (v1405);
  }
  if (v2453)
  {
    uint64_t v1407 = v2452;
    v1408 = &v2452[8 * v2453];
    while (1)
    {
      uint64_t v1409 = *(void *)v1407;
      int v1410 = *(unsigned __int8 *)(*(void *)v1407 + 16);
      if ((v1410 - 29) < 0xB) {
        break;
      }
      uint64_t v1411 = *(void *)v1409;
      if (sub_1CC872D30(*(void *)v1409)) {
        break;
      }
      uint64_t v1412 = *(void *)(a1 + 3464);
      uint64_t v1413 = *(void *)(a1 + 3456);
      if (v1412 == v1413)
      {
        uint64_t v1414 = *(unsigned int *)(a1 + 3476);
        long long v1415 = (void *)(v1412 + 8 * v1414);
        if (v1414)
        {
          uint64_t v1416 = 0;
          uint64_t v1417 = 8 * v1414;
          while (*(void *)(v1412 + v1416) != v1409)
          {
            v1416 += 8;
            if (v1417 == v1416) {
              goto LABEL_2845;
            }
          }
          long long v1415 = (void *)(v1412 + v1416);
        }
LABEL_2845:
        uint64_t v1413 = *(void *)(a1 + 3464);
      }
      else
      {
        uint64_t v1418 = *(unsigned int *)(a1 + 3472);
        int v1419 = v1418 - 1;
        unsigned int v1420 = (v1418 - 1) & ((v1409 >> 4) ^ (v1409 >> 9));
        long long v1415 = (void *)(v1412 + 8 * v1420);
        uint64_t v1421 = *v1415;
        if (*v1415 == -1)
        {
          long long v1422 = 0;
LABEL_2926:
          if (v1422) {
            long long v1415 = v1422;
          }
          if (*v1415 != v1409) {
            long long v1415 = (void *)(v1412 + 8 * v1418);
          }
        }
        else
        {
          long long v1422 = 0;
          int v1423 = 1;
          while (v1421 != v1409)
          {
            if (v1422) {
              BOOL v1424 = 0;
            }
            else {
              BOOL v1424 = v1421 == -2;
            }
            if (v1424) {
              long long v1422 = v1415;
            }
            unsigned int v1425 = v1420 + v1423++;
            unsigned int v1420 = v1425 & v1419;
            long long v1415 = (void *)(v1412 + 8 * (v1425 & v1419));
            uint64_t v1421 = *v1415;
            if (*v1415 == -1) {
              goto LABEL_2926;
            }
          }
        }
      }
      __n128 v1426 = (unsigned int *)(v1412 == v1413 ? a1 + 3476 : a1 + 3472);
      if (v1415 != (void *)(v1412 + 8 * *v1426)) {
        break;
      }
      if (*(unsigned char *)(v1411 + 8) == 13)
      {
        char v1436 = sub_1CB83544C((uint64_t)v2412, v1411);
        if (v1435 == 1) {
        if ((v1436 & 7) != 0)
        }
        {
          uint64_t v1437 = *(void *)(a1 + 1864);
          uint64_t v1438 = *(unsigned int *)(a1 + 1876);
          if (v1437 != *(void *)(a1 + 1856))
          {
            unsigned int v1442 = *(_DWORD *)(a1 + 1872);
LABEL_2931:
            if (3 * v1442 <= 4 * ((int)v1438 - *(_DWORD *)(a1 + 1880)))
            {
              if (v1442 >= 0x40) {
                v1442 *= 2;
              }
              else {
                unsigned int v1442 = 128;
              }
            }
            else if (v1442 - v1438 >= v1442 >> 3)
            {
              goto LABEL_2933;
            }
            llvm::SmallPtrSetImplBase::Grow(v2409, v1442);
            unsigned int v1442 = *(_DWORD *)(a1 + 1872);
            uint64_t v1437 = *(void *)(a1 + 1864);
LABEL_2933:
            unsigned int v1464 = v1442 - 1;
            unsigned int v1465 = (v1442 - 1) & ((v1409 >> 4) ^ (v1409 >> 9));
            v1458 = (void *)(v1437 + 8 * v1465);
            uint64_t v1466 = *v1458;
            if (*v1458 != -1)
            {
              v1460 = 0;
              int v1467 = 1;
              while (v1466 != v1409)
              {
                if (v1460) {
                  BOOL v1468 = 0;
                }
                else {
                  BOOL v1468 = v1466 == -2;
                }
                if (v1468) {
                  v1460 = v1458;
                }
                unsigned int v1469 = v1465 + v1467++;
                unsigned int v1465 = v1469 & v1464;
                v1458 = (void *)(v1437 + 8 * (v1469 & v1464));
                uint64_t v1466 = *v1458;
                if (*v1458 == -1) {
                  goto LABEL_2945;
                }
              }
              goto LABEL_2952;
            }
LABEL_2944:
            v1460 = 0;
LABEL_2945:
            if (v1460) {
              v1470 = v1460;
            }
            else {
              v1470 = v1458;
            }
            if (*v1470 != v1409)
            {
              if (*v1470 == -2) {
                --*(_DWORD *)(a1 + 1880);
              }
              else {
                ++*(_DWORD *)(a1 + 1876);
              }
              void *v1470 = v1409;
            }
            goto LABEL_2952;
          }
          if (v1438)
          {
            v1439 = 0;
            uint64_t v1440 = 8 * v1438;
            v1441 = *(void **)(a1 + 1864);
            while (*v1441 != v1409)
            {
              if (*v1441 == -2) {
                v1439 = v1441;
              }
              ++v1441;
              v1440 -= 8;
              if (!v1440)
              {
                if (!v1439) {
                  goto LABEL_2874;
                }
                void *v1439 = v1409;
LABEL_2924:
                --*(_DWORD *)(a1 + 1880);
                goto LABEL_2952;
              }
            }
            goto LABEL_2952;
          }
LABEL_2874:
          unsigned int v1442 = *(_DWORD *)(a1 + 1872);
          if (v1438 >= v1442) {
            goto LABEL_2931;
          }
          *(_DWORD *)(a1 + 1876) = v1438 + 1;
          *(void *)(v1437 + 8 * v1438) = v1409;
        }
      }
LABEL_2952:
      v1407 += 8;
      if (v1407 == v1408) {
        goto LABEL_2970;
      }
    }
    if (v1410 != 30) {
      goto LABEL_2898;
    }
    long long v1427 = *(void **)(a1 + 1864);
    long long v1428 = *(void **)(a1 + 1856);
    uint64_t v1429 = *(unsigned int *)(a1 + 1876);
    if ((*(_DWORD *)(v1409 + 20) & 0x7FFFFFF) != 3) {
      goto LABEL_2899;
    }
    uint64_t v1430 = *(void *)(v1409 - 96);
    if (v1427 == v1428)
    {
      if (v1429)
      {
        uint64_t v1431 = 0;
        uint64_t v1432 = 8 * v1429;
        __int16 v1433 = *(void **)(a1 + 1864);
        while (*v1433 != v1430)
        {
          if (*v1433 == -2) {
            uint64_t v1431 = v1433;
          }
          ++v1433;
          v1432 -= 8;
          if (!v1432)
          {
            if (!v1431) {
              goto LABEL_2860;
            }
            *uint64_t v1431 = v1430;
            --*(_DWORD *)(a1 + 1880);
            goto LABEL_2898;
          }
        }
        goto LABEL_2898;
      }
LABEL_2860:
      unsigned int v1434 = *(_DWORD *)(a1 + 1872);
      if (v1429 < v1434)
      {
        *(_DWORD *)(a1 + 1876) = v1429 + 1;
        v1427[v1429] = v1430;
LABEL_2898:
        long long v1427 = *(void **)(a1 + 1864);
        long long v1428 = *(void **)(a1 + 1856);
        LODWORD(v1429) = *(_DWORD *)(a1 + 1876);
LABEL_2899:
        if (v1427 == v1428)
        {
          if (v1429)
          {
            uint64_t v1452 = 0;
            uint64_t v1453 = 8 * v1429;
            v1454 = v1428;
            while (*v1454 != v1409)
            {
              if (*v1454 == -2) {
                uint64_t v1452 = v1454;
              }
              ++v1454;
              v1453 -= 8;
              if (!v1453)
              {
                if (!v1452) {
                  goto LABEL_2907;
                }
                *uint64_t v1452 = v1409;
                goto LABEL_2924;
              }
            }
            goto LABEL_2952;
          }
LABEL_2907:
          unsigned int v1455 = *(_DWORD *)(a1 + 1872);
          if (v1429 < v1455)
          {
            *(_DWORD *)(a1 + 1876) = v1429 + 1;
            v1428[v1429] = v1409;
            goto LABEL_2952;
          }
        }
        else
        {
          unsigned int v1455 = *(_DWORD *)(a1 + 1872);
        }
        if (3 * v1455 <= 4 * ((int)v1429 - *(_DWORD *)(a1 + 1880)))
        {
          if (v1455 >= 0x40) {
            v1455 *= 2;
          }
          else {
            unsigned int v1455 = 128;
          }
        }
        else if (v1455 - v1429 >= v1455 >> 3)
        {
LABEL_2912:
          unsigned int v1456 = v1455 - 1;
          unsigned int v1457 = (v1455 - 1) & ((v1409 >> 4) ^ (v1409 >> 9));
          v1458 = &v1427[v1457];
          uint64_t v1459 = *v1458;
          if (*v1458 == -1) {
            goto LABEL_2944;
          }
          v1460 = 0;
          int v1461 = 1;
          while (v1459 != v1409)
          {
            if (v1460) {
              BOOL v1462 = 0;
            }
            else {
              BOOL v1462 = v1459 == -2;
            }
            if (v1462) {
              v1460 = v1458;
            }
            unsigned int v1463 = v1457 + v1461++;
            unsigned int v1457 = v1463 & v1456;
            v1458 = &v1427[v1463 & v1456];
            uint64_t v1459 = *v1458;
            if (*v1458 == -1) {
              goto LABEL_2945;
            }
          }
          goto LABEL_2952;
        }
        llvm::SmallPtrSetImplBase::Grow(v2409, v1455);
        unsigned int v1455 = *(_DWORD *)(a1 + 1872);
        long long v1427 = *(void **)(a1 + 1864);
        goto LABEL_2912;
      }
    }
    else
    {
      unsigned int v1434 = *(_DWORD *)(a1 + 1872);
    }
    if (3 * v1434 <= 4 * ((int)v1429 - *(_DWORD *)(a1 + 1880)))
    {
      if (v1434 >= 0x40) {
        v1434 *= 2;
      }
      else {
        unsigned int v1434 = 128;
      }
    }
    else if (v1434 - v1429 >= v1434 >> 3)
    {
      goto LABEL_2879;
    }
    llvm::SmallPtrSetImplBase::Grow(v2409, v1434);
    unsigned int v1434 = *(_DWORD *)(a1 + 1872);
    long long v1427 = *(void **)(a1 + 1864);
LABEL_2879:
    unsigned int v1443 = v1434 - 1;
    unsigned int v1444 = (v1434 - 1) & ((v1430 >> 4) ^ (v1430 >> 9));
    uint64_t v1445 = &v1427[v1444];
    uint64_t v1446 = *v1445;
    if (*v1445 == -1)
    {
      v1447 = 0;
LABEL_2891:
      if (v1447) {
        v1451 = v1447;
      }
      else {
        v1451 = v1445;
      }
      if (*v1451 != v1430)
      {
        if (*v1451 == -2) {
          --*(_DWORD *)(a1 + 1880);
        }
        else {
          ++*(_DWORD *)(a1 + 1876);
        }
        void *v1451 = v1430;
      }
    }
    else
    {
      v1447 = 0;
      int v1448 = 1;
      while (v1446 != v1430)
      {
        if (v1447) {
          BOOL v1449 = 0;
        }
        else {
          BOOL v1449 = v1446 == -2;
        }
        if (v1449) {
          v1447 = v1445;
        }
        unsigned int v1450 = v1444 + v1448++;
        unsigned int v1444 = v1450 & v1443;
        uint64_t v1445 = &v1427[v1450 & v1443];
        uint64_t v1446 = *v1445;
        if (*v1445 == -1) {
          goto LABEL_2891;
        }
      }
    }
    goto LABEL_2898;
  }
LABEL_2970:
  if (v2426[0] != &v2427) {
    free(v2426[0]);
  }
  v2426[0] = &v2429;
  v2426[1] = &v2429;
  uint64_t v2427 = 16;
  int v2428 = 0;
  v1471 = (unsigned char *)(a1 + 3888);
  if (v2453)
  {
    v1472 = v2452;
    v1473 = &v2452[8 * v2453];
    do
    {
      if (*v1471)
      {
        int v1474 = 32;
        uint64_t v1475 = a1 + 3896;
      }
      else
      {
        int v1474 = *(_DWORD *)(a1 + 3904);
        if (!v1474)
        {
          v1484 = 0;
LABEL_2990:
          *sub_1CC872F3C(a1 + 3888, (uint64_t)v1472, v1472, v1484) = *(void *)v1472;
          unint64_t v1485 = *(unsigned int *)(a1 + 4160);
          if (v1485 >= *(unsigned int *)(a1 + 4164)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 4152) + 8 * v1485) = *(void *)v1472;
          ++*(_DWORD *)(a1 + 4160);
          goto LABEL_2992;
        }
        uint64_t v1475 = *(void *)(a1 + 3896);
      }
      int v1476 = v1474 - 1;
      unsigned int v1477 = ((*(void *)v1472 >> 4) ^ (*(void *)v1472 >> 9)) & v1476;
      v1478 = (void *)(v1475 + 8 * v1477);
      uint64_t v1479 = *v1478;
      if (*(void *)v1472 != *v1478)
      {
        v1480 = 0;
        int v1481 = 1;
        while (v1479 != -4096)
        {
          if (v1480) {
            BOOL v1482 = 0;
          }
          else {
            BOOL v1482 = v1479 == -8192;
          }
          if (v1482) {
            v1480 = v1478;
          }
          unsigned int v1483 = v1477 + v1481++;
          unsigned int v1477 = v1483 & v1476;
          v1478 = (void *)(v1475 + 8 * v1477);
          uint64_t v1479 = *v1478;
          if (*(void *)v1472 == *v1478) {
            goto LABEL_2992;
          }
        }
        if (v1480) {
          v1484 = v1480;
        }
        else {
          v1484 = v1478;
        }
        goto LABEL_2990;
      }
LABEL_2992:
      v1472 += 8;
    }
    while (v1472 != v1473);
  }
  long long v2467 = 0u;
  long long v2468 = 0u;
  float v2469 = 1.0;
  uint64_t v1486 = *(unsigned int *)(a1 + 4160);
  if (!v1486) {
    goto LABEL_3379;
  }
  v2395 = (llvm::SmallPtrSetImplBase *)(a1 + 2664);
  do
  {
    uint64_t v1487 = *(void *)(*(void *)(a1 + 4152) + 8 * v1486 - 8);
    sub_1CC871168(a1 + 3888, v1487);
    --*(_DWORD *)(a1 + 4160);
    int v1488 = *(unsigned __int8 *)(v1487 + 16);
    if (v1488 == 83 || (v1488 - 29) < 0xB) {
      goto LABEL_3149;
    }
    int v1490 = *(_DWORD *)(v1487 + 20);
    if ((v1490 & 0x40000000) != 0)
    {
      v1492 = *(uint64_t **)(v1487 - 8);
      uint64_t v1491 = v1490 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v1491 = v1490 & 0x7FFFFFF;
      v1492 = (uint64_t *)(v1487 - 32 * v1491);
    }
    unint64_t v1493 = sub_1CC87323C(v1492, &v1492[4 * v1491]);
    uint64_t v2465 = 0;
    long long v2464 = 0u;
    long long v2463 = 0u;
    long long v2462 = 0u;
    memset(v2461, 0, sizeof(v2461));
    long long v2460 = 0u;
    long long v2459 = 0u;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v1685 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v1685 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v1685;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    uint64_t v2466 = qword_1EBCBE580;
    LODWORD(v2459) = v1488 - 28;
    *(void *)((char *)&v2459 + 4) = v1493;
    unsigned int v1494 = sub_1CBAE06B8(&v2459, 0xCuLL, qword_1EBCBE580);
    unsigned int v1495 = v1494;
    unint64_t v1496 = v1494;
    unint64_t v1497 = *((void *)&v2467 + 1);
    if (!*((void *)&v2467 + 1)) {
      goto LABEL_3065;
    }
    uint8x8_t v1498 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v2467 + 8));
    v1498.i16[0] = vaddlv_u8(v1498);
    if (v1498.u32[0] <= 1uLL)
    {
      unint64_t v1499 = (DWORD2(v2467) - 1) & v1494;
    }
    else
    {
      unint64_t v1499 = v1494;
      if (*((void *)&v2467 + 1) <= (unint64_t)v1494) {
        unint64_t v1499 = (unint64_t)v1494 % *((void *)&v2467 + 1);
      }
    }
    v1500 = *(uint64_t ***)(v2467 + 8 * v1499);
    if (!v1500) {
      goto LABEL_3065;
    }
    v1501 = *v1500;
    if (!*v1500) {
      goto LABEL_3065;
    }
    while (1)
    {
      unint64_t v1502 = v1501[1];
      if (v1502 == v1494) {
        break;
      }
      if (v1498.u32[0] <= 1uLL)
      {
        v1502 &= *((void *)&v2467 + 1) - 1;
      }
      else if (v1502 >= *((void *)&v2467 + 1))
      {
        v1502 %= *((void *)&v2467 + 1);
      }
      if (v1502 != v1499) {
        goto LABEL_3065;
      }
LABEL_3019:
      v1501 = (uint64_t *)*v1501;
      if (!v1501) {
        goto LABEL_3065;
      }
    }
    if (*((_DWORD *)v1501 + 4) != v1494) {
      goto LABEL_3019;
    }
    v1503 = v1501;
    do
      v1503 = (uint64_t *)*v1503;
    while (v1503 && *((_DWORD *)v1503 + 4) == v1494);
    if (v1501 == v1503) {
      goto LABEL_3065;
    }
    while (2)
    {
      v1504 = (unsigned __int8 *)v1501[3];
      v2420 = (llvm::Instruction *)v1504;
      v1505 = v2426[0];
      if (v2426[1] == v2426[0])
      {
        unsigned int v1506 = HIDWORD(v2427);
        v1507 = (char *)v2426[1] + 8 * HIDWORD(v2427);
        if (HIDWORD(v2427))
        {
          uint64_t v1508 = 0;
          while (*(unsigned __int8 **)((char *)v2426[1] + v1508) != v1504)
          {
            v1508 += 8;
            if (8 * HIDWORD(v2427) == v1508) {
              goto LABEL_3047;
            }
          }
          v1507 = (char *)v2426[1] + v1508;
        }
LABEL_3047:
        v1505 = v2426[1];
      }
      else
      {
        int v1509 = v2427 - 1;
        unsigned int v1510 = (v2427 - 1) & ((v1504 >> 4) ^ (v1504 >> 9));
        v1507 = (char *)v2426[1] + 8 * v1510;
        v1511 = *(unsigned __int8 **)v1507;
        if (*(void *)v1507 == -1)
        {
          v1512 = 0;
LABEL_3060:
          if (v1512) {
            v1507 = v1512;
          }
          unsigned int v1506 = HIDWORD(v2427);
          if (*(unsigned __int8 **)v1507 != v1504) {
            v1507 = (char *)v2426[1] + 8 * v2427;
          }
        }
        else
        {
          v1512 = 0;
          int v1513 = 1;
          while (v1511 != v1504)
          {
            if (v1512) {
              BOOL v1514 = 0;
            }
            else {
              BOOL v1514 = v1511 == (unsigned __int8 *)-2;
            }
            if (v1514) {
              v1512 = v1507;
            }
            unsigned int v1515 = v1510 + v1513++;
            unsigned int v1510 = v1515 & v1509;
            v1507 = (char *)v2426[1] + 8 * (v1515 & v1509);
            v1511 = *(unsigned __int8 **)v1507;
            if (*(void *)v1507 == -1) {
              goto LABEL_3060;
            }
          }
          unsigned int v1506 = HIDWORD(v2427);
        }
      }
      if (v2426[1] == v1505) {
        unsigned int v1516 = v1506;
      }
      else {
        unsigned int v1516 = v2427;
      }
      if (v1507 != (char *)v2426[1] + 8 * v1516
        || !llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v1504, (const llvm::Instruction *)v1487)|| (*(unsigned __int8 *)(v1487 + 17) ^ v1504[17]) > 1)
      {
LABEL_3057:
        v1501 = (uint64_t *)*v1501;
        if (v1501 != v1503) {
          continue;
        }
        unint64_t v1497 = *((void *)&v2467 + 1);
LABEL_3065:
        v1518 = operator new(0x20uLL);
        v1518[4] = v1495;
        *((void *)v1518 + 3) = v1487;
        *(void *)v1518 = 0;
        *((void *)v1518 + 1) = v1496;
        float v1519 = (float)(unint64_t)(*((void *)&v2468 + 1) + 1);
        if (!v1497 || (float)(v2469 * (float)v1497) < v1519)
        {
          BOOL v1520 = (v1497 & (v1497 - 1)) != 0;
          if (v1497 < 3) {
            BOOL v1520 = 1;
          }
          unint64_t v1521 = v1520 | (2 * v1497);
          unint64_t v1522 = vcvtps_u32_f32(v1519 / v2469);
          if (v1521 <= v1522) {
            int8x8_t prime = (int8x8_t)v1522;
          }
          else {
            int8x8_t prime = (int8x8_t)v1521;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v1497 = *((void *)&v2467 + 1);
          }
          if (*(void *)&prime <= v1497)
          {
            if (*(void *)&prime < v1497)
            {
              unint64_t v1534 = vcvtps_u32_f32((float)*((unint64_t *)&v2468 + 1) / v2469);
              if (v1497 < 3
                || (uint8x8_t v1535 = (uint8x8_t)vcnt_s8((int8x8_t)v1497), v1535.i16[0] = vaddlv_u8(v1535), v1535.u32[0] > 1uLL))
              {
                unint64_t v1534 = std::__next_prime(v1534);
              }
              else
              {
                uint64_t v1536 = 1 << -(char)__clz(v1534 - 1);
                if (v1534 >= 2) {
                  unint64_t v1534 = v1536;
                }
              }
              if (*(void *)&prime <= v1534) {
                int8x8_t prime = (int8x8_t)v1534;
              }
              if (*(void *)&prime >= v1497)
              {
                unint64_t v1497 = *((void *)&v2467 + 1);
              }
              else
              {
                if (prime) {
                  goto LABEL_3077;
                }
                v1537 = (void *)v2467;
                *(void *)&long long v2467 = 0;
                if (v1537) {
                  operator delete(v1537);
                }
                unint64_t v1497 = 0;
                *((void *)&v2467 + 1) = 0;
              }
            }
          }
          else
          {
LABEL_3077:
            if (*(void *)&prime >> 61) {
              sub_1CB833614();
            }
            v1524 = operator new(8 * *(void *)&prime);
            v1525 = (void *)v2467;
            *(void *)&long long v2467 = v1524;
            if (v1525) {
              operator delete(v1525);
            }
            uint64_t v1526 = 0;
            *((int8x8_t *)&v2467 + 1) = prime;
            do
              *(void *)(v2467 + 8 * v1526++) = 0;
            while (*(void *)&prime != v1526);
            v1527 = (uint64_t **)v2468;
            if ((void)v2468)
            {
              unint64_t v1528 = *(void *)(v2468 + 8);
              uint8x8_t v1529 = (uint8x8_t)vcnt_s8(prime);
              v1529.i16[0] = vaddlv_u8(v1529);
              if (v1529.u32[0] <= 1uLL)
              {
                v1528 &= *(void *)&prime - 1;
              }
              else if (v1528 >= *(void *)&prime)
              {
                v1528 %= *(void *)&prime;
              }
              *(void *)(v2467 + 8 * v1528) = &v2468;
              for (unint64_t n = *v1527; *v1527; unint64_t n = *v1527)
              {
                unint64_t v1531 = n[1];
                if (v1529.u32[0] <= 1uLL)
                {
                  v1531 &= *(void *)&prime - 1;
                }
                else if (v1531 >= *(void *)&prime)
                {
                  v1531 %= *(void *)&prime;
                }
                if (v1531 == v1528)
                {
                  v1527 = (uint64_t **)n;
                }
                else
                {
                  v1532 = n;
                  if (*(void *)(v2467 + 8 * v1531))
                  {
                    do
                    {
                      v1533 = v1532;
                      v1532 = (uint64_t *)*v1532;
                    }
                    while (v1532 && *((_DWORD *)n + 4) == *((_DWORD *)v1532 + 4));
                    *v1527 = v1532;
                    void *v1533 = **(void **)(v2467 + 8 * v1531);
                    **(void **)(v2467 + 8 * v1531) = n;
                  }
                  else
                  {
                    *(void *)(v2467 + 8 * v1531) = v1527;
                    v1527 = (uint64_t **)n;
                    unint64_t v1528 = v1531;
                  }
                }
              }
            }
            unint64_t v1497 = (unint64_t)prime;
          }
        }
        uint8x8_t v1538 = (uint8x8_t)vcnt_s8((int8x8_t)v1497);
        v1538.i16[0] = vaddlv_u8(v1538);
        if (v1538.u32[0] > 1uLL)
        {
          unint64_t v1539 = v1496;
          if (v1497 <= v1496) {
            unint64_t v1539 = v1496 % v1497;
          }
        }
        else
        {
          unint64_t v1539 = (v1497 - 1) & v1496;
        }
        uint64_t v1540 = v2467;
        v1541 = *(uint64_t ***)(v2467 + 8 * v1539);
        if (v1541)
        {
          v1542 = *v1541;
          if (*v1541)
          {
            int v1543 = 0;
            do
            {
              v1544 = v1542;
              unint64_t v1545 = v1542[1];
              if (v1538.u32[0] > 1uLL)
              {
                unint64_t v1546 = v1545;
                if (v1545 >= v1497) {
                  unint64_t v1546 = v1545 % v1497;
                }
              }
              else
              {
                unint64_t v1546 = v1545 & (v1497 - 1);
              }
              if (v1546 != v1539) {
                break;
              }
              BOOL v1547 = v1545 == v1496 && *((_DWORD *)v1544 + 4) == v1518[4];
              if ((v1543 & !v1547) == 1) {
                break;
              }
              v1543 |= v1547;
              v1542 = (uint64_t *)*v1544;
              v1541 = (uint64_t **)v1544;
            }
            while (*v1544);
          }
        }
        unint64_t v1548 = *((void *)v1518 + 1);
        if (v1538.u32[0] <= 1uLL)
        {
          v1548 &= v1497 - 1;
          if (!v1541) {
            goto LABEL_3137;
          }
        }
        else
        {
          if (v1548 >= v1497) {
            v1548 %= v1497;
          }
          if (!v1541)
          {
LABEL_3137:
            *(void *)v1518 = v2468;
            *(void *)&long long v2468 = v1518;
            *(void *)(v1540 + 8 * v1548) = &v2468;
            if (*(void *)v1518)
            {
              unint64_t v1549 = *(void *)(*(void *)v1518 + 8);
              if (v1538.u32[0] <= 1uLL)
              {
                v1549 &= v1497 - 1;
              }
              else if (v1549 >= v1497)
              {
                v1549 %= v1497;
              }
              goto LABEL_3147;
            }
            goto LABEL_3148;
          }
        }
        *(void *)v1518 = *v1541;
        *v1541 = (uint64_t *)v1518;
        if (*(void *)v1518)
        {
          unint64_t v1549 = *(void *)(*(void *)v1518 + 8);
          if (v1538.u32[0] <= 1uLL)
          {
            v1549 &= v1497 - 1;
          }
          else if (v1549 >= v1497)
          {
            v1549 %= v1497;
          }
          if (v1549 != v1548) {
LABEL_3147:
          }
            *(void *)(v2467 + 8 * v1549) = v1518;
        }
LABEL_3148:
        ++*((void *)&v2468 + 1);
        goto LABEL_3149;
      }
      break;
    }
    uint64_t v1517 = *((void *)v2420 + 5);
    if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 4600), (const llvm::Value *)v1487, v2420))llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(); {
    if ((llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 4600), v2420, (const llvm::Instruction *)v1487) & 1) == 0)
    }
    {
      if (!sub_1CC85ED24(v1487, (uint64_t)v2412, *(int **)(a1 + 4592), *(void *)(a1 + 4616), v2413[9], 0))goto LABEL_3057; {
      uint64_t v1550 = *((void *)v2420 + 5);
      }
      uint64_t v1551 = *(void *)(v1487 + 40);
      uint64_t v1552 = *(void *)(*(void *)(v1550 + 56) + 80);
      if (v1552) {
        uint64_t v1553 = v1552 - 24;
      }
      else {
        uint64_t v1553 = 0;
      }
      if (v1553 != v1550 && v1553 != v1551)
      {
        uint64_t v1555 = *(void *)(a1 + 4600);
        uint64_t v1556 = *(void *)(v1555 + 24);
        uint64_t v1557 = *(unsigned int *)(v1555 + 40);
        if (v1557)
        {
          LODWORD(v1558) = (v1557 - 1) & ((v1550 >> 4) ^ (v1550 >> 9));
          v1559 = (uint64_t *)(v1556 + 16 * v1558);
          uint64_t v1560 = *v1559;
          if (*v1559 != v1550)
          {
            int v1561 = 1;
            do
            {
              if (v1560 == -4096) {
                goto LABEL_3167;
              }
              int v1562 = v1558 + v1561++;
              uint64_t v1558 = v1562 & (v1557 - 1);
              uint64_t v1560 = *(void *)(v1556 + 16 * v1558);
            }
            while (v1560 != v1550);
            v1559 = (uint64_t *)(v1556 + 16 * v1558);
          }
        }
        else
        {
LABEL_3167:
          v1559 = (uint64_t *)(v1556 + 16 * v1557);
        }
        v1563 = (uint64_t *)(v1556 + 16 * v1557);
        if (v1559 != v1563)
        {
          uint64_t v1564 = v1559[1];
          if (v1557) {
            goto LABEL_3170;
          }
          goto LABEL_3377;
        }
        uint64_t v1564 = 0;
        if (!v1557) {
          goto LABEL_3377;
        }
LABEL_3170:
        unsigned int v1565 = v1557 - 1;
        LODWORD(v1557) = (v1557 - 1) & ((v1551 >> 4) ^ (v1551 >> 9));
        v1566 = (uint64_t *)(v1556 + 16 * v1557);
        uint64_t v1567 = *v1566;
        if (*v1566 != v1551)
        {
          int v1568 = 1;
          do
          {
            if (v1567 == -4096) {
              goto LABEL_3377;
            }
            int v1569 = v1557 + v1568++;
            uint64_t v1557 = v1569 & v1565;
            uint64_t v1567 = *(void *)(v1556 + 16 * v1557);
          }
          while (v1567 != v1551);
          v1566 = (uint64_t *)(v1556 + 16 * v1557);
        }
        if (v1566 == v1563) {
LABEL_3377:
        }
          uint64_t v1570 = 0;
        else {
          uint64_t v1570 = v1566[1];
        }
        for (; v1564 != v1570; uint64_t v1564 = *(void *)(v1574 + 8))
        {
          unsigned int v1571 = *(_DWORD *)(v1564 + 16);
          unsigned int v1572 = *(_DWORD *)(v1570 + 16);
          BOOL v1573 = v1571 >= v1572;
          if (v1571 >= v1572) {
            uint64_t v1574 = v1564;
          }
          else {
            uint64_t v1574 = v1570;
          }
          if (!v1573) {
            uint64_t v1570 = v1564;
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
    v1575 = *(uint64_t **)(a1 + 4608);
    int v1576 = *((_DWORD *)v1575 + 4);
    if (!v1576) {
      goto LABEL_3191;
    }
    uint64_t v1577 = *((void *)v2420 + 5);
    uint64_t v1578 = *v1575;
    unsigned int v1579 = v1576 - 1;
    LODWORD(v1580) = ((v1577 >> 4) ^ (v1577 >> 9)) & v1579;
    v1581 = (uint64_t *)(v1578 + 16 * v1580);
    uint64_t v1582 = *v1581;
    if (v1577 == *v1581)
    {
      v1585 = (void *)v1581[1];
      if (!v1585) {
        goto LABEL_3191;
      }
LABEL_3201:
      uint64_t v1591 = *(void *)(v1487 + 40);
      uint64_t v1592 = ((v1591 >> 4) ^ (v1591 >> 9)) & v1579;
      uint64_t v1593 = *(void *)(v1578 + 16 * v1592);
      if (v1591 == v1593)
      {
LABEL_3205:
        v1596 = *(void **)(v1578 + 16 * v1592 + 8);
        goto LABEL_3207;
      }
      int v1594 = 1;
      while (v1593 != -4096)
      {
        int v1595 = v1592 + v1594++;
        uint64_t v1592 = v1595 & v1579;
        uint64_t v1593 = *(void *)(v1578 + 16 * v1592);
        if (v1591 == v1593) {
          goto LABEL_3205;
        }
      }
      v1596 = 0;
LABEL_3207:
      while (v1596 != v1585)
      {
        if (!v1596)
        {
LABEL_3220:
          if (*(unsigned char *)v2395)
          {
            int v1602 = 32;
            uint64_t v1603 = a1 + 2672;
LABEL_3223:
            int v1604 = v1602 - 1;
            unsigned int v1605 = v1604 & ((v2420 >> 4) ^ (v2420 >> 9));
            v1606 = (llvm::Instruction **)(v1603 + 8 * v1605);
            v1607 = *v1606;
            if (v2420 == *v1606) {
              goto LABEL_3239;
            }
            v1608 = 0;
            int v1609 = 1;
            while (v1607 != (llvm::Instruction *)-4096)
            {
              if (v1608) {
                BOOL v1610 = 0;
              }
              else {
                BOOL v1610 = v1607 == (llvm::Instruction *)-8192;
              }
              if (v1610) {
                v1608 = v1606;
              }
              unsigned int v1611 = v1605 + v1609++;
              unsigned int v1605 = v1611 & v1604;
              v1606 = (llvm::Instruction **)(v1603 + 8 * v1605);
              v1607 = *v1606;
              if (v2420 == *v1606) {
                goto LABEL_3239;
              }
            }
            if (v1608) {
              v1612 = v1608;
            }
            else {
              v1612 = v1606;
            }
          }
          else
          {
            int v1602 = *(_DWORD *)(a1 + 2680);
            if (v1602)
            {
              uint64_t v1603 = *(void *)(a1 + 2672);
              goto LABEL_3223;
            }
            v1612 = 0;
          }
          v1613 = sub_1CC872F3C((uint64_t)v2395, (uint64_t)&v2420, &v2420, v1612);
          void *v1613 = v2420;
          unint64_t v1614 = *(unsigned int *)(a1 + 2936);
          if (v1614 >= *(unsigned int *)(a1 + 2940)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 2928) + 8 * v1614) = v2420;
          int v1590 = *(_DWORD *)(a1 + 2936) + 1;
          goto LABEL_3238;
        }
        v1596 = (void *)*v1596;
      }
      if (v1517 != v1577)
      {
        uint64_t v1597 = v1579 & ((v1517 >> 4) ^ (v1517 >> 9));
        uint64_t v1598 = *(void *)(v1578 + 16 * v1597);
        if (v1517 == v1598)
        {
LABEL_3215:
          v1601 = *(void **)(v1578 + 16 * v1597 + 8);
          goto LABEL_3217;
        }
        int v1599 = 1;
        while (v1598 != -4096)
        {
          int v1600 = v1597 + v1599++;
          uint64_t v1597 = v1600 & v1579;
          uint64_t v1598 = *(void *)(v1578 + 16 * v1597);
          if (v1517 == v1598) {
            goto LABEL_3215;
          }
        }
        v1601 = 0;
LABEL_3217:
        while (v1601 != v1585)
        {
          if (!v1601) {
            goto LABEL_3220;
          }
          v1601 = (void *)*v1601;
        }
      }
    }
    else
    {
      int v1583 = 1;
      while (v1582 != -4096)
      {
        int v1584 = v1580 + v1583++;
        uint64_t v1580 = v1584 & v1579;
        uint64_t v1582 = *(void *)(v1578 + 16 * v1580);
        if (v1577 == v1582)
        {
          v1585 = *(void **)(v1578 + 16 * v1580 + 8);
          if (v1585) {
            goto LABEL_3201;
          }
          break;
        }
      }
LABEL_3191:
      if (sub_1CC871168((uint64_t)v2395, (uint64_t)v2420))
      {
        v1586 = *(llvm::Instruction ***)(a1 + 2928);
        uint64_t v1587 = *(unsigned int *)(a1 + 2936);
        v1588 = &v1586[v1587];
        if (v1587)
        {
          uint64_t v1589 = 8 * v1587;
          while (*v1586 != v2420)
          {
            ++v1586;
            v1589 -= 8;
            if (!v1589)
            {
              v1586 = v1588;
              break;
            }
          }
        }
        if (v1588 != v1586 + 1)
        {
          memmove(v1586, v1586 + 1, (char *)v1588 - (char *)(v1586 + 1));
          LODWORD(v1587) = *(_DWORD *)(a1 + 2936);
        }
        int v1590 = v1587 - 1;
LABEL_3238:
        *(_DWORD *)(a1 + 2936) = v1590;
      }
    }
LABEL_3239:
    uint64_t v1615 = *(void *)(v1487 + 8);
    if (v1615)
    {
      while (2)
      {
        uint64_t v1616 = *(void *)(v1615 + 24);
        if ((v2449 & 1) == 0)
        {
          int v1617 = v2451;
          if (v2451)
          {
            v1618 = v2450;
            goto LABEL_3244;
          }
LABEL_3290:
          uint64_t v1615 = *(void *)(v1615 + 8);
          if (!v1615) {
            goto LABEL_3301;
          }
          continue;
        }
        break;
      }
      int v1617 = 32;
      v1618 = &v2450;
LABEL_3244:
      unsigned int v1619 = (v1616 >> 4) ^ (v1616 >> 9);
      int v1620 = v1617 - 1;
      unsigned int v1621 = v1620 & v1619;
      uint64_t v1622 = v1618[v1620 & v1619];
      if (v1616 != v1622)
      {
        int v1623 = 1;
        while (v1622 != -4096)
        {
          unsigned int v1624 = v1621 + v1623++;
          unsigned int v1621 = v1624 & v1620;
          uint64_t v1622 = v1618[v1621];
          if (v1616 == v1622) {
            goto LABEL_3248;
          }
        }
        goto LABEL_3290;
      }
LABEL_3248:
      v1625 = v2426[0];
      if (v2426[1] == v2426[0])
      {
        unsigned int v1626 = HIDWORD(v2427);
        v1627 = (char *)v2426[1] + 8 * HIDWORD(v2427);
        if (HIDWORD(v2427))
        {
          uint64_t v1628 = 0;
          while (*(void *)((char *)v2426[1] + v1628) != v1616)
          {
            v1628 += 8;
            if (8 * HIDWORD(v2427) == v1628) {
              goto LABEL_3267;
            }
          }
          v1627 = (char *)v2426[1] + v1628;
        }
LABEL_3267:
        v1625 = v2426[1];
      }
      else
      {
        int v1629 = v2427 - 1;
        unsigned int v1630 = (v2427 - 1) & v1619;
        v1627 = (char *)v2426[1] + 8 * v1630;
        uint64_t v1631 = *(void *)v1627;
        if (*(void *)v1627 == -1)
        {
          v1632 = 0;
LABEL_3293:
          if (v1632) {
            v1627 = v1632;
          }
          unsigned int v1626 = HIDWORD(v2427);
          if (*(void *)v1627 != v1616) {
            v1627 = (char *)v2426[1] + 8 * v2427;
          }
        }
        else
        {
          v1632 = 0;
          int v1633 = 1;
          while (v1631 != v1616)
          {
            if (v1632) {
              BOOL v1634 = 0;
            }
            else {
              BOOL v1634 = v1631 == -2;
            }
            if (v1634) {
              v1632 = v1627;
            }
            unsigned int v1635 = v1630 + v1633++;
            unsigned int v1630 = v1635 & v1629;
            v1627 = (char *)v2426[1] + 8 * (v1635 & v1629);
            uint64_t v1631 = *(void *)v1627;
            if (*(void *)v1627 == -1) {
              goto LABEL_3293;
            }
          }
          unsigned int v1626 = HIDWORD(v2427);
        }
      }
      if (v2426[1] == v1625) {
        unsigned int v1636 = v1626;
      }
      else {
        unsigned int v1636 = v2427;
      }
      if (v1627 != (char *)v2426[1] + 8 * v1636) {
        goto LABEL_3290;
      }
      *(void *)&long long v2459 = *(void *)(v1615 + 24);
      if (*v1471)
      {
        int v1637 = 32;
        uint64_t v1638 = a1 + 3896;
LABEL_3275:
        int v1639 = v1637 - 1;
        unsigned int v1640 = v1639 & v1619;
        v1641 = (void *)(v1638 + 8 * v1640);
        uint64_t v1642 = *v1641;
        if (v1616 == *v1641) {
          goto LABEL_3290;
        }
        v1643 = 0;
        int v1644 = 1;
        while (v1642 != -4096)
        {
          if (v1643) {
            BOOL v1645 = 0;
          }
          else {
            BOOL v1645 = v1642 == -8192;
          }
          if (v1645) {
            v1643 = v1641;
          }
          unsigned int v1646 = v1640 + v1644++;
          unsigned int v1640 = v1646 & v1639;
          v1641 = (void *)(v1638 + 8 * v1640);
          uint64_t v1642 = *v1641;
          if (v1616 == *v1641) {
            goto LABEL_3290;
          }
        }
        if (v1643) {
          v1647 = v1643;
        }
        else {
          v1647 = v1641;
        }
      }
      else
      {
        int v1637 = *(_DWORD *)(a1 + 3904);
        if (v1637)
        {
          uint64_t v1638 = *(void *)(a1 + 3896);
          goto LABEL_3275;
        }
        v1647 = 0;
      }
      v1648 = sub_1CC872F3C(a1 + 3888, (uint64_t)&v2459, &v2459, v1647);
      void *v1648 = v2459;
      unint64_t v1649 = *(unsigned int *)(a1 + 4160);
      if (v1649 >= *(unsigned int *)(a1 + 4164)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 4152) + 8 * v1649) = v2459;
      ++*(_DWORD *)(a1 + 4160);
      goto LABEL_3290;
    }
LABEL_3301:
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1487, v2420, (llvm::Value *)1);
    v1650 = v2420;
    v2470 = v2420;
    uint64_t v1651 = *(void *)(a1 + 2168);
    uint64_t v1652 = *(unsigned int *)(a1 + 2184);
    if (v1652)
    {
      uint64_t v1681 = (v1652 - 1) & ((v1487 >> 4) ^ (v1487 >> 9));
      v1653 = (uint64_t *)(v1651 + 32 * v1681);
      uint64_t v1682 = *v1653;
      if (v1487 != *v1653)
      {
        int v1683 = 1;
        while (v1682 != -4096)
        {
          int v1684 = v1681 + v1683++;
          uint64_t v1681 = v1684 & (v1652 - 1);
          uint64_t v1682 = *(void *)(v1651 + 32 * v1681);
          if (v1487 == v1682)
          {
            v1653 = (uint64_t *)(v1651 + 32 * v1681);
            goto LABEL_3303;
          }
        }
        goto LABEL_3302;
      }
    }
    else
    {
LABEL_3302:
      v1653 = (uint64_t *)(v1651 + 32 * v1652);
    }
LABEL_3303:
    if (v1653 != (uint64_t *)(v1651 + 32 * v1652))
    {
      sub_1CC872A2C(a1 + 2168, (uint64_t *)&v2470);
      v1655 = (uint64_t *)v1653[1];
      uint64_t v1656 = *((unsigned int *)v1653 + 4);
      if (v1656)
      {
        uint64_t v1657 = v1654;
        uint64_t v1658 = 8 * v1656;
        do
        {
          uint64_t v1659 = *v1655;
          *(void *)&long long v2459 = 0;
          if (sub_1CBF98030(*(void *)(a1 + 2144), *(_DWORD *)(a1 + 2160), v1659, &v2459)) {
            uint64_t v1660 = v2459;
          }
          else {
            uint64_t v1660 = *(void *)(a1 + 2144) + 32 * *(unsigned int *)(a1 + 2160);
          }
          *(void *)(v1660 + 24) = v1650;
          unint64_t v1661 = *(unsigned int *)(v1657 + 16);
          if (v1661 >= *(unsigned int *)(v1657 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v1657 + 8) + 8 * v1661) = v1659;
          ++*(_DWORD *)(v1657 + 16);
          ++v1655;
          v1658 -= 8;
        }
        while (v1658);
        v1655 = (uint64_t *)v1653[1];
      }
      if (v1655 != v1653 + 3) {
        free(v1655);
      }
      uint64_t *v1653 = -8192;
      *(int32x2_t *)(a1 + 2176) = vadd_s32(*(int32x2_t *)(a1 + 2176), (int32x2_t)0x1FFFFFFFFLL);
    }
    if (sub_1CC871168((uint64_t)&v2449, v1487))
    {
      v1662 = v2452;
      int v1663 = v2453;
      v1664 = &v2452[8 * v2453];
      if (v2453)
      {
        uint64_t v1665 = 8 * v2453;
        while (*(void *)v1662 != v1487)
        {
          v1662 += 8;
          v1665 -= 8;
          if (!v1665)
          {
            v1662 = &v2452[8 * v2453];
            break;
          }
        }
      }
      if (v1664 != v1662 + 8)
      {
        memmove(v1662, v1662 + 8, v1664 - (v1662 + 8));
        int v1663 = v2453;
      }
      LODWORD(v2453) = v1663 - 1;
    }
    v1666 = (char *)v2426[1];
    uint64_t v1667 = HIDWORD(v2427);
    if (v2426[1] != v2426[0])
    {
      unsigned int v1671 = v2427;
      goto LABEL_3336;
    }
    if (!HIDWORD(v2427))
    {
LABEL_3333:
      unsigned int v1671 = v2427;
      if (HIDWORD(v2427) < v2427)
      {
        ++HIDWORD(v2427);
        *((void *)v2426[1] + v1667) = v1487;
        goto LABEL_3149;
      }
LABEL_3336:
      if (3 * v1671 <= 4 * (HIDWORD(v2427) - v2428))
      {
        if (v1671 >= 0x40) {
          v1671 *= 2;
        }
        else {
          unsigned int v1671 = 128;
        }
      }
      else if (v1671 - HIDWORD(v2427) >= v1671 >> 3)
      {
        goto LABEL_3338;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v2426, v1671);
      unsigned int v1671 = v2427;
      v1666 = (char *)v2426[1];
LABEL_3338:
      unsigned int v1672 = v1671 - 1;
      unsigned int v1673 = (v1671 - 1) & ((v1487 >> 4) ^ (v1487 >> 9));
      v1674 = &v1666[8 * v1673];
      uint64_t v1675 = *(void *)v1674;
      if (*(void *)v1674 == -1)
      {
        v1676 = 0;
LABEL_3350:
        if (v1676) {
          v1680 = v1676;
        }
        else {
          v1680 = (uint64_t *)v1674;
        }
        if (*v1680 != v1487)
        {
          if (*v1680 == -2) {
            --v2428;
          }
          else {
            ++HIDWORD(v2427);
          }
          uint64_t *v1680 = v1487;
        }
      }
      else
      {
        v1676 = 0;
        int v1677 = 1;
        while (v1675 != v1487)
        {
          if (v1676) {
            BOOL v1678 = 0;
          }
          else {
            BOOL v1678 = v1675 == -2;
          }
          if (v1678) {
            v1676 = (uint64_t *)v1674;
          }
          unsigned int v1679 = v1673 + v1677++;
          unsigned int v1673 = v1679 & v1672;
          v1674 = &v1666[8 * (v1679 & v1672)];
          uint64_t v1675 = *(void *)v1674;
          if (*(void *)v1674 == -1) {
            goto LABEL_3350;
          }
        }
      }
      goto LABEL_3149;
    }
    v1668 = 0;
    uint64_t v1669 = 8 * HIDWORD(v2427);
    v1670 = (uint64_t *)v2426[1];
    while (*v1670 != v1487)
    {
      if (*v1670 == -2) {
        v1668 = v1670;
      }
      ++v1670;
      v1669 -= 8;
      if (!v1669)
      {
        if (!v1668) {
          goto LABEL_3333;
        }
        uint64_t *v1668 = v1487;
        --v2428;
        break;
      }
    }
LABEL_3149:
    uint64_t v1486 = *(unsigned int *)(a1 + 4160);
  }
  while (v1486);
LABEL_3379:
  if (v2426[1] == v2426[0]) {
    v1686 = (uint64_t *)((char *)&v2427 + 4);
  }
  else {
    v1686 = &v2427;
  }
  uint64_t v1687 = *(unsigned int *)v1686;
  if (v1687)
  {
    uint64_t v1688 = 8 * v1687;
    v1689 = (uint64_t *)v2426[1];
    while ((unint64_t)*v1689 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v1689;
      v1688 -= 8;
      if (!v1688) {
        goto LABEL_3390;
      }
    }
  }
  else
  {
    v1689 = (uint64_t *)v2426[1];
  }
  if (v1689 != (uint64_t *)((char *)v2426[1] + 8 * v1687)) {
    sub_1CC871B3C(a1, *v1689, a2);
  }
LABEL_3390:
  v1690 = (void *)v2468;
  if ((void)v2468)
  {
    do
    {
      v1691 = (void *)*v1690;
      operator delete(v1690);
      v1690 = v1691;
    }
    while (v1691);
  }
  v1692 = (void *)v2467;
  *(void *)&long long v2467 = 0;
  if (v1692) {
    operator delete(v1692);
  }
  if (v2426[1] != v2426[0]) {
    free(v2426[1]);
  }
  v2426[0] = &v2427;
  v2426[1] = (void *)0x1000000000;
  int v1693 = v2453;
  if (v2453)
  {
    v1694 = (uint64_t *)v2452;
    v1695 = (uint64_t *)&v2452[8 * v2453];
    do
    {
      uint64_t v1696 = *v1694;
      if (sub_1CD10AB34(*v1694, (uint64_t)v2412, *(int **)(a1 + 4592), 1))
      {
        while (1)
        {
          uint64_t v1696 = *(void *)(v1696 + 8);
          if (!v1696) {
            break;
          }
          uint64_t v1697 = *(void *)(v1696 + 24);
          if (v1697 && *(unsigned char *)(v1697 + 16) == 89)
          {
            uint64_t v1698 = *(void *)(a2 + 536);
            uint64_t v1699 = *(void *)(a2 + 528);
            if (v1698 == v1699)
            {
              uint64_t v1700 = *(unsigned int *)(a2 + 548);
              v1701 = (void *)(v1698 + 8 * v1700);
              if (v1700)
              {
                uint64_t v1702 = 0;
                while (*(void *)(v1698 + v1702) != v1697)
                {
                  v1702 += 8;
                  if (8 * v1700 == v1702) {
                    goto LABEL_3421;
                  }
                }
                v1701 = (void *)(v1698 + v1702);
              }
LABEL_3421:
              uint64_t v1699 = *(void *)(a2 + 536);
            }
            else
            {
              uint64_t v1703 = *(unsigned int *)(a2 + 544);
              int v1704 = v1703 - 1;
              unsigned int v1705 = (v1703 - 1) & ((v1697 >> 4) ^ (v1697 >> 9));
              v1701 = (void *)(v1698 + 8 * v1705);
              uint64_t v1706 = *v1701;
              if (*v1701 == -1)
              {
                v1707 = 0;
LABEL_3429:
                if (v1707) {
                  v1701 = v1707;
                }
                LODWORD(v1700) = *(_DWORD *)(a2 + 548);
                v1712 = (void *)(v1698 + 8 * v1703);
                if (*v1701 != v1697) {
                  v1701 = v1712;
                }
              }
              else
              {
                v1707 = 0;
                int v1708 = 1;
                while (v1706 != v1697)
                {
                  if (v1707) {
                    BOOL v1709 = 0;
                  }
                  else {
                    BOOL v1709 = v1706 == -2;
                  }
                  if (v1709) {
                    v1707 = v1701;
                  }
                  unsigned int v1710 = v1705 + v1708++;
                  unsigned int v1705 = v1710 & v1704;
                  v1701 = (void *)(v1698 + 8 * (v1710 & v1704));
                  uint64_t v1706 = *v1701;
                  if (*v1701 == -1) {
                    goto LABEL_3429;
                  }
                }
                LODWORD(v1700) = *(_DWORD *)(a2 + 548);
              }
            }
            if (v1698 == v1699) {
              unsigned int v1711 = v1700;
            }
            else {
              unsigned int v1711 = *(_DWORD *)(a2 + 544);
            }
            if (v1701 == (void *)(v1698 + 8 * v1711))
            {
              if (LODWORD(v2426[1]) >= (unint64_t)HIDWORD(v2426[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v2426[0] + LODWORD(v2426[1])) = v1697;
              ++LODWORD(v2426[1]);
            }
          }
        }
      }
      ++v1694;
    }
    while (v1694 != v1695);
    v1713 = (uint64_t *)v2426[0];
    int v1693 = (int)v2426[1];
  }
  else
  {
    v1713 = &v2427;
  }
  sub_1CC86F684(&v2449, v1713, &v1713[v1693]);
  if (v2426[0] != &v2427) {
    free(v2426[0]);
  }
  v2426[0] = &v2427;
  v2426[1] = (void *)0xA00000000;
  uint64_t v1714 = *(void *)(a1 + 4592);
  int v1715 = *(_DWORD *)v1714;
  if (*(_DWORD *)v1714 <= 1u)
  {
    if (v1715)
    {
      uint64_t v2095 = v1714 + 8;
      uint64_t v2096 = 16;
    }
    else
    {
      uint64_t v2095 = *(void *)(v1714 + 8);
      uint64_t v2096 = *(unsigned int *)(v1714 + 16);
    }
    uint64_t v1718 = v2095 + 32 * v2096;
    uint64_t v1717 = v1718;
    goto LABEL_3448;
  }
  if (v1715)
  {
    uint64_t v1716 = v1714 + 8;
    uint64_t v1717 = v1714 + 520;
LABEL_3443:
    int v1715 = *(_DWORD *)v1714 & 1;
    uint64_t v1718 = v1716;
    while (*(void *)v1718 == -4096 || *(void *)v1718 == -8192)
    {
      v1718 += 32;
      if (v1718 == v1717)
      {
        uint64_t v1718 = v1717;
        break;
      }
    }
LABEL_3448:
    if (v1715)
    {
      uint64_t v1716 = v1714 + 8;
      uint64_t v1714 = 16;
      goto LABEL_3452;
    }
    uint64_t v1716 = *(void *)(v1714 + 8);
    LODWORD(v1714) = *(_DWORD *)(v1714 + 16);
  }
  else
  {
    uint64_t v1716 = *(void *)(v1714 + 8);
    uint64_t v2300 = *(unsigned int *)(v1714 + 16);
    if (v2300)
    {
      uint64_t v1717 = v1716 + 32 * v2300;
      goto LABEL_3443;
    }
    LODWORD(v1714) = 0;
    uint64_t v1717 = v1716;
    uint64_t v1718 = v1716;
  }
  uint64_t v1714 = v1714;
LABEL_3452:
  uint64_t v2414 = v1716 + 32 * v1714;
  if (v1718 != v2414)
  {
    while (2)
    {
      uint64_t v1719 = *(void *)v1718;
      for (iuint64_t i = *(void *)(*(void *)v1718 + 8); ii; iuint64_t i = *(void *)(ii + 8))
      {
        uint64_t v1721 = *(void *)(ii + 24);
        if (v1721)
        {
          if (*(unsigned char *)(v1721 + 16) == 60 && *(void *)(*(void *)(v1721 + 40) + 56) == v2398)
          {
            uint64_t v1722 = *(void *)(v1721 + 8);
            if (v1722)
            {
              unsigned int v1723 = v2426[1];
              do
              {
                if (v1723 >= HIDWORD(v2426[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v1724 = (char *)v2426[0] + 16 * v1723;
                void *v1724 = *(void *)(v1722 + 24);
                v1724[1] = 0;
                unsigned int v1723 = ++LODWORD(v2426[1]);
                uint64_t v1722 = *(void *)(v1722 + 8);
              }
              while (v1722);
            }
          }
        }
      }
      *(void *)&long long v2459 = v2461;
      *((void *)&v2459 + 1) = v2461;
      *(void *)&long long v2460 = 16;
      DWORD2(v2460) = 0;
      unsigned int v1725 = v2426[1];
      if (LODWORD(v2426[1]))
      {
        while (1)
        {
          v1726 = (char *)v2426[0] + 16 * v1725;
          uint64_t v1728 = *((void *)v1726 - 2);
          uint64_t v1727 = *((void *)v1726 - 1);
          LODWORD(v2426[1]) = v1725 - 1;
          uint64_t v1729 = *((void *)&v2459 + 1);
          uint64_t v1730 = DWORD1(v2460);
          if (*((void *)&v2459 + 1) == (void)v2459)
          {
            if (DWORD1(v2460))
            {
              v1731 = 0;
              uint64_t v1732 = 8 * DWORD1(v2460);
              v1733 = (uint64_t *)*((void *)&v2459 + 1);
              while (*v1733 != v1728)
              {
                if (*v1733 == -2) {
                  v1731 = v1733;
                }
                ++v1733;
                v1732 -= 8;
                if (!v1732)
                {
                  if (!v1731) {
                    goto LABEL_3474;
                  }
                  uint64_t *v1731 = v1728;
                  --DWORD2(v2460);
                  if (v1728) {
                    goto LABEL_3499;
                  }
                  goto LABEL_3506;
                }
              }
              goto LABEL_3532;
            }
LABEL_3474:
            unsigned int v1734 = v2460;
            if (DWORD1(v2460) < v2460)
            {
              ++DWORD1(v2460);
              *(void *)(*((void *)&v2459 + 1) + 8 * v1730) = v1728;
              if (!v1728) {
                goto LABEL_3506;
              }
              goto LABEL_3499;
            }
          }
          else
          {
            unsigned int v1734 = v2460;
          }
          if (3 * v1734 <= 4 * (DWORD1(v2460) - DWORD2(v2460)))
          {
            if (v1734 >= 0x40) {
              v1734 *= 2;
            }
            else {
              unsigned int v1734 = 128;
            }
          }
          else if (v1734 - DWORD1(v2460) >= v1734 >> 3)
          {
            goto LABEL_3480;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v2459, v1734);
          unsigned int v1734 = v2460;
          uint64_t v1729 = *((void *)&v2459 + 1);
LABEL_3480:
          unsigned int v1735 = v1734 - 1;
          unsigned int v1736 = (v1734 - 1) & ((v1728 >> 4) ^ (v1728 >> 9));
          v1737 = (uint64_t *)(v1729 + 8 * v1736);
          uint64_t v1738 = *v1737;
          if (*v1737 != -1)
          {
            v1739 = 0;
            int v1740 = 1;
            while (v1738 != v1728)
            {
              if (v1739) {
                BOOL v1741 = 0;
              }
              else {
                BOOL v1741 = v1738 == -2;
              }
              if (v1741) {
                v1739 = v1737;
              }
              unsigned int v1742 = v1736 + v1740++;
              unsigned int v1736 = v1742 & v1735;
              v1737 = (uint64_t *)(v1729 + 8 * (v1742 & v1735));
              uint64_t v1738 = *v1737;
              if (*v1737 == -1) {
                goto LABEL_3492;
              }
            }
            goto LABEL_3532;
          }
          v1739 = 0;
LABEL_3492:
          if (v1739) {
            v1743 = v1739;
          }
          else {
            v1743 = v1737;
          }
          if (*v1743 == v1728) {
            goto LABEL_3532;
          }
          if (*v1743 == -2) {
            --DWORD2(v2460);
          }
          else {
            ++DWORD1(v2460);
          }
          uint64_t *v1743 = v1728;
          if (!v1728)
          {
LABEL_3506:
            if (sub_1CD10AB34(v1728, (uint64_t)v2412, *(int **)(a1 + 4592), 1))
            {
              uint64_t v1746 = *(void *)v1728;
              if (sub_1CC872D30(*(void *)v1728))
              {
                unsigned int v1747 = *(_DWORD *)(v1746 + 8);
                if ((v1747 & 0xFE) == 0x12) {
                  unsigned int v1747 = *(_DWORD *)(**(void **)(v1746 + 16) + 8);
                }
                if (v1747 < 0x100) {
                  goto LABEL_3519;
                }
                unsigned int v1748 = v1747 >> 8;
                uint64_t v1749 = *(unsigned int *)(v2388 + 512);
                uint64_t v1750 = *(void *)(v2388 + 504);
                if (v1749)
                {
                  uint64_t v1750 = *(void *)(v2388 + 504);
                  unint64_t v1751 = *(unsigned int *)(v2388 + 512);
                  do
                  {
                    unint64_t v1752 = v1751 >> 1;
                    uint64_t v1753 = v1750 + 16 * (v1751 >> 1);
                    unsigned int v1754 = *(_DWORD *)(v1753 + 8);
                    uint64_t v1755 = v1753 + 16;
                    v1751 += ~(v1751 >> 1);
                    if (v1754 < v1748) {
                      uint64_t v1750 = v1755;
                    }
                    else {
                      unint64_t v1751 = v1752;
                    }
                  }
                  while (v1751);
                }
                if (v1750 == *(void *)(v2388 + 504) + 16 * v1749 || *(_DWORD *)(v1750 + 8) != v1748) {
LABEL_3519:
                }
                  uint64_t v1750 = *(void *)(v2388 + 504);
                LODWORD(v1756) = *(_DWORD *)(v1750 + 4) >> 3;
              }
              else
              {
                unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v1746);
                if (v1759 == 1) {
                unint64_t v1756 = PrimitiveSizeInBits >> 3;
                }
              }
              *(void *)&long long v2467 = v1719;
              *((void *)&v2467 + 1) = v1728;
              *(void *)&long long v2468 = __PAIR64__(v1756, v1727);
              unsigned int v1761 = *(_DWORD *)(a1 + 8);
              unint64_t v1762 = *(void *)a1;
              if (v1761 >= *(_DWORD *)(a1 + 12))
              {
                BOOL v1765 = v1762 + 24 * v1761 > (unint64_t)&v2467;
                if (v1762 > (unint64_t)&v2467 || !v1765) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v1763 = v1762 + 24 * *(unsigned int *)(a1 + 8);
              long long v1764 = v2467;
              *(void *)(v1763 + 16) = v2468;
              *(_OWORD *)uint64_t v1763 = v1764;
              ++*(_DWORD *)(a1 + 8);
              goto LABEL_3532;
            }
            goto LABEL_3521;
          }
LABEL_3499:
          if (*(unsigned char *)(v1728 + 16) != 62) {
            goto LABEL_3506;
          }
          uint64_t v1744 = sub_1CD10C828(v1728, v2412);
          if ((v1744 & 0xFFFF00000000) != 0) {
            int v1745 = 0;
          }
          else {
            int v1745 = v1744;
          }
          if ((v1744 & 0xFFFF00000000) != 0) {
            goto LABEL_3532;
          }
          LODWORD(v1727) = v1745 + v1727;
LABEL_3521:
          uint64_t v1757 = *(void *)(v1728 + 8);
          if (v1757)
          {
            unsigned int v1725 = v2426[1];
            do
            {
              if (v1725 >= HIDWORD(v2426[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1758 = (char *)v2426[0] + 16 * v1725;
              void *v1758 = *(void *)(v1757 + 24);
              v1758[1] = v1727;
              unsigned int v1725 = ++LODWORD(v2426[1]);
              uint64_t v1757 = *(void *)(v1757 + 8);
            }
            while (v1757);
            goto LABEL_3533;
          }
LABEL_3532:
          unsigned int v1725 = v2426[1];
LABEL_3533:
          if (!v1725)
          {
            if (*((void *)&v2459 + 1) != (void)v2459) {
              free(*((void **)&v2459 + 1));
            }
            break;
          }
        }
      }
      uint64_t v1766 = v1718 + 32;
      uint64_t v1718 = v1717;
      if (v1766 != v1717)
      {
        uint64_t v1718 = v1766;
        while ((*(void *)v1718 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v1718 += 32;
          if (v1718 == v1717)
          {
            uint64_t v1718 = v1717;
            break;
          }
        }
      }
      if (v1718 != v2414) {
        continue;
      }
      break;
    }
    if (v2426[0] != &v2427) {
      free(v2426[0]);
    }
  }
  int v2404 = v2334 >> 1;
  unint64_t v1767 = *(unsigned int *)(a1 + 8);
  unint64_t v1768 = 126 - 2 * __clz(v1767);
  if (v1767) {
    uint64_t v1769 = v1768;
  }
  else {
    uint64_t v1769 = 0;
  }
  sub_1CC873704(*(void *)a1, *(void *)a1 + 24 * v1767, v1769, 1);
  LODWORD(v2419) = 0;
  unsigned int v1771 = *(_DWORD *)(a1 + 8);
  if (v1771)
  {
    int v1772 = 0;
    int v1773 = 0;
    uint64_t v1774 = 0;
    __int32 v1775 = 0;
    unsigned int v1776 = 0;
    unint64_t v1777 = *(void *)a1;
    uint64_t v1778 = *(void *)a1 + 24 * v1771;
    char v1779 = v2449 | (v2451 != 0);
    if (v2449) {
      v1780 = &v2450;
    }
    else {
      v1780 = v2450;
    }
    if (v2449) {
      int v1781 = 31;
    }
    else {
      int v1781 = v2451 - 1;
    }
    uint64_t v2415 = *(void *)a1 + 24 * v1771;
    while (1)
    {
      uint64_t v1783 = *(void *)v1777;
      v1782 = *(llvm::Type ***)(v1777 + 8);
      int v1784 = *(_DWORD *)(v1777 + 16);
      if (v1774 != *(void *)v1777 || v1772 != v1784)
      {
        v1786 = *v1782;
        if ((*((_DWORD *)*v1782 + 2) & 0xFE) == 0x12) {
          v1786 = (llvm::Type *)**((void **)v1786 + 2);
        }
        v1770.i32[0] = v1775;
        uint8x8_t v1787 = (uint8x8_t)vcnt_s8(v1770);
        v1787.i16[0] = vaddlv_u8(v1787);
        int v1788 = v1773 + ((v1787.i32[0] * v1776) >> 4);
        int v1789 = llvm::Type::getPrimitiveSizeInBits(v1786);
        int v1773 = v1788;
        __int32 v1775 = 0;
        unsigned int v1776 = (v1789 + 15) >> 4;
        uint64_t v1774 = v1783;
        int v1772 = v1784;
        uint64_t v1778 = v2415;
      }
      v1790 = v1782[1];
      if (v1790) {
        break;
      }
      LODWORD(v1797) = 0;
LABEL_3595:
      v1775 |= v1797;
      v1777 += 24;
      if (v1777 == v1778) {
        goto LABEL_3598;
      }
    }
    uint64_t v1791 = 0;
    while (1)
    {
      uint64_t v1792 = *((void *)v1790 + 3);
      if ((v1779 & 1) == 0) {
        goto LABEL_3580;
      }
      unsigned int v1793 = ((v1792 >> 4) ^ (v1792 >> 9)) & v1781;
      uint64_t v1794 = v1780[v1793];
      if (v1792 != v1794) {
        break;
      }
LABEL_3579:
      uint64_t v1797 = v1791;
LABEL_3592:
      v1790 = (llvm::Type *)*((void *)v1790 + 1);
      uint64_t v1791 = v1797;
      if (!v1790) {
        goto LABEL_3595;
      }
    }
    int v1795 = 1;
    while (v1794 != -4096)
    {
      unsigned int v1796 = v1793 + v1795++;
      unsigned int v1793 = v1796 & v1781;
      uint64_t v1794 = v1780[v1793];
      if (v1792 == v1794) {
        goto LABEL_3579;
      }
    }
LABEL_3580:
    BOOL v1798 = *(unsigned char *)(v1792 + 16) != 89 || v1792 == 0;
    uint64_t v1797 = ~(-1 << (*(_DWORD *)(v1777 + 20) >> 4));
    if (!v1798)
    {
      uint64_t v1799 = *(void *)(v1792 - 32);
      BOOL v1800 = v1799 && *(unsigned char *)(v1799 + 16) == 16;
      uint64_t v1797 = ~(-1 << (*(_DWORD *)(v1777 + 20) >> 4));
      if (v1800)
      {
        v1801 = (void *)(v1799 + 24);
        if (*(_DWORD *)(v1799 + 32) >= 0x41u) {
          v1801 = (void *)*v1801;
        }
        uint64_t v1797 = (1 << *(_DWORD *)v1801) | v1791;
      }
    }
    goto LABEL_3592;
  }
  unsigned int v1776 = 0;
  __int32 v1775 = 0;
  int v1773 = 0;
LABEL_3598:
  v1770.i32[0] = v1775;
  uint8x8_t v1802 = (uint8x8_t)vcnt_s8(v1770);
  v1802.i16[0] = vaddlv_u8(v1802);
  LODWORD(v2419) = v1773 + ((v1802.i32[0] * v1776) >> 4);
  v1803 = (_DWORD *)(a1 + 1876);
  int v2418 = 0;
  v1804 = (unsigned int *)(a1 + 1872);
  do
  {
    int v1805 = v2453;
    if (!v2453)
    {
      v2426[0] = &v2427;
      v2426[1] = (void *)0x1000000000;
      goto LABEL_3817;
    }
    char v1806 = 0;
    v1807 = (uint64_t *)v2452;
    v1808 = (uint64_t *)&v2452[8 * v2453];
    do
    {
      uint64_t v1809 = *v1807;
      uint64_t v1810 = *(void *)(a1 + 1864);
      uint64_t v1811 = *(void *)(a1 + 1856);
      if (v1810 == v1811)
      {
        uint64_t v1812 = *v1803;
        v1813 = (void *)(v1810 + 8 * v1812);
        if (v1812)
        {
          uint64_t v1814 = 0;
          uint64_t v1815 = 8 * v1812;
          while (*(void *)(v1810 + v1814) != v1809)
          {
            v1814 += 8;
            if (v1815 == v1814) {
              goto LABEL_3619;
            }
          }
          v1813 = (void *)(v1810 + v1814);
        }
LABEL_3619:
        uint64_t v1811 = *(void *)(a1 + 1864);
      }
      else
      {
        uint64_t v1816 = *v1804;
        int v1817 = v1816 - 1;
        unsigned int v1818 = (v1816 - 1) & ((v1809 >> 4) ^ (v1809 >> 9));
        v1813 = (void *)(v1810 + 8 * v1818);
        uint64_t v1819 = *v1813;
        if (*v1813 == -1)
        {
          v1820 = 0;
LABEL_3639:
          if (v1820) {
            v1813 = v1820;
          }
          if (*v1813 != v1809) {
            v1813 = (void *)(v1810 + 8 * v1816);
          }
        }
        else
        {
          v1820 = 0;
          int v1821 = 1;
          while (v1819 != v1809)
          {
            if (v1820) {
              BOOL v1822 = 0;
            }
            else {
              BOOL v1822 = v1819 == -2;
            }
            if (v1822) {
              v1820 = v1813;
            }
            unsigned int v1823 = v1818 + v1821++;
            unsigned int v1818 = v1823 & v1817;
            v1813 = (void *)(v1810 + 8 * (v1823 & v1817));
            uint64_t v1819 = *v1813;
            if (*v1813 == -1) {
              goto LABEL_3639;
            }
          }
        }
      }
      if (v1810 == v1811) {
        v1824 = (unsigned int *)(a1 + 1876);
      }
      else {
        v1824 = (unsigned int *)(a1 + 1872);
      }
      if (v1813 != (void *)(v1810 + 8 * *v1824)) {
        goto LABEL_3761;
      }
      uint64_t v1825 = *(void *)(v1809 + 8);
      if (v1825)
      {
        v1826 = v2450;
        int v1827 = v2451 - 1;
        if (v2449)
        {
          v1826 = &v2450;
          int v1827 = 31;
          goto LABEL_3628;
        }
        if (v2451)
        {
LABEL_3628:
          while (1)
          {
            uint64_t v1828 = *(void *)(v1825 + 24);
            unsigned int v1829 = ((v1828 >> 4) ^ (v1828 >> 9)) & v1827;
            uint64_t v1830 = v1826[v1829];
            if (v1828 != v1830) {
              break;
            }
LABEL_3632:
            uint64_t v1825 = *(void *)(v1825 + 8);
            if (!v1825) {
              goto LABEL_3713;
            }
          }
          int v1831 = 1;
          while (v1830 != -4096)
          {
            unsigned int v1832 = v1829 + v1831++;
            unsigned int v1829 = v1832 & v1827;
            uint64_t v1830 = v1826[v1829];
            if (v1828 == v1830) {
              goto LABEL_3632;
            }
          }
        }
        if ((sub_1CC8720F8(a1, *v1807, (uint64_t)v2412, (llvm::SmallPtrSetImplBase *)&v2444) & 1) == 0)
        {
          int v1833 = *(_DWORD *)(v1809 + 20);
          if ((v1833 & 0x40000000) == 0)
          {
            uint64_t v1834 = v1833 & 0x7FFFFFF;
            uint64_t v1835 = v1809 - 32 * v1834;
            if (!v1834) {
              goto LABEL_3680;
            }
            goto LABEL_3644;
          }
          uint64_t v1835 = *(void *)(v1809 - 8);
          uint64_t v1834 = v1833 & 0x7FFFFFF;
          if (v1834)
          {
LABEL_3644:
            uint64_t v1836 = v1835 + 32 * v1834;
            do
            {
              uint64_t v1837 = *(void *)v1835;
              if (*(void *)v1835 && *(unsigned __int8 *)(*(void *)v1835 + 16) >= 0x1Cu)
              {
                uint64_t v1839 = *(void *)(a1 + 1864);
                uint64_t v1840 = *(void *)(a1 + 1856);
                if (v1839 == v1840)
                {
                  uint64_t v1841 = *v1803;
                  v1842 = (void *)(v1839 + 8 * v1841);
                  if (v1841)
                  {
                    uint64_t v1843 = 0;
                    uint64_t v1844 = 8 * v1841;
                    while (*(void *)(v1839 + v1843) != v1837)
                    {
                      v1843 += 8;
                      if (v1844 == v1843) {
                        goto LABEL_3668;
                      }
                    }
                    v1842 = (void *)(v1839 + v1843);
                  }
LABEL_3668:
                  uint64_t v1840 = *(void *)(a1 + 1864);
                }
                else
                {
                  uint64_t v1845 = *v1804;
                  int v1846 = v1845 - 1;
                  unsigned int v1847 = (v1845 - 1) & ((v1837 >> 4) ^ (v1837 >> 9));
                  v1842 = (void *)(v1839 + 8 * v1847);
                  uint64_t v1848 = *v1842;
                  if (*v1842 == -1)
                  {
                    v1849 = 0;
LABEL_3676:
                    if (v1849) {
                      v1842 = v1849;
                    }
                    if (*v1842 != v1837) {
                      v1842 = (void *)(v1839 + 8 * v1845);
                    }
                  }
                  else
                  {
                    v1849 = 0;
                    int v1850 = 1;
                    while (v1848 != v1837)
                    {
                      if (v1849) {
                        BOOL v1851 = 0;
                      }
                      else {
                        BOOL v1851 = v1848 == -2;
                      }
                      if (v1851) {
                        v1849 = v1842;
                      }
                      unsigned int v1852 = v1847 + v1850++;
                      unsigned int v1847 = v1852 & v1846;
                      v1842 = (void *)(v1839 + 8 * (v1852 & v1846));
                      uint64_t v1848 = *v1842;
                      if (*v1842 == -1) {
                        goto LABEL_3676;
                      }
                    }
                  }
                }
                v1853 = (unsigned int *)(v1839 == v1840 ? a1 + 1876 : a1 + 1872);
                if (v1842 == (void *)(v1839 + 8 * *v1853)) {
                  goto LABEL_3713;
                }
              }
              v1835 += 32;
            }
            while (v1835 != v1836);
          }
LABEL_3680:
          uint64_t v1854 = *(void *)(a1 + 1864);
          uint64_t v1855 = *(unsigned int *)(a1 + 1876);
          if (v1854 == *(void *)(a1 + 1856))
          {
            if (v1855)
            {
              v1856 = 0;
              uint64_t v1857 = 8 * v1855;
              v1858 = *(uint64_t **)(a1 + 1864);
              while (*v1858 != v1809)
              {
                if (*v1858 == -2) {
                  v1856 = v1858;
                }
                ++v1858;
                v1857 -= 8;
                if (!v1857)
                {
                  if (!v1856) {
                    goto LABEL_3688;
                  }
                  uint64_t *v1856 = v1809;
                  --*(_DWORD *)(a1 + 1880);
                  goto LABEL_3712;
                }
              }
              goto LABEL_3712;
            }
LABEL_3688:
            unsigned int v1859 = *v1804;
            if (v1855 < *v1804)
            {
              _DWORD *v1803 = v1855 + 1;
              *(void *)(v1854 + 8 * v1855) = v1809;
LABEL_3712:
              char v1806 = 1;
              goto LABEL_3713;
            }
          }
          else
          {
            unsigned int v1859 = *v1804;
          }
          if (3 * v1859 <= 4 * ((int)v1855 - *(_DWORD *)(a1 + 1880)))
          {
            if (v1859 >= 0x40) {
              v1859 *= 2;
            }
            else {
              unsigned int v1859 = 128;
            }
          }
          else if (v1859 - v1855 >= v1859 >> 3)
          {
            goto LABEL_3693;
          }
          llvm::SmallPtrSetImplBase::Grow(v2409, v1859);
          unsigned int v1859 = *(_DWORD *)(a1 + 1872);
          uint64_t v1854 = *(void *)(a1 + 1864);
LABEL_3693:
          unsigned int v1860 = v1859 - 1;
          unsigned int v1861 = (v1859 - 1) & ((v1809 >> 4) ^ (v1809 >> 9));
          v1862 = (uint64_t *)(v1854 + 8 * v1861);
          uint64_t v1863 = *v1862;
          if (*v1862 == -1)
          {
            v1864 = 0;
LABEL_3705:
            if (v1864) {
              v1868 = v1864;
            }
            else {
              v1868 = v1862;
            }
            if (*v1868 != v1809)
            {
              if (*v1868 == -2) {
                --*(_DWORD *)(a1 + 1880);
              }
              else {
                ++*v1803;
              }
              uint64_t *v1868 = v1809;
            }
          }
          else
          {
            v1864 = 0;
            int v1865 = 1;
            while (v1863 != v1809)
            {
              if (v1864) {
                BOOL v1866 = 0;
              }
              else {
                BOOL v1866 = v1863 == -2;
              }
              if (v1866) {
                v1864 = v1862;
              }
              unsigned int v1867 = v1861 + v1865++;
              unsigned int v1861 = v1867 & v1860;
              v1862 = (uint64_t *)(v1854 + 8 * (v1867 & v1860));
              uint64_t v1863 = *v1862;
              if (*v1862 == -1) {
                goto LABEL_3705;
              }
            }
          }
          goto LABEL_3712;
        }
      }
LABEL_3713:
      uint64_t v1869 = *(void *)v1809;
      if (*(unsigned char *)(*(void *)v1809 + 8) == 16)
      {
        uint64_t v1870 = *(unsigned int *)(v1869 + 12);
        if (v1870)
        {
          uint64_t v1871 = *(void *)(v1869 + 16);
          while (1)
          {
            int v1872 = *(_DWORD *)(*(void *)v1871 + 8) >> 8;
            BOOL v1873 = v1872 == 32 || v1872 == 64;
            BOOL v1874 = v1873;
            if (*(_DWORD *)(*(void *)v1871 + 8) != 13 || !v1874) {
              break;
            }
            v1871 += 8;
            if (!--v1870) {
              goto LABEL_3761;
            }
          }
          uint64_t v1876 = *(void *)(a1 + 1864);
          uint64_t v1877 = *(unsigned int *)(a1 + 1876);
          if (v1876 == *(void *)(a1 + 1856))
          {
            if (v1877)
            {
              v1878 = 0;
              uint64_t v1879 = 8 * v1877;
              v1880 = *(uint64_t **)(a1 + 1864);
              while (*v1880 != v1809)
              {
                if (*v1880 == -2) {
                  v1878 = v1880;
                }
                ++v1880;
                v1879 -= 8;
                if (!v1879)
                {
                  if (!v1878) {
                    goto LABEL_3736;
                  }
                  uint64_t *v1878 = v1809;
                  --*(_DWORD *)(a1 + 1880);
                  goto LABEL_3760;
                }
              }
              goto LABEL_3760;
            }
LABEL_3736:
            unsigned int v1881 = *v1804;
            if (v1877 < *v1804)
            {
              _DWORD *v1803 = v1877 + 1;
              *(void *)(v1876 + 8 * v1877) = v1809;
LABEL_3760:
              char v1806 = 1;
              goto LABEL_3761;
            }
          }
          else
          {
            unsigned int v1881 = *v1804;
          }
          if (3 * v1881 <= 4 * ((int)v1877 - *(_DWORD *)(a1 + 1880)))
          {
            if (v1881 >= 0x40) {
              v1881 *= 2;
            }
            else {
              unsigned int v1881 = 128;
            }
          }
          else if (v1881 - v1877 >= v1881 >> 3)
          {
            goto LABEL_3741;
          }
          llvm::SmallPtrSetImplBase::Grow(v2409, v1881);
          unsigned int v1881 = *(_DWORD *)(a1 + 1872);
          uint64_t v1876 = *(void *)(a1 + 1864);
LABEL_3741:
          unsigned int v1882 = v1881 - 1;
          unsigned int v1883 = (v1881 - 1) & ((v1809 >> 4) ^ (v1809 >> 9));
          v1884 = (uint64_t *)(v1876 + 8 * v1883);
          uint64_t v1885 = *v1884;
          if (*v1884 == -1)
          {
            v1886 = 0;
LABEL_3753:
            if (v1886) {
              v1890 = v1886;
            }
            else {
              v1890 = v1884;
            }
            if (*v1890 != v1809)
            {
              if (*v1890 == -2) {
                --*(_DWORD *)(a1 + 1880);
              }
              else {
                ++*v1803;
              }
              uint64_t *v1890 = v1809;
            }
          }
          else
          {
            v1886 = 0;
            int v1887 = 1;
            while (v1885 != v1809)
            {
              if (v1886) {
                BOOL v1888 = 0;
              }
              else {
                BOOL v1888 = v1885 == -2;
              }
              if (v1888) {
                v1886 = v1884;
              }
              unsigned int v1889 = v1883 + v1887++;
              unsigned int v1883 = v1889 & v1882;
              v1884 = (uint64_t *)(v1876 + 8 * (v1889 & v1882));
              uint64_t v1885 = *v1884;
              if (*v1884 == -1) {
                goto LABEL_3753;
              }
            }
          }
          goto LABEL_3760;
        }
      }
LABEL_3761:
      ++v1807;
    }
    while (v1807 != v1808);
  }
  while ((v1806 & 1) != 0);
  v1891 = v2452;
  int v1805 = v2453;
  v2426[0] = &v2427;
  v2426[1] = (void *)0x1000000000;
  if (!v2453)
  {
LABEL_3817:
    v1911 = &v2427;
    goto LABEL_3818;
  }
  v1892 = &v2452[8 * v2453];
  do
  {
    uint64_t v1893 = *(void *)v1891;
    if (*(unsigned char *)(*(void *)v1891 + 16) == 62)
    {
      uint64_t v1894 = *(void *)(a1 + 1864);
      uint64_t v1895 = *(void *)(a1 + 1856);
      if (v1894 == v1895)
      {
        uint64_t v1896 = *v1803;
        v1897 = (void *)(v1894 + 8 * v1896);
        if (v1896)
        {
          uint64_t v1898 = 0;
          uint64_t v1899 = 8 * v1896;
          while (*(void *)(v1894 + v1898) != v1893)
          {
            v1898 += 8;
            if (v1899 == v1898) {
              goto LABEL_3797;
            }
          }
          v1897 = (void *)(v1894 + v1898);
        }
LABEL_3797:
        uint64_t v1895 = *(void *)(a1 + 1864);
      }
      else
      {
        uint64_t v1900 = *v1804;
        int v1901 = v1900 - 1;
        unsigned int v1902 = (v1900 - 1) & ((v1893 >> 4) ^ (v1893 >> 9));
        v1897 = (void *)(v1894 + 8 * v1902);
        uint64_t v1903 = *v1897;
        if (*v1897 == -1)
        {
          v1904 = 0;
LABEL_3805:
          if (v1904) {
            v1897 = v1904;
          }
          if (*v1897 != v1893) {
            v1897 = (void *)(v1894 + 8 * v1900);
          }
        }
        else
        {
          v1904 = 0;
          int v1905 = 1;
          while (v1903 != v1893)
          {
            if (v1904) {
              BOOL v1906 = 0;
            }
            else {
              BOOL v1906 = v1903 == -2;
            }
            if (v1906) {
              v1904 = v1897;
            }
            unsigned int v1907 = v1902 + v1905++;
            unsigned int v1902 = v1907 & v1901;
            v1897 = (void *)(v1894 + 8 * (v1907 & v1901));
            uint64_t v1903 = *v1897;
            if (*v1897 == -1) {
              goto LABEL_3805;
            }
          }
        }
      }
      if (v1894 == v1895) {
        v1908 = (unsigned int *)(a1 + 1876);
      }
      else {
        v1908 = (unsigned int *)(a1 + 1872);
      }
      if (v1897 == (void *)(v1894 + 8 * *v1908))
      {
        for (juint64_t j = *(void *)(v1893 + 8); jj; juint64_t j = *(void *)(jj + 8))
        {
          uint64_t v1910 = *(void *)(jj + 24);
          if (sub_1CD10AB34(v1910, (uint64_t)v2412, *(int **)(a1 + 4592), 1))
          {
            if (LODWORD(v2426[1]) >= (unint64_t)HIDWORD(v2426[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v2426[0] + LODWORD(v2426[1])) = v1910;
            ++LODWORD(v2426[1]);
          }
        }
      }
    }
    v1891 += 8;
  }
  while (v1891 != v1892);
  v1911 = (uint64_t *)v2426[0];
  int v1805 = (int)v2426[1];
LABEL_3818:
  sub_1CC86F684(&v2449, v1911, &v1911[v1805]);
  if (v2426[0] != &v2427) {
    free(v2426[0]);
  }
  uint64_t v1912 = *(void *)(a1 + 4576);
  uint64_t v2416 = *(void *)(a1 + 4568);
  if (v1912 != v2416)
  {
LABEL_3821:
    uint64_t v1913 = *(void *)(v1912 - 8);
    v1912 -= 8;
    uint64_t v1914 = v1913 + 40;
    for (kuint64_t k = *(void *)(v1913 + 48); ; kuint64_t k = *(void *)(kk + 8))
    {
      if (kk == v1914)
      {
        if (v1912 == v2416) {
          goto LABEL_3856;
        }
        goto LABEL_3821;
      }
      v1916 = (void *)(kk - 24);
      if (!kk) {
        v1916 = 0;
      }
      if (v2449)
      {
        int v1917 = 32;
        v1918 = &v2450;
      }
      else
      {
        int v1917 = v2451;
        if (!v2451) {
          continue;
        }
        v1918 = v2450;
      }
      unsigned int v1919 = (v1916 >> 4) ^ (v1916 >> 9);
      int v1920 = v1917 - 1;
      unsigned int v1921 = v1920 & v1919;
      v1922 = (void *)v1918[v1920 & v1919];
      if (v1916 == v1922) {
        break;
      }
      int v1923 = 1;
      while (v1922 != (void *)-4096)
      {
        unsigned int v1924 = v1921 + v1923++;
        unsigned int v1921 = v1924 & v1920;
        v1922 = (void *)v1918[v1921];
        if (v1916 == v1922) {
          goto LABEL_3833;
        }
      }
LABEL_3851:
      ;
    }
LABEL_3833:
    v2426[0] = v1916;
    if (*(unsigned char *)(a1 + 784))
    {
      int v1925 = 32;
      uint64_t v1926 = a1 + 792;
LABEL_3836:
      int v1927 = v1925 - 1;
      unsigned int v1928 = v1927 & v1919;
      v1929 = (void *)(v1926 + 8 * v1928);
      v1930 = (void *)*v1929;
      if (v1916 == (void *)*v1929) {
        goto LABEL_3851;
      }
      v1931 = 0;
      int v1932 = 1;
      while (v1930 != (void *)-4096)
      {
        if (v1931) {
          BOOL v1933 = 0;
        }
        else {
          BOOL v1933 = v1930 == (void *)-8192;
        }
        if (v1933) {
          v1931 = v1929;
        }
        unsigned int v1934 = v1928 + v1932++;
        unsigned int v1928 = v1934 & v1927;
        v1929 = (void *)(v1926 + 8 * v1928);
        v1930 = (void *)*v1929;
        if (v1916 == (void *)*v1929) {
          goto LABEL_3851;
        }
      }
      if (v1931) {
        v1935 = v1931;
      }
      else {
        v1935 = v1929;
      }
    }
    else
    {
      int v1925 = *(_DWORD *)(a1 + 800);
      if (v1925)
      {
        uint64_t v1926 = *(void *)(a1 + 792);
        goto LABEL_3836;
      }
      v1935 = 0;
    }
    v1936 = (void **)sub_1CC872F3C(a1 + 784, (uint64_t)v2426, v2426, v1935);
    *v1936 = v2426[0];
    unint64_t v1937 = *(unsigned int *)(a1 + 1056);
    if (v1937 >= *(unsigned int *)(a1 + 1060)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void **)(*(void *)(a1 + 1048) + 8 * v1937) = v2426[0];
    ++*(_DWORD *)(a1 + 1056);
    goto LABEL_3851;
  }
LABEL_3856:
  sub_1CC874880(&v2449);
  LODWORD(v2453) = 0;
  v2417 = (void *)(a1 + 784);
  uint64_t v1938 = *(unsigned int *)(a1 + 1056);
  if (!v1938) {
    goto LABEL_4040;
  }
  uint64_t v1939 = *(void *)(a1 + 1048);
  uint64_t v1940 = v1939 + 8 * v1938;
  while (2)
  {
    uint64_t v1942 = *(void *)(v1940 - 8);
    v1940 -= 8;
    uint64_t v1941 = v1942;
    uint64_t v1943 = *(void *)(a1 + 1864);
    uint64_t v1944 = *(void *)(a1 + 1856);
    if (v1943 == v1944)
    {
      uint64_t v1945 = *v1803;
      v1946 = (void *)(v1943 + 8 * v1945);
      if (v1945)
      {
        uint64_t v1947 = 0;
        uint64_t v1948 = 8 * v1945;
        while (*(void *)(v1943 + v1947) != v1941)
        {
          v1947 += 8;
          if (v1948 == v1947) {
            goto LABEL_3876;
          }
        }
        v1946 = (void *)(v1943 + v1947);
      }
LABEL_3876:
      uint64_t v1944 = *(void *)(a1 + 1864);
    }
    else
    {
      uint64_t v1949 = *v1804;
      int v1950 = v1949 - 1;
      unsigned int v1951 = (v1949 - 1) & ((v1941 >> 4) ^ (v1941 >> 9));
      v1946 = (void *)(v1943 + 8 * v1951);
      uint64_t v1952 = *v1946;
      if (*v1946 == -1)
      {
        v1953 = 0;
LABEL_3917:
        if (v1953) {
          v1946 = v1953;
        }
        if (*v1946 != v1941) {
          v1946 = (void *)(v1943 + 8 * v1949);
        }
      }
      else
      {
        v1953 = 0;
        int v1954 = 1;
        while (v1952 != v1941)
        {
          if (v1953) {
            BOOL v1955 = 0;
          }
          else {
            BOOL v1955 = v1952 == -2;
          }
          if (v1955) {
            v1953 = v1946;
          }
          unsigned int v1956 = v1951 + v1954++;
          unsigned int v1951 = v1956 & v1950;
          v1946 = (void *)(v1943 + 8 * (v1956 & v1950));
          uint64_t v1952 = *v1946;
          if (*v1946 == -1) {
            goto LABEL_3917;
          }
        }
      }
    }
    if (v1943 == v1944) {
      v1957 = (unsigned int *)(a1 + 1876);
    }
    else {
      v1957 = (unsigned int *)(a1 + 1872);
    }
    if (v1946 != (void *)(v1943 + 8 * *v1957))
    {
      if (*(unsigned __int8 *)(v1941 + 16) - 29 >= 0xB)
      {
        uint64_t v1958 = *(void *)(a1 + 3464);
        uint64_t v1959 = *(void *)(a1 + 3456);
        if (v1958 == v1959)
        {
          uint64_t v1960 = *(unsigned int *)(a1 + 3476);
          v1961 = (void *)(v1958 + 8 * v1960);
          if (v1960)
          {
            uint64_t v1962 = 0;
            uint64_t v1963 = 8 * v1960;
            while (*(void *)(v1958 + v1962) != v1941)
            {
              v1962 += 8;
              if (v1963 == v1962) {
                goto LABEL_3938;
              }
            }
            v1961 = (void *)(v1958 + v1962);
          }
LABEL_3938:
          uint64_t v1959 = *(void *)(a1 + 3464);
        }
        else
        {
          uint64_t v1978 = *(unsigned int *)(a1 + 3472);
          int v1979 = v1978 - 1;
          unsigned int v1980 = (v1978 - 1) & ((v1941 >> 4) ^ (v1941 >> 9));
          v1961 = (void *)(v1958 + 8 * v1980);
          uint64_t v1981 = *v1961;
          if (*v1961 == -1)
          {
            v1982 = 0;
LABEL_3970:
            if (v1982) {
              v1961 = v1982;
            }
            if (*v1961 != v1941) {
              v1961 = (void *)(v1958 + 8 * v1978);
            }
          }
          else
          {
            v1982 = 0;
            int v1983 = 1;
            while (v1981 != v1941)
            {
              if (v1982) {
                BOOL v1984 = 0;
              }
              else {
                BOOL v1984 = v1981 == -2;
              }
              if (v1984) {
                v1982 = v1961;
              }
              unsigned int v1985 = v1980 + v1983++;
              unsigned int v1980 = v1985 & v1979;
              v1961 = (void *)(v1958 + 8 * (v1985 & v1979));
              uint64_t v1981 = *v1961;
              if (*v1961 == -1) {
                goto LABEL_3970;
              }
            }
          }
        }
        v1993 = (unsigned int *)(v1958 == v1959 ? a1 + 3476 : a1 + 3472);
        if (v1961 == (void *)(v1958 + 8 * *v1993)
          && sub_1CC86F7D8(a1, *(void *)(v1941 + 8), (uint64_t)v2417, (uint64_t *)v2409, 0))
        {
          uint64_t v1994 = *(void *)(a1 + 1864);
          uint64_t v1995 = *(void *)(a1 + 1856);
          if (v1994 == v1995)
          {
            uint64_t v1996 = *v1803;
            v1997 = (void *)(v1994 + 8 * v1996);
            if (v1996)
            {
              uint64_t v1998 = 0;
              uint64_t v1999 = 8 * v1996;
              while (*(void *)(v1994 + v1998) != v1941)
              {
                v1998 += 8;
                if (v1999 == v1998) {
                  goto LABEL_3994;
                }
              }
              v1997 = (void *)(v1994 + v1998);
            }
LABEL_3994:
            uint64_t v1995 = *(void *)(a1 + 1864);
          }
          else
          {
            uint64_t v2008 = *v1804;
            int v2009 = v2008 - 1;
            unsigned int v2010 = (v2008 - 1) & ((v1941 >> 4) ^ (v1941 >> 9));
            v1997 = (void *)(v1994 + 8 * v2010);
            uint64_t v2011 = *v1997;
            if (*v1997 == -1)
            {
              v2012 = 0;
LABEL_4004:
              if (v2012) {
                v1997 = v2012;
              }
              if (*v1997 != v1941) {
                v1997 = (void *)(v1994 + 8 * v2008);
              }
            }
            else
            {
              v2012 = 0;
              int v2013 = 1;
              while (v2011 != v1941)
              {
                if (v2012) {
                  BOOL v2014 = 0;
                }
                else {
                  BOOL v2014 = v2011 == -2;
                }
                if (v2014) {
                  v2012 = v1997;
                }
                unsigned int v2015 = v2010 + v2013++;
                unsigned int v2010 = v2015 & v2009;
                v1997 = (void *)(v1994 + 8 * (v2015 & v2009));
                uint64_t v2011 = *v1997;
                if (*v1997 == -1) {
                  goto LABEL_4004;
                }
              }
            }
          }
          v2017 = (unsigned int *)(v1994 == v1995 ? a1 + 1876 : a1 + 1872);
          if (v1997 != (void *)(v1994 + 8 * *v2017))
          {
            void *v1997 = -2;
            int v2018 = *(_DWORD *)(a1 + 1880) + 1;
LABEL_4000:
            *(_DWORD *)(a1 + 1880) = v2018;
          }
        }
      }
      goto LABEL_4001;
    }
    uint64_t v1964 = *(void *)(a1 + 3304);
    uint64_t v1965 = *(void *)(a1 + 3296);
    if (v1964 == v1965)
    {
      uint64_t v1966 = *(unsigned int *)(a1 + 3316);
      v1967 = (void *)(v1964 + 8 * v1966);
      if (v1966)
      {
        uint64_t v1968 = 0;
        uint64_t v1969 = 8 * v1966;
        while (*(void *)(v1964 + v1968) != v1941)
        {
          v1968 += 8;
          if (v1969 == v1968) {
            goto LABEL_3922;
          }
        }
        v1967 = (void *)(v1964 + v1968);
      }
LABEL_3922:
      uint64_t v1965 = *(void *)(a1 + 3304);
    }
    else
    {
      uint64_t v1970 = *(unsigned int *)(a1 + 3312);
      int v1971 = v1970 - 1;
      unsigned int v1972 = (v1970 - 1) & ((v1941 >> 4) ^ (v1941 >> 9));
      v1967 = (void *)(v1964 + 8 * v1972);
      uint64_t v1973 = *v1967;
      if (*v1967 == -1)
      {
        v1974 = 0;
LABEL_3965:
        if (v1974) {
          v1967 = v1974;
        }
        if (*v1967 != v1941) {
          v1967 = (void *)(v1964 + 8 * v1970);
        }
      }
      else
      {
        v1974 = 0;
        int v1975 = 1;
        while (v1973 != v1941)
        {
          if (v1974) {
            BOOL v1976 = 0;
          }
          else {
            BOOL v1976 = v1973 == -2;
          }
          if (v1976) {
            v1974 = v1967;
          }
          unsigned int v1977 = v1972 + v1975++;
          unsigned int v1972 = v1977 & v1971;
          v1967 = (void *)(v1964 + 8 * (v1977 & v1971));
          uint64_t v1973 = *v1967;
          if (*v1967 == -1) {
            goto LABEL_3965;
          }
        }
      }
    }
    BOOL v54 = v1964 == v1965;
    v1986 = (unsigned int *)(a1 + 3312);
    if (v54) {
      v1986 = (unsigned int *)(a1 + 3316);
    }
    if (v1967 != (void *)(v1964 + 8 * *v1986)
      && (sub_1CC86F7D8(a1, *(void *)(v1941 + 8), (uint64_t)v2417, (uint64_t *)v2409, 0) & 1) == 0)
    {
      uint64_t v1987 = *(void *)(a1 + 1864);
      uint64_t v1988 = *(unsigned int *)(a1 + 1876);
      if (v1987 == *(void *)(a1 + 1856))
      {
        if (v1988)
        {
          v1989 = 0;
          uint64_t v1990 = 8 * v1988;
          v1991 = *(void **)(a1 + 1864);
          while (*v1991 != v1941)
          {
            if (*v1991 == -2) {
              v1989 = v1991;
            }
            ++v1991;
            v1990 -= 8;
            if (!v1990)
            {
              if (!v1989) {
                goto LABEL_3935;
              }
              void *v1989 = v1941;
              int v2018 = *(_DWORD *)(a1 + 1880) - 1;
              goto LABEL_4000;
            }
          }
          goto LABEL_4001;
        }
LABEL_3935:
        unsigned int v1992 = *v1804;
        if (v1988 < *v1804)
        {
          _DWORD *v1803 = v1988 + 1;
          *(void *)(v1987 + 8 * v1988) = v1941;
          goto LABEL_4001;
        }
      }
      else
      {
        unsigned int v1992 = *v1804;
      }
      if (3 * v1992 <= 4 * ((int)v1988 - *(_DWORD *)(a1 + 1880)))
      {
        if (v1992 >= 0x40) {
          v1992 *= 2;
        }
        else {
          unsigned int v1992 = 128;
        }
      }
      else if (v1992 - v1988 >= v1992 >> 3)
      {
        goto LABEL_3953;
      }
      llvm::SmallPtrSetImplBase::Grow(v2409, v1992);
      unsigned int v1992 = *(_DWORD *)(a1 + 1872);
      uint64_t v1987 = *(void *)(a1 + 1864);
LABEL_3953:
      unsigned int v2000 = v1992 - 1;
      unsigned int v2001 = (v1992 - 1) & ((v1941 >> 4) ^ (v1941 >> 9));
      v2002 = (void *)(v1987 + 8 * v2001);
      uint64_t v2003 = *v2002;
      if (*v2002 == -1)
      {
        v2004 = 0;
LABEL_3986:
        if (v2004) {
          v2016 = v2004;
        }
        else {
          v2016 = v2002;
        }
        if (*v2016 != v1941)
        {
          if (*v2016 == -2) {
            --*(_DWORD *)(a1 + 1880);
          }
          else {
            ++*v1803;
          }
          void *v2016 = v1941;
        }
      }
      else
      {
        v2004 = 0;
        int v2005 = 1;
        while (v2003 != v1941)
        {
          if (v2004) {
            BOOL v2006 = 0;
          }
          else {
            BOOL v2006 = v2003 == -2;
          }
          if (v2006) {
            v2004 = v2002;
          }
          unsigned int v2007 = v2001 + v2005++;
          unsigned int v2001 = v2007 & v2000;
          v2002 = (void *)(v1987 + 8 * (v2007 & v2000));
          uint64_t v2003 = *v2002;
          if (*v2002 == -1) {
            goto LABEL_3986;
          }
        }
      }
    }
LABEL_4001:
    if (v1940 != v1939) {
      continue;
    }
    break;
  }
  uint64_t v2019 = *(unsigned int *)(a1 + 1056);
  if (v2019)
  {
    v2020 = *(uint64_t **)(a1 + 1048);
    v2021 = &v2020[v2019];
    do
    {
      v2022 = (void *)*v2020;
      if (sub_1CC86FAF4(a1, *v2020, (uint64_t)v2417, (uint64_t)v2409, 0))
      {
        v2426[0] = v2022;
        if (*(unsigned char *)(a1 + 1320))
        {
          int v2023 = 32;
          uint64_t v2024 = a1 + 1328;
        }
        else
        {
          int v2023 = *(_DWORD *)(a1 + 1336);
          if (!v2023)
          {
            v2033 = 0;
LABEL_4034:
            v2034 = (void **)sub_1CBAA320C(a1 + 1320, (uint64_t)v2426, v2426, v2033);
            *v2034 = v2426[0];
            unint64_t v2035 = *(unsigned int *)(a1 + 1592);
            if (v2035 >= *(unsigned int *)(a1 + 1596)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void **)(*(void *)(a1 + 1584) + 8 * v2035) = v2426[0];
            ++*(_DWORD *)(a1 + 1592);
            goto LABEL_4036;
          }
          uint64_t v2024 = *(void *)(a1 + 1328);
        }
        int v2025 = v2023 - 1;
        unsigned int v2026 = v2025 & ((v2022 >> 4) ^ (v2022 >> 9));
        v2027 = (void *)(v2024 + 8 * v2026);
        v2028 = (void *)*v2027;
        if (v2022 != (void *)*v2027)
        {
          v2029 = 0;
          int v2030 = 1;
          while (v2028 != (void *)-4096)
          {
            if (v2029) {
              BOOL v2031 = 0;
            }
            else {
              BOOL v2031 = v2028 == (void *)-8192;
            }
            if (v2031) {
              v2029 = v2027;
            }
            unsigned int v2032 = v2026 + v2030++;
            unsigned int v2026 = v2032 & v2025;
            v2027 = (void *)(v2024 + 8 * v2026);
            v2028 = (void *)*v2027;
            if (v2022 == (void *)*v2027) {
              goto LABEL_4036;
            }
          }
          if (v2029) {
            v2033 = v2029;
          }
          else {
            v2033 = v2027;
          }
          goto LABEL_4034;
        }
      }
LABEL_4036:
      ++v2020;
    }
    while (v2020 != v2021);
  }
LABEL_4040:
  uint64_t v2036 = *(unsigned int *)(a1 + 1592);
  if (v2036)
  {
    v2037 = *(uint64_t ***)(a1 + 1584);
    v2038 = &v2037[v2036];
    int v2039 = v2404 & ~(v2334 >> 31);
    do
    {
      v2040 = *v2037;
      unsigned int v2041 = 8 * sub_1CC86FC7C(**v2037, (uint64_t)v2412) + 15;
      int v2042 = v2419 + (v2041 >> 4);
      LODWORD(v2419) = v2042;
      if (*((unsigned __int8 *)v2040 + 16) <= 0x1Bu) {
        v2043 = 0;
      }
      else {
        v2043 = v2040;
      }
      int v2044 = *(_DWORD *)(a1 + 2184);
      if (v2044)
      {
        uint64_t v2045 = *(void *)(a1 + 2168);
        int v2046 = v2044 - 1;
        unsigned int v2047 = ((v2043 >> 4) ^ (v2043 >> 9)) & v2046;
        v2048 = *(uint64_t **)(v2045 + 32 * v2047);
        if (v2043 == v2048)
        {
LABEL_4052:
          v2418 += v2041 >> 4;
        }
        else
        {
          int v2049 = 1;
          while (v2048 != (uint64_t *)-4096)
          {
            unsigned int v2050 = v2047 + v2049++;
            unsigned int v2047 = v2050 & v2046;
            v2048 = *(uint64_t **)(v2045 + 32 * v2047);
            if (v2043 == v2048) {
              goto LABEL_4052;
            }
          }
        }
      }
      ++v2037;
    }
    while (v2037 != v2038);
  }
  else
  {
    int v2042 = v2419;
    int v2039 = v2404 & ~(v2334 >> 31);
  }
  v2405 = (llvm::SmallPtrSetImplBase *)(a1 + 1320);
  v2426[0] = &v2429;
  v2426[1] = &v2429;
  uint64_t v2427 = 32;
  int v2428 = 0;
  if (v2042 > v2335 || (int v2051 = v2418, v2418 > v2039))
  {
    *(void *)&long long v2459 = a1;
    *((void *)&v2459 + 1) = v2426;
    *(void *)&long long v2460 = &v2419;
    *((void *)&v2460 + 1) = v2388 + 272;
    v2461[0] = &v2418;
    v2461[1] = a2;
    v2052 = *(uint64_t **)(a1 + 1048);
    uint64_t v2053 = *(unsigned int *)(a1 + 1056);
    if (!v2053) {
      goto LABEL_4227;
    }
    v2054 = &v2052[v2053];
    while (2)
    {
      if (v2418 > v2039)
      {
        uint64_t v2056 = *--v2054;
        uint64_t v2055 = v2056;
        unsigned int v2057 = *(unsigned __int8 *)(v2056 + 16);
        if (v2057 <= 0x1B) {
          uint64_t v2058 = 0;
        }
        else {
          uint64_t v2058 = v2055;
        }
        int v2059 = *(_DWORD *)(a1 + 2184);
        if (!v2059) {
          goto LABEL_4063;
        }
        uint64_t v2060 = *(void *)(a1 + 2168);
        int v2061 = v2059 - 1;
        unsigned int v2062 = ((v2058 >> 4) ^ (v2058 >> 9)) & v2061;
        uint64_t v2063 = *(void *)(v2060 + 32 * v2062);
        if (v2058 != v2063)
        {
          int v2064 = 1;
          while (v2063 != -4096)
          {
            unsigned int v2065 = v2062 + v2064++;
            unsigned int v2062 = v2065 & v2061;
            uint64_t v2063 = *(void *)(v2060 + 32 * v2062);
            if (v2058 == v2063) {
              goto LABEL_4069;
            }
          }
          goto LABEL_4063;
        }
LABEL_4069:
        if (v2057 == 84)
        {
          uint64_t v2066 = *(void *)(v2055 - 32);
          if (!v2066
            || *(unsigned char *)(v2066 + 16)
            || *(void *)(v2066 + 24) != *(void *)(v2055 + 72)
            || (*(unsigned char *)(v2066 + 33) & 0x20) == 0
            || *(_DWORD *)(v2066 + 36) != 2149)
          {
LABEL_4077:
            uint64_t v2067 = *(void *)(v2055 + 8);
            if (v2067)
            {
              unsigned int v2068 = v2427 - 1;
              do
              {
                uint64_t v2069 = *(void *)(v2067 + 24);
                if (*(unsigned __int8 *)(v2069 + 16) <= 0x1Bu) {
                  uint64_t v2069 = 0;
                }
                if (*(_DWORD *)v2417)
                {
                  int v2070 = 32;
                  uint64_t v2071 = a1 + 792;
                }
                else
                {
                  int v2070 = *(_DWORD *)(a1 + 800);
                  if (!v2070) {
                    goto LABEL_4121;
                  }
                  uint64_t v2071 = *(void *)(a1 + 792);
                }
                unsigned int v2072 = (v2069 >> 4) ^ (v2069 >> 9);
                int v2073 = v2070 - 1;
                unsigned int v2074 = v2073 & v2072;
                uint64_t v2075 = *(void *)(v2071 + 8 * (v2073 & v2072));
                if (v2069 == v2075)
                {
LABEL_4089:
                  if (v2426[1] == v2426[0])
                  {
                    if (HIDWORD(v2427))
                    {
                      uint64_t v2078 = 0;
                      while (*(void *)((char *)v2426[1] + v2078) != v2069)
                      {
                        v2078 += 8;
                        if (8 * HIDWORD(v2427) == v2078)
                        {
                          unsigned int v2079 = HIDWORD(v2427);
                          goto LABEL_4109;
                        }
                      }
                      v2088 = (char *)v2426[1] + v2078;
                      unsigned int v2079 = HIDWORD(v2427);
                      v2089 = v2426[1];
                    }
                    else
                    {
                      unsigned int v2079 = 0;
LABEL_4109:
                      v2089 = v2426[1];
                      v2088 = (char *)v2426[1] + 8 * HIDWORD(v2427);
                    }
                  }
                  else
                  {
                    int v2080 = v2068 & v2072;
                    v2081 = (char *)v2426[1] + 8 * (v2068 & v2072);
                    uint64_t v2082 = *(void *)v2081;
                    if (*(void *)v2081 == -1)
                    {
                      v2083 = 0;
LABEL_4111:
                      if (v2083) {
                        v2081 = v2083;
                      }
                      uint64_t v2087 = *(void *)v2081;
                    }
                    else
                    {
                      v2083 = 0;
                      int v2084 = 1;
                      while (v2082 != v2069)
                      {
                        if (v2083) {
                          BOOL v2085 = 0;
                        }
                        else {
                          BOOL v2085 = v2082 == -2;
                        }
                        if (v2085) {
                          v2083 = v2081;
                        }
                        int v2086 = v2080 + v2084++;
                        int v2080 = v2086 & v2068;
                        v2081 = (char *)v2426[1] + 8 * (v2086 & v2068);
                        uint64_t v2082 = *(void *)v2081;
                        if (*(void *)v2081 == -1) {
                          goto LABEL_4111;
                        }
                      }
                      uint64_t v2087 = v2069;
                    }
                    if (v2087 == v2069) {
                      v2088 = v2081;
                    }
                    else {
                      v2088 = (char *)v2426[1] + 8 * v2427;
                    }
                    unsigned int v2079 = HIDWORD(v2427);
                    v2089 = v2426[0];
                  }
                  if (v2426[1] != v2089) {
                    unsigned int v2079 = v2427;
                  }
                  if (v2088 == (char *)v2426[1] + 8 * v2079) {
                    goto LABEL_4063;
                  }
                }
                else
                {
                  int v2076 = 1;
                  while (v2075 != -4096)
                  {
                    unsigned int v2077 = v2074 + v2076++;
                    unsigned int v2074 = v2077 & v2073;
                    uint64_t v2075 = *(void *)(v2071 + 8 * v2074);
                    if (v2069 == v2075) {
                      goto LABEL_4089;
                    }
                  }
                }
LABEL_4121:
                uint64_t v2067 = *(void *)(v2067 + 8);
              }
              while (v2067);
            }
            sub_1CC86FCE0((uint64_t)&v2459, v2055);
          }
        }
        else if (v2057 - 29 >= 0xB)
        {
          goto LABEL_4077;
        }
LABEL_4063:
        if (v2054 == v2052) {
          break;
        }
        continue;
      }
      break;
    }
    v2090 = *(uint64_t **)(a1 + 1048);
    uint64_t v2091 = *(unsigned int *)(a1 + 1056);
    if (!v2091) {
      goto LABEL_4226;
    }
    v2052 = &v2090[v2091];
    uint64_t v2092 = 8 * v2091 - 8;
    v2093 = *(uint64_t **)(a1 + 1048);
    do
    {
      uint64_t v2094 = *v2093++;
      if (sub_1CC874A68((uint64_t *)v2426, (uint64_t)v2417, v2094)) {
        break;
      }
      v2092 -= 8;
      v2090 = v2093;
    }
    while (v2093 != v2052);
    if (v2093 == v2052)
    {
LABEL_4226:
      v2052 = v2090;
    }
    else
    {
      uint64_t v2136 = 1;
      v2052 = v2090;
      do
      {
        if (!sub_1CC874A68((uint64_t *)v2426, (uint64_t)v2417, v2090[v2136])) {
          *v2052++ = v2090[v2136];
        }
        ++v2136;
        v2092 -= 8;
      }
      while (v2092);
    }
LABEL_4227:
    uint64_t v2137 = *(void *)(a1 + 1048);
    if (v2052 != (uint64_t *)(v2137 + 8 * *(unsigned int *)(a1 + 1056))) {
      *(_DWORD *)(a1 + 1056) = ((unint64_t)v2052 - v2137) >> 3;
    }
    if (v2426[1] == v2426[0])
    {
LABEL_4230:
      int v2428 = 0;
      HIDWORD(v2427) = 0;
    }
    else
    {
      if (v2427 < 0x21 || 4 * (HIDWORD(v2427) - v2428) >= v2427)
      {
        memset(v2426[1], 255, 8 * v2427);
        goto LABEL_4230;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear(v2426);
    }
    v2138 = *(uint64_t **)(a1 + 1048);
    uint64_t v2139 = *(unsigned int *)(a1 + 1056);
    if (v2139)
    {
      v2140 = &v2138[v2139];
      while (1)
      {
        BOOL v2141 = (int)v2419 <= v2335 && v2418 <= v2039;
        if (v2141)
        {
LABEL_4292:
          v2169 = *(uint64_t **)(a1 + 1048);
          uint64_t v2170 = *(unsigned int *)(a1 + 1056);
          if (!v2170) {
            goto LABEL_4303;
          }
          v2138 = &v2169[v2170];
          uint64_t v2171 = 8 * v2170 - 8;
          v2172 = *(uint64_t **)(a1 + 1048);
          while (1)
          {
            uint64_t v2173 = *v2172++;
            if (sub_1CC874A68((uint64_t *)v2426, (uint64_t)v2417, v2173)) {
              break;
            }
            v2171 -= 8;
            v2169 = v2172;
            if (v2172 == v2138) {
              goto LABEL_4304;
            }
          }
          if (v2172 == v2138)
          {
LABEL_4303:
            v2138 = v2169;
          }
          else
          {
            uint64_t v2174 = 1;
            v2138 = v2169;
            do
            {
              if (!sub_1CC874A68((uint64_t *)v2426, (uint64_t)v2417, v2169[v2174])) {
                *v2138++ = v2169[v2174];
              }
              ++v2174;
              v2171 -= 8;
            }
            while (v2171);
          }
          break;
        }
        uint64_t v2143 = *--v2140;
        uint64_t v2142 = v2143;
        int v2144 = *(unsigned __int8 *)(v2143 + 16);
        if (v2144 == 84)
        {
          uint64_t v2145 = *(void *)(v2142 - 32);
          if (v2145
            && !*(unsigned char *)(v2145 + 16)
            && *(void *)(v2145 + 24) == *(void *)(v2142 + 72)
            && (*(unsigned char *)(v2145 + 33) & 0x20) != 0
            && *(_DWORD *)(v2145 + 36) == 2149)
          {
            goto LABEL_4291;
          }
        }
        else if ((v2144 - 29) < 0xB)
        {
          goto LABEL_4291;
        }
        uint64_t v2146 = *(void *)(v2142 + 8);
        if (v2146)
        {
          unsigned int v2147 = v2427 - 1;
          do
          {
            uint64_t v2148 = *(void *)(v2146 + 24);
            if (*(unsigned __int8 *)(v2148 + 16) <= 0x1Bu) {
              uint64_t v2148 = 0;
            }
            if (*(_DWORD *)v2417)
            {
              int v2149 = 32;
              uint64_t v2150 = a1 + 792;
            }
            else
            {
              int v2149 = *(_DWORD *)(a1 + 800);
              if (!v2149) {
                goto LABEL_4289;
              }
              uint64_t v2150 = *(void *)(a1 + 792);
            }
            unsigned int v2151 = (v2148 >> 4) ^ (v2148 >> 9);
            int v2152 = v2149 - 1;
            unsigned int v2153 = v2152 & v2151;
            uint64_t v2154 = *(void *)(v2150 + 8 * (v2152 & v2151));
            if (v2148 == v2154)
            {
LABEL_4257:
              if (v2426[1] == v2426[0])
              {
                if (HIDWORD(v2427))
                {
                  uint64_t v2157 = 0;
                  while (*(void *)((char *)v2426[1] + v2157) != v2148)
                  {
                    v2157 += 8;
                    if (8 * HIDWORD(v2427) == v2157)
                    {
                      unsigned int v2158 = HIDWORD(v2427);
                      goto LABEL_4277;
                    }
                  }
                  v2167 = (char *)v2426[1] + v2157;
                  unsigned int v2158 = HIDWORD(v2427);
                  v2168 = v2426[1];
                }
                else
                {
                  unsigned int v2158 = 0;
LABEL_4277:
                  v2168 = v2426[1];
                  v2167 = (char *)v2426[1] + 8 * HIDWORD(v2427);
                }
              }
              else
              {
                int v2159 = v2147 & v2151;
                v2160 = (char *)v2426[1] + 8 * (v2147 & v2151);
                uint64_t v2161 = *(void *)v2160;
                if (*(void *)v2160 == -1)
                {
                  v2162 = 0;
LABEL_4279:
                  if (v2162) {
                    v2160 = v2162;
                  }
                  uint64_t v2166 = *(void *)v2160;
                }
                else
                {
                  v2162 = 0;
                  int v2163 = 1;
                  while (v2161 != v2148)
                  {
                    if (v2162) {
                      BOOL v2164 = 0;
                    }
                    else {
                      BOOL v2164 = v2161 == -2;
                    }
                    if (v2164) {
                      v2162 = v2160;
                    }
                    int v2165 = v2159 + v2163++;
                    int v2159 = v2165 & v2147;
                    v2160 = (char *)v2426[1] + 8 * (v2165 & v2147);
                    uint64_t v2161 = *(void *)v2160;
                    if (*(void *)v2160 == -1) {
                      goto LABEL_4279;
                    }
                  }
                  uint64_t v2166 = v2148;
                }
                if (v2166 == v2148) {
                  v2167 = v2160;
                }
                else {
                  v2167 = (char *)v2426[1] + 8 * v2427;
                }
                unsigned int v2158 = HIDWORD(v2427);
                v2168 = v2426[0];
              }
              if (v2426[1] != v2168) {
                unsigned int v2158 = v2427;
              }
              if (v2167 == (char *)v2426[1] + 8 * v2158) {
                goto LABEL_4291;
              }
            }
            else
            {
              int v2155 = 1;
              while (v2154 != -4096)
              {
                unsigned int v2156 = v2153 + v2155++;
                unsigned int v2153 = v2156 & v2152;
                uint64_t v2154 = *(void *)(v2150 + 8 * v2153);
                if (v2148 == v2154) {
                  goto LABEL_4257;
                }
              }
            }
LABEL_4289:
            uint64_t v2146 = *(void *)(v2146 + 8);
          }
          while (v2146);
        }
        sub_1CC86FCE0((uint64_t)&v2459, v2142);
LABEL_4291:
        if (v2140 == v2138) {
          goto LABEL_4292;
        }
      }
    }
LABEL_4304:
    uint64_t v2175 = *(void *)(a1 + 1048);
    if (v2138 != (uint64_t *)(v2175 + 8 * *(unsigned int *)(a1 + 1056))) {
      *(_DWORD *)(a1 + 1056) = ((unint64_t)v2138 - v2175) >> 3;
    }
    if (v2426[1] == v2426[0])
    {
LABEL_4307:
      int v2428 = 0;
      HIDWORD(v2427) = 0;
    }
    else
    {
      if (v2427 < 0x21 || 4 * (HIDWORD(v2427) - v2428) >= v2427)
      {
        memset(v2426[1], 255, 8 * v2427);
        goto LABEL_4307;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear(v2426);
    }
    sub_1CC874B80(v2405);
    *(_DWORD *)(a1 + 1592) = 0;
    uint64_t v2176 = *(unsigned int *)(a1 + 1056);
    if (v2176)
    {
      v2177 = *(uint64_t **)(a1 + 1048);
      v2178 = &v2177[v2176];
      do
      {
        uint64_t v2179 = *v2177;
        if (sub_1CC86FAF4(a1, *v2177, (uint64_t)v2417, (uint64_t)v2409, 0))
        {
          *(void *)&long long v2467 = v2179;
          if (*(unsigned char *)v2405)
          {
            int v2180 = 32;
            uint64_t v2181 = a1 + 1328;
          }
          else
          {
            int v2180 = *(_DWORD *)(a1 + 1336);
            if (!v2180)
            {
              v2190 = 0;
LABEL_4328:
              v2191 = sub_1CBAA320C((uint64_t)v2405, (uint64_t)&v2467, &v2467, v2190);
              void *v2191 = v2467;
              unint64_t v2192 = *(unsigned int *)(a1 + 1592);
              if (v2192 >= *(unsigned int *)(a1 + 1596)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a1 + 1584) + 8 * v2192) = v2467;
              ++*(_DWORD *)(a1 + 1592);
              goto LABEL_4330;
            }
            uint64_t v2181 = *(void *)(a1 + 1328);
          }
          int v2182 = v2180 - 1;
          unsigned int v2183 = v2182 & ((v2179 >> 4) ^ (v2179 >> 9));
          v2184 = (void *)(v2181 + 8 * v2183);
          uint64_t v2185 = *v2184;
          if (v2179 != *v2184)
          {
            v2186 = 0;
            int v2187 = 1;
            while (v2185 != -4096)
            {
              if (v2186) {
                BOOL v2188 = 0;
              }
              else {
                BOOL v2188 = v2185 == -8192;
              }
              if (v2188) {
                v2186 = v2184;
              }
              unsigned int v2189 = v2183 + v2187++;
              unsigned int v2183 = v2189 & v2182;
              v2184 = (void *)(v2181 + 8 * v2183);
              uint64_t v2185 = *v2184;
              if (v2179 == *v2184) {
                goto LABEL_4330;
              }
            }
            if (v2186) {
              v2190 = v2186;
            }
            else {
              v2190 = v2184;
            }
            goto LABEL_4328;
          }
        }
LABEL_4330:
        ++v2177;
      }
      while (v2177 != v2178);
    }
    int v2042 = v2419;
    int v2051 = v2418;
  }
  *(_DWORD *)(a1 + 4640) = 2 * v2335;
  if (v2042 <= v2335 && v2051 <= v2039)
  {
    if (!*(_DWORD *)(a1 + 1056)) {
      goto LABEL_4522;
    }
    unsigned char *v2333 = 1;
    if (!byte_1EBCDCE90) {
      goto LABEL_4522;
    }
    if (!v2333[8]) {
      goto LABEL_4522;
    }
    v2195 = *(uint64_t ***)(v2398 + 40);
    *(void *)&long long v2467 = &v2468;
    *((void *)&v2467 + 1) = 0x400000000;
    uint64_t v2196 = *(unsigned int *)(a1 + 1592);
    if (!v2196) {
      goto LABEL_4522;
    }
    v2197 = *(llvm::SmallPtrSetImplBase **)(a1 + 1584);
    v2198 = (llvm::SmallPtrSetImplBase *)((char *)v2197 + 8 * v2196);
    v2399 = v2195;
    v2397 = v2198;
    while (1)
    {
      v2199 = *(llvm::Instruction **)v2197;
      v2455 = *(llvm::Instruction **)v2197;
      if (*(unsigned char *)v2405) {
        break;
      }
      int v2200 = *(_DWORD *)(a1 + 1336);
      if (v2200)
      {
        uint64_t v2201 = *(void *)(a1 + 1328);
        goto LABEL_4350;
      }
LABEL_4443:
      v2197 = (llvm::SmallPtrSetImplBase *)((char *)v2197 + 8);
      if (v2197 == v2198)
      {
        v2257 = (uint64_t *)v2467;
        if (!DWORD2(v2467))
        {
LABEL_4520:
          if (v2257 != (uint64_t *)&v2468) {
            free(v2257);
          }
          goto LABEL_4522;
        }
        v2258 = (uint64_t *)(v2467 + 16 * DWORD2(v2467));
        while (2)
        {
          v2259 = v2257 + 1;
          if (*(unsigned char *)v2405)
          {
            int v2260 = 32;
            uint64_t v2261 = a1 + 1328;
LABEL_4452:
            uint64_t v2262 = *v2259;
            int v2263 = v2260 - 1;
            unsigned int v2264 = ((*v2259 >> 4) ^ (*v2259 >> 9)) & v2263;
            v2265 = (void *)(v2261 + 8 * v2264);
            uint64_t v2266 = *v2265;
            if (*v2259 != *v2265)
            {
              v2267 = 0;
              int v2268 = 1;
              while (v2266 != -4096)
              {
                if (v2267) {
                  BOOL v2269 = 0;
                }
                else {
                  BOOL v2269 = v2266 == -8192;
                }
                if (v2269) {
                  v2267 = v2265;
                }
                unsigned int v2270 = v2264 + v2268++;
                unsigned int v2264 = v2270 & v2263;
                v2265 = (void *)(v2261 + 8 * v2264);
                uint64_t v2266 = *v2265;
                if (v2262 == *v2265) {
                  goto LABEL_4467;
                }
              }
              if (v2267) {
                v2271 = v2267;
              }
              else {
                v2271 = v2265;
              }
              goto LABEL_4465;
            }
          }
          else
          {
            int v2260 = *(_DWORD *)(a1 + 1336);
            if (v2260)
            {
              uint64_t v2261 = *(void *)(a1 + 1328);
              goto LABEL_4452;
            }
            v2271 = 0;
LABEL_4465:
            *sub_1CBAA320C((uint64_t)v2405, (uint64_t)(v2257 + 1), v2257 + 1, v2271) = *v2259;
            unint64_t v2272 = *(unsigned int *)(a1 + 1592);
            if (v2272 >= *(unsigned int *)(a1 + 1596)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 1584) + 8 * v2272) = *v2259;
            ++*(_DWORD *)(a1 + 1592);
            uint64_t v2262 = *v2259;
          }
LABEL_4467:
          if (*(unsigned __int8 *)(v2262 + 16) <= 0x1Bu) {
            uint64_t v2262 = 0;
          }
          *(void *)&long long v2459 = v2262;
          if (*(unsigned char *)v2417)
          {
            int v2273 = 32;
            uint64_t v2274 = a1 + 792;
LABEL_4472:
            int v2275 = v2273 - 1;
            unsigned int v2276 = v2275 & ((v2262 >> 4) ^ (v2262 >> 9));
            v2277 = (void *)(v2274 + 8 * v2276);
            uint64_t v2278 = *v2277;
            if (v2262 != *v2277)
            {
              v2279 = 0;
              int v2280 = 1;
              while (v2278 != -4096)
              {
                if (v2279) {
                  BOOL v2281 = 0;
                }
                else {
                  BOOL v2281 = v2278 == -8192;
                }
                if (v2281) {
                  v2279 = v2277;
                }
                unsigned int v2282 = v2276 + v2280++;
                unsigned int v2276 = v2282 & v2275;
                v2277 = (void *)(v2274 + 8 * v2276);
                uint64_t v2278 = *v2277;
                if (v2262 == *v2277) {
                  goto LABEL_4487;
                }
              }
              if (v2279) {
                v2283 = v2279;
              }
              else {
                v2283 = v2277;
              }
              goto LABEL_4485;
            }
          }
          else
          {
            int v2273 = *(_DWORD *)(a1 + 800);
            if (v2273)
            {
              uint64_t v2274 = *(void *)(a1 + 792);
              goto LABEL_4472;
            }
            v2283 = 0;
LABEL_4485:
            v2284 = sub_1CC872F3C((uint64_t)v2417, (uint64_t)&v2459, &v2459, v2283);
            void *v2284 = v2459;
            unint64_t v2285 = *(unsigned int *)(a1 + 1056);
            if (v2285 >= *(unsigned int *)(a1 + 1060)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a1 + 1048) + 8 * v2285) = v2459;
            ++*(_DWORD *)(a1 + 1056);
          }
LABEL_4487:
          uint64_t v2286 = *v2257;
          if ((*(unsigned char *)v2405 & 1) == 0)
          {
            int v2287 = *(_DWORD *)(a1 + 1336);
            if (v2287)
            {
              uint64_t v2288 = *(void *)(a1 + 1328);
LABEL_4491:
              int v2289 = v2287 - 1;
              LODWORD(v2290) = (v2287 - 1) & ((v2286 >> 4) ^ (v2286 >> 9));
              v2291 = (uint64_t *)(v2288 + 8 * v2290);
              uint64_t v2292 = *v2291;
              if (*v2291 == v2286)
              {
LABEL_4496:
                uint64_t *v2291 = -8192;
                *(_DWORD *)(a1 + 1320) -= 2;
                ++*(_DWORD *)(a1 + 1324);
                v2295 = *(void **)(a1 + 1584);
                uint64_t v2296 = *(unsigned int *)(a1 + 1592);
                v2297 = &v2295[v2296];
                if (v2296)
                {
                  uint64_t v2298 = 8 * v2296;
                  while (*v2295 != *v2257)
                  {
                    ++v2295;
                    v2298 -= 8;
                    if (!v2298)
                    {
                      v2295 = v2297;
                      break;
                    }
                  }
                }
                if (v2297 != v2295 + 1)
                {
                  memmove(v2295, v2295 + 1, (char *)v2297 - (char *)(v2295 + 1));
                  LODWORD(v2296) = *(_DWORD *)(a1 + 1592);
                }
                *(_DWORD *)(a1 + 1592) = v2296 - 1;
              }
              else
              {
                int v2293 = 1;
                while (v2292 != -4096)
                {
                  int v2294 = v2290 + v2293++;
                  uint64_t v2290 = v2294 & v2289;
                  uint64_t v2292 = *(void *)(v2288 + 8 * v2290);
                  if (v2292 == v2286)
                  {
                    v2291 = (uint64_t *)(v2288 + 8 * v2290);
                    goto LABEL_4496;
                  }
                }
              }
            }
            v2257 += 2;
            if (v2257 == v2258)
            {
              v2257 = (uint64_t *)v2467;
              goto LABEL_4520;
            }
            continue;
          }
          break;
        }
        int v2287 = 32;
        uint64_t v2288 = a1 + 1328;
        goto LABEL_4491;
      }
    }
    int v2200 = 32;
    uint64_t v2201 = a1 + 1328;
LABEL_4350:
    int v2202 = v2200 - 1;
    unsigned int v2203 = v2202 & ((v2199 >> 4) ^ (v2199 >> 9));
    v2204 = *(llvm::Instruction **)(v2201 + 8 * v2203);
    if (v2199 == v2204)
    {
LABEL_4354:
      uint64_t v2207 = *((void *)v2199 + 1);
      if (v2207)
      {
        while (1)
        {
          uint64_t v2208 = *(void *)(v2207 + 24);
          if (!v2208) {
            break;
          }
          if (*(unsigned char *)(v2208 + 16) != 84) {
            break;
          }
          uint64_t v2209 = *(void *)(v2208 - 32);
          if (!v2209) {
            break;
          }
          if (*(unsigned char *)(v2209 + 16)) {
            break;
          }
          if (*(void *)(v2209 + 24) != *(void *)(v2208 + 72)) {
            break;
          }
          if ((*(unsigned char *)(v2209 + 33) & 0x20) == 0) {
            break;
          }
          int v2210 = *(_DWORD *)(v2209 + 36);
          if (!sub_1CB859A14(v2210)) {
            break;
          }
          llvm::SampleInfo::SampleInfo((uint64_t)&v2459, v2210, 1);
          uint64_t v2211 = *(void *)(v2208 - 32 * (*(_DWORD *)(v2208 + 20) & 0x7FFFFFF) + 32 * LODWORD(v2461[1]));
          BOOL v2212 = v2211 && *(unsigned char *)(v2211 + 16) == 5;
          if (v2212
            && *(_WORD *)(v2211 + 18) == 48
            && llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v2211 - 32 * (*(_DWORD *)(v2211 + 20) & 0x7FFFFFF))))
          {
            break;
          }
          if (*(unsigned char *)(v2208 + 16) == 84
            && (uint64_t v2213 = *(void *)(v2208 - 32)) != 0
            && !*(unsigned char *)(v2213 + 16)
            && *(void *)(v2213 + 24) == *(void *)(v2208 + 72))
          {
            if ((*(unsigned char *)(v2213 + 33) & 0x20) == 0) {
              uint64_t v2208 = 0;
            }
          }
          else
          {
            uint64_t v2208 = 0;
          }
          llvm::SampleInfo::SampleInfo((uint64_t)&v2459, *(_DWORD *)(*(void *)(v2208 - 32) + 36), 1);
          if (DWORD2(v2462) != -1 || __PAIR64__(HIDWORD(v2462), -1) == (DWORD1(v2462) | 0xFFFFFFFF00000000)) {
            break;
          }
          uint64_t v2214 = DWORD1(v2462) == -1 ? HIDWORD(v2462) : DWORD1(v2462);
          uint64_t v2215 = *(_DWORD *)(v2208 + 20) & 0x7FFFFFF;
          v2216 = (llvm::Instruction **)(v2208 - 32 * v2215);
          if (v2216[4 * v2214] != v2199) {
            break;
          }
          if (v2215)
          {
            while (!v2214 || *v2216 != v2199)
            {
              --v2214;
              v2216 += 4;
              if (!--v2215) {
                goto LABEL_4384;
              }
            }
            goto LABEL_4443;
          }
LABEL_4384:
          uint64_t v2207 = *(void *)(v2207 + 8);
          if (!v2207)
          {
            v2199 = v2455;
            goto LABEL_4389;
          }
        }
      }
      else
      {
LABEL_4389:
        v2411 = v2197;
        v2424 = 0;
        v2420 = v2199;
        if (*(unsigned char *)(*(void *)v2199 + 8)) {
          int v2217 = 2805;
        }
        else {
          int v2217 = 2804;
        }
        llvm::Intrinsic::getType(*v2399, v2217, 0, 0);
        v2218 = (unsigned __int8 *)off_1E6830B58[v2217];
        if (v2218) {
          v2219 = (const char *)strlen(off_1E6830B58[v2217]);
        }
        else {
          v2219 = 0;
        }
        v2220 = (llvm::PointerType *)llvm::Intrinsic::getType(*v2399, v2217, 0, 0);
        llvm::Module::getOrInsertFunction((uint64_t)v2399, v2218, v2219, v2220, 0);
        uint64_t v2222 = v2221;
        v2223 = v2420;
        if (*((unsigned __int8 *)v2420 + 16) <= 0x1Bu) {
          v2223 = 0;
        }
        sub_1CBF537B4((uint64_t)&v2459, *((uint64_t ***)v2223 + 5), *((void *)v2223 + 4), 0, 0, 0);
        if (v2222) {
          v2224 = *(uint64_t ***)(v2222 + 24);
        }
        else {
          v2224 = 0;
        }
        __int16 v2474 = 257;
        uint64_t v2225 = sub_1CB845BAC((uint64_t *)&v2459, v2224, (uint64_t **)v2222, (uint64_t *)&v2420, 1, (uint64_t)&v2470, 0);
        if ((long long *)v2459 != &v2460) {
          free((void *)v2459);
        }
        v2424 = (void *)v2225;
        sub_1CBAF10A8((uint64_t)&v2467, &v2455, (uint64_t *)&v2424);
        uint64_t v2226 = (uint64_t)v2424;
        v2470 = (llvm::Instruction *)&v2472;
        uint64_t v2471 = 0x400000000;
        uint64_t v2227 = *((void *)v2455 + 1);
        if (v2227)
        {
          unsigned int v2228 = 0;
          do
          {
            uint64_t v2229 = *(void *)(v2227 + 24);
            if ((*(_DWORD *)(*(void *)(v2229 - 32) + 36) & 0xFFFFFFFE) != 0xAF4)
            {
              if (v2228 >= HIDWORD(v2471)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v2470 + v2228) = v2229;
              unsigned int v2228 = v2471 + 1;
              LODWORD(v2471) = v2471 + 1;
            }
            uint64_t v2227 = *(void *)(v2227 + 8);
          }
          while (v2227);
          v2230 = v2470;
          if (v2228)
          {
            v2231 = (uint64_t *)(v2226 + 8);
            uint64_t v2232 = 8 * v2228;
            do
            {
              uint64_t v2233 = *(void *)v2230;
              llvm::SampleInfo::SampleInfo((uint64_t)&v2459, *(_DWORD *)(*(void *)(*(void *)v2230 - 32) + 36), 1);
              uint64_t v2235 = HIDWORD(v2460);
              if (DWORD1(v2462) == -1) {
                uint64_t v2236 = HIDWORD(v2462);
              }
              else {
                uint64_t v2236 = DWORD1(v2462);
              }
              uint64_t v2237 = v2233 - 32 * (*(_DWORD *)(v2233 + 20) & 0x7FFFFFF);
              uint64_t v2238 = v2237 + 32 * v2236;
              if (*(void *)v2238)
              {
                **(void **)(v2238 + 16) = *(void *)(v2238 + 8);
                uint64_t v2239 = *(void *)(v2238 + 8);
                if (v2239) {
                  *(void *)(v2239 + 16) = *(void *)(v2238 + 16);
                }
              }
              *(void *)uint64_t v2238 = v2226;
              if (v2226)
              {
                uint64_t v2240 = *v2231;
                uint64_t v2241 = v2237 + 32 * v2236;
                *(void *)(v2241 + 8) = *v2231;
                if (v2240) {
                  *(void *)(v2240 + 16) = v2241 + 8;
                }
                *(void *)(v2241 + 16) = v2231;
                uint64_t *v2231 = v2238;
              }
              v2242 = *(uint64_t **)(v2233 - 32 * (*(_DWORD *)(v2233 + 20) & 0x7FFFFFF) + 32 * v2235);
              v2243 = v2242 + 3;
              if (*((_DWORD *)v2242 + 8) >= 0x41u) {
                v2243 = (void *)*v2243;
              }
              uint64_t v2244 = *v2242;
              uint64_t v2245 = *v2243 & 0xFFFFFFF7 | 8;
              v2246 = *(llvm::ConstantInt **)v2244;
              unint64_t v2247 = *(unsigned int *)(v2244 + 8);
              LODWORD(v2421) = v2247 >> 8;
              if (v2247 >> 8 > 0x40) {
                operator new[]();
              }
              if (v2247 <= 0xFF) {
                unint64_t v2248 = 0;
              }
              else {
                unint64_t v2248 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v2247) + 63);
              }
              v2420 = (llvm::Instruction *)(v2248 & v2245);
              v2249 = llvm::ConstantInt::get(v2246, (llvm::LLVMContext *)&v2420, v2234);
              if (v2421 >= 0x41 && v2420) {
                MEMORY[0x1D25D9CB0](v2420, 0x1000C8000313F17);
              }
              uint64_t v2250 = v2233 - 32 * (*(_DWORD *)(v2233 + 20) & 0x7FFFFFF);
              uint64_t v2251 = v2250 + 32 * v2235;
              if (*(void *)v2251)
              {
                **(void **)(v2251 + 16) = *(void *)(v2251 + 8);
                uint64_t v2252 = *(void *)(v2251 + 8);
                if (v2252) {
                  *(void *)(v2252 + 16) = *(void *)(v2251 + 16);
                }
              }
              *(void *)uint64_t v2251 = v2249;
              if (v2249)
              {
                uint64_t v2255 = v2249[1];
                v2254 = v2249 + 1;
                uint64_t v2253 = v2255;
                uint64_t v2256 = v2250 + 32 * v2235;
                *(void *)(v2256 + 8) = v2255;
                if (v2255) {
                  *(void *)(v2253 + 16) = v2256 + 8;
                }
                *(void *)(v2256 + 16) = v2254;
                void *v2254 = v2251;
              }
              v2230 = (llvm::Instruction *)((char *)v2230 + 8);
              v2232 -= 8;
            }
            while (v2232);
            v2230 = v2470;
          }
          if (v2230 != (llvm::Instruction *)&v2472) {
            free(v2230);
          }
        }
        v2197 = v2411;
        v2198 = v2397;
      }
    }
    else
    {
      int v2205 = 1;
      while (v2204 != (llvm::Instruction *)-4096)
      {
        unsigned int v2206 = v2203 + v2205++;
        unsigned int v2203 = v2206 & v2202;
        v2204 = *(llvm::Instruction **)(v2201 + 8 * v2203);
        if (v2199 == v2204) {
          goto LABEL_4354;
        }
      }
    }
    goto LABEL_4443;
  }
  sub_1CC874880(v2417);
  *(_DWORD *)(a1 + 1056) = 0;
  sub_1CC874B80(v2405);
  *(_DWORD *)(a1 + 1592) = 0;
  v2194 = *(void **)(a1 + 2232);
  if (v2194 == *(void **)(a1 + 2224)) {
    goto LABEL_4340;
  }
  uint64_t v2299 = *(unsigned int *)(a1 + 2240);
  if (v2299 >= 0x21 && 4 * (*(_DWORD *)(a1 + 2244) - *(_DWORD *)(a1 + 2248)) < v2299)
  {
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 2224));
  }
  else
  {
    memset(v2194, 255, 8 * v2299);
LABEL_4340:
    *(void *)(a1 + 2244) = 0;
  }
LABEL_4522:
  if (v2426[1] != v2426[0]) {
    free(v2426[1]);
  }
LABEL_4524:
  if ((uint64_t *)v2445 != v2444) {
    free((void *)v2445);
  }
LABEL_4526:
  if (v2452 != v2454) {
    free(v2452);
  }
  if ((v2449 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v2450, 8);
  }
}

void *sub_1CC86D318(void *a1, unsigned int a2)
{
  if (a2 <= 0x20)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    uint64_t result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = &result[v3];
      goto LABEL_4;
    }
  }
  uint64_t result = a1 + 1;
  uint64_t v6 = a1 + 33;
  do
LABEL_4:
    *result++ = -4096;
  while (result != v6);
  return result;
}

void sub_1CC86D39C(char **a1, uint64_t a2)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)a2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  sub_1CC82F3B8((llvm::SmallPtrSetImplBase *)&v12, v4);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9[0] = 0;
  memset(v8, 0, sizeof(v8));
  int v5 = (char *)v8 + 8;
  uint64_t v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1CC86D4E4((uint64_t)&v12, (uint64_t)&v5, a1);
  if (v9[1] != (char *)v10 + 8) {
    free(v9[1]);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v14 != v15) {
    free(v14);
  }
  if (v13 != v12) {
    free(v13);
  }
}

uint64_t sub_1CC86D4E4(uint64_t a1, uint64_t a2, char **a3)
{
  v47[25] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v40;
  int v35 = v40;
  uint64_t v7 = *(unsigned char **)(a1 + 8);
  if (v7 == *(unsigned char **)a1)
  {
    int v36 = v40;
    int v8 = v7;
  }
  else
  {
    uint64_t v24 = *(unsigned int *)(a1 + 16);
    uint64_t v6 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
    if (!v6)
    {
      if (v24) {
        goto LABEL_47;
      }
      uint64_t v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6) {
        goto LABEL_47;
      }
    }
    int v36 = v6;
    int v8 = *(unsigned char **)a1;
    uint64_t v7 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v37 = v10;
  if (v7 == v8) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    unsigned int v9 = *(_DWORD *)(a1 + 20);
  }
  int v12 = *(_DWORD *)(a1 + 24);
  unsigned int v38 = v9;
  int v39 = v12;
  uint64_t v41 = v43;
  uint64_t v42 = 0x800000000;
  unsigned int v13 = *(_DWORD *)(a1 + 104);
  if (v13 && &v35 != (unsigned char **)a1)
  {
    if (v13 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v43, *(const void **)(a1 + 96), 24 * *(unsigned int *)(a1 + 104));
    LODWORD(v42) = v13;
  }
  uint64_t v14 = v31;
  uint64_t v26 = v31;
  uint64_t v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    uint64_t v27 = v31;
    int v16 = v15;
    goto LABEL_14;
  }
  uint64_t v25 = *(unsigned int *)(a2 + 16);
  uint64_t v14 = malloc_type_malloc(8 * v25, 0x4065EBACuLL);
  if (!v14 && (v25 || (uint64_t v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_47:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  uint64_t v27 = v14;
  int v16 = *(const void **)a2;
  uint64_t v15 = *(const void **)(a2 + 8);
LABEL_14:
  unsigned int v18 = *(_DWORD *)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(a2 + 20);
  unsigned int v28 = v18;
  if (v15 == v16) {
    unsigned int v19 = v17;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v19)
  {
    memmove(v14, v15, 8 * v19);
    unsigned int v17 = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 24);
  unsigned int v29 = v17;
  int v30 = v20;
  int v32 = v34;
  uint64_t v33 = 0x800000000;
  unsigned int v21 = *(_DWORD *)(a2 + 104);
  if (v21 && &v26 != (unsigned char **)a2)
  {
    if (v21 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v34, *(const void **)(a2 + 96), 24 * *(unsigned int *)(a2 + 104));
    LODWORD(v33) = v21;
  }
  sub_1CC86D7D8((uint64_t)&v35, (uint64_t)&v26, a3, (uint64_t)&v44);
  uint64_t v22 = v47[24];
  if (v46 != v47) {
    free(v46);
  }
  if (v45 != v44) {
    free(v45);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v27 != v26) {
    free(v27);
  }
  if (v41 != v43) {
    free(v41);
  }
  if (v36 != v35) {
    free(v36);
  }
  return v22;
}

void sub_1CC86D7D8(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[24] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  int v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC86DA94((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CC86DA94(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v35[24] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = v32;
  unsigned int v9 = *(unsigned char **)a1;
  int v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    unsigned int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    unsigned int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v33 = v35;
  unint64_t v34 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11 && &v27 != (unsigned char **)a1)
  {
    int v12 = *(const void **)(a1 + 96);
    if (v12 == (const void *)(a1 + 112))
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v35, v12, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v34) = v11;
    }
    else
    {
      uint64_t v33 = *(void **)(a1 + 96);
      unint64_t v34 = __PAIR64__(*(_DWORD *)(a1 + 108), v11);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v18 = v23;
  uint64_t v14 = *(unsigned char **)a2;
  unsigned int v13 = *(const void **)(a2 + 8);
  if (v13 == *(const void **)a2)
  {
    unsigned int v19 = v23;
    uint64_t v15 = *(unsigned int *)(a2 + 20);
    if (v15) {
      memmove(v23, v13, 8 * v15);
    }
  }
  else
  {
    unsigned int v19 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v14;
    LODWORD(v15) = *(_DWORD *)(a2 + 20);
  }
  int v20 = *(_DWORD *)(a2 + 16);
  int v21 = v15;
  int v22 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v24 = v26;
  unint64_t v25 = 0x800000000;
  unsigned int v16 = *(_DWORD *)(a2 + 104);
  if (v16 && &v18 != (unsigned char **)a2)
  {
    unsigned int v17 = *(const void **)(a2 + 96);
    if (v17 == (const void *)(a2 + 112))
    {
      if (v16 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v26, v17, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v25) = v16;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 96);
      unint64_t v25 = __PAIR64__(*(_DWORD *)(a2 + 108), v16);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC86DD50((uint64_t)&v27, (uint64_t)&v18, a3, a4);
  if (v24 != v26) {
    free(v24);
  }
  if (v19 != v18) {
    free(v19);
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CC86DD50(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  v123[24] = *MEMORY[0x1E4F143B8];
  int v8 = v106;
  uint64_t v101 = v106;
  unsigned int v9 = *(unsigned char **)(a1 + 8);
  if (v9 == *(unsigned char **)a1)
  {
    uint64_t v102 = v106;
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v40 = *(unsigned int *)(a1 + 16);
    int v8 = malloc_type_malloc(8 * v40, 0x4065EBACuLL);
    if (!v8 && (v40 || (int v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v102 = v8;
    uint64_t v10 = *(unsigned char **)a1;
    unsigned int v9 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 20);
  unsigned int v103 = v12;
  if (v9 == v10) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
  }
  int v14 = *(_DWORD *)(a1 + 24);
  unsigned int v104 = v11;
  int v105 = v14;
  unsigned int v107 = v109;
  uint64_t v108 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a1 + 104);
  if (v15 && &v101 != (unsigned char **)a1)
  {
    if (v15 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v109, *(const void **)(a1 + 96), 24 * *(unsigned int *)(a1 + 104));
    LODWORD(v108) = v15;
  }
  int v92 = v97;
  unsigned int v17 = *(unsigned char **)a2;
  unsigned int v16 = *(const void **)(a2 + 8);
  if (v16 == *(const void **)a2)
  {
    uint64_t v93 = v97;
    uint64_t v18 = *(unsigned int *)(a2 + 20);
    if (v18) {
      memmove(v97, v16, 8 * v18);
    }
  }
  else
  {
    uint64_t v93 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v17;
    LODWORD(v18) = *(_DWORD *)(a2 + 20);
  }
  int v94 = *(_DWORD *)(a2 + 16);
  int v95 = v18;
  int v96 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v98 = v100;
  unint64_t v99 = 0x800000000;
  unsigned int v19 = *(_DWORD *)(a2 + 104);
  if (v19 && &v92 != (unsigned char **)a2)
  {
    int v20 = *(const void **)(a2 + 96);
    if (v20 == (const void *)(a2 + 112))
    {
      if (v19 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v100, v20, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v99) = v19;
    }
    else
    {
      int v98 = *(void **)(a2 + 96);
      unint64_t v99 = __PAIR64__(*(_DWORD *)(a2 + 108), v19);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC86E644((uint64_t)&v101, (uint64_t)&v92, (uint64_t)&v110);
  if (v98 != v100) {
    free(v98);
  }
  if (v93 != v92) {
    free(v93);
  }
  if (v107 != v109) {
    free(v107);
  }
  if (v102 != v101) {
    free(v102);
  }
  unsigned int v76 = v81;
  if (__src == v110)
  {
    unsigned int v77 = v81;
    int v21 = HIDWORD(v112);
    if (HIDWORD(v112)) {
      memmove(v81, __src, 8 * HIDWORD(v112));
    }
  }
  else
  {
    unsigned int v77 = __src;
    __src = v110;
    int v21 = HIDWORD(v112);
  }
  int v78 = v112;
  int v79 = v21;
  int v80 = v113;
  uint64_t v112 = 8;
  int v113 = 0;
  int v82 = v84;
  uint64_t v83 = 0x800000000;
  int v22 = v115;
  if (v115)
  {
    if (v114 == v116)
    {
      if (v115 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v84, v114, 24 * v115);
      LODWORD(v83) = v22;
    }
    else
    {
      int v82 = v114;
      uint64_t v83 = v115;
      unsigned int v114 = v116;
      HIDWORD(v115) = 0;
    }
    LODWORD(v115) = 0;
  }
  uint64_t v67 = v72;
  if (v118 == v117)
  {
    unsigned int v68 = v72;
    int v23 = HIDWORD(v119);
    if (HIDWORD(v119)) {
      memmove(v72, v118, 8 * HIDWORD(v119));
    }
  }
  else
  {
    unsigned int v68 = v118;
    uint64_t v118 = v117;
    int v23 = HIDWORD(v119);
  }
  int v69 = v119;
  int v70 = v23;
  int v71 = v120;
  uint64_t v119 = 8;
  int v120 = 0;
  unint64_t v73 = v75;
  uint64_t v74 = 0x800000000;
  int v24 = v122;
  if (v122)
  {
    if (v121 == v123)
    {
      if (v122 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v75, v121, 24 * v122);
      LODWORD(v74) = v24;
    }
    else
    {
      unint64_t v73 = v121;
      uint64_t v74 = v122;
      uint64_t v121 = v123;
      HIDWORD(v122) = 0;
    }
    LODWORD(v122) = 0;
  }
  sub_1CC86EB30((llvm::SmallPtrSetImplBase *)&v76, (uint64_t)&v67, a3, (uint64_t)&v85);
  if (v73 != v75) {
    free(v73);
  }
  if (v68 != v67) {
    free(v68);
  }
  if (v82 != v84) {
    free(v82);
  }
  if (v77 != v76) {
    free(v77);
  }
  unsigned int v50 = v55;
  uint64_t v26 = *(unsigned char **)a1;
  unint64_t v25 = *(const void **)(a1 + 8);
  if (v25 == *(const void **)a1)
  {
    uint64_t v51 = v55;
    uint64_t v27 = *(unsigned int *)(a1 + 20);
    if (v27) {
      memmove(v55, v25, 8 * v27);
    }
  }
  else
  {
    uint64_t v51 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v26;
    LODWORD(v27) = *(_DWORD *)(a1 + 20);
  }
  int v52 = *(_DWORD *)(a1 + 16);
  int v53 = v27;
  int v54 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  unsigned int v56 = v58;
  unint64_t v57 = 0x800000000;
  unsigned int v28 = *(_DWORD *)(a1 + 104);
  if (v28 && &v50 != (unsigned char **)a1)
  {
    int v29 = *(const void **)(a1 + 96);
    if (v29 == (const void *)(a1 + 112))
    {
      if (v28 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v58, v29, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v57) = v28;
    }
    else
    {
      unsigned int v56 = *(void **)(a1 + 96);
      unint64_t v57 = __PAIR64__(*(_DWORD *)(a1 + 108), v28);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v41 = v46;
  if (v86 == v85)
  {
    uint64_t v42 = v46;
    int v30 = HIDWORD(v87);
    if (HIDWORD(v87)) {
      memmove(v46, v86, 8 * HIDWORD(v87));
    }
  }
  else
  {
    uint64_t v42 = v86;
    unsigned int v86 = v85;
    int v30 = HIDWORD(v87);
  }
  int v43 = v87;
  int v44 = v30;
  int v45 = v88;
  uint64_t v87 = 8;
  int v88 = 0;
  uint64_t v47 = v49;
  uint64_t v48 = 0x800000000;
  int v31 = v90;
  if (v90)
  {
    if (v89 == v91)
    {
      if (v90 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v49, v89, 24 * v90);
      LODWORD(v48) = v31;
    }
    else
    {
      uint64_t v47 = v89;
      uint64_t v48 = v90;
      unsigned int v89 = v91;
      HIDWORD(v90) = 0;
    }
    LODWORD(v90) = 0;
  }
  sub_1CC86EDA8((uint64_t)&v50, (uint64_t)&v41, (uint64_t)&v59);
  uint64_t v32 = v91[24];
  uint64_t v33 = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  unint64_t v34 = v60;
  int v35 = v59;
  if (v60 == v59)
  {
    *(void *)(a4 + 8) = v33;
    int v36 = HIDWORD(v61);
    if (HIDWORD(v61)) {
      memmove(v33, v34, 8 * HIDWORD(v61));
    }
  }
  else
  {
    *(void *)(a4 + 8) = v60;
    uint64_t v60 = v35;
    int v36 = HIDWORD(v61);
  }
  *(void *)(a4 + 96) = a4 + 112;
  int v37 = v62;
  *(_DWORD *)(a4 + 16) = v61;
  *(_DWORD *)(a4 + 20) = v36;
  *(_DWORD *)(a4 + 24) = v37;
  uint64_t v61 = 8;
  int v62 = 0;
  *(void *)(a4 + 104) = 0x800000000;
  unsigned int v38 = v64;
  if (v64 && &v59 != (void **)a4)
  {
    if (v63 == v66)
    {
      if (v64 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a4 + 112), v63, 24 * v64);
      *(_DWORD *)(a4 + 104) = v38;
    }
    else
    {
      *(void *)(a4 + 96) = v63;
      int v39 = v65;
      *(_DWORD *)(a4 + 104) = v38;
      *(_DWORD *)(a4 + 108) = v39;
      unsigned int v63 = v66;
      int v65 = 0;
    }
    unsigned int v64 = 0;
  }
  *(void *)(a4 + 304) = v32;
  if (v63 != v66) {
    free(v63);
  }
  if (v60 != v59) {
    free(v60);
  }
  if (v47 != v49) {
    free(v47);
  }
  if (v42 != v41) {
    free(v42);
  }
  if (v56 != v58) {
    free(v56);
  }
  if (v51 != v50) {
    free(v51);
  }
  if (v89 != v91) {
    free(v89);
  }
  if (v86 != v85) {
    free(v86);
  }
  if (v121 != v123) {
    free(v121);
  }
  if (v118 != v117) {
    free(v118);
  }
  if (v114 != v116) {
    free(v114);
  }
  if (__src != v110) {
    free(__src);
  }
}

void sub_1CC86E644(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v62[24] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = v51;
  uint64_t v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v47 = v51;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v51, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v47 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v48 = *(_DWORD *)(a1 + 16);
  int v49 = v8;
  int v50 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v52 = v54;
  unint64_t v53 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v46 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v54, v10, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v53) = v9;
    }
    else
    {
      int v52 = *(void **)(a1 + 96);
      unint64_t v53 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  sub_1CC86F054((uint64_t)&v46, (uint64_t)&v55);
  int v29 = v34;
  unsigned int v12 = *(unsigned char **)a2;
  unsigned int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    int v30 = v34;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v34, v11, 8 * v13);
    }
  }
  else
  {
    int v30 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  int v31 = *(_DWORD *)(a2 + 16);
  int v32 = v13;
  int v33 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v35 = v37;
  unint64_t v36 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v29 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v37, v15, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v36) = v14;
    }
    else
    {
      int v35 = *(void **)(a2 + 96);
      unint64_t v36 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC86F054((uint64_t)&v29, (uint64_t)&v38);
  unsigned int v16 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  unsigned int v17 = __src;
  uint64_t v18 = v55;
  if (__src == v55)
  {
    *(void *)(a3 + 8) = v16;
    int v19 = HIDWORD(v57);
    if (HIDWORD(v57)) {
      memmove(v16, v17, 8 * HIDWORD(v57));
    }
  }
  else
  {
    *(void *)(a3 + 8) = __src;
    __src = v18;
    int v19 = HIDWORD(v57);
  }
  *(void *)(a3 + 96) = a3 + 112;
  int v20 = v58;
  *(_DWORD *)(a3 + 16) = v57;
  *(_DWORD *)(a3 + 20) = v19;
  *(_DWORD *)(a3 + 24) = v20;
  uint64_t v57 = 8;
  int v58 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  unsigned int v21 = v60;
  if (v60 && &v55 != (void **)a3)
  {
    if (v59 == v62)
    {
      if (v60 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v59, 24 * v60);
      *(_DWORD *)(a3 + 104) = v21;
    }
    else
    {
      *(void *)(a3 + 96) = v59;
      int v28 = v61;
      *(_DWORD *)(a3 + 104) = v21;
      *(_DWORD *)(a3 + 108) = v28;
      uint64_t v59 = v62;
      int v61 = 0;
    }
    unsigned int v60 = 0;
  }
  int v22 = (void *)(a3 + 336);
  *(void *)(a3 + 304) = a3 + 336;
  int v24 = v38;
  int v23 = v39;
  if (v39 == v38)
  {
    *(void *)(a3 + 312) = v22;
    int v25 = HIDWORD(v40);
    if (HIDWORD(v40)) {
      memmove(v22, v23, 8 * HIDWORD(v40));
    }
  }
  else
  {
    *(void *)(a3 + 312) = v39;
    int v39 = v24;
    int v25 = HIDWORD(v40);
  }
  int v26 = v41;
  *(_DWORD *)(a3 + 320) = v40;
  *(_DWORD *)(a3 + 324) = v25;
  *(_DWORD *)(a3 + 328) = v26;
  uint64_t v40 = 8;
  int v41 = 0;
  *(void *)(a3 + 400) = a3 + 416;
  *(void *)(a3 + 408) = 0x800000000;
  unsigned int v27 = v43;
  if (v43 && (void **)(a3 + 304) != &v38)
  {
    if (v42 == v45)
    {
      if (v43 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 416), v42, 24 * v43);
      *(_DWORD *)(a3 + 408) = v27;
    }
    else
    {
      *(void *)(a3 + 400) = v42;
      *(_DWORD *)(a3 + 408) = v27;
      *(_DWORD *)(a3 + 412) = v44;
      uint64_t v42 = v45;
      int v44 = 0;
    }
    unsigned int v43 = 0;
  }
  if (v42 != v45) {
    free(v42);
  }
  if (v39 != v38) {
    free(v39);
  }
  if (v35 != v37) {
    free(v35);
  }
  if (v30 != v29) {
    free(v30);
  }
  if (v59 != v62) {
    free(v59);
  }
  if (__src != v55) {
    free(__src);
  }
  if (v52 != v54) {
    free(v52);
  }
  if (v47 != v46) {
    free(v47);
  }
}

void *sub_1CC86EB30@<X0>(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  while (1)
  {
    uint64_t v8 = *((unsigned int *)this + 26);
    unsigned int v9 = (char *)*((void *)this + 12);
    if (v8 != *(_DWORD *)(a2 + 104)) {
      goto LABEL_11;
    }
    if (!v8) {
      break;
    }
    uint64_t v10 = *(void *)(a2 + 96);
    unsigned int v11 = (char *)*((void *)this + 12);
    while (*(void *)v11 == *(void *)v10 && *((_DWORD *)v11 + 4) == *(_DWORD *)(v10 + 16))
    {
      v11 += 24;
      v10 += 24;
      if (v11 == &v9[24 * v8]) {
        goto LABEL_30;
      }
    }
LABEL_11:
    uint64_t v13 = &v9[24 * v8];
    unsigned int v15 = a3[1];
    unint64_t v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      unsigned int v17 = *a3;
      uint64_t v18 = (v15 - *a3) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
        abort();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          sub_1CB833614();
        }
        int v22 = (char *)operator new(8 * v21);
      }
      else
      {
        int v22 = 0;
      }
      int v23 = &v22[8 * v18];
      *(void *)int v23 = *((void *)v13 - 3);
      unsigned int v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          uint64_t v24 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        unsigned int v15 = *a3;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        LODWORD(v8) = *((_DWORD *)this + 26);
      }
    }
    else
    {
      *(void *)unsigned int v15 = *((void *)v13 - 3);
      unsigned int v16 = v15 + 8;
    }
    a3[1] = v16;
    *((_DWORD *)this + 26) = v8 - 1;
    if (v8 != 1) {
      sub_1CC82F454(this);
    }
  }
LABEL_30:
  uint64_t result = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  uint64_t v27 = *(void *)this;
  int v26 = (const void *)*((void *)this + 1);
  if (v26 == *(const void **)this)
  {
    *(void *)(a4 + 8) = result;
    uint64_t v28 = *((unsigned int *)this + 5);
    if (v28) {
      uint64_t result = memmove(result, v26, 8 * v28);
    }
  }
  else
  {
    *(void *)(a4 + 8) = v26;
    *((void *)this + 1) = v27;
    LODWORD(v28) = *((_DWORD *)this + 5);
  }
  *(void *)(a4 + 96) = a4 + 112;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)this + 4);
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  *((void *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  *(void *)(a4 + 104) = 0x800000000;
  if (v8 && (llvm::SmallPtrSetImplBase *)a4 != this)
  {
    if (v9 == (char *)this + 112)
    {
      if (v8 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t result = memcpy((void *)(a4 + 112), v9, 24 * v8);
      *(_DWORD *)(a4 + 104) = v8;
    }
    else
    {
      *(void *)(a4 + 96) = v9;
      int v29 = *((_DWORD *)this + 27);
      *(_DWORD *)(a4 + 104) = v8;
      *(_DWORD *)(a4 + 108) = v29;
      *((void *)this + 12) = (char *)this + 112;
      *((_DWORD *)this + 27) = 0;
    }
    *((_DWORD *)this + 26) = 0;
  }
  *(void *)(a4 + 304) = a3;
  return result;
}

void sub_1CC86EDA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v33[24] = *MEMORY[0x1E4F143B8];
  int v25 = v30;
  uint64_t v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    int v26 = v30;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v30, v6, 8 * v8);
    }
  }
  else
  {
    int v26 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v27 = *(_DWORD *)(a1 + 16);
  int v28 = v8;
  int v29 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v31 = v33;
  unint64_t v32 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v25 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v33, v10, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v32) = v9;
    }
    else
    {
      int v31 = *(void **)(a1 + 96);
      unint64_t v32 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v16 = v21;
  unsigned int v12 = *(unsigned char **)a2;
  unsigned int v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    unsigned int v17 = v21;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v21, v11, 8 * v13);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v13;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v22 = v24;
  unint64_t v23 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v16 != (unsigned char **)a2)
  {
    unsigned int v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v24, v15, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v23) = v14;
    }
    else
    {
      int v22 = *(void **)(a2 + 96);
      unint64_t v23 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  sub_1CC86F2E0((uint64_t)&v25, (uint64_t)&v16, a3);
  if (v22 != v24) {
    free(v22);
  }
  if (v17 != v16) {
    free(v17);
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v26 != v25) {
    free(v26);
  }
}

void sub_1CC86F054(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v27[24] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v24;
  int v20 = v24;
  int v5 = *(unsigned char **)(a1 + 8);
  if (v5 == *(unsigned char **)a1)
  {
    unint64_t v21 = v24;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    uint64_t v4 = malloc_type_malloc(8 * v19, 0x4065EBACuLL);
    if (!v4 && (v19 || (uint64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unint64_t v21 = v4;
    uint64_t v6 = *(unsigned char **)a1;
    int v5 = *(unsigned char **)(a1 + 8);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  LODWORD(v22) = v8;
  if (v5 == v6) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    unsigned int v7 = *(_DWORD *)(a1 + 20);
  }
  int v10 = *(_DWORD *)(a1 + 24);
  HIDWORD(v22) = v7;
  int v23 = v10;
  int v25 = v27;
  uint64_t v26 = 0x800000000;
  unsigned int v11 = *(_DWORD *)(a1 + 104);
  if (v11)
  {
    if (&v20 == (unsigned char **)a1)
    {
      unsigned int v11 = 0;
    }
    else
    {
      if (v11 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v27, *(const void **)(a1 + 96), 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v26) = v11;
    }
  }
  unsigned int v12 = (void *)(a2 + 32);
  *(void *)a2 = a2 + 32;
  unsigned int v14 = v20;
  uint64_t v13 = v21;
  if (v21 == v20)
  {
    *(void *)(a2 + 8) = v12;
    int v15 = HIDWORD(v22);
    if (HIDWORD(v22)) {
      memmove(v12, v13, 8 * HIDWORD(v22));
    }
  }
  else
  {
    *(void *)(a2 + 8) = v21;
    unint64_t v21 = v14;
    int v15 = HIDWORD(v22);
  }
  int v16 = v23;
  *(_DWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 20) = v15;
  *(_DWORD *)(a2 + 24) = v16;
  uint64_t v22 = 8;
  *(void *)(a2 + 96) = a2 + 112;
  int v23 = 0;
  *(void *)(a2 + 104) = 0x800000000;
  unsigned int v17 = v25;
  if (v11 && &v20 != (unsigned char **)a2)
  {
    if (v25 == v27)
    {
      memcpy((void *)(a2 + 112), v27, 24 * v11);
      *(_DWORD *)(a2 + 104) = v11;
      unsigned int v17 = v25;
    }
    else
    {
      *(void *)(a2 + 96) = v25;
      int v18 = HIDWORD(v26);
      *(_DWORD *)(a2 + 104) = v11;
      *(_DWORD *)(a2 + 108) = v18;
      int v25 = v27;
      HIDWORD(v26) = 0;
      unsigned int v17 = v27;
    }
    LODWORD(v26) = 0;
  }
  if (v17 != v27) {
    free(v17);
  }
  if (v21 != v20) {
    free(v21);
  }
}

void sub_1CC86F2E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v38[24] = *MEMORY[0x1E4F143B8];
  int v30 = v35;
  unsigned int v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    int v31 = v35;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v35, v6, 8 * v8);
    }
  }
  else
  {
    int v31 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v32 = *(_DWORD *)(a1 + 16);
  int v33 = v8;
  int v34 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  unint64_t v36 = v38;
  unint64_t v37 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v30 != (unsigned char **)a1)
  {
    int v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v38, v10, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v37) = v9;
    }
    else
    {
      unint64_t v36 = *(void **)(a1 + 96);
      unint64_t v37 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  unsigned int v11 = v26;
  uint64_t v22 = v26;
  uint64_t v13 = *(unsigned char **)a2;
  unsigned int v12 = *(unsigned char **)(a2 + 8);
  if (v12 == *(unsigned char **)a2)
  {
    int v23 = v26;
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v14) {
      memmove(v26, v12, 8 * v14);
    }
    unsigned int v12 = v26;
  }
  else
  {
    int v23 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v24) = *(_DWORD *)(a2 + 16);
  HIDWORD(v24) = v14;
  int v25 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  int v27 = v29;
  unint64_t v28 = 0x800000000;
  unsigned int v15 = *(_DWORD *)(a2 + 104);
  if (v15)
  {
    if (&v22 == (unsigned char **)a2)
    {
      unsigned int v15 = 0;
    }
    else
    {
      int v16 = *(const void **)(a2 + 96);
      if (v16 == (const void *)(a2 + 112))
      {
        if (v15 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v29, v16, 24 * *(unsigned int *)(a2 + 104));
        LODWORD(v28) = v15;
        unsigned int v11 = v22;
        unsigned int v12 = v23;
      }
      else
      {
        int v27 = *(void **)(a2 + 96);
        unint64_t v28 = __PAIR64__(*(_DWORD *)(a2 + 108), v15);
        *(void *)(a2 + 96) = a2 + 112;
        *(_DWORD *)(a2 + 108) = 0;
      }
      *(_DWORD *)(a2 + 104) = 0;
    }
  }
  unsigned int v17 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  if (v12 == v11)
  {
    *(void *)(a3 + 8) = v17;
    int v18 = HIDWORD(v24);
    if (HIDWORD(v24)) {
      memmove(v17, v11, 8 * HIDWORD(v24));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v12;
    int v23 = v11;
    int v18 = HIDWORD(v24);
  }
  int v19 = v25;
  *(_DWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 20) = v18;
  *(_DWORD *)(a3 + 24) = v19;
  uint64_t v24 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v25 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  int v20 = v27;
  if (v15 && &v22 != (unsigned char **)a3)
  {
    if (v27 == v29)
    {
      if (v15 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v29, 24 * v15);
      *(_DWORD *)(a3 + 104) = v15;
      int v20 = v27;
    }
    else
    {
      *(void *)(a3 + 96) = v27;
      int v21 = HIDWORD(v28);
      *(_DWORD *)(a3 + 104) = v15;
      *(_DWORD *)(a3 + 108) = v21;
      int v27 = v29;
      HIDWORD(v28) = 0;
      int v20 = v29;
    }
    LODWORD(v28) = 0;
  }
  if (v20 != v29) {
    free(v20);
  }
  if (v23 != v22) {
    free(v23);
  }
  if (v36 != v38) {
    free(v36);
  }
  if (v31 != v30) {
    free(v31);
  }
}

void *sub_1CC86F684(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = result + 1;
    do
    {
      if (*(unsigned char *)v5)
      {
        int v7 = 32;
        uint64_t v8 = v6;
      }
      else
      {
        int v7 = *(_DWORD *)(v5 + 16);
        if (!v7)
        {
          unsigned int v17 = 0;
LABEL_19:
          uint64_t result = sub_1CC872F3C(v5, (uint64_t)v4, v4, v17);
          *uint64_t result = *v4;
          unint64_t v18 = *(unsigned int *)(v5 + 272);
          if (v18 >= *(unsigned int *)(v5 + 276)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v5 + 264) + 8 * v18) = *v4;
          ++*(_DWORD *)(v5 + 272);
          goto LABEL_21;
        }
        uint64_t v8 = *(void **)(v5 + 8);
      }
      int v9 = v7 - 1;
      unsigned int v10 = ((*v4 >> 4) ^ (*v4 >> 9)) & v9;
      unsigned int v11 = &v8[v10];
      uint64_t v12 = *v11;
      if (*v4 != *v11)
      {
        uint64_t v13 = 0;
        int v14 = 1;
        while (v12 != -4096)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == -8192;
          }
          if (v15) {
            uint64_t v13 = v11;
          }
          unsigned int v16 = v10 + v14++;
          unsigned int v10 = v16 & v9;
          unsigned int v11 = &v8[v10];
          uint64_t v12 = *v11;
          if (*v4 == *v11) {
            goto LABEL_21;
          }
        }
        if (v13) {
          unsigned int v17 = v13;
        }
        else {
          unsigned int v17 = v11;
        }
        goto LABEL_19;
      }
LABEL_21:
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC86F7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (!a2) {
    return 1;
  }
  uint64_t v8 = a2;
  uint64_t v10 = a3 + 8;
  unsigned int v11 = (unsigned int *)a5 + 5;
  uint64_t v12 = (unsigned int *)(a5 + 2);
  while (1)
  {
    uint64_t v13 = *(void *)(v8 + 24);
    if (v13) {
      BOOL v14 = *(unsigned __int8 *)(v13 + 16) >= 0x1Cu;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14) {
      goto LABEL_7;
    }
    uint64_t v57 = 0;
    if (sub_1CBF98030(*(void *)(a1 + 2144), *(_DWORD *)(a1 + 2160), v13, &v57))
    {
      uint64_t v15 = v57;
      uint64_t v16 = *(void *)(a1 + 2144);
      uint64_t v17 = *(unsigned int *)(a1 + 2160);
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 2144);
      uint64_t v17 = *(unsigned int *)(a1 + 2160);
      uint64_t v15 = v16 + 32 * v17;
    }
    if (v15 != v16 + 32 * v17 && (*(void *)(v15 + 8) == v8 || *(void *)(v15 + 16) == v8)) {
      goto LABEL_7;
    }
    if (*(unsigned char *)a3)
    {
      int v18 = 32;
      uint64_t v19 = v10;
    }
    else
    {
      int v18 = *(_DWORD *)(a3 + 16);
      if (!v18) {
        return 0;
      }
      uint64_t v19 = *(void *)(a3 + 8);
    }
    unsigned int v20 = (v13 >> 4) ^ (v13 >> 9);
    int v21 = v18 - 1;
    unsigned int v22 = v21 & v20;
    uint64_t v23 = *(void *)(v19 + 8 * (v21 & v20));
    if (v13 != v23) {
      break;
    }
LABEL_23:
    if (a5)
    {
      uint64_t v27 = *a5;
      uint64_t v26 = a5[1];
      if (v26 == *a5)
      {
        uint64_t v28 = *v11;
        int v29 = (void *)(v26 + 8 * v28);
        if (v28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 8 * v28;
          while (*(void *)(v26 + v30) != v13)
          {
            v30 += 8;
            if (v31 == v30) {
              goto LABEL_42;
            }
          }
          int v29 = (void *)(v26 + v30);
        }
LABEL_42:
        uint64_t v27 = a5[1];
      }
      else
      {
        uint64_t v32 = *v12;
        int v33 = v32 - 1;
        unsigned int v34 = (v32 - 1) & v20;
        int v29 = (void *)(v26 + 8 * v34);
        uint64_t v35 = *v29;
        if (*v29 == -1)
        {
          unint64_t v36 = 0;
LABEL_79:
          if (v36) {
            int v29 = v36;
          }
          if (*v29 != v13) {
            int v29 = (void *)(v26 + 8 * v32);
          }
        }
        else
        {
          unint64_t v36 = 0;
          int v37 = 1;
          while (v35 != v13)
          {
            if (v36) {
              BOOL v38 = 0;
            }
            else {
              BOOL v38 = v35 == -2;
            }
            if (v38) {
              unint64_t v36 = v29;
            }
            unsigned int v39 = v34 + v37++;
            unsigned int v34 = v39 & v33;
            int v29 = (void *)(v26 + 8 * (v39 & v33));
            uint64_t v35 = *v29;
            if (*v29 == -1) {
              goto LABEL_79;
            }
          }
        }
      }
      uint64_t v40 = v26 == v27 ? v11 : v12;
      if (v29 != (void *)(v26 + 8 * *v40)) {
        return 0;
      }
    }
    uint64_t v42 = *a4;
    uint64_t v41 = a4[1];
    if (v41 == *a4)
    {
      uint64_t v43 = *((unsigned int *)a4 + 5);
      int v44 = (void *)(v41 + 8 * v43);
      if (v43)
      {
        uint64_t v45 = 0;
        while (*(void *)(v41 + v45) != v13)
        {
          v45 += 8;
          if (8 * v43 == v45) {
            goto LABEL_66;
          }
        }
        int v44 = (void *)(v41 + v45);
      }
LABEL_66:
      uint64_t v42 = a4[1];
    }
    else
    {
      uint64_t v46 = *((unsigned int *)a4 + 4);
      int v47 = v46 - 1;
      unsigned int v48 = (v46 - 1) & v20;
      int v44 = (void *)(v41 + 8 * v48);
      uint64_t v49 = *v44;
      if (*v44 == -1)
      {
        int v50 = 0;
LABEL_73:
        if (v50) {
          int v44 = v50;
        }
        LODWORD(v43) = *((_DWORD *)a4 + 5);
        unsigned int v55 = (void *)(v41 + 8 * v46);
        if (*v44 != v13) {
          int v44 = v55;
        }
      }
      else
      {
        int v50 = 0;
        int v51 = 1;
        while (v49 != v13)
        {
          if (v50) {
            BOOL v52 = 0;
          }
          else {
            BOOL v52 = v49 == -2;
          }
          if (v52) {
            int v50 = v44;
          }
          unsigned int v53 = v48 + v51++;
          unsigned int v48 = v53 & v47;
          int v44 = (void *)(v41 + 8 * (v53 & v47));
          uint64_t v49 = *v44;
          if (*v44 == -1) {
            goto LABEL_73;
          }
        }
        LODWORD(v43) = *((_DWORD *)a4 + 5);
      }
    }
    unsigned int v54 = v41 == v42 ? v43 : *((_DWORD *)a4 + 4);
    if (v44 != (void *)(v41 + 8 * v54)) {
      return 0;
    }
LABEL_7:
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      return 1;
    }
  }
  int v24 = 1;
  while (v23 != -4096)
  {
    unsigned int v25 = v22 + v24++;
    unsigned int v22 = v25 & v21;
    uint64_t v23 = *(void *)(v19 + 8 * v22);
    if (v13 == v23) {
      goto LABEL_23;
    }
  }
  return 0;
}

uint64_t sub_1CC86FAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(unsigned __int8 *)(a2 + 16) <= 0x1Bu) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a2;
  }
  int v6 = *(_DWORD *)(a1 + 2184);
  if (v6)
  {
    uint64_t v23 = *(void *)(a1 + 2168);
    int v24 = v6 - 1;
    unsigned int v25 = ((v5 >> 4) ^ (v5 >> 9)) & (v6 - 1);
    uint64_t v26 = *(void *)(v23 + 32 * v25);
    if (v5 == v26) {
      return 1;
    }
    int v27 = 1;
    while (v26 != -4096)
    {
      unsigned int v28 = v25 + v27++;
      unsigned int v25 = v28 & v24;
      uint64_t v26 = *(void *)(v23 + 32 * (v28 & v24));
      uint64_t v21 = 1;
      if (v5 == v26) {
        return v21;
      }
    }
  }
  uint64_t v8 = *(void *)a4;
  uint64_t v7 = *(void *)(a4 + 8);
  if (v7 == *(void *)a4)
  {
    uint64_t v9 = *(unsigned int *)(a4 + 20);
    uint64_t v10 = (void *)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(void *)(v7 + v11) != a2)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_23;
        }
      }
      uint64_t v10 = (void *)(v7 + v11);
    }
LABEL_23:
    uint64_t v8 = *(void *)(a4 + 8);
    goto LABEL_30;
  }
  uint64_t v12 = *(unsigned int *)(a4 + 16);
  int v13 = v12 - 1;
  unsigned int v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v10 = (void *)(v7 + 8 * v14);
  uint64_t v15 = *v10;
  if (*v10 != -1)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = v10;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      uint64_t v10 = (void *)(v7 + 8 * (v19 & v13));
      uint64_t v15 = *v10;
      if (*v10 == -1) {
        goto LABEL_25;
      }
    }
LABEL_29:
    LODWORD(v9) = *(_DWORD *)(a4 + 20);
    goto LABEL_30;
  }
  uint64_t v16 = 0;
LABEL_25:
  if (v16) {
    uint64_t v10 = v16;
  }
  if (*v10 == a2) {
    goto LABEL_29;
  }
  LODWORD(v9) = *(_DWORD *)(a4 + 20);
  uint64_t v10 = (void *)(v7 + 8 * v12);
LABEL_30:
  if (v7 == v8) {
    unsigned int v20 = v9;
  }
  else {
    unsigned int v20 = *(_DWORD *)(a4 + 16);
  }
  if (v10 == (void *)(v7 + 8 * v20)) {
    return sub_1CC86F7D8(a1, *(void *)(a2 + 8), a3, (uint64_t *)a4, a5) ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC86FC7C(uint64_t a1, uint64_t a2)
{
  if (a1 && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
    return *(_DWORD *)(a1 + 32) * sub_1CC8749E4(*(void *)(a1 + 24), a2);
  }

  return sub_1CC8749E4(a1, a2);
}

void sub_1CC86FCE0(uint64_t a1, uint64_t a2)
{
  v140[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)a1 + 2168);
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 2184);
  if (v5)
  {
    unsigned int v116 = v5 - 1;
    int v6 = (uint64_t *)(v4 + 32 * ((v5 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
    uint64_t v117 = *v6;
    if (*v6 == a2) {
      goto LABEL_3;
    }
    int v118 = 1;
    LODWORD(v119) = v116 & ((a2 >> 4) ^ (a2 >> 9));
    while (v117 != -4096)
    {
      int v120 = v119 + v118++;
      uint64_t v119 = v120 & v116;
      uint64_t v117 = *(void *)(v4 + 32 * v119);
      if (v117 == a2)
      {
        int v6 = (uint64_t *)(v4 + 32 * v119);
        goto LABEL_3;
      }
    }
  }
  int v6 = (uint64_t *)(v4 + 32 * v5);
LABEL_3:
  int v138 = v140;
  uint64_t v139 = 0x200000000;
  if (v6 != (uint64_t *)(v4 + 32 * v5))
  {
    uint64_t v7 = *((unsigned int *)v6 + 4);
    if (v7)
    {
      uint64_t v8 = (uint64_t *)v6[1];
      uint64_t v9 = &v8[v7];
      do
      {
        uint64_t v10 = *v8;
        uint64_t v132 = 0;
        if (sub_1CBF98030(*(void *)(v2 + 2144), *(_DWORD *)(v2 + 2160), v10, &v132)) {
          uint64_t v11 = (uint64_t)v132;
        }
        else {
          uint64_t v11 = *(void *)(v2 + 2144) + 32 * *(unsigned int *)(v2 + 2160);
        }
        uint64_t v12 = (uint64_t **)(v11 + 8);
        int v13 = (uint64_t **)(v11 + 24);
        do
        {
          uint64_t v14 = **v12;
          if (v14) {
            BOOL v15 = *(unsigned __int8 *)(v14 + 16) >= 0x1Cu;
          }
          else {
            BOOL v15 = 0;
          }
          if (v15)
          {
            if (*(unsigned char *)(v2 + 784))
            {
              int v16 = 32;
              uint64_t v17 = v2 + 792;
            }
            else
            {
              int v16 = *(_DWORD *)(v2 + 800);
              if (!v16) {
                goto LABEL_14;
              }
              uint64_t v17 = *(void *)(v2 + 792);
            }
            unsigned int v18 = (v14 >> 4) ^ (v14 >> 9);
            int v19 = v16 - 1;
            unsigned int v20 = v19 & v18;
            uint64_t v21 = *(void *)(v17 + 8 * (v19 & v18));
            if (v14 == v21)
            {
LABEL_24:
              uint64_t v25 = *v3;
              uint64_t v24 = v3[1];
              if (v24 == *v3)
              {
                uint64_t v26 = *((unsigned int *)v3 + 5);
                int v27 = (void *)(v24 + 8 * v26);
                if (v26)
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = 8 * v26;
                  while (*(void *)(v24 + v28) != v14)
                  {
                    v28 += 8;
                    if (v29 == v28) {
                      goto LABEL_42;
                    }
                  }
                  int v27 = (void *)(v24 + v28);
                }
LABEL_42:
                uint64_t v25 = v3[1];
              }
              else
              {
                uint64_t v30 = *((unsigned int *)v3 + 4);
                int v31 = v30 - 1;
                unsigned int v32 = (v30 - 1) & v18;
                int v27 = (void *)(v24 + 8 * v32);
                uint64_t v33 = *v27;
                if (*v27 == -1)
                {
                  unsigned int v34 = 0;
LABEL_50:
                  if (v34) {
                    int v27 = v34;
                  }
                  if (*v27 != v14) {
                    int v27 = (void *)(v24 + 8 * v30);
                  }
                }
                else
                {
                  unsigned int v34 = 0;
                  int v35 = 1;
                  while (v33 != v14)
                  {
                    if (v34) {
                      BOOL v36 = 0;
                    }
                    else {
                      BOOL v36 = v33 == -2;
                    }
                    if (v36) {
                      unsigned int v34 = v27;
                    }
                    unsigned int v37 = v32 + v35++;
                    unsigned int v32 = v37 & v31;
                    int v27 = (void *)(v24 + 8 * (v37 & v31));
                    uint64_t v33 = *v27;
                    if (*v27 == -1) {
                      goto LABEL_50;
                    }
                  }
                }
              }
              if (v24 == v25) {
                BOOL v38 = (unsigned int *)v3 + 5;
              }
              else {
                BOOL v38 = (unsigned int *)(v3 + 2);
              }
              if (v27 == (void *)(v24 + 8 * *v38))
              {
                if (v139 >= (unint64_t)HIDWORD(v139)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v138 + v139) = v14;
                LODWORD(v139) = v139 + 1;
              }
            }
            else
            {
              int v22 = 1;
              while (v21 != -4096)
              {
                unsigned int v23 = v20 + v22++;
                unsigned int v20 = v23 & v19;
                uint64_t v21 = *(void *)(v17 + 8 * v20);
                if (v14 == v21) {
                  goto LABEL_24;
                }
              }
            }
          }
LABEL_14:
          ++v12;
        }
        while (v12 != v13);
        ++v8;
      }
      while (v8 != v9);
    }
  }
  if (!*(void *)(a2 + 8) && (llvm::wouldInstructionBeTriviallyDead(a2, 0) & 1) != 0)
  {
    LODWORD(v42) = 1;
    goto LABEL_72;
  }
  int v39 = *(_DWORD *)(a2 + 20);
  if ((v39 & 0x40000000) == 0)
  {
    uint64_t v40 = v39 & 0x7FFFFFF;
    uint64_t v41 = a2 - 32 * v40;
    if (v40) {
      goto LABEL_59;
    }
LABEL_71:
    LODWORD(v42) = 0;
    goto LABEL_72;
  }
  uint64_t v41 = *(void *)(a2 - 8);
  uint64_t v40 = v39 & 0x7FFFFFF;
  if (!v40) {
    goto LABEL_71;
  }
LABEL_59:
  uint64_t v42 = 32 * v40;
  do
  {
    if (*(void *)v41) {
      BOOL v43 = *(unsigned __int8 *)(*(void *)v41 + 16) >= 0x1Cu;
    }
    else {
      BOOL v43 = 0;
    }
    if (v43)
    {
      if (v139 >= (unint64_t)HIDWORD(v139)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v138 + v139) = *(void *)v41;
      LODWORD(v139) = v139 + 1;
    }
    v41 += 32;
    v42 -= 32;
  }
  while (v42);
LABEL_72:
  uint64_t v132 = v136;
  uint64_t v133 = v136;
  uint64_t v134 = 8;
  int v135 = 0;
  if (v139)
  {
    int v44 = (uint64_t *)v138;
    uint64_t v45 = (uint64_t *)((char *)v138 + 8 * v139);
    while (1)
    {
      uint64_t v46 = (uint64_t *)*v44;
      int v47 = v132;
      if (v133 == v132)
      {
        int v48 = HIDWORD(v134);
        uint64_t v49 = &v133[8 * HIDWORD(v134)];
        if (HIDWORD(v134))
        {
          uint64_t v50 = 0;
          while (*(uint64_t **)&v133[v50] != v46)
          {
            v50 += 8;
            if (8 * HIDWORD(v134) == v50) {
              goto LABEL_93;
            }
          }
          uint64_t v49 = &v133[v50];
        }
LABEL_93:
        int v47 = v133;
      }
      else
      {
        int v51 = v134 - 1;
        unsigned int v52 = (v134 - 1) & ((v46 >> 4) ^ (v46 >> 9));
        uint64_t v49 = &v133[8 * v52];
        unsigned int v53 = *(uint64_t **)v49;
        if (*(void *)v49 == -1)
        {
          unsigned int v54 = 0;
LABEL_106:
          if (v54) {
            uint64_t v49 = v54;
          }
          int v48 = HIDWORD(v134);
          if (*(uint64_t **)v49 != v46) {
            uint64_t v49 = &v133[8 * v134];
          }
        }
        else
        {
          unsigned int v54 = 0;
          int v55 = 1;
          while (v53 != v46)
          {
            if (v54) {
              BOOL v56 = 0;
            }
            else {
              BOOL v56 = v53 == (uint64_t *)-2;
            }
            if (v56) {
              unsigned int v54 = v49;
            }
            unsigned int v57 = v52 + v55++;
            unsigned int v52 = v57 & v51;
            uint64_t v49 = &v133[8 * (v57 & v51)];
            unsigned int v53 = *(uint64_t **)v49;
            if (*(void *)v49 == -1) {
              goto LABEL_106;
            }
          }
          int v48 = HIDWORD(v134);
        }
      }
      if (v133 == v47) {
        int v58 = v48;
      }
      else {
        int v58 = v134;
      }
      if (v49 != &v133[8 * v58] || (sub_1CC86FAF4(v2, *v44, v2 + 784, v2 + 1856, *(void **)(a1 + 8)) & 1) != 0) {
        goto LABEL_165;
      }
      uint64_t v59 = *(void *)(v2 + 1864);
      uint64_t v60 = *(void *)(v2 + 1856);
      if (v59 == v60)
      {
        uint64_t v61 = *(unsigned int *)(v2 + 1876);
        int v62 = (uint64_t **)(v59 + 8 * v61);
        if (v61)
        {
          uint64_t v63 = 0;
          uint64_t v64 = 8 * v61;
          while (*(uint64_t **)(v59 + v63) != v46)
          {
            v63 += 8;
            if (v64 == v63) {
              goto LABEL_123;
            }
          }
          int v62 = (uint64_t **)(v59 + v63);
        }
LABEL_123:
        uint64_t v60 = *(void *)(v2 + 1864);
      }
      else
      {
        uint64_t v65 = *(unsigned int *)(v2 + 1872);
        int v66 = v65 - 1;
        unsigned int v67 = (v65 - 1) & ((v46 >> 4) ^ (v46 >> 9));
        int v62 = (uint64_t **)(v59 + 8 * v67);
        unsigned int v68 = *v62;
        if (*v62 == (uint64_t *)-1)
        {
          int v69 = 0;
LABEL_153:
          if (v69) {
            int v62 = v69;
          }
          if (*v62 != v46) {
            int v62 = (uint64_t **)(v59 + 8 * v65);
          }
        }
        else
        {
          int v69 = 0;
          int v70 = 1;
          while (v68 != v46)
          {
            if (v69) {
              BOOL v71 = 0;
            }
            else {
              BOOL v71 = v68 == (uint64_t *)-2;
            }
            if (v71) {
              int v69 = v62;
            }
            unsigned int v72 = v67 + v70++;
            unsigned int v67 = v72 & v66;
            int v62 = (uint64_t **)(v59 + 8 * (v72 & v66));
            unsigned int v68 = *v62;
            if (*v62 == (uint64_t *)-1) {
              goto LABEL_153;
            }
          }
        }
      }
      unint64_t v73 = (unsigned int *)(v59 == v60 ? v2 + 1876 : v2 + 1872);
      if (v62 != (uint64_t **)(v59 + 8 * *v73)) {
        goto LABEL_165;
      }
      **(_DWORD **)(a1 + 16) += (8 * sub_1CC86FC7C(*v46, *(void *)(a1 + 24)) + 15) >> 4;
      uint64_t v74 = v133;
      uint64_t v75 = HIDWORD(v134);
      if (v133 != v132) {
        break;
      }
      if (HIDWORD(v134))
      {
        unsigned int v76 = 0;
        uint64_t v77 = 8 * HIDWORD(v134);
        int v78 = (uint64_t **)v133;
        while (*v78 != v46)
        {
          if (*v78 == (uint64_t *)-2) {
            unsigned int v76 = v78;
          }
          ++v78;
          v77 -= 8;
          if (!v77)
          {
            if (!v76) {
              goto LABEL_136;
            }
            *unsigned int v76 = v46;
            --v135;
            goto LABEL_165;
          }
        }
        goto LABEL_165;
      }
LABEL_136:
      unsigned int v79 = v134;
      if (HIDWORD(v134) >= v134) {
        goto LABEL_139;
      }
      ++HIDWORD(v134);
      *(void *)&v133[8 * v75] = v46;
LABEL_165:
      if (++v44 == v45) {
        goto LABEL_173;
      }
    }
    unsigned int v79 = v134;
LABEL_139:
    if (3 * v79 <= 4 * (HIDWORD(v134) - v135))
    {
      if (v79 >= 0x40) {
        v79 *= 2;
      }
      else {
        unsigned int v79 = 128;
      }
    }
    else if (v79 - HIDWORD(v134) >= v79 >> 3)
    {
      goto LABEL_141;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v132, v79);
    unsigned int v79 = v134;
    uint64_t v74 = v133;
LABEL_141:
    unsigned int v80 = v79 - 1;
    unsigned int v81 = (v79 - 1) & ((v46 >> 4) ^ (v46 >> 9));
    int v82 = &v74[8 * v81];
    uint64_t v83 = *(uint64_t **)v82;
    if (*(void *)v82 == -1)
    {
      unsigned int v84 = 0;
LABEL_158:
      if (v84) {
        int v88 = v84;
      }
      else {
        int v88 = (uint64_t **)v82;
      }
      if (*v88 != v46)
      {
        if (*v88 == (uint64_t *)-2) {
          --v135;
        }
        else {
          ++HIDWORD(v134);
        }
        char *v88 = v46;
      }
    }
    else
    {
      unsigned int v84 = 0;
      int v85 = 1;
      while (v83 != v46)
      {
        if (v84) {
          BOOL v86 = 0;
        }
        else {
          BOOL v86 = v83 == (uint64_t *)-2;
        }
        if (v86) {
          unsigned int v84 = (uint64_t **)v82;
        }
        unsigned int v87 = v81 + v85++;
        unsigned int v81 = v87 & v80;
        int v82 = &v74[8 * (v87 & v80)];
        uint64_t v83 = *(uint64_t **)v82;
        if (*(void *)v82 == -1) {
          goto LABEL_158;
        }
      }
    }
    goto LABEL_165;
  }
LABEL_173:
  uint64_t v89 = *(void *)(a1 + 8);
  uint64_t v90 = *(void *)(v89 + 8);
  uint64_t v91 = *(unsigned int *)(v89 + 20);
  if (v90 != *(void *)v89)
  {
    unsigned int v96 = *(_DWORD *)(v89 + 16);
    uint64_t v92 = a2;
    goto LABEL_184;
  }
  uint64_t v92 = a2;
  if (!v91)
  {
LABEL_181:
    unsigned int v96 = *(_DWORD *)(v89 + 16);
    if (v91 < v96)
    {
      *(_DWORD *)(v89 + 20) = v91 + 1;
      *(void *)(v90 + 8 * v91) = a2;
      goto LABEL_205;
    }
LABEL_184:
    if (3 * v96 <= 4 * ((int)v91 - *(_DWORD *)(v89 + 24)))
    {
      if (v96 >= 0x40) {
        v96 *= 2;
      }
      else {
        unsigned int v96 = 128;
      }
    }
    else if (v96 - v91 >= v96 >> 3)
    {
      goto LABEL_186;
    }
    llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v96);
    unsigned int v96 = *(_DWORD *)(v89 + 16);
    uint64_t v90 = *(void *)(v89 + 8);
LABEL_186:
    unsigned int v97 = v96 - 1;
    unsigned int v98 = (v96 - 1) & ((v92 >> 4) ^ (v92 >> 9));
    unint64_t v99 = (uint64_t *)(v90 + 8 * v98);
    uint64_t v100 = *v99;
    if (*v99 == -1)
    {
      uint64_t v101 = 0;
LABEL_198:
      if (v101) {
        int v105 = v101;
      }
      else {
        int v105 = v99;
      }
      if (*v105 != v92)
      {
        if (*v105 == -2) {
          --*(_DWORD *)(v89 + 24);
        }
        else {
          ++*(_DWORD *)(v89 + 20);
        }
        *int v105 = v92;
      }
    }
    else
    {
      uint64_t v101 = 0;
      int v102 = 1;
      while (v100 != v92)
      {
        if (v101) {
          BOOL v103 = 0;
        }
        else {
          BOOL v103 = v100 == -2;
        }
        if (v103) {
          uint64_t v101 = v99;
        }
        unsigned int v104 = v98 + v102++;
        unsigned int v98 = v104 & v97;
        unint64_t v99 = (uint64_t *)(v90 + 8 * (v104 & v97));
        uint64_t v100 = *v99;
        if (*v99 == -1) {
          goto LABEL_198;
        }
      }
    }
    goto LABEL_205;
  }
  uint64_t v93 = 0;
  uint64_t v94 = 8 * v91;
  int v95 = *(uint64_t **)(v89 + 8);
  while (*v95 != a2)
  {
    if (*v95 == -2) {
      uint64_t v93 = v95;
    }
    ++v95;
    v94 -= 8;
    if (!v94)
    {
      if (!v93) {
        goto LABEL_181;
      }
      uint64_t *v93 = a2;
      --*(_DWORD *)(v89 + 24);
      break;
    }
  }
LABEL_205:
  if (sub_1CC86FAF4(v2, v92, v2 + 784, v2 + 1856, *(void **)(a1 + 8)))
  {
    unsigned int v106 = 8 * sub_1CC86FC7C(*(void *)v92, *(void *)(a1 + 24)) + 15;
    **(_DWORD **)(a1 + 16) -= v106 >> 4;
    if (*(unsigned __int8 *)(v92 + 16) <= 0x1Bu) {
      uint64_t v107 = 0;
    }
    else {
      uint64_t v107 = v92;
    }
    uint64_t v108 = *(void *)(v2 + 2168);
    int v109 = *(_DWORD *)(v2 + 2184);
    if (!v109)
    {
      unsigned int v110 = 0;
LABEL_213:
      unsigned int v111 = (uint64_t *)(v108 + 32 * v110);
      goto LABEL_214;
    }
    int v125 = v109 - 1;
    unsigned int v126 = ((v107 >> 4) ^ (v107 >> 9)) & v125;
    uint64_t v127 = *(void *)(v108 + 32 * v126);
    if (v107 == v127)
    {
LABEL_247:
      **(_DWORD **)(a1 + 32) -= v106 >> 4;
    }
    else
    {
      int v128 = 1;
      while (v127 != -4096)
      {
        unsigned int v129 = v126 + v128++;
        unsigned int v126 = v129 & v125;
        uint64_t v127 = *(void *)(v108 + 32 * (v129 & v125));
        if (v107 == v127) {
          goto LABEL_247;
        }
      }
    }
  }
  else
  {
    uint64_t v108 = *(void *)(v2 + 2168);
  }
  unsigned int v110 = *(_DWORD *)(v2 + 2184);
  if (!v110) {
    goto LABEL_213;
  }
  uint64_t v121 = (v110 - 1) & ((v92 >> 4) ^ (v92 >> 9));
  unsigned int v111 = (uint64_t *)(v108 + 32 * v121);
  uint64_t v122 = *v111;
  if (*v111 != v92)
  {
    int v123 = 1;
    while (v122 != -4096)
    {
      int v124 = v121 + v123++;
      uint64_t v121 = v124 & (v110 - 1);
      uint64_t v122 = *(void *)(v108 + 32 * v121);
      if (v122 == v92)
      {
        unsigned int v111 = (uint64_t *)(v108 + 32 * v121);
        goto LABEL_214;
      }
    }
    goto LABEL_213;
  }
LABEL_214:
  if (v111 != (uint64_t *)(v108 + 32 * v110))
  {
    uint64_t v112 = (uint64_t *)v111[1];
    uint64_t v113 = *((unsigned int *)v111 + 4);
    if (v113)
    {
      uint64_t v114 = 8 * v113;
      do
      {
        uint64_t v115 = *v112;
        int v137 = 0;
        if (sub_1CBF98030(*(void *)(v2 + 2144), *(_DWORD *)(v2 + 2160), v115, &v137))
        {
          *int v137 = -8192;
          *(int32x2_t *)(v2 + 2152) = vadd_s32(*(int32x2_t *)(v2 + 2152), (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v112;
        v114 -= 8;
      }
      while (v114);
      uint64_t v112 = (uint64_t *)v111[1];
    }
    if (v112 != v111 + 3) {
      free(v112);
    }
    *unsigned int v111 = -8192;
    *(int32x2_t *)(v2 + 2176) = vadd_s32(*(int32x2_t *)(v2 + 2176), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v42) {
    sub_1CC871B3C(v2, v92, *(void *)(a1 + 40));
  }
  if (v133 != v132) {
    free(v133);
  }
  if (v138 != v140) {
    free(v138);
  }
}

uint64_t sub_1CC8707C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v8 = a4;
  uint64_t v10 = a2;
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a3 + 536);
  uint64_t v13 = *(void *)(a3 + 528);
  if (v12 == v13)
  {
    uint64_t v14 = *(unsigned int *)(a3 + 548);
    BOOL v15 = (void *)(v12 + 8 * v14);
    if (v14)
    {
      uint64_t v16 = 0;
      while (*(void *)(v12 + v16) != a2)
      {
        v16 += 8;
        if (8 * v14 == v16) {
          goto LABEL_19;
        }
      }
      BOOL v15 = (void *)(v12 + v16);
    }
LABEL_19:
    uint64_t v13 = *(void *)(a3 + 536);
    goto LABEL_26;
  }
  uint64_t v17 = *(unsigned int *)(a3 + 544);
  int v18 = v17 - 1;
  unsigned int v19 = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  BOOL v15 = (void *)(v12 + 8 * v19);
  uint64_t v20 = *v15;
  if (*v15 != -1)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != a2)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -2;
      }
      if (v23) {
        uint64_t v21 = v15;
      }
      unsigned int v24 = v19 + v22++;
      unsigned int v19 = v24 & v18;
      BOOL v15 = (void *)(v12 + 8 * (v24 & v18));
      uint64_t v20 = *v15;
      if (*v15 == -1) {
        goto LABEL_21;
      }
    }
LABEL_25:
    LODWORD(v14) = *(_DWORD *)(a3 + 548);
    goto LABEL_26;
  }
  uint64_t v21 = 0;
LABEL_21:
  if (v21) {
    BOOL v15 = v21;
  }
  if (*v15 == a2) {
    goto LABEL_25;
  }
  LODWORD(v14) = *(_DWORD *)(a3 + 548);
  BOOL v15 = (void *)(v12 + 8 * v17);
LABEL_26:
  if (v12 == v13) {
    unsigned int v25 = v14;
  }
  else {
    unsigned int v25 = *(_DWORD *)(a3 + 544);
  }
  if (v15 != (void *)(v12 + 8 * v25)
    && !sub_1CC85ED24(a2, a4, *(int **)(a1 + 4592), *(void *)(a1 + 4616), *(unsigned __int8 *)(a1 + 4654), 1))
  {
    return v10;
  }
  uint64_t v26 = a1 + 3616;
  unsigned int v27 = *(_DWORD *)(a1 + 3624);
  if (v27 >= *(_DWORD *)(a1 + 3628)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 3616) + 8 * v27) = v10;
  int v28 = *(_DWORD *)(a1 + 3624);
  BOOL v29 = __CFADD__(v28, 1);
  unsigned int v30 = v28 + 1;
  if (v29)
  {
LABEL_34:
    uint64_t v10 = 0;
    goto LABEL_35;
  }
  uint64_t v116 = v8;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 3616) + 8 * v30 - 8);
    *(_DWORD *)(a1 + 3624) = v30 - 1;
    if (*(unsigned char *)(v10 + 16) != 83)
    {
      uint64_t v32 = *(void *)(a3 + 536);
      uint64_t v33 = *(void *)(a3 + 528);
      if (v32 == v33)
      {
        uint64_t v34 = *(unsigned int *)(a3 + 548);
        int v35 = (void *)(v32 + 8 * v34);
        if (v34)
        {
          uint64_t v36 = 0;
          while (*(void *)(v32 + v36) != v10)
          {
            v36 += 8;
            if (8 * v34 == v36) {
              goto LABEL_57;
            }
          }
          int v35 = (void *)(v32 + v36);
        }
LABEL_57:
        uint64_t v33 = *(void *)(a3 + 536);
      }
      else
      {
        uint64_t v37 = *(unsigned int *)(a3 + 544);
        int v38 = v37 - 1;
        unsigned int v39 = (v37 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        int v35 = (void *)(v32 + 8 * v39);
        uint64_t v40 = *v35;
        if (*v35 == -1)
        {
          uint64_t v41 = 0;
LABEL_95:
          if (v41) {
            int v35 = v41;
          }
          LODWORD(v34) = *(_DWORD *)(a3 + 548);
          uint64_t v63 = (void *)(v32 + 8 * v37);
          if (*v35 != v10) {
            int v35 = v63;
          }
        }
        else
        {
          uint64_t v41 = 0;
          int v42 = 1;
          while (v40 != v10)
          {
            if (v41) {
              BOOL v43 = 0;
            }
            else {
              BOOL v43 = v40 == -2;
            }
            if (v43) {
              uint64_t v41 = v35;
            }
            unsigned int v44 = v39 + v42++;
            unsigned int v39 = v44 & v38;
            int v35 = (void *)(v32 + 8 * (v44 & v38));
            uint64_t v40 = *v35;
            if (*v35 == -1) {
              goto LABEL_95;
            }
          }
          LODWORD(v34) = *(_DWORD *)(a3 + 548);
        }
      }
      unsigned int v45 = v32 == v33 ? v34 : *(_DWORD *)(a3 + 544);
      if (sub_1CC85ED24(v10, v8, *(int **)(a1 + 4592), *(void *)(a1 + 4616), *(unsigned char *)(a1 + 4654) != 0, v35 != (void *)(v32 + 8 * v45)))
      {
        goto LABEL_166;
      }
    }
    uint64_t v46 = (void *)a5[3];
    if (v46)
    {
      if (v46 == a5)
      {
        int v124 = v123;
        (*(void (**)(void *, void *))(*a5 + 24))(a5, v123);
      }
      else
      {
        int v124 = (void *)(*(uint64_t (**)(void *))(*v46 + 16))(v46);
      }
    }
    else
    {
      int v124 = 0;
    }
    if (!*(void *)(a1 + 4616))
    {
      int v54 = 0;
      goto LABEL_161;
    }
    uint64_t v120 = v26;
    uint64_t v121 = a6;
    int v118 = v123;
    uint64_t v119 = a3;
    if (!a6) {
      goto LABEL_108;
    }
    uint64_t v47 = *(void *)(v10 + 40);
    uint64_t v48 = *(void *)(a6 + 8);
    uint64_t v49 = *(unsigned int *)(a6 + 20);
    if (v48 != *(void *)a6)
    {
      unsigned int v53 = *(_DWORD *)(a6 + 16);
LABEL_81:
      if (3 * v53 <= 4 * ((int)v49 - *(_DWORD *)(a6 + 24)))
      {
        if (v53 >= 0x40) {
          v53 *= 2;
        }
        else {
          unsigned int v53 = 128;
        }
      }
      else if (v53 - v49 >= v53 >> 3)
      {
        goto LABEL_83;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a6, v53);
      unsigned int v53 = *(_DWORD *)(a6 + 16);
      uint64_t v48 = *(void *)(a6 + 8);
LABEL_83:
      unsigned int v55 = v53 - 1;
      unsigned int v56 = (v53 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      unsigned int v57 = (void *)(v48 + 8 * v56);
      uint64_t v58 = *v57;
      if (*v57 == -1)
      {
        uint64_t v59 = 0;
LABEL_101:
        if (v59) {
          uint64_t v64 = v59;
        }
        else {
          uint64_t v64 = v57;
        }
        if (*v64 != v47)
        {
          if (*v64 == -2) {
            --*(_DWORD *)(a6 + 24);
          }
          else {
            ++*(_DWORD *)(a6 + 20);
          }
          void *v64 = v47;
        }
      }
      else
      {
        uint64_t v59 = 0;
        int v60 = 1;
        while (v58 != v47)
        {
          if (v59) {
            BOOL v61 = 0;
          }
          else {
            BOOL v61 = v58 == -2;
          }
          if (v61) {
            uint64_t v59 = v57;
          }
          unsigned int v62 = v56 + v60++;
          unsigned int v56 = v62 & v55;
          unsigned int v57 = (void *)(v48 + 8 * (v62 & v55));
          uint64_t v58 = *v57;
          if (*v57 == -1) {
            goto LABEL_101;
          }
        }
      }
      goto LABEL_108;
    }
    if (v49)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 8 * v49;
      unsigned int v52 = *(void **)(a6 + 8);
      while (*v52 != v47)
      {
        if (*v52 == -2) {
          uint64_t v50 = v52;
        }
        ++v52;
        v51 -= 8;
        if (!v51)
        {
          if (!v50) {
            goto LABEL_77;
          }
          *uint64_t v50 = v47;
          --*(_DWORD *)(a6 + 24);
          goto LABEL_108;
        }
      }
      goto LABEL_108;
    }
LABEL_77:
    unsigned int v53 = *(_DWORD *)(a6 + 16);
    if (v49 >= v53) {
      goto LABEL_81;
    }
    *(_DWORD *)(a6 + 20) = v49 + 1;
    *(void *)(v48 + 8 * v49) = v47;
LABEL_108:
    v117[0] = a1;
    v117[1] = (uint64_t)&v121;
    v117[2] = (uint64_t)&v118;
    if (v10 && *(unsigned char *)(v10 + 16) == 83)
    {
      uint64_t v65 = v26;
      int v66 = *(_DWORD *)(v10 + 20);
      if ((v66 & 0x40000000) != 0)
      {
        uint64_t v68 = *(void *)(v10 - 8);
        uint64_t v69 = *(unsigned int *)(v10 + 60);
        uint64_t v70 = v68 + 32 * v69;
        uint64_t v67 = v66 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v67 = v66 & 0x7FFFFFF;
        uint64_t v68 = v10 - 32 * v67;
        uint64_t v69 = *(unsigned int *)(v10 + 60);
        uint64_t v70 = v68 + 32 * v69;
      }
      uint64_t v71 = v68 + 32 * v69 + 8 * v67;
      if (v70 == v71)
      {
        int v54 = 1;
      }
      else
      {
        while (1)
        {
          uint64_t v72 = *(void *)(*(void *)v70 + 40);
          if (v72 == *(void *)v70 + 40)
          {
            uint64_t v74 = 0;
          }
          else
          {
            uint64_t v73 = v72 ? v72 - 24 : 0;
            uint64_t v74 = *(unsigned __int8 *)(v73 + 16) - 29 >= 0xB ? 0 : v73;
          }
          uint64_t v75 = *(void *)(v119 + 536);
          uint64_t v76 = *(void *)(v119 + 528);
          if (v75 == v76)
          {
            uint64_t v77 = *(unsigned int *)(v119 + 548);
            int v78 = (void *)(v75 + 8 * v77);
            if (v77)
            {
              uint64_t v79 = 0;
              uint64_t v80 = 8 * v77;
              while (*(void *)(v75 + v79) != v74)
              {
                v79 += 8;
                if (v80 == v79) {
                  goto LABEL_141;
                }
              }
              int v78 = (void *)(v75 + v79);
            }
LABEL_141:
            uint64_t v76 = *(void *)(v119 + 536);
          }
          else
          {
            uint64_t v81 = *(unsigned int *)(v119 + 544);
            int v82 = v81 - 1;
            unsigned int v83 = (v81 - 1) & ((v74 >> 4) ^ (v74 >> 9));
            int v78 = (void *)(v75 + 8 * v83);
            uint64_t v84 = *v78;
            if (*v78 == -1)
            {
              int v85 = 0;
LABEL_153:
              if (v85) {
                int v78 = v85;
              }
              if (*v78 != v74) {
                int v78 = (void *)(v75 + 8 * v81);
              }
            }
            else
            {
              int v85 = 0;
              int v86 = 1;
              while (v84 != v74)
              {
                if (v85) {
                  BOOL v87 = 0;
                }
                else {
                  BOOL v87 = v84 == -2;
                }
                if (v87) {
                  int v85 = v78;
                }
                unsigned int v88 = v83 + v86++;
                unsigned int v83 = v88 & v82;
                int v78 = (void *)(v75 + 8 * (v88 & v82));
                uint64_t v84 = *v78;
                if (*v78 == -1) {
                  goto LABEL_153;
                }
              }
            }
          }
          BOOL v23 = v75 == v76;
          uint64_t v89 = 544;
          if (v23) {
            uint64_t v89 = 548;
          }
          if (v78 != (void *)(v75 + 8 * *(unsigned int *)(v119 + v89))) {
            break;
          }
          uint64_t v122 = v74;
          uint64_t v90 = v118[3];
          if (!v90) {
LABEL_219:
          }
            sub_1CB920400();
          if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v90 + 48))(v90, &v122))
          {
            uint64_t v91 = v120;
            unint64_t v92 = *(unsigned int *)(v120 + 8);
            if (v92 >= *(unsigned int *)(v120 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)v120 + 8 * v92) = v74;
            ++*(_DWORD *)(v91 + 8);
          }
          uint64_t v93 = *(void **)v70;
          v70 += 8;
          int v94 = sub_1CC8711F8(v117, v93);
          int v54 = v94;
          if (v70 == v71 || (v94 & 1) == 0) {
            goto LABEL_160;
          }
        }
        int v54 = 0;
      }
    }
    else
    {
      uint64_t v65 = v26;
      int v54 = sub_1CC8711F8(v117, *(void **)(v10 + 40));
    }
LABEL_160:
    uint64_t v26 = v65;
    uint64_t v8 = v116;
LABEL_161:
    if (v124 == v123)
    {
      (*(void (**)(void *))(v123[0] + 32))(v123);
    }
    else if (v124)
    {
      (*(void (**)(void))(*v124 + 40))();
    }
    if (!v54) {
      goto LABEL_35;
    }
LABEL_166:
    int v95 = *(_DWORD *)(v10 + 20);
    if ((v95 & 0x40000000) != 0) {
      break;
    }
    uint64_t v96 = v95 & 0x7FFFFFF;
    unsigned int v97 = (uint64_t *)(v10 - 32 * v96);
    if (v96) {
      goto LABEL_170;
    }
LABEL_210:
    unsigned int v30 = *(_DWORD *)(a1 + 3624);
    if (!v30) {
      goto LABEL_34;
    }
  }
  unsigned int v97 = *(uint64_t **)(v10 - 8);
  uint64_t v96 = v95 & 0x7FFFFFF;
  if (!v96) {
    goto LABEL_210;
  }
LABEL_170:
  unsigned int v98 = &v97[4 * v96];
  while (1)
  {
    uint64_t v10 = *v97;
    uint64_t v99 = *(void *)(a3 + 536);
    uint64_t v100 = *(void *)(a3 + 528);
    if (v99 == v100)
    {
      uint64_t v101 = *(unsigned int *)(a3 + 548);
      int v102 = (void *)(v99 + 8 * v101);
      if (v101)
      {
        uint64_t v103 = 0;
        while (*(void *)(v99 + v103) != v10)
        {
          v103 += 8;
          if (8 * v101 == v103) {
            goto LABEL_190;
          }
        }
        int v102 = (void *)(v99 + v103);
      }
LABEL_190:
      uint64_t v100 = *(void *)(a3 + 536);
    }
    else
    {
      uint64_t v104 = *(unsigned int *)(a3 + 544);
      int v105 = v104 - 1;
      unsigned int v106 = (v104 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      int v102 = (void *)(v99 + 8 * v106);
      uint64_t v107 = *v102;
      if (*v102 == -1)
      {
        uint64_t v108 = 0;
LABEL_204:
        if (v108) {
          int v102 = v108;
        }
        LODWORD(v101) = *(_DWORD *)(a3 + 548);
        uint64_t v115 = (void *)(v99 + 8 * v104);
        if (*v102 != v10) {
          int v102 = v115;
        }
      }
      else
      {
        uint64_t v108 = 0;
        int v109 = 1;
        while (v107 != v10)
        {
          if (v108) {
            BOOL v110 = 0;
          }
          else {
            BOOL v110 = v107 == -2;
          }
          if (v110) {
            uint64_t v108 = v102;
          }
          unsigned int v111 = v106 + v109++;
          unsigned int v106 = v111 & v105;
          int v102 = (void *)(v99 + 8 * (v111 & v105));
          uint64_t v107 = *v102;
          if (*v102 == -1) {
            goto LABEL_204;
          }
        }
        LODWORD(v101) = *(_DWORD *)(a3 + 548);
      }
    }
    unsigned int v112 = v99 == v100 ? v101 : *(_DWORD *)(a3 + 544);
    if (v102 != (void *)(v99 + 8 * v112)) {
      break;
    }
    if (v10 && *(unsigned __int8 *)(v10 + 16) >= 0x1Cu)
    {
      int v118 = (void *)*v97;
      uint64_t v113 = a5[3];
      if (!v113) {
        goto LABEL_219;
      }
      if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v113 + 48))(v113, &v118))
      {
        unint64_t v114 = *(unsigned int *)(a1 + 3624);
        if (v114 >= *(unsigned int *)(a1 + 3628)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 3616) + 8 * v114) = v10;
        ++*(_DWORD *)(a1 + 3624);
      }
    }
    v97 += 4;
    if (v97 == v98) {
      goto LABEL_210;
    }
  }
LABEL_35:
  *(_DWORD *)(a1 + 3624) = 0;
  return v10;
}

uint64_t sub_1CC871168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 32;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v6 = (uint64_t *)(v2 + 8 * v5);
  uint64_t v7 = *v6;
  if (*v6 == a2)
  {
LABEL_9:
    *int v6 = -8192;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    uint64_t v7 = *(void *)(v2 + 8 * v5);
    if (v7 == a2)
    {
      int v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t sub_1CC8711F8(uint64_t *a1, void *a2)
{
  v64[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  v61[0] = v62;
  v61[1] = (void *)0x1000000000;
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v63 = v64;
  int v4 = sub_1CC8228B4(*(void *)(v3 + 4616), a2);
  unsigned int v5 = *(_DWORD *)(v3 + 4432);
  if (v5 >= *(_DWORD *)(v3 + 4436)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)(v3 + 4424) + 4 * v5) = v4;
  int v6 = *(_DWORD *)(v3 + 4432);
  BOOL v7 = __CFADD__(v6, 1);
  unsigned int v8 = v6 + 1;
  *(_DWORD *)(v3 + 4432) = v8;
  if (v7)
  {
    uint64_t v9 = 1;
    goto LABEL_99;
  }
  char v10 = 1;
  while (1)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)(v3 + 4424) + 4 * v8 - 4);
    *(_DWORD *)(v3 + 4432) = v8 - 1;
    uint64_t v12 = *(void *)(*(void *)(v3 + 4616) + 3352);
    uint64_t v13 = *(void *)(v12 + 32 * v11);
    uint64_t v14 = *(void *)a1[1];
    if (!v14) {
      goto LABEL_39;
    }
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t v16 = *(unsigned int *)(v14 + 20);
    if (v15 != *(void *)v14)
    {
      unsigned int v20 = *(_DWORD *)(v14 + 16);
LABEL_18:
      if (3 * v20 <= 4 * ((int)v16 - *(_DWORD *)(v14 + 24)))
      {
        if (v20 >= 0x40) {
          v20 *= 2;
        }
        else {
          unsigned int v20 = 128;
        }
      }
      else if (v20 - v16 >= v20 >> 3)
      {
        goto LABEL_20;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)v14, v20);
      unsigned int v20 = *(_DWORD *)(v14 + 16);
      uint64_t v15 = *(void *)(v14 + 8);
LABEL_20:
      unsigned int v21 = v20 - 1;
      unsigned int v22 = (v20 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      BOOL v23 = (void *)(v15 + 8 * v22);
      uint64_t v24 = *v23;
      if (*v23 == -1)
      {
        unsigned int v25 = 0;
LABEL_32:
        if (v25) {
          BOOL v29 = v25;
        }
        else {
          BOOL v29 = v23;
        }
        if (*v29 != v13)
        {
          if (*v29 == -2) {
            --*(_DWORD *)(v14 + 24);
          }
          else {
            ++*(_DWORD *)(v14 + 20);
          }
          *BOOL v29 = v13;
        }
      }
      else
      {
        unsigned int v25 = 0;
        int v26 = 1;
        while (v24 != v13)
        {
          if (v25) {
            BOOL v27 = 0;
          }
          else {
            BOOL v27 = v24 == -2;
          }
          if (v27) {
            unsigned int v25 = v23;
          }
          unsigned int v28 = v22 + v26++;
          unsigned int v22 = v28 & v21;
          BOOL v23 = (void *)(v15 + 8 * (v28 & v21));
          uint64_t v24 = *v23;
          if (*v23 == -1) {
            goto LABEL_32;
          }
        }
      }
      goto LABEL_39;
    }
    if (v16) {
      break;
    }
LABEL_14:
    unsigned int v20 = *(_DWORD *)(v14 + 16);
    if (v16 >= v20) {
      goto LABEL_18;
    }
    *(_DWORD *)(v14 + 20) = v16 + 1;
    *(void *)(v15 + 8 * v16) = v13;
    if ((v10 & 1) == 0) {
      goto LABEL_40;
    }
LABEL_75:
    uint64_t v54 = v12 + 32 * v11;
    uint64_t v55 = *(unsigned int *)(v54 + 16);
    if (v55)
    {
      unsigned int v56 = *(_DWORD **)(v54 + 8);
      uint64_t v57 = 4 * v55;
      do
      {
        LODWORD(v60) = *v56 & 0xFFFFFF;
        if ((sub_1CB8F4B90((uint64_t)v61, (unsigned int *)&v60) & 0x100000000) != 0)
        {
          unint64_t v58 = *(unsigned int *)(v3 + 4432);
          if (v58 >= *(unsigned int *)(v3 + 4436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(v3 + 4424) + 4 * v58) = *v56 & 0xFFFFFF;
          ++*(_DWORD *)(v3 + 4432);
        }
        ++v56;
        v57 -= 4;
      }
      while (v57);
    }
    char v10 = 0;
    unsigned int v8 = *(_DWORD *)(v3 + 4432);
    if (!v8)
    {
      uint64_t v9 = 1;
      goto LABEL_99;
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 8 * v16;
  unsigned int v19 = *(void **)(v14 + 8);
  while (*v19 != v13)
  {
    if (*v19 == -2) {
      uint64_t v17 = v19;
    }
    ++v19;
    v18 -= 8;
    if (!v18)
    {
      if (!v17) {
        goto LABEL_14;
      }
      *uint64_t v17 = v13;
      --*(_DWORD *)(v14 + 24);
      if ((v10 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_75;
    }
  }
LABEL_39:
  if (v10) {
    goto LABEL_75;
  }
LABEL_40:
  uint64_t v30 = *(void *)(v13 + 40);
  if (v30 == v13 + 40)
  {
    uint64_t v32 = 0;
  }
  else
  {
    if (v30) {
      uint64_t v31 = v30 - 24;
    }
    else {
      uint64_t v31 = 0;
    }
    if (*(unsigned __int8 *)(v31 + 16) - 29 >= 0xB) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v31;
    }
  }
  uint64_t v33 = (uint64_t *)a1[2];
  uint64_t v34 = v33[1];
  uint64_t v35 = *(void *)(v34 + 536);
  uint64_t v36 = *(void *)(v34 + 528);
  if (v35 == v36)
  {
    uint64_t v37 = *(unsigned int *)(v34 + 548);
    int v38 = (void *)(v35 + 8 * v37);
    if (v37)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 8 * v37;
      while (*(void *)(v35 + v39) != v32)
      {
        v39 += 8;
        if (v40 == v39) {
          goto LABEL_66;
        }
      }
      int v38 = (void *)(v35 + v39);
    }
LABEL_66:
    uint64_t v36 = *(void *)(v34 + 536);
  }
  else
  {
    uint64_t v41 = *(unsigned int *)(v34 + 544);
    int v42 = v41 - 1;
    unsigned int v43 = (v41 - 1) & ((v32 >> 4) ^ (v32 >> 9));
    int v38 = (void *)(v35 + 8 * v43);
    uint64_t v44 = *v38;
    if (*v38 == -1)
    {
      unsigned int v45 = 0;
LABEL_86:
      if (v45) {
        int v38 = v45;
      }
      if (*v38 != v32) {
        int v38 = (void *)(v35 + 8 * v41);
      }
    }
    else
    {
      unsigned int v45 = 0;
      int v46 = 1;
      while (v44 != v32)
      {
        if (v45) {
          BOOL v47 = 0;
        }
        else {
          BOOL v47 = v44 == -2;
        }
        if (v47) {
          unsigned int v45 = v38;
        }
        unsigned int v48 = v43 + v46++;
        unsigned int v43 = v48 & v42;
        int v38 = (void *)(v35 + 8 * (v48 & v42));
        uint64_t v44 = *v38;
        if (*v38 == -1) {
          goto LABEL_86;
        }
      }
    }
  }
  if (v35 == v36) {
    uint64_t v49 = 548;
  }
  else {
    uint64_t v49 = 544;
  }
  if (v38 == (void *)(v35 + 8 * *(unsigned int *)(v34 + v49)))
  {
    uint64_t v50 = *v33;
    uint64_t v60 = v32;
    uint64_t v51 = *(void *)(v50 + 24);
    if (!v51) {
      sub_1CB920400();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v51 + 48))(v51, &v60))
    {
      uint64_t v52 = v33[2];
      unint64_t v53 = *(unsigned int *)(v52 + 8);
      if (v53 >= *(unsigned int *)(v52 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v52 + 8 * v53) = v32;
      ++*(_DWORD *)(v52 + 8);
    }
    goto LABEL_75;
  }
  uint64_t v9 = 0;
LABEL_99:
  *(_DWORD *)(v3 + 4432) = 0;
  sub_1CB833A08((uint64_t)&v63, v64[0]);
  if (v61[0] != v62) {
    free(v61[0]);
  }
  return v9;
}

void sub_1CC871710()
{
}

void *sub_1CC871724(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261FD88;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC87176C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FD88;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC871798(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(unsigned int *)(v3 + 20);
  if (v4 == *(void *)v3)
  {
    if (v5)
    {
      int v6 = 0;
      uint64_t v7 = 8 * v5;
      unsigned int v8 = *(void **)(v3 + 8);
      while (*v8 != v2)
      {
        if (*v8 == -2) {
          int v6 = v8;
        }
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          if (!v6) {
            goto LABEL_9;
          }
          *int v6 = v2;
          --*(_DWORD *)(v3 + 24);
          return 1;
        }
      }
      return 0;
    }
LABEL_9:
    unsigned int v9 = *(_DWORD *)(v3 + 16);
    if (v5 < v9)
    {
      *(_DWORD *)(v3 + 20) = v5 + 1;
      *(void *)(v4 + 8 * v5) = v2;
      return 1;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v3 + 16);
  }
  if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 24)))
  {
    if (v9 >= 0x40) {
      v9 *= 2;
    }
    else {
      unsigned int v9 = 128;
    }
  }
  else if (v9 - v5 >= v9 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v9);
  unsigned int v9 = *(_DWORD *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
LABEL_14:
  unsigned int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  uint64_t v12 = (void *)(v4 + 8 * v11);
  uint64_t v13 = *v12;
  if (*v12 == -1)
  {
    uint64_t v14 = 0;
LABEL_26:
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
    if (*v18 != v2)
    {
      if (*v18 == -2) {
        --*(_DWORD *)(v3 + 24);
      }
      else {
        ++*(_DWORD *)(v3 + 20);
      }
      void *v18 = v2;
      return 1;
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != v2)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -2;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
      uint64_t v13 = *v12;
      if (*v12 == -1) {
        goto LABEL_26;
      }
    }
  }
  return 0;
}

void sub_1CC871928()
{
}

void *sub_1CC87193C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F261FDD0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC871984(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FDD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC8719B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(unsigned int *)(v3 + 20);
  if (v4 == *(void *)v3)
  {
    if (v5)
    {
      int v6 = 0;
      uint64_t v7 = 8 * v5;
      unsigned int v8 = *(void **)(v3 + 8);
      while (*v8 != v2)
      {
        if (*v8 == -2) {
          int v6 = v8;
        }
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          if (!v6) {
            goto LABEL_9;
          }
          *int v6 = v2;
          --*(_DWORD *)(v3 + 24);
          return 1;
        }
      }
      return 0;
    }
LABEL_9:
    unsigned int v9 = *(_DWORD *)(v3 + 16);
    if (v5 < v9)
    {
      *(_DWORD *)(v3 + 20) = v5 + 1;
      *(void *)(v4 + 8 * v5) = v2;
      return 1;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v3 + 16);
  }
  if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 24)))
  {
    if (v9 >= 0x40) {
      v9 *= 2;
    }
    else {
      unsigned int v9 = 128;
    }
  }
  else if (v9 - v5 >= v9 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v9);
  unsigned int v9 = *(_DWORD *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
LABEL_14:
  unsigned int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  uint64_t v12 = (void *)(v4 + 8 * v11);
  uint64_t v13 = *v12;
  if (*v12 == -1)
  {
    uint64_t v14 = 0;
LABEL_26:
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
    if (*v18 != v2)
    {
      if (*v18 == -2) {
        --*(_DWORD *)(v3 + 24);
      }
      else {
        ++*(_DWORD *)(v3 + 20);
      }
      void *v18 = v2;
      return 1;
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != v2)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -2;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
      uint64_t v13 = *v12;
      if (*v12 == -1) {
        goto LABEL_26;
      }
    }
  }
  return 0;
}

void sub_1CC871B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 536);
  uint64_t v6 = *(void *)(a3 + 528);
  if (v5 == v6)
  {
    uint64_t v7 = *(unsigned int *)(a3 + 548);
    unsigned int v8 = (void *)(v5 + 8 * v7);
    if (v7)
    {
      uint64_t v9 = 0;
      while (*(void *)(v5 + v9) != a2)
      {
        v9 += 8;
        if (8 * v7 == v9) {
          goto LABEL_19;
        }
      }
      unsigned int v8 = (void *)(v5 + v9);
    }
LABEL_19:
    uint64_t v6 = *(void *)(a3 + 536);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 544);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (void *)(v5 + 8 * v12);
    uint64_t v13 = *v8;
    if (*v8 == -1)
    {
      uint64_t v14 = 0;
LABEL_21:
      if (v14) {
        unsigned int v8 = v14;
      }
      if (*v8 != a2)
      {
        LODWORD(v7) = *(_DWORD *)(a3 + 548);
        unsigned int v8 = (void *)(v5 + 8 * v10);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          uint64_t v14 = v8;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        unsigned int v8 = (void *)(v5 + 8 * (v17 & v11));
        uint64_t v13 = *v8;
        if (*v8 == -1) {
          goto LABEL_21;
        }
      }
    }
    LODWORD(v7) = *(_DWORD *)(a3 + 548);
  }
LABEL_26:
  if (v5 == v6) {
    unsigned int v18 = v7;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a3 + 544);
  }
  if (v8 != (void *)(v5 + 8 * v18))
  {
    *unsigned int v8 = -2;
    ++*(_DWORD *)(a3 + 552);
  }
  uint64_t v19 = *(void *)(a1 + 3464);
  uint64_t v20 = *(void *)(a1 + 3456);
  if (v19 == v20)
  {
    uint64_t v21 = *(unsigned int *)(a1 + 3476);
    unsigned int v22 = (void *)(v19 + 8 * v21);
    if (v21)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 8 * v21;
      while (*(void *)(v19 + v23) != a2)
      {
        v23 += 8;
        if (v24 == v23) {
          goto LABEL_49;
        }
      }
      unsigned int v22 = (void *)(v19 + v23);
    }
LABEL_49:
    uint64_t v20 = *(void *)(a1 + 3464);
  }
  else
  {
    uint64_t v25 = *(unsigned int *)(a1 + 3472);
    int v26 = v25 - 1;
    unsigned int v27 = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v22 = (void *)(v19 + 8 * v27);
    uint64_t v28 = *v22;
    if (*v22 == -1)
    {
      BOOL v29 = 0;
LABEL_111:
      if (v29) {
        unsigned int v22 = v29;
      }
      if (*v22 != a2) {
        unsigned int v22 = (void *)(v19 + 8 * v25);
      }
    }
    else
    {
      BOOL v29 = 0;
      int v30 = 1;
      while (v28 != a2)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -2;
        }
        if (v31) {
          BOOL v29 = v22;
        }
        unsigned int v32 = v27 + v30++;
        unsigned int v27 = v32 & v26;
        unsigned int v22 = (void *)(v19 + 8 * (v32 & v26));
        uint64_t v28 = *v22;
        if (*v22 == -1) {
          goto LABEL_111;
        }
      }
    }
  }
  BOOL v16 = v19 == v20;
  uint64_t v33 = 3472;
  if (v16) {
    uint64_t v33 = 3476;
  }
  if (v22 != (void *)(v19 + 8 * *(unsigned int *)(a1 + v33)))
  {
    *unsigned int v22 = -2;
    ++*(_DWORD *)(a1 + 3480);
  }
  uint64_t v34 = *(void *)(a1 + 3304);
  uint64_t v35 = *(void *)(a1 + 3296);
  if (v34 == v35)
  {
    uint64_t v36 = *(unsigned int *)(a1 + 3316);
    uint64_t v37 = (void *)(v34 + 8 * v36);
    if (v36)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 8 * v36;
      while (*(void *)(v34 + v38) != a2)
      {
        v38 += 8;
        if (v39 == v38) {
          goto LABEL_72;
        }
      }
      uint64_t v37 = (void *)(v34 + v38);
    }
LABEL_72:
    uint64_t v35 = *(void *)(a1 + 3304);
  }
  else
  {
    uint64_t v40 = *(unsigned int *)(a1 + 3312);
    int v41 = v40 - 1;
    unsigned int v42 = (v40 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v37 = (void *)(v34 + 8 * v42);
    uint64_t v43 = *v37;
    if (*v37 == -1)
    {
      uint64_t v44 = 0;
LABEL_116:
      if (v44) {
        uint64_t v37 = v44;
      }
      if (*v37 != a2) {
        uint64_t v37 = (void *)(v34 + 8 * v40);
      }
    }
    else
    {
      uint64_t v44 = 0;
      int v45 = 1;
      while (v43 != a2)
      {
        if (v44) {
          BOOL v46 = 0;
        }
        else {
          BOOL v46 = v43 == -2;
        }
        if (v46) {
          uint64_t v44 = v37;
        }
        unsigned int v47 = v42 + v45++;
        unsigned int v42 = v47 & v41;
        uint64_t v37 = (void *)(v34 + 8 * (v47 & v41));
        uint64_t v43 = *v37;
        if (*v37 == -1) {
          goto LABEL_116;
        }
      }
    }
  }
  BOOL v16 = v34 == v35;
  uint64_t v48 = 3312;
  if (v16) {
    uint64_t v48 = 3316;
  }
  if (v37 != (void *)(v34 + 8 * *(unsigned int *)(a1 + v48)))
  {
    *uint64_t v37 = -2;
    ++*(_DWORD *)(a1 + 3320);
  }
  uint64_t v49 = *(void *)(a1 + 1864);
  uint64_t v50 = *(void *)(a1 + 1856);
  if (v49 == v50)
  {
    uint64_t v51 = *(unsigned int *)(a1 + 1876);
    uint64_t v52 = (void *)(v49 + 8 * v51);
    if (v51)
    {
      uint64_t v53 = 0;
      uint64_t v54 = 8 * v51;
      while (*(void *)(v49 + v53) != a2)
      {
        v53 += 8;
        if (v54 == v53) {
          goto LABEL_95;
        }
      }
      uint64_t v52 = (void *)(v49 + v53);
    }
LABEL_95:
    uint64_t v50 = *(void *)(a1 + 1864);
  }
  else
  {
    uint64_t v55 = *(unsigned int *)(a1 + 1872);
    int v56 = v55 - 1;
    unsigned int v57 = (v55 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v52 = (void *)(v49 + 8 * v57);
    uint64_t v58 = *v52;
    if (*v52 == -1)
    {
      uint64_t v59 = 0;
LABEL_121:
      if (v59) {
        uint64_t v52 = v59;
      }
      if (*v52 != a2) {
        uint64_t v52 = (void *)(v49 + 8 * v55);
      }
    }
    else
    {
      uint64_t v59 = 0;
      int v60 = 1;
      while (v58 != a2)
      {
        if (v59) {
          BOOL v61 = 0;
        }
        else {
          BOOL v61 = v58 == -2;
        }
        if (v61) {
          uint64_t v59 = v52;
        }
        unsigned int v62 = v57 + v60++;
        unsigned int v57 = v62 & v56;
        uint64_t v52 = (void *)(v49 + 8 * (v62 & v56));
        uint64_t v58 = *v52;
        if (*v52 == -1) {
          goto LABEL_121;
        }
      }
    }
  }
  BOOL v16 = v49 == v50;
  uint64_t v63 = 1872;
  if (v16) {
    uint64_t v63 = 1876;
  }
  if (v52 != (void *)(v49 + 8 * *(unsigned int *)(a1 + v63)))
  {
    *uint64_t v52 = -2;
    ++*(_DWORD *)(a1 + 1880);
  }
  if (sub_1CC871168(a1 + 2664, a2))
  {
    uint64_t v64 = *(void **)(a1 + 2928);
    uint64_t v65 = *(unsigned int *)(a1 + 2936);
    int v66 = &v64[v65];
    if (v65)
    {
      uint64_t v67 = 8 * v65;
      do
      {
        if (*v64 == a2) {
          goto LABEL_106;
        }
        ++v64;
        v67 -= 8;
      }
      while (v67);
      uint64_t v64 = v66;
    }
LABEL_106:
    if (v66 != v64 + 1)
    {
      memmove(v64, v64 + 1, (char *)v66 - (char *)(v64 + 1));
      LODWORD(v65) = *(_DWORD *)(a1 + 2936);
    }
    *(_DWORD *)(a1 + 2936) = v65 - 1;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
}

uint64_t sub_1CC871FF4(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t result = 1;
  switch(v2)
  {
    case ')':
    case '-':
    case '8':
    case '9':
    case ':':
      return result;
    case '*':
    case '.':
      if ((~*(unsigned __int8 *)(a1 + 17) & 0x12) != 0)
      {
        if (v2 == 43) {
          goto LABEL_9;
        }
        if (v2 != 44) {
          goto LABEL_8;
        }
        goto LABEL_5;
      }
      return result;
    case '+':
      goto LABEL_9;
    case ',':
LABEL_5:
      uint64_t v6 = &v7;
      uint64_t v7 = 0;
      if (sub_1CC04C34C(&v6, a1) && v7 || (*(unsigned char *)(a1 + 17) & 2) == 0) {
        goto LABEL_8;
      }
LABEL_9:
      uint64_t result = 1;
      *a2 = 1;
      break;
    default:
LABEL_8:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CC8720F8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCDCF50) {
    return 1;
  }
  if (*(unsigned char *)(a2 + 16) == 66
    && (sub_1CD10AB34(*(void *)(a2 - 32), a3, *(int **)(a1 + 4592), 1) & 1) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 4648))
  {
    uint64_t v10 = *(void *)this;
    uint64_t v9 = *((void *)this + 1);
    if (v9 == *(void *)this)
    {
      uint64_t v11 = *((unsigned int *)this + 5);
      unsigned int v12 = (void *)(v9 + 8 * v11);
      if (v11)
      {
        uint64_t v13 = 0;
        while (*(void *)(v9 + v13) != a2)
        {
          v13 += 8;
          if (8 * v11 == v13) {
            goto LABEL_24;
          }
        }
        unsigned int v12 = (void *)(v9 + v13);
      }
LABEL_24:
      uint64_t v10 = *((void *)this + 1);
    }
    else
    {
      uint64_t v14 = *((unsigned int *)this + 4);
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v12 = (void *)(v9 + 8 * v16);
      uint64_t v17 = *v12;
      if (*v12 == -1)
      {
        unsigned int v18 = 0;
LABEL_26:
        if (v18) {
          unsigned int v12 = v18;
        }
        if (*v12 != a2)
        {
          LODWORD(v11) = *((_DWORD *)this + 5);
          unsigned int v12 = (void *)(v9 + 8 * v14);
          goto LABEL_31;
        }
      }
      else
      {
        unsigned int v18 = 0;
        int v19 = 1;
        while (v17 != a2)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            unsigned int v18 = v12;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          unsigned int v12 = (void *)(v9 + 8 * (v21 & v15));
          uint64_t v17 = *v12;
          if (*v12 == -1) {
            goto LABEL_26;
          }
        }
      }
      LODWORD(v11) = *((_DWORD *)this + 5);
    }
LABEL_31:
    if (v9 == v10) {
      unsigned int v22 = v11;
    }
    else {
      unsigned int v22 = *((_DWORD *)this + 4);
    }
    if (v12 != (void *)(v9 + 8 * v22)) {
      return 0;
    }
    if (*(unsigned char *)(a2 + 16) == 60)
    {
      uint64_t v24 = **(void **)(a2 - 32);
      int v25 = *(_DWORD *)(v24 + 8);
      if ((v25 & 0xFE) == 0x12) {
        int v25 = *(_DWORD *)(**(void **)(v24 + 16) + 8);
      }
      if ((v25 & 0xFFFFFF00) != 0x4000)
      {
        uint64_t v79 = v81;
        uint64_t v80 = 0x400000000;
        uint64_t v26 = *(void *)(a2 + 8);
        if (v26)
        {
          unsigned int v27 = 0;
          do
          {
            if (v27 >= HIDWORD(v80)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v79 + v27) = v26;
            unsigned int v27 = v80 + 1;
            LODWORD(v80) = v80 + 1;
            uint64_t v26 = *(void *)(v26 + 8);
          }
          while (v26);
        }
        char v28 = 0;
        unsigned int v77 = 0;
        while (v80)
        {
          BOOL v29 = (void *)*((void *)v79 + v80 - 1);
          unsigned int v30 = v80 - 1;
          LODWORD(v80) = v80 - 1;
          uint64_t v31 = v29[3];
          unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
          if (v32 >= 0x1C && v32 - 66 <= 0xC)
          {
            for (uint64_t i = *(void *)(v31 + 8); i; uint64_t i = *(void *)(i + 8))
            {
              if (v30 >= HIDWORD(v80)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v79 + v30) = i;
              unsigned int v30 = v80 + 1;
              LODWORD(v80) = v80 + 1;
            }
LABEL_91:
            if (v77 >= 4uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v78[v77++] = v31;
            int v41 = 2;
            goto LABEL_93;
          }
          if (v32 >= 0x1C && v32 - 41 <= 0x11)
          {
            if (v32 != 56) {
              goto LABEL_148;
            }
            uint64_t v35 = *(void *)(v31 - 32);
            if (*(unsigned char *)(v35 + 16) != 16) {
              goto LABEL_148;
            }
            uint64_t v36 = (void *)(v35 + 24);
            if (*(_DWORD *)(v35 + 32) >= 0x41u) {
              uint64_t v36 = (void *)*v36;
            }
            uint64_t v37 = (void *)*v36;
            if (*v36 == 0xFFFFFFFFLL || v37 == (void *)0xFFFF)
            {
              for (uint64_t j = *(void *)(v31 + 8); j; uint64_t j = *(void *)(j + 8))
              {
                if (v30 >= HIDWORD(v80)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v79 + v30) = j;
                unsigned int v30 = v80 + 1;
                LODWORD(v80) = v80 + 1;
              }
              if (v77 >= 4uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v42 = 0;
              v78[v77++] = v31;
              int v41 = 2;
            }
            else
            {
              int v41 = 0;
              int v42 = 1;
            }
            if (v37 != (void *)0xFFFFFFFFLL && v37 != (void *)0xFFFF) {
              goto LABEL_148;
            }
            if (!v42) {
              goto LABEL_93;
            }
            unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
          }
          if (v32 != 84)
          {
            if (v32 != 89) {
              goto LABEL_148;
            }
            uint64_t v43 = *(void *)(v31 + 8);
            if (v43)
            {
              unsigned int v44 = v80;
              do
              {
                if (v44 >= HIDWORD(v80)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v79 + v44) = v43;
                unsigned int v44 = v80 + 1;
                LODWORD(v80) = v80 + 1;
                uint64_t v43 = *(void *)(v43 + 8);
              }
              while (v43);
            }
            goto LABEL_91;
          }
          uint64_t v45 = *(void *)(v31 - 32);
          if (!v45) {
            goto LABEL_148;
          }
          if (*(unsigned char *)(v45 + 16)) {
            goto LABEL_148;
          }
          if (*(void *)(v45 + 24) != *(void *)(v31 + 72)) {
            goto LABEL_148;
          }
          if ((*(unsigned char *)(v45 + 33) & 0x20) == 0) {
            goto LABEL_148;
          }
          int v46 = *(_DWORD *)(v45 + 36);
          if (!sub_1CB859A14(v46) && (v46 - 1682) > 0x8B) {
            goto LABEL_148;
          }
          char v28 = 1;
          llvm::SampleInfo::SampleInfo((uint64_t)&v82, v46, 1);
          if (*(void *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 32 * v85) != *v29) {
            goto LABEL_148;
          }
          int v41 = 2;
LABEL_93:
          if (v41 != 2) {
            goto LABEL_148;
          }
        }
        if (v28)
        {
          if (v77)
          {
            unsigned int v47 = v78;
            while (1)
            {
              uint64_t v48 = *((void *)this + 1);
              uint64_t v49 = *v47;
              uint64_t v50 = *((unsigned int *)this + 5);
              if (v48 != *(void *)this) {
                break;
              }
              if (v50)
              {
                uint64_t v51 = 0;
                uint64_t v52 = 8 * v50;
                uint64_t v53 = (void *)*((void *)this + 1);
                while (*v53 != v49)
                {
                  if (*v53 == -2) {
                    uint64_t v51 = v53;
                  }
                  ++v53;
                  v52 -= 8;
                  if (!v52)
                  {
                    if (!v51) {
                      goto LABEL_116;
                    }
                    *uint64_t v51 = v49;
                    --*((_DWORD *)this + 6);
                    goto LABEL_140;
                  }
                }
                goto LABEL_140;
              }
LABEL_116:
              unsigned int v54 = *((_DWORD *)this + 4);
              if (v50 >= v54) {
                goto LABEL_119;
              }
              *((_DWORD *)this + 5) = v50 + 1;
              *(void *)(v48 + 8 * v50) = v49;
LABEL_140:
              if (++v47 == &v78[v77]) {
                goto LABEL_173;
              }
            }
            unsigned int v54 = *((_DWORD *)this + 4);
LABEL_119:
            if (3 * v54 <= 4 * ((int)v50 - *((_DWORD *)this + 6)))
            {
              if (v54 >= 0x40) {
                v54 *= 2;
              }
              else {
                unsigned int v54 = 128;
              }
            }
            else if (v54 - v50 >= v54 >> 3)
            {
              goto LABEL_121;
            }
            llvm::SmallPtrSetImplBase::Grow(this, v54);
            unsigned int v54 = *((_DWORD *)this + 4);
            uint64_t v48 = *((void *)this + 1);
LABEL_121:
            unsigned int v55 = v54 - 1;
            unsigned int v56 = (v54 - 1) & ((v49 >> 4) ^ (v49 >> 9));
            unsigned int v57 = (void *)(v48 + 8 * v56);
            uint64_t v58 = *v57;
            if (*v57 == -1)
            {
              uint64_t v59 = 0;
LABEL_133:
              if (v59) {
                uint64_t v63 = v59;
              }
              else {
                uint64_t v63 = v57;
              }
              if (*v63 != v49)
              {
                if (*v63 == -2) {
                  --*((_DWORD *)this + 6);
                }
                else {
                  ++*((_DWORD *)this + 5);
                }
                *uint64_t v63 = v49;
              }
            }
            else
            {
              uint64_t v59 = 0;
              int v60 = 1;
              while (v58 != v49)
              {
                if (v59) {
                  BOOL v61 = 0;
                }
                else {
                  BOOL v61 = v58 == -2;
                }
                if (v61) {
                  uint64_t v59 = v57;
                }
                unsigned int v62 = v56 + v60++;
                unsigned int v56 = v62 & v55;
                unsigned int v57 = (void *)(v48 + 8 * (v62 & v55));
                uint64_t v58 = *v57;
                if (*v57 == -1) {
                  goto LABEL_133;
                }
              }
            }
            goto LABEL_140;
          }
LABEL_173:
          char v64 = 1;
        }
        else
        {
LABEL_148:
          char v64 = 0;
        }
        if (v79 != v81) {
          free(v79);
        }
        if (v64) {
          return 0;
        }
      }
    }
  }
  int v65 = *(unsigned __int8 *)(a1 + 4653);
  BOOL v66 = sub_1CD109AEC(a2, *(unsigned __int8 *)(a1 + 4651));
  if (v65) {
    uint64_t v4 = v66;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v65) {
    return v4;
  }
  if (!v66) {
    return v4;
  }
  uint64_t v4 = 1;
  if (!sub_1CD10AB34(a2, a3, *(int **)(a1 + 4592), 1)) {
    return v4;
  }
  uint64_t v67 = *(void *)(a2 - 32);
  int v68 = *(unsigned __int8 *)(v67 + 16);
  if (v68 == 5) {
    return 0;
  }
  do
  {
    if (v68 != 77) {
      break;
    }
    uint64_t v67 = *(void *)(v67 - 32);
    int v68 = *(unsigned __int8 *)(v67 + 16);
  }
  while (v67);
  if ((v68 | 2) != 0x3E) {
    return 1;
  }
  int v82 = v84;
  uint64_t v83 = 0x1000000000;
  if (v68 == 60)
  {
    uint64_t v69 = v67;
    goto LABEL_167;
  }
  if (v68 != 62)
  {
LABEL_188:
    uint64_t v4 = 0;
    goto LABEL_190;
  }
  uint64_t v69 = *(void *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF));
  if (*(unsigned char *)(v69 + 16) == 60)
  {
LABEL_167:
    uint64_t v71 = *(void *)(v69 + 8);
    if (v71)
    {
      unsigned int v70 = 0;
      do
      {
        if (v70 >= HIDWORD(v83)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v82 + v70) = *(void *)(v71 + 24);
        unsigned int v70 = v83 + 1;
        LODWORD(v83) = v83 + 1;
        uint64_t v71 = *(void *)(v71 + 8);
      }
      while (v71);
      goto LABEL_174;
    }
    goto LABEL_188;
  }
  v84[0] = v67;
  unsigned int v70 = 1;
  while (1)
  {
    uint64_t v72 = *((void *)v82 + --v70);
    LODWORD(v83) = v70;
    int v73 = *(unsigned __int8 *)(v72 + 16);
    if (v72)
    {
      if (v73 == 62) {
        break;
      }
    }
    if (v73 == 77) {
      goto LABEL_183;
    }
LABEL_174:
    if (!v70) {
      goto LABEL_188;
    }
  }
  uint64_t v74 = *(_DWORD *)(v72 + 20) & 0x7FFFFFF;
  if (v74 == 1)
  {
LABEL_183:
    for (uint64_t k = *(void *)(v72 + 8); k; uint64_t k = *(void *)(k + 8))
    {
      if (v70 >= HIDWORD(v83)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v82 + v70) = *(void *)(k + 24);
      unsigned int v70 = v83 + 1;
      LODWORD(v83) = v83 + 1;
    }
    goto LABEL_174;
  }
  unsigned int v75 = 1;
  while (*(unsigned char *)(*(void *)(v72 - 32 * v74 + 32 * v75) + 16) == 16)
  {
    if (v74 == ++v75) {
      goto LABEL_183;
    }
  }
  uint64_t v4 = 1;
LABEL_190:
  if (v82 != v84) {
    free(v82);
  }
  return v4;
}

double sub_1CC872A2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CBBE572C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CC872B1C(a1, v8);
    uint64_t v9 = 0;
    sub_1CBBE572C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(void *)&double result = 0x100000000;
  v6[2] = 0x100000000;
  return result;
}

void *sub_1CC872B1C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        *double result = -4096;
        result += 4;
        v13 -= 32;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 32 * v3;
      uint64_t v15 = v4;
      do
      {
        uint64_t v16 = *(void *)v15;
        if ((*(void *)v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v21 = 0;
          sub_1CBBE572C(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v21);
          uint64_t v17 = v21;
          void *v21 = *(void *)v15;
          v17[1] = v17 + 3;
          v17[2] = 0x100000000;
          unsigned int v18 = *(void **)(v15 + 8);
          if ((void *)v15 != v17)
          {
            unsigned int v19 = *(_DWORD *)(v15 + 16);
            if (v19)
            {
              if ((void *)(v15 + 24) == v18)
              {
                if (v19 >= 2) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v17 + 3, v18, 8 * *(unsigned int *)(v15 + 16));
                *((_DWORD *)v17 + 4) = v19;
                unsigned int v18 = *(void **)(v15 + 8);
              }
              else
              {
                v17[1] = v18;
                int v20 = *(_DWORD *)(v15 + 20);
                *((_DWORD *)v17 + 4) = v19;
                *((_DWORD *)v17 + 5) = v20;
                *(void *)(v15 + 8) = v15 + 24;
                *(_DWORD *)(v15 + 20) = 0;
                unsigned int v18 = (void *)(v15 + 24);
              }
              *(_DWORD *)(v15 + 16) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          if ((void *)(v15 + 24) != v18) {
            free(v18);
          }
        }
        v15 += 32;
        v14 -= 32;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *double result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1CC872D30(uint64_t a1)
{
  BOOL result = 0;
  if (a1)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    if (v3 == 15)
    {
      if ((v3 & 0xFE) == 0x12) {
        unsigned int v4 = *(_DWORD *)(**(void **)(a1 + 16) + 8) & 0xFFFFFF00;
      }
      else {
        unsigned int v4 = v3 & 0xFFFFFF00;
      }
      return v4 == 512 || v4 == 0x4000;
    }
  }
  return result;
}

void sub_1CC872D90()
{
}

void *sub_1CC872DA4(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F261FE18;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC872DEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FE18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC872E18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v18 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = v3 + 8;
  if (*(unsigned char *)v3)
  {
    int v5 = 32;
  }
  else
  {
    int v5 = *(_DWORD *)(v3 + 16);
    if (!v5)
    {
      uint64_t v15 = 0;
      goto LABEL_17;
    }
    uint64_t v4 = *(void *)(v3 + 8);
  }
  int v6 = v5 - 1;
  unsigned int v7 = v6 & ((v2 >> 4) ^ (v2 >> 9));
  unsigned int v8 = (void *)(v4 + 8 * v7);
  uint64_t v9 = *v8;
  if (v2 == *v8) {
    return 0;
  }
  uint64_t v10 = 0;
  int v11 = 1;
  while (v9 != -4096)
  {
    if (v10) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v9 == -8192;
    }
    if (v12) {
      uint64_t v10 = v8;
    }
    unsigned int v13 = v7 + v11++;
    unsigned int v7 = v13 & v6;
    unsigned int v8 = (void *)(v4 + 8 * v7);
    uint64_t v9 = *v8;
    if (v2 == *v8) {
      return 0;
    }
  }
  if (v10) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = v8;
  }
LABEL_17:
  uint64_t v16 = sub_1CC872F3C(*(void *)(a1 + 8), (uint64_t)&v18, &v18, v15);
  *uint64_t v16 = v18;
  unsigned int v17 = *(_DWORD *)(v3 + 272);
  if (v17 >= *(_DWORD *)(v3 + 276)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v3 + 264) + 8 * v17) = v18;
  ++*(_DWORD *)(v3 + 272);
  return 1;
}

void *sub_1CC872F3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC8730B4(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 32;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC8730B4(a1, v8);
      int v20 = 0;
      sub_1CBAA3164(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC8730B4(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CBAA350C((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v9 = v14;
  for (uint64_t i = 8; i != 264; i += 8)
  {
    uint64_t v11 = *(void *)(a1 + i);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v9++ = v11;
    }
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CBAA350C((int *)a1, v14, v9);
}

unint64_t sub_1CC87323C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v40 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v40 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v40;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v4 = qword_1EBCBE580;
  if (a1 == a2)
  {
    unint64_t v6 = 0;
    return sub_1CBAE06B8(&v44, v6, v4);
  }
  else
  {
    for (unint64_t i = 0; i <= 0x38; i += 8)
    {
      unint64_t v6 = i + 8;
      uint64_t v7 = *a1;
      a1 += 4;
      *(uint64_t *)((char *)&v44 + i) = v7;
      if (a1 == a2) {
        return sub_1CBAE06B8(&v44, v6, v4);
      }
    }
    unint64_t v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v10 = __ROR8__(v4 ^ 0xB492B66FBE98F273, 49);
    unint64_t v11 = v4 ^ (v4 >> 47);
    unint64_t v12 = v4 ^ (((0x9DDFEA08EB382D69 * (v11 ^ (0xB492B66FBE98F273 * v4))) ^ v4) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v11 ^ (0xB492B66FBE98F273 * v4)));
    uint64_t v13 = v10 + v4 + v45;
    unint64_t v14 = v49 + v10 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v4 - 0x4B6D499041670D8DLL * v4, 42);
    uint64_t v15 = v44 - 0x6D8ED9027DD26057 * v4;
    uint64_t v16 = v11 + v15;
    uint64_t v17 = v15 + v45 + v46;
    uint64_t v18 = __ROR8__(v17, 44) + v15;
    unint64_t v19 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v12) ^ ((0x9DDFEA08EB382D69 * v12) >> 47));
    unint64_t v20 = (0xB492B66FBE98F273 * __ROR8__(v13, 37)) ^ v19;
    uint64_t v21 = __ROR8__(v11 - 0x622015F714C7D297 * (v9 ^ (v9 >> 47)), 33);
    uint64_t v22 = v18 + __ROR8__(v20 + v16 + v47, 21);
    unint64_t v23 = 0xB492B66FBE98F273 * v21;
    uint64_t v24 = v17 + v47;
    uint64_t v25 = v19 + v48 - 0x4B6D499041670D8DLL * v21;
    uint64_t v26 = __ROR8__(v49 + v50 + v25, 44) + v25 + __ROR8__(v14 + v46 + v51 + v25, 21);
    uint64_t v27 = v49 + v50 + v25 + v51;
    unint64_t v28 = 64;
    if (a1 != a2)
    {
      unint64_t v29 = v20;
      do
      {
        unsigned int v30 = a1 + 4;
        uint64_t v43 = v24;
        uint64_t v44 = *a1;
        unint64_t v42 = v29;
        if (a1 + 4 == a2)
        {
          BOOL v41 = 1;
          uint64_t v39 = 8;
        }
        else
        {
          uint64_t v45 = a1[4];
          unsigned int v30 = a1 + 8;
          if (a1 + 8 == a2)
          {
            BOOL v41 = 1;
            uint64_t v39 = 16;
          }
          else
          {
            uint64_t v46 = a1[8];
            unsigned int v30 = a1 + 12;
            if (a1 + 12 == a2)
            {
              BOOL v41 = 1;
              uint64_t v39 = 24;
            }
            else
            {
              uint64_t v47 = a1[12];
              unsigned int v30 = a1 + 16;
              if (a1 + 16 == a2)
              {
                BOOL v41 = 1;
                uint64_t v39 = 32;
              }
              else
              {
                uint64_t v48 = a1[16];
                unsigned int v30 = a1 + 20;
                if (a1 + 20 == a2)
                {
                  BOOL v41 = 1;
                  uint64_t v39 = 40;
                }
                else
                {
                  uint64_t v49 = a1[20];
                  unsigned int v30 = a1 + 24;
                  if (a1 + 24 == a2)
                  {
                    BOOL v41 = 1;
                    uint64_t v39 = 48;
                  }
                  else
                  {
                    uint64_t v50 = a1[24];
                    unsigned int v30 = a1 + 28;
                    if (a1 + 28 != a2)
                    {
                      uint64_t v51 = a1[28];
                      a1 += 32;
                      BOOL v41 = a1 == a2;
                      uint64_t v39 = 64;
                      goto LABEL_20;
                    }
                    BOOL v41 = 1;
                    uint64_t v39 = 56;
                  }
                }
              }
            }
          }
        }
        a1 = v30;
LABEL_20:
        if ((v39 & 0x38) != 0) {
          sub_1CBFFD29C(&v44, (unsigned char *)&v44 + v39, &v52);
        }
        uint64_t v31 = v14 + v23 + v43 + v45;
        unint64_t v14 = v49 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v14 + v50, 42);
        uint64_t v32 = v44 - 0x4B6D499041670D8DLL * v22;
        uint64_t v33 = v32 + v45 + v46;
        unint64_t v20 = (0xB492B66FBE98F273 * __ROR8__(v31, 37)) ^ v26;
        uint64_t v22 = __ROR8__(v33, 44) + v32 + __ROR8__(v20 + v27 + v32 + v47, 21);
        unint64_t v23 = 0xB492B66FBE98F273 * __ROR8__(v27 + v42, 33);
        unint64_t v34 = v23 + v26 + v48;
        uint64_t v24 = v33 + v47;
        uint64_t v26 = __ROR8__(v49 + v50 + v34, 44) + v34 + __ROR8__(v14 + v46 + v34 + v51, 21);
        uint64_t v27 = v49 + v50 + v34 + v51;
        v28 += v39;
        unint64_t v29 = v20;
      }
      while (!v41);
    }
    unint64_t v35 = 0x9DDFEA08EB382D69
        * (v27 ^ ((0x9DDFEA08EB382D69 * (v24 ^ v27)) >> 47) ^ (0x9DDFEA08EB382D69 * (v24 ^ v27)));
    uint64_t v36 = v20 - 0x4B6D499041670D8DLL * (v14 ^ (v14 >> 47)) - 0x622015F714C7D297 * (v35 ^ (v35 >> 47));
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v26 ^ ((0x9DDFEA08EB382D69 * (v22 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v22 ^ v26)));
    uint64_t v38 = v23 - 0x4B6D499041670D8DLL * (v28 ^ (v28 >> 47)) - 0x622015F714C7D297 * (v37 ^ (v37 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v38 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v38)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v38)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v38)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v38)))) >> 47));
  }
}

void sub_1CC873704(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
long long *sub_1CC874290(long long *result, unint64_t *a2, long long *a3)
{
  unint64_t v3 = *a2;
  if (*a2 < *(void *)result || *a2 == *(void *)result && *((_DWORD *)a2 + 4) < *((_DWORD *)result + 4))
  {
    if (*(void *)a3 < v3 || *(void *)a3 == v3 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
    {
      unint64_t v4 = *((void *)result + 2);
      long long v5 = *result;
      uint64_t v6 = *((void *)a3 + 2);
      *BOOL result = *a3;
      *((void *)result + 2) = v6;
    }
    else
    {
      unint64_t v13 = *((void *)result + 2);
      long long v14 = *result;
      unint64_t v15 = a2[2];
      *BOOL result = *(_OWORD *)a2;
      *((void *)result + 2) = v15;
      *(_OWORD *)a2 = v14;
      a2[2] = v13;
      if (*(void *)a3 >= *a2 && (*(void *)a3 != *a2 || *((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4))) {
        return result;
      }
      unint64_t v4 = a2[2];
      long long v5 = *(_OWORD *)a2;
      unint64_t v16 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *a3;
      a2[2] = v16;
    }
    *a3 = v5;
    *((void *)a3 + 2) = v4;
    return result;
  }
  if (*(void *)a3 < v3 || *(void *)a3 == v3 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
  {
    unint64_t v7 = a2[2];
    long long v8 = *(_OWORD *)a2;
    unint64_t v9 = *((void *)a3 + 2);
    *(_OWORD *)a2 = *a3;
    a2[2] = v9;
    *a3 = v8;
    *((void *)a3 + 2) = v7;
    if (*a2 < *(void *)result || *a2 == *(void *)result && *((_DWORD *)a2 + 4) < *((_DWORD *)result + 4))
    {
      unint64_t v10 = *((void *)result + 2);
      long long v11 = *result;
      unint64_t v12 = a2[2];
      *BOOL result = *(_OWORD *)a2;
      *((void *)result + 2) = v12;
      *(_OWORD *)a2 = v11;
      a2[2] = v10;
    }
  }
  return result;
}

BOOL sub_1CC8743F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (long long *)(a2 - 24);
      unint64_t v7 = *(void *)(a2 - 24);
      if (v7 < *(void *)a1 || v7 == *(void *)a1 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 16))
      {
        uint64_t v8 = *(void *)(a1 + 16);
        long long v9 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v10;
        *uint64_t v6 = v9;
        *(void *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_1CC874290((long long *)a1, (unint64_t *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CC874768(a1, (unint64_t *)(a1 + 24), a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v22 = (long long *)(a1 + 24);
      uint64_t v23 = (long long *)(a1 + 48);
      uint64_t v24 = (long long *)(a1 + 72);
      sub_1CC874768(a1, (unint64_t *)(a1 + 24), a1 + 48, a1 + 72);
      unint64_t v25 = (long long *)(a2 - 24);
      unint64_t v26 = *(void *)(a2 - 24);
      unint64_t v27 = *(void *)(a1 + 72);
      if (v26 < v27 || v26 == v27 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 88))
      {
        uint64_t v28 = *(void *)(a1 + 88);
        long long v29 = *v24;
        uint64_t v30 = *(void *)(a2 - 8);
        long long *v24 = *v25;
        *(void *)(a1 + 88) = v30;
        *unint64_t v25 = v29;
        *(void *)(a2 - 8) = v28;
        if (*(void *)v24 < *(void *)v23
          || *(void *)v24 == *(void *)v23 && *(_DWORD *)(a1 + 88) < *(_DWORD *)(a1 + 64))
        {
          uint64_t v31 = *(void *)(a1 + 64);
          long long v32 = *v23;
          long long *v23 = *v24;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          long long *v24 = v32;
          *(void *)(a1 + 88) = v31;
          if (*(void *)v23 < *(void *)v22
            || *(void *)v23 == *(void *)v22 && *(_DWORD *)(a1 + 64) < *(_DWORD *)(a1 + 40))
          {
            uint64_t v33 = *(void *)(a1 + 40);
            long long v34 = *v22;
            *uint64_t v22 = *v23;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v23 = v34;
            *(void *)(a1 + 64) = v33;
            unint64_t v35 = *(void *)(a1 + 24);
            if (v35 < *(void *)a1 || v35 == *(void *)a1 && *(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 16))
            {
              uint64_t v36 = *(void *)(a1 + 16);
              long long v37 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v22;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v22 = v37;
              *(void *)(a1 + 40) = v36;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v11 = a1 + 48;
      sub_1CC874290((long long *)a1, (unint64_t *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v12 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  do
  {
    unint64_t v15 = *(void *)v12;
    if (*(void *)v12 >= *(void *)v11)
    {
      if (*(void *)v12 != *(void *)v11) {
        goto LABEL_21;
      }
      unsigned int v16 = *(_DWORD *)(v12 + 16);
      if (v16 >= *(_DWORD *)(v11 + 16)) {
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v16 = *(_DWORD *)(v12 + 16);
    }
    uint64_t v17 = *(void *)(v12 + 8);
    int v18 = *(_DWORD *)(v12 + 20);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
    *(void *)(v12 + 16) = *(void *)(v11 + 16);
    uint64_t v19 = a1;
    if (v11 != a1)
    {
      uint64_t v20 = v13;
      while (1)
      {
        unint64_t v21 = *(void *)(a1 + v20 + 24);
        if (v15 >= v21)
        {
          if (v15 != v21)
          {
            uint64_t v19 = a1 + v20 + 48;
            goto LABEL_20;
          }
          if (v16 >= *(_DWORD *)(a1 + v20 + 40)) {
            break;
          }
        }
        v11 -= 24;
        *(_OWORD *)(a1 + v20 + 48) = *(_OWORD *)(a1 + v20 + 24);
        *(void *)(a1 + v20 + 64) = *(void *)(a1 + v20 + 40);
        v20 -= 24;
        if (v20 == -48)
        {
          uint64_t v19 = a1;
          goto LABEL_20;
        }
      }
      uint64_t v19 = v11;
    }
LABEL_20:
    *(void *)uint64_t v19 = v15;
    *(void *)(v19 + 8) = v17;
    *(_DWORD *)(v19 + 16) = v16;
    *(_DWORD *)(v19 + 20) = v18;
    if (++v14 == 8) {
      return v12 + 24 == a2;
    }
LABEL_21:
    uint64_t v11 = v12;
    v13 += 24;
    v12 += 24;
  }
  while (v12 != a2);
  return 1;
}

__n128 sub_1CC874768(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_1CC874290((long long *)a1, a2, (long long *)a3);
  if (*(void *)a4 < *(void *)a3 || *(void *)a4 == *(void *)a3 && *(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*(void *)a3 < *a2 || *(void *)a3 == *a2 && *(_DWORD *)(a3 + 16) < *((_DWORD *)a2 + 4))
    {
      unint64_t v11 = a2[2];
      __n128 result = *(__n128 *)a2;
      unint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      if (*a2 < *(void *)a1 || *a2 == *(void *)a1 && *((_DWORD *)a2 + 4) < *(_DWORD *)(a1 + 16))
      {
        unint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        unint64_t v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

void *sub_1CC874880(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  if (*(_DWORD *)result <= 1u && !*((_DWORD *)result + 1)) {
    return result;
  }
  if (v2)
  {
    unint64_t v3 = result + 1;
    uint64_t v4 = result + 33;
    goto LABEL_6;
  }
  uint64_t v6 = *((unsigned int *)result + 4);
  if (((2 * v2) & 0xFFFFFFFC) >= v6 || v6 < 0x41)
  {
    if (!v6)
    {
      int v5 = 0;
LABEL_8:
      *(_DWORD *)__n128 result = v5;
      *((_DWORD *)result + 1) = 0;
      return result;
    }
    unint64_t v3 = (void *)result[1];
    uint64_t v4 = &v3[v6];
    do
LABEL_6:
      *v3++ = -4096;
    while (v3 != v4);
    int v5 = *(_DWORD *)result & 1;
    goto LABEL_8;
  }
  unsigned int v7 = 1 << (33 - __clz((v2 >> 1) - 1));
  if (v2 >= 2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v6)
  {
    uint64_t v9 = result + 1;
    __n128 result = (void *)MEMORY[0x1D25D9CD0](result[1], 8);
    if (v8 <= 0x20)
    {
      *uint64_t v1 = 1;
    }
    else
    {
      *(_DWORD *)v1 &= ~1u;
      __n128 result = operator new(8 * v8, (std::align_val_t)8uLL);
      v1[1] = result;
      v1[2] = v8;
      int v10 = *(_DWORD *)v1;
      *uint64_t v1 = *(_DWORD *)v1 & 1;
      if ((v10 & 1) == 0)
      {
        unint64_t v11 = &result[v8];
        uint64_t v9 = result;
        goto LABEL_18;
      }
    }
    unint64_t v11 = v1 + 33;
    do
LABEL_18:
      *v9++ = -4096;
    while (v9 != v11);
    return result;
  }
  *__n128 result = 0;
  if (v2 >= 2)
  {
    unint64_t v12 = (void *)result[1];
    uint64_t v13 = 8 * v6;
    do
    {
      *v12++ = -4096;
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1CC8749E4(uint64_t a1, uint64_t a2)
{
  if (a1 && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v4 = a1;
  }
  uint64_t v6 = sub_1CB83544C(v5, v4);
  if (v7 == 1)
  {
    uint64_t v10 = v6;
    uint64_t v6 = v10;
  }
  unint64_t v8 = (unint64_t)(v6 + 7) >> 3;
  if (v8 <= 2) {
    return 2;
  }
  else {
    return v8;
  }
}

BOOL sub_1CC874A68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 == *a1)
  {
    uint64_t v5 = *((unsigned int *)a1 + 5);
    uint64_t v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a3)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      uint64_t v6 = (void *)(v3 + v7);
    }
LABEL_19:
    uint64_t v4 = a1[1];
  }
  else
  {
    uint64_t v9 = *((unsigned int *)a1 + 4);
    unsigned int v10 = (v9 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = (void *)(v3 + 8 * v10);
    uint64_t v11 = *v6;
    if (*v6 == -1)
    {
      unint64_t v12 = 0;
LABEL_26:
      if (v12) {
        uint64_t v6 = v12;
      }
      if (*v6 != a3) {
        uint64_t v6 = (void *)(v3 + 8 * v9);
      }
    }
    else
    {
      unint64_t v12 = 0;
      int v13 = 1;
      while (v11 != a3)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          unint64_t v12 = v6;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & (v9 - 1);
        uint64_t v6 = (void *)(v3 + 8 * v10);
        uint64_t v11 = *v6;
        if (*v6 == -1) {
          goto LABEL_26;
        }
      }
    }
  }
  BOOL v14 = v3 == v4;
  uint64_t v16 = 16;
  if (v14) {
    uint64_t v16 = 20;
  }
  uint64_t v17 = (void *)(v3 + 8 * *(unsigned int *)((char *)a1 + v16));
  if (v6 != v17) {
    sub_1CC871168(a2, a3);
  }
  return v6 != v17;
}

void *sub_1CC874B80(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      unsigned int v2 = result + 1;
      uint64_t v3 = result + 33;
    }
    else
    {
      uint64_t v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41) {
        return sub_1CC874BFC(result);
      }
      if (!v5)
      {
        int v4 = 0;
LABEL_6:
        *(_DWORD *)__n128 result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      unsigned int v2 = (void *)result[1];
      uint64_t v3 = &v2[v5];
    }
    do
      *v2++ = -4096;
    while (v2 != v3);
    int v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

void *sub_1CC874BFC(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  int v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    uint64_t v6 = result + 33;
    *__n128 result = 1;
    uint64_t v5 = result + 1;
    goto LABEL_15;
  }
  if ((v2 & 1) == 0)
  {
    if (v4 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_9;
    }
    *__n128 result = 0;
    if (v2 < 2) {
      return result;
    }
    uint64_t v5 = (void *)result[1];
    uint64_t v6 = &v5[v4];
    do
LABEL_15:
      *v5++ = -4096;
    while (v5 != v6);
    return result;
  }
LABEL_9:

  return sub_1CC86D318(v1, v4);
}

void sub_1CC874CCC()
{
}

void *sub_1CC874CE0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F261FE60;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC874D28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F261FE60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC874D54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = *a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

llvm::SmallPtrSetImplBase *sub_1CC874DB4(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3)
{
  unsigned int v4 = (char *)this + 32;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    unsigned int v7 = 4;
    uint64_t v8 = (char *)this + 32;
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = *((unsigned int *)this + 5);
      if (v8 != v4) {
        break;
      }
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * v10;
        int v13 = v4;
        while (*v13 != v9)
        {
          if (*v13 == -2) {
            uint64_t v11 = v13;
          }
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_11;
            }
            *uint64_t v11 = v9;
            --*((_DWORD *)this + 6);
            goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
LABEL_11:
      if (v10 >= v7) {
        break;
      }
      *((_DWORD *)this + 5) = v10 + 1;
      *(void *)&v4[8 * v10] = v9;
LABEL_13:
      unsigned int v4 = *(char **)this;
      uint64_t v8 = (char *)*((void *)this + 1);
      if (++v6 == a3) {
        return this;
      }
    }
    if (3 * v7 <= 4 * ((int)v10 - *((_DWORD *)this + 6)))
    {
      if (v7 >= 0x40) {
        v7 *= 2;
      }
      else {
        unsigned int v7 = 128;
      }
    }
    else if (v7 - v10 >= v7 >> 3)
    {
      goto LABEL_17;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v7);
    unsigned int v7 = *((_DWORD *)this + 4);
    uint64_t v8 = (char *)*((void *)this + 1);
LABEL_17:
    unsigned int v14 = v7 - 1;
    unsigned int v15 = (v7 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    uint64_t v16 = &v8[8 * v15];
    uint64_t v17 = *(void *)v16;
    if (*(void *)v16 == -1)
    {
      int v18 = 0;
LABEL_29:
      if (v18) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v16;
      }
      if (*(void *)v22 != v9)
      {
        if (*(void *)v22 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *(void *)uint64_t v22 = v9;
      }
    }
    else
    {
      int v18 = 0;
      int v19 = 1;
      while (v17 != v9)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          int v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        uint64_t v16 = &v8[8 * (v21 & v14)];
        uint64_t v17 = *(void *)v16;
        if (*(void *)v16 == -1) {
          goto LABEL_29;
        }
      }
    }
    goto LABEL_13;
  }
  return this;
}

uint64_t sub_1CC874F80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      unsigned int v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *sub_1CC875030(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC8751A8(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          uint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC8751A8(a1, v8);
      BOOL v20 = 0;
      sub_1CC874F80(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC8751A8(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC875324((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC875324((int *)a1, v14, v6);
}

int *sub_1CC875324(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    int v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_10;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_10:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CC875428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a3;
  v121[62] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    int v8 = (void *)(v7 + 72);
    do
    {
      int v8 = (void *)*v8;
      if (v8 == (void *)(v7 + 72)) {
        break;
      }
      uint64_t v9 = v8 ? (uint64_t)(v8 - 3) : 0;
      uint64_t v10 = *(void *)(v9 + 40);
      if (v10 == v9 + 40)
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v11 = v10 ? v10 - 24 : 0;
        uint64_t v12 = *(unsigned __int8 *)(v11 + 16) - 29 >= 0xB ? 0 : v11;
      }
    }
    while (*(unsigned char *)(v12 + 16) != 29);
LABEL_58:
    v121[0] = 1;
    for (uint64_t i = 1; i != 17; i += 2)
      v121[i] = -4096;
    unsigned int v118 = &v120;
    uint64_t v119 = 0x800000000;
    if (*(_DWORD *)(v6 + 2244) == *(_DWORD *)(v6 + 2248))
    {
      v115[0] = "entry";
      LOWORD(v117) = 259;
      operator new();
    }
    uint64_t v72 = *(void *)(v6 + 4576);
    uint64_t v73 = *(void *)(v6 + 4568);
    while (v72 != v73)
    {
      *(void *)&long long v112 = 0;
      unint64_t v75 = *(uint64_t ****)(v72 - 8);
      v72 -= 8;
      uint64_t v74 = v75;
      *(void *)&long long v112 = v75;
      uint64_t v76 = *(void *)(a3 + 2232);
      uint64_t v77 = *(void *)(a3 + 2224);
      if (v76 == v77)
      {
        uint64_t v78 = *(unsigned int *)(a3 + 2244);
        uint64_t v79 = (uint64_t ****)(v76 + 8 * v78);
        if (v78)
        {
          uint64_t v80 = 0;
          while (*(uint64_t ****)(v76 + v80) != v74)
          {
            v80 += 8;
            if (8 * v78 == v80) {
              goto LABEL_82;
            }
          }
          uint64_t v79 = (uint64_t ****)(v76 + v80);
        }
LABEL_82:
        uint64_t v77 = *(void *)(a3 + 2232);
        uint64_t v89 = a3;
      }
      else
      {
        uint64_t v81 = *(unsigned int *)(a3 + 2240);
        int v82 = v81 - 1;
        unsigned int v83 = (v81 - 1) & ((v74 >> 4) ^ (v74 >> 9));
        uint64_t v79 = (uint64_t ****)(v76 + 8 * v83);
        unint64_t v84 = *v79;
        if (*v79 == (uint64_t ***)-1)
        {
          int64_t v85 = 0;
LABEL_100:
          if (v85) {
            uint64_t v79 = v85;
          }
          uint64_t v89 = a3;
          LODWORD(v78) = *(_DWORD *)(a3 + 2244);
          long long v103 = (uint64_t ****)(v76 + 8 * v81);
          if (*v79 != v74) {
            uint64_t v79 = v103;
          }
        }
        else
        {
          int64_t v85 = 0;
          int v86 = 1;
          while (v84 != v74)
          {
            if (v85) {
              BOOL v87 = 0;
            }
            else {
              BOOL v87 = v84 == (uint64_t ***)-2;
            }
            if (v87) {
              int64_t v85 = v79;
            }
            unsigned int v88 = v83 + v86++;
            unsigned int v83 = v88 & v82;
            uint64_t v79 = (uint64_t ****)(v76 + 8 * (v88 & v82));
            unint64_t v84 = *v79;
            if (*v79 == (uint64_t ***)-1) {
              goto LABEL_100;
            }
          }
          uint64_t v89 = a3;
          LODWORD(v78) = *(_DWORD *)(a3 + 2244);
        }
      }
      if (v76 == v77) {
        unsigned int v90 = v78;
      }
      else {
        unsigned int v90 = *(_DWORD *)(v89 + 2240);
      }
      if (v79 != (uint64_t ****)(v76 + 8 * v90))
      {
        if ((*((unsigned char *)v74 + 23) & 0x10) != 0)
        {
          uint64_t v91 = ***v74;
          uint64_t v92 = *(void *)(v91 + 152);
          uint64_t v93 = *(unsigned int *)(v91 + 168);
          if (v93)
          {
            LODWORD(v94) = (v93 - 1) & ((v74 >> 4) ^ (v74 >> 9));
            unsigned int v95 = (uint64_t ****)(v92 + 16 * v94);
            unint64_t v96 = *v95;
            if (*v95 != v74)
            {
              int v97 = 1;
              do
              {
                if (v96 == (uint64_t ***)-4096) {
                  goto LABEL_94;
                }
                int v98 = v94 + v97++;
                uint64_t v94 = v98 & (v93 - 1);
                unint64_t v96 = *(uint64_t ****)(v92 + 16 * v94);
              }
              while (v96 != v74);
              unsigned int v95 = (uint64_t ****)(v92 + 16 * v94);
            }
          }
          else
          {
LABEL_94:
            unsigned int v95 = (uint64_t ****)(v92 + 16 * v93);
          }
          uint64_t v99 = v95[1];
          unint64_t v102 = *v99;
          unint64_t v101 = (char *)(v99 + 2);
          uint64_t v100 = v102;
        }
        else
        {
          uint64_t v100 = 0;
          unint64_t v101 = &byte_1CFBCE98E;
        }
        LOWORD(v117) = 773;
        v115[0] = v101;
        v115[1] = v100;
        *(void *)&long long v116 = ".cprog";
        operator new();
      }
    }
    v115[0] = "return.cprog";
    LOWORD(v117) = 259;
    operator new();
  }
  uint64_t v14 = a1;
  int v15 = *(_DWORD *)(a3 + 2244);
  int v16 = *(_DWORD *)(a3 + 2248);
  unsigned int v17 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 560))(a4);
  BOOL v18 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***v17 + 1576), 0, 0, 0);
  unsigned int v19 = v17 >> 4;
  if ((*((unsigned char *)v17 + 23) & 0x10) != 0)
  {
    uint64_t v20 = ***v17;
    uint64_t v21 = *(void *)(v20 + 152);
    uint64_t v22 = *(unsigned int *)(v20 + 168);
    if (v22)
    {
      LODWORD(v23) = (v22 - 1) & (v19 ^ (v17 >> 9));
      uint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
      unint64_t v25 = *v24;
      if (*v24 != v17)
      {
        int v26 = 1;
        do
        {
          if (v25 == (uint64_t ***)-4096) {
            goto LABEL_25;
          }
          int v27 = v23 + v26++;
          uint64_t v23 = v27 & (v22 - 1);
          unint64_t v25 = *(uint64_t ****)(v21 + 16 * v23);
        }
        while (v25 != v17);
        uint64_t v24 = (uint64_t ****)(v21 + 16 * v23);
      }
    }
    else
    {
LABEL_25:
      uint64_t v24 = (uint64_t ****)(v21 + 16 * v22);
    }
    uint64_t v28 = v24[1];
    uint64_t v31 = *v28;
    long long v29 = (char *)(v28 + 2);
    uint64_t v30 = v31;
  }
  else
  {
    uint64_t v30 = 0;
    long long v29 = &byte_1CFBCE98E;
  }
  LOWORD(v114) = 773;
  *(void *)&long long v112 = v29;
  *((void *)&v112 + 1) = v30;
  *(void *)&long long v113 = ".constant_program";
  long long v32 = "";
  if (v15 != v16) {
    long long v32 = ".cfg";
  }
  if (*v32)
  {
    v115[0] = &v112;
    *(void *)&long long v116 = v32;
    LOWORD(v117) = 770;
  }
  else
  {
    *(_OWORD *)unint64_t v115 = v112;
    long long v116 = v113;
    uint64_t v117 = v114;
  }
  uint64_t v33 = operator new(0x80uLL);
  long long v34 = (llvm::Value *)(v33 + 2);
  v33[7] = v33[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v33 = 0;
  llvm::Function::Function((unint64_t *)v33 + 1, v18, 0, (llvm::Type *)0xFFFFFFFFLL, (const char **)v115, 0);
  *((_WORD *)v33 + 13) = *((_WORD *)v33 + 13) & 0xC00F | 0x640;
  uint64_t v36 = v17[5];
  if (*(_DWORD *)a6)
  {
    int v37 = 16;
    uint64_t v38 = a6 + 8;
  }
  else
  {
    uint64_t v38 = *(void *)(a6 + 8);
    int v37 = *(_DWORD *)(a6 + 16);
    if (!v37)
    {
      uint64_t v108 = 0;
      goto LABEL_118;
    }
  }
  int v39 = v37 - 1;
  LODWORD(v40) = (v37 - 1) & (v19 ^ (v17 >> 9));
  unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
  unint64_t v42 = *v41;
  if (*v41 == v17)
  {
LABEL_36:
    unint64_t v43 = (uint64_t *)v41[1];
    *((void *)v33 + 6) = v36;
    if ((*((unsigned char *)v33 + 31) & 0x10) != 0)
    {
      uint64_t v44 = (llvm::ValueSymbolTable *)v36[14];
      if (v44) {
        llvm::ValueSymbolTable::reinsertValue(v44, v34);
      }
    }
    uint64_t v45 = *v43;
    *((void *)v33 + 8) = *v43;
    *((void *)v33 + 9) = v43;
    uint64_t v46 = (char *)(v33 + 16);
    *(void *)(v45 + 8) = v46;
    *unint64_t v43 = (uint64_t)v46;
    uint64_t v6 = a3;
    if ((*((unsigned char *)v17 + 23) & 0x20) == 0)
    {
LABEL_57:
      uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
      (*(void (**)(uint64_t, llvm::Value *, uint64_t ***))(*(void *)v70 + 32))(v70, v34, v17);
      *(void *)(v14 + 8) = v34;
      goto LABEL_58;
    }
    uint64_t v47 = ***v17;
    v115[0] = v17;
    int v48 = *(_DWORD *)(v47 + 2496);
    if (v48)
    {
      uint64_t v49 = *(void *)(v47 + 2480);
      int v50 = v48 - 1;
      unsigned int v51 = v50 & (v19 ^ (v17 >> 9));
      BOOL v52 = (uint64_t ****)(v49 + 40 * v51);
      long long v53 = *v52;
      if (*v52 == v17) {
        goto LABEL_50;
      }
      unsigned int v54 = 0;
      int v55 = 1;
      while (v53 != (uint64_t ***)-4096)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == (uint64_t ***)-8192;
        }
        if (v56) {
          unsigned int v54 = v52;
        }
        unsigned int v57 = v51 + v55++;
        unsigned int v51 = v57 & v50;
        BOOL v52 = (uint64_t ****)(v49 + 40 * v51);
        long long v53 = *v52;
        if (*v52 == v17) {
          goto LABEL_50;
        }
      }
      if (v54) {
        uint64_t v104 = v54;
      }
      else {
        uint64_t v104 = v52;
      }
    }
    else
    {
      uint64_t v104 = 0;
    }
    BOOL v52 = (uint64_t ****)sub_1CC609054(v47 + 2480, (uint64_t)v115, (uint64_t *)v115, v104);
    unint64_t v105 = (uint64_t ***)v115[0];
    v52[3] = 0;
    v52[4] = 0;
    *BOOL v52 = v105;
    v52[1] = (uint64_t ***)(v52 + 3);
    v52[2] = (uint64_t ***)0x100000000;
LABEL_50:
    uint64_t v58 = *((unsigned int *)v52 + 4);
    if (v58)
    {
      uint64_t v59 = (llvm::DIBuilder **)(v52[1] + 1);
      uint64_t v60 = 16 * v58;
      while (*((_DWORD *)v59 - 2))
      {
        v59 += 2;
        v60 -= 16;
        if (!v60) {
          goto LABEL_57;
        }
      }
      if (*v59)
      {
        ArtificialSubprograuint64_t m = (unsigned int *)llvm::DIBuilder::createArtificialSubprogram(*v59, v35);
        ArtificialType = llvm::DIBuilder::createArtificialType(*(llvm::MDNode **)&ArtificialSubprogram[-2 * ArtificialSubprogram[2] + 8], v62, v63, v64, v65, v66, v67, v68);
        *((unsigned char *)ArtificialType + 52) = -48;
        llvm::MDNode::replaceOperandWith((llvm::MDNode *)ArtificialSubprogram, 4, ArtificialType);
        llvm::Value::setMetadata((uint64_t ***)v34, 0, (llvm::MDNode *)ArtificialSubprogram);
      }
    }
    goto LABEL_57;
  }
  int v106 = 1;
  while (v42 != (uint64_t ***)-4096)
  {
    int v107 = v40 + v106++;
    uint64_t v40 = v107 & v39;
    unint64_t v42 = *(uint64_t ****)(v38 + 16 * v40);
    if (v42 == v17)
    {
      unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
      goto LABEL_36;
    }
  }
  if (*(_DWORD *)a6)
  {
    uint64_t v108 = 16;
    uint64_t v38 = a6 + 8;
  }
  else
  {
    uint64_t v38 = *(void *)(a6 + 8);
    uint64_t v108 = *(unsigned int *)(a6 + 16);
  }
LABEL_118:
  unint64_t v41 = (uint64_t ****)(v38 + 16 * v108);
  uint64_t v14 = a1;
  goto LABEL_36;
}

uint64_t sub_1CC87A868(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a1[1] + 2244) == *(_DWORD *)(a1[1] + 2248)) {
    return *(void *)*a1;
  }
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = sub_1CC87D1D0(a1[2], v4);
  uint64_t v6 = a1[2];
  uint64_t v7 = v6 + 8;
  if (*(unsigned char *)v6)
  {
    uint64_t v8 = 8;
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(unsigned int *)(v6 + 16);
  }
  if (v7 + 16 * v8 != v5) {
    return *(void *)(v5 + 8);
  }
  uint64_t v9 = (uint64_t *)a1[3];
  uint64_t v28 = v4;
  uint64_t v10 = sub_1CC87D300(v9[1], v4);
  uint64_t v11 = v9[1];
  uint64_t v12 = v11 + 8;
  if (*(unsigned char *)v11)
  {
    uint64_t v13 = 4;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(unsigned int *)(v11 + 16);
  }
  if (v12 + 16 * v13 == v10)
  {
    uint64_t v15 = *(void *)(*v9 + 24);
    uint64_t v16 = *(unsigned int *)(*v9 + 40);
    if (v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      BOOL v18 = (uint64_t *)(v15 + 16 * v17);
      uint64_t v19 = *v18;
      if (v4 == *v18) {
        goto LABEL_20;
      }
      int v20 = 1;
      while (v19 != -4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        uint64_t v19 = *(void *)(v15 + 16 * v17);
        if (v4 == v19)
        {
          BOOL v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_20;
        }
      }
    }
    BOOL v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_20:
    uint64_t v22 = (uint64_t *)v18[1];
    while (1)
    {
      uint64_t v22 = (uint64_t *)v22[1];
      if (!v22) {
        break;
      }
      uint64_t v23 = sub_1CC87D1D0(v9[2], *v22);
      uint64_t v24 = v9[2];
      uint64_t v25 = v24 + 8;
      if (*(unsigned char *)v24)
      {
        uint64_t v26 = 8;
      }
      else
      {
        uint64_t v25 = *(void *)(v24 + 8);
        uint64_t v26 = *(unsigned int *)(v24 + 16);
      }
      if (v25 + 16 * v26 != v23)
      {
        uint64_t v14 = (uint64_t *)(v23 + 8);
        uint64_t v27 = *(void *)(v23 + 8);
        sub_1CC87D430((_DWORD *)v9[1], &v28)[1] = v27;
        return *v14;
      }
    }
    uint64_t v14 = v9 + 3;
    return *v14;
  }
  uint64_t v14 = (uint64_t *)(v10 + 8);
  return *v14;
}

void *sub_1CC87AA10(void *result, uint64_t a2)
{
  if (*(void *)(*(void *)*result + 96) && *(_DWORD *)(result[1] + 8))
  {
    int v2 = *(_DWORD *)(a2 + 20);
    if ((v2 & 0x40000000) != 0)
    {
      uint64_t v4 = *(uint64_t **)(a2 - 8);
      uint64_t v3 = v2 & 0x7FFFFFF;
      if (!v3) {
        return result;
      }
    }
    else
    {
      uint64_t v3 = v2 & 0x7FFFFFF;
      uint64_t v4 = (uint64_t *)(a2 - 32 * v3);
      if (!v3) {
        return result;
      }
    }
    uint64_t v5 = &v4[4 * v3];
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (uint64_t *)result[1];
      uint64_t v8 = *v7;
      uint64_t v9 = *((unsigned int *)v7 + 4);
      unsigned int v10 = *v4 >> 4;
      if (!v9) {
        goto LABEL_16;
      }
      unsigned int v11 = v9 - 1;
      uint64_t v12 = (v10 ^ (v6 >> 9)) & (v9 - 1);
      uint64_t v13 = *(void *)(v8 + (v12 << 6) + 24);
      if (v6 != v13) {
        break;
      }
      if (v12 != v9)
      {
        uint64_t v17 = v8 + (v9 << 6);
        goto LABEL_20;
      }
LABEL_33:
      v4 += 4;
      if (v4 == v5) {
        return result;
      }
    }
    int v14 = 1;
    while (v13 != -4096)
    {
      int v15 = v12 + v14++;
      uint64_t v12 = v15 & v11;
      uint64_t v16 = v8 + (v12 << 6);
      uint64_t v13 = *(void *)(v16 + 24);
      if (v6 == v13) {
        goto LABEL_17;
      }
    }
LABEL_16:
    uint64_t v16 = v8 + (v9 << 6);
LABEL_17:
    uint64_t v17 = v8 + (v9 << 6);
    if (v16 == v17) {
      goto LABEL_33;
    }
    if (v9)
    {
      unsigned int v11 = v9 - 1;
      uint64_t v12 = (v10 ^ (v6 >> 9)) & (v9 - 1);
LABEL_20:
      LODWORD(v18) = v12;
      uint64_t v19 = v8 + (v12 << 6);
      uint64_t v20 = *(void *)(v19 + 24);
      if (v6 == v20)
      {
LABEL_26:
        uint64_t v23 = *(void *)(v19 + 56);
        if (v6)
        {
          *(void *)v4[2] = v4[1];
          uint64_t v24 = v4[1];
          if (v24) {
            *(void *)(v24 + 16) = v4[2];
          }
        }
        *uint64_t v4 = v23;
        if (v23)
        {
          uint64_t v27 = *(void *)(v23 + 8);
          uint64_t v26 = (uint64_t **)(v23 + 8);
          uint64_t v25 = v27;
          v4[1] = v27;
          if (v27) {
            *(void *)(v25 + 16) = v4 + 1;
          }
          v4[2] = (uint64_t)v26;
          *uint64_t v26 = v4;
        }
        goto LABEL_33;
      }
      int v21 = 1;
      while (v20 != -4096)
      {
        int v22 = v18 + v21++;
        uint64_t v18 = v22 & v11;
        uint64_t v19 = v8 + (v18 << 6);
        uint64_t v20 = *(void *)(v19 + 24);
        if (v6 == v20) {
          goto LABEL_26;
        }
      }
    }
    uint64_t v19 = v17;
    goto LABEL_26;
  }
  return result;
}

void *sub_1CC87AB7C(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CB901A88((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC87ABDC(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC87ABDC(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC87ACA0((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CB901A88((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC87ACA0(uint64_t a1, unsigned int a2)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(void **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 8)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC87AE2C(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC87AE2C(a1, v14, v7);
}

uint64_t sub_1CC87AE2C(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v11 = 0;
      uint64_t result = sub_1CB901A88((uint64_t)v5, a2, &v11);
      unsigned int v10 = v11;
      *unsigned int v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t **sub_1CC87AEF4(uint64_t **result, uint64_t **a2, uint64_t *a3, unint64_t a4, uint64_t **a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      uint64_t v9 = *result;
      unsigned int v10 = sub_1CC8749E4(**(a2 - 1), *a3);
      uint64_t result = (uint64_t **)sub_1CC8749E4(*v9, *a3);
      if (v10 < result)
      {
        unsigned int v11 = *v8;
        *uint64_t v8 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v25 = a5;
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = &result[a4 >> 1];
      unint64_t v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CC87B1C4(result, v27, a3, v28, a5);
        long long v29 = &v25[v26];
        uint64_t result = sub_1CC87B1C4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        uint64_t v30 = &v25[a4];
        uint64_t v31 = v29;
        while (v31 != v30)
        {
          long long v32 = v31;
          uint64_t v33 = *v25;
          unsigned int v34 = sub_1CC8749E4(**v31, *a3);
          uint64_t result = (uint64_t **)sub_1CC8749E4(*v33, *a3);
          if (v34 < result) {
            unint64_t v35 = v32;
          }
          else {
            unint64_t v35 = v25;
          }
          v25 += v34 >= result;
          uint64_t v31 = &v32[v34 < result];
          *v8++ = *v35;
          if (v25 == v29)
          {
            if (v31 != v30)
            {
              uint64_t v36 = 0;
              if (v34 < result) {
                char v37 = 1;
              }
              else {
                char v37 = 2;
              }
              uint64_t v38 = &v32[v37 & 1];
              do
              {
                v8[v36] = v38[v36];
                ++v36;
              }
              while (&v38[v36] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          uint64_t v39 = 0;
          do
          {
            v8[v39] = v25[v39];
            ++v39;
          }
          while (&v25[v39] != v29);
        }
      }
      else
      {
        sub_1CC87AEF4(result, v27, a3, v28, a5, a6);
        sub_1CC87AEF4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_1CC87B434(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v13 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v14 = 0;
        int v15 = result;
        do
        {
          uint64_t v17 = *v15;
          uint64_t v16 = v15[1];
          int v15 = v13;
          unsigned int v18 = sub_1CC8749E4(*v16, *a3);
          uint64_t result = (uint64_t **)sub_1CC8749E4(*v17, *a3);
          if (v18 < result)
          {
            uint64_t v19 = *v15;
            uint64_t v20 = v14;
            while (1)
            {
              *(uint64_t **)((char *)v8 + v20 + 8) = *(uint64_t **)((char *)v8 + v20);
              if (!v20) {
                break;
              }
              int v21 = *(uint64_t **)((char *)v8 + v20 - 8);
              unsigned int v22 = sub_1CC8749E4(*v19, *a3);
              uint64_t result = (uint64_t **)sub_1CC8749E4(*v21, *a3);
              v20 -= 8;
              if (v22 >= result)
              {
                uint64_t v23 = (uint64_t **)((char *)v8 + v20 + 8);
                goto LABEL_15;
              }
            }
            uint64_t v23 = v8;
LABEL_15:
            long long *v23 = v19;
          }
          uint64_t v13 = v15 + 1;
          v14 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t **sub_1CC87B1C4(uint64_t **result, uint64_t **a2, uint64_t *a3, unint64_t a4, uint64_t **a5)
{
  if (a4)
  {
    int v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *int v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      unsigned int v10 = a2 - 1;
      unsigned int v11 = *result;
      unsigned int v12 = sub_1CC8749E4(**(a2 - 1), *a3);
      uint64_t result = (uint64_t **)sub_1CC8749E4(*v11, *a3);
      if (v12 >= result) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = v10;
      }
      *v5++ = *v13;
      if (v12 >= result) {
        uint64_t v7 = v10;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v25 = &result[a4 >> 1];
      sub_1CC87AEF4(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (uint64_t **)sub_1CC87AEF4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        uint64_t v27 = v26;
        unint64_t v28 = *v7;
        unsigned int v29 = sub_1CC8749E4(**v26, *a3);
        uint64_t result = (uint64_t **)sub_1CC8749E4(*v28, *a3);
        if (v29 >= result) {
          uint64_t v30 = v7;
        }
        else {
          uint64_t v30 = v27;
        }
        unint64_t v26 = &v27[v29 < result];
        v7 += v29 >= result;
        *v5++ = *v30;
        if (v7 == v25)
        {
          if (v26 != a2)
          {
            uint64_t v31 = 0;
            long long v32 = &v27[v29 < result];
            do
            {
              v5[v31] = v32[v31];
              ++v31;
            }
            while (&v32[v31] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        uint64_t v33 = 0;
        do
        {
          v5[v33] = v7[v33];
          ++v33;
        }
        while (&v7[v33] != v25);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = a5;
        do
        {
          uint64_t v17 = v16;
          unsigned int v18 = *v16++;
          unsigned int v19 = sub_1CC8749E4(**v14, *a3);
          uint64_t result = (uint64_t **)sub_1CC8749E4(*v18, *a3);
          uint64_t v20 = v16;
          if (v19 < result)
          {
            v17[1] = *v17;
            uint64_t v20 = v5;
            if (v17 != v5)
            {
              uint64_t v21 = v15;
              while (1)
              {
                uint64_t v20 = (uint64_t **)((char *)v5 + v21);
                unsigned int v22 = *(uint64_t **)((char *)v5 + v21 - 8);
                unsigned int v23 = sub_1CC8749E4(**v14, *a3);
                uint64_t result = (uint64_t **)sub_1CC8749E4(*v22, *a3);
                if (v23 >= result) {
                  break;
                }
                void *v20 = *(v20 - 1);
                v21 -= 8;
                if (!v21)
                {
                  uint64_t v20 = v5;
                  break;
                }
              }
            }
          }
          uint64_t v24 = *v14++;
          void *v20 = v24;
          v15 += 8;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

uint64_t **sub_1CC87B434(uint64_t **result, uint64_t **a2, uint64_t **a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v10 = a6;
  uint64_t v15 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5) {
      return result;
    }
    while (1)
    {
      uint64_t v16 = *v15;
      unsigned int v17 = sub_1CC8749E4(**a2, *a4);
      uint64_t result = (uint64_t **)sub_1CC8749E4(*v16, *a4);
      if (v17 < result) {
        break;
      }
      ++v15;
      if (!--a5) {
        return result;
      }
    }
    uint64_t v68 = a3;
    long long v69 = a4;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        unsigned int v57 = *v15;
        *uint64_t v15 = *a2;
        *a2 = v57;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v27 = a5;
      }
      else {
        uint64_t v27 = a5 + 1;
      }
      unint64_t v21 = v27 >> 1;
      unint64_t v26 = a2;
      a2 = &v15[v27 >> 1];
      unint64_t v19 = a3 - v26;
      if (a3 == v26)
      {
        uint64_t v20 = a3;
        goto LABEL_36;
      }
      uint64_t v60 = v27 >> 1;
      uint64_t v61 = a8;
      uint64_t v64 = a7;
      uint64_t v65 = v10;
      uint64_t v28 = *a4;
      uint64_t v63 = v26;
      uint64_t v20 = v26;
      do
      {
        unint64_t v29 = v19 >> 1;
        uint64_t v30 = &v20[v19 >> 1];
        long long v32 = *v30;
        uint64_t v31 = v30 + 1;
        uint64_t v33 = *a2;
        unint64_t v34 = v19;
        unsigned int v35 = sub_1CC8749E4(*v32, v28);
        unsigned int v36 = sub_1CC8749E4(*v33, v28);
        if (v35 >= v36) {
          unint64_t v19 = v29;
        }
        else {
          unint64_t v19 = v34 + ~(v34 >> 1);
        }
        if (v35 < v36) {
          uint64_t v20 = v31;
        }
      }
      while (v19);
      unint64_t v26 = v63;
      a7 = v64;
      unint64_t v19 = v20 - v63;
      unint64_t v21 = v60;
      a8 = v61;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v18 = v10;
      }
      else {
        uint64_t v18 = v10 + 1;
      }
      unint64_t v19 = v18 >> 1;
      uint64_t v20 = &a2[v18 >> 1];
      unint64_t v21 = a2 - v15;
      if (a2 == v15)
      {
        uint64_t v15 = a2;
        goto LABEL_42;
      }
      uint64_t v59 = v18 >> 1;
      uint64_t v65 = v10;
      uint64_t v62 = a2;
      a2 = v15;
      do
      {
        unsigned int v22 = &a2[v21 >> 1];
        uint64_t v24 = *v22;
        unsigned int v23 = v22 + 1;
        unsigned int v25 = sub_1CC8749E4(**v20, *a4);
        if (v25 < sub_1CC8749E4(*v24, *a4))
        {
          v21 >>= 1;
        }
        else
        {
          a2 = v23;
          v21 += ~(v21 >> 1);
        }
      }
      while (v21);
      unint64_t v21 = a2 - v15;
      unint64_t v26 = v62;
      unint64_t v19 = v59;
    }
    uint64_t v10 = v65;
LABEL_36:
    if (a2 != v26)
    {
      if (v26 == v20)
      {
        uint64_t v20 = v26;
        a3 = a2;
      }
      else if (a2 + 1 == v26)
      {
        uint64_t v66 = *a2;
        uint64_t v38 = v10;
        int64_t v39 = (char *)v20 - (char *)v26;
        unint64_t v40 = v19;
        memmove(a2, v26, (char *)v20 - (char *)v26);
        unint64_t v19 = v40;
        a3 = (uint64_t **)((char *)a2 + v39);
        uint64_t v10 = v38;
        *a3 = v66;
      }
      else
      {
        unint64_t v37 = v19;
        if (v26 + 1 == v20)
        {
          uint64_t v67 = v10;
          unint64_t v41 = *(v20 - 1);
          a3 = a2 + 1;
          if (v20 - 1 != a2) {
            memmove(a2 + 1, a2, (char *)(v20 - 1) - (char *)a2);
          }
          *a2 = v41;
          uint64_t v10 = v67;
        }
        else
        {
          a3 = (uint64_t **)sub_1CC057214(a2, v26, v20);
        }
        unint64_t v19 = v37;
      }
      goto LABEL_49;
    }
    a2 = v26;
LABEL_42:
    a3 = v20;
LABEL_49:
    a5 -= v21;
    v10 -= v19;
    a4 = v69;
    if ((uint64_t)(v19 + v21) >= v10 + a5)
    {
      uint64_t v42 = a5;
      unint64_t v43 = v19;
      uint64_t result = (uint64_t **)sub_1CC87B434(a3, v20, v68, v69, v42, v10, a7, a8);
      uint64_t v20 = a2;
      uint64_t v10 = v43;
      a5 = v21;
    }
    else
    {
      uint64_t result = (uint64_t **)sub_1CC87B434(v15, a2, a3, v69, v21, v19, a7, a8);
      uint64_t v15 = a3;
      a3 = v68;
    }
    a2 = v20;
    if (!v10) {
      return result;
    }
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      uint64_t v52 = 0;
      do
      {
        a7[v52] = v15[v52];
        ++v52;
      }
      while (&v15[v52] != a2);
      if (v52 * 8)
      {
        long long v53 = a7;
        while (a2 != a3)
        {
          unsigned int v54 = *v53;
          unsigned int v55 = sub_1CC8749E4(**a2, *a4);
          uint64_t result = (uint64_t **)sub_1CC8749E4(*v54, *a4);
          if (v55 < result) {
            BOOL v56 = a2;
          }
          else {
            BOOL v56 = v53;
          }
          v53 += v55 >= result;
          a2 += v55 < result;
          *v15++ = *v56;
          if (&a7[v52] == v53) {
            return result;
          }
        }
        return (uint64_t **)memmove(v15, v53, (char *)a7 - (char *)v53 + v52 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v44 = 0;
    do
    {
      a7[v44] = a2[v44];
      ++v44;
    }
    while (&a2[v44] != a3);
    if (v44 * 8)
    {
      uint64_t v45 = &a7[v44];
      uint64_t v46 = a3 - 1;
      while (a2 != v15)
      {
        uint64_t v47 = a2;
        int v48 = a2 - 1;
        uint64_t v49 = *(a2 - 1);
        unsigned int v50 = sub_1CC8749E4(**(v45 - 1), *a4);
        uint64_t result = (uint64_t **)sub_1CC8749E4(*v49, *a4);
        if (v50 >= result) {
          unsigned int v51 = v45;
        }
        else {
          unsigned int v51 = v47;
        }
        if (v50 >= result) {
          a2 = v47;
        }
        else {
          a2 = v48;
        }
        if (v50 >= result) {
          --v45;
        }
        *v46-- = *(v51 - 1);
        if (v45 == a7) {
          return result;
        }
      }
      if (v45 != a7)
      {
        uint64_t v58 = 0;
        do
        {
          v46[v58] = v45[v58 - 1];
          --v58;
        }
        while (&v45[v58] != a7);
      }
    }
  }
  return result;
}

char *sub_1CC87B918(char *result, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a3 < 2) {
    return result;
  }
  int v6 = result;
  if (a3 == 2)
  {
    uint64_t v7 = *((void *)a2 - 1);
    uint64_t v8 = *(void *)result;
    uint64_t v9 = *(uint64_t ****)(v7 + 40);
    if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
    {
      size_t v115 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_118:
      uint64_t v117 = *(uint64_t ****)(v8 + 40);
      if ((*((unsigned char *)v117 + 23) & 0x10) == 0)
      {
        size_t v128 = 0;
        unint64_t v127 = &byte_1CFBCE98E;
LABEL_127:
        if (v128 >= v115) {
          size_t v130 = v115;
        }
        else {
          size_t v130 = v128;
        }
        if (v130 && (uint64_t result = (char *)memcmp(result, v127, v130), result))
        {
          if ((result & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v115 >= v128)
        {
          return result;
        }
        *(void *)int v6 = v7;
        *((void *)a2 - 1) = v8;
        return result;
      }
      uint64_t v118 = ***v117;
      uint64_t v119 = *(void *)(v118 + 152);
      uint64_t v120 = *(unsigned int *)(v118 + 168);
      if (v120)
      {
        LODWORD(v121) = (v120 - 1) & ((v117 >> 4) ^ (v117 >> 9));
        uint64_t v122 = (uint64_t ****)(v119 + 16 * v121);
        unint64_t v123 = *v122;
        if (*v122 == v117)
        {
LABEL_126:
          unint64_t v126 = v122[1];
          size_t v129 = (size_t)*v126;
          unint64_t v127 = (char *)(v126 + 2);
          size_t v128 = v129;
          goto LABEL_127;
        }
        int v124 = 1;
        while (v123 != (uint64_t ***)-4096)
        {
          int v125 = v121 + v124++;
          uint64_t v121 = v125 & (v120 - 1);
          unint64_t v123 = *(uint64_t ****)(v119 + 16 * v121);
          if (v123 == v117)
          {
            uint64_t v122 = (uint64_t ****)(v119 + 16 * v121);
            goto LABEL_126;
          }
        }
      }
      uint64_t v122 = (uint64_t ****)(v119 + 16 * v120);
      goto LABEL_126;
    }
    uint64_t v10 = ***v9;
    uint64_t v11 = *(void *)(v10 + 152);
    uint64_t v12 = *(unsigned int *)(v10 + 168);
    if (v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 == v9)
      {
LABEL_117:
        uint64_t v114 = v14[1];
        size_t v116 = (size_t)*v114;
        uint64_t result = (char *)(v114 + 2);
        size_t v115 = v116;
        goto LABEL_118;
      }
      int v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        int v17 = v13 + v16++;
        uint64_t v13 = v17 & (v12 - 1);
        uint64_t v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          uint64_t v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_117;
        }
      }
    }
    uint64_t v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_117;
  }
  if ((uint64_t)a3 > 128)
  {
    uint64_t v79 = a4;
    unint64_t v80 = a3 >> 1;
    uint64_t v81 = &result[8 * (a3 >> 1)];
    unint64_t v82 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1CC87B918(result, v81, v82, a4, a5);
      sub_1CC87B918(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v79, a5);
      return (char *)sub_1CC87C704((uint64_t)v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v79, a5);
    }
    sub_1CC87C034(result, v81, v82, a4);
    unsigned int v83 = &v79[8 * v80];
    uint64_t result = sub_1CC87C034(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v83);
    unint64_t v84 = &v79[8 * a3];
    int64_t v85 = v83;
    while (1)
    {
      if (v85 == v84)
      {
        if (v79 != v83)
        {
          uint64_t v131 = 0;
          do
          {
            *(void *)&v6[v131] = *(void *)&v79[v131];
            v131 += 8;
          }
          while (&v79[v131] != v83);
        }
        return result;
      }
      uint64_t v86 = *(void *)v85;
      BOOL v87 = *(uint64_t ****)(*(void *)v85 + 40);
      if ((*((unsigned char *)v87 + 23) & 0x10) != 0)
      {
        uint64_t v88 = ***v87;
        uint64_t v89 = *(void *)(v88 + 152);
        uint64_t v90 = *(unsigned int *)(v88 + 168);
        if (v90)
        {
          LODWORD(v91) = (v90 - 1) & ((v87 >> 4) ^ (v87 >> 9));
          uint64_t v92 = (uint64_t ****)(v89 + 16 * v91);
          uint64_t v93 = *v92;
          if (*v92 != v87)
          {
            int v94 = 1;
            do
            {
              if (v93 == (uint64_t ***)-4096) {
                goto LABEL_92;
              }
              int v95 = v91 + v94++;
              uint64_t v91 = v95 & (v90 - 1);
              uint64_t v93 = *(uint64_t ****)(v89 + 16 * v91);
            }
            while (v93 != v87);
            uint64_t v92 = (uint64_t ****)(v89 + 16 * v91);
          }
        }
        else
        {
LABEL_92:
          uint64_t v92 = (uint64_t ****)(v89 + 16 * v90);
        }
        unint64_t v96 = v92[1];
        size_t v98 = (size_t)*v96;
        uint64_t result = (char *)(v96 + 2);
        size_t v97 = v98;
      }
      else
      {
        size_t v97 = 0;
        uint64_t result = &byte_1CFBCE98E;
      }
      uint64_t v99 = *(void *)v79;
      uint64_t v100 = *(uint64_t ****)(*(void *)v79 + 40);
      if ((*((unsigned char *)v100 + 23) & 0x10) != 0)
      {
        uint64_t v101 = ***v100;
        uint64_t v102 = *(void *)(v101 + 152);
        uint64_t v103 = *(unsigned int *)(v101 + 168);
        if (v103)
        {
          LODWORD(v104) = (v103 - 1) & ((v100 >> 4) ^ (v100 >> 9));
          unint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
          int v106 = *v105;
          if (*v105 != v100)
          {
            int v107 = 1;
            do
            {
              if (v106 == (uint64_t ***)-4096) {
                goto LABEL_101;
              }
              int v108 = v104 + v107++;
              uint64_t v104 = v108 & (v103 - 1);
              int v106 = *(uint64_t ****)(v102 + 16 * v104);
            }
            while (v106 != v100);
            unint64_t v105 = (uint64_t ****)(v102 + 16 * v104);
          }
        }
        else
        {
LABEL_101:
          unint64_t v105 = (uint64_t ****)(v102 + 16 * v103);
        }
        uint64_t v109 = v105[1];
        size_t v112 = (size_t)*v109;
        unint64_t v110 = (char *)(v109 + 2);
        size_t v111 = v112;
      }
      else
      {
        size_t v111 = 0;
        unint64_t v110 = &byte_1CFBCE98E;
      }
      if (v111 >= v97) {
        size_t v113 = v97;
      }
      else {
        size_t v113 = v111;
      }
      if (v113 && (uint64_t result = (char *)memcmp(result, v110, v113), result))
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_111;
        }
      }
      else if (v97 < v111)
      {
LABEL_111:
        *(void *)int v6 = v86;
        v85 += 8;
        goto LABEL_112;
      }
      *(void *)int v6 = v99;
      v79 += 8;
LABEL_112:
      v6 += 8;
      if (v79 == v83)
      {
        if (v85 != v84)
        {
          uint64_t v132 = 0;
          do
          {
            *(void *)&v6[v132] = *(void *)&v85[v132];
            v132 += 8;
          }
          while (&v85[v132] != v84);
        }
        return result;
      }
    }
  }
  if (result == a2) {
    return result;
  }
  unint64_t v19 = result + 8;
  if (result + 8 == a2) {
    return result;
  }
  uint64_t v20 = result;
  do
  {
    unint64_t v21 = v20;
    uint64_t v20 = v19;
    uint64_t v22 = *((void *)v21 + 1);
    unsigned int v23 = *(uint64_t ****)(v22 + 40);
    if ((*((unsigned char *)v23 + 23) & 0x10) != 0)
    {
      uint64_t v24 = ***v23;
      uint64_t v25 = *(void *)(v24 + 152);
      uint64_t v26 = *(unsigned int *)(v24 + 168);
      if (v26)
      {
        LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
        uint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
        unint64_t v29 = *v28;
        if (*v28 == v23)
        {
LABEL_23:
          long long v32 = v28[1];
          size_t v34 = (size_t)*v32;
          uint64_t result = (char *)(v32 + 2);
          size_t v33 = v34;
          goto LABEL_24;
        }
        int v30 = 1;
        while (v29 != (uint64_t ***)-4096)
        {
          int v31 = v27 + v30++;
          uint64_t v27 = v31 & (v26 - 1);
          unint64_t v29 = *(uint64_t ****)(v25 + 16 * v27);
          if (v29 == v23)
          {
            uint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
            goto LABEL_23;
          }
        }
      }
      uint64_t v28 = (uint64_t ****)(v25 + 16 * v26);
      goto LABEL_23;
    }
    size_t v33 = 0;
    uint64_t result = &byte_1CFBCE98E;
LABEL_24:
    uint64_t v35 = *(void *)v21;
    unsigned int v36 = *(uint64_t ****)(*(void *)v21 + 40);
    if ((*((unsigned char *)v36 + 23) & 0x10) == 0)
    {
      size_t v47 = 0;
      uint64_t v46 = &byte_1CFBCE98E;
      goto LABEL_33;
    }
    uint64_t v37 = ***v36;
    uint64_t v38 = *(void *)(v37 + 152);
    uint64_t v39 = *(unsigned int *)(v37 + 168);
    if (!v39) {
      goto LABEL_31;
    }
    LODWORD(v40) = (v39 - 1) & ((v36 >> 4) ^ (v36 >> 9));
    unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
    uint64_t v42 = *v41;
    if (*v41 != v36)
    {
      int v43 = 1;
      while (v42 != (uint64_t ***)-4096)
      {
        int v44 = v40 + v43++;
        uint64_t v40 = v44 & (v39 - 1);
        uint64_t v42 = *(uint64_t ****)(v38 + 16 * v40);
        if (v42 == v36)
        {
          unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
          goto LABEL_32;
        }
      }
LABEL_31:
      unint64_t v41 = (uint64_t ****)(v38 + 16 * v39);
    }
LABEL_32:
    uint64_t v45 = v41[1];
    size_t v48 = (size_t)*v45;
    uint64_t v46 = (char *)(v45 + 2);
    size_t v47 = v48;
LABEL_33:
    if (v47 >= v33) {
      size_t v49 = v33;
    }
    else {
      size_t v49 = v47;
    }
    if (v49 && (uint64_t result = (char *)memcmp(result, v46, v49), result))
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_75;
      }
    }
    else if (v33 >= v47)
    {
      goto LABEL_75;
    }
    unsigned int v50 = v20;
    while (1)
    {
      *(void *)unsigned int v50 = v35;
      if (v21 == v6) {
        break;
      }
      unsigned int v50 = v21;
      unsigned int v51 = *(uint64_t ****)(v22 + 40);
      if ((*((unsigned char *)v51 + 23) & 0x10) != 0)
      {
        uint64_t v52 = ***v51;
        uint64_t v53 = *(void *)(v52 + 152);
        uint64_t v54 = *(unsigned int *)(v52 + 168);
        if (!v54) {
          goto LABEL_50;
        }
        LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        BOOL v56 = (uint64_t ****)(v53 + 16 * v55);
        unsigned int v57 = *v56;
        if (*v56 != v51)
        {
          int v58 = 1;
          while (v57 != (uint64_t ***)-4096)
          {
            int v59 = v55 + v58++;
            uint64_t v55 = v59 & (v54 - 1);
            unsigned int v57 = *(uint64_t ****)(v53 + 16 * v55);
            if (v57 == v51)
            {
              BOOL v56 = (uint64_t ****)(v53 + 16 * v55);
              goto LABEL_51;
            }
          }
LABEL_50:
          BOOL v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_51:
        uint64_t v60 = v56[1];
        size_t v62 = (size_t)*v60;
        uint64_t result = (char *)(v60 + 2);
        size_t v61 = v62;
        goto LABEL_52;
      }
      size_t v61 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_52:
      v21 -= 8;
      uint64_t v35 = *((void *)v50 - 1);
      uint64_t v63 = *(uint64_t ****)(v35 + 40);
      if ((*((unsigned char *)v63 + 23) & 0x10) == 0)
      {
        size_t v74 = 0;
        uint64_t v73 = &byte_1CFBCE98E;
        goto LABEL_61;
      }
      uint64_t v64 = ***v63;
      uint64_t v65 = *(void *)(v64 + 152);
      uint64_t v66 = *(unsigned int *)(v64 + 168);
      if (!v66) {
        goto LABEL_59;
      }
      LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
      uint64_t v68 = (uint64_t ****)(v65 + 16 * v67);
      long long v69 = *v68;
      if (*v68 != v63)
      {
        int v70 = 1;
        while (v69 != (uint64_t ***)-4096)
        {
          int v71 = v67 + v70++;
          uint64_t v67 = v71 & (v66 - 1);
          long long v69 = *(uint64_t ****)(v65 + 16 * v67);
          if (v69 == v63)
          {
            uint64_t v68 = (uint64_t ****)(v65 + 16 * v67);
            goto LABEL_60;
          }
        }
LABEL_59:
        uint64_t v68 = (uint64_t ****)(v65 + 16 * v66);
      }
LABEL_60:
      uint64_t v72 = v68[1];
      size_t v75 = (size_t)*v72;
      uint64_t v73 = (char *)(v72 + 2);
      size_t v74 = v75;
LABEL_61:
      if (v74 >= v61) {
        size_t v76 = v61;
      }
      else {
        size_t v76 = v74;
      }
      if (v76 && (uint64_t result = (char *)memcmp(result, v73, v76), result))
      {
        int v77 = ((int)result >> 31) | 1;
      }
      else
      {
        if (v61 >= v74) {
          goto LABEL_74;
        }
        int v77 = -1;
      }
      if (v77 != -1) {
        goto LABEL_74;
      }
    }
    unsigned int v50 = v6;
LABEL_74:
    *(void *)unsigned int v50 = v22;
LABEL_75:
    unint64_t v19 = v20 + 8;
  }
  while (v20 + 8 != a2);
  return result;
}

char *sub_1CC87C034(char *result, char *a2, unint64_t a3, void *a4)
{
  if (!a3) {
    return result;
  }
  unint64_t v4 = a4;
  int v6 = result;
  if (a3 == 1)
  {
LABEL_139:
    *unint64_t v4 = *(void *)v6;
    return result;
  }
  if (a3 == 2)
  {
    uint64_t v8 = a2 - 8;
    uint64_t v9 = *((void *)a2 - 1);
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(uint64_t ****)(v9 + 40);
    if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
    {
      size_t v113 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_120:
      size_t v115 = *(uint64_t ****)(v10 + 40);
      if ((*((unsigned char *)v115 + 23) & 0x10) == 0)
      {
        size_t v126 = 0;
        int v125 = &byte_1CFBCE98E;
LABEL_129:
        if (v126 >= v113) {
          size_t v128 = v113;
        }
        else {
          size_t v128 = v126;
        }
        if (v128 && (uint64_t result = (char *)memcmp(result, v125, v128), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_138;
          }
        }
        else if (v113 < v126)
        {
LABEL_138:
          *v4++ = v9;
          goto LABEL_139;
        }
        uint64_t v9 = v10;
        int v6 = v8;
        goto LABEL_138;
      }
      uint64_t v116 = ***v115;
      uint64_t v117 = *(void *)(v116 + 152);
      uint64_t v118 = *(unsigned int *)(v116 + 168);
      if (v118)
      {
        LODWORD(v119) = (v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
        uint64_t v120 = (uint64_t ****)(v117 + 16 * v119);
        uint64_t v121 = *v120;
        if (*v120 == v115)
        {
LABEL_128:
          int v124 = v120[1];
          size_t v127 = (size_t)*v124;
          int v125 = (char *)(v124 + 2);
          size_t v126 = v127;
          goto LABEL_129;
        }
        int v122 = 1;
        while (v121 != (uint64_t ***)-4096)
        {
          int v123 = v119 + v122++;
          uint64_t v119 = v123 & (v118 - 1);
          uint64_t v121 = *(uint64_t ****)(v117 + 16 * v119);
          if (v121 == v115)
          {
            uint64_t v120 = (uint64_t ****)(v117 + 16 * v119);
            goto LABEL_128;
          }
        }
      }
      uint64_t v120 = (uint64_t ****)(v117 + 16 * v118);
      goto LABEL_128;
    }
    uint64_t v12 = ***v11;
    uint64_t v13 = *(void *)(v12 + 152);
    uint64_t v14 = *(unsigned int *)(v12 + 168);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      int v16 = (uint64_t ****)(v13 + 16 * v15);
      int v17 = *v16;
      if (*v16 == v11)
      {
LABEL_119:
        size_t v112 = v16[1];
        size_t v114 = (size_t)*v112;
        uint64_t result = (char *)(v112 + 2);
        size_t v113 = v114;
        goto LABEL_120;
      }
      int v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        int v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v11)
        {
          int v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_119;
        }
      }
    }
    int v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_119;
  }
  if ((uint64_t)a3 <= 8)
  {
    if (result == a2) {
      return result;
    }
    uint64_t v20 = result + 8;
    *a4 = *(void *)result;
    if (result + 8 == a2) {
      return result;
    }
    unint64_t v21 = a4;
    while (1)
    {
      uint64_t v22 = v21;
      unsigned int v23 = *(uint64_t ****)(*(void *)v20 + 40);
      if ((*((unsigned char *)v23 + 23) & 0x10) != 0) {
        break;
      }
      size_t v33 = 0;
      uint64_t result = &byte_1CFBCE98E;
LABEL_24:
      ++v21;
      uint64_t v35 = *v22;
      unsigned int v36 = *(uint64_t ****)(*v22 + 40);
      if ((*((unsigned char *)v36 + 23) & 0x10) != 0)
      {
        uint64_t v37 = ***v36;
        uint64_t v38 = *(void *)(v37 + 152);
        uint64_t v39 = *(unsigned int *)(v37 + 168);
        if (!v39) {
          goto LABEL_31;
        }
        LODWORD(v40) = (v39 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
        uint64_t v42 = *v41;
        if (*v41 != v36)
        {
          int v43 = 1;
          while (v42 != (uint64_t ***)-4096)
          {
            int v44 = v40 + v43++;
            uint64_t v40 = v44 & (v39 - 1);
            uint64_t v42 = *(uint64_t ****)(v38 + 16 * v40);
            if (v42 == v36)
            {
              unint64_t v41 = (uint64_t ****)(v38 + 16 * v40);
              goto LABEL_32;
            }
          }
LABEL_31:
          unint64_t v41 = (uint64_t ****)(v38 + 16 * v39);
        }
LABEL_32:
        uint64_t v45 = v41[1];
        size_t v48 = (size_t)*v45;
        uint64_t v46 = (char *)(v45 + 2);
        size_t v47 = v48;
        goto LABEL_33;
      }
      size_t v47 = 0;
      uint64_t v46 = &byte_1CFBCE98E;
LABEL_33:
      if (v47 >= v33) {
        size_t v49 = v33;
      }
      else {
        size_t v49 = v47;
      }
      if (v49 && (uint64_t result = (char *)memcmp(result, v46, v49), result))
      {
        unsigned int v50 = v22 + 1;
        if ((result & 0x80000000) == 0) {
          goto LABEL_73;
        }
      }
      else
      {
        unsigned int v50 = v22 + 1;
        if (v33 >= v47) {
          goto LABEL_73;
        }
      }
      v22[1] = v35;
      unsigned int v50 = v4;
      if (v22 != v4)
      {
        while (1)
        {
          unsigned int v51 = *(uint64_t ****)(*(void *)v20 + 40);
          if ((*((unsigned char *)v51 + 23) & 0x10) != 0) {
            break;
          }
          size_t v61 = 0;
          uint64_t result = &byte_1CFBCE98E;
LABEL_51:
          uint64_t v63 = v22 - 1;
          uint64_t v64 = *(v22 - 1);
          uint64_t v65 = *(uint64_t ****)(v64 + 40);
          if ((*((unsigned char *)v65 + 23) & 0x10) != 0)
          {
            uint64_t v66 = ***v65;
            uint64_t v67 = *(void *)(v66 + 152);
            uint64_t v68 = *(unsigned int *)(v66 + 168);
            if (!v68) {
              goto LABEL_58;
            }
            LODWORD(v69) = (v68 - 1) & ((v65 >> 4) ^ (v65 >> 9));
            int v70 = (uint64_t ****)(v67 + 16 * v69);
            int v71 = *v70;
            if (*v70 != v65)
            {
              int v72 = 1;
              while (v71 != (uint64_t ***)-4096)
              {
                int v73 = v69 + v72++;
                uint64_t v69 = v73 & (v68 - 1);
                int v71 = *(uint64_t ****)(v67 + 16 * v69);
                if (v71 == v65)
                {
                  int v70 = (uint64_t ****)(v67 + 16 * v69);
                  goto LABEL_59;
                }
              }
LABEL_58:
              int v70 = (uint64_t ****)(v67 + 16 * v68);
            }
LABEL_59:
            size_t v74 = v70[1];
            size_t v77 = (size_t)*v74;
            size_t v75 = (char *)(v74 + 2);
            size_t v76 = v77;
            goto LABEL_60;
          }
          size_t v76 = 0;
          size_t v75 = &byte_1CFBCE98E;
LABEL_60:
          if (v76 >= v61) {
            size_t v78 = v61;
          }
          else {
            size_t v78 = v76;
          }
          if (v78 && (uint64_t result = (char *)memcmp(result, v75, v78), result))
          {
            if ((result & 0x80000000) == 0) {
              goto LABEL_72;
            }
          }
          else if (v61 >= v76)
          {
LABEL_72:
            unsigned int v50 = v22;
            goto LABEL_73;
          }
          *v22-- = v64;
          if (v63 == v4)
          {
            unsigned int v50 = v4;
            goto LABEL_73;
          }
        }
        uint64_t v52 = ***v51;
        uint64_t v53 = *(void *)(v52 + 152);
        uint64_t v54 = *(unsigned int *)(v52 + 168);
        if (v54)
        {
          LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
          BOOL v56 = (uint64_t ****)(v53 + 16 * v55);
          unsigned int v57 = *v56;
          if (*v56 != v51)
          {
            int v58 = 1;
            while (v57 != (uint64_t ***)-4096)
            {
              int v59 = v55 + v58++;
              uint64_t v55 = v59 & (v54 - 1);
              unsigned int v57 = *(uint64_t ****)(v53 + 16 * v55);
              if (v57 == v51)
              {
                BOOL v56 = (uint64_t ****)(v53 + 16 * v55);
                goto LABEL_50;
              }
            }
            goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          BOOL v56 = (uint64_t ****)(v53 + 16 * v54);
        }
LABEL_50:
        uint64_t v60 = v56[1];
        size_t v62 = (size_t)*v60;
        uint64_t result = (char *)(v60 + 2);
        size_t v61 = v62;
        goto LABEL_51;
      }
LABEL_73:
      uint64_t v79 = *(void *)v20;
      v20 += 8;
      *unsigned int v50 = v79;
      if (v20 == a2) {
        return result;
      }
    }
    uint64_t v24 = ***v23;
    uint64_t v25 = *(void *)(v24 + 152);
    uint64_t v26 = *(unsigned int *)(v24 + 168);
    if (v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      uint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
      unint64_t v29 = *v28;
      if (*v28 == v23)
      {
LABEL_23:
        long long v32 = v28[1];
        size_t v34 = (size_t)*v32;
        uint64_t result = (char *)(v32 + 2);
        size_t v33 = v34;
        goto LABEL_24;
      }
      int v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        int v31 = v27 + v30++;
        uint64_t v27 = v31 & (v26 - 1);
        unint64_t v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v23)
        {
          uint64_t v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_23;
        }
      }
    }
    uint64_t v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_23;
  }
  unint64_t v80 = &result[8 * (a3 >> 1)];
  sub_1CC87B918(result, v80, a3 >> 1, a4, a3 >> 1);
  uint64_t result = (char *)sub_1CC87B918(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
  uint64_t v81 = &v6[8 * (a3 >> 1)];
  while (v81 != a2)
  {
    uint64_t v82 = *(void *)v81;
    unsigned int v83 = *(uint64_t ****)(*(void *)v81 + 40);
    if ((*((unsigned char *)v83 + 23) & 0x10) != 0)
    {
      uint64_t v84 = ***v83;
      uint64_t v85 = *(void *)(v84 + 152);
      uint64_t v86 = *(unsigned int *)(v84 + 168);
      if (!v86) {
        goto LABEL_86;
      }
      LODWORD(v87) = (v86 - 1) & ((v83 >> 4) ^ (v83 >> 9));
      uint64_t v88 = (uint64_t ****)(v85 + 16 * v87);
      uint64_t v89 = *v88;
      if (*v88 != v83)
      {
        int v90 = 1;
        while (v89 != (uint64_t ***)-4096)
        {
          int v91 = v87 + v90++;
          uint64_t v87 = v91 & (v86 - 1);
          uint64_t v89 = *(uint64_t ****)(v85 + 16 * v87);
          if (v89 == v83)
          {
            uint64_t v88 = (uint64_t ****)(v85 + 16 * v87);
            goto LABEL_87;
          }
        }
LABEL_86:
        uint64_t v88 = (uint64_t ****)(v85 + 16 * v86);
      }
LABEL_87:
      uint64_t v92 = v88[1];
      size_t v94 = (size_t)*v92;
      uint64_t result = (char *)(v92 + 2);
      size_t v93 = v94;
      goto LABEL_88;
    }
    size_t v93 = 0;
    uint64_t result = &byte_1CFBCE98E;
LABEL_88:
    uint64_t v95 = *(void *)v6;
    unint64_t v96 = *(uint64_t ****)(*(void *)v6 + 40);
    if ((*((unsigned char *)v96 + 23) & 0x10) != 0)
    {
      uint64_t v97 = ***v96;
      uint64_t v98 = *(void *)(v97 + 152);
      uint64_t v99 = *(unsigned int *)(v97 + 168);
      if (!v99) {
        goto LABEL_95;
      }
      LODWORD(v100) = (v99 - 1) & ((v96 >> 4) ^ (v96 >> 9));
      uint64_t v101 = (uint64_t ****)(v98 + 16 * v100);
      uint64_t v102 = *v101;
      if (*v101 != v96)
      {
        int v103 = 1;
        while (v102 != (uint64_t ***)-4096)
        {
          int v104 = v100 + v103++;
          uint64_t v100 = v104 & (v99 - 1);
          uint64_t v102 = *(uint64_t ****)(v98 + 16 * v100);
          if (v102 == v96)
          {
            uint64_t v101 = (uint64_t ****)(v98 + 16 * v100);
            goto LABEL_96;
          }
        }
LABEL_95:
        uint64_t v101 = (uint64_t ****)(v98 + 16 * v99);
      }
LABEL_96:
      unint64_t v105 = v101[1];
      size_t v108 = (size_t)*v105;
      int v106 = (char *)(v105 + 2);
      size_t v107 = v108;
      goto LABEL_97;
    }
    size_t v107 = 0;
    int v106 = &byte_1CFBCE98E;
LABEL_97:
    if (v107 >= v93) {
      size_t v109 = v93;
    }
    else {
      size_t v109 = v107;
    }
    if (v109 && (uint64_t result = (char *)memcmp(result, v106, v109), result))
    {
      if ((result & 0x80000000) != 0) {
        goto LABEL_105;
      }
    }
    else if (v93 < v107)
    {
LABEL_105:
      *unint64_t v4 = v82;
      v81 += 8;
      goto LABEL_106;
    }
    *unint64_t v4 = v95;
    v6 += 8;
LABEL_106:
    ++v4;
    if (v6 == v80)
    {
      if (v81 != a2)
      {
        uint64_t v111 = 0;
        do
        {
          v4[v111] = *(void *)&v81[v111 * 8];
          ++v111;
        }
        while (&v81[v111 * 8] != a2);
      }
      return result;
    }
  }
  if (v6 != v80)
  {
    uint64_t v110 = 0;
    do
    {
      v4[v110] = *(void *)&v6[v110 * 8];
      ++v110;
    }
    while (&v6[v110 * 8] != v80);
  }
  return result;
}

uint64_t sub_1CC87C704(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v180 = a5;
  if (!a5) {
    return result;
  }
  uint64_t v9 = (char *)result;
  do
  {
    if (a4 <= a7 || v180 <= a7)
    {
      if (a4 > v180)
      {
        if (a2 == a3) {
          return result;
        }
        uint64_t v115 = 0;
        do
        {
          *(void *)&a6[v115] = *(void *)&a2[v115];
          v115 += 8;
        }
        while (&a2[v115] != a3);
        if (!v115) {
          return result;
        }
        uint64_t v116 = &a6[v115];
        while (1)
        {
          if (a2 == v9)
          {
            if (v116 != a6)
            {
              uint64_t v176 = 0;
              do
              {
                *(void *)&a3[v176 - 8] = *(void *)&v116[v176 - 8];
                v176 -= 8;
              }
              while (&v116[v176] != a6);
            }
            return result;
          }
          uint64_t v117 = *((void *)v116 - 1);
          uint64_t v118 = *(uint64_t ****)(v117 + 40);
          if ((*((unsigned char *)v118 + 23) & 0x10) != 0)
          {
            uint64_t v119 = ***v118;
            uint64_t v120 = *(void *)(v119 + 152);
            uint64_t v121 = *(unsigned int *)(v119 + 168);
            if (v121)
            {
              LODWORD(v122) = (v121 - 1) & ((v118 >> 4) ^ (v118 >> 9));
              int v123 = (uint64_t ****)(v120 + 16 * v122);
              int v124 = *v123;
              if (*v123 != v118)
              {
                int v125 = 1;
                do
                {
                  if (v124 == (uint64_t ***)-4096) {
                    goto LABEL_156;
                  }
                  int v126 = v122 + v125++;
                  uint64_t v122 = v126 & (v121 - 1);
                  int v124 = *(uint64_t ****)(v120 + 16 * v122);
                }
                while (v124 != v118);
                int v123 = (uint64_t ****)(v120 + 16 * v122);
              }
            }
            else
            {
LABEL_156:
              int v123 = (uint64_t ****)(v120 + 16 * v121);
            }
            size_t v127 = (unint64_t *)v123[1];
            unint64_t v129 = *v127;
            uint64_t result = (uint64_t)(v127 + 2);
            unint64_t v128 = v129;
          }
          else
          {
            unint64_t v128 = 0;
            uint64_t result = (uint64_t)&byte_1CFBCE98E;
          }
          size_t v130 = a2 - 8;
          uint64_t v131 = *((void *)a2 - 1);
          uint64_t v132 = *(uint64_t ****)(v131 + 40);
          if ((*((unsigned char *)v132 + 23) & 0x10) != 0)
          {
            uint64_t v133 = ***v132;
            uint64_t v134 = *(void *)(v133 + 152);
            uint64_t v135 = *(unsigned int *)(v133 + 168);
            if (v135)
            {
              LODWORD(v136) = (v135 - 1) & ((v132 >> 4) ^ (v132 >> 9));
              long long v137 = (uint64_t ****)(v134 + 16 * v136);
              long long v138 = *v137;
              if (*v137 != v132)
              {
                int v139 = 1;
                do
                {
                  if (v138 == (uint64_t ***)-4096) {
                    goto LABEL_165;
                  }
                  int v140 = v136 + v139++;
                  uint64_t v136 = v140 & (v135 - 1);
                  long long v138 = *(uint64_t ****)(v134 + 16 * v136);
                }
                while (v138 != v132);
                long long v137 = (uint64_t ****)(v134 + 16 * v136);
              }
            }
            else
            {
LABEL_165:
              long long v137 = (uint64_t ****)(v134 + 16 * v135);
            }
            uint64_t v141 = v137[1];
            unint64_t v144 = (unint64_t)*v141;
            uint64_t v142 = (char *)(v141 + 2);
            unint64_t v143 = v144;
          }
          else
          {
            unint64_t v143 = 0;
            uint64_t v142 = &byte_1CFBCE98E;
          }
          size_t v145 = v143 >= v128 ? v128 : v143;
          if (v145)
          {
            uint64_t result = memcmp((const void *)result, v142, v145);
            if (result) {
              break;
            }
          }
          if (v128 >= v143) {
            goto LABEL_175;
          }
LABEL_176:
          *((void *)a3 - 1) = v131;
          a3 -= 8;
          a2 = v130;
          if (v116 == a6) {
            return result;
          }
        }
        if ((result & 0x80000000) != 0) {
          goto LABEL_176;
        }
LABEL_175:
        uint64_t v131 = v117;
        size_t v130 = a2;
        v116 -= 8;
        goto LABEL_176;
      }
      if (v9 == a2) {
        return result;
      }
      uint64_t v146 = 0;
      do
      {
        *(void *)&a6[v146] = *(void *)&v9[v146];
        v146 += 8;
      }
      while (&v9[v146] != a2);
      if (!v146) {
        return result;
      }
      int v147 = a6;
      while (1)
      {
        if (a2 == a3)
        {
          return (uint64_t)memmove(v9, v147, a6 - v147 + v146);
        }
        uint64_t v148 = *(void *)a2;
        uint64_t v149 = *(uint64_t ****)(*(void *)a2 + 40);
        if ((*((unsigned char *)v149 + 23) & 0x10) != 0)
        {
          uint64_t v150 = ***v149;
          uint64_t v151 = *(void *)(v150 + 152);
          uint64_t v152 = *(unsigned int *)(v150 + 168);
          if (v152)
          {
            LODWORD(v153) = (v152 - 1) & ((v149 >> 4) ^ (v149 >> 9));
            unsigned int v154 = (uint64_t ****)(v151 + 16 * v153);
            unsigned int v155 = *v154;
            if (*v154 != v149)
            {
              int v156 = 1;
              do
              {
                if (v155 == (uint64_t ***)-4096) {
                  goto LABEL_193;
                }
                int v157 = v153 + v156++;
                uint64_t v153 = v157 & (v152 - 1);
                unsigned int v155 = *(uint64_t ****)(v151 + 16 * v153);
              }
              while (v155 != v149);
              unsigned int v154 = (uint64_t ****)(v151 + 16 * v153);
            }
          }
          else
          {
LABEL_193:
            unsigned int v154 = (uint64_t ****)(v151 + 16 * v152);
          }
          uint64_t v158 = (size_t *)v154[1];
          size_t v160 = *v158;
          uint64_t result = (uint64_t)(v158 + 2);
          size_t v159 = v160;
        }
        else
        {
          size_t v159 = 0;
          uint64_t result = (uint64_t)&byte_1CFBCE98E;
        }
        uint64_t v161 = *(void *)v147;
        unsigned int v162 = *(uint64_t ****)(*(void *)v147 + 40);
        if ((*((unsigned char *)v162 + 23) & 0x10) != 0)
        {
          uint64_t v163 = ***v162;
          uint64_t v164 = *(void *)(v163 + 152);
          uint64_t v165 = *(unsigned int *)(v163 + 168);
          if (v165)
          {
            LODWORD(v166) = (v165 - 1) & ((v162 >> 4) ^ (v162 >> 9));
            unsigned int v167 = (uint64_t ****)(v164 + 16 * v166);
            int v168 = *v167;
            if (*v167 != v162)
            {
              int v169 = 1;
              do
              {
                if (v168 == (uint64_t ***)-4096) {
                  goto LABEL_202;
                }
                int v170 = v166 + v169++;
                uint64_t v166 = v170 & (v165 - 1);
                int v168 = *(uint64_t ****)(v164 + 16 * v166);
              }
              while (v168 != v162);
              unsigned int v167 = (uint64_t ****)(v164 + 16 * v166);
            }
          }
          else
          {
LABEL_202:
            unsigned int v167 = (uint64_t ****)(v164 + 16 * v165);
          }
          int v171 = v167[1];
          size_t v174 = (size_t)*v171;
          BOOL v172 = (char *)(v171 + 2);
          size_t v173 = v174;
        }
        else
        {
          size_t v173 = 0;
          BOOL v172 = &byte_1CFBCE98E;
        }
        if (v173 >= v159) {
          size_t v175 = v159;
        }
        else {
          size_t v175 = v173;
        }
        if (v175 && (uint64_t result = memcmp((const void *)result, v172, v175), result))
        {
          if ((result & 0x80000000) != 0) {
            goto LABEL_212;
          }
        }
        else if (v159 < v173)
        {
LABEL_212:
          *(void *)uint64_t v9 = v148;
          a2 += 8;
          goto LABEL_213;
        }
        *(void *)uint64_t v9 = v161;
        v147 += 8;
LABEL_213:
        v9 += 8;
        if (&a6[v146] == v147) {
          return result;
        }
      }
    }
    if (!a4) {
      return result;
    }
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *(uint64_t ****)(*(void *)a2 + 40);
    int v12 = *((_DWORD *)v11 + 5);
    while (1)
    {
      if ((v12 & 0x10000000) != 0)
      {
        uint64_t v13 = ***v11;
        uint64_t v14 = *(void *)(v13 + 152);
        uint64_t v15 = *(unsigned int *)(v13 + 168);
        if (v15)
        {
          LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          int v17 = (uint64_t ****)(v14 + 16 * v16);
          int v18 = *v17;
          if (*v17 == v11)
          {
LABEL_15:
            unint64_t v21 = (unint64_t *)v17[1];
            unint64_t v23 = *v21;
            uint64_t result = (uint64_t)(v21 + 2);
            unint64_t v22 = v23;
            goto LABEL_16;
          }
          int v19 = 1;
          while (v18 != (uint64_t ***)-4096)
          {
            int v20 = v16 + v19++;
            uint64_t v16 = v20 & (v15 - 1);
            int v18 = *(uint64_t ****)(v14 + 16 * v16);
            if (v18 == v11)
            {
              int v17 = (uint64_t ****)(v14 + 16 * v16);
              goto LABEL_15;
            }
          }
        }
        int v17 = (uint64_t ****)(v14 + 16 * v15);
        goto LABEL_15;
      }
      unint64_t v22 = 0;
      uint64_t result = (uint64_t)&byte_1CFBCE98E;
LABEL_16:
      uint64_t v24 = *(void *)v9;
      uint64_t v25 = *(uint64_t ****)(*(void *)v9 + 40);
      if ((*((unsigned char *)v25 + 23) & 0x10) != 0)
      {
        uint64_t v26 = ***v25;
        uint64_t v27 = *(void *)(v26 + 152);
        uint64_t v28 = *(unsigned int *)(v26 + 168);
        if (v28)
        {
          LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          int v30 = (uint64_t ****)(v27 + 16 * v29);
          int v31 = *v30;
          if (*v30 == v25)
          {
LABEL_24:
            size_t v34 = v30[1];
            unint64_t v37 = (unint64_t)*v34;
            uint64_t v35 = (char *)(v34 + 2);
            unint64_t v36 = v37;
            goto LABEL_25;
          }
          int v32 = 1;
          while (v31 != (uint64_t ***)-4096)
          {
            int v33 = v29 + v32++;
            uint64_t v29 = v33 & (v28 - 1);
            int v31 = *(uint64_t ****)(v27 + 16 * v29);
            if (v31 == v25)
            {
              int v30 = (uint64_t ****)(v27 + 16 * v29);
              goto LABEL_24;
            }
          }
        }
        int v30 = (uint64_t ****)(v27 + 16 * v28);
        goto LABEL_24;
      }
      unint64_t v36 = 0;
      uint64_t v35 = &byte_1CFBCE98E;
LABEL_25:
      size_t v38 = v36 >= v22 ? v22 : v36;
      if (!v38) {
        break;
      }
      uint64_t result = memcmp((const void *)result, v35, v38);
      if (!result) {
        break;
      }
      if ((result & 0x80000000) != 0) {
        goto LABEL_37;
      }
LABEL_33:
      v9 += 8;
      if (!--a4) {
        return result;
      }
    }
    if (v22 >= v36) {
      goto LABEL_33;
    }
LABEL_37:
    uint64_t v177 = a6;
    if (a4 >= v180)
    {
      if (a4 == 1)
      {
        *(void *)uint64_t v9 = v10;
        *(void *)a2 = v24;
        return result;
      }
      if (a4 >= 0) {
        uint64_t v73 = a4;
      }
      else {
        uint64_t v73 = a4 + 1;
      }
      unint64_t v42 = v73 >> 1;
      uint64_t v40 = &v9[8 * (v73 >> 1)];
      unint64_t v41 = a3;
      unint64_t v105 = a2;
      unint64_t v107 = (a3 - a2) >> 3;
      if (a3 != a2)
      {
        unint64_t v41 = a2;
        size_t v74 = *(uint64_t ****)(*(void *)v40 + 40);
        int v183 = *((_DWORD *)v74 + 5);
        do
        {
          unint64_t v185 = v107;
          unint64_t v75 = v107 >> 1;
          size_t v76 = &v41[8 * (v107 >> 1)];
          size_t v77 = *(uint64_t ****)(*(void *)v76 + 40);
          if ((*((unsigned char *)v77 + 23) & 0x10) != 0)
          {
            uint64_t v78 = ***v77;
            uint64_t v79 = *(void *)(v78 + 152);
            uint64_t v80 = *(unsigned int *)(v78 + 168);
            if (v80)
            {
              LODWORD(v81) = (v80 - 1) & ((v77 >> 4) ^ (v77 >> 9));
              uint64_t v82 = (uint64_t ****)(v79 + 16 * v81);
              unsigned int v83 = *v82;
              if (*v82 != v77)
              {
                int v84 = 1;
                do
                {
                  if (v83 == (uint64_t ***)-4096) {
                    goto LABEL_92;
                  }
                  int v85 = v81 + v84++;
                  uint64_t v81 = v85 & (v80 - 1);
                  unsigned int v83 = *(uint64_t ****)(v79 + 16 * v81);
                }
                while (v83 != v77);
                uint64_t v82 = (uint64_t ****)(v79 + 16 * v81);
              }
            }
            else
            {
LABEL_92:
              uint64_t v82 = (uint64_t ****)(v79 + 16 * v80);
            }
            uint64_t v86 = v82[1];
            size_t v89 = (size_t)*v86;
            uint64_t v87 = (char *)(v86 + 2);
            size_t v88 = v89;
          }
          else
          {
            size_t v88 = 0;
            uint64_t v87 = &byte_1CFBCE98E;
          }
          if ((v183 & 0x10000000) != 0)
          {
            uint64_t v90 = ***v74;
            uint64_t v91 = *(void *)(v90 + 152);
            uint64_t v92 = *(unsigned int *)(v90 + 168);
            if (v92)
            {
              LODWORD(v93) = (v92 - 1) & ((v74 >> 4) ^ (v74 >> 9));
              size_t v94 = (uint64_t ****)(v91 + 16 * v93);
              uint64_t v95 = *v94;
              if (*v94 != v74)
              {
                int v96 = 1;
                do
                {
                  if (v95 == (uint64_t ***)-4096) {
                    goto LABEL_101;
                  }
                  int v97 = v93 + v96++;
                  uint64_t v93 = v97 & (v92 - 1);
                  uint64_t v95 = *(uint64_t ****)(v91 + 16 * v93);
                }
                while (v95 != v74);
                size_t v94 = (uint64_t ****)(v91 + 16 * v93);
              }
            }
            else
            {
LABEL_101:
              size_t v94 = (uint64_t ****)(v91 + 16 * v92);
            }
            uint64_t v98 = v94[1];
            size_t v101 = (size_t)*v98;
            uint64_t v99 = (char *)(v98 + 2);
            size_t v100 = v101;
          }
          else
          {
            size_t v100 = 0;
            uint64_t v99 = &byte_1CFBCE98E;
          }
          if (v100 >= v88) {
            size_t v102 = v88;
          }
          else {
            size_t v102 = v100;
          }
          if (v102 && (int v103 = memcmp(v87, v99, v102)) != 0)
          {
            int v104 = (v103 >> 31) | 1;
          }
          else
          {
            if (v88 < v100) {
              int v104 = -1;
            }
            else {
              int v104 = 1;
            }
            if (v88 == v100) {
              int v104 = 0;
            }
          }
          if (v104 == -1) {
            unint64_t v107 = v185 + ~v75;
          }
          else {
            unint64_t v107 = v75;
          }
          if (v104 == -1) {
            unint64_t v41 = v76 + 8;
          }
        }
        while (v107);
        unint64_t v105 = a2;
        unint64_t v107 = (v41 - a2) >> 3;
      }
      uint64_t v106 = v180;
      goto LABEL_124;
    }
    if (v180 >= 0) {
      uint64_t v39 = v180;
    }
    else {
      uint64_t v39 = v180 + 1;
    }
    uint64_t v40 = a2;
    uint64_t v184 = v39 >> 1;
    unint64_t v41 = &a2[8 * (v39 >> 1)];
    unint64_t v42 = (a2 - v9) >> 3;
    if (a2 == v9)
    {
      uint64_t v106 = v180;
      uint64_t v9 = a2;
      size_t v109 = &a2[8 * (v39 >> 1)];
      unint64_t v107 = v39 >> 1;
      goto LABEL_137;
    }
    int v43 = *(uint64_t ****)(*(void *)v41 + 40);
    int v182 = *((_DWORD *)v43 + 5);
    uint64_t v40 = v9;
    while (2)
    {
      if ((v182 & 0x10000000) != 0)
      {
        uint64_t v44 = ***v43;
        uint64_t v45 = *(void *)(v44 + 152);
        uint64_t v46 = *(unsigned int *)(v44 + 168);
        if (!v46) {
          goto LABEL_50;
        }
        LODWORD(v47) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        size_t v48 = (uint64_t ****)(v45 + 16 * v47);
        size_t v49 = *v48;
        if (*v48 != v43)
        {
          int v50 = 1;
          while (v49 != (uint64_t ***)-4096)
          {
            int v51 = v47 + v50++;
            uint64_t v47 = v51 & (v46 - 1);
            size_t v49 = *(uint64_t ****)(v45 + 16 * v47);
            if (v49 == v43)
            {
              size_t v48 = (uint64_t ****)(v45 + 16 * v47);
              goto LABEL_51;
            }
          }
LABEL_50:
          size_t v48 = (uint64_t ****)(v45 + 16 * v46);
        }
LABEL_51:
        uint64_t v52 = v48[1];
        size_t v55 = (size_t)*v52;
        uint64_t v53 = (char *)(v52 + 2);
        size_t v54 = v55;
      }
      else
      {
        size_t v54 = 0;
        uint64_t v53 = &byte_1CFBCE98E;
      }
      BOOL v56 = &v40[8 * (v42 >> 1)];
      unsigned int v57 = *(uint64_t ****)(*(void *)v56 + 40);
      if ((*((unsigned char *)v57 + 23) & 0x10) != 0)
      {
        uint64_t v58 = ***v57;
        uint64_t v59 = *(void *)(v58 + 152);
        uint64_t v60 = *(unsigned int *)(v58 + 168);
        if (!v60) {
          goto LABEL_59;
        }
        LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
        size_t v62 = (uint64_t ****)(v59 + 16 * v61);
        uint64_t v63 = *v62;
        if (*v62 != v57)
        {
          int v64 = 1;
          while (v63 != (uint64_t ***)-4096)
          {
            int v65 = v61 + v64++;
            uint64_t v61 = v65 & (v60 - 1);
            uint64_t v63 = *(uint64_t ****)(v59 + 16 * v61);
            if (v63 == v57)
            {
              size_t v62 = (uint64_t ****)(v59 + 16 * v61);
              goto LABEL_60;
            }
          }
LABEL_59:
          size_t v62 = (uint64_t ****)(v59 + 16 * v60);
        }
LABEL_60:
        uint64_t v66 = v62[1];
        size_t v69 = (size_t)*v66;
        uint64_t v67 = (char *)(v66 + 2);
        size_t v68 = v69;
      }
      else
      {
        size_t v68 = 0;
        uint64_t v67 = &byte_1CFBCE98E;
      }
      if (v68 >= v54) {
        size_t v70 = v54;
      }
      else {
        size_t v70 = v68;
      }
      if (v70 && (int v71 = memcmp(v53, v67, v70)) != 0)
      {
        int v72 = (v71 >> 31) | 1;
      }
      else
      {
        if (v54 < v68) {
          int v72 = -1;
        }
        else {
          int v72 = 1;
        }
        if (v54 == v68) {
          int v72 = 0;
        }
      }
      if (v72 == -1)
      {
        v42 >>= 1;
      }
      else
      {
        uint64_t v40 = v56 + 8;
        v42 += ~(v42 >> 1);
      }
      if (v42) {
        continue;
      }
      break;
    }
    unint64_t v42 = (v40 - v9) >> 3;
    uint64_t v106 = v180;
    unint64_t v105 = a2;
    unint64_t v107 = v184;
LABEL_124:
    if (v40 == v105)
    {
      uint64_t v40 = v105;
      size_t v109 = v41;
    }
    else if (v105 == v41)
    {
      unint64_t v41 = v105;
      size_t v109 = v40;
    }
    else
    {
      unint64_t v108 = v107;
      if (v40 + 8 == v105)
      {
        uint64_t v110 = *(void *)v40;
        int64_t v111 = v41 - v105;
        memmove(v40, v105, v41 - v105);
        size_t v109 = &v40[v111];
        uint64_t v106 = v180;
        *(void *)size_t v109 = v110;
      }
      else if (v105 + 8 == v41)
      {
        uint64_t v112 = *((void *)v41 - 1);
        size_t v109 = v40 + 8;
        if (v41 - 8 != v40) {
          memmove(v40 + 8, v40, v41 - 8 - v40);
        }
        *(void *)uint64_t v40 = v112;
        uint64_t v106 = v180;
      }
      else
      {
        size_t v109 = (char *)sub_1CC057214(v40, v105, v41);
      }
      unint64_t v107 = v108;
    }
LABEL_137:
    a4 -= v42;
    unint64_t v113 = v106 - v107;
    if ((uint64_t)(v107 + v42) >= (uint64_t)(v113 + a4))
    {
      uint64_t result = sub_1CC87C704(v109, v41, a3, a4, v113, v177, a7);
      unint64_t v41 = v40;
      a4 = v42;
      a6 = v177;
      unint64_t v113 = v107;
      a3 = v109;
    }
    else
    {
      unint64_t v114 = v42;
      a6 = v177;
      uint64_t result = sub_1CC87C704(v9, v40, v109, v114, v107, v177, a7);
      uint64_t v9 = v109;
    }
    uint64_t v180 = v113;
    a2 = v41;
  }
  while (v113);
  return result;
}

uint64_t sub_1CC87D1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CC87D250(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_1CC87D250(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC87D300(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CC87D380(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1CC87D380(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_16;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC87D430(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC87D490((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC87D538(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC87D490(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC87D538(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC87D5FC((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CC87D490((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CC87D5FC(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(void **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC87D788(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC87D788(a1, v14, v7);
}

uint64_t sub_1CC87D788(uint64_t result, void *a2, void *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CC87D490((uint64_t)v5, a2, &v11);
      int v10 = v11;
      *BOOL v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC87D850(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = 0;
  uint64_t result = sub_1CC00C33C(a2, *a3, &v19);
  uint64_t v9 = v19;
  unsigned int v10 = *(_DWORD *)a2;
  if (result)
  {
    if (v10)
    {
      uint64_t v17 = a2 + 8;
      uint64_t v18 = 4;
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v18 = *(unsigned int *)(a2 + 16);
    }
    char v16 = 0;
    uint64_t v15 = v17 + 16 * v18;
    goto LABEL_11;
  }
  unsigned int v11 = v10 >> 1;
  if (v10) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_15;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 4) <= v12 >> 3)
  {
LABEL_15:
    sub_1CC87D99C(a2, v12);
    int v19 = 0;
    uint64_t result = sub_1CC00C33C(a2, *a3, &v19);
    uint64_t v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  *uint64_t v9 = *a3;
  v9[1] = *a4;
  uint64_t v13 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v14 = 4;
  }
  else
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v15 = v13 + 16 * v14;
  char v16 = 1;
LABEL_11:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_1CC87D99C(uint64_t a1, unsigned int a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC87DB28(a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *uint64_t v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC87DB28(a1, v14, v7);
}

uint64_t sub_1CC87DB28(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC00C33C((uint64_t)v5, v10, &v12);
      unsigned int v11 = v12;
      *uint64_t v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC87DBEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CC87DC94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC87DE0C(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 32;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      char v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          char v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC87DE0C(a1, v8);
      int v20 = 0;
      sub_1CC87DBEC(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC87DE0C(uint64_t a1, unsigned int a2)
{
  v14[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC87DFA4((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC87DFA4((int *)a1, v14, v7);
}

int *sub_1CC87DFA4(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 130;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 32;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v8[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

llvm::Instruction *sub_1CC87E0AC(unsigned __int8 *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4, unsigned int a5)
{
  unsigned int v5 = a5;
  uint64_t v10 = *(void *)a1;
  if (*(void *)a1) {
    BOOL v11 = (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t v13 = *(unsigned int *)(v10 + 32);
    uint64_t result = (llvm::Instruction *)sub_1CC8749E4(*(void *)(v10 + 24), a4);
    if (v13)
    {
      int v15 = (int)result;
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v17 = **((void **)a3 + 8);
        BOOL v18 = *(llvm::ConstantInt **)(v17 + 1960);
        unint64_t v19 = *(unsigned int *)(v17 + 1968);
        unsigned int v24 = v19 >> 8;
        if (v19 >> 8 > 0x40) {
          operator new[]();
        }
        if (v19 <= 0xFF) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v19) + 63);
        }
        unint64_t v23 = v20 & i;
        unint64_t v21 = (unsigned __int8 *)llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v23, v14);
        if (v24 >= 0x41 && v23) {
          MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
        }
        __int16 v25 = 257;
        unint64_t v22 = sub_1CB8445F4((uint64_t)a3, a1, v21, (uint64_t)&v23);
        if ((*(_DWORD *)(*(void *)v22 + 8) & 0xFE) == 0x12) {
          uint64_t result = (llvm::Instruction *)sub_1CC87E0AC();
        }
        else {
          uint64_t result = sub_1CC87E2C0(v22, a2, a3, a4, v5);
        }
        v5 += v15;
      }
    }
  }
  else
  {
    return sub_1CC87E2C0((llvm::Value *)a1, a2, a3, a4, a5);
  }
  return result;
}

llvm::Instruction *sub_1CC87E2C0(llvm::Value *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = **((void **)a3 + 8);
  uint64_t v11 = a2[3];
  uint64_t v12 = *(llvm::ConstantInt **)(v10 + 1984);
  unsigned int v13 = *(_DWORD *)(v10 + 1992);
  unsigned int v42 = v13 >> 8;
  if (v13 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v41 = 0;
  int v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v41, a3);
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  v44[0] = (uint64_t)v15;
  uint64_t v16 = a5;
  uint64_t v17 = *(llvm::ConstantInt **)(v10 + 1984);
  unsigned int v18 = *(_DWORD *)(v10 + 1992);
  unsigned int v42 = v18 >> 8;
  if (v18 >> 8 > 0x40) {
    operator new[]();
  }
  if (v18 <= 0xFF) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v18) + 63);
  }
  unint64_t v41 = (const char *)(v19 & v16);
  unint64_t v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v41, v14);
  if (v42 >= 0x41 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  v44[1] = (uint64_t)v20;
  unint64_t v41 = "new_gep";
  __int16 v43 = 259;
  unint64_t v21 = (unsigned __int8 *)sub_1CC27CEC0((uint64_t *)a3, v11, a2, v44, 2, (uint64_t)&v41);
  unint64_t v23 = (sub_1CB83544C(a4, *(void *)a1) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v22 == 1) {
  if (v23 <= 8)
  }
  {
    uint64_t v24 = **((void **)a3 + 8) + 1936;
    __int16 v45 = 257;
    if (*(void *)a1 != v24)
    {
      if (*((unsigned __int8 *)a1 + 16) <= 0x14u)
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::Value *, uint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 39, a1, v24);
        a1 = (llvm::Value *)v28;
        if (v28)
        {
          if (*(unsigned __int8 *)(v28 + 16) >= 0x1Cu)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v28, v44, *((void *)a3 + 6), *((void *)a3 + 7));
            uint64_t v38 = *((unsigned int *)a3 + 2);
            if (v38)
            {
              uint64_t v39 = *(void *)a3;
              uint64_t v40 = *(void *)a3 + 16 * v38;
              do
              {
                llvm::Instruction::setMetadata(a1, *(_DWORD *)v39, *(llvm::MDNode **)(v39 + 8));
                v39 += 16;
              }
              while (v39 != v40);
            }
          }
        }
      }
      else
      {
        __int16 v43 = 257;
        a1 = llvm::CastInst::Create(39, (uint64_t)a1, v24, &v41, 0);
        (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), a1, v44, *((void *)a3 + 6), *((void *)a3 + 7));
        uint64_t v25 = *((unsigned int *)a3 + 2);
        if (v25)
        {
          uint64_t v26 = *(void *)a3;
          uint64_t v27 = *(void *)a3 + 16 * v25;
          do
          {
            llvm::Instruction::setMetadata(a1, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
            v26 += 16;
          }
          while (v26 != v27);
        }
      }
    }
  }
  unint64_t v29 = llvm::PointerType::get(*(llvm::PointerType **)a1, (llvm::Type *)0x40);
  __int16 v45 = 257;
  if (*(void *)v21 != v29)
  {
    if (v21[16] <= 0x14u)
    {
      unint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(**((void **)a3 + 9) + 224))(*((void *)a3 + 9), 49, v21, v29);
      if (v21) {
        BOOL v33 = v21[16] >= 0x1Cu;
      }
      else {
        BOOL v33 = 0;
      }
      if (v33)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v21, v44, *((void *)a3 + 6), *((void *)a3 + 7));
        uint64_t v35 = *((unsigned int *)a3 + 2);
        if (v35)
        {
          uint64_t v36 = *(void *)a3;
          uint64_t v37 = *(void *)a3 + 16 * v35;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v36, *(llvm::MDNode **)(v36 + 8));
            v36 += 16;
          }
          while (v36 != v37);
        }
      }
    }
    else
    {
      __int16 v43 = 257;
      unint64_t v21 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v21, v29, &v41, 0);
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, uint64_t, uint64_t))(**((void **)a3 + 10) + 16))(*((void *)a3 + 10), v21, v44, *((void *)a3 + 6), *((void *)a3 + 7));
      uint64_t v30 = *((unsigned int *)a3 + 2);
      if (v30)
      {
        uint64_t v31 = *(void *)a3;
        uint64_t v32 = *(void *)a3 + 16 * v30;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v21, *(_DWORD *)v31, *(llvm::MDNode **)(v31 + 8));
          v31 += 16;
        }
        while (v31 != v32);
      }
    }
  }
  return sub_1CC27BF8C((uint64_t *)a3, (uint64_t)a1, (uint64_t)v21, 0, 0);
}

uint64_t *sub_1CC87E83C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v3 = 32;
    uint64_t v2 = a1 + 8;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      uint64_t v11 = 0;
      return (uint64_t *)(v2 + 16 * v11);
    }
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = (uint64_t *)(v2 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      int v10 = v5 + v9++;
      uint64_t v5 = v10 & v4;
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == a2) {
        return (uint64_t *)(v2 + 16 * v5);
      }
    }
    if (*(_DWORD *)a1)
    {
      uint64_t v11 = 32;
      uint64_t v2 = a1 + 8;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v2 + 16 * v11);
  }
  return v6;
}

unsigned __int8 *sub_1CC87E8FC(llvm::PointerType *a1, uint64_t *a2, const llvm::APInt *a3, uint64_t a4)
{
  unsigned int v5 = a3;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **(void **)(a4 + 64);
  int v9 = *(llvm::ConstantInt **)(v8 + 1984);
  unsigned int v10 = *(_DWORD *)(v8 + 1992);
  unsigned int v30 = v10 >> 8;
  if (v10 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v29 = 0;
  uint64_t v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v29, a3);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  uint64_t v13 = v5;
  unsigned int v14 = *(llvm::ConstantInt **)(v8 + 1984);
  unsigned int v15 = *(_DWORD *)(v8 + 1992);
  unsigned int v30 = v15 >> 8;
  if (v15 >> 8 > 0x40) {
    operator new[]();
  }
  if (v15 <= 0xFF) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v15) + 63);
  }
  unint64_t v29 = (const char *)(v16 & v13);
  uint64_t v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v29, v11);
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  uint64_t v18 = a2[3];
  v32[0] = (uint64_t)v12;
  v32[1] = (uint64_t)v17;
  unint64_t v29 = "new_gep";
  __int16 v31 = 259;
  unint64_t v19 = (unsigned __int8 *)sub_1CC27CEC0((uint64_t *)a4, v18, a2, v32, 2, (uint64_t)&v29);
  unint64_t v20 = llvm::PointerType::get(a1, (llvm::Type *)0x40);
  __int16 v33 = 257;
  if (*(void *)v19 != v20)
  {
    if (v19[16] <= 0x14u)
    {
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**(void **)(a4 + 72)
                                                                                            + 224))(*(void *)(a4 + 72), 49, v19, v20);
      unint64_t v19 = (unsigned __int8 *)v24;
      if (v24)
      {
        if (*(unsigned __int8 *)(v24 + 16) >= 0x1Cu)
        {
          (*(void (**)(void, uint64_t, uint64_t *, void, void))(**(void **)(a4 + 80) + 16))(*(void *)(a4 + 80), v24, v32, *(void *)(a4 + 48), *(void *)(a4 + 56));
          uint64_t v26 = *(unsigned int *)(a4 + 8);
          if (v26)
          {
            uint64_t v27 = *(void *)a4;
            uint64_t v28 = v27 + 16 * v26;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v27, *(llvm::MDNode **)(v27 + 8));
              v27 += 16;
            }
            while (v27 != v28);
          }
        }
      }
    }
    else
    {
      __int16 v31 = 257;
      unint64_t v19 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v19, v20, &v29, 0);
      (*(void (**)(void, unsigned __int8 *, uint64_t *, void, void))(**(void **)(a4 + 80) + 16))(*(void *)(a4 + 80), v19, v32, *(void *)(a4 + 48), *(void *)(a4 + 56));
      uint64_t v21 = *(unsigned int *)(a4 + 8);
      if (v21)
      {
        uint64_t v22 = *(void *)a4;
        uint64_t v23 = v22 + 16 * v21;
        do
        {
          llvm::Instruction::setMetadata((llvm::Instruction *)v19, *(_DWORD *)v22, *(llvm::MDNode **)(v22 + 8));
          v22 += 16;
        }
        while (v22 != v23);
      }
    }
  }
  return v19;
}

void sub_1CC87ECB0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      if ((*(void *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4) {
          free(v4);
        }
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
}

unsigned __int8 *sub_1CC87ED14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const llvm::APInt *a5)
{
  unint64_t v10 = (sub_1CB83544C(a4, a1) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == 1) {
  uint64_t v11 = (llvm::PointerType *)a1;
  }
  if (v10 <= 8) {
    uint64_t v11 = (llvm::PointerType *)(**(void **)(a3 + 64) + 1936);
  }
  uint64_t v12 = sub_1CC87E8FC(v11, a2, a5, a3);
  __int16 v29 = 257;
  char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(a3 + 48) + 56) + 40) + 272), v11, 1);
  unsigned int v14 = (char *)operator new(0x60uLL);
  *((_DWORD *)v14 + 13) = *((_DWORD *)v14 + 13) & 0x38000000 | 1;
  unsigned int v15 = (unsigned __int8 *)(v14 + 32);
  *(void *)unsigned int v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = v14 + 32;
  __int16 v31 = 257;
  llvm::LoadInst::LoadInst((llvm::Value *)(v14 + 32), (uint64_t)v11, (uint64_t)v12, v30, 0, Alignment, 0);
  (*(void (**)(void, char *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v14 + 32, v28, *(void *)(a3 + 48), *(void *)(a3 + 56));
  uint64_t v16 = *(unsigned int *)(a3 + 8);
  if (v16)
  {
    uint64_t v23 = *(void *)a3;
    uint64_t v24 = *(void *)a3 + 16 * v16;
    do
    {
      llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v23, *(llvm::MDNode **)(v23 + 8));
      v23 += 16;
    }
    while (v23 != v24);
  }
  uint64_t v17 = (llvm::Type *)a1;
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
    uint64_t v17 = **(llvm::Type ***)(a1 + 16);
  }
  if (llvm::Type::getPrimitiveSizeInBits(v17) <= 8)
  {
    __int16 v29 = 257;
    if (*(void *)v15 != a1)
    {
      if (v14[48] <= 0x14u)
      {
        unsigned int v15 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t))(**(void **)(a3 + 72) + 224))(*(void *)(a3 + 72), 38, v15, a1);
        if (v15) {
          BOOL v21 = v15[16] >= 0x1Cu;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21)
        {
          (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v15, v28, *(void *)(a3 + 48), *(void *)(a3 + 56));
          uint64_t v25 = *(unsigned int *)(a3 + 8);
          if (v25)
          {
            uint64_t v26 = *(void *)a3;
            uint64_t v27 = v26 + 16 * v25;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v26, *(llvm::MDNode **)(v26 + 8));
              v26 += 16;
            }
            while (v26 != v27);
          }
        }
      }
      else
      {
        __int16 v31 = 257;
        unsigned int v15 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v15, a1, v30, 0);
        (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**(void **)(a3 + 80) + 16))(*(void *)(a3 + 80), v15, v28, *(void *)(a3 + 48), *(void *)(a3 + 56));
        uint64_t v18 = *(unsigned int *)(a3 + 8);
        if (v18)
        {
          uint64_t v19 = *(void *)a3;
          uint64_t v20 = v19 + 16 * v18;
          do
          {
            llvm::Instruction::setMetadata((llvm::Instruction *)v15, *(_DWORD *)v19, *(llvm::MDNode **)(v19 + 8));
            v19 += 16;
          }
          while (v19 != v20);
        }
      }
    }
  }
  return v15;
}

BOOL sub_1CC87F018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        unsigned int v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
      }
    }
  }
  unsigned int v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && *((_DWORD *)v5 + 2) != 0;
}

uint64_t sub_1CC87F09C()
{
  *(void *)&long long v3 = "Apply loop deletion in constant-programs";
  *((void *)&v3 + 1) = 40;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCDC990, "cprog-loop-delete", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDC990, &dword_1CB82C000);
  *(void *)&long long v3 = "Apply CFG hoisting in constant-programs";
  *((void *)&v3 + 1) = 39;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCDCA50, "cprog-cfg-hoist", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCA50, &dword_1CB82C000);
  *(void *)&long long v3 = "Apply bindless texture DMA promotion in constant-programs";
  *((void *)&v3 + 1) = 57;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCDCB10, "cprog-dma-bindless-tex", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCB10, &dword_1CB82C000);
  *(void *)&long long v3 = "Apply GMem hoisting in constant-programs";
  *((void *)&v3 + 1) = 40;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCDCBD0, "cprog-gmem-hoist", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCBD0, &dword_1CB82C000);
  *(void *)&long long v3 = "Force max frontier size in constant-programs in 16-bit units";
  *((void *)&v3 + 1) = 60;
  int v1 = -1;
  uint64_t v2 = &v1;
  sub_1CD6454B8(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EBCDCC90, &dword_1CB82C000);
  *(void *)&long long v3 = "Can the constant programs read uniforms";
  *((void *)&v3 + 1) = 39;
  sub_1CD6455C8(&v3);
  __cxa_atexit((void (*)(void *))sub_1CC243CA8, qword_1EBCDCD50, &dword_1CB82C000);
  *(void *)&long long v3 = "Hoist and emit format conversions for uniform LOD in AGX3";
  *((void *)&v3 + 1) = 57;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCDCE10, "cprog-hoist-agx3-uni-lod", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCE10, &dword_1CB82C000);
  *(void *)&long long v3 = "Hoist regardless of profitability";
  *((void *)&v3 + 1) = 33;
  LOBYTE(v1) = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCDCED0, "cprog-skip-profit-check", &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCED0, &dword_1CB82C000);
  *(void *)&long long v3 = "Hoist instructions from non-entry functions";
  *((void *)&v3 + 1) = 43;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCDCF90, "cprog-hoist-functions", &v3, (unsigned char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCDCF90, &dword_1CB82C000);
}

void sub_1CC87F344(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC87F3E0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD050;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F261FEA8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD058, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC87F344;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDD058, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC87F490()
{
}

void sub_1CC87F4D0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC87F508(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1CC87F558(uint64_t a1, llvm::AGXIR *a2)
{
  v100[6] = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::GPUFunctionCallInfoWrapper::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
  if (*(unsigned char *)(v8 + 144))
  {
    llvm::AGXIR::getShaderID(a2, v7);
    char v9 = 0;
    return v9 & 1;
  }
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  unsigned int v92 = 0;
  uint64_t v98 = v100;
  uint64_t v99 = 0x600000000;
  int v87 = 128;
  unint64_t v10 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v86[0] = v10;
  v86[1] = 0;
  uint64_t v94 = 2;
  uint64_t v95 = 0;
  uint64_t v96 = -4096;
  uint64_t v97 = 0;
  uint64_t v93 = &unk_1F2615EC8;
  uint64_t v11 = 0;
  uint64_t v12 = 0x2000;
  uint64_t v13 = v10 + 16;
  do
  {
    uint64_t v14 = v94;
    uint64_t v15 = v96;
    *(v13 - 1) = v94 & 6;
    *uint64_t v13 = 0;
    v13[1] = v15;
    if (v15 != -4096)
    {
      BOOL v16 = v15 == -8192 || v15 == 0;
      if (!v16)
      {
        *uint64_t v13 = *(void *)(v14 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = v13 - 1;
        *(v13 - 1) = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (*v13) {
          *(void *)*uint64_t v13 = *(void *)*v13 & 7 | (unint64_t)(v10 + 16);
        }
        uint64_t v11 = v97;
      }
    }
    *(v13 - 2) = &unk_1F2615EC8;
    v13[2] = v11;
    v13 += 8;
    v10 += 64;
    v12 -= 64;
  }
  while (v12);
  if (v96 != -8192 && v96 != -4096 && v96)
  {
    unint64_t v70 = v94 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v94 & 0xFFFFFFFFFFFFFFF8) = v95;
    if (v95)
    {
      *uint64_t v95 = *v95 & 7 | v70;
    }
    else
    {
      uint64_t v71 = v96;
      int v72 = ***(int32x2_t ****)v96;
      unint64_t v73 = (unint64_t)v72[303];
      if (v73 <= v70)
      {
        uint64_t v74 = v72[305].u32[0];
        if (v73 + 16 * v74 > v70)
        {
          unsigned int v75 = v74 - 1;
          LODWORD(v76) = v75 & ((v96 >> 4) ^ (v96 >> 9));
          size_t v77 = (uint64_t *)(v73 + 16 * v76);
          uint64_t v78 = *v77;
          if (v96 == *v77)
          {
LABEL_141:
            *size_t v77 = -8192;
            v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v71 = v96;
          }
          else
          {
            int v79 = 1;
            while (v78 != -4096)
            {
              int v80 = v76 + v79++;
              uint64_t v76 = v80 & v75;
              uint64_t v78 = *(void *)(v73 + 16 * v76);
              if (v96 == v78)
              {
                size_t v77 = (uint64_t *)(v73 + 16 * v76);
                goto LABEL_141;
              }
            }
          }
          *(unsigned char *)(v71 + 17) &= ~1u;
        }
      }
    }
  }
  LOBYTE(v88[0]) = 0;
  char v89 = 0;
  uint64_t v17 = (void *)*((void *)a2 + 4);
  unsigned int v83 = (void *)((char *)a2 + 24);
  if (v17 != (void *)((char *)a2 + 24))
  {
    char v82 = 0;
    int v84 = (unsigned int *)(v8 + 64);
    int v85 = (unsigned int *)(v8 + 68);
    uint64_t v81 = v8;
    while (1)
    {
      uint64_t v18 = v17 - 7;
      if (!v17) {
        uint64_t v18 = 0;
      }
      uint64_t v19 = v18 + 9;
      uint64_t v20 = (void *)v18[10];
LABEL_27:
      if (v20 != v19) {
        break;
      }
      uint64_t v17 = (void *)v17[1];
      if (v17 == v83) {
        goto LABEL_98;
      }
    }
    BOOL v21 = v20 - 3;
    if (!v20) {
      BOOL v21 = 0;
    }
    uint64_t v22 = v21 + 5;
    for (uint64_t i = (void *)v21[6]; ; uint64_t i = (void *)i[1])
    {
      if (i == v22)
      {
        uint64_t v20 = (void *)v20[1];
        goto LABEL_27;
      }
      uint64_t v24 = i ? (uint64_t)(i - 3) : 0;
      if (*(unsigned char *)(v24 + 16) == 84)
      {
        uint64_t v25 = *(void *)(v24 - 32);
        if (v25)
        {
          if (!*(unsigned char *)(v25 + 16) && *(void *)(v25 + 24) == *(void *)(v24 + 72))
          {
            unsigned int v26 = *(_DWORD *)(v25 + 32);
            if ((v26 & 0xF) - 7 >= 2)
            {
              int v27 = (v26 >> 23) & 1;
              if (*(void *)(v25 + 72) != v25 + 72) {
                int v27 = 1;
              }
              if ((v26 & 0x2000) == 0 && v27)
              {
                uint64_t v28 = v90;
                unsigned int v29 = v92;
                if (v92)
                {
                  uint64_t v30 = (v92 - 1) & ((v25 >> 4) ^ (v25 >> 9));
                  uint64_t v31 = *(void *)(v90 + 16 * v30);
                  if (v25 == v31)
                  {
LABEL_47:
                    if (v30 != v92)
                    {
                      sub_1CC1DDE04(v24, *(void *)(v90 + 16 * v30 + 8));
                      continue;
                    }
                  }
                  else
                  {
                    int v51 = 1;
                    while (v31 != -4096)
                    {
                      int v52 = v30 + v51++;
                      uint64_t v30 = v52 & (v92 - 1);
                      uint64_t v31 = *(void *)(v90 + 16 * v30);
                      if (v25 == v31) {
                        goto LABEL_47;
                      }
                    }
                  }
                }
                uint64_t v33 = *(void *)(v8 + 48);
                uint64_t v32 = *(void *)(v8 + 56);
                if (v32 == v33)
                {
                  uint64_t v34 = *v85;
                  uint64_t v35 = (void *)(v32 + 8 * v34);
                  if (v34)
                  {
                    uint64_t v36 = 0;
                    uint64_t v37 = 8 * v34;
                    while (*(void *)(v32 + v36) != v25)
                    {
                      v36 += 8;
                      if (v37 == v36) {
                        goto LABEL_67;
                      }
                    }
                    uint64_t v35 = (void *)(v32 + v36);
                  }
LABEL_67:
                  uint64_t v33 = *(void *)(v8 + 56);
                }
                else
                {
                  uint64_t v38 = *v84;
                  int v39 = v38 - 1;
                  unsigned int v40 = (v38 - 1) & ((v25 >> 4) ^ (v25 >> 9));
                  uint64_t v35 = (void *)(v32 + 8 * v40);
                  uint64_t v41 = *v35;
                  if (*v35 == -1)
                  {
                    unsigned int v42 = 0;
LABEL_77:
                    if (v42) {
                      uint64_t v35 = v42;
                    }
                    if (*v35 != v25) {
                      uint64_t v35 = (void *)(v32 + 8 * v38);
                    }
                  }
                  else
                  {
                    unsigned int v42 = 0;
                    int v43 = 1;
                    while (v41 != v25)
                    {
                      if (v42) {
                        BOOL v44 = 0;
                      }
                      else {
                        BOOL v44 = v41 == -2;
                      }
                      if (v44) {
                        unsigned int v42 = v35;
                      }
                      unsigned int v45 = v40 + v43++;
                      unsigned int v40 = v45 & v39;
                      uint64_t v35 = (void *)(v32 + 8 * (v45 & v39));
                      uint64_t v41 = *v35;
                      if (*v35 == -1) {
                        goto LABEL_77;
                      }
                    }
                  }
                }
                BOOL v16 = v32 == v33;
                uint64_t v46 = v85;
                if (!v16) {
                  uint64_t v46 = v84;
                }
                if (v35 == (void *)(v32 + 8 * *v46) && !sub_1CC87F018(v8, *(void *)(v24 - 32))) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_40:
      ;
    }
    uint64_t v47 = llvm::CloneFunction((llvm::Function *)v25, (uint64_t)v86);
    *((_DWORD *)v47 + 8) = *((_DWORD *)v47 + 8) & 0xFFFFBFC0 | 0x4008;
    uint64_t v93 = 0;
    int v48 = sub_1CC64E380(v28, v29, v25, &v93);
    size_t v49 = v93;
    if (v48)
    {
      uint64_t v47 = (char *)*((void *)v93 + 1);
LABEL_85:
      sub_1CC1DDE04(v24, (uint64_t)v47);
      if (v99 >= (unint64_t)HIDWORD(v99)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v8 = v81;
      v98[v99] = v25;
      LODWORD(v99) = v99 + 1;
      char v82 = 1;
      goto LABEL_40;
    }
    if (4 * (int)v91 + 4 < 3 * v29)
    {
      if (v29 + ~v91 - HIDWORD(v91) > v29 >> 3) {
        goto LABEL_82;
      }
      int v50 = v29;
    }
    else
    {
      int v50 = 2 * v29;
    }
    sub_1CC64E414((uint64_t)&v90, v50);
    uint64_t v93 = 0;
    sub_1CC64E380(v90, v92, v25, &v93);
    size_t v49 = v93;
LABEL_82:
    LODWORD(v91) = v91 + 1;
    if (*v49 != -4096) {
      --HIDWORD(v91);
    }
    *size_t v49 = v25;
    v49[1] = v47;
    goto LABEL_85;
  }
  char v82 = 0;
LABEL_98:
  if (v99)
  {
    uint64_t v53 = *v98;
    size_t v54 = (void *)(*v98 + 72);
    for (unint64_t j = *(void **)(*v98 + 80); ; unint64_t j = (void *)j[1])
    {
      if (j == v54)
      {
        for (unint64_t k = (void *)*v54; k != v54; unint64_t k = *(void **)(v53 + 72))
        {
          uint64_t v67 = *(void *)(v53 + 80);
          if (v67) {
            size_t v68 = (llvm::BasicBlock *)(v67 - 24);
          }
          else {
            size_t v68 = 0;
          }
          llvm::BasicBlock::eraseFromParent(v68);
        }
        uint64_t v93 = "entry";
        LOWORD(v97) = 259;
        operator new();
      }
      if (j) {
        BOOL v56 = j - 3;
      }
      else {
        BOOL v56 = 0;
      }
      unsigned int v57 = v56 + 5;
      for (uint64_t m = (void *)v56[6]; m != v57; uint64_t m = (void *)m[1])
      {
        if (m) {
          uint64_t v59 = m - 3;
        }
        else {
          uint64_t v59 = 0;
        }
        int v60 = *((_DWORD *)v59 + 5);
        if ((v60 & 0x40000000) != 0)
        {
          size_t v62 = (void *)*(v59 - 1);
          uint64_t v61 = v60 & 0x7FFFFFF;
          if (!v61) {
            continue;
          }
        }
        else
        {
          uint64_t v61 = v60 & 0x7FFFFFF;
          size_t v62 = &v59[-4 * v61];
          if (!v61) {
            continue;
          }
        }
        uint64_t v63 = 32 * v61;
        int v64 = (void **)(v62 + 2);
        do
        {
          if (*(v64 - 2))
          {
            *void *v64 = *(v64 - 1);
            uint64_t v65 = (uint64_t)*(v64 - 1);
            if (v65) {
              *(void *)(v65 + 16) = *v64;
            }
          }
          *(v64 - 2) = 0;
          v64 += 4;
          v63 -= 32;
        }
        while (v63);
      }
    }
  }
  if (v89)
  {
    sub_1CC009394((uint64_t)v88);
    MEMORY[0x1D25D9CD0](v88[0], 8);
    char v89 = 0;
  }
  sub_1CC4D021C(v86);
  MEMORY[0x1D25D9CD0](v86[0], 8);
  char v9 = v82;
  if (v98 != v100) {
    free(v98);
  }
  MEMORY[0x1D25D9CD0](v90, 8);
  return v9 & 1;
}

void sub_1CC87FE80(llvm *a1)
{
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

void sub_1CC87FF30()
{
}

void sub_1CC88000C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC880044(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC880094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  *(void *)(a1 + 32) = a2 + 272;
  uint64_t v14 = v18;
  uint64_t v15 = v18;
  uint64_t v16 = 4;
  int v17 = 0;
  uint64_t v9 = a2 + 24;
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10 == v9) {
    return 0;
  }
  do
  {
    uint64_t v11 = v10;
    uint64_t v10 = *(void *)(v10 + 8);
    if (v11) {
      uint64_t v12 = v11 - 56;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11 && *(unsigned char *)(v12 + 16) == 3)
    {
      if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) != 0) {
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)(v12 + 16) || *(void *)(v12 + 72) != v12 + 72 || (*(unsigned char *)(v12 + 34) & 0x80) != 0)
    {
LABEL_17:
      sub_1CC8801E4(a1, v12, v8, (uint64_t *)&v14);
    }
  }
  while (v10 != v9);
  if (v15 != v14) {
    free(v15);
  }
  return 0;
}

void sub_1CC8801E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v303 = *MEMORY[0x1E4F143B8];
  uint64_t v248 = a2;
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7 == *a4)
  {
    uint64_t v9 = *((unsigned int *)a4 + 5);
    uint64_t v10 = (void *)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(void *)(v7 + v11) != a2)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (void *)(v7 + v11);
    }
LABEL_19:
    uint64_t v8 = a4[1];
  }
  else
  {
    uint64_t v12 = *((unsigned int *)a4 + 4);
    int v13 = v12 - 1;
    unsigned int v14 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = (void *)(v7 + 8 * v14);
    uint64_t v15 = *v10;
    if (*v10 == -1)
    {
      uint64_t v16 = 0;
LABEL_21:
      if (v16) {
        uint64_t v10 = v16;
      }
      if (*v10 != a2)
      {
        LODWORD(v9) = *((_DWORD *)a4 + 5);
        uint64_t v10 = (void *)(v7 + 8 * v12);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != a2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v10;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        uint64_t v10 = (void *)(v7 + 8 * (v19 & v13));
        uint64_t v15 = *v10;
        if (*v10 == -1) {
          goto LABEL_21;
        }
      }
    }
    LODWORD(v9) = *((_DWORD *)a4 + 5);
  }
LABEL_26:
  if (v7 == v8) {
    unsigned int v20 = v9;
  }
  else {
    unsigned int v20 = *((_DWORD *)a4 + 4);
  }
  if (v10 != (void *)(v7 + 8 * v20)) {
    return;
  }
  int v21 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
  uint64_t v22 = (unsigned char *)(a1 + 29);
  int v23 = 1 << ((*(unsigned __int16 *)(a2 + 18) >> 4) - 100);
  if ((v23 & 0x66) == 0)
  {
    if ((v23 & 0x91) != 0) {
      return;
    }
    uint64_t v22 = (unsigned char *)(a1 + 28);
  }
  if (!*v22) {
    return;
  }
  unsigned int v236 = v21 - 103;
  if ((v21 - 103) > 1)
  {
    if (!*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3)) {
      return;
    }
    uint64_t v30 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a2);
    if ((*(uint64_t (**)(void))(v30 + 592))()) {
      return;
    }
    char v31 = 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 30)) {
      goto LABEL_57;
    }
    uint64_t v24 = *(void *)(a2 + 80);
LABEL_36:
    if (v24 == a2 + 72)
    {
LABEL_57:
      char v31 = 0;
    }
    else
    {
      if (v24) {
        uint64_t v25 = v24 - 24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v25 + 40;
      for (uint64_t i = *(void *)(v25 + 48); ; uint64_t i = *(void *)(i + 8))
      {
        if (i == v26)
        {
          uint64_t v24 = *(void *)(v24 + 8);
          goto LABEL_36;
        }
        uint64_t v28 = i - 24;
        if (!i) {
          uint64_t v28 = 0;
        }
        if (*(unsigned char *)(v28 + 16) == 84)
        {
          uint64_t v29 = *(void *)(v28 - 32);
          if (v29)
          {
            if (!*(unsigned char *)(v29 + 16)
              && *(void *)(v29 + 24) == *(void *)(v28 + 72)
              && (*(unsigned char *)(v29 + 33) & 0x20) != 0
              && (*(_DWORD *)(*(void *)(i - 56) + 36) & 0xFFFFFFFE) == 0x7CA)
            {
              break;
            }
          }
        }
      }
      char v31 = 1;
    }
    uint64_t v32 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a2);
    if ((*(uint64_t (**)(void))(v32 + 592))()) {
      return;
    }
  }
  uint64_t v33 = (void **)(*(void *)(a2 + 40) + 216);
  LOWORD(v256) = 260;
  uint64_t v253 = v33;
  llvm::Triple::Triple((llvm::Triple *)v244, (const llvm::Twine *)&v253);
  BOOL v241 = 0;
  unsigned int v242 = 0;
  uint64_t v243 = 0;
  sub_1CC86D39C((char **)&v241, (uint64_t)&v248);
  int v34 = *(unsigned __int8 *)(a1 + 30);
  uint64_t v35 = *(void *)(a1 + 32);
  v254[0] = 0;
  v254[1] = 0;
  uint64_t v253 = &v241;
  int v255 = 0;
  uint64_t v256 = 1;
  int64x2_t v36 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v257 = v36;
  int64x2_t v258 = v36;
  int64x2_t v259 = v36;
  int64x2_t v260 = v36;
  BOOL v261 = v263;
  uint64_t v262 = 0x800000000;
  uint64_t v264 = 0;
  uint64_t v265 = 0;
  unsigned int v266 = 0;
  uint64_t v267 = 1;
  int64x2_t v268 = v36;
  int64x2_t v269 = v36;
  int64x2_t v270 = v36;
  int64x2_t v271 = v36;
  if (v34) {
    char v37 = v31;
  }
  else {
    char v37 = 0;
  }
  unsigned int v272 = v274;
  uint64_t v273 = 0x800000000;
  uint64_t v275 = 1;
  int64x2_t v276 = v36;
  int64x2_t v277 = v36;
  int64x2_t v278 = v36;
  int64x2_t v279 = v36;
  uint64_t v280 = v282;
  uint64_t v281 = 0x800000000;
  uint64_t v283 = 1;
  int64x2_t v284 = v36;
  int64x2_t v285 = v36;
  int64x2_t v286 = v36;
  int64x2_t v287 = v36;
  uint64_t v288 = v290;
  uint64_t v289 = 0x800000000;
  BOOL v291 = v293;
  uint64_t v292 = 0x400000000;
  char v294 = 0;
  char v295 = v37;
  __int16 v296 = 1;
  unsigned __int8 v297 = 0;
  uint64_t v233 = a3;
  if (SHIBYTE(v245) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&__p, v244[0], (unint64_t)v244[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v244;
    uint64_t v299 = v245;
  }
  long long v300 = v246;
  uint64_t v301 = v247;
  uint64_t v302 = v35;
  uint64_t v38 = v253[1];
  unsigned int v234 = *v253;
  if (v38 != *v253)
  {
    int v240 = 0;
    do
    {
      uint64_t v41 = *(v38 - 1);
      int v39 = (char *)(v38 - 1);
      unsigned int v40 = (unsigned char *)v41;
      unsigned int v42 = (void *)(v41 + 40);
      int v43 = *(void **)(v41 + 48);
      __int16 v239 = (void *)(v41 + 40);
      while (v43 != v42)
      {
        BOOL v44 = v43 - 3;
        if (v43) {
          unsigned int v45 = v43 - 3;
        }
        else {
          unsigned int v45 = 0;
        }
        if (*((unsigned char *)v45 + 16) != 83) {
          goto LABEL_76;
        }
        int v43 = (void *)v43[1];
        unsigned int v42 = v239;
      }
      BOOL v44 = 0;
LABEL_76:
      unsigned int v235 = v39;
      for (unint64_t j = v44 + 3; j != v239; unint64_t j = (void *)j[1])
      {
        if (j) {
          uint64_t v47 = (uint64_t)(j - 3);
        }
        else {
          uint64_t v47 = 0;
        }
        uint64_t v249 = (llvm::GetElementPtrInst *)v47;
        int v48 = *(_DWORD *)(v47 + 20);
        if ((v48 & 0x40000000) != 0)
        {
          uint64_t v50 = *(void *)(v47 - 8);
          uint64_t v49 = v48 & 0x7FFFFFF;
          if (!v49) {
            goto LABEL_109;
          }
LABEL_83:
          int v51 = 0;
          int v52 = 0;
          uint64_t v53 = v50 + 32 * v49;
          unsigned int v54 = v266 - 1;
          int v55 = v255 - 1;
          char v56 = 1;
          while (2)
          {
            uint64_t v57 = *(void *)v50;
            unsigned int v58 = *(unsigned __int8 *)(*(void *)v50 + 16);
            if (*(void *)v50) {
              BOOL v59 = v58 >= 0x1C;
            }
            else {
              BOOL v59 = 0;
            }
            if (!v59)
            {
              BOOL v60 = v58 < 0x15;
              v52 |= v60;
              v56 &= v60;
              goto LABEL_102;
            }
            if (v266)
            {
              unsigned int v61 = (v57 >> 4) ^ (v57 >> 9);
              unsigned int v62 = v61 & v54;
              uint64_t v63 = v264[2 * (v61 & v54)];
              if (v57 == v63)
              {
LABEL_91:
                int v51 = 1;
                goto LABEL_102;
              }
              int v66 = 1;
              while (v63 != -4096)
              {
                unsigned int v67 = v62 + v66++;
                unsigned int v62 = v67 & v54;
                uint64_t v63 = v264[2 * v62];
                if (v57 == v63) {
                  goto LABEL_91;
                }
              }
              if (!v255)
              {
LABEL_101:
                char v56 = 0;
                goto LABEL_102;
              }
            }
            else
            {
              if (!v255) {
                goto LABEL_101;
              }
              unsigned int v61 = (v57 >> 4) ^ (v57 >> 9);
            }
            unsigned int v64 = v61 & v55;
            uint64_t v65 = *(void *)(v254[0] + 16 * v64);
            if (v57 != v65)
            {
              int v68 = 1;
              while (v65 != -4096)
              {
                unsigned int v69 = v64 + v68++;
                unsigned int v64 = v69 & v55;
                uint64_t v65 = *(void *)(v254[0] + 16 * v64);
                if (v57 == v65) {
                  goto LABEL_95;
                }
              }
              goto LABEL_101;
            }
LABEL_95:
            int v52 = 1;
LABEL_102:
            v50 += 32;
            if (v50 == v53) {
              goto LABEL_110;
            }
            continue;
          }
        }
        uint64_t v49 = v48 & 0x7FFFFFF;
        uint64_t v50 = v47 - 32 * v49;
        if (v49) {
          goto LABEL_83;
        }
LABEL_109:
        int v52 = 0;
        int v51 = 0;
        char v56 = 1;
LABEL_110:
        uint64_t v70 = 0;
        int v71 = *(unsigned __int8 *)(v47 + 16);
        if (j && v71 == 60)
        {
          uint64_t v72 = **(void **)(v47 - 32);
          unsigned int v73 = *(_DWORD *)(v72 + 8);
          if ((v73 & 0xFE) == 0x12) {
            unsigned int v73 = *(_DWORD *)(**(void **)(v72 + 16) + 8);
          }
          BOOL v74 = 0;
          unsigned int v75 = v73 >> 8;
          if (v75 == 2 || v75 == 64) {
            goto LABEL_155;
          }
          if (v75 != 3 || v236 >= 2) {
            uint64_t v70 = 0;
          }
          else {
            uint64_t v70 = v47;
          }
        }
        BOOL v74 = v70 == 0;
        if ((v56 & v74) == 0) {
          goto LABEL_155;
        }
        uint64_t v77 = (v71 - 33);
        if (v77 <= 0x37)
        {
          int v78 = v297;
          if (((1 << v77) & 0x8000000000041) != 0)
          {
            uint64_t v84 = *(void *)(v47 + 64);
            if (!v84 || (*(unsigned char *)(v84 + 20) & 4) == 0 && (*(unsigned char *)(v84 + 17) & 0x10) == 0)
            {
              if ((LODWORD(v250[0]) = 7, sub_1CC5CB59C(v47, (__int32 *)v250, 1uLL))
                && ((uint64_t v119 = *(void *)(v47 - 32)) == 0
                 || *(unsigned char *)(v119 + 16)
                 || *(void *)(v119 + 24) != *(void *)(v47 + 72)
                 || *(_DWORD *)(v119 + 36) != 7)
                || (llvm::CallBase::hasFnAttrOnCalledFunction(v47, 66) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v47, 44) & 1) == 0)
              {
LABEL_138:
                int v85 = *(unsigned __int8 *)(v47 + 16);
                if (v85 != 65 && v85 != 60 || v78) {
                  goto LABEL_153;
                }
              }
            }
          }
          else if (((1 << v77) & 0x808001C8000010) != 0 || v77 == 28 && (*(_WORD *)(v47 + 18) & 0x301) != 0)
          {
            goto LABEL_138;
          }
        }
        int v79 = v249;
        int v80 = *((unsigned __int8 *)v249 + 16);
        BOOL v74 = 1;
        uint64_t v81 = (v80 - 33);
        if (v81 > 0x37) {
          goto LABEL_154;
        }
        int v82 = HIBYTE(v296);
        int v83 = v297;
        if (((1 << (v80 - 33)) & 0x8000000000041) != 0)
        {
          uint64_t v86 = *((void *)v249 + 8);
          if (v86 && (*(unsigned char *)(v86 + 17) & 0x30) != 0) {
            goto LABEL_154;
          }
          int v87 = *((_DWORD *)v249 + 5);
          if (v87 < 0
            && (uint64_t v120 = (char *)v249 - 32 * (v87 & 0x7FFFFFF),
                uint64_t v123 = *((void *)v120 - 1),
                uint64_t v121 = v120 - 8,
                (uint64_t v122 = v123) != 0))
          {
            uint64_t v124 = -v122;
            while (1)
            {
              unsigned int v125 = *(_DWORD *)(*(void *)&v121[v124] + 8);
              BOOL v96 = v125 > 7;
              int v126 = (1 << v125) & 0x83;
              if (v96 || v126 == 0) {
                break;
              }
              v124 += 16;
              if (!v124) {
                goto LABEL_145;
              }
            }
          }
          else
          {
LABEL_145:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v249, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v79, 44) & 1) != 0)
            {
              goto LABEL_151;
            }
            int v80 = *((unsigned __int8 *)v79 + 16);
          }
LABEL_148:
          if ((v80 == 65 || v80 == 61) && !(v83 | v82))
          {
LABEL_151:
            BOOL v74 = 1;
LABEL_154:
            char v56 = 1;
            goto LABEL_155;
          }
LABEL_153:
          char v56 = *((unsigned char *)v249 + 16) == 84;
          BOOL v74 = 1;
          goto LABEL_155;
        }
        if (v81 == 27)
        {
          if ((*((_WORD *)v249 + 9) & 0x301) == 0) {
            goto LABEL_154;
          }
          goto LABEL_153;
        }
        char v56 = 1;
        if (((1 << (v80 - 33)) & 0x808001D0000010) != 0) {
          goto LABEL_148;
        }
LABEL_155:
        size_t v88 = v249;
        BOOL v237 = v74;
        if (*((unsigned char *)v249 + 16) != 84
          || (uint64_t v89 = *((void *)v249 - 4)) == 0
          || *(unsigned char *)(v89 + 16)
          || *(void *)(v89 + 24) != *((void *)v249 + 9)
          || (*(unsigned char *)(v89 + 33) & 0x20) == 0)
        {
          uint64_t v90 = 0;
          unsigned int v91 = 1;
          goto LABEL_161;
        }
        unsigned int v91 = 0;
        int v108 = *(_DWORD *)(v89 + 36);
        int v99 = 1;
        if (v108 <= 1995)
        {
          if (v108 <= 1993)
          {
            if ((v108 - 1992) < 2) {
              goto LABEL_226;
            }
            if (v108 != 1838)
            {
              uint64_t v90 = v249;
              if (v108 != 1989) {
                goto LABEL_161;
              }
LABEL_226:
              unsigned int v91 = 1;
            }
LABEL_249:
            BOOL v100 = v236 > 1;
LABEL_186:
            if ((v56 & 1) != 0 && !v100)
            {
              if (v237 && (size_t v109 = v249, v110 = *((unsigned __int8 *)v249 + 16), (v110 - 73) >= 2))
              {
                if ((v110 - 79) >= 0xFFFFFFF3)
                {
                  if (llvm::CastInst::isNoopCast(v249, (const llvm::DataLayout *)(*(void *)(*(void *)(*((void *)v249 + 5) + 56) + 40) + 272)))
                  {
                    goto LABEL_208;
                  }
                  size_t v109 = v249;
                }
                else if (v110 == 89)
                {
                  if (*(unsigned __int8 *)(*((void *)v249 - 4) + 16) <= 0x14u) {
                    goto LABEL_208;
                  }
                }
                else if (v110 == 62 && (llvm::GetElementPtrInst::hasAllZeroIndices(v249) & 1) != 0)
                {
                  goto LABEL_208;
                }
                if (v51)
                {
                  sub_1CC88679C((int32x2_t *)&v253, (uint64_t)v109);
                  size_t v109 = v249;
                }
                uint64_t v251 = v109;
                uint64_t v252 = v91 != 0;
                int64_t v111 = (uint64_t **)v254;
              }
              else
              {
LABEL_208:
                if ((v51 & 1) == 0)
                {
                  uint64_t v251 = v249;
                  uint64_t v252 = v91;
                  sub_1CD645E10((uint64_t)v250, (uint64_t)&v264, &v251, &v252);
                  sub_1CC04D4E0((uint64_t)&v283, (uint64_t *)&v249);
                  goto LABEL_318;
                }
                uint64_t v251 = v249;
                uint64_t v252 = v91;
                int64_t v111 = &v264;
              }
              sub_1CD645E10((uint64_t)v250, (uint64_t)v111, &v251, &v252);
              goto LABEL_318;
            }
          }
LABEL_188:
          char v238 = 1;
          goto LABEL_189;
        }
        if (v108 > 2011)
        {
          if (v108 == 2470 || v108 == 2447) {
            goto LABEL_226;
          }
          uint64_t v90 = v249;
          if (v108 != 2012) {
            goto LABEL_161;
          }
LABEL_225:
          LOBYTE(v91) = 1;
          int v99 = v240;
          goto LABEL_188;
        }
        if ((v108 - 1996) >= 2)
        {
          uint64_t v90 = v249;
          BOOL v100 = v236 > 1;
          if (v108 == 2011) {
            goto LABEL_186;
          }
LABEL_161:
          if (llvm::Instruction::mayHaveSideEffects(v249))
          {
            if (v236 <= 1)
            {
              int v92 = *((unsigned __int8 *)v88 + 16);
              if (v92 != 65)
              {
                unsigned int v91 = 0;
LABEL_175:
                int v99 = v240;
                BOOL v100 = v92 != 61;
                goto LABEL_186;
              }
              uint64_t v93 = *((_WORD *)v88 + 9) >> 4;
              if (v93 > 0xA) {
                unsigned int v91 = 1;
              }
              else {
                unsigned int v91 = byte_1CFB272A4[v93];
              }
              if (*((void *)v88 + 1)) {
                goto LABEL_175;
              }
LABEL_185:
              BOOL v100 = 0;
              int v99 = v240;
              goto LABEL_186;
            }
LABEL_171:
            LOBYTE(v91) = 0;
            char v238 = 1;
            int v99 = v240;
            goto LABEL_189;
          }
          int v94 = *((unsigned __int8 *)v88 + 16);
          if ((v94 - 29) < 0xB) {
            goto LABEL_171;
          }
          unsigned int v95 = v94 - 59;
          BOOL v96 = v95 > 0x23;
          uint64_t v97 = (1 << v95) & 0x801000001;
          if (!v96 && v97 != 0) {
            goto LABEL_171;
          }
          uint64_t v101 = *(void *)v88;
          if (*(void *)v88)
          {
            if ((*(_DWORD *)(v101 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*(void *)(v101 + 24) + 8) == 269) {
              goto LABEL_171;
            }
          }
          if (*((unsigned char *)v88 + 16) == 84
            && (uint64_t v102 = *((void *)v88 - 4)) != 0
            && !*(unsigned char *)(v102 + 16)
            && *(void *)(v102 + 24) == *((void *)v88 + 9))
          {
            uint64_t v113 = *(void *)(v102 + 112);
            if (v113) {
              LODWORD(v113) = *(unsigned char *)(v113 + 19) & 1;
            }
            if ((v91 | v113)) {
              goto LABEL_184;
            }
          }
          else if (v91)
          {
LABEL_184:
            unsigned int v91 = 0;
            goto LABEL_185;
          }
          unsigned int v91 = 0;
          int v114 = *(_DWORD *)(*((void *)v90 - 4) + 36);
          if ((v114 - 1281) >= 0x191)
          {
            char v238 = 1;
            int v115 = v114 - 1822;
            int v99 = v240;
            BOOL v100 = 0;
            switch(v115)
            {
              case 0:
              case 200:
              case 201:
              case 202:
              case 203:
              case 204:
              case 205:
              case 206:
              case 208:
              case 209:
              case 210:
              case 211:
              case 213:
              case 214:
              case 215:
              case 216:
              case 217:
              case 218:
              case 219:
              case 220:
              case 221:
              case 222:
              case 224:
              case 225:
              case 226:
              case 227:
              case 229:
              case 230:
              case 231:
              case 232:
              case 233:
              case 234:
              case 235:
              case 236:
              case 237:
              case 238:
              case 240:
              case 241:
              case 242:
              case 243:
              case 245:
              case 246:
              case 247:
              case 248:
              case 249:
              case 250:
              case 251:
              case 252:
              case 253:
              case 254:
              case 256:
              case 257:
              case 258:
              case 259:
              case 261:
              case 262:
              case 263:
                goto LABEL_186;
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 129:
              case 130:
              case 131:
              case 132:
              case 133:
              case 134:
              case 135:
              case 136:
              case 137:
              case 138:
              case 139:
              case 140:
              case 141:
              case 142:
              case 143:
              case 144:
              case 145:
              case 146:
              case 147:
              case 148:
              case 149:
              case 150:
              case 151:
              case 152:
              case 153:
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 181:
              case 183:
              case 185:
              case 186:
              case 187:
              case 188:
              case 189:
              case 190:
              case 191:
              case 192:
              case 193:
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 207:
              case 212:
              case 223:
              case 228:
              case 239:
              case 244:
              case 255:
              case 260:
              case 264:
              case 265:
              case 266:
              case 267:
              case 268:
              case 269:
              case 270:
              case 271:
              case 272:
              case 273:
              case 274:
              case 275:
              case 276:
              case 277:
              case 278:
              case 279:
              case 280:
              case 281:
              case 282:
              case 283:
              case 284:
              case 285:
              case 286:
              case 287:
              case 288:
              case 289:
              case 290:
              case 291:
              case 292:
              case 309:
              case 310:
                goto LABEL_189;
              case 9:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 168:
              case 169:
              case 176:
              case 177:
              case 179:
              case 184:
              case 293:
              case 294:
              case 295:
              case 296:
              case 297:
              case 298:
              case 299:
              case 300:
              case 301:
              case 302:
              case 303:
              case 304:
              case 305:
              case 306:
              case 307:
              case 308:
              case 311:
                unsigned int v91 = 0;
                int v99 = v240;
                goto LABEL_249;
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
                if (v236 > 1) {
                  goto LABEL_171;
                }
                uint64_t v116 = *((void *)v90 - 4 * (*((_DWORD *)v90 + 5) & 0x7FFFFFF));
                uint64_t v117 = (void *)(v116 + 24);
                if (*(_DWORD *)(v116 + 32) >= 0x41u) {
                  uint64_t v117 = (void *)*v117;
                }
                int v99 = v240;
                unsigned int v91 = *(_DWORD *)v117 == 1;
                break;
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
                char v238 = 1;
                int v99 = v240;
                LOBYTE(v91) = v236 < 2;
                goto LABEL_189;
              case 178:
              case 180:
              case 182:
                goto LABEL_225;
              default:
                int v99 = v240;
                goto LABEL_189;
            }
          }
          else
          {
            int v99 = v240;
          }
          BOOL v100 = v91;
          goto LABEL_186;
        }
        LOBYTE(v91) = 0;
        BOOL v112 = v236 > 1;
        if (v240) {
          BOOL v112 = 1;
        }
        int v99 = v240;
        if ((v56 & 1) == 0)
        {
          char v238 = 0;
LABEL_189:
          int v103 = v99;
          char v104 = 0;
          v294 |= v91;
          unint64_t v105 = v249;
          uint64_t v106 = *((unsigned __int8 *)v249 + 16) - 33;
          if (v106 <= 0x37)
          {
            if (((1 << (*((unsigned char *)v249 + 16) - 33)) & 0x8000000000041) == 0)
            {
              if (((1 << (*((unsigned char *)v249 + 16) - 33)) & 0x808001C8000010) == 0)
              {
                if (v106 == 28) {
                  char v104 = (*((_WORD *)v249 + 9) & 0x301) != 0;
                }
                goto LABEL_277;
              }
LABEL_262:
              char v104 = 1;
              goto LABEL_277;
            }
            uint64_t v107 = *((void *)v249 + 8);
            if (!v107 || (*(unsigned char *)(v107 + 20) & 4) == 0 && (*(unsigned char *)(v107 + 17) & 0x10) == 0)
            {
              LODWORD(v250[0]) = 7;
              if (sub_1CC5CB59C((uint64_t)v249, (__int32 *)v250, 1uLL))
              {
                uint64_t v118 = *((void *)v105 - 4);
                if (!v118 || *(unsigned char *)(v118 + 16) || *(void *)(v118 + 24) != *((void *)v105 + 9))
                {
                  char v104 = 1;
                  goto LABEL_277;
                }
                if (*(_DWORD *)(v118 + 36) != 7) {
                  goto LABEL_262;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v105, 66) & 1) == 0)
              {
                char v104 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v105, 44) ^ 1;
                goto LABEL_277;
              }
            }
            char v104 = 0;
          }
LABEL_277:
          char v128 = 0;
          HIBYTE(v296) |= v104;
          unint64_t v129 = v249;
          uint64_t v130 = *((unsigned __int8 *)v249 + 16) - 33;
          if (v130 > 0x37) {
            goto LABEL_288;
          }
          if (((1 << (*((unsigned char *)v249 + 16) - 33)) & 0x8000000000041) == 0)
          {
            if (v130 == 27)
            {
              char v128 = (*((_WORD *)v249 + 9) & 0x301) != 0;
            }
            else if (((1 << (*((unsigned char *)v249 + 16) - 33)) & 0x808001D0000010) != 0)
            {
              goto LABEL_281;
            }
            goto LABEL_288;
          }
          uint64_t v131 = *((void *)v249 + 8);
          if (!v131 || (*(unsigned char *)(v131 + 17) & 0x30) == 0)
          {
            int v132 = *((_DWORD *)v249 + 5);
            if (v132 < 0)
            {
              uint64_t v181 = (char *)v249 - 32 * (v132 & 0x7FFFFFF);
              uint64_t v184 = *((void *)v181 - 1);
              int v182 = v181 - 8;
              uint64_t v183 = v184;
              if (v184)
              {
                uint64_t v185 = -v183;
                while (1)
                {
                  unsigned int v186 = *(_DWORD *)(*(void *)&v182[v185] + 8);
                  BOOL v96 = v186 > 7;
                  int v187 = (1 << v186) & 0x83;
                  if (v96 || v187 == 0) {
                    break;
                  }
                  v185 += 16;
                  if (!v185) {
                    goto LABEL_285;
                  }
                }
LABEL_281:
                char v128 = 1;
LABEL_288:
                v297 |= v128;
                if ((v52 | v51))
                {
                  int v133 = *((_DWORD *)v249 + 5);
                  if ((v133 & 0x40000000) == 0)
                  {
                    uint64_t v134 = v133 & 0x7FFFFFF;
                    uint64_t v135 = (char *)v249 - 32 * v134;
                    if (!v134) {
                      goto LABEL_315;
                    }
LABEL_293:
                    uint64_t v136 = &v135[32 * v134];
                    do
                    {
                      v250[0] = 0;
                      uint64_t v137 = *(void *)v135;
                      if (*(unsigned __int8 *)(*(void *)v135 + 16) <= 0x1Bu) {
                        uint64_t v138 = 0;
                      }
                      else {
                        uint64_t v138 = *(void *)v135;
                      }
                      v250[0] = v138;
                      if (v138)
                      {
                        if (v255)
                        {
                          int v139 = v255 - 1;
                          unsigned int v140 = (v255 - 1) & ((v138 >> 4) ^ (v138 >> 9));
                          uint64_t v141 = *(void *)(v254[0] + 16 * v140);
                          if (v138 == v141)
                          {
LABEL_300:
                            sub_1CC04D4E0((uint64_t)&v256, v250);
                            uint64_t v138 = v250[0];
                          }
                          else
                          {
                            int v144 = 1;
                            while (v141 != -4096)
                            {
                              unsigned int v145 = v140 + v144++;
                              unsigned int v140 = v145 & v139;
                              uint64_t v141 = *(void *)(v254[0] + 16 * (v145 & v139));
                              if (v138 == v141) {
                                goto LABEL_300;
                              }
                            }
                          }
                        }
                        else
                        {
                          uint64_t v138 = v137;
                        }
                        if (v266)
                        {
                          unsigned int v142 = ((v138 >> 4) ^ (v138 >> 9)) & (v266 - 1);
                          uint64_t v143 = v264[2 * v142];
                          if (v138 == v143)
                          {
LABEL_304:
                            sub_1CC04D4E0((uint64_t)&v267, v250);
                          }
                          else
                          {
                            int v146 = 1;
                            while (v143 != -4096)
                            {
                              unsigned int v147 = v142 + v146++;
                              unsigned int v142 = v147 & (v266 - 1);
                              uint64_t v143 = v264[2 * v142];
                              if (v138 == v143) {
                                goto LABEL_304;
                              }
                            }
                          }
                        }
                      }
                      v135 += 32;
                    }
                    while (v135 != v136);
                    goto LABEL_315;
                  }
                  uint64_t v135 = (char *)*((void *)v249 - 1);
                  uint64_t v134 = v133 & 0x7FFFFFF;
                  if (v134) {
                    goto LABEL_293;
                  }
                }
LABEL_315:
                if ((v238 & 1) == 0) {
                  LOBYTE(v296) = 0;
                }
                v240 |= v103;
                goto LABEL_318;
              }
            }
LABEL_285:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v249, 45) & 1) == 0)
            {
              char v128 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v129, 44) ^ 1;
              goto LABEL_288;
            }
          }
          char v128 = 0;
          goto LABEL_288;
        }
        char v238 = 0;
        if (v112) {
          goto LABEL_189;
        }
        if (v292 >= (unint64_t)HIDWORD(v292)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v240 = 0;
        *((void *)v291 + v292) = v249;
        LODWORD(v292) = v292 + 1;
LABEL_318:
        uint64_t v148 = (void *)*v239;
        if ((void *)*v239 != v239)
        {
          if (v148) {
            uint64_t v149 = v148 - 3;
          }
          else {
            uint64_t v149 = 0;
          }
          int v150 = *((unsigned __int8 *)v149 + 16);
          int v151 = v150 - 29;
          if ((v150 - 29) >= 0xB) {
            uint64_t v152 = 0;
          }
          else {
            uint64_t v152 = v149;
          }
          if (v150 != 30)
          {
            unsigned int v153 = 2;
            switch(v151)
            {
              case 1:
LABEL_495:
                __break(1u);
                goto LABEL_496;
              case 2:
                unsigned int v153 = (*((_DWORD *)v149 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_381;
              case 3:
              case 9:
                unsigned int v153 = (*((_DWORD *)v149 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_381;
              case 4:
                goto LABEL_329;
              case 7:
                unsigned int v153 = *((_WORD *)v149 + 9) & 1;
                goto LABEL_381;
              case 8:
                unsigned int v153 = 1;
                goto LABEL_329;
              case 10:
                unsigned int v153 = *((_DWORD *)v149 + 20) + 1;
LABEL_381:
                if (!v153) {
                  continue;
                }
                goto LABEL_329;
              default:
                continue;
            }
          }
          if ((*((_DWORD *)v149 + 5) & 0x7FFFFFF) == 3) {
            unsigned int v153 = 2;
          }
          else {
            unsigned int v153 = 1;
          }
LABEL_329:
          uint64_t v154 = 0;
          unsigned int v155 = v149 - 4;
          uint64_t v156 = v153;
          do
          {
            int v157 = *((unsigned __int8 *)v149 + 16);
            if (v157 == 30)
            {
              uint64_t v158 = (uint64_t)&v155[-4 * v154];
            }
            else
            {
              uint64_t v172 = (v157 - 31);
              uint64_t v158 = (uint64_t)(v149 - 4);
              switch(v172)
              {
                case 1:
                case 7:
                  int v176 = *((_DWORD *)v149 + 5);
                  if ((v176 & 0x40000000) != 0) {
                    uint64_t v177 = (void *)*(v149 - 1);
                  }
                  else {
                    uint64_t v177 = &v152[-4 * (v176 & 0x7FFFFFF)];
                  }
                  size_t v175 = &v177[4 * v154];
                  goto LABEL_364;
                case 2:
                  uint64_t v178 = 0x1FFFFFFFFFFFFFF8;
                  if (!v154) {
                    uint64_t v178 = 0x1FFFFFFFFFFFFFF4;
                  }
                  uint64_t v158 = (uint64_t)&v152[v178];
                  break;
                case 3:
                case 4:
                  goto LABEL_495;
                case 5:
                  uint64_t v179 = *((_DWORD *)v149 + 5) & 0x7FFFFFF;
                  uint64_t v180 = v149 + 4;
                  goto LABEL_377;
                case 6:
                  break;
                case 8:
                  if (v154)
                  {
                    uint64_t v158 = (uint64_t)&v155[4 * v154 - 4 + -4 * *((unsigned int *)v149 + 20)];
                  }
                  else
                  {
                    uint64_t v179 = *((unsigned int *)v149 + 20);
                    uint64_t v180 = v149 - 8;
LABEL_377:
                    uint64_t v158 = (uint64_t)&v180[-4 * v179];
                  }
                  break;
                default:
                  int v173 = *((_DWORD *)v149 + 5);
                  if ((v173 & 0x40000000) != 0) {
                    size_t v174 = (void *)*(v149 - 1);
                  }
                  else {
                    size_t v174 = &v152[-4 * (v173 & 0x7FFFFFF)];
                  }
                  size_t v175 = &v174[4 * (2 * v154)];
LABEL_364:
                  uint64_t v158 = (uint64_t)(v175 + 4);
                  break;
              }
            }
            for (uint64_t k = *(void *)(*(void *)v158 + 48); ; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v160 = k ? k - 24 : 0;
              if (!k || *(unsigned char *)(v160 + 16) != 83) {
                break;
              }
              uint64_t v161 = sub_1CBF73380(k - 24, (uint64_t)v40);
              if (*(unsigned __int8 *)(v161 + 16) <= 0x1Bu) {
                uint64_t v162 = 0;
              }
              else {
                uint64_t v162 = v161;
              }
              v250[0] = v162;
              if (v162)
              {
                if (v255)
                {
                  int v163 = v255 - 1;
                  unsigned int v164 = (v255 - 1) & ((v162 >> 4) ^ (v162 >> 9));
                  uint64_t v165 = *(void *)(v254[0] + 16 * v164);
                  if (v162 == v165)
                  {
LABEL_344:
                    sub_1CC04D4E0((uint64_t)&v256, v250);
                    uint64_t v162 = v250[0];
                  }
                  else
                  {
                    int v168 = 1;
                    while (v165 != -4096)
                    {
                      unsigned int v169 = v164 + v168++;
                      unsigned int v164 = v169 & v163;
                      uint64_t v165 = *(void *)(v254[0] + 16 * (v169 & v163));
                      if (v162 == v165) {
                        goto LABEL_344;
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v162 = v161;
                }
                if (v266)
                {
                  unsigned int v166 = ((v162 >> 4) ^ (v162 >> 9)) & (v266 - 1);
                  uint64_t v167 = v264[2 * v166];
                  if (v162 == v167)
                  {
LABEL_348:
                    sub_1CC04D4E0((uint64_t)&v267, v250);
                  }
                  else
                  {
                    int v170 = 1;
                    while (v167 != -4096)
                    {
                      unsigned int v171 = v166 + v170++;
                      unsigned int v166 = v171 & (v266 - 1);
                      uint64_t v167 = v264[2 * v166];
                      if (v162 == v167) {
                        goto LABEL_348;
                      }
                    }
                  }
                }
              }
            }
            ++v154;
          }
          while (v154 != v156);
        }
      }
      uint64_t v38 = v235;
    }
    while (v235 != v234);
  }
  unsigned int v189 = (uint64_t *)v291;
  if ((_BYTE)v296)
  {
    uint64_t v190 = v233;
    unsigned int v40 = v263;
    if (v292)
    {
      uint64_t v208 = 8 * v292;
      do
      {
        sub_1CC88679C((int32x2_t *)&v253, *v189);
        uint64_t v209 = *v189++;
        uint64_t v251 = (llvm::GetElementPtrInst *)v209;
        uint64_t v252 = 0;
        sub_1CD645E10((uint64_t)v250, (uint64_t)v254, &v251, &v252);
        v208 -= 8;
      }
      while (v208);
    }
  }
  else
  {
    uint64_t v190 = v233;
    unsigned int v40 = v263;
    if (v292)
    {
      uint64_t v191 = (uint64_t *)((char *)v291 + 8 * v292);
      do
      {
        uint64_t v192 = *v189;
        int v193 = *(_DWORD *)(*v189 + 20);
        if ((v193 & 0x40000000) != 0)
        {
          int v195 = *(uint64_t **)(v192 - 8);
          uint64_t v194 = v193 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v194 = v193 & 0x7FFFFFF;
          int v195 = (uint64_t *)(v192 - 32 * v194);
        }
        int v196 = &v195[4 * v194];
        if (v194)
        {
          do
          {
            v250[0] = 0;
            uint64_t v197 = *v195;
            if (*(unsigned __int8 *)(*v195 + 16) <= 0x1Bu) {
              uint64_t v198 = 0;
            }
            else {
              uint64_t v198 = *v195;
            }
            v250[0] = v198;
            if (v198)
            {
              if (v255)
              {
                int v199 = v255 - 1;
                unsigned int v200 = (v255 - 1) & ((v198 >> 4) ^ (v198 >> 9));
                uint64_t v201 = *(void *)(v254[0] + 16 * v200);
                if (v198 == v201)
                {
LABEL_410:
                  sub_1CC04D4E0((uint64_t)&v256, v250);
                  uint64_t v198 = v250[0];
                }
                else
                {
                  int v204 = 1;
                  while (v201 != -4096)
                  {
                    unsigned int v205 = v200 + v204++;
                    unsigned int v200 = v205 & v199;
                    uint64_t v201 = *(void *)(v254[0] + 16 * (v205 & v199));
                    if (v198 == v201) {
                      goto LABEL_410;
                    }
                  }
                }
              }
              else
              {
                uint64_t v198 = v197;
              }
              if (v266)
              {
                unsigned int v202 = ((v198 >> 4) ^ (v198 >> 9)) & (v266 - 1);
                uint64_t v203 = v264[2 * v202];
                if (v198 == v203)
                {
LABEL_414:
                  sub_1CC04D4E0((uint64_t)&v267, v250);
                }
                else
                {
                  int v206 = 1;
                  while (v203 != -4096)
                  {
                    unsigned int v207 = v202 + v206++;
                    unsigned int v202 = v207 & (v266 - 1);
                    uint64_t v203 = v264[2 * v202];
                    if (v198 == v203) {
                      goto LABEL_414;
                    }
                  }
                }
              }
            }
            v195 += 4;
          }
          while (v195 != v196);
        }
        ++v189;
      }
      while (v189 != v191);
    }
  }
  if (v289)
  {
    unint64_t v210 = (char *)v288;
    int v211 = (char *)v288 + 8 * v289;
    do
    {
      uint64_t v212 = *(void *)v210;
      int v213 = *(_DWORD *)(*(void *)v210 + 20);
      if ((v213 & 0x40000000) != 0)
      {
        uint64_t v215 = *(uint64_t **)(v212 - 8);
        uint64_t v214 = v213 & 0x7FFFFFF;
        if (v214)
        {
LABEL_436:
          uint64_t v216 = 32 * v214;
          do
          {
            v250[0] = 0;
            uint64_t v217 = *v215;
            if (*(unsigned __int8 *)(*v215 + 16) <= 0x1Bu) {
              uint64_t v217 = 0;
            }
            v250[0] = v217;
            if (v217) {
              sub_1CC04D4E0((uint64_t)&v256, v250);
            }
            v215 += 4;
            v216 -= 32;
          }
          while (v216);
        }
      }
      else
      {
        uint64_t v214 = v213 & 0x7FFFFFF;
        uint64_t v215 = (uint64_t *)(v212 - 32 * v214);
        if (v214) {
          goto LABEL_436;
        }
      }
      v210 += 8;
    }
    while (v210 != v211);
  }
  uint64_t v218 = &v264[2 * v266];
  if (v265)
  {
    if (v266)
    {
      uint64_t v220 = 16 * v266;
      uint64_t v219 = v264;
      while ((*v219 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v219 += 2;
        v220 -= 16;
        if (!v220) {
          goto LABEL_449;
        }
      }
    }
    else
    {
      uint64_t v219 = v264;
    }
  }
  else
  {
LABEL_449:
    uint64_t v219 = &v264[2 * v266];
  }
  int v221 = &v264[2 * v266];
LABEL_451:
  while (v219 != v221)
  {
    uint64_t v222 = *v219;
    v294 |= *((unsigned char *)v219 + 8);
    int v223 = *(_DWORD *)(v222 + 20);
    if ((v223 & 0x40000000) != 0)
    {
      int v225 = *(uint64_t **)(v222 - 8);
      uint64_t v224 = v223 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v224 = v223 & 0x7FFFFFF;
      int v225 = (uint64_t *)(v222 - 32 * v224);
    }
    BOOL v226 = &v225[4 * v224];
    if (v224)
    {
      while (1)
      {
        v250[0] = 0;
        uint64_t v227 = *v225;
        if (*(unsigned __int8 *)(*v225 + 16) <= 0x1Bu) {
          uint64_t v227 = 0;
        }
        v250[0] = v227;
        if (!v227) {
          goto LABEL_466;
        }
        if (!v266) {
          goto LABEL_465;
        }
        unsigned int v228 = (v266 - 1) & ((v227 >> 4) ^ (v227 >> 9));
        uint64_t v229 = v264[2 * v228];
        if (v227 != v229) {
          break;
        }
LABEL_466:
        v225 += 4;
        if (v225 == v226) {
          goto LABEL_467;
        }
      }
      int v230 = 1;
      while (v229 != -4096)
      {
        unsigned int v231 = v228 + v230++;
        unsigned int v228 = v231 & (v266 - 1);
        uint64_t v229 = v264[2 * v228];
        if (v227 == v229) {
          goto LABEL_466;
        }
      }
LABEL_465:
      sub_1CC04D4E0((uint64_t)&v256, v250);
      goto LABEL_466;
    }
LABEL_467:
    uint64_t v232 = v219 + 2;
    uint64_t v219 = v218;
    if (v232 != v218)
    {
      uint64_t v219 = v232;
      while ((*v219 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v219 += 2;
        if (v219 == v218)
        {
          uint64_t v219 = v218;
          goto LABEL_451;
        }
      }
    }
  }
  sub_1CD3C7F68(&v264);
  sub_1CC8821D4((uint64_t)&v253, v248, v190, v236 < 2);
  if (SHIBYTE(v299) < 0) {
    operator delete((void *)__p);
  }
  if (v291 != v293) {
    free(v291);
  }
  if (v288 != v290) {
    free(v288);
  }
  if ((v283 & 1) == 0) {
LABEL_496:
  }
    MEMORY[0x1D25D9CD0](v284.i64[0], 8);
  if (v280 != v282) {
    free(v280);
  }
  if ((v275 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v276.i64[0], 8);
  }
  if (v272 != v274) {
    free(v272);
  }
  if ((v267 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v268.i64[0], 8);
  }
  MEMORY[0x1D25D9CD0](v264, 8);
  if (v261 != v40) {
    free(v261);
  }
  if ((v256 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v257.i64[0], 8);
  }
  MEMORY[0x1D25D9CD0](v254[0], 8);
  if (v241)
  {
    unsigned int v242 = v241;
    operator delete(v241);
  }
  if (SHIBYTE(v245) < 0) {
    operator delete(v244[0]);
  }
}

uint64_t sub_1CC8821D4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = (uint64_t ***)a2;
  uint64_t v6 = result;
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v8 = *(unsigned int *)(result + 112);
    if (v8)
    {
      unsigned int v9 = 0;
      uint64_t v10 = *(uint64_t ***)(result + 104);
      uint64_t v11 = 8 * v8;
      while (1)
      {
        sub_1CC886AA0(**v10, *(_DWORD *)(v6 + 744));
        if (!v12) {
          break;
        }
        int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v12);
        if (v13 == 1) {
        v9 += (PrimitiveSizeInBits + 31) & 0xFFFFFFE0;
        }
        if (v9 >= 0x620) {
          break;
        }
        ++v10;
        v11 -= 8;
        if (!v11) {
          goto LABEL_29;
        }
      }
      sub_1CD54329C((void *)(v6 + 32));
      uint64_t v15 = *(void *)(v6 + 8);
      *(_DWORD *)(v6 + 112) = 0;
      uint64_t v16 = *(unsigned int *)(v6 + 24);
      uint64_t v17 = v15 + 16 * v16;
      if (*(_DWORD *)(v6 + 16))
      {
        if (v16)
        {
          uint64_t v19 = 16 * v16;
          uint64_t v18 = v15;
          while ((*(void *)v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v18 += 16;
            v19 -= 16;
            if (!v19) {
              goto LABEL_19;
            }
          }
        }
        else
        {
          uint64_t v18 = v15;
        }
      }
      else
      {
LABEL_19:
        uint64_t v18 = v15 + 16 * v16;
      }
      uint64_t v20 = v15 + 16 * v16;
      if (v18 != v20)
      {
        int v21 = *(unsigned __int8 *)(v6 + 712);
        do
        {
          v21 |= *(unsigned char *)(v18 + 8) & 1;
          *(unsigned char *)(v6 + 712) = v21;
          uint64_t v22 = v18 + 16;
          uint64_t v18 = v17;
          if (v22 != v17)
          {
            uint64_t v18 = v22;
            do
            {
              if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                goto LABEL_27;
              }
              v18 += 16;
            }
            while (v18 != v17);
            uint64_t v18 = v17;
          }
LABEL_27:
          ;
        }
        while (v18 != v20);
      }
      sub_1CD3C7F68((_DWORD *)(v6 + 8));
    }
LABEL_29:
    uint64_t v5 = (uint64_t ***)a2;
    uint64_t v53 = *(llvm::ValueHandleBase **)(a2 + 40);
    uint64_t v23 = 2;
    uint64_t v24 = a2 + 72;
    do
    {
      uint64_t v24 = *(void *)(v24 + 8);
      --v23;
    }
    while (v24 != a2 + 72);
    if (!v23)
    {
      uint64_t v25 = *(void *)(a2 + 80);
      uint64_t v26 = v25 ? v25 - 24 : 0;
      uint64_t v27 = v26 + 40;
      uint64_t v28 = *(unsigned int *)(v6 + 16) + 2;
      uint64_t v29 = v27;
      do
      {
        uint64_t v29 = *(void *)(v29 + 8);
        --v28;
      }
      while (v29 != v27);
      if (!v28) {
        *(unsigned char *)(v6 + 713) = 0;
      }
    }
    uint64_t v30 = *(unsigned int *)(v6 + 112);
    if (v30)
    {
      v54[0] = &v55;
      v54[1] = (void *)0x400000000;
      uint64_t v32 = *(uint64_t ***)(v6 + 104);
      uint64_t v33 = 8 * v30;
      do
      {
        sub_1CC886AA0(**v32, *(_DWORD *)(v6 + 744));
        if (LODWORD(v54[1]) >= (unint64_t)HIDWORD(v54[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v54[0] + LODWORD(v54[1])) = v34;
        unsigned int v35 = ++LODWORD(v54[1]);
        ++v32;
        v33 -= 8;
      }
      while (v33);
      uint64_t v5 = (uint64_t ***)a2;
      if (!*(unsigned char *)(v6 + 713)) {
        goto LABEL_53;
      }
    }
    else
    {
      if (!*(unsigned char *)(v6 + 713)) {
        goto LABEL_41;
      }
      unsigned int v35 = 0;
      v54[0] = &v55;
      v54[1] = (void *)0x400000000;
    }
    if (v35 >= HIDWORD(v54[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v54[0] + v35) = ***v5 + 1960;
    unsigned int v36 = LODWORD(v54[1]) + 1;
    LODWORD(v54[1]) = v36;
    if (v36 >= HIDWORD(v54[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v54[0] + v36) = ***v5 + 1960;
    unsigned int v35 = ++LODWORD(v54[1]);
    *(unsigned char *)(v6 + 712) = 1;
LABEL_53:
    char v31 = (uint64_t **)llvm::StructType::get(**v5, (uint64_t)v54[0], v35, 0);
    if (v54[0] != &v55) {
      free(v54[0]);
    }
LABEL_55:
    char v37 = (llvm::PointerType *)llvm::FunctionType::get(v31, 0, 0, 0);
    if ((*((unsigned char *)v5 + 23) & 0x10) != 0)
    {
      uint64_t v38 = ***v5;
      uint64_t v39 = *(void *)(v38 + 152);
      uint64_t v40 = *(unsigned int *)(v38 + 168);
      if (v40)
      {
        LODWORD(v41) = (v40 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
        int v43 = *v42;
        if (*v42 != v5)
        {
          int v44 = 1;
          do
          {
            if (v43 == (uint64_t ***)-4096) {
              goto LABEL_62;
            }
            int v45 = v41 + v44++;
            uint64_t v41 = v45 & (v40 - 1);
            int v43 = *(uint64_t ****)(v39 + 16 * v41);
          }
          while (v43 != v5);
          unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
        }
      }
      else
      {
LABEL_62:
        unsigned int v42 = (uint64_t ****)(v39 + 16 * v40);
      }
      uint64_t v46 = v42[1];
      uint64_t v49 = *v46;
      uint64_t v47 = (char *)(v46 + 2);
      int v48 = v49;
    }
    else
    {
      int v48 = 0;
      uint64_t v47 = &byte_1CFBCE98E;
    }
    uint64_t v50 = ".thread_invariants";
    LOWORD(v56) = 773;
    if (a4) {
      uint64_t v50 = ".sample_invariants";
    }
    v54[0] = v47;
    v54[1] = v48;
    *(void *)&long long v55 = v50;
    if (a4) {
      __int16 v51 = 1680;
    }
    else {
      __int16 v51 = 1600;
    }
    int v52 = operator new(0x80uLL);
    *((_DWORD *)v52 + 7) = *((_DWORD *)v52 + 7) & 0x38000000 | 0x40000000;
    *(void *)int v52 = 0;
    llvm::Function::Function((unint64_t *)v52 + 1, v37, 0, (llvm::Type *)0xFFFFFFFFLL, (const char **)v54, (unint64_t)v53);
    *((_WORD *)v52 + 13) = *((_WORD *)v52 + 13) & 0xC00F | v51;
    v54[0] = "entry";
    LOWORD(v56) = 259;
    operator new();
  }
  if (*(_DWORD *)(result + 16))
  {
    uint64_t v53 = *(llvm::ValueHandleBase **)(a2 + 40);
LABEL_41:
    char v31 = (uint64_t **)(***v5 + 1576);
    goto LABEL_55;
  }
  return result;
}

void sub_1CC88679C(int32x2_t *a1, uint64_t a2)
{
  v32[32] = *MEMORY[0x1E4F143B8];
  uint64_t v30 = v32;
  uint64_t v31 = 0x1000000000;
  uint64_t v26 = v29;
  unsigned int v28 = 4;
  v29[0] = a2;
  long long v3 = (uint64_t *)&a1[23];
  uint64_t v4 = (uint64_t)&a1[64];
  uint64_t v5 = (uint64_t)&a1[26];
  uint64_t v21 = (uint64_t)&a1[4];
  unsigned int v6 = 1;
  do
  {
    while (1)
    {
      uint64_t v7 = *((void *)v26 + --v6);
      unsigned int v27 = v6;
      int v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0) {
        break;
      }
      uint64_t v9 = v8 & 0x7FFFFFF;
      uint64_t v10 = (uint64_t *)(v7 - 32 * v9);
      if (v9) {
        goto LABEL_7;
      }
LABEL_4:
      if (!v6) {
        goto LABEL_22;
      }
    }
    uint64_t v10 = *(uint64_t **)(v7 - 8);
    uint64_t v9 = v8 & 0x7FFFFFF;
    if (!v9) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v11 = 32 * v9;
    do
    {
      uint64_t v22 = 0;
      uint64_t v12 = *v10;
      if (*(unsigned __int8 *)(*v10 + 16) <= 0x1Bu) {
        uint64_t v12 = 0;
      }
      uint64_t v22 = v12;
      if (v12)
      {
        uint64_t v24 = v12;
        v23[0] = 0;
        if (sub_1CD3C8538(v3, &v24, v23))
        {
          uint64_t v13 = v23[0];
          if (v23[0] != *(void *)&a1[23] + 16 * a1[25].u32[0])
          {
            sub_1CD645EAC(v4, &v22);
            uint64_t v14 = *(unsigned __int8 *)(v13 + 8);
            if (v31 >= (unint64_t)HIDWORD(v31)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v15 = (char *)v30 + 16 * v31;
            *uint64_t v15 = v22;
            v15[1] = v14;
            LODWORD(v31) = v31 + 1;
            if (v27 >= (unint64_t)v28) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v26 + v27++) = v22;
            *(void *)uint64_t v13 = -8192;
            a1[24] = vadd_s32(a1[24], (int32x2_t)0x1FFFFFFFFLL);
            if (sub_1CD645EAC(v5, &v22)) {
              sub_1CC04D4E0(v21, &v22);
            }
          }
        }
      }
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    unsigned int v6 = v27;
  }
  while (v27);
LABEL_22:
  unsigned int v16 = v31;
  if (v31)
  {
    uint64_t v17 = (uint64_t)&a1[1];
    do
    {
      uint64_t v18 = (char *)v30 + 16 * v16;
      uint64_t v20 = *((void *)v18 - 2);
      uint64_t v19 = *((void *)v18 - 1);
      LODWORD(v31) = v16 - 1;
      uint64_t v24 = v20;
      uint64_t v25 = v19 & 1;
      sub_1CD645E10((uint64_t)v23, v17, &v24, &v25);
      unsigned int v16 = v31;
    }
    while (v31);
  }
  if (v26 != v29) {
    free(v26);
  }
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t sub_1CC886A4C(_DWORD *a1, void *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1CC04D62C((uint64_t)a1, a2, &v5);
  if (result)
  {
    *uint64_t v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

double sub_1CC886AA0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 8) != 269
    && (a2 - 27) >= 3
    && *(_DWORD *)(a1 + 8)
    && (*(_DWORD *)(a1 + 8) & 0xFE) == 0x12
    && !*(unsigned char *)(*(void *)(a1 + 24) + 8))
  {
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(void **)a1 + 1672), (llvm::Type *)*(unsigned int *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1CC886B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 == 73)
  {
    uint64_t result = sub_1CC886B14(*(void *)(a1 - 32), a2);
    if (result)
    {
      uint64_t v9 = a1;
      sub_1CC04D4E0(a2, &v9);
      return 1;
    }
  }
  else
  {
    if (v5 == 60)
    {
      uint64_t v7 = *(unsigned __int8 **)(a1 - 32);
      int v8 = *(_DWORD *)(*(void *)v7 + 8);
      if ((v8 & 0xFE) == 0x12) {
        int v8 = *(_DWORD *)(**(void **)(*(void *)v7 + 16) + 8);
      }
      if ((v8 & 0xFFFFFF00) == 0x4000 && v7[16] <= 0x14u)
      {
        uint64_t v9 = a1;
        sub_1CC04D4E0(a2, &v9);
        a3 = 1;
      }
      else
      {
        a3 = 0;
      }
    }
    return (v5 == 60) & a3;
  }
  return result;
}

uint64_t sub_1CC886BEC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (llvm::Instruction *)result;
  if (result && *(unsigned char *)(result + 16) == 73) {
    uint64_t result = sub_1CC886BEC(*(void *)(result - 32), a2, a3, a4, a5, a6);
  }
  size_t v88 = v11;
  uint64_t v12 = a5 + 8;
  if (*(unsigned char *)a5)
  {
    int v13 = 8;
  }
  else
  {
    int v13 = *(_DWORD *)(a5 + 16);
    if (!v13)
    {
LABEL_13:
      sub_1CC04D4E0(a5, (uint64_t *)&v88);
      uint64_t v19 = (llvm::Value *)llvm::Instruction::clone(v88);
      uint64_t v20 = v19;
      if ((*((unsigned char *)v88 + 23) & 0x10) != 0)
      {
        uint64_t v21 = ***(void ***)v88;
        uint64_t v22 = *(void *)(v21 + 152);
        uint64_t v23 = *(unsigned int *)(v21 + 168);
        if (v23)
        {
          LODWORD(v24) = (v23 - 1) & ((v88 >> 4) ^ (v88 >> 9));
          uint64_t v25 = v22 + 16 * v24;
          uint64_t v26 = *(llvm::Instruction **)v25;
          if (*(llvm::Instruction **)v25 != v88)
          {
            int v27 = 1;
            do
            {
              if (v26 == (llvm::Instruction *)-4096) {
                goto LABEL_20;
              }
              int v28 = v24 + v27++;
              uint64_t v24 = v28 & (v23 - 1);
              uint64_t v26 = *(llvm::Instruction **)(v22 + 16 * v24);
            }
            while (v26 != v88);
            uint64_t v25 = v22 + 16 * v24;
          }
        }
        else
        {
LABEL_20:
          uint64_t v25 = v22 + 16 * v23;
        }
        uint64_t v29 = *(void *)(v25 + 8);
        uint64_t v30 = *(void *)v29;
        LOWORD(v94) = 773;
        uint64_t v90 = (const char *)(v29 + 16);
        uint64_t v91 = v30;
        int v92 = ".clone";
        llvm::Value::setNameImpl(v19, &v90);
        if (v20 && !*((unsigned char *)v20 + 16))
        {
          if ((*((unsigned char *)v20 + 23) & 0x10) == 0) {
            goto LABEL_100;
          }
          uint64_t v74 = ***(void ***)v20;
          uint64_t v75 = *(void *)(v74 + 152);
          uint64_t v76 = *(unsigned int *)(v74 + 168);
          if (v76)
          {
            LODWORD(v77) = (v76 - 1) & ((v20 >> 4) ^ (v20 >> 9));
            int v78 = (llvm::Value **)(v75 + 16 * v77);
            int v79 = *v78;
            if (*v78 != v20)
            {
              int v80 = 1;
              do
              {
                if (v79 == (llvm::Value *)-4096) {
                  goto LABEL_92;
                }
                int v81 = v77 + v80++;
                uint64_t v77 = v81 & (v76 - 1);
                int v79 = *(llvm::Value **)(v75 + 16 * v77);
              }
              while (v79 != v20);
              int v78 = (llvm::Value **)(v75 + 16 * v77);
            }
          }
          else
          {
LABEL_92:
            int v78 = (llvm::Value **)(v75 + 16 * v76);
          }
          int v82 = v78[1];
          unint64_t v85 = *(void *)v82;
          int v83 = (char *)v82 + 16;
          unint64_t v84 = v85;
          if (v85 >= 5 && (*(_DWORD *)v83 == *(_DWORD *)"llvm." ? (BOOL v86 = v83[4] == aLlvm_1[4]) : (BOOL v86 = 0), v86))
          {
            *((_DWORD *)v20 + 8) |= 0x2000u;
            int v87 = llvm::Function::lookupIntrinsicID(v83, v84);
          }
          else
          {
LABEL_100:
            int v87 = 0;
            *((_DWORD *)v20 + 8) &= ~0x2000u;
          }
          *((_DWORD *)v20 + 9) = v87;
        }
      }
      uint64_t v31 = (uint64_t *)(a2 + 40);
      *((void *)v20 + 5) = a2;
      *(_WORD *)(a2 + 18) &= ~0x8000u;
      if ((*((unsigned char *)v20 + 23) & 0x10) != 0)
      {
        uint64_t v60 = *(void *)(a2 + 56);
        if (v60)
        {
          unsigned int v61 = *(llvm::ValueSymbolTable **)(v60 + 104);
          if (v61) {
            llvm::ValueSymbolTable::reinsertValue(v61, v20);
          }
        }
      }
      uint64_t v32 = *v31;
      *((void *)v20 + 3) = *v31;
      *((void *)v20 + 4) = v31;
      *(void *)(v32 + 8) = (char *)v20 + 24;
      *uint64_t v31 = (uint64_t)v20 + 24;
      uint64_t v91 = 2;
      int v92 = 0;
      uint64_t v93 = v88;
      if (v88 != (llvm::Instruction *)-8192 && v88 != (llvm::Instruction *)-4096 && v88) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v91);
      }
      uint64_t v90 = (const char *)&unk_1F2615EC8;
      uint64_t v94 = a6;
      uint64_t v33 = sub_1CC4CFF80(a6, &v90);
      if (v93 != (llvm::Instruction *)-8192 && v93 != (llvm::Instruction *)-4096 && v93)
      {
        unint64_t v34 = v91 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v91 & 0xFFFFFFFFFFFFFFF8) = v92;
        if (v92)
        {
          *(void *)int v92 = *(void *)v92 & 7 | v34;
        }
        else
        {
          unsigned int v35 = v93;
          unsigned int v36 = ***(int32x2_t ****)v93;
          unint64_t v37 = (unint64_t)v36[303];
          if (v37 <= v34)
          {
            uint64_t v38 = v36[305].u32[0];
            if (v37 + 16 * v38 > v34)
            {
              unsigned int v39 = v38 - 1;
              LODWORD(v40) = v39 & ((v93 >> 4) ^ (v93 >> 9));
              uint64_t v41 = (llvm::Instruction **)(v37 + 16 * v40);
              unsigned int v42 = *v41;
              if (v93 != *v41)
              {
                int v43 = 1;
                do
                {
                  if (v42 == (llvm::Instruction *)-4096) {
                    goto LABEL_40;
                  }
                  int v44 = v40 + v43++;
                  uint64_t v40 = v44 & v39;
                  unsigned int v42 = *(llvm::Instruction **)(v37 + 16 * v40);
                }
                while (v93 != v42);
                uint64_t v41 = (llvm::Instruction **)(v37 + 16 * v40);
              }
              *uint64_t v41 = (llvm::Instruction *)-8192;
              v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
              unsigned int v35 = v93;
LABEL_40:
              *((unsigned char *)v35 + 17) &= ~1u;
            }
          }
        }
      }
      int v45 = (llvm::Value *)v33[7];
      if (v45 != v20)
      {
        if (v45 && v45 != (llvm::Value *)-8192 && v45 != (llvm::Value *)-4096)
        {
          unint64_t v62 = v33[5] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v62 = v33[6];
          uint64_t v63 = (unint64_t *)v33[6];
          if (v63)
          {
            *uint64_t v63 = *v63 & 7 | v62;
          }
          else
          {
            uint64_t v64 = v33[7];
            uint64_t v65 = ***(int32x2_t ****)v64;
            unint64_t v66 = (unint64_t)v65[303];
            if (v66 <= v62)
            {
              uint64_t v67 = v65[305].u32[0];
              if (v66 + 16 * v67 > v62)
              {
                unsigned int v68 = v67 - 1;
                LODWORD(v69) = v68 & ((v64 >> 4) ^ (v64 >> 9));
                uint64_t v70 = (uint64_t *)(v66 + 16 * v69);
                uint64_t v71 = *v70;
                if (v64 != *v70)
                {
                  int v72 = 1;
                  do
                  {
                    if (v71 == -4096) {
                      goto LABEL_83;
                    }
                    int v73 = v69 + v72++;
                    uint64_t v69 = v73 & v68;
                    uint64_t v71 = *(void *)(v66 + 16 * v69);
                  }
                  while (v64 != v71);
                  uint64_t v70 = (uint64_t *)(v66 + 16 * v69);
                }
                *uint64_t v70 = -8192;
                v65[304] = vadd_s32(v65[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v64 = v33[7];
LABEL_83:
                *(unsigned char *)(v64 + 17) &= ~1u;
              }
            }
          }
        }
        v33[7] = v20;
        if (v20 != (llvm::Value *)-8192 && v20 != (llvm::Value *)-4096 && v20) {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v33 + 5));
        }
      }
      uint64_t v46 = *((void *)v88 + 1);
      if (!v46) {
LABEL_67:
      }
        operator new();
      uint64_t v47 = (void *)((char *)v20 + 8);
      while (1)
      {
        uint64_t v48 = v46;
        uint64_t v49 = v46 + 8;
        uint64_t v46 = *(void *)(v46 + 8);
        uint64_t v50 = *(const char **)(v49 + 16);
        uint64_t v89 = 0;
        uint64_t v90 = v50;
        if (sub_1CD3C8538(a3, &v90, &v89))
        {
          if (*(unsigned char *)a4)
          {
            int v51 = 8;
            uint64_t v52 = a4 + 8;
          }
          else
          {
            int v51 = *(_DWORD *)(a4 + 16);
            if (!v51) {
              goto LABEL_60;
            }
            uint64_t v52 = *(void *)(a4 + 8);
          }
          int v53 = v51 - 1;
          unsigned int v54 = v53 & ((v50 >> 4) ^ (v50 >> 9));
          long long v55 = *(const char **)(v52 + 8 * v54);
          if (v50 != v55)
          {
            int v56 = 1;
            while (v55 != (const char *)-4096)
            {
              unsigned int v57 = v54 + v56++;
              unsigned int v54 = v57 & v53;
              long long v55 = *(const char **)(v52 + 8 * v54);
              if (v50 == v55) {
                goto LABEL_66;
              }
            }
LABEL_60:
            if (*(void *)v48)
            {
              **(void **)(v48 + 16) = *(void *)(v48 + 8);
              uint64_t v58 = *(void *)(v48 + 8);
              if (v58) {
                *(void *)(v58 + 16) = *(void *)(v48 + 16);
              }
            }
            *(void *)uint64_t v48 = v20;
            uint64_t v59 = *((void *)v20 + 1);
            *(void *)(v48 + 8) = v59;
            if (v59) {
              *(void *)(v59 + 16) = v49;
            }
            *(void *)(v48 + 16) = v47;
            *uint64_t v47 = v48;
          }
        }
LABEL_66:
        if (!v46) {
          goto LABEL_67;
        }
      }
    }
    uint64_t v12 = *(void *)(a5 + 8);
  }
  int v14 = v13 - 1;
  unsigned int v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
  unsigned int v16 = *(llvm::Instruction **)(v12 + 8 * v15);
  if (v16 != v11)
  {
    int v17 = 1;
    while (v16 != (llvm::Instruction *)-4096)
    {
      unsigned int v18 = v15 + v17++;
      unsigned int v15 = v18 & v14;
      unsigned int v16 = *(llvm::Instruction **)(v12 + 8 * v15);
      if (v16 == v11) {
        return result;
      }
    }
    goto LABEL_13;
  }
  return result;
}

unsigned __int8 *sub_1CC88728C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return a1;
  }
  if (!a2 || (*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    if (*(_DWORD *)(a2 + 8) == 269)
    {
      uint64_t v23 = 0;
      uint64_t v24 = **a4;
      uint64_t v60 = 0x200000000;
      uint64_t v64 = v24;
      uint64_t v65 = &v73;
      unint64_t v66 = v74;
      uint64_t v67 = 0;
      int v68 = 0;
      __int16 v69 = 512;
      char v70 = 7;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      int v73 = &unk_1F2616E88;
      v74[0] = &unk_1F2617008;
      uint64_t v25 = (unsigned __int8 *)a4[6];
      unint64_t v62 = a4[5];
      uint64_t v63 = a4 + 3;
      uint64_t v58 = v25;
      uint64_t v59 = v61;
      if (v25)
      {
        llvm::MetadataTracking::track((uint64_t)&v58, v25, 2);
        uint64_t v23 = (uint64_t)v58;
      }
      sub_1CB8461A4((uint64_t)&v59, 0, v23);
      if (!v58)
      {
LABEL_24:
        unsigned int v27 = *(_DWORD *)(a3 + 8);
        unsigned int v56 = v27 >> 8;
        if (v27 >> 8 > 0x40) {
          operator new[]();
        }
        long long v55 = 0;
        IntegerValue = llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v55, v26);
        if (v56 >= 0x41 && v55) {
          MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
        }
        __int16 v57 = 257;
        int v13 = (unsigned __int8 *)sub_1CB845F20((uint64_t)&v59, 33, a1, (uint64_t)IntegerValue, (uint64_t)&v55);
        uint64_t v29 = v59;
        if (v59 != v61) {
          goto LABEL_31;
        }
        return v13;
      }
      int v36 = *v58;
      if ((v36 - 4) > 0x1E)
      {
        if ((v36 - 3) >= 0xFFFFFFFE) {
          uint64_t v40 = v58;
        }
        else {
          uint64_t v40 = 0;
        }
        if ((v36 - 3) < 0xFFFFFFFE)
        {
          if (v36 == 3) {
            *((void *)v58 + 1) = 0;
          }
          goto LABEL_24;
        }
        unint64_t v38 = (unint64_t)(v40 + 8);
      }
      else
      {
        if ((v58[1] & 0x7F) != 2 && !*((_DWORD *)v58 + 3)) {
          goto LABEL_24;
        }
        uint64_t v37 = *((void *)v58 + 2);
        if ((v37 & 4) == 0) {
          goto LABEL_24;
        }
        unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8;
        if (!v38) {
          goto LABEL_24;
        }
      }
      long long v55 = &v58;
      sub_1CC5FA668(v38 + 16, &v55);
      goto LABEL_24;
    }
    uint64_t v30 = (char *)operator new(0x60uLL);
    *((_DWORD *)v30 + 13) = *((_DWORD *)v30 + 13) & 0x38000000 | 1;
    int v13 = (unsigned __int8 *)(v30 + 32);
    *(void *)uint64_t v30 = 0;
    *((void *)v30 + 1) = 0;
    *((void *)v30 + 2) = 0;
    *((void *)v30 + 3) = v30 + 32;
    uint64_t v59 = "cast";
    v61[8] = 259;
    uint64_t v31 = sub_1CC19DDB4((llvm::Value *)(v30 + 32), a2, 45, (uint64_t)a1, (uint64_t)a4);
    llvm::Value::setNameImpl(v31, (const char **)&v59);
    if (v30[48]) {
      return v13;
    }
    if ((v30[55] & 0x10) == 0) {
      goto LABEL_77;
    }
    uint64_t v41 = ***(void ***)v13;
    uint64_t v42 = *(void *)(v41 + 152);
    uint64_t v43 = *(unsigned int *)(v41 + 168);
    if (v43)
    {
      LODWORD(v44) = (v43 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      int v45 = (unsigned __int8 **)(v42 + 16 * v44);
      uint64_t v46 = *v45;
      if (*v45 == v13)
      {
LABEL_70:
        uint64_t v49 = v45[1];
        unint64_t v52 = *(void *)v49;
        uint64_t v50 = v49 + 16;
        unint64_t v51 = v52;
        if (v52 >= 5 && *(_DWORD *)v50 == *(_DWORD *)"llvm." && v50[4] == aLlvm_1[4])
        {
          *((_DWORD *)v30 + 16) |= 0x2000u;
          int v54 = llvm::Function::lookupIntrinsicID(v50, v51);
LABEL_78:
          *((_DWORD *)v30 + 17) = v54;
          return v13;
        }
LABEL_77:
        int v54 = 0;
        *((_DWORD *)v30 + 16) &= ~0x2000u;
        goto LABEL_78;
      }
      int v47 = 1;
      while (v46 != (unsigned __int8 *)-4096)
      {
        int v48 = v44 + v47++;
        uint64_t v44 = v48 & (v43 - 1);
        uint64_t v46 = *(unsigned __int8 **)(v42 + 16 * v44);
        if (v46 == v13)
        {
          int v45 = (unsigned __int8 **)(v42 + 16 * v44);
          goto LABEL_70;
        }
      }
    }
    int v45 = (unsigned __int8 **)(v42 + 16 * v43);
    goto LABEL_70;
  }
  uint64_t v8 = 0;
  uint64_t v9 = **a4;
  uint64_t v60 = 0x200000000;
  uint64_t v64 = v9;
  uint64_t v65 = &v73;
  unint64_t v66 = v74;
  uint64_t v67 = 0;
  int v68 = 0;
  __int16 v69 = 512;
  char v70 = 7;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v73 = &unk_1F2616E88;
  v74[0] = &unk_1F2617008;
  uint64_t v10 = (unsigned __int8 *)a4[6];
  unint64_t v62 = a4[5];
  uint64_t v63 = a4 + 3;
  uint64_t v58 = v10;
  uint64_t v59 = v61;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)&v58, v10, 2);
    uint64_t v8 = (uint64_t)v58;
  }
  sub_1CB8461A4((uint64_t)&v59, 0, v8);
  if (v58)
  {
    int v33 = *v58;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        unsigned int v39 = v58;
      }
      else {
        unsigned int v39 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v58 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v35 = (unint64_t)(v39 + 8);
    }
    else
    {
      if ((v58[1] & 0x7F) != 2 && !*((_DWORD *)v58 + 3)) {
        goto LABEL_7;
      }
      uint64_t v34 = *((void *)v58 + 2);
      if ((v34 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_7;
      }
    }
    long long v55 = &v58;
    sub_1CC5FA668(v35 + 16, &v55);
  }
LABEL_7:
  int v13 = (unsigned __int8 *)llvm::UndefValue::get((llvm::UndefValue *)a2, v11);
  uint64_t v14 = *(unsigned int *)(a2 + 32);
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      unsigned int v16 = *(llvm::ConstantInt **)(*(void *)v64 + 1960);
      unsigned int v17 = *(_DWORD *)(*(void *)v64 + 1968);
      unsigned int v56 = v17 >> 8;
      if (v17 >> 8 > 0x40) {
        operator new[]();
      }
      if (v17 <= 0xFF) {
        unint64_t v18 = 0;
      }
      else {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
      }
      long long v55 = (unsigned __int8 **)(v18 & i);
      uint64_t v19 = (unsigned __int8 *)llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v55, v12);
      if (v56 >= 0x41 && v55) {
        MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
      }
      __int16 v57 = 257;
      uint64_t v20 = sub_1CB8445F4((uint64_t)&v59, a1, v19, (uint64_t)&v55);
      uint64_t v21 = *(uint64_t **)(a2 + 24);
      __int16 v57 = 257;
      uint64_t v22 = (unsigned __int8 *)sub_1CB845034((uint64_t)&v59, (uint64_t)v20, v21, (uint64_t)&v55);
      __int16 v57 = 257;
      int v13 = (unsigned __int8 *)sub_1CB84478C((uint64_t)&v59, v13, v22, v19, (uint64_t)&v55);
    }
  }
  uint64_t v29 = v59;
  if (v59 != v61) {
LABEL_31:
  }
    free(v29);
  return v13;
}

unsigned __int8 *sub_1CC887930(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5, llvm::Instruction **a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return a1;
  }
  sub_1CBF537B4((uint64_t)v33, a4, a5, 0, 0, 0);
  if (a2 && (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    int v13 = (unsigned __int8 *)llvm::UndefValue::get((llvm::UndefValue *)a3, v10);
    uint64_t v14 = *(unsigned int *)(a2 + 32);
    if (v14)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        unsigned int v16 = *(llvm::ConstantInt **)(*(void *)v35 + 1960);
        unsigned int v17 = *(_DWORD *)(*(void *)v35 + 1968);
        unsigned int v31 = v17 >> 8;
        if (v17 >> 8 > 0x40) {
          operator new[]();
        }
        if (v17 <= 0xFF) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v17) + 63);
        }
        uint64_t v30 = (const char *)(v18 & i);
        uint64_t v19 = (unsigned __int8 *)llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v30, v12);
        if (v31 >= 0x41 && v30) {
          MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
        }
        __int16 v32 = 257;
        uint64_t v20 = sub_1CB8445F4((uint64_t)v33, a1, v19, (uint64_t)&v30);
        if (!*a6) {
          *a6 = v20;
        }
        uint64_t v21 = *(uint64_t **)(a3 + 24);
        __int16 v32 = 257;
        uint64_t v22 = (unsigned __int8 *)sub_1CB843944((uint64_t)v33, (uint64_t)v20, v21, (uint64_t)&v30);
        __int16 v32 = 257;
        int v13 = (unsigned __int8 *)sub_1CB84478C((uint64_t)v33, v13, v22, v19, (uint64_t)&v30);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) == 269)
    {
      unint64_t v23 = *(unsigned int *)(a3 + 8);
      unsigned int v31 = *(_DWORD *)(a3 + 8) >> 8;
      if (v23 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v23) + 63);
      if (v23 <= 0xFF) {
        LOBYTE(v24) = 0;
      }
      uint64_t v30 = (const char *)(v24 & 1);
      IntegerValue = llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v30, v11);
      if (v31 >= 0x41 && v30) {
        MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      }
      unsigned int v31 = v23 >> 8;
      if (v23 >> 8 > 0x40) {
        operator new[]();
      }
      uint64_t v30 = 0;
      unsigned int v27 = llvm::Constant::getIntegerValue((llvm::Constant ***)a3, (llvm::Type *)&v30, v25);
      if (v31 >= 0x41 && v30) {
        MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      }
      __int16 v32 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v33, (llvm::Value *)a1, IntegerValue, v27, (const llvm::Twine *)&v30, 0);
    }
    else
    {
      uint64_t v30 = "cast";
      __int16 v32 = 259;
      Select = sub_1CB843944((uint64_t)v33, (uint64_t)a1, (uint64_t *)a3, (uint64_t)&v30);
    }
    int v13 = (unsigned __int8 *)Select;
    if (!*a6) {
      *a6 = Select;
    }
  }
  if (v33[0] != &v34) {
    free(v33[0]);
  }
  return v13;
}

double sub_1CC887D50(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = *(unsigned int *)(a1 + 336);
    if (v2)
    {
      long long v3 = *(llvm::Instruction ***)(a1 + 328);
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 48);
      if (v4) {
        int v5 = (llvm::Instruction *)(v4 - 24);
      }
      else {
        int v5 = 0;
      }
      uint64_t v6 = 8 * v2;
      do
      {
        uint64_t v7 = *v3++;
        llvm::Instruction::moveBefore(v7, v5);
        v6 -= 8;
      }
      while (v6);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)(a1 + 336) = 0;
    if (*(void *)(a1 + 48) != v8)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 56);
      if (v10 >= 0x21 && 4 * (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64)) < v10)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 40));
        goto LABEL_10;
      }
      memset(*(void **)(a1 + 48), 255, 8 * v10);
    }
    *(_DWORD *)(a1 + 60) = 0;
    *(_DWORD *)(a1 + 64) = 0;
LABEL_10:
    sub_1CD646000((void *)(a1 + 600));
    *(_DWORD *)(a1 + 648) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1CC887E28(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *(void *)(a2 - 8);
    uint64_t v5 = v4 & 0x7FFFFFF;
    if (!v5) {
      return sub_1CC887EE0(a1, a2);
    }
  }
  else
  {
    uint64_t v5 = v4 & 0x7FFFFFF;
    uint64_t v6 = a2 - 32 * v5;
    if (!v5) {
      return sub_1CC887EE0(a1, a2);
    }
  }
  uint64_t v7 = 32 * v5;
  while (1)
  {
    uint64_t v8 = *(void *)v6;
    if (*(void *)v6 && *(unsigned __int8 *)(*(void *)v6 + 16) >= 0x1Cu)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v8;
      if (sub_1CD643BDC(a1 + 600, &v12, &v11)) {
        break;
      }
    }
    v6 += 32;
    v7 -= 32;
    if (!v7) {
      return sub_1CC887EE0(a1, a2);
    }
  }
  return 1;
}

uint64_t sub_1CC887EE0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
  {
    int v4 = *(uint64_t **)(a2 - 8);
    uint64_t v3 = v2 & 0x7FFFFFF;
    if (!v3) {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    int v4 = (uint64_t *)(a2 - 32 * v3);
    if (!v3) {
      return 0;
    }
  }
  uint64_t v5 = &v4[4 * v3];
  while (1)
  {
    uint64_t v6 = *v4;
    if (*v4 && *(unsigned __int8 *)(*v4 + 16) >= 0x1Cu)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      if (v8 == v9)
      {
        uint64_t v10 = *(unsigned int *)(a1 + 60);
        uint64_t v11 = (void *)(v8 + 8 * v10);
        if (v10)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * v10;
          while (*(void *)(v8 + v12) != v6)
          {
            v12 += 8;
            if (v13 == v12) {
              goto LABEL_29;
            }
          }
          uint64_t v11 = (void *)(v8 + v12);
        }
LABEL_29:
        uint64_t v9 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v14 = *(unsigned int *)(a1 + 56);
        int v15 = v14 - 1;
        unsigned int v16 = (v14 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        uint64_t v11 = (void *)(v8 + 8 * v16);
        uint64_t v17 = *v11;
        if (*v11 == -1)
        {
          unint64_t v18 = 0;
LABEL_36:
          if (v18) {
            uint64_t v11 = v18;
          }
          if (*v11 != v6) {
            uint64_t v11 = (void *)(v8 + 8 * v14);
          }
        }
        else
        {
          unint64_t v18 = 0;
          int v19 = 1;
          while (v17 != v6)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              unint64_t v18 = v11;
            }
            unsigned int v21 = v16 + v19++;
            unsigned int v16 = v21 & v15;
            uint64_t v11 = (void *)(v8 + 8 * (v21 & v15));
            uint64_t v17 = *v11;
            if (*v11 == -1) {
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v22 = (unsigned int *)(a1 + 60);
      if (v8 != v9) {
        uint64_t v22 = (unsigned int *)(a1 + 56);
      }
      if (v11 != (void *)(v8 + 8 * *v22)) {
        return 1;
      }
    }
    v4 += 4;
    if (v4 == v5) {
      return 0;
    }
  }
}

void sub_1CC888024()
{
}

void sub_1CC8880C0()
{
}

void sub_1CC888120(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC888158()
{
  return "Replace buffer content with constants";
}

uint64_t sub_1CC888168(int a1, llvm::AGXIR *this)
{
  uint64_t v217 = *MEMORY[0x1E4F143B8];
  uint64_t ShaderID = llvm::AGXIR::getShaderID(this, this);
  if ((ShaderID & 0xFF00000000) == 0) {
    return 0;
  }
  unsigned int v4 = ShaderID;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDD078, memory_order_acquire) & 1) == 0)
  {
    uint64_t ShaderID = __cxa_guard_acquire(&qword_1EBCDD078);
    if (ShaderID)
    {
      byte_1EBCDD09F = 0;
      LOBYTE(qword_1EBCDD088) = 0;
      __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBCDD088, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCDD078);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCDD080, memory_order_acquire) & 1) == 0)
  {
    uint64_t ShaderID = __cxa_guard_acquire(&qword_1EBCDD080);
    if (ShaderID)
    {
      qword_1EBCDD0A8 = 0;
      unk_1EBCDD0B0 = 0;
      qword_1EBCDD0A0 = 0;
      __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBCDD0A0, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCDD080);
    }
  }
  memset(&v204, 0, sizeof(v204));
  if (byte_1EBCDD138)
  {
    int v15 = 0;
LABEL_48:
    unint64_t v23 = llvm::dbgs((llvm *)ShaderID);
    unint64_t v24 = v23;
    uint64_t v25 = (void *)*((void *)v23 + 4);
    if (*((void *)v23 + 3) - (void)v25 > 0xDuLL)
    {
      qmemcpy(v25, "Found shader: ", 14);
      *((void *)v23 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v23, "Found shader: ", 0xEuLL);
    }
    sub_1CD098D14(v24, v4, 0, 0, 0);
    uint64_t v26 = (unsigned char *)*((void *)v24 + 4);
    if ((unint64_t)v26 >= *((void *)v24 + 3))
    {
      llvm::raw_ostream::write(v24, 10);
      char v200 = 0;
    }
    else
    {
      char v200 = 0;
      *((void *)v24 + 4) = v26 + 1;
      *uint64_t v26 = 10;
    }
    goto LABEL_36;
  }
  if (byte_1EBCDD09F >= 0) {
    size_t v5 = byte_1EBCDD09F & 0x7F;
  }
  else {
    size_t v5 = qword_1EBCDD090;
  }
  if (!v5) {
    goto LABEL_31;
  }
  uint64_t v6 = &v216;
  sub_1CB907098((uint64_t)&v216, v5 + 23);
  if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if (byte_1EBCDD09F >= 0) {
    uint64_t v7 = &qword_1EBCDD088;
  }
  else {
    uint64_t v7 = (uint64_t *)qword_1EBCDD088;
  }
  memmove(v6, v7, v5);
  strcpy((char *)v6 + v5, "/bufferMappingForShader");
  std::to_string(&v208, v4);
  if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v208;
  }
  else {
    uint64_t v8 = (std::string *)v208.__r_.__value_.__r.__words[0];
  }
  if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&v208.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = v208.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v216, (const std::string::value_type *)v8, size);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v201.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v201, ".txt");
  uint64_t v13 = v12->__r_.__value_.__r.__words[0];
  *(void *)&long long v213 = v12->__r_.__value_.__l.__size_;
  *(void *)((char *)&v213 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (byte_1EBCDD0B7 < 0) {
    operator delete((void *)qword_1EBCDD0A0);
  }
  qword_1EBCDD0A0 = v13;
  qword_1EBCDD0A8 = v213;
  *(uint64_t *)((char *)&qword_1EBCDD0A8 + 7) = *(void *)((char *)&v213 + 7);
  byte_1EBCDD0B7 = v14;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v216.__r_.__value_.__l.__data_);
  }
  v203[0] = 260;
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1EBCDD0A0;
  sub_1CD096690((unsigned __int8 *)&v201, (llvm::WritableMemoryBuffer *)0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v216);
  if (v216.__r_.__value_.__s.__data_[16])
  {
    int v15 = (const llvm::MemoryBuffer *)v216.__r_.__value_.__r.__words[0];
    if (!LODWORD(v216.__r_.__value_.__l.__data_)) {
      goto LABEL_32;
    }
LABEL_31:
    int v15 = 0;
    goto LABEL_178;
  }
  std::system_category();
  int v15 = (const llvm::MemoryBuffer *)v216.__r_.__value_.__r.__words[0];
LABEL_32:
  std::string::operator=(&v204, (const std::string *)&qword_1EBCDD088);
  std::string::append(&v204, "/buffers");
  v203[0] = 260;
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
  v208.__r_.__value_.__s.__data_[0] = 0;
  uint64_t ShaderID = llvm::sys::fs::is_directory((llvm::sys::fs *)&v201, (const llvm::Twine *)&v208, v16);
  if (ShaderID || !v208.__r_.__value_.__s.__data_[0]) {
    goto LABEL_178;
  }
  if (byte_1EBCDD138) {
    goto LABEL_48;
  }
  char v200 = 1;
LABEL_36:
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v203;
  v201.__r_.__value_.__l.__size_ = (std::string::size_type)v203;
  v201.__r_.__value_.__r.__words[2] = 8;
  int v202 = 0;
  sub_1CD10929C(this, (uint64_t)&v201, 1);
  if (HIDWORD(v201.__r_.__value_.__r.__words[2]) == v202) {
    goto LABEL_176;
  }
  if (byte_1EBCDD138)
  {
    char v196 = 0;
    int v193 = 0;
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_39;
  }
  uint64_t v94 = &v215;
  long long v213 = 0uLL;
  unsigned int v214 = 0;
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    sub_1CB8BDF7C((uint64_t)&v215, v204.__r_.__value_.__l.__data_, v204.__r_.__value_.__l.__size_);
  }
  else {
    std::string v215 = v204;
  }
  (*(void (**)(const llvm::MemoryBuffer *))(*(void *)v15 + 16))(v15);
  llvm::line_iterator::line_iterator((llvm::line_iterator *)&v208, v15, 1, 35);
  if ((_BYTE)v210)
  {
    unsigned int v199 = 0;
    unsigned int v95 = (char *)&v212;
    while (1)
    {
      v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216.__r_.__value_.__r.__words[2];
      v216.__r_.__value_.__l.__size_ = 0x400000000;
      llvm::StringRef::split(v95, (uint64_t)&v216, 44, -1, 1);
      if (LODWORD(v216.__r_.__value_.__r.__words[1]) != 4)
      {
LABEL_282:
        int v146 = DWORD2(v213);
        if (!*((void *)&v213 + 1)) {
          goto LABEL_315;
        }
        if (v214 > 4 * DWORD2(v213) && v214 >= 0x41)
        {
          uint64_t v147 = 152 * v214;
          uint64_t v148 = (char **)(v213 + 8);
          do
          {
            if (*((_DWORD *)v148 - 2) <= 0xFFFFFFFD) {
              uint64_t v148 = sub_1CD5010D8(v148);
            }
            v148 += 19;
            v147 -= 152;
          }
          while (v147);
          int v149 = 1 << (33 - __clz(v146 - 1));
          if (v149 <= 64) {
            int v149 = 64;
          }
          if (v146) {
            unsigned int v150 = v149;
          }
          else {
            unsigned int v150 = 0;
          }
          if (v150 == v214)
          {
            *((void *)&v213 + 1) = 0;
            if (v150)
            {
              int v151 = (_DWORD *)v213;
              uint64_t v152 = 152 * v150;
              do
              {
                *int v151 = -1;
                v151 += 38;
                v152 -= 152;
              }
              while (v152);
            }
          }
          else
          {
            MEMORY[0x1D25D9CD0](v213, 8);
            if (v150)
            {
              unint64_t v184 = (4 * v150 / 3 + 1) | ((unint64_t)(4 * v150 / 3 + 1) >> 1);
              unint64_t v185 = v184 | (v184 >> 2) | ((v184 | (v184 >> 2)) >> 4);
              unsigned int v214 = (((v185 | (v185 >> 8)) >> 16) | v185 | (v185 >> 8)) + 1;
              unsigned int v186 = operator new(152 * v214, (std::align_val_t)8uLL);
              long long v213 = (unint64_t)v186;
              if (v214)
              {
                uint64_t v187 = 152 * v214;
                do
                {
                  *unsigned int v186 = -1;
                  v186 += 38;
                  v187 -= 152;
                }
                while (v187);
              }
            }
            else
            {
              long long v213 = 0uLL;
              unsigned int v214 = 0;
            }
          }
LABEL_315:
          uint64_t v161 = (std::string *)v216.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v216.__r_.__value_.__l.__data_ != &v216.__r_.__value_.__r.__words[2]) {
            goto LABEL_375;
          }
          goto LABEL_376;
        }
        if (!v214)
        {
LABEL_314:
          *((void *)&v213 + 1) = 0;
          goto LABEL_315;
        }
        uint64_t v158 = 152 * v214;
        size_t v159 = (char **)(v213 + 8);
        while (2)
        {
          int v160 = *((_DWORD *)v159 - 2);
          if (v160 == -2)
          {
LABEL_312:
            *((_DWORD *)v159 - 2) = -1;
          }
          else if (v160 != -1)
          {
            size_t v159 = sub_1CD5010D8(v159);
            goto LABEL_312;
          }
          v159 += 19;
          v158 -= 152;
          if (!v158) {
            goto LABEL_314;
          }
          continue;
        }
      }
      std::string::size_type v96 = v216.__r_.__value_.__r.__words[0];
      for (uint64_t i = 8; i != 72; i += 16)
      {
        if (!*(void *)(v216.__r_.__value_.__r.__words[0] + i)) {
          goto LABEL_282;
        }
      }
      uint64_t v98 = v15;
      unsigned int v99 = atoi(*(const char **)v216.__r_.__value_.__l.__data_);
      if (v199 <= v99) {
        unsigned int v100 = v99;
      }
      else {
        unsigned int v100 = v199;
      }
      unsigned int v199 = v100;
      int v101 = atoi(*(const char **)(v96 + 16));
      uint64_t v102 = *(const void **)(v96 + 32);
      if (!v102)
      {
        memset(&__dst, 0, sizeof(__dst));
        int v106 = atoi(*(const char **)(v96 + 48));
        std::string::size_type v107 = 0;
LABEL_208:
        int v113 = 0;
        std::string v205 = __dst;
        int v206 = v106;
        goto LABEL_210;
      }
      std::string::size_type v103 = *(void *)(v96 + 40);
      if (v103 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      char v104 = v95;
      if (v103 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(v96 + 40);
      p_dst = &__dst;
      if (v103) {
        goto LABEL_205;
      }
LABEL_206:
      p_dst->__r_.__value_.__s.__data_[v103] = 0;
      int v112 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      int v106 = atoi(*(const char **)(v216.__r_.__value_.__r.__words[0] + 48));
      if ((v112 & 0x80000000) == 0)
      {
        std::string::size_type v107 = v112;
        unsigned int v95 = v104;
        goto LABEL_208;
      }
      std::string::size_type v107 = __dst.__r_.__value_.__l.__size_;
      sub_1CB8BDF7C((uint64_t)&v205, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      int v206 = v106;
      int v113 = 1;
      unsigned int v95 = v104;
LABEL_210:
      if (v107 >= 3)
      {
        int v114 = &__dst;
        if (v113) {
          int v114 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if (v114->__r_.__value_.__s.__data_[0] == 48)
        {
          BOOL v47 = v113 == 0;
          int v115 = &__dst;
          if (!v47) {
            int v115 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if (v115->__r_.__value_.__s.__data_[1] == 120) {
            std::string::erase(&v205, 0, 2uLL);
          }
        }
      }
      if (v214)
      {
        unsigned int v116 = (v214 - 1) & (37 * v101);
        uint64_t v117 = (int *)(v213 + 152 * v116);
        int v118 = *v117;
        if (v101 == *v117) {
          goto LABEL_235;
        }
        uint64_t v119 = 0;
        int v120 = 1;
        while (v118 != -1)
        {
          if (v119) {
            BOOL v121 = 0;
          }
          else {
            BOOL v121 = v118 == -2;
          }
          if (v121) {
            uint64_t v119 = v117;
          }
          unsigned int v122 = v116 + v120++;
          unsigned int v116 = v122 & (v214 - 1);
          uint64_t v117 = (int *)(v213 + 152 * v116);
          int v118 = *v117;
          if (v101 == *v117) {
            goto LABEL_235;
          }
        }
        if (v119) {
          uint64_t v117 = v119;
        }
      }
      else
      {
        uint64_t v117 = 0;
      }
      if (4 * DWORD2(v213) + 4 >= 3 * v214)
      {
        int v132 = v95;
        int v133 = v94;
        sub_1CC889790((uint64_t *)&v213, 2 * v214);
        if (v214)
        {
          unsigned int v134 = (v214 - 1) & (37 * v101);
          uint64_t v117 = (int *)(v213 + 152 * v134);
          int v135 = *v117;
          if (v101 != *v117)
          {
            uint64_t v136 = 0;
            int v137 = 1;
            while (v135 != -1)
            {
              if (v136) {
                BOOL v138 = 0;
              }
              else {
                BOOL v138 = v135 == -2;
              }
              if (v138) {
                uint64_t v136 = v117;
              }
              unsigned int v139 = v134 + v137++;
              unsigned int v134 = v139 & (v214 - 1);
              uint64_t v117 = (int *)(v213 + 152 * v134);
              int v135 = *v117;
              uint64_t v94 = v133;
              unsigned int v95 = v132;
              if (v101 == *v117) {
                goto LABEL_232;
              }
            }
LABEL_279:
            if (v136) {
              uint64_t v117 = v136;
            }
          }
LABEL_277:
          uint64_t v94 = v133;
          unsigned int v95 = v132;
          goto LABEL_232;
        }
LABEL_276:
        uint64_t v117 = 0;
        goto LABEL_277;
      }
      if (v214 + ~DWORD2(v213) - HIDWORD(v213) <= v214 >> 3)
      {
        int v132 = v95;
        int v133 = v94;
        sub_1CC889790((uint64_t *)&v213, v214);
        if (v214)
        {
          unsigned int v140 = (v214 - 1) & (37 * v101);
          uint64_t v117 = (int *)(v213 + 152 * v140);
          int v141 = *v117;
          if (v101 != *v117)
          {
            uint64_t v136 = 0;
            int v142 = 1;
            while (v141 != -1)
            {
              if (v136) {
                BOOL v143 = 0;
              }
              else {
                BOOL v143 = v141 == -2;
              }
              if (v143) {
                uint64_t v136 = v117;
              }
              unsigned int v144 = v140 + v142++;
              unsigned int v140 = v144 & (v214 - 1);
              uint64_t v117 = (int *)(v213 + 152 * v140);
              int v141 = *v117;
              uint64_t v94 = v133;
              unsigned int v95 = v132;
              if (v101 == *v117) {
                goto LABEL_232;
              }
            }
            goto LABEL_279;
          }
          goto LABEL_277;
        }
        goto LABEL_276;
      }
LABEL_232:
      ++DWORD2(v213);
      if (*v117 != -1) {
        --HIDWORD(v213);
      }
      *uint64_t v117 = v101;
      *((void *)v117 + 1) = v117 + 6;
      *((void *)v117 + 2) = 0x400000000;
LABEL_235:
      uint64_t v124 = (unint64_t *)(v117 + 2);
      unint64_t v123 = *((void *)v117 + 1);
      uint64_t v125 = v117[4];
      if (v125 >= v117[5])
      {
        unint64_t v130 = v125 + 1;
        BOOL v131 = v123 + 32 * v125 > (unint64_t)&v205;
        if (v123 <= (unint64_t)&v205 && v131)
        {
          unsigned int v145 = (char *)&v205 - v123;
          sub_1CC889A54((uint64_t)(v117 + 2), v130);
          unint64_t v123 = *v124;
          int v126 = (std::string *)&v145[*v124];
          goto LABEL_237;
        }
        sub_1CC889A54((uint64_t)(v117 + 2), v130);
        unint64_t v123 = *v124;
      }
      int v126 = &v205;
LABEL_237:
      uint64_t v127 = v117[4];
      uint64_t v128 = v123 + 32 * v127;
      if (SHIBYTE(v126->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1CB8BDF7C(v128, v126->__r_.__value_.__l.__data_, v126->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v129 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        *(void *)(v128 + 16) = *((void *)&v126->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v128 = v129;
      }
      *(_DWORD *)(v123 + 32 * v127 + 24) = v126[1].__r_.__value_.__l.__data_;
      ++v117[4];
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v205.__r_.__value_.__l.__data_);
      }
      int v15 = v98;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((std::string::size_type *)v216.__r_.__value_.__l.__data_ != &v216.__r_.__value_.__r.__words[2]) {
        free(v216.__r_.__value_.__l.__data_);
      }
      llvm::line_iterator::advance((uint64_t)&v208);
      if (!(_BYTE)v210) {
        goto LABEL_300;
      }
    }
    uint64_t v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v103 | 7) != 0x17) {
      uint64_t v108 = v103 | 7;
    }
    size_t v109 = v94;
    uint64_t v110 = v108 + 1;
    p_dst = (std::string *)operator new(v108 + 1);
    unint64_t v111 = v110 | 0x8000000000000000;
    uint64_t v94 = v109;
    __dst.__r_.__value_.__l.__size_ = v103;
    __dst.__r_.__value_.__r.__words[2] = v111;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_205:
    memmove(p_dst, v102, v103);
    goto LABEL_206;
  }
  unsigned int v199 = 0;
LABEL_300:
  v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216.__r_.__value_.__r.__words[2];
  v216.__r_.__value_.__l.__size_ = 0x800000000;
  unsigned int v153 = (unsigned int *)(v213 + 152 * v214);
  uint64_t v154 = v94;
  if (DWORD2(v213))
  {
    unsigned int v155 = v199;
    if (v214)
    {
      uint64_t v156 = 152 * v214;
      int v157 = (unsigned int *)v213;
      while (*v157 >= 0xFFFFFFFE)
      {
        v157 += 38;
        v156 -= 152;
        if (!v156)
        {
          int v157 = (unsigned int *)(v213 + 152 * v214);
          break;
        }
      }
    }
    else
    {
      int v157 = (unsigned int *)v213;
    }
  }
  else
  {
    int v157 = (unsigned int *)(v213 + 152 * v214);
    unsigned int v155 = v199;
  }
  uint64_t v197 = (unsigned int *)(v213 + 152 * v214);
  if (v157 == v197) {
    goto LABEL_376;
  }
  uint64_t v195 = 32 * v155;
  do
  {
    if (v157[4] != v155) {
      goto LABEL_352;
    }
    if (v155)
    {
      uint64_t v162 = (const void **)*((void *)v157 + 1);
      uint64_t v163 = v195;
      while (1)
      {
        if (*((_DWORD *)v162 + 6)) {
          goto LABEL_349;
        }
        unint64_t v164 = *((unsigned __int8 *)v162 + 23);
        unint64_t v165 = (v164 & 0x80u) == 0 ? v164 & 0x7F : (unint64_t)v162[1];
        if (v165 != 4) {
          goto LABEL_349;
        }
        unsigned int v166 = v162;
        if ((v164 & 0x80) != 0)
        {
          unsigned int v166 = *v162;
          unint64_t v164 = (unint64_t)v162[1];
        }
        size_t v167 = v164 >= 4 ? 4 : v164;
        if (memcmp(v166, "null", v167) || v164 != 4)
        {
LABEL_349:
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
            sub_1CB8BDF7C((uint64_t)&v205, v215.__r_.__value_.__l.__data_, v215.__r_.__value_.__l.__size_);
          }
          else {
            std::string v205 = *v154;
          }
          std::string::append(&v205, "/buffer-");
          char v169 = *((unsigned char *)v162 + 23);
          BOOL v170 = v169 < 0;
          if (v169 >= 0) {
            unsigned int v171 = (const std::string::value_type *)v162;
          }
          else {
            unsigned int v171 = (const std::string::value_type *)*v162;
          }
          std::string::size_type v172 = v169 & 0x7F;
          if (v170) {
            std::string::size_type v173 = (std::string::size_type)v162[1];
          }
          else {
            std::string::size_type v173 = v172;
          }
          std::string::append(&v205, v171, v173);
          std::string::append(&v205, ".buf");
          LOWORD(v210) = 260;
          v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
          int v174 = llvm::sys::fs::access((unsigned __int8 *)&v208, 0);
          if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v205.__r_.__value_.__l.__data_);
          }
          if (v174) {
            break;
          }
        }
        v162 += 4;
        v163 -= 32;
        if (!v163) {
          goto LABEL_354;
        }
      }
LABEL_352:
      if (LODWORD(v216.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v216.__r_.__value_.__r.__words[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(v216.__r_.__value_.__r.__words[0] + 4 * LODWORD(v216.__r_.__value_.__r.__words[1])) = *v157;
      ++LODWORD(v216.__r_.__value_.__r.__words[1]);
    }
LABEL_354:
    size_t v175 = v157 + 38;
    while (v175 != v153)
    {
      unsigned int v176 = *v175;
      v175 += 38;
      if (v176 <= 0xFFFFFFFD)
      {
        int v157 = v175 - 38;
        goto LABEL_359;
      }
    }
    int v157 = v153;
LABEL_359:
    unsigned int v155 = v199;
  }
  while (v157 != v197);
  uint64_t v177 = (std::string *)v216.__r_.__value_.__r.__words[0];
  if (LODWORD(v216.__r_.__value_.__r.__words[1]))
  {
    std::string::size_type v178 = v216.__r_.__value_.__r.__words[0] + 4 * LODWORD(v216.__r_.__value_.__r.__words[1]);
    do
    {
      if (v214)
      {
        unsigned int v179 = (v214 - 1) & (37 * LODWORD(v177->__r_.__value_.__l.__data_));
        uint64_t v180 = (int *)(v213 + 152 * v179);
        int v181 = *v180;
        if (LODWORD(v177->__r_.__value_.__l.__data_) == *v180)
        {
LABEL_366:
          sub_1CD5010D8((char **)v180 + 1);
          *uint64_t v180 = -2;
          *((int32x2_t *)&v213 + 1) = vadd_s32(*(int32x2_t *)((char *)&v213 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          int v182 = 1;
          while (v181 != -1)
          {
            unsigned int v183 = v179 + v182++;
            unsigned int v179 = v183 & (v214 - 1);
            uint64_t v180 = (int *)(v213 + 152 * v179);
            int v181 = *v180;
            if (LODWORD(v177->__r_.__value_.__l.__data_) == *v180) {
              goto LABEL_366;
            }
          }
        }
      }
      uint64_t v177 = (std::string *)((char *)v177 + 4);
    }
    while (v177 != (std::string *)v178);
    uint64_t v177 = (std::string *)v216.__r_.__value_.__r.__words[0];
  }
  if (v177 != (std::string *)&v216.__r_.__value_.__r.__words[2])
  {
    uint64_t v161 = v177;
LABEL_375:
    free(v161);
  }
LABEL_376:
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v18 = v213;
  long long v213 = 0uLL;
  unsigned int v17 = v214;
  unsigned int v214 = 0;
  int v193 = (void *)v215.__r_.__value_.__r.__words[0];
  char v196 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
  *((unsigned char *)&v215.__r_.__value_.__s + 23) = 0;
  v215.__r_.__value_.__s.__data_[0] = 0;
  MEMORY[0x1D25D9CD0](0, 8);
LABEL_39:
  memset(&v208, 0, 20);
  unint64_t v210 = 0;
  uint64_t v211 = 0;
  long long __p = 0;
  sub_1CD0FEC94(this, (uint64_t)&v208);
  sub_1CD0FEFC4(this, (uint64_t)&v208, 0);
  if (v201.__r_.__value_.__l.__size_ == v201.__r_.__value_.__r.__words[0]) {
    int v19 = &v201.__r_.__value_.__s.__data_[20];
  }
  else {
    int v19 = &v201.__r_.__value_.__s.__data_[16];
  }
  uint64_t v20 = *(unsigned int *)v19;
  if (v20)
  {
    uint64_t v21 = 8 * v20;
    uint64_t v22 = (std::string::size_type *)v201.__r_.__value_.__l.__size_;
    while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v22;
      v21 -= 8;
      if (!v21) {
        goto LABEL_166;
      }
    }
  }
  else
  {
    uint64_t v22 = (std::string::size_type *)v201.__r_.__value_.__l.__size_;
  }
  if (v22 != (std::string::size_type *)(v201.__r_.__value_.__l.__size_ + 8 * v20))
  {
    std::string::size_type v191 = v201.__r_.__value_.__l.__size_ + 8 * v20;
    uint64_t v192 = v15;
    uint64_t v194 = v18;
    unsigned int v198 = v17;
    unsigned int v190 = v17 - 1;
    unsigned int v27 = (llvm::AGXIR *)((char *)this + 272);
    std::string::size_type v28 = *v22;
LABEL_55:
    v216.__r_.__value_.__r.__words[0] = v28;
    uint64_t v29 = sub_1CC782500((uint64_t *)&v208, &v216);
    if (!v29) {
      goto LABEL_158;
    }
    int v33 = (void *)(v29 - 8 * *(unsigned int *)(v29 + 8));
    if (*(unsigned char *)(*(void *)(*(void *)(*v33 + 128) + 24) + 8) != 17
      || (uint64_t v34 = v33[1], *(unsigned char *)v34 == 1) && *(unsigned char *)(*(void *)(v34 + 128) + 16) == 16)
    {
      uint64_t v35 = v33[2];
    }
    else
    {
      uint64_t v35 = *(void *)(v34 - 8 * *(unsigned int *)(v34 + 8) + 8);
    }
    uint64_t v36 = *(void *)(v35 + 128);
    uint64_t v37 = (void *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u) {
      uint64_t v37 = (void *)*v37;
    }
    unint64_t v38 = (void *)*v37;
    if (!v198) {
      goto LABEL_67;
    }
    unsigned int v39 = (37 * v38) & v190;
    uint64_t v40 = (int *)(v194 + 152 * v39);
    int v41 = *v40;
    if (*v40 == v38)
    {
      unsigned int v42 = v198;
LABEL_66:
      if (v39 == v42) {
        goto LABEL_67;
      }
      uint64_t v77 = v40[4];
      if (v77)
      {
        int v78 = (const void **)*((void *)v40 + 1);
        uint64_t v79 = 32 * v77;
        while (!*((_DWORD *)v78 + 6))
        {
          unint64_t v80 = *((unsigned __int8 *)v78 + 23);
          unint64_t v81 = (v80 & 0x80u) == 0 ? v80 & 0x7F : (unint64_t)v78[1];
          if (v81 != 4) {
            break;
          }
          int v82 = v78;
          if ((v80 & 0x80) != 0)
          {
            int v82 = *v78;
            unint64_t v80 = (unint64_t)v78[1];
          }
          size_t v83 = v80 >= 4 ? 4 : v80;
          if (memcmp(v82, "null", v83) || v80 != 4) {
            break;
          }
          v78 += 4;
          v79 -= 32;
          if (!v79) {
            goto LABEL_157;
          }
        }
        goto LABEL_67;
      }
LABEL_157:
      while (1)
      {
        std::string::size_type v28 = *(void *)(v28 + 8);
        if (!v28) {
          break;
        }
        uint64_t v85 = *(void *)(v28 + 24);
        if (*(unsigned char *)(v85 + 16) == 60)
        {
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v85, v30, v31);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v85, NullValue, (llvm::Value *)1);
        }
      }
      goto LABEL_158;
    }
    int v89 = 1;
    while (v41 != -1)
    {
      unsigned int v90 = v39 + v89++;
      unsigned int v39 = v90 & v190;
      uint64_t v40 = (int *)(v194 + 152 * v39);
      int v41 = *v40;
      unsigned int v42 = v198;
      if (*v40 == v38) {
        goto LABEL_66;
      }
    }
LABEL_67:
    uint64_t v43 = *(void *)(v28 + 8);
    if (v43)
    {
      unint64_t v188 = v38;
      while (1)
      {
        uint64_t v44 = *(void *)(v43 + 24);
        if (*(unsigned char *)(v44 + 16) == 60)
        {
          uint64_t v45 = *(void *)(v44 + 8);
          if (v45) {
            break;
          }
        }
LABEL_134:
        uint64_t v43 = *(void *)(v43 + 8);
        if (!v43) {
          goto LABEL_158;
        }
      }
      while (2)
      {
        uint64_t v61 = *(void *)(v45 + 24);
        if (*(unsigned char *)(v61 + 16) == 62)
        {
          DWORD2(v213) = 64;
          *(void *)&long long v213 = 0;
          int v62 = *(_DWORD *)(v61 + 20);
          if ((v62 & 0x40000000) != 0)
          {
            uint64_t v59 = *(void *)(v61 - 8);
            uint64_t v60 = v62 & 0x7FFFFFF;
          }
          else
          {
            uint64_t v60 = v62 & 0x7FFFFFF;
            uint64_t v59 = v61 - 32 * v60;
          }
          v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216.__r_.__value_.__r.__words[2];
          v216.__r_.__value_.__l.__size_ = 0x600000000;
          unint64_t v63 = 32 * v60 - 32;
          if (v63 >= 0xC1) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v64 = (llvm::Constant **)&v216.__r_.__value_.__r.__words[2];
          if (v60 != 1)
          {
            uint64_t v65 = (std::string::size_type *)(v59 + 32);
            unint64_t v66 = &v216.__r_.__value_.__r.__words[2];
            uint64_t v67 = 32 * v60 - 32;
            do
            {
              std::string::size_type v68 = *v65;
              v65 += 4;
              *v66++ = v68;
              v67 -= 32;
            }
            while (v67);
            uint64_t v64 = (llvm::Constant **)v216.__r_.__value_.__r.__words[0];
          }
          LODWORD(v216.__r_.__value_.__r.__words[1]) = v63 >> 5;
          BOOL v69 = *(unsigned char *)(v61 + 16) != 62 || v61 == 0;
          uint64_t v70 = 24;
          if (!v69) {
            uint64_t v70 = 64;
          }
          int v71 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(v61 + v70), v64, (v63 >> 5), v27, (llvm::APInt *)&v213, 0, v32);
          if ((std::string::size_type *)v216.__r_.__value_.__l.__data_ == &v216.__r_.__value_.__r.__words[2])
          {
            if (!v71) {
              goto LABEL_130;
            }
LABEL_120:
            if (DWORD2(v213) > 0x40)
            {
              unint64_t v72 = *(void *)v213;
              if ((*(void *)v213 & 0x8000000000000000) != 0) {
                goto LABEL_130;
              }
            }
            else
            {
              unint64_t v72 = (uint64_t)((void)v213 << -BYTE8(v213)) >> -BYTE8(v213);
              if ((v72 & 0x8000000000000000) != 0) {
                goto LABEL_130;
              }
            }
            int v73 = *(unsigned __int8 **)(v61 + 72);
            unsigned int v46 = v73[8];
            if (v46 > 0x11) {
              goto LABEL_75;
            }
            if (((1 << v46) & 0xAC7F) != 0) {
              goto LABEL_126;
            }
            if (((1 << v46) & 0x30000) == 0)
            {
LABEL_75:
              BOOL v47 = (v46 & 0xFE) == 0x12 || v46 == 21;
              if (!v47) {
                goto LABEL_130;
              }
            }
            if (!llvm::Type::isSizedDerivedType(*(void *)(v61 + 72), 0)) {
              goto LABEL_130;
            }
            unsigned int v46 = v73[8];
LABEL_126:
            if (v46 != 15)
            {
              uint64_t v74 = (llvm *)sub_1CB83544C((uint64_t)v27, (uint64_t)v73);
              uint64_t v76 = v74;
              if (v75 == 1) {
              if ((v200 & 1) == 0)
              }
              {
                unsigned int v189 = v76;
                int v48 = llvm::dbgs(v74);
                uint64_t v49 = v48;
                uint64_t v50 = (void *)*((void *)v48 + 4);
                if (*((void *)v48 + 3) - (void)v50 > 0x22uLL)
                {
                  qmemcpy(v50, "Found candidate address for buffer ", 35);
                  *((void *)v48 + 4) += 35;
                }
                else
                {
                  llvm::raw_ostream::write(v48, "Found candidate address for buffer ", 0x23uLL);
                }
                sub_1CD098D14(v49, v188, 0, 0, 0);
                unint64_t v51 = (_DWORD *)*((void *)v49 + 4);
                if (*((void *)v49 + 3) - (void)v51 > 3uLL)
                {
                  *unint64_t v51 = 544497952;
                  *((void *)v49 + 4) += 4;
                }
                else
                {
                  llvm::raw_ostream::write(v49, " at ", 4uLL);
                }
                sub_1CD098D14(v49, v72, 0, 0, 0);
                unint64_t v52 = (_DWORD *)*((void *)v49 + 4);
                if (*((void *)v49 + 3) - (void)v52 > 6uLL)
                {
                  *(_DWORD *)((char *)v52 + 3) = 540697968;
                  *unint64_t v52 = 1887007776;
                  *((void *)v49 + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(v49, " type: ", 7uLL);
                }
                llvm::Type::print((llvm::Type *)v73, v49, 0, 0);
                uint64_t v53 = *((void *)v49 + 4);
                if ((unint64_t)(*((void *)v49 + 3) - v53) > 0xB)
                {
                  *(_DWORD *)(v53 + 8) = 678655081;
                  *(void *)uint64_t v53 = *(void *)" sizeInBits(";
                  *((void *)v49 + 4) += 12;
                }
                else
                {
                  llvm::raw_ostream::write(v49, " sizeInBits(", 0xCuLL);
                }
                unint64_t v54 = (int)v189;
                if ((void)v189 << 32 < (int64_t)0xFFFFFFFF00000001)
                {
                  unint64_t v54 = -(uint64_t)(int)v189;
                  long long v55 = v49;
                  int v56 = 1;
                }
                else
                {
                  long long v55 = v49;
                  int v56 = 0;
                }
                sub_1CD098D14(v55, v54, 0, 0, v56);
                uint64_t v57 = *((void *)v49 + 4);
                if ((unint64_t)(*((void *)v49 + 3) - v57) > 2)
                {
                  *(unsigned char *)(v57 + 2) = 32;
                  *(_WORD *)uint64_t v57 = 14889;
                  *((void *)v49 + 4) += 3;
                }
                else
                {
                  llvm::raw_ostream::write(v49, "): ", 3uLL);
                }
                llvm::Value::print((llvm::Value *)v61, v49, 0);
                uint64_t v58 = (unsigned char *)*((void *)v49 + 4);
                if ((unint64_t)v58 >= *((void *)v49 + 3))
                {
                  llvm::raw_ostream::write(v49, 10);
                }
                else
                {
                  *((void *)v49 + 4) = v58 + 1;
                  *uint64_t v58 = 10;
                }
              }
            }
          }
          else
          {
            free(v216.__r_.__value_.__l.__data_);
            if (v71) {
              goto LABEL_120;
            }
          }
LABEL_130:
          if (DWORD2(v213) >= 0x41 && (void)v213) {
            MEMORY[0x1D25D9CB0](v213, 0x1000C8000313F17);
          }
        }
        uint64_t v45 = *(void *)(v45 + 8);
        if (!v45) {
          goto LABEL_134;
        }
        continue;
      }
    }
LABEL_158:
    int v87 = v22 + 1;
    int v15 = v192;
    uint64_t v18 = v194;
    unsigned int v17 = v198;
    while (v87 != (unint64_t *)v191)
    {
      unint64_t v88 = *v87++;
      std::string::size_type v28 = v88;
      if (v88 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v22 = v87 - 1;
        goto LABEL_55;
      }
    }
  }
LABEL_166:
  if (__p)
  {
    unint64_t v210 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v208.__r_.__value_.__r.__words[0], 8);
  if (v196 < 0) {
    operator delete(v193);
  }
  if (v17)
  {
    uint64_t v91 = 152 * v17;
    int v92 = (char **)(v18 + 8);
    do
    {
      if (*((_DWORD *)v92 - 2) <= 0xFFFFFFFD) {
        int v92 = sub_1CD5010D8(v92);
      }
      v92 += 19;
      v91 -= 152;
    }
    while (v91);
  }
  MEMORY[0x1D25D9CD0](v18, 8);
LABEL_176:
  if (v201.__r_.__value_.__l.__size_ != v201.__r_.__value_.__r.__words[0]) {
    free((void *)v201.__r_.__value_.__l.__size_);
  }
LABEL_178:
  if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v204.__r_.__value_.__l.__data_);
  }
  if (v15) {
    (*(void (**)(const llvm::MemoryBuffer *))(*(void *)v15 + 8))(v15);
  }
  return 0;
}

_DWORD *sub_1CC889790(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  unsigned int v4 = (char **)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  double result = operator new(152 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    unsigned int v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 152 * v10;
      do
      {
        *double result = -1;
        result += 38;
        v11 -= 152;
      }
      while (v11);
    }
    if (!v3)
    {
LABEL_47:
      JUMPOUT(0x1D25D9CD0);
    }
    uint64_t v12 = v4;
    while (1)
    {
      unsigned int v13 = *(_DWORD *)v12;
      if (*(_DWORD *)v12 <= 0xFFFFFFFD) {
        break;
      }
LABEL_42:
      v12 += 19;
      if (v12 == &v4[19 * v3]) {
        goto LABEL_47;
      }
    }
    int v14 = *((_DWORD *)a1 + 4);
    if (v14)
    {
      int v15 = v14 - 1;
      unsigned int v16 = v15 & (37 * v13);
      uint64_t v17 = *a1 + 152 * v16;
      int v18 = *(_DWORD *)v17;
      if (v13 != *(_DWORD *)v17)
      {
        uint64_t v19 = 0;
        int v20 = 1;
        while (v18 != -1)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v18 == -2;
          }
          if (v21) {
            uint64_t v19 = v17;
          }
          unsigned int v22 = v16 + v20++;
          unsigned int v16 = v22 & v15;
          uint64_t v17 = *a1 + 152 * v16;
          int v18 = *(_DWORD *)v17;
          if (v13 == *(_DWORD *)v17) {
            goto LABEL_23;
          }
        }
        if (v19) {
          uint64_t v17 = v19;
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
LABEL_23:
    uint64_t v23 = v17 + 24;
    *(void *)(v17 + 8) = v17 + 24;
    *(_DWORD *)uint64_t v17 = v13;
    *(void *)(v17 + 16) = 0x400000000;
    uint64_t v24 = *((unsigned int *)v12 + 4);
    if ((char **)v17 == v12 || v24 == 0)
    {
LABEL_41:
      ++*((_DWORD *)a1 + 2);
      sub_1CD5010D8(v12 + 1);
      goto LABEL_42;
    }
    uint64_t v26 = (int *)v12[1];
    if (v26 != (int *)(v12 + 3))
    {
      int v27 = *((_DWORD *)v12 + 5);
      *(void *)(v17 + 8) = v26;
      *(_DWORD *)(v17 + 16) = v24;
      *(_DWORD *)(v17 + 20) = v27;
      v12[1] = (char *)(v12 + 3);
      *((_DWORD *)v12 + 5) = 0;
LABEL_40:
      *((_DWORD *)v12 + 4) = 0;
      goto LABEL_41;
    }
    if (v24 <= 4)
    {
      uint64_t v29 = (long long *)&v26[8 * v24];
    }
    else
    {
      sub_1CC889A54(v17 + 8, *((unsigned int *)v12 + 4));
      uint64_t v26 = (int *)v12[1];
      uint64_t v28 = *((unsigned int *)v12 + 4);
      if (!v28) {
        goto LABEL_35;
      }
      uint64_t v23 = *(void *)(v17 + 8);
      uint64_t v29 = (long long *)&v26[8 * v28];
    }
    do
    {
      long long v30 = *(_OWORD *)v26;
      *(void *)(v23 + 16) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v23 = v30;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = 0;
      *(void *)uint64_t v26 = 0;
      *(_DWORD *)(v23 + 24) = v26[6];
      v26 += 8;
      v23 += 32;
    }
    while (v26 != (int *)v29);
    uint64_t v26 = (int *)v12[1];
LABEL_35:
    *(_DWORD *)(v17 + 16) = v24;
    uint64_t v31 = *((unsigned int *)v12 + 4);
    if (v31)
    {
      uint64_t v32 = 8 * v31;
      do
      {
        if (*((char *)&v26[v32 - 2] - 1) < 0) {
          operator delete(*(void **)&v26[v32 - 8]);
        }
        v32 -= 8;
      }
      while (v32 * 4);
    }
    goto LABEL_40;
  }
  a1[1] = 0;
  unsigned int v33 = *((_DWORD *)a1 + 4);
  if (v33)
  {
    uint64_t v34 = 152 * v33;
    do
    {
      *double result = -1;
      result += 38;
      v34 -= 152;
    }
    while (v34);
  }
  return result;
}

void sub_1CC889A54(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = malloc_type_malloc(32 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v7 = v6;
  unsigned int v8 = *(char **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unsigned int v10 = &v8[32 * v9];
    uint64_t v11 = v6;
    do
    {
      long long v12 = *(_OWORD *)v8;
      v11[2] = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)unsigned int v8 = 0;
      *((_DWORD *)v11 + 6) = *((_DWORD *)v8 + 6);
      v8 += 32;
      v11 += 4;
    }
    while (v8 != v10);
    unsigned int v8 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13)
    {
      uint64_t v14 = 32 * v13;
      do
      {
        if (v8[v14 - 9] < 0) {
          operator delete(*(void **)&v8[v14 - 32]);
        }
        v14 -= 32;
      }
      while (v14);
      unsigned int v8 = *(char **)a1;
    }
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC889B7C()
{
  *(void *)&long long v3 = "List and print out all the candidates for replacement";
  *((void *)&v3 + 1) = 53;
  char v1 = 0;
  int v2 = &v1;
  sub_1CD646150(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCDD0B8, &dword_1CB82C000);
}

void sub_1CC889BE4()
{
}

void sub_1CC889C7C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD178;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2620088;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD180, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC889BE4;
    v3[1] = &PassRegistry;
    int v2 = v3;
    std::__call_once(&qword_1EBCDD180, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
  operator new();
}

void sub_1CC889DE4()
{
}

void sub_1CC889E28(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2620088;
  sub_1CC88A828(a1 + 4, 0);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC889E80(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F2620088;
  sub_1CC88A828(a1 + 4, 0);
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC889EEC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC889F00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 120);
  if (v2 || *(_DWORD *)(v1 + 124))
  {
    uint64_t v3 = *(unsigned int *)(v1 + 128);
    unint64_t v4 = *(void **)(v1 + 112);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        uint64_t v8 = 24 * v3;
        do
        {
          *unint64_t v4 = -4096;
          v4 += 3;
          v8 -= 24;
        }
        while (v8);
      }
      *(void *)(v1 + 120) = 0;
    }
    else if (v2)
    {
      int v5 = 1 << (33 - __clz(v2 - 1));
      if (v5 <= 64) {
        int v6 = 64;
      }
      else {
        int v6 = v5;
      }
      if (v6 == v3)
      {
        *(void *)(v1 + 120) = 0;
        uint64_t v7 = 24 * v3;
        do
        {
          *unint64_t v4 = -4096;
          v4 += 3;
          v7 -= 24;
        }
        while (v7);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v4, 8);
        unint64_t v9 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
        unint64_t v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
        *(_DWORD *)(v1 + 128) = v10;
        uint64_t v11 = operator new(24 * v10, (std::align_val_t)8uLL);
        *(void *)(v1 + 112) = v11;
        *(void *)(v1 + 120) = 0;
        uint64_t v12 = *(unsigned int *)(v1 + 128);
        if (v12)
        {
          uint64_t v13 = 24 * v12;
          do
          {
            *uint64_t v11 = -4096;
            v11 += 3;
            v13 -= 24;
          }
          while (v13);
        }
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](v4, 8);
      *(void *)(v1 + 112) = 0;
      *(void *)(v1 + 120) = 0;
      *(_DWORD *)(v1 + 128) = 0;
    }
  }
  uint64_t result = sub_1CBB0ECB4(v1 + 16);
  *(_DWORD *)(v1 + 144) = 0;
  return result;
}

uint64_t sub_1CC88A054(uint64_t a1, llvm *a2)
{
  v112[16] = *MEMORY[0x1E4F143B8];
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5) {
    uint64_t v6 = v5 + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (unsigned __int8 *)*((void *)a2 + 5);
  if ((char)v8[239] < 0) {
    sub_1CB8BDF7C((uint64_t)&__p, *((const void **)v8 + 27), *((void *)v8 + 28));
  }
  else {
    std::string __p = *(std::string *)(v8 + 9);
  }
  if (!std::string::compare(&__p, 0, 4uLL, "agx1"))
  {
    int v11 = 27;
  }
  else if (!std::string::compare(&__p, 0, 4uLL, "agx2"))
  {
    int v11 = 28;
  }
  else if (!std::string::compare(&__p, 0, 4uLL, "agx3"))
  {
    int v11 = 29;
  }
  else
  {
    int v11 = 0;
  }
  *(_DWORD *)(v7 + 8) = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v12 = llvm::removeUnreachableBlocks(a2, 0, 0, v9, v10);
  int v17 = v12;
  if (v5 && v12)
  {
    *(void *)(v6 + 56) = a2;
    sub_1CC5A43B0(v6, 0);
  }
  int v18 = (unsigned __int8 *)*((void *)a2 + 5);
  unsigned int v100 = (void *)1;
  uint64_t v19 = 8;
  int64x2_t v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v100 + v19) = v20;
    v19 += 16;
  }
  while (v19 != 136);
  uint64_t v110 = v112;
  uint64_t v111 = 0x1000000000;
  BOOL v21 = (unsigned __int8 **)((char *)a2 + 72);
  for (uint64_t i = (unsigned __int8 **)*((void *)a2 + 10); ; uint64_t i = (unsigned __int8 **)i[1])
  {
    if (i == v21)
    {
      int v25 = 0;
      goto LABEL_59;
    }
    uint64_t v23 = i - 3;
    if (!i) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23[6];
    if (v24 != (unsigned __int8 *)(v23 + 5)) {
      break;
    }
  }
  int v25 = 0;
  uint64_t v26 = (uint64_t)(v18 + 272);
  do
  {
    if (v24) {
      int v27 = (llvm *)(v24 - 24);
    }
    else {
      int v27 = 0;
    }
    uint64_t v24 = (unsigned __int8 *)*((void *)v24 + 1);
    uint64_t v28 = i - 3;
    if (!i) {
      uint64_t v28 = 0;
    }
    if (v24 == (unsigned __int8 *)(v28 + 5))
    {
      uint64_t v36 = i[1];
      uint64_t i = (unsigned __int8 **)((char *)a2 + 72);
      if (v36 != (unsigned __int8 *)v21)
      {
        while (1)
        {
          uint64_t v37 = v36 - 24;
          if (!v36) {
            uint64_t v37 = 0;
          }
          uint64_t v24 = (unsigned __int8 *)*((void *)v37 + 6);
          if (v24 != v37 + 40) {
            break;
          }
          uint64_t v36 = (unsigned __int8 *)*((void *)v36 + 1);
          if (v36 == (unsigned __int8 *)v21)
          {
            uint64_t i = (unsigned __int8 **)((char *)a2 + 72);
            goto LABEL_36;
          }
        }
        uint64_t i = (unsigned __int8 **)v36;
      }
    }
LABEL_36:
    if (v100)
    {
      int v29 = 16;
      long long v30 = &v101;
    }
    else
    {
      int v29 = v102[0];
      if (!LODWORD(v102[0])) {
        goto LABEL_45;
      }
      long long v30 = (uint64_t *)v101;
    }
    int v31 = v29 - 1;
    unsigned int v32 = v31 & ((v27 >> 4) ^ (v27 >> 9));
    unsigned int v33 = (llvm *)v30[v32];
    if (v27 == v33) {
      continue;
    }
    int v34 = 1;
    while (v33 != (llvm *)-4096)
    {
      unsigned int v35 = v32 + v34++;
      unsigned int v32 = v35 & v31;
      unsigned int v33 = (llvm *)v30[v32];
      if (v27 == v33) {
        goto LABEL_46;
      }
    }
LABEL_45:
    v25 |= sub_1CC88EC10(v27, (uint64_t)&v100, v26, v13, v14, v15, v16);
LABEL_46:
    ;
  }
  while (i != v21);
  while (v111)
  {
    unint64_t v38 = (char *)v110 + 8 * v111;
    unsigned int v39 = (llvm *)*((void *)v38 - 1);
    sub_1CBFD6090((uint64_t)&v100, (void *)v38 - 1);
    LODWORD(v111) = v111 - 1;
    v25 |= sub_1CC88EC10(v39, (uint64_t)&v100, v26, v40, v41, v42, v43);
  }
LABEL_59:
  if (v110 != v112) {
    free(v110);
  }
  if ((v100 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v101, 8);
  }
  int v44 = v17 | v25;
  uint64_t v45 = (unsigned __int8 *)*((void *)a2 + 12);
  if (v45)
  {
    uint64_t v46 = 0;
    BOOL v47 = (unsigned __int8 *)*((void *)a2 + 10);
    if (v47) {
      int v48 = v47 - 24;
    }
    else {
      int v48 = 0;
    }
    uint64_t v49 = (unsigned __int8 *)*((void *)v48 + 6);
    uint64_t v50 = (uint64_t **)(v49 - 24);
    if (!v49) {
      uint64_t v50 = 0;
    }
    uint64_t v51 = **v50;
    unsigned int v100 = v102;
    uint64_t v101 = 0x200000000;
    v102[6] = v51;
    v102[7] = &v108;
    v102[8] = &v109;
    v102[9] = 0;
    int v103 = 0;
    __int16 v104 = 512;
    char v105 = 7;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = &unk_1F2616E88;
    size_t v109 = &unk_1F2617008;
    v102[4] = v50[5];
    v102[5] = v50 + 3;
    unint64_t v52 = (unsigned __int8 *)v50[6];
    uint64_t v98 = v52;
    if (v52)
    {
      llvm::MetadataTracking::track((uint64_t)&v98, v52, 2);
      uint64_t v46 = (uint64_t)v98;
    }
    sub_1CB8461A4((uint64_t)&v100, 0, v46);
    if (v98)
    {
      int v93 = *v98;
      if ((v93 - 4) > 0x1E)
      {
        if ((v93 - 3) >= 0xFFFFFFFE) {
          std::string::size_type v96 = v98;
        }
        else {
          std::string::size_type v96 = 0;
        }
        if ((v93 - 3) < 0xFFFFFFFE)
        {
          if (v93 == 3) {
            *((void *)v98 + 1) = 0;
          }
          goto LABEL_72;
        }
        unint64_t v95 = (unint64_t)(v96 + 8);
      }
      else
      {
        if ((v98[1] & 0x7F) != 2 && !*((_DWORD *)v98 + 3)) {
          goto LABEL_72;
        }
        uint64_t v94 = *((void *)v98 + 2);
        if ((v94 & 4) == 0) {
          goto LABEL_72;
        }
        unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (!v95) {
          goto LABEL_72;
        }
      }
      unsigned int v99 = &v98;
      sub_1CC5FA668(v95 + 16, &v99);
    }
LABEL_72:
    if ((*((_WORD *)a2 + 9) & 1) == 0)
    {
      uint64_t v53 = (llvm::Instruction *)*((void *)a2 + 11);
      goto LABEL_74;
    }
    llvm::Function::BuildLazyArguments(a2);
    uint64_t v53 = (llvm::Instruction *)*((void *)a2 + 11);
    if (*((_WORD *)a2 + 9))
    {
      llvm::Function::BuildLazyArguments(a2);
      unint64_t v54 = (llvm::Instruction *)*((void *)a2 + 11);
    }
    else
    {
LABEL_74:
      unint64_t v54 = v53;
    }
    int v55 = v44 & 1;
    for (unint64_t j = (llvm::Instruction *)((char *)v54 + 40 * *((void *)a2 + 12));
          v53 != j;
          uint64_t v53 = (llvm::Instruction *)((char *)v53 + 40))
    {
      if ((*(_DWORD *)(*(void *)v53 + 8) & 0xFE) == 0x12)
      {
        uint64_t v57 = sub_1CC88E770(v7 + 16, (uint64_t)v53, *(_DWORD *)(*(void *)v53 + 32));
        sub_1CC88A938(v53, (uint64_t)&v100, (const llvm::APInt *)v57, 0);
      }
    }
    uint64_t v58 = (unsigned __int8 *)*((void *)a2 + 10);
    if (v58) {
      uint64_t v59 = v58 - 24;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v49 != v59 + 40)
    {
      do
      {
        uint64_t v60 = (unsigned __int8 *)*((void *)v49 + 1);
        if (v49) {
          uint64_t v61 = (uint64_t)(v49 - 24);
        }
        else {
          uint64_t v61 = 0;
        }
        v55 |= sub_1CC88AAB4(v7, v61);
        int v62 = (unsigned __int8 *)*((void *)a2 + 10);
        if (v62) {
          unint64_t v63 = v62 - 24;
        }
        else {
          unint64_t v63 = 0;
        }
        uint64_t v49 = v60;
      }
      while (v60 != v63 + 40);
    }
    if (v100 != v102) {
      free(v100);
    }
    int v44 = v55 & 1;
  }
  unsigned int v99 = (unsigned __int8 **)a2;
  unsigned int v100 = 0;
  uint64_t v101 = 0;
  v102[0] = 0;
  sub_1CC86D39C((char **)&v100, (uint64_t)&v99);
  uint64_t v65 = (char *)v100;
  for (uint64_t k = (char *)v101; k != v65; k -= 8)
  {
    uint64_t v67 = *((void *)k - 1);
    uint64_t v66 = v67;
    if (v45)
    {
      std::string::size_type v68 = (unsigned __int8 *)*((void *)a2 + 10);
      uint64_t v69 = v68 ? (uint64_t)(v68 - 24) : 0;
      if (v66 == v69) {
        continue;
      }
    }
    uint64_t v70 = v66 + 40;
    uint64_t v71 = *(void *)(v66 + 48);
    if (v71 != v70)
    {
      do
      {
        uint64_t v72 = *(void *)(v71 + 8);
        if (v71) {
          uint64_t v73 = v71 - 24;
        }
        else {
          uint64_t v73 = 0;
        }
        v44 |= sub_1CC88AAB4(v7, v73);
        uint64_t v71 = v72;
      }
      while (v72 != v70);
    }
  }
  uint64_t v74 = *(unsigned int *)(v7 + 144);
  if (v74)
  {
    uint64_t v75 = *(uint64_t **)(v7 + 136);
    uint64_t v76 = &v75[v74];
    do
    {
      uint64_t v77 = (void *)*v75;
      if ((*(_DWORD *)(*(void *)*v75 + 8) & 0xFE) == 0x12) {
        uint64_t v78 = *(void *)*v75;
      }
      else {
        uint64_t v78 = 0;
      }
      uint64_t v79 = sub_1CC88E770(v7 + 16, *v75, *(_DWORD *)(v78 + 32));
      if (*(_DWORD *)(v78 + 32))
      {
        unint64_t v81 = v79;
        unint64_t v82 = 0;
        do
        {
          sub_1CC88E99C(v7, *(void *)(*v81 + 8 * v82), (uint64_t)v77, (const llvm::APFloat *)v82);
          ++v82;
        }
        while (v82 < *(unsigned int *)(v78 + 32));
      }
      ++v75;
    }
    while (v75 != v76);
    if (*(_DWORD *)(v7 + 144))
    {
      size_t v83 = *(llvm::UndefValue ****)(v7 + 136);
      unint64_t v84 = *v83;
      int v85 = *((_DWORD *)*v83 + 5);
      if ((v85 & 0x40000000) != 0)
      {
        int v87 = (llvm::UndefValue **)*(v84 - 1);
        uint64_t v86 = v85 & 0x7FFFFFF;
        if (v86) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v86 = v85 & 0x7FFFFFF;
        int v87 = &v84[-4 * v86];
        if (v86)
        {
LABEL_118:
          uint64_t v88 = 32 * v86;
          int v89 = (void **)(v87 + 2);
          do
          {
            if (*(v89 - 2))
            {
              *void *v89 = *(v89 - 1);
              uint64_t v90 = (uint64_t)*(v89 - 1);
              if (v90) {
                *(void *)(v90 + 16) = *v89;
              }
            }
            *(v89 - 2) = 0;
            v89 += 4;
            v88 -= 32;
          }
          while (v88);
        }
      }
      uint64_t v91 = llvm::UndefValue::get(*v84, v80);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v84, v91, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
  if (v100)
  {
    uint64_t v101 = (uint64_t)v100;
    operator delete(v100);
  }
  return v44 & 1;
}

uint64_t *sub_1CC88A828(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 136);
    if (v3 != (void *)(v2 + 152)) {
      free(v3);
    }
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 112), 8);
    sub_1CBB0ECB4(v2 + 16);
    uint64_t v4 = *(unsigned int *)(v2 + 40);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)(v2 + 32);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5++;
        MEMORY[0x1D25D9CD0](v7, 8);
        v6 -= 8;
      }
      while (v6);
    }
    uint64_t v8 = *(uint64_t **)(v2 + 80);
    uint64_t v9 = *(unsigned int *)(v2 + 88);
    if (v9)
    {
      uint64_t v11 = 16 * v9;
      do
      {
        uint64_t v12 = *v8;
        v8 += 2;
        MEMORY[0x1D25D9CD0](v12, 8);
        v11 -= 16;
      }
      while (v11);
      uint64_t v8 = *(uint64_t **)(v2 + 80);
    }
    if (v8 != (uint64_t *)(v2 + 96)) {
      free(v8);
    }
    unint64_t v10 = *(void **)(v2 + 32);
    if (v10 != (void *)(v2 + 48)) {
      free(v10);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

llvm::Instruction *sub_1CC88A938(llvm::Instruction *result, uint64_t a2, const llvm::APInt *a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(*(void *)result + 32);
  if (v4)
  {
    uint64_t v7 = (unsigned __int8 *)result;
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v10 = **(void **)(a2 + 64);
      uint64_t v11 = *(llvm::ConstantInt **)(v10 + 1960);
      unint64_t v12 = *(unsigned int *)(v10 + 1968);
      unsigned int v16 = v12 >> 8;
      if (v12 >> 8 > 0x40) {
        operator new[]();
      }
      if (v12 <= 0xFF) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v12) + 63);
      }
      unint64_t v15 = v13 & i;
      uint64_t v14 = (unsigned __int8 *)llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v15, a3);
      if (v16 >= 0x41)
      {
        if (v15) {
          MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
        }
      }
      __int16 v17 = 257;
      uint64_t result = sub_1CB8445F4(a2, v7, v14, (uint64_t)&v15);
      *(void *)(*(void *)a3 + 8 * (a4 + i)) = result;
    }
  }
  return result;
}

uint64_t sub_1CC88AAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t ***)a2;
  v538[1] = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v3 != 89)
  {
    if (!a2 || v3 != 61) {
      goto LABEL_67;
    }
    uint64_t v508 = (uint64_t ***)a2;
    uint64_t v22 = **(void **)(a2 - 64);
    if (v22) {
      BOOL v23 = (*(_DWORD *)(v22 + 8) & 0xFE) == 18;
    }
    else {
      BOOL v23 = 0;
    }
    if (!v23) {
      goto LABEL_43;
    }
    uint64_t v507 = 0;
    uint64_t v24 = *(llvm::FixedVectorType ***)(v22 + 16);
    uint64_t v507 = *v24;
    int v25 = *(void **)v22;
    unsigned int v26 = *(_DWORD *)a1;
    unsigned int v506 = *(_DWORD *)a1 >> 5;
    unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v24);
    unsigned int v28 = *(_DWORD *)(v22 + 32);
    unsigned int v505 = v28;
    uint64_t v29 = (uint64_t)**(v2 - 4);
    unsigned int v30 = *(_DWORD *)(v29 + 8);
    if ((v30 & 0xFE) == 0x12) {
      unsigned int v30 = *(_DWORD *)(**(void **)(v29 + 16) + 8);
    }
    unsigned int v31 = v30 >> 8;
    if (v31 == 64)
    {
LABEL_43:
      int v41 = *v2;
      int v3 = 61;
      goto LABEL_78;
    }
    if (v31 == 3) {
      unsigned int v26 = *(_DWORD *)(a1 + 4);
    }
    unsigned int v32 = 0;
    unsigned int v33 = **v2;
    int v523 = (char *)v525;
    uint64_t v524 = 0x200000000;
    BOOL v528 = v33;
    unsigned int v529 = &v537;
    unsigned int v530 = v538;
    uint64_t v531 = 0;
    int v532 = 0;
    __int16 v533 = 512;
    char v534 = 7;
    uint64_t v535 = 0;
    uint64_t v536 = 0;
    uint64_t v537 = &unk_1F2616E88;
    v538[0] = &unk_1F2617008;
    int v34 = (char *)v2[6];
    uint64_t v526 = v2[5];
    int v527 = v2 + 3;
    uint64_t v509 = v34;
    if (v34)
    {
      llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v34, 2);
      unsigned int v32 = v509;
    }
    sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v32);
    if (!v509)
    {
LABEL_34:
      if (v26 <= PrimitiveSizeInBits || v28 == 1)
      {
        unsigned int v37 = 1;
        int v504 = 1;
        uint64_t v36 = v507;
        unsigned int v26 = PrimitiveSizeInBits;
      }
      else
      {
        int v504 = v26 / PrimitiveSizeInBits;
        llvm::FixedVectorType::get(v507, (llvm::Type *)(v26 / PrimitiveSizeInBits));
        uint64_t v36 = v35;
        unsigned int v37 = v26 / PrimitiveSizeInBits;
      }
      if (PrimitiveSizeInBits == 16 && v505 % v37 > v506) {
        int v54 = v505 & 1;
      }
      else {
        int v54 = 0;
      }
      unsigned int v55 = v28 * PrimitiveSizeInBits;
      char v503 = v54;
      if (v28 == 1 || (v55 <= v26 ? (BOOL v56 = v54 == 0) : (BOOL v56 = 0), !v56))
      {
        unsigned int v107 = v37 * PrimitiveSizeInBits;
        uint64_t v108 = (uint64_t)**(v508 - 4);
        unsigned int v109 = *(_DWORD *)(v108 + 8);
        if ((v109 & 0xFE) == 0x12) {
          unsigned int v109 = *(_DWORD *)(**(void **)(v108 + 16) + 8);
        }
        unint64_t v111 = llvm::PointerType::get(v36, (llvm::Type *)(v109 >> 8));
        int v112 = v508;
        uint64_t v113 = 1 << ((unint64_t)*((unsigned __int16 *)v508 + 9) >> 1);
        int v502 = v113;
        if (v107 >> 3 < v113) {
          LODWORD(v113) = v107 >> 3;
        }
        int v501 = v113;
        uint64_t v500 = 0;
        int v114 = *((_DWORD *)v508 + 5);
        if (v508[6])
        {
          if ((v114 & 0x20000000) == 0) {
            goto LABEL_189;
          }
        }
        else if ((v114 & 0x20000000) == 0)
        {
          goto LABEL_192;
        }
        uint64_t v140 = ***v508;
        uint64_t v512 = v508;
        int v141 = *(_DWORD *)(v140 + 2496);
        if (v141)
        {
          uint64_t v142 = *(void *)(v140 + 2480);
          int v143 = v141 - 1;
          unsigned int v144 = (v141 - 1) & ((v508 >> 4) ^ (v508 >> 9));
          unsigned int v145 = (uint64_t ****)(v142 + 40 * v144);
          int v146 = *v145;
          if (*v145 == v508) {
            goto LABEL_184;
          }
          uint64_t v147 = 0;
          int v148 = 1;
          while (v146 != (uint64_t ***)-4096)
          {
            if (v147) {
              BOOL v149 = 0;
            }
            else {
              BOOL v149 = v146 == (uint64_t ***)-8192;
            }
            if (v149) {
              uint64_t v147 = v145;
            }
            unsigned int v150 = v144 + v148++;
            unsigned int v144 = v150 & v143;
            unsigned int v145 = (uint64_t ****)(v142 + 40 * (v150 & v143));
            int v146 = *v145;
            if (*v145 == v508) {
              goto LABEL_184;
            }
          }
          if (v147) {
            int v308 = v147;
          }
          else {
            int v308 = v145;
          }
        }
        else
        {
          int v308 = 0;
        }
        unsigned int v145 = (uint64_t ****)sub_1CC609054(v140 + 2480, (uint64_t)&v512, (uint64_t *)&v512, v308);
        uint64_t v309 = (uint64_t ***)v512;
        v145[3] = 0;
        v145[4] = 0;
        *unsigned int v145 = v309;
        v145[1] = (uint64_t ***)(v145 + 3);
        v145[2] = (uint64_t ***)0x100000000;
LABEL_184:
        uint64_t v151 = *((unsigned int *)v145 + 4);
        if (v151)
        {
          uint64_t v152 = v145[1] + 1;
          uint64_t v153 = 16 * v151;
          while (*((_DWORD *)v152 - 2) != 1)
          {
            uint64_t v154 = 0;
            v152 += 2;
            v153 -= 16;
            if (!v153) {
              goto LABEL_190;
            }
          }
          uint64_t v154 = *v152;
LABEL_190:
          int v112 = v508;
          unsigned int v155 = v508[6];
          uint64_t v499 = 0;
          uint64_t v500 = v154;
          if (v155 || (*((unsigned char *)v508 + 23) & 0x20) != 0)
          {
            Metadatauint64_t Impl = llvm::Instruction::getMetadataImpl(v508, "srcloc", 6uLL);
            int v112 = v508;
LABEL_194:
            uint64_t v499 = MetadataImpl;
            int v157 = (unsigned __int8 *)*(v112 - 4);
            unsigned int v158 = v157[16];
            if (v158 == 62) {
              uint64_t v159 = (uint64_t)*(v112 - 4);
            }
            else {
              uint64_t v159 = 0;
            }
            if (v159)
            {
              uint64_t v160 = *(void *)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF) + 32);
              if (v160) {
                BOOL v161 = *(unsigned __int8 *)(v160 + 16) - 67 >= 2;
              }
              else {
                BOOL v161 = 1;
              }
              int v162 = !v161;
            }
            else
            {
              int v162 = 0;
            }
            uint64_t v512 = &v505;
            uint64_t v513 = (uint64_t)&v504;
            v514[0] = &v523;
            v514[1] = &v501;
            unint64_t v515 = &v502;
            uint64_t v516 = a1;
            uint64_t v517 = &v508;
            uint64_t v518 = &v507;
            uint64_t v519 = &v500;
            uint64_t v520 = &v499;
            uint64_t v521 = &v503;
            uint64_t v522 = &v506;
            if (v162)
            {
              unsigned int v163 = v55 + v26 - 1;
              unint64_t v164 = *(unsigned __int8 **)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF));
              __int16 v498 = 257;
              if (*(void *)v164 != v111)
              {
                if (v164[16] <= 0x14u)
                {
                  unint64_t v164 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v529
                                             + 28))(v529, 49, v164, v111);
                  if (v164) {
                    BOOL v216 = v164[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v216 = 0;
                  }
                  if (v216)
                  {
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v164, v497, v526, v527);
                    if (v524)
                    {
                      int v468 = v523;
                      BOOL v469 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v164, *(_DWORD *)v468, *((llvm::MDNode **)v468 + 1));
                        v468 += 16;
                      }
                      while (v468 != v469);
                    }
                  }
                }
                else
                {
                  __int16 v511 = 257;
                  unint64_t v164 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v164, v111, &v509, 0);
                  (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v164, v497, v526, v527);
                  if (v524)
                  {
                    unint64_t v165 = v523;
                    unsigned int v166 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v164, *(_DWORD *)v165, *((llvm::MDNode **)v165 + 1));
                      v165 += 16;
                    }
                    while (v165 != v166);
                  }
                }
              }
              uint64_t v217 = v163 / v26;
              uint64_t v218 = *(unsigned __int8 **)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF) + 32);
              uint64_t v219 = *v25 + 1960;
              __int16 v498 = 257;
              if (*(void *)v218 != v219)
              {
                if (v218[16] <= 0x14u)
                {
                  uint64_t v218 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v529
                                             + 28))(v529, 38, v218, v219);
                  if (v218) {
                    BOOL v227 = v218[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v227 = 0;
                  }
                  if (v227)
                  {
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v218, v497, v526, v527);
                    if (v524)
                    {
                      uint64_t v472 = v523;
                      uint64_t v473 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v218, *(_DWORD *)v472, *((llvm::MDNode **)v472 + 1));
                        v472 += 16;
                      }
                      while (v472 != v473);
                    }
                  }
                }
                else
                {
                  __int16 v511 = 257;
                  uint64_t v218 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v218, v219, &v509, 0);
                  (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v218, v497, v526, v527);
                  if (v524)
                  {
                    uint64_t v220 = v523;
                    int v221 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v218, *(_DWORD *)v220, *((llvm::MDNode **)v220 + 1));
                      v220 += 16;
                    }
                    while (v220 != v221);
                  }
                }
              }
              unsigned int v228 = *(llvm::ConstantInt **)(*v528 + 1960);
              unsigned int v229 = *(_DWORD *)(*v528 + 1968);
              unsigned int v510 = v229 >> 8;
              if (v229 >> 8 > 0x40) {
                operator new[]();
              }
              if (v229 <= 0xFF) {
                unint64_t v230 = 0;
              }
              else {
                unint64_t v230 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v229) + 63);
              }
              uint64_t v509 = (const char *)(v230 & v217);
              unsigned int v231 = llvm::ConstantInt::get(v228, (llvm::LLVMContext *)&v509, v110);
              if (v510 >= 0x41 && v509) {
                MEMORY[0x1D25D9CB0](v509, 0x1000C8000313F17);
              }
              __int16 v511 = 257;
              BOOL v226 = sub_1CC09A1EC((uint64_t)&v523, (uint64_t)v218, (uint64_t)v231, (uint64_t)&v509, 0, 0);
              uint64_t v223 = *(void *)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF));
              uint64_t v224 = (uint64_t)v36;
              int v225 = (uint64_t *)v164;
            }
            else
            {
              __int16 v498 = 257;
              if (*(void *)v157 != v111)
              {
                if (v158 <= 0x14)
                {
                  int v157 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, unint64_t))*v529
                                             + 28))(v529, 49, v157, v111);
                  if (v157) {
                    BOOL v222 = v157[16] >= 0x1Cu;
                  }
                  else {
                    BOOL v222 = 0;
                  }
                  if (v222)
                  {
                    (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v157, v497, v526, v527);
                    if (v524)
                    {
                      unsigned int v470 = v523;
                      uint64_t v471 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v157, *(_DWORD *)v470, *((llvm::MDNode **)v470 + 1));
                        v470 += 16;
                      }
                      while (v470 != v471);
                    }
                  }
                }
                else
                {
                  __int16 v511 = 257;
                  int v157 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v157, v111, &v509, 0);
                  (*(void (**)(void *, unsigned __int8 *, void *, uint64_t **, void ***))(*v530 + 16))(v530, v157, v497, v526, v527);
                  if (v524)
                  {
                    size_t v167 = v523;
                    int v168 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata((llvm::Instruction *)v157, *(_DWORD *)v167, *((llvm::MDNode **)v167 + 1));
                      v167 += 16;
                    }
                    while (v167 != v168);
                  }
                }
              }
              uint64_t v223 = (uint64_t)*(v508 - 4);
              uint64_t v224 = (uint64_t)v36;
              int v225 = (uint64_t *)v157;
              BOOL v226 = 0;
            }
            sub_1CC88F7AC((unsigned int **)&v512, v224, v225, v223, v226);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
          }
LABEL_192:
          Metadatauint64_t Impl = 0;
          goto LABEL_194;
        }
LABEL_189:
        uint64_t v154 = 0;
        goto LABEL_190;
      }
      if (v523 != (char *)v525) {
        free(v523);
      }
      int v3 = *((unsigned __int8 *)v2 + 16);
LABEL_67:
      int v41 = *v2;
      if (v2 && v3 == 60)
      {
        int v57 = *((unsigned __int8 *)v41 + 8);
        if (!v41 || v57 != 18)
        {
LABEL_79:
          if ((v57 & 0xFE) != 0x12)
          {
            sub_1CC88F074(a1, (uint64_t **)v2);
            return 0;
          }
          if (v2 && v3 == 90)
          {
            uint64_t v67 = (uint64_t)*(v2 - 4);
            if (v67 && *(unsigned char *)(v67 + 16) == 16)
            {
              uint64_t v68 = (uint64_t)*(v2 - 12);
              uint64_t v69 = a1 + 16;
              if (*(unsigned __int8 *)(v68 + 16) > 0x14u)
              {
                int v523 = 0;
                int v120 = sub_1CC01F510(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), v68, &v523);
                BOOL v121 = v523;
                if (!v120) {
                  BOOL v121 = (const char *)(*(void *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128));
                }
                unsigned int v122 = (const void *)*((void *)v121 + 1);
                unint64_t v123 = sub_1CC88E770(v69, (uint64_t)v2, *((_DWORD *)v41 + 8));
                memcpy((void *)*v123, v122, 8 * v123[1]);
              }
              else
              {
                uint64_t v70 = sub_1CC88E770(a1 + 16, (uint64_t)v2, *((_DWORD *)v41 + 8));
                if (*((_DWORD *)v41 + 8))
                {
                  uint64_t v71 = v70;
                  unint64_t v72 = 0;
                  do
                  {
                    *(void *)(*v71 + 8 * v72) = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)*(v2 - 12), (const llvm::APFloat *)v72);
                    ++v72;
                  }
                  while (v72 < *((unsigned int *)v41 + 8));
                }
              }
              uint64_t v124 = (uint64_t)*(v2 - 8);
              uint64_t v125 = sub_1CC88E770(v69, (uint64_t)v2, *((_DWORD *)*v2 + 8));
              int v126 = (void *)(v67 + 24);
              if (*(_DWORD *)(v67 + 32) >= 0x41u) {
                int v126 = (void *)*v126;
              }
              *(void *)(*v125 + 8 * *v126) = v124;
              return 1;
            }
            int v93 = 0;
            uint64_t v94 = *((unsigned int *)v41 + 8);
            if (*((unsigned char *)*(v2 - 12) + 16) == 15) {
              unint64_t v95 = (llvm::ConstantFP ***)*(v2 - 12);
            }
            else {
              unint64_t v95 = 0;
            }
            std::string::size_type v96 = *v41;
            int v523 = (char *)v525;
            uint64_t v524 = 0x200000000;
            BOOL v528 = v96;
            unsigned int v529 = &v537;
            unsigned int v530 = v538;
            uint64_t v531 = 0;
            int v532 = 0;
            __int16 v533 = 512;
            char v534 = 7;
            uint64_t v535 = 0;
            uint64_t v536 = 0;
            uint64_t v537 = &unk_1F2616E88;
            v538[0] = &unk_1F2617008;
            uint64_t v97 = (char *)v2[6];
            uint64_t v526 = v2[5];
            int v527 = v2 + 3;
            uint64_t v509 = v97;
            if (v97)
            {
              llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v97, 2);
              int v93 = v509;
            }
            sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v93);
            if (!v509)
            {
LABEL_119:
              if (v94)
              {
                unint64_t v98 = 0;
                unsigned int v99 = (llvm::ConstantInt **)*(v2 - 4);
                uint64_t v100 = a1 + 16;
                do
                {
                  if (v95)
                  {
                    ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v95, v98);
                    *(void *)(*sub_1CC88E770(v100, (uint64_t)v95, *((_DWORD *)*v95 + 8)) + 8 * v98) = ElementAsConstant;
                  }
                  uint64_t v102 = llvm::ConstantInt::get(*v99, v98, 0);
                  LOWORD(v515) = 257;
                  int v103 = sub_1CB845F20((uint64_t)&v523, 32, v99, (uint64_t)v102, (uint64_t)&v512);
                  __int16 v104 = (llvm::Value *)*(v2 - 8);
                  char v105 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)*(v2 - 12), (const llvm::APFloat *)v98);
                  LOWORD(v515) = 257;
                  Select = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v523, v103, v104, v105, (const llvm::Twine *)&v512, 0);
                  *(void *)(*sub_1CC88E770(v100, (uint64_t)v2, v94) + 8 * v98++) = Select;
                }
                while (v94 != v98);
              }
              int v89 = v523;
              if (v523 == (char *)v525) {
                return 1;
              }
              goto LABEL_108;
            }
            int v301 = *(unsigned __int8 *)v509;
            if ((v301 - 4) > 0x1E)
            {
              if ((v301 - 3) >= 0xFFFFFFFE) {
                uint64_t v312 = v509;
              }
              else {
                uint64_t v312 = 0;
              }
              if ((v301 - 3) < 0xFFFFFFFE)
              {
                if (v301 == 3) {
                  *((void *)v509 + 1) = 0;
                }
                goto LABEL_119;
              }
              unint64_t v303 = (unint64_t)(v312 + 8);
            }
            else
            {
              if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
                goto LABEL_119;
              }
              uint64_t v302 = *((void *)v509 + 2);
              if ((v302 & 4) == 0) {
                goto LABEL_119;
              }
              unint64_t v303 = v302 & 0xFFFFFFFFFFFFFFF8;
              if (!v303) {
                goto LABEL_119;
              }
            }
            uint64_t v512 = &v509;
            sub_1CC5FA668(v303 + 16, &v512);
            goto LABEL_119;
          }
          if (v2 && v3 == 91)
          {
            int v523 = (char *)v525;
            uint64_t v73 = v2[8];
            uint64_t v74 = *((unsigned int *)v2 + 18);
            uint64_t v524 = 0x400000000;
            if (v74 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v74)
            {
              memcpy(v525, v73, 4 * v74);
              int v75 = v524;
            }
            else
            {
              int v75 = 0;
            }
            LODWORD(v524) = v75 + v74;
            uint64_t v76 = (llvm::ConstantDataSequential **)(v2 - 8);
            uint64_t v77 = (uint64_t)**(v2 - 8);
            int v78 = *(_DWORD *)(v77 + 8);
            uint64_t v79 = sub_1CC88E770(a1 + 16, (uint64_t)v2, v75 + (int)v74);
            if (v524)
            {
              unint64_t v81 = v79;
              unint64_t v82 = v2;
              unint64_t v83 = 0;
              if ((v78 & 0xFE) != 0x12) {
                uint64_t v77 = 0;
              }
              unint64_t v84 = (llvm::ConstantDataSequential **)(v82 - 4);
              do
              {
                int v85 = *(_DWORD *)&v523[4 * v83];
                if (v85 < 0)
                {
                  uint64_t v88 = llvm::UndefValue::get(*(llvm::UndefValue **)(v77 + 24), v80);
                }
                else
                {
                  int v86 = *(_DWORD *)(v77 + 32);
                  if (v85 >= v86)
                  {
                    int v87 = v84;
                  }
                  else
                  {
                    int v86 = 0;
                    int v87 = v76;
                  }
                  uint64_t v88 = sub_1CC88F460(a1, *v87, (const llvm::APFloat *)(v85 - v86));
                }
                *(void *)(*v81 + 8 * v83++) = v88;
              }
              while (v83 < v524);
            }
            int v89 = v523;
            if (v523 == (char *)v525) {
              return 1;
            }
            goto LABEL_108;
          }
          if (v2 && v3 == 83)
          {
            int v90 = *((_DWORD *)v2 + 5);
            if ((v90 & 0x40000000) != 0)
            {
              int v92 = (uint64_t *)*(v2 - 1);
              uint64_t v91 = v90 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v91 = v90 & 0x7FFFFFF;
              int v92 = (uint64_t *)&v2[-4 * v91];
            }
            if (v91)
            {
              uint64_t v212 = v2;
              uint64_t v213 = 32 * v91;
              while (*(unsigned __int8 *)(*v92 + 16) < 0x15u
                   || (sub_1CC01F510(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), *v92, &v523) & 1) != 0)
              {
                v92 += 4;
                v213 -= 32;
                if (!v213)
                {
                  int v491 = 1;
                  goto LABEL_339;
                }
              }
              unsigned int v232 = *(_DWORD *)(a1 + 144);
              if (v232 >= *(_DWORD *)(a1 + 148)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v491 = 0;
              *(void *)(*(void *)(a1 + 136) + 8 * v232) = v212;
              ++*(_DWORD *)(a1 + 144);
LABEL_339:
              uint64_t v2 = v212;
            }
            else
            {
              int v491 = 1;
            }
            if (((*v2)[1] & 0xFE) == 0x12) {
              uint64_t v233 = (uint64_t *)*v2;
            }
            else {
              uint64_t v233 = 0;
            }
            unsigned int v234 = sub_1CC88E770(a1 + 16, (uint64_t)v2, *((_DWORD *)v233 + 8));
            if (!*((_DWORD *)v233 + 8)) {
              return 1;
            }
            unsigned int v235 = v234;
            unint64_t v236 = 0;
            BOOL v237 = (uint64_t *)(v2 + 3);
            while (1)
            {
              uint64_t v238 = v233[3];
              int v239 = *((_DWORD *)v2 + 5);
              v525[8] = 257;
              int v240 = operator new(0x48uLL);
              v240[1] = v238;
              BOOL v241 = (llvm::Value *)(v240 + 1);
              *int v240 = 0;
              v240[2] = 0;
              v240[3] = 0x4000000000000053;
              *((_OWORD *)v240 + 2) = 0u;
              unsigned int v242 = (char *)(v240 + 4);
              *((_OWORD *)v240 + 3) = 0u;
              *((_DWORD *)v240 + 16) = 0;
              uint64_t v243 = (uint64_t)v2;
              int v244 = v2[5];
              v240[6] = v244;
              *((_WORD *)v244 + 9) &= ~0x8000u;
              if ((*((unsigned char *)v240 + 31) & 0x10) != 0)
              {
                uint64_t v249 = v244[7];
                if (v249)
                {
                  uint64_t v250 = (llvm::ValueSymbolTable *)v249[13];
                  if (v250) {
                    llvm::ValueSymbolTable::reinsertValue(v250, v241);
                  }
                }
              }
              uint64_t v245 = *v237;
              v240[4] = *v237;
              v240[5] = v237;
              *(void *)(v245 + 8) = v242;
              uint64_t *v237 = (uint64_t)v242;
              *((_DWORD *)v240 + 17) = v239 & 0x7FFFFFF;
              llvm::Value::setNameImpl(v241, (const char **)&v523);
              if (*((unsigned char *)v240 + 24)) {
                goto LABEL_347;
              }
              if ((*((unsigned char *)v240 + 31) & 0x10) == 0)
              {
LABEL_372:
                int v264 = 0;
                *((_DWORD *)v240 + 10) &= ~0x2000u;
                goto LABEL_373;
              }
              uint64_t v251 = ***(void ***)v241;
              uint64_t v252 = *(void *)(v251 + 152);
              uint64_t v253 = *(unsigned int *)(v251 + 168);
              if (!v253) {
                goto LABEL_364;
              }
              LODWORD(v254) = (v253 - 1) & ((v241 >> 4) ^ (v241 >> 9));
              int v255 = (llvm::Value **)(v252 + 16 * v254);
              uint64_t v256 = *v255;
              if (*v255 != v241) {
                break;
              }
LABEL_365:
              int64x2_t v259 = v255[1];
              unint64_t v262 = *(void *)v259;
              int64x2_t v260 = (char *)v259 + 16;
              unint64_t v261 = v262;
              if (v262 < 5) {
                goto LABEL_372;
              }
              if (*(_DWORD *)v260 != *(_DWORD *)"llvm." || v260[4] != aLlvm_1[4]) {
                goto LABEL_372;
              }
              *((_DWORD *)v240 + 10) |= 0x2000u;
              int v264 = llvm::Function::lookupIntrinsicID(v260, v261);
LABEL_373:
              *((_DWORD *)v240 + 11) = v264;
LABEL_347:
              uint64_t v246 = *((unsigned int *)v240 + 17);
              uint64_t v247 = operator new(40 * v246);
              *int v240 = v247;
              if (v246)
              {
                uint64_t v248 = &v247[4 * v246];
                do
                {
                  *uint64_t v247 = 0;
                  v247[1] = 0;
                  v247[2] = 0;
                  v247[3] = v241;
                  v247 += 4;
                }
                while (v247 != v248);
              }
              uint64_t v2 = (uint64_t ***)v243;
              if (v491) {
                sub_1CC88E99C(a1, (uint64_t)v241, v243, (const llvm::APFloat *)v236);
              }
              *(void *)(*v235 + 8 * v236++) = v241;
              uint64_t v40 = 1;
              if (v236 >= *((unsigned int *)v233 + 8)) {
                return v40;
              }
            }
            int v257 = 1;
            while (v256 != (llvm::Value *)-4096)
            {
              int v258 = v254 + v257++;
              uint64_t v254 = v258 & (v253 - 1);
              uint64_t v256 = *(llvm::Value **)(v252 + 16 * v254);
              if (v256 == v241)
              {
                int v255 = (llvm::Value **)(v252 + 16 * v254);
                goto LABEL_365;
              }
            }
LABEL_364:
            int v255 = (llvm::Value **)(v252 + 16 * v253);
            goto LABEL_365;
          }
          if (v3 != 84) {
            goto LABEL_629;
          }
          unsigned int v116 = v2 - 4;
          uint64_t v115 = (uint64_t)*(v2 - 4);
          if (!v115) {
            goto LABEL_635;
          }
          if (*(unsigned char *)(v115 + 16) || *(uint64_t ***)(v115 + 24) != v2[9] || (*(unsigned char *)(v115 + 33) & 0x20) == 0) {
            goto LABEL_632;
          }
          int v117 = *(_DWORD *)(v115 + 36);
          if (v117 > 1899)
          {
            if (v117 <= 2455)
            {
              if (v117 <= 1907)
              {
                if (v117 != 1900)
                {
                  if (v117 == 1904 || v117 == 1906) {
                    goto LABEL_144;
                  }
                  goto LABEL_632;
                }
                goto LABEL_546;
              }
              char v320 = v117 + 119;
              if ((v117 - 1929) <= 0x14)
              {
                if (((1 << v320) & 0x15) != 0)
                {
                  int v118 = 0;
                  unsigned int v119 = 0;
                  int v117 = 1927;
                  goto LABEL_555;
                }
                if (((1 << v320) & 0x1500) != 0)
                {
                  int v118 = 0;
                  unsigned int v119 = 0;
                  int v117 = 1935;
                  goto LABEL_555;
                }
                if (((1 << v320) & 0x150000) != 0)
                {
                  int v118 = 0;
                  unsigned int v119 = 0;
                  int v117 = 1943;
                  goto LABEL_555;
                }
              }
              if ((v117 - 2117) > 0xC) {
                goto LABEL_815;
              }
              int v321 = 1 << (v117 - 69);
              if ((v321 & 0x15) == 0)
              {
                if ((v321 & 0x1500) != 0)
                {
                  int v118 = 0;
                  unsigned int v119 = 0;
                  int v117 = 2123;
                  goto LABEL_555;
                }
LABEL_815:
                if (v117 == 1908)
                {
LABEL_144:
                  int v118 = 0;
                  unsigned int v119 = 0;
                  int v117 = 1902;
                  goto LABEL_555;
                }
LABEL_632:
                if (!*(unsigned char *)(v115 + 16) && *(uint64_t ***)(v115 + 24) == v2[9] && (*(unsigned char *)(v115 + 33) & 0x20) != 0) {
                  goto LABEL_640;
                }
                goto LABEL_635;
              }
              int v118 = 0;
              unsigned int v119 = 0;
              int v117 = 2115;
LABEL_555:
              uint64_t v322 = 0;
              int v323 = *v41;
              int v523 = (char *)v525;
              uint64_t v524 = 0x200000000;
              BOOL v528 = v323;
              unsigned int v529 = &v537;
              unsigned int v530 = v538;
              uint64_t v531 = 0;
              int v532 = 0;
              __int16 v533 = 512;
              char v534 = 7;
              uint64_t v535 = 0;
              uint64_t v536 = 0;
              uint64_t v537 = &unk_1F2616E88;
              v538[0] = &unk_1F2617008;
              uint64_t v324 = (char *)v2[6];
              uint64_t v526 = v2[5];
              int v527 = v2 + 3;
              uint64_t v509 = v324;
              if (v324)
              {
                llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v324, 2);
                uint64_t v322 = v509;
              }
              sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v322);
              if (!v509) {
                goto LABEL_558;
              }
              int v459 = *(unsigned __int8 *)v509;
              if ((v459 - 4) > 0x1E)
              {
                if ((v459 - 3) >= 0xFFFFFFFE) {
                  unsigned int v465 = v509;
                }
                else {
                  unsigned int v465 = 0;
                }
                if ((v459 - 3) < 0xFFFFFFFE)
                {
                  if (v459 == 3) {
                    *((void *)v509 + 1) = 0;
                  }
                  goto LABEL_558;
                }
                unint64_t v461 = (unint64_t)(v465 + 8);
              }
              else
              {
                if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
                  goto LABEL_558;
                }
                uint64_t v460 = *((void *)v509 + 2);
                if ((v460 & 4) == 0) {
                  goto LABEL_558;
                }
                unint64_t v461 = v460 & 0xFFFFFFFFFFFFFFF8;
                if (!v461) {
                  goto LABEL_558;
                }
              }
              uint64_t v512 = &v509;
              sub_1CC5FA668(v461 + 16, &v512);
LABEL_558:
              if (((*v2)[1] & 0xFE) == 0x12) {
                uint64_t v325 = (uint64_t *)*v2;
              }
              else {
                uint64_t v325 = 0;
              }
              if (v118)
              {
                uint64_t v326 = (const llvm::APFloat *)*((unsigned int *)v325 + 8);
                v497[0] = v325[3];
                Declaratiouint64_t n = llvm::Intrinsic::getDeclaration((uint64_t **)v2[5][7][5], v117, (uint64_t)v497, 1);
                uint64_t v328 = sub_1CC88E770(a1 + 16, (uint64_t)v2, v326);
                if (v326)
                {
                  uint64_t v329 = v328;
                  for (uint64_t i = 0; i != v326; uint64_t i = (const llvm::APFloat *)((char *)i + 1))
                  {
                    unsigned int v331 = 0;
                    unint64_t v332 = 0;
                    uint64_t v512 = v514;
                    uint64_t v513 = 0x400000000;
                    for (unint64_t j = v2; ; j += 4)
                    {
                      int v334 = *((unsigned __int8 *)v2 + 16);
                      if (v334 == 84) {
                        uint64_t v335 = 0;
                      }
                      else {
                        uint64_t v335 = v334 == 39 ? (*((_DWORD *)v2 + 20) + 1) : 2;
                      }
                      int v336 = *((_DWORD *)v2 + 5);
                      if (v336 < 0
                        && (uint64_t v340 = v336 & 0x7FFFFFF, ((unint64_t)v2[-4 * v340 - 1] & 0xFFFFFFFF0) != 0))
                      {
                        uint64_t v338 = -v340;
                        int v337 = *((_DWORD *)&v2[-4 * v340 - 1] - 1)
                             - *(_DWORD *)((char *)&v2[-4 * v340] - (char *)v2[-4 * v340 - 1]);
                      }
                      else
                      {
                        int v337 = 0;
                        uint64_t v338 = -(uint64_t)(v336 & 0x7FFFFFF);
                      }
                      if (v332 >= ((-32
                                                 - 32 * v335
                                                 + 32 * (unint64_t)-v337
                                                 - 32 * v338) >> 5))
                        break;
                      uint64_t v339 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)j[4 * v338], i);
                      if (v513 >= (unint64_t)HIDWORD(v513)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v512 + v513) = v339;
                      unsigned int v331 = v513 + 1;
                      LODWORD(v513) = v513 + 1;
                      ++v332;
                    }
                    if (Declaration) {
                      unsigned int v341 = *(uint64_t ***)(Declaration + 24);
                    }
                    else {
                      unsigned int v341 = 0;
                    }
                    __int16 v511 = 257;
                    uint64_t v342 = sub_1CB845BAC((uint64_t *)&v523, v341, (uint64_t **)Declaration, (uint64_t *)v512, v331, (uint64_t)&v509, 0);
                    if (sub_1CB845E74((uint64_t)v2)) {
                      *(unsigned char *)(v342 + 17) = *((unsigned char *)v2 + 17) & 0xFE | *(unsigned char *)(v342 + 17) & 1;
                    }
                    *(void *)(*v329 + 8 * i) = v342;
                    if (v512 != v514) {
                      free(v512);
                    }
                  }
                }
                uint64_t v343 = (uint64_t)v2;
                goto LABEL_625;
              }
              uint64_t v343 = (uint64_t)v2;
              unsigned int v344 = v2[1];
              if (!v344
                || v344[1]
                || (uint64_t v345 = v344[3], *((unsigned char *)v345 + 16) != 84)
                || (uint64_t v346 = *(v345 - 4)) == 0
                || *(unsigned char *)(v346 + 16)
                || *(void *)(v346 + 24) != v345[9]
                || (*(unsigned char *)(v346 + 33) & 0x20) == 0
                || (char v368 = 0, v467 = *(_DWORD *)(v346 + 36), (v467 - 1282) >= 0x190)
                && (v467 - 2824) >= 0xC)
              {
                uint64_t v347 = v343;
                uint64_t v492 = *(const llvm::APInt **)(v343 - 32 * (*(_DWORD *)(v343 + 20) & 0x7FFFFFF) + 32 * v119);
                llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v528 + 1672), (llvm::Type *)4);
                uint64_t v489 = v348;
                unsigned int v349 = *(uint64_t ***)(*(void *)(*(void *)(v343 + 40) + 56) + 40);
                llvm::Intrinsic::getType(*v349, v117, 0, 0);
                unsigned int v350 = (unsigned __int8 *)off_1E6830B58[v117];
                if (v350) {
                  unsigned int v351 = (const char *)strlen(off_1E6830B58[v117]);
                }
                else {
                  unsigned int v351 = 0;
                }
                Type = (llvm::PointerType *)llvm::Intrinsic::getType(*v349, v117, 0, 0);
                llvm::Module::getOrInsertFunction((uint64_t)v349, v350, v351, Type, 0);
                uint64_t v354 = v353;
                uint64_t v487 = sub_1CC88E770(a1 + 16, v343, *((_DWORD *)v325 + 8));
                if (!*((_DWORD *)v325 + 8)) {
                  goto LABEL_625;
                }
                uint64_t v355 = 0;
                while (1)
                {
                  uint64_t v356 = v325;
                  LOWORD(v515) = 257;
                  int v357 = sub_1CB844364((uint64_t *)&v523, (uint64_t)v489, v492, v355, (uint64_t)&v512);
                  unsigned int v358 = 0;
                  unint64_t v359 = 0;
                  uint64_t v512 = v514;
                  uint64_t v513 = 0x400000000;
                  for (uint64_t k = v347; ; k += 32)
                  {
                    int v361 = *(unsigned __int8 *)(v347 + 16);
                    if (v361 == 84)
                    {
                      uint64_t v362 = 0;
                    }
                    else if (v361 == 39)
                    {
                      uint64_t v347 = v343;
                      uint64_t v362 = (*(_DWORD *)(v343 + 80) + 1);
                    }
                    else
                    {
                      uint64_t v362 = 2;
                      uint64_t v347 = v343;
                    }
                    int v363 = *(_DWORD *)(v347 + 20);
                    if (v363 < 0 && (uint64_t v366 = v363 & 0x7FFFFFF, (*(void *)(v343 - 8 - 32 * v366) & 0xFFFFFFFF0) != 0))
                    {
                      uint64_t v365 = -v366;
                      int v364 = *(_DWORD *)(v347 - 32 * v366 - 12)
                           - *(_DWORD *)(v347 - 32 * v366 - *(void *)(v347 - 32 * v366 - 8));
                    }
                    else
                    {
                      int v364 = 0;
                      uint64_t v365 = -(uint64_t)(v363 & 0x7FFFFFF);
                    }
                    if (v359 >= (((unint64_t)&v116[4 * -v364]
                                               + -v347
                                               + -32 * v362
                                               + -32 * v365) >> 5))
                      break;
                    if (v119)
                    {
                      if (v359 == 1) {
                        goto LABEL_606;
                      }
                    }
                    else if (!v359)
                    {
LABEL_606:
                      if (v358 >= HIDWORD(v513)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v512 + v358) = v357;
                      goto LABEL_611;
                    }
                    if (v358 >= HIDWORD(v513)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v512 + v358) = *(void *)(k + 32 * v365);
                    uint64_t v347 = v343;
LABEL_611:
                    unsigned int v358 = v513 + 1;
                    LODWORD(v513) = v513 + 1;
                    ++v359;
                  }
                  if (v354) {
                    uint64_t v367 = *(uint64_t ***)(v354 + 24);
                  }
                  else {
                    uint64_t v367 = 0;
                  }
                  uint64_t v325 = v356;
                  __int16 v511 = 257;
                  *(void *)(*v487 + 8 * v355) = sub_1CB845BAC((uint64_t *)&v523, v367, (uint64_t **)v354, (uint64_t *)v512, v358, (uint64_t)&v509, 0);
                  if (v512 != v514) {
                    free(v512);
                  }
                  if (++v355 >= (unint64_t)*((unsigned int *)v356 + 8))
                  {
LABEL_625:
                    char v368 = 1;
                    break;
                  }
                }
              }
              if (v523 == (char *)v525)
              {
                if (v368) {
                  return 1;
                }
              }
              else
              {
                free(v523);
                if (v368) {
                  return 1;
                }
              }
              uint64_t v2 = (uint64_t ***)v343;
              int v3 = *(unsigned __int8 *)(v343 + 16);
LABEL_629:
              if (v3 == 60) {
                goto LABEL_640;
              }
              if (v3 != 84)
              {
LABEL_636:
                if ((v3 - 29) < 0xB
                  || v3 == 84
                  || (v3 - 28) > 0x39
                  || (v3 - 59) <= 6)
                {
                  goto LABEL_640;
                }
                if ((v3 - 79) <= 0xFFFFFFF2)
                {
                  int v377 = (uint64_t *)*v2;
LABEL_655:
                  if (*((unsigned char *)v377 + 8) == 18) {
                    unint64_t v378 = v377;
                  }
                  else {
                    unint64_t v378 = 0;
                  }
                  if (v3 != 77
                    || (uint64_t v379 = (uint64_t)**(v2 - 4)) == 0
                    || (*(_DWORD *)(v379 + 8) & 0xFE) != 0x12
                    || (unsigned int v380 = *(_DWORD *)(v379 + 32), v380 == *((_DWORD *)v378 + 8)))
                  {
                    uint64_t v381 = (const llvm::APFloat *)*((unsigned int *)v378 + 8);
                    unsigned int v382 = sub_1CC88E770(a1 + 16, (uint64_t)v2, *((_DWORD *)v378 + 8));
                    uint64_t v383 = 0;
                    uint64_t v384 = **v2;
                    int v523 = (char *)v525;
                    uint64_t v524 = 0x200000000;
                    BOOL v528 = v384;
                    unsigned int v529 = &v537;
                    unsigned int v530 = v538;
                    uint64_t v531 = 0;
                    int v532 = 0;
                    __int16 v533 = 512;
                    char v534 = 7;
                    uint64_t v535 = 0;
                    uint64_t v536 = 0;
                    uint64_t v537 = &unk_1F2616E88;
                    v538[0] = &unk_1F2617008;
                    int v385 = (char *)v2[6];
                    uint64_t v526 = v2[5];
                    int v527 = v2 + 3;
                    uint64_t v509 = v385;
                    if (v385)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v385, 2);
                      uint64_t v383 = v509;
                    }
                    sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v383);
                    if (!v509) {
                      goto LABEL_665;
                    }
                    int v455 = *(unsigned __int8 *)v509;
                    if ((v455 - 4) > 0x1E)
                    {
                      if ((v455 - 3) >= 0xFFFFFFFE) {
                        uint64_t v458 = v509;
                      }
                      else {
                        uint64_t v458 = 0;
                      }
                      if ((v455 - 3) < 0xFFFFFFFE)
                      {
                        if (v455 == 3) {
                          *((void *)v509 + 1) = 0;
                        }
                        goto LABEL_665;
                      }
                      unint64_t v457 = (unint64_t)(v458 + 8);
                    }
                    else
                    {
                      if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
                        goto LABEL_665;
                      }
                      uint64_t v456 = *((void *)v509 + 2);
                      if ((v456 & 4) == 0) {
                        goto LABEL_665;
                      }
                      unint64_t v457 = v456 & 0xFFFFFFFFFFFFFFF8;
                      if (!v457) {
                        goto LABEL_665;
                      }
                    }
                    uint64_t v512 = &v509;
                    sub_1CC5FA668(v457 + 16, &v512);
LABEL_665:
                    uint64_t v512 = v514;
                    HIDWORD(v513) = 4;
                    if (!v381) {
                      goto LABEL_650;
                    }
                    int v386 = 0;
                    uint64_t v493 = v378[3];
                    while (1)
                    {
                      LODWORD(v513) = 0;
                      int v387 = *((_DWORD *)v2 + 5);
                      if ((v387 & 0x40000000) != 0)
                      {
                        int v389 = (llvm::UndefValue **)*(v2 - 1);
                        uint64_t v388 = v387 & 0x7FFFFFF;
                      }
                      else
                      {
                        uint64_t v388 = v387 & 0x7FFFFFF;
                        int v389 = (llvm::UndefValue **)&v2[-4 * v388];
                      }
                      unsigned int v390 = 0;
                      if (v388)
                      {
                        for (uint64_t m = 32 * v388; m; m -= 32)
                        {
                          if (*((unsigned char *)v2 + 16) == 85)
                          {
                            int v392 = *((_DWORD *)v2 + 5);
                            if ((v392 & 0x40000000) != 0) {
                              uint64_t v393 = (llvm::UndefValue **)*(v2 - 1);
                            }
                            else {
                              uint64_t v393 = (llvm::UndefValue **)&v2[-4 * (v392 & 0x7FFFFFF)];
                            }
                            int v394 = *v389;
                            if (v389 == v393 && (*(_DWORD *)(*(void *)v394 + 8) & 0xFE) != 0x12) {
                              goto LABEL_680;
                            }
                          }
                          else
                          {
                            int v394 = *v389;
                          }
                          int v394 = sub_1CC88F460(a1, v394, v386);
                          unsigned int v390 = v513;
LABEL_680:
                          if (v390 >= HIDWORD(v513)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v512 + v390) = v394;
                          unsigned int v390 = v513 + 1;
                          LODWORD(v513) = v513 + 1;
                          v389 += 4;
                        }
                      }
                      int v395 = *((unsigned __int8 *)v2 + 16);
                      if ((v395 - 83) >= 0xFFFFFFFE) {
                        break;
                      }
                      int v396 = v395 - 28;
                      unsigned int v397 = v512;
                      if ((v395 - 41) > 0x11)
                      {
                        if (v395 == 40)
                        {
                          uint64_t v406 = *(uint64_t **)v512;
                          __int16 v511 = 257;
                          v400 = llvm::UnaryOperator::Create(12, v406, &v509, 0);
                          goto LABEL_689;
                        }
                        if ((v395 - 66) <= 0xC)
                        {
                          uint64_t v407 = *(void *)v512;
                          __int16 v511 = 257;
                          v400 = llvm::CastInst::Create(v396, v407, v493, &v509, 0);
                          goto LABEL_689;
                        }
                        if ((v395 - 81) <= 1)
                        {
                          __int16 v401 = 42;
                          goto LABEL_688;
                        }
                        if (v395 == 83)
                        {
                          uint64_t v413 = v2;
                          unsigned int v414 = v390 >> 1;
                          __int16 v511 = 257;
                          uint64_t v415 = operator new(0x48uLL);
                          v415[1] = v493;
                          int v404 = (llvm::Instruction *)(v415 + 1);
                          void *v415 = 0;
                          v415[2] = 0;
                          v415[3] = 0x4000000000000053;
                          *((_OWORD *)v415 + 2) = 0u;
                          *((_OWORD *)v415 + 3) = 0u;
                          *((_DWORD *)v415 + 16) = 0;
                          *((_DWORD *)v415 + 17) = v414;
                          llvm::Value::setNameImpl((llvm::Value *)(v415 + 1), &v509);
                          if (*((unsigned char *)v415 + 24))
                          {
LABEL_708:
                            uint64_t v416 = *((unsigned int *)v415 + 17);
                            int v417 = operator new(40 * v416);
                            void *v415 = v417;
                            if (v416)
                            {
                              uint64_t v418 = &v417[4 * v416];
                              do
                              {
                                void *v417 = 0;
                                v417[1] = 0;
                                v417[2] = 0;
                                v417[3] = v404;
                                v417 += 4;
                              }
                              while (v417 != v418);
                            }
                            uint64_t v2 = v413;
                            goto LABEL_690;
                          }
                          if ((*((unsigned char *)v415 + 31) & 0x10) == 0) {
                            goto LABEL_728;
                          }
                          uint64_t v419 = ***(void ***)v404;
                          uint64_t v420 = *(void *)(v419 + 152);
                          uint64_t v421 = *(unsigned int *)(v419 + 168);
                          if (!v421) {
                            goto LABEL_720;
                          }
                          LODWORD(v422) = (v421 - 1) & ((v404 >> 4) ^ (v404 >> 9));
                          uint64_t v423 = (llvm::Instruction **)(v420 + 16 * v422);
                          BOOL v424 = *v423;
                          if (*v423 != v404)
                          {
                            int v425 = 1;
                            while (v424 != (llvm::Instruction *)-4096)
                            {
                              int v426 = v422 + v425++;
                              uint64_t v422 = v426 & (v421 - 1);
                              BOOL v424 = *(llvm::Instruction **)(v420 + 16 * v422);
                              if (v424 == v404)
                              {
                                uint64_t v423 = (llvm::Instruction **)(v420 + 16 * v422);
                                goto LABEL_721;
                              }
                            }
LABEL_720:
                            uint64_t v423 = (llvm::Instruction **)(v420 + 16 * v421);
                          }
LABEL_721:
                          uint64_t v427 = v423[1];
                          unint64_t v430 = *(void *)v427;
                          int v428 = (char *)v427 + 16;
                          unint64_t v429 = v430;
                          if (v430 >= 5
                            && (*(_DWORD *)v428 == *(_DWORD *)"llvm." ? (BOOL v431 = v428[4] == aLlvm_1[4]) : (BOOL v431 = 0), v431))
                          {
                            *((_DWORD *)v415 + 10) |= 0x2000u;
                            int v432 = llvm::Function::lookupIntrinsicID(v428, v429);
                          }
                          else
                          {
LABEL_728:
                            int v432 = 0;
                            *((_DWORD *)v415 + 10) &= ~0x2000u;
                          }
                          *((_DWORD *)v415 + 11) = v432;
                          goto LABEL_708;
                        }
                        if (v395 != 85)
                        {
                          int v404 = 0;
                          goto LABEL_690;
                        }
                        uint64_t v410 = *(void *)v512;
                        BOOL v411 = (uint64_t *)*((void *)v512 + 1);
                        uint64_t v412 = *((void *)v512 + 2);
                        __int16 v511 = 257;
                        v400 = sub_1CC199EFC(v410, v411, v412, &v509, 0, 0);
                      }
                      else
                      {
                        unsigned int v398 = *(uint64_t **)v512;
                        uint64_t v399 = *((void *)v512 + 1);
                        __int16 v511 = 257;
                        v400 = llvm::BinaryOperator::Create(v396, v398, v399, &v509, 0);
                      }
LABEL_689:
                      int v404 = v400;
LABEL_690:
                      if (sub_1CB845E74((uint64_t)v2)) {
                        *((unsigned char *)v404 + 17) = *((unsigned char *)v2 + 17) & 0xFE | *((unsigned char *)v404 + 17) & 1;
                      }
                      int v405 = v2;
                      __int16 v511 = 257;
                      (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v404, &v509, v526, v527);
                      if (v524)
                      {
                        uint64_t v408 = v523;
                        unsigned int v409 = &v523[16 * v524];
                        do
                        {
                          llvm::Instruction::setMetadata(v404, *(_DWORD *)v408, *((llvm::MDNode **)v408 + 1));
                          v408 += 16;
                        }
                        while (v408 != v409);
                      }
                      *(void *)(*v382 + 8 * (void)v386) = v404;
                      int v386 = (const llvm::APFloat *)((char *)v386 + 1);
                      uint64_t v2 = v405;
                      if (v386 == v381)
                      {
                        if (v512 != v514) {
                          free(v512);
                        }
LABEL_650:
                        int v89 = v523;
                        if (v523 == (char *)v525) {
                          return 1;
                        }
LABEL_108:
                        free(v89);
                        return 1;
                      }
                    }
                    __int16 v401 = *((_WORD *)v2 + 9) & 0x3F;
                    int v396 = v395 - 28;
                    unsigned int v397 = v512;
LABEL_688:
                    unsigned int v402 = (void *)*v397;
                    uint64_t v403 = v397[1];
                    __int16 v511 = 257;
                    v400 = (llvm::Instruction *)llvm::CmpInst::Create(v396, v401, v402, v403, &v509, 0);
                    goto LABEL_689;
                  }
                  unsigned int v440 = *((_DWORD *)v377 + 8) / v380;
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v377[3], (llvm::Type *)v440);
                  uint64_t v442 = v441;
                  uint64_t v443 = 0;
                  BOOL v444 = **v2;
                  int v523 = (char *)v525;
                  uint64_t v524 = 0x200000000;
                  BOOL v528 = v444;
                  unsigned int v529 = &v537;
                  unsigned int v530 = v538;
                  uint64_t v531 = 0;
                  int v532 = 0;
                  __int16 v533 = 512;
                  char v534 = 7;
                  uint64_t v535 = 0;
                  uint64_t v536 = 0;
                  uint64_t v537 = &unk_1F2616E88;
                  v538[0] = &unk_1F2617008;
                  int v445 = (char *)v2[6];
                  uint64_t v526 = v2[5];
                  int v527 = v2 + 3;
                  uint64_t v509 = v445;
                  if (v445)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v445, 2);
                    uint64_t v443 = v509;
                  }
                  sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v443);
                  if (!v509) {
                    goto LABEL_752;
                  }
                  int v462 = *(unsigned __int8 *)v509;
                  if ((v462 - 4) > 0x1E)
                  {
                    if ((v462 - 3) >= 0xFFFFFFFE) {
                      uint64_t v466 = v509;
                    }
                    else {
                      uint64_t v466 = 0;
                    }
                    if ((v462 - 3) < 0xFFFFFFFE)
                    {
                      if (v462 == 3) {
                        *((void *)v509 + 1) = 0;
                      }
                      goto LABEL_752;
                    }
                    unint64_t v464 = (unint64_t)(v466 + 8);
                  }
                  else if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3) {
                         || (uint64_t v463 = *((void *)v509 + 2), (v463 & 4) == 0)
                  }
                         || (unint64_t v464 = v463 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
LABEL_752:
                    BOOL v446 = sub_1CC88E770(a1 + 16, (uint64_t)v2, v440 * v380);
                    unsigned int v447 = 0;
                    do
                    {
                      char v448 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)*(v2 - 4), v447);
                      uint64_t v449 = (unsigned __int8 *)v448;
                      __int16 v511 = 257;
                      if (*(void *)v448 != v442)
                      {
                        if (*((unsigned __int8 *)v448 + 16) <= 0x14u)
                        {
                          uint64_t v449 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, llvm::UndefValue *, uint64_t))*v529
                                                     + 28))(v529, 49, v448, v442);
                          if (v449) {
                            BOOL v452 = v449[16] >= 0x1Cu;
                          }
                          else {
                            BOOL v452 = 0;
                          }
                          if (v452)
                          {
                            (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v449, &v509, v526, v527);
                            if (v524)
                            {
                              uint64_t v453 = v523;
                              v454 = &v523[16 * v524];
                              do
                              {
                                llvm::Instruction::setMetadata((llvm::Instruction *)v449, *(_DWORD *)v453, *((llvm::MDNode **)v453 + 1));
                                v453 += 16;
                              }
                              while (v453 != v454);
                            }
                          }
                        }
                        else
                        {
                          LOWORD(v515) = 257;
                          uint64_t v449 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v448, v442, (const char **)&v512, 0);
                          (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v449, &v509, v526, v527);
                          if (v524)
                          {
                            uint64_t v450 = v523;
                            int v451 = &v523[16 * v524];
                            do
                            {
                              llvm::Instruction::setMetadata((llvm::Instruction *)v449, *(_DWORD *)v450, *((llvm::MDNode **)v450 + 1));
                              v450 += 16;
                            }
                            while (v450 != v451);
                          }
                        }
                      }
                      sub_1CC88A938((llvm::Instruction *)v449, (uint64_t)&v523, (const llvm::APInt *)v446, v447 * v440);
                      unsigned int v447 = (const llvm::APFloat *)(v447 + 1);
                    }
                    while (v447 != v380);
                    int v89 = v523;
LABEL_460:
                    if (v89 == (char *)v525) {
                      return 1;
                    }
                    goto LABEL_108;
                  }
                  uint64_t v512 = &v509;
                  sub_1CC5FA668(v464 + 16, &v512);
                  goto LABEL_752;
                }
                uint64_t v433 = (uint64_t)**(v2 - 4);
                if (v433)
                {
                  if ((*(_DWORD *)(v433 + 8) & 0xFE) == 0x12)
                  {
                    unsigned int v434 = *(_DWORD *)(v433 + 32);
                    int v377 = (uint64_t *)*v2;
                    unsigned int v435 = *((_DWORD *)*v2 + 8);
                    if (v434 <= v435 && !(v435 % v434)) {
                      goto LABEL_655;
                    }
                  }
                }
LABEL_640:
                sub_1CC88F074(a1, (uint64_t **)v2);
                unsigned int v369 = 0;
                uint64_t v370 = v2[4];
                if (v370) {
                  BOOL v371 = v370 == v2[5] + 5;
                }
                else {
                  BOOL v371 = 1;
                }
                if (v371) {
                  uint64_t v372 = 0;
                }
                else {
                  uint64_t v372 = v370 - 3;
                }
                int v373 = (uint64_t *)**v372;
                int v523 = (char *)v525;
                uint64_t v524 = 0x200000000;
                BOOL v528 = v373;
                unsigned int v529 = &v537;
                unsigned int v530 = v538;
                uint64_t v531 = 0;
                int v532 = 0;
                __int16 v533 = 512;
                char v534 = 7;
                uint64_t v535 = 0;
                uint64_t v536 = 0;
                uint64_t v537 = &unk_1F2616E88;
                v538[0] = &unk_1F2617008;
                uint64_t v526 = (uint64_t **)v372[5];
                int v527 = (void ***)(v372 + 3);
                BOOL v374 = (char *)v372[6];
                uint64_t v509 = v374;
                if (v374)
                {
                  llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v374, 2);
                  unsigned int v369 = v509;
                }
                sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v369);
                if (!v509) {
                  goto LABEL_649;
                }
                int v436 = *(unsigned __int8 *)v509;
                if ((v436 - 4) > 0x1E)
                {
                  if ((v436 - 3) >= 0xFFFFFFFE) {
                    unsigned int v439 = v509;
                  }
                  else {
                    unsigned int v439 = 0;
                  }
                  if ((v436 - 3) < 0xFFFFFFFE)
                  {
                    if (v436 == 3) {
                      *((void *)v509 + 1) = 0;
                    }
                    goto LABEL_649;
                  }
                  unint64_t v438 = (unint64_t)(v439 + 8);
                }
                else
                {
                  if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
                    goto LABEL_649;
                  }
                  uint64_t v437 = *((void *)v509 + 2);
                  if ((v437 & 4) == 0) {
                    goto LABEL_649;
                  }
                  unint64_t v438 = v437 & 0xFFFFFFFFFFFFFFF8;
                  if (!v438) {
                    goto LABEL_649;
                  }
                }
                uint64_t v512 = &v509;
                sub_1CC5FA668(v438 + 16, &v512);
LABEL_649:
                unsigned int v375 = sub_1CC88E770(a1 + 16, (uint64_t)v2, *((_DWORD *)*v2 + 8));
                sub_1CC88A938((llvm::Instruction *)v2, (uint64_t)&v523, (const llvm::APInt *)v375, 0);
                goto LABEL_650;
              }
              uint64_t v115 = (uint64_t)*(v2 - 4);
              if (v115) {
                goto LABEL_632;
              }
LABEL_635:
              int v3 = 84;
              goto LABEL_636;
            }
            char v318 = v117 + 104;
            if ((v117 - 2456) > 0x3D) {
              goto LABEL_552;
            }
            if (((1 << v318) & 0x15) != 0)
            {
              int v118 = 0;
              unsigned int v119 = 0;
              int v117 = 2454;
              goto LABEL_555;
            }
            if (((1 << v318) & 0x1500) != 0)
            {
              int v118 = 0;
              unsigned int v119 = 0;
              int v117 = 2462;
              goto LABEL_555;
            }
            if (((1 << v318) & 0x2000000080000000) == 0)
            {
LABEL_552:
              char v319 = v117 + 34;
              if ((v117 - 2526) > 0x10) {
                goto LABEL_553;
              }
              if (((1 << v319) & 0x150) != 0)
              {
                int v118 = 0;
                unsigned int v119 = 0;
                int v117 = 2528;
                goto LABEL_555;
              }
              if (((1 << v319) & 0x15000) != 0)
              {
                int v118 = 0;
                unsigned int v119 = 0;
                int v117 = 2536;
                goto LABEL_555;
              }
              if (v117 != 2526)
              {
LABEL_553:
                if (v117 != 2628) {
                  goto LABEL_632;
                }
              }
            }
LABEL_554:
            unsigned int v119 = 0;
            int v118 = 1;
            goto LABEL_555;
          }
          if (v117 <= 237)
          {
            if (((v117 - 13) > 0x3F || ((1 << (v117 - 13)) & 0xC00003C000000003) == 0)
              && ((v117 - 139) > 0x26 || ((1 << (v117 + 117)) & 0x700000001BLL) == 0))
            {
              goto LABEL_632;
            }
            goto LABEL_554;
          }
          if (v117 <= 1843)
          {
            if ((v117 - 238) <= 0x3A
              && ((1 << (v117 + 18)) & 0x400040800A08003) != 0)
            {
              goto LABEL_554;
            }
            if ((v117 - 1840) >= 3) {
              goto LABEL_632;
            }
            int v118 = 0;
            int v117 = 1839;
LABEL_522:
            unsigned int v119 = 1;
            goto LABEL_555;
          }
          if (v117 > 1889)
          {
            if (v117 > 1895)
            {
              if (v117 != 1896 && v117 != 1898) {
                goto LABEL_632;
              }
LABEL_546:
              int v118 = 0;
              unsigned int v119 = 0;
              int v117 = 1894;
              goto LABEL_555;
            }
            if (v117 != 1890 && v117 != 1892) {
              goto LABEL_632;
            }
          }
          else
          {
            if ((v117 - 1844) < 3)
            {
              int v118 = 0;
              int v117 = 1843;
              goto LABEL_522;
            }
            if (v117 != 1888) {
              goto LABEL_632;
            }
          }
          int v118 = 0;
          unsigned int v119 = 0;
          int v117 = 1886;
          goto LABEL_555;
        }
        uint64_t v58 = (llvm::Type *)*v41[2];
        uint64_t v59 = *v41;
        unsigned int v60 = llvm::Type::getPrimitiveSizeInBits(v58);
        unsigned int v61 = v60;
        int v62 = *((_DWORD *)v41 + 8);
        unint64_t v63 = (unsigned __int8 *)*(v2 - 4);
        unsigned int v64 = *(_DWORD *)(*(void *)v63 + 8);
        if ((v64 & 0xFE) == 0x12) {
          unsigned int v64 = *(_DWORD *)(**(void **)(*(void *)v63 + 16) + 8);
        }
        unsigned int v65 = v64 >> 8;
        unint64_t v488 = v58;
        if (v65 == 3)
        {
          unsigned int v66 = v60;
          if ((*(_DWORD *)(a1 + 8) - 27) <= 2) {
            unsigned int v66 = *(_DWORD *)(a1 + 4);
          }
        }
        else if (v65 != 64 {
               || (unsigned int v66 = v60, (*(_DWORD *)(a1 + 8) - 27) <= 2) && (unsigned int v66 = v60, v63[16] >= 0x15u))
        }
        {
          unsigned int v66 = *(_DWORD *)a1;
        }
        uint64_t v127 = v62 * v60;
        if (v62 != 1 && v127 <= v66)
        {
          int v3 = 60;
          goto LABEL_79;
        }
        uint64_t v128 = 0;
        int v523 = (char *)v525;
        uint64_t v524 = 0x200000000;
        BOOL v528 = v59;
        unsigned int v529 = &v537;
        unsigned int v530 = v538;
        uint64_t v531 = 0;
        int v532 = 0;
        __int16 v533 = 512;
        char v534 = 7;
        uint64_t v535 = 0;
        uint64_t v536 = 0;
        uint64_t v537 = &unk_1F2616E88;
        v538[0] = &unk_1F2617008;
        long long v129 = (char *)v2[6];
        uint64_t v526 = v2[5];
        int v527 = v2 + 3;
        uint64_t v509 = v129;
        if (v129)
        {
          llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v129, 2);
          uint64_t v128 = v509;
        }
        sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v128);
        if (!v509)
        {
LABEL_159:
          int v490 = 1;
          if (v66 <= v61 || v62 == 1)
          {
            unsigned int v66 = v61;
          }
          else
          {
            int v490 = v66 / v61;
            llvm::FixedVectorType::get(v488, (llvm::Type *)(v66 / v61));
            unint64_t v488 = v130;
          }
          uint64_t v131 = (uint64_t)**(v2 - 4);
          unsigned int v132 = *(_DWORD *)(v131 + 8);
          if ((v132 & 0xFE) == 0x12) {
            unsigned int v132 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
          }
          unint64_t v133 = (v127 + (unint64_t)v66 - 1) / v66;
          unint64_t v134 = llvm::PointerType::get(v488, (llvm::Type *)(v132 >> 8));
          int v135 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v2 + 9) >> 1));
          unint64_t v136 = (v490 * v61) >> 3;
          int v482 = v135 ^ 0x3F | 0x100;
          unsigned int v486 = v482;
          if (!(v136 >> (v135 ^ 0x3Fu)))
          {
            unsigned int v137 = __clz(v136) ^ 0x3F | 0x100;
            if (v490 * v61 <= 7) {
              unsigned int v138 = 0;
            }
            else {
              unsigned int v138 = v137;
            }
            unsigned int v486 = v138;
          }
          int v139 = *((_DWORD *)v2 + 5);
          if (v2[6])
          {
            if ((v139 & 0x20000000) == 0) {
              goto LABEL_241;
            }
          }
          else if ((v139 & 0x20000000) == 0)
          {
            BOOL v484 = 0;
            goto LABEL_244;
          }
          uint64_t v172 = ***v2;
          uint64_t v512 = v2;
          int v173 = *(_DWORD *)(v172 + 2496);
          if (v173)
          {
            uint64_t v174 = *(void *)(v172 + 2480);
            int v175 = v173 - 1;
            unsigned int v176 = v175 & ((v2 >> 4) ^ (v2 >> 9));
            uint64_t v177 = (uint64_t ****)(v174 + 40 * v176);
            std::string::size_type v178 = *v177;
            if (*v177 == v2) {
              goto LABEL_236;
            }
            unsigned int v179 = 0;
            int v180 = 1;
            while (v178 != (uint64_t ***)-4096)
            {
              if (v179) {
                BOOL v181 = 0;
              }
              else {
                BOOL v181 = v178 == (uint64_t ***)-8192;
              }
              if (v181) {
                unsigned int v179 = v177;
              }
              unsigned int v182 = v176 + v180++;
              unsigned int v176 = v182 & v175;
              uint64_t v177 = (uint64_t ****)(v174 + 40 * v176);
              std::string::size_type v178 = *v177;
              if (*v177 == v2) {
                goto LABEL_236;
              }
            }
            if (v179) {
              uint64_t v310 = v179;
            }
            else {
              uint64_t v310 = v177;
            }
          }
          else
          {
            uint64_t v310 = 0;
          }
          uint64_t v177 = (uint64_t ****)sub_1CC609054(v172 + 2480, (uint64_t)&v512, (uint64_t *)&v512, v310);
          uint64_t v311 = (uint64_t ***)v512;
          v177[3] = 0;
          v177[4] = 0;
          *uint64_t v177 = v311;
          v177[1] = (uint64_t ***)(v177 + 3);
          v177[2] = (uint64_t ***)0x100000000;
LABEL_236:
          uint64_t v183 = *((unsigned int *)v177 + 4);
          if (v183)
          {
            unint64_t v184 = (llvm::MDNode **)(v177[1] + 1);
            uint64_t v185 = 16 * v183;
            while (*((_DWORD *)v184 - 2) != 1)
            {
              BOOL v484 = 0;
              v184 += 2;
              v185 -= 16;
              if (!v185) {
                goto LABEL_242;
              }
            }
            BOOL v484 = *v184;
LABEL_242:
            if (v2[6] || (*((unsigned char *)v2 + 23) & 0x20) != 0)
            {
              uint64_t v481 = (llvm::MDNode *)llvm::Instruction::getMetadataImpl(v2, "srcloc", 6uLL);
              goto LABEL_246;
            }
LABEL_244:
            uint64_t v481 = 0;
LABEL_246:
            unsigned int v186 = sub_1CC88E770(a1 + 16, (uint64_t)v2, v490 * (int)v133);
            uint64_t v187 = (uint64_t)*(v2 - 4);
            unsigned int v188 = *(unsigned __int8 *)(v187 + 16);
            if (v187 && v188 == 62)
            {
              uint64_t v189 = v187 - 32 * (*(_DWORD *)(v187 + 20) & 0x7FFFFFF);
              uint64_t v190 = *(void *)(v189 + 32);
              if (v190) {
                BOOL v191 = *(unsigned __int8 *)(v190 + 16) - 67 > 1;
              }
              else {
                BOOL v191 = 1;
              }
              if (!v191)
              {
                unsigned int v214 = *(unsigned __int8 **)v189;
                __int16 v511 = 257;
                if (*(void *)v214 == v134)
                {
                  uint64_t v478 = (llvm::Instruction *)v214;
                }
                else if (v214[16] <= 0x14u)
                {
                  uint64_t v269 = (*((uint64_t (**)(void **, uint64_t))*v529 + 28))(v529, 49);
                  if (v269) {
                    BOOL v270 = *(unsigned __int8 *)(v269 + 16) >= 0x1Cu;
                  }
                  else {
                    BOOL v270 = 0;
                  }
                  uint64_t v478 = (llvm::Instruction *)v269;
                  if (v270)
                  {
                    (*(void (**)(void *, uint64_t, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v269, &v509, v526, v527);
                    if (v524)
                    {
                      uint64_t v474 = v523;
                      uint64_t v475 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata(v478, *(_DWORD *)v474, *((llvm::MDNode **)v474 + 1));
                        v474 += 16;
                      }
                      while (v474 != v475);
                    }
                  }
                }
                else
                {
                  LOWORD(v515) = 257;
                  std::string v215 = llvm::CastInst::Create(49, (uint64_t)v214, v134, (const char **)&v512, 0);
                  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v215, &v509, v526, v527);
                  if (v524)
                  {
                    uint64_t v316 = v523;
                    uint64_t v317 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata(v215, *(_DWORD *)v316, *((llvm::MDNode **)v316 + 1));
                      v316 += 16;
                    }
                    while (v316 != v317);
                  }
                  uint64_t v478 = v215;
                }
                int64x2_t v271 = *(unsigned __int8 **)(v187 - 32 * (*(_DWORD *)(v187 + 20) & 0x7FFFFFF) + 32);
                uint64_t v272 = *v59 + 1960;
                __int16 v511 = 257;
                if (*(void *)v271 != v272)
                {
                  if (v271[16] <= 0x14u)
                  {
                    int64x2_t v271 = (unsigned __int8 *)(*((uint64_t (**)(void **, uint64_t, unsigned __int8 *, uint64_t))*v529
                                               + 28))(v529, 38, v271, v272);
                    if (v271) {
                      BOOL v275 = v271[16] >= 0x1Cu;
                    }
                    else {
                      BOOL v275 = 0;
                    }
                    if (v275)
                    {
                      (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v271, &v509, v526, v527);
                      if (v524)
                      {
                        v476 = v523;
                        uint64_t v477 = &v523[16 * v524];
                        do
                        {
                          llvm::Instruction::setMetadata((llvm::Instruction *)v271, *(_DWORD *)v476, *((llvm::MDNode **)v476 + 1));
                          v476 += 16;
                        }
                        while (v476 != v477);
                      }
                    }
                  }
                  else
                  {
                    LOWORD(v515) = 257;
                    int64x2_t v271 = (unsigned __int8 *)llvm::CastInst::Create(38, (uint64_t)v271, v272, (const char **)&v512, 0);
                    (*(void (**)(void *, unsigned __int8 *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v271, &v509, v526, v527);
                    if (v524)
                    {
                      uint64_t v273 = v523;
                      int v274 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata((llvm::Instruction *)v271, *(_DWORD *)v273, *((llvm::MDNode **)v273 + 1));
                        v273 += 16;
                      }
                      while (v273 != v274);
                    }
                  }
                }
                int64x2_t v276 = *(llvm::ConstantInt **)(*v528 + 1960);
                unsigned int v277 = *(_DWORD *)(*v528 + 1968);
                LODWORD(v513) = v277 >> 8;
                unsigned int v480 = (llvm::ValueAsMetadata *)v133;
                if (v277 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v277 <= 0xFF) {
                  LODWORD(v278) = 0;
                }
                else {
                  unint64_t v278 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v277) + 63);
                }
                uint64_t v512 = (void *)(v278 & v133);
                int64x2_t v279 = llvm::ConstantInt::get(v276, (llvm::LLVMContext *)&v512, (const llvm::APInt *)v214);
                if (v513 >= 0x41 && v512) {
                  MEMORY[0x1D25D9CB0](v512, 0x1000C8000313F17);
                }
                LOWORD(v515) = 257;
                uint64_t v280 = sub_1CC09A1EC((uint64_t)&v523, (uint64_t)v271, (uint64_t)v279, (uint64_t)&v512, 0, 0);
                if (v133)
                {
                  uint64_t v281 = v280;
                  int v282 = 0;
                  uint64_t v283 = 0;
                  do
                  {
                    LOWORD(v515) = 257;
                    unsigned int v496 = v281;
                    int64x2_t v284 = sub_1CC278130((uint64_t *)&v523, (uint64_t)v488, (uint64_t *)v478, (const char *)v281, (uint64_t)&v512);
                    if (v283) {
                      unsigned int v285 = v486;
                    }
                    else {
                      unsigned int v285 = v482;
                    }
                    __int16 v511 = 257;
                    if (v285 <= 0xFF) {
                      LOBYTE(v285) = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v526[7][5] + 272), v488, 1);
                    }
                    int64x2_t v286 = operator new(0x60uLL);
                    v286[13] = v286[13] & 0x38000000 | 1;
                    int64x2_t v287 = (llvm::Instruction *)(v286 + 8);
                    *(void *)int64x2_t v286 = 0;
                    *((void *)v286 + 1) = 0;
                    *((void *)v286 + 2) = 0;
                    *((void *)v286 + 3) = v286 + 8;
                    LOWORD(v515) = 257;
                    llvm::LoadInst::LoadInst((llvm::Value *)(v286 + 8), (uint64_t)v488, (uint64_t)v284, (const char **)&v512, 0, v285, 0);
                    (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v287, &v509, v526, v527);
                    if (v524)
                    {
                      uint64_t v299 = v523;
                      long long v300 = &v523[16 * v524];
                      do
                      {
                        llvm::Instruction::setMetadata(v287, *(_DWORD *)v299, *((llvm::MDNode **)v299 + 1));
                        v299 += 16;
                      }
                      while (v299 != v300);
                    }
                    uint64_t v288 = v484;
                    if (v484) {
                      llvm::Value::setMetadata((uint64_t ***)v287, 1, v484);
                    }
                    if (v481)
                    {
                      int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v287, "srcloc", 6uLL);
                      llvm::Instruction::setMetadata(v287, MDKindID, v481);
                    }
                    if (v490)
                    {
                      if (v490 == 1)
                      {
                        *(void *)(*v186 + 8 * (void)v283) = v287;
                      }
                      else
                      {
                        for (uint64_t n = 0;
                              n != v490;
                              *(void *)(*v186 + 8 * (v282 + n++)) = sub_1CB8445F4((uint64_t)&v523, (unsigned __int8 *)v287, v298, (uint64_t)&v512))
                        {
                          char v295 = *(llvm::ConstantInt **)(*v528 + 1960);
                          unsigned int v296 = *(_DWORD *)(*v528 + 1968);
                          LODWORD(v513) = v296 >> 8;
                          if (v296 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v296 <= 0xFF) {
                            unint64_t v297 = 0;
                          }
                          else {
                            unint64_t v297 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v296) + 63);
                          }
                          uint64_t v512 = (void *)(v297 & n);
                          unsigned int v298 = (unsigned __int8 *)llvm::ConstantInt::get(v295, (llvm::LLVMContext *)&v512, v288);
                          if (v513 >= 0x41 && v512) {
                            MEMORY[0x1D25D9CB0](v512, 0x1000C8000313F17);
                          }
                          LOWORD(v515) = 257;
                        }
                      }
                    }
                    int v290 = *(llvm::ConstantInt **)(*v528 + 1960);
                    unsigned int v291 = *(_DWORD *)(*v528 + 1968);
                    LODWORD(v513) = v291 >> 8;
                    if (v291 >> 8 > 0x40) {
                      operator new[]();
                    }
                    if (v291 <= 0xFF) {
                      LOBYTE(v292) = 0;
                    }
                    else {
                      unint64_t v292 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v291) + 63);
                    }
                    uint64_t v512 = (void *)(v292 & 1);
                    uint64_t v293 = llvm::ConstantInt::get(v290, (llvm::LLVMContext *)&v512, v288);
                    if (v513 >= 0x41 && v512) {
                      MEMORY[0x1D25D9CB0](v512, 0x1000C8000313F17);
                    }
                    LOWORD(v515) = 257;
                    uint64_t v281 = sub_1CB844A3C((uint64_t)&v523, v496, (uint64_t)v293, (uint64_t)&v512, 0, 0);
                    uint64_t v283 = (llvm::ValueAsMetadata *)((char *)v283 + 1);
                    v282 += v490;
                  }
                  while (v283 != v480);
                }
                goto LABEL_459;
              }
              __int16 v511 = 257;
              if (*(void *)v187 == v134)
              {
LABEL_458:
                unsigned int v495 = (llvm::Instruction *)v187;
                if (!v133) {
                  goto LABEL_459;
                }
                goto LABEL_269;
              }
            }
            else
            {
              __int16 v511 = 257;
              if (*(void *)v187 == v134) {
                goto LABEL_458;
              }
              if (v188 <= 0x14)
              {
                uint64_t v192 = (*((uint64_t (**)(void **, uint64_t, uint64_t, unint64_t))*v529 + 28))(v529, 49, v187, v134);
                if (v192) {
                  BOOL v193 = *(unsigned __int8 *)(v192 + 16) >= 0x1Cu;
                }
                else {
                  BOOL v193 = 0;
                }
                unsigned int v495 = (llvm::Instruction *)v192;
                if (v193)
                {
                  (*(void (**)(void *, uint64_t, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v192, &v509, v526, v527);
                  if (v524)
                  {
                    uint64_t v194 = v523;
                    uint64_t v195 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata(v495, *(_DWORD *)v194, *((llvm::MDNode **)v194 + 1));
                      v194 += 16;
                    }
                    while (v194 != v195);
                  }
                }
LABEL_268:
                if (!v133)
                {
LABEL_459:
                  int v89 = v523;
                  goto LABEL_460;
                }
LABEL_269:
                int v197 = 0;
                unsigned int v198 = 0;
                int v479 = (llvm::ValueAsMetadata *)v133;
                do
                {
                  LOWORD(v515) = 257;
                  unsigned int v199 = sub_1CB844364((uint64_t *)&v523, (uint64_t)v488, v495, (int)v198, (uint64_t)&v512);
                  if (v198) {
                    unsigned int v200 = v486;
                  }
                  else {
                    unsigned int v200 = v482;
                  }
                  __int16 v511 = 257;
                  if (v200 <= 0xFF) {
                    LOBYTE(v200) = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v526[7][5] + 272), v488, 1);
                  }
                  std::string v201 = operator new(0x60uLL);
                  v201[13] = v201[13] & 0x38000000 | 1;
                  int v202 = (llvm::Instruction *)(v201 + 8);
                  *(void *)std::string v201 = 0;
                  *((void *)v201 + 1) = 0;
                  *((void *)v201 + 2) = 0;
                  *((void *)v201 + 3) = v201 + 8;
                  LOWORD(v515) = 257;
                  llvm::LoadInst::LoadInst((llvm::Value *)(v201 + 8), (uint64_t)v488, (uint64_t)v199, (const char **)&v512, 0, v200, 0);
                  (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v202, &v509, v526, v527);
                  if (v524)
                  {
                    unint64_t v210 = v523;
                    uint64_t v211 = &v523[16 * v524];
                    do
                    {
                      llvm::Instruction::setMetadata(v202, *(_DWORD *)v210, *((llvm::MDNode **)v210 + 1));
                      v210 += 16;
                    }
                    while (v210 != v211);
                  }
                  uint64_t v203 = v484;
                  if (v484) {
                    llvm::Value::setMetadata((uint64_t ***)v202, 1, v484);
                  }
                  if (v481)
                  {
                    int v204 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)v202, "srcloc", 6uLL);
                    llvm::Instruction::setMetadata(v202, v204, v481);
                  }
                  if (v490)
                  {
                    if (v490 == 1)
                    {
                      *(void *)(*v186 + 8 * (void)v198) = v202;
                    }
                    else
                    {
                      for (iuint64_t i = 0;
                            ii != v490;
                            *(void *)(*v186 + 8 * (v197 + ii++)) = sub_1CB8445F4((uint64_t)&v523, (unsigned __int8 *)v202, v209, (uint64_t)&v512))
                      {
                        int v206 = *(llvm::ConstantInt **)(*v528 + 1960);
                        unsigned int v207 = *(_DWORD *)(*v528 + 1968);
                        LODWORD(v513) = v207 >> 8;
                        if (v207 >> 8 > 0x40) {
                          operator new[]();
                        }
                        if (v207 <= 0xFF) {
                          unint64_t v208 = 0;
                        }
                        else {
                          unint64_t v208 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v207) + 63);
                        }
                        uint64_t v512 = (void *)(v208 & ii);
                        uint64_t v209 = (unsigned __int8 *)llvm::ConstantInt::get(v206, (llvm::LLVMContext *)&v512, v203);
                        if (v513 >= 0x41 && v512) {
                          MEMORY[0x1D25D9CB0](v512, 0x1000C8000313F17);
                        }
                        LOWORD(v515) = 257;
                      }
                    }
                  }
                  unsigned int v198 = (llvm::ValueAsMetadata *)((char *)v198 + 1);
                  v197 += v490;
                }
                while (v198 != v479);
                goto LABEL_459;
              }
            }
            LOWORD(v515) = 257;
            char v196 = llvm::CastInst::Create(49, v187, v134, (const char **)&v512, 0);
            (*(void (**)(void *, llvm::Instruction *, const char **, uint64_t **, void ***))(*v530 + 16))(v530, v196, &v509, v526, v527);
            if (v524)
            {
              unint64_t v314 = v523;
              uint64_t v315 = &v523[16 * v524];
              do
              {
                llvm::Instruction::setMetadata(v196, *(_DWORD *)v314, *((llvm::MDNode **)v314 + 1));
                v314 += 16;
              }
              while (v314 != v315);
            }
            unsigned int v495 = v196;
            goto LABEL_268;
          }
LABEL_241:
          BOOL v484 = 0;
          goto LABEL_242;
        }
        int v304 = *(unsigned __int8 *)v509;
        if ((v304 - 4) > 0x1E)
        {
          if ((v304 - 3) >= 0xFFFFFFFE) {
            uint64_t v313 = v509;
          }
          else {
            uint64_t v313 = 0;
          }
          if ((v304 - 3) < 0xFFFFFFFE)
          {
            if (v304 == 3) {
              *((void *)v509 + 1) = 0;
            }
            goto LABEL_159;
          }
          unint64_t v306 = (unint64_t)(v313 + 8);
        }
        else
        {
          if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
            goto LABEL_159;
          }
          uint64_t v305 = *((void *)v509 + 2);
          if ((v305 & 4) == 0) {
            goto LABEL_159;
          }
          unint64_t v306 = v305 & 0xFFFFFFFFFFFFFFF8;
          if (!v306) {
            goto LABEL_159;
          }
        }
        uint64_t v512 = &v509;
        sub_1CC5FA668(v306 + 16, &v512);
        goto LABEL_159;
      }
LABEL_78:
      int v57 = *((_DWORD *)v41 + 2);
      goto LABEL_79;
    }
    int v265 = *(unsigned __int8 *)v509;
    if ((v265 - 4) > 0x1E)
    {
      if ((v265 - 3) >= 0xFFFFFFFE) {
        BOOL v307 = v509;
      }
      else {
        BOOL v307 = 0;
      }
      if ((v265 - 3) < 0xFFFFFFFE)
      {
        if (v265 == 3) {
          *((void *)v509 + 1) = 0;
        }
        goto LABEL_34;
      }
      unint64_t v267 = (unint64_t)(v307 + 8);
    }
    else
    {
      if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
        goto LABEL_34;
      }
      uint64_t v266 = *((void *)v509 + 2);
      if ((v266 & 4) == 0) {
        goto LABEL_34;
      }
      unint64_t v267 = v266 & 0xFFFFFFFFFFFFFFF8;
      if (!v267) {
        goto LABEL_34;
      }
    }
    uint64_t v512 = &v509;
    sub_1CC5FA668(v267 + 16, &v512);
    goto LABEL_34;
  }
  uint64_t v4 = *(void *)(a2 - 32);
  uint64_t v5 = *(void *)(a2 - 64);
  if (v4) {
    BOOL v6 = *(unsigned char *)(v4 + 16) == 16;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    uint64_t v7 = *(unsigned int *)(*(void *)v5 + 32);
    if (*(unsigned char *)(v5 + 16) == 15)
    {
      uint64_t v8 = sub_1CC88E770(a1 + 16, *(void *)(a2 - 64), *(_DWORD *)(*(void *)v5 + 32));
      if (v7)
      {
        uint64_t v9 = v8;
        for (junint64_t j = 0; jj != v7; ++jj)
          *(void *)(*v9 + 8 * jj) = llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)v5, jj);
      }
    }
    uint64_t v11 = 0;
    unint64_t v12 = (llvm::ConstantInt **)*(v2 - 4);
    unint64_t v13 = *v12;
    uint64_t v14 = **v2;
    int v523 = (char *)v525;
    uint64_t v524 = 0x200000000;
    BOOL v528 = v14;
    unsigned int v529 = &v537;
    unsigned int v530 = v538;
    uint64_t v531 = 0;
    int v532 = 0;
    __int16 v533 = 512;
    char v534 = 7;
    uint64_t v535 = 0;
    uint64_t v536 = 0;
    uint64_t v537 = &unk_1F2616E88;
    v538[0] = &unk_1F2617008;
    unint64_t v15 = (char *)v2[6];
    uint64_t v526 = v2[5];
    int v527 = v2 + 3;
    uint64_t v509 = v15;
    if (v15)
    {
      llvm::MetadataTracking::track((uint64_t)&v509, (unsigned __int8 *)v15, 2);
      uint64_t v11 = v509;
    }
    sub_1CB8461A4((uint64_t)&v523, 0, (uint64_t)v11);
    if (!v509) {
      goto LABEL_14;
    }
    int v169 = *(unsigned __int8 *)v509;
    if ((v169 - 4) > 0x1E)
    {
      if ((v169 - 3) >= 0xFFFFFFFE) {
        int64x2_t v268 = v509;
      }
      else {
        int64x2_t v268 = 0;
      }
      if ((v169 - 3) < 0xFFFFFFFE)
      {
        if (v169 == 3) {
          *((void *)v509 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v171 = (unint64_t)(v268 + 8);
    }
    else
    {
      if ((v509[1] & 0x7F) != 2 && !*((_DWORD *)v509 + 3)) {
        goto LABEL_14;
      }
      uint64_t v170 = *((void *)v509 + 2);
      if ((v170 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v171 = v170 & 0xFFFFFFFFFFFFFFF8;
      if (!v171) {
        goto LABEL_14;
      }
    }
    uint64_t v512 = &v509;
    sub_1CC5FA668(v171 + 16, &v512);
LABEL_14:
    unsigned int v16 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)v5, (const llvm::APFloat *)(v7 - 1));
    if (v7 > 3)
    {
      unsigned int v485 = v7 - 1;
      unsigned int v483 = v7 >> 1;
      unint64_t v42 = (v7 >> 1) - 1;
      uint64_t v43 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)v5, (const llvm::APFloat *)v42);
      int v44 = 0;
      do
      {
        uint64_t v45 = llvm::ConstantInt::get(v13, (unint64_t)v44, 0);
        LOWORD(v515) = 257;
        uint64_t v46 = sub_1CB845F20((uint64_t)&v523, 32, v12, (uint64_t)v45, (uint64_t)&v512);
        BOOL v47 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)v5, v44);
        LOWORD(v515) = 257;
        uint64_t v43 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v523, v46, v47, v43, (const llvm::Twine *)&v512, 0);
        int v44 = (const llvm::APFloat *)((char *)v44 + 1);
      }
      while ((const llvm::APFloat *)v42 != v44);
      if (v483 < v485)
      {
        unint64_t v48 = v483;
        do
        {
          uint64_t v49 = llvm::ConstantInt::get(v13, v48, 0);
          LOWORD(v515) = 257;
          uint64_t v50 = sub_1CB845F20((uint64_t)&v523, 32, v12, (uint64_t)v49, (uint64_t)&v512);
          uint64_t v51 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)v5, (const llvm::APFloat *)v48);
          LOWORD(v515) = 257;
          unsigned int v16 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v523, v50, v51, v16, (const llvm::Twine *)&v512, 0);
          ++v48;
        }
        while (v485 != v48);
      }
      unint64_t v52 = llvm::ConstantInt::get(v13, v42, 0);
      LOWORD(v515) = 257;
      uint64_t v53 = sub_1CB845F20((uint64_t)&v523, 34, v12, (uint64_t)v52, (uint64_t)&v512);
      LOWORD(v515) = 257;
      unsigned int v16 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v523, v53, v16, v43, (const llvm::Twine *)&v512, 0);
    }
    else
    {
      __int16 v17 = (const llvm::APFloat *)(v7 - 1);
      if (v7 != 1)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = llvm::ConstantInt::get(v13, (unint64_t)v18, 0);
          LOWORD(v515) = 257;
          int64x2_t v20 = sub_1CB845F20((uint64_t)&v523, 32, v12, (uint64_t)v19, (uint64_t)&v512);
          BOOL v21 = sub_1CC88F460(a1, (llvm::ConstantDataSequential *)v5, v18);
          LOWORD(v515) = 257;
          unsigned int v16 = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)&v523, v20, v21, v16, (const llvm::Twine *)&v512, 0);
          int v18 = (const llvm::APFloat *)((char *)v18 + 1);
        }
        while (v17 != v18);
      }
    }
    if (v523 != (char *)v525) {
      free(v523);
    }
    uint64_t v40 = 1;
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v2, v16, (llvm::Value *)1);
    sub_1CC88F074(a1, (uint64_t **)v2);
    return v40;
  }
  if (*(unsigned __int8 *)(v5 + 16) < 0x15u) {
    return 0;
  }
  int v523 = 0;
  if (!sub_1CC01F510(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), v5, &v523)
    || v523 == (char *)(*(void *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128)))
  {
    llvm::report_fatal_error((llvm *)"Internal compiler error", (const llvm::Twine *)1);
  }
  unsigned int v39 = (void *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    unsigned int v39 = (void *)*v39;
  }
  uint64_t v40 = 1;
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, *(llvm::Value **)(*((void *)v523 + 1) + 8 * *v39), (llvm::Value *)1);
  return v40;
}

uint64_t *sub_1CC88E770(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v27 = 0;
  int v6 = sub_1CC01F510(*(void *)(a1 + 96), *(_DWORD *)(a1 + 112), a2, &v27);
  uint64_t v7 = v27;
  if (v6) {
    return v27 + 1;
  }
  unsigned int v28 = v27;
  int v9 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = *(unsigned int *)(a1 + 112);
  if (4 * v9 + 4 >= (3 * v10))
  {
    int v11 = 2 * v10;
    goto LABEL_10;
  }
  int v11 = *(_DWORD *)(a1 + 112);
  if ((int)v10 + ~v9 - *(_DWORD *)(a1 + 108) <= v10 >> 3)
  {
LABEL_10:
    uint64_t v13 = *(void *)(a1 + 96);
    unint64_t v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 64;
    }
    *(_DWORD *)(a1 + 112) = v17;
    int v18 = operator new(24 * v17, (std::align_val_t)8uLL);
    *(void *)(a1 + 96) = v18;
    if (v13)
    {
      *(void *)(a1 + 104) = 0;
      uint64_t v19 = *(unsigned int *)(a1 + 112);
      if (v19)
      {
        uint64_t v20 = 24 * v19;
        do
        {
          void *v18 = -4096;
          v18 += 3;
          v20 -= 24;
        }
        while (v20);
      }
      if (v10)
      {
        BOOL v21 = (_OWORD *)(v13 + 8);
        uint64_t v22 = 24 * v10;
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            uint64_t v29 = 0;
            sub_1CC01F510(*(void *)(a1 + 96), *(_DWORD *)(a1 + 112), v23, &v29);
            uint64_t v24 = v29;
            *uint64_t v29 = v23;
            *(_OWORD *)(v24 + 1) = *v21;
            ++*(_DWORD *)(a1 + 104);
          }
          BOOL v21 = (_OWORD *)((char *)v21 + 24);
          v22 -= 24;
        }
        while (v22);
      }
      MEMORY[0x1D25D9CD0](v13, 8);
      int v18 = *(void **)(a1 + 96);
      LODWORD(v25) = *(_DWORD *)(a1 + 112);
    }
    else
    {
      *(void *)(a1 + 104) = 0;
      uint64_t v25 = *(unsigned int *)(a1 + 112);
      if (v25)
      {
        uint64_t v26 = 0;
        do
        {
          v18[v26] = -4096;
          v26 += 3;
        }
        while (3 * v25 != v26);
      }
    }
    sub_1CC01F510((uint64_t)v18, v25, a2, &v28);
    int v9 = *(_DWORD *)(a1 + 104);
    uint64_t v7 = v28;
  }
  *(_DWORD *)(a1 + 104) = v9 + 1;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 108);
  }
  *uint64_t v7 = a2;
  v7[1] = 0;
  uint64_t v8 = v7 + 1;
  v7[2] = 0;
  v7[1] = sub_1CB906F34((uint64_t *)a1, 8 * a3, 3);
  v7[2] = a3;
  return v8;
}

void sub_1CC88E99C(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::APFloat *a4)
{
  int v4 = *(_DWORD *)(a3 + 20);
  unint64_t v5 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) != 0)
  {
    int v6 = a4;
    uint64_t v9 = a1;
    unint64_t v10 = 0;
    unsigned int v41 = a4;
    do
    {
      if ((v4 & 0x40000000) != 0) {
        uint64_t v11 = *(void *)(a3 - 8);
      }
      else {
        uint64_t v11 = a3 - 32 * v5;
      }
      unint64_t v12 = sub_1CC88F460(v9, *(llvm::ConstantDataSequential **)(v11 + 32 * v10), v6);
      int v13 = *(_DWORD *)(a3 + 20);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = *(void *)(a3 - 8);
      }
      else {
        uint64_t v14 = a3 - 32 * (v13 & 0x7FFFFFF);
      }
      uint64_t v15 = *(void *)(v14 + 32 * *(unsigned int *)(a3 + 60) + 8 * v10);
      int v16 = *(_DWORD *)(a2 + 20);
      uint64_t v17 = v16 & 0x7FFFFFF;
      if ((v16 & 0x7FFFFFF) == *(_DWORD *)(a2 + 60))
      {
        unsigned int v30 = v17 + (v17 >> 1);
        if (v30 <= 2) {
          uint64_t v31 = 2;
        }
        else {
          uint64_t v31 = v30;
        }
        *(_DWORD *)(a2 + 60) = v31;
        if ((v16 & 0x40000000) != 0) {
          unsigned int v32 = *(uint64_t **)(a2 - 8);
        }
        else {
          unsigned int v32 = (uint64_t *)(a2 - 32 * v17);
        }
        std::string __p = v32;
        unsigned int v33 = operator new(40 * v31);
        *(void *)(a2 - 8) = v33;
        int v34 = v33;
        do
        {
          void *v34 = 0;
          v34[1] = 0;
          void v34[2] = 0;
          void v34[3] = a2;
          v34 += 4;
        }
        while (v34 != &v33[4 * v31]);
        int v35 = *(_DWORD *)(a2 + 20);
        if ((v35 & 0x40000000) != 0) {
          uint64_t v36 = (uint64_t)v33;
        }
        else {
          uint64_t v36 = a2 - 32 * (v35 & 0x7FFFFFF);
        }
        sub_1CC5E4108((uint64_t)&v43, __p, &__p[4 * v17], v36);
        if (v17)
        {
          memmove((void *)(v36 + 32 * v31), &__p[4 * v17], 8 * v17);
          uint64_t v37 = 4 * v17;
          do
          {
            unint64_t v38 = &__p[v37];
            if (__p[v37 - 4])
            {
              *(void *)*(v38 - 2) = *(v38 - 3);
              uint64_t v39 = *(v38 - 3);
              if (v39) {
                *(void *)(v39 + 16) = *(v38 - 2);
              }
            }
            v37 -= 4;
          }
          while (v37 * 8);
        }
        operator delete(__p);
        int v16 = *(_DWORD *)(a2 + 20);
        int v6 = (const llvm::APFloat *)v41;
        uint64_t v9 = a1;
      }
      uint64_t v18 = (v16 + 1) & 0x7FFFFFF;
      *(_DWORD *)(a2 + 20) = v16 & 0xF8000000 | (v16 + 1) & 0x7FFFFFF;
      if ((v16 & 0x40000000) != 0) {
        uint64_t v19 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v19 = a2 - 32 * v18;
      }
      uint64_t v20 = (v18 - 1);
      uint64_t v21 = v19 + 32 * v20;
      if (*(void *)v21)
      {
        **(void **)(v21 + 16) = *(void *)(v21 + 8);
        uint64_t v29 = *(void *)(v21 + 8);
        if (v29) {
          *(void *)(v29 + 16) = *(void *)(v21 + 16);
        }
      }
      *(void *)uint64_t v21 = v12;
      if (v12)
      {
        uint64_t v24 = *((void *)v12 + 1);
        uint64_t v23 = (void *)((char *)v12 + 8);
        uint64_t v22 = v24;
        uint64_t v25 = v19 + 32 * v20;
        *(void *)(v25 + 8) = v24;
        if (v24) {
          *(void *)(v22 + 16) = v25 + 8;
        }
        *(void *)(v25 + 16) = v23;
        void *v23 = v21;
      }
      int v26 = *(_DWORD *)(a2 + 20);
      uint64_t v27 = v26 & 0x7FFFFFF;
      if ((v26 & 0x40000000) != 0) {
        uint64_t v28 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v28 = a2 - 32 * v27;
      }
      *(void *)(v28 + 32 * *(unsigned int *)(a2 + 60) + 8 * (v27 - 1)) = v15;
      ++v10;
      int v4 = *(_DWORD *)(a3 + 20);
      unint64_t v5 = v4 & 0x7FFFFFF;
    }
    while (v10 < v5);
  }
}

uint64_t sub_1CC88EC10(llvm *this, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6, uint64_t a7)
{
  v63[8] = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 1) && llvm::wouldInstructionBeTriviallyDead((uint64_t)this, 0))
  {
    int v33 = *((_DWORD *)this + 5);
    uint64_t v34 = v33 & 0x7FFFFFF;
    if ((v33 & 0x7FFFFFF) != 0)
    {
      for (uint64_t i = 0; i != v34; ++i)
      {
        int v36 = *((_DWORD *)this + 5);
        if ((v36 & 0x40000000) != 0) {
          uint64_t v37 = (char *)*((void *)this - 1);
        }
        else {
          uint64_t v37 = (char *)this - 32 * (v36 & 0x7FFFFFF);
        }
        unint64_t v38 = &v37[32 * i];
        uint64_t v39 = *(void *)v38;
        if (*(void *)v38)
        {
          **((void **)v38 + 2) = *((void *)v38 + 1);
          uint64_t v40 = *((void *)v38 + 1);
          if (v40) {
            *(void *)(v40 + 16) = *((void *)v38 + 2);
          }
        }
        *(void *)unint64_t v38 = 0;
        if ((llvm *)v39 == this || *(void *)(v39 + 8) != 0) {
          continue;
        }
        unint64_t v42 = *(unsigned __int8 *)(v39 + 16) <= 0x1Bu ? 0 : (void *)v39;
        unsigned int v61 = v42;
        if (!v42 || v42[1] || !llvm::wouldInstructionBeTriviallyDead((uint64_t)v42, 0)) {
          continue;
        }
        if (*(unsigned char *)a2)
        {
          int v43 = 16;
          uint64_t v44 = a2 + 8;
        }
        else
        {
          int v43 = *(_DWORD *)(a2 + 16);
          if (!v43)
          {
            uint64_t v53 = 0;
LABEL_77:
            int v54 = sub_1CBFD5BBC(a2, (uint64_t)&v61, &v61, v53);
            void *v54 = v61;
            unint64_t v55 = *(unsigned int *)(a2 + 144);
            if (v55 >= *(unsigned int *)(a2 + 148)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(a2 + 136) + 8 * v55) = v61;
            ++*(_DWORD *)(a2 + 144);
            continue;
          }
          uint64_t v44 = *(void *)(a2 + 8);
        }
        int v45 = v43 - 1;
        unsigned int v46 = ((v61 >> 4) ^ (v61 >> 9)) & v45;
        BOOL v47 = (void *)(v44 + 8 * v46);
        unint64_t v48 = (void *)*v47;
        if (v61 != (void *)*v47)
        {
          uint64_t v49 = 0;
          int v50 = 1;
          while (v48 != (void *)-4096)
          {
            if (v49) {
              BOOL v51 = 0;
            }
            else {
              BOOL v51 = v48 == (void *)-8192;
            }
            if (v51) {
              uint64_t v49 = v47;
            }
            unsigned int v52 = v46 + v50++;
            unsigned int v46 = v52 & v45;
            BOOL v47 = (void *)(v44 + 8 * v46);
            unint64_t v48 = (void *)*v47;
            if (v61 == (void *)*v47) {
              goto LABEL_58;
            }
          }
          if (v49) {
            uint64_t v53 = v49;
          }
          else {
            uint64_t v53 = v47;
          }
          goto LABEL_77;
        }
LABEL_58:
        ;
      }
    }
LABEL_38:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
  }
  uint64_t v57 = a3;
  long long v58 = 0u;
  long long v59 = 0u;
  __int16 v60 = 257;
  int v10 = *((_DWORD *)this + 5);
  if ((v10 & 0x40000000) != 0)
  {
    unint64_t v12 = (uint64_t *)*((void *)this - 1);
    unint64_t v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    unint64_t v11 = v10 & 0x7FFFFFF;
    unint64_t v12 = (uint64_t *)((char *)this - 32 * v11);
  }
  unsigned int v61 = v63;
  uint64_t v62 = 0x800000000;
  if (v11 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v11)
  {
    uint64_t v13 = 32 * v11;
    uint64_t v14 = v63;
    do
    {
      uint64_t v15 = *v12;
      v12 += 4;
      *v14++ = v15;
      v13 -= 32;
    }
    while (v13);
    int v16 = v61;
  }
  else
  {
    int v16 = v63;
  }
  LODWORD(v62) = v11;
  uint64_t v17 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v16, v11, (uint64_t)&v57, a5, a6, a7);
  if (v61 == v63)
  {
    if (v17) {
      goto LABEL_12;
    }
  }
  else
  {
    free(v61);
    if (v17)
    {
LABEL_12:
      uint64_t v18 = *((void *)this + 1);
      if (!v18)
      {
LABEL_37:
        llvm::Value::doRAUW(this, v17, (llvm::Value *)1);
        goto LABEL_38;
      }
      while (1)
      {
        uint64_t v19 = *(llvm **)(v18 + 24);
        if (v19 != this)
        {
          unsigned int v61 = *(void **)(v18 + 24);
          if (*(unsigned char *)a2)
          {
            int v20 = 16;
            uint64_t v21 = a2 + 8;
          }
          else
          {
            int v20 = *(_DWORD *)(a2 + 16);
            if (!v20)
            {
              unsigned int v30 = 0;
LABEL_30:
              uint64_t v31 = sub_1CBFD5BBC(a2, (uint64_t)&v61, &v61, v30);
              *uint64_t v31 = v61;
              unint64_t v32 = *(unsigned int *)(a2 + 144);
              if (v32 >= *(unsigned int *)(a2 + 148)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(a2 + 136) + 8 * v32) = v61;
              ++*(_DWORD *)(a2 + 144);
              goto LABEL_32;
            }
            uint64_t v21 = *(void *)(a2 + 8);
          }
          int v22 = v20 - 1;
          unsigned int v23 = v22 & ((v19 >> 4) ^ (v19 >> 9));
          uint64_t v24 = (llvm **)(v21 + 8 * v23);
          uint64_t v25 = *v24;
          if (v19 != *v24)
          {
            int v26 = 0;
            int v27 = 1;
            while (v25 != (llvm *)-4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v25 == (llvm *)-8192;
              }
              if (v28) {
                int v26 = v24;
              }
              unsigned int v29 = v23 + v27++;
              unsigned int v23 = v29 & v22;
              uint64_t v24 = (llvm **)(v21 + 8 * v23);
              uint64_t v25 = *v24;
              if (v19 == *v24) {
                goto LABEL_32;
              }
            }
            if (v26) {
              unsigned int v30 = v26;
            }
            else {
              unsigned int v30 = v24;
            }
            goto LABEL_30;
          }
        }
LABEL_32:
        uint64_t v18 = *(void *)(v18 + 8);
        if (!v18) {
          goto LABEL_37;
        }
      }
    }
  }
  return 0;
}

void sub_1CC88F074(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = 0;
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = **a2;
  v42[0] = v43;
  v42[1] = (void *)0x200000000;
  uint64_t v44 = v5;
  int v45 = &v53;
  unsigned int v46 = v54;
  uint64_t v47 = 0;
  int v48 = 0;
  __int16 v49 = 512;
  char v50 = 7;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = &unk_1F2616E88;
  v54[0] = &unk_1F2617008;
  int v6 = a2 + 3;
  uint64_t v8 = a2[5];
  uint64_t v7 = (unsigned __int8 *)a2[6];
  v43[4] = v8;
  v43[5] = v6;
  unsigned int v41 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v41, v7, 2);
    uint64_t v4 = (uint64_t)v41;
  }
  sub_1CB8461A4((uint64_t)v42, 0, v4);
  if (v41)
  {
    int v33 = *v41;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        int v36 = v41;
      }
      else {
        int v36 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v41 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v35 = (unint64_t)(v36 + 8);
    }
    else
    {
      if ((v41[1] & 0x7F) != 2 && !*((_DWORD *)v41 + 3)) {
        goto LABEL_4;
      }
      uint64_t v34 = *((void *)v41 + 2);
      if ((v34 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if (!v35) {
        goto LABEL_4;
      }
    }
    unint64_t v38 = &v41;
    sub_1CC5FA668(v35 + 16, &v38);
  }
LABEL_4:
  int v10 = *((_DWORD *)v2 + 5);
  unint64_t v11 = v10 & 0x7FFFFFF;
  if ((v10 & 0x7FFFFFF) != 0)
  {
    unint64_t v12 = 0;
    uint64_t v37 = v2;
    do
    {
      if ((v10 & 0x40000000) != 0) {
        uint64_t v13 = (uint64_t **)*(v2 - 1);
      }
      else {
        uint64_t v13 = &v2[-4 * v11];
      }
      uint64_t v14 = (llvm::ConstantDataSequential *)v13[4 * v12];
      uint64_t v15 = *(void *)v14;
      if (*(void *)v14) {
        BOOL v16 = (*(_DWORD *)(*(void *)v14 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16 && *((unsigned __int8 *)v14 + 16) >= 0x15u)
      {
        uint64_t v17 = llvm::UndefValue::get(*(llvm::UndefValue **)v14, v9);
        if (*(_DWORD *)(v15 + 32))
        {
          unint64_t v18 = 0;
          do
          {
            int v20 = (unsigned __int8 *)sub_1CC88F460(a1, v14, (const llvm::APFloat *)v18);
            uint64_t v21 = *(llvm::ConstantInt **)(*(void *)v44 + 1960);
            unsigned int v22 = *(_DWORD *)(*(void *)v44 + 1968);
            unsigned int v39 = v22 >> 8;
            if (v22 >> 8 > 0x40) {
              operator new[]();
            }
            if (v22 <= 0xFF) {
              unint64_t v23 = 0;
            }
            else {
              unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v22) + 63);
            }
            unint64_t v38 = (unsigned __int8 **)(v23 & v18);
            uint64_t v24 = (unsigned __int8 *)llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v38, v19);
            if (v39 >= 0x41 && v38) {
              MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
            }
            __int16 v40 = 257;
            uint64_t v17 = sub_1CB84478C((uint64_t)v42, (unsigned __int8 *)v17, v20, v24, (uint64_t)&v38);
            ++v18;
          }
          while (v18 < *(unsigned int *)(v15 + 32));
        }
        uint64_t v2 = v37;
        int v25 = *((_DWORD *)v37 + 5);
        if ((v25 & 0x40000000) != 0) {
          int v26 = (uint64_t **)*(v37 - 1);
        }
        else {
          int v26 = &v37[-4 * (v25 & 0x7FFFFFF)];
        }
        int v27 = &v26[4 * v12];
        if (*v27)
        {
          void *v27[2] = (uint64_t)v27[1];
          BOOL v28 = v27[1];
          if (v28) {
            v28[2] = (uint64_t)v27[2];
          }
        }
        *int v27 = (uint64_t *)v17;
        if (v17)
        {
          uint64_t v31 = (uint64_t *)*((void *)v17 + 1);
          unsigned int v30 = (uint64_t *)((char *)v17 + 8);
          unsigned int v29 = v31;
          unint64_t v32 = &v26[4 * v12];
          v32[1] = v31;
          if (v31) {
            v29[2] = (uint64_t)(v32 + 1);
          }
          v32[2] = v30;
          *unsigned int v30 = (uint64_t)v27;
        }
      }
      ++v12;
      int v10 = *((_DWORD *)v2 + 5);
      unint64_t v11 = v10 & 0x7FFFFFF;
    }
    while (v12 < v11);
  }
  if (v42[0] != v43) {
    free(v42[0]);
  }
}

llvm::UndefValue *sub_1CC88F460(uint64_t a1, llvm::ConstantDataSequential *this, const llvm::APFloat *a3)
{
  int v3 = this;
  v28[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)this;
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) != 0x12) {
    return v3;
  }
  unsigned int v5 = a3;
  unsigned int v6 = *((unsigned __int8 *)this + 16);
  if (v6 > 0x14)
  {
    uint64_t v22 = 0;
    if (sub_1CC01F510(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), (uint64_t)this, &v22)) {
      BOOL v9 = v22 == *(void *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128);
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      llvm::report_fatal_error((llvm *)"Internal compiler error", (const llvm::Twine *)1);
    }
    return *(llvm::UndefValue **)(*(void *)(v22 + 8) + 8 * v5);
  }
  switch(v6)
  {
    case 0xAu:
      return (llvm::UndefValue *)*((void *)this + 4 * a3 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    case 0xDu:
      int v10 = (llvm::Constant *)v4[3];
      return llvm::Constant::getNullValue(v10, this, a3);
    case 0xFu:
      return (llvm::UndefValue *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantFP ***)this, a3);
    default:
      if (v6 - 13 < 0xFFFFFFFE)
      {
        uint64_t v11 = **v4;
        unint64_t v12 = *(llvm::ConstantInt **)(v11 + 1960);
        unsigned int v13 = *(_DWORD *)(v11 + 1968);
        LODWORD(v23) = v13 >> 8;
        if (v13 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
        if (v13 <= 0xFF) {
          LODWORD(v14) = 0;
        }
        uint64_t v22 = v14 & a3;
        BOOL v16 = (llvm::Constant *)llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v22, a3);
        if (v23 >= 0x41 && v22) {
          MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
        ElementInstructiouint64_t n = llvm::ConstantFoldExtractElementInstruction(v3, v16, v15);
        if (!ElementInstruction)
        {
          uint64_t v19 = *(void ***)v3;
          uint64_t v20 = *(void *)(*(void *)v3 + 24);
          if (v20)
          {
            v28[0] = v3;
            v28[1] = v16;
            uint64_t v21 = **v19 + 1512;
            LODWORD(v22) = 61;
            unint64_t v23 = v28;
            uint64_t v24 = 2;
            long long v25 = 0u;
            long long v26 = 0u;
            uint64_t v27 = 0;
            return (llvm::UndefValue *)sub_1CC56C20C(v21, v20, (unsigned __int8 *)&v22);
          }
          else
          {
            return 0;
          }
        }
        return (llvm::UndefValue *)ElementInstruction;
      }
      unint64_t v18 = (llvm::UndefValue *)v4[3];
      return llvm::UndefValue::get(v18, this);
  }
}

void sub_1CC88F7AC(unsigned int **a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::Instruction *a5)
{
  unsigned int v6 = a3;
  uint64_t v7 = a2;
  uint64_t v182 = (uint64_t)a1[5];
  unsigned int v9 = **a1;
  unsigned int v10 = *a1[1];
  if (v10 <= v9)
  {
    BOOL v16 = 0;
    do
    {
      uint64_t v17 = (uint64_t *)a1[2];
      __int16 v187 = 257;
      if (a5) {
        unint64_t v18 = sub_1CC278130(v17, v7, v6, (const char *)a5, (uint64_t)&v185);
      }
      else {
        unint64_t v18 = sub_1CB844364(v17, v7, (const llvm::APInt *)v6, (int)v16, (uint64_t)&v185);
      }
      uint64_t v19 = 4;
      if (v16) {
        uint64_t v19 = 3;
      }
      unint64_t v20 = *a1[v19];
      unsigned int v21 = __clz(v20) ^ 0x3F;
      if (v20) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      unint64_t v23 = (llvm::Type *)*a1[1];
      if (v23 == 1)
      {
        BOOL v24 = v20 == 0;
        uint64_t v25 = (uint64_t)v18;
        uint64_t v26 = v7;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        uint64_t v29 = !v24;
        unsigned int v30 = (uint64_t *)a1[2];
        uint64_t v31 = sub_1CC88F460(v182, *(llvm::ConstantDataSequential **)(*(void *)a1[6] - 64), v16);
        unint64_t v32 = v177 & 0xFFFFFFFFFFFF0000 | (v29 << 8) | v28;
        unsigned int v6 = v27;
        uint64_t v7 = v26;
        size_t v177 = v32;
        int v33 = (uint64_t ***)sub_1CC27BF8C(v30, (uint64_t)v31, v25, v32, 0);
      }
      else
      {
        uint64_t v174 = v22;
        uint64_t v175 = (uint64_t)v18;
        int v180 = a5;
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], v23);
        int v36 = (unsigned __int8 *)llvm::UndefValue::get(v34, v35);
        LODWORD(v37) = *a1[1];
        if (v37)
        {
          unint64_t v38 = 0;
          do
          {
            __int16 v40 = (unsigned __int8 *)sub_1CC88F460(v182, *(llvm::ConstantDataSequential **)(*(void *)a1[6] - 64), (const llvm::APFloat *)(v38 + v16 * v37));
            uint64_t v41 = (uint64_t)a1[2];
            uint64_t v42 = **(void **)(v41 + 64);
            int v43 = *(llvm::ConstantInt **)(v42 + 1960);
            unint64_t v44 = *(unsigned int *)(v42 + 1968);
            unsigned int v186 = v44 >> 8;
            if (v44 >> 8 > 0x40) {
              operator new[]();
            }
            if (v44 <= 0xFF) {
              unint64_t v45 = 0;
            }
            else {
              unint64_t v45 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v44) + 63);
            }
            uint64_t v185 = (const char *)(v45 & v38);
            unsigned int v46 = (unsigned __int8 *)llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v185, v39);
            if (v186 >= 0x41 && v185) {
              MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
            }
            __int16 v187 = 257;
            int v36 = (unsigned __int8 *)sub_1CB84478C(v41, v36, v40, v46, (uint64_t)&v185);
            ++v38;
            unint64_t v37 = *a1[1];
          }
          while (v38 < v37);
        }
        size_t v179 = v179 & 0xFFFFFFFFFFFF0000 | ((unint64_t)(v20 != 0) << 8) | v174;
        int v33 = (uint64_t ***)sub_1CC27BF8C((uint64_t *)a1[2], (uint64_t)v36, v175, (unsigned __int16)((v20 != 0) << 8) | (unsigned __int16)v174, 0);
        a5 = v180;
        uint64_t v7 = a2;
        unsigned int v6 = a3;
      }
      uint64_t v47 = *(llvm::MDNode **)a1[8];
      if (v47) {
        llvm::Value::setMetadata(v33, 1, v47);
      }
      int v48 = *(llvm::MDNode **)a1[9];
      if (v48)
      {
        int MDKindID = llvm::LLVMContext::getMDKindID(**v33, "srcloc", 6uLL);
        llvm::Instruction::setMetadata((llvm::Instruction *)v33, MDKindID, v48);
      }
      if (a5)
      {
        uint64_t v50 = (uint64_t)a1[2];
        uint64_t v51 = **(void **)(v50 + 64);
        uint64_t v52 = *(llvm::ConstantInt **)(v51 + 1960);
        unint64_t v53 = *(unsigned int *)(v51 + 1968);
        unsigned int v186 = v53 >> 8;
        if (v53 >> 8 > 0x40) {
          operator new[]();
        }
        if (v53 <= 0xFF) {
          LOBYTE(v54) = 0;
        }
        else {
          unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v53) + 63);
        }
        uint64_t v185 = (const char *)(v54 & 1);
        unint64_t v55 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&v185, v47);
        if (v186 >= 0x41 && v185) {
          MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
        }
        __int16 v187 = 257;
        a5 = sub_1CB844A3C(v50, a5, (uint64_t)v55, (uint64_t)&v185, 0, 0);
      }
      BOOL v16 = (const llvm::APFloat *)(v16 + 1);
      unsigned int v9 = **a1;
      unsigned int v10 = *a1[1];
      int v11 = v9 / v10;
    }
    while (v16 < v9 / v10);
  }
  else
  {
    int v11 = v9 / v10;
  }
  unint64_t v12 = v9 % v10;
  if (v12)
  {
    unint64_t v13 = v11 * v10;
    if (*(unsigned char *)a1[10])
    {
      unint64_t v14 = (uint64_t *)a1[2];
      __int16 v187 = 257;
      if (a5) {
        uint64_t v15 = sub_1CC278130(v14, v7, v6, (const char *)a5, (uint64_t)&v185);
      }
      else {
        uint64_t v15 = sub_1CB844364(v14, v7, (const llvm::APInt *)v6, v9 / v10, (uint64_t)&v185);
      }
      BOOL v56 = (unsigned __int8 *)v15;
      llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)*a1[11]);
      long long v58 = v57;
      uint64_t v59 = **(void **)(*(void *)a1[6] - 32);
      unsigned int v60 = *(_DWORD *)(v59 + 8);
      if ((v60 & 0xFE) == 0x12) {
        unsigned int v60 = *(_DWORD *)(**(void **)(v59 + 16) + 8);
      }
      unint64_t v61 = llvm::PointerType::get(v57, (llvm::Type *)(v60 >> 8));
      unint64_t v63 = a1[2];
      __int16 v184 = 257;
      if (*(void *)v56 != v61)
      {
        if (v56[16] <= 0x14u)
        {
          BOOL v56 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**((void **)v63 + 9) + 224))(*((void *)v63 + 9), 49, v56, v61);
          if (v56) {
            BOOL v67 = v56[16] >= 0x1Cu;
          }
          else {
            BOOL v67 = 0;
          }
          if (v67)
          {
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)v63 + 10) + 16))(*((void *)v63 + 10), v56, v183, *((void *)v63 + 6), *((void *)v63 + 7));
            uint64_t v161 = v63[2];
            if (v161)
            {
              uint64_t v166 = *(void *)v63;
              uint64_t v167 = v166 + 16 * v161;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v166, *(llvm::MDNode **)(v166 + 8));
                v166 += 16;
              }
              while (v166 != v167);
            }
          }
        }
        else
        {
          __int16 v187 = 257;
          BOOL v56 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v56, v61, &v185, 0);
          (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)v63 + 10) + 16))(*((void *)v63 + 10), v56, v183, *((void *)v63 + 6), *((void *)v63 + 7));
          uint64_t v64 = v63[2];
          if (v64)
          {
            uint64_t v65 = *(void *)v63;
            uint64_t v66 = v65 + 16 * v64;
            do
            {
              llvm::Instruction::setMetadata((llvm::Instruction *)v56, *(_DWORD *)v65, *(llvm::MDNode **)(v65 + 8));
              v65 += 16;
            }
            while (v65 != v66);
          }
        }
      }
      uint64_t v176 = (uint64_t)v58;
      std::string::size_type v178 = (const llvm::APInt *)v56;
      uint64_t v172 = v7;
      uint64_t v68 = (unsigned __int8 *)llvm::UndefValue::get(v58, v62);
      if (*a1[11])
      {
        unint64_t v69 = 0;
        do
        {
          uint64_t v71 = (unsigned __int8 *)sub_1CC88F460(v182, *(llvm::ConstantDataSequential **)(*(void *)a1[6] - 64), (const llvm::APFloat *)(v13 + v69));
          uint64_t v72 = (uint64_t)a1[2];
          uint64_t v73 = **(void **)(v72 + 64);
          uint64_t v74 = *(llvm::ConstantInt **)(v73 + 1960);
          unint64_t v75 = *(unsigned int *)(v73 + 1968);
          unsigned int v186 = v75 >> 8;
          if (v75 >> 8 > 0x40) {
            operator new[]();
          }
          if (v75 <= 0xFF) {
            unint64_t v76 = 0;
          }
          else {
            unint64_t v76 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v75) + 63);
          }
          uint64_t v185 = (const char *)(v76 & v69);
          uint64_t v77 = (unsigned __int8 *)llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v185, v70);
          if (v186 >= 0x41 && v185) {
            MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
          }
          __int16 v187 = 257;
          uint64_t v68 = (unsigned __int8 *)sub_1CB84478C(v72, v68, v71, v77, (uint64_t)&v185);
          ++v69;
        }
        while (v69 < *a1[11]);
      }
      unint64_t v78 = *a1[3];
      unint64_t v79 = __clz(v78) ^ 0x13F;
      if (v78) {
        __int16 v80 = v79;
      }
      else {
        __int16 v80 = 0;
      }
      unint64_t v81 = (uint64_t ***)sub_1CC27BF8C((uint64_t *)a1[2], (uint64_t)v68, (uint64_t)v178, v80, 0);
      unint64_t v82 = v81;
      unint64_t v83 = *(llvm::MDNode **)a1[8];
      if (v83) {
        llvm::Value::setMetadata(v81, 1, v83);
      }
      unint64_t v84 = *(llvm::MDNode **)a1[9];
      uint64_t v7 = v172;
      if (v84)
      {
        int v85 = llvm::LLVMContext::getMDKindID(**v82, "srcloc", 6uLL);
        llvm::Instruction::setMetadata((llvm::Instruction *)v82, v85, v84);
      }
      int v86 = *a1[11];
      unint64_t v12 = (v12 - v86);
      unint64_t v13 = (v86 + v13);
      if (v12 == 1)
      {
LABEL_85:
        uint64_t v87 = **(void **)(*(void *)a1[6] - 32);
        unsigned int v88 = *(_DWORD *)(v87 + 8);
        if ((v88 & 0xFE) == 0x12) {
          unsigned int v88 = *(_DWORD *)(**(void **)(v87 + 16) + 8);
        }
        int v89 = a1[2];
        unint64_t v90 = llvm::PointerType::get(*(llvm::PointerType **)a1[7], (llvm::Type *)(v88 >> 8));
        __int16 v184 = 257;
        uint64_t v91 = (unsigned __int8 *)a4;
        if (*(void *)a4 == v90) {
          goto LABEL_98;
        }
        if (*(unsigned __int8 *)(a4 + 16) <= 0x14u)
        {
          uint64_t v91 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t))(**((void **)v89 + 9) + 224))(*((void *)v89 + 9), 49);
          if (v91) {
            BOOL v98 = v91[16] >= 0x1Cu;
          }
          else {
            BOOL v98 = 0;
          }
          if (!v98) {
            goto LABEL_98;
          }
          int v92 = (llvm::Instruction *)v91;
          (*(void (**)(void))(**((void **)v89 + 10) + 16))(*((void *)v89 + 10));
          uint64_t v162 = v89[2];
          if (v162)
          {
            uint64_t v163 = *(void *)v89;
            uint64_t v164 = v163 + 16 * v162;
            do
            {
              llvm::Instruction::setMetadata(v92, *(_DWORD *)v163, *(llvm::MDNode **)(v163 + 8));
              v163 += 16;
            }
            while (v163 != v164);
          }
        }
        else
        {
          __int16 v187 = 257;
          int v92 = llvm::CastInst::Create(49, a4, v90, &v185, 0);
          (*(void (**)(void))(**((void **)v89 + 10) + 16))(*((void *)v89 + 10));
          uint64_t v93 = v89[2];
          if (v93)
          {
            uint64_t v159 = *(void *)v89;
            uint64_t v160 = v159 + 16 * v93;
            do
            {
              llvm::Instruction::setMetadata(v92, *(_DWORD *)v159, *(llvm::MDNode **)(v159 + 8));
              v159 += 16;
            }
            while (v159 != v160);
          }
        }
        uint64_t v91 = (unsigned __int8 *)v92;
LABEL_98:
        uint64_t v99 = (uint64_t)a1[2];
        if (a5)
        {
          uint64_t v100 = (uint64_t *)v91;
          uint64_t v101 = *a1[1];
          uint64_t v102 = **(void **)(v99 + 64);
          int v103 = *(llvm::ConstantInt **)(v102 + 1960);
          unint64_t v104 = *(unsigned int *)(v102 + 1968);
          unsigned int v186 = v104 >> 8;
          if (v104 >> 8 > 0x40) {
            operator new[]();
          }
          if (v104 <= 0xFF) {
            unint64_t v105 = 0;
          }
          else {
            unint64_t v105 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v104) + 63);
          }
          uint64_t v185 = (const char *)(v105 & v101);
          uint64_t v106 = llvm::ConstantInt::get(v103, (llvm::LLVMContext *)&v185, (const llvm::APInt *)v91);
          if (v186 >= 0x41 && v185) {
            MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
          }
          __int16 v187 = 257;
          uint64_t v108 = sub_1CC09A1EC(v99, (uint64_t)a5, (uint64_t)v106, (uint64_t)&v185, 0, 0);
          if (*(unsigned char *)a1[10])
          {
            uint64_t v109 = (uint64_t)a1[2];
            uint64_t v110 = *a1[11];
            uint64_t v111 = **(void **)(v109 + 64);
            int v112 = *(llvm::ConstantInt **)(v111 + 1960);
            unint64_t v113 = *(unsigned int *)(v111 + 1968);
            unsigned int v186 = v113 >> 8;
            if (v113 >> 8 > 0x40) {
              operator new[]();
            }
            if (v113 <= 0xFF) {
              unint64_t v114 = 0;
            }
            else {
              unint64_t v114 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v113) + 63);
            }
            uint64_t v185 = (const char *)(v114 & v110);
            uint64_t v115 = llvm::ConstantInt::get(v112, (llvm::LLVMContext *)&v185, v107);
            if (v186 >= 0x41 && v185) {
              MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
            }
            __int16 v187 = 257;
            uint64_t v108 = sub_1CB844A3C(v109, v108, (uint64_t)v115, (uint64_t)&v185, 0, 0);
          }
          unsigned int v116 = (uint64_t *)a1[2];
          uint64_t v117 = *(void *)a1[7];
          __int16 v187 = 257;
          int v118 = sub_1CC278130(v116, v117, v100, (const char *)v108, (uint64_t)&v185);
        }
        else
        {
          uint64_t v119 = *(void *)a1[7];
          __int16 v187 = 257;
          int v118 = sub_1CB844364((uint64_t *)v99, v119, (const llvm::APInt *)v91, v13, (uint64_t)&v185);
        }
        int v120 = v118;
        BOOL v121 = (uint64_t *)a1[2];
        unsigned int v122 = sub_1CC88F460(v182, *(llvm::ConstantDataSequential **)(*(void *)a1[6] - 64), (const llvm::APFloat *)v13);
        unint64_t v123 = *a1[3];
        unint64_t v124 = __clz(v123) ^ 0x13F;
        if (v123) {
          __int16 v125 = v124;
        }
        else {
          __int16 v125 = 0;
        }
        int v126 = v121;
        uint64_t v127 = (uint64_t)v120;
LABEL_147:
        uint64_t v154 = (uint64_t ***)sub_1CC27BF8C(v126, (uint64_t)v122, v127, v125, 0);
        unsigned int v155 = v154;
        uint64_t v156 = *(llvm::MDNode **)a1[8];
        if (v156) {
          llvm::Value::setMetadata(v154, 1, v156);
        }
        int v157 = *(llvm::MDNode **)a1[9];
        if (v157)
        {
          int v158 = llvm::LLVMContext::getMDKindID(**v155, "srcloc", 6uLL);
          llvm::Instruction::setMetadata((llvm::Instruction *)v155, v158, v157);
        }
        return;
      }
      uint64_t v94 = (uint64_t *)a1[2];
      __int16 v187 = 257;
      unint64_t v95 = (unsigned __int8 *)sub_1CB844364(v94, v176, v178, 1, (uint64_t)&v185);
      if (v95)
      {
LABEL_119:
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)v12);
        uint64_t v131 = **(void **)(*(void *)a1[6] - 32);
        unsigned int v132 = *(_DWORD *)(v131 + 8);
        if ((v132 & 0xFE) == 0x12) {
          unsigned int v132 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
        }
        unint64_t v133 = llvm::PointerType::get(v130, (llvm::Type *)(v132 >> 8));
        unint64_t v134 = a1[2];
        __int16 v184 = 257;
        if (*(void *)v95 != v133)
        {
          if (v95[16] <= 0x14u)
          {
            unint64_t v95 = (unsigned __int8 *)(*(uint64_t (**)(void, uint64_t, unsigned __int8 *, unint64_t))(**((void **)v134 + 9) + 224))(*((void *)v134 + 9), 49, v95, v133);
            if (v95) {
              BOOL v138 = v95[16] >= 0x1Cu;
            }
            else {
              BOOL v138 = 0;
            }
            if (v138)
            {
              (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)v134 + 10)
                                                                                         + 16))(*((void *)v134 + 10), v95, v183, *((void *)v134 + 6), *((void *)v134 + 7));
              uint64_t v165 = v134[2];
              if (v165)
              {
                uint64_t v168 = *(void *)v134;
                uint64_t v169 = v168 + 16 * v165;
                do
                {
                  llvm::Instruction::setMetadata((llvm::Instruction *)v95, *(_DWORD *)v168, *(llvm::MDNode **)(v168 + 8));
                  v168 += 16;
                }
                while (v168 != v169);
              }
            }
          }
          else
          {
            __int16 v187 = 257;
            unint64_t v95 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v95, v133, &v185, 0);
            (*(void (**)(void, unsigned __int8 *, unsigned char *, void, void))(**((void **)v134 + 10) + 16))(*((void *)v134 + 10), v95, v183, *((void *)v134 + 6), *((void *)v134 + 7));
            uint64_t v135 = v134[2];
            if (v135)
            {
              uint64_t v136 = *(void *)v134;
              uint64_t v137 = v136 + 16 * v135;
              do
              {
                llvm::Instruction::setMetadata((llvm::Instruction *)v95, *(_DWORD *)v136, *(llvm::MDNode **)(v136 + 8));
                v136 += 16;
              }
              while (v136 != v137);
            }
          }
        }
        BOOL v181 = v95;
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)a1[7], (llvm::Type *)v12);
        int v141 = (unsigned __int8 *)llvm::UndefValue::get(v139, v140);
        if (v12)
        {
          uint64_t v142 = 0;
          int v143 = v13;
          do
          {
            unsigned int v145 = (unsigned __int8 *)sub_1CC88F460(v182, *(llvm::ConstantDataSequential **)(*(void *)a1[6] - 64), (const llvm::APFloat *)(v143 + v142));
            uint64_t v146 = (uint64_t)a1[2];
            uint64_t v147 = **(void **)(v146 + 64);
            int v148 = *(llvm::ConstantInt **)(v147 + 1960);
            unint64_t v149 = *(unsigned int *)(v147 + 1968);
            unsigned int v186 = v149 >> 8;
            if (v149 >> 8 > 0x40) {
              operator new[]();
            }
            if (v149 <= 0xFF) {
              unint64_t v150 = 0;
            }
            else {
              unint64_t v150 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v149) + 63);
            }
            uint64_t v185 = (const char *)(v150 & v142);
            uint64_t v151 = (unsigned __int8 *)llvm::ConstantInt::get(v148, (llvm::LLVMContext *)&v185, v144);
            if (v186 >= 0x41 && v185) {
              MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
            }
            __int16 v187 = 257;
            int v141 = (unsigned __int8 *)sub_1CB84478C(v146, v141, v145, v151, (uint64_t)&v185);
            ++v142;
          }
          while (v12 != v142);
        }
        int v126 = (uint64_t *)a1[2];
        unint64_t v152 = *a1[3];
        unint64_t v153 = __clz(v152) ^ 0x13F;
        if (v152) {
          __int16 v125 = v153;
        }
        else {
          __int16 v125 = 0;
        }
        unsigned int v122 = (llvm::UndefValue *)v141;
        uint64_t v127 = (uint64_t)v181;
        goto LABEL_147;
      }
    }
    else if (v12 == 1)
    {
      goto LABEL_85;
    }
    std::string::size_type v96 = (uint64_t *)a1[2];
    if (a5)
    {
      __int16 v187 = 257;
      uint64_t v97 = sub_1CC278130(v96, v7, v6, (const char *)a5, (uint64_t)&v185);
    }
    else
    {
      unsigned int v128 = **a1;
      unsigned int v129 = *a1[1];
      __int16 v187 = 257;
      uint64_t v97 = sub_1CB844364(v96, v7, (const llvm::APInt *)v6, v128 / v129, (uint64_t)&v185);
    }
    unint64_t v95 = (unsigned __int8 *)v97;
    goto LABEL_119;
  }
}

uint64_t sub_1CC890900()
{
  v1.n128_u64[0] = (unint64_t)&v4;
  int v3 = 1;
  LODWORD(v4) = -1;
  sub_1CD646328((int **)&v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCDD188, &dword_1CB82C000);
  int v2 = 1;
  int v3 = -1;
  uint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Max architectural width of LD/ST instructions";
  v1.n128_u64[1] = 45;
  sub_1CD646448((llvm::cl::Option *)&unk_1EBCDD248, "scalarize-maxldst-width", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDD248, &dword_1CB82C000);
}

void sub_1CC8909D0()
{
}

uint64_t sub_1CC890A68(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD308;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2620128;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD310, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC8909D0;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDD310, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC890B18()
{
}

void sub_1CC890B58(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC890B90(llvm::FunctionPass *a1, uint64_t a2)
{
  if ((llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2) & 1) != 0
    || (uint64_t v3 = *(void *)(a2 + 80), v3 == a2 + 72))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      if (v3) {
        uint64_t v5 = v3 - 24;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = v5 + 40;
      for (uint64_t i = *(void *)(v5 + 48); i != v6; uint64_t i = *(void *)(i + 8))
      {
        if (i && *(unsigned char *)(i - 8) == 84)
        {
          __int16 v8 = *(_WORD *)(i - 6);
          if ((v8 & 3u) - 1 <= 1)
          {
            *(_WORD *)(i - 6) = v8 & 0xFFFC;
            char v4 = 1;
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a2 + 72);
  }
  return v4 & 1;
}

void sub_1CC890C44(uint64_t a1)
{
}

void sub_1CC890CFC()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t sub_1CC890FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD318;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26201C8;
  *(_WORD *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 30) = 0;
  sub_1CB93141C(a1 + 32, a2);
  sub_1CB93141C(a1 + 64, a3);
  sub_1CB93141C(a1 + 96, a4);
  sub_1CB93141C(a1 + 128, a5);
  uint64_t v15 = (llvm::PassRegistry *)sub_1CB93141C(a1 + 160, a6);
  *(void *)(a1 + 192) = a7;
  *(unsigned char *)(a1 + 200) = a8;
  if (dword_1EBCDD3A8 != -1) {
    *(unsigned char *)(a1 + 28) = dword_1EBCDD3A8 != 0;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v15);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD320, memory_order_acquire) != -1)
  {
    v19[0] = sub_1CC890C44;
    v19[1] = &PassRegistry;
    unint64_t v18 = v19;
    std::__call_once(&qword_1EBCDD320, &v18, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC891140()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1CC8913D8(llvm::Pass *this)
{
  *(void *)this = &unk_1F26201C8;
  int v2 = (char *)this + 160;
  uint64_t v3 = (char *)*((void *)this + 23);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  char v4 = (llvm::Pass *)*((void *)this + 19);
  if (v4 == (llvm::Pass *)((char *)this + 128))
  {
    (*(void (**)(char *))(*((void *)this + 16) + 32))((char *)this + 128);
  }
  else if (v4)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = (llvm::Pass *)*((void *)this + 15);
  if (v5 == (llvm::Pass *)((char *)this + 96))
  {
    (*(void (**)(char *))(*((void *)this + 12) + 32))((char *)this + 96);
  }
  else if (v5)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (llvm::Pass *)*((void *)this + 11);
  if (v6 == (llvm::Pass *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
  }
  else if (v6)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = (llvm::Pass *)*((void *)this + 7);
  if (v7 == (llvm::Pass *)((char *)this + 32))
  {
    (*(void (**)(char *))(*((void *)this + 4) + 32))((char *)this + 32);
  }
  else if (v7)
  {
    (*(void (**)(llvm::Pass *))(*(void *)v7 + 40))(v7);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC89161C(llvm::Pass *a1)
{
  sub_1CC8913D8(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC891654()
{
  return "Two Pass Punchthrough";
}

void sub_1CC891664(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC8916E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  v313[20] = *MEMORY[0x1E4F143B8];
  __int16 v8 = *(llvm::Module **)(v5 + 40);
  unint64_t v208 = "agx.early.fragment.tests";
  __int16 v212 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v8, &v208);
  if (NamedMetadata)
  {
    uint64_t v10 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 128);
    int v11 = (void *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u) {
      int v11 = (void *)*v11;
    }
    if (*v11) {
      return 0;
    }
  }
  uint64_t v12 = 0;
  int v13 = (*(unsigned __int16 *)(v6 + 18) >> 4) & 0x3FF;
  if (v13) {
    BOOL v14 = v13 == 8;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || v13 == 255) {
    return v12;
  }
  uint64_t v15 = *(uint64_t **)(v7 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_14:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::PostDominatorTreeWrapperPass::ID);
  unint64_t v20 = *(uint64_t **)(v7 + 8);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 == v22)
  {
LABEL_19:
    uint64_t v23 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v21 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_19;
      }
    }
    uint64_t v23 = *(void *)(v21 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::DominatorTreeWrapperPass::ID);
  BOOL v24 = *(uint64_t **)(v7 + 8);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  if (v25 == v26)
  {
LABEL_24:
    uint64_t v27 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v25 != &llvm::LoopInfoWrapperPass::ID)
    {
      v25 += 16;
      if (v25 == v26) {
        goto LABEL_24;
      }
    }
    uint64_t v27 = *(void *)(v25 + 8);
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v27 + 96))(v27, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v29 = *(void *)(v7 + 56);
  if (v29) {
    *(unsigned char *)(v7 + 28) |= (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 48))(v29, v6);
  }
  uint64_t v30 = *(void *)(v7 + 88);
  if (v30) {
    char v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 48))(v30, v6);
  }
  else {
    char v31 = 1;
  }
  uint64_t v32 = *(void *)(v7 + 120);
  if (v32) {
    *(unsigned char *)(v7 + 29) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, v6);
  }
  uint64_t v33 = *(void *)(v7 + 152);
  if (v33) {
    *(unsigned char *)(v7 + 30) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 48))(v33, v6);
  }
  char v34 = *(unsigned char *)(v7 + 28) ? 1 : v31;
  if ((v34 & 1) == 0 && !*(unsigned char *)(v7 + 29)) {
    return 0;
  }
  BYTE1(v208) = *(unsigned char *)(v7 + 28);
  uint64_t v209 = 1;
  for (uint64_t i = 2; i != 210; i += 13)
    (&v208)[i] = (const char *)-4096;
  uint64_t v213 = 1;
  for (uint64_t j = 211; j != 419; j += 13)
    (&v208)[j] = (const char *)-4096;
  uint64_t v216 = v19 + 32;
  uint64_t v217 = v219;
  uint64_t v218 = 0xA00000000;
  uint64_t v220 = 1;
  for (uint64_t k = 463; k != 479; k += 2)
    (&v208)[k] = (const char *)-4096;
  BOOL v222 = v224;
  uint64_t v223 = 0x400000000;
  int v225 = v229;
  BOOL v226 = v229;
  uint64_t v227 = 16;
  int v228 = 0;
  unint64_t v230 = v234;
  unsigned int v231 = v234;
  uint64_t v232 = 16;
  int v233 = 0;
  unsigned int v235 = v237;
  uint64_t v236 = 0x1400000000;
  uint64_t v238 = v242;
  int v239 = v242;
  uint64_t v240 = 8;
  int v241 = 0;
  uint64_t v243 = v247;
  int v244 = v247;
  uint64_t v245 = 4;
  int v246 = 0;
  long long v248 = 0u;
  int v249 = 0;
  uint64_t v250 = v28 + 32;
  uint64_t v251 = 0;
  sub_1CC81F11C((uint64_t)&v209, v6);
  uint64_t v38 = 0;
  char v294 = v296;
  uint64_t v295 = 0x400000000;
  unint64_t v297 = v299;
  uint64_t v298 = 0x400000000;
  long long v300 = v302;
  uint64_t v301 = 0x600000000;
  unint64_t v303 = v305;
  uint64_t v304 = 0x400000000;
  v305[32] = BYTE1(v208);
  if (BYTE1(v208)) {
    unsigned int v39 = (__int32 *)&unk_1CFB272BC;
  }
  else {
    unsigned int v39 = (__int32 *)&unk_1CFB272B0;
  }
  if (BYTE1(v208)) {
    size_t v40 = 6;
  }
  else {
    size_t v40 = 3;
  }
  int v204 = (llvm::ValueAsMetadata *)v6;
  uint64_t v41 = *(uint64_t ***)(v6 + 40);
  while (!sub_1CD110204(v41, v39[v38], 0, 0))
  {
    if (v40 == ++v38) {
      goto LABEL_95;
    }
  }
  uint64_t v42 = *(void *)(v6 + 40);
  uint64_t v43 = v42 + 24;
  uint64_t v44 = *(void *)(v42 + 32);
  if (v44 != v42 + 24)
  {
    do
    {
      if (v44) {
        uint64_t v45 = v44 - 56;
      }
      else {
        uint64_t v45 = 0;
      }
      if ((*(unsigned char *)(v45 + 33) & 0x20) == 0) {
        goto LABEL_84;
      }
      unsigned int v46 = (llvm *)*(unsigned int *)(v45 + 36);
      if (sub_1CB859A14(*(_DWORD *)(v45 + 36)))
      {
        uint64_t v47 = v298;
        if (v298 >= (unint64_t)HIDWORD(v298)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v48 = v297;
        __int16 v49 = &v298;
      }
      else if (llvm::GetItrKind(v46))
      {
        uint64_t v47 = v301;
        if (v301 >= (unint64_t)HIDWORD(v301)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v48 = v300;
        __int16 v49 = &v301;
      }
      else
      {
        if ((sub_1CD0FF1D0((int)v46) & 1) == 0)
        {
          BOOL v50 = sub_1CC7A8558((int)v46);
          if ((v46 - 2784) >= 3 && !v50)
          {
            unint64_t v55 = wmemchr(v39, (__int32)v46, v40);
            BOOL v56 = &v39[v40];
            if (v55) {
              BOOL v56 = v55;
            }
            if (v40 == v56 - v39) {
              goto LABEL_84;
            }
            uint64_t v47 = v295;
            if (v295 >= (unint64_t)HIDWORD(v295)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v48 = v294;
            __int16 v49 = &v295;
            goto LABEL_83;
          }
          uint64_t v52 = 2;
          if (!v50) {
            uint64_t v52 = 0;
          }
          if (v46 == 2144) {
            uint64_t v52 = 0;
          }
          if (v46 == 2142) {
            uint64_t v52 = 0;
          }
          uint64_t v53 = *(void *)(*(void *)(*(void *)(v45 + 24) + 16) + ((8 * v52) | 8));
          unsigned int v54 = *(_DWORD *)(v53 + 8);
          if ((v54 & 0xFE) == 0x12) {
            unsigned int v54 = *(_DWORD *)(**(void **)(v53 + 16) + 8);
          }
          if (v54 >> 8 != 65) {
            goto LABEL_84;
          }
        }
        uint64_t v47 = v304;
        if (v304 >= (unint64_t)HIDWORD(v304)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v48 = v303;
        __int16 v49 = &v304;
      }
LABEL_83:
      v48[v47] = v45;
      ++*(_DWORD *)v49;
LABEL_84:
      uint64_t v44 = *(void *)(v44 + 8);
    }
    while (v44 != v43);
  }
LABEL_95:
  if (!v295)
  {
    uint64_t v60 = v7;
    goto LABEL_223;
  }
  uint64_t v57 = v204;
  uint64_t v58 = *((void *)v204 + 10);
  if (v58) {
    uint64_t v59 = v58 - 24;
  }
  else {
    uint64_t v59 = 0;
  }
  unint64_t v306 = v310;
  BOOL v307 = v310;
  uint64_t v308 = 8;
  int v309 = 0;
  uint64_t v60 = v7;
  if (!v304)
  {
LABEL_110:
    uint64_t v289 = v293;
    int v290 = v293;
    uint64_t v291 = 16;
    int v292 = 0;
    BYTE2(v208) = 0;
    unint64_t v261 = (void *)v59;
    sub_1CC08CA3C((uint64_t *)&v261, (uint64_t)&v273);
    uint64_t v65 = v265;
    unint64_t v261 = v265;
    uint64_t v66 = __src;
    if (__src == v273)
    {
      unint64_t v262 = v265;
      BOOL v67 = __src;
    }
    else
    {
      int v202 = (int)v275;
      uint64_t v65 = malloc_type_malloc(8 * v275, 0x4065EBACuLL);
      if (!v65)
      {
        if (v202) {
          goto LABEL_403;
        }
        uint64_t v65 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        uint64_t v57 = v204;
        if (!v65) {
          goto LABEL_403;
        }
      }
      unint64_t v262 = v65;
      BOOL v67 = v273;
      uint64_t v66 = __src;
    }
    int v68 = HIDWORD(v275);
    LODWORD(v263) = v275;
    if (v66 == v67) {
      unsigned int v69 = HIDWORD(v275);
    }
    else {
      unsigned int v69 = v275;
    }
    if (v69)
    {
      memmove(v65, v66, 8 * v69);
      int v68 = HIDWORD(v275);
    }
    unsigned int v70 = v279;
    HIDWORD(v263) = v68;
    LODWORD(v264) = v276;
    BOOL v270 = v272;
    uint64_t v271 = 0x800000000;
    if (v279)
    {
      if (v279 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v272, v278, 24 * v279);
      LODWORD(v271) = v70;
    }
    uint64_t v71 = &v257;
    uint64_t v252 = &v257;
    uint64_t v72 = v282;
    if (v282 == v281)
    {
      uint64_t v253 = &v257;
      uint64_t v73 = v282;
LABEL_122:
      unsigned int v254 = v283;
      unsigned int v74 = v284;
      if (v72 == v73) {
        unsigned int v75 = v284;
      }
      else {
        unsigned int v75 = v283;
      }
      if (v75)
      {
        memmove(v71, v72, 8 * v75);
        unsigned int v74 = v284;
      }
      unsigned int v255 = v74;
      LODWORD(v256) = v285;
      int v258 = &v260;
      uint64_t v259 = 0x800000000;
      unsigned int v76 = v287;
      if (v287)
      {
        if (v287 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(&v260, v286, 24 * v287);
        LODWORD(v259) = v76;
      }
      while (1)
      {
        int v77 = v271;
        if (v271 == v76)
        {
          if (!v76)
          {
LABEL_201:
            if (v258 != &v260) {
              free(v258);
            }
            if (v253 != v252) {
              free(v253);
            }
            if (v270 != v272) {
              free(v270);
            }
            if (v262 != v261) {
              free(v262);
            }
            if (v286 != &v288) {
              free(v286);
            }
            if (v282 != v281) {
              free(v282);
            }
            if (v278 != &v280) {
              free(v278);
            }
            if (__src != v273) {
              free(__src);
            }
            uint64_t v273 = v57;
            operator new();
          }
          unint64_t v78 = v258;
          unint64_t v79 = v270;
          while (*(void *)v79 == *(void *)v78 && v79[4] == v78[4])
          {
            v79 += 6;
            v78 += 6;
            if (v79 == (_DWORD *)((char *)v270 + 24 * v76)) {
              goto LABEL_201;
            }
          }
        }
        uint64_t v81 = *((void *)v270 + 3 * v271 - 3);
        unint64_t v84 = *(void **)(v81 + 40);
        unint64_t v82 = (void *)(v81 + 40);
        unint64_t v83 = v84;
        if (v84 == v82) {
          goto LABEL_198;
        }
        do
        {
          int v85 = v83 - 3;
          if (v83) {
            int v86 = v83 - 3;
          }
          else {
            int v86 = 0;
          }
          if (*((unsigned char *)v86 + 16) == 84)
          {
            uint64_t v87 = *(v86 - 4);
            if (v87)
            {
              if (!*(unsigned char *)(v87 + 16)
                && *(void *)(v87 + 24) == v86[9]
                && (*(unsigned char *)(v87 + 33) & 0x20) != 0
                && v295)
              {
                int v88 = *(_DWORD *)(*(v83 - 7) + 36);
                int v89 = (char *)v294;
                unint64_t v90 = (char *)v294 + 8 * v295;
                while (v88 != *(_DWORD *)(*(void *)v89 + 36))
                {
LABEL_187:
                  v89 += 8;
                  if (v89 == v90) {
                    goto LABEL_196;
                  }
                }
                if (v223 >= (unint64_t)HIDWORD(v223)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v222 + v223) = v85;
                LODWORD(v223) = v223 + 1;
                uint64_t v91 = (char *)v290;
                uint64_t v92 = HIDWORD(v291);
                if (v290 == v289)
                {
                  if (HIDWORD(v291))
                  {
                    uint64_t v93 = 0;
                    uint64_t v94 = 8 * HIDWORD(v291);
                    unint64_t v95 = v290;
                    do
                    {
                      if ((void *)*v95 == v85) {
                        goto LABEL_185;
                      }
                      if (*v95 == -2) {
                        uint64_t v93 = v95;
                      }
                      ++v95;
                      v94 -= 8;
                    }
                    while (v94);
                    if (v93)
                    {
                      void *v93 = v85;
                      --v292;
LABEL_185:
                      if (v83[2] != v59) {
                        BYTE2(v208) = 1;
                      }
                      goto LABEL_187;
                    }
                  }
                  unsigned int v96 = v291;
                  if (HIDWORD(v291) < v291)
                  {
                    ++HIDWORD(v291);
                    *((void *)v290 + v92) = v85;
                    goto LABEL_185;
                  }
                }
                else
                {
                  unsigned int v96 = v291;
                }
                if (3 * v96 <= 4 * (HIDWORD(v291) - v292))
                {
                  if (v96 >= 0x40) {
                    v96 *= 2;
                  }
                  else {
                    unsigned int v96 = 128;
                  }
                }
                else if (v96 - HIDWORD(v291) >= v96 >> 3)
                {
                  goto LABEL_166;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v289, v96);
                unsigned int v96 = v291;
                uint64_t v91 = (char *)v290;
LABEL_166:
                unsigned int v97 = v96 - 1;
                unsigned int v98 = (v96 - 1) & ((v85 >> 4) ^ (v85 >> 9));
                uint64_t v99 = &v91[8 * v98];
                uint64_t v100 = *(void **)v99;
                if (*(void *)v99 == -1)
                {
                  uint64_t v101 = 0;
LABEL_178:
                  if (v101) {
                    unint64_t v105 = v101;
                  }
                  else {
                    unint64_t v105 = v99;
                  }
                  if (*(void **)v105 != v85)
                  {
                    if (*(void *)v105 == -2) {
                      --v292;
                    }
                    else {
                      ++HIDWORD(v291);
                    }
                    *(void *)unint64_t v105 = v85;
                  }
                }
                else
                {
                  uint64_t v101 = 0;
                  int v102 = 1;
                  while (v100 != v85)
                  {
                    if (v101) {
                      BOOL v103 = 0;
                    }
                    else {
                      BOOL v103 = v100 == (void *)-2;
                    }
                    if (v103) {
                      uint64_t v101 = v99;
                    }
                    unsigned int v104 = v98 + v102++;
                    unsigned int v98 = v104 & v97;
                    uint64_t v99 = &v91[8 * (v104 & v97)];
                    uint64_t v100 = *(void **)v99;
                    if (*(void *)v99 == -1) {
                      goto LABEL_178;
                    }
                  }
                }
                goto LABEL_185;
              }
            }
          }
LABEL_196:
          unint64_t v83 = (void *)*v83;
        }
        while (v83 != v82);
        int v77 = v271;
LABEL_198:
        LODWORD(v271) = v77 - 1;
        uint64_t v57 = v204;
        if (v77 != 1) {
          sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v261);
        }
        unsigned int v76 = v259;
      }
    }
    unsigned int v203 = v283;
    uint64_t v71 = (uint64_t *)malloc_type_malloc(8 * v283, 0x4065EBACuLL);
    if (v71 || !v203 && (v71 = (uint64_t *)malloc_type_malloc(1uLL, 0x4065EBACuLL), uint64_t v57 = v204, v71))
    {
      uint64_t v253 = v71;
      uint64_t v73 = v281;
      uint64_t v72 = v282;
      goto LABEL_122;
    }
LABEL_403:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v61 = (uint64_t *)v303;
LABEL_101:
  uint64_t v62 = *v61;
  while (1)
  {
    uint64_t v62 = *(void *)(v62 + 8);
    if (!v62)
    {
      if (++v61 == (uint64_t *)((char *)v303 + 8 * v304)) {
        goto LABEL_110;
      }
      goto LABEL_101;
    }
    uint64_t v63 = *(void *)(v62 + 24);
    if (*(unsigned char *)(v63 + 16) == 84)
    {
      uint64_t v64 = *(void *)(v63 - 32);
      if (v64)
      {
        if (!*(unsigned char *)(v64 + 16)
          && *(void *)(v64 + 24) == *(void *)(v63 + 72)
          && (*(unsigned char *)(v64 + 33) & 0x20) != 0)
        {
          break;
        }
      }
    }
  }
  if (v307 != v306) {
    free(v307);
  }
LABEL_223:
  if (v303 != v305) {
    free(v303);
  }
  if (v300 != v302) {
    free(v300);
  }
  if (v297 != v299) {
    free(v297);
  }
  if (v294 != v296) {
    free(v294);
  }
  LOBYTE(v208) = 0;
  uint64_t v106 = sub_1CC89A0F4((uint64_t)&v208);
  if ((_BYTE)v208) {
    BOOL v107 = v106 == 0;
  }
  else {
    BOOL v107 = 1;
  }
  uint64_t v12 = !v107;
  if (!v107)
  {
    char v108 = *(unsigned char *)(v60 + 30);
    uint64_t v109 = *(llvm::Type **)(v60 + 192);
    LOBYTE(v261) = *(unsigned char *)(v60 + 28);
    BYTE1(v261) = v108;
    unint64_t v262 = &v208;
    uint64_t v110 = sub_1CC89A0F4((uint64_t)&v208);
    uint64_t v111 = *(void *)(*(void *)(*(void *)(v110 + 40) + 56) + 80);
    if (v111) {
      uint64_t v112 = v111 - 24;
    }
    else {
      uint64_t v112 = 0;
    }
    uint64_t v263 = v110;
    uint64_t v264 = v112;
    memset(v265, 0, sizeof(v265));
    uint64_t v266 = v28 + 32;
    unint64_t v267 = &v271;
    int64x2_t v268 = &v271;
    uint64_t v269 = 16;
    LODWORD(v270) = 0;
    v272[15] = v109;
    uint64_t v113 = *(void *)(v112 + 56);
    char v294 = (void *)1;
    for (uint64_t m = 8; m != 136; m += 16)
      *(void **)((char *)&v294 + m) = (void *)-4096;
    uint64_t v289 = (void *)1;
    for (uint64_t n = 8; n != 136; n += 16)
      *(void **)((char *)&v289 + n) = (void *)-4096;
    uint64_t v116 = v113 + 72;
    for (iuint64_t i = *(void *)(v113 + 80); ii != v116; iuint64_t i = *(void *)(ii + 8))
    {
      if (ii) {
        uint64_t v118 = ii - 24;
      }
      else {
        uint64_t v118 = 0;
      }
      uint64_t v119 = *(void *)(v118 + 40);
      if (v119) {
        uint64_t v120 = v119 - 24;
      }
      else {
        uint64_t v120 = 0;
      }
      if (*(unsigned __int8 *)(v120 + 16) - 29 >= 0xB) {
        uint64_t v120 = 0;
      }
      if (*(unsigned char *)(v120 + 16) == 29) {
        break;
      }
    }
    BOOL v121 = (unsigned int *)v262;
    uint64_t v122 = *((void *)v262 + 548);
    if (v122 == *((void *)v262 + 547)) {
      uint64_t v123 = 4396;
    }
    else {
      uint64_t v123 = 4392;
    }
    uint64_t v124 = *(unsigned int *)((char *)v262 + v123);
    uint64_t v206 = v113;
    if (v124)
    {
      uint64_t v125 = 8 * v124;
      int v126 = (void *)*((void *)v262 + 548);
      do
      {
        if (*v126 < 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_266;
        }
        ++v126;
        v125 -= 8;
      }
      while (v125);
      uint64_t v127 = v262;
    }
    else
    {
      int v126 = (void *)*((void *)v262 + 548);
LABEL_266:
      unsigned int v128 = (void *)(v122 + 8 * v124);
      uint64_t v127 = v262;
      if (v126 != v128)
      {
        uint64_t v252 = 0;
        unsigned int v129 = (unsigned char *)*v126;
        uint64_t v252 = v129;
        if ((v129[23] & 0x10) != 0)
        {
          uint64_t v130 = ***(void ***)v129;
          uint64_t v131 = *(void *)(v130 + 152);
          uint64_t v132 = *(unsigned int *)(v130 + 168);
          if (v132)
          {
            LODWORD(v133) = (v132 - 1) & ((v129 >> 4) ^ (v129 >> 9));
            unint64_t v134 = (void *)(v131 + 16 * v133);
            uint64_t v135 = (unsigned char *)*v134;
            if ((unsigned char *)*v134 != v129)
            {
              int v136 = 1;
              do
              {
                if (v135 == (unsigned char *)-4096) {
                  goto LABEL_274;
                }
                int v137 = v133 + v136++;
                uint64_t v133 = v137 & (v132 - 1);
                uint64_t v135 = *(unsigned char **)(v131 + 16 * v133);
              }
              while (v135 != v129);
              unint64_t v134 = (void *)(v131 + 16 * v133);
            }
          }
          else
          {
LABEL_274:
            unint64_t v134 = (void *)(v131 + 16 * v132);
          }
          BOOL v138 = (void *)v134[1];
          int v141 = (void *)*v138;
          uint64_t v140 = (char *)(v138 + 2);
          int v139 = v141;
        }
        else
        {
          int v139 = 0;
          uint64_t v140 = &byte_1CFBCE98E;
        }
        LOWORD(v277) = 773;
        uint64_t v273 = v140;
        __src = v139;
        BOOL v275 = ".visibility-section";
        operator new();
      }
    }
    uint64_t v311 = v313;
    uint64_t v312 = 0xA00000000;
    uint64_t v273 = &v275;
    __src = (void *)0xA00000000;
    uint64_t v142 = (uint64_t **)v127[571];
    int v143 = *v142;
    unsigned int v144 = v142[1];
    if (v144 != *v142)
    {
      unsigned int v145 = 0;
      unsigned int v207 = 0;
      do
      {
        uint64_t v147 = *--v144;
        uint64_t v146 = v147;
        uint64_t v148 = *((void *)v121 + 548);
        uint64_t v149 = *((void *)v121 + 547);
        if (v148 == v149)
        {
          uint64_t v150 = v121[1099];
          uint64_t v151 = (void *)(v148 + 8 * v150);
          if (v150)
          {
            uint64_t v152 = 0;
            uint64_t v153 = 8 * v150;
            while (*(void *)(v148 + v152) != v146)
            {
              v152 += 8;
              if (v153 == v152) {
                goto LABEL_298;
              }
            }
            uint64_t v151 = (void *)(v148 + v152);
          }
LABEL_298:
          uint64_t v149 = *((void *)v121 + 548);
        }
        else
        {
          uint64_t v154 = v121[1098];
          int v155 = v154 - 1;
          unsigned int v156 = (v154 - 1) & ((v146 >> 4) ^ (v146 >> 9));
          uint64_t v151 = (void *)(v148 + 8 * v156);
          uint64_t v157 = *v151;
          if (*v151 == -1)
          {
            int v158 = 0;
LABEL_317:
            if (v158) {
              uint64_t v151 = v158;
            }
            if (*v151 != v146) {
              uint64_t v151 = (void *)(v148 + 8 * v154);
            }
          }
          else
          {
            int v158 = 0;
            int v159 = 1;
            while (v157 != v146)
            {
              if (v158) {
                BOOL v160 = 0;
              }
              else {
                BOOL v160 = v157 == -2;
              }
              if (v160) {
                int v158 = v151;
              }
              unsigned int v161 = v156 + v159++;
              unsigned int v156 = v161 & v155;
              uint64_t v151 = (void *)(v148 + 8 * (v161 & v155));
              uint64_t v157 = *v151;
              if (*v151 == -1) {
                goto LABEL_317;
              }
            }
          }
        }
        if (v148 == v149) {
          uint64_t v162 = v121 + 1099;
        }
        else {
          uint64_t v162 = v121 + 1098;
        }
        if (v151 != (void *)(v148 + 8 * *v162))
        {
          uint64_t v163 = (void *)sub_1CC87D1D0((uint64_t)&v294, v146);
          uint64_t v164 = v266;
          int v165 = *(_DWORD *)(v266 + 16);
          if (v165)
          {
            uint64_t v166 = *v144;
            uint64_t v167 = *(void *)v266;
            unsigned int v168 = v165 - 1;
            uint64_t v169 = ((*v144 >> 4) ^ (*v144 >> 9)) & (v165 - 1);
            uint64_t v170 = *(void *)(*(void *)v266
                             + 16 * (((*v144 >> 4) ^ (*v144 >> 9)) & v168));
            if (*v144 == v170)
            {
LABEL_308:
              int v173 = *(void ***)(v167 + 16 * v169 + 8);
              uint64_t v252 = v173;
              if (v173)
              {
                if (*v173[4] == v166)
                {
                  *(void *)(v266 + 128) += 152;
                  uint64_t v174 = *(void *)(v164 + 48);
                  if (((v174 + 7) & 0xFFFFFFFFFFFFFFF8) - v174 + 152 > *(void *)(v164 + 56) - v174)
                  {
                    unsigned int v176 = *(_DWORD *)(v164 + 72) >> 7;
                    if (v176 >= 0x1E) {
                      LOBYTE(v176) = 30;
                    }
                    uint64_t v177 = 4096 << v176;
                    std::string v205 = (char *)operator new(4096 << v176, (std::align_val_t)8uLL);
                    unint64_t v178 = *(unsigned int *)(v164 + 72);
                    if (v178 >= *(unsigned int *)(v164 + 76)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)(v164 + 64) + 8 * v178) = v205;
                    ++*(_DWORD *)(v164 + 72);
                    size_t v179 = &v205[v177];
                    unint64_t v175 = (unint64_t)v205;
                    *(void *)(v164 + 56) = v179;
                  }
                  else
                  {
                    unint64_t v175 = (v174 + 7) & 0xFFFFFFFFFFFFFFF8;
                  }
                  *(void *)(v164 + 48) = v175 + 152;
                  *(void *)(v175 + 144) = 0;
                  *(_OWORD *)(v175 + 112) = 0u;
                  *(_OWORD *)(v175 + 128) = 0u;
                  *(_OWORD *)(v175 + 80) = 0u;
                  *(_OWORD *)(v175 + 96) = 0u;
                  *(_OWORD *)(v175 + 48) = 0u;
                  *(_OWORD *)(v175 + 64) = 0u;
                  *(_OWORD *)(v175 + 16) = 0u;
                  *(_OWORD *)(v175 + 32) = 0u;
                  *(_OWORD *)unint64_t v175 = 0u;
                  *(void *)(v175 + 56) = v175 + 88;
                  *(void *)(v175 + 64) = v175 + 88;
                  *(_DWORD *)(v175 + 72) = 8;
                  sub_1CD646720(&v289, (uint64_t *)&v252)[1] = v175;
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
                }
                sub_1CD6466C0((uint64_t)&v289, (uint64_t)v173);
                llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop();
              }
            }
            else
            {
              int v171 = 1;
              while (v170 != -4096)
              {
                int v172 = v169 + v171++;
                uint64_t v169 = v172 & v168;
                uint64_t v170 = *(void *)(v167 + 16 * v169);
                if (v166 == v170) {
                  goto LABEL_308;
                }
              }
            }
          }
          if (!v207) {
            unsigned int v207 = (llvm::BasicBlock *)v163[1];
          }
          if (v312 >= (unint64_t)HIDWORD(v312)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v311 + v312) = *v163;
          LODWORD(v312) = v312 + 1;
          if (__src >= (unint64_t)HIDWORD(__src)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v273 + __src) = v163[1];
          unsigned int v145 = __src + 1;
          LODWORD(__src) = __src + 1;
        }
      }
      while (v144 != v143);
      int v180 = (const char **)v273;
      if (v145)
      {
        BOOL v181 = *(uint64_t **)(v206 + 80);
        uint64_t v182 = 8 * v145;
        do
        {
          uint64_t v183 = (llvm::Value *)*v180++;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v116, v183);
          uint64_t v184 = *v181;
          *((void *)v183 + 3) = *v181;
          *((void *)v183 + 4) = v181;
          *(void *)(v184 + 8) = (char *)v183 + 24;
          uint64_t *v181 = (uint64_t)v183 + 24;
          v182 -= 8;
        }
        while (v182);
        int v180 = (const char **)v273;
      }
      if (v180 != &v275) {
        free(v180);
      }
    }
    if (*((unsigned char *)v262 + 2))
    {
      uint64_t v273 = "tpp.visibility.return";
      LOWORD(v277) = 259;
      operator new();
    }
    uint64_t v273 = "tpp.entry";
    LOWORD(v277) = 259;
    operator new();
  }
  uint64_t v185 = v251;
  uint64_t v251 = 0;
  if (v185) {
    sub_1CC89A94C(v185);
  }
  MEMORY[0x1D25D9CD0](v248, 8);
  if (v244 != v243) {
    free(v244);
  }
  if (v239 != v238) {
    free(v239);
  }
  if (v235 != v237) {
    free(v235);
  }
  if (v231 != v230) {
    free(v231);
  }
  if (v226 != v225) {
    free(v226);
  }
  if (v222 != v224) {
    free(v222);
  }
  if ((v220 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v221, 8);
  }
  unsigned int v186 = (char *)v217;
  if (v218)
  {
    uint64_t v187 = 32 * v218;
    do
    {
      unsigned int v188 = *(char **)&v186[v187 - 24];
      if (&v186[v187 - 8] != v188) {
        free(v188);
      }
      v187 -= 32;
    }
    while (v187);
    unsigned int v186 = (char *)v217;
  }
  if (v186 != v219) {
    free(v186);
  }
  char v189 = v213;
  if (v213)
  {
    unsigned int v190 = 16;
    BOOL v191 = &v214;
LABEL_369:
    uint64_t v192 = 104 * v190;
    BOOL v193 = (void **)(v191 + 2);
    do
    {
      uint64_t v194 = (uint64_t)*(v193 - 2);
      if (v194 != -4096 && v194 != -8192 && *v193 != *(v193 - 1)) {
        free(*v193);
      }
      v193 += 13;
      v192 -= 104;
    }
    while (v192);
    char v189 = v213;
  }
  else
  {
    unsigned int v190 = v215;
    if (v215)
    {
      BOOL v191 = v214;
      goto LABEL_369;
    }
  }
  uint64_t v195 = &v210;
  if ((v189 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v214, 8);
  }
  char v196 = v209;
  if (v209)
  {
    unsigned int v197 = 16;
LABEL_380:
    uint64_t v198 = 104 * v197;
    unsigned int v199 = (void **)(v195 + 2);
    do
    {
      uint64_t v200 = (uint64_t)*(v199 - 2);
      if (v200 != -4096 && v200 != -8192 && *v199 != *(v199 - 1)) {
        free(*v199);
      }
      v199 += 13;
      v198 -= 104;
    }
    while (v198);
    char v196 = v209;
  }
  else
  {
    unsigned int v197 = v211;
    if (v211)
    {
      uint64_t v195 = v210;
      goto LABEL_380;
    }
  }
  if ((v196 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v210, 8);
  }
  return v12;
}

uint64_t sub_1CC89A0F4(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 3840)) {
    return 0;
  }
  uint64_t v1 = **(void **)(a1 + 3832);
  if (!*(unsigned char *)(a1 + 1)
    && *(_DWORD *)(*(void *)(a1 + 3360) + 32 * sub_1CC8228B4(a1 + 8, *(void **)(v1 + 40)) + 16))
  {
    return 0;
  }
  return v1;
}

void sub_1CC89A15C(uint64_t a1, llvm::SmallPtrSetImplBase *this, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  v103[8] = *MEMORY[0x1E4F143B8];
  uint64_t v100 = v103;
  unsigned int v102 = 8;
  v103[0] = a1;
  unsigned int v7 = 1;
  do
  {
    while (1)
    {
      uint64_t v8 = *((void *)v100 + --v7);
      unsigned int v101 = v7;
      if (v8 && *(unsigned __int8 *)(v8 + 16) >= 0x1Cu)
      {
        uint64_t v11 = *(void *)this;
        uint64_t v10 = *((void *)this + 1);
        if (v10 == *(void *)this)
        {
          uint64_t v12 = *((unsigned int *)this + 5);
          int v13 = (void *)(v10 + 8 * v12);
          if (v12)
          {
            uint64_t v14 = 0;
            while (*(void *)(v10 + v14) != v8)
            {
              v14 += 8;
              if (8 * v12 == v14) {
                goto LABEL_26;
              }
            }
            int v13 = (void *)(v10 + v14);
          }
LABEL_26:
          uint64_t v11 = *((void *)this + 1);
        }
        else
        {
          uint64_t v15 = *((unsigned int *)this + 4);
          int v16 = v15 - 1;
          unsigned int v17 = (v15 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          int v13 = (void *)(v10 + 8 * v17);
          uint64_t v18 = *v13;
          if (*v13 == -1)
          {
            uint64_t v19 = 0;
LABEL_57:
            if (v19) {
              int v13 = v19;
            }
            LODWORD(v12) = *((_DWORD *)this + 5);
            int v36 = (void *)(v10 + 8 * v15);
            if (*v13 != v8) {
              int v13 = v36;
            }
          }
          else
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != v8)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == -2;
              }
              if (v21) {
                uint64_t v19 = v13;
              }
              unsigned int v22 = v17 + v20++;
              unsigned int v17 = v22 & v16;
              int v13 = (void *)(v10 + 8 * (v22 & v16));
              uint64_t v18 = *v13;
              if (*v13 == -1) {
                goto LABEL_57;
              }
            }
            LODWORD(v12) = *((_DWORD *)this + 5);
          }
        }
        unsigned int v23 = *((_DWORD *)this + 4);
        unsigned int v24 = v10 == v11 ? v12 : *((_DWORD *)this + 4);
        if (v13 == (void *)(v10 + 8 * v24)) {
          break;
        }
      }
      if (!v7) {
        goto LABEL_203;
      }
    }
    if (v10 != v11) {
      goto LABEL_43;
    }
    if (!v12)
    {
LABEL_41:
      if (v23 > v12)
      {
        *((_DWORD *)this + 5) = v12 + 1;
        *(void *)(v10 + 8 * v12) = v8;
        goto LABEL_70;
      }
LABEL_43:
      if (3 * v23 <= 4 * ((int)v12 - *((_DWORD *)this + 6)))
      {
        if (v23 >= 0x40) {
          v23 *= 2;
        }
        else {
          unsigned int v23 = 128;
        }
      }
      else if (v23 - v12 >= v23 >> 3)
      {
        goto LABEL_45;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v23);
      unsigned int v23 = *((_DWORD *)this + 4);
      uint64_t v10 = *((void *)this + 1);
LABEL_45:
      unsigned int v28 = v23 - 1;
      unsigned int v29 = (v23 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v30 = (void *)(v10 + 8 * v29);
      uint64_t v31 = *v30;
      if (*v30 == -1)
      {
        uint64_t v32 = 0;
LABEL_63:
        if (v32) {
          unint64_t v37 = v32;
        }
        else {
          unint64_t v37 = v30;
        }
        if (*v37 != v8)
        {
          if (*v37 == -2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          *unint64_t v37 = v8;
        }
      }
      else
      {
        uint64_t v32 = 0;
        int v33 = 1;
        while (v31 != v8)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -2;
          }
          if (v34) {
            uint64_t v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          uint64_t v30 = (void *)(v10 + 8 * (v35 & v28));
          uint64_t v31 = *v30;
          if (*v30 == -1) {
            goto LABEL_63;
          }
        }
      }
      goto LABEL_70;
    }
    uint64_t v25 = 0;
    uint64_t v26 = 8 * v12;
    uint64_t v27 = (void *)*((void *)this + 1);
    while (*v27 != v8)
    {
      if (*v27 == -2) {
        uint64_t v25 = v27;
      }
      ++v27;
      v26 -= 8;
      if (!v26)
      {
        if (!v25) {
          goto LABEL_41;
        }
        *uint64_t v25 = v8;
        --*((_DWORD *)this + 6);
        break;
      }
    }
LABEL_70:
    if (*(unsigned char *)(v8 + 16) == 83)
    {
      int v38 = *(_DWORD *)(v8 + 20);
      if ((v38 & 0x40000000) != 0)
      {
        uint64_t v40 = *(void *)(v8 - 8);
        uint64_t v41 = *(unsigned int *)(v8 + 60);
        uint64_t v42 = (void **)(v40 + 32 * v41);
        uint64_t v39 = v38 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v39 = v38 & 0x7FFFFFF;
        uint64_t v40 = v8 - 32 * v39;
        uint64_t v41 = *(unsigned int *)(v8 + 60);
        uint64_t v42 = (void **)(v40 + 32 * v41);
      }
      uint64_t v43 = v40 + 32 * v41 + 8 * v39;
      while (v42 != (void **)v43)
      {
        uint64_t v44 = *v42;
        uint64_t v45 = *((void *)a3 + 1);
        uint64_t v46 = *((unsigned int *)a3 + 5);
        if (v45 == *(void *)a3)
        {
          if (v46)
          {
            uint64_t v47 = 0;
            uint64_t v48 = 8 * v46;
            __int16 v49 = (void *)*((void *)a3 + 1);
            while ((void *)*v49 != v44)
            {
              if (*v49 == -2) {
                uint64_t v47 = v49;
              }
              ++v49;
              v48 -= 8;
              if (!v48)
              {
                if (!v47) {
                  goto LABEL_84;
                }
                *uint64_t v47 = v44;
                --*((_DWORD *)a3 + 6);
                goto LABEL_108;
              }
            }
            goto LABEL_110;
          }
LABEL_84:
          unsigned int v50 = *((_DWORD *)a3 + 4);
          if (v46 < v50)
          {
            *((_DWORD *)a3 + 5) = v46 + 1;
            *(void *)(v45 + 8 * v46) = v44;
            goto LABEL_108;
          }
        }
        else
        {
          unsigned int v50 = *((_DWORD *)a3 + 4);
        }
        if (3 * v50 <= 4 * ((int)v46 - *((_DWORD *)a3 + 6)))
        {
          if (v50 >= 0x40) {
            v50 *= 2;
          }
          else {
            unsigned int v50 = 128;
          }
        }
        else if (v50 - v46 >= v50 >> 3)
        {
          goto LABEL_89;
        }
        llvm::SmallPtrSetImplBase::Grow(a3, v50);
        unsigned int v50 = *((_DWORD *)a3 + 4);
        uint64_t v45 = *((void *)a3 + 1);
LABEL_89:
        unsigned int v51 = v50 - 1;
        unsigned int v52 = (v50 - 1) & ((v44 >> 4) ^ (v44 >> 9));
        uint64_t v53 = (void **)(v45 + 8 * v52);
        unsigned int v54 = *v53;
        if (*v53 == (void *)-1)
        {
          unint64_t v55 = 0;
LABEL_101:
          if (v55) {
            uint64_t v59 = v55;
          }
          else {
            uint64_t v59 = v53;
          }
          if (*v59 != v44)
          {
            if (*v59 == (void *)-2) {
              --*((_DWORD *)a3 + 6);
            }
            else {
              ++*((_DWORD *)a3 + 5);
            }
            *uint64_t v59 = v44;
LABEL_108:
            sub_1CC89A9A0((uint64_t)&__src, *v42, (uint64_t)a3, a4);
            sub_1CB935BDC((unsigned int *)&v100, __src, (unsigned char *)__src + 8 * v98);
            if (__src != v99) {
              free(__src);
            }
          }
        }
        else
        {
          unint64_t v55 = 0;
          int v56 = 1;
          while (v54 != v44)
          {
            if (v55) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v54 == (void *)-2;
            }
            if (v57) {
              unint64_t v55 = v53;
            }
            unsigned int v58 = v52 + v56++;
            unsigned int v52 = v58 & v51;
            uint64_t v53 = (void **)(v45 + 8 * (v58 & v51));
            unsigned int v54 = *v53;
            if (*v53 == (void *)-1) {
              goto LABEL_101;
            }
          }
        }
LABEL_110:
        ++v42;
      }
    }
    unint64_t v61 = *(void **)a3;
    uint64_t v60 = (void *)*((void *)a3 + 1);
    if (a4)
    {
      uint64_t v62 = *(void **)(v8 + 40);
      if (v60 == v61)
      {
        uint64_t v63 = *((unsigned int *)a3 + 5);
        uint64_t v64 = (void **)&v60[v63];
        if (v63)
        {
          uint64_t v65 = 0;
          while ((void *)v60[v65] != v62)
          {
            if (v63 == ++v65) {
              goto LABEL_137;
            }
          }
          uint64_t v64 = (void **)&v60[v65];
        }
LABEL_137:
        unint64_t v61 = (void *)*((void *)a3 + 1);
      }
      else
      {
        uint64_t v66 = *((unsigned int *)a3 + 4);
        int v67 = v66 - 1;
        unsigned int v68 = (v66 - 1) & ((v62 >> 4) ^ (v62 >> 9));
        uint64_t v64 = (void **)&v60[v68];
        unsigned int v69 = *v64;
        if (*v64 == (void *)-1)
        {
          unsigned int v70 = 0;
LABEL_186:
          if (v70) {
            uint64_t v64 = v70;
          }
          LODWORD(v63) = *((_DWORD *)a3 + 5);
          if (*v64 != v62) {
            uint64_t v64 = (void **)&v60[v66];
          }
        }
        else
        {
          unsigned int v70 = 0;
          int v71 = 1;
          while (v69 != v62)
          {
            if (v70) {
              BOOL v72 = 0;
            }
            else {
              BOOL v72 = v69 == (void *)-2;
            }
            if (v72) {
              unsigned int v70 = v64;
            }
            unsigned int v73 = v68 + v71++;
            unsigned int v68 = v73 & v67;
            uint64_t v64 = (void **)&v60[v73 & v67];
            unsigned int v69 = *v64;
            if (*v64 == (void *)-1) {
              goto LABEL_186;
            }
          }
          LODWORD(v63) = *((_DWORD *)a3 + 5);
        }
      }
      int v74 = *((_DWORD *)a3 + 4);
      if (v60 == v61) {
        int v74 = v63;
      }
      if (v64 == &v60[v74])
      {
        sub_1CC89A9A0((uint64_t)&__src, v62, (uint64_t)a3, a4);
        sub_1CB935BDC((unsigned int *)&v100, __src, (unsigned char *)__src + 8 * v98);
        if (__src != v99) {
          free(__src);
        }
        unint64_t v61 = *(void **)a3;
        uint64_t v60 = (void *)*((void *)a3 + 1);
      }
    }
    uint64_t v75 = *(void *)(v8 + 40);
    uint64_t v76 = *((unsigned int *)a3 + 5);
    if (v60 != v61)
    {
      unsigned int v80 = *((_DWORD *)a3 + 4);
      goto LABEL_155;
    }
    if (!v76)
    {
LABEL_152:
      unsigned int v80 = *((_DWORD *)a3 + 4);
      if (v76 < v80)
      {
        *((_DWORD *)a3 + 5) = v76 + 1;
        v61[v76] = v75;
        goto LABEL_176;
      }
LABEL_155:
      if (3 * v80 <= 4 * ((int)v76 - *((_DWORD *)a3 + 6)))
      {
        if (v80 >= 0x40) {
          v80 *= 2;
        }
        else {
          unsigned int v80 = 128;
        }
      }
      else if (v80 - v76 >= v80 >> 3)
      {
        goto LABEL_157;
      }
      llvm::SmallPtrSetImplBase::Grow(a3, v80);
      unsigned int v80 = *((_DWORD *)a3 + 4);
      uint64_t v60 = (void *)*((void *)a3 + 1);
LABEL_157:
      unsigned int v81 = v80 - 1;
      unsigned int v82 = (v80 - 1) & ((v75 >> 4) ^ (v75 >> 9));
      unint64_t v83 = &v60[v82];
      uint64_t v84 = *v83;
      if (*v83 == -1)
      {
        int v85 = 0;
LABEL_169:
        if (v85) {
          int v89 = v85;
        }
        else {
          int v89 = v83;
        }
        if (*v89 != v75)
        {
          if (*v89 == -2) {
            --*((_DWORD *)a3 + 6);
          }
          else {
            ++*((_DWORD *)a3 + 5);
          }
          void *v89 = v75;
        }
      }
      else
      {
        int v85 = 0;
        int v86 = 1;
        while (v84 != v75)
        {
          if (v85) {
            BOOL v87 = 0;
          }
          else {
            BOOL v87 = v84 == -2;
          }
          if (v87) {
            int v85 = v83;
          }
          unsigned int v88 = v82 + v86++;
          unsigned int v82 = v88 & v81;
          unint64_t v83 = &v60[v88 & v81];
          uint64_t v84 = *v83;
          if (*v83 == -1) {
            goto LABEL_169;
          }
        }
      }
      goto LABEL_176;
    }
    int v77 = 0;
    uint64_t v78 = 8 * v76;
    unint64_t v79 = v61;
    while (*v79 != v75)
    {
      if (*v79 == -2) {
        int v77 = v79;
      }
      ++v79;
      v78 -= 8;
      if (!v78)
      {
        if (!v77) {
          goto LABEL_152;
        }
        *int v77 = v75;
        --*((_DWORD *)a3 + 6);
        break;
      }
    }
LABEL_176:
    int v90 = *(_DWORD *)(v8 + 20);
    if ((v90 & 0x40000000) != 0)
    {
      uint64_t v92 = *(uint64_t **)(v8 - 8);
      uint64_t v91 = v90 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v91 = v90 & 0x7FFFFFF;
      uint64_t v92 = (uint64_t *)(v8 - 32 * v91);
    }
    unsigned int v93 = v101;
    if (v91 + (unint64_t)v101 > v102) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v91)
    {
      uint64_t v94 = (char *)v100 + 8 * v101;
      uint64_t v95 = 32 * v91;
      do
      {
        uint64_t v96 = *v92;
        v92 += 4;
        *v94++ = v96;
        v95 -= 32;
      }
      while (v95);
    }
    unsigned int v7 = v93 + v91;
    unsigned int v101 = v93 + v91;
  }
  while (v93 + v91);
LABEL_203:
  if (v100 != v103) {
    free(v100);
  }
}

void sub_1CC89A94C(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC89A9A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v57[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a4 + 3352) + 32 * sub_1CC8228B4(a4, a2);
  v47[1] = *(void *)v7;
  uint64_t v48 = &v50;
  uint64_t v49 = 0x100000000;
  if (*(_DWORD *)(v7 + 16))
  {
    sub_1CC823C14((uint64_t)&v48, v7 + 8);
    unsigned int v8 = v49;
  }
  else
  {
    unsigned int v8 = 0;
  }
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x500000000;
  unint64_t v55 = v57;
  uint64_t v56 = 0x500000000;
  if (!v8) {
    goto LABEL_91;
  }
  unsigned int v9 = (char *)v48;
  uint64_t v43 = (char *)v48 + 4 * v8;
  do
  {
    v51[0] = v52;
    v51[1] = (void *)0xA00000000;
    v54[0] = 0;
    v54[1] = 0;
    uint64_t v53 = v54;
    if (v56 >= (unint64_t)HIDWORD(v56)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v55[v56] = *(_DWORD *)v9;
    BOOL v10 = __CFADD__(v56, 1);
    int v11 = v56 + 1;
    LODWORD(v56) = v56 + 1;
    if (!v10)
    {
      while (1)
      {
        int v12 = v55[v11 - 1];
        LODWORD(v56) = v11 - 1;
        uint64_t v13 = *(void *)&v12 & 0xFFFFFFLL;
        LODWORD(v44) = v12 & 0xFFFFFF;
        if ((sub_1CC8227A0((uint64_t)v51, (unsigned int *)&v44) & 0x100000000) != 0) {
          break;
        }
LABEL_79:
        int v11 = v56;
        if (!v56) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = *(void *)(a4 + 3352) + 32 * v13;
      uint64_t v15 = *(void *)v14;
      uint64_t v44 = *(void *)v14;
      uint64_t v45 = v47;
      uint64_t v46 = 0x100000000;
      if (*(_DWORD *)(v14 + 16))
      {
        sub_1CC823C14((uint64_t)&v45, v14 + 8);
        uint64_t v15 = v44;
      }
      uint64_t v16 = *(void *)(v15 + 40);
      if (v16 == v15 + 40)
      {
        uint64_t v18 = 0;
      }
      else
      {
        if (v16) {
          uint64_t v17 = v16 - 24;
        }
        else {
          uint64_t v17 = 0;
        }
        if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v17;
        }
      }
      uint64_t v19 = *(void *)(a3 + 8);
      uint64_t v20 = *(unsigned int *)(a3 + 20);
      if (v19 == *(void *)a3)
      {
        if (v20)
        {
          BOOL v21 = 0;
          uint64_t v22 = 8 * v20;
          unsigned int v23 = *(void **)(a3 + 8);
          while (*v23 != v15)
          {
            if (*v23 == -2) {
              BOOL v21 = v23;
            }
            ++v23;
            v22 -= 8;
            if (!v22)
            {
              if (!v21) {
                goto LABEL_32;
              }
              void *v21 = v15;
              --*(_DWORD *)(a3 + 24);
              goto LABEL_56;
            }
          }
          goto LABEL_56;
        }
LABEL_32:
        unsigned int v24 = *(_DWORD *)(a3 + 16);
        if (v20 < v24)
        {
          *(_DWORD *)(a3 + 20) = v20 + 1;
          *(void *)(v19 + 8 * v20) = v15;
LABEL_56:
          int v34 = *(unsigned __int8 *)(v18 + 16);
          if (v34 != 30 || v18 == 0)
          {
            if (v34 != 32 || v18 == 0)
            {
              if (v34 == 31) {
                uint64_t v37 = v18;
              }
              else {
                uint64_t v37 = 0;
              }
              int v38 = *(_DWORD *)(v37 + 20);
              if ((v38 & 0x40000000) != 0) {
                uint64_t v39 = *(uint64_t **)(v37 - 8);
              }
              else {
                uint64_t v39 = (uint64_t *)(v37 - 32 * (v38 & 0x7FFFFFF));
              }
            }
            else
            {
              int v41 = *(_DWORD *)(v18 + 20);
              if ((v41 & 0x40000000) != 0) {
                uint64_t v39 = *(uint64_t **)(v18 - 8);
              }
              else {
                uint64_t v39 = (uint64_t *)(v18 - 32 * (v41 & 0x7FFFFFF));
              }
            }
            uint64_t v40 = *v39;
          }
          else
          {
            uint64_t v40 = *(void *)(v18 - 96);
          }
          unint64_t v42 = *(unsigned int *)(a1 + 8);
          if (v42 >= *(unsigned int *)(a1 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a1 + 8 * v42) = v40;
          ++*(_DWORD *)(a1 + 8);
          sub_1CBE559EC((unsigned int *)&v55, v45, (unsigned char *)v45 + 4 * v46);
          if (v45 != v47) {
            free(v45);
          }
          goto LABEL_79;
        }
      }
      else
      {
        unsigned int v24 = *(_DWORD *)(a3 + 16);
      }
      if (3 * v24 <= 4 * ((int)v20 - *(_DWORD *)(a3 + 24)))
      {
        if (v24 >= 0x40) {
          v24 *= 2;
        }
        else {
          unsigned int v24 = 128;
        }
      }
      else if (v24 - v20 >= v24 >> 3)
      {
        goto LABEL_37;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v24);
      unsigned int v24 = *(_DWORD *)(a3 + 16);
      uint64_t v19 = *(void *)(a3 + 8);
LABEL_37:
      unsigned int v25 = v24 - 1;
      unsigned int v26 = (v24 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v27 = (void *)(v19 + 8 * v26);
      uint64_t v28 = *v27;
      if (*v27 == -1)
      {
        unsigned int v29 = 0;
LABEL_49:
        if (v29) {
          int v33 = v29;
        }
        else {
          int v33 = v27;
        }
        if (*v33 != v15)
        {
          if (*v33 == -2) {
            --*(_DWORD *)(a3 + 24);
          }
          else {
            ++*(_DWORD *)(a3 + 20);
          }
          *int v33 = v15;
        }
      }
      else
      {
        unsigned int v29 = 0;
        int v30 = 1;
        while (v28 != v15)
        {
          if (v29) {
            BOOL v31 = 0;
          }
          else {
            BOOL v31 = v28 == -2;
          }
          if (v31) {
            unsigned int v29 = v27;
          }
          unsigned int v32 = v26 + v30++;
          unsigned int v26 = v32 & v25;
          uint64_t v27 = (void *)(v19 + 8 * (v32 & v25));
          uint64_t v28 = *v27;
          if (*v27 == -1) {
            goto LABEL_49;
          }
        }
      }
      goto LABEL_56;
    }
LABEL_9:
    sub_1CB833A08((uint64_t)&v53, v54[0]);
    if (v51[0] != v52) {
      free(v51[0]);
    }
    v9 += 4;
  }
  while (v9 != v43);
  if (v55 != (_DWORD *)v57) {
    free(v55);
  }
LABEL_91:
  if (v48 != &v50) {
    free(v48);
  }
}

uint64_t sub_1CC89AE34(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC89AED0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
    {
      uint64_t result = sub_1CD10ACE0((llvm::Instruction *)a1, 1);
      int v5 = *((_DWORD *)a2 + 4);
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = *a2;
        unsigned int v8 = v5 - 1;
        uint64_t v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
        uint64_t v10 = *(void *)(*a2 + 16 * v9);
        if (v6 == v10)
        {
LABEL_8:
          if (*(void *)(v7 + 16 * v9 + 8)) {
            return (5 * result);
          }
        }
        else
        {
          int v11 = 1;
          while (v10 != -4096)
          {
            int v12 = v9 + v11++;
            uint64_t v9 = v12 & v8;
            uint64_t v10 = *(void *)(v7 + 16 * v9);
            if (v6 == v10) {
              goto LABEL_8;
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1CC89AF7C(void *a1, uint64_t a2)
{
  uint64_t v12 = a2;
  uint64_t v3 = a1[10];
  if (!v3) {
    goto LABEL_9;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v12)) {
    return a1;
  }
  uint64_t v12 = a2;
  uint64_t v5 = a1[14];
  if (!v5
    || (unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 48))(v5, &v12, a1[15]),
        *a1 += v6,
        uint64_t v12 = a2,
        (uint64_t v7 = a1[6]) == 0))
  {
LABEL_9:
    sub_1CB920400();
    JUMPOUT(0x1CC89B080);
  }
  uint64_t v8 = v6;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v12);
  uint64_t v10 = 1;
  if (v9) {
    uint64_t v10 = 2;
  }
  a1[v10] += v8;
  return a1;
}

void sub_1CC89B084()
{
}

void *sub_1CC89B098(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2620268;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC89B0E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2620268;
  a2[1] = v2;
  return result;
}

BOOL sub_1CC89B10C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2) {
    BOOL v3 = *(unsigned __int8 *)(*a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 3888);
  uint64_t v7 = *(void *)(v5 + 3880);
  if (v6 == v7)
  {
    uint64_t v8 = *(unsigned int *)(v5 + 3900);
    int v9 = (void *)(v6 + 8 * v8);
    if (v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v8;
      while (*(void *)(v6 + v10) != v2)
      {
        v10 += 8;
        if (v11 == v10) {
          goto LABEL_24;
        }
      }
      int v9 = (void *)(v6 + v10);
    }
LABEL_24:
    uint64_t v7 = *(void *)(v5 + 3888);
  }
  else
  {
    uint64_t v12 = *(unsigned int *)(v5 + 3896);
    int v13 = v12 - 1;
    unsigned int v14 = (v12 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    int v9 = (void *)(v6 + 8 * v14);
    uint64_t v15 = *v9;
    if (*v9 == -1)
    {
      uint64_t v16 = 0;
LABEL_29:
      if (v16) {
        int v9 = v16;
      }
      if (*v9 != v2) {
        int v9 = (void *)(v6 + 8 * v12);
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != v2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v9;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        int v9 = (void *)(v6 + 8 * (v19 & v13));
        uint64_t v15 = *v9;
        if (*v9 == -1) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v20 = 3896;
  if (v6 == v7) {
    uint64_t v20 = 3900;
  }
  return v9 != (void *)(v6 + 8 * *(unsigned int *)(v5 + v20));
}

void sub_1CC89B220()
{
}

__n128 sub_1CC89B234(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26202B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC89B280(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26202B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CC89B2B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned __int8 *)(*a2 + 16) <= 0x1Bu) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v4 = *(void *)(v2 + 4480);
  uint64_t v5 = 4488;
  if (v4 == *(void *)(v2 + 4472)) {
    uint64_t v5 = 4492;
  }
  uint64_t v6 = *(unsigned int *)(v2 + v5);
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void **)(v2 + 4480);
    while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v8 = *(void **)(v2 + 4480);
  }
  if (v8 != (void *)(v4 + 8 * v6)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates();
  }
LABEL_14:
  if (!v3) {
    return 0;
  }
  uint64_t v9 = *(void *)(v2 + 4048);
  uint64_t v10 = *(void *)(v2 + 4040);
  if (v9 == v10)
  {
    uint64_t v11 = *(unsigned int *)(v2 + 4060);
    uint64_t v12 = (void *)(v9 + 8 * v11);
    if (v11)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 8 * v11;
      while (*(void *)(v9 + v13) != v3)
      {
        v13 += 8;
        if (v14 == v13) {
          goto LABEL_34;
        }
      }
      uint64_t v12 = (void *)(v9 + v13);
    }
LABEL_34:
    uint64_t v10 = *(void *)(v2 + 4048);
  }
  else
  {
    uint64_t v16 = *(unsigned int *)(v2 + 4056);
    int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    uint64_t v12 = (void *)(v9 + 8 * v18);
    uint64_t v19 = *v12;
    if (*v12 == -1)
    {
      uint64_t v20 = 0;
LABEL_39:
      if (v20) {
        uint64_t v12 = v20;
      }
      if (*v12 != v3) {
        uint64_t v12 = (void *)(v9 + 8 * v16);
      }
    }
    else
    {
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != v3)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v19 == -2;
        }
        if (v22) {
          uint64_t v20 = v12;
        }
        unsigned int v23 = v18 + v21++;
        unsigned int v18 = v23 & v17;
        uint64_t v12 = (void *)(v9 + 8 * (v23 & v17));
        uint64_t v19 = *v12;
        if (*v12 == -1) {
          goto LABEL_39;
        }
      }
    }
  }
  BOOL v22 = v9 == v10;
  uint64_t v24 = 4056;
  if (v22) {
    uint64_t v24 = 4060;
  }
  return v12 == (void *)(v9 + 8 * *(unsigned int *)(v2 + v24));
}

uint64_t sub_1CC89B470(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26202F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC89B498(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*a2, a3);
}

uint64_t sub_1CC89B4A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, *a3);
  if ((result & 1) == 0)
  {
    do
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))();
      if (*(unsigned char *)a1)
      {
        int v8 = 4;
        uint64_t v9 = a1 + 8;
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 16);
        if (!v8)
        {
          uint64_t v16 = 0;
LABEL_10:
          *sub_1CC0101A4(a1, (uint64_t)v7, v7, v16) = *v7;
          uint64_t v17 = *(void *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))();
          unint64_t v18 = *(unsigned int *)(a1 + 48);
          if (v18 >= *(unsigned int *)(a1 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 40) + 8 * v18) = v17;
          ++*(_DWORD *)(a1 + 48);
          goto LABEL_12;
        }
        uint64_t v9 = *(void *)(a1 + 8);
      }
      int v10 = v8 - 1;
      unsigned int v11 = ((*v7 >> 4) ^ (*v7 >> 9)) & v10;
      uint64_t v12 = (void *)(v9 + 8 * v11);
      uint64_t v13 = *v12;
      if (*v7 != *v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v19 = 0;
          }
          else {
            BOOL v19 = v13 == -8192;
          }
          if (v19) {
            uint64_t v14 = v12;
          }
          unsigned int v20 = v11 + v15++;
          unsigned int v11 = v20 & v10;
          uint64_t v12 = (void *)(v9 + 8 * v11);
          uint64_t v13 = *v12;
          if (*v7 == *v12) {
            goto LABEL_12;
          }
        }
        if (v14) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = v12;
        }
        goto LABEL_10;
      }
LABEL_12:
      (*(void (**)(void))(*(void *)*a2 + 40))();
      uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, *a3);
    }
    while (!result);
  }
  return result;
}

uint64_t sub_1CC89B6BC()
{
  int v1 = 1;
  int v2 = -1;
  uint64_t v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Enable deferred VS attribute shading pass";
  v4.n128_u64[1] = 41;
  sub_1CD646448((llvm::cl::Option *)&unk_1EBCDD328, "deferred-attribute-pass", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDD328, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Definitely do if redundant sample ratio is less than";
  v4.n128_u64[1] = 52;
  int v1 = 1;
  int v2 = 50;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCDD3E8, "tpp-smp-ratio", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDD3E8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Transform if all else is inconclusive and redundant cost ratio is less than";
  v4.n128_u64[1] = 75;
  int v1 = 1;
  int v2 = 50;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCDD4A8, "tpp-cost-ratio", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDD4A8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Transform if the latency of the shader is at least this amount";
  v4.n128_u64[1] = 62;
  int v1 = 1;
  int v2 = 200;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCDD568, "tpp-clique-overhead", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCDD568, &dword_1CB82C000);
}

void *sub_1CC89B848(_DWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(a1, "agx.dma-list", 0xCuLL);
  unsigned int v11 = (unsigned __int8 *)(**(void **)a1 + 1960);
  uint64_t v12 = *(uint64_t **)v11;
  unsigned int v23 = v11;
  uint64_t v24 = v11;
  unsigned int v25 = v11;
  unsigned int v26 = v11;
  uint64_t v13 = (llvm::PoisonValue *)llvm::StructType::get(v12, (uint64_t)&v23, 4, 0);
  uint64_t v14 = *(void *)a1;
  unsigned int v23 = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v11, a2, 0);
  uint64_t v24 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a3, 0);
  unsigned int v25 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a4, 0);
  unsigned int v26 = llvm::ConstantInt::get((llvm::ConstantInt *)v11, a5, 0);
  int v15 = (llvm::ValueAsMetadata *)llvm::ConstantStruct::get(v13, (llvm::Type *)&v23, 4);
  uint64_t v22 = llvm::ValueAsMetadata::get(v15, v16);
  uint64_t Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v14, &v22, 1, 0, 1);
  unsigned int v23 = Impl;
  uint64_t v18 = *(void *)(inserted + 48);
  uint64_t v19 = *(unsigned int *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12)) {
    return (void *)sub_1CC608328(v18, &v23);
  }
  unsigned int v20 = Impl;
  uint64_t result = (void *)(*(void *)v18 + 8 * v19);
  *uint64_t result = v20;
  if (v20)
  {
    uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, v20, 2);
    LODWORD(v19) = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(v18 + 8) = v19 + 1;
  return result;
}

uint64_t sub_1CC89B9D4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD628;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2620340;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD630, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC89BA84;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCDD630, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC89BA84(uint64_t a1)
{
}

void sub_1CC89BB28(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC89BB60(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1CC89BBB0(uint64_t a1, llvm::Module *this)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  std::string v205 = "agx.dma-list";
  v207[8] = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, (const char **)&v205);
  if (!NamedMetadata) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 14);
  unsigned int v6 = *((_DWORD *)v5 + 8);
  uint64_t v7 = v6 <= 1 ? 1 : v6;
  size_t v8 = v6 <= 7 ? v7 : 8;
  uint64_t v9 = *((unsigned int *)v5 + 2);
  if (!v9) {
    return 0;
  }
  uint64_t v192 = a1;
  uint64_t v193 = NamedMetadata;
  BOOL v191 = this;
  uint64_t v10 = 0;
  int v11 = 0;
  do
    int v11 = 33 * v11 + aAgcMain_0[v10++];
  while (v8 != v10);
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 8 * v9 + 8;
  int v14 = 1;
  int v15 = v11;
  while (1)
  {
    uint64_t v16 = v15 & (v9 - 1);
    uint64_t v17 = *(void **)(v12 + 8 * v16);
    if (v17 != (void *)-8)
    {
      if (!v17) {
        return 0;
      }
      if (*(_DWORD *)(v13 + 4 * v16) == v11
        && v8 == *v17
        && !memcmp("agc.main", (char *)v17 + *((unsigned int *)v5 + 5), v8))
      {
        break;
      }
    }
    int v15 = v14 + v16;
    ++v14;
  }
  if (v16 == -1) {
    return 0;
  }
  if ((int)v16 == v9) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(v12 + 8 * (int)v16) + 8);
  if (!v18 || *(unsigned char *)(v18 + 16)) {
    return 0;
  }
  int v202 = v204;
  uint64_t v203 = 0x1000000000;
  uint64_t v21 = *(unsigned int *)(*(void *)(v193 + 48) + 8);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    uint64_t v24 = 8 * v21;
    do
    {
      uint64_t v25 = *(void *)(**(void **)(v193 + 48) + v22);
      uint64_t v26 = *(void *)(*(void *)(v25 - 8 * *(unsigned int *)(v25 + 8)) + 128);
      uint64_t v27 = (void *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
      uint64_t v28 = (unsigned int *)(*v27 + 24);
      if (*(_DWORD *)(*v27 + 32) >= 0x41u) {
        uint64_t v28 = *(unsigned int **)v28;
      }
      uint64_t v29 = v27[4];
      int v30 = (void *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u) {
        int v30 = (void *)*v30;
      }
      uint64_t v31 = v27[8];
      unsigned int v32 = (unsigned int *)(v31 + 24);
      if (*(_DWORD *)(v31 + 32) >= 0x41u) {
        unsigned int v32 = *(unsigned int **)v32;
      }
      uint64_t v33 = v27[12];
      int v34 = (void *)(v33 + 24);
      if (*(_DWORD *)(v33 + 32) >= 0x41u) {
        int v34 = (void *)*v34;
      }
      uint64_t v35 = *v32;
      int v36 = (void *)*v34;
      if (v23 >= HIDWORD(v203)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v37 = (char *)v202 + 16 * v23;
      *uint64_t v37 = *v28 | (*v30 << 32);
      v37[1] = v35 | ((void)v36 << 32);
      unsigned int v23 = v203 + 1;
      LODWORD(v203) = v203 + 1;
      v22 += 8;
    }
    while (v24 != v22);
    if (v23)
    {
      std::string __p = 0;
      char v196 = 0;
      unsigned int v197 = 0;
      uint64_t v187 = (llvm::Function *)v18;
      unint64_t v38 = *(void *)(v18 + 96);
      unint64_t v201 = 1;
      if (v38 > 0x39) {
        operator new();
      }
      unint64_t v201 = (v38 << 58) | 1;
      uint64_t v39 = (llvm::Function *)v18;
      if (*(_WORD *)(v18 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v18);
        uint64_t v39 = v187;
        int v41 = (unsigned int **)((char *)v187 + 88);
        uint64_t v40 = *((void *)v187 + 11);
        if (*((_WORD *)v187 + 9))
        {
          llvm::Function::BuildLazyArguments(v187);
          uint64_t v39 = v187;
          uint64_t v42 = *((void *)v187 + 11);
          goto LABEL_47;
        }
      }
      else
      {
        int v41 = (unsigned int **)(v18 + 88);
        uint64_t v40 = *(void *)(v18 + 88);
      }
      uint64_t v42 = v40;
LABEL_47:
      uint64_t v43 = v42 + 40 * *((void *)v39 + 12);
      if (v40 == v43)
      {
LABEL_60:
        unint64_t v46 = v201;
        if ((v201 & 1) == 0 && v201)
        {
          int v180 = v39;
          if (*(void *)v201 != v201 + 16) {
            free(*(void **)v201);
          }
          MEMORY[0x1D25D9CE0](v46, 0x1080C40EF38A13ELL);
          uint64_t v39 = v180;
        }
        uint64_t v47 = *(uint64_t **)(v192 + 8);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v48 == v49)
        {
LABEL_64:
          uint64_t v50 = v39;
          uint64_t v51 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v48 != &llvm::FunctionGroupInfoWrapperPass::ID)
          {
            v48 += 16;
            if (v48 == v49) {
              goto LABEL_64;
            }
          }
          uint64_t v50 = v39;
          uint64_t v51 = *(void *)(v48 + 8);
        }
        uint64_t v52 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v51 + 96))(v51, &llvm::FunctionGroupInfoWrapperPass::ID);
        uint64_t v53 = (*(uint64_t (**)(void, llvm::Function *))(**(void **)(v52 + 32) + 24))(*(void *)(v52 + 32), v50);
        (*(void (**)(uint64_t, void *, void))(*(void *)v53 + 200))(v53, v202, v203);
        (*(void (**)(uint64_t))(*(void *)v53 + 216))(v53);
        if (__p)
        {
          char v196 = (char *)__p;
          operator delete(__p);
        }
        uint64_t v19 = 1;
        goto LABEL_69;
      }
      char v44 = 0;
      while (2)
      {
        v40 += 40;
        while (*(void *)(v40 - 32))
        {
          unsigned int v45 = *(_DWORD *)(v40 - 8);
          if (v201) {
            unint64_t v201 = v201 & 0xFC00000000000000 | (2
          }
                                                * (((v201 >> 1) & ~(-1 << (v201 >> 58)) | (1 << v45)) & ~(-1 << (v201 >> 58)))) | 1;
          else {
            *(void *)(*(void *)v201 + 8 * (v45 >> 6)) |= 1 << v45;
          }
          BOOL v174 = v40 == v43;
          v40 += 40;
          if (v174)
          {
            if ((v44 & 1) == 0) {
              goto LABEL_60;
            }
            goto LABEL_71;
          }
        }
        char v44 = 1;
        if (v40 != v43) {
          continue;
        }
        break;
      }
LABEL_71:
      unint64_t v194 = v38;
      uint64_t v185 = v41;
      if (!v203)
      {
        unsigned int v54 = 0;
        unint64_t v55 = 0;
        unsigned int v188 = 0;
LABEL_73:
        unint64_t v56 = v55 - v54;
        unint64_t v57 = 126 - 2 * __clz(v56);
        if (v55 == v54) {
          uint64_t v58 = 0;
        }
        else {
          uint64_t v58 = v57;
        }
        uint64_t v59 = v54;
        sub_1CC89CE28(v54, v55, v58, 1);
        LODWORD(v60) = 16 - v188;
        if (v188 <= 0x10) {
          unint64_t v60 = v60;
        }
        else {
          unint64_t v60 = 0;
        }
        if (v56 > v60)
        {
          if (v188 >= 0x10) {
            int v61 = 16;
          }
          else {
            int v61 = v188;
          }
          unsigned int v62 = 17 - v61;
          do
          {
            sub_1CB9F9F38(&v201, v59[v60], HIDWORD(v59[v60]) + LODWORD(v59[v60]));
            unint64_t v60 = v62;
          }
          while (v56 > v62++);
        }
        uint64_t v184 = v59;
        sub_1CC34AE58((uint64_t)&__p, v38);
        if (!v38)
        {
          LODWORD(v64) = 0;
LABEL_204:
          unsigned int v183 = v64;
          std::string v205 = v207;
          uint64_t v206 = 0x1000000000;
          if (v203)
          {
            uint64_t v131 = (char *)v202;
            unsigned int v190 = (char *)v202 + 16 * v203;
            do
            {
              unint64_t v133 = *(unsigned int *)v131;
              unsigned int v132 = *((_DWORD *)v131 + 1);
              v199[0] = (void *)1;
              if (v194 >= 0x3A) {
                operator new();
              }
              v199[0] = (void *)((v194 << 58) | 1);
              unsigned int v134 = v132 + v133;
              sub_1CB9F9F38((unint64_t *)v199, v133, v132 + v133);
              sub_1CBA7B2F4((unint64_t *)v199, &v201);
              uint64_t v135 = (void **)v199[0];
              if ((uint64_t)v199[0]) {
                unint64_t v136 = (1 << v133) & ((unint64_t)v199[0] >> 1) & ~(-1 << ((unint64_t)v199[0] >> 58));
              }
              else {
                unint64_t v136 = *(void *)(*(void *)v199[0] + ((v133 >> 3) & 0x1FFFFFF8)) & (1 << v133);
              }
              BOOL v137 = v136 != 0;
              unsigned int v138 = v133 + 1;
              if ((int)v133 + 1 >= v134)
              {
                unsigned int v140 = v133;
              }
              else
              {
                unsigned int v139 = v132 - 1;
                unsigned int v140 = v133;
                do
                {
                  if (v135) {
                    uint64_t v141 = (1 << v138) & ((unint64_t)v135 >> 1) & ~(-1 << ((unint64_t)v135 >> 58));
                  }
                  else {
                    uint64_t v141 = *((void *)*v135 + (v138 >> 6)) & (1 << v138);
                  }
                  if (v137 != (v141 != 0))
                  {
                    if (v137)
                    {
                      uint64_t v142 = *((void *)v131 + 1);
                      if (v206 >= (unint64_t)HIDWORD(v206)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      int v143 = (unint64_t *)((char *)v205 + 16 * v206);
                      unint64_t *v143 = *((unsigned int *)__p + v140) | ((unint64_t)(v138 - v140) << 32);
                      v143[1] = v142 & 0xFFFFFFFF00000000 | (v140 - v133 + v142);
                      LODWORD(v206) = v206 + 1;
                      uint64_t v135 = (void **)v199[0];
                    }
                    if (v135) {
                      uint64_t v144 = (1 << v138) & ((unint64_t)v135 >> 1) & ~(-1 << ((unint64_t)v135 >> 58));
                    }
                    else {
                      uint64_t v144 = *((void *)*v135 + (v138 >> 6)) & (1 << v138);
                    }
                    BOOL v137 = v144 != 0;
                    unsigned int v140 = v138;
                  }
                  ++v138;
                  --v139;
                }
                while (v139);
              }
              if (v137)
              {
                uint64_t v145 = *((void *)v131 + 1);
                if (v206 >= (unint64_t)HIDWORD(v206)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v146 = (unint64_t *)((char *)v205 + 16 * v206);
                *uint64_t v146 = *((unsigned int *)__p + v140) | ((unint64_t)(v134 - v140) << 32);
                v146[1] = v145 & 0xFFFFFFFF00000000 | (v140 - v133 + v145);
                LODWORD(v206) = v206 + 1;
                uint64_t v135 = (void **)v199[0];
              }
              if ((v135 & 1) == 0 && v135)
              {
                if (*v135 != v135 + 2) {
                  free(*v135);
                }
                MEMORY[0x1D25D9CE0]();
              }
              v131 += 16;
            }
            while (v131 != v190);
          }
          uint64_t v127 = *(uint64_t **)v191;
          uint64_t v128 = **(void **)v191;
          if (v183)
          {
            uint64_t v147 = v128 + 1672;
            uint64_t v148 = (char *)operator new(8 * v183);
            unsigned int v129 = v148;
            uint64_t v149 = 0;
            uint64_t v130 = &v148[8 * v183];
            do
            {
              *(void *)&v148[v149] = v147;
              v149 += 8;
            }
            while (8 * v183 != v149);
            uint64_t v128 = *v127;
          }
          else
          {
            unsigned int v129 = 0;
            uint64_t v130 = 0;
          }
          uint64_t v150 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(v128 + 1576), (uint64_t)v129, (v130 - v129) >> 3, 0);
          *((unsigned char *)&v198.__r_.__value_.__s + 23) = 8;
          strcpy((char *)&v198, "agc.main");
          uint64_t v151 = std::string::append(&v198, ".vi_trimmed");
          std::string::size_type v152 = v151->__r_.__value_.__r.__words[2];
          *(_OWORD *)unsigned int v199 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
          uint64_t v200 = v152;
          v151->__r_.__value_.__l.__size_ = 0;
          v151->__r_.__value_.__r.__words[2] = 0;
          v151->__r_.__value_.__r.__words[0] = 0;
          if (v200 >= 0) {
            uint64_t v153 = (unsigned __int8 *)v199;
          }
          else {
            uint64_t v153 = (unsigned __int8 *)v199[0];
          }
          if (v200 >= 0) {
            uint64_t v154 = (const char *)(HIBYTE(v200) & 0x7F);
          }
          else {
            uint64_t v154 = (const char *)v199[1];
          }
          llvm::Module::getOrInsertFunction((uint64_t)v191, v153, v154, v150, 0);
          uint64_t v156 = v155;
          if (SHIBYTE(v200) < 0) {
            operator delete(v199[0]);
          }
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v198.__r_.__value_.__l.__data_);
          }
          uint64_t v157 = v187;
          __int16 v158 = *(_WORD *)(v156 + 18);
          *(_WORD *)(v156 + 18) = v158 & 0xC00F | *((_WORD *)v187 + 9) & 0x3FF0;
          if (v158)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v156);
            uint64_t v157 = v187;
          }
          int v159 = *(llvm::Value **)(v156 + 88);
          if (*((_WORD *)v157 + 9))
          {
            llvm::Function::BuildLazyArguments(v157);
            BOOL v160 = (unsigned int *)*((void *)v157 + 11);
            if (*((_WORD *)v157 + 9))
            {
              uint64_t v157 = v187;
              llvm::Function::BuildLazyArguments(v187);
              unsigned int v161 = (unsigned int *)*((void *)v187 + 11);
            }
            else
            {
              unsigned int v161 = (unsigned int *)*((void *)v157 + 11);
              uint64_t v157 = v187;
            }
          }
          else
          {
            BOOL v160 = *v185;
            unsigned int v161 = *v185;
          }
          for (uint64_t i = &v161[10 * *((void *)v157 + 12)]; v160 != i; v160 += 10)
          {
            unint64_t v163 = v160[8];
            if (v201) {
              unint64_t v164 = (1 << v163) & (v201 >> 1) & ~(-1 << (v201 >> 58));
            }
            else {
              unint64_t v164 = *(void *)(*(void *)v201 + ((v163 >> 3) & 0x1FFFFFF8)) & (1 << v160[8]);
            }
            if (v164)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v160, v159, (llvm::Value *)1);
              int v159 = (llvm::Value *)((char *)v159 + 40);
            }
          }
          sub_1CC89D864(v156 + 72, (uint64_t *)(v156 + 72), (uint64_t *)v187 + 9);
          *(void *)(v156 + 112) = *((void *)v187 + 14);
          if ((*((unsigned char *)v187 + 23) & 0x20) == 0) {
            goto LABEL_281;
          }
          uint64_t v165 = ***(void ***)v187;
          v199[0] = v187;
          int v166 = *(_DWORD *)(v165 + 2496);
          if (v166)
          {
            uint64_t v167 = *(void *)(v165 + 2480);
            int v168 = v166 - 1;
            unsigned int v169 = v168 & ((v187 >> 4) ^ (v187 >> 9));
            uint64_t v170 = (llvm::Function **)(v167 + 40 * v169);
            int v171 = *v170;
            if (*v170 == v187) {
              goto LABEL_276;
            }
            int v172 = 0;
            int v173 = 1;
            while (v171 != (llvm::Function *)-4096)
            {
              if (v172) {
                BOOL v174 = 0;
              }
              else {
                BOOL v174 = v171 == (llvm::Function *)-8192;
              }
              if (v174) {
                int v172 = v170;
              }
              unsigned int v175 = v169 + v173++;
              unsigned int v169 = v175 & v168;
              uint64_t v170 = (llvm::Function **)(v167 + 40 * v169);
              int v171 = *v170;
              if (*v170 == v187) {
                goto LABEL_276;
              }
            }
            if (v172) {
              BOOL v181 = v172;
            }
            else {
              BOOL v181 = v170;
            }
          }
          else
          {
            BOOL v181 = 0;
          }
          uint64_t v170 = (llvm::Function **)sub_1CC609054(v165 + 2480, (uint64_t)v199, (uint64_t *)v199, v181);
          uint64_t v182 = (llvm::Function *)v199[0];
          v170[3] = 0;
          v170[4] = 0;
          *uint64_t v170 = v182;
          v170[1] = (llvm::Function *)(v170 + 3);
          v170[2] = (llvm::Function *)0x100000000;
LABEL_276:
          uint64_t v176 = *((unsigned int *)v170 + 4);
          if (v176)
          {
            uint64_t v177 = (llvm::MDNode **)((char *)v170[1] + 8);
            uint64_t v178 = 16 * v176;
            size_t v179 = 0;
            while (*((_DWORD *)v177 - 2))
            {
              v177 += 2;
              v178 -= 16;
              if (!v178) {
                goto LABEL_282;
              }
            }
            size_t v179 = *v177;
            goto LABEL_282;
          }
LABEL_281:
          size_t v179 = 0;
LABEL_282:
          llvm::Value::setMetadata((uint64_t ***)v156, 0, v179);
          llvm::Function::eraseFromParent(v187);
          sub_1CD4684F0((uint64_t)&v202, (uint64_t)&v205);
          if (v129) {
            operator delete(v129);
          }
          if (v205 != v207) {
            free(v205);
          }
          if (v184) {
            operator delete(v184);
          }
          uint64_t v39 = (llvm::Function *)v156;
          goto LABEL_60;
        }
        char v105 = 0;
        uint64_t v106 = 0;
        unsigned int v107 = 0;
        while (1)
        {
          if (v201)
          {
            if (((1 << v105) & (v201 >> 1) & ~(-1 << (v201 >> 58))) != 0)
            {
LABEL_166:
              uint64_t v64 = (v106 + 1);
              char v108 = v196;
              if (v196 >= v197)
              {
                uint64_t v111 = (char *)__p;
                uint64_t v112 = (v196 - (unsigned char *)__p) >> 2;
                unint64_t v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 62) {
                  goto LABEL_302;
                }
                uint64_t v114 = v197 - (unsigned char *)__p;
                if ((v197 - (unsigned char *)__p) >> 1 > v113) {
                  unint64_t v113 = v114 >> 1;
                }
                if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v115 = v113;
                }
                if (v115)
                {
                  if (v115 >> 62) {
                    goto LABEL_303;
                  }
                  uint64_t v116 = (char *)operator new(4 * v115);
                }
                else
                {
                  uint64_t v116 = 0;
                }
                uint64_t v123 = &v116[4 * v112];
                *(_DWORD *)uint64_t v123 = v106;
                uint64_t v109 = v123 + 4;
                while (v108 != v111)
                {
                  int v124 = *((_DWORD *)v108 - 1);
                  v108 -= 4;
                  *((_DWORD *)v123 - 1) = v124;
                  v123 -= 4;
                }
                std::string __p = v123;
                char v196 = v109;
                unsigned int v197 = &v116[4 * v115];
                if (v111) {
                  operator delete(v111);
                }
LABEL_202:
                unint64_t v38 = v194;
                goto LABEL_203;
              }
              *(_DWORD *)char v196 = v106;
              uint64_t v109 = v108 + 4;
              goto LABEL_203;
            }
          }
          else if ((*(void *)(*(void *)v201 + 8 * (v107 >> 6)) & (1 << v107)) != 0)
          {
            goto LABEL_166;
          }
          uint64_t v110 = v196;
          if (v196 >= v197)
          {
            uint64_t v117 = (char *)__p;
            uint64_t v118 = (v196 - (unsigned char *)__p) >> 2;
            unint64_t v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 62) {
              goto LABEL_302;
            }
            uint64_t v120 = v197 - (unsigned char *)__p;
            if ((v197 - (unsigned char *)__p) >> 1 > v119) {
              unint64_t v119 = v120 >> 1;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v119;
            }
            if (v121)
            {
              if (v121 >> 62) {
                goto LABEL_303;
              }
              uint64_t v122 = (char *)operator new(4 * v121);
            }
            else
            {
              uint64_t v122 = 0;
            }
            uint64_t v125 = &v122[4 * v118];
            *(_DWORD *)uint64_t v125 = -1;
            uint64_t v109 = v125 + 4;
            while (v110 != v117)
            {
              int v126 = *((_DWORD *)v110 - 1);
              v110 -= 4;
              *((_DWORD *)v125 - 1) = v126;
              v125 -= 4;
            }
            std::string __p = v125;
            char v196 = v109;
            unsigned int v197 = &v122[4 * v121];
            if (v117) {
              operator delete(v117);
            }
            uint64_t v64 = v106;
            goto LABEL_202;
          }
          *(_DWORD *)char v196 = -1;
          uint64_t v109 = v110 + 4;
          uint64_t v64 = v106;
LABEL_203:
          char v196 = v109;
          uint64_t v106 = v64;
          char v105 = ++v107;
          if (v38 <= v107) {
            goto LABEL_204;
          }
        }
      }
      unsigned int v188 = 0;
      uint64_t v65 = 0;
      unint64_t v55 = 0;
      unsigned int v54 = 0;
      uint64_t v66 = (char *)v202;
      int v67 = (char *)v202 + 16 * v203;
      char v189 = (void *)((v38 << 58) | 1);
      unsigned int v186 = v67;
      while (1)
      {
        unsigned int v68 = v65;
        unsigned int v69 = v54;
        unint64_t v71 = *(unsigned int *)v66;
        unsigned int v70 = *((_DWORD *)v66 + 1);
        std::string v205 = (void *)1;
        if (v38 >= 0x3A) {
          operator new();
        }
        std::string v205 = v189;
        unsigned int v72 = v70 + v71;
        sub_1CB9F9F38((unint64_t *)&v205, v71, v70 + v71);
        unsigned int v73 = (void **)v205;
        if (v205) {
          break;
        }
        if (v201)
        {
          unint64_t v81 = *((unsigned int *)v205 + 16);
          unint64_t v82 = v201 >> 58;
LABEL_102:
          unsigned int v54 = v69;
          if (v82 < v81) {
            unint64_t v81 = v82;
          }
          if (!v81) {
            goto LABEL_118;
          }
          uint64_t v83 = 0;
          while (1)
          {
            char v84 = v83;
            unint64_t v85 = ((unint64_t)v205 >> 1) & ~(-1 << ((unint64_t)v205 >> 58));
            if ((v205 & 1) == 0)
            {
              char v84 = v83 & 0x3F;
              unint64_t v85 = *(void *)(*(void *)v205 + 8 * (v83 >> 6));
            }
            if ((v85 >> v84))
            {
              char v86 = v83;
              unint64_t v87 = (v201 >> 1) & ~(-1 << (v201 >> 58));
              if ((v201 & 1) == 0)
              {
                char v86 = v83 & 0x3F;
                unint64_t v87 = *(void *)(*(void *)v201 + 8 * (v83 >> 6));
              }
              if ((v87 >> v86)) {
                goto LABEL_115;
              }
            }
            if (v81 == ++v83) {
              goto LABEL_117;
            }
          }
        }
        LODWORD(v74) = *((_DWORD *)v205 + 2);
        unsigned int v75 = *(_DWORD *)(v201 + 8);
        if (v75 >= v74) {
          uint64_t v74 = v74;
        }
        else {
          uint64_t v74 = v75;
        }
        if (!v74)
        {
LABEL_117:
          unsigned int v54 = v69;
LABEL_118:
          uint64_t v65 = v68;
          if ((v205 & 1) == 0) {
            goto LABEL_159;
          }
          goto LABEL_156;
        }
        uint64_t v76 = *(uint64_t **)v205;
        int v77 = *(uint64_t **)v201;
        while (1)
        {
          uint64_t v79 = *v76++;
          uint64_t v78 = v79;
          uint64_t v80 = *v77++;
          if ((v80 & v78) != 0) {
            break;
          }
          if (!--v74) {
            goto LABEL_117;
          }
        }
LABEL_115:
        sub_1CBA7B2F4((unint64_t *)&v205, &v201);
        unsigned int v73 = (void **)v205;
        if (v205) {
          unint64_t v88 = (1 << v71) & ((unint64_t)v205 >> 1) & ~(-1 << ((unint64_t)v205 >> 58));
        }
        else {
          unint64_t v88 = *(void *)(*(void *)v205 + ((v71 >> 3) & 0x1FFFFFF8)) & (1 << v71);
        }
        unsigned int v89 = v71 + 1;
        unsigned int v54 = v69;
        if ((int)v71 + 1 < v72)
        {
          BOOL v90 = v88 != 0;
          unsigned int v91 = v71;
          uint64_t v65 = v68;
          while (1)
          {
            uint64_t v92 = (v73 & 1) != 0
                ? (1 << v89) & ((unint64_t)v73 >> 1) & ~(-1 << ((unint64_t)v73 >> 58))
                : *((void *)*v73 + (v89 >> 6)) & (1 << v89);
            if (v90 != (v92 != 0)) {
              break;
            }
            uint64_t v94 = v55;
LABEL_152:
            if (v72 == ++v89) {
              goto LABEL_155;
            }
          }
          if (v90 || v91 == v71)
          {
LABEL_130:
            uint64_t v94 = v55;
          }
          else
          {
            uint64_t v93 = v89 - v91;
            if (v55 < v65)
            {
              *v55++ = v91 | (unint64_t)(v93 << 32);
              goto LABEL_130;
            }
            uint64_t v95 = v55 - v54;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61) {
LABEL_302:
            }
              abort();
            if (((char *)v65 - (char *)v54) >> 2 > v96) {
              unint64_t v96 = ((char *)v65 - (char *)v54) >> 2;
            }
            if ((unint64_t)((char *)v65 - (char *)v54) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v96;
            }
            if (v97)
            {
              if (v97 >> 61) {
LABEL_303:
              }
                sub_1CB833614();
              unsigned int v98 = v54;
              uint64_t v99 = (char *)operator new(8 * v97);
              unsigned int v54 = v98;
            }
            else
            {
              uint64_t v99 = 0;
            }
            uint64_t v100 = (uint64_t *)&v99[8 * v95];
            uint64_t *v100 = v91 | (unint64_t)(v93 << 32);
            uint64_t v94 = v100 + 1;
            while (v55 != v54)
            {
              uint64_t v101 = *--v55;
              *--uint64_t v100 = v101;
            }
            uint64_t v65 = (uint64_t *)&v99[8 * v97];
            if (v54) {
              operator delete(v54);
            }
            unsigned int v54 = v100;
          }
          unsigned int v73 = (void **)v205;
          if (v205) {
            unint64_t v102 = (1 << v89) & ((unint64_t)v205 >> 1) & ~(-1 << ((unint64_t)v205 >> 58));
          }
          else {
            unint64_t v102 = *(void *)(*(void *)v205 + 8 * (v89 >> 6)) & (1 << v89);
          }
          BOOL v90 = v102 != 0;
          unsigned int v91 = v89;
          unint64_t v55 = v94;
          goto LABEL_152;
        }
        uint64_t v94 = v55;
        uint64_t v65 = v68;
LABEL_155:
        ++v188;
        unint64_t v55 = v94;
        unint64_t v38 = v194;
        int v67 = v186;
        if ((v73 & 1) == 0)
        {
LABEL_159:
          if (v73)
          {
            BOOL v103 = v65;
            unsigned int v104 = v54;
            if (*v73 != v73 + 2) {
              free(*v73);
            }
            MEMORY[0x1D25D9CE0]();
            unsigned int v54 = v104;
            uint64_t v65 = v103;
          }
        }
LABEL_156:
        v66 += 16;
        if (v66 == v67) {
          goto LABEL_73;
        }
      }
      unint64_t v81 = (unint64_t)v205 >> 58;
      if (v201)
      {
        if ((((v201 & (unint64_t)v205) >> 1) & ~((-1 << (v201 >> 58)) | (-1 << v81))) == 0) {
          goto LABEL_117;
        }
        goto LABEL_115;
      }
      unint64_t v82 = *(unsigned int *)(v201 + 64);
      goto LABEL_102;
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
  }
LABEL_69:
  if (v202 != v204) {
    free(v202);
  }
  return v19;
}

uint64_t *sub_1CC89CE28(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*((_DWORD *)a2 - 1) > *(_DWORD *)(v10 + 4))
                {
                  uint64_t v45 = *(void *)v10;
                  *(void *)unint64_t v10 = *(a2 - 1);
                  *(a2 - 1) = v45;
                }
                break;
              case 3:
                uint64_t result = sub_1CC89D540((uint64_t *)v10, (uint64_t *)(v10 + 8), a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CC89D7CC(v10, v10 + 8, v10 + 16, (uint64_t)(a2 - 1));
                break;
              case 5:
                uint64_t result = sub_1CC89D7CC(v10, v10 + 8, v10 + 16, v10 + 24);
                if (*((_DWORD *)a2 - 1) > *(_DWORD *)(v10 + 28))
                {
                  uint64_t v46 = *(void *)(v10 + 24);
                  *(void *)(v10 + 24) = *(a2 - 1);
                  *(a2 - 1) = v46;
                  if (*(_DWORD *)(v10 + 28) > *(_DWORD *)(v10 + 20))
                  {
                    uint64_t v48 = *(void *)(v10 + 16);
                    uint64_t v47 = *(void *)(v10 + 24);
                    *(void *)(v10 + 16) = v47;
                    *(void *)(v10 + 24) = v48;
                    if (*(_DWORD *)(v10 + 12) < HIDWORD(v47))
                    {
                      uint64_t v49 = *(void *)(v10 + 8);
                      *(void *)(v10 + 8) = v47;
                      *(void *)(v10 + 16) = v49;
                      if (*(_DWORD *)(v10 + 4) < HIDWORD(v47))
                      {
                        uint64_t v50 = *(void *)v10;
                        *(void *)unint64_t v10 = v47;
                        *(void *)(v10 + 8) = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = (uint64_t *)(v10 + 8);
            BOOL v53 = (uint64_t *)v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                unint64_t v55 = (void *)v10;
                do
                {
                  unsigned int v56 = *((_DWORD *)v55 + 3);
                  unsigned int v57 = *((_DWORD *)v55 + 1);
                  unint64_t v55 = v51;
                  if (v56 > v57)
                  {
                    uint64_t v58 = *v51;
                    uint64_t v59 = HIDWORD(*v55);
                    uint64_t v60 = v54;
                    while (1)
                    {
                      *(void *)(v10 + v60 + 8) = *(void *)(v10 + v60);
                      if (!v60) {
                        break;
                      }
                      unsigned int v61 = *(_DWORD *)(v10 + v60 - 4);
                      v60 -= 8;
                      if (v61 >= v59)
                      {
                        unsigned int v62 = (void *)(v10 + v60 + 8);
                        goto LABEL_83;
                      }
                    }
                    unsigned int v62 = (void *)v10;
LABEL_83:
                    void *v62 = v58;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                unsigned int v86 = *(_DWORD *)(v9 + 12);
                unsigned int v87 = *(_DWORD *)(v9 + 4);
                unint64_t v9 = (unint64_t)v51;
                if (v86 > v87)
                {
                  uint64_t v88 = *v51;
                  unint64_t v89 = HIDWORD(*v51);
                  BOOL v90 = (void *)v9;
                  do
                  {
                    unsigned int v91 = v90;
                    uint64_t v92 = *--v90;
                    void *v91 = v92;
                  }
                  while (*((_DWORD *)v91 - 3) < v89);
                  void *v90 = v88;
                }
                uint64_t v51 = (uint64_t *)(v9 + 8);
              }
              while ((uint64_t *)(v9 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((uint64_t *)v10 != a2)
            {
              int64_t v63 = (unint64_t)(v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  unint64_t v67 = v10 + 8 * v66;
                  if (2 * v65 + 2 < v12)
                  {
                    BOOL v68 = *(_DWORD *)(v67 + 4) > *(_DWORD *)(v67 + 12);
                    v67 += 8 * v68;
                    if (v68) {
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  if (*(_DWORD *)(v67 + 4) <= *(_DWORD *)(v10 + 8 * v65 + 4))
                  {
                    unsigned int v69 = (void *)(v10 + 8 * v65);
                    uint64_t v70 = *v69;
                    uint64_t v71 = HIDWORD(*v69);
                    do
                    {
                      unsigned int v72 = v69;
                      unsigned int v69 = (void *)v67;
                      *unsigned int v72 = *(void *)v67;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v73 = (2 * v66) | 1;
                      unint64_t v67 = v10 + 8 * v73;
                      uint64_t v74 = 2 * v66 + 2;
                      if (v74 < v12)
                      {
                        uint64_t result = (uint64_t *)*(unsigned int *)(v67 + 12);
                        BOOL v68 = *(_DWORD *)(v67 + 4) > result;
                        v67 += 8 * v68;
                        if (v68) {
                          uint64_t v73 = v74;
                        }
                      }
                      uint64_t v66 = v73;
                    }
                    while (*(_DWORD *)(v67 + 4) <= v71);
                    *unsigned int v69 = v70;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              do
              {
                uint64_t v75 = 0;
                uint64_t v76 = *(void *)v10;
                int v77 = (void *)v10;
                do
                {
                  uint64_t v78 = &v77[v75 + 1];
                  uint64_t v79 = (2 * v75) | 1;
                  uint64_t v80 = 2 * v75 + 2;
                  if (v80 < v12)
                  {
                    BOOL v68 = *((_DWORD *)v78 + 1) > *((_DWORD *)v78 + 3);
                    v78 += v68;
                    if (v68) {
                      uint64_t v79 = v80;
                    }
                  }
                  *int v77 = *v78;
                  int v77 = v78;
                  uint64_t v75 = v79;
                }
                while (v79 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v78 == --a2)
                {
                  *uint64_t v78 = v76;
                }
                else
                {
                  *uint64_t v78 = *a2;
                  *a2 = v76;
                  uint64_t v81 = (uint64_t)v78 - v10 + 8;
                  if (v81 >= 9)
                  {
                    unint64_t v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                    if (*(_DWORD *)(v10 + 8 * v82 + 4) > *((_DWORD *)v78 + 1))
                    {
                      uint64_t v83 = *v78;
                      unint64_t v84 = HIDWORD(*v78);
                      do
                      {
                        unint64_t v85 = v78;
                        uint64_t v78 = (uint64_t *)(v10 + 8 * v82);
                        *unint64_t v85 = *v78;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v10 + 8 * v82 + 4) > v84);
                      *uint64_t v78 = v83;
                    }
                  }
                }
                BOOL v68 = v12-- <= 2;
              }
              while (!v68);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          int v14 = (uint64_t *)(v10 + 8 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC89D540((uint64_t *)v9, (uint64_t *)(v9 + 8 * ((unint64_t)v12 >> 1)), a2 - 1);
            sub_1CC89D540((uint64_t *)(v9 + 8), v14 - 1, a2 - 2);
            sub_1CC89D540((uint64_t *)(v9 + 16), (uint64_t *)(v9 + 8 + 8 * v13), a2 - 3);
            uint64_t result = sub_1CC89D540(v14 - 1, v14, (uint64_t *)(v9 + 8 + 8 * v13));
            uint64_t v15 = *(void *)v9;
            *(void *)unint64_t v9 = *v14;
            *int v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CC89D540((uint64_t *)(v9 + 8 * ((unint64_t)v12 >> 1)), (uint64_t *)v9, a2 - 1);
          }
          --a3;
          if ((a4 & 1) != 0 || *(_DWORD *)(v9 - 4) > *(_DWORD *)(v9 + 4)) {
            break;
          }
          uint64_t v32 = *(void *)v9;
          uint64_t v33 = HIDWORD(*(void *)v9);
          if (*((_DWORD *)a2 - 1) >= v33)
          {
            unint64_t v36 = v9 + 8;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= (unint64_t)a2) {
                break;
              }
              unsigned int v37 = *(_DWORD *)(v36 + 4);
              v36 += 8;
            }
            while (v37 >= v33);
          }
          else
          {
            unint64_t v34 = v9;
            do
            {
              unint64_t v10 = v34 + 8;
              unsigned int v35 = *(_DWORD *)(v34 + 12);
              v34 += 8;
            }
            while (v35 >= v33);
          }
          unint64_t v38 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v39 = a2;
            do
            {
              unint64_t v38 = v39 - 1;
              unsigned int v40 = *((_DWORD *)v39-- - 1);
            }
            while (v40 < v33);
          }
          while (v10 < (unint64_t)v38)
          {
            uint64_t v41 = *(void *)v10;
            *(void *)unint64_t v10 = *v38;
            uint64_t *v38 = v41;
            do
            {
              unsigned int v42 = *(_DWORD *)(v10 + 12);
              v10 += 8;
            }
            while (v42 >= v33);
            do
              unsigned int v43 = *((_DWORD *)v38-- - 1);
            while (v43 < v33);
          }
          char v44 = (uint64_t *)(v10 - 8);
          BOOL v4 = v10 - 8 >= v9;
          BOOL v5 = v10 - 8 == v9;
          if (v10 - 8 != v9) {
            *(void *)unint64_t v9 = *v44;
          }
          a4 = 0;
          *char v44 = v32;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v9;
        uint64_t v18 = HIDWORD(*(void *)v9);
        do
        {
          unsigned int v19 = *(_DWORD *)(v9 + v16 + 12);
          v16 += 8;
        }
        while (v19 > v18);
        unint64_t v20 = v9 + v16;
        uint64_t v21 = a2;
        if (v16 == 8)
        {
          uint64_t v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            uint64_t v22 = v24 - 1;
            unsigned int v25 = *((_DWORD *)v24-- - 1);
            if (v25 > v18) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 1;
            unsigned int v23 = *((_DWORD *)v21-- - 1);
          }
          while (v23 <= v18);
        }
LABEL_22:
        unint64_t v10 = v20;
        if (v20 < (unint64_t)v22)
        {
          uint64_t v26 = v22;
          do
          {
            uint64_t v27 = *(void *)v10;
            *(void *)unint64_t v10 = *v26;
            *uint64_t v26 = v27;
            do
            {
              unsigned int v28 = *(_DWORD *)(v10 + 12);
              v10 += 8;
            }
            while (v28 > v18);
            do
              unsigned int v29 = *((_DWORD *)v26-- - 1);
            while (v29 <= v18);
          }
          while (v10 < (unint64_t)v26);
        }
        int v30 = (uint64_t *)(v10 - 8);
        if (v10 - 8 != v9) {
          *(void *)unint64_t v9 = *v30;
        }
        *int v30 = v17;
        if (v20 >= (unint64_t)v22) {
          break;
        }
LABEL_33:
        uint64_t result = (uint64_t *)sub_1CC89CE28(v9, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1CC89D5D4(v9, v10 - 8);
      uint64_t result = (uint64_t *)sub_1CC89D5D4(v10, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = (uint64_t *)(v10 - 8);
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC89D540(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 1);
  unsigned int v4 = *((_DWORD *)a3 + 1);
  if (v3 <= *((_DWORD *)result + 1))
  {
    if (v4 > v3)
    {
      uint64_t v6 = *a2;
      *a2 = *a3;
      *a3 = v6;
      if (*((_DWORD *)a2 + 1) > *((_DWORD *)result + 1))
      {
        uint64_t v7 = *result;
        *uint64_t result = *a2;
        *a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *result;
    if (v4 <= v3)
    {
      *uint64_t result = *a2;
      *a2 = v5;
      if (*((_DWORD *)a3 + 1) <= HIDWORD(v5)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1CC89D5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 4))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_1CC89D540((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a2 - 8));
      return 1;
    case 4:
      sub_1CC89D7CC(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_1CC89D7CC(a1, a1 + 8, a1 + 16, a1 + 24);
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 28))
      {
        uint64_t v16 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v16;
        if (*(_DWORD *)(a1 + 28) > *(_DWORD *)(a1 + 20))
        {
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v18;
          if (*(_DWORD *)(a1 + 12) < HIDWORD(v17))
          {
            uint64_t v19 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v17;
            *(void *)(a1 + 16) = v19;
            if (*(_DWORD *)(a1 + 4) < HIDWORD(v17))
            {
              uint64_t v20 = *(void *)a1;
              *(void *)a1 = v17;
              *(void *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 16;
      sub_1CC89D540((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v8 + 4) > *(_DWORD *)(v7 + 4))
    {
      uint64_t v11 = *(void *)v8;
      uint64_t v12 = HIDWORD(*(void *)v8);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v12)
        {
          uint64_t v15 = (void *)(a1 + v13 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v15 = (void *)a1;
LABEL_13:
      *uint64_t v15 = v11;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC89D7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC89D540((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

void sub_1CC89D864(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)*a3 != a3 && a2 != a3)
  {
    uint64_t v5 = (uint64_t *)a3[1];
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, (uint64_t)a3, (uint64_t)v5, (uint64_t)a3);
    if (v5 != a3)
    {
      uint64_t v6 = (void *)*a3;
      uint64_t v7 = *v5;
      *(void *)(v7 + 8) = a3;
      *a3 = v7;
      uint64_t v8 = *a2;
      v6[1] = a2;
      *uint64_t v5 = v8;
      *(void *)(v8 + 8) = v5;
      *a2 = (uint64_t)v6;
    }
  }
}

void sub_1CC89D8E4()
{
}

void sub_1CC89D920(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC89D9C0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD6F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F26203E0;
  *(void *)(a1 + 32) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD700, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC89D920;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDD700, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC89DA74()
{
}

void sub_1CC89DAB4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC89DAEC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);

  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::GPUFunctionCallInfoWrapper::ID);
}

uint64_t sub_1CC89DB3C(llvm::FunctionPass *a1, uint64_t a2)
{
  v90[36] = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction(a1, (llvm::LLVMContextImpl ****)a2)) {
    goto LABEL_100;
  }
  uint64_t v4 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::GPUFunctionCallInfoWrapper::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  *((void *)a1 + 4) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::GPUFunctionCallInfoWrapper::ID)+ 32);
  uint64_t v88 = v90;
  uint64_t v89 = 0x400000000;
  uint64_t v9 = a2 + 72;
  uint64_t v10 = *(void *)(a2 + 80);
  if (v10 == a2 + 72)
  {
LABEL_100:
    char v44 = 0;
    return v44 & 1;
  }
  do
  {
    uint64_t v11 = v10 - 24;
    if (!v10) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 + 40;
    for (uint64_t i = *(void *)(v11 + 48); i != v12; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v14 = i - 24;
      if (!i) {
        uint64_t v14 = 0;
      }
      int v15 = *(unsigned __int8 *)(v14 + 16);
      if (v15 == 84) {
        uint64_t v16 = (llvm::Type **)v14;
      }
      else {
        uint64_t v16 = 0;
      }
      if (!i || v15 != 84 || (*(unsigned char *)(v14 + 23) & 0x20) == 0) {
        continue;
      }
      uint64_t v17 = ***(void ***)v14;
      uint64_t v81 = (llvm *)v14;
      int v18 = *(_DWORD *)(v17 + 2496);
      if (v18)
      {
        uint64_t v19 = *(void *)(v17 + 2480);
        int v20 = v18 - 1;
        unsigned int v21 = v20 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v22 = (void *)(v19 + 40 * v21);
        uint64_t v23 = *v22;
        if (*v22 == v14) {
          goto LABEL_30;
        }
        uint64_t v24 = 0;
        int v25 = 1;
        while (v23 != -4096)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v23 == -8192;
          }
          if (v26) {
            uint64_t v24 = v22;
          }
          unsigned int v27 = v21 + v25++;
          unsigned int v21 = v27 & v20;
          uint64_t v22 = (void *)(v19 + 40 * v21);
          uint64_t v23 = *v22;
          if (*v22 == v14) {
            goto LABEL_30;
          }
        }
        if (v24) {
          uint64_t v39 = v24;
        }
        else {
          uint64_t v39 = v22;
        }
      }
      else
      {
        uint64_t v39 = 0;
      }
      uint64_t v22 = sub_1CC609054(v17 + 2480, (uint64_t)&v81, (uint64_t *)&v81, v39);
      unsigned int v40 = v81;
      v22[4] = 0;
      v22[3] = 0;
      *uint64_t v22 = v40;
      v22[1] = v22 + 3;
      v22[2] = 0x100000000;
LABEL_30:
      uint64_t v28 = *((unsigned int *)v22 + 4);
      if (v28)
      {
        unsigned int v29 = (void *)(v22[1] + 8);
        uint64_t v30 = 16 * v28;
        while (*((_DWORD *)v29 - 2) != 23)
        {
          v29 += 2;
          v30 -= 16;
          if (!v30) {
            goto LABEL_34;
          }
        }
        uint64_t v31 = *v29;
        if (*v29)
        {
          uint64_t v32 = *(unsigned int *)(v31 + 8);
          if ((v32 - 5) >= 0xFFFFFFFC)
          {
            uint64_t v33 = v9;
            unint64_t v85 = v87;
            uint64_t v86 = 0x600000000;
            uint64_t v34 = -8 * v32;
            uint64_t v80 = 0;
            do
            {
              uint64_t v35 = *(void *)(v31 + v34);
              if (!v35
                || (unint64_t v36 = *(const llvm::CallBase **)(v35 + 128), (v37 = *((void *)v36 + 14)) != 0)
                && (*(unsigned char *)(v37 + 15) & 8) != 0
                || (llvm::isLegalToPromote(v16, v36, (llvm::Function *)&v80, v8) & 1) == 0)
              {
                LODWORD(v86) = 0;
                uint64_t v9 = v33;
                goto LABEL_51;
              }
              if (v86 >= (unint64_t)HIDWORD(v86)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v85 + v86) = v36;
              int v38 = v86 + 1;
              LODWORD(v86) = v86 + 1;
              v34 += 8;
            }
            while (v34);
            uint64_t v9 = v33;
            if (v38)
            {
              uint64_t v81 = (llvm *)v16;
              unint64_t v82 = v84;
              uint64_t v83 = 0x600000000;
              sub_1CD4C0D94((uint64_t)&v82, (uint64_t)&v85);
              if (v89 >= HIDWORD(v89))
              {
                if (v88 > &v81 || (char *)v88 + 72 * v89 <= (char *)&v81) {
                  sub_1CD646D4C();
                }
                sub_1CD646D4C();
              }
              uint64_t v41 = (llvm **)((char *)v88 + 72 * v89);
              *uint64_t v41 = v81;
              v41[2] = (llvm *)0x600000000;
              v41[1] = (llvm *)(v41 + 3);
              uint64_t v42 = (uint64_t)(v41 + 1);
              if (v83) {
                sub_1CC00811C(v42, (uint64_t)&v82);
              }
              LODWORD(v89) = v89 + 1;
              if (v82 != v84) {
                free(v82);
              }
            }
LABEL_51:
            if (v85 != v87) {
              free(v85);
            }
          }
        }
      }
LABEL_34:
      ;
    }
    uint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10 != v9);
  unsigned int v43 = (llvm **)v88;
  if (!v89)
  {
    char v44 = 0;
    goto LABEL_108;
  }
  char v44 = 0;
  uint64_t v45 = (llvm **)((char *)v88 + 72 * v89);
  do
  {
    uint64_t v46 = *v43;
    uint64_t v47 = ***(void ***)*v43;
    uint64_t v81 = *v43;
    int v48 = *(_DWORD *)(v47 + 2496);
    if (v48)
    {
      uint64_t v49 = *(void *)(v47 + 2480);
      int v50 = v48 - 1;
      unsigned int v51 = v50 & ((v46 >> 4) ^ (v46 >> 9));
      uint64_t v52 = (llvm **)(v49 + 40 * v51);
      BOOL v53 = *v52;
      if (*v52 == v46) {
        goto LABEL_77;
      }
      uint64_t v54 = 0;
      int v55 = 1;
      while (v53 != (llvm *)-4096)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == (llvm *)-8192;
        }
        if (v56) {
          uint64_t v54 = v52;
        }
        unsigned int v57 = v51 + v55++;
        unsigned int v51 = v57 & v50;
        uint64_t v52 = (llvm **)(v49 + 40 * v51);
        BOOL v53 = *v52;
        if (*v52 == v46) {
          goto LABEL_77;
        }
      }
      if (v54) {
        uint64_t v75 = v54;
      }
      else {
        uint64_t v75 = v52;
      }
    }
    else
    {
      uint64_t v75 = 0;
    }
    uint64_t v52 = (llvm **)sub_1CC609054(v47 + 2480, (uint64_t)&v81, (uint64_t *)&v81, v75);
    uint64_t v76 = v81;
    v52[4] = 0;
    v52[3] = 0;
    *uint64_t v52 = v76;
    v52[1] = (llvm *)(v52 + 3);
    v52[2] = (llvm *)0x100000000;
LABEL_77:
    uint64_t v58 = v52[1];
    if (*(_DWORD *)v58 != 23)
    {
      uint64_t v59 = 16 * *((unsigned int *)v52 + 4) - 16;
      do
      {
        int v60 = *((_DWORD *)v58 + 4);
        uint64_t v58 = (llvm *)((char *)v58 + 16);
        v59 -= 16;
      }
      while (v60 != 23);
    }
    uint64_t v61 = *((unsigned int *)v43 + 4);
    if (v61)
    {
      int v62 = 0;
      int v63 = *(_DWORD *)(*((void *)v58 + 1) + 8);
      int64_t v64 = (llvm::CallBase **)v43[1];
      int64_t v65 = &v64[v61];
      while (1)
      {
        uint64_t v66 = *v64;
        uint64_t v67 = *((void *)a1 + 4);
        uint64_t v68 = *(void *)(v67 + 24);
        uint64_t v69 = *(unsigned int *)(v67 + 40);
        if (!v69) {
          goto LABEL_88;
        }
        LODWORD(v70) = (v69 - 1) & ((v66 >> 4) ^ (v66 >> 9));
        uint64_t v71 = v68 + 16 * v70;
        unsigned int v72 = *(llvm::CallBase **)v71;
        if (v66 != *(llvm::CallBase **)v71) {
          break;
        }
LABEL_89:
        ++v62;
        --*(_DWORD *)(v71 + 8);
        if (v62 != v63) {
          llvm::versionCallSite(v46, v66, 0, (llvm::MDNode *)v8);
        }
        llvm::promoteCall(v46, v66, 0, (llvm::CastInst **)v8);
        if (++v64 == v65)
        {
          char v44 = 1;
          goto LABEL_93;
        }
      }
      int v73 = 1;
      while (v72 != (llvm::CallBase *)-4096)
      {
        int v74 = v70 + v73++;
        uint64_t v70 = v74 & (v69 - 1);
        unsigned int v72 = *(llvm::CallBase **)(v68 + 16 * v70);
        if (v66 == v72)
        {
          uint64_t v71 = v68 + 16 * v70;
          goto LABEL_89;
        }
      }
LABEL_88:
      uint64_t v71 = v68 + 16 * v69;
      goto LABEL_89;
    }
LABEL_93:
    v43 += 9;
  }
  while (v43 != v45);
  unsigned int v43 = (llvm **)v88;
  if (v89)
  {
    uint64_t v77 = 9 * v89;
    do
    {
      uint64_t v78 = (llvm **)v43[v77 - 8];
      if (&v43[v77 - 6] != v78) {
        free(v78);
      }
      v77 -= 9;
    }
    while (v77 * 8);
    unsigned int v43 = (llvm **)v88;
  }
LABEL_108:
  if (v43 != v90) {
    free(v43);
  }
  return v44 & 1;
}

uint64_t sub_1CC89E1BC()
{
  *(void *)&long long v3 = "Maximum number of calls that an indirect call can be expanded into. This is used only if LLVM_AGX_IND"
                   "_CALL_PROMO_EXPAND_TO_NB does not apply and if LLVM_AGX_USE_NEW_CALL_PROMOTION_HEURISTIC is set";
  *((void *)&v3 + 1) = 196;
  int v1 = 25;
  int v2 = &v1;
  sub_1CD646E8C(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EBCDD638, &dword_1CB82C000);
}

void sub_1CC89E228()
{
}

uint64_t sub_1CC89E2C4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD708;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2620480;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD710, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC89E228;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCDD710, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC89E374()
{
}

void sub_1CC89E3B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC89E3EC()
{
  return "GPU Optimize Allocas Pass";
}

uint64_t sub_1CC89E3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3 == a2 + 72)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = (llvm::DataLayout *)(*(void *)(a2 + 40) + 272);
    do
    {
      uint64_t v6 = v3 - 24;
      if (!v3) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 40;
      for (uint64_t i = *(void *)(v6 + 48); i != v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v9 = i - 24;
        if (!i) {
          uint64_t v9 = 0;
        }
        int v10 = *(unsigned __int8 *)(v9 + 16);
        if (v10 == 59) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = 0;
        }
        if (i && v10 == 59 && *(unsigned char *)(*(void *)(v11 - 32) + 16) == 16)
        {
          uint64_t v12 = *(void *)(v11 + 40);
          uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 80);
          uint64_t v14 = v13 ? v13 - 24 : 0;
          if (v12 == v14)
          {
            __int16 v15 = *(_WORD *)(v11 + 18);
            if ((v15 & 0x40) == 0)
            {
              char v4 = 1;
              unint64_t v16 = 1 << v15;
              unint64_t v17 = 1 << llvm::DataLayout::getAlignment(v5, *(llvm::Type **)(v11 + 64), 0);
              if (v17 <= v16) {
                unint64_t v17 = v16;
              }
              *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xFFC0 | __clz(v17) ^ 0x3F;
            }
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_1CC89E51C(uint64_t a1)
{
}

uint64_t sub_1CC89E5BC(uint64_t a1, uint64_t a2)
{
  v174[32] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::FunctionGroupInfoWrapperPass::ID);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7 == a2 + 24) {
    return 0;
  }
  uint64_t v8 = *(void **)(v6 + 32);
  uint64_t v9 = a2 + 8;
  unsigned int v161 = v8;
  do
  {
    if (v7) {
      uint64_t v10 = v7 - 56;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v7 && *(unsigned char *)(v10 + 16) == 3)
    {
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 0) {
        goto LABEL_279;
      }
    }
    else if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 72) == v10 + 72 && (*(unsigned char *)(v10 + 34) & 0x80) == 0)
    {
      goto LABEL_279;
    }
    uint64_t v163 = v7;
    uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*v8 + 24))(v8, v10);
    uint64_t v12 = *(void *)(v10 + 112);
    if (!v12 || !*(_DWORD *)(v12 + 8) || (uint64_t v13 = *(void *)(v12 + 40)) == 0 || (v14 = *(_DWORD *)(v13 + 40)) == 0)
    {
LABEL_50:
      uint64_t v30 = v8[1];
      int v172 = (void *)v10;
      sub_1CC003A6C(v30, &v172);
      uint64_t v31 = *(void *)(v10 + 80);
      uint64_t v164 = v10 + 72;
      if (v31 == v10 + 72)
      {
        char v33 = 0;
        char v168 = 0;
        char v162 = 0;
        char v32 = 0;
        char v165 = 0;
LABEL_278:
        char v134 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 160))(v11, 16);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 23, v32 & 1 | v165 & 1u | ((v134 & 1) == 0), 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 25, v32 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 26, v33 != 0, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 24, v165 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 27, v162 & 1, 1, 0, 1, 2);
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, 28, v168 & 1, 1, 0, 1, 2);
        uint64_t v7 = v163;
        uint64_t v8 = v161;
        goto LABEL_279;
      }
      char v165 = 0;
      char v32 = 0;
      char v162 = 0;
      char v168 = 0;
      char v33 = 0;
      while (1)
      {
        uint64_t v34 = v31 - 24;
        uint64_t v166 = v31;
        if (!v31) {
          uint64_t v34 = 0;
        }
        uint64_t v35 = v34 + 40;
        for (uint64_t i = *(void *)(v34 + 48); i != v35; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v37 = (uint64_t ***)(i - 24);
          if (i) {
            uint64_t v38 = i - 24;
          }
          else {
            uint64_t v38 = 0;
          }
          int v172 = v174;
          uint64_t v173 = 0x1000000000;
          int v39 = *(unsigned __int8 *)(v38 + 16);
          if (i && v39 == 61)
          {
            unsigned int v40 = *(llvm **)(v38 - 32);
            int v41 = *(_DWORD *)(*(void *)v40 + 8);
            if ((v41 & 0xFE) == 0x12)
            {
              unsigned int v42 = *(_DWORD *)(**(void **)(*(void *)v40 + 16) + 8) & 0xFFFFFF00;
              if (v42 != 768)
              {
                if (v42 != 20480) {
                  goto LABEL_78;
                }
LABEL_74:
                char v168 = 1;
                goto LABEL_272;
              }
LABEL_77:
              char v33 = sub_1CC89F888(v40);
              goto LABEL_272;
            }
            unsigned int v42 = v41 & 0xFFFFFF00;
            if ((v41 & 0xFFFFFF00) == 0x5000) {
              goto LABEL_74;
            }
LABEL_76:
            if (v42 != 768)
            {
LABEL_78:
              if (v42 != 256) {
                goto LABEL_272;
              }
              v174[0] = v40;
              v174[1] = 0;
              unsigned int v43 = 1;
              LODWORD(v173) = 1;
              goto LABEL_200;
            }
            goto LABEL_77;
          }
          if (i && v39 == 64)
          {
            unsigned int v40 = *(llvm **)(v38 - 96);
            goto LABEL_71;
          }
          if (i && v39 == 65)
          {
            unsigned int v40 = *(llvm **)(v38 - 64);
LABEL_71:
            if ((*(_DWORD *)(*(void *)v40 + 8) & 0xFE) == 0x12) {
              unsigned int v42 = *(_DWORD *)(**(void **)(*(void *)v40 + 16) + 8) & 0xFFFFFF00;
            }
            else {
              unsigned int v42 = *(_DWORD *)(*(void *)v40 + 8) & 0xFFFFFF00;
            }
            goto LABEL_76;
          }
          if (v39 != 84) {
            goto LABEL_272;
          }
          uint64_t v44 = *(void *)(v38 - 32);
          if (!v44 || *(unsigned char *)(v44 + 16))
          {
            if (!i) {
              goto LABEL_272;
            }
LABEL_84:
            if ((*(unsigned char *)(i - 1) & 0x20) == 0) {
              goto LABEL_99;
            }
            uint64_t v45 = ***v37;
            v170[0] = i - 24;
            int v46 = *(_DWORD *)(v45 + 2496);
            if (v46)
            {
              uint64_t v47 = *(void *)(v45 + 2480);
              int v48 = v46 - 1;
              unsigned int v49 = v48 & ((v37 >> 4) ^ (v37 >> 9));
              int v50 = (uint64_t ****)(v47 + 40 * v49);
              unsigned int v51 = *v50;
              if (*v50 == v37)
              {
LABEL_95:
                uint64_t v56 = *((unsigned int *)v50 + 4);
                if (v56)
                {
                  unsigned int v57 = v50[1] + 1;
                  uint64_t v58 = 16 * v56;
                  while (*((_DWORD *)v57 - 2) != 23)
                  {
                    v57 += 2;
                    v58 -= 16;
                    if (!v58) {
                      goto LABEL_99;
                    }
                  }
                  uint64_t v70 = *v57;
                  if (v70)
                  {
                    uint64_t v71 = *(unsigned int *)(v70 + 8);
                    if (!v71) {
                      goto LABEL_272;
                    }
                    uint64_t v72 = -8 * v71;
                    uint64_t v73 = v72;
                    while (*(void *)(v70 + v73))
                    {
                      v73 += 8;
                      if (!v73)
                      {
                        while (1)
                        {
                          uint64_t v74 = *(void *)(v70 + v72);
                          if (*(unsigned char *)v74 == 1)
                          {
                            uint64_t v75 = *(void *)(v74 + 128);
                            int v76 = *(unsigned __int8 *)(v75 + 16);
                            if (v75) {
                              BOOL v77 = v76 == 3;
                            }
                            else {
                              BOOL v77 = 0;
                            }
                            if (v77)
                            {
                              if ((*(_DWORD *)(v75 + 20) & 0x7FFFFFF) == 0) {
                                goto LABEL_99;
                              }
                              goto LABEL_144;
                            }
                          }
                          else
                          {
                            uint64_t v75 = 0;
                            int v76 = MEMORY[0x10];
                          }
                          if (!v76 && *(void *)(v75 + 72) == v75 + 72 && (*(unsigned char *)(v75 + 34) & 0x80) == 0) {
                            goto LABEL_99;
                          }
LABEL_144:
                          v72 += 8;
                          if (!v72) {
                            goto LABEL_272;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_99:
                int v59 = *(unsigned __int8 *)(v38 + 16);
                if (v59 == 84)
                {
                  uint64_t v60 = 0;
                }
                else if (v59 == 39)
                {
                  uint64_t v60 = (*(_DWORD *)(v38 + 80) + 1);
                }
                else
                {
                  uint64_t v60 = 2;
                }
                int v61 = *(_DWORD *)(v38 + 20);
                uint64_t v62 = v61 & 0x7FFFFFF;
                int v63 = (llvm **)(v38 - 32 * v62);
                if (v61 < 0 && (uint64_t v93 = (uint64_t)*(v63 - 1), (v93 & 0xFFFFFFFF0) != 0)) {
                  uint64_t v64 = (*((_DWORD *)v63 - 3) - *(_DWORD *)((char *)v63 - v93));
                }
                else {
                  uint64_t v64 = 0;
                }
                if (v63 != (llvm **)(v38 - 32 * v60 - 32 * v64 - 32))
                {
                  uint64_t v65 = 32 * v62 - 32 * v60 - 32 * v64 - 32;
                  do
                  {
                    uint64_t v66 = *(void *)*v63;
                    int v67 = *(_DWORD *)(v66 + 8);
                    if (v66) {
                      BOOL v68 = *(_DWORD *)(v66 + 8) == 15;
                    }
                    else {
                      BOOL v68 = 0;
                    }
                    if (v68)
                    {
                      if ((*(_DWORD *)(v66 + 8) & 0xFE) == 0x12) {
                        int v67 = *(_DWORD *)(**(void **)(v66 + 16) + 8);
                      }
                      if ((v67 & 0xFFFFFF00) == 0x300)
                      {
                        char v33 = sub_1CC89F888(*v63);
                      }
                      else if ((v67 & 0xFFFFFF00) == 0x100)
                      {
                        if (v173 >= (unint64_t)HIDWORD(v173)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        uint64_t v69 = (llvm **)((char *)v172 + 16 * v173);
                        *uint64_t v69 = *v63;
                        v69[1] = 0;
                        LODWORD(v173) = v173 + 1;
                      }
                    }
                    v63 += 4;
                    v65 -= 32;
                  }
                  while (v65);
                }
                goto LABEL_209;
              }
              uint64_t v52 = 0;
              int v53 = 1;
              while (v51 != (uint64_t ***)-4096)
              {
                if (v52) {
                  BOOL v54 = 0;
                }
                else {
                  BOOL v54 = v51 == (uint64_t ***)-8192;
                }
                if (v54) {
                  uint64_t v52 = v50;
                }
                unsigned int v55 = v49 + v53++;
                unsigned int v49 = v55 & v48;
                int v50 = (uint64_t ****)(v47 + 40 * v49);
                unsigned int v51 = *v50;
                if (*v50 == v37) {
                  goto LABEL_95;
                }
              }
              if (v52) {
                uint64_t v86 = v52;
              }
              else {
                uint64_t v86 = v50;
              }
            }
            else
            {
              uint64_t v86 = 0;
            }
            int v50 = (uint64_t ****)sub_1CC609054(v45 + 2480, (uint64_t)v170, v170, v86);
            uint64_t v87 = v170[0];
            v50[4] = 0;
            v50[3] = 0;
            *int v50 = (uint64_t ***)v87;
            v50[1] = (uint64_t ***)(v50 + 3);
            v50[2] = (uint64_t ***)0x100000000;
            goto LABEL_95;
          }
          if (*(void *)(v44 + 24) == *(void *)(v38 + 72) && (*(unsigned char *)(v44 + 33) & 0x20) != 0)
          {
            int v78 = *(_DWORD *)(*(void *)(i - 56) + 36);
            if ((v78 - 2029) <= 0x35 && ((1 << (v78 + 19)) & 0x21002100210021) != 0)
            {
              uint64_t v80 = 0;
              goto LABEL_151;
            }
            if ((v78 - 1682) >= 0x8C)
            {
              if ((v78 - 2177) < 0x80)
              {
                uint64_t v80 = 2;
LABEL_151:
                uint64_t v81 = 0;
                unint64_t v82 = (&v37[4 * v80])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
LABEL_152:
                uint64_t v83 = (char *)v172 + 16 * v81;
                *(void *)uint64_t v83 = v82;
                uint64_t v84 = 1;
                char v165 = 1;
LABEL_153:
                *((void *)v83 + 1) = v84;
                BOOL v85 = __CFADD__(v173, 1);
                unsigned int v43 = v173 + 1;
                LODWORD(v173) = v173 + 1;
                if (v85) {
                  goto LABEL_272;
                }
LABEL_200:
                while (1)
                {
                  uint64_t v94 = (char *)v172 + 16 * v43;
                  uint64_t v95 = (llvm *)*((void *)v94 - 2);
                  uint64_t v96 = *((unsigned int *)v94 - 2);
                  LODWORD(v173) = v43 - 1;
                  UnderlyingObject = llvm::getUnderlyingObject(v95, (const llvm::Value *)6);
                  if (!UnderlyingObject) {
                    break;
                  }
                  unsigned int v98 = UnderlyingObject;
                  unsigned int v99 = *((unsigned __int8 *)UnderlyingObject + 16);
                  if (v99 == 60)
                  {
                    uint64_t v100 = (llvm *)*((void *)UnderlyingObject - 4);
                    int v101 = *(_DWORD *)(*(void *)v100 + 8);
                    if ((v101 & 0xFE) == 0x12) {
                      int v101 = *(_DWORD *)(**(void **)(*(void *)v100 + 16) + 8);
                    }
                    if ((v101 & 0xFFFFFF00) != 0x4000) {
                      break;
                    }
                    unint64_t v102 = llvm::getUnderlyingObject(v100, (const llvm::Value *)6);
                    if (!v102) {
                      break;
                    }
                    unsigned int v98 = v102;
                    unsigned int v99 = *((unsigned __int8 *)v102 + 16);
                  }
                  if (v99 >= 4) {
                    break;
                  }
                  (*(void (**)(uint64_t, uint64_t, llvm *))(*(void *)v11 + 144))(v11, 16, v98);
                  v32 |= v96 == 0;
LABEL_209:
                  unsigned int v43 = v173;
                  if (!v173) {
                    goto LABEL_272;
                  }
                }
                int v103 = *(_DWORD *)(*(void *)v95 + 8);
                if ((v103 & 0xFE) == 0x12) {
                  int v103 = *(_DWORD *)(**(void **)(*(void *)v95 + 16) + 8);
                }
                uint64_t v104 = *(void *)(a2 + 16);
                if ((v103 & 0xFFFFFF00) == 0x100)
                {
                  while (v104 != v9)
                  {
                    if (v104) {
                      char v105 = (void *)(v104 - 56);
                    }
                    else {
                      char v105 = 0;
                    }
                    uint64_t v106 = *v105;
                    int v107 = *(_DWORD *)(*v105 + 8);
                    int v108 = v107;
                    if ((v107 & 0xFE) == 0x12) {
                      int v108 = *(_DWORD *)(**(void **)(v106 + 16) + 8);
                    }
                    if ((v108 & 0xFFFFFF00) == 0x4000)
                    {
                      uint64_t v109 = v105[3];
                      if (*(unsigned char *)(v109 + 8) != 15) {
                        uint64_t v109 = 0;
                      }
                      if (v109) {
                        uint64_t v106 = v109;
                      }
                      int v107 = *(_DWORD *)(v106 + 8);
                    }
                    if ((v107 & 0xFE) == 0x12) {
                      int v107 = *(_DWORD *)(**(void **)(v106 + 16) + 8);
                    }
                    if ((v107 & 0xFFFFFF00) == 0x100) {
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 144))(v11, 16);
                    }
                    uint64_t v104 = *(void *)(v104 + 8);
                  }
                  char v32 = 1;
                  goto LABEL_272;
                }
                while (2)
                {
                  if (v104 == v9)
                  {
                    char v165 = 1;
                    goto LABEL_272;
                  }
                  if (v104) {
                    uint64_t v110 = (unsigned char *)(v104 - 56);
                  }
                  else {
                    uint64_t v110 = 0;
                  }
                  uint64_t v111 = *(uint64_t ***)v110;
                  int v112 = *(_DWORD *)(*(void *)v110 + 8);
                  if ((v112 & 0xFE) == 0x12) {
                    int v112 = *(_DWORD *)(*v111[2] + 8);
                  }
                  if ((v112 & 0xFFFFFF00) == 0x4000 && (v110[34] & 0x40) != 0)
                  {
                    uint64_t v113 = **v111;
                    v170[0] = (uint64_t)v110;
                    int v114 = *(_DWORD *)(v113 + 2520);
                    if (v114)
                    {
                      uint64_t v115 = *(void *)(v113 + 2504);
                      int v116 = v114 - 1;
                      unsigned int v117 = v116 & ((v110 >> 4) ^ (v110 >> 9));
                      uint64_t v118 = (void *)(v115 + 24 * v117);
                      unint64_t v119 = (unsigned char *)*v118;
                      if ((unsigned char *)*v118 == v110) {
                        goto LABEL_241;
                      }
                      uint64_t v128 = 0;
                      int v129 = 1;
                      while (v119 != (unsigned char *)-4096)
                      {
                        if (v128) {
                          BOOL v130 = 0;
                        }
                        else {
                          BOOL v130 = v119 == (unsigned char *)-8192;
                        }
                        if (v130) {
                          uint64_t v128 = v118;
                        }
                        unsigned int v131 = v117 + v129++;
                        unsigned int v117 = v131 & v116;
                        uint64_t v118 = (void *)(v115 + 24 * v117);
                        unint64_t v119 = (unsigned char *)*v118;
                        if ((unsigned char *)*v118 == v110) {
                          goto LABEL_241;
                        }
                      }
                      if (v128) {
                        unsigned int v132 = v128;
                      }
                      else {
                        unsigned int v132 = v118;
                      }
                    }
                    else
                    {
                      unsigned int v132 = 0;
                    }
                    uint64_t v118 = sub_1CC5BF31C(v113 + 2504, (uint64_t)v170, v170, v132);
                    uint64_t v133 = v170[0];
                    v118[1] = 0;
                    v118[2] = 0;
                    void *v118 = v133;
LABEL_241:
                    uint64_t v120 = (uint64_t *)v118[1];
                    uint64_t v121 = v118[2];
                    if (v121 == 13)
                    {
                      uint64_t v125 = *v120;
                      uint64_t v126 = *(uint64_t *)((char *)v120 + 5);
                      if (v125 != 0x5F72656C706D6173 || v126 != 0x65746174735F7265) {
                        goto LABEL_249;
                      }
                    }
                    else
                    {
                      if (v121 != 11) {
                        goto LABEL_249;
                      }
                      uint64_t v122 = *v120;
                      uint64_t v123 = *(uint64_t *)((char *)v120 + 3);
                      if (v122 != 0x74735F6567616D69 || v123 != 0x65746174735F6567) {
                        goto LABEL_249;
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v11 + 144))(v11, 16, v110);
                  }
LABEL_249:
                  uint64_t v104 = *(void *)(v104 + 8);
                  continue;
                }
              }
            }
            else
            {
              llvm::SampleInfo::SampleInfo((uint64_t)v170, *(_DWORD *)(*(void *)(i - 56) + 36), 1);
              if (v171 != -1)
              {
                uint64_t v81 = v173;
                unint64_t v82 = (&v37[4 * v171])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
                if (v173 >= (unint64_t)HIDWORD(v173)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                goto LABEL_152;
              }
              int v78 = *(_DWORD *)(*(void *)(i - 56) + 36);
            }
            BOOL v88 = sub_1CC7A857C(v78);
            if ((v78 - 2838) < 3 || v88)
            {
              unsigned int v89 = 0;
              if (v78 != 2142 && v78 != 2144)
              {
                BOOL v160 = v88;
                if (sub_1CC7A8558(v78))
                {
                  unsigned int v89 = 2;
                }
                else
                {
                  char v90 = (v78 - 2784) < 3 || v160;
                  unsigned int v89 = 3;
                  if ((v78 - 2784) < 3) {
                    unsigned int v89 = 0;
                  }
                  if ((v90 & 1) == 0)
                  {
                    if ((v78 - 2841) >= 0xFFFFFFFD) {
                      unsigned int v89 = 0;
                    }
                    else {
                      unsigned int v89 = -1;
                    }
                  }
                }
              }
              unsigned int v91 = (&v37[4 * v89])[-4 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)];
              int v92 = *((_DWORD *)*v91 + 2);
              if ((v92 & 0xFE) == 0x12) {
                int v92 = *(_DWORD *)(*(void *)(*v91)[2] + 8);
              }
              if ((v92 & 0xFFFFFF00) == 0x300)
              {
                char v33 = 1;
                goto LABEL_272;
              }
              if ((v92 & 0xFFFFFF00) == 0x100)
              {
                if (v173 >= (unint64_t)HIDWORD(v173)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v84 = 0;
                uint64_t v83 = (char *)v172 + 16 * v173;
                *(void *)uint64_t v83 = v91;
                goto LABEL_153;
              }
            }
            else if ((v78 - 2471) < 8 || (v78 - 2703) < 2 || (v78 - 1996) < 2)
            {
              char v162 = 1;
            }
          }
          else
          {
            if (!i) {
              goto LABEL_272;
            }
            if (*(void *)(v44 + 24) != *(void *)(i + 48)) {
              goto LABEL_84;
            }
            if (*(void *)(v44 + 72) == v44 + 72 && (*(unsigned char *)(v44 + 34) & 0x80) == 0) {
              goto LABEL_99;
            }
          }
LABEL_272:
          if (v172 != v174) {
            free(v172);
          }
        }
        uint64_t v31 = *(void *)(v166 + 8);
        if (v31 == v164) {
          goto LABEL_278;
        }
      }
    }
    uint64_t v15 = *(void *)(v13 + 24);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCBE588))
    {
      unint64_t v158 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v158 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v158;
      __cxa_guard_release(&qword_1EBCBE588);
    }
    uint64_t v16 = __ROR8__(qword_1EBCBE580 ^ 0xFD191BE7CEB4422BLL, 30);
    unint64_t v17 = 0x9DDFEA08EB382D69
        * ((qword_1EBCBE580 - 0x3D2776C38520C79FLL) ^ ((0x9DDFEA08EB382D69
                                                      * ((v16 + 0x2CD2DFBEB8101159) ^ (qword_1EBCBE580
                                                                                       - 0x3D2776C38520C79FLL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v16 + 0x2CD2DFBEB8101159) ^ (qword_1EBCBE580 - 0x3D2776C38520C79FLL))));
    unsigned int v18 = -348639895 * ((v17 >> 47) ^ v17);
    for (int j = 1; ; ++j)
    {
      unsigned int v20 = v18 & (v14 - 1);
      uint64_t v21 = v15 + 24 * v20;
      uint64_t v22 = *(void **)v21;
      if (*(void *)v21 == -1)
      {
        if ("agx-no-user-resource-stores" == (char *)-1) {
          goto LABEL_43;
        }
        goto LABEL_26;
      }
      if (v22 != (void *)-2) {
        break;
      }
      if ("agx-no-user-resource-stores" == (char *)-2) {
        goto LABEL_43;
      }
LABEL_26:
      if (v22 == (void *)-1) {
        goto LABEL_50;
      }
      unsigned int v18 = j + v20;
    }
    if (*(void *)(v21 + 8) != 27) {
      goto LABEL_26;
    }
    BOOL v23 = *v22 == 0x752D6F6E2D786761 && v22[1] == 0x6F7365722D726573;
    BOOL v24 = v23 && v22[2] == 0x6F74732D65637275;
    if (!v24 || *(void *)((char *)v22 + 19) != 0x7365726F74732D65) {
      goto LABEL_26;
    }
LABEL_43:
    if (!*(void *)(v21 + 16)) {
      goto LABEL_50;
    }
    uint64_t v26 = v10 + 72;
    uint64_t v27 = *(void *)(v10 + 80);
    uint64_t v7 = v163;
    if (v27 == v10 + 72) {
      goto LABEL_279;
    }
    while (1)
    {
      uint64_t v28 = v27 - 24;
      if (!v27) {
        uint64_t v28 = 0;
      }
      uint64_t v29 = *(void *)(v28 + 48);
      if (v29 != v28 + 40) {
        break;
      }
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == v26) {
        goto LABEL_279;
      }
    }
    while (2)
    {
      if (v29) {
        uint64_t v144 = v29 - 24;
      }
      else {
        uint64_t v144 = 0;
      }
      int v145 = *(unsigned __int8 *)(v144 + 16);
      if (!v29 || v145 != 60)
      {
        if (v29 && v145 == 61)
        {
          uint64_t v146 = v8;
          unsigned int v135 = 1;
          goto LABEL_319;
        }
        if (v29 && (v145 - 66) > 0xFFFFFFFD)
        {
          uint64_t v146 = v8;
          unsigned int v135 = 0;
          goto LABEL_319;
        }
        if (v145 == 84)
        {
          uint64_t v153 = *(void *)(v144 - 32);
          if (v153)
          {
            if (!*(unsigned char *)(v153 + 16) && *(void *)(v153 + 24) == *(void *)(v144 + 72))
            {
              uint64_t v146 = v8;
              if ((*(unsigned char *)(v153 + 33) & 0x20) == 0) {
                goto LABEL_334;
              }
              unsigned int v135 = 0;
              int v136 = *(_DWORD *)(*(void *)(v29 - 56) + 36);
              int v169 = v136;
              if (v136 != 2142 && v136 != 2144)
              {
                int v137 = *(_DWORD *)(*(void *)(v29 - 56) + 36);
                if (sub_1CC7A8558(v136))
                {
                  int v136 = v137;
                  unsigned int v135 = 2;
                }
                else
                {
                  int v136 = v137;
                  if ((v137 - 2784) >= 3)
                  {
                    BOOL v139 = sub_1CC7A857C(v137);
                    int v136 = v169;
                    if ((v169 - 2841) >= 0xFFFFFFFD) {
                      int v140 = 0;
                    }
                    else {
                      int v140 = -1;
                    }
                    if (v139) {
                      unsigned int v135 = 3;
                    }
                    else {
                      unsigned int v135 = v140;
                    }
                  }
                  else
                  {
                    unsigned int v135 = 0;
                  }
                }
              }
              if ((v141 = sub_1CC7A8558(v136), uint64_t v7 = v163, (v169 - 2784) >= 3)
                && !v141
                && ((v142 = sub_1CC7A857C(v169), uint64_t v7 = v163, (v169 - 2838) < 3)
                  ? (int v143 = 1)
                  : (int v143 = v142),
                    v135 != -1 && v143))
              {
LABEL_319:
                int v147 = *(_DWORD *)(v144 + 20);
                if ((v147 & 0x40000000) != 0) {
                  uint64_t v148 = *(void *)(v144 - 8);
                }
                else {
                  uint64_t v148 = v144 - 32 * (v147 & 0x7FFFFFF);
                }
                uint64_t v149 = *(llvm **)(v148 + 32 * v135);
                unsigned int v150 = *(_DWORD *)(*(void *)v149 + 8);
                if ((v150 & 0xFE) == 0x12) {
                  unsigned int v150 = *(_DWORD *)(**(void **)(*(void *)v149 + 16) + 8);
                }
                unsigned int v151 = v150 >> 8;
                uint64_t v8 = v146;
                switch(v151)
                {
                  case 1u:
                    uint64_t v138 = 32;
                    goto LABEL_342;
                  case 0x50u:
                    uint64_t v138 = 35;
                    goto LABEL_342;
                  case 3u:
                    char v152 = sub_1CC89F888(v149);
                    uint64_t v7 = v163;
                    if (v152)
                    {
                      uint64_t v138 = 33;
                      goto LABEL_342;
                    }
                    break;
                }
              }
              else
              {
LABEL_334:
                uint64_t v8 = v146;
                if ((*(unsigned char *)(v153 + 33) & 0x20) != 0)
                {
                  int v154 = *(_DWORD *)(*(void *)(v29 - 56) + 36);
                  if ((v154 - 2029) <= 0x35
                    && ((1 << (v154 + 19)) & 0x21002100210021) != 0)
                  {
                    uint64_t v138 = 31;
                    goto LABEL_342;
                  }
                  uint64_t v138 = 31;
                  if ((v154 - 1682) < 0x8C || (v154 - 2177) < 0x80) {
                    goto LABEL_342;
                  }
                  uint64_t v138 = 34;
                  if ((v154 - 2471) < 8 || (v154 - 2703) < 2)
                  {
                    uint64_t v8 = v146;
                    goto LABEL_342;
                  }
                  uint64_t v7 = v163;
                  uint64_t v8 = v146;
                  if ((v154 - 1996) <= 1)
                  {
LABEL_342:
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v11 + 8))(v11, v138, 1, 1, 0, 1, 2);
                    uint64_t v7 = v163;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v29 = *(void *)(v29 + 8);
      uint64_t v156 = v27 - 24;
      if (!v27) {
        uint64_t v156 = 0;
      }
      if (v29 != v156 + 40)
      {
LABEL_350:
        if (v27 == v26) {
          goto LABEL_279;
        }
        continue;
      }
      break;
    }
    while (1)
    {
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == v26) {
        break;
      }
      uint64_t v157 = v27 - 24;
      if (!v27) {
        uint64_t v157 = 0;
      }
      uint64_t v29 = *(void *)(v157 + 48);
      if (v29 != v157 + 40) {
        goto LABEL_350;
      }
    }
LABEL_279:
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != a2 + 24);
  return 0;
}

uint64_t sub_1CC89F888(llvm *a1)
{
  UnderlyingObject = llvm::getUnderlyingObject(a1, (const llvm::Value *)6);
  if (!UnderlyingObject
    || *((unsigned __int8 *)UnderlyingObject + 16) > 3u
    || (*((unsigned char *)UnderlyingObject + 23) & 0x10) == 0)
  {
    return 1;
  }
  uint64_t v2 = ***(void ***)UnderlyingObject;
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(unsigned int *)(v2 + 168);
  if (!v4) {
    goto LABEL_10;
  }
  LODWORD(v5) = (v4 - 1) & ((UnderlyingObject >> 4) ^ (UnderlyingObject >> 9));
  uint64_t v6 = (llvm **)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != UnderlyingObject)
  {
    int v8 = 1;
    while (v7 != (llvm *)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(llvm **)(v3 + 16 * v5);
      if (v7 == UnderlyingObject)
      {
        uint64_t v6 = (llvm **)(v3 + 16 * v5);
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v6 = (llvm **)(v3 + 16 * v4);
  }
LABEL_11:
  uint64_t v10 = v6[1];
  if (*(void *)v10 != 37) {
    return 1;
  }
  uint64_t result = memcmp((char *)v10 + 16, "agc.simd_permute_emulation_scratchpad", 0x25uLL);
  if (result) {
    return 1;
  }
  return result;
}

void llvm::AlwaysInlinerPass::run()
{
}

void llvm::initializeAlwaysInlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  uint64_t v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD730, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC8A0AF0;
    v4[1] = &v2;
    uint64_t v3 = v4;
    std::__call_once(&qword_1EBCDD730, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC8A0AF0(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

void *sub_1CC8A0BB0(void *a1, unsigned int a2)
{
  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v3 = a2;
    uint64_t result = llvm::allocate_buffer(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    int v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = &result[v3];
      goto LABEL_4;
    }
  }
  uint64_t result = a1 + 1;
  uint64_t v6 = a1 + 17;
  do
LABEL_4:
    *result++ = -4096;
  while (result != v6);
  return result;
}

void sub_1CC8A0C34()
{
}

void sub_1CC8A0D20(llvm::Pass *a1)
{
  sub_1CD63B9CC(a1);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC8A0D5C(llvm::LegacyInlinerBase *a1, llvm::CallGraph *a2)
{
  return llvm::LegacyInlinerBase::removeDeadFunctions(a1, a2, 1);
}

llvm::APInt *sub_1CC8A0D64@<X0>(llvm::Function *a1@<X1>, llvm::BasicBlock *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)a1 - 4);
  if (!v4 || *(unsigned char *)(v4 + 16) || (uint64_t v5 = (uint64_t)a1, *(void *)(v4 + 24) != *((void *)a1 + 9)))
  {
    v51[0] = 0;
    char v52 = 0;
    uint64_t v6 = v51;
    uint64_t result = sub_1CC01CBE0((llvm::APInt *)"indirect call", (llvm::APInt *)v51, a3);
    if (!v52) {
      return result;
    }
    return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
  }
  uint64_t v8 = *(void *)(v4 + 112);
  if (v8 && *(_DWORD *)(v8 + 8) && (uint64_t v9 = *(void *)(v8 + 40)) != 0 && (v10 = *(_DWORD *)(v9 + 40)) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 24);
    uint64_t v12 = &unk_1EBCBE000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
    {
      uint64_t v33 = v11;
      int v32 = v10;
      int v30 = __cxa_guard_acquire(&qword_1EBCBE588);
      uint64_t v12 = &unk_1EBCBE000;
      int v10 = v32;
      uint64_t v11 = v33;
      if (v30)
      {
        unint64_t v31 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v31 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v31;
        __cxa_guard_release(&qword_1EBCBE588);
        uint64_t v12 = (void *)&unk_1EBCBE000;
        int v10 = v32;
        uint64_t v11 = v33;
      }
    }
    uint64_t v13 = v12[176];
    uint64_t v14 = __ROR8__(v13 ^ 0x7A48DC6FE7EA5090, 30);
    unint64_t v15 = 0x9DDFEA08EB382D69
        * ((v13 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                          * ((v14 - 0x574D426307C1BC2DLL) ^ (v13 - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v14 - 0x574D426307C1BC2DLL) ^ (v13 - 0x2D69957673248ED7))));
    unsigned int v16 = -348639895 * ((v15 >> 47) ^ v15);
    int v17 = v10 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v19 = v16 & v17;
      unsigned int v20 = (uint64_t *)(v11 + 24 * v19);
      uint64_t v21 = *v20;
      if (*v20 == -1)
      {
        if ("coroutine.presplit" == (char *)-1) {
          goto LABEL_28;
        }
      }
      else if (v21 == -2)
      {
        if ("coroutine.presplit" == (char *)-2) {
          goto LABEL_28;
        }
      }
      else if (v20[1] == 18)
      {
        a1 = *(llvm::Function **)(v21 + 8);
        a2 = (llvm::BasicBlock *)*(unsigned __int16 *)(v21 + 16);
        BOOL v22 = *(void *)v21 == 0x6E6974756F726F63 && a1 == (llvm::Function *)0x6C70736572702E65;
        if (v22 && a2 == 29801)
        {
LABEL_28:
          v49[0] = 0;
          char v50 = 0;
          uint64_t v6 = v49;
          uint64_t result = sub_1CC01CBE0((llvm::APInt *)"unsplited coroutine call", (llvm::APInt *)v49, a3);
          if (!v50) {
            return result;
          }
          return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
        }
      }
      if (v21 == -1) {
        break;
      }
      unsigned int v16 = i + v19;
    }
    if (!*(unsigned char *)(v4 + 16)) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(v4 + 16) == 3 && (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 0)
    {
LABEL_36:
      v47[0] = 0;
      char v48 = 0;
      uint64_t v6 = v47;
      uint64_t result = sub_1CC01CBE0((llvm::APInt *)"no definition", (llvm::APInt *)v47, a3);
      if (v48) {
        return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
      }
      return result;
    }
  }
  else
  {
LABEL_34:
    if (*(void *)(v4 + 72) == v4 + 72 && (*(unsigned char *)(v4 + 34) & 0x80) == 0) {
      goto LABEL_36;
    }
  }
  uint64_t v24 = *(void *)(v5 + 64);
  if (v24 && (*(unsigned char *)(v24 + 12) & 4) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(v5, 2) & 1) != 0)
  {
    uint64_t v25 = *(void *)(v4 + 112);
    if (!v25 || (*(unsigned char *)(v25 + 12) & 4) == 0) {
      goto LABEL_53;
    }
    uint64_t v26 = *(void *)(v5 + 64);
    if ((!v26 || (*(unsigned char *)(v26 + 15) & 8) == 0) && !llvm::CallBase::hasFnAttrOnCalledFunction(v5, 27)) {
      goto LABEL_53;
    }
    uint64_t v27 = *(void *)(v4 + 40) + 216;
    __int16 v41 = 260;
    v40[0] = v27;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v40);
    unsigned int v28 = v44 - 30;
    if (v43 < 0) {
      operator delete(__p);
    }
    if (v28 <= 0xFFFFFFFB)
    {
      v38[0] = 0;
      char v39 = 0;
      uint64_t v6 = v38;
      uint64_t result = sub_1CC01CBE0((llvm::APInt *)"noinline call site attribute", (llvm::APInt *)v38, a3);
      if (v39) {
        return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
      }
    }
    else
    {
LABEL_53:
      uint64_t v29 = (llvm::APInt *)llvm::isInlineViable((llvm *)v4, a1, a2);
      if (v29)
      {
        v36[0] = 0;
        char v37 = 0;
        uint64_t v6 = v36;
        uint64_t result = sub_1CC01CBE0(v29, (llvm::APInt *)v36, a3);
        if (v37) {
          return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
        }
      }
      else
      {
        v34[0] = 0;
        char v35 = 0;
        uint64_t v6 = v34;
        uint64_t result = sub_1CC01CB38((llvm::APInt *)"always inliner", (llvm::APInt *)v34, a3);
        if (v35) {
          return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
        }
      }
    }
  }
  else
  {
    v45[0] = 0;
    char v46 = 0;
    uint64_t v6 = v45;
    uint64_t result = sub_1CC01CBE0((llvm::APInt *)"no alwaysinline attribute", (llvm::APInt *)v45, a3);
    if (v46) {
      return (llvm::APInt *)sub_1CD494A40((uint64_t)v6);
    }
  }
  return result;
}

void *sub_1CC8A1178(void *result)
{
  int v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28) {
    int v4 = 64;
  }
  else {
    int v4 = 1 << (33 - v3);
  }
  if (v2 >= 2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    uint64_t v6 = result + 1;
    *uint64_t result = 1;
    uint64_t v7 = result + 17;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    if (v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1D25D9CD0](result[1], 8);
      goto LABEL_12;
    }
    *uint64_t result = 0;
    if (!v5) {
      return result;
    }
    uint64_t v6 = (void *)result[1];
    uint64_t v7 = &v6[v5];
    do
LABEL_18:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
LABEL_12:

  return sub_1CC8A0BB0(v1, v5);
}

void sub_1CC8A124C()
{
}

void llvm::initializeAnnotation2MetadataLegacyPass(llvm *this, llvm::PassRegistry *a2)
{
  unsigned int v2 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD740, memory_order_acquire) != -1)
  {
    v4[0] = sub_1CC8A12E8;
    v4[1] = &v2;
    unsigned int v3 = v4;
    std::__call_once(&qword_1EBCDD740, &v3, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC8A12E8()
{
}

uint64_t sub_1CC8A1380(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCDD738;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2620678;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCDD740, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC8A12E8;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCDD740, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC8A1430(uint64_t **a1)
{
  uint64_t v2 = **a1;
  if (*(void *)(v2 + 128)
    || (uint64_t result = sub_1CC421DEC(*(void *)(v2 + 72), (uint64_t)"annotation-remarks", 18), result))
  {
    int v4 = a1[14];
    unsigned int v5 = *((_DWORD *)v4 + 8);
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    if (v5 <= 0x16) {
      size_t v7 = v6;
    }
    else {
      size_t v7 = 23;
    }
    uint64_t v8 = *((unsigned int *)v4 + 2);
    if (!v8) {
      return 0;
    }
    uint64_t v9 = 0;
    int v10 = 0;
    do
      int v10 = 33 * v10 + aLlvmGlobalAnno[v9++];
    while (v7 != v9);
    uint64_t v11 = *v4;
    uint64_t v12 = *v4 + 8 * v8 + 8;
    int v13 = 1;
    int v14 = v10;
    while (1)
    {
      uint64_t v15 = v14 & (v8 - 1);
      unsigned int v16 = *(void **)(v11 + 8 * v15);
      if (v16 != (void *)-8)
      {
        if (!v16) {
          return 0;
        }
        if (*(_DWORD *)(v12 + 4 * v15) == v10
          && v7 == *v16
          && !memcmp("llvm.global.annotations", (char *)v16 + *((unsigned int *)v4 + 5), v7))
        {
          break;
        }
      }
      int v14 = v13 + v15;
      ++v13;
    }
    if (v15 != -1
      && (int)v15 != v8
      && (uint64_t v17 = *(void *)(*(void *)(v11 + 8 * (int)v15) + 8)) != 0
      && *(unsigned char *)(v17 + 16) == 3
      && (*(_DWORD *)(v17 + 32) & 0xFu) - 7 >= 2
      && (int v18 = *(_DWORD *)(v17 + 20), (v18 & 0x7FFFFFF) == 1))
    {
      if ((v18 & 0x40000000) != 0) {
        unsigned int v19 = *(uint64_t **)(v17 - 8);
      }
      else {
        unsigned int v19 = (uint64_t *)(v17 - 32);
      }
      uint64_t v20 = *v19;
      int v21 = *(_DWORD *)(*v19 + 20);
      if ((v21 & 0x40000000) != 0)
      {
        BOOL v23 = *(uint64_t **)(v20 - 8);
        uint64_t v22 = v21 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v22 = v21 & 0x7FFFFFF;
        BOOL v23 = (uint64_t *)(v20 - 32 * v22);
      }
      if (v22)
      {
        uint64_t v24 = &v23[4 * v22];
        do
        {
          uint64_t v25 = *v23;
          if (*v23) {
            BOOL v26 = *(unsigned char *)(*v23 + 16) == 9;
          }
          else {
            BOOL v26 = 0;
          }
          if (v26 && (*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 4)
          {
            uint64_t v27 = *(void *)(v25 - 96);
            if (v27 && *(unsigned char *)(v27 + 16) == 5)
            {
              uint64_t v29 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
              if (v29 >= 2)
              {
                uint64_t v30 = *(void *)(v27 - 32 * v29);
                if (v30 && *(unsigned __int8 *)(v30 + 16) <= 3u)
                {
                  int v32 = *(_DWORD *)(v30 + 20);
                  uint64_t v33 = (v32 & 0x40000000) != 0
                      ? *(llvm::ConstantDataSequential ***)(v30 - 8)
                      : (llvm::ConstantDataSequential **)(v30 - 32 * (v32 & 0x7FFFFFF));
                  uint64_t v34 = *v33;
                  int v35 = *((unsigned char *)*v33 + 16) & 0xFE;
                  if (v34 && v35 == 14)
                  {
                    uint64_t v37 = *(void *)(v25 - 128);
                    if (v37)
                    {
                      if (*(unsigned char *)(v37 + 16) == 5 && *(_WORD *)(v37 + 18) == 49)
                      {
                        uint64_t v38 = *(void *)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF));
                        if (v38 && *(unsigned char *)(v38 + 16) == 0)
                        {
                          uint64_t v40 = v38 + 72;
                          for (uint64_t i = *(void *)(v38 + 80); i != v40; uint64_t i = *(void *)(i + 8))
                          {
                            uint64_t v42 = i - 24;
                            if (!i) {
                              uint64_t v42 = 0;
                            }
                            uint64_t v43 = *(void *)(v42 + 48);
                            if (v43 != v42 + 40)
                            {
                              while (1)
                              {
                                if (v43) {
                                  uint64_t v44 = v43 - 24;
                                }
                                else {
                                  uint64_t v44 = 0;
                                }
                                RawDataValues = (unsigned __int8 *)llvm::ConstantDataSequential::getRawDataValues(v34);
                                if (v45 >= v45 - 1) {
                                  size_t v47 = v45 - 1;
                                }
                                else {
                                  size_t v47 = v45;
                                }
                                llvm::Instruction::addAnnotationMetadata(v44, RawDataValues, v47);
                                uint64_t v43 = *(void *)(v43 + 8);
                                uint64_t v48 = i - 24;
                                if (!i) {
                                  uint64_t v48 = 0;
                                }
                                if (v43 == v48 + 40) {
                                  break;
                                }
LABEL_87:
                                if (i == v40) {
                                  goto LABEL_66;
                                }
                              }
                              while (1)
                              {
                                uint64_t i = *(void *)(i + 8);
                                if (i == v40) {
                                  goto LABEL_66;
                                }
                                uint64_t v49 = i - 24;
                                if (!i) {
                                  uint64_t v49 = 0;
                                }
                                uint64_t v43 = *(void *)(v49 + 48);
                                if (v43 != v49 + 40) {
                                  goto LABEL_87;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_66:
          v23 += 4;
          uint64_t result = 1;
        }
        while (v23 != v24);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1CC8A1784()
{
}

void sub_1CC8A17C4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC8A17FC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC8A1808(uint64_t a1, uint64_t **a2)
{
  return sub_1CC8A1430(a2);
}

uint64_t llvm::ArgumentPromotionPass::isDenselyPacked(llvm::ArgumentPromotionPass *this, llvm::Type *a2, const llvm::DataLayout *a3)
{
  while (1)
  {
    unsigned int v5 = *((unsigned __int8 *)this + 8);
    if (v5 > 0x11) {
      goto LABEL_4;
    }
    if (((1 << v5) & 0xAC7F) != 0) {
      goto LABEL_10;
    }
    if (((1 << v5) & 0x30000) == 0)
    {
LABEL_4:
      if ((v5 & 0xFE) != 0x12 && v5 != 21) {
        return 0;
      }
    }
    uint64_t result = llvm::Type::isSizedDerivedType((uint64_t)this, 0);
    if (!result) {
      return result;
    }
LABEL_10:
    uint64_t v8 = sub_1CB83544C((uint64_t)a2, (uint64_t)this);
    int v10 = v9;
    uint64_t v12 = sub_1CC5CA218(a2, this);
    uint64_t result = 0;
    if (v8 != v12 || v10 != v11) {
      return result;
    }
    if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
    {
      int v13 = *((_DWORD *)this + 2);
      if (v13 != 17) {
        break;
      }
    }
    this = (llvm::ArgumentPromotionPass *)*((void *)this + 3);
  }
  if (v13 != 16) {
    return 1;
  }
  StructLayout = llvm::DataLayout::getStructLayout(a2, this);
  uint64_t v16 = *((unsigned int *)this + 3);
  if (!v16) {
    return 1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v19 = (char *)StructLayout + 16;
  uint64_t v20 = 8 * v16;
  while (1)
  {
    int v21 = *(llvm::ArgumentPromotionPass **)(*((void *)this + 2) + v17);
    uint64_t result = llvm::ArgumentPromotionPass::isDenselyPacked(v21, a2, v15);
    if (!result) {
      break;
    }
    if (v18 != 8 * *(void *)&v19[v17]) {
      return 0;
    }
    uint64_t v23 = sub_1CC5CA218(a2, v21);
    if (v22 == 1) {
    v18 += v23;
    }
    v17 += 8;
    if (v20 == v17) {
      return 1;
    }
  }
  return result;
}

uint64_t **sub_1CC8A198C(llvm::Function *this, uint64_t (*a2)(uint64_t, llvm::Function *), uint64_t a3, unsigned int a4, uint64_t a5, void *a6, char a7)
{
  int v11 = this;
  v870[32] = *MEMORY[0x1E4F143B8];
  int v13 = (uint64_t *)((char *)this + 112);
  uint64_t v12 = *((void *)this + 14);
  if (v12 && (*(unsigned char *)(v12 + 14) & 2) != 0
    || (*((_DWORD *)this + 8) & 0xFu) - 7 > 1
    || *(_DWORD *)(*((void *)this + 3) + 8) > 0xFFu
    || v12 && *(char *)(v12 + 32) < 0)
  {
    return 0;
  }
  uint64_t v842 = v844;
  uint64_t v843 = 0x1000000000;
  if ((*((unsigned char *)this + 18) & 1) == 0)
  {
    uint64_t v16 = *((void *)this + 11);
LABEL_11:
    uint64_t v17 = v16;
    goto LABEL_12;
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v16 = *((void *)v11 + 11);
  if ((*((_WORD *)v11 + 9) & 1) == 0) {
    goto LABEL_11;
  }
  llvm::Function::BuildLazyArguments(v11);
  uint64_t v17 = *((void *)v11 + 11);
LABEL_12:
  uint64_t v18 = v17 + 40 * *((void *)v11 + 12);
  if (v16 != v18)
  {
    uint64_t v19 = v16;
    do
    {
      if (*(unsigned char *)(*(void *)v16 + 8) == 15)
      {
        if (v843 >= (unint64_t)HIDWORD(v843)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v842 + v843) = v19;
        LODWORD(v843) = v843 + 1;
      }
      v16 += 40;
      v19 += 40;
    }
    while (v16 != v18);
  }
  if (v843)
  {
    for (uint64_t i = *((void *)v11 + 1); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v21 = *(void *)(i + 24);
      unsigned int v22 = *(unsigned __int8 *)(v21 + 16);
      if (v22 < 0x1C) {
        goto LABEL_39;
      }
      BOOL v23 = v22 - 33 > 0x33 || ((1 << (v22 - 33)) & 0x8000000000041) == 0;
      if (v23
        || v21 - 32 != i
        || *(void *)(v21 + 72) != *((void *)v11 + 3)
        || v22 == 84 && (*(_WORD *)(v21 + 18) & 3) == 2)
      {
        goto LABEL_39;
      }
      a7 |= *(void *)(*(void *)(v21 + 40) + 56) == (void)v11;
    }
    uint64_t v24 = (char *)v11 + 72;
    uint64_t v25 = *((void *)v11 + 10);
    uint64_t v785 = (uint64_t *)((char *)v11 + 72);
    while ((char *)v25 != v24)
    {
      if (v25) {
        BOOL v26 = (llvm::BasicBlock *)(v25 - 24);
      }
      else {
        BOOL v26 = 0;
      }
      if (llvm::BasicBlock::getTerminatingMustTailCall(v26))
      {
        int v14 = 0;
        goto LABEL_1422;
      }
      uint64_t v25 = *(void *)(v25 + 8);
      uint64_t v24 = (char *)v11 + 72;
    }
    uint64_t v27 = *((void *)v11 + 5);
    uint64_t v28 = a2(a3, v11);
    uint64_t v819 = 0;
    uint64_t v820 = 0;
    unsigned int v821 = 0;
    unsigned int v814 = v818;
    unsigned int v815 = v818;
    uint64_t v816 = 8;
    int v817 = 0;
    uint64_t v777 = v13;
    uint64_t v778 = a5;
    uint64_t v29 = (char *)v842;
    uint64_t v795 = (char *)v842 + 8 * v843;
    int v805 = (llvm::AAResults *)v28;
    unint64_t v809 = (unint64_t)v840;
    uint64_t v812 = (llvm::Type *)(v27 + 272);
    char v794 = a7 & 1;
    uint64_t v808 = v11;
    unsigned int v30 = a4;
    while (1)
    {
      unint64_t v31 = *(void **)v29;
      if (*(unsigned char *)(**(void **)v29 + 8) == 15)
      {
        uint64_t v32 = *(void *)(v31[3] + 112);
        if (v32)
        {
          int v33 = *((_DWORD *)v31 + 8);
          if ((v33 + 2) < *(_DWORD *)(v32 + 8))
          {
            uint64_t v80 = *(void *)(v32 + 8 * (v33 + 2) + 40);
            if (v80)
            {
              if ((*(unsigned char *)(v80 + 21) & 2) != 0)
              {
                int v81 = v33 + 1;
                *((void *)v11 + 14) = llvm::AttributeList::removeAttributeAtIndex(v777, **(uint64_t ***)v11, v33 + 1, 73);
                *((void *)v11 + 14) = llvm::AttributeList::addAttributeAtIndex(v777, **(uint64_t ***)v11, v81, 19);
                for (uint64_t j = *((void *)v11 + 1); j; uint64_t j = *(void *)(j + 8))
                {
                  uint64_t v83 = *(void *)(j + 24);
                  *(void *)(v83 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v83 + 64), **(uint64_t ***)v83, v81, 73);
                  *(void *)(v83 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v83 + 64), **(uint64_t ***)v83, v81, 19);
                }
              }
            }
          }
        }
      }
      int v34 = *((_DWORD *)v31 + 8);
      int v35 = (llvm::AttributeList *)(v31[3] + 112);
      uint64_t ParamByValType = llvm::AttributeList::getParamByValType(v35, v34);
      if (!ParamByValType) {
        goto LABEL_206;
      }
      uint64_t v42 = *(void *)v35;
      if (!*(void *)v35) {
        goto LABEL_206;
      }
      if ((v34 + 2) >= *(_DWORD *)(v42 + 8)) {
        goto LABEL_206;
      }
      uint64_t v43 = ParamByValType;
      uint64_t v44 = *(llvm::AttributeSetNode **)(v42 + 8 * (v34 + 2) + 40);
      if (!v44 || (unsigned __int16)llvm::AttributeSetNode::getAlignment(v44) < 0x100u) {
        goto LABEL_206;
      }
      if ((llvm::ArgumentPromotionPass::isDenselyPacked((llvm::ArgumentPromotionPass *)v43, v812, v45) & 1) == 0)
      {
        uint64_t v866 = v870;
        int v867 = v870;
        int v869 = 0;
        uint64_t v868 = 0x100000010;
        v870[0] = v31;
        unsigned int v848 = &v850;
        v849 = (void *)0x1000000000;
        uint64_t v46 = v31[1];
        v862[0] = (llvm::MDNode *)&v863;
        v862[1] = (llvm::MDNode *)0x1000000000;
        sub_1CC472E24((uint64_t)v862, v46, 0);
        unsigned int v47 = v862[1];
        if (LODWORD(v862[1]))
        {
          while (1)
          {
            uint64_t v48 = *((void *)v862[0] + --v47);
            LODWORD(v862[1]) = v47;
            unsigned int v49 = *(unsigned __int8 *)(v48 + 16);
            if (v49 > 0x3D) {
              break;
            }
            if (v49 != 60)
            {
              if (v49 != 61) {
                goto LABEL_149;
              }
              if (v849 >= (unint64_t)HIDWORD(v849)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v848 + v849) = v48;
              LODWORD(v849) = v849 + 1;
              goto LABEL_91;
            }
LABEL_92:
            if (!v47) {
              goto LABEL_101;
            }
          }
          if (v49 != 83 && v49 != 62)
          {
LABEL_149:
            BOOL v78 = 1;
            goto LABEL_150;
          }
          char v50 = (char *)v867;
          uint64_t v51 = HIDWORD(v868);
          if (v867 == v866)
          {
            if (HIDWORD(v868))
            {
              char v52 = 0;
              uint64_t v53 = 8 * HIDWORD(v868);
              BOOL v54 = v867;
              while (*v54 != v48)
              {
                if (*v54 == -2) {
                  char v52 = v54;
                }
                ++v54;
                v53 -= 8;
                if (!v53)
                {
                  if (!v52) {
                    goto LABEL_66;
                  }
                  *char v52 = v48;
                  --v869;
                  goto LABEL_90;
                }
              }
              goto LABEL_91;
            }
LABEL_66:
            unint64_t v37 = v868;
            if (HIDWORD(v868) < v868)
            {
              ++HIDWORD(v868);
              *((void *)v867 + v51) = v48;
              goto LABEL_90;
            }
          }
          else
          {
            unint64_t v37 = v868;
          }
          if (3 * (int)v37 <= (4 * (HIDWORD(v868) - v869)))
          {
            if (v37 >= 0x40) {
              LODWORD(v37) = 2 * v37;
            }
            else {
              LODWORD(v37) = 128;
            }
          }
          else if ((int)v37 - HIDWORD(v868) >= v37 >> 3)
          {
LABEL_71:
            int v55 = v37 - 1;
            unsigned int v56 = (v37 - 1) & ((v48 >> 4) ^ (v48 >> 9));
            unsigned int v57 = &v50[8 * v56];
            uint64_t v58 = *(void *)v57;
            if (*(void *)v57 != -1)
            {
              int v59 = 0;
              int v60 = 1;
              while (v58 != v48)
              {
                if (v59) {
                  BOOL v61 = 0;
                }
                else {
                  BOOL v61 = v58 == -2;
                }
                if (v61) {
                  int v59 = v57;
                }
                unsigned int v62 = v56 + v60++;
                unsigned int v56 = v62 & v55;
                unsigned int v57 = &v50[8 * (v62 & v55)];
                uint64_t v58 = *(void *)v57;
                if (*(void *)v57 == -1) {
                  goto LABEL_83;
                }
              }
              goto LABEL_91;
            }
            int v59 = 0;
LABEL_83:
            if (v59) {
              int v63 = v59;
            }
            else {
              int v63 = v57;
            }
            if (*(void *)v63 == v48) {
              goto LABEL_91;
            }
            if (*(void *)v63 == -2) {
              --v869;
            }
            else {
              ++HIDWORD(v868);
            }
            *(void *)int v63 = v48;
            unsigned int v47 = v862[1];
LABEL_90:
            sub_1CC8A6F48((uint64_t)v862, (uint64_t)v862[0] + 8 * v47, *(void *)(v48 + 8), 0);
LABEL_91:
            unsigned int v47 = v862[1];
            goto LABEL_92;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v866, v37);
          unint64_t v37 = v868;
          char v50 = (char *)v867;
          goto LABEL_71;
        }
LABEL_101:
        if (v849)
        {
          uint64_t v64 = v848;
          unsigned int v65 = v868 - 1;
          unsigned int v66 = v867 == v866 ? HIDWORD(v868) : v868;
          int v67 = (uint64_t *)((char *)v867 + 8 * v66);
          unint64_t v37 = (unint64_t)v867;
          do
          {
            uint64_t v68 = *(void *)(*v64 - 64);
            if ((void *)v37 == v866)
            {
              if (HIDWORD(v868))
              {
                uint64_t v69 = 0;
                while (*(void *)((char *)v866 + v69) != v68)
                {
                  v69 += 8;
                  if (8 * HIDWORD(v868) == v69)
                  {
                    unsigned int v70 = HIDWORD(v868);
                    goto LABEL_126;
                  }
                }
                int v76 = (uint64_t *)((char *)v866 + v69);
                unsigned int v70 = HIDWORD(v868);
                unint64_t v37 = (unint64_t)v866;
              }
              else
              {
                unsigned int v70 = 0;
LABEL_126:
                unint64_t v37 = (unint64_t)v866;
                int v76 = (uint64_t *)((char *)v866 + 8 * HIDWORD(v868));
              }
            }
            else
            {
              uint64_t v38 = v65 & ((v68 >> 4) ^ (v68 >> 9));
              uint64_t v71 = (uint64_t *)((char *)v867 + 8 * v38);
              uint64_t v39 = *v71;
              if (*v71 == -1)
              {
                uint64_t v72 = 0;
LABEL_128:
                if (v72) {
                  uint64_t v71 = v72;
                }
                uint64_t v75 = *v71;
              }
              else
              {
                uint64_t v72 = 0;
                uint64_t v40 = 1;
                while (v39 != v68)
                {
                  if (v72) {
                    BOOL v73 = 0;
                  }
                  else {
                    BOOL v73 = v39 == -2;
                  }
                  if (v73) {
                    uint64_t v72 = v71;
                  }
                  int v74 = v38 + v40;
                  uint64_t v40 = (v40 + 1);
                  uint64_t v38 = v74 & v65;
                  uint64_t v71 = (uint64_t *)((char *)v867 + 8 * v38);
                  uint64_t v39 = *v71;
                  if (*v71 == -1) {
                    goto LABEL_128;
                  }
                }
                uint64_t v75 = *(void *)(*v64 - 64);
              }
              if (v75 == v68) {
                int v76 = v71;
              }
              else {
                int v76 = v67;
              }
              unsigned int v70 = HIDWORD(v868);
              unint64_t v37 = (unint64_t)v867;
            }
            if ((void *)v37 != v866) {
              unsigned int v70 = v868;
            }
            BOOL v77 = (char *)(v37 + 8 * v70);
            BOOL v78 = v76 != (uint64_t *)v77;
            ++v64;
          }
          while (v76 == (uint64_t *)v77 && v64 != (void *)((char *)v848 + 8 * v849));
        }
        else
        {
          BOOL v78 = 0;
        }
LABEL_150:
        if ((llvm::MDNode **)v862[0] != &v863) {
          free(v862[0]);
        }
        if (v848 != &v850) {
          free(v848);
        }
        if (v867 != v866) {
          free(v867);
        }
        if (v78) {
          goto LABEL_206;
        }
      }
      if (*(unsigned char *)(v43 + 8) != 16) {
        goto LABEL_206;
      }
      uint64_t v84 = *(unsigned int *)(v43 + 12);
      if (!v30 || v84 <= v30) {
        break;
      }
LABEL_473:
      v29 += 8;
      if (v29 == v795)
      {
        if (!v820 && HIDWORD(v816) == v817)
        {
          int v14 = 0;
LABEL_1413:
          if (v815 != v814) {
            free(v815);
          }
          uint64_t v773 = v819;
          if (v821)
          {
            uint64_t v774 = 152 * v821;
            unsigned int v775 = (void *)(v819 + 24);
            do
            {
              if ((*(v775 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                uint64_t v776 = (void *)*(v775 - 2);
                if (v775 != v776) {
                  free(v776);
                }
              }
              v775 += 19;
              v774 -= 152;
            }
            while (v774);
          }
          MEMORY[0x1D25D9CD0](v773, 8);
          goto LABEL_1422;
        }
        *(void *)uint64_t v780 = *(void *)(v778 + 8);
        v781 = *(void (**)(void, llvm::Value *, uint64_t))v778;
        int v782 = *(unsigned __int8 *)(v778 + 16);
        uint64_t v290 = *((void *)v11 + 3);
        long long v822 = 0uLL;
        v823 = 0;
        uint64_t v845 = v847;
        __uint64_t n = 0x800000000;
        uint64_t v806 = *((void *)v11 + 14);
        uint64_t v801 = v290;
        if (*((unsigned char *)v11 + 18))
        {
          llvm::Function::BuildLazyArguments(v11);
          uint64_t v291 = *((void *)v11 + 11);
          int v779 = (uint64_t *)((char *)v11 + 88);
          if (*((_WORD *)v11 + 9))
          {
            llvm::Function::BuildLazyArguments(v11);
            uint64_t v292 = *((void *)v11 + 11);
LABEL_663:
            unint64_t v813 = v292 + 40 * *((void *)v11 + 12);
            if (v291 != v813)
            {
              int v293 = 0;
              LODWORD(v809) = v821;
              do
              {
                char v294 = v814;
                if (v815 == v814)
                {
                  int v295 = HIDWORD(v816);
                  unsigned int v296 = &v815[8 * HIDWORD(v816)];
                  if (HIDWORD(v816))
                  {
                    uint64_t v297 = 0;
                    while (*(void *)&v815[v297] != v291)
                    {
                      v297 += 8;
                      if (8 * HIDWORD(v816) == v297) {
                        goto LABEL_684;
                      }
                    }
                    unsigned int v296 = &v815[v297];
                  }
LABEL_684:
                  char v294 = v815;
                }
                else
                {
                  int v298 = v816 - 1;
                  unsigned int v299 = (v816 - 1) & ((v291 >> 4) ^ (v291 >> 9));
                  unsigned int v296 = &v815[8 * v299];
                  uint64_t v300 = *(void *)v296;
                  if (*(void *)v296 == -1)
                  {
                    uint64_t v301 = 0;
LABEL_739:
                    if (v301) {
                      unsigned int v296 = v301;
                    }
                    int v295 = HIDWORD(v816);
                    if (*(void *)v296 != v291) {
                      unsigned int v296 = &v815[8 * v816];
                    }
                  }
                  else
                  {
                    uint64_t v301 = 0;
                    int v302 = 1;
                    while (v300 != v291)
                    {
                      if (v301) {
                        BOOL v303 = 0;
                      }
                      else {
                        BOOL v303 = v300 == -2;
                      }
                      if (v303) {
                        uint64_t v301 = v296;
                      }
                      unsigned int v304 = v299 + v302++;
                      unsigned int v299 = v304 & v298;
                      unsigned int v296 = &v815[8 * (v304 & v298)];
                      uint64_t v300 = *(void *)v296;
                      if (*(void *)v296 == -1) {
                        goto LABEL_739;
                      }
                    }
                    int v295 = HIDWORD(v816);
                  }
                }
                if (v815 == v294) {
                  int v305 = v295;
                }
                else {
                  int v305 = v816;
                }
                if (v296 == &v815[8 * v305])
                {
                  if (sub_1CC8A8DA0(v819, v809, v291, &v866))
                  {
                    if (*(void *)(v291 + 8))
                    {
                      uint64_t v306 = sub_1CC8A8B34((uint64_t)&v819, v291);
                      uint64_t v307 = *(unsigned int *)(v306 + 16);
                      if (v307)
                      {
                        uint64_t v308 = *(void *)(v306 + 8);
                        uint64_t v309 = v308 + 32 * v307;
                        do
                        {
                          uint64_t v310 = (char *)*((void *)&v822 + 1);
                          if (*((void *)&v822 + 1) >= (unint64_t)v823)
                          {
                            uint64_t v312 = (char *)v822;
                            uint64_t v313 = (uint64_t)(*((void *)&v822 + 1) - v822) >> 3;
                            unint64_t v314 = v313 + 1;
                            if ((unint64_t)(v313 + 1) >> 61) {
                              goto LABEL_1427;
                            }
                            uint64_t v315 = (uint64_t)&v823[-v822];
                            if ((uint64_t)&v823[-v822] >> 2 > v314) {
                              unint64_t v314 = v315 >> 2;
                            }
                            if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v316 = v314;
                            }
                            if (v316)
                            {
                              if (v316 >> 61) {
                                goto LABEL_1428;
                              }
                              uint64_t v317 = (char *)operator new(8 * v316);
                            }
                            else
                            {
                              uint64_t v317 = 0;
                            }
                            char v318 = &v317[8 * v313];
                            *(void *)char v318 = *(void *)(v308 + 8);
                            uint64_t v311 = v318 + 8;
                            if (v310 != v312)
                            {
                              do
                              {
                                uint64_t v319 = *((void *)v310 - 1);
                                v310 -= 8;
                                *((void *)v318 - 1) = v319;
                                v318 -= 8;
                              }
                              while (v310 != v312);
                              uint64_t v310 = (char *)v822;
                            }
                            *(void *)&long long v822 = v318;
                            *((void *)&v822 + 1) = v311;
                            v823 = &v317[8 * v316];
                            if (v310) {
                              operator delete(v310);
                            }
                          }
                          else
                          {
                            **((void **)&v822 + 1) = *(void *)(v308 + 8);
                            uint64_t v311 = v310 + 8;
                          }
                          *((void *)&v822 + 1) = v311;
                          if (__n >= (unint64_t)HIDWORD(__n)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v845 + __n) = 0;
                          LODWORD(__n) = __n + 1;
                          v308 += 32;
                        }
                        while (v308 != v309);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v320 = *(void *)v291;
                    int v321 = (char *)*((void *)&v822 + 1);
                    if (*((void *)&v822 + 1) >= (unint64_t)v823)
                    {
                      int v323 = (char *)v822;
                      uint64_t v324 = (uint64_t)(*((void *)&v822 + 1) - v822) >> 3;
                      unint64_t v325 = v324 + 1;
                      if ((unint64_t)(v324 + 1) >> 61) {
                        goto LABEL_1427;
                      }
                      uint64_t v326 = (uint64_t)&v823[-v822];
                      if ((uint64_t)&v823[-v822] >> 2 > v325) {
                        unint64_t v325 = v326 >> 2;
                      }
                      if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v327 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v327 = v325;
                      }
                      if (v327)
                      {
                        if (v327 >> 61) {
                          goto LABEL_1428;
                        }
                        uint64_t v328 = (char *)operator new(8 * v327);
                      }
                      else
                      {
                        uint64_t v328 = 0;
                      }
                      uint64_t v329 = &v328[8 * v324];
                      *(void *)uint64_t v329 = v320;
                      uint64_t v322 = v329 + 8;
                      if (v321 != v323)
                      {
                        do
                        {
                          uint64_t v330 = *((void *)v321 - 1);
                          v321 -= 8;
                          *((void *)v329 - 1) = v330;
                          v329 -= 8;
                        }
                        while (v321 != v323);
                        int v321 = (char *)v822;
                      }
                      *(void *)&long long v822 = v329;
                      *((void *)&v822 + 1) = v322;
                      v823 = &v328[8 * v327];
                      if (v321) {
                        operator delete(v321);
                      }
                    }
                    else
                    {
                      **((void **)&v822 + 1) = v320;
                      uint64_t v322 = v321 + 8;
                    }
                    *((void *)&v822 + 1) = v322;
                    if (v806 && (v293 + 2) < *(_DWORD *)(v806 + 8)) {
                      uint64_t v331 = *(void *)(v806 + 40 + 8 * (v293 + 2));
                    }
                    else {
                      uint64_t v331 = 0;
                    }
                    if (__n >= (unint64_t)HIDWORD(__n)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *((void *)v845 + __n) = v331;
                    LODWORD(__n) = __n + 1;
                  }
                }
                else
                {
                  uint64_t v332 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(void *)(v291 + 24) + 112), *(_DWORD *)(v291 + 32));
                  sub_1CC8A8B90((uint64_t)&v822, *((uint64_t *)&v822 + 1), *(char **)(v332 + 16), (char *)(*(void *)(v332 + 16) + 8 * *(unsigned int *)(v332 + 12)), *(unsigned int *)(v332 + 12));
                  sub_1CD647728((uint64_t)&v845, (uint64_t)v845 + 8 * __n, *(unsigned int *)(v332 + 12));
                }
                v291 += 40;
                ++v293;
                int v11 = v808;
              }
              while (v291 != v813);
            }
            uint64_t v333 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(v801 + 16), v822, (uint64_t)(*((void *)&v822 + 1) - v822) >> 3, *(_DWORD *)(v801 + 8) > 0xFFu);
            char v334 = *((_DWORD *)v11 + 8) & 0xF;
            uint64_t v335 = (llvm::Type *)(*(_DWORD *)(*(void *)v11 + 8) >> 8);
            if ((*((unsigned char *)v11 + 23) & 0x10) == 0)
            {
              uint64_t v346 = 0;
              uint64_t v345 = &byte_1CFBCE98E;
              goto LABEL_756;
            }
            uint64_t v336 = ***(void ***)v11;
            uint64_t v337 = *(void *)(v336 + 152);
            uint64_t v338 = *(unsigned int *)(v336 + 168);
            if (v338)
            {
              LODWORD(v339) = (v338 - 1) & ((v11 >> 4) ^ (v11 >> 9));
              uint64_t v340 = (llvm::Function **)(v337 + 16 * v339);
              unsigned int v341 = *v340;
              if (*v340 == v11)
              {
LABEL_755:
                unsigned int v344 = v340[1];
                uint64_t v347 = *(void **)v344;
                uint64_t v345 = (char *)v344 + 16;
                uint64_t v346 = v347;
LABEL_756:
                LOWORD(v870[0]) = 261;
                uint64_t v866 = v345;
                int v867 = v346;
                BOOL v348 = operator new(0x80uLL);
                unsigned int v349 = (llvm::GlobalObject *)(v348 + 2);
                v348[7] = v348[7] & 0x38000000 | 0x40000000;
                uint64_t v786 = v348;
                *(void *)BOOL v348 = 0;
                unsigned int v350 = llvm::Function::Function((unint64_t *)v348 + 1, v333, v334, v335, (const char **)&v866, 0);
                llvm::Function::copyAttributesFrom((llvm::Function *)v350, v11);
                unsigned int v784 = (uint64_t **)v349;
                llvm::GlobalObject::copyMetadata(v349, v11, 0);
                llvm::Value::setMetadata((uint64_t ***)v11, 0, 0);
                if (v806 && (int v351 = *(_DWORD *)(v806 + 8)) != 0)
                {
                  uint64_t v352 = *(void *)(v806 + 40);
                  if (v351 != 1)
                  {
                    uint64_t v353 = *(void *)(v806 + 48);
LABEL_762:
                    *((void *)v786 + 15) = llvm::AttributeList::get(**(uint64_t ***)v11, v352, v353, v845, __n);
                    LODWORD(__n) = 0;
                    uint64_t v354 = *((void *)v11 + 5);
                    *((void *)v786 + 6) = v354;
                    if ((*((unsigned char *)v786 + 31) & 0x10) != 0)
                    {
                      uint64_t v355 = *(llvm::ValueSymbolTable **)(v354 + 112);
                      if (v355) {
                        llvm::ValueSymbolTable::reinsertValue(v355, v349);
                      }
                    }
                    uint64_t v356 = *((void *)v11 + 7);
                    *((void *)v786 + 8) = v356;
                    *((void *)v786 + 9) = (char *)v11 + 56;
                    *(void *)(v356 + 8) = v786 + 16;
                    *((void *)v11 + 7) = v786 + 16;
                    llvm::Value::takeName((int32x2_t ****)v349, v11);
                    uint64_t v866 = &v868;
                    int v867 = (void *)0x1000000000;
                    uint64_t v807 = *((void *)v11 + 5);
                    unsigned int v800 = (llvm::DataLayout *)(v807 + 272);
                    uint64_t v357 = *((void *)v11 + 1);
                    if (v357)
                    {
                      uint64_t v358 = *(void *)(v357 + 24);
                      uint64_t v796 = *(void *)(v358 + 64);
                      sub_1CC8A8E38((uint64_t)&v848, (uint64_t **)v358, 0, 0, 0);
                      unint64_t v359 = (llvm::Value *)v358;
                      int v360 = *(_DWORD *)(v358 + 20);
                      v798 = v359;
                      if (*((_WORD *)v11 + 9))
                      {
                        llvm::Function::BuildLazyArguments(v11);
                        uint64_t v361 = *((void *)v11 + 11);
                        if (*((_WORD *)v11 + 9)) {
                          llvm::Function::BuildLazyArguments(v11);
                        }
                        uint64_t v362 = *((void *)v11 + 11);
                        unint64_t v359 = v798;
                      }
                      else
                      {
                        uint64_t v361 = *v779;
                        uint64_t v362 = *v779;
                      }
                      int v363 = (uint64_t **)((char *)v359 - 32 * (v360 & 0x7FFFFFF));
                      uint64_t v789 = v362 + 40 * *((void *)v11 + 12);
                      if (v361 == v789)
                      {
                        int v364 = 0;
LABEL_1113:
                        uint64_t v551 = v798;
                        v552 = (char *)v798 - 32;
                        int v553 = v364;
                        char v554 = (uint64_t *)(v796 + 40);
                        for (unsigned int k = v553 + 2; ; ++k)
                        {
                          int v556 = *((unsigned __int8 *)v551 + 16);
                          if (v556 == 84)
                          {
                            uint64_t v557 = 0;
                          }
                          else if (v556 == 39)
                          {
                            uint64_t v551 = v798;
                            uint64_t v557 = (*((_DWORD *)v798 + 20) + 1);
                            int v11 = v808;
                          }
                          else
                          {
                            uint64_t v557 = 2;
                            int v11 = v808;
                            uint64_t v551 = v798;
                          }
                          int v558 = *((_DWORD *)v551 + 5);
                          if (v558 < 0)
                          {
                            uint64_t v562 = 0;
                            uint64_t v563 = v558 & 0x7FFFFFF;
                            if ((*((void *)v798 - 4 * v563 - 1) & 0xFFFFFFFF0) != 0) {
                              uint64_t v562 = (*((_DWORD *)v798 - 8 * v563 - 3)
                            }
                                                  - *(_DWORD *)((char *)v798
                                                              - *((void *)v798 - 4 * v563 - 1)
                                                              + -32 * v563));
                            int v11 = v808;
                            if (v363 == (uint64_t **)&v552[-32 * v557 + -32 * v562])
                            {
                              v862[0] = (llvm::MDNode *)&v863;
                              v862[1] = (llvm::MDNode *)0x100000000;
                              unint64_t v591 = *((void *)v798 - 4 * v563 - 1);
                              if ((v591 & 0xFFFFFFFF0) != 0)
                              {
                                uint64_t v592 = (v591 >> 4);
                                uint64_t v593 = v798;
                                do
                                {
                                  uint64_t v594 = *((_DWORD *)v798 + 5) & 0x7FFFFFF;
                                  int v595 = (char *)v798 - 32 * v594;
                                  uint64_t v596 = (unsigned int *)((char *)v593 - *((void *)v595 - 1) + -32 * v594);
                                  uint64_t v597 = *v596;
                                  uint64_t v598 = v596[1];
                                  uint64_t v599 = *((void *)v596 - 1);
                                  __int16 v838 = &v595[32 * v597];
                                  uint64_t v839 = v598 - v597;
                                  v840[0] = v599;
                                  sub_1CD5C74F0((uint64_t)v862, (uint64_t)&v838);
                                  uint64_t v593 = (llvm::Value *)((char *)v593 + 16);
                                  --v592;
                                }
                                while (v592);
                                int v556 = *((unsigned __int8 *)v798 + 16);
                                int v11 = v808;
                              }
LABEL_1135:
                              uint64_t v564 = (uint64_t **)*((void *)v786 + 4);
                              if (v556 == 33)
                              {
                                uint64_t v584 = *((void *)v798 - 12);
                                uint64_t v585 = *((void *)v798 - 8);
                                __int16 v841 = 257;
                                unsigned int v586 = sub_1CD4EF89C((uint64_t)v564, (uint64_t)v784, v584, v585, (uint64_t *)v866, v867, (uint64_t)v862[0], LODWORD(v862[1]), (const char **)&v838, v798);
                                uint64_t v579 = v798;
                                uint64_t v574 = (uint64_t)v586;
                                __int16 v580 = *((_WORD *)v586 + 9);
                              }
                              else
                              {
                                uint64_t v811 = (uint64_t *)v866;
                                uint64_t v565 = v867;
                                uint64_t v566 = LODWORD(v862[1]);
                                __int16 v841 = 257;
                                if (LODWORD(v862[1]))
                                {
                                  int v568 = 0;
                                  uint64_t v600 = 48 * LODWORD(v862[1]);
                                  uint64_t v567 = v862[0];
                                  uint64_t v601 = (void *)((char *)v862[0] + 32);
                                  do
                                  {
                                    v568 += (*v601 - *(v601 - 1)) >> 3;
                                    v601 += 6;
                                    v600 -= 48;
                                  }
                                  while (v600);
                                }
                                else
                                {
                                  uint64_t v567 = v862[0];
                                  int v568 = 0;
                                }
                                uint64_t v569 = (v568 + v867 + 1);
                                uint64_t v570 = (16 * LODWORD(v862[1]));
                                if (v570) {
                                  uint64_t v571 = (16 * LODWORD(v862[1])) | 8u;
                                }
                                else {
                                  uint64_t v571 = 0;
                                }
                                int v572 = (char *)operator new(v571 + 32 * v569 + 80);
                                BOOL v573 = &v572[v571];
                                uint64_t v574 = (uint64_t)&v572[32 * v569 + v571];
                                *(_DWORD *)(v574 + 20) = v569 & 0x7FFFFFF | ((v570 != 0) << 31) | *(_DWORD *)(v574 + 20) & 0x38000000;
                                if (v569)
                                {
                                  do
                                  {
                                    *(void *)BOOL v573 = 0;
                                    *((void *)v573 + 1) = 0;
                                    *((void *)v573 + 2) = 0;
                                    *((void *)v573 + 3) = v574;
                                    v573 += 32;
                                  }
                                  while (v573 != (char *)v574);
                                }
                                if (v570) {
                                  *(void *)&v572[v570] = v570;
                                }
                                int v575 = 0;
                                if (v566)
                                {
                                  uint64_t v602 = 48 * v566;
                                  int v603 = (void *)((char *)v567 + 32);
                                  do
                                  {
                                    v575 += (*v603 - *(v603 - 1)) >> 3;
                                    v603 += 6;
                                    v602 -= 48;
                                  }
                                  while (v602);
                                }
                                *(void *)uint64_t v574 = *v564[2];
                                *(void *)(v574 + 8) = 0;
                                int v576 = *(_DWORD *)(v574 + 20) & 0xC0000000 | (v575 + v565 + 1) & 0x7FFFFFF;
                                *(_DWORD *)(v574 + 16) = 84;
                                *(_DWORD *)(v574 + 20) = v576;
                                *(_OWORD *)(v574 + 24) = 0u;
                                uint64_t v577 = v574 + 24;
                                *(_OWORD *)(v574 + 40) = 0u;
                                *(_DWORD *)(v574 + 56) = 0;
                                uint64_t v578 = v798;
                                if (v798)
                                {
                                  uint64_t v587 = *((void *)v798 + 5);
                                  *(void *)(v574 + 40) = v587;
                                  *(_WORD *)(v587 + 18) &= ~0x8000u;
                                  if ((*(unsigned char *)(v574 + 23) & 0x10) != 0)
                                  {
                                    uint64_t v589 = *(void *)(v587 + 56);
                                    if (v589)
                                    {
                                      uint64_t v590 = *(llvm::ValueSymbolTable **)(v589 + 104);
                                      if (v590)
                                      {
                                        llvm::ValueSymbolTable::reinsertValue(v590, (llvm::Value *)v574);
                                        uint64_t v578 = v798;
                                      }
                                    }
                                  }
                                  uint64_t v588 = *((void *)v578 + 3);
                                  *(void *)(v574 + 24) = v588;
                                  *(void *)(v574 + 32) = (char *)v578 + 24;
                                  *(void *)(v588 + 8) = v577;
                                  *((void *)v578 + 3) = v577;
                                }
                                *(void *)(v574 + 64) = 0;
                                llvm::CallInst::init((uint64_t ***)v574, v564, v784, v811, v565, (uint64_t)v567, v566, (const char **)&v838);
                                uint64_t v579 = v798;
                                __int16 v580 = *(_WORD *)(v574 + 18) & 0xFFFC | *((_WORD *)v798 + 9) & 3;
                                *(_WORD *)(v574 + 18) = v580;
                                int v11 = v808;
                              }
                              *(_WORD *)(v574 + 18) = *((_WORD *)v579 + 9) & 0xFFC | v580 & 0xF003;
                              if (v796 && (int v581 = *(_DWORD *)(v796 + 8)) != 0)
                              {
                                uint64_t v582 = *v554;
                                if (v581 != 1)
                                {
                                  uint64_t v583 = *(void *)(v796 + 48);
                                  goto LABEL_1154;
                                }
                              }
                              else
                              {
                                uint64_t v582 = 0;
                              }
                              uint64_t v583 = 0;
LABEL_1154:
                              *(void *)(v574 + 64) = llvm::AttributeList::get(**(uint64_t ***)v11, v582, v583, v845, __n);
                              __int16 v838 = (void *)2;
                              llvm::Instruction::copyMetadata(v574, (uint64_t)v798, (int *)&v838, 2);
                              LODWORD(v867) = 0;
                              LODWORD(__n) = 0;
                              if (v782) {
                                v781(*(void *)v780, v798, v574);
                              }
                              if (*((void *)v798 + 1))
                              {
                                llvm::Value::doRAUW(v798, (llvm::Value *)v574, (llvm::Value *)1);
                                llvm::Value::takeName((int32x2_t ****)v574, v798);
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                            }
                          }
                          else if (v363 == (uint64_t **)&v552[-32 * v557])
                          {
                            v862[0] = (llvm::MDNode *)&v863;
                            v862[1] = (llvm::MDNode *)0x100000000;
                            goto LABEL_1135;
                          }
                          uint64_t v559 = v363;
                          uint64_t v560 = *v363;
                          if (v867 >= (unint64_t)HIDWORD(v867)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v866 + v867) = v560;
                          LODWORD(v867) = v867 + 1;
                          uint64_t v551 = v798;
                          if (v796 && k < *(_DWORD *)(v796 + 8)) {
                            uint64_t v561 = v554[k];
                          }
                          else {
                            uint64_t v561 = 0;
                          }
                          if (__n >= (unint64_t)HIDWORD(__n)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v845 + __n) = v561;
                          LODWORD(__n) = __n + 1;
                          int v363 = v559 + 4;
                        }
                      }
                      int v364 = 0;
                      while (1)
                      {
                        char v365 = sub_1CC8A8DA0(v819, v821, v361, v862);
                        uint64_t v366 = v814;
                        uint64_t v367 = v814;
                        if (v365) {
                          goto LABEL_803;
                        }
                        if (v815 == v814)
                        {
                          int v368 = HIDWORD(v816);
                          unsigned int v369 = &v815[8 * HIDWORD(v816)];
                          if (HIDWORD(v816))
                          {
                            uint64_t v370 = 0;
                            while (*(void *)&v815[v370] != v361)
                            {
                              v370 += 8;
                              if (8 * HIDWORD(v816) == v370) {
                                goto LABEL_793;
                              }
                            }
                            unsigned int v369 = &v815[v370];
                          }
LABEL_793:
                          uint64_t v367 = v815;
                        }
                        else
                        {
                          int v371 = v816 - 1;
                          unsigned int v372 = (v816 - 1) & ((v361 >> 4) ^ (v361 >> 9));
                          unsigned int v369 = &v815[8 * v372];
                          uint64_t v373 = *(void *)v369;
                          if (*(void *)v369 == -1)
                          {
                            BOOL v374 = 0;
LABEL_795:
                            if (v374) {
                              unsigned int v369 = v374;
                            }
                            int v368 = HIDWORD(v816);
                            if (*(void *)v369 != v361) {
                              unsigned int v369 = &v815[8 * v816];
                            }
                          }
                          else
                          {
                            BOOL v374 = 0;
                            int v375 = 1;
                            while (v373 != v361)
                            {
                              if (v374) {
                                BOOL v376 = 0;
                              }
                              else {
                                BOOL v376 = v373 == -2;
                              }
                              if (v376) {
                                BOOL v374 = v369;
                              }
                              unsigned int v377 = v372 + v375++;
                              unsigned int v372 = v377 & v371;
                              unsigned int v369 = &v815[8 * (v377 & v371)];
                              uint64_t v373 = *(void *)v369;
                              if (*(void *)v369 == -1) {
                                goto LABEL_795;
                              }
                            }
                            int v368 = HIDWORD(v816);
                          }
                          uint64_t v367 = v814;
                        }
                        if (v815 != v367) {
                          int v368 = v816;
                        }
                        if (v369 == &v815[8 * v368])
                        {
                          if (v867 >= (unint64_t)HIDWORD(v867)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v866 + v867) = *v363;
                          LODWORD(v867) = v867 + 1;
                          if (v796 && (v364 + 2) < *(_DWORD *)(v796 + 8)) {
                            uint64_t v389 = *(void *)(v796 + 40 + 8 * (v364 + 2));
                          }
                          else {
                            uint64_t v389 = 0;
                          }
                          if (__n >= (unint64_t)HIDWORD(__n)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v845 + __n) = v389;
                          LODWORD(__n) = __n + 1;
                        }
                        else
                        {
LABEL_803:
                          if (v815 == v367)
                          {
                            int v378 = HIDWORD(v816);
                            uint64_t v379 = &v815[8 * HIDWORD(v816)];
                            if (HIDWORD(v816))
                            {
                              uint64_t v380 = 0;
                              while (*(void *)&v815[v380] != v361)
                              {
                                v380 += 8;
                                if (8 * HIDWORD(v816) == v380) {
                                  goto LABEL_828;
                                }
                              }
                              uint64_t v379 = &v815[v380];
                            }
LABEL_828:
                            uint64_t v366 = v815;
                          }
                          else
                          {
                            int v381 = v816;
                            int v382 = v816 - 1;
                            unsigned int v383 = (v816 - 1) & ((v361 >> 4) ^ (v361 >> 9));
                            uint64_t v379 = &v815[8 * v383];
                            uint64_t v384 = *(void *)v379;
                            if (*(void *)v379 == -1)
                            {
                              int v385 = 0;
LABEL_1099:
                              if (v385) {
                                uint64_t v379 = v385;
                              }
                              int v378 = HIDWORD(v816);
                              if (v815 == v814) {
                                int v381 = HIDWORD(v816);
                              }
                              uint64_t v550 = &v815[8 * v381];
                              if (*(void *)v379 != v361) {
                                uint64_t v379 = v550;
                              }
                            }
                            else
                            {
                              int v385 = 0;
                              int v386 = 1;
                              while (v384 != v361)
                              {
                                if (v385) {
                                  BOOL v387 = 0;
                                }
                                else {
                                  BOOL v387 = v384 == -2;
                                }
                                if (v387) {
                                  int v385 = v379;
                                }
                                unsigned int v388 = v383 + v386++;
                                unsigned int v383 = v388 & v382;
                                uint64_t v379 = &v815[8 * (v388 & v382)];
                                uint64_t v384 = *(void *)v379;
                                if (*(void *)v379 == -1) {
                                  goto LABEL_1099;
                                }
                              }
                              int v378 = HIDWORD(v816);
                            }
                          }
                          if (v815 == v366) {
                            int v390 = v378;
                          }
                          else {
                            int v390 = v816;
                          }
                          uint64_t v810 = v363;
                          if (v379 != &v815[8 * v390])
                          {
                            uint64_t v392 = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*(void *)(v361 + 24) + 112), *(_DWORD *)(v361 + 32));
                            uint64_t v859 = 0;
                            uint64_t v858 = 0;
                            uint64_t v393 = ***(void ***)v11;
                            int v394 = *(llvm::ConstantInt **)(v393 + 1960);
                            unsigned int v395 = *(_DWORD *)(v393 + 1968);
                            LODWORD(v862[1]) = v395 >> 8;
                            if (v395 >> 8 >= 0x41) {
                              operator new[]();
                            }
                            v862[0] = 0;
                            int v396 = (const char *)llvm::ConstantInt::get(v394, (llvm::LLVMContext *)v862, v391);
                            if (LODWORD(v862[1]) >= 0x41 && v862[0]) {
                              MEMORY[0x1D25D9CB0](v862[0], 0x1000C8000313F17);
                            }
                            uint64_t v858 = (uint64_t)v396;
                            uint64_t v859 = 0;
                            StructLayout = llvm::DataLayout::getStructLayout(v800, (llvm::StructType *)v392);
                            char Alignment = 0;
                            uint64_t v400 = *(void *)(*(void *)(v361 + 24) + 112);
                            if (v400)
                            {
                              unsigned int v401 = *(_DWORD *)(v361 + 32) + 2;
                              if (v401 < *(_DWORD *)(v400 + 8)
                                && (unsigned int v402 = *(llvm::AttributeSetNode **)(v400 + 8 * v401 + 40)) != 0)
                              {
                                char Alignment = llvm::AttributeSetNode::getAlignment(v402);
                              }
                              else
                              {
                                char Alignment = 0;
                              }
                            }
                            int v790 = v364;
                            uint64_t v793 = v361;
                            uint64_t v507 = *(unsigned int *)(v392 + 12);
                            if (v507)
                            {
                              uint64_t v508 = 0;
                              uint64_t v509 = (char *)StructLayout + 16;
                              uint64_t v510 = 1 << Alignment;
                              do
                              {
                                uint64_t v511 = ***(void ***)v11;
                                uint64_t v512 = *(llvm::ConstantInt **)(v511 + 1960);
                                unint64_t v513 = *(unsigned int *)(v511 + 1968);
                                LODWORD(v862[1]) = v513 >> 8;
                                if (v513 >> 8 > 0x40) {
                                  operator new[]();
                                }
                                if (v513 <= 0xFF) {
                                  unint64_t v514 = 0;
                                }
                                else {
                                  unint64_t v514 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v513) + 63);
                                }
                                v862[0] = (llvm::MDNode *)(v514 & v508);
                                unint64_t v515 = (llvm::MDNode **)llvm::ConstantInt::get(v512, (llvm::LLVMContext *)v862, v397);
                                if (LODWORD(v862[1]) >= 0x41 && v862[0]) {
                                  MEMORY[0x1D25D9CB0](v862[0], 0x1000C8000313F17);
                                }
                                uint64_t v859 = v515;
                                uint64_t v516 = *v363;
                                if ((*((unsigned char *)*v363 + 23) & 0x10) != 0)
                                {
                                  uint64_t v517 = **(void **)*v516;
                                  uint64_t v518 = *(void *)(v517 + 152);
                                  uint64_t v519 = *(unsigned int *)(v517 + 168);
                                  if (v519)
                                  {
                                    LODWORD(v520) = (v519 - 1) & ((v516 >> 4) ^ (v516 >> 9));
                                    uint64_t v521 = (uint64_t **)(v518 + 16 * v520);
                                    uint64_t v522 = *v521;
                                    if (*v521 != v516)
                                    {
                                      int v523 = 1;
                                      do
                                      {
                                        if (v522 == (uint64_t *)-4096) {
                                          goto LABEL_1069;
                                        }
                                        int v524 = v520 + v523++;
                                        uint64_t v520 = v524 & (v519 - 1);
                                        uint64_t v522 = *(uint64_t **)(v518 + 16 * v520);
                                      }
                                      while (v522 != v516);
                                      uint64_t v521 = (uint64_t **)(v518 + 16 * v520);
                                    }
                                  }
                                  else
                                  {
LABEL_1069:
                                    uint64_t v521 = (uint64_t **)(v518 + 16 * v519);
                                  }
                                  uint64_t v525 = v521[1];
                                  uint64_t v528 = *v525;
                                  int v527 = (char *)(v525 + 2);
                                  uint64_t v526 = v528;
                                }
                                else
                                {
                                  uint64_t v526 = 0;
                                  int v527 = &byte_1CFBCE98E;
                                }
                                __int16 v841 = 773;
                                __int16 v838 = v527;
                                uint64_t v839 = v526;
                                v840[0] = ".";
                                v862[0] = (llvm::MDNode *)&v838;
                                unint64_t v813 = v813 & 0xFFFFFFFF00000000 | v508;
                                unsigned int v863 = (llvm::MDNode *)v813;
                                __int16 v865 = 2050;
                                uint64_t v529 = sub_1CC27CEC0((uint64_t *)&v848, v392, v516, &v858, 2, (uint64_t)v862);
                                uint64_t v530 = v529;
                                uint64_t v531 = *(void *)&v509[8 * v508];
                                uint64_t v532 = *(void *)(*(void *)(v392 + 16) + 8 * v508);
                                if ((*(unsigned char *)(v529 + 23) & 0x10) != 0)
                                {
                                  uint64_t v533 = ***(void ***)v529;
                                  uint64_t v534 = *(void *)(v533 + 152);
                                  uint64_t v535 = *(unsigned int *)(v533 + 168);
                                  if (v535)
                                  {
                                    LODWORD(v536) = (v535 - 1) & ((v529 >> 4) ^ (v529 >> 9));
                                    uint64_t v537 = (uint64_t *)(v534 + 16 * v536);
                                    uint64_t v538 = *v537;
                                    if (*v537 != v529)
                                    {
                                      int v539 = 1;
                                      do
                                      {
                                        if (v538 == -4096) {
                                          goto LABEL_1078;
                                        }
                                        int v540 = v536 + v539++;
                                        uint64_t v536 = v540 & (v535 - 1);
                                        uint64_t v538 = *(void *)(v534 + 16 * v536);
                                      }
                                      while (v538 != v529);
                                      uint64_t v537 = (uint64_t *)(v534 + 16 * v536);
                                    }
                                  }
                                  else
                                  {
LABEL_1078:
                                    uint64_t v537 = (uint64_t *)(v534 + 16 * v535);
                                  }
                                  int v541 = (void *)v537[1];
                                  uint64_t v544 = *v541;
                                  unsigned int v543 = (char *)(v541 + 2);
                                  uint64_t v542 = v544;
                                }
                                else
                                {
                                  uint64_t v542 = 0;
                                  unsigned int v543 = &byte_1CFBCE98E;
                                }
                                __int16 v841 = 773;
                                unint64_t v545 = 63 - __clz((v531 | v510) & -(v531 | v510));
                                __int16 v838 = v543;
                                uint64_t v839 = v542;
                                v840[0] = ".val";
                                unsigned int v546 = operator new(0x60uLL);
                                v546[13] = v546[13] & 0x38000000 | 1;
                                int v547 = (llvm::Instruction *)(v546 + 8);
                                *(void *)unsigned int v546 = 0;
                                *((void *)v546 + 1) = 0;
                                *((void *)v546 + 2) = 0;
                                *((void *)v546 + 3) = v546 + 8;
                                __int16 v865 = 257;
                                llvm::LoadInst::LoadInst((llvm::Value *)(v546 + 8), v532, v530, (const char **)v862, 0, v545, 0);
                                (*(void (**)(uint64_t, llvm::Instruction *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v547, &v838, v853, v854);
                                if (v849)
                                {
                                  uint64_t v548 = (llvm::MDNode **)v848;
                                  unsigned __int32 v549 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v547, *(_DWORD *)v548, v548[1]);
                                    v548 += 2;
                                  }
                                  while (v548 != v549);
                                }
                                int v11 = v808;
                                if (v867 >= (unint64_t)HIDWORD(v867)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *((void *)v866 + v867) = v547;
                                LODWORD(v867) = v867 + 1;
                                if (__n >= (unint64_t)HIDWORD(__n)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                int v363 = v810;
                                *((void *)v845 + __n) = 0;
                                LODWORD(__n) = __n + 1;
                                ++v508;
                              }
                              while (v508 != v507);
                            }
LABEL_1095:
                            uint64_t v361 = v793;
                            int v364 = v790;
                            goto LABEL_1096;
                          }
                          if (*(void *)(v361 + 8))
                          {
                            uint64_t v403 = *v363;
                            uint64_t v404 = sub_1CC8A8B34((uint64_t)&v819, v361);
                            uint64_t v405 = *(unsigned int *)(v404 + 16);
                            if (v405)
                            {
                              int v790 = v364;
                              uint64_t v793 = v361;
                              uint64_t v406 = *(uint64_t **)(v404 + 8);
                              unsigned int v803 = &v406[4 * v405];
                              while (1)
                              {
                                uint64_t v407 = *v403;
                                uint64_t v408 = *(unsigned int *)(*v403 + 8);
                                if ((*(_DWORD *)(*v403 + 8) & 0xFE) == 0x12)
                                {
                                  uint64_t v408 = *(unsigned int *)(**(void **)(v407 + 16) + 8);
                                  unsigned int v409 = *(_DWORD *)(**(void **)(v407 + 16) + 8);
                                }
                                else
                                {
                                  unsigned int v409 = *(_DWORD *)(*v403 + 8);
                                }
                                if (v409 < 0x100) {
                                  goto LABEL_854;
                                }
                                unsigned int v410 = v409 >> 8;
                                uint64_t v411 = *(unsigned int *)(v807 + 512);
                                uint64_t v412 = *(void *)(v807 + 504);
                                if (v411)
                                {
                                  uint64_t v412 = *(void *)(v807 + 504);
                                  unint64_t v413 = *(unsigned int *)(v807 + 512);
                                  do
                                  {
                                    unint64_t v414 = v413 >> 1;
                                    uint64_t v415 = v412 + 16 * (v413 >> 1);
                                    unsigned int v416 = *(_DWORD *)(v415 + 8);
                                    uint64_t v417 = v415 + 16;
                                    v413 += ~(v413 >> 1);
                                    if (v416 < v410) {
                                      uint64_t v412 = v417;
                                    }
                                    else {
                                      unint64_t v413 = v414;
                                    }
                                  }
                                  while (v413);
                                }
                                if (v412 == *(void *)(v807 + 504) + 16 * v411 || *(_DWORD *)(v412 + 8) != v410) {
LABEL_854:
                                }
                                  uint64_t v412 = *(void *)(v807 + 504);
                                uint64_t v419 = *v406;
                                uint64_t v418 = (llvm::PointerType *)v406[1];
                                unsigned int v420 = *(_DWORD *)(v412 + 12);
                                LODWORD(__p) = v420;
                                if (v420 > 0x40) {
                                  operator new[]();
                                }
                                unint64_t v421 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v420;
                                if (!v420) {
                                  unint64_t v421 = 0;
                                }
                                __src = (void *)(v421 & v419);
                                uint64_t v422 = (llvm::Type *)(v408 >> 8);
                                uint64_t v423 = *v403;
                                if (*v403 && *(unsigned char *)(v423 + 8) == 15 && !*(void *)(v423 + 24))
                                {
                                  uint64_t v433 = (unsigned __int8 *)v403;
                                  goto LABEL_962;
                                }
                                BOOL v424 = **(unsigned __int8 ***)(v423 + 16);
                                if (__src || v424 != (unsigned __int8 *)v418) {
                                  break;
                                }
                                uint64_t v408 = (uint64_t)v403;
LABEL_993:
                                if (v420 >= 0x41 && __src) {
                                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                                }
                                char v479 = *((unsigned char *)v406 + 16);
                                if ((*((unsigned char *)v403 + 23) & 0x10) != 0)
                                {
                                  uint64_t v480 = **(void **)*v403;
                                  uint64_t v481 = *(void *)(v480 + 152);
                                  uint64_t v482 = *(unsigned int *)(v480 + 168);
                                  if (v482)
                                  {
                                    LODWORD(v483) = (v482 - 1) & ((v403 >> 4) ^ (v403 >> 9));
                                    BOOL v484 = (uint64_t **)(v481 + 16 * v483);
                                    unsigned int v485 = *v484;
                                    if (*v484 != v403)
                                    {
                                      int v486 = 1;
                                      do
                                      {
                                        if (v485 == (uint64_t *)-4096) {
                                          goto LABEL_1003;
                                        }
                                        int v487 = v483 + v486++;
                                        uint64_t v483 = v487 & (v482 - 1);
                                        unsigned int v485 = *(uint64_t **)(v481 + 16 * v483);
                                      }
                                      while (v485 != v403);
                                      BOOL v484 = (uint64_t **)(v481 + 16 * v483);
                                    }
                                  }
                                  else
                                  {
LABEL_1003:
                                    BOOL v484 = (uint64_t **)(v481 + 16 * v482);
                                  }
                                  unint64_t v488 = v484[1];
                                  uint64_t v491 = *v488;
                                  int v490 = (char *)(v488 + 2);
                                  uint64_t v489 = v491;
                                }
                                else
                                {
                                  uint64_t v489 = 0;
                                  int v490 = &byte_1CFBCE98E;
                                }
                                __int16 v841 = 773;
                                __int16 v838 = v490;
                                uint64_t v839 = v489;
                                v840[0] = ".val";
                                uint64_t v492 = operator new(0x60uLL);
                                v492[13] = v492[13] & 0x38000000 | 1;
                                uint64_t v493 = (llvm::Instruction *)(v492 + 8);
                                *(void *)uint64_t v492 = 0;
                                *((void *)v492 + 1) = 0;
                                *((void *)v492 + 2) = 0;
                                *((void *)v492 + 3) = v492 + 8;
                                __int16 v865 = 257;
                                llvm::LoadInst::LoadInst((llvm::Value *)(v492 + 8), (uint64_t)v418, v408, (const char **)v862, 0, v479, 0);
                                (*(void (**)(uint64_t, _DWORD *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v492 + 8, &v838, v853, v854);
                                if (v849)
                                {
                                  unsigned int v496 = (llvm::MDNode **)v848;
                                  int v497 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                  do
                                  {
                                    llvm::Instruction::setMetadata(v493, *(_DWORD *)v496, v496[1]);
                                    v496 += 2;
                                  }
                                  while (v496 != v497);
                                }
                                unsigned int v494 = (uint64_t ***)v406[3];
                                if (v494)
                                {
                                  llvm::Instruction::getAAMetadata(v494, v862);
                                  if (v862[0] || *((void *)v492 + 10) || (*((unsigned char *)v492 + 55) & 0x20) != 0) {
                                    llvm::Value::setMetadata((uint64_t ***)v493, 1, v862[0]);
                                  }
                                  if (v862[1] || *((void *)v492 + 10) || (*((unsigned char *)v492 + 55) & 0x20) != 0) {
                                    llvm::Value::setMetadata((uint64_t ***)v493, 5, v862[1]);
                                  }
                                  if (v863 || *((void *)v492 + 10) || (*((unsigned char *)v492 + 55) & 0x20) != 0) {
                                    llvm::Value::setMetadata((uint64_t ***)v493, 7, v863);
                                  }
                                  if (v864 || *((void *)v492 + 10) || (*((unsigned char *)v492 + 55) & 0x20) != 0) {
                                    llvm::Value::setMetadata((uint64_t ***)v493, 8, v864);
                                  }
                                  uint64_t v495 = v406[3];
                                  *(_OWORD *)unsigned int v862 = xmmword_1CFB272E0;
                                  unsigned int v863 = (llvm::MDNode *)0x1D00000011;
                                  llvm::Instruction::copyMetadata((uint64_t)v493, v495, (int *)v862, 6);
                                }
                                if (v867 >= (unint64_t)HIDWORD(v867)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *((void *)v866 + v867) = v493;
                                LODWORD(v867) = v867 + 1;
                                if (__n >= (unint64_t)HIDWORD(__n)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *((void *)v845 + __n) = 0;
                                LODWORD(__n) = __n + 1;
                                v406 += 4;
                                if (v406 == v803)
                                {
                                  int v363 = v810;
                                  goto LABEL_1095;
                                }
                              }
                              unsigned int v426 = v424[8];
                              if (v426 > 0x11) {
                                goto LABEL_1431;
                              }
                              if (((1 << v426) & 0xAC7F) != 0) {
                                goto LABEL_867;
                              }
                              if (((1 << v426) & 0x30000) == 0)
                              {
LABEL_1431:
                                BOOL v456 = (v426 & 0xFE) == 0x12 || v426 == 21;
                                uint64_t v433 = (unsigned __int8 *)v403;
                                if (!v456) {
                                  goto LABEL_962;
                                }
                              }
                              int isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)v424, 0);
                              unsigned int v420 = __p;
                              uint64_t v433 = (unsigned __int8 *)v403;
                              if (!isSizedDerivedType)
                              {
LABEL_962:
                                uint64_t v463 = __src;
                                if (v420 < 0x41) {
                                  goto LABEL_970;
                                }
                                int v464 = 0;
                                int64_t v465 = ((unint64_t)v420 + 63) >> 6;
                                do
                                {
                                  BOOL v226 = v465-- < 1;
                                  if (v226) {
                                    break;
                                  }
                                  unint64_t v466 = *((void *)__src + v465);
                                  v464 += __clz(v466);
                                }
                                while (!v466);
                                unsigned int v467 = v420 | 0xFFFFFFC0;
                                if ((v420 & 0x3F) == 0) {
                                  unsigned int v467 = 0;
                                }
                                if (v420 - v464 - v467 > 0x40) {
                                  goto LABEL_971;
                                }
                                uint64_t v463 = *(void **)__src;
LABEL_970:
                                if (v463)
                                {
LABEL_971:
                                  unint64_t v468 = llvm::PointerType::get((llvm::PointerType *)(*(void *)v855 + 1912), v422);
                                  __int16 v841 = 257;
                                  if (*(void *)v433 != v468)
                                  {
                                    if (v433[16] <= 0x14u)
                                    {
                                      uint64_t v433 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v856 + 224))(v856, 49, v433, v468);
                                      if (v433) {
                                        BOOL v472 = v433[16] >= 0x1Cu;
                                      }
                                      else {
                                        BOOL v472 = 0;
                                      }
                                      if (v472)
                                      {
                                        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v433, &v838, v853, v854);
                                        if (v849)
                                        {
                                          char v503 = (llvm::MDNode **)v848;
                                          int v504 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                          do
                                          {
                                            llvm::Instruction::setMetadata((llvm::Instruction *)v433, *(_DWORD *)v503, v503[1]);
                                            v503 += 2;
                                          }
                                          while (v503 != v504);
                                        }
                                        int v11 = v808;
                                      }
                                    }
                                    else
                                    {
                                      __int16 v865 = 257;
                                      uint64_t v433 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v433, v468, (const char **)v862, 0);
                                      (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v433, &v838, v853, v854);
                                      if (v849)
                                      {
                                        unsigned int v470 = (llvm::MDNode **)v848;
                                        uint64_t v471 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v433, *(_DWORD *)v470, v470[1]);
                                          v470 += 2;
                                        }
                                        while (v470 != v471);
                                      }
                                    }
                                  }
                                  uint64_t v473 = *(void *)v855 + 1912;
                                  uint64_t v474 = (const char *)llvm::ConstantInt::get(v855, (llvm::LLVMContext *)&__src, v469);
                                  __int16 v865 = 257;
                                  uint64_t v433 = (unsigned __int8 *)sub_1CB930F7C((uint64_t *)&v848, v473, (uint64_t *)v433, v474, (uint64_t)v862);
                                }
                                unint64_t v475 = llvm::PointerType::get(v418, v422);
                                __int16 v841 = 257;
                                if (*(void *)v433 != v475)
                                {
                                  if (v433[16] <= 0x14u)
                                  {
                                    uint64_t v433 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v856 + 224))(v856, 49, v433, v475);
                                    if (v433) {
                                      BOOL v478 = v433[16] >= 0x1Cu;
                                    }
                                    else {
                                      BOOL v478 = 0;
                                    }
                                    if (v478)
                                    {
                                      (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v433, &v838, v853, v854);
                                      if (v849)
                                      {
                                        int v501 = (llvm::MDNode **)v848;
                                        int v502 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                        do
                                        {
                                          llvm::Instruction::setMetadata((llvm::Instruction *)v433, *(_DWORD *)v501, v501[1]);
                                          v501 += 2;
                                        }
                                        while (v501 != v502);
                                      }
                                      int v11 = v808;
                                    }
                                  }
                                  else
                                  {
                                    __int16 v865 = 257;
                                    uint64_t v433 = (unsigned __int8 *)llvm::CastInst::Create(49, (uint64_t)v433, v475, (const char **)v862, 0);
                                    (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v433, &v838, v853, v854);
                                    if (v849)
                                    {
                                      v476 = (llvm::MDNode **)v848;
                                      uint64_t v477 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v433, *(_DWORD *)v476, v476[1]);
                                        v476 += 2;
                                      }
                                      while (v476 != v477);
                                    }
                                  }
                                }
                                unsigned int v420 = __p;
                                uint64_t v408 = (uint64_t)v433;
                                goto LABEL_993;
                              }
LABEL_867:
                              unsigned int v837 = v420;
                              if (v420 > 0x40) {
                                operator new[]();
                              }
                              BOOL v836 = __src;
                              int v835 = (llvm::Type *)v424;
                              llvm::DataLayout::getGEPIndicesForOffset(v800, &v835, (llvm::APInt *)&v836, (uint64_t)v862);
                              int v428 = v836;
                              if (v837 >= 0x41)
                              {
                                int v429 = 0;
                                int64_t v430 = ((unint64_t)v837 + 63) >> 6;
                                do
                                {
                                  BOOL v226 = v430-- < 1;
                                  if (v226) {
                                    break;
                                  }
                                  unint64_t v431 = v836[v430];
                                  v429 += __clz(v431);
                                }
                                while (!v431);
                                unsigned int v432 = v837 | 0xFFFFFFC0;
                                if ((v837 & 0x3F) == 0) {
                                  unsigned int v432 = 0;
                                }
                                uint64_t v433 = (unsigned __int8 *)v403;
                                if (v837 - v429 - v432 <= 0x40)
                                {
                                  int v428 = (void *)*v836;
                                  goto LABEL_879;
                                }
LABEL_948:
                                int v458 = 1;
                                goto LABEL_949;
                              }
LABEL_879:
                              uint64_t v433 = (unsigned __int8 *)v403;
                              if (v428) {
                                goto LABEL_948;
                              }
                              for (uint64_t m = v835; m != v418; v835 = m)
                              {
                                int v435 = *((unsigned __int8 *)m + 8);
                                if (m && v435 == 16)
                                {
                                  if (!*((_DWORD *)m + 3)) {
                                    break;
                                  }
                                  int v436 = (llvm::Type **)*((void *)m + 2);
                                }
                                else
                                {
                                  if ((!m || v435 != 17) && (!m || (v435 & 0xFE) != 0x12)) {
                                    break;
                                  }
                                  int v436 = (llvm::Type **)((char *)m + 24);
                                }
                                uint64_t m = *v436;
                                if (!*v436) {
                                  break;
                                }
                                if (v435 == 16) {
                                  unsigned int v437 = 32;
                                }
                                else {
                                  unsigned int v437 = __p;
                                }
                                LODWORD(v839) = v437;
                                if (v437 > 0x40) {
                                  operator new[]();
                                }
                                __int16 v838 = 0;
                                unint64_t v438 = v862[0];
                                if (LODWORD(v862[1]) >= HIDWORD(v862[1]))
                                {
                                  unint64_t v441 = LODWORD(v862[1]) + 1;
                                  if (v862[0] <= (llvm::MDNode *)&v838
                                    && (char *)v862[0] + 16 * LODWORD(v862[1]) > (char *)&v838)
                                  {
                                    int64_t v442 = (char *)&v838 - (char *)v862[0];
                                    sub_1CBFC6948((uint64_t)v862, v441);
                                    unint64_t v438 = v862[0];
                                    unsigned int v439 = (void **)((char *)v862[0] + v442);
                                  }
                                  else
                                  {
                                    sub_1CBFC6948((uint64_t)v862, v441);
                                    unsigned int v439 = &v838;
                                    unint64_t v438 = v862[0];
                                  }
                                }
                                else
                                {
                                  unsigned int v439 = &v838;
                                }
                                unsigned int v440 = (char *)v438 + 16 * LODWORD(v862[1]);
                                *((_DWORD *)v440 + 2) = *((_DWORD *)v439 + 2);
                                *(void *)unsigned int v440 = *v439;
                                *((_DWORD *)v439 + 2) = 0;
                                ++LODWORD(v862[1]);
                                if (v839 >= 0x41 && v838) {
                                  MEMORY[0x1D25D9CB0](v838, 0x1000C8000313F17);
                                }
                              }
                              __int16 v838 = v840;
                              uint64_t v839 = 0x600000000;
                              unsigned int v443 = v862[1];
                              if (LODWORD(v862[1]))
                              {
                                BOOL v444 = v862[0];
                                uint64_t v445 = 16 * LODWORD(v862[1]);
                                do
                                {
                                  uint64_t v408 = (uint64_t)llvm::ConstantInt::get(v855, v444, v427);
                                  if (v839 >= (unint64_t)HIDWORD(v839)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((void *)v838 + v839) = v408;
                                  unsigned int v443 = v839 + 1;
                                  LODWORD(v839) = v839 + 1;
                                  BOOL v444 = (llvm::LLVMContext *)((char *)v444 + 16);
                                  v445 -= 16;
                                }
                                while (v445);
                              }
                              if (__p < 0x41)
                              {
                                p_src = &__src;
                                goto LABEL_925;
                              }
                              int v448 = 0;
                              p_src = __src;
                              int64_t v449 = ((unint64_t)__p + 63) >> 6;
                              do
                              {
                                BOOL v226 = v449-- < 1;
                                if (v226) {
                                  break;
                                }
                                unint64_t v450 = *((void *)__src + v449);
                                v448 += __clz(v450);
                              }
                              while (!v450);
                              unsigned int v451 = __p | 0xFFFFFFC0;
                              if ((__p & 0x3F) == 0) {
                                unsigned int v451 = 0;
                              }
                              if (__p - v448 - v451 <= 0x40)
                              {
LABEL_925:
                                if (*p_src) {
                                  BOOL v452 = 1;
                                }
                                else {
                                  BOOL v452 = v835 == v418;
                                }
                                if (!v452)
                                {
                                  char v455 = 0;
                                  uint64_t v433 = (unsigned __int8 *)v403;
LABEL_944:
                                  if (v838 != v840) {
                                    free(v838);
                                  }
                                  if ((v455 & 1) == 0) {
                                    goto LABEL_948;
                                  }
                                  int v458 = 0;
LABEL_949:
                                  int v459 = v862[0];
                                  if (LODWORD(v862[1]))
                                  {
                                    uint64_t v460 = v422;
                                    uint64_t v461 = 16 * LODWORD(v862[1]);
                                    do
                                    {
                                      if (*(_DWORD *)((char *)v459 + v461 - 8) >= 0x41u)
                                      {
                                        uint64_t v462 = *(void *)((char *)v459 + v461 - 16);
                                        if (v462) {
                                          MEMORY[0x1D25D9CB0](v462, 0x1000C8000313F17);
                                        }
                                      }
                                      v461 -= 16;
                                    }
                                    while (v461);
                                    int v459 = v862[0];
                                    uint64_t v422 = v460;
                                  }
                                  if (v459 != (llvm::MDNode *)&v863) {
                                    free(v459);
                                  }
                                  if (v837 >= 0x41 && v836) {
                                    MEMORY[0x1D25D9CB0](v836, 0x1000C8000313F17);
                                  }
                                  unsigned int v420 = __p;
                                  if (!v458) {
                                    goto LABEL_993;
                                  }
                                  goto LABEL_962;
                                }
                              }
                              __int16 v861 = 257;
                              uint64_t v433 = (unsigned __int8 *)sub_1CC27CEC0((uint64_t *)&v848, (uint64_t)v424, v403, (uint64_t *)v838, v443, (uint64_t)&v858);
                              unint64_t v453 = llvm::PointerType::get(v418, v422);
                              LOWORD(v825) = 257;
                              uint64_t v408 = (uint64_t)v433;
                              if (*(void *)v433 != v453)
                              {
                                if (v433[16] <= 0x14u)
                                {
                                  uint64_t v408 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t))(*(void *)v856 + 224))(v856, 49, v433, v453);
                                  if (v408) {
                                    BOOL v457 = *(unsigned __int8 *)(v408 + 16) >= 0x1Cu;
                                  }
                                  else {
                                    BOOL v457 = 0;
                                  }
                                  if (v457)
                                  {
                                    uint64_t v500 = v422;
                                    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v408, v824, v853, v854);
                                    if (v849)
                                    {
                                      unsigned int v505 = (llvm::MDNode **)v848;
                                      unsigned int v506 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                      do
                                      {
                                        llvm::Instruction::setMetadata((llvm::Instruction *)v408, *(_DWORD *)v505, v505[1]);
                                        v505 += 2;
                                      }
                                      while (v505 != v506);
                                    }
                                    int v11 = v808;
                                    uint64_t v422 = v500;
                                  }
                                }
                                else
                                {
                                  v454 = v422;
                                  __int16 v861 = 257;
                                  uint64_t v408 = (uint64_t)llvm::CastInst::Create(49, (uint64_t)v433, v453, (const char **)&v858, 0);
                                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v857 + 16))(v857, v408, v824, v853, v854);
                                  if (v849)
                                  {
                                    __int16 v498 = (llvm::MDNode **)v848;
                                    uint64_t v499 = (llvm::MDNode **)((char *)v848 + 16 * v849);
                                    do
                                    {
                                      llvm::Instruction::setMetadata((llvm::Instruction *)v408, *(_DWORD *)v498, v498[1]);
                                      v498 += 2;
                                    }
                                    while (v498 != v499);
                                  }
                                  uint64_t v422 = v454;
                                }
                              }
                              char v455 = 1;
                              goto LABEL_944;
                            }
                          }
                        }
LABEL_1096:
                        v361 += 40;
                        v363 += 4;
                        ++v364;
                        if (v361 == v789) {
                          goto LABEL_1113;
                        }
                      }
                    }
                    sub_1CC89D864((uint64_t)(v786 + 20), *((uint64_t **)v786 + 11), v785);
                    if (*((_WORD *)v786 + 13)) {
                      llvm::Function::BuildLazyArguments(v349);
                    }
                    unsigned int v604 = (llvm::Value *)*((void *)v786 + 12);
                    if (*((_WORD *)v11 + 9))
                    {
                      llvm::Function::BuildLazyArguments(v11);
                      int v605 = (int *)*((void *)v11 + 11);
                      if (*((_WORD *)v11 + 9))
                      {
                        llvm::Function::BuildLazyArguments(v11);
                        __int16 v606 = (int *)*((void *)v11 + 11);
                        goto LABEL_1180;
                      }
                    }
                    else
                    {
                      int v605 = (int *)*v779;
                    }
                    __int16 v606 = v605;
LABEL_1180:
                    int v607 = &v606[10 * *((void *)v11 + 12)];
                    if (v605 == v607)
                    {
LABEL_1407:
                      if (v866 != &v868) {
                        free(v866);
                      }
                      int v14 = v784;
                      if (v845 != v847) {
                        free(v845);
                      }
                      if ((void)v822)
                      {
                        *((void *)&v822 + 1) = v822;
                        operator delete((void *)v822);
                      }
                      goto LABEL_1413;
                    }
                    unsigned int v791 = &v606[10 * *((void *)v11 + 12)];
                    while (1)
                    {
                      char v608 = sub_1CC8A8DA0(v819, v821, (uint64_t)v605, &v848);
                      uint64_t v610 = v814;
                      uint64_t v611 = v814;
                      if ((v608 & 1) == 0)
                      {
                        if (v815 == v814)
                        {
                          int v612 = HIDWORD(v816);
                          uint64_t v613 = &v815[8 * HIDWORD(v816)];
                          if (HIDWORD(v816))
                          {
                            uint64_t v614 = 0;
                            while (*(int **)&v815[v614] != v605)
                            {
                              v614 += 8;
                              if (8 * HIDWORD(v816) == v614) {
                                goto LABEL_1202;
                              }
                            }
                            uint64_t v613 = &v815[v614];
                          }
LABEL_1202:
                          uint64_t v611 = v815;
                        }
                        else
                        {
                          int v615 = v816 - 1;
                          unsigned int v616 = (v816 - 1) & ((v605 >> 4) ^ (v605 >> 9));
                          uint64_t v613 = &v815[8 * v616];
                          unsigned int v617 = *(int **)v613;
                          if (*(void *)v613 == -1)
                          {
                            uint64_t v618 = 0;
LABEL_1204:
                            if (v618) {
                              uint64_t v613 = v618;
                            }
                            int v612 = HIDWORD(v816);
                            if (*(int **)v613 != v605) {
                              uint64_t v613 = &v815[8 * v816];
                            }
                          }
                          else
                          {
                            uint64_t v618 = 0;
                            int v619 = 1;
                            while (v617 != v605)
                            {
                              if (v618) {
                                BOOL v620 = 0;
                              }
                              else {
                                BOOL v620 = v617 == (int *)-2;
                              }
                              if (v620) {
                                uint64_t v618 = v613;
                              }
                              unsigned int v621 = v616 + v619++;
                              unsigned int v616 = v621 & v615;
                              uint64_t v613 = &v815[8 * (v621 & v615)];
                              unsigned int v617 = *(int **)v613;
                              if (*(void *)v613 == -1) {
                                goto LABEL_1204;
                              }
                            }
                            int v612 = HIDWORD(v816);
                          }
                          uint64_t v611 = v814;
                        }
                        if (v815 != v611) {
                          int v612 = v816;
                        }
                        if (v613 == &v815[8 * v612])
                        {
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v605, v604, (llvm::Value *)1);
                          llvm::Value::takeName((int32x2_t ****)v604, (llvm::Value *)v605);
                          unsigned int v604 = (llvm::Value *)((char *)v604 + 40);
                          goto LABEL_1394;
                        }
                      }
                      if (v815 == v611)
                      {
                        int v622 = HIDWORD(v816);
                        int v623 = &v815[8 * HIDWORD(v816)];
                        if (HIDWORD(v816))
                        {
                          uint64_t v624 = 0;
                          while (*(int **)&v815[v624] != v605)
                          {
                            v624 += 8;
                            if (8 * HIDWORD(v816) == v624) {
                              goto LABEL_1232;
                            }
                          }
                          int v623 = &v815[v624];
                        }
LABEL_1232:
                        uint64_t v610 = v815;
                      }
                      else
                      {
                        int v625 = v816;
                        int v626 = v816 - 1;
                        unsigned int v627 = (v816 - 1) & ((v605 >> 4) ^ (v605 >> 9));
                        int v623 = &v815[8 * v627];
                        uint64_t v628 = *(int **)v623;
                        if (*(void *)v623 == -1)
                        {
                          uint64_t v629 = 0;
LABEL_1397:
                          if (v629) {
                            int v623 = v629;
                          }
                          int v622 = HIDWORD(v816);
                          if (v815 == v814) {
                            int v625 = HIDWORD(v816);
                          }
                          uint64_t v772 = &v815[8 * v625];
                          if (*(int **)v623 != v605) {
                            int v623 = v772;
                          }
                        }
                        else
                        {
                          uint64_t v629 = 0;
                          int v630 = 1;
                          while (v628 != v605)
                          {
                            if (v629) {
                              BOOL v631 = 0;
                            }
                            else {
                              BOOL v631 = v628 == (int *)-2;
                            }
                            if (v631) {
                              uint64_t v629 = v623;
                            }
                            unsigned int v632 = v627 + v630++;
                            unsigned int v627 = v632 & v626;
                            int v623 = &v815[8 * (v632 & v626)];
                            uint64_t v628 = *(int **)v623;
                            if (*(void *)v623 == -1) {
                              goto LABEL_1397;
                            }
                          }
                          int v622 = HIDWORD(v816);
                        }
                      }
                      int v633 = v815 == v610 ? v622 : v816;
                      if (v623 == &v815[8 * v633]) {
                        break;
                      }
                      uint64_t v634 = *((void *)v786 + 11);
                      if (v634) {
                        uint64_t v635 = v634 - 24;
                      }
                      else {
                        uint64_t v635 = 0;
                      }
                      uint64_t v636 = *(uint64_t **)(v635 + 48);
                      uint64_t v637 = (uint64_t)(v636 - 3);
                      if (!v636) {
                        uint64_t v637 = 0;
                      }
                      v802 = v636;
                      uint64_t v804 = v637;
                      unsigned int v638 = (void **)*((void *)v605 + 3);
                      int v639 = v605[8];
                      uint64_t v640 = (unsigned int *)llvm::AttributeList::getParamByValType((llvm::AttributeList *)(v638 + 14), v639);
                      unsigned __int8 v641 = 0;
                      int v642 = v638[14];
                      if (v642)
                      {
                        if ((v639 + 2) < *((_DWORD *)v642 + 2)
                          && (BOOL v643 = (llvm::AttributeSetNode *)v642[(v639 + 2) + 5]) != 0)
                        {
                          unsigned __int8 v641 = llvm::AttributeSetNode::getAlignment(v643);
                        }
                        else
                        {
                          unsigned __int8 v641 = 0;
                        }
                      }
                      int v699 = (char *)operator new(0x68uLL);
                      unsigned int v700 = (uint64_t *)(v699 + 32);
                      *((_DWORD *)v699 + 13) = *((_DWORD *)v699 + 13) & 0x38000000 | 1;
                      *(void *)int v699 = 0;
                      *((void *)v699 + 1) = 0;
                      *((void *)v699 + 2) = 0;
                      *((void *)v699 + 3) = v699 + 32;
                      uint64_t v701 = (llvm::Type *)*(unsigned int *)(v807 + 276);
                      unsigned __int8 v702 = v641;
                      v852[0] = 257;
                      llvm::AllocaInst::AllocaInst((unint64_t *)v699 + 4, (llvm::PointerType *)v640, v701, 0, v641, (const char **)&v848, v804);
                      uint64_t v839 = 0;
                      __int16 v838 = 0;
                      uint64_t v704 = ***(void ***)v11;
                      unsigned int v705 = *(llvm::ConstantInt **)(v704 + 1960);
                      unsigned int v706 = *(_DWORD *)(v704 + 1968);
                      LODWORD(v849) = v706 >> 8;
                      if (v706 >> 8 >= 0x41) {
                        operator new[]();
                      }
                      unsigned int v848 = 0;
                      unsigned int v707 = llvm::ConstantInt::get(v705, (llvm::LLVMContext *)&v848, v703);
                      if (v849 >= 0x41 && v848) {
                        MEMORY[0x1D25D9CB0](v848, 0x1000C8000313F17);
                      }
                      __int16 v838 = v707;
                      uint64_t v839 = 0;
                      int v708 = llvm::DataLayout::getStructLayout(v800, (llvm::StructType *)v640);
                      uint64_t v710 = v640[3];
                      if (v710)
                      {
                        uint64_t v711 = 0;
                        uint64_t v797 = (char *)v708 + 16;
                        uint64_t v799 = 1 << v702;
                        while (1)
                        {
                          uint64_t v712 = ***(void ***)v808;
                          unsigned int v713 = *(llvm::ConstantInt **)(v712 + 1960);
                          unint64_t v714 = *(unsigned int *)(v712 + 1968);
                          LODWORD(v849) = v714 >> 8;
                          if (v714 >> 8 > 0x40) {
                            operator new[]();
                          }
                          if (v714 <= 0xFF) {
                            unint64_t v715 = 0;
                          }
                          else {
                            unint64_t v715 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v714) + 63);
                          }
                          unsigned int v848 = (void *)(v715 & v711);
                          v716 = llvm::ConstantInt::get(v713, (llvm::LLVMContext *)&v848, v709);
                          if (v849 >= 0x41 && v848) {
                            MEMORY[0x1D25D9CB0](v848, 0x1000C8000313F17);
                          }
                          uint64_t v839 = (uint64_t)v716;
                          if ((v699[55] & 0x10) == 0)
                          {
                            uint64_t v726 = 0;
                            BOOL v727 = (llvm::MDNode *)&byte_1CFBCE98E;
                            goto LABEL_1349;
                          }
                          uint64_t v717 = **(void **)*v700;
                          uint64_t v718 = *(void *)(v717 + 152);
                          uint64_t v719 = *(unsigned int *)(v717 + 168);
                          if (!v719) {
                            goto LABEL_1347;
                          }
                          LODWORD(v720) = (v719 - 1) & ((v700 >> 4) ^ (v700 >> 9));
                          uint64_t v721 = (uint64_t **)(v718 + 16 * v720);
                          int v722 = *v721;
                          if (*v721 != v700) {
                            break;
                          }
LABEL_1348:
                          unint64_t v725 = (llvm::MDNode **)v721[1];
                          unsigned int v728 = *v725;
                          BOOL v727 = (llvm::MDNode *)(v725 + 2);
                          uint64_t v726 = v728;
LABEL_1349:
                          __int16 v865 = 773;
                          v862[0] = v727;
                          v862[1] = v726;
                          unsigned int v863 = (llvm::MDNode *)".";
                          unsigned int v848 = v862;
                          unint64_t v813 = v711 | v813 & 0xFFFFFFFF00000000;
                          uint64_t v850 = v813;
                          v852[0] = 2050;
                          unsigned int v729 = operator new(0xB0uLL);
                          unsigned int v730 = v729;
                          uint64_t v731 = 0;
                          int v732 = (llvm::Value *)(v729 + 24);
                          v729[29] = v729[29] & 0x38000000 | 3;
                          do
                          {
                            unsigned int v733 = &v729[v731];
                            *unsigned int v733 = 0;
                            v733[1] = 0;
                            v733[2] = 0;
                            v733[3] = v732;
                            v731 += 8;
                          }
                          while (v731 != 24);
                          sub_1CB845A7C((uint64_t)v640, v700, (uint64_t)&v838, 2);
                          *(_OWORD *)(v730 + 30) = 0u;
                          uint64_t v734 = v730 + 30;
                          *((void *)v730 + 12) = v735;
                          *((void *)v730 + 13) = 0;
                          unsigned int v736 = v730[29] & 0xC0000000 | 3;
                          v730[28] = 62;
                          v730[29] = v736;
                          *(_OWORD *)(v730 + 34) = 0u;
                          v730[38] = 0;
                          uint64_t v737 = v802;
                          if (v802)
                          {
                            uint64_t v754 = v802[2];
                            *((void *)v730 + 17) = v754;
                            *(_WORD *)(v754 + 18) &= ~0x8000u;
                            if ((*((unsigned char *)v730 + 119) & 0x10) != 0)
                            {
                              uint64_t v764 = *(void *)(v754 + 56);
                              if (v764)
                              {
                                uint64_t v765 = *(llvm::ValueSymbolTable **)(v764 + 104);
                                if (v765)
                                {
                                  llvm::ValueSymbolTable::reinsertValue(v765, v732);
                                  uint64_t v737 = v802;
                                }
                              }
                            }
                            uint64_t v755 = *v737;
                            *((void *)v730 + 15) = *v737;
                            *((void *)v730 + 16) = v737;
                            *(void *)(v755 + 8) = v734;
                            uint64_t *v737 = (uint64_t)v734;
                          }
                          *((void *)v730 + 20) = v640;
                          *((void *)v730 + 21) = llvm::GetElementPtrInst::getIndexedType((uint64_t)v640, (uint64_t)&v838, 2);
                          llvm::GetElementPtrInst::init((uint64_t ***)v732, (uint64_t **)v700, (uint64_t *)&v838, 2, (const char **)&v848);
                          if ((*((unsigned char *)v605 + 23) & 0x10) == 0)
                          {
                            unsigned int v747 = 0;
                            uint64_t v748 = (llvm::MDNode *)&byte_1CFBCE98E;
                            goto LABEL_1361;
                          }
                          uint64_t v738 = ***(void ***)v605;
                          uint64_t v739 = *(void *)(v738 + 152);
                          uint64_t v740 = *(unsigned int *)(v738 + 168);
                          if (!v740) {
                            goto LABEL_1359;
                          }
                          LODWORD(v741) = (v740 - 1) & ((v605 >> 4) ^ (v605 >> 9));
                          int v742 = (int **)(v739 + 16 * v741);
                          uint64_t v743 = *v742;
                          if (*v742 != v605)
                          {
                            int v744 = 1;
                            while (v743 != (int *)-4096)
                            {
                              int v745 = v741 + v744++;
                              uint64_t v741 = v745 & (v740 - 1);
                              uint64_t v743 = *(int **)(v739 + 16 * v741);
                              if (v743 == v605)
                              {
                                int v742 = (int **)(v739 + 16 * v741);
                                goto LABEL_1360;
                              }
                            }
LABEL_1359:
                            int v742 = (int **)(v739 + 16 * v740);
                          }
LABEL_1360:
                          BOOL v746 = (llvm::MDNode **)v742[1];
                          int v749 = *v746;
                          uint64_t v748 = (llvm::MDNode *)(v746 + 2);
                          unsigned int v747 = v749;
LABEL_1361:
                          __int16 v865 = 773;
                          v862[0] = v748;
                          v862[1] = v747;
                          unsigned int v863 = (llvm::MDNode *)".";
                          unsigned int v848 = v862;
                          unint64_t v809 = v809 & 0xFFFFFFFF00000000 | v711;
                          uint64_t v850 = v809;
                          v852[0] = 2050;
                          llvm::Value::setNameImpl(v604, (const char **)&v848);
                          if (!v604 || *((unsigned char *)v604 + 16)) {
                            goto LABEL_1363;
                          }
                          if ((*((unsigned char *)v604 + 23) & 0x10) == 0)
                          {
LABEL_1387:
                            int v771 = 0;
                            *((_DWORD *)v604 + 8) &= ~0x2000u;
                            goto LABEL_1388;
                          }
                          uint64_t v756 = ***(void ***)v604;
                          uint64_t v757 = *(void *)(v756 + 152);
                          uint64_t v758 = *(unsigned int *)(v756 + 168);
                          if (!v758) {
                            goto LABEL_1379;
                          }
                          LODWORD(v759) = (v758 - 1) & ((v604 >> 4) ^ (v604 >> 9));
                          int v760 = (llvm::Value **)(v757 + 16 * v759);
                          int v761 = *v760;
                          if (*v760 != v604)
                          {
                            int v762 = 1;
                            while (v761 != (llvm::Value *)-4096)
                            {
                              int v763 = v759 + v762++;
                              uint64_t v759 = v763 & (v758 - 1);
                              int v761 = *(llvm::Value **)(v757 + 16 * v759);
                              if (v761 == v604)
                              {
                                int v760 = (llvm::Value **)(v757 + 16 * v759);
                                goto LABEL_1380;
                              }
                            }
LABEL_1379:
                            int v760 = (llvm::Value **)(v757 + 16 * v758);
                          }
LABEL_1380:
                          uint64_t v766 = v760[1];
                          unint64_t v769 = *(void *)v766;
                          unsigned int v767 = (char *)v766 + 16;
                          unint64_t v768 = v769;
                          if (v769 < 5) {
                            goto LABEL_1387;
                          }
                          if (*(_DWORD *)v767 != *(_DWORD *)"llvm." || v767[4] != aLlvm_1[4]) {
                            goto LABEL_1387;
                          }
                          *((_DWORD *)v604 + 8) |= 0x2000u;
                          int v771 = llvm::Function::lookupIntrinsicID(v767, v768);
LABEL_1388:
                          *((_DWORD *)v604 + 9) = v771;
LABEL_1363:
                          char v750 = __clz((*(void *)&v797[8 * v711] | v799) & -(*(void *)&v797[8 * v711] | v799));
                          v751 = operator new(0x80uLL);
                          v751[21] = v751[21] & 0x38000000 | 2;
                          *(void *)v751 = 0;
                          *((void *)v751 + 1) = 0;
                          *((void *)v751 + 2) = 0;
                          *((void *)v751 + 3) = v751 + 16;
                          *((void *)v751 + 4) = 0;
                          *((void *)v751 + 5) = 0;
                          *((void *)v751 + 6) = 0;
                          *((void *)v751 + 7) = v751 + 16;
                          char v752 = 63 - v750;
                          v753 = (llvm::Value *)((char *)v604 + 40);
                          llvm::StoreInst::StoreInst((llvm::Value *)(v751 + 16), (uint64_t)v604, (uint64_t)v732, 0, v752, v804);
                          ++v711;
                          unsigned int v604 = (llvm::Value *)((char *)v604 + 40);
                          if (v711 == v710) {
                            goto LABEL_1393;
                          }
                        }
                        int v723 = 1;
                        while (v722 != (uint64_t *)-4096)
                        {
                          int v724 = v720 + v723++;
                          uint64_t v720 = v724 & (v719 - 1);
                          int v722 = *(uint64_t **)(v718 + 16 * v720);
                          if (v722 == v700)
                          {
                            uint64_t v721 = (uint64_t **)(v718 + 16 * v720);
                            goto LABEL_1348;
                          }
                        }
LABEL_1347:
                        uint64_t v721 = (uint64_t **)(v718 + 16 * v719);
                        goto LABEL_1348;
                      }
                      v753 = v604;
LABEL_1393:
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v605, (llvm::Value *)v700, (llvm::Value *)1);
                      llvm::Value::takeName((int32x2_t ****)v700, (llvm::Value *)v605);
                      unsigned int v604 = v753;
                      int v11 = v808;
                      int v607 = v791;
LABEL_1394:
                      v605 += 10;
                      if (v605 == v607) {
                        goto LABEL_1407;
                      }
                    }
                    if (*((void *)v605 + 1))
                    {
                      __int16 v838 = (void *)1;
                      for (uint64_t n = 8; n != 72; n += 16)
                        *(void **)((char *)&v838 + n) = (void *)0x7FFFFFFFFFFFFFFFLL;
                      uint64_t v645 = sub_1CC8A8B34((uint64_t)&v819, (uint64_t)v605);
                      uint64_t v646 = *(unsigned int *)(v645 + 16);
                      if (v646)
                      {
                        v647 = *(llvm::MDNode **)(v645 + 8);
                        BOOL v648 = (llvm::MDNode *)((char *)v647 + 32 * v646);
                        while (1)
                        {
                          if ((*((unsigned char *)v605 + 23) & 0x10) == 0)
                          {
                            unsigned int v658 = 0;
                            unsigned int v659 = &byte_1CFBCE98E;
                            goto LABEL_1260;
                          }
                          uint64_t v649 = ***(void ***)v605;
                          uint64_t v650 = *(void *)(v649 + 152);
                          uint64_t v651 = *(unsigned int *)(v649 + 168);
                          if (!v651) {
                            goto LABEL_1258;
                          }
                          LODWORD(v652) = (v651 - 1) & ((v605 >> 4) ^ (v605 >> 9));
                          uint64_t v653 = (int **)(v650 + 16 * v652);
                          uint64_t v654 = *v653;
                          if (*v653 != v605) {
                            break;
                          }
LABEL_1259:
                          int v657 = v653[1];
                          uint64_t v660 = *(llvm::MDNode ***)v657;
                          unsigned int v659 = (const char *)(v657 + 4);
                          unsigned int v658 = v660;
LABEL_1260:
                          __int16 v861 = 773;
                          uint64_t v858 = (uint64_t)v659;
                          uint64_t v859 = v658;
                          uint64_t v860 = ".";
                          v862[0] = (llvm::MDNode *)&v858;
                          unsigned int v863 = v647;
                          __int16 v865 = 3330;
                          unsigned int v848 = v862;
                          uint64_t v850 = (uint64_t)".val";
                          v852[0] = 770;
                          llvm::Value::setNameImpl(v604, (const char **)&v848);
                          if (!v604 || *((unsigned char *)v604 + 16)) {
                            goto LABEL_1262;
                          }
                          if ((*((unsigned char *)v604 + 23) & 0x10) == 0)
                          {
LABEL_1282:
                            int v676 = 0;
                            *((_DWORD *)v604 + 8) &= ~0x2000u;
                            goto LABEL_1283;
                          }
                          uint64_t v663 = ***(void ***)v604;
                          uint64_t v664 = *(void *)(v663 + 152);
                          uint64_t v665 = *(unsigned int *)(v663 + 168);
                          if (!v665) {
                            goto LABEL_1274;
                          }
                          LODWORD(v666) = (v665 - 1) & ((v604 >> 4) ^ (v604 >> 9));
                          unsigned int v667 = (llvm::Value **)(v664 + 16 * v666);
                          v668 = *v667;
                          if (*v667 != v604)
                          {
                            int v669 = 1;
                            while (v668 != (llvm::Value *)-4096)
                            {
                              int v670 = v666 + v669++;
                              uint64_t v666 = v670 & (v665 - 1);
                              v668 = *(llvm::Value **)(v664 + 16 * v666);
                              if (v668 == v604)
                              {
                                unsigned int v667 = (llvm::Value **)(v664 + 16 * v666);
                                goto LABEL_1275;
                              }
                            }
LABEL_1274:
                            unsigned int v667 = (llvm::Value **)(v664 + 16 * v665);
                          }
LABEL_1275:
                          int v671 = v667[1];
                          unint64_t v674 = *(void *)v671;
                          int v672 = (char *)v671 + 16;
                          unint64_t v673 = v674;
                          if (v674 < 5) {
                            goto LABEL_1282;
                          }
                          if (*(_DWORD *)v672 != *(_DWORD *)"llvm." || v672[4] != aLlvm_1[4]) {
                            goto LABEL_1282;
                          }
                          *((_DWORD *)v604 + 8) |= 0x2000u;
                          int v676 = llvm::Function::lookupIntrinsicID(v672, v673);
LABEL_1283:
                          *((_DWORD *)v604 + 9) = v676;
LABEL_1262:
                          BOOL v661 = *(void **)v647;
                          unsigned int v848 = v661;
                          v849 = v604;
                          v862[0] = 0;
                          if ((sub_1CC8A8FA4((uint64_t)&v838, (uint64_t)v661, v862) & 1) == 0)
                          {
                            int v662 = sub_1CC8A9054(&v838, (uint64_t *)&v848, (void *)v862[0]);
                            *int v662 = v661;
                            v662[1] = v604;
                          }
                          unsigned int v604 = (llvm::Value *)((char *)v604 + 40);
                          v647 = (llvm::MDNode *)((char *)v647 + 32);
                          if (v647 == v648) {
                            goto LABEL_1284;
                          }
                        }
                        int v655 = 1;
                        while (v654 != (int *)-4096)
                        {
                          int v656 = v652 + v655++;
                          uint64_t v652 = v656 & (v651 - 1);
                          uint64_t v654 = *(int **)(v650 + 16 * v652);
                          if (v654 == v605)
                          {
                            uint64_t v653 = (int **)(v650 + 16 * v652);
                            goto LABEL_1259;
                          }
                        }
LABEL_1258:
                        uint64_t v653 = (int **)(v650 + 16 * v651);
                        goto LABEL_1259;
                      }
LABEL_1284:
                      int v677 = &v850;
                      unsigned int v848 = &v850;
                      v849 = (void *)0x1000000000;
                      v862[0] = (llvm::MDNode *)&v863;
                      v862[1] = (llvm::MDNode *)0x1000000000;
                      uint64_t v678 = *((void *)v605 + 1);
LABEL_1285:
                      sub_1CC8A6F48((uint64_t)&v848, (uint64_t)v677, v678, 0);
                      while (v849)
                      {
                        uint64_t v680 = *((void *)v848 + v849 - 1);
                        LODWORD(v849) = v849 - 1;
                        int v681 = *(unsigned __int8 *)(v680 + 16);
                        if (v681 == 77 || v681 == 62)
                        {
                          if (LODWORD(v862[1]) >= (unint64_t)HIDWORD(v862[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v862[0] + LODWORD(v862[1])) = v680;
                          ++LODWORD(v862[1]);
                          uint64_t v678 = *(void *)(v680 + 8);
                          int v677 = (uint64_t *)((char *)v848 + 8 * v849);
                          goto LABEL_1285;
                        }
                        if (v681 == 60) {
                          unsigned int v682 = (llvm::ValueAsMetadata *)v680;
                        }
                        else {
                          unsigned int v682 = 0;
                        }
                        if (v682)
                        {
                          uint64_t v683 = (llvm::GlobalValue *)*((void *)v682 - 4);
                          unsigned int v684 = *(_DWORD *)(*(void *)v683 + 8);
                          if ((v684 & 0xFE) == 0x12) {
                            unsigned int v684 = *(_DWORD *)(**(void **)(*(void *)v683 + 16) + 8);
                          }
                          if (v684 < 0x100) {
                            goto LABEL_1304;
                          }
                          unsigned int v685 = v684 >> 8;
                          uint64_t v686 = *(unsigned int *)(v807 + 512);
                          uint64_t v687 = *(void *)(v807 + 504);
                          if (v686)
                          {
                            uint64_t v687 = *(void *)(v807 + 504);
                            unint64_t v688 = *(unsigned int *)(v807 + 512);
                            do
                            {
                              unint64_t v689 = v688 >> 1;
                              uint64_t v690 = v687 + 16 * (v688 >> 1);
                              unsigned int v691 = *(_DWORD *)(v690 + 8);
                              uint64_t v692 = v690 + 16;
                              v688 += ~(v688 >> 1);
                              if (v691 < v685) {
                                uint64_t v687 = v692;
                              }
                              else {
                                unint64_t v688 = v689;
                              }
                            }
                            while (v688);
                          }
                          if (v687 == *(void *)(v807 + 504) + 16 * v686 || *(_DWORD *)(v687 + 8) != v685) {
LABEL_1304:
                          }
                            uint64_t v687 = *(void *)(v807 + 504);
                          LODWORD(v859) = *(_DWORD *)(v687 + 12);
                          if (v859 > 0x40) {
                            operator new[]();
                          }
                          uint64_t v858 = 0;
                          llvm::Value::stripAndAccumulateConstantOffsets(v683, v800, (llvm::APInt *)&v858, 1, 0, 0, v679);
                          if (v859 > 0x40) {
                            uint64_t v693 = *(void *)v858;
                          }
                          else {
                            uint64_t v693 = v858 << -(uint64_t)v859 >> -(uint64_t)v859;
                          }
                          __src = (void *)v693;
                          v824[0] = 0;
                          if (sub_1CC8A8FA4((uint64_t)&v838, v693, v824))
                          {
                            int v694 = (llvm::Value *)v824[0][1];
                          }
                          else
                          {
                            uint64_t v695 = sub_1CC8A9054(&v838, (uint64_t *)&__src, v824[0]);
                            int v694 = 0;
                            *uint64_t v695 = v693;
                            v695[1] = 0;
                          }
                          llvm::Value::doRAUW(v682, v694, (llvm::Value *)1);
                          if (LODWORD(v862[1]) >= (unint64_t)HIDWORD(v862[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((void *)v862[0] + LODWORD(v862[1])) = v682;
                          ++LODWORD(v862[1]);
                          if (v859 >= 0x41 && v858) {
                            MEMORY[0x1D25D9CB0](v858, 0x1000C8000313F17);
                          }
                        }
                      }
                      if (LODWORD(v862[1]))
                      {
                        uint64_t v696 = *(llvm::ValueAsMetadata **)v862[0];
                        uint64_t v697 = llvm::UndefValue::get(**(llvm::UndefValue ***)v862[0], v609);
                        llvm::Value::doRAUW(v696, v697, (llvm::Value *)1);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
                      }
                      if ((llvm::MDNode **)v862[0] != &v863) {
                        free(v862[0]);
                      }
                      if (v848 != &v850) {
                        free(v848);
                      }
                      if ((v838 & 1) == 0) {
                        MEMORY[0x1D25D9CD0](v839, 8);
                      }
                    }
                    uint64_t v698 = llvm::UndefValue::get(*(llvm::UndefValue **)v605, v609);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v605, v698, (llvm::Value *)1);
                    goto LABEL_1394;
                  }
                }
                else
                {
                  uint64_t v352 = 0;
                }
                uint64_t v353 = 0;
                goto LABEL_762;
              }
              int v342 = 1;
              while (v341 != (llvm::Function *)-4096)
              {
                int v343 = v339 + v342++;
                uint64_t v339 = v343 & (v338 - 1);
                unsigned int v341 = *(llvm::Function **)(v337 + 16 * v339);
                if (v341 == v11)
                {
                  uint64_t v340 = (llvm::Function **)(v337 + 16 * v339);
                  goto LABEL_755;
                }
              }
            }
            uint64_t v340 = (llvm::Function **)(v337 + 16 * v338);
            goto LABEL_755;
          }
        }
        else
        {
          uint64_t v291 = *((void *)v11 + 11);
          int v779 = (uint64_t *)((char *)v11 + 88);
        }
        uint64_t v292 = v291;
        goto LABEL_663;
      }
    }
    uint64_t v866 = &v868;
    int v867 = (void *)0x400000000;
    sub_1CC1587C8((uint64_t)&v866, (uint64_t)&v868, *(char **)(v43 + 16), (char *)(*(void *)(v43 + 16) + 8 * v84));
    unint64_t v37 = v867;
    if (v867)
    {
      uint64_t v85 = 8 * v867;
      uint64_t v86 = (char *)v866;
      do
      {
        if ((*(_DWORD *)(*(void *)v86 + 8) & 0xFE) != 0x12)
        {
          unsigned int v87 = *(_DWORD *)(*(void *)v86 + 8);
          BOOL v226 = v87 > 0x15;
          int v88 = (1 << v87) & 0x20AC7F;
          if (v226 || v88 == 0) {
            goto LABEL_179;
          }
        }
        v86 += 8;
        v85 -= 8;
      }
      while (v85);
    }
    if (!sub_1CC8A6E60((uint64_t)v866, v867, *((void *)v11 + 1), a6))
    {
LABEL_179:
      int v95 = 1;
      goto LABEL_203;
    }
    char v90 = v815;
    uint64_t v91 = HIDWORD(v816);
    if (v815 == v814)
    {
      if (HIDWORD(v816))
      {
        int v92 = 0;
        uint64_t v93 = 8 * HIDWORD(v816);
        uint64_t v94 = v815;
        while ((void *)*v94 != v31)
        {
          if (*v94 == -2) {
            int v92 = v94;
          }
          ++v94;
          v93 -= 8;
          if (!v93)
          {
            if (!v92) {
              goto LABEL_177;
            }
            int v95 = 0;
            *int v92 = v31;
            --v817;
            goto LABEL_203;
          }
        }
        goto LABEL_202;
      }
LABEL_177:
      unint64_t v37 = v816;
      if (HIDWORD(v816) < v816)
      {
        int v95 = 0;
        ++HIDWORD(v816);
        *(void *)&v815[8 * v91] = v31;
        goto LABEL_203;
      }
    }
    else
    {
      unint64_t v37 = v816;
    }
    if (3 * (int)v37 <= (4 * (HIDWORD(v816) - v817)))
    {
      if (v37 >= 0x40) {
        LODWORD(v37) = 2 * v37;
      }
      else {
        LODWORD(v37) = 128;
      }
    }
    else if ((int)v37 - HIDWORD(v816) >= v37 >> 3)
    {
      goto LABEL_183;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v814, v37);
    unint64_t v37 = v816;
    char v90 = v815;
LABEL_183:
    int v96 = v37 - 1;
    unsigned int v97 = (v37 - 1) & ((v31 >> 4) ^ (v31 >> 9));
    unsigned int v98 = &v90[8 * v97];
    unsigned int v99 = *(void **)v98;
    if (*(void *)v98 == -1)
    {
      uint64_t v100 = 0;
LABEL_195:
      if (v100) {
        uint64_t v104 = v100;
      }
      else {
        uint64_t v104 = v98;
      }
      if (*(void **)v104 != v31)
      {
        if (*(void *)v104 == -2) {
          --v817;
        }
        else {
          ++HIDWORD(v816);
        }
        int v95 = 0;
        *(void *)uint64_t v104 = v31;
LABEL_203:
        if (v866 != &v868) {
          free(v866);
        }
        if (!v95) {
          goto LABEL_473;
        }
LABEL_206:
        __int16 v838 = v840;
        uint64_t v839 = 0x400000000;
        BOOL v836 = v31;
        unsigned int v830 = v30;
        char v829 = v794;
        uint64_t v105 = v31[1];
        if (!v105)
        {
          uint64_t v170 = &v850;
          unsigned int v848 = &v850;
          v849 = (void *)0x400000000;
          goto LABEL_454;
        }
        uint64_t v858 = 1;
        for (iuint64_t i = 8; ii != 136; ii += 32)
          *(uint64_t *)((char *)&v858 + ii) = 0x7FFFFFFFFFFFFFFFLL;
        unsigned __int8 v828 = 0;
        int v835 = 0;
        v824[0] = v812;
        v824[1] = &v836;
        v824[2] = &v829;
        v824[3] = &v858;
        uint64_t v825 = &v830;
        uint64_t v826 = &v835;
        uint64_t v827 = &v828;
        uint64_t v107 = *(void *)(v31[3] + 80);
        if (v107) {
          uint64_t v108 = v107 - 24;
        }
        else {
          uint64_t v108 = 0;
        }
        uint64_t v109 = v108 + 40;
        uint64_t v110 = *(void *)(v108 + 48);
        uint64_t v111 = v31;
        if (v110 != v109)
        {
          while (1)
          {
            int v112 = v110 ? (llvm *)(v110 - 24) : 0;
            if (v110 && *((unsigned char *)v112 + 16) == 60)
            {
              unsigned __int16 v113 = sub_1CC8A70EC((uint64_t)v824, (uint64_t)v112, 1, v38, v39, v40, v41);
              if (v113 >= 0x100u && v113 == 0) {
                break;
              }
            }
            if (llvm::isGuaranteedToTransferExecutionToSuccessor(v112, (const llvm::Instruction *)v37))
            {
              uint64_t v110 = *(void *)(v110 + 8);
              if (v110 != v109) {
                continue;
              }
            }
            uint64_t v111 = v836;
            goto LABEL_225;
          }
          if ((v858 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v859, 8);
          }
          goto LABEL_471;
        }
LABEL_225:
        v862[0] = (llvm::MDNode *)&v863;
        v862[1] = (llvm::MDNode *)0x1000000000;
        unsigned int v848 = v852;
        v849 = v852;
        uint64_t v850 = 16;
        int v851 = 0;
        uint64_t v845 = v847;
        __uint64_t n = 0x1000000000;
        uint64_t v115 = v111[1];
        if (!v115) {
          goto LABEL_371;
        }
        while (1)
        {
          uint64_t v116 = *(void *)(v115 + 24);
          unsigned int v117 = (char *)v849;
          uint64_t v118 = HIDWORD(v850);
          if (v849 == v848)
          {
            if (HIDWORD(v850))
            {
              unint64_t v119 = 0;
              uint64_t v120 = 8 * HIDWORD(v850);
              uint64_t v121 = v849;
              while (*v121 != v116)
              {
                if (*v121 == -2) {
                  unint64_t v119 = v121;
                }
                ++v121;
                v120 -= 8;
                if (!v120)
                {
                  if (!v119) {
                    goto LABEL_234;
                  }
                  *unint64_t v119 = v116;
                  --v851;
                  goto LABEL_258;
                }
              }
              goto LABEL_260;
            }
LABEL_234:
            unsigned int v122 = v850;
            if (HIDWORD(v850) < v850)
            {
              ++HIDWORD(v850);
              *((void *)v849 + v118) = v116;
              goto LABEL_258;
            }
          }
          else
          {
            unsigned int v122 = v850;
          }
          if (3 * v122 <= 4 * (HIDWORD(v850) - v851)) {
            break;
          }
          if (v122 - HIDWORD(v850) < v122 >> 3) {
            goto LABEL_267;
          }
LABEL_239:
          unsigned int v123 = v122 - 1;
          unsigned int v124 = (v122 - 1) & ((v116 >> 4) ^ (v116 >> 9));
          uint64_t v125 = &v117[8 * v124];
          uint64_t v126 = *(void *)v125;
          if (*(void *)v125 != -1)
          {
            uint64_t v127 = 0;
            int v128 = 1;
            while (v126 != v116)
            {
              if (v127) {
                BOOL v129 = 0;
              }
              else {
                BOOL v129 = v126 == -2;
              }
              if (v129) {
                uint64_t v127 = v125;
              }
              unsigned int v130 = v124 + v128++;
              unsigned int v124 = v130 & v123;
              uint64_t v125 = &v117[8 * (v130 & v123)];
              uint64_t v126 = *(void *)v125;
              if (*(void *)v125 == -1) {
                goto LABEL_251;
              }
            }
            goto LABEL_260;
          }
          uint64_t v127 = 0;
LABEL_251:
          if (v127) {
            unsigned int v131 = v127;
          }
          else {
            unsigned int v131 = v125;
          }
          if (*(void *)v131 == v116) {
            goto LABEL_260;
          }
          if (*(void *)v131 == -2) {
            --v851;
          }
          else {
            ++HIDWORD(v850);
          }
          *(void *)unsigned int v131 = v116;
LABEL_258:
          if (LODWORD(v862[1]) >= (unint64_t)HIDWORD(v862[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v862[0] + LODWORD(v862[1])) = v116;
          ++LODWORD(v862[1]);
LABEL_260:
          uint64_t v115 = *(void *)(v115 + 8);
          if (!v115)
          {
LABEL_272:
            while (LODWORD(v862[1]))
            {
              uint64_t v132 = *((void *)v862[0] + LODWORD(v862[1]) - 1);
              --LODWORD(v862[1]);
              int v133 = *(unsigned __int8 *)(v132 + 16);
              switch(v133)
              {
                case '<':
                  if (!sub_1CC8A70EC((uint64_t)v824, v132, 0, v38, v39, v40, v41))
                  {
LABEL_439:
                    char v179 = 0;
                    goto LABEL_440;
                  }
                  if (__n >= (unint64_t)HIDWORD(__n)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v845 + __n) = v132;
                  LODWORD(__n) = __n + 1;
                  break;
                case '>':
                  uint64_t v151 = *(_DWORD *)(v132 + 20) & 0x7FFFFFF;
                  if (v151 != 1)
                  {
                    unsigned int v152 = 1;
                    while (*(unsigned char *)(*(void *)(v132 - 32 * v151 + 32 * v152) + 16) == 16)
                    {
                      if (v151 == ++v152) {
                        goto LABEL_324;
                      }
                    }
                    goto LABEL_439;
                  }
LABEL_324:
                  uint64_t v153 = *(void *)(v132 + 8);
                  if (v153)
                  {
                    while (1)
                    {
                      uint64_t v154 = *(void *)(v153 + 24);
                      uint64_t v155 = (char *)v849;
                      uint64_t v156 = HIDWORD(v850);
                      if (v849 == v848)
                      {
                        if (HIDWORD(v850))
                        {
                          uint64_t v157 = 0;
                          uint64_t v158 = 8 * HIDWORD(v850);
                          int v159 = v849;
                          while (*v159 != v154)
                          {
                            if (*v159 == -2) {
                              uint64_t v157 = v159;
                            }
                            ++v159;
                            v158 -= 8;
                            if (!v158)
                            {
                              if (!v157) {
                                goto LABEL_333;
                              }
                              *uint64_t v157 = v154;
                              --v851;
                              goto LABEL_357;
                            }
                          }
                          goto LABEL_359;
                        }
LABEL_333:
                        unsigned int v160 = v850;
                        if (HIDWORD(v850) < v850)
                        {
                          ++HIDWORD(v850);
                          *((void *)v849 + v156) = v154;
                          goto LABEL_357;
                        }
                      }
                      else
                      {
                        unsigned int v160 = v850;
                      }
                      if (3 * v160 <= 4 * (HIDWORD(v850) - v851)) {
                        break;
                      }
                      if (v160 - HIDWORD(v850) < v160 >> 3) {
                        goto LABEL_366;
                      }
LABEL_338:
                      unsigned int v161 = v160 - 1;
                      unsigned int v162 = (v160 - 1) & ((v154 >> 4) ^ (v154 >> 9));
                      uint64_t v163 = &v155[8 * v162];
                      uint64_t v164 = *(void *)v163;
                      if (*(void *)v163 != -1)
                      {
                        char v165 = 0;
                        int v166 = 1;
                        while (v164 != v154)
                        {
                          if (v165) {
                            BOOL v167 = 0;
                          }
                          else {
                            BOOL v167 = v164 == -2;
                          }
                          if (v167) {
                            char v165 = v163;
                          }
                          unsigned int v168 = v162 + v166++;
                          unsigned int v162 = v168 & v161;
                          uint64_t v163 = &v155[8 * (v168 & v161)];
                          uint64_t v164 = *(void *)v163;
                          if (*(void *)v163 == -1) {
                            goto LABEL_350;
                          }
                        }
                        goto LABEL_359;
                      }
                      char v165 = 0;
LABEL_350:
                      if (v165) {
                        int v169 = v165;
                      }
                      else {
                        int v169 = v163;
                      }
                      if (*(void *)v169 == v154) {
                        goto LABEL_359;
                      }
                      if (*(void *)v169 == -2) {
                        --v851;
                      }
                      else {
                        ++HIDWORD(v850);
                      }
                      *(void *)int v169 = v154;
LABEL_357:
                      if (LODWORD(v862[1]) >= (unint64_t)HIDWORD(v862[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v862[0] + LODWORD(v862[1])) = v154;
                      ++LODWORD(v862[1]);
LABEL_359:
                      uint64_t v153 = *(void *)(v153 + 8);
                      if (!v153) {
                        goto LABEL_272;
                      }
                    }
                    if (v160 >= 0x40) {
                      v160 *= 2;
                    }
                    else {
                      unsigned int v160 = 128;
                    }
LABEL_366:
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v848, v160);
                    unsigned int v160 = v850;
                    uint64_t v155 = (char *)v849;
                    goto LABEL_338;
                  }
                  break;
                case 'M':
                  uint64_t v134 = *(void *)(v132 + 8);
                  if (v134)
                  {
                    while (1)
                    {
                      uint64_t v135 = *(void *)(v134 + 24);
                      int v136 = (char *)v849;
                      uint64_t v137 = HIDWORD(v850);
                      if (v849 == v848)
                      {
                        if (HIDWORD(v850))
                        {
                          uint64_t v138 = 0;
                          uint64_t v139 = 8 * HIDWORD(v850);
                          int v140 = v849;
                          while (*v140 != v135)
                          {
                            if (*v140 == -2) {
                              uint64_t v138 = v140;
                            }
                            ++v140;
                            v139 -= 8;
                            if (!v139)
                            {
                              if (!v138) {
                                goto LABEL_285;
                              }
                              *uint64_t v138 = v135;
                              --v851;
                              goto LABEL_309;
                            }
                          }
                          goto LABEL_311;
                        }
LABEL_285:
                        unsigned int v141 = v850;
                        if (HIDWORD(v850) < v850)
                        {
                          ++HIDWORD(v850);
                          *((void *)v849 + v137) = v135;
                          goto LABEL_309;
                        }
                      }
                      else
                      {
                        unsigned int v141 = v850;
                      }
                      if (3 * v141 <= 4 * (HIDWORD(v850) - v851)) {
                        break;
                      }
                      if (v141 - HIDWORD(v850) < v141 >> 3) {
                        goto LABEL_318;
                      }
LABEL_290:
                      unsigned int v142 = v141 - 1;
                      unsigned int v143 = (v141 - 1) & ((v135 >> 4) ^ (v135 >> 9));
                      uint64_t v144 = &v136[8 * v143];
                      uint64_t v145 = *(void *)v144;
                      if (*(void *)v144 != -1)
                      {
                        uint64_t v146 = 0;
                        int v147 = 1;
                        while (v145 != v135)
                        {
                          if (v146) {
                            BOOL v148 = 0;
                          }
                          else {
                            BOOL v148 = v145 == -2;
                          }
                          if (v148) {
                            uint64_t v146 = v144;
                          }
                          unsigned int v149 = v143 + v147++;
                          unsigned int v143 = v149 & v142;
                          uint64_t v144 = &v136[8 * (v149 & v142)];
                          uint64_t v145 = *(void *)v144;
                          if (*(void *)v144 == -1) {
                            goto LABEL_302;
                          }
                        }
                        goto LABEL_311;
                      }
                      uint64_t v146 = 0;
LABEL_302:
                      if (v146) {
                        unsigned int v150 = v146;
                      }
                      else {
                        unsigned int v150 = v144;
                      }
                      if (*(void *)v150 == v135) {
                        goto LABEL_311;
                      }
                      if (*(void *)v150 == -2) {
                        --v851;
                      }
                      else {
                        ++HIDWORD(v850);
                      }
                      *(void *)unsigned int v150 = v135;
LABEL_309:
                      if (LODWORD(v862[1]) >= (unint64_t)HIDWORD(v862[1])) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v862[0] + LODWORD(v862[1])) = v135;
                      ++LODWORD(v862[1]);
LABEL_311:
                      uint64_t v134 = *(void *)(v134 + 8);
                      if (!v134) {
                        goto LABEL_272;
                      }
                    }
                    if (v141 >= 0x40) {
                      v141 *= 2;
                    }
                    else {
                      unsigned int v141 = 128;
                    }
LABEL_318:
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v848, v141);
                    unsigned int v141 = v850;
                    int v136 = (char *)v849;
                    goto LABEL_290;
                  }
                  break;
                default:
                  goto LABEL_439;
              }
            }
LABEL_371:
            unsigned __int8 v171 = v828;
            uint64_t v792 = v29;
            if (v835 || v828)
            {
              int v172 = v836;
              uint64_t v173 = v836[3];
              uint64_t v174 = *(void *)(v173 + 40) + 272;
              DWORD2(v822) = 64;
              *(void *)&long long v822 = v835;
              uint64_t v866 = v870;
              int v867 = v870;
              uint64_t v868 = 32;
              int v869 = 0;
              char v175 = sub_1CC06D628((uint64_t)v836, v828, (uint64_t)&v822, v174, 0, 0, 0, (uint64_t)&v866, 16);
              if (v867 == v866)
              {
                if ((v175 & 1) == 0)
                {
LABEL_375:
                  uint64_t v176 = *(void *)(v173 + 8);
                  if (v176)
                  {
                    while (1)
                    {
                      uint64_t v177 = *(void *)(*(void *)(v176 + 24)
                                       - 32 * (*(_DWORD *)(*(void *)(v176 + 24) + 20) & 0x7FFFFFF)
                                       + 32 * *((unsigned int *)v172 + 8));
                      uint64_t v866 = v870;
                      int v867 = v870;
                      uint64_t v868 = 32;
                      int v869 = 0;
                      int v178 = sub_1CC06D628(v177, v171, (uint64_t)&v822, v174, 0, 0, 0, (uint64_t)&v866, 16);
                      if (v867 == v866)
                      {
                        if ((v178 & 1) == 0) {
                          goto LABEL_392;
                        }
                      }
                      else
                      {
                        free(v867);
                        if ((v178 & 1) == 0) {
                          goto LABEL_392;
                        }
                      }
                      uint64_t v176 = *(void *)(v176 + 8);
                      if (!v176) {
                        goto LABEL_392;
                      }
                    }
                  }
                }
              }
              else
              {
                free(v867);
                if ((v175 & 1) == 0) {
                  goto LABEL_375;
                }
              }
              int v178 = 1;
LABEL_392:
              if (DWORD2(v822) >= 0x41 && (void)v822) {
                MEMORY[0x1D25D9CB0](v822, 0x1000C8000313F17);
              }
              uint64_t v29 = v792;
              if (!v178) {
                goto LABEL_439;
              }
            }
            if (v858 < 2)
            {
              char v179 = 1;
              goto LABEL_440;
            }
            BOOL v181 = v862;
            int v180 = (llvm::MDNode **)&v859;
            if (v858) {
              goto LABEL_401;
            }
            int v180 = v859;
            unsigned int v182 = v860;
            if (v860)
            {
              BOOL v181 = &v859[4 * v860];
LABEL_401:
              while ((unint64_t)*v180 - 0x7FFFFFFFFFFFFFFFLL <= 1)
              {
                v180 += 4;
                if (v180 == v181)
                {
                  int v180 = v181;
                  break;
                }
              }
              unsigned int v183 = v180;
              int v180 = v859;
              unsigned int v182 = v860;
            }
            else
            {
              unsigned int v183 = v859;
              BOOL v181 = v859;
            }
            uint64_t v184 = (llvm::MDNode **)&v859;
            if (v858)
            {
              uint64_t v185 = 4;
            }
            else
            {
              uint64_t v184 = v180;
              uint64_t v185 = v182;
            }
            unsigned int v186 = &v184[4 * v185];
            if (v183 == v186)
            {
              uint64_t v187 = 0;
            }
            else
            {
              uint64_t v187 = 0;
              unsigned int v188 = v183;
              do
              {
                ++v187;
                char v189 = v188 + 4;
                while (v189 != v181)
                {
                  unsigned int v190 = *v189;
                  v189 += 4;
                  if ((unint64_t)v190 - 0x7FFFFFFFFFFFFFFFLL >= 2)
                  {
                    unsigned int v188 = v189 - 4;
                    goto LABEL_415;
                  }
                }
                unsigned int v188 = v181;
LABEL_415:
                ;
              }
              while (v188 != v186);
            }
            int v191 = v839;
            if (v187 + (unint64_t)v839 > HIDWORD(v839)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v192 = v838;
            if (v183 != v186)
            {
              uint64_t v193 = (char *)v838 + 32 * v839;
              do
              {
                long long v194 = *((_OWORD *)v183 + 1);
                *uint64_t v193 = *(_OWORD *)v183;
                v193[1] = v194;
                uint64_t v195 = v183 + 4;
                while (v195 != v181)
                {
                  char v196 = *v195;
                  v195 += 4;
                  if ((unint64_t)v196 - 0x7FFFFFFFFFFFFFFFLL >= 2)
                  {
                    unsigned int v183 = v195 - 4;
                    goto LABEL_427;
                  }
                }
                unsigned int v183 = v181;
LABEL_427:
                v193 += 2;
              }
              while (v183 != v186);
              int v191 = v839;
              uint64_t v192 = v838;
            }
            unint64_t v197 = (v191 + v187);
            BOOL v23 = v197 == 0;
            LODWORD(v839) = v197;
            unint64_t v198 = (unint64_t)v192 + 32 * v197;
            unint64_t v199 = 126 - 2 * __clz(v197);
            if (v23) {
              uint64_t v200 = 0;
            }
            else {
              uint64_t v200 = v199;
            }
            sub_1CC8A78E0((unint64_t)v192, v198, v200, 1);
            unsigned int v30 = a4;
            if (v839)
            {
              unint64_t v201 = (char *)v838;
              int v202 = (char *)v838 + 32 * v839;
              uint64_t v203 = *(void *)v838;
              do
              {
                uint64_t v204 = *(void *)v201;
                if (*(void *)v201 < v203) {
                  goto LABEL_439;
                }
                uint64_t v206 = sub_1CB83544C((uint64_t)v812, *((void *)v201 + 1));
                if (v205 == 1) {
                uint64_t v203 = ((unint64_t)(v206 + 7) >> 3) + v204;
                }
                v201 += 32;
              }
              while (v201 != v202);
            }
            uint64_t v866 = v870;
            int v867 = v870;
            uint64_t v868 = 16;
            int v869 = 0;
            if (!__n)
            {
              char v179 = 1;
              goto LABEL_649;
            }
            __int16 v212 = (uint64_t **)v845;
            int v787 = (uint64_t **)((char *)v845 + 8 * __n);
            uint64_t v213 = v805;
            while (2)
            {
              unsigned int v214 = (uint64_t ***)*v212;
              unsigned int v215 = (void *)(*v212)[5];
              uint64_t v216 = *(*v212 - 4);
              uint64_t v217 = sub_1CB83544C(*(void *)(v215[7] + 40) + 272, **v212);
              if (v218 == 1) {
                unint64_t v219 = -2;
              }
              else {
                unint64_t v219 = (unint64_t)(v217 + 7) >> 3;
              }
              llvm::Instruction::getAAMetadata(v214, &v823);
              *(void *)&long long v822 = v216;
              *((void *)&v822 + 1) = v219;
              uint64_t v220 = v215[6];
              if (v220) {
                uint64_t v221 = v220 - 24;
              }
              else {
                uint64_t v221 = 0;
              }
              if (llvm::AAResults::canInstructionRangeModRef((uint64_t)v213, v221, (uint64_t)v214, &v822, 6))
              {
                char v179 = 0;
LABEL_648:
                unsigned int v30 = a4;
LABEL_649:
                if (v867 != v866) {
                  free(v867);
                }
LABEL_440:
                if (v845 != v847) {
                  free(v845);
                }
                if (v849 != v848) {
                  free(v849);
                }
                if ((llvm::MDNode **)v862[0] != &v863) {
                  free(v862[0]);
                }
                if (v858)
                {
                  if (v179) {
                    goto LABEL_448;
                  }
                }
                else
                {
                  MEMORY[0x1D25D9CD0](v859, 8);
                  if (v179)
                  {
LABEL_448:
                    uint64_t v170 = &v850;
                    unsigned int v848 = &v850;
                    v849 = (void *)0x400000000;
                    LODWORD(v105) = 0;
                    if (v839)
                    {
                      uint64_t v207 = 32 * v839;
                      uint64_t v208 = (char *)v838 + 8;
                      do
                      {
                        if (v105 >= HIDWORD(v849)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((void *)v848 + v105) = *v208;
                        LODWORD(v105) = v849 + 1;
                        LODWORD(v849) = v849 + 1;
                        v208 += 4;
                        v207 -= 32;
                      }
                      while (v207);
                      uint64_t v170 = (uint64_t *)v848;
                    }
LABEL_454:
                    if ((sub_1CC8A6E60((uint64_t)v170, v105, *((void *)v11 + 1), a6) & 1) == 0)
                    {
LABEL_469:
                      if (v848 != &v850) {
                        free(v848);
                      }
                      goto LABEL_471;
                    }
                    uint64_t v866 = v31;
                    int v867 = &v869;
                    uint64_t v868 = 0x400000000;
                    if (v839)
                    {
                      sub_1CC8A89BC((char **)&v867, (char **)&v838);
                      unint64_t v31 = v866;
                    }
                    v862[0] = 0;
                    unsigned int v209 = v821;
                    if (sub_1CC8A8750(v819, v821, (uint64_t)v31, v862))
                    {
LABEL_467:
                      if (v867 != &v869) {
                        free(v867);
                      }
                      goto LABEL_469;
                    }
                    if (4 * (int)v820 + 4 >= 3 * v209)
                    {
                      int v210 = 2 * v209;
                    }
                    else
                    {
                      if (v209 + ~v820 - HIDWORD(v820) > v209 >> 3)
                      {
LABEL_463:
                        unsigned int v211 = v862[0];
                        LODWORD(v820) = v820 + 1;
                        if (*(void *)v862[0] != -4096) {
                          --HIDWORD(v820);
                        }
                        *(void *)v862[0] = v866;
                        *((void *)v211 + 1) = (char *)v211 + 24;
                        *((void *)v211 + 2) = 0x400000000;
                        if (v868) {
                          sub_1CC8A89BC((char **)v211 + 1, (char **)&v867);
                        }
                        goto LABEL_467;
                      }
                      int v210 = v209;
                    }
                    sub_1CC8A87E8((uint64_t)&v819, v210);
                    v862[0] = 0;
                    sub_1CC8A8750(v819, v821, (uint64_t)v866, v862);
                    goto LABEL_463;
                  }
                }
LABEL_471:
                if (v838 != v840) {
                  free(v838);
                }
                goto LABEL_473;
              }
              uint64_t v222 = v215[1];
              if (!v222) {
                goto LABEL_496;
              }
              while (1)
              {
                uint64_t v223 = *(void *)(v222 + 24);
                unsigned int v224 = *(unsigned __int8 *)(v223 + 16);
                BOOL v225 = v223 && v224 >= 0x1C;
                BOOL v226 = !v225 || v224 - 29 > 0xA;
                if (!v226) {
                  break;
                }
                uint64_t v222 = *(void *)(v222 + 8);
                if (!v222) {
                  goto LABEL_496;
                }
              }
LABEL_514:
              uint64_t v234 = *(void *)(v223 + 40);
              int v233 = (char *)v867;
              uint64_t v235 = HIDWORD(v868);
              if (v867 == v866)
              {
                if (HIDWORD(v868))
                {
                  uint64_t v236 = 0;
                  uint64_t v237 = 8 * HIDWORD(v868);
                  uint64_t v238 = v867;
                  while (*v238 != v234)
                  {
                    if (*v238 == -2) {
                      uint64_t v236 = v238;
                    }
                    ++v238;
                    v237 -= 8;
                    if (!v237)
                    {
                      if (v236)
                      {
                        *uint64_t v236 = v234;
                        --v869;
                        goto LABEL_546;
                      }
                      goto LABEL_522;
                    }
                  }
                  goto LABEL_507;
                }
LABEL_522:
                unsigned int v232 = v868;
                if (HIDWORD(v868) < v868)
                {
                  ++HIDWORD(v868);
                  *((void *)v867 + v235) = v234;
                  goto LABEL_546;
                }
              }
              else
              {
                unsigned int v232 = v868;
              }
              if (3 * v232 <= 4 * (HIDWORD(v868) - v869))
              {
                if (v232 >= 0x40) {
                  v232 *= 2;
                }
                else {
                  unsigned int v232 = 128;
                }
              }
              else if (v232 - HIDWORD(v868) >= v232 >> 3)
              {
LABEL_527:
                unsigned int v239 = v232 - 1;
                unsigned int v240 = (v232 - 1) & ((v234 >> 4) ^ (v234 >> 9));
                int v241 = &v233[8 * v240];
                uint64_t v242 = *(void *)v241;
                if (*(void *)v241 != -1)
                {
                  uint64_t v243 = 0;
                  int v244 = 1;
                  while (v242 != v234)
                  {
                    if (v243) {
                      BOOL v245 = 0;
                    }
                    else {
                      BOOL v245 = v242 == -2;
                    }
                    if (v245) {
                      uint64_t v243 = v241;
                    }
                    unsigned int v246 = v240 + v244++;
                    unsigned int v240 = v246 & v239;
                    int v241 = &v233[8 * (v246 & v239)];
                    uint64_t v242 = *(void *)v241;
                    if (*(void *)v241 == -1) {
                      goto LABEL_539;
                    }
                  }
                  goto LABEL_507;
                }
                uint64_t v243 = 0;
LABEL_539:
                if (v243) {
                  uint64_t v247 = v243;
                }
                else {
                  uint64_t v247 = v241;
                }
                if (*(void *)v247 == v234)
                {
LABEL_507:
                  unint64_t v230 = 0;
                  unsigned int v231 = 0;
                }
                else
                {
                  if (*(void *)v247 == -2) {
                    --v869;
                  }
                  else {
                    ++HIDWORD(v868);
                  }
                  *(void *)uint64_t v247 = v234;
LABEL_546:
                  unsigned int v231 = operator new(0x18uLL);
                  *(void *)unsigned int v231 = v234;
                  v231[8] = 0;
                  v231[16] = 0;
                  unint64_t v230 = v231 + 24;
                }
                __src = &v866;
                v833 = 0;
                int v834 = 0;
                std::string __p = 0;
                sub_1CBF340A8(&__p, v231, v230, 0xAAAAAAAAAAAAAAABLL * ((v230 - v231) >> 3));
                if (v231) {
                  operator delete(v231);
                }
                long long v248 = __p;
                int v249 = v833;
                unint64_t v250 = 0xAAAAAAAAAAAAAAABLL * (((char *)v833 - (unsigned char *)__p) >> 3);
                v833 = 0;
                int v834 = 0;
                std::string __p = 0;
                sub_1CBF340A8(&__p, v248, v249, v250);
                uint64_t v251 = v833;
                if (v833 == __p)
                {
                  int v289 = 1;
                  if (v833) {
                    goto LABEL_641;
                  }
                  goto LABEL_642;
                }
                while (2)
                {
                  int canBasicBlockModify = llvm::AAResults::canBasicBlockModify(v213, *(v251 - 3), (const llvm::MemoryLocation *)&v822);
                  if (!canBasicBlockModify)
                  {
                    uint64_t v251 = v833;
                    while (1)
                    {
                      if (*((unsigned char *)v251 - 8))
                      {
                        uint64_t v253 = *(v251 - 2);
                        if (v253) {
                          break;
                        }
                        goto LABEL_608;
                      }
                      uint64_t v253 = *(v251 - 3);
                      do
                      {
                        uint64_t v253 = (const llvm::BasicBlock *)*((void *)v253 + 1);
                        if (!v253) {
                          break;
                        }
                        uint64_t v276 = *((void *)v253 + 3);
                        unsigned int v277 = *(unsigned __int8 *)(v276 + 16);
                        BOOL v278 = v276 && v277 >= 0x1C;
                      }
                      while (!v278 || v277 - 29 >= 0xB);
                      *(v251 - 2) = v253;
                      *((unsigned char *)v251 - 8) = 1;
                      if (v253) {
                        break;
                      }
LABEL_608:
                      uint64_t v251 = v833 - 3;
                      v833 = v251;
                      if (__p == v251) {
                        goto LABEL_640;
                      }
                    }
                    while (2)
                    {
                      unsigned int v254 = v253;
                      do
                      {
                        unsigned int v254 = (const llvm::BasicBlock *)*((void *)v254 + 1);
                        if (!v254) {
                          break;
                        }
                        uint64_t v255 = *((void *)v254 + 3);
                        unsigned int v256 = *(unsigned __int8 *)(v255 + 16);
                        BOOL v257 = v255 && v256 >= 0x1C;
                      }
                      while (!v257 || v256 - 29 > 0xA);
                      *(v251 - 2) = v254;
                      uint64_t v259 = *(const llvm::BasicBlock **)(*((void *)v253 + 3) + 40);
                      uint64_t v260 = __src;
                      uint64_t v261 = *((void *)__src + 1);
                      uint64_t v262 = *((unsigned int *)__src + 5);
                      if (v261 == *(void *)__src)
                      {
                        if (v262)
                        {
                          uint64_t v263 = 0;
                          uint64_t v264 = 8 * v262;
                          int v265 = (const llvm::BasicBlock **)*((void *)__src + 1);
                          while (*v265 != v259)
                          {
                            if (*v265 == (const llvm::BasicBlock *)-2) {
                              uint64_t v263 = v265;
                            }
                            ++v265;
                            v264 -= 8;
                            if (!v264)
                            {
                              if (!v263) {
                                goto LABEL_571;
                              }
                              *uint64_t v263 = v259;
                              --v260[6];
                              goto LABEL_614;
                            }
                          }
LABEL_592:
                          uint64_t v253 = *(v251 - 2);
                          if (!v253) {
                            goto LABEL_608;
                          }
                          continue;
                        }
LABEL_571:
                        unsigned int v266 = *((_DWORD *)__src + 4);
                        if (v262 < v266)
                        {
                          *((_DWORD *)__src + 5) = v262 + 1;
                          *(void *)(v261 + 8 * v262) = v259;
                          goto LABEL_614;
                        }
                      }
                      else
                      {
                        unsigned int v266 = *((_DWORD *)__src + 4);
                      }
                      break;
                    }
                    if (3 * v266 <= 4 * ((int)v262 - *((_DWORD *)__src + 6)))
                    {
                      if (v266 >= 0x40) {
                        v266 *= 2;
                      }
                      else {
                        unsigned int v266 = 128;
                      }
                    }
                    else if (v266 - v262 >= v266 >> 3)
                    {
LABEL_576:
                      unsigned int v267 = v266 - 1;
                      unsigned int v268 = (v266 - 1) & ((v259 >> 4) ^ (v259 >> 9));
                      uint64_t v269 = (const llvm::BasicBlock **)(v261 + 8 * v268);
                      BOOL v270 = *v269;
                      if (*v269 == (const llvm::BasicBlock *)-1)
                      {
                        uint64_t v271 = 0;
LABEL_588:
                        if (v271) {
                          BOOL v275 = v271;
                        }
                        else {
                          BOOL v275 = v269;
                        }
                        if (*v275 == v259) {
                          goto LABEL_592;
                        }
                        if (*v275 == (const llvm::BasicBlock *)-2) {
                          --v260[6];
                        }
                        else {
                          ++v260[5];
                        }
                        *BOOL v275 = v259;
LABEL_614:
                        uint64_t v280 = v833;
                        if (v833 >= (const llvm::BasicBlock **)v834)
                        {
                          uint64_t v281 = __p;
                          unint64_t v282 = 0xAAAAAAAAAAAAAAABLL * (((char *)v833 - (unsigned char *)__p) >> 3);
                          unint64_t v283 = v282 + 1;
                          if (v282 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_1427:
                          }
                            abort();
                          if (0x5555555555555556 * ((v834 - (unsigned char *)__p) >> 3) > v283) {
                            unint64_t v283 = 0x5555555555555556 * ((v834 - (unsigned char *)__p) >> 3);
                          }
                          if (0xAAAAAAAAAAAAAAABLL * ((v834 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
                            unint64_t v284 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v284 = v283;
                          }
                          if (v284)
                          {
                            if (v284 > 0xAAAAAAAAAAAAAAALL) {
LABEL_1428:
                            }
                              sub_1CB833614();
                            int v285 = (char *)operator new(24 * v284);
                          }
                          else
                          {
                            int v285 = 0;
                          }
                          int64x2_t v286 = &v285[24 * v282];
                          *(void *)int64x2_t v286 = v259;
                          v286[8] = 0;
                          v286[16] = 0;
                          unsigned int v287 = v286;
                          if (v280 == v281)
                          {
                            uint64_t v213 = v805;
                          }
                          else
                          {
                            uint64_t v213 = v805;
                            do
                            {
                              long long v288 = *(_OWORD *)(v280 - 24);
                              *((void *)v287 - 1) = *((void *)v280 - 1);
                              *(_OWORD *)(v287 - 24) = v288;
                              v287 -= 24;
                              v280 -= 24;
                            }
                            while (v280 != v281);
                            uint64_t v280 = __p;
                          }
                          uint64_t v251 = (const llvm::BasicBlock **)(v286 + 24);
                          std::string __p = v287;
                          v833 = (const llvm::BasicBlock **)(v286 + 24);
                          int v834 = &v285[24 * v284];
                          if (v280) {
                            operator delete(v280);
                          }
                        }
                        else
                        {
                          llvm::Value *v833 = v259;
                          v280[8] = 0;
                          uint64_t v251 = (const llvm::BasicBlock **)(v280 + 24);
                          v280[16] = 0;
                        }
                        v833 = v251;
                        if (v251 == __p)
                        {
                          uint64_t v251 = (const llvm::BasicBlock **)__p;
                          goto LABEL_640;
                        }
                        continue;
                      }
                      uint64_t v271 = 0;
                      int v272 = 1;
                      while (v270 != v259)
                      {
                        if (v271) {
                          BOOL v273 = 0;
                        }
                        else {
                          BOOL v273 = v270 == (const llvm::BasicBlock *)-2;
                        }
                        if (v273) {
                          uint64_t v271 = v269;
                        }
                        unsigned int v274 = v268 + v272++;
                        unsigned int v268 = v274 & v267;
                        uint64_t v269 = (const llvm::BasicBlock **)(v261 + 8 * (v274 & v267));
                        BOOL v270 = *v269;
                        if (*v269 == (const llvm::BasicBlock *)-1) {
                          goto LABEL_588;
                        }
                      }
                      goto LABEL_592;
                    }
                    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)__src, v266);
                    unsigned int v266 = v260[4];
                    uint64_t v261 = *((void *)v260 + 1);
                    goto LABEL_576;
                  }
                  break;
                }
                uint64_t v251 = (const llvm::BasicBlock **)__p;
LABEL_640:
                int v289 = canBasicBlockModify ^ 1;
                if (v251)
                {
LABEL_641:
                  v833 = v251;
                  operator delete(v251);
                }
LABEL_642:
                if (v248) {
                  operator delete(v248);
                }
                uint64_t v29 = v792;
                if (!v289)
                {
                  char v179 = 0;
                  int v11 = v808;
                  goto LABEL_648;
                }
                while (1)
                {
                  uint64_t v222 = *(void *)(v222 + 8);
                  if (!v222) {
                    break;
                  }
                  uint64_t v223 = *(void *)(v222 + 24);
                  unsigned int v227 = *(unsigned __int8 *)(v223 + 16);
                  if (v223) {
                    BOOL v228 = v227 >= 0x1C;
                  }
                  else {
                    BOOL v228 = 0;
                  }
                  if (v228 && v227 - 29 < 0xB) {
                    goto LABEL_514;
                  }
                }
LABEL_496:
                ++v212;
                int v11 = v808;
                if (v212 == v787)
                {
                  char v179 = 1;
                  goto LABEL_648;
                }
                continue;
              }
              break;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v866, v232);
            unsigned int v232 = v868;
            int v233 = (char *)v867;
            goto LABEL_527;
          }
        }
        if (v122 >= 0x40) {
          v122 *= 2;
        }
        else {
          unsigned int v122 = 128;
        }
LABEL_267:
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v848, v122);
        unsigned int v122 = v850;
        unsigned int v117 = (char *)v849;
        goto LABEL_239;
      }
    }
    else
    {
      uint64_t v100 = 0;
      int v101 = 1;
      while (v99 != v31)
      {
        if (v100) {
          BOOL v102 = 0;
        }
        else {
          BOOL v102 = v99 == (void *)-2;
        }
        if (v102) {
          uint64_t v100 = v98;
        }
        unsigned int v103 = v97 + v101++;
        unsigned int v97 = v103 & v96;
        unsigned int v98 = &v90[8 * (v103 & v96)];
        unsigned int v99 = *(void **)v98;
        if (*(void *)v98 == -1) {
          goto LABEL_195;
        }
      }
    }
LABEL_202:
    int v95 = 0;
    goto LABEL_203;
  }
LABEL_39:
  int v14 = 0;
LABEL_1422:
  if (v842 != v844) {
    free(v842);
  }
  return v14;
}