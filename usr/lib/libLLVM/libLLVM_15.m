void sub_1CC05DD58(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  llvm::Instruction *v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void *i;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int64_t v41;
  BOOL v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  int64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm **v69;
  llvm *v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  llvm::PointerType *v78;
  void *v79;
  __int16 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int64x2_t v84;
  uint64_t v85;
  void *v86;
  __int16 v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int64x2_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;

  v4 = a4;
  v96 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    v4 = (llvm::Instruction *)a2;
    if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
      return;
    }
  }
  v8 = (void *)*((void *)v4 + 5);
  v9 = *(void *)(a1 + 216);
  if (!*(unsigned char *)(v9 + 184)) {
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 216));
  }
  v10 = *(void *)(v9 + 160);
  v11 = *(_DWORD *)(v9 + 176);
  if (!v11)
  {
LABEL_6:
    v12 = v10 + 88 * v11;
    goto LABEL_7;
  }
  v54 = v11 - 1;
  v55 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v10 + 88 * v55;
  v56 = *(void *)(v12 + 24);
  if (v56 != a2)
  {
    v57 = 1;
    while (v56 != -4096)
    {
      v58 = v55 + v57++;
      v55 = v58 & v54;
      v12 = v10 + 88 * (v58 & v54);
      v56 = *(void *)(v12 + 24);
      if (v56 == a2) {
        goto LABEL_7;
      }
    }
    goto LABEL_6;
  }
LABEL_7:
  if (v12 != v10 + 88 * v11)
  {
    v67 = *(unsigned int *)(v12 + 48);
    if (v67)
    {
      v68 = 32 * v67;
      v69 = (llvm **)(*(void *)(v12 + 40) + 16);
      do
      {
        v70 = *v69;
        if (*v69 && *((void **)v70 + 5) == v8 && llvm::isValidAssumeForContext(*v69, v4, 0, a4))
        {
          sub_1CC05F3C8((unint64_t)&v87, (llvm::Type **)a2, *((void **)v70 - 4 * (*((_DWORD *)v70 + 5) & 0x7FFFFFF)), 1);
          sub_1CC05EC7C((uint64_t)&v92, (unsigned __int8 *)a3, &v87);
          if ((*(_WORD *)a3 & 0xFE) == 4)
          {
            if (*(_DWORD *)(a3 + 32) >= 0x41u)
            {
              v73 = *(void *)(a3 + 24);
              if (v73) {
                MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
              }
            }
            if (*(_DWORD *)(a3 + 16) >= 0x41u)
            {
              v74 = *(void *)(a3 + 8);
              if (v74) {
                MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
              }
            }
          }
          v71 = v92;
          v72 = v92;
          *(_WORD *)a3 = v92;
          if ((v72 - 2) < 2)
          {
            *(void *)(a3 + 8) = v93.i64[0];
          }
          else if ((v72 - 4) <= 1)
          {
            *(_DWORD *)(a3 + 16) = v93.i32[2];
            *(void *)(a3 + 8) = v93.i64[0];
            *(_DWORD *)(a3 + 32) = v95;
            *(void *)(a3 + 24) = v94;
            v93.i32[2] = 0;
            v95 = 0;
            *(_WORD *)a3 = v71;
          }
          LOWORD(v92) = v71 & 0xFF00;
          if ((v87 & 0xFE) == 4)
          {
            if (v91 >= 0x41 && v90) {
              MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
            }
            if (v89 >= 0x41 && v88) {
              MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
            }
          }
        }
        v69 += 4;
        v68 -= 32;
      }
      while (v68);
    }
  }
  v13 = *(void *)(a1 + 232);
  if (v13)
  {
    if (*(void *)(v13 + 8))
    {
      v14 = (void **)((char *)v4 + 24);
      if ((llvm::Instruction *)((char *)v4 + 24) != (llvm::Instruction *)v8[6])
      {
        for (i = *v14; i != v8 + 5; i = (void *)*i)
        {
          v86 = 0;
          if (i) {
            v16 = (uint64_t)(i - 3);
          }
          else {
            v16 = 0;
          }
          LODWORD(v92) = 125;
          v93.i64[0] = 0;
          v93.i64[1] = (uint64_t)&v86;
          if (sub_1CC062C2C((uint64_t)&v92, v16))
          {
            sub_1CC05F3C8((unint64_t)&v87, (llvm::Type **)a2, v86, 1);
            sub_1CC05EC7C((uint64_t)&v92, (unsigned __int8 *)a3, &v87);
            if ((*(_WORD *)a3 & 0xFE) == 4)
            {
              if (*(_DWORD *)(a3 + 32) >= 0x41u)
              {
                v19 = *(void *)(a3 + 24);
                if (v19) {
                  MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
                }
              }
              if (*(_DWORD *)(a3 + 16) >= 0x41u)
              {
                v20 = *(void *)(a3 + 8);
                if (v20) {
                  MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
                }
              }
            }
            v17 = v92;
            v18 = v92;
            *(_WORD *)a3 = v92;
            if ((v18 - 2) < 2)
            {
              *(void *)(a3 + 8) = v93.i64[0];
            }
            else if ((v18 - 4) <= 1)
            {
              *(_DWORD *)(a3 + 16) = v93.i32[2];
              *(void *)(a3 + 8) = v93.i64[0];
              *(_DWORD *)(a3 + 32) = v95;
              *(void *)(a3 + 24) = v94;
              v93.i32[2] = 0;
              v95 = 0;
              *(_WORD *)a3 = v17;
            }
            LOWORD(v92) = v17 & 0xFF00;
            if ((v87 & 0xFE) == 4)
            {
              if (v91 >= 0x41 && v90) {
                MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
              }
              if (v89 >= 0x41 && v88) {
                MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
  }
  if (*(unsigned char *)a3 != 6) {
    return;
  }
  v21 = *(llvm::Type **)a2;
  if (!*(void *)a2) {
    return;
  }
  v22 = *((_DWORD *)v21 + 2);
  if (v22 != 15) {
    return;
  }
  v24 = v8 + 5;
  v23 = (void *)v8[5];
  if (v23 == v8 + 5)
  {
    v25 = 0;
  }
  else
  {
    if (v23) {
      v25 = (unsigned __int8 *)(v23 - 3);
    }
    else {
      v25 = 0;
    }
    if (v25[16] - 29 >= 0xB) {
      v25 = 0;
    }
  }
  if (v25 != (unsigned __int8 *)v4) {
    return;
  }
  v26 = v8[7];
  if ((v22 & 0xFE) == 0x12) {
    v22 = *(_DWORD *)(**((void **)v21 + 2) + 8);
  }
  if (v26)
  {
    v27 = *(void *)(v26 + 112);
    if (v27)
    {
      if (*(unsigned char *)(v27 + 17)) {
        return;
      }
    }
  }
  if (v22 > 0xFF) {
    return;
  }
  v28 = llvm::Value::stripInBoundsOffsets(a2, (void (*)(uint64_t, uint64_t))nullsub_608, (uint64_t)&v92);
  v29 = sub_1CC062CF8(a1, (uint64_t)v8);
  v30 = (unsigned int *)(v29 + 240);
  if (*(unsigned char *)(v29 + 264)) {
    goto LABEL_160;
  }
  v31 = v29;
  v85 = v28;
  v32 = (uint64_t *)(v29 + 264);
  v92 = 1;
  v84 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v93 = v84;
  v33 = (void *)v8[6];
  if (v33 == v24) {
    goto LABEL_104;
  }
  do
  {
    if (v33) {
      v34 = (uint64_t)(v33 - 3);
    }
    else {
      v34 = 0;
    }
    v35 = *(unsigned __int8 *)(v34 + 16);
    if (v33 && v35 == 60 || v33 && v35 == 61)
    {
      v36 = (uint64_t *)(v34 - 32);
LABEL_65:
      sub_1CC063A80(*v36, &v92);
      goto LABEL_66;
    }
    if (sub_1CBFB3AB0(v34) && v33)
    {
      v37 = (uint64_t *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF));
      v38 = v37[12];
      v39 = *(unsigned int *)(v38 + 32);
      if (v39 > 0x40)
      {
        v40 = 0;
        v41 = (unint64_t)(v39 + 63) >> 6;
        do
        {
          v42 = v41-- < 1;
          if (v42) {
            break;
          }
          v43 = *(void *)(*(void *)(v38 + 24) + 8 * v41);
          v40 += __clz(v43);
        }
        while (!v43);
        v44 = v39 | 0xFFFFFFC0;
        if ((v39 & 0x3F) == 0) {
          v44 = 0;
        }
        if (v40 + v44 != v39) {
          goto LABEL_66;
        }
      }
      else if (*(void *)(v38 + 24))
      {
        goto LABEL_66;
      }
      v45 = v37[8];
      if (v45) {
        v46 = *(unsigned char *)(v45 + 16) == 16;
      }
      else {
        v46 = 0;
      }
      if (!v46) {
        goto LABEL_66;
      }
      v47 = *(unsigned int *)(v45 + 32);
      if (v47 > 0x40)
      {
        v48 = 0;
        v49 = (unint64_t)(v47 + 63) >> 6;
        do
        {
          v42 = v49-- < 1;
          if (v42) {
            break;
          }
          v50 = *(void *)(*(void *)(v45 + 24) + 8 * v49);
          v48 += __clz(v50);
        }
        while (!v50);
        v51 = v47 | 0xFFFFFFC0;
        if ((v47 & 0x3F) == 0) {
          v51 = 0;
        }
        if (v48 + v51 == v47) {
          goto LABEL_66;
        }
      }
      else if (!*(void *)(v45 + 24))
      {
        goto LABEL_66;
      }
      sub_1CC063A80(*v37, &v92);
      v52 = *(_DWORD *)(*(void *)(v34 - 32) + 36) - 194;
      if (v52 <= 3 && v52 != 1)
      {
        v36 = &v33[-4 * (*((_DWORD *)v33 - 1) & 0x7FFFFFF) + 1];
        goto LABEL_65;
      }
    }
LABEL_66:
    v33 = (void *)v33[1];
  }
  while (v33 != v24);
  if (*(unsigned char *)v32)
  {
    sub_1CD49B2B0((uint64_t)v30, (unsigned int *)&v92);
  }
  else
  {
LABEL_104:
    *(void *)(v31 + 240) = 1;
    *(int64x2_t *)(v31 + 248) = v84;
    sub_1CC063910(v30, (unsigned int *)&v92);
    *(unsigned char *)(v31 + 264) = 1;
  }
  if ((v92 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v93.i64[0], 8);
  }
  v59 = *v30;
  if (*v30 <= 1)
  {
    if (v59)
    {
      v60 = v31 + 248;
      v61 = 2;
    }
    else
    {
      v60 = *(void *)(v31 + 248);
      v61 = *(unsigned int *)(v31 + 256);
    }
    v62 = (uint64_t *)(v60 + 8 * v61);
    v32 = v62;
    if (!v59) {
      goto LABEL_151;
    }
LABEL_120:
    v65 = (uint64_t *)(v31 + 248);
    v66 = 2;
    goto LABEL_152;
  }
  if (v59)
  {
    v63 = (uint64_t *)(v31 + 248);
LABEL_114:
    v64 = *v30 & 1;
    v62 = v63;
    do
    {
      if (*v62 != -4096 && *v62 != -8192)
      {
        if (!v64) {
          goto LABEL_151;
        }
        goto LABEL_120;
      }
      ++v62;
    }
    while (v62 != v32);
    v62 = v32;
    if (v64) {
      goto LABEL_120;
    }
LABEL_151:
    v65 = *(uint64_t **)(v31 + 248);
    v66 = *(unsigned int *)(v31 + 256);
LABEL_152:
    v63 = v32;
  }
  else
  {
    v63 = *(uint64_t **)(v31 + 248);
    v75 = *(unsigned int *)(v31 + 256);
    if (v75)
    {
      v32 = &v63[v75];
      goto LABEL_114;
    }
    v66 = 0;
    v62 = *(uint64_t **)(v31 + 248);
    v65 = v62;
  }
  v76 = &v65[v66];
  v28 = v85;
  while (v62 != v76)
  {
    v77 = v62 + 1;
    sub_1CC062FBC(a1, *v62);
    v62 = v63;
    if (v77 != v63)
    {
      v62 = v77;
      while ((*v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v62 == v63)
        {
          v62 = v63;
          break;
        }
      }
    }
  }
LABEL_160:
  if (sub_1CC05AC44((uint64_t)v30, v28, &v92))
  {
    v79 = llvm::ConstantPointerNull::get(v21, v78);
    LOWORD(v92) = 0;
    sub_1CC063DD8((uint64_t)&v92, (uint64_t)v79);
    if ((*(_WORD *)a3 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a3 + 32) >= 0x41u)
      {
        v82 = *(void *)(a3 + 24);
        if (v82) {
          MEMORY[0x1D25D9CB0](v82, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(a3 + 16) >= 0x41u)
      {
        v83 = *(void *)(a3 + 8);
        if (v83) {
          MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
        }
      }
    }
    v80 = v92;
    v81 = v92;
    *(_WORD *)a3 = v92;
    if ((v81 - 2) < 2)
    {
      *(void *)(a3 + 8) = v93.i64[0];
    }
    else if ((v81 - 4) <= 1)
    {
      *(_DWORD *)(a3 + 16) = v93.i32[2];
      *(void *)(a3 + 8) = v93.i64[0];
      *(_DWORD *)(a3 + 32) = v95;
      *(void *)(a3 + 24) = v94;
      *(_WORD *)a3 = v80;
    }
  }
}

uint64_t sub_1CC05E6A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  __int16 v5 = *(_WORD *)a1;
  int v6 = *(_WORD *)a1;
  if ((v4 - 11) <= 1)
  {
    if (v6 != 1)
    {
      *(_WORD *)a1 = v5 & 0xFF00 | 1;
      return 1;
    }
    return 0;
  }
  if (v6 == 2) {
    return 0;
  }
  if (v4 != 16)
  {
    *(_WORD *)a1 = v5 & 0xFF00 | 2;
    *(void *)(a1 + 8) = a2;
    return 1;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  if (v9 > 0x40) {
    operator new[]();
  }
  uint64_t v10 = *(void *)(a2 + 24);
  unsigned int v14 = *(_DWORD *)(a2 + 32);
  uint64_t v13 = v10;
  unsigned int v18 = v9;
  uint64_t v17 = v10;
  llvm::APInt::operator+=((uint64_t)&v17, 1uLL);
  unsigned int v16 = v18;
  uint64_t v15 = v17;
  BOOL v11 = sub_1CC05E860((__int16 *)a1, (uint64_t)&v13, a3 | 0x100000000);
  BOOL v7 = v11;
  if (v16 >= 0x41 && v15) {
    MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
  }
  if (v14 >= 0x41 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
  }
  return v7;
}

BOOL sub_1CC05E860(__int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6 > 0x40)
  {
    if (memcmp(*(const void **)a2, *(const void **)(a2 + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_3;
    }
    int v13 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2);
    unsigned int v7 = (unsigned __int16)*a1;
    if (v13 != v6) {
      goto LABEL_4;
    }
  }
  else
  {
    if (*(void *)a2 != *(void *)(a2 + 16))
    {
LABEL_3:
      unsigned int v7 = (unsigned __int16)*a1;
      goto LABEL_4;
    }
    if (v6)
    {
      unsigned int v7 = (unsigned __int16)*a1;
      if (*(void *)a2 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6) {
        goto LABEL_18;
      }
LABEL_4:
      if (a3) {
        __int16 v8 = 5;
      }
      else {
        __int16 v8 = 4;
      }
      if ((v7 | 4) == 5) {
        __int16 v8 = 5;
      }
      if ((v7 & 0xFE) != 4)
      {
        *a1 = v8;
        *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 8);
        *((void *)a1 + 1) = *(void *)a2;
        *(_DWORD *)(a2 + 8) = 0;
        *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 24);
        *((void *)a1 + 3) = *(void *)(a2 + 16);
        goto LABEL_38;
      }
      *a1 = v8 | v7 & 0xFF00;
      uint64_t v9 = *((unsigned int *)a1 + 4);
      if (v9 > 0x40)
      {
        unsigned int v23 = v7;
        uint64_t v10 = (const void *)*((void *)a1 + 1);
        __int16 v19 = v8;
        int v20 = memcmp(v10, *(const void **)a2, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
        __int16 v8 = v19;
        unsigned int v7 = v23;
        if (!v20)
        {
LABEL_12:
          uint64_t v11 = *((unsigned int *)a1 + 8);
          if (v11 > 0x40)
          {
            v22 = v10;
            __int16 v15 = v8;
            int v16 = memcmp(*((const void **)a1 + 3), *(const void **)(a2 + 16), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
            __int16 v8 = v15;
            uint64_t v10 = v22;
            if (!v16) {
              return v8 != v7;
            }
          }
          else if (*((void *)a1 + 3) == *(void *)(a2 + 16))
          {
            return v8 != v7;
          }
        }
      }
      else
      {
        uint64_t v10 = (const void *)*((void *)a1 + 1);
        if (v10 == *(const void **)a2) {
          goto LABEL_12;
        }
      }
      if ((a3 & 0x100) != 0)
      {
        *a1 = v8 | (((unsigned __int16)(v7 >> 8) + 1) << 8);
        if (HIDWORD(a3) < (BYTE1(v7) + 1))
        {
          if (*((_DWORD *)a1 + 8) >= 0x41u)
          {
            uint64_t v18 = *((void *)a1 + 3);
            if (v18)
            {
              MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
              LODWORD(v9) = *((_DWORD *)a1 + 4);
            }
          }
          if (v9 < 0x41) {
            goto LABEL_34;
          }
          goto LABEL_40;
        }
      }
      if (v9 >= 0x41 && v10) {
        MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
      }
      *((void *)a1 + 1) = *(void *)a2;
      *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
      if (*((_DWORD *)a1 + 8) >= 0x41u)
      {
        uint64_t v21 = *((void *)a1 + 3);
        if (v21) {
          MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
        }
      }
      *((void *)a1 + 3) = *(void *)(a2 + 16);
      *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 24);
LABEL_38:
      *(_DWORD *)(a2 + 24) = 0;
      return 1;
    }
    LOBYTE(v7) = *(unsigned char *)a1;
  }
LABEL_18:
  if (v7 == 6) {
    return 0;
  }
  if ((v7 & 0xFE) != 4) {
    goto LABEL_34;
  }
  if (*((_DWORD *)a1 + 8) >= 0x41u)
  {
    uint64_t v14 = *((void *)a1 + 3);
    if (v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
  }
  if (*((_DWORD *)a1 + 4) < 0x41u) {
    goto LABEL_34;
  }
LABEL_40:
  uint64_t v17 = *((void *)a1 + 1);
  if (v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
LABEL_34:
  *(unsigned char *)a1 = 6;
  return 1;
}

uint64_t sub_1CC05EB8C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      MEMORY[0x1D25D9CB0](v3, 0x1000C8000313F17);
    }
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x1D25D9CB0](*(void *)a1, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t sub_1CC05EC08(uint64_t result, unsigned __int8 *a2)
{
  *(_WORD *)result = *a2;
  int v2 = *a2;
  if ((v2 - 4) < 2)
  {
    *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
    *(void *)(result + 24) = *((void *)a2 + 3);
    *((_DWORD *)a2 + 8) = 0;
    *(unsigned char *)(result + 1) = a2[1];
  }
  else if ((v2 - 2) < 2)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
  }
  *(_WORD *)a2 = a2[1] << 8;
  return result;
}

uint64_t sub_1CC05EC7C(uint64_t result, unsigned __int8 *a2, __int16 *a3)
{
  uint64_t v4 = result;
  __int16 v5 = *(_WORD *)a2;
  int v6 = *(_WORD *)a2;
  if (!*(_WORD *)a2)
  {
    *(_WORD *)result = 0;
LABEL_13:
    int v12 = v5;
    goto LABEL_14;
  }
  __int16 v8 = *a3;
  int v9 = *a3;
  if (!*a3)
  {
    *(_WORD *)result = 0;
LABEL_7:
    if (v8 - 4 >= 2)
    {
      unsigned int v10 = v8 - 2;
      goto LABEL_9;
    }
LABEL_50:
    unsigned int v31 = *((_DWORD *)a3 + 4);
    *(_DWORD *)(v4 + 16) = v31;
    if (v31 > 0x40) {
      operator new[]();
    }
    *(void *)(v4 + 8) = *((void *)a3 + 1);
    unsigned int v32 = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v4 + 32) = v32;
    if (v32 > 0x40) {
      operator new[]();
    }
    *(void *)(v4 + 24) = *((void *)a3 + 3);
    unsigned __int8 v22 = *((unsigned char *)a3 + 1);
LABEL_53:
    *(unsigned char *)(v4 + 1) = v22;
    return result;
  }
  if (v6 == 6)
  {
    *(_WORD *)result = v9;
    goto LABEL_7;
  }
  if (v9 == 6)
  {
    *(_WORD *)result = v6;
    goto LABEL_13;
  }
  if ((v5 & 0xFE) != 4)
  {
    int v19 = *(_WORD *)a2;
    goto LABEL_30;
  }
  unsigned int v61 = *((_DWORD *)a2 + 4);
  if (v61 > 0x40) {
    operator new[]();
  }
  v60 = (const void *)*((void *)a2 + 1);
  result = llvm::APInt::operator+=((uint64_t)&v60, 1uLL);
  unsigned int v14 = v61;
  __int16 v15 = v60;
  unsigned int v61 = 0;
  uint64_t v16 = *((unsigned int *)a2 + 8);
  if (v16 > 0x40)
  {
    v50 = (void *)v60;
    result = memcmp(*((const void **)a2 + 3), v60, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
    __int16 v15 = v50;
    BOOL v17 = result == 0;
  }
  else
  {
    BOOL v17 = *((void *)a2 + 3) == (void)v60;
  }
  char v18 = v17;
  if (v14 >= 0x41)
  {
    if (v15)
    {
      result = MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
      if (v61 >= 0x41)
      {
        result = (uint64_t)v60;
        if (v60) {
          result = MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
        }
      }
    }
  }
  int v6 = *a2;
  int v19 = v6;
  if ((v18 & 1) == 0)
  {
LABEL_30:
    if (v6 == 2) {
      goto LABEL_31;
    }
    __int16 v23 = *a3;
    if ((*a3 & 0xFE) == 4)
    {
      unsigned int v61 = *((_DWORD *)a3 + 4);
      if (v61 > 0x40) {
        operator new[]();
      }
      v60 = (const void *)*((void *)a3 + 1);
      result = llvm::APInt::operator+=((uint64_t)&v60, 1uLL);
      unsigned int v24 = v61;
      v25 = v60;
      unsigned int v61 = 0;
      uint64_t v26 = *((unsigned int *)a3 + 8);
      if (v26 > 0x40)
      {
        v51 = (void *)v60;
        result = memcmp(*((const void **)a3 + 3), v60, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
        v25 = v51;
        BOOL v27 = result == 0;
      }
      else
      {
        BOOL v27 = *((void *)a3 + 3) == (void)v60;
      }
      int v28 = v27;
      if (v24 >= 0x41)
      {
        if (v25)
        {
          result = MEMORY[0x1D25D9CB0](v25, 0x1000C8000313F17);
          if (v61 >= 0x41)
          {
            result = (uint64_t)v60;
            if (v60) {
              result = MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
            }
          }
        }
      }
      __int16 v23 = *a3;
      if (v28)
      {
        __int16 v29 = *a3;
        int v30 = *a3;
        goto LABEL_48;
      }
    }
    int v30 = v23;
    if (v23 == 2)
    {
      __int16 v29 = 2;
LABEL_48:
      *(_WORD *)uint64_t v4 = v29;
      if ((v30 - 4) >= 2)
      {
        unsigned int v10 = v30 - 2;
LABEL_9:
        if (v10 < 2)
        {
          uint64_t v11 = *((void *)a3 + 1);
LABEL_18:
          *(void *)(v4 + 8) = v11;
          return result;
        }
        return result;
      }
      goto LABEL_50;
    }
    if ((v23 & 0xFE) != 4 || (*(_WORD *)a2 & 0xFE) != 4)
    {
      int v12 = *(_WORD *)a2;
      *(_WORD *)uint64_t v4 = *(_WORD *)a2;
LABEL_14:
      if ((v12 - 4) >= 2)
      {
        unsigned int v13 = v12 - 2;
        goto LABEL_16;
      }
LABEL_33:
      unsigned int v20 = *((_DWORD *)a2 + 4);
      *(_DWORD *)(v4 + 16) = v20;
      if (v20 > 0x40) {
        operator new[]();
      }
      *(void *)(v4 + 8) = *((void *)a2 + 1);
      unsigned int v21 = *((_DWORD *)a2 + 8);
      *(_DWORD *)(v4 + 32) = v21;
      if (v21 > 0x40) {
        operator new[]();
      }
      *(void *)(v4 + 24) = *((void *)a2 + 3);
      unsigned __int8 v22 = a2[1];
      goto LABEL_53;
    }
    llvm::ConstantRange::intersectWith((uint64_t)(a2 + 8), (llvm::ConstantRange *)(a3 + 4), 0, (uint64_t)&__s1);
    uint64_t v33 = v57;
    unsigned int v53 = v57;
    result = (uint64_t)__s1;
    v52 = __s1;
    unsigned int v34 = v59;
    unsigned int v55 = v59;
    v35 = __s2;
    v54 = __s2;
    unsigned int v57 = 0;
    unsigned int v59 = 0;
    uint64_t v37 = *a2 == 5 || *(unsigned char *)a3 == 5;
    if (v33 > 0x40)
    {
      uint64_t v46 = v37;
      v47 = __s2;
      unsigned int v48 = v34;
      v49 = __s1;
      if (!memcmp(__s1, __s2, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v52) == v33)
      {
        LOWORD(v37) = 6;
        result = (uint64_t)v49;
        v35 = v47;
        unsigned int v34 = v48;
        goto LABEL_76;
      }
      int v38 = memcmp(v49, v47, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8);
      v35 = v47;
      int v39 = v38;
      result = (uint64_t)v49;
      unsigned int v34 = v48;
      uint64_t v37 = v46;
      if (v39) {
        goto LABEL_66;
      }
      int v40 = 0;
      int64_t v41 = (unint64_t)(v33 + 63) >> 6;
      do
      {
        if (v41-- < 1) {
          break;
        }
        unint64_t v43 = *((void *)v49 + v41);
        v40 += __clz(v43);
      }
      while (!v43);
      int v44 = v33 | 0xFFFFFFC0;
      if ((v33 & 0x3F) == 0) {
        int v44 = 0;
      }
      BOOL v17 = v40 + v44 == v33;
      result = (uint64_t)v49;
      uint64_t v37 = v46;
      v35 = v47;
      unsigned int v34 = v48;
      if (!v17) {
        goto LABEL_66;
      }
    }
    else
    {
      if (__s1 == __s2 && (!v33 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33)))
      {
        LOWORD(v37) = 6;
        goto LABEL_76;
      }
      if ((unint64_t)__s2 | (unint64_t)__s1)
      {
LABEL_66:
        *(_WORD *)uint64_t v4 = 0;
        unsigned int v61 = v33;
        v60 = (const void *)result;
        unsigned int v63 = v34;
        uint64_t v62 = (uint64_t)v35;
        result = sub_1CC05E860((__int16 *)v4, (uint64_t)&v60, v37 | 0x100000000);
        if (v63 >= 0x41)
        {
          result = v62;
          if (v62) {
            result = MEMORY[0x1D25D9CB0](v62, 0x1000C8000313F17);
          }
        }
        if (v61 < 0x41) {
          goto LABEL_68;
        }
        result = (uint64_t)v60;
        if (!v60) {
          goto LABEL_68;
        }
LABEL_81:
        result = MEMORY[0x1D25D9CB0]();
LABEL_68:
        if (v59 >= 0x41)
        {
          result = (uint64_t)__s2;
          if (__s2) {
            result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
          }
        }
        if (v57 >= 0x41)
        {
          result = (uint64_t)__s1;
          if (__s1) {
            return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
        }
        return result;
      }
    }
LABEL_76:
    *(_WORD *)uint64_t v4 = v37;
    if (v34 >= 0x41 && v35)
    {
      uint64_t v45 = result;
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
      result = v45;
    }
    if (v33 < 0x41 || !result) {
      goto LABEL_68;
    }
    goto LABEL_81;
  }
LABEL_31:
  *(_WORD *)uint64_t v4 = v6;
  if ((v19 - 4) < 2) {
    goto LABEL_33;
  }
  unsigned int v13 = v19 - 2;
LABEL_16:
  if (v13 < 2)
  {
    uint64_t v11 = *((void *)a2 + 1);
    goto LABEL_18;
  }
  return result;
}

void sub_1CC05F3C8(unint64_t a1, llvm::Type **a2, void *a3, int a4)
{
  int v4 = a4;
  __int16 v5 = a2;
  uint64_t v202 = *MEMORY[0x1E4F143B8];
  uint64_t v194 = 1;
  int v6 = &v195;
  for (uint64_t i = 8; i != 200; i += 48)
    *(uint64_t *)((char *)&v194 + i) = -4096;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  v191 = v193;
  v193[0] = a3;
  uint64_t v192 = 0x600000001;
  unsigned int v10 = 1;
  do
  {
    while (1)
    {
      uint64_t v11 = *((void *)v191 + v10 - 1);
      uint64_t v168 = v11;
      if (v194)
      {
        int v12 = 4;
        unsigned int v13 = &v195;
      }
      else
      {
        int v12 = v196;
        if (!v196)
        {
          unsigned __int8 v22 = 0;
          goto LABEL_21;
        }
        unsigned int v13 = (void **)v195;
      }
      int v14 = v12 - 1;
      unsigned int v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
      uint64_t v16 = &v13[6 * v15];
      uint64_t v17 = *v16;
      if (v11 == *v16) {
        goto LABEL_59;
      }
      char v18 = 0;
      int v19 = 1;
      while (v17 != -4096)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -8192;
        }
        if (v20) {
          char v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        uint64_t v16 = &v13[6 * v15];
        uint64_t v17 = *v16;
        if (v11 == *v16) {
          goto LABEL_59;
        }
      }
      unsigned __int8 v22 = v18 ? v18 : v16;
LABEL_21:
      __int16 v23 = sub_1CC0615B8((uint64_t)&v194, &v168, v22);
      *__int16 v23 = v11;
      *((_WORD *)v23 + 4) = 6;
      int v24 = *(unsigned __int8 *)(v11 + 16);
      if (v11 && v24 == 81)
      {
        __int16 v25 = *(_WORD *)(v11 + 18);
        uint64_t v26 = v25 & 0x3F;
        if ((v4 & 1) == 0) {
          uint64_t v26 = dword_1CFAC3AFC[v26];
        }
        uint64_t v27 = *(void *)(v11 - 64);
        uint64_t v28 = *(void *)(v11 - 32);
        unsigned int v29 = *(unsigned __int8 *)(v28 + 16);
        if (v29 > 0x14 || (v25 & 0x3E) != 0x20 || (llvm::Type **)v27 != v5) {
          goto LABEL_477;
        }
        if (v26 == 32)
        {
          LOWORD(v197) = 0;
          if (v29 - 11 > 1) {
            sub_1CC05E6A4((uint64_t)&v197, v28, 0);
          }
          else {
            LOWORD(v197) = 1;
          }
          goto LABEL_298;
        }
        if (v29 - 11 >= 2)
        {
          LOWORD(v197) = 0;
          sub_1CC063DD8((uint64_t)&v197, v28);
        }
        else
        {
LABEL_477:
          if (*((unsigned char *)*v5 + 8) == 13)
          {
            unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v5);
            unsigned int v178 = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40) {
              operator new[]();
            }
            uint64_t v177 = 0;
            if (sub_1CC062050((unint64_t *)&v177, v27, (uint64_t)a2, v26))
            {
              sub_1CC0623F0((__int16 *)&v197, v26, (uint64_t ***)v28, (const llvm::APInt *)&v177);
LABEL_293:
              __int16 v5 = a2;
LABEL_294:
              int v4 = a4;
            }
            else
            {
              v67 = (void **)v26;
              uint64_t v68 = v26;
              switch((__int16)v26)
              {
                case 2:
                  uint64_t v68 = 4;
                  goto LABEL_171;
                case 3:
                  uint64_t v68 = 5;
                  goto LABEL_171;
                case 4:
                  uint64_t v68 = 2;
                  goto LABEL_171;
                case 5:
                  uint64_t v68 = 3;
                  goto LABEL_171;
                case 10:
                  uint64_t v68 = 12;
                  goto LABEL_171;
                case 11:
                  uint64_t v68 = 13;
                  goto LABEL_171;
                case 12:
                  uint64_t v68 = 10;
                  goto LABEL_171;
                case 13:
                  uint64_t v68 = 11;
                  goto LABEL_171;
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  __break(1u);
                  goto LABEL_474;
                case 34:
                  uint64_t v68 = 36;
                  goto LABEL_171;
                case 35:
                  uint64_t v68 = 37;
                  goto LABEL_171;
                case 36:
                  uint64_t v68 = 34;
                  goto LABEL_171;
                case 37:
                  uint64_t v68 = 35;
                  goto LABEL_171;
                case 38:
                  uint64_t v68 = 40;
                  goto LABEL_171;
                case 39:
                  uint64_t v68 = 41;
                  goto LABEL_171;
                case 40:
                  uint64_t v68 = 38;
                  goto LABEL_171;
                case 41:
                  uint64_t v68 = 39;
                  goto LABEL_171;
                default:
LABEL_171:
                  __int16 v5 = a2;
                  if (sub_1CC062050((unint64_t *)&v177, v28, (uint64_t)a2, v68))
                  {
                    sub_1CC0623F0((__int16 *)&v197, v68, (uint64_t ***)v27, (const llvm::APInt *)&v177);
                    goto LABEL_294;
                  }
                  uint64_t v175 = 0;
                  v176 = 0;
                  v197 = (uint64_t **)a2;
                  p_s1 = (uint64_t *)&v176;
                  v199 = 0;
                  int v78 = *(unsigned __int8 *)(v27 + 16);
                  if (v78 == 5)
                  {
                    if (*(_WORD *)(v27 + 18) != 28) {
                      goto LABEL_200;
                    }
                    uint64_t v79 = v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF);
                    if (*(llvm::Type ***)v79 != a2
                      || (sub_1CBF5295C((uint64_t)&p_s1, *(llvm::Constant **)(v79 + 32)) & 1) == 0)
                    {
                      goto LABEL_200;
                    }
                  }
                  else if (v78 != 56 {
                         || *(llvm::Type ***)(v27 - 64) != a2
                  }
                         || !sub_1CBF528D8((uint64_t)&p_s1, *(unsigned __int8 **)(v27 - 32)))
                  {
                    goto LABEL_200;
                  }
                  v187 = &v175;
                  uint64_t v188 = 0;
                  if (!sub_1CBF528D8((uint64_t)&v187, (unsigned __int8 *)v28)) {
                    goto LABEL_200;
                  }
                  if ((unsigned __int16)v26 != 33)
                  {
                    if ((unsigned __int16)v26 == 32)
                    {
                      unsigned int v184 = 1;
                      __s1 = 0;
                      unsigned int v186 = 1;
                      __s2 = 0;
                      unsigned int v80 = *(_DWORD *)(v175 + 8);
                      unsigned int v174 = v80;
                      if (v80 > 0x40) {
                        operator new[]();
                      }
                      __int16 v5 = a2;
                      int v4 = a4;
                      if (v80) {
                        unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
                      }
                      else {
                        unint64_t v81 = 0;
                      }
                      unint64_t v173 = v81 & ~*(void *)v175;
                      unsigned int v174 = 0;
                      __s1 = (void *)(*(void *)v176 & v173);
                      unsigned int v184 = v80;
                      unsigned int v103 = *(_DWORD *)(v175 + 8);
                      if (v103 > 0x40) {
                        operator new[]();
                      }
                      __s2 = (void *)(*(void *)v176 & *(void *)v175);
                      unsigned int v186 = v103;
                      llvm::ConstantRange::fromKnownBits(&__s1, 0, (uint64_t)&v179);
                      uint64_t v104 = v180;
                      if (v180 > 0x40)
                      {
                        v105 = (uint64_t *)v179;
                        v106 = v181;
                        if (memcmp(v179, v181, (((unint64_t)v180 + 63) >> 3) & 0x3FFFFFF8))
                        {
                          LOWORD(v197) = 0;
                          __int16 v5 = a2;
                          int v4 = a4;
                          goto LABEL_248;
                        }
                        __int16 v5 = a2;
                        int v4 = a4;
                        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v179) == v104) {
                          goto LABEL_258;
                        }
                        int v134 = 0;
                        int64_t v135 = (unint64_t)(v104 + 63) >> 6;
                        do
                        {
                          BOOL v85 = v135-- < 1;
                          if (v85) {
                            break;
                          }
                          unint64_t v136 = v105[v135];
                          v134 += __clz(v136);
                        }
                        while (!v136);
                        int v137 = v104 | 0xFFFFFFC0;
                        if ((v104 & 0x3F) == 0) {
                          int v137 = 0;
                        }
                        LOWORD(v197) = 0;
                        __int16 v5 = a2;
                        int v4 = a4;
                        if (v134 + v137 != v104)
                        {
LABEL_248:
                          LODWORD(v188) = v104;
                          v187 = v105;
                          unsigned int v190 = v182;
                          v189 = v106;
                          unsigned int v180 = 0;
                          unsigned int v182 = 0;
                          sub_1CC05E860((__int16 *)&v197, (uint64_t)&v187, 0x100000000);
                          if (v190 >= 0x41 && v189) {
                            MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
                          }
                          if (v188 >= 0x41 && v187) {
                            MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
                          }
                        }
                      }
                      else
                      {
                        v105 = (uint64_t *)v179;
                        v106 = v181;
                        if (v179 == v181 && (!v180 || v179 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v180)))
                        {
LABEL_258:
                          LOWORD(v197) = 6;
                          goto LABEL_250;
                        }
                        LOWORD(v197) = 0;
                        if ((unint64_t)v181 | (unint64_t)v179) {
                          goto LABEL_248;
                        }
                      }
LABEL_250:
                      if (v182 >= 0x41 && v181) {
                        MEMORY[0x1D25D9CB0](v181, 0x1000C8000313F17);
                      }
                      if (v180 < 0x41 || (unint64_t v96 = (unint64_t)v179) == 0)
                      {
LABEL_252:
                        if (v186 >= 0x41 && __s2) {
                          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                        }
                        if (v184 >= 0x41)
                        {
                          v107 = __s1;
                          if (__s1) {
                            goto LABEL_272;
                          }
                        }
                        break;
                      }
LABEL_228:
                      MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
                      goto LABEL_252;
                    }
LABEL_200:
                    v197 = (uint64_t **)a2;
                    v199 = a2;
                    int v89 = *(unsigned __int8 *)(v27 + 16);
                    if (v89 != 5)
                    {
                      if (v89 == 50)
                      {
                        v90 = *(llvm::Type ***)(v27 - 64);
                        goto LABEL_205;
                      }
                      goto LABEL_206;
                    }
                    if (*(_WORD *)(v27 + 18) != 22) {
                      goto LABEL_206;
                    }
                    v90 = *(llvm::Type ***)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF));
LABEL_205:
                    if (v90 != a2)
                    {
LABEL_206:
                      if (!sub_1CC062B54(&v199, v27)) {
                        goto LABEL_292;
                      }
                    }
                    v187 = &v175;
                    uint64_t v188 = 0;
                    if (!sub_1CBF528D8((uint64_t)&v187, (unsigned __int8 *)v28)) {
                      goto LABEL_292;
                    }
                    llvm::ConstantRange::makeExactICmpRegion(v26, v175, (uint64_t)&__s1);
                    uint64_t v91 = v184;
                    if (v184 >= 0x41)
                    {
                      v111 = __s1;
                      v92 = __s2;
                      if (!memcmp(__s1, __s2, (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8))
                      {
                        int v112 = 0;
                        int64_t v113 = (unint64_t)(v91 + 63) >> 6;
                        do
                        {
                          BOOL v85 = v113-- < 1;
                          if (v85) {
                            break;
                          }
                          unint64_t v114 = v111[v113];
                          v112 += __clz(v114);
                        }
                        while (!v114);
                        int v115 = v91 | 0xFFFFFFC0;
                        if ((v91 & 0x3F) == 0) {
                          int v115 = 0;
                        }
                        if (v112 + v115 == v91)
                        {
LABEL_286:
                          if (v186 >= 0x41 && v92 != 0)
                          {
                            MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
                            LODWORD(v91) = v184;
                          }
                          if (v91 >= 0x41 && __s1) {
                            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                          }
LABEL_292:
                          LOWORD(v197) = 6;
                          goto LABEL_293;
                        }
                      }
                    }
                    else
                    {
                      v92 = __s2;
                      if (!((unint64_t)__s2 | (unint64_t)__s1)) {
                        goto LABEL_286;
                      }
                    }
                    llvm::ConstantRange::getUnsignedMin((uint64_t)&__s1, (uint64_t)&__src);
                    if (v172 < PrimitiveSizeInBits)
                    {
                      unsigned int v174 = PrimitiveSizeInBits;
                      unint64_t v173 = __src & (0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
                      unsigned int v170 = PrimitiveSizeInBits;
                    }
                    else
                    {
                      unsigned int v174 = v172;
                      if (v172 > 0x40) {
                        operator new[]();
                      }
                      unint64_t v173 = __src;
                      unsigned int v170 = PrimitiveSizeInBits;
                    }
                    uint64_t v169 = 0;
                    __int16 v5 = a2;
                    int v4 = a4;
                    sub_1CC062A8C(&v173, (uint64_t)&v169, (uint64_t)&v179);
                    uint64_t v93 = v180;
                    if (v180 > 0x40)
                    {
                      v94 = (uint64_t *)v179;
                      v95 = v181;
                      if (memcmp(v179, v181, (((unint64_t)v180 + 63) >> 3) & 0x3FFFFFF8))
                      {
                        LOWORD(v197) = 0;
                        goto LABEL_216;
                      }
                      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v179) == v93) {
                        goto LABEL_231;
                      }
                      int v130 = 0;
                      int64_t v131 = (unint64_t)(v93 + 63) >> 6;
                      do
                      {
                        BOOL v85 = v131-- < 1;
                        if (v85) {
                          break;
                        }
                        unint64_t v132 = v94[v131];
                        v130 += __clz(v132);
                      }
                      while (!v132);
                      int v133 = v93 | 0xFFFFFFC0;
                      if ((v93 & 0x3F) == 0) {
                        int v133 = 0;
                      }
                      LOWORD(v197) = 0;
                      __int16 v5 = a2;
                      int v4 = a4;
                      if (v130 + v133 != v93)
                      {
LABEL_216:
                        LODWORD(v188) = v93;
                        v187 = v94;
                        unsigned int v190 = v182;
                        v189 = v95;
                        unsigned int v180 = 0;
                        unsigned int v182 = 0;
                        sub_1CC05E860((__int16 *)&v197, (uint64_t)&v187, 0x100000000);
                        if (v190 >= 0x41 && v189) {
                          MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
                        }
                        if (v188 >= 0x41 && v187) {
                          MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
                        }
                      }
                    }
                    else
                    {
                      v94 = (uint64_t *)v179;
                      v95 = v181;
                      if (v179 == v181 && (!v180 || v179 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v180)))
                      {
LABEL_231:
                        LOWORD(v197) = 6;
                        goto LABEL_218;
                      }
                      LOWORD(v197) = 0;
                      if ((unint64_t)v181 | (unint64_t)v179) {
                        goto LABEL_216;
                      }
                    }
LABEL_218:
                    if (v182 >= 0x41 && v181) {
                      MEMORY[0x1D25D9CB0](v181, 0x1000C8000313F17);
                    }
                    if (v180 >= 0x41 && v179) {
                      MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
                    }
                    if (v170 >= 0x41 && v169) {
                      MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
                    }
                    if (v174 >= 0x41 && v173) {
                      MEMORY[0x1D25D9CB0](v173, 0x1000C8000313F17);
                    }
                    if (v172 < 0x41) {
                      goto LABEL_252;
                    }
                    unint64_t v96 = __src;
                    if (!__src) {
                      goto LABEL_252;
                    }
                    goto LABEL_228;
                  }
                  uint64_t v82 = *((unsigned int *)v176 + 2);
                  if (v82 > 0x40)
                  {
                    int v83 = 0;
                    int64_t v84 = (unint64_t)(v82 + 63) >> 6;
                    do
                    {
                      BOOL v85 = v84-- < 1;
                      if (v85) {
                        break;
                      }
                      unint64_t v86 = *(void *)(*(void *)v176 + 8 * v84);
                      v83 += __clz(v86);
                    }
                    while (!v86);
                    int v87 = v82 | 0xFFFFFFC0;
                    if ((v82 & 0x3F) == 0) {
                      int v87 = 0;
                    }
                    if (v83 + v87 == v82) {
                      goto LABEL_200;
                    }
                  }
                  else if (!*(void *)v176)
                  {
                    goto LABEL_200;
                  }
                  uint64_t v88 = *(unsigned int *)(v175 + 8);
                  if (v88 > 0x40)
                  {
                    int v97 = 0;
                    int64_t v98 = (unint64_t)(v88 + 63) >> 6;
                    do
                    {
                      BOOL v85 = v98-- < 1;
                      if (v85) {
                        break;
                      }
                      unint64_t v99 = *(void *)(*(void *)v175 + 8 * v98);
                      v97 += __clz(v99);
                    }
                    while (!v99);
                    int v100 = v88 | 0xFFFFFFC0;
                    if ((v88 & 0x3F) == 0) {
                      int v100 = 0;
                    }
                    if (v97 + v100 != v88) {
                      goto LABEL_200;
                    }
                  }
                  else if (*(void *)v175)
                  {
                    goto LABEL_200;
                  }
                  if (v82 > 0x40)
                  {
                    char v102 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v176);
                  }
                  else
                  {
                    unsigned int v101 = __clz(__rbit64(*(void *)v176));
                    if (v82 >= v101) {
                      char v102 = v101;
                    }
                    else {
                      char v102 = *((_DWORD *)v176 + 2);
                    }
                  }
                  unsigned int v180 = PrimitiveSizeInBits;
                  v179 = (void *)(1 << v102);
                  unsigned int v174 = PrimitiveSizeInBits;
                  unint64_t v173 = 0;
                  sub_1CC062A8C((unint64_t *)&v179, (uint64_t)&v173, (uint64_t)&__s1);
                  uint64_t v108 = v184;
                  __int16 v5 = a2;
                  int v4 = a4;
                  if (v184 <= 0x40)
                  {
                    v109 = (uint64_t *)__s1;
                    v110 = __s2;
                    if (__s1 == __s2 && (!v184 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v184)))
                    {
LABEL_348:
                      LOWORD(v197) = 6;
                      goto LABEL_265;
                    }
                    LOWORD(v197) = 0;
                    if (!((unint64_t)__s2 | (unint64_t)__s1)) {
                      goto LABEL_265;
                    }
                    goto LABEL_263;
                  }
                  v109 = (uint64_t *)__s1;
                  v110 = __s2;
                  if (memcmp(__s1, __s2, (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8))
                  {
                    LOWORD(v197) = 0;
                    __int16 v5 = a2;
                    int v4 = a4;
LABEL_263:
                    LODWORD(v188) = v108;
                    v187 = v109;
                    unsigned int v190 = v186;
                    v189 = v110;
                    unsigned int v184 = 0;
                    unsigned int v186 = 0;
                    sub_1CC05E860((__int16 *)&v197, (uint64_t)&v187, 0x100000000);
                    if (v190 >= 0x41 && v189) {
                      MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
                    }
                    if (v188 >= 0x41 && v187) {
                      MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
                    }
                    goto LABEL_265;
                  }
                  __int16 v5 = a2;
                  int v4 = a4;
                  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v108) {
                    goto LABEL_348;
                  }
                  int v138 = 0;
                  int64_t v139 = (unint64_t)(v108 + 63) >> 6;
                  do
                  {
                    BOOL v85 = v139-- < 1;
                    if (v85) {
                      break;
                    }
                    unint64_t v140 = v109[v139];
                    v138 += __clz(v140);
                  }
                  while (!v140);
                  int v141 = v108 | 0xFFFFFFC0;
                  if ((v108 & 0x3F) == 0) {
                    int v141 = 0;
                  }
                  LOWORD(v197) = 0;
                  __int16 v5 = a2;
                  int v4 = a4;
                  if (v138 + v141 != v108) {
                    goto LABEL_263;
                  }
LABEL_265:
                  if (v186 >= 0x41 && __s2) {
                    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
                  }
                  if (v184 >= 0x41 && __s1) {
                    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
                  }
                  if (v174 >= 0x41 && v173) {
                    MEMORY[0x1D25D9CB0](v173, 0x1000C8000313F17);
                  }
                  if (v180 >= 0x41)
                  {
                    v107 = v179;
                    if (v179)
                    {
LABEL_272:
                      MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
                      break;
                    }
                  }
                  break;
              }
            }
            if (v178 < 0x41) {
              goto LABEL_298;
            }
            uint64_t v37 = v177;
            if (!v177) {
              goto LABEL_298;
            }
LABEL_297:
            MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
            goto LABEL_298;
          }
          LOWORD(v197) = 6;
        }
      }
      else
      {
        if (!v11
          || v24 != 92
          || (uint64_t v30 = *(void *)(v11 - 32), v31 = sub_1CC062BC4(v30), !v30)
          || !v31
          || *(_DWORD *)(v11 + 72) != 1
          || **(_DWORD **)(v11 + 64) != 1)
        {
LABEL_59:
          v187 = 0;
          __s1 = 0;
          v197 = &v187;
          p_s1 = (uint64_t *)&__s1;
          if (sub_1CB90D004(&v197, v11))
          {
            int v38 = 1;
          }
          else
          {
            v197 = &v187;
            p_s1 = (uint64_t *)&__s1;
            if (!sub_1CB90D1A4(&v197, v11)) {
              goto LABEL_98;
            }
            int v38 = 0;
          }
          int v39 = v194 & 1;
          if (v194)
          {
            int v40 = 4;
            int64_t v41 = &v195;
            goto LABEL_66;
          }
          int64_t v41 = (void **)v195;
          int v40 = v196;
          if (v196)
          {
LABEL_66:
            int v42 = v40 - 1;
            unsigned int v43 = v42 & ((v187 >> 4) ^ (v187 >> 9));
            int v44 = &v41[6 * v43];
            uint64_t v45 = *v44;
            if (*v44 == v187) {
              goto LABEL_67;
            }
            int v57 = 1;
            while (v45 != (uint64_t *)-4096)
            {
              unsigned int v58 = v43 + v57++;
              unsigned int v43 = v58 & v42;
              int v44 = &v41[6 * v43];
              uint64_t v45 = *v44;
              if (*v44 == v187) {
                goto LABEL_67;
              }
            }
            if (v194)
            {
              int64_t v41 = &v195;
              unsigned int v61 = 4;
            }
            else
            {
              int64_t v41 = (void **)v195;
              unsigned int v61 = v196;
            }
          }
          else
          {
            unsigned int v61 = 0;
          }
          int v44 = &v41[6 * v61];
LABEL_67:
          if (v194)
          {
            int v46 = 4;
            v47 = &v195;
            goto LABEL_70;
          }
          v47 = (void **)v195;
          int v46 = v196;
          if (v196)
          {
LABEL_70:
            int v48 = v46 - 1;
            unsigned int v49 = v48 & ((__s1 >> 4) ^ (__s1 >> 9));
            v50 = (unsigned __int8 *)&v47[6 * v49];
            v51 = *(void **)v50;
            if (*(void **)v50 == __s1)
            {
LABEL_71:
              v52 = (void **)v195;
              unsigned int v53 = v196;
              if (v38 != v4)
              {
                v54 = (v194 & 1) != 0 ? &v195 : v195;
                unsigned int v55 = (v194 & 1) != 0 ? 4 : v196;
                if (&v54[6 * v55] != v44)
                {
                  int v56 = *((unsigned __int8 *)v44 + 8);
                  LOWORD(v197) = *((unsigned __int8 *)v44 + 8);
                  if ((v56 - 4) < 2)
                  {
                    LODWORD(v199) = *((_DWORD *)v44 + 6);
                    if (v199 > 0x40) {
                      operator new[]();
                    }
                    p_s1 = v44[2];
                    unsigned int v201 = *((_DWORD *)v44 + 10);
                    if (v201 > 0x40) {
                      operator new[]();
                    }
                    v200 = v44[4];
                    LOBYTE(v56) = (_BYTE)v197;
                    LOWORD(v197) = v197 | (*((unsigned __int8 *)v44 + 9) << 8);
                  }
                  else if ((v56 - 2) < 2)
                  {
                    p_s1 = v44[2];
                  }
                  if (v56 == 6)
                  {
LABEL_98:
                    __int16 v63 = 6;
                    goto LABEL_302;
                  }
                  if (v194) {
                    v64 = &v195;
                  }
                  else {
                    v64 = (void **)v195;
                  }
                  unsigned int v65 = v196;
                  if (v194) {
                    unsigned int v65 = 4;
                  }
                  if (&v64[6 * v65] != (void **)v50)
                  {
                    sub_1CC061B28((uint64_t)&v197, v50 + 8, 0x100000000);
                    goto LABEL_141;
                  }
                  if ((v56 & 0xFE) == 4)
                  {
                    if (v201 >= 0x41 && v200) {
                      MEMORY[0x1D25D9CB0](v200, 0x1000C8000313F17);
                    }
                    if (v199 >= 0x41 && p_s1) {
                      MEMORY[0x1D25D9CB0](p_s1, 0x1000C8000313F17);
                    }
                  }
                  v52 = (void **)v195;
                  unsigned int v53 = v196;
                  int v39 = v194 & 1;
                }
              }
              if (v39) {
                v69 = &v195;
              }
              else {
                v69 = v52;
              }
              if (v39) {
                unsigned int v70 = 4;
              }
              else {
                unsigned int v70 = v53;
              }
              v71 = &v69[6 * v70];
              if (v71 == v44 || v71 == (void **)v50)
              {
                if (v71 == v44)
                {
                  if (v192 >= (unint64_t)HIDWORD(v192)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v191 + v192) = v187;
                  LODWORD(v192) = v192 + 1;
                  v52 = (void **)v195;
                  unsigned int v53 = v196;
                  int v39 = v194 & 1;
                }
                BOOL v73 = v39 == 0;
                if (v39) {
                  v74 = &v195;
                }
                else {
                  v74 = v52;
                }
                if (v73) {
                  unsigned int v75 = v53;
                }
                else {
                  unsigned int v75 = 4;
                }
                if (&v74[6 * v75] == (void **)v50)
                {
                  if (v192 >= (unint64_t)HIDWORD(v192)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v191 + v192) = __s1;
                  LODWORD(v192) = v192 + 1;
                }
                goto LABEL_332;
              }
              sub_1CC05EC7C((uint64_t)&v197, (unsigned __int8 *)v44 + 8, (__int16 *)v50 + 4);
LABEL_141:
              __int16 v76 = (__int16)v197;
              __int16 v63 = v197;
              if (v197 - 2 < 2)
              {
                v167 = p_s1;
                goto LABEL_302;
              }
              if (v197 - 4 <= 1) {
                goto LABEL_300;
              }
              goto LABEL_302;
            }
            int v59 = 1;
            while (v51 != (void *)-4096)
            {
              unsigned int v60 = v49 + v59++;
              unsigned int v49 = v60 & v48;
              v50 = (unsigned __int8 *)&v47[6 * v49];
              v51 = *(void **)v50;
              if (*(void **)v50 == __s1) {
                goto LABEL_71;
              }
            }
            if (v194)
            {
              v47 = &v195;
              unsigned int v62 = 4;
            }
            else
            {
              v47 = (void **)v195;
              unsigned int v62 = v196;
            }
          }
          else
          {
            unsigned int v62 = 0;
          }
          v50 = (unsigned __int8 *)&v47[6 * v62];
          goto LABEL_71;
        }
        uint64_t v177 = 0;
        unsigned int v32 = (llvm::Type ***)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
        if (*v32 != v5) {
          goto LABEL_98;
        }
        uint64_t v33 = (unsigned __int8 *)v32[4];
        v197 = (uint64_t **)&v177;
        p_s1 = 0;
        if ((sub_1CBF528D8((uint64_t)&v197, v33) & 1) == 0) {
          goto LABEL_98;
        }
        int v34 = 13;
        unsigned int v35 = *(_DWORD *)(*(void *)(v30 - 32) + 36) - 262;
        if (((1 << (*(unsigned char *)(*(void *)(v30 - 32) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v35) & 0x6000000600000) != 0) {
            int v34 = 15;
          }
          else {
            int v34 = 17;
          }
        }
        if (v35 <= 0x16 && ((1 << v35) & 0x610003) != 0) {
          int v36 = 2;
        }
        else {
          int v36 = 1;
        }
        llvm::ConstantRange::makeExactNoWrapRegion(v34, v177, v36, (uint64_t)&__s1);
        if (v4)
        {
          llvm::ConstantRange::inverse((uint64_t)&__s1, (uint64_t)&v197);
          if (v184 >= 0x41 && __s1) {
            MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
          }
          __s1 = v197;
          unsigned int v184 = p_s1;
          LODWORD(p_s1) = 0;
          if (v186 >= 0x41 && __s2)
          {
            MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
            __s2 = v199;
            unsigned int v186 = v200;
            LODWORD(v200) = 0;
            if (p_s1 >= 0x41 && v197) {
              MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
            }
          }
          else
          {
            __s2 = v199;
            unsigned int v186 = v200;
          }
        }
        unsigned int v180 = v184;
        if (v184 > 0x40) {
          operator new[]();
        }
        v179 = __s1;
        unsigned int v182 = v186;
        if (v186 > 0x40) {
          operator new[]();
        }
        v181 = __s2;
        if (__s1 == __s2 && (!v184 || (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v184) == __s1))
        {
          LOWORD(v197) = 6;
          __int16 v5 = a2;
        }
        else
        {
          LOWORD(v197) = 0;
          if ((unint64_t)__s2 | (unint64_t)__s1)
          {
            LODWORD(v188) = v184;
            v187 = (uint64_t *)__s1;
            unsigned int v190 = v186;
            v189 = __s2;
            unsigned int v180 = 0;
            unsigned int v182 = 0;
            sub_1CC05E860((__int16 *)&v197, (uint64_t)&v187, 0x100000000);
            if (v190 >= 0x41 && v189) {
              MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
            }
            __int16 v5 = a2;
            if (v188 >= 0x41)
            {
              v77 = v187;
              if (v187) {
                MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
              }
            }
          }
          else
          {
            __int16 v5 = a2;
          }
        }
        if (v186 >= 0x41 && __s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
        if (v184 >= 0x41)
        {
          uint64_t v37 = (uint64_t)__s1;
          if (__s1) {
            goto LABEL_297;
          }
        }
      }
LABEL_298:
      __int16 v76 = (__int16)v197;
      __int16 v63 = v197;
      if (v197 - 2 >= 2)
      {
        if (v197 - 4 > 1) {
          goto LABEL_302;
        }
LABEL_300:
        unint64_t v9 = v199;
        v167 = p_s1;
        unint64_t v8 = v201;
        __int16 v63 = v76;
        v166 = v200;
        goto LABEL_302;
      }
      v167 = p_s1;
LABEL_302:
      if (v194)
      {
        int v117 = 4;
        v118 = &v195;
      }
      else
      {
        int v117 = v196;
        if (!v196)
        {
          v127 = 0;
          goto LABEL_319;
        }
        v118 = (void **)v195;
      }
      int v119 = v117 - 1;
      unsigned int v120 = ((v168 >> 4) ^ (v168 >> 9)) & v119;
      v121 = &v118[6 * v120];
      uint64_t v122 = *v121;
      if (v168 == *v121) {
        goto LABEL_320;
      }
      v123 = 0;
      int v124 = 1;
      while (v122 != -4096)
      {
        if (v123) {
          BOOL v125 = 0;
        }
        else {
          BOOL v125 = v122 == -8192;
        }
        if (v125) {
          v123 = v121;
        }
        unsigned int v126 = v120 + v124++;
        unsigned int v120 = v126 & v119;
        v121 = &v118[6 * v120];
        uint64_t v122 = *v121;
        if (v168 == *v121) {
          goto LABEL_320;
        }
      }
      v127 = v123 ? v123 : v121;
LABEL_319:
      v121 = sub_1CC0615B8((uint64_t)&v194, &v168, v127);
      void *v121 = v168;
      *((_WORD *)v121 + 4) = 0;
LABEL_320:
      if ((v121[1] & 0xFE) == 4)
      {
        if (*((_DWORD *)v121 + 10) >= 0x41u)
        {
          uint64_t v128 = v121[4];
          if (v128) {
            MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v121 + 6) >= 0x41u)
        {
          uint64_t v129 = v121[2];
          if (v129) {
            MEMORY[0x1D25D9CB0](v129, 0x1000C8000313F17);
          }
        }
      }
      *((_WORD *)v121 + 4) = v63;
      if (v63 - 4 < 2)
      {
        *((_DWORD *)v121 + 6) = v9;
        if (v9 > 0x40) {
          operator new[]();
        }
        v121[2] = v167;
        *((_DWORD *)v121 + 10) = v8;
        if (v8 > 0x40) {
          operator new[]();
        }
        v121[4] = v166;
        *((_WORD *)v121 + 4) = *((unsigned __int8 *)v121 + 8) | v63 & 0xFF00;
      }
      else if (v63 - 2 < 2)
      {
        v121[2] = v167;
      }
      unsigned int v10 = v192 - 1;
      LODWORD(v192) = v192 - 1;
      if ((v63 & 0xFE) != 4) {
        break;
      }
      if (v8 >= 0x41 && v166) {
        MEMORY[0x1D25D9CB0](v166, 0x1000C8000313F17);
      }
      if (v9 >= 0x41)
      {
        if (v167) {
          MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
        }
        else {
          v167 = 0;
        }
      }
LABEL_332:
      unsigned int v10 = v192;
      if (!v192) {
        goto LABEL_432;
      }
    }
  }
  while (v10);
LABEL_432:
  if (v194)
  {
    int v142 = 4;
    v67 = &v195;
    v143 = a3;
    unint64_t v8 = a1;
    goto LABEL_435;
  }
  v67 = (void **)v195;
  int v142 = v196;
  v143 = a3;
  unint64_t v8 = a1;
  if (v196)
  {
LABEL_435:
    int v144 = v142 - 1;
    unsigned int v145 = v144 & ((v143 >> 4) ^ (v143 >> 9));
    v146 = &v67[6 * v145];
    uint64_t v147 = (uint64_t)*v146;
    if (*v146 == v143) {
      goto LABEL_436;
    }
    int v150 = 1;
    while (v147 != -4096)
    {
      unsigned int v151 = v145 + v150++;
      unsigned int v145 = v151 & v144;
      v146 = &v67[6 * v145];
      uint64_t v147 = (uint64_t)*v146;
      if (*v146 == v143) {
        goto LABEL_436;
      }
    }
    if (v194)
    {
      unsigned int v161 = 4;
      v67 = &v195;
    }
    else
    {
      v67 = (void **)v195;
      unsigned int v161 = v196;
    }
  }
  else
  {
LABEL_474:
    unsigned int v161 = 0;
  }
  v146 = &v67[6 * v161];
LABEL_436:
  __int16 v148 = *((unsigned __int8 *)v146 + 8);
  *(_WORD *)unint64_t v8 = v148;
  int v149 = *((unsigned __int8 *)v146 + 8);
  if ((v149 - 4) < 2)
  {
    unsigned int v152 = *((_DWORD *)v146 + 6);
    *(_DWORD *)(v8 + 16) = v152;
    if (v152 > 0x40) {
      operator new[]();
    }
    *(void *)(v8 + 8) = v146[2];
    unsigned int v153 = *((_DWORD *)v146 + 10);
    *(_DWORD *)(v8 + 32) = v153;
    if (v153 > 0x40) {
      operator new[]();
    }
    *(void *)(v8 + 24) = v146[4];
    *(_WORD *)unint64_t v8 = v148 | (*((unsigned __int8 *)v146 + 9) << 8);
  }
  else if ((v149 - 2) < 2)
  {
    *(void *)(v8 + 8) = v146[2];
  }
  if (v191 != v193) {
    free(v191);
  }
  char v154 = v194;
  if (v194)
  {
    uint64_t v155 = 4;
LABEL_450:
    uint64_t v156 = 48 * v155;
    v157 = v6 + 3;
    do
    {
      uint64_t v158 = (uint64_t)*(v157 - 3);
      if (v158 != -4096 && v158 != -8192 && (*(_WORD *)(v157 - 2) & 0xFE) == 4)
      {
        if (*((_DWORD *)v157 + 4) >= 0x41u)
        {
          v160 = v157[1];
          if (v160) {
            MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
          }
        }
        if (*(_DWORD *)v157 >= 0x41u)
        {
          uint64_t v159 = (uint64_t)*(v157 - 1);
          if (v159) {
            MEMORY[0x1D25D9CB0](v159, 0x1000C8000313F17);
          }
        }
      }
      v157 += 6;
      v156 -= 48;
    }
    while (v156);
    char v154 = v194;
  }
  else
  {
    uint64_t v155 = v196;
    if (v196)
    {
      int v6 = (void **)v195;
      goto LABEL_450;
    }
  }
  if ((v154 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v195, 8);
  }
}

uint64_t sub_1CC06151C(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 48 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      unsigned int v7 = (void *)(v3 + 48 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC0615B8(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC061734(a1, 2 * v7);
    uint64_t v10 = a1 + 8;
    int v5 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v11 = 4;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        int v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v8 = *(_DWORD *)a1 & 1;
    int v12 = v11 - 1;
    unsigned int v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (void *)(v10 + 48 * v13);
    uint64_t v14 = *a3;
    if (*a2 != *a3)
    {
      unsigned int v15 = 0;
      int v16 = 1;
      while (v14 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -8192;
        }
        if (v17) {
          unsigned int v15 = a3;
        }
        unsigned int v18 = v13 + v16++;
        unsigned int v13 = v18 & v12;
        a3 = (void *)(v10 + 48 * v13);
        uint64_t v14 = *a3;
        if (*a2 == *a3) {
          goto LABEL_7;
        }
      }
      if (v15) {
        a3 = v15;
      }
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1CC061734(a1, v7);
      int v19 = 0;
      sub_1CC06151C(a1, *a2, &v19);
      a3 = v19;
      int v5 = *(_DWORD *)a1;
    }
    int v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a3;
}

int *sub_1CC061734(uint64_t a1, unsigned int a2)
{
  v17[24] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v14 = *(uint64_t **)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v16 = a2;
      *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }
    sub_1CC061958((int *)a1, v14, &v14[6 * v15]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v17;
  do
  {
    uint64_t v8 = a1 + v6;
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *unsigned int v7 = v9;
      *((_WORD *)v7 + 4) = *(unsigned __int8 *)(v8 + 16);
      int v10 = *(unsigned __int8 *)(v8 + 16);
      if ((v10 - 4) < 2)
      {
        uint64_t v11 = a1 + v6;
        *((_DWORD *)v7 + 6) = *(_DWORD *)(a1 + v6 + 32);
        v7[2] = *(void *)(a1 + v6 + 24);
        *(_DWORD *)(v11 + 32) = 0;
        *((_DWORD *)v7 + 10) = *(_DWORD *)(a1 + v6 + 48);
        v7[4] = *(void *)(a1 + v6 + 40);
        *(_DWORD *)(v11 + 48) = 0;
        *((unsigned char *)v7 + 9) = *(unsigned char *)(v8 + 17);
      }
      else if ((v10 - 2) < 2)
      {
        v7[2] = *(void *)(a1 + v6 + 24);
      }
      *(_WORD *)(v8 + 16) = *(unsigned __int8 *)(v8 + 17) << 8;
      v7 += 6;
    }
    v6 += 48;
  }
  while (v6 != 192);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC061958((int *)a1, v17, v7);
}

int *sub_1CC061958(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  unint64_t v4 = result + 2;
  if (v3)
  {
    unsigned int v7 = result + 50;
    uint64_t v6 = result + 2;
  }
  else
  {
    unsigned int v5 = result[4];
    if (!v5) {
      goto LABEL_5;
    }
    uint64_t v6 = (void *)*((void *)result + 1);
    unsigned int v7 = &v6[6 * v5];
  }
  do
  {
    *uint64_t v6 = -4096;
    v6 += 6;
  }
  while (v6 != v7);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v8 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 4;
        int v10 = v4;
      }
      else
      {
        int v10 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v11 = v9 - 1;
      unsigned int v12 = (v9 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      unsigned int v13 = (uint64_t *)&v10[12 * v12];
      uint64_t v14 = *v13;
      if (v8 != *v13)
      {
        unsigned int v15 = 0;
        int v16 = 1;
        while (v14 != -4096)
        {
          if (v15) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v14 == -8192;
          }
          if (v18) {
            unsigned int v15 = v13;
          }
          unsigned int v19 = v12 + v16++;
          unsigned int v12 = v19 & v11;
          unsigned int v13 = (uint64_t *)&v10[12 * (v19 & v11)];
          uint64_t v14 = *v13;
          if (v8 == *v13) {
            goto LABEL_14;
          }
        }
        if (v15) {
          unsigned int v13 = v15;
        }
      }
LABEL_14:
      *unsigned int v13 = v8;
      *((_WORD *)v13 + 4) = *((unsigned __int8 *)a2 + 8);
      int v17 = *((unsigned __int8 *)a2 + 8);
      if ((v17 - 4) < 2)
      {
        *((_DWORD *)v13 + 6) = *((_DWORD *)a2 + 6);
        v13[2] = a2[2];
        *((_DWORD *)a2 + 6) = 0;
        *((_DWORD *)v13 + 10) = *((_DWORD *)a2 + 10);
        v13[4] = a2[4];
        *((_DWORD *)a2 + 10) = 0;
        *((unsigned char *)v13 + 9) = *((unsigned char *)a2 + 9);
      }
      else if ((v17 - 2) < 2)
      {
        v13[2] = a2[2];
      }
      *((_WORD *)a2 + 4) = *((unsigned __int8 *)a2 + 9) << 8;
      *result += 2;
      if ((a2[1] & 0xFE) == 4)
      {
        __int16 v23 = v4;
        unsigned int v21 = a3;
        unsigned __int8 v22 = result;
        BOOL v20 = a2;
        sub_1CC05EB8C((uint64_t)(a2 + 2));
        unint64_t v4 = v23;
        a3 = v21;
        result = v22;
        a2 = v20;
      }
    }
    a2 += 6;
  }
  return result;
}

uint64_t sub_1CC061B28(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 v3 = *(_WORD *)a2;
  int v4 = *(_WORD *)a2;
  if (!*(_WORD *)a2) {
    return 0;
  }
  __int16 v6 = *(_WORD *)a1;
  int v7 = *(_WORD *)a1;
  if (v7 == 6) {
    return 0;
  }
  if (v4 == 6)
  {
LABEL_5:
    if ((v6 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a1 + 32) >= 0x41u)
      {
        uint64_t v18 = *(void *)(a1 + 24);
        if (v18) {
          MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
        }
      }
      if (*(_DWORD *)(a1 + 16) >= 0x41u)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19) {
          MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
        }
      }
    }
    *(unsigned char *)a1 = 6;
    return 1;
  }
  else
  {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFFF00;
    switch(*(_WORD *)a1)
    {
      case 0u:
        if ((v6 & 0xFE) == 4)
        {
          if (*(_DWORD *)(a1 + 32) >= 0x41u)
          {
            uint64_t v20 = *(void *)(a1 + 24);
            if (v20) {
              MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
            }
          }
          if (*(_DWORD *)(a1 + 16) >= 0x41u)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            if (v21) {
              MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
            }
          }
        }
        *(_WORD *)a1 = *a2;
        int v12 = *a2;
        if ((v12 - 4) < 2)
        {
          unsigned int v16 = *((_DWORD *)a2 + 4);
          *(_DWORD *)(a1 + 16) = v16;
          if (v16 > 0x40) {
            operator new[]();
          }
          *(void *)(a1 + 8) = *((void *)a2 + 1);
          unsigned int v17 = *((_DWORD *)a2 + 8);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 > 0x40) {
            operator new[]();
          }
          *(void *)(a1 + 24) = *((void *)a2 + 3);
          *(unsigned char *)(a1 + 1) = a2[1];
        }
        else if ((v12 - 2) < 2)
        {
          *(void *)(a1 + 8) = *((void *)a2 + 1);
        }
        return 1;
      case 1u:
        if (*(_WORD *)a2 == 1) {
          return 0;
        }
        if (*(_WORD *)a2 == 2)
        {
          uint64_t v13 = *((void *)a2 + 1);
          return sub_1CC05E6A4(a1, v13, 1u);
        }
        if ((v3 & 0xFE) != 4) {
          goto LABEL_5;
        }
        unsigned int v31 = *((_DWORD *)a2 + 4);
        if (v31 > 0x40) {
          operator new[]();
        }
        uint64_t v30 = *((void *)a2 + 1);
        unsigned int v33 = *((_DWORD *)a2 + 8);
        if (v33 > 0x40) {
          operator new[]();
        }
        uint64_t v32 = *((void *)a2 + 3);
        BOOL v8 = sub_1CC05E860((__int16 *)a1, (uint64_t)&v30, v11 | 1);
        if (v33 >= 0x41 && v32) {
          MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
        }
        if (v31 >= 0x41)
        {
          uint64_t v15 = v30;
          if (v30) {
            goto LABEL_44;
          }
        }
        return v8;
      case 2u:
        int v14 = *(_WORD *)a2;
        if (v14 == 1) {
          return 0;
        }
        if (v14 != 2) {
          goto LABEL_5;
        }
        goto LABEL_29;
      case 3u:
        if (v4 != 3) {
          goto LABEL_5;
        }
LABEL_29:
        if (*(void *)(a1 + 8) == *((void *)a2 + 1)) {
          return 0;
        }
        goto LABEL_5;
      default:
        if (v4 == 1)
        {
          *(_WORD *)a1 = v6 & 0xFF00 | 5;
          return v7 != 5;
        }
        if ((v3 & 0xFE) != 4) {
          goto LABEL_5;
        }
        llvm::ConstantRange::unionWith(a1 + 8, (unsigned int *)a2 + 2, 0, (uint64_t)&v26);
        unsigned int v23 = v27;
        uint64_t v22 = v26;
        unsigned int v25 = v29;
        uint64_t v24 = v28;
        unsigned int v27 = 0;
        unsigned int v29 = 0;
        BOOL v8 = sub_1CC05E860((__int16 *)a1, (uint64_t)&v22, v11 | (*a2 == 5));
        if (v25 >= 0x41 && v24) {
          MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
        }
        if (v23 >= 0x41 && v22) {
          MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
        if (v29 >= 0x41 && v28) {
          MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
        }
        if (v27 >= 0x41)
        {
          uint64_t v15 = v26;
          if (v26) {
LABEL_44:
          }
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
        }
        break;
    }
  }
  return v8;
}

BOOL sub_1CC062050(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 == a3) {
    return 1;
  }
  v33[5] = v4;
  v33[6] = v5;
  uint64_t v32 = 0;
  v33[0] = 0;
  uint64_t v30 = a3;
  unsigned int v31 = v33;
  int v10 = *(unsigned __int8 *)(a2 + 16);
  if (v10 != 5)
  {
    if (v10 != 41
      || *(void *)(a2 - 64) != a3
      || !sub_1CBF528D8((uint64_t)&v31, *(unsigned __int8 **)(a2 - 32)))
    {
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v13 = v33[0];
    if (*((_DWORD *)a1 + 2) > 0x40u || *(_DWORD *)(v33[0] + 8) > 0x40u)
    {
      if ((unint64_t *)v33[0] != a1)
      {
        llvm::APInt::reallocate((uint64_t)a1, *(_DWORD *)(v33[0] + 8));
        uint64_t v24 = *((unsigned int *)a1 + 2);
        if (v24 <= 0x40) {
          *a1 = *(void *)v13;
        }
        else {
          memcpy((void *)*a1, *(const void **)v13, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      *a1 = *(void *)v33[0];
      *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 + 8);
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) == 13)
  {
    uint64_t v12 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(void *)v12 == a3 && (sub_1CBF5295C((uint64_t)&v31, *(llvm::Constant **)(v12 + 32)) & 1) != 0) {
      goto LABEL_11;
    }
  }
LABEL_14:
  uint64_t v30 = a2;
  unsigned int v31 = v33;
  uint64_t v32 = 0;
  int v14 = *(unsigned __int8 *)(a3 + 16);
  if (v14 != 5)
  {
    if (v14 != 41
      || *(void *)(a3 - 64) != a2
      || !sub_1CBF528D8((uint64_t)&v31, *(unsigned __int8 **)(a3 - 32)))
    {
      goto LABEL_27;
    }
LABEL_22:
    unsigned int v16 = *(_DWORD *)(v33[0] + 8);
    unsigned int v29 = v16;
    if (v16 > 0x40) {
      operator new[]();
    }
    if (v16) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    }
    else {
      unint64_t v17 = 0;
    }
    unint64_t v28 = v17 & ~*(void *)v33[0];
    llvm::APInt::operator++((uint64_t)&v28);
    unsigned int v25 = v29;
    unint64_t v26 = v28;
    unsigned int v29 = 0;
    if (*((_DWORD *)a1 + 2) > 0x40u && *a1)
    {
      MEMORY[0x1D25D9CB0](*a1, 0x1000C8000313F17);
      unsigned int v27 = v29;
      *a1 = v26;
      *((_DWORD *)a1 + 2) = v25;
      if (v27 >= 0x41 && v28) {
        MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
      }
    }
    else
    {
      *a1 = v28;
      *((_DWORD *)a1 + 2) = v25;
    }
    return 1;
  }
  if (*(_WORD *)(a3 + 18) == 13)
  {
    uint64_t v15 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
    if (*(void *)v15 == a2 && (sub_1CBF5295C((uint64_t)&v31, *(llvm::Constant **)(v15 + 32)) & 1) != 0) {
      goto LABEL_22;
    }
  }
LABEL_27:
  int v18 = *(unsigned __int8 *)(a2 + 16);
  if (v18 == 5)
  {
    int v20 = *(unsigned __int16 *)(a2 + 18);
    if (v20 != 29) {
      goto LABEL_41;
    }
    uint64_t v21 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (*v21 != a3)
    {
      uint64_t v19 = v21 + 4;
      goto LABEL_35;
    }
LABEL_38:
    if ((a4 & 0xFFFFFFFE) == 0x24) {
      return 1;
    }
    goto LABEL_39;
  }
  if (v18 == 56)
  {
    if (*(void *)(a2 - 64) != a3)
    {
      unsigned int v23 = (void *)(a2 - 32);
      return (a4 & 0xFFFFFFFE) == 0x22 && *v23 == a3;
    }
    return (a4 & 0xFFFFFFFE) == 0x22;
  }
  if (v18 != 57) {
    return 0;
  }
  if (*(void *)(a2 - 64) == a3) {
    goto LABEL_38;
  }
  uint64_t v19 = (void *)(a2 - 32);
LABEL_35:
  if ((a4 & 0xFFFFFFFE) == 0x24 && *v19 == a3) {
    return 1;
  }
LABEL_39:
  if (v18 != 5) {
    return 0;
  }
  int v20 = *(unsigned __int16 *)(a2 + 18);
LABEL_41:
  if (v20 != 28) {
    return 0;
  }
  uint64_t v22 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (*v22 == a3) {
    return (a4 & 0xFFFFFFFE) == 0x22;
  }
  unsigned int v23 = v22 + 4;
  return (a4 & 0xFFFFFFFE) == 0x22 && *v23 == a3;
}

uint64_t sub_1CC0623F0(__int16 *a1, uint64_t a2, uint64_t ***a3, const llvm::APInt *a4)
{
  unint64_t v7 = *((unsigned int *)*a3 + 2);
  unint64_t v8 = v7 >> 8;
  unsigned int v49 = *((_DWORD *)*a3 + 2) >> 8;
  if (v7 >> 8 > 0x40) {
    operator new[]();
  }
  if (v7 <= 0xFF) {
    int v9 = 0;
  }
  else {
    int v9 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v7) + 63));
  }
  unint64_t __src = v9;
  unsigned int v51 = v8;
  uint64_t v50 = (uint64_t)v9;
  unsigned int v10 = *((unsigned __int8 *)a3 + 16);
  if (v10 == 16)
  {
    unsigned int v11 = *((_DWORD *)a3 + 8);
    if (v11 > 0x40) {
      operator new[]();
    }
    uint64_t v12 = a3[3];
    unsigned int v53 = *((_DWORD *)a3 + 8);
    v52 = (uint64_t ***)v12;
    llvm::APInt::operator+=((uint64_t)&v52, 1uLL);
    unsigned int v27 = v53;
    uint64_t v28 = (uint64_t)v52;
    if (v49 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    unint64_t __src = v12;
    unsigned int v49 = v11;
    if (v51 >= 0x41 && v50) {
      MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
    uint64_t v50 = v28;
    unsigned int v51 = v27;
    goto LABEL_29;
  }
  if (v10 < 0x1C || (*((unsigned char *)a3 + 23) & 0x20) == 0) {
    goto LABEL_29;
  }
  uint64_t v13 = ***a3;
  v52 = a3;
  int v14 = *(_DWORD *)(v13 + 2496);
  if (v14)
  {
    uint64_t v15 = *(void *)(v13 + 2480);
    int v16 = v14 - 1;
    unsigned int v17 = v16 & ((a3 >> 4) ^ (a3 >> 9));
    int v18 = (uint64_t ****)(v15 + 40 * v17);
    uint64_t v19 = *v18;
    if (*v18 == a3) {
      goto LABEL_20;
    }
    int v20 = 0;
    int v21 = 1;
    while (v19 != (uint64_t ***)-4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == (uint64_t ***)-8192;
      }
      if (v22) {
        int v20 = v18;
      }
      unsigned int v23 = v17 + v21++;
      unsigned int v17 = v23 & v16;
      int v18 = (uint64_t ****)(v15 + 40 * v17);
      uint64_t v19 = *v18;
      if (*v18 == a3) {
        goto LABEL_20;
      }
    }
    if (v20) {
      unsigned int v33 = v20;
    }
    else {
      unsigned int v33 = v18;
    }
  }
  else
  {
    unsigned int v33 = 0;
  }
  int v18 = (uint64_t ****)sub_1CC609054(v13 + 2480, (uint64_t)&v52, (uint64_t *)&v52, v33);
  int v34 = v52;
  v18[3] = 0;
  v18[4] = 0;
  *int v18 = v34;
  v18[1] = (uint64_t ***)(v18 + 3);
  v18[2] = (uint64_t ***)0x100000000;
LABEL_20:
  uint64_t v24 = *((unsigned int *)v18 + 4);
  if (v24)
  {
    unsigned int v25 = (uint64_t *)(v18[1] + 1);
    uint64_t v26 = 16 * v24;
    while (*((_DWORD *)v25 - 2) != 4)
    {
      v25 += 2;
      v26 -= 16;
      if (!v26) {
        goto LABEL_29;
      }
    }
    if (*v25)
    {
      llvm::getConstantRangeFromMetadata(*v25, (uint64_t)&v52);
      if (v49 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = v52;
      unsigned int v49 = v53;
      unsigned int v53 = 0;
      if (v51 >= 0x41 && v50)
      {
        MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
        uint64_t v50 = v54;
        unsigned int v51 = v55;
        unsigned int v55 = 0;
        if (v53 >= 0x41 && v52) {
          MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v50 = v54;
        unsigned int v51 = v55;
      }
    }
  }
LABEL_29:
  llvm::ConstantRange::makeAllowedICmpRegion((llvm::ConstantRange *)&__src, a2, (uint64_t)&v44);
  uint64_t result = (uint64_t)llvm::ConstantRange::subtract((unsigned int *)&v44, a4, &__s1);
  uint64_t v30 = v41;
  if (v41 > 0x40)
  {
    unint64_t v31 = (unint64_t)__s1;
    uint64_t v32 = (uint64_t)__s2;
    if (memcmp(__s1, __s2, (((unint64_t)v41 + 63) >> 3) & 0x3FFFFFF8))
    {
      *a1 = 0;
LABEL_32:
      unsigned int v53 = v30;
      v52 = (uint64_t ***)v31;
      unsigned int v55 = v43;
      uint64_t v54 = v32;
      unsigned int v41 = 0;
      unsigned int v43 = 0;
      uint64_t result = sub_1CC05E860(a1, (uint64_t)&v52, 0x100000000);
      if (v55 >= 0x41)
      {
        uint64_t result = v54;
        if (v54) {
          uint64_t result = MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
        }
      }
      if (v53 >= 0x41)
      {
        uint64_t result = (uint64_t)v52;
        if (v52) {
          uint64_t result = MEMORY[0x1D25D9CB0](v52, 0x1000C8000313F17);
        }
      }
      goto LABEL_34;
    }
    uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
    if (result == v30)
    {
LABEL_43:
      *a1 = 6;
      goto LABEL_34;
    }
    int v35 = 0;
    int64_t v36 = (unint64_t)(v30 + 63) >> 6;
    do
    {
      if (v36-- < 1) {
        break;
      }
      unint64_t v38 = *(void *)(v31 + 8 * v36);
      v35 += __clz(v38);
    }
    while (!v38);
    int v39 = v30 | 0xFFFFFFC0;
    if ((v30 & 0x3F) == 0) {
      int v39 = 0;
    }
    *a1 = 0;
    if (v35 + v39 != v30) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v31 = (unint64_t)__s1;
    uint64_t v32 = (uint64_t)__s2;
    if (__s1 == __s2 && (!v41 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v41))) {
      goto LABEL_43;
    }
    *a1 = 0;
    if (v32 | v31) {
      goto LABEL_32;
    }
  }
LABEL_34:
  if (v43 >= 0x41)
  {
    uint64_t result = (uint64_t)__s2;
    if (__s2) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  if (v41 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  if (v47 >= 0x41)
  {
    uint64_t result = v46;
    if (v46) {
      uint64_t result = MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
  }
  if (v45 >= 0x41)
  {
    uint64_t result = v44;
    if (v44) {
      uint64_t result = MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
    }
  }
  if (v51 >= 0x41)
  {
    uint64_t result = v50;
    if (v50) {
      uint64_t result = MEMORY[0x1D25D9CB0](v50, 0x1000C8000313F17);
    }
  }
  if (v49 >= 0x41)
  {
    uint64_t result = (uint64_t)__src;
    if (__src) {
      return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return result;
}

unint64_t *sub_1CC062A8C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)result + 2);
  if (v4 > 0x40)
  {
    unint64_t v5 = *result;
    int v12 = *((_DWORD *)result + 2);
    uint64_t v13 = result;
    uint64_t v10 = a3;
    uint64_t v11 = a2;
    int v6 = memcmp((const void *)*result, *(const void **)a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    a2 = v11;
    LODWORD(v4) = v12;
    a3 = v10;
    int v7 = v6;
    uint64_t result = v13;
    if (!v7) {
      goto LABEL_3;
    }
LABEL_7:
    *((_DWORD *)result + 2) = 0;
    int v8 = *(_DWORD *)(a2 + 8);
    int v9 = *(const void **)a2;
    *(_DWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a3 + 8) = v4;
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 24) = v8;
    *(void *)(a3 + 16) = v9;
    return result;
  }
  unint64_t v5 = *result;
  if (*result != *(void *)a2) {
    goto LABEL_7;
  }
LABEL_3:

  return llvm::ConstantRange::ConstantRange((unint64_t *)a3, v4, 1);
}

uint64_t sub_1CC062B54(void *a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  unsigned int v3 = v2 - 28;
  BOOL v5 = v2 < 0x1C && v2 != 5 || a2 == 0;
  int v6 = v5;
  if (!v5)
  {
    if (v2 <= 0x1B) {
      unsigned int v3 = *(unsigned __int16 *)(a2 + 18);
    }
    if (v3 == 38)
    {
      int v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0) {
        int v9 = *(void **)(a2 - 8);
      }
      else {
        int v9 = (void *)(a2 - 32 * (v8 & 0x7FFFFFF));
      }
      unsigned int v3 = *a1 == *v9;
    }
    else
    {
      unsigned int v3 = 0;
    }
  }
  return (v6 ^ 1) & v3;
}

unint64_t sub_1CC062BC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 84
    && (uint64_t v1 = *(void *)(a1 - 32)) != 0
    && !*(unsigned char *)(v1 + 16)
    && *(void *)(v1 + 24) == *(void *)(a1 + 72)
    && (*(unsigned char *)(v1 + 33) & 0x20) != 0
    && (unsigned int v2 = *(_DWORD *)(v1 + 36) - 263, v2 <= 0x31))
  {
    return (0x2404000208001uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1CC062C2C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_1CC062C9C((_DWORD *)a1, a2);
  if (result)
  {
    BOOL result = 0;
    if (a2)
    {
      if (*(unsigned char *)(a2 + 16) == 84)
      {
        uint64_t v5 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
        if (v5)
        {
          **(void **)(a1 + 16) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CC062C9C(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v2 = *(void *)(a2 - 32);
      if (v2) {
        return !*(unsigned char *)(v2 + 16) && *(void *)(v2 + 24) == *(void *)(a2 + 72) && *(_DWORD *)(v2 + 36) == *a1;
      }
    }
  }
  return v2;
}

uint64_t sub_1CC062CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  int v3 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v7);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v3) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = *(void *)a1 + 16 * v4;
  }
  if (v5 == *(void *)a1 + 16 * v4) {
    operator new();
  }
  return *(void *)(v5 + 8);
}

uint64_t sub_1CC062FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void ***)a2;
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  uint64_t result = sub_1CC05AAA8(v5, v6, a2);
  if (v5 + 40 * v6 != result) {
    return result;
  }
  uint64_t v108 = 2;
  v109 = 0;
  v110 = v2;
  if (v2 != (void ***)-8192 && v2 != (void ***)-4096 && v2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v108);
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v2 = v110;
  }
  uint64_t v111 = a1;
  int v112 = 0;
  uint64_t result = sub_1CC0639E8(v5, v6, (uint64_t)v2, &v112);
  if ((result & 1) == 0)
  {
    int v8 = v112;
    int64_t v113 = v112;
    int v9 = *(_DWORD *)(a1 + 32);
    unsigned int v10 = *(_DWORD *)(a1 + 40);
    if (4 * v9 + 4 >= 3 * v10)
    {
      int v11 = 2 * v10;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 40);
      if (v10 + ~v9 - *(_DWORD *)(a1 + 36) > v10 >> 3)
      {
LABEL_9:
        *(_DWORD *)(a1 + 32) = v9 + 1;
        int v12 = (void ***)v8[3];
        if (v12 != (void ***)-4096) {
          --*(_DWORD *)(a1 + 36);
        }
        uint64_t v13 = v110;
        if (v12 != v110)
        {
          BOOL v14 = v12 == (void ***)-4096 || v12 == 0;
          if (!v14 && v12 != (void ***)-8192)
          {
            unint64_t v31 = v8[1] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v31 = v8[2];
            uint64_t v32 = (unint64_t *)v8[2];
            if (v32)
            {
              *uint64_t v32 = *v32 & 7 | v31;
            }
            else
            {
              uint64_t v33 = v8[3];
              int v34 = ***(int32x2_t ****)v33;
              unint64_t v35 = (unint64_t)v34[303];
              if (v35 <= v31)
              {
                uint64_t v36 = v34[305].u32[0];
                if (v35 + 16 * v36 > v31)
                {
                  unsigned int v37 = v36 - 1;
                  LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
                  int v39 = (uint64_t *)(v35 + 16 * v38);
                  uint64_t v40 = *v39;
                  if (v33 == *v39)
                  {
LABEL_51:
                    *int v39 = -8192;
                    v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v33 = v8[3];
                  }
                  else
                  {
                    int v41 = 1;
                    while (v40 != -4096)
                    {
                      int v42 = v38 + v41++;
                      uint64_t v38 = v42 & v37;
                      uint64_t v40 = *(void *)(v35 + 16 * v38);
                      if (v33 == v40)
                      {
                        int v39 = (uint64_t *)(v35 + 16 * v38);
                        goto LABEL_51;
                      }
                    }
                  }
                  *(unsigned char *)(v33 + 17) &= ~1u;
                }
              }
            }
            uint64_t v13 = v110;
          }
          v8[3] = v13;
          if (v13 != (void ***)-4096 && v13 != (void ***)-8192 && v13 != 0)
          {
            uint64_t v16 = v108;
            unsigned int v17 = (void *)(v108 & 0xFFFFFFFFFFFFFFF8);
            v8[2] = *(void *)(v108 & 0xFFFFFFFFFFFFFFF8);
            *unsigned int v17 = v8 + 1;
            v8[1] = v16 & 0xFFFFFFFFFFFFFFF8 | v8[1] & 7;
            int v18 = (unint64_t *)v8[2];
            if (v18) {
              *int v18 = *v18 & 7 | (unint64_t)(v8 + 2);
            }
          }
        }
        v8[4] = v111;
        goto LABEL_25;
      }
    }
    unsigned int v43 = *(void **)(a1 + 24);
    unint64_t v44 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    unint64_t v45 = v44 | (v44 >> 2) | ((v44 | (v44 >> 2)) >> 4);
    int v46 = ((v45 | (v45 >> 8)) >> 16) | v45 | (v45 >> 8);
    if ((v46 + 1) > 0x40) {
      unsigned int v47 = v46 + 1;
    }
    else {
      unsigned int v47 = 64;
    }
    *(_DWORD *)(a1 + 40) = v47;
    *(void *)(a1 + 24) = operator new(40 * v47, (std::align_val_t)8uLL);
    if (v43)
    {
      sub_1CC05A758(v4);
      uint64_t v120 = 2;
      v121 = 0;
      uint64_t v122 = -4096;
      uint64_t v123 = 0;
      uint64_t v118 = 0;
      int v119 = &unk_1F2604D20;
      uint64_t v115 = 2;
      v116 = 0;
      uint64_t v117 = -8192;
      v114[1] = &unk_1F2604D20;
      if (v10)
      {
        int v48 = &v43[5 * v10];
        unsigned int v49 = v43;
        do
        {
          uint64_t v50 = v49[3];
          if (v50 != v122 && v50 != v117)
          {
            v114[0] = 0;
            sub_1CC0639E8(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), v50, v114);
            v52 = (void *)v114[0];
            uint64_t v53 = *(void *)(v114[0] + 24);
            uint64_t v54 = v49[3];
            if (v53 != v54)
            {
              BOOL v55 = v53 == -4096 || v53 == 0;
              if (!v55 && v53 != -8192)
              {
                unint64_t v72 = *(void *)(v114[0] + 8) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v72 = *(void *)(v114[0] + 16);
                BOOL v73 = (unint64_t *)v52[2];
                if (v73)
                {
                  *BOOL v73 = *v73 & 7 | v72;
                }
                else
                {
                  uint64_t v74 = v52[3];
                  unsigned int v75 = ***(int32x2_t ****)v74;
                  unint64_t v76 = (unint64_t)v75[303];
                  if (v76 <= v72)
                  {
                    uint64_t v77 = v75[305].u32[0];
                    if (v76 + 16 * v77 > v72)
                    {
                      unsigned int v78 = v77 - 1;
                      LODWORD(v79) = v78 & ((v74 >> 4) ^ (v74 >> 9));
                      unsigned int v80 = (uint64_t *)(v76 + 16 * v79);
                      uint64_t v81 = *v80;
                      if (v74 == *v80)
                      {
LABEL_108:
                        *unsigned int v80 = -8192;
                        v75[304] = vadd_s32(v75[304], (int32x2_t)0x1FFFFFFFFLL);
                        uint64_t v74 = v52[3];
                      }
                      else
                      {
                        int v82 = 1;
                        while (v81 != -4096)
                        {
                          int v83 = v79 + v82++;
                          uint64_t v79 = v83 & v78;
                          uint64_t v81 = *(void *)(v76 + 16 * v79);
                          if (v74 == v81)
                          {
                            unsigned int v80 = (uint64_t *)(v76 + 16 * v79);
                            goto LABEL_108;
                          }
                        }
                      }
                      *(unsigned char *)(v74 + 17) &= ~1u;
                    }
                  }
                }
                uint64_t v54 = v49[3];
              }
              v52[3] = v54;
              if (v54 != -4096 && v54 != -8192 && v54 != 0)
              {
                uint64_t v57 = v49[1];
                v52[2] = *(void *)(v57 & 0xFFFFFFFFFFFFFFF8);
                *(void *)(v57 & 0xFFFFFFFFFFFFFFF8) = v52 + 1;
                v52[1] = v57 & 0xFFFFFFFFFFFFFFF8 | v52[1] & 7;
                unsigned int v58 = (unint64_t *)v52[2];
                if (v58) {
                  *unsigned int v58 = *v58 & 7 | (unint64_t)(v52 + 2);
                }
              }
            }
            v52[4] = v49[4];
            ++*(_DWORD *)(a1 + 32);
            uint64_t v50 = v49[3];
          }
          if (v50 != -8192 && v50 != -4096 && v50 != 0)
          {
            unint64_t v60 = v49[1] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v60 = v49[2];
            unsigned int v61 = (unint64_t *)v49[2];
            if (v61)
            {
              *unsigned int v61 = *v61 & 7 | v60;
            }
            else
            {
              uint64_t v62 = v49[3];
              __int16 v63 = ***(int32x2_t ****)v62;
              unint64_t v64 = (unint64_t)v63[303];
              if (v64 <= v60)
              {
                uint64_t v65 = v63[305].u32[0];
                if (v64 + 16 * v65 > v60)
                {
                  unsigned int v66 = v65 - 1;
                  LODWORD(v67) = v66 & ((v62 >> 4) ^ (v62 >> 9));
                  uint64_t v68 = (uint64_t *)(v64 + 16 * v67);
                  uint64_t v69 = *v68;
                  if (v62 == *v68)
                  {
LABEL_97:
                    *uint64_t v68 = -8192;
                    v63[304] = vadd_s32(v63[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v62 = v49[3];
                  }
                  else
                  {
                    int v70 = 1;
                    while (v69 != -4096)
                    {
                      int v71 = v67 + v70++;
                      uint64_t v67 = v71 & v66;
                      uint64_t v69 = *(void *)(v64 + 16 * v67);
                      if (v62 == v69)
                      {
                        uint64_t v68 = (uint64_t *)(v64 + 16 * v67);
                        goto LABEL_97;
                      }
                    }
                  }
                  *(unsigned char *)(v62 + 17) &= ~1u;
                }
              }
            }
          }
          v49 += 5;
        }
        while (v49 != v48);
        if (v117 != -8192 && v117 != -4096 && v117 != 0)
        {
          unint64_t v97 = v115 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v115 & 0xFFFFFFFFFFFFFFF8) = v116;
          if (v116)
          {
            unint64_t *v116 = *v116 & 7 | v97;
          }
          else
          {
            uint64_t v98 = v117;
            unint64_t v99 = ***(int32x2_t ****)v117;
            unint64_t v100 = (unint64_t)v99[303];
            if (v100 <= v97)
            {
              uint64_t v101 = v99[305].u32[0];
              if (v100 + 16 * v101 > v97)
              {
                unsigned int v102 = v101 - 1;
                LODWORD(v103) = v102 & ((v117 >> 4) ^ (v117 >> 9));
                uint64_t v104 = (uint64_t *)(v100 + 16 * v103);
                uint64_t v105 = *v104;
                if (v117 == *v104)
                {
LABEL_146:
                  *uint64_t v104 = -8192;
                  v99[304] = vadd_s32(v99[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v98 = v117;
                }
                else
                {
                  int v106 = 1;
                  while (v105 != -4096)
                  {
                    int v107 = v103 + v106++;
                    uint64_t v103 = v107 & v102;
                    uint64_t v105 = *(void *)(v100 + 16 * v103);
                    if (v117 == v105)
                    {
                      uint64_t v104 = (uint64_t *)(v100 + 16 * v103);
                      goto LABEL_146;
                    }
                  }
                }
                *(unsigned char *)(v98 + 17) &= ~1u;
              }
            }
          }
        }
      }
      if (v122 != -8192 && v122 != -4096 && v122 != 0)
      {
        unint64_t v86 = v120 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v120 & 0xFFFFFFFFFFFFFFF8) = v121;
        if (v121)
        {
          unint64_t *v121 = *v121 & 7 | v86;
        }
        else
        {
          uint64_t v87 = v122;
          uint64_t v88 = ***(int32x2_t ****)v122;
          unint64_t v89 = (unint64_t)v88[303];
          if (v89 <= v86)
          {
            uint64_t v90 = v88[305].u32[0];
            if (v89 + 16 * v90 > v86)
            {
              unsigned int v91 = v90 - 1;
              LODWORD(v92) = v91 & ((v122 >> 4) ^ (v122 >> 9));
              uint64_t v93 = (uint64_t *)(v89 + 16 * v92);
              uint64_t v94 = *v93;
              if (v122 == *v93)
              {
LABEL_136:
                *uint64_t v93 = -8192;
                v88[304] = vadd_s32(v88[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v87 = v122;
              }
              else
              {
                int v95 = 1;
                while (v94 != -4096)
                {
                  int v96 = v92 + v95++;
                  uint64_t v92 = v96 & v91;
                  uint64_t v94 = *(void *)(v89 + 16 * v92);
                  if (v122 == v94)
                  {
                    uint64_t v93 = (uint64_t *)(v89 + 16 * v92);
                    goto LABEL_136;
                  }
                }
              }
              *(unsigned char *)(v87 + 17) &= ~1u;
            }
          }
        }
      }
      MEMORY[0x1D25D9CD0](v43, 8);
    }
    else
    {
      sub_1CC05A758(v4);
    }
    uint64_t result = sub_1CC0639E8(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), (uint64_t)v110, &v113);
    int v9 = *(_DWORD *)(a1 + 32);
    int v8 = v113;
    goto LABEL_9;
  }
LABEL_25:
  if (v110 != (void ***)-8192 && v110 != (void ***)-4096 && v110 != 0)
  {
    unint64_t v20 = v108 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v108 & 0xFFFFFFFFFFFFFFF8) = v109;
    if (v109)
    {
      unint64_t *v109 = *v109 & 7 | v20;
    }
    else
    {
      int v21 = v110;
      BOOL v22 = (int32x2_t *)***v110;
      unint64_t v23 = (unint64_t)v22[303];
      if (v23 <= v20)
      {
        uint64_t v24 = v22[305].u32[0];
        if (v23 + 16 * v24 > v20)
        {
          unsigned int v25 = v24 - 1;
          LODWORD(v26) = v25 & ((v110 >> 4) ^ (v110 >> 9));
          unsigned int v27 = (void *)(v23 + 16 * v26);
          uint64_t v28 = (void ***)*v27;
          if (v110 == (void ***)*v27)
          {
LABEL_40:
            *unsigned int v27 = -8192;
            v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
            int v21 = v110;
          }
          else
          {
            int v29 = 1;
            while (v28 != (void ***)-4096)
            {
              int v30 = v26 + v29++;
              uint64_t v26 = v30 & v25;
              uint64_t v28 = *(void ****)(v23 + 16 * v26);
              if (v110 == v28)
              {
                unsigned int v27 = (void *)(v23 + 16 * v26);
                goto LABEL_40;
              }
            }
          }
          *((unsigned char *)v21 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC063874(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          unsigned int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

unsigned int *sub_1CC063910(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  int v3 = result[1];
  *uint64_t result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v11 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v11;
      LODWORD(v11) = result[4];
      result[4] = a2[4];
      a2[4] = v11;
      return result;
    }
    unsigned int v4 = *result;
    int v9 = result;
    uint64_t result = a2;
LABEL_7:
    long long v10 = *(_OWORD *)(v9 + 2);
    *int v9 = v4 | 1;
    *((void *)v9 + 1) = *((void *)result + 1);
    *((void *)v9 + 2) = *((void *)result + 2);
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v10;
    return result;
  }
  if ((v4 & 1) == 0)
  {
    int v9 = a2;
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  unsigned int v6 = (int *)(result + 2);
  uint64_t v7 = (int *)(a2 + 2);
  do
  {
    uint64_t v8 = *(void *)&v6[v5];
    *(void *)&v6[v5] = *(void *)&v7[v5];
    *(void *)&v7[v5] = v8;
    v5 += 2;
  }
  while (v5 != 4);
  return result;
}

uint64_t sub_1CC0639E8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 40 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 40 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CC063A80(uint64_t result, _DWORD *a2)
{
  unsigned int v3 = *(_DWORD *)(*(void *)result + 8);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**(void **)(*(void *)result + 16) + 8);
  }
  if (v3 <= 0xFF)
  {
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)result, (const llvm::Value *)6);
    uint64_t v8 = 0;
    uint64_t result = sub_1CC05AC44((uint64_t)a2, (uint64_t)UnderlyingObject, &v8);
    if ((result & 1) == 0)
    {
      int v5 = *a2 >> 1;
      if (*a2) {
        unsigned int v6 = 2;
      }
      else {
        unsigned int v6 = a2[4];
      }
      if (4 * v5 + 4 >= 3 * v6)
      {
        v6 *= 2;
      }
      else if (v6 + ~v5 - a2[1] > v6 >> 3)
      {
LABEL_10:
        uint64_t v7 = v8;
        *a2 += 2;
        if (*v7 != (llvm *)-4096) {
          --a2[1];
        }
        *uint64_t v7 = UnderlyingObject;
        return result;
      }
      sub_1CC063B8C((uint64_t)a2, v6);
      uint64_t v8 = 0;
      uint64_t result = sub_1CC05AC44((uint64_t)a2, (uint64_t)UnderlyingObject, &v8);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_1CC063B8C(uint64_t a1, unsigned int a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v13 = *(uint64_t **)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CC063D1C(a1, v13, &v13[v14]);
    JUMPOUT(0x1D25D9CD0);
  }
  char v6 = 0;
  uint64_t v7 = v16;
  uint64_t v8 = 1;
  int v9 = (uint64_t *)(a1 + 8);
  do
  {
    char v10 = v6;
    if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v7++ = *v9;
    }
    int v9 = (uint64_t *)(a1 + 8 + 8 * v8);
    char v6 = 1;
    uint64_t v8 = 2;
  }
  while ((v10 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CC063D1C(a1, v16, v7);
}

uint64_t sub_1CC063D1C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 24);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC05AC44((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC063DD8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 == 16)
  {
    unsigned int v11 = *(_DWORD *)(a2 + 32);
    if (v11 > 0x40) {
      operator new[]();
    }
    uint64_t v10 = *(void *)(a2 + 24);
    llvm::APInt::operator+=((uint64_t)&v10, 1uLL);
    unsigned int v5 = v11;
    unsigned int v11 = 0;
    unsigned int v6 = *(_DWORD *)(a2 + 32);
    if (v6 > 0x40) {
      operator new[]();
    }
    uint64_t v7 = *(void *)(a2 + 24);
    unsigned int v13 = v5;
    uint64_t v12 = v10;
    unsigned int v15 = v6;
    uint64_t v14 = v7;
    BOOL v8 = sub_1CC05E860((__int16 *)a1, (uint64_t)&v12, 0x100000000);
    if (v15 >= 0x41 && v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
    if (v13 >= 0x41 && v12) {
      MEMORY[0x1D25D9CB0](v12, 0x1000C8000313F17);
    }
    if (v11 >= 0x41 && v10) {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
  }
  else if ((v4 - 11) < 2 || *(_WORD *)a1 == 3)
  {
    return 0;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a1 & 0xFF00 | 3;
    *(void *)(a1 + 8) = a2;
    return 1;
  }
  return v8;
}

void sub_1CC063FBC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int v9 = (char *)operator new(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = v9;
  *(void *)a1 = v9;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12) {
      memset_pattern16(v9, &unk_1CFAC3070, 16 * v12);
    }
    if (v3)
    {
      int v13 = 0;
      int v14 = v12 - 1;
      unsigned int v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        if ((*v15 != -4096 || v17 != -4096) && (v16 != -8192 || v17 != -8192))
        {
          unint64_t v18 = ((v17 >> 4) ^ (v17 >> 9) | ((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32))
              + ~((unint64_t)((v17 >> 4) ^ (v17 >> 9)) << 32);
          unint64_t v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          unint64_t v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          unsigned int v21 = v14 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~(v20 << 27)));
          BOOL v22 = &v10[16 * v21];
          uint64_t v23 = *(void *)v22;
          uint64_t v24 = *((void *)v22 + 1);
          if (v16 != *(void *)v22 || v17 != v24)
          {
            uint64_t v26 = 0;
            int v27 = 1;
            while (v23 != -4096 || v24 != -4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v24 == -8192;
              }
              if (v28 && v23 == -8192) {
                uint64_t v26 = v22;
              }
              unsigned int v30 = v21 + v27++;
              unsigned int v21 = v30 & v14;
              BOOL v22 = &v10[16 * (v30 & v14)];
              uint64_t v23 = *(void *)v22;
              uint64_t v24 = *((void *)v22 + 1);
              if (v16 == *(void *)v22 && v17 == v24) {
                goto LABEL_42;
              }
            }
            if (v26) {
              BOOL v22 = v26;
            }
          }
LABEL_42:
          *(void *)BOOL v22 = v16;
          *((void *)v22 + 1) = v17;
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 2;
      }
      while (v15 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v11);
  }
}

uint64_t sub_1CC0641D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = sub_1CC062CF8(a1, a3);
  uint64_t v12 = v11;
  int v13 = *(_WORD *)a4;
  if (v13 == 6)
  {
    unsigned int v15 = (unsigned int *)(v11 + 200);
    unsigned int v14 = *(_DWORD *)(v11 + 200);
    int v16 = v14 & 1;
    uint64_t v17 = v11 + 208;
    unsigned int v18 = a2 >> 4;
    if (v14)
    {
      int v19 = 4;
      uint64_t v20 = v11 + 208;
    }
    else
    {
      int v19 = *(_DWORD *)(v11 + 216);
      if (!v19)
      {
        uint64_t v33 = 0;
        unsigned int v34 = 0;
        goto LABEL_36;
      }
      uint64_t v20 = *(void *)(v11 + 208);
    }
    int v25 = v19 - 1;
    unsigned int v26 = v25 & (v18 ^ (a2 >> 9));
    int v27 = (uint64_t *)(v20 + 8 * v26);
    uint64_t v28 = *v27;
    if (*v27 == a2) {
      goto LABEL_41;
    }
    int v29 = 0;
    int v30 = 1;
    while (v28 != -4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v28 == -8192;
      }
      if (v31) {
        int v29 = v27;
      }
      unsigned int v32 = v26 + v30++;
      unsigned int v26 = v32 & v25;
      int v27 = (uint64_t *)(v20 + 8 * v26);
      uint64_t v28 = *v27;
      if (*v27 == a2) {
        goto LABEL_41;
      }
    }
    if (v29) {
      uint64_t v33 = v29;
    }
    else {
      uint64_t v33 = v27;
    }
    if (v14) {
      unsigned int v34 = 4;
    }
    else {
      unsigned int v34 = *(_DWORD *)(v11 + 216);
    }
LABEL_36:
    if (4 * (v14 >> 1) + 4 < 3 * v34)
    {
      if (v34 + ~(v14 >> 1) - *(_DWORD *)(v11 + 204) > v34 >> 3)
      {
LABEL_38:
        *unsigned int v15 = (v14 & 0xFFFFFFFE | v16) + 2;
        if (*v33 != -4096) {
          --*(_DWORD *)(v12 + 204);
        }
        *uint64_t v33 = a2;
        goto LABEL_41;
      }
      sub_1CC0646B0(v11 + 200, v34);
      unsigned int v14 = *v15;
      if (*v15)
      {
        int v44 = 4;
LABEL_77:
        int v16 = *v15 & 1;
        int v45 = v44 - 1;
        unsigned int v46 = (v44 - 1) & (v18 ^ (a2 >> 9));
        uint64_t v33 = (uint64_t *)(v17 + 8 * v46);
        uint64_t v47 = *v33;
        if (*v33 == a2) {
          goto LABEL_38;
        }
        uint64_t v40 = 0;
        int v48 = 1;
        while (v47 != -4096)
        {
          if (v40) {
            BOOL v49 = 0;
          }
          else {
            BOOL v49 = v47 == -8192;
          }
          if (v49) {
            uint64_t v40 = v33;
          }
          unsigned int v50 = v46 + v48++;
          unsigned int v46 = v50 & v45;
          uint64_t v33 = (uint64_t *)(v17 + 8 * (v50 & v45));
          uint64_t v47 = *v33;
          if (*v33 == a2) {
            goto LABEL_38;
          }
        }
        goto LABEL_87;
      }
      int v44 = *(_DWORD *)(v12 + 216);
      if (v44)
      {
        uint64_t v17 = *(void *)(v12 + 208);
        goto LABEL_77;
      }
LABEL_90:
      int v16 = 0;
      uint64_t v33 = 0;
      goto LABEL_38;
    }
    sub_1CC0646B0(v11 + 200, 2 * v34);
    unsigned int v14 = *v15;
    if (*v15)
    {
      int v36 = 4;
    }
    else
    {
      int v36 = *(_DWORD *)(v12 + 216);
      if (!v36) {
        goto LABEL_90;
      }
      uint64_t v17 = *(void *)(v12 + 208);
    }
    int v16 = *v15 & 1;
    int v37 = v36 - 1;
    unsigned int v38 = (v36 - 1) & (v18 ^ (a2 >> 9));
    uint64_t v33 = (uint64_t *)(v17 + 8 * v38);
    uint64_t v39 = *v33;
    if (*v33 == a2) {
      goto LABEL_38;
    }
    uint64_t v40 = 0;
    int v41 = 1;
    while (v39 != -4096)
    {
      if (v40) {
        BOOL v42 = 0;
      }
      else {
        BOOL v42 = v39 == -8192;
      }
      if (v42) {
        uint64_t v40 = v33;
      }
      unsigned int v43 = v38 + v41++;
      unsigned int v38 = v43 & v37;
      uint64_t v33 = (uint64_t *)(v17 + 8 * (v43 & v37));
      uint64_t v39 = *v33;
      if (*v33 == a2) {
        goto LABEL_38;
      }
    }
LABEL_87:
    if (v40) {
      uint64_t v33 = v40;
    }
    goto LABEL_38;
  }
  if ((v13 - 4) < 2)
  {
    unsigned int v6 = *(_DWORD *)(a4 + 16);
    if (v6 > 0x40) {
      operator new[]();
    }
    uint64_t v4 = *(void *)(a4 + 8);
    unsigned int v7 = *(_DWORD *)(a4 + 32);
    if (v7 > 0x40) {
      operator new[]();
    }
    uint64_t v5 = *(void *)(a4 + 24);
    __int16 v21 = v13 | (*(unsigned __int8 *)(a4 + 1) << 8);
  }
  else
  {
    if ((v13 - 2) < 2) {
      uint64_t v4 = *(void *)(a4 + 8);
    }
    __int16 v21 = *(_WORD *)a4;
  }
  uint64_t v51 = 0;
  if ((sub_1CC05AB0C(v11, a2, &v51) & 1) == 0)
  {
    int v22 = *(_DWORD *)v12 >> 1;
    if (*(_DWORD *)v12) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = *(_DWORD *)(v12 + 16);
    }
    if (4 * v22 + 4 >= 3 * v23)
    {
      v23 *= 2;
    }
    else if (v23 + ~v22 - *(_DWORD *)(v12 + 4) > v23 >> 3)
    {
LABEL_13:
      uint64_t v24 = v51;
      *(_DWORD *)v12 += 2;
      if (*(void *)v24 != -4096) {
        --*(_DWORD *)(v12 + 4);
      }
      *(void *)uint64_t v24 = a2;
      *(_WORD *)(v24 + 8) = v13;
      if (v21 - 4 < 2)
      {
        *(_DWORD *)(v24 + 24) = v6;
        *(void *)(v24 + 16) = v4;
        *(_DWORD *)(v24 + 40) = v7;
        *(void *)(v24 + 32) = v5;
        *(_WORD *)(v24 + 8) = v21 & 0xFF00 | v13;
      }
      else if (v21 - 2 < 2)
      {
        *(void *)(v24 + 16) = v4;
      }
      goto LABEL_41;
    }
    sub_1CC06492C(v12, v23);
    uint64_t v51 = 0;
    sub_1CC05AB0C(v12, a2, &v51);
    goto LABEL_13;
  }
  if ((v21 & 0xFE) == 4)
  {
    if (v7 >= 0x41 && v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8000313F17);
    }
    if (v6 >= 0x41 && v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
    }
  }
LABEL_41:

  return sub_1CC062FBC(a1, a2);
}

int *sub_1CC0646B0(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CC06482C((int *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC06482C((int *)a1, v14, v6);
}

int *sub_1CC06482C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    unsigned int v6 = result + 10;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    unsigned int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_21:
      *(void *)uint64_t v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CC06492C(uint64_t a1, unsigned int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v16 = a2;
      *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }
    sub_1CC064B50(a1, v14, v14 + 48 * v15);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v17;
  do
  {
    uint64_t v8 = a1 + v6;
    uint64_t v9 = *(void *)(a1 + v6 + 8);
    if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)uint64_t v7 = v9;
      *((_WORD *)v7 + 4) = *(unsigned __int8 *)(v8 + 16);
      int v10 = *(unsigned __int8 *)(v8 + 16);
      if ((v10 - 4) < 2)
      {
        uint64_t v11 = a1 + v6;
        *((_DWORD *)v7 + 6) = *(_DWORD *)(a1 + v6 + 32);
        *((void *)v7 + 2) = *(void *)(a1 + v6 + 24);
        *(_DWORD *)(v11 + 32) = 0;
        *((_DWORD *)v7 + 10) = *(_DWORD *)(a1 + v6 + 48);
        *((void *)v7 + 4) = *(void *)(a1 + v6 + 40);
        *(_DWORD *)(v11 + 48) = 0;
        v7[9] = *(unsigned char *)(v8 + 17);
      }
      else if ((v10 - 2) < 2)
      {
        *((void *)v7 + 2) = *(void *)(a1 + v6 + 24);
      }
      *(_WORD *)(v8 + 16) = *(unsigned __int8 *)(v8 + 17) << 8;
      v7 += 48;
    }
    v6 += 48;
  }
  while (v6 != 192);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CC064B50(a1, (uint64_t)v17, (uint64_t)v7);
}

uint64_t sub_1CC064B50(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 200);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[6 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v13 = 0;
      uint64_t result = sub_1CC05AB0C((uint64_t)v5, v10, &v13);
      uint64_t v11 = v13;
      *uint64_t v13 = *(void *)a2;
      *((_WORD *)v11 + 4) = *(unsigned __int8 *)(a2 + 8);
      int v12 = *(unsigned __int8 *)(a2 + 8);
      if ((v12 - 4) < 2)
      {
        *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
        v11[2] = *(void *)(a2 + 16);
        *(_DWORD *)(a2 + 24) = 0;
        *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
        v11[4] = *(void *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = 0;
        *((unsigned char *)v11 + 9) = *(unsigned char *)(a2 + 9);
      }
      else if ((v12 - 2) < 2)
      {
        v11[2] = *(void *)(a2 + 16);
      }
      *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 9) << 8;
      *v5 += 2;
      if ((*(_WORD *)(a2 + 8) & 0xFE) == 4) {
        uint64_t result = sub_1CC05EB8C(a2 + 16);
      }
    }
    a2 += 48;
  }
  return result;
}

void sub_1CC064CA0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v1 = *(unsigned int *)(a1 + 16);
    if (v1 <= 4 * *(_DWORD *)(a1 + 8) || v1 < 0x41)
    {
      if (v1)
      {
        unsigned int v2 = *(void **)a1;
        uint64_t v3 = *(void *)a1 + 16 * v1;
        do
        {
          *unsigned int v2 = -4096;
          v2[1] = -4096;
          v2 += 2;
        }
        while (v2 != (void *)v3);
      }
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      sub_1CC064CF0(a1);
    }
  }
}

void sub_1CC064CF0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *(void *)(a1 + 8) = 0;
    if (v2)
    {
      int v6 = *(void **)a1;
      memset_pattern16(v6, &unk_1CFAC3070, 16 * v2);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)a1, 8);
    sub_1CC05ACF0(a1, v5);
  }
}

uint64_t sub_1CC064DB0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (__int16 *)result;
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16) - 33;
  BOOL v4 = v3 > 0x33;
  uint64_t v5 = (1 << v3) & 0x8000008000001;
  BOOL v6 = v4 || v5 == 0;
  if (v6 || (*(unsigned char *)(a2 + 23) & 0x20) == 0)
  {
LABEL_20:
    *uint64_t v2 = 6;
    return result;
  }
  uint64_t v8 = ***(void ***)a2;
  uint64_t v37 = a2;
  int v9 = *(_DWORD *)(v8 + 2496);
  if (!v9)
  {
    uint64_t v24 = 0;
LABEL_36:
    uint64_t result = (uint64_t)sub_1CC609054(v8 + 2480, (uint64_t)&v37, &v37, v24);
    uint64_t v25 = v37;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)uint64_t result = v25;
    *(void *)(result + 8) = result + 24;
    *(void *)(result + 16) = 0x100000000;
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(v8 + 2480);
  int v11 = v9 - 1;
  unsigned int v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = v10 + 40 * v12;
  uint64_t v13 = *(void *)result;
  if (*(void *)result != a2)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = (void *)result;
      }
      unsigned int v17 = v12 + v15++;
      unsigned int v12 = v17 & v11;
      uint64_t result = v10 + 40 * v12;
      uint64_t v13 = *(void *)result;
      if (*(void *)result == a2) {
        goto LABEL_16;
      }
    }
    if (v14) {
      uint64_t v24 = v14;
    }
    else {
      uint64_t v24 = (void *)result;
    }
    goto LABEL_36;
  }
LABEL_16:
  uint64_t v18 = *(unsigned int *)(result + 16);
  if (!v18) {
    goto LABEL_20;
  }
  int v19 = (uint64_t *)(*(void *)(result + 8) + 8);
  uint64_t v20 = 16 * v18;
  while (*((_DWORD *)v19 - 2) != 4)
  {
    v19 += 2;
    v20 -= 16;
    if (!v20) {
      goto LABEL_20;
    }
  }
  uint64_t result = *v19;
  if (!*v19 || *(unsigned char *)(*(void *)a2 + 8) != 13) {
    goto LABEL_20;
  }
  uint64_t result = llvm::getConstantRangeFromMetadata(result, (uint64_t)&__s1);
  unsigned int v21 = v34;
  if (v34 <= 0x40)
  {
    uint64_t v22 = (uint64_t)__s1;
    unint64_t v23 = (unint64_t)__s2;
    if (__s1 == __s2 && (!v34 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v34))) {
      goto LABEL_39;
    }
    *uint64_t v2 = 0;
    if (!(v23 | v22)) {
      goto LABEL_29;
    }
LABEL_27:
    unsigned int v38 = v21;
    uint64_t v37 = v22;
    unsigned int v40 = v36;
    unint64_t v39 = v23;
    unsigned int v34 = 0;
    unsigned int v36 = 0;
    uint64_t result = sub_1CC05E860(v2, (uint64_t)&v37, 0x100000000);
    if (v40 >= 0x41)
    {
      uint64_t result = v39;
      if (v39) {
        uint64_t result = MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
      }
    }
    if (v38 >= 0x41)
    {
      uint64_t result = v37;
      if (v37) {
        uint64_t result = MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
      }
    }
    goto LABEL_29;
  }
  unsigned int v32 = v34;
  unint64_t v26 = v34 + 63;
  unint64_t v23 = (unint64_t)__s2;
  BOOL v31 = __s1;
  if (memcmp(__s1, __s2, (v26 >> 3) & 0x3FFFFFF8))
  {
    *uint64_t v2 = 0;
    uint64_t v22 = (uint64_t)v31;
    unsigned int v21 = v32;
    goto LABEL_27;
  }
  uint64_t result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1);
  if (result != v32)
  {
    int v27 = 0;
    uint64_t v28 = v26 >> 6;
    do
    {
      BOOL v4 = v28-- < 1;
      if (v4) {
        break;
      }
      unint64_t v29 = v31[v28];
      v27 += __clz(v29);
    }
    while (!v29);
    unsigned int v21 = v32;
    unsigned int v30 = v32 | 0xFFFFFFC0;
    if ((v32 & 0x3F) == 0) {
      unsigned int v30 = 0;
    }
    *uint64_t v2 = 0;
    BOOL v6 = v27 + v30 == v32;
    uint64_t v22 = (uint64_t)v31;
    if (v6) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
LABEL_39:
  *uint64_t v2 = 6;
LABEL_29:
  if (v36 >= 0x41)
  {
    uint64_t result = (uint64_t)__s2;
    if (__s2) {
      uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
  }
  if (v34 >= 0x41)
  {
    uint64_t result = (uint64_t)__s1;
    if (__s1) {
      return MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  return result;
}

void sub_1CC0650E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Instruction *a6)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v10 = a2;
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v12 = *(unsigned __int8 *)(a3 + 16);
    if (v12 <= 0x14)
    {
      LOWORD(__s2) = 0;
      if (v12 - 11 <= 1)
      {
        __int16 v13 = 1;
        goto LABEL_30;
      }
      sub_1CC05E6A4((uint64_t)&__s2, a3, 0);
      __int16 v13 = (__int16)__s2;
      int v28 = __s2;
      *(_WORD *)a1 = __s2;
      if ((v28 - 2) >= 2)
      {
        if ((v28 - 4) > 1)
        {
LABEL_73:
          *(unsigned char *)(a1 + 40) = 1;
          return;
        }
        *(_DWORD *)(a1 + 16) = v168[0];
        *(void *)(a1 + 8) = v167;
        *(_DWORD *)(a1 + 32) = v170;
        *(void *)(a1 + 24) = v169;
LABEL_30:
        *(_WORD *)a1 = v13;
        goto LABEL_73;
      }
      unint64_t v39 = v167;
LABEL_72:
      *(void *)(a1 + 8) = v39;
      goto LABEL_73;
    }
  }
  int v15 = (void *)(a4 + 40);
  uint64_t v14 = *(void **)(a4 + 40);
  if (v14 == (void *)(a4 + 40)) {
    goto LABEL_46;
  }
  BOOL v16 = v14 - 3;
  if (!v14) {
    BOOL v16 = 0;
  }
  unsigned int v17 = *((unsigned __int8 *)v16 + 16) - 40;
  if (v17 < 0xFFFFFFF5) {
    BOOL v16 = 0;
  }
  if (!v14) {
    goto LABEL_31;
  }
  BOOL v18 = *((unsigned char *)v16 + 16) == 30 && v17 >= 0xFFFFFFF5;
  if (!v18 || (*((_DWORD *)v16 + 5) & 0x7FFFFFF) != 3) {
    goto LABEL_31;
  }
  uint64_t v20 = *(v16 - 4);
  if (v20 == *(v16 - 8))
  {
    uint64_t v10 = a2;
    goto LABEL_31;
  }
  unsigned int v21 = (llvm::Constant ****)*(v16 - 12);
  if (v21 == (llvm::Constant ****)a3)
  {
    uint64_t v46 = ***(void ***)a3;
    uint64_t v47 = *(llvm::ConstantInt **)(v46 + 1888);
    unint64_t v48 = *(unsigned int *)(v46 + 1896);
    LODWORD(v167) = v48 >> 8;
    BOOL v49 = (void *)(a4 + 40);
    if (v48 >> 8 > 0x40) {
      operator new[]();
    }
    if (v48 <= 0xFF) {
      LOBYTE(v50) = 0;
    }
    else {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v48) + 63);
    }
    __s2 = (void *)(v50 & (v20 == a5));
    BOOL v55 = llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&__s2, (const llvm::APInt *)a3);
    uint64_t v10 = a2;
    if (v167 >= 0x41 && __s2) {
      MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
    LOWORD(__s2) = 0;
    if (*((unsigned __int8 *)v55 + 16) - 11 >= 2)
    {
      sub_1CC05E6A4((uint64_t)&__s2, (uint64_t)v55, 0);
      __int16 v56 = __s2;
      if (__s2 - 2 >= 2)
      {
        uint64_t v51 = (unsigned int *)(__s2 - 4);
        uint64_t v8 = a4;
        int v15 = v49;
        if (v51 <= 1)
        {
          unsigned int v52 = v168[0];
          uint64_t v51 = (unsigned int *)v167;
          unsigned int v54 = v170;
          __int16 v56 = (__int16)__s2;
          uint64_t v53 = v169;
        }
        goto LABEL_210;
      }
      uint64_t v51 = (unsigned int *)v167;
    }
    else
    {
      __int16 v56 = 1;
    }
    uint64_t v8 = a4;
    int v15 = v49;
LABEL_210:
    int v86 = 1;
    goto LABEL_284;
  }
  int v150 = (void *)(a4 + 40);
  sub_1CC05F3C8((unint64_t)&__s2, (llvm::Type **)a3, v21, v20 == a5);
  __int16 v22 = (__int16)__s2;
  __int16 v23 = __s2;
  if (__s2 == 6)
  {
    if (a3)
    {
      unsigned int v24 = *(unsigned __int8 *)(a3 + 16);
      if (v24 - 21 >= 7 && *(unsigned char *)(*(void *)a3 + 8) == 13)
      {
        if (v24 >= 0x1C && v24 - 66 < 0xD
          || (v24 > 0x1B ? (BOOL v87 = v24 - 41 >= 0x12) : (BOOL v87 = 1), v87 ? (v88 = 0) : (v88 = 1), v24 == 95 || v88))
        {
          int v25 = *(_DWORD *)(a3 + 20);
          if ((v25 & 0x40000000) != 0)
          {
            int v27 = *(char **)(a3 - 8);
            unint64_t v26 = v25 & 0x7FFFFFF;
          }
          else
          {
            unint64_t v26 = v25 & 0x7FFFFFF;
            int v27 = (char *)(a3 - 32 * v26);
          }
          unint64_t v89 = (void *)(*(void *)(*(void *)(a5 + 56) + 40) + 272);
          uint64_t v90 = v27;
          if (v26)
          {
            uint64_t v91 = 32 * v26;
            uint64_t v90 = v27;
            do
            {
              if (*(llvm::Constant *****)v90 == v21) {
                goto LABEL_230;
              }
              v90 += 32;
              v91 -= 32;
            }
            while (v91);
            uint64_t v90 = &v27[32 * v26];
          }
LABEL_230:
          if (v26 != (v90 - v27) >> 5)
          {
            LODWORD(v173) = 1;
            unint64_t v172 = v20 == a5;
            sub_1CC066A54((__int16 *)&v177, a3, v21, (llvm::Type *)&v172, v89);
            uint64_t v10 = a2;
            if ((v22 & 0xFE) == 4)
            {
              if (v170 >= 0x41 && v169) {
                MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
              }
              if (v168[0] >= 0x41 && v167) {
                MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
              }
            }
            __int16 v22 = v177;
            if (v177 - 2 < 2)
            {
              v167 = v178;
            }
            else if (v177 - 4 <= 1)
            {
              v168[0] = v179;
              v167 = v178;
              LODWORD(v179) = 0;
              unsigned int v170 = v181;
              uint64_t v169 = v180;
              LOWORD(__s2) = (_WORD)v177;
              __int16 v22 = (__int16)v177;
            }
            if (v173 >= 0x41 && v172) {
              MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
            }
            goto LABEL_270;
          }
          if (v26)
          {
            uint64_t v154 = *(void *)(*(void *)(a5 + 56) + 40) + 272;
            size_t v156 = (size_t)a6;
            uint64_t v92 = 0;
            unint64_t v93 = 0;
            while (1)
            {
              if ((v25 & 0x40000000) != 0) {
                uint64_t v94 = *(void *)(a3 - 8);
              }
              else {
                uint64_t v94 = a3 - 32 * v26;
              }
              int v95 = *(llvm::Type ***)(v94 + v92);
              sub_1CC05F3C8((unint64_t)&v177, v95, v21, v20 == a5);
              if (v177 == 2)
              {
                unsigned int v145 = v178;
                if (*((unsigned char *)v178 + 16) == 16)
                {
                  LODWORD(v144) = (unsigned __int16)v177;
                  uint64_t v148 = v8;
                  unsigned int v164 = v178[8];
                  if (v164 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v104 = (void *)*((void *)v178 + 3);
                  goto LABEL_358;
                }
              }
              if ((v177 & 0xFE) == 4)
              {
                LODWORD(v173) = v179;
                unint64_t v146 = v179;
                LODWORD(v144) = (unsigned __int16)v177;
                if (v179 > 0x40) {
                  operator new[]();
                }
                unsigned int v145 = v178;
                uint64_t v148 = v8;
                unint64_t v172 = (unint64_t)v178;
                llvm::APInt::operator+=((uint64_t)&v172, 1uLL);
                unsigned int v96 = v173;
                unint64_t v97 = v172;
                LODWORD(v173) = 0;
                size_t v98 = v181;
                if (v181 > 0x40)
                {
                  unint64_t v140 = (llvm::APInt *)v180;
                  size_t __n = v181;
                  unint64_t v102 = v172;
                  unsigned int v139 = v96;
                  int v103 = memcmp(v180, (const void *)v172, (((unint64_t)v181 + 63) >> 3) & 0x3FFFFFF8);
                  unsigned int v96 = v139;
                  unint64_t v97 = v102;
                  unint64_t v99 = v140;
                  size_t v98 = __n;
                  BOOL v100 = v103 == 0;
                }
                else
                {
                  unint64_t v99 = (llvm::APInt *)v180;
                  BOOL v100 = v180 == (void *)v172;
                }
                int v101 = v100;
                if (v96 >= 0x41)
                {
                  if (v97)
                  {
                    size_t __n = v98;
                    int v141 = v99;
                    MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
                    unint64_t v99 = v141;
                    size_t v98 = __n;
                    if (v173 >= 0x41)
                    {
                      if (v172)
                      {
                        MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
                        unint64_t v99 = v141;
                        size_t v98 = __n;
                      }
                    }
                  }
                }
                if (v101)
                {
                  BOOL v125 = v99;
                  size_t v126 = v98;
                  LODWORD(v173) = v146;
                  if (v146 > 0x40) {
                    operator new[]();
                  }
                  unint64_t v172 = (unint64_t)v145;
                  llvm::APInt::operator+=((uint64_t)&v172, 1uLL);
                  unsigned int v127 = v173;
                  unint64_t v128 = v172;
                  LODWORD(v173) = 0;
                  if (v126 > 0x40) {
                    BOOL v129 = memcmp(v125, (const void *)v172, ((v126 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  }
                  else {
                    BOOL v129 = v125 == (llvm::APInt *)v172;
                  }
                  int v130 = v129;
                  if (v127 >= 0x41)
                  {
                    if (v128)
                    {
                      MEMORY[0x1D25D9CB0](v128, 0x1000C8000313F17);
                      if (v173 >= 0x41)
                      {
                        if (v172) {
                          MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
                        }
                      }
                    }
                  }
                  BOOL v131 = v130 == 0;
                  if (v130) {
                    unint64_t v132 = (void **)&v178;
                  }
                  else {
                    unint64_t v132 = 0;
                  }
                  uint64_t v133 = 8;
                  if (!v131) {
                    uint64_t v133 = (uint64_t)&v179;
                  }
                  unsigned int v164 = *(_DWORD *)v133;
                  if (v164 > 0x40) {
                    operator new[]();
                  }
                  uint64_t v104 = *v132;
LABEL_358:
                  unint64_t __src = v104;
                  char v165 = 1;
                  sub_1CC066A54((__int16 *)&v172, a3, (llvm::Constant ****)v95, (llvm::Type *)&__src, (void *)v154);
                  if ((v22 & 0xFE) == 4)
                  {
                    if (v170 >= 0x41 && v169) {
                      MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
                    }
                    if (v168[0] >= 0x41 && v167) {
                      MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
                    }
                  }
                  __int16 v22 = v172;
                  LOWORD(__s2) = v172;
                  if (v172 - 2 < 2)
                  {
                    v167 = v173;
                  }
                  else if (v172 - 4 <= 1)
                  {
                    v168[0] = v174;
                    v167 = v173;
                    LODWORD(v174) = 0;
                    unsigned int v170 = v176;
                    uint64_t v169 = v175;
                    LOWORD(__s2) = v172;
                    __int16 v22 = v172;
                  }
                  if (v165 && v164 >= 0x41 && __src) {
                    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  }
                  if ((v144 & 0xFE) == 4)
                  {
                    if (v181 >= 0x41 && v180) {
                      MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
                    }
                    if (v179 >= 0x41 && v145)
                    {
                      MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
                      __int16 v22 = (__int16)__s2;
                    }
                  }
                  a6 = (llvm::Instruction *)v156;
                  uint64_t v10 = a2;
                  uint64_t v8 = v148;
LABEL_270:
                  __int16 v23 = v22;
                  if (v22 == 6)
                  {
                    int v105 = 1;
                    goto LABEL_277;
                  }
                  if (v22 - 2 < 2)
                  {
                    LOWORD(v154) = v22;
                    unint64_t v146 = (unint64_t)v167;
                    goto LABEL_276;
                  }
                  if (v22 - 4 > 1)
                  {
LABEL_274:
                    LOWORD(v154) = v23;
                    goto LABEL_276;
                  }
LABEL_93:
                  LODWORD(v145) = v168[0];
                  unint64_t v146 = (unint64_t)v167;
                  LODWORD(__n) = v170;
                  int v144 = v169;
                  LOWORD(v154) = v22;
                  v168[0] = 0;
                  unsigned int v170 = 0;
                  goto LABEL_276;
                }
                if (v181 >= 0x41 && v180) {
                  MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
                }
                uint64_t v8 = v148;
                if (v179 >= 0x41 && v178) {
                  MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
                }
              }
              ++v93;
              int v25 = *(_DWORD *)(a3 + 20);
              unint64_t v26 = v25 & 0x7FFFFFF;
              v92 += 32;
              if (v93 >= v26)
              {
                a6 = (llvm::Instruction *)v156;
                break;
              }
            }
          }
        }
      }
    }
    uint64_t v10 = a2;
    goto LABEL_270;
  }
  if (__s2 - 2 >= 2)
  {
    uint64_t v10 = a2;
    if (__s2 - 4 > 1) {
      goto LABEL_274;
    }
    goto LABEL_93;
  }
  LOWORD(v154) = __s2;
  unint64_t v146 = (unint64_t)v167;
  uint64_t v10 = a2;
LABEL_276:
  int v105 = 0;
  LOBYTE(v22) = 0;
LABEL_277:
  int v106 = v22 & 0xFE;
  uint64_t v7 = a5;
  if (v106 == 4)
  {
    if (v170 >= 0x41 && v169) {
      MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
    }
    if (v168[0] >= 0x41 && v167) {
      MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
    }
  }
  if (!v105)
  {
    int v86 = 1;
    int v15 = v150;
    uint64_t v51 = (unsigned int *)v146;
    unsigned int v52 = v145;
    uint64_t v53 = v144;
    unsigned int v54 = __n;
    goto LABEL_283;
  }
  int v15 = v150;
  uint64_t v14 = (void *)*v150;
LABEL_31:
  if (v14 == v15)
  {
LABEL_46:
    uint64_t v14 = v15;
    goto LABEL_47;
  }
  if (v14) {
    unint64_t v29 = v14 - 3;
  }
  else {
    unint64_t v29 = 0;
  }
  unsigned int v30 = *((unsigned __int8 *)v29 + 16) - 40;
  if (v30 >= 0xFFFFFFF5) {
    BOOL v31 = v29;
  }
  else {
    BOOL v31 = 0;
  }
  if (!v14) {
    goto LABEL_47;
  }
  if (*((unsigned char *)v31 + 16) != 31 || v30 < 0xFFFFFFF5) {
    goto LABEL_47;
  }
  int v33 = *((_DWORD *)v31 + 5);
  unsigned int v34 = (v33 & 0x40000000) != 0 ? (llvm::Constant *****)*(v31 - 1) : (llvm::Constant *****)&v31[-4 * (v33 & 0x7FFFFFF)];
  if (*(_DWORD *)(*(void *)a3 + 8) != 13) {
    goto LABEL_47;
  }
  unsigned int v40 = *v34;
  if (*v34 != (llvm::Constant ****)a3)
  {
    unsigned int v41 = *(unsigned __int8 *)(a3 + 16);
    if (v41 - 21 < 7) {
      goto LABEL_47;
    }
    if (v41 < 0x1C || v41 - 66 >= 0xD)
    {
      BOOL v57 = v41 <= 0x1B || v41 - 41 >= 0x12;
      BOOL v58 = !v57;
      if (v41 != 95 && !v58) {
        goto LABEL_47;
      }
    }
    int v42 = *(_DWORD *)(a3 + 20);
    if ((v42 & 0x40000000) != 0)
    {
      int v44 = *(llvm::Constant ******)(a3 - 8);
      uint64_t v43 = v42 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v43 = v42 & 0x7FFFFFF;
      int v44 = (llvm::Constant *****)(a3 - 32 * v43);
    }
    int v59 = v44;
    if (v43)
    {
      uint64_t v60 = 32 * v43;
      int v59 = v44;
      while (*v59 != v40)
      {
        v59 += 4;
        v60 -= 32;
        if (!v60)
        {
          int v59 = &v44[4 * v43];
          break;
        }
      }
    }
    if (v43 == ((char *)v59 - (char *)v44) >> 5)
    {
LABEL_47:
      LOWORD(v177) = 6;
      goto LABEL_48;
    }
  }
  uint64_t v142 = v10;
  unsigned int v151 = v15;
  if ((v33 & 0x40000000) != 0) {
    unsigned int v61 = (void *)*(v31 - 1);
  }
  else {
    unsigned int v61 = &v31[-4 * (v33 & 0x7FFFFFF)];
  }
  uint64_t v158 = v61[4];
  llvm::ConstantRange::ConstantRange(&v172, *(_DWORD *)(*(void *)a3 + 8) >> 8, v158 == v7);
  if (((*((_DWORD *)v31 + 5) >> 1) & 0x3FFFFFF) == 1)
  {
LABEL_186:
    uint64_t v73 = v8;
    int v160 = (int)v173;
    uint64_t v74 = v173;
    unsigned int v75 = (void *)v172;
    unint64_t v159 = v172;
    unsigned int v76 = v175;
    int v162 = (int)v175;
    uint64_t v77 = (const void *)v174;
    unint64_t v161 = v174;
    LODWORD(v173) = 0;
    LODWORD(v175) = 0;
    if (v74 > 0x40)
    {
      if (!memcmp((const void *)v172, (const void *)v174, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8)
        && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v159) == v74)
      {
        goto LABEL_213;
      }
      if (!memcmp(v75, v77, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8))
      {
        int v134 = 0;
        int64_t v135 = (unint64_t)(v74 + 63) >> 6;
        do
        {
          if (v135-- < 1) {
            break;
          }
          unint64_t v137 = v75[v135];
          v134 += __clz(v137);
        }
        while (!v137);
        int v138 = v74 | 0xFFFFFFC0;
        if ((v74 & 0x3F) == 0) {
          int v138 = 0;
        }
        LOWORD(__s2) = 0;
        if (v134 + v138 == v74) {
          goto LABEL_192;
        }
      }
      else
      {
        LOWORD(__s2) = 0;
      }
    }
    else
    {
      if (v172 == v174 && (!v74 || v172 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v74))
      {
LABEL_213:
        LOWORD(__s2) = 6;
        goto LABEL_192;
      }
      LOWORD(__s2) = 0;
      if (!(v174 | v172))
      {
LABEL_192:
        unsigned int v78 = (void *)v146;
        unsigned int v79 = v145;
        unsigned int v80 = v144;
        unsigned int v81 = __n;
        LOWORD(v154) = __s2;
        if (__s2 - 2 < 2)
        {
          unsigned int v78 = v167;
        }
        else if (__s2 - 4 <= 1)
        {
          unsigned int v79 = v168[0];
          unsigned int v78 = v167;
          unsigned int v81 = v170;
          unsigned int v80 = v169;
          LOWORD(v154) = (_WORD)__s2;
          v168[0] = 0;
          unsigned int v170 = 0;
        }
        LOWORD(__s2) = (unsigned __int16)__s2 & 0xFF00;
        if (v76 >= 0x41 && v77)
        {
          uint64_t v147 = v78;
          unsigned int v118 = v79;
          int v119 = v80;
          unsigned int v120 = v81;
          MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
          unsigned int v81 = v120;
          unsigned int v80 = v119;
          unsigned int v79 = v118;
          unsigned int v78 = v147;
        }
        uint64_t v10 = v142;
        if (v74 >= 0x41 && v75)
        {
          v121 = v78;
          unsigned int v122 = v79;
          uint64_t v123 = v80;
          unsigned int v124 = v81;
          MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
          unsigned int v81 = v124;
          unsigned int v80 = v123;
          unsigned int v79 = v122;
          unsigned int v78 = v121;
        }
        int v152 = 1;
        uint64_t v8 = v73;
        goto LABEL_205;
      }
    }
    LODWORD(v178) = v74;
    uint64_t v177 = v75;
    LODWORD(v180) = v76;
    v179 = (void *)v77;
    int v160 = 0;
    int v162 = 0;
    sub_1CC05E860((__int16 *)&__s2, (uint64_t)&v177, 0x100000000);
    if (v180 >= 0x41 && v179) {
      MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
    }
    if (v178 >= 0x41 && v177) {
      MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
    }
    LODWORD(v74) = 0;
    unsigned int v76 = 0;
    goto LABEL_192;
  }
  uint64_t v62 = 0;
  size_t v155 = 2 * (((*((_DWORD *)v31 + 5) >> 1) & 0x3FFFFFFu) - 1);
  int v152 = 1;
  unsigned int v153 = v40;
  while (1)
  {
    int v63 = *((_DWORD *)v31 + 5);
    if ((v63 & 0x40000000) != 0) {
      unint64_t v64 = (void *)*(v31 - 1);
    }
    else {
      unint64_t v64 = &v31[-4 * (v63 & 0x7FFFFFF)];
    }
    uint64_t v65 = v64[4 * ((v62 + 2) & 0xFFFFFFFE)];
    unsigned int v66 = *(_DWORD *)(v65 + 32);
    unsigned int v164 = v66;
    if (v66 > 0x40) {
      operator new[]();
    }
    unint64_t __src = *(void **)(v65 + 24);
    LODWORD(v178) = v66;
    uint64_t v177 = __src;
    LODWORD(v167) = v66;
    __s2 = __src;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    LODWORD(v180) = v167;
    v179 = __s2;
    if (v40 != (llvm::Constant ****)a3)
    {
      sub_1CC066A54((__int16 *)&__s2, a3, v40, (llvm::Type *)&__src, (void *)(*(void *)(*(void *)(v7 + 56) + 40) + 272));
      int v67 = __s2;
      if (__s2 == 6)
      {
        int v152 = 0;
        LOWORD(v154) = v154 & 0xFF00;
      }
      else
      {
        if (v178 > 0x40 || v168[0] > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v177, v168[0]);
          if (v178 <= 0x40) {
            uint64_t v177 = v167;
          }
          else {
            memcpy(v177, v167, (((unint64_t)v178 + 63) >> 3) & 0x3FFFFFF8);
          }
          unsigned int v40 = v153;
        }
        else
        {
          uint64_t v177 = v167;
          LODWORD(v178) = v168[0];
        }
        if (v180 > 0x40 || v170 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v179, v170);
          if (v180 <= 0x40) {
            v179 = v169;
          }
          else {
            memcpy(v179, v169, (((unint64_t)v180 + 63) >> 3) & 0x3FFFFFF8);
          }
          unsigned int v40 = v153;
        }
        else
        {
          v179 = v169;
          LODWORD(v180) = v170;
        }
      }
      if ((__s2 & 0xFE) == 4)
      {
        if (v170 >= 0x41 && v169) {
          MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
        }
        if (v168[0] >= 0x41 && v167) {
          MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
        }
      }
      if (v67 == 6) {
        break;
      }
    }
    int v68 = *((_DWORD *)v31 + 5);
    if (v158 == v7)
    {
      if ((v68 & 0x40000000) != 0) {
        int v70 = (void *)*(v31 - 1);
      }
      else {
        int v70 = &v31[-4 * (v68 & 0x7FFFFFF)];
      }
      uint64_t v72 = (v62 + 3);
      if (v62 == 0x1FFFFFFFCLL) {
        uint64_t v72 = 1;
      }
      if (v40 != (llvm::Constant ****)a3 || v70[4 * v72] == v7) {
        goto LABEL_157;
      }
      llvm::ConstantRange::difference((llvm::ConstantRange *)&v172, (const llvm::ConstantRange *)&v177, (uint64_t)&__s2);
    }
    else
    {
      if ((v68 & 0x40000000) != 0) {
        uint64_t v69 = (void *)*(v31 - 1);
      }
      else {
        uint64_t v69 = &v31[-4 * (v68 & 0x7FFFFFF)];
      }
      uint64_t v71 = (v62 + 3);
      if (v62 == 0x1FFFFFFFCLL) {
        uint64_t v71 = 1;
      }
      if (v69[4 * v71] != v7) {
        goto LABEL_157;
      }
      llvm::ConstantRange::unionWith((uint64_t)&v172, (unsigned int *)&v177, 0, (uint64_t)&__s2);
    }
    if (v173 >= 0x41 && v172) {
      MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
    }
    unint64_t v172 = (unint64_t)__s2;
    LODWORD(v173) = v167;
    LODWORD(v167) = 0;
    if (v175 >= 0x41 && v174)
    {
      MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
      unint64_t v174 = *(void *)v168;
      LODWORD(v175) = v169;
      LODWORD(v169) = 0;
      if (v167 >= 0x41 && __s2) {
        MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
    }
    else
    {
      unint64_t v174 = *(void *)v168;
      LODWORD(v175) = v169;
    }
LABEL_157:
    if (v180 >= 0x41 && v179) {
      MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
    }
    if (v178 >= 0x41 && v177) {
      MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
    }
    if (v164 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    v62 += 2;
    if (v155 == v62) {
      goto LABEL_186;
    }
  }
  if (v180 >= 0x41 && v179) {
    MEMORY[0x1D25D9CB0](v179, 0x1000C8000313F17);
  }
  uint64_t v10 = v142;
  if (v178 >= 0x41 && v177) {
    MEMORY[0x1D25D9CB0](v177, 0x1000C8000313F17);
  }
  if (v164 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  unsigned int v78 = (void *)v146;
  unsigned int v79 = v145;
  unsigned int v80 = v144;
  unsigned int v81 = __n;
LABEL_205:
  unsigned int v82 = v81;
  int v83 = v80;
  unsigned int v84 = v79;
  BOOL v85 = (unsigned int *)v78;
  if (v175 >= 0x41 && v174) {
    MEMORY[0x1D25D9CB0](v174, 0x1000C8000313F17);
  }
  if (v173 >= 0x41 && v172) {
    MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
  }
  int v15 = v151;
  int v86 = v152;
  uint64_t v51 = v85;
  unsigned int v52 = v84;
  uint64_t v53 = v83;
  unsigned int v54 = v82;
LABEL_283:
  __int16 v56 = v154;
LABEL_284:
  if (v86) {
    unsigned __int8 v107 = v56;
  }
  else {
    unsigned __int8 v107 = 6;
  }
  int v108 = v107;
  LOWORD(v177) = v107;
  uint64_t v109 = v10;
  if (v107 - 4 >= 2)
  {
    __int16 v111 = v107;
    if (v107 - 2 < 2)
    {
      unsigned int v178 = v51;
      goto LABEL_296;
    }
  }
  else
  {
    if (v86) {
      unsigned int v110 = v52;
    }
    else {
      unsigned int v110 = 0;
    }
    LODWORD(v179) = v110;
    unsigned int v178 = v51;
    if (v86)
    {
      unsigned int v181 = v54;
      unsigned int v180 = v53;
      __int16 v111 = v108 | v56 & 0xFF00;
      LOWORD(v177) = v111;
      goto LABEL_297;
    }
    unsigned int v181 = 0;
LABEL_296:
    __int16 v111 = v108;
  }
LABEL_297:
  if ((v111 & 0xFE) != 4)
  {
    if (v108 != 2) {
      goto LABEL_309;
    }
    goto LABEL_311;
  }
  LODWORD(v167) = v179;
  uint64_t v149 = v8;
  int v112 = v15;
  if (v179 > 0x40) {
    operator new[]();
  }
  __s2 = v178;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v113 = v167;
  unint64_t v114 = __s2;
  LODWORD(v167) = 0;
  if (v181 > 0x40) {
    BOOL v115 = memcmp(v180, __s2, (((unint64_t)v181 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v115 = v180 == __s2;
  }
  char v116 = v115;
  if (v113 >= 0x41)
  {
    if (v114)
    {
      MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      if (v167 >= 0x41)
      {
        if (__s2) {
          MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
        }
      }
    }
  }
  if (v108 == 2) {
    char v117 = 1;
  }
  else {
    char v117 = v116;
  }
  uint64_t v8 = v149;
  int v15 = v112;
  if (v117)
  {
LABEL_311:
    *(_WORD *)a1 = v108;
    if (v111 - 2 >= 2)
    {
      if (v111 - 4 <= 1)
      {
        *(_DWORD *)(a1 + 16) = v179;
        *(void *)(a1 + 8) = v178;
        *(_DWORD *)(a1 + 32) = v181;
        *(void *)(a1 + 24) = v180;
        *(_WORD *)a1 = v111;
      }
      goto LABEL_73;
    }
    unint64_t v39 = v178;
    goto LABEL_72;
  }
LABEL_309:
  uint64_t v14 = (void *)*v15;
  uint64_t v10 = v109;
LABEL_48:
  if (v14 == v15)
  {
    unsigned int v36 = 0;
  }
  else
  {
    if (v14) {
      unint64_t v35 = (unsigned __int8 *)(v14 - 3);
    }
    else {
      unint64_t v35 = 0;
    }
    if (v35[16] - 29 >= 0xB) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = (llvm::Instruction *)v35;
    }
  }
  sub_1CC05B040((uint64_t)&__s2, v10, a3, v8, v36);
  if (v171)
  {
    sub_1CC05DD58(v10, a3, (uint64_t)&__s2, a6);
    sub_1CC05EC7C((uint64_t)&v172, (unsigned __int8 *)&v177, (__int16 *)&__s2);
    __int16 v37 = v172;
    int v38 = v172;
    *(_WORD *)a1 = v172;
    if ((v38 - 2) < 2)
    {
      *(void *)(a1 + 8) = v173;
    }
    else if ((v38 - 4) <= 1)
    {
      *(_DWORD *)(a1 + 16) = v174;
      *(void *)(a1 + 8) = v173;
      LODWORD(v174) = 0;
      *(_DWORD *)(a1 + 32) = v176;
      *(void *)(a1 + 24) = v175;
      *(_WORD *)a1 = v37;
    }
    *(unsigned char *)(a1 + 40) = 1;
    if (v171 && (__s2 & 0xFE) == 4)
    {
      if (v170 >= 0x41 && v169) {
        MEMORY[0x1D25D9CB0](v169, 0x1000C8000313F17);
      }
      if (v168[0] >= 0x41 && v167) {
        MEMORY[0x1D25D9CB0](v167, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
  }
  if ((v177 & 0xFE) == 4)
  {
    if (v181 >= 0x41 && v180) {
      MEMORY[0x1D25D9CB0](v180, 0x1000C8000313F17);
    }
    if (v179 >= 0x41)
    {
      if (v178) {
        MEMORY[0x1D25D9CB0](v178, 0x1000C8000313F17);
      }
    }
  }
}

uint64_t sub_1CC066A54(__int16 *a1, uint64_t a2, llvm::Constant ****a3, llvm::Type *a4, void *a5)
{
  uint64_t result = (uint64_t)llvm::Constant::getIntegerValue(*a3, a4, (const llvm::APInt *)a3);
  uint64_t v12 = result;
  unsigned int v13 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || ((result = v13 - 28, v13 >= 0x1C) ? (BOOL v14 = v13 - 79 >= 0xFFFFFFF3) : (BOOL v14 = 0), !v14))
  {
    if (!a2 || ((result = v13 - 28, v13 >= 0x1C) ? (BOOL v18 = v13 - 59 >= 0xFFFFFFEE) : (BOOL v18 = 0), !v18))
    {
      if (v13 == 95)
      {
        unsigned int v22 = *((_DWORD *)a4 + 2);
        if (v22 > 0x40) {
          operator new[]();
        }
        unint64_t v17 = *(void *)a4;
        unsigned int v32 = *((_DWORD *)a4 + 2);
        unint64_t v31 = v17;
        LODWORD(v44) = v22;
        __s2 = (void *)v17;
        uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        unsigned int v26 = v44;
        int v34 = v44;
        uint64_t v27 = (uint64_t)__s2;
        int v33 = __s2;
        if ((void *)v17 == __s2 && (!v22 || v17 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22))
        {
          *a1 = 6;
        }
        else
        {
          *a1 = 0;
          if (v27 | v17)
          {
            LODWORD(v44) = v22;
            __s2 = (void *)v17;
            unsigned int v32 = 0;
            LODWORD(v45) = v26;
            *((void *)&v44 + 1) = v27;
            uint64_t result = sub_1CC05E860(a1, (uint64_t)&__s2, 0x100000000);
            if (v45 >= 0x41)
            {
              uint64_t result = *((void *)&v44 + 1);
              if (*((void *)&v44 + 1)) {
                uint64_t result = MEMORY[0x1D25D9CB0](*((void *)&v44 + 1), 0x1000C8000313F17);
              }
            }
            if (v44 < 0x41) {
              goto LABEL_42;
            }
            uint64_t result = (uint64_t)__s2;
            if (!__s2) {
              goto LABEL_42;
            }
            goto LABEL_80;
          }
        }
        if (v26 < 0x41 || !v27) {
          goto LABEL_42;
        }
        uint64_t result = v27;
LABEL_80:
        uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_42:
        unsigned int v25 = v32;
        goto LABEL_49;
      }
LABEL_30:
      *a1 = 6;
      return result;
    }
    if (*(llvm::Constant *****)(a2 - 64) == a3) {
      int v19 = (llvm *)v12;
    }
    else {
      int v19 = *(llvm **)(a2 - 64);
    }
    if (*(llvm::Constant *****)(a2 - 32) == a3) {
      uint64_t v20 = (llvm::Constant *)v12;
    }
    else {
      uint64_t v20 = *(llvm::Constant **)(a2 - 32);
    }
    __s2 = a5;
    long long v44 = 0u;
    long long v45 = 0u;
    __int16 v46 = 257;
    uint64_t result = (uint64_t)sub_1CC03A350(result, v19, v20, (const llvm::DataLayout *)&__s2, (llvm::DSOLocalEquivalent **)3);
    if (!result || *(unsigned char *)(result + 16) != 16) {
      goto LABEL_30;
    }
    unsigned int v21 = *(_DWORD *)(result + 32);
    if (v21 > 0x40) {
      operator new[]();
    }
    unint64_t v17 = *(void *)(result + 24);
    unsigned int v36 = *(_DWORD *)(result + 32);
    unint64_t v35 = v17;
    LODWORD(v44) = v21;
    __s2 = (void *)v17;
    uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    unsigned int v28 = v44;
    int v38 = v44;
    uint64_t v29 = (uint64_t)__s2;
    __int16 v37 = __s2;
    if ((void *)v17 == __s2 && (!v21 || v17 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v21))
    {
      *a1 = 6;
    }
    else
    {
      *a1 = 0;
      if (v29 | v17)
      {
        LODWORD(v44) = v21;
        __s2 = (void *)v17;
        unsigned int v36 = 0;
        LODWORD(v45) = v28;
        *((void *)&v44 + 1) = v29;
        uint64_t result = sub_1CC05E860(a1, (uint64_t)&__s2, 0x100000000);
        if (v45 >= 0x41)
        {
          uint64_t result = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1)) {
            uint64_t result = MEMORY[0x1D25D9CB0](*((void *)&v44 + 1), 0x1000C8000313F17);
          }
        }
        if (v44 < 0x41) {
          goto LABEL_48;
        }
        uint64_t result = (uint64_t)__s2;
        if (!__s2) {
          goto LABEL_48;
        }
        goto LABEL_84;
      }
    }
    if (v28 < 0x41 || !v29) {
      goto LABEL_48;
    }
    uint64_t result = v29;
LABEL_84:
    uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_48:
    unsigned int v25 = v36;
    goto LABEL_49;
  }
  int v15 = *(llvm::Constant **)a2;
  __s2 = a5;
  long long v44 = 0u;
  long long v45 = 0u;
  __int16 v46 = 257;
  uint64_t result = (uint64_t)sub_1CC038B58((llvm *)result, v12, v15, (llvm::Type **)&__s2, v11);
  if (!result || *(unsigned char *)(result + 16) != 16) {
    goto LABEL_30;
  }
  unsigned int v16 = *(_DWORD *)(result + 32);
  if (v16 > 0x40) {
    operator new[]();
  }
  unint64_t v17 = *(void *)(result + 24);
  unsigned int v40 = *(_DWORD *)(result + 32);
  unint64_t v39 = v17;
  LODWORD(v44) = v16;
  __s2 = (void *)v17;
  uint64_t result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  unsigned int v23 = v44;
  int v42 = v44;
  uint64_t v24 = (uint64_t)__s2;
  unsigned int v41 = __s2;
  if ((void *)v17 == __s2 && (!v16 || v17 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v16))
  {
    *a1 = 6;
  }
  else
  {
    *a1 = 0;
    if (v24 | v17)
    {
      LODWORD(v44) = v16;
      __s2 = (void *)v17;
      unsigned int v40 = 0;
      LODWORD(v45) = v23;
      *((void *)&v44 + 1) = v24;
      uint64_t result = sub_1CC05E860(a1, (uint64_t)&__s2, 0x100000000);
      if (v45 >= 0x41)
      {
        uint64_t result = *((void *)&v44 + 1);
        if (*((void *)&v44 + 1)) {
          uint64_t result = MEMORY[0x1D25D9CB0](*((void *)&v44 + 1), 0x1000C8000313F17);
        }
      }
      if (v44 < 0x41) {
        goto LABEL_36;
      }
      uint64_t result = (uint64_t)__s2;
      if (!__s2) {
        goto LABEL_36;
      }
      goto LABEL_76;
    }
  }
  if (v23 < 0x41 || !v24) {
    goto LABEL_36;
  }
  uint64_t result = v24;
LABEL_76:
  uint64_t result = MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
LABEL_36:
  unsigned int v25 = v40;
LABEL_49:
  if (v25 >= 0x41 && v17 != 0) {
    return MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  return result;
}

unint64_t *sub_1CC067178(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = result;
  if ((*(_WORD *)a2 & 0xFE) == 4)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 16);
    *((_DWORD *)result + 2) = v5;
    if (v5 > 0x40) {
      operator new[]();
    }
    *uint64_t result = *(void *)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(a2 + 32);
    *((_DWORD *)result + 6) = v6;
    if (v6 > 0x40) {
      operator new[]();
    }
    result[2] = *(void *)(a2 + 24);
  }
  else
  {
    unsigned int v8 = sub_1CB83544C(a4, a3);
    if (v7 == 1) {
    return llvm::ConstantRange::ConstantRange(v4, v8, 1);
    }
  }
  return result;
}

void sub_1CC0672C0(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::Instruction *a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_1CC05B040((uint64_t)&v12, a2, (uint64_t)a3, a5, a4);
  if (v17)
  {
    sub_1CC067178(&v8, (uint64_t)&v12, *a3, *(void *)(a2 + 224));
    *(_DWORD *)(a1 + 8) = v9;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 24) = v11;
    *(void *)(a1 + 16) = v10;
    *(unsigned char *)(a1 + 32) = 1;
    if (v17 && (v12 & 0xFE) == 4)
    {
      if (v16 >= 0x41 && v15) {
        MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
      }
      if (v14 >= 0x41)
      {
        if (v13) {
          MEMORY[0x1D25D9CB0](v13, 0x1000C8000313F17);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_1CC0673F4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v10 = a3[5];
  if ((v10 & 0x40000000) != 0) {
    int v11 = (uint64_t **)*((void *)a3 - 1);
  }
  else {
    int v11 = (uint64_t **)&a3[-8 * (v10 & 0x7FFFFFF)];
  }
  sub_1CC0672C0((uint64_t)&v35, a2, *v11, (llvm::Instruction *)a3, a4);
  int v12 = a3[5];
  if ((v12 & 0x40000000) != 0) {
    uint64_t v13 = (uint64_t **)*((void *)a3 - 1);
  }
  else {
    uint64_t v13 = (uint64_t **)&a3[-8 * (v12 & 0x7FFFFFF)];
  }
  sub_1CC0672C0((uint64_t)&v30, a2, v13[4], (llvm::Instruction *)a3, a4);
  int v14 = v34;
  if (!v39 || !v34)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15)
  {
    sub_1CB920400();
    JUMPOUT(0x1CC0677F4);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v15 + 48))(&__s1);
  uint64_t v16 = v27;
  if (v27 <= 0x40)
  {
    char v17 = __s1;
    uint64_t v18 = __s2;
    if (__s1 == __s2 && (!v27 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v27))) {
      goto LABEL_32;
    }
    __int16 v44 = 0;
    if (!((unint64_t)__s2 | (unint64_t)__s1)) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  char v17 = __s1;
  uint64_t v18 = __s2;
  if (memcmp(__s1, __s2, (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8))
  {
    __int16 v44 = 0;
LABEL_13:
    unsigned int v41 = v16;
    unsigned int v40 = v17;
    unsigned int v43 = v29;
    int v42 = v18;
    unsigned int v27 = 0;
    unsigned int v29 = 0;
    sub_1CC05E860(&v44, (uint64_t)&v40, 0x100000000);
    if (v43 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    if (v41 >= 0x41 && v40) {
      MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
    }
    goto LABEL_15;
  }
  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v16)
  {
LABEL_32:
    __int16 v44 = 6;
    goto LABEL_15;
  }
  int v21 = 0;
  int64_t v22 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    if (v22-- < 1) {
      break;
    }
    unint64_t v24 = v17[v22];
    v21 += __clz(v24);
  }
  while (!v24);
  int v25 = v16 | 0xFFFFFFC0;
  if ((v16 & 0x3F) == 0) {
    int v25 = 0;
  }
  __int16 v44 = 0;
  if (v21 + v25 != v16) {
    goto LABEL_13;
  }
LABEL_15:
  __int16 v19 = v44;
  int v20 = v44;
  *(_WORD *)a1 = v44;
  if ((v20 - 2) < 2)
  {
    *(void *)(a1 + 8) = v45;
  }
  else if ((v20 - 4) <= 1)
  {
    *(_DWORD *)(a1 + 16) = v46;
    *(void *)(a1 + 8) = v45;
    *(_DWORD *)(a1 + 32) = v48;
    *(void *)(a1 + 24) = v47;
    int v46 = 0;
    int v48 = 0;
    *(_WORD *)a1 = v19;
  }
  __int16 v44 = v19 & 0xFF00;
  *(unsigned char *)(a1 + 40) = 1;
  if (v29 >= 0x41 && __s2) {
    MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
  }
  if (v27 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  if (v34)
  {
LABEL_24:
    if (v33 >= 0x41 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    }
    if (v31 >= 0x41 && v30) {
      MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
    }
  }
LABEL_26:
  if (v39)
  {
    if (v38 >= 0x41 && v37) {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    if (v36 >= 0x41)
    {
      if (v35) {
        MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
      }
    }
  }
}

void sub_1CC0677F8()
{
}

__n128 sub_1CC06780C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2604D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC067858(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2604D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC067888(uint64_t a1@<X0>, llvm::ConstantRange *a2@<X1>, llvm::ConstantRange *a3@<X2>, unint64_t *a4@<X8>)
{
}

void sub_1CC0678A8()
{
}

void *sub_1CC0678BC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2604D90;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC067904(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2604D90;
  a2[1] = v2;
  return result;
}

void sub_1CC067930(uint64_t a1@<X0>, unsigned int *a2@<X1>, llvm::ConstantRange *a3@<X2>, unint64_t *a4@<X8>)
{
}

void sub_1CC06794C()
{
}

void *sub_1CC067960(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2604DD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0679A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2604DD8;
  a2[1] = v2;
  return result;
}

void sub_1CC0679D4(uint64_t a1@<X0>, unsigned int *a2@<X1>, llvm::ConstantRange *a3@<X2>, unint64_t *a4@<X8>)
{
  int v5 = 13;
  if (((1 << (*(unsigned char *)(*(void *)(*(void *)(a1 + 8) - 32) + 36) - 6)) & 0xC000000003) == 0)
  {
    if (((1 << (*(unsigned char *)(*(void *)(*(void *)(a1 + 8) - 32) + 36) - 6)) & 0x6000000600000) != 0) {
      int v5 = 15;
    }
    else {
      int v5 = 17;
    }
  }
  llvm::ConstantRange::binaryOp(a3, a2, v5, a4);
}

unint64_t *sub_1CC067A30(unint64_t *result, unint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 2);
  unint64_t v3 = *result;
  if (v2 >= *((_DWORD *)result + 3))
  {
    unint64_t v9 = v3 + 32 * v2;
    if (v3 > a2 || v9 <= a2) {
      sub_1CD49B310();
    }
    sub_1CD49B310();
  }
  uint64_t v4 = *((unsigned int *)result + 2);
  unint64_t v5 = v3 + 32 * v4;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v5 + 8) = v6;
  if (v6 > 0x40) {
    operator new[]();
  }
  *(void *)unint64_t v5 = *(void *)a2;
  unint64_t v7 = v3 + 32 * v4;
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v7 + 24) = v8;
  if (v8 > 0x40) {
    operator new[]();
  }
  *(void *)(v7 + 16) = *(void *)(a2 + 16);
  ++*((_DWORD *)result + 2);
  return result;
}

uint64_t sub_1CC067B7C(uint64_t result, unsigned __int8 *a2)
{
  if (a2[40])
  {
    if (*(unsigned char *)(result + 40))
    {
      uint64_t v5 = result;
      if ((*(_WORD *)result & 0xFE) == 4) {
        sub_1CC05EB8C(result + 8);
      }
      return sub_1CC05EC08(v5, a2);
    }
    else
    {
      *(_WORD *)__n128 result = *a2;
      int v2 = *a2;
      if ((v2 - 4) < 2)
      {
        *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
        *(void *)(result + 8) = *((void *)a2 + 1);
        *((_DWORD *)a2 + 4) = 0;
        *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
        *(void *)(result + 24) = *((void *)a2 + 3);
        *((_DWORD *)a2 + 8) = 0;
        *(unsigned char *)(result + 1) = a2[1];
      }
      else if ((v2 - 2) < 2)
      {
        *(void *)(result + 8) = *((void *)a2 + 1);
      }
      *(_WORD *)a2 = a2[1] << 8;
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else if (*(unsigned char *)(result + 40))
  {
    uint64_t v4 = result;
    if ((*(_WORD *)result & 0xFE) == 4) {
      sub_1CC05EB8C(result + 8);
    }
    __n128 result = v4;
    *(unsigned char *)(v4 + 40) = 0;
  }
  return result;
}

uint64_t sub_1CC067C7C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)__n128 result = *(void *)a2;
  unsigned int v3 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 24) = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

void sub_1CC067D58()
{
}

void sub_1CC067D6C(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1CB923B44(*(llvm::Function **)(a2 + 56));
  if ((llvm::Value *)v6 != v7)
  {
    unsigned int v8 = (llvm::Value *)v6;
    unint64_t v9 = v7;
    do
    {
      sub_1CC058A30(*(void *)(a1 + 8), (uint64_t)v8, a2, 0, (uint64_t)&v14);
      if ((_BYTE)v14)
      {
        uint64_t v10 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v10) > 0x12)
        {
          *(_DWORD *)(v10 + 15) = 656423538;
          *(_OWORD *)uint64_t v10 = *(_OWORD *)"; LatticeVal for: '";
          *((void *)a3 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(a3, "; LatticeVal for: '", 0x13uLL);
        }
        llvm::Value::print(v8, a3, 0);
        uint64_t v11 = *((void *)a3 + 4);
        if ((unint64_t)(*((void *)a3 + 3) - v11) > 5)
        {
          *(_WORD *)(v11 + 4) = 8250;
          *(_DWORD *)uint64_t v11 = 1936269351;
          *((void *)a3 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(a3, "' is: ", 6uLL);
        }
        int v12 = llvm::operator<<(a3, (uint64_t)&v14);
        uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
        if (*((unsigned char **)v12 + 3) == v13)
        {
          llvm::raw_ostream::write(v12, "\n", 1uLL);
        }
        else
        {
          *uint64_t v13 = 10;
          ++*((void *)v12 + 4);
        }
      }
      if ((v14 & 0xFE) == 4)
      {
        if (v18 >= 0x41 && v17) {
          MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
        }
        if (v16 >= 0x41)
        {
          if (v15) {
            MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
          }
        }
      }
      unsigned int v8 = (llvm::Value *)((char *)v8 + 40);
    }
    while (v8 != v9);
  }
}

void sub_1CC067F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  unsigned int v3 = *(llvm::Value **)(a2 + 40);
  int v12 = v16;
  uint64_t v13 = v16;
  uint64_t v14 = 16;
  int v15 = 0;
  v11[0] = &v12;
  v11[1] = a1;
  v11[2] = &v17;
  v11[3] = a3;
  sub_1CC068180(v11, v3);
  uint64_t v4 = (void *)*((void *)v3 + 5);
  if (v4 != (void *)((char *)v3 + 40))
  {
    if (v4) {
      uint64_t v5 = (llvm::Instruction *)(v4 - 3);
    }
    else {
      uint64_t v5 = 0;
    }
    if (*((unsigned char *)v5 + 16) == 30)
    {
LABEL_6:
      llvm::Instruction::getSuccessor(v5, 0);
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    switch(*((unsigned char *)v5 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_6;
      case 0x1F:
        int v10 = (*((_DWORD *)v5 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_22;
      case 0x20:
      case 0x26:
        int v10 = (*((_DWORD *)v5 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_22;
      case 0x21:
      case 0x25:
        goto LABEL_6;
      case 0x24:
        int v10 = *((_WORD *)v5 + 9) & 1;
        goto LABEL_22;
      case 0x27:
        int v10 = *((_DWORD *)v5 + 20) + 1;
LABEL_22:
        if (!v10) {
          break;
        }
        goto LABEL_6;
      default:
        break;
    }
  }
  for (uint64_t i = *(void *)(v17 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v7 = *(void *)(i + 24);
    unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7) {
      BOOL v9 = v8 >= 0x1C;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (v8 == 83) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      sub_1CC068180(v11, *(llvm::Value **)(v7 + 40));
    }
  }
  if (v13 != v12) {
    free(v13);
  }
}

void sub_1CC068180(void *a1, llvm::Value *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(*a1 + 8);
  uint64_t v7 = *(unsigned int *)(*a1 + 20);
  if (v6 == *(void *)*a1)
  {
    if (v7)
    {
      unsigned int v8 = 0;
      uint64_t v9 = 8 * v7;
      int v10 = *(llvm::Value ***)(*a1 + 8);
      while (*v10 != a2)
      {
        if (*v10 == (llvm::Value *)-2) {
          unsigned int v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_9;
          }
          *unsigned int v8 = a2;
          --*(_DWORD *)(v4 + 24);
          goto LABEL_33;
        }
      }
      return;
    }
LABEL_9:
    unsigned int v11 = *(_DWORD *)(v4 + 16);
    if (v7 < v11)
    {
      *(_DWORD *)(v4 + 20) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v4 + 16);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(v4 + 24)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)*a1, v11);
  unsigned int v11 = *(_DWORD *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = (llvm::Value **)(v6 + 8 * v13);
  int v15 = *v14;
  if (*v14 != (llvm::Value *)-1)
  {
    unsigned int v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (llvm::Value *)-2;
      }
      if (v18) {
        unsigned int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (llvm::Value **)(v6 + 8 * (v19 & v12));
      int v15 = *v14;
      if (*v14 == (llvm::Value *)-1) {
        goto LABEL_26;
      }
    }
    return;
  }
  unsigned int v16 = 0;
LABEL_26:
  if (v16) {
    int v20 = v16;
  }
  else {
    int v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == (llvm::Value *)-2) {
      --*(_DWORD *)(v4 + 24);
    }
    else {
      ++*(_DWORD *)(v4 + 20);
    }
    *int v20 = a2;
LABEL_33:
    sub_1CC058A30(*(void *)(v5 + 8), *(void *)a1[2], (uint64_t)a2, 0, (uint64_t)&v28);
    int v21 = (llvm::raw_ostream *)a1[3];
    uint64_t v22 = *((void *)v21 + 4);
    if ((unint64_t)(*((void *)v21 + 3) - v22) > 0x12)
    {
      *(_DWORD *)(v22 + 15) = 656423538;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)"; LatticeVal for: '";
      *((void *)v21 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1[3], "; LatticeVal for: '", 0x13uLL);
    }
    llvm::Value::print(*(llvm::Value **)a1[2], v21, 0);
    uint64_t v23 = *((void *)v21 + 4);
    if ((unint64_t)(*((void *)v21 + 3) - v23) > 9)
    {
      *(_WORD *)(v23 + 8) = 10016;
      *(void *)uint64_t v23 = *(void *)"' in BB: '";
      *((void *)v21 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v21, "' in BB: '", 0xAuLL);
    }
    llvm::Value::printAsOperand(a2, (llvm::raw_ostream *)a1[3], 0, 0);
    unint64_t v24 = (llvm::raw_ostream *)a1[3];
    uint64_t v25 = *((void *)v24 + 4);
    if ((unint64_t)(*((void *)v24 + 3) - v25) > 5)
    {
      *(_WORD *)(v25 + 4) = 8250;
      *(_DWORD *)uint64_t v25 = 1936269351;
      *((void *)v24 + 4) += 6;
    }
    else
    {
      unint64_t v24 = llvm::raw_ostream::write(v24, "' is: ", 6uLL);
    }
    unsigned int v26 = llvm::operator<<(v24, (uint64_t)&v28);
    unsigned int v27 = (unsigned char *)*((void *)v26 + 4);
    if (*((unsigned char **)v26 + 3) == v27)
    {
      llvm::raw_ostream::write(v26, "\n", 1uLL);
    }
    else
    {
      *unsigned int v27 = 10;
      ++*((void *)v26 + 4);
    }
    if ((v28 & 0xFE) == 4)
    {
      if (v32 >= 0x41 && v31) {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
      if (v30 >= 0x41)
      {
        if (v29) {
          MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
    }
  }
}

void sub_1CC068510()
{
}

void sub_1CC0685DC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC068614(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1CC06866C(llvm *a1, llvm::Function *a2)
{
  uint64_t v4 = llvm::dbgs(a1);
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v6) > 0x11)
  {
    *(_WORD *)(v6 + 16) = 10016;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"LVI for function '";
    *((void *)v4 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v4, "LVI for function '", 0x12uLL);
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    goto LABEL_13;
  }
  uint64_t v7 = ***(void ***)a2;
  uint64_t v8 = *(void *)(v7 + 152);
  uint64_t v9 = *(unsigned int *)(v7 + 168);
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v11 = (llvm::Function **)(v8 + 16 * v10);
    unsigned int v12 = *v11;
    if (*v11 == a2) {
      goto LABEL_11;
    }
    int v13 = 1;
    while (v12 != (llvm::Function *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      unsigned int v12 = *(llvm::Function **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        unsigned int v11 = (llvm::Function **)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
  }
  unsigned int v11 = (llvm::Function **)(v8 + 16 * v9);
LABEL_11:
  int v15 = v11[1];
  size_t v18 = *(void *)v15;
  unsigned int v16 = (char *)v15 + 16;
  size_t v17 = v18;
  unsigned int v19 = (unsigned char *)*((void *)v5 + 4);
  if (v18 > *((void *)v5 + 3) - (void)v19)
  {
    llvm::raw_ostream::write(v5, v16, v17);
LABEL_13:
    unsigned int v19 = (unsigned char *)*((void *)v5 + 4);
    goto LABEL_16;
  }
  if (v17)
  {
    memcpy(v19, v16, v17);
    unsigned int v19 = (unsigned char *)(*((void *)v5 + 4) + v17);
    *((void *)v5 + 4) = v19;
  }
LABEL_16:
  if (*((void *)v5 + 3) - (void)v19 > 2uLL)
  {
    v19[2] = 10;
    *(_WORD *)unsigned int v19 = 14887;
    *((void *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, "':\n", 3uLL);
  }
  int v20 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (v21 == v22)
  {
LABEL_21:
    uint64_t v23 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v21 != &llvm::LazyValueInfoWrapperPass::ID)
    {
      v21 += 16;
      if (v21 == v22) {
        goto LABEL_21;
      }
    }
    uint64_t v23 = *(void *)(v21 + 8);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v23 + 96))(v23, &llvm::LazyValueInfoWrapperPass::ID);
  uint64_t v25 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  if (v26 == v27)
  {
LABEL_26:
    uint64_t v28 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v26 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v26 += 16;
      if (v26 == v27) {
        goto LABEL_26;
      }
    }
    uint64_t v28 = *(void *)(v26 + 8);
  }
  uint64_t v29 = (llvm::LazyValueInfo *)(v24 + 32);
  unsigned int v30 = (llvm *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v28 + 96))(v28, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v31 = (llvm *)((char *)v30 + 32);
  unsigned int v32 = llvm::dbgs(v30);
  llvm::LazyValueInfo::printLVI(v29, a2, v31, v32);
  return 0;
}

void sub_1CC0688E4(uint64_t a1)
{
}

uint64_t llvm::LegacyDivergenceAnalysis::runOnFunction(llvm::LegacyDivergenceAnalysis *this, llvm::Function *a2)
{
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)this + 1) + 24), &llvm::TargetTransformInfoWrapperPass::ID, 1);
  if (!AnalysisPass) {
    return 0;
  }
  uint64_t v5 = (llvm::TargetTransformInfoWrapperPass *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass
                                                                                          + 96))(AnalysisPass, &llvm::TargetTransformInfoWrapperPass::ID);
  if (!v5) {
    return 0;
  }
  TTI = llvm::TargetTransformInfoWrapperPass::getTTI(v5, (const Function *)a2);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)*TTI + 88))(*TTI)) {
    return 0;
  }
  sub_1CD47558C((_DWORD *)this + 10);
  sub_1CD47558C((_DWORD *)this + 16);
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8)
  {
    uint64_t v9 = sub_1CD49B9A4(v8);
    MEMORY[0x1D25D9CE0](v9, 0x1020C40F5E4CFB4);
  }
  uint64_t v10 = (uint64_t *)*((void *)this + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_10:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_10;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::DominatorTreeWrapperPass::ID);
  int v14 = (uint64_t *)*((void *)this + 1);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_15:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::PostDominatorTreeWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_15;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::PostDominatorTreeWrapperPass::ID);
  if (llvm::LegacyDivergenceAnalysis::shouldUseGPUDivergenceAnalysis(this, a2, (const llvm::TargetTransformInfo *)TTI))
  {
    size_t v18 = (uint64_t *)*((void *)this + 1);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if (v19 == v20)
    {
LABEL_21:
      uint64_t v21 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v19 != &llvm::LoopInfoWrapperPass::ID)
      {
        v19 += 16;
        if (v19 == v20) {
          goto LABEL_21;
        }
      }
      uint64_t v21 = *(void *)(v19 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::LoopInfoWrapperPass::ID);
    operator new();
  }
  unsigned int v61 = (char *)this + 40;
  sub_1CD47558C((_DWORD *)this + 10);
  sub_1CD47558C((_DWORD *)this + 16);
  uint64_t v22 = (char *)a2 + 72;
  uint64_t v23 = (char *)*((void *)a2 + 10);
  if (v23 == (char *)a2 + 72)
  {
LABEL_27:
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v62 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v24 = v23 - 24;
      if (!v23) {
        uint64_t v24 = 0;
      }
      uint64_t v25 = (char *)*((void *)v24 + 6);
      if (v25 != v24 + 40) {
        break;
      }
      uint64_t v23 = (char *)*((void *)v23 + 1);
      if (v23 == v22) {
        goto LABEL_27;
      }
    }
    uint64_t v62 = 0;
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      if (v25) {
        uint64_t v50 = (uint64_t)(v25 - 24);
      }
      else {
        uint64_t v50 = 0;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*TTI + 104))(*TTI, v50))
      {
        if (v26 >= (uint64_t *)v62)
        {
          uint64_t v54 = v26 - v27;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
LABEL_130:
          }
            abort();
          if ((v62 - (char *)v27) >> 2 > v55) {
            unint64_t v55 = (v62 - (char *)v27) >> 2;
          }
          if ((unint64_t)(v62 - (char *)v27) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v55;
          }
          if (v56)
          {
            if (v56 >> 61) {
LABEL_131:
            }
              sub_1CB833614();
            unint64_t v58 = v56;
            BOOL v57 = (char *)operator new(8 * v56);
            unint64_t v56 = v58;
          }
          else
          {
            BOOL v57 = 0;
          }
          int v59 = (uint64_t *)&v57[8 * v54];
          *int v59 = v50;
          uint64_t v53 = v59 + 1;
          while (v26 != v27)
          {
            uint64_t v60 = *--v26;
            *--int v59 = v60;
          }
          uint64_t v62 = &v57[8 * v56];
          if (v27) {
            operator delete(v27);
          }
          uint64_t v27 = v59;
        }
        else
        {
          *uint64_t v26 = v50;
          uint64_t v53 = v26 + 1;
        }
        uint64_t v63 = v50;
        sub_1CD48410C((uint64_t)v61, &v63, (uint64_t)&v64);
        uint64_t v26 = v53;
      }
      uint64_t v25 = (char *)*((void *)v25 + 1);
      uint64_t v51 = v23 - 24;
      if (!v23) {
        uint64_t v51 = 0;
      }
      if (v25 == v51 + 40) {
        break;
      }
LABEL_105:
      if (v23 == v22) {
        goto LABEL_28;
      }
    }
    while (1)
    {
      uint64_t v23 = (char *)*((void *)v23 + 1);
      if (v23 == v22) {
        break;
      }
      unsigned int v52 = v23 - 24;
      if (!v23) {
        unsigned int v52 = 0;
      }
      uint64_t v25 = (char *)*((void *)v52 + 6);
      if (v25 != v52 + 40) {
        goto LABEL_105;
      }
    }
  }
LABEL_28:
  if ((*((_WORD *)a2 + 9) & 1) == 0)
  {
    uint64_t v28 = *((void *)a2 + 11);
LABEL_30:
    uint64_t v29 = v28;
    goto LABEL_31;
  }
  llvm::Function::BuildLazyArguments(a2);
  uint64_t v28 = *((void *)a2 + 11);
  if ((*((_WORD *)a2 + 9) & 1) == 0) {
    goto LABEL_30;
  }
  llvm::Function::BuildLazyArguments(a2);
  uint64_t v29 = *((void *)a2 + 11);
LABEL_31:
  for (uint64_t i = v29 + 40 * *((void *)a2 + 12); v28 != i; v28 += 40)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*TTI + 104))(*TTI, v28))
    {
      if (v26 >= (uint64_t *)v62)
      {
        uint64_t v32 = v26 - v27;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          goto LABEL_130;
        }
        if ((v62 - (char *)v27) >> 2 > v33) {
          unint64_t v33 = (v62 - (char *)v27) >> 2;
        }
        if ((unint64_t)(v62 - (char *)v27) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          if (v34 >> 61) {
            goto LABEL_131;
          }
          uint64_t v35 = (char *)operator new(8 * v34);
        }
        else
        {
          uint64_t v35 = 0;
        }
        unsigned int v36 = (uint64_t *)&v35[8 * v32];
        *unsigned int v36 = v28;
        uint64_t v31 = v36 + 1;
        while (v26 != v27)
        {
          uint64_t v37 = *--v26;
          *--unsigned int v36 = v37;
        }
        uint64_t v62 = &v35[8 * v34];
        if (v27) {
          operator delete(v27);
        }
        uint64_t v27 = v36;
      }
      else
      {
        *uint64_t v26 = v28;
        uint64_t v31 = v26 + 1;
      }
      uint64_t v63 = v28;
      sub_1CD48410C((uint64_t)v61, &v63, (uint64_t)&v64);
      uint64_t v26 = v31;
    }
  }
  if (v27 != v26)
  {
    uint64_t v38 = (uint64_t)v61;
    while (1)
    {
      uint64_t v39 = *(v26 - 1);
      unsigned int v40 = v26 - 1;
      if (*(unsigned char *)(v39 + 16) != 30)
      {
        switch(*(unsigned char *)(v39 + 16))
        {
          case 0x1E:
            __break(1u);
            JUMPOUT(0x1CC06962CLL);
          case 0x1F:
            unsigned int v41 = (*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_61;
          case 0x20:
          case 0x26:
            unsigned int v41 = (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_61;
          case 0x21:
            goto LABEL_58;
          case 0x27:
            unsigned int v41 = *(_DWORD *)(v39 + 80) + 1;
LABEL_61:
            if (v41 < 2) {
              goto LABEL_62;
            }
            goto LABEL_58;
          default:
            goto LABEL_62;
        }
      }
      if ((*(_DWORD *)(v39 + 20) & 0x7FFFFFF) == 3) {
LABEL_58:
      }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
LABEL_62:
      uint64_t v42 = *(void *)(v39 + 8);
      if (v42) {
        break;
      }
      --v26;
LABEL_87:
      if (v27 == v26) {
        goto LABEL_91;
      }
    }
    while (1)
    {
      uint64_t v43 = *(void *)(v42 + 24);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*TTI + 112))(*TTI, v43)) {
        goto LABEL_64;
      }
      uint64_t v63 = v43;
      sub_1CD48410C(v38, &v63, (uint64_t)&v64);
      if (!(_BYTE)v65) {
        goto LABEL_64;
      }
      if (v40 < (uint64_t *)v62) {
        break;
      }
      uint64_t v44 = v40 - v27;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61) {
        goto LABEL_130;
      }
      if ((v62 - (char *)v27) >> 2 > v45) {
        unint64_t v45 = (v62 - (char *)v27) >> 2;
      }
      if ((unint64_t)(v62 - (char *)v27) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46)
      {
        if (v46 >> 61) {
          goto LABEL_131;
        }
        uint64_t v47 = (char *)operator new(8 * v46);
      }
      else
      {
        uint64_t v47 = 0;
      }
      int v48 = (uint64_t *)&v47[8 * v44];
      *int v48 = v43;
      uint64_t v26 = v48 + 1;
      while (v40 != v27)
      {
        uint64_t v49 = *--v40;
        *--int v48 = v49;
      }
      uint64_t v62 = &v47[8 * v46];
      if (v27) {
        operator delete(v27);
      }
      uint64_t v27 = v48;
      uint64_t v38 = (uint64_t)v61;
LABEL_65:
      uint64_t v42 = *(void *)(v42 + 8);
      unsigned int v40 = v26;
      if (!v42) {
        goto LABEL_87;
      }
    }
    *v40++ = v43;
LABEL_64:
    uint64_t v26 = v40;
    goto LABEL_65;
  }
LABEL_91:
  if (v26) {
    operator delete(v26);
  }
  return 0;
}

uint64_t llvm::LegacyDivergenceAnalysis::isDivergentUse(llvm::LegacyDivergenceAnalysis *this, const llvm::Value **a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (!v2)
  {
    int v5 = *((_DWORD *)this + 14);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 5);
      int v7 = v5 - 1;
      unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v5 - 1);
      uint64_t v9 = *(const llvm::Value **)(v6 + 8 * v8);
      if (*a2 == v9) {
        return 1;
      }
      int v10 = 1;
      while (v9 != (const llvm::Value *)-4096)
      {
        unsigned int v11 = v8 + v10++;
        unsigned int v8 = v11 & v7;
        uint64_t v9 = *(const llvm::Value **)(v6 + 8 * (v11 & v7));
        uint64_t v12 = 1;
        if (*a2 == v9) {
          return v12;
        }
      }
    }
    uint64_t v13 = 0;
    int v14 = a2;
    return sub_1CD420258((uint64_t *)this + 8, &v14, &v13);
  }
  if (*(unsigned char *)(v2 + 8)) {
    return 1;
  }
  unsigned int v3 = *(llvm::DivergenceAnalysisImpl **)(v2 + 24);

  return llvm::DivergenceAnalysisImpl::isDivergentUse(v3, a2);
}

void llvm::LegacyDivergenceAnalysis::print(llvm::LegacyDivergenceAnalysis *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 4);
  if (v5 && (*(unsigned char *)(v5 + 8) || *(_DWORD *)(*(void *)(v5 + 24) + 104)) || *((_DWORD *)this + 12))
  {
    if (*((_DWORD *)this + 12))
    {
      uint64_t v6 = (uint64_t *)*((void *)this + 5);
      uint64_t v7 = *((unsigned int *)this + 14);
      if (v7)
      {
        uint64_t v8 = 8 * v7;
        uint64_t v9 = &v6[v7];
        while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v6;
          v8 -= 8;
          if (!v8)
          {
            uint64_t v6 = v9;
            break;
          }
        }
      }
      uint64_t v10 = *v6;
      unsigned int v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10) {
        BOOL v12 = v11 == 21;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        uint64_t v5 = v10 + 24;
      }
      else
      {
        if (v11 <= 0x1B) {
          uint64_t v10 = 0;
        }
        uint64_t v5 = *(void *)(v10 + 40) + 56;
      }
    }
    else if (!v5)
    {
      return;
    }
    uint64_t v13 = *(llvm::Function **)v5;
    if (*(void *)v5)
    {
      uint64_t v14 = sub_1CB923B44(*(llvm::Function **)v5);
      if ((const llvm::Value *)v14 != v15)
      {
        uint64_t v16 = (const llvm::Value *)v14;
        uint64_t v17 = v15;
        do
        {
          if (llvm::LegacyDivergenceAnalysis::isDivergent(this, v16)) {
            size_t v18 = "DIVERGENT: ";
          }
          else {
            size_t v18 = "           ";
          }
          uint64_t v19 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v19) > 0xA)
          {
            *(void *)uint64_t v19 = *(void *)v18;
            *(_DWORD *)(v19 + 7) = *(_DWORD *)(v18 + 7);
            *((void *)a2 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a2, v18, 0xBuLL);
          }
          llvm::Value::print(v16, a2, 0);
          uint64_t v20 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v20)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *uint64_t v20 = 10;
            ++*((void *)a2 + 4);
          }
          uint64_t v16 = (const llvm::Value *)((char *)v16 + 40);
        }
        while (v16 != v17);
      }
      uint64_t v21 = (char *)*((void *)v13 + 10);
      uint64_t v50 = (char *)v13 + 72;
      if (v21 != (char *)v13 + 72)
      {
        uint64_t v22 = &v55;
        uint64_t v23 = &v52;
        uint64_t v24 = "               ";
        uint64_t v25 = &v61;
        while (1)
        {
          uint64_t v26 = v21 ? (llvm::BasicBlock *)(v21 - 24) : 0;
          uint64_t v27 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v27) > 0xB)
          {
            *(_DWORD *)(v27 + 8) = 538976288;
            *(void *)uint64_t v27 = *(void *)"\n           ";
            *((void *)a2 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(a2, "\n           ", 0xCuLL);
          }
          if ((*((unsigned char *)v26 + 23) & 0x10) != 0) {
            break;
          }
          uint64_t v44 = (_WORD *)*((void *)a2 + 4);
LABEL_55:
          if (*((void *)a2 + 3) - (void)v44 > 1uLL)
          {
            *uint64_t v44 = 2618;
            *((void *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, ":\n", 2uLL);
          }
          llvm::BasicBlock::instructionsWithoutDebug(v26, 1, &v57);
          long long v54 = v57;
          if (v59)
          {
            if (v59 == v58)
            {
              uint64_t v56 = (uint64_t)v22;
              (*(void (**)(void *, uint64_t *))(v58[0] + 24))(v58, v22);
            }
            else
            {
              uint64_t v56 = (*(uint64_t (**)(void))(*v59 + 16))();
            }
          }
          else
          {
            uint64_t v56 = 0;
          }
          uint64_t v51 = v60;
          if (v62)
          {
            if (v62 == v25)
            {
              uint64_t v53 = (uint64_t)v23;
              (*(void (**)(uint64_t *, uint64_t *))(v61 + 24))(v25, v23);
            }
            else
            {
              uint64_t v53 = (*(uint64_t (**)(void))(*v62 + 16))();
            }
          }
          else
          {
            uint64_t v53 = 0;
          }
          while ((void)v54 != v51)
          {
            if ((void)v54) {
              unint64_t v45 = (const llvm::Value *)(v54 - 24);
            }
            else {
              unint64_t v45 = 0;
            }
            if (llvm::LegacyDivergenceAnalysis::isDivergent(this, v45)) {
              unint64_t v46 = "DIVERGENT:     ";
            }
            else {
              unint64_t v46 = v24;
            }
            uint64_t v47 = (void *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v47 > 0xEuLL)
            {
              void *v47 = *(void *)v46;
              *(void *)((char *)v47 + 7) = *(void *)(v46 + 7);
              *((void *)a2 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(a2, v46, 0xFuLL);
            }
            llvm::Value::print(v45, a2, 0);
            int v48 = (unsigned char *)*((void *)a2 + 4);
            if (*((unsigned char **)a2 + 3) == v48)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *int v48 = 10;
              ++*((void *)a2 + 4);
            }
            *(void *)&long long v54 = *(void *)(v54 + 8);
            sub_1CD48427C((uint64_t)&v54);
          }
          if ((uint64_t *)v53 == v23)
          {
            (*(void (**)(uint64_t *))(v52 + 32))(v23);
          }
          else if (v53)
          {
            (*(void (**)(void))(*(void *)v53 + 40))();
          }
          if ((uint64_t *)v56 == v22)
          {
            (*(void (**)(uint64_t *))(v55 + 32))(v22);
          }
          else if (v56)
          {
            (*(void (**)(void))(*(void *)v56 + 40))();
          }
          sub_1CD484020(&v57);
          uint64_t v21 = (char *)*((void *)v21 + 1);
          if (v21 == v50) {
            goto LABEL_94;
          }
        }
        uint64_t v28 = ***(void ***)v26;
        uint64_t v29 = *(void *)(v28 + 152);
        uint64_t v30 = *(unsigned int *)(v28 + 168);
        if (v30)
        {
          LODWORD(v31) = (v30 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          uint64_t v32 = (llvm::BasicBlock **)(v29 + 16 * v31);
          unint64_t v33 = *v32;
          if (*v32 == v26)
          {
LABEL_50:
            unsigned int v36 = v24;
            uint64_t v37 = v23;
            uint64_t v38 = v22;
            uint64_t v39 = v25;
            unsigned int v40 = (size_t *)v32[1];
            size_t v43 = *v40;
            unsigned int v41 = v40 + 2;
            size_t v42 = v43;
            uint64_t v44 = (_WORD *)*((void *)a2 + 4);
            if (v43 <= *((void *)a2 + 3) - (void)v44)
            {
              if (v42)
              {
                memcpy(v44, v41, v42);
                uint64_t v44 = (_WORD *)(*((void *)a2 + 4) + v42);
                *((void *)a2 + 4) = v44;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, (const char *)v41, v42);
              uint64_t v44 = (_WORD *)*((void *)a2 + 4);
            }
            uint64_t v25 = v39;
            uint64_t v22 = v38;
            uint64_t v23 = v37;
            uint64_t v24 = v36;
            goto LABEL_55;
          }
          int v34 = 1;
          while (v33 != (llvm::BasicBlock *)-4096)
          {
            int v35 = v31 + v34++;
            uint64_t v31 = v35 & (v30 - 1);
            unint64_t v33 = *(llvm::BasicBlock **)(v29 + 16 * v31);
            if (v33 == v26)
            {
              uint64_t v32 = (llvm::BasicBlock **)(v29 + 16 * v31);
              goto LABEL_50;
            }
          }
        }
        uint64_t v32 = (llvm::BasicBlock **)(v29 + 16 * v30);
        goto LABEL_50;
      }
LABEL_94:
      uint64_t v49 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v49)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        unsigned char *v49 = 10;
        ++*((void *)a2 + 4);
      }
    }
  }
}

void sub_1CC069DB8(uint64_t a1, uint64_t a2, _DWORD *a3, char **a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 != a1 + 40)
  {
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    int v7 = v6 - 29;
    if (v6 != 30)
    {
      unsigned int v37 = 2;
      switch(v7)
      {
        case 1:
LABEL_64:
          __break(1u);
          goto LABEL_65;
        case 2:
          unsigned int v37 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_60;
        case 3:
        case 9:
          unsigned int v37 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_60;
        case 4:
          goto LABEL_10;
        case 7:
          unsigned int v37 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_60;
        case 8:
LABEL_65:
          unsigned int v37 = 1;
          goto LABEL_10;
        case 10:
          unsigned int v37 = *(_DWORD *)(v5 + 80) + 1;
LABEL_60:
          if (!v37) {
            return;
          }
          goto LABEL_10;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v37 = 2;
    }
    else {
      unsigned int v37 = 1;
    }
LABEL_10:
    uint64_t v11 = 0;
    uint64_t v12 = v5 - 32;
    uint64_t v13 = v37;
    do
    {
      uint64_t v39 = 0;
      int v14 = *(unsigned __int8 *)(v5 + 16);
      if (v14 == 30)
      {
        uint64_t v20 = (uint64_t *)(v12 - 32 * v11);
      }
      else
      {
        uint64_t v19 = (v14 - 31);
        uint64_t v20 = (uint64_t *)(v5 - 32);
        switch(v19)
        {
          case 1:
          case 7:
            int v32 = *(_DWORD *)(v5 + 20);
            if ((v32 & 0x40000000) != 0) {
              uint64_t v33 = *(void *)(v5 - 8);
            }
            else {
              uint64_t v33 = v5 - 32 * (v32 & 0x7FFFFFF);
            }
            uint64_t v20 = (uint64_t *)(v33 + 32 * (v11 + 1));
            break;
          case 2:
            uint64_t v34 = -64;
            if (!v11) {
              uint64_t v34 = -96;
            }
            uint64_t v20 = (uint64_t *)(v5 + v34);
            break;
          case 3:
          case 4:
            goto LABEL_64;
          case 5:
            if ((*(_WORD *)(v5 + 18) & 1) == 0)
            {
              uint64_t v15 = 0;
              goto LABEL_15;
            }
            uint64_t v35 = *(_DWORD *)(v5 + 20) & 0x7FFFFFF;
            uint64_t v36 = v5 + 32;
            goto LABEL_56;
          case 6:
            break;
          case 8:
            if (v11)
            {
              uint64_t v20 = (uint64_t *)(v12 - 32 * *(unsigned int *)(v5 + 80) + 32 * v11 - 32);
            }
            else
            {
              uint64_t v35 = *(unsigned int *)(v5 + 80);
              uint64_t v36 = v5 - 64;
LABEL_56:
              uint64_t v20 = (uint64_t *)(v36 - 32 * v35);
            }
            break;
          default:
            int v21 = *(_DWORD *)(v5 + 20);
            if ((v21 & 0x40000000) != 0) {
              uint64_t v22 = *(void *)(v5 - 8);
            }
            else {
              uint64_t v22 = v5 - 32 * (v21 & 0x7FFFFFF);
            }
            uint64_t v20 = (uint64_t *)(v22 + 32 * (2 * v11) + 32);
            break;
        }
      }
      uint64_t v15 = *v20;
LABEL_15:
      uint64_t v39 = v15;
      if (v15 != a2)
      {
        sub_1CBB23C3C(a3, &v39, (uint64_t)v40);
        if (v40[16])
        {
          uint64_t v17 = a4[1];
          unint64_t v16 = (unint64_t)a4[2];
          if ((unint64_t)v17 >= v16)
          {
            uint64_t v38 = a3;
            uint64_t v23 = *a4;
            uint64_t v24 = (v17 - *a4) >> 3;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61) {
              abort();
            }
            uint64_t v26 = a4;
            uint64_t v27 = v16 - (void)v23;
            if (v27 >> 2 > v25) {
              unint64_t v25 = v27 >> 2;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v25;
            }
            if (v28)
            {
              if (v28 >> 61) {
                sub_1CB833614();
              }
              uint64_t v29 = (char *)operator new(8 * v28);
            }
            else
            {
              uint64_t v29 = 0;
            }
            uint64_t v30 = &v29[8 * v24];
            *(void *)uint64_t v30 = v39;
            size_t v18 = v30 + 8;
            if (v17 != v23)
            {
              do
              {
                uint64_t v31 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              while (v17 != v23);
              uint64_t v17 = *v26;
            }
            *uint64_t v26 = v30;
            v26[1] = v18;
            v26[2] = &v29[8 * v28];
            a3 = v38;
            a4 = v26;
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(void *)uint64_t v17 = v39;
            size_t v18 = v17 + 8;
          }
          a4[1] = v18;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
}

uint64_t sub_1CC06A114()
{
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"turn the LegacyDivergenceAnalysis into a wrapper for GPUDivergenceAnalysis";
  v1.n128_u64[1] = 74;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC5FB0, "use-gpu-divergence-analysis", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC5FB0, &dword_1CB82C000);
}

void sub_1CC06A1A0(uint64_t HaveSideEffects, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v5 = (void *)HaveSideEffects;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a2 + 23) & 0x10) == 0 && (*(_DWORD *)(a2 + 32) & 0xFu) - 7 >= 2)
  {
    int v6 = llvm::Twine::printOneChild((llvm::raw_ostream *)HaveSideEffects, (llvm::raw_ostream *)(HaveSideEffects + 72), (uint64_t)"Unusual: Unnamed function with non-local linkage", a4, 3);
    llvm::Twine::printOneChild(v6, (llvm::raw_ostream *)(v5 + 9), v7, v8, 1);
    uint64_t v9 = (unsigned char *)v5[13];
    if ((unint64_t)v9 >= v5[12])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(v5 + 9), 10);
    }
    else
    {
      v5[13] = v9 + 1;
      *uint64_t v9 = 10;
    }
    uint64_t v74 = (unsigned __int8 *)a2;
    sub_1CC06B51C((uint64_t)v5, &v74, 1);
  }
  uint64_t v10 = *(void *)(a2 + 80);
  while (v10 != a2 + 72)
  {
    uint64_t v11 = v10 - 24;
    BOOL v23 = v10 == 0;
    uint64_t v10 = *(void *)(v10 + 8);
    if (v23) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v11 + 40;
    uint64_t v13 = *(void *)(v11 + 48);
    while (v13 != v12)
    {
      uint64_t v14 = v13 - 24;
      BOOL v23 = v13 == 0;
      uint64_t v13 = *(void *)(v13 + 8);
      if (v23) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v14;
      }
      switch(*(unsigned char *)(v15 + 16))
      {
        case 0x1E:
        case 0x1F:
        case 0x22:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x31:
        case 0x34:
        case 0x38:
        case 0x39:
        case 0x3E:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x55:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5E:
        case 0x5F:
          continue;
        case 0x20:
          int v20 = *(_DWORD *)(v15 + 20);
          if ((v20 & 0x40000000) != 0) {
            int v21 = *(unsigned __int8 ***)(v15 - 8);
          }
          else {
            int v21 = (unsigned __int8 **)(v15 - 32 * (v20 & 0x7FFFFFF));
          }
          uint64_t v74 = *v21;
          uint64_t v75 = -2;
          long long v76 = 0u;
          long long v77 = 0u;
          sub_1CC06BEA0((uint64_t)v5, (unsigned __int8 *)v15, (uint64_t)&v74, 0, 0, 8);
          if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 1)
          {
            uint64_t v26 = (llvm::raw_ostream *)(v5 + 9);
            uint64_t v27 = "Undefined behavior: indirectbr with no destinations";
            goto LABEL_125;
          }
          continue;
        case 0x21:
        case 0x27:
        case 0x54:
          sub_1CC06C590((uint64_t)v5, v15);
          continue;
        case 0x23:
          uint64_t v22 = *(void *)(*(void *)(v15 + 40) + 48);
          if (v22) {
            BOOL v23 = v22 - 24 == v15;
          }
          else {
            BOOL v23 = 0;
          }
          if (!v23)
          {
            uint64_t v24 = *(void *)(v15 + 24);
            unint64_t v25 = v24 ? (llvm::Instruction *)(v24 - 24) : 0;
            HaveSideEffects = llvm::Instruction::mayHaveSideEffects(v25);
            if ((HaveSideEffects & 1) == 0)
            {
              uint64_t v26 = (llvm::raw_ostream *)(v5 + 9);
              uint64_t v27 = "Unusual: unreachable immediately preceded by instruction without side effects";
              goto LABEL_125;
            }
          }
          continue;
        case 0x2B:
          if (*(unsigned __int8 *)(*(void *)(v15 - 64) + 16) - 11 <= 1
            && *(unsigned __int8 *)(*(void *)(v15 - 32) + 16) - 11 <= 1)
          {
            unint64_t v16 = "Undefined result: sub(undef, undef)";
            goto LABEL_130;
          }
          continue;
        case 0x2F:
        case 0x30:
        case 0x32:
        case 0x33:
          HaveSideEffects = sub_1CC06D230(*(void *)(v15 - 32), (const llvm::DataLayout *)(*(void *)(*(void *)(*(void *)(v15 + 40) + 56) + 40)+ 272), v5[4], v5[3]);
          if (HaveSideEffects)
          {
            unint64_t v16 = "Undefined behavior: Division by zero";
            goto LABEL_130;
          }
          continue;
        case 0x35:
          HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, *(llvm::Type **)(v15 - 32), 0);
          if (HaveSideEffects) {
            BOOL v28 = *(unsigned char *)(HaveSideEffects + 16) == 16;
          }
          else {
            BOOL v28 = 0;
          }
          if (v28)
          {
            uint64_t v29 = (unint64_t *)(HaveSideEffects + 24);
            unint64_t v30 = *(unsigned int *)(*(void *)v15 + 8);
            uint64_t v31 = *(unsigned int *)(HaveSideEffects + 32);
            if (v31 < 0x41) {
              goto LABEL_71;
            }
            int v32 = 0;
            int64_t v33 = (unint64_t)(v31 + 63) >> 6;
            do
            {
              BOOL v34 = v33-- < 1;
              if (v34) {
                break;
              }
              unint64_t v35 = *(void *)(*v29 + 8 * v33);
              v32 += __clz(v35);
            }
            while (!v35);
            goto LABEL_67;
          }
          continue;
        case 0x36:
          HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, *(llvm::Type **)(v15 - 32), 0);
          if (HaveSideEffects) {
            BOOL v36 = *(unsigned char *)(HaveSideEffects + 16) == 16;
          }
          else {
            BOOL v36 = 0;
          }
          if (v36)
          {
            uint64_t v29 = (unint64_t *)(HaveSideEffects + 24);
            unint64_t v30 = *(unsigned int *)(*(void *)v15 + 8);
            uint64_t v31 = *(unsigned int *)(HaveSideEffects + 32);
            if (v31 < 0x41) {
              goto LABEL_71;
            }
            int v32 = 0;
            int64_t v37 = (unint64_t)(v31 + 63) >> 6;
            do
            {
              BOOL v34 = v37-- < 1;
              if (v34) {
                break;
              }
              unint64_t v38 = *(void *)(*v29 + 8 * v37);
              v32 += __clz(v38);
            }
            while (!v38);
            goto LABEL_67;
          }
          continue;
        case 0x37:
          HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, *(llvm::Type **)(v15 - 32), 0);
          if (HaveSideEffects) {
            BOOL v39 = *(unsigned char *)(HaveSideEffects + 16) == 16;
          }
          else {
            BOOL v39 = 0;
          }
          if (!v39) {
            continue;
          }
          uint64_t v29 = (unint64_t *)(HaveSideEffects + 24);
          unint64_t v30 = *(unsigned int *)(*(void *)v15 + 8);
          uint64_t v31 = *(unsigned int *)(HaveSideEffects + 32);
          if (v31 < 0x41) {
            goto LABEL_71;
          }
          int v32 = 0;
          int64_t v40 = (unint64_t)(v31 + 63) >> 6;
          do
          {
            BOOL v34 = v40-- < 1;
            if (v34) {
              break;
            }
            unint64_t v41 = *(void *)(*v29 + 8 * v40);
            v32 += __clz(v41);
          }
          while (!v41);
LABEL_67:
          int v42 = v31 | 0xFFFFFFC0;
          if ((v31 & 0x3F) == 0) {
            int v42 = 0;
          }
          if ((v31 - v32 - v42) > 0x40) {
            goto LABEL_72;
          }
          uint64_t v29 = (unint64_t *)*v29;
LABEL_71:
          if (*v29 >= v30 >> 8)
          {
LABEL_72:
            unint64_t v16 = "Undefined result: Shift count out of range";
            goto LABEL_130;
          }
          continue;
        case 0x3A:
          if (*(unsigned __int8 *)(*(void *)(v15 - 64) + 16) - 11 > 1
            || *(unsigned __int8 *)(*(void *)(v15 - 32) + 16) - 11 > 1)
          {
            continue;
          }
          unint64_t v16 = "Undefined result: xor(undef, undef)";
          goto LABEL_130;
        case 0x3B:
          if (*(unsigned char *)(*(void *)(v15 - 32) + 16) != 16) {
            continue;
          }
          uint64_t v43 = *(void *)(v15 + 40);
          uint64_t v44 = *(void *)(*(void *)(v43 + 56) + 80);
          uint64_t v45 = v44 ? v44 - 24 : 0;
          if (v45 == v43) {
            continue;
          }
          uint64_t v26 = (llvm::raw_ostream *)(v5 + 9);
          uint64_t v27 = "Pessimization: Static alloca outside of entry block";
          goto LABEL_125;
        case 0x3C:
          unint64_t v46 = *(unsigned __int8 **)(v15 - 32);
          uint64_t v47 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v15 + 40) + 56) + 40) + 272, *(void *)v15);
          if (v48 == 1) {
            unint64_t v49 = -2;
          }
          else {
            unint64_t v49 = (unint64_t)(v47 + 7) >> 3;
          }
          llvm::Instruction::getAAMetadata((uint64_t ***)v15, &v76);
          uint64_t v74 = v46;
          uint64_t v75 = v49;
          sub_1CC06BEA0((uint64_t)v5, (unsigned __int8 *)v15, (uint64_t)&v74, (*(_WORD *)(v15 + 18) >> 1) & 0x3F | 0x100, *(unsigned __int8 **)v15, 1);
          continue;
        case 0x3D:
          uint64_t v50 = *(unsigned __int8 **)(v15 - 32);
          uint64_t v51 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v15 + 40) + 56) + 40) + 272, **(void **)(v15 - 64));
          if (v52 == 1) {
            unint64_t v53 = -2;
          }
          else {
            unint64_t v53 = (unint64_t)(v51 + 7) >> 3;
          }
          llvm::Instruction::getAAMetadata((uint64_t ***)v15, &v76);
          uint64_t v74 = v50;
          uint64_t v75 = v53;
          sub_1CC06BEA0((uint64_t)v5, (unsigned __int8 *)v15, (uint64_t)&v74, (*(_WORD *)(v15 + 18) >> 1) & 0x3F | 0x100, **(unsigned __int8 ***)(v15 - 64), 2);
          continue;
        case 0x58:
          long long v54 = *(unsigned __int8 **)(v15 - 32);
          llvm::Instruction::getAAMetadata((uint64_t ***)v15, &v76);
          uint64_t v74 = v54;
          uint64_t v75 = -2;
          sub_1CC06BEA0((uint64_t)v5, (unsigned __int8 *)v15, (uint64_t)&v74, 0, 0, 3);
          continue;
        case 0x59:
          HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, *(llvm::Type **)(v15 - 32), 0);
          if (HaveSideEffects) {
            BOOL v55 = *(unsigned char *)(HaveSideEffects + 16) == 16;
          }
          else {
            BOOL v55 = 0;
          }
          if (!v55) {
            continue;
          }
          uint64_t v56 = (void *)(HaveSideEffects + 24);
          uint64_t v57 = *(unsigned int *)(HaveSideEffects + 32);
          if (v57 < 0x41) {
            goto LABEL_105;
          }
          int v58 = 0;
          int64_t v59 = (unint64_t)(v57 + 63) >> 6;
          do
          {
            BOOL v34 = v59-- < 1;
            if (v34) {
              break;
            }
            unint64_t v60 = *(void *)(*v56 + 8 * v59);
            v58 += __clz(v60);
          }
          while (!v60);
          int v61 = v57 | 0xFFFFFFC0;
          if ((v57 & 0x3F) == 0) {
            int v61 = 0;
          }
          if ((v57 - v58 - v61) <= 0x40)
          {
            uint64_t v56 = (void *)*v56;
LABEL_105:
            if (*v56 < (unint64_t)*(unsigned int *)(**(void **)(v15 - 64) + 32)) {
              continue;
            }
          }
          uint64_t v26 = (llvm::raw_ostream *)(v5 + 9);
          uint64_t v27 = "Undefined result: extractelement index out of range";
          goto LABEL_125;
        case 0x5A:
          HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, *(llvm::Type **)(v15 - 32), 0);
          if (HaveSideEffects) {
            BOOL v62 = *(unsigned char *)(HaveSideEffects + 16) == 16;
          }
          else {
            BOOL v62 = 0;
          }
          if (!v62) {
            continue;
          }
          uint64_t v63 = (void *)(HaveSideEffects + 24);
          uint64_t v64 = *(unsigned int *)(HaveSideEffects + 32);
          if (v64 < 0x41) {
            goto LABEL_120;
          }
          int v65 = 0;
          int64_t v66 = (unint64_t)(v64 + 63) >> 6;
          do
          {
            BOOL v34 = v66-- < 1;
            if (v34) {
              break;
            }
            unint64_t v67 = *(void *)(*v63 + 8 * v66);
            v65 += __clz(v67);
          }
          while (!v67);
          int v68 = v64 | 0xFFFFFFC0;
          if ((v64 & 0x3F) == 0) {
            int v68 = 0;
          }
          if ((v64 - v65 - v68) <= 0x40)
          {
            uint64_t v63 = (void *)*v63;
LABEL_120:
            if (*v63 < (unint64_t)*(unsigned int *)(*(void *)v15 + 32)) {
              continue;
            }
          }
          uint64_t v26 = (llvm::raw_ostream *)(v5 + 9);
          uint64_t v27 = "Undefined result: insertelement index out of range";
LABEL_125:
          uint64_t v69 = llvm::Twine::printOneChild((llvm::raw_ostream *)HaveSideEffects, v26, (uint64_t)v27, a4, 3);
          llvm::Twine::printOneChild(v69, (llvm::raw_ostream *)(v5 + 9), v70, v71, 1);
          uint64_t v72 = (unsigned char *)v5[13];
          if ((unint64_t)v72 >= v5[12])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)(v5 + 9), 10);
          }
          else
          {
            v5[13] = v72 + 1;
            *uint64_t v72 = 10;
          }
          uint64_t v74 = (unsigned __int8 *)v15;
          sub_1CC06B51C((uint64_t)v5, &v74, 1);
          continue;
        default:
          uint64_t v17 = *(void *)(*(void *)(*(void *)(v15 + 40) + 56) + 112);
          if (v17 && (*(unsigned char *)(v17 + 16) & 1) != 0)
          {
            unint64_t v16 = "Unusual: Return statement in function with noreturn attribute";
            goto LABEL_130;
          }
          uint64_t v18 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
          if (v18)
          {
            uint64_t v19 = *(llvm::Type **)(v15 - 32 * v18);
            if (v19)
            {
              HaveSideEffects = (uint64_t)sub_1CC06B6A0((uint64_t)v5, v19, 1);
              if (*(unsigned char *)(HaveSideEffects + 16) == 59)
              {
                unint64_t v16 = "Unusual: Returning alloca value";
LABEL_130:
                uint64_t v73 = (unsigned __int8 *)v15;
                uint64_t v74 = (unsigned __int8 *)v16;
                LOWORD(v77) = 259;
                sub_1CC06B5D4(v5, (uint64_t)&v74, &v73);
                continue;
              }
            }
          }
          break;
      }
    }
  }
}

void llvm::initializeLintLegacyPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6080, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC06AB50;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC6080, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC06AB50(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CC06AC0C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC6078;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2604FA8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6080, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC06AB50;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC6080, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::lintFunction(llvm::Module **this, const llvm::Function *a2)
{
  llvm::legacy::FunctionPassManager::FunctionPassManager((llvm::legacy::FunctionPassManager *)&v2, this[5]);
}

void llvm::lintModule(llvm *this, const llvm::Module *a2)
{
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v2);
}

void sub_1CC06AE40()
{
}

void sub_1CC06AE80(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC06AEBC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetLibraryInfoWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

void sub_1CC06AF3C(uint64_t a1, llvm::Function *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::AAResultsWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::AAResultsWrapperPass::ID);
  size_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v9 != &llvm::AssumptionCacheTracker::ID)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = *(void *)(v9 + 8);
  }
  uint64_t v12 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::AssumptionCacheTracker::ID);
  llvm::AssumptionCacheTracker::getAssumptionCache(v12, a2);
  uint64_t v13 = *(uint64_t **)(a1 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v17 = *(uint64_t **)(a1 + 8);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  if (v18 == v19)
  {
LABEL_19:
    uint64_t v20 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v18 != &llvm::TargetLibraryInfoWrapperPass::ID)
    {
      v18 += 16;
      if (v18 == v19) {
        goto LABEL_19;
      }
    }
    uint64_t v20 = *(void *)(v18 + 8);
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 96))(v20, &llvm::TargetLibraryInfoWrapperPass::ID);
  uint64_t v22 = v21 + 32;
  if (!*(unsigned char *)(v21 + 232))
  {
    uint64_t v23 = *((void *)a2 + 5) + 216;
    __int16 v27 = 260;
    v26[0] = v23;
    uint64_t v24 = v21 + 32;
    llvm::Triple::Triple((llvm::Triple *)v28, (const llvm::Twine *)v26);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    LODWORD(v39) = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(void *)&long long v25 = -1;
    *((void *)&v25 + 1) = -1;
    *(_OWORD *)unint64_t __src = v25;
    long long v31 = v25;
    long long v32 = v25;
    *(_OWORD *)__p = v25;
    long long v34 = v25;
    long long v35 = v25;
    *(_OWORD *)BOOL v36 = v25;
    *(void *)&v36[13] = -1;
    sub_1CC153974((uint64_t)__src, (int *)v28);
    sub_1CD4D04B8(v24, (uint64_t)__src);
    sub_1CD4CFA4C((uint64_t *)__src);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    uint64_t v22 = v24;
  }
  sub_1CC1569E8(__src, v22);
}

void sub_1CC06B51C(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (llvm::raw_ostream *)(a1 + 72);
    uint64_t v6 = 8 * a3;
    do
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        if (v7[16] < 0x1Cu) {
          llvm::Value::printAsOperand((llvm::Value *)v7, v5, 1, *(const llvm::Module **)a1);
        }
        else {
          llvm::Value::print((llvm::Value *)v7, v5, 0);
        }
        size_t v8 = *(unsigned char **)(a1 + 104);
        if ((unint64_t)v8 >= *(void *)(a1 + 96))
        {
          llvm::raw_ostream::write(v5, 10);
        }
        else
        {
          *(void *)(a1 + 104) = v8 + 1;
          *size_t v8 = 10;
        }
      }
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_1CC06B5D4(void *a1, uint64_t a2, unsigned __int8 **a3)
{
  v9[1] = *(unsigned __int8 **)MEMORY[0x1E4F143B8];
  uint64_t v6 = (llvm::raw_ostream *)(a1 + 9);
  uint64_t v7 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)(a1 + 9), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 32));
  llvm::Twine::printOneChild(v7, v6, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned char *)(a2 + 33));
  size_t v8 = (unsigned char *)a1[13];
  if ((unint64_t)v8 >= a1[12])
  {
    llvm::raw_ostream::write(v6, 10);
  }
  else
  {
    a1[13] = v8 + 1;
    *size_t v8 = 10;
  }
  v9[0] = *a3;
  sub_1CC06B51C((uint64_t)a1, v9, 1);
}

llvm::UndefValue *sub_1CC06B6A0(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t v5 = v9;
  uint64_t v6 = v9;
  uint64_t v7 = 4;
  int v8 = 0;
  char v3 = sub_1CC06B700(a1, a2, a3, (uint64_t)&v5);
  if (v6 != v5) {
    free(v6);
  }
  return v3;
}

llvm::UndefValue *sub_1CC06B700(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  v90[6] = *MEMORY[0x1E4F143B8];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = *(void *)(a4 + 8);
        uint64_t v9 = *(unsigned int *)(a4 + 20);
        if (v8 == *(void *)a4)
        {
          if (v9)
          {
            uint64_t v10 = 0;
            uint64_t v11 = 8 * v9;
            uint64_t v12 = *(llvm::UndefValue ***)(a4 + 8);
            do
            {
              if (*v12 == v6) {
                goto LABEL_86;
              }
              if (*v12 == (llvm::UndefValue *)-2) {
                uint64_t v10 = v12;
              }
              ++v12;
              v11 -= 8;
            }
            while (v11);
            if (v10)
            {
              *uint64_t v10 = v6;
              --*(_DWORD *)(a4 + 24);
              goto LABEL_34;
            }
          }
          a2 = (llvm::Type *)*(unsigned int *)(a4 + 16);
          if (v9 < a2)
          {
            *(_DWORD *)(a4 + 20) = v9 + 1;
            *(void *)(v8 + 8 * v9) = v6;
            goto LABEL_34;
          }
        }
        else
        {
          a2 = (llvm::Type *)*(unsigned int *)(a4 + 16);
        }
        if (3 * (int)a2 <= (4 * (v9 - *(_DWORD *)(a4 + 24))))
        {
          if (a2 >= 0x40) {
            LODWORD(a2) = 2 * a2;
          }
          else {
            LODWORD(a2) = 128;
          }
LABEL_80:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a4, a2);
          a2 = (llvm::Type *)*(unsigned int *)(a4 + 16);
          uint64_t v8 = *(void *)(a4 + 8);
          goto LABEL_15;
        }
        if ((int)a2 - (int)v9 < a2 >> 3) {
          goto LABEL_80;
        }
LABEL_15:
        int v13 = a2 - 1;
        unsigned int v14 = (a2 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        uint64_t v15 = (llvm::UndefValue **)(v8 + 8 * v14);
        uint64_t v16 = *v15;
        if (*v15 != (llvm::UndefValue *)-1)
        {
          uint64_t v17 = 0;
          int v18 = 1;
          while (v16 != v6)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v16 == (llvm::UndefValue *)-2;
            }
            if (v19) {
              uint64_t v17 = v15;
            }
            unsigned int v20 = v14 + v18++;
            unsigned int v14 = v20 & v13;
            uint64_t v15 = (llvm::UndefValue **)(v8 + 8 * (v20 & v13));
            uint64_t v16 = *v15;
            if (*v15 == (llvm::UndefValue *)-1) {
              goto LABEL_27;
            }
          }
LABEL_86:
          uint64_t v43 = *(llvm::UndefValue **)v6;
          return llvm::UndefValue::get(v43, a2);
        }
        uint64_t v17 = 0;
LABEL_27:
        if (v17) {
          uint64_t v21 = v17;
        }
        else {
          uint64_t v21 = v15;
        }
        if (*v21 == v6) {
          goto LABEL_86;
        }
        if (*v21 == (llvm::UndefValue *)-2) {
          --*(_DWORD *)(a4 + 24);
        }
        else {
          ++*(_DWORD *)(a4 + 20);
        }
        *uint64_t v21 = v6;
LABEL_34:
        if (a3) {
          UnderlyingObject = llvm::getUnderlyingObject(v6, (const llvm::Value *)6);
        }
        else {
          UnderlyingObject = llvm::Value::stripPointerCasts(v6);
        }
        uint64_t v26 = (uint64_t)UnderlyingObject;
        unsigned int v27 = *((unsigned __int8 *)UnderlyingObject + 16);
        BOOL v28 = UnderlyingObject == 0;
        if (UnderlyingObject && v27 == 60)
        {
          unsigned int v45 = 0;
          unsigned int v81 = (uint64_t *)((char *)UnderlyingObject + 24);
          unint64_t v46 = (uint64_t **)*((void *)UnderlyingObject + 5);
          uint64_t v47 = (uint64_t ***)v90;
          int v86 = v90;
          uint64_t v87 = (uint64_t)v90;
          uint64_t v88 = 4;
          int v89 = 0;
          int v48 = (uint64_t ***)v90;
          while (1)
          {
            if (v48 == v47)
            {
              if (v45)
              {
                unint64_t v49 = 0;
                uint64_t v50 = 8 * v45;
                uint64_t v51 = v47;
                while (*v51 != v46)
                {
                  if (*v51 == (uint64_t **)-2) {
                    unint64_t v49 = v51;
                  }
                  ++v51;
                  v50 -= 8;
                  if (!v50)
                  {
                    if (!v49) {
                      goto LABEL_98;
                    }
                    unsigned char *v49 = v46;
                    --v89;
                    goto LABEL_122;
                  }
                }
                goto LABEL_132;
              }
LABEL_98:
              unsigned int v52 = v88;
              if (v45 < v88)
              {
                HIDWORD(v88) = v45 + 1;
                v47[v45] = v46;
                goto LABEL_122;
              }
            }
            else
            {
              unsigned int v52 = v88;
            }
            if (3 * v52 <= 4 * (v45 - v89)) {
              break;
            }
            if (v52 - v45 < v52 >> 3) {
              goto LABEL_131;
            }
LABEL_103:
            unsigned int v53 = v52 - 1;
            unsigned int v54 = (v52 - 1) & ((v46 >> 4) ^ (v46 >> 9));
            BOOL v55 = &v48[v54];
            uint64_t v56 = *v55;
            if (*v55 != (uint64_t **)-1)
            {
              uint64_t v57 = 0;
              int v58 = 1;
              while (v56 != v46)
              {
                if (v57) {
                  BOOL v59 = 0;
                }
                else {
                  BOOL v59 = v56 == (uint64_t **)-2;
                }
                if (v59) {
                  uint64_t v57 = v55;
                }
                unsigned int v60 = v54 + v58++;
                unsigned int v54 = v60 & v53;
                BOOL v55 = &v48[v60 & v53];
                uint64_t v56 = *v55;
                if (*v55 == (uint64_t **)-1) {
                  goto LABEL_115;
                }
              }
LABEL_132:
              char v64 = 1;
              goto LABEL_133;
            }
            uint64_t v57 = 0;
LABEL_115:
            if (v57) {
              int v61 = v57;
            }
            else {
              int v61 = v55;
            }
            if (*v61 == v46) {
              goto LABEL_132;
            }
            if (*v61 == (uint64_t **)-2) {
              --v89;
            }
            else {
              ++HIDWORD(v88);
            }
            *int v61 = v46;
LABEL_122:
            AvailableLoadedValue = llvm::FindAvailableLoadedValue((llvm::MemoryLocation *)v26, (uint64_t)v46, &v81, dword_1EBD04060, *(llvm::AAResults **)(a1 + 16), 0, 0);
            if (AvailableLoadedValue)
            {
              unint64_t v46 = (uint64_t **)sub_1CC06B700(a1, AvailableLoadedValue, a3, a4);
              char v64 = 0;
LABEL_133:
              if ((void *)v87 != v86) {
                free((void *)v87);
              }
              if (v64)
              {
LABEL_136:
                BOOL v28 = 0;
                goto LABEL_137;
              }
              return (llvm::UndefValue *)v46;
            }
            if (v81 != v46[6]) {
              goto LABEL_132;
            }
            uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)v46);
            if (!UniquePredecessor) {
              goto LABEL_132;
            }
            unint64_t v46 = (uint64_t **)UniquePredecessor;
            unsigned int v81 = (uint64_t *)(UniquePredecessor + 40);
            uint64_t v47 = (uint64_t ***)v86;
            int v48 = (uint64_t ***)v87;
            unsigned int v45 = HIDWORD(v88);
          }
          if (v52 >= 0x40) {
            v52 *= 2;
          }
          else {
            unsigned int v52 = 128;
          }
LABEL_131:
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v86, v52);
          unsigned int v52 = v88;
          int v48 = (uint64_t ***)v87;
          goto LABEL_103;
        }
        if (!UnderlyingObject || v27 != 83) {
          break;
        }
        int v29 = *((_DWORD *)UnderlyingObject + 5);
        if ((v29 & 0x40000000) != 0)
        {
          unint64_t v30 = (llvm::UndefValue **)*((void *)UnderlyingObject - 1);
          unsigned int v31 = v29 & 0x7FFFFFF;
        }
        else
        {
          unsigned int v31 = v29 & 0x7FFFFFF;
          unint64_t v30 = (llvm::UndefValue **)((char *)UnderlyingObject - 32 * (v29 & 0x7FFFFFF));
        }
        uint64_t v6 = *v30;
        unsigned int v32 = v31 - 1;
        if (v31 != 1)
        {
          int64_t v33 = (char *)UnderlyingObject - 32 * v31;
          uint64_t v34 = 32;
          do
          {
            if ((v29 & 0x40000000) != 0) {
              long long v35 = *(llvm::UndefValue **)(*((void *)UnderlyingObject - 1) + v34);
            }
            else {
              long long v35 = *(llvm::UndefValue **)&v33[v34];
            }
            if (v35 != v6 && v35 != UnderlyingObject)
            {
              if (v6 != UnderlyingObject) {
                goto LABEL_136;
              }
              BOOL v36 = v33;
              if ((v29 & 0x40000000) != 0) {
                BOOL v36 = (char *)*((void *)UnderlyingObject - 1);
              }
              uint64_t v6 = *(llvm::UndefValue **)&v36[v34];
            }
            v34 += 32;
            --v32;
          }
          while (v32);
        }
        if (v6 == UnderlyingObject) {
          uint64_t v6 = llvm::UndefValue::get(*(llvm::UndefValue **)UnderlyingObject, a2);
        }
        if (!v6) {
          goto LABEL_136;
        }
      }
      if (UnderlyingObject && v27 >= 0x1C && v27 - 79 >= 0xFFFFFFF3)
      {
        if (!llvm::CastInst::isNoopCast(UnderlyingObject, *(const llvm::DataLayout **)(a1 + 8))) {
          goto LABEL_136;
        }
        uint64_t v37 = -1;
        goto LABEL_61;
      }
      if (!UnderlyingObject || v27 != 92) {
        break;
      }
      uint64_t v38 = *((void *)UnderlyingObject - 4);
      uint64_t v39 = *(unsigned int **)(v26 + 64);
      uint64_t v40 = *(unsigned int *)(v26 + 72);
LABEL_72:
      InsertedValue = llvm::FindInsertedValue(v38, v39, v40, 0);
      BOOL v28 = 0;
      if (InsertedValue)
      {
        uint64_t v6 = InsertedValue;
        if (InsertedValue != (llvm::Value *)v26) {
          continue;
        }
      }
      goto LABEL_137;
    }
    if (!UnderlyingObject || v27 != 5) {
      break;
    }
    int v41 = *((unsigned __int16 *)UnderlyingObject + 9);
    if ((v41 - 38) > 0xC)
    {
      if (v41 != 64) {
        goto LABEL_136;
      }
      uint64_t v39 = *(unsigned int **)(v26 + 24);
      uint64_t v40 = *(unsigned int *)(v26 + 32);
      uint64_t v38 = *(void *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
      goto LABEL_72;
    }
    if (!llvm::CastInst::isNoopCast(v41, **(llvm::Type ***)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF)), *(llvm::Type **)v26, *(llvm::DataLayout **)(a1 + 8)))goto LABEL_136; {
    uint64_t v37 = -(uint64_t)(*(_DWORD *)(v26 + 20) & 0x7FFFFFF);
    }
LABEL_61:
    uint64_t v6 = *(llvm::UndefValue **)(v26 + 32 * v37);
  }
LABEL_137:
  unsigned int v65 = *(unsigned __int8 *)(v26 + 16);
  if (!v28 && v65 >= 0x1C)
  {
    uint64_t v66 = *(void *)(a1 + 24);
    unsigned int v81 = *(uint64_t **)(a1 + 8);
    int8x16_t v82 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    uint64_t v83 = v66;
    uint64_t v84 = 0;
    __int16 v85 = 257;
    int v67 = *(_DWORD *)(v26 + 20);
    if ((v67 & 0x40000000) != 0)
    {
      uint64_t v69 = *(uint64_t **)(v26 - 8);
      unint64_t v68 = v67 & 0x7FFFFFF;
    }
    else
    {
      unint64_t v68 = v67 & 0x7FFFFFF;
      uint64_t v69 = (uint64_t *)(v26 - 32 * v68);
    }
    int v86 = &v88;
    uint64_t v87 = 0x800000000;
    if (v68 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v68)
    {
      uint64_t v70 = 32 * v68;
      size_t v71 = &v88;
      do
      {
        uint64_t v72 = *v69;
        v69 += 4;
        *v71++ = v72;
        v70 -= 32;
      }
      while (v70);
      uint64_t v73 = (uint64_t *)v86;
    }
    else
    {
      uint64_t v73 = &v88;
    }
    LODWORD(v87) = v68;
    unsigned int v80 = llvm::SimplifyInstructionWithOperands((llvm *)v26, (uint64_t)v73, v68, (uint64_t)&v81, v23, v24, v25);
    if (v86 != &v88) {
      free(v86);
    }
    unint64_t v46 = (uint64_t **)v26;
    if (!v80) {
      return (llvm::UndefValue *)v46;
    }
    uint64_t v78 = a1;
    unsigned int v79 = v80;
    return (llvm::UndefValue *)sub_1CC06B700(v78, v79, a3, a4);
  }
  if (v65 > 0x14) {
    BOOL v28 = 1;
  }
  if (v28) {
    return (llvm::UndefValue *)v26;
  }
  uint64_t v74 = *(llvm::DataLayout **)(a1 + 8);
  uint64_t v75 = *(void *)(a1 + 40);
  int v86 = (void *)1;
  for (uint64_t i = 8; i != 72; i += 16)
    *(void **)((char *)&v86 + i) = (void *)-4096;
  long long v77 = sub_1CBFB8694(v26, v74, v75, (uint64_t)&v86);
  if ((v86 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v87, 8);
  }
  unint64_t v46 = (uint64_t **)v26;
  if (v77 != (llvm::Value *)v26)
  {
    uint64_t v78 = a1;
    unsigned int v79 = v77;
    return (llvm::UndefValue *)sub_1CC06B700(v78, v79, a3, a4);
  }
  return (llvm::UndefValue *)v46;
}

void sub_1CC06BEA0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int16 a4, unsigned __int8 *a5, char a6)
{
  unint64_t v6 = *(void *)(a3 + 8);
  if (v6 <= 0xFFFFFFFFFFFFFFFDLL && (v6 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return;
  }
  unsigned int v14 = *(llvm::GlobalValue **)a3;
  uint64_t v15 = sub_1CC06B6A0(a1, *(llvm::Type **)a3, 1);
  unsigned int v17 = *((unsigned __int8 *)v15 + 16);
  if (v17 == 19)
  {
    int v18 = "Undefined behavior: Null pointer dereference";
LABEL_45:
    size_t v71 = a2;
    uint64_t v72 = (uint64_t *)v18;
    __int16 v74 = 259;
    sub_1CC06B5D4((void *)a1, (uint64_t)&v72, &v71);
    return;
  }
  if (v17 - 11 <= 1)
  {
    int v18 = "Undefined behavior: Undef pointer dereference";
    goto LABEL_45;
  }
  BOOL v19 = v15;
  if (v17 == 16)
  {
    unint64_t v68 = a5;
    uint64_t v20 = *((unsigned int *)v15 + 8);
    if (v20)
    {
      uint64_t v21 = (void *)((char *)v15 + 24);
      if (v20 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::UndefValue *)((char *)v15 + 24)) != v20)
        {
          int v23 = 0;
          int64_t v24 = (unint64_t)(v20 + 63) >> 6;
          do
          {
            if (v24-- < 1) {
              break;
            }
            unint64_t v26 = *(void *)(*v21 + 8 * v24);
            v23 += __clz(v26);
          }
          while (!v26);
          int v27 = v20 | 0xFFFFFFC0;
          if ((v20 & 0x3F) == 0) {
            int v27 = 0;
          }
          BOOL v22 = v23 + v27 == v20 - 1;
LABEL_22:
          a5 = v68;
          if (v22)
          {
            int v18 = "Unusual: Address one pointer dereference";
            goto LABEL_45;
          }
          goto LABEL_25;
        }
      }
      else if (*v21 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v20)
      {
        BOOL v22 = *v21 == 1;
        goto LABEL_22;
      }
    }
    int v18 = "Unusual: All-ones pointer dereference";
    goto LABEL_45;
  }
LABEL_25:
  if ((a6 & 2) != 0)
  {
    if (!v17 || v17 == 4)
    {
      int v18 = "Undefined behavior: Write to text section";
      goto LABEL_45;
    }
    if (v17 == 3 && (*((unsigned char *)v19 + 80) & 1) != 0)
    {
      int v18 = "Undefined behavior: Write to read-only memory";
      goto LABEL_45;
    }
  }
  if (a6)
  {
    if (v17 == 4)
    {
      int v18 = "Undefined behavior: Load from block address";
      goto LABEL_45;
    }
    if (!v17)
    {
      int v18 = "Unusual: Load from function body";
      goto LABEL_45;
    }
    BOOL v28 = 0;
  }
  else
  {
    BOOL v28 = v17 == 4;
    if ((a6 & 4) != 0 && v17 == 4)
    {
      int v18 = "Undefined behavior: Call to block address";
      goto LABEL_45;
    }
  }
  if ((a6 & 8) != 0 && v17 <= 0x14 && !v28)
  {
    int v18 = "Undefined behavior: Branch to non-blockaddress";
    goto LABEL_45;
  }
  uint64_t v29 = *(void *)(a1 + 8);
  unsigned int v30 = *(_DWORD *)(*(void *)v14 + 8);
  if ((v30 & 0xFE) == 0x12) {
    unsigned int v30 = *(_DWORD *)(**(void **)(*(void *)v14 + 16) + 8);
  }
  if (v30 < 0x100) {
    goto LABEL_58;
  }
  unsigned int v31 = v30 >> 8;
  uint64_t v32 = *(unsigned int *)(v29 + 240);
  uint64_t v33 = *(void *)(v29 + 232);
  if (v32)
  {
    uint64_t v33 = *(void *)(v29 + 232);
    unint64_t v34 = *(unsigned int *)(v29 + 240);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = v33 + 16 * (v34 >> 1);
      unsigned int v37 = *(_DWORD *)(v36 + 8);
      uint64_t v38 = v36 + 16;
      v34 += ~(v34 >> 1);
      if (v37 < v31) {
        uint64_t v33 = v38;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
  }
  if (v33 == *(void *)(v29 + 232) + 16 * v32 || *(_DWORD *)(v33 + 8) != v31) {
LABEL_58:
  }
    uint64_t v33 = *(void *)(v29 + 232);
  unsigned int v73 = *(_DWORD *)(v33 + 12);
  if (v73 > 0x40) {
    operator new[]();
  }
  uint64_t v72 = 0;
  uint64_t v39 = a5;
  uint64_t v40 = llvm::Value::stripAndAccumulateConstantOffsets(v14, (llvm::DataLayout *)v29, (llvm::APInt *)&v72, 1, 0, 0, v16);
  int v41 = v40;
  if (v73 > 0x40)
  {
    uint64_t v42 = *v72;
    MEMORY[0x1D25D9CB0]();
    if (!v41) {
      return;
    }
  }
  else
  {
    uint64_t v42 = (uint64_t)((void)v72 << -(uint64_t)v73) >> -(uint64_t)v73;
    if (!v40) {
      return;
    }
  }
  int v43 = *((unsigned __int8 *)v41 + 16);
  if (v43 == 3)
  {
    if ((*((_DWORD *)v41 + 5) & 0x7FFFFFF) == 0
      || (llvm::GlobalValue::isInterposable(v41) & 1) != 0
      || (*((unsigned char *)v41 + 80) & 2) != 0)
    {
      goto LABEL_75;
    }
    uint64_t v70 = v42;
    unint64_t v46 = (unsigned __int8 *)*((void *)v41 + 3);
    unsigned int v47 = v46[8];
    if (v47 <= 0x11)
    {
      if (((1 << v47) & 0xAC7F) != 0) {
        goto LABEL_71;
      }
      if (((1 << v47) & 0x30000) != 0) {
        goto LABEL_128;
      }
    }
    if ((v47 & 0xFE) == 0x12 || v47 == 21)
    {
LABEL_128:
      if (llvm::Type::isSizedDerivedType(*((void *)v41 + 3), 0))
      {
LABEL_71:
        int v48 = *(llvm::DataLayout **)(a1 + 8);
        unint64_t v49 = (unint64_t)(sub_1CB83544C((uint64_t)v48, (uint64_t)v46) + 7) >> 3;
        BOOL v51 = v50 == 1;
        char Alignment = llvm::DataLayout::getAlignment(v48, (llvm::Type *)v46, 1);
        unint64_t v45 = ((1 << Alignment) + v49 - 1) & -(1 << Alignment);
        if (v51) {
LABEL_73:
        }
        uint64_t v39 = a5;
        if ((*((_WORD *)v41 + 17) & 0x3F) != 0)
        {
          char v54 = (*((_WORD *)v41 + 17) & 0x3F) - 1;
          int v55 = 1;
LABEL_108:
          uint64_t v42 = v70;
          goto LABEL_91;
        }
        unsigned int v67 = v46[8];
        if (v67 <= 0x11)
        {
          if (((1 << v67) & 0xAC7F) != 0)
          {
LABEL_107:
            int v55 = 1;
            char v54 = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v46, 1);
            goto LABEL_108;
          }
          if (((1 << v67) & 0x30000) != 0) {
            goto LABEL_129;
          }
        }
        if ((v67 & 0xFE) == 0x12 || v67 == 21)
        {
LABEL_129:
          if (llvm::Type::isSizedDerivedType((uint64_t)v46, 0)) {
            goto LABEL_107;
          }
        }
        char v54 = 0;
        int v55 = 0;
        goto LABEL_108;
      }
    }
    unint64_t v45 = -1;
    goto LABEL_73;
  }
  if (v43 != 59)
  {
LABEL_75:
    int v55 = 0;
    char v54 = 0;
    goto LABEL_76;
  }
  uint64_t v69 = v42;
  uint64_t v44 = (unsigned __int8 *)*((void *)v41 + 8);
  if ((llvm::AllocaInst::isArrayAllocation(v41) & 1) == 0)
  {
    unsigned int v59 = v44[8];
    if (v59 > 0x11) {
      goto LABEL_110;
    }
    if (((1 << v59) & 0xAC7F) != 0) {
      goto LABEL_87;
    }
    if (((1 << v59) & 0x30000) == 0)
    {
LABEL_110:
      if ((v59 & 0xFE) != 0x12 && v59 != 21) {
        goto LABEL_65;
      }
    }
    if (!llvm::Type::isSizedDerivedType((uint64_t)v44, 0)) {
      goto LABEL_65;
    }
LABEL_87:
    unsigned int v60 = *(llvm::DataLayout **)(a1 + 8);
    unint64_t v61 = (unint64_t)(sub_1CB83544C((uint64_t)v60, (uint64_t)v44) + 7) >> 3;
    BOOL v63 = v62 == 1;
    char v64 = llvm::DataLayout::getAlignment(v60, (llvm::Type *)v44, 1);
    unint64_t v45 = ((1 << v64) + v61 - 1) & -(1 << v64);
    if (v63) {
    uint64_t v39 = a5;
    }
    goto LABEL_90;
  }
LABEL_65:
  unint64_t v45 = -1;
LABEL_90:
  uint64_t v42 = v69;
  int v55 = 1;
  char v54 = __clz(1 << *((_WORD *)v41 + 9)) ^ 0x3F;
LABEL_91:
  unint64_t v66 = *(void *)(a3 + 8);
  if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v45 != -1 && (v42 < 0 || (v66 & 0x7FFFFFFFFFFFFFFFLL) + v42 > v45))
  {
    int v18 = "Undefined behavior: Buffer overflow";
    goto LABEL_45;
  }
LABEL_76:
  uint64_t v56 = v39;
  int v57 = HIBYTE(a4);
  if (v56 && !HIBYTE(a4))
  {
    unsigned int v58 = a5[8];
    if (v58 > 0x11) {
      goto LABEL_100;
    }
    if (((1 << v58) & 0xAC7F) != 0)
    {
LABEL_80:
      int v57 = 1;
      LOBYTE(a4) = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)a5, 1);
      goto LABEL_81;
    }
    if (((1 << v58) & 0x30000) == 0)
    {
LABEL_100:
      if ((v58 & 0xFE) != 0x12 && v58 != 21) {
        return;
      }
    }
    if (!llvm::Type::isSizedDerivedType((uint64_t)a5, 0)) {
      return;
    }
    goto LABEL_80;
  }
LABEL_81:
  if (v55
    && v57
    && (63 - __clz(((1 << v54) | v42) & -((1 << v54) | v42))) < a4)
  {
    int v18 = "Undefined behavior: Memory reference address is misaligned";
    goto LABEL_45;
  }
}

void sub_1CC06C590(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(a2 - 32);
  uint64_t v148 = *(char **)(a2 - 32);
  uint64_t v4 = (llvm::Type *)v148;
  uint64_t v149 = -2;
  long long v150 = 0u;
  long long v151 = 0u;
  sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, 0, 0, 4);
  unint64_t v6 = sub_1CC06B6A0(a1, v4, 0);
  if (v6) {
    BOOL v7 = *((unsigned char *)v6 + 16) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_5;
  }
  unsigned int v17 = v6;
  unsigned int v18 = *((unsigned __int16 *)v6 + 9);
  if ((((v18 >> 4) ^ (*(unsigned __int16 *)(a2 + 18) >> 2)) & 0x3FF) != 0)
  {
    BOOL v19 = "Undefined behavior: Caller and callee calling convention differ";
    goto LABEL_32;
  }
  uint64_t v20 = *((void *)v6 + 3);
  int v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 == 84)
  {
    uint64_t v22 = 0;
  }
  else if (v21 == 39)
  {
    uint64_t v22 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v22 = 2;
  }
  int v23 = *(_DWORD *)(a2 + 20);
  if (v23 < 0 && (uint64_t v132 = a2 - 32 * (v23 & 0x7FFFFFF), v133 = *(void *)(v132 - 8), (v133 & 0xFFFFFFFF0) != 0))
  {
    uint64_t v25 = -(uint64_t)(v23 & 0x7FFFFFF);
    int v24 = *(_DWORD *)(v132 - 12) - *(_DWORD *)(v132 - v133);
  }
  else
  {
    int v24 = 0;
    uint64_t v25 = -(uint64_t)(v23 & 0x7FFFFFF);
  }
  unint64_t v26 = (-32 * v22 + 32 * (unint64_t)-v24 - 32 * v25 - 32) >> 5;
  unsigned int v27 = *(_DWORD *)(v20 + 12) - 1;
  if (*(_DWORD *)(v20 + 8) >= 0x100u)
  {
    if (v27 <= v26) {
      goto LABEL_27;
    }
LABEL_30:
    BOOL v19 = "Undefined behavior: Call argument count mismatches callee argument count";
    goto LABEL_32;
  }
  if (v27 != v26) {
    goto LABEL_30;
  }
LABEL_27:
  if (**(void **)(v20 + 16) != *(void *)a2)
  {
    BOOL v19 = "Undefined behavior: Call return type mismatches callee return type";
    goto LABEL_32;
  }
  if (v18)
  {
    llvm::Function::BuildLazyArguments(v6);
    unint64_t v35 = (llvm::Argument *)*((void *)v17 + 11);
    if (*((_WORD *)v17 + 9))
    {
      llvm::Function::BuildLazyArguments(v17);
      uint64_t v36 = (llvm::Argument *)*((void *)v17 + 11);
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v35 = (llvm::Argument *)*((void *)v6 + 11);
  }
  uint64_t v36 = v35;
LABEL_50:
  int v37 = *(_DWORD *)(a2 + 20);
  uint64_t v38 = v37 & 0x7FFFFFF;
  uint64_t v39 = (void **)(a2 - 32 * v38);
  int v40 = *(unsigned __int8 *)(a2 + 16);
  if (v40 == 84)
  {
    uint64_t v41 = 0;
  }
  else if (v40 == 39)
  {
    uint64_t v41 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v41 = 2;
  }
  if (v37 < 0 && (uint64_t v135 = (uint64_t)*(v39 - 1), (v135 & 0xFFFFFFFF0) != 0)) {
    uint64_t v42 = (*((_DWORD *)v39 - 3) - *(_DWORD *)((char *)v39 - v135));
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = a2 - 32 * v41 - 32 * v42 - 32;
  if (v39 == (void **)v43)
  {
LABEL_5:
    if (*(unsigned char *)(a2 + 16) != 84) {
      return;
    }
    if ((*(_WORD *)(a2 + 18) & 3u) - 1 <= 1)
    {
      uint64_t v8 = *(void *)(a2 + 64);
      int v9 = *(_DWORD *)(a2 + 20);
      uint64_t v10 = v9 & 0x7FFFFFF;
      uint64_t v11 = (uint64_t *)(a2 - 32 * v10);
      if (v9 < 0 && (uint64_t v134 = *(v11 - 1), (v134 & 0xFFFFFFFF0) != 0)) {
        uint64_t v12 = (*((_DWORD *)v11 - 3) - *(_DWORD *)((char *)v11 - v134));
      }
      else {
        uint64_t v12 = 0;
      }
      if (v11 != &v5[-4 * v12])
      {
        uint64_t v13 = 32 * ~v12;
        uint64_t v14 = -32 * v10;
        unsigned int v15 = 2;
        do
        {
          if ((!v8
             || v15 >= *(_DWORD *)(v8 + 8)
             || (uint64_t v16 = *(void *)(v8 + 40 + 8 * v15)) == 0
             || (*(unsigned char *)(v16 + 20) & 0x20) == 0)
            && *((unsigned char *)sub_1CC06B6A0(a1, *(llvm::Type **)(a2 + v14), 1) + 16) == 59)
          {
            BOOL v19 = "Undefined behavior: Call with \"tail\" keyword references alloca";
            goto LABEL_32;
          }
          ++v15;
          v14 += 32;
        }
        while (v13 != v14);
        if (*(unsigned char *)(a2 + 16) == 84) {
          goto LABEL_35;
        }
        return;
      }
    }
LABEL_35:
    uint64_t v28 = *v5;
    if (!*v5
      || *(unsigned char *)(v28 + 16)
      || *(void *)(v28 + 24) != *(void *)(a2 + 72)
      || (*(unsigned char *)(v28 + 33) & 0x20) == 0)
    {
      return;
    }
    int v29 = *(_DWORD *)(v28 + 36);
    if (v29 <= 286)
    {
      switch(v29)
      {
        case 194:
          llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v148);
          __int16 v30 = 0;
          __int16 v31 = 0;
          uint64_t v32 = *(void *)(a2 + 64);
          if (v32)
          {
            if (*(_DWORD *)(v32 + 8) >= 3u && (uint64_t v33 = *(llvm::AttributeSetNode **)(v32 + 56)) != 0)
            {
              __int16 Alignment = llvm::AttributeSetNode::getAlignment(v33);
              __int16 v30 = Alignment & 0xFF00;
              __int16 v31 = Alignment;
            }
            else
            {
              __int16 v30 = 0;
              __int16 v31 = 0;
            }
          }
          sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v31 | v30, 0, 2);
          llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v148);
          __int16 v97 = 0;
          __int16 v98 = 0;
          uint64_t v99 = *(void *)(a2 + 64);
          if (v99)
          {
            if (*(_DWORD *)(v99 + 8) >= 4u && (BOOL v100 = *(llvm::AttributeSetNode **)(v99 + 64)) != 0)
            {
              __int16 v101 = llvm::AttributeSetNode::getAlignment(v100);
              __int16 v97 = v101 & 0xFF00;
              __int16 v98 = v101;
            }
            else
            {
              __int16 v97 = 0;
              __int16 v98 = 0;
            }
          }
          sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v98 | v97, 0, 1);
          unint64_t v102 = sub_1CC06B6A0(a1, *(llvm::Type **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64), 0);
          uint64_t v103 = -2;
          if (!v102 || *((unsigned char *)v102 + 16) != 16) {
            goto LABEL_180;
          }
          uint64_t v104 = *((unsigned int *)v102 + 8);
          if (v104 > 0x40)
          {
            int v121 = 0;
            int64_t v122 = (unint64_t)(v104 + 63) >> 6;
            do
            {
              BOOL v88 = v122-- < 1;
              if (v88) {
                break;
              }
              unint64_t v123 = *(void *)(*((void *)v102 + 3) + 8 * v122);
              v121 += __clz(v123);
            }
            while (!v123);
            int v124 = v104 | 0xFFFFFFC0;
            if ((v104 & 0x3F) == 0) {
              int v124 = 0;
            }
            if ((v104 - v121 - v124) > 0x20)
            {
              uint64_t v103 = -2;
              goto LABEL_180;
            }
            unint64_t v105 = **((void **)v102 + 3);
          }
          else
          {
            unint64_t v105 = *((void *)v102 + 3);
            if (__clz(v105) - 32 >= 0x21) {
              goto LABEL_180;
            }
          }
          if (v105 <= 0x7FFFFFFFFFFFFFFBLL) {
            uint64_t v103 = v105;
          }
          else {
            uint64_t v103 = -2;
          }
LABEL_180:
          uint64_t v129 = *(void *)(a1 + 16);
          int v130 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
          BOOL v131 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a2
                                                                                   - 32
                                                                                   * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
          uint64_t v148 = (char *)v130;
          uint64_t v149 = v103;
          long long v150 = 0u;
          long long v151 = 0u;
          unsigned int v145 = v131;
          uint64_t v146 = v103;
          memset(v147, 0, sizeof(v147));
          if (llvm::AAResults::alias(v129, (uint64_t)&v148, (uint64_t)&v145) != 3) {
            return;
          }
          BOOL v19 = "Undefined behavior: memcpy source and destination overlap";
          goto LABEL_32;
        case 195:
        case 198:
          return;
        case 196:
          uint64_t v83 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
          uint64_t v84 = (unint64_t *)(v83 + 24);
          uint64_t v85 = *(unsigned int *)(v83 + 32);
          if (v85 < 0x41) {
            goto LABEL_148;
          }
          int v86 = 0;
          int64_t v87 = (unint64_t)(v85 + 63) >> 6;
          do
          {
            BOOL v88 = v87-- < 1;
            if (v88) {
              break;
            }
            unint64_t v89 = *(void *)(*v84 + 8 * v87);
            v86 += __clz(v89);
          }
          while (!v89);
          int v90 = v85 | 0xFFFFFFC0;
          if ((v85 & 0x3F) == 0) {
            int v90 = 0;
          }
          if ((v85 - v86 - v90) <= 0x40)
          {
            uint64_t v84 = (unint64_t *)*v84;
LABEL_148:
            unint64_t v91 = *v84;
          }
          else
          {
            unint64_t v91 = -1;
          }
          llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v148);
          __int16 v111 = 0;
          __int16 v112 = 0;
          uint64_t v113 = *(void *)(a2 + 64);
          if (v113)
          {
            if (*(_DWORD *)(v113 + 8) >= 3u && (unint64_t v114 = *(llvm::AttributeSetNode **)(v113 + 56)) != 0)
            {
              __int16 v115 = llvm::AttributeSetNode::getAlignment(v114);
              __int16 v111 = v115 & 0xFF00;
              __int16 v112 = v115;
            }
            else
            {
              __int16 v111 = 0;
              __int16 v112 = 0;
            }
          }
          sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v112 | v111, 0, 2);
          llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v148);
          __int16 v116 = 0;
          __int16 v117 = 0;
          uint64_t v118 = *(void *)(a2 + 64);
          if (v118)
          {
            if (*(_DWORD *)(v118 + 8) >= 4u && (int v119 = *(llvm::AttributeSetNode **)(v118 + 64)) != 0)
            {
              __int16 v120 = llvm::AttributeSetNode::getAlignment(v119);
              __int16 v116 = v120 & 0xFF00;
              __int16 v117 = v120;
            }
            else
            {
              __int16 v116 = 0;
              __int16 v117 = 0;
            }
          }
          sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v117 | v116, 0, 1);
          if (v91 <= 0x7FFFFFFFFFFFFFFBLL) {
            uint64_t v103 = v91;
          }
          else {
            uint64_t v103 = -2;
          }
          goto LABEL_180;
        case 197:
          llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v148);
          __int16 v92 = 0;
          __int16 v93 = 0;
          uint64_t v94 = *(void *)(a2 + 64);
          if (v94)
          {
            if (*(_DWORD *)(v94 + 8) >= 3u && (int v95 = *(llvm::AttributeSetNode **)(v94 + 56)) != 0)
            {
              __int16 v96 = llvm::AttributeSetNode::getAlignment(v95);
              __int16 v92 = v96 & 0xFF00;
              __int16 v93 = v96;
            }
            else
            {
              __int16 v92 = 0;
              __int16 v93 = 0;
            }
          }
          sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v93 | v92, 0, 2);
          llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v148);
          __int16 v106 = 0;
          __int16 v107 = 0;
          uint64_t v108 = *(void *)(a2 + 64);
          if (v108)
          {
            if (*(_DWORD *)(v108 + 8) >= 4u && (uint64_t v109 = *(llvm::AttributeSetNode **)(v108 + 64)) != 0)
            {
              __int16 v110 = llvm::AttributeSetNode::getAlignment(v109);
              __int16 v106 = v110 & 0xFF00;
              __int16 v107 = v110;
            }
            else
            {
              __int16 v106 = 0;
              __int16 v107 = 0;
            }
          }
          __int16 v74 = v107 | v106;
          uint64_t v72 = a1;
          unsigned int v73 = (unsigned __int8 *)a2;
          goto LABEL_145;
        case 199:
          llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v148);
          __int16 v78 = 0;
          __int16 v79 = 0;
          uint64_t v80 = *(void *)(a2 + 64);
          if (v80)
          {
            if (*(_DWORD *)(v80 + 8) >= 3u && (unsigned int v81 = *(llvm::AttributeSetNode **)(v80 + 56)) != 0)
            {
              __int16 v82 = llvm::AttributeSetNode::getAlignment(v81);
              __int16 v78 = v82 & 0xFF00;
              __int16 v79 = v82;
            }
            else
            {
              __int16 v78 = 0;
              __int16 v79 = 0;
            }
          }
          __int16 v74 = v79 | v78;
          uint64_t v72 = a1;
          unsigned int v73 = (unsigned __int8 *)a2;
          char v75 = 2;
          goto LABEL_146;
        default:
          if (v29 != 153) {
            return;
          }
          uint64_t v76 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (!v76 || *(unsigned char *)(v76 + 16) != 16) {
            return;
          }
          uint64_t v77 = *(unsigned int *)(v76 + 32);
          if (v77 > 0x40)
          {
            int v125 = 0;
            int64_t v126 = (unint64_t)(v77 + 63) >> 6;
            do
            {
              BOOL v88 = v126-- < 1;
              if (v88) {
                break;
              }
              unint64_t v127 = *(void *)(*(void *)(v76 + 24) + 8 * v126);
              v125 += __clz(v127);
            }
            while (!v127);
            int v128 = v77 | 0xFFFFFFC0;
            if ((v77 & 0x3F) == 0) {
              int v128 = 0;
            }
            if (v125 + v128 != v77) {
              return;
            }
          }
          else if (*(void *)(v76 + 24))
          {
            return;
          }
          BOOL v19 = "get_active_lane_mask: operand #2 must be greater than 0";
          goto LABEL_32;
      }
    }
    if (v29 > 313)
    {
      if (v29 != 314)
      {
        if (v29 != 315) {
          return;
        }
        if (*(_DWORD *)(*(void *)(*(void *)(*(void *)(a2 + 40) + 56) + 24) + 8) <= 0xFFu)
        {
          BOOL v19 = "Undefined behavior: va_start called in a non-varargs function";
          goto LABEL_32;
        }
      }
    }
    else if (v29 != 287)
    {
      if (v29 != 313) {
        return;
      }
      llvm::MemoryLocation::getForArgument(a2, 0, *(uint64_t **)(a1 + 40), (uint64_t)&v148);
      sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, 0, 0, 2);
      llvm::MemoryLocation::getForArgument(a2, 1u, *(uint64_t **)(a1 + 40), (uint64_t)&v148);
      uint64_t v72 = a1;
      unsigned int v73 = (unsigned __int8 *)a2;
      __int16 v74 = 0;
LABEL_145:
      char v75 = 1;
LABEL_146:
      sub_1CC06BEA0(v72, v73, (uint64_t)&v148, v74, 0, v75);
      return;
    }
    llvm::MemoryLocation::getForArgument(a2, 0, *(uint64_t **)(a1 + 40), (uint64_t)&v148);
    uint64_t v72 = a1;
    unsigned int v73 = (unsigned __int8 *)a2;
    __int16 v74 = 0;
    char v75 = 3;
    goto LABEL_146;
  }
  uint64_t v44 = (llvm::Argument *)((char *)v36 + 40 * *((void *)v17 + 12));
  unint64_t v45 = &v150;
  unint64_t v46 = v147;
  unint64_t v143 = (32 * v41 + 32 * v42) ^ 0xFFFFFFFFFFFFFFE0;
  uint64_t v47 = -32 * v38;
  while (v35 == v44)
  {
    unint64_t v49 = v44;
LABEL_71:
    v39 += 4;
    v47 += 32;
    unint64_t v35 = v49;
    if (v39 == (void **)v43) {
      goto LABEL_5;
    }
  }
  int v48 = (char *)*v39;
  unint64_t v49 = (llvm::Argument *)((char *)v35 + 40);
  if (*(void *)v35 != **v39)
  {
    BOOL v19 = "Undefined behavior: Call argument type mismatches callee parameter type";
    goto LABEL_32;
  }
  int v50 = *(unsigned __int8 *)(*(void *)v35 + 8);
  if (v50 != 15
    || (uint64_t v51 = *(void *)(*((void *)v35 + 3) + 112)) == 0
    || (unsigned int v52 = *((_DWORD *)v35 + 8) + 2, v52 >= *(_DWORD *)(v51 + 8))
    || (uint64_t v64 = *(void *)(v51 + 8 * v52 + 40)) == 0
    || (*(unsigned char *)(v64 + 14) & 8) == 0
    || (uint64_t v65 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF, a2 - 32 * v65 == v43))
  {
LABEL_61:
    if (v50 == 15)
    {
      uint64_t v53 = *((void *)v35 + 3);
      uint64_t v56 = *(void *)(v53 + 112);
      char v54 = (llvm::AttributeList *)(v53 + 112);
      uint64_t v55 = v56;
      if (v56)
      {
        int v57 = *((_DWORD *)v35 + 8);
        if ((v57 + 2) < *(_DWORD *)(v55 + 8))
        {
          uint64_t v58 = *(void *)(v55 + 8 * (v57 + 2) + 40);
          if (v58)
          {
            if ((*(unsigned char *)(v58 + 21) & 2) != 0 && *(unsigned char *)(*(void *)v48 + 8) == 15)
            {
              int v138 = v44;
              unsigned int v59 = v45;
              int v141 = v46;
              ParamStructRetType = (llvm::Type *)llvm::AttributeList::getParamStructRetType(v54, v57);
              unint64_t v61 = (unint64_t)(sub_1CB83544C(*(void *)(a1 + 8), (uint64_t)ParamStructRetType) + 7) >> 3;
              if (v62 == 1) {
                unint64_t v61 = -2;
              }
              uint64_t v148 = v48;
              uint64_t v149 = v61;
              *unsigned int v59 = 0u;
              v59[1] = 0u;
              unsigned __int8 v63 = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), ParamStructRetType, 1);
              unint64_t v136 = v136 & 0xFFFFFFFFFFFF0000 | v63 | 0x100;
              sub_1CC06BEA0(a1, (unsigned __int8 *)a2, (uint64_t)&v148, v63 | 0x100, (unsigned __int8 *)ParamStructRetType, 3);
              unint64_t v46 = v141;
              unint64_t v45 = v59;
              uint64_t v44 = v138;
            }
          }
        }
      }
    }
    goto LABEL_71;
  }
  unint64_t v140 = v45;
  uint64_t v142 = v46;
  uint64_t v137 = v43;
  uint64_t v144 = *(void *)(a2 + 64);
  unsigned int v139 = v44;
  uint64_t v66 = -32 * v65;
  unsigned int v67 = 2;
  while (1)
  {
    if (v144)
    {
      if (v67 < *(_DWORD *)(v144 + 8))
      {
        uint64_t v71 = *(void *)(v144 + 40 + 8 * v67);
        if (v71)
        {
          if ((*(unsigned char *)(v71 + 20) & 0x20) != 0) {
            goto LABEL_87;
          }
        }
      }
    }
    if (llvm::Argument::onlyReadsMemory(v35)) {
      break;
    }
    if (v47 != v66) {
      goto LABEL_85;
    }
LABEL_87:
    ++v67;
    v66 += 32;
    if (v143 == v66)
    {
      int v50 = *(unsigned __int8 *)(*(void *)v35 + 8);
      uint64_t v43 = v137;
      uint64_t v44 = v139;
      unint64_t v45 = v140;
      unint64_t v46 = v142;
      goto LABEL_61;
    }
  }
  if (sub_1CBF5BC2C(a2, v67 - 2, 45)) {
    goto LABEL_87;
  }
  char v68 = sub_1CBF5BC2C(a2, v67 - 2, 44);
  if (v47 == v66 || (v68 & 1) != 0) {
    goto LABEL_87;
  }
LABEL_85:
  uint64_t v69 = *(unsigned __int8 **)(a2 + v66);
  if (*(unsigned char *)(*(void *)v69 + 8) != 15) {
    goto LABEL_87;
  }
  uint64_t v70 = *(void *)(a1 + 16);
  uint64_t v148 = (char *)*v39;
  uint64_t v149 = -1;
  *unint64_t v140 = 0u;
  v140[1] = 0u;
  unsigned int v145 = v69;
  uint64_t v146 = -1;
  *uint64_t v142 = 0u;
  v142[1] = 0u;
  if ((llvm::AAResults::alias(v70, (uint64_t)&v148, (uint64_t)&v145) & 0xFE) != 2) {
    goto LABEL_87;
  }
  BOOL v19 = "Unusual: noalias argument aliases another argument";
LABEL_32:
  uint64_t v148 = (char *)v19;
  LOWORD(v151) = 259;
  unsigned int v145 = (unsigned __int8 *)a2;
  sub_1CC06B5D4((void *)a1, (uint64_t)&v148, &v145);
}

uint64_t sub_1CC06D230(uint64_t a1, const llvm::DataLayout *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 - 11 < 2) {
    return 1;
  }
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1) {
    BOOL v9 = (*(_DWORD *)(*(void *)a1 + 8) & 0xFE) == 18;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if (v4 > 0x14) {
      return 0;
    }
    if (v4 == 17)
    {
      if (*(_UNKNOWN **)(a1 + 32) == &unk_1CFB2E344) {
        int v29 = *(char **)(a1 + 40);
      }
      else {
        int v29 = (char *)(a1 + 24);
      }
    }
    else
    {
      SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
      if (!SplatValue || SplatValue[16] != 17)
      {
        int v14 = *(unsigned __int8 *)(a1 + 16);
        if (v14 == 16)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 32);
          if (v15 >= 0x41)
          {
            int v24 = 0;
            int64_t v25 = (unint64_t)(v15 + 63) >> 6;
            do
            {
              if (v25-- < 1) {
                break;
              }
              unint64_t v27 = *(void *)(*(void *)(a1 + 24) + 8 * v25);
              v24 += __clz(v27);
            }
            while (!v27);
            int v28 = v15 | 0xFFFFFFC0;
            if ((v15 & 0x3F) == 0) {
              int v28 = 0;
            }
            if (v24 + v28 == v15) {
              return 1;
            }
            goto LABEL_19;
          }
          if (!*(void *)(a1 + 24)) {
            return 1;
          }
        }
        else
        {
          if (v14 != 17)
          {
            uint64_t v5 = 1;
            if ((v14 - 18) < 3 || v14 == 13) {
              return v5;
            }
            goto LABEL_19;
          }
          if (sub_1CB844168(a1, 0.0)) {
            return 1;
          }
        }
LABEL_19:
        int v16 = *(_DWORD *)(v8 + 32);
        if (v16)
        {
          unsigned int v17 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v17);
            unsigned int v19 = *((unsigned __int8 *)AggregateElement + 16);
            if (v19 - 11 < 2) {
              break;
            }
            if (v19 < 0x1C || (uint64_t v20 = AggregateElement, !AggregateElement[5])) {
              uint64_t v20 = 0;
            }
            unint64_t v34 = a2;
            uint64_t v35 = 0;
            uint64_t v36 = (uint64_t)v20;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v5 = 1;
            char v39 = 1;
            sub_1CC16089C(AggregateElement, 0, &v34, (uint64_t)&v30);
            unsigned int v21 = v31;
            if (v31)
            {
              if (v31 > 0x40) {
                BOOL v22 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v30) == v21;
              }
              else {
                BOOL v22 = v30 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
              }
              uint64_t v5 = v22;
            }
            if (v33 >= 0x41 && v32)
            {
              MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
              unsigned int v21 = v31;
            }
            if (v21 >= 0x41 && v30) {
              MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
            }
            if (v5) {
              break;
            }
            unsigned int v17 = (llvm::Type *)(v17 + 1);
            if (v16 == v17) {
              return v5;
            }
          }
          return 1;
        }
        return 0;
      }
      if (*((_UNKNOWN **)SplatValue + 4) == &unk_1CFB2E344) {
        int v29 = (char *)*((void *)SplatValue + 5);
      }
      else {
        int v29 = SplatValue + 24;
      }
    }
    if ((v29[28] & 7) != 3) {
      goto LABEL_19;
    }
    return 1;
  }
  if (v4 < 0x1C || (uint64_t v10 = a1, !*(void *)(a1 + 40))) {
    uint64_t v10 = 0;
  }
  unint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v36 = v10;
  uint64_t v37 = a3;
  uint64_t v38 = 0;
  uint64_t v5 = 1;
  char v39 = 1;
  sub_1CC16089C((uint64_t *)a1, 0, &v34, (uint64_t)&v30);
  unsigned int v11 = v31;
  if (v31)
  {
    if (v31 > 0x40) {
      BOOL v12 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v30) == v11;
    }
    else {
      BOOL v12 = v30 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
    }
    uint64_t v5 = v12;
  }
  if (v33 >= 0x41 && v32)
  {
    MEMORY[0x1D25D9CB0](v32, 0x1000C8000313F17);
    unsigned int v11 = v31;
  }
  if (v11 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  return v5;
}

uint64_t llvm::isDereferenceableAndAlignedPointer(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6, uint64_t a7)
{
  BOOL v9 = v13;
  uint64_t v10 = v13;
  uint64_t v11 = 32;
  int v12 = 0;
  uint64_t result = sub_1CC06D628(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&v9, 16);
  if (v10 != v9)
  {
    unsigned int v8 = result;
    free(v10);
    return v8;
  }
  return result;
}

uint64_t sub_1CC06D628(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, int a9)
{
  int v9 = a9;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  unint64_t v114 = a5;
  if (!a9) {
    return 0;
  }
  uint64_t v16 = a2;
  while (1)
  {
    uint64_t v17 = *(void *)(a8 + 8);
    uint64_t v18 = *(unsigned int *)(a8 + 20);
    if (v17 == *(void *)a8)
    {
      if (v18)
      {
        unsigned int v19 = 0;
        uint64_t v20 = 8 * v18;
        unsigned int v21 = *(uint64_t **)(a8 + 8);
        while (*v21 != a1)
        {
          if (*v21 == -2) {
            unsigned int v19 = v21;
          }
          ++v21;
          v20 -= 8;
          if (!v20)
          {
            if (!v19) {
              goto LABEL_11;
            }
            *unsigned int v19 = a1;
            --*(_DWORD *)(a8 + 24);
            goto LABEL_35;
          }
        }
        return 0;
      }
LABEL_11:
      unsigned int v22 = *(_DWORD *)(a8 + 16);
      if (v18 < v22)
      {
        *(_DWORD *)(a8 + 20) = v18 + 1;
        *(void *)(v17 + 8 * v18) = a1;
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(a8 + 16);
    }
    if (3 * v22 <= 4 * ((int)v18 - *(_DWORD *)(a8 + 24)))
    {
      if (v22 >= 0x40) {
        v22 *= 2;
      }
      else {
        unsigned int v22 = 128;
      }
    }
    else if (v22 - v18 >= v22 >> 3)
    {
      goto LABEL_16;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a8, v22);
    unsigned int v22 = *(_DWORD *)(a8 + 16);
    uint64_t v17 = *(void *)(a8 + 8);
LABEL_16:
    unsigned int v23 = v22 - 1;
    unsigned int v24 = (v22 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int64_t v25 = (uint64_t *)(v17 + 8 * v24);
    uint64_t v26 = *v25;
    if (*v25 != -1)
    {
      unint64_t v27 = 0;
      int v28 = 1;
      while (v26 != a1)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v26 == -2;
        }
        if (v29) {
          unint64_t v27 = v25;
        }
        unsigned int v30 = v24 + v28++;
        unsigned int v24 = v30 & v23;
        int64_t v25 = (uint64_t *)(v17 + 8 * (v30 & v23));
        uint64_t v26 = *v25;
        if (*v25 == -1) {
          goto LABEL_28;
        }
      }
      return 0;
    }
    unint64_t v27 = 0;
LABEL_28:
    if (v27) {
      unsigned int v31 = v27;
    }
    else {
      unsigned int v31 = v25;
    }
    if (*v31 == a1) {
      return 0;
    }
    if (*v31 == -2) {
      --*(_DWORD *)(a8 + 24);
    }
    else {
      ++*(_DWORD *)(a8 + 20);
    }
    *unsigned int v31 = a1;
LABEL_35:
    --v9;
    int v32 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v32 == 85)
    {
      unsigned int v33 = v114;
      if (!sub_1CC06D628(*(void *)(a1 - 64), v16, a3, a4, v114, a6, a7, a8, v9)) {
        return 0;
      }
      a1 = *(void *)(a1 - 32);
      goto LABEL_47;
    }
    if (v32 != 77 && (v32 != 5 || *(_WORD *)(a1 + 18) != 49)) {
      break;
    }
    int v34 = *(_DWORD *)(a1 + 20);
    uint64_t v35 = (v34 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v34 & 0x7FFFFFF));
    uint64_t v36 = *v35;
    if (*(unsigned char *)(*(void *)v36 + 8) != 15) {
      break;
    }
    unsigned int v33 = v114;
    a1 = v36;
LABEL_47:
    unint64_t v114 = v33;
    if (!v9) {
      return 0;
    }
  }
  unsigned __int8 v115 = a2;
  *(_WORD *)uint64_t v113 = 0;
  unsigned int v39 = *(_DWORD *)(a3 + 8);
  uint64_t PointerDereferenceableBytes = llvm::Value::getPointerDereferenceableBytes((uint64_t ***)a1, (const llvm::DataLayout *)a4, &v113[1], v113);
  if (v39 > 0x40) {
    operator new[]();
  }
  if (v39) {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
  }
  else {
    unint64_t v42 = 0;
  }
  unint64_t v43 = v42 & PointerDereferenceableBytes;
  if ((v42 & PointerDereferenceableBytes) != 0)
  {
    int v44 = v43 > *(void *)a3;
    if (v43 < *(void *)a3) {
      int v44 = -1;
    }
    if ((v44 & 0x80000000) == 0 && !v113[0])
    {
      if (!v113[1]) {
        goto LABEL_69;
      }
      unint64_t v45 = v114;
      if (!v114 || !v114[5])
      {
        if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (unint64_t v45 = (uint64_t *)a1, !*(void *)(a1 + 40))) {
          unint64_t v45 = 0;
        }
      }
      __int16 v117 = (void *)a4;
      uint64_t v118 = 0;
      int v119 = v45;
      __int16 v120 = a6;
      uint64_t v121 = 0;
      char v122 = 1;
      if (sub_1CC1620B8(a1, 0, (uint64_t)&v117))
      {
LABEL_69:
        int v47 = sub_1CB83544C(a4, *(void *)a1);
        if (v46 == 1) {
        LODWORD(v118) = (v47 + 7) & 0xFFFFFFF8;
        }
        if (v118 >= 0x41) {
          operator new[]();
        }
        __int16 v117 = 0;
        uint64_t v37 = sub_1CC070500((llvm::Value *)a1, (uint64_t *)&v117, v115, (const llvm::DataLayout *)a4);
        if (v118 < 0x41) {
          return v37;
        }
        unint64_t v48 = (unint64_t)v117;
        if (!v117) {
          return v37;
        }
LABEL_174:
        MEMORY[0x1D25D9CB0](v48, 0x1000C8000313F17);
        return v37;
      }
    }
  }
  if (v114)
  {
    LODWORD(v110) = 0;
    *(void *)__int16 v111 = 0;
    uint64_t v112 = 0;
    LODWORD(v107) = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    uint64_t v116 = 0x4A0000004CLL;
    __int16 v117 = &v114;
    uint64_t v118 = (uint64_t)&v110;
    int v119 = &v107;
    __int16 v120 = &v115;
    uint64_t v121 = a3;
    llvm::getKnowledgeForValue(a1, &v116, 2, 0, (uint64_t (*)(uint64_t, long long *, uint64_t, uint64_t))sub_1CC07072C, (uint64_t)&v117, (uint64_t)v106);
    if (v106[0]) {
      return 1;
    }
  }
  int v49 = *(unsigned __int8 *)(a1 + 16);
  if (v49 != 62 && (v49 != 5 || *(_WORD *)(a1 + 18) != 34))
  {
    if (sub_1CC070820(a1))
    {
      uint64_t DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a1);
    }
    else
    {
      unsigned int v52 = *(unsigned __int8 *)(a1 + 16);
      if (v52 == 78)
      {
LABEL_92:
        int v53 = *(_DWORD *)(a1 + 20);
        if ((v53 & 0x40000000) != 0) {
          char v54 = *(uint64_t **)(a1 - 8);
        }
        else {
          char v54 = (uint64_t *)(a1 - 32 * (v53 & 0x7FFFFFF));
        }
        uint64_t DerivedPtr = *v54;
        return sub_1CC06D628(DerivedPtr, v115, a3, a4, v114, a6, a7, a8, v9);
      }
      if (v52 == 5)
      {
        if (*(_WORD *)(a1 + 18) == 50) {
          goto LABEL_92;
        }
        return 0;
      }
      if (v52 < 0x1C) {
        return 0;
      }
      uint64_t v37 = 0;
      unsigned int v79 = v52 - 33;
      if (v79 > 0x33 || ((1 << v79) & 0x8000000000041) == 0) {
        return v37;
      }
      uint64_t DerivedPtr = llvm::getArgumentAliasingToReturnedPointer(a1, 1);
      if (!DerivedPtr)
      {
        unint64_t v110 = 0;
        if (!llvm::getObjectSize((llvm::Value *)a1, &v110, a4, a7, 0x10000, 0, v81)) {
          return 0;
        }
        unsigned int v82 = *(_DWORD *)(a3 + 8);
        if (v82 > 0x40) {
          operator new[]();
        }
        unint64_t v83 = v82 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v82 : 0;
        if ((v83 & v110) == 0 || (v83 & v110) < *(void *)a3) {
          return 0;
        }
        uint64_t v84 = v114;
        if (!v114 || !v114[5])
        {
          if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (uint64_t v84 = (uint64_t *)a1, !*(void *)(a1 + 40))) {
            uint64_t v84 = 0;
          }
        }
        __int16 v117 = (void *)a4;
        uint64_t v118 = 0;
        int v119 = v84;
        __int16 v120 = a6;
        uint64_t v121 = 0;
        char v122 = 1;
        if (!sub_1CC1620B8(a1, 0, (uint64_t)&v117) || llvm::Value::canBeFreed((llvm::Value *)a1)) {
          return 0;
        }
        int v95 = sub_1CB83544C(a4, *(void *)a1);
        if (v94 == 1) {
        LODWORD(v118) = (v95 + 7) & 0xFFFFFFF8;
        }
        if (v118 >= 0x41) {
          operator new[]();
        }
        __int16 v117 = 0;
        uint64_t v37 = sub_1CC070500((llvm::Value *)a1, (uint64_t *)&v117, v115, (const llvm::DataLayout *)a4);
        if (v118 >= 0x41 && v117) {
          MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
        }
        return v37;
      }
    }
    return sub_1CC06D628(DerivedPtr, v115, a3, a4, v114, a6, a7, a8, v9);
  }
  int v50 = *(_DWORD *)(a1 + 20);
  if ((v50 & 0x40000000) != 0) {
    uint64_t v51 = *(uint64_t **)(a1 - 8);
  }
  else {
    uint64_t v51 = (uint64_t *)(a1 - 32 * (v50 & 0x7FFFFFF));
  }
  unsigned int v55 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v55 & 0xFE) == 0x12) {
    unsigned int v55 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  if (v55 < 0x100) {
    goto LABEL_106;
  }
  unsigned int v56 = v55 >> 8;
  uint64_t v57 = *(unsigned int *)(a4 + 240);
  uint64_t v58 = *(void *)(a4 + 232);
  if (v57)
  {
    uint64_t v58 = *(void *)(a4 + 232);
    unint64_t v59 = *(unsigned int *)(a4 + 240);
    do
    {
      unint64_t v60 = v59 >> 1;
      uint64_t v61 = v58 + 16 * (v59 >> 1);
      unsigned int v62 = *(_DWORD *)(v61 + 8);
      uint64_t v63 = v61 + 16;
      v59 += ~(v59 >> 1);
      if (v62 < v56) {
        uint64_t v58 = v63;
      }
      else {
        unint64_t v59 = v60;
      }
    }
    while (v59);
  }
  if (v58 == *(void *)(a4 + 232) + 16 * v57 || *(_DWORD *)(v58 + 8) != v56) {
LABEL_106:
  }
    uint64_t v58 = *(void *)(a4 + 232);
  uint64_t v104 = *v51;
  v111[0] = *(_DWORD *)(v58 + 12);
  if (v111[0] > 0x40) {
    operator new[]();
  }
  unint64_t v110 = 0;
  if ((v50 & 0x40000000) != 0)
  {
    uint64_t v65 = *(void *)(a1 - 8);
    uint64_t v64 = v50 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v64 = v50 & 0x7FFFFFF;
    uint64_t v65 = a1 - 32 * v64;
  }
  __int16 v117 = &v119;
  uint64_t v118 = 0x600000000;
  unint64_t v66 = 32 * v64 - 32;
  if (v66 >= 0xC1) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v67 = (llvm::Constant **)&v119;
  if (v64 != 1)
  {
    char v68 = (uint64_t **)(v65 + 32);
    uint64_t v69 = &v119;
    uint64_t v70 = 32 * v64 - 32;
    do
    {
      uint64_t v71 = *v68;
      v68 += 4;
      *v69++ = v71;
      v70 -= 32;
    }
    while (v70);
    unsigned int v67 = (llvm::Constant **)v117;
  }
  BOOL v72 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
  LODWORD(v118) = v66 >> 5;
  uint64_t v73 = 64;
  if (v72) {
    uint64_t v73 = 24;
  }
  int v74 = llvm::GEPOperator::accumulateConstantOffset(*(void *)(a1 + v73), v67, (v66 >> 5), (llvm::DataLayout *)a4, (llvm::APInt *)&v110, 0, v41);
  if (v117 != &v119) {
    free(v117);
  }
  unsigned int v75 = v111[0];
  if (!v74) {
    goto LABEL_171;
  }
  uint64_t v76 = (unint64_t *)(v110 + 8 * ((v111[0] - 1) >> 6));
  if (v111[0] < 0x41) {
    uint64_t v76 = &v110;
  }
  if ((*v76 >> (LOBYTE(v111[0]) - 1))) {
    goto LABEL_171;
  }
  LODWORD(v108) = v111[0];
  if (v111[0] > 0x40) {
    operator new[]();
  }
  unint64_t v77 = v111[0] ? 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v111[0]) : 0;
  uint64_t v107 = v77 & (1 << v115);
  llvm::APInt::urem((llvm::APInt *)&v110, (const llvm::APInt *)&v107, (uint64_t)&v117);
  if (v118 > 0x40)
  {
    int v85 = 0;
    int64_t v86 = ((unint64_t)v118 + 63) >> 6;
    do
    {
      if (v86-- < 1) {
        break;
      }
      unint64_t v88 = *((void *)v117 + v86);
      v85 += __clz(v88);
    }
    while (!v88);
    int v89 = v118 | 0xFFFFFFC0;
    if ((v118 & 0x3F) == 0) {
      int v89 = 0;
    }
    BOOL v78 = v85 + v89 == v118;
    if (v117) {
      MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
    }
  }
  else
  {
    BOOL v78 = v117 == 0;
  }
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  unsigned int v75 = v111[0];
  if (v78)
  {
    uint64_t v90 = v115;
    llvm::APInt::sextOrTrunc(a3, v111[0], (uint64_t)&v107);
    int v91 = v108;
    if (v108 >= 0x41)
    {
      uint64_t v96 = 0;
      __int16 v97 = (unint64_t *)v107;
      __int16 v98 = (uint64_t *)v110;
      unint64_t v99 = ((unint64_t)v108 + 63) >> 6;
      unint64_t v100 = v99;
      do
      {
        uint64_t v101 = *v98++;
        unint64_t v102 = v101 + *v97;
        BOOL v103 = v102 + 1 <= *v97;
        if (v96)
        {
          ++v102;
          uint64_t v96 = v103;
        }
        else
        {
          uint64_t v96 = v102 < *v97;
        }
        *v97++ = v102;
        --v100;
      }
      while (v100);
      *(void *)(v107 + 8 * (v99 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v91;
      int v91 = v108;
      __int16 v93 = (void *)v107;
    }
    else
    {
      unint64_t v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v108;
      if (!v108) {
        unint64_t v92 = 0;
      }
      __int16 v93 = (void *)(v92 & (v107 + v110));
      uint64_t v107 = (uint64_t)v93;
    }
    LODWORD(v118) = v91;
    __int16 v117 = v93;
    LODWORD(v108) = 0;
    uint64_t v37 = sub_1CC06D628(v104, v90, &v117, a4, v114, a6, a7, a8, v9);
    if (v118 >= 0x41 && v117) {
      MEMORY[0x1D25D9CB0](v117, 0x1000C8000313F17);
    }
    if (v108 >= 0x41 && v107) {
      MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
    }
    unsigned int v75 = v111[0];
  }
  else
  {
LABEL_171:
    uint64_t v37 = 0;
  }
  if (v75 >= 0x41)
  {
    unint64_t v48 = v110;
    if (v110) {
      goto LABEL_174;
    }
  }
  return v37;
}

uint64_t llvm::isDereferenceableAndAlignedPointer(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned int v14 = *(unsigned __int8 *)(a2 + 8);
  if (v14 > 0x11) {
    goto LABEL_26;
  }
  if (((1 << v14) & 0xAC7F) != 0) {
    goto LABEL_3;
  }
  if (((1 << v14) & 0x30000) == 0)
  {
LABEL_26:
    if ((v14 & 0xFE) != 0x12 && v14 != 21) {
      return 0;
    }
  }
  if (!llvm::Type::isSizedDerivedType(a2, 0)) {
    return 0;
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + 8);
LABEL_3:
  if (v14 == 19) {
    return 0;
  }
  unsigned int v15 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v15 & 0xFE) == 0x12) {
    unsigned int v15 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  if (v15 < 0x100) {
    goto LABEL_15;
  }
  unsigned int v16 = v15 >> 8;
  uint64_t v17 = *(unsigned int *)(a4 + 240);
  uint64_t v18 = *(void *)(a4 + 232);
  if (v17)
  {
    uint64_t v18 = *(void *)(a4 + 232);
    unint64_t v19 = *(unsigned int *)(a4 + 240);
    do
    {
      unint64_t v20 = v19 >> 1;
      uint64_t v21 = v18 + 16 * (v19 >> 1);
      unsigned int v22 = *(_DWORD *)(v21 + 8);
      uint64_t v23 = v21 + 16;
      v19 += ~(v19 >> 1);
      if (v22 < v16) {
        uint64_t v18 = v23;
      }
      else {
        unint64_t v19 = v20;
      }
    }
    while (v19);
  }
  if (v18 == *(void *)(a4 + 232) + 16 * v17 || *(_DWORD *)(v18 + 8) != v16) {
LABEL_15:
  }
    uint64_t v18 = *(void *)(a4 + 232);
  unsigned int v24 = *(_DWORD *)(v18 + 4);
  unint64_t v26 = sub_1CB83544C(a4, a2) + 7;
  if (v25 == 1) {
  unsigned int v32 = v24;
  }
  if (v24 > 0x40) {
    operator new[]();
  }
  if (v24) {
    unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
  }
  else {
    unint64_t v27 = 0;
  }
  unint64_t v31 = v27 & (v26 >> 3);
  unsigned int v33 = v37;
  int v34 = v37;
  uint64_t v35 = 32;
  int v36 = 0;
  uint64_t v28 = sub_1CC06D628(a1, a3, (uint64_t)&v31, a4, a5, a6, a7, (uint64_t)&v33, 16);
  if (v34 != v33) {
    free(v34);
  }
  if (v32 >= 0x41 && v31) {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
  }
  return v28;
}

uint64_t llvm::isDereferenceablePointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned __int8 *a5, uint64_t a6)
{
  return llvm::isDereferenceableAndAlignedPointer(a1, a2, 0, a3, a4, a5, a6);
}

uint64_t llvm::isDereferenceableAndAlignedInLoop(llvm *this, llvm::LoadInst *a2, llvm::Loop *a3, llvm::ScalarEvolution *a4, llvm::DominatorTree *a5)
{
  uint64_t v9 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
  uint64_t v10 = v9 + 272;
  unint64_t v11 = *((void *)this - 4);
  unsigned int v12 = *(_DWORD *)(*(void *)v11 + 8);
  if ((v12 & 0xFE) == 0x12) {
    unsigned int v12 = *(_DWORD *)(**(void **)(*(void *)v11 + 16) + 8);
  }
  uint64_t v13 = *(void *)(v9 + 504);
  if (v12 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v14 = v12 >> 8;
  unint64_t v15 = *(unsigned int *)(v9 + 512);
  uint64_t v16 = *(void *)(v9 + 504);
  if (v15)
  {
    uint64_t v16 = v13;
    unint64_t v17 = v15;
    do
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = v16 + 16 * (v17 >> 1);
      unsigned int v20 = *(_DWORD *)(v19 + 8);
      uint64_t v21 = v19 + 16;
      v17 += ~(v17 >> 1);
      if (v20 < v14) {
        uint64_t v16 = v21;
      }
      else {
        unint64_t v17 = v18;
      }
    }
    while (v17);
  }
  if (v16 == v13 + 16 * v15 || *(_DWORD *)(v16 + 8) != v14) {
LABEL_12:
  }
    uint64_t v16 = v13;
  unsigned int v22 = *(_DWORD *)(v16 + 12);
  unint64_t v23 = (unint64_t)(sub_1CB83544C(v10, *(void *)this) + 7) >> 3;
  unsigned int v56 = v22;
  if (v22 > 0x40) {
    operator new[]();
  }
  unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  if (!v22) {
    unint64_t v24 = 0;
  }
  unint64_t v25 = v24 & v23;
  unsigned int v55 = (uint64_t *)(v24 & v23);
  char v26 = __clz(1 << ((unint64_t)*((unsigned __int16 *)this + 9) >> 1));
  uint64_t v27 = **((void **)a2 + 4);
  uint64_t v28 = v27 + 40;
  for (uint64_t i = *(void *)(v27 + 48); i != v28; uint64_t i = *(void *)(i + 8))
  {
    unsigned int v30 = (uint64_t *)(i - 24);
    if (i) {
      uint64_t v31 = i - 24;
    }
    else {
      uint64_t v31 = 0;
    }
    if (*(unsigned char *)(v31 + 16) != 83) {
      goto LABEL_24;
    }
  }
  unsigned int v30 = 0;
LABEL_24:
  unsigned __int8 v32 = v26 ^ 0x3F;
  if (llvm::Loop::isLoopInvariant((uint64_t)a2, v11))
  {
    uint64_t v57 = v61;
    uint64_t v58 = v61;
    uint64_t v59 = 32;
    int v60 = 0;
    uint64_t v33 = sub_1CC06D628(v11, v32, (uint64_t)&v55, v10, v30, (unsigned __int8 *)a4, 0, (uint64_t)&v57, 16);
    if (v58 != v57) {
      free(v58);
    }
    goto LABEL_58;
  }
  uint64_t v34 = *((void *)a3 + 13);
  unsigned int v35 = *((_DWORD *)a3 + 30);
  if (!v35) {
    goto LABEL_33;
  }
  unsigned int v36 = (v35 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  uint64_t v37 = v34 + 48 * v36;
  uint64_t v38 = *(void *)(v37 + 24);
  if (v38 != v11)
  {
    int v39 = 1;
    while (v38 != -4096)
    {
      unsigned int v40 = v36 + v39++;
      unsigned int v36 = v40 & (v35 - 1);
      uint64_t v37 = v34 + 48 * v36;
      uint64_t v38 = *(void *)(v37 + 24);
      if (v38 == v11) {
        goto LABEL_34;
      }
    }
LABEL_33:
    uint64_t v37 = v34 + 48 * v35;
  }
LABEL_34:
  if (v37 == v34 + 48 * v35 || (uint64_t SCEVIter = *(void *)(v37 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter(a3, v11);
  }
  if (SCEVIter) {
    BOOL v42 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  }
  else {
    BOOL v42 = 0;
  }
  if (!v42 || *(llvm::LoadInst **)(SCEVIter + 48) != a2 || *(void *)(SCEVIter + 40) != 2) {
    goto LABEL_57;
  }
  uint64_t v43 = *(void *)(*(void *)(SCEVIter + 32) + 8);
  if (!v43 || *(_WORD *)(v43 + 24) != 0) {
    goto LABEL_57;
  }
  uint64_t v45 = *(void *)(v43 + 32);
  uint64_t v46 = *(unsigned int *)(v45 + 32);
  if (v46 > 0x40)
  {
    if (memcmp(*(const void **)(v45 + 24), (const void *)v25, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_57:
      uint64_t v33 = 0;
      goto LABEL_58;
    }
  }
  else if (*(void *)(v45 + 24) != v25)
  {
    goto LABEL_57;
  }
  unsigned int SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a3, a2);
  if (!SmallConstantMaxTripCount) {
    goto LABEL_57;
  }
  unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  if (!v22) {
    unint64_t v48 = 0;
  }
  unsigned int v54 = v22;
  unint64_t v53 = (v25 * SmallConstantMaxTripCount) & v48;
  uint64_t v50 = **(void **)(SCEVIter + 32);
  if (v50) {
    BOOL v51 = *(unsigned __int16 *)(v50 + 24) == 14;
  }
  else {
    BOOL v51 = 0;
  }
  if (v51 && (uint64_t v52 = *(void *)(v50 - 8), !llvm::APInt::urem(&v55, 1 << v32)))
  {
    uint64_t v57 = v61;
    uint64_t v58 = v61;
    uint64_t v59 = 32;
    int v60 = 0;
    uint64_t v33 = sub_1CC06D628(v52, v32, (uint64_t)&v53, v10, v30, (unsigned __int8 *)a4, 0, (uint64_t)&v57, 16);
    if (v58 != v57) {
      free(v58);
    }
    unsigned int v22 = v54;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (v22 >= 0x41 && v53) {
    MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
  }
LABEL_58:
  if (v56 >= 0x41 && v55) {
    MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
  }
  return v33;
}

BOOL llvm::isSafeToLoadUnconditionally(llvm::Value *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6, uint64_t a7)
{
  BOOL v7 = a5;
  int v44 = v48;
  uint64_t v45 = v48;
  if (!a6) {
    a5 = 0;
  }
  uint64_t v46 = 32;
  int v47 = 0;
  char v12 = sub_1CC06D628((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)&v44, 16);
  if (v45 == v44)
  {
    if (v12) {
      return 1;
    }
  }
  else
  {
    char v14 = v12;
    free(v45);
    if (v14) {
      return 1;
    }
  }
  BOOL result = 0;
  if (v7 && *(_DWORD *)(a3 + 8) <= 0x40u)
  {
    unint64_t v15 = *(void *)a3;
    uint64_t v16 = v7 + 3;
    unint64_t v17 = *(uint64_t **)(v7[5] + 48);
    unint64_t v18 = llvm::Value::stripPointerCasts(a1);
    if (v7 + 3 != v17)
    {
      uint64_t v19 = (unsigned __int8 *)v18;
      do
      {
        uint64_t v16 = (uint64_t *)*v16;
        unsigned int v20 = v16 - 3;
        if (v16) {
          uint64_t v21 = (uint64_t)(v16 - 3);
        }
        else {
          uint64_t v21 = 0;
        }
        if (*(unsigned char *)(v21 + 16) == 84)
        {
          uint64_t v22 = *(void *)(v21 + 64);
          if (!v22 || (*(unsigned char *)(v22 + 17) & 0x30) == 0)
          {
            int v23 = *(_DWORD *)(v21 + 20);
            if (v23 < 0
              && (uint64_t v34 = v21 - 32 * (v23 & 0x7FFFFFF), v37 = *(void *)(v34 - 8), v35 = v34 - 8, (v36 = v37) != 0))
            {
              uint64_t v38 = -v36;
              while (1)
              {
                unsigned int v39 = *(_DWORD *)(*(void *)(v35 + v38) + 8);
                BOOL v40 = v39 > 7;
                int v41 = (1 << v39) & 0x83;
                if (v40 || v41 == 0) {
                  break;
                }
                v38 += 16;
                if (!v38) {
                  goto LABEL_18;
                }
              }
            }
            else
            {
LABEL_18:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) != 0
                || (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) != 0)
              {
                goto LABEL_21;
              }
            }
            BOOL result = sub_1CBF63B28(v21);
            if (!result) {
              return result;
            }
          }
        }
LABEL_21:
        int v24 = *(unsigned __int8 *)(v21 + 16);
        if (v16 && v24 == 60)
        {
          unsigned int v25 = *(unsigned __int16 *)(v21 + 18);
          if (v25) {
            continue;
          }
        }
        else
        {
          if (v24 == 61) {
            uint64_t v26 = v21;
          }
          else {
            uint64_t v26 = 0;
          }
          if (!v16) {
            continue;
          }
          if (v24 != 61) {
            continue;
          }
          unsigned int v25 = *(unsigned __int16 *)(v26 + 18);
          if (v25) {
            continue;
          }
          unsigned int v20 = *(uint64_t **)(v26 - 64);
        }
        if (a2 <= (__clz(1 << (v25 >> 1)) ^ 0x3F))
        {
          uint64_t v27 = *v20;
          uint64_t v28 = *(llvm::Value **)(v21 - 32);
          if (v28 == (llvm::Value *)v19)
          {
            uint64_t v29 = sub_1CB83544C(a4, v27);
            if (v30 == 1)
            {
              uint64_t v43 = v29;
              uint64_t v29 = v43;
            }
            if (v15 <= (unint64_t)(v29 + 7) >> 3) {
              return 1;
            }
          }
          uint64_t v31 = (unsigned __int8 *)llvm::Value::stripPointerCasts(v28);
          if (sub_1CC06EFB4(v31, v19))
          {
            uint64_t v33 = sub_1CB83544C(a4, v27);
            if (v32 == 1) {
            if (v15 <= (unint64_t)(v33 + 7) >> 3)
            }
              return 1;
          }
        }
      }
      while (v16 != v17);
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC06EFB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1;
  }
  unsigned int v2 = a1[16];
  BOOL v3 = v2 < 0x1C || v2 - 41 >= 0x12;
  result = (!v3 || (v2 - 66 < 0xD ? (BOOL v4 = v2 > 0x1B) : (BOOL v4 = 0), v4 || v2 == 83 || v2 == 62))
        && a2
        && a2[16] >= 0x1Cu
        && (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)a1, (const llvm::Instruction *)a2) & 1) != 0;
  return result;
}

BOOL llvm::isSafeToLoadUnconditionally(llvm::Value *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned int v13 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v13 & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  if (v13 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v14 = v13 >> 8;
  uint64_t v15 = *(unsigned int *)(a4 + 240);
  uint64_t v16 = *(void *)(a4 + 232);
  if (v15)
  {
    uint64_t v16 = *(void *)(a4 + 232);
    unint64_t v17 = *(unsigned int *)(a4 + 240);
    do
    {
      unint64_t v18 = v17 >> 1;
      uint64_t v19 = v16 + 16 * (v17 >> 1);
      unsigned int v20 = *(_DWORD *)(v19 + 8);
      uint64_t v21 = v19 + 16;
      v17 += ~(v17 >> 1);
      if (v20 < v14) {
        uint64_t v16 = v21;
      }
      else {
        unint64_t v17 = v18;
      }
    }
    while (v17);
  }
  if (v16 == *(void *)(a4 + 232) + 16 * v15 || *(_DWORD *)(v16 + 8) != v14) {
LABEL_12:
  }
    uint64_t v16 = *(void *)(a4 + 232);
  unsigned int v22 = *(_DWORD *)(v16 + 12);
  unint64_t v24 = sub_1CB83544C(a4, a2) + 7;
  if (v23 == 1)
  {
    unint64_t v29 = v24;
    unint64_t v24 = v29;
  }
  unint64_t v25 = v24 >> 3;
  unsigned int v31 = v22;
  if (v22 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30);
  }
  unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
  if (!v22) {
    unint64_t v26 = 0;
  }
  unint64_t v30 = v26 & v25;
  BOOL isSafeToLoadUnconditionally = llvm::isSafeToLoadUnconditionally(a1, a3, (uint64_t)&v30, a4, a5, a6, a7);
  if (v31 >= 0x41 && v30) {
    MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
  }
  return isSafeToLoadUnconditionally;
}

llvm::UndefValue *llvm::findAvailablePtrLoadStore(uint64_t **a1, llvm::Type *a2, char a3, uint64_t a4, uint64_t **a5, int a6, llvm::AAResults *a7, unsigned char *a8, _DWORD *a9)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(*(void *)(a4 + 56) + 40);
  uint64_t v15 = llvm::Value::stripPointerCasts((llvm::Value *)*a1);
  uint64_t v16 = *a5;
  if (*a5 != *(uint64_t **)(a4 + 48))
  {
    unint64_t v17 = (unsigned __int8 *)v15;
    uint64_t v99 = v14;
    BOOL v103 = (llvm::DataLayout *)(v14 + 272);
    if (a6) {
      int v18 = a6;
    }
    else {
      int v18 = -1;
    }
    __int16 v98 = a8;
    char v97 = a3;
    while (1)
    {
      uint64_t v19 = *v16;
      *a5 = (uint64_t *)*v16;
      if (v19) {
        uint64_t v20 = v19 - 24;
      }
      else {
        uint64_t v20 = 0;
      }
      if (sub_1CBF63B28(v20) || sub_1CC27D470(v20)) {
        goto LABEL_116;
      }
      uint64_t v21 = (uint64_t *)(*a5)[1];
      *a5 = v21;
      if (a9) {
        ++*a9;
      }
      if (!v18) {
        return 0;
      }
      *a5 = (uint64_t *)*v21;
      BOOL result = sub_1CC06FC8C(v20, v17, a2, a3, v103, a8);
      if (result) {
        return result;
      }
      --v18;
      int v23 = *(unsigned __int8 *)(v20 + 16);
      unint64_t v24 = v23 == 61 ? (const llvm::StoreInst *)v20 : 0;
      if (v19 && v23 == 61) {
        break;
      }
      uint64_t v65 = (v23 - 33);
      long long v66 = xmmword_1CFAC3060;
      if (v65 <= 0x37)
      {
        if (((1 << v65) & 0x8000000000041) != 0)
        {
          uint64_t v67 = *(void *)(v20 + 64);
          if (v67 && (*(unsigned char *)(v67 + 17) & 0x30) != 0) {
            goto LABEL_116;
          }
          int v68 = *(_DWORD *)(v20 + 20);
          if (v68 < 0
            && (uint64_t v89 = v20 - 32 * (v68 & 0x7FFFFFF), v92 = *(void *)(v89 - 8), v90 = v89 - 8, (v91 = v92) != 0))
          {
            uint64_t v93 = -v91;
            while (1)
            {
              unsigned int v94 = *(_DWORD *)(*(void *)(v90 + v93) + 8);
              BOOL v86 = v94 > 7;
              int v95 = (1 << v94) & 0x83;
              BOOL v96 = v86 || v95 == 0;
              long long v66 = xmmword_1CFAC3060;
              if (v96) {
                break;
              }
              v93 += 16;
              if (!v93) {
                goto LABEL_75;
              }
            }
          }
          else
          {
LABEL_75:
            if (llvm::CallBase::hasFnAttrOnCalledFunction(v20, 45)) {
              goto LABEL_116;
            }
            char hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v20, 44);
            long long v66 = xmmword_1CFAC3060;
            if (hasFnAttrOnCalledFunction) {
              goto LABEL_116;
            }
          }
        }
        else if (v65 == 27)
        {
          if ((*(_WORD *)(v20 + 18) & 0x301) == 0) {
            goto LABEL_116;
          }
        }
        else if (((1 << v65) & 0x808001D0000010) == 0)
        {
          goto LABEL_116;
        }
        if (!a7) {
          goto LABEL_152;
        }
        long long v70 = *((_OWORD *)a1 + 1);
        long long v104 = *(_OWORD *)a1;
        long long v105 = v70;
        long long v106 = *((_OWORD *)a1 + 2);
        char v107 = 1;
        uint64_t v120 = 1;
        uint64_t v71 = 8;
        do
        {
          BOOL v72 = (char *)&v120 + v71;
          *(_OWORD *)BOOL v72 = v66;
          *((_OWORD *)v72 + 1) = v66;
          v71 += 40;
        }
        while (v72 + 40 != (char *)v124);
        v124[0] = &v128;
        v124[1] = 0;
        int v125 = v127;
        uint64_t v126 = 0x400000000;
        int v128 = &unk_1F2600DB8;
        uint64_t v73 = 504;
        uint64_t v129 = 1;
        do
        {
          *(uint64_t *)((char *)&v120 + v73) = -4096;
          v73 += 16;
        }
        while (v73 != 632);
        char ModRefInfo = llvm::AAResults::getModRefInfo((uint64_t)a7, (llvm::Instruction *)v20, &v104, (uint64_t)&v120);
        if ((v129 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v130, 8);
        }
        if (v125 != v127) {
          free(v125);
        }
        if (v120)
        {
          if ((ModRefInfo & 2) != 0) {
            goto LABEL_152;
          }
        }
        else
        {
          MEMORY[0x1D25D9CD0](v121, 8);
          if ((ModRefInfo & 2) != 0) {
            goto LABEL_152;
          }
        }
      }
LABEL_116:
      uint64_t v16 = *a5;
      if (*a5 == *(uint64_t **)(a4 + 48)) {
        return 0;
      }
    }
    unint64_t v25 = llvm::Value::stripPointerCasts(*((llvm::Value **)v24 - 4));
    int v27 = v17[16];
    if (v27 == 59 || v27 == 3)
    {
      int v28 = *((unsigned __int8 *)v25 + 16);
      BOOL v29 = v28 == 59 || v28 == 3;
      if (v29 && v17 != (unsigned __int8 *)v25) {
        goto LABEL_116;
      }
    }
    if (a7)
    {
      if ((llvm::AAResults::getModRefInfo(a7, v24, (const llvm::MemoryLocation *)a1) & 2) != 0) {
        goto LABEL_152;
      }
      goto LABEL_116;
    }
    unsigned int v31 = (llvm::GlobalValue *)*a1;
    uint64_t v32 = **a1;
    unsigned int v33 = *(_DWORD *)(v32 + 8);
    if ((v33 & 0xFE) == 0x12) {
      unsigned int v33 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
    }
    if (v33 < 0x100) {
      goto LABEL_42;
    }
    unsigned int v34 = v33 >> 8;
    uint64_t v35 = *(unsigned int *)(v99 + 512);
    uint64_t v36 = *(void *)(v99 + 504);
    if (v35)
    {
      uint64_t v36 = *(void *)(v99 + 504);
      unint64_t v37 = *(unsigned int *)(v99 + 512);
      do
      {
        unint64_t v38 = v37 >> 1;
        uint64_t v39 = v36 + 16 * (v37 >> 1);
        unsigned int v40 = *(_DWORD *)(v39 + 8);
        uint64_t v41 = v39 + 16;
        v37 += ~(v37 >> 1);
        if (v40 < v34) {
          uint64_t v36 = v41;
        }
        else {
          unint64_t v37 = v38;
        }
      }
      while (v37);
    }
    if (v36 == *(void *)(v99 + 504) + 16 * v35 || *(_DWORD *)(v36 + 8) != v34) {
LABEL_42:
    }
      uint64_t v36 = *(void *)(v99 + 504);
    BOOL v42 = (llvm::GlobalValue *)*((void *)v24 - 4);
    uint64_t v43 = **((void **)v24 - 8);
    unsigned int v119 = *(_DWORD *)(v36 + 12);
    if (v119 > 0x40) {
      operator new[]();
    }
    unint64_t __src = 0;
    unsigned int v44 = *(_DWORD *)(*(void *)v42 + 8);
    if ((v44 & 0xFE) == 0x12) {
      unsigned int v44 = *(_DWORD *)(**(void **)(*(void *)v42 + 16) + 8);
    }
    if (v44 < 0x100) {
      goto LABEL_55;
    }
    unsigned int v45 = v44 >> 8;
    uint64_t v46 = *(unsigned int *)(v99 + 512);
    uint64_t v47 = *(void *)(v99 + 504);
    if (v46)
    {
      uint64_t v47 = *(void *)(v99 + 504);
      unint64_t v48 = *(unsigned int *)(v99 + 512);
      do
      {
        unint64_t v49 = v48 >> 1;
        uint64_t v50 = v47 + 16 * (v48 >> 1);
        unsigned int v51 = *(_DWORD *)(v50 + 8);
        uint64_t v52 = v50 + 16;
        v48 += ~(v48 >> 1);
        if (v51 < v45) {
          uint64_t v47 = v52;
        }
        else {
          unint64_t v48 = v49;
        }
      }
      while (v48);
    }
    if (v47 == *(void *)(v99 + 504) + 16 * v46 || *(_DWORD *)(v47 + 8) != v45) {
LABEL_55:
    }
      uint64_t v47 = *(void *)(v99 + 504);
    unsigned int v117 = *(_DWORD *)(v47 + 12);
    if (v117 > 0x40) {
      operator new[]();
    }
    uint64_t v116 = 0;
    unint64_t v53 = llvm::Value::stripAndAccumulateConstantOffsets(v31, v103, (llvm::APInt *)&__src, 0, 0, 0, v26);
    unsigned int v55 = llvm::Value::stripAndAccumulateConstantOffsets(v42, v103, (llvm::APInt *)&v116, 0, 0, 0, v54);
    char v56 = 0;
    a8 = v98;
    a3 = v97;
    if (v53 != v55)
    {
LABEL_109:
      if (v117 >= 0x41 && v116) {
        MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
      }
      if (v119 >= 0x41)
      {
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      if ((v56 & 1) == 0)
      {
LABEL_152:
        BOOL result = 0;
        *a5 = (uint64_t *)(*a5)[1];
        return result;
      }
      goto LABEL_116;
    }
    uint64_t v57 = sub_1CB83544C((uint64_t)v103, (uint64_t)a2);
    if (v58 == 1) {
      unint64_t v59 = -2;
    }
    else {
      unint64_t v59 = (unint64_t)(v57 + 7) >> 3;
    }
    uint64_t v60 = sub_1CB83544C((uint64_t)v103, v43);
    if (v61 == 1) {
      unint64_t v62 = -2;
    }
    else {
      unint64_t v62 = (unint64_t)(v60 + 7) >> 3;
    }
    unsigned int v63 = v119;
    if (v119 > 0x40) {
      operator new[]();
    }
    unsigned int v115 = v119;
    uint64_t v64 = __src;
    unint64_t v114 = __src;
    llvm::APInt::operator+=((uint64_t)&v114, v59);
    unsigned int v75 = v115;
    unsigned int v115 = 0;
    LODWORD(v121) = v63;
    uint64_t v120 = (uint64_t)v64;
    unsigned int v123 = v75;
    char v122 = v114;
    unsigned int v76 = v117;
    a3 = v97;
    if (v117 > 0x40) {
      operator new[]();
    }
    unsigned int v113 = v117;
    unint64_t v77 = v116;
    uint64_t v112 = v116;
    llvm::APInt::operator+=((uint64_t)&v112, v62);
    unsigned int v78 = v113;
    unsigned int v113 = 0;
    DWORD2(v104) = v76;
    *(void *)&long long v104 = v77;
    DWORD2(v105) = v78;
    *(void *)&long long v105 = v112;
    llvm::ConstantRange::intersectWith((uint64_t)&v120, (llvm::ConstantRange *)&v104, 0, (uint64_t)&__s1);
    uint64_t v79 = v109;
    if (v109 > 0x40)
    {
      unint64_t v83 = __s1;
      uint64_t v80 = __s2;
      if (memcmp(__s1, __s2, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8))
      {
        char v56 = 0;
        goto LABEL_99;
      }
      int v84 = 0;
      int64_t v85 = (unint64_t)(v79 + 63) >> 6;
      do
      {
        BOOL v86 = v85-- < 1;
        if (v86) {
          break;
        }
        unint64_t v87 = v83[v85];
        v84 += __clz(v87);
      }
      while (!v87);
      int v88 = v79 | 0xFFFFFFC0;
      if ((v79 & 0x3F) == 0) {
        int v88 = 0;
      }
      BOOL v81 = v84 + v88 == v79;
    }
    else
    {
      uint64_t v80 = __s2;
      BOOL v81 = ((unint64_t)__s2 | (unint64_t)__s1) == 0;
    }
    char v56 = v81;
LABEL_99:
    if (v111 >= 0x41 && v80 != 0)
    {
      MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
      LODWORD(v79) = v109;
    }
    if (v79 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    a8 = v98;
    if (DWORD2(v105) >= 0x41 && (void)v105) {
      MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
    }
    if (DWORD2(v104) >= 0x41 && (void)v104) {
      MEMORY[0x1D25D9CB0](v104, 0x1000C8000313F17);
    }
    if (v123 >= 0x41 && v122) {
      MEMORY[0x1D25D9CB0](v122, 0x1000C8000313F17);
    }
    if (v121 >= 0x41 && v120) {
      MEMORY[0x1D25D9CB0](v120, 0x1000C8000313F17);
    }
    goto LABEL_109;
  }
  return 0;
}

llvm::UndefValue *sub_1CC06FC8C(uint64_t a1, unsigned __int8 *a2, llvm::Type *a3, char a4, llvm::Type *a5, unsigned char *a6)
{
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v12 == 60)
  {
    if (*(_WORD *)(a1 + 18) & 0x380) == 0 && (a4) {
      return 0;
    }
    unsigned int v13 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32));
    if (!sub_1CC06EFB4(v13, a2)) {
      return 0;
    }
    if (llvm::CastInst::isBitOrNoopPointerCastable(*(llvm::CastInst **)a1, a3, a5, v14))
    {
      if (a6) {
        *a6 = 1;
      }
      return (llvm::UndefValue *)a1;
    }
    int v12 = *(unsigned __int8 *)(a1 + 16);
  }
  BOOL result = 0;
  if (!a1 || v12 != 61) {
    return result;
  }
  if (*(_WORD *)(a1 + 18) & 0x380) == 0 && (a4) {
    return 0;
  }
  uint64_t v16 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32));
  if (!sub_1CC06EFB4(v16, a2)) {
    return 0;
  }
  if (a6) {
    *a6 = 0;
  }
  uint64_t v18 = *(void *)(a1 - 64);
  if (llvm::CastInst::isBitOrNoopPointerCastable(*(llvm::CastInst **)v18, a3, a5, v17)) {
    return (llvm::UndefValue *)v18;
  }
  unint64_t v19 = sub_1CB83544C((uint64_t)a5, *(void *)v18);
  int v21 = v20;
  unint64_t v25 = sub_1CB83544C((uint64_t)a5, (uint64_t)a3);
  BOOL result = 0;
  BOOL v26 = v21 != 1 && v22 == 1;
  if (!v26 && v25 <= v19)
  {
    if (*(unsigned __int8 *)(v18 + 16) > 0x14u) {
      return 0;
    }
    return llvm::ConstantFoldLoadFromConst((llvm::Type **)v18, a3, a5, v23, v24);
  }
  return result;
}

llvm::UndefValue *llvm::FindAvailableLoadedValue(llvm *this, llvm::LoadInst *a2, llvm::AAResults *a3, BOOL *a4)
{
  int v4 = (int)a4;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40);
  unsigned int v8 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*((llvm::Value **)this - 4));
  int v9 = *((unsigned __int8 *)this + 16);
  if (v9 == 60 || v9 == 61) {
    char v10 = (*((_WORD *)this + 9) & 0x380) != 0;
  }
  else {
    char v10 = (v9 - 63) <= 2;
  }
  if ((*((_WORD *)this + 9) & 0x301) != 0) {
    return 0;
  }
  unint64_t v11 = *(llvm::Type **)this;
  uint64_t v12 = *((void *)this + 5);
  uint64_t v50 = v52;
  uint64_t v51 = 0x600000000;
  unsigned int v13 = (void *)(v12 + 40);
  uint64_t v14 = (void *)*((void *)this + 3);
  if (v14 == (void *)(v12 + 40)) {
    goto LABEL_49;
  }
  unsigned int v44 = a2;
  uint64_t v15 = (llvm::Type *)(v7 + 272);
  while (1)
  {
    if (v14) {
      uint64_t v16 = (uint64_t)(v14 - 3);
    }
    else {
      uint64_t v16 = 0;
    }
    if (sub_1CBF63B28(v16) || sub_1CC27D470(v16)) {
      goto LABEL_17;
    }
    if (!v4) {
      goto LABEL_49;
    }
    unint64_t v17 = sub_1CC06FC8C(v16, v8, v11, v10, v15, a3);
    if (v17) {
      break;
    }
    --v4;
    uint64_t v18 = *(unsigned __int8 *)(v16 + 16) - 33;
    if (v18 <= 0x37)
    {
      if (((1 << (*(unsigned char *)(v16 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v19 = *(void *)(v16 + 64);
        if (!v19 || (*(unsigned char *)(v19 + 17) & 0x30) == 0)
        {
          int v20 = *(_DWORD *)(v16 + 20);
          if (v20 < 0)
          {
            uint64_t v35 = v16 - 32 * (v20 & 0x7FFFFFF);
            uint64_t v38 = *(void *)(v35 - 8);
            uint64_t v36 = v35 - 8;
            uint64_t v37 = v38;
            if (v38)
            {
              uint64_t v39 = -v37;
              while (1)
              {
                unsigned int v40 = *(_DWORD *)(*(void *)(v36 + v39) + 8);
                BOOL v41 = v40 > 7;
                int v42 = (1 << v40) & 0x83;
                if (v41 || v42 == 0) {
                  break;
                }
                v39 += 16;
                if (!v39) {
                  goto LABEL_22;
                }
              }
LABEL_26:
              if (v51 >= (unint64_t)HIDWORD(v51)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v50 + v51) = v16;
              LODWORD(v51) = v51 + 1;
              goto LABEL_17;
            }
          }
LABEL_22:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v16, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v16, 44) & 1) == 0)
          {
            goto LABEL_26;
          }
        }
      }
      else if (v18 == 27)
      {
        if ((*(_WORD *)(v16 + 18) & 0x301) != 0) {
          goto LABEL_26;
        }
      }
      else if (((1 << (*(unsigned char *)(v16 + 16) - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_26;
      }
    }
LABEL_17:
    uint64_t v14 = (void *)*v14;
    if (v14 == v13) {
      goto LABEL_49;
    }
  }
  int v21 = v17;
  uint64_t v22 = *((void *)this - 4);
  uint64_t v23 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, *(void *)this);
  if (v24 == 1) {
    unint64_t v25 = -2;
  }
  else {
    unint64_t v25 = (unint64_t)(v23 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)this, v49);
  *(void *)&long long v48 = v22;
  *((void *)&v48 + 1) = v25;
  if (v51)
  {
    BOOL v26 = (llvm::Instruction **)v50;
    int v27 = (llvm::Instruction **)((char *)v50 + 8 * v51);
    long long v28 = xmmword_1CFAC3060;
    while (1)
    {
      BOOL v29 = *v26;
      v46[0] = v48;
      v46[1] = v49[0];
      v46[2] = v49[1];
      char v47 = 1;
      v53[0] = 1;
      uint64_t v30 = 1;
      do
      {
        unsigned int v31 = &v53[v30];
        *(_OWORD *)unsigned int v31 = v28;
        *((_OWORD *)v31 + 1) = v28;
        v30 += 5;
      }
      while (v31 + 5 != v54);
      v54[0] = &v58;
      v54[1] = 0;
      unsigned int v55 = v57;
      uint64_t v56 = 0x400000000;
      int v58 = &unk_1F2600DB8;
      uint64_t v32 = 63;
      uint64_t v59 = 1;
      do
      {
        v53[v32] = -4096;
        v32 += 2;
      }
      while (v32 != 79);
      char ModRefInfo = llvm::AAResults::getModRefInfo((uint64_t)v44, v29, v46, (uint64_t)v53);
      if ((v59 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v60, 8);
      }
      long long v28 = xmmword_1CFAC3060;
      if (v55 != v57)
      {
        free(v55);
        long long v28 = xmmword_1CFAC3060;
      }
      if ((v53[0] & 1) == 0)
      {
        MEMORY[0x1D25D9CD0](v53[1], 8);
        long long v28 = xmmword_1CFAC3060;
      }
      if ((ModRefInfo & 2) != 0) {
        break;
      }
      if (++v26 == v27) {
        goto LABEL_50;
      }
    }
LABEL_49:
    int v21 = 0;
  }
LABEL_50:
  if (v50 != v52) {
    free(v50);
  }
  return v21;
}

uint64_t llvm::canReplacePointersIfEqual(llvm *this, llvm::Value *a2, llvm::Value *a3, const llvm::DataLayout *a4, llvm::Instruction *a5)
{
  uint64_t v5 = 1;
  if (!a2) {
    return v5;
  }
  unsigned int v7 = *((unsigned __int8 *)a2 + 16);
  if (v7 > 0x14) {
    return v5;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)this + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 8);
  }
  if (v10 < 0x100) {
    goto LABEL_14;
  }
  unsigned int v11 = v10 >> 8;
  uint64_t v12 = *((unsigned int *)a3 + 60);
  uint64_t v13 = *((void *)a3 + 29);
  if (v12)
  {
    uint64_t v13 = *((void *)a3 + 29);
    unint64_t v14 = *((unsigned int *)a3 + 60);
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = v13 + 16 * (v14 >> 1);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      uint64_t v18 = v16 + 16;
      v14 += ~(v14 >> 1);
      if (v17 < v11) {
        uint64_t v13 = v18;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
  }
  if (v13 == *((void *)a3 + 29) + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_14:
  }
    uint64_t v13 = *((void *)a3 + 29);
  unsigned int v19 = *(_DWORD *)(v13 + 4);
  unsigned int v29 = v19;
  if (v19 > 0x40) {
    operator new[]();
  }
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
  if (!v19) {
    LOBYTE(v20) = 0;
  }
  unint64_t v28 = v20 & 1;
  if (v7 == 16)
  {
    uint64_t v21 = *((unsigned int *)a2 + 8);
    if (v21 >= 0x41)
    {
      int v23 = 0;
      int64_t v24 = (unint64_t)(v21 + 63) >> 6;
      do
      {
        if (v24-- < 1) {
          break;
        }
        unint64_t v26 = *(void *)(*((void *)a2 + 3) + 8 * v24);
        v23 += __clz(v26);
      }
      while (!v26);
      int v27 = v21 | 0xFFFFFFC0;
      if ((v21 & 0x3F) == 0) {
        int v27 = 0;
      }
      if (v23 + v27 != v21) {
        goto LABEL_21;
      }
    }
    else if (*((void *)a2 + 3))
    {
LABEL_21:
      uint64_t v30 = v34;
      unsigned int v31 = v34;
      uint64_t v32 = 32;
      int v33 = 0;
      uint64_t v5 = sub_1CC06D628((uint64_t)a2, 0, (uint64_t)&v28, (uint64_t)a3, (uint64_t *)a4, 0, 0, (uint64_t)&v30, 16);
      if (v31 != v30) {
        free(v31);
      }
      unsigned int v19 = v29;
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v7 == 17)
  {
    if ((sub_1CB844168((uint64_t)a2, 0.0) & 1) == 0) {
      goto LABEL_21;
    }
LABEL_29:
    uint64_t v5 = 1;
    goto LABEL_30;
  }
  uint64_t v5 = 1;
  if (v7 - 18 >= 3 && v7 != 13) {
    goto LABEL_21;
  }
LABEL_30:
  if (v19 >= 0x41 && v28) {
    MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
  }
  return v5;
}

BOOL sub_1CC070500(llvm::Value *a1, uint64_t *a2, unsigned __int8 a3, const llvm::DataLayout *a4)
{
  Pointer__int16 Alignment = llvm::Value::getPointerAlignment(a1, a4);
  unsigned int v7 = *((_DWORD *)a2 + 2);
  if (v7 > 0x40) {
    operator new[]();
  }
  unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (a3 > PointerAlignment) {
    return 0;
  }
  unsigned int v21 = *((_DWORD *)a2 + 2);
  uint64_t v20 = v8 & (1 << a3);
  llvm::APInt::operator-=((uint64_t)&v20, 1uLL);
  uint64_t v10 = v21;
  uint64_t v11 = v20;
  unsigned int v21 = 0;
  if (v10 < 0x41) {
    return (*a2 & v20) == 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a2;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  do
  {
    *(void *)(v11 + v12) &= *(void *)(v13 + v12);
    v12 += 8;
  }
  while (8 * v14 != v12);
  int v15 = 0;
  do
  {
    if (v14-- < 1) {
      break;
    }
    unint64_t v17 = *(void *)(v11 + 8 * v14);
    v15 += __clz(v17);
  }
  while (!v17);
  int v18 = v10 | 0xFFFFFFC0;
  if ((v10 & 0x3F) == 0) {
    int v18 = 0;
  }
  BOOL v9 = v15 + v18 == v10;
  if (v11)
  {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
    if (v21 >= 0x41)
    {
      if (v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
    }
  }
  return v9;
}

uint64_t sub_1CC07072C(uint64_t a1, long long *a2, llvm *this, const llvm::DominatorTree *a4)
{
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  uint64_t result = llvm::isValidAssumeForContext(this, **(const llvm::Instruction ***)a1, 0, a4);
  if (!result) {
    return result;
  }
  if (v14 == 76)
  {
    unint64_t v6 = (uint64_t *)(a1 + 16);
    goto LABEL_6;
  }
  if (v14 == 74)
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
LABEL_6:
    uint64_t v7 = *v6;
    unint64_t v8 = &v14;
    if (*(void *)(v7 + 8) >= *((void *)&v14 + 1)) {
      unint64_t v8 = (long long *)v7;
    }
    uint64_t v9 = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = *v8;
    *(void *)(v7 + 16) = v9;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (!*(_DWORD *)v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (!*(_DWORD *)v11 || !(*(void *)(v10 + 8) >> **(unsigned char **)(a1 + 24))) {
    return 0;
  }
  unint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = *(unint64_t **)(a1 + 32);
  if (*((_DWORD *)v13 + 2) >= 0x41u) {
    uint64_t v13 = (unint64_t *)*v13;
  }
  return v12 >= *v13;
}

BOOL sub_1CC070820(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 122;
}

uint64_t sub_1CC07086C()
{
  int v4 = &v3;
  int v2 = 1;
  int v3 = 6;
  *(void *)&long long v1 = "Use this to specify the default maximum number of instructions to scan backward from a given instruct"
                   "ion, when searching for available loaded value";
  *((void *)&v1 + 1) = 147;
  sub_1CBF7A9F8((uint64_t)&llvm::DefMaxInstsToScan, "available-load-scan-limit", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &llvm::DefMaxInstsToScan, &dword_1CB82C000);
}

void *sub_1CC0708F8(void *a1)
{
  *a1 = &unk_1F26050E8;
  int v2 = a1 + 20;
  int v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

uint64_t llvm::stripIntegerCast(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 16);
    if (v1 >= 0x1C && v1 - 79 >= 0xFFFFFFF3 && *(unsigned char *)(**(void **)(result - 32) + 8) == 13) {
      return *(void *)(result - 32);
    }
  }
  return result;
}

uint64_t llvm::replaceSymbolicStrideSCEV(int8x16_t *a1, uint64_t a2, llvm::Value *a3)
{
  uint64_t SCEV = llvm::PredicatedScalarEvolution::getSCEV(a1, a3);
  uint64_t v22 = 0;
  int v23 = a3;
  if (sub_1CC077838((uint64_t *)a2, &v23, &v22))
  {
    uint64_t v9 = v22;
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(unsigned int *)(a2 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(unsigned int *)(a2 + 16);
    uint64_t v9 = *(void *)a2 + 16 * v8;
  }
  if (v9 != v7 + 16 * v8)
  {
    uint64_t v11 = *(unsigned __int8 **)(v9 + 8);
    unsigned int v12 = v11[16];
    if (v11) {
      BOOL v13 = v12 >= 0x1C;
    }
    else {
      BOOL v13 = 0;
    }
    BOOL v14 = v13 && v12 - 79 >= 0xFFFFFFF3;
    if (v14 && *(unsigned char *)(**((void **)v11 - 4) + 8) == 13) {
      uint64_t v11 = (unsigned __int8 *)*((void *)v11 - 4);
    }
    uint64_t v15 = (llvm::ScalarEvolution *)a1[5].i64[1];
    uint64_t v16 = llvm::ScalarEvolution::getSCEV(v15, (llvm::Value *)v11);
    Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v15, *(llvm::Type **)v11, 1uLL, 0);
    if (v16) {
      uint64_t v18 = v16 - 32;
    }
    else {
      uint64_t v18 = 0;
    }
    unsigned int v19 = (const llvm::SCEV *)(v18 + 32);
    if (v16) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t EqualPredicate = llvm::ScalarEvolution::getEqualPredicate(v15, v20, Constant);
    llvm::PredicatedScalarEvolution::addPredicate((uint64_t)a1, EqualPredicate);
    return llvm::PredicatedScalarEvolution::getSCEV(a1, a3);
  }
  return SCEV;
}

void llvm::RuntimePointerChecking::insert(uint64_t a1, const llvm::Loop *a2, llvm::Value *a3, llvm::Type *a4, char a5, int a6, int a7, uint64_t a8, int8x16_t *a9)
{
  v91[3] = *MEMORY[0x1E4F143B8];
  BOOL v14 = (const llvm::SCEV *)llvm::replaceSymbolicStrideSCEV(a9, a8, a3);
  uint64_t v15 = (llvm::ScalarEvolution *)a9[5].i64[1];
  uint64_t UMinExpr = (uint64_t)v14;
  UMaxExpr = v14;
  if (llvm::ScalarEvolution::getLoopDisposition(v15, v14, a2) != 1)
  {
    int v86 = a7;
    if (*((_WORD *)v14 + 12) == 7) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = 0;
    }
    BackedgeTakenCount = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getBackedgeTakenCount((llvm::PredicatedScalarEvolution *)a9);
    uint64_t v20 = (uint64_t *)*((void *)v18 + 4);
    unsigned int v21 = (const llvm::SCEV *)*v20;
    UMaxExpr = (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(v20, *((void *)v18 + 5), BackedgeTakenCount, v15);
    uint64_t v22 = *((void *)v18 + 5);
    if (v22 == 2)
    {
      uint64_t v23 = *(void *)(*((void *)v18 + 4) + 8);
    }
    else
    {
      uint64_t v84 = *((void *)v18 + 4);
      uint64_t v89 = v91;
      uint64_t v90 = 0x300000000;
      unint64_t __n = 8 * v22 - 8;
      if (__n >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v83 = 0;
      if (v22 != 1)
      {
        memcpy(v89, (const void *)(v84 + 8), __n);
        int v83 = v90;
      }
      LODWORD(v90) = v83 + (__n >> 3);
      uint64_t v23 = sub_1CD478318(v15, (uint64_t)&v89, *((const llvm::Loop **)v18 + 6), 0);
      if (v89 != v91) {
        free(v89);
      }
    }
    if (v23) {
      BOOL v24 = *(unsigned __int16 *)(v23 + 24) == 0;
    }
    else {
      BOOL v24 = 0;
    }
    if (v24)
    {
      uint64_t v25 = *(void *)(v23 + 32);
      unint64_t v26 = (uint64_t *)(v25 + 24);
      unsigned int v27 = *(_DWORD *)(v25 + 32);
      unsigned int v28 = v27 - 1;
      if (v27 >= 0x41) {
        unint64_t v26 = (uint64_t *)(*v26 + 8 * (v28 >> 6));
      }
      a7 = v86;
      uint64_t v29 = 1 << v28;
      uint64_t v30 = *v26;
      if ((v30 & v29) != 0) {
        uint64_t UMinExpr = (uint64_t)UMaxExpr;
      }
      else {
        uint64_t UMinExpr = (uint64_t)v21;
      }
      if ((v30 & v29) != 0) {
        UMaxExpr = v21;
      }
    }
    else
    {
      uint64_t UMinExpr = llvm::ScalarEvolution::getUMinExpr(v15, v21, UMaxExpr, 0);
      UMaxExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr(v15, **((const llvm::SCEV ***)v18 + 4), UMaxExpr);
      a7 = v86;
    }
  }
  uint64_t v31 = *(void *)(*(void *)(**((void **)a2 + 4) + 56) + 40);
  uint64_t v32 = *(void *)a3;
  unsigned int v33 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v33 & 0xFE) == 0x12) {
    unsigned int v33 = *(_DWORD *)(**(void **)(v32 + 16) + 8);
  }
  uint64_t v34 = *(void *)(v31 + 504);
  if (v33 < 0x100) {
    goto LABEL_30;
  }
  unsigned int v35 = v33 >> 8;
  unint64_t v36 = *(unsigned int *)(v31 + 512);
  uint64_t v37 = *(void *)(v31 + 504);
  if (v36)
  {
    uint64_t v37 = v34;
    unint64_t v38 = v36;
    do
    {
      unint64_t v39 = v38 >> 1;
      uint64_t v40 = v37 + 16 * (v38 >> 1);
      unsigned int v41 = *(_DWORD *)(v40 + 8);
      uint64_t v42 = v40 + 16;
      v38 += ~(v38 >> 1);
      if (v41 < v35) {
        uint64_t v37 = v42;
      }
      else {
        unint64_t v38 = v39;
      }
    }
    while (v38);
  }
  if (v37 == v34 + 16 * v36 || *(_DWORD *)(v37 + 8) != v35) {
LABEL_30:
  }
    uint64_t v37 = v34;
  uint64_t v43 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v32, (llvm::LLVMContext *)*(unsigned int *)(v37 + 12));
  unsigned int v44 = v43;
  if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
  {
    llvm::VectorType::get(v43, (llvm::Type *)(*(unsigned int *)(v32 + 32) | ((unint64_t)(*(_DWORD *)(v32 + 8) == 19) << 32)));
    unsigned int v44 = v82;
  }
  unint64_t StoreSizeOfExpr = llvm::ScalarEvolution::getStoreSizeOfExpr(v15, v44, a4);
  uint64_t v89 = v91;
  v91[0] = UMaxExpr;
  v91[1] = StoreSizeOfExpr;
  uint64_t v90 = 0x200000002;
  uint64_t AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v15, (unint64_t **)&v89, 0, 0);
  if (v89 != v91) {
    free(v89);
  }
  uint64_t v47 = *(unsigned int *)(a1 + 16);
  uint64_t v48 = *(unsigned int *)(a1 + 20);
  if (v47 >= v48)
  {
    if (v48 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v48) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v50 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v50 = (2 * v48) | 1;
    }
    uint64_t v51 = (char *)malloc_type_malloc(v50 << 6, 0x4065EBACuLL);
    if (!v51) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v52 = v51;
    unint64_t v53 = &v51[64 * (unint64_t)*(unsigned int *)(a1 + 16)];
    *(_OWORD *)unint64_t v53 = xmmword_1CFAC3BB0;
    *((void *)v53 + 2) = a3;
    if (((unint64_t)a3 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v53);
    }
    *((void *)v53 + 3) = UMinExpr;
    *((void *)v53 + 4) = AddExpr;
    v53[40] = a5;
    *((_DWORD *)v53 + 11) = a6;
    *((_DWORD *)v53 + 12) = a7;
    *((void *)v53 + 7) = v14;
    uint64_t v54 = *(char **)(a1 + 8);
    uint64_t v55 = *(unsigned int *)(a1 + 16);
    if (v55)
    {
      uint64_t v56 = v54 + 24;
      uint64_t v57 = v52 + 8;
      uint64_t v58 = v55 << 6;
      uint64_t v59 = v52;
      do
      {
        *(void *)uint64_t v59 = 6;
        *((void *)v59 + 1) = 0;
        uint64_t v60 = *((void *)v56 - 1);
        *((void *)v59 + 2) = v60;
        if (v60 != -8192 && v60 != -4096 && v60 != 0)
        {
          unint64_t v62 = *((void *)v56 - 3) & 0xFFFFFFFFFFFFFFF8;
          *((void *)v59 + 1) = *(void *)v62;
          *(void *)unint64_t v62 = v59;
          *(void *)uint64_t v59 = v62 | 6;
          unsigned int v63 = (uint64_t *)*((void *)v59 + 1);
          if (v63) {
            *unsigned int v63 = *v63 & 7 | (unint64_t)v57;
          }
        }
        long long v64 = *(_OWORD *)v56;
        long long v65 = *((_OWORD *)v56 + 1);
        *((void *)v59 + 7) = *((void *)v56 + 4);
        *(_OWORD *)(v59 + 40) = v65;
        *(_OWORD *)(v59 + 24) = v64;
        v59 += 64;
        v56 += 64;
        v57 += 64;
        v58 -= 64;
      }
      while (v58);
      uint64_t v54 = *(char **)(a1 + 8);
      uint64_t v66 = *(unsigned int *)(a1 + 16);
      if (v66)
      {
        uint64_t v67 = &v54[64 * v66];
        do
        {
          uint64_t v68 = *((void *)v67 - 6);
          if (v68 != -8192 && v68 != -4096 && v68 != 0)
          {
            unint64_t v70 = *((void *)v67 - 8) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v70 = *((void *)v67 - 7);
            uint64_t v71 = (unint64_t *)*((void *)v67 - 7);
            if (v71)
            {
              *uint64_t v71 = *v71 & 7 | v70;
            }
            else
            {
              uint64_t v72 = *((void *)v67 - 6);
              uint64_t v73 = ***(int32x2_t ****)v72;
              unint64_t v74 = (unint64_t)v73[303];
              if (v74 <= v70)
              {
                uint64_t v75 = v73[305].u32[0];
                if (v74 + 16 * v75 > v70)
                {
                  unsigned int v76 = v75 - 1;
                  LODWORD(v77) = v76 & ((v72 >> 4) ^ (v72 >> 9));
                  unsigned int v78 = (uint64_t *)(v74 + 16 * v77);
                  uint64_t v79 = *v78;
                  if (v72 == *v78)
                  {
LABEL_72:
                    *unsigned int v78 = -8192;
                    v73[304] = vadd_s32(v73[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v72 = *((void *)v67 - 6);
                  }
                  else
                  {
                    int v80 = 1;
                    while (v79 != -4096)
                    {
                      int v81 = v77 + v80++;
                      uint64_t v77 = v81 & v76;
                      uint64_t v79 = *(void *)(v74 + 16 * v77);
                      if (v72 == v79)
                      {
                        unsigned int v78 = (uint64_t *)(v74 + 16 * v77);
                        goto LABEL_72;
                      }
                    }
                  }
                  *(unsigned char *)(v72 + 17) &= ~1u;
                }
              }
            }
          }
          v67 -= 64;
        }
        while (v67 != v54);
        uint64_t v54 = *(char **)(a1 + 8);
      }
    }
    if (v54 != (char *)(a1 + 24)) {
      free(v54);
    }
    *(void *)(a1 + 8) = v52;
    *(_DWORD *)(a1 + 20) = v50;
    LODWORD(v47) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v49 = *(void *)(a1 + 8) + (v47 << 6);
    *(_OWORD *)uint64_t v49 = xmmword_1CFAC3BB0;
    *(void *)(v49 + 16) = a3;
    if (((unint64_t)a3 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v49);
      LODWORD(v47) = *(_DWORD *)(a1 + 16);
    }
    *(void *)(v49 + 24) = UMinExpr;
    *(void *)(v49 + 32) = AddExpr;
    *(unsigned char *)(v49 + 40) = a5;
    *(_DWORD *)(v49 + 44) = a6;
    *(_DWORD *)(v49 + 48) = a7;
    *(void *)(v49 + 56) = v14;
  }
  *(_DWORD *)(a1 + 16) = v47 + 1;
}

uint64_t sub_1CC07112C(llvm::DataLayout *a1, llvm::Type *a2)
{
  unint64_t v4 = (unint64_t)(sub_1CB83544C((uint64_t)a1, (uint64_t)a2) + 7) >> 3;
  char Alignment = llvm::DataLayout::getAlignment(a1, a2, 1);
  return ((1 << Alignment) + v4 - 1) & -(1 << Alignment);
}

uint64_t llvm::RuntimePointerChecking::needsChecking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(unsigned int *)(a3 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(unsigned int **)(a3 + 16);
  while (!v5)
  {
LABEL_9:
    if (++v4 == v3) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 + ((unint64_t)*(unsigned int *)(v6 + 4 * v4) << 6);
  int v10 = *(unsigned __int8 *)(v9 + 40);
  uint64_t v11 = (_DWORD *)(v9 + 44);
  unsigned int v12 = (_DWORD *)(v9 + 48);
  BOOL v13 = v7;
  uint64_t v14 = v5;
  while (1)
  {
    unsigned int v16 = *v13++;
    uint64_t v15 = v16;
    uint64_t v17 = v8 + ((unint64_t)v16 << 6);
    if (v10 | *(unsigned __int8 *)(v17 + 40))
    {
      if (*v11 != *(_DWORD *)(v17 + 44) && *v12 == *(_DWORD *)(v8 + (v15 << 6) + 48)) {
        return 1;
      }
    }
    if (!--v14) {
      goto LABEL_9;
    }
  }
}

void llvm::RuntimePointerChecking::groupChecks(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v61 = a1 + 152;
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  if (v7)
  {
    uint64_t v58 = 48 * v7;
    do
    {
      uint64_t v59 = *(void **)(v6 + v58 - 32);
      if ((void *)(v6 + v58 - 16) != v59) {
        free(v59);
      }
      v58 -= 48;
    }
    while (v58);
  }
  *(_DWORD *)(a1 + 160) = 0;
  if (a3)
  {
    v63[0] = 0;
    v63[1] = 0;
    unsigned int v64 = 0;
    if (*(_DWORD *)(a1 + 16))
    {
      unint64_t v8 = 0;
      uint64_t v9 = 16;
      do
      {
        v69[0] = *(llvm::RuntimeCheckingPtrGroup **)(*(void *)(a1 + 8) + v9);
        *((_DWORD *)sub_1CC0779FC((uint64_t)v63, (uint64_t *)v69) + 2) = v8++;
        unint64_t v10 = *(unsigned int *)(a1 + 16);
        v9 += 64;
      }
      while (v8 < v10);
    }
    else
    {
      unint64_t v10 = 0;
    }
    uint64_t v73 = &v75;
    uint64_t v74 = 0x200000000;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    unsigned int v76 = &v77;
    if (v10)
    {
      unint64_t v11 = 0;
      unsigned int v12 = 0;
      BOOL v13 = (void *)(a2 + 8);
      while (1)
      {
        if (v78)
        {
          for (uint64_t i = v77; i; uint64_t i = (void *)*i)
          {
            unint64_t v56 = *((unsigned int *)i + 7);
            if (v11 >= v56)
            {
              if (v11 <= v56) {
                goto LABEL_56;
              }
              ++i;
            }
          }
        }
        else if (v74)
        {
          uint64_t v47 = v73;
          uint64_t v48 = 4 * v74;
          while (v11 != *(_DWORD *)v47)
          {
            uint64_t v47 = (uint64_t *)((char *)v47 + 4);
            v48 -= 4;
            if (!v48) {
              goto LABEL_12;
            }
          }
          if (v48) {
            goto LABEL_56;
          }
        }
LABEL_12:
        uint64_t v14 = *(void *)(a1 + 8) + (v11 << 6);
        uint64_t v15 = *(void *)(v14 + 16);
        uint64_t v16 = *(unsigned __int8 *)(v14 + 40);
        v69[0] = (llvm::RuntimeCheckingPtrGroup *)&v70;
        v69[1] = (llvm::RuntimeCheckingPtrGroup *)0x200000000;
        uint64_t v17 = (void *)*v13;
        if (!*v13) {
          goto LABEL_33;
        }
        int64_t v18 = v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * v16);
        unsigned int v19 = (void *)*v13;
        uint64_t v20 = v13;
        do
        {
          int64_t v21 = v19[6];
          BOOL v22 = v21 < v18;
          if (v21 >= v18) {
            uint64_t v23 = v19;
          }
          else {
            uint64_t v23 = v19 + 1;
          }
          if (!v22) {
            uint64_t v20 = v19;
          }
          unsigned int v19 = (void *)*v23;
        }
        while (*v23);
        if (v20 == v13 || v18 < v20[6])
        {
          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = sub_1CC076E58((uint64_t)(v20 + 4));
          uint64_t v17 = (void *)*v13;
        }
        if (!v17) {
          goto LABEL_33;
        }
        uint64_t v25 = *(void *)(v24 + 16);
        unint64_t v26 = v13;
        do
        {
          uint64_t v27 = v17[6];
          BOOL v28 = v27 < v25;
          if (v27 >= v25) {
            uint64_t v29 = v17;
          }
          else {
            uint64_t v29 = v17 + 1;
          }
          if (!v28) {
            unint64_t v26 = v17;
          }
          uint64_t v17 = (void *)*v29;
        }
        while (*v29);
        if (v26 == v13 || v25 < v26[6]) {
LABEL_33:
        }
          unint64_t v26 = v13;
        if (v26[5])
        {
          unint64_t v30 = (unint64_t)(v26 + 4);
          do
          {
            if (v64)
            {
              unint64_t v31 = *(void *)(v30 + 16) & 0xFFFFFFFFFFFFFFF8;
              LODWORD(v32) = ((v31 >> 4) ^ (v31 >> 9)) & (v64 - 1);
              uint64_t v33 = v63[0] + 16 * v32;
              uint64_t v34 = *(void *)v33;
              if (*(void *)v33 != v31)
              {
                int v57 = 1;
                do
                {
                  if (v34 == -4096)
                  {
                    uint64_t v33 = v63[0] + 16 * v64;
                    goto LABEL_38;
                  }
                  int v60 = v32 + v57++;
                  uint64_t v32 = v60 & (v64 - 1);
                  uint64_t v34 = *(void *)(v63[0] + 16 * v32);
                }
                while (v34 != v31);
                uint64_t v33 = v63[0] + 16 * v32;
              }
            }
            else
            {
              uint64_t v33 = v63[0];
            }
LABEL_38:
            unsigned int v62 = *(_DWORD *)(v33 + 8);
            sub_1CD3C8DA0((uint64_t)&v73, &v62);
            if (!LODWORD(v69[1])) {
              goto LABEL_44;
            }
            char v37 = 0;
            unint64_t v38 = (llvm::SCEV **)v69[0];
            uint64_t v39 = 48 * LODWORD(v69[1]) - 48;
            do
            {
              if (v12 > dword_1EBCC6350) {
                break;
              }
              ++v12;
              unsigned __int8 v40 = llvm::RuntimeCheckingPtrGroup::addPointer(v38, v62, (llvm::RuntimePointerChecking *)a1, v35, v36);
              v37 |= v40;
              if (v40) {
                break;
              }
              v38 += 6;
              uint64_t v41 = v39;
              v39 -= 48;
            }
            while (v41);
            if ((v37 & 1) == 0)
            {
LABEL_44:
              unint64_t v42 = *(void *)(a1 + 8) + ((unint64_t)v62 << 6);
              int8x16_t v65 = vextq_s8(*(int8x16_t *)(v42 + 24), *(int8x16_t *)(v42 + 24), 8uLL);
              uint64_t v66 = v68;
              uint64_t v67 = 0x200000000;
              uint64_t v43 = **(void **)(v42 + 16);
              unsigned int v44 = *(_DWORD *)(v43 + 8);
              if ((v44 & 0xFE) == 0x12) {
                unsigned int v44 = *(_DWORD *)(**(void **)(v43 + 16) + 8);
              }
              v68[2] = v44 >> 8;
              v68[0] = v62;
              LODWORD(v67) = 1;
              sub_1CD49C5CC((uint64_t)v69, (unint64_t)&v65);
              if (v66 != v68) {
                free(v66);
              }
            }
            unint64_t v30 = *(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v30);
        }
        if (LODWORD(v69[1]))
        {
          unsigned int v45 = v69[0];
          uint64_t v46 = 48 * LODWORD(v69[1]);
          do
          {
            sub_1CD49EF74(v61, (unint64_t)v45);
            unsigned int v45 = (llvm::RuntimeCheckingPtrGroup *)((char *)v45 + 48);
            v46 -= 48;
          }
          while (v46);
        }
        sub_1CC07772C((char **)v69);
        unint64_t v10 = *(unsigned int *)(a1 + 16);
LABEL_56:
        if (++v11 >= v10)
        {
          uint64_t v49 = v77;
          goto LABEL_58;
        }
      }
    }
    uint64_t v49 = 0;
LABEL_58:
    sub_1CB833A08((uint64_t)&v76, v49);
    if (v73 != &v75) {
      free(v73);
    }
    MEMORY[0x1D25D9CD0](v63[0], 8);
  }
  else if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0;
    do
    {
      uint64_t v52 = *(void *)(a1 + 8) + v50;
      *(int8x16_t *)uint64_t v69 = vextq_s8(*(int8x16_t *)(v52 + 24), *(int8x16_t *)(v52 + 24), 8uLL);
      unint64_t v70 = v72;
      uint64_t v71 = 0x200000000;
      uint64_t v53 = **(void **)(v52 + 16);
      unsigned int v54 = *(_DWORD *)(v53 + 8);
      if ((v54 & 0xFE) == 0x12) {
        unsigned int v54 = *(_DWORD *)(**(void **)(v53 + 16) + 8);
      }
      v72[2] = v54 >> 8;
      v72[0] = v51;
      LODWORD(v71) = 1;
      sub_1CD49C5CC(v61, (unint64_t)v69);
      if (v70 != v72) {
        free(v70);
      }
      ++v51;
      v50 += 64;
    }
    while (v51 < *(unsigned int *)(a1 + 16));
  }
}

llvm::SCEV *llvm::RuntimeCheckingPtrGroup::addPointer(llvm::SCEV **this, int a2, const llvm::SCEV *a3, const llvm::SCEV *a4, unsigned int a5, llvm::ScalarEvolution *a6)
{
  uint64_t result = sub_1CC071828(a3, this[1], a6);
  if (result)
  {
    unsigned int v12 = result;
    uint64_t result = sub_1CC071828(a4, *this, a6);
    if (result)
    {
      if (v12 == a3) {
        this[1] = a3;
      }
      if (result != a4) {
        *this = a4;
      }
      unsigned int v13 = *((_DWORD *)this + 6);
      if (v13 >= *((_DWORD *)this + 7)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)this[2] + v13) = a2;
      ++*((_DWORD *)this + 6);
      return (llvm::SCEV *)1;
    }
  }
  return result;
}

llvm::SCEV *sub_1CC071828(const llvm::APInt *a1, llvm::SCEV *a2, llvm::ScalarEvolution *a3)
{
  Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(a3, a2, a1, 0, 0);
  uint64_t result = 0;
  if (MinusSCEV && !*(_WORD *)(MinusSCEV + 24))
  {
    uint64_t v7 = *(void *)(MinusSCEV + 32);
    unint64_t v8 = (void *)(v7 + 24);
    unsigned int v9 = *(_DWORD *)(v7 + 32);
    unsigned int v10 = v9 - 1;
    if (v9 >= 0x41) {
      unint64_t v8 = (void *)(*v8 + 8 * (v10 >> 6));
    }
    if ((*v8 >> v10)) {
      return a2;
    }
    else {
      return a1;
    }
  }
  return result;
}

uint64_t llvm::getPtrStride(int8x16_t *a1, llvm::Type *a2, llvm::Value *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  v62[3] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 8) == 19) {
    return 0;
  }
  uint64_t v13 = *(void *)a3;
  uint64_t v14 = llvm::replaceSymbolicStrideSCEV(a1, a5, a3);
  if (*(_WORD *)(v14 + 24) == 7) {
    uint64_t AsAddRec = v14;
  }
  else {
    uint64_t AsAddRec = 0;
  }
  if (a6 && !AsAddRec) {
    uint64_t AsAddRec = llvm::PredicatedScalarEvolution::getAsAddRec(a1, a3);
  }
  if (!AsAddRec || *(void *)(AsAddRec + 48) != a4) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(v13 + 8);
  if ((v16 & 0xFE) == 0x12) {
    unsigned int v16 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
  }
  if (*((unsigned char *)a3 + 16) == 62)
  {
    int v17 = (*((unsigned __int8 *)a3 + 17) >> 1) & 1;
    if (!a7)
    {
LABEL_14:
      LOBYTE(v18) = 1;
      goto LABEL_55;
    }
  }
  else
  {
    int v17 = 0;
    if (!a7) {
      goto LABEL_14;
    }
  }
  LOBYTE(v18) = 1;
  if (llvm::PredicatedScalarEvolution::hasNoOverflow((uint64_t)a1, a3, 1) || (*(_WORD *)(AsAddRec + 28) & 7) != 0) {
    goto LABEL_55;
  }
  if (*((unsigned char *)a3 + 16) != 62 || (*((unsigned char *)a3 + 17) & 2) == 0) {
    goto LABEL_48;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 32 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
  while (v20)
  {
    uint64_t v21 = *(void *)((char *)a3 + v20);
    int v22 = *(unsigned __int8 *)(v21 + 16);
    if (v19) {
      uint64_t v21 = v19;
    }
    if (v22 == 16) {
      uint64_t v21 = v19;
    }
    v20 += 32;
    BOOL v23 = v22 == 16 || v19 == 0;
    uint64_t v19 = v21;
    if (!v23) {
      goto LABEL_48;
    }
  }
  if (!v19) {
    goto LABEL_48;
  }
  unsigned int v24 = *(unsigned __int8 *)(v19 + 16);
  if (v24 < 0x1C)
  {
    if (v24 != 5) {
      goto LABEL_48;
    }
    int v25 = *(unsigned __int16 *)(v19 + 18) - 13;
  }
  else
  {
    int v25 = v24 - 41;
  }
  HIDWORD(v27) = v25;
  LODWORD(v27) = v25;
  unsigned int v26 = v27 >> 1;
  BOOL v28 = v26 > 6;
  int v29 = (1 << v26) & 0x47;
  BOOL v30 = v28 || v29 == 0;
  if (!v30 && (*(unsigned char *)(v19 + 17) & 4) != 0)
  {
    int v31 = *(_DWORD *)(v19 + 20);
    uint64_t v32 = (v31 & 0x40000000) != 0 ? *(void *)(v19 - 8) : v19 - 32 * (v31 & 0x7FFFFFF);
    if (*(unsigned char *)(*(void *)(v32 + 32) + 16) == 16)
    {
      uint64_t SCEV = llvm::PredicatedScalarEvolution::getSCEV(a1, *(llvm::Value **)v32);
      int v18 = 0;
      if (!SCEV || *(_WORD *)(SCEV + 24) != 7) {
        goto LABEL_49;
      }
      if (*(void *)(SCEV + 48) == a4)
      {
        int v18 = (*(unsigned __int16 *)(SCEV + 28) >> 2) & 1;
        goto LABEL_49;
      }
    }
  }
LABEL_48:
  int v18 = 0;
LABEL_49:
  if ((v18 | v17)) {
    goto LABEL_55;
  }
  uint64_t v34 = *(void *)(**(void **)(a4 + 32) + 56);
  if (v34 && (uint64_t v35 = *(void *)(v34 + 112)) != 0)
  {
    if (v16 <= 0xFF && (*(unsigned char *)(v35 + 17) & 1) == 0) {
      goto LABEL_54;
    }
  }
  else if (v16 < 0x100)
  {
LABEL_54:
    LOBYTE(v18) = 0;
    goto LABEL_55;
  }
  if (!a6) {
    return 0;
  }
  LOBYTE(v18) = 1;
  llvm::PredicatedScalarEvolution::setNoOverflow((uint64_t)a1, a3, 1);
LABEL_55:
  uint64_t v36 = *(void *)(AsAddRec + 40);
  if (v36 == 2)
  {
    uint64_t v37 = *(void *)(*(void *)(AsAddRec + 32) + 8);
  }
  else
  {
    char v57 = v17;
    unsigned int v59 = v16;
    uint64_t v53 = (llvm::ScalarEvolution *)a1[5].i64[1];
    uint64_t v56 = *(void *)(AsAddRec + 32);
    int v60 = v62;
    uint64_t v61 = 0x300000000;
    unint64_t v54 = 8 * v36 - 8;
    if (v54 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v55 = 0;
    if (v36 != 1)
    {
      memcpy(v60, (const void *)(v56 + 8), 8 * v36 - 8);
      int v55 = v61;
    }
    LODWORD(v61) = v55 + (v54 >> 3);
    uint64_t v37 = sub_1CD478318(v53, (uint64_t)&v60, *(const llvm::Loop **)(AsAddRec + 48), 0);
    if (v60 != v62) {
      free(v60);
    }
    LOBYTE(v17) = v57;
    unsigned int v16 = v59;
  }
  if (v37) {
    BOOL v38 = *(unsigned __int16 *)(v37 + 24) == 0;
  }
  else {
    BOOL v38 = 0;
  }
  if (!v38) {
    return 0;
  }
  unsigned int v58 = v16;
  char v39 = v18;
  unsigned __int8 v40 = (llvm::DataLayout *)(*(void *)(*(void *)(**(void **)(a4 + 32) + 56) + 40) + 272);
  uint64_t v41 = sub_1CB83544C((uint64_t)v40, (uint64_t)a2);
  char Alignment = llvm::DataLayout::getAlignment(v40, a2, 1);
  uint64_t v43 = *(void *)(v37 + 32);
  unsigned int v44 = *(_DWORD *)(v43 + 32);
  if (v44 > 0x40) {
    return 0;
  }
  char v46 = Alignment;
  uint64_t result = 0;
  int64_t v47 = ((1 << v46) + ((unint64_t)(v41 + 7) >> 3) - 1) & -(1 << v46);
  uint64_t v48 = (uint64_t)(*(void *)(v43 + 24) << -(char)v44) >> -(char)v44;
  uint64_t v49 = v48 / v47;
  if (!(v48 % v47))
  {
    if (v39) {
      return v49;
    }
    if (v49 == -1 || v49 == 1) {
      return v49;
    }
    if (v17)
    {
      if (a6) {
        goto LABEL_87;
      }
      return 0;
    }
    uint64_t v51 = *(void *)(**(void **)(a4 + 32) + 56);
    if (v51)
    {
      uint64_t v52 = *(void *)(v51 + 112);
      if (v52)
      {
        if (*(unsigned char *)(v52 + 17)) {
          return v49;
        }
      }
    }
    if (v58 >= 0x100) {
      uint64_t result = v49;
    }
    else {
      uint64_t result = 0;
    }
    if (v58 <= 0xFF && (a6 & 1) != 0)
    {
LABEL_87:
      llvm::PredicatedScalarEvolution::setNoOverflow((uint64_t)a1, a3, 1);
      return v49;
    }
  }
  return result;
}

unint64_t llvm::getPointersDiff(llvm *this, llvm::Type *a2, llvm::Value *a3, llvm::Type *a4, llvm::Value *a5, const llvm::DataLayout *a6, llvm::ScalarEvolution *a7, char a8, BOOL a9)
{
  if (a2 == a4)
  {
    unsigned __int8 v36 = 0;
    unsigned int v37 = 0;
    uint64_t v35 = 1;
    return v37 | v36 | (unint64_t)(v35 << 32);
  }
  int v9 = (int)a7;
  if (this != a3 && (a8 & 1) != 0) {
    goto LABEL_27;
  }
  unsigned int v15 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v15 & 0xFE) == 0x12) {
    unsigned int v15 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  unsigned int v16 = v15 >> 8;
  unsigned int v17 = *(_DWORD *)(*(void *)a4 + 8);
  if ((v17 & 0xFE) == 0x12) {
    unsigned int v17 = *(_DWORD *)(**(void **)(*(void *)a4 + 16) + 8);
  }
  if (v16 != v17 >> 8)
  {
LABEL_27:
    uint64_t v35 = 0;
    unsigned __int8 v36 = 0;
    unsigned int v37 = 0;
    return v37 | v36 | (unint64_t)(v35 << 32);
  }
  if (v15 < 0x100) {
    goto LABEL_18;
  }
  uint64_t v18 = *((unsigned int *)a5 + 60);
  uint64_t v19 = *((void *)a5 + 29);
  if (v18)
  {
    uint64_t v19 = *((void *)a5 + 29);
    unint64_t v20 = *((unsigned int *)a5 + 60);
    do
    {
      unint64_t v21 = v20 >> 1;
      uint64_t v22 = v19 + 16 * (v20 >> 1);
      unsigned int v23 = *(_DWORD *)(v22 + 8);
      uint64_t v24 = v22 + 16;
      v20 += ~(v20 >> 1);
      if (v23 < v16) {
        uint64_t v19 = v24;
      }
      else {
        unint64_t v20 = v21;
      }
    }
    while (v20);
  }
  if (v19 == *((void *)a5 + 29) + 16 * v18 || *(_DWORD *)(v19 + 8) != v16) {
LABEL_18:
  }
    uint64_t v19 = *((void *)a5 + 29);
  unsigned int v25 = *(_DWORD *)(v19 + 12);
  unsigned int v81 = v25;
  if (v25 > 0x40) {
    operator new[]();
  }
  int v80 = 0;
  unsigned int v79 = v25;
  unint64_t v78 = 0;
  unsigned int v26 = llvm::Value::stripAndAccumulateConstantOffsets(a2, a5, (llvm::APInt *)&v80, 0, 0, 0, (uint64_t)a7);
  if (v26 == llvm::Value::stripAndAccumulateConstantOffsets(a4, a5, (llvm::APInt *)&v78, 0, 0, 0, v27))
  {
    unsigned int v45 = *(_DWORD *)(*(void *)v26 + 8);
    if (v45 < 0x100) {
      goto LABEL_48;
    }
    unsigned int v46 = v45 >> 8;
    uint64_t v47 = *((unsigned int *)a5 + 60);
    uint64_t v48 = *((void *)a5 + 29);
    if (v47)
    {
      uint64_t v48 = *((void *)a5 + 29);
      unint64_t v49 = *((unsigned int *)a5 + 60);
      do
      {
        unint64_t v50 = v49 >> 1;
        uint64_t v51 = v48 + 16 * (v49 >> 1);
        unsigned int v52 = *(_DWORD *)(v51 + 8);
        uint64_t v53 = v51 + 16;
        v49 += ~(v49 >> 1);
        if (v52 < v46) {
          uint64_t v48 = v53;
        }
        else {
          unint64_t v49 = v50;
        }
      }
      while (v49);
    }
    if (v48 == *((void *)a5 + 29) + 16 * v47 || *(_DWORD *)(v48 + 8) != v46) {
LABEL_48:
    }
      uint64_t v48 = *((void *)a5 + 29);
    unsigned int v54 = *(_DWORD *)(v48 + 12);
    llvm::APInt::sextOrTrunc((uint64_t)&v80, v54, (uint64_t)&v76);
    if (v81 >= 0x41 && v80) {
      MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
    }
    int v80 = v76;
    unsigned int v81 = v77;
    llvm::APInt::sextOrTrunc((uint64_t)&v78, v54, (uint64_t)&v76);
    if (v79 >= 0x41 && v78) {
      MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
    }
    int v55 = v76;
    unint64_t v78 = (unint64_t)v76;
    char v56 = v77;
    unsigned int v79 = v77;
    if (v77 >= 0x41)
    {
      uint64_t v68 = 0;
      uint64_t v69 = v80;
      unint64_t v70 = ((unint64_t)v77 + 63) >> 6;
      unint64_t v71 = v70;
      do
      {
        unint64_t v72 = *v69++;
        unint64_t v73 = *v55 - v72;
        BOOL v74 = *v55 < v72;
        unint64_t v75 = *v55 + ~v72;
        if (v68)
        {
          uint64_t v68 = v75 >= *v55;
        }
        else
        {
          unint64_t v75 = v73;
          uint64_t v68 = v74;
        }
        *v55++ = v75;
        --v71;
      }
      while (v71);
      *(void *)(v78 + 8 * (v70 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v56;
      char v56 = v79;
      if (v79 > 0x40)
      {
        unsigned int v64 = (uint64_t *)v78;
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v77;
      if (!v77) {
        unint64_t v57 = 0;
      }
      unint64_t v78 = v57 & ((char *)v76 - (char *)v80);
    }
    uint64_t v58 = (uint64_t)(v78 << -v56) >> -v56;
LABEL_74:
    unint64_t v66 = sub_1CB83544C((uint64_t)a5, (uint64_t)this) + 7;
    if (v65 == 1) {
    int v67 = (int)v58 / (int)(v66 >> 3);
    }
    if (v67 * (v66 >> 3) == v58) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v9 ^ 1u;
    }
    if (v35) {
      unsigned __int8 v36 = (int)v58 / (int)(v66 >> 3);
    }
    else {
      unsigned __int8 v36 = 0;
    }
    if (v35) {
      unsigned int v37 = v67 & 0xFFFFFF00;
    }
    else {
      unsigned int v37 = 0;
    }
    goto LABEL_85;
  }
  uint64_t v28 = *((void *)a6 + 13);
  unsigned int v29 = *((_DWORD *)a6 + 30);
  if (!v29) {
    goto LABEL_30;
  }
  unsigned int v30 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v31 = v28 + 48 * v30;
  uint64_t v32 = *(llvm::Type **)(v31 + 24);
  if (v32 != a2)
  {
    int v33 = 1;
    while (v32 != (llvm::Type *)-4096)
    {
      unsigned int v34 = v30 + v33++;
      unsigned int v30 = v34 & (v29 - 1);
      uint64_t v31 = v28 + 48 * v30;
      uint64_t v32 = *(llvm::Type **)(v31 + 24);
      if (v32 == a2) {
        goto LABEL_31;
      }
    }
LABEL_30:
    uint64_t v31 = v28 + 48 * v29;
  }
LABEL_31:
  if (v31 != v28 + 48 * v29)
  {
    uint64_t SCEVIter = *(const llvm::APInt **)(v31 + 40);
    if (SCEVIter)
    {
      if (v29) {
        goto LABEL_34;
      }
LABEL_61:
      uint64_t v41 = v28 + 48 * v29;
      goto LABEL_62;
    }
  }
  uint64_t SCEVIter = (const llvm::APInt *)llvm::ScalarEvolution::createSCEVIter(a6, (unint64_t)a2);
  uint64_t v28 = *((void *)a6 + 13);
  unsigned int v29 = *((_DWORD *)a6 + 30);
  if (!v29) {
    goto LABEL_61;
  }
LABEL_34:
  unsigned int v40 = (v29 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v41 = v28 + 48 * v40;
  unint64_t v42 = *(llvm::Type **)(v41 + 24);
  if (v42 != a4)
  {
    int v43 = 1;
    while (v42 != (llvm::Type *)-4096)
    {
      unsigned int v44 = v40 + v43++;
      unsigned int v40 = v44 & (v29 - 1);
      uint64_t v41 = v28 + 48 * v40;
      unint64_t v42 = *(llvm::Type **)(v41 + 24);
      if (v42 == a4) {
        goto LABEL_62;
      }
    }
    goto LABEL_61;
  }
LABEL_62:
  if (v41 == v28 + 48 * v29 || (unsigned int v59 = *(llvm::SCEV **)(v41 + 40)) == 0) {
    unsigned int v59 = (llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(a6, (unint64_t)a4);
  }
  Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(a6, v59, SCEVIter, 0, 0);
  if (MinusSCEV) {
    BOOL v61 = *(unsigned __int16 *)(MinusSCEV + 24) == 0;
  }
  else {
    BOOL v61 = 0;
  }
  if (v61)
  {
    uint64_t v62 = *(void *)(MinusSCEV + 32);
    unsigned int v63 = *(_DWORD *)(v62 + 32);
    if (v63 <= 0x40)
    {
      uint64_t v58 = (uint64_t)(*(void *)(v62 + 24) << -(char)v63) >> -(char)v63;
      goto LABEL_74;
    }
    unsigned int v64 = *(uint64_t **)(v62 + 24);
LABEL_73:
    uint64_t v58 = *v64;
    goto LABEL_74;
  }
  uint64_t v35 = 0;
  unsigned __int8 v36 = 0;
  unsigned int v37 = 0;
LABEL_85:
  if (v79 >= 0x41 && v78) {
    MEMORY[0x1D25D9CB0](v78, 0x1000C8000313F17);
  }
  if (v81 >= 0x41 && v80) {
    MEMORY[0x1D25D9CB0](v80, 0x1000C8000313F17);
  }
  return v37 | v36 | (unint64_t)(v35 << 32);
}

void llvm::MemoryDepChecker::addAccess(llvm::MemoryDepChecker *this, llvm::StoreInst *a2)
{
  uint64_t v2 = *((void *)a2 - 4);
  uint64_t v3 = *((void *)this + 1);
  v4[0] = this;
  v4[1] = a2;
  sub_1CC0723AC(v2, v3, (void (*)(uint64_t, uint64_t))sub_1CC077B8C, (uint64_t)v4);
}

void sub_1CC0723AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  v52[6] = *MEMORY[0x1E4F143B8];
  unsigned int v44 = v48;
  unsigned int v45 = v48;
  uint64_t v46 = 8;
  int v47 = 0;
  unint64_t v49 = v52;
  unsigned int v51 = 6;
  v52[0] = a1;
  unsigned int v7 = 1;
  do
  {
    uint64_t v8 = *((void *)v49 + v7 - 1);
    unsigned int v50 = v7 - 1;
    int v9 = v45;
    uint64_t v10 = HIDWORD(v46);
    if (v45 == v44)
    {
      if (HIDWORD(v46))
      {
        unint64_t v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v46);
        uint64_t v13 = v45;
        while (*(void *)v13 != v8)
        {
          if (*(void *)v13 == -2) {
            unint64_t v11 = v13;
          }
          v13 += 8;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_10;
            }
            *(void *)unint64_t v11 = v8;
            --v47;
            if (v8) {
              goto LABEL_35;
            }
            goto LABEL_77;
          }
        }
        goto LABEL_78;
      }
LABEL_10:
      unsigned int v14 = v46;
      if (HIDWORD(v46) < v46)
      {
        ++HIDWORD(v46);
        *(void *)&v45[8 * v10] = v8;
        if (!v8) {
          goto LABEL_77;
        }
        goto LABEL_35;
      }
    }
    else
    {
      unsigned int v14 = v46;
    }
    if (3 * v14 <= 4 * (HIDWORD(v46) - v47))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
LABEL_85:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v44, v14);
      unsigned int v14 = v46;
      int v9 = v45;
      goto LABEL_16;
    }
    if (v14 - HIDWORD(v46) < v14 >> 3) {
      goto LABEL_85;
    }
LABEL_16:
    unsigned int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    unsigned int v17 = &v9[8 * v16];
    uint64_t v18 = *(void *)v17;
    if (*(void *)v17 != -1)
    {
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != v8)
      {
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        unsigned int v22 = v16 + v20++;
        unsigned int v16 = v22 & v15;
        unsigned int v17 = &v9[8 * (v22 & v15)];
        uint64_t v18 = *(void *)v17;
        if (*(void *)v17 == -1) {
          goto LABEL_28;
        }
      }
      goto LABEL_78;
    }
    uint64_t v19 = 0;
LABEL_28:
    if (v19) {
      unsigned int v23 = v19;
    }
    else {
      unsigned int v23 = v17;
    }
    if (*(void *)v23 == v8) {
      goto LABEL_78;
    }
    if (*(void *)v23 == -2) {
      --v47;
    }
    else {
      ++HIDWORD(v46);
    }
    *(void *)unsigned int v23 = v8;
    if (!v8) {
      goto LABEL_77;
    }
LABEL_35:
    if (*(unsigned char *)(v8 + 16) != 83) {
      goto LABEL_77;
    }
    uint64_t v24 = *(void *)(v8 + 40);
    uint64_t v26 = *(void *)(a2 + 56);
    uint64_t v25 = *(void *)(a2 + 64);
    if (v25 == v26)
    {
      uint64_t v27 = *(unsigned int *)(a2 + 76);
      uint64_t v28 = (void *)(v25 + 8 * v27);
      if (v27)
      {
        uint64_t v29 = 0;
        while (*(void *)(v25 + v29) != v24)
        {
          v29 += 8;
          if (8 * v27 == v29) {
            goto LABEL_55;
          }
        }
        uint64_t v28 = (void *)(v25 + v29);
      }
LABEL_55:
      uint64_t v26 = *(void *)(a2 + 64);
    }
    else
    {
      uint64_t v30 = *(unsigned int *)(a2 + 72);
      int v31 = v30 - 1;
      unsigned int v32 = (v30 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v28 = (void *)(v25 + 8 * v32);
      uint64_t v33 = *v28;
      if (*v28 == -1)
      {
        unsigned int v34 = 0;
LABEL_71:
        if (v34) {
          uint64_t v28 = v34;
        }
        LODWORD(v27) = *(_DWORD *)(a2 + 76);
        int v43 = (void *)(v25 + 8 * v30);
        if (*v28 != v24) {
          uint64_t v28 = v43;
        }
      }
      else
      {
        unsigned int v34 = 0;
        int v35 = 1;
        while (v33 != v24)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v33 == -2;
          }
          if (v36) {
            unsigned int v34 = v28;
          }
          unsigned int v37 = v32 + v35++;
          unsigned int v32 = v37 & v31;
          uint64_t v28 = (void *)(v25 + 8 * (v37 & v31));
          uint64_t v33 = *v28;
          if (*v28 == -1) {
            goto LABEL_71;
          }
        }
        LODWORD(v27) = *(_DWORD *)(a2 + 76);
      }
    }
    unsigned int v38 = v25 == v26 ? v27 : *(_DWORD *)(a2 + 72);
    if (v28 == (void *)(v25 + 8 * v38) || v24 == **(void **)(a2 + 32))
    {
LABEL_77:
      a3(a4, v8);
LABEL_78:
      unsigned int v7 = v50;
      continue;
    }
    int v39 = *(_DWORD *)(v8 + 20);
    if ((v39 & 0x40000000) != 0)
    {
      uint64_t v41 = *(void **)(v8 - 8);
      uint64_t v40 = v39 & 0x7FFFFFF;
      if ((v39 & 0x7FFFFFF) == 0) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v40 = v39 & 0x7FFFFFF;
      uint64_t v41 = (void *)(v8 - 32 * v40);
      if ((v39 & 0x7FFFFFF) == 0) {
        goto LABEL_78;
      }
    }
    unsigned int v7 = v50;
    uint64_t v42 = 32 * v40;
    do
    {
      if (v7 >= v51) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v49 + v7) = *v41;
      unsigned int v7 = ++v50;
      v41 += 4;
      v42 -= 32;
    }
    while (v42);
  }
  while (v7);
  if (v49 != v52) {
    free(v49);
  }
  if (v45 != v44) {
    free(v45);
  }
}

void llvm::MemoryDepChecker::addAccess(llvm::MemoryDepChecker *this, llvm::LoadInst *a2)
{
  uint64_t v2 = *((void *)a2 - 4);
  uint64_t v3 = *((void *)this + 1);
  v4[0] = this;
  v4[1] = a2;
  sub_1CC0723AC(v2, v3, (void (*)(uint64_t, uint64_t))sub_1CC077EDC, (uint64_t)v4);
}

uint64_t llvm::MemoryDepChecker::Dependence::isSafeForVectorization(int a1)
{
  return dword_1CFAC3BDC[a1];
}

BOOL llvm::MemoryDepChecker::Dependence::isBackward(llvm::MemoryDepChecker::Dependence *this)
{
  return *((_DWORD *)this + 2) > 3u;
}

BOOL llvm::MemoryDepChecker::Dependence::isForward(llvm::MemoryDepChecker::Dependence *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFE) == 2;
}

BOOL llvm::MemoryDepChecker::couldPreventStoreLoadForward(llvm::MemoryDepChecker *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *((void *)this + 24);
  if (v3 >= a3 << 6) {
    unint64_t v4 = a3 << 6;
  }
  else {
    unint64_t v4 = *((void *)this + 24);
  }
  unint64_t v5 = 2 * a3;
  if (2 * a3 <= v4)
  {
    unint64_t v6 = 2 * a3;
    while (!(a2 % v6) || a2 / v6 >= 8 * a3)
    {
      v6 *= 2;
      if (v6 > v4) {
        goto LABEL_12;
      }
    }
    unint64_t v4 = v6 >> 1;
  }
LABEL_12:
  if (v4 >= v5 && v4 < v3 && v4 != a3 << 6) {
    *((void *)this + 24) = v4;
  }
  return v4 < v5;
}

uint64_t llvm::MemoryDepChecker::mergeInStatus(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 212) < a2) {
    *(_DWORD *)(result + 212) = a2;
  }
  return result;
}

uint64_t llvm::MemoryDepChecker::isDependent(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  v128[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  uint64_t v9 = *a4;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(v10 + 8 * a3);
  if (!v11 || *(unsigned char *)(v11 + 16) != 60) {
    uint64_t v11 = *(void *)(v11 - 64);
  }
  unsigned int v12 = (v8 >> 2) & 1;
  unsigned int v13 = (v9 >> 2) & 1;
  uint64_t v14 = *(void *)(v10 + 8 * a5);
  if (!v14 || *(unsigned char *)(v14 + 16) != 60) {
    uint64_t v14 = *(void *)(v14 - 64);
  }
  if (!(v12 | v13)) {
    goto LABEL_8;
  }
  unsigned int v17 = (llvm::Value *)(v8 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (llvm::Value *)(v9 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  unsigned int v20 = *(_DWORD *)(v19 + 8);
  if ((v20 & 0xFE) == 0x12) {
    unsigned int v20 = *(_DWORD *)(**(void **)(v19 + 16) + 8);
  }
  int v21 = *(_DWORD *)(*(void *)v18 + 8);
  if ((v21 & 0xFE) == 0x12) {
    int v21 = *(_DWORD *)(**(void **)(*(void *)v18 + 16) + 8);
  }
  if ((v21 ^ v20) > 0xFF) {
    goto LABEL_146;
  }
  unsigned int v22 = *(llvm::Type **)v11;
  unsigned int v23 = *(llvm::Type **)v14;
  uint64_t PtrStride = llvm::getPtrStride(*(int8x16_t **)a1, *(llvm::Type **)v11, v17, *(void *)(a1 + 8), a6, 1, 1);
  uint64_t v25 = llvm::getPtrStride(*(int8x16_t **)a1, v23, v18, *(void *)(a1 + 8), a6, 1, 1);
  uint64_t SCEV = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)a1, v17);
  uint64_t v27 = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)a1, v18);
  if (PtrStride < 0) {
    uint64_t v28 = (llvm::SCEV *)SCEV;
  }
  else {
    uint64_t v28 = (llvm::SCEV *)v27;
  }
  if (PtrStride < 0) {
    uint64_t v29 = (const llvm::APInt *)v27;
  }
  else {
    uint64_t v29 = (const llvm::APInt *)SCEV;
  }
  if (PtrStride < 0) {
    uint64_t v30 = PtrStride;
  }
  else {
    uint64_t v30 = v25;
  }
  if (PtrStride < 0)
  {
    uint64_t v31 = (uint64_t)v22;
  }
  else
  {
    uint64_t v25 = PtrStride;
    uint64_t v31 = (uint64_t)v23;
  }
  if (PtrStride < 0) {
    unsigned int v32 = v23;
  }
  else {
    unsigned int v32 = v22;
  }
  if (PtrStride < 0) {
    unsigned int v33 = v12;
  }
  else {
    unsigned int v33 = v13;
  }
  if (PtrStride < 0) {
    unsigned int v12 = v13;
  }
  Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(*(llvm::ScalarEvolution **)(*(void *)a1 + 88), v28, v29, 0, 0);
  unint64_t v16 = 0;
  uint64_t v15 = 1;
  if (v25 && v30 && v25 == v30)
  {
    NoopOrSignExtend = (llvm::detail::IEEEFloat **)MinusSCEV;
    unsigned int v125 = v12;
    unsigned int v36 = v33;
    unsigned int v37 = (llvm::DataLayout *)(*(void *)(*(void *)(**(void **)(*(void *)(a1 + 8) + 32) + 56) + 40) + 272);
    unint64_t v38 = (unint64_t)(sub_1CB83544C((uint64_t)v37, (uint64_t)v32) + 7) >> 3;
    BOOL v40 = v39 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v37, v32, 1);
    uint64_t v43 = (1 << Alignment) + v38 - 1;
    uint64_t v44 = -(1 << Alignment);
    if (v40) {
    unint64_t v45 = v43 & v44;
    }
    uint64_t v46 = sub_1CB83544C((uint64_t)v37, (uint64_t)v32) + 7;
    BOOL v48 = v47 != 1;
    uint64_t v49 = sub_1CB83544C((uint64_t)v37, v31);
    int v51 = v48 ^ (v50 == 1);
    if (((v49 + 7) ^ (unint64_t)v46) >= 8) {
      int v51 = 0;
    }
    if (v30 >= 0) {
      unint64_t v52 = v30;
    }
    else {
      unint64_t v52 = -v30;
    }
    if (*((_WORD *)NoopOrSignExtend + 12) || !NoopOrSignExtend)
    {
      if (*((_WORD *)NoopOrSignExtend + 12) == 15) {
        int v51 = 0;
      }
      if (v51 == 1)
      {
        uint64_t v58 = *(llvm::ScalarEvolution **)(*(void *)a1 + 88);
        uint64_t BackedgeTakenCount = llvm::PredicatedScalarEvolution::getBackedgeTakenCount(*(llvm::PredicatedScalarEvolution **)a1);
        uint64_t v60 = BackedgeTakenCount;
        while (2)
        {
          switch(*(_WORD *)(v60 + 24))
          {
            case 1:
            case 2:
            case 3:
            case 0xD:
              unint64_t v73 = (llvm::Type **)(v60 + 40);
              goto LABEL_110;
            case 4:
              unint64_t v73 = (llvm::Type **)(v60 + 48);
              goto LABEL_110;
            case 5:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
              BOOL v61 = *(uint64_t **)(v60 + 32);
              goto LABEL_54;
            case 6:
              BOOL v61 = (uint64_t *)(v60 + 40);
LABEL_54:
              uint64_t v60 = *v61;
              continue;
            case 0xE:
              unint64_t v73 = *(llvm::Type ***)(v60 - 8);
              goto LABEL_110;
            default:
              unint64_t v73 = *(llvm::Type ***)(v60 + 32);
LABEL_110:
              unint64_t Constant = llvm::ScalarEvolution::getConstant(v58, *v73, v45 * v52, 0);
              uint64_t v126 = v128;
              v128[0] = BackedgeTakenCount;
              v128[1] = Constant;
              uint64_t v127 = 0x200000002;
              MulExpr = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getMulExpr((uint64_t)v58, (uint64_t)&v126, 0, 0);
              if (v126 != v128) {
                free(v126);
              }
              unint64_t v87 = NoopOrSignExtend;
              while (2)
              {
                switch(*((_WORD *)v87 + 12))
                {
                  case 1:
                  case 2:
                  case 3:
                  case 0xD:
                    uint64_t v89 = (uint64_t *)(v87 + 5);
                    goto LABEL_120;
                  case 4:
                    uint64_t v89 = (uint64_t *)(v87 + 6);
                    goto LABEL_120;
                  case 5:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                    int v88 = (llvm::detail::IEEEFloat ***)v87[4];
                    goto LABEL_115;
                  case 6:
                    int v88 = (llvm::detail::IEEEFloat ***)(v87 + 5);
LABEL_115:
                    unint64_t v87 = *v88;
                    continue;
                  case 0xE:
                    uint64_t v89 = (uint64_t *)*(v87 - 1);
                    goto LABEL_120;
                  default:
                    uint64_t v89 = (uint64_t *)v87[4];
LABEL_120:
                    uint64_t v90 = (llvm::Type *)*v89;
                    unint64_t v91 = (unint64_t)(sub_1CB83544C((uint64_t)v37, *v89) + 7) >> 3;
                    BOOL v93 = v92 == 1;
                    char v94 = llvm::DataLayout::getAlignment(v37, v90, 1);
                    uint64_t v96 = (1 << v94) + v91 - 1;
                    uint64_t v97 = -(1 << v94);
                    if (v93) {
                    unint64_t v98 = v96 & v97;
                    }
                    uint64_t v99 = MulExpr;
                    while (2)
                    {
                      switch(*((_WORD *)v99 + 12))
                      {
                        case 1:
                        case 2:
                        case 3:
                        case 0xD:
                          uint64_t v101 = (uint64_t *)(v99 + 5);
                          goto LABEL_130;
                        case 4:
                          uint64_t v101 = (uint64_t *)(v99 + 6);
                          goto LABEL_130;
                        case 5:
                        case 7:
                        case 8:
                        case 9:
                        case 0xA:
                        case 0xB:
                        case 0xC:
                          unint64_t v100 = (llvm::detail::IEEEFloat ***)v99[4];
                          goto LABEL_125;
                        case 6:
                          unint64_t v100 = (llvm::detail::IEEEFloat ***)(v99 + 5);
LABEL_125:
                          uint64_t v99 = *v100;
                          continue;
                        case 0xE:
                          uint64_t v101 = (uint64_t *)*(v99 - 1);
                          goto LABEL_130;
                        default:
                          uint64_t v101 = (uint64_t *)v99[4];
LABEL_130:
                          unint64_t v102 = (llvm::Type *)*v101;
                          unint64_t v103 = (unint64_t)(sub_1CB83544C((uint64_t)v37, *v101) + 7) >> 3;
                          BOOL v105 = v104 == 1;
                          char v106 = llvm::DataLayout::getAlignment(v37, v102, 1);
                          unint64_t v108 = ((1 << v106) + v103 - 1) & -(1 << v106);
                          if (v105) {
                          if (v98 <= v108)
                          }
                          {
                            unsigned int v111 = MulExpr;
                            while (2)
                            {
                              switch(*((_WORD *)v111 + 12))
                              {
                                case 1:
                                case 2:
                                case 3:
                                case 0xD:
                                  unint64_t v114 = v111 + 5;
                                  goto LABEL_171;
                                case 4:
                                  unint64_t v114 = v111 + 6;
                                  goto LABEL_171;
                                case 5:
                                case 7:
                                case 8:
                                case 9:
                                case 0xA:
                                case 0xB:
                                case 0xC:
                                  uint64_t v112 = (llvm::detail::IEEEFloat ***)v111[4];
                                  goto LABEL_141;
                                case 6:
                                  uint64_t v112 = (llvm::detail::IEEEFloat ***)(v111 + 5);
LABEL_141:
                                  unsigned int v111 = *v112;
                                  continue;
                                case 0xE:
                                  unint64_t v114 = (llvm::Type **)*(v111 - 1);
                                  goto LABEL_171;
                                default:
                                  unint64_t v114 = (llvm::Type **)v111[4];
LABEL_171:
                                  NoopOrSignExtend = llvm::ScalarEvolution::getNoopOrSignExtend(v58, NoopOrSignExtend, *v114);
                                  break;
                              }
                              break;
                            }
                          }
                          else
                          {
                            unsigned int v109 = NoopOrSignExtend;
                            while (2)
                            {
                              switch(*((_WORD *)v109 + 12))
                              {
                                case 1:
                                case 2:
                                case 3:
                                case 0xD:
                                  unsigned int v113 = (uint64_t ***)(v109 + 5);
                                  goto LABEL_169;
                                case 4:
                                  unsigned int v113 = (uint64_t ***)(v109 + 6);
                                  goto LABEL_169;
                                case 5:
                                case 7:
                                case 8:
                                case 9:
                                case 0xA:
                                case 0xB:
                                case 0xC:
                                  unint64_t v110 = (llvm::detail::IEEEFloat ***)v109[4];
                                  goto LABEL_136;
                                case 6:
                                  unint64_t v110 = (llvm::detail::IEEEFloat ***)(v109 + 5);
LABEL_136:
                                  unsigned int v109 = *v110;
                                  continue;
                                case 0xE:
                                  unsigned int v113 = (uint64_t ***)*(v109 - 1);
                                  goto LABEL_169;
                                default:
                                  unsigned int v113 = (uint64_t ***)v109[4];
LABEL_169:
                                  MulExpr = (llvm::detail::IEEEFloat **)llvm::ScalarEvolution::getZeroExtendExpr(v58, MulExpr, *v113, 0);
                                  break;
                              }
                              break;
                            }
                          }
                          unsigned int v117 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v58, (llvm::SCEV *)NoopOrSignExtend, (const llvm::APInt *)MulExpr, 0, 0);
                          if (!llvm::ScalarEvolution::isKnownPositive(v58, v117))
                          {
                            Negativeuint64_t SCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(v58, (uint64_t)NoopOrSignExtend, 0);
                            unsigned int v119 = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v58, NegativeSCEV, (const llvm::APInt *)MulExpr, 0, 0);
                            if (!llvm::ScalarEvolution::isKnownPositive(v58, v119)) {
                              goto LABEL_174;
                            }
                          }
                          goto LABEL_8;
                      }
                    }
                }
              }
          }
        }
      }
LABEL_174:
      unint64_t v16 = 0;
      uint64_t v15 = 1;
      *(unsigned char *)(a1 + 208) = 1;
    }
    else
    {
      uint64_t v53 = NoopOrSignExtend[4];
      unsigned int v54 = (llvm::detail::IEEEFloat *)((char *)v53 + 24);
      uint64_t v55 = *((unsigned int *)v53 + 8);
      unint64_t v56 = *((void *)v53 + 3);
      if (v55 > 0x40) {
        unint64_t v57 = **(void **)v54;
      }
      else {
        unint64_t v57 = (uint64_t)(*(void *)v54 << -(char)v55) >> -(char)v55;
      }
      if ((v57 & 0x8000000000000000) == 0) {
        unint64_t v62 = v57;
      }
      else {
        unint64_t v62 = -(uint64_t)v57;
      }
      int v63 = v51 ^ 1;
      if (v57 && v52 >= 2 && (v63 & 1) == 0 && !(v62 % v45) && v62 / v45 % v52)
      {
LABEL_8:
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        return v15 | (v16 << 32);
      }
      unsigned int v64 = v55 - 1;
      if (v55 > 0x40)
      {
        if (((*(void *)(v56 + 8 * (v64 >> 6)) >> v64) & 1) == 0)
        {
          int v74 = 0;
          int64_t v75 = (unint64_t)(v55 + 63) >> 6;
          do
          {
            if (v75-- < 1) {
              break;
            }
            unint64_t v77 = *(void *)(v56 + 8 * v75);
            v74 += __clz(v77);
          }
          while (!v77);
          int v78 = v55 | 0xFFFFFFC0;
          if ((v55 & 0x3F) == 0) {
            int v78 = 0;
          }
          if ((v55 - v74 - v78) > 0x40)
          {
LABEL_97:
            if (v51)
            {
              int v79 = llvm::VectorizerParams::VectorizationFactor;
              if (llvm::VectorizerParams::VectorizationFactor <= 1) {
                int v79 = 1;
              }
              int v80 = llvm::VectorizerParams::VectorizationInterleave;
              if (llvm::VectorizerParams::VectorizationInterleave <= 1) {
                int v80 = 1;
              }
              unsigned int v81 = v80 * v79;
              if (v81 <= 2) {
                int v82 = 2;
              }
              else {
                int v82 = v81;
              }
              unint64_t v83 = v45 + v45 * v52 * (v82 - 1);
              if (v83 <= v57)
              {
                unint64_t v84 = *(void *)(a1 + 192);
                if (v83 <= v84)
                {
                  if (v84 >= v57) {
                    unint64_t v84 = v57;
                  }
                  *(void *)(a1 + 192) = v84;
                  unint64_t v120 = 8 * v45;
                  if (!v125 && v36 && byte_1EBCC6590)
                  {
                    if (v84 >= v45 << 6) {
                      unint64_t v121 = v45 << 6;
                    }
                    else {
                      unint64_t v121 = v84;
                    }
                    if (2 * v45 <= v121)
                    {
                      unint64_t v122 = 2 * v45;
                      while (!(v57 % v122) || v57 / v122 >= v120)
                      {
                        v122 *= 2;
                        if (v122 > v121) {
                          goto LABEL_197;
                        }
                      }
                      unint64_t v121 = v122 >> 1;
                    }
LABEL_197:
                    if (v121 < 2 * v45)
                    {
                      uint64_t v15 = 6;
                      goto LABEL_167;
                    }
                    if (v121 < v84 && v121 != v45 << 6)
                    {
                      *(void *)(a1 + 192) = v121;
                      unint64_t v84 = v121;
                    }
                  }
                  unint64_t v124 = v84 / (v45 * v52) * v120;
                  if (v124 >= *(void *)(a1 + 200)) {
                    unint64_t v124 = *(void *)(a1 + 200);
                  }
                  *(void *)(a1 + 200) = v124;
                  uint64_t v15 = 5;
                  goto LABEL_167;
                }
              }
              uint64_t v15 = 4;
LABEL_167:
              unint64_t v16 = v57 / v45;
              return v15 | (v16 << 32);
            }
LABEL_146:
            unint64_t v16 = 0;
            uint64_t v15 = 1;
            return v15 | (v16 << 32);
          }
          unint64_t v56 = *(void *)v56;
          goto LABEL_96;
        }
      }
      else if (((v56 >> v64) & 1) == 0)
      {
LABEL_96:
        if (v56) {
          goto LABEL_97;
        }
        if (!v51) {
          goto LABEL_146;
        }
LABEL_166:
        uint64_t v15 = 2;
        goto LABEL_167;
      }
      if (!v125 || v36 || !byte_1EBCC6590) {
        goto LABEL_166;
      }
      sub_1CBF71A98(v54, (llvm::APInt *)&v126);
      unsigned int v65 = v127;
      unint64_t v66 = v126;
      if (v127 >= 0x41) {
        int v67 = (unint64_t *)v126;
      }
      else {
        int v67 = (unint64_t *)&v126;
      }
      unint64_t v68 = *(void *)(a1 + 192);
      if (v68 >= v45 << 6) {
        unint64_t v69 = v45 << 6;
      }
      else {
        unint64_t v69 = *(void *)(a1 + 192);
      }
      if (2 * v45 <= v69)
      {
        unint64_t v70 = *v67;
        unint64_t v71 = 2 * v45;
        while (!(v70 % v71) || v70 / v71 >= 8 * v45)
        {
          v71 *= 2;
          if (v71 > v69) {
            goto LABEL_150;
          }
        }
        unint64_t v69 = v71 >> 1;
      }
LABEL_150:
      if (v69 >= 2 * v45)
      {
        if (v69 < v68 && v69 != v45 << 6) {
          *(void *)(a1 + 192) = v69;
        }
      }
      else
      {
        int v63 = 1;
      }
      if (v65 >= 0x41 && v66) {
        MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
      }
      if (!v63) {
        goto LABEL_166;
      }
      sub_1CBF71A98(v54, (llvm::APInt *)&v126);
      if (v127 >= 0x41) {
        uint64_t v116 = v126;
      }
      else {
        uint64_t v116 = &v126;
      }
      unint64_t v16 = *v116 / v45;
      if (v127 >= 0x41 && v126) {
        MEMORY[0x1D25D9CB0]();
      }
      uint64_t v15 = 3;
    }
  }
  return v15 | (v16 << 32);
}

BOOL llvm::MemoryDepChecker::areDepsSafe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 192) = -1;
  unint64_t v77 = v81;
  int v78 = v81;
  uint64_t v79 = 8;
  int v80 = 0;
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5)
  {
    unsigned int v7 = *(void **)a3;
    uint64_t v8 = *(void *)a3 + 8 * v5;
    uint64_t v9 = (void *)(a2 + 8);
    uint64_t v75 = a1 + 16;
    while (1)
    {
      uint64_t v10 = *v7;
      uint64_t v11 = v77;
      if (v78 == v77)
      {
        int v12 = HIDWORD(v79);
        unsigned int v13 = &v78[8 * HIDWORD(v79)];
        if (HIDWORD(v79))
        {
          uint64_t v14 = 0;
          while (*(void *)&v78[v14] != v10)
          {
            v14 += 8;
            if (8 * HIDWORD(v79) == v14) {
              goto LABEL_22;
            }
          }
          unsigned int v13 = &v78[v14];
        }
LABEL_22:
        uint64_t v11 = v78;
      }
      else
      {
        int v15 = v79 - 1;
        unsigned int v16 = (v79 - 1) & ((v10 >> 4) ^ (v10 >> 9));
        unsigned int v13 = &v78[8 * v16];
        uint64_t v17 = *(void *)v13;
        if (*(void *)v13 == -1)
        {
          uint64_t v18 = 0;
LABEL_40:
          if (v18) {
            unsigned int v13 = v18;
          }
          int v12 = HIDWORD(v79);
          if (*(void *)v13 != v10) {
            unsigned int v13 = &v78[8 * v79];
          }
        }
        else
        {
          uint64_t v18 = 0;
          int v19 = 1;
          while (v17 != v10)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              uint64_t v18 = v13;
            }
            unsigned int v21 = v16 + v19++;
            unsigned int v16 = v21 & v15;
            unsigned int v13 = &v78[8 * (v21 & v15)];
            uint64_t v17 = *(void *)v13;
            if (*(void *)v13 == -1) {
              goto LABEL_40;
            }
          }
          int v12 = HIDWORD(v79);
        }
      }
      int v22 = v78 == v11 ? v12 : v79;
      if (v13 == &v78[8 * v22]) {
        break;
      }
LABEL_57:
      if (++v7 == (void *)v8) {
        goto LABEL_138;
      }
    }
    unsigned int v23 = (void *)*v9;
    if (!*v9) {
      goto LABEL_55;
    }
    uint64_t v24 = (void *)*v9;
    uint64_t v25 = v9;
    do
    {
      uint64_t v26 = v24[6];
      BOOL v27 = v26 < v10;
      if (v26 >= v10) {
        uint64_t v28 = v24;
      }
      else {
        uint64_t v28 = v24 + 1;
      }
      if (!v27) {
        uint64_t v25 = v24;
      }
      uint64_t v24 = (void *)*v28;
    }
    while (*v28);
    if (v25 == v9 || v10 < v25[6])
    {
      uint64_t v29 = 0;
      if (!v23) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v29 = sub_1CC076E58((uint64_t)(v25 + 4));
      unsigned int v23 = (void *)*v9;
      if (!*v9)
      {
LABEL_55:
        uint64_t v31 = v9;
LABEL_56:
        if ((v31[5] & 1) == 0) {
          goto LABEL_57;
        }
        unint64_t v35 = (unint64_t)(v31 + 4);
        uint64_t v71 = v8;
        unint64_t v72 = v7;
        unint64_t v70 = v9;
        while (1)
        {
          unsigned int v36 = (unint64_t *)(v35 + 16);
          uint64_t v37 = *(void *)(v35 + 16);
          unint64_t v38 = v78;
          uint64_t v39 = HIDWORD(v79);
          if (v78 != v77) {
            break;
          }
          if (!HIDWORD(v79)) {
            goto LABEL_68;
          }
          BOOL v40 = 0;
          uint64_t v41 = 8 * HIDWORD(v79);
          uint64_t v42 = v78;
          do
          {
            if (*v42 == v37) {
              goto LABEL_92;
            }
            if (*v42 == -2) {
              BOOL v40 = v42;
            }
            ++v42;
            v41 -= 8;
          }
          while (v41);
          if (v40)
          {
            *BOOL v40 = v37;
            --v80;
          }
          else
          {
LABEL_68:
            unsigned int v43 = v79;
            if (HIDWORD(v79) >= v79) {
              goto LABEL_71;
            }
            ++HIDWORD(v79);
            *(void *)&v78[8 * v39] = v37;
          }
LABEL_92:
          unint64_t v53 = v35;
          if ((*(unsigned char *)v36 & 4) == 0) {
            unint64_t v53 = *(void *)(v35 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          if (!v53) {
            goto LABEL_129;
          }
          unint64_t v73 = v35;
          do
          {
            unsigned int v54 = (unsigned int *)sub_1CC07803C(v75, v36)[1];
            unsigned int v76 = (unsigned int *)sub_1CC07803C(v75, v36)[2];
            if (v54 == v76) {
              goto LABEL_128;
            }
            uint64_t v55 = (unint64_t *)(v53 + 16);
            unint64_t v74 = v53;
            while (2)
            {
              if (v35 == v53)
              {
                unint64_t v56 = v54 + 1;
                unint64_t v57 = v76;
              }
              else
              {
                unint64_t v56 = (unsigned int *)sub_1CC07803C(v75, v55)[1];
                unint64_t v57 = (unsigned int *)sub_1CC07803C(v75, v55)[2];
              }
              while (v56 != v57)
              {
                unsigned int v58 = *v54;
                unsigned int v59 = *v56;
                if (*v54 > *v56) {
                  uint64_t v60 = (uint64_t *)v36;
                }
                else {
                  uint64_t v60 = (uint64_t *)v55;
                }
                if (v58 > v59) {
                  uint64_t v61 = v58;
                }
                else {
                  uint64_t v61 = v59;
                }
                if (v58 > v59) {
                  unint64_t v62 = (uint64_t *)v55;
                }
                else {
                  unint64_t v62 = (uint64_t *)v36;
                }
                if (v58 > v59) {
                  uint64_t v63 = v59;
                }
                else {
                  uint64_t v63 = v58;
                }
                uint64_t isDependent = llvm::MemoryDepChecker::isDependent(a1, v62, v63, v60, v61, a4);
                signed int v65 = dword_1CFAC3BDC[(int)isDependent];
                if (*(_DWORD *)(a1 + 212) < v65) {
                  *(_DWORD *)(a1 + 212) = v65;
                }
                if (*(unsigned char *)(a1 + 216))
                {
                  unsigned int v66 = *(_DWORD *)(a1 + 232);
                  if (isDependent)
                  {
                    if (v66 >= *(_DWORD *)(a1 + 236)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    int v67 = (uint64_t *)(*(void *)(a1 + 224) + 16 * v66);
                    *int v67 = v63 | (v61 << 32);
                    v67[1] = isDependent;
                    unsigned int v66 = *(_DWORD *)(a1 + 232) + 1;
                    *(_DWORD *)(a1 + 232) = v66;
                  }
                  if (v66 >= dword_1EBCC6410)
                  {
                    *(unsigned char *)(a1 + 216) = 0;
                    *(_DWORD *)(a1 + 232) = 0;
                  }
                  else if (*(unsigned char *)(a1 + 216))
                  {
                    goto LABEL_125;
                  }
                }
                if (*(_DWORD *)(a1 + 212))
                {
                  BOOL v68 = 0;
                  goto LABEL_139;
                }
LABEL_125:
                ++v56;
              }
              ++v54;
              unint64_t v35 = v73;
              unint64_t v53 = v74;
              if (v54 != v76) {
                continue;
              }
              break;
            }
LABEL_128:
            unint64_t v53 = *(void *)(v53 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v53);
LABEL_129:
          unint64_t v35 = *(void *)(v35 + 8) & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v8 = v71;
          unsigned int v7 = v72;
          uint64_t v9 = v70;
          if (!v35) {
            goto LABEL_57;
          }
        }
        unsigned int v43 = v79;
LABEL_71:
        if (3 * v43 <= 4 * (HIDWORD(v79) - v80))
        {
          if (v43 >= 0x40) {
            v43 *= 2;
          }
          else {
            unsigned int v43 = 128;
          }
        }
        else if (v43 - HIDWORD(v79) >= v43 >> 3)
        {
          goto LABEL_73;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v77, v43);
        unsigned int v43 = v79;
        unint64_t v38 = v78;
LABEL_73:
        unsigned int v44 = v43 - 1;
        unsigned int v45 = (v43 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        uint64_t v46 = &v38[8 * v45];
        uint64_t v47 = *(void *)v46;
        if (*(void *)v46 == -1)
        {
          BOOL v48 = 0;
LABEL_85:
          if (v48) {
            unint64_t v52 = v48;
          }
          else {
            unint64_t v52 = v46;
          }
          if (*(void *)v52 != v37)
          {
            if (*(void *)v52 == -2) {
              --v80;
            }
            else {
              ++HIDWORD(v79);
            }
            *(void *)unint64_t v52 = v37;
          }
        }
        else
        {
          BOOL v48 = 0;
          int v49 = 1;
          while (v47 != v37)
          {
            if (v48) {
              BOOL v50 = 0;
            }
            else {
              BOOL v50 = v47 == -2;
            }
            if (v50) {
              BOOL v48 = v46;
            }
            unsigned int v51 = v45 + v49++;
            unsigned int v45 = v51 & v44;
            uint64_t v46 = &v38[8 * (v51 & v44)];
            uint64_t v47 = *(void *)v46;
            if (*(void *)v46 == -1) {
              goto LABEL_85;
            }
          }
        }
        goto LABEL_92;
      }
    }
    uint64_t v30 = *(void *)(v29 + 16);
    uint64_t v31 = v9;
    do
    {
      uint64_t v32 = v23[6];
      BOOL v33 = v32 < v30;
      if (v32 >= v30) {
        unsigned int v34 = v23;
      }
      else {
        unsigned int v34 = v23 + 1;
      }
      if (!v33) {
        uint64_t v31 = v23;
      }
      unsigned int v23 = (void *)*v34;
    }
    while (*v34);
    if (v31 != v9 && v30 >= v31[6]) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_138:
  BOOL v68 = *(_DWORD *)(a1 + 212) == 0;
LABEL_139:
  if (v78 != v77) {
    free(v78);
  }
  return v68;
}

void llvm::LoopAccessInfo::canAnalyzeLoop(llvm::LoopAccessInfo *this)
{
  if (*(void *)(*((void *)this + 3) + 8) == *(void *)(*((void *)this + 3) + 16)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges();
  }
  llvm::LoopAccessInfo::recordAnalysis((uint64_t)this);
}

void llvm::LoopAccessInfo::recordAnalysis(uint64_t a1)
{
}

void llvm::LoopAccessInfo::analyzeLoop(uint64_t a1)
{
  uint64_t v1 = a1;
  *(unsigned char *)(a1 + 49) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(v2 + 16);
  unint64_t v4 = (unsigned char *)v2;
  if (v3)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = v5 + (v3 << 6);
    do
    {
      uint64_t v7 = *(void *)(v6 - 48);
      if (v7 != -8192 && v7 != -4096 && v7 != 0)
      {
        unint64_t v9 = *(void *)(v6 - 64) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v9 = *(void *)(v6 - 56);
        uint64_t v10 = *(unint64_t **)(v6 - 56);
        if (v10)
        {
          *uint64_t v10 = *v10 & 7 | v9;
        }
        else
        {
          uint64_t v11 = *(void *)(v6 - 48);
          int v12 = ***(int32x2_t ****)v11;
          unint64_t v13 = (unint64_t)v12[303];
          if (v13 <= v9)
          {
            uint64_t v14 = v12[305].u32[0];
            if (v13 + 16 * v14 > v9)
            {
              unsigned int v15 = v14 - 1;
              LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
              uint64_t v17 = (uint64_t *)(v13 + 16 * v16);
              uint64_t v18 = *v17;
              if (v11 != *v17)
              {
                int v19 = 1;
                do
                {
                  if (v18 == -4096) {
                    goto LABEL_20;
                  }
                  int v20 = v16 + v19++;
                  uint64_t v16 = v20 & v15;
                  uint64_t v18 = *(void *)(v13 + 16 * v16);
                }
                while (v11 != v18);
                uint64_t v17 = (uint64_t *)(v13 + 16 * v16);
              }
              *uint64_t v17 = -8192;
              v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v11 = *(void *)(v6 - 48);
LABEL_20:
              *(unsigned char *)(v11 + 17) &= ~1u;
            }
          }
        }
      }
      v6 -= 64;
    }
    while (v6 != v5);
    uint64_t v1 = a1;
    unint64_t v4 = *(unsigned char **)(a1 + 8);
  }
  *(_DWORD *)(v2 + 16) = 0;
  *unint64_t v4 = 0;
  llvm::Loop::isAnnotatedParallel(*(llvm::Loop **)(v1 + 24));
}

uint64_t llvm::LoopAccessInfo::collectStridedAccess(uint64_t this, llvm::Value *a2, uint64_t a3, llvm::Loop *a4)
{
  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 16) - 62 >= 0xFFFFFFFE)
    {
      unint64_t v4 = (llvm::ScalarEvolution **)this;
      this = *((void *)a2 - 4);
      uint64_t v29 = this;
      if (this)
      {
        this = llvm::getStrideFromPointer((llvm *)this, *((llvm::Value **)*v4 + 11), v4[3], a4);
        if (this)
        {
          uint64_t v5 = this;
          uint64_t SCEV = (llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)*v4, (llvm::Value *)this);
          uint64_t BackedgeTakenCount = (llvm::SCEV *)llvm::PredicatedScalarEvolution::getBackedgeTakenCount(*v4);
          uint64_t v8 = (llvm::DataLayout *)(*(void *)(*(void *)(**((void **)v4[3] + 4) + 56) + 40) + 272);
          Type = (llvm::Type *)llvm::SCEV::getType(SCEV);
          unint64_t v10 = (unint64_t)(sub_1CB83544C((uint64_t)v8, (uint64_t)Type) + 7) >> 3;
          BOOL v12 = v11 == 1;
          char Alignment = llvm::DataLayout::getAlignment(v8, Type, 1);
          uint64_t v15 = (1 << Alignment) + v10 - 1;
          uint64_t v16 = -(1 << Alignment);
          if (v12) {
          unint64_t v17 = v15 & v16;
          }
          uint64_t v18 = (llvm::Type *)llvm::SCEV::getType(BackedgeTakenCount);
          unint64_t v19 = (unint64_t)(sub_1CB83544C((uint64_t)v8, (uint64_t)v18) + 7) >> 3;
          BOOL v21 = v20 == 1;
          char v22 = llvm::DataLayout::getAlignment(v8, v18, 1);
          unint64_t v24 = ((1 << v22) + v19 - 1) & -(1 << v22);
          if (v21) {
          uint64_t v25 = (llvm::ScalarEvolution *)*((void *)*v4 + 11);
          }
          if (v24 < v17)
          {
            uint64_t v28 = (uint64_t **)llvm::SCEV::getType(SCEV);
            uint64_t BackedgeTakenCount = (llvm::SCEV *)llvm::ScalarEvolution::getZeroExtendExpr(v25, (llvm::detail::IEEEFloat **)BackedgeTakenCount, v28, 0);
          }
          else
          {
            uint64_t v26 = (llvm::Type *)llvm::SCEV::getType(BackedgeTakenCount);
            uint64_t SCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNoopOrSignExtend(v25, (llvm::detail::IEEEFloat **)SCEV, v26);
          }
          Minusuint64_t SCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getMinusSCEV(v25, SCEV, BackedgeTakenCount, 0, 0);
          this = llvm::ScalarEvolution::isKnownPositive(v25, MinusSCEV);
          if ((this & 1) == 0)
          {
            sub_1CD49F0C0((uint64_t *)v4 + 8, &v29)[1] = v5;
            return (uint64_t)sub_1CB89694C((llvm::SmallPtrSetImplBase *)(v4 + 11), v5);
          }
        }
      }
    }
  }
  return this;
}

BOOL llvm::LoopAccessInfo::isUniform(const llvm::Loop **this, llvm::Value *a2)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
    return 0;
  }
  uint64_t v3 = *((void *)*this + 11);
  uint64_t v4 = *(void *)(v3 + 104);
  unsigned int v5 = *(_DWORD *)(v3 + 120);
  if (v5)
  {
    unsigned int v6 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = v4 + 48 * v6;
    uint64_t v8 = *(llvm::Value **)(v7 + 24);
    if (v8 == a2) {
      goto LABEL_9;
    }
    int v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (v5 - 1);
      uint64_t v7 = v4 + 48 * v6;
      uint64_t v8 = *(llvm::Value **)(v7 + 24);
      if (v8 == a2) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = v4 + 48 * v5;
LABEL_9:
  if (v7 == v4 + 48 * v5 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v7 + 40)) == 0) {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*((llvm::ScalarEvolution **)*this + 11), (unint64_t)a2);
  }
  return llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v3, SCEVIter, this[3]) == 1;
}

unint64_t sub_1CC0757C4(uint64_t a1, unint64_t *a2)
{
  if (*(void *)(a1 + 288)) {
    return ((unint64_t)sub_1CC0780AC((uint64_t **)(a1 + 272), *a2, a2[1], a2) << 32) | 1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int64x2_t v5 = *(int64x2_t *)a2;
    uint64_t v6 = 16 * v4;
    uint64_t v7 = *(int64x2_t **)a1;
    while (1)
    {
      int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, v5));
      if (v8.i32[0] & v8.i32[1]) {
        break;
      }
      ++v7;
      v6 -= 16;
      if (!v6) {
        goto LABEL_6;
      }
    }
    if (v6) {
      return 1;
    }
LABEL_6:
    if (v4 <= 0xF) {
      goto LABEL_7;
    }
    do
    {
      sub_1CC0780AC((uint64_t **)(a1 + 272), *(void *)(*(void *)a1 + 16 * v4 - 16), *(void *)(*(void *)a1 + 16 * v4 - 8), (_OWORD *)(*(void *)a1 + 16 * v4 - 16));
      LODWORD(v4) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    while (v4);
    sub_1CC0780AC((uint64_t **)(a1 + 272), *a2, a2[1], a2);
  }
  else
  {
    int64x2_t v5 = *(int64x2_t *)a2;
LABEL_7:
    if (v4 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(int64x2_t *)(*(void *)a1 + 16 * v4) = v5;
    ++*(_DWORD *)(a1 + 8);
  }
  return 0x100000001;
}

uint64_t sub_1CC075900(uint64_t a1, uint64_t a2, const llvm::Loop *a3, uint64_t a4, unint64_t *a5, char a6)
{
  v83[4] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 376)) {
    return 1;
  }
  uint64_t v6 = a2;
  int v62 = *(_DWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 312);
  uint64_t v69 = a1 + 304;
  if (v8 == a1 + 304)
  {
    int v65 = 1;
    int v66 = 0;
    goto LABEL_67;
  }
  int v66 = 0;
  int v12 = 0;
  int v65 = 1;
  do
  {
    int v13 = v12 + 1;
    unsigned int v77 = 1;
    v75[0] = 0;
    v75[1] = 0;
    int v76 = 0;
    unsigned int v81 = v83;
    uint64_t v82 = 0x400000000;
    int v78 = v80;
    uint64_t v79 = 0x400000000;
    uint64_t v14 = *(unint64_t **)(v8 + 16);
    if (!v14)
    {
      ++v12;
      goto LABEL_60;
    }
    int v68 = v12;
    uint64_t v70 = v8;
    LODWORD(v15) = 0;
    int v16 = 0;
    int v17 = 0;
    do
    {
      unint64_t v18 = *v14;
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = *(unsigned int *)(a1 + 16);
      if (v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v18 >> 9) ^ (v18 | 4));
        char v22 = (uint64_t *)(v19 + 16 * v21);
        uint64_t v23 = *v22;
        if ((v18 | 4) == *v22) {
          goto LABEL_13;
        }
        int v24 = 1;
        while (v23 != -4)
        {
          int v25 = v21 + v24++;
          uint64_t v21 = v25 & (v20 - 1);
          uint64_t v23 = *(void *)(v19 + 16 * v21);
          if ((v18 | 4) == v23)
          {
            char v22 = (uint64_t *)(v19 + 16 * v21);
            goto LABEL_13;
          }
        }
      }
      char v22 = (uint64_t *)(v19 + 16 * v20);
LABEL_13:
      uint64_t v26 = (uint64_t *)(v19 + 16 * v20);
      if (v22 == v26) {
        ++v16;
      }
      else {
        ++v17;
      }
      if (v15 >= HIDWORD(v79)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v78 + v15) = v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v22 != v26));
      uint64_t v15 = (v15 + 1);
      LODWORD(v79) = v15;
      uint64_t v14 = (unint64_t *)v14[2];
    }
    while (v14);
    if (!v17 || (v17 == 1 ? (BOOL v27 = v16 == 0) : (BOOL v27 = 0), v27))
    {
      int v12 = v13;
    }
    else
    {
      if (v15)
      {
        uint64_t v28 = (uint64_t *)v78;
        uint64_t v71 = (uint64_t *)((char *)v78 + 8 * v15);
        int v29 = 1;
        do
        {
          uint64_t v30 = sub_1CC076FD8(a1, (void **)v28);
          uint64_t v31 = *(unsigned int *)(v30 + 32);
          if (v31)
          {
            uint64_t v32 = *(llvm::Type ***)(v30 + 24);
            uint64_t v33 = 8 * v31;
            do
            {
              if ((sub_1CC0773EC(a1, v6, *v28, *v32, a4, (uint64_t)v75, a3, &v77, v13, a6, 0) & 1) == 0)
              {
                if (v82 >= (unint64_t)HIDWORD(v82)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v29 = 0;
                v81[v82] = *v28;
                LODWORD(v82) = v82 + 1;
                uint64_t v6 = a2;
              }
              ++v32;
              v33 -= 8;
            }
            while (v33);
          }
          ++v28;
        }
        while (v28 != v71);
        BOOL v35 = v77 > 2 || v82 != 0;
        if (!(v29 & 1 | !v35))
        {
          BOOL v63 = v35;
          if (v82)
          {
            unsigned int v36 = v81;
            unint64_t v72 = &v81[v82];
            int v67 = 1;
            do
            {
              uint64_t v37 = *v36;
              unint64_t v74 = (void *)*v36;
              uint64_t v38 = sub_1CC076FD8(a1, &v74);
              uint64_t v39 = *(unsigned int *)(v38 + 32);
              if (v39)
              {
                BOOL v40 = *(llvm::Type ***)(v38 + 24);
                uint64_t v41 = 8 * v39;
                while ((sub_1CC0773EC(a1, v6, v37, *v40, a4, (uint64_t)v75, a3, &v77, v13, a6, 1) & 1) != 0)
                {
                  ++v40;
                  v41 -= 8;
                  if (!v41) {
                    goto LABEL_51;
                  }
                }
                int v67 = 0;
                *a5 = v37 & 0xFFFFFFFFFFFFFFF8;
              }
LABEL_51:
              ++v36;
            }
            while (v36 != v72);
          }
          else
          {
            int v67 = 1;
          }
          int v29 = v67;
          BOOL v35 = v63;
        }
      }
      else
      {
        BOOL v35 = v82 != 0;
        int v29 = 1;
      }
      v65 &= v29;
      v66 |= v35;
      int v12 = v68 + 2;
    }
    uint64_t v8 = v70;
LABEL_60:
    if (v78 != v80) {
      free(v78);
    }
    if (v81 != v83) {
      free(v81);
    }
    MEMORY[0x1D25D9CD0](v75[0], 8);
    uint64_t v8 = *(void *)(v8 + 8);
  }
  while (v8 != v69);
LABEL_67:
  unint64_t v42 = *(unsigned int *)(v6 + 16);
  if (!v42)
  {
LABEL_80:
    char v59 = v65;
    BOOL v58 = v66;
    if (v66 & v65)
    {
      llvm::RuntimePointerChecking::generateChecks((llvm::RuntimePointerChecking *)v6, *(void *)(a1 + 368), v62 != 0);
      char v59 = v65;
      BOOL v58 = v66;
    }
    BOOL v60 = *(_DWORD *)(v6 + 288) != 0;
    if ((v59 & 1) == 0) {
      BOOL v60 = v58;
    }
    *(unsigned char *)uint64_t v6 = v60;
    if (!(v59 & 1 | !v60))
    {
      sub_1CD49CEAC((void *)v6);
      return 0;
    }
    return 1;
  }
  uint64_t v43 = 0;
  uint64_t v44 = *(void *)(v6 + 8);
  int v45 = v42 - 1;
  uint64_t v46 = (_DWORD *)(v44 + 112);
  while (1)
  {
    uint64_t v47 = v43 + 1;
    if (v43 + 1 < v42) {
      break;
    }
LABEL_79:
    --v45;
    v46 += 16;
    uint64_t v43 = v47;
    if (v47 == v42) {
      goto LABEL_80;
    }
  }
  uint64_t v48 = v44 + (v43 << 6);
  int v49 = *(_DWORD *)(v48 + 44);
  BOOL v50 = (_DWORD *)(v48 + 48);
  unsigned int v51 = (uint64_t **)(v48 + 16);
  unint64_t v52 = v46;
  int v53 = v45;
  while (1)
  {
    if (v49 != *(v52 - 1) && *v50 == *v52)
    {
      uint64_t v54 = **v51;
      unsigned int v55 = *(_DWORD *)(v54 + 8);
      if ((v55 & 0xFE) == 0x12) {
        unsigned int v55 = *(_DWORD *)(**(void **)(v54 + 16) + 8);
      }
      uint64_t v56 = **((void **)v52 - 4);
      int v57 = *(_DWORD *)(v56 + 8);
      if ((v57 & 0xFE) == 0x12) {
        int v57 = *(_DWORD *)(**(void **)(v56 + 16) + 8);
      }
      if ((v57 ^ v55) > 0xFF) {
        return 0;
      }
    }
    v52 += 16;
    if (!--v53) {
      goto LABEL_79;
    }
  }
}

uint64_t llvm::LoopAccessInfo::emitUnsafeDependenceRemark(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (*(unsigned char *)(v1 + 216))
  {
    uint64_t v2 = *(unsigned int *)(v1 + 232);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 224) + 4;
      uint64_t v4 = 16 * v2;
      do
      {
        if (((1 << *(_DWORD *)(v3 + 4)) & 0x25) == 0) {
          llvm::LoopAccessInfo::recordAnalysis(this);
        }
        v3 += 16;
        v4 -= 16;
      }
      while (v4);
    }
  }
  return this;
}

void llvm::LoopAccessInfo::LoopAccessInfo()
{
}

void sub_1CC076464(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v13 = v17;
  uint64_t v14 = v17;
  int v16 = 0;
  uint64_t v15 = 0x100000008;
  v17[0] = v3;
  uint64_t v4 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v4 = v3;
  v4[8] = 0;
  v4[16] = 0;
  uint64_t v19 = v4 + 24;
  uint64_t v20 = v4 + 24;
  unint64_t v18 = v4;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  __p = 0;
  int64x2_t v5 = (char *)v8 + 8;
  uint64_t v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  int v11 = 0;
  uint64_t v12 = 0;
  sub_1CBFE63FC((uint64_t)&v13, (uint64_t)&v5, a2);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (v14 != v13) {
    free(v14);
  }
}

void sub_1CC07656C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  operator new();
}

void llvm::LoopAccessAnalysis::run()
{
}

void llvm::createLAAPass(llvm *this)
{
}

void sub_1CC07667C(void *a1)
{
  *a1 = &unk_1F26050E8;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

void **sub_1CC076744(void **result, uint64_t a2)
{
  v34[24] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t ***)*(result - 4);
  if (!v2) {
    return result;
  }
  if (*((unsigned char *)v2 + 16)) {
    return result;
  }
  uint64_t v3 = result;
  if (v2[3] != result[9]) {
    return result;
  }
  if ((*((unsigned char *)v2 + 23) & 0x10) == 0)
  {
    size_t v15 = 0;
    uint64_t v14 = &byte_1CFBCE98E;
    goto LABEL_12;
  }
  uint64_t v5 = ***v2;
  uint64_t v6 = *(void *)(v5 + 152);
  uint64_t v7 = *(unsigned int *)(v5 + 168);
  if (!v7) {
    goto LABEL_15;
  }
  LODWORD(v8) = (v7 - 1) & ((v2 >> 4) ^ (v2 >> 9));
  uint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
  unsigned int v10 = *v9;
  if (*v9 != v2)
  {
    int v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      unsigned int v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == v2)
      {
        uint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_11;
      }
    }
LABEL_15:
    uint64_t v9 = (uint64_t ****)(v6 + 16 * v7);
  }
LABEL_11:
  int v13 = v9[1];
  size_t v16 = (size_t)*v13;
  uint64_t v14 = (char *)(v13 + 2);
  size_t v15 = v16;
LABEL_12:
  uint64_t v32 = (char *)v34;
  uint64_t v33 = 0x800000000;
  llvm::VFABI::getVectorVariantNames((uint64_t)result, (uint64_t)&v32);
  if (v33)
  {
    unint64_t v18 = v32;
    uint64_t v19 = 24 * v33;
    do
    {
      char v20 = v18[23];
      BOOL v21 = v20 < 0;
      if (v20 >= 0) {
        char v22 = (unsigned __int8 *)v18;
      }
      else {
        char v22 = *(unsigned __int8 **)v18;
      }
      size_t v23 = v20 & 0x7F;
      if (v21) {
        size_t v24 = *((void *)v18 + 1);
      }
      else {
        size_t v24 = v23;
      }
      llvm::VFABI::tryDemangleForVFABI(v22, v24, *(void *)(*((void *)v3[5] + 7) + 40), v17, v28);
      if (v31)
      {
        if (v30 >= 0) {
          int v25 = v29;
        }
        else {
          int v25 = (void *)v29[0];
        }
        uint64_t v26 = v30 & 0x7F;
        if (v30 < 0) {
          uint64_t v26 = v29[1];
        }
        if (v26 != v15
          || v15 && memcmp(v25, v14, v15)
          || (unint64_t v27 = sub_1CD49DB94(a2, (unint64_t)v28, 1),
              sub_1CD49DEFC(*(void *)a2 + 208 * *(unsigned int *)(a2 + 8), v27),
              ++*(_DWORD *)(a2 + 8),
              v31))
        {
          sub_1CD49DEA4((uint64_t)v28);
        }
      }
      v18 += 24;
      v19 -= 24;
    }
    while (v19);
  }
  return sub_1CC076978((void **)&v32);
}

void **sub_1CC076978(void **result)
{
  uint64_t v1 = (void **)*result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v5 = (char *)*result;
    uint64_t v6 = result;
    uint64_t v3 = 24 * v2;
    do
    {
      if (v5[v3 - 1] < 0) {
        operator delete(*(void **)&v5[v3 - 24]);
      }
      v3 -= 24;
    }
    while (v3);
    uint64_t result = v6;
    uint64_t v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    uint64_t v4 = result;
    free(v1);
    return v4;
  }
  return result;
}

uint64_t **sub_1CC076A00(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[6];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      uint64_t v5 = v7[1];
    }
    while (v5);
    uint64_t v6 = v7 + 1;
  }
  else
  {
    uint64_t v7 = a1 + 1;
  }
LABEL_7:
  uint64_t v9 = (uint64_t *)v7;
  uint64_t v7 = (uint64_t **)operator new(0x38uLL);
  v7[4] = (uint64_t *)(v7 + 4);
  v7[5] = (uint64_t *)1;
  v7[6] = a3;
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = v9;
  *uint64_t v6 = (uint64_t *)v7;
  unsigned int v10 = (uint64_t *)**a1;
  int v11 = (uint64_t *)v7;
  if (v10)
  {
    *a1 = v10;
    int v11 = *v6;
  }
  sub_1CB8358B8(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

uint64_t sub_1CC076AD8(uint64_t a1, int a2, unint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4)
      {
        if (v8) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -16;
        }
        if (v12) {
          uint64_t v8 = v6;
        }
        unsigned int v13 = v5 + v9++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v10 = 1;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

void *sub_1CC076B6C(uint64_t a1, unint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC076C24(a1, v6);
  uint64_t v8 = 0;
  sub_1CC076AD8(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC076C24(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD49E088(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1CC076CF0(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  int v3 = result[1];
  *uint64_t result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  unsigned int v4 = *a2;
  if (*result)
  {
    if (v4)
    {
      uint64_t v5 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v5;
      return result;
    }
    unint64_t v6 = a2;
    goto LABEL_5;
  }
  if (v4)
  {
    unsigned int v4 = *result;
    unint64_t v6 = result;
    uint64_t result = a2;
LABEL_5:
    long long v7 = *(_OWORD *)(v6 + 2);
    *unint64_t v6 = v4 | 1;
    *((void *)v6 + 1) = *((void *)result + 1);
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v7;
    return result;
  }
  uint64_t v8 = *((void *)result + 1);
  *((void *)result + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = result[4];
  result[4] = a2[4];
  a2[4] = v8;
  return result;
}

uint64_t sub_1CC076DC4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CC076E58(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v3 = *(void *)a1;
    if ((*(unsigned char *)(*(void *)v1 + 8) & 1) == 0)
    {
      uint64_t v3 = sub_1CC076E58();
      *(void *)uint64_t v1 = v3;
    }
    return v3;
  }
  return v1;
}

void *sub_1CC076EA0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD49E138(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC076F6C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    int v4 = *(void **)(i - 24);
    if ((void *)(i - 8) != v4) {
      free(v4);
    }
    if ((*(unsigned char *)(i - 48) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(i - 40), 8);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1CC076FD8(uint64_t a1, void **a2)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v28 = v4;
  int v29 = 0;
  unsigned int v34 = 0;
  if (sub_1CC076AD8(*(void *)a1, *(_DWORD *)(a1 + 16), (unint64_t)v4, &v34))
  {
    unsigned int v10 = *((_DWORD *)v34 + 2);
    uint64_t v9 = *(void *)(a1 + 24);
  }
  else
  {
    unint64_t v5 = sub_1CC076B6C(a1, (unint64_t *)&v28, v34);
    *unint64_t v5 = v4;
    *((_DWORD *)v5 + 2) = 0;
    v32[0] = 0;
    long long v33 = 0u;
    uint64_t v30 = 1;
    uint64_t v31 = -4096;
    v32[1] = (char *)&v33 + 8;
    DWORD1(v33) = 1;
    unsigned int v34 = *a2;
    uint64_t v35 = 1;
    uint64_t v36 = -4096;
    sub_1CC076CF0((unsigned int *)&v35, (unsigned int *)&v30);
    uint64_t v37 = v39;
    uint64_t v38 = 0x100000000;
    if (v33) {
      sub_1CC00811C((uint64_t)&v37, (uint64_t)&v32[1]);
    }
    unint64_t v7 = *(void *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 40);
    if (v7 >= v6)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v12) >> 3);
      if ((unint64_t)(v13 + 1) > 0x492492492492492) {
        abort();
      }
      unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v12) >> 3);
      uint64_t v15 = 2 * v14;
      if (2 * v14 <= v13 + 1) {
        uint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16 > 0x492492492492492) {
        sub_1CB833614();
      }
      uint64_t v17 = 56 * v16;
      unint64_t v18 = (char *)operator new(56 * v16);
      uint64_t v19 = &v18[56 * v13];
      *(void *)uint64_t v19 = v34;
      *((void *)v19 + 1) = 1;
      *((void *)v19 + 2) = -4096;
      sub_1CC076CF0((unsigned int *)v19 + 2, (unsigned int *)&v35);
      *((void *)v19 + 4) = v19 + 48;
      *((void *)v19 + 5) = 0x100000000;
      if (v38) {
        sub_1CC00811C((uint64_t)(v19 + 32), (uint64_t)&v37);
      }
      char v20 = &v18[v17];
      unsigned int v8 = v19 + 56;
      char v22 = *(char **)(a1 + 24);
      BOOL v21 = *(char **)(a1 + 32);
      if (v21 == v22)
      {
        *(void *)(a1 + 24) = v19;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 40) = v20;
      }
      else
      {
        unint64_t v27 = v20;
        uint64_t v23 = 0;
        do
        {
          size_t v24 = &v19[v23];
          *((void *)v24 - 7) = *(void *)&v21[v23 - 56];
          *(void *)&v19[v23 - 48] = 1;
          *((void *)v24 - 5) = -4096;
          sub_1CC076CF0((unsigned int *)&v19[v23 - 48], (unsigned int *)&v21[v23 - 48]);
          *((void *)v24 - 3) = v24 - 8;
          *(void *)&v19[v23 - 16] = 0x100000000;
          if (*(_DWORD *)&v21[v23 - 16]) {
            sub_1CC00811C((uint64_t)&v19[v23 - 24], (uint64_t)&v21[v23 - 24]);
          }
          v23 -= 56;
        }
        while (&v21[v23] != v22);
        BOOL v21 = *(char **)(a1 + 24);
        int v25 = *(char **)(a1 + 32);
        *(void *)(a1 + 24) = &v19[v23];
        *(void *)(a1 + 32) = v8;
        for (*(void *)(a1 + 40) = v27; v25 != v21; v25 -= 56)
        {
          uint64_t v26 = (char *)*((void *)v25 - 3);
          if (v25 - 8 != v26) {
            free(v26);
          }
          if ((*(v25 - 48) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*((void *)v25 - 5), 8);
          }
        }
      }
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)unint64_t v7 = v34;
      *(void *)(v7 + 8) = 1;
      *(void *)(v7 + 16) = -4096;
      sub_1CC076CF0((unsigned int *)(v7 + 8), (unsigned int *)&v35);
      *(void *)(v7 + 32) = v7 + 48;
      *(void *)(v7 + 40) = 0x100000000;
      if (v38) {
        sub_1CC00811C(v7 + 32, (uint64_t)&v37);
      }
      unsigned int v8 = (char *)(v7 + 56);
    }
    *(void *)(a1 + 32) = v8;
    if (v37 != v39) {
      free(v37);
    }
    if ((v35 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v36, 8);
    }
    if (v32[1] != (char *)&v33 + 8) {
      free(v32[1]);
    }
    if ((v30 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v31, 8);
    }
    uint64_t v9 = *(void *)(a1 + 24);
    unsigned int v10 = -1227133513 * ((unint64_t)(*(void *)(a1 + 32) - v9) >> 3) - 1;
    *((_DWORD *)v5 + 2) = v10;
  }
  return v9 + 56 * v10 + 8;
}

uint64_t sub_1CC0773EC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4, uint64_t a5, uint64_t a6, const llvm::Loop *a7, _DWORD *a8, int a9, char a10, char a11)
{
  uint64_t v17 = *(void *)(a1 + 384);
  unint64_t v18 = (llvm::Value *)(a3 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (const llvm::SCEV *)llvm::replaceSymbolicStrideSCEV((int8x16_t *)v17, a5, (llvm::Value *)(a3 & 0xFFFFFFFFFFFFFFF8));
  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v17 + 88), v19, a7) == 1) {
    goto LABEL_12;
  }
  if (*((_WORD *)v19 + 12) == 7) {
    uint64_t result = (uint64_t)v19;
  }
  else {
    uint64_t result = 0;
  }
  if (result) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = a11 == 0;
  }
  if (!v21) {
    uint64_t result = llvm::PredicatedScalarEvolution::getAsAddRec((int8x16_t *)v17, v18);
  }
  if (result)
  {
    if (*(void *)(result + 40) != 2) {
      return 0;
    }
LABEL_12:
    if (!a10
      || (uint64_t v22 = *(void *)(a1 + 384),
          uint64_t SCEV = (const llvm::SCEV *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)v22, v18),
          llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(v22 + 88), SCEV, a7) == 1)
      || llvm::getPtrStride((int8x16_t *)v22, a4, v18, (uint64_t)a7, a5, 0, 1) == 1
      || llvm::PredicatedScalarEvolution::hasNoOverflow(v22, v18, 1))
    {
LABEL_16:
      if (!*(_DWORD *)(a1 + 64))
      {
        int v42 = (*a8)++;
LABEL_42:
        llvm::RuntimePointerChecking::insert(a2, a7, v18, a4, (a3 & 4) != 0, v42, a9, a5, *(int8x16_t **)(a1 + 384));
        return 1;
      }
      uint64_t v24 = *(void *)(a1 + 368);
      unint64_t v27 = *(void **)(v24 + 8);
      int v25 = (void *)(v24 + 8);
      uint64_t v26 = v27;
      if (v27)
      {
        do
        {
          uint64_t v28 = v26[6];
          BOOL v29 = v28 < a3;
          if (v28 >= a3) {
            uint64_t v30 = v26;
          }
          else {
            uint64_t v30 = v26 + 1;
          }
          if (!v29) {
            int v25 = v26;
          }
          uint64_t v26 = (void *)*v30;
        }
        while (*v30);
      }
      unint64_t v31 = *(void *)(sub_1CC076E58((uint64_t)(v25 + 4)) + 16) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = v31;
      int v32 = *(_DWORD *)(a6 + 16);
      if (v32)
      {
        int v33 = v32 - 1;
        unsigned int v34 = ((v31 >> 4) ^ (v31 >> 9)) & v33;
        uint64_t v35 = (uint64_t *)(*(void *)a6 + 16 * v34);
        uint64_t v36 = *v35;
        if (*v35 == v31) {
          goto LABEL_39;
        }
        uint64_t v37 = 0;
        int v38 = 1;
        while (v36 != -4096)
        {
          if (v37) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v36 == -8192;
          }
          if (v39) {
            uint64_t v37 = v35;
          }
          unsigned int v40 = v34 + v38++;
          unsigned int v34 = v40 & v33;
          uint64_t v35 = (uint64_t *)(*(void *)a6 + 16 * v34);
          uint64_t v36 = *v35;
          if (*v35 == v31) {
            goto LABEL_39;
          }
        }
        if (v37) {
          uint64_t v41 = v37;
        }
        else {
          uint64_t v41 = v35;
        }
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v35 = sub_1CBFFD5B4(a6, (uint64_t)&v46, (uint64_t *)&v46, v41);
      uint64_t *v35 = v46;
      *((_DWORD *)v35 + 2) = 0;
LABEL_39:
      int v42 = *((_DWORD *)v35 + 2);
      if (!v42)
      {
        int v42 = (*a8)++;
        *((_DWORD *)v35 + 2) = v42;
      }
      goto LABEL_42;
    }
    uint64_t v43 = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)(a1 + 384), v18);
    if (a11 && *(_WORD *)(v43 + 24) == 7)
    {
      llvm::PredicatedScalarEvolution::setNoOverflow(*(void *)(a1 + 384), v18, 1);
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CC077698(uint64_t a1, int a2, unint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = (a2 - 1) & ((a3 >> 9) ^ a3);
    unint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -16;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        unint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        unint64_t v5 = v9;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

char **sub_1CC07772C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 48 * v3;
    do
    {
      uint64_t v6 = *(char **)&v2[v5 - 32];
      if (&v2[v5 - 16] != v6)
      {
        uint64_t v7 = v5;
        unsigned int v8 = v2;
        free(v6);
        uint64_t v5 = v7;
        uint64_t v2 = v8;
      }
      v5 -= 48;
    }
    while (v5);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC0777B8(uint64_t a1, void *a2, _DWORD *a3)
{
  if (*(void *)a1)
  {
    uint64_t v7 = "cl::location(x) specified more than once!";
    __int16 v8 = 259;
    uint64_t v6 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v6);
  }
  else
  {
    uint64_t result = 0;
    *(void *)a1 = a3;
    *(unsigned char *)(a1 + 20) = 1;
    *(_DWORD *)(a1 + 16) = *a3;
  }
  return result;
}

uint64_t sub_1CC077838(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v6 = *a1;
    int v7 = v3 - 1;
    unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v4 = (void *)(*a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*a2 == *v4)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          int v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(v6 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        if (*a2 == *v4) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_1CC0778D4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      int v7 = (_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, 4 * v6);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 4 * v8);
          uint64_t v9 = v13;
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v7;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 4 * v9), (const void *)(*(void *)a2 + 4 * v9), *(void *)a2 + 4 * v10 - (*(void *)a2 + 4 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
    }
    else
    {
      BOOL v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      int v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *int v7 = 0;
  }
  return a1;
}

uint64_t *sub_1CC0779FC(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t v6 = sub_1CBFFD5B4(a1, (uint64_t)a2, a2, v10);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -8192;
      }
      if (v12) {
        uint64_t v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      uint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * (v13 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1CC077ABC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1CC077B8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  uint64_t v20 = a2 | 4;
  uint64_t v5 = sub_1CC077CEC(v4, (unint64_t *)&v20);
  uint64_t v6 = v5;
  uint64_t v8 = (char *)v5[2];
  unint64_t v7 = v5[3];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v5[1];
    uint64_t v11 = (v8 - v10) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[4 * v11];
    *(_DWORD *)unint64_t v16 = *(_DWORD *)(v3 + 184);
    int v9 = v16 + 4;
    while (v8 != v10)
    {
      int v17 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v17;
      v16 -= 4;
    }
    v6[1] = v16;
    v6[2] = v9;
    v6[3] = &v15[4 * v14];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = *(_DWORD *)(v3 + 184);
    int v9 = v8 + 4;
  }
  v6[2] = v9;
  uint64_t v18 = a1[1];
  unsigned int v19 = *(_DWORD *)(v3 + 48);
  if (v19 >= *(_DWORD *)(v3 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v3 + 40) + 8 * v19) = v18;
  ++*(_DWORD *)(v3 + 48);
  ++*(_DWORD *)(v3 + 184);
}

void *sub_1CC077CEC(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC077698(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC077D58(a1, a2, v8);
    unint64_t v6 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    *uint64_t v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC077D58(uint64_t a1, unint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC077E10(a1, v6);
  uint64_t v8 = 0;
  sub_1CC077698(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC077E10(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD49EFFC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CC077EDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  unint64_t v5 = sub_1CC077CEC(v4, &v20);
  unint64_t v6 = v5;
  unsigned int v8 = (char *)v5[2];
  unint64_t v7 = v5[3];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v5[1];
    uint64_t v11 = (v8 - v10) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[4 * v11];
    *(_DWORD *)unint64_t v16 = *(_DWORD *)(v3 + 184);
    int v9 = v16 + 4;
    while (v8 != v10)
    {
      int v17 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v17;
      v16 -= 4;
    }
    v6[1] = v16;
    v6[2] = v9;
    v6[3] = &v15[4 * v14];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v8 = *(_DWORD *)(v3 + 184);
    int v9 = v8 + 4;
  }
  v6[2] = v9;
  uint64_t v18 = a1[1];
  unsigned int v19 = *(_DWORD *)(v3 + 48);
  if (v19 >= *(_DWORD *)(v3 + 52)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(v3 + 40) + 8 * v19) = v18;
  ++*(_DWORD *)(v3 + 48);
  ++*(_DWORD *)(v3 + 184);
}

void *sub_1CC07803C(uint64_t a1, unint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = sub_1CC077698(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  unint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC077D58(a1, a2, v8);
    unint64_t v7 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    *unint64_t v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC0780AC(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v7 = (uint64_t *)(a1 + 1);
  unint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v8 = v6;
        unint64_t v9 = v6[4];
        if (v9 <= a2) {
          break;
        }
LABEL_3:
        unint64_t v6 = (uint64_t *)*v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2)
      {
        unint64_t v13 = v8[5];
        if (v13 > a3) {
          goto LABEL_3;
        }
        if (v13 >= a3) {
          return 0;
        }
      }
      unint64_t v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  unsigned int v8 = (uint64_t *)(a1 + 1);
LABEL_8:
  uint64_t v10 = operator new(0x30uLL);
  v10[2] = *a4;
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = v8;
  *unint64_t v7 = (uint64_t)v10;
  uint64_t v11 = (uint64_t *)**a1;
  if (v11)
  {
    *a1 = v11;
    uint64_t v10 = (_OWORD *)*v7;
  }
  sub_1CB8358B8(a1[1], (uint64_t *)v10);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

uint64_t sub_1CC078184(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)unint64_t v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v6[16] = *(_OWORD *)(a1 + 40);
  uint64_t v3 = *(void *)a1;
  *(void *)&v6[32] = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 8);
  v8[0] = (void *)a2;
  v8[1] = (void *)-1;
  long long v9 = *(_OWORD *)&v6[8];
  long long v10 = *(_OWORD *)&v6[24];
  llvm::AliasSetTracker::addPointer(v3 + 296, (const llvm::MemoryLocation *)v8, 0);
  v8[0] = (void *)(a2 | 4);
  uint64_t v4 = sub_1CC076FD8(v3, v8);
  return sub_1CC078204(v4, &v7);
}

uint64_t sub_1CC078204(uint64_t a1, uint64_t *a2)
{
  long long v10 = 0;
  uint64_t result = sub_1CC078320(a1, *a2, &v10);
  if (result) {
    return result;
  }
  int v5 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3) {
      goto LABEL_7;
    }
  }
  else
  {
    v6 *= 2;
  }
  sub_1CC0783CC(a1, v6);
  long long v10 = 0;
  uint64_t result = sub_1CC078320(a1, *a2, &v10);
LABEL_7:
  uint64_t v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *uint64_t v7 = *a2;
  uint64_t v8 = *a2;
  unsigned int v9 = *(_DWORD *)(a1 + 32);
  if (v9 >= *(_DWORD *)(a1 + 36)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)(a1 + 24) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_1CC078320(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_10;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_10;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_10:
  *a3 = v7;
  return result;
}

uint64_t sub_1CC0783CC(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 2)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  int v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1CC078544(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = &v14;
  if (v7 != -4096 && v7 != -8192)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v8 = &v15;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CC078544(a1, &v14, v8);
}

uint64_t sub_1CC078544(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v3)
  {
    int v5 = (void *)(result + 8);
    int v6 = (void *)(result + 16);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 16);
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = *(void **)(result + 8);
    int v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      int v10 = a3;
      uint64_t v7 = (_DWORD *)result;
      uint64_t v8 = a2;
      uint64_t v9 = *a2;
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v11 = 0;
        sub_1CC078320(result, v9, &v11);
        *uint64_t v11 = *v8;
        *v7 += 2;
      }
      a2 = v8 + 1;
      a3 = v10;
      uint64_t result = (uint64_t)v7;
    }
    while (v8 + 1 != v10);
  }
  return result;
}

void sub_1CC078618(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)BOOL v21 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + 40);
  uint64_t v3 = *(void *)a1;
  int v4 = *(unsigned __int8 *)(a1 + 64);
  *(void *)&v21[32] = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 8);
  v23[0] = (void *)a2;
  v23[1] = (void *)-1;
  long long v24 = *(_OWORD *)&v21[8];
  long long v25 = *(_OWORD *)&v21[24];
  llvm::AliasSetTracker::addPointer(v3 + 296, (const llvm::MemoryLocation *)v23, 0);
  v23[0] = (void *)(a2 & 0xFFFFFFFFFFFFFFFBLL);
  uint64_t v5 = sub_1CC076FD8(v3, v23);
  sub_1CC078204(v5, &v22);
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(v3 + 144);
  uint64_t v7 = *(unsigned int *)(v3 + 156);
  if (v6 != *(void *)(v3 + 136))
  {
    unsigned int v11 = *(_DWORD *)(v3 + 152);
    goto LABEL_13;
  }
  if (!v7)
  {
LABEL_10:
    unsigned int v11 = *(_DWORD *)(v3 + 152);
    if (v7 < v11)
    {
      *(_DWORD *)(v3 + 156) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      return;
    }
LABEL_13:
    if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(v3 + 160)))
    {
      if (v11 >= 0x40) {
        v11 *= 2;
      }
      else {
        unsigned int v11 = 128;
      }
    }
    else if (v11 - v7 >= v11 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 136), v11);
    unsigned int v11 = *(_DWORD *)(v3 + 152);
    uint64_t v6 = *(void *)(v3 + 144);
LABEL_15:
    unsigned int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v14 = (unint64_t *)(v6 + 8 * v13);
    uint64_t v15 = (void *)*v14;
    if (*v14 == -1)
    {
      unint64_t v16 = 0;
LABEL_27:
      if (v16) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = v14;
      }
      if (*v20 != a2)
      {
        if (*v20 == -2) {
          --*(_DWORD *)(v3 + 160);
        }
        else {
          ++*(_DWORD *)(v3 + 156);
        }
        *unint64_t v20 = a2;
      }
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 1;
      while (v15 != (void *)a2)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == (void *)-2;
        }
        if (v18) {
          unint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        uint64_t v14 = (unint64_t *)(v6 + 8 * (v19 & v12));
        uint64_t v15 = (void *)*v14;
        if (*v14 == -1) {
          goto LABEL_27;
        }
      }
    }
    return;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 8 * v7;
  int v10 = *(unint64_t **)(v3 + 144);
  while (*v10 != a2)
  {
    if (*v10 == -2) {
      uint64_t v8 = v10;
    }
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      if (!v8) {
        goto LABEL_10;
      }
      *uint64_t v8 = a2;
      --*(_DWORD *)(v3 + 160);
      return;
    }
  }
}

void *sub_1CC078804(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD49F1D4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0788D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 368);
  if (v2 != (void *)(a1 + 384)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 280);
  if (v3 != (void *)(a1 + 296)) {
    free(v3);
  }
  sub_1CC07772C((char **)(a1 + 152));
  sub_1CC078934((char **)(a1 + 8));
  return a1;
}

char **sub_1CC078934(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    unint64_t v5 = &v2[64 * v3];
    do
    {
      uint64_t v6 = *((void *)v5 - 6);
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        unint64_t v8 = *((void *)v5 - 8) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v8 = *((void *)v5 - 7);
        uint64_t v9 = (unint64_t *)*((void *)v5 - 7);
        if (v9)
        {
          *uint64_t v9 = *v9 & 7 | v8;
        }
        else
        {
          uint64_t v10 = *((void *)v5 - 6);
          uint64_t v11 = ***(int32x2_t ****)v10;
          unint64_t v12 = (unint64_t)v11[303];
          if (v12 <= v8)
          {
            uint64_t v13 = v11[305].u32[0];
            if (v12 + 16 * v13 > v8)
            {
              unsigned int v14 = v13 - 1;
              LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
              unint64_t v16 = (uint64_t *)(v12 + 16 * v15);
              uint64_t v17 = *v16;
              if (v10 == *v16)
              {
LABEL_22:
                *unint64_t v16 = -8192;
                v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v10 = *((void *)v5 - 6);
              }
              else
              {
                int v18 = 1;
                while (v17 != -4096)
                {
                  int v19 = v15 + v18++;
                  uint64_t v15 = v19 & v14;
                  uint64_t v17 = *(void *)(v12 + 16 * v15);
                  if (v10 == v17)
                  {
                    unint64_t v16 = (uint64_t *)(v12 + 16 * v15);
                    goto LABEL_22;
                  }
                }
              }
              *(unsigned char *)(v10 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 64;
    }
    while (v5 != v2);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t *sub_1CC078A80(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2 != (void *)a1[11]) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](a1[8], 8);
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    unint64_t v8 = *(void **)(v4 + 224);
    if (v8 != (void *)(v4 + 240)) {
      free(v8);
    }
    uint64_t v9 = *(void **)(v4 + 40);
    if (v9 != (void *)(v4 + 56)) {
      free(v9);
    }
    sub_1CC078C44((unsigned int *)(v4 + 16));
    MEMORY[0x1D25D9CD0](*(void *)(v4 + 16), 8);
    MEMORY[0x1D25D9CE0](v4, 0x10E0C402CB7FD3FLL);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    uint64_t v10 = *(void **)(v5 + 368);
    if (v10 != (void *)(v5 + 384)) {
      free(v10);
    }
    uint64_t v11 = *(void **)(v5 + 280);
    if (v11 != (void *)(v5 + 296)) {
      free(v11);
    }
    sub_1CC07772C((char **)(v5 + 152));
    sub_1CC078934((char **)(v5 + 8));
    MEMORY[0x1D25D9CE0](v5, 0x10A0C405479AB48);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    sub_1CC078CA8((uint64_t *)(v6 + 104));
    if (*(unsigned char *)(v6 + 72))
    {
      sub_1CC009394(v6 + 48);
      MEMORY[0x1D25D9CD0](*(void *)(v6 + 48), 8);
      *(unsigned char *)(v6 + 72) = 0;
    }
    sub_1CC078D04((void *)(v6 + 24));
    MEMORY[0x1D25D9CD0](*(void *)(v6 + 24), 8);
    MEMORY[0x1D25D9CD0](*(void *)v6, 8);
    MEMORY[0x1D25D9CE0](v6, 0x1062C40BD23953CLL);
  }
  return a1;
}

void sub_1CC078C44(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 16);
    do
    {
      uint64_t v4 = *(v3 - 2);
      if (v4 != -4 && v4 != -16)
      {
        uint64_t v6 = (void *)*(v3 - 1);
        if (v6)
        {
          *uint64_t v3 = v6;
          operator delete(v6);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t *sub_1CC078CA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3 != (void *)(v2 + 56)) {
      free(v3);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10D1C407D0B9851);
  }
  return a1;
}

void *sub_1CC078D04(void *result)
{
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F2605198;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (uint64_t *)(*result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -4096 && v4 != -8192 && v4 != 0) {
        uint64_t result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

void *sub_1CC078E24(void *result)
{
  result[1] = 0;
  v10[0] = 2;
  v10[1] = 0;
  uint64_t v11 = -4096;
  uint64_t v12 = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = v10;
    uint64_t v3 = *v2;
    uint64_t v4 = 48 * v1;
    uint64_t v5 = (void *)(*v2 + 16);
    do
    {
      uint64_t v6 = v10[0] & 6;
      *(v5 - 1) = v6;
      *uint64_t v5 = 0;
      uint64_t v7 = v11;
      v5[1] = v11;
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        unint64_t v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        *uint64_t v5 = *(void *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(void *)unint64_t v9 = v5 - 1;
        *(v5 - 1) = v9 | v6;
        if (*v5) {
          *(void *)*uint64_t v5 = *(void *)*v5 & 7 | (v3 + 16);
        }
      }
      *(v5 - 2) = &unk_1F2605198;
      void v5[2] = v12;
      v5 += 6;
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
    if (v11 != -8192 && v11 != -4096)
    {
      if (v11) {
        return llvm::ValueHandleBase::RemoveFromUseList(v10);
      }
    }
  }
  return result;
}

void sub_1CC078F58(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2 = *((void *)this + 13);
  while (2)
  {
    uint64_t v3 = *(void *)(v2 - 24);
    if (!*(unsigned char *)(v2 - 8))
    {
      *(void *)(v2 - 16) = *(void *)(v3 + 8);
      *(unsigned char *)(v2 - 8) = 1;
    }
    while (1)
    {
      uint64_t v4 = *(uint64_t **)(v2 - 16);
      if (v4 == *(uint64_t **)(v3 + 16)) {
        break;
      }
      *(void *)(v2 - 16) = v4 + 1;
      uint64_t v5 = *v4;
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = *((unsigned int *)this + 5);
      if (v6 != *(void *)this)
      {
        unsigned int v11 = *((_DWORD *)this + 4);
        goto LABEL_31;
      }
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 8 * v7;
        uint64_t v10 = (void *)*((void *)this + 1);
        while (*v10 != v5)
        {
          if (*v10 == -2) {
            uint64_t v8 = v10;
          }
          ++v10;
          v9 -= 8;
          if (!v9)
          {
            if (!v8) {
              goto LABEL_13;
            }
            *uint64_t v8 = v5;
            --*((_DWORD *)this + 6);
            goto LABEL_36;
          }
        }
      }
      else
      {
LABEL_13:
        unsigned int v11 = *((_DWORD *)this + 4);
        if (v7 < v11)
        {
          *((_DWORD *)this + 5) = v7 + 1;
          *(void *)(v6 + 8 * v7) = v5;
LABEL_36:
          uint64_t v23 = (unsigned char *)*((void *)this + 13);
          unint64_t v22 = *((void *)this + 14);
          if ((unint64_t)v23 >= v22)
          {
            long long v25 = (unsigned char *)*((void *)this + 12);
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v25) >> 3) + 1;
            if (v26 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v25) >> 3);
            if (2 * v27 > v26) {
              unint64_t v26 = 2 * v27;
            }
            if (v27 >= 0x555555555555555) {
              unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              if (v28 > 0xAAAAAAAAAAAAAAALL) {
                sub_1CB833614();
              }
              BOOL v29 = (char *)operator new(24 * v28);
            }
            else
            {
              BOOL v29 = 0;
            }
            uint64_t v30 = &v29[8 * ((v23 - v25) >> 3)];
            *(void *)uint64_t v30 = v5;
            v30[8] = 0;
            v30[16] = 0;
            long long v24 = v30 + 24;
            if (v23 != v25)
            {
              do
              {
                long long v31 = *(_OWORD *)(v23 - 24);
                *((void *)v30 - 1) = *((void *)v23 - 1);
                *(_OWORD *)(v30 - 24) = v31;
                v30 -= 24;
                v23 -= 24;
              }
              while (v23 != v25);
              uint64_t v23 = (unsigned char *)*((void *)this + 12);
            }
            *((void *)this + 12) = v30;
            *((void *)this + 13) = v24;
            *((void *)this + 14) = &v29[24 * v28];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(void *)uint64_t v23 = v5;
            v23[8] = 0;
            long long v24 = v23 + 24;
            v23[16] = 0;
          }
          *((void *)this + 13) = v24;
          return;
        }
LABEL_31:
        if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 6)))
        {
          if (v11 >= 0x40) {
            v11 *= 2;
          }
          else {
            unsigned int v11 = 128;
          }
LABEL_63:
          llvm::SmallPtrSetImplBase::Grow(this, v11);
          unsigned int v11 = *((_DWORD *)this + 4);
          uint64_t v6 = *((void *)this + 1);
          goto LABEL_33;
        }
        if (v11 - v7 < v11 >> 3) {
          goto LABEL_63;
        }
LABEL_33:
        unsigned int v21 = v11 - 1;
        unsigned int v16 = (v11 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        uint64_t v17 = (void *)(v6 + 8 * v16);
        uint64_t v18 = *v17;
        if (*v17 == -1)
        {
          uint64_t v13 = 0;
LABEL_23:
          if (v13) {
            int v19 = v13;
          }
          else {
            int v19 = v17;
          }
          if (*v19 != v5)
          {
            if (*v19 == -2) {
              --*((_DWORD *)this + 6);
            }
            else {
              ++*((_DWORD *)this + 5);
            }
            *int v19 = v5;
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v13 = 0;
          int v15 = 1;
          while (v18 != v5)
          {
            if (v13) {
              BOOL v12 = 0;
            }
            else {
              BOOL v12 = v18 == -2;
            }
            if (v12) {
              uint64_t v13 = v17;
            }
            unsigned int v14 = v16 + v15++;
            unsigned int v16 = v14 & v21;
            uint64_t v17 = (void *)(v6 + 8 * (v14 & v21));
            uint64_t v18 = *v17;
            if (*v17 == -1) {
              goto LABEL_23;
            }
          }
        }
      }
    }
    uint64_t v20 = *((void *)this + 12);
    uint64_t v2 = *((void *)this + 13) - 24;
    *((void *)this + 13) = v2;
    if (v20 != v2) {
      continue;
    }
    break;
  }
}

uint64_t sub_1CC079244()
{
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Sets the SIMD width. Zero is autoselect.";
  v5.n128_u64[1] = 40;
  uint64_t v4 = &llvm::VectorizerParams::VectorizationFactor;
  sub_1CD49E424(&v2, (long long *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC0708F8, &qword_1EBCC6090, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Sets the vectorization interleave count. Zero is autoselect.";
  v5.n128_u64[1] = 60;
  uint64_t v4 = &llvm::VectorizerParams::VectorizationInterleave;
  sub_1CD49E618(&v2, (long long *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC0708F8, &qword_1EBCC6150, &dword_1CB82C000);
  int v3 = 1;
  v5.n128_u64[0] = (unint64_t)"When performing memory disambiguation checks at runtime do not generate more than t"
                                     "his number of comparisons (default = 8).";
  v5.n128_u64[1] = 123;
  uint64_t v4 = &llvm::VectorizerParams::RuntimeMemoryCheckThreshold;
  int v1 = 8;
  uint64_t v2 = &v1;
  sub_1CD49E790(&v3, (long long *)&v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CC0708F8, &qword_1EBCC6210, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)";
  v5.n128_u64[1] = 94;
  int v3 = 100;
  uint64_t v4 = &v3;
  sub_1CD413D64((uint64_t)&unk_1EBCC62D0, "memory-check-merge-threshold", &v2, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC62D0, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of dependences collected by loop-access analysis (default = 100)";
  v5.n128_u64[1] = 79;
  int v3 = 100;
  uint64_t v4 = &v3;
  sub_1CD49E934(&v2, (long long *)&v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC6390, &dword_1CB82C000);
  LOBYTE(v3) = 1;
  LODWORD(v2) = 1;
  uint64_t v4 = &v3;
  v5.n128_u64[0] = (unint64_t)"Enable symbolic stride memory access versioning";
  v5.n128_u64[1] = 47;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC6450, "enable-mem-access-versioning", (unsigned char **)&v4, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC6450, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable conflict detection in loop-access analysis";
  v5.n128_u64[1] = 49;
  LOBYTE(v3) = 1;
  uint64_t v4 = &v3;
  sub_1CD49EA5C(&v2, &v5, (char **)&v4);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC6510, &dword_1CB82C000);
}

void *llvm::AllAnalysesOn<llvm::Loop>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Loop>::SetKey;
}

void *llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::Invalidator::Invalidator(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::AnalysisManager(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

void *llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::operator=(void *a1, uint64_t a2)
{
  sub_1CC07ADE8((unsigned int *)a1);
  MEMORY[0x1D25D9CD0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v5 = a1 + 3;
  uint64_t v4 = a1[3];
  int v6 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v6;
  int v7 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v7;
  uint64_t v8 = *((unsigned int *)a1 + 10);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v4 + 8);
    uint64_t v10 = 32 * v8;
    do
    {
      if ((*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        sub_1CC07AE64(v9);
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
    uint64_t v4 = *v5;
  }
  MEMORY[0x1D25D9CD0](v4, 8);
  *int v5 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v11 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v11;
  int v12 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v12;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *((_DWORD *)a1 + 14) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v13 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v13;
  int v14 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v14;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear()
{
}

{
  while (1)
    ;
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::clear(uint64_t a1)
{
  sub_1CC0799B4((_DWORD *)(a1 + 48));

  sub_1CC079A08((_DWORD *)(a1 + 24));
}

_DWORD *sub_1CC0799B4(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    unsigned int v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD4A0040(result);
    }
    else
    {
      if (v1)
      {
        int v2 = *(void **)result;
        uint64_t v3 = *(void *)result + 24 * v1;
        do
        {
          *int v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (void *)v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

void sub_1CC079A08(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 || a1[3])
  {
    uint64_t v2 = a1[4];
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1CD4A00F4(a1);
    }
    else
    {
      if (v2)
      {
        uint64_t v3 = 32 * v2;
        uint64_t v4 = (uint64_t *)(*(void *)a1 + 8);
        while (1)
        {
          uint64_t v5 = *(v4 - 1);
          if (v5 == -8192) {
            goto LABEL_10;
          }
          if (v5 != -4096) {
            break;
          }
LABEL_11:
          v4 += 4;
          v3 -= 32;
          if (!v3) {
            goto LABEL_12;
          }
        }
        sub_1CC07AE64(v4);
LABEL_10:
        *(v4 - 1) = -4096;
        goto LABEL_11;
      }
LABEL_12:
      *((void *)a1 + 1) = 0;
    }
  }
}

void llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::invalidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!sub_1CBFA534C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Loop>::SetKey))
  {
    uint64_t v22 = 1;
    for (uint64_t i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v22 + i) = -4096;
    v21[0] = &v22;
    v21[1] = a1 + 48;
    uint64_t v20 = (void *)a2;
    int v7 = sub_1CC07AF00(a1 + 24, (uint64_t *)&v20);
    uint64_t v8 = v7 + 1;
    uint64_t v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        uint64_t v11 = v9[2];
        uint64_t v12 = v9[3];
        uint64_t v13 = sub_1CBF5BF34((uint64_t)&v22, v11);
        if (v22) {
          int v14 = &v23;
        }
        else {
          int v14 = v23;
        }
        unsigned int v15 = v24;
        if (v22) {
          unsigned int v15 = 8;
        }
        if (&v14[2 * v15] == (void *)v13)
        {
          char v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(void *)v12 + 16))(v12, a2, a3, v21);
          uint64_t v18 = v11;
          v19[0] = v16;
          sub_1CBF5C150((uint64_t)&v22, &v18, v19, (uint64_t)&v20);
        }
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9 != v8);
    }
    if (v22 >= 2)
    {
      for (uint64_t j = v7[2]; (uint64_t *)j != v8; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v20 = *(void **)(j + 16);
        uint64_t v18 = 0;
        if (sub_1CBF5BFB4((uint64_t)&v22, &v20, &v18) && *(unsigned char *)(v18 + 8)) {
          llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl();
        }
      }
    }
    if (!v7[3])
    {
      uint64_t v20 = 0;
      if (sub_1CBFA5644(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, &v20))
      {
        uint64_t v17 = v20;
        sub_1CC07AE64(v20 + 1);
        *uint64_t v17 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if ((v22 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v23, 8);
    }
  }
}

uint64_t sub_1CC079DD4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 1016))
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
      uint64_t v2 = 0;
      operator new();
    }
  }
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;

  uint64_t v5 = 0;
  if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = (uint64_t)a2;
  uint64_t v25 = a3;
  uint64_t v8 = (uint64_t *)(a1 + 48);
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  char v9 = sub_1CBF5C064((uint64_t *)(a1 + 48), &v24, &v27);
  uint64_t v10 = v27;
  if (v9)
  {
    uint64_t v22 = v27[2];
    return *(void *)(v22 + 24);
  }
  int v11 = *(_DWORD *)(a1 + 56);
  unsigned int v12 = *(_DWORD *)(a1 + 64);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
  }
  else if (v12 + ~v11 - *(_DWORD *)(a1 + 60) > v12 >> 3)
  {
    goto LABEL_4;
  }
  sub_1CBFA590C((uint64_t)v8, v12);
  unint64_t v27 = 0;
  sub_1CBF5C064(v8, &v24, &v27);
  uint64_t v10 = v27;
LABEL_4:
  ++*(_DWORD *)(a1 + 56);
  if (*v10 != -4096 || v10[1] != -4096) {
    --*(_DWORD *)(a1 + 60);
  }
  *uint64_t v10 = v24;
  v10[1] = v25;
  void v10[2] = v26;
  uint64_t v24 = 0;
  if (sub_1CD40EA84(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v24)) {
    uint64_t v13 = v24;
  }
  else {
    uint64_t v13 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (a2 == &llvm::PassInstrumentationAnalysis::Key)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3, a4)+ 8);
    if (v15 && *(_DWORD *)(v15 + 728))
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
      uint64_t v24 = 0;
      operator new();
    }
  }
  uint64_t v24 = a3;
  char v16 = sub_1CC07AF00(a1 + 24, &v24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(&v24, v14, a3, a1, a4);
  uint64_t v17 = operator new(0x20uLL);
  uint64_t v19 = v16[1];
  uint64_t v18 = v16 + 1;
  uint64_t v20 = v24;
  v17[2] = a2;
  v17[3] = v20;
  *uint64_t v17 = v19;
  v17[1] = v18;
  *(void *)(v19 + 8) = v17;
  *uint64_t v18 = (uint64_t)v17;
  ++v18[2];
  if (v15 && *(_DWORD *)(v15 + 872))
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
    uint64_t v24 = 0;
    operator new();
  }
  uint64_t v24 = (uint64_t)a2;
  uint64_t v25 = a3;
  unint64_t v27 = 0;
  if (sub_1CBF5C064(v8, &v24, &v27)) {
    uint64_t v21 = (uint64_t)v27;
  }
  else {
    uint64_t v21 = *(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
  }
  uint64_t v22 = *v18;
  *(void *)(v21 + 16) = *v18;
  return *(void *)(v22 + 24);
}

uint64_t llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v9 = 0;
  if (sub_1CBF5C064((uint64_t *)(a1 + 48), v8, &v9))
  {
    uint64_t v6 = v9;
    uint64_t v4 = *(void *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 64);
    uint64_t v6 = v4 + 24 * v5;
  }
  if (v6 == v4 + 24 * v5) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v6 + 16) + 24);
  }
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::InnerAnalysisManagerProxy(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::Result(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *uint64_t result = a2;
  result[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  unint64_t v28 = v30;
  uint64_t v29 = 0x400000000;
  uint64_t v8 = (_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 1)
  {
    if (v7)
    {
      uint64_t v9 = a1 + 16;
      uint64_t v10 = 2;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(unsigned int *)(a1 + 24);
    }
    int v11 = (void *)(v9 + 16 * v10);
    unsigned int v12 = v11;
    if (v7)
    {
LABEL_5:
      uint64_t v13 = (void *)(a1 + 16);
      uint64_t v14 = 2;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v7)
  {
    unsigned int v12 = (void *)(a1 + 16);
    uint64_t v15 = (void *)(a1 + 48);
LABEL_8:
    int v11 = v12;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v15)
      {
        int v11 = v15;
        break;
      }
    }
    unsigned int v12 = v15;
    if (*(_DWORD *)(a1 + 8)) {
      goto LABEL_5;
    }
LABEL_13:
    uint64_t v13 = *(void **)(a1 + 16);
    uint64_t v14 = *(unsigned int *)(a1 + 24);
    goto LABEL_14;
  }
  unsigned int v12 = *(void **)(a1 + 16);
  uint64_t v25 = *(unsigned int *)(a1 + 24);
  if (v25)
  {
    uint64_t v15 = &v12[2 * v25];
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  int v11 = *(void **)(a1 + 16);
  uint64_t v13 = v11;
LABEL_14:
  char v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      uint64_t v17 = *v11;
      v27[0] = a4;
      v27[1] = a2;
      v27[2] = a3;
      sub_1CD49FFCC(v11 + 1, (uint64_t)v27);
      unint64_t v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v19 + 8))
      {
        if (v29 >= (unint64_t)HIDWORD(v29)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v28 + v29) = v17;
        LODWORD(v29) = v29 + 1;
      }
      uint64_t v20 = v11 + 2;
      int v11 = v12;
      if (v20 != v12)
      {
        int v11 = v20;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v12)
          {
            int v11 = v12;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    uint64_t v21 = (uint64_t *)v28;
    if (v29)
    {
      uint64_t v22 = 8 * v29;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t v26 = v23;
        sub_1CBF9CADC(v8, &v26);
        v22 -= 8;
      }
      while (v22);
      uint64_t v21 = (uint64_t *)v28;
    }
    if (v21 != v30) {
      free(v21);
    }
  }
  return 0;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::OuterAnalysisManagerProxy(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Loop,llvm::LoopStandardAnalysisResults &>::run@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  uint64_t v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

void llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Result::invalidate()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInReverseSiblingPreorder();
}

void llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::run()
{
}

void llvm::getLoopPassPreservedAnalyses(uint64_t a1@<X8>)
{
  uint64_t v3 = a1 + 32;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  sub_1CBFA65B8((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  sub_1CBFA65B8((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::LoopAnalysis::Key);
  sub_1CBFA65B8((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>,llvm::Function>::Key);

  sub_1CBFA65B8((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key);
}

unsigned int *sub_1CC07ADE8(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (unsigned int **)(*(void *)result + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t result = *v3;
        *uint64_t v3 = 0;
        if (result) {
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1CC07AE64(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unsigned int v5 = (uint64_t *)v3[1];
        uint64_t v6 = v3[3];
        v3[3] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *sub_1CC07AF00(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CBFA5644(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC07AFE4(a1, v7);
    uint64_t v8 = 0;
    sub_1CBFA5644(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = (uint64_t)(result + 1);
  result[2] = (uint64_t)(result + 1);
  result[3] = 0;
  return result;
}

void *sub_1CC07AFE4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC07B0B0(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CC07B0B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v17 = 0;
      sub_1CBFA5644(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v17);
      uint64_t v10 = v17;
      uint64_t v11 = v17 + 1;
      *uint64_t v17 = *a2;
      v10[1] = (uint64_t)v11;
      void v10[2] = (uint64_t)v11;
      v10[3] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        uint64_t v14 = a2[1];
        uint64_t v13 = (uint64_t *)a2[2];
        uint64_t v15 = *v13;
        *(void *)(v15 + 8) = *(void *)(v14 + 8);
        **(void **)(v14 + 8) = v15;
        uint64_t v16 = v10[1];
        *(void *)(v16 + 8) = v13;
        *uint64_t v13 = v16;
        v10[1] = v14;
        *(void *)(v14 + 8) = v11;
        v10[3] = v12;
        a2[3] = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      sub_1CC07AE64(a2 + 1);
    }
    a2 += 4;
  }
}

void sub_1CC07B1AC()
{
}

void sub_1CC07B1C0()
{
}

void *sub_1CC07B220()
{
  return &llvm::Any::TypeId<llvm::Loop const*>::Id;
}

uint64_t *sub_1CC07B22C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a1;
    while (1)
    {
      uint64_t v7 = *v6++;
      if (llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::Invalidator::invalidate(*(uint64_t **)a3, v7, *(void *)(a3 + 8), *(void *)(a3 + 16)))break; {
      uint64_t v3 = v6;
      }
      if (v6 == a2) {
        return a2;
      }
    }
    if (v6 != a2)
    {
      uint64_t v9 = v3 + 1;
      do
      {
        if ((llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::Invalidator::invalidate(*(uint64_t **)a3, *v9, *(void *)(a3 + 8), *(void *)(a3 + 16)) & 1) == 0)*v3++ = *v9; {
        ++v9;
        }
      }
      while (v9 != a2);
    }
  }
  return v3;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  if (*(unsigned char *)a2)
  {
    llvm::SCEV::print(*(llvm::SCEV **)(a2 + 16), a1);
    uint64_t v4 = *(unsigned int *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = *(llvm::SCEV ***)(a2 + 24);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t v7 = *v5;
        uint64_t v8 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v8)
        {
          llvm::raw_ostream::write(a1, "[", 1uLL);
        }
        else
        {
          *uint64_t v8 = 91;
          ++*((void *)a1 + 4);
        }
        llvm::SCEV::print(v7, a1);
        uint64_t v9 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v9)
        {
          llvm::raw_ostream::write(a1, "]", 1uLL);
        }
        else
        {
          *uint64_t v9 = 93;
          ++*((void *)a1 + 4);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    uint64_t v10 = *((void *)a1 + 4);
    if ((unint64_t)(*((void *)a1 + 3) - v10) > 8)
    {
      *(unsigned char *)(v10 + 8) = 32;
      *(void *)uint64_t v10 = *(void *)", Sizes: ";
      *((void *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, ", Sizes: ", 9uLL);
    }
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    if (v11)
    {
      uint64_t v12 = *(llvm::SCEV ***)(a2 + 64);
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *v12;
        uint64_t v15 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v15)
        {
          llvm::raw_ostream::write(a1, "[", 1uLL);
        }
        else
        {
          *uint64_t v15 = 91;
          ++*((void *)a1 + 4);
        }
        llvm::SCEV::print(v14, a1);
        uint64_t v16 = (unsigned char *)*((void *)a1 + 4);
        if (*((unsigned char **)a1 + 3) == v16)
        {
          llvm::raw_ostream::write(a1, "]", 1uLL);
        }
        else
        {
          *uint64_t v16 = 93;
          ++*((void *)a1 + 4);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    llvm::Value::print(*(llvm::Value **)(a2 + 8), a1, 0);
    uint64_t v17 = (_OWORD *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v17 > 0xFuLL)
    {
      *uint64_t v17 = *(_OWORD *)", IsValid=false.";
      *((void *)a1 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a1, ", IsValid=false.", 0x10uLL);
    }
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  _WORD *v4;
  uint64_t v5;
  void v7[4];
  void *v8;
  long long v9;
  void **v10;
  long long v11;

  uint64_t v3 = a1;
  if (*(unsigned char *)(a2 + 24)) {
    llvm::operator<<(a1, (uint64_t *)a2);
  }
  else {
    sub_1CB8E509C(a1, "None");
  }
  uint64_t v4 = (_WORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 1uLL)
  {
    *uint64_t v4 = 8250;
    *((void *)v3 + 4) += 2;
  }
  else
  {
    uint64_t v3 = llvm::raw_ostream::write(v3, ": ", 2uLL);
  }
  unint64_t v5 = *(void *)(a2 + 32) + *(void *)(a2 + 40);
  *(void *)&uint64_t v11 = *(void *)(a2 + 32);
  *((void *)&v11 + 1) = v5;
  v7[0] = "{0}";
  v7[1] = 3;
  v7[2] = &v10;
  v7[3] = 1;
  uint64_t v8 = &unk_1F2619410;
  uint64_t v9 = v11;
  uint64_t v10 = &v8;
  sub_1CD862C68((uint64_t)v7, v3);
  return v3;
}

{
  const char *v4;
  size_t v5;
  void *v6;

  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
      uint64_t v4 = "fix";
    }
    else {
      uint64_t v4 = "";
    }
  }
  else
  {
    uint64_t v4 = "top";
  }
  unint64_t v5 = strlen(v4);
  uint64_t v6 = (void *)*((void *)a1 + 4);
  if (v5 <= *((void *)a1 + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((void *)a1 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, v4, v5);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  llvm::Value *v8;
  size_t v9;
  char *Name;
  void *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  size_t v14;

  uint64_t v3 = *(unsigned int *)(a2 + 152);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)(a2 + 144);
    unint64_t v5 = &v4[2 * v3];
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = sub_1CB8E509C(a1, "Loop '");
      uint64_t v8 = **(llvm::Value ***)(v6 + 32);
      if (v8 && (*((unsigned char *)v8 + 23) & 0x10) != 0)
      {
        Name = llvm::Value::getName(v8);
        uint64_t v9 = v14;
      }
      else
      {
        uint64_t v9 = 14;
        Name = "<unnamed loop>";
      }
      uint64_t v11 = (void *)*((void *)v7 + 4);
      if (v9 <= *((void *)v7 + 3) - (void)v11)
      {
        if (v9)
        {
          memcpy(v11, Name, v9);
          *((void *)v7 + 4) += v9;
        }
      }
      else
      {
        llvm::raw_ostream::write(v7, Name, v9);
      }
      uint64_t v12 = sub_1CB8E509C(v7, "' has cost = ");
      uint64_t v13 = llvm::raw_ostream::operator<<(v12, v4[1]);
      sub_1CB8E509C(v13, "\n");
      v4 += 2;
    }
    while (v4 != v5);
  }
  return a1;
}

{
  char *v3;
  llvm::Value **v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v10;
  uint64_t vars8;

  switch(*(_WORD *)a2)
  {
    case 0u:
      uint64_t v3 = "unknown";
      goto LABEL_10;
    case 1u:
      uint64_t v3 = "undef";
      goto LABEL_10;
    case 3u:
      uint64_t v7 = sub_1CB8E509C(a1, "notconstant<");
      llvm::Value::print(*(llvm::Value **)(a2 + 8), v7, 0);
      goto LABEL_9;
    case 5u:
      uint64_t v8 = sub_1CB8E509C(a1, "constantrange incl. undef <");
      llvm::APInt::print((llvm::APInt *)(a2 + 8), v8, 1);
      uint64_t v6 = v8;
      goto LABEL_8;
    case 6u:
      uint64_t v3 = "overdefined";
      goto LABEL_10;
    default:
      uint64_t v4 = (llvm::Value **)(a2 + 8);
      if ((*(_WORD *)a2 & 0xFE) == 4)
      {
        unint64_t v5 = sub_1CB8E509C(a1, "constantrange<");
        llvm::APInt::print((llvm::APInt *)(a2 + 8), v5, 1);
        uint64_t v6 = v5;
LABEL_8:
        uint64_t v7 = sub_1CB8E509C(v6, ", ");
        llvm::APInt::print((llvm::APInt *)(a2 + 24), v7, 1);
LABEL_9:
        uint64_t v3 = ">";
        a1 = v7;
      }
      else
      {
        uint64_t v10 = sub_1CB8E509C(a1, "constant<");
        llvm::Value::print(*v4, v10, 0);
        uint64_t v3 = ">";
        a1 = v10;
      }
LABEL_10:
      return sub_1CB8E509C(a1, v3);
  }
}

{
  uint64_t v4;
  llvm::APInt *v5;
  uint64_t v6;
  char *v7;

  sub_1CB8E509C(a1, "set-state(< {");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t v7 = "full-set";
    goto LABEL_8;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 168);
  if (v4)
  {
    unint64_t v5 = *(llvm::APInt **)(a2 + 160);
    uint64_t v6 = 16 * v4;
    do
    {
      llvm::APInt::print(v5, a1, 1);
      sub_1CB8E509C(a1, ", ");
      unint64_t v5 = (llvm::APInt *)((char *)v5 + 16);
      v6 -= 16;
    }
    while (v6);
  }
  if (*(unsigned char *)(a2 + 304))
  {
    uint64_t v7 = "undef ";
LABEL_8:
    sub_1CB8E509C(a1, v7);
  }
  sub_1CB8E509C(a1, "} >)");
  return a1;
}

{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;

  uint64_t v4 = sub_1CB8E509C(a1, "<MCFixup");
  unint64_t v5 = sub_1CB8E509C(v4, " Offset:");
  uint64_t v6 = llvm::raw_ostream::operator<<(v5, *(unsigned int *)(a2 + 8));
  uint64_t v7 = sub_1CB8E509C(v6, " Value:");
  llvm::MCExpr::print(*(llvm::raw_ostream **)a2, v7, 0, 0);
  uint64_t v8 = sub_1CB8E509C(v7, " Kind:");
  uint64_t v9 = llvm::raw_ostream::operator<<(v8, *(int *)(a2 + 12));
  sub_1CB8E509C(v9, ">");
  return a1;
}

{
  llvm::raw_ostream *v4;
  unsigned char *v5;
  std::chrono::system_clock::time_point __t;
  const char *v8;
  uint64_t v9;
  tm v10;
  char __s[20];
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(&v10, 0, sizeof(v10));
  __t.__d_.__rep_ = a2 / 1000;
  __t.__d_.__rep_ = std::chrono::system_clock::to_time_t(&__t);
  localtime_r(&__t.__d_.__rep_, &v10);
  strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v10);
  uint64_t v4 = sub_1CB8E509C(a1, __s);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, 46);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 46;
  }
  __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&unk_1F2643918;
  uint64_t v8 = "%.9lu";
  uint64_t v9 = a2 % 1000000000;
  return llvm::raw_ostream::operator<<(v4, (uint64_t)&__t);
}

llvm::IndexedReference *llvm::IndexedReference::IndexedReference(llvm::IndexedReference *this, llvm::Instruction *a2, const llvm::LoopInfo *a3, llvm::ScalarEvolution *a4)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 0x300000000;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x300000000;
  *((void *)this + 13) = a4;
  *(unsigned char *)this = llvm::IndexedReference::delinearize((llvm::ScalarEvolution **)this, a3);
  return this;
}

{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 0x300000000;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0x300000000;
  *((void *)this + 13) = a4;
  *(unsigned char *)this = llvm::IndexedReference::delinearize((llvm::ScalarEvolution **)this, a3);
  return this;
}

uint64_t llvm::IndexedReference::delinearize(llvm::ScalarEvolution **this, const llvm::LoopInfo *a2)
{
  v59[3] = *MEMORY[0x1E4F143B8];
  unint64_t ElementSize = llvm::ScalarEvolution::getElementSize(this[13], this[1]);
  int v5 = *((_DWORD *)a2 + 4);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = (const llvm::SCEV *)ElementSize;
  uint64_t v7 = this[1];
  uint64_t v8 = *((void *)v7 + 5);
  uint64_t v9 = *(void *)a2;
  unsigned int v10 = v5 - 1;
  uint64_t v11 = ((v8 >> 4) ^ (v8 >> 9)) & (v5 - 1);
  uint64_t v12 = *(void *)(*(void *)a2 + 16 * v11);
  if (v8 != v12)
  {
    int v13 = 1;
    while (v12 != -4096)
    {
      int v14 = v11 + v13++;
      uint64_t v11 = v14 & v10;
      uint64_t v12 = *(void *)(v9 + 16 * v11);
      if (v8 == v12) {
        goto LABEL_6;
      }
    }
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v15 = *(const llvm::Loop **)(v9 + 16 * v11 + 8);
  if (!v15)
  {
LABEL_10:
    int v18 = 0;
    return v18 & ElementSize;
  }
  int v16 = *((unsigned __int8 *)v7 + 16);
  if (v7 && (v16 - 62) > 0xFFFFFFFD)
  {
    uint64_t v17 = -1;
  }
  else
  {
    unint64_t v19 = 0;
    if (!v7 || v16 != 62) {
      goto LABEL_15;
    }
    uint64_t v17 = -(uint64_t)(*((_DWORD *)v7 + 5) & 0x7FFFFFF);
  }
  unint64_t v19 = (llvm::Value *)*((void *)v7 + 4 * v17);
LABEL_15:
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(this[13], v19, v15);
  PointerBase = llvm::ScalarEvolution::getPointerBase(this[13], SCEVAtScope);
  if (PointerBase) {
    BOOL v22 = *((unsigned __int16 *)PointerBase + 12) == 14;
  }
  else {
    BOOL v22 = 0;
  }
  if (v22) {
    uint64_t v23 = (char *)PointerBase - 32;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (const llvm::APInt *)(v23 + 32);
  if (v22) {
    uint64_t v25 = (llvm::ScalarEvolution *)(v23 + 32);
  }
  else {
    uint64_t v25 = 0;
  }
  this[2] = v25;
  if (!v22)
  {
    LODWORD(ElementSize) = 0;
LABEL_26:
    int v18 = 1;
    return v18 & ElementSize;
  }
  Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(this[13], SCEVAtScope, v24, 0, 0);
  unint64_t v28 = this[13];
  uint64_t v29 = (const llvm::SCEV ***)llvm::ScalarEvolution::getElementSize(v28, this[1]);
  llvm::delinearize(v28, MinusSCEV, (uint64_t)(this + 3), (uint64_t)(this + 8), v29);
  uint64_t v30 = *((unsigned int *)this + 8);
  if (!v30 || (int v31 = *((_DWORD *)this + 18)) == 0 || v30 != v31)
  {
    if (*(_WORD *)(MinusSCEV + 24) != 7) {
      goto LABEL_51;
    }
    if (*(void *)(MinusSCEV + 40) != 2) {
      goto LABEL_51;
    }
    uint64_t v36 = *(const llvm::SCEV ***)(MinusSCEV + 32);
    if (*((_WORD *)*v36 + 12) == 7) {
      goto LABEL_51;
    }
    uint64_t v37 = v36[1];
    if (*((_WORD *)v37 + 12) == 7) {
      goto LABEL_51;
    }
    int v38 = this[13];
    if (llvm::ScalarEvolution::getLoopDisposition(v38, *v36, v15) != 1
      || llvm::ScalarEvolution::getLoopDisposition(v38, v37, v15) != 1)
    {
      goto LABEL_51;
    }
    uint64_t v39 = *(void *)(MinusSCEV + 40);
    if (v39 == 2)
    {
      Negativeuint64_t SCEV = *(const llvm::SCEV **)(*(void *)(MinusSCEV + 32) + 8);
    }
    else
    {
      uint64_t v55 = *(void *)(MinusSCEV + 32);
      int v57 = v59;
      uint64_t v58 = 0x300000000;
      uint64_t v50 = v39;
      size_t v51 = 8 * v39 - 8;
      if (v51 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v52 = 0;
      if (v50 != 1)
      {
        memcpy(v57, (const void *)(v55 + 8), v51);
        int v52 = v58;
      }
      LODWORD(v58) = v52 + (v51 >> 3);
      Negativeuint64_t SCEV = (const llvm::SCEV *)sub_1CD478318(v38, (uint64_t)&v57, *(const llvm::Loop **)(MinusSCEV + 48), 0);
      if (v57 != v59) {
        free(v57);
      }
    }
    if (NegativeSCEV && llvm::ScalarEvolution::isKnownNegative(v38, NegativeSCEV)) {
      Negativeuint64_t SCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(v38, (uint64_t)NegativeSCEV, 0);
    }
    if (NegativeSCEV != v6)
    {
LABEL_51:
      LODWORD(ElementSize) = 0;
      *((_DWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      goto LABEL_26;
    }
    uint64_t v41 = (llvm::ConstantInt ****)this[13];
    if (*(_WORD *)(MinusSCEV + 24) != 7) {
      goto LABEL_57;
    }
    uint64_t v42 = *(void *)(MinusSCEV + 40);
    if (v42 == 2)
    {
      uint64_t v43 = *(const llvm::SCEV **)(*(void *)(MinusSCEV + 32) + 8);
      if (!v43)
      {
LABEL_57:
        UDivExactExpr = llvm::ScalarEvolution::getUDivExactExpr(v41, (uint64_t **)MinusSCEV, v6);
        unsigned int v48 = *((_DWORD *)this + 8);
        if (v48 >= *((_DWORD *)this + 9)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)this[3] + v48) = UDivExactExpr;
        ++*((_DWORD *)this + 8);
        unsigned int v49 = *((_DWORD *)this + 18);
        if (v49 >= *((_DWORD *)this + 19)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)this[8] + v49) = v6;
        ++*((_DWORD *)this + 18);
        uint64_t v30 = *((unsigned int *)this + 8);
        if (!v30)
        {
          int v18 = 1;
          LODWORD(ElementSize) = 1;
          return v18 & ElementSize;
        }
        int v32 = this[3];
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v56 = *(void *)(MinusSCEV + 32);
      int v57 = v59;
      uint64_t v58 = 0x300000000;
      unint64_t v53 = 8 * v42 - 8;
      if (v53 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v54 = 0;
      if (v42 != 1)
      {
        memcpy(v57, (const void *)(v56 + 8), 8 * v42 - 8);
        int v54 = v58;
      }
      LODWORD(v58) = v54 + (v53 >> 3);
      uint64_t v43 = (const llvm::SCEV *)sub_1CD478318((llvm::ScalarEvolution *)v41, (uint64_t)&v57, *(const llvm::Loop **)(MinusSCEV + 48), 0);
      if (v57 != v59) {
        free(v57);
      }
      uint64_t v41 = (llvm::ConstantInt ****)this[13];
      if (!v43) {
        goto LABEL_57;
      }
    }
    int isKnownNegative = llvm::ScalarEvolution::isKnownNegative((llvm::ScalarEvolution *)v41, v43);
    uint64_t v41 = (llvm::ConstantInt ****)this[13];
    if (isKnownNegative)
    {
      uint64_t v45 = **(void **)(MinusSCEV + 32);
      unint64_t v46 = llvm::ScalarEvolution::getNegativeSCEV(this[13], (uint64_t)v43, 0);
      Minusuint64_t SCEV = llvm::ScalarEvolution::getAddRecExpr((llvm::ScalarEvolution *)v41, v45, v46, *(const llvm::Loop **)(MinusSCEV + 48), *(_WORD *)(MinusSCEV + 28) & 7);
      uint64_t v41 = (llvm::ConstantInt ****)this[13];
    }
    goto LABEL_57;
  }
  int v32 = this[3];
LABEL_32:
  int v33 = (const llvm::SCEV **)((char *)v32 + 8 * v30);
  unsigned int v34 = (const llvm::SCEV **)((char *)v32 + 8);
  do
  {
    LODWORD(ElementSize) = llvm::IndexedReference::isSimpleAddRecurrence(this, *(v34 - 1), v15);
    if (ElementSize) {
      BOOL v35 = v34 == v33;
    }
    else {
      BOOL v35 = 1;
    }
    ++v34;
    int v18 = 1;
  }
  while (!v35);
  return v18 & ElementSize;
}

uint64_t llvm::IndexedReference::hasSpacialReuse(llvm::IndexedReference *this, const llvm::IndexedReference *a2, unsigned int a3, llvm::AAResults *a4)
{
  if (*((void *)this + 2) != *((void *)a2 + 2)
    && !llvm::IndexedReference::isAliased((uint64_t ****)this, (uint64_t ****)a2, a4)
    || (uint64_t v7 = *((unsigned int *)this + 8), v7 != *((_DWORD *)a2 + 8)))
  {
LABEL_17:
    BOOL v12 = 0;
LABEL_18:
    int v13 = 1;
    return v12 | (v13 << 8);
  }
  uint64_t v8 = (v7 - 1);
  if (v7 != 1)
  {
    uint64_t v9 = (void *)*((void *)this + 3);
    unsigned int v10 = (void *)*((void *)a2 + 3);
    while (*v9 == *v10)
    {
      ++v10;
      ++v9;
      if (!--v8) {
        goto LABEL_7;
      }
    }
    goto LABEL_17;
  }
LABEL_7:
  Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(*((llvm::ScalarEvolution **)this + 13), *(llvm::SCEV **)(*((void *)this + 3) + 8 * v7 - 8), *(const llvm::APInt **)(*((void *)a2 + 3) + 8 * v7 - 8), 0, 0);
  BOOL v12 = 0;
  int v13 = 0;
  if (MinusSCEV) {
    BOOL v14 = *(unsigned __int16 *)(MinusSCEV + 24) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(MinusSCEV + 32);
    unsigned int v16 = *(_DWORD *)(v15 + 32);
    if (v16 > 0x40) {
      uint64_t v17 = **(void **)(v15 + 24);
    }
    else {
      uint64_t v17 = (uint64_t)(*(void *)(v15 + 24) << -(char)v16) >> -(char)v16;
    }
    BOOL v12 = v17 < a3;
    goto LABEL_18;
  }
  return v12 | (v13 << 8);
}

uint64_t llvm::IndexedReference::hasTemporalReuse(llvm::IndexedReference *this, const llvm::IndexedReference *a2, unsigned int a3, const llvm::Loop **a4, llvm::DependenceInfo *a5, llvm::AAResults *a6)
{
  if (*((void *)this + 2) != *((void *)a2 + 2)
    && !llvm::IndexedReference::isAliased((uint64_t ****)this, (uint64_t ****)a2, a6))
  {
    int v13 = 0;
    int v12 = 1;
    return v13 | (v12 << 8);
  }
  uint64_t v11 = (llvm::Instruction *)*((void *)a2 + 1);
  int v12 = 1;
  llvm::DependenceInfo::depends((uint64_t)a5, *((llvm::Instruction **)this + 1), v11, 1, &v31);
  if (!v31)
  {
    int v13 = 0;
    return v13 | (v12 << 8);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31))
  {
    int v13 = 1;
    goto LABEL_35;
  }
  int v14 = 0;
  do
  {
    a4 = (const llvm::Loop **)*a4;
    ++v14;
  }
  while (a4);
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  if (v15 < 1)
  {
LABEL_29:
    int v13 = 1;
    goto LABEL_34;
  }
  int v16 = v15;
  uint64_t v17 = a3;
  uint64_t v18 = 1;
  while (1)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v31 + 56))(v31, v18);
    if (!v19 || *(_WORD *)(v19 + 24))
    {
      int v13 = 0;
      int v12 = 0;
      goto LABEL_35;
    }
    uint64_t v20 = *(void *)(v19 + 32);
    uint64_t v21 = *(unsigned int *)(v20 + 32);
    if (v14 != v18) {
      break;
    }
    if (v21 > 0x40) {
      uint64_t v22 = **(void **)(v20 + 24);
    }
    else {
      uint64_t v22 = (uint64_t)(*(void *)(v20 + 24) << -(char)v21) >> -(char)v21;
    }
    if (v22 > v17) {
      goto LABEL_33;
    }
LABEL_27:
    BOOL v28 = v18 == v16;
    uint64_t v18 = (v18 + 1);
    if (v28) {
      goto LABEL_29;
    }
  }
  if (v21 <= 0x40)
  {
    if (*(void *)(v20 + 24)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  int v23 = 0;
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  do
  {
    if (v24-- < 1) {
      break;
    }
    unint64_t v26 = *(void *)(*(void *)(v20 + 24) + 8 * v24);
    v23 += __clz(v26);
  }
  while (!v26);
  int v27 = v21 | 0xFFFFFFC0;
  if ((v21 & 0x3F) == 0) {
    int v27 = 0;
  }
  if (v23 + v27 == v21) {
    goto LABEL_27;
  }
LABEL_33:
  int v13 = 0;
LABEL_34:
  int v12 = 1;
LABEL_35:
  uint64_t v29 = v31;
  uint64_t v31 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  return v13 | (v12 << 8);
}

uint64_t llvm::IndexedReference::computeRefCost(llvm::ScalarEvolution **this, const llvm::Loop *a2, unsigned int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (llvm::IndexedReference::isLoopInvariant((llvm::IndexedReference *)this, a2)) {
    return 1;
  }
  uint64_t v7 = this[13];
  BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v7, a2);
  Exact = (const llvm::SCEV *)llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)a2, (uint64_t)v7);
  if (*((_WORD *)Exact + 12) || (unint64_t Constant = llvm::ScalarEvolution::getTripCountFromExitCount(v7, Exact, 1)) == 0)
  {
    uint64_t v11 = (uint64_t *)((char *)this[8] + 8 * *((unsigned int *)this + 18) - 8);
    while (2)
    {
      uint64_t v12 = *v11;
      switch(*(_WORD *)(v12 + 24))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          int v13 = (llvm::Type **)(v12 + 40);
          break;
        case 4:
          int v13 = (llvm::Type **)(v12 + 48);
          break;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          uint64_t v11 = *(uint64_t **)(v12 + 32);
          continue;
        case 6:
          uint64_t v11 = (uint64_t *)(v12 + 40);
          continue;
        case 0xE:
          int v13 = *(llvm::Type ***)(v12 - 8);
          break;
        default:
          int v13 = *(llvm::Type ***)(v12 + 32);
          break;
      }
      break;
    }
    unint64_t Constant = llvm::ScalarEvolution::getConstant(this[13], *v13, dword_1EBCC6650, 0);
  }
  if (llvm::IndexedReference::isConsecutive((llvm::IndexedReference *)this, a2, a3))
  {
    uint64_t v17 = *((void *)this[3] + *((unsigned int *)this + 8) - 1);
    uint64_t v18 = this[13];
    uint64_t v19 = *(void *)(v17 + 40);
    if (v19 == 2)
    {
      uint64_t v20 = *(void *)(*(void *)(v17 + 32) + 8);
    }
    else
    {
      uint64_t v40 = *((void *)this[3] + *((unsigned int *)this + 8) - 1);
      uint64_t v36 = *(void *)(v17 + 32);
      uint64_t v41 = &v43;
      uint64_t v42 = 0x300000000;
      uint64_t v37 = v19;
      size_t v38 = 8 * v19 - 8;
      if (v38 >= 0x19) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v39 = 0;
      if (v37 != 1)
      {
        memcpy(v41, (const void *)(v36 + 8), v38);
        int v39 = v42;
      }
      LODWORD(v42) = v39 + (v38 >> 3);
      uint64_t v20 = sub_1CD478318(v18, (uint64_t)&v41, *(const llvm::Loop **)(v40 + 48), 0);
      if (v41 != &v43) {
        free(v41);
      }
      uint64_t v18 = this[13];
    }
    uint64_t v21 = (const llvm::SCEV *)*((void *)this[8] + *((unsigned int *)this + 18) - 1);
    uint64_t v41 = &v43;
    uint64_t v43 = v20;
    uint64_t v44 = v21;
    uint64_t v42 = 0x200000002;
    MulExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr((uint64_t)v18, (uint64_t)&v41, 0, 0);
    if (v41 != &v43) {
      free(v41);
    }
    int v23 = MulExpr;
    while (2)
    {
      switch(*((_WORD *)v23 + 12))
      {
        case 1:
        case 2:
        case 3:
        case 0xD:
          uint64_t v25 = (llvm::Type **)((char *)v23 + 40);
          goto LABEL_36;
        case 4:
          uint64_t v25 = (llvm::Type **)((char *)v23 + 48);
          goto LABEL_36;
        case 5:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          int64_t v24 = (const llvm::SCEV **)*((void *)v23 + 4);
          goto LABEL_30;
        case 6:
          int64_t v24 = (const llvm::SCEV **)((char *)v23 + 40);
LABEL_30:
          int v23 = *v24;
          continue;
        case 0xE:
          uint64_t v25 = (llvm::Type **)*((void *)v23 - 1);
          goto LABEL_36;
        default:
          uint64_t v25 = (llvm::Type **)*((void *)v23 + 4);
LABEL_36:
          unint64_t v26 = *v25;
          unint64_t v27 = Constant;
          while (2)
          {
            switch(*(_WORD *)(v27 + 24))
            {
              case 1:
              case 2:
              case 3:
              case 0xD:
                uint64_t v29 = (llvm::Type **)(v27 + 40);
                goto LABEL_44;
              case 4:
                uint64_t v29 = (llvm::Type **)(v27 + 48);
                goto LABEL_44;
              case 5:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
                BOOL v28 = *(unint64_t **)(v27 + 32);
                goto LABEL_39;
              case 6:
                BOOL v28 = (unint64_t *)(v27 + 40);
LABEL_39:
                unint64_t v27 = *v28;
                continue;
              case 0xE:
                uint64_t v29 = *(llvm::Type ***)(v27 - 8);
                goto LABEL_44;
              default:
                uint64_t v29 = *(llvm::Type ***)(v27 + 32);
LABEL_44:
                WiderType = llvm::ScalarEvolution::getWiderType(this[13], v26, *v29);
                unint64_t v31 = llvm::ScalarEvolution::getConstant(this[13], WiderType, a3, 0);
                if (llvm::ScalarEvolution::isKnownNegative(this[13], MulExpr)) {
                  MulExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(this[13], (uint64_t)MulExpr, 0);
                }
                NoopOrAnyExtend = llvm::ScalarEvolution::getNoopOrAnyExtend(this[13], MulExpr, WiderType);
                int v33 = llvm::ScalarEvolution::getNoopOrAnyExtend(this[13], (const llvm::SCEV *)Constant, WiderType);
                uint64_t v34 = (uint64_t)this[13];
                uint64_t v41 = &v43;
                uint64_t v43 = (uint64_t)NoopOrAnyExtend;
                uint64_t v44 = v33;
                uint64_t v42 = 0x200000002;
                BOOL v35 = (const llvm::SCEV *)llvm::ScalarEvolution::getMulExpr(v34, (uint64_t)&v41, 0, 0);
                if (v41 != &v43) {
                  free(v41);
                }
                unint64_t Constant = llvm::ScalarEvolution::getUDivExpr(this[13], v35, v31);
                break;
            }
            break;
          }
          break;
      }
      break;
    }
  }
  if (Constant) {
    BOOL v14 = *(unsigned __int16 *)(Constant + 24) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    return -1;
  }
  uint64_t v15 = *(void *)(Constant + 32);
  unsigned int v16 = *(_DWORD *)(v15 + 32);
  if (v16 > 0x40) {
    return **(void **)(v15 + 24);
  }
  else {
    return (uint64_t)(*(void *)(v15 + 24) << -(char)v16) >> -(char)v16;
  }
}

uint64_t llvm::IndexedReference::isLoopInvariant(llvm::IndexedReference *this, const llvm::Loop *a2)
{
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(unsigned __int8 *)(v4 + 16);
  if (v4) {
    BOOL v6 = (v5 - 62) > 0xFFFFFFFD;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v8 = -1;
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  if (v4 && v5 == 62)
  {
    uint64_t v8 = -(uint64_t)(*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
LABEL_9:
    unint64_t v7 = *(void *)(v4 + 32 * v8);
  }
  uint64_t v9 = *((void *)this + 13);
  uint64_t v10 = *(void *)(v9 + 104);
  unsigned int v11 = *(_DWORD *)(v9 + 120);
  if (!v11)
  {
LABEL_16:
    uint64_t v14 = v10 + 48 * v11;
    goto LABEL_17;
  }
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  uint64_t v14 = v10 + 48 * v13;
  uint64_t v15 = *(void *)(v14 + 24);
  if (v15 != v7)
  {
    int v16 = 1;
    while (v15 != -4096)
    {
      unsigned int v17 = v13 + v16++;
      unsigned int v13 = v17 & v12;
      uint64_t v14 = v10 + 48 * (v17 & v12);
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15 == v7) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
LABEL_17:
  if (v14 == v10 + 48 * v11 || (uint64_t SCEVIter = *(const llvm::SCEV **)(v14 + 40)) == 0) {
    uint64_t SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(*((llvm::ScalarEvolution **)this + 13), v7);
  }
  uint64_t result = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v9, SCEVIter, a2);
  if (result != 1)
  {
    uint64_t v20 = *((unsigned int *)this + 8);
    if (!v20) {
      return 1;
    }
    uint64_t v21 = (const llvm::Loop ***)*((void *)this + 3);
    uint64_t v22 = 8 * v20;
    while (1)
    {
      int v23 = *v21;
      if (*((_WORD *)*v21 + 12) == 7)
      {
        if (v23[6] == a2) {
          return 0;
        }
      }
      else if (llvm::ScalarEvolution::getLoopDisposition(*((llvm::ScalarEvolution **)this + 13), (const llvm::SCEV *)v23, a2) != 1)
      {
        return 0;
      }
      ++v21;
      v22 -= 8;
      if (!v22) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::IndexedReference::getLastCoefficient(llvm::IndexedReference *this)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*((void *)this + 3) + 8 * *((unsigned int *)this + 8) - 8);
  uint64_t v2 = *(void *)(v1 + 40);
  if (v2 == 2) {
    return *(void *)(*(void *)(v1 + 32) + 8);
  }
  int v5 = (llvm::ScalarEvolution *)*((void *)this + 13);
  uint64_t v6 = *(void *)(*((void *)this + 3) + 8 * *((unsigned int *)this + 8) - 8);
  uint64_t v7 = *(void *)(v1 + 32);
  unsigned int v11 = v13;
  uint64_t v12 = 0x300000000;
  uint64_t v8 = v2;
  size_t v9 = 8 * v2 - 8;
  if (v9 >= 0x19) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v10 = 0;
  if (v8 != 1)
  {
    memcpy(v11, (const void *)(v7 + 8), v9);
    int v10 = v12;
  }
  LODWORD(v12) = v10 + (v9 >> 3);
  uint64_t v3 = sub_1CD478318(v5, (uint64_t)&v11, *(const llvm::Loop **)(v6 + 48), 0);
  if (v11 != v13) {
    free(v11);
  }
  return v3;
}

BOOL llvm::IndexedReference::isCoeffForLoopZeroOrInvariant(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  if (*((_WORD *)a2 + 12) == 7) {
    return *((void *)a2 + 6) != (void)a3;
  }
  else {
    return llvm::ScalarEvolution::getLoopDisposition(this[13], a2, a3) == 1;
  }
}

void sub_1CC07C66C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1CD4A1828((uint64_t)&v7, *a1);
  memset(v6, 0, sizeof(v6));
  uint64_t v3 = (char *)v6 + 8;
  uint64_t v4 = (char *)v6 + 8;
  uint64_t v5 = 8;
  sub_1CD4A15A8((uint64_t)&v7, (uint64_t)&v3, a2);
  sub_1CC07C814((void **)&v6[4] + 1);
  if (v4 != v3) {
    free(v4);
  }
  sub_1CC07C814(&v9);
  if (v8 != v7) {
    free(v8);
  }
}

void *sub_1CC07C738(void **a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = &a1[a2];
  uint64_t result = *(v3 - 1);
  if (*result)
  {
    if (a2)
    {
      while (1)
      {
        uint64_t v5 = v2 + 1;
        if (v2 + 1 == v3) {
          break;
        }
        unsigned int v6 = 0;
        size_t v9 = v2;
        uint64_t v7 = *v2;
        uint64_t v8 = v9[1];
        do
        {
          uint64_t v8 = (void *)*v8;
          ++v6;
        }
        while (v8);
        do
        {
          uint64_t v7 = (void *)*v7;
          LODWORD(v8) = v8 + 1;
        }
        while (v7);
        uint64_t v2 = v5;
        if (v6 < v8) {
          goto LABEL_10;
        }
      }
    }
    uint64_t v5 = v3;
LABEL_10:
    if (v5 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::CacheCost::computeRefGroupCacheCost(uint64_t a1, llvm::ScalarEvolution ****a2, const llvm::Loop *a3)
{
  uint64_t v4 = **a2;
  unsigned int v5 = (*(uint64_t (**)(void))(***(void ***)(a1 + 232) + 760))(**(void **)(a1 + 232));

  return llvm::IndexedReference::computeRefCost(v4, a3, v5);
}

void **sub_1CC07C814(void **a1)
{
  sub_1CD4A10E4(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    unsigned int v6 = a1[1];
    unsigned int v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t *sub_1CC07C8A4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = result[1];
  uint64_t v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      uint64_t v7 = *a3;
      a2[1] = v5;
      a3[1] = v3;
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      *a2 = v7;
      *a3 = v9;
      uint64_t v10 = result[1];
      if (v8 > v10)
      {
        uint64_t v11 = *result;
        *uint64_t result = *a2;
        result[1] = v8;
        *a2 = v11;
        a2[1] = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = *result;
    if (v5 <= v3)
    {
      *uint64_t result = *a2;
      result[1] = v3;
      *a2 = v6;
      a2[1] = v4;
      uint64_t v12 = a3[1];
      if (v12 <= v4) {
        return result;
      }
      *a2 = *a3;
      a2[1] = v12;
    }
    else
    {
      *uint64_t result = *a3;
      result[1] = v5;
    }
    *a3 = v6;
    a3[1] = v4;
  }
  return result;
}

uint64_t *sub_1CC07C938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  if (v2 <= *(a2 - 1))
  {
    uint64_t v6 = a1 + 2;
    do
    {
      uint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      uint64_t v7 = v6[1];
      v6 += 2;
    }
    while (v2 <= v7);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t v4 = v3 + 2;
      uint64_t v5 = v3[3];
      v3 += 2;
    }
    while (v2 <= v5);
  }
  if (v4 >= a2)
  {
    uint64_t v8 = a2;
  }
  else
  {
    do
    {
      uint64_t v8 = a2 - 2;
      uint64_t v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 > v9);
  }
  uint64_t v10 = *a1;
  while (v4 < v8)
  {
    uint64_t v11 = *v4;
    uint64_t v12 = v4[1];
    uint64_t v13 = v8[1];
    *uint64_t v4 = *v8;
    v4[1] = v13;
    *uint64_t v8 = v11;
    v8[1] = v12;
    do
    {
      uint64_t v14 = v4[3];
      v4 += 2;
    }
    while (v2 <= v14);
    do
    {
      uint64_t v15 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 > v15);
  }
  if (v4 - 2 != a1)
  {
    uint64_t v16 = *(v4 - 1);
    *a1 = *(v4 - 2);
    a1[1] = v16;
  }
  *(v4 - 2) = v10;
  *(v4 - 1) = v2;
  return v4;
}

uint64_t *sub_1CC07CA08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 > v4);
  uint64_t v6 = &a1[v2];
  if (v2 == 2)
  {
    while (v6 < a2)
    {
      uint64_t v7 = a2 - 2;
      uint64_t v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 > v4) {
        goto LABEL_9;
      }
    }
    uint64_t v7 = a2;
  }
  else
  {
    do
    {
      uint64_t v7 = a2 - 2;
      uint64_t v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 <= v4);
  }
LABEL_9:
  uint64_t v10 = v6;
  if (v6 < v7)
  {
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10;
      uint64_t v13 = v10[1];
      uint64_t v14 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v14;
      *uint64_t v11 = v12;
      v11[1] = v13;
      do
      {
        uint64_t v15 = v10[3];
        v10 += 2;
      }
      while (v15 > v4);
      do
      {
        uint64_t v16 = *(v11 - 1);
        v11 -= 2;
      }
      while (v16 <= v4);
    }
    while (v10 < v11);
  }
  if (v10 - 2 != a1)
  {
    uint64_t v17 = *(v10 - 1);
    *a1 = *(v10 - 2);
    a1[1] = v17;
  }
  *(v10 - 2) = v3;
  *(v10 - 1) = v4;
  return v10 - 2;
}

BOOL sub_1CC07CAD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = a1[1];
      if (v6 > v7)
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        a1[1] = v6;
        *(a2 - 2) = v8;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC07C8A4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC07CC6C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC07CD0C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v9 = a1 + 4;
      sub_1CC07C8A4(a1, a1 + 2, a1 + 4);
      uint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = v10[1];
    if (v13 > v9[1])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = (uint64_t *)((char *)a1 + v15);
        uint64_t v17 = *(uint64_t *)((char *)a1 + v15 + 40);
        v16[6] = *(uint64_t *)((char *)a1 + v15 + 32);
        v16[7] = v17;
        if (v15 == -32) {
          break;
        }
        v15 -= 16;
        if (v13 <= v16[3])
        {
          uint64_t v18 = (uint64_t *)((char *)a1 + v15 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *uint64_t v18 = v14;
      v18[1] = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC07CC6C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC07C8A4(a1, a2, a3);
  uint64_t v9 = a4[1];
  uint64_t v10 = a3[1];
  if (v9 > v10)
  {
    uint64_t v11 = *a4;
    a3[1] = v9;
    a4[1] = v10;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    *a3 = v11;
    *a4 = v13;
    uint64_t v14 = a2[1];
    if (v12 > v14)
    {
      uint64_t v15 = *a3;
      a2[1] = v12;
      a3[1] = v14;
      uint64_t v17 = *a2;
      uint64_t v16 = a2[1];
      *a2 = v15;
      *a3 = v17;
      uint64_t v18 = a1[1];
      if (v16 > v18)
      {
        uint64_t v19 = *a1;
        *a1 = *a2;
        a1[1] = v16;
        *a2 = v19;
        a2[1] = v18;
      }
    }
  }
  return result;
}

uint64_t *sub_1CC07CD0C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = sub_1CC07CC6C(a1, a2, a3, a4);
  uint64_t v11 = a5[1];
  uint64_t v12 = a4[1];
  if (v11 > v12)
  {
    uint64_t v13 = *a5;
    a4[1] = v11;
    a5[1] = v12;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    *a4 = v13;
    *a5 = v15;
    uint64_t v16 = a3[1];
    if (v14 > v16)
    {
      uint64_t v17 = *a4;
      a3[1] = v14;
      a4[1] = v16;
      uint64_t v19 = *a3;
      uint64_t v18 = a3[1];
      *a3 = v17;
      *a4 = v19;
      uint64_t v20 = a2[1];
      if (v18 > v20)
      {
        uint64_t v21 = *a3;
        a2[1] = v18;
        a3[1] = v20;
        uint64_t v23 = *a2;
        uint64_t v22 = a2[1];
        *a2 = v21;
        *a3 = v23;
        uint64_t v24 = a1[1];
        if (v22 > v24)
        {
          uint64_t v25 = *a1;
          *a1 = *a2;
          a1[1] = v22;
          *a2 = v25;
          a2[1] = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC07CDDC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = (void *)(result + 16 * v8);
      do
      {
        BOOL result = sub_1CC07CFB0((uint64_t)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      uint64_t v11 = v4;
      do
      {
        uint64_t v12 = v11[1];
        uint64_t v13 = v5[1];
        if (v12 > v13)
        {
          uint64_t v14 = *v11;
          *uint64_t v11 = *v5;
          v11[1] = v13;
          *uint64_t v5 = v14;
          v5[1] = v12;
          BOOL result = sub_1CC07CFB0((uint64_t)v5, v7, v5);
        }
        v11 += 2;
      }
      while (v11 != a3);
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = *v5;
        uint64_t v17 = v5[1];
        uint64_t v18 = v5;
        do
        {
          uint64_t v19 = &v18[2 * v15 + 2];
          uint64_t v20 = (2 * v15) | 1;
          uint64_t v21 = 2 * v15 + 2;
          if (v21 < v7)
          {
            uint64_t v22 = v19[1];
            uint64_t v23 = v19[3];
            v19 += 2 * (v22 > v23);
            if (v22 > v23) {
              uint64_t v20 = v21;
            }
          }
          uint64_t v24 = v19[1];
          *uint64_t v18 = *v19;
          v18[1] = v24;
          uint64_t v18 = v19;
          uint64_t v15 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if (v19 == v4 - 2)
        {
          *uint64_t v19 = v16;
          v19[1] = v17;
        }
        else
        {
          uint64_t v25 = *(v4 - 1);
          *uint64_t v19 = *(v4 - 2);
          v19[1] = v25;
          *(v4 - 2) = v16;
          *(v4 - 1) = v17;
          uint64_t v26 = (char *)v19 - (char *)v5 + 16;
          if (v26 >= 17)
          {
            unint64_t v27 = (((unint64_t)v26 >> 4) - 2) >> 1;
            uint64_t v28 = v5[2 * v27 + 1];
            uint64_t v29 = v19[1];
            if (v28 > v29)
            {
              uint64_t v30 = *v19;
              do
              {
                unint64_t v31 = v19;
                uint64_t v19 = &v5[2 * v27];
                *unint64_t v31 = *v19;
                v31[1] = v28;
                if (!v27) {
                  break;
                }
                unint64_t v27 = (v27 - 1) >> 1;
                uint64_t v28 = v5[2 * v27 + 1];
              }
              while (v28 > v29);
              *uint64_t v19 = v30;
              v19[1] = v29;
            }
          }
        }
        v4 -= 2;
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CC07CFB0(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) + 1;
      uint64_t v7 = (void *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2)
      {
        uint64_t v9 = v7[1];
        uint64_t v10 = v7[3];
        v7 += 2 * (v9 > v10);
        if (v9 > v10) {
          uint64_t v6 = v8;
        }
      }
      uint64_t v11 = v7[1];
      uint64_t v12 = a3[1];
      if (v11 <= v12)
      {
        uint64_t v13 = *a3;
        do
        {
          uint64_t v14 = a3;
          a3 = v7;
          *uint64_t v14 = *v7;
          v14[1] = v11;
          if (v4 < v6) {
            break;
          }
          uint64_t v15 = (2 * v6) | 1;
          uint64_t v7 = (void *)(result + 16 * v15);
          uint64_t v16 = 2 * v6 + 2;
          if (v16 < a2)
          {
            uint64_t v17 = v7[1];
            uint64_t v18 = v7[3];
            v7 += 2 * (v17 > v18);
            if (v17 > v18) {
              uint64_t v15 = v16;
            }
          }
          uint64_t v11 = v7[1];
          uint64_t v6 = v15;
        }
        while (v11 <= v12);
        *a3 = v13;
        a3[1] = v12;
      }
    }
  }
  return result;
}

uint64_t sub_1CC07D070(uint64_t a1, uint64_t a2)
{
  int64_t v4 = v39;
  uint64_t v34 = v39;
  uint64_t v5 = *(const void **)(a1 + 8);
  if (v5 == *(const void **)a1)
  {
    BOOL v35 = v39;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v24 = *(unsigned int *)(a1 + 16);
    int64_t v4 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
    if (!v4)
    {
      if (v24) {
        goto LABEL_44;
      }
      int64_t v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4) {
        goto LABEL_44;
      }
    }
    BOOL v35 = v4;
    uint64_t v6 = *(const void **)a1;
    uint64_t v5 = *(const void **)(a1 + 8);
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  unsigned int v36 = v8;
  if (v5 == v6) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    unsigned int v7 = *(_DWORD *)(a1 + 20);
  }
  int v10 = *(_DWORD *)(a1 + 24);
  unsigned int v37 = v7;
  int v38 = v10;
  sub_1CD4A223C((uint64_t)&v40, (void *)(a1 + 96));
  int v45 = *(_DWORD *)(a1 + 144);
  uint64_t v11 = v27;
  uint64_t v12 = *(const void **)(a2 + 8);
  if (v12 != *(const void **)a2)
  {
    uint64_t v25 = *(unsigned int *)(a2 + 16);
    uint64_t v11 = malloc_type_malloc(8 * v25, 0x4065EBACuLL);
    if (v11 || !v25 && (uint64_t v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      uint64_t v26 = v11;
      uint64_t v13 = *(const void **)a2;
      uint64_t v12 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_44:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v26 = v27;
  uint64_t v13 = *(const void **)(a2 + 8);
LABEL_10:
  if (v12 == v13) {
    unsigned int v14 = *(_DWORD *)(a2 + 20);
  }
  else {
    unsigned int v14 = *(_DWORD *)(a2 + 16);
  }
  if (v14) {
    memmove(v11, v12, 8 * v14);
  }
  sub_1CD4A223C((uint64_t)&v28, (void *)(a2 + 96));
  uint64_t v15 = 0;
  int v33 = *(_DWORD *)(a2 + 144);
  while (v44 != v32)
  {
LABEL_29:
    ++v15;
    sub_1CD4A2600((llvm::SmallPtrSetImplBase *)&v34);
  }
  uint64_t v16 = (void *)(v41 + 8 * (v43 >> 7));
  if (v42 == v41)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = *v16 + 32 * (v43 & 0x7F);
    uint64_t v18 = *(void *)(v41 + (((v43 + v44) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v43 + v44) & 0x7F);
  }
  uint64_t v19 = (void *)(v29 + 8 * (v31 >> 7));
  if (v30 == v29) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *v19 + 32 * (v31 & 0x7F);
  }
  while (v17 != v18)
  {
    if (!sub_1CD4A2594(v17, v20)) {
      goto LABEL_29;
    }
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      uint64_t v21 = v16[1];
      ++v16;
      uint64_t v17 = v21;
    }
    v20 += 32;
    if (v20 - *v19 == 4096)
    {
      uint64_t v22 = v19[1];
      ++v19;
      uint64_t v20 = v22;
    }
  }
  sub_1CC07C814(&v28);
  if (v26 != v27) {
    free(v26);
  }
  sub_1CC07C814(&v40);
  if (v35 != v34) {
    free(v35);
  }
  return v15;
}

void *sub_1CC07D328(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = v37;
  uint64_t v32 = v37;
  unsigned int v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    int v33 = v37;
    unsigned int v8 = v7;
  }
  else
  {
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    uint64_t v6 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v6)
    {
      if (v22) {
        goto LABEL_31;
      }
      uint64_t v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6) {
        goto LABEL_31;
      }
    }
    int v33 = v6;
    unsigned int v8 = *(const void **)a1;
    unsigned int v7 = *(const void **)(a1 + 8);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v34 = v10;
  if (v7 == v8) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    unsigned int v9 = *(_DWORD *)(a1 + 20);
  }
  int v12 = *(_DWORD *)(a1 + 24);
  unsigned int v35 = v9;
  int v36 = v12;
  sub_1CD4A223C((uint64_t)v38, (void *)(a1 + 96));
  int v39 = *(_DWORD *)(a1 + 144);
  uint64_t v13 = v29;
  uint64_t v24 = v29;
  unsigned int v14 = *(const void **)(a2 + 8);
  if (v14 == *(const void **)a2)
  {
    uint64_t v25 = v29;
    uint64_t v15 = v14;
    goto LABEL_10;
  }
  uint64_t v23 = *(unsigned int *)(a2 + 16);
  uint64_t v13 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
  if (!v13 && (v23 || (uint64_t v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_31:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  uint64_t v25 = v13;
  uint64_t v15 = *(const void **)a2;
  unsigned int v14 = *(const void **)(a2 + 8);
LABEL_10:
  unsigned int v17 = *(_DWORD *)(a2 + 16);
  unsigned int v16 = *(_DWORD *)(a2 + 20);
  unsigned int v26 = v17;
  if (v14 == v15) {
    unsigned int v18 = v16;
  }
  else {
    unsigned int v18 = v17;
  }
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    unsigned int v16 = *(_DWORD *)(a2 + 20);
  }
  int v19 = *(_DWORD *)(a2 + 24);
  unsigned int v27 = v16;
  int v28 = v19;
  sub_1CD4A223C((uint64_t)v30, (void *)(a2 + 96));
  int v31 = *(_DWORD *)(a2 + 144);
  sub_1CC07D6B0((uint64_t)&v32, (uint64_t)&v24, a3, (uint64_t)&v40);
  uint64_t v20 = v42[7];
  sub_1CC07C814(v42);
  if (v41 != v40) {
    free(v41);
  }
  sub_1CC07C814(v30);
  if (v25 != v24) {
    free(v25);
  }
  sub_1CC07C814(v38);
  if (v33 != v32) {
    free(v33);
  }
  return v20;
}

void sub_1CC07D524(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = 16 * (v9 - v8) - 1;
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = a1[5];
  unint64_t v12 = v11 + a1[4];
  unint64_t v13 = v10 - v12;
  if (a4 > v13)
  {
    sub_1CD4A2304((uint64_t)a1, a4 - v13);
    uint64_t v11 = a1[5];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v12 = a1[4] + v11;
  }
  unsigned int v14 = (void *)(v8 + 8 * (v12 >> 7));
  if (v9 == v8)
  {
    uint64_t v15 = 0;
    if (a4) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v18 = v15;
    unsigned int v17 = v14;
    goto LABEL_13;
  }
  uint64_t v15 = *v14 + 32 * (v12 & 0x7F);
  if (!a4) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v16 = a4 + ((v15 - *v14) >> 5);
  if (v16 < 1)
  {
    unint64_t v19 = 127 - v16;
    LOBYTE(v16) = ~(127 - v16);
    unsigned int v17 = &v14[-(v19 >> 7)];
  }
  else
  {
    unsigned int v17 = &v14[(unint64_t)v16 >> 7];
  }
  uint64_t v18 = *v17 + 32 * (v16 & 0x7F);
LABEL_13:
  if (v15 != v18)
  {
    do
    {
      uint64_t v20 = v18;
      if (v14 != v17) {
        uint64_t v20 = *v14 + 4096;
      }
      if (v15 == v20)
      {
        uint64_t v20 = v15;
      }
      else
      {
        uint64_t v21 = v15;
        do
        {
          *(unsigned char *)uint64_t v21 = 0;
          *(unsigned char *)(v21 + 24) = 0;
          if (*((unsigned char *)a3 + 24))
          {
            long long v22 = *a3;
            *(void *)(v21 + 16) = *((void *)a3 + 2);
            *(_OWORD *)uint64_t v21 = v22;
            *(unsigned char *)(v21 + 24) = 1;
          }
          a3 += 2;
          if ((long long *)((char *)a3 - *a2) == (long long *)4096)
          {
            uint64_t v23 = (long long *)a2[1];
            ++a2;
            a3 = v23;
          }
          v21 += 32;
        }
        while (v21 != v20);
        uint64_t v11 = a1[5];
      }
      v11 += (v20 - v15) >> 5;
      a1[5] = v11;
      if (v14 == v17) {
        break;
      }
      uint64_t v24 = v14[1];
      ++v14;
      uint64_t v15 = v24;
    }
    while (v24 != v18);
  }
}

void sub_1CC07D6B0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v27 = v32;
  uint64_t v9 = *(const void **)a1;
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v33 = *(_OWORD *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v34 = *(void *)(a1 + 112);
  uint64_t v35 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v36 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v37 = *(_DWORD *)(a1 + 144);
  uint64_t v16 = v21;
  unint64_t v13 = *(const void **)a2;
  unint64_t v12 = *(const void **)(a2 + 8);
  if (v12 == *(const void **)a2)
  {
    unsigned int v17 = v21;
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v14) {
      memmove(v21, v12, 8 * v14);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v14;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v22 = *(_OWORD *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = v15;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v25 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v26 = *(_DWORD *)(a2 + 144);
  sub_1CC07D860((uint64_t)&v27, (uint64_t)&v16, a3, a4);
  sub_1CC07C814((void **)&v22);
  if (v17 != v16) {
    free(v17);
  }
  sub_1CC07C814((void **)&v33);
  if (v28 != v27) {
    free(v28);
  }
}

void sub_1CC07D860(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v27 = v32;
  uint64_t v9 = *(const void **)a1;
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    int v28 = v32;
    uint64_t v10 = *(unsigned int *)(a1 + 20);
    if (v10) {
      memmove(v32, v8, 8 * v10);
    }
  }
  else
  {
    int v28 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = v10;
  int v31 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v33 = *(_OWORD *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v34 = *(void *)(a1 + 112);
  uint64_t v35 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v36 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v37 = *(_DWORD *)(a1 + 144);
  uint64_t v16 = v21;
  unint64_t v13 = *(const void **)a2;
  unint64_t v12 = *(const void **)(a2 + 8);
  if (v12 == *(const void **)a2)
  {
    unsigned int v17 = v21;
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v14) {
      memmove(v21, v12, 8 * v14);
    }
  }
  else
  {
    unsigned int v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    LODWORD(v14) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v14;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v22 = *(_OWORD *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = v15;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v25 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v26 = *(_DWORD *)(a2 + 144);
  sub_1CC07DA10((uint64_t)&v27, (uint64_t)&v16, a3, a4);
  sub_1CC07C814((void **)&v22);
  if (v17 != v16) {
    free(v17);
  }
  sub_1CC07C814((void **)&v33);
  if (v28 != v27) {
    free(v28);
  }
}

uint64_t sub_1CC07DA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = v101;
  uint64_t v96 = v101;
  uint64_t v9 = *(const void **)(a1 + 8);
  if (v9 == *(const void **)a1)
  {
    uint64_t v97 = v101;
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v34 = *(unsigned int *)(a1 + 16);
    uint64_t v8 = malloc_type_malloc(8 * v34, 0x4065EBACuLL);
    if (!v8 && (v34 || (uint64_t v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v97 = v8;
    uint64_t v10 = *(const void **)a1;
    uint64_t v9 = *(const void **)(a1 + 8);
  }
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 20);
  unsigned int v98 = v12;
  if (v9 == v10) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    unsigned int v11 = *(_DWORD *)(a1 + 20);
  }
  int v14 = *(_DWORD *)(a1 + 24);
  unsigned int v99 = v11;
  int v100 = v14;
  sub_1CD4A223C((uint64_t)v102, (void *)(a1 + 96));
  int v103 = *(_DWORD *)(a1 + 144);
  int64_t v85 = v90;
  uint64_t v16 = *(const void **)a2;
  uint64_t v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    int v86 = v90;
    uint64_t v17 = *(unsigned int *)(a2 + 20);
    if (v17) {
      memmove(v90, v15, 8 * v17);
    }
  }
  else
  {
    int v86 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = v16;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  int v87 = *(_DWORD *)(a2 + 16);
  int v88 = v17;
  int v89 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v91 = *(_OWORD *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v92 = *(void *)(a2 + 112);
  uint64_t v93 = v18;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v94 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v95 = *(_DWORD *)(a2 + 144);
  sub_1CC07DFE4((uint64_t)&v96, (uint64_t)&v85, (uint64_t)&v104);
  sub_1CC07C814((void **)&v91);
  if (v86 != v85) {
    free(v86);
  }
  sub_1CC07C814(v102);
  if (v97 != v96) {
    free(v97);
  }
  v70.n128_u64[0] = (unint64_t)v74;
  if (__src == v104)
  {
    v70.n128_u64[1] = (unint64_t)v74;
    int v19 = HIDWORD(v106);
    if (HIDWORD(v106)) {
      memmove(v74, __src, 8 * HIDWORD(v106));
    }
  }
  else
  {
    v70.n128_u64[1] = (unint64_t)__src;
    unint64_t __src = v104;
    int v19 = HIDWORD(v106);
  }
  int v71 = v106;
  int v72 = v19;
  int v73 = v107;
  uint64_t v106 = 8;
  int v107 = 0;
  v75[0] = v108;
  v75[1] = v109;
  long long v108 = 0u;
  long long v109 = 0u;
  void v75[2] = v110;
  long long v110 = 0uLL;
  int v76 = v111;
  int v62 = v67;
  if (v113 == v112)
  {
    BOOL v63 = v67;
    int v20 = HIDWORD(v114);
    if (HIDWORD(v114)) {
      memmove(v67, v113, 8 * HIDWORD(v114));
    }
  }
  else
  {
    BOOL v63 = v113;
    unsigned int v113 = v112;
    int v20 = HIDWORD(v114);
  }
  int v64 = v114;
  int v65 = v20;
  int v66 = v115;
  uint64_t v114 = 8;
  int v115 = 0;
  v68[0] = v116;
  v68[1] = v117;
  long long v117 = 0u;
  long long v116 = 0u;
  v68[2] = v118;
  long long v118 = 0uLL;
  int v69 = v119;
  sub_1CC07E474(&v70, &v62, a3, &v77);
  sub_1CC07C814((void **)v68);
  if (v63 != v62) {
    free(v63);
  }
  sub_1CC07C814((void **)v75);
  if (v70.n128_u64[1] != v70.n128_u64[0]) {
    free((void *)v70.n128_u64[1]);
  }
  unint64_t v43 = v48;
  long long v22 = *(const void **)a1;
  uint64_t v21 = *(const void **)(a1 + 8);
  if (v21 == *(const void **)a1)
  {
    uint64_t v44 = v48;
    uint64_t v23 = *(unsigned int *)(a1 + 20);
    if (v23) {
      memmove(v48, v21, 8 * v23);
    }
  }
  else
  {
    uint64_t v44 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v22;
    LODWORD(v23) = *(_DWORD *)(a1 + 20);
  }
  int v45 = *(_DWORD *)(a1 + 16);
  int v46 = v23;
  int v47 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v49 = *(_OWORD *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 120);
  uint64_t v50 = *(void *)(a1 + 112);
  uint64_t v51 = v24;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v52 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v53 = *(_DWORD *)(a1 + 144);
  uint64_t v35 = v40;
  if (v77.n128_u64[1] == v77.n128_u64[0])
  {
    long long v36 = v40;
    int v25 = HIDWORD(v78);
    if (HIDWORD(v78)) {
      memmove(v40, (const void *)v77.n128_u64[1], 8 * HIDWORD(v78));
    }
  }
  else
  {
    long long v36 = (unsigned char *)v77.n128_u64[1];
    v77.n128_u64[1] = v77.n128_u64[0];
    int v25 = HIDWORD(v78);
  }
  int v37 = v78;
  int v38 = v25;
  int v39 = v79;
  uint64_t v78 = 8;
  int v79 = 0;
  v41[0] = v80;
  v41[1] = v81;
  long long v80 = 0u;
  long long v81 = 0u;
  v41[2] = v82;
  long long v82 = 0uLL;
  int v42 = v83;
  sub_1CC07E64C((uint64_t)&v43, (uint64_t)&v35, (uint64_t)&v54);
  uint64_t v26 = v84;
  unsigned int v27 = (void *)(a4 + 32);
  *(void *)a4 = a4 + 32;
  int v29 = v54;
  int v28 = v55;
  if (v55 == v54)
  {
    *(void *)(a4 + 8) = v27;
    int v30 = HIDWORD(v56);
    if (HIDWORD(v56)) {
      memmove(v27, v28, 8 * HIDWORD(v56));
    }
  }
  else
  {
    *(void *)(a4 + 8) = v55;
    uint64_t v55 = v29;
    int v30 = HIDWORD(v56);
  }
  int v31 = v57;
  *(_DWORD *)(a4 + 16) = v56;
  *(_DWORD *)(a4 + 20) = v30;
  *(_DWORD *)(a4 + 24) = v31;
  uint64_t v56 = 8;
  int v57 = 0;
  *(_OWORD *)(a4 + 96) = v58;
  uint64_t v32 = *((void *)&v59 + 1);
  *(void *)(a4 + 112) = v59;
  *(void *)(a4 + 120) = v32;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)(a4 + 128) = v60;
  long long v60 = 0uLL;
  *(_DWORD *)(a4 + 144) = v61;
  *(void *)(a4 + 152) = v26;
  sub_1CC07C814((void **)&v58);
  if (v55 != v54) {
    free(v55);
  }
  sub_1CC07C814((void **)v41);
  if (v36 != v35) {
    free(v36);
  }
  sub_1CC07C814((void **)&v49);
  if (v44 != v43) {
    free(v44);
  }
  sub_1CC07C814((void **)&v80);
  if (v77.n128_u64[1] != v77.n128_u64[0]) {
    free((void *)v77.n128_u64[1]);
  }
  return sub_1CD4A1090((uint64_t)&v104);
}

void sub_1CC07DFE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v48;
  unint64_t v43 = v48;
  uint64_t v8 = *(unsigned char **)a1;
  unsigned int v7 = *(unsigned char **)(a1 + 8);
  if (v7 == *(unsigned char **)a1)
  {
    uint64_t v44 = v48;
    uint64_t v9 = *(unsigned int *)(a1 + 20);
    if (v9) {
      memmove(v48, v7, 8 * v9);
    }
    unsigned int v7 = v48;
  }
  else
  {
    uint64_t v44 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    LODWORD(v9) = *(_DWORD *)(a1 + 20);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  int v45 = *(_DWORD *)(a1 + 16);
  int v46 = v9;
  int v47 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v49 = *(_OWORD *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 120);
  uint64_t v50 = *(void *)(a1 + 112);
  uint64_t v51 = v11;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v52 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v53 = *(_DWORD *)(a1 + 144);
  unsigned int v12 = v66;
  int v62 = v66;
  if (v7 == v48)
  {
    BOOL v63 = v66;
    unsigned int v13 = v48;
  }
  else
  {
    unsigned int v12 = malloc_type_malloc(8 * v10, 0x4065EBACuLL);
    if (!v12)
    {
      if (v10) {
        goto LABEL_55;
      }
      unsigned int v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v12) {
        goto LABEL_55;
      }
    }
    BOOL v63 = v12;
    unsigned int v13 = v43;
    uint64_t v6 = v44;
    LODWORD(v10) = v45;
    LODWORD(v9) = v46;
  }
  LODWORD(v64) = v10;
  if (v6 == v13) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v10;
  }
  if (v14)
  {
    memmove(v12, v6, 8 * v14);
    LODWORD(v9) = v46;
  }
  HIDWORD(v64) = v9;
  int v65 = v47;
  sub_1CD4A223C((uint64_t)&v67, &v49);
  int v15 = v53;
  int v70 = v53;
  int v54 = v59;
  if (v63 == v62)
  {
    uint64_t v55 = v59;
    int v16 = HIDWORD(v64);
    if (HIDWORD(v64)) {
      memmove(v59, v63, 8 * HIDWORD(v64));
    }
  }
  else
  {
    uint64_t v55 = v63;
    BOOL v63 = v62;
    int v16 = HIDWORD(v64);
  }
  int v56 = v64;
  int v57 = v16;
  int v58 = v65;
  uint64_t v64 = 8;
  int v65 = 0;
  v60[0] = v67;
  v60[1] = v68;
  long long v67 = 0u;
  long long v68 = 0u;
  v60[2] = v69;
  long long v69 = 0uLL;
  int v61 = v15;
  sub_1CC07C814((void **)&v67);
  if (v63 != v62) {
    free(v63);
  }
  uint64_t v17 = v29;
  uint64_t v18 = *(unsigned char **)(a2 + 8);
  if (v18 == *(unsigned char **)a2)
  {
    uint64_t v26 = v29;
    uint64_t v19 = *(unsigned int *)(a2 + 20);
    if (v19) {
      memmove(v29, v18, 8 * v19);
    }
    uint64_t v18 = v29;
  }
  else
  {
    uint64_t v26 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)a2;
    LODWORD(v19) = *(_DWORD *)(a2 + 20);
  }
  uint64_t v20 = *(unsigned int *)(a2 + 16);
  int v27 = *(_DWORD *)(a2 + 16);
  int v28 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v30 = *(_OWORD *)(a2 + 96);
  uint64_t v21 = *(void *)(a2 + 120);
  uint64_t v31 = *(void *)(a2 + 112);
  uint64_t v32 = v21;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v33 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v34 = *(_DWORD *)(a2 + 144);
  long long v22 = v66;
  int v62 = v66;
  if (v18 == v29)
  {
    BOOL v63 = v66;
    goto LABEL_23;
  }
  long long v22 = malloc_type_malloc(8 * v20, 0x4065EBACuLL);
  if (!v22 && (v20 || (long long v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_55:
  }
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  BOOL v63 = v22;
  uint64_t v17 = v26;
  LODWORD(v20) = v27;
LABEL_23:
  LODWORD(v64) = v20;
  if (v17 == v29) {
    unsigned int v23 = v19;
  }
  else {
    unsigned int v23 = v20;
  }
  if (v23) {
    memmove(v22, v17, 8 * v23);
  }
  HIDWORD(v64) = v19;
  int v65 = v28;
  sub_1CD4A223C((uint64_t)&v67, &v30);
  int v24 = v34;
  int v70 = v34;
  uint64_t v35 = v40;
  if (v63 == v62)
  {
    long long v36 = v40;
    int v25 = HIDWORD(v64);
    if (HIDWORD(v64)) {
      memmove(v40, v63, 8 * HIDWORD(v64));
    }
  }
  else
  {
    long long v36 = v63;
    BOOL v63 = v62;
    int v25 = HIDWORD(v64);
  }
  int v37 = v64;
  int v38 = v25;
  int v39 = v65;
  uint64_t v64 = 8;
  int v65 = 0;
  v41[0] = v67;
  v41[1] = v68;
  long long v67 = 0u;
  long long v68 = 0u;
  v41[2] = v69;
  long long v69 = 0uLL;
  int v42 = v24;
  sub_1CC07C814((void **)&v67);
  if (v63 != v62) {
    free(v63);
  }
  sub_1CC07E7EC(a3, (uint64_t *)&v54, (uint64_t *)&v35);
  sub_1CC07C814((void **)v41);
  if (v36 != v35) {
    free(v36);
  }
  sub_1CC07C814((void **)&v30);
  if (v26 != v29) {
    free(v26);
  }
  sub_1CC07C814((void **)v60);
  if (v55 != v54) {
    free(v55);
  }
  sub_1CC07C814((void **)&v49);
  if (v44 != v43) {
    free(v44);
  }
}

__n128 sub_1CC07E474@<Q0>(__n128 *this@<X1>, void *a2@<X2>, void *a3@<X3>, __n128 *a4@<X8>)
{
  uint64_t v8 = this + 8;
  while (1)
  {
    unint64_t v9 = this[8].n128_u64[1];
    if (v9 == a2[17]) {
      break;
    }
LABEL_15:
    *a3++ = *(void *)(*(void *)(this[6].n128_u64[1] + ((this[8].n128_u64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (this[8].n128_u64[0] & 0x7F));
    sub_1CD4A2600((llvm::SmallPtrSetImplBase *)this);
  }
  unint64_t v10 = this[8].n128_u64[0];
  unint64_t v11 = this[6].n128_u64[1];
  unsigned int v12 = (void *)(v11 + 8 * (v10 >> 7));
  if (this[7].n128_u64[0] == v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v13 = *v12 + 32 * (this[8].n128_u64[0] & 0x7F);
    uint64_t v14 = *(void *)(v11 + (((v10 + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v10 + v9) & 0x7F);
  }
  uint64_t v15 = a2[13];
  int v16 = (void *)(v15 + 8 * (a2[16] >> 7));
  if (a2[14] == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *v16 + 32 * (a2[16] & 0x7FLL);
  }
  while (v13 != v14)
  {
    if (!sub_1CD4A2594(v13, v17)) {
      goto LABEL_15;
    }
    v13 += 32;
    if (v13 - *v12 == 4096)
    {
      uint64_t v18 = v12[1];
      ++v12;
      uint64_t v13 = v18;
    }
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      uint64_t v19 = v16[1];
      ++v16;
      uint64_t v17 = v19;
    }
  }
  uint64_t v20 = a4 + 2;
  a4->n128_u64[0] = (unint64_t)a4[2].n128_u64;
  unint64_t v22 = this->n128_u64[0];
  uint64_t v21 = (const void *)this->n128_u64[1];
  if (v21 == (const void *)this->n128_u64[0])
  {
    a4->n128_u64[1] = (unint64_t)v20;
    uint64_t v23 = this[1].n128_u32[1];
    if (v23) {
      memmove(v20, v21, 8 * v23);
    }
  }
  else
  {
    a4->n128_u64[1] = (unint64_t)v21;
    this->n128_u64[1] = v22;
    LODWORD(v23) = this[1].n128_u32[1];
  }
  a4[1].n128_u32[0] = this[1].n128_u32[0];
  a4[1].n128_u32[1] = v23;
  a4[1].n128_u32[2] = this[1].n128_u32[2];
  this[1].n128_u64[0] = 8;
  this[1].n128_u32[2] = 0;
  a4[6] = this[6];
  unint64_t v24 = this[7].n128_u64[1];
  a4[7].n128_u64[0] = this[7].n128_u64[0];
  a4[7].n128_u64[1] = v24;
  this[6] = 0u;
  this[7] = 0u;
  __n128 result = this[8];
  a4[8] = result;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  a4[9].n128_u32[0] = this[9].n128_u32[0];
  a4[9].n128_u64[1] = (unint64_t)a3;
  return result;
}

void sub_1CC07E64C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v25 = v30;
  unsigned int v7 = *(const void **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v26 = v30;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v30, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v26 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v27 = *(_DWORD *)(a1 + 16);
  int v28 = v8;
  int v29 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v31 = *(_OWORD *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v32 = *(void *)(a1 + 112);
  uint64_t v33 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v34 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v35 = *(_DWORD *)(a1 + 144);
  uint64_t v14 = v19;
  unint64_t v11 = *(const void **)a2;
  unint64_t v10 = *(const void **)(a2 + 8);
  if (v10 == *(const void **)a2)
  {
    uint64_t v15 = v19;
    uint64_t v12 = *(unsigned int *)(a2 + 20);
    if (v12) {
      memmove(v19, v10, 8 * v12);
    }
  }
  else
  {
    uint64_t v15 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v11;
    LODWORD(v12) = *(_DWORD *)(a2 + 20);
  }
  int v16 = *(_DWORD *)(a2 + 16);
  int v17 = v12;
  int v18 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v20 = *(_OWORD *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 120);
  uint64_t v21 = *(void *)(a2 + 112);
  uint64_t v22 = v13;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v23 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v24 = *(_DWORD *)(a2 + 144);
  sub_1CC07E958((uint64_t)&v25, (uint64_t)&v14, a3);
  sub_1CC07C814((void **)&v20);
  if (v15 != v14) {
    free(v15);
  }
  sub_1CC07C814((void **)&v31);
  if (v26 != v25) {
    free(v26);
  }
}

uint64_t sub_1CC07E7EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)(a1 + 32);
  *(void *)a1 = v6;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 == *a2)
  {
    *(void *)(a1 + 8) = v6;
    uint64_t v9 = *((unsigned int *)a2 + 5);
    if (v9) {
      memmove(v6, (const void *)a2[1], 8 * v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = v7;
    a2[1] = v8;
  }
  *(void *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 8;
  *((_DWORD *)a2 + 6) = 0;
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = a2[15];
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = a2[17];
  a2[16] = 0;
  a2[17] = 0;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
  unint64_t v10 = (void *)(a1 + 184);
  *(void *)(a1 + 152) = a1 + 184;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (v11 == *a3)
  {
    *(void *)(a1 + 160) = v10;
    uint64_t v13 = *((unsigned int *)a3 + 5);
    if (v13) {
      memmove(v10, (const void *)a3[1], 8 * v13);
    }
  }
  else
  {
    *(void *)(a1 + 160) = v11;
    a3[1] = v12;
  }
  *(void *)(a1 + 168) = a3[2];
  *(_DWORD *)(a1 + 176) = *((_DWORD *)a3 + 6);
  a3[2] = 8;
  *((_DWORD *)a3 + 6) = 0;
  *(void *)(a1 + 248) = a3[12];
  *(void *)(a1 + 256) = a3[13];
  *(void *)(a1 + 264) = a3[14];
  *(void *)(a1 + 272) = a3[15];
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *(void *)(a1 + 280) = a3[16];
  *(void *)(a1 + 288) = a3[17];
  a3[16] = 0;
  a3[17] = 0;
  *(_DWORD *)(a1 + 296) = *((_DWORD *)a3 + 36);
  return a1;
}

void sub_1CC07E958(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = v37;
  uint64_t v7 = *(const void **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v33 = v37;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v37, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v33 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v34 = *(_DWORD *)(a1 + 16);
  int v35 = v8;
  int v36 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v38 = *(_OWORD *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v39 = *(void *)(a1 + 112);
  uint64_t v40 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v41 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v42 = *(_DWORD *)(a1 + 144);
  unint64_t v10 = *(unsigned char **)(a2 + 8);
  if (v10 == *(unsigned char **)a2)
  {
    int v25 = v26;
    uint64_t v11 = *(unsigned int *)(a2 + 20);
    if (v11) {
      memmove(v26, v10, 8 * v11);
    }
    unint64_t v10 = v26;
  }
  else
  {
    int v25 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)a2;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
  }
  int v12 = *(_DWORD *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v15 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)&long long v27 = v15;
  *((void *)&v27 + 1) = v14;
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  *(void *)&long long v28 = v16;
  *((void *)&v28 + 1) = v17;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v20 = *(_DWORD *)(a2 + 144);
  int v31 = v20;
  uint64_t v21 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  if (v10 == v26)
  {
    *(void *)(a3 + 8) = v21;
    if (v11)
    {
      int v24 = v13;
      uint64_t v22 = v14;
      uint64_t v23 = v16;
      memcpy(v21, v26, 8 * v11);
      uint64_t v16 = v23;
      uint64_t v14 = v22;
      int v13 = v24;
    }
  }
  else
  {
    *(void *)(a3 + 8) = v10;
    int v25 = v26;
  }
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = v13;
  *(void *)(a3 + 96) = v15;
  *(void *)(a3 + 104) = v14;
  *(void *)(a3 + 112) = v16;
  *(void *)(a3 + 120) = v17;
  long long v27 = 0u;
  long long v28 = 0u;
  *(void *)(a3 + 128) = v18;
  *(void *)(a3 + 136) = v19;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(_DWORD *)(a3 + 144) = v20;
  sub_1CC07C814((void **)&v27);
  if (v25 != v26) {
    free(v25);
  }
  sub_1CC07C814((void **)&v38);
  if (v33 != v32) {
    free(v33);
  }
}

void *sub_1CC07EB80(uint64_t a1, uint64_t a2, void *a3)
{
  v27.n128_u64[0] = (unint64_t)v31;
  uint64_t v7 = *(const void **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v27.n128_u64[1] = (unint64_t)v31;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v31, v6, 8 * v8);
    }
  }
  else
  {
    v27.n128_u64[1] = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  int v28 = *(_DWORD *)(a1 + 16);
  int v29 = v8;
  int v30 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  long long v32 = *(_OWORD *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v33 = *(void *)(a1 + 112);
  uint64_t v34 = v9;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  long long v35 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v36 = *(_DWORD *)(a1 + 144);
  uint64_t v16 = v21;
  uint64_t v11 = *(const void **)a2;
  unint64_t v10 = *(const void **)(a2 + 8);
  if (v10 == *(const void **)a2)
  {
    uint64_t v17 = v21;
    uint64_t v12 = *(unsigned int *)(a2 + 20);
    if (v12) {
      memmove(v21, v10, 8 * v12);
    }
  }
  else
  {
    uint64_t v17 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v11;
    LODWORD(v12) = *(_DWORD *)(a2 + 20);
  }
  int v18 = *(_DWORD *)(a2 + 16);
  int v19 = v12;
  int v20 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  long long v22 = *(_OWORD *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = v13;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  long long v25 = *(_OWORD *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  int v26 = *(_DWORD *)(a2 + 144);
  sub_1CC07ED48(&v27, &v16, a3, &v37);
  sub_1CC07C814((void **)&v22);
  if (v17 != v16) {
    free(v17);
  }
  sub_1CC07C814((void **)&v32);
  if (v27.n128_u64[1] != v27.n128_u64[0]) {
    free((void *)v27.n128_u64[1]);
  }
  uint64_t v14 = v38[7];
  sub_1CC07C814(v38);
  if (v37.n128_u64[1] != v37.n128_u64[0]) {
    free((void *)v37.n128_u64[1]);
  }
  return v14;
}

__n128 sub_1CC07ED48@<Q0>(__n128 *this@<X0>, void *a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v8 = this + 8;
  while (1)
  {
    unint64_t v9 = this[8].n128_u64[1];
    if (v9 == a2[17]) {
      break;
    }
LABEL_15:
    *a3++ = *(void *)(*(void *)(this[6].n128_u64[1] + ((this[8].n128_u64[0] >> 4) & 0xFFFFFFFFFFFFFF8))
                      + 32 * (this[8].n128_u64[0] & 0x7F));
    sub_1CD4A2600((llvm::SmallPtrSetImplBase *)this);
  }
  unint64_t v10 = this[8].n128_u64[0];
  unint64_t v11 = this[6].n128_u64[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 7));
  if (this[7].n128_u64[0] == v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v13 = *v12 + 32 * (this[8].n128_u64[0] & 0x7F);
    uint64_t v14 = *(void *)(v11 + (((v10 + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v10 + v9) & 0x7F);
  }
  uint64_t v15 = a2[13];
  uint64_t v16 = (void *)(v15 + 8 * (a2[16] >> 7));
  if (a2[14] == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *v16 + 32 * (a2[16] & 0x7FLL);
  }
  while (v13 != v14)
  {
    if (!sub_1CD4A2594(v13, v17)) {
      goto LABEL_15;
    }
    v13 += 32;
    if (v13 - *v12 == 4096)
    {
      uint64_t v18 = v12[1];
      ++v12;
      uint64_t v13 = v18;
    }
    v17 += 32;
    if (v17 - *v16 == 4096)
    {
      uint64_t v19 = v16[1];
      ++v16;
      uint64_t v17 = v19;
    }
  }
  int v20 = a4 + 2;
  a4->n128_u64[0] = (unint64_t)a4[2].n128_u64;
  unint64_t v22 = this->n128_u64[0];
  uint64_t v21 = (const void *)this->n128_u64[1];
  if (v21 == (const void *)this->n128_u64[0])
  {
    a4->n128_u64[1] = (unint64_t)v20;
    uint64_t v23 = this[1].n128_u32[1];
    if (v23) {
      memmove(v20, v21, 8 * v23);
    }
  }
  else
  {
    a4->n128_u64[1] = (unint64_t)v21;
    this->n128_u64[1] = v22;
    LODWORD(v23) = this[1].n128_u32[1];
  }
  a4[1].n128_u32[0] = this[1].n128_u32[0];
  a4[1].n128_u32[1] = v23;
  a4[1].n128_u32[2] = this[1].n128_u32[2];
  this[1].n128_u64[0] = 8;
  this[1].n128_u32[2] = 0;
  a4[6] = this[6];
  unint64_t v24 = this[7].n128_u64[1];
  a4[7].n128_u64[0] = this[7].n128_u64[0];
  a4[7].n128_u64[1] = v24;
  this[6] = 0u;
  this[7] = 0u;
  __n128 result = this[8];
  a4[8] = result;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  a4[9].n128_u32[0] = this[9].n128_u32[0];
  a4[9].n128_u64[1] = (unint64_t)a3;
  return result;
}

void *sub_1CC07EF20(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)result[8];
    if (v2 != v1 + 10) {
      free(v2);
    }
    uint64_t v3 = (void *)v1[3];
    if (v3 != v1 + 5) {
      free(v3);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CC07EF94()
{
  int64_t v4 = &v3;
  int v2 = 1;
  int v3 = 100;
  *(void *)&long long v1 = "Use this to specify the default trip count of a loop";
  *((void *)&v1 + 1) = 52;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCC65D0, "default-trip-count", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC65D0, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 2;
  int64_t v4 = &v3;
  *(void *)&long long v1 = "Use this to specify the max. distance between array elements accessed in a loop so that the elements "
                   "are classified to have temporal reuse";
  *((void *)&v1 + 1) = 138;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCC6690, "temporal-reuse-threshold", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC6690, &dword_1CB82C000);
}

uint64_t llvm::LoopNest::getMaxPerfectDepth(llvm::LoopNest *this, const llvm::Loop *a2, llvm::ScalarEvolution *a3, llvm::ScalarEvolution *a4)
{
  int64_t v4 = (const llvm::Loop **)*((void *)this + 1);
  if (*((void *)this + 2) - (void)v4 != 8) {
    return 1;
  }
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = *v4;
    if (llvm::LoopNest::analyzeLoopNestForPerfectNest(this, *v4, a2, a4)) {
      break;
    }
    uint64_t v6 = (v6 + 1);
    int64_t v4 = (const llvm::Loop **)*((void *)v7 + 1);
    this = v7;
  }
  while (*((void *)v7 + 2) - (void)v4 == 8);
  return v6;
}

BOOL llvm::LoopNest::arePerfectlyNested(llvm::LoopNest *this, const llvm::Loop *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4)
{
  return llvm::LoopNest::analyzeLoopNestForPerfectNest(this, a2, a3, a4) == 0;
}

uint64_t llvm::LoopNest::analyzeLoopNestForPerfectNest(llvm::LoopNest *this, const llvm::Loop *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4)
{
  if (*((void *)this + 2) - *((void *)this + 1) == 8 && *(void *)a2 == (void)this) {
    llvm::Loop::isLoopSimplifyForm(this);
  }
  return 2;
}

void sub_1CC07F90C()
{
}

uint64_t llvm::LoopNest::getInterveningInstructions@<X0>(llvm::LoopNest *this@<X0>, const llvm::Loop *a2@<X1>, const llvm::Loop *a3@<X2>, llvm::ScalarEvolution *a4@<X3>, void *a5@<X8>)
{
  *a5 = a5 + 2;
  a5[1] = 0x600000000;
  uint64_t result = llvm::LoopNest::analyzeLoopNestForPerfectNest(this, a2, a3, a4);
  if (result > 3 || result == 1) {
    llvm::Loop::getBounds(this, a3);
  }
  return result;
}

void llvm::LoopNest::getPerfectLoops(llvm::LoopNest *this@<X0>, llvm::ScalarEvolution *a2@<X1>, uint64_t a3@<X8>)
{
  v62[8] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  long long v60 = (llvm::LoopNest **)v62;
  uint64_t v61 = 0x800000000;
  long long v38 = (unsigned char *)**((void **)this + 1);
  sub_1CC076464((uint64_t *)&v38, (uint64_t)&v47);
  uint64_t v5 = v43;
  long long v38 = v43;
  uint64_t v6 = v48;
  if (v48 == v47)
  {
    uint64_t v39 = v43;
    uint64_t v7 = v48;
  }
  else
  {
    unsigned int v31 = v49;
    uint64_t v5 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v5)
    {
      if (v31) {
        goto LABEL_77;
      }
      uint64_t v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v5) {
        goto LABEL_77;
      }
    }
    uint64_t v39 = v5;
    uint64_t v7 = v47;
    uint64_t v6 = v48;
  }
  unsigned int v8 = v50;
  unsigned int v40 = v49;
  if (v6 == v7) {
    unsigned int v9 = v50;
  }
  else {
    unsigned int v9 = v49;
  }
  if (v9)
  {
    memmove(v5, v6, 8 * v9);
    unsigned int v8 = v50;
  }
  unsigned int v41 = v8;
  int v42 = v51;
  int v45 = 0;
  uint64_t v46 = 0;
  __p = 0;
  sub_1CBF340A8(&__p, v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - (unsigned char *)v52) >> 3));
  unint64_t v10 = v34;
  unint64_t v11 = v55;
  if (v55 != v54)
  {
    unsigned int v32 = v56;
    unint64_t v10 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
    if (v10 || !v32 && (unint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      uint64_t v33 = v10;
      uint64_t v12 = v54;
      unint64_t v11 = v55;
      goto LABEL_10;
    }
LABEL_77:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v33 = v34;
  uint64_t v12 = v55;
LABEL_10:
  if (v11 == v12) {
    unsigned int v13 = v57;
  }
  else {
    unsigned int v13 = v56;
  }
  if (v13) {
    memmove(v10, v11, 8 * v13);
  }
  int v36 = 0;
  uint64_t v37 = 0;
  long long v35 = 0;
  sub_1CBF340A8(&v35, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - (unsigned char *)v58) >> 3));
  while (1)
  {
    if (v45 - (unsigned char *)__p != v36 - v35) {
      goto LABEL_30;
    }
    if (__p == v45) {
      break;
    }
    uint64_t v15 = v35 + 8;
    uint64_t v16 = (char *)__p + 8;
    while (1)
    {
      uint64_t v17 = v16 - 8;
      if (*((void *)v16 - 1) != *((void *)v15 - 1)) {
        break;
      }
      int v18 = v15[8];
      if (v16[8]) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        if ((v16[8] == 0) == (v18 != 0)) {
          break;
        }
      }
      else if (*(void *)v16 != *(void *)v15)
      {
        break;
      }
      v15 += 24;
      v16 += 24;
      if (v17 + 24 == v45) {
        goto LABEL_49;
      }
    }
LABEL_30:
    int v20 = (llvm::LoopNest *)*((void *)v45 - 3);
    if (!v61)
    {
      if (!HIDWORD(v61)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t *v60 = v20;
      LODWORD(v61) = v61 + 1;
    }
    uint64_t v21 = (const llvm::Loop **)*((void *)v20 + 1);
    if (*((void *)v20 + 2) - (void)v21 != 8
      || llvm::LoopNest::analyzeLoopNestForPerfectNest(v20, *v21, a2, v14))
    {
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      unint64_t v23 = *(void *)a3;
      if (v22 < *(_DWORD *)(a3 + 12)) {
        goto LABEL_36;
      }
      unint64_t v28 = v22 + 1;
      BOOL v29 = v23 + 80 * v22 > (unint64_t)&v60;
      if (v23 <= (unint64_t)&v60 && v29)
      {
        int v30 = (char *)&v60 - v23;
        sub_1CC0803B0(a3, v28);
        unint64_t v23 = *(void *)a3;
        unint64_t v24 = (void **)&v30[*(void *)a3];
      }
      else
      {
        sub_1CC0803B0(a3, v28);
        unint64_t v23 = *(void *)a3;
LABEL_36:
        unint64_t v24 = (void **)&v60;
      }
      long long v25 = (void *)(v23 + 80 * *(unsigned int *)(a3 + 8));
      void *v25 = v25 + 2;
      v25[1] = 0x800000000;
      if (*((_DWORD *)v24 + 2)) {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v25, (uint64_t)v24);
      }
      int v26 = 0;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_40;
    }
    __n128 v27 = (llvm::LoopNest *)**((void **)v20 + 1);
    if (v61 >= (unint64_t)HIDWORD(v61)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v60[v61] = v27;
    int v26 = v61 + 1;
LABEL_40:
    LODWORD(v61) = v26;
    sub_1CC078F58((llvm::SmallPtrSetImplBase *)&v38);
  }
LABEL_49:
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
  if (v33 != v34) {
    free(v33);
  }
  if (__p)
  {
    int v45 = (char *)__p;
    operator delete(__p);
  }
  if (v39 != v38) {
    free(v39);
  }
  if (v58)
  {
    long long v59 = v58;
    operator delete(v58);
  }
  if (v55 != v54) {
    free(v55);
  }
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  if (v48 != v47) {
    free(v48);
  }
  if (v60 != v62) {
    free(v60);
  }
}

BOOL sub_1CC080324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0);
  int v9 = *(unsigned __int8 *)(a1 + 16);
  if ((isSafeToSpeculativelyExecute & 1) == 0 && v9 != 83 && v9 != 30) {
    return 0;
  }
  if ((v9 - 41) <= 0x11 && *(void *)(a4 + 16) != a1) {
    return 0;
  }
  unsigned int v12 = v9 - 83;
  return a1 == a3 || v12 < 0xFFFFFFFE || a1 == a2;
}

void sub_1CC0803B0(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(80 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 80 * v9;
    unint64_t v11 = v6;
    do
    {
      *unint64_t v11 = v11 + 2;
      v11[1] = 0x800000000;
      if (v8[2]) {
        sub_1CD41C56C((uint64_t)v11, (uint64_t)v8);
      }
      v8 += 20;
      v11 += 10;
      v10 -= 80;
    }
    while (v10);
    unsigned int v8 = *(_DWORD **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 20 * v12;
      do
      {
        uint64_t v14 = *(_DWORD **)&v8[v13 - 20];
        if (&v8[v13 - 16] != v14) {
          free(v14);
        }
        v13 -= 20;
      }
      while (v13 * 4);
      unsigned int v8 = *(_DWORD **)a1;
    }
  }
  if (v8 != (_DWORD *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(llvm::UnrolledInstAnalyzer *this, llvm::Instruction *a2)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFD) != 0xD) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = *(void *)(v4 + 104);
  unsigned int v6 = *(_DWORD *)(v4 + 120);
  if (!v6) {
    goto LABEL_8;
  }
  unsigned int v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v5 + 48 * v7;
  uint64_t v9 = *(llvm::Instruction **)(v8 + 24);
  if (v9 != a2)
  {
    int v10 = 1;
    while (v9 != (llvm::Instruction *)-4096)
    {
      unsigned int v11 = v7 + v10++;
      unsigned int v7 = v11 & (v6 - 1);
      uint64_t v8 = v5 + 48 * v7;
      uint64_t v9 = *(llvm::Instruction **)(v8 + 24);
      if (v9 == a2) {
        goto LABEL_9;
      }
    }
LABEL_8:
    uint64_t v8 = v5 + 48 * v6;
  }
LABEL_9:
  if (v8 == v5 + 48 * v6 || (uint64_t SCEVIter = *(void *)(v8 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v4, (unint64_t)a2);
  }
  int v13 = *(unsigned __int16 *)(SCEVIter + 24);
  if (SCEVIter) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14)
  {
    uint64_t v17 = *(void *)(SCEVIter + 32);
LABEL_27:
    int v18 = (uint64_t *)*((void *)this + 4);
    unsigned int v31 = a2;
    sub_1CC080DE0(v18, &v31)[1] = v17;
    return 1;
  }
  if (!llvm::SCEV::isZero(*((llvm::SCEV **)this + 3)))
  {
    uint64_t result = llvm::ScalarEvolution::getLoopDisposition(*((llvm::ScalarEvolution **)this + 5), (const llvm::SCEV *)SCEVIter, *((const llvm::Loop **)this + 6));
    if (result == 1) {
      return result;
    }
    int v13 = *(unsigned __int16 *)(SCEVIter + 24);
  }
  if (SCEVIter) {
    BOOL v16 = v13 == 7;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16 || *(void *)(SCEVIter + 48) != *((void *)this + 6)) {
    return 0;
  }
  uint64_t v19 = llvm::SCEVAddRecExpr::evaluateAtIteration(*(uint64_t **)(SCEVIter + 32), *(void *)(SCEVIter + 40), *((const llvm::SCEV **)this + 3), *((llvm::ScalarEvolution **)this + 5));
  int v20 = (llvm::SCEV *)v19;
  if (v19) {
    BOOL v21 = *(unsigned __int16 *)(v19 + 24) == 0;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21)
  {
    uint64_t v17 = *(void *)(v19 + 32);
    goto LABEL_27;
  }
  PointerBase = llvm::ScalarEvolution::getPointerBase(*((llvm::ScalarEvolution **)this + 5), (const llvm::SCEV *)SCEVIter);
  uint64_t result = 0;
  if (PointerBase && *((_WORD *)PointerBase + 12) == 14)
  {
    Minusuint64_t SCEV = llvm::ScalarEvolution::getMinusSCEV(*((llvm::ScalarEvolution **)this + 5), v20, PointerBase, 0, 0);
    uint64_t result = 0;
    if (MinusSCEV && *(_WORD *)(MinusSCEV + 24) == 0)
    {
      uint64_t v25 = *((void *)PointerBase - 1);
      uint64_t v26 = *(void *)(MinusSCEV + 32);
      unsigned int v31 = 0;
      char v27 = sub_1CBFD5918(*(void *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v31);
      unint64_t v28 = v31;
      if (v27)
      {
LABEL_46:
        uint64_t result = 0;
        *((void *)v28 + 1) = v25;
        *((void *)v28 + 2) = v26;
        return result;
      }
      int v29 = *((_DWORD *)this + 2);
      unsigned int v30 = *((_DWORD *)this + 4);
      if (4 * v29 + 4 >= 3 * v30)
      {
        v30 *= 2;
      }
      else if (v30 + ~v29 - *((_DWORD *)this + 3) > v30 >> 3)
      {
LABEL_43:
        ++*((_DWORD *)this + 2);
        if (*(void *)v28 != -4096) {
          --*((_DWORD *)this + 3);
        }
        *((void *)v28 + 1) = 0;
        *((void *)v28 + 2) = 0;
        *(void *)unint64_t v28 = a2;
        goto LABEL_46;
      }
      sub_1CC081070((uint64_t)this, v30);
      unsigned int v31 = 0;
      sub_1CBFD5918(*(void *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v31);
      unint64_t v28 = v31;
      goto LABEL_43;
    }
  }
  return result;
}

uint64_t llvm::UnrolledInstAnalyzer::visitBinaryOperator(llvm::UnrolledInstAnalyzer *this, llvm::BinaryOperator *a2)
{
  uint64_t v4 = (unsigned __int8 *)*((void *)a2 - 8);
  uint64_t v5 = (unsigned __int8 *)*((void *)a2 - 4);
  if (v4[16] >= 0x15u)
  {
    uint64_t v6 = *((void *)this + 4);
    BOOL v21 = (llvm::Constant *)*((void *)a2 - 8);
    uint64_t v25 = 0;
    int v7 = sub_1CBA0E618(v6, &v21, &v25);
    uint64_t v8 = 0;
    if (v7) {
      uint64_t v8 = *(unsigned __int8 **)(v25 + 8);
    }
    if (v8) {
      uint64_t v4 = v8;
    }
  }
  if (v5[16] >= 0x15u)
  {
    uint64_t v9 = *((void *)this + 4);
    BOOL v21 = (llvm::Constant *)v5;
    uint64_t v25 = 0;
    int v10 = sub_1CBA0E618(v9, &v21, &v25);
    unsigned int v11 = 0;
    if (v10) {
      unsigned int v11 = *(unsigned __int8 **)(v25 + 8);
    }
    if (v11) {
      uint64_t v5 = v11;
    }
  }
  uint64_t v12 = (llvm::Constant *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  BOOL v13 = sub_1CB845E74((uint64_t)a2);
  int v14 = *((unsigned __int8 *)a2 + 16) - 28;
  if (v13)
  {
    unint64_t v15 = (unint64_t)*((unsigned __int8 *)a2 + 17) >> 1;
    BOOL v21 = v12;
    long long v22 = 0u;
    long long v23 = 0u;
    __int16 v24 = 257;
    if (v15 == 127) {
      int v16 = -1;
    }
    else {
      int v16 = v15;
    }
    uint64_t v17 = llvm::SimplifyBinOp(v14, (llvm *)v4, (llvm *)v5, v16, &v21);
  }
  else
  {
    BOOL v21 = v12;
    long long v22 = 0u;
    long long v23 = 0u;
    __int16 v24 = 257;
    uint64_t v17 = sub_1CC03A350(v14, (llvm *)v4, (llvm::Constant *)v5, (const llvm::DataLayout *)&v21, (llvm::DSOLocalEquivalent **)3);
  }
  int v18 = v17;
  if (!v17) {
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  }
  int v20 = (uint64_t *)*((void *)this + 4);
  BOOL v21 = a2;
  sub_1CC080DE0(v20, &v21)[1] = v18;
  return 1;
}

uint64_t llvm::UnrolledInstAnalyzer::visitLoad(llvm::UnrolledInstAnalyzer *this, llvm::LoadInst *a2)
{
  uint64_t v4 = *((void *)a2 - 4);
  char v27 = 0;
  if (sub_1CC0811FC(*(void *)this, *((_DWORD *)this + 4), v4, &v27)) {
    BOOL v5 = v27 == (llvm::LoadInst *)(*(void *)this + 24 * *((unsigned int *)this + 4));
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = *((void *)v27 + 1);
  if (!v6 || *(unsigned char *)(v6 + 16) != 3) {
    return 0;
  }
  if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0) {
    return 0;
  }
  uint64_t v8 = *((void *)v27 + 2);
  if ((llvm::GlobalValue::isInterposable(*((llvm::GlobalValue **)v27 + 1)) & 1) != 0 || (*(unsigned char *)(v6 + 80) & 3) != 1) {
    return 0;
  }
  uint64_t v9 = *(llvm::ConstantFP ****)(v6 - 32);
  if (!v9 || ((_BYTE)v9[2] & 0xFE) != 14) {
    return 0;
  }
  unsigned int v11 = (*v9)[3];
  if (v11 != *(llvm::Type **)a2) {
    return 0;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v11);
  if (v15 == 1)
  {
    unint64_t v26 = PrimitiveSizeInBits;
    unint64_t PrimitiveSizeInBits = v26;
  }
  uint64_t v16 = *(unsigned int *)(v8 + 32);
  if (v16 < 0x41)
  {
    unint64_t v17 = (uint64_t)(*(void *)(v8 + 24) << -(char)v16) >> -(char)v16;
LABEL_32:
    if ((v17 & 0x8000000000000000) == 0)
    {
      unint64_t v23 = v17 / (PrimitiveSizeInBits >> 3);
      if (v23 < *((unsigned int *)*v9 + 8))
      {
        ElementAsunint64_t Constant = llvm::ConstantDataSequential::getElementAsConstant(v9, v23);
        uint64_t v25 = (uint64_t *)*((void *)this + 4);
        char v27 = a2;
        sub_1CC080DE0(v25, &v27)[1] = ElementAsConstant;
        return 1;
      }
    }
    return 0;
  }
  int v18 = 0;
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    if (v19-- < 1) {
      break;
    }
    unint64_t v21 = *(void *)(*(void *)(v8 + 24) + 8 * v19);
    v18 += __clz(v21);
  }
  while (!v21);
  uint64_t v12 = 0;
  int v22 = v16 | 0xFFFFFFC0;
  if ((v16 & 0x3F) == 0) {
    int v22 = 0;
  }
  if ((v16 - v18 - v22) <= 0x40)
  {
    unint64_t v17 = **(void **)(v8 + 24);
    goto LABEL_32;
  }
  return v12;
}

uint64_t llvm::UnrolledInstAnalyzer::visitCastInst(llvm::UnrolledInstAnalyzer *this, llvm::CastInst *a2)
{
  uint64_t v4 = (llvm::Type *)*((void *)a2 - 4);
  uint64_t v5 = *((void *)this + 4);
  unint64_t v15 = v4;
  uint64_t v19 = 0;
  int v6 = sub_1CBA0E618(v5, &v15, &v19);
  int v7 = 0;
  if (v6) {
    int v7 = *(llvm::Type **)(v19 + 8);
  }
  if (v7) {
    uint64_t v4 = v7;
  }
  if (!llvm::CastInst::castIsValid(*((unsigned __int8 *)a2 + 16) - 28, *(llvm::Type **)v4, *(void *)a2)) {
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  }
  uint64_t v9 = (llvm *)(*((unsigned __int8 *)a2 + 16) - 28);
  int v10 = *(llvm::Constant **)a2;
  unint64_t v15 = (llvm::Type *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  long long v16 = 0u;
  long long v17 = 0u;
  __int16 v18 = 257;
  unsigned int v11 = sub_1CC038B58(v9, (uint64_t)v4, v10, &v15, v8);
  if (!v11) {
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  }
  BOOL v13 = v11;
  int v14 = (uint64_t *)*((void *)this + 4);
  unint64_t v15 = a2;
  sub_1CC080DE0(v14, &v15)[1] = v13;
  return 1;
}

uint64_t llvm::UnrolledInstAnalyzer::visitCmpInst(llvm::UnrolledInstAnalyzer *this, llvm::CmpInst *a2)
{
  uint64_t v4 = (unsigned __int8 *)*((void *)a2 - 8);
  uint64_t v5 = (unsigned __int8 *)*((void *)a2 - 4);
  if (v4[16] >= 0x15u)
  {
    uint64_t v6 = *((void *)this + 4);
    int v20 = (llvm::CmpInst *)*((void *)a2 - 8);
    uint64_t v24 = 0;
    int v7 = sub_1CBA0E618(v6, &v20, &v24);
    uint64_t v8 = 0;
    if (v7) {
      uint64_t v8 = *(unsigned __int8 **)(v24 + 8);
    }
    if (v8) {
      uint64_t v4 = v8;
    }
  }
  if (v5[16] >= 0x15u)
  {
    uint64_t v9 = *((void *)this + 4);
    int v20 = (llvm::CmpInst *)v5;
    uint64_t v24 = 0;
    int v10 = sub_1CBA0E618(v9, &v20, &v24);
    unsigned int v11 = 0;
    if (v10) {
      unsigned int v11 = *(unsigned __int8 **)(v24 + 8);
    }
    if (v11) {
      uint64_t v5 = v11;
    }
  }
  if (v4[16] >= 0x15u && v5[16] >= 0x15u)
  {
    int v20 = 0;
    if (sub_1CC0811FC(*(void *)this, *((_DWORD *)this + 4), (uint64_t)v4, &v20))
    {
      long long v17 = v20;
      uint64_t v18 = *(void *)this;
      unsigned int v19 = *((_DWORD *)this + 4);
      if (v20 != (llvm::CmpInst *)(*(void *)this + 24 * v19))
      {
        int v20 = 0;
        if (sub_1CC0811FC(v18, v19, (uint64_t)v5, &v20))
        {
          if (v20 != (llvm::CmpInst *)(*(void *)this + 24 * *((unsigned int *)this + 4))
            && *((void *)v17 + 1) == *((void *)v20 + 1))
          {
            uint64_t v4 = (unsigned __int8 *)*((void *)v17 + 2);
            uint64_t v5 = (unsigned __int8 *)*((void *)v20 + 2);
          }
        }
      }
    }
  }
  uint64_t v12 = *((_WORD *)a2 + 9) & 0x3F;
  int v20 = (llvm::CmpInst *)(*(void *)(*(void *)(*((void *)a2 + 5) + 56) + 40) + 272);
  long long v21 = 0u;
  long long v22 = 0u;
  __int16 v23 = 257;
  BOOL v13 = sub_1CC03A634(v12, (llvm::ConstantExpr *)v4, v5, (uint64_t)&v20, 3);
  if (!v13) {
    return llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2);
  }
  int v14 = v13;
  unint64_t v15 = (uint64_t *)*((void *)this + 4);
  int v20 = a2;
  sub_1CC080DE0(v15, &v20)[1] = v14;
  return 1;
}

BOOL llvm::UnrolledInstAnalyzer::visitPHINode(llvm::UnrolledInstAnalyzer *this, llvm::PHINode *a2)
{
  return (llvm::UnrolledInstAnalyzer::simplifyInstWithSCEV(this, a2) & 1) != 0
      || *((void *)a2 + 5) == **(void **)(*((void *)this + 6) + 32);
}

void *sub_1CC080DE0(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CBFFBC50(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC080E40((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC080E40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC080EF4(a1, v7);
  uint64_t v9 = 0;
  sub_1CBFFBC50((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC080EF4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC080FC0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC080FC0(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CBFFBC50((uint64_t *)v5, a2, &v10);
      uint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CC081070(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC081148(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC081148(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBFD5918(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CC0811FC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v4 = (void *)(a1 + 24 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(a1 + 24 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopDepth(void *a1)
{
  LODWORD(v1) = 0;
  do
  {
    a1 = (void *)*a1;
    uint64_t v1 = (v1 + 1);
  }
  while (a1);
  return v1;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getHeader(uint64_t a1)
{
  return **(void **)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocks(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getParentLoop(uint64_t a1)
{
  return *(void *)a1;
}

void *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::setParentLoop(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::contains(void *a1, void *a2)
{
  if (a2 == a1) {
    return 1;
  }
  do
  {
    BOOL result = a2 != 0;
    if (!a2) {
      break;
    }
    a2 = (void *)*a2;
  }
  while (a2 != a1);
  return result;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 == v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 76);
    uint64_t v5 = (void *)(v2 + 8 * v4);
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v4;
      while (*(void *)(v2 + v6) != a2)
      {
        v6 += 8;
        if (v7 == v6) {
          goto LABEL_19;
        }
      }
      uint64_t v5 = (void *)(v2 + v6);
    }
LABEL_19:
    uint64_t v3 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(a1 + 72);
    int v9 = v8 - 1;
    unsigned int v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (void *)(v2 + 8 * v10);
    uint64_t v11 = *v5;
    if (*v5 == -1)
    {
      BOOL v12 = 0;
LABEL_24:
      if (v12) {
        uint64_t v5 = v12;
      }
      if (*v5 != a2) {
        uint64_t v5 = (void *)(v2 + 8 * v8);
      }
    }
    else
    {
      BOOL v12 = 0;
      int v13 = 1;
      while (v11 != a2)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          BOOL v12 = v5;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        uint64_t v5 = (void *)(v2 + 8 * (v15 & v9));
        uint64_t v11 = *v5;
        if (*v5 == -1) {
          goto LABEL_24;
        }
      }
    }
  }
  BOOL v14 = v2 == v3;
  uint64_t v16 = 72;
  if (v14) {
    uint64_t v16 = 76;
  }
  return v5 != (void *)(v2 + 8 * *(unsigned int *)(a1 + v16));
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getSubLoops(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getSubLoopsVector(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::begin(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::end(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::rbegin(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::rend(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isInnermost(uint64_t a1)
{
  return *(void *)(a1 + 8) == *(void *)(a1 + 16);
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isOutermost(void *a1)
{
  return *a1 == 0;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::block_begin(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::block_end(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::blocks(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBlocks(uint64_t a1)
{
  return (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocksVector(uint64_t a1)
{
  return a1 + 32;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getBlocksSet(uint64_t a1)
{
  return a1 + 56;
}

{
  return a1 + 56;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isInvalid()
{
  return 0;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2 == a2 + 40) {
    return 0;
  }
  uint64_t v3 = v2 - 24;
  if (!v2) {
    uint64_t v3 = 0;
  }
  int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 != 30)
  {
    int v30 = 2;
    BOOL v31 = 0;
    switch(*(unsigned char *)(v3 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        return v31;
      case 0x1E:
LABEL_71:
        __break(1u);
        goto LABEL_72;
      case 0x1F:
        int v30 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_69;
      case 0x20:
      case 0x26:
        int v30 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_69;
      case 0x21:
        goto LABEL_9;
      case 0x24:
        int v30 = *(_WORD *)(v3 + 18) & 1;
        goto LABEL_69;
      case 0x25:
LABEL_72:
        int v30 = 1;
        goto LABEL_9;
      case 0x27:
        int v30 = *(_DWORD *)(v3 + 80) + 1;
LABEL_69:
        if (!v30) {
          return 0;
        }
        goto LABEL_9;
      default:
        return 0;
    }
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3) {
    int v30 = 2;
  }
  else {
    int v30 = 1;
  }
LABEL_9:
  uint64_t v5 = 0;
  uint64_t v6 = v3 - 32;
  do
  {
    if (v4 == 30)
    {
      uint64_t v24 = (uint64_t *)(v6 - 32 * v5);
    }
    else
    {
      uint64_t v24 = (uint64_t *)(v3 - 32);
      switch(v4)
      {
        case ' ':
        case '&':
          int v27 = *(_DWORD *)(v3 + 20);
          if ((v27 & 0x40000000) != 0) {
            uint64_t v28 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v28 = v3 - 32 * (v27 & 0x7FFFFFF);
          }
          uint64_t v24 = (uint64_t *)(v28 + 32 * (v5 + 1));
          break;
        case '!':
          if (v5) {
            uint64_t v29 = -64;
          }
          else {
            uint64_t v29 = -96;
          }
          uint64_t v24 = (uint64_t *)(v3 + v29);
          break;
        case '""':
        case '#':
          goto LABEL_71;
        case '$':
          if ((*(_WORD *)(v3 + 18) & 1) == 0)
          {
            uint64_t v7 = 0;
            goto LABEL_14;
          }
          uint64_t v24 = (uint64_t *)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
          break;
        case '%':
          break;
        case '\'':
          if (v5) {
            uint64_t v24 = (uint64_t *)(v6 - 32 * *(unsigned int *)(v3 + 80) + 32 * v5 - 32);
          }
          else {
            uint64_t v24 = (uint64_t *)(v3 - 64 - 32 * *(unsigned int *)(v3 + 80));
          }
          break;
        default:
          int v25 = *(_DWORD *)(v3 + 20);
          if ((v25 & 0x40000000) != 0) {
            uint64_t v26 = *(void *)(v3 - 8);
          }
          else {
            uint64_t v26 = v3 - 32 * (v25 & 0x7FFFFFF);
          }
          uint64_t v24 = (uint64_t *)(v26 + 32 * (2 * v5) + 32);
          break;
      }
    }
    uint64_t v7 = *v24;
LABEL_14:
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    if (v9 == v8)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 76);
      uint64_t v11 = (void *)(v9 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v10;
        while (*(void *)(v9 + v12) != v7)
        {
          v12 += 8;
          if (v13 == v12) {
            goto LABEL_32;
          }
        }
        uint64_t v11 = (void *)(v9 + v12);
      }
LABEL_32:
      uint64_t v8 = *(void *)(a1 + 64);
    }
    else
    {
      uint64_t v14 = *(unsigned int *)(a1 + 72);
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v11 = (void *)(v9 + 8 * v16);
      uint64_t v17 = *v11;
      if (*v11 == -1)
      {
        uint64_t v18 = 0;
LABEL_43:
        if (v18) {
          uint64_t v11 = v18;
        }
        if (*v11 != v7) {
          uint64_t v11 = (void *)(v9 + 8 * v14);
        }
      }
      else
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while (v17 != v7)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            uint64_t v18 = v11;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          uint64_t v11 = (void *)(v9 + 8 * (v21 & v15));
          uint64_t v17 = *v11;
          if (*v11 == -1) {
            goto LABEL_43;
          }
        }
      }
    }
    if (v9 == v8) {
      long long v22 = (unsigned int *)(a1 + 76);
    }
    else {
      long long v22 = (unsigned int *)(a1 + 72);
    }
    BOOL v20 = v11 == (void *)(v9 + 8 * *v22);
    BOOL v31 = v20;
    ++v5;
  }
  while (!v20 && v5 != v30);
  return v31;
}

BOOL llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopLatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a1 + 32);
  while (1)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return v2 != 0;
    }
    uint64_t v3 = *(void *)(v2 + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3) {
      BOOL v5 = v4 >= 0x1C;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5 && v4 - 29 <= 0xA)
    {
LABEL_19:
      if (*(void *)(v3 + 40) != a2)
      {
        while (1)
        {
          uint64_t v2 = *(void *)(v2 + 8);
          if (!v2) {
            break;
          }
          uint64_t v3 = *(void *)(v2 + 24);
          unsigned int v7 = *(unsigned __int8 *)(v3 + 16);
          if (v3) {
            BOOL v8 = v7 >= 0x1C;
          }
          else {
            BOOL v8 = 0;
          }
          if (v8 && v7 - 29 <= 0xA) {
            goto LABEL_19;
          }
        }
      }
      return v2 != 0;
    }
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)(a1 + 32) + 8);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    BOOL v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  LODWORD(result) = 0;
  BOOL v8 = (unsigned int *)(a1 + 76);
  uint64_t v9 = (unsigned int *)(a1 + 72);
  uint64_t v12 = a1 + 56;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(v12 + 8);
  if (v11 == v10) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = v9;
  }
  uint64_t v14 = v11;
LABEL_17:
  uint64_t v15 = *(void *)(v3 + 40);
  if (v14 == v10)
  {
    uint64_t v16 = *v8;
    uint64_t v17 = (void *)(v10 + 8 * v16);
    if (v16)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 8 * v16;
      while (*(void *)(v10 + v18) != v15)
      {
        v18 += 8;
        if (v19 == v18) {
          goto LABEL_35;
        }
      }
      uint64_t v17 = (void *)(v10 + v18);
    }
LABEL_35:
    uint64_t v14 = v10;
  }
  else
  {
    int v20 = *v9 - 1;
    unsigned int v21 = v20 & ((v15 >> 4) ^ (v15 >> 9));
    uint64_t v17 = (void *)(v11 + 8 * v21);
    uint64_t v22 = *v17;
    if (*v17 == -1)
    {
      __int16 v23 = 0;
LABEL_37:
      if (v23) {
        uint64_t v17 = v23;
      }
      if (*v17 != v15) {
        uint64_t v17 = (void *)(v11 + 8 * *v13);
      }
    }
    else
    {
      __int16 v23 = 0;
      int v24 = 1;
      while (v22 != v15)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          __int16 v23 = v17;
        }
        unsigned int v26 = v21 + v24++;
        unsigned int v21 = v26 & v20;
        uint64_t v17 = (void *)(v11 + 8 * (v26 & v20));
        uint64_t v22 = *v17;
        if (*v17 == -1) {
          goto LABEL_37;
        }
      }
    }
    uint64_t v14 = v11;
  }
  if (v14 == v10) {
    int v27 = v8;
  }
  else {
    int v27 = v9;
  }
  if (v17 == (void *)(v14 + 8 * *v27)) {
    uint64_t result = result;
  }
  else {
    uint64_t result = (result + 1);
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    uint64_t v3 = *(void *)(v1 + 24);
    unsigned int v28 = *(unsigned __int8 *)(v3 + 16);
    if (v3) {
      BOOL v29 = v28 >= 0x1C;
    }
    else {
      BOOL v29 = 0;
    }
    if (v29 && v28 - 29 < 0xB) {
      goto LABEL_17;
    }
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(uint64_t result, uint64_t a2)
{
  unsigned int v4 = *(uint64_t **)(result + 32);
  BOOL v5 = *(uint64_t **)(result + 40);
  if (v5 != v4)
  {
    uint64_t v7 = result;
    BOOL v8 = (unsigned int *)(result + 76);
    uint64_t v9 = (unsigned int *)(result + 72);
    do
    {
      uint64_t v10 = *v4;
      uint64_t v11 = *(void *)(*v4 + 40);
      if (v11 != *v4 + 40)
      {
        if (v11) {
          uint64_t v12 = v11 - 24;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 != 30)
        {
          uint64_t v34 = 2;
          switch(*(unsigned char *)(v12 + 16))
          {
            case 0x1E:
LABEL_61:
              __break(1u);
LABEL_62:
              int v35 = *(_DWORD *)(v12 + 20);
              if ((v35 & 0x40000000) != 0) {
                uint64_t v36 = *(void *)(v12 - 8);
              }
              else {
                uint64_t v36 = v12 - 32 * (v35 & 0x7FFFFFF);
              }
              uint64_t v33 = v36 + 32 * v2;
              goto LABEL_54;
            case 0x1F:
              uint64_t v2 = *(unsigned int *)(v12 + 20);
              LODWORD(v34) = (v2 >> 1) & 0x3FFFFFF;
              goto LABEL_57;
            case 0x20:
            case 0x26:
              uint64_t v2 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
              LODWORD(v34) = v2 - 1;
              goto LABEL_57;
            case 0x21:
              goto LABEL_12;
            case 0x24:
              uint64_t v2 = *(unsigned __int16 *)(v12 + 18);
              LODWORD(v34) = v2 & 1;
              goto LABEL_57;
            case 0x25:
              LODWORD(v34) = 1;
              goto LABEL_12;
            case 0x27:
              uint64_t v2 = *(unsigned int *)(v12 + 80);
              LODWORD(v34) = v2 + 1;
LABEL_57:
              if (v34) {
                goto LABEL_12;
              }
              goto LABEL_48;
            default:
              goto LABEL_48;
          }
        }
        if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3) {
          LODWORD(v34) = 2;
        }
        else {
          LODWORD(v34) = 1;
        }
LABEL_12:
        uint64_t v2 = 0;
        uint64_t v3 = (uint64_t *)(v12 - 32);
        uint64_t v34 = v34;
        while (1)
        {
          if (v13 == 30)
          {
            int v30 = &v3[-4 * v2];
          }
          else
          {
            int v30 = v3;
            switch(v13)
            {
              case ' ':
              case '&':
                goto LABEL_62;
              case '!':
                uint64_t v37 = -64;
                if (!v2) {
                  uint64_t v37 = -96;
                }
                int v30 = (uint64_t *)(v12 + v37);
                goto LABEL_16;
              case '""':
              case '#':
                goto LABEL_61;
              case '$':
                if ((*(_WORD *)(v12 + 18) & 1) == 0)
                {
                  uint64_t v14 = 0;
                  goto LABEL_17;
                }
                uint64_t v33 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
                break;
              case '%':
                goto LABEL_16;
              case '\'':
                if (v2) {
                  int v30 = &v3[4 * v2 - 4 + -4 * *(unsigned int *)(v12 + 80)];
                }
                else {
                  int v30 = (uint64_t *)(v12 - 32 * *(unsigned int *)(v12 + 80) - 64);
                }
                goto LABEL_16;
              default:
                int v31 = *(_DWORD *)(v12 + 20);
                if ((v31 & 0x40000000) != 0) {
                  uint64_t v32 = *(void *)(v12 - 8);
                }
                else {
                  uint64_t v32 = v12 - 32 * (v31 & 0x7FFFFFF);
                }
                uint64_t v33 = v32 + 32 * (2 * v2);
                break;
            }
LABEL_54:
            int v30 = (uint64_t *)(v33 + 32);
          }
LABEL_16:
          uint64_t v14 = *v30;
LABEL_17:
          uint64_t v16 = *(void *)(v7 + 56);
          uint64_t v15 = *(void *)(v7 + 64);
          if (v15 == v16)
          {
            uint64_t v17 = *v8;
            uint64_t v18 = (void *)(v15 + 8 * v17);
            if (v17)
            {
              uint64_t v19 = 0;
              uint64_t v20 = 8 * v17;
              while (1)
              {
                uint64_t result = *(void *)(v15 + v19);
                if (result == v14) {
                  break;
                }
                v19 += 8;
                if (v20 == v19) {
                  goto LABEL_22;
                }
              }
              uint64_t v18 = (void *)(v15 + v19);
            }
LABEL_22:
            uint64_t v16 = *(void *)(v7 + 64);
          }
          else
          {
            uint64_t v22 = *v9;
            uint64_t result = (v22 - 1);
            unsigned int v23 = result & ((v14 >> 4) ^ (v14 >> 9));
            uint64_t v18 = (void *)(v15 + 8 * v23);
            uint64_t v24 = *v18;
            if (*v18 == -1)
            {
              BOOL v25 = 0;
LABEL_42:
              if (v25) {
                uint64_t v18 = v25;
              }
              uint64_t result = *v18;
              if (*v18 != v14) {
                uint64_t v18 = (void *)(v15 + 8 * v22);
              }
            }
            else
            {
              BOOL v25 = 0;
              int v26 = 1;
              while (v24 != v14)
              {
                if (v25) {
                  BOOL v27 = 0;
                }
                else {
                  BOOL v27 = v24 == -2;
                }
                if (v27) {
                  BOOL v25 = v18;
                }
                unsigned int v28 = v23 + v26++;
                unsigned int v23 = v28 & result;
                uint64_t v18 = (void *)(v15 + 8 * (v28 & result));
                uint64_t v24 = *v18;
                if (*v18 == -1) {
                  goto LABEL_42;
                }
              }
            }
          }
          unsigned int v21 = v15 == v16 ? v8 : v9;
          if (v18 == (void *)(v15 + 8 * *v21)) {
            break;
          }
          if (++v2 == v34) {
            goto LABEL_48;
          }
        }
        unint64_t v29 = *(unsigned int *)(a2 + 8);
        if (v29 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v29) = v10;
        ++*(_DWORD *)(a2 + 8);
      }
LABEL_48:
      ++v4;
    }
    while (v4 != v5);
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock()
{
}

{
  while (1)
    ;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(uint64_t result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *(void *)(result + 40);
  if (v6 != v5)
  {
    uint64_t v7 = result;
    BOOL v8 = (unsigned int *)(result + 76);
    uint64_t v9 = (unsigned int *)(result + 72);
    uint64_t result = 1;
    do
    {
      uint64_t v10 = *(void *)(*(void *)v5 + 40);
      if (v10 != *(void *)v5 + 40)
      {
        if (v10) {
          uint64_t v11 = v10 - 24;
        }
        else {
          uint64_t v11 = 0;
        }
        int v12 = *(unsigned __int8 *)(v11 + 16);
        int v13 = v12 - 29;
        if (v12 != 30)
        {
          unsigned int v36 = 2;
          switch(v13)
          {
            case 1:
LABEL_59:
              __break(1u);
LABEL_60:
              int v37 = *(_DWORD *)(v11 + 20);
              if ((v37 & 0x40000000) != 0) {
                uint64_t v38 = *(void *)(v11 - 8);
              }
              else {
                uint64_t v38 = v11 - 32 * (v37 & 0x7FFFFFF);
              }
              uint64_t v40 = v38 + 32 * v4;
              goto LABEL_76;
            case 2:
              unsigned int v36 = (*(_DWORD *)(v11 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_56;
            case 3:
            case 9:
              unsigned int v36 = (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_56;
            case 4:
              goto LABEL_12;
            case 7:
              unsigned int v36 = *(_WORD *)(v11 + 18) & 1;
              goto LABEL_56;
            case 8:
              unsigned int v36 = 1;
              goto LABEL_12;
            case 10:
              unsigned int v36 = *(_DWORD *)(v11 + 80) + 1;
LABEL_56:
              if (v36) {
                goto LABEL_12;
              }
              goto LABEL_53;
            default:
              goto LABEL_53;
          }
        }
        if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3) {
          unsigned int v36 = 2;
        }
        else {
          unsigned int v36 = 1;
        }
LABEL_12:
        uint64_t v4 = 0;
        uint64_t v3 = (uint64_t *)(v11 - 32);
        uint64_t v2 = v36;
        do
        {
          int v14 = *(unsigned __int8 *)(v11 + 16);
          if (v14 == 30)
          {
            uint64_t v33 = &v3[-4 * v4];
          }
          else
          {
            uint64_t v32 = (v14 - 31);
            uint64_t v33 = v3;
            switch(v32)
            {
              case 1:
              case 7:
                goto LABEL_60;
              case 2:
                uint64_t v39 = -64;
                if (!v4) {
                  uint64_t v39 = -96;
                }
                uint64_t v33 = (uint64_t *)(v11 + v39);
                goto LABEL_16;
              case 3:
              case 4:
                goto LABEL_59;
              case 5:
                if ((*(_WORD *)(v11 + 18) & 1) == 0)
                {
                  uint64_t v15 = 0;
                  uint64_t result = 1;
                  goto LABEL_17;
                }
                uint64_t v40 = v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF);
                break;
              case 6:
                goto LABEL_16;
              case 8:
                if (v4) {
                  uint64_t v33 = &v3[4 * v4 - 4 + -4 * *(unsigned int *)(v11 + 80)];
                }
                else {
                  uint64_t v33 = (uint64_t *)(v11 - 32 * *(unsigned int *)(v11 + 80) - 64);
                }
                goto LABEL_77;
              default:
                int v34 = *(_DWORD *)(v11 + 20);
                if ((v34 & 0x40000000) != 0) {
                  uint64_t v35 = *(void *)(v11 - 8);
                }
                else {
                  uint64_t v35 = v11 - 32 * (v34 & 0x7FFFFFF);
                }
                uint64_t v33 = (uint64_t *)(v35 + 32 * (2 * v4) + 32);
                goto LABEL_16;
            }
LABEL_76:
            uint64_t v33 = (uint64_t *)(v40 + 32);
LABEL_77:
            uint64_t result = 1;
          }
LABEL_16:
          uint64_t v15 = *v33;
LABEL_17:
          uint64_t v17 = *(void *)(v7 + 56);
          uint64_t v16 = *(void *)(v7 + 64);
          if (v16 == v17)
          {
            uint64_t v18 = *v8;
            uint64_t v19 = (void *)(v16 + 8 * v18);
            if (v18)
            {
              uint64_t v20 = 0;
              uint64_t v21 = 8 * v18;
              while (*(void *)(v16 + v20) != v15)
              {
                v20 += 8;
                if (v21 == v20) {
                  goto LABEL_23;
                }
              }
              uint64_t v19 = (void *)(v16 + v20);
            }
LABEL_23:
            uint64_t v17 = *(void *)(v7 + 64);
          }
          else
          {
            uint64_t v23 = *v9;
            int v24 = v23 - 1;
            unsigned int v25 = (v23 - 1) & ((v15 >> 4) ^ (v15 >> 9));
            uint64_t v19 = (void *)(v16 + 8 * v25);
            uint64_t v26 = *v19;
            if (*v19 == -1)
            {
              int v30 = 0;
LABEL_41:
              if (v30) {
                uint64_t v19 = v30;
              }
              if (*v19 != v15) {
                uint64_t v19 = (void *)(v16 + 8 * v23);
              }
            }
            else
            {
              int v30 = 0;
              int v27 = 1;
              while (v26 != v15)
              {
                if (v30) {
                  BOOL v28 = 0;
                }
                else {
                  BOOL v28 = v26 == -2;
                }
                if (v28) {
                  int v30 = v19;
                }
                unsigned int v29 = v25 + v27++;
                unsigned int v25 = v29 & v24;
                uint64_t v19 = (void *)(v16 + 8 * (v29 & v24));
                uint64_t v26 = *v19;
                if (*v19 == -1) {
                  goto LABEL_41;
                }
              }
            }
          }
          if (v16 == v17) {
            uint64_t v22 = v8;
          }
          else {
            uint64_t v22 = v9;
          }
          if (v19 == (void *)(v16 + 8 * *v22))
          {
            unint64_t v31 = *(unsigned int *)(a2 + 8);
            if (v31 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a2 + 8 * v31) = v15;
            ++*(_DWORD *)(a2 + 8);
          }
          ++v4;
        }
        while (v4 != v2);
      }
LABEL_53:
      v5 += 8;
    }
    while (v5 != v6);
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock()
{
}

{
  while (1)
    ;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasDedicatedExits(uint64_t a1)
{
  v32[4] = *MEMORY[0x1E4F143B8];
  int v30 = v32;
  uint64_t v31 = 0x400000000;
  sub_1CC082408((void *)a1, (uint64_t)&v30);
  if (v31)
  {
    uint64_t v2 = (uint64_t *)v30;
    while (2)
    {
      uint64_t v3 = *v2;
      while (1)
      {
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          break;
        }
        uint64_t v4 = *(void *)(v3 + 24);
        unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
        if (v4) {
          BOOL v6 = v5 >= 0x1C;
        }
        else {
          BOOL v6 = 0;
        }
        if (v6 && v5 - 29 < 0xB)
        {
          uint64_t v9 = *(void *)(a1 + 56);
          uint64_t v8 = *(void *)(a1 + 64);
          if (v8 == v9) {
            uint64_t v10 = (unsigned int *)(a1 + 76);
          }
          else {
            uint64_t v10 = (unsigned int *)(a1 + 72);
          }
          uint64_t v11 = *(void *)(a1 + 64);
LABEL_16:
          uint64_t v12 = *(void *)(v4 + 40);
          if (v11 == v9)
          {
            uint64_t v13 = *(unsigned int *)(a1 + 76);
            int v14 = (void *)(v9 + 8 * v13);
            if (v13)
            {
              uint64_t v15 = 0;
              uint64_t v16 = 8 * v13;
              while (*(void *)(v9 + v15) != v12)
              {
                v15 += 8;
                if (v16 == v15) {
                  goto LABEL_34;
                }
              }
              int v14 = (void *)(v9 + v15);
            }
LABEL_34:
            uint64_t v11 = *(void *)(a1 + 56);
          }
          else
          {
            int v17 = *(_DWORD *)(a1 + 72) - 1;
            unsigned int v18 = v17 & ((v12 >> 4) ^ (v12 >> 9));
            int v14 = (void *)(v8 + 8 * v18);
            uint64_t v19 = *v14;
            if (*v14 == -1)
            {
              uint64_t v20 = 0;
LABEL_36:
              if (v20) {
                int v14 = v20;
              }
              if (*v14 != v12) {
                int v14 = (void *)(v8 + 8 * *v10);
              }
            }
            else
            {
              uint64_t v20 = 0;
              int v21 = 1;
              while (v19 != v12)
              {
                if (v20) {
                  BOOL v22 = 0;
                }
                else {
                  BOOL v22 = v19 == -2;
                }
                if (v22) {
                  uint64_t v20 = v14;
                }
                unsigned int v23 = v18 + v21++;
                unsigned int v18 = v23 & v17;
                int v14 = (void *)(v8 + 8 * (v23 & v17));
                uint64_t v19 = *v14;
                if (*v14 == -1) {
                  goto LABEL_36;
                }
              }
            }
            uint64_t v11 = *(void *)(a1 + 64);
          }
          if (v11 == v9) {
            int v24 = (unsigned int *)(a1 + 76);
          }
          else {
            int v24 = (unsigned int *)(a1 + 72);
          }
          if (v14 == (void *)(v11 + 8 * *v24))
          {
            uint64_t v28 = 0;
            goto LABEL_57;
          }
          while (1)
          {
            uint64_t v3 = *(void *)(v3 + 8);
            if (!v3) {
              goto LABEL_54;
            }
            uint64_t v4 = *(void *)(v3 + 24);
            unsigned int v25 = *(unsigned __int8 *)(v4 + 16);
            if (v4) {
              BOOL v26 = v25 >= 0x1C;
            }
            else {
              BOOL v26 = 0;
            }
            if (v26 && v25 - 29 < 0xB) {
              goto LABEL_16;
            }
          }
        }
      }
LABEL_54:
      if (++v2 != (uint64_t *)((char *)v30 + 8 * v31)) {
        continue;
      }
      break;
    }
  }
  uint64_t v28 = 1;
LABEL_57:
  if (v30 != v32) {
    free(v30);
  }
  return v28;
}

void sub_1CC082408(void *a1, uint64_t a2)
{
  int v58 = v62;
  long long v59 = v62;
  uint64_t v60 = 32;
  int v61 = 0;
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  if (v6 != v5)
  {
    uint64_t v9 = (unsigned int *)a1 + 19;
    uint64_t v10 = (unsigned int *)(a1 + 9);
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)v5 + 40);
      if (v11 != *(void *)v5 + 40) {
        break;
      }
LABEL_60:
      v5 += 8;
      if (v5 == v6)
      {
        if (v59 != v58) {
          free(v59);
        }
        return;
      }
    }
    if (v11) {
      uint64_t v12 = v11 - 24;
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = *(unsigned __int8 *)(v12 + 16);
    int v14 = v13 - 29;
    if (v13 != 30)
    {
      unsigned int v41 = 2;
      switch(v14)
      {
        case 1:
LABEL_101:
          __break(1u);
LABEL_102:
          int v53 = *(_DWORD *)(v12 + 20);
          if ((v53 & 0x40000000) != 0) {
            uint64_t v54 = *(void *)(v12 - 8);
          }
          else {
            uint64_t v54 = v12 - 32 * (v53 & 0x7FFFFFF);
          }
          uint64_t v56 = v54 + 32 * v4;
          goto LABEL_118;
        case 2:
          unsigned int v41 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_83;
        case 3:
        case 9:
          unsigned int v41 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_83;
        case 4:
          goto LABEL_12;
        case 7:
          unsigned int v41 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_83;
        case 8:
          unsigned int v41 = 1;
          goto LABEL_12;
        case 10:
          unsigned int v41 = *(_DWORD *)(v12 + 80) + 1;
LABEL_83:
          if (v41) {
            goto LABEL_12;
          }
          goto LABEL_60;
        default:
          goto LABEL_60;
      }
    }
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v41 = 2;
    }
    else {
      unsigned int v41 = 1;
    }
LABEL_12:
    uint64_t v4 = 0;
    uint64_t v3 = (uint64_t *)(v12 - 32);
    uint64_t v2 = v41;
    while (1)
    {
      int v15 = *(unsigned __int8 *)(v12 + 16);
      if (v15 == 30)
      {
        uint64_t v38 = &v3[-4 * v4];
      }
      else
      {
        uint64_t v37 = (v15 - 31);
        uint64_t v38 = v3;
        switch(v37)
        {
          case 1:
          case 7:
            goto LABEL_102;
          case 2:
            uint64_t v55 = -64;
            if (!v4) {
              uint64_t v55 = -96;
            }
            uint64_t v38 = (uint64_t *)(v12 + v55);
            goto LABEL_16;
          case 3:
          case 4:
            goto LABEL_101;
          case 5:
            if ((*(_WORD *)(v12 + 18) & 1) == 0)
            {
              uint64_t v16 = 0;
              goto LABEL_17;
            }
            uint64_t v56 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
            break;
          case 6:
            goto LABEL_16;
          case 8:
            if (v4) {
              uint64_t v38 = &v3[4 * v4 - 4 + -4 * *(unsigned int *)(v12 + 80)];
            }
            else {
              uint64_t v38 = (uint64_t *)(v12 - 32 * *(unsigned int *)(v12 + 80) - 64);
            }
            goto LABEL_16;
          default:
            int v39 = *(_DWORD *)(v12 + 20);
            if ((v39 & 0x40000000) != 0) {
              uint64_t v40 = *(void *)(v12 - 8);
            }
            else {
              uint64_t v40 = v12 - 32 * (v39 & 0x7FFFFFF);
            }
            uint64_t v38 = (uint64_t *)(v40 + 32 * (2 * v4) + 32);
            goto LABEL_16;
        }
LABEL_118:
        uint64_t v38 = (uint64_t *)(v56 + 32);
      }
LABEL_16:
      uint64_t v16 = *v38;
LABEL_17:
      uint64_t v18 = a1[7];
      uint64_t v17 = a1[8];
      if (v17 == v18)
      {
        uint64_t v19 = *v9;
        uint64_t v20 = (void *)(v17 + 8 * v19);
        if (v19)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 8 * v19;
          while (*(void *)(v17 + v21) != v16)
          {
            v21 += 8;
            if (v22 == v21) {
              goto LABEL_23;
            }
          }
          uint64_t v20 = (void *)(v17 + v21);
        }
LABEL_23:
        uint64_t v18 = a1[8];
      }
      else
      {
        uint64_t v24 = *v10;
        int v25 = v24 - 1;
        unsigned int v26 = (v24 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        uint64_t v20 = (void *)(v17 + 8 * v26);
        uint64_t v27 = *v20;
        if (*v20 == -1)
        {
          int v34 = 0;
LABEL_47:
          if (v34) {
            uint64_t v20 = v34;
          }
          if (*v20 != v16) {
            uint64_t v20 = (void *)(v17 + 8 * v24);
          }
        }
        else
        {
          int v34 = 0;
          int v28 = 1;
          while (v27 != v16)
          {
            if (v34) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v27 == -2;
            }
            if (v29) {
              int v34 = v20;
            }
            unsigned int v30 = v26 + v28++;
            unsigned int v26 = v30 & v25;
            uint64_t v20 = (void *)(v17 + 8 * (v30 & v25));
            uint64_t v27 = *v20;
            if (*v20 == -1) {
              goto LABEL_47;
            }
          }
        }
      }
      if (v17 == v18) {
        unsigned int v23 = v9;
      }
      else {
        unsigned int v23 = v10;
      }
      if (v20 != (void *)(v17 + 8 * *v23)) {
        goto LABEL_28;
      }
      uint64_t v35 = v59;
      uint64_t v36 = HIDWORD(v60);
      if (v59 == v58)
      {
        if (HIDWORD(v60))
        {
          uint64_t v31 = 0;
          uint64_t v33 = 8 * HIDWORD(v60);
          uint64_t v32 = v59;
          while (*v32 != v16)
          {
            if (*v32 == -2) {
              uint64_t v31 = v32;
            }
            ++v32;
            v33 -= 8;
            if (!v33)
            {
              if (!v31) {
                goto LABEL_63;
              }
              *uint64_t v31 = v16;
              --v61;
              goto LABEL_65;
            }
          }
          goto LABEL_28;
        }
LABEL_63:
        unsigned int v43 = v60;
        if (HIDWORD(v60) < v60)
        {
          ++HIDWORD(v60);
          *(void *)&v59[8 * v36] = v16;
LABEL_65:
          unint64_t v42 = *(unsigned int *)(a2 + 8);
          if (v42 >= *(unsigned int *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a2 + 8 * v42) = v16;
          ++*(_DWORD *)(a2 + 8);
          goto LABEL_28;
        }
      }
      else
      {
        unsigned int v43 = v60;
      }
      if (3 * v43 <= 4 * (HIDWORD(v60) - v61))
      {
        if (v43 >= 0x40) {
          v43 *= 2;
        }
        else {
          unsigned int v43 = 128;
        }
      }
      else if (v43 - HIDWORD(v60) >= v43 >> 3)
      {
        goto LABEL_70;
      }
      uint64_t v57 = a2;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v58, v43);
      a2 = v57;
      unsigned int v43 = v60;
      uint64_t v35 = v59;
LABEL_70:
      unsigned int v44 = v43 - 1;
      unsigned int v45 = (v43 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      uint64_t v46 = &v35[8 * v45];
      uint64_t v47 = *(void *)v46;
      if (*(void *)v46 != -1)
      {
        int v51 = 0;
        int v48 = 1;
        while (v47 != v16)
        {
          if (v51) {
            BOOL v49 = 0;
          }
          else {
            BOOL v49 = v47 == -2;
          }
          if (v49) {
            int v51 = v46;
          }
          unsigned int v50 = v45 + v48++;
          unsigned int v45 = v50 & v44;
          uint64_t v46 = &v35[8 * (v50 & v44)];
          uint64_t v47 = *(void *)v46;
          if (*(void *)v46 == -1) {
            goto LABEL_85;
          }
        }
        goto LABEL_28;
      }
      int v51 = 0;
LABEL_85:
      if (v51) {
        long long v52 = v51;
      }
      else {
        long long v52 = v46;
      }
      if (*(void *)v52 != v16)
      {
        if (*(void *)v52 == -2) {
          --v61;
        }
        else {
          ++HIDWORD(v60);
        }
        *(void *)long long v52 = v16;
        goto LABEL_65;
      }
LABEL_28:
      if (++v4 == v2) {
        goto LABEL_60;
      }
    }
  }
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueNonLatchExitBlocks()
{
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 32);
  do
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    if (v2) {
      BOOL v4 = v3 >= 0x1C;
    }
    else {
      BOOL v4 = 0;
    }
  }
  while (!v4 || v3 - 29 >= 0xB);
  uint64_t v6 = 0;
  uint64_t v7 = (unsigned int *)(a1 + 76);
  uint64_t v8 = (unsigned int *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9 == v10) {
    uint64_t v11 = (unsigned int *)(a1 + 76);
  }
  else {
    uint64_t v11 = (unsigned int *)(a1 + 72);
  }
  uint64_t v12 = *(void *)(a1 + 64);
LABEL_14:
  uint64_t result = *(void *)(v2 + 40);
  if (v12 == v10)
  {
    uint64_t v14 = *v7;
    int v15 = (void *)(v10 + 8 * v14);
    if (v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v14;
      while (*(void *)(v10 + v16) != result)
      {
        v16 += 8;
        if (v17 == v16) {
          goto LABEL_32;
        }
      }
      int v15 = (void *)(v10 + v16);
    }
LABEL_32:
    uint64_t v12 = v10;
  }
  else
  {
    int v18 = *v8 - 1;
    unsigned int v19 = v18 & ((result >> 4) ^ (result >> 9));
    int v15 = (void *)(v9 + 8 * v19);
    uint64_t v20 = *v15;
    if (*v15 == -1)
    {
      uint64_t v21 = 0;
LABEL_34:
      if (v21) {
        int v15 = v21;
      }
      if (*v15 != result) {
        int v15 = (void *)(v9 + 8 * *v11);
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != result)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          uint64_t v21 = v15;
        }
        unsigned int v24 = v19 + v22++;
        unsigned int v19 = v24 & v18;
        int v15 = (void *)(v9 + 8 * (v24 & v18));
        uint64_t v20 = *v15;
        if (*v15 == -1) {
          goto LABEL_34;
        }
      }
    }
    uint64_t v12 = v9;
  }
  if (v12 == v10) {
    int v25 = v7;
  }
  else {
    int v25 = v8;
  }
  if (v15 != (void *)(v12 + 8 * *v25))
  {
    if (!v6) {
      goto LABEL_46;
    }
    return 0;
  }
  uint64_t result = v6;
LABEL_46:
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v26 = *(unsigned __int8 *)(v2 + 16);
    if (v2) {
      BOOL v27 = v26 >= 0x1C;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27 && v26 - 29 < 0xB)
    {
      uint64_t v6 = result;
      goto LABEL_14;
    }
  }
}

void sub_1CC082B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = v68;
  int v65 = v68;
  uint64_t v66 = 32;
  int v67 = 0;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40) - v8;
  if (v9)
  {
    uint64_t v10 = 8 * (v9 >> 3);
    for (uint64_t i = *(uint64_t **)(a1 + 32); *i == a3; ++i)
    {
      v10 -= 8;
      if (!v10) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = *(uint64_t **)(a1 + 32);
  }
  uint64_t v12 = (uint64_t *)(v8 + (v9 & 0xFFFFFFFFFFFFFFF8));
  if (i != v12)
  {
    uint64_t v13 = *i;
LABEL_9:
    uint64_t v14 = *(void *)(v13 + 40);
    if (v14 != v13 + 40)
    {
      if (v14) {
        uint64_t v15 = v14 - 24;
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(unsigned __int8 *)(v15 + 16);
      int v17 = v16 - 29;
      if (v16 != 30)
      {
        unsigned int v39 = 2;
        switch(v17)
        {
          case 1:
LABEL_107:
            __break(1u);
LABEL_108:
            int v58 = *(_DWORD *)(v15 + 20);
            if ((v58 & 0x40000000) != 0) {
              uint64_t v59 = *(void *)(v15 - 8);
            }
            else {
              uint64_t v59 = v15 - 32 * (v58 & 0x7FFFFFF);
            }
            uint64_t v61 = v59 + 32 * v3;
            goto LABEL_124;
          case 2:
            unsigned int v39 = (*(_DWORD *)(v15 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_61;
          case 3:
          case 9:
            unsigned int v39 = (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_61;
          case 4:
            goto LABEL_18;
          case 7:
            unsigned int v39 = *(_WORD *)(v15 + 18) & 1;
            goto LABEL_61;
          case 8:
            unsigned int v39 = 1;
            goto LABEL_18;
          case 10:
            unsigned int v39 = *(_DWORD *)(v15 + 80) + 1;
LABEL_61:
            if (v39) {
              goto LABEL_18;
            }
            goto LABEL_56;
          default:
            goto LABEL_56;
        }
      }
      if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v39 = 2;
      }
      else {
        unsigned int v39 = 1;
      }
LABEL_18:
      uint64_t v3 = 0;
      uint64_t v5 = (uint64_t *)(v15 - 32);
      uint64_t v4 = v39;
      do
      {
        int v18 = *(unsigned __int8 *)(v15 + 16);
        if (v18 == 30)
        {
          uint64_t v36 = &v5[-4 * v3];
        }
        else
        {
          uint64_t v35 = (v18 - 31);
          uint64_t v36 = v5;
          switch(v35)
          {
            case 1:
            case 7:
              goto LABEL_108;
            case 2:
              uint64_t v60 = -64;
              if (!v3) {
                uint64_t v60 = -96;
              }
              uint64_t v36 = (uint64_t *)(v15 + v60);
              goto LABEL_22;
            case 3:
            case 4:
              goto LABEL_107;
            case 5:
              if ((*(_WORD *)(v15 + 18) & 1) == 0)
              {
                uint64_t v19 = 0;
                goto LABEL_23;
              }
              uint64_t v61 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
              break;
            case 6:
              goto LABEL_22;
            case 8:
              if (v3) {
                uint64_t v36 = &v5[4 * v3 - 4 + -4 * *(unsigned int *)(v15 + 80)];
              }
              else {
                uint64_t v36 = (uint64_t *)(v15 - 32 * *(unsigned int *)(v15 + 80) - 64);
              }
              goto LABEL_22;
            default:
              int v37 = *(_DWORD *)(v15 + 20);
              if ((v37 & 0x40000000) != 0) {
                uint64_t v38 = *(void *)(v15 - 8);
              }
              else {
                uint64_t v38 = v15 - 32 * (v37 & 0x7FFFFFF);
              }
              uint64_t v36 = (uint64_t *)(v38 + 32 * (2 * v3) + 32);
              goto LABEL_22;
          }
LABEL_124:
          uint64_t v36 = (uint64_t *)(v61 + 32);
        }
LABEL_22:
        uint64_t v19 = *v36;
LABEL_23:
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(a1 + 64);
        if (v20 == v21)
        {
          uint64_t v22 = *(unsigned int *)(a1 + 76);
          BOOL v23 = (void *)(v20 + 8 * v22);
          if (v22)
          {
            uint64_t v24 = 0;
            uint64_t v25 = 8 * v22;
            while (*(void *)(v20 + v24) != v19)
            {
              v24 += 8;
              if (v25 == v24) {
                goto LABEL_29;
              }
            }
            BOOL v23 = (void *)(v20 + v24);
          }
LABEL_29:
          uint64_t v21 = *(void *)(a1 + 64);
        }
        else
        {
          uint64_t v27 = *(unsigned int *)(a1 + 72);
          int v28 = v27 - 1;
          unsigned int v29 = (v27 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          BOOL v23 = (void *)(v20 + 8 * v29);
          uint64_t v30 = *v23;
          if (*v23 == -1)
          {
            int v34 = 0;
LABEL_47:
            if (v34) {
              BOOL v23 = v34;
            }
            if (*v23 != v19) {
              BOOL v23 = (void *)(v20 + 8 * v27);
            }
          }
          else
          {
            int v34 = 0;
            int v31 = 1;
            while (v30 != v19)
            {
              if (v34) {
                BOOL v32 = 0;
              }
              else {
                BOOL v32 = v30 == -2;
              }
              if (v32) {
                int v34 = v23;
              }
              unsigned int v33 = v29 + v31++;
              unsigned int v29 = v33 & v28;
              BOOL v23 = (void *)(v20 + 8 * (v33 & v28));
              uint64_t v30 = *v23;
              if (*v23 == -1) {
                goto LABEL_47;
              }
            }
          }
        }
        if (v20 == v21) {
          unsigned int v26 = (unsigned int *)(a1 + 76);
        }
        else {
          unsigned int v26 = (unsigned int *)(a1 + 72);
        }
        if (v23 != (void *)(v20 + 8 * *v26)) {
          goto LABEL_34;
        }
        unsigned int v45 = v65;
        uint64_t v46 = HIDWORD(v66);
        if (v65 == v64)
        {
          if (HIDWORD(v66))
          {
            unint64_t v42 = 0;
            uint64_t v44 = 8 * HIDWORD(v66);
            unsigned int v43 = v65;
            while (*(void *)v43 != v19)
            {
              if (*(void *)v43 == -2) {
                unint64_t v42 = v43;
              }
              v43 += 8;
              v44 -= 8;
              if (!v44)
              {
                if (!v42) {
                  goto LABEL_79;
                }
                *(void *)unint64_t v42 = v19;
                --v67;
                goto LABEL_70;
              }
            }
            goto LABEL_34;
          }
LABEL_79:
          unsigned int v48 = v66;
          if (HIDWORD(v66) < v66)
          {
            ++HIDWORD(v66);
            *(void *)&v65[8 * v46] = v19;
LABEL_70:
            unint64_t v47 = *(unsigned int *)(a2 + 8);
            if (v47 >= *(unsigned int *)(a2 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)a2 + 8 * v47) = v19;
            ++*(_DWORD *)(a2 + 8);
            goto LABEL_34;
          }
        }
        else
        {
          unsigned int v48 = v66;
        }
        if (3 * v48 <= 4 * (HIDWORD(v66) - v67))
        {
          if (v48 >= 0x40) {
            v48 *= 2;
          }
          else {
            unsigned int v48 = 128;
          }
        }
        else if (v48 - HIDWORD(v66) >= v48 >> 3)
        {
          goto LABEL_83;
        }
        uint64_t v62 = a2;
        uint64_t v63 = a3;
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v64, v48);
        a2 = v62;
        a3 = v63;
        unsigned int v48 = v66;
        unsigned int v45 = v65;
LABEL_83:
        unsigned int v49 = v48 - 1;
        unsigned int v50 = (v48 - 1) & ((v19 >> 4) ^ (v19 >> 9));
        int v51 = &v45[8 * v50];
        uint64_t v52 = *(void *)v51;
        if (*(void *)v51 != -1)
        {
          uint64_t v56 = 0;
          int v53 = 1;
          while (v52 != v19)
          {
            if (v56) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v52 == -2;
            }
            if (v54) {
              uint64_t v56 = v51;
            }
            unsigned int v55 = v50 + v53++;
            unsigned int v50 = v55 & v49;
            int v51 = &v45[8 * (v55 & v49)];
            uint64_t v52 = *(void *)v51;
            if (*(void *)v51 == -1) {
              goto LABEL_94;
            }
          }
          goto LABEL_34;
        }
        uint64_t v56 = 0;
LABEL_94:
        if (v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = v51;
        }
        if (*(void *)v57 != v19)
        {
          if (*(void *)v57 == -2) {
            --v67;
          }
          else {
            ++HIDWORD(v66);
          }
          *(void *)uint64_t v57 = v19;
          goto LABEL_70;
        }
LABEL_34:
        ++v3;
      }
      while (v3 != v4);
    }
LABEL_56:
    uint64_t v40 = i + 1;
    while (v40 != v12)
    {
      uint64_t v41 = *v40++;
      uint64_t v13 = v41;
      if (v41 != a3)
      {
        uint64_t i = v40 - 1;
        goto LABEL_9;
      }
    }
    if (v65 != v64) {
      free(v65);
    }
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(void *a1)
{
  _OWORD v6[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v6;
  uint64_t v5 = 0x800000000;
  sub_1CC082408(a1, (uint64_t)&v4);
  if (v5 == 1) {
    uint64_t v1 = *(void *)v4;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v4 != v6)
  {
    uint64_t v3 = v1;
    free(v4);
    return v3;
  }
  return v1;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::hasNoExitBlocks()
{
}

{
  while (1)
    ;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 32);
  unint64_t v42 = *(uint64_t **)(result + 40);
  if (v42 != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unsigned int *)(result + 76);
    uint64_t v6 = (unsigned int *)(result + 72);
    do
    {
      uint64_t v44 = *v2;
      uint64_t v7 = *(void *)(v44 + 40);
      if (v7 != v44 + 40)
      {
        if (v7) {
          uint64_t v8 = v7 - 24;
        }
        else {
          uint64_t v8 = 0;
        }
        int v9 = *(unsigned __int8 *)(v8 + 16);
        int v10 = v9 - 29;
        if (v9 != 30)
        {
          unsigned int v41 = 2;
          switch(v10)
          {
            case 1:
LABEL_79:
              __break(1u);
              JUMPOUT(0x1CC083538);
            case 2:
              unsigned int v41 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_72;
            case 3:
            case 9:
              unsigned int v41 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_72;
            case 4:
              goto LABEL_12;
            case 7:
              unsigned int v41 = *(_WORD *)(v8 + 18) & 1;
              goto LABEL_72;
            case 8:
              unsigned int v41 = 1;
              goto LABEL_12;
            case 10:
              unsigned int v41 = *(_DWORD *)(v8 + 80) + 1;
LABEL_72:
              if (!v41) {
                goto LABEL_69;
              }
              goto LABEL_12;
            default:
              goto LABEL_69;
          }
        }
        if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3) {
          unsigned int v41 = 2;
        }
        else {
          unsigned int v41 = 1;
        }
LABEL_12:
        uint64_t v11 = 0;
        uint64_t v12 = v8 - 32;
        uint64_t v13 = v41;
        do
        {
          uint64_t v43 = 0;
          int v14 = *(unsigned __int8 *)(v8 + 16);
          if (v14 == 30)
          {
            BOOL v32 = (uint64_t *)(v12 - 32 * v11);
          }
          else
          {
            uint64_t v31 = (v14 - 31);
            BOOL v32 = (uint64_t *)(v8 - 32);
            switch(v31)
            {
              case 1:
              case 7:
                int v36 = *(_DWORD *)(v8 + 20);
                if ((v36 & 0x40000000) != 0) {
                  uint64_t v37 = *(void *)(v8 - 8);
                }
                else {
                  uint64_t v37 = v8 - 32 * (v36 & 0x7FFFFFF);
                }
                uint64_t v35 = v37 + 32 * v11;
                goto LABEL_52;
              case 2:
                uint64_t v38 = -64;
                if (!v11) {
                  uint64_t v38 = -96;
                }
                BOOL v32 = (uint64_t *)(v8 + v38);
                break;
              case 3:
              case 4:
                goto LABEL_79;
              case 5:
                if ((*(_WORD *)(v8 + 18) & 1) == 0)
                {
                  uint64_t v15 = 0;
                  goto LABEL_17;
                }
                uint64_t v39 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
                uint64_t v40 = v8 + 32;
                goto LABEL_67;
              case 6:
                break;
              case 8:
                if (v11)
                {
                  BOOL v32 = (uint64_t *)(v12 - 32 * *(unsigned int *)(v8 + 80) + 32 * v11 - 32);
                }
                else
                {
                  uint64_t v39 = *(unsigned int *)(v8 + 80);
                  uint64_t v40 = v8 - 64;
LABEL_67:
                  BOOL v32 = (uint64_t *)(v40 - 32 * v39);
                }
                break;
              default:
                int v33 = *(_DWORD *)(v8 + 20);
                if ((v33 & 0x40000000) != 0) {
                  uint64_t v34 = *(void *)(v8 - 8);
                }
                else {
                  uint64_t v34 = v8 - 32 * (v33 & 0x7FFFFFF);
                }
                uint64_t v35 = v34 + 32 * (2 * v11);
LABEL_52:
                BOOL v32 = (uint64_t *)(v35 + 32);
                break;
            }
          }
          uint64_t v15 = *v32;
LABEL_17:
          uint64_t v43 = v15;
          uint64_t v17 = *(void *)(v4 + 56);
          uint64_t v16 = *(void *)(v4 + 64);
          if (v16 == v17)
          {
            uint64_t v18 = *v5;
            uint64_t v19 = (void *)(v16 + 8 * v18);
            if (v18)
            {
              uint64_t v20 = 0;
              uint64_t v21 = 8 * v18;
              while (*(void *)(v16 + v20) != v15)
              {
                v20 += 8;
                if (v21 == v20) {
                  goto LABEL_35;
                }
              }
              uint64_t v19 = (void *)(v16 + v20);
            }
LABEL_35:
            uint64_t v17 = *(void *)(v4 + 64);
          }
          else
          {
            uint64_t v22 = *v6;
            int v23 = v22 - 1;
            unsigned int v24 = (v22 - 1) & ((v15 >> 4) ^ (v15 >> 9));
            uint64_t v19 = (void *)(v16 + 8 * v24);
            uint64_t v25 = *v19;
            if (*v19 == -1)
            {
              unsigned int v26 = 0;
LABEL_44:
              if (v26) {
                uint64_t v19 = v26;
              }
              if (*v19 != v15) {
                uint64_t v19 = (void *)(v16 + 8 * v22);
              }
            }
            else
            {
              unsigned int v26 = 0;
              int v27 = 1;
              while (v25 != v15)
              {
                if (v26) {
                  BOOL v28 = 0;
                }
                else {
                  BOOL v28 = v25 == -2;
                }
                if (v28) {
                  unsigned int v26 = v19;
                }
                unsigned int v29 = v24 + v27++;
                unsigned int v24 = v29 & v23;
                uint64_t v19 = (void *)(v16 + 8 * (v29 & v23));
                uint64_t v25 = *v19;
                if (*v19 == -1) {
                  goto LABEL_44;
                }
              }
            }
          }
          if (v16 == v17) {
            uint64_t v30 = v5;
          }
          else {
            uint64_t v30 = v6;
          }
          if (v19 == (void *)(v16 + 8 * *v30)) {
            uint64_t result = sub_1CBAF10A8(a2, &v44, &v43);
          }
          ++v11;
        }
        while (v11 != v13);
      }
LABEL_69:
      ++v2;
    }
    while (v2 != v42);
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPreheader()
{
}

{
  while (1)
    ;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 32);
  do
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    if (v2) {
      BOOL v4 = v3 >= 0x1C;
    }
    else {
      BOOL v4 = 0;
    }
  }
  while (!v4 || v3 - 29 >= 0xB);
  uint64_t v6 = 0;
  uint64_t v7 = (unsigned int *)(a1 + 76);
  uint64_t v8 = (unsigned int *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9 == v10) {
    uint64_t v11 = (unsigned int *)(a1 + 76);
  }
  else {
    uint64_t v11 = (unsigned int *)(a1 + 72);
  }
  uint64_t v12 = *(void *)(a1 + 64);
LABEL_14:
  uint64_t result = *(void *)(v2 + 40);
  if (v12 == v10)
  {
    uint64_t v14 = *v7;
    uint64_t v15 = (void *)(v10 + 8 * v14);
    if (v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v14;
      while (*(void *)(v10 + v16) != result)
      {
        v16 += 8;
        if (v17 == v16) {
          goto LABEL_32;
        }
      }
      uint64_t v15 = (void *)(v10 + v16);
    }
LABEL_32:
    uint64_t v12 = v10;
  }
  else
  {
    int v18 = *v8 - 1;
    unsigned int v19 = v18 & ((result >> 4) ^ (result >> 9));
    uint64_t v15 = (void *)(v9 + 8 * v19);
    uint64_t v20 = *v15;
    if (*v15 == -1)
    {
      uint64_t v21 = 0;
LABEL_34:
      if (v21) {
        uint64_t v15 = v21;
      }
      if (*v15 != result) {
        uint64_t v15 = (void *)(v9 + 8 * *v11);
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != result)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          uint64_t v21 = v15;
        }
        unsigned int v24 = v19 + v22++;
        unsigned int v19 = v24 & v18;
        uint64_t v15 = (void *)(v9 + 8 * (v24 & v18));
        uint64_t v20 = *v15;
        if (*v15 == -1) {
          goto LABEL_34;
        }
      }
    }
    uint64_t v12 = v9;
  }
  if (v12 == v10) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v15 != (void *)(v12 + 8 * *v25))
  {
    uint64_t result = v6;
    goto LABEL_46;
  }
  if (v6 && v6 != result) {
    return 0;
  }
LABEL_46:
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    unsigned int v26 = *(unsigned __int8 *)(v2 + 16);
    if (v2) {
      BOOL v27 = v26 >= 0x1C;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27 && v26 - 29 < 0xB)
    {
      uint64_t v6 = result;
      goto LABEL_14;
    }
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(**(void **)(result + 32) + 8);
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
      BOOL v5 = v3 && v4 >= 0x1C;
      if (v5 && v4 - 29 < 0xB) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return result;
      }
    }
LABEL_12:
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v9 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    if (v8 == v9)
    {
      uint64_t v10 = *(unsigned int *)(result + 76);
      uint64_t v11 = (void *)(v8 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v10;
        while (*(void *)(v8 + v12) != v7)
        {
          v12 += 8;
          if (v13 == v12) {
            goto LABEL_30;
          }
        }
        uint64_t v11 = (void *)(v8 + v12);
      }
LABEL_30:
      uint64_t v9 = *(void *)(result + 64);
    }
    else
    {
      uint64_t v14 = *(unsigned int *)(result + 72);
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v11 = (void *)(v8 + 8 * v16);
      uint64_t v17 = *v11;
      if (*v11 == -1)
      {
        int v18 = 0;
LABEL_47:
        if (v18) {
          uint64_t v11 = v18;
        }
        if (*v11 != v7) {
          uint64_t v11 = (void *)(v8 + 8 * v14);
        }
      }
      else
      {
        int v18 = 0;
        int v19 = 1;
        while (v17 != v7)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            int v18 = v11;
          }
          unsigned int v21 = v16 + v19++;
          unsigned int v16 = v21 & v15;
          uint64_t v11 = (void *)(v8 + 8 * (v21 & v15));
          uint64_t v17 = *v11;
          if (*v11 == -1) {
            goto LABEL_47;
          }
        }
      }
    }
    if (v8 == v9) {
      int v22 = (unsigned int *)(result + 76);
    }
    else {
      int v22 = (unsigned int *)(result + 72);
    }
    if (v11 != (void *)(v8 + 8 * *v22))
    {
      unint64_t v23 = *(unsigned int *)(a2 + 8);
      if (v23 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v23) = v7;
      ++*(_DWORD *)(a2 + 8);
    }
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        break;
      }
      uint64_t v3 = *(void *)(v2 + 24);
      unsigned int v24 = *(unsigned __int8 *)(v3 + 16);
      if (v3) {
        BOOL v25 = v24 >= 0x1C;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25 && v24 - 29 < 0xB) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 16) = a1;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000001;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  sub_1CC08BDA8((uint64_t)&v7, v3, v3, v4, v4);
  while (v8)
  {
    uint64_t v5 = *((void *)v7 + v8 - 1);
    LODWORD(v8) = v8 - 1;
    sub_1CC08BDA8((uint64_t)&v7, *(void *)(v5 + 16), *(void *)(v5 + 16), *(void *)(v5 + 8), *(void *)(v5 + 8));
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v6 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v6) = v5;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v7 != v9) {
    free(v7);
  }
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = a1;
  *a2 = a2 + 2;
  a2[1] = 0x400000001;
  sub_1CC083B24(a1, (uint64_t)a2);
}

void sub_1CC083B24(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v7;
  uint64_t v6 = 0x400000000;
  sub_1CC08BDA8((uint64_t)&v5, *(void *)(a1 + 16), *(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(a1 + 8));
  while (v6)
  {
    uint64_t v3 = *((void *)v5 + v6 - 1);
    LODWORD(v6) = v6 - 1;
    sub_1CC08BDA8((uint64_t)&v5, *(void *)(v3 + 16), *(void *)(v3 + 16), *(void *)(v3 + 8), *(void *)(v3 + 8));
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a2 + 8 * v4) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  if (v5 != v7) {
    free(v5);
  }
}

void *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a2;
  int v4 = *(_DWORD *)(a3 + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = (void *)(*(void *)a3 + 16 * v6);
    uint64_t v8 = *result;
    if (*result == a2) {
      goto LABEL_16;
    }
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = result;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t result = (void *)(*(void *)a3 + 16 * v6);
      uint64_t v8 = *result;
      if (*result == a2) {
        goto LABEL_16;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = result;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t result = sub_1CC08BE34(a3, (uint64_t)&v14, &v14, v13);
  *uint64_t result = v14;
  result[1] = 0;
LABEL_16:
  result[1] = a1;
  if (a1) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBlockEntry();
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBlockEntry(uint64_t a1, uint64_t a2)
{
  int v5 = *(void **)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v23 = *(void **)(a1 + 32);
    uint64_t v24 = v5 - v23;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      abort();
    }
    uint64_t v26 = v4 - (void)v23;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        sub_1CB833614();
      }
      BOOL v28 = (char *)operator new(8 * v27);
    }
    else
    {
      BOOL v28 = 0;
    }
    unsigned int v29 = &v28[8 * v24];
    *(void *)unsigned int v29 = a2;
    unsigned int v6 = v29 + 8;
    if (v5 != v23)
    {
      do
      {
        uint64_t v30 = *--v5;
        *((void *)v29 - 1) = v30;
        v29 -= 8;
      }
      while (v5 != v23);
      int v5 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 32) = v29;
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = &v28[8 * v27];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = a2;
    unsigned int v6 = v5 + 1;
  }
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned int *)(a1 + 76);
  if (v8 != v7)
  {
    unsigned int v13 = *(_DWORD *)(a1 + 72);
    goto LABEL_15;
  }
  if (!v9)
  {
LABEL_11:
    unsigned int v13 = *(_DWORD *)(a1 + 72);
    if (v9 < v13)
    {
      *(_DWORD *)(a1 + 76) = v9 + 1;
      *(void *)(v8 + 8 * v9) = a2;
      return;
    }
LABEL_15:
    if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a1 + 80)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
      goto LABEL_17;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 56), v13);
    unsigned int v13 = *(_DWORD *)(a1 + 72);
    uint64_t v8 = *(void *)(a1 + 64);
LABEL_17:
    unsigned int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v16 = (void *)(v8 + 8 * v15);
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      int v18 = 0;
LABEL_29:
      if (v18) {
        int v22 = v18;
      }
      else {
        int v22 = v16;
      }
      if (*v22 != a2)
      {
        if (*v22 == -2) {
          --*(_DWORD *)(a1 + 80);
        }
        else {
          ++*(_DWORD *)(a1 + 76);
        }
        void *v22 = a2;
      }
    }
    else
    {
      int v18 = 0;
      int v19 = 1;
      while (v17 != a2)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          int v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        unsigned int v16 = (void *)(v8 + 8 * (v21 & v14));
        uint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_29;
        }
      }
    }
    return;
  }
  int v10 = 0;
  uint64_t v11 = 8 * v9;
  unsigned int v12 = *(void **)(a1 + 64);
  while (*v12 != a2)
  {
    if (*v12 == -2) {
      int v10 = v12;
    }
    ++v12;
    v11 -= 8;
    if (!v11)
    {
      if (!v10) {
        goto LABEL_11;
      }
      *int v10 = a2;
      --*(_DWORD *)(a1 + 80);
      return;
    }
  }
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addChildLoop(void *a1, void *a2)
{
  *a2 = a1;
  int v5 = (void *)a1[2];
  unint64_t v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      unsigned int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      unsigned int v12 = 0;
    }
    unsigned int v13 = &v12[8 * v8];
    *(void *)unsigned int v13 = a2;
    unsigned int v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      int v5 = (void *)a1[1];
    }
    a1[1] = v13;
    a1[2] = v6;
    a1[3] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = a2;
    unsigned int v6 = v5 + 1;
  }
  a1[2] = v6;
}

void *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(uint64_t a1, char *__dst)
{
  unsigned int v6 = *(void **)__dst;
  unint64_t v4 = __dst + 8;
  int v5 = v6;
  uint64_t v7 = *(char **)(a1 + 16);
  int64_t v8 = v7 - v4;
  if (v7 != v4) {
    memmove(__dst, v4, v7 - v4);
  }
  *(void *)(a1 + 16) = &__dst[v8];
  *int v5 = 0;
  return v5;
}

void *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeChildLoop(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v3 = *(char **)(a1 + 16);
  if (v4 != (void *)v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == (void *)v3)
      {
        unint64_t v4 = *(void **)(a1 + 16);
        break;
      }
    }
  }
  int v5 = (void *)*v4;
  int64_t v6 = v3 - (char *)(v4 + 1);
  if (v3 != (char *)(v4 + 1)) {
    memmove(v4, v4 + 1, v3 - (char *)(v4 + 1));
  }
  *(void *)(a1 + 16) = (char *)v4 + v6;
  *int v5 = 0;
  return v5;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::reverseBlock(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(result + 40);
  unint64_t v4 = v2 + 8 * a2;
  int v5 = (void *)(v3 - 8);
  BOOL v6 = v4 == v3 || v4 >= (unint64_t)v5;
  if (!v6)
  {
    unint64_t v7 = v2 + 8 * a2 + 8;
    do
    {
      uint64_t v8 = *(void *)(v7 - 8);
      *(void *)(v7 - 8) = *v5;
      *v5-- = v8;
      BOOL v6 = v7 >= (unint64_t)v5;
      v7 += 8;
    }
    while (!v6);
  }
  return result;
}

void llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::reserveBlocks(void *a1, unsigned int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (unsigned char *)a1[4];
  if (a2 > (unint64_t)((uint64_t)(a1[6] - (void)v3) >> 3))
  {
    int v5 = (unsigned char *)a1[5];
    BOOL v6 = (char *)operator new(8 * a2);
    unint64_t v7 = &v6[(v5 - v3) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v8 = v7;
    if (v5 != v3)
    {
      uint64_t v8 = &v6[(v5 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v3);
    }
    a1[4] = v8;
    a1[5] = v7;
    a1[6] = &v6[8 * v2];
    if (v3)
    {
      operator delete(v3);
    }
  }
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::moveToHeader(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 32);
  if (*v2 != a2)
  {
    int v3 = 0;
    do
    {
      int v4 = v3;
      uint64_t v5 = v2[v3++];
    }
    while (v5 != a2);
    v2[v4] = *v2;
    **(void **)(result + 32) = a2;
  }
  return result;
}

void *llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop(void *result, uint64_t a2)
{
  int v3 = result;
  uint64_t v5 = (char *)result[4];
  int v4 = (char *)result[5];
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = (char *)result[5];
        break;
      }
    }
  }
  int64_t v6 = v4 - (v5 + 8);
  if (v4 != v5 + 8) {
    uint64_t result = memmove(v5, v5 + 8, v4 - (v5 + 8));
  }
  v3[5] = &v5[v6];
  uint64_t v8 = v3[7];
  uint64_t v7 = v3[8];
  if (v7 == v8)
  {
    uint64_t v9 = *((unsigned int *)v3 + 19);
    uint64_t v10 = (void *)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v9;
      while (*(void *)(v7 + v11) != a2)
      {
        v11 += 8;
        if (v12 == v11) {
          goto LABEL_12;
        }
      }
      uint64_t v10 = (void *)(v7 + v11);
    }
LABEL_12:
    uint64_t v8 = v3[8];
  }
  else
  {
    uint64_t v14 = *((unsigned int *)v3 + 18);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = (void *)(v7 + 8 * v16);
    uint64_t v17 = *v10;
    if (*v10 == -1)
    {
      int v18 = 0;
LABEL_31:
      if (v18) {
        uint64_t v10 = v18;
      }
      if (*v10 != a2) {
        uint64_t v10 = (void *)(v7 + 8 * v14);
      }
    }
    else
    {
      int v18 = 0;
      int v19 = 1;
      while (v17 != a2)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          int v18 = v10;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v10 = (void *)(v7 + 8 * (v21 & v15));
        uint64_t v17 = *v10;
        if (*v10 == -1) {
          goto LABEL_31;
        }
      }
    }
  }
  BOOL v20 = v7 == v8;
  uint64_t v13 = 72;
  if (v20) {
    uint64_t v13 = 76;
  }
  if (v10 != (void *)(v7 + 8 * *(unsigned int *)((char *)v3 + v13)))
  {
    *uint64_t v10 = -2;
    ++*((_DWORD *)v3 + 20);
  }
  return result;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isAnnotatedParallel()
{
  return 0;
}

void llvm::Loop::isAnnotatedParallel(llvm::Loop *this)
{
}

double llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::LoopBase(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(void *)&double result = 8;
  *(void *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(void *)&double result = 8;
  *(void *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::LoopBase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(_DWORD *)(a1 + 80) = 0;
  int v4 = operator new(8uLL);
  *(void *)(a1 + 32) = v4;
  *v4++ = a2;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 72) = 0x100000008;
  *(void *)(a1 + 88) = a2;
  return a1;
}

{
  void *v4;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(_DWORD *)(a1 + 80) = 0;
  int v4 = operator new(8uLL);
  *(void *)(a1 + 32) = v4;
  *v4++ = a2;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 72) = 0x100000008;
  *(void *)(a1 + 88) = a2;
  return a1;
}

uint64_t llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v9 = *v2++;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase(v9);
    }
    while (v2 != v3);
    uint64_t v2 = *(uint64_t **)(a1 + 8);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  if (*(void *)(a1 + 64) == v4) {
    goto LABEL_3;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  if (v10 < 0x21 || 4 * (*(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 80)) >= v10)
  {
    memset(*(void **)(a1 + 64), 255, 8 * v10);
LABEL_3:
    *(_DWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    goto LABEL_4;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 56));
LABEL_4:
  *(void *)a1 = 0;
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5 != *(void **)(a1 + 56)) {
    free(v5);
  }
  int64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase()
{
}

{
  while (1)
    ;
}

_DWORD *llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::releaseMemory(_DWORD *result)
{
  uint64_t v1 = result;
  int v2 = result[2];
  if (v2 || result[3])
  {
    uint64_t v11 = result[4];
    if (v11 <= 4 * v2 || v11 < 0x41)
    {
      if (v11)
      {
        uint64_t v12 = *(void **)result;
        uint64_t v13 = 16 * v11;
        do
        {
          *uint64_t v12 = -4096;
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      double result = sub_1CBA7B248(result);
    }
  }
  uint64_t v3 = *((void *)v1 + 3);
  if (v3 != *((void *)v1 + 4)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase();
  }
  *((void *)v1 + 4) = v3;
  uint64_t v4 = v1[30];
  if (v4)
  {
    uint64_t v14 = (uint64_t *)*((void *)v1 + 14);
    uint64_t v15 = 16 * v4;
    do
    {
      uint64_t v16 = *v14;
      v14 += 2;
      double result = (_DWORD *)MEMORY[0x1D25D9CD0](v16, 8);
      v15 -= 16;
    }
    while (v15);
  }
  v1[30] = 0;
  uint64_t v5 = v1[18];
  if (v5)
  {
    *((void *)v1 + 16) = 0;
    int64_t v6 = (void *)*((void *)v1 + 8);
    uint64_t v7 = *v6 + 4096;
    *((void *)v1 + 6) = *v6;
    *((void *)v1 + 7) = v7;
    if (v5 != 1)
    {
      uint64_t v8 = v6 + 1;
      uint64_t v9 = 8 * v5 - 8;
      do
      {
        uint64_t v10 = *v8++;
        double result = (_DWORD *)MEMORY[0x1D25D9CD0](v10, 8);
        v9 -= 8;
      }
      while (v9);
    }
    v1[18] = 1;
  }
  return result;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::LoopInfoBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_1CC056A04(a1 + 48, a2 + 48);
  *(void *)(a2 + 32) = *(void *)(a2 + 24);
  return a1;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::operator=(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v4 = *(void **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v5;
  int v6 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v6;
  if (v4 != *(void **)(a1 + 32)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase();
  }
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  sub_1CD49A7EC(a1 + 48, a2 + 48);
  *(void *)(a2 + 32) = *(void *)(a2 + 24);
  return a1;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::begin(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::end(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::rbegin(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::rend(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::empty(uint64_t a1)
{
  return *(void *)(a1 + 24) == *(void *)(a1 + 32);
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 != v4)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 - 8);
      v3 -= 8;
      unint64_t __src = v8;
      v8[0] = v5;
      uint64_t v7 = 0x400000001;
      sub_1CC083B24(v5, (uint64_t)&__src);
      sub_1CB935BDC((unsigned int *)a2, __src, (unsigned char *)__src + 8 * v7);
      if (__src != v8) {
        free(__src);
      }
    }
    while (v3 != v4);
    if (v9 != v11) {
      free(v9);
    }
  }
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInReverseSiblingPreorder(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  uint64_t v8 = v10;
  uint64_t v9 = 0x400000000;
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 != v4)
  {
    do
    {
      if (!HIDWORD(v9)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)uint64_t v8 = *v3;
      unsigned int v5 = v9 + 1;
      do
      {
        uint64_t v6 = *((void *)v8 + v5 - 1);
        LODWORD(v9) = v5 - 1;
        sub_1CBAACC38((uint64_t)&v8, *(char **)(v6 + 8), *(char **)(v6 + 16));
        unint64_t v7 = *(unsigned int *)(a2 + 8);
        if (v7 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v7) = v6;
        ++*(_DWORD *)(a2 + 8);
        unsigned int v5 = v9;
      }
      while (v9);
      ++v3;
    }
    while (v3 != v4);
    if (v8 != v10) {
      free(v8);
    }
  }
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopFor(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)(*a1 + 16 * v5);
    if (v6 == a2) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a2) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::operator[](uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)(*a1 + 16 * v5);
    if (v6 == a2) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a2) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopDepth(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v2 - 1;
  uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = *(void *)(*a1 + 16 * v5);
  if (v6 != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a2) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  uint64_t v9 = *(void **)(v3 + 16 * v5 + 8);
  if (!v9) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t v9 = (void *)*v9;
    uint64_t result = (result + 1);
  }
  while (v9);
  return result;
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::isLoopHeader(uint64_t *a1, uint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    uint64_t v3 = *a1;
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = *(void *)(*a1 + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      uint64_t v9 = *(void *)(v3 + 16 * v5 + 8);
      if (v9) {
        return **(void **)(v9 + 32) == a2;
      }
    }
    else
    {
      int v7 = 1;
      while (v6 != -4096)
      {
        int v8 = v5 + v7++;
        uint64_t v5 = v8 & v4;
        uint64_t v6 = *(void *)(v3 + 16 * v5);
        if (v6 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getTopLevelLoops(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getTopLevelLoopsVector(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeLoop(uint64_t a1, char *__dst)
{
  uint64_t v6 = *(void *)__dst;
  unsigned int v4 = __dst + 8;
  uint64_t v5 = v6;
  int v7 = *(char **)(a1 + 32);
  int64_t v8 = v7 - v4;
  if (v7 != v4) {
    memmove(__dst, v4, v7 - v4);
  }
  *(void *)(a1 + 32) = &__dst[v8];
  return v5;
}

int32x2_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::changeLoopFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  if (a3)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (v4)
    {
      int v5 = v4 - 1;
      unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      int v7 = (void *)(*(void *)a1 + 16 * v6);
      uint64_t v8 = *v7;
      if (*v7 == a2)
      {
LABEL_17:
        v7[1] = a3;
        return result;
      }
      uint64_t v9 = 0;
      int v10 = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == -8192;
        }
        if (v11) {
          uint64_t v9 = v7;
        }
        unsigned int v12 = v6 + v10++;
        unsigned int v6 = v12 & v5;
        int v7 = (void *)(*(void *)a1 + 16 * (v12 & v5));
        uint64_t v8 = *v7;
        if (*v7 == a2) {
          goto LABEL_17;
        }
      }
      if (v9) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = v7;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v7 = sub_1CC08BE34(a1, (uint64_t)&v16, &v16, v13);
    *int v7 = v16;
    v7[1] = 0;
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  if (sub_1CB834D78((uint64_t *)a1, &v16, &v17))
  {
    *uint64_t v17 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::changeTopLevelLoop(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 24);
  int v4 = *(void **)(result + 32);
  if (v3 != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(void **)(result + 32);
        break;
      }
    }
  }
  *uint64_t v3 = a3;
  return result;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::addTopLevelLoop(void *a1, uint64_t a2)
{
  int v5 = (void *)a1[4];
  unint64_t v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = (void *)a1[3];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      unsigned int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      unsigned int v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    unsigned int v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      int v5 = (void *)a1[3];
    }
    a1[3] = v13;
    a1[4] = v6;
    a1[5] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = a2;
    unsigned int v6 = v5 + 1;
  }
  a1[4] = v6;
}

int32x2_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::removeBlock(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2 = *a1;
  uint64_t v3 = a1[2].u32[0];
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v5 = (uint64_t *)(*(void *)&v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(*(void *)&v2 + 16 * v4);
      if (v6 == a2)
      {
        int v5 = (uint64_t *)(*(void *)&v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  int v5 = (uint64_t *)(*(void *)&v2 + 16 * v3);
LABEL_8:
  if (v5 != (uint64_t *)(*(void *)&v2 + 16 * v3))
  {
    if (v5[1]) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop();
    }
    *int v5 = -8192;
    int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    a1[1] = result;
  }
  return result;
}

BOOL llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::isNotAlreadyContainedIn(void *a1, void *a2)
{
  if (!a1) {
    return 1;
  }
  int32x2_t v2 = a1;
  do
  {
    BOOL result = v2 != a2;
    if (v2 == a2) {
      break;
    }
    int32x2_t v2 = (void *)*v2;
  }
  while (v2);
  return result;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze(uint64_t *a1, uint64_t a2)
{
  v63[16] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = *(uint64_t **)(a2 + 48);
  sub_1CC0863D8((uint64_t *)&v26, (uint64_t)&v48);
  uint64_t v3 = v44;
  uint64_t v39 = v44;
  uint64_t v4 = (uint64_t *)__src;
  if (__src == v48)
  {
    uint64_t v40 = v44;
    int v5 = (uint64_t *)__src;
  }
  else
  {
    unsigned int v24 = v50;
    uint64_t v3 = malloc_type_malloc(8 * v50, 0x4065EBACuLL);
    if (!v3)
    {
      if (v24) {
        goto LABEL_74;
      }
      uint64_t v3 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v3) {
        goto LABEL_74;
      }
    }
    uint64_t v40 = v3;
    int v5 = v48;
    uint64_t v4 = (uint64_t *)__src;
  }
  unsigned int v6 = v51;
  unsigned int v41 = v50;
  if (v4 == v5) {
    unsigned int v7 = v51;
  }
  else {
    unsigned int v7 = v50;
  }
  if (v7)
  {
    memmove(v3, v4, 8 * v7);
    unsigned int v6 = v51;
  }
  unsigned int v8 = v54;
  unsigned int v42 = v6;
  int v43 = v52;
  unsigned int v45 = v47;
  uint64_t v46 = 0x800000000;
  if (v54)
  {
    if (v54 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v47, v53, 16 * v54);
    LODWORD(v46) = v8;
  }
  unint64_t v9 = v35;
  uint64_t v30 = v35;
  uint64_t v10 = v57;
  if (v57 != v56)
  {
    unsigned int v25 = v58;
    unint64_t v9 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
    if (v9 || !v25 && (unint64_t v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      uint64_t v31 = v9;
      unint64_t v11 = v56;
      uint64_t v10 = v57;
      goto LABEL_13;
    }
LABEL_74:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v31 = v35;
  unint64_t v11 = v57;
LABEL_13:
  unsigned int v32 = v58;
  unsigned int v12 = v59;
  if (v10 == v11) {
    unsigned int v13 = v59;
  }
  else {
    unsigned int v13 = v58;
  }
  if (v13)
  {
    memmove(v9, v10, 8 * v13);
    unsigned int v12 = v59;
  }
  unsigned int v33 = v12;
  int v34 = v60;
  int v36 = v38;
  uint64_t v37 = 0x800000000;
  uint64_t v14 = v62;
  if (v62)
  {
    if (v62 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v38, v61, 16 * v62);
    LODWORD(v37) = v14;
  }
  while (1)
  {
    if (v46 != v14) {
      goto LABEL_31;
    }
    if (!v14) {
      break;
    }
    uint64_t v15 = v36;
    uint64_t v16 = v45;
    while (*v16 == *v15 && v16[1] == v15[1])
    {
      v16 += 2;
      v15 += 2;
      if (v16 == (void *)((char *)v45 + 16 * v14)) {
        goto LABEL_46;
      }
    }
LABEL_31:
    uint64_t v18 = **((void **)v45 + 2 * v46 - 2);
    unint64_t v27 = v29;
    uint64_t v28 = 0x400000000;
    for (uint64_t i = *(void *)(v18 + 8); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v20 = *(void *)(i + 24);
      unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
      if (v20) {
        BOOL v22 = v21 >= 0x1C;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22 && v21 - 29 <= 0xA) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
    }
    if (v27 != v29) {
      free(v27);
    }
    LODWORD(v46) = v46 - 1;
    if (v46) {
      sub_1CC08C4B4((llvm::SmallPtrSetImplBase *)&v39);
    }
    uint64_t v14 = v37;
  }
LABEL_46:
  if (v36 != v38) {
    free(v36);
  }
  if (v31 != v30) {
    free(v31);
  }
  if (v45 != v47) {
    free(v45);
  }
  if (v40 != v39) {
    free(v40);
  }
  if (v61 != v63) {
    free(v61);
  }
  if (v57 != v56) {
    free(v57);
  }
  if (v53 != &v55) {
    free(v53);
  }
  if (__src != v48) {
    free(__src);
  }
  unsigned int v48 = a1;
  sub_1CC086534(&v48, *v26);
}

void sub_1CC0863D8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v19[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  unsigned int v12 = v16;
  unsigned int v13 = v16;
  int v15 = 0;
  uint64_t v14 = 0x100000008;
  uint64_t v17 = v19;
  v16[0] = v3;
  uint64_t v4 = *(void *)(v3 + 24);
  v19[0] = v3;
  v19[1] = v4;
  uint64_t v18 = 0x800000001;
  sub_1CC08C4B4((llvm::SmallPtrSetImplBase *)&v12);
  v9[0] = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 0;
  memset(v8, 0, sizeof(v8));
  int v5 = (char *)v8 + 8;
  unsigned int v6 = (char *)v8 + 8;
  uint64_t v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1CC08C034((uint64_t)&v12, (uint64_t)&v5, a2);
  if (v9[1] != (char *)v10 + 8) {
    free(v9[1]);
  }
  if (v6 != v5) {
    free(v6);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v13 != v12) {
    free(v13);
  }
}

void sub_1CC086534(uint64_t **a1, uint64_t a2)
{
  v105[24] = *MEMORY[0x1E4F143B8];
  uint64_t v71 = a2;
  sub_1CC08CA3C(&v71, (uint64_t)&v90);
  uint64_t v3 = v86;
  long long v81 = v86;
  uint64_t v4 = __src;
  if (__src == v90)
  {
    long long v82 = v86;
    int v5 = __src;
  }
  else
  {
    unsigned int v66 = v92;
    uint64_t v3 = malloc_type_malloc(8 * v92, 0x4065EBACuLL);
    if (!v3)
    {
      if (v66) {
        goto LABEL_126;
      }
      uint64_t v3 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v3) {
        goto LABEL_126;
      }
    }
    long long v82 = v3;
    int v5 = v90;
    uint64_t v4 = __src;
  }
  unsigned int v6 = v93;
  unsigned int v83 = v92;
  if (v4 == v5) {
    unsigned int v7 = v93;
  }
  else {
    unsigned int v7 = v92;
  }
  if (v7)
  {
    memmove(v3, v4, 8 * v7);
    unsigned int v6 = v93;
  }
  unsigned int v8 = v96;
  unsigned int v84 = v6;
  int v85 = v94;
  unint64_t v9 = v89;
  int v87 = v89;
  uint64_t v88 = 0x800000000;
  if (v96)
  {
    if (v96 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v89, v95, 24 * v96);
    LODWORD(v88) = v8;
  }
  uint64_t v10 = v77;
  int v72 = v77;
  uint64_t v11 = v99;
  if (v99 != v98)
  {
    unsigned int v67 = v100;
    uint64_t v10 = malloc_type_malloc(8 * v100, 0x4065EBACuLL);
    if (v10 || !v67 && (uint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      int v73 = v10;
      unsigned int v12 = v98;
      uint64_t v11 = v99;
      goto LABEL_13;
    }
LABEL_126:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v73 = v77;
  unsigned int v12 = v99;
LABEL_13:
  unsigned int v74 = v100;
  unsigned int v13 = v101;
  if (v11 == v12) {
    unsigned int v14 = v101;
  }
  else {
    unsigned int v14 = v100;
  }
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    unsigned int v13 = v101;
  }
  unsigned int v75 = v13;
  int v76 = v102;
  int v15 = v80;
  uint64_t v78 = v80;
  uint64_t v79 = 0x800000000;
  uint64_t v16 = v104;
  if (v104)
  {
    if (v104 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v80, v103, 24 * v104);
    LODWORD(v79) = v16;
  }
  while (1)
  {
    if (v88 != v16) {
      goto LABEL_22;
    }
    if (!v16) {
      break;
    }
    long long v68 = v78;
    long long v69 = v87;
    while (*(void *)v69 == *(void *)v68 && v69[4] == v68[4])
    {
      v69 += 6;
      v68 += 6;
      if (v69 == (_DWORD *)((char *)v87 + 24 * v16)) {
        goto LABEL_104;
      }
    }
LABEL_22:
    uint64_t v17 = *a1;
    int v18 = *((_DWORD *)*a1 + 4);
    if (v18)
    {
      uint64_t v19 = *((void *)v87 + 3 * v88 - 3);
      uint64_t v20 = *v17;
      unsigned int v21 = v18 - 1;
      uint64_t v22 = v21 & ((v19 >> 4) ^ (v19 >> 9));
      uint64_t v23 = *(void *)(*v17 + 16 * v22);
      if (v23 == v19)
      {
LABEL_27:
        uint64_t v26 = *(void *)(v20 + 16 * v22 + 8);
        if (v26)
        {
          if (**(void **)(v26 + 32) != v19) {
            goto LABEL_82;
          }
          unint64_t v27 = *(void **)v26;
          if (*(void *)v26)
          {
            unsigned int v29 = (void *)v27[2];
            unint64_t v28 = v27[3];
            if ((unint64_t)v29 >= v28)
            {
              int v34 = (void *)v27[1];
              uint64_t v35 = v29 - v34;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61) {
                goto LABEL_96;
              }
              uint64_t v37 = v15;
              uint64_t v38 = v9;
              uint64_t v39 = v28 - (void)v34;
              if (v39 >> 2 > v36) {
                unint64_t v36 = v39 >> 2;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v36;
              }
              if (v40)
              {
                if (v40 >> 61) {
                  goto LABEL_97;
                }
                unsigned int v41 = (char *)operator new(8 * v40);
              }
              else
              {
                unsigned int v41 = 0;
              }
              unsigned int v42 = &v41[8 * v35];
              *(void *)unsigned int v42 = v26;
              uint64_t v30 = v42 + 8;
              if (v29 != v34)
              {
                do
                {
                  uint64_t v43 = *--v29;
                  *((void *)v42 - 1) = v43;
                  v42 -= 8;
                }
                while (v29 != v34);
                unsigned int v29 = (void *)v27[1];
              }
              v27[1] = v42;
              v27[2] = v30;
              void v27[3] = &v41[8 * v40];
              if (v29) {
                operator delete(v29);
              }
              unint64_t v9 = v38;
              int v15 = v37;
            }
            else
            {
              *unsigned int v29 = v26;
              uint64_t v30 = v29 + 1;
            }
            v27[2] = v30;
          }
          else
          {
            unsigned int v32 = (void *)v17[4];
            unint64_t v31 = v17[5];
            if ((unint64_t)v32 >= v31)
            {
              uint64_t v56 = (void *)v17[3];
              uint64_t v57 = v32 - v56;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
LABEL_96:
              }
                abort();
              unsigned int v59 = v15;
              int v60 = v9;
              uint64_t v61 = v31 - (void)v56;
              if (v61 >> 2 > v58) {
                unint64_t v58 = v61 >> 2;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v58;
              }
              if (v62)
              {
                if (v62 >> 61) {
LABEL_97:
                }
                  sub_1CB833614();
                int v65 = (char *)operator new(8 * v62);
              }
              else
              {
                int v65 = 0;
              }
              uint64_t v63 = &v65[8 * v57];
              *(void *)uint64_t v63 = v26;
              unsigned int v33 = v63 + 8;
              if (v32 != v56)
              {
                do
                {
                  uint64_t v64 = *--v32;
                  *((void *)v63 - 1) = v64;
                  v63 -= 8;
                }
                while (v32 != v56);
                unsigned int v32 = (void *)v17[3];
              }
              v17[3] = (uint64_t)v63;
              v17[4] = (uint64_t)v33;
              v17[5] = (uint64_t)&v65[8 * v62];
              if (v32) {
                operator delete(v32);
              }
              unint64_t v9 = v60;
              int v15 = v59;
            }
            else
            {
              *unsigned int v32 = v26;
              unsigned int v33 = v32 + 1;
            }
            v17[4] = (uint64_t)v33;
          }
          uint64_t v44 = *(void *)(v26 + 32);
          uint64_t v45 = *(void *)(v26 + 40);
          uint64_t v46 = (void *)(v45 - 8);
          BOOL v47 = v44 + 8 == v45 || v44 + 8 >= (unint64_t)v46;
          if (!v47)
          {
            unint64_t v48 = v44 + 16;
            do
            {
              uint64_t v49 = *(void *)(v48 - 8);
              *(void *)(v48 - 8) = *v46;
              *v46-- = v49;
              BOOL v47 = v48 >= (unint64_t)v46;
              v48 += 8;
            }
            while (!v47);
          }
          unint64_t v50 = *(void *)(v26 + 8);
          uint64_t v51 = *(void *)(v26 + 16);
          int v52 = (void *)(v51 - 8);
          if (v50 != v51 && v50 < (unint64_t)v52)
          {
            unint64_t v54 = v50 + 8;
            do
            {
              uint64_t v55 = *(void *)(v54 - 8);
              *(void *)(v54 - 8) = *v52;
              *v52-- = v55;
              BOOL v47 = v54 >= (unint64_t)v52;
              v54 += 8;
            }
            while (!v47);
          }
          if (*(void *)v26) {
LABEL_82:
          }
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBlockEntry();
        }
      }
      else
      {
        int v24 = 1;
        while (v23 != -4096)
        {
          int v25 = v22 + v24++;
          uint64_t v22 = v25 & v21;
          uint64_t v23 = *(void *)(v20 + 16 * v22);
          if (v23 == v19) {
            goto LABEL_27;
          }
        }
      }
    }
    LODWORD(v88) = v88 - 1;
    if (v88) {
      sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v81);
    }
    uint64_t v16 = v79;
  }
LABEL_104:
  if (v78 != v15) {
    free(v78);
  }
  if (v73 != v72) {
    free(v73);
  }
  if (v87 != v9) {
    free(v87);
  }
  if (v82 != v81) {
    free(v82);
  }
  if (v103 != v105) {
    free(v103);
  }
  if (v99 != v98) {
    free(v99);
  }
  if (v95 != &v97) {
    free(v95);
  }
  if (__src != v90) {
    free(__src);
  }
}

uint64_t llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::print(uint64_t result)
{
  if (*(void *)(result + 32) != *(void *)(result + 24)) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::print();
  }
  return result;
}

void llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::destroy()
{
}

void *sub_1CC086C1C(void *a1)
{
  *a1 = &unk_1F2605290;
  int32x2_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

BOOL llvm::Loop::isLoopInvariant(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1;
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    if (v4 == v5)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 76);
      unsigned int v7 = (void *)(v4 + 8 * v6);
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 8 * v6;
        while (*(void *)(v4 + v8) != v3)
        {
          v8 += 8;
          if (v9 == v8) {
            goto LABEL_8;
          }
        }
        unsigned int v7 = (void *)(v4 + v8);
      }
LABEL_8:
      uint64_t v5 = *(void *)(a1 + 64);
    }
    else
    {
      uint64_t v12 = *(unsigned int *)(a1 + 72);
      int v13 = v12 - 1;
      unsigned int v14 = (v12 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      unsigned int v7 = (void *)(v4 + 8 * v14);
      uint64_t v15 = *v7;
      if (*v7 == -1)
      {
        uint64_t v16 = 0;
LABEL_26:
        if (v16) {
          unsigned int v7 = v16;
        }
        if (*v7 != v3) {
          unsigned int v7 = (void *)(v4 + 8 * v12);
        }
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = 1;
        while (v15 != v3)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v15 == -2;
          }
          if (v18) {
            uint64_t v16 = v7;
          }
          unsigned int v19 = v14 + v17++;
          unsigned int v14 = v19 & v13;
          unsigned int v7 = (void *)(v4 + 8 * (v19 & v13));
          uint64_t v15 = *v7;
          if (*v7 == -1) {
            goto LABEL_26;
          }
        }
      }
    }
    BOOL v18 = v4 == v5;
    uint64_t v10 = 72;
    if (v18) {
      uint64_t v10 = 76;
    }
    return v7 == (void *)(v4 + 8 * *(unsigned int *)(a1 + v10));
  }
  return v2;
}

uint64_t llvm::Loop::hasLoopInvariantOperands(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
  {
    uint64_t v4 = *(void *)(a2 - 8);
    uint64_t v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    uint64_t v4 = a2 - 32 * v3;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v5 = v4 + 32 * v3;
  while (1)
  {
    if (*(void *)v4 && *(unsigned __int8 *)(*(void *)v4 + 16) >= 0x1Cu)
    {
      uint64_t v7 = *(void *)(*(void *)v4 + 40);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
      if (v8 == v9)
      {
        uint64_t v10 = *(unsigned int *)(a1 + 76);
        uint64_t v11 = (void *)(v8 + 8 * v10);
        if (v10)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * v10;
          while (*(void *)(v8 + v12) != v7)
          {
            v12 += 8;
            if (v13 == v12) {
              goto LABEL_15;
            }
          }
          uint64_t v11 = (void *)(v8 + v12);
        }
LABEL_15:
        uint64_t v9 = *(void *)(a1 + 64);
      }
      else
      {
        uint64_t v15 = *(unsigned int *)(a1 + 72);
        int v16 = v15 - 1;
        unsigned int v17 = (v15 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        uint64_t v11 = (void *)(v8 + 8 * v17);
        uint64_t v18 = *v11;
        if (*v11 == -1)
        {
          unsigned int v19 = 0;
LABEL_37:
          if (v19) {
            uint64_t v11 = v19;
          }
          if (*v11 != v7) {
            uint64_t v11 = (void *)(v8 + 8 * v15);
          }
        }
        else
        {
          unsigned int v19 = 0;
          int v20 = 1;
          while (v18 != v7)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v18 == -2;
            }
            if (v21) {
              unsigned int v19 = v11;
            }
            unsigned int v22 = v17 + v20++;
            unsigned int v17 = v22 & v16;
            uint64_t v11 = (void *)(v8 + 8 * (v22 & v16));
            uint64_t v18 = *v11;
            if (*v11 == -1) {
              goto LABEL_37;
            }
          }
        }
      }
      unsigned int v14 = (unsigned int *)(v8 == v9 ? a1 + 76 : a1 + 72);
      if (v11 != (void *)(v8 + 8 * *v14)) {
        return 0;
      }
    }
    v4 += 32;
    if (v4 == v5) {
      return 1;
    }
  }
}

uint64_t llvm::Loop::makeLoopInvariant(uint64_t a1, uint64_t a2, unsigned char *a3, llvm::BasicBlock **a4, uint64_t *a5)
{
  uint64_t result = 1;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu) {
    return result;
  }
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12 == v13)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 76);
    uint64_t v15 = (void *)(v12 + 8 * v14);
    if (v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v14;
      while (*(void *)(v12 + v16) != v11)
      {
        v16 += 8;
        if (v17 == v16) {
          goto LABEL_21;
        }
      }
      uint64_t v15 = (void *)(v12 + v16);
    }
LABEL_21:
    uint64_t v13 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v18 = *(unsigned int *)(a1 + 72);
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v15 = (void *)(v12 + 8 * v20);
    uint64_t v21 = *v15;
    if (*v15 == -1)
    {
      unsigned int v22 = 0;
LABEL_38:
      if (v22) {
        uint64_t v15 = v22;
      }
      if (*v15 != v11) {
        uint64_t v15 = (void *)(v12 + 8 * v18);
      }
    }
    else
    {
      unsigned int v22 = 0;
      while (v21 != v11)
      {
        if (v22) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v21 == -2;
        }
        if (v23) {
          unsigned int v22 = v15;
        }
        int v24 = v20 + result;
        LODWORD(result) = result + 1;
        unsigned int v20 = v24 & v19;
        uint64_t v15 = (void *)(v12 + 8 * (v24 & v19));
        uint64_t v21 = *v15;
        if (*v15 == -1) {
          goto LABEL_38;
        }
      }
    }
  }
  BOOL v23 = v12 == v13;
  uint64_t v25 = 72;
  if (v23) {
    uint64_t v25 = 76;
  }
  if (v15 == (void *)(v12 + 8 * *(unsigned int *)(a1 + v25))) {
    return 1;
  }
  uint64_t result = llvm::isSafeToSpeculativelyExecute(a2, 0, 0, 0);
  if (!result) {
    return result;
  }
  int v26 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v27 = (v26 - 33);
  if (v27 <= 0x37)
  {
    if (((1 << (v26 - 33)) & 0x8000000000041) != 0)
    {
      uint64_t v42 = *(void *)(a2 + 64);
      if (!v42 || (*(unsigned char *)(v42 + 20) & 4) == 0 && (*(unsigned char *)(v42 + 17) & 0x10) == 0)
      {
        __int32 v44 = 7;
        if (sub_1CC5CB59C(a2, &v44, 1uLL))
        {
          uint64_t v43 = *(void *)(a2 - 32);
          if (!v43
            || *(unsigned char *)(v43 + 16)
            || *(void *)(v43 + 24) != *(void *)(a2 + 72)
            || *(_DWORD *)(v43 + 36) != 7)
          {
            return 0;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0)
        {
          uint64_t result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44);
          if (!result) {
            return result;
          }
        }
      }
    }
    else
    {
      if (((1 << (v26 - 33)) & 0x808001C8000010) != 0) {
        return 0;
      }
      if (v27 != 28) {
        goto LABEL_30;
      }
      if ((*(_WORD *)(a2 + 18) & 0x301) != 0) {
        return 0;
      }
    }
    int v26 = *(unsigned __int8 *)(a2 + 16);
  }
LABEL_30:
  unsigned int v28 = v26 - 38;
  if (v28 < 0x39 && ((0x100060000000001uLL >> v28) & 1) != 0) {
    return 0;
  }
  if (!a4) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor();
  }
  int v29 = *(_DWORD *)(a2 + 20);
  if ((v29 & 0x40000000) != 0)
  {
    uint64_t v31 = *(void *)(a2 - 8);
    uint64_t v30 = v29 & 0x7FFFFFF;
    if (!v30) {
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v30 = v29 & 0x7FFFFFF;
    uint64_t v31 = a2 - 32 * v30;
    if (!v30)
    {
LABEL_53:
      llvm::Instruction::moveBefore((llvm::Instruction *)a2, (llvm::Instruction *)a4);
      if (a5)
      {
        int v34 = *(_DWORD *)(*a5 + 40);
        if (v34)
        {
          uint64_t v35 = *(void *)(*a5 + 24);
          unsigned int v36 = v34 - 1;
          uint64_t v37 = (v34 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v38 = *(void *)(v35 + 16 * v37);
          if (v38 == a2)
          {
LABEL_59:
            uint64_t v41 = *(void *)(v35 + 16 * v37 + 8);
            if (v41) {
              llvm::MemorySSAUpdater::moveToPlace(a5, v41, a4[5], 2);
            }
          }
          else
          {
            int v39 = 1;
            while (v38 != -4096)
            {
              int v40 = v37 + v39++;
              uint64_t v37 = v40 & v36;
              uint64_t v38 = *(void *)(v35 + 16 * v37);
              if (v38 == a2) {
                goto LABEL_59;
              }
            }
          }
        }
      }
      llvm::Instruction::dropUnknownNonDebugMetadata(a2, 0, 0);
      uint64_t result = 1;
      *a3 = 1;
      return result;
    }
  }
  uint64_t v32 = 32 * v30;
  while (1)
  {
    if (*(void *)v31 && *(unsigned __int8 *)(*(void *)v31 + 16) >= 0x1Cu)
    {
      uint64_t result = llvm::Loop::makeLoopInvariant(a1);
      if (!result) {
        return result;
      }
    }
    v31 += 32;
    v32 -= 32;
    if (!v32) {
      goto LABEL_53;
    }
  }
}

uint64_t llvm::Loop::getIncomingAndBackEdge(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = **(void **)(a1 + 32);
  *a2 = 0;
  *a3 = 0;
  do
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      break;
    }
    uint64_t v4 = *(void *)(v3 + 24);
    unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
    BOOL v6 = v4 && v5 >= 0x1C;
  }
  while (!v6 || v5 - 29 >= 0xB);
  uint64_t v8 = v3;
  do
  {
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8)
    {
      uint64_t result = 0;
      *a3 = *(void *)(*(void *)(v3 + 24) + 40);
      return result;
    }
    uint64_t v9 = *(void *)(v8 + 24);
    unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9) {
      BOOL v11 = v10 >= 0x1C;
    }
    else {
      BOOL v11 = 0;
    }
  }
  while (!v11 || v10 - 29 > 0xA);
  *a3 = *(void *)(*(void *)(v3 + 24) + 40);
  uint64_t v13 = v8;
  while (1)
  {
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(v13 + 24);
    unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
    if (v14) {
      BOOL v16 = v15 >= 0x1C;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16 && v15 - 29 <= 0xA)
    {
      uint64_t result = 0;
      *a2 = *(void *)(*(void *)(v8 + 24) + 40);
      return result;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(v8 + 24) + 40);
  *a2 = v19;
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  if (v20 == v21)
  {
    uint64_t v22 = *(unsigned int *)(a1 + 76);
    BOOL v23 = (void *)(v20 + 8 * v22);
    if (v22)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 8 * v22;
      while (*(void *)(v20 + v24) != v19)
      {
        v24 += 8;
        if (v25 == v24) {
          goto LABEL_48;
        }
      }
      BOOL v23 = (void *)(v20 + v24);
    }
LABEL_48:
    uint64_t v34 = *(void *)(a1 + 64);
  }
  else
  {
    uint64_t v26 = *(unsigned int *)(a1 + 72);
    int v27 = v26 - 1;
    unsigned int v28 = (v26 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    BOOL v23 = (void *)(v20 + 8 * v28);
    uint64_t v29 = *v23;
    if (*v23 == -1)
    {
      uint64_t v30 = 0;
LABEL_50:
      if (v30) {
        BOOL v23 = v30;
      }
      if (*v23 != v19) {
        BOOL v23 = (void *)(v20 + 8 * v26);
      }
    }
    else
    {
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != v19)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == -2;
        }
        if (v32) {
          uint64_t v30 = v23;
        }
        unsigned int v33 = v28 + v31++;
        unsigned int v28 = v33 & v27;
        BOOL v23 = (void *)(v20 + 8 * (v33 & v27));
        uint64_t v29 = *v23;
        if (*v23 == -1) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v34 = *(void *)(a1 + 56);
  }
  uint64_t v35 = (unsigned int *)(a1 + 76);
  unsigned int v36 = (unsigned int *)(a1 + 72);
  uint64_t v37 = 72;
  if (v20 == v34) {
    uint64_t v37 = 76;
  }
  uint64_t v38 = (void *)(v20 + 8 * *(unsigned int *)(a1 + v37));
  uint64_t v39 = *a3;
  if (v23 == v38)
  {
    if (v20 == v34)
    {
      uint64_t v44 = *v35;
      uint64_t v45 = (void *)(v20 + 8 * v44);
      if (v44)
      {
        uint64_t v46 = 0;
        uint64_t v47 = 8 * v44;
        while (*(void *)(v20 + v46) != v39)
        {
          v46 += 8;
          if (v47 == v46) {
            goto LABEL_100;
          }
        }
        uint64_t v45 = (void *)(v20 + v46);
      }
LABEL_100:
      uint64_t v21 = *(void *)(a1 + 64);
    }
    else
    {
      int v55 = *v36 - 1;
      unsigned int v56 = v55 & ((v39 >> 4) ^ (v39 >> 9));
      uint64_t v45 = (void *)(v20 + 8 * v56);
      uint64_t v57 = *v45;
      if (*v45 == -1)
      {
        unint64_t v58 = 0;
LABEL_116:
        if (v58) {
          uint64_t v45 = v58;
        }
        if (*v45 != v39)
        {
          if (v20 == v21) {
            int v65 = v35;
          }
          else {
            int v65 = v36;
          }
          uint64_t v45 = (void *)(v20 + 8 * *v65);
        }
      }
      else
      {
        unint64_t v58 = 0;
        int v59 = 1;
        while (v57 != v39)
        {
          if (v58) {
            BOOL v60 = 0;
          }
          else {
            BOOL v60 = v57 == -2;
          }
          if (v60) {
            unint64_t v58 = v45;
          }
          unsigned int v61 = v56 + v59++;
          unsigned int v56 = v61 & v55;
          uint64_t v45 = (void *)(v20 + 8 * (v61 & v55));
          uint64_t v57 = *v45;
          if (*v45 == -1) {
            goto LABEL_116;
          }
        }
      }
    }
    if (v20 == v21) {
      uint64_t v63 = v35;
    }
    else {
      uint64_t v63 = v36;
    }
    if (v45 != (void *)(v20 + 8 * *v63)) {
      return 1;
    }
  }
  else
  {
    if (v20 == v34)
    {
      uint64_t v40 = *v35;
      uint64_t v41 = (void *)(v20 + 8 * v40);
      if (v40)
      {
        uint64_t v42 = 0;
        uint64_t v43 = 8 * v40;
        while (*(void *)(v20 + v42) != v39)
        {
          v42 += 8;
          if (v43 == v42) {
            goto LABEL_93;
          }
        }
        uint64_t v41 = (void *)(v20 + v42);
      }
LABEL_93:
      uint64_t v21 = *(void *)(a1 + 64);
    }
    else
    {
      int v48 = *v36 - 1;
      unsigned int v49 = v48 & ((v39 >> 4) ^ (v39 >> 9));
      uint64_t v41 = (void *)(v20 + 8 * v49);
      uint64_t v50 = *v41;
      if (*v41 == -1)
      {
        uint64_t v51 = 0;
LABEL_108:
        if (v51) {
          uint64_t v41 = v51;
        }
        if (*v41 != v39)
        {
          if (v20 == v21) {
            uint64_t v64 = (unsigned int *)(a1 + 76);
          }
          else {
            uint64_t v64 = (unsigned int *)(a1 + 72);
          }
          uint64_t v41 = (void *)(v20 + 8 * *v64);
        }
      }
      else
      {
        uint64_t v51 = 0;
        int v52 = 1;
        while (v50 != v39)
        {
          if (v51) {
            BOOL v53 = 0;
          }
          else {
            BOOL v53 = v50 == -2;
          }
          if (v53) {
            uint64_t v51 = v41;
          }
          unsigned int v54 = v49 + v52++;
          unsigned int v49 = v54 & v48;
          uint64_t v41 = (void *)(v20 + 8 * (v54 & v48));
          uint64_t v50 = *v41;
          if (*v41 == -1) {
            goto LABEL_108;
          }
        }
      }
    }
    if (v20 == v21) {
      unint64_t v62 = (unsigned int *)(a1 + 76);
    }
    else {
      unint64_t v62 = (unsigned int *)(a1 + 72);
    }
    if (v41 == (void *)(v20 + 8 * *v62))
    {
      *a2 = v39;
      *a3 = v19;
      return 1;
    }
  }
  return 0;
}

uint64_t llvm::Loop::getCanonicalInductionVariable(llvm::Loop *this)
{
  uint64_t v1 = **((void **)this + 4);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = 0;
  if (llvm::Loop::getIncomingAndBackEdge((uint64_t)this, &v27, &v26))
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v4 = v3 ? v3 - 24 : 0;
    if (*(unsigned char *)(v4 + 16) == 83)
    {
      uint64_t v6 = v26;
      uint64_t v5 = v27;
      uint64_t v2 = v3 - 24;
      while (1)
      {
        uint64_t v7 = sub_1CBF73380(v2, v5);
        if (v7 && *(unsigned char *)(v7 + 16) == 16)
        {
          uint64_t v8 = *(unsigned int *)(v7 + 32);
          if (v8 > 0x40)
          {
            int v9 = 0;
            int64_t v10 = (unint64_t)(v8 + 63) >> 6;
            do
            {
              BOOL v11 = v10-- < 1;
              if (v11) {
                break;
              }
              unint64_t v12 = *(void *)(*(void *)(v7 + 24) + 8 * v10);
              v9 += __clz(v12);
            }
            while (!v12);
            int v13 = v8 | 0xFFFFFFC0;
            if ((v8 & 0x3F) == 0) {
              int v13 = 0;
            }
            if (v9 + v13 == v8)
            {
LABEL_18:
              uint64_t v14 = sub_1CBF73380(v2, v6);
              if (v14 && *(unsigned char *)(v14 + 16) == 41)
              {
                int v15 = *(_DWORD *)(v14 + 20);
                BOOL v16 = (v15 & 0x40000000) != 0 ? *(void **)(v14 - 8) : (void *)(v14 - 32 * (v15 & 0x7FFFFFF));
                if (*v16 == v2)
                {
                  uint64_t v17 = v16[4];
                  if (v17 && *(unsigned char *)(v17 + 16) == 16)
                  {
                    uint64_t v19 = *(unsigned int *)(v17 + 32);
                    if (v19 > 0x40)
                    {
                      int v20 = 0;
                      int64_t v21 = (unint64_t)(v19 + 63) >> 6;
                      do
                      {
                        BOOL v11 = v21-- < 1;
                        if (v11) {
                          break;
                        }
                        unint64_t v22 = *(void *)(*(void *)(v17 + 24) + 8 * v21);
                        v20 += __clz(v22);
                      }
                      while (!v22);
                      int v23 = v19 | 0xFFFFFFC0;
                      if ((v19 & 0x3F) == 0) {
                        int v23 = 0;
                      }
                      if (v20 + v23 == v19 - 1) {
                        return v2;
                      }
                    }
                    else if (*(void *)(v17 + 24) == 1)
                    {
                      return v2;
                    }
                  }
                }
              }
            }
          }
          else if (!*(void *)(v7 + 24))
          {
            goto LABEL_18;
          }
        }
        uint64_t v3 = *(void *)(v3 + 8);
        uint64_t v2 = v3 - 24;
        if (v3) {
          uint64_t v24 = v3 - 24;
        }
        else {
          uint64_t v24 = 0;
        }
        if (*(unsigned char *)(v24 + 16) != 83) {
          return 0;
        }
      }
    }
  }
  return v2;
}

void llvm::Loop::LoopBounds::getCanonicalPredicate(llvm::Loop::LoopBounds *this)
{
}

uint64_t llvm::Loop::LoopBounds::getDirection(llvm::Loop::LoopBounds *this)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  unint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *(void *)(v2 + 104);
  unsigned int v5 = *(_DWORD *)(v2 + 120);
  if (v5)
  {
    unsigned int v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v5 - 1);
    uint64_t v7 = v4 + 48 * v6;
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8 == v3) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      unsigned int v10 = v6 + v9++;
      unsigned int v6 = v10 & (v5 - 1);
      uint64_t v7 = v4 + 48 * v6;
      uint64_t v8 = *(void *)(v7 + 24);
      if (v8 == v3) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = v4 + 48 * v5;
LABEL_8:
  if (v7 == v4 + 48 * v5 || (uint64_t SCEVIter = *(void *)(v7 + 40)) == 0) {
    uint64_t SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v2, v3);
  }
  if (SCEVIter) {
    BOOL v12 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return 2;
  }
  uint64_t v13 = *(void *)(SCEVIter + 40);
  if (v13 == 2)
  {
    uint64_t v14 = *(const llvm::SCEV **)(*(void *)(SCEVIter + 32) + 8);
  }
  else
  {
    BOOL v16 = (llvm::ScalarEvolution *)*((void *)this + 5);
    uint64_t v17 = SCEVIter;
    uint64_t v18 = *(void *)(SCEVIter + 32);
    int64_t v21 = v23;
    uint64_t v22 = 0x300000000;
    size_t v19 = 8 * v13 - 8;
    if (v19 >= 0x19) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v20 = 0;
    if (v13 != 1)
    {
      memcpy(v21, (const void *)(v18 + 8), v19);
      int v20 = v22;
    }
    LODWORD(v22) = v20 + (v19 >> 3);
    uint64_t v14 = (const llvm::SCEV *)sub_1CD478318(v16, (uint64_t)&v21, *(const llvm::Loop **)(v17 + 48), 0);
    if (v21 != v23) {
      free(v21);
    }
  }
  if (!v14) {
    return 2;
  }
  if (llvm::ScalarEvolution::isKnownPositive(*((llvm::ScalarEvolution **)this + 5), v14)) {
    return 0;
  }
  if (llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 5), v14)) {
    return 1;
  }
  else {
    return 2;
  }
}

void llvm::Loop::getBounds(llvm::Loop *this, llvm::ScalarEvolution *a2)
{
}

void llvm::Loop::getInductionVariable(llvm::Loop *this, llvm::ScalarEvolution *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::Loop::isLoopSimplifyForm(this);
}

void llvm::Loop::isLoopSimplifyForm(llvm::Loop *this)
{
}

void llvm::Loop::getInductionDescriptor(llvm::Loop *this, llvm::ScalarEvolution *a2, llvm::InductionDescriptor *a3)
{
}

BOOL llvm::Loop::isAuxiliaryInductionVariable(llvm::Loop *this, llvm::PHINode *a2, llvm::ScalarEvolution *a3)
{
  _OWORD v49[2] = *MEMORY[0x1E4F143B8];
  if (*((void *)a2 + 5) != **((void **)this + 4)) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v6)
  {
    uint64_t v7 = (unsigned int *)((char *)this + 76);
    uint64_t v8 = (unsigned int *)((char *)this + 72);
    do
    {
      uint64_t v9 = *(void *)(v6 + 24);
      if (v9 && *(unsigned __int8 *)(v9 + 16) >= 0x1Cu)
      {
        uint64_t v11 = *(void *)(v9 + 40);
        uint64_t v13 = *((void *)this + 7);
        uint64_t v12 = *((void *)this + 8);
        if (v12 == v13)
        {
          uint64_t v14 = *v7;
          int v15 = (void *)(v12 + 8 * v14);
          if (v14)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 8 * v14;
            while (*(void *)(v12 + v16) != v11)
            {
              v16 += 8;
              if (v17 == v16) {
                goto LABEL_29;
              }
            }
            int v15 = (void *)(v12 + v16);
          }
LABEL_29:
          uint64_t v13 = *((void *)this + 8);
        }
        else
        {
          uint64_t v18 = *v8;
          int v19 = v18 - 1;
          unsigned int v20 = (v18 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          int v15 = (void *)(v12 + 8 * v20);
          uint64_t v21 = *v15;
          if (*v15 == -1)
          {
            uint64_t v22 = 0;
LABEL_37:
            if (v22) {
              int v15 = v22;
            }
            if (*v15 != v11) {
              int v15 = (void *)(v12 + 8 * v18);
            }
          }
          else
          {
            uint64_t v22 = 0;
            int v23 = 1;
            while (v21 != v11)
            {
              if (v22) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v21 == -2;
              }
              if (v24) {
                uint64_t v22 = v15;
              }
              unsigned int v25 = v20 + v23++;
              unsigned int v20 = v25 & v19;
              int v15 = (void *)(v12 + 8 * (v25 & v19));
              uint64_t v21 = *v15;
              if (*v15 == -1) {
                goto LABEL_37;
              }
            }
          }
        }
        uint64_t v26 = v12 == v13 ? (llvm::Loop *)((char *)this + 76) : (llvm::Loop *)((char *)this + 72);
        if (v15 == (void *)(v12 + 8 * *(unsigned int *)v26)) {
          return 0;
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 6;
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = v49;
  uint64_t v48 = 0x200000000;
  int isInductionPHI = llvm::InductionDescriptor::isInductionPHI((unint64_t)a2, (uint64_t)this, (uint64_t)a3, (uint64_t)&v40, 0);
  BOOL result = 0;
  if (isInductionPHI) {
    BOOL result = v45
  }
          && (*(unsigned __int8 *)(v45 + 16) | 2) == 0x2B
          && llvm::ScalarEvolution::getLoopDisposition(a3, v44, this) == 1;
  if (v47 != v49)
  {
    BOOL v39 = result;
    free(v47);
    BOOL result = v39;
  }
  if (v42 && v42 != (int32x2_t ****)-8192 && v42 != (int32x2_t ****)-4096)
  {
    unint64_t v28 = v40 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v40 & 0xFFFFFFFFFFFFFFF8) = v41;
    if (v41)
    {
      *uint64_t v41 = *v41 & 7 | v28;
    }
    else
    {
      uint64_t v29 = v42;
      uint64_t v30 = ***v42;
      unint64_t v31 = (unint64_t)v30[303];
      if (v31 <= v28)
      {
        uint64_t v32 = v30[305].u32[0];
        if (v31 + 16 * v32 > v28)
        {
          unsigned int v33 = v32 - 1;
          LODWORD(v34) = v33 & ((v42 >> 4) ^ (v42 >> 9));
          uint64_t v35 = (int32x2_t *****)(v31 + 16 * v34);
          unsigned int v36 = *v35;
          if (v42 == *v35)
          {
LABEL_59:
            unsigned int *v35 = (int32x2_t ****)-8192;
            v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v29 = v42;
          }
          else
          {
            int v37 = 1;
            while (v36 != (int32x2_t ****)-4096)
            {
              int v38 = v34 + v37++;
              uint64_t v34 = v38 & v33;
              unsigned int v36 = *(int32x2_t *****)(v31 + 16 * v34);
              if (v42 == v36)
              {
                uint64_t v35 = (int32x2_t *****)(v31 + 16 * v34);
                goto LABEL_59;
              }
            }
          }
          *((unsigned char *)v29 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

void llvm::Loop::getLoopGuardBranch(llvm::Loop *this)
{
}

void llvm::Loop::isCanonical(llvm::Loop *this, llvm::ScalarEvolution *a2)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v2 = 6;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v11;
  uint64_t v10 = 0x200000000;
  llvm::Loop::getInductionVariable(this, a2);
}

uint64_t llvm::Loop::isSafeToClone(llvm::Loop *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *((void *)this + 5);
  if (v2 == v1) {
    return 1;
  }
  while (2)
  {
    uint64_t result = 0;
    uint64_t v4 = (void *)(*(void *)v1 + 40);
    if (*v4) {
      uint64_t v5 = *v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB) {
      uint64_t v5 = 0;
    }
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 != 32 && v6 != 39)
    {
      for (uint64_t i = *(void **)(*(void *)v1 + 48); i != v4; uint64_t i = (void *)i[1])
      {
        if (i) {
          uint64_t v8 = i - 3;
        }
        else {
          uint64_t v8 = 0;
        }
        unsigned int v9 = *((unsigned __int8 *)v8 + 16) - 33;
        BOOL v10 = v9 > 0x33;
        uint64_t v11 = (1 << v9) & 0x8000000000041;
        if (!v10 && v11 != 0)
        {
          uint64_t v13 = i[5];
          if (v13)
          {
            if (*(unsigned char *)(v13 + 15)) {
              return 0;
            }
          }
          if (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(i - 3), 24)) {
            return 0;
          }
        }
      }
      v1 += 8;
      if (v1 != v2) {
        continue;
      }
      return 1;
    }
    break;
  }
  return result;
}

void llvm::Loop::getLoopID(llvm::Loop *this)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v3;
  uint64_t v2 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches();
}

void llvm::Loop::setLoopID(llvm::Loop *this, llvm::MDNode *a2)
{
}

void llvm::Loop::setLoopAlreadyUnrolled(llvm::Loop *this)
{
  void v3[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)****((void ****)this + 4);
  v3[0] = llvm::MDString::get(v2, "llvm.loop.unroll.disable", 0x18uLL);
  llvm::MDTuple::getImpl((uint64_t)v2, v3, 1, 0, 1);
  llvm::Loop::getLoopID(this);
}

llvm::MDNode *llvm::makePostTransformationMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  uint64_t v8 = a1;
  v34[4] = *MEMORY[0x1E4F143B8];
  v34[0] = 0;
  int v33 = 1;
  if (a2 && (uint64_t v10 = *(unsigned int *)(a2 + 8), v10 >= 2))
  {
    uint64_t v12 = a3 + 16 * a4;
    unsigned int v13 = 1;
    for (uint64_t i = 1; i != v10; ++i)
    {
      int v15 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
      if (*v15 - 4 > 0x1E
        || ((uint64_t v16 = *(void *)&v15[-8 * *((unsigned int *)v15 + 2)], !*(unsigned char *)v16) ? (v17 = a4 == 0) : (v17 = 1), v17))
      {
LABEL_14:
        if (v13 >= 4) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v34[v13] = v15;
        unsigned int v13 = ++v33;
      }
      else
      {
        uint64_t v18 = *(size_t **)(v16 + 8);
        size_t v21 = *v18;
        unsigned int v20 = v18 + 3;
        size_t v19 = v21;
        uint64_t v22 = a3;
        while (1)
        {
          size_t v23 = *(void *)(v22 + 8);
          if (v19 >= v23 && (!v23 || !memcmp(v20, *(const void **)v22, v23))) {
            break;
          }
          v22 += 16;
          if (v22 == v12) {
            goto LABEL_14;
          }
        }
      }
    }
    uint64_t v8 = a1;
    uint64_t v6 = a6;
    uint64_t v7 = a5;
  }
  else
  {
    unsigned int v13 = 1;
  }
  if (((8 * v6) >> 3) + (unint64_t)v13 > 4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6)
  {
    BOOL v24 = &v34[v13];
    uint64_t v25 = 8 * v6;
    do
    {
      uint64_t v26 = *v7++;
      *v24++ = v26;
      v25 -= 8;
    }
    while (v25);
  }
  Impl = llvm::MDTuple::getImpl(v8, v34, v13 + v6, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  return Impl;
}

void llvm::Loop::setLoopMustProgress(llvm::Loop *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  llvm::Loop::getLoopID(this);
}

void llvm::Loop::getStartLoc(llvm::Loop *this)
{
}

void llvm::Loop::getLocRange(llvm::Loop *this)
{
}

void llvm::LoopInfo::LoopInfo(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
}

{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 1;
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
}

BOOL llvm::LoopInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = (void **)a3;
  v18[1] = (void **)&llvm::LoopAnalysis::Key;
  uint64_t v4 = *(void *)(a3 + 48);
  uint64_t v3 = *(void *)(a3 + 56);
  if (v3 == v4)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 68);
    uint64_t v6 = (void **)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      while (*(_UNKNOWN **)(v3 + v7) != &llvm::LoopAnalysis::Key)
      {
        v7 += 8;
        if (8 * v5 == v7) {
          goto LABEL_6;
        }
      }
      uint64_t v6 = (void **)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a3 + 64);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((&llvm::LoopAnalysis::Key >> 4) ^ (&llvm::LoopAnalysis::Key >> 9));
    uint64_t v6 = (void **)(v3 + 8 * v12);
    unsigned int v13 = *v6;
    if (*v6 == (void *)-1)
    {
      uint64_t v14 = 0;
LABEL_27:
      if (v14) {
        uint64_t v6 = v14;
      }
      if (*v6 != &llvm::LoopAnalysis::Key)
      {
        LODWORD(v5) = *(_DWORD *)(a3 + 68);
        uint64_t v6 = (void **)(v3 + 8 * v10);
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != &llvm::LoopAnalysis::Key)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (void *)-2;
        }
        if (v16) {
          uint64_t v14 = v6;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v6 = (void **)(v3 + 8 * (v17 & v11));
        unsigned int v13 = *v6;
        if (*v6 == (void *)-1) {
          goto LABEL_27;
        }
      }
    }
    LODWORD(v5) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v3 == v4) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a3 + 64);
  }
  BOOL v19 = v6 != (void **)(v3 + 8 * v8);
  return !sub_1CBF75724(v18) && !sub_1CBF7593C((uint64_t)v18) && !sub_1CBF75B60((uint64_t)v18);
}

void llvm::LoopInfo::erase(int32x2_t *this, llvm::Loop *a2)
{
  v126[24] = *MEMORY[0x1E4F143B8];
  if (!*(void *)a2)
  {
    uint64_t v4 = (uint64_t *)*((void *)a2 + 4);
    uint64_t v5 = (uint64_t *)*((void *)a2 + 5);
    if (v5 != v4)
    {
      __int32 v6 = this[2].i32[0];
      __int32 v7 = v6 - 1;
      do
      {
        if (v6)
        {
          uint64_t v8 = *v4;
          int32x2_t v9 = *this;
          LODWORD(v10) = ((*v4 >> 4) ^ (*v4 >> 9)) & v7;
          int v11 = (uint64_t *)(*(void *)this + 16 * v10);
          uint64_t v12 = *v11;
          if (*v4 == *v11)
          {
            uint64_t v15 = ((*v4 >> 4) ^ (*v4 >> 9)) & v7;
LABEL_21:
            unsigned int v17 = *(llvm::Loop **)(*(void *)&v9 + 16 * v15 + 8);
          }
          else
          {
            int v13 = 1;
            uint64_t v14 = *v11;
            LODWORD(v15) = ((*v4 >> 4) ^ (*v4 >> 9)) & v7;
            while (v14 != -4096)
            {
              int v16 = v15 + v13++;
              uint64_t v15 = v16 & v7;
              uint64_t v14 = *(void *)(*(void *)&v9 + 16 * v15);
              if (v8 == v14) {
                goto LABEL_21;
              }
            }
            unsigned int v17 = 0;
          }
          if (v17 == a2)
          {
            if (v8 != v12)
            {
              int v18 = 1;
              do
              {
                if (v12 == -4096) {
                  goto LABEL_18;
                }
                int v19 = v10 + v18++;
                uint64_t v10 = v19 & v7;
                uint64_t v12 = *(void *)(*(void *)&v9 + 16 * v10);
              }
              while (v8 != v12);
              int v11 = (uint64_t *)(*(void *)&v9 + 16 * v10);
            }
            *int v11 = -8192;
            this[1] = vadd_s32(this[1], (int32x2_t)0x1FFFFFFFFLL);
          }
        }
LABEL_18:
        ++v4;
      }
      while (v4 != v5);
    }
    uint64_t v20 = 0;
    int32x2_t v21 = this[3];
    do
    {
      uint64_t v22 = *(llvm::Loop **)(*(void *)&v21 + v20);
      v20 += 8;
    }
    while (v22 != a2);
    size_t v23 = (unsigned char *)(v20 + *(void *)&v21);
    BOOL v24 = (char *)(v20 + *(void *)&v21 - 8);
    uint64_t v25 = (unsigned char *)this[4];
    int64_t v26 = v25 - v23;
    if (v25 != v23) {
      memmove(v24, v23, v25 - v23);
    }
    for (this[4] = (int32x2_t)&v24[v26]; ; this[4] = (int32x2_t)v96)
    {
      uint64_t v27 = *((void *)a2 + 2);
      if (*((void *)a2 + 1) == v27) {
        break;
      }
      int v94 = *(void **)(v27 - 8);
      *((void *)a2 + 2) = v27 - 8;
      void *v94 = 0;
      uint64_t v123 = (uint64_t)v94;
      int v95 = (void *)this[4];
      if ((unint64_t)v95 >= *(void *)&this[5])
      {
        unsigned int v96 = sub_1CBC13470((void **)&this[3], &v123);
      }
      else
      {
        void *v95 = v94;
        unsigned int v96 = v95 + 1;
      }
    }
    goto LABEL_28;
  }
  long long v108 = a2;
  long long v109 = this;
  uint64_t v28 = sub_1CBFCBAB0((uint64_t)v110, (uint64_t)a2);
  char v115 = 0;
  v113[0] = 0;
  v113[1] = 0;
  int v114 = 0;
  if (((*((void *)v108 + 5) - *((void *)v108 + 4)) & 0x7FFFFFFF8) != 0)
  {
    v116[0] = v28;
    v116[1] = v109;
    sub_1CC08ABB0((uint64_t)v116, (uint64_t)&v123);
    uint64_t v29 = 0;
    int v119 = v116;
    unint64_t v120 = v122;
    for (i = 0x800000000; ; uint64_t v29 = i)
    {
      uint64_t v30 = v124;
      if (v125 == v29)
      {
        if (!v29)
        {
LABEL_59:
          if (v120 != v122)
          {
            free(v120);
            uint64_t v30 = v124;
          }
          if (v30 != v126) {
            free(v30);
          }
          if (v115)
          {
            BOOL v105 = (uint64_t *)__p;
            uint64_t v106 = v112;
            if (__p != v112)
            {
              do
              {
                uint64_t v123 = *v105;
                int v119 = 0;
                int v107 = 0;
                if (sub_1CB834D78((uint64_t *)v109, &v123, &v119)) {
                  int v107 = (void *)v119[1];
                }
                if (sub_1CC08B0A0((uint64_t)&v108, *v105, v107) != v107) {
                  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::changeLoopFor();
                }
                ++v105;
              }
              while (v105 != v106);
            }
          }
          break;
        }
        unsigned int v101 = (char *)v124 + 24 * v29;
        int v102 = v120;
        int v103 = (char *)v124;
        while (*(void *)v103 == *(void *)v102 && *((_DWORD *)v103 + 4) == v102[4])
        {
          v103 += 24;
          v102 += 6;
          if (v103 == v101) {
            goto LABEL_59;
          }
        }
      }
      uint64_t v31 = *((void *)v124 + 3 * v125 - 3);
      __int32 v32 = v109[2].i32[0];
      unsigned int v33 = v31 >> 4;
      if (v32)
      {
        uint64_t v34 = (uint64_t)*v109;
        unsigned __int32 v35 = v32 - 1;
        uint64_t v36 = (v33 ^ (v31 >> 9)) & (v32 - 1);
        uint64_t v37 = *(void *)(*(void *)v109 + 16 * v36);
        if (v31 == v37)
        {
LABEL_37:
          uint64_t v40 = *(void **)(v34 + 16 * v36 + 8);
          goto LABEL_39;
        }
        int v38 = 1;
        while (v37 != -4096)
        {
          int v39 = v36 + v38++;
          uint64_t v36 = v39 & v35;
          uint64_t v37 = *(void *)(v34 + 16 * v36);
          if (v31 == v37) {
            goto LABEL_37;
          }
        }
      }
      uint64_t v40 = 0;
LABEL_39:
      uint64_t v41 = sub_1CC08B0A0((uint64_t)&v108, v31, v40);
      if (v41 == v40) {
        goto LABEL_57;
      }
      uint64_t v42 = v41;
      uint64_t v117 = v31;
      if (v41)
      {
        __int32 v43 = v109[2].i32[0];
        if (v43)
        {
          __int32 v44 = v43 - 1;
          unsigned int v45 = (v43 - 1) & (v33 ^ (v31 >> 9));
          uint64_t v46 = (void *)(*(void *)v109 + 16 * v45);
          uint64_t v47 = *v46;
          if (*v46 != v31)
          {
            uint64_t v48 = 0;
            int v49 = 1;
            while (v47 != -4096)
            {
              if (v48) {
                BOOL v50 = 0;
              }
              else {
                BOOL v50 = v47 == -8192;
              }
              if (v50) {
                uint64_t v48 = v46;
              }
              unsigned int v51 = v45 + v49++;
              unsigned int v45 = v51 & v44;
              uint64_t v46 = (void *)(*(void *)v109 + 16 * (v51 & v44));
              uint64_t v47 = *v46;
              if (*v46 == v31) {
                goto LABEL_56;
              }
            }
            if (v48) {
              int v52 = v48;
            }
            else {
              int v52 = v46;
            }
LABEL_55:
            uint64_t v46 = sub_1CC08BE34((uint64_t)v109, (uint64_t)&v117, &v117, v52);
            *uint64_t v46 = v117;
            v46[1] = 0;
          }
LABEL_56:
          v46[1] = v42;
          goto LABEL_57;
        }
        int v52 = 0;
        goto LABEL_55;
      }
      long long v118 = 0;
      unsigned int v100 = v109;
      if (sub_1CB834D78((uint64_t *)v109, &v117, &v118))
      {
        *long long v118 = -8192;
        v100[1] = vadd_s32(v100[1], (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_57:
      sub_1CC08ACF4((uint64_t)&v123);
    }
  }
  BOOL v53 = v108;
  unsigned int v54 = (uint64_t *)*((void *)v108 + 4);
  int v55 = (uint64_t *)*((void *)v108 + 5);
  if (v55 == v54) {
    goto LABEL_82;
  }
  while (1)
  {
    uint64_t v56 = *v54;
    uint64_t v123 = 0;
    __int32 v57 = v109[2].i32[0];
    if (!v57) {
      goto LABEL_71;
    }
    uint64_t v58 = (uint64_t)*v109;
    unsigned __int32 v59 = v57 - 1;
    uint64_t v60 = (v57 - 1) & ((v56 >> 4) ^ (v56 >> 9));
    uint64_t v61 = *(void *)(*(void *)v109 + 16 * v60);
    if (v56 != v61) {
      break;
    }
LABEL_70:
    uint64_t v64 = *(llvm::Loop **)(v58 + 16 * v60 + 8);
LABEL_72:
    uint64_t v123 = (uint64_t)v64;
    int v65 = v108;
    if (v64 == v108)
    {
LABEL_73:
      while (1)
      {
        uint64_t v64 = *(llvm::Loop **)v64;
        if (v64 == v108) {
          break;
        }
        uint64_t v123 = (uint64_t)v64;
      }
      uint64_t v64 = (llvm::Loop *)sub_1CC08B608(v113, &v123)[1];
      uint64_t v123 = (uint64_t)v64;
      int v65 = v108;
    }
    else
    {
      unsigned int v66 = v64;
      while (v66)
      {
        unsigned int v66 = *(llvm::Loop **)v66;
        if (v66 == v108) {
          goto LABEL_73;
        }
      }
    }
    if (*(llvm::Loop **)v65 != v64) {
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop();
    }
    if (++v54 == v55)
    {
      BOOL v53 = v108;
LABEL_82:
      uint64_t v69 = *((void *)v53 + 2);
      unsigned int v67 = (void *)((char *)v53 + 16);
      uint64_t v68 = v69;
      if (*(v67 - 1) != v69)
      {
        do
        {
          int v119 = 0;
          uint64_t v79 = *(void **)(v68 - 8);
          uint64_t v78 = (void **)(v68 - 8);
          int v119 = v79;
          long long v80 = *v78;
          *unsigned int v67 = v78;
          *long long v80 = 0;
          long long v81 = (void *)sub_1CC08B608(v113, &v119)[1];
          if (v81)
          {
            long long v82 = v119;
            *int v119 = v81;
            unsigned int v84 = (void *)v81[2];
            unint64_t v83 = v81[3];
            if ((unint64_t)v84 < v83)
            {
              *unsigned int v84 = v82;
              unsigned int v92 = v84 + 1;
            }
            else
            {
              int v85 = (void *)v81[1];
              uint64_t v86 = v84 - v85;
              unint64_t v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 61) {
                abort();
              }
              uint64_t v88 = v83 - (void)v85;
              if (v88 >> 2 > v87) {
                unint64_t v87 = v88 >> 2;
              }
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v87;
              }
              if (v89)
              {
                if (v89 >> 61) {
                  sub_1CB833614();
                }
                uint64_t v90 = (char *)operator new(8 * v89);
              }
              else
              {
                uint64_t v90 = 0;
              }
              long long v91 = &v90[8 * v86];
              *(void *)long long v91 = v82;
              unsigned int v92 = v91 + 8;
              if (v84 != v85)
              {
                do
                {
                  uint64_t v93 = *--v84;
                  *((void *)v91 - 1) = v93;
                  v91 -= 8;
                }
                while (v84 != v85);
                unsigned int v84 = (void *)v81[1];
              }
              v81[1] = v91;
              v81[2] = v92;
              v81[3] = &v90[8 * v89];
              if (v84) {
                operator delete(v84);
              }
            }
            v81[2] = v92;
          }
          else
          {
            uint64_t v97 = (uint64_t *)v109;
            uint64_t v123 = (uint64_t)v119;
            unsigned int v98 = (void *)v109[4];
            if ((unint64_t)v98 >= *(void *)&v109[5])
            {
              unsigned int v99 = sub_1CBC13470((void **)&v109[3], &v123);
            }
            else
            {
              *unsigned int v98 = v119;
              unsigned int v99 = v98 + 1;
            }
            v97[4] = (uint64_t)v99;
          }
          unsigned int v67 = (void *)((char *)v108 + 16);
          uint64_t v68 = *((void *)v108 + 2);
        }
        while (*((void *)v108 + 1) != v68);
      }
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)a2;
      uint64_t v72 = *(void *)(*(void *)a2 + 8);
      do
      {
        int v73 = *(llvm::Loop **)(v72 + v70);
        v70 += 8;
      }
      while (v73 != a2);
      unsigned int v74 = (unsigned char *)(v70 + v72);
      unsigned int v75 = (char *)(v70 + v72 - 8);
      int v76 = *(unsigned char **)(v71 + 16);
      int64_t v77 = v76 - v74;
      if (v76 != v74) {
        memmove(v75, v74, v76 - v74);
      }
      *(void *)(v71 + 16) = &v75[v77];
      *(void *)a2 = 0;
      MEMORY[0x1D25D9CD0](v113[0], 8);
      if (__p)
      {
        uint64_t v112 = (uint64_t *)__p;
        operator delete(__p);
      }
      MEMORY[0x1D25D9CD0](v110[1], 8);
LABEL_28:
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::~LoopBase();
    }
  }
  int v62 = 1;
  while (v61 != -4096)
  {
    int v63 = v60 + v62++;
    uint64_t v60 = v63 & v59;
    uint64_t v61 = *(void *)(v58 + 16 * v60);
    if (v56 == v61) {
      goto LABEL_70;
    }
  }
LABEL_71:
  uint64_t v64 = 0;
  goto LABEL_72;
}

BOOL llvm::LoopInfo::wouldBeOutOfLoopUseRequiringLCSSA(llvm::LoopInfo *this, const llvm::Value *a2, const llvm::BasicBlock *a3)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 12) {
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 16) < 0x1Cu) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 4);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v6 = *(void *)this;
  unsigned int v7 = v3 - 1;
  uint64_t v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
  uint64_t v9 = *(void *)(*(void *)this + 16 * v8);
  if (v5 != v9)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v8 + v10++;
      uint64_t v8 = v11 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * v8);
      if (v5 == v9) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  uint64_t v12 = *(void *)(v6 + 16 * v8 + 8);
  if (!v12) {
    return 0;
  }
  uint64_t v14 = *(void *)(v12 + 56);
  uint64_t v13 = *(void *)(v12 + 64);
  if (v13 == v14)
  {
    uint64_t v15 = *(unsigned int *)(v12 + 76);
    BucketFor = (const void **)(v13 + 8 * v15);
    if (v15)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v15;
      while (*(const llvm::BasicBlock **)(v13 + v17) != a3)
      {
        v17 += 8;
        if (v18 == v17) {
          goto LABEL_14;
        }
      }
      BucketFor = (const void **)(v13 + v17);
    }
LABEL_14:
    uint64_t v14 = *(void *)(v12 + 64);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)(v12 + 56), a3);
    if (*BucketFor != a3) {
      BucketFor = (const void **)(v13 + 8 * *(unsigned int *)(v12 + 72));
    }
  }
  uint64_t v19 = 72;
  if (v13 == v14) {
    uint64_t v19 = 76;
  }
  return BucketFor == (const void **)(v13 + 8 * *(unsigned int *)(v12 + v19));
}

void llvm::LoopAnalysis::run(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(void *)(a1 + 72) = 0x400000000;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 1;
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

unsigned __int8 *llvm::findOptionMDForLoopID(uint64_t a1, void *__s1, size_t __n)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = a1 + 8;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 < 2) {
    return 0;
  }
  uint64_t v7 = -8 * v3;
  while (1)
  {
    uint64_t v8 = *(unsigned __int8 **)(v4 + v7);
    if (*v8 - 4 <= 0x1E)
    {
      uint64_t v9 = *((unsigned int *)v8 + 2);
      if (v9)
      {
        uint64_t v10 = *(void *)&v8[-8 * v9];
        if (!*(unsigned char *)v10)
        {
          int v11 = *(uint64_t **)(v10 + 8);
          uint64_t v13 = *v11;
          uint64_t v12 = v11 + 3;
          if (__n == v13 && (!__n || !memcmp(__s1, v12, __n))) {
            break;
          }
        }
      }
    }
    v7 += 8;
    if (v7 == -8) {
      return 0;
    }
  }
  return v8;
}

void llvm::findStringMetadataForLoop(llvm::Loop *a1)
{
}

void llvm::getOptionalBoolLoopAttribute(llvm::Loop *a1)
{
}

void llvm::getBooleanLoopAttribute(llvm::Loop *a1)
{
}

void llvm::getOptionalIntLoopAttribute(llvm::Loop *a1)
{
}

void llvm::getIntLoopAttribute(llvm::Loop *a1)
{
}

uint64_t llvm::isFinite(llvm *this, const llvm::Loop *a2)
{
  uint64_t v2 = *(void *)(*(void *)(**((void **)this + 4) + 56) + 112);
  if (v2) {
    return (*(unsigned __int8 *)(v2 + 20) >> 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::isMustProgress(llvm *this, const llvm::Loop *a2)
{
  uint64_t v2 = *(void *)(*(void *)(**((void **)this + 4) + 56) + 112);
  if (!v2 || (*(unsigned char *)(v2 + 14) & 1) == 0 && (*(unsigned char *)(v2 + 20) & 2) == 0) {
    llvm::Loop::getLoopID(this);
  }
  return 1;
}

BOOL llvm::isValidAsAccessGroup(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 8) && (*(unsigned char *)(a1 + 1) & 0x7F) == 1;
}

void llvm::initializeLoopInfoWrapperPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6810, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC08A92C;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC6810, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC08A92C(uint64_t a1)
{
}

void llvm::LoopInfoWrapperPass::runOnFunction(uint64_t **this, llvm::Function *a2)
{
  ((void (*)(uint64_t **, llvm::Function *))(*this)[11])(this, a2);
  uint64_t v3 = this[1];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_6:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_6;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::DominatorTreeWrapperPass::ID);
  llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
}

void llvm::LoopBlocksDFS::perform(llvm::LoopBlocksDFS *this, llvm::LoopInfo *a2)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  v8[0] = this;
  v8[1] = a2;
  sub_1CC08ABB0((uint64_t)v8, (uint64_t)v12);
  uint64_t v2 = 0;
  uint64_t v8[2] = v8;
  uint64_t v9 = v11;
  for (i = 0x800000000; ; uint64_t v2 = i)
  {
    if (v14 != v2) {
      goto LABEL_3;
    }
    uint64_t v3 = v13;
    if (!v2) {
      break;
    }
    uint64_t v4 = (char *)v13 + 24 * v2;
    uint64_t v5 = v9;
    uint64_t v6 = (char *)v13;
    while (*(void *)v6 == *(void *)v5 && *((_DWORD *)v6 + 4) == v5[4])
    {
      v6 += 24;
      v5 += 6;
      if (v6 == v4) {
        goto LABEL_5;
      }
    }
LABEL_3:
    sub_1CC08ACF4((uint64_t)v12);
  }
LABEL_5:
  if (v9 != v11)
  {
    free(v9);
    uint64_t v3 = v13;
  }
  if (v3 != v15) {
    free(v3);
  }
}

void sub_1CC08ABB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  sub_1CC08B66C(**(void **)(**(void **)a1 + 32), a1, &v5);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x800000000;
  unsigned int v3 = v7;
  if (v7 && &v5 != (uint64_t *)a2)
  {
    if (__src == v9)
    {
      if (v7 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a2 + 24), __src, 24 * v7);
      *(_DWORD *)(a2 + 16) = v3;
    }
    else
    {
      *(void *)(a2 + 8) = __src;
      int v4 = v8;
      *(_DWORD *)(a2 + 16) = v3;
      *(_DWORD *)(a2 + 20) = v4;
      unint64_t __src = v9;
      int v8 = 0;
    }
    unsigned int v7 = 0;
  }
  if (__src != v9) {
    free(__src);
  }
}

uint64_t sub_1CC08ACF4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16) - 24);
  uint64_t v23 = v3;
  uint64_t v4 = *v2;
  uint64_t v5 = *(uint64_t **)(*v2 + 40);
  if ((unint64_t)v5 >= *(void *)(*v2 + 48))
  {
    uint64_t v6 = sub_1CBC13470((void **)(v4 + 32), &v23);
  }
  else
  {
    *uint64_t v5 = v3;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(v4 + 40) = v6;
  uint64_t v7 = *v2 + 8;
  uint64_t v8 = *(void *)v7;
  uint64_t v10 = *(void *)(*v2 + 32);
  uint64_t v9 = *(void *)(*v2 + 40);
  int v11 = *(_DWORD *)(v7 + 16);
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((v23 >> 4) ^ (v23 >> 9)) & (v11 - 1);
    int v14 = (void *)(v8 + 16 * v13);
    uint64_t v15 = *v14;
    if (v23 == *v14) {
      goto LABEL_5;
    }
    uint64_t v18 = 0;
    int v19 = 1;
    while (v15 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v15 == -8192;
      }
      if (v20) {
        uint64_t v18 = v14;
      }
      unsigned int v21 = v13 + v19++;
      unsigned int v13 = v21 & v12;
      int v14 = (void *)(v8 + 16 * (v21 & v12));
      uint64_t v15 = *v14;
      if (v23 == *v14) {
        goto LABEL_5;
      }
    }
    if (v18) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v14;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  int v14 = sub_1CBFAF8D8(v7, (uint64_t)&v23, &v23, v22);
  *int v14 = v23;
  *((_DWORD *)v14 + 2) = 0;
LABEL_5:
  *((_DWORD *)v14 + 2) = (unint64_t)(v9 - v10) >> 3;
  int v16 = *(_DWORD *)(a1 + 16) - 1;
  *(_DWORD *)(a1 + 16) = v16;
  if (v16) {
    sub_1CC08B8B4(a1);
  }
  return a1;
}

void sub_1CC08AE34()
{
}

void sub_1CC08AE3C(void *a1)
{
  *a1 = &unk_1F2605290;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC08AF04(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 145);
  if (v1) {
    char v1 = *(unsigned char *)(result + 144);
  }
  **(unsigned char **)(result + 128) = v1;
  return result;
}

void *sub_1CC08AF1C(void *result)
{
  char v1 = (void *)result[7];
  if (v1 != result + 9)
  {
    uint64_t v15 = result;
    free(v1);
    uint64_t result = v15;
  }
  uint64_t v2 = result[2];
  if (v2 && v2 != -8192 && v2 != -4096)
  {
    unint64_t v3 = *result & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v3 = result[1];
    uint64_t v4 = (unint64_t *)result[1];
    if (v4)
    {
      *uint64_t v4 = *v4 & 7 | v3;
    }
    else
    {
      uint64_t v5 = result[2];
      uint64_t v6 = ***(int32x2_t ****)v5;
      unint64_t v7 = (unint64_t)v6[303];
      if (v7 <= v3)
      {
        uint64_t v8 = v6[305].u32[0];
        if (v7 + 16 * v8 > v3)
        {
          unsigned int v9 = v8 - 1;
          LODWORD(v10) = v9 & ((v5 >> 4) ^ (v5 >> 9));
          int v11 = (uint64_t *)(v7 + 16 * v10);
          uint64_t v12 = *v11;
          if (v5 == *v11)
          {
LABEL_14:
            *int v11 = -8192;
            v6[304] = vadd_s32(v6[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v5 = result[2];
          }
          else
          {
            int v13 = 1;
            while (v12 != -4096)
            {
              int v14 = v10 + v13++;
              uint64_t v10 = v14 & v9;
              uint64_t v12 = *(void *)(v7 + 16 * v10);
              if (v5 == v12)
              {
                int v11 = (uint64_t *)(v7 + 16 * v10);
                goto LABEL_14;
              }
            }
          }
          *(unsigned char *)(v5 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

unsigned __int8 **sub_1CC08B040(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v4 = *a2;
  *a1 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)a1, v4, 2);
  }
  uint64_t v5 = *a2;
  a1[1] = *a2;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)(a1 + 1), v5, 2);
  }
  return a1;
}

void *sub_1CC08B0A0(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v56 = 0;
  uint64_t v6 = *(void **)a1;
  if (*(void **)a1 != a3)
  {
    unint64_t v7 = a3;
    while (v7)
    {
      unint64_t v7 = (void *)*v7;
      if (v7 == v6)
      {
        uint64_t v8 = a3;
        do
        {
          unsigned int v9 = v8;
          uint64_t v56 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8 != v6);
        unsigned int v54 = v9;
        uint64_t v55 = (uint64_t)v6;
        __int32 v57 = 0;
        if (sub_1CB915048((uint64_t *)(a1 + 72), &v54, &v57))
        {
          uint64_t v10 = v57[1];
        }
        else
        {
          unsigned int v51 = sub_1CBF74714(a1 + 72, (uint64_t)&v54, &v54, v57);
          void *v51 = v54;
          uint64_t v10 = v55;
          v51[1] = v55;
        }
        goto LABEL_10;
      }
    }
  }
  unsigned int v9 = 0;
  uint64_t v10 = (uint64_t)a3;
LABEL_10:
  uint64_t v11 = *(void *)(a2 + 40);
  if (v11 != a2 + 40)
  {
    uint64_t v12 = v11 - 24;
    if (v11) {
      int v13 = (void *)(v11 - 24);
    }
    else {
      int v13 = 0;
    }
    int v14 = *((unsigned __int8 *)v13 + 16);
    int v15 = v14 - 29;
    if (v14 != 30)
    {
      unsigned int v52 = 2;
      BOOL v53 = 0;
      switch(v15)
      {
        case 1:
LABEL_105:
          __break(1u);
          goto LABEL_106;
        case 2:
          unsigned int v52 = (*((_DWORD *)v13 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_19;
        case 3:
        case 9:
          unsigned int v52 = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_19;
        case 4:
          goto LABEL_20;
        case 7:
LABEL_106:
          unsigned int v52 = *((_WORD *)v13 + 9) & 1;
          goto LABEL_19;
        case 8:
          unsigned int v52 = 1;
          goto LABEL_20;
        case 10:
          unsigned int v52 = *((_DWORD *)v13 + 20) + 1;
          goto LABEL_19;
        default:
          goto LABEL_98;
      }
    }
    unsigned int v52 = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_19:
    if (v52)
    {
LABEL_20:
      uint64_t v16 = 0;
      uint64_t v17 = v11 - 56;
      int v13 = (void *)(v11 - 88);
      BOOL v53 = (void *)v10;
      uint64_t v18 = v52;
      while (1)
      {
        int v19 = *(unsigned __int8 *)(v11 - 8);
        if (v19 == 30)
        {
          uint64_t v10 = v17 - 32 * v16;
        }
        else
        {
          uint64_t v33 = (v19 - 31);
          uint64_t v10 = v11 - 56;
          switch(v33)
          {
            case 1:
            case 7:
              int v40 = *(_DWORD *)(v11 - 4);
              if ((v40 & 0x40000000) != 0) {
                uint64_t v41 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v41 = v12 - 32 * (v40 & 0x7FFFFFF);
              }
              uint64_t v10 = v41 + 32 * (v16 + 1);
              break;
            case 2:
              uint64_t v42 = -64;
              if (!v16) {
                uint64_t v42 = -96;
              }
              uint64_t v10 = v12 + v42;
              break;
            case 3:
            case 4:
              goto LABEL_105;
            case 5:
              if ((*(_WORD *)(v11 - 6) & 1) == 0)
              {
                uint64_t v20 = 0;
                goto LABEL_25;
              }
              uint64_t v46 = *(_DWORD *)(v11 - 4) & 0x7FFFFFF;
              uint64_t v47 = v11 + 8;
              goto LABEL_91;
            case 6:
              break;
            case 8:
              if (v16)
              {
                uint64_t v10 = v17 - 32 * *(unsigned int *)(v11 + 56) + 32 * v16 - 32;
              }
              else
              {
                uint64_t v46 = *(unsigned int *)(v11 + 56);
                uint64_t v47 = v11 - 88;
LABEL_91:
                uint64_t v10 = v47 - 32 * v46;
              }
              break;
            default:
              int v34 = *(_DWORD *)(v11 - 4);
              if ((v34 & 0x40000000) != 0) {
                uint64_t v35 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v35 = v12 - 32 * (v34 & 0x7FFFFFF);
              }
              uint64_t v10 = v35 + 32 * (2 * v16) + 32;
              break;
          }
        }
        uint64_t v20 = *(void *)v10;
LABEL_25:
        if (v20 == a2) {
          goto LABEL_61;
        }
        unsigned int v54 = 0;
        uint64_t v10 = *(void *)(a1 + 8);
        int v21 = *(unsigned __int8 *)(v11 - 8);
        if (v21 == 30)
        {
          uint64_t v37 = (uint64_t *)(v17 - 32 * v16);
        }
        else
        {
          uint64_t v36 = (v21 - 31);
          uint64_t v37 = (uint64_t *)(v11 - 56);
          switch(v36)
          {
            case 1:
            case 7:
              int v43 = *(_DWORD *)(v11 - 4);
              if ((v43 & 0x40000000) != 0) {
                uint64_t v44 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v44 = v12 - 32 * (v43 & 0x7FFFFFF);
              }
              uint64_t v37 = (uint64_t *)(v44 + 32 * (v16 + 1));
              break;
            case 2:
              uint64_t v45 = -64;
              if (!v16) {
                uint64_t v45 = -96;
              }
              uint64_t v37 = (uint64_t *)(v12 + v45);
              break;
            case 3:
            case 4:
              goto LABEL_105;
            case 5:
              if ((*(_WORD *)(v11 - 6) & 1) == 0)
              {
                uint64_t v22 = 0;
                goto LABEL_30;
              }
              uint64_t v48 = *(_DWORD *)(v11 - 4) & 0x7FFFFFF;
              uint64_t v49 = v11 + 8;
              goto LABEL_96;
            case 6:
              break;
            case 8:
              if (v16)
              {
                uint64_t v37 = (uint64_t *)(v17 - 32 * *(unsigned int *)(v11 + 56) + 32 * v16 - 32);
              }
              else
              {
                uint64_t v48 = *(unsigned int *)(v11 + 56);
                uint64_t v49 = v11 - 88;
LABEL_96:
                uint64_t v37 = (uint64_t *)(v49 - 32 * v48);
              }
              break;
            default:
              int v38 = *(_DWORD *)(v11 - 4);
              if ((v38 & 0x40000000) != 0) {
                uint64_t v39 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v39 = v12 - 32 * (v38 & 0x7FFFFFF);
              }
              uint64_t v37 = (uint64_t *)(v39 + 32 * (2 * v16) + 32);
              break;
          }
        }
        uint64_t v22 = *v37;
LABEL_30:
        int v23 = *(_DWORD *)(v10 + 16);
        if (v23)
        {
          uint64_t v24 = *(void *)v10;
          unsigned int v25 = v23 - 1;
          uint64_t v26 = ((v22 >> 4) ^ (v22 >> 9)) & (v23 - 1);
          uint64_t v27 = *(void *)(v24 + 16 * v26);
          if (v22 == v27)
          {
LABEL_35:
            uint64_t v30 = *(void **)(v24 + 16 * v26 + 8);
            goto LABEL_37;
          }
          int v28 = 1;
          while (v27 != -4096)
          {
            int v29 = v26 + v28++;
            uint64_t v26 = v29 & v25;
            uint64_t v27 = *(void *)(v24 + 16 * v26);
            if (v22 == v27) {
              goto LABEL_35;
            }
          }
        }
        uint64_t v30 = 0;
LABEL_37:
        unsigned int v54 = v30;
        uint64_t v31 = *(void **)a1;
        int v13 = v30;
        if (v30 != *(void **)a1)
        {
          while (v13)
          {
            int v13 = (void *)*v13;
            if (v13 == v31)
            {
              if (v9) {
                goto LABEL_61;
              }
              uint64_t v30 = (void *)sub_1CC08B608((uint64_t *)(a1 + 72), &v54)[1];
              unsigned int v54 = v30;
              uint64_t v31 = *(void **)a1;
              break;
            }
          }
          if (v30 == v31) {
            goto LABEL_61;
          }
          if (v30)
          {
            int v13 = v31;
            while (v13)
            {
              int v13 = (void *)*v13;
              if (v13 == v30) {
                goto LABEL_48;
              }
            }
            uint64_t v30 = (void *)*v30;
            unsigned int v54 = v30;
            if (!v53) {
              goto LABEL_60;
            }
          }
          else
          {
LABEL_48:
            if (!v53)
            {
LABEL_60:
              BOOL v53 = v30;
              goto LABEL_61;
            }
          }
          if (v53 != v31 && v30 != v53)
          {
            __int32 v32 = v30;
            while (v32)
            {
              __int32 v32 = (void *)*v32;
              if (v32 == v53) {
                goto LABEL_60;
              }
            }
            goto LABEL_61;
          }
          goto LABEL_60;
        }
        *(unsigned char *)(a1 + 96) = 1;
LABEL_61:
        if (++v16 == v18) {
          goto LABEL_98;
        }
      }
    }
  }
  BOOL v53 = 0;
LABEL_98:
  if (!v9) {
    return v53;
  }
  sub_1CC08B608((uint64_t *)(a1 + 72), &v56)[1] = v53;
  return v3;
}

void *sub_1CC08B608(uint64_t *a1, void *a2)
{
  unint64_t v7 = 0;
  char v4 = sub_1CB915048(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBF74714((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void sub_1CC08B66C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  sub_1CC08B774((uint64_t)&v6, a1, a2);
  *a3 = v6;
  a3[1] = (uint64_t)(a3 + 3);
  a3[2] = 0x800000000;
  unsigned int v4 = v8;
  if (v8) {
    BOOL v5 = &v6 == a3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v8 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(a3 + 3, __src, 24 * v8);
    *((_DWORD *)a3 + 4) = v4;
  }
  if (__src != v9) {
    free(__src);
  }
}

uint64_t sub_1CC08B774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x800000000;
  if (sub_1CC08BC54(a3, a2))
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5 == a2 + 40)
    {
      uint64_t v6 = 0;
    }
    else
    {
      if (v5) {
        uint64_t v6 = v5 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB) {
        uint64_t v6 = 0;
      }
    }
    *(void *)&long long v13 = a2;
    *((void *)&v13 + 1) = v6;
    uint64_t v14 = 0;
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    unint64_t v8 = *(void *)(a1 + 8);
    if (v7 >= *(_DWORD *)(a1 + 20))
    {
      BOOL v12 = v8 + 24 * v7 > (unint64_t)&v13;
      if (v8 > (unint64_t)&v13 || !v12) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v9 = v8 + 24 * *(unsigned int *)(a1 + 16);
    long long v10 = v13;
    *(void *)(v9 + 16) = v14;
    *(_OWORD *)uint64_t v9 = v10;
    ++*(_DWORD *)(a1 + 16);
    sub_1CC08B8B4(a1);
  }
  return a1;
}

uint64_t sub_1CC08B8B4(uint64_t result)
{
  uint64_t v1 = result;
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 8) + 24 * *(unsigned int *)(v1 + 16);
    uint64_t v3 = *(void *)(v2 - 24);
    uint64_t v4 = *(void *)(v3 + 40);
    if (v4 == v3 + 40)
    {
LABEL_33:
      int v20 = 0;
    }
    else
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      int v6 = *(unsigned __int8 *)(v5 + 16);
      int v7 = v6 - 29;
      if (v6 == 30)
      {
        int v20 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        int v20 = 0;
        switch(v7)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
LABEL_44:
            __break(1u);
            goto LABEL_45;
          case 2:
            int v20 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            int v20 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            int v20 = 2;
            break;
          case 7:
            int v20 = *(_WORD *)(v5 + 18) & 1;
            break;
          case 8:
LABEL_45:
            int v20 = 1;
            break;
          case 10:
            int v20 = *(_DWORD *)(v5 + 80) + 1;
            break;
          default:
            goto LABEL_33;
        }
      }
    }
    if (*(_DWORD *)(v2 - 8) == v20) {
      return result;
    }
    uint64_t v8 = *(void *)(v2 - 16);
    uint64_t v9 = *(void *)(v2 - 8);
    uint64_t v10 = (v9 + 1);
    *(_DWORD *)(v2 - 8) = v10;
    uint64_t v2 = *(unsigned __int8 *)(v8 + 16);
    if (v2 == 30)
    {
      uint64_t v11 = v8 - 32 * v9;
LABEL_13:
      BOOL v12 = (uint64_t *)(v11 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v8 + 16))
      {
        case ' ':
        case '&':
          int v28 = *(_DWORD *)(v8 + 20);
          if ((v28 & 0x40000000) != 0) {
            uint64_t v29 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v29 = v8 - 32 * (v28 & 0x7FFFFFF);
          }
          BOOL v12 = (uint64_t *)(v29 + 32 * v10);
          break;
        case '!':
          uint64_t v30 = -64;
          if (!v9) {
            uint64_t v30 = -96;
          }
          BOOL v12 = (uint64_t *)(v8 + v30);
          break;
        case '""':
        case '#':
          goto LABEL_44;
        case '$':
          if ((*(_WORD *)(v8 + 18) & 1) == 0)
          {
            uint64_t v13 = 0;
            goto LABEL_15;
          }
          uint64_t v23 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
LABEL_29:
          BOOL v12 = (uint64_t *)(v23 + 32);
          break;
        case '%':
          BOOL v12 = (uint64_t *)(v8 - 32);
          break;
        case '\'':
          if (v9)
          {
            uint64_t v11 = v8 - 32 * *(unsigned int *)(v8 + 80) + 32 * (v9 - 1);
            goto LABEL_13;
          }
          BOOL v12 = (uint64_t *)(v8 - 32 * *(unsigned int *)(v8 + 80) - 64);
          break;
        default:
          int v21 = *(_DWORD *)(v8 + 20);
          if ((v21 & 0x40000000) != 0) {
            uint64_t v22 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v22 = v8 - 32 * (v21 & 0x7FFFFFF);
          }
          uint64_t v23 = v22 + 32 * (2 * v9);
          goto LABEL_29;
      }
    }
    uint64_t v13 = *v12;
LABEL_15:
    uint64_t result = sub_1CC08BC54(*(void *)v1, v13);
    if (result)
    {
      uint64_t v14 = *(void *)(v13 + 40);
      if (v14 == v13 + 40 || !v14)
      {
        if (v14 == v13 + 40)
        {
          uint64_t v25 = 0;
        }
        else
        {
          if (v14) {
            uint64_t v25 = v14 - 24;
          }
          else {
            uint64_t v25 = 0;
          }
          if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB) {
            uint64_t v25 = 0;
          }
        }
        *(void *)&long long v31 = v13;
        *((void *)&v31 + 1) = v25;
        uint64_t v32 = 0;
        unsigned int v26 = *(_DWORD *)(v1 + 16);
        unint64_t v17 = *(void *)(v1 + 8);
        if (v26 >= *(_DWORD *)(v1 + 20))
        {
          BOOL v27 = v17 + 24 * v26 > (unint64_t)&v31;
          if (v17 <= (unint64_t)&v31 && v27) {
LABEL_43:
          }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_32:
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
      }
      else
      {
        if (*(unsigned __int8 *)(v14 - 8) - 29 >= 0xB) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14 - 24;
        }
        *(void *)&long long v31 = v13;
        *((void *)&v31 + 1) = v15;
        uint64_t v32 = 0;
        unsigned int v16 = *(_DWORD *)(v1 + 16);
        unint64_t v17 = *(void *)(v1 + 8);
        if (v16 >= *(_DWORD *)(v1 + 20))
        {
          BOOL v24 = v17 + 24 * v16 > (unint64_t)&v31;
          if (v17 <= (unint64_t)&v31 && v24) {
            goto LABEL_43;
          }
          goto LABEL_32;
        }
      }
      uint64_t v18 = v17 + 24 * *(unsigned int *)(v1 + 16);
      long long v19 = v31;
      *(void *)(v18 + 16) = v32;
      *(_OWORD *)uint64_t v18 = v19;
      ++*(_DWORD *)(v1 + 16);
    }
  }
}

uint64_t sub_1CC08BC54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  int v5 = *((_DWORD *)v4 + 4);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    uint64_t v7 = *v4;
    unsigned int v8 = v5 - 1;
    uint64_t v9 = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v10 = *(void *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      uint64_t v13 = *(void **)(v7 + 16 * v9 + 8);
      goto LABEL_10;
    }
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v9 + v11++;
      uint64_t v9 = v12 & v8;
      uint64_t v10 = *(void *)(v7 + 16 * v9);
      if (v10 == a2) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v13 = 0;
LABEL_10:
  while (v13 != (void *)*v3)
  {
    if (!v13) {
      return 0;
    }
    uint64_t v13 = (void *)*v13;
  }
  uint64_t v16 = v3[1];
  uint64_t v14 = (uint64_t)(v3 + 1);
  uint64_t v15 = v16;
  uint64_t v30 = a2;
  int v31 = 0;
  int v17 = *(_DWORD *)(v14 + 16);
  if (v17)
  {
    int v18 = v17 - 1;
    unsigned int v19 = v18 & (v6 ^ (a2 >> 9));
    int v20 = (void *)(v15 + 16 * v19);
    uint64_t v21 = *v20;
    if (*v20 == a2) {
      return 0;
    }
    BOOL v24 = 0;
    int v25 = 1;
    while (v21 != -4096)
    {
      uint64_t v22 = 0;
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v21 == -8192;
      }
      if (v26) {
        BOOL v24 = v20;
      }
      unsigned int v27 = v19 + v25++;
      unsigned int v19 = v27 & v18;
      int v20 = (void *)(v15 + 16 * v19);
      uint64_t v21 = *v20;
      if (*v20 == a2) {
        return v22;
      }
    }
    if (v24) {
      int v28 = v24;
    }
    else {
      int v28 = v20;
    }
  }
  else
  {
    int v28 = 0;
  }
  uint64_t v29 = sub_1CBFAF8D8(v14, (uint64_t)&v30, &v30, v28);
  *uint64_t v29 = v30;
  *((_DWORD *)v29 + 2) = v31;
  return 1;
}

uint64_t sub_1CC08BDA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v6 + ((a3 - a5) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3 != a5)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      uint64_t v8 = *(void *)(v5 - 8);
      v5 -= 8;
      *v7++ = v8;
    }
    while (v5 != a5);
  }
  *(_DWORD *)(result + 8) = v6 + ((unint64_t)(a3 - a5) >> 3);
  return result;
}

void *sub_1CC08BE34(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC08BF68(a1, v7);
      int v17 = 0;
      sub_1CB834D78((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC08BF68(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC08BF68(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CB846674(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC08C034(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v45[16] = *MEMORY[0x1E4F143B8];
  int v38 = v42;
  int v7 = *(unsigned char **)a1;
  unint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v39 = v42;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v42, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v39 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  LODWORD(v40) = *(_DWORD *)(a1 + 16);
  HIDWORD(v40) = v8;
  int v41 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v43 = v45;
  unint64_t v44 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v38 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v45, v10, 16 * *(unsigned int *)(a1 + 104));
      LODWORD(v44) = v9;
    }
    else
    {
      int v43 = *(void **)(a1 + 96);
      unint64_t v44 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v30 = v34;
  uint64_t v12 = *(unsigned char **)a2;
  uint64_t v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    int v31 = v34;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v34, v11, 8 * v13);
    }
  }
  else
  {
    int v31 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v32) = *(_DWORD *)(a2 + 16);
  HIDWORD(v32) = v13;
  int v33 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v35 = v37;
  unint64_t v36 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v30 != (unsigned char **)a2)
  {
    BOOL v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v37, v15, 16 * *(unsigned int *)(a2 + 104));
      LODWORD(v36) = v14;
    }
    else
    {
      uint64_t v35 = *(void **)(a2 + 96);
      unint64_t v36 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  unsigned int v16 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  int v18 = v38;
  int v17 = v39;
  if (v39 == v38)
  {
    *(void *)(a3 + 8) = v16;
    int v19 = HIDWORD(v40);
    if (HIDWORD(v40)) {
      memmove(v16, v17, 8 * HIDWORD(v40));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v39;
    uint64_t v39 = v18;
    int v19 = HIDWORD(v40);
  }
  int v20 = v41;
  *(_DWORD *)(a3 + 16) = v40;
  *(_DWORD *)(a3 + 20) = v19;
  *(_DWORD *)(a3 + 24) = v20;
  uint64_t v40 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v41 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  int v21 = v44;
  if (v44 && &v38 != (unsigned char **)a3)
  {
    if (v43 == v45)
    {
      if (v44 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v45, 16 * v44);
      *(_DWORD *)(a3 + 104) = v21;
    }
    else
    {
      *(void *)(a3 + 96) = v43;
      int v29 = HIDWORD(v44);
      *(_DWORD *)(a3 + 104) = v21;
      *(_DWORD *)(a3 + 108) = v29;
      int v43 = v45;
      HIDWORD(v44) = 0;
    }
    LODWORD(v44) = 0;
  }
  uint64_t v22 = (void *)(a3 + 272);
  *(void *)(a3 + 240) = a3 + 272;
  BOOL v24 = v30;
  uint64_t v23 = v31;
  if (v31 == v30)
  {
    *(void *)(a3 + 248) = v22;
    int v25 = HIDWORD(v32);
    if (HIDWORD(v32)) {
      memmove(v22, v23, 8 * HIDWORD(v32));
    }
  }
  else
  {
    *(void *)(a3 + 248) = v31;
    int v31 = v24;
    int v25 = HIDWORD(v32);
  }
  int v26 = v33;
  *(_DWORD *)(a3 + 256) = v32;
  *(_DWORD *)(a3 + 260) = v25;
  *(_DWORD *)(a3 + 264) = v26;
  uint64_t v32 = 8;
  int v33 = 0;
  *(void *)(a3 + 336) = a3 + 352;
  *(void *)(a3 + 344) = 0x800000000;
  unsigned int v27 = v35;
  if ((unsigned char **)(a3 + 240) != &v30)
  {
    int v28 = v36;
    if (v36)
    {
      if (v35 == v37)
      {
        if (v36 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a3 + 352), v37, 16 * v36);
        *(_DWORD *)(a3 + 344) = v28;
        unsigned int v27 = v35;
      }
      else
      {
        *(void *)(a3 + 336) = v35;
        *(_DWORD *)(a3 + 344) = v28;
        *(_DWORD *)(a3 + 348) = HIDWORD(v36);
        uint64_t v35 = v37;
        HIDWORD(v36) = 0;
        unsigned int v27 = v37;
      }
      LODWORD(v36) = 0;
    }
  }
  if (v27 != v37) {
    free(v27);
  }
  if (v31 != v30) {
    free(v31);
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v39 != v38) {
    free(v39);
  }
}

void sub_1CC08C4B4(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v1 = (void *)((char *)this + 96);
  uint64_t v2 = *((unsigned int *)this + 26);
  uint64_t v3 = *((void *)this + 12) + 16 * v2;
  unint64_t v6 = *(uint64_t **)(v3 - 8);
  uint64_t v4 = (void *)(v3 - 8);
  unint64_t v5 = v6;
  if (v6 != (uint64_t *)(*(void *)(*(v4 - 1) + 24) + 8 * *(unsigned int *)(*(v4 - 1) + 32)))
  {
    do
    {
      *uint64_t v4 = v5 + 1;
      uint64_t v8 = *v5;
      uint64_t v9 = *((void *)this + 1);
      uint64_t v10 = *((unsigned int *)this + 5);
      if (v9 == *(void *)this)
      {
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 8 * v10;
          uint64_t v13 = (void *)*((void *)this + 1);
          while (*v13 != v8)
          {
            if (*v13 == -2) {
              uint64_t v11 = v13;
            }
            ++v13;
            v12 -= 8;
            if (!v12)
            {
              if (!v11) {
                goto LABEL_11;
              }
              *uint64_t v11 = v8;
              --*((_DWORD *)this + 6);
              goto LABEL_13;
            }
          }
          goto LABEL_15;
        }
LABEL_11:
        unsigned int v14 = *((_DWORD *)this + 4);
        if (v10 < v14)
        {
          *((_DWORD *)this + 5) = v10 + 1;
          *(void *)(v9 + 8 * v10) = v8;
LABEL_13:
          uint64_t v15 = *(void *)(v8 + 24);
          if (v2 >= *((_DWORD *)this + 27)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v2 = *((void *)this + 12) + 16 * v2;
          *(void *)uint64_t v2 = v8;
          *(void *)(v2 + 8) = v15;
          LODWORD(v2) = *((_DWORD *)this + 26) + 1;
          *((_DWORD *)this + 26) = v2;
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v14 = *((_DWORD *)this + 4);
      }
      if (3 * v14 <= 4 * ((int)v10 - *((_DWORD *)this + 6)))
      {
        if (v14 >= 0x40) {
          v14 *= 2;
        }
        else {
          unsigned int v14 = 128;
        }
      }
      else if (v14 - v10 >= v14 >> 3)
      {
        goto LABEL_20;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v14);
      unsigned int v14 = *((_DWORD *)this + 4);
      uint64_t v9 = *((void *)this + 1);
LABEL_20:
      unsigned int v18 = v14 - 1;
      unsigned int v19 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      uint64_t v2 = v9 + 8 * v19;
      uint64_t v20 = *(void *)v2;
      if (*(void *)v2 == -1)
      {
        uint64_t v21 = 0;
LABEL_32:
        if (v21) {
          uint64_t v2 = v21;
        }
        if (*(void *)v2 != v8)
        {
          if (*(void *)v2 == -2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          *(void *)uint64_t v2 = v8;
          LODWORD(v2) = *((_DWORD *)this + 26);
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v8)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            uint64_t v21 = v2;
          }
          unsigned int v24 = v19 + v22++;
          unsigned int v19 = v24 & v18;
          uint64_t v2 = v9 + 8 * (v24 & v18);
          uint64_t v20 = *(void *)v2;
          if (*(void *)v2 == -1) {
            goto LABEL_32;
          }
        }
      }
      LODWORD(v2) = *((_DWORD *)this + 26);
LABEL_15:
      uint64_t v16 = *v1 + 16 * v2;
      int v17 = *(uint64_t **)(v16 - 8);
      uint64_t v4 = (void *)(v16 - 8);
      unint64_t v5 = v17;
    }
    while (v17 != (uint64_t *)(*(void *)(*(v4 - 1) + 24) + 8 * *(unsigned int *)(*(v4 - 1) + 32)));
  }
}

char *sub_1CC08C6F4(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    do
    {
      ++v4;
      do
      {
        uint64_t v5 = *(void *)(v5 + 8);
        if (!v5) {
          break;
        }
        uint64_t v6 = *(void *)(v5 + 24);
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        BOOL v8 = v6 && v7 >= 0x1C;
      }
      while (!v8 || v7 - 29 > 0xA);
    }
    while (v5 != a4);
  }
  return sub_1CC08C740(a1, a2, a3, a4, v4);
}

char *sub_1CC08C740(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unsigned int v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF8];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  if (a5 <= (v11 - v12) >> 3)
  {
    uint64_t v18 = a5;
    uint64_t v19 = a3;
    do
    {
      do
      {
        uint64_t v19 = *(void *)(v19 + 8);
        if (!v19) {
          break;
        }
        uint64_t v20 = *(void *)(v19 + 24);
        unsigned int v21 = *(unsigned __int8 *)(v20 + 16);
        BOOL v22 = v20 && v21 >= 0x1C;
        BOOL v23 = !v22 || v21 - 29 > 0xA;
      }
      while (v23);
      BOOL v23 = v18-- <= 1;
    }
    while (!v23);
    uint64_t v24 = (v12 - v7) >> 3;
    if (v24 >= a5)
    {
      uint64_t v30 = a1[1];
      uint64_t v24 = a5;
    }
    else
    {
      if (v12 - v7 < 1)
      {
        uint64_t v19 = a3;
      }
      else
      {
        uint64_t v25 = (v12 - v7) >> 3;
        uint64_t v19 = a3;
        do
        {
          do
          {
            uint64_t v19 = *(void *)(v19 + 8);
            if (!v19) {
              break;
            }
            uint64_t v26 = *(void *)(v19 + 24);
            unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
            BOOL v28 = v26 && v27 >= 0x1C;
          }
          while (!v28 || v27 - 29 > 0xA);
          BOOL v23 = v25-- <= 1;
        }
        while (!v23);
      }
      if (v19 == a4)
      {
        uint64_t v30 = a1[1];
      }
      else
      {
        uint64_t v44 = v19;
        uint64_t v30 = a1[1];
        do
        {
          *(void *)uint64_t v30 = *(void *)(*(void *)(v44 + 24) + 40);
          do
          {
            uint64_t v44 = *(void *)(v44 + 8);
            if (!v44) {
              break;
            }
            uint64_t v45 = *(void *)(v44 + 24);
            unsigned int v46 = *(unsigned __int8 *)(v45 + 16);
            BOOL v47 = v45 && v46 >= 0x1C;
          }
          while (!v47 || v46 - 29 > 0xA);
          v30 += 8;
        }
        while (v44 != a4);
      }
      a1[1] = v30;
    }
    if (v24 >= 1)
    {
      uint64_t v49 = &v7[8 * a5];
      BOOL v50 = &v30[-8 * a5];
      unsigned int v51 = v30;
      if (v50 < v12)
      {
        unsigned int v51 = v30;
        do
        {
          uint64_t v52 = *(void *)v50;
          v50 += 8;
          *(void *)unsigned int v51 = v52;
          v51 += 8;
        }
        while (v50 < v12);
      }
      a1[1] = v51;
      if (v30 != v49) {
        memmove(&v30[-8 * ((v30 - v49) >> 3)], v7, v30 - v49);
      }
      if (v19 != v9)
      {
        BOOL v53 = v7;
        do
        {
          *(void *)BOOL v53 = *(void *)(*(void *)(v9 + 24) + 40);
          do
          {
            uint64_t v9 = *(void *)(v9 + 8);
            if (!v9) {
              break;
            }
            uint64_t v54 = *(void *)(v9 + 24);
            unsigned int v55 = *(unsigned __int8 *)(v54 + 16);
            BOOL v56 = v54 && v55 >= 0x1C;
          }
          while (!v56 || v55 - 29 > 0xA);
          v53 += 8;
        }
        while (v9 != v19);
      }
    }
    return v7;
  }
  unint64_t v13 = a5 + ((v12 - v5) >> 3);
  if (v13 >> 61) {
    abort();
  }
  uint64_t v14 = v11 - v5;
  uint64_t v15 = v14 >> 2;
  if (v14 >> 2 <= v13) {
    uint64_t v15 = v13;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 >> 61) {
      sub_1CB833614();
    }
    int v17 = (char *)operator new(8 * v16);
  }
  else
  {
    int v17 = 0;
  }
  int v31 = &v17[8 * (v6 >> 3)];
  uint64_t v32 = &v31[8 * a5];
  int v33 = v31;
  do
  {
    *(void *)int v33 = *(void *)(*(void *)(v9 + 24) + 40);
    v33 += 8;
    do
    {
      uint64_t v9 = *(void *)(v9 + 8);
      if (!v9) {
        break;
      }
      uint64_t v34 = *(void *)(v9 + 24);
      unsigned int v35 = *(unsigned __int8 *)(v34 + 16);
      BOOL v36 = v34 && v35 >= 0x1C;
    }
    while (!v36 || v35 - 29 > 0xA);
  }
  while (v33 != v32);
  int v38 = *a1;
  if (v7 == *a1)
  {
    uint64_t v40 = v31;
  }
  else
  {
    uint64_t v39 = v7;
    uint64_t v40 = v31;
    do
    {
      uint64_t v41 = *((void *)v39 - 1);
      v39 -= 8;
      *((void *)v40 - 1) = v41;
      v40 -= 8;
    }
    while (v39 != v38);
    uint64_t v12 = a1[1];
  }
  uint64_t v42 = &v17[8 * v16];
  if (v12 != v7) {
    memmove(v32, v7, v12 - v7);
  }
  int v43 = *a1;
  *a1 = v40;
  a1[1] = &v32[v12 - v7];
  a1[2] = v42;
  if (v43) {
    operator delete(v43);
  }
  return v31;
}

void sub_1CC08CA3C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v23[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v15 = v19;
  unint64_t v16 = v19;
  int v18 = 0;
  int v22 = 8;
  uint64_t v17 = 0x100000008;
  uint64_t v20 = v23;
  v19[0] = v3;
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4 == v3 + 40 || v4 == 0)
  {
    if (v4 == v3 + 40)
    {
      uint64_t v6 = 0;
      goto LABEL_8;
    }
    uint64_t v6 = v4 - 24;
    if (!v4) {
      uint64_t v6 = 0;
    }
    unsigned int v7 = (unsigned __int8 *)(v6 + 16);
  }
  else
  {
    uint64_t v6 = v4 - 24;
    unsigned int v7 = (unsigned __int8 *)(v4 - 8);
  }
  if (*v7 - 29 >= 0xB) {
    uint64_t v6 = 0;
  }
LABEL_8:
  v23[0] = v3;
  v23[1] = v6;
  v23[2] = 0;
  int v21 = 1;
  sub_1CC08D090((llvm::SmallPtrSetImplBase *)&v15);
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  v12[0] = 0;
  memset(v11, 0, sizeof(v11));
  BOOL v8 = (char *)v11 + 8;
  uint64_t v9 = (char *)v11 + 8;
  uint64_t v10 = 8;
  v12[1] = (char *)v13 + 8;
  DWORD1(v13[0]) = 8;
  sub_1CC08CC00((uint64_t)&v15, (uint64_t)&v8, a2);
  if (v12[1] != (char *)v13 + 8) {
    free(v12[1]);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (v20 != v23) {
    free(v20);
  }
  if (v16 != v15) {
    free(v16);
  }
}

void sub_1CC08CC00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v45[24] = *MEMORY[0x1E4F143B8];
  int v38 = v42;
  unsigned int v7 = *(unsigned char **)a1;
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    uint64_t v39 = v42;
    uint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8) {
      memmove(v42, v6, 8 * v8);
    }
  }
  else
  {
    uint64_t v39 = *(unsigned char **)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  LODWORD(v40) = *(_DWORD *)(a1 + 16);
  HIDWORD(v40) = v8;
  int v41 = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  int v43 = v45;
  unint64_t v44 = 0x800000000;
  unsigned int v9 = *(_DWORD *)(a1 + 104);
  if (v9 && &v38 != (unsigned char **)a1)
  {
    uint64_t v10 = *(const void **)(a1 + 96);
    if (v10 == (const void *)(a1 + 112))
    {
      if (v9 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v45, v10, 24 * *(unsigned int *)(a1 + 104));
      LODWORD(v44) = v9;
    }
    else
    {
      int v43 = *(void **)(a1 + 96);
      unint64_t v44 = __PAIR64__(*(_DWORD *)(a1 + 108), v9);
      *(void *)(a1 + 96) = a1 + 112;
      *(_DWORD *)(a1 + 108) = 0;
    }
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v30 = v34;
  uint64_t v12 = *(unsigned char **)a2;
  uint64_t v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    int v31 = v34;
    uint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13) {
      memmove(v34, v11, 8 * v13);
    }
  }
  else
  {
    int v31 = *(unsigned char **)(a2 + 8);
    *(void *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  LODWORD(v32) = *(_DWORD *)(a2 + 16);
  HIDWORD(v32) = v13;
  int v33 = *(_DWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  unsigned int v35 = v37;
  unint64_t v36 = 0x800000000;
  unsigned int v14 = *(_DWORD *)(a2 + 104);
  if (v14 && &v30 != (unsigned char **)a2)
  {
    uint64_t v15 = *(const void **)(a2 + 96);
    if (v15 == (const void *)(a2 + 112))
    {
      if (v14 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v37, v15, 24 * *(unsigned int *)(a2 + 104));
      LODWORD(v36) = v14;
    }
    else
    {
      unsigned int v35 = *(void **)(a2 + 96);
      unint64_t v36 = __PAIR64__(*(_DWORD *)(a2 + 108), v14);
      *(void *)(a2 + 96) = a2 + 112;
      *(_DWORD *)(a2 + 108) = 0;
    }
    *(_DWORD *)(a2 + 104) = 0;
  }
  unint64_t v16 = (void *)(a3 + 32);
  *(void *)a3 = a3 + 32;
  int v18 = v38;
  uint64_t v17 = v39;
  if (v39 == v38)
  {
    *(void *)(a3 + 8) = v16;
    int v19 = HIDWORD(v40);
    if (HIDWORD(v40)) {
      memmove(v16, v17, 8 * HIDWORD(v40));
    }
  }
  else
  {
    *(void *)(a3 + 8) = v39;
    uint64_t v39 = v18;
    int v19 = HIDWORD(v40);
  }
  int v20 = v41;
  *(_DWORD *)(a3 + 16) = v40;
  *(_DWORD *)(a3 + 20) = v19;
  *(_DWORD *)(a3 + 24) = v20;
  uint64_t v40 = 8;
  *(void *)(a3 + 96) = a3 + 112;
  int v41 = 0;
  *(void *)(a3 + 104) = 0x800000000;
  int v21 = v44;
  if (v44 && &v38 != (unsigned char **)a3)
  {
    if (v43 == v45)
    {
      if (v44 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy((void *)(a3 + 112), v45, 24 * v44);
      *(_DWORD *)(a3 + 104) = v21;
    }
    else
    {
      *(void *)(a3 + 96) = v43;
      int v29 = HIDWORD(v44);
      *(_DWORD *)(a3 + 104) = v21;
      *(_DWORD *)(a3 + 108) = v29;
      int v43 = v45;
      HIDWORD(v44) = 0;
    }
    LODWORD(v44) = 0;
  }
  int v22 = (void *)(a3 + 336);
  *(void *)(a3 + 304) = a3 + 336;
  uint64_t v24 = v30;
  BOOL v23 = v31;
  if (v31 == v30)
  {
    *(void *)(a3 + 312) = v22;
    int v25 = HIDWORD(v32);
    if (HIDWORD(v32)) {
      memmove(v22, v23, 8 * HIDWORD(v32));
    }
  }
  else
  {
    *(void *)(a3 + 312) = v31;
    int v31 = v24;
    int v25 = HIDWORD(v32);
  }
  int v26 = v33;
  *(_DWORD *)(a3 + 320) = v32;
  *(_DWORD *)(a3 + 324) = v25;
  *(_DWORD *)(a3 + 328) = v26;
  uint64_t v32 = 8;
  int v33 = 0;
  *(void *)(a3 + 400) = a3 + 416;
  *(void *)(a3 + 408) = 0x800000000;
  unsigned int v27 = v35;
  if ((unsigned char **)(a3 + 304) != &v30)
  {
    int v28 = v36;
    if (v36)
    {
      if (v35 == v37)
      {
        if (v36 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a3 + 416), v37, 24 * v36);
        *(_DWORD *)(a3 + 408) = v28;
        unsigned int v27 = v35;
      }
      else
      {
        *(void *)(a3 + 400) = v35;
        *(_DWORD *)(a3 + 408) = v28;
        *(_DWORD *)(a3 + 412) = HIDWORD(v36);
        unsigned int v35 = v37;
        HIDWORD(v36) = 0;
        unsigned int v27 = v37;
      }
      LODWORD(v36) = 0;
    }
  }
  if (v27 != v37) {
    free(v27);
  }
  if (v31 != v30) {
    free(v31);
  }
  if (v43 != v45) {
    free(v43);
  }
  if (v39 != v38) {
    free(v39);
  }
}

void sub_1CC08D090(llvm::SmallPtrSetImplBase *this)
{
  while (1)
  {
LABEL_1:
    uint64_t v2 = *((void *)this + 12) + 24 * *((unsigned int *)this + 26);
    uint64_t v3 = *(void *)(v2 - 24);
    uint64_t v4 = *(void *)(v3 + 40);
    if (v4 == v3 + 40)
    {
LABEL_68:
      int v34 = 0;
    }
    else
    {
      uint64_t v5 = v4 - 24;
      if (!v4) {
        uint64_t v5 = 0;
      }
      int v6 = *(unsigned __int8 *)(v5 + 16);
      int v7 = v6 - 29;
      if (v6 == 30)
      {
        int v34 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        int v34 = 0;
        switch(v7)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
LABEL_80:
            __break(1u);
            goto LABEL_81;
          case 2:
            int v34 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
LABEL_81:
            int v34 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            int v34 = 2;
            break;
          case 7:
            int v34 = *(_WORD *)(v5 + 18) & 1;
            break;
          case 8:
            int v34 = 1;
            break;
          case 10:
            int v34 = *(_DWORD *)(v5 + 80) + 1;
            break;
          default:
            goto LABEL_68;
        }
      }
    }
    if (*(_DWORD *)(v2 - 8) == v34) {
      break;
    }
    uint64_t v8 = *(void *)(v2 - 16);
    uint64_t v9 = *(void *)(v2 - 8);
    uint64_t v5 = (v9 + 1);
    *(_DWORD *)(v2 - 8) = v5;
    uint64_t v2 = *(unsigned __int8 *)(v8 + 16);
    if (v2 == 30)
    {
      uint64_t v10 = v8 - 32 * v9;
LABEL_12:
      uint64_t v11 = (uint64_t *)(v10 - 32);
    }
    else
    {
      switch(*(unsigned char *)(v8 + 16))
      {
        case ' ':
        case '&':
          int v41 = *(_DWORD *)(v8 + 20);
          if ((v41 & 0x40000000) != 0) {
            uint64_t v42 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v42 = v8 - 32 * (v41 & 0x7FFFFFF);
          }
          uint64_t v11 = (uint64_t *)(v42 + 32 * v5);
          break;
        case '!':
          uint64_t v43 = -64;
          if (!v9) {
            uint64_t v43 = -96;
          }
          uint64_t v11 = (uint64_t *)(v8 + v43);
          break;
        case '""':
        case '#':
          goto LABEL_80;
        case '$':
          if ((*(_WORD *)(v8 + 18) & 1) == 0)
          {
            uint64_t v12 = 0;
            goto LABEL_14;
          }
          uint64_t v37 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
LABEL_59:
          uint64_t v11 = (uint64_t *)(v37 + 32);
          break;
        case '%':
          uint64_t v11 = (uint64_t *)(v8 - 32);
          break;
        case '\'':
          if (v9)
          {
            uint64_t v10 = v8 - 32 * *(unsigned int *)(v8 + 80) + 32 * (v9 - 1);
            goto LABEL_12;
          }
          uint64_t v11 = (uint64_t *)(v8 - 32 * *(unsigned int *)(v8 + 80) - 64);
          break;
        default:
          int v35 = *(_DWORD *)(v8 + 20);
          if ((v35 & 0x40000000) != 0) {
            uint64_t v36 = *(void *)(v8 - 8);
          }
          else {
            uint64_t v36 = v8 - 32 * (v35 & 0x7FFFFFF);
          }
          uint64_t v37 = v36 + 32 * (2 * v9);
          goto LABEL_59;
      }
    }
    uint64_t v12 = *v11;
LABEL_14:
    uint64_t v13 = *((void *)this + 1);
    uint64_t v14 = *((unsigned int *)this + 5);
    if (v13 == *(void *)this)
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v14;
        uint64_t v17 = (void *)*((void *)this + 1);
        do
        {
          if (*v17 == v12) {
            goto LABEL_1;
          }
          if (*v17 == -2) {
            uint64_t v15 = v17;
          }
          ++v17;
          v16 -= 8;
        }
        while (v16);
        if (v15)
        {
          *uint64_t v15 = v12;
          --*((_DWORD *)this + 6);
          goto LABEL_25;
        }
      }
      unsigned int v24 = *((_DWORD *)this + 4);
      if (v14 < v24)
      {
        *((_DWORD *)this + 5) = v14 + 1;
        *(void *)(v13 + 8 * v14) = v12;
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v24 = *((_DWORD *)this + 4);
    }
    if (3 * v24 <= 4 * ((int)v14 - *((_DWORD *)this + 6)))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
LABEL_67:
      llvm::SmallPtrSetImplBase::Grow(this, v24);
      unsigned int v24 = *((_DWORD *)this + 4);
      uint64_t v13 = *((void *)this + 1);
      goto LABEL_34;
    }
    if (v24 - v14 < v24 >> 3) {
      goto LABEL_67;
    }
LABEL_34:
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    unsigned int v27 = (void *)(v13 + 8 * v26);
    uint64_t v28 = *v27;
    if (*v27 == -1)
    {
      uint64_t v32 = 0;
LABEL_45:
      if (v32) {
        int v33 = v32;
      }
      else {
        int v33 = v27;
      }
      if (*v33 != v12)
      {
        if (*v33 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *int v33 = v12;
LABEL_25:
        uint64_t v18 = *(void *)(v12 + 40);
        if (v18 == v12 + 40 || !v18)
        {
          if (v18 == v12 + 40)
          {
            uint64_t v44 = 0;
          }
          else
          {
            if (v18) {
              uint64_t v44 = v18 - 24;
            }
            else {
              uint64_t v44 = 0;
            }
            if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
              uint64_t v44 = 0;
            }
          }
          *(void *)&long long v45 = v12;
          *((void *)&v45 + 1) = v44;
          uint64_t v46 = 0;
          unsigned int v39 = *((_DWORD *)this + 26);
          unint64_t v21 = *((void *)this + 12);
          if (v39 >= *((_DWORD *)this + 27))
          {
            BOOL v40 = v21 + 24 * v39 > (unint64_t)&v45;
            if (v21 <= (unint64_t)&v45 && v40) {
LABEL_79:
            }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
LABEL_63:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
        }
        else
        {
          if (*(unsigned __int8 *)(v18 - 8) - 29 >= 0xB) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = v18 - 24;
          }
          *(void *)&long long v45 = v12;
          *((void *)&v45 + 1) = v19;
          uint64_t v46 = 0;
          unsigned int v20 = *((_DWORD *)this + 26);
          unint64_t v21 = *((void *)this + 12);
          if (v20 >= *((_DWORD *)this + 27))
          {
            BOOL v38 = v21 + 24 * v20 > (unint64_t)&v45;
            if (v21 <= (unint64_t)&v45 && v38) {
              goto LABEL_79;
            }
            goto LABEL_63;
          }
        }
        uint64_t v22 = v21 + 24 * *((unsigned int *)this + 26);
        long long v23 = v45;
        *(void *)(v22 + 16) = v46;
        *(_OWORD *)uint64_t v22 = v23;
        ++*((_DWORD *)this + 26);
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v29 = 1;
      while (v28 != v12)
      {
        if (v32) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v28 == -2;
        }
        if (v30) {
          uint64_t v32 = v27;
        }
        unsigned int v31 = v26 + v29++;
        unsigned int v26 = v31 & v25;
        unsigned int v27 = (void *)(v13 + 8 * (v31 & v25));
        uint64_t v28 = *v27;
        if (*v27 == -1) {
          goto LABEL_45;
        }
      }
    }
  }
}

uint64_t sub_1CC08D588(llvm *a1, void *a2, unsigned char *a3)
{
  if (*(void *)a1)
  {
    int v7 = "cl::location(x) specified more than once!";
    __int16 v8 = 259;
    int v6 = (llvm::raw_ostream *)llvm::errs(a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v6);
  }
  else
  {
    uint64_t result = 0;
    *(void *)a1 = a3;
    *((unsigned char *)a1 + 17) = 1;
    *((unsigned char *)a1 + 16) = *a3;
  }
  return result;
}

uint64_t sub_1CC08D608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 != a2 + 40)
  {
    do
    {
      uint64_t v5 = (void *)(v3 - 24);
      if (!v3) {
        uint64_t v5 = 0;
      }
      if (*(unsigned char *)(*v5 + 8) != 12)
      {
        for (uint64_t i = v5[1]; i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v7 = *(void *)(i + 24);
          __int16 v8 = (uint64_t *)(v7 + 40);
          if (v7 && *(unsigned char *)(v7 + 16) == 83)
          {
            int v9 = *(_DWORD *)(v7 + 20);
            if ((v9 & 0x40000000) != 0) {
              uint64_t v10 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v10 = v7 - 32 * (v9 & 0x7FFFFFF);
            }
            __int16 v8 = (uint64_t *)(v10
                           + 32 * *(unsigned int *)(v7 + 60)
                           + 8 * ((unint64_t)(i - v10) >> 5));
          }
          uint64_t v11 = *v8;
          if (*v8 != a2)
          {
            uint64_t v13 = *(void *)(a1 + 56);
            uint64_t v12 = *(void *)(a1 + 64);
            if (v12 == v13)
            {
              uint64_t v14 = *(unsigned int *)(a1 + 76);
              uint64_t v15 = (void *)(v12 + 8 * v14);
              if (v14)
              {
                uint64_t v16 = 0;
                while (*(void *)(v12 + v16) != v11)
                {
                  v16 += 8;
                  if (8 * v14 == v16) {
                    goto LABEL_32;
                  }
                }
                uint64_t v15 = (void *)(v12 + v16);
              }
LABEL_32:
              uint64_t v13 = *(void *)(a1 + 64);
            }
            else
            {
              uint64_t v17 = *(unsigned int *)(a1 + 72);
              int v18 = v17 - 1;
              unsigned int v19 = (v17 - 1) & ((v11 >> 4) ^ (v11 >> 9));
              uint64_t v15 = (void *)(v12 + 8 * v19);
              uint64_t v20 = *v15;
              if (*v15 == -1)
              {
                unint64_t v21 = 0;
LABEL_41:
                if (v21) {
                  uint64_t v15 = v21;
                }
                LODWORD(v14) = *(_DWORD *)(a1 + 76);
                unsigned int v26 = (void *)(v12 + 8 * v17);
                if (*v15 != v11) {
                  uint64_t v15 = v26;
                }
              }
              else
              {
                unint64_t v21 = 0;
                int v22 = 1;
                while (v20 != v11)
                {
                  if (v21) {
                    BOOL v23 = 0;
                  }
                  else {
                    BOOL v23 = v20 == -2;
                  }
                  if (v23) {
                    unint64_t v21 = v15;
                  }
                  unsigned int v24 = v19 + v22++;
                  unsigned int v19 = v24 & v18;
                  uint64_t v15 = (void *)(v12 + 8 * (v24 & v18));
                  uint64_t v20 = *v15;
                  if (*v15 == -1) {
                    goto LABEL_41;
                  }
                }
                LODWORD(v14) = *(_DWORD *)(a1 + 76);
              }
            }
            if (v12 == v13) {
              unsigned int v25 = v14;
            }
            else {
              unsigned int v25 = *(_DWORD *)(a1 + 72);
            }
            if (v15 == (void *)(v12 + 8 * v25)) {
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
            }
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return 1;
}

uint64_t sub_1CC08D7E8()
{
  uint64_t v3 = &llvm::VerifyLoopInfo;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop info (time consuming)";
  v1.n128_u64[1] = 33;
  sub_1CD4A42A8((llvm::cl::Option *)&unk_1EBCC6750, "verify-loop-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &unk_1EBCC6750, &dword_1CB82C000);
}

double llvm::LPPassManager::LPPassManager(llvm::LPPassManager *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::LPPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = (char *)this + 64;
  *((void *)this + 7) = 0x1000000000;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = (char *)this + 280;
  *((void *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  double result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(void *)this = &unk_1F2605340;
  *((void *)this + 4) = &unk_1F26053F0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::LPPassManager::ID;
  *((_DWORD *)this + 6) = 2;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = (char *)this + 64;
  *((void *)this + 7) = 0x1000000000;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = (char *)this + 280;
  *((void *)this + 34) = 0x1000000000;
  *((_DWORD *)this + 102) = 0;
  double result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(void *)this = &unk_1F2605340;
  *((void *)this + 4) = &unk_1F26053F0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  return result;
}

void **llvm::LPPassManager::markLoopAsDeleted(llvm::LPPassManager *this, llvm::Loop *a2)
{
  uint64_t v4 = (void *)((char *)this + 416);
  double result = sub_1CC08D96C((void *)this + 52, (uint64_t)a2);
  if (*((llvm::Loop **)this + 59) == a2)
  {
    *((unsigned char *)this + 480) = 1;
    int v6 = a2;
    return (void **)sub_1CC08DA44(v4, &v6);
  }
  return result;
}

void **sub_1CC08D96C(void *a1, uint64_t a2)
{
  uint64_t v18 = a2;
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  int v6 = (void *)(v4 + 8 * (v3 >> 9));
  if (v5 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    int v9 = (void *)(v4 + 8 * ((a1[5] + v3) >> 9));
  }
  else
  {
    uint64_t v7 = (void *)(*v6 + 8 * (v3 & 0x1FF));
    unint64_t v8 = a1[5] + v3;
    int v9 = (void *)(v4 + 8 * (v8 >> 9));
    uint64_t v10 = (void *)(*v9 + 8 * (v8 & 0x1FF));
  }
  uint64_t v12 = (char *)sub_1CC08F188(v6, v7, v9, v10, &v18);
  unint64_t v13 = a1[4] + a1[5];
  uint64_t v14 = a1[1];
  uint64_t v15 = (char *)(v14 + 8 * (v13 >> 9));
  if (a1[2] == v14) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = (char *)(*(void *)v15 + 8 * (v13 & 0x1FF));
  }
  return sub_1CC08ED98(a1, v12, v11, v15, v16);
}

void *sub_1CC08DA44(void *result, void *a2)
{
  uint64_t v2 = result[2];
  uint64_t v3 = result[1];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  uint64_t v5 = result[5];
  unint64_t v6 = v5 + result[4];
  if (v4 == v6)
  {
    uint64_t v7 = a2;
    unint64_t v8 = result;
    sub_1CD4A5364((uint64_t)result);
    a2 = v7;
    double result = v8;
    uint64_t v3 = v8[1];
    uint64_t v5 = v8[5];
    unint64_t v6 = v8[4] + v5;
  }
  *(void *)(*(void *)(v3 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF)) = *a2;
  result[5] = v5 + 1;
  return result;
}

uint64_t llvm::LPPassManager::runOnFunction(int32x2_t *this, llvm::Function *a2)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)this[1];
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_105:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::LoopInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_105;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  int v102 = (llvm *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::LoopInfoWrapperPass::ID);
  uint64_t v7 = (char *)v102 + 32;
  this[58] = (int32x2_t)((char *)v102 + 32);
  uint64_t v8 = *((void *)a2 + 5);
  uint64_t v10 = *(void *)(*(void *)&this[5] + 8);
  uint64_t v9 = *(void *)(*(void *)&this[5] + 16);
  if (v9 != v10)
  {
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v9 - 8);
      v9 -= 8;
      unint64_t v13 = &this[v11++ + 4];
      v13[20] = (int32x2_t)(v12 + 208);
    }
    while (v9 != v10);
    uint64_t v7 = (char *)this[58];
  }
  uint64_t v15 = *((void *)v7 + 3);
  for (uint64_t i = *((void *)v7 + 4); i != v15; i -= 8)
  {
    uint64_t v19 = *(void *)(i - 8);
    sub_1CC08E470(v19, &this[52]);
  }
  int32x2_t v16 = this[57];
  if (!*(void *)&v16)
  {
    LOBYTE(v17) = 0;
    return v17 & 1;
  }
  int32x2_t v20 = this[53];
  if (*(void *)&this[54] == *(void *)&v20
    || (int32x2_t v21 = this[56],
        int v22 = (char **)(*(void *)&v20 + 8 * (*(void *)&v21 >> 9)),
        BOOL v23 = *v22,
        unsigned int v24 = (uint64_t *)&(*v22)[8 * (v21.i16[0] & 0x1FF)],
        uint64_t v25 = *(void *)(*(void *)&v20 + (((*(void *)&v21 + *(void *)&v16) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(void *)&v21 + *(void *)&v16) & 0x1FFLL),
        v24 == (uint64_t *)v25))
  {
    int v17 = 0;
  }
  else
  {
    int v17 = 0;
    LODWORD(v26) = this[7].i32[0];
    do
    {
      if (v26)
      {
        unint64_t v27 = 0;
        uint64_t v28 = *v24;
        do
        {
          uint64_t v29 = *(void *)(*(void *)&this[6] + 8 * v27);
          v17 |= (*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)v29 + 144))(v29, v28, this);
          ++v27;
          unint64_t v26 = this[7].u32[0];
        }
        while (v27 < v26);
        BOOL v23 = *v22;
      }
      if ((char *)++v24 - v23 == 4096)
      {
        long long v91 = v22[1];
        ++v22;
        BOOL v23 = v91;
        unsigned int v24 = (uint64_t *)v91;
      }
    }
    while (v24 != (uint64_t *)v25);
  }
  unsigned int v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0x1000000000;
  int v30 = (*(uint64_t (**)(void, const char *, uint64_t))(**(void **)(**(void **)v8 + 72) + 24))(*(void *)(**(void **)v8 + 72), "size-info", 9);
  if (v30)
  {
    unsigned int inited = llvm::PMDataManager::initSizeRemarkInfo((uint64_t)&this[4], v8, (uint64_t)&v104);
    unsigned int InstructionCount = llvm::Function::getInstructionCount(a2);
  }
  else
  {
    unsigned int InstructionCount = 0;
    unsigned int inited = 0;
  }
  if (!*(void *)&this[57]) {
    goto LABEL_96;
  }
  unsigned int v98 = InstructionCount;
  unsigned int v100 = inited;
  uint64_t v101 = v8;
  int v34 = (void *)off_1EC7DFC00();
  do
  {
    this[60].i8[0] = 0;
    this[59] = *(int32x2_t *)(*(void *)(*(void *)&this[53]
                                        + (((unint64_t)(*(void *)&v33 + *(void *)&this[56] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)&v33 + *(void *)&this[56] - 1) & 0x1FF));
    if (!this[7].i32[0]) {
      goto LABEL_86;
    }
    unint64_t v35 = 0;
    do
    {
      uint64_t v36 = *(const void *****)(*(void *)&this[6] + 8 * v35);
      uint64_t v37 = ((uint64_t (*)(const void ****))(*v36)[2])(v36);
      if (*v34) {
        llvm::timeTraceProfilerBegin((uint64_t)"RunLoopPass", 11, v37, v38);
      }
      unsigned int v39 = **(uint64_t *****)(*(void *)&this[59] + 32);
      if ((*((unsigned char *)v39 + 23) & 0x10) != 0)
      {
        uint64_t v40 = ***v39;
        uint64_t v41 = *(void *)(v40 + 152);
        uint64_t v42 = *(unsigned int *)(v40 + 168);
        if (v42)
        {
          LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
          uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
          long long v45 = *v44;
          if (*v44 == v39)
          {
LABEL_39:
            uint64_t v48 = v44[1];
            size_t v51 = (size_t)*v48;
            uint64_t v49 = (char *)(v48 + 2);
            size_t v50 = v51;
            goto LABEL_40;
          }
          int v46 = 1;
          while (v45 != (uint64_t ***)-4096)
          {
            int v47 = v43 + v46++;
            uint64_t v43 = v47 & (v42 - 1);
            long long v45 = *(uint64_t ****)(v41 + 16 * v43);
            if (v45 == v39)
            {
              uint64_t v44 = (uint64_t ****)(v41 + 16 * v43);
              goto LABEL_39;
            }
          }
        }
        uint64_t v44 = (uint64_t ****)(v41 + 16 * v42);
        goto LABEL_39;
      }
      size_t v50 = 0;
      uint64_t v49 = &byte_1CFBCE98E;
LABEL_40:
      llvm::PMDataManager::dumpPassInfo((llvm *)&this[4], (uint64_t)v36, 0, 6, v49, v50);
      if (dword_1EBD066F8 >= 4)
      {
        int v107 = v109;
        uint64_t v108 = 0x800000000;
        long long v110 = v112;
        uint64_t v111 = 0x200000000;
        unsigned int v113 = v115;
        uint64_t v114 = 0x200000000;
        long long v116 = &v118;
        uint64_t v117 = 0;
        char v118 = 0;
        ((void (*)(const void ****, void **))(*v36)[10])(v36, &v107);
        llvm::PMDataManager::dumpAnalysisUsage((llvm *)&this[4], "Required", 8uLL, (unint64_t)v36, (uint64_t)&v107);
        sub_1CC5F62A0((uint64_t)&v107);
      }
      llvm::PMDataManager::initializeAnalysisImpl((llvm::PMTopLevelManager **)&this[4], v36);
      uint64_t v52 = **(void **)(*(void *)&this[59] + 32);
      LODWORD(v108) = 0;
      int v107 = &unk_1F26174E8;
      v109[1] = v36;
      v109[2] = v52;
      v109[3] = 0;
      PassTimer = (llvm::Timer *)llvm::getPassTimer((llvm *)v36, v53);
      unsigned int v55 = PassTimer;
      if (PassTimer) {
        llvm::Timer::startTimer(PassTimer);
      }
      int v57 = ((uint64_t (*)(const void ****, void, int32x2_t *))(*v36)[17])(v36, *(void *)&this[59], this);
      if (v30)
      {
        unsigned int v92 = llvm::Function::getInstructionCount(a2);
        if (v92 != v98)
        {
          unsigned int v97 = v92;
          unint64_t v99 = v92 - (unint64_t)v98;
          llvm::PMDataManager::emitInstrCountChangedRemark((uint64_t)&this[4], (uint64_t)v36, v101, v99, v100, (uint64_t)&v104, (uint64_t **)a2);
          v100 += v99;
          unsigned int v98 = v97;
        }
      }
      if (v55) {
        llvm::Timer::stopTimer(v55);
      }
      if (v57)
      {
        if (this[60].i8[0])
        {
          size_t v75 = 14;
          int v76 = "<deleted loop>";
LABEL_73:
          llvm::PMDataManager::dumpPassInfo((llvm *)&this[4], (uint64_t)v36, 1, 6, v76, v75);
          goto LABEL_48;
        }
        int64_t v77 = **(uint64_t *****)(*(void *)&this[59] + 32);
        if (!v77 || (*((unsigned char *)v77 + 23) & 0x10) == 0)
        {
          size_t v75 = 14;
          int v76 = "<unnamed loop>";
          goto LABEL_73;
        }
        uint64_t v78 = ***v77;
        uint64_t v79 = *(void *)(v78 + 152);
        uint64_t v80 = *(unsigned int *)(v78 + 168);
        if (v80)
        {
          LODWORD(v81) = (v80 - 1) & ((v77 >> 4) ^ (v77 >> 9));
          long long v82 = (uint64_t ****)(v79 + 16 * v81);
          unint64_t v83 = *v82;
          if (*v82 == v77)
          {
LABEL_81:
            unsigned int v84 = v82[1];
            size_t v85 = (size_t)*v84;
            int v76 = (const char *)(v84 + 2);
            size_t v75 = v85;
            goto LABEL_73;
          }
          int v87 = 1;
          while (v83 != (uint64_t ***)-4096)
          {
            int v88 = v81 + v87++;
            uint64_t v81 = v88 & (v80 - 1);
            unint64_t v83 = *(uint64_t ****)(v79 + 16 * v81);
            if (v83 == v77)
            {
              long long v82 = (uint64_t ****)(v79 + 16 * v81);
              goto LABEL_81;
            }
          }
        }
        long long v82 = (uint64_t ****)(v79 + 16 * v80);
        goto LABEL_81;
      }
LABEL_48:
      if (dword_1EBD066F8 >= 4)
      {
        int v107 = v109;
        uint64_t v108 = 0x800000000;
        long long v110 = v112;
        uint64_t v111 = 0x200000000;
        unsigned int v113 = v115;
        uint64_t v114 = 0x200000000;
        long long v116 = &v118;
        uint64_t v117 = 0;
        char v118 = 0;
        ((void (*)(const void ****, void **))(*v36)[10])(v36, &v107);
        llvm::PMDataManager::dumpAnalysisUsage((llvm *)&this[4], "Preserved", 9uLL, (unint64_t)v36, (uint64_t)&v113);
        sub_1CC5F62A0((uint64_t)&v107);
      }
      if (!this[60].i8[0])
      {
        uint64_t v58 = (llvm::Timer *)llvm::getPassTimer(v102, v56);
        if (v58)
        {
          uint64_t v93 = v58;
          llvm::Timer::startTimer(v58);
          llvm::Timer::stopTimer(v93);
        }
        unsigned __int32 v59 = *(void (**)(void))(***(void ***)a2 + 136);
        if (v59) {
          v59();
        }
      }
      if (v57) {
        llvm::PMDataManager::removeNotPreservedAnalysis((llvm::PMDataManager *)&this[4], (llvm::Pass *)v36);
      }
      llvm::PMDataManager::recordAvailableAnalysis((llvm::PMDataManager *)&this[4], (llvm::Pass *)v36);
      if (this[60].i8[0])
      {
        size_t v71 = 9;
        uint64_t v70 = "<deleted>";
      }
      else
      {
        uint64_t v60 = **(uint64_t *****)(*(void *)&this[59] + 32);
        if ((*((unsigned char *)v60 + 23) & 0x10) != 0)
        {
          uint64_t v61 = ***v60;
          uint64_t v62 = *(void *)(v61 + 152);
          uint64_t v63 = *(unsigned int *)(v61 + 168);
          if (v63)
          {
            LODWORD(v64) = (v63 - 1) & ((v60 >> 4) ^ (v60 >> 9));
            int v65 = (uint64_t ****)(v62 + 16 * v64);
            unsigned int v66 = *v65;
            if (*v65 == v60)
            {
LABEL_65:
              uint64_t v69 = v65[1];
              size_t v72 = (size_t)*v69;
              uint64_t v70 = (char *)(v69 + 2);
              size_t v71 = v72;
              goto LABEL_66;
            }
            int v67 = 1;
            while (v66 != (uint64_t ***)-4096)
            {
              int v68 = v64 + v67++;
              uint64_t v64 = v68 & (v63 - 1);
              unsigned int v66 = *(uint64_t ****)(v62 + 16 * v64);
              if (v66 == v60)
              {
                int v65 = (uint64_t ****)(v62 + 16 * v64);
                goto LABEL_65;
              }
            }
          }
          int v65 = (uint64_t ****)(v62 + 16 * v63);
          goto LABEL_65;
        }
        size_t v71 = 0;
        uint64_t v70 = &byte_1CFBCE98E;
      }
LABEL_66:
      llvm::PMDataManager::removeDeadPasses(this + 4, (uint64_t)v36, v70, v71, 6);
      int v74 = this[60].u8[0];
      if (*v34) {
        llvm::timeTraceProfilerEnd(v73);
      }
      v17 |= v57;
      if (v74) {
        break;
      }
      ++v35;
    }
    while (v35 < this[7].u32[0]);
    if (this[60].i8[0] && this[7].i32[0])
    {
      unint64_t v86 = 0;
      do
        llvm::PMDataManager::freePass(this + 4, *(llvm **)(*(void *)&this[6] + 8 * v86++), "<deleted>", 9uLL, 6);
      while (v86 < this[7].u32[0]);
    }
LABEL_86:
    --*(void *)&this[57];
    sub_1CC08F314(&this[52]);
    int32x2_t v33 = this[57];
  }
  while (v33);
LABEL_96:
  if (this[7].i32[0])
  {
    unint64_t v89 = 0;
    do
    {
      uint64_t v90 = *(void *)(*(void *)&this[6] + 8 * v89);
      v17 |= (*(uint64_t (**)(uint64_t))(*(void *)v90 + 152))(v90);
      ++v89;
    }
    while (v89 < this[7].u32[0]);
  }
  if (HIDWORD(v105) && v105)
  {
    uint64_t v94 = 0;
    do
    {
      int v95 = *(llvm **)((char *)v104 + v94);
      if (v95 != (llvm *)-8 && v95 != 0) {
        llvm::deallocate_buffer(v95, (void *)(*(void *)v95 + 17));
      }
      v94 += 8;
    }
    while (8 * v105 != v94);
  }
  free(v104);
  return v17 & 1;
}

void sub_1CC08E470(uint64_t a1, void *a2)
{
  uint64_t v6 = a1;
  sub_1CC08E690(a2, &v6);
  uint64_t v4 = *(void *)(v6 + 8);
  for (uint64_t i = *(void *)(v6 + 16); i != v4; i -= 8)
  {
    uint64_t v5 = *(void *)(i - 8);
    sub_1CC08E470(v5, a2);
  }
}

uint64_t llvm::LoopPass::skipLoop(llvm::LoopPass *this, const llvm::Loop *a2)
{
  uint64_t v2 = *(void *)(**((void **)a2 + 4) + 56);
  if (!v2) {
    return 0;
  }
  uint64_t OptPassGate = llvm::LLVMContextImpl::getOptPassGate(***(llvm::LLVMContextImpl ****)v2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)OptPassGate + 24))(OptPassGate))
  {
    char v9 = 4;
    strcpy((char *)__p, "loop");
    int v7 = (*(uint64_t (**)(uint64_t, llvm::LoopPass *, void **, uint64_t))(*(void *)OptPassGate + 16))(OptPassGate, this, __p, 4);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (!v7) {
      return 1;
    }
  }
  uint64_t v5 = *(void *)(v2 + 112);
  if (!v5) {
    return 0;
  }
  return (*(unsigned __int8 *)(v5 + 17) >> 3) & 1;
}

void sub_1CC08E5D4()
{
}

const char *sub_1CC08E678()
{
  return "Loop Pass Manager";
}

uint64_t sub_1CC08E688()
{
  return 0;
}

void sub_1CC08E690(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1CD4A5364((uint64_t)a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1CC08E71C(void **this)
{
  *this = &unk_1F2605580;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC08E77C(void **this)
{
  *this = &unk_1F2605580;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC08E7F0()
{
  return "Print Loop IR";
}

void sub_1CC08E800(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC08E80C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40) - v2;
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 8 * (v3 >> 3);
  while (!*(void *)v2)
  {
    v2 += 8;
    v6 -= 8;
    if (!v6) {
      return 0;
    }
  }
  uint64_t v7 = *(uint64_t ****)(*(void *)v2 + 56);
  if ((*((unsigned char *)v7 + 23) & 0x10) != 0)
  {
    uint64_t v8 = ***v7;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
      unint64_t v13 = *v12;
      if (*v12 == v7)
      {
LABEL_14:
        int32x2_t v16 = v12[1];
        std::string::size_type v19 = (std::string::size_type)*v16;
        int v17 = (const std::string::value_type *)(v16 + 2);
        std::string::size_type v18 = v19;
        goto LABEL_15;
      }
      int v14 = 1;
      while (v13 != (uint64_t ***)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        unint64_t v13 = *(uint64_t ****)(v9 + 16 * v11);
        if (v13 == v7)
        {
          uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
          goto LABEL_14;
        }
      }
    }
    uint64_t v12 = (uint64_t ****)(v9 + 16 * v10);
    goto LABEL_14;
  }
  std::string::size_type v18 = 0;
  int v17 = &byte_1CFBCE98E;
LABEL_15:
  if (llvm::isFunctionInPrintList(v17, v18)) {
    llvm::printLoop((llvm::Value ***)a2, *(llvm::raw_ostream **)(a1 + 32), a1 + 40);
  }
  return 0;
}

void **sub_1CC08E90C(void **a1)
{
  sub_1CD4A57BC(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

int64x2_t *sub_1CC08E984(int64x2_t *result, char *a2, uint64_t a3, char *a4, unint64_t a5, char *a6, uint64_t a7, unint64_t *a8)
{
  if (a5 != a3)
  {
    uint64_t v8 = ((uint64_t)(a5 - *(void *)a4) >> 3) + ((a4 - a2) << 6) - ((a3 - *(void *)a2) >> 3);
    if (v8 >= 1)
    {
      while (1)
      {
        uint64_t v9 = *(void *)a4;
        if (a5 == *(void *)a4)
        {
          uint64_t v10 = *((void *)a4 - 1);
          a4 -= 8;
          uint64_t v9 = v10;
          a5 = v10 + 4096;
        }
        unint64_t v11 = a5 - 8;
        uint64_t v12 = (uint64_t)(a5 - v9) >> 3;
        unint64_t v13 = a5 - 8 * v8;
        if (v12 <= v8) {
          unint64_t v13 = v9;
        }
        if (v12 >= v8) {
          uint64_t v12 = v8;
        }
        unint64_t v14 = *a8;
        BOOL v15 = *a8 >= a5 || v13 > v14;
        if (v15) {
          goto LABEL_21;
        }
        if (v11 == a7) {
          break;
        }
        uint64_t v16 = ((uint64_t)(v11 - v9) >> 3) + ((a4 - a6) << 6) - ((a7 - *(void *)a6) >> 3) + 1;
        if (((uint64_t)(v11 - v9) >> 3) + ((a4 - a6) << 6) - ((a7 - *(void *)a6) >> 3) != -1) {
          goto LABEL_17;
        }
LABEL_20:
        *a8 = v14;
LABEL_21:
        if (a5 != v13)
        {
          int64x2_t v18 = result[2];
          do
          {
            if (a7 == *(void *)a6)
            {
              uint64_t v19 = *((void *)a6 - 1);
              a6 -= 8;
              a7 = v19 + 4096;
            }
            uint64_t v20 = *(void *)(a5 - 8);
            a5 -= 8;
            *(void *)(a7 - 8) = v20;
            a7 -= 8;
            int64x2_t v18 = vaddq_s64(v18, (int64x2_t)xmmword_1CFAC3CB0);
          }
          while (a5 != v13);
          result[2] = v18;
        }
        if (v12 == 1)
        {
          a5 = v11;
        }
        else
        {
          uint64_t v21 = ((uint64_t)(v11 - *(void *)a4) >> 3) - (v12 - 1);
          if (v21 < 1)
          {
            unint64_t v22 = 511 - v21;
            a4 -= 8 * (v22 >> 9);
            a5 = *(void *)a4 + 8 * (~(_WORD)v22 & 0x1FF);
          }
          else
          {
            a4 += 8 * ((unint64_t)v21 >> 9);
            a5 = *(void *)a4 + 8 * (v21 & 0x1FF);
          }
        }
        BOOL v15 = v8 <= v12;
        v8 -= v12;
        if (v15) {
          return result;
        }
      }
      uint64_t v16 = 1;
LABEL_17:
      uint64_t v17 = ((uint64_t)(v14 - v9) >> 3) - v16;
      if (v17 < 1) {
        unint64_t v14 = *(void *)&a4[-8 * ((unint64_t)(511 - v17) >> 9)] + 8 * (~(511 - (_WORD)v17) & 0x1FF);
      }
      else {
        unint64_t v14 = *(void *)&a4[((unint64_t)v17 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v17 & 0x1FF);
      }
      goto LABEL_20;
    }
  }
  return result;
}

char *sub_1CC08EB20(char *a1, char *a2, char *a3, char *a4, char *a5, char *a6, unint64_t *a7)
{
  if (a4 != a2)
  {
    v25[11] = v7;
    v25[12] = v8;
    uint64_t v9 = a3;
    uint64_t v10 = ((uint64_t)&a4[-*(void *)a3] >> 3) + ((a3 - a1) << 6) - ((uint64_t)&a2[-*(void *)a1] >> 3);
    if (v10 >= 1)
    {
      while (1)
      {
        uint64_t v12 = *(char **)v9;
        if (a4 == *(char **)v9)
        {
          unint64_t v13 = (char *)*((void *)v9 - 1);
          v9 -= 8;
          uint64_t v12 = v13;
          a4 = v13 + 4096;
        }
        unint64_t v14 = a4 - 8;
        uint64_t v15 = (a4 - v12) >> 3;
        if (v15 >= v10) {
          uint64_t v16 = v10;
        }
        else {
          uint64_t v16 = (a4 - v12) >> 3;
        }
        if (v15 <= v10) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = &a4[-8 * v10];
        }
        unint64_t v18 = *a7;
        BOOL v19 = *a7 >= (unint64_t)a4 || (unint64_t)v17 > v18;
        if (v19) {
          goto LABEL_23;
        }
        if (v14 == a6) {
          break;
        }
        uint64_t v20 = ~((v14 - v12) >> 3) + ((a5 - v9) << 6) + ((uint64_t)&a6[-*(void *)a5] >> 3);
        if (v20) {
          goto LABEL_19;
        }
LABEL_22:
        *a7 = v18;
LABEL_23:
        sub_1CC08ECDC(v25, v17, a4, a5, a6);
        if (v16 == 1)
        {
          a4 = v14;
        }
        else
        {
          uint64_t v22 = ((uint64_t)&v14[-*(void *)v9] >> 3) - (v16 - 1);
          if (v22 < 1)
          {
            unint64_t v23 = 511 - v22;
            v9 -= 8 * (v23 >> 9);
            a4 = (char *)(*(void *)v9 + 8 * (~(_WORD)v23 & 0x1FF));
          }
          else
          {
            v9 += 8 * ((unint64_t)v22 >> 9);
            a4 = (char *)(*(void *)v9 + 8 * (v22 & 0x1FF));
          }
        }
        a5 = (char *)v25[1];
        a6 = (char *)v25[2];
        BOOL v19 = v10 <= v16;
        v10 -= v16;
        if (v19) {
          return a5;
        }
      }
      uint64_t v20 = -1;
LABEL_19:
      uint64_t v21 = v20 + ((uint64_t)(v18 - (void)v12) >> 3);
      if (v21 < 1) {
        unint64_t v18 = *(void *)&v9[-8 * ((unint64_t)(511 - v21) >> 9)] + 8 * (~(511 - (_WORD)v21) & 0x1FF);
      }
      else {
        unint64_t v18 = *(void *)&v9[((unint64_t)v21 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v21 & 0x1FF);
      }
      goto LABEL_22;
    }
  }
  return a5;
}

void *sub_1CC08ECDC(void *result, char *a2, char *a3, void *a4, char *a5)
{
  uint64_t v6 = a4;
  uint64_t v8 = result;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    unint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 3;
      }
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13) {
        double result = memmove(a5, v11, 8 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *uint64_t v8 = v9;
  v8[1] = v6;
  uint64_t v8[2] = a5;
  return result;
}

void **sub_1CC08ED98(void *a1, char *a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((uint64_t)&a5[-*(void *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&a3[-*(void *)a2] >> 3);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = (void **)a1[1];
  uint64_t v9 = (void **)a1[2];
  uint64_t v10 = &v8[v7 >> 9];
  if (v9 == v8) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (char *)*v10 + 8 * (a1[4] & 0x1FFLL);
  }
  if (a3 == v11)
  {
    unint64_t v14 = 0;
    char v15 = 1;
LABEL_13:
    uint64_t v16 = (char **)&v8[v7 >> 9];
    goto LABEL_14;
  }
  uint64_t v12 = ((uint64_t)&a3[-*(void *)a2] >> 3) + ((a2 - (char *)v10) << 6);
  uint64_t v13 = v11 - (unsigned char *)*v10;
  unint64_t v14 = v12 - (v13 >> 3);
  if (v12 == v13 >> 3)
  {
    char v15 = 1;
    a3 = v11;
    goto LABEL_13;
  }
  char v15 = 0;
  if (v12 < 1)
  {
    unint64_t v23 = 511 - v12;
    uint64_t v16 = (char **)&v10[-(v23 >> 9)];
    a3 = &(*v16)[8 * (~(_WORD)v23 & 0x1FF)];
  }
  else
  {
    uint64_t v16 = (char **)&v10[(unint64_t)v12 >> 9];
    a3 = &(*v16)[8 * (v12 & 0x1FF)];
  }
LABEL_14:
  if (v6 >= 1)
  {
    uint64_t v17 = a1[5];
    uint64_t v18 = v6 + ((a3 - *v16) >> 3);
    if (v14 <= (unint64_t)(v17 - v6) >> 1)
    {
      if (v18 < 1)
      {
        uint64_t v20 = &v16[-((unint64_t)(511 - v18) >> 9)];
        uint64_t v21 = *v20;
        uint64_t v22 = ~(511 - (_WORD)v18) & 0x1FF;
      }
      else
      {
        uint64_t v20 = &v16[(unint64_t)v18 >> 9];
        uint64_t v21 = *v20;
        uint64_t v22 = v18 & 0x1FF;
      }
      int v30 = &v21[8 * v22];
      if (v10 == (void **)v16)
      {
        sub_1CC08ECDC(&v48, v11, a3, v20, v30);
      }
      else
      {
        char v47 = v15;
        sub_1CC08ECDC(&v48, *v16, a3, v20, v30);
        unsigned int v31 = v49;
        uint64_t v32 = v50;
        int32x2_t v33 = v16 - 1;
        if (v16 - 1 != (char **)v10)
        {
          int v34 = *(char **)v49;
          do
          {
            unint64_t v35 = *v33;
            uint64_t v36 = *v33 + 4096;
            while (1)
            {
              uint64_t v37 = v32 - v34;
              if ((v36 - v35) >> 3 >= v37 >> 3) {
                uint64_t v38 = v37 >> 3;
              }
              else {
                uint64_t v38 = (v36 - v35) >> 3;
              }
              v36 -= 8 * v38;
              v32 -= 8 * v38;
              if (v38) {
                memmove(v32, v36, 8 * v38);
              }
              if (v36 == v35) {
                break;
              }
              unsigned int v39 = (char *)*((void *)v31 - 1);
              v31 -= 8;
              int v34 = v39;
              uint64_t v32 = v39 + 4096;
            }
            int v34 = *(char **)v31;
            if ((char *)(*(void *)v31 + 4096) == v32)
            {
              uint64_t v40 = (char *)*((void *)v31 + 1);
              v31 += 8;
              int v34 = v40;
              uint64_t v32 = v40;
            }
            --v33;
          }
          while (v33 != (char **)v10);
        }
        sub_1CC08ECDC(&v48, v11, (char *)*v10 + 4096, v31, v32);
        char v15 = v47;
      }
      uint64_t v43 = a1[5] - v6;
      unint64_t v7 = a1[4] + v6;
      a1[4] = v7;
      a1[5] = v43;
      uint64_t v8 = (void **)a1[1];
      if (v7 >= 0x400)
      {
        do
        {
          operator delete(*v8);
          uint64_t v8 = (void **)(a1[1] + 8);
          a1[1] = v8;
          unint64_t v7 = a1[4] - 512;
          a1[4] = v7;
        }
        while (v7 > 0x3FF);
      }
    }
    else
    {
      if (v18 < 1)
      {
        unint64_t v24 = 511 - v18;
        LOWORD(v18) = ~(511 - v18);
        BOOL v19 = &v16[-(v24 >> 9)];
      }
      else
      {
        BOOL v19 = &v16[(unint64_t)v18 >> 9];
      }
      uint64_t v25 = *v19;
      unint64_t v26 = &(*v19)[8 * (v18 & 0x1FF)];
      unint64_t v27 = v17 + v7;
      uint64_t v28 = &v8[v27 >> 9];
      if (v9 == v8) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = (char *)*v28 + 8 * (v27 & 0x1FF);
      }
      uint64_t v48 = v16;
      uint64_t v49 = a3;
      size_t v51 = &v48;
      if (v19 != (char **)v28)
      {
        sub_1CC08F37C((void ****)&v51, v26, v25 + 4096);
        for (uint64_t i = (void **)(v19 + 1); i != v28; ++i)
        {
          uint64_t v42 = *i;
          sub_1CC08F37C((void ****)&v51, v42, v42 + 4096);
        }
        unint64_t v26 = (char *)*v28;
      }
      sub_1CC08F37C((void ****)&v51, v26, v29);
      a1[5] -= v6;
      while (sub_1CC08F314(a1))
        ;
      uint64_t v8 = (void **)a1[1];
      unint64_t v7 = a1[4];
    }
  }
  double result = &v8[v7 >> 9];
  if ((void **)a1[2] == v8)
  {
    uint64_t v45 = 0;
    if (v15) {
      return result;
    }
  }
  else
  {
    uint64_t v45 = (uint64_t)*result + 8 * (v7 & 0x1FF);
    if (v15) {
      return result;
    }
  }
  uint64_t v46 = v14 + ((v45 - (uint64_t)*result) >> 3);
  if (v46 < 1) {
    result -= (unint64_t)(511 - v46) >> 9;
  }
  else {
    result += (unint64_t)v46 >> 9;
  }
  return result;
}

void *sub_1CC08F188(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a1 == a3)
  {
    if (a2 == a4)
    {
LABEL_20:
      a2 = a4;
    }
    else
    {
      while (*a2 != *a5)
      {
        if (++a2 == a4) {
          goto LABEL_20;
        }
      }
    }
    if (!a1)
    {
      a3 = 0;
      goto LABEL_27;
    }
    if ((void *)(*a1 + 4096) == a2)
    {
      unint64_t v11 = (void *)a1[1];
      ++a1;
      a2 = v11;
    }
LABEL_26:
    a3 = a1;
LABEL_27:
    if (a2 != a4)
    {
      uint64_t v12 = a2;
      uint64_t v13 = a3;
      while (1)
      {
        if ((void *)((char *)++v12 - *v13) == (void *)4096)
        {
          unint64_t v14 = (void *)v13[1];
          ++v13;
          uint64_t v12 = v14;
        }
        if (v12 == a4) {
          break;
        }
        if (*v12 != *a5)
        {
          *a2++ = *v12;
          if ((void *)((char *)a2 - *a3) == (void *)4096)
          {
            char v15 = (void *)a3[1];
            ++a3;
            a2 = v15;
          }
        }
      }
    }
    return a3;
  }
  uint64_t v5 = *a1 + 4096;
  if ((void *)v5 != a2)
  {
    while (*a2 != *a5)
    {
      if (++a2 == (void *)v5) {
        goto LABEL_5;
      }
    }
    goto LABEL_26;
  }
LABEL_5:
  uint64_t v6 = a1 + 1;
  if (a1 + 1 != a3)
  {
    while (2)
    {
      uint64_t v7 = 0;
      a1 = v6;
      uint64_t v8 = *v6;
      do
      {
        if (*(void *)(v8 + v7) == *a5)
        {
          a2 = (void *)(v8 + v7);
          goto LABEL_26;
        }
        v7 += 8;
      }
      while (v7 != 4096);
      uint64_t v6 = a1 + 1;
      if (a1 + 1 != a3) {
        continue;
      }
      break;
    }
  }
  a2 = (void *)*a3;
  if ((void *)*a3 != a4)
  {
    uint64_t v9 = 0;
    while (*a2 != *a5)
    {
      ++v9;
      if (++a2 == a4)
      {
        a2 = a4;
        break;
      }
    }
    if (v9 != 512) {
      goto LABEL_27;
    }
    uint64_t v10 = (void *)a1[2];
    a1 += 2;
    a2 = v10;
    goto LABEL_26;
  }
  return a3;
}

BOOL sub_1CC08F314(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 6) - 1;
  }
  unint64_t v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x400)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x3FF;
}

void ****sub_1CC08F37C(void ****result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = *result;
  uint64_t v5 = **result;
  unint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    uint64_t v7 = __src;
    uint64_t v8 = result;
    uint64_t v10 = (char *)*v5++;
    uint64_t v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if ((a3 - v7) >> 3 >= v11 >> 3) {
        uint64_t v12 = v11 >> 3;
      }
      else {
        uint64_t v12 = (a3 - v7) >> 3;
      }
      if (v12) {
        double result = (void ****)memmove(v4, v7, 8 * v12);
      }
      v7 += 8 * v12;
      if (v7 == a3) {
        break;
      }
      uint64_t v13 = (void **)*v5++;
      uint64_t v9 = v13;
      unint64_t v4 = v13;
    }
    v4 += v12;
    if ((char *)*(v5 - 1) + 4096 == (char *)v4) {
      unint64_t v4 = (void **)*v5;
    }
    else {
      --v5;
    }
    uint64_t v3 = *v8;
  }
  *uint64_t v3 = v5;
  v3[1] = v4;
  return result;
}

void *sub_1CC08F43C(void *a1)
{
  *a1 = &unk_1F26056C8;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

uint64_t sub_1CC08F4F0(uint64_t a1)
{
  uint64_t v2 = 840;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0) {
      operator delete(*(void **)(a1 + v2 - 24));
    }
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t getInlinableCS(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16) - 33;
  BOOL v2 = v1 > 0x33;
  uint64_t v3 = (1 << v1) & 0x8000000000041;
  if (v2 || v3 == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(result - 32);
  if (!v5
    || *(unsigned char *)(v5 + 16)
    || *(void *)(v5 + 24) != *(void *)(result + 72)
    || *(void *)(v5 + 72) == v5 + 72 && (*(unsigned char *)(v5 + 34) & 0x80) == 0)
  {
    return 0;
  }
  return result;
}

void llvm::MLInlineAdvisor::MLInlineAdvisor()
{
}

uint64_t llvm::MLInlineAdvisor::getModuleIRSize(llvm::MLInlineAdvisor *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3 != v1 + 24)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (v3) {
        uint64_t v5 = v3 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if (v3 && *(unsigned char *)(v5 + 16) == 3)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_14;
        }
      }
      else if (!*(unsigned char *)(v5 + 16) && *(void *)(v5 + 72) == v5 + 72 && (*(unsigned char *)(v5 + 34) & 0x80) == 0)
      {
        goto LABEL_14;
      }
      v4 += llvm::Function::getInstructionCount((llvm::Function *)v5);
LABEL_14:
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        return v4;
      }
    }
  }
  return 0;
}

void llvm::MLInlineAdvisor::getLocalCalls(llvm::MLInlineAdvisor *this, llvm::Function *a2)
{
}

uint64_t llvm::MLInlineAdvisor::getInitialFunctionLevel(llvm::MLInlineAdvisor *this, const Function *a2)
{
  uint64_t v4 = (uint64_t *)(*((void *)this + 5) + 96);
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  if ((sub_1CB915048(v4, &v12, &v11) & 1) == 0 || !*(void *)(v11 + 8)) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)(*((void *)this + 5) + 96);
  uint64_t v11 = 0;
  uint64_t v12 = a2;
  int v6 = sub_1CB915048(v5, &v12, &v11);
  unint64_t v7 = 0;
  if (v6) {
    unint64_t v7 = *(void *)(v11 + 8);
  }
  uint64_t v8 = (uint64_t **)*((void *)this + 10);
  if (!v8) {
LABEL_11:
  }
    abort();
  while (1)
  {
    while (1)
    {
      unint64_t v9 = (unint64_t)v8[4];
      if (v9 <= v7) {
        break;
      }
      uint64_t v8 = (uint64_t **)*v8;
      if (!v8) {
        goto LABEL_11;
      }
    }
    if (v9 >= v7) {
      return *((unsigned int *)v8 + 10);
    }
    uint64_t v8 = (uint64_t **)v8[1];
    if (!v8) {
      goto LABEL_11;
    }
  }
}

void llvm::MLInlineAdvisor::onPassEntry(llvm::MLInlineAdvisor *this)
{
  uint64_t v2 = *((void *)this + 18);
  for (*((void *)this + 6) -= v2; v2; uint64_t v2 = *((void *)this + 18))
  {
    uint64_t v3 = (void **)*((void *)this + 14);
    uint64_t v4 = (void *)(*(void **)((char *)v3 + ((*((void *)this + 17) >> 6) & 0x3FFFFFFFFFFFFF8)))[*((void *)this + 17) & 0x1FFLL];
    unint64_t v5 = *((void *)this + 17) + 1;
    *((void *)this + 17) = v5;
    *((void *)this + 18) = v2 - 1;
    if (v5 >= 0x400)
    {
      operator delete(*v3);
      *((void *)this + 14) += 8;
      *((void *)this + 17) -= 512;
    }
    if (*v4)
    {
      ++*((void *)this + 6);
      llvm::AnalysisManager<llvm::Function>::getResultImpl();
    }
  }
  *((void *)this + 7) -= *((void *)this + 8);
  *((void *)this + 8) = 0;
}

uint64_t llvm::MLInlineAdvisor::onPassExit(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    *(void *)(result + 64) = 0;
    if (*(_DWORD *)(a2 + 16)) {
      llvm::AnalysisManager<llvm::Function>::getResultImpl();
    }
  }
  return result;
}

void llvm::MLInlineAdvisor::onSuccessfulInlining()
{
  v0[0] = (uint64_t)v2;
  v0[1] = (uint64_t)v2;
  int v1 = 0;
  v2[3] = v4;
  v2[4] = 2;
  int v3 = 0;
  v0[2] = 0x100000002;
  v2[2] = v4;
  v2[0] = &llvm::PreservedAnalyses::AllAnalysesKey;
  sub_1CBFA16F4(v0, (uint64_t)&llvm::FunctionPropertiesAnalysis::Key);
  llvm::AnalysisManager<llvm::Function>::invalidate();
}

void llvm::MLInlineAdvisor::getAdviceImpl(llvm::MLInlineAdvisor *this, llvm::CallBase *a2)
{
}

void llvm::MLInlineAdvisor::getAdviceFromModel(uint64_t a1)
{
}

uint64_t llvm::MLInlineAdvisor::getMandatoryAdvice(llvm::MLInlineAdvisor *this, llvm::CallBase *a2, int a3)
{
  if (!a3 || *((unsigned char *)this + 176)) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  int v3 = *(uint64_t (**)(void))(*(void *)this + 56);

  return v3();
}

void llvm::MLInlineAdvisor::getMandatoryAdviceImpl(llvm::MLInlineAdvisor *this, llvm::CallBase *a2)
{
}

void llvm::MLInlineAdvice::reportContextForRemark(llvm::MLInlineAdvice *this, llvm::DiagnosticInfoOptimizationBase *a2)
{
  uint64_t v4 = (uint64_t ***)*((void *)this + 3);
  if ((*((unsigned char *)v4 + 23) & 0x10) != 0)
  {
    uint64_t v5 = ***v4;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      unint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == v4)
      {
LABEL_9:
        uint64_t v13 = v9[1];
        size_t v16 = (size_t)*v13;
        unint64_t v14 = (char *)(v13 + 2);
        size_t v15 = v16;
        goto LABEL_10;
      }
      int v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        uint64_t v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == v4)
        {
          unint64_t v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    unint64_t v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_9;
  }
  size_t v15 = 0;
  unint64_t v14 = &byte_1CFBCE98E;
LABEL_10:
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Callee", 6uLL, v14, v15);
  sub_1CC090D38((uint64_t)a2, (uint64_t)__dst);
  if (v39 < 0) {
    operator delete(__p);
  }
  if (v37 < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v17 = 0;
  uint64_t v18 = &llvm::FeatureNameMap;
  do
  {
    char v19 = *((unsigned char *)v18 + 23);
    BOOL v20 = v19 < 0;
    if (v19 >= 0) {
      uint64_t v21 = (const std::string::value_type *)v18;
    }
    else {
      uint64_t v21 = (const std::string::value_type *)*v18;
    }
    std::string::size_type v22 = v19 & 0x7F;
    if (v20) {
      std::string::size_type v23 = v18[1];
    }
    else {
      std::string::size_type v23 = v22;
    }
    unint64_t v24 = (unint64_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 32)
                                                                         + 16))(*(void *)(*((void *)this + 1) + 32), v17);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v33, v21, v23, *v24);
    sub_1CC090D38((uint64_t)a2, (uint64_t)&v33);
    if (v35 < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    v18 += 3;
    ++v17;
  }
  while (v17 != 35);
  int v25 = *((unsigned __int8 *)this + 56);
  v28[23] = 12;
  strcpy(v28, "ShouldInline");
  if (v25) {
    unint64_t v26 = "true";
  }
  else {
    unint64_t v26 = "false";
  }
  if (v25) {
    size_t v27 = 4;
  }
  else {
    size_t v27 = 5;
  }
  char v30 = v27;
  memcpy(v29, v26, v27);
  *(unsigned char *)((unint64_t)v29 | v27) = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_1CC090D38((uint64_t)a2, (uint64_t)v28);
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

uint64_t sub_1CC090D38(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = a2;
    sub_1CB8BDF7C((uint64_t)v6, *(const void **)a2, *(void *)(a2 + 8));
    a2 = v4;
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v5 = a2;
    sub_1CB8BDF7C((uint64_t)&__p, *(const void **)(a2 + 24), *(void *)(a2 + 32));
    a2 = v5;
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 48);
  sub_1CC59AF1C((unint64_t *)(a1 + 80), (long long *)v6);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[0]);
  }
  return a1;
}

void llvm::MLInlineAdvice::recordInliningImpl(llvm::MLInlineAdvice *this)
{
  v11[34] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t ***)*((void *)this + 6);
  uint64_t v3 = *(void *)***v2;
  if (*(void *)(v3 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v3 + 72) + 48))(*(void *)(v3 + 72)))
  {
    llvm::DiagnosticLocation::DiagnosticLocation(&v7, (llvm::MLInlineAdvice *)((char *)this + 32));
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)v8, (uint64_t)"inline-ml", (uint64_t)"InliningSuccess", 15, &v7, *((void *)this + 5));
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)v8);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)v8);
    v8[0] = &unk_1F2616800;
    uint64_t v4 = (char *)v9;
    if (v10)
    {
      unint64_t v5 = (unint64_t)v10 << 6;
      do
      {
        uint64_t v6 = (void **)&v4[v5];
        if (v4[v5 - 17] < 0) {
          operator delete(*(v6 - 5));
        }
        if (*((char *)v6 - 41) < 0) {
          operator delete(*(v6 - 8));
        }
        v5 -= 64;
      }
      while (v5);
      uint64_t v4 = (char *)v9;
    }
    if (v4 != (char *)v11) {
      free(v4);
    }
  }
  llvm::MLInlineAdvisor::onSuccessfulInlining();
}

void llvm::MLInlineAdvice::recordInliningWithCalleeDeletedImpl(llvm::MLInlineAdvice *this)
{
  v11[34] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t ***)*((void *)this + 6);
  uint64_t v3 = *(void *)***v2;
  if (*(void *)(v3 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v3 + 72) + 48))(*(void *)(v3 + 72)))
  {
    llvm::DiagnosticLocation::DiagnosticLocation(&v7, (llvm::MLInlineAdvice *)((char *)this + 32));
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)v8, (uint64_t)"inline-ml", (uint64_t)"InliningSuccessWithCalleeDeleted", 32, &v7, *((void *)this + 5));
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)v8);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)v8);
    v8[0] = &unk_1F2616800;
    uint64_t v4 = (char *)v9;
    if (v10)
    {
      unint64_t v5 = (unint64_t)v10 << 6;
      do
      {
        uint64_t v6 = (void **)&v4[v5];
        if (v4[v5 - 17] < 0) {
          operator delete(*(v6 - 5));
        }
        if (*((char *)v6 - 41) < 0) {
          operator delete(*(v6 - 8));
        }
        v5 -= 64;
      }
      while (v5);
      uint64_t v4 = (char *)v9;
    }
    if (v4 != (char *)v11) {
      free(v4);
    }
  }
  llvm::MLInlineAdvisor::onSuccessfulInlining();
}

void llvm::MLInlineAdvice::recordUnsuccessfulInliningImpl(uint64_t *a1)
{
  v11[34] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t ***)a1[6];
  uint64_t v3 = *(void *)***v2;
  if (*(void *)(v3 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v3 + 72) + 48))(*(void *)(v3 + 72)))
  {
    llvm::DiagnosticLocation::DiagnosticLocation(&v7, (const llvm::DebugLoc *)(a1 + 4));
    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v8, (uint64_t)"inline-ml", (uint64_t)"InliningAttemptedAndUnsuccessful", 32, &v7, a1[5]);
    llvm::MLInlineAdvice::reportContextForRemark((llvm::MLInlineAdvice *)a1, (llvm::DiagnosticInfoOptimizationBase *)v8);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)v8);
    v8[0] = &unk_1F2616800;
    uint64_t v4 = (char *)v9;
    if (v10)
    {
      unint64_t v5 = (unint64_t)v10 << 6;
      do
      {
        uint64_t v6 = (void **)&v4[v5];
        if (v4[v5 - 17] < 0) {
          operator delete(*(v6 - 5));
        }
        if (*((char *)v6 - 41) < 0) {
          operator delete(*(v6 - 8));
        }
        v5 -= 64;
      }
      while (v5);
      uint64_t v4 = (char *)v9;
    }
    if (v4 != (char *)v11) {
      free(v4);
    }
  }
}

void llvm::MLInlineAdvice::recordUnattemptedInliningImpl(llvm::MLInlineAdvice *this)
{
  v11[34] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t ***)*((void *)this + 6);
  uint64_t v3 = *(void *)***v2;
  if (*(void *)(v3 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v3 + 72) + 48))(*(void *)(v3 + 72)))
  {
    llvm::DiagnosticLocation::DiagnosticLocation(&v7, (llvm::MLInlineAdvice *)((char *)this + 32));
    llvm::OptimizationRemarkMissed::OptimizationRemarkMissed((uint64_t)v8, (uint64_t)"inline-ml", (uint64_t)"IniningNotAttempted", 19, &v7, *((void *)this + 5));
    llvm::MLInlineAdvice::reportContextForRemark(this, (llvm::DiagnosticInfoOptimizationBase *)v8);
    llvm::OptimizationRemarkEmitter::emit(v2, (llvm::DiagnosticInfoOptimizationBase *)v8);
    v8[0] = &unk_1F2616800;
    uint64_t v4 = (char *)v9;
    if (v10)
    {
      unint64_t v5 = (unint64_t)v10 << 6;
      do
      {
        uint64_t v6 = (void **)&v4[v5];
        if (v4[v5 - 17] < 0) {
          operator delete(*(v6 - 5));
        }
        if (*((char *)v6 - 41) < 0) {
          operator delete(*(v6 - 8));
        }
        v5 -= 64;
      }
      while (v5);
      uint64_t v4 = (char *)v9;
    }
    if (v4 != (char *)v11) {
      free(v4);
    }
  }
}

void *sub_1CC0913F8(void *a1)
{
  *a1 = &unk_1F26046B8;
  uint64_t v2 = (unsigned __int8 *)a1[4];
  if (v2)
  {
    int v3 = *v2;
    if ((v3 - 4) > 0x1E)
    {
      if ((v3 - 3) >= 0xFFFFFFFE) {
        uint64_t v5 = a1[4];
      }
      else {
        uint64_t v5 = 0;
      }
      if ((v3 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = v5 + 8;
LABEL_11:
        uint64_t v8 = a1 + 4;
        sub_1CC5FA668(v6 + 16, &v8);
        return a1;
      }
      if (v3 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return a1;
}

void sub_1CC0914C0(void *a1)
{
  *a1 = &unk_1F26046B8;
  int v1 = (unsigned __int8 *)a1[4];
  if (!v1) {
    goto LABEL_5;
  }
  int v2 = *v1;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      uint64_t v3 = a1[4];
    }
    else {
      uint64_t v3 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = v3 + 8;
LABEL_13:
      unint64_t v6 = a1 + 4;
      sub_1CC5FA668(v4 + 16, &v6);
      goto LABEL_5;
    }
    if (v2 == 3) {
      *((void *)v1 + 1) = 0;
    }
  }
  else if ((v1[1] & 0x7F) == 2 || *((_DWORD *)v1 + 3))
  {
    uint64_t v5 = *((void *)v1 + 2);
    if ((v5 & 4) != 0)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_13;
      }
    }
  }
LABEL_5:

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0915AC(uint64_t a1)
{
  sub_1CC0917E4(a1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CC0915E4(uint64_t a1, llvm::raw_ostream *this)
{
  unint64_t v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x18uLL)
  {
    qmemcpy(v4, "[MLInlineAdvisor] Nodes: ", 25);
    *((void *)this + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(this, "[MLInlineAdvisor] Nodes: ", 0x19uLL);
  }
  llvm::raw_ostream::operator<<(this, *(void *)(a1 + 48));
  uint64_t v5 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 7uLL)
  {
    *uint64_t v5 = 0x203A736567644520;
    *((void *)this + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(this, " Edges: ", 8uLL);
  }
  double result = llvm::raw_ostream::operator<<(this, *(void *)(a1 + 56));
  uint64_t v7 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v7)
  {
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *uint64_t v7 = 10;
    ++*((void *)this + 4);
  }
  return result;
}

void sub_1CC091700(void *a1)
{
  *a1 = &unk_1F26056C8;
  int v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC0917C8(uint64_t result)
{
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1CC0917E4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2605630;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 152), 8);
  int v2 = *(void ***)(a1 + 112);
  uint64_t v3 = *(void ***)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 120);
      int v2 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 136) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8 != v9) {
      *(void *)(a1 + 120) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  unsigned int v10 = *(void **)(a1 + 104);
  if (v10) {
    operator delete(v10);
  }
  sub_1CBB0D544(*(void **)(a1 + 80));
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  llvm::InlineAdvisor::~InlineAdvisor((llvm::InlineAdvisor *)a1);
}

uint64_t sub_1CC09191C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v12 = 0;
  uint64_t result = sub_1CC091A20(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v7 = v12;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v9 = 0;
    goto LABEL_8;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_10;
  }
  if (v8 + ~v10 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_10:
    sub_1CC091AB4(a2, v8);
    int v12 = 0;
    uint64_t result = sub_1CC091A20(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    uint64_t v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v9 = 1;
LABEL_8:
  uint64_t v11 = *(void *)a2 + 8 * v8;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1CC091A20(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC091AB4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 8 * v3;
      unsigned int v13 = (uint64_t *)v4;
      do
      {
        uint64_t v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v17 = 0;
          sub_1CC091A20(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *uint64_t v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    do
    {
      *result++ = -4096;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void sub_1CC091BF0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v5 = *(void **)(a1 + 8);
    unint64_t v6 = *(char **)(a1 + 16);
    uint64_t v9 = *v5;
    int v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_72:
      *(void *)unint64_t v6 = v8;
      goto LABEL_73;
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v32 = 1;
      }
      else {
        unint64_t v32 = (v6 - v10) >> 2;
      }
      if (!(v32 >> 61))
      {
        std::string v33 = (char *)operator new(8 * v32);
        int v34 = &v33[8 * (v32 >> 2)];
        char v35 = &v33[8 * v32];
        uint64_t v37 = v6 - v7;
        BOOL v36 = v6 == v7;
        unint64_t v6 = v34;
        if (!v36)
        {
          unint64_t v6 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v38 = 8 * (v37 >> 3);
          char v39 = &v33[8 * (v32 >> 2)];
          do
          {
            uint64_t v40 = *(void *)v7;
            v7 += 8;
            *(void *)char v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        goto LABEL_28;
      }
LABEL_84:
      sub_1CB833614();
    }
LABEL_5:
    uint64_t v12 = v11 >> 3;
    if (v12 >= -1) {
      uint64_t v13 = v12 + 1;
    }
    else {
      uint64_t v13 = v12 + 2;
    }
    uint64_t v14 = -(v13 >> 1);
    uint64_t v15 = v13 >> 1;
    uint64_t v16 = &v7[-8 * v15];
    size_t v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      int v7 = *(char **)(a1 + 8);
    }
    unint64_t v6 = &v16[v17];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = v6;
    goto LABEL_72;
  }
  char v19 = *(char **)(a1 + 16);
  uint64_t v18 = *(char **)(a1 + 24);
  uint64_t v21 = *(char **)a1;
  BOOL v20 = *(char **)(a1 + 8);
  uint64_t v22 = v19 - v20;
  uint64_t v23 = (uint64_t)&v18[-*(void *)a1];
  if (v19 - v20 < (unint64_t)v23)
  {
    unint64_t v24 = operator new(0x1000uLL);
    int v25 = v24;
    if (v18 != v19)
    {
      *(void *)char v19 = v24;
LABEL_73:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v20 == v21)
    {
      if (v19 == v20) {
        unint64_t v60 = 1;
      }
      else {
        unint64_t v60 = (v18 - v20) >> 2;
      }
      if (v60 >> 61) {
        goto LABEL_84;
      }
      uint64_t v61 = (char *)operator new(8 * v60);
      uint64_t v41 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v62 = v41;
      if (v19 != v20)
      {
        uint64_t v62 = &v41[v22 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v63 = 8 * (v22 >> 3);
        uint64_t v64 = &v61[(2 * v60 + 6) & 0xFFFFFFFFFFFFFFF8];
        int v65 = v20;
        do
        {
          uint64_t v66 = *(void *)v65;
          v65 += 8;
          *(void *)uint64_t v64 = v66;
          v64 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      *(void *)a1 = v61;
      *(void *)(a1 + 8) = v41;
      *(void *)(a1 + 16) = v62;
      *(void *)(a1 + 24) = &v61[8 * v60];
      if (v20)
      {
        operator delete(v20);
        uint64_t v41 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v41 = v20;
    }
    *((void *)v41 - 1) = v25;
    int v7 = *(char **)(a1 + 8);
    unint64_t v6 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    *(void *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24)) {
      goto LABEL_72;
    }
    uint64_t v10 = *(char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      if (v6 == v10) {
        unint64_t v67 = 1;
      }
      else {
        unint64_t v67 = (v6 - v10) >> 2;
      }
      if (!(v67 >> 61))
      {
        std::string v33 = (char *)operator new(8 * v67);
        int v34 = &v33[8 * (v67 >> 2)];
        char v35 = &v33[8 * v67];
        uint64_t v68 = v6 - v7;
        BOOL v36 = v6 == v7;
        unint64_t v6 = v34;
        if (!v36)
        {
          unint64_t v6 = &v34[v68 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v69 = 8 * (v68 >> 3);
          uint64_t v70 = &v33[8 * (v67 >> 2)];
          do
          {
            uint64_t v71 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v70 = v71;
            v70 += 8;
            v69 -= 8;
          }
          while (v69);
        }
LABEL_28:
        *(void *)a1 = v33;
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v6;
        *(void *)(a1 + 24) = v35;
        if (v10)
        {
          operator delete(v10);
          unint64_t v6 = *(char **)(a1 + 16);
        }
        goto LABEL_72;
      }
      goto LABEL_84;
    }
    goto LABEL_5;
  }
  uint64_t v26 = v23 >> 2;
  if (v18 == v21) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_84;
  }
  uint64_t v28 = (char *)operator new(8 * v27);
  uint64_t v29 = &v28[v22];
  char v30 = &v28[8 * v27];
  uint64_t v31 = operator new(0x1000uLL);
  if (v27 == v22 >> 3)
  {
    if (v22 < 1)
    {
      if (v19 == v20) {
        unint64_t v42 = 1;
      }
      else {
        unint64_t v42 = v22 >> 2;
      }
      if (v42 >> 61) {
        goto LABEL_84;
      }
      uint64_t v43 = (char *)operator new(8 * v42);
      uint64_t v29 = &v43[8 * (v42 >> 2)];
      char v30 = &v43[8 * v42];
      operator delete(v28);
      BOOL v20 = *(char **)(a1 + 8);
      char v19 = *(char **)(a1 + 16);
      uint64_t v28 = v43;
    }
    else
    {
      v29 -= (4 * v27 + 4) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  *(void *)uint64_t v29 = v31;
  uint64_t v44 = v29 + 8;
  if (v19 != v20)
  {
    while (1)
    {
      if (v29 == v28)
      {
        if (v44 < v30)
        {
          uint64_t v46 = (v30 - v44) >> 3;
          if (v46 >= -1) {
            unint64_t v47 = v46 + 1;
          }
          else {
            unint64_t v47 = v46 + 2;
          }
          uint64_t v48 = &v44[8 * (v47 >> 1)];
          uint64_t v45 = &v48[-(v44 - v29)];
          size_t v49 = v44 - v29;
          BOOL v36 = v44 == v29;
          uint64_t v44 = v48;
          if (!v36) {
            memmove(v45, v29, v49);
          }
          goto LABEL_55;
        }
        if (v30 == v29) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (v30 - v29) >> 2;
        }
        if (v50 >> 61) {
          goto LABEL_84;
        }
        size_t v51 = (char *)operator new(8 * v50);
        uint64_t v28 = v51;
        uint64_t v45 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v52 = v44 - v29;
        BOOL v36 = v44 == v29;
        uint64_t v44 = v45;
        if (!v36)
        {
          uint64_t v44 = &v45[v52 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v53 = 8 * (v52 >> 3);
          uint64_t v54 = &v51[(2 * v50 + 6) & 0xFFFFFFFFFFFFFFF8];
          unsigned int v55 = v29;
          do
          {
            uint64_t v56 = *(void *)v55;
            v55 += 8;
            *(void *)uint64_t v54 = v56;
            v54 += 8;
            v53 -= 8;
          }
          while (v53);
        }
        char v30 = &v51[8 * v50];
        operator delete(v29);
      }
      else
      {
        uint64_t v45 = v29;
      }
      uint64_t v29 = v28;
LABEL_55:
      uint64_t v28 = v29;
      uint64_t v57 = *((void *)v19 - 1);
      v19 -= 8;
      *((void *)v45 - 1) = v57;
      uint64_t v58 = v45 - 8;
      uint64_t v29 = v58;
      if (v19 == *(char **)(a1 + 8)) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v58 = v29;
LABEL_58:
  unsigned __int32 v59 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v58;
  *(void *)(a1 + 16) = v44;
  *(void *)(a1 + 24) = v30;
  if (v59)
  {
    operator delete(v59);
  }
}

void sub_1CC092054()
{
}

uint64_t sub_1CC092084(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  *(void *)llvm::InlineAdvice::InlineAdvice(a1, a2, a3, a4, a5) = &unk_1F2605688;
  if (*(unsigned char *)(a2 + 176))
  {
    *(void *)(a1 + 64) = 0;
LABEL_4:
    *(void *)(a1 + 72) = 0;
    goto LABEL_5;
  }
  unsigned int InstructionCount = llvm::Function::getInstructionCount(*(llvm::Function **)(a1 + 16));
  int v8 = *(unsigned __int8 *)(a2 + 176);
  *(void *)(a1 + 64) = InstructionCount;
  if (v8) {
    goto LABEL_4;
  }
  unsigned int v10 = llvm::Function::getInstructionCount(*(llvm::Function **)(a1 + 24));
  int v11 = *(unsigned __int8 *)(a2 + 176);
  *(void *)(a1 + 72) = v10;
  if (!v11) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
LABEL_5:
  *(void *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_1CC092160()
{
  uint64_t v0 = sub_1CB883A14((uint64_t)&qword_1EBCC6820, 0, 0);
  dword_1EBCC68A0 = 0;
  qword_1EBCC68A8 = (uint64_t)&unk_1F2605730;
  *(void *)&dword_1EBCC68B0 = 0;
  qword_1EBCC6820 = (uint64_t)&unk_1F26056C8;
  qword_1EBCC68B8 = (uint64_t)&unk_1F2643E70;
  qword_1EBCC68C0 = (uint64_t)&unk_1F2605750;
  qword_1EBCC68D8 = (uint64_t)&qword_1EBCC68C0;
  llvm::cl::Option::setArgStr(v0, "ml-advisor-size-increase-threshold", 0x22uLL);
  word_1EBCC682A = word_1EBCC682A & 0xFF9F | 0x20;
  qword_1EBCC6840 = (uint64_t)"Maximum factor by which expected native size may increase before blocking any further inlining.";
  unk_1EBCC6848 = 95;
  dword_1EBCC68A0 = 0x40000000;
  byte_1EBCC68B4 = 1;
  dword_1EBCC68B0 = 0x40000000;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCC6820);
  __cxa_atexit((void (*)(void *))sub_1CC08F43C, &qword_1EBCC6820, &dword_1CB82C000);
  byte_1EBD040BF = 12;
  strcpy((char *)&llvm::FeatureNameMap, "sroa_savings");
  byte_1EBD040D7 = 11;
  strcpy((char *)&qword_1EBD040C0, "sroa_losses");
  byte_1EBD040EF = 16;
  strcpy((char *)&xmmword_1EBD040D8, "load_elimination");
  byte_1EBD04107 = 12;
  strcpy((char *)&qword_1EBD040F0, "call_penalty");
  byte_1EBD0411F = 19;
  strcpy((char *)&xmmword_1EBD04108, "call_argument_setup");
  qword_1EBD04120 = (uint64_t)operator new(0x19uLL);
  strcpy((char *)qword_1EBD04120, "load_relative_intrinsic");
  xmmword_1EBD04128 = xmmword_1CD91A420;
  strcpy(byte_1EBD04138, "lowered_call_arg_setup");
  HIBYTE(word_1EBD0414E) = 22;
  byte_1EBD04167 = 21;
  strcpy(byte_1EBD04150, "indirect_call_penalty");
  byte_1EBD0417F = 18;
  strcpy((char *)&xmmword_1EBD04168, "jump_table_penalty");
  byte_1EBD04197 = 20;
  strcpy(byte_1EBD04180, "case_cluster_penalty");
  byte_1EBD041AF = 14;
  strcpy((char *)&qword_1EBD04198, "switch_penalty");
  qword_1EBD041B0 = (uint64_t)operator new(0x28uLL);
  xmmword_1EBD041B8 = xmmword_1CFAC3CC0;
  strcpy((char *)qword_1EBD041B0, "unsimplified_common_instructions");
  strcpy(&byte_1EBD041DF, "\tdead_blocks");
  strcpy((char *)&qword_1EBD041C8, "num_loops");
  byte_1EBD041F7 = 11;
  qword_1EBD041F8 = (uint64_t)operator new(0x19uLL);
  unk_1EBD04200 = xmmword_1CD91A420;
  strcpy((char *)qword_1EBD041F8, "simplified_instructions");
  byte_1EBD04227 = 13;
  strcpy((char *)&qword_1EBD04210, "constant_args");
  qword_1EBD04228 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_1EBD04230 = xmmword_1CD91A410;
  strcpy((char *)qword_1EBD04228, "constant_offset_ptr_args");
  byte_1EBD04257 = 13;
  strcpy((char *)&qword_1EBD04240, "callsite_cost");
  byte_1EBD0426F = 15;
  strcpy((char *)&qword_1EBD04258, "cold_cc_penalty");
  qword_1EBD04270 = (uint64_t)operator new(0x20uLL);
  strcpy((char *)qword_1EBD04270, "last_call_to_static_bonus");
  byte_1EBD0429F = 18;
  xmmword_1EBD04278 = xmmword_1CD91A400;
  strcpy(byte_1EBD04288, "is_multiple_blocks");
  byte_1EBD042B7 = 14;
  strcpy((char *)&qword_1EBD042A0, "nested_inlines");
  qword_1EBD042B8 = (uint64_t)operator new(0x20uLL);
  unk_1EBD042C0 = xmmword_1CFAC3CD0;
  strcpy((char *)qword_1EBD042B8, "nested_inline_cost_estimate");
  byte_1EBD042E7 = 9;
  strcpy((char *)&qword_1EBD042D0, "threshold");
  qword_1EBD042E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_1EBD042F0 = xmmword_1CD91A410;
  strcpy((char *)qword_1EBD042E8, "callee_basic_block_count");
  byte_1EBD04317 = 15;
  strcpy((char *)&qword_1EBD04300, "callsite_height");
  strcpy(&byte_1EBD0432F, "\nnr_ctant_params");
  strcpy((char *)&qword_1EBD04318, "node_count");
  byte_1EBD04347 = 15;
  byte_1EBD0435F = 13;
  strcpy((char *)&qword_1EBD04348, "cost_estimate");
  strcpy(&byte_1EBD04377, "\ncaller_users");
  strcpy((char *)&qword_1EBD04360, "edge_count");
  byte_1EBD0438F = 12;
  qword_1EBD04390 = (uint64_t)operator new(0x28uLL);
  xmmword_1EBD04398 = xmmword_1CFAC3CE0;
  strcpy((char *)qword_1EBD04390, "caller_conditionally_executed_blocks");
  qword_1EBD043A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_1EBD043B0 = xmmword_1CD91A410;
  strcpy((char *)qword_1EBD043A8, "caller_basic_block_count");
  qword_1EBD043C0 = (uint64_t)operator new(0x28uLL);
  xmmword_1EBD043C8 = xmmword_1CFAC3CE0;
  strcpy((char *)qword_1EBD043C0, "callee_conditionally_executed_blocks");
  byte_1EBD043EF = 12;
  strcpy((char *)&qword_1EBD043D8, "callee_users");

  return __cxa_atexit((void (*)(void *))sub_1CC08F4F0, &llvm::FeatureNameMap, &dword_1CB82C000);
}

void llvm::initializeMemDepPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC68E8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0928BC;
    v3[1] = &v1;
    unint64_t v2 = v3;
    std::__call_once(&qword_1EBCC68E8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0928BC(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t sub_1CC092960(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC68E0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2605798;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC68E8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0928BC;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCC68E8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC092A18()
{
}

void sub_1CC092A54(uint64_t a1)
{
  *(void *)a1 = &unk_1F2605798;
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = 160 * v2;
    unint64_t v5 = (void *)(v3 + 96);
    do
    {
      if ((*(v5 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v6 = (void *)*(v5 - 2);
        if (v5 != v6) {
          free(v6);
        }
        if ((*(unsigned char *)(v5 - 11) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v5 - 10), 8);
        }
      }
      v5 += 20;
      v4 -= 160;
    }
    while (v4);
    uint64_t v3 = *(void *)(a1 + 40);
  }
  MEMORY[0x1D25D9CD0](v3, 8);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC092B18(uint64_t a1)
{
  *(void *)a1 = &unk_1F2605798;
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = 160 * v2;
    unint64_t v5 = (void *)(v3 + 96);
    do
    {
      if ((*(v5 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unint64_t v6 = (void *)*(v5 - 2);
        if (v5 != v6) {
          free(v6);
        }
        if ((*(unsigned char *)(v5 - 11) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(v5 - 10), 8);
        }
      }
      v5 += 20;
      v4 -= 160;
    }
    while (v4);
    uint64_t v3 = *(void *)(a1 + 40);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC092BF0(uint64_t a1, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = v3 + 72;
  uint64_t v5 = *(void *)(v3 + 80);
  if (v5 != v3 + 72)
  {
    uint64_t v7 = a1;
    while (1)
    {
      uint64_t v8 = v5 - 24;
      if (!v5) {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void *)(v8 + 48);
      if (v9 != v8 + 40) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4) {
        return;
      }
    }
    while (1)
    {
      if (v9) {
        uint64_t v10 = v9 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v32 = 0;
      if (sub_1CC09367C(*(void *)(v7 + 40), *(_DWORD *)(v7 + 56), v10, &v32))
      {
        uint64_t v11 = v32;
        uint64_t v12 = *(void *)(v7 + 40);
        unsigned int v13 = *(_DWORD *)(v7 + 56);
      }
      else
      {
        uint64_t v12 = *(void *)(v7 + 40);
        unsigned int v13 = *(_DWORD *)(v7 + 56);
        uint64_t v11 = v12 + 160 * v13;
      }
      if (v11 != v12 + 160 * v13)
      {
        uint64_t v28 = (llvm::Value *)v10;
        uint64_t v29 = v4;
        uint64_t v30 = v7;
        uint64_t v16 = *(unsigned int *)(v11 + 88);
        if (v16)
        {
          uint64_t v18 = *(unint64_t **)(v11 + 80);
          char v19 = &v18[2 * v16];
          do
          {
            unint64_t v20 = *v18;
            uint64_t v21 = (llvm::Value *)v18[1];
            uint64_t v22 = (_DWORD *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v22 > 3uLL)
            {
              _DWORD *v22 = 538976288;
              uint64_t v23 = (char *)(*((void *)a2 + 4) + 4);
              *((void *)a2 + 4) = v23;
            }
            else
            {
              llvm::raw_ostream::write(a2, "    ", 4uLL);
              uint64_t v23 = (char *)*((void *)a2 + 4);
            }
            unint64_t v24 = off_1E682C830[(v20 >> 1) & 3];
            size_t v25 = strlen(v24);
            size_t v26 = v25;
            if (v25 <= *((void *)a2 + 3) - (void)v23)
            {
              if (v25)
              {
                memcpy(v23, v24, v25);
                uint64_t v23 = (char *)(*((void *)a2 + 4) + v26);
                *((void *)a2 + 4) = v23;
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, v24, v25);
              uint64_t v23 = (char *)*((void *)a2 + 4);
            }
            unint64_t v27 = (char *)*((void *)a2 + 3);
            if (v21)
            {
              if ((unint64_t)(v27 - v23) > 9)
              {
                *((_WORD *)v23 + 4) = 8299;
                *(void *)uint64_t v23 = *(void *)" in block ";
                *((void *)a2 + 4) += 10;
              }
              else
              {
                llvm::raw_ostream::write(a2, " in block ", 0xAuLL);
              }
              llvm::Value::printAsOperand(v21, a2, 0, a3);
              unint64_t v27 = (char *)*((void *)a2 + 3);
              uint64_t v23 = (char *)*((void *)a2 + 4);
            }
            if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if ((unint64_t)(v27 - v23) > 6)
              {
                *(_DWORD *)(v23 + 3) = 540700015;
                *(_DWORD *)uint64_t v23 = 1869768224;
                *((void *)a2 + 4) += 7;
              }
              else
              {
                llvm::raw_ostream::write(a2, " from: ", 7uLL);
              }
              llvm::Value::print((llvm::Value *)(v20 & 0xFFFFFFFFFFFFFFF8), a2, 0);
              unint64_t v27 = (char *)*((void *)a2 + 3);
              uint64_t v23 = (char *)*((void *)a2 + 4);
            }
            if (v27 == v23)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *uint64_t v23 = 10;
              ++*((void *)a2 + 4);
            }
            v18 += 2;
          }
          while (v18 != v19);
        }
        llvm::Value::print(v28, a2, 0);
        size_t v17 = (_WORD *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v17 > 1uLL)
        {
          *size_t v17 = 2570;
          *((void *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, "\n\n", 2uLL);
        }
        uint64_t v4 = v29;
        uint64_t v7 = v30;
      }
      uint64_t v9 = *(void *)(v9 + 8);
      uint64_t v14 = v5 - 24;
      if (!v5) {
        uint64_t v14 = 0;
      }
      if (v9 == v14 + 40) {
        break;
      }
LABEL_22:
      if (v5 == v4) {
        return;
      }
    }
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4) {
        break;
      }
      uint64_t v15 = v5 - 24;
      if (!v5) {
        uint64_t v15 = 0;
      }
      uint64_t v9 = *(void *)(v15 + 48);
      if (v9 != v15 + 40) {
        goto LABEL_22;
      }
    }
  }
}

void sub_1CC092F50(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CC092FD0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  if (!v2 && !*(_DWORD *)(a1 + 52)) {
    goto LABEL_40;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!v3)
    {
LABEL_23:
      *(void *)(a1 + 48) = 0;
      goto LABEL_40;
    }
    uint64_t v9 = 160 * v3;
    uint64_t v10 = (void *)(v4 + 96);
    while (1)
    {
      uint64_t v11 = *(v10 - 12);
      if (v11 == -8192) {
        goto LABEL_21;
      }
      if (v11 != -4096) {
        break;
      }
LABEL_22:
      v10 += 20;
      v9 -= 160;
      if (!v9) {
        goto LABEL_23;
      }
    }
    uint64_t v12 = (void *)*(v10 - 2);
    if (v10 != v12) {
      free(v12);
    }
    if ((*(unsigned char *)(v10 - 11) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(v10 - 10), 8);
    }
LABEL_21:
    *(v10 - 12) = -4096;
    goto LABEL_22;
  }
  uint64_t v5 = (void *)(a1 + 40);
  uint64_t v6 = 160 * v3;
  uint64_t v7 = (void *)(v4 + 96);
  do
  {
    if ((*(v7 - 12) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v8 = (void *)*(v7 - 2);
      if (v7 != v8) {
        free(v8);
      }
      if ((*(unsigned char *)(v7 - 11) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(v7 - 10), 8);
      }
    }
    v7 += 20;
    v6 -= 160;
  }
  while (v6);
  int v13 = 1 << (33 - __clz(v2 - 1));
  if (v13 <= 64) {
    int v13 = 64;
  }
  if (v2) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 == *(_DWORD *)(a1 + 56))
  {
    *(void *)(a1 + 48) = 0;
    if (v14)
    {
      uint64_t v15 = *(void **)(a1 + 40);
      uint64_t v16 = 160 * v14;
      do
      {
        *uint64_t v15 = -4096;
        v15 += 20;
        v16 -= 160;
      }
      while (v16);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*v5, 8);
    if (v14)
    {
      unint64_t v17 = (4 * (int)v14 / 3u + 1) | ((unint64_t)(4 * (int)v14 / 3u + 1) >> 1);
      unint64_t v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
      LODWORD(v18) = (((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8)) + 1;
      *(_DWORD *)(a1 + 56) = v18;
      char v19 = operator new(160 * v18, (std::align_val_t)8uLL);
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = 0;
      uint64_t v20 = *(unsigned int *)(a1 + 56);
      if (v20)
      {
        uint64_t v21 = 160 * v20;
        do
        {
          *char v19 = -4096;
          v19 += 20;
          v21 -= 160;
        }
        while (v21);
      }
    }
    else
    {
      *uint64_t v5 = 0;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
    }
  }
LABEL_40:
  *(void *)(a1 + 32) = 0;
}

uint64_t sub_1CC0931D0(uint64_t a1, uint64_t a2)
{
  v57[12] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) = a2;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MemoryDependenceWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MemoryDependenceWrapperPass::ID);
  uint64_t v9 = a2 + 72;
  for (uint64_t i = *(void *)(a2 + 80); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v9) {
      return 0;
    }
    uint64_t v11 = i - 24;
    if (!i) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    if (v12 != v11 + 40) {
      break;
    }
  }
  int v13 = (llvm::MemoryDependenceResults *)(v8 + 32);
  uint64_t v14 = a1 + 40;
  while (1)
  {
    uint64_t v15 = v12 - 24;
    if (v12) {
      uint64_t v16 = v12 - 24;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v54 = v16;
    uint64_t v17 = *(unsigned __int8 *)(v16 + 16) - 33;
    if (v17 > 0x37) {
      goto LABEL_20;
    }
    if (((1 << (*(unsigned char *)(v16 + 16) - 33)) & 0x8000000000041) != 0)
    {
      uint64_t v19 = *(void *)(v16 + 64);
      if (!v19 || (*(unsigned char *)(v19 + 20) & 4) == 0 && (*(unsigned char *)(v19 + 17) & 0x10) == 0)
      {
        LODWORD(v55) = 7;
        if (sub_1CC5CB59C(v16, (__int32 *)&v55, 1uLL))
        {
          uint64_t v23 = *(void *)(v16 - 32);
          if (!v23
            || *(unsigned char *)(v23 + 16)
            || *(void *)(v23 + 24) != *(void *)(v16 + 72)
            || *(_DWORD *)(v23 + 36) != 7)
          {
LABEL_47:
            uint64_t v15 = v54;
            goto LABEL_48;
          }
        }
        if (llvm::CallBase::hasFnAttrOnCalledFunction(v16, 66))
        {
          uint64_t v15 = v54;
        }
        else
        {
          int hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v16, 44);
          uint64_t v15 = v54;
          if (!hasFnAttrOnCalledFunction) {
            goto LABEL_48;
          }
        }
      }
LABEL_20:
      uint64_t v18 = *(unsigned __int8 *)(v15 + 16) - 33;
      if (v18 > 0x37) {
        goto LABEL_56;
      }
      if (((1 << (*(unsigned char *)(v15 + 16) - 33)) & 0x8000000000041) != 0)
      {
        uint64_t v21 = *(void *)(v15 + 64);
        if (v21 && (*(unsigned char *)(v21 + 17) & 0x30) != 0) {
          goto LABEL_56;
        }
        int v22 = *(_DWORD *)(v15 + 20);
        if (v22 < 0
          && (uint64_t v43 = v15 - 32 * (v22 & 0x7FFFFFF), v46 = *(void *)(v43 - 8), v44 = v43 - 8, (v45 = v46) != 0))
        {
          uint64_t v47 = -v45;
          while (1)
          {
            unsigned int v48 = *(_DWORD *)(*(void *)(v44 + v47) + 8);
            BOOL v49 = v48 > 7;
            int v50 = (1 << v48) & 0x83;
            if (v49 || v50 == 0) {
              break;
            }
            v47 += 16;
            if (!v47) {
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44) & 1) != 0)
          {
            goto LABEL_56;
          }
        }
      }
      else if (v18 == 27)
      {
        if ((*(_WORD *)(v15 + 18) & 0x301) == 0) {
          goto LABEL_56;
        }
      }
      else if (((1 << (*(unsigned char *)(v15 + 16) - 33)) & 0x808001D0000010) == 0)
      {
        goto LABEL_56;
      }
      goto LABEL_48;
    }
    if (((1 << (*(unsigned char *)(v16 + 16) - 33)) & 0x808001C8000010) != 0) {
      goto LABEL_47;
    }
    if (v17 != 28 || (*(_WORD *)(v16 + 18) & 0x301) == 0) {
      goto LABEL_20;
    }
LABEL_48:
    uint64_t Dependency = llvm::MemoryDependenceResults::getDependency(v13, (llvm::Instruction *)v15);
    if ((Dependency & 0xE000000000000007) == 0x2000000000000003)
    {
      unsigned int v25 = *(unsigned __int8 *)(v15 + 16) - 33;
      if (v25 <= 0x33 && ((1 << v25) & 0x8000000000041) != 0)
      {
        size_t v26 = (uint64_t **)llvm::MemoryDependenceResults::getNonLocalCallDependency(v13, (llvm::CallBase *)v15);
        uint64_t v27 = sub_1CC093714(v14, &v54);
        uint64_t v29 = *v26;
        uint64_t v28 = v26[1];
        if (v29 != v28)
        {
          uint64_t v30 = v27;
          do
          {
            uint64_t v31 = (void *)sub_1CC093ABC(v29[1]);
            uint64_t v32 = *v29;
            v29 += 2;
            unsigned int v55 = v31;
            uint64_t v56 = v32;
            sub_1CC093834(v30, (uint64_t)&v55);
          }
          while (v29 != v28);
        }
      }
      else
      {
        unsigned int v55 = v57;
        uint64_t v56 = 0x400000000;
        llvm::MemoryDependenceResults::getNonLocalPointerDependency((uint64_t)v13, v15, (uint64_t)&v55);
        uint64_t v37 = sub_1CC093714(v14, &v54);
        uint64_t v38 = v55;
        if (v56)
        {
          uint64_t v39 = 24 * v56;
          uint64_t v40 = (uint64_t *)((char *)v55 + 8);
          do
          {
            unint64_t v41 = sub_1CC093ABC(*v40);
            uint64_t v42 = *(v40 - 1);
            v53[0] = v41;
            v53[1] = v42;
            sub_1CC093834(v37, (uint64_t)v53);
            v40 += 3;
            v39 -= 24;
          }
          while (v39);
          uint64_t v38 = v55;
        }
        if (v38 != v57) {
          free(v38);
        }
      }
    }
    else
    {
      uint64_t v33 = Dependency;
      uint64_t v34 = sub_1CC093714(v14, &v54);
      unsigned int v55 = (void *)sub_1CC093ABC(v33);
      uint64_t v56 = 0;
      sub_1CC093834(v34, (uint64_t)&v55);
    }
LABEL_56:
    uint64_t v12 = *(void *)(v12 + 8);
    uint64_t v35 = i - 24;
    if (!i) {
      uint64_t v35 = 0;
    }
    if (v12 == v35 + 40) {
      break;
    }
LABEL_63:
    if (i == v9) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t i = *(void *)(i + 8);
    if (i == v9) {
      return 0;
    }
    uint64_t v36 = i - 24;
    if (!i) {
      uint64_t v36 = 0;
    }
    uint64_t v12 = *(void *)(v36 + 48);
    if (v12 != v36 + 40) {
      goto LABEL_63;
    }
  }
}

uint64_t sub_1CC09367C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 160 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 160 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CC093714(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC09367C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v5 = v9;
  if (v4) {
    return v5 + 8;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC093BF0(a1, v7);
    uint64_t v9 = 0;
    sub_1CC09367C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v5 = *a2;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(void *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1CFAC3CF0;
  *(_OWORD *)(v5 + 32) = xmmword_1CFAC3CF0;
  *(_OWORD *)(v5 + 48) = xmmword_1CFAC3CF0;
  *(_OWORD *)(v5 + 64) = xmmword_1CFAC3CF0;
  *(void *)(v5 + 80) = v5 + 96;
  *(void *)(v5 + 88) = 0x400000000;
  return v5 + 8;
}

uint64_t sub_1CC093834(uint64_t a1, uint64_t a2)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  size_t v26 = 0;
  uint64_t result = sub_1CC093F3C(a1, *(void *)a2, *(void *)(a2 + 8), &v26);
  if (result) {
    return result;
  }
  uint64_t v5 = v26;
  uint64_t v27 = v26;
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  int v8 = *(_DWORD *)a1 & 1;
  if (v8) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_14;
  }
  if (v9 + ~v7 - *(_DWORD *)(a1 + 4) <= v9 >> 3)
  {
LABEL_14:
    if (v9 >= 5)
    {
      unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
      unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
      if ((v13 + 1) > 0x40) {
        unsigned int v9 = v13 + 1;
      }
      else {
        unsigned int v9 = 64;
      }
    }
    if (v8)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v28;
      do
      {
        uint64_t v19 = *(void *)(a1 + v16 + 8);
        uint64_t v18 = *(void *)(a1 + v16 + 16);
        if ((v19 != -2 || v18 != -4096) && (v19 != -16 || v18 != -8192))
        {
          *(_OWORD *)uint64_t v17 = *(_OWORD *)(a1 + v16 + 8);
          v17 += 2;
        }
        v16 += 16;
      }
      while (v16 != 64);
      if (v9 > 4)
      {
        *(_DWORD *)a1 &= ~1u;
        uint64_t v20 = v9;
        uint64_t v21 = v17;
        int v22 = operator new(16 * v9, (std::align_val_t)8uLL);
        uint64_t v17 = v21;
        *(void *)(a1 + 8) = v22;
        *(void *)(a1 + 16) = v20;
      }
      sub_1CC094040(a1, v28, v17);
    }
    else
    {
      uint64_t v14 = *(unint64_t **)(a1 + 8);
      uint64_t v15 = *(unsigned int *)(a1 + 16);
      if (v9 > 4)
      {
        uint64_t v23 = v9;
        uint64_t v25 = *(unsigned int *)(a1 + 16);
        unint64_t v24 = operator new(16 * v9, (std::align_val_t)8uLL);
        uint64_t v15 = v25;
        *(void *)(a1 + 8) = v24;
        *(void *)(a1 + 16) = v23;
      }
      else
      {
        *(_DWORD *)a1 = v6 | 1;
      }
      sub_1CC094040(a1, v14, &v14[2 * v15]);
      MEMORY[0x1D25D9CD0](v14, 8);
    }
    uint64_t result = sub_1CC093F3C(a1, *(void *)a2, *(void *)(a2 + 8), &v27);
    int v6 = *(_DWORD *)a1;
    uint64_t v5 = v27;
    int v8 = *(_DWORD *)a1 & 1;
  }
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v8) + 2;
  if (*v5 != -2 || v5[1] != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *uint64_t v5 = *(void *)a2;
  v5[1] = *(void *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 80);
  if (v10 >= *(_DWORD *)(a1 + 84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)(a1 + 72) + 16 * v10) = *(_OWORD *)a2;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

unint64_t sub_1CC093ABC(uint64_t a1)
{
  if ((a1 & 7) == 2) {
    return a1 & 0xFFFFFFFFFFFFFFF8 | 2;
  }
  if ((a1 & 7) == 1) {
    return a1 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((a1 & 0xE000000000000007) == 0x4000000000000003) {
    return a1 & 0xFFFFFFFFFFFFFFF8 | 4;
  }
  return a1 & 0xFFFFFFFFFFFFFFF8 | 6;
}

void *sub_1CC093BF0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(160 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 160 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 20;
        v11 -= 160;
      }
      while (v11);
    }
    if (!v3)
    {
LABEL_32:
      JUMPOUT(0x1D25D9CD0);
    }
    uint64_t v12 = v4 + 160 * v3;
    uint64_t v13 = v4;
    while (1)
    {
      uint64_t v14 = *(void *)v13;
      if ((*(void *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        break;
      }
LABEL_31:
      v13 += 160;
      if (v13 == v12) {
        goto LABEL_32;
      }
    }
    *(void *)&long long v34 = 0;
    sub_1CC09367C(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v34);
    uint64_t v15 = v34;
    *(void *)long long v34 = v14;
    *(void *)(v15 + 8) = 1;
    uint64_t v16 = v15 + 8;
    *(_OWORD *)(v15 + 16) = xmmword_1CFAC3CF0;
    *(_OWORD *)(v15 + 32) = xmmword_1CFAC3CF0;
    *(_OWORD *)(v15 + 48) = xmmword_1CFAC3CF0;
    *(_OWORD *)(v15 + 64) = xmmword_1CFAC3CF0;
    int v17 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v15 + 8) & 0xFFFFFFFE | v17 & 1;
    *(_DWORD *)(v15 + 8) = v17 & 0xFFFFFFFE | *(_DWORD *)(v15 + 8) & 1;
    int v18 = *(_DWORD *)(v15 + 12);
    *(_DWORD *)(v15 + 12) = *(_DWORD *)(v13 + 12);
    *(_DWORD *)(v13 + 12) = v18;
    int v19 = *(_DWORD *)(v15 + 8);
    int v20 = *(_DWORD *)(v13 + 8);
    if (v19)
    {
      int v19 = *(_DWORD *)(v13 + 8);
      uint64_t v21 = v13 + 8;
      if (v20)
      {
        for (uint64_t i = 0; i != 64; i += 16)
        {
          uint64_t v25 = v15 + i;
          uint64_t v26 = v13 + i;
          uint64_t v27 = *(void *)(v15 + i + 16);
          uint64_t v28 = *(void *)(v15 + i + 24);
          uint64_t v29 = *(void *)(v13 + i + 24);
          *(void *)(v25 + 16) = *(void *)(v13 + i + 16);
          *(void *)(v25 + 24) = v29;
          *(void *)(v26 + 16) = v27;
          *(void *)(v26 + 24) = v28;
        }
LABEL_20:
        *(void *)(v15 + 80) = v15 + 96;
        *(void *)(v15 + 88) = 0x400000000;
        uint64_t v30 = *(void **)(v13 + 80);
        if (v15 != v13)
        {
          unint64_t v31 = *(unsigned int *)(v13 + 88);
          if (*(_DWORD *)(v13 + 88))
          {
            if (v30 != (void *)(v13 + 96))
            {
              *(void *)(v15 + 80) = v30;
              *(_DWORD *)(v15 + 88) = v31;
              *(_DWORD *)(v15 + 92) = *(_DWORD *)(v13 + 92);
              *(void *)(v13 + 80) = v13 + 96;
              *(void *)(v13 + 88) = 0;
              ++*(_DWORD *)(a1 + 8);
LABEL_29:
              if ((*(unsigned char *)(v13 + 8) & 1) == 0) {
                MEMORY[0x1D25D9CD0](*(void *)(v13 + 16), 8);
              }
              goto LABEL_31;
            }
            if (v31 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v15 + 96), v30, 16 * *(unsigned int *)(v13 + 88));
            uint64_t v30 = *(void **)(v13 + 80);
            *(_DWORD *)(v15 + 88) = v31;
            *(_DWORD *)(v13 + 88) = 0;
          }
        }
        ++*(_DWORD *)(a1 + 8);
        if (v30 != (void *)(v13 + 96)) {
          free(v30);
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v21 = v15 + 8;
      uint64_t v16 = v13 + 8;
      if ((v20 & 1) == 0)
      {
        uint64_t v22 = *(void *)(v15 + 16);
        *(void *)(v15 + 16) = *(void *)(v13 + 16);
        *(void *)(v13 + 16) = v22;
        LODWORD(v22) = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = *(_DWORD *)(v13 + 24);
        *(_DWORD *)(v13 + 24) = v22;
        goto LABEL_20;
      }
    }
    long long v34 = *(_OWORD *)(v21 + 8);
    *(_DWORD *)uint64_t v21 = v19 | 1;
    for (uint64_t j = 8; j != 72; j += 16)
      *(_OWORD *)(v21 + j) = *(_OWORD *)(v16 + j);
    *(_DWORD *)v16 &= ~1u;
    *(_OWORD *)(v16 + 8) = v34;
    goto LABEL_20;
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v32 = *(unsigned int *)(a1 + 16);
  if (v32)
  {
    uint64_t v33 = 160 * v32;
    do
    {
      *uint64_t result = -4096;
      result += 20;
      v33 -= 160;
    }
    while (v33);
  }
  return result;
}

uint64_t sub_1CC093F3C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 4;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      uint64_t v12 = 0;
      uint64_t result = 0;
      goto LABEL_11;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 9) ^ a2) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  uint64_t v12 = (void *)(v4 + 16 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -2 || v14 != -4096)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -8192;
      }
      if (v19 && v13 == -16) {
        uint64_t v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      uint64_t v12 = (void *)(v4 + 16 * (v21 & v10));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    if (v16) {
      uint64_t v12 = v16;
    }
  }
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t sub_1CC094040(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unint64_t v8 = (_OWORD *)(result + 8);
    int v9 = (_OWORD *)(result + 72);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_13;
    }
    unint64_t v8 = *(_OWORD **)(result + 8);
    int v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_1CFAC3CF0;
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    unint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if ((*a2 != -2 || v11 != -4096) && (v10 != -16 || v11 != -8192))
    {
      uint64_t v14 = 0;
      uint64_t result = sub_1CC093F3C((uint64_t)v5, v10, v11, &v14);
      uint64_t v12 = v14;
      unint64_t v13 = a2[1];
      *uint64_t v14 = *a2;
      v12[1] = v13;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void llvm::initializeMemDerefPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC68F8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC094184;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC68F8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC094184()
{
}

uint64_t sub_1CC094224(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC68F0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2605838;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x400000000;
  *(void *)(a1 + 80) = a1 + 112;
  *(void *)(a1 + 88) = a1 + 112;
  *(void *)(a1 + 96) = 4;
  *(_DWORD *)(a1 + 104) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC68F8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC094184;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC68F8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::MemDerefPrinterPass::run(llvm::raw_ostream **a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  v82[4] = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = (void *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v7 > 0x31uLL)
  {
    qmemcpy(v7, "Memory Dereferencibility of pointers in function '", 50);
    *((void *)v6 + 4) += 50;
  }
  else
  {
    int v6 = llvm::raw_ostream::write(*a1, "Memory Dereferencibility of pointers in function '", 0x32uLL);
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v8 = ***a2;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
      unint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_11;
      }
      int v14 = 1;
      while (v13 != (uint64_t ***)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        unint64_t v13 = *(uint64_t ****)(v9 + 16 * v11);
        if (v13 == a2)
        {
          uint64_t v12 = (uint64_t ****)(v9 + 16 * v11);
          goto LABEL_11;
        }
      }
    }
    uint64_t v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_11:
    uint64_t v16 = (size_t *)v12[1];
    size_t v19 = *v16;
    int v17 = v16 + 2;
    size_t v18 = v19;
    int v20 = (_WORD *)*((void *)v6 + 4);
    if (v19 <= *((void *)v6 + 3) - (void)v20)
    {
      if (v18)
      {
        memcpy(v20, v17, v18);
        int v20 = (_WORD *)(*((void *)v6 + 4) + v18);
        *((void *)v6 + 4) = v20;
      }
    }
    else
    {
      int v6 = llvm::raw_ostream::write(v6, (const char *)v17, v18);
      int v20 = (_WORD *)*((void *)v6 + 4);
    }
    goto LABEL_15;
  }
  int v20 = (_WORD *)*((void *)v6 + 4);
LABEL_15:
  if (*((void *)v6 + 3) - (void)v20 > 1uLL)
  {
    *int v20 = 2599;
    *((void *)v6 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v6, "'\n", 2uLL);
  }
  uint64_t v80 = v82;
  uint64_t v81 = 0x400000000;
  size_t v75 = v79;
  int v76 = v79;
  uint64_t v77 = 4;
  int v78 = 0;
  unsigned int v21 = a2 + 9;
  uint64_t v22 = a2[10];
  if (v22 == (uint64_t **)(a2 + 9)) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v23 = v22 - 3;
    if (!v22) {
      uint64_t v23 = 0;
    }
    unint64_t v24 = v23[6];
    if (v24 != (uint64_t *)(v23 + 5)) {
      break;
    }
    uint64_t v22 = (uint64_t **)v22[1];
    if (v22 == (uint64_t **)v21) {
      goto LABEL_22;
    }
  }
  uint64_t v53 = (uint64_t)(a2[5] + 34);
  while (1)
  {
    uint64_t v54 = v24 - 3;
    if (!v24) {
      uint64_t v54 = 0;
    }
    int v55 = *((unsigned __int8 *)v54 + 16);
    if (v55 == 60) {
      uint64_t v56 = v54;
    }
    else {
      uint64_t v56 = 0;
    }
    if (!v24 || v55 != 60) {
      goto LABEL_121;
    }
    uint64_t v57 = *(v56 - 4);
    if (llvm::isDereferenceableAndAlignedPointer(v57, *v56, 0, v53, 0, 0, 0))
    {
      if (v81 >= (unint64_t)HIDWORD(v81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v80 + v81) = v57;
      LODWORD(v81) = v81 + 1;
    }
    if (!llvm::isDereferenceableAndAlignedPointer(v57, *v56, ((unint64_t)*((unsigned __int16 *)v56 + 9) >> 1) & 0x3F, v53, 0, 0, 0))goto LABEL_121; {
    uint64_t v58 = v76;
    }
    uint64_t v59 = HIDWORD(v77);
    if (v76 != v75)
    {
      unsigned int v63 = v77;
      goto LABEL_100;
    }
    if (!HIDWORD(v77))
    {
LABEL_97:
      unsigned int v63 = v77;
      if (HIDWORD(v77) < v77)
      {
        ++HIDWORD(v77);
        *(void *)&v76[8 * v59] = v57;
        goto LABEL_121;
      }
LABEL_100:
      if (3 * v63 <= 4 * (HIDWORD(v77) - v78))
      {
        if (v63 >= 0x40) {
          v63 *= 2;
        }
        else {
          unsigned int v63 = 128;
        }
      }
      else if (v63 - HIDWORD(v77) >= v63 >> 3)
      {
        goto LABEL_102;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v75, v63);
      unsigned int v63 = v77;
      uint64_t v58 = v76;
LABEL_102:
      unsigned int v64 = v63 - 1;
      unsigned int v65 = (v63 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      uint64_t v66 = &v58[8 * v65];
      uint64_t v67 = *(void *)v66;
      if (*(void *)v66 == -1)
      {
        uint64_t v68 = 0;
LABEL_114:
        if (v68) {
          size_t v72 = v68;
        }
        else {
          size_t v72 = (uint64_t *)v66;
        }
        if (*v72 != v57)
        {
          if (*v72 == -2) {
            --v78;
          }
          else {
            ++HIDWORD(v77);
          }
          *size_t v72 = v57;
        }
      }
      else
      {
        uint64_t v68 = 0;
        int v69 = 1;
        while (v67 != v57)
        {
          if (v68) {
            BOOL v70 = 0;
          }
          else {
            BOOL v70 = v67 == -2;
          }
          if (v70) {
            uint64_t v68 = (uint64_t *)v66;
          }
          unsigned int v71 = v65 + v69++;
          unsigned int v65 = v71 & v64;
          uint64_t v66 = &v58[8 * (v71 & v64)];
          uint64_t v67 = *(void *)v66;
          if (*(void *)v66 == -1) {
            goto LABEL_114;
          }
        }
      }
      goto LABEL_121;
    }
    unint64_t v60 = 0;
    uint64_t v61 = 8 * HIDWORD(v77);
    uint64_t v62 = (uint64_t *)v76;
    while (*v62 != v57)
    {
      if (*v62 == -2) {
        unint64_t v60 = v62;
      }
      ++v62;
      v61 -= 8;
      if (!v61)
      {
        if (!v60) {
          goto LABEL_97;
        }
        uint64_t *v60 = v57;
        --v78;
        break;
      }
    }
LABEL_121:
    unint64_t v24 = (uint64_t *)v24[1];
    int v73 = v22 - 3;
    if (!v22) {
      int v73 = 0;
    }
    if (v24 == (uint64_t *)(v73 + 5)) {
      break;
    }
LABEL_128:
    if (v22 == (uint64_t **)v21) {
      goto LABEL_22;
    }
  }
  while (1)
  {
    uint64_t v22 = (uint64_t **)v22[1];
    if (v22 == (uint64_t **)v21) {
      break;
    }
    int v74 = v22 - 3;
    if (!v22) {
      int v74 = 0;
    }
    unint64_t v24 = v74[6];
    if (v24 != (uint64_t *)(v74 + 5)) {
      goto LABEL_128;
    }
  }
LABEL_22:
  uint64_t v25 = *a1;
  uint64_t v26 = (void *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v26 > 0x22uLL)
  {
    qmemcpy(v26, "The following are dereferenceable:\n", 35);
    *((void *)v25 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v25, "The following are dereferenceable:\n", 0x23uLL);
  }
  if (v81)
  {
    uint64_t v27 = (llvm::Value **)v80;
    uint64_t v28 = (llvm::Value **)((char *)v80 + 8 * v81);
    do
    {
      uint64_t v29 = *v27;
      uint64_t v30 = *a1;
      unint64_t v31 = (_WORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v31 > 1uLL)
      {
        *unint64_t v31 = 8224;
        *((void *)v30 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v30, "  ", 2uLL);
      }
      llvm::Value::print(v29, *a1, 0);
      uint64_t v32 = v75;
      if (v76 == v75)
      {
        int v33 = HIDWORD(v77);
        long long v34 = &v76[8 * HIDWORD(v77)];
        if (HIDWORD(v77))
        {
          uint64_t v35 = 0;
          while (*(llvm::Value **)&v76[v35] != v29)
          {
            v35 += 8;
            if (8 * HIDWORD(v77) == v35) {
              goto LABEL_47;
            }
          }
          long long v34 = &v76[v35];
        }
LABEL_47:
        uint64_t v32 = v76;
      }
      else
      {
        int v36 = v77 - 1;
        unsigned int v37 = (v77 - 1) & ((v29 >> 4) ^ (v29 >> 9));
        long long v34 = &v76[8 * v37];
        uint64_t v38 = *(llvm::Value **)v34;
        if (*(void *)v34 == -1)
        {
          uint64_t v39 = 0;
LABEL_62:
          if (v39) {
            long long v34 = v39;
          }
          int v33 = HIDWORD(v77);
          if (*(llvm::Value **)v34 != v29) {
            long long v34 = &v76[8 * v77];
          }
        }
        else
        {
          uint64_t v39 = 0;
          int v40 = 1;
          while (v38 != v29)
          {
            if (v39) {
              BOOL v41 = 0;
            }
            else {
              BOOL v41 = v38 == (llvm::Value *)-2;
            }
            if (v41) {
              uint64_t v39 = v34;
            }
            unsigned int v42 = v37 + v40++;
            unsigned int v37 = v42 & v36;
            long long v34 = &v76[8 * (v42 & v36)];
            uint64_t v38 = *(llvm::Value **)v34;
            if (*(void *)v34 == -1) {
              goto LABEL_62;
            }
          }
          int v33 = HIDWORD(v77);
        }
      }
      if (v76 == v32) {
        int v43 = v33;
      }
      else {
        int v43 = v77;
      }
      uint64_t v44 = &v76[8 * v43];
      uint64_t v45 = *a1;
      uint64_t v46 = *((void *)*a1 + 4);
      unint64_t v47 = *((void *)*a1 + 3) - v46;
      if (v34 == v44)
      {
        if (v47 > 0xB)
        {
          *(_DWORD *)(v46 + 8) = 694445422;
          *(void *)uint64_t v46 = *(void *)"\t(unaligned)";
          uint64_t v52 = *((void *)v45 + 4) + 12;
          goto LABEL_71;
        }
        unsigned int v48 = "\t(unaligned)";
        size_t v49 = 12;
      }
      else
      {
        if (v47 > 9)
        {
          *(_WORD *)(v46 + 8) = 10596;
          *(void *)uint64_t v46 = *(void *)"\t(aligned)";
          uint64_t v52 = *((void *)v45 + 4) + 10;
LABEL_71:
          *((void *)v45 + 4) = v52;
          goto LABEL_57;
        }
        unsigned int v48 = "\t(aligned)";
        size_t v49 = 10;
      }
      llvm::raw_ostream::write(v45, v48, v49);
LABEL_57:
      int v50 = *a1;
      size_t v51 = (unsigned char *)*((void *)*a1 + 4);
      if (*((unsigned char **)*a1 + 3) == v51)
      {
        llvm::raw_ostream::write(v50, "\n", 1uLL);
      }
      else
      {
        unsigned char *v51 = 10;
        ++*((void *)v50 + 4);
      }
      ++v27;
    }
    while (v27 != v28);
  }
  *(void *)(a3 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a3 = a3 + 32;
  *(void *)(a3 + 8) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 48) = a3 + 80;
  *(void *)(a3 + 56) = a3 + 80;
  *(void *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  *(void *)(a3 + 16) = 0x100000002;
  if (v76 != v75) {
    free(v76);
  }
  if (v80 != v82) {
    free(v80);
  }
}

void sub_1CC094A70()
{
}

void sub_1CC094AAC(llvm::Pass *this)
{
  *(void *)this = &unk_1F2605838;
  int v2 = (void *)*((void *)this + 11);
  if (v2 != *((void **)this + 10)) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC094B24(llvm::Pass *this)
{
  *(void *)this = &unk_1F2605838;
  int v2 = (void *)*((void *)this + 11);
  if (v2 != *((void **)this + 10)) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC094BB0(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 0x22uLL)
  {
    qmemcpy(v4, "The following are dereferenceable:\n", 35);
    *((void *)this + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(this, "The following are dereferenceable:\n", 0x23uLL);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (v5)
  {
    int v6 = *(llvm::Value ***)(a1 + 32);
    uint64_t v7 = &v6[v5];
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v9 > 1uLL)
      {
        *uint64_t v9 = 8224;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "  ", 2uLL);
      }
      llvm::Value::print(v8, this, 0);
      uint64_t v11 = *(void *)(a1 + 80);
      uint64_t v10 = *(void *)(a1 + 88);
      if (v10 == v11)
      {
        uint64_t v12 = *(unsigned int *)(a1 + 100);
        unint64_t v13 = (llvm::Value **)(v10 + 8 * v12);
        if (v12)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 8 * v12;
          while (*(llvm::Value **)(v10 + v14) != v8)
          {
            v14 += 8;
            if (v15 == v14) {
              goto LABEL_25;
            }
          }
          unint64_t v13 = (llvm::Value **)(v10 + v14);
        }
LABEL_25:
        uint64_t v11 = *(void *)(a1 + 88);
      }
      else
      {
        uint64_t v16 = *(unsigned int *)(a1 + 96);
        int v17 = v16 - 1;
        unsigned int v18 = (v16 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        unint64_t v13 = (llvm::Value **)(v10 + 8 * v18);
        size_t v19 = *v13;
        if (*v13 == (llvm::Value *)-1)
        {
          int v20 = 0;
LABEL_40:
          if (v20) {
            unint64_t v13 = v20;
          }
          if (*v13 != v8) {
            unint64_t v13 = (llvm::Value **)(v10 + 8 * v16);
          }
        }
        else
        {
          int v20 = 0;
          int v21 = 1;
          while (v19 != v8)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == (llvm::Value *)-2;
            }
            if (v22) {
              int v20 = v13;
            }
            unsigned int v23 = v18 + v21++;
            unsigned int v18 = v23 & v17;
            unint64_t v13 = (llvm::Value **)(v10 + 8 * (v23 & v17));
            size_t v19 = *v13;
            if (*v13 == (llvm::Value *)-1) {
              goto LABEL_40;
            }
          }
        }
      }
      if (v10 == v11) {
        unint64_t v24 = (unsigned int *)(a1 + 100);
      }
      else {
        unint64_t v24 = (unsigned int *)(a1 + 96);
      }
      uint64_t v25 = (llvm::Value **)(v10 + 8 * *v24);
      uint64_t v26 = *((void *)this + 4);
      unint64_t v27 = *((void *)this + 3) - v26;
      if (v13 == v25)
      {
        if (v27 > 0xB)
        {
          *(_DWORD *)(v26 + 8) = 694445422;
          *(void *)uint64_t v26 = *(void *)"\t(unaligned)";
          uint64_t v32 = *((void *)this + 4) + 12;
          goto LABEL_48;
        }
        uint64_t v28 = this;
        uint64_t v29 = "\t(unaligned)";
        size_t v30 = 12;
      }
      else
      {
        if (v27 > 9)
        {
          *(_WORD *)(v26 + 8) = 10596;
          *(void *)uint64_t v26 = *(void *)"\t(aligned)";
          uint64_t v32 = *((void *)this + 4) + 10;
LABEL_48:
          *((void *)this + 4) = v32;
          goto LABEL_35;
        }
        uint64_t v28 = this;
        uint64_t v29 = "\t(aligned)";
        size_t v30 = 10;
      }
      llvm::raw_ostream::write(v28, v29, v30);
LABEL_35:
      unint64_t v31 = (unsigned char *)*((void *)this + 4);
      if (*((unsigned char **)this + 3) == v31)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *unint64_t v31 = 10;
        ++*((void *)this + 4);
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_1CC094E68(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void **sub_1CC094E74(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 80);
  uint64_t result = (void **)(a1 + 80);
  *((_DWORD *)result - 10) = 0;
  if (result[1] == v3) {
    goto LABEL_2;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 96);
  if (v4 < 0x21 || 4 * (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 104)) >= v4)
  {
    uint64_t result = (void **)memset(result[1], 255, 8 * v4);
LABEL_2:
    *(_DWORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    return result;
  }

  return (void **)llvm::SmallPtrSetImplBase::shrink_and_clear(result);
}

uint64_t sub_1CC094EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3 == a2 + 72) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v3 - 24;
    if (!v3) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 48);
    if (v6 != v5 + 40) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(a2 + 40) + 272;
  while (1)
  {
    uint64_t v9 = v6 - 24;
    if (!v6) {
      uint64_t v9 = 0;
    }
    int v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 60) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    if (!v6 || v10 != 60) {
      goto LABEL_51;
    }
    uint64_t v12 = *(void *)(v11 - 32);
    if (llvm::isDereferenceableAndAlignedPointer(v12, *(void *)v11, 0, v8, 0, 0, 0))
    {
      unint64_t v13 = *(unsigned int *)(a1 + 40);
      if (v13 >= *(unsigned int *)(a1 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 32) + 8 * v13) = v12;
      ++*(_DWORD *)(a1 + 40);
    }
    if (!llvm::isDereferenceableAndAlignedPointer(v12, *(void *)v11, ((unint64_t)*(unsigned __int16 *)(v11 + 18) >> 1) & 0x3F, v8, 0, 0, 0))goto LABEL_51; {
    uint64_t v14 = *(void *)(a1 + 88);
    }
    uint64_t v15 = *(unsigned int *)(a1 + 100);
    if (v14 != *(void *)(a1 + 80))
    {
      unsigned int v19 = *(_DWORD *)(a1 + 96);
      goto LABEL_30;
    }
    if (!v15)
    {
LABEL_27:
      unsigned int v19 = *(_DWORD *)(a1 + 96);
      if (v15 < v19)
      {
        *(_DWORD *)(a1 + 100) = v15 + 1;
        *(void *)(v14 + 8 * v15) = v12;
        goto LABEL_51;
      }
LABEL_30:
      if (3 * v19 <= 4 * ((int)v15 - *(_DWORD *)(a1 + 104)))
      {
        if (v19 >= 0x40) {
          v19 *= 2;
        }
        else {
          unsigned int v19 = 128;
        }
      }
      else if (v19 - v15 >= v19 >> 3)
      {
        goto LABEL_32;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 80), v19);
      unsigned int v19 = *(_DWORD *)(a1 + 96);
      uint64_t v14 = *(void *)(a1 + 88);
LABEL_32:
      unsigned int v20 = v19 - 1;
      unsigned int v21 = (v19 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      BOOL v22 = (uint64_t *)(v14 + 8 * v21);
      uint64_t v23 = *v22;
      if (*v22 == -1)
      {
        unint64_t v24 = 0;
LABEL_44:
        if (v24) {
          uint64_t v28 = v24;
        }
        else {
          uint64_t v28 = v22;
        }
        if (*v28 != v12)
        {
          if (*v28 == -2) {
            --*(_DWORD *)(a1 + 104);
          }
          else {
            ++*(_DWORD *)(a1 + 100);
          }
          *uint64_t v28 = v12;
        }
      }
      else
      {
        unint64_t v24 = 0;
        int v25 = 1;
        while (v23 != v12)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v23 == -2;
          }
          if (v26) {
            unint64_t v24 = v22;
          }
          unsigned int v27 = v21 + v25++;
          unsigned int v21 = v27 & v20;
          BOOL v22 = (uint64_t *)(v14 + 8 * (v27 & v20));
          uint64_t v23 = *v22;
          if (*v22 == -1) {
            goto LABEL_44;
          }
        }
      }
      goto LABEL_51;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 8 * v15;
    unsigned int v18 = *(uint64_t **)(a1 + 88);
    while (*v18 != v12)
    {
      if (*v18 == -2) {
        uint64_t v16 = v18;
      }
      ++v18;
      v17 -= 8;
      if (!v17)
      {
        if (!v16) {
          goto LABEL_27;
        }
        *uint64_t v16 = v12;
        --*(_DWORD *)(a1 + 104);
        break;
      }
    }
LABEL_51:
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v29 = v3 - 24;
    if (!v3) {
      uint64_t v29 = 0;
    }
    if (v6 == v29 + 40) {
      break;
    }
LABEL_58:
    if (v3 == v2) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
    uint64_t v30 = v3 - 24;
    if (!v3) {
      uint64_t v30 = 0;
    }
    uint64_t v6 = *(void *)(v30 + 48);
    if (v6 != v30 + 40) {
      goto LABEL_58;
    }
  }
}

char *mangledNameForMallocFamily(int *a1)
{
  return off_1E682C850[*a1];
}

uint64_t llvm::isAllocationFn(uint64_t a1, uint64_t *a2)
{
  if (byte_1EBD04470) {
    int v3 = 59;
  }
  else {
    int v3 = 63;
  }
  sub_1CC095244(a1, v3, a2, v5);
  return v5[24];
}

uint64_t sub_1CC095244@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned char *a4@<X8>)
{
  char v8 = 0;
  uint64_t result = sub_1CC0960E8(a1, &v8);
  if (!result || v8)
  {
    *a4 = 0;
    a4[24] = 0;
  }
  else
  {
    return sub_1CC095384(result, a2, a3, (uint64_t)a4);
  }
  return result;
}

uint64_t llvm::isMallocOrCallocLikeFn(uint64_t a1, uint64_t *a2)
{
  if (byte_1EBD04470) {
    int v3 = 11;
  }
  else {
    int v3 = 15;
  }
  sub_1CC095244(a1, v3, a2, v5);
  return v5[24];
}

uint64_t llvm::isAllocLikeFn(uint64_t a1, uint64_t *a2)
{
  if (byte_1EBD04470) {
    int v3 = 43;
  }
  else {
    int v3 = 47;
  }
  sub_1CC095244(a1, v3, a2, v5);
  return v5[24];
}

uint64_t llvm::isReallocLikeFn(uint64_t a1, uint64_t *a2)
{
  sub_1CC095244(a1, 16, a2, v3);
  return v3[24];
}

unint64_t sub_1CC095384@<X0>(unint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (!a3) {
    goto LABEL_4;
  }
  unint64_t v7 = result;
  unsigned int v23 = 0;
  uint64_t result = llvm::TargetLibraryInfoImpl::getLibFunc(*a3, (uint64_t ***)result, &v23);
  if (!result
    || ((*(void *)(a3[1] + (((unint64_t)v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) != 0
    || ((*(unsigned __int8 *)(*a3 + ((unint64_t)v23 >> 2)) >> (2 * (v23 & 3))) & 3) == 0)
  {
    goto LABEL_4;
  }
  uint64_t v9 = 0;
  while (dword_1CFAC3E68[v9] != v23)
  {
    v9 += 7;
    if (v9 == 273) {
      goto LABEL_4;
    }
  }
  int v10 = &dword_1CFAC3E68[v9];
  if ((LOBYTE(dword_1CFAC3E68[v9 + 1]) & ~a2) != 0) {
    goto LABEL_4;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = v10[4];
  uint64_t v13 = *(void *)(v7 + 24);
  uint64_t v14 = **(void **)(v13 + 16);
  uint64_t result = llvm::PointerType::get((llvm::PointerType *)(**(void **)v13 + 1912), 0);
  if (v14 != result || *(_DWORD *)(v13 + 12) - 1 != dword_1CFAC3E68[v9 + 2]) {
    goto LABEL_4;
  }
  if ((v12 & 0x80000000) == 0)
  {
    int v15 = *(_DWORD *)(*(void *)(*(void *)(v13 + 16) + 8 * v12 + 8) + 8) >> 8;
    BOOL v16 = v15 == 32 || v15 == 64;
    BOOL v17 = v16;
    if (*(_DWORD *)(*(void *)(*(void *)(v13 + 16) + 8 * v12 + 8) + 8) != 13 || !v17) {
      goto LABEL_4;
    }
  }
  if ((v11 & 0x80000000) != 0
    || ((int v19 = *(_DWORD *)(*(void *)(*(void *)(v13 + 16) + 8 * v11 + 8) + 8) >> 8, v19 != 32)
      ? (BOOL v20 = v19 == 64)
      : (BOOL v20 = 1),
        !v20 ? (int v21 = 0) : (int v21 = 1),
        *(_DWORD *)(*(void *)(*(void *)(v13 + 16) + 8 * v11 + 8) + 8) == 13
      ? (BOOL v22 = v21 == 0)
      : (BOOL v22 = 1),
        !v22))
  {
    *(_OWORD *)a4 = *(_OWORD *)&dword_1CFAC3E68[v9 + 1];
    *(void *)(a4 + 16) = *(void *)&dword_1CFAC3E68[v9 + 5];
    char v8 = 1;
  }
  else
  {
LABEL_4:
    char v8 = 0;
    *(unsigned char *)a4 = 0;
  }
  *(unsigned char *)(a4 + 24) = v8;
  return result;
}

uint64_t llvm::getAllocAlignment(uint64_t a1, uint64_t *a2)
{
  sub_1CC095244(a1, 63, a2, v13);
  if (v15)
  {
    uint64_t v12 = v14;
    if ((v14 & 0x80000000) == 0) {
      return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v12);
    }
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3 && (*(unsigned char *)(v3 + 24) & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v3 + 8);
    if (v7)
    {
      uint64_t v8 = v3 + 40;
      int v9 = -1;
      while (!*(void *)v8 || (*(unsigned char *)(*(void *)v8 + 12) & 2) == 0)
      {
        ++v9;
        v8 += 8;
        if (!--v7) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 - 32);
    if (!v4) {
      return 0;
    }
    if (*(unsigned char *)(v4 + 16)) {
      return 0;
    }
    if (*(void *)(v4 + 24) != *(void *)(a1 + 72)) {
      return 0;
    }
    uint64_t v5 = *(void *)(v4 + 112);
    if (!v5 || (*(unsigned char *)(v5 + 24) & 2) == 0) {
      return 0;
    }
    uint64_t v10 = *(unsigned int *)(v5 + 8);
    if (v10)
    {
      uint64_t v11 = v5 + 40;
      int v9 = -1;
      while (!*(void *)v11 || (*(unsigned char *)(*(void *)v11 + 12) & 2) == 0)
      {
        ++v9;
        v11 += 8;
        if (!--v10) {
          goto LABEL_21;
        }
      }
      goto LABEL_22;
    }
  }
LABEL_21:
  int v9 = 0;
LABEL_22:
  uint64_t v12 = (v9 - 1);
  return *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v12);
}

void llvm::getAllocSize(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_1CC095D98((uint64_t)v57, a1, a2);
  if (!v60)
  {
LABEL_20:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 40);
  unsigned int v10 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  uint64_t v11 = *(void *)(v9 + 504);
  if (v10 < 0x100) {
    goto LABEL_13;
  }
  unsigned int v12 = v10 >> 8;
  unint64_t v13 = *(unsigned int *)(v9 + 512);
  uint64_t v14 = *(void *)(v9 + 504);
  if (v13)
  {
    uint64_t v14 = v11;
    unint64_t v15 = v13;
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = v14 + 16 * (v15 >> 1);
      unsigned int v18 = *(_DWORD *)(v17 + 8);
      uint64_t v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 < v12) {
        uint64_t v14 = v19;
      }
      else {
        unint64_t v15 = v16;
      }
    }
    while (v15);
  }
  if (v14 == v11 + 16 * v13 || *(_DWORD *)(v14 + 8) != v12) {
LABEL_13:
  }
    uint64_t v14 = v11;
  unsigned int v20 = *(_DWORD *)(v14 + 12);
  if (v57[0] == 32)
  {
    uint64_t v53 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    uint64_t v27 = a3[3];
    if (v27)
    {
      uint64_t v28 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v27 + 48))(v27, &v53);
      uint64_t StringLength = llvm::GetStringLength(v28, (const llvm::Value *)8);
      if (v20 > 0x40) {
        operator new[]();
      }
      unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      if (!v20) {
        unint64_t v30 = 0;
      }
      unint64_t v4 = v30 & StringLength;
      if ((v30 & StringLength) != 0)
      {
        if (v58 < 1)
        {
          unint64_t v37 = v30 & StringLength;
          unsigned int v38 = v20;
LABEL_72:
          *(_DWORD *)(a4 + 8) = v38;
          *(void *)a4 = v37;
          goto LABEL_73;
        }
        uint64_t v53 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v58);
        uint64_t v31 = a3[3];
        if (!v31) {
          goto LABEL_87;
        }
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v31 + 48))(v31, &v53);
        if (v32) {
          BOOL v33 = *(unsigned char *)(v32 + 16) == 16;
        }
        else {
          BOOL v33 = 0;
        }
        if (v33)
        {
          uint64_t v39 = (void *)(v32 + 24);
          unsigned int v40 = *(_DWORD *)(v32 + 32);
          if (v40 < v20)
          {
            a3 = (void *)(*v39 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v20));
            unsigned int v40 = v20;
          }
          else
          {
            if (v40 > 0x40) {
              operator new[]();
            }
            a3 = (void *)*v39;
          }
          BOOL v41 = v4 > (unint64_t)a3;
LABEL_67:
          if (v41)
          {
            unsigned int v56 = v40;
            if (v40 > 0x40) {
              operator new[]();
            }
            int v55 = a3;
            llvm::APInt::operator+=((uint64_t)&v55, 1uLL);
            unsigned int v38 = v56;
            unint64_t v37 = (unint64_t)v55;
            unsigned int v56 = 0;
            if (v20 >= 0x41)
            {
              if (v4)
              {
                MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
                if (v56 >= 0x41)
                {
                  if (v55) {
                    MEMORY[0x1D25D9CB0](v55, 0x1000C8000313F17);
                  }
                }
              }
            }
            goto LABEL_69;
          }
LABEL_68:
          unint64_t v37 = v4;
          unsigned int v38 = v20;
LABEL_69:
          if (v40 >= 0x41 && a3) {
            MEMORY[0x1D25D9CB0](a3, 0x1000C8000313F17);
          }
          goto LABEL_72;
        }
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 16) = 0;
      return;
    }
LABEL_87:
    sub_1CB920400();
    unint64_t v43 = v42 + 63;
    memcpy(a3, *(const void **)a1, ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8);
    uint64_t v44 = v5 >> 6;
    bzero(&a3[v43 >> 6], 8 * ((v5 >> 6) - (v43 >> 6)));
    unsigned int v40 = v20;
    uint64_t v47 = v44;
    while (v47 * 8)
    {
      unint64_t v45 = *(void *)(v4 - 8 + v47 * 8);
      unint64_t v46 = a3[--v47];
      BOOL v41 = v45 > v46;
      if (v45 != v46) {
        goto LABEL_67;
      }
    }
    goto LABEL_68;
  }
  uint64_t v53 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v58);
  uint64_t v21 = a3[3];
  if (!v21) {
    goto LABEL_87;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v21 + 48))(v21, &v53);
  if (v22) {
    BOOL v23 = *(unsigned char *)(v22 + 16) == 16;
  }
  else {
    BOOL v23 = 0;
  }
  if (!v23) {
    goto LABEL_20;
  }
  unint64_t v4 = v22;
  unsigned int v54 = *(_DWORD *)(v22 + 32);
  if (v54 > 0x40) {
    operator new[]();
  }
  uint64_t v53 = *(void *)(v22 + 24);
  char v24 = sub_1CC095E8C((llvm::APInt *)&v53, v20);
  if ((v24 & 1) == 0) {
    goto LABEL_32;
  }
  if ((v59 & 0x80000000) != 0)
  {
    *(_DWORD *)(a4 + 8) = v54;
    *(void *)a4 = v53;
LABEL_73:
    *(unsigned char *)(a4 + 16) = 1;
    return;
  }
  uint64_t v51 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v59);
  uint64_t v25 = a3[3];
  if (!v25) {
    goto LABEL_87;
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v25 + 48))(v25, &v51);
  if (v26 && *(unsigned char *)(v26 + 16) == 16)
  {
    unsigned int v52 = *(_DWORD *)(v26 + 32);
    if (v52 > 0x40) {
      operator new[]();
    }
    uint64_t v51 = *(void *)(v26 + 24);
    char v34 = sub_1CC095E8C((llvm::APInt *)&v51, v20);
    if (v34)
    {
      BOOL v50 = 0;
      llvm::APInt::umul_ov((llvm::APInt *)&v53, (const llvm::APInt *)&v51, &v50, (uint64_t)&v48);
      if (v54 >= 0x41 && v53) {
        MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
      }
      uint64_t v35 = v48;
      uint64_t v53 = v48;
      unsigned int v54 = v49;
      if (v50)
      {
        char v36 = 0;
        *(unsigned char *)a4 = 0;
      }
      else
      {
        *(_DWORD *)(a4 + 8) = v49;
        *(void *)a4 = v35;
        char v36 = 1;
        unsigned int v54 = 0;
      }
      *(unsigned char *)(a4 + 16) = v36;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 16) = 0;
    }
    if (v52 >= 0x41 && v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    goto LABEL_33;
  }
LABEL_32:
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 16) = 0;
LABEL_33:
  if (v54 >= 0x41)
  {
    if (v53) {
      MEMORY[0x1D25D9CB0]();
    }
  }
}

uint64_t sub_1CC095D98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v13 = 0;
  uint64_t result = sub_1CC0960E8(a2, &v13);
  if (result)
  {
    uint64_t v6 = result;
    if (v13
      || (byte_1EBD04470 ? (int v9 = 59) : (int v9 = 63), result = sub_1CC095384(result, v9, a3, a1), !*(unsigned char *)(a1 + 24)))
    {
      uint64_t result = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(v6 + 112), -1, 75);
      uint64_t v12 = result;
      if (result)
      {
        uint64_t result = llvm::Attribute::getAllocSizeArgs((llvm::Attribute *)&v12);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
        *(_DWORD *)(a1 + 8) = result;
        if (v10) {
          int v11 = HIDWORD(result);
        }
        else {
          int v11 = -1;
        }
        *(_DWORD *)(a1 + 12) = v11;
        *(_DWORD *)(a1 + 16) = -1;
        char v8 = 1;
        char v7 = 2;
      }
      else
      {
        char v7 = 0;
        char v8 = 0;
      }
      *(unsigned char *)a1 = v7;
      *(unsigned char *)(a1 + 24) = v8;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1CC095E8C(llvm::APInt *this, unsigned int a2)
{
  uint64_t v3 = *((unsigned int *)this + 2);
  if (v3 > a2)
  {
    if (v3 > 0x40)
    {
      int v5 = 0;
      int64_t v6 = (unint64_t)(v3 + 63) >> 6;
      do
      {
        if (v6-- < 1) {
          break;
        }
        unint64_t v8 = *(void *)(*(void *)this + 8 * v6);
        v5 += __clz(v8);
      }
      while (!v8);
      int v9 = v3 | 0xFFFFFFC0;
      if ((v3 & 0x3F) == 0) {
        int v9 = 0;
      }
      int v4 = v5 + v9;
    }
    else
    {
      int v4 = v3 + __clz(*(void *)this) - 64;
    }
    if ((int)v3 - v4 > a2) {
      return 0;
    }
  }
  if (v3 != a2)
  {
    llvm::APInt::zextOrTrunc((uint64_t *)this, a2, (uint64_t)&v11);
    if (*((_DWORD *)this + 2) >= 0x41u)
    {
      if (*(void *)this) {
        MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
      }
    }
    *(void *)this = v11;
    *((_DWORD *)this + 2) = v12;
  }
  return 1;
}

uint64_t getFreeFunctionDataForFunction(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  while (dword_1CFAC3D00[v2] != a2)
  {
    v2 += 3;
    if (v2 == 90) {
      return 0;
    }
  }
  return *(void *)&dword_1CFAC3D00[v2 + 1];
}

unint64_t llvm::getAllocationFamily@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v16 = 0;
  unint64_t result = sub_1CC0960E8(a1, &v16);
  if (result
    && !v16
    && (unint64_t v11 = result, v15 = 0, a2)
    && (unint64_t result = llvm::TargetLibraryInfoImpl::getLibFunc(*a2, (uint64_t ***)result, &v15), result)
    && (unsigned int v6 = v15, ((*(void *)(a2[1] + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
    && ((*(unsigned __int8 *)(*a2 + ((unint64_t)v15 >> 2)) >> (2 * (v15 & 3))) & 3) != 0)
  {
    unint64_t result = sub_1CC095384(v11, 63, a2, (uint64_t)v12);
    if (v14)
    {
      uint64_t v7 = v13;
    }
    else
    {
      uint64_t v10 = 0;
      while (dword_1CFAC3D00[v10] != v6)
      {
        v10 += 3;
        if (v10 == 90)
        {
          char v9 = 0;
          *(unsigned char *)a3 = 0;
          goto LABEL_12;
        }
      }
      uint64_t v7 = dword_1CFAC3D00[v10 + 2];
    }
    uint64_t v8 = qword_1CFAC42B0[v7];
    *(void *)a3 = off_1E682C850[v7];
    *(void *)(a3 + 8) = v8;
    char v9 = 1;
LABEL_12:
    *(unsigned char *)(a3 + 16) = v9;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CC0960E8(uint64_t a1, unsigned char *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 84)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    if (v5 && !*(unsigned char *)(v5 + 16) && *(void *)(v5 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v5 + 33) & 0x20) != 0) {
      return 0;
    }
  }
  else
  {
    if (v4 < 0x1C) {
      return 0;
    }
    unsigned int v6 = v4 - 33;
    BOOL v7 = v6 > 0x33;
    uint64_t v8 = (1 << v6) & 0x8000000000041;
    if (v7 || v8 == 0) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10 && (*(unsigned char *)(v10 + 14) & 0x10) != 0) {
    goto LABEL_16;
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction(a1, 20)) {
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
LABEL_16:
    if ((*(unsigned char *)(v10 + 12) & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_18:
    char v11 = 0;
    goto LABEL_19;
  }
LABEL_17:
  char v11 = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 4) ^ 1;
LABEL_19:
  *a2 = v11;
  uint64_t result = *(void *)(a1 - 32);
  if (!result || *(unsigned char *)(result + 16) || *(void *)(result + 24) != *(void *)(a1 + 72)) {
    return 0;
  }
  return result;
}

uint64_t llvm::isFreeCall(uint64_t a1, uint64_t *a2)
{
  char v7 = 0;
  unsigned int v4 = (uint64_t ***)sub_1CC0960E8(a1, &v7);
  uint64_t result = 0;
  if (v4 && !v7)
  {
    unsigned int v6 = 0;
    if (a2
      && llvm::TargetLibraryInfoImpl::getLibFunc(*a2, v4, &v6)
      && ((*(void *)(a2[1] + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) == 0
      && ((*(unsigned __int8 *)(*a2 + ((unint64_t)v6 >> 2)) >> (2 * (v6 & 3))) & 3) != 0
      && llvm::isLibFreeFunction((llvm::Function *)v4, v6))
    {
      if (*(unsigned char *)(a1 + 16) == 84) {
        return a1;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::getObjectSize(llvm::Value *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a3;
  v18[1] = a4;
  v18[2] = a5;
  v18[3] = a6;
  unsigned int v20 = 1;
  uint64_t v19 = 0;
  uint64_t v21 = v25;
  uint64_t v22 = v25;
  uint64_t v23 = 8;
  int v24 = 0;
  llvm::ObjectSizeOffsetVisitor::compute(&v14, (llvm::ObjectSizeOffsetVisitor *)v18, a1, a7);
  unsigned int v8 = v17;
  BOOL v10 = v15 > 1 && v17 > 1;
  if (v10)
  {
    sub_1CC096920((uint64_t)&v14, (uint64_t)&v12);
    if (v13 > 0x40)
    {
      *a2 = *v12;
      MEMORY[0x1D25D9CB0]();
    }
    else
    {
      *a2 = v12;
    }
    unsigned int v8 = v17;
  }
  if (v8 >= 0x41 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41 && v14) {
    MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
  }
  if (v22 != v21) {
    free(v22);
  }
  if (v20 >= 0x41 && v19) {
    MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
  }
  return v10;
}

void llvm::ObjectSizeOffsetVisitor::compute(uint64_t *__return_ptr a1@<X8>, llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::Value *a3@<X1>, uint64_t a4@<X6>)
{
  uint64_t v7 = *(void *)this;
  unsigned int v8 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  if (v8 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v9 = v8 >> 8;
  uint64_t v10 = *(unsigned int *)(v7 + 240);
  uint64_t v11 = *(void *)(v7 + 232);
  if (v10)
  {
    uint64_t v11 = *(void *)(v7 + 232);
    unint64_t v12 = *(unsigned int *)(v7 + 240);
    do
    {
      unint64_t v13 = v12 >> 1;
      uint64_t v14 = v11 + 16 * (v12 >> 1);
      unsigned int v15 = *(_DWORD *)(v14 + 8);
      uint64_t v16 = v14 + 16;
      v12 += ~(v12 >> 1);
      if (v15 < v9) {
        uint64_t v11 = v16;
      }
      else {
        unint64_t v12 = v13;
      }
    }
    while (v12);
  }
  if (v11 == *(void *)(v7 + 232) + 16 * v10 || *(_DWORD *)(v11 + 8) != v9) {
LABEL_12:
  }
    uint64_t v11 = *(void *)(v7 + 232);
  unsigned int v17 = *(_DWORD *)(v11 + 12);
  unsigned int v44 = v17;
  if (v17 > 0x40) {
    operator new[]();
  }
  unint64_t v43 = 0;
  unsigned int v18 = llvm::Value::stripAndAccumulateConstantOffsets(a3, (llvm::DataLayout *)v7, (llvm::APInt *)&v43, 1, 1, 0, a4);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)this;
  unsigned int v21 = *(_DWORD *)(*(void *)v18 + 8);
  if ((v21 & 0xFE) == 0x12) {
    unsigned int v21 = *(_DWORD *)(**(void **)(*(void *)v18 + 16) + 8);
  }
  uint64_t v22 = *(void *)(v20 + 232);
  if (v21 < 0x100) {
    goto LABEL_25;
  }
  unsigned int v23 = v21 >> 8;
  unint64_t v24 = *(unsigned int *)(v20 + 240);
  uint64_t v25 = *(void *)(v20 + 232);
  if (v24)
  {
    uint64_t v25 = v22;
    unint64_t v26 = v24;
    do
    {
      unint64_t v27 = v26 >> 1;
      uint64_t v28 = v25 + 16 * (v26 >> 1);
      unsigned int v29 = *(_DWORD *)(v28 + 8);
      uint64_t v30 = v28 + 16;
      v26 += ~(v26 >> 1);
      if (v29 < v23) {
        uint64_t v25 = v30;
      }
      else {
        unint64_t v26 = v27;
      }
    }
    while (v26);
  }
  if (v25 == v22 + 16 * v24 || *(_DWORD *)(v25 + 8) != v23) {
LABEL_25:
  }
    uint64_t v25 = v22;
  unsigned int v31 = *(_DWORD *)(v25 + 12);
  *((_DWORD *)this + 8) = v31;
  if (v31 >= 0x41) {
    operator new[]();
  }
  if (*((_DWORD *)this + 12) >= 0x41u)
  {
    uint64_t v33 = *((void *)this + 5);
    if (v33) {
      MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    }
  }
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = v31;
  if (v17 == *((_DWORD *)this + 8))
  {
    unsigned int v32 = v44;
    if (v44 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v43) == v32) {
        goto LABEL_31;
      }
    }
    else if (!v43)
    {
LABEL_31:
      llvm::ObjectSizeOffsetVisitor::computeImpl(this, v19, (uint64_t)a1);
      goto LABEL_32;
    }
    llvm::ObjectSizeOffsetVisitor::computeImpl(this, v19, (uint64_t)&v39);
  }
  else
  {
    llvm::ObjectSizeOffsetVisitor::computeImpl(this, v19, (uint64_t)&v39);
    if (v40 >= 2 && (sub_1CC095E8C((llvm::APInt *)&v39, v17) & 1) == 0)
    {
      if (v40 >= 0x41 && v39) {
        MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
      }
      uint64_t v39 = 0;
      unsigned int v40 = 1;
    }
    if (v42 >= 2 && (sub_1CC095E8C((llvm::APInt *)&__src, v17) & 1) == 0)
    {
      if (v42 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      unint64_t __src = 0;
      unsigned int v42 = 1;
    }
  }
  if (v42 >= 2)
  {
    unsigned int v38 = v42;
    if (v42 > 0x40) {
      operator new[]();
    }
    unint64_t v37 = __src;
    llvm::APInt::operator+=((uint64_t)&v37, &v43);
    unsigned int v35 = v38;
    char v34 = v37;
    unsigned int v38 = 0;
  }
  else
  {
    char v34 = __src;
    unsigned int v35 = v42;
  }
  unsigned int v36 = v40;
  *((_DWORD *)a1 + 2) = v40;
  if (v36 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)a1, (const llvm::APInt *)&v39);
  }
  *a1 = v39;
  *((_DWORD *)a1 + 6) = v35;
  a1[2] = (uint64_t)v34;
  if (v42 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  if (v40 >= 0x41 && v39) {
    MEMORY[0x1D25D9CB0](v39, 0x1000C8000313F17);
  }
LABEL_32:
  if (v44 >= 0x41)
  {
    if (v43) {
      MEMORY[0x1D25D9CB0](v43, 0x1000C8000313F17);
    }
  }
}

uint64_t sub_1CC096920@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  unsigned int v4 = *(_DWORD *)(result + 24);
  unsigned int v5 = v4 - 1;
  if (v4 >= 0x41) {
    unsigned int v6 = (void *)(v3 + 8 * (v5 >> 6));
  }
  else {
    unsigned int v6 = (void *)(result + 16);
  }
  uint64_t v7 = *(unsigned int *)(result + 8);
  if ((*v6 >> v5))
  {
LABEL_5:
    *(_DWORD *)(a2 + 8) = v7;
    if (v7 > 0x40) {
      operator new[]();
    }
    goto LABEL_10;
  }
  if (v7 > 0x40)
  {
    unint64_t v11 = v3 - 8;
    unint64_t v12 = 8 * ((unint64_t)(v7 + 63) >> 6);
    do
    {
      if (!v12) {
        goto LABEL_18;
      }
      unint64_t v13 = *(void *)(*(void *)result - 8 + v12);
      unint64_t v14 = *(void *)(v11 + v12);
      v12 -= 8;
    }
    while (v13 == v14);
    if (v13 > v14) {
LABEL_18:
    }
      operator new[]();
    goto LABEL_5;
  }
  BOOL v8 = *(void *)result >= v3;
  unint64_t v9 = *(void *)result - v3;
  if (!v8)
  {
    *(_DWORD *)(a2 + 8) = v7;
LABEL_10:
    *(void *)a2 = 0;
    return result;
  }
  unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (!v7) {
    unint64_t v10 = 0;
  }
  *(_DWORD *)(a2 + 8) = v7;
  *(void *)a2 = v10 & v9;
  return result;
}

void *llvm::ObjectSizeOffsetEvaluator::compute(llvm::ObjectSizeOffsetEvaluator *this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
  }
  uint64_t v7 = *(void *)(v4 + 232);
  if (v6 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v8 = v6 >> 8;
  unint64_t v9 = *(unsigned int *)(v4 + 240);
  uint64_t v10 = *(void *)(v4 + 232);
  if (v9)
  {
    uint64_t v10 = v7;
    unint64_t v11 = v9;
    do
    {
      unint64_t v12 = v11 >> 1;
      uint64_t v13 = v10 + 16 * (v11 >> 1);
      unsigned int v14 = *(_DWORD *)(v13 + 8);
      uint64_t v15 = v13 + 16;
      v11 += ~(v11 >> 1);
      if (v14 < v8) {
        uint64_t v10 = v15;
      }
      else {
        unint64_t v11 = v12;
      }
    }
    while (v11);
  }
  if (v10 == v7 + 16 * v9 || *(_DWORD *)(v10 + 8) != v8) {
LABEL_12:
  }
    uint64_t v10 = v7;
  uint64_t v16 = llvm::IntegerType::get(*(llvm::IntegerType **)v5, (llvm::LLVMContext *)*(unsigned int *)(v10 + 12));
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
  {
    uint64_t v53 = (llvm::Type *)*(unsigned int *)(v5 + 32);
    if (*(_DWORD *)(v5 + 8) == 19) {
      llvm::ScalableVectorType::get((uint64_t **)v16, v53);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v16, v53);
    }
  }
  *((void *)this + 25) = v16;
  unsigned int v18 = *(uint64_t **)v16;
  unsigned int v19 = *(_DWORD *)(v16 + 8);
  unsigned int v55 = v19 >> 8;
  if (v19 >> 8 >= 0x41) {
    operator new[]();
  }
  unsigned int v54 = 0;
  uint64_t v25 = llvm::ConstantInt::get((llvm::ConstantInt *)v18, (llvm::LLVMContext *)&v54, v17);
  if (v55 >= 0x41 && v54) {
    MEMORY[0x1D25D9CB0](v54, 0x1000C8000313F17);
  }
  *((void *)this + 26) = v25;
  unint64_t v27 = llvm::ObjectSizeOffsetEvaluator::compute_(this, a2, v20, v21, v22, v23, v24);
  if (!v27 || !v26)
  {
    uint64_t v28 = *((void *)this + 31);
    uint64_t v29 = 256;
    if (v28 == *((void *)this + 30)) {
      uint64_t v29 = 260;
    }
    uint64_t v30 = *(unsigned int *)((char *)this + v29);
    if (v30)
    {
      uint64_t v31 = 8 * v30;
      unsigned int v32 = (uint64_t *)*((void *)this + 31);
      while ((unint64_t)*v32 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v32;
        v31 -= 8;
        if (!v31) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      unsigned int v32 = (uint64_t *)*((void *)this + 31);
    }
    uint64_t v33 = (void *)(v28 + 8 * v30);
    if (v32 != v33)
    {
      uint64_t v34 = *v32;
LABEL_28:
      unsigned int v54 = 0;
      int v35 = sub_1CD4A7E9C(*((void *)this + 27), *((_DWORD *)this + 58), v34, &v54);
      unsigned int v36 = v54;
      if (v35) {
        BOOL v37 = v54 == (void *)(*((void *)this + 27) + 56 * *((unsigned int *)this + 58));
      }
      else {
        BOOL v37 = 1;
      }
      if (!v37 && v54[3] | v54[6])
      {
        sub_1CD4A76CC((llvm::ValueHandleBase *)(v54 + 1));
        *unsigned int v36 = -8192;
        *((int32x2_t *)this + 28) = vadd_s32(*(int32x2_t *)((char *)this + 224), (int32x2_t)0x1FFFFFFFFLL);
      }
      unsigned int v38 = (unint64_t *)(v32 + 1);
      while (v38 != v33)
      {
        unint64_t v39 = *v38++;
        uint64_t v34 = v39;
        if (v39 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v32 = (uint64_t *)(v38 - 1);
          goto LABEL_28;
        }
      }
    }
LABEL_38:
    uint64_t v40 = *((void *)this + 45);
    uint64_t v41 = 368;
    if (v40 == *((void *)this + 44)) {
      uint64_t v41 = 372;
    }
    uint64_t v42 = *(unsigned int *)((char *)this + v41);
    if (v42)
    {
      uint64_t v43 = 8 * v42;
      unsigned int v44 = (llvm::UndefValue ***)*((void *)this + 45);
      while ((unint64_t)*v44 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v44;
        v43 -= 8;
        if (!v43) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      unsigned int v44 = (llvm::UndefValue ***)*((void *)this + 45);
    }
    if (v44 != (llvm::UndefValue ***)(v40 + 8 * v42))
    {
      unint64_t v45 = (llvm::ValueAsMetadata *)*v44;
      unint64_t v46 = llvm::UndefValue::get(**v44, v26);
      llvm::Value::doRAUW(v45, v46, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList();
    }
  }
LABEL_48:
  uint64_t v47 = (void *)*((void *)this + 31);
  if (v47 == *((void **)this + 30)) {
    goto LABEL_49;
  }
  uint64_t v50 = *((unsigned int *)this + 64);
  if (v50 < 0x21 || 4 * (*((_DWORD *)this + 65) - *((_DWORD *)this + 66)) >= v50)
  {
    memset(v47, 255, 8 * v50);
LABEL_49:
    *(void *)((char *)this + 260) = 0;
    goto LABEL_50;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 30);
LABEL_50:
  uint64_t v48 = (void *)*((void *)this + 45);
  if (v48 != *((void **)this + 44))
  {
    uint64_t v52 = *((unsigned int *)this + 92);
    if (v52 >= 0x21 && 4 * (*((_DWORD *)this + 93) - *((_DWORD *)this + 94)) < v52)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 44);
      return v27;
    }
    memset(v48, 255, 8 * v52);
  }
  *(void *)((char *)this + 372) = 0;
  return v27;
}

uint64_t sub_1CC096F34(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(void *)(a2 + 40);
  *(void *)(a1 + 56) = a2 + 24;
  unint64_t v3 = *(unsigned __int8 **)(a2 + 48);
  uint64_t v10 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track((uint64_t)&v10, v3, 2);
    uint64_t v4 = (uint64_t)v10;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = sub_1CB8461A4(a1, 0, v4);
  if (!v10) {
    return result;
  }
  int v6 = *v10;
  if ((v6 - 4) > 0x1E)
  {
    if ((v6 - 3) >= 0xFFFFFFFE) {
      unint64_t v9 = v10;
    }
    else {
      unint64_t v9 = 0;
    }
    if ((v6 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v8 = (unint64_t)(v9 + 8);
LABEL_17:
      unint64_t v11 = &v10;
      return sub_1CC5FA668(v8 + 16, &v11);
    }
    if (v6 == 3) {
      *((void *)v10 + 1) = 0;
    }
  }
  else if ((v10[1] & 0x7F) == 2 || *((_DWORD *)v10 + 3))
  {
    uint64_t v7 = *((void *)v10 + 2);
    if ((v7 & 4) != 0)
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t llvm::ObjectSizeOffsetVisitor::align@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  if (*(unsigned char *)(result + 17)) {
    BOOL v5 = (a3 & 0xFF00) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    *(_DWORD *)(a4 + 8) = *((_DWORD *)a2 + 2);
    *(void *)a4 = *a2;
    *((_DWORD *)a2 + 2) = 0;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(result + 32);
    if (*((_DWORD *)a2 + 2) >= 0x41u) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v7 = ((1 << a3) + *a2 - 1) & -(1 << a3);
    *(_DWORD *)(a4 + 8) = v6;
    if (v6 > 0x40) {
      operator new[]();
    }
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!v6) {
      unint64_t v8 = 0;
    }
    *(void *)a4 = v8 & v7;
  }
  return result;
}

double llvm::ObjectSizeOffsetVisitor::ObjectSizeOffsetVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 48) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(void *)&double result = 8;
  *(void *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 48) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = a1 + 88;
  *(void *)(a1 + 64) = a1 + 88;
  *(void *)&double result = 8;
  *(void *)(a1 + 72) = 8;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::computeImpl(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v6 >= 0x1C)
  {
    uint64_t v9 = *((void *)this + 7);
    uint64_t v8 = *((void *)this + 8);
    uint64_t v7 = (llvm::ObjectSizeOffsetVisitor *)((char *)this + 56);
    uint64_t v10 = *((unsigned int *)this + 19);
    if (v8 == v9)
    {
      if (v10)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 8 * v10;
        uint64_t v13 = (void *)*((void *)this + 8);
        while ((llvm::Value *)*v13 != a2)
        {
          if (*v13 == -2) {
            unint64_t v11 = v13;
          }
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_22;
            }
            *unint64_t v11 = a2;
            --*((_DWORD *)this + 20);
            goto LABEL_24;
          }
        }
        goto LABEL_60;
      }
LABEL_22:
      unsigned int v14 = *((_DWORD *)this + 18);
      if (v10 < v14)
      {
        *((_DWORD *)this + 19) = v10 + 1;
        *(void *)(v8 + 8 * v10) = a2;
LABEL_24:
        sub_1CC09744C((uint64_t)this, a2, a3);
        return;
      }
    }
    else
    {
      unsigned int v14 = *((_DWORD *)this + 18);
    }
    if (3 * v14 <= 4 * ((int)v10 - *((_DWORD *)this + 20)))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
    }
    else if (v14 - v10 >= v14 >> 3)
    {
LABEL_30:
      unsigned int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v17 = (llvm::Value **)(v8 + 8 * v16);
      unsigned int v18 = *v17;
      if (*v17 != (llvm::Value *)-1)
      {
        unsigned int v19 = 0;
        int v20 = 1;
        while (v18 != a2)
        {
          if (v19) {
            BOOL v21 = 0;
          }
          else {
            BOOL v21 = v18 == (llvm::Value *)-2;
          }
          if (v21) {
            unsigned int v19 = v17;
          }
          unsigned int v22 = v16 + v20++;
          unsigned int v16 = v22 & v15;
          unsigned int v17 = (llvm::Value **)(v8 + 8 * (v22 & v15));
          unsigned int v18 = *v17;
          if (*v17 == (llvm::Value *)-1) {
            goto LABEL_45;
          }
        }
        goto LABEL_60;
      }
      unsigned int v19 = 0;
LABEL_45:
      if (v19) {
        uint64_t v23 = v19;
      }
      else {
        uint64_t v23 = v17;
      }
      if (*v23 == a2) {
        goto LABEL_60;
      }
      if (*v23 == (llvm::Value *)-2) {
        --*((_DWORD *)this + 20);
      }
      else {
        ++*((_DWORD *)this + 19);
      }
      *uint64_t v23 = a2;
      goto LABEL_24;
    }
    llvm::SmallPtrSetImplBase::Grow(v7, v14);
    unsigned int v14 = *((_DWORD *)this + 18);
    uint64_t v8 = *((void *)this + 8);
    goto LABEL_30;
  }
  if (a2 && v6 == 21)
  {
    llvm::ObjectSizeOffsetVisitor::visitArgument(this, a2, a3);
  }
  else
  {
    if (a2 && v6 == 19)
    {
      if (!*((unsigned char *)this + 18) && *(_DWORD *)(*(void *)a2 + 8) < 0x100u)
      {
LABEL_63:
        sub_1CC09A548(a3, (uint64_t)this + 40, (uint64_t)this + 40);
        return;
      }
LABEL_60:
      *(_DWORD *)(a3 + 8) = 1;
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 16) = 0;
      return;
    }
    if (!a2 || v6 != 1)
    {
      if (a2 && v6 == 3)
      {
        llvm::ObjectSizeOffsetVisitor::visitGlobalVariable((uint64_t)this, a2, a3);
        return;
      }
      if (a2 && v6 - 13 >= 0xFFFFFFFE) {
        goto LABEL_63;
      }
      goto LABEL_60;
    }
    if (llvm::GlobalValue::isInterposable(a2)) {
      goto LABEL_60;
    }
    uint64_t v24 = (llvm::Value *)*((void *)a2 - 4);
    llvm::ObjectSizeOffsetVisitor::compute((uint64_t *)a3, this, v24);
  }
}

uint64_t sub_1CC09744C@<X0>(uint64_t this@<X0>, llvm::AllocaInst *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 16) == 59) {
    return llvm::ObjectSizeOffsetVisitor::visitAllocaInst(this, a2, a3);
  }
  switch(*((unsigned char *)a2 + 16))
  {
    case '!':
    case '\'':
    case 'T':
      this = (uint64_t)llvm::ObjectSizeOffsetVisitor::visitCallBase((llvm::ObjectSizeOffsetVisitor *)this, a2, a3);
      break;
    case ';':
      __break(1u);
      JUMPOUT(0x1CC0974ACLL);
    case '<':
      this = (uint64_t)llvm::ObjectSizeOffsetVisitor::visitLoadInst((llvm::ObjectSizeOffsetVisitor *)this, a2, a3);
      break;
    case 'S':
      this = (uint64_t)llvm::ObjectSizeOffsetVisitor::visitPHINode((llvm::ObjectSizeOffsetVisitor *)this, a2, a3);
      break;
    case 'U':
      this = llvm::ObjectSizeOffsetVisitor::visitSelectInst((llvm::ObjectSizeOffsetVisitor *)this, (llvm::Value **)a2, a3);
      break;
    default:
      *(_DWORD *)(a3 + 8) = 1;
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 16) = 0;
      break;
  }
  return this;
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitArgument@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::Argument *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::Argument::getPointeeInMemoryValueType(a2);
  if (!result) {
    goto LABEL_2;
  }
  uint64_t v7 = (llvm::Type *)result;
  unsigned int v8 = *(unsigned __int8 *)(result + 8);
  if (v8 - 16 >= 2)
  {
    if (v8 <= 0xF && ((1 << v8) & 0xAC7F) != 0) {
      goto LABEL_5;
    }
    if ((v8 & 0xFE) != 0x12 && v8 != 21) {
      goto LABEL_2;
    }
  }
  uint64_t result = llvm::Type::isSizedDerivedType(result, 0);
  if ((result & 1) == 0)
  {
LABEL_2:
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
    return result;
  }
LABEL_5:
  unsigned int v9 = *((_DWORD *)this + 8);
  uint64_t v10 = *(llvm::DataLayout **)this;
  unint64_t v11 = (unint64_t)(sub_1CB83544C(*(void *)this, (uint64_t)v7) + 7) >> 3;
  BOOL v13 = v12 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v10, v7, 1);
  uint64_t v16 = (1 << Alignment) + v11 - 1;
  uint64_t v17 = -(1 << Alignment);
  if (v13) {
  unsigned int v34 = v9;
  }
  if (v9 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src);
  }
  unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  if (!v9) {
    unint64_t v18 = 0;
  }
  unint64_t v19 = v18 & v16 & v17;
  uint64_t v20 = *(void *)(*((void *)a2 + 3) + 112);
  if (v20
    && (unsigned int v21 = *((_DWORD *)a2 + 8) + 2, v21 < *(_DWORD *)(v20 + 8))
    && (unsigned int v22 = *(llvm::AttributeSetNode **)(v20 + 8 * v21 + 40)) != 0
    && (unsigned __int16 v23 = llvm::AttributeSetNode::getAlignment(v22), *((unsigned char *)this + 17)))
  {
    uint64_t v24 = v19;
    unsigned int v25 = v9;
    if (v23 >= 0x100u)
    {
      unsigned int v32 = *((_DWORD *)this + 8);
      unsigned int v25 = v32;
      if (v32 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v31);
      }
      unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
      if (!v32) {
        unint64_t v26 = 0;
      }
      uint64_t v24 = v26 & ((1 << v23) + v19 - 1) & -(1 << v23);
    }
  }
  else
  {
    uint64_t v24 = v19;
    unsigned int v25 = v9;
  }
  unint64_t v27 = (llvm::ObjectSizeOffsetVisitor *)((char *)this + 40);
  *(_DWORD *)(a3 + 8) = v25;
  *(void *)a3 = v24;
  uint64_t result = a3 + 16;
  unsigned int v28 = *((_DWORD *)this + 12);
  *(_DWORD *)(a3 + 24) = v28;
  if (v28 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)result, v27);
  }
  *(void *)uint64_t result = *(void *)v27;
  return result;
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitConstantPointerNull@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(result + 18) && *(_DWORD *)(*(void *)a2 + 8) < 0x100u) {
    return sub_1CC09A548(a3, result + 40, result + 40);
  }
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 16) = 0;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitGlobalAlias(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::GlobalAlias *a2@<X1>, uint64_t a3@<X8>)
{
  if (llvm::GlobalValue::isInterposable(a2))
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = (llvm::Value *)*((void *)a2 - 4);
    llvm::ObjectSizeOffsetVisitor::compute((uint64_t *)a3, this, v7, v6);
  }
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitGlobalVariable@<X0>(uint64_t this@<X0>, llvm::GlobalVariable *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_22;
    }
  }
  else if (*((llvm::GlobalVariable **)a2 + 9) == (llvm::GlobalVariable *)((char *)a2 + 72) {
         && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  }
  {
    goto LABEL_22;
  }
  this = llvm::GlobalValue::isInterposable(a2);
  if ((this & 1) != 0 || (*((unsigned char *)a2 + 80) & 2) != 0)
  {
LABEL_22:
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
    return this;
  }
  unsigned int v6 = *(_DWORD *)(v4 + 32);
  uint64_t v7 = *(llvm::DataLayout **)v4;
  unsigned int v8 = (llvm::Type *)*((void *)a2 + 3);
  unint64_t v9 = (unint64_t)(sub_1CB83544C(*(void *)v4, (uint64_t)v8) + 7) >> 3;
  BOOL v11 = v10 == 1;
  char Alignment = llvm::DataLayout::getAlignment(v7, v8, 1);
  uint64_t v14 = (1 << Alignment) + v9 - 1;
  uint64_t v15 = -(1 << Alignment);
  if (v11) {
  uint64_t v16 = v14 & v15;
  }
  if (v6 > 0x40) {
    operator new[]();
  }
  unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!v6) {
    unint64_t v17 = 0;
  }
  unint64_t v18 = v17 & v16;
  if (*(unsigned char *)(v4 + 17) && (*((_WORD *)a2 + 17) & 0x3F) != 0)
  {
    unsigned int v20 = *(_DWORD *)(v4 + 32);
    char v19 = (*((_WORD *)a2 + 17) & 0x3F) - 1;
    uint64_t v21 = ((1 << v19) + v18 - 1) & -(1 << v19);
    if (v20 > 0x40) {
      operator new[]();
    }
    unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    if (!v20) {
      unint64_t v22 = 0;
    }
    unint64_t v23 = v22 & v21;
  }
  else
  {
    unint64_t v23 = v18;
    unsigned int v20 = v6;
  }
  uint64_t v24 = (const llvm::APInt *)(v4 + 40);
  *(_DWORD *)(a3 + 8) = v20;
  *(void *)a3 = v23;
  this = a3 + 16;
  unsigned int v25 = *(_DWORD *)(v4 + 48);
  *(_DWORD *)(a3 + 24) = v25;
  if (v25 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)this, v24);
  }
  *(void *)this = *(void *)v24;
  return this;
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitUndefValue@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, uint64_t a2@<X8>)
{
  return sub_1CC09A548(a2, (uint64_t)this + 40, (uint64_t)this + 40);
}

uint64_t llvm::ObjectSizeOffsetVisitor::CheckedZextOrTrunc(llvm::ObjectSizeOffsetVisitor *this, llvm::APInt *a2)
{
  return sub_1CC095E8C(a2, *((_DWORD *)this + 8));
}

uint64_t llvm::ObjectSizeOffsetVisitor::visitAllocaInst@<X0>(uint64_t this@<X0>, llvm::AllocaInst *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  unsigned int v6 = (unsigned __int8 *)*((void *)a2 + 8);
  unsigned int v7 = v6[8];
  if (v7 > 0x11) {
    goto LABEL_39;
  }
  if (((1 << v7) & 0xAC7F) != 0) {
    goto LABEL_3;
  }
  if (((1 << v7) & 0x30000) == 0)
  {
LABEL_39:
    if ((v7 & 0xFE) != 0x12 && v7 != 21) {
      goto LABEL_43;
    }
  }
  this = llvm::Type::isSizedDerivedType(*((void *)a2 + 8), 0);
  if (!this)
  {
LABEL_43:
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
    return this;
  }
  unsigned int v6 = (unsigned __int8 *)*((void *)a2 + 8);
LABEL_3:
  unsigned int v8 = *(llvm::DataLayout **)v4;
  uint64_t v9 = sub_1CB83544C(*(void *)v4, (uint64_t)v6);
  BOOL v11 = v10 == 1;
  this = llvm::DataLayout::getAlignment(v8, (llvm::Type *)v6, 1);
  if (v11 && *(unsigned char *)(v4 + 16) != 1) {
    goto LABEL_43;
  }
  unint64_t v12 = ((1 << this) + ((unint64_t)(v9 + 7) >> 3) - 1) & -(1 << this);
  unsigned int v13 = *(_DWORD *)(v4 + 32);
  unsigned int v32 = v13;
  if (v13 > 0x40) {
    operator new[]();
  }
  unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
  if (!v13) {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v14 & v12;
  unint64_t __src = (void *)(v14 & v12);
  this = llvm::AllocaInst::isArrayAllocation(a2);
  if (this)
  {
    uint64_t v16 = *((void *)a2 - 4);
    if (v16 && *(unsigned char *)(v16 + 16) == 16)
    {
      unsigned int v30 = *(_DWORD *)(v16 + 32);
      if (v30 > 0x40) {
        operator new[]();
      }
      uint64_t v29 = *(void *)(v16 + 24);
      this = sub_1CC095E8C((llvm::APInt *)&v29, *(_DWORD *)(v4 + 32));
      if ((this & 1) == 0) {
        goto LABEL_31;
      }
      BOOL v28 = 0;
      this = llvm::APInt::umul_ov((llvm::APInt *)&__src, (const llvm::APInt *)&v29, &v28, (uint64_t)&v26);
      if (v32 >= 0x41)
      {
        this = (uint64_t)__src;
        if (__src) {
          this = MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      unint64_t __src = v26;
      unsigned int v32 = v27;
      if (!v28)
      {
        if (v27 > 0x40) {
          operator new[]();
        }
        if (*(unsigned char *)(v4 + 17))
        {
          unsigned int v22 = *(_DWORD *)(v4 + 32);
          if (v22 > 0x40) {
            operator new[]();
          }
          if (v22) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
          }
          else {
            unint64_t v23 = 0;
          }
          uint64_t v24 = v23 & ((unint64_t)v26 + (1 << *((_WORD *)a2 + 9)) - 1) & -(1 << *((_WORD *)a2 + 9));
        }
        else
        {
          uint64_t v24 = (uint64_t)v26;
          unsigned int v22 = v27;
        }
        *(_DWORD *)(a3 + 8) = v22;
        *(void *)a3 = v24;
        unsigned int v25 = *(_DWORD *)(v4 + 48);
        *(_DWORD *)(a3 + 24) = v25;
        if (v25 > 0x40) {
          operator new[]();
        }
        *(void *)(a3 + 16) = *(void *)(v4 + 40);
      }
      else
      {
LABEL_31:
        *(_DWORD *)(a3 + 8) = 1;
        *(void *)a3 = 0;
        *(_DWORD *)(a3 + 24) = 1;
        *(void *)(a3 + 16) = 0;
      }
      if (v30 >= 0x41)
      {
        this = v29;
        if (v29) {
          this = MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
        }
      }
      unsigned int v13 = v32;
    }
    else
    {
      *(_DWORD *)(a3 + 8) = 1;
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 16) = 0;
    }
  }
  else
  {
    if (*(unsigned char *)(v4 + 17))
    {
      unsigned int v17 = *(_DWORD *)(v4 + 32);
      if (v17 > 0x40) {
        operator new[]();
      }
      unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      if (!v17) {
        unint64_t v18 = 0;
      }
      uint64_t v19 = v18 & (v15 + (1 << *((_WORD *)a2 + 9)) - 1) & -(1 << *((_WORD *)a2 + 9));
    }
    else
    {
      uint64_t v19 = v15;
      unsigned int v17 = v13;
    }
    *(_DWORD *)(a3 + 8) = v17;
    *(void *)a3 = v19;
    unsigned int v20 = *(_DWORD *)(v4 + 48);
    *(_DWORD *)(a3 + 24) = v20;
    if (v20 > 0x40) {
      operator new[]();
    }
    *(void *)(a3 + 16) = *(void *)(v4 + 40);
  }
  if (v13 >= 0x41)
  {
    this = (uint64_t)__src;
    if (__src) {
      return MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
  }
  return this;
}

void *llvm::ObjectSizeOffsetVisitor::visitCallBase@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::CallBase *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (uint64_t *)*((void *)this + 1);
  v11[0] = &unk_1F26058D8;
  unint64_t v12 = v11;
  llvm::getAllocSize((uint64_t)a2, v6, v11, (uint64_t)&v8);
  uint64_t result = v12;
  if (v12 == v11)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*v12 + 40))();
  }
  if (v10)
  {
    uint64_t result = (void *)sub_1CC09A548(a3, (uint64_t)&v8, (uint64_t)this + 40);
    if (v10 && v9 >= 0x41)
    {
      uint64_t result = (void *)v8;
      if (v8) {
        return (void *)MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitExtractElementInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::visitExtractValueInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::visitIntToPtrInst(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
}

void llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(llvm::ObjectSizeOffsetVisitor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = sub_1CD4A6C40(a5, a3);
  if (*(_DWORD *)a5) {
    uint64_t v15 = a5 + 8;
  }
  else {
    uint64_t v15 = *(void *)(a5 + 8);
  }
  unsigned int v16 = *(_DWORD *)(a5 + 16);
  if (*(_DWORD *)a5) {
    unsigned int v16 = 8;
  }
  if (v15 + 40 * v16 != v14)
  {
    sub_1CC09A62C(a7, v14 + 8);
    return;
  }
  uint64_t v80 = a7;
  while (1)
  {
    unsigned int v17 = a4 - 3;
    if (a4) {
      uint64_t v18 = (uint64_t)(a4 - 3);
    }
    else {
      uint64_t v18 = 0;
    }
    if (sub_1CBF63B28(v18) || sub_1CC27D470(v18)) {
      goto LABEL_21;
    }
    unsigned int v19 = *a6 + 1;
    *a6 = v19;
    if (v19 >= 0x81) {
      goto LABEL_151;
    }
    int v20 = *(unsigned __int8 *)(v18 + 16);
    uint64_t v21 = (v20 - 33);
    if (v21 > 0x37) {
      goto LABEL_21;
    }
    if (((1 << (v20 - 33)) & 0x8000000000041) != 0) {
      break;
    }
    if (v21 == 27)
    {
      if ((*(_WORD *)(v18 + 18) & 0x301) != 0) {
        goto LABEL_151;
      }
      goto LABEL_21;
    }
    if (((1 << (v20 - 33)) & 0x808001D0000010) != 0) {
      goto LABEL_30;
    }
LABEL_21:
    BOOL v42 = a4 == *(void **)(a3 + 48);
    a4 = (void *)*a4;
    if (v42)
    {
      uint64_t v117 = (char *)&v119;
      uint64_t v118 = 0x100000000;
      uint64_t v43 = *(void *)(a3 + 8);
      if (!v43) {
        goto LABEL_88;
      }
      while (1)
      {
        uint64_t v44 = *(void *)(v43 + 24);
        unsigned int v45 = *(unsigned __int8 *)(v44 + 16);
        BOOL v46 = v44 && v45 >= 0x1C;
        if (v46 && v45 - 29 < 0xB) {
          break;
        }
        uint64_t v43 = *(void *)(v43 + 8);
        if (!v43) {
          goto LABEL_88;
        }
      }
LABEL_80:
      llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(&v97, a1, a2);
      sub_1CD4A6CA4((unint64_t *)&v117, (unint64_t)&v97);
      if (DWORD2(v99) >= 0x41 && (void)v99) {
        MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
      }
      if (v98 >= 0x41 && v97) {
        MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
      }
      uint64_t v52 = (uint64_t)v117;
      uint64_t v53 = v118;
      unsigned int v54 = &v117[32 * v118];
      unsigned int v55 = *((_DWORD *)v54 - 6);
      unsigned int v56 = *((_DWORD *)v54 - 2);
      if (v55 < 2 || v56 < 2) {
        goto LABEL_88;
      }
      while (1)
      {
        uint64_t v43 = *(void *)(v43 + 8);
        if (!v43) {
          break;
        }
        uint64_t v48 = *(void *)(v43 + 24);
        unsigned int v49 = *(unsigned __int8 *)(v48 + 16);
        if (v48) {
          BOOL v50 = v49 >= 0x1C;
        }
        else {
          BOOL v50 = 0;
        }
        if (v50 && v49 - 29 < 0xB) {
          goto LABEL_80;
        }
      }
      if (v118)
      {
        sub_1CC09A62C((uint64_t)&v81, (uint64_t)v117);
        if (v53 != 1)
        {
          uint64_t v66 = v52 + 32;
          uint64_t v67 = 32 * v53 - 32;
          do
          {
            sub_1CC09A62C((uint64_t)&v105, (uint64_t)&v81);
            sub_1CC09A62C((uint64_t)&v101, v66);
            sub_1CC09A62C((uint64_t)&v97, (uint64_t)&v105);
            sub_1CC09A62C((uint64_t)&v113, (uint64_t)&v101);
            llvm::ObjectSizeOffsetVisitor::combineSizeOffset((uint64_t)a1, (uint64_t)&v97, (uint64_t)&v113, (uint64_t)&v109);
            if (v116 >= 0x41 && v115) {
              MEMORY[0x1D25D9CB0](v115, 0x1000C8000313F17);
            }
            if (v114 >= 0x41 && v113) {
              MEMORY[0x1D25D9CB0](v113, 0x1000C8000313F17);
            }
            if (DWORD2(v99) >= 0x41 && (void)v99) {
              MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
            }
            if (v98 >= 0x41 && v97) {
              MEMORY[0x1D25D9CB0](v97, 0x1000C8000313F17);
            }
            sub_1CC09A704((uint64_t)&v81, (uint64_t)&v109);
            if (v112 >= 0x41 && v111) {
              MEMORY[0x1D25D9CB0](v111, 0x1000C8000313F17);
            }
            if (v110 >= 0x41 && v109) {
              MEMORY[0x1D25D9CB0](v109, 0x1000C8000313F17);
            }
            if (v104 >= 0x41 && v103) {
              MEMORY[0x1D25D9CB0](v103, 0x1000C8000313F17);
            }
            if (v102 >= 0x41 && v101) {
              MEMORY[0x1D25D9CB0](v101, 0x1000C8000313F17);
            }
            if (v108 >= 0x41 && v107) {
              MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
            }
            if (v106 >= 0x41 && v105) {
              MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
            }
            v66 += 32;
            v67 -= 32;
          }
          while (v67);
        }
        unsigned int v86 = v82;
        uint64_t v85 = v81;
        unsigned int v88 = v84;
        uint64_t v87 = v83;
        unsigned int v82 = 0;
        unsigned int v84 = 0;
        uint64_t v97 = a3;
        char v60 = (void **)(sub_1CD4A7730((_DWORD *)a5, &v97) + 1);
        sub_1CC09A7A4(v60, (uint64_t)&v85);
        sub_1CC09A62C(v80, (uint64_t)v60);
        if (v88 >= 0x41 && v87) {
          MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
        }
        if (v86 >= 0x41 && v85) {
          MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
        }
        if (v84 >= 0x41 && v83) {
          MEMORY[0x1D25D9CB0](v83, 0x1000C8000313F17);
        }
        if (v82 < 0x41) {
          goto LABEL_97;
        }
        uint64_t v59 = v81;
        if (!v81) {
          goto LABEL_97;
        }
      }
      else
      {
LABEL_88:
        LODWORD(v98) = 1;
        uint64_t v97 = 0;
        DWORD2(v99) = 1;
        *(void *)&long long v99 = 0;
        uint64_t v113 = a3;
        int v58 = sub_1CD4A7730((_DWORD *)a5, &v113) + 1;
        sub_1CC09A704((uint64_t)v58, (uint64_t)&v97);
        sub_1CC09A62C(v80, (uint64_t)v58);
        if (DWORD2(v99) >= 0x41 && (void)v99) {
          MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
        }
        if (v98 < 0x41) {
          goto LABEL_97;
        }
        uint64_t v59 = v97;
        if (!v97) {
          goto LABEL_97;
        }
      }
      MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
LABEL_97:
      uint64_t v61 = v117;
      if (v118)
      {
        uint64_t v62 = 32 * v118;
        do
        {
          unsigned int v63 = &v61[v62];
          if (*(_DWORD *)&v61[v62 - 8] >= 0x41u)
          {
            uint64_t v64 = *((void *)v63 - 2);
            if (v64) {
              MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
            }
          }
          if (*((_DWORD *)v63 - 6) >= 0x41u)
          {
            uint64_t v65 = *((void *)v63 - 4);
            if (v65) {
              MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
            }
          }
          v62 -= 32;
        }
        while (v62);
        uint64_t v61 = v117;
      }
      if (v61 != (char *)&v119) {
        free(v61);
      }
      return;
    }
  }
  uint64_t v22 = *(void *)(v18 + 64);
  if (v22 && (*(unsigned char *)(v22 + 17) & 0x30) != 0) {
    goto LABEL_21;
  }
  int v23 = *(_DWORD *)(v18 + 20);
  if (v23 < 0 && (uint64_t v34 = v18 - 32 * (v23 & 0x7FFFFFF), v37 = *(void *)(v34 - 8), v35 = v34 - 8, (v36 = v37) != 0))
  {
    uint64_t v38 = -v36;
    while (1)
    {
      unsigned int v39 = *(_DWORD *)(*(void *)(v35 + v38) + 8);
      BOOL v40 = v39 > 7;
      int v41 = (1 << v39) & 0x83;
      BOOL v42 = v40 || v41 == 0;
      if (v42) {
        break;
      }
      v38 += 16;
      if (!v38) {
        goto LABEL_27;
      }
    }
  }
  else
  {
LABEL_27:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 45) & 1) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44) & 1) != 0)
    {
      goto LABEL_21;
    }
    int v20 = *(unsigned __int8 *)(v18 + 16);
  }
LABEL_30:
  if (a4 && v20 == 61)
  {
    uint64_t v24 = *((void *)a1 + 3);
    uint64_t v25 = *(void *)(a2 - 32);
    uint64_t v117 = *(char **)(v18 - 32);
    uint64_t v118 = -1;
    long long v119 = 0u;
    long long v120 = 0u;
    uint64_t v97 = v25;
    uint64_t v98 = -1;
    long long v99 = 0u;
    long long v100 = 0u;
    int v26 = llvm::AAResults::alias(v24, (uint64_t)&v117, (uint64_t)&v97);
    if (!v26) {
      goto LABEL_21;
    }
    if (v26 == 3)
    {
      uint64_t v68 = *(llvm::Value **)(v18 - 64);
      if (*(unsigned char *)(*(void *)v68 + 8) == 15)
      {
        llvm::ObjectSizeOffsetVisitor::compute(&v93, a1, v68);
        uint64_t v117 = (char *)a3;
        int v69 = (void **)(sub_1CD4A7730((_DWORD *)a5, (uint64_t *)&v117) + 1);
        sub_1CC09A7A4(v69, (uint64_t)&v93);
        sub_1CC09A62C(a7, (uint64_t)v69);
        if (v96 >= 0x41 && v95) {
          MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
        }
        if (v94 < 0x41) {
          return;
        }
        uint64_t v70 = v93;
        if (!v93) {
          return;
        }
        goto LABEL_154;
      }
    }
LABEL_151:
    LODWORD(v118) = 1;
    uint64_t v117 = 0;
    DWORD2(v119) = 1;
    *(void *)&long long v119 = 0;
    uint64_t v97 = a3;
    size_t v75 = sub_1CD4A7730((_DWORD *)a5, &v97) + 1;
    sub_1CC09A704((uint64_t)v75, (uint64_t)&v117);
    sub_1CC09A62C(a7, (uint64_t)v75);
    if (DWORD2(v119) >= 0x41 && (void)v119) {
      MEMORY[0x1D25D9CB0](v119, 0x1000C8000313F17);
    }
    if (v118 < 0x41) {
      return;
    }
    uint64_t v70 = (uint64_t)v117;
    if (!v117) {
      return;
    }
LABEL_154:
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
    return;
  }
  unsigned int v27 = v20 - 33;
  if (v27 > 0x33) {
    goto LABEL_151;
  }
  if (((1 << v27) & 0x8000000000041) == 0) {
    goto LABEL_151;
  }
  uint64_t v28 = *(a4 - 7);
  if (!v28) {
    goto LABEL_151;
  }
  if (*(unsigned char *)(v28 + 16)) {
    goto LABEL_151;
  }
  if (*(void *)(v28 + 24) != a4[6]) {
    goto LABEL_151;
  }
  LODWORD(v113) = 0;
  uint64_t v29 = (uint64_t *)*((void *)a1 + 1);
  if (!v29) {
    goto LABEL_151;
  }
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(*v29, (uint64_t ***)v28, &v113)) {
    goto LABEL_151;
  }
  unsigned int v30 = (void *)*((void *)a1 + 1);
  if (((*(void *)(v30[1] + (((unint64_t)v113 >> 3) & 0x1FFFFFF8)) >> v113) & 1) != 0
    || ((*(unsigned __int8 *)(*v30 + ((unint64_t)v113 >> 2)) >> (2 * (v113 & 3))) & 3) == 0
    || v113 != 346)
  {
    goto LABEL_151;
  }
  uint64_t v31 = *((void *)a1 + 3);
  uint64_t v32 = *(void *)(a2 - 32);
  uint64_t v117 = (char *)v17[-4 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF)];
  uint64_t v118 = -1;
  long long v119 = 0u;
  long long v120 = 0u;
  uint64_t v97 = v32;
  uint64_t v98 = -1;
  long long v99 = 0u;
  long long v100 = 0u;
  int v33 = llvm::AAResults::alias(v31, (uint64_t)&v117, (uint64_t)&v97);
  if (!v33) {
    goto LABEL_21;
  }
  if (v33 != 3) {
    goto LABEL_151;
  }
  unsigned int v71 = llvm::ConstantInt::get((llvm::ConstantInt *)*(a4 - 3), 0, 0);
  size_t v72 = *(const llvm::DataLayout **)a1;
  int v73 = (uint64_t *)sub_1CC16FA94(a2);
  if (!v73) {
    goto LABEL_151;
  }
  unsigned __int16 isImpliedCondition = llvm::isImpliedCondition(v73, 32, (uint64_t)(a4 - 3), (uint64_t)v71, v72, v74 & 1, 0);
  if (isImpliedCondition < 0x100u) {
    goto LABEL_151;
  }
  if (!(_BYTE)isImpliedCondition) {
    goto LABEL_151;
  }
  uint64_t v77 = v17[-4 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF) + 8];
  if (!v77 || *(unsigned char *)(v77 + 16) != 16) {
    goto LABEL_151;
  }
  unsigned int v78 = *(_DWORD *)(v77 + 32);
  if (v78 > 0x40) {
    operator new[]();
  }
  unsigned int v90 = *(_DWORD *)(v77 + 32);
  uint64_t v89 = *(void *)(v77 + 24);
  unsigned int v92 = v78;
  uint64_t v91 = 0;
  uint64_t v117 = (char *)a3;
  uint64_t v79 = (void **)(sub_1CD4A7730((_DWORD *)a5, (uint64_t *)&v117) + 1);
  sub_1CC09A7A4(v79, (uint64_t)&v89);
  sub_1CC09A62C(v80, (uint64_t)v79);
  if (v92 >= 0x41 && v91) {
    MEMORY[0x1D25D9CB0](v91, 0x1000C8000313F17);
  }
  if (v90 >= 0x41)
  {
    uint64_t v70 = v89;
    if (v89) {
      goto LABEL_154;
    }
  }
}

llvm::ObjectSizeOffsetVisitor *llvm::ObjectSizeOffsetVisitor::visitLoadInst@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::LoadInst *a2@<X1>, uint64_t a3@<X8>)
{
  v5[41] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 3))
  {
    v5[0] = 1;
    for (uint64_t i = 1; i != 41; i += 5)
      v5[i] = -4096;
    unsigned int v4 = 0;
    llvm::ObjectSizeOffsetVisitor::findLoadSizeOffset(this, (uint64_t)a2, *((void *)a2 + 5), (void *)a2 + 3, (uint64_t)v5, &v4, a3);
    return (llvm::ObjectSizeOffsetVisitor *)sub_1CD4A7DF8((uint64_t)v5);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 1;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t llvm::ObjectSizeOffsetVisitor::combineSizeOffset@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v4 = *(_DWORD *)(a2 + 8) >= 2u && *(_DWORD *)(a2 + 24) >= 2u;
  if (!v4 || (*(_DWORD *)(a3 + 8) >= 2u ? (BOOL v6 = *(_DWORD *)(a3 + 24) > 1u) : (BOOL v6 = 0), !v6))
  {
    *(_DWORD *)(a4 + 8) = 1;
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(void *)(a4 + 16) = 0;
    return result;
  }
  if (*(unsigned char *)(result + 16))
  {
    if (*(unsigned char *)(result + 16) == 2)
    {
      sub_1CC096920(a2, (uint64_t)&__s1);
      sub_1CC096920(a3, (uint64_t)&__s2);
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2) <= 0) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = a2;
      }
    }
    else
    {
      sub_1CC096920(a2, (uint64_t)&__s1);
      sub_1CC096920(a3, (uint64_t)&__s2);
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&__s1, (const llvm::APInt *)&__s2) >= 0) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = a2;
      }
    }
    uint64_t result = sub_1CC09A62C(a4, v7);
    if (v14 >= 0x41)
    {
      uint64_t result = (uint64_t)__s2;
      if (__s2) {
        uint64_t result = MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
      }
    }
    if (v16 < 0x41) {
      return result;
    }
    uint64_t result = (uint64_t)__s1;
    if (!__s1) {
      return result;
    }
    return MEMORY[0x1D25D9CB0]();
  }
  sub_1CC096920(a2, (uint64_t)&__s1);
  uint64_t result = sub_1CC096920(a3, (uint64_t)&__s2);
  unsigned int v8 = v16;
  if (v16 > 0x40)
  {
    unsigned int v9 = __s1;
    char v10 = __s2;
    uint64_t result = memcmp(__s1, __s2, (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8);
    if (!result) {
      goto LABEL_19;
    }
LABEL_30:
    *(_DWORD *)(a4 + 8) = 1;
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(void *)(a4 + 16) = 0;
    goto LABEL_31;
  }
  unsigned int v9 = __s1;
  char v10 = __s2;
  if (__s1 != __s2) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t result = sub_1CC09A62C(a4, a2);
LABEL_31:
  if (v14 >= 0x41 && v10) {
    uint64_t result = MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
  }
  if (v8 >= 0x41 && v9) {
    return MEMORY[0x1D25D9CB0]();
  }
  return result;
}

uint64_t *llvm::ObjectSizeOffsetVisitor::visitPHINode@<X0>(llvm::ObjectSizeOffsetVisitor *this@<X0>, llvm::PHINode *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = (llvm::Value **)*((void *)a2 - 1);
    uint64_t v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = (llvm::Value **)((char *)a2 - 32 * v6);
  }
  uint64_t result = llvm::ObjectSizeOffsetVisitor::compute(&v12, this, *v7);
  if (v6 != 1)
  {
    unsigned int v9 = v7 + 4;
    uint64_t v10 = 32 * v6 - 32;
    do
    {
      sub_1CC09A62C((uint64_t)&v16, (uint64_t)&v12);
      BOOL v11 = *v9;
      sub_1CC09A62C((uint64_t)&v28, (uint64_t)&v16);
      llvm::ObjectSizeOffsetVisitor::compute(&v24, this, v11);
      llvm::ObjectSizeOffsetVisitor::combineSizeOffset((uint64_t)this, (uint64_t)&v28, (uint64_t)&v24, (uint64_t)&v20);
      if (v27 >= 0x41 && v26) {
        MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
      }
      if (v25 >= 0x41 && v24) {
        MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
      if (v31 >= 0x41 && v30) {
        MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
      }
      if (v29 >= 0x41 && v28) {
        MEMORY[0x1D25D9CB0](v28, 0x1000C8000313F17);
      }
      uint64_t result = (uint64_t *)sub_1CC09A704((uint64_t)&v12, (uint64_t)&v20);
      if (v23 >= 0x41)
      {
        uint64_t result = v22;
        if (v22) {
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
        }
      }
      if (v21 >= 0x41)
      {
        uint64_t result = v20;
        if (v20) {
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
        }
      }
      if (v19 >= 0x41)
      {
        uint64_t result = v18;
        if (v18) {
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
        }
      }
      if (v17 >= 0x41)
      {
        uint64_t result = v16;
        if (v16) {
          uint64_t result = (uint64_t *)MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
        }
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
  }
  *(_DWORD *)(a3 + 8) = v13;
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v15;
  *(void *)(a3 + 16) = v14;
  return result;
}

void llvm::ObjectSizeOffsetVisitor::visitInstruction(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::ObjectSizeOffsetEvaluator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  v11[0] = &unk_1F2605920;
  v11[1] = a1;
  uint64_t v12 = v11;
  int v13 = &unk_1F2616B68;
  v14[3] = v14;
  v14[0] = &unk_1F2605920;
  v14[1] = a1;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a1 + 40;
  *(void *)(a1 + 32) = 0x200000000;
  *(void *)(a1 + 88) = a4;
  *(void *)(a1 + 96) = a1 + 144;
  *(void *)(a1 + 104) = a1 + 160;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 124) = 512;
  *(unsigned char *)(a1 + 126) = 7;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = &unk_1F2602158;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = &unk_1F2616B68;
  *(void *)(a1 + 192) = a1 + 168;
  *(void *)(a1 + 168) = &unk_1F2605920;
  *(void *)(a1 + 176) = a1;
  llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter((llvm::IRBuilderCallbackInserter *)&v13);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *, uint64_t))(*v12 + 40))(v12, v9);
  }
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a1 + 272;
  *(void *)(a1 + 248) = a1 + 272;
  *(void *)(a1 + 256) = 8;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 336) = a5;
  *(void *)(a1 + 344) = a6;
  *(void *)(a1 + 352) = a1 + 384;
  *(void *)(a1 + 360) = a1 + 384;
  *(void *)(a1 + 368) = 8;
  *(_DWORD *)(a1 + 376) = 0;
  return a1;
}

void *llvm::ObjectSizeOffsetEvaluator::compute_(llvm::ObjectSizeOffsetEvaluator *this, llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v9 = *((_OWORD *)this + 21);
  v94[0] = *(_OWORD *)this;
  v94[1] = v9;
  unsigned int v96 = 1;
  uint64_t v95 = 0;
  uint64_t v97 = v101;
  uint64_t v98 = v101;
  uint64_t v99 = 8;
  int v100 = 0;
  llvm::ObjectSizeOffsetVisitor::compute(&v90, (llvm::ObjectSizeOffsetVisitor *)v94, a2, a7);
  if (v91 >= 2 && v93 >= 2)
  {
    BOOL v11 = llvm::ConstantInt::get(*((llvm::ConstantInt **)this + 2), (llvm::LLVMContext *)&v90, v10);
    llvm::ConstantInt::get(*((llvm::ConstantInt **)this + 2), (llvm::LLVMContext *)&v92, v12);
    goto LABEL_4;
  }
  uint64_t v14 = llvm::Value::stripPointerCasts(a2);
  unsigned int v102 = v14;
  unsigned int v16 = (char *)this + 216;
  uint64_t v15 = *((void *)this + 27);
  uint64_t v87 = 0;
  if (sub_1CD4A7E9C(v15, *((_DWORD *)this + 58), (uint64_t)v14, &v87)
    && v87 != *((void *)this + 27) + 56 * *((unsigned int *)this + 58))
  {
    BOOL v11 = *(void **)(v87 + 24);
    goto LABEL_4;
  }
  unsigned int v17 = (char *)this + 24;
  uint64_t v18 = *((void *)this + 3);
  uint64_t v87 = (uint64_t)this + 24;
  long long v88 = *(_OWORD *)((char *)this + 72);
  uint64_t v19 = *((unsigned int *)this + 8);
  if (v19)
  {
    unsigned int v78 = (unsigned __int8 **)(v18 + 8);
    uint64_t v79 = 16 * v19;
    while (*((_DWORD *)v78 - 2))
    {
      v78 += 2;
      v79 -= 16;
      if (!v79) {
        goto LABEL_16;
      }
    }
    uint64_t v80 = *v78;
    uint64_t v89 = v80;
    unsigned int v17 = (char *)this + 24;
    if (v80)
    {
      llvm::MetadataTracking::track((uint64_t)&v89, v80, 2);
      unsigned int v17 = (char *)this + 24;
    }
  }
  else
  {
LABEL_16:
    uint64_t v89 = 0;
  }
  if (v14 && *((unsigned __int8 *)v14 + 16) >= 0x1Cu)
  {
    *((void *)this + 9) = *((void *)v14 + 5);
    *((void *)this + 10) = (char *)v14 + 24;
    int v20 = (unsigned __int8 *)*((void *)v14 + 6);
    uint64_t v103 = v20;
    if (v20)
    {
      char v74 = v17;
      llvm::MetadataTracking::track((uint64_t)&v103, v20, 2);
      unsigned int v17 = v74;
      uint64_t v21 = (uint64_t)v103;
    }
    else
    {
      uint64_t v21 = 0;
    }
    sub_1CB8461A4((uint64_t)v17, 0, v21);
    if (v103)
    {
      int v75 = *v103;
      if ((v75 - 4) > 0x1E)
      {
        if ((v75 - 3) >= 0xFFFFFFFE) {
          unsigned int v84 = v103;
        }
        else {
          unsigned int v84 = 0;
        }
        if ((v75 - 3) < 0xFFFFFFFE)
        {
          if (v75 == 3) {
            *((void *)v103 + 1) = 0;
          }
          goto LABEL_22;
        }
        unint64_t v77 = (unint64_t)(v84 + 8);
      }
      else
      {
        if ((v103[1] & 0x7F) != 2 && !*((_DWORD *)v103 + 3)) {
          goto LABEL_22;
        }
        uint64_t v76 = *((void *)v103 + 2);
        if ((v76 & 4) == 0) {
          goto LABEL_22;
        }
        unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
        if (!v77) {
          goto LABEL_22;
        }
      }
      unsigned int v104 = &v103;
      sub_1CC5FA668(v77 + 16, &v104);
      uint64_t v14 = v102;
    }
  }
LABEL_22:
  uint64_t v22 = *((void *)this + 31);
  uint64_t v23 = *((unsigned int *)this + 65);
  if (v22 == *((void *)this + 30))
  {
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 8 * v23;
      uint64_t v26 = (llvm::Value **)*((void *)this + 31);
      while (*v26 != v14)
      {
        if (*v26 == (llvm::Value *)-2) {
          uint64_t v24 = v26;
        }
        ++v26;
        v25 -= 8;
        if (!v25)
        {
          if (!v24) {
            goto LABEL_30;
          }
          *uint64_t v24 = v14;
          --*((_DWORD *)this + 66);
          goto LABEL_54;
        }
      }
      goto LABEL_59;
    }
LABEL_30:
    unsigned int v27 = *((_DWORD *)this + 64);
    if (v23 < v27)
    {
      *((_DWORD *)this + 65) = v23 + 1;
      *(void *)(v22 + 8 * v23) = v14;
      goto LABEL_54;
    }
  }
  else
  {
    unsigned int v27 = *((_DWORD *)this + 64);
  }
  if (3 * v27 <= 4 * ((int)v23 - *((_DWORD *)this + 66)))
  {
    if (v27 >= 0x40) {
      v27 *= 2;
    }
    else {
      unsigned int v27 = 128;
    }
    goto LABEL_144;
  }
  if (v27 - v23 < v27 >> 3)
  {
LABEL_144:
    llvm::SmallPtrSetImplBase::Grow((llvm::ObjectSizeOffsetEvaluator *)((char *)this + 240), v27);
    unsigned int v27 = *((_DWORD *)this + 64);
    uint64_t v22 = *((void *)this + 31);
  }
  unsigned int v28 = v27 - 1;
  unsigned int v29 = (v27 - 1) & ((v14 >> 4) ^ (v14 >> 9));
  uint64_t v30 = (llvm::Value **)(v22 + 8 * v29);
  unsigned int v31 = *v30;
  if (*v30 != (llvm::Value *)-1)
  {
    uint64_t v32 = 0;
    int v33 = 1;
    while (v31 != v14)
    {
      if (v32) {
        BOOL v34 = 0;
      }
      else {
        BOOL v34 = v31 == (llvm::Value *)-2;
      }
      if (v34) {
        uint64_t v32 = v30;
      }
      unsigned int v35 = v29 + v33++;
      unsigned int v29 = v35 & v28;
      uint64_t v30 = (llvm::Value **)(v22 + 8 * (v35 & v28));
      unsigned int v31 = *v30;
      if (*v30 == (llvm::Value *)-1) {
        goto LABEL_47;
      }
    }
    goto LABEL_59;
  }
  uint64_t v32 = 0;
LABEL_47:
  if (v32) {
    uint64_t v36 = v32;
  }
  else {
    uint64_t v36 = v30;
  }
  if (*v36 == v14) {
    goto LABEL_59;
  }
  if (*v36 == (llvm::Value *)-2) {
    --*((_DWORD *)this + 66);
  }
  else {
    ++*((_DWORD *)this + 65);
  }
  *uint64_t v36 = v14;
LABEL_54:
  unsigned int v37 = *((unsigned __int8 *)v14 + 16);
  if (v37 != 62)
  {
    if (v37 == 5)
    {
      if (*((_WORD *)v14 + 9) == 34) {
        goto LABEL_57;
      }
    }
    else if (v37 >= 0x1C)
    {
      uint64_t v38 = sub_1CD4A6DC8((uint64_t **)this, v14);
      goto LABEL_61;
    }
LABEL_59:
    BOOL v11 = 0;
    uint64_t v40 = 0;
    goto LABEL_62;
  }
LABEL_57:
  uint64_t v38 = (llvm::Instruction *)llvm::ObjectSizeOffsetEvaluator::visitGEPOperator(this, v14);
LABEL_61:
  BOOL v11 = v38;
  uint64_t v40 = v39;
LABEL_62:
  int v41 = sub_1CD4A7F38((uint64_t)v16, (uint64_t *)&v102);
  BOOL v42 = v41;
  uint64_t v43 = (void *)v41[3];
  if (v43 != v11)
  {
    if (v43 && v43 != (void *)-8192 && v43 != (void *)-4096)
    {
      unint64_t v50 = v41[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v50 = v41[2];
      uint64_t v51 = (unint64_t *)v41[2];
      if (v51)
      {
        unint64_t *v51 = *v51 & 7 | v50;
      }
      else
      {
        uint64_t v52 = v41[3];
        uint64_t v53 = ***(int32x2_t ****)v52;
        unint64_t v54 = (unint64_t)v53[303];
        if (v54 <= v50)
        {
          uint64_t v55 = v53[305].u32[0];
          if (v54 + 16 * v55 > v50)
          {
            unsigned int v56 = v55 - 1;
            LODWORD(v57) = v56 & ((v52 >> 4) ^ (v52 >> 9));
            int v58 = (uint64_t *)(v54 + 16 * v57);
            uint64_t v59 = *v58;
            if (v52 == *v58)
            {
LABEL_97:
              *int v58 = -8192;
              v53[304] = vadd_s32(v53[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v52 = v41[3];
            }
            else
            {
              int v60 = 1;
              while (v59 != -4096)
              {
                int v61 = v57 + v60++;
                uint64_t v57 = v61 & v56;
                uint64_t v59 = *(void *)(v54 + 16 * v57);
                if (v52 == v59)
                {
                  int v58 = (uint64_t *)(v54 + 16 * v57);
                  goto LABEL_97;
                }
              }
            }
            *(unsigned char *)(v52 + 17) &= ~1u;
          }
        }
      }
    }
    _OWORD v41[3] = v11;
    if (v11 != (void *)-8192 && v11 != (void *)-4096 && v11) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v41 + 1));
    }
  }
  uint64_t v44 = v42[6];
  if (v44 != v40)
  {
    if (v44 && v44 != -8192 && v44 != -4096)
    {
      unint64_t v62 = v42[4] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v62 = v42[5];
      unsigned int v63 = (unint64_t *)v42[5];
      if (v63)
      {
        *unsigned int v63 = *v63 & 7 | v62;
      }
      else
      {
        uint64_t v64 = v42[6];
        uint64_t v65 = ***(int32x2_t ****)v64;
        unint64_t v66 = (unint64_t)v65[303];
        if (v66 <= v62)
        {
          uint64_t v67 = v65[305].u32[0];
          if (v66 + 16 * v67 > v62)
          {
            unsigned int v68 = v67 - 1;
            LODWORD(v69) = v68 & ((v64 >> 4) ^ (v64 >> 9));
            uint64_t v70 = (uint64_t *)(v66 + 16 * v69);
            uint64_t v71 = *v70;
            if (v64 == *v70)
            {
LABEL_109:
              *uint64_t v70 = -8192;
              v65[304] = vadd_s32(v65[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v64 = v42[6];
            }
            else
            {
              int v72 = 1;
              while (v71 != -4096)
              {
                int v73 = v69 + v72++;
                uint64_t v69 = v73 & v68;
                uint64_t v71 = *(void *)(v66 + 16 * v69);
                if (v64 == v71)
                {
                  uint64_t v70 = (uint64_t *)(v66 + 16 * v69);
                  goto LABEL_109;
                }
              }
            }
            *(unsigned char *)(v64 + 17) &= ~1u;
          }
        }
      }
    }
    v42[6] = v40;
    if (v40 != -8192 && v40 != -4096 && v40) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v42 + 4));
    }
  }
  uint64_t v45 = v87;
  if ((void)v88)
  {
    sub_1CBF5385C(v87, v88, *((uint64_t *)&v88 + 1));
    uint64_t v45 = v87;
  }
  else
  {
    *(void *)(v87 + 48) = 0;
    *(void *)(v45 + 56) = 0;
  }
  uint64_t v103 = v89;
  if (v89)
  {
    llvm::MetadataTracking::track((uint64_t)&v103, v89, 2);
    uint64_t v46 = (uint64_t)v103;
  }
  else
  {
    uint64_t v46 = 0;
  }
  sub_1CB8461A4(v45, 0, v46);
  if (v103)
  {
    int v81 = *v103;
    if ((v81 - 4) > 0x1E)
    {
      if ((v81 - 3) >= 0xFFFFFFFE) {
        unsigned int v86 = v103;
      }
      else {
        unsigned int v86 = 0;
      }
      if ((v81 - 3) < 0xFFFFFFFE)
      {
        if (v81 == 3) {
          *((void *)v103 + 1) = 0;
        }
        goto LABEL_80;
      }
      unint64_t v83 = (unint64_t)(v86 + 8);
    }
    else
    {
      if ((v103[1] & 0x7F) != 2 && !*((_DWORD *)v103 + 3)) {
        goto LABEL_80;
      }
      uint64_t v82 = *((void *)v103 + 2);
      if ((v82 & 4) == 0) {
        goto LABEL_80;
      }
      unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
      if (!v83) {
        goto LABEL_80;
      }
    }
    unsigned int v104 = &v103;
    sub_1CC5FA668(v83 + 16, &v104);
  }
LABEL_80:
  if (!v89) {
    goto LABEL_4;
  }
  int v47 = *v89;
  if ((v47 - 4) > 0x1E)
  {
    if ((v47 - 3) >= 0xFFFFFFFE) {
      uint64_t v85 = v89;
    }
    else {
      uint64_t v85 = 0;
    }
    if ((v47 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v49 = (unint64_t)(v85 + 8);
LABEL_152:
      unsigned int v104 = &v89;
      sub_1CC5FA668(v49 + 16, &v104);
      goto LABEL_4;
    }
    if (v47 == 3) {
      *((void *)v89 + 1) = 0;
    }
  }
  else if ((v89[1] & 0x7F) == 2 || *((_DWORD *)v89 + 3))
  {
    uint64_t v48 = *((void *)v89 + 2);
    if ((v48 & 4) != 0)
    {
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (v49) {
        goto LABEL_152;
      }
    }
  }
LABEL_4:
  if (v93 >= 0x41 && v92) {
    MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
  }
  if (v91 >= 0x41 && v90) {
    MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
  }
  if (v98 != v97) {
    free(v98);
  }
  if (v96 >= 0x41 && v95) {
    MEMORY[0x1D25D9CB0](v95, 0x1000C8000313F17);
  }
  return v11;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitGEPOperator(llvm::ObjectSizeOffsetEvaluator *this, llvm::GEPOperator *a2)
{
  int v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0) {
    int v5 = (llvm::Value **)*((void *)a2 - 1);
  }
  else {
    int v5 = (llvm::Value **)((char *)a2 - 32 * (v4 & 0x7FFFFFF));
  }
  uint64_t v6 = llvm::ObjectSizeOffsetEvaluator::compute_(this, *v5);
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  uint64_t v10 = v6;
  BOOL v11 = v7;
  uint64_t v13 = *(void *)this;
  uint64_t v12 = (char *)this + 24;
  uint64_t v14 = sub_1CD4A7084((uint64_t)v12, v13, a2, 1u);
  __int16 v16 = 257;
  sub_1CB844A3C((uint64_t)v12, v11, (uint64_t)v14, (uint64_t)v15, 0, 0);
  return v10;
}

llvm::Instruction *sub_1CC09A1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 88))(*(void *)(a1 + 72), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return sub_1CB844E0C((uint64_t *)a1, result, a4);
    }
  }
  else
  {
    return sub_1CB84604C((uint64_t *)a1, 17, (void *)a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitExtractElementInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitExtractValueInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitIntToPtrInst()
{
  return 0;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitLoadInst()
{
  return 0;
}

void sub_1CC09A30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) == *(_DWORD *)(a1 + 60))
  {
    unsigned int v20 = v7 + (v7 >> 1);
    if (v20 <= 2) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = v20;
    }
    *(_DWORD *)(a1 + 60) = v21;
    if ((v6 & 0x40000000) != 0) {
      uint64_t v22 = *(uint64_t **)(a1 - 8);
    }
    else {
      uint64_t v22 = (uint64_t *)(a1 - 32 * v7);
    }
    uint64_t v23 = operator new(40 * v21);
    *(void *)(a1 - 8) = v23;
    uint64_t v24 = v23;
    do
    {
      *uint64_t v24 = 0;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = a1;
      v24 += 4;
    }
    while (v24 != &v23[4 * v21]);
    int v25 = *(_DWORD *)(a1 + 20);
    if ((v25 & 0x40000000) != 0) {
      uint64_t v26 = (uint64_t)v23;
    }
    else {
      uint64_t v26 = a1 - 32 * (v25 & 0x7FFFFFF);
    }
    sub_1CC5E4108((uint64_t)&v30, v22, &v22[4 * v7], v26);
    if (v7)
    {
      memmove((void *)(v26 + 32 * v21), &v22[4 * v7], 8 * v7);
      uint64_t v27 = 4 * v7;
      do
      {
        unsigned int v28 = &v22[v27];
        if (v22[v27 - 4])
        {
          *(void *)*(v28 - 2) = *(v28 - 3);
          uint64_t v29 = *(v28 - 3);
          if (v29) {
            *(void *)(v29 + 16) = *(v28 - 2);
          }
        }
        v27 -= 4;
      }
      while (v27 * 8);
    }
    operator delete(v22);
    int v6 = *(_DWORD *)(a1 + 20);
  }
  uint64_t v8 = (v6 + 1) & 0x7FFFFFF;
  *(_DWORD *)(a1 + 20) = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  uint64_t v9 = (v8 - 1);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v10 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v10 = a1 - 32 * v8;
  }
  uint64_t v11 = v10 + 32 * v9;
  if (*(void *)v11)
  {
    **(void **)(v11 + 16) = *(void *)(v11 + 8);
    uint64_t v19 = *(void *)(v11 + 8);
    if (v19) {
      *(void *)(v19 + 16) = *(void *)(v11 + 16);
    }
  }
  *(void *)uint64_t v11 = a2;
  if (a2)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v13 = (void *)(a2 + 8);
    uint64_t v12 = v14;
    uint64_t v15 = v10 + 32 * v9;
    *(void *)(v15 + 8) = v14;
    if (v14) {
      *(void *)(v12 + 16) = v15 + 8;
    }
    *(void *)(v15 + 16) = v13;
    *uint64_t v13 = v11;
  }
  int v16 = *(_DWORD *)(a1 + 20);
  uint64_t v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0) {
    uint64_t v18 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v18 = a1 - 32 * v17;
  }
  *(void *)(v18 + 32 * *(unsigned int *)(a1 + 60) + 8 * (v17 - 1)) = a3;
}

uint64_t llvm::ObjectSizeOffsetEvaluator::visitInstruction()
{
  return 0;
}

void **sub_1CC09A504(void **a1)
{
  if (*a1 != a1 + 2) {
    free(*a1);
  }
  return a1;
}

uint64_t sub_1CC09A548(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 8) = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  *(void *)uint64_t result = *(void *)a2;
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(result + 24) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  *(void *)(result + 16) = *(void *)a3;
  return result;
}

uint64_t sub_1CC09A62C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 8) = v2;
  if (v2 > 0x40) {
    operator new[]();
  }
  *(void *)uint64_t result = *(void *)a2;
  unsigned int v3 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 24) = v3;
  if (v3 > 0x40) {
    operator new[]();
  }
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t sub_1CC09A704(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(void *)a1) {
    MEMORY[0x1D25D9CB0]();
  }
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      MEMORY[0x1D25D9CB0](v4, 0x1000C8000313F17);
    }
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  return a1;
}

void **sub_1CC09A7A4(void **this, uint64_t a2)
{
  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a2 + 8) > 0x40u)
  {
    if (this != (void **)a2)
    {
      llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a2 + 8));
      uint64_t v5 = *((unsigned int *)this + 2);
      if (v5 <= 0x40) {
        *this = *(void **)a2;
      }
      else {
        memcpy(*this, *(const void **)a2, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    *this = *(void **)a2;
    *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  }
  if (*((_DWORD *)this + 6) > 0x40u || *(_DWORD *)(a2 + 24) > 0x40u)
  {
    if (this != (void **)a2)
    {
      int v6 = this + 2;
      llvm::APInt::reallocate((uint64_t)(this + 2), *(_DWORD *)(a2 + 24));
      uint64_t v7 = *((unsigned int *)this + 6);
      if (v7 <= 0x40) {
        *int v6 = *(void **)(a2 + 16);
      }
      else {
        memcpy(*v6, *(const void **)(a2 + 16), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
  }
  else
  {
    this[2] = *(void **)(a2 + 16);
    *((_DWORD *)this + 6) = *(_DWORD *)(a2 + 24);
  }
  return this;
}

void sub_1CC09A8C4()
{
}

void *sub_1CC09A8D8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F26058D8;
  return result;
}

void sub_1CC09A910(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26058D8;
}

uint64_t sub_1CC09A938(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

void sub_1CC09A944()
{
}

void *sub_1CC09A958(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2605920;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC09A9A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2605920;
  a2[1] = v2;
  return result;
}

void sub_1CC09A9CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 360);
  uint64_t v5 = *(unsigned int *)(v3 + 372);
  if (v4 != *(void *)(v3 + 352))
  {
    unsigned int v9 = *(_DWORD *)(v3 + 368);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *(_DWORD *)(v3 + 368);
    if (v5 < v9)
    {
      *(_DWORD *)(v3 + 372) = v5 + 1;
      *(void *)(v4 + 8 * v5) = v2;
      return;
    }
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 376)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 352), v9);
    unsigned int v9 = *(_DWORD *)(v3 + 368);
    uint64_t v4 = *(void *)(v3 + 360);
LABEL_14:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      uint64_t v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*v18 != v2)
      {
        if (*v18 == -2) {
          --*(_DWORD *)(v3 + 376);
        }
        else {
          ++*(_DWORD *)(v3 + 372);
        }
        *uint64_t v18 = v2;
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != v2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          uint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    return;
  }
  int v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v8 = *(void **)(v3 + 360);
  while (*v8 != v2)
  {
    if (*v8 == -2) {
      int v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *int v6 = v2;
      --*(_DWORD *)(v3 + 376);
      return;
    }
  }
}

unint64_t *sub_1CC09AB4C(unint64_t *result, void *a2)
{
  *uint64_t result = 6;
  result[1] = 0;
  unint64_t v2 = a2[2];
  result[2] = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(void *)v4;
    *(void *)unint64_t v4 = result;
    *uint64_t result = v4 | 6;
    uint64_t v5 = (unint64_t *)result[1];
    if (v5) {
      *uint64_t v5 = *v5 & 7 | (unint64_t)(result + 1);
    }
  }
  result[3] = 6;
  int v6 = result + 3;
  result[4] = 0;
  unint64_t v7 = (unint64_t)(result + 4);
  unint64_t v8 = a2[5];
  result[5] = v8;
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
  {
    unint64_t v10 = a2[3] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v7 = *(void *)v10;
    *(void *)unint64_t v10 = v6;
    *int v6 = v10 | 6;
    if (*(void *)v7) {
      **(void **)unint64_t v7 = **(void **)v7 & 7 | v7;
    }
  }
  return result;
}

llvm::Value *sub_1CC09AC18(uint64_t a1, uint64_t a2, llvm::Constant **a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, uint64_t a7, uint64_t a8, const void *a9, std::string::size_type a10, unsigned __int8 a11, unsigned __int8 a12)
{
  int v15 = (llvm::DataLayout *)a2;
  uint64_t v107 = a3;
  uint64_t v108 = a4;
  unsigned int v16 = *(_DWORD *)(a7 + 8);
  if ((v16 & 0xFE) == 0x12) {
    unsigned int v16 = *(_DWORD *)(**(void **)(a7 + 16) + 8);
  }
  if (v16 < 0x100) {
    goto LABEL_12;
  }
  unsigned int v17 = v16 >> 8;
  uint64_t v18 = *(unsigned int *)(a2 + 240);
  uint64_t v19 = *(void *)(a2 + 232);
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 232);
    unint64_t v20 = *(unsigned int *)(a2 + 240);
    do
    {
      unint64_t v21 = v20 >> 1;
      uint64_t v22 = v19 + 16 * (v20 >> 1);
      unsigned int v23 = *(_DWORD *)(v22 + 8);
      uint64_t v24 = v22 + 16;
      v20 += ~(v20 >> 1);
      if (v23 < v17) {
        uint64_t v19 = v24;
      }
      else {
        unint64_t v20 = v21;
      }
    }
    while (v20);
  }
  if (v19 == *(void *)(a2 + 232) + 16 * v18 || *(_DWORD *)(v19 + 8) != v17) {
LABEL_12:
  }
    uint64_t v19 = *(void *)(a2 + 232);
  int v25 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a7, (llvm::LLVMContext *)*(unsigned int *)(v19 + 12));
  unsigned int v28 = v25;
  unsigned int v94 = a6;
  uint64_t v97 = v15;
  if ((*(_DWORD *)(a7 + 8) & 0xFE) == 0x12)
  {
    uint64_t v92 = (llvm::Type *)*(unsigned int *)(a7 + 32);
    if (*(_DWORD *)(a7 + 8) == 19) {
      llvm::ScalableVectorType::get(v25, v92);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v25, v92);
    }
    unsigned int v28 = v93;
  }
  unsigned int v29 = *((_DWORD *)v28 + 2);
  if ((v29 & 0xFE) == 0x12) {
    unsigned int v29 = *(_DWORD *)(*v28[2] + 8);
  }
  if (a5 == a6) {
    return llvm::Constant::getNullValue((llvm::Constant *)v28, v26, v27);
  }
  uint64_t v101 = 0;
  unsigned int v98 = a11 & ~a12;
  unint64_t v99 = 0xFFFFFFFFFFFFFFFFLL >> -(v29 >> 8);
  uint64_t v30 = (a10 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a10 | 7) != 0x17) {
    uint64_t v30 = a10 | 7;
  }
  size_t __sz = v30 + 1;
  unint64_t v95 = (v30 + 1) | 0x8000000000000000;
  do
  {
    VectorSplat = *a5;
    uint64_t v32 = (llvm::Type *)(v108 & 0xFFFFFFFFFFFFFFF8);
    if ((v108 & 4) == 0 || !v32)
    {
      AggregateElement = *v107;
      if (*v107) {
        BOOL v34 = *((unsigned char *)*v107 + 16) == 16;
      }
      else {
        BOOL v34 = 0;
      }
      if (!v34) {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
      }
      unsigned int v37 = (unsigned int *)*((void *)AggregateElement + 3);
      unsigned int v35 = (unsigned int *)((char *)AggregateElement + 24);
      uint64_t v36 = v37;
      if (v35[2] < 0x41) {
        uint64_t v36 = v35;
      }
      uint64_t v32 = *(llvm::Type **)(*((void *)v32 + 2) + 8 * *v36);
    }
    uint64_t v38 = sub_1CB83544C((uint64_t)v15, (uint64_t)v32);
    BOOL v40 = v39 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v15, v32, 1);
    if (v40) {
    unint64_t v43 = v99 & -(1 << Alignment) & ((1 << Alignment) + ((unint64_t)(v38 + 7) >> 3) - 1);
    }
    unsigned int v44 = VectorSplat[16];
    if (v44 > 0x14 || VectorSplat == 0)
    {
      if ((v28[1] & 0xFE) == 0x12 && (*(_DWORD *)(*(void *)VectorSplat + 8) & 0xFE) != 0x12)
      {
        uint64_t v46 = (llvm::Type *)*((unsigned int *)v28 + 8);
        __int16 v106 = 257;
        VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat(a1, v46, VectorSplat, (uint64_t)v105);
      }
      if (*(uint64_t ***)VectorSplat == v28)
      {
LABEL_84:
        if (v43 == 1) {
          goto LABEL_98;
        }
        unint64_t v77 = llvm::ConstantInt::get((llvm::ConstantInt *)v28, v43, 0);
        if (!a9)
        {
          memset(&__dst, 0, sizeof(__dst));
LABEL_94:
          uint64_t v79 = std::string::append(&__dst, ".idx");
          std::string::size_type v80 = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          std::string::size_type v104 = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          __int16 v106 = 260;
          v105[0] = __p;
          VectorSplat = (unsigned __int8 *)sub_1CC09A1EC(a1, (uint64_t)VectorSplat, (uint64_t)v77, (uint64_t)v105, 0, v98);
          if (SHIBYTE(v104) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          goto LABEL_98;
        }
        if (a10 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_138;
        }
        if (a10 >= 0x17)
        {
          p_dst = (std::string *)operator new(__sz);
          __dst.__r_.__value_.__l.__size_ = a10;
          __dst.__r_.__value_.__r.__words[2] = v95;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a10;
          p_dst = &__dst;
          if (!a10) {
            goto LABEL_93;
          }
        }
        memmove(p_dst, a9, a10);
LABEL_93:
        p_dst->__r_.__value_.__s.__data_[a10] = 0;
        goto LABEL_94;
      }
      if ((VectorSplat[23] & 0x10) == 0)
      {
        std::string::size_type v67 = 0;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
        uint64_t v70 = &__dst;
        goto LABEL_80;
      }
      uint64_t v47 = ***(void ***)VectorSplat;
      uint64_t v48 = *(void *)(v47 + 152);
      uint64_t v49 = *(unsigned int *)(v47 + 168);
      if (v49)
      {
        LODWORD(v50) = (v49 - 1) & ((VectorSplat >> 4) ^ (VectorSplat >> 9));
        uint64_t v51 = (unsigned __int8 **)(v48 + 16 * v50);
        uint64_t v52 = *v51;
        if (*v51 == VectorSplat) {
          goto LABEL_71;
        }
        int v53 = 1;
        while (v52 != (unsigned __int8 *)-4096)
        {
          int v54 = v50 + v53++;
          uint64_t v50 = v54 & (v49 - 1);
          uint64_t v52 = *(unsigned __int8 **)(v48 + 16 * v50);
          if (v52 == VectorSplat)
          {
            uint64_t v51 = (unsigned __int8 **)(v48 + 16 * v50);
            goto LABEL_71;
          }
        }
      }
      uint64_t v51 = (unsigned __int8 **)(v48 + 16 * v49);
LABEL_71:
      unint64_t v66 = (unint64_t *)v51[1];
      unint64_t v69 = *v66;
      unsigned int v68 = v66 + 2;
      std::string::size_type v67 = v69;
      if (v69 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_138;
      }
      if (v67 >= 0x17)
      {
        uint64_t v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17) {
          uint64_t v71 = v67 | 7;
        }
        uint64_t v72 = v71 + 1;
        uint64_t v70 = (std::string *)operator new(v71 + 1);
        unint64_t v73 = v72 | 0x8000000000000000;
        a6 = v94;
        __dst.__r_.__value_.__l.__size_ = v67;
        __dst.__r_.__value_.__r.__words[2] = v73;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v67;
        uint64_t v70 = &__dst;
        if (!v67) {
          goto LABEL_79;
        }
      }
      memmove(v70, v68, v67);
LABEL_79:
      int v15 = v97;
LABEL_80:
      v70->__r_.__value_.__s.__data_[v67] = 0;
      char v74 = std::string::append(&__dst, ".c");
      std::string::size_type v75 = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      std::string::size_type v104 = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      __int16 v106 = 260;
      v105[0] = __p;
      VectorSplat = (unsigned __int8 *)sub_1CBF56614(a1, (llvm::CastInst *)VectorSplat, (llvm::Type ***)v28, (llvm::Type *)1, (uint64_t)v105, v76);
      if (SHIBYTE(v104) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      goto LABEL_84;
    }
    if (v44 == 17)
    {
      if (*((_UNKNOWN **)VectorSplat + 4) == &unk_1CFB2E344) {
        uint64_t v89 = (void ***)*((void *)VectorSplat + 5);
      }
      else {
        uint64_t v89 = (void ***)(VectorSplat + 24);
      }
LABEL_127:
      a6 = v94;
      int v15 = v97;
      if ((*((unsigned char *)v89 + 28) & 7) == 3) {
        goto LABEL_113;
      }
      goto LABEL_53;
    }
    if ((*(_DWORD *)(*(void *)VectorSplat + 8) & 0xFE) == 0x12)
    {
      SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)VectorSplat, 0);
      if (SplatValue)
      {
        if (*((unsigned char *)SplatValue + 16) == 17)
        {
          if ((_UNKNOWN *)SplatValue[4] == &unk_1CFB2E344) {
            uint64_t v89 = (void ***)SplatValue[5];
          }
          else {
            uint64_t v89 = (void ***)(SplatValue + 3);
          }
          goto LABEL_127;
        }
      }
    }
    int v55 = VectorSplat[16];
    if (v55 == 16)
    {
      uint64_t v56 = *((unsigned int *)VectorSplat + 8);
      if (v56 >= 0x41)
      {
        int v84 = 0;
        int64_t v85 = (unint64_t)(v56 + 63) >> 6;
        do
        {
          if (v85-- < 1) {
            break;
          }
          unint64_t v87 = *(void *)(*((void *)VectorSplat + 3) + 8 * v85);
          v84 += __clz(v87);
        }
        while (!v87);
        int v88 = v56 | 0xFFFFFFC0;
        if ((v56 & 0x3F) == 0) {
          int v88 = 0;
        }
        if (v84 + v88 == v56) {
          goto LABEL_113;
        }
      }
      else if (!*((void *)VectorSplat + 3))
      {
        goto LABEL_113;
      }
    }
    else if (v55 == 17)
    {
      if (sub_1CB844168((uint64_t)VectorSplat, 0.0)) {
        goto LABEL_113;
      }
    }
    else if ((v55 - 18) < 3 || v55 == 13)
    {
      goto LABEL_113;
    }
LABEL_53:
    if ((v108 & 4) != 0
      || (uint64_t v57 = (llvm::StructType *)(v108 & 0xFFFFFFFFFFFFFFF8), (v108 & 0xFFFFFFFFFFFFFFF8) == 0))
    {
      if ((v28[1] & 0xFE) == 0x12 && (*(_DWORD *)(*(void *)VectorSplat + 8) & 0xFE) != 0x12) {
        VectorSplat = (unsigned __int8 *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v28 + 8) | ((unint64_t)(*((_DWORD *)v28 + 2) == 19) << 32)), (uint64_t)VectorSplat);
      }
      uint64_t v64 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v28, v43, 0);
      IntegerCast = llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)VectorSplat, (llvm::Type ***)v28, (llvm::Type *)1);
      Mul = (unsigned __int8 *)llvm::ConstantExpr::getMul(IntegerCast, v64, 0, (llvm::Constant *)v98);
LABEL_65:
      VectorSplat = Mul;
LABEL_98:
      if (!v101)
      {
        uint64_t v101 = (llvm::Instruction *)VectorSplat;
        goto LABEL_113;
      }
      if (a9)
      {
        if (a10 > 0x7FFFFFFFFFFFFFF7) {
LABEL_138:
        }
          abort();
        if (a10 >= 0x17)
        {
          int v81 = (std::string *)operator new(__sz);
          __dst.__r_.__value_.__l.__size_ = a10;
          __dst.__r_.__value_.__r.__words[2] = v95;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a10;
          int v81 = &__dst;
          if (!a10)
          {
LABEL_108:
            v81->__r_.__value_.__s.__data_[a10] = 0;
            goto LABEL_109;
          }
        }
        memmove(v81, a9, a10);
        goto LABEL_108;
      }
      memset(&__dst, 0, sizeof(__dst));
LABEL_109:
      uint64_t v82 = std::string::append(&__dst, ".offs");
      std::string::size_type v83 = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      std::string::size_type v104 = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      __int16 v106 = 260;
      v105[0] = __p;
      uint64_t v101 = sub_1CB844A3C(a1, v101, (uint64_t)VectorSplat, (uint64_t)v105, 0, v98);
      if (SHIBYTE(v104) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      goto LABEL_113;
    }
    if (VectorSplat[16] != 16) {
      VectorSplat = (unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)VectorSplat, 0);
    }
    int v60 = (unsigned int *)*((void *)VectorSplat + 3);
    uint64_t v59 = (unsigned int *)(VectorSplat + 24);
    int v58 = v60;
    if (v59[2] < 0x41) {
      int v58 = v59;
    }
    uint64_t v61 = *v58;
    unint64_t v62 = *((void *)llvm::DataLayout::getStructLayout(v15, v57) + v61 + 2);
    if (v62)
    {
      Mul = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v28, v62, 0);
      goto LABEL_65;
    }
LABEL_113:
    a5 += 4;
    sub_1CB8460E4((uint64_t)&v107);
  }
  while (a5 != a6);
  uint64_t result = v101;
  if (!v101) {
    return llvm::Constant::getNullValue((llvm::Constant *)v28, v26, v27);
  }
  return result;
}

uint64_t sub_1CC09B4A0()
{
  int v2 = 0;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "If the optimizer should treat aligned_alloc as an unknown function";
  *((void *)&v1 + 1) = 66;
  sub_1CD4A7BEC(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBD043F0, &dword_1CB82C000);
}

uint64_t llvm::MemoryDependenceResults::getCallDependencyFrom(uint64_t a1, const llvm::CallBase *a2, int a3, void *a4, uint64_t a5)
{
  if (*(void **)(a5 + 48) == a4)
  {
LABEL_23:
    uint64_t v17 = *(void *)(*(void *)(a5 + 56) + 80);
    if (v17) {
      uint64_t v18 = v17 - 24;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v18 == a5) {
      return 0x4000000000000003;
    }
    else {
      return 0x2000000000000003;
    }
  }
  int v6 = a4;
  int v9 = *(_DWORD *)(a1 + 376);
  uint64_t v20 = 1;
  while (1)
  {
    int v6 = (void *)*v6;
    if (v6) {
      uint64_t v10 = (uint64_t)(v6 - 3);
    }
    else {
      uint64_t v10 = 0;
    }
    if (sub_1CBF63B28(v10)) {
      goto LABEL_10;
    }
    if (!--v9) {
      return 0x6000000000000003;
    }
    v22[0] = 0;
    v22[1] = -1;
    long long v23 = 0u;
    long long v24 = 0u;
    char v11 = sub_1CC09B6B8((llvm::Instruction *)v10, (uint64_t)v22, *(uint64_t **)(a1 + 208));
    if (v22[0])
    {
      if ((llvm::AAResults::getModRefInfo(*(llvm::AAResults **)(a1 + 192), a2, (const llvm::MemoryLocation *)v22) & 3) != 0) {
        return v20 | v10;
      }
      goto LABEL_10;
    }
    char v12 = v11;
    unsigned int v13 = *(unsigned __int8 *)(v10 + 16) - 33;
    BOOL v14 = v13 > 0x33;
    uint64_t v15 = (1 << v13) & 0x8000000000041;
    if (!v14 && v15 != 0) {
      break;
    }
    if ((v11 & 3) != 0) {
      return v20 | v10;
    }
LABEL_10:
    if (v6 == *(void **)(a5 + 48)) {
      goto LABEL_23;
    }
  }
  if ((llvm::AAResults::getModRefInfo(*(llvm::AAResults **)(a1 + 192), a2, (const llvm::CallBase *)(v6 - 3)) & 3) != 0) {
    return v20 | v10;
  }
  if (!a3
    || (v12 & 2) != 0
    || (llvm::Instruction::isIdenticalToWhenDefined(a2, (const llvm::Instruction *)(v6 - 3)) & 1) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v20 = 2;
  return v20 | v10;
}

uint64_t llvm::MemoryDependenceResults::getDefaultBlockScanLimit(llvm::MemoryDependenceResults *this)
{
  return *((unsigned int *)this + 94);
}

uint64_t sub_1CC09B6B8(llvm::Instruction *this, uint64_t a2, uint64_t *a3)
{
  int v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 == 60)
  {
    if ((*((_WORD *)this + 9) & 0x301) != 0)
    {
      if ((*((_WORD *)this + 9) & 0x380) == 0x100)
      {
        uint64_t v7 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272;
        uint64_t v8 = *((void *)this - 4);
        uint64_t v9 = *(void *)this;
LABEL_11:
        uint64_t v10 = sub_1CB83544C(v7, v9);
        if (v11 == 1) {
          unint64_t v12 = -2;
        }
        else {
          unint64_t v12 = (unint64_t)(v10 + 7) >> 3;
        }
        llvm::Instruction::getAAMetadata((uint64_t ***)this, &v54);
        *(void *)&long long v53 = v8;
        *((void *)&v53 + 1) = v12;
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    uint64_t v17 = *((void *)this - 4);
    uint64_t v18 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, *(void *)this);
    if (v19 == 1) {
      unint64_t v20 = -2;
    }
    else {
      unint64_t v20 = (unint64_t)(v18 + 7) >> 3;
    }
    llvm::Instruction::getAAMetadata((uint64_t ***)this, &v54);
    *(void *)&long long v53 = v17;
    *((void *)&v53 + 1) = v20;
    long long v21 = v55;
    long long v22 = v53;
    *(_OWORD *)(a2 + 16) = v54;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)a2 = v22;
    return 5;
  }
  if (this && v6 == 61)
  {
    if ((*((_WORD *)this + 9) & 0x301) != 0)
    {
      if ((*((_WORD *)this + 9) & 0x380) == 0x100)
      {
        uint64_t v7 = *(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272;
        uint64_t v8 = *((void *)this - 4);
        uint64_t v9 = **((void **)this - 8);
        goto LABEL_11;
      }
LABEL_19:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = -1;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      return 7;
    }
    uint64_t v28 = *((void *)this - 4);
    uint64_t v29 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, **((void **)this - 8));
    if (v30 == 1) {
      unint64_t v31 = -2;
    }
    else {
      unint64_t v31 = (unint64_t)(v29 + 7) >> 3;
    }
    llvm::Instruction::getAAMetadata((uint64_t ***)this, &v54);
    *(void *)&long long v53 = v28;
    *((void *)&v53 + 1) = v31;
    long long v32 = v55;
    long long v33 = v53;
    *(_OWORD *)(a2 + 16) = v54;
    *(_OWORD *)(a2 + 32) = v32;
    *(_OWORD *)a2 = v33;
    return 6;
  }
  if (this && v6 == 88)
  {
    uint64_t v13 = *((void *)this - 4);
    llvm::Instruction::getAAMetadata((uint64_t ***)this, &v54);
    *(void *)&long long v53 = v13;
    *((void *)&v53 + 1) = -2;
LABEL_18:
    long long v14 = v55;
    long long v15 = v53;
    *(_OWORD *)(a2 + 16) = v54;
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)a2 = v15;
    return 7;
  }
  char v56 = 0;
  long long v23 = (uint64_t ***)sub_1CC0960E8((uint64_t)this, &v56);
  if (v23)
  {
    if (!v56)
    {
      BOOL v42 = (llvm::Function *)v23;
      LODWORD(v53) = 0;
      if (llvm::TargetLibraryInfoImpl::getLibFunc(*a3, v23, &v53)
        && ((*(void *)(a3[1] + (((unint64_t)v53 >> 3) & 0x1FFFFFF8)) >> v53) & 1) == 0
        && ((*(unsigned __int8 *)(*a3 + ((unint64_t)v53 >> 2)) >> (2 * (v53 & 3))) & 3) != 0
        && llvm::isLibFreeFunction(v42, v53)
        && *((unsigned char *)this + 16) == 84)
      {
        *(void *)a2 = *((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        *(void *)(a2 + 8) = -2;
        long long v40 = 0uLL;
        *(_OWORD *)(a2 + 16) = 0u;
        goto LABEL_77;
      }
    }
  }
  unsigned int v24 = *((unsigned __int8 *)this + 16);
  uint64_t result = 7;
  if (v24 <= 0x3B)
  {
    if (v24 == 37) {
      return result;
    }
    if (v24 == 33 || v24 == 39) {
      goto LABEL_35;
    }
  }
  else
  {
    if (v24 - 60 > 0x1C) {
      goto LABEL_52;
    }
    if (v24 == 84)
    {
      uint64_t v25 = *((void *)this - 4);
      if (!v25
        || *(unsigned char *)(v25 + 16)
        || *(void *)(v25 + 24) != *((void *)this + 9)
        || (*(unsigned char *)(v25 + 33) & 0x20) == 0)
      {
        goto LABEL_35;
      }
      int v36 = *(_DWORD *)(v25 + 36);
      if (v36 <= 166)
      {
        if (v36 == 163)
        {
          unsigned int v37 = this;
          unsigned int v38 = 2;
          goto LABEL_76;
        }
        if (v36 != 164)
        {
LABEL_35:
          uint64_t v26 = *((void *)this + 8);
          if (!v26 || (*(unsigned char *)(v26 + 17) & 0x30) == 0)
          {
            int v27 = *((_DWORD *)this + 5);
            if (v27 < 0)
            {
              unint64_t v43 = (char *)this - 32 * (v27 & 0x7FFFFFF);
              uint64_t v46 = *((void *)v43 - 1);
              unsigned int v44 = v43 - 8;
              uint64_t v45 = v46;
              if (v46)
              {
                uint64_t v47 = -v45;
                do
                {
                  unsigned int v48 = *(_DWORD *)(*(void *)&v44[v47] + 8);
                  BOOL v49 = v48 > 7;
                  int v50 = (1 << v48) & 0x83;
                  if (v49 || v50 == 0) {
                    return 7;
                  }
                  v47 += 16;
                }
                while (v47);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
            {
              return 7;
            }
          }
LABEL_40:
          unsigned int v24 = *((unsigned __int8 *)this + 16);
          goto LABEL_52;
        }
      }
      else if ((v36 - 167) >= 2)
      {
        if (v36 == 185)
        {
          llvm::MemoryLocation::getForArgument((uint64_t)this, 0, a3, (uint64_t)&v53);
          long long v41 = v54;
          *(_OWORD *)a2 = v53;
          *(_OWORD *)(a2 + 16) = v41;
          *(_OWORD *)(a2 + 32) = v55;
          return 5;
        }
        if (v36 != 187) {
          goto LABEL_35;
        }
      }
      unsigned int v37 = this;
      unsigned int v38 = 1;
LABEL_76:
      llvm::MemoryLocation::getForArgument((uint64_t)v37, v38, a3, (uint64_t)&v53);
      long long v39 = v54;
      *(_OWORD *)a2 = v53;
      *(_OWORD *)(a2 + 16) = v39;
      long long v40 = v55;
LABEL_77:
      *(_OWORD *)(a2 + 32) = v40;
      return 6;
    }
    if (((1 << (v24 - 60)) & 0x1010003A) != 0) {
      return result;
    }
    if (v24 == 60)
    {
      if ((*((_WORD *)this + 9) & 0x301) != 0) {
        return result;
      }
      goto LABEL_40;
    }
  }
LABEL_52:
  uint64_t result = 4;
  uint64_t v34 = v24 - 33;
  if (v34 > 0x37) {
    return result;
  }
  if (((1 << v34) & 0x8000000000041) == 0)
  {
    if (((1 << v34) & 0x808001C8000010) == 0 && (v34 != 28 || (*((_WORD *)this + 9) & 0x301) == 0)) {
      return result;
    }
    return 5;
  }
  uint64_t v35 = *((void *)this + 8);
  if (!v35 || (*(unsigned char *)(v35 + 20) & 4) == 0 && (*(unsigned char *)(v35 + 17) & 0x10) == 0)
  {
    LODWORD(v53) = 7;
    if ((!sub_1CC5CB59C((uint64_t)this, (__int32 *)&v53, 1uLL)
       || (uint64_t v52 = *((void *)this - 4)) != 0
       && !*(unsigned char *)(v52 + 16)
       && *(void *)(v52 + 24) == *((void *)this + 9)
       && *(_DWORD *)(v52 + 36) == 7)
      && ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) != 0
       || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44) & 1) != 0))
    {
      return 4;
    }
    return 5;
  }
  return result;
}

unint64_t llvm::MemoryDependenceResults::getPointerDependencyFrom(llvm::DominatorTree **this, uint64_t a2, int a3, void *a4, llvm::BasicBlock *a5, llvm::LoadInst *a6, int *a7, _DWORD *a8)
{
  InvariantGroupPointeruint64_t Dependency = 0x6000000000000003;
  if (!a6
    || *((unsigned char *)a6 + 16) != 60
    || (InvariantGroupPointeruint64_t Dependency = llvm::MemoryDependenceResults::getInvariantGroupPointerDependency(this, (uint64_t ***)a6, a5), (InvariantGroupPointerDependency & 7) != 2))
  {
    unint64_t SimplePointerDependencyFrom = llvm::MemoryDependenceResults::getSimplePointerDependencyFrom((uint64_t)this, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    if ((InvariantGroupPointerDependency & 0xE000000000000007) == 0x2000000000000003) {
      unint64_t v18 = InvariantGroupPointerDependency;
    }
    else {
      unint64_t v18 = SimplePointerDependencyFrom;
    }
    if ((SimplePointerDependencyFrom & 7) == 2) {
      return SimplePointerDependencyFrom;
    }
    else {
      return v18;
    }
  }
  return InvariantGroupPointerDependency;
}

uint64_t llvm::MemoryDependenceResults::getInvariantGroupPointerDependency(llvm::DominatorTree **this, uint64_t ***a2, llvm::BasicBlock *a3)
{
  v75[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0x6000000000000003;
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    return v3;
  }
  uint64_t v7 = ***a2;
  uint64_t v72 = a2;
  int v8 = *(_DWORD *)(v7 + 2496);
  unsigned int v9 = a2 >> 4;
  if (!v8)
  {
    unsigned int v48 = 0;
LABEL_78:
    uint64_t v13 = (llvm::LoadInst **)sub_1CC609054(v7 + 2480, (uint64_t)&v72, (uint64_t *)&v72, v48);
    BOOL v49 = (llvm::LoadInst *)v72;
    v13[3] = 0;
    void v13[4] = 0;
    *uint64_t v13 = v49;
    v13[1] = (llvm::LoadInst *)(v13 + 3);
    v13[2] = (llvm::LoadInst *)0x100000000;
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(v7 + 2480);
  int v11 = v8 - 1;
  unsigned int v12 = v11 & (v9 ^ (a2 >> 9));
  uint64_t v13 = (llvm::LoadInst **)(v10 + 40 * v12);
  long long v14 = *v13;
  if (*v13 != (llvm::LoadInst *)a2)
  {
    long long v15 = 0;
    int v16 = 1;
    while (v14 != (llvm::LoadInst *)-4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == (llvm::LoadInst *)-8192;
      }
      if (v17) {
        long long v15 = v13;
      }
      unsigned int v18 = v12 + v16++;
      unsigned int v12 = v18 & v11;
      uint64_t v13 = (llvm::LoadInst **)(v10 + 40 * v12);
      long long v14 = *v13;
      if (*v13 == (llvm::LoadInst *)a2) {
        goto LABEL_12;
      }
    }
    if (v15) {
      unsigned int v48 = v15;
    }
    else {
      unsigned int v48 = v13;
    }
    goto LABEL_78;
  }
LABEL_12:
  uint64_t v19 = *((unsigned int *)v13 + 4);
  if (v19)
  {
    unint64_t v20 = (void *)((char *)v13[1] + 8);
    uint64_t v21 = 16 * v19;
    while (*((_DWORD *)v20 - 2) != 16)
    {
      v20 += 2;
      v21 -= 16;
      if (!v21) {
        return v3;
      }
    }
    if (*v20)
    {
      long long v23 = llvm::Value::stripPointerCasts((llvm::Value *)*(a2 - 4));
      if (*((unsigned __int8 *)v23 + 16) >= 4u)
      {
        unint64_t v66 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = v75;
        unsigned int v74 = 8;
        v75[0] = v23;
        unsigned int v24 = 1;
LABEL_20:
        while (1)
        {
          uint64_t v25 = *((void *)v72 + --v24);
          unsigned int v73 = v24;
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26) {
            break;
          }
          if (!v24)
          {
LABEL_70:
            if (v66)
            {
              uint64_t v47 = *(llvm::BasicBlock **)(v66 + 40);
              if (v47 == a3)
              {
                uint64_t v3 = v66 | 2;
                goto LABEL_73;
              }
              uint64_t v69 = 0;
              uint64_t v70 = (llvm::LoadInst *)a2;
              *(void *)&long long v68 = v47;
              *((void *)&v68 + 1) = v66 | 2;
              sub_1CD4A8208((uint64_t)v67, (uint64_t)(this + 3), (uint64_t *)&v70, &v68);
              int v50 = sub_1CD4A8A90((uint64_t)(this + 6), &v71);
              uint64_t v51 = v50[2];
              uint64_t v52 = *((unsigned int *)v50 + 7);
              if (v51 == v50[1])
              {
                if (v52)
                {
                  long long v53 = 0;
                  uint64_t v54 = 8 * v52;
                  long long v55 = (uint64_t ****)v50[2];
                  while (*v55 != a2)
                  {
                    if (*v55 == (uint64_t ***)-2) {
                      long long v53 = v55;
                    }
                    ++v55;
                    v54 -= 8;
                    if (!v54)
                    {
                      if (!v53) {
                        goto LABEL_87;
                      }
                      uint64_t v3 = 0x2000000000000003;
                      *long long v53 = a2;
                      --*((_DWORD *)v50 + 8);
                      goto LABEL_73;
                    }
                  }
                  goto LABEL_104;
                }
LABEL_87:
                unsigned int v56 = *((_DWORD *)v50 + 6);
                if (v52 < v56)
                {
                  uint64_t v3 = 0x2000000000000003;
                  *((_DWORD *)v50 + 7) = v52 + 1;
                  *(void *)(v51 + 8 * v52) = a2;
                  goto LABEL_73;
                }
              }
              else
              {
                unsigned int v56 = *((_DWORD *)v50 + 6);
              }
              if (3 * v56 <= 4 * ((int)v52 - *((_DWORD *)v50 + 8)))
              {
                if (v56 >= 0x40) {
                  v56 *= 2;
                }
                else {
                  unsigned int v56 = 128;
                }
              }
              else if (v56 - v52 >= v56 >> 3)
              {
                goto LABEL_92;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v50 + 1), v56);
              unsigned int v56 = *((_DWORD *)v50 + 6);
              uint64_t v51 = v50[2];
LABEL_92:
              unsigned int v57 = v56 - 1;
              unsigned int v58 = (v56 - 1) & (v9 ^ (a2 >> 9));
              uint64_t v59 = (llvm::LoadInst **)(v51 + 8 * v58);
              int v60 = *v59;
              if (*v59 != (llvm::LoadInst *)-1)
              {
                uint64_t v61 = 0;
                int v62 = 1;
                while (v60 != (llvm::LoadInst *)a2)
                {
                  if (v61) {
                    BOOL v63 = 0;
                  }
                  else {
                    BOOL v63 = v60 == (llvm::LoadInst *)-2;
                  }
                  if (v63) {
                    uint64_t v61 = v59;
                  }
                  unsigned int v64 = v58 + v62++;
                  unsigned int v58 = v64 & v57;
                  uint64_t v59 = (llvm::LoadInst **)(v51 + 8 * (v64 & v57));
                  int v60 = *v59;
                  if (*v59 == (llvm::LoadInst *)-1) {
                    goto LABEL_106;
                  }
                }
LABEL_104:
                uint64_t v3 = 0x2000000000000003;
                goto LABEL_73;
              }
              uint64_t v61 = 0;
LABEL_106:
              uint64_t v3 = 0x2000000000000003;
              if (v61) {
                uint64_t v65 = v61;
              }
              else {
                uint64_t v65 = v59;
              }
              if (*v65 != (llvm::LoadInst *)a2)
              {
                if (*v65 == (llvm::LoadInst *)-2) {
                  --*((_DWORD *)v50 + 8);
                }
                else {
                  ++*((_DWORD *)v50 + 7);
                }
                *uint64_t v65 = (llvm::LoadInst *)a2;
              }
            }
LABEL_73:
            if (v72 != v75) {
              free(v72);
            }
            return v3;
          }
        }
        while (1)
        {
          uint64_t v27 = *(void *)(v26 + 24);
          if (*(unsigned __int8 *)(v27 + 16) <= 0x1Bu) {
            unint64_t v31 = 0;
          }
          else {
            unint64_t v31 = *(unsigned __int8 **)(v26 + 24);
          }
          if (v31) {
            BOOL v32 = v31 == (unsigned __int8 *)a2;
          }
          else {
            BOOL v32 = 1;
          }
          if (!v32
            && llvm::DominatorTree::dominates(this[27], (const llvm::Value *)v31, (const llvm::Instruction *)a2))
          {
            unsigned int v33 = v31[16];
            if (v33 > 0x3D)
            {
              if (v33 == 62)
              {
                if (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v31))
                {
LABEL_66:
                  if (v73 >= (unint64_t)v74) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v72 + v73++) = v31;
                }
              }
              else if (v33 == 77)
              {
                goto LABEL_66;
              }
            }
            else if ((v33 == 60 || v33 == 61 && *((void *)v31 - 4) == v25) && (v31[23] & 0x20) != 0)
            {
              uint64_t v34 = ***(void ***)v31;
              *(void *)&long long v68 = v31;
              int v35 = *(_DWORD *)(v34 + 2496);
              if (v35)
              {
                uint64_t v36 = *(void *)(v34 + 2480);
                int v37 = v35 - 1;
                unsigned int v38 = v37 & ((v31 >> 4) ^ (v31 >> 9));
                uint64_t v29 = (unsigned __int8 **)(v36 + 40 * v38);
                long long v39 = *v29;
                if (*v29 != v31)
                {
                  long long v40 = 0;
                  int v41 = 1;
                  while (v39 != (unsigned __int8 *)-4096)
                  {
                    if (v40) {
                      BOOL v42 = 0;
                    }
                    else {
                      BOOL v42 = v39 == (unsigned __int8 *)-8192;
                    }
                    if (v42) {
                      long long v40 = v29;
                    }
                    unsigned int v43 = v38 + v41++;
                    unsigned int v38 = v43 & v37;
                    uint64_t v29 = (unsigned __int8 **)(v36 + 40 * v38);
                    long long v39 = *v29;
                    if (*v29 == v31) {
                      goto LABEL_57;
                    }
                  }
                  if (v40) {
                    uint64_t v28 = v40;
                  }
                  else {
                    uint64_t v28 = v29;
                  }
LABEL_31:
                  uint64_t v29 = (unsigned __int8 **)sub_1CC609054(v34 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v28);
                  int v30 = (unsigned __int8 *)v68;
                  v29[4] = 0;
                  v29[3] = 0;
                  *uint64_t v29 = v30;
                  v29[1] = (unsigned __int8 *)(v29 + 3);
                  void v29[2] = (unsigned __int8 *)0x100000000;
                }
LABEL_57:
                uint64_t v44 = *((unsigned int *)v29 + 4);
                if (v44)
                {
                  uint64_t v45 = v29[1] + 8;
                  uint64_t v46 = 16 * v44;
                  while (*((_DWORD *)v45 - 2) != 16)
                  {
                    v45 += 2;
                    v46 -= 16;
                    if (!v46) {
                      goto LABEL_68;
                    }
                  }
                  if (*v45)
                  {
                    if (v66)
                    {
                      uint64_t v27 = v66;
                      if (llvm::DominatorTree::dominates(this[27], (const llvm::Value *)v66, (const llvm::Instruction *)v31))uint64_t v27 = (uint64_t)v31; {
                    }
                      }
                    uint64_t v71 = v27;
                    unint64_t v66 = v27;
                  }
                }
                goto LABEL_68;
              }
              uint64_t v28 = 0;
              goto LABEL_31;
            }
          }
LABEL_68:
          uint64_t v26 = *(void *)(v26 + 8);
          if (!v26)
          {
            unsigned int v24 = v73;
            if (!v73) {
              goto LABEL_70;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }
  return v3;
}

unint64_t llvm::MemoryDependenceResults::getSimplePointerDependencyFrom(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, llvm::Instruction *this, int *a7, _DWORD *a8)
{
  uint64_t v10 = this;
  BOOL v130 = 0;
  int v131 = *(_DWORD *)(a1 + 376);
  if (!this || !a3) {
    goto LABEL_21;
  }
  if (*((unsigned char *)this + 16) == 60 && (*((unsigned char *)this + 23) & 0x20) != 0)
  {
    uint64_t v14 = ***(void ***)this;
    *(void *)&long long v132 = this;
    int v15 = *(_DWORD *)(v14 + 2496);
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 2480);
      int v17 = v15 - 1;
      unsigned int v18 = v17 & ((this >> 4) ^ (this >> 9));
      uint64_t v19 = (llvm::Instruction **)(v16 + 40 * v18);
      unint64_t v20 = *v19;
      if (*v19 == this) {
        goto LABEL_15;
      }
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != (llvm::Instruction *)-4096)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == (llvm::Instruction *)-8192;
        }
        if (v23) {
          uint64_t v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = (llvm::Instruction **)(v16 + 40 * v18);
        unint64_t v20 = *v19;
        if (*v19 == this) {
          goto LABEL_15;
        }
      }
      if (v21) {
        uint64_t v121 = v21;
      }
      else {
        uint64_t v121 = v19;
      }
    }
    else
    {
      uint64_t v121 = 0;
    }
    uint64_t v19 = (llvm::Instruction **)sub_1CC609054(v14 + 2480, (uint64_t)&v132, (uint64_t *)&v132, v121);
    unint64_t v122 = (llvm::Instruction *)v132;
    v19[3] = 0;
    v19[4] = 0;
    *uint64_t v19 = v122;
    v19[1] = (llvm::Instruction *)(v19 + 3);
    v19[2] = (llvm::Instruction *)0x100000000;
LABEL_15:
    uint64_t v25 = *((unsigned int *)v19 + 4);
    if (v25)
    {
      uint64_t v26 = (void *)((char *)v19[1] + 8);
      uint64_t v27 = 16 * v25;
      while (*((_DWORD *)v26 - 2) != 6)
      {
        BOOL v130 = 0;
        v26 += 2;
        v27 -= 16;
        if (!v27) {
          goto LABEL_21;
        }
      }
      BOOL v130 = *v26 != 0;
      goto LABEL_21;
    }
  }
  BOOL v130 = 0;
LABEL_21:
  unsigned int v125 = (char *)v10 - 8;
  uint64_t v126 = v10;
  while (a4 != *(void **)(a5 + 48))
  {
    a4 = (void *)*a4;
    unint64_t v28 = (unint64_t)(a4 - 3);
    if (a4) {
      uint64_t v29 = (uint64_t)(a4 - 3);
    }
    else {
      uint64_t v29 = 0;
    }
    unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 == 84)
    {
      uint64_t v31 = *(void *)(v29 - 32);
      if (v31)
      {
        if (!*(unsigned char *)(v31 + 16)
          && *(void *)(v31 + 24) == *(void *)(v29 + 72)
          && (*(unsigned char *)(v31 + 33) & 0x20) != 0
          && (*(_DWORD *)(*(a4 - 7) + 36) - 55) < 4)
        {
          goto LABEL_208;
        }
      }
    }
    if (a7)
    {
      int v32 = *a7 - 1;
      *a7 = v32;
      if (!v32) {
        return 0x6000000000000003;
      }
    }
    else if (!--v131)
    {
      return 0x6000000000000003;
    }
    if (v30 == 84)
    {
      uint64_t v33 = *(void *)(v29 - 32);
      if (!v33
        || *(unsigned char *)(v33 + 16)
        || *(void *)(v33 + 24) != *(void *)(v29 + 72)
        || (*(unsigned char *)(v33 + 33) & 0x20) == 0)
      {
        goto LABEL_94;
      }
      int v34 = *(_DWORD *)(*(a4 - 7) + 36);
      if (v34 == 187 || v34 == 185)
      {
        int v124 = *(_DWORD *)(*(a4 - 7) + 36);
        *(void *)&long long v132 = 0;
        *((void *)&v132 + 1) = -1;
        long long v133 = 0u;
        long long v134 = 0u;
        sub_1CC09B6B8((llvm::Instruction *)(a4 - 3), (uint64_t)&v132, *(uint64_t **)(a1 + 208));
        uint64_t v76 = *(void *)a8;
        int v77 = a8[86];
        a8[86] = v77 + 1;
        uint64_t v78 = *(void *)(v76 + 8);
        uint64_t v79 = *(void *)(v76 + 16);
        if (v78 == v79)
        {
          a8[86] = v77;
LABEL_226:
          uint64_t v105 = v128;
          if (v124 != 185) {
            uint64_t v105 = v28 | 1;
          }
          uint64_t v128 = v105;
          if (v124 == 185) {
            int v100 = 2;
          }
          else {
            int v100 = 1;
          }
          goto LABEL_234;
        }
        uint64_t v80 = v78 + 8;
        do
        {
          char v81 = (*(uint64_t (**)(void, long long *, uint64_t, _DWORD *))(**(void **)(v80 - 8) + 24))(*(void *)(v80 - 8), &v132, a2, a8 + 2);
          BOOL v82 = v81 != 1 || v80 == v79;
          v80 += 8;
        }
        while (!v82);
        --a8[86];
        if (v81)
        {
          if (v81 != 3) {
            goto LABEL_226;
          }
          uint64_t v75 = v28 | 2;
          goto LABEL_233;
        }
      }
      else
      {
        if (v34 != 168) {
          goto LABEL_94;
        }
        *(void *)&long long v132 = *(void *)(v28 - 32 * (*((_DWORD *)a4 - 1) & 0x7FFFFFF) + 32);
        *((void *)&v132 + 1) = -2;
        long long v133 = 0u;
        long long v134 = 0u;
        uint64_t v35 = *(void *)a8;
        int v36 = a8[86];
        a8[86] = v36 + 1;
        uint64_t v37 = *(void *)(v35 + 8);
        uint64_t v38 = *(void *)(v35 + 16);
        if (v37 == v38)
        {
          a8[86] = v36;
        }
        else
        {
          uint64_t v39 = v37 + 8;
          do
          {
            int v40 = (*(unsigned __int8 (**)(void, long long *, uint64_t, _DWORD *))(**(void **)(v39 - 8)
                                                                                           + 24))(*(void *)(v39 - 8), &v132, a2, a8 + 2);
            BOOL v41 = v40 != 1 || v39 == v38;
            v39 += 8;
          }
          while (!v41);
          --a8[86];
          if (v40 == 3) {
            return v28 | 2;
          }
        }
      }
      goto LABEL_208;
    }
    if (v30 == 60) {
      uint64_t v42 = v29;
    }
    else {
      uint64_t v42 = 0;
    }
    v136[0] = v42;
    if (a4 && v30 == 60)
    {
      if ((*(_WORD *)(v42 + 18) & 1) != 0 && (!v10 || llvm::Instruction::isVolatile(v10))) {
        goto LABEL_232;
      }
      int v43 = *((unsigned __int8 *)a4 - 8);
      if (v43 == 60 || v43 == 61)
      {
        if ((*((_WORD *)a4 - 3) & 0x380) != 0) {
          goto LABEL_63;
        }
      }
      else if ((v43 - 63) < 3)
      {
LABEL_63:
        if ((*(_WORD *)(v42 + 18) & 0x300) != 0)
        {
          if (!v10 || (llvm::Instruction::isVolatile(v10) & 1) != 0) {
            goto LABEL_232;
          }
          unsigned int v44 = *((unsigned __int8 *)v10 + 16);
          if (v44 <= 0x3C)
          {
            if (*((unsigned __int8 *)v10 + 16) <= 0x3Bu)
            {
              if (v44 != 33)
              {
                if (v44 == 37) {
                  goto LABEL_232;
                }
                if (v44 != 39) {
                  goto LABEL_182;
                }
              }
              goto LABEL_175;
            }
LABEL_154:
            if ((*((_WORD *)v10 + 9) & 0x380) != 0) {
              goto LABEL_232;
            }
          }
          else
          {
            if (v44 - 61 <= 0x1B)
            {
              if (v44 != 61)
              {
                if (v44 != 84)
                {
                  if (((1 << (v44 - 61)) & 0x808001C) != 0) {
                    goto LABEL_232;
                  }
                  goto LABEL_182;
                }
LABEL_175:
                uint64_t v85 = *((void *)v10 + 8);
                if (!v85 || (*(unsigned char *)(v85 + 20) & 4) == 0 && (*(unsigned char *)(v85 + 17) & 0x10) == 0)
                {
                  LODWORD(v132) = 7;
                  if (sub_1CC5CB59C((uint64_t)v10, (__int32 *)&v132, 1uLL))
                  {
                    uint64_t v112 = *((void *)v10 - 4);
                    if (!v112 || *(unsigned char *)(v112 + 16) || *(void *)(v112 + 24) != *((void *)v126 + 9))
                    {
                      uint64_t v10 = v126;
                      goto LABEL_232;
                    }
                    uint64_t v10 = v126;
                    if (*(_DWORD *)(v112 + 36) != 7) {
                      goto LABEL_232;
                    }
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 66) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44))
                  {
                    goto LABEL_232;
                  }
                }
                unsigned int v44 = *((unsigned __int8 *)v10 + 16);
                goto LABEL_182;
              }
              goto LABEL_154;
            }
LABEL_182:
            uint64_t v86 = v44 - 33;
            if (v86 <= 0x37)
            {
              if (((1 << v86) & 0x8000000000041) != 0)
              {
                uint64_t v103 = *((void *)v10 + 8);
                if (!v103 || (*(unsigned char *)(v103 + 17) & 0x30) == 0)
                {
                  int v104 = *((_DWORD *)v10 + 5);
                  if (v104 < 0)
                  {
                    uint64_t v113 = &v125[-32 * (v104 & 0x7FFFFFF)];
                    if (*(void *)v113)
                    {
                      uint64_t v114 = -*(void *)v113;
                      while (1)
                      {
                        unsigned int v115 = *(_DWORD *)(*(void *)&v113[v114] + 8);
                        BOOL v49 = v115 > 7;
                        int v116 = (1 << v115) & 0x83;
                        if (v49 || v116 == 0) {
                          break;
                        }
                        v114 += 16;
                        if (!v114) {
                          goto LABEL_222;
                        }
                      }
LABEL_232:
                      uint64_t v75 = v42 | 1;
LABEL_233:
                      uint64_t v128 = v75;
                      int v100 = 1;
                      goto LABEL_234;
                    }
                  }
LABEL_222:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 45) & 1) == 0
                    && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44) & 1) == 0)
                  {
                    goto LABEL_232;
                  }
                }
              }
              else if (v86 == 27)
              {
                if ((*((_WORD *)v10 + 9) & 0x301) != 0) {
                  goto LABEL_232;
                }
              }
              else if (((1 << v86) & 0x808001D0000010) != 0)
              {
                goto LABEL_232;
              }
            }
          }
          if ((*(_WORD *)(v42 + 18) & 0x380) != 0x100) {
            goto LABEL_232;
          }
        }
      }
      uint64_t v87 = *(void *)(v42 - 32);
      uint64_t v88 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v42 + 40) + 56) + 40) + 272, *(void *)v42);
      if (v89 == 1) {
        unint64_t v90 = -2;
      }
      else {
        unint64_t v90 = (unint64_t)(v88 + 7) >> 3;
      }
      llvm::Instruction::getAAMetadata((uint64_t ***)v42, &v133);
      *(void *)&long long v132 = v87;
      *((void *)&v132 + 1) = v90;
      uint64_t v91 = *(void *)a8;
      int v92 = a8[86];
      a8[86] = v92 + 1;
      uint64_t v93 = *(void *)(v91 + 8);
      uint64_t v94 = *(void *)(v91 + 16);
      if (v93 == v94)
      {
        int v96 = 1;
      }
      else
      {
        uint64_t v95 = v93 + 8;
        do
        {
          int v96 = (*(uint64_t (**)(void, long long *, uint64_t, _DWORD *))(**(void **)(v95 - 8) + 24))(*(void *)(v95 - 8), &v132, a2, a8 + 2);
          BOOL v97 = v96 != 1 || v95 == v94;
          v95 += 8;
        }
        while (!v97);
        int v92 = a8[86] - 1;
      }
      uint64_t v10 = v126;
      a8[86] = v92;
      if (a3)
      {
        if (v96 == 2)
        {
          if ((v96 & 0x100) != 0)
          {
            *((_DWORD *)sub_1CD40EB18(a1 + 384, v136) + 2) = v96 >> 9;
            uint64_t v10 = v126;
LABEL_135:
            uint64_t v75 = v29 | 1;
            goto LABEL_233;
          }
        }
        else if (v96 == 3)
        {
          goto LABEL_201;
        }
      }
      else if ((_BYTE)v96)
      {
        unsigned int v98 = *(void **)(*(void *)a8 + 8);
        unint64_t v99 = *(void **)(*(void *)a8 + 16);
        while (v98 != v99)
        {
          if ((*(uint64_t (**)(void, long long *, _DWORD *, void))(*(void *)*v98 + 32))(*v98, &v132, a8 + 2, 0))goto LABEL_208; {
          ++v98;
          }
        }
LABEL_201:
        uint64_t v75 = v29 | 2;
        goto LABEL_233;
      }
      goto LABEL_208;
    }
    if (v30 == 61) {
      uint64_t v45 = v29;
    }
    else {
      uint64_t v45 = 0;
    }
    if (!a4 || v30 != 61)
    {
      if (v30 == 59) {
        goto LABEL_95;
      }
      if (v30 >= 0x1C)
      {
        unsigned int v48 = v30 - 33;
        BOOL v49 = v48 > 0x33;
        uint64_t v50 = (1 << v48) & 0x8000000000041;
        if (!v49 && v50 != 0)
        {
LABEL_94:
          if (sub_1CBF5BCC4(v29, 19))
          {
LABEL_95:
            UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)a2, (const llvm::Value *)6);
            if (UnderlyingObject == (llvm *)v29) {
              return v29 | 2;
            }
            *(void *)&long long v132 = v29;
            *((void *)&v132 + 1) = 1;
            long long v133 = 0u;
            long long v134 = 0u;
            v136[0] = (uint64_t)UnderlyingObject;
            v136[1] = 1;
            long long v137 = 0u;
            long long v138 = 0u;
            uint64_t v53 = *(void *)a8;
            int v54 = a8[86];
            a8[86] = v54 + 1;
            uint64_t v55 = *(void *)(v53 + 8);
            uint64_t v56 = *(void *)(v53 + 16);
            if (v55 == v56)
            {
              a8[86] = v54;
            }
            else
            {
              uint64_t v57 = v55 + 8;
              do
              {
                int v58 = (*(unsigned __int8 (**)(void, long long *, uint64_t *, _DWORD *))(**(void **)(v57 - 8)
                                                                                                 + 24))(*(void *)(v57 - 8), &v132, v136, a8 + 2);
                BOOL v59 = v58 != 1 || v57 == v56;
                v57 += 8;
              }
              while (!v59);
              --a8[86];
              if (v58 == 3) {
                return v29 | 2;
              }
            }
          }
        }
      }
      if (!v130)
      {
        char v60 = a3 ^ 1;
        if (*(unsigned char *)(v29 + 16) != 63) {
          char v60 = 1;
        }
        if (!a4 || (v60 & 1) != 0 || (*(_WORD *)(v29 + 18) & 7) != 5)
        {
          long long v61 = *(_OWORD *)(a2 + 16);
          long long v132 = *(_OWORD *)a2;
          long long v133 = v61;
          long long v134 = *(_OWORD *)(a2 + 32);
          char v135 = 1;
          int ModRefInfo = llvm::AAResults::getModRefInfo(*(void *)a8, (llvm::Instruction *)v29, &v132, (uint64_t)(a8 + 2));
          if ((~ModRefInfo & 3) == 0) {
            int ModRefInfo = llvm::AAResults::callCapturesBefore(*(void *)a8, v29, (llvm **)a2, *(void *)(a1 + 216), (uint64_t)(a8 + 2));
          }
          if ((ModRefInfo | 4) != 4 && ((ModRefInfo | 4) != 5 || (a3 & 1) == 0)) {
            return v29 | 1;
          }
        }
      }
      goto LABEL_208;
    }
    if ((*(_WORD *)(v45 + 18) & 0x301) != 0)
    {
      int v46 = *(unsigned __int8 *)(v45 + 16);
      if (v46 == 60 || v46 == 61)
      {
        if ((*(_WORD *)(v45 + 18) & 0x380) == 0) {
          goto LABEL_118;
        }
      }
      else if ((v46 - 63) >= 3)
      {
        goto LABEL_118;
      }
      if (!v10 || (llvm::Instruction::isVolatile(v10) & 1) != 0) {
        return v45 | 1;
      }
      unsigned int v47 = *((unsigned __int8 *)v10 + 16);
      if (v47 <= 0x3C)
      {
        if (*((unsigned __int8 *)v10 + 16) <= 0x3Bu)
        {
          switch(v47)
          {
            case '!':
              goto LABEL_159;
            case '%':
              return v45 | 1;
            case '\'':
              goto LABEL_159;
          }
          goto LABEL_166;
        }
      }
      else
      {
        if (v47 - 61 > 0x1B) {
          goto LABEL_166;
        }
        if (v47 != 61)
        {
          if (v47 != 84)
          {
            if (((1 << (v47 - 61)) & 0x808001C) != 0) {
              return v45 | 1;
            }
            goto LABEL_166;
          }
LABEL_159:
          uint64_t v83 = *((void *)v10 + 8);
          if (!v83 || (*(unsigned char *)(v83 + 20) & 4) == 0 && (*(unsigned char *)(v83 + 17) & 0x10) == 0)
          {
            LODWORD(v132) = 7;
            if (sub_1CC5CB59C((uint64_t)v10, (__int32 *)&v132, 1uLL))
            {
              uint64_t v106 = *((void *)v10 - 4);
              if (!v106) {
                return v45 | 1;
              }
              if (*(unsigned char *)(v106 + 16)) {
                return v45 | 1;
              }
              if (*(void *)(v106 + 24) != *((void *)v126 + 9)) {
                return v45 | 1;
              }
              uint64_t v10 = v126;
              if (*(_DWORD *)(v106 + 36) != 7) {
                return v45 | 1;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44))
            {
              return v45 | 1;
            }
          }
          unsigned int v47 = *((unsigned __int8 *)v10 + 16);
LABEL_166:
          uint64_t v84 = v47 - 33;
          if (v84 <= 0x37)
          {
            if (((1 << v84) & 0x8000000000041) != 0)
            {
              uint64_t v101 = *((void *)v10 + 8);
              if (!v101 || (*(unsigned char *)(v101 + 17) & 0x30) == 0)
              {
                int v102 = *((_DWORD *)v10 + 5);
                if (v102 < 0)
                {
                  uint64_t v107 = &v125[-32 * (v102 & 0x7FFFFFF)];
                  if (*(void *)v107)
                  {
                    uint64_t v108 = -*(void *)v107;
                    do
                    {
                      unsigned int v109 = *(_DWORD *)(*(void *)&v107[v108] + 8);
                      BOOL v49 = v109 > 7;
                      int v110 = (1 << v109) & 0x83;
                      if (v49 || v110 == 0) {
                        return v45 | 1;
                      }
                      v108 += 16;
                    }
                    while (v108);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 45) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v10, 44) & 1) == 0)
                {
                  return v45 | 1;
                }
              }
            }
            else if (v84 == 27)
            {
              if ((*((_WORD *)v10 + 9) & 0x301) != 0) {
                return v45 | 1;
              }
            }
            else if (((1 << v84) & 0x808001D0000010) != 0)
            {
              return v45 | 1;
            }
          }
          goto LABEL_118;
        }
      }
      if ((*((_WORD *)v10 + 9) & 0x300) != 0) {
        return v45 | 1;
      }
    }
LABEL_118:
    if ((*(_WORD *)(v45 + 18) & 1) != 0 && (!v10 || llvm::Instruction::isVolatile(v10))) {
      return v45 | 1;
    }
    long long v63 = *(_OWORD *)(a2 + 16);
    long long v132 = *(_OWORD *)a2;
    long long v133 = v63;
    long long v134 = *(_OWORD *)(a2 + 32);
    char v135 = 1;
    if ((llvm::AAResults::getModRefInfo(*(void *)a8, (llvm::Instruction *)v45, &v132, (uint64_t)(a8 + 2)) & 3) == 0) {
      goto LABEL_208;
    }
    uint64_t v64 = *(void *)(v45 - 32);
    uint64_t v65 = sub_1CB83544C(*(void *)(*(void *)(*(void *)(v45 + 40) + 56) + 40) + 272, **(void **)(v45 - 64));
    if (v66 == 1) {
      unint64_t v67 = -2;
    }
    else {
      unint64_t v67 = (unint64_t)(v65 + 7) >> 3;
    }
    llvm::Instruction::getAAMetadata((uint64_t ***)v45, &v133);
    *(void *)&long long v132 = v64;
    *((void *)&v132 + 1) = v67;
    uint64_t v68 = *(void *)a8;
    int v69 = a8[86];
    a8[86] = v69 + 1;
    uint64_t v70 = *(void *)(v68 + 8);
    uint64_t v71 = *(void *)(v68 + 16);
    if (v70 == v71)
    {
      a8[86] = v69;
      uint64_t v10 = v126;
    }
    else
    {
      uint64_t v72 = v70 + 8;
      do
      {
        char v73 = (*(uint64_t (**)(void, long long *, uint64_t, _DWORD *))(**(void **)(v72 - 8) + 24))(*(void *)(v72 - 8), &v132, a2, a8 + 2);
        BOOL v74 = v73 != 1 || v72 == v71;
        v72 += 8;
      }
      while (!v74);
      --a8[86];
      uint64_t v10 = v126;
      if (!v73) {
        goto LABEL_208;
      }
      if (v73 == 3) {
        goto LABEL_201;
      }
    }
    if (!v130) {
      goto LABEL_135;
    }
LABEL_208:
    int v100 = 2;
LABEL_234:
    if (v100 != 2) {
      return v128;
    }
  }
  uint64_t v118 = *(void *)(*(void *)(a5 + 56) + 80);
  if (v118) {
    uint64_t v119 = v118 - 24;
  }
  else {
    uint64_t v119 = 0;
  }
  BOOL v23 = v119 == a5;
  uint64_t v123 = 0x2000000000000003;
  if (v23) {
    return 0x4000000000000003;
  }
  return v123;
}

unint64_t llvm::MemoryDependenceResults::getPointerDependencyFrom(uint64_t a1, uint64_t a2, int a3, void *a4, llvm::BasicBlock *a5, llvm::LoadInst *a6, int *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 192);
  uint64_t v13 = 1;
  uint64_t v7 = 16;
  do
  {
    int v8 = (char *)&v12 + v7;
    *(_OWORD *)int v8 = xmmword_1CFAC3060;
    *((_OWORD *)v8 + 1) = xmmword_1CFAC3060;
    v7 += 40;
  }
  while (v8 + 40 != (char *)v15);
  v15[0] = &v19;
  v15[1] = 0;
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  uint64_t v19 = &unk_1F2600DB8;
  uint64_t v20 = 1;
  for (uint64_t i = 512; i != 640; i += 16)
    *(uint64_t *)((char *)&v12 + i) = -4096;
  unint64_t PointerDependencyFrom = llvm::MemoryDependenceResults::getPointerDependencyFrom((llvm::DominatorTree **)a1, a2, a3, a4, a5, a6, a7, &v12);
  if ((v20 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v21, 8);
  }
  if (v16 != v18) {
    free(v16);
  }
  if ((v13 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v14, 8);
  }
  return PointerDependencyFrom;
}

uint64_t llvm::MemoryDependenceResults::getDependency(llvm::MemoryDependenceResults *this, llvm::Instruction *a2)
{
  unsigned int v48 = a2;
  int v4 = *((_DWORD *)this + 98);
  if (*((void *)this + 49))
  {
    BOOL v41 = (_DWORD *)((char *)this + 384);
    uint64_t v42 = *((unsigned int *)this + 100);
    if (v42 > 4 * v4 && v42 >= 0x41)
    {
      sub_1CD3C8060(v41);
    }
    else
    {
      if (v42)
      {
        int v43 = *(void **)v41;
        uint64_t v44 = 16 * v42;
        do
        {
          *int v43 = -4096;
          v43 += 2;
          v44 -= 16;
        }
        while (v44);
      }
      *((void *)this + 49) = 0;
    }
  }
  uint64_t v5 = sub_1CC0A24BC((uint64_t)this, (uint64_t *)&v48);
  uint64_t result = v5[1];
  if ((result & 7) == 0)
  {
    uint64_t v7 = a2;
    unint64_t v8 = result & 0xFFFFFFFFFFFFFFF8;
    if ((result & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      sub_1CC09D560((uint64_t)this + 144, v8, (uint64_t)a2);
      uint64_t v7 = (llvm::Instruction *)v8;
    }
    unsigned int v9 = (llvm::BasicBlock *)*((void *)a2 + 5);
    uint64_t v10 = (char *)a2 + 24;
    if (!a2) {
      uint64_t v10 = 0;
    }
    if (v10 == *((char **)v9 + 6))
    {
      uint64_t v17 = *(void *)(*((void *)v9 + 7) + 80);
      if (v17) {
        unsigned int v18 = (llvm::BasicBlock *)(v17 - 24);
      }
      else {
        unsigned int v18 = 0;
      }
      BOOL v15 = v9 == v18;
      uint64_t v19 = 0x2000000000000003;
      if (v15) {
        uint64_t v19 = 0x4000000000000003;
      }
    }
    else
    {
      v45[0] = 0;
      v45[1] = -1;
      long long v46 = 0u;
      long long v47 = 0u;
      char v11 = sub_1CC09B6B8(a2, (uint64_t)v45, *((uint64_t **)this + 26));
      if (v45[0])
      {
        BOOL v12 = (v11 & 2) == 0;
        if (*((unsigned char *)a2 + 16) == 84)
        {
          uint64_t v13 = *((void *)a2 - 4);
          if (v13)
          {
            if (!*(unsigned char *)(v13 + 16)
              && *(void *)(v13 + 24) == *((void *)a2 + 9)
              && (*(unsigned char *)(v13 + 33) & 0x20) != 0)
            {
              int v14 = *(_DWORD *)(v13 + 36);
              BOOL v15 = (v11 & 2) == 0 || v14 == 168;
              BOOL v12 = v15;
            }
          }
        }
        unint64_t PointerDependencyFrom = llvm::MemoryDependenceResults::getPointerDependencyFrom((uint64_t)this, (uint64_t)v45, v12, (void *)v7 + 3, v9, a2, 0);
LABEL_30:
        v5[1] = PointerDependencyFrom;
        if ((PointerDependencyFrom & 7) > 2) {
          return v5[1];
        }
        v45[0] = PointerDependencyFrom & 0xFFFFFFFFFFFFFFF8;
        if ((PointerDependencyFrom & 0xFFFFFFFFFFFFFFF8) == 0) {
          return v5[1];
        }
        sub_1CC0A26E4((uint64_t)this + 144, v45);
        uint64_t v23 = v22;
        uint64_t v25 = *(void *)(v22 + 8);
        unsigned int v24 = (llvm::SmallPtrSetImplBase *)(v22 + 8);
        uint64_t v26 = *(void *)(v23 + 16);
        uint64_t v27 = *(unsigned int *)(v23 + 28);
        if (v26 == v25)
        {
          if (v27)
          {
            unint64_t v28 = 0;
            uint64_t v29 = 8 * v27;
            unsigned int v30 = *(void **)(v23 + 16);
            while ((llvm::Instruction *)*v30 != a2)
            {
              if (*v30 == -2) {
                unint64_t v28 = v30;
              }
              ++v30;
              v29 -= 8;
              if (!v29)
              {
                if (!v28) {
                  goto LABEL_40;
                }
                *unint64_t v28 = a2;
                --*(_DWORD *)(v23 + 32);
                return v5[1];
              }
            }
            return v5[1];
          }
LABEL_40:
          unsigned int v31 = *(_DWORD *)(v23 + 24);
          if (v27 < v31)
          {
            *(_DWORD *)(v23 + 28) = v27 + 1;
            *(void *)(v26 + 8 * v27) = a2;
            return v5[1];
          }
        }
        else
        {
          unsigned int v31 = *(_DWORD *)(v23 + 24);
        }
        if (3 * v31 <= 4 * ((int)v27 - *(_DWORD *)(v23 + 32)))
        {
          if (v31 >= 0x40) {
            v31 *= 2;
          }
          else {
            unsigned int v31 = 128;
          }
        }
        else if (v31 - v27 >= v31 >> 3)
        {
          goto LABEL_45;
        }
        llvm::SmallPtrSetImplBase::Grow(v24, v31);
        unsigned int v31 = *(_DWORD *)(v23 + 24);
        uint64_t v26 = *(void *)(v23 + 16);
LABEL_45:
        unsigned int v32 = v31 - 1;
        unsigned int v33 = (v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        int v34 = (llvm::Instruction **)(v26 + 8 * v33);
        uint64_t v35 = *v34;
        if (*v34 == (llvm::Instruction *)-1)
        {
          int v36 = 0;
LABEL_58:
          if (v36) {
            int v40 = v36;
          }
          else {
            int v40 = v34;
          }
          if (*v40 != a2)
          {
            if (*v40 == (llvm::Instruction *)-2) {
              --*(_DWORD *)(v23 + 32);
            }
            else {
              ++*(_DWORD *)(v23 + 28);
            }
            *int v40 = a2;
          }
        }
        else
        {
          int v36 = 0;
          int v37 = 1;
          while (v35 != a2)
          {
            if (v36) {
              BOOL v38 = 0;
            }
            else {
              BOOL v38 = v35 == (llvm::Instruction *)-2;
            }
            if (v38) {
              int v36 = v34;
            }
            unsigned int v39 = v33 + v37++;
            unsigned int v33 = v39 & v32;
            int v34 = (llvm::Instruction **)(v26 + 8 * (v39 & v32));
            uint64_t v35 = *v34;
            if (*v34 == (llvm::Instruction *)-1) {
              goto LABEL_58;
            }
          }
        }
        return v5[1];
      }
      unsigned int v20 = *((unsigned __int8 *)a2 + 16) - 33;
      if (v20 <= 0x33 && ((1 << v20) & 0x8000000000041) != 0)
      {
        BOOL v21 = (llvm::AAResults::getModRefBehavior(*((void *)this + 24), (uint64_t)a2) & 2) == 0;
        unint64_t PointerDependencyFrom = llvm::MemoryDependenceResults::getCallDependencyFrom((uint64_t)this, a2, v21, (void *)v7 + 3, (uint64_t)v9);
        goto LABEL_30;
      }
      uint64_t v19 = 0x6000000000000003;
    }
    v5[1] = v19;
    return v5[1];
  }
  return result;
}

int32x2_t sub_1CC09D560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = 0;
  if (sub_1CC0A42D0(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v24)) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = *(void *)a1 + 72 * *(unsigned int *)(a1 + 16);
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 28);
    uint64_t v10 = (void *)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v9;
      while (*(void *)(v7 + v11) != a3)
      {
        v11 += 8;
        if (v12 == v11) {
          goto LABEL_22;
        }
      }
      uint64_t v10 = (void *)(v7 + v11);
    }
LABEL_22:
    uint64_t v8 = *(void *)(v6 + 16);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(v6 + 24);
    int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v10 = (void *)(v7 + 8 * v15);
    uint64_t v16 = *v10;
    if (*v10 == -1)
    {
      uint64_t v17 = 0;
LABEL_34:
      if (v17) {
        uint64_t v10 = v17;
      }
      if (*v10 != a3) {
        uint64_t v10 = (void *)(v7 + 8 * v13);
      }
    }
    else
    {
      uint64_t v17 = 0;
      int v18 = 1;
      while (v16 != a3)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -2;
        }
        if (v19) {
          uint64_t v17 = v10;
        }
        unsigned int v20 = v15 + v18++;
        unsigned int v15 = v20 & v14;
        uint64_t v10 = (void *)(v7 + 8 * (v20 & v14));
        uint64_t v16 = *v10;
        if (*v10 == -1) {
          goto LABEL_34;
        }
      }
    }
  }
  BOOL v19 = v7 == v8;
  uint64_t v21 = 24;
  if (v19) {
    uint64_t v21 = 28;
  }
  if (v10 == (void *)(v7 + 8 * *(unsigned int *)(v6 + v21)))
  {
    int v22 = *(_DWORD *)(v6 + 32);
  }
  else
  {
    *uint64_t v10 = -2;
    int v22 = *(_DWORD *)(v6 + 32) + 1;
    *(_DWORD *)(v6 + 32) = v22;
  }
  if (*(_DWORD *)(v6 + 28) == v22)
  {
    uint64_t v23 = *(void **)(v6 + 16);
    if (v23 != *(void **)(v6 + 8)) {
      free(v23);
    }
    *(void *)uint64_t v6 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void *llvm::MemoryDependenceResults::getNonLocalCallDependency(llvm::MemoryDependenceResults *this, llvm::CallBase *a2)
{
  v98[32] = *MEMORY[0x1E4F143B8];
  int v96 = a2;
  int v4 = (char *)this + 120;
  uint64_t v3 = *((void *)this + 15);
  uint64_t v91 = 0;
  int v5 = sub_1CBC5D0DC(v3, *((_DWORD *)v4 + 4), (uint64_t)a2, &v91);
  uint64_t v6 = v91;
  if (v5)
  {
    uint64_t v7 = *((void *)v91 + 1);
  }
  else
  {
    uint64_t v6 = sub_1CC0A2A6C((uint64_t)v4, (uint64_t *)&v96, v91);
    uint64_t v7 = 0;
    *uint64_t v6 = a2;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((unsigned char *)v6 + 32) = 0;
  }
  int v89 = (unint64_t **)(v6 + 1);
  int v96 = v98;
  uint64_t v97 = 0x2000000000;
  uint64_t v8 = v6[2];
  uint64_t v9 = this;
  if (v7 == v8)
  {
    uint64_t v10 = *((void *)a2 + 5);
    uint64_t v11 = (uint64_t *)sub_1CC0A1594((uint64_t)this + 232, v10);
    int v12 = sub_1CC0A181C((uint64_t)this + 232, v10);
    sub_1CC0A3870((uint64_t)&v96, (uint64_t)v96 + 8 * v97, v11, &v11[v12]);
  }
  else
  {
    if (!*((unsigned char *)v6 + 32)) {
      return v6 + 1;
    }
    unsigned int v71 = 0;
    do
    {
      if ((*(unsigned char *)(v7 + 8) & 7) == 0)
      {
        if (v71 >= HIDWORD(v97)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v96 + v71) = *(void *)v7;
        unsigned int v71 = v97 + 1;
        LODWORD(v97) = v97 + 1;
      }
      v7 += 16;
    }
    while (v7 != v8);
    uint64_t v82 = v6[1];
    uint64_t v83 = (long long *)v6[2];
    unint64_t v84 = 126 - 2 * __clz(((uint64_t)v83 - v82) >> 4);
    if (v83 == (long long *)v82) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = v84;
    }
    sub_1CC0A2CCC(v82, v83, v85, 1);
    uint64_t v9 = this;
  }
  char ModRefBehavior = llvm::AAResults::getModRefBehavior(*((void *)v9 + 24), (uint64_t)a2);
  uint64_t v91 = v95;
  int v92 = v95;
  uint64_t v93 = 32;
  int v94 = 0;
  unsigned int v13 = v97;
  if (!v97) {
    goto LABEL_107;
  }
  unint64_t v14 = ((v6[2] - v6[1]) >> 4);
  uint64_t v86 = (uint64_t)v9 + 168;
  uint64_t v15 = (uint64_t)v9 + 232;
  do
  {
    unint64_t v16 = *((void *)v96 + v13 - 1);
    LODWORD(v97) = v13 - 1;
    uint64_t v17 = v92;
    uint64_t v18 = HIDWORD(v93);
    if (v92 == v91)
    {
      if (HIDWORD(v93))
      {
        BOOL v19 = 0;
        uint64_t v20 = 8 * HIDWORD(v93);
        uint64_t v21 = (unint64_t *)v92;
        while (*v21 != v16)
        {
          if (*v21 == -2) {
            BOOL v19 = v21;
          }
          ++v21;
          v20 -= 8;
          if (!v20)
          {
            if (!v19) {
              goto LABEL_15;
            }
            *BOOL v19 = v16;
            --v94;
            goto LABEL_17;
          }
        }
        goto LABEL_29;
      }
LABEL_15:
      unsigned int v22 = v93;
      if (HIDWORD(v93) < v93)
      {
        ++HIDWORD(v93);
        *(void *)&v92[8 * v18] = v16;
        goto LABEL_17;
      }
    }
    else
    {
      unsigned int v22 = v93;
    }
    if (3 * v22 <= 4 * (HIDWORD(v93) - v94))
    {
      if (v22 >= 0x40) {
        v22 *= 2;
      }
      else {
        unsigned int v22 = 128;
      }
    }
    else if (v22 - HIDWORD(v93) >= v22 >> 3)
    {
      goto LABEL_34;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v91, v22);
    unsigned int v22 = v93;
    uint64_t v17 = v92;
LABEL_34:
    unsigned int v33 = v22 - 1;
    unsigned int v34 = (v22 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    uint64_t v35 = &v17[8 * v34];
    uint64_t v36 = *(void *)v35;
    if (*(void *)v35 != -1)
    {
      int v37 = 0;
      int v38 = 1;
      while (v36 != v16)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v36 == -2;
        }
        if (v39) {
          int v37 = (unint64_t *)v35;
        }
        unsigned int v40 = v34 + v38++;
        unsigned int v34 = v40 & v33;
        uint64_t v35 = &v17[8 * (v40 & v33)];
        uint64_t v36 = *(void *)v35;
        if (*(void *)v35 == -1) {
          goto LABEL_73;
        }
      }
      goto LABEL_29;
    }
    int v37 = 0;
LABEL_73:
    if (v37) {
      char v60 = v37;
    }
    else {
      char v60 = (unint64_t *)v35;
    }
    if (*v60 != v16)
    {
      if (*v60 == -2) {
        --v94;
      }
      else {
        ++HIDWORD(v93);
      }
      unint64_t *v60 = v16;
LABEL_17:
      uint64_t v23 = *v89;
      if (v14)
      {
        unint64_t v72 = v14;
        char v73 = *v89;
        do
        {
          unint64_t v74 = v72 >> 1;
          uint64_t v75 = &v73[2 * (v72 >> 1)];
          unint64_t v77 = *v75;
          uint64_t v76 = v75 + 2;
          v72 += ~(v72 >> 1);
          if (v16 < v77) {
            unint64_t v72 = v74;
          }
          else {
            char v73 = v76;
          }
        }
        while (v72);
        uint64_t v24 = *v89;
        uint64_t v9 = this;
        if (v73 != v23)
        {
          if (*(v73 - 2) == v16) {
            uint64_t v24 = v73 - 2;
          }
          else {
            uint64_t v24 = v73;
          }
        }
      }
      else
      {
        uint64_t v24 = *v89;
      }
      if (v24 == &v23[2 * v14] || *v24 != v16)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (void *)(v16 + 40);
        char v26 = 1;
      }
      else
      {
        unint64_t v78 = v24[1];
        if ((v78 & 7) != 0) {
          goto LABEL_29;
        }
        unint64_t v79 = v78 & 0xFFFFFFFFFFFFFFF8;
        if ((v78 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v25 = (void *)(v79 + 24);
          sub_1CC09D560(v86, v79, (uint64_t)a2);
          char v26 = 0;
        }
        else
        {
          char v26 = 0;
          uint64_t v25 = (void *)(v16 + 40);
        }
        uint64_t v9 = this;
      }
      if (v25 == *(void **)(v16 + 48))
      {
        uint64_t v80 = *(void *)(*(void *)(v16 + 56) + 80);
        if (v80) {
          uint64_t v81 = v80 - 24;
        }
        else {
          uint64_t v81 = 0;
        }
        if (v16 == v81) {
          uint64_t v27 = 0x4000000000000003;
        }
        else {
          uint64_t v27 = 0x2000000000000003;
        }
      }
      else
      {
        uint64_t v27 = llvm::MemoryDependenceResults::getCallDependencyFrom((uint64_t)v9, a2, (ModRefBehavior & 2) == 0, v25, v16);
      }
      if (v26)
      {
        uint64_t v29 = (unint64_t *)v6[2];
        unint64_t v28 = v6[3];
        if ((unint64_t)v29 >= v28)
        {
          BOOL v41 = *v89;
          uint64_t v42 = ((char *)v29 - (char *)*v89) >> 4;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 60) {
            abort();
          }
          uint64_t v44 = v28 - (void)v41;
          if (v44 >> 3 > v43) {
            unint64_t v43 = v44 >> 3;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 60) {
              sub_1CB833614();
            }
            long long v46 = (char *)operator new(16 * v45);
          }
          else
          {
            long long v46 = 0;
          }
          long long v47 = (unint64_t *)&v46[16 * v42];
          unint64_t *v47 = v16;
          v47[1] = v27;
          unsigned int v48 = v47;
          if (v29 == v41)
          {
            uint64_t v9 = this;
          }
          else
          {
            uint64_t v9 = this;
            do
            {
              *((_OWORD *)v48 - 1) = *((_OWORD *)v29 - 1);
              v48 -= 2;
              v29 -= 2;
            }
            while (v29 != v41);
            uint64_t v29 = *v89;
          }
          BOOL v49 = &v46[16 * v45];
          unsigned int v30 = v47 + 2;
          v6[1] = v48;
          v6[2] = v47 + 2;
          v6[3] = v49;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *uint64_t v29 = v16;
          v29[1] = v27;
          unsigned int v30 = v29 + 2;
        }
        v6[2] = v30;
      }
      else
      {
        v24[1] = v27;
      }
      if ((v27 & 0xE000000000000007) == 0x2000000000000003)
      {
        unsigned int v31 = (uint64_t *)sub_1CC0A1594(v15, v16);
        int v32 = sub_1CC0A181C(v15, v16);
        sub_1CC0A3870((uint64_t)&v96, (uint64_t)v96 + 8 * v97, v31, &v31[v32]);
        goto LABEL_29;
      }
      if ((v27 & 7u) <= 2uLL)
      {
        unint64_t v90 = v27 & 0xFFFFFFFFFFFFFFF8;
        if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          sub_1CC0A26E4(v86, (uint64_t *)&v90);
          uint64_t v51 = v50;
          uint64_t v53 = *(void *)(v50 + 8);
          uint64_t v52 = (llvm::SmallPtrSetImplBase *)(v50 + 8);
          uint64_t v54 = *(void *)(v51 + 16);
          uint64_t v55 = *(unsigned int *)(v51 + 28);
          if (v54 != v53)
          {
            unsigned int v59 = *(_DWORD *)(v51 + 24);
            goto LABEL_83;
          }
          if (!v55)
          {
LABEL_70:
            unsigned int v59 = *(_DWORD *)(v51 + 24);
            if (v55 < v59)
            {
              *(_DWORD *)(v51 + 28) = v55 + 1;
              *(void *)(v54 + 8 * v55) = a2;
              goto LABEL_29;
            }
LABEL_83:
            if (3 * v59 <= 4 * ((int)v55 - *(_DWORD *)(v51 + 32)))
            {
              if (v59 >= 0x40) {
                v59 *= 2;
              }
              else {
                unsigned int v59 = 128;
              }
            }
            else if (v59 - v55 >= v59 >> 3)
            {
              goto LABEL_85;
            }
            llvm::SmallPtrSetImplBase::Grow(v52, v59);
            unsigned int v59 = *(_DWORD *)(v51 + 24);
            uint64_t v54 = *(void *)(v51 + 16);
LABEL_85:
            unsigned int v61 = v59 - 1;
            unsigned int v62 = (v59 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            long long v63 = (llvm::CallBase **)(v54 + 8 * v62);
            uint64_t v64 = *v63;
            if (*v63 == (llvm::CallBase *)-1)
            {
              uint64_t v65 = 0;
LABEL_98:
              if (v65) {
                int v69 = v65;
              }
              else {
                int v69 = v63;
              }
              if (*v69 != a2)
              {
                if (*v69 == (llvm::CallBase *)-2) {
                  --*(_DWORD *)(v51 + 32);
                }
                else {
                  ++*(_DWORD *)(v51 + 28);
                }
                *int v69 = a2;
              }
            }
            else
            {
              uint64_t v65 = 0;
              int v66 = 1;
              while (v64 != a2)
              {
                if (v65) {
                  BOOL v67 = 0;
                }
                else {
                  BOOL v67 = v64 == (llvm::CallBase *)-2;
                }
                if (v67) {
                  uint64_t v65 = v63;
                }
                unsigned int v68 = v62 + v66++;
                unsigned int v62 = v68 & v61;
                long long v63 = (llvm::CallBase **)(v54 + 8 * (v68 & v61));
                uint64_t v64 = *v63;
                if (*v63 == (llvm::CallBase *)-1) {
                  goto LABEL_98;
                }
              }
            }
            goto LABEL_29;
          }
          uint64_t v56 = 0;
          uint64_t v57 = 8 * v55;
          int v58 = *(void **)(v51 + 16);
          while ((llvm::CallBase *)*v58 != a2)
          {
            if (*v58 == -2) {
              uint64_t v56 = v58;
            }
            ++v58;
            v57 -= 8;
            if (!v57)
            {
              if (!v56) {
                goto LABEL_70;
              }
              *uint64_t v56 = a2;
              --*(_DWORD *)(v51 + 32);
              break;
            }
          }
        }
      }
    }
LABEL_29:
    unsigned int v13 = v97;
  }
  while (v97);
  if (v92 != v91) {
    free(v92);
  }
LABEL_107:
  if (v96 != v98) {
    free(v96);
  }
  return v6 + 1;
}

double llvm::MemoryDependenceResults::getNonLocalPointerDependency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  llvm::MemoryLocation::getOrNone((uint64_t ***)a2, (uint64_t)&v30);
  v29[0] = v30;
  v29[1] = v31;
  void v29[2] = *(_OWORD *)v32;
  int v6 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)&long long v30 = 0;
  if (sub_1CC0A2428(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, &v30)
    && (void)v30 != *(void *)(a1 + 24) + 32 * *(unsigned int *)(a1 + 40))
  {
    unint64_t v16 = (void *)v30;
    unint64_t v17 = sub_1CD483108(a3, v30 + 8);
    uint64_t v18 = *(void *)a3 + 24 * *(unsigned int *)(a3 + 8);
    long long v19 = *(_OWORD *)v17;
    *(void *)(v18 + 16) = *(void *)(v17 + 16);
    *(_OWORD *)uint64_t v18 = v19;
    ++*(_DWORD *)(a3 + 8);
    unint64_t v20 = 0;
    if ((v16[2] & 7) != 3) {
      unint64_t v20 = v16[2] & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)&long long v30 = v20;
    uint64_t v21 = sub_1CD4A8A90(a1 + 48, (uint64_t *)&v30);
    unsigned int v22 = sub_1CB896AE8((uint64_t)(v21 + 1), a2);
    uint64_t v23 = v21[2];
    if (v23 == v21[1]) {
      uint64_t v24 = (unsigned int *)v21 + 7;
    }
    else {
      uint64_t v24 = (unsigned int *)(v21 + 3);
    }
    if (v22 != (void *)(v23 + 8 * *v24))
    {
      void *v22 = -2;
      ++*((_DWORD *)v21 + 8);
    }
    *unint64_t v16 = -8192;
    *(int32x2_t *)&long long v10 = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
    *(void *)(a1 + 32) = v10;
  }
  else if ((llvm::Instruction::isVolatile((llvm::Instruction *)a2) & 1) != 0 {
         || (*(unsigned char *)(a2 + 16) & 0xFE) == 0x3C && (*(_WORD *)(a2 + 18) & 0x301) != 0)
  }
  {
    *(void *)&long long v30 = v7;
    *((void *)&v30 + 1) = 0x6000000000000003;
    *(void *)&long long v31 = *(void *)&v29[0];
    unint64_t v14 = sub_1CD483108(a3, (unint64_t)&v30);
    uint64_t v15 = *(void *)a3 + 24 * *(unsigned int *)(a3 + 8);
    long long v10 = *(_OWORD *)v14;
    *(void *)(v15 + 16) = *(void *)(v14 + 16);
    *(_OWORD *)uint64_t v15 = v10;
    ++*(_DWORD *)(a3 + 8);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 40) + 272;
    uint64_t v9 = *(void *)(a1 + 200);
    *(void *)&long long v30 = *(void *)&v29[0];
    *((void *)&v30 + 1) = v8;
    *(void *)&long long v31 = 0;
    *((void *)&v31 + 1) = v9;
    v32[0] = v33;
    v32[1] = (void *)0x400000000;
    if (*(void *)&v29[0] && *(unsigned __int8 *)(*(void *)&v29[0] + 16) >= 0x1Cu)
    {
      v33[0] = *(void *)&v29[0];
      LODWORD(v32[1]) = 1;
    }
    v27[0] = 0;
    v27[1] = 0;
    int v28 = 0;
    if ((llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, (llvm::LoadInst *)a2, (unsigned int *)&v30, (uint64_t)v29, v6 == 60, v7, a3, (uint64_t)v27, 1, 0) & 1) == 0)
    {
      *(_DWORD *)(a3 + 8) = 0;
      v26[0] = v7;
      v26[1] = 0x6000000000000003;
      v26[2] = *(void *)&v29[0];
      unint64_t v11 = sub_1CD483108(a3, (unint64_t)v26);
      uint64_t v12 = *(void *)a3 + 24 * *(unsigned int *)(a3 + 8);
      long long v13 = *(_OWORD *)v11;
      *(void *)(v12 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v12 = v13;
      ++*(_DWORD *)(a3 + 8);
    }
    MEMORY[0x1D25D9CD0](v27[0], 8);
    if (v32[0] != v33) {
      free(v32[0]);
    }
  }
  return *(double *)&v10;
}

uint64_t llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(uint64_t a1, llvm::LoadInst *a2, unsigned int *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10)
{
  v232[32] = *MEMORY[0x1E4F143B8];
  unint64_t v14 = *(void *)a3 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v15 = 4;
  if (!a5) {
    uint64_t v15 = 0;
  }
  unint64_t v16 = v14 | v15;
  unint64_t v215 = v14 | v15;
  uint64_t v17 = *(void *)(a4 + 8);
  long long v18 = *(_OWORD *)(a4 + 16);
  long long v19 = *(_OWORD *)(a4 + 32);
  if (!a2 || *((unsigned char *)a2 + 16) != 60)
  {
    BOOL v198 = 0;
    goto LABEL_24;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_22;
  }
  uint64_t v20 = ***(void ***)a2;
  *(void *)v229 = a2;
  int v21 = *(_DWORD *)(v20 + 2496);
  if (v21)
  {
    uint64_t v22 = *(void *)(v20 + 2480);
    int v23 = v21 - 1;
    unsigned int v24 = v23 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v25 = (llvm::LoadInst **)(v22 + 40 * v24);
    char v26 = *v25;
    if (*v25 == a2) {
      goto LABEL_16;
    }
    uint64_t v27 = 0;
    int v28 = 1;
    while (v26 != (llvm::LoadInst *)-4096)
    {
      if (v27) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v26 == (llvm::LoadInst *)-8192;
      }
      if (v29) {
        uint64_t v27 = v25;
      }
      unsigned int v30 = v24 + v28++;
      unsigned int v24 = v30 & v23;
      uint64_t v25 = (llvm::LoadInst **)(v22 + 40 * v24);
      char v26 = *v25;
      if (*v25 == a2) {
        goto LABEL_16;
      }
    }
    long long v209 = v19;
    long long v211 = v18;
    if (v27) {
      v193 = v27;
    }
    else {
      v193 = v25;
    }
  }
  else
  {
    long long v209 = v19;
    long long v211 = v18;
    v193 = 0;
  }
  uint64_t v25 = (llvm::LoadInst **)sub_1CC609054(v20 + 2480, (uint64_t)v229, (uint64_t *)v229, v193);
  uint64_t v194 = *(llvm::LoadInst **)v229;
  v25[3] = 0;
  v25[4] = 0;
  void *v25 = v194;
  v25[1] = (llvm::LoadInst *)(v25 + 3);
  v25[2] = (llvm::LoadInst *)0x100000000;
  long long v19 = v209;
  long long v18 = v211;
LABEL_16:
  uint64_t v31 = *((unsigned int *)v25 + 4);
  if (v31)
  {
    int v32 = (void *)((char *)v25[1] + 8);
    uint64_t v33 = 16 * v31;
    while (*((_DWORD *)v32 - 2) != 6)
    {
      uint64_t v34 = 0;
      v32 += 2;
      v33 -= 16;
      if (!v33) {
        goto LABEL_23;
      }
    }
    uint64_t v34 = *v32;
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v34 = 0;
LABEL_23:
  BOOL v198 = v34 != 0;
LABEL_24:
  int v35 = a10;
  memset(&v229[8], 0, 32);
  *(void *)v229 = v16;
  *(void *)&v229[40] = v17;
  *(_OWORD *)&v229[48] = v18;
  *(_OWORD *)&v229[64] = v19;
  uint64_t v37 = a1 + 72;
  uint64_t v36 = *(void *)(a1 + 72);
  v219 = 0;
  int v38 = sub_1CC0A3B44(v36, *(_DWORD *)(a1 + 88), v16, &v219);
  BOOL v39 = v219;
  uint64_t v208 = a1;
  uint64_t v201 = a1 + 72;
  if ((v38 & 1) == 0)
  {
    BOOL v39 = sub_1CC0A3BDC(a1 + 72, (unint64_t *)v229, v219);
    *BOOL v39 = v16;
    *(_OWORD *)(v39 + 1) = 0u;
    v200 = v39 + 1;
    *(_OWORD *)(v39 + 3) = 0u;
    *(_OWORD *)(v39 + 5) = *(_OWORD *)&v229[40];
    *(_OWORD *)(v39 + 7) = *(_OWORD *)&v229[56];
    v39[9] = *(void *)&v229[72];
    goto LABEL_65;
  }
  v200 = v219 + 1;
  if ((v198 | v38 ^ 1)) {
    goto LABEL_65;
  }
  unint64_t v40 = v219[5];
  unint64_t v41 = *(void *)(a4 + 8);
  if (v40 != v41)
  {
    if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > 0xFFFFFFFFFFFFFFFDLL)
    {
      if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_31:
        long long v42 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)v229 = *(_OWORD *)a4;
        *(_OWORD *)&v229[16] = v42;
        *(_OWORD *)&v229[32] = *(_OWORD *)(a4 + 32);
        *(void *)&v229[8] = v40;
LABEL_279:
        HIBYTE(v197) = v35;
        LOBYTE(v197) = a9;
        return llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, a2, a3, v229, a5, a6, a7, a8, v197);
      }
    }
    else if (((v41 ^ v40) & 0x8000000000000000) == 0 && (v40 & 0x7FFFFFFFFFFFFFFFLL) >= (v41 & 0x7FFFFFFFFFFFFFFFLL))
    {
      goto LABEL_31;
    }
    v219[1] = 0;
    v39[5] = v41;
    uint64_t v43 = v39[2];
    uint64_t v44 = v39[3];
    if (v43 != v44)
    {
      uint64_t v45 = a1 + 96;
      do
      {
        unint64_t v46 = *(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8;
        if ((*(void *)(v43 + 8) & 7uLL) <= 2 && v46 != 0) {
          sub_1CC09F8FC(v45, v46, v16);
        }
        v43 += 16;
      }
      while (v43 != v44);
      uint64_t v43 = v39[2];
      a1 = v208;
    }
    void v39[3] = v43;
    int v35 = 1;
    uint64_t v37 = v201;
  }
  uint64_t v48 = v39[6];
  uint64_t v49 = *(void *)(a4 + 16);
  if (v48 == v49 && v39[7] == *(void *)(a4 + 24) && v39[8] == *(void *)(a4 + 32) && v39[9] == *(void *)(a4 + 40)) {
    goto LABEL_65;
  }
  if (v48 || v39[7] || v39[8] || v39[9])
  {
    v39[1] = 0;
    *((_OWORD *)v39 + 3) = 0u;
    *((_OWORD *)v39 + 4) = 0u;
    uint64_t v50 = v39[2];
    uint64_t v51 = v39[3];
    if (v50 != v51)
    {
      uint64_t v52 = a1 + 96;
      do
      {
        unint64_t v53 = *(void *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
        if ((*(void *)(v50 + 8) & 7uLL) <= 2 && v53 != 0) {
          sub_1CC09F8FC(v52, v53, v16);
        }
        v50 += 16;
      }
      while (v50 != v51);
      uint64_t v50 = v39[2];
      a1 = v208;
    }
    void v39[3] = v50;
    uint64_t v55 = a4;
    int v35 = 1;
    uint64_t v37 = v201;
    if (*(void *)(a4 + 16)) {
      goto LABEL_278;
    }
  }
  else
  {
    uint64_t v55 = a4;
    if (v49)
    {
LABEL_278:
      *(_OWORD *)v229 = *(_OWORD *)v55;
      memset(&v229[16], 0, 32);
      goto LABEL_279;
    }
  }
  if (*(void *)(v55 + 24) || *(void *)(v55 + 32) || *(void *)(v55 + 40)) {
    goto LABEL_278;
  }
LABEL_65:
  if (((v35 | v198) & 1) == 0)
  {
    uint64_t v56 = 4;
    if (!a9) {
      uint64_t v56 = 0;
    }
    if (*v200 == (v56 | a6 & 0xFFFFFFFFFFFFFFFBLL))
    {
      if (*(_DWORD *)(a8 + 8))
      {
        uint64_t v57 = (uint64_t *)v39[2];
        int v58 = (uint64_t *)v39[3];
        if (v57 != v58)
        {
          uint64_t v59 = *(void *)a3;
          uint64_t v60 = *(void *)a8;
          uint64_t v61 = *(unsigned int *)(a8 + 16);
          unsigned int v62 = v61 - 1;
          long long v63 = (uint64_t *)v39[2];
          while (1)
          {
            if (v61)
            {
              LODWORD(v64) = ((*v63 >> 4) ^ (*v63 >> 9)) & v62;
              uint64_t v65 = (uint64_t *)(v60 + 16 * v64);
              uint64_t v66 = *v65;
              if (*v63 != *v65)
              {
                int v67 = 1;
                do
                {
                  if (v66 == -4096) {
                    goto LABEL_80;
                  }
                  int v68 = v64 + v67++;
                  uint64_t v64 = v68 & v62;
                  uint64_t v66 = *(void *)(v60 + 16 * v64);
                }
                while (*v63 != v66);
                uint64_t v65 = (uint64_t *)(v60 + 16 * v64);
              }
              if (v65 != (uint64_t *)(*(void *)a8 + 16 * v61) && v65[1] != v59) {
                return 0;
              }
            }
LABEL_80:
            v63 += 2;
            if (v63 == v58) {
              goto LABEL_247;
            }
          }
        }
        return 1;
      }
      uint64_t v59 = *(void *)a3;
      uint64_t v57 = (uint64_t *)v39[2];
      int v58 = (uint64_t *)v39[3];
LABEL_247:
      if (v57 == v58) {
        return 1;
      }
      while (1)
      {
        uint64_t v180 = *v57;
        *(void *)v229 = *v57;
        *(void *)&v229[8] = v59;
        int v181 = *(_DWORD *)(a8 + 16);
        if (!v181) {
          break;
        }
        int v182 = v181 - 1;
        unsigned int v183 = v182 & ((v180 >> 4) ^ (v180 >> 9));
        unsigned int v184 = (uint64_t *)(*(void *)a8 + 16 * v183);
        uint64_t v185 = *v184;
        if (v180 != *v184)
        {
          unsigned int v186 = 0;
          int v187 = 1;
          while (v185 != -4096)
          {
            if (v186) {
              BOOL v188 = 0;
            }
            else {
              BOOL v188 = v185 == -8192;
            }
            if (v188) {
              unsigned int v186 = v184;
            }
            unsigned int v189 = v183 + v187++;
            unsigned int v183 = v189 & v182;
            unsigned int v184 = (uint64_t *)(*(void *)a8 + 16 * v183);
            uint64_t v185 = *v184;
            if (v180 == *v184) {
              goto LABEL_263;
            }
          }
          if (v186) {
            unsigned int v190 = v186;
          }
          else {
            unsigned int v190 = v184;
          }
          goto LABEL_262;
        }
LABEL_263:
        if ((v57[1] & 0xE000000000000007) != 0x2000000000000003) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
        }
        v57 += 2;
        if (v57 == v58) {
          return 1;
        }
      }
      unsigned int v190 = 0;
LABEL_262:
      v191 = sub_1CC0A3E2C(a8, (uint64_t)v229, (uint64_t *)v229, v190);
      uint64_t *v191 = *(void *)v229;
      v191[1] = *(void *)&v229[8];
      goto LABEL_263;
    }
  }
  uint64_t v69 = (uint64_t)(v39 + 2);
  if (!v198)
  {
    if ((v35 & 1) == 0 && v39[2] == v39[3])
    {
      uint64_t v192 = 4;
      if (!a9) {
        uint64_t v192 = 0;
      }
      unint64_t v70 = v192 | a6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    else
    {
      unint64_t v70 = 0;
    }
    unint64_t *v200 = v70;
  }
  v230 = v232;
  v232[0] = a6;
  uint64_t v231 = 0x2000000001;
  *(void *)v229 = &v229[16];
  *(void *)&v229[8] = 0x1000000000;
  unint64_t v71 = v39[3] - v39[2];
  unsigned int v204 = dword_1EBCC6980;
  v219 = *(void **)(a1 + 192);
  uint64_t v220 = 1;
  uint64_t v72 = 2;
  do
  {
    char v73 = &(&v219)[v72];
    *(_OWORD *)char v73 = xmmword_1CFAC3060;
    *((_OWORD *)v73 + 1) = xmmword_1CFAC3060;
    v72 += 5;
  }
  while (v73 + 5 != v222);
  v222[0] = &v226;
  v222[1] = 0;
  v223 = v225;
  uint64_t v224 = 0x400000000;
  v226 = &unk_1F2600DB8;
  uint64_t v227 = 1;
  uint64_t v74 = 64;
  char v75 = a9;
  do
  {
    (&v219)[v74] = (void *)-4096;
    v74 += 2;
  }
  while (v74 != 80);
  unint64_t v76 = v71 >> 4;
  v210 = (const void **)(a3 + 8);
  uint64_t v199 = a1 + 232;
  unsigned int v77 = 1;
  LODWORD(v202) = v76;
  while (1)
  {
    unint64_t v78 = (llvm::BasicBlock *)*((void *)v230 + v77 - 1);
    LODWORD(v231) = v77 - 1;
    if (*(_DWORD *)(a7 + 8) >= 0x65u)
    {
      LODWORD(v231) = 0;
      if (v69 && v202 != (uint64_t)(*(void *)(v69 + 8) - *(void *)v69) >> 4) {
        sub_1CC09FAA0(v69, v202);
      }
      uint64_t v179 = 0;
      unint64_t *v200 = 0;
      goto LABEL_238;
    }
    if ((v75 & 1) == 0
      && (llvm::MemoryDependenceResults::getNonLocalInfoForBlock((llvm::DominatorTree **)a1, a2, (void *)a4, a5, v78, (char **)v69, v202, &v219) & 0xE000000000000007) != 0x2000000000000003)
    {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
    }
    uint64_t v79 = a3[10];
    if (!v79)
    {
LABEL_100:
      *(void *)unint64_t __src = &__src[16];
      *(void *)&__src[8] = 0x1000000000;
      uint64_t v81 = (uint64_t *)sub_1CC0A1594(v199, (uint64_t)v78);
      int v82 = sub_1CC0A181C(v199, (uint64_t)v78);
      if (!v82)
      {
LABEL_123:
        uint64_t v98 = *(unsigned int *)&__src[8];
        if (v204 >= *(_DWORD *)&__src[8])
        {
          int v112 = v231;
          if (v231 + (unint64_t)*(unsigned int *)&__src[8] > HIDWORD(v231)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (*(_DWORD *)&__src[8])
          {
            memcpy((char *)v230 + 8 * v231, *(const void **)__src, 8 * *(unsigned int *)&__src[8]);
            int v112 = v231;
          }
          char v111 = 0;
          v204 -= v98;
          LODWORD(v231) = v112 + v98;
          int v110 = 1;
        }
        else
        {
          uint64_t v99 = 0;
          int v100 = *(_DWORD *)(a8 + 16);
          unsigned int v101 = v100 - 1;
          int32x2_t v102 = *(int32x2_t *)(a8 + 8);
          do
          {
            if (v100)
            {
              uint64_t v103 = *(void *)a8;
              uint64_t v104 = *(void *)(*(void *)__src + 8 * v99);
              LODWORD(v105) = ((v104 >> 4) ^ (v104 >> 9)) & v101;
              uint64_t v106 = (uint64_t *)(*(void *)a8 + 16 * v105);
              uint64_t v107 = *v106;
              if (v104 == *v106)
              {
LABEL_131:
                uint64_t *v106 = -8192;
                int32x2_t v102 = vadd_s32(v102, (int32x2_t)0x1FFFFFFFFLL);
                *(int32x2_t *)(a8 + 8) = v102;
              }
              else
              {
                int v108 = 1;
                while (v107 != -4096)
                {
                  int v109 = v105 + v108++;
                  uint64_t v105 = v109 & v101;
                  uint64_t v107 = *(void *)(v103 + 16 * v105);
                  if (v104 == v107)
                  {
                    uint64_t v106 = (uint64_t *)(v103 + 16 * v105);
                    goto LABEL_131;
                  }
                }
              }
            }
            ++v99;
          }
          while (v99 != v98);
LABEL_133:
          int v110 = 0;
          char v111 = 1;
        }
        if (*(unsigned char **)__src != &__src[16]) {
          free(*(void **)__src);
        }
        if ((v111 & 1) == 0)
        {
          uint64_t v37 = v201;
          if (!v110) {
            goto LABEL_237;
          }
          goto LABEL_208;
        }
        if (!v69)
        {
          char v75 = 0;
          uint64_t v37 = v201;
          goto LABEL_198;
        }
        unint64_t *v200 = 0;
        uint64_t v37 = v201;
        goto LABEL_202;
      }
      uint64_t v83 = &v81[v82];
      while (1)
      {
        uint64_t v84 = *v81;
        uint64_t v85 = *(void *)a3;
        uint64_t v213 = *v81;
        uint64_t v214 = v85;
        int v86 = *(_DWORD *)(a8 + 16);
        if (!v86) {
          break;
        }
        uint64_t v87 = *(void *)a8;
        unsigned int v88 = v86 - 1;
        uint64_t v89 = v88 & ((v84 >> 4) ^ (v84 >> 9));
        unint64_t v90 = (uint64_t *)(*(void *)a8 + 16 * v89);
        uint64_t v91 = *v90;
        if (v84 != *v90)
        {
          int v92 = 0;
          int v93 = 1;
          while (v91 != -4096)
          {
            if (v92) {
              BOOL v94 = 0;
            }
            else {
              BOOL v94 = v91 == -8192;
            }
            if (v94) {
              int v92 = v90;
            }
            int v95 = v89 + v93++;
            uint64_t v89 = v95 & v88;
            unint64_t v90 = (uint64_t *)(v87 + 16 * v89);
            uint64_t v91 = *v90;
            if (v84 == *v90) {
              goto LABEL_112;
            }
          }
          if (v92) {
            int v96 = v92;
          }
          else {
            int v96 = v90;
          }
          goto LABEL_117;
        }
LABEL_112:
        if (*(void *)(v87 + 16 * v89 + 8) != v85)
        {
          uint64_t v157 = *(unsigned int *)&__src[8];
          if (*(_DWORD *)&__src[8])
          {
            uint64_t v158 = 0;
            int32x2_t v159 = *(int32x2_t *)(a8 + 8);
            do
            {
              uint64_t v160 = *(void *)a8;
              uint64_t v161 = *(void *)(*(void *)__src + 8 * v158);
              LODWORD(v162) = ((v161 >> 4) ^ (v161 >> 9)) & v88;
              v163 = (uint64_t *)(*(void *)a8 + 16 * v162);
              uint64_t v164 = *v163;
              if (v161 == *v163)
              {
LABEL_217:
                uint64_t *v163 = -8192;
                int32x2_t v159 = vadd_s32(v159, (int32x2_t)0x1FFFFFFFFLL);
                *(int32x2_t *)(a8 + 8) = v159;
              }
              else
              {
                int v165 = 1;
                while (v164 != -4096)
                {
                  int v166 = v162 + v165++;
                  uint64_t v162 = v166 & v88;
                  uint64_t v164 = *(void *)(v160 + 16 * v162);
                  if (v161 == v164)
                  {
                    v163 = (uint64_t *)(v160 + 16 * v162);
                    goto LABEL_217;
                  }
                }
              }
              ++v158;
            }
            while (v158 != v157);
          }
          goto LABEL_133;
        }
LABEL_119:
        if (++v81 == v83) {
          goto LABEL_123;
        }
      }
      int v96 = 0;
LABEL_117:
      uint64_t v97 = sub_1CC0A3E2C(a8, (uint64_t)&v213, &v213, v96);
      *uint64_t v97 = v213;
      v97[1] = v214;
      if (*(unsigned int *)&__src[8] >= (unint64_t)*(unsigned int *)&__src[12]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)__src + 8 * *(unsigned int *)&__src[8]) = v84;
      ++*(_DWORD *)&__src[8];
      goto LABEL_119;
    }
    uint64_t v80 = (char *)*v210;
    while (*(llvm::BasicBlock **)(*(void *)v80 + 40) != v78)
    {
      v80 += 8;
      if (!--v79) {
        goto LABEL_100;
      }
    }
    if (*(void *)a3) {
      BOOL v113 = *(unsigned __int8 *)(*(void *)a3 + 16) > 0x1Bu;
    }
    else {
      BOOL v113 = 0;
    }
    if (v113 && !sub_1CC0CC938(*(void *)a3))
    {
      if (!v69) {
        goto LABEL_198;
      }
      unint64_t *v200 = 0;
      if (v75) {
        goto LABEL_237;
      }
LABEL_202:
      if (!v198)
      {
        uint64_t v151 = *(void *)(v69 + 8);
        while (v151 != *(void *)v69)
        {
          int v152 = *(llvm::BasicBlock **)(v151 - 16);
          v151 -= 16;
          if (v152 == v78)
          {
            *(void *)(v151 + 8) = 0x6000000000000003;
            break;
          }
        }
      }
      uint64_t v153 = *(void *)a3;
      *(void *)unint64_t __src = v78;
      *(void *)&__src[8] = 0x6000000000000003;
      *(void *)&__src[16] = v153;
      unint64_t v154 = sub_1CD483108(a7, (unint64_t)__src);
      uint64_t v155 = *(void *)a7 + 24 * *(unsigned int *)(a7 + 8);
      long long v156 = *(_OWORD *)v154;
      *(void *)(v155 + 16) = *(void *)(v154 + 16);
      *(_OWORD *)uint64_t v155 = v156;
      ++*(_DWORD *)(a7 + 8);
      goto LABEL_208;
    }
    if (v69 && v202 != (uint64_t)(*(void *)(v69 + 8) - *(void *)v69) >> 4) {
      sub_1CC09FAA0(v69, v202);
    }
    if (*(_DWORD *)&v229[8])
    {
      uint64_t v114 = *(void *)v229;
      uint64_t v115 = 88 * *(unsigned int *)&v229[8];
      do
      {
        int v116 = *(void **)(v114 + v115 - 48);
        if ((void *)(v114 + v115 - 32) != v116) {
          free(v116);
        }
        v115 -= 88;
      }
      while (v115);
    }
    char v203 = v75;
    *(_DWORD *)&v229[8] = 0;
    uint64_t v117 = (llvm::BasicBlock **)sub_1CC0A1594(v199, (uint64_t)v78);
    int v118 = sub_1CC0A181C(v199, (uint64_t)v78);
    if (v118) {
      break;
    }
LABEL_190:
    uint64_t v37 = v201;
    if (*(_DWORD *)&v229[8])
    {
      uint64_t v140 = 0;
      uint64_t v141 = 88 * *(unsigned int *)&v229[8];
      do
      {
        uint64_t v142 = *(void *)(*(void *)v229 + v140);
        uint64_t v143 = *(void *)(*(void *)v229 + v140 + 8);
        if (!v143
          || (long long v144 = *(_OWORD *)(a4 + 16),
              *(_OWORD *)unint64_t __src = *(_OWORD *)a4,
              *(_OWORD *)&__src[16] = v144,
              *(_OWORD *)&__src[32] = *(_OWORD *)(a4 + 32),
              *(void *)unint64_t __src = v143,
              LOWORD(v196) = 0,
              (llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(a1, a2, *(void *)v229 + v140 + 8, __src, a5, v142, a7, a8, v196) & 1) == 0))
        {
          *(void *)unint64_t __src = v142;
          *(void *)&__src[8] = 0x6000000000000003;
          *(void *)&__src[16] = v143;
          unint64_t v145 = sub_1CD483108(a7, (unint64_t)__src);
          uint64_t v146 = *(void *)a7 + 24 * *(unsigned int *)(a7 + 8);
          long long v147 = *(_OWORD *)v145;
          *(void *)(v146 + 16) = *(void *)(v145 + 16);
          *(_OWORD *)uint64_t v146 = v147;
          ++*(_DWORD *)(a7 + 8);
          sub_1CC0A424C(v201, &v215)[1] = 0;
        }
        v140 += 88;
      }
      while (v141 != v140);
    }
    uint64_t v148 = sub_1CC0A424C(v201, &v215);
    v148[1] = 0;
    uint64_t v69 = (uint64_t)(++v148 + 1);
    v200 = v148;
    unint64_t v202 = (v148[2] - v148[1]) >> 4;
LABEL_208:
    char v75 = 0;
    unsigned int v77 = v231;
    if (!v231)
    {
      sub_1CC09FAA0(v69, v202);
      uint64_t v179 = 1;
      goto LABEL_238;
    }
  }
  uint64_t v119 = &v117[v118];
  while (1)
  {
    long long v120 = *v117;
    long long v121 = *((_OWORD *)a3 + 1);
    *(_OWORD *)&__src[8] = *(_OWORD *)a3;
    *(_OWORD *)&__src[24] = v121;
    *(void *)unint64_t __src = v120;
    *(void *)&__src[40] = v218;
    uint64_t v217 = 0x400000000;
    unsigned int v122 = a3[10];
    if (v122 && &__src[40] != (unsigned char *)v210)
    {
      if (v122 >= 5) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v218, *v210, 8 * a3[10]);
      LODWORD(v217) = v122;
    }
    sub_1CC09FBF0((uint64_t)v229, (unint64_t)__src);
    if (*(unsigned char **)&__src[40] != v218) {
      free(*(void **)&__src[40]);
    }
    uint64_t v123 = *(void *)v229 + 88 * *(unsigned int *)&v229[8];
    llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)(v123 - 80), v78, v120, *(const llvm::DominatorTree **)(a1 + 216));
    uint64_t v124 = *(void *)(v123 - 80);
    *(void *)unint64_t __src = v120;
    *(void *)&__src[8] = v124;
    int v125 = *(_DWORD *)(a8 + 16);
    if (v125) {
      break;
    }
    long long v138 = 0;
LABEL_185:
    unsigned int v139 = sub_1CC0A3E2C(a8, (uint64_t)__src, (uint64_t *)__src, v138);
    *unsigned int v139 = *(void *)__src;
    v139[1] = *(void *)&__src[8];
LABEL_186:
    if (++v117 == v119) {
      goto LABEL_190;
    }
  }
  uint64_t v126 = *(void *)a8;
  unsigned int v127 = v125 - 1;
  uint64_t v128 = v127 & ((v120 >> 4) ^ (v120 >> 9));
  uint64_t v129 = (uint64_t *)(*(void *)a8 + 16 * v128);
  BOOL v130 = (llvm::BasicBlock *)*v129;
  if (v120 != (llvm::BasicBlock *)*v129)
  {
    int v131 = 0;
    int v132 = 1;
    while (v130 != (llvm::BasicBlock *)-4096)
    {
      if (v131) {
        BOOL v133 = 0;
      }
      else {
        BOOL v133 = v130 == (llvm::BasicBlock *)-8192;
      }
      if (v133) {
        int v131 = v129;
      }
      int v134 = v128 + v132++;
      uint64_t v128 = v134 & v127;
      uint64_t v129 = (uint64_t *)(v126 + 16 * v128);
      BOOL v130 = (llvm::BasicBlock *)*v129;
      if (v120 == (llvm::BasicBlock *)*v129) {
        goto LABEL_177;
      }
    }
    if (v131) {
      long long v138 = v131;
    }
    else {
      long long v138 = v129;
    }
    a1 = v208;
    goto LABEL_185;
  }
LABEL_177:
  --*(_DWORD *)&v229[8];
  uint64_t v135 = *(void *)v229 + 88 * *(unsigned int *)&v229[8];
  unint64_t v136 = *(void **)(v135 + 40);
  if (v136 != (void *)(v135 + 56)) {
    free(v136);
  }
  uint64_t v137 = *(void *)(v126 + 16 * v128 + 8);
  a1 = v208;
  if (v137 == v124) {
    goto LABEL_186;
  }
  uint64_t v167 = *(unsigned int *)&v229[8];
  if (*(_DWORD *)&v229[8])
  {
    uint64_t v168 = 0;
    int v169 = *(_DWORD *)(a8 + 16);
    unsigned int v170 = v169 - 1;
    int32x2_t v171 = *(int32x2_t *)(a8 + 8);
    uint64_t v37 = v201;
    char v75 = v203;
    do
    {
      if (v169)
      {
        uint64_t v172 = *(void *)a8;
        uint64_t v173 = *(void *)(*(void *)v229 + 88 * v168);
        LODWORD(v174) = ((v173 >> 4) ^ (v173 >> 9)) & v170;
        uint64_t v175 = (uint64_t *)(*(void *)a8 + 16 * v174);
        uint64_t v176 = *v175;
        if (v173 == *v175)
        {
LABEL_228:
          *uint64_t v175 = -8192;
          int32x2_t v171 = vadd_s32(v171, (int32x2_t)0x1FFFFFFFFLL);
          *(int32x2_t *)(a8 + 8) = v171;
        }
        else
        {
          int v177 = 1;
          while (v176 != -4096)
          {
            int v178 = v174 + v177++;
            uint64_t v174 = v178 & v170;
            uint64_t v176 = *(void *)(v172 + 16 * v174);
            if (v173 == v176)
            {
              uint64_t v175 = (uint64_t *)(v172 + 16 * v174);
              goto LABEL_228;
            }
          }
        }
      }
      ++v168;
    }
    while (v168 != v167);
  }
  else
  {
    uint64_t v37 = v201;
    char v75 = v203;
  }
LABEL_198:
  uint64_t v149 = sub_1CC0A424C(v37, &v215);
  v149[1] = 0;
  long long v150 = v149 + 1;
  if ((v75 & 1) == 0)
  {
    uint64_t v69 = (uint64_t)(v150 + 1);
    v200 = v150;
    unint64_t v202 = (v150[2] - v150[1]) >> 4;
    goto LABEL_202;
  }
LABEL_237:
  uint64_t v179 = 0;
LABEL_238:
  if ((v227 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v228, 8);
  }
  if (v223 != v225) {
    free(v223);
  }
  if ((v220 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v221, 8);
  }
  sub_1CC0A3FF0((char **)v229);
  if (v230 != v232) {
    free(v230);
  }
  return v179;
}

unint64_t llvm::MemoryDependenceResults::getNonLocalInfoForBlock(llvm::DominatorTree **this, llvm::LoadInst *a2, void *a3, int a4, llvm::BasicBlock *a5, char **a6, unsigned int a7, _DWORD *a8)
{
  if (!a2 || *((unsigned char *)a2 + 16) != 60)
  {
    BOOL v31 = 0;
    goto LABEL_22;
  }
  if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
    goto LABEL_20;
  }
  uint64_t v16 = ***(void ***)a2;
  uint64_t v83 = a2;
  int v17 = *(_DWORD *)(v16 + 2496);
  if (v17)
  {
    uint64_t v18 = *(void *)(v16 + 2480);
    int v19 = v17 - 1;
    unsigned int v20 = v19 & ((a2 >> 4) ^ (a2 >> 9));
    int v21 = (llvm::LoadInst **)(v18 + 40 * v20);
    uint64_t v22 = *v21;
    if (*v21 == a2) {
      goto LABEL_14;
    }
    int v23 = 0;
    int v24 = 1;
    while (v22 != (llvm::LoadInst *)-4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == (llvm::LoadInst *)-8192;
      }
      if (v25) {
        int v23 = v21;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & v19;
      int v21 = (llvm::LoadInst **)(v18 + 40 * v20);
      uint64_t v22 = *v21;
      if (*v21 == a2) {
        goto LABEL_14;
      }
    }
    if (v23) {
      uint64_t v81 = v23;
    }
    else {
      uint64_t v81 = v21;
    }
  }
  else
  {
    uint64_t v81 = 0;
  }
  int v21 = (llvm::LoadInst **)sub_1CC609054(v16 + 2480, (uint64_t)&v83, (uint64_t *)&v83, v81);
  int v82 = v83;
  v21[3] = 0;
  v21[4] = 0;
  *int v21 = v82;
  v21[1] = (llvm::LoadInst *)(v21 + 3);
  void v21[2] = (llvm::LoadInst *)0x100000000;
LABEL_14:
  uint64_t v27 = *((unsigned int *)v21 + 4);
  if (v27)
  {
    int v28 = (void *)((char *)v21[1] + 8);
    uint64_t v29 = 16 * v27;
    while (*((_DWORD *)v28 - 2) != 6)
    {
      uint64_t v30 = 0;
      v28 += 2;
      v29 -= 16;
      if (!v29) {
        goto LABEL_21;
      }
    }
    uint64_t v30 = *v28;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v30 = 0;
LABEL_21:
  BOOL v31 = v30 != 0;
LABEL_22:
  int v32 = (llvm::BasicBlock **)*a6;
  if (a7)
  {
    unint64_t v33 = a7;
    uint64_t v34 = (llvm::BasicBlock **)*a6;
    do
    {
      unint64_t v35 = v33 >> 1;
      uint64_t v36 = (unint64_t *)&v34[2 * (v33 >> 1)];
      unint64_t v38 = *v36;
      uint64_t v37 = (llvm::BasicBlock **)(v36 + 2);
      v33 += ~(v33 >> 1);
      if (v38 > (unint64_t)a5) {
        unint64_t v33 = v35;
      }
      else {
        uint64_t v34 = v37;
      }
    }
    while (v33);
    BOOL v39 = (llvm::BasicBlock **)*a6;
    if (v34 != v32)
    {
      if (*(v34 - 2) == a5) {
        BOOL v39 = v34 - 2;
      }
      else {
        BOOL v39 = v34;
      }
    }
  }
  else
  {
    BOOL v39 = (llvm::BasicBlock **)*a6;
  }
  if (v39 == &v32[2 * a7]) {
    goto LABEL_42;
  }
  if (*v39 == a5) {
    unint64_t v40 = v39;
  }
  else {
    unint64_t v40 = 0;
  }
  if (*v39 == a5 && v31)
  {
    if (((unint64_t)v40[1] & 0xE000000000000007) != 0x4000000000000003)
    {
LABEL_42:
      unint64_t PointerDependencyFrom = llvm::MemoryDependenceResults::getPointerDependencyFrom(this, (uint64_t)a3, a4, (void *)a5 + 5, a5, a2, 0, a8);
      unint64_t v43 = PointerDependencyFrom;
      if (v31) {
        return v43;
      }
      uint64_t v45 = a6[1];
      unint64_t v44 = (unint64_t)a6[2];
      if ((unint64_t)v45 >= v44)
      {
        uint64_t v48 = (llvm::BasicBlock **)*a6;
        uint64_t v49 = (v45 - *a6) >> 4;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60) {
          abort();
        }
        uint64_t v51 = v44 - (void)v48;
        if (v51 >> 3 > v50) {
          unint64_t v50 = v51 >> 3;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          if (v52 >> 60) {
            sub_1CB833614();
          }
          unint64_t v53 = (char *)operator new(16 * v52);
        }
        else
        {
          unint64_t v53 = 0;
        }
        uint64_t v57 = &v53[16 * v49];
        *(void *)uint64_t v57 = a5;
        *((void *)v57 + 1) = v43;
        unint64_t v46 = v57 + 16;
        if (v45 != (char *)v48)
        {
          do
          {
            *((_OWORD *)v57 - 1) = *((_OWORD *)v45 - 1);
            v57 -= 16;
            v45 -= 16;
          }
          while (v45 != (char *)v48);
          uint64_t v45 = *a6;
        }
        *a6 = v57;
        a6[1] = v46;
        a6[2] = &v53[16 * v52];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(void *)uint64_t v45 = a5;
        *((void *)v45 + 1) = PointerDependencyFrom;
        unint64_t v46 = v45 + 16;
      }
      a6[1] = v46;
      goto LABEL_70;
    }
  }
  else if (!v40)
  {
    goto LABEL_42;
  }
  unint64_t v43 = (unint64_t)v39[1];
  if ((v43 & 7) != 0) {
    return v43;
  }
  if (v43 >= 8)
  {
    unint64_t v54 = v43 & 0xFFFFFFFFFFFFFFF8;
    long long v47 = (void *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v55 = 4;
    if (!a4) {
      uint64_t v55 = 0;
    }
    sub_1CC09F8FC((uint64_t)(this + 12), v54, *a3 & 0xFFFFFFFFFFFFFFFBLL | v55);
  }
  else
  {
    long long v47 = (void *)((char *)a5 + 40);
  }
  unint64_t v56 = llvm::MemoryDependenceResults::getPointerDependencyFrom(this, (uint64_t)a3, a4, v47, a5, a2, 0, a8);
  unint64_t v43 = v56;
  if (v31) {
    return v43;
  }
  v39[1] = (llvm::BasicBlock *)v56;
LABEL_70:
  if ((v43 & 7) - 1 > 1) {
    return v43;
  }
  unint64_t v58 = 0;
  if ((v43 & 7) != 3) {
    unint64_t v58 = v43 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v83 = (llvm::LoadInst *)v58;
  uint64_t v59 = 4;
  if (!a4) {
    uint64_t v59 = 0;
  }
  unint64_t v60 = *a3 & 0xFFFFFFFFFFFFFFFBLL | v59;
  sub_1CC0A3A48((uint64_t)(this + 12), (uint64_t *)&v83);
  uint64_t v62 = v61;
  uint64_t v64 = *(void *)(v61 + 8);
  long long v63 = (llvm::SmallPtrSetImplBase *)(v61 + 8);
  uint64_t v65 = *(void *)(v62 + 16);
  uint64_t v66 = *(unsigned int *)(v62 + 28);
  if (v65 != v64)
  {
    unsigned int v70 = *(_DWORD *)(v62 + 24);
    goto LABEL_86;
  }
  if (!v66)
  {
LABEL_83:
    unsigned int v70 = *(_DWORD *)(v62 + 24);
    if (v66 < v70)
    {
      *(_DWORD *)(v62 + 28) = v66 + 1;
      *(void *)(v65 + 8 * v66) = v60;
      return v43;
    }
LABEL_86:
    if (3 * v70 <= 4 * ((int)v66 - *(_DWORD *)(v62 + 32)))
    {
      if (v70 >= 0x40) {
        v70 *= 2;
      }
      else {
        unsigned int v70 = 128;
      }
    }
    else if (v70 - v66 >= v70 >> 3)
    {
      goto LABEL_88;
    }
    llvm::SmallPtrSetImplBase::Grow(v63, v70);
    unsigned int v70 = *(_DWORD *)(v62 + 24);
    uint64_t v65 = *(void *)(v62 + 16);
LABEL_88:
    unsigned int v71 = v70 - 1;
    unsigned int v72 = (v70 - 1) & ((v60 >> 4) ^ (v60 >> 9));
    char v73 = (unint64_t *)(v65 + 8 * v72);
    unint64_t v74 = *v73;
    if (*v73 == -1)
    {
      char v75 = 0;
LABEL_101:
      if (v75) {
        uint64_t v79 = v75;
      }
      else {
        uint64_t v79 = v73;
      }
      if (*v79 != v60)
      {
        if (*v79 == -2) {
          --*(_DWORD *)(v62 + 32);
        }
        else {
          ++*(_DWORD *)(v62 + 28);
        }
        *uint64_t v79 = v60;
      }
    }
    else
    {
      char v75 = 0;
      int v76 = 1;
      while (v74 != v60)
      {
        if (v75) {
          BOOL v77 = 0;
        }
        else {
          BOOL v77 = v74 == -2;
        }
        if (v77) {
          char v75 = v73;
        }
        unsigned int v78 = v72 + v76++;
        unsigned int v72 = v78 & v71;
        char v73 = (unint64_t *)(v65 + 8 * (v78 & v71));
        unint64_t v74 = *v73;
        if (*v73 == -1) {
          goto LABEL_101;
        }
      }
    }
    return v43;
  }
  int v67 = 0;
  uint64_t v68 = 8 * v66;
  uint64_t v69 = *(unint64_t **)(v62 + 16);
  while (*v69 != v60)
  {
    if (*v69 == -2) {
      int v67 = v69;
    }
    ++v69;
    v68 -= 8;
    if (!v68)
    {
      if (!v67) {
        goto LABEL_83;
      }
      *int v67 = v60;
      --*(_DWORD *)(v62 + 32);
      return v43;
    }
  }
  return v43;
}

int32x2_t sub_1CC09F8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = 0;
  if (sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v24)) {
    uint64_t v6 = v24;
  }
  else {
    uint64_t v6 = *(void *)a1 + 72 * *(unsigned int *)(a1 + 16);
  }
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 28);
    long long v10 = (void *)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v9;
      while (*(void *)(v7 + v11) != a3)
      {
        v11 += 8;
        if (v12 == v11) {
          goto LABEL_22;
        }
      }
      long long v10 = (void *)(v7 + v11);
    }
LABEL_22:
    uint64_t v8 = *(void *)(v6 + 16);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(v6 + 24);
    int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    long long v10 = (void *)(v7 + 8 * v15);
    uint64_t v16 = *v10;
    if (*v10 == -1)
    {
      int v17 = 0;
LABEL_34:
      if (v17) {
        long long v10 = v17;
      }
      if (*v10 != a3) {
        long long v10 = (void *)(v7 + 8 * v13);
      }
    }
    else
    {
      int v17 = 0;
      int v18 = 1;
      while (v16 != a3)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v16 == -2;
        }
        if (v19) {
          int v17 = v10;
        }
        unsigned int v20 = v15 + v18++;
        unsigned int v15 = v20 & v14;
        long long v10 = (void *)(v7 + 8 * (v20 & v14));
        uint64_t v16 = *v10;
        if (*v10 == -1) {
          goto LABEL_34;
        }
      }
    }
  }
  BOOL v19 = v7 == v8;
  uint64_t v21 = 24;
  if (v19) {
    uint64_t v21 = 28;
  }
  if (v10 == (void *)(v7 + 8 * *(unsigned int *)(v6 + v21)))
  {
    int v22 = *(_DWORD *)(v6 + 32);
  }
  else
  {
    *long long v10 = -2;
    int v22 = *(_DWORD *)(v6 + 32) + 1;
    *(_DWORD *)(v6 + 32) = v22;
  }
  if (*(_DWORD *)(v6 + 28) == v22)
  {
    int v23 = *(void **)(v6 + 16);
    if (v23 != *(void **)(v6 + 8)) {
      free(v23);
    }
    *(void *)uint64_t v6 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void sub_1CC09FAA0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(char **)a1;
  int v4 = *(long long **)(a1 + 8);
  uint64_t v5 = (uint64_t)v4 - *(void *)a1;
  uint64_t v6 = (v5 >> 4) - a2;
  switch(v6)
  {
    case 0:
      return;
    case 1:
      goto LABEL_11;
    case 2:
      __n128 v22 = (__n128)*(v4 - 1);
      *(void *)(a1 + 8) = v4 - 1;
      uint64_t v8 = (char *)(v4 - 2) - v3;
      if (v8)
      {
        unint64_t v9 = v8 >> 4;
        do
        {
          unint64_t v10 = v9 >> 1;
          uint64_t v11 = (unint64_t *)&v3[16 * (v9 >> 1)];
          unint64_t v13 = *v11;
          uint64_t v12 = (char *)(v11 + 2);
          v9 += ~(v9 >> 1);
          if (v22.n128_u64[0] < v13) {
            unint64_t v9 = v10;
          }
          else {
            uint64_t v3 = v12;
          }
        }
        while (v9);
      }
      sub_1CC0A1C90((char **)a1, (uint64_t)v3, &v22);
      uint64_t v3 = *(char **)a1;
      int v4 = *(long long **)(a1 + 8);
      uint64_t v5 = (uint64_t)v4 - *(void *)a1;
LABEL_11:
      if (v5 != 16)
      {
        __n128 v22 = (__n128)*(v4 - 1);
        *(void *)(a1 + 8) = v4 - 1;
        if (v4 - 1 != (long long *)v3)
        {
          unint64_t v14 = ((char *)(v4 - 1) - v3) >> 4;
          do
          {
            unint64_t v15 = v14 >> 1;
            uint64_t v16 = (unint64_t *)&v3[16 * (v14 >> 1)];
            unint64_t v18 = *v16;
            int v17 = (char *)(v16 + 2);
            v14 += ~(v14 >> 1);
            if (v22.n128_u64[0] < v18) {
              unint64_t v14 = v15;
            }
            else {
              uint64_t v3 = v17;
            }
          }
          while (v14);
        }
        sub_1CC0A1C90((char **)a1, (uint64_t)v3, &v22);
      }
      return;
  }
  unint64_t v19 = 126 - 2 * __clz(v5 >> 4);
  if (v4 == (long long *)v3) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t v21 = *(char **)a1;

  sub_1CC0A2CCC((uint64_t)v21, v4, v20, 1);
}

void sub_1CC09FBF0(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_1CC0A4074(a1, a2, 1);
  int v4 = (void *)(*(void *)a1 + 88 * *(unsigned int *)(a1 + 8));
  *int v4 = *(void *)v3;
  uint64_t v5 = v4 + 7;
  long long v6 = *(_OWORD *)(v3 + 8);
  long long v7 = *(_OWORD *)(v3 + 24);
  v4[5] = v4 + 7;
  uint64_t v8 = v4 + 5;
  *((_OWORD *)v8 - 2) = v6;
  *((_OWORD *)v8 - 1) = v7;
  v8[1] = 0x400000000;
  unsigned int v9 = *(_DWORD *)(v3 + 48);
  if (v9) {
    BOOL v10 = v8 == (void *)(v3 + 40);
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = *(const void **)(v3 + 40);
    unint64_t v12 = v3 + 56;
    if (v11 == (const void *)(v3 + 56))
    {
      if (v9 >= 5)
      {
        *((_DWORD *)v8 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v5, v11, 8 * *(unsigned int *)(v3 + 48));
      *((_DWORD *)v8 + 2) = v9;
    }
    else
    {
      if (v5 != v8 + 2)
      {
        free(v5);
        unint64_t v12 = v3 + 56;
        uint64_t v11 = *(const void **)(v3 + 40);
        unsigned int v9 = *(_DWORD *)(v3 + 48);
      }
      *uint64_t v8 = v11;
      int v13 = *(_DWORD *)(v3 + 52);
      *((_DWORD *)v8 + 2) = v9;
      *((_DWORD *)v8 + 3) = v13;
      *(void *)(v3 + 40) = v12;
      *(_DWORD *)(v3 + 52) = 0;
    }
    *(_DWORD *)(v3 + 48) = 0;
  }
  ++*(_DWORD *)(a1 + 8);
}

void llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies(uint64_t a1, unint64_t a2)
{
  if (!*(_DWORD *)(a1 + 32)) {
    goto LABEL_9;
  }
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = 0;
  int v5 = sub_1CC0A2428(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), a2 & 0xFFFFFFFFFFFFFFF8, &v45);
  long long v6 = v45;
  if (v5) {
    BOOL v7 = v45 == (void *)(*(void *)(a1 + 24) + 32 * *(unsigned int *)(a1 + 40));
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v15 = 0;
  if ((v45[2] & 7) != 3) {
    unint64_t v15 = v45[2] & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = 0;
  if (sub_1CD4A8B14(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), v15, &v45)) {
    uint64_t v16 = (uint64_t)v45;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 48) + 72 * *(unsigned int *)(a1 + 64);
  }
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17 == v18)
  {
    uint64_t v19 = *(unsigned int *)(v16 + 28);
    uint64_t v20 = (void *)(v17 + 8 * v19);
    if (v19)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 8 * v19;
      while (*(void *)(v17 + v21) != v4)
      {
        v21 += 8;
        if (v22 == v21) {
          goto LABEL_57;
        }
      }
      uint64_t v20 = (void *)(v17 + v21);
    }
LABEL_57:
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v30 = *(unsigned int *)(v16 + 24);
    int v31 = v30 - 1;
    unsigned int v32 = (v30 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v20 = (void *)(v17 + 8 * v32);
    uint64_t v33 = *v20;
    if (*v20 == -1)
    {
      uint64_t v34 = 0;
LABEL_83:
      if (v34) {
        uint64_t v20 = v34;
      }
      if (*v20 != v4) {
        uint64_t v20 = (void *)(v17 + 8 * v30);
      }
    }
    else
    {
      uint64_t v34 = 0;
      int v35 = 1;
      while (v33 != v4)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v33 == -2;
        }
        if (v36) {
          uint64_t v34 = v20;
        }
        unsigned int v37 = v32 + v35++;
        unsigned int v32 = v37 & v31;
        uint64_t v20 = (void *)(v17 + 8 * (v37 & v31));
        uint64_t v33 = *v20;
        if (*v20 == -1) {
          goto LABEL_83;
        }
      }
    }
  }
  BOOL v7 = v17 == v18;
  uint64_t v38 = 24;
  if (v7) {
    uint64_t v38 = 28;
  }
  if (v20 == (void *)(v17 + 8 * *(unsigned int *)(v16 + v38)))
  {
    int v39 = *(_DWORD *)(v16 + 32);
  }
  else
  {
    *uint64_t v20 = -2;
    int v39 = *(_DWORD *)(v16 + 32) + 1;
    *(_DWORD *)(v16 + 32) = v39;
  }
  if (*(_DWORD *)(v16 + 28) == v39)
  {
    unint64_t v40 = *(void **)(v16 + 16);
    if (v40 != *(void **)(v16 + 8)) {
      free(v40);
    }
    *(void *)uint64_t v16 = -8192;
    *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
  }
  *long long v6 = -8192;
  *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
  if (v4)
  {
LABEL_8:
    if (*(unsigned __int8 *)(v4 + 16) >= 0x1Cu)
    {
      uint64_t v45 = 0;
      if (sub_1CD4A8B14(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), a2 & 0xFFFFFFFFFFFFFFF8, &v45))
      {
        int v23 = v45;
        if (v45 != (void *)(*(void *)(a1 + 48) + 72 * *(unsigned int *)(a1 + 64)))
        {
          BOOL v25 = (char *)v45[1];
          uint64_t v24 = (char *)v45[2];
          uint64_t v26 = 24;
          if (v24 == v25) {
            uint64_t v26 = 28;
          }
          uint64_t v27 = *(unsigned int *)((char *)v45 + v26);
          int v28 = (uint64_t *)v45[2];
          if (v27)
          {
            uint64_t v29 = 0;
            while (*(void *)&v24[v29] >= 0xFFFFFFFFFFFFFFFELL)
            {
              v29 += 8;
              if (8 * v27 == v29) {
                goto LABEL_79;
              }
            }
            int v28 = (uint64_t *)&v24[v29];
          }
          unint64_t v41 = &v24[8 * v27];
          if (v28 != (uint64_t *)v41)
          {
            uint64_t v42 = *v28;
LABEL_72:
            uint64_t v45 = 0;
            if (sub_1CC0A2428(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), v42, &v45))
            {
              *uint64_t v45 = -8192;
              *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
            }
            unint64_t v43 = (unint64_t *)(v28 + 1);
            while (v43 != (unint64_t *)v41)
            {
              unint64_t v44 = *v43++;
              uint64_t v42 = v44;
              if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                int v28 = (uint64_t *)(v43 - 1);
                goto LABEL_72;
              }
            }
            BOOL v25 = (char *)v23[1];
            uint64_t v24 = (char *)v23[2];
          }
LABEL_79:
          if (v24 != v25) {
            free(v24);
          }
          *int v23 = -8192;
          *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
  }
LABEL_9:
  uint64_t v45 = 0;
  int v8 = sub_1CC0A3B44(*(void *)(a1 + 72), *(_DWORD *)(a1 + 88), a2, &v45);
  unsigned int v9 = v45;
  if (v8) {
    BOOL v10 = v45 == (void *)(*(void *)(a1 + 72) + 80 * *(unsigned int *)(a1 + 88));
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = (void *)v45[2];
    unint64_t v12 = (void *)v45[3];
    if (v11 != v12)
    {
      do
      {
        unint64_t v13 = v11[1] & 0xFFFFFFFFFFFFFFF8;
        if ((v11[1] & 7uLL) <= 2 && v13 != 0) {
          sub_1CC09F8FC(a1 + 96, v13, a2);
        }
        v11 += 2;
      }
      while (v11 != v12);
      uint64_t v11 = (void *)v9[2];
    }
    if (v11)
    {
      v9[3] = v11;
      operator delete(v11);
    }
    *unsigned int v9 = -16;
    *(int32x2_t *)(a1 + 80) = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
  }
}

void llvm::MemoryDependenceResults::invalidateCachedPointerInfo(llvm::MemoryDependenceResults *this, llvm::Value *a2)
{
  if (*(unsigned char *)(*(void *)a2 + 8) == 15)
  {
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)this, (unint64_t)a2 & 0xFFFFFFFFFFFFFFFBLL);
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)this, (unint64_t)a2 | 4);
    unint64_t v4 = (llvm::PhiValues *)*((void *)this + 28);
    llvm::PhiValues::invalidateValue(v4, a2);
  }
}

_DWORD *llvm::MemoryDependenceResults::invalidateCachedPredecessors(llvm::MemoryDependenceResults *this)
{
  sub_1CC0A1F84((_DWORD *)this + 58);
  int32x2_t result = sub_1CC0A1FD4((_DWORD *)this + 64);
  uint64_t v3 = *((unsigned int *)this + 88);
  if (v3)
  {
    BOOL v10 = (uint64_t *)*((void *)this + 43);
    uint64_t v11 = 16 * v3;
    do
    {
      uint64_t v12 = *v10;
      v10 += 2;
      int32x2_t result = (_DWORD *)MEMORY[0x1D25D9CD0](v12, 8);
      v11 -= 16;
    }
    while (v11);
  }
  *((_DWORD *)this + 88) = 0;
  uint64_t v4 = *((unsigned int *)this + 76);
  if (v4)
  {
    *((void *)this + 45) = 0;
    int v5 = (void *)*((void *)this + 37);
    uint64_t v6 = *v5 + 4096;
    *((void *)this + 35) = *v5;
    *((void *)this + 36) = v6;
    if (v4 != 1)
    {
      BOOL v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        int32x2_t result = (_DWORD *)MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *((_DWORD *)this + 76) = 1;
  }
  return result;
}

void llvm::MemoryDependenceResults::removeInstruction(llvm::MemoryDependenceResults *this, llvm::Instruction *a2)
{
  uint64_t v3 = this;
  v185[16] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 15);
  int v177 = (char *)this + 120;
  unsigned int v5 = *((_DWORD *)this + 34);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    unsigned int v30 = (v5 - 1) & (v6 ^ (a2 >> 9));
    int v31 = (llvm::Instruction **)(v4 + 40 * v30);
    unsigned int v32 = *v31;
    if (*v31 == a2)
    {
LABEL_41:
      if (v31 != (llvm::Instruction **)(v4 + 40 * v5))
      {
        int v35 = v31[1];
        BOOL v36 = v31[2];
        if (v35 != v36)
        {
          do
          {
            unint64_t v37 = *((void *)v35 + 1) & 0xFFFFFFFFFFFFFFF8;
            if ((*((void *)v35 + 1) & 7uLL) <= 2 && v37 != 0) {
              sub_1CC09D560((uint64_t)v3 + 168, v37, (uint64_t)a2);
            }
            int v35 = (llvm::Instruction *)((char *)v35 + 16);
          }
          while (v35 != v36);
          int v35 = v31[1];
        }
        if (v35)
        {
          v31[2] = v35;
          operator delete(v35);
        }
        *int v31 = (llvm::Instruction *)-8192;
        *((int32x2_t *)v3 + 16) = vadd_s32(*(int32x2_t *)((char *)v3 + 128), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      int v33 = 1;
      while (v32 != (llvm::Instruction *)-4096)
      {
        unsigned int v34 = v30 + v33++;
        unsigned int v30 = v34 & (v5 - 1);
        int v31 = (llvm::Instruction **)(v4 + 40 * v30);
        unsigned int v32 = *v31;
        if (*v31 == a2) {
          goto LABEL_41;
        }
      }
    }
  }
  uint64_t v7 = *((unsigned int *)v3 + 4);
  if (v7)
  {
    uint64_t v8 = *(void *)v3;
    LODWORD(v9) = (v7 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v10 = *(void *)v3 + 16 * v9;
    uint64_t v11 = *(llvm::Instruction **)v10;
    if (*(llvm::Instruction **)v10 == a2)
    {
LABEL_8:
      if (v10 != v8 + 16 * v7)
      {
        unint64_t v14 = *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        BOOL v15 = (*(void *)(v10 + 8) & 7uLL) > 2 || v14 == 0;
        if (!v15) {
          sub_1CC09D560((uint64_t)v3 + 144, v14, (uint64_t)a2);
        }
        *(void *)uint64_t v10 = -8192;
        *((int32x2_t *)v3 + 1) = vadd_s32(*(int32x2_t *)((char *)v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      int v12 = 1;
      while (v11 != (llvm::Instruction *)-4096)
      {
        int v13 = v9 + v12++;
        uint64_t v9 = v13 & (v7 - 1);
        uint64_t v11 = *(llvm::Instruction **)(v8 + 16 * v9);
        if (v11 == a2)
        {
          uint64_t v10 = v8 + 16 * v9;
          goto LABEL_8;
        }
      }
    }
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 15)
  {
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)v3, (unint64_t)a2 & 0xFFFFFFFFFFFFFFFBLL);
    llvm::MemoryDependenceResults::removeCachedNonLocalPointerDependencies((uint64_t)v3, (unint64_t)a2 | 4);
  }
  else
  {
    unsigned int v183 = 0;
    int v16 = sub_1CC0A2428(*((void *)v3 + 3), *((_DWORD *)v3 + 10), (uint64_t)a2, &v183);
    uint64_t v17 = v183;
    if (v16) {
      BOOL v18 = v183 == (void *)(*((void *)v3 + 3) + 32 * *((unsigned int *)v3 + 10));
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      unint64_t v156 = 0;
      if ((*((void *)v183 + 2) & 7) != 3) {
        unint64_t v156 = *((void *)v183 + 2) & 0xFFFFFFFFFFFFFFF8;
      }
      unsigned int v183 = 0;
      int v157 = sub_1CD4A8B14(*((void *)v3 + 6), *((_DWORD *)v3 + 16), v156, &v183);
      uint64_t v158 = v183;
      if (!v157) {
        uint64_t v158 = (void *)(*((void *)v3 + 6) + 72 * *((unsigned int *)v3 + 16));
      }
      uint64_t v160 = v158[1];
      uint64_t v159 = v158[2];
      if (v159 == v160)
      {
        uint64_t v161 = *((unsigned int *)v158 + 7);
        uint64_t v162 = (llvm::Instruction **)(v159 + 8 * v161);
        if (v161)
        {
          uint64_t v163 = 0;
          uint64_t v164 = 8 * v161;
          while (*(llvm::Instruction **)(v159 + v163) != a2)
          {
            v163 += 8;
            if (v164 == v163) {
              goto LABEL_287;
            }
          }
          uint64_t v162 = (llvm::Instruction **)(v159 + v163);
        }
LABEL_287:
        uint64_t v160 = v158[2];
      }
      else
      {
        uint64_t v165 = *((unsigned int *)v158 + 6);
        int v166 = v165 - 1;
        unsigned int v167 = (v165 - 1) & (v6 ^ (a2 >> 9));
        uint64_t v162 = (llvm::Instruction **)(v159 + 8 * v167);
        uint64_t v168 = *v162;
        if (*v162 == (llvm::Instruction *)-1)
        {
          int v169 = 0;
LABEL_294:
          if (v169) {
            uint64_t v162 = v169;
          }
          if (*v162 != a2) {
            uint64_t v162 = (llvm::Instruction **)(v159 + 8 * v165);
          }
        }
        else
        {
          int v169 = 0;
          int v170 = 1;
          while (v168 != a2)
          {
            if (v169) {
              BOOL v171 = 0;
            }
            else {
              BOOL v171 = v168 == (llvm::Instruction *)-2;
            }
            if (v171) {
              int v169 = v162;
            }
            unsigned int v172 = v167 + v170++;
            unsigned int v167 = v172 & v166;
            uint64_t v162 = (llvm::Instruction **)(v159 + 8 * (v172 & v166));
            uint64_t v168 = *v162;
            if (*v162 == (llvm::Instruction *)-1) {
              goto LABEL_294;
            }
          }
        }
      }
      BOOL v15 = v159 == v160;
      uint64_t v173 = 24;
      if (v15) {
        uint64_t v173 = 28;
      }
      if (v162 != (llvm::Instruction **)(v159 + 8 * *(unsigned int *)((char *)v158 + v173)))
      {
        *uint64_t v162 = (llvm::Instruction *)-2;
        ++*((_DWORD *)v158 + 8);
      }
      *uint64_t v17 = -8192;
      *((int32x2_t *)v3 + 4) = vadd_s32(*(int32x2_t *)((char *)v3 + 32), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  unsigned int v183 = v185;
  uint64_t v184 = 0x800000000;
  if (*((unsigned __int8 *)a2 + 16) - 29 >= 0xB)
  {
    uint64_t v19 = *((void *)a2 + 4);
    if (v19) {
      uint64_t v20 = v19 - 24;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v178 = v20;
  }
  else
  {
    uint64_t v178 = 0;
  }
  uint64_t v22 = (uint64_t)v3 + 144;
  uint64_t v21 = *((void *)v3 + 18);
  uint64_t v180 = 0;
  if (sub_1CC0A42D0(v21, *((_DWORD *)v3 + 40), (uint64_t)a2, &v180))
  {
    int v23 = v180;
    if (v180 != (void *)(*((void *)v3 + 18) + 72 * *((unsigned int *)v3 + 40)))
    {
      BOOL v25 = (char *)*((void *)v180 + 1);
      uint64_t v24 = (char *)*((void *)v180 + 2);
      uint64_t v26 = 24;
      if (v24 == v25) {
        uint64_t v26 = 28;
      }
      uint64_t v27 = *(unsigned int *)((char *)v180 + v26);
      int v28 = (void **)*((void *)v180 + 2);
      if (v27)
      {
        uint64_t v29 = 0;
        while (*(void *)&v24[v29] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v29 += 8;
          if (8 * v27 == v29) {
            goto LABEL_64;
          }
        }
        int v28 = (void **)&v24[v29];
      }
      int v39 = &v24[8 * v27];
      if (v28 != (void **)v39)
      {
LABEL_55:
        uint64_t v180 = 0;
        unint64_t v40 = *v28;
        uint64_t v180 = *v28;
        unint64_t v41 = v3;
        sub_1CC0A24BC((uint64_t)v3, (uint64_t *)&v180)[1] = v178;
        unint64_t v42 = 0;
        if ((v178 & 7) != 3) {
          unint64_t v42 = v178 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v184 >= (unint64_t)HIDWORD(v184)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v43 = (unint64_t *)((char *)v183 + 16 * v184);
        *unint64_t v43 = v42;
        v43[1] = (unint64_t)v40;
        LODWORD(v184) = v184 + 1;
        unint64_t v44 = (unint64_t *)(v28 + 1);
        uint64_t v3 = v41;
        while (v44 != (unint64_t *)v39)
        {
          unint64_t v45 = *v44++;
          if (v45 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            int v28 = (void **)(v44 - 1);
            goto LABEL_55;
          }
        }
        BOOL v25 = (char *)v23[1];
        uint64_t v24 = (char *)v23[2];
      }
LABEL_64:
      if (v24 != v25) {
        free(v24);
      }
      *int v23 = -8192;
      *((int32x2_t *)v3 + 19) = vadd_s32(*(int32x2_t *)((char *)v3 + 152), (int32x2_t)0x1FFFFFFFFLL);
      unsigned int v46 = v184;
      if (v184)
      {
        while (1)
        {
          sub_1CC0A26E4(v22, (uint64_t *)v183 + 2 * v46 - 2);
          uint64_t v48 = v47;
          uint64_t v50 = *(void *)(v47 + 8);
          uint64_t v49 = (llvm::SmallPtrSetImplBase *)(v47 + 8);
          uint64_t v51 = *((void *)v183 + 2 * v184 - 1);
          uint64_t v52 = *(void *)(v48 + 16);
          uint64_t v53 = *(unsigned int *)(v48 + 28);
          if (v52 != v50) {
            break;
          }
          if (v53)
          {
            unint64_t v54 = 0;
            uint64_t v55 = 8 * v53;
            unint64_t v56 = *(void **)(v48 + 16);
            while (*v56 != v51)
            {
              if (*v56 == -2) {
                unint64_t v54 = v56;
              }
              ++v56;
              v55 -= 8;
              if (!v55)
              {
                if (!v54) {
                  goto LABEL_75;
                }
                void *v54 = v51;
                --*(_DWORD *)(v48 + 32);
                goto LABEL_99;
              }
            }
            goto LABEL_99;
          }
LABEL_75:
          unsigned int v57 = *(_DWORD *)(v48 + 24);
          if (v53 >= v57) {
            goto LABEL_78;
          }
          *(_DWORD *)(v48 + 28) = v53 + 1;
          *(void *)(v52 + 8 * v53) = v51;
LABEL_99:
          unsigned int v46 = v184 - 1;
          LODWORD(v184) = v184 - 1;
          if (!v184) {
            goto LABEL_107;
          }
        }
        unsigned int v57 = *(_DWORD *)(v48 + 24);
LABEL_78:
        if (3 * v57 <= 4 * ((int)v53 - *(_DWORD *)(v48 + 32)))
        {
          if (v57 >= 0x40) {
            v57 *= 2;
          }
          else {
            unsigned int v57 = 128;
          }
        }
        else if (v57 - v53 >= v57 >> 3)
        {
          goto LABEL_80;
        }
        llvm::SmallPtrSetImplBase::Grow(v49, v57);
        unsigned int v57 = *(_DWORD *)(v48 + 24);
        uint64_t v52 = *(void *)(v48 + 16);
LABEL_80:
        unsigned int v58 = v57 - 1;
        unsigned int v59 = (v57 - 1) & ((v51 >> 4) ^ (v51 >> 9));
        unint64_t v60 = (void *)(v52 + 8 * v59);
        uint64_t v61 = *v60;
        if (*v60 == -1)
        {
          uint64_t v62 = 0;
LABEL_92:
          if (v62) {
            uint64_t v66 = v62;
          }
          else {
            uint64_t v66 = v60;
          }
          if (*v66 != v51)
          {
            if (*v66 == -2) {
              --*(_DWORD *)(v48 + 32);
            }
            else {
              ++*(_DWORD *)(v48 + 28);
            }
            *uint64_t v66 = v51;
          }
        }
        else
        {
          uint64_t v62 = 0;
          int v63 = 1;
          while (v61 != v51)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v61 == -2;
            }
            if (v64) {
              uint64_t v62 = v60;
            }
            unsigned int v65 = v59 + v63++;
            unsigned int v59 = v65 & v58;
            unint64_t v60 = (void *)(v52 + 8 * (v65 & v58));
            uint64_t v61 = *v60;
            if (*v60 == -1) {
              goto LABEL_92;
            }
          }
        }
        goto LABEL_99;
      }
    }
  }
LABEL_107:
  uint64_t v68 = (uint64_t)v3 + 168;
  uint64_t v67 = *((void *)v3 + 21);
  uint64_t v180 = 0;
  int v69 = sub_1CC0A42D0(v67, *((_DWORD *)v3 + 46), (uint64_t)a2, &v180);
  unsigned int v70 = v180;
  if (v69) {
    BOOL v71 = v180 == (void *)(*((void *)v3 + 21) + 72 * *((unsigned int *)v3 + 46));
  }
  else {
    BOOL v71 = 1;
  }
  if (!v71)
  {
    char v73 = (char *)*((void *)v180 + 1);
    unsigned int v72 = (char *)*((void *)v180 + 2);
    uint64_t v74 = 24;
    if (v72 == v73) {
      uint64_t v74 = 28;
    }
    uint64_t v75 = *(unsigned int *)((char *)v180 + v74);
    int v76 = (void **)*((void *)v180 + 2);
    if (v75)
    {
      uint64_t v77 = 0;
      while (*(void *)&v72[v77] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v77 += 8;
        if (8 * v75 == v77) {
          goto LABEL_138;
        }
      }
      int v76 = (void **)&v72[v77];
    }
    unsigned int v78 = &v72[8 * v75];
    if (v76 != (void **)v78)
    {
      uint64_t v175 = v3;
      BOOL v79 = (v178 & 0xFFFFFFFFFFFFFFF8) == 0 || (v178 & 7u) > 2uLL;
LABEL_123:
      uint64_t v180 = 0;
      uint64_t v80 = *v76;
      uint64_t v180 = *v76;
      uint64_t v81 = sub_1CD4A8E84((uint64_t)v177, (uint64_t *)&v180);
      *((unsigned char *)v81 + 32) = 1;
      uint64_t v82 = v81[1];
      for (uint64_t i = v81[2]; v82 != i; v82 += 16)
      {
        uint64_t v84 = 0;
        if ((*(void *)(v82 + 8) & 7) != 3) {
          uint64_t v84 = (llvm::Instruction *)(*(void *)(v82 + 8) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v84 == a2)
        {
          *(void *)(v82 + 8) = v178;
          if (!v79)
          {
            if (v184 >= (unint64_t)HIDWORD(v184)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v85 = (unint64_t *)((char *)v183 + 16 * v184);
            *uint64_t v85 = v178 & 0xFFFFFFFFFFFFFFF8;
            v85[1] = (unint64_t)v80;
            LODWORD(v184) = v184 + 1;
          }
        }
      }
      int v86 = (unint64_t *)(v76 + 1);
      while (v86 != (unint64_t *)v78)
      {
        unint64_t v87 = *v86++;
        if (v87 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v76 = (void **)(v86 - 1);
          goto LABEL_123;
        }
      }
      char v73 = (char *)v70[1];
      unsigned int v72 = (char *)v70[2];
      uint64_t v3 = v175;
    }
LABEL_138:
    if (v72 != v73) {
      free(v72);
    }
    *unsigned int v70 = -8192;
    *((int32x2_t *)v3 + 22) = vadd_s32(*(int32x2_t *)((char *)v3 + 176), (int32x2_t)0x1FFFFFFFFLL);
    unsigned int v88 = v184;
    if (v184)
    {
      while (1)
      {
        sub_1CC0A26E4(v68, (uint64_t *)v183 + 2 * v88 - 2);
        uint64_t v90 = v89;
        uint64_t v92 = *(void *)(v89 + 8);
        uint64_t v91 = (llvm::SmallPtrSetImplBase *)(v89 + 8);
        uint64_t v93 = *((void *)v183 + 2 * v184 - 1);
        uint64_t v94 = *(void *)(v90 + 16);
        uint64_t v95 = *(unsigned int *)(v90 + 28);
        if (v94 != v92) {
          break;
        }
        if (v95)
        {
          int v96 = 0;
          uint64_t v97 = 8 * v95;
          uint64_t v98 = *(void **)(v90 + 16);
          while (*v98 != v93)
          {
            if (*v98 == -2) {
              int v96 = v98;
            }
            ++v98;
            v97 -= 8;
            if (!v97)
            {
              if (!v96) {
                goto LABEL_149;
              }
              *int v96 = v93;
              --*(_DWORD *)(v90 + 32);
              goto LABEL_173;
            }
          }
          goto LABEL_173;
        }
LABEL_149:
        unsigned int v99 = *(_DWORD *)(v90 + 24);
        if (v95 >= v99) {
          goto LABEL_152;
        }
        *(_DWORD *)(v90 + 28) = v95 + 1;
        *(void *)(v94 + 8 * v95) = v93;
LABEL_173:
        unsigned int v88 = v184 - 1;
        LODWORD(v184) = v184 - 1;
        if (!v184) {
          goto LABEL_181;
        }
      }
      unsigned int v99 = *(_DWORD *)(v90 + 24);
LABEL_152:
      if (3 * v99 <= 4 * ((int)v95 - *(_DWORD *)(v90 + 32)))
      {
        if (v99 >= 0x40) {
          v99 *= 2;
        }
        else {
          unsigned int v99 = 128;
        }
      }
      else if (v99 - v95 >= v99 >> 3)
      {
        goto LABEL_154;
      }
      llvm::SmallPtrSetImplBase::Grow(v91, v99);
      unsigned int v99 = *(_DWORD *)(v90 + 24);
      uint64_t v94 = *(void *)(v90 + 16);
LABEL_154:
      unsigned int v100 = v99 - 1;
      unsigned int v101 = (v99 - 1) & ((v93 >> 4) ^ (v93 >> 9));
      int32x2_t v102 = (void *)(v94 + 8 * v101);
      uint64_t v103 = *v102;
      if (*v102 == -1)
      {
        uint64_t v104 = 0;
LABEL_166:
        if (v104) {
          int v108 = v104;
        }
        else {
          int v108 = v102;
        }
        if (*v108 != v93)
        {
          if (*v108 == -2) {
            --*(_DWORD *)(v90 + 32);
          }
          else {
            ++*(_DWORD *)(v90 + 28);
          }
          *int v108 = v93;
        }
      }
      else
      {
        uint64_t v104 = 0;
        int v105 = 1;
        while (v103 != v93)
        {
          if (v104) {
            BOOL v106 = 0;
          }
          else {
            BOOL v106 = v103 == -2;
          }
          if (v106) {
            uint64_t v104 = v102;
          }
          unsigned int v107 = v101 + v105++;
          unsigned int v101 = v107 & v100;
          int32x2_t v102 = (void *)(v94 + 8 * (v107 & v100));
          uint64_t v103 = *v102;
          if (*v102 == -1) {
            goto LABEL_166;
          }
        }
      }
      goto LABEL_173;
    }
  }
LABEL_181:
  uint64_t v110 = (uint64_t)v3 + 96;
  uint64_t v109 = *((void *)v3 + 12);
  uint64_t v180 = 0;
  int v111 = sub_1CC0A27DC(v109, *((_DWORD *)v3 + 28), (uint64_t)a2, &v180);
  int v112 = v180;
  if (v111) {
    BOOL v113 = v180 == (void *)(*((void *)v3 + 12) + 72 * *((unsigned int *)v3 + 28));
  }
  else {
    BOOL v113 = 1;
  }
  if (!v113)
  {
    uint64_t v180 = v182;
    uint64_t v181 = 0x800000000;
    uint64_t v115 = (char *)v112[1];
    uint64_t v114 = (char *)v112[2];
    uint64_t v116 = 24;
    if (v114 == v115) {
      uint64_t v116 = 28;
    }
    uint64_t v117 = *(unsigned int *)((char *)v112 + v116);
    int v118 = (unint64_t *)v112[2];
    if (v117)
    {
      uint64_t v119 = 0;
      while (*(void *)&v114[v119] >= 0xFFFFFFFFFFFFFFFELL)
      {
        v119 += 8;
        if (8 * v117 == v119) {
          goto LABEL_216;
        }
      }
      int v118 = (unint64_t *)&v114[v119];
    }
    long long v120 = (unint64_t *)&v114[8 * v117];
    if (v118 != v120)
    {
      uint64_t v121 = (uint64_t)v3 + 72;
      uint64_t v176 = v3;
      BOOL v122 = (v178 & 0xFFFFFFFFFFFFFFF8) == 0 || (v178 & 7u) > 2uLL;
      unint64_t v123 = *v118;
      uint64_t v174 = v121;
LABEL_198:
      unint64_t v179 = v123;
      uint64_t v124 = sub_1CC0A424C(v121, &v179);
      sub_1CC0A424C(v121, &v179)[1] = 0;
      uint64_t v126 = v124[2];
      uint64_t v125 = v124[3];
      uint64_t v127 = v126;
      if (v126 != v125)
      {
        do
        {
          uint64_t v128 = 0;
          if ((*(void *)(v126 + 8) & 7) != 3) {
            uint64_t v128 = (llvm::Instruction *)(*(void *)(v126 + 8) & 0xFFFFFFFFFFFFFFF8);
          }
          if (v128 == a2)
          {
            *(void *)(v126 + 8) = v178;
            if (!v122)
            {
              if (v181 >= (unint64_t)HIDWORD(v181)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v129 = (unint64_t *)((char *)v180 + 16 * v181);
              *uint64_t v129 = v178 & 0xFFFFFFFFFFFFFFF8;
              v129[1] = v123;
              LODWORD(v181) = v181 + 1;
            }
          }
          v126 += 16;
        }
        while (v126 != v125);
        uint64_t v127 = v124[2];
        uint64_t v126 = v124[3];
      }
      unint64_t v130 = 126 - 2 * __clz((v126 - v127) >> 4);
      if (v126 == v127) {
        uint64_t v131 = 0;
      }
      else {
        uint64_t v131 = v130;
      }
      sub_1CC0A2CCC(v127, (long long *)v126, v131, 1);
      int v132 = v118 + 1;
      uint64_t v121 = v174;
      while (v132 != v120)
      {
        unint64_t v133 = *v132++;
        unint64_t v123 = v133;
        if (v133 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v118 = v132 - 1;
          goto LABEL_198;
        }
      }
      uint64_t v115 = (char *)v112[1];
      uint64_t v114 = (char *)v112[2];
      uint64_t v3 = v176;
    }
LABEL_216:
    if (v114 != v115) {
      free(v114);
    }
    *int v112 = -8192;
    int v134 = v3;
    *((int32x2_t *)v3 + 13) = vadd_s32(*(int32x2_t *)((char *)v3 + 104), (int32x2_t)0x1FFFFFFFFLL);
    unsigned int v135 = v181;
    if (v181)
    {
      while (1)
      {
        sub_1CC0A3A48(v110, (uint64_t *)v180 + 2 * v135 - 2);
        uint64_t v137 = v136;
        uint64_t v139 = *(void *)(v136 + 8);
        long long v138 = (llvm::SmallPtrSetImplBase *)(v136 + 8);
        uint64_t v140 = *((void *)v180 + 2 * v181 - 1);
        uint64_t v141 = *(void *)(v137 + 16);
        uint64_t v142 = *(unsigned int *)(v137 + 28);
        if (v141 != v139) {
          break;
        }
        if (v142)
        {
          uint64_t v143 = 0;
          uint64_t v144 = 8 * v142;
          unint64_t v145 = *(void **)(v137 + 16);
          while (*v145 != v140)
          {
            if (*v145 == -2) {
              uint64_t v143 = v145;
            }
            ++v145;
            v144 -= 8;
            if (!v144)
            {
              if (!v143) {
                goto LABEL_227;
              }
              void *v143 = v140;
              --*(_DWORD *)(v137 + 32);
              goto LABEL_251;
            }
          }
          goto LABEL_251;
        }
LABEL_227:
        unsigned int v146 = *(_DWORD *)(v137 + 24);
        if (v142 >= v146) {
          goto LABEL_230;
        }
        *(_DWORD *)(v137 + 28) = v142 + 1;
        *(void *)(v141 + 8 * v142) = v140;
LABEL_251:
        unsigned int v135 = v181 - 1;
        LODWORD(v181) = v181 - 1;
        if (!v181) {
          goto LABEL_259;
        }
      }
      unsigned int v146 = *(_DWORD *)(v137 + 24);
LABEL_230:
      if (3 * v146 <= 4 * ((int)v142 - *(_DWORD *)(v137 + 32)))
      {
        if (v146 >= 0x40) {
          v146 *= 2;
        }
        else {
          unsigned int v146 = 128;
        }
      }
      else if (v146 - v142 >= v146 >> 3)
      {
        goto LABEL_232;
      }
      llvm::SmallPtrSetImplBase::Grow(v138, v146);
      unsigned int v146 = *(_DWORD *)(v137 + 24);
      uint64_t v141 = *(void *)(v137 + 16);
LABEL_232:
      unsigned int v147 = v146 - 1;
      unsigned int v148 = (v146 - 1) & ((v140 >> 4) ^ (v140 >> 9));
      uint64_t v149 = (void *)(v141 + 8 * v148);
      uint64_t v150 = *v149;
      if (*v149 == -1)
      {
        uint64_t v151 = 0;
LABEL_244:
        if (v151) {
          uint64_t v155 = v151;
        }
        else {
          uint64_t v155 = v149;
        }
        if (*v155 != v140)
        {
          if (*v155 == -2) {
            --*(_DWORD *)(v137 + 32);
          }
          else {
            ++*(_DWORD *)(v137 + 28);
          }
          *uint64_t v155 = v140;
        }
      }
      else
      {
        uint64_t v151 = 0;
        int v152 = 1;
        while (v150 != v140)
        {
          if (v151) {
            BOOL v153 = 0;
          }
          else {
            BOOL v153 = v150 == -2;
          }
          if (v153) {
            uint64_t v151 = v149;
          }
          unsigned int v154 = v148 + v152++;
          unsigned int v148 = v154 & v147;
          uint64_t v149 = (void *)(v141 + 8 * (v154 & v147));
          uint64_t v150 = *v149;
          if (*v149 == -1) {
            goto LABEL_244;
          }
        }
      }
      goto LABEL_251;
    }
LABEL_259:
    if (v180 != v182) {
      free(v180);
    }
    uint64_t v3 = v134;
  }
  llvm::PhiValues::invalidateValue(*((llvm::PhiValues **)v3 + 28), a2);
  if (v183 != v185) {
    free(v183);
  }
}

_DWORD *llvm::MemoryDependenceAnalysis::MemoryDependenceAnalysis(_DWORD *this)
{
  *this = dword_1EBD04530;
  return this;
}

{
  *this = dword_1EBD04530;
  return this;
}

void llvm::MemoryDependenceAnalysis::run()
{
}

void sub_1CC0A12A8(llvm *a1)
{
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializePhiValuesWrapperPassPass(a1, v3);
  operator new();
}

void llvm::MemoryDependenceWrapperPass::~MemoryDependenceWrapperPass(llvm::MemoryDependenceWrapperPass *this)
{
  *(void *)this = &unk_1F2605968;
  if (*((unsigned char *)this + 440))
  {
    sub_1CC0A20B8((uint64_t)this + 32);
    *((unsigned char *)this + 440) = 0;
  }

  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2605968;
  if (*((unsigned char *)this + 440))
  {
    sub_1CC0A20B8((uint64_t)this + 32);
    *((unsigned char *)this + 440) = 0;
  }

  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F2605968;
  if (*((unsigned char *)this + 440))
  {
    sub_1CC0A20B8((uint64_t)this + 32);
    *((unsigned char *)this + 440) = 0;
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::MemoryDependenceResults::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v22[0] = (void **)a3;
  v22[1] = (void **)&llvm::MemoryDependenceAnalysis::Key;
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t v7 = *(void *)(a3 + 56);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(a3 + 68);
    uint64_t v10 = (void **)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(_UNKNOWN **)(v7 + v11) != &llvm::MemoryDependenceAnalysis::Key)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_6;
        }
      }
      uint64_t v10 = (void **)(v7 + v11);
    }
LABEL_6:
    uint64_t v8 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v14 = *(unsigned int *)(a3 + 64);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((&llvm::MemoryDependenceAnalysis::Key >> 4) ^ (&llvm::MemoryDependenceAnalysis::Key >> 9));
    uint64_t v10 = (void **)(v7 + 8 * v16);
    uint64_t v17 = *v10;
    if (*v10 == (void *)-1)
    {
      BOOL v18 = 0;
LABEL_30:
      if (v18) {
        uint64_t v10 = v18;
      }
      if (*v10 != &llvm::MemoryDependenceAnalysis::Key)
      {
        LODWORD(v9) = *(_DWORD *)(a3 + 68);
        uint64_t v10 = (void **)(v7 + 8 * v14);
        goto LABEL_7;
      }
    }
    else
    {
      BOOL v18 = 0;
      int v19 = 1;
      while (v17 != &llvm::MemoryDependenceAnalysis::Key)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == (void *)-2;
        }
        if (v20) {
          BOOL v18 = v10;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v10 = (void **)(v7 + 8 * (v21 & v15));
        uint64_t v17 = *v10;
        if (*v10 == (void *)-1) {
          goto LABEL_30;
        }
      }
    }
    LODWORD(v9) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v7 == v8) {
    unsigned int v12 = v9;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a3 + 64);
  }
  BOOL v23 = v10 != (void **)(v7 + 8 * v12);
  if (!sub_1CBF75724(v22) && !sub_1CBF7593C((uint64_t)v22)
    || (sub_1CBF745FC(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) != 0
    || (sub_1CBF745FC(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, a2, a3) & 1) != 0
    || (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_1CBF745FC(a4, (uint64_t)&llvm::PhiValuesAnalysis::Key, a2, a3);
  }
}

void *sub_1CC0A1594(uint64_t a1, uint64_t a2)
{
  v36[32] = *MEMORY[0x1E4F143B8];
  uint64_t v33 = a2;
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v6 = (void *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_17;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unsigned int v6 = (void *)(*(void *)a1 + 16 * v5);
      uint64_t v7 = *v6;
      if (*v6 == a2) {
        goto LABEL_17;
      }
    }
    if (v8) {
      unsigned int v12 = v8;
    }
    else {
      unsigned int v12 = v6;
    }
  }
  else
  {
    unsigned int v12 = 0;
  }
  unsigned int v6 = sub_1CC0A19B4(a1, (uint64_t)&v33, &v33, v12);
  *unsigned int v6 = v33;
  v6[1] = 0;
LABEL_17:
  int v13 = (void *)v6[1];
  if (v13) {
    return v13;
  }
  for (uint64_t i = *(void *)(v33 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v15 = *(void *)(i + 24);
    unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
    if (v15) {
      BOOL v17 = v16 >= 0x1C;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17 && v16 - 29 < 0xB) {
      break;
    }
  }
  unint64_t __src = v36;
  uint64_t v35 = 0x2000000000;
  sub_1CBF846A4((uint64_t)&__src, i, 0);
  if (v35 >= HIDWORD(v35)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)__src + v35) = 0;
  int v19 = v35;
  LODWORD(v35) = v35 + 1;
  uint64_t v20 = *(void *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 40);
  if (!v21)
  {
    unsigned int v30 = 0;
LABEL_43:
    uint64_t v24 = sub_1CBFAF8D8(a1 + 24, (uint64_t)&v33, &v33, v30);
    *uint64_t v24 = v33;
    *((_DWORD *)v24 + 2) = 0;
    goto LABEL_44;
  }
  int v22 = v21 - 1;
  unsigned int v23 = ((v33 >> 4) ^ (v33 >> 9)) & (v21 - 1);
  uint64_t v24 = (void *)(v20 + 16 * v23);
  uint64_t v25 = *v24;
  if (v33 != *v24)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      uint64_t v24 = (void *)(v20 + 16 * (v29 & v22));
      uint64_t v25 = *v24;
      if (v33 == *v24) {
        goto LABEL_44;
      }
    }
    if (v26) {
      unsigned int v30 = v26;
    }
    else {
      unsigned int v30 = v24;
    }
    goto LABEL_43;
  }
LABEL_44:
  *((_DWORD *)v24 + 2) = v19;
  int v31 = (void *)sub_1CB906F34((uint64_t *)(a1 + 48), 8 * v35, 3);
  int v13 = v31;
  v6[1] = v31;
  if (v35)
  {
    memmove(v31, __src, 8 * v35);
    int v13 = (void *)v6[1];
  }
  if (__src != v36) {
    free(__src);
  }
  return v13;
}

uint64_t sub_1CC0A181C(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v2 = a1 + 24;
  uint64_t v3 = v4;
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = (uint64_t *)(v3 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_3;
    }
    int v12 = 1;
    while (v9 != -4096)
    {
      int v13 = v7 + v12++;
      uint64_t v7 = v13 & (v5 - 1);
      uint64_t v9 = *(void *)(v3 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (uint64_t *)(v3 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(v3 + 16 * v5);
LABEL_3:
  if (v8 == (uint64_t *)(v3 + 16 * v5))
  {
    uint64_t v14 = *(void *)(a2 + 8);
    if (v14)
    {
      while (1)
      {
        uint64_t v15 = *(void *)(v14 + 24);
        unsigned int v16 = *(unsigned __int8 *)(v15 + 16);
        BOOL v17 = v15 && v16 >= 0x1C;
        if (v17 && v16 - 29 <= 0xA) {
          break;
        }
        uint64_t v14 = *(void *)(v14 + 8);
        if (!v14) {
          goto LABEL_21;
        }
      }
      LODWORD(v10) = 0;
LABEL_34:
      uint64_t v10 = (v10 + 1);
      while (1)
      {
        uint64_t v14 = *(void *)(v14 + 8);
        if (!v14) {
          break;
        }
        uint64_t v28 = *(void *)(v14 + 24);
        unsigned int v29 = *(unsigned __int8 *)(v28 + 16);
        if (v28) {
          BOOL v30 = v29 >= 0x1C;
        }
        else {
          BOOL v30 = 0;
        }
        if (v30 && v29 - 29 < 0xB) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_21:
      uint64_t v10 = 0;
    }
    if (v5)
    {
      unsigned int v19 = v6 ^ (a2 >> 9);
      int v20 = v5 - 1;
      unsigned int v21 = (v5 - 1) & v19;
      int v22 = (void *)(v3 + 16 * v21);
      uint64_t v23 = *v22;
      if (*v22 == a2)
      {
LABEL_24:
        *((_DWORD *)v22 + 2) = v10;
        return v10;
      }
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != -4096)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -8192;
        }
        if (v26) {
          uint64_t v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        int v22 = (void *)(v3 + 16 * (v27 & v20));
        uint64_t v23 = *v22;
        if (*v22 == a2) {
          goto LABEL_24;
        }
      }
      if (v24) {
        unsigned int v32 = v24;
      }
      else {
        unsigned int v32 = v22;
      }
    }
    else
    {
      unsigned int v32 = 0;
    }
    int v22 = sub_1CBFAF8D8(v2, (uint64_t)&v33, &v33, v32);
    void *v22 = v33;
    *((_DWORD *)v22 + 2) = 0;
    goto LABEL_24;
  }
  return *((unsigned int *)v8 + 2);
}

void *sub_1CC0A19B4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC0A1AEC(a1, v7);
      BOOL v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1CC0A1AEC(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
    int v13 = 0;
    int v14 = 1;
    while (v11 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      a4 = (void *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a4;
      if (v8 == *a4) {
        goto LABEL_3;
      }
    }
    if (v13) {
      a4 = v13;
    }
  }
  uint64_t v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC0A1AEC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  int32x2_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0A1BB8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *int32x2_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0A1BB8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 16 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          int v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              int v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = (void *)(*(void *)result + 16 * (v15 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_8;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_8:
        *uint64_t v10 = v8;
        v10[1] = a2[1];
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1CC0A1C90(char **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = a3;
  int v6 = (__n128 *)*a1;
  uint64_t v5 = (__n128 *)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = (__n128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v14 = v5 - v6 + 1;
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = v9 - (void)v6;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    BOOL v30 = a1 + 2;
    if (v16)
    {
      if (v16 >> 60) {
        sub_1CB833614();
      }
      BOOL v17 = (char *)operator new(16 * v16);
    }
    else
    {
      BOOL v17 = 0;
    }
    BOOL v26 = v17;
    unsigned int v27 = &v17[16 * (v7 >> 4)];
    std::string __dst = v27;
    unsigned int v29 = &v17[16 * v16];
    sub_1CC0A1E60((uint64_t)&v26, v3);
    BOOL v18 = (__n128 *)v27;
    unsigned int v19 = (__n128 *)*a1;
    if (v8 == (__n128 *)*a1)
    {
      unsigned int v21 = v27;
    }
    else
    {
      int v20 = v8;
      do
      {
        unsigned int v21 = (char *)&v18[-1];
        v18[-1] = v20[-1];
        --v20;
        --v18;
      }
      while (v20 != v19);
    }
    int v22 = (__n128 *)a1[1];
    uint64_t v23 = (char *)__dst;
    int64_t v24 = (char *)v22 - (char *)v8;
    if (v22 != v8) {
      memmove(__dst, v8, (char *)v22 - (char *)v8);
    }
    int v25 = (__n128 *)*a1;
    *a1 = v21;
    a1[1] = &v23[v24];
    a1[2] = v29;
    if (v25) {
      operator delete(v25);
    }
  }
  else if (v8 == v5)
  {
    *uint64_t v8 = *a3;
    a1[1] = (char *)&v8[1];
  }
  else
  {
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v5 - 1;
    int v12 = a1[1];
    while (v11 < v5)
    {
      long long v13 = (__int128)*v11++;
      *(_OWORD *)int v12 = v13;
      v12 += 16;
    }
    a1[1] = v12;
    if (v5 != v10) {
      memmove(&v5[-(v5 - v10)], v8, (char *)v5 - (char *)v10);
    }
    if (v8 <= v3) {
      v3 += a1[1] > (char *)v3;
    }
    *uint64_t v8 = *v3;
  }
}

__n128 sub_1CC0A1E60(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    int v6 = *(__n128 **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = ((char *)v4 - (char *)v6) >> 3;
      }
      if (v14 >> 60) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
      unint64_t v16 = (__n128 *)&v15[16 * (v14 >> 2)];
      uint64_t v18 = (char *)v4 - v5;
      BOOL v17 = v4 == (__n128 *)v5;
      uint64_t v4 = v16;
      if (!v17)
      {
        uint64_t v4 = (__n128 *)((char *)v16 + (v18 & 0xFFFFFFFFFFFFFFF0));
        uint64_t v19 = 16 * (v18 >> 4);
        int v20 = &v15[16 * (v14 >> 2)];
        do
        {
          long long v21 = *(_OWORD *)v5;
          v5 += 16;
          *(_OWORD *)int v20 = v21;
          v20 += 16;
          v19 -= 16;
        }
        while (v19);
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v15[16 * v14];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = v8 >> 1;
      uint64_t v11 = &v5[-16 * v10];
      int64_t v12 = (char *)v4 - v5;
      if (v4 != (__n128 *)v5)
      {
        memmove(&v5[-16 * v10], *(const void **)(a1 + 8), (char *)v4 - v5);
        uint64_t v4 = *(__n128 **)(a1 + 8);
      }
      long long v13 = &v4[v9];
      uint64_t v4 = (__n128 *)&v11[v12];
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = &v11[v12];
    }
  }
  __n128 result = *a2;
  *uint64_t v4 = *a2;
  *(void *)(a1 + 16) += 16;
  return result;
}

_DWORD *sub_1CC0A1F84(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD3C8060(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

_DWORD *sub_1CC0A1FD4(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return sub_1CBA7B248(result);
    }
  }
  return result;
}

double sub_1CC0A2024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = a3;
  *(void *)(a1 + 208) = a4;
  *(void *)(a1 + 216) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 224) = a6;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 312;
  *(void *)&double result = 0x400000000;
  *(void *)(a1 + 304) = 0x400000000;
  *(void *)(a1 + 344) = a1 + 360;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 376) = a7;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  return result;
}

uint64_t sub_1CC0A20B8(uint64_t a1)
{
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 384), 8);
  uint64_t v2 = *(unsigned int *)(a1 + 304);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 296);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      MEMORY[0x1D25D9CD0](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  int v6 = *(uint64_t **)(a1 + 344);
  uint64_t v7 = *(unsigned int *)(a1 + 352);
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    do
    {
      uint64_t v11 = *v6;
      v6 += 2;
      MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 16;
    }
    while (v10);
    int v6 = *(uint64_t **)(a1 + 344);
  }
  if (v6 != (uint64_t *)(a1 + 360)) {
    free(v6);
  }
  uint64_t v8 = *(void **)(a1 + 296);
  if (v8 != (void *)(a1 + 312)) {
    free(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 256), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 232), 8);
  sub_1CC0A2218((unsigned int *)(a1 + 168));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 168), 8);
  sub_1CC0A2218((unsigned int *)(a1 + 144));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 144), 8);
  sub_1CC0A2284((unsigned int *)(a1 + 120));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 120), 8);
  sub_1CC0A22F0((unsigned int *)(a1 + 96));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  sub_1CC0A2358((unsigned int *)(a1 + 72));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 72), 8);
  sub_1CC0A23C0((unsigned int *)(a1 + 48));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 48), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
  MEMORY[0x1D25D9CD0](*(void *)a1, 8);
  return a1;
}

void sub_1CC0A2218(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 2);
      if (v4 != -4096 && v4 != -8192 && *v3 != *(v3 - 1)) {
        free(*v3);
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1CC0A2284(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 16);
    do
    {
      uint64_t v4 = *(v3 - 2);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *uint64_t v3 = v5;
          operator delete(v5);
        }
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1CC0A22F0(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1)) {
        free(*v3);
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1CC0A2358(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 80 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 24);
    do
    {
      uint64_t v4 = *(v3 - 3);
      if (v4 != -4 && v4 != -16)
      {
        int v6 = (void *)*(v3 - 1);
        if (v6)
        {
          *uint64_t v3 = v6;
          operator delete(v6);
        }
      }
      v3 += 10;
      v2 -= 80;
    }
    while (v2);
  }
}

void sub_1CC0A23C0(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1)) {
        free(*v3);
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t sub_1CC0A2428(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v4 = (void *)(a1 + 32 * v7);
    uint64_t v8 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == -8192;
        }
        if (v11) {
          uint64_t v9 = v4;
        }
        int v12 = v7 + v10++;
        uint64_t v7 = v12 & (a2 - 1);
        uint64_t v4 = (void *)(a1 + 32 * v7);
        uint64_t v8 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v9) {
        uint64_t v4 = v9;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t *sub_1CC0A24BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  double result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CC0A25A0(a1, v7);
    uint64_t v8 = 0;
    sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    double result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *double result = *a2;
  result[1] = 0;
  return result;
}

void *sub_1CC0A25A0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *double result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 16 * v3;
      uint64_t v15 = (uint64_t *)v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v18 = 0;
          sub_1CBF8BDAC(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v18);
          BOOL v17 = v18;
          *uint64_t v18 = *v15;
          v17[1] = v15[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v15 += 2;
        v14 -= 16;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *double result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

double sub_1CC0A26E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CC0A2868(a1, v8);
    uint64_t v9 = 0;
    sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v6 = *a2;
  *(void *)(v6 + 8) = v6 + 40;
  *(void *)(v6 + 16) = v6 + 40;
  *(void *)&double result = 4;
  *(void *)(v6 + 24) = 4;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1CC0A27DC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 72 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 72 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CC0A2868(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0A2940(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1CC0A2940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v15 = 0;
        sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        uint64_t v10 = v15;
        uint64_t v11 = v15 + 5;
        *uint64_t v15 = *(void *)v4;
        v10[1] = v11;
        uint64_t v12 = *(void **)(v4 + 8);
        uint64_t v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          void v10[2] = v11;
          uint64_t v14 = *(unsigned int *)(v4 + 28);
          uint64_t v12 = *(void **)(v4 + 16);
          if (v14)
          {
            memmove(v11, v12, 8 * v14);
            uint64_t v13 = *(void **)(v4 + 8);
            uint64_t v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          void v10[2] = v13;
          *(void *)(v4 + 16) = v12;
          uint64_t v13 = v12;
        }
        v10[3] = *(void *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(void *)(v4 + 24) = 4;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13) {
          free(v12);
        }
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

void *sub_1CC0A2A6C(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC0A2B24(a1, v6);
  uint64_t v8 = 0;
  sub_1CBC5D0DC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC0A2B24(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0A2BFC(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0A2BFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 40 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBC5D0DC(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      v10[1] = 0;
      void v10[2] = 0;
      v10[3] = 0;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      v10[3] = *(void *)(a2 + 24);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *((unsigned char *)v10 + 32) = *(unsigned char *)(a2 + 32);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 40;
  }
  return result;
}

void sub_1CC0A2CCC(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
long long *sub_1CC0A3150(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(void *)result)
      {
        long long v7 = *result;
        *uint64_t result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *result;
      *uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *result;
      *uint64_t result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

unint64_t *sub_1CC0A31F4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    long long v5 = a1 + 2;
    do
    {
      unint64_t v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      unint64_t v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v2 < v6);
  }
  unint64_t v7 = a1[1];
  while (v3 < a2)
  {
    long long v11 = *(_OWORD *)v3;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unint64_t v8 = v3[2];
      v3 += 2;
    }
    while (v2 >= v8);
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  if (v3 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
  }
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

BOOL sub_1CC0A32B4(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unint64_t v6 = v7;
      }
      return result;
    case 3:
      sub_1CC0A3150((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_1CC0A3450((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      sub_1CC0A34F0((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      sub_1CC0A3150((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CC0A3450(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  sub_1CC0A3150(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1CC0A34F0(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = sub_1CC0A3450(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC0A35BC(uint64_t result, long long *a2, long long *a3)
{
  if ((long long *)result != a2)
  {
    uint64_t v4 = a2;
    long long v5 = (unint64_t *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      uint64_t v10 = (unint64_t *)(result + 16 * v8);
      do
      {
        __n128 result = sub_1CC0A37A0((uint64_t)v5, v7, v10);
        v10 -= 2;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      int v11 = v4;
      do
      {
        if (*(void *)v11 < *v5)
        {
          long long v12 = *v11;
          *int v11 = *(_OWORD *)v5;
          *(_OWORD *)long long v5 = v12;
          __n128 result = sub_1CC0A37A0((uint64_t)v5, v7, v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 17)
    {
      do
      {
        uint64_t v13 = 0;
        long long v25 = *(_OWORD *)v5;
        uint64_t v14 = v5;
        do
        {
          unint64_t v15 = &v14[2 * v13 + 2];
          uint64_t v16 = (2 * v13) | 1;
          uint64_t v17 = 2 * v13 + 2;
          if (v17 < v7 && *v15 < v15[2])
          {
            v15 += 2;
            uint64_t v16 = v17;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
          uint64_t v14 = v15;
          uint64_t v13 = v16;
        }
        while (v16 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if (v15 == (unint64_t *)--v4)
        {
          *(_OWORD *)unint64_t v15 = v25;
        }
        else
        {
          *(_OWORD *)unint64_t v15 = *v4;
          *uint64_t v4 = v25;
          uint64_t v18 = (char *)v15 - (char *)v5 + 16;
          if (v18 >= 17)
          {
            unint64_t v19 = (((unint64_t)v18 >> 4) - 2) >> 1;
            unint64_t v20 = &v5[2 * v19];
            unint64_t v21 = *v15;
            if (*v20 < *v15)
            {
              unint64_t v22 = v15[1];
              do
              {
                uint64_t v23 = v15;
                unint64_t v15 = v20;
                *(_OWORD *)uint64_t v23 = *(_OWORD *)v20;
                if (!v19) {
                  break;
                }
                unint64_t v19 = (v19 - 1) >> 1;
                unint64_t v20 = &v5[2 * v19];
              }
              while (*v20 < v21);
              *unint64_t v15 = v21;
              v15[1] = v22;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CC0A37A0(uint64_t result, uint64_t a2, unint64_t *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 4)
    {
      uint64_t v5 = v3 >> 3;
      uint64_t v6 = (v3 >> 3) + 1;
      uint64_t v7 = (unint64_t *)(result + 16 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 >= a2)
      {
        unint64_t v9 = *v7;
      }
      else
      {
        unint64_t v9 = *v7;
        if (*v7 < v7[2])
        {
          unint64_t v9 = v7[2];
          v7 += 2;
          uint64_t v6 = v8;
        }
      }
      unint64_t v10 = *a3;
      if (v9 >= *a3)
      {
        unint64_t v11 = a3[1];
        do
        {
          long long v12 = a3;
          a3 = v7;
          *(_OWORD *)long long v12 = *(_OWORD *)v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = (2 * v6) | 1;
          uint64_t v7 = (unint64_t *)(result + 16 * v13);
          uint64_t v6 = 2 * v6 + 2;
          if (v6 >= a2)
          {
            unint64_t v14 = *v7;
            uint64_t v6 = v13;
          }
          else
          {
            unint64_t v14 = *v7;
            if (*v7 >= v7[2])
            {
              uint64_t v6 = v13;
            }
            else
            {
              unint64_t v14 = v7[2];
              v7 += 2;
            }
          }
        }
        while (v14 >= v10);
        *a3 = v10;
        a3[1] = v11;
      }
    }
  }
  return result;
}

unsigned char *sub_1CC0A3870(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (a2 - *(void *)a1) >> 3;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  size_t v8 = (char *)a4 - (char *)__src;
  if (*(void *)a1 + 8 * v7 == a2)
  {
    if (v7 + a4 - __src <= (unint64_t)*(unsigned int *)(a1 + 12) && __src != a4) {
      goto LABEL_3;
    }
    if (v7 + a4 - __src > (unint64_t)*(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (__src != a4)
    {
LABEL_3:
      memcpy((void *)(v5 + 8 * v7), __src, v8);
      LODWORD(v7) = *(_DWORD *)(a1 + 8);
      uint64_t v5 = *(void *)a1;
    }
    *(_DWORD *)(a1 + 8) = v7 + (v8 >> 3);
    return (unsigned char *)(v5 + 8 * v6);
  }
  else
  {
    unint64_t v19 = __src;
    unint64_t v11 = (uint64_t)v8 >> 3;
    if (v7 + a4 - __src > (unint64_t)*(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v12 = (unsigned char *)(v5 + 8 * v7);
    __srca = (unsigned char *)(v5 + 8 * v6);
    unint64_t v13 = (v12 - __srca) >> 3;
    if (v13 >= v11)
    {
      sub_1CD4570C8(a1, &v12[-8 * v11], (char *)(v5 + 8 * v7));
      if (&v12[-8 * v11] != __srca) {
        memmove(&__srca[8 * v11], __srca, &v12[-8 * v11] - __srca);
      }
      if (v19 != a4)
      {
        unint64_t v9 = __srca;
        memmove(__srca, v19, v8);
        return v9;
      }
    }
    else
    {
      unsigned int v14 = v7 + (v8 >> 3);
      *(_DWORD *)(a1 + 8) = v14;
      if (v6 != v7)
      {
        unint64_t v15 = (void *)(v5 + 8 * v6);
        memcpy((void *)(v5 + 8 * v14 - 8 * v13), __srca, v12 - __srca);
        do
        {
          uint64_t v16 = *v19++;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      if (v19 != a4) {
        memcpy(v12, v19, (char *)a4 - (char *)v19);
      }
    }
    return __srca;
  }
}

double sub_1CC0A3A48(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_8;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_8:
    sub_1CC0A2868(a1, v8);
    uint64_t v9 = 0;
    sub_1CC0A27DC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v6 = *a2;
  *(void *)(v6 + 8) = v6 + 40;
  *(void *)(v6 + 16) = v6 + 40;
  *(void *)&double result = 4;
  *(void *)(v6 + 24) = 4;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1CC0A3B44(uint64_t a1, int a2, unint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    uint64_t v6 = (void *)(a1 + 80 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v12 = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -16;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 80 * (v11 & v4));
        uint64_t v7 = *v6;
        uint64_t v12 = 1;
        if (*v6 == a3) {
          goto LABEL_13;
        }
      }
      uint64_t v12 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v12 = 0;
  }
LABEL_13:
  *a4 = v6;
  return v12;
}

void *sub_1CC0A3BDC(uint64_t a1, unint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC0A3C94(a1, v6);
  unsigned int v8 = 0;
  sub_1CC0A3B44(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC0A3C94(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 80 * v12;
      do
      {
        *double result = -4;
        result += 10;
        v13 -= 80;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 80 * v3;
      uint64_t v15 = v4 + 24;
      do
      {
        unint64_t v16 = *(void *)(v15 - 24);
        if (v16 != -4 && v16 != -16)
        {
          unint64_t v22 = 0;
          sub_1CC0A3B44(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v22);
          uint64_t v18 = v22;
          void *v22 = *(void *)(v15 - 24);
          v18[1] = *(void *)(v15 - 16);
          v18[2] = 0;
          v18[3] = 0;
          v18[4] = 0;
          *((_OWORD *)v18 + 1) = *(_OWORD *)(v15 - 8);
          v18[4] = *(void *)(v15 + 8);
          *(void *)(v15 - 8) = 0;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          long long v19 = *(_OWORD *)(v15 + 16);
          long long v20 = *(_OWORD *)(v15 + 32);
          v18[9] = *(void *)(v15 + 48);
          *(_OWORD *)(v18 + 7) = v20;
          *(_OWORD *)(v18 + 5) = v19;
          ++*(_DWORD *)(a1 + 8);
          unint64_t v21 = *(void **)(v15 - 8);
          if (v21)
          {
            *(void *)uint64_t v15 = v21;
            operator delete(v21);
          }
        }
        v15 += 80;
        v14 -= 80;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 80 * v10;
    do
    {
      *double result = -4;
      result += 10;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1CC0A3E2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    uint64_t v10 = *(uint64_t **)a1;
    unint64_t v11 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = (uint64_t *)operator new(16 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      sub_1CB846674(a1, v10, &v10[2 * v7]);
      MEMORY[0x1D25D9CD0](v10, 8);
      LODWORD(v17) = *(_DWORD *)(a1 + 16);
      uint64_t v15 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v16 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v17 = *(unsigned int *)(a1 + 16);
      do
      {
        v15[v16] = -4096;
        v16 += 2;
      }
      while (2 * v17 != v16);
    }
    uint64_t v8 = *a3;
    int v18 = v17 - 1;
    unsigned int v19 = ((*a3 >> 4) ^ (*a3 >> 9)) & v18;
    a4 = &v15[2 * v19];
    uint64_t v20 = *a4;
    if (*a3 == *a4) {
      goto LABEL_5;
    }
    unint64_t v21 = 0;
    int v22 = 1;
    while (v20 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -8192;
      }
      if (v23) {
        unint64_t v21 = a4;
      }
      unsigned int v24 = v19 + v22++;
      unsigned int v19 = v24 & v18;
      a4 = &v15[2 * v19];
      uint64_t v20 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v21) {
      a4 = v21;
    }
  }
  else if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CB8465A8(a1, *(_DWORD *)(a1 + 16));
    long long v25 = 0;
    sub_1CBA0E618(a1, a3, &v25);
    a4 = v25;
  }
  uint64_t v8 = *a4;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

char **sub_1CC0A3FF0(char **a1)
{
  unint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = 88 * v3;
    do
    {
      int v6 = *(char **)&v2[v5 - 48];
      if (&v2[v5 - 32] != v6) {
        free(v6);
      }
      v5 -= 88;
    }
    while (v5);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t sub_1CC0A4074(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 88 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      sub_1CD4A8E10();
    }
    sub_1CD4A8E10();
  }
  return a2;
}

void sub_1CC0A40E0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = 88 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      *(void *)uint64_t v8 = *(void *)(v6 + v5);
      long long v10 = *(_OWORD *)(v6 + v5 + 8);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v6 + v5 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      unint64_t v11 = (void *)(a2 + v5 + 56);
      *(void *)(a2 + v5 + 40) = v11;
      *(void *)(v8 + 48) = 0x400000000;
      unsigned int v12 = *(_DWORD *)(v6 + v5 + 48);
      if (v12) {
        BOOL v13 = v9 == v8;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        unsigned int v14 = *(const void **)(v9 + 40);
        if ((const void *)(v9 + 56) == v14)
        {
          if (v12 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v11, v14, 8 * *(unsigned int *)(v6 + v5 + 48));
          *(_DWORD *)(v8 + 48) = v12;
        }
        else
        {
          *(void *)(a2 + v5 + 40) = v14;
          int v15 = *(_DWORD *)(v6 + v5 + 52);
          *(_DWORD *)(v8 + 48) = v12;
          *(_DWORD *)(v8 + 52) = v15;
          *(void *)(v9 + 40) = v9 + 56;
          *(_DWORD *)(v6 + v5 + 52) = 0;
        }
        *(_DWORD *)(v9 + 48) = 0;
      }
      v5 += 88;
    }
    while (v7 != v5);
    unsigned int v16 = *((_DWORD *)a1 + 2);
    if (v16)
    {
      uint64_t v17 = *a1;
      uint64_t v18 = 88 * v16;
      do
      {
        unsigned int v19 = *(void **)(v17 + v18 - 48);
        if ((void *)(v17 + v18 - 32) != v19) {
          free(v19);
        }
        v18 -= 88;
      }
      while (v18);
    }
  }
}

void *sub_1CC0A424C(uint64_t a1, unint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC0A3B44(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC0A3BDC(a1, a2, v7);
    *uint64_t v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    v5[5] = -2;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
  }
  return v5;
}

uint64_t sub_1CC0A42D0(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    char v4 = (void *)(a1 + 72 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      long long v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          long long v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        char v4 = (void *)(a1 + 72 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        char v4 = v10;
      }
    }
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t sub_1CC0A4368()
{
  int v4 = 1;
  int v2 = 100;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "The number of instructions to scan in a block in memory dependency analysis (default = 100)";
  *((void *)&v1 + 1) = 91;
  sub_1CD45A86C((uint64_t)&unk_1EBD044B0, "memdep-block-scan-limit", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD044B0, &dword_1CB82C000);
  int v4 = 1;
  int v2 = 1000;
  uint64_t v3 = &v2;
  *(void *)&long long v1 = "The number of blocks to scan during memory dependency analysis (default = 1000)";
  *((void *)&v1 + 1) = 79;
  sub_1CD45A86C((uint64_t)&unk_1EBCC6900, "memdep-block-number-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC6900, &dword_1CB82C000);
}

uint64_t ***llvm::MemoryLocation::get@<X0>(llvm::MemoryLocation *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, *(void *)this);
  if (v7 == 1) {
    unint64_t v8 = -2;
  }
  else {
    unint64_t v8 = (unint64_t)(v6 + 7) >> 3;
  }
  double result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  uint64_t v5 = *((void *)this - 4);
  uint64_t v6 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, **((void **)this - 8));
  if (v7 == 1) {
    unint64_t v8 = -2;
  }
  else {
    unint64_t v8 = (unint64_t)(v6 + 7) >> 3;
  }
  double result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  uint64_t v5 = *((void *)this - 12);
  uint64_t v6 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, **((void **)this - 8));
  if (v7 == 1) {
    unint64_t v8 = -2;
  }
  else {
    unint64_t v8 = (unint64_t)(v6 + 7) >> 3;
  }
  double result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t ***result;

  uint64_t v5 = *((void *)this - 8);
  uint64_t v6 = sub_1CB83544C(*(void *)(*(void *)(*((void *)this + 5) + 56) + 40) + 272, **((void **)this - 4));
  if (v7 == 1) {
    unint64_t v8 = -2;
  }
  else {
    unint64_t v8 = (unint64_t)(v6 + 7) >> 3;
  }
  double result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v5;
  a2[1] = v8;
  return result;
}

{
  uint64_t v4;
  uint64_t ***result;

  int v4 = *((void *)this - 4);
  double result = llvm::Instruction::getAAMetadata((uint64_t ***)this, a2 + 2);
  *a2 = v4;
  a2[1] = -2;
  return result;
}

uint64_t ***llvm::MemoryLocation::getOrNone@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = this;
  int v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 60)
  {
    uint64_t v6 = this[5][7][5] + 272;
    uint64_t v7 = (uint64_t)*(v3 - 4);
    unint64_t v8 = *v3;
LABEL_3:
    uint64_t v9 = sub_1CB83544C(v6, (uint64_t)v8);
    if (v10 == 1) {
      unint64_t v11 = -2;
    }
    else {
      unint64_t v11 = (unint64_t)(v9 + 7) >> 3;
    }
    this = llvm::Instruction::getAAMetadata(v3, v16);
    *(void *)&long long v15 = v7;
    *((void *)&v15 + 1) = v11;
    long long v12 = v16[1];
    *(_OWORD *)(a2 + 16) = v16[0];
    *(_OWORD *)(a2 + 32) = v12;
    *(_OWORD *)a2 = v15;
    goto LABEL_7;
  }
  if (*((unsigned __int8 *)this + 16) <= 0x3Fu)
  {
    if (v5 == 61)
    {
      uint64_t v6 = this[5][7][5] + 272;
      uint64_t v7 = (uint64_t)*(v3 - 4);
      unsigned int v13 = (uint64_t ***)*(v3 - 8);
LABEL_12:
      unint64_t v8 = *v13;
      goto LABEL_3;
    }
LABEL_19:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return this;
  }
  switch(v5)
  {
    case 'A':
      uint64_t v6 = this[5][7][5] + 272;
      uint64_t v7 = (uint64_t)*(v3 - 8);
      unsigned int v13 = (uint64_t ***)*(v3 - 4);
      goto LABEL_12;
    case '@':
      this = llvm::MemoryLocation::get((llvm::MemoryLocation *)this, (void *)a2);
      break;
    case 'X':
      uint64_t v14 = (uint64_t)*(this - 4);
      this = llvm::Instruction::getAAMetadata(this, (void *)(a2 + 16));
      *(void *)a2 = v14;
      *(void *)(a2 + 8) = -2;
      break;
    default:
      goto LABEL_19;
  }
LABEL_7:
  *(unsigned char *)(a2 + 48) = 1;
  return this;
}

double llvm::MemoryLocation::getForSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 1u, 0, a2);
}

double llvm::MemoryLocation::getForArgument@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  llvm::Instruction::getAAMetadata((uint64_t ***)a1, v31);
  unint64_t v8 = (uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  uint64_t v9 = v8[4 * a2];
  if (*(unsigned char *)(a1 + 16) == 84)
  {
    uint64_t v10 = *(void *)(a1 - 32);
    if (v10)
    {
      if (!*(unsigned char *)(v10 + 16) && *(void *)(v10 + 24) == *(void *)(a1 + 72) && (*(unsigned char *)(v10 + 33) & 0x20) != 0)
      {
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 40) + 56) + 40) + 272;
        int v17 = *(_DWORD *)(v10 + 36);
        if (v17 > 193)
        {
          if ((v17 - 194) < 7)
          {
            uint64_t v18 = v8[8];
            if (v18) {
              BOOL v19 = *((unsigned char *)v18 + 16) == 16;
            }
            else {
              BOOL v19 = 0;
            }
            if (!v19)
            {
              unint64_t v11 = -2;
              goto LABEL_10;
            }
LABEL_67:
            unint64_t v21 = (unint64_t *)(v18 + 3);
            BOOL v22 = *((_DWORD *)v18 + 8) >= 0x41u;
            goto LABEL_68;
          }
          if (v17 == 3909)
          {
            unsigned int v27 = *(uint64_t ***)a1;
          }
          else
          {
            if (v17 != 3982) {
              goto LABEL_6;
            }
            unsigned int v27 = *v8[4];
          }
          unint64_t v11 = (unint64_t)(sub_1CB83544C(v16, (uint64_t)v27) + 7) >> 3;
LABEL_80:
          BOOL v14 = v29 == 1;
          uint64_t v15 = -2;
LABEL_81:
          if (v14) {
            unint64_t v11 = v15;
          }
          goto LABEL_10;
        }
        if (v17 <= 166)
        {
          if (v17 == 163)
          {
            if (!a2)
            {
              *(void *)a4 = v9;
              *(void *)(a4 + 8) = 0;
              goto LABEL_11;
            }
            uint64_t v18 = v8[4];
            goto LABEL_67;
          }
          if (v17 != 164) {
            goto LABEL_6;
          }
        }
        else if ((v17 - 167) >= 2)
        {
          if (v17 == 185)
          {
            unsigned int v24 = *(uint64_t ***)a1;
          }
          else
          {
            if (v17 != 187) {
              goto LABEL_6;
            }
            unsigned int v24 = **v8;
          }
          uint64_t v28 = sub_1CB83544C(v16, (uint64_t)v24);
          if ((unint64_t)(v28 + 7) >= 8) {
            unint64_t v11 = ((unint64_t)(v28 + 7) >> 3) | 0x8000000000000000;
          }
          else {
            unint64_t v11 = 0;
          }
          goto LABEL_80;
        }
        uint64_t v18 = *v8;
        goto LABEL_67;
      }
    }
  }
LABEL_6:
  int v30 = 0;
  if (a3
    && sub_1CC0A4DF4(a3, a1, &v30)
    && ((*(void *)(a3[1] + (((unint64_t)v30 >> 3) & 0x1FFFFFF8)) >> v30) & 1) == 0
    && ((*(unsigned __int8 *)(*a3 + ((unint64_t)v30 >> 2)) >> (2 * (v30 & 3))) & 3) != 0)
  {
    if (v30 <= 403)
    {
      if (v30 > 318)
      {
        switch(v30)
        {
          case 319:
            uint64_t v23 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96);
            goto LABEL_50;
          case 320:
          case 321:
            goto LABEL_34;
          case 327:
          case 328:
          case 329:
            if (a2 != 1) {
              goto LABEL_34;
            }
            unint64_t v11 = 16;
            if (v30 == 329) {
              unint64_t v11 = 8;
            }
            BOOL v14 = v30 == 328;
            uint64_t v15 = 4;
            break;
          default:
            goto LABEL_9;
        }
        goto LABEL_81;
      }
      if (v30 != 103 && v30 != 106)
      {
        if (v30 == 168)
        {
LABEL_34:
          uint64_t v18 = *(uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
          unint64_t v11 = -2;
          if (!v18 || *((unsigned char *)v18 + 16) != 16) {
            goto LABEL_10;
          }
          goto LABEL_67;
        }
        goto LABEL_9;
      }
      uint64_t v23 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
LABEL_50:
      unint64_t v11 = -2;
      if (!v23 || *(unsigned char *)(v23 + 16) != 16) {
        goto LABEL_10;
      }
      unint64_t v21 = (unint64_t *)(v23 + 24);
      BOOL v22 = *(_DWORD *)(v23 + 32) >= 0x41u;
LABEL_53:
      if (v22) {
        unint64_t v21 = (unint64_t *)*v21;
      }
      unint64_t v25 = *v21;
      unint64_t v26 = v25 | 0x8000000000000000;
      if (v25 > 0x7FFFFFFFFFFFFFFBLL) {
        unint64_t v26 = -2;
      }
      if (v25) {
        unint64_t v11 = v26;
      }
      else {
        unint64_t v11 = 0;
      }
      goto LABEL_10;
    }
    unint64_t v11 = -2;
    if (v30 > 414)
    {
      if (v30 == 415) {
        goto LABEL_10;
      }
      if (v30 != 417) {
        goto LABEL_9;
      }
      uint64_t v20 = *(void *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 64);
      unint64_t v11 = -2;
      if (!v20 || *(unsigned char *)(v20 + 16) != 16) {
        goto LABEL_10;
      }
      unint64_t v21 = (unint64_t *)(v20 + 24);
      BOOL v22 = *(_DWORD *)(v20 + 32) >= 0x41u;
      if (!a2)
      {
LABEL_68:
        if (v22) {
          unint64_t v21 = (unint64_t *)*v21;
        }
        unint64_t v11 = *v21;
        if (v11 > 0x7FFFFFFFFFFFFFFBLL) {
          unint64_t v11 = -2;
        }
        goto LABEL_10;
      }
      goto LABEL_53;
    }
    if (v30 == 404 || v30 == 408) {
      goto LABEL_10;
    }
  }
LABEL_9:
  uint64_t v9 = *(uint64_t ****)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a2);
  unint64_t v11 = -1;
LABEL_10:
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
LABEL_11:
  double result = *(double *)v31;
  long long v13 = v31[1];
  *(_OWORD *)(a4 + 16) = v31[0];
  *(_OWORD *)(a4 + 32) = v13;
  return result;
}

double llvm::MemoryLocation::getForDest@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

{
  return llvm::MemoryLocation::getForArgument(a1, 0, 0, a2);
}

void llvm::MemoryLocation::getForDest(llvm::Instruction *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *((void *)this + 8);
  if (!v7 || (*(unsigned char *)(v7 + 12) & 8) == 0)
  {
    __int32 v21 = 7;
    if (sub_1CC5CB59C((uint64_t)this, &v21, 1uLL))
    {
      uint64_t v20 = *((void *)this - 4);
      if (!v20 || *(unsigned char *)(v20 + 16) || *(void *)(v20 + 24) != *((void *)this + 9) || *(_DWORD *)(v20 + 36) != 7) {
        goto LABEL_36;
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 3) & 1) == 0) {
      goto LABEL_36;
    }
  }
  int v8 = *((_DWORD *)this + 5);
  if (v8 < 0 && (*((void *)this - 4 * (v8 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0) {
    goto LABEL_36;
  }
  unint64_t v9 = 0;
  int v10 = 0;
  unsigned __int8 v11 = 0;
  uint64_t v12 = 0;
  for (uint64_t i = this; ; uint64_t i = (llvm::Instruction *)((char *)i + 32))
  {
    int v14 = *((unsigned __int8 *)this + 16);
    if (v14 == 84) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14 == 39 ? (*((_DWORD *)this + 20) + 1) : 2;
    }
    int v16 = *((_DWORD *)this + 5);
    if (v16 < 0 && (uint64_t v19 = v16 & 0x7FFFFFF, (*((void *)this - 4 * v19 - 1) & 0xFFFFFFFF0) != 0))
    {
      uint64_t v18 = -v19;
      int v17 = *((_DWORD *)this - 8 * v19 - 3) - *(_DWORD *)((char *)this - *((void *)this - 4 * v19 - 1) + -32 * v19);
    }
    else
    {
      int v17 = 0;
      uint64_t v18 = -(uint64_t)(v16 & 0x7FFFFFF);
    }
    if (v9 >= ((-32 - 32 * v15 + 32 * (unint64_t)-v17 - 32 * v18) >> 5)) {
      break;
    }
    if (*(unsigned char *)(**((void **)i + 4 * v18) + 8) == 15
      && (sub_1CBF5BC2C((uint64_t)this, v9, 45) & 1) == 0
      && (sub_1CBF5BC2C((uint64_t)this, v9, 44) & 1) == 0)
    {
      if (v12)
      {
        if (v12 != *((void *)i - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) {
          goto LABEL_36;
        }
        int v10 = 0;
        unsigned __int8 v11 = 0;
        unsigned int v3 = 0;
      }
      else
      {
        unsigned int v3 = v9 >> 8;
        int v10 = 1;
        unsigned __int8 v11 = v9;
        uint64_t v12 = *((void *)i - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
    }
    ++v9;
  }
  if (v12)
  {
    if (v10)
    {
      llvm::MemoryLocation::getForArgument((uint64_t)this, v11 | (v3 << 8), a2, a3);
    }
    else
    {
      llvm::Instruction::getAAMetadata((uint64_t ***)this, (void *)(a3 + 16));
      *(void *)a3 = v12;
      *(void *)(a3 + 8) = -1;
    }
    *(unsigned char *)(a3 + 48) = 1;
  }
  else
  {
LABEL_36:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
}

BOOL sub_1CC0A4DF4(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6 && (*(unsigned char *)(v6 + 14) & 0x10) != 0) {
    goto LABEL_5;
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 20)) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6)
  {
LABEL_5:
    if ((*(unsigned char *)(v6 + 12) & 0x10) != 0) {
      goto LABEL_7;
    }
  }
  if (!llvm::CallBase::hasFnAttrOnCalledFunction(a2, 4)) {
    return 0;
  }
LABEL_7:
  uint64_t v7 = *(void *)(a2 - 32);
  if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(a2 + 72)) {
    return 0;
  }
  uint64_t v9 = *a1;

  return llvm::TargetLibraryInfoImpl::getLibFunc(v9, (uint64_t ***)v7, a3);
}

void sub_1CC0A4EB0(llvm *a1)
{
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

void llvm::initializeMemorySSAPrinterLegacyPassPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC69D0, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0A4FCC;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC69D0, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0A4FCC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC69C8, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0A4EB0;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC69C8, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
  operator new();
}

uint64_t llvm::MemorySSA::renameSuccessorPhis(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9 != a2 + 40)
  {
    if (v9) {
      uint64_t v10 = v9 - 24;
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *(unsigned __int8 *)(v10 + 16);
    unint64_t v12 = (v11 - 29);
    uint64_t v13 = result;
    if (v11 != 30)
    {
      unsigned int v46 = 2;
      switch((int)v12)
      {
        case 1:
LABEL_84:
          __break(1u);
          goto LABEL_85;
        case 2:
          unsigned int v46 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_66;
        case 3:
        case 9:
          unsigned int v46 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_66;
        case 4:
          goto LABEL_10;
        case 7:
          unsigned int v46 = *(_WORD *)(v10 + 18) & 1;
          goto LABEL_66;
        case 8:
          unsigned int v46 = 1;
          goto LABEL_10;
        case 10:
          unsigned int v46 = *(_DWORD *)(v10 + 80) + 1;
LABEL_66:
          if (!v46) {
            return result;
          }
          goto LABEL_10;
        default:
          return result;
      }
    }
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v46 = 2;
    }
    else {
      unsigned int v46 = 1;
    }
LABEL_10:
    uint64_t v8 = 0;
    uint64_t v6 = (uint64_t *)(v10 - 32);
    double result = 2;
    a5 = v46;
    do
    {
      int v14 = *(unsigned __int8 *)(v10 + 16);
      if (v14 == 30)
      {
        BOOL v43 = &v6[-4 * v8];
      }
      else
      {
        unint64_t v12 = (v14 - 31);
        BOOL v43 = v6;
        switch(v12)
        {
          case 1uLL:
          case 7uLL:
            int v56 = *(_DWORD *)(v10 + 20);
            if ((v56 & 0x40000000) != 0) {
              uint64_t v57 = *(void *)(v10 - 8);
            }
            else {
              uint64_t v57 = v10 - 32 * (v56 & 0x7FFFFFF);
            }
            BOOL v43 = (uint64_t *)(v57 + 32 * (v8 + 1));
            goto LABEL_104;
          case 2uLL:
            uint64_t v58 = -64;
            if (!v8) {
              uint64_t v58 = -96;
            }
            BOOL v43 = (uint64_t *)(v10 + v58);
            break;
          case 3uLL:
          case 4uLL:
            goto LABEL_84;
          case 5uLL:
            if ((*(_WORD *)(v10 + 18) & 1) == 0)
            {
              uint64_t v5 = 0;
              double result = 2;
              goto LABEL_15;
            }
            BOOL v43 = (uint64_t *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
LABEL_104:
            double result = 2;
            break;
          case 6uLL:
            break;
          case 8uLL:
            if (v8) {
              BOOL v43 = &v6[4 * v8 - 4 + -4 * *(unsigned int *)(v10 + 80)];
            }
            else {
              BOOL v43 = (uint64_t *)(v10 - 32 * *(unsigned int *)(v10 + 80) - 64);
            }
            goto LABEL_104;
          default:
            int v44 = *(_DWORD *)(v10 + 20);
            if ((v44 & 0x40000000) != 0) {
              uint64_t v45 = *(void *)(v10 - 8);
            }
            else {
              uint64_t v45 = v10 - 32 * (v44 & 0x7FFFFFF);
            }
            BOOL v43 = (uint64_t *)(v45 + 32 * (2 * v8) + 32);
            break;
        }
      }
      uint64_t v5 = *v43;
LABEL_15:
      uint64_t v15 = *(void *)(v13 + 48);
      uint64_t v16 = *(unsigned int *)(v13 + 64);
      if (v16)
      {
        LODWORD(v17) = ((v5 >> 4) ^ (v5 >> 9)) & (v16 - 1);
        uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
        uint64_t v19 = *v18;
        if (v5 == *v18) {
          goto LABEL_22;
        }
        int v20 = 1;
        while (v19 != -4096)
        {
          int v21 = v17 + v20++;
          uint64_t v17 = v21 & (v16 - 1);
          uint64_t v19 = *(void *)(v15 + 16 * v17);
          if (v5 == v19)
          {
            uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
            goto LABEL_22;
          }
        }
      }
      uint64_t v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_22:
      if (v18 != (uint64_t *)(v15 + 16 * v16))
      {
        uint64_t v22 = *(void *)(v18[1] + 8);
        uint64_t v7 = v22 ? v22 - 32 : 0;
        if (*(unsigned char *)(v7 + 16) == 27)
        {
          unint64_t v12 = a3 + 8;
          int v23 = *(_DWORD *)(v7 + 20);
          uint64_t v24 = v23 & 0x7FFFFFF;
          if (a4)
          {
            if (v24)
            {
              uint64_t v48 = 0;
              uint64_t v49 = 0;
              uint64_t v5 = 8 * v24;
              do
              {
                int v50 = *(_DWORD *)(v7 + 20);
                if ((v50 & 0x40000000) != 0) {
                  uint64_t v51 = *(void *)(v7 - 8);
                }
                else {
                  uint64_t v51 = v7 - 32 * (v50 & 0x7FFFFFF);
                }
                if (*(void *)(v51 + 32 * *(unsigned int *)(v7 + 76) + v49) == a2)
                {
                  uint64_t v52 = v51 + v48;
                  if (*(void *)(v51 + v48))
                  {
                    **(void **)(v52 + 16) = *(void *)(v52 + 8);
                    uint64_t v55 = *(void *)(v52 + 8);
                    if (v55) {
                      *(void *)(v55 + 16) = *(void *)(v52 + 16);
                    }
                  }
                  *(void *)uint64_t v52 = a3;
                  if (a3)
                  {
                    uint64_t v53 = *(void *)v12;
                    uint64_t v54 = v51 + v48;
                    *(void *)(v54 + 8) = *(void *)v12;
                    if (v53) {
                      *(void *)(v53 + 16) = v54 + 8;
                    }
                    *(void *)(v54 + 16) = v12;
                    *(void *)unint64_t v12 = v52;
                  }
                }
                v49 += 8;
                v48 += 32;
              }
              while (v5 != v49);
            }
          }
          else
          {
            if (v24 == *(_DWORD *)(v7 + 76))
            {
              unsigned int v25 = v24 + (v24 >> 1);
              if (v25 <= 2) {
                uint64_t v26 = result;
              }
              else {
                uint64_t v26 = v25;
              }
              *(_DWORD *)(v7 + 76) = v26;
              uint64_t v62 = a2;
              uint64_t v63 = a3;
              uint64_t v60 = a5;
              uint64_t v61 = v6;
              unsigned int v59 = (void *)(a3 + 8);
              if ((v23 & 0x40000000) != 0) {
                unsigned int v27 = *(uint64_t **)(v7 - 8);
              }
              else {
                unsigned int v27 = (uint64_t *)(v7 - 32 * v24);
              }
              uint64_t v28 = operator new(40 * v26);
              *(void *)(v7 - 8) = v28;
              int v29 = v28;
              do
              {
                *int v29 = 0;
                v29[1] = 0;
                void v29[2] = 0;
                _OWORD v29[3] = v7;
                v29 += 4;
              }
              while (v29 != &v28[4 * v26]);
              int v30 = *(_DWORD *)(v7 + 20);
              if ((v30 & 0x40000000) != 0) {
                uint64_t v31 = (uint64_t)v28;
              }
              else {
                uint64_t v31 = v7 - 32 * (v30 & 0x7FFFFFF);
              }
              sub_1CC5E4108((uint64_t)&v64, v27, &v27[4 * v24], v31);
              if (v24)
              {
                memmove((void *)(v31 + 32 * v26), &v27[4 * v24], 8 * v24);
                uint64_t v32 = 4 * v24;
                do
                {
                  uint64_t v33 = &v27[v32];
                  if (v27[v32 - 4])
                  {
                    *(void *)*(v33 - 2) = *(v33 - 3);
                    uint64_t v34 = *(v33 - 3);
                    if (v34) {
                      *(void *)(v34 + 16) = *(v33 - 2);
                    }
                  }
                  v32 -= 4;
                }
                while (v32 * 8);
              }
              operator delete(v27);
              int v23 = *(_DWORD *)(v7 + 20);
              a4 = 0;
              a2 = v62;
              a3 = v63;
              a5 = v60;
              uint64_t v6 = v61;
              double result = 2;
              unint64_t v12 = (unint64_t)v59;
            }
            uint64_t v5 = (v23 + 1) & 0x7FFFFFF;
            *(_DWORD *)(v7 + 20) = v23 & 0xF8000000 | (v23 + 1) & 0x7FFFFFF;
            if ((v23 & 0x40000000) != 0) {
              uint64_t v35 = *(void *)(v7 - 8);
            }
            else {
LABEL_85:
            }
              uint64_t v35 = v7 - 32 * v5;
            uint64_t v36 = (v5 - 1);
            uint64_t v37 = v35 + 32 * v36;
            if (*(void *)v37)
            {
              **(void **)(v37 + 16) = *(void *)(v37 + 8);
              uint64_t v47 = *(void *)(v37 + 8);
              if (v47) {
                *(void *)(v47 + 16) = *(void *)(v37 + 16);
              }
            }
            *(void *)uint64_t v37 = a3;
            if (a3)
            {
              uint64_t v38 = *(void *)v12;
              uint64_t v39 = v35 + 32 * v36;
              *(void *)(v39 + 8) = *(void *)v12;
              if (v38) {
                *(void *)(v38 + 16) = v39 + 8;
              }
              *(void *)(v39 + 16) = v12;
              *(void *)unint64_t v12 = v37;
            }
            int v40 = *(_DWORD *)(v7 + 20);
            uint64_t v41 = v40 & 0x7FFFFFF;
            if ((v40 & 0x40000000) != 0) {
              uint64_t v42 = *(void *)(v7 - 8);
            }
            else {
              uint64_t v42 = v7 - 32 * v41;
            }
            uint64_t v5 = *(unsigned int *)(v7 + 76);
            *(void *)(v42 + 32 * v5 + 8 * (v41 - 1)) = a2;
          }
        }
      }
      ++v8;
    }
    while (v8 != a5);
  }
  return result;
}

uint64_t llvm::MemorySSA::renameBlock(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == (uint64_t *)(v4 + 16 * v5)) {
    return a3;
  }
  uint64_t v11 = v7[1];
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12 == v11) {
    return a3;
  }
  do
  {
    uint64_t result = v12 - 32;
    if (v12) {
      uint64_t v14 = v12 - 32;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v12)
    {
      int v15 = *(unsigned __int8 *)(v14 + 16);
      if ((v15 - 27) >= 0xFFFFFFFE)
      {
        if (v15 == 25) {
          uint64_t v16 = v14;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = v16 - 32;
        if (v15 != 25) {
          uint64_t v17 = v14 - 64;
        }
        if (*(void *)v17) {
          BOOL v18 = a4 == 0;
        }
        else {
          BOOL v18 = 0;
        }
        if (!v18)
        {
          if (*(void *)v17)
          {
            **(void **)(v17 + 16) = *(void *)(v17 + 8);
            uint64_t v21 = *(void *)(v17 + 8);
            if (v21) {
              *(void *)(v21 + 16) = *(void *)(v17 + 16);
            }
          }
          *(void *)uint64_t v17 = a3;
          if (a3)
          {
            uint64_t v19 = (void *)(a3 + 8);
            uint64_t v20 = *(void *)(a3 + 8);
            *(void *)(v17 + 8) = v20;
            if (v20) {
              *(void *)(v20 + 16) = v17 + 8;
            }
            *(void *)(v17 + 16) = v19;
            *uint64_t v19 = v17;
          }
        }
        if (v15 == 26) {
          uint64_t result = v14;
        }
        else {
          uint64_t result = a3;
        }
      }
    }
    uint64_t v12 = *(void *)(v12 + 8);
    a3 = result;
  }
  while (v12 != v11);
  return result;
}

void llvm::MemorySSA::renamePass(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::SmallPtrSetImplBase *this, int a5, int a6)
{
  v67[96] = *MEMORY[0x1E4F143B8];
  unsigned int v65 = v67;
  uint64_t v66 = 0x2000000000;
  uint64_t v12 = *a2;
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *((unsigned int *)this + 5);
  if (v13 == *(void *)this)
  {
    if (v14)
    {
      int v15 = 0;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (uint64_t *)*((void *)this + 1);
      do
      {
        if (*v17 == v12) {
          goto LABEL_33;
        }
        if (*v17 == -2) {
          int v15 = v17;
        }
        ++v17;
        v16 -= 8;
      }
      while (v16);
      if (v15)
      {
        *int v15 = v12;
        --*((_DWORD *)this + 6);
        goto LABEL_36;
      }
    }
    unsigned int v18 = *((_DWORD *)this + 4);
    if (v14 < v18)
    {
      *((_DWORD *)this + 5) = v14 + 1;
      *(void *)(v13 + 8 * v14) = v12;
      goto LABEL_36;
    }
  }
  else
  {
    unsigned int v18 = *((_DWORD *)this + 4);
  }
  if (3 * v18 <= 4 * ((int)v14 - *((_DWORD *)this + 6)))
  {
    if (v18 >= 0x40) {
      v18 *= 2;
    }
    else {
      unsigned int v18 = 128;
    }
    goto LABEL_101;
  }
  if (v18 - v14 < v18 >> 3)
  {
LABEL_101:
    llvm::SmallPtrSetImplBase::Grow(this, v18);
    unsigned int v18 = *((_DWORD *)this + 4);
    uint64_t v13 = *((void *)this + 1);
  }
  unsigned int v19 = v18 - 1;
  unsigned int v20 = (v18 - 1) & ((v12 >> 4) ^ (v12 >> 9));
  uint64_t v21 = (uint64_t *)(v13 + 8 * v20);
  uint64_t v22 = *v21;
  if (*v21 != -1)
  {
    int v23 = 0;
    int v24 = 1;
    while (v22 != v12)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == -2;
      }
      if (v25) {
        int v23 = v21;
      }
      unsigned int v26 = v20 + v24++;
      unsigned int v20 = v26 & v19;
      uint64_t v21 = (uint64_t *)(v13 + 8 * (v26 & v19));
      uint64_t v22 = *v21;
      if (*v21 == -1) {
        goto LABEL_26;
      }
    }
    goto LABEL_33;
  }
  int v23 = 0;
LABEL_26:
  if (v23) {
    unsigned int v27 = v23;
  }
  else {
    unsigned int v27 = v21;
  }
  if (*v27 == v12)
  {
LABEL_33:
    if (a5) {
      goto LABEL_94;
    }
    goto LABEL_36;
  }
  if (*v27 == -2) {
    --*((_DWORD *)this + 6);
  }
  else {
    ++*((_DWORD *)this + 5);
  }
  *unsigned int v27 = v12;
LABEL_36:
  uint64_t v28 = llvm::MemorySSA::renameBlock(a1, *a2, a3, a6);
  llvm::MemorySSA::renameSuccessorPhis(a1, *a2, v28, a6, v29);
  unint64_t v30 = a2[3];
  v63.n128_u64[0] = (unint64_t)a2;
  v63.n128_u64[1] = v30;
  uint64_t v64 = v28;
  sub_1CBC0D590((uint64_t)&v65, &v63);
  unsigned int v32 = v66;
  if (v66)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v33 = (char *)v65 + 24 * v32;
        uint64_t v34 = (uint64_t **)*((void *)v33 - 2);
        if (v34 != (uint64_t **)(*(void *)(*((void *)v33 - 3) + 24)
                               + 8 * *(unsigned int *)(*((void *)v33 - 3) + 32)))
          break;
        LODWORD(v66) = --v32;
        if (!v32) {
          goto LABEL_94;
        }
      }
      uint64_t v35 = *((void *)v33 - 1);
      uint64_t v36 = *v34;
      *((void *)v33 - 2) = v34 + 1;
      uint64_t v37 = *v36;
      uint64_t v38 = *((void *)this + 1);
      uint64_t v39 = *((unsigned int *)this + 5);
      if (v38 != *(void *)this)
      {
        unsigned int v43 = *((_DWORD *)this + 4);
        goto LABEL_51;
      }
      if (!v39) {
        break;
      }
      int v40 = 0;
      uint64_t v41 = 8 * v39;
      uint64_t v42 = (uint64_t *)*((void *)this + 1);
      while (*v42 != v37)
      {
        if (*v42 == -2) {
          int v40 = v42;
        }
        ++v42;
        v41 -= 8;
        if (!v41)
        {
          if (!v40) {
            goto LABEL_46;
          }
          *int v40 = v37;
          --*((_DWORD *)this + 6);
          goto LABEL_86;
        }
      }
LABEL_72:
      if (a5)
      {
        uint64_t v53 = *(void *)(a1 + 72);
        uint64_t v54 = *(unsigned int *)(a1 + 88);
        if (!v54) {
          goto LABEL_79;
        }
        LODWORD(v55) = (v54 - 1) & ((v37 >> 4) ^ (v37 >> 9));
        int v56 = (uint64_t *)(v53 + 16 * v55);
        uint64_t v57 = *v56;
        if (v37 != *v56)
        {
          int v58 = 1;
          while (v57 != -4096)
          {
            int v59 = v55 + v58++;
            uint64_t v55 = v59 & (v54 - 1);
            uint64_t v57 = *(void *)(v53 + 16 * v55);
            if (v37 == v57)
            {
              int v56 = (uint64_t *)(v53 + 16 * v55);
              goto LABEL_80;
            }
          }
LABEL_79:
          int v56 = (uint64_t *)(v53 + 16 * v54);
        }
LABEL_80:
        if (v56 != (uint64_t *)(v53 + 16 * v54))
        {
          uint64_t v60 = (uint64_t *)v56[1];
          if (v60)
          {
            uint64_t v61 = *v60;
            if (v61) {
              uint64_t v35 = v61 - 48;
            }
            else {
              uint64_t v35 = 0;
            }
          }
        }
        goto LABEL_87;
      }
LABEL_86:
      uint64_t v35 = llvm::MemorySSA::renameBlock(a1, v37, v35, a6);
LABEL_87:
      llvm::MemorySSA::renameSuccessorPhis(a1, v37, v35, a6, v31);
      unint64_t v62 = v36[3];
      v63.n128_u64[0] = (unint64_t)v36;
      v63.n128_u64[1] = v62;
      uint64_t v64 = v35;
      sub_1CBC0D590((uint64_t)&v65, &v63);
      unsigned int v32 = v66;
      if (!v66) {
        goto LABEL_94;
      }
    }
LABEL_46:
    unsigned int v43 = *((_DWORD *)this + 4);
    if (v39 < v43)
    {
      *((_DWORD *)this + 5) = v39 + 1;
      *(void *)(v38 + 8 * v39) = v37;
      goto LABEL_86;
    }
LABEL_51:
    if (3 * v43 <= 4 * ((int)v39 - *((_DWORD *)this + 6)))
    {
      if (v43 >= 0x40) {
        v43 *= 2;
      }
      else {
        unsigned int v43 = 128;
      }
    }
    else if (v43 - v39 >= v43 >> 3)
    {
      goto LABEL_53;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v43);
    unsigned int v43 = *((_DWORD *)this + 4);
    uint64_t v38 = *((void *)this + 1);
LABEL_53:
    unsigned int v44 = v43 - 1;
    unsigned int v45 = (v43 - 1) & ((v37 >> 4) ^ (v37 >> 9));
    unsigned int v46 = (uint64_t *)(v38 + 8 * v45);
    uint64_t v47 = *v46;
    if (*v46 == -1)
    {
      uint64_t v48 = 0;
LABEL_65:
      if (v48) {
        uint64_t v52 = v48;
      }
      else {
        uint64_t v52 = v46;
      }
      if (*v52 != v37)
      {
        if (*v52 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        uint64_t *v52 = v37;
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v48 = 0;
      int v49 = 1;
      while (v47 != v37)
      {
        if (v48) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v47 == -2;
        }
        if (v50) {
          uint64_t v48 = v46;
        }
        unsigned int v51 = v45 + v49++;
        unsigned int v45 = v51 & v44;
        unsigned int v46 = (uint64_t *)(v38 + 8 * (v51 & v44));
        uint64_t v47 = *v46;
        if (*v46 == -1) {
          goto LABEL_65;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_94:
  if (v65 != v67) {
    free(v65);
  }
}

void llvm::MemorySSA::markUnreachableAsLiveOnEntry(llvm::MemorySSA *this, llvm::BasicBlock *a2)
{
  unsigned int v3 = (llvm::BasicBlock *)*((void *)a2 + 5);
  if (v3 != (llvm::BasicBlock *)((char *)a2 + 40))
  {
    if (v3) {
      uint64_t v4 = (char *)v3 - 24;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4[16] == 30)
    {
LABEL_6:
      if (v4[16] == 30) {
LABEL_7:
      }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
      switch(v4[16])
      {
        case '""':
        case '#':
          goto LABEL_42;
        default:
          goto LABEL_7;
      }
    }
    switch(v4[16])
    {
      case 30:
LABEL_42:
        __break(1u);
        goto LABEL_6;
      case 31:
        int v27 = (*((_DWORD *)v4 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_40;
      case 32:
      case 38:
        int v27 = (*((_DWORD *)v4 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_40;
      case 33:
      case 37:
        goto LABEL_6;
      case 36:
        int v27 = *((_WORD *)v4 + 9) & 1;
        goto LABEL_40;
      case 39:
        int v27 = *((_DWORD *)v4 + 20) + 1;
LABEL_40:
        if (!v27) {
          break;
        }
        goto LABEL_6;
      default:
        break;
    }
  }
  uint64_t v5 = *((void *)this + 6);
  uint64_t v6 = *((unsigned int *)this + 16);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = v5 + 16 * v7;
    int v9 = *(llvm::BasicBlock **)v8;
    if (*(llvm::BasicBlock **)v8 == a2) {
      goto LABEL_17;
    }
    int v10 = 1;
    while (v9 != (llvm::BasicBlock *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      int v9 = *(llvm::BasicBlock **)(v5 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v5 + 16 * v7;
        goto LABEL_17;
      }
    }
  }
  uint64_t v8 = v5 + 16 * v6;
LABEL_17:
  if (v8 != v5 + 16 * v6)
  {
    uint64_t v12 = *(void *)(v8 + 8);
    uint64_t v13 = *(void *)(v12 + 8);
    while (v13 != v12)
    {
      uint64_t v14 = v13;
      uint64_t v13 = *(void *)(v13 + 8);
      if (v14) {
        uint64_t v15 = v14 - 32;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v14 && (int v16 = *(unsigned __int8 *)(v15 + 16), (v16 - 27) >= 0xFFFFFFFE))
      {
        if (v16 == 25) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = v17 - 32;
        BOOL v19 = v16 == 25;
        uint64_t v20 = *((void *)this + 12);
        if (!v19) {
          uint64_t v18 = v15 - 64;
        }
        if (*(void *)v18)
        {
          **(void **)(v18 + 16) = *(void *)(v18 + 8);
          uint64_t v26 = *(void *)(v18 + 8);
          if (v26) {
            *(void *)(v26 + 16) = *(void *)(v18 + 16);
          }
        }
        *(void *)uint64_t v18 = v20;
        if (v20)
        {
          uint64_t v23 = *(void *)(v20 + 8);
          uint64_t v21 = (void *)(v20 + 8);
          uint64_t v22 = v23;
          *(void *)(v18 + 8) = v23;
          if (v23) {
            *(void *)(v22 + 16) = v18 + 8;
          }
          *(void *)(v18 + 16) = v21;
          *uint64_t v21 = v18;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v15 + 32);
        BOOL v25 = *(void **)(v15 + 40);
        void *v25 = v24;
        *(void *)(v24 + 8) = v25;
        *(void *)(v15 + 32) = 0;
        *(void *)(v15 + 40) = 0;
        llvm::Value::deleteValue((void (**)(void))v15, a2);
      }
    }
  }
}

void llvm::MemorySSA::MemorySSA(llvm::MemorySSA *this, llvm::Function *a2, llvm::AAResults *a3, llvm::DominatorTree *a4)
{
  v10[18] = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = a4;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = (char *)this + 136;
  *((void *)this + 14) = (char *)this + 136;
  *((void *)this + 15) = 16;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *(void *)((char *)this + 309) = 0;
  *((void *)this + 38) = 0;
  v7[0] = (uint64_t)a3;
  v7[1] = 1;
  uint64_t v4 = 2;
  do
  {
    uint64_t v5 = &v7[v4];
    *(_OWORD *)uint64_t v5 = xmmword_1CFAC3060;
    *((_OWORD *)v5 + 1) = xmmword_1CFAC3060;
    v4 += 5;
  }
  while (v5 + 5 != v8);
  v8[0] = v10;
  v8[1] = 0;
  uint64_t v8[2] = &v9;
  void v8[3] = 0x400000000;
  v10[0] = &unk_1F2600DB8;
  v10[1] = 1;
  for (uint64_t i = 64; i != 80; i += 2)
    v7[i] = -4096;
  llvm::MemorySSA::buildMemorySSA((uint64_t)this, v7);
}

void llvm::MemorySSA::buildMemorySSA(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = operator new(0xA0uLL);
  v5[21] = v5[21] & 0x38000000 | 2;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *((void *)v5 + 8) = ***(void ***)v7 + 1576;
  uint64_t v8 = (char *)(v5 + 16);
  *((void *)v5 + 3) = v5 + 16;
  *((void *)v5 + 7) = v5 + 16;
  int v9 = *(_DWORD *)(a1 + 312);
  *(_DWORD *)(a1 + 312) = v9 + 1;
  *((void *)v5 + 9) = 0;
  *((void *)v5 + 10) = 0x20000001ALL;
  *((void *)v5 + 11) = llvm::MemoryDef::deleteMe;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((void *)v5 + 16) = v4;
  *((void *)v5 + 17) = 0;
  v5[36] = 1;
  *((unsigned char *)v5 + 148) = 1;
  int v10 = *(void (***)(void))(a1 + 96);
  *((_DWORD *)v8 + 22) = v9;
  *((_DWORD *)v8 + 23) = -1;
  *(void *)(a1 + 96) = v8;
  if (v10)
  {
    llvm::Value::deleteValue(v10, v6);
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t v80 = v84;
  uint64_t v81 = v84;
  uint64_t v82 = 32;
  int v83 = 0;
  uint64_t v11 = v7 + 72;
  uint64_t v12 = *(void *)(v7 + 80);
  uint64_t v74 = v11;
  if (v12 == v11) {
    goto LABEL_120;
  }
  while (1)
  {
    uint64_t v13 = (llvm::BasicBlock *)(v12 - 24);
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)((char *)v13 + 40);
    uint64_t v75 = v12;
    int v76 = v13;
    uint64_t v15 = (void *)*((void *)v13 + 6);
    if (v15 == (void *)((char *)v13 + 40)) {
      goto LABEL_85;
    }
    char v16 = 0;
    AccessList = 0;
    DefsList = 0;
    do
    {
      while (1)
      {
        uint64_t v19 = v15 ? (uint64_t)(v15 - 3) : 0;
        unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 <= 0x3B)
        {
          if (v20 == 37) {
            goto LABEL_32;
          }
          if (v20 != 33 && v20 != 39) {
            goto LABEL_26;
          }
        }
        else
        {
          if (v20 - 60 > 0x1C) {
            goto LABEL_26;
          }
          if (v20 != 84)
          {
            if (((1 << (v20 - 60)) & 0x10100039) != 0) {
              goto LABEL_32;
            }
            if (v20 != 61) {
              goto LABEL_26;
            }
            if ((*(_WORD *)(v19 + 18) & 0x301) != 0) {
              goto LABEL_32;
            }
            goto LABEL_25;
          }
          uint64_t v21 = *(void *)(v19 - 32);
          if (v21)
          {
            if (!*(unsigned char *)(v21 + 16)
              && *(void *)(v21 + 24) == *(void *)(v19 + 72)
              && (*(unsigned char *)(v21 + 33) & 0x20) != 0)
            {
              int v44 = *(_DWORD *)(v21 + 36);
              if (v44 == 7 || v44 == 126 || v44 == 244) {
                break;
              }
            }
          }
        }
        uint64_t v22 = *(void *)(v19 + 64);
        if (!v22 || (*(unsigned char *)(v22 + 20) & 4) == 0 && (*(unsigned char *)(v22 + 17) & 0x10) == 0)
        {
          LODWORD(v78) = 7;
          if (sub_1CC5CB59C(v19, (__int32 *)&v78, 1uLL))
          {
            uint64_t v64 = *(void *)(v19 - 32);
            if (!v64
              || *(unsigned char *)(v64 + 16)
              || *(void *)(v64 + 24) != *(void *)(v19 + 72)
              || *(_DWORD *)(v64 + 36) != 7)
            {
              goto LABEL_32;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v19, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v19, 44))
          {
            goto LABEL_32;
          }
        }
LABEL_25:
        unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
LABEL_26:
        uint64_t v23 = v20 - 33;
        if (v23 > 0x37) {
          break;
        }
        if (((1 << v23) & 0x8000000000041) != 0)
        {
          uint64_t v47 = *(void *)(v19 + 64);
          if (v47 && (*(unsigned char *)(v47 + 17) & 0x30) != 0) {
            break;
          }
          int v48 = *(_DWORD *)(v19 + 20);
          if (v48 < 0
            && (uint64_t v65 = v19 - 32 * (v48 & 0x7FFFFFF), v68 = *(void *)(v65 - 8), v66 = v65 - 8, (v67 = v68) != 0))
          {
            uint64_t v69 = -v67;
            while (1)
            {
              unsigned int v70 = *(_DWORD *)(*(void *)(v66 + v69) + 8);
              BOOL v71 = v70 > 7;
              int v72 = (1 << v70) & 0x83;
              if (v71 || v72 == 0) {
                break;
              }
              v69 += 16;
              if (!v69) {
                goto LABEL_79;
              }
            }
          }
          else
          {
LABEL_79:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v19, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(v19, 44) & 1) != 0)
            {
              break;
            }
          }
        }
        else if (v23 == 27)
        {
          if ((*(_WORD *)(v19 + 18) & 0x301) == 0) {
            break;
          }
        }
        else if (((1 << v23) & 0x808001D0000010) == 0)
        {
          break;
        }
LABEL_32:
        LOBYTE(v78) = 0;
        char v79 = 0;
        char ModRefInfo = llvm::AAResults::getModRefInfo(*a2, (llvm::Instruction *)v19, &v78, (uint64_t)(a2 + 1));
        if ((ModRefInfo & 2) != 0
          || ((int v25 = *(unsigned __int8 *)(v19 + 16), v25 == 60) || v25 == 61) && (*(_WORD *)(v19 + 18) & 0x301) != 0)
        {
          uint64_t v26 = operator new(0xA0uLL);
          v26[21] = v26[21] & 0x38000000 | 2;
          *((void *)v26 + 1) = 0;
          *((void *)v26 + 2) = 0;
          *(void *)uint64_t v26 = 0;
          *((void *)v26 + 5) = 0;
          *((void *)v26 + 6) = 0;
          *((void *)v26 + 4) = 0;
          *((void *)v26 + 8) = ***(void ***)v19 + 1576;
          int v27 = (char *)(v26 + 16);
          *((void *)v26 + 3) = v26 + 16;
          *((void *)v26 + 7) = v26 + 16;
          uint64_t v28 = *(void *)(v19 + 40);
          int v29 = *(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 312) = v29 + 1;
          *((void *)v26 + 9) = 0;
          *((void *)v26 + 10) = 0x20000001ALL;
          *((void *)v26 + 11) = llvm::MemoryDef::deleteMe;
          *((_OWORD *)v26 + 6) = 0u;
          *((_OWORD *)v26 + 7) = 0u;
          *((void *)v26 + 16) = v28;
          *((void *)v26 + 17) = v19;
          v26[36] = 1;
          *((unsigned char *)v26 + 148) = 1;
          v26[38] = v29;
          v26[39] = -1;
        }
        else
        {
          if ((ModRefInfo & 1) == 0) {
            break;
          }
          uint64_t v42 = operator new(0x80uLL);
          v42[13] = v42[13] & 0x38000000 | 1;
          *((void *)v42 + 1) = 0;
          *((void *)v42 + 2) = 0;
          *(void *)uint64_t v42 = 0;
          *((void *)v42 + 4) = ***(void ***)v19 + 1576;
          int v27 = (char *)(v42 + 8);
          *((void *)v42 + 3) = v42 + 8;
          uint64_t v43 = *(void *)(v19 + 40);
          *((void *)v42 + 5) = 0;
          *((unsigned char *)v42 + 48) = 25;
          *((unsigned char *)v42 + 49) = 0;
          *((_WORD *)v42 + 25) = 0;
          v42[13] = 1;
          *((void *)v42 + 7) = llvm::MemoryUse::deleteMe;
          *((_OWORD *)v42 + 4) = 0u;
          *((_OWORD *)v42 + 5) = 0u;
          *((void *)v42 + 12) = v43;
          *((void *)v42 + 13) = v19;
          v42[28] = 1;
          *((unsigned char *)v42 + 116) = 1;
          v42[30] = -1;
        }
        *(void *)&long long v78 = v19;
        int v30 = *(_DWORD *)(a1 + 40);
        if (v30)
        {
          uint64_t v31 = *(void *)(a1 + 24);
          int v32 = v30 - 1;
          unsigned int v33 = v32 & ((v19 >> 4) ^ (v19 >> 9));
          uint64_t v34 = (void *)(v31 + 16 * v33);
          uint64_t v35 = *v34;
          if (*v34 == v19) {
            goto LABEL_52;
          }
          uint64_t v36 = 0;
          int v37 = 1;
          while (v35 != -4096)
          {
            if (v36) {
              BOOL v38 = 0;
            }
            else {
              BOOL v38 = v35 == -8192;
            }
            if (v38) {
              uint64_t v36 = v34;
            }
            unsigned int v39 = v33 + v37++;
            unsigned int v33 = v39 & v32;
            uint64_t v34 = (void *)(v31 + 16 * v33);
            uint64_t v35 = *v34;
            if (*v34 == v19) {
              goto LABEL_52;
            }
          }
          int v40 = v36 ? v36 : v34;
        }
        else
        {
          int v40 = 0;
        }
        uint64_t v34 = sub_1CC0B1698(a1 + 24, (uint64_t)&v78, (uint64_t *)&v78, v40);
        *uint64_t v34 = v78;
        v34[1] = 0;
LABEL_52:
        v34[1] = v27;
        if (!AccessList) {
          AccessList = llvm::MemorySSA::getOrCreateAccessList((llvm::MemorySSA *)a1, v76);
        }
        uint64_t v41 = *(void *)AccessList;
        *((void *)v27 + 4) = *(void *)AccessList;
        *((void *)v27 + 5) = AccessList;
        *(void *)(v41 + 8) = v27 + 32;
        *(void *)AccessList = v27 + 32;
        if (v27[16] != 26) {
          break;
        }
        if (!DefsList) {
          DefsList = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, v76);
        }
        uint64_t v45 = *(void *)DefsList;
        *((void *)v27 + 6) = *(void *)DefsList;
        *((void *)v27 + 7) = DefsList;
        unsigned int v46 = v27 + 48;
        *(void *)(v45 + 8) = v46;
        *(void *)DefsList = v46;
        uint64_t v15 = (void *)v15[1];
        char v16 = 1;
        if (v15 == v14) {
          goto LABEL_87;
        }
      }
      uint64_t v15 = (void *)v15[1];
    }
    while (v15 != v14);
    if ((v16 & 1) == 0) {
      goto LABEL_85;
    }
LABEL_87:
    int v49 = v81;
    uint64_t v50 = HIDWORD(v82);
    if (v81 != v80)
    {
      unsigned int v54 = v82;
      goto LABEL_98;
    }
    if (HIDWORD(v82))
    {
      unsigned int v51 = 0;
      uint64_t v52 = 8 * HIDWORD(v82);
      uint64_t v53 = (llvm::BasicBlock **)v81;
      do
      {
        if (*v53 == v76) {
          goto LABEL_85;
        }
        if (*v53 == (llvm::BasicBlock *)-2) {
          unsigned int v51 = v53;
        }
        ++v53;
        v52 -= 8;
      }
      while (v52);
      if (v51)
      {
        unint64_t *v51 = v76;
        --v83;
        goto LABEL_85;
      }
    }
    unsigned int v54 = v82;
    if (HIDWORD(v82) < v82)
    {
      ++HIDWORD(v82);
      *(void *)&v81[8 * v50] = v76;
      goto LABEL_85;
    }
LABEL_98:
    if (3 * v54 <= 4 * (HIDWORD(v82) - v83))
    {
      if (v54 >= 0x40) {
        v54 *= 2;
      }
      else {
        unsigned int v54 = 128;
      }
LABEL_126:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v80, v54);
      unsigned int v54 = v82;
      int v49 = v81;
      goto LABEL_100;
    }
    if (v54 - HIDWORD(v82) < v54 >> 3) {
      goto LABEL_126;
    }
LABEL_100:
    unsigned int v55 = v54 - 1;
    unsigned int v56 = (v54 - 1) & ((v76 >> 4) ^ (v76 >> 9));
    uint64_t v57 = (llvm::BasicBlock **)&v49[8 * v56];
    int v58 = *v57;
    if (*v57 == (llvm::BasicBlock *)-1)
    {
      int v59 = 0;
LABEL_113:
      if (v59) {
        __n128 v63 = v59;
      }
      else {
        __n128 v63 = v57;
      }
      if (*v63 != v76)
      {
        if (*v63 == (llvm::BasicBlock *)-2) {
          --v83;
        }
        else {
          ++HIDWORD(v82);
        }
        *__n128 v63 = v76;
      }
    }
    else
    {
      int v59 = 0;
      int v60 = 1;
      while (v58 != v76)
      {
        if (v59) {
          BOOL v61 = 0;
        }
        else {
          BOOL v61 = v58 == (llvm::BasicBlock *)-2;
        }
        if (v61) {
          int v59 = v57;
        }
        unsigned int v62 = v56 + v60++;
        unsigned int v56 = v62 & v55;
        uint64_t v57 = (llvm::BasicBlock **)&v49[8 * (v62 & v55)];
        int v58 = *v57;
        if (*v57 == (llvm::BasicBlock *)-1) {
          goto LABEL_113;
        }
      }
    }
LABEL_85:
    uint64_t v12 = *(void *)(v75 + 8);
    if (v12 == v74) {
LABEL_120:
    }
      llvm::MemorySSA::placePHINodes();
  }
}

void llvm::MemorySSA::~MemorySSA(llvm::MemorySSA *this)
{
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((unsigned int *)this + 16);
  uint64_t v4 = (void *)(v2 + 16 * v3);
  if (*((_DWORD *)this + 14))
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = (void *)*((void *)this + 6);
      while (*v6 == -4096 || *v6 == -8192)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5) {
          goto LABEL_61;
        }
      }
    }
    else
    {
      uint64_t v6 = (void *)*((void *)this + 6);
    }
  }
  else
  {
LABEL_61:
    uint64_t v6 = (void *)(v2 + 16 * v3);
  }
  uint64_t v7 = (void *)(v2 + 16 * v3);
LABEL_9:
  while (v6 != v7)
  {
    uint64_t v8 = v6[1];
    for (uint64_t i = *(void *)(v8 + 8); i != v8; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v10 = i - 32;
      }
      else {
        uint64_t v10 = 0;
      }
      int v11 = *(_DWORD *)(v10 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        uint64_t v13 = *(void *)(v10 - 8);
        uint64_t v12 = v11 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v12 = v11 & 0x7FFFFFF;
        uint64_t v13 = v10 - 32 * v12;
      }
      if (v12)
      {
        uint64_t v14 = 32 * v12;
        uint64_t v15 = (void **)(v13 + 16);
        do
        {
          if (*(v15 - 2))
          {
            **uint64_t v15 = *(v15 - 1);
            uint64_t v16 = (uint64_t)*(v15 - 1);
            if (v16) {
              *(void *)(v16 + 16) = *v15;
            }
          }
          *(v15 - 2) = 0;
          v15 += 4;
          v14 -= 32;
        }
        while (v14);
      }
    }
    uint64_t v17 = v6 + 2;
    uint64_t v6 = v4;
    if (v17 != v4)
    {
      uint64_t v6 = v17;
      while (*v6 == -4096 || *v6 == -8192)
      {
        v6 += 2;
        if (v6 == v4)
        {
          uint64_t v6 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v18 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v18) {
    MEMORY[0x1D25D9CE0](v18, 0xA1C409BE6959DLL);
  }
  uint64_t v19 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v19) {
    MEMORY[0x1D25D9CE0](v19, 0xA1C409BE6959DLL);
  }
  unsigned int v20 = (void *)*((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v20)
  {
    MEMORY[0x1D25D9CD0](v20[295], 8);
    uint64_t v21 = (void *)v20[5];
    if (v21 != v20 + 7) {
      free(v21);
    }
    MEMORY[0x1D25D9CE0](v20, 0x10F0C408D0AF1A8);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 33), 8);
  uint64_t v23 = (void *)*((void *)this + 14);
  if (v23 != *((void **)this + 13)) {
    free(v23);
  }
  uint64_t v24 = (void (**)(void))*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v24) {
    llvm::Value::deleteValue(v24, v22);
  }
  uint64_t v25 = *((unsigned int *)this + 22);
  uint64_t v26 = *((void *)this + 9);
  if (v25)
  {
    int v27 = (uint64_t *)(v26 + 8);
    uint64_t v28 = 16 * v25;
    do
    {
      uint64_t v29 = *(v27 - 1);
      if (v29 != -4096 && v29 != -8192)
      {
        uint64_t v30 = *v27;
        *int v27 = 0;
        if (v30) {
          MEMORY[0x1D25D9CE0](v30, 0x20C40A4A59CD2);
        }
      }
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    uint64_t v26 = *((void *)this + 9);
  }
  MEMORY[0x1D25D9CD0](v26, 8);
  uint64_t v32 = *((unsigned int *)this + 16);
  uint64_t v33 = *((void *)this + 6);
  if (v32)
  {
    uint64_t v34 = (uint64_t *)(v33 + 8);
    uint64_t v35 = 16 * v32;
    do
    {
      uint64_t v36 = *(v34 - 1);
      if (v36 != -4096 && v36 != -8192)
      {
        uint64_t v37 = *v34;
        *uint64_t v34 = 0;
        if (v37) {
          sub_1CC0AF7AC(v37, v31);
        }
      }
      v34 += 2;
      v35 -= 16;
    }
    while (v35);
    uint64_t v33 = *((void *)this + 6);
  }
  MEMORY[0x1D25D9CD0](v33, 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 3), 8);
}

const llvm::BasicBlock *llvm::MemorySSA::getOrCreateAccessList(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  uint64_t v2 = a2;
  uint64_t v6 = *((void *)this + 6);
  uint64_t v4 = (char *)this + 48;
  uint64_t v5 = v6;
  uint64_t v29 = a2;
  uint64_t v30 = 0;
  uint64_t v7 = (llvm::Value *)*((unsigned int *)v4 + 4);
  unsigned int v8 = v2 >> 4;
  if (!v7)
  {
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  unsigned int v9 = (v7 - 1) & (v8 ^ (v2 >> 9));
  uint64_t v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
  int v11 = *v10;
  if (*v10 != v2)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (const llvm::BasicBlock *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (const llvm::BasicBlock *)-8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & (v7 - 1);
      uint64_t v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
      int v11 = *v10;
      if (*v10 == v2) {
        return v10[1];
      }
    }
    if (v12) {
      uint64_t v10 = v12;
    }
LABEL_14:
    int v16 = *((_DWORD *)this + 14);
    if (4 * v16 + 4 >= (3 * v7))
    {
      sub_1CC0AF5F0((uint64_t)v4, 2 * v7);
      uint64_t v20 = *((void *)this + 6);
      int v21 = *((_DWORD *)this + 16) - 1;
      unsigned int v22 = (v8 ^ (v2 >> 9)) & v21;
      uint64_t v10 = (const llvm::BasicBlock **)(v20 + 16 * v22);
      uint64_t v23 = *v10;
      if (*v10 == v2)
      {
LABEL_18:
        ++*((_DWORD *)this + 14);
        if (v2 != (const llvm::BasicBlock *)-4096) {
          --*((_DWORD *)this + 15);
        }
        *uint64_t v10 = v29;
        uint64_t v17 = (const llvm::BasicBlock *)v30;
        uint64_t v30 = 0;
        v10[1] = v17;
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          sub_1CC0AF7AC(v18, v7);
        }
        operator new();
      }
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != (const llvm::BasicBlock *)-4096)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == (const llvm::BasicBlock *)-8192;
        }
        if (v26) {
          uint64_t v24 = v10;
        }
        unsigned int v27 = v22 + v25++;
        unsigned int v22 = v27 & v21;
        uint64_t v10 = (const llvm::BasicBlock **)(v20 + 16 * v22);
        uint64_t v23 = *v10;
        if (*v10 == v2) {
          goto LABEL_18;
        }
      }
      if (v24) {
        uint64_t v10 = v24;
      }
    }
    else if ((int)v7 + ~v16 - *((_DWORD *)this + 15) <= v7 >> 3)
    {
      uint64_t v28 = (uint64_t)v4;
      sub_1CC0AF5F0((uint64_t)v4, (int)v7);
      uint64_t v31 = 0;
      sub_1CBA0E618(v28, &v29, &v31);
      uint64_t v10 = v31;
    }
    uint64_t v2 = *v10;
    goto LABEL_18;
  }
  return v10[1];
}

const llvm::BasicBlock *llvm::MemorySSA::getOrCreateDefsList(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  uint64_t v2 = a2;
  uint64_t v6 = *((void *)this + 9);
  uint64_t v4 = (char *)this + 72;
  uint64_t v5 = v6;
  uint64_t v29 = a2;
  uint64_t v30 = 0;
  unsigned int v7 = *((_DWORD *)v4 + 4);
  unsigned int v8 = v2 >> 4;
  if (!v7)
  {
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  unsigned int v9 = (v7 - 1) & (v8 ^ (v2 >> 9));
  uint64_t v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
  int v11 = *v10;
  if (*v10 != v2)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != (const llvm::BasicBlock *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == (const llvm::BasicBlock *)-8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & (v7 - 1);
      uint64_t v10 = (const llvm::BasicBlock **)(v5 + 16 * v9);
      int v11 = *v10;
      if (*v10 == v2) {
        return v10[1];
      }
    }
    if (v12) {
      uint64_t v10 = v12;
    }
LABEL_14:
    int v16 = *((_DWORD *)this + 20);
    if (4 * v16 + 4 >= 3 * v7)
    {
      sub_1CC0AF834((uint64_t)v4, 2 * v7);
      uint64_t v20 = *((void *)this + 9);
      int v21 = *((_DWORD *)this + 22) - 1;
      unsigned int v22 = (v8 ^ (v2 >> 9)) & v21;
      uint64_t v10 = (const llvm::BasicBlock **)(v20 + 16 * v22);
      uint64_t v23 = *v10;
      if (*v10 == v2)
      {
LABEL_18:
        ++*((_DWORD *)this + 20);
        if (v2 != (const llvm::BasicBlock *)-4096) {
          --*((_DWORD *)this + 21);
        }
        *uint64_t v10 = v29;
        uint64_t v17 = v30;
        uint64_t v30 = 0;
        v10[1] = v17;
        uint64_t v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          MEMORY[0x1D25D9CE0](v18, 0x20C40A4A59CD2);
        }
        operator new();
      }
      uint64_t v24 = 0;
      int v25 = 1;
      while (v23 != (const llvm::BasicBlock *)-4096)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == (const llvm::BasicBlock *)-8192;
        }
        if (v26) {
          uint64_t v24 = v10;
        }
        unsigned int v27 = v22 + v25++;
        unsigned int v22 = v27 & v21;
        uint64_t v10 = (const llvm::BasicBlock **)(v20 + 16 * v22);
        uint64_t v23 = *v10;
        if (*v10 == v2) {
          goto LABEL_18;
        }
      }
      if (v24) {
        uint64_t v10 = v24;
      }
    }
    else if (v7 + ~v16 - *((_DWORD *)this + 21) <= v7 >> 3)
    {
      uint64_t v28 = (uint64_t)v4;
      sub_1CC0AF834((uint64_t)v4, v7);
      uint64_t v31 = 0;
      sub_1CBA0E618(v28, &v29, &v31);
      uint64_t v10 = v31;
    }
    uint64_t v2 = *v10;
    goto LABEL_18;
  }
  return v10[1];
}

void llvm::MemorySSA::OptimizeUses::optimizeUses(llvm::MemorySSA::OptimizeUses *this)
{
  v55[16] = *MEMORY[0x1E4F143B8];
  uint64_t v53 = v55;
  v55[0] = *(void *)(*(void *)this + 96);
  uint64_t v54 = 0x1000000001;
  uint64_t v31 = *(unsigned char **)(*((void *)this + 3) + 48);
  sub_1CC076464((uint64_t *)&v31, (uint64_t)&v40);
  uint64_t v2 = v36;
  uint64_t v31 = v36;
  uint64_t v3 = v41;
  if (v41 == v40)
  {
    uint64_t v32 = v36;
    uint64_t v4 = v41;
  }
  else
  {
    unsigned int v24 = v42;
    uint64_t v2 = malloc_type_malloc(8 * v42, 0x4065EBACuLL);
    if (!v2)
    {
      if (v24) {
        goto LABEL_69;
      }
      uint64_t v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2) {
        goto LABEL_69;
      }
    }
    uint64_t v32 = v2;
    uint64_t v4 = v40;
    uint64_t v3 = v41;
  }
  unsigned int v5 = v43;
  unsigned int v33 = v42;
  if (v3 == v4) {
    unsigned int v6 = v43;
  }
  else {
    unsigned int v6 = v42;
  }
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    unsigned int v5 = v43;
  }
  unsigned int v34 = v5;
  int v35 = v44;
  BOOL v38 = 0;
  uint64_t v39 = 0;
  long long __p = 0;
  sub_1CBF340A8(&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - (unsigned char *)v45) >> 3));
  unsigned int v7 = v27;
  unsigned int v8 = v48;
  if (v48 != v47)
  {
    unsigned int v25 = v49;
    unsigned int v7 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (v7 || !v25 && (unsigned int v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      BOOL v26 = v7;
      unsigned int v9 = v47;
      unsigned int v8 = v48;
      goto LABEL_10;
    }
LABEL_69:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  BOOL v26 = v27;
  unsigned int v9 = v48;
LABEL_10:
  if (v8 == v9) {
    unsigned int v10 = v50;
  }
  else {
    unsigned int v10 = v49;
  }
  if (v10) {
    memmove(v7, v8, 8 * v10);
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  sub_1CBF340A8(&v28, v51, v52, 0xAAAAAAAAAAAAAAABLL * ((v52 - (unsigned char *)v51) >> 3));
  while (1)
  {
    if (v38 - (unsigned char *)__p != v29 - v28) {
      goto LABEL_30;
    }
    if (__p == v38) {
      break;
    }
    int v11 = v28 + 8;
    uint64_t v12 = (char *)__p + 8;
    while (1)
    {
      int v13 = v12 - 8;
      if (*((void *)v12 - 1) != *((void *)v11 - 1)) {
        break;
      }
      int v14 = v11[8];
      if (v12[8]) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15)
      {
        if ((v12[8] == 0) == (v14 != 0)) {
          break;
        }
      }
      else if (*(void *)v12 != *(void *)v11)
      {
        break;
      }
      v11 += 24;
      v12 += 24;
      if (v13 + 24 == v38) {
        goto LABEL_41;
      }
    }
LABEL_30:
    uint64_t v16 = **((void **)v38 - 3);
    uint64_t v17 = *(void *)(*(void *)this + 48);
    uint64_t v18 = *(unsigned int *)(*(void *)this + 64);
    if (!v18) {
      goto LABEL_36;
    }
    LODWORD(v19) = ((v16 >> 4) ^ (v16 >> 9)) & (v18 - 1);
    uint64_t v20 = (uint64_t *)(v17 + 16 * v19);
    uint64_t v21 = *v20;
    if (v16 != *v20)
    {
      int v22 = 1;
      while (v21 != -4096)
      {
        int v23 = v19 + v22++;
        uint64_t v19 = v23 & (v18 - 1);
        uint64_t v21 = *(void *)(v17 + 16 * v19);
        if (v16 == v21)
        {
          uint64_t v20 = (uint64_t *)(v17 + 16 * v19);
          goto LABEL_37;
        }
      }
LABEL_36:
      uint64_t v20 = (uint64_t *)(v17 + 16 * v18);
    }
LABEL_37:
    if (v20 != (uint64_t *)(v17 + 16 * v18) && v20[1]) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    sub_1CBFE66A8((llvm::SmallPtrSetImplBase *)&v31);
  }
LABEL_41:
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26 != v27) {
    free(v26);
  }
  if (__p)
  {
    BOOL v38 = (char *)__p;
    operator delete(__p);
  }
  if (v32 != v31) {
    free(v32);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v48 != v47) {
    free(v48);
  }
  if (v45)
  {
    unsigned int v46 = v45;
    operator delete(v45);
  }
  if (v41 != v40) {
    free(v41);
  }
  MEMORY[0x1D25D9CD0](0, 8);
  if (v53 != v55) {
    free(v53);
  }
}

void llvm::MemorySSA::placePHINodes()
{
}

void sub_1CC0A8014()
{
}

char *llvm::MemorySSA::createMemoryPhi(llvm::MemorySSA *this, llvm::BasicBlock *a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = ***(void ***)a2 + 1576;
  unsigned int v5 = *((_DWORD *)this + 78);
  *((_DWORD *)this + 78) = v5 + 1;
  *((void *)v4 + 2) = 0;
  v4[24] = 27;
  v4[25] = 0;
  *((_WORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 7) = 0x40000000;
  *((void *)v4 + 4) = llvm::MemoryPhi::deleteMe;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((void *)v4 + 9) = a2;
  *((void *)v4 + 10) = v5;
  *(void *)uint64_t v4 = operator new(0);
  llvm::MemorySSA::insertIntoListsForBlock((uint64_t)this, (uint64_t)(v4 + 8), a2, 0);
  uint64_t v8 = *((void *)this + 3);
  unsigned int v7 = (char *)this + 24;
  uint64_t v6 = v8;
  uint64_t v20 = a2;
  int v9 = *((_DWORD *)v7 + 4);
  if (!v9)
  {
    uint64_t v18 = 0;
LABEL_15:
    uint64_t v12 = (llvm::BasicBlock **)sub_1CC0B1698((uint64_t)v7, (uint64_t)&v20, (uint64_t *)&v20, v18);
    *uint64_t v12 = v20;
    v12[1] = 0;
    goto LABEL_16;
  }
  int v10 = v9 - 1;
  unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
  int v13 = *v12;
  if (*v12 != a2)
  {
    int v14 = 0;
    int v15 = 1;
    while (v13 != (llvm::BasicBlock *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == (llvm::BasicBlock *)-8192;
      }
      if (v16) {
        int v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
      int v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_16;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
    goto LABEL_15;
  }
LABEL_16:
  v12[1] = (llvm::BasicBlock *)(v4 + 8);
  return v4 + 8;
}

uint64_t llvm::MemorySSA::getWalkerImpl(llvm::MemorySSA *this)
{
  uint64_t result = *((void *)this + 37);
  if (!result)
  {
    if (!*((void *)this + 36)) {
      operator new();
    }
    operator new();
  }
  return result;
}

uint64_t llvm::MemorySSA::getSkipSelfWalker(llvm::MemorySSA *this)
{
  uint64_t result = *((void *)this + 38);
  if (!result)
  {
    if (*((void *)this + 36)) {
      operator new();
    }
    operator new();
  }
  return result;
}

const llvm::BasicBlock *llvm::MemorySSA::insertIntoListsForBlock(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  uint64_t result = llvm::MemorySSA::getOrCreateAccessList((llvm::MemorySSA *)a1, a3);
  if (a4)
  {
    uint64_t v30 = *(void *)result;
    *(void *)(a2 + 32) = *(void *)result;
    *(void *)(a2 + 40) = result;
    *(void *)(v30 + 8) = a2 + 32;
    *(void *)uint64_t result = a2 + 32;
    if (*(unsigned char *)(a2 + 16) != 25)
    {
      uint64_t result = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3);
      uint64_t v31 = *(void *)result;
      *(void *)(a2 + 48) = *(void *)result;
      *(void *)(a2 + 56) = result;
      uint64_t v32 = a2 + 48;
      *(void *)(v31 + 8) = v32;
      *(void *)uint64_t result = v32;
    }
  }
  else
  {
    int v9 = *(unsigned __int8 *)(a2 + 16);
    if (v9 == 27)
    {
      int v10 = (uint64_t *)*((void *)result + 1);
      uint64_t v11 = *v10;
      *(void *)(a2 + 40) = v10;
      *(void *)(a2 + 32) = v11;
      *(void *)(v11 + 8) = a2 + 32;
      *int v10 = a2 + 32;
      uint64_t result = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3);
      uint64_t v12 = (const llvm::BasicBlock *)*((void *)result + 1);
LABEL_4:
      uint64_t v13 = *(void *)v12;
      *(void *)(a2 + 48) = *(void *)v12;
      *(void *)(a2 + 56) = v12;
      uint64_t v14 = a2 + 48;
      *(void *)(v13 + 8) = v14;
      *(void *)uint64_t v12 = v14;
      goto LABEL_5;
    }
    unsigned int v33 = result;
    while (1)
    {
      unsigned int v33 = (const llvm::BasicBlock *)*((void *)v33 + 1);
      if (v33 == result) {
        break;
      }
      unsigned int v34 = (void *)((char *)v33 - 32);
      if (!v33) {
        unsigned int v34 = 0;
      }
      if (*((unsigned char *)v34 + 16) != 27) {
        goto LABEL_42;
      }
    }
    unsigned int v33 = result;
LABEL_42:
    uint64_t v35 = *(void *)v33;
    *(void *)(a2 + 32) = *(void *)v33;
    *(void *)(a2 + 40) = v33;
    *(void *)(v35 + 8) = a2 + 32;
    *(void *)unsigned int v33 = a2 + 32;
    if (v9 != 25)
    {
      uint64_t result = llvm::MemorySSA::getOrCreateDefsList((llvm::MemorySSA *)a1, a3);
      uint64_t v12 = result;
      while (1)
      {
        uint64_t v12 = (const llvm::BasicBlock *)*((void *)v12 + 1);
        if (v12 == result) {
          break;
        }
        uint64_t v36 = (char *)v12 - 48;
        if (!v12) {
          uint64_t v36 = 0;
        }
        if (v36[16] != 27) {
          goto LABEL_4;
        }
      }
      uint64_t v12 = result;
      goto LABEL_4;
    }
  }
LABEL_5:
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 112);
  if (v15 == v16)
  {
    uint64_t v17 = *(unsigned int *)(a1 + 124);
    uint64_t v18 = (llvm::BasicBlock **)(v15 + 8 * v17);
    if (v17)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v17;
      while (*(llvm::BasicBlock **)(v15 + v19) != a3)
      {
        v19 += 8;
        if (v20 == v19) {
          goto LABEL_10;
        }
      }
      uint64_t v18 = (llvm::BasicBlock **)(v15 + v19);
    }
LABEL_10:
    uint64_t v16 = *(void *)(a1 + 112);
  }
  else
  {
    uint64_t v22 = *(unsigned int *)(a1 + 120);
    int v23 = v22 - 1;
    unsigned int v24 = (v22 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v18 = (llvm::BasicBlock **)(v15 + 8 * v24);
    unsigned int v25 = *v18;
    if (*v18 == (llvm::BasicBlock *)-1)
    {
      BOOL v26 = 0;
LABEL_29:
      if (v26) {
        uint64_t v18 = v26;
      }
      if (*v18 != a3) {
        uint64_t v18 = (llvm::BasicBlock **)(v15 + 8 * v22);
      }
    }
    else
    {
      BOOL v26 = 0;
      int v27 = 1;
      while (v25 != a3)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == (llvm::BasicBlock *)-2;
        }
        if (v28) {
          BOOL v26 = v18;
        }
        unsigned int v29 = v24 + v27++;
        unsigned int v24 = v29 & v23;
        uint64_t v18 = (llvm::BasicBlock **)(v15 + 8 * (v29 & v23));
        unsigned int v25 = *v18;
        if (*v18 == (llvm::BasicBlock *)-1) {
          goto LABEL_29;
        }
      }
    }
  }
  BOOL v28 = v15 == v16;
  uint64_t v21 = 120;
  if (v28) {
    uint64_t v21 = 124;
  }
  if (v18 != (llvm::BasicBlock **)(v15 + 8 * *(unsigned int *)(a1 + v21)))
  {
    *uint64_t v18 = (llvm::BasicBlock *)-2;
    ++*(_DWORD *)(a1 + 128);
  }
  return result;
}

void *llvm::MemorySSA::prepareForMoveTo(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = llvm::MemorySSA::removeFromLists(a1, a2, 0);
  if (a2 && *(unsigned char *)(a2 + 16) == 26)
  {
    *(_DWORD *)(a2 + 92) = -1;
    if (*(void *)(a2 - 32))
    {
      **(void **)(a2 - 16) = *(void *)(a2 - 24);
      uint64_t v6 = *(void *)(a2 - 24);
      if (v6) {
        *(void *)(v6 + 16) = *(void *)(a2 - 16);
      }
    }
    *(void *)(a2 - 32) = 0;
  }
  *(void *)(a2 + 64) = a3;
  return result;
}

void *llvm::MemorySSA::removeFromLists(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 64);
  unsigned int v7 = v6 >> 4;
  if (*(unsigned char *)(a2 + 16) == 25) {
    goto LABEL_2;
  }
  int32x2_t v28 = a1[9];
  uint64_t v29 = a1[11].u32[0];
  if (v29)
  {
    LODWORD(v30) = (v29 - 1) & (v7 ^ (v6 >> 9));
    uint64_t v31 = (uint64_t *)(*(void *)&v28 + 16 * v30);
    uint64_t v32 = *v31;
    if (v6 == *v31) {
      goto LABEL_35;
    }
    int v33 = 1;
    while (v32 != -4096)
    {
      int v34 = v30 + v33++;
      uint64_t v30 = v34 & (v29 - 1);
      uint64_t v32 = *(void *)(*(void *)&v28 + 16 * v30);
      if (v6 == v32)
      {
        uint64_t v31 = (uint64_t *)(*(void *)&v28 + 16 * v30);
        goto LABEL_35;
      }
    }
  }
  uint64_t v31 = (uint64_t *)(*(void *)&v28 + 16 * v29);
LABEL_35:
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v36 = *(void **)(a2 + 56);
  *uint64_t v36 = v35;
  *(void *)(v35 + 8) = v36;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  if (*(void *)v31[1] == v31[1])
  {
    v31[1] = 0;
    MEMORY[0x1D25D9CE0]();
    *uint64_t v31 = -8192;
    a1[10] = vadd_s32(a1[10], (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_2:
  int32x2_t v8 = a1[6];
  uint64_t v9 = a1[8].u32[0];
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & (v7 ^ (v6 >> 9));
    uint64_t v11 = (uint64_t *)(*(void *)&v8 + 16 * v10);
    uint64_t v12 = *v11;
    if (v6 == *v11) {
      goto LABEL_9;
    }
    int v13 = 1;
    while (v12 != -4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(void *)(*(void *)&v8 + 16 * v10);
      if (v6 == v12)
      {
        uint64_t v11 = (uint64_t *)(*(void *)&v8 + 16 * v10);
        goto LABEL_9;
      }
    }
  }
  uint64_t v11 = (uint64_t *)(*(void *)&v8 + 16 * v9);
LABEL_9:
  uint64_t v15 = a2 + 32;
  if (!a2) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15 - 32;
  if (a2) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v17 + 32);
  uint64_t v19 = *(void **)(v17 + 40);
  *uint64_t v19 = v18;
  *(void *)(v18 + 8) = v19;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 40) = 0;
  if (a3) {
    llvm::Value::deleteValue((void (**)(void))v17, (llvm::Value *)a2);
  }
  uint64_t result = (void *)v11[1];
  if ((void *)*result == result)
  {
    v11[1] = 0;
    uint64_t result = (void *)sub_1CC0AF7AC((uint64_t)result, (llvm::Value *)a2);
    *uint64_t v11 = -8192;
    a1[7] = vadd_s32(a1[7], (int32x2_t)0x1FFFFFFFFLL);
    int32x2_t v22 = a1[13];
    int32x2_t v21 = a1[14];
    if (*(void *)&v21 == *(void *)&v22)
    {
      uint64_t v23 = a1[15].u32[1];
      unsigned int v24 = (void *)(*(void *)&v21 + 8 * v23);
      if (v23)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 8 * v23;
        while (*(void *)(*(void *)&v21 + v25) != v6)
        {
          v25 += 8;
          if (v26 == v25) {
            goto LABEL_23;
          }
        }
        unsigned int v24 = (void *)(*(void *)&v21 + v25);
      }
LABEL_23:
      int32x2_t v22 = a1[14];
    }
    else
    {
      uint64_t v37 = a1[15].u32[0];
      int v38 = v37 - 1;
      unsigned int v39 = (v37 - 1) & (v7 ^ (v6 >> 9));
      unsigned int v24 = (void *)(*(void *)&v21 + 8 * v39);
      uint64_t v40 = *v24;
      if (*v24 == -1)
      {
        uint64_t v41 = 0;
LABEL_50:
        if (v41) {
          unsigned int v24 = v41;
        }
        if (*v24 != v6) {
          unsigned int v24 = (void *)(*(void *)&v21 + 8 * v37);
        }
      }
      else
      {
        uint64_t v41 = 0;
        int v42 = 1;
        while (v40 != v6)
        {
          if (v41) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v40 == -2;
          }
          if (v43) {
            uint64_t v41 = v24;
          }
          unsigned int v44 = v39 + v42++;
          unsigned int v39 = v44 & v38;
          unsigned int v24 = (void *)(*(void *)&v21 + 8 * (v44 & v38));
          uint64_t v40 = *v24;
          if (*v24 == -1) {
            goto LABEL_50;
          }
        }
      }
    }
    BOOL v43 = *(void *)&v21 == *(void *)&v22;
    uint64_t v27 = 30;
    if (v43) {
      uint64_t v27 = 31;
    }
    if (v24 != (void *)(*(void *)&v21 + 8 * a1->u32[v27]))
    {
      *unsigned int v24 = -2;
      ++a1[16].i32[0];
    }
  }
  return result;
}

const llvm::BasicBlock *llvm::MemorySSA::moveTo(int32x2_t *a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  if (*(unsigned char *)(a2 + 16) == 27)
  {
    uint64_t v9 = *(llvm::BasicBlock **)(a2 + 64);
    v11[0] = 0;
    if (sub_1CBA0E618((uint64_t)&a1[3], &v9, v11))
    {
      *(void *)v11[0] = -8192;
      a1[4] = vadd_s32(a1[4], (int32x2_t)0x1FFFFFFFFLL);
    }
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    sub_1CD4AA214((uint64_t)&a1[3], (uint64_t *)&v9, &v10, (uint64_t)v11);
  }
  llvm::MemorySSA::prepareForMoveTo(a1, a2, (uint64_t)a3);
  return llvm::MemorySSA::insertIntoListsForBlock((uint64_t)a1, a2, a3, a4);
}

char *llvm::MemorySSA::createDefinedAccess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CC0A9458((uint64_t)a1, a2, *a1, a4);
  if (result)
  {
    if (result[16] == 25) {
      uint64_t v6 = result;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6) {
      unsigned int v7 = v6 - 32;
    }
    else {
      unsigned int v7 = result - 64;
    }
    if (*(void *)v7)
    {
      **((void **)v7 + 2) = *((void *)v7 + 1);
      uint64_t v11 = *((void *)v7 + 1);
      if (v11) {
        *(void *)(v11 + 16) = *((void *)v7 + 2);
      }
    }
    *(void *)unsigned int v7 = a3;
    if (a3)
    {
      uint64_t v10 = *(void *)(a3 + 8);
      uint64_t v9 = (char **)(a3 + 8);
      uint64_t v8 = v10;
      *((void *)v7 + 1) = v10;
      if (v10) {
        *(void *)(v8 + 16) = v7 + 8;
      }
      *((void *)v7 + 2) = v9;
      *uint64_t v9 = v7;
    }
  }
  return result;
}

char *sub_1CC0A9458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 <= 0x3B)
  {
    if (v8 == 37) {
      goto LABEL_16;
    }
    if (v8 != 33 && v8 != 39) {
      goto LABEL_38;
    }
    goto LABEL_8;
  }
  if (v8 - 60 > 0x1C) {
    goto LABEL_38;
  }
  if (v8 != 84)
  {
    if (((1 << (v8 - 60)) & 0x10100039) != 0) {
      goto LABEL_16;
    }
    if (v8 != 61) {
      goto LABEL_38;
    }
    if ((*(_WORD *)(a2 + 18) & 0x301) != 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(a2 - 32);
  if (!v9
    || *(unsigned char *)(v9 + 16)
    || *(void *)(v9 + 24) != *(void *)(a2 + 72)
    || (*(unsigned char *)(v9 + 33) & 0x20) == 0
    || (uint64_t v19 = 0, v43 = *(_DWORD *)(v9 + 36), v43 != 7) && v43 != 126 && v43 != 244)
  {
LABEL_8:
    uint64_t v10 = *(void *)(a2 + 64);
    if (!v10 || (*(unsigned char *)(v10 + 20) & 4) == 0 && (*(unsigned char *)(v10 + 17) & 0x10) == 0)
    {
      LODWORD(v56[0]) = 7;
      if (sub_1CC5CB59C(a2, (__int32 *)v56, 1uLL))
      {
        uint64_t v44 = *(void *)(a2 - 32);
        if (!v44 || *(unsigned char *)(v44 + 16) || *(void *)(v44 + 24) != *(void *)(a2 + 72) || *(_DWORD *)(v44 + 36) != 7) {
          goto LABEL_16;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44))
      {
        goto LABEL_16;
      }
    }
LABEL_14:
    unsigned int v8 = *(unsigned __int8 *)(a2 + 16);
LABEL_38:
    uint64_t v19 = 0;
    uint64_t v20 = v8 - 33;
    if (v20 > 0x37) {
      return v19;
    }
    if (((1 << v20) & 0x8000000000041) != 0)
    {
      uint64_t v21 = *(void *)(a2 + 64);
      if (v21 && (*(unsigned char *)(v21 + 17) & 0x30) != 0) {
        return 0;
      }
      int v22 = *(_DWORD *)(a2 + 20);
      if (v22 < 0 && (uint64_t v45 = a2 - 32 * (v22 & 0x7FFFFFF), v48 = *(void *)(v45 - 8), v46 = v45 - 8, (v47 = v48) != 0))
      {
        uint64_t v49 = -v47;
        while (1)
        {
          unsigned int v50 = *(_DWORD *)(*(void *)(v46 + v49) + 8);
          BOOL v51 = v50 > 7;
          int v52 = (1 << v50) & 0x83;
          if (v51 || v52 == 0) {
            break;
          }
          v49 += 16;
          if (!v49) {
            goto LABEL_46;
          }
        }
      }
      else
      {
LABEL_46:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return 0;
        }
      }
    }
    else if (v20 == 27)
    {
      if ((*(_WORD *)(a2 + 18) & 0x301) == 0) {
        return 0;
      }
    }
    else if (((1 << v20) & 0x808001D0000010) == 0)
    {
      return v19;
    }
LABEL_16:
    if (a4)
    {
      int v11 = *(unsigned __int8 *)(a4 + 16);
      BOOL v12 = v11 == 26;
      int v13 = v11 == 25;
      if (v12)
      {
LABEL_53:
        if (v12)
        {
          uint64_t v23 = operator new(0xA0uLL);
          v23[21] = v23[21] & 0x38000000 | 2;
          *((void *)v23 + 1) = 0;
          *((void *)v23 + 2) = 0;
          *(void *)uint64_t v23 = 0;
          *((void *)v23 + 5) = 0;
          *((void *)v23 + 6) = 0;
          *((void *)v23 + 4) = 0;
          *((void *)v23 + 8) = ***(void ***)a2 + 1576;
          uint64_t v19 = (char *)(v23 + 16);
          *((void *)v23 + 3) = v23 + 16;
          *((void *)v23 + 7) = v23 + 16;
          uint64_t v24 = *(void *)(a2 + 40);
          int v25 = *(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 312) = v25 + 1;
          *((void *)v23 + 9) = 0;
          *((void *)v23 + 10) = 0x20000001ALL;
          *((void *)v23 + 11) = llvm::MemoryDef::deleteMe;
          *((_OWORD *)v23 + 6) = 0u;
          *((_OWORD *)v23 + 7) = 0u;
          *((void *)v23 + 16) = v24;
          *((void *)v23 + 17) = a2;
          v23[36] = 1;
          *((unsigned char *)v23 + 148) = 1;
          v23[38] = v25;
          v23[39] = -1;
        }
        else
        {
          uint64_t v26 = operator new(0x80uLL);
          v26[13] = v26[13] & 0x38000000 | 1;
          *((void *)v26 + 1) = 0;
          *((void *)v26 + 2) = 0;
          *(void *)uint64_t v26 = 0;
          uint64_t v27 = ***(void ***)a2 + 1576;
          v26[13] = 1;
          *((void *)v26 + 4) = v27;
          uint64_t v19 = (char *)(v26 + 8);
          *((void *)v26 + 3) = v26 + 8;
          uint64_t v28 = *(void *)(a2 + 40);
          *((void *)v26 + 5) = 0;
          *((unsigned char *)v26 + 48) = 25;
          *((unsigned char *)v26 + 49) = 0;
          *((_WORD *)v26 + 25) = 0;
          *((void *)v26 + 7) = llvm::MemoryUse::deleteMe;
          *((_OWORD *)v26 + 4) = 0u;
          *((_OWORD *)v26 + 5) = 0u;
          *((void *)v26 + 12) = v28;
          *((void *)v26 + 13) = a2;
          v26[28] = 1;
          *((unsigned char *)v26 + 116) = 1;
          v26[30] = -1;
        }
        uint64_t v31 = *(void *)(a1 + 24);
        uint64_t v30 = a1 + 24;
        uint64_t v29 = v31;
        v56[0] = a2;
        int v32 = *(_DWORD *)(v30 + 16);
        if (v32)
        {
          int v33 = v32 - 1;
          unsigned int v34 = v33 & ((a2 >> 4) ^ (a2 >> 9));
          uint64_t v35 = (void *)(v29 + 16 * v34);
          uint64_t v36 = *v35;
          if (*v35 == a2)
          {
LABEL_71:
            v35[1] = v19;
            return v19;
          }
          uint64_t v37 = 0;
          int v38 = 1;
          while (v36 != -4096)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -8192;
            }
            if (v39) {
              uint64_t v37 = v35;
            }
            unsigned int v40 = v34 + v38++;
            unsigned int v34 = v40 & v33;
            uint64_t v35 = (void *)(v29 + 16 * v34);
            uint64_t v36 = *v35;
            if (*v35 == a2) {
              goto LABEL_71;
            }
          }
          if (v37) {
            uint64_t v41 = v37;
          }
          else {
            uint64_t v41 = v35;
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v35 = sub_1CC0B1698(v30, (uint64_t)v56, v56, v41);
        void *v35 = v56[0];
        v35[1] = 0;
        goto LABEL_71;
      }
      goto LABEL_51;
    }
    LOBYTE(v54[0]) = 0;
    char v55 = 0;
    v56[0] = 1;
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = &v56[v14];
      *(_OWORD *)uint64_t v15 = xmmword_1CFAC3060;
      *((_OWORD *)v15 + 1) = xmmword_1CFAC3060;
      v14 += 5;
    }
    while (v15 + 5 != v57);
    v57[0] = &v61;
    v57[1] = 0;
    int v58 = v60;
    uint64_t v59 = 0x400000000;
    BOOL v61 = &unk_1F2600DB8;
    uint64_t v62 = 1;
    for (uint64_t i = 63; i != 79; i += 2)
      v56[i] = -4096;
    char ModRefInfo = llvm::AAResults::getModRefInfo(a3, (llvm::Instruction *)a2, v54, (uint64_t)v56);
    if ((v62 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v63, 8);
    }
    if (v58 != v60) {
      free(v58);
    }
    if (v56[0])
    {
      if ((ModRefInfo & 2) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](v56[1], 8);
      if ((ModRefInfo & 2) != 0) {
        goto LABEL_32;
      }
    }
    int v18 = *(unsigned __int8 *)(a2 + 16);
    if (v18 != 60 && v18 != 61 || (*(_WORD *)(a2 + 18) & 0x301) == 0)
    {
      BOOL v12 = 0;
LABEL_50:
      int v13 = ModRefInfo & 1;
      if (v12) {
        goto LABEL_53;
      }
LABEL_51:
      if (v13) {
        goto LABEL_53;
      }
      return 0;
    }
LABEL_32:
    BOOL v12 = 1;
    goto LABEL_50;
  }
  return v19;
}

int32x2_t llvm::MemorySSA::removeFromLookups(int32x2_t *this, uint64_t a2)
{
  __int32 v4 = this[35].i32[0];
  if (v4)
  {
    int32x2_t v5 = this[33];
    __int32 v6 = v4 - 1;
    LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (uint64_t *)(*(void *)&v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2)
    {
LABEL_7:
      *unsigned int v8 = -8192;
      int32x2_t result = vadd_s32(this[34], (int32x2_t)0x1FFFFFFFFLL);
      this[34] = result;
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(*(void *)&v5 + 16 * v7);
        if (v9 == a2)
        {
          unsigned int v8 = (uint64_t *)(*(void *)&v5 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  int v13 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && (v13 - 27) >= 0xFFFFFFFE)
  {
    if (v13 == 25) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v14) {
      uint64_t v15 = v14 - 32;
    }
    else {
      uint64_t v15 = a2 - 64;
    }
    if (*(void *)v15)
    {
      **(void **)(v15 + 16) = *(void *)(v15 + 8);
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16) {
        *(void *)(v16 + 16) = *(void *)(v15 + 16);
      }
    }
    *(void *)uint64_t v15 = 0;
  }
  if (v13 == 25)
  {
    BOOL v17 = 0;
  }
  else
  {
    uint64_t WalkerImpl = llvm::MemorySSA::getWalkerImpl((llvm::MemorySSA *)this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)WalkerImpl + 32))(WalkerImpl, a2);
    BOOL v17 = *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE;
  }
  if (!a2) {
    BOOL v17 = 1;
  }
  if (v17) {
    uint64_t v19 = 64;
  }
  else {
    uint64_t v19 = 72;
  }
  int32x2_t v20 = this[3];
  uint64_t v21 = this[5].u32[0];
  if (v21)
  {
    uint64_t v22 = *(void *)(a2 + v19);
    LODWORD(v23) = ((v22 >> 4) ^ (v22 >> 9)) & (v21 - 1);
    uint64_t v24 = (uint64_t *)(*(void *)&v20 + 16 * v23);
    uint64_t v25 = *v24;
    if (v22 == *v24) {
      goto LABEL_35;
    }
    int v26 = 1;
    while (v25 != -4096)
    {
      int v27 = v23 + v26++;
      uint64_t v23 = v27 & (v21 - 1);
      uint64_t v25 = *(void *)(*(void *)&v20 + 16 * v23);
      if (v22 == v25)
      {
        uint64_t v24 = (uint64_t *)(*(void *)&v20 + 16 * v23);
        goto LABEL_35;
      }
    }
  }
  uint64_t v24 = (uint64_t *)(*(void *)&v20 + 16 * v21);
LABEL_35:
  if (v24[1] == a2)
  {
    *uint64_t v24 = -8192;
    int32x2_t result = vadd_s32(this[4], (int32x2_t)0x1FFFFFFFFLL);
    this[4] = result;
  }
  return result;
}

void *llvm::MemorySSA::print(const llvm::Module ***this, llvm::raw_ostream *a2)
{
  v3[0] = &unk_1F2605BB8;
  v3[1] = this;
  return llvm::Function::print(this[2], a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

void llvm::MemorySSA::verifyPrevDefInPhis(llvm::MemorySSA *this, Function *a2)
{
  for (uint64_t i = *((void *)a2 + 10); (Function *)i != (Function *)((char *)a2 + 72); uint64_t i = *(void *)(i + 8))
    ;
}

void llvm::MemorySSA::verifyDominationNumbers(llvm::MemorySSA *this, const llvm::Function *a2)
{
  unsigned int v2 = *((_DWORD *)this + 31);
  if (v2 != *((_DWORD *)this + 32))
  {
    int32x2_t v5 = v48;
    __int32 v6 = (const void *)*((void *)this + 14);
    if (v6 == *((const void **)this + 13))
    {
      uint64_t v46 = v48;
      uint64_t v7 = (const void *)*((void *)this + 14);
    }
    else
    {
      uint64_t v45 = *((unsigned int *)this + 30);
      int32x2_t v5 = malloc_type_malloc(8 * v45, 0x4065EBACuLL);
      if (!v5 && (v45 || (int32x2_t v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      uint64_t v46 = v5;
      uint64_t v7 = (const void *)*((void *)this + 13);
      __int32 v6 = (const void *)*((void *)this + 14);
      unsigned int v2 = *((_DWORD *)this + 31);
    }
    unsigned int v47 = *((_DWORD *)this + 30);
    if (v6 == v7) {
      unsigned int v8 = v2;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 30);
    }
    if (v8)
    {
      memmove(v5, v6, 8 * v8);
      unsigned int v2 = *((_DWORD *)this + 31);
    }
    int v9 = *((_DWORD *)this + 32);
    int v10 = (void *)*((void *)a2 + 10);
    if (v10 != (void *)((char *)a2 + 72))
    {
      while (1)
      {
        int v11 = v10 - 3;
        if (!v10) {
          int v11 = 0;
        }
        BOOL v12 = v48;
        if (v46 == v48)
        {
          unsigned int v13 = v2;
          uint64_t v14 = &v46[8 * v2];
          if (v2)
          {
            uint64_t v15 = 0;
            while (*(void **)&v46[v15] != v11)
            {
              v15 += 8;
              if (8 * v2 == v15) {
                goto LABEL_31;
              }
            }
            uint64_t v14 = &v46[v15];
          }
LABEL_31:
          uint64_t v23 = v46;
        }
        else
        {
          unsigned int v16 = v47 - 1;
          unsigned int v17 = (v47 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          uint64_t v14 = &v46[8 * v17];
          int v18 = (void *)*v14;
          if (*v14 == -1)
          {
            uint64_t v19 = 0;
LABEL_33:
            if (v19) {
              uint64_t v14 = v19;
            }
            unsigned int v13 = v2;
            if ((void *)*v14 != v11) {
              uint64_t v14 = &v46[8 * v47];
            }
          }
          else
          {
            uint64_t v19 = 0;
            int v20 = 1;
            while (v18 != v11)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v18 == (void *)-2;
              }
              if (v21) {
                uint64_t v19 = v14;
              }
              unsigned int v22 = v17 + v20++;
              unsigned int v17 = v22 & v16;
              uint64_t v14 = &v46[8 * (v22 & v16)];
              int v18 = (void *)*v14;
              if (*v14 == -1) {
                goto LABEL_33;
              }
            }
            unsigned int v13 = v2;
          }
          uint64_t v23 = v48;
        }
        if (v46 == v23) {
          unsigned int v24 = v13;
        }
        else {
          unsigned int v24 = v47;
        }
        if (v14 == (void *)&v46[8 * v24]) {
          goto LABEL_78;
        }
        if (v46 == v23)
        {
          uint64_t v25 = &v46[8 * v13];
          if (v13)
          {
            uint64_t v26 = 0;
            while (*(void **)&v46[v26] != v11)
            {
              v26 += 8;
              if (8 * v13 == v26) {
                goto LABEL_60;
              }
            }
            uint64_t v25 = &v46[v26];
          }
LABEL_60:
          BOOL v12 = v46;
        }
        else
        {
          unsigned int v27 = v47 - 1;
          unsigned int v28 = (v47 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          uint64_t v25 = &v46[8 * v28];
          uint64_t v29 = (void *)*v25;
          if (*v25 == -1)
          {
            uint64_t v30 = 0;
LABEL_81:
            if (v30) {
              uint64_t v25 = v30;
            }
            if ((void *)*v25 != v11)
            {
              if (v46 == v48) {
                unsigned int v44 = v13;
              }
              else {
                unsigned int v44 = v47;
              }
              uint64_t v25 = &v46[8 * v44];
            }
          }
          else
          {
            uint64_t v30 = 0;
            int v31 = 1;
            while (v29 != v11)
            {
              if (v30) {
                BOOL v32 = 0;
              }
              else {
                BOOL v32 = v29 == (void *)-2;
              }
              if (v32) {
                uint64_t v30 = v25;
              }
              unsigned int v33 = v28 + v31++;
              unsigned int v28 = v33 & v27;
              uint64_t v25 = &v46[8 * (v33 & v27)];
              uint64_t v29 = (void *)*v25;
              if (*v25 == -1) {
                goto LABEL_81;
              }
            }
          }
        }
        if (v46 == v12) {
          unsigned int v34 = v13;
        }
        else {
          unsigned int v34 = v47;
        }
        if (v25 != (void *)&v46[8 * v34])
        {
          void *v25 = -2;
          ++v9;
        }
        uint64_t v35 = *((void *)this + 6);
        uint64_t v36 = *((unsigned int *)this + 16);
        if (!v36) {
          goto LABEL_72;
        }
        LODWORD(v37) = (v36 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        int v38 = (void *)(v35 + 16 * v37);
        BOOL v39 = (void *)*v38;
        if (v11 != (void *)*v38) {
          break;
        }
LABEL_73:
        if (v38 != (void *)(v35 + 16 * v36))
        {
          uint64_t v42 = v38[1];
          if (v42)
          {
            for (uint64_t i = *(void *)(v42 + 8); i != v42; uint64_t i = *(void *)(i + 8))
              ;
          }
        }
LABEL_78:
        int v10 = (void *)v10[1];
        if (v10 == (void *)((char *)a2 + 72)) {
          goto LABEL_88;
        }
      }
      int v40 = 1;
      while (v39 != (void *)-4096)
      {
        int v41 = v37 + v40++;
        uint64_t v37 = v41 & (v36 - 1);
        BOOL v39 = *(void **)(v35 + 16 * v37);
        if (v11 == v39)
        {
          int v38 = (void *)(v35 + 16 * v37);
          goto LABEL_73;
        }
      }
LABEL_72:
      int v38 = (void *)(v35 + 16 * v36);
      goto LABEL_73;
    }
LABEL_88:
    if (v46 != v48) {
      free(v46);
    }
  }
}

void llvm::MemorySSA::verifyOrderingDominationAndDefUses(uint64_t a1, uint64_t a2)
{
  v48[32] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = v48;
  uint64_t v47 = 0x2000000000;
  unsigned int v44 = 0;
  for (uint64_t i = *(void *)(a2 + 80); i != a2 + 72; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v3 = i - 24;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    unsigned int v6 = v3 >> 4;
    if (v5)
    {
      LODWORD(v7) = (v6 ^ (v3 >> 9)) & (v5 - 1);
      unsigned int v8 = (uint64_t *)(v4 + 16 * v7);
      uint64_t v9 = *v8;
      if (v3 == *v8) {
        goto LABEL_12;
      }
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & (v5 - 1);
        uint64_t v9 = *(void *)(v4 + 16 * v7);
        if (v3 == v9)
        {
          unsigned int v8 = (uint64_t *)(v4 + 16 * v7);
          goto LABEL_12;
        }
      }
    }
    unsigned int v8 = (uint64_t *)(v4 + 16 * v5);
LABEL_12:
    if (v8 == (uint64_t *)(v4 + 16 * v5)) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v8[1];
    }
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(unsigned int *)(a1 + 88);
    if (!v14) {
      goto LABEL_21;
    }
    LODWORD(v15) = (v14 - 1) & (v6 ^ (v3 >> 9));
    unsigned int v16 = (uint64_t *)(v13 + 16 * v15);
    uint64_t v17 = *v16;
    if (v3 != *v16)
    {
      int v18 = 1;
      while (v17 != -4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        uint64_t v17 = *(void *)(v13 + 16 * v15);
        if (v3 == v17)
        {
          unsigned int v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_22;
        }
      }
LABEL_21:
      unsigned int v16 = (uint64_t *)(v13 + 16 * v14);
    }
LABEL_22:
    if (v16 == (uint64_t *)(v13 + 16 * v14)) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v16[1];
    }
    int v21 = *(_DWORD *)(a1 + 40);
    if (v21)
    {
      uint64_t v22 = *(void *)(a1 + 24);
      unsigned int v23 = v21 - 1;
      uint64_t v24 = v23 & (v6 ^ (v3 >> 9));
      uint64_t v25 = *(void *)(v22 + 16 * v24);
      if (v3 == v25)
      {
LABEL_30:
        uint64_t v28 = *(void *)(v22 + 16 * v24 + 8);
        if (v28)
        {
          if (v47 >= (unint64_t)HIDWORD(v47)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v46 + v47) = v28;
          LODWORD(v47) = v47 + 1;
          if (v44 >= 0x20uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v45[v44++] = v28;
          uint64_t v29 = (void *)(v28 + 8);
          do
          {
            uint64_t v30 = *v29;
            uint64_t v29 = (void *)(*v29 + 8);
          }
          while (v30);
        }
      }
      else
      {
        int v26 = 1;
        while (v25 != -4096)
        {
          int v27 = v24 + v26++;
          uint64_t v24 = v27 & v23;
          uint64_t v25 = *(void *)(v22 + 16 * v24);
          if (v3 == v25) {
            goto LABEL_30;
          }
        }
      }
    }
    uint64_t v31 = v3 + 40;
    for (uint64_t j = *(void *)(v3 + 48); j != v31; uint64_t j = *(void *)(j + 8))
    {
      if (j) {
        uint64_t v33 = j - 24;
      }
      else {
        uint64_t v33 = 0;
      }
      int v34 = *(_DWORD *)(a1 + 40);
      if (v34)
      {
        uint64_t v35 = *(void *)(a1 + 24);
        unsigned int v36 = v34 - 1;
        uint64_t v37 = ((v33 >> 4) ^ (v33 >> 9)) & (v34 - 1);
        uint64_t v38 = *(void *)(v35 + 16 * v37);
        if (v33 == v38)
        {
LABEL_45:
          uint64_t v41 = *(void *)(v35 + 16 * v37 + 8);
          if (v41)
          {
            if (v47 >= (unint64_t)HIDWORD(v47)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v46 + v47) = v41;
            LODWORD(v47) = v47 + 1;
            if (*(unsigned char *)(v41 + 16) == 26)
            {
              if (v44 >= 0x20uLL) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v45[v44++] = v41;
              uint64_t v42 = (void *)(v41 + 8);
              do
              {
                uint64_t v43 = *v42;
                uint64_t v42 = (void *)(*v42 + 8);
              }
              while (v43);
            }
          }
        }
        else
        {
          int v39 = 1;
          while (v38 != -4096)
          {
            int v40 = v37 + v39++;
            uint64_t v37 = v40 & v36;
            uint64_t v38 = *(void *)(v35 + 16 * v37);
            if (v33 == v38) {
              goto LABEL_45;
            }
          }
        }
      }
    }
    if (v12 | v20)
    {
      LODWORD(v47) = 0;
      unsigned int v44 = 0;
    }
  }
  if (v46 != v48) {
    free(v46);
  }
}

void llvm::MemorySSA::renumberBlock(llvm::MemorySSA *this, const llvm::BasicBlock *a2)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((unsigned int *)this + 16);
  unsigned int v6 = a2 >> 4;
  if (v5)
  {
    LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
    uint64_t v8 = v4 + 16 * v7;
    uint64_t v9 = *(const llvm::BasicBlock **)v8;
    if (*(const llvm::BasicBlock **)v8 == a2) {
      goto LABEL_8;
    }
    int v10 = 1;
    while (v9 != (const llvm::BasicBlock *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(const llvm::BasicBlock **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v4 + 16 * v7;
        goto LABEL_8;
      }
    }
  }
  uint64_t v8 = v4 + 16 * v5;
LABEL_8:
  if (v8 == v4 + 16 * v5) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    while (1)
    {
      if (v13) {
        uint64_t v15 = v13 - 32;
      }
      else {
        uint64_t v15 = 0;
      }
      unsigned int v16 = *((_DWORD *)this + 70);
      if (!v16)
      {
        uint64_t v20 = 0;
        goto LABEL_28;
      }
      uint64_t v17 = *((void *)this + 33);
      unsigned int v18 = v16 - 1;
      unsigned int v19 = ((v15 >> 4) ^ (v15 >> 9)) & (v16 - 1);
      uint64_t v20 = (uint64_t *)(v17 + 16 * v19);
      uint64_t v21 = *v20;
      if (v15 != *v20) {
        break;
      }
LABEL_35:
      v20[1] = ++v14;
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == v12) {
        goto LABEL_51;
      }
    }
    uint64_t v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        uint64_t v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      uint64_t v20 = (uint64_t *)(v17 + 16 * (v25 & v18));
      uint64_t v21 = *v20;
      if (v15 == *v20) {
        goto LABEL_35;
      }
    }
    if (v22) {
      uint64_t v20 = v22;
    }
LABEL_28:
    int v26 = *((_DWORD *)this + 68);
    if (4 * v26 + 4 >= 3 * v16)
    {
      sub_1CC0B1848((uint64_t)this + 264, 2 * v16);
      uint64_t v28 = *((void *)this + 33);
      int v29 = *((_DWORD *)this + 70) - 1;
      unsigned int v30 = v29 & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v20 = (uint64_t *)(v28 + 16 * v30);
      uint64_t v31 = *v20;
      if (v15 == *v20)
      {
LABEL_84:
        uint64_t v27 = v15;
        goto LABEL_32;
      }
      BOOL v32 = 0;
      int v33 = 1;
      while (v31 != -4096)
      {
        if (v32) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v31 == -8192;
        }
        if (v34) {
          BOOL v32 = v20;
        }
        unsigned int v35 = v30 + v33++;
        unsigned int v30 = v35 & v29;
        uint64_t v20 = (uint64_t *)(v28 + 16 * (v35 & v29));
        uint64_t v31 = *v20;
        if (v15 == *v20) {
          goto LABEL_84;
        }
      }
      if (v32) {
        uint64_t v20 = v32;
      }
    }
    else if (v16 + ~v26 - *((_DWORD *)this + 69) <= v16 >> 3)
    {
      sub_1CC0B1848((uint64_t)this + 264, v16);
      BOOL v51 = 0;
      sub_1CC0B17CC(*((void *)this + 33), *((_DWORD *)this + 70), v15, &v51);
      uint64_t v20 = v51;
    }
    uint64_t v27 = *v20;
LABEL_32:
    ++*((_DWORD *)this + 68);
    if (v27 != -4096) {
      --*((_DWORD *)this + 69);
    }
    *uint64_t v20 = v15;
    v20[1] = 0;
    goto LABEL_35;
  }
LABEL_51:
  uint64_t v36 = *((void *)this + 14);
  uint64_t v37 = *((unsigned int *)this + 31);
  if (v36 != *((void *)this + 13))
  {
    unsigned int v41 = *((_DWORD *)this + 30);
    goto LABEL_63;
  }
  if (!v37)
  {
LABEL_59:
    unsigned int v41 = *((_DWORD *)this + 30);
    if (v37 < v41)
    {
      *((_DWORD *)this + 31) = v37 + 1;
      *(void *)(v36 + 8 * v37) = a2;
      return;
    }
LABEL_63:
    if (3 * v41 <= 4 * ((int)v37 - *((_DWORD *)this + 32)))
    {
      if (v41 >= 0x40) {
        v41 *= 2;
      }
      else {
        unsigned int v41 = 128;
      }
    }
    else if (v41 - v37 >= v41 >> 3)
    {
      goto LABEL_65;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::MemorySSA *)((char *)this + 104), v41);
    unsigned int v41 = *((_DWORD *)this + 30);
    uint64_t v36 = *((void *)this + 14);
LABEL_65:
    unsigned int v42 = v41 - 1;
    unsigned int v43 = (v41 - 1) & (v6 ^ (a2 >> 9));
    unsigned int v44 = (const llvm::BasicBlock **)(v36 + 8 * v43);
    uint64_t v45 = *v44;
    if (*v44 == (const llvm::BasicBlock *)-1)
    {
      uint64_t v46 = 0;
LABEL_77:
      if (v46) {
        unsigned int v50 = v46;
      }
      else {
        unsigned int v50 = v44;
      }
      if (*v50 != a2)
      {
        if (*v50 == (const llvm::BasicBlock *)-2) {
          --*((_DWORD *)this + 32);
        }
        else {
          ++*((_DWORD *)this + 31);
        }
        void *v50 = a2;
      }
    }
    else
    {
      uint64_t v46 = 0;
      int v47 = 1;
      while (v45 != a2)
      {
        if (v46) {
          BOOL v48 = 0;
        }
        else {
          BOOL v48 = v45 == (const llvm::BasicBlock *)-2;
        }
        if (v48) {
          uint64_t v46 = v44;
        }
        unsigned int v49 = v43 + v47++;
        unsigned int v43 = v49 & v42;
        unsigned int v44 = (const llvm::BasicBlock **)(v36 + 8 * (v49 & v42));
        uint64_t v45 = *v44;
        if (*v44 == (const llvm::BasicBlock *)-1) {
          goto LABEL_77;
        }
      }
    }
    return;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v37;
  int v40 = (void *)*((void *)this + 14);
  while ((const llvm::BasicBlock *)*v40 != a2)
  {
    if (*v40 == -2) {
      uint64_t v38 = v40;
    }
    ++v40;
    v39 -= 8;
    if (!v39)
    {
      if (!v38) {
        goto LABEL_59;
      }
      *uint64_t v38 = a2;
      --*((_DWORD *)this + 32);
      return;
    }
  }
}

BOOL llvm::MemorySSA::locallyDominates(llvm::MemorySSA *this, uint64_t a2, uint64_t a3)
{
  if (a3 == a2) {
    return 1;
  }
  uint64_t v5 = *((void *)this + 12);
  if (v5 != a3)
  {
    if (v5 == a2) {
      return 1;
    }
    uint64_t v7 = *(const llvm::BasicBlock **)(a2 + 64);
    uint64_t v9 = *((void *)this + 13);
    uint64_t v8 = *((void *)this + 14);
    if (v8 == v9)
    {
      uint64_t v10 = *((unsigned int *)this + 31);
      int v11 = (const llvm::BasicBlock **)(v8 + 8 * v10);
      if (v10)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * v10;
        while (*(const llvm::BasicBlock **)(v8 + v12) != v7)
        {
          v12 += 8;
          if (v13 == v12) {
            goto LABEL_9;
          }
        }
        int v11 = (const llvm::BasicBlock **)(v8 + v12);
      }
LABEL_9:
      uint64_t v9 = *((void *)this + 14);
    }
    else
    {
      uint64_t v29 = *((unsigned int *)this + 30);
      int v30 = v29 - 1;
      unsigned int v31 = (v29 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v11 = (const llvm::BasicBlock **)(v8 + 8 * v31);
      BOOL v32 = *v11;
      if (*v11 == (const llvm::BasicBlock *)-1)
      {
        int v33 = 0;
LABEL_43:
        if (v33) {
          int v11 = v33;
        }
        if (*v11 != v7) {
          int v11 = (const llvm::BasicBlock **)(v8 + 8 * v29);
        }
      }
      else
      {
        int v33 = 0;
        int v34 = 1;
        while (v32 != v7)
        {
          if (v33) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v32 == (const llvm::BasicBlock *)-2;
          }
          if (v35) {
            int v33 = v11;
          }
          unsigned int v36 = v31 + v34++;
          unsigned int v31 = v36 & v30;
          int v11 = (const llvm::BasicBlock **)(v8 + 8 * (v36 & v30));
          BOOL v32 = *v11;
          if (*v11 == (const llvm::BasicBlock *)-1) {
            goto LABEL_43;
          }
        }
      }
    }
    BOOL v35 = v8 == v9;
    uint64_t v14 = 120;
    if (v35) {
      uint64_t v14 = 124;
    }
    if (v11 == (const llvm::BasicBlock **)(v8 + 8 * *(unsigned int *)((char *)this + v14))) {
      llvm::MemorySSA::renumberBlock(this, v7);
    }
    int v15 = *((_DWORD *)this + 70);
    if (v15)
    {
      uint64_t v16 = *((void *)this + 33);
      unsigned int v17 = v15 - 1;
      uint64_t v18 = v17 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v19 = *(void *)(v16 + 16 * v18);
      if (v19 == a2)
      {
LABEL_19:
        unint64_t v22 = *(void *)(v16 + 16 * v18 + 8);
      }
      else
      {
        int v20 = 1;
        while (v19 != -4096)
        {
          int v21 = v18 + v20++;
          uint64_t v18 = v21 & v17;
          uint64_t v19 = *(void *)(v16 + 16 * v18);
          if (v19 == a2) {
            goto LABEL_19;
          }
        }
        unint64_t v22 = 0;
      }
      uint64_t v24 = v17 & ((a3 >> 4) ^ (a3 >> 9));
      uint64_t v25 = *(void *)(v16 + 16 * v24);
      if (v25 == a3)
      {
LABEL_26:
        unint64_t v28 = *(void *)(v16 + 16 * v24 + 8);
        return v22 < v28;
      }
      int v26 = 1;
      while (v25 != -4096)
      {
        int v27 = v24 + v26++;
        uint64_t v24 = v27 & v17;
        uint64_t v25 = *(void *)(v16 + 16 * v24);
        if (v25 == a3) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v22 = 0;
    }
    unint64_t v28 = 0;
    return v22 < v28;
  }
  return 0;
}

BOOL llvm::MemorySSA::dominates(llvm::MemorySSA *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 1;
  }
  if (*((void *)a1 + 12) == a3) {
    return 0;
  }
  if (*(void *)(a2 + 64) != *(void *)(a3 + 64)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
  }
  return llvm::MemorySSA::locallyDominates(a1, a2, a3);
}

BOOL llvm::MemorySSA::dominates(llvm::MemorySSA *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[3];
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 16) == 27;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return llvm::MemorySSA::dominates(a1, a2, a3[3]);
  }
  int v6 = *(_DWORD *)(v3 + 20);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v7 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v7 = v3 - 32 * (v6 & 0x7FFFFFF);
  }
  if (*(void *)(v7 + 32 * *(unsigned int *)(v3 + 76) + 8 * (((unint64_t)a3 - v7) >> 5)) != *(void *)(a2 + 64)) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
  }
  return llvm::MemorySSA::locallyDominates(a1, a2, *a3);
}

void llvm::MemorySSA::ensureOptimizedUses(llvm::MemorySSA *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 316))
  {
    uint64_t v16 = *(void *)this;
    uint64_t v17 = 1;
    uint64_t v2 = 16;
    do
    {
      uint64_t v3 = (char *)&v16 + v2;
      *(_OWORD *)uint64_t v3 = xmmword_1CFAC3060;
      *((_OWORD *)v3 + 1) = xmmword_1CFAC3060;
      v2 += 40;
    }
    while (v3 + 40 != (char *)v19);
    v19[0] = &v23;
    v19[1] = 0;
    int v20 = v22;
    uint64_t v21 = 0x400000000;
    int v23 = &unk_1F2600DB8;
    uint64_t v24 = 1;
    for (uint64_t i = 512; i != 640; i += 16)
      *(uint64_t *)((char *)&v16 + i) = -4096;
    uint64_t v5 = *((void *)this + 1);
    v8[0] = this;
    v8[1] = &v16;
    uint64_t v8[2] = v5;
    uint64_t v9 = v11;
    uint64_t v10 = 0x2000000000;
    char v14 = 0;
    long long v12 = 0u;
    int v13 = 0;
    int v15 = this;
    v7[0] = &unk_1F2605CB8;
    v7[1] = this;
    uint64_t v7[2] = v8;
    v6[0] = this;
    v6[1] = v7;
    v6[2] = &v16;
    v6[3] = v5;
    llvm::MemorySSA::OptimizeUses::optimizeUses((llvm::MemorySSA::OptimizeUses *)v6);
    *((unsigned char *)this + 316) = 1;
    MEMORY[0x1D25D9CD0](v12, 8);
    if (v9 != v11) {
      free(v9);
    }
    if ((v24 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v25, 8);
    }
    if (v20 != v22) {
      free(v20);
    }
    if ((v17 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v18, 8);
    }
  }
}

llvm::raw_ostream *sub_1CC0AAC58(llvm::raw_ostream *result, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 26)
    {
      unsigned int v2 = *(_DWORD *)(a2 + 88);
      if (v2) {
        return sub_1CD098D14(result, v2, 0, 0, 0);
      }
    }
    else
    {
      unsigned int v2 = *(_DWORD *)(a2 + 72);
      if (v2) {
        return sub_1CD098D14(result, v2, 0, 0, 0);
      }
    }
  }
  uint64_t v3 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v3) <= 0xA) {
    return llvm::raw_ostream::write(result, "liveOnEntry", 0xBuLL);
  }
  *(_DWORD *)(v3 + 7) = 2037544046;
  *(void *)uint64_t v3 = *(void *)"liveOnEntry";
  *((void *)result + 4) += 11;
  return result;
}

llvm *llvm::MemoryAccess::dump(llvm::MemoryAccess *this)
{
  unsigned int v2 = llvm::dbgs(this);
  uint64_t v3 = llvm::MemoryAccess::print(this, v2);
  int32x2_t result = llvm::dbgs(v3);
  uint64_t v5 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v5)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *uint64_t v5 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

llvm::MemorySSAPrinterLegacyPass *llvm::MemorySSAPrinterLegacyPass::MemorySSAPrinterLegacyPass(llvm::MemorySSAPrinterLegacyPass *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &llvm::MemorySSAPrinterLegacyPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(void *)this = &unk_1F2605A08;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC69D0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0A4FCC;
    v5[1] = &PassRegistry;
    BOOL v4 = v5;
    std::__call_once(&qword_1EBCC69D0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return this;
}

void llvm::MemorySSAPrinterLegacyPass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
}

uint64_t llvm::MemorySSAPrinterLegacyPass::runOnFunction(llvm::MemorySSAPrinterLegacyPass *this, llvm::Function *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::MemorySSAWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = *(const llvm::Module ****)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MemorySSAWrapperPass::ID)+ 32);
  llvm::MemorySSA::ensureOptimizedUses((llvm::MemorySSA *)v7);
  uint64_t v9 = byte_1EBCC6BEF;
  uint64_t v10 = byte_1EBCC6BEF & 0x7F;
  if (byte_1EBCC6BEF < 0)
  {
    uint64_t v10 = *((void *)&xmmword_1EBCC6BD8 + 1);
    uint64_t v9 = *((void *)&xmmword_1EBCC6BD8 + 1);
  }
  if (v10 | v9)
  {
    v22[0] = a2;
    v22[1] = &unk_1F2605BB8;
    void v22[2] = v7;
    uint64_t v19 = v22;
    __int16 v18 = 257;
    int v15 = "MSSA";
    __int16 v16 = 259;
    if (byte_1EBCC6BEF < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, (const void *)xmmword_1EBCC6BD8, *((unint64_t *)&xmmword_1EBCC6BD8 + 1));
    }
    else
    {
      *(_OWORD *)long long __p = xmmword_1EBCC6BD8;
      uint64_t v14 = unk_1EBCC6BE8;
    }
    sub_1CC0AAFE0((uint64_t)&v20, (uint64_t)&v19, (llvm::Twine *)v17, (llvm::Twine *)&v15, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(v20);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v12 = llvm::dbgs(v8);
    v17[0] = &unk_1F2605BB8;
    v17[1] = v7;
    llvm::Function::print(v7[2], v12, (llvm::AssemblyAnnotationWriter *)v17, 0, 0);
  }
  return 0;
}

void sub_1CC0AAFE0(uint64_t a1, uint64_t a2, llvm::Twine *this, llvm::Twine *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0) {
    uint64_t v9 = *(void *)(a5 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a5 + 23);
  }
  int v47 = 0;
  if (v9)
  {
    __int16 v42 = 260;
    uint64_t v40 = a5;
    *(void *)&long long v45 = llvm::sys::fs::openFile((unsigned __int8 *)&v40, &v47, 0, 2, 1, 438);
    *((void *)&v45 + 1) = v10;
    int v11 = std::generic_category();
    uint64_t v40 = 17;
    unsigned int v41 = v11;
    long long v12 = (llvm *)(*(uint64_t (**)(void, void, uint64_t *))(**((void **)&v45 + 1) + 32))(*((void *)&v45 + 1), v45, &v40);
    if (v12
      || (long long v12 = (llvm *)((uint64_t (*)(const std::error_category *, long long *, void))v41->equivalent_0)(v41, &v45, v40), v12))
    {
      __int16 v18 = (llvm::raw_ostream *)llvm::errs(v12);
      uint64_t v19 = (void *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 > 0x17uLL)
      {
        qmemcpy(v19, "file exists, overwriting", 24);
        int v20 = (unsigned char *)(*((void *)v18 + 4) + 24);
        *((void *)v18 + 4) = v20;
      }
      else
      {
        __int16 v18 = llvm::raw_ostream::write(v18, "file exists, overwriting", 0x18uLL);
        int v20 = (unsigned char *)*((void *)v18 + 4);
      }
      char v21 = (unsigned char *)*((void *)v18 + 3);
    }
    else
    {
      int v13 = v45;
      uint64_t v14 = (llvm::raw_ostream *)llvm::errs(v12);
      int v15 = (char *)*((void *)v14 + 4);
      unint64_t v16 = *((void *)v14 + 3) - (void)v15;
      if (v13)
      {
        if (v16 > 0x16)
        {
          qmemcpy(v15, "error writing into file", 23);
          uint64_t v17 = (unsigned char *)(*((void *)v14 + 4) + 23);
          *((void *)v14 + 4) = v17;
        }
        else
        {
          uint64_t v14 = llvm::raw_ostream::write(v14, "error writing into file", 0x17uLL);
          uint64_t v17 = (unsigned char *)*((void *)v14 + 4);
        }
        if (*((unsigned char **)v14 + 3) == v17)
        {
          llvm::raw_ostream::write(v14, "\n", 1uLL);
        }
        else
        {
          *uint64_t v17 = 10;
          ++*((void *)v14 + 4);
        }
        *(unsigned char *)(a1 + 23) = 0;
        *(unsigned char *)a1 = 0;
        return;
      }
      if (v16 > 0x21)
      {
        qmemcpy(v15, "writing to the newly created file ", 34);
        *((void *)v14 + 4) += 34;
      }
      else
      {
        uint64_t v14 = llvm::raw_ostream::write(v14, "writing to the newly created file ", 0x22uLL);
      }
      char v22 = *(unsigned char *)(a5 + 23);
      BOOL v23 = v22 < 0;
      if (v22 >= 0) {
        uint64_t v24 = (const char *)a5;
      }
      else {
        uint64_t v24 = *(const char **)a5;
      }
      size_t v25 = v22 & 0x7F;
      if (v23) {
        size_t v26 = *(void *)(a5 + 8);
      }
      else {
        size_t v26 = v25;
      }
      __int16 v18 = llvm::raw_ostream::write(v14, v24, v26);
      char v21 = (unsigned char *)*((void *)v18 + 3);
      int v20 = (unsigned char *)*((void *)v18 + 4);
    }
    if (v21 == v20)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *int v20 = 10;
      ++*((void *)v18 + 4);
    }
  }
  else
  {
    llvm::Twine::str(this, __p);
    __int16 v42 = 260;
    uint64_t v40 = (uint64_t)__p;
    llvm::createGraphFilename((llvm *)&v40, (const llvm::Twine *)&v47, (uint64_t)&v45);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v45;
    *(void *)(a5 + 16) = v46;
    HIBYTE(v46) = 0;
    LOBYTE(v45) = 0;
    if (v44 < 0) {
      operator delete(__p[0]);
    }
  }
  int v27 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v40, v47, 1, 0, 0);
  if (v47 == -1)
  {
    unint64_t v28 = (llvm::raw_ostream *)llvm::errs(v27);
    uint64_t v29 = *((void *)v28 + 4);
    if ((unint64_t)(*((void *)v28 + 3) - v29) > 0x13)
    {
      *(_DWORD *)(v29 + 16) = 656434540;
      *(_OWORD *)uint64_t v29 = *(_OWORD *)"error opening file '";
      *((void *)v28 + 4) += 20;
    }
    else
    {
      unint64_t v28 = llvm::raw_ostream::write(v28, "error opening file '", 0x14uLL);
    }
    char v30 = *(unsigned char *)(a5 + 23);
    BOOL v31 = v30 < 0;
    if (v30 >= 0) {
      BOOL v32 = (const char *)a5;
    }
    else {
      BOOL v32 = *(const char **)a5;
    }
    size_t v33 = v30 & 0x7F;
    if (v31) {
      size_t v34 = *(void *)(a5 + 8);
    }
    else {
      size_t v34 = v33;
    }
    BOOL v35 = llvm::raw_ostream::write(v28, v32, v34);
    unsigned int v36 = (void *)*((void *)v35 + 4);
    if (*((void *)v35 + 3) - (void)v36 > 0xEuLL)
    {
      qmemcpy(v36, "' for writing!\n", 15);
      *((void *)v35 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v35, "' for writing!\n", 0xFuLL);
    }
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    uint64_t v37 = (llvm *)sub_1CD4AA428((uint64_t)&v40, a2, a4);
    uint64_t v38 = (llvm::raw_ostream *)llvm::errs(v37);
    uint64_t v39 = (void *)*((void *)v38 + 4);
    if (*((void *)v38 + 3) - (void)v39 > 7uLL)
    {
      *uint64_t v39 = 0xA202E656E6F6420;
      *((void *)v38 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v38, " done. \n", 8uLL);
    }
    *(_OWORD *)a1 = *(_OWORD *)a5;
    *(void *)(a1 + 16) = *(void *)(a5 + 16);
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(void *)a5 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v40);
}

void llvm::MemorySSAAnalysis::run()
{
}

uint64_t llvm::MemorySSAAnalysis::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v22[0] = (void **)a3;
  v22[1] = (void **)&llvm::MemorySSAAnalysis::Key;
  uint64_t v8 = *(void *)(a3 + 48);
  uint64_t v7 = *(void *)(a3 + 56);
  if (v7 == v8)
  {
    uint64_t v9 = *(unsigned int *)(a3 + 68);
    uint64_t v10 = (void **)(v7 + 8 * v9);
    if (v9)
    {
      uint64_t v11 = 0;
      while (*(_UNKNOWN **)(v7 + v11) != &llvm::MemorySSAAnalysis::Key)
      {
        v11 += 8;
        if (8 * v9 == v11) {
          goto LABEL_6;
        }
      }
      uint64_t v10 = (void **)(v7 + v11);
    }
LABEL_6:
    uint64_t v8 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v14 = *(unsigned int *)(a3 + 64);
    int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((&llvm::MemorySSAAnalysis::Key >> 4) ^ (&llvm::MemorySSAAnalysis::Key >> 9));
    uint64_t v10 = (void **)(v7 + 8 * v16);
    uint64_t v17 = *v10;
    if (*v10 == (void *)-1)
    {
      __int16 v18 = 0;
LABEL_28:
      if (v18) {
        uint64_t v10 = v18;
      }
      if (*v10 != &llvm::MemorySSAAnalysis::Key)
      {
        LODWORD(v9) = *(_DWORD *)(a3 + 68);
        uint64_t v10 = (void **)(v7 + 8 * v14);
        goto LABEL_7;
      }
    }
    else
    {
      __int16 v18 = 0;
      int v19 = 1;
      while (v17 != &llvm::MemorySSAAnalysis::Key)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == (void *)-2;
        }
        if (v20) {
          __int16 v18 = v10;
        }
        unsigned int v21 = v16 + v19++;
        unsigned int v16 = v21 & v15;
        uint64_t v10 = (void **)(v7 + 8 * (v21 & v15));
        uint64_t v17 = *v10;
        if (*v10 == (void *)-1) {
          goto LABEL_28;
        }
      }
    }
    LODWORD(v9) = *(_DWORD *)(a3 + 68);
  }
LABEL_7:
  if (v7 == v8) {
    unsigned int v12 = v9;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a3 + 64);
  }
  BOOL v23 = v10 != (void **)(v7 + 8 * v12);
  if ((sub_1CBF75724(v22) || sub_1CBF7593C((uint64_t)v22))
    && (sub_1CBF745FC(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) == 0)
  {
    return llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3);
  }
  else
  {
    return 1;
  }
}

llvm::MemorySSA *llvm::MemorySSAWrapperPass::releaseMemory(llvm::MemorySSAWrapperPass *this)
{
  int32x2_t result = (llvm::MemorySSA *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (result)
  {
    llvm::MemorySSA::~MemorySSA(result);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void llvm::MemorySSAWrapperPass::runOnFunction(llvm::MemorySSAWrapperPass *this, llvm::Function *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_11:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::DominatorTreeWrapperPass::ID);
  uint64_t v7 = (uint64_t *)*((void *)this + 1);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_7:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::AAResultsWrapperPass::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_7;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::AAResultsWrapperPass::ID);
  operator new();
}

void *llvm::MemorySSAWalker::MemorySSAWalker(void *this, llvm::MemorySSA *a2)
{
  *this = &unk_1F2605B48;
  this[1] = a2;
  return this;
}

uint64_t llvm::DoNothingMemorySSAWalker::getClobberingMemoryAccess(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2)
  {
    int v3 = *(unsigned __int8 *)(a2 + 16);
    if ((v3 - 27) >= 0xFFFFFFFE)
    {
      if (v3 == 25) {
        uint64_t v4 = a2;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v4) {
        uint64_t v5 = v4 - 32;
      }
      else {
        uint64_t v5 = a2 - 64;
      }
      return *(void *)v5;
    }
  }
  return result;
}

{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t result = a2;
  if (a2)
  {
    int v3 = *(unsigned __int8 *)(a2 + 16);
    if ((v3 - 27) >= 0xFFFFFFFE)
    {
      if (v3 == 25) {
        uint64_t v4 = a2;
      }
      else {
        uint64_t v4 = 0;
      }
      if (v4) {
        uint64_t v5 = v4 - 32;
      }
      else {
        uint64_t v5 = a2 - 64;
      }
      return *(void *)v5;
    }
  }
  return result;
}

void llvm::MemoryPhi::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      unsigned int v12 = (char *)*((void *)a1 - 1);
      uint64_t v11 = (char *)a1 - 8;
      uint64_t v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          int v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      uint64_t v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      uint64_t v6 = (char *)a1 - 32 * v5;
      if (v5)
      {
        uint64_t v7 = (void **)((char *)a1 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **uint64_t v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        uint64_t v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

void llvm::MemoryDef::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      unsigned int v12 = (char *)*((void *)a1 - 1);
      uint64_t v11 = (char *)a1 - 8;
      uint64_t v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          int v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      uint64_t v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      uint64_t v6 = (char *)a1 - 32 * v5;
      if (v5)
      {
        uint64_t v7 = (void **)((char *)a1 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **uint64_t v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        uint64_t v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

void llvm::MemoryUse::deleteMe(llvm::Value *a1, llvm::Value *a2)
{
  if (a1)
  {
    llvm::Value::~Value(a1, a2);
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      unsigned int v12 = (char *)*((void *)a1 - 1);
      uint64_t v11 = (char *)a1 - 8;
      uint64_t v10 = v12;
      uint64_t v13 = v4 & 0x7FFFFFF;
      if (v13)
      {
        uint64_t v14 = 32 * v13;
        do
        {
          int v15 = &v10[v14];
          if (*(void *)&v10[v14 - 32])
          {
            **((void **)v15 - 2) = *((void *)v15 - 3);
            uint64_t v16 = *((void *)v15 - 3);
            if (v16) {
              *(void *)(v16 + 16) = *((void *)v15 - 2);
            }
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      uint64_t v6 = v11;
    }
    else
    {
      uint64_t v5 = v4 & 0x7FFFFFF;
      uint64_t v6 = (char *)a1 - 32 * v5;
      if (v5)
      {
        uint64_t v7 = (void **)((char *)a1 - 16);
        uint64_t v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **uint64_t v7 = *(v7 - 1);
            uint64_t v9 = (uint64_t)*(v7 - 1);
            if (v9) {
              *(void *)(v9 + 16) = *v7;
            }
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0) {
        uint64_t v6 = &v6[-*((void *)v6 - 1) - 8];
      }
    }
    operator delete(v6);
  }
}

BOOL llvm::upward_defs_iterator::IsGuaranteedLoopInvariant(llvm::upward_defs_iterator *this, llvm::Value *a2)
{
  unsigned int v2 = llvm::Value::stripPointerCasts(a2);
  uint64_t v3 = v2;
  unsigned int v4 = *((unsigned __int8 *)v2 + 16);
  if (v2 && v4 >= 0x1C)
  {
    uint64_t v5 = *((void *)v2 + 5);
    uint64_t v6 = *(void *)(*(void *)(v5 + 56) + 80);
    uint64_t v7 = v6 ? v6 - 24 : 0;
    if (v7 == v5) {
      return 1;
    }
  }
  if (v4 == 62 || v4 == 5 && *((_WORD *)v2 + 9) == 34)
  {
    int v8 = *((_DWORD *)v2 + 5);
    if ((v8 & 0x40000000) != 0) {
      uint64_t v9 = (llvm::Value **)*((void *)v2 - 1);
    }
    else {
      uint64_t v9 = (llvm::Value **)((char *)v2 - 32 * (v8 & 0x7FFFFFF));
    }
    unsigned int v13 = *((unsigned __int8 *)llvm::Value::stripPointerCasts(*v9) + 16);
    if (v13 < 0x1C || v13 == 59)
    {
      int v14 = *((_DWORD *)v3 + 5);
      if ((v14 & 0x40000000) != 0)
      {
        uint64_t v16 = (char *)*((void *)v3 - 1);
        uint64_t v15 = v14 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v15 = v14 & 0x7FFFFFF;
        uint64_t v16 = (char *)v3 - 32 * v15;
      }
      uint64_t v17 = (uint64_t *)(v16 + 32);
      uint64_t v18 = 32 * v15 - 32;
      do
      {
        BOOL result = v18 == 0;
        if (!v18) {
          break;
        }
        uint64_t v19 = *v17;
        v17 += 4;
        v18 -= 32;
      }
      while (*(unsigned char *)(v19 + 16) == 16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unsigned int v10 = *((unsigned __int8 *)llvm::Value::stripPointerCasts(v2) + 16);
    return v10 < 0x1C || v10 == 59;
  }
  return result;
}

void sub_1CC0ABC74(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0ABCB0()
{
}

void llvm::callDefaultCtor<llvm::MemorySSAPrinterLegacyPass>()
{
}

uint64_t sub_1CC0ABD0C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v5 = *(void *)(result - 24);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(result - 16);
    }
  }
  *unsigned int v2 = a2;
  if (!a2) {
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(result - 24) = v3;
  if (v3) {
    *(void *)(v3 + 16) = result - 24;
  }
  *(void *)(result - 16) = a2 + 8;
  *(void *)(a2 + 8) = v2;
  if (*(unsigned char *)(a2 + 16) == 26) {
    unsigned int v4 = (_DWORD *)(a2 + 88);
  }
  else {
LABEL_8:
  }
    unsigned int v4 = (_DWORD *)(a2 + 72);
  *(_DWORD *)(result + 92) = *v4;
  return result;
}

uint64_t sub_1CC0ABD80(uint64_t result, uint64_t a2)
{
  BOOL v2 = *(unsigned char *)(a2 + 16) != 26 || a2 == 0;
  uint64_t v3 = 88;
  if (v2) {
    uint64_t v3 = 72;
  }
  uint64_t v4 = *(void *)(result - 32);
  *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + v3);
  if (v4)
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v5 = *(void *)(result - 24);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(result - 16);
    }
  }
  *(void *)(result - 32) = a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(a2 + 8);
  uint64_t v7 = v8;
  *(void *)(result - 24) = v8;
  if (v8) {
    *(void *)(v7 + 16) = result - 24;
  }
  *(void *)(result - 16) = v6;
  *uint64_t v6 = result - 32;
  return result;
}

uint64_t sub_1CC0ABDE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = 0;
  if (!a2 || *((unsigned char *)a2 + 16) != 60) {
    return result;
  }
  if ((*((_DWORD *)a2 + 5) & 0x20000000) != 0)
  {
    uint64_t v5 = **(void **)*a2;
    v30[0] = (uint64_t)a2;
    int v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 2480);
      int v8 = v6 - 1;
      unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      unsigned int v10 = (uint64_t **)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == a2)
      {
LABEL_14:
        uint64_t v16 = *((unsigned int *)v10 + 4);
        if (v16)
        {
          uint64_t v17 = v10[1] + 1;
          uint64_t v18 = 16 * v16;
          while (*((_DWORD *)v17 - 2) != 6)
          {
            v17 += 2;
            v18 -= 16;
            if (!v18) {
              goto LABEL_18;
            }
          }
          if (*v17) {
            return 1;
          }
        }
        goto LABEL_18;
      }
      unsigned int v12 = 0;
      int v13 = 1;
      while (v11 != (uint64_t *)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (uint64_t *)-8192;
        }
        if (v14) {
          unsigned int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        unsigned int v10 = (uint64_t **)(v7 + 40 * v9);
        uint64_t v11 = *v10;
        if (*v10 == a2) {
          goto LABEL_14;
        }
      }
      if (v12) {
        unint64_t v28 = v12;
      }
      else {
        unint64_t v28 = v10;
      }
    }
    else
    {
      unint64_t v28 = 0;
    }
    unsigned int v10 = (uint64_t **)sub_1CC609054(v5 + 2480, (uint64_t)v30, v30, v28);
    uint64_t v29 = v30[0];
    v10[3] = 0;
    v10[4] = 0;
    *unsigned int v10 = (uint64_t *)v29;
    v10[1] = (uint64_t *)(v10 + 3);
    void v10[2] = (uint64_t *)0x100000000;
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v19 = *(a2 - 4);
  uint64_t v20 = sub_1CB83544C(*(void *)(*(void *)(a2[5] + 56) + 40) + 272, *a2);
  if (v21 == 1) {
    unint64_t v22 = -2;
  }
  else {
    unint64_t v22 = (unint64_t)(v20 + 7) >> 3;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v31);
  v30[0] = v19;
  v30[1] = v22;
  uint64_t v24 = *a1;
  BOOL v23 = a1 + 1;
  uint64_t v25 = *(void *)(v24 + 8);
  uint64_t v26 = *(void *)(v24 + 16);
  if (v25 == v26) {
    return 0;
  }
  uint64_t v27 = v25 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *, void))(**(void **)(v27 - 8) + 32))(*(void *)(v27 - 8), v30, v23, 0);
    if (result) {
      break;
    }
    BOOL v14 = v27 == v26;
    v27 += 8;
  }
  while (!v14);
  return result;
}

uint64_t sub_1CC0ABFE0(uint64_t a1, int a2, int64x2_t *a3, unsigned __int8 **a4)
{
  if (a2)
  {
    LOBYTE(v32[0]) = 0;
    v32[1] = -4096;
    v32[2] = -3;
    long long v33 = 0u;
    long long v34 = 0u;
    LOBYTE(v29[0]) = 0;
    v29[1] = -8192;
    void v29[2] = -4;
    long long v30 = 0u;
    long long v31 = 0u;
    if (a3->i8[0])
    {
      unsigned int v35 = (*(_DWORD *)(a3->i64[1] - 32) >> 4) ^ (*(_DWORD *)(a3->i64[1] - 32) >> 9);
      unint64_t v8 = sub_1CC0AC4AC(a3, (int *)&v35);
      unint64_t v36 = v8;
      uint64_t v9 = a3->i64[1];
      int v10 = *(_DWORD *)(v9 + 20);
      uint64_t v11 = v10 & 0x7FFFFFF;
      unsigned int v12 = (_DWORD *)(v9 - 32 * v11);
      int v13 = *(unsigned __int8 *)(v9 + 16);
      if (v13 == 84)
      {
        uint64_t v14 = 0;
      }
      else if (v13 == 39)
      {
        uint64_t v14 = (*(_DWORD *)(v9 + 80) + 1);
      }
      else
      {
        uint64_t v14 = 2;
      }
      if (v10 < 0 && (uint64_t v28 = *((void *)v12 - 1), (v28 & 0xFFFFFFFF0) != 0)) {
        uint64_t v15 = (*(v12 - 3) - *(_DWORD *)((char *)v12 - v28));
      }
      else {
        uint64_t v15 = 0;
      }
      if (v12 != (_DWORD *)(v9 - 32 * v14 - 32 * v15 - 32))
      {
        uint64_t v16 = 32 * v11 - 32 * v14 - 32 * v15 - 32;
        do
        {
          unsigned int v17 = *v12;
          v12 += 8;
          unsigned int v35 = (v17 >> 4) ^ (v17 >> 9);
          unint64_t v8 = sub_1CC0AC638((uint64_t *)&v36, (int *)&v35);
          unint64_t v36 = v8;
          v16 -= 32;
        }
        while (v16);
      }
    }
    else
    {
      v20.i32[0] = a3->i32[2];
      v20.i32[1] = a3[1].i32[2];
      int32x4_t v21 = vmovn_hight_s64(v20, a3[2]);
      int8x16_t v22 = (int8x16_t)vshlq_u32((uint32x4_t)veorq_s8((int8x16_t)vzip1q_s32(v21, v21), (int8x16_t)vzip2q_s32(v21, v21)), (uint32x4_t)xmmword_1CFAC4300);
      *(int8x8_t *)v22.i8 = veor_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      LODWORD(v36) = v22.i32[0] ^ v22.i32[1] ^ ((unsigned __int32)a3[3].i32[0] >> 9) ^ (37 * a3[1].i32[0]) ^ ((unsigned __int32)a3[3].i32[0] >> 4);
      LODWORD(v8) = sub_1CC0AC4AC(a3, (int *)&v36);
    }
    int v23 = a2 - 1;
    unsigned int v24 = (a2 - 1) & v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 112 * v24);
    if (sub_1CC0AC25C((unsigned __int8 *)a3, v18))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v25 = 0;
      int v26 = 1;
      while (!sub_1CC0AC25C(v18, v32))
      {
        if ((sub_1CC0AC25C(v18, v29) & (v25 == 0)) != 0) {
          uint64_t v25 = v18;
        }
        unsigned int v24 = (v24 + v26) & v23;
        uint64_t v18 = (unsigned __int8 *)(a1 + 112 * v24);
        int v27 = sub_1CC0AC25C((unsigned __int8 *)a3, v18);
        uint64_t result = 1;
        ++v26;
        if (v27) {
          goto LABEL_15;
        }
      }
      uint64_t result = 0;
      if (v25) {
        uint64_t v18 = v25;
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t result = 0;
  }
LABEL_15:
  *a4 = v18;
  return result;
}

uint64_t sub_1CC0AC25C(unsigned __int8 *a1, void *a2)
{
  if (*a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (!*a1)
  {
    if (*((void *)a1 + 1) == a2[1]
      && *((void *)a1 + 2) == a2[2]
      && *((void *)a1 + 3) == a2[3]
      && *((void *)a1 + 4) == a2[4]
      && *((void *)a1 + 5) == a2[5])
    {
      return *((void *)a1 + 6) == a2[6];
    }
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = a2[1];
  if (*(void *)(v2 - 32) != *(void *)(v3 - 32)) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 84)
  {
    uint64_t v5 = 0;
  }
  else if (v4 == 39)
  {
    uint64_t v5 = (*(_DWORD *)(v2 + 80) + 1);
  }
  else
  {
    uint64_t v5 = 2;
  }
  int v6 = 0;
  int v7 = *(_DWORD *)(v2 + 20);
  uint64_t v8 = v7 & 0x7FFFFFF;
  if (v7 < 0)
  {
    uint64_t v27 = v2 - 32 * (v7 & 0x7FFFFFF);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((v28 & 0xFFFFFFFF0) != 0) {
      int v6 = *(_DWORD *)(v27 - 12) - *(_DWORD *)(v27 - v28);
    }
    else {
      int v6 = 0;
    }
  }
  uint64_t v9 = v2 - 32 * v5 + 32 * -v6;
  int v10 = (void *)(v2 - 32 * (v7 & 0x7FFFFFF));
  unint64_t v11 = (unint64_t)(v9 - (void)v10 - 32) >> 5;
  int v12 = *(unsigned __int8 *)(v3 + 16);
  if (v12 == 84)
  {
    uint64_t v13 = 0;
  }
  else if (v12 == 39)
  {
    uint64_t v13 = (*(_DWORD *)(v3 + 80) + 1);
  }
  else
  {
    uint64_t v13 = 2;
  }
  int v14 = 0;
  int v15 = *(_DWORD *)(v3 + 20);
  uint64_t v16 = -(uint64_t)(v15 & 0x7FFFFFF);
  if (v15 < 0)
  {
    uint64_t v29 = v3 - 32 * (v15 & 0x7FFFFFF);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((v30 & 0xFFFFFFFF0) != 0) {
      int v14 = *(_DWORD *)(v29 - 12) - *(_DWORD *)(v29 - v30);
    }
    else {
      int v14 = 0;
    }
  }
  uint64_t result = 0;
  uint64_t v18 = v3 - 32 * v13 + 32 * -v14;
  uint64_t v19 = (uint64_t *)(v3 + 32 * v16);
  if (v11 == ((unint64_t)(v18 - (void)v19 - 32) >> 5))
  {
    if (v4 == 84)
    {
      uint64_t v20 = 0;
    }
    else if (v4 == 39)
    {
      uint64_t v20 = (*(_DWORD *)(v2 + 80) + 1);
    }
    else
    {
      uint64_t v20 = 2;
    }
    if (v7 < 0 && (uint64_t v31 = *(v10 - 1), (v31 & 0xFFFFFFFF0) != 0)) {
      uint64_t v21 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v31));
    }
    else {
      uint64_t v21 = 0;
    }
    if (v10 == (void *)(v2 - 32 * v20 - 32 * v21 - 32))
    {
      return 1;
    }
    else
    {
      uint64_t v22 = 32 * v8 - 32 * v20 - 32 * v21 - 64;
      do
      {
        uint64_t v24 = *v10;
        v10 += 4;
        uint64_t v23 = v24;
        uint64_t v25 = *v19;
        v19 += 4;
        uint64_t result = v23 == v25;
        BOOL v26 = v23 != v25 || v22 == 0;
        v22 -= 32;
      }
      while (!v26);
    }
  }
  return result;
}

unint64_t sub_1CC0AC4AC(unsigned char *a1, int *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(__src, 0, sizeof(__src));
  uint64_t v2 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v6 = a2;
    int v7 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v2 = &unk_1EBCBE000;
    a2 = v6;
    int v8 = v7;
    a1 = v5;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v9;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v2 = (void *)&unk_1EBCBE000;
      a1 = v5;
      a2 = v6;
    }
  }
  unint64_t v16 = v2[176];
  LOBYTE(__src[0]) = *a1;
  uint64_t v12 = 0;
  uint64_t v3 = (char *)sub_1CC0AC9D0(__src, &v12, (_OWORD *)((char *)__src + 1), (unint64_t)v14, *a2);
  if (!v12) {
    return sub_1CBAE06B8(__src, v3 - (char *)__src, v16);
  }
  uint64_t v10 = v12;
  unint64_t v11 = v3;
  if (v3 != (char *)__src && v3 != (char *)v14) {
    sub_1CBFFD1E8((char *)__src, v3, (char *)v14);
  }
  sub_1CBFFCF68((unint64_t *)v14, __src);
  return sub_1CBFFD150(v14, (unint64_t)&v11[v10 - (void)__src]);
}

unint64_t sub_1CC0AC638(uint64_t *a1, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  int v4 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v4 = &unk_1EBCBE000;
    uint64_t v3 = a1;
    uint64_t v2 = a2;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v7;
      __cxa_guard_release(&qword_1EBCBE588);
      int v4 = (void *)&unk_1EBCBE000;
      uint64_t v3 = a1;
      uint64_t v2 = a2;
    }
  }
  uint64_t v13 = v4[176];
  return sub_1CC0ACC70((char *)v10, 0, v10, (char *)v11, v3, v2);
}

unsigned char *sub_1CC0AC730(void *a1, uint64_t *a2, unsigned char *__dst, unint64_t a4, char a5)
{
  char __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = a1[5];
      uint64_t v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      uint64_t v21 = __ROR8__(v14 + a1[10], 33);
      uint64_t v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v23 = v14 + v22;
      uint64_t v25 = a1[2];
      uint64_t v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      uint64_t v26 = v21 + v17 + a1[4];
      uint64_t v27 = v22 + v12 + v25;
      uint64_t v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      uint64_t v29 = v9 + 64;
    }
    else
    {
      unint64_t v30 = a1[15];
      uint64_t v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      unint64_t v32 = v30 ^ (v30 >> 47);
      uint64_t v33 = a1[1];
      uint64_t v34 = v33 + v30 + v31;
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      uint64_t v37 = a1[5];
      uint64_t v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      unint64_t v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      unint64_t v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      uint64_t v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      uint64_t v45 = a1[2];
      uint64_t v44 = a1[3];
      uint64_t v46 = v43 + v33 + v45;
      unint64_t v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      unint64_t v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      uint64_t v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 1 - v8 <= a4)
    {
      memcpy(a1, &__src + v8, 1 - v8);
      return (char *)a1 + 1 - v8;
    }
  }
  return a1;
}

_DWORD *sub_1CC0AC9D0(void *a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  int __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *std::string __dst = a5;
    return __dst + 1;
  }
  else
  {
    unint64_t v8 = a4 - (void)__dst;
    memcpy(__dst, &__src, a4 - (void)__dst);
    uint64_t v9 = *a2;
    if (*a2)
    {
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[11];
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[12];
      uint64_t v14 = a1[13];
      uint64_t v16 = a1[6];
      uint64_t v15 = a1[7];
      uint64_t v17 = a1[14];
      unint64_t v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      uint64_t v19 = a1[5];
      uint64_t v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      uint64_t v21 = __ROR8__(v14 + a1[10], 33);
      uint64_t v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      uint64_t v23 = v14 + v22;
      uint64_t v25 = a1[2];
      uint64_t v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      uint64_t v26 = v21 + v17 + a1[4];
      uint64_t v27 = v22 + v12 + v25;
      uint64_t v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      uint64_t v29 = v9 + 64;
    }
    else
    {
      unint64_t v30 = a1[15];
      uint64_t v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      unint64_t v32 = v30 ^ (v30 >> 47);
      uint64_t v33 = a1[1];
      uint64_t v34 = v33 + v30 + v31;
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      uint64_t v37 = a1[5];
      uint64_t v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      unint64_t v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      unint64_t v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      unint64_t v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      uint64_t v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      uint64_t v45 = a1[2];
      uint64_t v44 = a1[3];
      uint64_t v46 = v43 + v33 + v45;
      unint64_t v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      unint64_t v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      uint64_t v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 4 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 4 - v8);
      return (_DWORD *)((char *)a1 + 4 - v8);
    }
  }
  return a1;
}

unint64_t sub_1CC0ACC70(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, int *a6)
{
  uint64_t v15 = a2;
  uint64_t v9 = sub_1CBFFCBA0(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  uint64_t v10 = (char *)sub_1CC0AC9D0(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  uint64_t v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

uint64_t sub_1CC0ACD38(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  if (!a2) {
    return a2;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if ((v5 - 27) < 0xFFFFFFFE) {
    return a2;
  }
  if (a4)
  {
    uint64_t v20 = sub_1CC0ACFD4(*(uint64_t ****)(a2 + 72), *(llvm::DominatorTree **)(*(void *)(a1 + 2392) + 8));
    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 2392) + 24;
      uint64_t v23 = v20;
      *(void *)&v32[0] = 0;
      uint64_t v10 = 0;
      if (sub_1CBA0E618(v21, &v23, v32)) {
        uint64_t v10 = *(void *)(*(void *)&v32[0] + 8);
      }
      if (*(unsigned char *)(v10 + 16) == 25) {
        return *(void *)(v10 - 32);
      }
      return v10;
    }
    int v5 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v5 == 26)
  {
    uint64_t v10 = *(void *)(a2 - 32);
    if (!v10) {
      goto LABEL_16;
    }
    int v11 = *(_DWORD *)(a2 + 92);
  }
  else
  {
    if (v5 == 25) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8) {
      uint64_t v9 = (uint64_t *)(v8 - 32);
    }
    else {
      uint64_t v9 = (uint64_t *)(a2 - 64);
    }
    uint64_t v10 = *v9;
    if (!*v9) {
      goto LABEL_16;
    }
    int v11 = *(_DWORD *)(a2 + 88);
  }
  uint64_t v12 = 72;
  if (*(unsigned char *)(v10 + 16) == 26) {
    uint64_t v12 = 88;
  }
  if (v11 != *(_DWORD *)(v10 + v12))
  {
LABEL_16:
    uint64_t v13 = *(void *)(a2 + 72);
    int v14 = *(unsigned __int8 *)(v13 + 16);
    if ((v14 - 37) <= 0x2B && ((1 << (v14 - 37)) & 0x80004000001) != 0) {
      return a2;
    }
    LOBYTE(v23) = ((v14 - 33) < 0x34) & (0x8000000000041uLL >> (v14 - 33));
    *(void *)&long long v24 = 0;
    *((void *)&v24 + 1) = -1;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v27 = v13;
    uint64_t v28 = a2;
    int v29 = 1;
    char v30 = 1;
    char v31 = 0;
    if (!(_BYTE)v23)
    {
      llvm::MemoryLocation::getOrNone((uint64_t ***)v13, (uint64_t)v32);
      long long v24 = v32[0];
      long long v25 = v32[1];
      long long v26 = v32[2];
    }
    if (sub_1CC0ABDE8(*(uint64_t **)(a1 + 8), (uint64_t *)v13))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 2392) + 96);
      int v16 = *(unsigned __int8 *)(a2 + 16);
    }
    else
    {
      int v16 = *(unsigned __int8 *)(a2 + 16);
      if (v16 == 25) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v17) {
        unint64_t v18 = (uint64_t *)(v17 - 32);
      }
      else {
        unint64_t v18 = (uint64_t *)(a2 - 64);
      }
      uint64_t v10 = *v18;
      if (*(void *)(*(void *)(a1 + 2392) + 96) != *v18)
      {
        uint64_t v10 = sub_1CC0AD43C(a1, v10, (uint64_t)&v23, a3);
        if (*(unsigned char *)(a2 + 16) == 26) {
          sub_1CC0ABD0C(a2, v10);
        }
        else {
          sub_1CC0ABD80(a2, v10);
        }
        if (*(void *)(*(void *)(a1 + 2392) + 96) != v10)
        {
          if (!v30 || v29 != 3) {
            return v10;
          }
          uint64_t v22 = 0x100000003;
LABEL_51:
          *(void *)(a2 + 80) = v22;
          return v10;
        }
LABEL_50:
        uint64_t v22 = 0;
        goto LABEL_51;
      }
    }
    if (v16 == 26) {
      sub_1CC0ABD0C(a2, v10);
    }
    else {
      sub_1CC0ABD80(a2, v10);
    }
    goto LABEL_50;
  }
  return v10;
}

const llvm::Instruction *sub_1CC0ACFD4(uint64_t ***this, llvm::DominatorTree *a2)
{
  v51[8] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v4 = ***this;
  unint64_t v48 = this;
  int v5 = *(_DWORD *)(v4 + 2496);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 2480);
    int v7 = v5 - 1;
    unsigned int v8 = v7 & ((this >> 4) ^ (this >> 9));
    uint64_t v9 = (llvm::Instruction **)(v6 + 40 * v8);
    uint64_t v10 = *v9;
    if (*v9 == (llvm::Instruction *)this) {
      goto LABEL_12;
    }
    int v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::Instruction *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::Instruction *)-8192;
      }
      if (v13) {
        int v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      uint64_t v9 = (llvm::Instruction **)(v6 + 40 * v8);
      uint64_t v10 = *v9;
      if (*v9 == (llvm::Instruction *)this) {
        goto LABEL_12;
      }
    }
    if (v11) {
      uint64_t v20 = v11;
    }
    else {
      uint64_t v20 = v9;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v9 = (llvm::Instruction **)sub_1CC609054(v4 + 2480, (uint64_t)&v48, (uint64_t *)&v48, v20);
  uint64_t v21 = (llvm::Instruction *)v48;
  v9[3] = 0;
  v9[4] = 0;
  *uint64_t v9 = v21;
  v9[1] = (llvm::Instruction *)(v9 + 3);
  v9[2] = (llvm::Instruction *)0x100000000;
LABEL_12:
  uint64_t v15 = *((unsigned int *)v9 + 4);
  if (!v15) {
    return 0;
  }
  int v16 = (void *)((char *)v9[1] + 8);
  uint64_t v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 16)
  {
    unint64_t v18 = 0;
    v16 += 2;
    v17 -= 16;
    if (!v17) {
      return v18;
    }
  }
  if (!*v16 || (llvm::Instruction::isVolatile((llvm::Instruction *)this) & 1) != 0) {
    return 0;
  }
  uint64_t v19 = ((_BYTE)this[2] & 0xFE) == 0x3C ? (llvm::Value *)*(this - 4) : 0;
  uint64_t v22 = llvm::Value::stripPointerCasts(v19);
  if (*((unsigned __int8 *)v22 + 16) < 0x15u) {
    return 0;
  }
  unint64_t v48 = v51;
  unsigned int v50 = 8;
  v51[0] = v22;
  unsigned int v24 = 1;
  unint64_t v18 = (const llvm::Instruction *)this;
  do
  {
    uint64_t v25 = *((void *)v48 + --v24);
    unsigned int v49 = v24;
    uint64_t v26 = *(void *)(v25 + 8);
    if (!v26) {
      continue;
    }
    do
    {
      if (*(unsigned __int8 *)(*(void *)(v26 + 24) + 16) <= 0x1Bu) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = *(unsigned __int8 **)(v26 + 24);
      }
      if (v27) {
        BOOL v28 = v27 == (unsigned __int8 *)this;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28 || !llvm::DominatorTree::dominates(a2, (const llvm::Value *)v27, v18)) {
        goto LABEL_60;
      }
      int v29 = v27[16];
      if (v29 == 62)
      {
        if (!llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v27)) {
          goto LABEL_60;
        }
LABEL_58:
        if (v49 >= (unint64_t)v50) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v48 + v49++) = v27;
        goto LABEL_60;
      }
      if (v29 == 77) {
        goto LABEL_58;
      }
      if ((v27[23] & 0x20) == 0) {
        goto LABEL_60;
      }
      uint64_t v30 = ***(void ***)v27;
      unint64_t v47 = v27;
      int v31 = *(_DWORD *)(v30 + 2496);
      if (v31)
      {
        uint64_t v32 = *(void *)(v30 + 2480);
        int v33 = v31 - 1;
        unsigned int v34 = v33 & ((v27 >> 4) ^ (v27 >> 9));
        uint64_t v35 = (unsigned __int8 **)(v32 + 40 * v34);
        uint64_t v36 = *v35;
        if (*v35 == v27) {
          goto LABEL_52;
        }
        uint64_t v37 = 0;
        int v38 = 1;
        while (v36 != (unsigned __int8 *)-4096)
        {
          if (v37) {
            BOOL v39 = 0;
          }
          else {
            BOOL v39 = v36 == (unsigned __int8 *)-8192;
          }
          if (v39) {
            uint64_t v37 = v35;
          }
          unsigned int v40 = v34 + v38++;
          unsigned int v34 = v40 & v33;
          uint64_t v35 = (unsigned __int8 **)(v32 + 40 * v34);
          uint64_t v36 = *v35;
          if (*v35 == v27) {
            goto LABEL_52;
          }
        }
        if (v37) {
          uint64_t v45 = v37;
        }
        else {
          uint64_t v45 = v35;
        }
      }
      else
      {
        uint64_t v45 = 0;
      }
      uint64_t v35 = (unsigned __int8 **)sub_1CC609054(v30 + 2480, (uint64_t)&v47, (uint64_t *)&v47, v45);
      uint64_t v46 = (uint64_t)v47;
      v35[4] = 0;
      v35[3] = 0;
      llvm::raw_ostream *v35 = (unsigned __int8 *)v46;
      v35[1] = (unsigned __int8 *)(v35 + 3);
      v35[2] = (unsigned __int8 *)0x100000000;
LABEL_52:
      uint64_t v41 = *((unsigned int *)v35 + 4);
      if (v41)
      {
        unint64_t v42 = v35[1] + 8;
        uint64_t v43 = 16 * v41;
        while (*((_DWORD *)v42 - 2) != 16)
        {
          v42 += 2;
          v43 -= 16;
          if (!v43) {
            goto LABEL_60;
          }
        }
        if (*v42)
        {
          uint64_t v44 = (v27[16] & 0xFE) == 0x3C ? *((void *)v27 - 4) : 0;
          if (v44 == v25 && !llvm::Instruction::isVolatile((llvm::Instruction *)v27)) {
            unint64_t v18 = (const llvm::Instruction *)v27;
          }
        }
      }
LABEL_60:
      uint64_t v26 = *(void *)(v26 + 8);
    }
    while (v26);
    unsigned int v24 = v49;
  }
  while (v24);
  if (v18 == (const llvm::Instruction *)this) {
    unint64_t v18 = 0;
  }
  if (v48 != v51) {
    free(v48);
  }
  return v18;
}

BOOL sub_1CC0AD3C8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 26)
  {
    uint64_t v4 = *(void *)(a1 - 32);
    if (v4)
    {
      int v5 = (int *)(a1 + 92);
      goto LABEL_11;
    }
    return 0;
  }
  if (v1 == 25) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    uint64_t v3 = (uint64_t *)(v2 - 32);
  }
  else {
    uint64_t v3 = (uint64_t *)(a1 - 64);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  int v5 = (int *)(a1 + 88);
LABEL_11:
  int v6 = *v5;
  uint64_t v7 = 72;
  if (*(unsigned char *)(v4 + 16) == 26) {
    uint64_t v7 = 88;
  }
  return v6 == *(_DWORD *)(v4 + v7);
}

uint64_t sub_1CC0AD43C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5 = (uint64_t *)a2;
  v115[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  if (!*a4) {
    *a4 = 1;
  }
  if (a2 && *(unsigned char *)(a2 + 16) == 25) {
    int v5 = *(uint64_t **)(a2 - 32);
  }
  long long v7 = *(_OWORD *)(a3 + 24);
  v91[0] = *(_OWORD *)(a3 + 8);
  v91[1] = v7;
  v91[2] = *(_OWORD *)(a3 + 40);
  uint64_t v92 = v5;
  uint64_t v93 = v5;
  uint64_t v94 = 0;
  sub_1CC0ADD84((uint64_t)&v88, a1, (uint64_t)v91, 0, 0);
  if (v89)
  {
    uint64_t v8 = v88;
    *(void *)(a3 + 72) = v90;
    return v8;
  }
  uint64_t v9 = (long long *)(a3 + 8);
  uint64_t v10 = v93;
  unsigned int v11 = *(_DWORD *)(a1 + 48);
  if (v11 >= *(_DWORD *)(a1 + 52))
  {
    long long v84 = *(_OWORD *)(a3 + 24);
    long long v97 = *v9;
    long long v98 = v84;
    long long v99 = *(_OWORD *)(a3 + 40);
    unsigned int v100 = v5;
    unsigned int v101 = v93;
    uint64_t v102 = 0;
    sub_1CC0AE37C((uint64_t *)(a1 + 40), (unint64_t)&v97);
    unsigned int v15 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40) + 72 * v11;
    long long v13 = *v9;
    long long v14 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)uint64_t v12 = v13;
    *(void *)(v12 + 48) = v5;
    *(void *)(v12 + 56) = v10;
    *(void *)(v12 + 64) = 0;
    unsigned int v15 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v15;
  }
  unint64_t v85 = v15;
  BOOL v113 = (unsigned int *)v115;
  uint64_t v114 = 0x1000000000;
  uint64_t v110 = (unsigned int *)v112;
  uint64_t v111 = 0x800000000;
  unsigned int v107 = v109;
  uint64_t v108 = 0x400000000;
  sub_1CC0AE11C(a1, (uint64_t)v10, (uint64_t)&v113, 0);
  while (2)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(v16 + 24);
    uint64_t v18 = *(unsigned int *)(v16 + 40);
    if (!v18)
    {
LABEL_17:
      uint64_t v21 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_18;
    }
    uint64_t v19 = v10[8];
    LODWORD(v20) = (v18 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
    uint64_t v22 = *v21;
    if (v19 != *v21)
    {
      int v23 = 1;
      while (v22 != -4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v18 - 1);
        uint64_t v22 = *(void *)(v17 + 16 * v20);
        if (v19 == v22)
        {
          uint64_t v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v25 = *(void *)a1;
    uint64_t v26 = *(unsigned __int8 **)(*(void *)a1 + 96);
    uint64_t v27 = *(void **)(v21[1] + 8);
    if (!v27) {
      goto LABEL_29;
    }
    uint64_t v28 = *(void *)(v25 + 72);
    uint64_t v29 = *(unsigned int *)(v25 + 88);
    unsigned int v30 = v29 - 1;
    while (1)
    {
      if (v29)
      {
        LODWORD(v31) = ((*v27 >> 4) ^ (*v27 >> 9)) & v30;
        uint64_t v32 = (uint64_t *)(v28 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v27 != *v32)
        {
          int v34 = 1;
          while (v33 != -4096)
          {
            int v35 = v31 + v34++;
            uint64_t v31 = v35 & v30;
            uint64_t v33 = *(void *)(v28 + 16 * v31);
            if (*v27 == v33)
            {
              uint64_t v32 = (uint64_t *)(v28 + 16 * v31);
              goto LABEL_26;
            }
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v32 != (uint64_t *)(v28 + 16 * v29))
        {
          uint64_t v36 = (void *)v32[1];
          if (v36) {
            break;
          }
        }
      }
LABEL_28:
      uint64_t v27 = (void *)v27[1];
      if (!v27) {
        goto LABEL_29;
      }
    }
    if (*v36) {
      uint64_t v26 = (unsigned __int8 *)(*v36 - 48);
    }
    else {
      uint64_t v26 = 0;
    }
LABEL_29:
    int v37 = 0;
    while (2)
    {
      if (v114)
      {
        uint64_t v38 = v113[v114 - 1];
        LODWORD(v114) = v114 - 1;
        uint64_t v39 = *(void *)(a1 + 40) + 72 * v38;
        unsigned int v40 = *(void **)(v39 + 56);
        uint64_t v103 = v40;
        long long v104 = *(_OWORD *)v39;
        long long v105 = *(_OWORD *)(v39 + 16);
        long long v106 = *(_OWORD *)(v39 + 32);
        uint64_t v95 = 0;
        if (sub_1CC0AE720(*(void *)(a1 + 2360), *(_DWORD *)(a1 + 2376), (uint64_t *)&v103, &v95))
        {
          if (*(unsigned char *)(a1 + 2384)) {
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v41 = sub_1CC0AE8F0(a1 + 2360, (uint64_t *)&v103, v95);
          *uint64_t v41 = (uint64_t)v40;
          *(_OWORD *)(v41 + 1) = v104;
          *(_OWORD *)(v41 + 3) = v105;
          *(_OWORD *)(v41 + 5) = v106;
          uint64_t v42 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v42 + 80)
            && *(void *)v39 == *(void *)(v42 + 8)
            && *(void *)(v39 + 8) == *(void *)(v42 + 16)
            && *(void *)(v39 + 16) == *(void *)(v42 + 24)
            && *(void *)(v39 + 24) == *(void *)(v42 + 32)
            && *(void *)(v39 + 32) == *(void *)(v42 + 40)
            && *(void *)(v39 + 40) == *(void *)(v42 + 48))
          {
            uint64_t v43 = *(void **)(v42 + 64);
          }
          else
          {
            uint64_t v43 = 0;
          }
          sub_1CC0ADD84((uint64_t)&v103, a1, v39, (uint64_t)v26, (uint64_t)v43);
          uint64_t v44 = v103;
          if ((_BYTE)v104)
          {
            if (llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, (uint64_t)v103, (uint64_t)v26))
            {
              if (v108 >= (unint64_t)HIDWORD(v108)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v45 = (char *)v107 + 16 * v108;
              *uint64_t v45 = v44;
              v45[1] = v38;
              LODWORD(v108) = v108 + 1;
              goto LABEL_45;
            }
            int v37 = 1;
            int v87 = v38;
            int v46 = 1;
LABEL_46:
            if (v46 == 1)
            {
              LODWORD(v38) = v87;
              if (v37)
              {
LABEL_105:
                LODWORD(v69) = v38;
                uint64_t v70 = *(void *)(a1 + 40);
                while (1)
                {
                  unsigned int v71 = v69;
                  if (v85 > v69) {
                    break;
                  }
                  uint64_t v69 = *(void *)(v70 + 72 * v69 + 64);
                  if ((v69 & 0xFF00000000) == 0)
                  {
                    unsigned int v71 = v69;
                    break;
                  }
                }
                *(void *)&long long v97 = *(void *)(v70 + 72 * v71 + 56);
                *((void *)&v97 + 1) = v69;
                *(void *)&long long v98 = &v99;
                *((void *)&v98 + 1) = 0x400000000;
                goto LABEL_110;
              }
              break;
            }
            continue;
          }
          if (v103 != v26 && v103 != v43)
          {
            sub_1CC0AE11C(a1, (uint64_t)v103, (uint64_t)&v113, v38);
            int v46 = 0;
            goto LABEL_46;
          }
          if (v103 != v43)
          {
            if (v111 >= (unint64_t)HIDWORD(v111)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v110[v111] = v38;
            LODWORD(v111) = v111 + 1;
          }
        }
LABEL_45:
        int v46 = 2;
        goto LABEL_46;
      }
      break;
    }
    if (v111)
    {
      int v86 = v10;
      uint64_t v10 = 0;
      uint64_t v103 = (char *)&v104 + 8;
      *(void *)&long long v104 = 0x400000000;
      uint64_t v47 = 4 * v111;
      unint64_t v48 = v110;
      do
      {
        uint64_t v49 = *v48;
        sub_1CC0ADD84((uint64_t)&v95, a1, *(void *)(a1 + 40) + 72 * v49, 0, 0);
        if (v96)
        {
          if (v104 >= (unint64_t)DWORD1(v104)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unsigned int v50 = (char *)v103 + 16 * v104;
          void *v50 = v95;
          v50[1] = v49;
          LODWORD(v104) = v104 + 1;
        }
        else
        {
          uint64_t v10 = v95;
        }
        ++v48;
        v47 -= 4;
      }
      while (v47);
      if (v108)
      {
        if (!v10 && v26)
        {
          do
          {
            int v65 = v26[16];
            if ((v65 - 27) < 0xFFFFFFFE) {
              break;
            }
            uint64_t v66 = v65 == 25 ? v26 : 0;
            uint64_t v67 = (unsigned __int8 **)(v66 ? v66 - 32 : v26 - 64);
            uint64_t v26 = *v67;
          }
          while (*v67);
        }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      int v51 = v104;
      if (v104)
      {
        int v52 = v103;
        if (v104 == 1)
        {
          unsigned int v53 = 1;
          uint64_t v54 = (uint64_t *)v103;
        }
        else
        {
          int v58 = (uint64_t *)((char *)v103 + 16);
          uint64_t v59 = 16 * v104 - 16;
          uint64_t v54 = (uint64_t *)v103;
          int v60 = (uint64_t *)((char *)v103 + 16);
          do
          {
            uint64_t v61 = *v60;
            v60 += 2;
            if (!llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, v61, *v54)) {
              uint64_t v54 = v58;
            }
            int v58 = v60;
            v59 -= 16;
          }
          while (v59);
          int v52 = v103;
          unsigned int v53 = v104;
        }
        uint64_t v62 = (uint64_t *)&v52[v53 - 1];
        uint64_t v10 = v86;
        if (v62 == v54)
        {
          uint64_t v64 = v53;
        }
        else
        {
          long long v63 = *(_OWORD *)v62;
          *(_OWORD *)uint64_t v62 = *(_OWORD *)v54;
          *(_OWORD *)uint64_t v54 = v63;
          int v52 = v103;
          uint64_t v64 = v104;
          unsigned int v53 = v104;
        }
        long long v68 = v52[v64 - 1];
        LODWORD(v104) = v53 - 1;
        long long v97 = v68;
        sub_1CC0AE2B8((uint64_t)&v98, (uint64_t)&v103);
      }
      else
      {
        unint64_t v85 = *(unsigned int *)(a1 + 48);
        LODWORD(v114) = 0;
        if (v111)
        {
          char v55 = v110;
          uint64_t v56 = 4 * v111;
          do
          {
            unsigned int v57 = *v55++;
            sub_1CC0AE11C(a1, (uint64_t)v10, (uint64_t)&v113, v57);
            v56 -= 4;
          }
          while (v56);
        }
        LODWORD(v111) = 0;
      }
      if (v103 != (char *)&v104 + 8) {
        free(v103);
      }
      if (!v51) {
        continue;
      }
    }
    else
    {
      char v73 = v107;
      unsigned int v74 = v108;
      if (v108 == 1)
      {
        uint64_t v75 = (uint64_t *)v107;
      }
      else
      {
        int v76 = (uint64_t *)((char *)v107 + 16);
        uint64_t v77 = 16 * v108 - 16;
        uint64_t v75 = (uint64_t *)v107;
        long long v78 = (uint64_t *)((char *)v107 + 16);
        do
        {
          uint64_t v79 = *v78;
          v78 += 2;
          if (!llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, v79, *v75)) {
            uint64_t v75 = v76;
          }
          int v76 = v78;
          v77 -= 16;
        }
        while (v77);
        char v73 = v107;
        unsigned int v74 = v108;
      }
      uint64_t v80 = (uint64_t *)&v73[v74 - 1];
      if (v80 == v75)
      {
        uint64_t v82 = v74;
      }
      else
      {
        long long v81 = *(_OWORD *)v80;
        *(_OWORD *)uint64_t v80 = *(_OWORD *)v75;
        *(_OWORD *)uint64_t v75 = v81;
        char v73 = v107;
        uint64_t v82 = v108;
        unsigned int v74 = v108;
      }
      long long v83 = v73[v82 - 1];
      LODWORD(v108) = v74 - 1;
      long long v97 = v83;
      sub_1CC0AE2B8((uint64_t)&v98, (uint64_t)&v107);
    }
    break;
  }
LABEL_110:
  if (v107 != v109) {
    free(v107);
  }
  if (v110 != (unsigned int *)v112) {
    free(v110);
  }
  if (v113 != (unsigned int *)v115) {
    free(v113);
  }
  *(_DWORD *)(a1 + 48) = 0;
  sub_1CC0AEBD8((char *)(a1 + 2360));
  *(unsigned char *)(a1 + 2384) = 0;
  uint64_t v8 = v97;
  if ((long long *)v98 != &v99) {
    free((void *)v98);
  }
  return v8;
}

uint64_t sub_1CC0ADD84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *(int **)(a2 + 32);
  int v11 = *v10;
  if (!*v10) {
    *uint64_t v10 = 1;
  }
  uint64_t v12 = *(void *)(a3 + 56);
  if (v12)
  {
    while (1)
    {
      *(void *)(a3 + 56) = v12;
      if (v12 == a4 || v12 == a5)
      {
        *(void *)uint64_t v9 = v12;
        goto LABEL_22;
      }
      int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 26)
      {
        if (*(void *)(*(void *)a2 + 96) == v12)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = 3;
          goto LABEL_24;
        }
        long long v14 = *(_DWORD **)(a2 + 32);
        if ((*v14)-- == 1)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          goto LABEL_23;
        }
        uint64_t result = sub_1CC0ADEE4(*(llvm::MemoryLocation **)(v12 + 72), (long long *)a3, *(void *)(*(void *)(a2 + 24) + 56), *(uint64_t **)(a2 + 8));
        if (result)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = HIDWORD(result);
          *(_DWORD *)(v9 + 16) = v16;
          return result;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
      }
      if ((v13 - 27) >= 0xFFFFFFFE)
      {
        uint64_t v17 = v13 == 25 ? v12 : 0;
        uint64_t v18 = (uint64_t *)(v17 ? v17 - 32 : v12 - 64);
        uint64_t v12 = *v18;
        if (*v18) {
          continue;
        }
      }
      break;
    }
  }
  if (!v11) {
    **(_DWORD **)(a2 + 32) = 0;
  }
  *(void *)uint64_t v9 = *(void *)(a3 + 56);
LABEL_22:
  *(unsigned char *)(v9 + 8) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 12) = 1;
LABEL_24:
  *(unsigned char *)(v9 + 16) = 1;
  return result;
}

uint64_t sub_1CC0ADEE4(llvm::MemoryLocation *this, long long *a2, uint64_t a3, uint64_t *a4)
{
  int v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 84)
  {
    uint64_t v6 = *((void *)this - 4);
    if (v6)
    {
      if (!*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *((void *)this + 9) && (*(unsigned char *)(v6 + 33) & 0x20) != 0)
      {
        int v21 = *(_DWORD *)(v6 + 36);
        BOOL v22 = (v21 - 126) > 0x26 || ((1 << (v21 - 126)) & 0x6000000001) == 0;
        if (!v22 || (v21 != 244 ? (BOOL v23 = v21 == 7) : (BOOL v23 = 1), v23))
        {
          LOBYTE(v24) = 0;
          HIDWORD(v24) = 0;
          return v24;
        }
      }
    }
  }
  if (!a3) {
    goto LABEL_23;
  }
  int v7 = *(unsigned __int8 *)(a3 + 16);
  if ((v7 - 33) <= 0x33 && ((1 << (v7 - 33)) & 0x8000000000041) != 0)
  {
    uint64_t v9 = (uint64_t)(a4 + 1);
    uint64_t v10 = *a4;
    unsigned int v11 = v5 - 33;
    if (v11 > 0x33) {
      goto LABEL_14;
    }
    if (((1 << v11) & 0x8000000000041) != 0)
    {
      LOBYTE(v13) = llvm::AAResults::getModRefInfo(v10, (uint64_t)this, a3, v9);
    }
    else
    {
      if (((1 << v11) & 0x800040000010) == 0)
      {
LABEL_14:
        llvm::MemoryLocation::getOrNone((uint64_t ***)this, (uint64_t)&v26);
        v25[0] = v26;
        v25[1] = v27;
        v25[2] = v28;
        char ModRefInfo = llvm::AAResults::getModRefInfo(v10, a3, (uint64_t)v25, v9);
        if ((ModRefInfo & 3) != 0) {
          LOBYTE(v13) = ModRefInfo | 3;
        }
        else {
          LOBYTE(v13) = 4;
        }
        goto LABEL_17;
      }
      LOBYTE(v13) = 7;
    }
LABEL_17:
    LOBYTE(v14) = (v13 & 3) != 0;
LABEL_24:
    LOBYTE(v24) = v14;
    int v19 = 1;
    if ((v13 & 4) == 0) {
      int v19 = 3;
    }
    HIDWORD(v24) = v19;
    return v24;
  }
  if (v5 != 60 || v7 != 60)
  {
LABEL_23:
    long long v18 = a2[1];
    long long v26 = *a2;
    long long v27 = v18;
    long long v28 = a2[2];
    char v29 = 1;
    unsigned int v13 = llvm::AAResults::getModRefInfo(*a4, this, &v26, (uint64_t)(a4 + 1));
    int v14 = (v13 >> 1) & 1;
    goto LABEL_24;
  }
  int v15 = *(unsigned __int16 *)(a3 + 18);
  unint64_t v16 = *((unsigned __int16 *)this + 9);
  if (v15 & 1) != 0 && (v16) {
    char v17 = 1;
  }
  else {
    char v17 = ((~v15 & 0x380) == 0) | (0xD0uLL >> ((v16 >> 7) & 7));
  }
  LOBYTE(v24) = v17 & 1;
  HIDWORD(v24) = 1;
  return v24;
}

uint64_t sub_1CC0AE11C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = (uint64_t *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(*(void *)(a1 + 40) + 72 * a4);
  *(void *)unint64_t v16 = a2;
  *(_OWORD *)&void v16[8] = *v8;
  *(_OWORD *)&v16[24] = v8[1];
  *(_OWORD *)&v16[40] = v8[2];
  uint64_t result = sub_1CC0AE4A0((uint64_t)v23, (uint64_t *)v16, *(void *)(a1 + 16), a1 + 2384);
  long long v19 = v27;
  long long v20 = v28;
  long long v21 = v29;
  uint64_t v22 = v30;
  *(_OWORD *)&v16[32] = v23[2];
  *(_OWORD *)&v16[48] = v24;
  long long v17 = v25;
  long long v18 = v26;
  *(_OWORD *)unint64_t v16 = v23[0];
  *(_OWORD *)&v16[16] = v23[1];
  if (*((void *)&v24 + 1))
  {
    do
    {
      unint64_t v10 = *(unsigned int *)(a3 + 8);
      if (v10 >= *(unsigned int *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a3 + 4 * v10) = *(_DWORD *)(a1 + 48);
      ++*(_DWORD *)(a3 + 8);
      unsigned int v11 = *(_DWORD *)(a1 + 48);
      if (v11 >= *(_DWORD *)(a1 + 52))
      {
        v31[0] = *(_OWORD *)&v16[8];
        v31[1] = *(_OWORD *)&v16[24];
        _OWORD v31[2] = *(_OWORD *)&v16[40];
        uint64_t v32 = *(void *)v16;
        uint64_t v33 = *(void *)v16;
        uint64_t v34 = a4 | 0x100000000;
        sub_1CC0AE37C(v7, (unint64_t)v31);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 40) + 72 * v11;
        long long v13 = *(_OWORD *)&v16[24];
        long long v14 = *(_OWORD *)&v16[40];
        float64x2_t v15 = vld1q_dup_f64((const double *)v16);
        *(_OWORD *)uint64_t v12 = *(_OWORD *)&v16[8];
        *(_OWORD *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 32) = v14;
        *(float64x2_t *)(v12 + 48) = v15;
        *(void *)(v12 + 64) = a4 | 0x100000000;
        ++*(_DWORD *)(a1 + 48);
      }
      uint64_t result = sub_1CC0AE438((uint64_t)v16);
    }
    while (*(void *)&v16[56]);
  }
  return result;
}

uint64_t sub_1CC0AE2B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      int v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 16 * v4);
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v6 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v6;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  return a1;
}

__n128 sub_1CC0AE37C(uint64_t *a1, unint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  unint64_t v3 = *a1;
  if (v2 >= *((_DWORD *)a1 + 3))
  {
    unint64_t v8 = v3 + 72 * v2;
    if (v3 > a2 || v8 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = v3 + 72 * *((unsigned int *)a1 + 2);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(__n128 *)(v4 + 16) = result;
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CC0AE438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 16) == 27;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    goto LABEL_9;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v4;
  if (v4 >= (*(_DWORD *)(v2 + 20) & 0x7FFFFFFu))
  {
    *(_DWORD *)(a1 + 64) = 0;
LABEL_9:
    *(void *)(a1 + 56) = 0;
    return a1;
  }
  sub_1CC0AE530(a1);
  return a1;
}

uint64_t sub_1CC0AE4A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 64) = 0;
  long long v5 = *(_OWORD *)(a2 + 1);
  long long v6 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(void *)(a1 + 120) = *a2;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 144) = a4;
  *(void *)a1 = 0;
  uint64_t v7 = *a2;
  if (*a2) {
    LOBYTE(v7) = *(unsigned char *)(v7 + 16) == 27;
  }
  *(unsigned char *)(a1 + 136) = v7;
  sub_1CC0AE530(a1);
  return a1;
}

void sub_1CC0AE530(uint64_t a1)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2) {
    BOOL v4 = v3 == 27;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    int v7 = *(_DWORD *)(v2 + 20);
    if ((v7 & 0x40000000) != 0) {
      uint64_t v8 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v8 = v2 - 32 * (v7 & 0x7FFFFFF);
    }
    long long v6 = (void *)(v8 + 32 * *(unsigned int *)(a1 + 64));
  }
  else
  {
    if (v3 == 25) {
      uint64_t v5 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v5 = 0;
    }
    long long v6 = (void *)(v2 - 64);
    if (v5) {
      long long v6 = (void *)(v5 - 32);
    }
  }
  *(void *)a1 = *v6;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 104);
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v9 = (unsigned __int8 **)(a1 + 72);
    unint64_t v10 = *(llvm::Value **)(a1 + 72);
    if (v10)
    {
      BOOL IsGuaranteedLoopInvariant = llvm::upward_defs_iterator::IsGuaranteedLoopInvariant((llvm::upward_defs_iterator *)a1, v10);
      uint64_t v12 = *v9;
      if (!IsGuaranteedLoopInvariant)
      {
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = -1;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 88);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 104);
      }
      long long v13 = *(llvm::BasicBlock **)(*(void *)(a1 + 120) + 64);
      long long v14 = (llvm::Value *)(*(void *)(*((void *)v13 + 7) + 40) + 272);
      v21[0] = (llvm::Value *)v12;
      v21[1] = v14;
      void v21[2] = 0;
      v21[3] = 0;
      uint64_t v22 = v24;
      uint64_t v23 = 0x400000000;
      if (v12 && v12[16] >= 0x1Cu)
      {
        v24[0] = v12;
        LODWORD(v23) = 1;
      }
      if (*(unsigned char *)(*(void *)(a1 + 56) + 16) == 27) {
        uint64_t v15 = *(void *)(a1 + 56);
      }
      else {
        uint64_t v15 = 0;
      }
      int v16 = *(_DWORD *)(v15 + 20);
      if ((v16 & 0x40000000) != 0) {
        uint64_t v17 = *(void *)(v15 - 8);
      }
      else {
        uint64_t v17 = v15 - 32 * (v16 & 0x7FFFFFF);
      }
      uint64_t v18 = llvm::PHITransAddr::PHITranslateValue((llvm::PHITransAddr *)v21, v13, *(llvm::BasicBlock **)(v17 + 32 * *(unsigned int *)(v15 + 76) + 8 * *(unsigned int *)(a1 + 64)), *(const llvm::DominatorTree **)(a1 + 128));
      if ((v18 & 1) == 0)
      {
        long long v19 = v21[0];
        if ((unsigned __int8 *)v21[0] != *v9)
        {
          *(llvm::Value **)(a1 + 8) = v21[0];
          if (v19 && !llvm::upward_defs_iterator::IsGuaranteedLoopInvariant((llvm::upward_defs_iterator *)v18, v19)) {
            *(void *)(a1 + 16) = -1;
          }
          long long v20 = *(unsigned char **)(a1 + 144);
          if (v20) {
            *long long v20 = 1;
          }
        }
      }
      if (v22 != v24) {
        free(v22);
      }
    }
  }
}

uint64_t sub_1CC0AE720(uint64_t a1, int a2, uint64_t *a3, uint64_t **a4)
{
  if (!a2)
  {
    long long v20 = 0;
    uint64_t result = 0;
    goto LABEL_26;
  }
  BOOL v4 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = a3[5];
  uint64_t v11 = a3[6];
  uint64_t v12 = (v6 >> 4) ^ (v6 >> 9) ^ (37 * v7) ^ (v8 >> 9) ^ (v8 >> 4) ^ (v9 >> 9) ^ (v9 >> 4) ^ (v10 >> 9) ^ (v10 >> 4) ^ (v11 >> 9) ^ (v11 >> 4);
  unint64_t v13 = v12 | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32);
  unint64_t v14 = (v13 + ~(v12 << 32)) ^ ((v13 + ~(v12 << 32)) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  LODWORD(v12) = (v16 >> 31) ^ v16;
  int v17 = a2 - 1;
  unsigned int v18 = (a2 - 1) & v12;
  for (int i = 1; ; ++i)
  {
    long long v20 = (uint64_t *)(a1 + 56 * v18);
    uint64_t v21 = *v20;
    if (v5 == *v20 && v6 == v20[1] && v7 == v20[2] && v8 == v20[3] && v9 == v20[4] && v10 == v20[5] && v11 == v20[6])
    {
      uint64_t result = 1;
      goto LABEL_26;
    }
    if (v21 == -4096) {
      break;
    }
    if (v21 != -8192 || v20[1] != -8192 || v20[2] != -4 || v20[3] || v20[4] || v20[5]) {
      goto LABEL_20;
    }
    BOOL v22 = v20[6] == 0;
LABEL_21:
    if (v22 && v4 == 0) {
      BOOL v4 = (uint64_t *)(a1 + 56 * v18);
    }
    unsigned int v23 = v18 + i;
    unsigned int v18 = v23 & v17;
  }
  if (v20[1] != -4096 || v20[2] != -3 || v20[3] || v20[4] || v20[5] || v20[6])
  {
LABEL_20:
    BOOL v22 = 0;
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v4) {
    long long v20 = v4;
  }
LABEL_26:
  *a4 = v20;
  return result;
}

uint64_t *sub_1CC0AE8F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_12;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_12:
    sub_1CC0AE9E0(a1, v6);
    uint64_t v8 = 0;
    sub_1CC0AE720(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096 || a3[2] != -3 || a3[3] || a3[4] || a3[5] || a3[6]) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

char *sub_1CC0AE9E0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(56 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    int v12 = *(_DWORD *)(a1 + 16);
    if (v12)
    {
      unint64_t v13 = &result[56 * v12];
      do
      {
        *(void *)uint64_t result = -4096;
        *((void *)result + 1) = -4096;
        *((void *)result + 2) = -3;
        *(_OWORD *)(result + 24) = 0uLL;
        *(_OWORD *)(result + 40) = 0uLL;
        result += 56;
      }
      while (result != v13);
    }
    if (!v3)
    {
LABEL_26:
      JUMPOUT(0x1D25D9CD0);
    }
    uint64_t v14 = 56 * v3;
    unint64_t v15 = (uint64_t *)v4;
    while (1)
    {
      if (*v15 == -4096)
      {
        if (v15[1] == -4096 && v15[2] == -3)
        {
LABEL_21:
          if (!v15[3] && !v15[4] && !v15[5] && !v15[6]) {
            goto LABEL_17;
          }
        }
      }
      else if (*v15 == -8192 && v15[1] == -8192 && v15[2] == -4)
      {
        goto LABEL_21;
      }
      long long v19 = 0;
      sub_1CC0AE720(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
      unint64_t v16 = v19;
      *long long v19 = *v15;
      long long v17 = *(_OWORD *)(v15 + 1);
      long long v18 = *(_OWORD *)(v15 + 3);
      *(_OWORD *)(v16 + 5) = *(_OWORD *)(v15 + 5);
      *(_OWORD *)(v16 + 3) = v18;
      *(_OWORD *)(v16 + 1) = v17;
      ++*(_DWORD *)(a1 + 8);
LABEL_17:
      v15 += 7;
      v14 -= 56;
      if (!v14) {
        goto LABEL_26;
      }
    }
  }
  *(void *)(a1 + 8) = 0;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = &result[56 * v10];
    do
    {
      *(void *)uint64_t result = -4096;
      *((void *)result + 1) = -4096;
      *((void *)result + 2) = -3;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      result += 56;
    }
    while (result != v11);
  }
  return result;
}

char *sub_1CC0AEBD8(char *result)
{
  int v1 = result;
  int v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
LABEL_4:
      if (v3)
      {
        uint64_t v4 = *(void *)result;
        uint64_t v5 = *(void *)result + 56 * v3;
        do
        {
          *(void *)uint64_t v4 = -4096;
          *(void *)(v4 + 8) = -4096;
          *(void *)(v4 + 16) = -3;
          *(_OWORD *)(v4 + 24) = 0uLL;
          *(_OWORD *)(v4 + 40) = 0uLL;
          v4 += 56;
        }
        while (v4 != v5);
      }
      *((void *)result + 1) = 0;
      return result;
    }
    int v6 = 1 << (33 - __clz(v2 - 1));
    if (v6 <= 64) {
      int v7 = 64;
    }
    else {
      int v7 = v6;
    }
  }
  else
  {
    if (!*((_DWORD *)result + 3)) {
      return result;
    }
    unsigned int v3 = *((_DWORD *)result + 4);
    if (v3 <= 0x40) {
      goto LABEL_4;
    }
    int v7 = 0;
  }
  if (v7 == v3)
  {
    *((void *)result + 1) = 0;
    uint64_t v12 = *(void *)result;
    uint64_t v13 = *(void *)result + 56 * v3;
    do
    {
      *(void *)uint64_t v12 = -4096;
      *(void *)(v12 + 8) = -4096;
      *(void *)(v12 + 16) = -3;
      *(_OWORD *)(v12 + 24) = 0uLL;
      *(_OWORD *)(v12 + 40) = 0uLL;
      v12 += 56;
    }
    while (v12 != v13);
  }
  else
  {
    uint64_t result = (char *)MEMORY[0x1D25D9CD0](*(void *)result, 8);
    if (v7)
    {
      unint64_t v8 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
      unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v9;
      uint64_t result = (char *)operator new(56 * v9, (std::align_val_t)8uLL);
      *(void *)int v1 = result;
      *((void *)v1 + 1) = 0;
      int v10 = *((_DWORD *)v1 + 4);
      if (v10)
      {
        uint64_t v11 = &result[56 * v10];
        do
        {
          *(void *)uint64_t result = -4096;
          *((void *)result + 1) = -4096;
          *((void *)result + 2) = -3;
          *(_OWORD *)(result + 24) = 0uLL;
          *(_OWORD *)(result + 40) = 0uLL;
          result += 56;
        }
        while (result != v11);
      }
    }
    else
    {
      *(void *)int v1 = 0;
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

void sub_1CC0AED74()
{
}

llvm::raw_ostream *sub_1CC0AED88(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3 = *((void *)result + 1);
  int v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    uint64_t v6 = *(void *)(v3 + 24);
    unsigned int v7 = v4 - 1;
    uint64_t v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = *(void *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      uint64_t v12 = *(llvm::MemoryDef **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        uint64_t v13 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v13 > 1uLL)
        {
          *uint64_t v13 = 8251;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        uint64_t result = llvm::MemoryAccess::print(v12, this);
        uint64_t v14 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *uint64_t v14 = 10;
          ++*((void *)this + 4);
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v8 + v10++;
        uint64_t v8 = v11 & v7;
        uint64_t v9 = *(void *)(v6 + 16 * v8);
        if (v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC0AEEA4(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3 = *((void *)result + 1);
  int v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    uint64_t v6 = *(void *)(v3 + 24);
    unsigned int v7 = v4 - 1;
    uint64_t v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = *(void *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      uint64_t v12 = *(llvm::MemoryDef **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        uint64_t v13 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v13 > 1uLL)
        {
          *uint64_t v13 = 8251;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        uint64_t result = llvm::MemoryAccess::print(v12, this);
        uint64_t v14 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *uint64_t v14 = 10;
          ++*((void *)this + 4);
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v8 + v10++;
        uint64_t v8 = v11 & v7;
        uint64_t v9 = *(void *)(v6 + 16 * v8);
        if (v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

void sub_1CC0AEFC0()
{
}

llvm::raw_ostream *sub_1CC0AEFD4(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v3 = *((void *)result + 1);
  int v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    uint64_t v6 = *(void *)(v3 + 24);
    unsigned int v7 = v4 - 1;
    uint64_t v8 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v9 = *(void *)(v6 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      uint64_t v12 = *(llvm::MemoryDef **)(v6 + 16 * v8 + 8);
      if (v12)
      {
        uint64_t v13 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v13 > 1uLL)
        {
          *uint64_t v13 = 8251;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "; ", 2uLL);
        }
        uint64_t result = llvm::MemoryAccess::print(v12, this);
        uint64_t v14 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v14)
        {
          return llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *uint64_t v14 = 10;
          ++*((void *)this + 4);
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v8 + v10++;
        uint64_t v8 = v11 & v7;
        uint64_t v9 = *(void *)(v6 + 16 * v8);
        if (v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC0AF0F0(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3 = *((void *)result + 1);
  int v4 = *(_DWORD *)(v3 + 40);
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v3 + 24);
    unsigned int v8 = v4 - 1;
    uint64_t v9 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v10 = *(void *)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      uint64_t v13 = *(llvm::MemoryDef **)(v7 + 16 * v9 + 8);
      if (v13)
      {
        uint64_t v14 = (llvm::MemoryDef *)(*(uint64_t (**)(void, llvm::MemoryDef *))(**((void **)result + 2) + 16))(*((void *)result + 2), v13);
        unint64_t v15 = (_WORD *)*((void *)a3 + 4);
        if (*((void *)a3 + 3) - (void)v15 > 1uLL)
        {
          *unint64_t v15 = 8251;
          *((void *)a3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a3, "; ", 2uLL);
        }
        uint64_t result = llvm::MemoryAccess::print(v13, a3);
        if (v14)
        {
          unint64_t v16 = (_OWORD *)*((void *)a3 + 4);
          if (*((void *)a3 + 3) - (void)v16 > 0xFuLL)
          {
            *unint64_t v16 = *(_OWORD *)" - clobbered by ";
            *((void *)a3 + 4) += 16;
          }
          else
          {
            uint64_t result = llvm::raw_ostream::write(a3, " - clobbered by ", 0x10uLL);
          }
          if (*(llvm::MemoryDef **)(*((void *)v6 + 1) + 96) == v14)
          {
            uint64_t v17 = *((void *)a3 + 4);
            if ((unint64_t)(*((void *)a3 + 3) - v17) > 0xA)
            {
              *(_DWORD *)(v17 + 7) = 2037544046;
              *(void *)uint64_t v17 = *(void *)"liveOnEntry";
              *((void *)a3 + 4) += 11;
            }
            else
            {
              uint64_t result = llvm::raw_ostream::write(a3, "liveOnEntry", 0xBuLL);
            }
          }
          else
          {
            uint64_t result = llvm::MemoryAccess::print(v14, a3);
          }
        }
        long long v18 = (unsigned char *)*((void *)a3 + 4);
        if (*((unsigned char **)a3 + 3) == v18)
        {
          return llvm::raw_ostream::write(a3, "\n", 1uLL);
        }
        else
        {
          *long long v18 = 10;
          ++*((void *)a3 + 4);
        }
      }
    }
    else
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        uint64_t v10 = *(void *)(v7 + 16 * v9);
        if (v10 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC0AF304(uint64_t a1, long long *a2, uint64_t a3, llvm::AAResults *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = *(void *)(v5 - 32);
    if (v7)
    {
      if (!*(unsigned char *)(v7 + 16) && *(void *)(v7 + 24) == *(void *)(v5 + 72) && (*(unsigned char *)(v7 + 33) & 0x20) != 0)
      {
        int v22 = *(_DWORD *)(v7 + 36);
        BOOL v23 = (v22 - 126) > 0x26 || ((1 << (v22 - 126)) & 0x6000000001) == 0;
        if (!v23 || (v22 != 244 ? (BOOL v24 = v22 == 7) : (BOOL v24 = 1), v24))
        {
          v27[0] = 0;
          *(_DWORD *)&v27[4] = 0;
          v27[8] = 1;
          return *(void *)v27;
        }
      }
    }
  }
  if (!a3) {
    goto LABEL_17;
  }
  int v8 = *(unsigned __int8 *)(a3 + 16);
  if ((v8 - 33) <= 0x33 && ((1 << (v8 - 33)) & 0x8000000000041) != 0)
  {
    char ModRefInfo = llvm::AAResults::getModRefInfo(a4, (uint64_t ***)v5, (const llvm::CallBase *)a3);
    v27[0] = (ModRefInfo & 3) != 0;
    BOOL v11 = (ModRefInfo & 4) == 0;
LABEL_28:
    uint64_t v20 = 0x100000001;
    if (v11) {
      uint64_t v20 = 0x100000003;
    }
    *(void *)&v27[4] = v20;
    return *(void *)v27;
  }
  if (v6 != 60 || v8 != 60)
  {
LABEL_17:
    long long v15 = a2[1];
    v25[0] = *a2;
    v25[1] = v15;
    v25[2] = a2[2];
    char v26 = 1;
    v28[0] = 1;
    uint64_t v16 = 1;
    do
    {
      uint64_t v17 = &v28[v16];
      *(_OWORD *)uint64_t v17 = xmmword_1CFAC3060;
      *((_OWORD *)v17 + 1) = xmmword_1CFAC3060;
      v16 += 5;
    }
    while (v17 + 5 != v29);
    v29[0] = &v33;
    v29[1] = 0;
    uint64_t v30 = v32;
    uint64_t v31 = 0x400000000;
    uint64_t v33 = &unk_1F2600DB8;
    uint64_t v34 = 1;
    for (uint64_t i = 63; i != 79; i += 2)
      v28[i] = -4096;
    char v19 = llvm::AAResults::getModRefInfo((uint64_t)a4, (llvm::Instruction *)v5, v25, (uint64_t)v28);
    if ((v34 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v35, 8);
    }
    if (v30 != v32) {
      free(v30);
    }
    if ((v28[0] & 1) == 0) {
      MEMORY[0x1D25D9CD0](v28[1], 8);
    }
    v27[0] = (v19 & 2) != 0;
    BOOL v11 = (v19 & 4) == 0;
    goto LABEL_28;
  }
  int v12 = *(unsigned __int16 *)(a3 + 18);
  unint64_t v13 = *(unsigned __int16 *)(v5 + 18);
  if (v12 & 1) != 0 && (v13) {
    char v14 = 1;
  }
  else {
    char v14 = ((~v12 & 0x380) == 0) | (0xD0uLL >> ((v13 >> 7) & 7));
  }
  v27[0] = v14 & 1;
  *(_DWORD *)&v27[4] = 1;
  v27[8] = 1;
  return *(void *)v27;
}

void *sub_1CC0AF5A8(void *a1)
{
  MEMORY[0x1D25D9CD0](a1[295], 8);
  int v2 = (void *)a1[5];
  if (v2 != a1 + 7) {
    free(v2);
  }
  return a1;
}

void *sub_1CC0AF5F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 16 * v13;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v14 -= 16;
      }
      while (v14);
    }
    if (v3)
    {
      long long v15 = &v4[2 * v3];
      uint64_t v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v18 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v19 = v18 & ((v17 >> 4) ^ (v17 >> 9));
          uint64_t v20 = (void *)(*(void *)a1 + 16 * v19);
          uint64_t v21 = *v20;
          if (v17 != *v20)
          {
            int v22 = 0;
            int v23 = 1;
            while (v21 != -4096)
            {
              if (v22) {
                BOOL v24 = 0;
              }
              else {
                BOOL v24 = v21 == -8192;
              }
              if (v24) {
                int v22 = v20;
              }
              unsigned int v25 = v19 + v23++;
              unsigned int v19 = v25 & v18;
              uint64_t v20 = (void *)(*(void *)a1 + 16 * (v25 & v18));
              uint64_t v21 = *v20;
              if (v17 == *v20) {
                goto LABEL_27;
              }
            }
            if (v22) {
              uint64_t v20 = v22;
            }
          }
LABEL_27:
          *uint64_t v20 = v17;
          uint64_t v26 = v16[1];
          v16[1] = 0;
          v20[1] = v26;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v27 = v16[1];
          v16[1] = 0;
          if (v27)
          {
            long long v28 = v16;
            sub_1CC0AF7AC(v27, v10);
            uint64_t v16 = v28;
          }
        }
        v16 += 2;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 16 * v11;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1CC0AF7AC(uint64_t result, llvm::Value *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    if (v3 != result)
    {
      do
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v3) {
          uint64_t v5 = v3 - 32;
        }
        else {
          uint64_t v5 = 0;
        }
        uint64_t v6 = *(void *)(v5 + 32);
        int v7 = *(void **)(v5 + 40);
        *int v7 = v6;
        *(void *)(v6 + 8) = v7;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        llvm::Value::deleteValue((void (**)(void))v5, a2);
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void *sub_1CC0AF834(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = &v4[2 * v3];
      long long v15 = v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v17 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v18 = v17 & ((v16 >> 4) ^ (v16 >> 9));
          unsigned int v19 = (void *)(*(void *)a1 + 16 * v18);
          uint64_t v20 = *v19;
          if (v16 != *v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v17;
              unsigned int v19 = (void *)(*(void *)a1 + 16 * (v24 & v17));
              uint64_t v20 = *v19;
              if (v16 == *v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              unsigned int v19 = v21;
            }
          }
LABEL_27:
          *unsigned int v19 = v16;
          uint64_t v25 = v15[1];
          v15[1] = 0;
          v19[1] = v25;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v26 = v15[1];
          v15[1] = 0;
          if (v26)
          {
            uint64_t v27 = v15;
            MEMORY[0x1D25D9CE0](v26, 0x20C40A4A59CD2);
            long long v15 = v27;
          }
        }
        v15 += 2;
      }
      while (v15 != v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC0AFA00(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(unsigned int *)(v4 + 40);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v8 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_3;
    }
    int v12 = 1;
    while (v9 != -4096)
    {
      int v13 = v7 + v12++;
      uint64_t v7 = v13 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        unsigned int v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  unsigned int v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_3:
  if (v8 == (uint64_t *)(v5 + 16 * v6)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t *)v8[1];
  }
  uint64_t v11 = *((unsigned int *)v10 + 4);
  if (v11 > *(_DWORD *)a1[1]) {
    return;
  }
  uint64_t v14 = a1[2];
  uint64_t v15 = v14[1];
  uint64_t v16 = *((unsigned int *)v14 + 5);
  if (v15 == *v14)
  {
    if (v16)
    {
      int v17 = 0;
      uint64_t v18 = 8 * v16;
      unsigned int v19 = (uint64_t **)v14[1];
      while (*v19 != v10)
      {
        if (*v19 == (uint64_t *)-2) {
          int v17 = v19;
        }
        ++v19;
        v18 -= 8;
        if (!v18)
        {
          if (!v17) {
            goto LABEL_20;
          }
          *int v17 = v10;
          --*((_DWORD *)v14 + 6);
          goto LABEL_22;
        }
      }
      return;
    }
LABEL_20:
    unsigned int v20 = *((_DWORD *)v14 + 4);
    if (v16 < v20)
    {
      *((_DWORD *)v14 + 5) = v16 + 1;
      *(void *)(v15 + 8 * v16) = v10;
LABEL_22:
      uint64_t v21 = *v10;
      if (!*((unsigned char *)v3 + 16)) {
        goto LABEL_32;
      }
      int v22 = (uint64_t *)v3[3];
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      if (v23 == *v22)
      {
        uint64_t v25 = *((unsigned int *)v22 + 5);
        uint64_t v26 = (void *)(v23 + 8 * v25);
        if (v25)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 8 * v25;
          while (*(void *)(v23 + v27) != v21)
          {
            v27 += 8;
            if (v28 == v27) {
              goto LABEL_28;
            }
          }
          uint64_t v26 = (void *)(v23 + v27);
        }
LABEL_28:
        uint64_t v24 = v22[1];
      }
      else
      {
        uint64_t v61 = *((unsigned int *)v22 + 4);
        int v62 = v61 - 1;
        unsigned int v63 = (v61 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        uint64_t v26 = (void *)(v23 + 8 * v63);
        uint64_t v64 = *v26;
        if (*v26 == -1)
        {
          int v65 = 0;
LABEL_96:
          if (v65) {
            uint64_t v26 = v65;
          }
          if (*v26 != v21) {
            uint64_t v26 = (void *)(v23 + 8 * v61);
          }
        }
        else
        {
          int v65 = 0;
          int v66 = 1;
          while (v64 != v21)
          {
            if (v65) {
              BOOL v67 = 0;
            }
            else {
              BOOL v67 = v64 == -2;
            }
            if (v67) {
              int v65 = v26;
            }
            unsigned int v68 = v63 + v66++;
            unsigned int v63 = v68 & v62;
            uint64_t v26 = (void *)(v23 + 8 * (v68 & v62));
            uint64_t v64 = *v26;
            if (*v26 == -1) {
              goto LABEL_96;
            }
          }
        }
      }
      BOOL v51 = v23 == v24;
      uint64_t v29 = 16;
      if (v51) {
        uint64_t v29 = 20;
      }
      if (v26 != (void *)(v23 + 8 * *(unsigned int *)((char *)v22 + v29)))
      {
LABEL_32:
        uint64_t v30 = a1[3];
        uint64_t v31 = *((unsigned int *)v30 + 2);
        if (v31 >= *((_DWORD *)v30 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*v30 + 8 * v31) = v21;
        *((_DWORD *)v30 + 2) = v31 + 1;
        uint64_t v32 = (uint64_t *)v3[4];
        uint64_t v34 = *v32;
        uint64_t v33 = v32[1];
        if (v33 == *v32)
        {
          uint64_t v35 = *((unsigned int *)v32 + 5);
          uint64_t v36 = (void *)(v33 + 8 * v35);
          if (v35)
          {
            uint64_t v37 = 0;
            uint64_t v38 = 8 * v35;
            while (*(void *)(v33 + v37) != v21)
            {
              v37 += 8;
              if (v38 == v37) {
                goto LABEL_38;
              }
            }
            uint64_t v36 = (void *)(v33 + v37);
          }
LABEL_38:
          uint64_t v34 = v32[1];
        }
        else
        {
          uint64_t v53 = *((unsigned int *)v32 + 4);
          int v54 = v53 - 1;
          unsigned int v55 = (v53 - 1) & ((v21 >> 4) ^ (v21 >> 9));
          uint64_t v36 = (void *)(v33 + 8 * v55);
          uint64_t v56 = *v36;
          if (*v36 == -1)
          {
            unsigned int v57 = 0;
LABEL_91:
            if (v57) {
              uint64_t v36 = v57;
            }
            if (*v36 != v21) {
              uint64_t v36 = (void *)(v33 + 8 * v53);
            }
          }
          else
          {
            unsigned int v57 = 0;
            int v58 = 1;
            while (v56 != v21)
            {
              if (v57) {
                BOOL v59 = 0;
              }
              else {
                BOOL v59 = v56 == -2;
              }
              if (v59) {
                unsigned int v57 = v36;
              }
              unsigned int v60 = v55 + v58++;
              unsigned int v55 = v60 & v54;
              uint64_t v36 = (void *)(v33 + 8 * (v60 & v54));
              uint64_t v56 = *v36;
              if (*v36 == -1) {
                goto LABEL_91;
              }
            }
          }
        }
        BOOL v51 = v33 == v34;
        uint64_t v39 = 16;
        if (v51) {
          uint64_t v39 = 20;
        }
        if (v36 == (void *)(v33 + 8 * *(unsigned int *)((char *)v32 + v39)))
        {
          unsigned int v40 = a1[4];
          unint64_t v41 = v11 | ((unint64_t)*((unsigned int *)v10 + 18) << 32);
          unsigned int v42 = *((_DWORD *)v40 + 2);
          if (v42 >= *((_DWORD *)v40 + 3)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v43 = (uint64_t **)(*v40 + 16 * v42);
          *uint64_t v43 = v10;
          v43[1] = (uint64_t *)v41;
          uint64_t v44 = (*((_DWORD *)v40 + 2) + 1);
          *((_DWORD *)v40 + 2) = v44;
          sub_1CC0AFEBC(*v40, *v40 + 16 * v44, (uint64_t)&v70, v44);
        }
      }
      return;
    }
  }
  else
  {
    unsigned int v20 = *((_DWORD *)v14 + 4);
  }
  if (3 * v20 <= 4 * ((int)v16 - *((_DWORD *)v14 + 6)))
  {
    if (v20 >= 0x40) {
      v20 *= 2;
    }
    else {
      unsigned int v20 = 128;
    }
  }
  else if (v20 - v16 >= v20 >> 3)
  {
    goto LABEL_47;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a1[2], v20);
  unsigned int v20 = *((_DWORD *)v14 + 4);
  uint64_t v15 = v14[1];
LABEL_47:
  unsigned int v45 = v20 - 1;
  unsigned int v46 = (v20 - 1) & ((v10 >> 4) ^ (v10 >> 9));
  uint64_t v47 = (uint64_t **)(v15 + 8 * v46);
  unint64_t v48 = *v47;
  if (*v47 != (uint64_t *)-1)
  {
    uint64_t v49 = 0;
    int v50 = 1;
    while (v48 != v10)
    {
      if (v49) {
        BOOL v51 = 0;
      }
      else {
        BOOL v51 = v48 == (uint64_t *)-2;
      }
      if (v51) {
        uint64_t v49 = v47;
      }
      unsigned int v52 = v46 + v50++;
      unsigned int v46 = v52 & v45;
      uint64_t v47 = (uint64_t **)(v15 + 8 * (v52 & v45));
      unint64_t v48 = *v47;
      if (*v47 == (uint64_t *)-1) {
        goto LABEL_81;
      }
    }
    return;
  }
  uint64_t v49 = 0;
LABEL_81:
  if (v49) {
    uint64_t v69 = v49;
  }
  else {
    uint64_t v69 = v47;
  }
  if (*v69 != v10)
  {
    if (*v69 == (uint64_t *)-2) {
      --*((_DWORD *)v14 + 6);
    }
    else {
      ++*((_DWORD *)v14 + 5);
    }
    *uint64_t v69 = v10;
    goto LABEL_22;
  }
}

uint64_t sub_1CC0AFEBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 16 * (v4 >> 1);
    unsigned int v7 = *(_DWORD *)(v6 + 8);
    unsigned int v8 = *(_DWORD *)(a2 - 8);
    if (v7 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unsigned int v9 = *(_DWORD *)(a2 - 4);
      if (*(_DWORD *)(result + 16 * v5 + 12) >= v9) {
        return result;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a2 - 4);
    }
    uint64_t v10 = *(void *)(a2 - 16);
    *(void *)(a2 - 16) = *(void *)v6;
    *(_DWORD *)(a2 - 8) = v7;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(result + 16 * v5 + 12);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v11 = result + 16 * v5;
        unsigned int v13 = *(_DWORD *)(v11 + 8);
        if (v13 >= v8 && (v8 < v13 || *(_DWORD *)(result + 16 * v5 + 12) >= v9)) {
          break;
        }
        *(void *)uint64_t v6 = *(void *)v11;
        *(_DWORD *)(v6 + 8) = v13;
        *(_DWORD *)(v6 + 12) = *(_DWORD *)(v11 + 12);
        uint64_t v6 = result + 16 * v5;
        if (v12 <= 1) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v11 = v6;
LABEL_12:
    *(void *)uint64_t v11 = v10;
    *(_DWORD *)(v11 + 8) = v8;
    *(_DWORD *)(v11 + 12) = v9;
  }
  return result;
}

uint64_t sub_1CC0AFF88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 >= a3) {
      goto LABEL_10;
    }
    unsigned int v10 = *(_DWORD *)(result + 8);
    unsigned int v11 = *(_DWORD *)(result + 24);
    if (v10 < v11)
    {
      result += 16;
LABEL_7:
      uint64_t v3 = v9;
      goto LABEL_10;
    }
    if (v11 >= v10)
    {
      BOOL v12 = *(_DWORD *)(v6 + 16 * v7 + 12) < *(_DWORD *)(result + 28);
      result += 16 * v12;
      if (v12) {
        goto LABEL_7;
      }
    }
LABEL_10:
    *(void *)uint64_t v6 = *(void *)result;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(result + 12);
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1CC0B002C@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a2;
  uint64_t v9 = result;
  uint64_t v11 = a2[5];
  if ((void *)v11 == a2 + 5)
  {
LABEL_71:
    unsigned int v33 = 0;
    a2 = (void *)(a3 + 16);
    *(void *)a3 = a3 + 16;
    uint64_t v7 = (_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 12) = 8;
  }
  else
  {
    uint64_t v12 = v11 - 24;
    if (v11) {
      uint64_t v13 = v11 - 24;
    }
    else {
      uint64_t v13 = 0;
    }
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 16);
    if (v14 == 30)
    {
      if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 3) {
        unsigned int v33 = 2;
      }
      else {
        unsigned int v33 = 1;
      }
LABEL_10:
      a2 = (void *)(a3 + 16);
      *(void *)a3 = a3 + 16;
      *(void *)(a3 + 8) = 0x800000000;
      uint64_t v7 = (_DWORD *)(a3 + 8);
    }
    else
    {
      unsigned int v33 = 0;
      switch(*(unsigned char *)(v13 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_10;
        case 0x1E:
LABEL_78:
          __break(1u);
          goto LABEL_79;
        case 0x1F:
          unsigned int v33 = (*(_DWORD *)(v13 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          unsigned int v33 = (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          unsigned int v33 = 2;
          goto LABEL_10;
        case 0x24:
          unsigned int v33 = *(_WORD *)(v13 + 18) & 1;
          goto LABEL_10;
        case 0x25:
          unsigned int v33 = 1;
          goto LABEL_10;
        case 0x27:
          unsigned int v33 = *(_DWORD *)(v13 + 80) + 1;
          break;
        default:
          goto LABEL_71;
      }
      a2 = (void *)(a3 + 16);
      *(void *)a3 = a3 + 16;
      *(void *)(a3 + 8) = 0x800000000;
      uint64_t v7 = (_DWORD *)(a3 + 8);
      if (v33 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
    }
    LODWORD(v14) = 0;
    if (v33)
    {
      unint64_t v3 = (unint64_t)a2;
      uint64_t v4 = *(unsigned __int8 *)(v11 - 8);
      uint64_t v5 = v11 - 56;
      uint64_t v6 = v11 - 32 * (v33 - 1) - 56;
      unsigned int v15 = 2 * v33 - 1;
      unsigned int v16 = v33;
      do
      {
        uint64_t result = v6;
        if (v4 != 30)
        {
          uint64_t result = v11 - 56;
          switch((int)v4)
          {
            case ' ':
            case '&':
              int v51 = *(_DWORD *)(v11 - 4);
              if ((v51 & 0x40000000) != 0) {
                uint64_t v35 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v35 = v12 - 32 * (v51 & 0x7FFFFFF);
              }
              uint64_t v36 = v16;
              goto LABEL_54;
            case '!':
              uint64_t v52 = -64;
              if (v16 == 1) {
                uint64_t v52 = -96;
              }
              uint64_t result = v12 + v52;
              break;
            case '""':
            case '#':
              goto LABEL_78;
            case '$':
              if ((*(_WORD *)(v11 - 6) & 1) == 0)
              {
                uint64_t v17 = 0;
                goto LABEL_16;
              }
              uint64_t result = v11 - 32 * (*(_DWORD *)(v11 - 4) & 0x7FFFFFF) + 8;
              break;
            case '%':
              break;
            case '\'':
              if (v16 == 1)
              {
                uint64_t result = v11 - 32 * *(unsigned int *)(v11 + 56) - 88;
              }
              else
              {
                uint64_t v36 = v16 - 2;
                uint64_t v35 = v5 - 32 * *(unsigned int *)(v11 + 56);
LABEL_54:
                uint64_t result = v35 + 32 * v36;
              }
              break;
            default:
              int v34 = *(_DWORD *)(v11 - 4);
              if ((v34 & 0x40000000) != 0) {
                uint64_t v35 = *(void *)(v11 - 32);
              }
              else {
                uint64_t v35 = v12 - 32 * (v34 & 0x7FFFFFF);
              }
              uint64_t v36 = v15;
              goto LABEL_54;
          }
        }
        uint64_t v17 = *(void *)result;
LABEL_16:
        *(void *)unint64_t v3 = v17;
        v3 += 8;
        v6 += 32;
        v15 -= 2;
        --v16;
      }
      while (v16);
      a2 = *(void **)a3;
    }
    else
    {
      unsigned int v33 = 0;
    }
  }
  uint64_t v18 = a2;
  if (v33)
  {
    uint64_t v19 = 8 * v33;
    uint64_t v18 = a2;
    while (*v18)
    {
      ++v18;
      v19 -= 8;
      if (!v19)
      {
        uint64_t v18 = &a2[v33];
        break;
      }
    }
  }
  uint64_t v20 = v18 - a2;
  if (v20 != v33)
  {
    uint64_t v49 = v18 + 1;
    if (v18 + 1 != &a2[v33])
    {
      uint64_t v50 = 8 * v33 - 8 * v20 - 8;
      do
      {
        if (*v49) {
          *v18++ = *v49;
        }
        ++v49;
        v50 -= 8;
      }
      while (v50);
      a2 = *(void **)a3;
    }
  }
  unint64_t v3 = (char *)v18 - (char *)a2;
  unint64_t v14 = (unint64_t)((char *)v18 - (char *)a2) >> 3;
  *uint64_t v7 = v14;
  uint64_t v4 = v9 + 8;
  LODWORD(v5) = *(_DWORD *)v9;
  if (*(_DWORD *)v9)
  {
    int v21 = 4;
    uint64_t v6 = v9 + 8;
  }
  else
  {
    uint64_t v6 = *(void *)(v9 + 8);
    int v21 = *(_DWORD *)(v9 + 16);
    if (!v21)
    {
LABEL_79:
      unsigned int v27 = 0;
      goto LABEL_33;
    }
  }
  int v22 = v21 - 1;
  unsigned int v23 = (v21 - 1) & ((v8 >> 4) ^ (v8 >> 9));
  uint64_t v24 = v6 + 72 * v23;
  uint64_t v25 = *(void *)v24;
  if (*(void **)v24 == v8) {
    goto LABEL_34;
  }
  uint64_t result = 1;
  while (v25 != -4096)
  {
    int v26 = v23 + result;
    uint64_t result = (result + 1);
    unsigned int v23 = v26 & v22;
    uint64_t v24 = v6 + 72 * (v26 & v22);
    uint64_t v25 = *(void *)v24;
    if (*(void **)v24 == v8) {
      goto LABEL_34;
    }
  }
  if (v5)
  {
    unsigned int v27 = 4;
    uint64_t v6 = v9 + 8;
  }
  else
  {
    uint64_t v6 = *(void *)(v9 + 8);
    unsigned int v27 = *(_DWORD *)(v9 + 16);
  }
LABEL_33:
  uint64_t v24 = v6 + 72 * v27;
LABEL_34:
  if (v5)
  {
    unsigned int v28 = 4;
  }
  else
  {
    uint64_t v4 = *(void *)(v9 + 8);
    unsigned int v28 = *(_DWORD *)(v9 + 16);
  }
  if (v4 + 72 * v28 != v24)
  {
    uint64_t v29 = *(unsigned int *)(v24 + 16);
    if (v29)
    {
      uint64_t v37 = (v3 >> 3);
      uint64_t v38 = *(uint64_t **)(v24 + 8);
      uint64_t v39 = &v38[v29];
      do
      {
        uint64_t v40 = *v38;
        uint64_t v41 = 8 * v37;
        unsigned int v42 = a2;
        uint64_t v43 = &a2[v37];
        if (v37)
        {
          uint64_t v44 = 8 * v37;
          unsigned int v42 = a2;
          while (*v42 != v40)
          {
            ++v42;
            v44 -= 8;
            if (!v44)
            {
              unsigned int v42 = &a2[v37];
              break;
            }
          }
        }
        uint64_t v45 = v42 - a2;
        if (v45 != v37)
        {
          unsigned int v46 = v42 + 1;
          if (v42 + 1 != v43)
          {
            uint64_t v48 = v41 - 8 * v45 - 8;
            do
            {
              if (*v46 != v40) {
                *v42++ = *v46;
              }
              ++v46;
              v48 -= 8;
            }
            while (v48);
            a2 = *(void **)a3;
          }
        }
        unint64_t v47 = (char *)v42 - (char *)a2;
        uint64_t v37 = (v47 >> 3);
        ++v38;
      }
      while (v38 != v39);
      unint64_t v14 = v47 >> 3;
      *uint64_t v7 = v37;
    }
    uint64_t v30 = (uint64_t)&a2[v14];
    uint64_t v31 = *(uint64_t **)(v24 + 40);
    uint64_t v32 = &v31[*(unsigned int *)(v24 + 48)];
    return (uint64_t)sub_1CC0A3870(a3, v30, v31, v32);
  }
  return result;
}

uint64_t sub_1CC0B0554(uint64_t a1, uint64_t a2)
{
  int v3 = dword_1EBCC6A58;
  return sub_1CC0B0618(*(void *)(a1 + 16), a2, &v3, 0);
}

uint64_t sub_1CC0B058C(uint64_t a1, uint64_t a2, long long *a3)
{
  int v4 = dword_1EBCC6A58;
  return sub_1CC0B15B8(*(void *)(a1 + 16), a2, a3, &v4);
}

void sub_1CC0B05C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(unsigned __int8 *)(a2 + 16);
    if ((v2 - 27) >= 0xFFFFFFFE)
    {
      if (v2 == 26)
      {
        *(_DWORD *)(a2 + 92) = -1;
        if (*(void *)(a2 - 32))
        {
          **(void **)(a2 - 16) = *(void *)(a2 - 24);
          uint64_t v3 = *(void *)(a2 - 24);
          if (v3) {
            *(void *)(v3 + 16) = *(void *)(a2 - 16);
          }
        }
        *(void *)(a2 - 32) = 0;
      }
      else
      {
        *(_DWORD *)(a2 + 88) = -1;
      }
    }
  }
}

uint64_t sub_1CC0B0618(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v4 = a2;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE) {
    return v4;
  }
  uint64_t v8 = sub_1CC0ACFD4(*(uint64_t ****)(a2 + 72), *(llvm::DominatorTree **)(*(void *)(a1 + 2392) + 8));
  if (!v8)
  {
    int v17 = *(unsigned __int8 *)(v4 + 16);
    if (v17 == 26)
    {
      uint64_t v20 = *(void *)(v4 - 32);
      if (!v20) {
        goto LABEL_37;
      }
      int v21 = (int *)(v4 + 92);
    }
    else
    {
      if (v17 == 25) {
        uint64_t v18 = v4;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v18) {
        uint64_t v19 = (uint64_t *)(v18 - 32);
      }
      else {
        uint64_t v19 = (uint64_t *)(v4 - 64);
      }
      uint64_t v20 = *v19;
      if (!v20) {
        goto LABEL_37;
      }
      int v21 = (int *)(v4 + 88);
    }
    int v22 = *v21;
    uint64_t v23 = 72;
    if (*(unsigned char *)(v20 + 16) == 26) {
      uint64_t v23 = 88;
    }
    if (v22 == *(_DWORD *)(v20 + v23))
    {
      if (a4)
      {
        if (v17 == 26)
        {
          char v24 = 1;
          goto LABEL_38;
        }
      }
      else if (v17 == 26)
      {
        return *(void *)(v4 - 32);
      }
      if (v17 == 25) {
        uint64_t v25 = v4;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v25) {
        uint64_t v26 = v25 - 32;
      }
      else {
        uint64_t v26 = v4 - 64;
      }
      return *(void *)v26;
    }
LABEL_37:
    char v24 = 0;
LABEL_38:
    unsigned int v27 = *(uint64_t ****)(v4 + 72);
    int v28 = *((unsigned __int8 *)v27 + 16);
    if ((v28 - 37) <= 0x2B && ((1 << (v28 - 37)) & 0x80004000001) != 0) {
      return v4;
    }
    v58[0] = ((v28 - 33) < 0x34) & (0x8000000000041uLL >> (v28 - 33));
    *(void *)&long long v59 = 0;
    *((void *)&v59 + 1) = -1;
    long long v60 = 0u;
    long long v61 = 0u;
    int v62 = v27;
    uint64_t v63 = v4;
    int v64 = 1;
    char v65 = 1;
    char v66 = 0;
    if ((((v28 - 33) < 0x34) & (0x8000000000041uLL >> (v28 - 33))) == 0)
    {
      llvm::MemoryLocation::getOrNone(v27, (uint64_t)&v67);
      long long v59 = v67;
      long long v60 = v68[0];
      long long v61 = v68[1];
      int v28 = *((unsigned __int8 *)v27 + 16);
    }
    if (v28 != 60) {
      goto LABEL_66;
    }
    uint64_t v30 = *(void *)(a1 + 8);
    if ((*((_DWORD *)v27 + 5) & 0x20000000) == 0)
    {
LABEL_61:
      uint64_t v45 = (uint64_t)*(v27 - 4);
      uint64_t v46 = sub_1CB83544C(v27[5][7][5] + 272, (uint64_t)*v27);
      if (v47 == 1) {
        unint64_t v48 = -2;
      }
      else {
        unint64_t v48 = (unint64_t)(v46 + 7) >> 3;
      }
      llvm::Instruction::getAAMetadata(v27, v68);
      *(void *)&long long v67 = v45;
      *((void *)&v67 + 1) = v48;
      if (llvm::AAResults::pointsToConstantMemory(v30, (uint64_t)&v67, 0))
      {
LABEL_65:
        uint64_t v49 = *(void *)(*(void *)(a1 + 2392) + 96);
        int v50 = *(unsigned __int8 *)(v4 + 16);
LABEL_78:
        if (v50 == 26) {
          sub_1CC0ABD0C(v4, v49);
        }
        else {
          sub_1CC0ABD80(v4, v49);
        }
        *(void *)(v4 + 80) = 0;
        return v49;
      }
LABEL_66:
      int v50 = *(unsigned __int8 *)(v4 + 16);
      if (v24)
      {
        if (v50 == 26)
        {
          uint64_t v49 = *(void *)(v4 - 32);
        }
        else
        {
          if (v50 == 25) {
            uint64_t v53 = v4;
          }
          else {
            uint64_t v53 = 0;
          }
          if (v53) {
            int v54 = (uint64_t *)(v53 - 32);
          }
          else {
            int v54 = (uint64_t *)(v4 - 64);
          }
          uint64_t v49 = *v54;
        }
      }
      else
      {
        if (v50 == 25) {
          uint64_t v51 = v4;
        }
        else {
          uint64_t v51 = 0;
        }
        if (v51) {
          uint64_t v52 = (uint64_t *)(v51 - 32);
        }
        else {
          uint64_t v52 = (uint64_t *)(v4 - 64);
        }
        uint64_t v49 = *v52;
        if (*(void *)(*(void *)(a1 + 2392) + 96) == *v52) {
          goto LABEL_78;
        }
        uint64_t v49 = sub_1CC0B0B10(a1, v49, (uint64_t)v58, a3);
        if (*(unsigned char *)(v4 + 16) == 26) {
          sub_1CC0ABD0C(v4, v49);
        }
        else {
          sub_1CC0ABD80(v4, v49);
        }
        if (*(void *)(*(void *)(a1 + 2392) + 96) == v49)
        {
          *(void *)(v4 + 80) = 0;
        }
        else if (v65 && v64 == 3)
        {
          *(void *)(v4 + 80) = 0x100000003;
        }
      }
      if (a4 && *(unsigned char *)(v49 + 16) == 27 && *(unsigned char *)(v4 + 16) == 26 && *a3)
      {
        char v66 = 1;
        return sub_1CC0B0B10(a1, v49, (uint64_t)v58, a3);
      }
      return v49;
    }
    uint64_t v31 = ***v27;
    *(void *)&long long v67 = v27;
    int v32 = *(_DWORD *)(v31 + 2496);
    if (v32)
    {
      uint64_t v33 = *(void *)(v31 + 2480);
      int v34 = v32 - 1;
      unsigned int v35 = v34 & ((v27 >> 4) ^ (v27 >> 9));
      uint64_t v36 = (uint64_t ****)(v33 + 40 * v35);
      uint64_t v37 = *v36;
      if (*v36 == v27)
      {
LABEL_57:
        uint64_t v42 = *((unsigned int *)v36 + 4);
        if (v42)
        {
          uint64_t v43 = v36[1] + 1;
          uint64_t v44 = 16 * v42;
          while (*((_DWORD *)v43 - 2) != 6)
          {
            v43 += 2;
            v44 -= 16;
            if (!v44) {
              goto LABEL_61;
            }
          }
          if (*v43) {
            goto LABEL_65;
          }
        }
        goto LABEL_61;
      }
      uint64_t v38 = 0;
      int v39 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        if (v38) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = v37 == (uint64_t ***)-8192;
        }
        if (v40) {
          uint64_t v38 = v36;
        }
        unsigned int v41 = v35 + v39++;
        unsigned int v35 = v41 & v34;
        uint64_t v36 = (uint64_t ****)(v33 + 40 * v35);
        uint64_t v37 = *v36;
        if (*v36 == v27) {
          goto LABEL_57;
        }
      }
      if (v38) {
        uint64_t v56 = v38;
      }
      else {
        uint64_t v56 = v36;
      }
    }
    else
    {
      uint64_t v56 = 0;
    }
    uint64_t v36 = (uint64_t ****)sub_1CC609054(v31 + 2480, (uint64_t)&v67, (uint64_t *)&v67, v56);
    unsigned int v57 = (uint64_t ***)v67;
    v36[3] = 0;
    v36[4] = 0;
    *uint64_t v36 = v57;
    v36[1] = (uint64_t ***)(v36 + 3);
    v36[2] = (uint64_t ***)0x100000000;
    goto LABEL_57;
  }
  uint64_t v9 = *(void *)(a1 + 2392);
  int v10 = *(_DWORD *)(v9 + 40);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 24);
    unsigned int v12 = v10 - 1;
    uint64_t v13 = (v10 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    unint64_t v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
    if (v8 == v14)
    {
LABEL_9:
      uint64_t v4 = *(void *)(v11 + 16 * v13 + 8);
      goto LABEL_11;
    }
    int v15 = 1;
    while (v14 != (const llvm::Instruction *)-4096)
    {
      int v16 = v13 + v15++;
      uint64_t v13 = v16 & v12;
      unint64_t v14 = *(const llvm::Instruction **)(v11 + 16 * v13);
      if (v8 == v14) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_11:
  if (*(unsigned char *)(v4 + 16) == 25) {
    return *(void *)(v4 - 32);
  }
  return v4;
}

uint64_t sub_1CC0B0B10(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5 = (uint64_t *)a2;
  v115[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  if (!*a4) {
    *a4 = 1;
  }
  if (a2 && *(unsigned char *)(a2 + 16) == 25) {
    uint64_t v5 = *(uint64_t **)(a2 - 32);
  }
  long long v7 = *(_OWORD *)(a3 + 24);
  v91[0] = *(_OWORD *)(a3 + 8);
  v91[1] = v7;
  v91[2] = *(_OWORD *)(a3 + 40);
  uint64_t v92 = v5;
  uint64_t v93 = v5;
  uint64_t v94 = 0;
  sub_1CC0B1458((uint64_t)&v88, a1, (uint64_t)v91, 0, 0);
  if (v89)
  {
    uint64_t v8 = v88;
    *(void *)(a3 + 72) = v90;
    return v8;
  }
  uint64_t v9 = (long long *)(a3 + 8);
  int v10 = v93;
  unsigned int v11 = *(_DWORD *)(a1 + 48);
  if (v11 >= *(_DWORD *)(a1 + 52))
  {
    long long v84 = *(_OWORD *)(a3 + 24);
    long long v97 = *v9;
    long long v98 = v84;
    long long v99 = *(_OWORD *)(a3 + 40);
    unsigned int v100 = v5;
    unsigned int v101 = v93;
    uint64_t v102 = 0;
    sub_1CC0AE37C((uint64_t *)(a1 + 40), (unint64_t)&v97);
    unsigned int v15 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40) + 72 * v11;
    long long v13 = *v9;
    long long v14 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)uint64_t v12 = v13;
    *(void *)(v12 + 48) = v5;
    *(void *)(v12 + 56) = v10;
    *(void *)(v12 + 64) = 0;
    unsigned int v15 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v15;
  }
  unint64_t v85 = v15;
  BOOL v113 = (unsigned int *)v115;
  uint64_t v114 = 0x1000000000;
  uint64_t v110 = (unsigned int *)v112;
  uint64_t v111 = 0x800000000;
  unsigned int v107 = v109;
  uint64_t v108 = 0x400000000;
  sub_1CC0AE11C(a1, (uint64_t)v10, (uint64_t)&v113, 0);
  while (2)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(v16 + 24);
    uint64_t v18 = *(unsigned int *)(v16 + 40);
    if (!v18)
    {
LABEL_17:
      int v21 = (uint64_t *)(v17 + 16 * v18);
      goto LABEL_18;
    }
    uint64_t v19 = v10[8];
    LODWORD(v20) = (v18 - 1) & ((v19 >> 4) ^ (v19 >> 9));
    int v21 = (uint64_t *)(v17 + 16 * v20);
    uint64_t v22 = *v21;
    if (v19 != *v21)
    {
      int v23 = 1;
      while (v22 != -4096)
      {
        int v24 = v20 + v23++;
        uint64_t v20 = v24 & (v18 - 1);
        uint64_t v22 = *(void *)(v17 + 16 * v20);
        if (v19 == v22)
        {
          int v21 = (uint64_t *)(v17 + 16 * v20);
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v25 = *(void *)a1;
    uint64_t v26 = *(unsigned __int8 **)(*(void *)a1 + 96);
    unsigned int v27 = *(void **)(v21[1] + 8);
    if (!v27) {
      goto LABEL_29;
    }
    uint64_t v28 = *(void *)(v25 + 72);
    uint64_t v29 = *(unsigned int *)(v25 + 88);
    unsigned int v30 = v29 - 1;
    while (1)
    {
      if (v29)
      {
        LODWORD(v31) = ((*v27 >> 4) ^ (*v27 >> 9)) & v30;
        int v32 = (uint64_t *)(v28 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v27 != *v32)
        {
          int v34 = 1;
          while (v33 != -4096)
          {
            int v35 = v31 + v34++;
            uint64_t v31 = v35 & v30;
            uint64_t v33 = *(void *)(v28 + 16 * v31);
            if (*v27 == v33)
            {
              int v32 = (uint64_t *)(v28 + 16 * v31);
              goto LABEL_26;
            }
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v32 != (uint64_t *)(v28 + 16 * v29))
        {
          uint64_t v36 = (void *)v32[1];
          if (v36) {
            break;
          }
        }
      }
LABEL_28:
      unsigned int v27 = (void *)v27[1];
      if (!v27) {
        goto LABEL_29;
      }
    }
    if (*v36) {
      uint64_t v26 = (unsigned __int8 *)(*v36 - 48);
    }
    else {
      uint64_t v26 = 0;
    }
LABEL_29:
    int v37 = 0;
    while (2)
    {
      if (v114)
      {
        uint64_t v38 = v113[v114 - 1];
        LODWORD(v114) = v114 - 1;
        uint64_t v39 = *(void *)(a1 + 40) + 72 * v38;
        BOOL v40 = *(void **)(v39 + 56);
        uint64_t v103 = v40;
        long long v104 = *(_OWORD *)v39;
        long long v105 = *(_OWORD *)(v39 + 16);
        long long v106 = *(_OWORD *)(v39 + 32);
        uint64_t v95 = 0;
        if (sub_1CC0AE720(*(void *)(a1 + 2360), *(_DWORD *)(a1 + 2376), (uint64_t *)&v103, &v95))
        {
          if (*(unsigned char *)(a1 + 2384)) {
            goto LABEL_105;
          }
        }
        else
        {
          unsigned int v41 = sub_1CC0AE8F0(a1 + 2360, (uint64_t *)&v103, v95);
          *unsigned int v41 = (uint64_t)v40;
          *(_OWORD *)(v41 + 1) = v104;
          *(_OWORD *)(v41 + 3) = v105;
          *(_OWORD *)(v41 + 5) = v106;
          uint64_t v42 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v42 + 80)
            && *(void *)v39 == *(void *)(v42 + 8)
            && *(void *)(v39 + 8) == *(void *)(v42 + 16)
            && *(void *)(v39 + 16) == *(void *)(v42 + 24)
            && *(void *)(v39 + 24) == *(void *)(v42 + 32)
            && *(void *)(v39 + 32) == *(void *)(v42 + 40)
            && *(void *)(v39 + 40) == *(void *)(v42 + 48))
          {
            uint64_t v43 = *(void **)(v42 + 64);
          }
          else
          {
            uint64_t v43 = 0;
          }
          sub_1CC0B1458((uint64_t)&v103, a1, v39, (uint64_t)v26, (uint64_t)v43);
          uint64_t v44 = v103;
          if ((_BYTE)v104)
          {
            if (llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, (uint64_t)v103, (uint64_t)v26))
            {
              if (v108 >= (unint64_t)HIDWORD(v108)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v45 = (char *)v107 + 16 * v108;
              *uint64_t v45 = v44;
              v45[1] = v38;
              LODWORD(v108) = v108 + 1;
              goto LABEL_45;
            }
            int v37 = 1;
            int v87 = v38;
            int v46 = 1;
LABEL_46:
            if (v46 == 1)
            {
              LODWORD(v38) = v87;
              if (v37)
              {
LABEL_105:
                LODWORD(v69) = v38;
                uint64_t v70 = *(void *)(a1 + 40);
                while (1)
                {
                  unsigned int v71 = v69;
                  if (v85 > v69) {
                    break;
                  }
                  uint64_t v69 = *(void *)(v70 + 72 * v69 + 64);
                  if ((v69 & 0xFF00000000) == 0)
                  {
                    unsigned int v71 = v69;
                    break;
                  }
                }
                *(void *)&long long v97 = *(void *)(v70 + 72 * v71 + 56);
                *((void *)&v97 + 1) = v69;
                *(void *)&long long v98 = &v99;
                *((void *)&v98 + 1) = 0x400000000;
                goto LABEL_110;
              }
              break;
            }
            continue;
          }
          if (v103 != v26 && v103 != v43)
          {
            sub_1CC0AE11C(a1, (uint64_t)v103, (uint64_t)&v113, v38);
            int v46 = 0;
            goto LABEL_46;
          }
          if (v103 != v43)
          {
            if (v111 >= (unint64_t)HIDWORD(v111)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v110[v111] = v38;
            LODWORD(v111) = v111 + 1;
          }
        }
LABEL_45:
        int v46 = 2;
        goto LABEL_46;
      }
      break;
    }
    if (v111)
    {
      int v86 = v10;
      int v10 = 0;
      uint64_t v103 = (char *)&v104 + 8;
      *(void *)&long long v104 = 0x400000000;
      uint64_t v47 = 4 * v111;
      unint64_t v48 = v110;
      do
      {
        uint64_t v49 = *v48;
        sub_1CC0B1458((uint64_t)&v95, a1, *(void *)(a1 + 40) + 72 * v49, 0, 0);
        if (v96)
        {
          if (v104 >= (unint64_t)DWORD1(v104)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v50 = (char *)v103 + 16 * v104;
          void *v50 = v95;
          v50[1] = v49;
          LODWORD(v104) = v104 + 1;
        }
        else
        {
          int v10 = v95;
        }
        ++v48;
        v47 -= 4;
      }
      while (v47);
      if (v108)
      {
        if (!v10 && v26)
        {
          do
          {
            int v65 = v26[16];
            if ((v65 - 27) < 0xFFFFFFFE) {
              break;
            }
            char v66 = v65 == 25 ? v26 : 0;
            long long v67 = (unsigned __int8 **)(v66 ? v66 - 32 : v26 - 64);
            uint64_t v26 = *v67;
          }
          while (*v67);
        }
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
      }
      int v51 = v104;
      if (v104)
      {
        uint64_t v52 = v103;
        if (v104 == 1)
        {
          unsigned int v53 = 1;
          int v54 = (uint64_t *)v103;
        }
        else
        {
          int v58 = (uint64_t *)((char *)v103 + 16);
          uint64_t v59 = 16 * v104 - 16;
          int v54 = (uint64_t *)v103;
          long long v60 = (uint64_t *)((char *)v103 + 16);
          do
          {
            uint64_t v61 = *v60;
            v60 += 2;
            if (!llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, v61, *v54)) {
              int v54 = v58;
            }
            int v58 = v60;
            v59 -= 16;
          }
          while (v59);
          uint64_t v52 = v103;
          unsigned int v53 = v104;
        }
        int v62 = (uint64_t *)&v52[v53 - 1];
        int v10 = v86;
        if (v62 == v54)
        {
          uint64_t v64 = v53;
        }
        else
        {
          long long v63 = *(_OWORD *)v62;
          *(_OWORD *)int v62 = *(_OWORD *)v54;
          *(_OWORD *)int v54 = v63;
          uint64_t v52 = v103;
          uint64_t v64 = v104;
          unsigned int v53 = v104;
        }
        long long v68 = v52[v64 - 1];
        LODWORD(v104) = v53 - 1;
        long long v97 = v68;
        sub_1CC0AE2B8((uint64_t)&v98, (uint64_t)&v103);
      }
      else
      {
        unint64_t v85 = *(unsigned int *)(a1 + 48);
        LODWORD(v114) = 0;
        if (v111)
        {
          unsigned int v55 = v110;
          uint64_t v56 = 4 * v111;
          do
          {
            unsigned int v57 = *v55++;
            sub_1CC0AE11C(a1, (uint64_t)v10, (uint64_t)&v113, v57);
            v56 -= 4;
          }
          while (v56);
        }
        LODWORD(v111) = 0;
      }
      if (v103 != (char *)&v104 + 8) {
        free(v103);
      }
      if (!v51) {
        continue;
      }
    }
    else
    {
      char v73 = v107;
      unsigned int v74 = v108;
      if (v108 == 1)
      {
        uint64_t v75 = (uint64_t *)v107;
      }
      else
      {
        int v76 = (uint64_t *)((char *)v107 + 16);
        uint64_t v77 = 16 * v108 - 16;
        uint64_t v75 = (uint64_t *)v107;
        long long v78 = (uint64_t *)((char *)v107 + 16);
        do
        {
          uint64_t v79 = *v78;
          v78 += 2;
          if (!llvm::MemorySSA::dominates(*(llvm::MemorySSA **)a1, v79, *v75)) {
            uint64_t v75 = v76;
          }
          int v76 = v78;
          v77 -= 16;
        }
        while (v77);
        char v73 = v107;
        unsigned int v74 = v108;
      }
      uint64_t v80 = (uint64_t *)&v73[v74 - 1];
      if (v80 == v75)
      {
        uint64_t v82 = v74;
      }
      else
      {
        long long v81 = *(_OWORD *)v80;
        *(_OWORD *)uint64_t v80 = *(_OWORD *)v75;
        *(_OWORD *)uint64_t v75 = v81;
        char v73 = v107;
        uint64_t v82 = v108;
        unsigned int v74 = v108;
      }
      long long v83 = v73[v82 - 1];
      LODWORD(v108) = v74 - 1;
      long long v97 = v83;
      sub_1CC0AE2B8((uint64_t)&v98, (uint64_t)&v107);
    }
    break;
  }
LABEL_110:
  if (v107 != v109) {
    free(v107);
  }
  if (v110 != (unsigned int *)v112) {
    free(v110);
  }
  if (v113 != (unsigned int *)v115) {
    free(v113);
  }
  *(_DWORD *)(a1 + 48) = 0;
  sub_1CC0AEBD8((char *)(a1 + 2360));
  *(unsigned char *)(a1 + 2384) = 0;
  uint64_t v8 = v97;
  if ((long long *)v98 != &v99) {
    free((void *)v98);
  }
  return v8;
}

uint64_t sub_1CC0B1458(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  int v10 = *(int **)(a2 + 32);
  int v11 = *v10;
  if (!*v10) {
    *int v10 = 1;
  }
  uint64_t v12 = *(void *)(a3 + 56);
  if (v12)
  {
    while (1)
    {
      *(void *)(a3 + 56) = v12;
      if (v12 == a4 || v12 == a5)
      {
        *(void *)uint64_t v9 = v12;
        goto LABEL_22;
      }
      int v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 26)
      {
        if (*(void *)(*(void *)a2 + 96) == v12)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = 3;
          goto LABEL_24;
        }
        long long v14 = *(_DWORD **)(a2 + 32);
        if ((*v14)-- == 1)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          goto LABEL_23;
        }
        uint64_t result = sub_1CC0AF304(v12, (long long *)a3, *(void *)(*(void *)(a2 + 24) + 56), *(llvm::AAResults **)(a2 + 8));
        if (result)
        {
          *(void *)uint64_t v9 = v12;
          *(unsigned char *)(v9 + 8) = 1;
          *(_DWORD *)(v9 + 12) = HIDWORD(result);
          *(_DWORD *)(v9 + 16) = v16;
          return result;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
      }
      if ((v13 - 27) >= 0xFFFFFFFE)
      {
        uint64_t v17 = v13 == 25 ? v12 : 0;
        uint64_t v18 = (uint64_t *)(v17 ? v17 - 32 : v12 - 64);
        uint64_t v12 = *v18;
        if (*v18) {
          continue;
        }
      }
      break;
    }
  }
  if (!v11) {
    **(_DWORD **)(a2 + 32) = 0;
  }
  *(void *)uint64_t v9 = *(void *)(a3 + 56);
LABEL_22:
  *(unsigned char *)(v9 + 8) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 12) = 1;
LABEL_24:
  *(unsigned char *)(v9 + 16) = 1;
  return result;
}

uint64_t sub_1CC0B15B8(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4)
{
  if (!a2
    || *(unsigned __int8 *)(a2 + 16) - 27 < 0xFFFFFFFE
    || *(void *)(*(void *)(a1 + 2392) + 96) != a2
    && ((unsigned int v4 = *(unsigned __int8 *)(*(void *)(a2 + 72) + 16) - 37,
         BOOL v5 = v4 > 0x2B,
         uint64_t v6 = (1 << v4) & 0x80004000001,
         !v5)
      ? (BOOL v7 = v6 == 0)
      : (BOOL v7 = 1),
        v7))
  {
    int v16 = 1;
    char v17 = 1;
    char v18 = 0;
    long long v8 = a3[1];
    long long v11 = *a3;
    long long v12 = v8;
    long long v13 = a3[2];
    uint64_t v14 = 0;
    uint64_t v15 = a2;
    v10[0] = 0;
    return sub_1CC0B0B10(a1, a2, (uint64_t)v10, a4);
  }
  return a2;
}

uint64_t sub_1CC0B1660(uint64_t a1, uint64_t a2)
{
  int v3 = dword_1EBCC6A58;
  return sub_1CC0B0618(*(void *)(a1 + 16), a2, &v3, 1);
}

void *sub_1CC0B1698(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC02A420(a1, v7);
      char v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC02A420(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    long long v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        long long v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC0B17CC(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(result + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(result + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

void *sub_1CC0B1848(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v13 -= 16;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = 0;
      int v15 = v12 - 1;
      unsigned int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & v15;
          uint64_t v19 = (void *)(*(void *)a1 + 16 * v18);
          uint64_t v20 = *v19;
          if (v17 != *v19)
          {
            int v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                int v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v15;
              uint64_t v19 = (void *)(*(void *)a1 + 16 * (v24 & v15));
              uint64_t v20 = *v19;
              if (v17 == *v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_27:
          uint64_t v25 = v16[1];
          *uint64_t v19 = v17;
          v19[1] = v25;
          *(_DWORD *)(a1 + 8) = ++v14;
        }
        v16 += 2;
      }
      while (v16 != &v4[2 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC0B19CC(uint64_t **a1, llvm::Value *a2)
{
  sub_1CD4AA810(&v83, a2, *a1[1]);
  int v4 = (llvm::raw_ostream *)*a1;
  uint64_t v5 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 101;
    *(_DWORD *)uint64_t v5 = 1685016073;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, (unint64_t)a2, 3, 0, 0);
  unint64_t v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 7uLL)
  {
    *unint64_t v6 = 0x3D65706168735B20;
    *((void *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  int v7 = (llvm::raw_ostream *)*a1;
  uint64_t v8 = (*a1)[4];
  unint64_t v9 = (*a1)[3] - v8;
  if (*((unsigned char *)a1 + 16))
  {
    if (v9 <= 4)
    {
      uint64_t v10 = "none,";
      size_t v11 = 5;
      goto LABEL_10;
    }
    *(unsigned char *)(v8 + 4) = 44;
    *(_DWORD *)uint64_t v8 = 1701736302;
    uint64_t v26 = *((void *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      uint64_t v10 = "record,";
      size_t v11 = 7;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)uint64_t v8 = 1868785010;
    uint64_t v26 = *((void *)v7 + 4) + 7;
  }
  *((void *)v7 + 4) = v26;
LABEL_11:
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v83.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v83.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v83;
    }
    else {
      uint64_t v13 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    int v14 = llvm::raw_ostream::write((llvm::raw_ostream *)*a1, (const char *)v13, size);
    int v15 = (unsigned char *)*((void *)v14 + 4);
    if (*((unsigned char **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *int v15 = 44;
      ++*((void *)v14 + 4);
    }
  }
  unsigned int v16 = (llvm::raw_ostream *)*a1;
  uint64_t v17 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)uint64_t v17 = 1700946284;
    *((void *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (!*((unsigned char *)a1 + 16))
  {
    unsigned int v18 = (llvm::raw_ostream *)*a1;
    uint64_t v19 = (_WORD *)(*a1)[4];
    if ((unint64_t)((*a1)[3] - (void)v19) > 1)
    {
      *uint64_t v19 = 31522;
      *((void *)v18 + 4) += 2;
      goto LABEL_61;
    }
    uint64_t v20 = "\"{";
    goto LABEL_60;
  }
  int v21 = (void *)*((void *)a2 + 5);
  if (v21 == (void *)((char *)a2 + 40))
  {
LABEL_48:
    unsigned int v28 = 0;
    BOOL v29 = 0;
  }
  else
  {
    if (v21) {
      int v22 = v21 - 3;
    }
    else {
      int v22 = 0;
    }
    int v23 = *((unsigned __int8 *)v22 + 16);
    int v24 = v23 - 29;
    if (v23 != 30)
    {
      uint64_t v27 = 2;
      unsigned int v28 = 0;
      BOOL v29 = 0;
      switch(v24)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_49;
        case 1:
LABEL_154:
          __break(1u);
LABEL_155:
          int v57 = (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) - 1;
LABEL_132:
          if (v57) {
            goto LABEL_114;
          }
LABEL_133:
          int v62 = 0;
          goto LABEL_134;
        case 2:
          LODWORD(v27) = (*((_DWORD *)v22 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_47;
        case 3:
        case 9:
          LODWORD(v27) = (*((_DWORD *)v22 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_47;
        case 4:
          goto LABEL_34;
        case 7:
          LODWORD(v27) = *((_WORD *)v22 + 9) & 1;
          goto LABEL_47;
        case 8:
          LODWORD(v27) = 1;
          goto LABEL_34;
        case 10:
          LODWORD(v27) = *((_DWORD *)v22 + 20) + 1;
LABEL_47:
          if (!v27) {
            goto LABEL_48;
          }
          goto LABEL_34;
        default:
          goto LABEL_48;
      }
    }
    if ((*((_DWORD *)v22 + 5) & 0x7FFFFFF) == 3) {
      LODWORD(v27) = 2;
    }
    else {
      LODWORD(v27) = 1;
    }
LABEL_34:
    int v25 = v27 - 1;
    if ((v27 - 1) >= 0x3F) {
      int v25 = 63;
    }
    unsigned int v28 = v25 + 1;
    BOOL v29 = v27 != v28;
  }
LABEL_49:
  if (v28 <= 1) {
    int v30 = 1;
  }
  else {
    int v30 = v28;
  }
  uint64_t v31 = (llvm::raw_ostream *)*a1;
  int v32 = (void *)(*a1)[4];
  if ((unint64_t)((*a1)[3] - (void)v32) <= 0x30)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
    unsigned int v71 = (void *)*((void *)v31 + 4);
  }
  else
  {
    qmemcpy(v32, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
    unsigned int v71 = (void *)(*((void *)v31 + 4) + 49);
    *((void *)v31 + 4) = v71;
  }
  unint64_t v33 = (v30 + v29);
  if (*((void *)v31 + 3) - (void)v71 <= 0x2EuLL)
  {
    llvm::raw_ostream::write(v31, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
  }
  else
  {
    qmemcpy(v71, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
    *((void *)v31 + 4) += 47;
  }
  sub_1CD098D14(v31, v33, 0, 0, 0);
  int v34 = (_WORD *)*((void *)v31 + 4);
  if (*((void *)v31 + 3) - (void)v34 <= 1uLL)
  {
    uint64_t v20 = "\">";
    unsigned int v18 = v31;
LABEL_60:
    llvm::raw_ostream::write(v18, v20, 2uLL);
    goto LABEL_61;
  }
  *int v34 = 15906;
  *((void *)v31 + 4) += 2;
LABEL_61:
  int v35 = (llvm::raw_ostream *)*a1;
  if (*((unsigned char *)a1 + 16))
  {
    v81[0] = (void *)*a1[1];
    sub_1CBF94B54(a2, (void (*)(uint64_t, void **, llvm::Value *))sub_1CD4AA984, (uint64_t)v81, (void (*)(uint64_t, uint64_t, unsigned int *, std::string::size_type))sub_1CD4AA9A0, (uint64_t)&v84, (uint64_t)&__p);
    if (v74 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    if (v74 >= 0) {
      size_t v40 = HIBYTE(v74) & 0x7F;
    }
    else {
      size_t v40 = v73;
    }
    llvm::raw_ostream::write(v35, p_p, v40);
    uint64_t v41 = *((void *)v35 + 4);
    if ((unint64_t)(*((void *)v35 + 3) - v41) > 4)
    {
      *(unsigned char *)(v41 + 4) = 62;
      *(_DWORD *)uint64_t v41 = 1685335868;
      *((void *)v35 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v35, "</td>", 5uLL);
    }
    if (SHIBYTE(v74) < 0)
    {
      uint64_t v38 = __p;
      goto LABEL_82;
    }
  }
  else
  {
    long long __p = (void *)*a1[1];
    sub_1CBF94B54(a2, (void (*)(uint64_t, void **, llvm::Value *))sub_1CD4AA984, (uint64_t)&__p, (void (*)(uint64_t, uint64_t, unsigned int *, std::string::size_type))sub_1CD4AA9A0, (uint64_t)&v84, (uint64_t)v81);
    llvm::DOT::EscapeString((char *)v81, (uint64_t)&__p);
    if (v74 >= 0) {
      uint64_t v36 = (const char *)&__p;
    }
    else {
      uint64_t v36 = (const char *)__p;
    }
    if (v74 >= 0) {
      size_t v37 = HIBYTE(v74) & 0x7F;
    }
    else {
      size_t v37 = v73;
    }
    llvm::raw_ostream::write(v35, v36, v37);
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v82) < 0)
    {
      uint64_t v38 = v81[0];
LABEL_82:
      operator delete(v38);
    }
  }
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  LODWORD(v73) = 0;
  char v77 = 0;
  uint64_t v78 = 0;
  uint64_t v80 = v81;
  int v79 = 0;
  long long __p = &unk_1F2646F30;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  if (!sub_1CD4650FC((uint64_t)a1, (llvm::raw_ostream *)&__p, (uint64_t)a2)) {
    goto LABEL_95;
  }
  if (*((unsigned char *)a1 + 16)) {
    goto LABEL_88;
  }
  uint64_t v42 = (llvm::raw_ostream *)*a1;
  uint64_t v43 = (unsigned char *)(*a1)[4];
  if ((unsigned char *)(*a1)[3] == v43)
  {
    llvm::raw_ostream::write(v42, "|", 1uLL);
  }
  else
  {
    *uint64_t v43 = 124;
    ++*((void *)v42 + 4);
  }
  if (*((unsigned char *)a1 + 16))
  {
LABEL_88:
    uint64_t v44 = (llvm::raw_ostream *)*a1;
    char v45 = *((unsigned char *)v80 + 23);
    if (v45 >= 0) {
      int v46 = (const char *)v80;
    }
    else {
      int v46 = (const char *)*v80;
    }
    if (v45 >= 0) {
      size_t v47 = v45 & 0x7F;
    }
    else {
      size_t v47 = (size_t)v80[1];
    }
    goto LABEL_94;
  }
  long long v63 = (llvm::raw_ostream *)*a1;
  uint64_t v64 = (unsigned char *)(*a1)[4];
  if ((unsigned char *)(*a1)[3] == v64)
  {
    long long v63 = llvm::raw_ostream::write(v63, "{", 1uLL);
  }
  else
  {
    *uint64_t v64 = 123;
    ++*((void *)v63 + 4);
  }
  char v65 = *((unsigned char *)v80 + 23);
  if (v65 >= 0) {
    char v66 = (const char *)v80;
  }
  else {
    char v66 = (const char *)*v80;
  }
  if (v65 >= 0) {
    size_t v67 = v65 & 0x7F;
  }
  else {
    size_t v67 = (size_t)v80[1];
  }
  uint64_t v44 = llvm::raw_ostream::write(v63, v66, v67);
  long long v68 = (unsigned char *)*((void *)v44 + 4);
  if (*((unsigned char **)v44 + 3) == v68)
  {
    int v46 = "}";
    size_t v47 = 1;
LABEL_94:
    llvm::raw_ostream::write(v44, v46, v47);
    goto LABEL_95;
  }
  *long long v68 = 125;
  ++*((void *)v44 + 4);
LABEL_95:
  unint64_t v48 = (llvm::raw_ostream *)*a1;
  uint64_t v49 = (_WORD *)(*a1)[4];
  unint64_t v50 = (*a1)[3] - (void)v49;
  if (*((unsigned char *)a1 + 16))
  {
    if (v50 <= 0xD)
    {
      int v51 = "</tr></table>>";
      size_t v52 = 14;
LABEL_100:
      llvm::raw_ostream::write(v48, v51, v52);
      goto LABEL_101;
    }
    qmemcpy(v49, "</tr></table>>", 14);
    uint64_t v70 = *((void *)v48 + 4) + 14;
  }
  else
  {
    if (v50 <= 1)
    {
      int v51 = "}\"";
      size_t v52 = 2;
      goto LABEL_100;
    }
    _WORD *v49 = 8829;
    uint64_t v70 = *((void *)v48 + 4) + 2;
  }
  *((void *)v48 + 4) = v70;
LABEL_101:
  unsigned int v53 = (llvm::raw_ostream *)*a1;
  uint64_t v54 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v54) > 2)
  {
    *(unsigned char *)(v54 + 2) = 10;
    *(_WORD *)uint64_t v54 = 15197;
    *((void *)v53 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v53, "];\n", 3uLL);
  }
  unsigned int v55 = (void *)*((void *)a2 + 5);
  if (v55 == (void *)((char *)a2 + 40))
  {
    int v62 = 0;
    int v4 = 0;
LABEL_134:
    unint64_t v59 = 0;
  }
  else
  {
    if (v55) {
      uint64_t v27 = (uint64_t)(v55 - 3);
    }
    else {
      uint64_t v27 = 0;
    }
    int v56 = *(unsigned __int8 *)(v27 + 16);
    if ((v56 - 29) >= 0xB) {
      int v4 = 0;
    }
    else {
      int v4 = (llvm::raw_ostream *)v27;
    }
    if (v56 == 30)
    {
      if ((*(_DWORD *)(v27 + 20) & 0x7FFFFFF) == 3) {
        int v57 = 2;
      }
      else {
        int v57 = 1;
      }
LABEL_114:
      int v58 = 0;
      unint64_t v59 = 0;
      do
      {
        sub_1CD4AA8BC((llvm::raw_ostream **)a1, (unint64_t)a2, v58, v4, v59);
        int v60 = v59 + 1;
        unint64_t v59 = v59 & 0xFFFFFFFF00000000 | (v59 + 1);
        if (v57 == v60) {
          break;
        }
      }
      while (v58++ != 63);
      int v62 = v57;
    }
    else
    {
      int v57 = 2;
      unint64_t v59 = 0;
      int v62 = 0;
      switch(*(unsigned char *)(v27 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          break;
        case 0x1E:
          goto LABEL_154;
        case 0x1F:
          int v57 = (*(_DWORD *)(v27 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_132;
        case 0x20:
        case 0x26:
          goto LABEL_155;
        case 0x21:
          goto LABEL_114;
        case 0x24:
          int v57 = *(_WORD *)(v27 + 18) & 1;
          goto LABEL_132;
        case 0x25:
          int v57 = 1;
          goto LABEL_114;
        case 0x27:
          int v57 = *(_DWORD *)(v27 + 80) + 1;
          goto LABEL_132;
        default:
          goto LABEL_133;
      }
    }
  }
  if (v62 != v59)
  {
    do
    {
      sub_1CD4AA8BC((llvm::raw_ostream **)a1, (unint64_t)a2, 64, v4, v59);
      int v69 = v59 + 1;
      unint64_t v59 = v59 & 0xFFFFFFFF00000000 | (v59 + 1);
    }
    while (v62 != v69);
  }
  long long __p = &unk_1F2646B98;
  if (v79 == 1 && v74) {
    MEMORY[0x1D25D9CB0](v74, 0x1000C8077774924);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(v81[0]);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CC0B23B4()
{
  v4.n128_u64[0] = (unint64_t)"file name for generated dot file";
  v4.n128_u64[1] = 32;
  *(void *)&long long v2 = "file name for generated dot file";
  *((void *)&v2 + 1) = 32;
  int v1 = "";
  sub_1CD4A9F18((long long *)&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CD41C8DC, qword_1EBCC6B58, &dword_1CB82C000);
  LODWORD(v1) = 1;
  int v3 = 100;
  *(void *)&long long v2 = &v3;
  v4.n128_u64[0] = (unint64_t)"The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)";
  v4.n128_u64[1] = 92;
  sub_1CD4AA030(&v1, (int **)&v2, (long long *)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC69D8, &dword_1CB82C000);
  *(void *)&long long v2 = &llvm::VerifyMemorySSA;
  LODWORD(v1) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable verification of MemorySSA.";
  v4.n128_u64[1] = 33;
  sub_1CD4A42A8((llvm::cl::Option *)&unk_1EBCC6A98, "verify-memoryssa", (unsigned char **)&v2, &v1, &v4);
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &unk_1EBCC6A98, &dword_1CB82C000);
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefRecursive(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *((unsigned int *)a3 + 4);
  if (!v3) {
    goto LABEL_2;
  }
  uint64_t v4 = *a3;
  unsigned int v5 = v3 - 1;
  unint64_t v6 = (uint64_t *)(*a3 + 32 * ((v3 - 1) & ((a2 >> 4) ^ (a2 >> 9))));
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v8 = 1;
    LODWORD(v9) = v5 & ((a2 >> 4) ^ (a2 >> 9));
    do
    {
      if (v7 == -4096) {
        goto LABEL_2;
      }
      int v10 = v9 + v8++;
      uint64_t v9 = v10 & v5;
      uint64_t v7 = *(void *)(v4 + 32 * v9);
    }
    while (v7 != a2);
    unint64_t v6 = (uint64_t *)(v4 + 32 * v9);
  }
  if (v6 == (uint64_t *)(v4 + 32 * v3)) {
LABEL_2:
  }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  return v6[3];
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefFromEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 88);
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == (uint64_t *)(v4 + 16 * v5) || (uint64_t v12 = (uint64_t *)v7[1]) == 0)
  {
    return llvm::MemorySSAUpdater::getPreviousDefRecursive();
  }
  else
  {
    uint64_t v13 = *v12;
    uint64_t v28 = a2;
    uint64_t v29 = 6;
    int v30 = 0;
    uint64_t v31 = 0;
    if (v13)
    {
      int v14 = (int32x2_t ****)(v13 - 48);
      uint64_t v31 = v14;
      if (v14 != (int32x2_t ****)-8192 && v14 != (int32x2_t ****)-4096 && v14 != 0) {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v29);
      }
    }
    sub_1CC0BD24C((uint64_t)v27, a3, &v28, &v29);
    if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31)
    {
      unint64_t v16 = v29 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = v30;
      if (v30)
      {
        *int v30 = *v30 & 7 | v16;
      }
      else
      {
        uint64_t v17 = v31;
        unsigned int v18 = ***v31;
        unint64_t v19 = (unint64_t)v18[303];
        if (v19 <= v16)
        {
          uint64_t v20 = v18[305].u32[0];
          if (v19 + 16 * v20 > v16)
          {
            unsigned int v21 = v20 - 1;
            LODWORD(v22) = v21 & ((v31 >> 4) ^ (v31 >> 9));
            int v23 = (int32x2_t *****)(v19 + 16 * v22);
            int v24 = *v23;
            if (v31 == *v23)
            {
LABEL_31:
              *int v23 = (int32x2_t ****)-8192;
              v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v17 = v31;
            }
            else
            {
              int v25 = 1;
              while (v24 != (int32x2_t ****)-4096)
              {
                int v26 = v22 + v25++;
                uint64_t v22 = v26 & v21;
                int v24 = *(int32x2_t *****)(v19 + 16 * v22);
                if (v31 == v24)
                {
                  int v23 = (int32x2_t *****)(v19 + 16 * v22);
                  goto LABEL_31;
                }
              }
            }
            *((unsigned char *)v17 + 17) &= ~1u;
          }
        }
      }
    }
    if (*v12) {
      return *v12 - 48;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1CC0B3B78(uint64_t result, void *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  unint64_t v3 = *(void *)result;
  if (v2 >= *(_DWORD *)(result + 12))
  {
    unint64_t v11 = v3 + 24 * v2;
    if (v3 > (unint64_t)a2 || v11 <= (unint64_t)a2) {
      sub_1CD4AB770();
    }
    sub_1CD4AB770();
  }
  unsigned int v4 = *(_DWORD *)(result + 8);
  uint64_t v5 = (unint64_t *)(v3 + 24 * v4);
  *uint64_t v5 = 6;
  v5[1] = 0;
  unint64_t v6 = (unint64_t)(v5 + 1);
  unint64_t v7 = a2[2];
  void v5[2] = v7;
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
  {
    unint64_t v9 = *a2 & 0xFFFFFFFFFFFFFFF8;
    v5[1] = *(void *)v9;
    *(void *)unint64_t v9 = v5;
    *uint64_t v5 = v9 | 6;
    int v10 = (uint64_t *)v5[1];
    if (v10) {
      *int v10 = *v10 & 7 | v6;
    }
  }
  *(_DWORD *)(result + 8) = v4 + 1;
  return result;
}

void llvm::MemorySSAUpdater::removeMemoryAccess(int32x2_t **this, llvm::MemoryAccess *a2, llvm::Value *a3)
{
  int v3 = (int)a3;
  v66[4] = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v6 == 27)
  {
    unint64_t v7 = (llvm::Value *)sub_1CC0BCC1C((uint64_t)a2);
  }
  else
  {
    if (v6 == 25) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8) {
      unint64_t v9 = (llvm::Value **)((char *)v8 - 32);
    }
    else {
      unint64_t v9 = (llvm::Value **)((char *)a2 - 64);
    }
    unint64_t v7 = *v9;
  }
  uint64_t v61 = 1;
  int64x2_t v62 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v63 = v62;
  uint64_t v64 = (char *)v66;
  uint64_t v65 = 0x400000000;
  if (v6 != 25)
  {
    uint64_t v10 = *((void *)a2 + 1);
    if (v10)
    {
      if ((*((unsigned char *)a2 + 17) & 1) == 0
        || (llvm::ValueHandleBase::ValueIsRAUWd(a2, v7, a3), (uint64_t v10 = *((void *)a2 + 1)) != 0))
      {
        unint64_t v11 = (uint64_t *)((char *)v7 + 8);
        while (1)
        {
          uint64_t v12 = *(void *)(v10 + 24);
          int v13 = *(unsigned __int8 *)(v12 + 16);
          if (v12) {
            BOOL v14 = (v13 - 27) >= 0xFFFFFFFE;
          }
          else {
            BOOL v14 = 0;
          }
          if (!v14) {
            goto LABEL_26;
          }
          if (v13 == 26) {
            break;
          }
          *(_DWORD *)(v12 + 88) = -1;
          if (v3)
          {
LABEL_27:
            unint64_t v16 = *(char **)(v10 + 24);
            if (v16[16] != 27) {
              unint64_t v16 = 0;
            }
            int v58 = v16;
            if (v16) {
              sub_1CD4AB038((uint64_t)&v61, (uint64_t *)&v58);
            }
          }
LABEL_32:
          if (*(void *)v10)
          {
            **(void **)(v10 + 16) = *(void *)(v10 + 8);
            uint64_t v17 = *(void *)(v10 + 8);
            if (v17) {
              *(void *)(v17 + 16) = *(void *)(v10 + 16);
            }
          }
          *(void *)uint64_t v10 = v7;
          if (v7)
          {
            uint64_t v18 = *v11;
            *(void *)(v10 + 8) = *v11;
            if (v18) {
              *(void *)(v18 + 16) = v10 + 8;
            }
            *(void *)(v10 + 16) = v11;
            *unint64_t v11 = v10;
          }
          uint64_t v10 = *((void *)a2 + 1);
          if (!v10) {
            goto LABEL_40;
          }
        }
        *(_DWORD *)(v12 + 92) = -1;
        if (*(void *)(v12 - 32))
        {
          **(void **)(v12 - 16) = *(void *)(v12 - 24);
          uint64_t v15 = *(void *)(v12 - 24);
          if (v15) {
            *(void *)(v15 + 16) = *(void *)(v12 - 16);
          }
        }
        *(void *)(v12 - 32) = 0;
LABEL_26:
        if (v3) {
          goto LABEL_27;
        }
        goto LABEL_32;
      }
    }
  }
LABEL_40:
  llvm::MemorySSA::removeFromLookups(*this, (uint64_t)a2);
  llvm::MemorySSA::removeFromLists(*this, (uint64_t)a2, 1);
  if (v65)
  {
    int v58 = (char *)&v60;
    uint64_t v59 = 0x1000000000;
    sub_1CD4AC3B0((unsigned int *)&v58, v64, &v64[8 * v65]);
    sub_1CD4AC46C(&v61);
    LODWORD(v65) = 0;
    for (int i = v59; i; --i)
    {
      uint64_t v20 = v58;
      int v21 = v59;
      uint64_t v22 = &v58[24 * v59];
      uint64_t v55 = 4;
      int v56 = 0;
      int v23 = (int32x2_t ****)*((void *)v22 - 1);
      int v57 = v23;
      if (v23 && v23 != (int32x2_t ****)-8192 && v23 != (int32x2_t ****)-4096)
      {
        unint64_t v24 = *((void *)v22 - 3) & 0xFFFFFFFFFFFFFFF8;
        int v56 = *(unint64_t **)v24;
        *(void *)unint64_t v24 = &v55;
        uint64_t v55 = v24 | 4;
        if (v56) {
          *int v56 = *v56 & 7 | (unint64_t)&v56;
        }
        uint64_t v20 = v58;
      }
      LODWORD(v59) = v21 - 1;
      int v25 = &v20[24 * (v21 - 1)];
      uint64_t v26 = *((void *)v25 + 2);
      if (v26 && v26 != -8192 && v26 != -4096)
      {
        unint64_t v27 = *(void *)v25 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v27 = *((void *)v25 + 1);
        uint64_t v28 = (unint64_t *)*((void *)v25 + 1);
        if (v28)
        {
          *uint64_t v28 = *v28 & 7 | v27;
        }
        else
        {
          uint64_t v29 = *((void *)v25 + 2);
          int v30 = ***(int32x2_t ****)v29;
          unint64_t v31 = (unint64_t)v30[303];
          if (v31 <= v27)
          {
            uint64_t v32 = v30[305].u32[0];
            if (v31 + 16 * v32 > v27)
            {
              unsigned int v33 = v32 - 1;
              LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
              int v35 = (uint64_t *)(v31 + 16 * v34);
              uint64_t v36 = *v35;
              if (v29 == *v35)
              {
LABEL_64:
                uint64_t *v35 = -8192;
                v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v29 = *((void *)v25 + 2);
              }
              else
              {
                int v37 = 1;
                while (v36 != -4096)
                {
                  int v38 = v34 + v37++;
                  uint64_t v34 = v38 & v33;
                  uint64_t v36 = *(void *)(v31 + 16 * v34);
                  if (v29 == v36)
                  {
                    int v35 = (uint64_t *)(v31 + 16 * v34);
                    goto LABEL_64;
                  }
                }
              }
              *(unsigned char *)(v29 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v39 = v57;
      if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57 != 0)
      {
        unint64_t v44 = v55 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
        if (v56)
        {
          *int v56 = *v56 & 7 | v44;
        }
        else
        {
          char v45 = v57;
          int v46 = ***v57;
          unint64_t v47 = (unint64_t)v46[303];
          if (v47 <= v44)
          {
            uint64_t v48 = v46[305].u32[0];
            if (v47 + 16 * v48 > v44)
            {
              unsigned int v49 = v48 - 1;
              LODWORD(v50) = v49 & ((v57 >> 4) ^ (v57 >> 9));
              int v51 = (int32x2_t *****)(v47 + 16 * v50);
              size_t v52 = *v51;
              if (v57 == *v51)
              {
LABEL_88:
                const char *v51 = (int32x2_t ****)-8192;
                v46[304] = vadd_s32(v46[304], (int32x2_t)0x1FFFFFFFFLL);
                char v45 = v57;
              }
              else
              {
                int v53 = 1;
                while (v52 != (int32x2_t ****)-4096)
                {
                  int v54 = v50 + v53++;
                  uint64_t v50 = v54 & v49;
                  size_t v52 = *(int32x2_t *****)(v47 + 16 * v50);
                  if (v57 == v52)
                  {
                    int v51 = (int32x2_t *****)(v47 + 16 * v50);
                    goto LABEL_88;
                  }
                }
              }
              *((unsigned char *)v45 + 17) &= ~1u;
            }
          }
        }
      }
      if (v39)
      {
        int v41 = *((_DWORD *)v39 + 5);
        if ((v41 & 0x40000000) != 0)
        {
          uint64_t v43 = (uint64_t)*(v39 - 1);
          uint64_t v42 = v41 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v42 = v41 & 0x7FFFFFF;
          uint64_t v43 = (uint64_t)&v39[-4 * v42];
        }
        uint64_t v55 = v43;
        int v56 = (unint64_t *)(v43 + 32 * v42);
        sub_1CC0B4970((llvm::MemorySSAUpdater *)this);
      }
    }
    sub_1CC0BD0FC(&v58);
  }
  if (v64 != (char *)v66) {
    free(v64);
  }
  if ((v61 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v62.i64[0], 8);
  }
}

void sub_1CC0B4168(unsigned int *a1, char *a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *(void *)a1;
  if (v4 >= a1[3])
  {
    unint64_t v13 = v4 + 1;
    unint64_t v14 = v5 + 24 * v4;
    if (v5 <= (unint64_t)a2 && v14 > (unint64_t)a2)
    {
      unint64_t v16 = &a2[-v5];
      sub_1CC0BD844(a1, v13);
      unint64_t v5 = *(void *)a1;
      a2 = &v16[*(void *)a1];
    }
    else
    {
      sub_1CC0BD844(a1, v13);
      unint64_t v5 = *(void *)a1;
    }
  }
  unsigned int v6 = a1[2];
  unint64_t v7 = (unint64_t *)(v5 + 24 * v6);
  *unint64_t v7 = 4;
  v7[1] = 0;
  unint64_t v8 = (unint64_t)(v7 + 1);
  unint64_t v9 = *((void *)a2 + 2);
  uint64_t v7[2] = v9;
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
  {
    unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    v7[1] = *(void *)v11;
    *(void *)unint64_t v11 = v7;
    *unint64_t v7 = v11 | 4;
    uint64_t v12 = (uint64_t *)v7[1];
    if (v12) {
      *uint64_t v12 = *v12 & 7 | v8;
    }
  }
  a1[2] = v6 + 1;
}

uint64_t llvm::MemorySSAUpdater::getPreviousDef(llvm::MemorySSAUpdater *this, llvm::MemoryAccess *a2)
{
  uint64_t PreviousDefInBlock = llvm::MemorySSAUpdater::getPreviousDefInBlock((uint64_t *)this, (uint64_t)a2);
  if (PreviousDefInBlock) {
    return PreviousDefInBlock;
  }
  v8[0] = 0;
  v8[1] = 0;
  unsigned int v9 = 0;
  uint64_t PreviousDefRecursive = llvm::MemorySSAUpdater::getPreviousDefRecursive((uint64_t)this, *((void *)a2 + 8), (uint64_t *)v8);
  unsigned int v6 = v8[0];
  sub_1CC0BDA8C(v8[0], v9);
  MEMORY[0x1D25D9CD0](v6, 8);
  return PreviousDefRecursive;
}

uint64_t llvm::MemorySSAUpdater::getPreviousDefInBlock(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(*a1 + 72);
  uint64_t v5 = *(unsigned int *)(*a1 + 88);
  if (v5)
  {
    LODWORD(v6) = ((v3 >> 4) ^ (v3 >> 9)) & (v5 - 1);
    unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (v3 == *v7) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v3 == v8)
      {
        unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  unint64_t v7 = (uint64_t *)(v4 + 16 * v5);
LABEL_8:
  if (v7 == (uint64_t *)(v4 + 16 * v5)) {
    return 0;
  }
  uint64_t v12 = v7[1];
  if (!v12) {
    return 0;
  }
  if (*(unsigned char *)(a2 + 16) == 25)
  {
    uint64_t v13 = *(void *)(v2 + 48);
    uint64_t v14 = *(unsigned int *)(v2 + 64);
    if (v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      unint64_t v16 = (uint64_t *)(v13 + 16 * v15);
      uint64_t v17 = *v16;
      if (v3 == *v16) {
        goto LABEL_24;
      }
      int v18 = 1;
      while (v17 != -4096)
      {
        int v19 = v15 + v18++;
        uint64_t v15 = v19 & (v14 - 1);
        uint64_t v17 = *(void *)(v13 + 16 * v15);
        if (v3 == v17)
        {
          unint64_t v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_24;
        }
      }
    }
    unint64_t v16 = (uint64_t *)(v13 + 16 * v14);
LABEL_24:
    if (v16 == (uint64_t *)(v13 + 16 * v14)) {
      int v21 = 0;
    }
    else {
      int v21 = (void *)v16[1];
    }
    uint64_t v22 = (void *)(a2 + 32);
    while (1)
    {
      uint64_t v22 = (void *)*v22;
      if (v22 == v21) {
        break;
      }
      uint64_t result = (uint64_t)(v22 - 4);
      if (v22) {
        int v23 = v22 - 4;
      }
      else {
        int v23 = 0;
      }
      if (*((unsigned char *)v23 + 16) != 25) {
        return result;
      }
    }
    return 0;
  }
  uint64_t v20 = *(void *)(a2 + 48);
  uint64_t result = v20 ? v20 - 48 : 0;
  if (v20 == v12) {
    return 0;
  }
  return result;
}

int32x2_t ****llvm::MemorySSAUpdater::recursePhi(llvm::MemorySSAUpdater *this, unint64_t a2)
{
  v69[24] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v61 = 6;
  int64x2_t v62 = 0;
  int64x2_t v63 = (int32x2_t ****)a2;
  if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v61);
  }
  size_t v67 = (char *)v69;
  uint64_t v68 = 0x800000000;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    LODWORD(v5) = 0;
    do
    {
      uint64_t v6 = *(int32x2_t *****)(v4 + 24);
      uint64_t v64 = 6;
      uint64_t v65 = 0;
      char v66 = 0;
      if (v6)
      {
        char v66 = v6;
        if (((unint64_t)v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v64);
          LODWORD(v5) = v68;
        }
      }
      unint64_t v7 = v67;
      if (v5 >= HIDWORD(v68))
      {
        unint64_t v26 = v5 + 1;
        BOOL v27 = &v67[24 * v5] > (char *)&v64;
        if (v67 <= (char *)&v64 && v27)
        {
          uint64_t v28 = (char *)&v64 - v67;
          sub_1CC0BDBA8(&v67, v26);
          unint64_t v7 = v67;
          uint64_t v8 = (uint64_t *)&v67[v28];
        }
        else
        {
          sub_1CC0BDBA8(&v67, v26);
          uint64_t v8 = &v64;
          unint64_t v7 = v67;
        }
      }
      else
      {
        uint64_t v8 = &v64;
      }
      int v9 = v68;
      int v10 = (unint64_t *)&v7[24 * v68];
      *int v10 = 6;
      v10[1] = 0;
      uint64_t v11 = v8[2];
      void v10[2] = v11;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        unint64_t v13 = *v8 & 0xFFFFFFFFFFFFFFF8;
        v10[1] = *(void *)v13;
        *(void *)unint64_t v13 = v10;
        *int v10 = v13 | 6;
        uint64_t v14 = (unint64_t *)v10[1];
        if (v14) {
          *uint64_t v14 = *v14 & 7 | (unint64_t)(v10 + 1);
        }
      }
      uint64_t v5 = (v9 + 1);
      LODWORD(v68) = v9 + 1;
      if (v66 != (int32x2_t ****)-8192 && v66 != (int32x2_t ****)-4096 && v66)
      {
        unint64_t v15 = v64 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v64 & 0xFFFFFFFFFFFFFFF8) = v65;
        if (v65)
        {
          *uint64_t v65 = *v65 & 7 | v15;
        }
        else
        {
          unint64_t v16 = v66;
          uint64_t v17 = ***v66;
          unint64_t v18 = (unint64_t)v17[303];
          if (v18 <= v15)
          {
            uint64_t v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v15)
            {
              unsigned int v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v66 >> 4) ^ (v66 >> 9));
              uint64_t v22 = (int32x2_t *****)(v18 + 16 * v21);
              int v23 = *v22;
              if (v66 == *v22)
              {
LABEL_29:
                void *v22 = (int32x2_t ****)-8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                unint64_t v16 = v66;
              }
              else
              {
                int v24 = 1;
                while (v23 != (int32x2_t ****)-4096)
                {
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & v20;
                  int v23 = *(int32x2_t *****)(v18 + 16 * v21);
                  if (v66 == v23)
                  {
                    uint64_t v22 = (int32x2_t *****)(v18 + 16 * v21);
                    goto LABEL_29;
                  }
                }
              }
              *((unsigned char *)v16 + 17) &= ~1u;
            }
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    uint64_t v29 = v67;
    if (v5)
    {
      uint64_t v30 = 24 * v5;
      unint64_t v31 = (llvm::MemoryPhi **)(v67 + 16);
      do
      {
        if (*v31) {
          BOOL v32 = *((unsigned char *)*v31 + 16) == 27;
        }
        else {
          BOOL v32 = 0;
        }
        if (v32) {
          llvm::MemorySSAUpdater::tryRemoveTrivialPhi(this, *v31);
        }
        v31 += 3;
        v30 -= 24;
      }
      while (v30);
      unsigned int v33 = v63;
      uint64_t v29 = v67;
      if (v68)
      {
        uint64_t v34 = &v67[24 * v68];
        do
        {
          uint64_t v35 = *((void *)v34 - 1);
          if (v35 != -8192 && v35 != -4096 && v35 != 0)
          {
            unint64_t v37 = *((void *)v34 - 3) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v37 = *((void *)v34 - 2);
            int v38 = (unint64_t *)*((void *)v34 - 2);
            if (v38)
            {
              *int v38 = *v38 & 7 | v37;
            }
            else
            {
              uint64_t v39 = *((void *)v34 - 1);
              size_t v40 = ***(int32x2_t ****)v39;
              unint64_t v41 = (unint64_t)v40[303];
              if (v41 <= v37)
              {
                uint64_t v42 = v40[305].u32[0];
                if (v41 + 16 * v42 > v37)
                {
                  unsigned int v43 = v42 - 1;
                  LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
                  char v45 = (uint64_t *)(v41 + 16 * v44);
                  uint64_t v46 = *v45;
                  if (v39 == *v45)
                  {
LABEL_62:
                    *char v45 = -8192;
                    v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v39 = *((void *)v34 - 1);
                  }
                  else
                  {
                    int v47 = 1;
                    while (v46 != -4096)
                    {
                      int v48 = v44 + v47++;
                      uint64_t v44 = v48 & v43;
                      uint64_t v46 = *(void *)(v41 + 16 * v44);
                      if (v39 == v46)
                      {
                        char v45 = (uint64_t *)(v41 + 16 * v44);
                        goto LABEL_62;
                      }
                    }
                  }
                  *(unsigned char *)(v39 + 17) &= ~1u;
                }
              }
            }
          }
          v34 -= 24;
        }
        while (v34 != v29);
        uint64_t v29 = v67;
      }
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v29 = (char *)v69;
  }
  unsigned int v33 = v63;
LABEL_70:
  if (v29 != (char *)v69) {
    free(v29);
  }
  if (v63 != (int32x2_t ****)-8192 && v63 != (int32x2_t ****)-4096 && v63)
  {
    unint64_t v49 = v61 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v61 & 0xFFFFFFFFFFFFFFF8) = v62;
    if (v62)
    {
      *int64x2_t v62 = *v62 & 7 | v49;
    }
    else
    {
      uint64_t v50 = v63;
      int v51 = ***v63;
      unint64_t v52 = (unint64_t)v51[303];
      if (v52 <= v49)
      {
        uint64_t v53 = v51[305].u32[0];
        if (v52 + 16 * v53 > v49)
        {
          unsigned int v54 = v53 - 1;
          LODWORD(v55) = v54 & ((v63 >> 4) ^ (v63 >> 9));
          int v56 = (int32x2_t *****)(v52 + 16 * v55);
          int v57 = *v56;
          if (v63 == *v56)
          {
LABEL_83:
            *int v56 = (int32x2_t ****)-8192;
            v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v50 = v63;
          }
          else
          {
            int v58 = 1;
            while (v57 != (int32x2_t ****)-4096)
            {
              int v59 = v55 + v58++;
              uint64_t v55 = v59 & v54;
              int v57 = *(int32x2_t *****)(v52 + 16 * v55);
              if (v63 == v57)
              {
                int v56 = (int32x2_t *****)(v52 + 16 * v55);
                goto LABEL_83;
              }
            }
          }
          *((unsigned char *)v50 + 17) &= ~1u;
        }
      }
    }
  }
  return v33;
}

int32x2_t ****llvm::MemorySSAUpdater::tryRemoveTrivialPhi(llvm::MemorySSAUpdater *a1, _DWORD *a2)
{
  int v2 = a2[5];
  if ((v2 & 0x40000000) != 0)
  {
    uint64_t v3 = (llvm::Value **)*((void *)a2 - 1);
    uint64_t v4 = v2 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v4 = v2 & 0x7FFFFFF;
    uint64_t v3 = (llvm::Value **)&a2[-8 * v4];
  }
  v6[0] = v3;
  v6[1] = &v3[4 * v4];
  return sub_1CC0B4970(a1, (llvm::ValueAsMetadata *)a2, v6);
}

int32x2_t ****sub_1CC0B4970(llvm::MemorySSAUpdater *this, llvm::ValueAsMetadata *a2, llvm::Value ***a3)
{
  uint64_t v3 = a2;
  if (*((void *)this + 75))
  {
    for (int i = (void *)*((void *)this + 74); i; int i = (void *)*i)
    {
      unint64_t v13 = i[4];
      if (v13 <= (unint64_t)a2)
      {
        if (v13 >= (unint64_t)a2) {
          return (int32x2_t ****)v3;
        }
        ++i;
      }
    }
  }
  else
  {
    uint64_t v5 = *((unsigned int *)this + 128);
    if (v5)
    {
      uint64_t v14 = (llvm::ValueAsMetadata **)*((void *)this + 63);
      uint64_t v15 = 8 * v5;
      while (*v14 != a2)
      {
        ++v14;
        v15 -= 8;
        if (!v15) {
          goto LABEL_3;
        }
      }
      if (v15) {
        return (int32x2_t ****)v3;
      }
    }
  }
LABEL_3:
  uint64_t v6 = *a3;
  unint64_t v7 = a3[1];
  if (*a3 == v7) {
    return *(int32x2_t *****)(*(void *)this + 96);
  }
  uint64_t v8 = 0;
  do
  {
    int v9 = *v6;
    if (*v6 == a2 || v9 == v8)
    {
      int v9 = v8;
    }
    else if (v8)
    {
      return (int32x2_t ****)v3;
    }
    v6 += 4;
    uint64_t v8 = v9;
  }
  while (v6 != v7);
  if (!v9) {
    return *(int32x2_t *****)(*(void *)this + 96);
  }
  if (a2)
  {
    llvm::Value::doRAUW(a2, v9, (llvm::Value *)1);
    llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)this, v3, 0);
  }

  return llvm::MemorySSAUpdater::recursePhi(this, (unint64_t)v9);
}

void llvm::MemorySSAUpdater::insertUse(llvm::MemorySSAUpdater *this, llvm::MemoryUse *a2, int a3)
{
  uint64_t v6 = (void *)*((void *)this + 52);
  if (v6 == *((void **)this + 51)) {
    goto LABEL_2;
  }
  uint64_t v46 = *((unsigned int *)this + 106);
  if (v46 < 0x21 || 4 * (*((_DWORD *)this + 107) - *((_DWORD *)this + 108)) >= v46)
  {
    memset(v6, 255, 8 * v46);
LABEL_2:
    *(void *)((char *)this + 428) = 0;
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 51);
LABEL_3:
  unsigned int v7 = *((_DWORD *)this + 4);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = v8 + 24 * v7;
    do
    {
      uint64_t v10 = *(void *)(v9 - 8);
      if (v10 != -8192 && v10 != -4096 && v10 != 0)
      {
        unint64_t v12 = *(void *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v12 = *(void *)(v9 - 16);
        unint64_t v13 = *(unint64_t **)(v9 - 16);
        if (v13)
        {
          *unint64_t v13 = *v13 & 7 | v12;
        }
        else
        {
          uint64_t v14 = *(void *)(v9 - 8);
          uint64_t v15 = ***(int32x2_t ****)v14;
          unint64_t v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            uint64_t v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              unsigned int v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              unsigned int v20 = (uint64_t *)(v16 + 16 * v19);
              uint64_t v21 = *v20;
              if (v14 == *v20)
              {
LABEL_21:
                *unsigned int v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v14 = *(void *)(v9 - 8);
              }
              else
              {
                int v22 = 1;
                while (v21 != -4096)
                {
                  int v23 = v19 + v22++;
                  uint64_t v19 = v23 & v18;
                  uint64_t v21 = *(void *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    unsigned int v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_21;
                  }
                }
              }
              *(unsigned char *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v9 -= 24;
    }
    while (v9 != v8);
  }
  *((_DWORD *)this + 4) = 0;
  uint64_t PreviousDef = llvm::MemorySSAUpdater::getPreviousDef(this, a2);
  if (*((unsigned char *)a2 + 16) == 25) {
    int v25 = a2;
  }
  else {
    int v25 = 0;
  }
  if (v25) {
    unint64_t v26 = (char *)v25 - 32;
  }
  else {
    unint64_t v26 = (char *)a2 - 64;
  }
  if (*(void *)v26)
  {
    **((void **)v26 + 2) = *((void *)v26 + 1);
    uint64_t v48 = *((void *)v26 + 1);
    if (v48) {
      *(void *)(v48 + 16) = *((void *)v26 + 2);
    }
  }
  *(void *)unint64_t v26 = PreviousDef;
  if (PreviousDef)
  {
    uint64_t v29 = *(void *)(PreviousDef + 8);
    BOOL v27 = (void *)(PreviousDef + 8);
    uint64_t v28 = v29;
    *((void *)v26 + 1) = v29;
    if (v29) {
      *(void *)(v28 + 16) = v26 + 8;
    }
    *((void *)v26 + 2) = v27;
    *BOOL v27 = v26;
  }
  if (a3)
  {
    unsigned int v30 = *((_DWORD *)this + 4);
    if (v30)
    {
      unint64_t v49 = v53;
      uint64_t v50 = v53;
      uint64_t v51 = 16;
      int v52 = 0;
      uint64_t v31 = *((void *)a2 + 8);
      uint64_t v32 = *(void *)(*(void *)this + 72);
      uint64_t v33 = *(unsigned int *)(*(void *)this + 88);
      if (v33)
      {
        LODWORD(v34) = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
        uint64_t v35 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v36 = *v35;
        if (v31 == *v35) {
          goto LABEL_44;
        }
        int v37 = 1;
        while (v36 != -4096)
        {
          int v38 = v34 + v37++;
          uint64_t v34 = v38 & (v33 - 1);
          uint64_t v36 = *(void *)(v32 + 16 * v34);
          if (v31 == v36)
          {
            uint64_t v35 = (uint64_t *)(v32 + 16 * v34);
            goto LABEL_44;
          }
        }
      }
      uint64_t v35 = (uint64_t *)(v32 + 16 * v33);
LABEL_44:
      if (v35 != (uint64_t *)(v32 + 16 * v33))
      {
        uint64_t v39 = v35[1];
        if (v39)
        {
          uint64_t v40 = *(void *)(v39 + 8);
          uint64_t v41 = v40 - 48;
          if (v40) {
            uint64_t v42 = v40 - 48;
          }
          else {
            uint64_t v42 = 0;
          }
          if (v40) {
            BOOL v43 = *(unsigned char *)(v42 + 16) == 26;
          }
          else {
            BOOL v43 = 0;
          }
          if (v43) {
            uint64_t v41 = *(void *)(v42 - 64);
          }
          sub_1CC0B4DC8(*(void *)this, v31, v41, (llvm::SmallPtrSetImplBase *)&v49);
          unsigned int v30 = *((_DWORD *)this + 4);
        }
      }
      if (v30)
      {
        uint64_t v44 = 24 * v30;
        uint64_t v45 = *((void *)this + 1) + 16;
        do
        {
          if (*(void *)v45) {
            sub_1CC0B4DC8(*(void *)this, *(void *)(*(void *)v45 + 64), 0, (llvm::SmallPtrSetImplBase *)&v49);
          }
          v45 += 24;
          v44 -= 24;
        }
        while (v44);
      }
      if (v50 != v49) {
        free(v50);
      }
    }
  }
}

void sub_1CC0B4DC8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(unsigned int *)(v4 + 40);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_3;
    }
    int v11 = 1;
    while (v9 != -4096)
    {
      int v12 = v7 + v11++;
      uint64_t v7 = v12 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_3:
  if (v8 == (uint64_t *)(v5 + 16 * v6)) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t *)v8[1];
  }
  llvm::MemorySSA::renamePass(a1, v10, a3, a4, 1, 1);
}

void llvm::MemorySSAUpdater::insertDef(llvm::MemorySSAUpdater *this, llvm::MemoryDef *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
}

unint64_t sub_1CC0B63B8(uint64_t a1, unint64_t *a2)
{
  if (*(void *)(a1 + 96)) {
    return ((unint64_t)sub_1CD4AB93C((uint64_t **)(a1 + 80), *a2, *a2) << 32) | 1;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unint64_t v3 = *a2;
  if (v2)
  {
    uint64_t v4 = 8 * v2;
    uint64_t v5 = *(void **)a1;
    while (*v5 != v3)
    {
      ++v5;
      v4 -= 8;
      if (!v4) {
        goto LABEL_6;
      }
    }
    if (v4) {
      return 1;
    }
LABEL_6:
    if (v2 <= 7) {
      goto LABEL_7;
    }
    uint64_t v8 = (uint64_t **)(a1 + 80);
    do
    {
      unint64_t v9 = *(void *)(*(void *)a1 + 8 * v2 - 8);
      sub_1CD4AB93C(v8, v9, v9);
      LODWORD(v2) = *(_DWORD *)(a1 + 8) - 1;
      *(_DWORD *)(a1 + 8) = v2;
    }
    while (v2);
    sub_1CD4AB93C(v8, *a2, *a2);
  }
  else
  {
LABEL_7:
    if (v2 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v2) = v3;
    ++*(_DWORD *)(a1 + 8);
  }
  return 0x100000001;
}

void llvm::MemorySSAUpdater::fixupDefs(uint64_t **a1, uint64_t *a2)
{
  v55[16] = *MEMORY[0x1E4F143B8];
  uint64_t v46 = v50;
  int v47 = v50;
  uint64_t v48 = 8;
  int v49 = 0;
  uint64_t v53 = v55;
  uint64_t v54 = 0x1000000000;
  unsigned int v2 = *((_DWORD *)a2 + 2);
  if (!v2) {
    goto LABEL_2;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 24 * v2;
  while (1)
  {
    unint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      if (*(unsigned __int8 *)(v6 + 16) - 25 <= 2) {
        break;
      }
    }
LABEL_29:
    v4 += 24;
    if (v4 == v5) {
      goto LABEL_2;
    }
  }
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = (uint64_t)(*a1 + 9);
  uint64_t v51 = 0;
  uint64_t v52 = v8;
  if (sub_1CBA0E618(v9, &v52, &v51))
  {
    uint64_t v10 = v51;
    uint64_t v11 = v7[9];
    uint64_t v12 = *((unsigned int *)v7 + 22);
  }
  else
  {
    uint64_t v11 = v7[9];
    uint64_t v12 = *((unsigned int *)v7 + 22);
    uint64_t v10 = v11 + 16 * v12;
  }
  if (v10 == v11 + 16 * v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v10 + 8);
  }
  if (*(unsigned char *)(v6 + 16) == 27) {
    sub_1CC0B6A40(a1 + 63, v6);
  }
  uint64_t v14 = *(void *)(v6 + 56);
  if (v14 != v13)
  {
    if (v14) {
      uint64_t v25 = v14 - 48;
    }
    else {
      uint64_t v25 = 0;
    }
    sub_1CC0BCDA4(v25, v6);
    goto LABEL_29;
  }
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(void *)(v15 + 40);
  if (v16 != v15 + 40)
  {
    uint64_t v17 = v16 ? (unsigned __int8 *)(v16 - 24) : 0;
    if (v17[16] - 29 <= 0xA)
    {
      int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v17);
      if (NumSuccessors)
      {
        int v19 = NumSuccessors;
        for (unsigned int i = 0; i != v19; ++i)
        {
          uint64_t Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v17, i);
          uint64_t v22 = (uint64_t)(*a1 + 3);
          uint64_t v51 = 0;
          uint64_t v52 = Successor;
          if ((sub_1CBA0E618(v22, &v52, &v51) & 1) != 0 && (uint64_t v23 = *(void *)(v51 + 8)) != 0)
          {
            sub_1CC0B6AD4(v23, *(void *)(v6 + 64), v6);
          }
          else
          {
            if (v54 >= (unint64_t)HIDWORD(v54)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v53 + v54) = Successor;
            LODWORD(v54) = v54 + 1;
          }
        }
      }
    }
  }
  unsigned int v24 = v54;
  if (!v54) {
    goto LABEL_29;
  }
  while (1)
  {
    uint64_t v45 = v4;
    uint64_t v26 = *((void *)v53 + v24 - 1);
    LODWORD(v54) = v24 - 1;
    BOOL v27 = *a1;
    uint64_t v28 = (uint64_t)(*a1 + 9);
    uint64_t v51 = 0;
    uint64_t v52 = v26;
    if (sub_1CBA0E618(v28, &v52, &v51))
    {
      uint64_t v29 = v51;
      uint64_t v30 = v27[9];
      uint64_t v31 = *((unsigned int *)v27 + 22);
    }
    else
    {
      uint64_t v30 = v27[9];
      uint64_t v31 = *((unsigned int *)v27 + 22);
      uint64_t v29 = v30 + 16 * v31;
    }
    if (v29 != v30 + 16 * v31)
    {
      uint64_t v32 = *(void *)(v29 + 8);
      if (v32) {
        break;
      }
    }
    uint64_t v33 = *(void *)(v26 + 40);
    if (v33 != v26 + 40)
    {
      uint64_t v34 = v33 ? (unsigned __int8 *)(v33 - 24) : 0;
      if (v34[16] - 29 <= 0xA)
      {
        int v35 = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v34);
        if (v35)
        {
          int v36 = v35;
          for (unsigned int j = 0; j != v36; ++j)
          {
            uint64_t v38 = llvm::Instruction::getSuccessor((llvm::Instruction *)v34, j);
            uint64_t v39 = (uint64_t)(*a1 + 3);
            uint64_t v51 = 0;
            uint64_t v52 = v38;
            if ((sub_1CBA0E618(v39, &v52, &v51) & 1) != 0 && (uint64_t v40 = *(void *)(v51 + 8)) != 0)
            {
              sub_1CC0B6AD4(v40, v26, v6);
            }
            else
            {
              sub_1CB89694C((llvm::SmallPtrSetImplBase *)&v46, v38);
              if (v41)
              {
                if (v54 >= (unint64_t)HIDWORD(v54)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v53 + v54) = v38;
                LODWORD(v54) = v54 + 1;
              }
            }
          }
        }
      }
    }
    unsigned int v24 = v54;
    uint64_t v4 = v45;
    if (!v54) {
      goto LABEL_29;
    }
  }
  uint64_t v42 = *(void *)(v32 + 8);
  if (v42) {
    BOOL v43 = (llvm::MemoryAccess *)(v42 - 48);
  }
  else {
    BOOL v43 = 0;
  }
  uint64_t PreviousDef = llvm::MemorySSAUpdater::getPreviousDef((llvm::MemorySSAUpdater *)a1, v43);
  sub_1CC0BCDA4((uint64_t)v43, PreviousDef);
LABEL_2:
  if (v53 != v55) {
    free(v53);
  }
  if (v47 != v46) {
    free(v47);
  }
}

unsigned int *sub_1CC0B68E8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  uint64_t v4 = result[2];
  if (v3 + v4 > result[3])
  {
    uint64_t v15 = result;
    uint64_t v13 = a3;
    uint64_t v14 = a2;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
    sub_1CC0BD844(result, v3 + v4);
    LODWORD(v3) = v12;
    a3 = v13;
    a2 = v14;
    uint64_t result = v15;
    LODWORD(v4) = v15[2];
  }
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)result + 24 * v4;
    do
    {
      uint64_t v7 = (unint64_t *)(v6 + v5);
      *uint64_t v7 = 4;
      v7[1] = 0;
      unint64_t v8 = *(void *)(a2 + v5 + 16);
      uint64_t v7[2] = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        unint64_t v10 = *(void *)(a2 + v5) & 0xFFFFFFFFFFFFFFF8;
        v7[1] = *(void *)v10;
        *(void *)unint64_t v10 = v7;
        *uint64_t v7 = v10 | 4;
        uint64_t v11 = (uint64_t *)v7[1];
        if (v11) {
          *uint64_t v11 = *v11 & 7 | (v6 + 8 + v5);
        }
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
  }
  result[2] = v4 + v3;
  return result;
}

int32x2_t ****llvm::MemorySSAUpdater::tryRemoveTrivialPhis(int32x2_t ****result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = (llvm::MemorySSAUpdater *)result;
    uint64_t v4 = 24 * a3;
    uint64_t v5 = (_DWORD **)(a2 + 16);
    do
    {
      if (*v5) {
        uint64_t result = llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v3, *v5);
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

uint64_t **sub_1CC0B6A40(uint64_t **result, unint64_t a2)
{
  unsigned int v2 = result;
  if (result[12])
  {
    uint64_t v7 = (uint64_t)(result + 10);
    return (uint64_t **)sub_1CD4ABA00(v7, a2);
  }
  else
  {
    uint64_t v3 = *((unsigned int *)result + 2);
    if (v3)
    {
      uint64_t result = (uint64_t **)*result;
      size_t v4 = 8 * v3 - 8;
      uint64_t v5 = *v2;
      while (1)
      {
        uint64_t v6 = *v5++;
        if (v6 == a2) {
          break;
        }
        v4 -= 8;
        uint64_t result = (uint64_t **)v5;
        if (v4 == -8) {
          return result;
        }
      }
      if (v4) {
        uint64_t result = (uint64_t **)memmove(result, result + 1, v4);
      }
      *((_DWORD *)v2 + 2) = v3 - 1;
    }
  }
  return result;
}

uint64_t sub_1CC0B6AD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  uint64_t v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = result - 32 * v4;
      if ((v3 & 0x40000000) != 0) {
        uint64_t v6 = *(void *)(result - 8);
      }
      if (*(void *)(v6 + 32 * *(unsigned int *)(result + 76) + 8 * v5) == a2) {
        break;
      }
      if (v4 == ++v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v5) = -1;
  }
  if ((v3 & 0x40000000) != 0)
  {
    uint64_t v8 = *(void *)(result - 8);
    uint64_t v7 = v4;
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = result - 32 * v4;
  }
  if (v7 != (int)v5)
  {
    uint64_t v9 = v8 + 32 * *(unsigned int *)(result + 76);
    uint64_t v5 = (int)v5;
    unint64_t v10 = (void *)(a3 + 8);
    uint64_t v11 = 8 * v7 - 8 * (int)v5;
    do
    {
      if (*(void *)(v9 + 8 * v5) != a2) {
        break;
      }
      int v12 = *(_DWORD *)(result + 20);
      if ((v12 & 0x40000000) != 0) {
        uint64_t v13 = *(void *)(result - 8);
      }
      else {
        uint64_t v13 = result - 32 * (v12 & 0x7FFFFFF);
      }
      uint64_t v14 = v13 + 32 * v5;
      if (*(void *)v14)
      {
        **(void **)(v14 + 16) = *(void *)(v14 + 8);
        uint64_t v16 = *(void *)(v14 + 8);
        if (v16) {
          *(void *)(v16 + 16) = *(void *)(v14 + 16);
        }
      }
      *(void *)uint64_t v14 = a3;
      uint64_t v15 = *(void *)(a3 + 8);
      *(void *)(v14 + 8) = v15;
      if (v15) {
        *(void *)(v15 + 16) = v14 + 8;
      }
      *(void *)(v13 + 32 * v5 + 16) = v10;
      *unint64_t v10 = v14;
      ++v5;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

int32x2_t ****llvm::MemorySSAUpdater::removeEdge(int32x2_t ****this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3 = *((_DWORD *)*this + 10);
  if (v3)
  {
    uint64_t v4 = (llvm::MemorySSAUpdater *)this;
    uint64_t v5 = (*this)[3];
    unsigned int v6 = v3 - 1;
    uint64_t v7 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v8 = (llvm::BasicBlock *)v5[2 * v7];
    if (v8 == a3)
    {
LABEL_6:
      uint64_t v11 = v5[2 * v7 + 1];
      if (v11)
      {
        int v12 = &v13;
        uint64_t v13 = a2;
        sub_1CC0BCE8C((uint64_t)v11, &v12);
        return llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v4, v11);
      }
    }
    else
    {
      int v9 = 1;
      while (v8 != (llvm::BasicBlock *)-4096)
      {
        int v10 = v7 + v9++;
        uint64_t v7 = v10 & v6;
        uint64_t v8 = (llvm::BasicBlock *)v5[2 * v7];
        if (v8 == a3) {
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

uint64_t *llvm::MemorySSAUpdater::cloneUsesAndDefs(uint64_t *result, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = result;
  uint64_t v10 = *(void *)(*result + 48);
  uint64_t v11 = *(unsigned int *)(*result + 64);
  if (!v11)
  {
LABEL_7:
    uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
    goto LABEL_8;
  }
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
  uint64_t v14 = *v13;
  if (*v13 != a2)
  {
    int v15 = 1;
    while (v14 != -4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      uint64_t v14 = *(void *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v13 != (uint64_t *)(v10 + 16 * v11))
  {
    uint64_t v17 = v13[1];
    if (v17)
    {
      for (uint64_t i = *(void *)(v17 + 8); i != v17; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v19 = i - 32;
        if (!i) {
          uint64_t v19 = 0;
        }
        unsigned int v20 = *(unsigned __int8 *)(v19 + 16) - 27;
        if (v20 >= 0xFFFFFFFE) {
          uint64_t v21 = v19;
        }
        else {
          uint64_t v21 = 0;
        }
        if (!i || v20 < 0xFFFFFFFE) {
          continue;
        }
        uint64_t v22 = *(void *)a4;
        uint64_t v23 = *(unsigned int *)(a4 + 16);
        if (v23)
        {
          uint64_t v24 = *(void *)(v21 + 72);
          uint64_t v25 = (v23 - 1) & ((v24 >> 4) ^ (v24 >> 9));
          uint64_t v26 = (void *)(v22 + (v25 << 6));
          uint64_t v27 = v26[3];
          if (v24 == v27) {
            goto LABEL_25;
          }
          int v28 = 1;
          while (v27 != -4096)
          {
            int v29 = v25 + v28++;
            uint64_t v25 = v29 & (v23 - 1);
            uint64_t v26 = (void *)(v22 + (v25 << 6));
            uint64_t v27 = v26[3];
            if (v24 == v27) {
              goto LABEL_25;
            }
          }
        }
        uint64_t v26 = (void *)(v22 + (v23 << 6));
LABEL_25:
        uint64_t v52 = 6;
        if (v26 == (void *)(v22 + (v23 << 6)))
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v34 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = (int32x2_t ****)v26[7];
          uint64_t v53 = 0;
          uint64_t v54 = v31;
          if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31 != 0)
          {
            unint64_t v33 = v26[5] & 0xFFFFFFFFFFFFFFF8;
            uint64_t v53 = *(unint64_t **)v33;
            *(void *)unint64_t v33 = &v52;
            uint64_t v52 = v33 | 6;
            uint64_t v30 = v53;
            if (v53) {
              *uint64_t v53 = *v53 & 7 | (unint64_t)&v53;
            }
            uint64_t v31 = v54;
          }
          if (v31)
          {
            if (*((unsigned __int8 *)v31 + 16) <= 0x1Bu) {
              uint64_t v34 = 0;
            }
            else {
              uint64_t v34 = (uint64_t)v31;
            }
          }
          else
          {
            uint64_t v34 = 0;
          }
        }
        if (v31 == (int32x2_t ****)-8192 || v31 == (int32x2_t ****)-4096 || !v31) {
          goto LABEL_53;
        }
        unint64_t v35 = v52 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v52 & 0xFFFFFFFFFFFFFFF8) = v30;
        if (!v53)
        {
          int v36 = v54;
          int v37 = ***v54;
          unint64_t v38 = (unint64_t)v37[303];
          if (v38 <= v35)
          {
            uint64_t v39 = v37[305].u32[0];
            if (v38 + 16 * v39 > v35)
            {
              unsigned int v40 = v39 - 1;
              LODWORD(v41) = v40 & ((v54 >> 4) ^ (v54 >> 9));
              uint64_t v42 = (int32x2_t *****)(v38 + 16 * v41);
              BOOL v43 = *v42;
              if (v54 == *v42)
              {
LABEL_51:
                *uint64_t v42 = (int32x2_t ****)-8192;
                v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                int v36 = v54;
              }
              else
              {
                int v44 = 1;
                while (v43 != (int32x2_t ****)-4096)
                {
                  int v45 = v41 + v44++;
                  uint64_t v41 = v45 & v40;
                  BOOL v43 = *(int32x2_t *****)(v38 + 16 * v41);
                  if (v54 == v43)
                  {
                    uint64_t v42 = (int32x2_t *****)(v38 + 16 * v41);
                    goto LABEL_51;
                  }
                }
              }
              *((unsigned char *)v36 + 17) &= ~1u;
            }
          }
LABEL_53:
          if (v34) {
            goto LABEL_54;
          }
          continue;
        }
        *uint64_t v53 = *v53 & 7 | v35;
        if (v34)
        {
LABEL_54:
          uint64_t v46 = (uint64_t *)*v9;
          if (*(unsigned char *)(v21 + 16) == 25) {
            uint64_t v47 = v21;
          }
          else {
            uint64_t v47 = 0;
          }
          if (v47) {
            uint64_t v48 = (uint64_t *)(v47 - 32);
          }
          else {
            uint64_t v48 = (uint64_t *)(v21 - 64);
          }
          uint64_t v49 = sub_1CC0B70D4(*v48, (uint64_t *)a4, a5, a6, *v9);
          if (a6) {
            uint64_t v50 = 0;
          }
          else {
            uint64_t v50 = v21;
          }
          uint64_t result = (uint64_t *)llvm::MemorySSA::createDefinedAccess(v46, v34, v49, v50);
          if (result) {
            uint64_t result = (uint64_t *)llvm::MemorySSA::insertIntoListsForBlock(*v9, (uint64_t)result, a3, 1);
          }
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1CC0B7008(unint64_t *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
    uint64_t v5 = (void *)(a2 + (v4 << 6));
    uint64_t v6 = v5[3];
    if (v6 == a4) {
      goto LABEL_6;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (a3 - 1);
      uint64_t v5 = (void *)(a2 + (v4 << 6));
      uint64_t v6 = v5[3];
      if (v6 == a4) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v5 = (void *)(a2 + ((unint64_t)a3 << 6));
LABEL_6:
  *uint64_t result = 6;
  unint64_t v9 = (unint64_t)(result + 1);
  if (v5 == (void *)(a2 + ((unint64_t)a3 << 6)))
  {
    *(void *)unint64_t v9 = 0;
    result[2] = 0;
  }
  else
  {
    unint64_t v10 = v5[7];
    result[1] = 0;
    result[2] = v10;
    if (v10 != -8192 && v10 != -4096 && v10 != 0)
    {
      unint64_t v12 = v5[5] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v13 = *(unint64_t **)v12;
      result[1] = *(void *)v12;
      *(void *)unint64_t v12 = result;
      *uint64_t result = v12 | 6;
      if (v13) {
        *uint64_t v13 = *v13 & 7 | v9;
      }
    }
  }
  return result;
}

uint64_t sub_1CC0B70D4(uint64_t result, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (!result || *(unsigned char *)(result + 16) != 26)
  {
    uint64_t v40 = 0;
    int v14 = sub_1CC0BDF44(a3, result, &v40);
    uint64_t v15 = 0;
    if (v14) {
      uint64_t v15 = *(void *)(v40 + 8);
    }
    if (v15) {
      return v15;
    }
    else {
      return v5;
    }
  }
  if (*(void *)(a5 + 96) == result) {
    return result;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned int *)a2 + 4);
  if (v7)
  {
    uint64_t v8 = *(void *)(result + 72);
    uint64_t v9 = (v7 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    unint64_t v10 = (void *)(v6 + (v9 << 6));
    uint64_t v11 = v10[3];
    if (v8 == v11) {
      goto LABEL_16;
    }
    int v12 = 1;
    while (v11 != -4096)
    {
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v7 - 1);
      unint64_t v10 = (void *)(v6 + (v9 << 6));
      uint64_t v11 = v10[3];
      if (v8 == v11) {
        goto LABEL_16;
      }
    }
  }
  unint64_t v10 = (void *)(v6 + (v7 << 6));
LABEL_16:
  uint64_t v40 = 6;
  if (v10 == (void *)(v6 + (v7 << 6)))
  {
    int v16 = 0;
    unint64_t v19 = 0;
    uint64_t v17 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    int v16 = 0;
    uint64_t v17 = (int32x2_t ****)v10[7];
    uint64_t v41 = 0;
    uint64_t v42 = v17;
    if (v17 == (int32x2_t ****)-8192 || (v17 != (int32x2_t ****)-4096 ? (BOOL v18 = v17 == 0) : (BOOL v18 = 1), v18))
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = v10[5] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = *(unint64_t **)v19;
      int v16 = v41;
      *(void *)unint64_t v19 = &v40;
      uint64_t v40 = v19 | 6;
      if (v16) {
        *int v16 = *v16 & 7 | (unint64_t)&v41;
      }
    }
  }
  if (v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17 != 0)
  {
    *(void *)unint64_t v19 = v16;
    if (v41)
    {
      *uint64_t v41 = *v41 & 7 | v19;
    }
    else
    {
      uint64_t v30 = v42;
      uint64_t v31 = ***v42;
      unint64_t v32 = (unint64_t)v31[303];
      if (v32 <= v19)
      {
        uint64_t v33 = v31[305].u32[0];
        if (v32 + 16 * v33 > v19)
        {
          unsigned int v34 = v33 - 1;
          LODWORD(v35) = v34 & ((v42 >> 4) ^ (v42 >> 9));
          int v36 = (int32x2_t *****)(v32 + 16 * v35);
          int v37 = *v36;
          if (v42 == *v36)
          {
LABEL_56:
            *int v36 = (int32x2_t ****)-8192;
            v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v30 = v42;
          }
          else
          {
            int v38 = 1;
            while (v37 != (int32x2_t ****)-4096)
            {
              int v39 = v35 + v38++;
              uint64_t v35 = v39 & v34;
              int v37 = *(int32x2_t *****)(v32 + 16 * v35);
              if (v42 == v37)
              {
                int v36 = (int32x2_t *****)(v32 + 16 * v35);
                goto LABEL_56;
              }
            }
          }
          *((unsigned char *)v30 + 17) &= ~1u;
        }
      }
    }
  }
  if (v17)
  {
    int v21 = *(_DWORD *)(a5 + 40);
    if (v21)
    {
      uint64_t v22 = *(void *)(a5 + 24);
      unsigned int v23 = v21 - 1;
      uint64_t v24 = (v21 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      uint64_t v25 = *(int32x2_t *****)(v22 + 16 * v24);
      if (v17 == v25)
      {
LABEL_37:
        uint64_t result = *(void *)(v22 + 16 * v24 + 8);
LABEL_40:
        if (a4 && (!result || *(unsigned char *)(result + 16) == 25))
        {
          uint64_t v28 = *(void *)(v5 + 48);
          if (v28) {
            uint64_t v29 = v28 - 48;
          }
          else {
            uint64_t v29 = 0;
          }
          return sub_1CC0B70D4(v29);
        }
        return result;
      }
      int v26 = 1;
      while (v25 != (int32x2_t ****)-4096)
      {
        int v27 = v24 + v26++;
        uint64_t v24 = v27 & v23;
        uint64_t v25 = *(int32x2_t *****)(v22 + 16 * v24);
        if (v17 == v25) {
          goto LABEL_37;
        }
      }
    }
    uint64_t result = 0;
    goto LABEL_40;
  }
  return result;
}

int32x2_t ****llvm::MemorySSAUpdater::updatePhisWhenInsertingUniqueBackedgeBlock(int32x2_t *****this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  uint64_t result = *this;
  int v6 = *((_DWORD *)result + 10);
  if (v6)
  {
    uint64_t v8 = result[3];
    unsigned int v9 = v6 - 1;
    uint64_t v10 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v11 = (llvm::BasicBlock *)v8[2 * v10];
    if (v11 == a2)
    {
LABEL_6:
      uint64_t v14 = (uint64_t)v8[2 * v10 + 1];
      if (v14)
      {
        uint64_t v82 = (llvm::MemorySSAUpdater *)this;
        MemoryPhuint64_t i = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)result, a4);
        int v16 = *(_DWORD *)(v14 + 20);
        uint64_t v17 = v16 & 0x7FFFFFF;
        if ((v16 & 0x7FFFFFF) != 0)
        {
          uint64_t v18 = 0;
          unint64_t v85 = a3;
          uint64_t v86 = v14;
          uint64_t v84 = v16 & 0x7FFFFFF;
          do
          {
            int v19 = *(_DWORD *)(v14 + 20);
            if ((v19 & 0x40000000) != 0) {
              uint64_t v20 = *(void *)(v14 - 8);
            }
            else {
              uint64_t v20 = v14 - 32 * (v19 & 0x7FFFFFF);
            }
            int v21 = *(llvm::BasicBlock **)(v20 + 32 * *(unsigned int *)(v14 + 76) + 8 * v18);
            if (v21 != a3)
            {
              uint64_t v22 = *(void *)(v20 + 32 * v18);
              int v23 = *((_DWORD *)MemoryPhi + 5);
              uint64_t v24 = v23 & 0x7FFFFFF;
              if ((v23 & 0x7FFFFFF) == *((_DWORD *)MemoryPhi + 19))
              {
                unsigned int v25 = v24 + (v24 >> 1);
                if (v25 <= 2) {
                  uint64_t v26 = 2;
                }
                else {
                  uint64_t v26 = v25;
                }
                *((_DWORD *)MemoryPhi + 19) = v26;
                if ((v23 & 0x40000000) != 0) {
                  int v27 = (uint64_t *)*((void *)MemoryPhi - 1);
                }
                else {
                  int v27 = (uint64_t *)&MemoryPhi[-32 * v24];
                }
                uint64_t v28 = operator new(40 * v26);
                *((void *)MemoryPhi - 1) = v28;
                uint64_t v29 = v28;
                do
                {
                  *uint64_t v29 = 0;
                  v29[1] = 0;
                  void v29[2] = 0;
                  void v29[3] = MemoryPhi;
                  v29 += 4;
                }
                while (v29 != &v28[4 * v26]);
                int v30 = *((_DWORD *)MemoryPhi + 5);
                if ((v30 & 0x40000000) != 0) {
                  uint64_t v31 = (uint64_t)v28;
                }
                else {
                  uint64_t v31 = (uint64_t)&MemoryPhi[-32 * (v30 & 0x7FFFFFF)];
                }
                sub_1CC5E4108((uint64_t)&v87, v27, &v27[4 * v24], v31);
                if (v24)
                {
                  memmove((void *)(v31 + 32 * v26), &v27[4 * v24], 8 * v24);
                  uint64_t v32 = 4 * v24;
                  do
                  {
                    uint64_t v33 = &v27[v32];
                    if (v27[v32 - 4])
                    {
                      *(void *)*(v33 - 2) = *(v33 - 3);
                      uint64_t v34 = *(v33 - 3);
                      if (v34) {
                        *(void *)(v34 + 16) = *(v33 - 2);
                      }
                    }
                    v32 -= 4;
                  }
                  while (v32 * 8);
                }
                operator delete(v27);
                int v23 = *((_DWORD *)MemoryPhi + 5);
                a3 = v85;
                uint64_t v14 = v86;
                uint64_t v17 = v84;
              }
              uint64_t v35 = (v23 + 1) & 0x7FFFFFF;
              *((_DWORD *)MemoryPhi + 5) = v23 & 0xF8000000 | (v23 + 1) & 0x7FFFFFF;
              if ((v23 & 0x40000000) != 0) {
                int v36 = (char *)*((void *)MemoryPhi - 1);
              }
              else {
                int v36 = &MemoryPhi[-32 * v35];
              }
              uint64_t v37 = (v35 - 1);
              int v38 = &v36[32 * v37];
              if (*(void *)v38)
              {
                **((void **)v38 + 2) = *((void *)v38 + 1);
                uint64_t v46 = *((void *)v38 + 1);
                if (v46) {
                  *(void *)(v46 + 16) = *((void *)v38 + 2);
                }
              }
              *(void *)int v38 = v22;
              if (v22)
              {
                uint64_t v41 = *(void *)(v22 + 8);
                uint64_t v40 = (char **)(v22 + 8);
                uint64_t v39 = v41;
                uint64_t v42 = &v36[32 * v37];
                *((void *)v42 + 1) = v41;
                if (v41) {
                  *(void *)(v39 + 16) = v42 + 8;
                }
                *((void *)v42 + 2) = v40;
                *uint64_t v40 = v38;
              }
              int v43 = *((_DWORD *)MemoryPhi + 5);
              uint64_t v44 = v43 & 0x7FFFFFF;
              if ((v43 & 0x40000000) != 0) {
                int v45 = (char *)*((void *)MemoryPhi - 1);
              }
              else {
                int v45 = &MemoryPhi[-32 * v44];
              }
              *(void *)&v45[32 * *((unsigned int *)MemoryPhi + 19) + 8 * (v44 - 1)] = v21;
            }
            ++v18;
          }
          while (v18 != v17);
        }
        uint64_t v47 = sub_1CC0B78E8(v14, (uint64_t)a3);
        int v48 = *(_DWORD *)(v14 + 20);
        if ((v48 & 0x40000000) != 0) {
          uint64_t v49 = *(void *)(v14 - 8);
        }
        else {
          uint64_t v49 = v14 - 32 * (v48 & 0x7FFFFFF);
        }
        if (*(void *)v49)
        {
          **(void **)(v49 + 16) = *(void *)(v49 + 8);
          uint64_t v80 = *(void *)(v49 + 8);
          if (v80) {
            *(void *)(v80 + 16) = *(void *)(v49 + 16);
          }
        }
        *(void *)uint64_t v49 = v47;
        if (v47)
        {
          uint64_t v52 = *(void *)(v47 + 8);
          uint64_t v50 = (uint64_t *)(v47 + 8);
          uint64_t v51 = v52;
          *(void *)(v49 + 8) = v52;
          if (v52) {
            *(void *)(v51 + 16) = v49 + 8;
          }
          *(void *)(v49 + 16) = v50;
          uint64_t *v50 = v49;
        }
        int v53 = *(_DWORD *)(v14 + 20);
        if ((v53 & 0x40000000) != 0) {
          uint64_t v54 = *(void *)(v14 - 8);
        }
        else {
          uint64_t v54 = v14 - 32 * (v53 & 0x7FFFFFF);
        }
        uint64_t v55 = *(unsigned int *)(v14 + 76);
        *(void *)(v54 + 32 * v55) = a3;
        int v56 = *(_DWORD *)(v14 + 20);
        unsigned int v57 = v56 & 0x7FFFFFF;
        unsigned int v58 = (v56 & 0x7FFFFFF) - 1;
        if ((v56 & 0x7FFFFFF) != 1)
        {
          do
            sub_1CC0B7954(v14, v58--);
          while (v58);
          int v56 = *(_DWORD *)(v14 + 20);
          LODWORD(v55) = *(_DWORD *)(v14 + 76);
          unsigned int v57 = v56 & 0x7FFFFFF;
        }
        if (v57 == v55)
        {
          unsigned int v59 = v57 + (v57 >> 1);
          if (v59 <= 2) {
            uint64_t v60 = 2;
          }
          else {
            uint64_t v60 = v59;
          }
          *(_DWORD *)(v14 + 76) = v60;
          uint64_t v61 = v56 & 0x7FFFFFF;
          if ((v56 & 0x40000000) != 0) {
            int64x2_t v62 = *(uint64_t **)(v14 - 8);
          }
          else {
            int64x2_t v62 = (uint64_t *)(v14 - 32 * v61);
          }
          int64x2_t v63 = operator new(40 * v60);
          *(void *)(v14 - 8) = v63;
          uint64_t v64 = v63;
          do
          {
            *uint64_t v64 = 0;
            v64[1] = 0;
            v64[2] = 0;
            v64[3] = v14;
            v64 += 4;
          }
          while (v64 != &v63[4 * v60]);
          int v65 = *(_DWORD *)(v14 + 20);
          if ((v65 & 0x40000000) != 0) {
            uint64_t v66 = (uint64_t)v63;
          }
          else {
            uint64_t v66 = v14 - 32 * (v65 & 0x7FFFFFF);
          }
          sub_1CC5E4108((uint64_t)&v88, v62, &v62[4 * v61], v66);
          if (v61)
          {
            memmove((void *)(v66 + 32 * v60), &v62[4 * v61], 8 * v61);
            uint64_t v67 = 4 * v61;
            do
            {
              uint64_t v68 = &v62[v67];
              if (v62[v67 - 4])
              {
                *(void *)*(v68 - 2) = *(v68 - 3);
                uint64_t v69 = *(v68 - 3);
                if (v69) {
                  *(void *)(v69 + 16) = *(v68 - 2);
                }
              }
              v67 -= 4;
            }
            while (v67 * 8);
          }
          operator delete(v62);
          int v56 = *(_DWORD *)(v14 + 20);
        }
        uint64_t v70 = (v56 + 1) & 0x7FFFFFF;
        *(_DWORD *)(v14 + 20) = v56 & 0xF8000000 | (v56 + 1) & 0x7FFFFFF;
        uint64_t v71 = (v70 - 1);
        if ((v56 & 0x40000000) != 0) {
          uint64_t v72 = *(void *)(v14 - 8);
        }
        else {
          uint64_t v72 = v14 - 32 * v70;
        }
        uint64_t v73 = v72 + 32 * v71;
        if (*(void *)v73)
        {
          **(void **)(v73 + 16) = *(void *)(v73 + 8);
          uint64_t v81 = *(void *)(v73 + 8);
          if (v81) {
            *(void *)(v81 + 16) = *(void *)(v73 + 16);
          }
        }
        *(void *)uint64_t v73 = MemoryPhi;
        if (MemoryPhi)
        {
          uint64_t v74 = (uint64_t *)(MemoryPhi + 8);
          uint64_t v75 = *((void *)MemoryPhi + 1);
          uint64_t v76 = v72 + 32 * v71;
          *(void *)(v76 + 8) = v75;
          if (v75) {
            *(void *)(v75 + 16) = v76 + 8;
          }
          *(void *)(v76 + 16) = v74;
          *uint64_t v74 = v73;
        }
        int v77 = *(_DWORD *)(v14 + 20);
        uint64_t v78 = v77 & 0x7FFFFFF;
        if ((v77 & 0x40000000) != 0) {
          uint64_t v79 = *(void *)(v14 - 8);
        }
        else {
          uint64_t v79 = v14 - 32 * v78;
        }
        *(void *)(v79 + 32 * *(unsigned int *)(v14 + 76) + 8 * (v78 - 1)) = a4;
        return llvm::MemorySSAUpdater::tryRemoveTrivialPhi(v82, MemoryPhi);
      }
    }
    else
    {
      int v12 = 1;
      while (v11 != (llvm::BasicBlock *)-4096)
      {
        int v13 = v10 + v12++;
        uint64_t v10 = v13 & v9;
        uint64_t v11 = (llvm::BasicBlock *)v8[2 * v10];
        if (v11 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC0B78E8(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0) {
        uint64_t v5 = *(void *)(a1 - 8);
      }
      if (*(void *)(v5 + 32 * *(unsigned int *)(a1 + 76) + 8 * v4) == a2) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0) {
    uint64_t v6 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v6 = a1 - 32 * v3;
  }
  return *(void *)(v6 + 32 * v4);
}

uint64_t sub_1CC0B7954(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 20);
  uint64_t v3 = (v2 & 0x7FFFFFFu) - 1;
  if ((v2 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v2 & 0x7FFFFFF);
  }
  uint64_t v5 = *(void *)(v4 + 32 * v3);
  uint64_t v6 = v4 + 32 * a2;
  if (*(void *)v6)
  {
    **(void **)(v6 + 16) = *(void *)(v6 + 8);
    uint64_t v20 = *(void *)(v6 + 8);
    if (v20) {
      *(void *)(v20 + 16) = *(void *)(v6 + 16);
    }
  }
  *(void *)uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    uint64_t v7 = (void *)(v5 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    *uint64_t v7 = v6;
  }
  int v11 = *(_DWORD *)(result + 20);
  if ((v11 & 0x40000000) != 0) {
    uint64_t v12 = *(void *)(result - 8);
  }
  else {
    uint64_t v12 = result - 32 * (v11 & 0x7FFFFFF);
  }
  uint64_t v13 = *(unsigned int *)(result + 76);
  *(void *)(v12 + 32 * v13 + 8 * a2) = *(void *)(v12 + 32 * v13 + 8 * v3);
  int v14 = *(_DWORD *)(result + 20);
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(result - 8);
  }
  else {
    uint64_t v15 = result - 32 * (v14 & 0x7FFFFFF);
  }
  uint64_t v16 = v15 + 32 * v3;
  if (*(void *)v16)
  {
    **(void **)(v16 + 16) = *(void *)(v16 + 8);
    uint64_t v17 = *(void *)(v16 + 8);
    if (v17) {
      *(void *)(v17 + 16) = *(void *)(v16 + 16);
    }
  }
  *(void *)uint64_t v16 = 0;
  int v18 = *(_DWORD *)(result + 20);
  if ((v18 & 0x40000000) != 0) {
    uint64_t v19 = *(void *)(result - 8);
  }
  else {
    uint64_t v19 = result - 32 * (v18 & 0x7FFFFFF);
  }
  *(void *)(v19 + 32 * v13 + 8 * v3) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF8000000 | (*(_DWORD *)(result + 20) - 1) & 0x7FFFFFF;
  return result;
}

uint64_t llvm::MemorySSAUpdater::updateForClonedLoop(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6 = a6;
  uint64_t v8 = (llvm::BasicBlock *)a3;
  v230 = (uint64_t *)result;
  v247[9] = *MEMORY[0x1E4F143B8];
  v247[0] = 1;
  for (uint64_t i = 1; i != 9; i += 2)
    v247[i] = -4096;
  int v11 = *(void ***)(a2 + 32);
  uint64_t v10 = *(void ***)(a2 + 40);
  v240 = v10;
  v241 = v10;
  uint64_t v12 = (llvm::BasicBlock *)(a3 + 8 * a4);
  uint64_t v242 = a3;
  v243 = v11;
  v244 = v11;
  v245 = v12;
  for (uint64_t j = a3; ; uint64_t j = v242)
  {
    if (v10 == v11 && (llvm::BasicBlock *)j == v12)
    {
      BOOL v14 = v244 == v11 && v245 == v12;
      if (v14) {
        break;
      }
    }
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = (uint64_t *)(*(uint64_t (**)(void ***))((char *)&off_1F2605D00 + v15))(&v240);
      v15 += 16;
    }
    while (!v16);
    uint64_t v17 = *v16;
    uint64_t v18 = *(void *)a5;
    uint64_t v19 = *(unsigned int *)(a5 + 16);
    unsigned int v20 = *v16 >> 4;
    if (v19)
    {
      uint64_t v21 = (v19 - 1) & (v20 ^ (v17 >> 9));
      uint64_t v22 = (void *)(v18 + (v21 << 6));
      uint64_t v23 = v22[3];
      if (v17 == v23) {
        goto LABEL_19;
      }
      int v24 = 1;
      while (v23 != -4096)
      {
        int v25 = v21 + v24++;
        uint64_t v21 = v25 & (v19 - 1);
        uint64_t v22 = (void *)(v18 + (v21 << 6));
        uint64_t v23 = v22[3];
        if (v17 == v23) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v22 = (void *)(v18 + (v19 << 6));
LABEL_19:
    uint64_t v231 = 6;
    if (v22 == (void *)(v18 + (v19 << 6)))
    {
      uint64_t v26 = 0;
      int v27 = 0;
      v232 = 0;
      v233 = 0;
    }
    else
    {
      uint64_t v26 = 0;
      int v27 = (llvm::BasicBlock *)v22[7];
      v232 = 0;
      v233 = v27;
      if (v27 != (llvm::BasicBlock *)-8192 && v27 != (llvm::BasicBlock *)-4096 && v27 != 0)
      {
        unint64_t v29 = v22[5] & 0xFFFFFFFFFFFFFFF8;
        v232 = *(unint64_t **)v29;
        *(void *)unint64_t v29 = &v231;
        uint64_t v231 = v29 | 6;
        uint64_t v26 = v232;
        if (v232) {
          unint64_t *v232 = *v232 & 7 | (unint64_t)&v232;
        }
        int v27 = v233;
      }
    }
    if (v27 != (llvm::BasicBlock *)-8192 && v27 != (llvm::BasicBlock *)-4096 && v27 != 0)
    {
      unint64_t v41 = v231 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v231 & 0xFFFFFFFFFFFFFFF8) = v26;
      if (v232)
      {
        unint64_t *v232 = *v232 & 7 | v41;
      }
      else
      {
        uint64_t v42 = v233;
        int v43 = ***(int32x2_t ****)v233;
        unint64_t v44 = (unint64_t)v43[303];
        if (v44 <= v41)
        {
          uint64_t v45 = v43[305].u32[0];
          if (v44 + 16 * v45 > v41)
          {
            unsigned int v46 = v45 - 1;
            LODWORD(v47) = v46 & ((v233 >> 4) ^ (v233 >> 9));
            int v48 = (llvm::BasicBlock **)(v44 + 16 * v47);
            uint64_t v49 = *v48;
            if (v233 == *v48)
            {
LABEL_57:
              *int v48 = (llvm::BasicBlock *)-8192;
              v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v42 = v233;
            }
            else
            {
              int v50 = 1;
              while (v49 != (llvm::BasicBlock *)-4096)
              {
                int v51 = v47 + v50++;
                uint64_t v47 = v51 & v46;
                uint64_t v49 = *(llvm::BasicBlock **)(v44 + 16 * v47);
                if (v233 == v49)
                {
                  int v48 = (llvm::BasicBlock **)(v44 + 16 * v47);
                  goto LABEL_57;
                }
              }
            }
            *((unsigned char *)v42 + 17) &= ~1u;
          }
        }
      }
    }
    if (v27)
    {
      uint64_t v231 = 0;
      uint64_t v31 = (llvm::MemorySSA *)*v230;
      int v32 = *(_DWORD *)(*v230 + 40);
      if (v32)
      {
        uint64_t v33 = *((void *)v31 + 3);
        unsigned int v34 = v32 - 1;
        uint64_t v35 = v34 & (v20 ^ (v17 >> 9));
        uint64_t v36 = *(void *)(v33 + 16 * v35);
        if (v17 == v36)
        {
LABEL_41:
          uint64_t v231 = *(void *)(v33 + 16 * v35 + 8);
          if (v231)
          {
            MemoryPhuint64_t i = llvm::MemorySSA::createMemoryPhi(v31, v27);
            sub_1CC0BDFF0(v247, &v231)[1] = MemoryPhi;
            char v6 = a6;
          }
        }
        else
        {
          int v37 = 1;
          while (v36 != -4096)
          {
            int v38 = v35 + v37++;
            uint64_t v35 = v38 & v34;
            uint64_t v36 = *(void *)(v33 + 16 * v35);
            if (v17 == v36) {
              goto LABEL_41;
            }
          }
        }
      }
      llvm::MemorySSAUpdater::cloneUsesAndDefs(v230, v17, v27, a5, (uint64_t)v247, 0);
    }
    uint64_t v40 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void ***))((char *)&off_1F2605CE0 + v40))(&v240);
      if (result) {
        break;
      }
      BOOL v14 = v40 == 16;
      v40 += 16;
    }
    while (!v14);
    uint64_t v10 = v241;
  }
  int v53 = *(unint64_t **)(a2 + 32);
  uint64_t v52 = *(unint64_t **)(a2 + 40);
  uint64_t v231 = (uint64_t)v52;
  v232 = v52;
  v233 = v8;
  v234 = v53;
  v235 = v53;
  v236 = v12;
  uint64_t v220 = v53;
  while (2)
  {
    if (v52 != v53 || v8 != v12 || (v235 == v53 ? (BOOL v54 = v236 == v12) : (BOOL v54 = 0), !v54))
    {
      uint64_t v55 = 0;
      do
      {
        int v56 = (void *)(*(uint64_t (**)(uint64_t *))((char *)&off_1F2605D00 + v55))(&v231);
        v55 += 16;
      }
      while (!v56);
      int v57 = *(_DWORD *)(*v230 + 40);
      if (v57)
      {
        uint64_t v58 = *(void *)(*v230 + 24);
        unsigned int v59 = v57 - 1;
        uint64_t v60 = ((*v56 >> 4) ^ (*v56 >> 9)) & (v57 - 1);
        uint64_t v61 = *(void *)(v58 + 16 * (((*v56 >> 4) ^ (*v56 >> 9)) & v59));
        if (*v56 != v61)
        {
          int v62 = 1;
          while (v61 != -4096)
          {
            int v63 = v60 + v62++;
            uint64_t v60 = v63 & v59;
            uint64_t v61 = *(void *)(v58 + 16 * v60);
            if (*v56 == v61) {
              goto LABEL_74;
            }
          }
          goto LABEL_312;
        }
LABEL_74:
        uint64_t v64 = *(void *)(v58 + 16 * v60 + 8);
        if (v64)
        {
          v240 = 0;
          if (sub_1CC0BDF44((uint64_t)v247, v64, &v240))
          {
            uint64_t v65 = (uint64_t)v240[1];
            if (v65)
            {
              uint64_t v246 = v64;
              uint64_t v66 = *(void *)(*(void *)(v65 + 64) + 8);
              for (k = v65; v66; uint64_t v66 = *(void *)(v66 + 8))
              {
                uint64_t v67 = *(void *)(v66 + 24);
                unsigned int v68 = *(unsigned __int8 *)(v67 + 16);
                if (v67) {
                  BOOL v69 = v68 >= 0x1C;
                }
                else {
                  BOOL v69 = 0;
                }
                if (v69 && v68 - 29 < 0xB) {
                  break;
                }
              }
              v240 = (void **)&v244;
              v241 = (void **)&v244;
              uint64_t v242 = 4;
              LODWORD(v243) = 0;
              sub_1CC0BCF20((llvm::SmallPtrSetImplBase *)&v240, v66, 0);
              int v71 = *(_DWORD *)(v246 + 20);
              uint64_t v72 = v71 & 0x7FFFFFF;
              uint64_t v73 = k;
              if ((v71 & 0x7FFFFFF) != 0)
              {
                uint64_t v74 = 0;
                uint64_t v219 = v71 & 0x7FFFFFF;
                do
                {
                  int v75 = *(_DWORD *)(v246 + 20);
                  if ((v75 & 0x40000000) != 0) {
                    uint64_t v76 = *(void *)(v246 - 8);
                  }
                  else {
                    uint64_t v76 = v246 - 32 * (v75 & 0x7FFFFFF);
                  }
                  int v77 = *(int32x2_t *****)(v76 + 32 * *(unsigned int *)(v246 + 76) + 8 * v74);
                  uint64_t v78 = *(void *)a5;
                  uint64_t v79 = *(unsigned int *)(a5 + 16);
                  if (v79)
                  {
                    uint64_t v80 = (v79 - 1) & ((v77 >> 4) ^ (v77 >> 9));
                    uint64_t v81 = (void *)(v78 + (v80 << 6));
                    uint64_t v82 = (int32x2_t ****)v81[3];
                    if (v77 == v82) {
                      goto LABEL_99;
                    }
                    int v83 = 1;
                    while (v82 != (int32x2_t ****)-4096)
                    {
                      int v84 = v80 + v83++;
                      uint64_t v80 = v84 & (v79 - 1);
                      uint64_t v81 = (void *)(v78 + (v80 << 6));
                      uint64_t v82 = (int32x2_t ****)v81[3];
                      if (v77 == v82) {
                        goto LABEL_99;
                      }
                    }
                  }
                  uint64_t v81 = (void *)(v78 + (v79 << 6));
LABEL_99:
                  uint64_t v85 = *(void *)(v76 + 32 * v74);
                  uint64_t v237 = 6;
                  if (v81 == (void *)(v78 + (v79 << 6)))
                  {
                    uint64_t v86 = 0;
                    char v87 = 0;
                    v238 = 0;
                    v239 = 0;
                  }
                  else
                  {
                    uint64_t v86 = 0;
                    char v87 = (int32x2_t ****)v81[7];
                    v238 = 0;
                    v239 = v87;
                    if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096 && v87 != 0)
                    {
                      unint64_t v89 = v81[5] & 0xFFFFFFFFFFFFFFF8;
                      v238 = *(unint64_t **)v89;
                      *(void *)unint64_t v89 = &v237;
                      uint64_t v237 = v89 | 6;
                      uint64_t v86 = v238;
                      if (v238) {
                        unint64_t *v238 = *v238 & 7 | (unint64_t)&v238;
                      }
                      char v87 = v239;
                    }
                  }
                  if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096 && v87 != 0)
                  {
                    unint64_t v96 = v237 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)(v237 & 0xFFFFFFFFFFFFFFF8) = v86;
                    if (v238)
                    {
                      unint64_t *v238 = *v238 & 7 | v96;
                    }
                    else
                    {
                      long long v97 = v239;
                      long long v98 = ***v239;
                      unint64_t v99 = (unint64_t)v98[303];
                      if (v99 <= v96)
                      {
                        uint64_t v100 = v98[305].u32[0];
                        if (v99 + 16 * v100 > v96)
                        {
                          unsigned int v101 = v100 - 1;
                          LODWORD(v102) = v101 & ((v239 >> 4) ^ (v239 >> 9));
                          uint64_t v103 = (int32x2_t *****)(v99 + 16 * v102);
                          long long v104 = *v103;
                          if (v239 == *v103)
                          {
LABEL_134:
                            *uint64_t v103 = (int32x2_t ****)-8192;
                            v98[304] = vadd_s32(v98[304], (int32x2_t)0x1FFFFFFFFLL);
                            long long v97 = v239;
                          }
                          else
                          {
                            int v105 = 1;
                            while (v104 != (int32x2_t ****)-4096)
                            {
                              int v106 = v102 + v105++;
                              uint64_t v102 = v106 & v101;
                              long long v104 = *(int32x2_t *****)(v99 + 16 * v102);
                              if (v239 == v104)
                              {
                                uint64_t v103 = (int32x2_t *****)(v99 + 16 * v102);
                                goto LABEL_134;
                              }
                            }
                          }
                          *((unsigned char *)v97 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  if (v87) {
                    uint64_t v91 = v87;
                  }
                  else {
                    uint64_t v91 = v77;
                  }
                  if (!v87 && (v6 & 1) != 0) {
                    goto LABEL_280;
                  }
                  uint64_t v92 = v240;
                  if (v241 == v240)
                  {
                    int v93 = HIDWORD(v242);
                    uint64_t v94 = (char *)&v241[HIDWORD(v242)];
                    if (HIDWORD(v242))
                    {
                      uint64_t v95 = 0;
                      while (v241[v95] != v91)
                      {
                        if (HIDWORD(v242) == ++v95) {
                          goto LABEL_149;
                        }
                      }
                      uint64_t v94 = (char *)&v241[v95];
                    }
LABEL_149:
                    uint64_t v92 = v241;
                  }
                  else
                  {
                    int v107 = v242 - 1;
                    unsigned int v108 = (v242 - 1) & ((v91 >> 4) ^ (v91 >> 9));
                    uint64_t v94 = (char *)&v241[v108];
                    uint64_t v109 = *(int32x2_t *****)v94;
                    if (*(void *)v94 == -1)
                    {
                      uint64_t v110 = 0;
LABEL_222:
                      if (v110) {
                        uint64_t v94 = v110;
                      }
                      int v93 = HIDWORD(v242);
                      if (*(int32x2_t *****)v94 != v91) {
                        uint64_t v94 = (char *)&v241[v242];
                      }
                    }
                    else
                    {
                      uint64_t v110 = 0;
                      int v111 = 1;
                      while (v109 != v91)
                      {
                        if (v110) {
                          BOOL v112 = 0;
                        }
                        else {
                          BOOL v112 = v109 == (int32x2_t ****)-2;
                        }
                        if (v112) {
                          uint64_t v110 = v94;
                        }
                        unsigned int v113 = v108 + v111++;
                        unsigned int v108 = v113 & v107;
                        uint64_t v94 = (char *)&v241[v113 & v107];
                        uint64_t v109 = *(int32x2_t *****)v94;
                        if (*(void *)v94 == -1) {
                          goto LABEL_222;
                        }
                      }
                      int v93 = HIDWORD(v242);
                    }
                  }
                  int v114 = v241 == v92 ? v93 : v242;
                  if (v94 == (char *)&v241[v114]) {
                    goto LABEL_280;
                  }
                  BOOL v115 = *(unsigned __int8 *)(v85 + 16) - 27 < 0xFFFFFFFE || v85 == 0;
                  uint64_t v228 = v91;
                  if (!v115)
                  {
                    if (*(void *)(*v230 + 96) != v85)
                    {
                      uint64_t v140 = *(void *)a5;
                      uint64_t v141 = *(unsigned int *)(a5 + 16);
                      if (!v141) {
                        goto LABEL_227;
                      }
                      uint64_t v142 = *(void *)(v85 + 72);
                      uint64_t v143 = (v141 - 1) & ((v142 >> 4) ^ (v142 >> 9));
                      uint64_t v144 = (void *)(v140 + (v143 << 6));
                      uint64_t v145 = v144[3];
                      if (v142 != v145)
                      {
                        int v146 = 1;
                        while (v145 != -4096)
                        {
                          int v147 = v143 + v146++;
                          uint64_t v143 = v147 & (v141 - 1);
                          uint64_t v144 = (void *)(v140 + (v143 << 6));
                          uint64_t v145 = v144[3];
                          if (v142 == v145) {
                            goto LABEL_228;
                          }
                        }
LABEL_227:
                        uint64_t v144 = (void *)(v140 + (v141 << 6));
                      }
LABEL_228:
                      uint64_t v237 = 6;
                      if (v144 == (void *)(v140 + (v141 << 6)))
                      {
                        uint64_t v168 = 0;
                        int v169 = 0;
                        v238 = 0;
                        v239 = 0;
                      }
                      else
                      {
                        uint64_t v168 = 0;
                        int v169 = (int32x2_t ****)v144[7];
                        v238 = 0;
                        v239 = v169;
                        if (v169 != (int32x2_t ****)-8192 && v169 != (int32x2_t ****)-4096 && v169 != 0)
                        {
                          unint64_t v171 = v144[5] & 0xFFFFFFFFFFFFFFF8;
                          v238 = *(unint64_t **)v171;
                          *(void *)unint64_t v171 = &v237;
                          uint64_t v237 = v171 | 6;
                          uint64_t v168 = v238;
                          if (v238) {
                            unint64_t *v238 = *v238 & 7 | (unint64_t)&v238;
                          }
                          int v169 = v239;
                        }
                      }
                      if (v169 != (int32x2_t ****)-8192 && v169 != (int32x2_t ****)-4096 && v169 != 0)
                      {
                        unint64_t v202 = v237 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)(v237 & 0xFFFFFFFFFFFFFFF8) = v168;
                        if (v238)
                        {
                          unint64_t *v238 = *v238 & 7 | v202;
                        }
                        else
                        {
                          char v203 = v239;
                          unsigned int v204 = ***v239;
                          unint64_t v205 = (unint64_t)v204[303];
                          if (v205 <= v202)
                          {
                            uint64_t v206 = v204[305].u32[0];
                            if (v205 + 16 * v206 > v202)
                            {
                              unsigned int v207 = v206 - 1;
                              LODWORD(v208) = v207 & ((v239 >> 4) ^ (v239 >> 9));
                              long long v209 = (int32x2_t *****)(v205 + 16 * v208);
                              v210 = *v209;
                              if (v239 == *v209)
                              {
LABEL_290:
                                *long long v209 = (int32x2_t ****)-8192;
                                v204[304] = vadd_s32(v204[304], (int32x2_t)0x1FFFFFFFFLL);
                                char v203 = v239;
                              }
                              else
                              {
                                int v211 = 1;
                                while (v210 != (int32x2_t ****)-4096)
                                {
                                  int v212 = v208 + v211++;
                                  uint64_t v208 = v212 & v207;
                                  v210 = *(int32x2_t *****)(v205 + 16 * v208);
                                  if (v239 == v210)
                                  {
                                    long long v209 = (int32x2_t *****)(v205 + 16 * v208);
                                    goto LABEL_290;
                                  }
                                }
                              }
                              *((unsigned char *)v203 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      if (v169)
                      {
                        int v173 = *(_DWORD *)(*v230 + 40);
                        if (!v173) {
                          goto LABEL_251;
                        }
                        uint64_t v174 = *(void *)(*v230 + 24);
                        unsigned int v175 = v173 - 1;
                        uint64_t v176 = (v173 - 1) & ((v169 >> 4) ^ (v169 >> 9));
                        int v177 = *(int32x2_t *****)(v174 + 16 * v176);
                        if (v169 == v177)
                        {
LABEL_250:
                          uint64_t v85 = *(void *)(v174 + 16 * v176 + 8);
                        }
                        else
                        {
                          int v178 = 1;
                          while (v177 != (int32x2_t ****)-4096)
                          {
                            int v179 = v176 + v178++;
                            uint64_t v176 = v179 & v175;
                            int v177 = *(int32x2_t *****)(v174 + 16 * v176);
                            if (v169 == v177) {
                              goto LABEL_250;
                            }
                          }
LABEL_251:
                          uint64_t v85 = 0;
                        }
                      }
                    }
                    int v180 = *(_DWORD *)(v73 + 20);
                    uint64_t v181 = v180 & 0x7FFFFFF;
                    if ((v180 & 0x7FFFFFF) == *(_DWORD *)(v73 + 76))
                    {
                      unsigned int v182 = v181 + (v181 >> 1);
                      if (v182 <= 2) {
                        uint64_t v183 = 2;
                      }
                      else {
                        uint64_t v183 = v182;
                      }
                      *(_DWORD *)(v73 + 76) = v183;
                      __pb = (void *)v85;
                      if ((v180 & 0x40000000) != 0) {
                        uint64_t v184 = *(uint64_t **)(v73 - 8);
                      }
                      else {
                        uint64_t v184 = (uint64_t *)(v73 - 32 * v181);
                      }
                      v223 = v184;
                      uint64_t v185 = v73;
                      unsigned int v186 = operator new(40 * v183);
                      *(void *)(v185 - 8) = v186;
                      int v187 = v186;
                      do
                      {
                        void *v187 = 0;
                        v187[1] = 0;
                        v187[2] = 0;
                        v187[3] = v185;
                        v187 += 4;
                      }
                      while (v187 != &v186[4 * v183]);
                      int v188 = *(_DWORD *)(v185 + 20);
                      if ((v188 & 0x40000000) != 0) {
                        uint64_t v189 = (uint64_t)v186;
                      }
                      else {
                        uint64_t v189 = v185 - 32 * (v188 & 0x7FFFFFF);
                      }
                      sub_1CC5E4108((uint64_t)&v237, v223, &v223[4 * v181], v189);
                      if (v181)
                      {
                        memmove((void *)(v189 + 32 * v183), &v223[4 * v181], 8 * v181);
                        uint64_t v190 = 4 * v181;
                        do
                        {
                          v191 = &v223[v190];
                          if (v223[v190 - 4])
                          {
                            *(void *)*(v191 - 2) = *(v191 - 3);
                            uint64_t v192 = *(v191 - 3);
                            if (v192) {
                              *(void *)(v192 + 16) = *(v191 - 2);
                            }
                          }
                          v190 -= 4;
                        }
                        while (v190 * 8);
                      }
                      operator delete(v223);
                      uint64_t v73 = k;
                      uint64_t v85 = (uint64_t)__pb;
                      int v180 = *(_DWORD *)(k + 20);
                      char v6 = a6;
                      uint64_t v72 = v219;
                      int v53 = v220;
                    }
                    uint64_t v193 = (v180 + 1) & 0x7FFFFFF;
                    *(_DWORD *)(v73 + 20) = v180 & 0xF8000000 | (v180 + 1) & 0x7FFFFFF;
                    uint64_t v139 = v228;
                    if ((v180 & 0x40000000) != 0) {
                      uint64_t v194 = *(void *)(v73 - 8);
                    }
                    else {
                      uint64_t v194 = v73 - 32 * v193;
                    }
                    uint64_t v195 = (v193 - 1);
                    uint64_t v196 = v194 + 32 * v195;
                    if (*(void *)v196)
                    {
                      **(void **)(v196 + 16) = *(void *)(v196 + 8);
                      uint64_t v213 = *(void *)(v196 + 8);
                      if (v213) {
                        *(void *)(v213 + 16) = *(void *)(v196 + 16);
                      }
                    }
                    *(void *)uint64_t v196 = v85;
                    if (v85)
                    {
                      uint64_t v199 = *(void *)(v85 + 8);
                      __int16 v197 = (uint64_t *)(v85 + 8);
                      uint64_t v198 = v199;
                      uint64_t v200 = v194 + 32 * v195;
                      *(void *)(v200 + 8) = v199;
                      if (v199) {
                        *(void *)(v198 + 16) = v200 + 8;
                      }
                      *(void *)(v200 + 16) = v197;
                      *__int16 v197 = v196;
                    }
                    int v201 = *(_DWORD *)(v73 + 20);
                    uint64_t v137 = v201 & 0x7FFFFFF;
                    if ((v201 & 0x40000000) != 0) {
                      uint64_t v138 = *(void *)(v73 - 8);
                    }
                    else {
                      uint64_t v138 = v73 - 32 * v137;
                    }
                    goto LABEL_279;
                  }
                  uint64_t v237 = 0;
                  long long __p = (void *)v85;
                  if ((sub_1CC0BDF44((uint64_t)v247, v85, &v237) & 1) == 0)
                  {
                    uint64_t v73 = k;
LABEL_196:
                    int v148 = *(_DWORD *)(v73 + 20);
                    uint64_t v149 = v148 & 0x7FFFFFF;
                    if ((v148 & 0x7FFFFFF) == *(_DWORD *)(v73 + 76))
                    {
                      unsigned int v150 = v149 + (v149 >> 1);
                      if (v150 <= 2) {
                        uint64_t v151 = 2;
                      }
                      else {
                        uint64_t v151 = v150;
                      }
                      *(_DWORD *)(v73 + 76) = v151;
                      if ((v148 & 0x40000000) != 0) {
                        int v152 = *(uint64_t **)(v73 - 8);
                      }
                      else {
                        int v152 = (uint64_t *)(v73 - 32 * v149);
                      }
                      v222 = v152;
                      uint64_t v153 = v73;
                      unsigned int v154 = operator new(40 * v151);
                      *(void *)(v153 - 8) = v154;
                      uint64_t v155 = v154;
                      do
                      {
                        *uint64_t v155 = 0;
                        v155[1] = 0;
                        v155[2] = 0;
                        v155[3] = v153;
                        v155 += 4;
                      }
                      while (v155 != &v154[4 * v151]);
                      int v156 = *(_DWORD *)(v153 + 20);
                      if ((v156 & 0x40000000) != 0) {
                        uint64_t v157 = (uint64_t)v154;
                      }
                      else {
                        uint64_t v157 = v153 - 32 * (v156 & 0x7FFFFFF);
                      }
                      sub_1CC5E4108((uint64_t)&v237, v222, &v222[4 * v149], v157);
                      if (v149)
                      {
                        memmove((void *)(v157 + 32 * v151), &v222[4 * v149], 8 * v149);
                        uint64_t v158 = 4 * v149;
                        do
                        {
                          uint64_t v159 = &v222[v158];
                          if (v222[v158 - 4])
                          {
                            *(void *)*(v159 - 2) = *(v159 - 3);
                            uint64_t v160 = *(v159 - 3);
                            if (v160) {
                              *(void *)(v160 + 16) = *(v159 - 2);
                            }
                          }
                          v158 -= 4;
                        }
                        while (v158 * 8);
                      }
                      operator delete(v222);
                      uint64_t v73 = k;
                      int v148 = *(_DWORD *)(k + 20);
                      char v6 = a6;
                      uint64_t v72 = v219;
                      int v53 = v220;
                    }
                    uint64_t v139 = v228;
                    uint64_t v161 = (v148 + 1) & 0x7FFFFFF;
                    *(_DWORD *)(v73 + 20) = v148 & 0xF8000000 | (v148 + 1) & 0x7FFFFFF;
                    if ((v148 & 0x40000000) != 0) {
                      uint64_t v162 = *(void *)(v73 - 8);
                    }
                    else {
                      uint64_t v162 = v73 - 32 * v161;
                    }
                    uint64_t v163 = (v161 - 1);
                    uint64_t v164 = v162 + 32 * v163;
                    if (*(void *)v164)
                    {
                      **(void **)(v164 + 16) = *(void *)(v164 + 8);
                      uint64_t v214 = *(void *)(v164 + 8);
                      if (v214) {
                        *(void *)(v214 + 16) = *(void *)(v164 + 16);
                      }
                    }
                    *(void *)uint64_t v164 = __p;
                    int v166 = __p + 1;
                    uint64_t v165 = __p[1];
                    *(void *)(v164 + 8) = v165;
                    if (v165) {
                      *(void *)(v165 + 16) = v164 + 8;
                    }
                    *(void *)(v162 + 32 * v163 + 16) = v166;
                    uint64_t *v166 = v164;
                    int v167 = *(_DWORD *)(v73 + 20);
                    uint64_t v137 = v167 & 0x7FFFFFF;
                    if ((v167 & 0x40000000) != 0) {
                      uint64_t v138 = *(void *)(v73 - 8);
                    }
                    else {
                      uint64_t v138 = v73 - 32 * v137;
                    }
                    goto LABEL_279;
                  }
                  uint64_t v116 = *(void *)(v237 + 8);
                  uint64_t v73 = k;
                  if (!v116) {
                    goto LABEL_196;
                  }
                  int v117 = *(_DWORD *)(k + 20);
                  uint64_t v118 = v117 & 0x7FFFFFF;
                  if ((v117 & 0x7FFFFFF) == *(_DWORD *)(k + 76))
                  {
                    unsigned int v119 = v118 + (v118 >> 1);
                    if (v119 <= 2) {
                      uint64_t v120 = 2;
                    }
                    else {
                      uint64_t v120 = v119;
                    }
                    *(_DWORD *)(k + 76) = v120;
                    if ((v117 & 0x40000000) != 0) {
                      uint64_t v121 = *(uint64_t **)(k - 8);
                    }
                    else {
                      uint64_t v121 = (uint64_t *)(k - 32 * v118);
                    }
                    __pa = v121;
                    BOOL v122 = operator new(40 * v120);
                    *(void *)(k - 8) = v122;
                    unint64_t v123 = v122;
                    do
                    {
                      void *v123 = 0;
                      v123[1] = 0;
                      v123[2] = 0;
                      v123[3] = k;
                      v123 += 4;
                    }
                    while (v123 != &v122[4 * v120]);
                    int v124 = *(_DWORD *)(k + 20);
                    if ((v124 & 0x40000000) != 0) {
                      uint64_t v125 = (uint64_t)v122;
                    }
                    else {
                      uint64_t v125 = k - 32 * (v124 & 0x7FFFFFF);
                    }
                    sub_1CC5E4108((uint64_t)&v237, __pa, &__pa[4 * v118], v125);
                    if (v118)
                    {
                      memmove((void *)(v125 + 32 * v120), &__pa[4 * v118], 8 * v118);
                      uint64_t v126 = 4 * v118;
                      do
                      {
                        uint64_t v127 = &__pa[v126];
                        if (__pa[v126 - 4])
                        {
                          *(void *)*(v127 - 2) = *(v127 - 3);
                          uint64_t v128 = *(v127 - 3);
                          if (v128) {
                            *(void *)(v128 + 16) = *(v127 - 2);
                          }
                        }
                        v126 -= 4;
                      }
                      while (v126 * 8);
                    }
                    operator delete(__pa);
                    uint64_t v73 = k;
                    int v117 = *(_DWORD *)(k + 20);
                    uint64_t v72 = v219;
                    int v53 = v220;
                  }
                  uint64_t v129 = (v117 + 1) & 0x7FFFFFF;
                  *(_DWORD *)(v73 + 20) = v117 & 0xF8000000 | (v117 + 1) & 0x7FFFFFF;
                  char v6 = a6;
                  if ((v117 & 0x40000000) != 0) {
                    uint64_t v130 = *(void *)(v73 - 8);
                  }
                  else {
                    uint64_t v130 = v73 - 32 * v129;
                  }
                  uint64_t v131 = (v129 - 1);
                  uint64_t v132 = v130 + 32 * v131;
                  if (*(void *)v132)
                  {
                    **(void **)(v132 + 16) = *(void *)(v132 + 8);
                    uint64_t v215 = *(void *)(v132 + 8);
                    if (v215) {
                      *(void *)(v215 + 16) = *(void *)(v132 + 16);
                    }
                  }
                  *(void *)uint64_t v132 = v116;
                  uint64_t v135 = *(void *)(v116 + 8);
                  int v134 = (uint64_t *)(v116 + 8);
                  uint64_t v133 = v135;
                  *(void *)(v132 + 8) = v135;
                  if (v135) {
                    *(void *)(v133 + 16) = v132 + 8;
                  }
                  *(void *)(v130 + 32 * v131 + 16) = v134;
                  *int v134 = v132;
                  int v136 = *(_DWORD *)(v73 + 20);
                  uint64_t v137 = v136 & 0x7FFFFFF;
                  if ((v136 & 0x40000000) != 0) {
                    uint64_t v138 = *(void *)(v73 - 8);
                  }
                  else {
                    uint64_t v138 = v73 - 32 * v137;
                  }
                  uint64_t v139 = v228;
LABEL_279:
                  *(void *)(v138 + 32 * *(unsigned int *)(v73 + 76) + 8 * (v137 - 1)) = v139;
LABEL_280:
                  ++v74;
                }
                while (v74 != v72);
              }
              v216 = (llvm::MemoryAccess *)v73;
              uint64_t v217 = sub_1CC0BCC1C(v73);
              if (v217)
              {
                sub_1CC0BDFF0(v247, &v246)[1] = v217;
                llvm::MemorySSAUpdater::removeMemoryAccess((int32x2_t **)v230, v216, 0);
              }
              if (v241 != v240) {
                free(v241);
              }
            }
          }
        }
      }
LABEL_312:
      uint64_t v218 = 0;
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *))((char *)&off_1F2605CE0 + v218))(&v231);
        if (result) {
          break;
        }
        BOOL v14 = v218 == 16;
        v218 += 16;
      }
      while (!v14);
      uint64_t v52 = v232;
      uint64_t v8 = v233;
      continue;
    }
    break;
  }
  if ((v247[0] & 1) == 0) {
    return MEMORY[0x1D25D9CD0](v247[1], 8);
  }
  return result;
}

uint64_t *llvm::MemorySSAUpdater::updateForClonedBlockIntoPred(uint64_t *a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4)
{
  v20[9] = *MEMORY[0x1E4F143B8];
  v20[0] = 1;
  for (uint64_t i = 1; i != 9; i += 2)
    v20[i] = -4096;
  int v9 = *(_DWORD *)(*a1 + 40);
  if (v9)
  {
    uint64_t v10 = *(void *)(*a1 + 24);
    unsigned int v11 = v9 - 1;
    uint64_t v12 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v13 = *(void *)(v10 + 16 * v12);
    if (v13 == a2)
    {
LABEL_8:
      uint64_t v16 = *(void *)(v10 + 16 * v12 + 8);
      uint64_t v19 = v16;
      if (v16)
      {
        uint64_t v17 = sub_1CC0B78E8(v16, (uint64_t)a3);
        sub_1CC0BDFF0(v20, &v19)[1] = v17;
      }
    }
    else
    {
      int v14 = 1;
      while (v13 != -4096)
      {
        int v15 = v12 + v14++;
        uint64_t v12 = v15 & v11;
        uint64_t v13 = *(void *)(v10 + 16 * v12);
        if (v13 == a2) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t result = llvm::MemorySSAUpdater::cloneUsesAndDefs(a1, a2, a3, a4, (uint64_t)v20, 1);
  if ((v20[0] & 1) == 0) {
    return (uint64_t *)MEMORY[0x1D25D9CD0](v20[1], 8);
  }
  return result;
}

void llvm::MemorySSAUpdater::applyUpdates(int32x2_t **a1, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  v34[8] = *MEMORY[0x1E4F143B8];
  int v25 = v27;
  uint64_t v26 = 0x400000000;
  uint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  uint64_t v20 = 0x400000000;
  if (!a3) {
    goto LABEL_23;
  }
  uint64_t v7 = 16 * a3;
  uint64_t v8 = a2 + 1;
  do
  {
    uint64_t v9 = *(v8 - 1);
    unint64_t v10 = *v8 & 0xFFFFFFFFFFFFFFF8;
    if ((*v8 & 4) != 0)
    {
      if (v26 >= (unint64_t)HIDWORD(v26)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v13 = (char *)v25 + 16 * v26;
      *uint64_t v13 = v9;
      v13[1] = v10 | 4;
      LODWORD(v26) = v26 + 1;
      if (v23 >= (unint64_t)HIDWORD(v23)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v10 = *v8 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v11 = (char *)v22 + 16 * v23;
      *unsigned int v11 = *(v8 - 1);
      uint64_t v12 = &v23;
    }
    else
    {
      if (v20 >= (unint64_t)HIDWORD(v20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v11 = &v21[v20];
      *unsigned int v11 = v9;
      uint64_t v12 = &v20;
    }
    v11[1] = v10;
    ++*(_DWORD *)v12;
    v8 += 2;
    v7 -= 16;
  }
  while (v7);
  if (v26)
  {
    if (v20)
    {
      if (a5) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates();
      }
      v28[0] = &v29;
      v28[1] = 0;
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates();
    }
    if (a5)
    {
      sub_1CBFEBC30((uint64_t)v28, (unint64_t *)v25, v26, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a4, (uint64_t)v28, 0);
      sub_1CBFEEC7C((uint64_t)v28);
    }
  }
  else
  {
LABEL_23:
    if (a5)
    {
      sub_1CBFEBC30((uint64_t)v28, a2, a3, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a4, (uint64_t)v28, 0);
      if (v32 != v34) {
        free(v32);
      }
      sub_1CBFEECCC((uint64_t)v30);
      sub_1CBFEECCC((uint64_t)v28);
    }
    v28[0] = (void *)1;
    for (uint64_t i = 1; i != 37; i += 9)
      v28[i] = (void *)-4096;
    v30[0] = 1;
    for (uint64_t j = 38; j != 74; j += 9)
      v28[j] = (void *)-4096;
    char v31 = 0;
    int v32 = v34;
    uint64_t v33 = 0x400000000;
    llvm::MemorySSAUpdater::applyInsertUpdates(a1, (uint64_t)v21, v20, a4, (uint64_t)v28);
    if (v32 != v34) {
      free(v32);
    }
    sub_1CBFEECCC((uint64_t)v30);
    sub_1CBFEECCC((uint64_t)v28);
  }
  if (v26)
  {
    int v14 = (llvm::BasicBlock **)v25;
    int v15 = (llvm::BasicBlock **)((char *)v25 + 16 * v26);
    do
    {
      uint64_t v16 = *v14;
      uint64_t v17 = v14[1];
      v14 += 2;
      llvm::MemorySSAUpdater::removeEdge((int32x2_t ****)a1, v16, (llvm::BasicBlock *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8));
    }
    while (v14 != v15);
  }
  if (v22 != v24) {
    free(v22);
  }
  if (v25 != v27) {
    free(v25);
  }
}

void llvm::MemorySSAUpdater::applyInsertUpdates(int32x2_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v405 = *MEMORY[0x1E4F143B8];
  v385[2] = a4;
  uint64_t v386 = a5;
  v385[0] = (uint64_t)a1;
  v385[1] = (uint64_t)&v386;
  uint64_t v398 = 1;
  for (uint64_t i = 8; i != 488; i += 120)
    *(uint64_t *)((char *)&v398 + i) = -4096;
  uint64_t v6 = a2 + 16 * a3;
  if (a3)
  {
    int64x2_t v370 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v7 = a2;
    while (1)
    {
      unint64_t v8 = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
      v374 = 0;
      char v9 = sub_1CC0BE388((uint64_t)&v398, v8, &v374);
      unint64_t v10 = v374;
      if (v9) {
        goto LABEL_14;
      }
      v391 = v374;
      int v11 = v398;
      unsigned int v12 = v400;
      unsigned int v13 = v398 >> 1;
      int v14 = v398 & 1;
      unsigned int v15 = (v398 & 1) != 0 ? 4 : v400;
      if (4 * v13 + 4 >= 3 * v15) {
        break;
      }
      if (v15 + ~v13 - HIDWORD(v398) <= v15 >> 3) {
        goto LABEL_37;
      }
LABEL_11:
      LODWORD(v398) = ((v11 & 0xFFFFFFFE) + 2) | v14;
      if (*(void *)v10 != -4096) {
        --HIDWORD(v398);
      }
      *(void *)unint64_t v10 = v8;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      *((_OWORD *)v10 + 6) = 0u;
      *((void *)v10 + 14) = 0;
      *((_OWORD *)v10 + 3) = 0u;
      *((void *)v10 + 1) = 1;
      *((int64x2_t *)v10 + 1) = v370;
      *((_OWORD *)v10 + 2) = 0u;
      *((void *)v10 + 4) = v10 + 48;
      *((void *)v10 + 5) = 0x200000000;
      *((void *)v10 + 8) = 1;
      *(int64x2_t *)(v10 + 72) = v370;
      *((void *)v10 + 11) = v10 + 104;
      *((void *)v10 + 12) = 0x200000000;
LABEL_14:
      char v16 = v10[8];
      uint64_t v17 = *(void **)v7;
      v401 = *(void **)v7;
      if (v16)
      {
        uint64_t v18 = v10 + 16;
        int v19 = 2;
      }
      else
      {
        int v19 = *((_DWORD *)v10 + 6);
        if (!v19)
        {
          uint64_t v28 = 0;
LABEL_31:
          uint64_t v29 = sub_1CC0BE7D8((uint64_t)(v10 + 8), (uint64_t)&v401, &v401, v28);
          *uint64_t v29 = v401;
          unint64_t v30 = *((unsigned int *)v10 + 10);
          if (v30 >= *((unsigned int *)v10 + 11)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)v10 + 4) + 8 * v30) = v401;
          ++*((_DWORD *)v10 + 10);
          goto LABEL_33;
        }
        uint64_t v18 = (char *)*((void *)v10 + 2);
      }
      int v20 = v19 - 1;
      unsigned int v21 = v20 & ((v17 >> 4) ^ (v17 >> 9));
      uint64_t v22 = &v18[8 * v21];
      uint64_t v23 = *(void **)v22;
      if (v17 != *(void **)v22)
      {
        int v24 = 0;
        int v25 = 1;
        while (v23 != (void *)-4096)
        {
          if (v24) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v23 == (void *)-8192;
          }
          if (v26) {
            int v24 = v22;
          }
          unsigned int v27 = v21 + v25++;
          unsigned int v21 = v27 & v20;
          uint64_t v22 = &v18[8 * v21];
          uint64_t v23 = *(void **)v22;
          if (v17 == *(void **)v22) {
            goto LABEL_33;
          }
        }
        if (v24) {
          uint64_t v28 = v24;
        }
        else {
          uint64_t v28 = v22;
        }
        goto LABEL_31;
      }
LABEL_33:
      v7 += 16;
      if (v7 == v6) {
        goto LABEL_62;
      }
    }
    v15 *= 2;
LABEL_37:
    if (v15 >= 5)
    {
      unint64_t v31 = (v15 - 1) | ((unint64_t)(v15 - 1) >> 1);
      unint64_t v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
      int v33 = ((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8);
      if ((v33 + 1) > 0x40) {
        unsigned int v15 = v33 + 1;
      }
      else {
        unsigned int v15 = 64;
      }
    }
    if (v398)
    {
      uint64_t v35 = &v401;
      uint64_t v36 = 0x3FFFFFFFFFFFFF88;
      uint64_t v351 = v6;
      do
      {
        int v37 = (unsigned int *)((char *)&v398 + v36 * 4);
        unint64_t v38 = *(unint64_t *)((char *)&v401 + v36 * 4);
        if ((v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t *v35 = (void *)v38;
          uint64_t v39 = (unsigned int *)(v35 + 8);
          v367 = (llvm::Value *)v35;
          sub_1CC0BE57C((unsigned int *)v35 + 2, v37 + 124);
          sub_1CC0BE57C(v39, v37 + 138);
          uint64_t v40 = (char *)*((void *)v37 + 72);
          if (v37 + 148 != (unsigned int *)v40) {
            free(v40);
          }
          if ((v37[138] & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(void *)&v404[v36 * 4], 8);
          }
          unint64_t v41 = *(unsigned int **)&v403[v36 + 4];
          uint64_t v6 = v351;
          if (&v403[v36 + 8] != v41) {
            free(v41);
          }
          uint64_t v35 = (void **)((char *)v367 + 120);
          if ((v37[124] & 1) == 0)
          {
            MEMORY[0x1D25D9CD0](*(void *)&v403[v36], 8);
            uint64_t v35 = (void **)((char *)v367 + 120);
          }
        }
        v36 += 30;
      }
      while (v36 * 4);
      uint64_t v42 = (uint64_t)v35;
      if (v15 > 4)
      {
        LODWORD(v398) = v398 & 0xFFFFFFFE;
        v399 = (void **)operator new(120 * v15, (std::align_val_t)8uLL);
        uint64_t v400 = v15;
      }
      sub_1CC0BE438((uint64_t)&v398, (uint64_t)&v401, v42);
    }
    else
    {
      uint64_t v34 = (uint64_t)v399;
      if (v15 > 4)
      {
        v399 = (void **)operator new(120 * v15, (std::align_val_t)8uLL);
        uint64_t v400 = v15;
      }
      else
      {
        LODWORD(v398) = v398 | 1;
      }
      sub_1CC0BE438((uint64_t)&v398, v34, v34 + 120 * v12);
      MEMORY[0x1D25D9CD0](v34, 8);
    }
    sub_1CC0BE388((uint64_t)&v398, v8, &v391);
    int v11 = v398;
    unint64_t v10 = v391;
    int v14 = v398 & 1;
    goto LABEL_11;
  }
LABEL_62:
  v397[0] = 1;
  uint64_t v43 = 1;
  int64x2_t v44 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v397[v43] = v44;
    v43 += 3;
  }
  while (v43 != 13);
  uint64_t v45 = (uint64_t *)v384;
  v380 = v384;
  v381 = v384;
  uint64_t v382 = 2;
  int v383 = 0;
  int v46 = v398;
  if (v398 > 1)
  {
    uint64_t v52 = &v401;
    uint64_t v47 = (void **)&v399;
    if ((v398 & 1) == 0)
    {
      uint64_t v47 = v399;
      unsigned int v48 = v400;
      if (!v400)
      {
        int v46 = 0;
        int v51 = v399;
        uint64_t v52 = v399;
        goto LABEL_80;
      }
      uint64_t v52 = &v399[15 * v400];
    }
    int v46 = v398 & 1;
    while (((unint64_t)*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v47 += 15;
      if (v47 == v52)
      {
        uint64_t v47 = v52;
        break;
      }
    }
    int v51 = v47;
    uint64_t v47 = v399;
    unsigned int v48 = v400;
  }
  else
  {
    uint64_t v47 = v399;
    unsigned int v48 = v400;
    if (v398) {
      uint64_t v49 = (void **)&v399;
    }
    else {
      uint64_t v49 = v399;
    }
    if (v398) {
      unsigned int v50 = 4;
    }
    else {
      unsigned int v50 = v400;
    }
    int v51 = &v49[15 * v50];
    uint64_t v52 = v51;
  }
LABEL_80:
  BOOL v53 = v46 == 0;
  if (v46) {
    BOOL v54 = (void **)&v399;
  }
  else {
    BOOL v54 = v47;
  }
  if (v53) {
    unsigned int v55 = v48;
  }
  else {
    unsigned int v55 = 4;
  }
  v362 = &v54[15 * v55];
  if (v51 != v362)
  {
    while (1)
    {
      uint64_t v56 = (uint64_t)*v51;
      sub_1CC0BB774(v386, (uint64_t)*v51, (char **)&v401);
      int v57 = (char **)v401;
      if (!v402) {
        goto LABEL_121;
      }
      uint64_t v58 = (char **)((char *)v401 + 8 * v402);
      do
      {
        v374 = 0;
        unsigned int v59 = *v57;
        v374 = v59;
        unsigned int v60 = v59 >> 4;
        if ((_BYTE)v51[1])
        {
          int v61 = 2;
          int v62 = v51 + 2;
        }
        else
        {
          int v61 = *((_DWORD *)v51 + 6);
          if (!v61) {
            goto LABEL_98;
          }
          int v62 = (void **)v51[2];
        }
        int v63 = v61 - 1;
        unsigned int v64 = v63 & (v60 ^ (v59 >> 9));
        uint64_t v65 = (char *)v62[v64];
        if (v65 == v59) {
          goto LABEL_117;
        }
        int v66 = 1;
        while (v65 != (char *)-4096)
        {
          unsigned int v67 = v64 + v66++;
          unsigned int v64 = v67 & v63;
          uint64_t v65 = (char *)v62[v64];
          if (v65 == v59) {
            goto LABEL_117;
          }
        }
LABEL_98:
        if ((_BYTE)v51[8])
        {
          int v68 = 2;
          BOOL v69 = v51 + 9;
        }
        else
        {
          int v68 = *((_DWORD *)v51 + 20);
          if (!v68)
          {
            uint64_t v79 = 0;
            goto LABEL_115;
          }
          BOOL v69 = (void **)v51[9];
        }
        unsigned int v70 = v60 ^ (v59 >> 9);
        int v71 = v68 - 1;
        unsigned int v72 = (v68 - 1) & v70;
        uint64_t v73 = (char **)&v69[v72];
        uint64_t v74 = *v73;
        if (v59 == *v73) {
          goto LABEL_117;
        }
        int v75 = 0;
        int v76 = 1;
        while (v74 != (char *)-4096)
        {
          if (v75) {
            BOOL v77 = 0;
          }
          else {
            BOOL v77 = v74 == (char *)-8192;
          }
          if (v77) {
            int v75 = v73;
          }
          unsigned int v78 = v72 + v76++;
          unsigned int v72 = v78 & v71;
          uint64_t v73 = (char **)&v69[v72];
          uint64_t v74 = *v73;
          if (v59 == *v73) {
            goto LABEL_117;
          }
        }
        if (v75) {
          uint64_t v79 = v75;
        }
        else {
          uint64_t v79 = v73;
        }
LABEL_115:
        uint64_t v80 = sub_1CC0BE7D8((uint64_t)(v51 + 8), (uint64_t)&v374, &v374, v79);
        *uint64_t v80 = v374;
        unint64_t v81 = *((unsigned int *)v51 + 24);
        if (v81 >= *((unsigned int *)v51 + 25)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v51[11] + v81) = v374;
        ++*((_DWORD *)v51 + 24);
        unsigned int v59 = v374;
LABEL_117:
        v391 = v59;
        uint64_t v392 = v56;
        uint64_t v82 = sub_1CBFEC774((uint64_t)v397, (uint64_t *)&v391);
        ++*((_DWORD *)v82 + 4);
        ++v57;
      }
      while (v57 != v58);
      int v57 = (char **)v401;
LABEL_121:
      if (v57 != (char **)v403) {
        free(v57);
      }
      if (!*((_DWORD *)v51 + 24))
      {
        int v83 = v381;
        uint64_t v84 = HIDWORD(v382);
        if (v381 == v380)
        {
          if (HIDWORD(v382))
          {
            uint64_t v85 = 0;
            uint64_t v86 = 8 * HIDWORD(v382);
            char v87 = (uint64_t *)v381;
            while (*v87 != v56)
            {
              if (*v87 == -2) {
                uint64_t v85 = v87;
              }
              ++v87;
              v86 -= 8;
              if (!v86)
              {
                if (!v85) {
                  goto LABEL_132;
                }
                *uint64_t v85 = v56;
                --v383;
                goto LABEL_156;
              }
            }
            goto LABEL_156;
          }
LABEL_132:
          unsigned int v88 = v382;
          if (HIDWORD(v382) < v382)
          {
            ++HIDWORD(v382);
            *(void *)&v381[8 * v84] = v56;
            goto LABEL_156;
          }
        }
        else
        {
          unsigned int v88 = v382;
        }
        if (3 * v88 <= 4 * (HIDWORD(v382) - v383))
        {
          if (v88 >= 0x40) {
            v88 *= 2;
          }
          else {
            unsigned int v88 = 128;
          }
        }
        else if (v88 - HIDWORD(v382) >= v88 >> 3)
        {
          goto LABEL_137;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v380, v88);
        unsigned int v88 = v382;
        int v83 = v381;
LABEL_137:
        unsigned int v89 = v88 - 1;
        unsigned int v90 = (v88 - 1) & ((v56 >> 4) ^ (v56 >> 9));
        uint64_t v91 = &v83[8 * v90];
        uint64_t v92 = *(void *)v91;
        if (*(void *)v91 == -1)
        {
          int v93 = 0;
LABEL_149:
          if (v93) {
            long long v97 = v93;
          }
          else {
            long long v97 = (uint64_t *)v91;
          }
          if (*v97 != v56)
          {
            if (*v97 == -2) {
              --v383;
            }
            else {
              ++HIDWORD(v382);
            }
            *long long v97 = v56;
          }
        }
        else
        {
          int v93 = 0;
          int v94 = 1;
          while (v92 != v56)
          {
            if (v93) {
              BOOL v95 = 0;
            }
            else {
              BOOL v95 = v92 == -2;
            }
            if (v95) {
              int v93 = (uint64_t *)v91;
            }
            unsigned int v96 = v90 + v94++;
            unsigned int v90 = v96 & v89;
            uint64_t v91 = &v83[8 * (v96 & v89)];
            uint64_t v92 = *(void *)v91;
            if (*(void *)v91 == -1) {
              goto LABEL_149;
            }
          }
        }
      }
LABEL_156:
      long long v98 = v51 + 15;
      int v51 = v52;
      if (v98 != v52)
      {
        int v51 = v98;
        while (((unint64_t)*v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v51 += 15;
          if (v51 == v52)
          {
            int v51 = v52;
            break;
          }
        }
      }
      if (v51 == v362)
      {
        uint64_t v45 = (uint64_t *)v380;
        unint64_t v99 = (uint64_t *)v381;
        unsigned int v100 = HIDWORD(v382);
        unsigned int v101 = v382;
        goto LABEL_170;
      }
    }
  }
  unsigned int v100 = 0;
  unsigned int v101 = 2;
  unint64_t v99 = (uint64_t *)v384;
LABEL_170:
  if (v99 == v45) {
    uint64_t v102 = v100;
  }
  else {
    uint64_t v102 = v101;
  }
  uint64_t v103 = v99;
  if (v102)
  {
    uint64_t v104 = 8 * v102;
    uint64_t v103 = v99;
    while ((unint64_t)*v103 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v103;
      v104 -= 8;
      if (!v104) {
        goto LABEL_194;
      }
    }
  }
  int v105 = &v99[v102];
  if (v103 != v105)
  {
    uint64_t v106 = *v103;
LABEL_180:
    v401 = 0;
    if (sub_1CC0BE388((uint64_t)&v398, v106, &v401))
    {
      int v107 = v401;
      unsigned int v108 = (char *)*((void *)v401 + 11);
      if (v108 != (char *)v401 + 104) {
        free(v108);
      }
      if ((v107[8] & 1) == 0) {
        MEMORY[0x1D25D9CD0](v107[9], 8);
      }
      uint64_t v109 = (char *)v107[4];
      if (v109 != (char *)(v107 + 6)) {
        free(v109);
      }
      if ((v107[1] & 1) == 0) {
        MEMORY[0x1D25D9CD0](v107[2], 8);
      }
      void *v107 = -8192;
      LODWORD(v398) = v398 - 2;
      ++HIDWORD(v398);
    }
    uint64_t v110 = (unint64_t *)(v103 + 1);
    while (v110 != (unint64_t *)v105)
    {
      unint64_t v111 = *v110++;
      uint64_t v106 = v111;
      if (v111 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v103 = (uint64_t *)(v110 - 1);
        goto LABEL_180;
      }
    }
  }
LABEL_194:
  v394 = v396;
  uint64_t v395 = 0x1000000000;
  v391 = (char *)&v393;
  uint64_t v392 = 0x800000000;
  unsigned int v112 = a3;
  if (a3)
  {
    unsigned int v112 = 0;
    for (uint64_t j = a2; j != v6; j += 16)
    {
      if (v398) {
        int v114 = (void **)&v399;
      }
      else {
        int v114 = v399;
      }
      if (v398) {
        int v115 = 4;
      }
      else {
        int v115 = v400;
      }
      if (v115)
      {
        uint64_t v116 = (llvm::BasicBlock *)(*(void *)(j + 8) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v117 = (v116 >> 4) ^ (v116 >> 9);
        int v118 = v115 - 1;
        unsigned int v119 = v118 & v117;
        uint64_t v120 = (llvm::BasicBlock *)v114[15 * (v118 & v117)];
        if (v120 != v116)
        {
          int v148 = 1;
          while (v120 != (llvm::BasicBlock *)-4096)
          {
            unsigned int v149 = v119 + v148++;
            unsigned int v119 = v149 & v118;
            uint64_t v120 = (llvm::BasicBlock *)v114[15 * v119];
            if (v120 == v116) {
              goto LABEL_204;
            }
          }
          continue;
        }
LABEL_204:
        uint64_t v121 = *a1;
        __int32 v122 = (*a1)[5].i32[0];
        if (!v122) {
          goto LABEL_210;
        }
        int32x2_t v123 = v121[3];
        __int32 v124 = v122 - 1;
        uint64_t v125 = v124 & v117;
        uint64_t v126 = *(llvm::BasicBlock **)(*(void *)&v123 + 16 * v125);
        if (v126 != v116)
        {
          int v127 = 1;
          while (v126 != (llvm::BasicBlock *)-4096)
          {
            int v128 = v125 + v127++;
            uint64_t v125 = v128 & v124;
            uint64_t v126 = *(llvm::BasicBlock **)(*(void *)&v123 + 16 * v125);
            if (v126 == v116) {
              goto LABEL_209;
            }
          }
LABEL_210:
          MemoryPhuint64_t i = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)v121, v116);
          v401 = (void *)4;
          uint64_t v402 = 0;
          *(void *)v403 = MemoryPhi;
          if (MemoryPhi != (char *)-8192 && MemoryPhi != (char *)-4096 && MemoryPhi) {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v401);
          }
          uint64_t v130 = v391;
          if (v392 >= HIDWORD(v392))
          {
            unint64_t v150 = v392 + 1;
            if (v391 <= (char *)&v401 && &v391[24 * v392] > (char *)&v401)
            {
              uint64_t v151 = j;
              uint64_t v152 = (char *)&v401 - v391;
              sub_1CC0BD844((unsigned int *)&v391, v150);
              uint64_t v130 = v391;
              uint64_t v131 = (void **)&v391[v152];
              uint64_t j = v151;
            }
            else
            {
              sub_1CC0BD844((unsigned int *)&v391, v150);
              uint64_t v131 = &v401;
              uint64_t v130 = v391;
            }
          }
          else
          {
            uint64_t v131 = &v401;
          }
          int v132 = v392;
          uint64_t v133 = (unint64_t *)&v130[24 * v392];
          *uint64_t v133 = 4;
          v133[1] = 0;
          int v134 = v131[2];
          v133[2] = (unint64_t)v134;
          if (v134 != (void *)-8192 && v134 != (void *)-4096)
          {
            if (v134)
            {
              unint64_t v135 = (unint64_t)*v131 & 0xFFFFFFFFFFFFFFF8;
              v133[1] = *(void *)v135;
              *(void *)unint64_t v135 = v133;
              *uint64_t v133 = v135 | 4;
              int v136 = (unint64_t *)v133[1];
              if (v136) {
                *int v136 = *v136 & 7 | (unint64_t)(v133 + 1);
              }
            }
          }
          unsigned int v112 = v132 + 1;
          LODWORD(v392) = v132 + 1;
          if (*(void *)v403 != -8192 && *(void *)v403 != -4096 && *(void *)v403)
          {
            unint64_t v137 = (unint64_t)v401 & 0xFFFFFFFFFFFFFFF8;
            *(void *)((unint64_t)v401 & 0xFFFFFFFFFFFFFFF8) = v402;
            if (v402)
            {
              *(void *)uint64_t v402 = *(void *)v402 & 7 | v137;
            }
            else
            {
              uint64_t v138 = *(void *)v403;
              uint64_t v139 = ****(int32x2_t *****)v403;
              unint64_t v140 = (unint64_t)v139[303];
              if (v140 <= v137)
              {
                uint64_t v141 = v139[305].u32[0];
                if (v140 + 16 * v141 > v137)
                {
                  unsigned int v142 = v141 - 1;
                  LODWORD(v143) = v142 & ((v403[0] >> 4) ^ (v403[0] >> 9));
                  uint64_t v144 = (uint64_t *)(v140 + 16 * v143);
                  uint64_t v145 = *v144;
                  if (*(void *)v403 == *v144)
                  {
LABEL_232:
                    *uint64_t v144 = -8192;
                    v139[304] = vadd_s32(v139[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v138 = *(void *)v403;
                  }
                  else
                  {
                    int v146 = 1;
                    while (v145 != -4096)
                    {
                      int v147 = v143 + v146++;
                      uint64_t v143 = v147 & v142;
                      uint64_t v145 = *(void *)(v140 + 16 * v143);
                      if (*(void *)v403 == v145)
                      {
                        uint64_t v144 = (uint64_t *)(v140 + 16 * v143);
                        goto LABEL_232;
                      }
                    }
                  }
                  *(unsigned char *)(v138 + 17) &= ~1u;
                }
              }
            }
          }
          continue;
        }
LABEL_209:
        if (!*(void *)(*(void *)&v123 + 16 * v125 + 8)) {
          goto LABEL_210;
        }
      }
    }
  }
  int v153 = v398;
  if (v398 > 1)
  {
    uint64_t v159 = &v401;
    unsigned int v154 = (void **)&v399;
    if ((v398 & 1) == 0)
    {
      unsigned int v154 = v399;
      unsigned int v155 = v400;
      if (!v400)
      {
        int v153 = 0;
        uint64_t v158 = v399;
        uint64_t v159 = v399;
        goto LABEL_258;
      }
      uint64_t v159 = &v399[15 * v400];
    }
    int v153 = v398 & 1;
    while (((unint64_t)*v154 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v154 += 15;
      if (v154 == v159)
      {
        unsigned int v154 = v159;
        break;
      }
    }
    uint64_t v158 = v154;
    unsigned int v154 = v399;
    unsigned int v155 = v400;
  }
  else
  {
    unsigned int v154 = v399;
    unsigned int v155 = v400;
    int v156 = (void **)&v399;
    if (v398)
    {
      unsigned int v157 = 4;
    }
    else
    {
      int v156 = v399;
      unsigned int v157 = v400;
    }
    uint64_t v158 = &v156[15 * v157];
    uint64_t v159 = v158;
  }
LABEL_258:
  BOOL v160 = v153 == 0;
  if (v153) {
    uint64_t v161 = (void **)&v399;
  }
  else {
    uint64_t v161 = v154;
  }
  if (!v160) {
    unsigned int v155 = 4;
  }
  v349 = &v161[15 * v155];
  if (v158 != v349)
  {
    v350 = v159;
    while (1)
    {
      uint64_t v162 = *v158;
      v401 = (void *)1;
      for (uint64_t k = 8; k != 72; k += 16)
        *(void **)((char *)&v401 + k) = (void *)-4096;
      uint64_t v164 = *((unsigned int *)v158 + 10);
      if (v164)
      {
        uint64_t v165 = (uint64_t *)v158[4];
        uint64_t v166 = 8 * v164;
        do
        {
          uint64_t v167 = *v165++;
          v374 = (char *)v167;
          uint64_t v168 = sub_1CC0BBA04(v385, v167);
          sub_1CC0BEBD8(&v401, (uint64_t *)&v374)[1] = v168;
          v166 -= 8;
        }
        while (v166);
      }
      int32x2_t v169 = (*a1)[3];
      int v170 = (*a1)[5].i32[0] - 1;
      unsigned int v171 = v170 & ((v162 >> 4) ^ (v162 >> 9));
      unsigned int v172 = (void *)(*(void *)&v169 + 16 * v171);
      uint64_t v173 = *v172;
      if (v162 != (void *)*v172)
      {
        uint64_t v174 = 0;
        int v175 = 1;
        while (v173 != -4096)
        {
          if (v174) {
            BOOL v176 = 0;
          }
          else {
            BOOL v176 = v173 == -8192;
          }
          if (v176) {
            uint64_t v174 = v172;
          }
          unsigned int v177 = v171 + v175++;
          unsigned int v171 = v177 & v170;
          unsigned int v172 = (void *)(*(void *)&v169 + 16 * (v177 & v170));
          uint64_t v173 = *v172;
          if (v162 == (void *)*v172) {
            goto LABEL_282;
          }
        }
        if (v174) {
          unsigned int v172 = v174;
        }
      }
LABEL_282:
      int v178 = (_DWORD *)v172[1];
      v360 = v162;
      if ((v178[5] & 0x7FFFFFF) != 0)
      {
        unsigned int v352 = (v162 >> 4) ^ (v162 >> 9);
        v354 = v158;
        uint64_t v179 = *((unsigned int *)v158 + 10);
        if (v179)
        {
          int v180 = (uint64_t *)v158[4];
          __pa = &v180[v179];
          do
          {
            v363 = v180;
            v387 = (char *)*v180;
            uint64_t v181 = v387;
            uint64_t v371 = sub_1CC0BEBD8(&v401, (uint64_t *)&v387)[1];
            v374 = v181;
            v375 = v162;
            int v368 = *((_DWORD *)sub_1CBFEC774((uint64_t)v397, (uint64_t *)&v374) + 4);
            if (v368 >= 1)
            {
              int v182 = 0;
              uint64_t v183 = (uint64_t *)(v371 + 8);
              LODWORD(v184) = v178[19];
              do
              {
                uint64_t v185 = (uint64_t)v387;
                int v186 = v178[5];
                if ((v186 & 0x7FFFFFF) == v184)
                {
                  unsigned int v187 = v184 + (v184 >> 1);
                  if (v187 <= 2) {
                    uint64_t v188 = 2;
                  }
                  else {
                    uint64_t v188 = v187;
                  }
                  v178[19] = v188;
                  if ((v186 & 0x40000000) != 0) {
                    uint64_t v189 = (uint64_t *)*((void *)v178 - 1);
                  }
                  else {
                    uint64_t v189 = (uint64_t *)&v178[-8 * v184];
                  }
                  uint64_t v190 = operator new(40 * v188);
                  *((void *)v178 - 1) = v190;
                  v191 = v190;
                  do
                  {
                    void *v191 = 0;
                    v191[1] = 0;
                    v191[2] = 0;
                    v191[3] = v178;
                    v191 += 4;
                  }
                  while (v191 != &v190[4 * v188]);
                  int v192 = v178[5];
                  if ((v192 & 0x40000000) != 0) {
                    uint64_t v193 = (uint64_t)v190;
                  }
                  else {
                    uint64_t v193 = (uint64_t)&v178[-8 * (v192 & 0x7FFFFFF)];
                  }
                  sub_1CC5E4108((uint64_t)&v374, v189, &v189[4 * v184], v193);
                  if (v184)
                  {
                    memmove((void *)(v193 + 32 * v188), &v189[4 * v184], 8 * v184);
                    uint64_t v194 = 4 * v184;
                    do
                    {
                      uint64_t v195 = &v189[v194];
                      if (v189[v194 - 4])
                      {
                        *(void *)*(v195 - 2) = *(v195 - 3);
                        uint64_t v196 = *(v195 - 3);
                        if (v196) {
                          *(void *)(v196 + 16) = *(v195 - 2);
                        }
                      }
                      v194 -= 4;
                    }
                    while (v194 * 8);
                  }
                  operator delete(v189);
                  int v186 = v178[5];
                }
                uint64_t v197 = (v186 + 1) & 0x7FFFFFF;
                v178[5] = v186 & 0xF8000000 | (v186 + 1) & 0x7FFFFFF;
                if ((v186 & 0x40000000) != 0) {
                  uint64_t v198 = (_DWORD *)*((void *)v178 - 1);
                }
                else {
                  uint64_t v198 = &v178[-8 * v197];
                }
                uint64_t v199 = (v197 - 1);
                uint64_t v200 = &v198[8 * v199];
                if (*(void *)v200)
                {
                  **((void **)v200 + 2) = *((void *)v200 + 1);
                  uint64_t v206 = *((void *)v200 + 1);
                  if (v206) {
                    *(void *)(v206 + 16) = *((void *)v200 + 2);
                  }
                }
                *(void *)uint64_t v200 = v371;
                if (v371)
                {
                  uint64_t v201 = *v183;
                  unint64_t v202 = &v198[8 * v199];
                  *((void *)v202 + 1) = *v183;
                  if (v201) {
                    *(void *)(v201 + 16) = v202 + 2;
                  }
                  *((void *)v202 + 2) = v183;
                  *uint64_t v183 = (uint64_t)v200;
                }
                int v203 = v178[5];
                uint64_t v204 = v203 & 0x7FFFFFF;
                if ((v203 & 0x40000000) != 0) {
                  unint64_t v205 = (_DWORD *)*((void *)v178 - 1);
                }
                else {
                  unint64_t v205 = &v178[-8 * v204];
                }
                uint64_t v184 = v178[19];
                *(void *)&v205[8 * v184 + 2 * (v204 - 1)] = v185;
                ++v182;
              }
              while (v182 != v368);
            }
            int v180 = v363 + 1;
            uint64_t v162 = v360;
          }
          while (v363 + 1 != __pa);
        }
        goto LABEL_422;
      }
      v369 = (llvm::Value *)sub_1CC0BBA04(v385, *(void *)v158[11]);
      int v207 = (int)v401;
      if (v401 <= 1)
      {
        long long v209 = (uint64_t *)v402;
        unsigned int v211 = v403[0];
        v319 = &v402;
        if (v401)
        {
          unsigned int v320 = 4;
        }
        else
        {
          v319 = (uint64_t *)v402;
          unsigned int v320 = v403[0];
        }
        v210 = &v319[2 * v320];
        uint64_t v208 = v210;
      }
      else
      {
        uint64_t v208 = (uint64_t *)v404;
        long long v209 = &v402;
        if (v401) {
          goto LABEL_325;
        }
        long long v209 = (uint64_t *)v402;
        if (v403[0])
        {
          uint64_t v208 = (uint64_t *)(v402 + 16 * v403[0]);
LABEL_325:
          int v207 = v401 & 1;
          while ((*v209 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v209 += 2;
            if (v209 == v208)
            {
              long long v209 = v208;
              break;
            }
          }
          v210 = v209;
          long long v209 = (uint64_t *)v402;
          unsigned int v211 = v403[0];
          goto LABEL_330;
        }
        int v207 = 0;
        unsigned int v211 = 0;
        v210 = (uint64_t *)v402;
        uint64_t v208 = (uint64_t *)v402;
      }
LABEL_330:
      BOOL v26 = v207 == 0;
      int v212 = &v402;
      if (v26)
      {
        int v212 = v209;
        unsigned int v213 = v211;
      }
      else
      {
        unsigned int v213 = 4;
      }
      uint64_t v214 = &v212[2 * v213];
      if (v210 == v214) {
        goto LABEL_467;
      }
      char v215 = 0;
      do
      {
        v216 = (llvm::Value *)v210[1];
        BOOL v26 = v369 == v216;
        BOOL v217 = v369 != v216;
        if (!v26) {
          goto LABEL_344;
        }
        uint64_t v218 = v210 + 2;
        v210 = v208;
        if (v218 != v208)
        {
          v210 = v218;
          while ((*v210 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v210 += 2;
            if (v210 == v208)
            {
              v210 = v208;
              break;
            }
          }
        }
        v215 |= v217;
      }
      while (v210 != v214);
      if ((v215 & 1) == 0)
      {
LABEL_467:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v178, v369, (llvm::Value *)1);
        llvm::MemorySSAUpdater::removeMemoryAccess(a1, (llvm::MemoryAccess *)v178, 0);
        goto LABEL_486;
      }
LABEL_344:
      unsigned int v352 = (v162 >> 4) ^ (v162 >> 9);
      v354 = v158;
      uint64_t v219 = *((unsigned int *)v158 + 10);
      if (v219)
      {
        uint64_t v220 = (uint64_t *)v158[4];
        v355 = &v220[v219];
        do
        {
          __pb = v220;
          v387 = (char *)*v220;
          uint64_t v221 = v387;
          uint64_t v372 = sub_1CC0BEBD8(&v401, (uint64_t *)&v387)[1];
          v374 = v221;
          v375 = v162;
          int v364 = *((_DWORD *)sub_1CBFEC774((uint64_t)v397, (uint64_t *)&v374) + 4);
          if (v364 >= 1)
          {
            int v222 = 0;
            v223 = (uint64_t *)(v372 + 8);
            LODWORD(v224) = v178[19];
            do
            {
              uint64_t v225 = (uint64_t)v387;
              int v226 = v178[5];
              if ((v226 & 0x7FFFFFF) == v224)
              {
                unsigned int v227 = v224 + (v224 >> 1);
                if (v227 <= 2) {
                  uint64_t v228 = 2;
                }
                else {
                  uint64_t v228 = v227;
                }
                v178[19] = v228;
                if ((v226 & 0x40000000) != 0) {
                  v229 = (uint64_t *)*((void *)v178 - 1);
                }
                else {
                  v229 = (uint64_t *)&v178[-8 * v224];
                }
                v230 = operator new(40 * v228);
                *((void *)v178 - 1) = v230;
                uint64_t v231 = v230;
                do
                {
                  *uint64_t v231 = 0;
                  v231[1] = 0;
                  v231[2] = 0;
                  v231[3] = v178;
                  v231 += 4;
                }
                while (v231 != &v230[4 * v228]);
                int v232 = v178[5];
                if ((v232 & 0x40000000) != 0) {
                  uint64_t v233 = (uint64_t)v230;
                }
                else {
                  uint64_t v233 = (uint64_t)&v178[-8 * (v232 & 0x7FFFFFF)];
                }
                sub_1CC5E4108((uint64_t)&v374, v229, &v229[4 * v224], v233);
                if (v224)
                {
                  memmove((void *)(v233 + 32 * v228), &v229[4 * v224], 8 * v224);
                  uint64_t v234 = 4 * v224;
                  do
                  {
                    v235 = &v229[v234];
                    if (v229[v234 - 4])
                    {
                      *(void *)*(v235 - 2) = *(v235 - 3);
                      uint64_t v236 = *(v235 - 3);
                      if (v236) {
                        *(void *)(v236 + 16) = *(v235 - 2);
                      }
                    }
                    v234 -= 4;
                  }
                  while (v234 * 8);
                }
                operator delete(v229);
                int v226 = v178[5];
              }
              uint64_t v237 = (v226 + 1) & 0x7FFFFFF;
              v178[5] = v226 & 0xF8000000 | (v226 + 1) & 0x7FFFFFF;
              if ((v226 & 0x40000000) != 0) {
                v238 = (_DWORD *)*((void *)v178 - 1);
              }
              else {
                v238 = &v178[-8 * v237];
              }
              uint64_t v239 = (v237 - 1);
              v240 = &v238[8 * v239];
              if (*(void *)v240)
              {
                **((void **)v240 + 2) = *((void *)v240 + 1);
                uint64_t v246 = *((void *)v240 + 1);
                if (v246) {
                  *(void *)(v246 + 16) = *((void *)v240 + 2);
                }
              }
              *(void *)v240 = v372;
              if (v372)
              {
                uint64_t v241 = *v223;
                uint64_t v242 = &v238[8 * v239];
                *((void *)v242 + 1) = *v223;
                if (v241) {
                  *(void *)(v241 + 16) = v242 + 2;
                }
                *((void *)v242 + 2) = v223;
                uint64_t *v223 = (uint64_t)v240;
              }
              int v243 = v178[5];
              uint64_t v244 = v243 & 0x7FFFFFF;
              if ((v243 & 0x40000000) != 0) {
                v245 = (_DWORD *)*((void *)v178 - 1);
              }
              else {
                v245 = &v178[-8 * v244];
              }
              uint64_t v224 = v178[19];
              *(void *)&v245[8 * v224 + 2 * (v244 - 1)] = v225;
              ++v222;
            }
            while (v222 != v364);
          }
          uint64_t v220 = __pb + 1;
          uint64_t v162 = v360;
        }
        while (__pb + 1 != v355);
      }
      uint64_t v247 = *((unsigned int *)v354 + 24);
      if (v247)
      {
        v248 = (char **)v354[11];
        __pc = &v248[v247];
        v249 = (uint64_t *)((char *)v369 + 8);
        do
        {
          v365 = v248;
          v373 = *v248;
          v374 = *v248;
          v375 = v162;
          int v250 = *((_DWORD *)sub_1CBFEC774((uint64_t)v397, (uint64_t *)&v374) + 4);
          if (v250 >= 1)
          {
            int v251 = 0;
            LODWORD(v252) = v178[19];
            do
            {
              int v253 = v178[5];
              if ((v253 & 0x7FFFFFF) == v252)
              {
                unsigned int v254 = v252 + (v252 >> 1);
                if (v254 <= 2) {
                  uint64_t v255 = 2;
                }
                else {
                  uint64_t v255 = v254;
                }
                v178[19] = v255;
                if ((v253 & 0x40000000) != 0) {
                  v256 = (uint64_t *)*((void *)v178 - 1);
                }
                else {
                  v256 = (uint64_t *)&v178[-8 * v252];
                }
                v257 = operator new(40 * v255);
                *((void *)v178 - 1) = v257;
                v258 = v257;
                do
                {
                  void *v258 = 0;
                  v258[1] = 0;
                  v258[2] = 0;
                  v258[3] = v178;
                  v258 += 4;
                }
                while (v258 != &v257[4 * v255]);
                int v259 = v178[5];
                if ((v259 & 0x40000000) != 0) {
                  uint64_t v260 = (uint64_t)v257;
                }
                else {
                  uint64_t v260 = (uint64_t)&v178[-8 * (v259 & 0x7FFFFFF)];
                }
                sub_1CC5E4108((uint64_t)&v374, v256, &v256[4 * v252], v260);
                if (v252)
                {
                  memmove((void *)(v260 + 32 * v255), &v256[4 * v252], 8 * v252);
                  uint64_t v261 = 4 * v252;
                  do
                  {
                    v262 = &v256[v261];
                    if (v256[v261 - 4])
                    {
                      *(void *)*(v262 - 2) = *(v262 - 3);
                      uint64_t v263 = *(v262 - 3);
                      if (v263) {
                        *(void *)(v263 + 16) = *(v262 - 2);
                      }
                    }
                    v261 -= 4;
                  }
                  while (v261 * 8);
                }
                operator delete(v256);
                int v253 = v178[5];
              }
              uint64_t v264 = (v253 + 1) & 0x7FFFFFF;
              v178[5] = v253 & 0xF8000000 | (v253 + 1) & 0x7FFFFFF;
              if ((v253 & 0x40000000) != 0) {
                v265 = (_DWORD *)*((void *)v178 - 1);
              }
              else {
                v265 = &v178[-8 * v264];
              }
              uint64_t v266 = (v264 - 1);
              v267 = &v265[8 * v266];
              if (*(void *)v267)
              {
                **((void **)v267 + 2) = *((void *)v267 + 1);
                uint64_t v273 = *((void *)v267 + 1);
                if (v273) {
                  *(void *)(v273 + 16) = *((void *)v267 + 2);
                }
              }
              *(void *)v267 = v369;
              if (v369)
              {
                uint64_t v268 = *v249;
                v269 = &v265[8 * v266];
                *((void *)v269 + 1) = *v249;
                if (v268) {
                  *(void *)(v268 + 16) = v269 + 2;
                }
                *((void *)v269 + 2) = v249;
                uint64_t *v249 = (uint64_t)v267;
              }
              int v270 = v178[5];
              uint64_t v271 = v270 & 0x7FFFFFF;
              if ((v270 & 0x40000000) != 0) {
                v272 = (_DWORD *)*((void *)v178 - 1);
              }
              else {
                v272 = &v178[-8 * v271];
              }
              uint64_t v252 = v178[19];
              *(void *)&v272[8 * v252 + 2 * (v271 - 1)] = v373;
              ++v251;
            }
            while (v251 != v250);
          }
          v248 = v365 + 1;
          uint64_t v162 = v360;
        }
        while (v365 + 1 != __pc);
      }
LABEL_422:
      uint64_t v158 = v354;
      v274 = (uint64_t *)v354[11];
      uint64_t v275 = *v274;
      uint64_t v276 = *((unsigned int *)v354 + 24);
      uint64_t v277 = *(void *)(a4 + 24);
      uint64_t v278 = *(unsigned int *)(a4 + 40);
      if (v276)
      {
        v279 = &v274[v276];
        unsigned int v280 = v278 - 1;
        v281 = (uint64_t *)(v277 + 16 * v278);
        unsigned int v282 = v352;
        while (1)
        {
          uint64_t v283 = *v274;
          uint64_t v284 = *(void *)(*(void *)(v275 + 56) + 80);
          uint64_t v285 = v284 ? v284 - 24 : 0;
          if (v285 != v275 && v285 != v283) {
            break;
          }
          uint64_t v275 = v285;
LABEL_455:
          if (++v274 == v279) {
            goto LABEL_461;
          }
        }
        LODWORD(v287) = ((v275 >> 4) ^ (v275 >> 9)) & v280;
        v288 = (uint64_t *)(v277 + 16 * v287);
        uint64_t v289 = *v288;
        if (*v288 == v275)
        {
LABEL_436:
          if (v288 != v281)
          {
            uint64_t v292 = v288[1];
            goto LABEL_438;
          }
        }
        else
        {
          int v290 = 1;
          while (v289 != -4096)
          {
            int v291 = v287 + v290++;
            uint64_t v287 = v291 & v280;
            uint64_t v289 = *(void *)(v277 + 16 * v287);
            if (v289 == v275)
            {
              v288 = (uint64_t *)(v277 + 16 * v287);
              goto LABEL_436;
            }
          }
        }
        uint64_t v292 = 0;
LABEL_438:
        LODWORD(v293) = ((v283 >> 4) ^ (v283 >> 9)) & v280;
        v294 = (uint64_t *)(v277 + 16 * v293);
        uint64_t v295 = *v294;
        if (*v294 == v283)
        {
LABEL_443:
          if (v294 != v281)
          {
            uint64_t v298 = v294[1];
LABEL_445:
            if (v292 == v298)
            {
              uint64_t v298 = v292;
            }
            else
            {
              do
              {
                unsigned int v299 = *(_DWORD *)(v292 + 16);
                unsigned int v300 = *(_DWORD *)(v298 + 16);
                BOOL v301 = v299 >= v300;
                if (v299 >= v300) {
                  uint64_t v302 = v292;
                }
                else {
                  uint64_t v302 = v298;
                }
                if (!v301) {
                  uint64_t v298 = v292;
                }
                uint64_t v292 = *(void *)(v302 + 8);
              }
              while (v292 != v298);
            }
            uint64_t v275 = *(void *)v298;
            goto LABEL_455;
          }
        }
        else
        {
          int v296 = 1;
          while (v295 != -4096)
          {
            int v297 = v293 + v296++;
            uint64_t v293 = v297 & v280;
            uint64_t v295 = *(void *)(v277 + 16 * v293);
            if (v295 == v283)
            {
              v294 = (uint64_t *)(v277 + 16 * v293);
              goto LABEL_443;
            }
          }
        }
        uint64_t v298 = 0;
        goto LABEL_445;
      }
      unsigned int v282 = v352;
LABEL_461:
      if (v278)
      {
        LODWORD(v303) = (v278 - 1) & v282;
        v304 = (void **)(v277 + 16 * v303);
        v305 = *v304;
        if (v162 == *v304) {
          goto LABEL_469;
        }
        int v306 = 1;
        while (v305 != (void *)-4096)
        {
          int v307 = v303 + v306++;
          uint64_t v303 = v307 & (v278 - 1);
          v305 = *(void **)(v277 + 16 * v303);
          if (v162 == v305)
          {
            v304 = (void **)(v277 + 16 * v303);
            goto LABEL_469;
          }
        }
      }
      v304 = (void **)(v277 + 16 * v278);
LABEL_469:
      uint64_t v308 = **((void **)v304[1] + 1);
      if (v275 != v308)
      {
        unsigned int v309 = v395;
        while (1)
        {
          if (v309 >= HIDWORD(v395)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v394 + v309) = v275;
          unsigned int v309 = v395 + 1;
          LODWORD(v395) = v395 + 1;
          uint64_t v310 = *(void *)(a4 + 24);
          uint64_t v311 = *(unsigned int *)(a4 + 40);
          if (!v311) {
            goto LABEL_478;
          }
          LODWORD(v312) = (v311 - 1) & ((v275 >> 4) ^ (v275 >> 9));
          v313 = (uint64_t *)(v310 + 16 * v312);
          uint64_t v314 = *v313;
          if (v275 != *v313) {
            break;
          }
LABEL_479:
          uint64_t v275 = **(void **)(v313[1] + 8);
          if (v275) {
            BOOL v317 = v275 == v308;
          }
          else {
            BOOL v317 = 1;
          }
          if (v317) {
            goto LABEL_486;
          }
        }
        int v315 = 1;
        while (v314 != -4096)
        {
          int v316 = v312 + v315++;
          uint64_t v312 = v316 & (v311 - 1);
          uint64_t v314 = *(void *)(v310 + 16 * v312);
          if (v275 == v314)
          {
            v313 = (uint64_t *)(v310 + 16 * v312);
            goto LABEL_479;
          }
        }
LABEL_478:
        v313 = (uint64_t *)(v310 + 16 * v311);
        goto LABEL_479;
      }
LABEL_486:
      if ((v401 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v402, 8);
      }
      v318 = v158 + 15;
      uint64_t v158 = v350;
      if (v318 != v350)
      {
        uint64_t v158 = v318;
        while (((unint64_t)*v158 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v158 += 15;
          if (v158 == v350)
          {
            uint64_t v158 = v350;
            break;
          }
        }
      }
      if (v158 == v349)
      {
        unsigned int v112 = v392;
        break;
      }
    }
  }
  if (!v112)
  {
    v388 = v390;
    uint64_t v389 = 0x800000000;
LABEL_518:
    v401 = v403;
    uint64_t v402 = 0x2000000000;
    goto LABEL_519;
  }
  uint64_t v321 = 24 * v112;
  v322 = v391 + 16;
  do
  {
    if (*(void *)v322) {
      llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)a1, *(_DWORD **)v322);
    }
    v322 += 24;
    v321 -= 24;
  }
  while (v321);
  v388 = v390;
  uint64_t v389 = 0x800000000;
  if (!v392) {
    goto LABEL_518;
  }
  unsigned int v323 = 0;
  uint64_t v324 = 24 * v392;
  v325 = v391 + 16;
  do
  {
    if (*(void *)v325)
    {
      if (v323 >= HIDWORD(v389)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v388 + v323) = *(void *)(*(void *)v325 + 64);
      unsigned int v323 = v389 + 1;
      LODWORD(v389) = v389 + 1;
    }
    v325 += 24;
    v324 -= 24;
  }
  while (v324);
  v401 = v403;
  uint64_t v402 = 0x2000000000;
  if (v323)
  {
    uint64_t v376 = a4;
    uint64_t v377 = v386;
    char v378 = 0;
    sub_1CC0BED68((llvm::SmallPtrSetImplBase *)&v374, (uint64_t *)v388, (uint64_t *)v388 + v323);
    v379 = &v374;
    sub_1CC0A8014();
  }
LABEL_519:
  if (v395)
  {
    for (m = v394; m != (void *)((char *)v394 + 8 * v395); ++m)
    {
      int32x2_t v327 = (*a1)[9];
      uint64_t v328 = (*a1)[11].u32[0];
      if (v328)
      {
        LODWORD(v329) = ((*m >> 4) ^ (*m >> 9)) & (v328 - 1);
        v330 = (uint64_t *)(*(void *)&v327 + 16 * v329);
        uint64_t v331 = *v330;
        if (*m == *v330) {
          goto LABEL_528;
        }
        int v332 = 1;
        while (v331 != -4096)
        {
          int v333 = v329 + v332++;
          uint64_t v329 = v333 & (v328 - 1);
          uint64_t v331 = *(void *)(*(void *)&v327 + 16 * v329);
          if (*m == v331)
          {
            v330 = (uint64_t *)(*(void *)&v327 + 16 * v329);
            goto LABEL_528;
          }
        }
      }
      v330 = (uint64_t *)(*(void *)&v327 + 16 * v328);
LABEL_528:
      if (v330 != (uint64_t *)(*(void *)&v327 + 16 * v328))
      {
        uint64_t v334 = v330[1];
        if (v334)
        {
          for (uint64_t n = *(void *)(v334 + 8); n != v334; uint64_t n = *(void *)(n + 8))
          {
            uint64_t v336 = n - 48;
            if (!n) {
              uint64_t v336 = 0;
            }
            uint64_t v337 = *(void *)(v336 + 8);
            if (v337)
            {
              uint64_t v338 = *(void *)(v337 + 24);
              if (v338) {
                BOOL v339 = *(unsigned char *)(v338 + 16) == 27;
              }
              else {
                BOOL v339 = 0;
              }
              if (!v339) {
                llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
              }
              llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
            }
          }
        }
      }
    }
  }
  if (v392)
  {
    uint64_t v340 = 24 * v392;
    v341 = v391 + 16;
    do
    {
      if (*(void *)v341) {
        llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)a1, *(_DWORD **)v341);
      }
      v341 += 24;
      v340 -= 24;
    }
    while (v340);
  }
  if (v401 != v403) {
    free(v401);
  }
  if (v388 != v390) {
    free(v388);
  }
  sub_1CC0BDE04(&v391);
  if (v394 != v396) {
    free(v394);
  }
  if (v381 != v380) {
    free(v381);
  }
  if ((v397[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v397[1], 8);
  }
  char v342 = v398;
  if (v398 & 1 | v400)
  {
    v343 = v399;
    if (v398)
    {
      v343 = (void **)&v399;
      uint64_t v344 = 4;
    }
    else
    {
      uint64_t v344 = v400;
    }
    if (v344)
    {
      uint64_t v345 = 120 * v344;
      v346 = v343 + 13;
      do
      {
        if (((unint64_t)*(v346 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v347 = (void **)*(v346 - 2);
          if (v346 != v347) {
            free(v347);
          }
          if ((*(unsigned char *)(v346 - 5) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(v346 - 4), 8);
          }
          v348 = (void **)*(v346 - 9);
          if (v346 - 7 != v348) {
            free(v348);
          }
          if ((*(unsigned char *)(v346 - 12) & 1) == 0) {
            MEMORY[0x1D25D9CD0](*(v346 - 11), 8);
          }
        }
        v346 += 15;
        v345 -= 120;
      }
      while (v345);
      char v342 = v398;
    }
  }
  if ((v342 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v399, 8);
  }
}

unsigned char *sub_1CC0BB774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  do
  {
    a2 = *(void *)(a2 + 8);
    if (!a2) {
      break;
    }
    uint64_t v6 = *(void *)(a2 + 24);
    unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    BOOL v8 = v6 && v7 >= 0x1C;
  }
  while (!v8 || v7 - 29 >= 0xB);
  *a3 = (char *)(a3 + 2);
  a3[1] = (char *)0x800000000;
  uint64_t result = (unsigned char *)sub_1CBF846A4((uint64_t)a3, a2, 0);
  int v11 = *a3;
  uint64_t v12 = *((unsigned int *)a3 + 2);
  unsigned int v13 = *a3;
  if (v12)
  {
    uint64_t v14 = 8 * v12;
    unsigned int v13 = *a3;
    while (*(void *)v13)
    {
      v13 += 8;
      v14 -= 8;
      if (!v14)
      {
        unsigned int v13 = &(*a3)[8 * v12];
        break;
      }
    }
  }
  uint64_t v15 = (v13 - v11) >> 3;
  char v16 = v13 + 8;
  if (v15 != v12 && v16 != &(*a3)[8 * v12])
  {
    uint64_t v18 = 8 * v12 - 8 * v15 - 8;
    do
    {
      if (*(void *)v16)
      {
        *(void *)unsigned int v13 = *(void *)v16;
        v13 += 8;
      }
      v16 += 8;
      v18 -= 8;
    }
    while (v18);
    int v11 = *a3;
  }
  unint64_t v19 = v13 - v11;
  unint64_t v20 = (unint64_t)(v13 - v11) >> 3;
  *((_DWORD *)a3 + 2) = v20;
  int v21 = *(_DWORD *)(a1 + 296);
  uint64_t v22 = a1 + 304;
  if (v21)
  {
    int v24 = 4;
    uint64_t v23 = a1 + 304;
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 304);
    int v24 = *(_DWORD *)(a1 + 312);
    if (!v24)
    {
      unsigned int v25 = 0;
      goto LABEL_37;
    }
  }
  int v26 = v24 - 1;
  unsigned int v27 = (v24 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  uint64_t v28 = v23 + 72 * v27;
  uint64_t result = *(unsigned char **)v28;
  if (*(void *)v28 != v3)
  {
    int v29 = 1;
    while (result != (unsigned char *)-4096)
    {
      unsigned int v30 = v27 + v29++;
      unsigned int v27 = v30 & v26;
      uint64_t v28 = v23 + 72 * (v30 & v26);
      uint64_t result = *(unsigned char **)v28;
      if (*(void *)v28 == v3) {
        goto LABEL_32;
      }
    }
    if (v21)
    {
      unsigned int v25 = 4;
      uint64_t v23 = a1 + 304;
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 304);
      unsigned int v25 = *(_DWORD *)(a1 + 312);
    }
LABEL_37:
    uint64_t v28 = v23 + 72 * v25;
    if (v21) {
      goto LABEL_38;
    }
LABEL_33:
    uint64_t v22 = *(void *)(a1 + 304);
    unsigned int v31 = *(_DWORD *)(a1 + 312);
    goto LABEL_39;
  }
LABEL_32:
  if ((v21 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_38:
  unsigned int v31 = 4;
LABEL_39:
  if (v22 + 72 * v31 != v28)
  {
    uint64_t v32 = *(unsigned int *)(v28 + 16);
    if (v32)
    {
      uint64_t v33 = (v19 >> 3);
      uint64_t v34 = *(uint64_t **)(v28 + 8);
      uint64_t v35 = &v34[v32];
      do
      {
        uint64_t v36 = *v34;
        uint64_t v37 = 8 * v33;
        unint64_t v38 = v11;
        uint64_t v39 = &v11[8 * v33];
        if (v33)
        {
          uint64_t v40 = 8 * v33;
          unint64_t v38 = v11;
          while (*(void *)v38 != v36)
          {
            v38 += 8;
            v40 -= 8;
            if (!v40)
            {
              unint64_t v38 = &v11[8 * v33];
              break;
            }
          }
        }
        uint64_t v41 = (v38 - v11) >> 3;
        if (v41 != v33)
        {
          uint64_t v42 = v38 + 8;
          if (v38 + 8 != v39)
          {
            uint64_t v43 = v37 - 8 * v41 - 8;
            do
            {
              if (*v42 != v36)
              {
                *(void *)unint64_t v38 = *v42;
                v38 += 8;
              }
              ++v42;
              v43 -= 8;
            }
            while (v43);
            int v11 = *a3;
          }
        }
        unint64_t v44 = v38 - v11;
        uint64_t v33 = (v44 >> 3);
        ++v34;
      }
      while (v34 != v35);
      unint64_t v20 = v44 >> 3;
      *((_DWORD *)a3 + 2) = v33;
    }
    uint64_t v45 = *(uint64_t **)(v28 + 40);
    int v46 = &v45[*(unsigned int *)(v28 + 48)];
    return sub_1CC0A3870((uint64_t)a3, (uint64_t)&v11[8 * v20], v45, v46);
  }
  return result;
}

uint64_t sub_1CC0BBA04(uint64_t *a1, uint64_t a2)
{
  v43[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)v4 + 72);
    uint64_t v6 = *(unsigned int *)(*(void *)v4 + 88);
    unsigned int v7 = a2 >> 4;
    if (!v6) {
      goto LABEL_8;
    }
    LODWORD(v8) = (v7 ^ (a2 >> 9)) & (v6 - 1);
    char v9 = (uint64_t *)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (a2 != *v9)
    {
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v6 - 1);
        uint64_t v10 = *(void *)(v5 + 16 * v8);
        if (a2 == v10)
        {
          char v9 = (uint64_t *)(v5 + 16 * v8);
          goto LABEL_9;
        }
      }
LABEL_8:
      char v9 = (uint64_t *)(v5 + 16 * v6);
    }
LABEL_9:
    if (v9 != (uint64_t *)(v5 + 16 * v6))
    {
      unsigned int v13 = (uint64_t *)v9[1];
      if (v13) {
        break;
      }
    }
    sub_1CC0BB774(*(void *)a1[1], a2, (char **)&v41);
    int v14 = v42;
    if (v42)
    {
      uint64_t v15 = (uint64_t *)((char *)v41 + 8);
      if (v42 == 1) {
        uint64_t v15 = (uint64_t *)v41;
      }
      else {
        int v14 = 2;
      }
      uint64_t v16 = *v15;
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (v41 != v43) {
      free(v41);
    }
    uint64_t v17 = a1[2];
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t v19 = *(unsigned int *)(v17 + 40);
    if (v14 == 1)
    {
      if (v19)
      {
        LODWORD(v20) = (v19 - 1) & (v7 ^ (a2 >> 9));
        int v21 = (uint64_t *)(v18 + 16 * v20);
        uint64_t v22 = *v21;
        if (a2 == *v21) {
          goto LABEL_33;
        }
        int v23 = 1;
        while (v22 != -4096)
        {
          int v24 = v20 + v23++;
          uint64_t v20 = v24 & (v19 - 1);
          uint64_t v22 = *(void *)(v18 + 16 * v20);
          if (a2 == v22)
          {
            int v21 = (uint64_t *)(v18 + 16 * v20);
            goto LABEL_33;
          }
        }
      }
      int v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_33:
      if (v21 == (uint64_t *)(v18 + 16 * v19)) {
        return *(void *)(*(void *)v4 + 96);
      }
      a2 = v16;
      if (!v21[1]) {
        return *(void *)(*(void *)v4 + 96);
      }
    }
    else
    {
      if (!v19) {
        goto LABEL_36;
      }
      LODWORD(v25) = (v19 - 1) & (v7 ^ (a2 >> 9));
      int v26 = (uint64_t *)(v18 + 16 * v25);
      uint64_t v27 = *v26;
      if (a2 != *v26)
      {
        int v28 = 1;
        while (v27 != -4096)
        {
          int v29 = v25 + v28++;
          uint64_t v25 = v29 & (v19 - 1);
          uint64_t v27 = *(void *)(v18 + 16 * v25);
          if (a2 == v27)
          {
            int v26 = (uint64_t *)(v18 + 16 * v25);
            goto LABEL_37;
          }
        }
LABEL_36:
        int v26 = (uint64_t *)(v18 + 16 * v19);
      }
LABEL_37:
      unsigned int v30 = (uint64_t *)(v18 + 16 * v19);
      if (v26 == v30 || !v26[1]) {
        return *(void *)(*(void *)v4 + 96);
      }
      if (v19)
      {
        unsigned int v31 = v19 - 1;
        LODWORD(v19) = (v19 - 1) & (v7 ^ (a2 >> 9));
        uint64_t v32 = (uint64_t *)(v18 + 16 * v19);
        uint64_t v33 = *v32;
        if (a2 == *v32) {
          goto LABEL_46;
        }
        int v34 = 1;
        while (v33 != -4096)
        {
          int v35 = v19 + v34++;
          uint64_t v19 = v35 & v31;
          uint64_t v33 = *(void *)(v18 + 16 * v19);
          if (a2 == v33)
          {
            uint64_t v32 = (uint64_t *)(v18 + 16 * v19);
            goto LABEL_46;
          }
        }
      }
      uint64_t v32 = v30;
LABEL_46:
      uint64_t v36 = *(uint64_t **)(v32[1] + 8);
      if (!v36) {
        return *(void *)(*(void *)v4 + 96);
      }
      uint64_t v37 = *v36;
      BOOL v38 = v37 == a2;
      a2 = v37;
      if (v38) {
        return *(void *)(*(void *)v4 + 96);
      }
    }
  }
  uint64_t v40 = *v13;
  if (v40) {
    return v40 - 48;
  }
  else {
    return 0;
  }
}

void llvm::MemorySSAUpdater::moveBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1CC0BBCCC(uint64_t a1, uint64_t a2, const llvm::BasicBlock *a3, void *a4)
{
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v9 = *(void *)(i + 24);
    if (v9) {
      BOOL v10 = *(unsigned char *)(v9 + 16) == 27;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      unint64_t v13 = *(void *)(i + 24);
      sub_1CC0B63B8(a1 + 504, &v13);
    }
  }
  if (*(unsigned char *)(a2 + 16) == 25) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11) {
    int v12 = (llvm::Value **)(v11 - 32);
  }
  else {
    int v12 = (llvm::Value **)(a2 - 64);
  }
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, *v12, (llvm::Value *)1);
  llvm::MemorySSA::moveTo(*(int32x2_t **)a1, a2, a3, a4);
  if (a2 && *(unsigned char *)(a2 + 16) == 26) {
    llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)a1, (llvm::MemoryDef *)a2);
  }
  llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)a1, (llvm::MemoryUse *)a2, 1);
  *(_DWORD *)(a1 + 512) = 0;
  sub_1CD3C5048(a1 + 584, *(void **)(a1 + 592));
  *(void *)(a1 + 584) = a1 + 592;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
}

void llvm::MemorySSAUpdater::moveToPlace(uint64_t *a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  if (a4 != 2) {
    goto LABEL_15;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)*((void *)a3 + 5);
  if (v5 == (void *)((char *)a3 + 40))
  {
    uint64_t v6 = 0;
  }
  else
  {
    if (v5) {
      uint64_t v6 = v5 - 3;
    }
    else {
      uint64_t v6 = 0;
    }
    if (*((unsigned __int8 *)v6 + 16) - 29 >= 0xB) {
      uint64_t v6 = 0;
    }
  }
  int v7 = *(_DWORD *)(v4 + 40);
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  unsigned int v9 = v7 - 1;
  uint64_t v10 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  uint64_t v11 = *(void **)(v8 + 16 * v10);
  if (v6 != v11)
  {
    int v12 = 1;
    while (v11 != (void *)-4096)
    {
      int v13 = v10 + v12++;
      uint64_t v10 = v13 & v9;
      uint64_t v11 = *(void **)(v8 + 16 * v10);
      if (v6 == v11) {
        goto LABEL_13;
      }
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v14 = *(void *)(v8 + 16 * v10 + 8);
  if (!v14)
  {
LABEL_14:
    a4 = 1;
LABEL_15:
    sub_1CC0BBE90((uint64_t)a1, a2, a3, a4);
    return;
  }
  sub_1CC0BBCCC((uint64_t)a1, a2, *(const llvm::BasicBlock **)(v14 + 64), (void *)(v14 + 32));
}

void sub_1CC0BBE90(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, int a4)
{
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v9 = *(void *)(i + 24);
    if (v9) {
      BOOL v10 = *(unsigned char *)(v9 + 16) == 27;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      unint64_t v13 = *(void *)(i + 24);
      sub_1CC0B63B8(a1 + 504, &v13);
    }
  }
  if (*(unsigned char *)(a2 + 16) == 25) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11) {
    int v12 = (llvm::Value **)(v11 - 32);
  }
  else {
    int v12 = (llvm::Value **)(a2 - 64);
  }
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, *v12, (llvm::Value *)1);
  llvm::MemorySSA::moveTo(*(int32x2_t **)a1, a2, a3, a4);
  if (a2 && *(unsigned char *)(a2 + 16) == 26) {
    llvm::MemorySSAUpdater::insertDef((llvm::MemorySSAUpdater *)a1, (llvm::MemoryDef *)a2);
  }
  llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)a1, (llvm::MemoryUse *)a2, 1);
  *(_DWORD *)(a1 + 512) = 0;
  sub_1CD3C5048(a1 + 584, *(void **)(a1 + 592));
  *(void *)(a1 + 584) = a1 + 592;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
}

int32x2_t *llvm::MemorySSAUpdater::moveAllAccesses(int32x2_t **this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  uint64_t result = *this;
  int32x2_t v8 = result[6];
  uint64_t v9 = result[8].u32[0];
  unsigned int v10 = a2 >> 4;
  if (!v9)
  {
LABEL_7:
    uint64_t v12 = *(void *)&v8 + 16 * v9;
    goto LABEL_8;
  }
  LODWORD(v11) = (v9 - 1) & (v10 ^ (a2 >> 9));
  uint64_t v12 = *(void *)&v8 + 16 * v11;
  unint64_t v13 = *(llvm::BasicBlock **)v12;
  if (*(llvm::BasicBlock **)v12 != a2)
  {
    int v14 = 1;
    while (v13 != (llvm::BasicBlock *)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v9 - 1);
      unint64_t v13 = *(llvm::BasicBlock **)(*(void *)&v8 + 16 * v11);
      if (v13 == a2)
      {
        uint64_t v12 = *(void *)&v8 + 16 * v11;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v12 == *(void *)&v8 + 16 * v9) {
    return result;
  }
  uint64_t v16 = *(void *)(v12 + 8);
  if (!v16) {
    return result;
  }
  uint64_t v17 = (void *)((char *)a4 + 24);
  if ((char *)a4 + 24 != (char *)a3 + 40)
  {
    int32x2_t v18 = result[3];
    __int32 v19 = result[5].i32[0];
    __int32 v20 = v19 - 1;
    while (1)
    {
      int v21 = v17 - 3;
      if (!v17) {
        int v21 = 0;
      }
      if (v19)
      {
        uint64_t v22 = ((v21 >> 4) ^ (v21 >> 9)) & v20;
        int v23 = *(void **)(*(void *)&v18 + 16 * v22);
        if (v21 != v23)
        {
          int v24 = 1;
          while (v23 != (void *)-4096)
          {
            int v25 = v22 + v24++;
            uint64_t v22 = v25 & v20;
            int v23 = *(void **)(*(void *)&v18 + 16 * v22);
            if (v21 == v23) {
              goto LABEL_19;
            }
          }
          goto LABEL_20;
        }
LABEL_19:
        uint64_t v26 = *(void *)(*(void *)&v18 + 16 * v22 + 8);
        if (v26) {
          break;
        }
      }
LABEL_20:
      uint64_t v17 = (void *)v17[1];
      if (v17 == (void *)((char *)a3 + 40)) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      uint64_t v38 = *(void *)(v26 + 40);
      if (v16) {
        BOOL v39 = v38 == v16;
      }
      else {
        BOOL v39 = 1;
      }
      int v41 = v39 || v38 == 0;
      llvm::MemorySSA::moveTo(result, v26, a3, 1);
      uint64_t result = *this;
      int32x2_t v42 = (*this)[6];
      uint64_t v43 = (*this)[8].u32[0];
      if (!v43) {
        goto LABEL_57;
      }
      LODWORD(v44) = (v43 - 1) & (v10 ^ (a2 >> 9));
      uint64_t v45 = *(void *)&v42 + 16 * v44;
      int v46 = *(llvm::BasicBlock **)v45;
      if (*(llvm::BasicBlock **)v45 != a2) {
        break;
      }
LABEL_58:
      if (v45 == *(void *)&v42 + 16 * v43) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *(void *)(v45 + 8);
      }
      uint64_t v26 = v38 - 32;
      if (v41) {
        goto LABEL_21;
      }
    }
    int v47 = 1;
    while (v46 != (llvm::BasicBlock *)-4096)
    {
      int v48 = v44 + v47++;
      uint64_t v44 = v48 & (v43 - 1);
      int v46 = *(llvm::BasicBlock **)(*(void *)&v42 + 16 * v44);
      if (v46 == a2)
      {
        uint64_t v45 = *(void *)&v42 + 16 * v44;
        goto LABEL_58;
      }
    }
LABEL_57:
    uint64_t v45 = *(void *)&v42 + 16 * v43;
    goto LABEL_58;
  }
LABEL_21:
  int32x2_t v27 = result[9];
  uint64_t v28 = result[11].u32[0];
  if (v28)
  {
    LODWORD(v29) = (v28 - 1) & (v10 ^ (a2 >> 9));
    uint64_t v30 = *(void *)&v27 + 16 * v29;
    unsigned int v31 = *(llvm::BasicBlock **)v30;
    if (*(llvm::BasicBlock **)v30 == a2) {
      goto LABEL_28;
    }
    int v32 = 1;
    while (v31 != (llvm::BasicBlock *)-4096)
    {
      int v33 = v29 + v32++;
      uint64_t v29 = v33 & (v28 - 1);
      unsigned int v31 = *(llvm::BasicBlock **)(*(void *)&v27 + 16 * v29);
      if (v31 == a2)
      {
        uint64_t v30 = *(void *)&v27 + 16 * v29;
        goto LABEL_28;
      }
    }
  }
  uint64_t v30 = *(void *)&v27 + 16 * v28;
LABEL_28:
  if (v30 != *(void *)&v27 + 16 * v28)
  {
    int v34 = *(void **)(v30 + 8);
    if (v34)
    {
      if ((void *)*v34 != v34)
      {
        uint64_t v35 = v34[1];
        uint64_t v36 = v35 ? v35 - 48 : 0;
        if (v35 && *(unsigned char *)(v36 + 16) == 27)
        {
          return (int32x2_t *)llvm::MemorySSAUpdater::tryRemoveTrivialPhi((llvm::MemorySSAUpdater *)this, (_DWORD *)v36);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::MemorySSAUpdater::moveAllAfterMergeBlocks(int32x2_t **this, llvm::BasicBlock **a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  uint64_t result = (uint64_t)llvm::MemorySSAUpdater::moveAllAccesses(this, (llvm::BasicBlock *)a2, a3, a4);
  uint64_t v12 = a2[5];
  if (v12 != (llvm::BasicBlock *)(a2 + 5))
  {
    if (v12) {
      unint64_t v13 = (char *)v12 - 24;
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = v13[16];
    LODWORD(v15) = v14 - 29;
    if (v14 != 30)
    {
      uint64_t v26 = 2;
      switch(v13[16])
      {
        case 30:
LABEL_42:
          __break(1u);
          goto LABEL_43;
        case 31:
          LODWORD(v26) = (*((_DWORD *)v13 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_40;
        case 32:
        case 38:
          LODWORD(v26) = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_40;
        case 33:
          goto LABEL_10;
        case 36:
          LODWORD(v26) = *((_WORD *)v13 + 9) & 1;
          goto LABEL_40;
        case 37:
          LODWORD(v26) = 1;
          goto LABEL_10;
        case 39:
          LODWORD(v26) = *((_DWORD *)v13 + 20) + 1;
LABEL_40:
          if (v26) {
            goto LABEL_10;
          }
          return result;
        default:
          return result;
      }
    }
    if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 3) {
      LODWORD(v26) = 2;
    }
    else {
      LODWORD(v26) = 1;
    }
LABEL_10:
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)(v13 - 32);
    uint64_t v26 = v26;
    do
    {
      if (v14 == 30)
      {
        uint64_t v10 = v9 - 32 * v8;
      }
      else
      {
        LODWORD(v15) = v14 - 31;
        uint64_t v10 = v9;
        switch(v14)
        {
          case ' ':
          case '&':
            int v27 = *((_DWORD *)v13 + 5);
            if ((v27 & 0x40000000) != 0) {
              uint64_t v28 = (char *)*((void *)v13 - 1);
            }
            else {
              uint64_t v28 = &v13[-32 * (v27 & 0x7FFFFFF)];
            }
            int v25 = &v28[32 * v8];
            goto LABEL_37;
          case '!':
            uint64_t v29 = -64;
            if (!v8) {
              uint64_t v29 = -96;
            }
            uint64_t v10 = (uint64_t)&v13[v29];
            break;
          case '""':
          case '#':
            goto LABEL_42;
          case '$':
            if ((*((_WORD *)v13 + 9) & 1) == 0)
            {
              uint64_t v16 = 0;
              goto LABEL_15;
            }
            int v25 = &v13[-32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)];
LABEL_37:
            uint64_t v10 = (uint64_t)(v25 + 32);
            break;
          case '%':
            break;
          case '\'':
            if (v8) {
              uint64_t v10 = v9 - 32 * *((unsigned int *)v13 + 20) + 32 * v8 - 32;
            }
            else {
              uint64_t v10 = (uint64_t)&v13[-32 * *((unsigned int *)v13 + 20) - 64];
            }
            break;
          default:
            int v23 = *((_DWORD *)v13 + 5);
            if ((v23 & 0x40000000) != 0) {
              int v24 = (char *)*((void *)v13 - 1);
            }
            else {
              int v24 = &v13[-32 * (v23 & 0x7FFFFFF)];
            }
            int v25 = &v24[32 * (2 * v8)];
            goto LABEL_37;
        }
      }
      uint64_t v16 = *(void *)v10;
LABEL_15:
      LODWORD(v11) = (*this)[5].i32[0];
      if (v11)
      {
        int32x2_t v17 = (*this)[3];
        unsigned int v18 = v11 - 1;
        uint64_t v11 = ((v16 >> 4) ^ (v16 >> 9)) & (v11 - 1);
        uint64_t v19 = *(void *)(*(void *)&v17 + 16 * v11);
        if (v16 == v19)
        {
LABEL_20:
          uint64_t v10 = *(void *)(*(void *)&v17 + 16 * v11 + 8);
          if (v10)
          {
            LODWORD(v11) = *(_DWORD *)(v10 + 20);
            uint64_t v15 = v11 & 0x7FFFFFF;
            if ((v11 & 0x7FFFFFF) != 0)
            {
              uint64_t v21 = 0;
              uint64_t result = 32 * *(unsigned int *)(v10 + 76);
              while (1)
              {
                uint64_t v22 = v10 - 32 * v15;
                if ((v11 & 0x40000000) != 0) {
                  uint64_t v22 = *(void *)(v10 - 8);
                }
                if (*(llvm::BasicBlock ***)(v22 + result + 8 * v21) == a2) {
                  break;
                }
                if (v15 == ++v21) {
                  goto LABEL_43;
                }
              }
            }
            else
            {
LABEL_43:
              LODWORD(v21) = -1;
            }
            if ((v11 & 0x40000000) != 0) {
              uint64_t v11 = *(void *)(v10 - 8);
            }
            else {
              uint64_t v11 = v10 - 32 * v15;
            }
            *(void *)(v11 + 32 * *(unsigned int *)(v10 + 76) + 8 * v21) = a3;
          }
        }
        else
        {
          uint64_t result = 1;
          while (v19 != -4096)
          {
            int v20 = v11 + result;
            uint64_t result = (result + 1);
            uint64_t v11 = v20 & v18;
            uint64_t v19 = *(void *)(*(void *)&v17 + 16 * v11);
            if (v16 == v19) {
              goto LABEL_20;
            }
          }
        }
      }
      ++v8;
    }
    while (v8 != v26);
  }
  return result;
}

void llvm::MemorySSAUpdater::wireOldPredecessorsToNewImmediatePredecessor(llvm::MemorySSAUpdater *a1, llvm::BasicBlock *this, llvm::BasicBlock *a3, uint64_t *a4, uint64_t a5, char a6)
{
  int v6 = *(_DWORD *)(*(void *)a1 + 40);
  if (v6)
  {
    uint64_t v12 = *(void *)(*(void *)a1 + 24);
    unsigned int v13 = v6 - 1;
    uint64_t v14 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v15 = *(llvm::BasicBlock **)(v12 + 16 * v14);
    if (v15 == this)
    {
LABEL_6:
      uint64_t v18 = *(void *)(v12 + 16 * v14 + 8);
      if (v18)
      {
        BOOL hasNPredecessors = llvm::BasicBlock::hasNPredecessors(this, 1);
        int v20 = *(int32x2_t **)a1;
        if (hasNPredecessors)
        {
          llvm::MemorySSA::moveTo(v20, v18, a3, 0);
        }
        else
        {
          long long v98 = a3;
          MemoryPhuint64_t i = llvm::MemorySSA::createMemoryPhi((llvm::MemorySSA *)v20, a3);
          sub_1CC0BED68((llvm::SmallPtrSetImplBase *)&v101, a4, &a4[a5]);
          int v22 = *(_DWORD *)(v18 + 20);
          unsigned int v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
          {
            unsigned int v24 = 0;
            uint64_t v100 = v18;
            char v99 = a6;
            do
            {
              if ((v22 & 0x40000000) != 0) {
                uint64_t v25 = *(void *)(v18 - 8);
              }
              else {
                uint64_t v25 = v18 - 32 * (v22 & 0x7FFFFFF);
              }
              uint64_t v26 = *(void *)(v25 + 32 * *(unsigned int *)(v18 + 76) + 8 * v24);
              int v27 = v101;
              if (v102 == v101)
              {
                unsigned int v28 = v104;
                uint64_t v29 = &v102[8 * v104];
                if (v104)
                {
                  uint64_t v30 = 0;
                  while (*(void *)&v102[v30] != v26)
                  {
                    v30 += 8;
                    if (8 * v104 == v30) {
                      goto LABEL_35;
                    }
                  }
                  uint64_t v29 = &v102[v30];
                }
LABEL_35:
                int v27 = v102;
              }
              else
              {
                unsigned int v31 = v103 - 1;
                unsigned int v32 = (v103 - 1) & ((v26 >> 4) ^ (v26 >> 9));
                uint64_t v29 = &v102[8 * v32];
                uint64_t v33 = *(void *)v29;
                if (*(void *)v29 == -1)
                {
                  int v34 = 0;
LABEL_86:
                  if (v34) {
                    uint64_t v29 = v34;
                  }
                  unsigned int v28 = v104;
                  if (*(void *)v29 != v26) {
                    uint64_t v29 = &v102[8 * v103];
                  }
                }
                else
                {
                  int v34 = 0;
                  int v35 = 1;
                  while (v33 != v26)
                  {
                    if (v34) {
                      BOOL v36 = 0;
                    }
                    else {
                      BOOL v36 = v33 == -2;
                    }
                    if (v36) {
                      int v34 = v29;
                    }
                    unsigned int v37 = v32 + v35++;
                    unsigned int v32 = v37 & v31;
                    uint64_t v29 = &v102[8 * (v37 & v31)];
                    uint64_t v33 = *(void *)v29;
                    if (*(void *)v29 == -1) {
                      goto LABEL_86;
                    }
                  }
                  unsigned int v28 = v104;
                }
              }
              if (v102 == v27) {
                unsigned int v38 = v28;
              }
              else {
                unsigned int v38 = v103;
              }
              if (v29 != &v102[8 * v38])
              {
                uint64_t v39 = *(void *)(v25 + 32 * v24);
                int v40 = *((_DWORD *)MemoryPhi + 5);
                uint64_t v41 = v40 & 0x7FFFFFF;
                if ((v40 & 0x7FFFFFF) == *((_DWORD *)MemoryPhi + 19))
                {
                  unsigned int v42 = v41 + (v41 >> 1);
                  if (v42 <= 2) {
                    uint64_t v43 = 2;
                  }
                  else {
                    uint64_t v43 = v42;
                  }
                  *((_DWORD *)MemoryPhi + 19) = v43;
                  if ((v40 & 0x40000000) != 0) {
                    uint64_t v44 = (uint64_t *)*((void *)MemoryPhi - 1);
                  }
                  else {
                    uint64_t v44 = (uint64_t *)&MemoryPhi[-32 * v41];
                  }
                  uint64_t v45 = operator new(40 * v43);
                  *((void *)MemoryPhi - 1) = v45;
                  int v46 = v45;
                  do
                  {
                    *int v46 = 0;
                    v46[1] = 0;
                    v46[2] = 0;
                    long long v46[3] = MemoryPhi;
                    v46 += 4;
                  }
                  while (v46 != &v45[4 * v43]);
                  int v47 = *((_DWORD *)MemoryPhi + 5);
                  if ((v47 & 0x40000000) != 0) {
                    uint64_t v48 = (uint64_t)v45;
                  }
                  else {
                    uint64_t v48 = (uint64_t)&MemoryPhi[-32 * (v47 & 0x7FFFFFF)];
                  }
                  sub_1CC5E4108((uint64_t)v106, v44, &v44[4 * v41], v48);
                  if (v41)
                  {
                    memmove((void *)(v48 + 32 * v43), &v44[4 * v41], 8 * v41);
                    uint64_t v49 = 4 * v41;
                    do
                    {
                      unsigned int v50 = &v44[v49];
                      if (v44[v49 - 4])
                      {
                        *(void *)*(v50 - 2) = *(v50 - 3);
                        uint64_t v51 = *(v50 - 3);
                        if (v51) {
                          *(void *)(v51 + 16) = *(v50 - 2);
                        }
                      }
                      v49 -= 4;
                    }
                    while (v49 * 8);
                  }
                  operator delete(v44);
                  int v40 = *((_DWORD *)MemoryPhi + 5);
                  uint64_t v18 = v100;
                  a6 = v99;
                }
                uint64_t v52 = (v40 + 1) & 0x7FFFFFF;
                *((_DWORD *)MemoryPhi + 5) = v40 & 0xF8000000 | (v40 + 1) & 0x7FFFFFF;
                if ((v40 & 0x40000000) != 0) {
                  BOOL v53 = (char *)*((void *)MemoryPhi - 1);
                }
                else {
                  BOOL v53 = &MemoryPhi[-32 * v52];
                }
                uint64_t v54 = (v52 - 1);
                unsigned int v55 = &v53[32 * v54];
                if (*(void *)v55)
                {
                  **((void **)v55 + 2) = *((void *)v55 + 1);
                  uint64_t v75 = *((void *)v55 + 1);
                  if (v75) {
                    *(void *)(v75 + 16) = *((void *)v55 + 2);
                  }
                }
                *(void *)unsigned int v55 = v39;
                if (v39)
                {
                  uint64_t v58 = *(void *)(v39 + 8);
                  int v57 = (char **)(v39 + 8);
                  uint64_t v56 = v58;
                  unsigned int v59 = &v53[32 * v54];
                  *((void *)v59 + 1) = v58;
                  if (v58) {
                    *(void *)(v56 + 16) = v59 + 8;
                  }
                  *((void *)v59 + 2) = v57;
                  *int v57 = v55;
                }
                int v60 = *((_DWORD *)MemoryPhi + 5);
                uint64_t v61 = v60 & 0x7FFFFFF;
                if ((v60 & 0x40000000) != 0) {
                  int v62 = (char *)*((void *)MemoryPhi - 1);
                }
                else {
                  int v62 = &MemoryPhi[-32 * v61];
                }
                *(void *)&v62[32 * *((unsigned int *)MemoryPhi + 19) + 8 * (v61 - 1)] = v26;
                if ((a6 & 1) == 0)
                {
                  int v63 = v101;
                  if (v102 == v101)
                  {
                    unsigned int v64 = v104;
                    uint64_t v65 = &v102[8 * v104];
                    if (v104)
                    {
                      uint64_t v66 = 0;
                      while (*(void *)&v102[v66] != v26)
                      {
                        v66 += 8;
                        if (8 * v104 == v66) {
                          goto LABEL_93;
                        }
                      }
                      uint64_t v65 = &v102[v66];
                    }
LABEL_93:
                    int v63 = v102;
                  }
                  else
                  {
                    unsigned int v67 = v103 - 1;
                    unsigned int v68 = (v103 - 1) & ((v26 >> 4) ^ (v26 >> 9));
                    uint64_t v65 = &v102[8 * v68];
                    uint64_t v69 = *(void *)v65;
                    if (*(void *)v65 == -1)
                    {
                      unsigned int v70 = 0;
LABEL_103:
                      if (v70) {
                        uint64_t v65 = v70;
                      }
                      unsigned int v64 = v104;
                      if (*(void *)v65 != v26) {
                        uint64_t v65 = &v102[8 * v103];
                      }
                    }
                    else
                    {
                      unsigned int v70 = 0;
                      int v71 = 1;
                      while (v69 != v26)
                      {
                        if (v70) {
                          BOOL v72 = 0;
                        }
                        else {
                          BOOL v72 = v69 == -2;
                        }
                        if (v72) {
                          unsigned int v70 = v65;
                        }
                        unsigned int v73 = v68 + v71++;
                        unsigned int v68 = v73 & v67;
                        uint64_t v65 = &v102[8 * (v73 & v67)];
                        uint64_t v69 = *(void *)v65;
                        if (*(void *)v65 == -1) {
                          goto LABEL_103;
                        }
                      }
                      unsigned int v64 = v104;
                    }
                  }
                  if (v102 == v63) {
                    unsigned int v74 = v64;
                  }
                  else {
                    unsigned int v74 = v103;
                  }
                  if (v65 != &v102[8 * v74])
                  {
                    *(void *)uint64_t v65 = -2;
                    ++v105;
                  }
                }
                sub_1CC0B7954(v18, v24);
                int v22 = *(_DWORD *)(v18 + 20);
                unsigned int v23 = v22 & 0x7FFFFFF;
                --v24;
              }
              ++v24;
            }
            while (v24 != v23);
            unsigned int v23 = v22 & 0x7FFFFFF;
          }
          if (v23 == *(_DWORD *)(v18 + 76))
          {
            unsigned int v76 = v23 + (v23 >> 1);
            if (v76 <= 2) {
              uint64_t v77 = 2;
            }
            else {
              uint64_t v77 = v76;
            }
            *(_DWORD *)(v18 + 76) = v77;
            uint64_t v78 = v22 & 0x7FFFFFF;
            if ((v22 & 0x40000000) != 0) {
              uint64_t v79 = *(uint64_t **)(v18 - 8);
            }
            else {
              uint64_t v79 = (uint64_t *)(v18 - 32 * v78);
            }
            uint64_t v80 = operator new(40 * v77);
            *(void *)(v18 - 8) = v80;
            unint64_t v81 = v80;
            do
            {
              *unint64_t v81 = 0;
              v81[1] = 0;
              v81[2] = 0;
              v81[3] = v18;
              v81 += 4;
            }
            while (v81 != &v80[4 * v77]);
            int v82 = *(_DWORD *)(v18 + 20);
            if ((v82 & 0x40000000) != 0) {
              uint64_t v83 = (uint64_t)v80;
            }
            else {
              uint64_t v83 = v18 - 32 * (v82 & 0x7FFFFFF);
            }
            sub_1CC5E4108((uint64_t)v106, v79, &v79[4 * v78], v83);
            if (v78)
            {
              memmove((void *)(v83 + 32 * v77), &v79[4 * v78], 8 * v78);
              uint64_t v84 = 4 * v78;
              do
              {
                uint64_t v85 = &v79[v84];
                if (v79[v84 - 4])
                {
                  *(void *)*(v85 - 2) = *(v85 - 3);
                  uint64_t v86 = *(v85 - 3);
                  if (v86) {
                    *(void *)(v86 + 16) = *(v85 - 2);
                  }
                }
                v84 -= 4;
              }
              while (v84 * 8);
            }
            operator delete(v79);
            int v22 = *(_DWORD *)(v18 + 20);
          }
          uint64_t v87 = (v22 + 1) & 0x7FFFFFF;
          *(_DWORD *)(v18 + 20) = v22 & 0xF8000000 | (v22 + 1) & 0x7FFFFFF;
          uint64_t v88 = (v87 - 1);
          if ((v22 & 0x40000000) != 0) {
            uint64_t v89 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v89 = v18 - 32 * v87;
          }
          uint64_t v90 = v89 + 32 * v88;
          if (*(void *)v90)
          {
            **(void **)(v90 + 16) = *(void *)(v90 + 8);
            uint64_t v97 = *(void *)(v90 + 8);
            if (v97) {
              *(void *)(v97 + 16) = *(void *)(v90 + 16);
            }
          }
          *(void *)uint64_t v90 = MemoryPhi;
          if (MemoryPhi)
          {
            uint64_t v91 = (uint64_t *)(MemoryPhi + 8);
            uint64_t v92 = *((void *)MemoryPhi + 1);
            uint64_t v93 = v89 + 32 * v88;
            *(void *)(v93 + 8) = v92;
            if (v92) {
              *(void *)(v92 + 16) = v93 + 8;
            }
            *(void *)(v93 + 16) = v91;
            *uint64_t v91 = v90;
          }
          int v94 = *(_DWORD *)(v18 + 20);
          uint64_t v95 = v94 & 0x7FFFFFF;
          if ((v94 & 0x40000000) != 0) {
            uint64_t v96 = *(void *)(v18 - 8);
          }
          else {
            uint64_t v96 = v18 - 32 * v95;
          }
          *(void *)(v96 + 32 * *(unsigned int *)(v18 + 76) + 8 * (v95 - 1)) = v98;
          llvm::MemorySSAUpdater::tryRemoveTrivialPhi(a1, MemoryPhi);
          if (v102 != v101) {
            free(v102);
          }
        }
      }
    }
    else
    {
      int v16 = 1;
      while (v15 != (llvm::BasicBlock *)-4096)
      {
        int v17 = v14 + v16++;
        uint64_t v14 = v17 & v13;
        uint64_t v15 = *(llvm::BasicBlock **)(v12 + 16 * v14);
        if (v15 == this) {
          goto LABEL_6;
        }
      }
    }
  }
}

uint64_t sub_1CC0BCC1C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v3 = *(uint64_t **)(a1 - 8);
    uint64_t v2 = v1 & 0x7FFFFFF;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = (uint64_t *)(a1 - 32 * v2);
    if (!v2) {
      return 0;
    }
  }
  uint64_t result = 0;
  uint64_t v5 = 32 * v2;
  do
  {
    if (result)
    {
      if (result != *v3) {
        return 0;
      }
    }
    else
    {
      uint64_t result = *v3;
    }
    v3 += 4;
    v5 -= 32;
  }
  while (v5);
  return result;
}

uint64_t sub_1CC0BCC78(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 20);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v3 = *(void *)(result - 8);
    uint64_t v2 = v1 & 0x7FFFFFF;
    if (!v2) {
      return result;
    }
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = result - 32 * v2;
    if (!v2) {
      return result;
    }
  }
  uint64_t v4 = 32 * v2;
  uint64_t v5 = (void **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **uint64_t v5 = *(v5 - 1);
      uint64_t v6 = (uint64_t)*(v5 - 1);
      if (v6) {
        *(void *)(v6 + 16) = *v5;
      }
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return result;
}

void sub_1CC0BCCDC(int32x2_t **a1, uint64_t a2, llvm::Value *a3)
{
  __int32 v3 = (*a1)[5].i32[0];
  if (v3)
  {
    int32x2_t v4 = (*a1)[3];
    __int32 v5 = v3 - 1;
    uint64_t v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = *(void *)(*(void *)&v4 + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      uint64_t v10 = *(llvm::MemoryAccess **)(*(void *)&v4 + 16 * v6 + 8);
      if (v10) {
        llvm::MemorySSAUpdater::removeMemoryAccess(a1, v10, a3);
      }
    }
    else
    {
      int v8 = 1;
      while (v7 != -4096)
      {
        int v9 = v6 + v8++;
        uint64_t v6 = v9 & v5;
        uint64_t v7 = *(void *)(*(void *)&v4 + 16 * v6);
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
}

char *llvm::MemorySSAUpdater::createMemoryAccessInBB(uint64_t **a1, uint64_t a2, uint64_t a3, llvm::BasicBlock *a4, int a5)
{
  DefinedAccess = llvm::MemorySSA::createDefinedAccess(*a1, a2, a3, 0);
  llvm::MemorySSA::insertIntoListsForBlock((uint64_t)*a1, (uint64_t)DefinedAccess, a4, a5);
  return DefinedAccess;
}

uint64_t sub_1CC0BCDA4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) == 25) {
    uint64_t v2 = result;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    uint64_t v3 = v2 - 32;
  }
  else {
    uint64_t v3 = result - 64;
  }
  if (*(void *)v3)
  {
    **(void **)(v3 + 16) = *(void *)(v3 + 8);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7) {
      *(void *)(v7 + 16) = *(void *)(v3 + 16);
    }
  }
  *(void *)uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    int32x2_t v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(v3 + 8) = v6;
    if (v6) {
      *(void *)(v5 + 16) = v3 + 8;
    }
    *(void *)(v3 + 16) = v4;
    *int32x2_t v4 = v3;
  }
  return result;
}

void sub_1CC0BCE0C(void *a1)
{
  if (a1)
  {
    sub_1CC0BCE0C(*a1);
    sub_1CC0BCE0C(a1[1]);
    uint64_t v3 = a1[6];
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 4);
    }
    operator delete(a1);
  }
}

uint64_t sub_1CC0BCE8C(uint64_t result, void **a2)
{
  int v2 = *(_DWORD *)(result + 20);
  int v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v5 = result;
    unsigned int v6 = 0;
    do
    {
      if ((v2 & 0x40000000) != 0) {
        uint64_t v7 = *(void *)(v5 - 8);
      }
      else {
        uint64_t v7 = v5 - 32 * (v2 & 0x7FFFFFF);
      }
      if (**a2 == *(void *)(v7 + 32 * *(unsigned int *)(v5 + 76) + 8 * v6))
      {
        uint64_t result = sub_1CC0B7954(v5, v6);
        int v2 = *(_DWORD *)(v5 + 20);
        int v3 = v2 & 0x7FFFFFF;
        --v6;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_1CC0BCF20(llvm::SmallPtrSetImplBase *this, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v7 = *(void **)this;
    unsigned int v6 = (void *)*((void *)this + 1);
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(v4 + 24) + 40);
      uint64_t v9 = *((unsigned int *)this + 5);
      if (v6 != v7) {
        break;
      }
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8 * v9;
        uint64_t v12 = v7;
        while (*v12 != v8)
        {
          if (*v12 == -2) {
            uint64_t v10 = v12;
          }
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            if (!v10) {
              goto LABEL_11;
            }
            *uint64_t v10 = v8;
            --*((_DWORD *)this + 6);
            goto LABEL_35;
          }
        }
        goto LABEL_35;
      }
LABEL_11:
      unsigned int v13 = *((_DWORD *)this + 4);
      if (v9 >= v13) {
        goto LABEL_14;
      }
      *((_DWORD *)this + 5) = v9 + 1;
      v7[v9] = v8;
LABEL_35:
      uint64_t v7 = *(void **)this;
      unsigned int v6 = (void *)*((void *)this + 1);
      do
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if (!v4) {
          break;
        }
        uint64_t v23 = *(void *)(v4 + 24);
        unsigned int v24 = *(unsigned __int8 *)(v23 + 16);
        BOOL v25 = v23 && v24 >= 0x1C;
      }
      while (!v25 || v24 - 29 > 0xA);
      if (v4 == a3) {
        return;
      }
    }
    unsigned int v13 = *((_DWORD *)this + 4);
LABEL_14:
    if (3 * v13 <= 4 * ((int)v9 - *((_DWORD *)this + 6)))
    {
      if (v13 >= 0x40) {
        v13 *= 2;
      }
      else {
        unsigned int v13 = 128;
      }
    }
    else if (v13 - v9 >= v13 >> 3)
    {
      goto LABEL_16;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v13);
    unsigned int v13 = *((_DWORD *)this + 4);
    unsigned int v6 = (void *)*((void *)this + 1);
LABEL_16:
    unsigned int v14 = v13 - 1;
    unsigned int v15 = (v13 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    int v16 = &v6[v15];
    uint64_t v17 = *v16;
    if (*v16 == -1)
    {
      uint64_t v18 = 0;
LABEL_28:
      if (v18) {
        int v22 = v18;
      }
      else {
        int v22 = v16;
      }
      if (*v22 != v8)
      {
        if (*v22 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v22 = v8;
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 1;
      while (v17 != v8)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        int v16 = &v6[v21 & v14];
        uint64_t v17 = *v16;
        if (*v16 == -1) {
          goto LABEL_28;
        }
      }
    }
    goto LABEL_35;
  }
}

char **sub_1CC0BD0FC(char **a1)
{
  int v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    uint64_t v5 = &v2[24 * v3];
    do
    {
      uint64_t v6 = *((void *)v5 - 1);
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        unint64_t v7 = *((void *)v5 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v7 = *((void *)v5 - 2);
        uint64_t v8 = (unint64_t *)*((void *)v5 - 2);
        if (v8)
        {
          *uint64_t v8 = *v8 & 7 | v7;
        }
        else
        {
          uint64_t v9 = *((void *)v5 - 1);
          uint64_t v10 = ***(int32x2_t ****)v9;
          unint64_t v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            uint64_t v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              unsigned int v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
              uint64_t v16 = *v15;
              if (v9 == *v15)
              {
LABEL_22:
                *unsigned int v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v9 = *((void *)v5 - 1);
              }
              else
              {
                int v17 = 1;
                while (v16 != -4096)
                {
                  int v18 = v14 + v17++;
                  uint64_t v14 = v18 & v13;
                  uint64_t v16 = *(void *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    unsigned int v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_22;
                  }
                }
              }
              *(unsigned char *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 24;
    }
    while (v5 != v2);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC0BD24C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v18 = 0;
  uint64_t result = sub_1CBBE572C(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
  uint64_t v9 = v18;
  if (result)
  {
    char v15 = 0;
    goto LABEL_12;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  unsigned int v11 = *(_DWORD *)(a2 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_14;
  }
  if (v11 + ~v10 - *(_DWORD *)(a2 + 12) <= v11 >> 3)
  {
LABEL_14:
    sub_1CC0BD3C0(a2, v11);
    int v18 = 0;
    uint64_t result = sub_1CBBE572C(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v18);
    uint64_t v9 = v18;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v9 = *a3;
  v9[1] = 6;
  uint64_t v12 = (unint64_t *)(v9 + 1);
  v9[2] = 0;
  unint64_t v13 = (unint64_t)(v9 + 2);
  uint64_t v14 = a4[2];
  v9[3] = v14;
  char v15 = 1;
  if (v14 != -8192 && v14 != -4096 && v14)
  {
    unint64_t v16 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = *(void *)v16;
    *(void *)unint64_t v16 = v12;
    *uint64_t v12 = v16 | 6;
    if (*(void *)v13) {
      **(void **)unint64_t v13 = **(void **)v13 & 7 | v13;
    }
    char v15 = 1;
  }
LABEL_12:
  uint64_t v17 = *(void *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v17;
  *(unsigned char *)(a1 + 16) = v15;
  return result;
}

void *sub_1CC0BD3C0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC0BD48C(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC0BD48C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v29 = 0;
        uint64_t result = sub_1CBBE572C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v29);
        uint64_t v10 = v29;
        *uint64_t v29 = *v4;
        uint64_t v11 = v10;
        uint64_t v12 = v4[3];
        v10[3] = v12;
        v10[1] = 6;
        unint64_t v13 = (unint64_t *)(v10 + 1);
        v11[2] = 0;
        unint64_t v14 = (unint64_t)(v11 + 2);
        if (v12 != -8192 && v12 != -4096)
        {
          if (v12)
          {
            unint64_t v15 = v4[1] & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v14 = *(void *)v15;
            *(void *)unint64_t v15 = v13;
            *unint64_t v13 = v15 | 6;
            if (*(void *)v14) {
              **(void **)unint64_t v14 = **(void **)v14 & 7 | v14;
            }
          }
        }
        ++*(_DWORD *)(v5 + 8);
        uint64_t v16 = v4[3];
        if (v16 != -8192 && v16 != -4096 && v16)
        {
          unint64_t v17 = v4[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v17 = v4[2];
          int v18 = (unint64_t *)v4[2];
          if (v18)
          {
            *int v18 = *v18 & 7 | v17;
          }
          else
          {
            uint64_t v19 = v4[3];
            BOOL v20 = ***(int32x2_t ****)v19;
            unint64_t v21 = (unint64_t)v20[303];
            if (v21 <= v17)
            {
              uint64_t v22 = v20[305].u32[0];
              if (v21 + 16 * v22 > v17)
              {
                unsigned int v23 = v22 - 1;
                LODWORD(v24) = v23 & ((v19 >> 4) ^ (v19 >> 9));
                BOOL v25 = (uint64_t *)(v21 + 16 * v24);
                uint64_t v26 = *v25;
                if (v19 == *v25)
                {
LABEL_22:
                  uint64_t *v25 = -8192;
                  v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v19 = v4[3];
                }
                else
                {
                  int v27 = 1;
                  while (v26 != -4096)
                  {
                    int v28 = v24 + v27++;
                    uint64_t v24 = v28 & v23;
                    uint64_t v26 = *(void *)(v21 + 16 * v24);
                    if (v19 == v26)
                    {
                      BOOL v25 = (uint64_t *)(v21 + 16 * v24);
                      goto LABEL_22;
                    }
                  }
                }
                *(unsigned char *)(v19 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

void *sub_1CC0BD68C(uint64_t *a1, unint64_t *a2)
{
  uint64_t result = sub_1CC0BD7C8((void *)*a1, (void *)(*a1 + 24 * *((unsigned int *)a1 + 2)), a2);
  unsigned int v4 = *((_DWORD *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a1 + 24 * v4;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (v7 != -8192 && v7 != -4096 && v7 != 0)
      {
        unint64_t v9 = *(void *)(v6 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v9 = *(void *)(v6 - 16);
        uint64_t v10 = *(unint64_t **)(v6 - 16);
        if (v10)
        {
          *uint64_t v10 = *v10 & 7 | v9;
        }
        else
        {
          uint64_t v11 = *(void *)(v6 - 8);
          uint64_t v12 = ***(int32x2_t ****)v11;
          unint64_t v13 = (unint64_t)v12[303];
          if (v13 <= v9)
          {
            uint64_t v14 = v12[305].u32[0];
            if (v13 + 16 * v14 > v9)
            {
              unsigned int v15 = v14 - 1;
              LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
              unint64_t v17 = (uint64_t *)(v13 + 16 * v16);
              uint64_t v18 = *v17;
              if (v11 == *v17)
              {
LABEL_16:
                *unint64_t v17 = -8192;
                v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v11 = *(void *)(v6 - 8);
              }
              else
              {
                int v19 = 1;
                while (v18 != -4096)
                {
                  int v20 = v16 + v19++;
                  uint64_t v16 = v20 & v15;
                  uint64_t v18 = *(void *)(v13 + 16 * v16);
                  if (v11 == v18)
                  {
                    unint64_t v17 = (uint64_t *)(v13 + 16 * v16);
                    goto LABEL_16;
                  }
                }
              }
              *(unsigned char *)(v11 + 17) &= ~1u;
            }
          }
        }
      }
      v6 -= 24;
    }
    while (v6 != v5);
  }
  return result;
}

void *sub_1CC0BD7C8(void *result, void *a2, unint64_t *a3)
{
  if (result != a2)
  {
    unint64_t v3 = (unint64_t)(a3 + 1);
    do
    {
      *a3 = 6;
      a3[1] = 0;
      unint64_t v4 = result[2];
      a3[2] = v4;
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        unint64_t v6 = *result & 0xFFFFFFFFFFFFFFF8;
        a3[1] = *(void *)v6;
        *(void *)unint64_t v6 = a3;
        *a3 = v6 | 6;
        uint64_t v7 = (uint64_t *)a3[1];
        if (v7) {
          *uint64_t v7 = *v7 & 7 | v3;
        }
      }
      result += 3;
      a3 += 3;
      v3 += 24;
    }
    while (result != a2);
  }
  return result;
}

void sub_1CC0BD844(unsigned int *a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = a1[3];
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (unint64_t *)malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  sub_1CC0BD904(a1, v6);
  if (*(unsigned int **)a1 != a1 + 4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  a1[3] = v5;
}

unsigned int *sub_1CC0BD904(unsigned int *result, unint64_t *a2)
{
  uint64_t v2 = result[2];
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(*(void *)result + 16);
    unint64_t v4 = (unint64_t)(a2 + 1);
    uint64_t v5 = 24 * v2;
    do
    {
      *a2 = 4;
      a2[1] = 0;
      unint64_t v6 = *v3;
      a2[2] = *v3;
      if (v6 != -8192 && v6 != -4096 && v6 != 0)
      {
        unint64_t v8 = *(v3 - 2) & 0xFFFFFFFFFFFFFFF8;
        a2[1] = *(void *)v8;
        *(void *)unint64_t v8 = a2;
        *a2 = v8 | 4;
        unint64_t v9 = (uint64_t *)a2[1];
        if (v9) {
          *unint64_t v9 = *v9 & 7 | v4;
        }
      }
      a2 += 3;
      v3 += 3;
      v4 += 24;
      v5 -= 24;
    }
    while (v5);
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(void *)result + 24 * v2;
    do
    {
      uint64_t v12 = *(void *)(v11 - 8);
      if (v12 != -8192 && v12 != -4096 && v12 != 0)
      {
        unint64_t v14 = *(void *)(v11 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v14 = *(void *)(v11 - 16);
        unsigned int v15 = *(unint64_t **)(v11 - 16);
        if (v15)
        {
          *unsigned int v15 = *v15 & 7 | v14;
        }
        else
        {
          uint64_t v16 = *(void *)(v11 - 8);
          unint64_t v17 = ***(int32x2_t ****)v16;
          unint64_t v18 = (unint64_t)v17[303];
          if (v18 <= v14)
          {
            uint64_t v19 = v17[305].u32[0];
            if (v18 + 16 * v19 > v14)
            {
              unsigned int v20 = v19 - 1;
              LODWORD(v21) = v20 & ((v16 >> 4) ^ (v16 >> 9));
              uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
              uint64_t v23 = *v22;
              if (v16 == *v22)
              {
LABEL_25:
                uint64_t *v22 = -8192;
                v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v16 = *(void *)(v11 - 8);
              }
              else
              {
                int v24 = 1;
                while (v23 != -4096)
                {
                  int v25 = v21 + v24++;
                  uint64_t v21 = v25 & v20;
                  uint64_t v23 = *(void *)(v18 + 16 * v21);
                  if (v16 == v23)
                  {
                    uint64_t v22 = (uint64_t *)(v18 + 16 * v21);
                    goto LABEL_25;
                  }
                }
              }
              *(unsigned char *)(v16 + 17) &= ~1u;
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v10);
  }
  return result;
}

void *sub_1CC0BDA8C(void *result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = &result[4 * a2];
    do
    {
      if (*result != -4096 && *result != -8192)
      {
        uint64_t v3 = result[3];
        if (v3 != -8192 && v3 != -4096 && v3 != 0)
        {
          unint64_t v5 = result[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v5 = result[2];
          unint64_t v6 = (unint64_t *)result[2];
          if (v6)
          {
            *unint64_t v6 = *v6 & 7 | v5;
          }
          else
          {
            uint64_t v7 = result[3];
            unint64_t v8 = ***(int32x2_t ****)v7;
            unint64_t v9 = (unint64_t)v8[303];
            if (v9 <= v5)
            {
              uint64_t v10 = v8[305].u32[0];
              if (v9 + 16 * v10 > v5)
              {
                unsigned int v11 = v10 - 1;
                LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
                unint64_t v13 = (uint64_t *)(v9 + 16 * v12);
                uint64_t v14 = *v13;
                if (v7 == *v13)
                {
LABEL_20:
                  *unint64_t v13 = -8192;
                  v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v7 = result[3];
                }
                else
                {
                  int v15 = 1;
                  while (v14 != -4096)
                  {
                    int v16 = v12 + v15++;
                    uint64_t v12 = v16 & v11;
                    uint64_t v14 = *(void *)(v9 + 16 * v12);
                    if (v7 == v14)
                    {
                      unint64_t v13 = (uint64_t *)(v9 + 16 * v12);
                      goto LABEL_20;
                    }
                  }
                }
                *(unsigned char *)(v7 + 17) &= ~1u;
              }
            }
          }
        }
      }
      result += 4;
    }
    while (result != v2);
  }
  return result;
}

void sub_1CC0BDBA8(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (char *)malloc_type_malloc(24 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *a1;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = &v8[24 * v9];
    uint64_t v12 = 24 * v9;
    do
    {
      unint64_t v13 = (unint64_t *)&v7[v10];
      *unint64_t v13 = 6;
      v13[1] = 0;
      unint64_t v14 = *(void *)&v8[v10 + 16];
      v13[2] = v14;
      if (v14 != -8192 && v14 != -4096 && v14 != 0)
      {
        unint64_t v16 = *(void *)&v8[v10] & 0xFFFFFFFFFFFFFFF8;
        v13[1] = *(void *)v16;
        *(void *)unint64_t v16 = v13;
        *unint64_t v13 = v16 | 6;
        unint64_t v17 = (uint64_t *)v13[1];
        if (v17) {
          *unint64_t v17 = *v17 & 7 | (unint64_t)&v7[v10 + 8];
        }
      }
      v10 += 24;
    }
    while (v12 != v10);
    do
    {
      uint64_t v18 = *((void *)v11 - 1);
      if (v18 != -8192 && v18 != -4096 && v18 != 0)
      {
        unint64_t v20 = *((void *)v11 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v20 = *((void *)v11 - 2);
        uint64_t v21 = (unint64_t *)*((void *)v11 - 2);
        if (v21)
        {
          *uint64_t v21 = *v21 & 7 | v20;
        }
        else
        {
          uint64_t v22 = *((void *)v11 - 1);
          uint64_t v23 = ***(int32x2_t ****)v22;
          unint64_t v24 = (unint64_t)v23[303];
          if (v24 <= v20)
          {
            uint64_t v25 = v23[305].u32[0];
            if (v24 + 16 * v25 > v20)
            {
              unsigned int v26 = v25 - 1;
              LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
              int v28 = (uint64_t *)(v24 + 16 * v27);
              uint64_t v29 = *v28;
              if (v22 == *v28)
              {
LABEL_32:
                *int v28 = -8192;
                v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v22 = *((void *)v11 - 1);
              }
              else
              {
                int v30 = 1;
                while (v29 != -4096)
                {
                  int v31 = v27 + v30++;
                  uint64_t v27 = v31 & v26;
                  uint64_t v29 = *(void *)(v24 + 16 * v27);
                  if (v22 == v29)
                  {
                    int v28 = (uint64_t *)(v24 + 16 * v27);
                    goto LABEL_32;
                  }
                }
              }
              *(unsigned char *)(v22 + 17) &= ~1u;
            }
          }
        }
      }
      v11 -= 24;
    }
    while (v11 != v8);
    unint64_t v8 = *a1;
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

BOOL sub_1CC0BDDDC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  return *(unsigned char *)(v2 + 16) != 25 && v2 != *a1;
}

char **sub_1CC0BDE04(char **a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    unint64_t v4 = &v2[24 * v3];
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (v5 && v5 != -8192 && v5 != -4096)
      {
        unint64_t v6 = *((void *)v4 - 3) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v6 = *((void *)v4 - 2);
        uint64_t v7 = (unint64_t *)*((void *)v4 - 2);
        if (v7)
        {
          *uint64_t v7 = *v7 & 7 | v6;
        }
        else
        {
          uint64_t v8 = *((void *)v4 - 1);
          uint64_t v9 = ***(int32x2_t ****)v8;
          unint64_t v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            uint64_t v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              unsigned int v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              unint64_t v14 = (uint64_t *)(v10 + 16 * v13);
              uint64_t v15 = *v14;
              if (v8 == *v14)
              {
LABEL_14:
                *unint64_t v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v8 = *((void *)v4 - 1);
              }
              else
              {
                int v16 = 1;
                while (v15 != -4096)
                {
                  int v17 = v13 + v16++;
                  uint64_t v13 = v17 & v12;
                  uint64_t v15 = *(void *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    unint64_t v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_14;
                  }
                }
              }
              *(unsigned char *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v4 -= 24;
    }
    while (v4 != v2);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC0BDF44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *sub_1CC0BDFF0(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC0BE050((uint64_t)a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CC0BE0F8(a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1CC0BE050(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC0BE0F8(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v4 = *a1 >> 1;
  if (*a1) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = a1[4];
  }
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  uint64_t v8 = (uint64_t)a1;
  sub_1CD4ABA78((uint64_t)a1, v5);
  uint64_t v9 = 0;
  sub_1CC0BE050(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

BOOL sub_1CC0BE1B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 != v2) {
    *(void *)(a1 + 8) = v1 - 8;
  }
  return v1 != v2;
}

BOOL sub_1CC0BE1DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v1 != v2) {
    *(void *)(a1 + 16) = v1 + 8;
  }
  return v1 != v2;
}

unsigned char *sub_1CC0BE200(unsigned int *a1, uint64_t a2, unsigned char *__src, unsigned char *a4)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = (a2 - *(void *)a1) >> 4;
  uint64_t v7 = a1[2];
  if (*(void *)a1 + 16 * v7 == a2)
  {
    sub_1CD3D61B4(a1, __src, a4);
    return (unsigned char *)(*(void *)a1 + 16 * v6);
  }
  int v17 = __src;
  size_t v10 = a4 - __src;
  unint64_t v11 = (a4 - __src) >> 4;
  if (v7 + v11 > a1[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v12 = (unsigned char *)(v5 + 16 * v7);
  __srca = (unsigned char *)(v5 + 16 * v6);
  unint64_t v13 = (v12 - __srca) >> 4;
  if (v13 < v11)
  {
    unsigned int v14 = v7 + (v10 >> 4);
    a1[2] = v14;
    if (v6 != v7)
    {
      uint64_t v15 = (_OWORD *)(v5 + 16 * v6);
      memcpy((void *)(v5 + 16 * v14 - 16 * v13), __srca, v12 - __srca);
      do
      {
        *v15++ = *v17++;
        --v13;
      }
      while (v13);
    }
    if (v17 != (_OWORD *)a4) {
      memcpy(v12, v17, a4 - (unsigned char *)v17);
    }
    return __srca;
  }
  sub_1CD3E56A0((uint64_t)a1, &v12[-16 * v11], (char *)(v5 + 16 * v7));
  if (&v12[-16 * v11] != __srca) {
    memmove(&__srca[16 * v11], __srca, &v12[-16 * v11] - __srca);
  }
  if (v17 == (_OWORD *)a4) {
    return __srca;
  }
  memmove(__srca, v17, v10);
  return __srca;
}

uint64_t sub_1CC0BE388(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 120 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    size_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        size_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 120 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void sub_1CC0BE438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a1;
  *(void *)a1 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = (void *)(a1 + 488);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    uint64_t v9 = &v8[15 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 15;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v15 = 0;
      sub_1CC0BE388(a1, v10, &v15);
      int v11 = v15;
      BOOL v12 = v15;
      *(void *)uint64_t v15 = *(void *)a2;
      sub_1CC0BE57C(v12 + 2, (unsigned int *)(a2 + 8));
      sub_1CC0BE57C(v11 + 16, (unsigned int *)(a2 + 64));
      *(_DWORD *)a1 += 2;
      unsigned int v13 = *(void **)(a2 + 88);
      if ((void *)(a2 + 104) != v13) {
        free(v13);
      }
      if ((*(unsigned char *)(a2 + 64) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(a2 + 72), 8);
      }
      unsigned int v14 = *(void **)(a2 + 32);
      if ((void *)(a2 + 48) != v14) {
        free(v14);
      }
      if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(a2 + 16), 8);
      }
    }
    a2 += 120;
  }
}

unsigned int *sub_1CC0BE57C(unsigned int *a1, unsigned int *a2)
{
  *(void *)a1 = 1;
  *(int64x2_t *)(a1 + 2) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int v4 = (int *)(a1 + 2);
  unsigned int v5 = *a2;
  *a2 &= 1u;
  unsigned int v6 = a1[1];
  *a1 = v5 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v6;
  unsigned int v7 = *a1;
  unsigned int v8 = *a2;
  if ((*a1 & 1) == 0)
  {
    uint64_t v9 = (int *)a1;
    uint64_t v10 = a2;
    if ((v8 & 1) == 0)
    {
      uint64_t v17 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v17;
      LODWORD(v17) = a1[4];
      a1[4] = a2[4];
      a2[4] = v17;
      goto LABEL_5;
    }
LABEL_15:
    long long v18 = *(_OWORD *)(v9 + 2);
    *uint64_t v9 = v7 | 1;
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((void *)v9 + 2) = *((void *)v10 + 2);
    *v10 &= ~1u;
    *(_OWORD *)(v10 + 2) = v18;
    goto LABEL_5;
  }
  unsigned int v7 = *a2;
  uint64_t v9 = (int *)a2;
  uint64_t v10 = a1;
  if ((v8 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v11 = 0;
  BOOL v12 = (int *)(a2 + 2);
  do
  {
    uint64_t v13 = *(void *)&v4[v11];
    *(void *)&v4[v11] = *(void *)&v12[v11];
    *(void *)&v12[v11] = v13;
    v11 += 2;
  }
  while (v11 != 4);
LABEL_5:
  *((void *)a1 + 3) = a1 + 10;
  *((void *)a1 + 4) = 0x200000000;
  unsigned int v14 = a2[8];
  if (v14 && a1 != a2)
  {
    uint64_t v15 = (int *)*((void *)a2 + 3);
    if (v15 == (int *)(a2 + 10))
    {
      if (v14 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(a1 + 10, v15, 8 * a2[8]);
      a1[8] = v14;
    }
    else
    {
      *((void *)a1 + 3) = v15;
      a1[8] = v14;
      a1[9] = a2[9];
      *((void *)a2 + 3) = a2 + 10;
      a2[9] = 0;
    }
    a2[8] = 0;
  }
  return a1;
}

uint64_t sub_1CC0BE730(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 2;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CC0BE7D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CC0BE950(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 8 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 8 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CC0BE950(a1, v8);
      unint64_t v20 = 0;
      sub_1CC0BE730(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CC0BE950(uint64_t a1, unsigned int a2)
{
  _OWORD v16[2] = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v13 = *(uint64_t **)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    if (a2 <= 2)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v15;
    }
    sub_1CC0BEAD8((int *)a1, v13, &v13[v14]);
    JUMPOUT(0x1D25D9CD0);
  }
  char v6 = 0;
  uint64_t v7 = 0;
  unsigned int v8 = v16;
  do
  {
    char v9 = v6;
    uint64_t v10 = *(void *)(a1 + 8 + 8 * v7);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v8++ = v10;
    }
    char v6 = 1;
    uint64_t v7 = 1;
  }
  while ((v9 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v11 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }
  return sub_1CC0BEAD8((int *)a1, v16, v8);
}

int *sub_1CC0BEAD8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    char v6 = result + 6;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    char v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 2;
        char v9 = result + 2;
      }
      else
      {
        char v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v12 = &v9[2 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        uint64_t v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          int v12 = &v9[2 * (v17 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          int v12 = v14;
        }
      }
LABEL_14:
      *(void *)int v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1CC0BEBD8(_DWORD *a1, uint64_t *a2)
{
  int v8 = 0;
  char v4 = sub_1CC0BECBC((uint64_t)a1, *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1CD4ABCF8((uint64_t)a1, v7);
    int v8 = 0;
    sub_1CC0BECBC((uint64_t)a1, *a2, &v8);
    uint64_t result = v8;
  }
  *a1 += 2;
  if (*result != -4096) {
    --a1[1];
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CC0BECBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    char v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        char v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

llvm::SmallPtrSetImplBase *sub_1CC0BED68(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3)
{
  int v4 = (char *)this + 32;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 16;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    unsigned int v6 = a2;
    unsigned int v7 = 16;
    uint64_t v8 = (char *)this + 32;
    while (1)
    {
      uint64_t v9 = *v6;
      uint64_t v10 = *((unsigned int *)this + 5);
      if (v8 != v4) {
        break;
      }
      if (v10)
      {
        unsigned int v11 = 0;
        uint64_t v12 = 8 * v10;
        unsigned int v13 = v4;
        while (*v13 != v9)
        {
          if (*v13 == -2) {
            unsigned int v11 = v13;
          }
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            if (!v11) {
              goto LABEL_11;
            }
            *unsigned int v11 = v9;
            --*((_DWORD *)this + 6);
            goto LABEL_13;
          }
        }
        goto LABEL_13;
      }
LABEL_11:
      if (v10 >= v7) {
        break;
      }
      *((_DWORD *)this + 5) = v10 + 1;
      *(void *)&v4[8 * v10] = v9;
LABEL_13:
      int v4 = *(char **)this;
      uint64_t v8 = (char *)*((void *)this + 1);
      if (++v6 == a3) {
        return this;
      }
    }
    if (3 * v7 <= 4 * ((int)v10 - *((_DWORD *)this + 6)))
    {
      if (v7 >= 0x40) {
        v7 *= 2;
      }
      else {
        unsigned int v7 = 128;
      }
    }
    else if (v7 - v10 >= v7 >> 3)
    {
      goto LABEL_17;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v7);
    unsigned int v7 = *((_DWORD *)this + 4);
    uint64_t v8 = (char *)*((void *)this + 1);
LABEL_17:
    unsigned int v14 = v7 - 1;
    unsigned int v15 = (v7 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    BOOL v16 = &v8[8 * v15];
    uint64_t v17 = *(void *)v16;
    if (*(void *)v16 == -1)
    {
      BOOL v18 = 0;
LABEL_29:
      if (v18) {
        uint64_t v22 = v18;
      }
      else {
        uint64_t v22 = v16;
      }
      if (*(void *)v22 != v9)
      {
        if (*(void *)v22 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *(void *)uint64_t v22 = v9;
      }
    }
    else
    {
      BOOL v18 = 0;
      int v19 = 1;
      while (v17 != v9)
      {
        if (v18) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v17 == -2;
        }
        if (v20) {
          BOOL v18 = v16;
        }
        unsigned int v21 = v15 + v19++;
        unsigned int v15 = v21 & v14;
        BOOL v16 = &v8[8 * (v21 & v14)];
        uint64_t v17 = *(void *)v16;
        if (*(void *)v16 == -1) {
          goto LABEL_29;
        }
      }
    }
    goto LABEL_13;
  }
  return this;
}

void llvm::initializeModuleDebugInfoLegacyPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C48, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0BEFA4;
    v3[1] = &v1;
    uint64_t v2 = v3;
    std::__call_once(&qword_1EBCC6C48, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0BEFA4()
{
}

uint64_t sub_1CC0BF044(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC6C40;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2605D30;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x800000000;
  *(void *)(a1 + 112) = a1 + 128;
  *(void *)(a1 + 120) = 0x800000000;
  *(void *)(a1 + 192) = a1 + 208;
  *(void *)(a1 + 200) = 0x800000000;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x800000000;
  *(void *)(a1 + 352) = a1 + 368;
  *(void *)(a1 + 360) = 0x800000000;
  *(void *)(a1 + 432) = a1 + 464;
  *(void *)(a1 + 440) = a1 + 464;
  *(void *)(a1 + 448) = 32;
  *(_DWORD *)(a1 + 456) = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C48, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0BEFA4;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCC6C48, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

double llvm::ModuleDebugInfoPrinterPass::ModuleDebugInfoPrinterPass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x800000000;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 0x800000000;
  *(void *)(a1 + 160) = a1 + 176;
  *(void *)(a1 + 168) = 0x800000000;
  *(void *)(a1 + 240) = a1 + 256;
  *(void *)(a1 + 248) = 0x800000000;
  *(void *)(a1 + 320) = a1 + 336;
  *(void *)(a1 + 328) = 0x800000000;
  *(void *)(a1 + 400) = a1 + 432;
  *(void *)(a1 + 408) = a1 + 432;
  *(void *)&double result = 32;
  *(void *)(a1 + 416) = 32;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 688) = a2;
  return result;
}

llvm::raw_ostream *sub_1CC0BF1B4(llvm::raw_ostream *this, unsigned __int8 ***a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3)
  {
    int v4 = *a2;
    for (uint64_t i = 8 * v3; i; i -= 8)
    {
      unsigned int v6 = *v4;
      unsigned int v7 = (void *)*((void *)v2 + 4);
      if (*((void *)v2 + 3) - (void)v7 > 0xDuLL)
      {
        qmemcpy(v7, "Compile unit: ", 14);
        *((void *)v2 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Compile unit: ", 0xEuLL);
      }
      uint64_t v8 = llvm::dwarf::LanguageString((llvm::dwarf *)*((unsigned int *)v6 + 6));
      if (v9)
      {
        uint64_t v10 = v8;
        size_t v11 = v9;
        uint64_t v12 = (void *)*((void *)v2 + 4);
        if (v9 <= *((void *)v2 + 3) - (void)v12)
        {
          memcpy(v12, v10, v9);
          uint64_t v18 = *((void *)v2 + 4) + v11;
LABEL_14:
          *((void *)v2 + 4) = v18;
          goto LABEL_15;
        }
        unsigned int v13 = v2;
        unsigned int v14 = v10;
        size_t v15 = v11;
      }
      else
      {
        uint64_t v16 = *((void *)v2 + 4);
        if ((unint64_t)(*((void *)v2 + 3) - v16) > 0x10)
        {
          *(unsigned char *)(v16 + 16) = 40;
          *(_OWORD *)uint64_t v16 = *(_OWORD *)"unknown-language(";
          *((void *)v2 + 4) += 17;
        }
        else
        {
          llvm::raw_ostream::write(v2, "unknown-language(", 0x11uLL);
        }
        sub_1CD098D14(v2, *((unsigned int *)v6 + 6), 0, 0, 0);
        uint64_t v17 = (unsigned char *)*((void *)v2 + 4);
        if (*((unsigned char **)v2 + 3) != v17)
        {
          *uint64_t v17 = 41;
          uint64_t v18 = *((void *)v2 + 4) + 1;
          goto LABEL_14;
        }
        unsigned int v13 = v2;
        unsigned int v14 = ")";
        size_t v15 = 1;
      }
      llvm::raw_ostream::write(v13, v14, v15);
LABEL_15:
      int v19 = *v6;
      BOOL v20 = v6;
      if (v19 == 15 || (v21 = *((unsigned int *)v6 + 2), (BOOL v20 = *(unsigned __int8 **)&v6[-8 * v21]) != 0))
      {
        uint64_t v22 = *(void *)&v20[-8 * *((unsigned int *)v20 + 2)];
        if (v22)
        {
          uint64_t v23 = *(void **)(v22 + 8);
          size_t v26 = *v23;
          unint64_t v24 = (const char *)(v23 + 3);
          size_t v25 = v26;
        }
        else
        {
          size_t v25 = 0;
          unint64_t v24 = 0;
        }
        if (v19 == 15) {
          goto LABEL_22;
        }
        uint64_t v27 = -(uint64_t)*((unsigned int *)v6 + 2);
      }
      else
      {
        size_t v25 = 0;
        uint64_t v27 = -v21;
        unint64_t v24 = "";
      }
      unsigned int v6 = *(unsigned __int8 **)&v6[8 * v27];
      if (!v6)
      {
        size_t v31 = 0;
        int v30 = "";
        goto LABEL_24;
      }
LABEL_22:
      uint64_t v28 = *(void *)&v6[-8 * *((unsigned int *)v6 + 2) + 8];
      if (v28)
      {
        uint64_t v29 = *(void **)(v28 + 8);
        size_t v32 = *v29;
        int v30 = (const char *)(v29 + 3);
        size_t v31 = v32;
      }
      else
      {
        size_t v31 = 0;
        int v30 = 0;
      }
LABEL_24:
      this = sub_1CC0C00AC(v2, v24, v25, v30, v31, 0);
      uint64_t v33 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v33 >= *((void *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((void *)v2 + 4) = v33 + 1;
        *uint64_t v33 = 10;
      }
      ++v4;
    }
  }
  uint64_t v34 = *((unsigned int *)a2 + 22);
  if (v34)
  {
    int v35 = a2[10];
    for (uint64_t j = 8 * v34; j; j -= 8)
    {
      unsigned int v37 = *v35;
      uint64_t v38 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v38) > 0xB)
      {
        *(_DWORD *)(v38 + 8) = 540700001;
        *(void *)uint64_t v38 = *(void *)"Subprogram: ";
        *((void *)v2 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Subprogram: ", 0xCuLL);
      }
      uint64_t v39 = *(void *)&v37[-8 * *((unsigned int *)v37 + 2) + 16];
      if (v39)
      {
        int v40 = *(size_t **)(v39 + 8);
        size_t v43 = *v40;
        uint64_t v41 = v40 + 3;
        size_t v42 = v43;
        uint64_t v44 = (void *)*((void *)v2 + 4);
        if (v43 <= *((void *)v2 + 3) - (void)v44)
        {
          if (v42)
          {
            memcpy(v44, v41, v42);
            *((void *)v2 + 4) += v42;
          }
        }
        else
        {
          llvm::raw_ostream::write(v2, (const char *)v41, v42);
        }
      }
      int v45 = *v37;
      int v46 = v37;
      if (v45 == 15 || (v47 = *((unsigned int *)v37 + 2), (int v46 = *(unsigned __int8 **)&v37[-8 * v47]) != 0))
      {
        uint64_t v48 = *(void *)&v46[-8 * *((unsigned int *)v46 + 2)];
        if (v48)
        {
          uint64_t v49 = *(void **)(v48 + 8);
          size_t v52 = *v49;
          unsigned int v50 = (const char *)(v49 + 3);
          size_t v51 = v52;
        }
        else
        {
          size_t v51 = 0;
          unsigned int v50 = 0;
        }
        if (v45 == 15)
        {
          uint64_t v54 = v37;
LABEL_52:
          uint64_t v55 = *(void *)&v54[-8 * *((unsigned int *)v54 + 2) + 8];
          if (v55)
          {
            uint64_t v56 = *(void **)(v55 + 8);
            size_t v59 = *v56;
            int v57 = (const char *)(v56 + 3);
            size_t v58 = v59;
          }
          else
          {
            size_t v58 = 0;
            int v57 = 0;
          }
          goto LABEL_54;
        }
        uint64_t v53 = -(uint64_t)*((unsigned int *)v37 + 2);
      }
      else
      {
        size_t v51 = 0;
        uint64_t v53 = -v47;
        unsigned int v50 = "";
      }
      uint64_t v54 = *(unsigned __int8 **)&v37[8 * v53];
      if (v54) {
        goto LABEL_52;
      }
      size_t v58 = 0;
      int v57 = "";
LABEL_54:
      this = sub_1CC0C00AC(v2, v50, v51, v57, v58, *((_DWORD *)v37 + 6));
      uint64_t v60 = *(void *)&v37[-8 * *((unsigned int *)v37 + 2) + 24];
      if (v60 && **(void **)(v60 + 8))
      {
        uint64_t v61 = *((void *)v2 + 4);
        if ((unint64_t)(*((void *)v2 + 3) - v61) > 2)
        {
          *(unsigned char *)(v61 + 2) = 39;
          *(_WORD *)uint64_t v61 = 10272;
          this = (llvm::raw_ostream *)(*((void *)v2 + 4) + 3);
          *((void *)v2 + 4) = this;
        }
        else
        {
          llvm::raw_ostream::write(v2, " ('", 3uLL);
          this = (llvm::raw_ostream *)*((void *)v2 + 4);
        }
        uint64_t v62 = *(void *)&v37[-8 * *((unsigned int *)v37 + 2) + 24];
        if (v62)
        {
          int v63 = *(unint64_t **)(v62 + 8);
          unint64_t v66 = *v63;
          unsigned int v64 = v63 + 3;
          size_t v65 = v66;
          if (v66 <= *((void *)v2 + 3) - (void)this)
          {
            if (v65)
            {
              memcpy(this, v64, v65);
              this = (llvm::raw_ostream *)(*((void *)v2 + 4) + v65);
              *((void *)v2 + 4) = this;
            }
          }
          else
          {
            llvm::raw_ostream::write(v2, (const char *)v64, v65);
            this = (llvm::raw_ostream *)*((void *)v2 + 4);
          }
        }
        if (*((void *)v2 + 3) - (void)this > 1uLL)
        {
          *(_WORD *)this = 10535;
          *((void *)v2 + 4) += 2;
        }
        else
        {
          this = llvm::raw_ostream::write(v2, "')", 2uLL);
        }
      }
      unsigned int v67 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v67 >= *((void *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((void *)v2 + 4) = v67 + 1;
        *unsigned int v67 = 10;
      }
      ++v35;
    }
  }
  uint64_t v68 = *((unsigned int *)a2 + 42);
  if (v68)
  {
    uint64_t v69 = a2[20];
    uint64_t v70 = 8 * v68;
    do
    {
      uint64_t v71 = *(void *)&(*v69)[-8 * *((unsigned int *)*v69 + 2)];
      uint64_t v72 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v72) > 0x10)
      {
        *(unsigned char *)(v72 + 16) = 32;
        *(_OWORD *)uint64_t v72 = *(_OWORD *)"Global variable: ";
        *((void *)v2 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Global variable: ", 0x11uLL);
      }
      uint64_t v73 = *(void *)(v71 - 8 * *(unsigned int *)(v71 + 8) + 8);
      if (v73)
      {
        unsigned int v74 = *(size_t **)(v73 + 8);
        size_t v77 = *v74;
        uint64_t v75 = v74 + 3;
        size_t v76 = v77;
        uint64_t v78 = (void *)*((void *)v2 + 4);
        if (v77 <= *((void *)v2 + 3) - (void)v78)
        {
          if (v76)
          {
            memcpy(v78, v75, v76);
            *((void *)v2 + 4) += v76;
          }
        }
        else
        {
          llvm::raw_ostream::write(v2, (const char *)v75, v76);
        }
      }
      uint64_t v79 = *(void *)(v71 - 8 * *(unsigned int *)(v71 + 8) + 16);
      if (v79)
      {
        uint64_t v80 = *(void *)(v79 - 8 * *(unsigned int *)(v79 + 8));
        if (v80)
        {
          unint64_t v81 = *(void **)(v80 + 8);
          size_t v84 = *v81;
          int v82 = (const char *)(v81 + 3);
          size_t v83 = v84;
        }
        else
        {
          int v82 = 0;
          size_t v83 = 0;
        }
        uint64_t v87 = *(void *)(v79 - 8 * *(unsigned int *)(v79 + 8) + 8);
        if (v87)
        {
          uint64_t v88 = *(void **)(v87 + 8);
          size_t v89 = *v88;
          uint64_t v86 = (const char *)(v88 + 3);
          size_t v85 = v89;
        }
        else
        {
          uint64_t v86 = 0;
          size_t v85 = 0;
        }
      }
      else
      {
        size_t v83 = 0;
        size_t v85 = 0;
        int v82 = "";
        uint64_t v86 = "";
      }
      this = sub_1CC0C00AC(v2, v82, v83, v86, v85, *(_DWORD *)(v71 + 24));
      uint64_t v90 = *(void *)(v71 - 8 * *(unsigned int *)(v71 + 8) + 40);
      if (v90 && **(void **)(v90 + 8))
      {
        uint64_t v91 = *((void *)v2 + 4);
        if ((unint64_t)(*((void *)v2 + 3) - v91) > 2)
        {
          *(unsigned char *)(v91 + 2) = 39;
          *(_WORD *)uint64_t v91 = 10272;
          this = (llvm::raw_ostream *)(*((void *)v2 + 4) + 3);
          *((void *)v2 + 4) = this;
        }
        else
        {
          llvm::raw_ostream::write(v2, " ('", 3uLL);
          this = (llvm::raw_ostream *)*((void *)v2 + 4);
        }
        uint64_t v92 = *(void *)(v71 - 8 * *(unsigned int *)(v71 + 8) + 40);
        if (v92)
        {
          uint64_t v93 = *(unint64_t **)(v92 + 8);
          unint64_t v96 = *v93;
          int v94 = v93 + 3;
          size_t v95 = v96;
          if (v96 <= *((void *)v2 + 3) - (void)this)
          {
            if (v95)
            {
              memcpy(this, v94, v95);
              this = (llvm::raw_ostream *)(*((void *)v2 + 4) + v95);
              *((void *)v2 + 4) = this;
            }
          }
          else
          {
            llvm::raw_ostream::write(v2, (const char *)v94, v95);
            this = (llvm::raw_ostream *)*((void *)v2 + 4);
          }
        }
        if (*((void *)v2 + 3) - (void)this > 1uLL)
        {
          *(_WORD *)this = 10535;
          *((void *)v2 + 4) += 2;
        }
        else
        {
          this = llvm::raw_ostream::write(v2, "')", 2uLL);
        }
      }
      uint64_t v97 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v97 >= *((void *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((void *)v2 + 4) = v97 + 1;
        *uint64_t v97 = 10;
      }
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  uint64_t v98 = *((unsigned int *)a2 + 62);
  if (v98)
  {
    uint64_t v99 = 8 * v98;
    uint64_t v100 = a2[30];
    do
    {
      unsigned int v101 = *v100;
      uint64_t v102 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v102) > 4)
      {
        *(unsigned char *)(v102 + 4) = 58;
        *(_DWORD *)uint64_t v102 = 1701869908;
        *((void *)v2 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v2, "Type:", 5uLL);
      }
      uint64_t v103 = *(void *)&v101[-8 * *((unsigned int *)v101 + 2) + 16];
      if (v103 && **(void **)(v103 + 8))
      {
        unsigned int v104 = (unsigned char *)*((void *)v2 + 4);
        if ((unint64_t)v104 >= *((void *)v2 + 3))
        {
          llvm::raw_ostream::write(v2, 32);
        }
        else
        {
          *((void *)v2 + 4) = v104 + 1;
          *unsigned int v104 = 32;
        }
        uint64_t v105 = *(void *)&v101[-8 * *((unsigned int *)v101 + 2) + 16];
        if (v105)
        {
          uint64_t v106 = *(size_t **)(v105 + 8);
          size_t v109 = *v106;
          int v107 = v106 + 3;
          size_t v108 = v109;
          uint64_t v110 = (void *)*((void *)v2 + 4);
          if (v109 <= *((void *)v2 + 3) - (void)v110)
          {
            if (v108)
            {
              memcpy(v110, v107, v108);
              *((void *)v2 + 4) += v108;
            }
          }
          else
          {
            llvm::raw_ostream::write(v2, (const char *)v107, v108);
          }
        }
      }
      int v111 = *v101;
      unsigned int v112 = v101;
      if (v111 == 15 || (v113 = *((unsigned int *)v101 + 2), (unsigned int v112 = *(unsigned __int8 **)&v101[-8 * v113]) != 0))
      {
        uint64_t v114 = *(void *)&v112[-8 * *((unsigned int *)v112 + 2)];
        if (v114)
        {
          int v115 = *(void **)(v114 + 8);
          size_t v118 = *v115;
          uint64_t v116 = (const char *)(v115 + 3);
          size_t v117 = v118;
        }
        else
        {
          size_t v117 = 0;
          uint64_t v116 = 0;
        }
        if (v111 == 15)
        {
          uint64_t v120 = v101;
          goto LABEL_135;
        }
        uint64_t v119 = -(uint64_t)*((unsigned int *)v101 + 2);
      }
      else
      {
        size_t v117 = 0;
        uint64_t v119 = -v113;
        uint64_t v116 = "";
      }
      uint64_t v120 = *(unsigned __int8 **)&v101[8 * v119];
      if (!v120)
      {
        size_t v124 = 0;
        int32x2_t v123 = "";
        goto LABEL_137;
      }
LABEL_135:
      uint64_t v121 = *(void *)&v120[-8 * *((unsigned int *)v120 + 2) + 8];
      if (v121)
      {
        __int32 v122 = *(void **)(v121 + 8);
        size_t v125 = *v122;
        int32x2_t v123 = (const char *)(v122 + 3);
        size_t v124 = v125;
      }
      else
      {
        size_t v124 = 0;
        int32x2_t v123 = 0;
      }
LABEL_137:
      sub_1CC0C00AC(v2, v116, v117, v123, v124, *((_DWORD *)v101 + 6));
      if (*v101 == 11)
      {
        uint64_t v145 = (unsigned char *)*((void *)v2 + 4);
        if (*((unsigned char **)v2 + 3) == v145)
        {
          llvm::raw_ostream::write(v2, " ", 1uLL);
        }
        else
        {
          *uint64_t v145 = 32;
          ++*((void *)v2 + 4);
        }
        int v127 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)*((unsigned int *)v101 + 13));
        if (!v128)
        {
          uint64_t v146 = *((void *)v2 + 4);
          if ((unint64_t)(*((void *)v2 + 3) - v146) > 0x10)
          {
            *(unsigned char *)(v146 + 16) = 40;
            *(_OWORD *)uint64_t v146 = *(_OWORD *)"unknown-encoding(";
            *((void *)v2 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v2, "unknown-encoding(", 0x11uLL);
          }
          this = sub_1CD098D14(v2, *((unsigned int *)v101 + 13), 0, 0, 0);
          int v147 = (unsigned char *)*((void *)v2 + 4);
          if ((unint64_t)v147 >= *((void *)v2 + 3))
          {
            this = llvm::raw_ostream::write(v2, 41);
          }
          else
          {
            *((void *)v2 + 4) = v147 + 1;
            *int v147 = 41;
          }
          goto LABEL_151;
        }
LABEL_142:
        uint64_t v129 = v127;
        size_t v130 = v128;
        uint64_t v131 = (void *)*((void *)v2 + 4);
        if (v128 > *((void *)v2 + 3) - (void)v131)
        {
          int v132 = v2;
          uint64_t v133 = v129;
          size_t v134 = v130;
LABEL_148:
          this = llvm::raw_ostream::write(v132, v133, v134);
          goto LABEL_151;
        }
        this = (llvm::raw_ostream *)memcpy(v131, v129, v128);
        uint64_t v137 = *((void *)v2 + 4) + v130;
        goto LABEL_150;
      }
      uint64_t v126 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v126 >= *((void *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, 32);
      }
      else
      {
        *((void *)v2 + 4) = v126 + 1;
        *uint64_t v126 = 32;
      }
      int v127 = llvm::dwarf::TagString((llvm::dwarf *)*((unsigned __int16 *)v101 + 1));
      if (v128) {
        goto LABEL_142;
      }
      uint64_t v135 = *((void *)v2 + 4);
      if ((unint64_t)(*((void *)v2 + 3) - v135) > 0xB)
      {
        *(_DWORD *)(v135 + 8) = 677863796;
        *(void *)uint64_t v135 = *(void *)"unknown-tag(";
        *((void *)v2 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v2, "unknown-tag(", 0xCuLL);
      }
      this = sub_1CD098D14(v2, *((unsigned __int16 *)v101 + 1), 0, 0, 0);
      int v136 = (unsigned char *)*((void *)v2 + 4);
      if (*((unsigned char **)v2 + 3) == v136)
      {
        int v132 = v2;
        uint64_t v133 = ")";
        size_t v134 = 1;
        goto LABEL_148;
      }
      *int v136 = 41;
      uint64_t v137 = *((void *)v2 + 4) + 1;
LABEL_150:
      *((void *)v2 + 4) = v137;
LABEL_151:
      if (*v101 == 13)
      {
        uint64_t v138 = *(void *)&v101[-8 * *((unsigned int *)v101 + 2) + 56];
        if (v138)
        {
          uint64_t v139 = (void *)*((void *)v2 + 4);
          if (*((void *)v2 + 3) - (void)v139 > 0xEuLL)
          {
            qmemcpy(v139, " (identifier: '", 15);
            this = (llvm::raw_ostream *)(*((void *)v2 + 4) + 15);
            *((void *)v2 + 4) = this;
          }
          else
          {
            llvm::raw_ostream::write(v2, " (identifier: '", 0xFuLL);
            this = (llvm::raw_ostream *)*((void *)v2 + 4);
          }
          unint64_t v140 = *(unint64_t **)(v138 + 8);
          unint64_t v143 = *v140;
          uint64_t v141 = v140 + 3;
          size_t v142 = v143;
          if (v143 <= *((void *)v2 + 3) - (void)this)
          {
            if (v142)
            {
              memcpy(this, v141, v142);
              this = (llvm::raw_ostream *)(*((void *)v2 + 4) + v142);
              *((void *)v2 + 4) = this;
            }
          }
          else
          {
            llvm::raw_ostream::write(v2, (const char *)v141, v142);
            this = (llvm::raw_ostream *)*((void *)v2 + 4);
          }
          if (*((void *)v2 + 3) - (void)this > 1uLL)
          {
            *(_WORD *)this = 10535;
            *((void *)v2 + 4) += 2;
          }
          else
          {
            this = llvm::raw_ostream::write(v2, "')", 2uLL);
          }
        }
      }
      uint64_t v144 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v144 >= *((void *)v2 + 3))
      {
        this = llvm::raw_ostream::write(v2, 10);
      }
      else
      {
        *((void *)v2 + 4) = v144 + 1;
        *uint64_t v144 = 10;
      }
      ++v100;
      v99 -= 8;
    }
    while (v99);
  }
  return this;
}

void sub_1CC0BFE24()
{
}

void sub_1CC0BFE60(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F2605D30;
  uint64_t v1 = (void *)*((void *)a1 + 55);
  if (v1 != *((void **)a1 + 54))
  {
    unsigned int v7 = a1;
    free(v1);
    a1 = v7;
  }
  uint64_t v2 = (void *)*((void *)a1 + 44);
  if (v2 != (void *)((char *)a1 + 368))
  {
    uint64_t v8 = a1;
    free(v2);
    a1 = v8;
  }
  uint64_t v3 = (void *)*((void *)a1 + 34);
  if (v3 != (void *)((char *)a1 + 288))
  {
    size_t v9 = a1;
    free(v3);
    a1 = v9;
  }
  int v4 = (void *)*((void *)a1 + 24);
  if (v4 != (void *)((char *)a1 + 208))
  {
    uint64_t v10 = a1;
    free(v4);
    a1 = v10;
  }
  int v5 = (void *)*((void *)a1 + 14);
  if (v5 != (void *)((char *)a1 + 128))
  {
    size_t v11 = a1;
    free(v5);
    a1 = v11;
  }
  unsigned int v6 = (void *)*((void *)a1 + 4);
  if (v6 != (void *)((char *)a1 + 48))
  {
    uint64_t v12 = a1;
    free(v6);
    a1 = v12;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC0BFF7C(llvm::Pass *this)
{
  *(void *)this = &unk_1F2605D30;
  uint64_t v2 = (void *)*((void *)this + 55);
  if (v2 != *((void **)this + 54)) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 44);
  if (v3 != (char *)this + 368) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 34);
  if (v4 != (char *)this + 288) {
    free(v4);
  }
  int v5 = (char *)*((void *)this + 24);
  if (v5 != (char *)this + 208) {
    free(v5);
  }
  unsigned int v6 = (char *)*((void *)this + 14);
  if (v6 != (char *)this + 128) {
    free(v6);
  }
  unsigned int v7 = (char *)*((void *)this + 4);
  if (v7 != (char *)this + 48) {
    free(v7);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CC0C0070(uint64_t a1, llvm::raw_ostream *this)
{
  return sub_1CC0BF1B4(this, (unsigned __int8 ***)(a1 + 32));
}

void sub_1CC0C0080(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC0C008C(uint64_t a1, const llvm::Module *a2)
{
  return 0;
}

llvm::raw_ostream *sub_1CC0C00AC(llvm::raw_ostream *this, const void *a2, size_t a3, const void *a4, size_t a5, unsigned int a6)
{
  if (!a3) {
    return this;
  }
  size_t v11 = this;
  uint64_t v12 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v12) > 5)
  {
    *(_WORD *)(v12 + 4) = 8301;
    *(_DWORD *)uint64_t v12 = 1869768224;
    unsigned int v13 = (void *)(*((void *)this + 4) + 6);
    *((void *)v11 + 4) = v13;
    if (a5) {
      goto LABEL_4;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, " from ", 6uLL);
    unsigned int v13 = (void *)*((void *)v11 + 4);
    if (a5)
    {
LABEL_4:
      if (a5 <= *((void *)v11 + 3) - (void)v13)
      {
        memcpy(v13, a4, a5);
        unsigned int v14 = (unsigned char *)(*((void *)v11 + 4) + a5);
        *((void *)v11 + 4) = v14;
      }
      else
      {
        llvm::raw_ostream::write(v11, (const char *)a4, a5);
        unsigned int v14 = (unsigned char *)*((void *)v11 + 4);
      }
      if (*((unsigned char **)v11 + 3) == v14)
      {
        llvm::raw_ostream::write(v11, "/", 1uLL);
        unsigned int v13 = (void *)*((void *)v11 + 4);
      }
      else
      {
        *unsigned int v14 = 47;
        unsigned int v13 = (void *)(*((void *)v11 + 4) + 1);
        *((void *)v11 + 4) = v13;
      }
    }
  }
  if (a3 <= *((void *)v11 + 3) - (void)v13)
  {
    this = (llvm::raw_ostream *)memcpy(v13, a2, a3);
    *((void *)v11 + 4) += a3;
    if (!a6) {
      return this;
    }
  }
  else
  {
    this = llvm::raw_ostream::write(v11, (const char *)a2, a3);
    if (!a6) {
      return this;
    }
  }
  size_t v15 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v15)
  {
    llvm::raw_ostream::write(v11, ":", 1uLL);
  }
  else
  {
    *size_t v15 = 58;
    ++*((void *)v11 + 4);
  }

  return sub_1CD098D14(v11, a6, 0, 0, 0);
}

int *sub_1CC0C309C(uint64_t a1, int *a2, size_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v19 = xmmword_1CFAC4320;
  uint64_t v20 = 0;
  llvm::MD5::update((int *)&v19, a2, a3);
  double result = llvm::MD5::final((int *)&v19, (int *)&v18);
  unsigned int v7 = *(void **)(a1 + 8);
  unsigned int v6 = (void *)(a1 + 8);
  int v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= v18;
    if (v9 >= v18) {
      size_t v11 = v5;
    }
    else {
      size_t v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    int v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v6 || v8[4] > v18) {
LABEL_12:
  }
    uint64_t v8 = v6;
  if (v8 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)(v8 + 4);
  }
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unsigned int v14 = *(uint64_t **)(v13 + 24);
    uint64_t v15 = *(void *)(v13 + 32) - (void)v14;
    if (v15)
    {
      uint64_t v16 = 8 * (v15 >> 3);
      do
      {
        uint64_t v17 = *v14++;
        *(_WORD *)(v17 + 12) |= 0x80u;
        v16 -= 8;
      }
      while (v16);
    }
  }
  return result;
}

void sub_1CC0C3198(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeStackSafetyInfoWrapperPassPass(a1, v4);
  operator new();
}

void llvm::createModuleSummaryIndexWrapperPass(llvm *this)
{
}

void sub_1CC0C328C()
{
}

void *sub_1CC0C3328(void *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    double result = operator new(8 * v4, (std::align_val_t)8uLL);
    *uint64_t v2 = result;
    v2[1] = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      return memset(result, 255, 8 * v5);
    }
  }
  else
  {
    *double result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1CC0C33C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 1;
  for (uint64_t i = 80; i != 144; i += 16)
    *(void *)(a1 + i) = -4096;
  *(void *)(a1 + 144) = 1;
  for (uint64_t j = 152; j != 248; j += 24)
    *(_OWORD *)(a1 + j) = xmmword_1CFAC30D0;
  llvm::BranchProbabilityInfo::calculate(a1, a2, a3);
}

uint64_t sub_1CC0C3450(uint64_t a1, uint64_t a2, void *a3, llvm::SmallPtrSetImplBase *this)
{
  v59[32] = *MEMORY[0x1E4F143B8];
  int v57 = v59;
  uint64_t v58 = 0x2000000000;
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((unsigned int *)this + 5);
  if (v6 == *(void *)this)
  {
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      BOOL v10 = (void *)*((void *)this + 1);
      do
      {
        if (*v10 == a2) {
          goto LABEL_106;
        }
        if (*v10 == -2) {
          uint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
      }
      while (v9);
      if (v8)
      {
        unsigned int v12 = 0;
        *uint64_t v8 = a2;
        --*((_DWORD *)this + 6);
        goto LABEL_33;
      }
    }
    unsigned int v11 = *((_DWORD *)this + 4);
    if (v7 < v11)
    {
      unsigned int v12 = 0;
      *((_DWORD *)this + 5) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 4);
  }
  if (3 * v11 <= 4 * ((int)v7 - *((_DWORD *)this + 6)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
    goto LABEL_115;
  }
  if (v11 - v7 < v11 >> 3)
  {
LABEL_115:
    llvm::SmallPtrSetImplBase::Grow(this, v11);
    unsigned int v11 = *((_DWORD *)this + 4);
    uint64_t v6 = *((void *)this + 1);
  }
  unsigned int v13 = v11 - 1;
  unsigned int v14 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v15 = (void *)(v6 + 8 * v14);
  uint64_t v16 = *v15;
  if (*v15 != -1)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != a2)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -2;
      }
      if (v19) {
        uint64_t v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      uint64_t v15 = (void *)(v6 + 8 * (v20 & v13));
      uint64_t v16 = *v15;
      if (*v15 == -1) {
        goto LABEL_26;
      }
    }
    goto LABEL_106;
  }
  uint64_t v17 = 0;
LABEL_26:
  if (v17) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v15;
  }
  if (*v21 == a2)
  {
LABEL_106:
    char v23 = 0;
    goto LABEL_107;
  }
  if (*v21 == -2) {
    --*((_DWORD *)this + 6);
  }
  else {
    ++*((_DWORD *)this + 5);
  }
  *uint64_t v21 = a2;
  unsigned int v12 = v58;
  if (v58 >= HIDWORD(v58)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
LABEL_33:
  *((void *)v57 + v12) = a2;
  unsigned int v22 = v58 + 1;
  LODWORD(v58) = v22;
  if (!v22) {
    goto LABEL_106;
  }
  char v23 = 0;
  do
  {
    while (1)
    {
      uint64_t v24 = *((void *)v57 + --v22);
      LODWORD(v58) = v22;
      unsigned int v25 = *(unsigned __int8 *)(v24 + 16);
      if (v25 - 33 > 0x33 || ((1 << (v25 - 33)) & 0x8000000000041) == 0) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v24;
      }
      if (v25 >= 0x1C) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = *(_DWORD *)(v24 + 20);
      if ((v29 & 0x40000000) != 0)
      {
        size_t v31 = *(llvm::GlobalValue ***)(v24 - 8);
        uint64_t v30 = v29 & 0x7FFFFFF;
        if (!v30) {
          goto LABEL_46;
        }
        break;
      }
      uint64_t v30 = v29 & 0x7FFFFFF;
      size_t v31 = (llvm::GlobalValue **)(v24 - 32 * v30);
      if (v30) {
        break;
      }
LABEL_46:
      if (!v22) {
        goto LABEL_107;
      }
    }
    size_t v32 = &v31[4 * v30];
    do
    {
      uint64_t v33 = *v31;
      unsigned int v34 = *((unsigned __int8 *)*v31 + 16);
      if (*v31) {
        BOOL v35 = v34 - 21 >= 7;
      }
      else {
        BOOL v35 = 0;
      }
      if (!v35) {
        goto LABEL_95;
      }
      if (v34 == 4)
      {
        char v23 = 1;
        goto LABEL_95;
      }
      if (v34 <= 3)
      {
        if (!v28 || (llvm::GlobalValue **)(v28 - 32) != v31)
        {
          unint64_t v42 = sub_1CD4AC784(*v31);
          size_t v43 = sub_1CD4ADB54(a1, v42);
          *((void *)v43 + 1) = v33;
          unint64_t v56 = (unint64_t)v43 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133);
          sub_1CC0C3958(a3, &v56);
        }
        goto LABEL_95;
      }
      uint64_t v36 = *((void *)this + 1);
      uint64_t v37 = *((unsigned int *)this + 5);
      if (v36 == *(void *)this)
      {
        if (v37)
        {
          uint64_t v38 = 0;
          uint64_t v39 = 8 * v37;
          int v40 = (llvm::GlobalValue **)*((void *)this + 1);
          while (*v40 != v33)
          {
            if (*v40 == (llvm::GlobalValue *)-2) {
              uint64_t v38 = v40;
            }
            ++v40;
            v39 -= 8;
            if (!v39)
            {
              if (!v38) {
                goto LABEL_66;
              }
              *uint64_t v38 = v33;
              --*((_DWORD *)this + 6);
              goto LABEL_93;
            }
          }
          goto LABEL_95;
        }
LABEL_66:
        unsigned int v41 = *((_DWORD *)this + 4);
        if (v37 < v41)
        {
          *((_DWORD *)this + 5) = v37 + 1;
          *(void *)(v36 + 8 * v37) = v33;
LABEL_93:
          if (v58 >= (unint64_t)HIDWORD(v58)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v57 + v58) = v33;
          LODWORD(v58) = v58 + 1;
          goto LABEL_95;
        }
      }
      else
      {
        unsigned int v41 = *((_DWORD *)this + 4);
      }
      if (3 * v41 <= 4 * ((int)v37 - *((_DWORD *)this + 6)))
      {
        if (v41 >= 0x40) {
          v41 *= 2;
        }
        else {
          unsigned int v41 = 128;
        }
      }
      else if (v41 - v37 >= v41 >> 3)
      {
        goto LABEL_74;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v41);
      unsigned int v41 = *((_DWORD *)this + 4);
      uint64_t v36 = *((void *)this + 1);
LABEL_74:
      unsigned int v44 = v41 - 1;
      unsigned int v45 = (v41 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      int v46 = (llvm::GlobalValue **)(v36 + 8 * v45);
      uint64_t v47 = *v46;
      if (*v46 == (llvm::GlobalValue *)-1)
      {
        uint64_t v48 = 0;
LABEL_86:
        if (v48) {
          size_t v52 = v48;
        }
        else {
          size_t v52 = v46;
        }
        if (*v52 != v33)
        {
          if (*v52 == (llvm::GlobalValue *)-2) {
            --*((_DWORD *)this + 6);
          }
          else {
            ++*((_DWORD *)this + 5);
          }
          unint64_t *v52 = v33;
          goto LABEL_93;
        }
      }
      else
      {
        uint64_t v48 = 0;
        int v49 = 1;
        while (v47 != v33)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v47 == (llvm::GlobalValue *)-2;
          }
          if (v50) {
            uint64_t v48 = v46;
          }
          unsigned int v51 = v45 + v49++;
          unsigned int v45 = v51 & v44;
          int v46 = (llvm::GlobalValue **)(v36 + 8 * (v51 & v44));
          uint64_t v47 = *v46;
          if (*v46 == (llvm::GlobalValue *)-1) {
            goto LABEL_86;
          }
        }
      }
LABEL_95:
      v31 += 4;
    }
    while (v31 != v32);
    unsigned int v22 = v58;
  }
  while (v58);
LABEL_107:
  if (v57 != v59) {
    free(v57);
  }
  return v23 & 1;
}

void sub_1CC0C3958(void *a1, void *a2)
{
  sub_1CD4AD7E0((uint64_t)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    uint64_t v5 = (char *)a1[4];
    unint64_t v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = (char *)a1[3];
      uint64_t v8 = (v5 - v7) >> 3;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_1CB833614();
        }
        unsigned int v12 = (char *)operator new(8 * v11);
      }
      else
      {
        unsigned int v12 = 0;
      }
      unsigned int v13 = &v12[8 * v8];
      *(void *)unsigned int v13 = *a2;
      uint64_t v6 = v13 + 8;
      while (v5 != v7)
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(void *)uint64_t v5 = *a2;
      uint64_t v6 = v5 + 8;
    }
    a1[4] = v6;
  }
}

void sub_1CC0C3A60()
{
}

_DWORD *sub_1CC0C3C68(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(void *)double result = -8;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC0C3CFC(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v5 = operator new(8 * v4, (std::align_val_t)8uLL);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    if (v6)
    {
      memset_pattern16(v5, &unk_1CFAC4330, 8 * v6);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

_DWORD *sub_1CC0C3DA0(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(_OWORD *)double result = xmmword_1CD91C150;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

char *sub_1CC0C3E38(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    double result = (char *)operator new(40 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    int v5 = *((_DWORD *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = &result[40 * v5];
      do
      {
        *(_OWORD *)double result = xmmword_1CD91C150;
        *((void *)result + 3) = 0;
        *((void *)result + 4) = 0;
        *((void *)result + 2) = 0;
        result += 40;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1CC0C3EE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_1CC0C3F88(void *a1, uint64_t *a2)
{
  sub_1CD4ADCD0((uint64_t)a1, a2, (uint64_t)&v17);
  int v4 = v18;
  if (v18)
  {
    uint64_t v6 = (uint64_t *)a1[4];
    unint64_t v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (uint64_t *)a1[3];
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        unsigned int v13 = (char *)operator new(8 * v12);
      }
      else
      {
        unsigned int v13 = 0;
      }
      uint64_t v14 = (uint64_t *)&v13[8 * v9];
      *uint64_t v14 = *a2;
      uint64_t v7 = v14 + 1;
      while (v6 != v8)
      {
        uint64_t v15 = *--v6;
        *--uint64_t v14 = v15;
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v6 = *a2;
      uint64_t v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

void sub_1CC0C40A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(void *)&long long v39 = a3;
  *((void *)&v39 + 1) = a1;
  int v5 = *(_DWORD *)(a2 + 20);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    uint64_t v7 = 0;
  }
  else if (v6 == 39)
  {
    uint64_t v7 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    uint64_t v7 = 2;
  }
  uint64_t v8 = a2 - 32 * (v5 & 0x7FFFFFF);
  if (v5 < 0 && (uint64_t v36 = *(void *)(v8 - 8), (v36 & 0xFFFFFFFF0) != 0)) {
    uint64_t v9 = (*(_DWORD *)(v8 - 12) - *(_DWORD *)(v8 - v36));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = a2 - 32 * v7 - 32 * v9 - 32;
  uint64_t v11 = (uint64_t *)(v8 + 32);
  if (v8 + 32 == v10)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = 0;
LABEL_33:
    long long v40 = v39;
    long long __p = v13;
    unint64_t v42 = v12;
    size_t v43 = v14;
    sub_1CD4AE104(a5, &v40);
    if (__p)
    {
      unint64_t v42 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v13 = 0;
    uint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = *v11;
      BOOL v17 = *v11 && *(unsigned char *)(*v11 + 16) == 16;
      if (!v17 || *(_DWORD *)(v16 + 32) > 0x40u) {
        break;
      }
      uint64_t v18 = *(void *)(v16 + 24);
      if (v15 >= v14)
      {
        uint64_t v19 = (v15 - v13) >> 3;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          goto LABEL_59;
        }
        if ((v14 - v13) >> 2 > v20) {
          unint64_t v20 = (v14 - v13) >> 2;
        }
        if ((unint64_t)(v14 - v13) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          if (v21 >> 61) {
            goto LABEL_60;
          }
          unsigned int v22 = (char *)operator new(8 * v21);
        }
        else
        {
          unsigned int v22 = 0;
        }
        char v23 = &v22[8 * v19];
        *(void *)char v23 = v18;
        unint64_t v12 = v23 + 8;
        while (v15 != v13)
        {
          uint64_t v24 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v23 - 1) = v24;
          v23 -= 8;
        }
        uint64_t v14 = &v22[8 * v21];
        if (v13) {
          operator delete(v13);
        }
        unsigned int v13 = v23;
      }
      else
      {
        *(void *)uint64_t v15 = v18;
        unint64_t v12 = v15 + 8;
      }
      v11 += 4;
      uint64_t v15 = (char *)v12;
      if (v11 == (uint64_t *)v10) {
        goto LABEL_33;
      }
    }
    long long v44 = v39;
    sub_1CD4AE170((uint64_t)&v40, (uint64_t)a4, (uint64_t *)&v44);
    if ((_BYTE)__p)
    {
      size_t v26 = (_OWORD *)a4[4];
      unint64_t v25 = a4[5];
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v28 = (_OWORD *)a4[3];
        uint64_t v29 = v26 - v28;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
LABEL_59:
        }
          abort();
        uint64_t v31 = v25 - (void)v28;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          if (v32 >> 60) {
LABEL_60:
          }
            sub_1CB833614();
          uint64_t v33 = (char *)operator new(16 * v32);
        }
        else
        {
          uint64_t v33 = 0;
        }
        unsigned int v34 = &v33[16 * v29];
        BOOL v35 = &v33[16 * v32];
        *(_OWORD *)unsigned int v34 = v44;
        uint64_t v27 = v34 + 16;
        if (v26 != v28)
        {
          do
          {
            *((_OWORD *)v34 - 1) = *(v26 - 1);
            v34 -= 16;
            --v26;
          }
          while (v26 != v28);
          size_t v26 = (_OWORD *)a4[3];
        }
        a4[3] = v34;
        a4[4] = v27;
        a4[5] = v35;
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *size_t v26 = v44;
        uint64_t v27 = v26 + 1;
      }
      a4[4] = v27;
    }
    if (v13)
    {
      operator delete(v13);
    }
  }
}

uint64_t sub_1CC0C43A8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(_OWORD **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_1CD91C150;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    unint64_t v10 = a2[1];
    if (*a2) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v10 > 0xFFFFFFFFFFFFFFFDLL;
    }
    if (!v11)
    {
      unint64_t v12 = 0;
      double result = sub_1CD4AE204(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v12);
      *unint64_t v12 = *(_OWORD *)a2;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1CC0C445C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1CC0C48B0(a1, a2);
  }
  else
  {
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 16) = 0;
    sub_1CBFCBA2C((void *)(v3 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    uint64_t result = v3 + 40;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1CC0C44C4(uint64_t a1, int a2, void *a3, void *a4)
{
  if (!a2)
  {
    uint64_t v15 = 0;
    uint64_t result = 0;
    goto LABEL_43;
  }
  uint64_t v5 = a1;
  uint64_t v7 = (unsigned char *)a3[2];
  uint64_t v6 = (unsigned char *)a3[3];
  if (v6 != v7 && v6 - v7 < 0) {
LABEL_47:
  }
    abort();
  unsigned int v34 = 0;
  BOOL v35 = a3;
  uint64_t v8 = *a3;
  int v36 = a2 - 1;
  unsigned int v9 = (a2 - 1) & *a3;
  int v10 = 1;
  while (1)
  {
    uint64_t v11 = a3[1];
    int64_t v12 = v6 - v7;
    int v39 = v10;
    if (v6 == v7)
    {
      __s1 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      if (v12 < 0) {
        goto LABEL_47;
      }
      unsigned int v13 = (char *)operator new(v6 - v7);
      memmove(v13, v7, v12);
      __s1 = v13;
      uint64_t v14 = &v13[8 * (v12 >> 3)];
    }
    unsigned int v38 = v9;
    uint64_t v15 = (void *)(v5 + 40 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v19 = (unsigned char *)v15[2];
    uint64_t v18 = (unsigned char *)v15[3];
    int64_t v20 = v18 - v19;
    if (v18 == v19)
    {
      unsigned int v22 = 0;
      char v23 = 0;
    }
    else
    {
      if (v20 < 0) {
        goto LABEL_47;
      }
      unint64_t v21 = v14;
      unsigned int v22 = (char *)operator new(v20);
      memmove(v22, v19, v20);
      char v23 = &v22[8 * (v20 >> 3)];
      uint64_t v14 = v21;
    }
    if (v8 == v17 && v11 == v16)
    {
      size_t v26 = __s1;
      if (v14 - (unsigned char *)__s1 != v23 - v22)
      {
        BOOL v25 = 0;
        if (!v22) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v22);
        goto LABEL_24;
      }
      BOOL v25 = memcmp(__s1, v22, v14 - (unsigned char *)__s1) == 0;
      if (v22) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v25 = 0;
      size_t v26 = __s1;
      if (v22) {
        goto LABEL_23;
      }
    }
LABEL_24:
    if (v26) {
      operator delete(v26);
    }
    if (v25)
    {
      uint64_t result = 1;
      goto LABEL_43;
    }
    uint64_t v27 = v15[2];
    uint64_t v28 = v15[3];
    if (v28 == v27) {
      break;
    }
    if (v28 - v27 < 0) {
      goto LABEL_47;
    }
LABEL_29:
    int v10 = v39 + 1;
    unsigned int v9 = (v38 + v39) & v36;
    a3 = v35;
    uint64_t v8 = *v35;
    uint64_t v7 = (unsigned char *)v35[2];
    uint64_t v6 = (unsigned char *)v35[3];
    uint64_t v5 = a1;
  }
  uint64_t v29 = v15[1];
  if (*v15 || v29 != -1)
  {
    BOOL v30 = v29 == -2 && *v15 == 0;
    uint64_t v31 = v34;
    if (v30 && v34 == 0) {
      uint64_t v31 = v15;
    }
    unsigned int v34 = v31;
    goto LABEL_29;
  }
  uint64_t result = 0;
  if (v34) {
    uint64_t v15 = v34;
  }
LABEL_43:
  *a4 = v15;
  return result;
}

void *sub_1CC0C46DC(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD4AE508(a1, v6);
  uint64_t v11 = 0;
  sub_1CC0C44C4(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v11);
  a3 = v11;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  if (v8 != v7)
  {
    if (v8 - v7 < 0) {
      abort();
    }
LABEL_10:
    --*(_DWORD *)(a1 + 12);
    return a3;
  }
  if (*a3) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = a3[1] == -1;
  }
  if (!v9) {
    goto LABEL_10;
  }
  return a3;
}

void sub_1CC0C47A8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(void *)a1 + 40 * v5;
    do
    {
      *(_OWORD *)uint64_t v6 = xmmword_1CD91C150;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 16) = 0;
      v6 += 40;
    }
    while (v6 != v7);
  }
  if (a2 != a3)
  {
    for (uint64_t i = a2 + 1; ; uint64_t i = (__n128 *)((char *)i + 40))
    {
      BOOL v9 = (void *)i->n128_u64[0];
      unint64_t v10 = i->n128_u64[1];
      if (v10 != i->n128_u64[0]) {
        break;
      }
      if (i[-1].n128_u64[0]) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = i[-1].n128_u64[1] > 0xFFFFFFFFFFFFFFFDLL;
      }
      if (!v11) {
        goto LABEL_17;
      }
      if (v9) {
        goto LABEL_13;
      }
LABEL_14:
      int64_t v12 = &i[1].n128_i8[8];
      if (v12 == (char *)a3) {
        return;
      }
    }
    if ((uint64_t)(v10 - i->n128_u64[0]) < 0) {
      abort();
    }
LABEL_17:
    uint64_t v14 = 0;
    sub_1CC0C44C4(*(void *)a1, *(_DWORD *)(a1 + 16), (__n128 *)i[-1].n128_u64, &v14);
    unsigned int v13 = v14;
    *uint64_t v14 = i[-1];
    sub_1CD46D2D8((uint64_t)(v13 + 1), i);
    ++*(_DWORD *)(a1 + 8);
    BOOL v9 = (void *)i->n128_u64[0];
    if (!i->n128_u64[0]) {
      goto LABEL_14;
    }
LABEL_13:
    i->n128_u64[1] = (unint64_t)v9;
    operator delete(v9);
    goto LABEL_14;
  }
}

uint64_t sub_1CC0C48B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v3;
  }
  v12[4] = a1 + 2;
  if (v5 > 0x666666666666666) {
    sub_1CB833614();
  }
  uint64_t v7 = 5 * v5;
  uint64_t v8 = (char *)operator new(40 * v5);
  BOOL v9 = &v8[40 * v2];
  v12[0] = v8;
  v12[1] = v9;
  v12[3] = &v8[8 * v7];
  *(_OWORD *)BOOL v9 = *(_OWORD *)a2;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 2) = 0;
  sub_1CBFCBA2C((void *)v9 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  v12[2] = v9 + 40;
  sub_1CD4AE5F0(a1, v12);
  uint64_t v10 = a1[1];
  sub_1CD4AE684((uint64_t)v12);
  return v10;
}

void sub_1CC0C49BC(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          uint64_t v6 = *((void *)v4 - 2);
          if (v6) {
            MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v4 - 6) >= 0x41u)
        {
          uint64_t v7 = *((void *)v4 - 4);
          if (v7) {
            MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
          }
        }
        v4 -= 48;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC0C4A94(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 3;
      do
      {
        uint64_t v10 = v6;
        sub_1CC0C49BC(&v10);
        if (*((_DWORD *)v6 - 2) >= 0x41u)
        {
          uint64_t v8 = (uint64_t)*(v6 - 2);
          if (v8) {
            MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v6 - 6) >= 0x41u)
        {
          uint64_t v9 = (uint64_t)*(v6 - 4);
          if (v9) {
            MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
          }
        }
        uint64_t v7 = v6 - 5;
        v6 -= 8;
      }
      while (v7 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC0C4B6C(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    unint64_t v3 = (void **)(*(void *)a1 + 24);
    do
    {
      int v4 = *(v3 - 1);
      if (*v3 != v4 && (unsigned char *)*v3 - v4 < 0) {
        abort();
      }
      if (v4)
      {
        *unint64_t v3 = v4;
        operator delete(v4);
      }
      v3 += 5;
      v2 -= 40;
    }
    while (v2);
  }
}

void sub_1CC0C4BCC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC0C4C58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3) {
    BOOL v5 = *(_DWORD *)(*a3 + 8) == 1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v6 = *(void **)(v4 + 112);
    if (v6) {
      LOBYTE(v6) = v6[1] != *v6;
    }
    *(unsigned char *)(a1 + 136) |= v6;
  }
  uint64_t v7 = (void *)(a2 & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = (uint64_t)sub_1CD4AF5CC((uint64_t **)a1, *(uint64_t **)(a2 & 0xFFFFFFFFFFFFFFF8), *(void *)(v4 + 16));
  uint64_t v9 = (void *)v7[4];
  unint64_t v10 = v7[5];
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v13 = v7[3];
    uint64_t v14 = ((uint64_t)v9 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v15 = v10 - v13;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
      uint64_t v16 = v14 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    uint64_t v29 = v7 + 5;
    if (v17)
    {
      if (v17 >> 61) {
        sub_1CB833614();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[8 * v14];
    int64_t v20 = &v18[8 * v17];
    *(void *)uint64_t v19 = *a3;
    int64_t v12 = v19 + 8;
    *a3 = 0;
    v27.i64[1] = (uint64_t)(v19 + 8);
    uint64_t v28 = v20;
    unsigned int v22 = (void *)v7[3];
    unint64_t v21 = (void *)v7[4];
    if (v21 == v22)
    {
      int64x2_t v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        uint64_t v23 = *--v21;
        *unint64_t v21 = 0;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      int64x2_t v24 = *(int64x2_t *)(v7 + 3);
      int64_t v12 = (void *)v27.i64[1];
      int64_t v20 = v28;
    }
    void v7[3] = v19;
    v7[4] = v12;
    int64x2_t v27 = v24;
    BOOL v25 = (char *)v7[5];
    void v7[5] = v20;
    uint64_t v28 = v25;
    uint64_t v26 = v24.i64[0];
    uint64_t result = sub_1CC0C4DC0((uint64_t)&v26);
  }
  else
  {
    uint64_t v11 = *a3;
    *a3 = 0;
    *uint64_t v9 = v11;
    int64_t v12 = v9 + 1;
  }
  v7[4] = v12;
  return result;
}

uint64_t sub_1CC0C4DC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1CC0C4E3C()
{
}

void sub_1CC0C4EBC(llvm::Value *a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t **a5)
{
  uint64_t v8 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 8) == 15)
  {
    uint64_t v9 = llvm::Value::stripPointerCasts(a1);
    if (!v9) {
      return;
    }
    unint64_t v10 = v9;
    if (*((unsigned char *)v9 + 16)) {
      return;
    }
    if ((*((unsigned char *)v9 + 23) & 0x10) == 0)
    {
LABEL_46:
      unint64_t v55 = sub_1CD4AC784(v9);
      unint64_t v56 = sub_1CD4ADB54(a4, v55);
      *((void *)v56 + 1) = v10;
      unint64_t v57 = (unint64_t)v56 & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a4 + 133);
      size_t v59 = a5[1];
      unint64_t v58 = (unint64_t)a5[2];
      if ((unint64_t)v59 >= v58)
      {
        uint64_t v61 = *a5;
        uint64_t v62 = ((char *)v59 - (char *)*a5) >> 4;
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 60) {
          abort();
        }
        uint64_t v64 = v58 - (void)v61;
        if (v64 >> 3 > v63) {
          unint64_t v63 = v64 >> 3;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          if (v65 >> 60) {
            sub_1CB833614();
          }
          unint64_t v66 = (char *)operator new(16 * v65);
        }
        else
        {
          unint64_t v66 = 0;
        }
        unsigned int v67 = (unint64_t *)&v66[16 * v62];
        *unsigned int v67 = v57;
        v67[1] = a2;
        uint64_t v60 = v67 + 2;
        if (v59 != v61)
        {
          do
          {
            *((_OWORD *)v67 - 1) = *((_OWORD *)v59 - 1);
            v67 -= 2;
            v59 -= 2;
          }
          while (v59 != v61);
          size_t v59 = *a5;
        }
        *a5 = v67;
        a5[1] = v60;
        a5[2] = (unint64_t *)&v66[16 * v65];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *size_t v59 = v57;
        v59[1] = a2;
        uint64_t v60 = v59 + 2;
      }
      a5[1] = v60;
      return;
    }
    uint64_t v11 = ***(void ***)v9;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      uint64_t v15 = (llvm::Value **)(v12 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v9)
      {
LABEL_36:
        int v49 = v15[1];
        if (*(void *)v49 == 18)
        {
          uint64_t v50 = *((void *)v49 + 2);
          uint64_t v51 = *((void *)v49 + 3);
          int v52 = *((unsigned __int16 *)v49 + 16);
          BOOL v53 = v50 == 0x75705F6178635F5FLL && v51 == 0x75747269765F6572;
          if (v53 && v52 == 27745) {
            return;
          }
        }
        goto LABEL_46;
      }
      int v17 = 1;
      while (v16 != (llvm::Value *)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        uint64_t v16 = *(llvm::Value **)(v12 + 16 * v14);
        if (v16 == v9)
        {
          uint64_t v15 = (llvm::Value **)(v12 + 16 * v14);
          goto LABEL_36;
        }
      }
    }
    uint64_t v15 = (llvm::Value **)(v12 + 16 * v13);
    goto LABEL_36;
  }
  int64_t v20 = (llvm::DataLayout *)(a3 + 272);
  int v21 = *((unsigned __int8 *)a1 + 16);
  if (v21 == 8)
  {
    unsigned int v38 = *(llvm::Type **)(v8 + 24);
    uint64_t v39 = sub_1CB83544C(a3 + 272, (uint64_t)v38);
    BOOL v41 = v40 == 1;
    char Alignment = llvm::DataLayout::getAlignment(v20, v38, 1);
    if (v41) {
    if (*(_DWORD *)(v8 + 32))
    }
    {
      unint64_t v44 = 0;
      unint64_t v45 = ((1 << Alignment) + ((unint64_t)(v39 + 7) >> 3) - 1) & -(1 << Alignment);
      uint64_t v46 = 32 * *(unsigned int *)(v8 + 32);
      do
      {
        int v47 = *((_DWORD *)a1 + 5);
        if ((v47 & 0x40000000) != 0) {
          uint64_t v48 = (uint64_t *)*((void *)a1 - 1);
        }
        else {
          uint64_t v48 = (uint64_t *)((char *)a1 - 32 * (v47 & 0x7FFFFFF));
        }
        sub_1CC0C4EBC(v48[v44 / 8], a2, a3, a4, a5);
        v44 += 32;
        a2 += v45;
      }
      while (v46 != v44);
    }
  }
  else if (v21 == 9)
  {
    StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(a3 + 272), (llvm::StructType *)v8);
    uint64_t v23 = *(unsigned int *)(v8 + 12);
    if (v23)
    {
      int64x2_t v24 = StructLayout;
      uint64_t v25 = 0;
      uint64_t v26 = *(void *)(v8 + 16);
      uint64_t v27 = v26 + 8 * v23;
      uint64_t v28 = (char *)StructLayout + 16;
      do
      {
        unint64_t v29 = *(void *)&v28[8 * v25];
        BOOL v30 = v28;
        unint64_t v31 = *((_DWORD *)v24 + 3) & 0x7FFFFFFF;
        if (v31)
        {
          BOOL v30 = v28;
          do
          {
            unint64_t v32 = v31 >> 1;
            uint64_t v33 = (unint64_t *)&v30[8 * (v31 >> 1)];
            unint64_t v35 = *v33;
            unsigned int v34 = (char *)(v33 + 1);
            v31 += ~(v31 >> 1);
            if (v35 > v29) {
              unint64_t v31 = v32;
            }
            else {
              BOOL v30 = v34;
            }
          }
          while (v31);
        }
        int v36 = *((_DWORD *)a1 + 5);
        if ((v36 & 0x40000000) != 0) {
          uint64_t v37 = (uint64_t *)*((void *)a1 - 1);
        }
        else {
          uint64_t v37 = (uint64_t *)((char *)a1 - 32 * (v36 & 0x7FFFFFF));
        }
        sub_1CC0C4EBC(v37[4 * ((unint64_t)(v30 - v28 - 8) >> 3)], v29 + a2, a3, a4, a5);
        v26 += 8;
        ++v25;
      }
      while (v26 != v27);
    }
  }
}

uint64_t sub_1CC0C5278(const void **a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v9 = a1;
    a1 = (const void **)*a1;
    size_t v5 = (size_t)v9[1];
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 >= v5) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  LODWORD(result) = memcmp(a1, v3, v6);
  if (v5 < v4) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v4 < v5;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

void *sub_1CC0C52DC(void *a1)
{
  *a1 = &unk_1F2606010;
  uint64_t v4 = a1[8];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1CC0C5358((uint64_t)v2, v3);
  }
  *a1 = &unk_1F26061D8;
  size_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1CC0C5358(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1D25D9CE0);
  }
}

void *sub_1CC0C53B4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t result = operator new(16 * a4);
    unsigned int v8 = result;
    *uint64_t v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[2 * a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memcpy(result, a2, v9);
    }
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

uint64_t *sub_1CC0C5438(uint64_t *result, unsigned __int8 *a2, unint64_t a3, char a4)
{
  if ((a4 & 6) == 0)
  {
    v10[15] = v4;
    v10[16] = v5;
    size_t v6 = result;
    *(unsigned char *)*uint64_t result = 1;
    uint64_t result = (uint64_t *)llvm::Module::getNamedValue(result[1], a2, a3);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = v6[2];
      v9[0] = sub_1CD4AC784((llvm::GlobalValue *)result);
      sub_1CD4ADCD0(v8, v9, (uint64_t)v10);
      if (!*((unsigned char *)v7 + 16)) {
        operator new();
      }
      operator new();
    }
  }
  return result;
}

void *sub_1CC0C57E8(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t result = operator new(16 * a4);
    uint64_t v8 = result;
    *uint64_t v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[2 * a4];
    if (a2 != a3)
    {
      size_t v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFF0;
      uint64_t result = memcpy(result, a2, v9);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void *sub_1CC0C5874(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      abort();
    }
    uint64_t v7 = result;
    uint64_t v8 = (char *)operator new(40 * a4);
    *uint64_t v7 = v8;
    v7[1] = v8;
    uint64_t v7[2] = &v8[40 * a4];
    return sub_1CD4B0554(v7, a2, a3);
  }
  return result;
}

uint64_t sub_1CC0C5918(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 58) {
      abort();
    }
    uint64_t v7 = (void *)result;
    uint64_t v8 = (char *)operator new(a4 << 6);
    *uint64_t v7 = v8;
    v7[1] = v8;
    uint64_t v7[2] = &v8[64 * a4];
    uint64_t result = sub_1CC0C5988((uint64_t)(v7 + 2), a2, a3, (uint64_t)v8);
    v7[1] = result;
  }
  return result;
}

uint64_t sub_1CC0C5988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(void *)uint64_t v8 = *(void *)(a2 + v7);
      unsigned int v10 = *(_DWORD *)(a2 + v7 + 16);
      *(_DWORD *)(v8 + 16) = v10;
      if (v10 > 0x40) {
        operator new[]();
      }
      *(void *)(v8 + 8) = *(void *)(v9 + 8);
      unsigned int v11 = *(_DWORD *)(v9 + 32);
      *(_DWORD *)(a4 + v7 + 32) = v11;
      if (v11 > 0x40) {
        operator new[]();
      }
      *(void *)(a4 + v7 + 24) = *(void *)(a2 + v7 + 24);
      uint64_t v12 = a4 + v7;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      uint64_t v13 = (void *)(a4 + v7 + 40);
      v13[2] = 0;
      sub_1CC0C5AE0(v13, *(void *)(v9 + 40), *(void *)(v9 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 48) - *(void *)(v9 + 40)) >> 4));
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void *sub_1CC0C5AE0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      abort();
    }
    size_t v6 = result;
    uint64_t v7 = 3 * a4;
    uint64_t result = operator new(48 * a4);
    uint64_t v8 = (char *)result;
    *size_t v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v7];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        unsigned int v10 = (char *)&result[v9];
        uint64_t v11 = a2 + v9 * 8;
        *(_OWORD *)unsigned int v10 = *(_OWORD *)(a2 + v9 * 8);
        unsigned int v12 = *(_DWORD *)(a2 + v9 * 8 + 24);
        *((_DWORD *)v10 + 6) = v12;
        if (v12 > 0x40) {
          operator new[]();
        }
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        unsigned int v13 = *(_DWORD *)(v11 + 40);
        LODWORD(result[v9 + 5]) = v13;
        if (v13 > 0x40) {
          operator new[]();
        }
        result[v9 + 4] = *(void *)(a2 + v9 * 8 + 32);
        v9 += 6;
      }
      while (v11 + 48 != a3);
      uint64_t v8 = (char *)&result[v9];
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1CC0C5C4C()
{
}

void *sub_1CC0C5C60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F2606098;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0C5CA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606098;
  a2[1] = v2;
  return result;
}

void sub_1CC0C5CD4()
{
}

void sub_1CC0C5D04()
{
}

__n128 sub_1CC0C5D18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F26060E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC0C5D64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26060E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC0C5D94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  return 0;
}

void sub_1CC0C5DD4()
{
}

void *sub_1CC0C5DE8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2606128;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0C5E30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606128;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CC0C5E5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

void sub_1CC0C5EE8()
{
}

__n128 sub_1CC0C5EFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2606170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC0C5F48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2606170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CC0C5F78(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 8)) {
    return 0;
  }
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 24);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 96))(v2, &llvm::StackSafetyInfoWrapperPass::ID)
       + 32;
}

uint64_t sub_1CC0C6014()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force all edges in the function summary to cold";
  v1.n128_u64[1] = 47;
  uint64_t v3 = (llvm *)&ForceSummaryEdgesCold;
  *(void *)&long long v4 = v5;
  v5[0] = "none";
  v5[1] = 4;
  int v6 = 0;
  uint64_t v7 = "None.";
  uint64_t v8 = 5;
  uint64_t v9 = "all-non-critical";
  uint64_t v10 = 16;
  int v11 = 1;
  unsigned int v12 = "All non-critical edges.";
  uint64_t v13 = 23;
  uint64_t v14 = "all";
  uint64_t v15 = 3;
  int v16 = 2;
  int v17 = "All edges.";
  uint64_t v18 = 10;
  *((void *)&v4 + 1) = 0x400000003;
  sub_1CD4AFE64(&v2, &v3, (long long *)&v1, (uint64_t)&v4);
  if ((void *)v4 != v5) {
    free((void *)v4);
  }
  __cxa_atexit((void (*)(void *))sub_1CD4AC780, &FSEC, &dword_1CB82C000);
  int v2 = 1;
  uint64_t v3 = (llvm *)"";
  *(void *)&long long v4 = "filename";
  *((void *)&v4 + 1) = 8;
  v1.n128_u64[0] = (unint64_t)"File to emit dot graph of new summary into.";
  v1.n128_u64[1] = 43;
  sub_1CD4B03BC((const char **)&v3, &v2, &v4, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &ModuleSummaryDotFile, &dword_1CB82C000);
}

uint64_t llvm::LoopSafetyInfo::getBlockColors(llvm::LoopSafetyInfo *this)
{
  return (uint64_t)this + 8;
}

unint64_t *sub_1CC0C61CC(unint64_t *a1, unint64_t *a2)
{
  if (a1 == a2) {
    return a1;
  }
  unint64_t v3 = *a2;
  if (*a2 < 8) {
    goto LABEL_3;
  }
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0 && v4)
  {
    int v5 = *(_DWORD *)(v4 + 8);
    if (!v5)
    {
LABEL_3:
      if ((*a1 & 4) != 0)
      {
        unint64_t v7 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v7) {
          *(_DWORD *)(v7 + 8) = 0;
        }
      }
      else
      {
        *a1 = 0;
      }
      return a1;
    }
    unint64_t v6 = *a1;
    if ((*a1 & 4) != 0)
    {
LABEL_21:
      sub_1CBB08064(v6 & 0xFFFFFFFFFFFFFFF8, v4);
      return a1;
    }
    goto LABEL_15;
  }
  unint64_t v6 = *a1;
  if ((*a1 & 4) == 0)
  {
    if ((v3 & 4) == 0)
    {
LABEL_17:
      *a1 = v4;
      return a1;
    }
    int v5 = *(_DWORD *)(v4 + 8);
LABEL_15:
    if (v5 != 1) {
      operator new();
    }
    unint64_t v4 = **(void **)v4 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_17;
  }
  if ((v3 & 4) != 0) {
    goto LABEL_21;
  }
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
  if (!*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)unint64_t v8 = v4;
  ++*(_DWORD *)(v8 + 8);
  return a1;
}

uint64_t *llvm::LoopSafetyInfo::computeBlockColors(uint64_t *this, const llvm::Loop *a2)
{
  int v2 = *(llvm::Function **)(**((void **)a2 + 4) + 56);
  if ((*((_WORD *)v2 + 9) & 8) != 0)
  {
    unint64_t v8 = this;
    uint64_t v9 = *(llvm **)(**((void **)a2 + 4) + 56);
    this = (uint64_t *)llvm::Function::getPersonalityFn(v2);
    if (this)
    {
      unsigned int v4 = llvm::classifyEHPersonality((llvm::Value *)this, v3);
      this = (uint64_t *)v9;
      BOOL v5 = v4 > 0xC;
      int v6 = (1 << v4) & 0x1780;
      if (!v5 && v6 != 0)
      {
        llvm::colorEHFunclets(v9, (uint64_t)v10);
        sub_1CD4B08AC(v8 + 1, v10);
        return sub_1CC0CADD4(v10);
      }
    }
  }
  return this;
}

BOOL llvm::ICFLoopSafetyInfo::blockMayThrow(int32x2_t *this, const llvm::BasicBlock *a2)
{
  return llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this + 5, a2) != 0;
}

uint64_t llvm::ICFLoopSafetyInfo::anyBlockMayThrow(llvm::ICFLoopSafetyInfo *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t *llvm::ICFLoopSafetyInfo::computeLoopSafetyInfo(int32x2_t *this, const llvm::Loop *a2)
{
  sub_1CBB8977C(&this[6]);
  sub_1CBB8977C(&this[10]);
  this[4].i8[0] = 0;
  unsigned int v4 = (const llvm::BasicBlock **)*((void *)a2 + 4);
  uint64_t v5 = *((void *)a2 + 5) - (void)v4;
  if (v5)
  {
    uint64_t v6 = 8 * (v5 >> 3);
    while (!llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this + 5, *v4))
    {
      ++v4;
      v6 -= 8;
      if (!v6) {
        goto LABEL_5;
      }
    }
    this[4].i8[0] = 1;
  }
LABEL_5:

  return llvm::LoopSafetyInfo::computeBlockColors((uint64_t *)this, a2);
}

int32x2_t llvm::ICFLoopSafetyInfo::insertInstructionTo(llvm::ICFLoopSafetyInfo *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::ICFLoopSafetyInfo *)((char *)this + 40), a2, a3);

  return llvm::InstructionPrecedenceTracking::insertInstructionTo((llvm::ICFLoopSafetyInfo *)((char *)this + 72), a2, a3);
}

int32x2_t llvm::ICFLoopSafetyInfo::removeInstruction(int32x2_t *this, const llvm::Instruction *a2)
{
  llvm::InstructionPrecedenceTracking::removeInstruction(this + 5, a2);

  return llvm::InstructionPrecedenceTracking::removeInstruction(this + 9, a2);
}

uint64_t llvm::LoopSafetyInfo::allLoopPathsLeadToBlock(llvm::LoopSafetyInfo *this, const llvm::BasicBlock ***a2, const llvm::BasicBlock *a3, const llvm::DominatorTree *a4)
{
  v15[64] = *MEMORY[0x1E4F143B8];
  if (*a2[4] == a3) {
    return 1;
  }
  int v11 = (char *)v15;
  unsigned int v12 = (char *)v15;
  uint64_t v13 = 4;
  int v14 = 0;
  sub_1CC0C7110((uint64_t)a2, (uint64_t)a3, (llvm::SmallPtrSetImplBase *)&v11);
  if (v12 == v11) {
    uint64_t v5 = (uint64_t *)((char *)&v13 + 4);
  }
  else {
    uint64_t v5 = &v13;
  }
  uint64_t v6 = *(unsigned int *)v5;
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    unint64_t v8 = v12;
    while (*(void *)v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v8 += 8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unint64_t v8 = v12;
  }
  if (v8 == &v12[8 * v6])
  {
LABEL_16:
    uint64_t v9 = 1;
  }
  else
  {
    if (((**(uint64_t (***)(llvm::LoopSafetyInfo *, void))this)(this, *(void *)v8) & 1) == 0) {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
    }
    uint64_t v9 = 0;
  }
  if (v12 != v11) {
    free(v12);
  }
  return v9;
}

void sub_1CC0C7110(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  v56[4] = *MEMORY[0x1E4F143B8];
  if (**(void **)(a1 + 32) == a2) {
    return;
  }
  uint64_t v55 = 0x400000000;
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    return;
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 24);
    unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
    BOOL v8 = v6 && v7 >= 0x1C;
    if (v8 && v7 - 29 < 0xB) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      return;
    }
  }
LABEL_13:
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = *((void *)this + 1);
  uint64_t v12 = *((unsigned int *)this + 5);
  if (v11 != *(void *)this)
  {
    unsigned int v16 = *((_DWORD *)this + 4);
    goto LABEL_24;
  }
  if (!v12)
  {
LABEL_21:
    unsigned int v16 = *((_DWORD *)this + 4);
    if (v12 < v16)
    {
      *((_DWORD *)this + 5) = v12 + 1;
      *(void *)(v11 + 8 * v12) = v10;
      goto LABEL_45;
    }
LABEL_24:
    if (3 * v16 <= 4 * ((int)v12 - *((_DWORD *)this + 6)))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
    }
    else if (v16 - v12 >= v16 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v16);
    unsigned int v16 = *((_DWORD *)this + 4);
    uint64_t v11 = *((void *)this + 1);
LABEL_26:
    unsigned int v17 = v16 - 1;
    unsigned int v18 = (v16 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v19 = (void *)(v11 + 8 * v18);
    uint64_t v20 = *v19;
    if (*v19 == -1)
    {
      int v21 = 0;
LABEL_38:
      if (v21) {
        uint64_t v25 = v21;
      }
      else {
        uint64_t v25 = v19;
      }
      if (*v25 != v10)
      {
        if (*v25 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v25 = v10;
      }
    }
    else
    {
      int v21 = 0;
      int v22 = 1;
      while (v20 != v10)
      {
        if (v21) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v20 == -2;
        }
        if (v23) {
          int v21 = v19;
        }
        unsigned int v24 = v18 + v22++;
        unsigned int v18 = v24 & v17;
        uint64_t v19 = (void *)(v11 + 8 * (v24 & v17));
        uint64_t v20 = *v19;
        if (*v19 == -1) {
          goto LABEL_38;
        }
      }
    }
    goto LABEL_45;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v12;
  uint64_t v15 = (void *)*((void *)this + 1);
  while (*v15 != v10)
  {
    if (*v15 == -2) {
      uint64_t v13 = v15;
    }
    ++v15;
    v14 -= 8;
    if (!v14)
    {
      if (!v13) {
        goto LABEL_21;
      }
      *uint64_t v13 = v10;
      --*((_DWORD *)this + 6);
      break;
    }
  }
LABEL_45:
  if (v55 >= (unint64_t)HIDWORD(v55)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v56[v55] = v10;
  unsigned int v26 = v55 + 1;
  LODWORD(v55) = v55 + 1;
  while (1)
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 24);
    unsigned int v27 = *(unsigned __int8 *)(v6 + 16);
    if (v6) {
      BOOL v28 = v27 >= 0x1C;
    }
    else {
      BOOL v28 = 0;
    }
    if (v28 && v27 - 29 < 0xB) {
      goto LABEL_13;
    }
  }
  if (v26)
  {
    do
    {
      while (1)
      {
        uint64_t v30 = v56[--v26];
        LODWORD(v55) = v26;
        if (v30 != **(void **)(a1 + 32))
        {
          uint64_t v31 = *(void *)(v30 + 8);
          if (v31) {
            break;
          }
        }
LABEL_75:
        if (!v26) {
          return;
        }
      }
      while (1)
      {
        uint64_t v32 = *(void *)(v31 + 24);
        unsigned int v33 = *(unsigned __int8 *)(v32 + 16);
        BOOL v34 = v32 && v33 >= 0x1C;
        if (v34 && v33 - 29 <= 0xA) {
          break;
        }
        uint64_t v31 = *(void *)(v31 + 8);
        if (!v31) {
          goto LABEL_75;
        }
      }
LABEL_77:
      uint64_t v36 = *(void *)(v32 + 40);
      uint64_t v37 = *((void *)this + 1);
      uint64_t v38 = *((unsigned int *)this + 5);
      if (v37 == *(void *)this)
      {
        if (v38)
        {
          uint64_t v39 = 0;
          uint64_t v40 = 8 * v38;
          BOOL v41 = (void *)*((void *)this + 1);
          do
          {
            if (*v41 == v36) {
              goto LABEL_111;
            }
            if (*v41 == -2) {
              uint64_t v39 = v41;
            }
            ++v41;
            v40 -= 8;
          }
          while (v40);
          if (v39)
          {
            *uint64_t v39 = v36;
            --*((_DWORD *)this + 6);
            goto LABEL_109;
          }
        }
        unsigned int v42 = *((_DWORD *)this + 4);
        if (v38 < v42)
        {
          *((_DWORD *)this + 5) = v38 + 1;
          *(void *)(v37 + 8 * v38) = v36;
LABEL_109:
          if (v55 >= (unint64_t)HIDWORD(v55)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v56[v55] = v36;
          LODWORD(v55) = v55 + 1;
          goto LABEL_111;
        }
      }
      else
      {
        unsigned int v42 = *((_DWORD *)this + 4);
      }
      if (3 * v42 <= 4 * ((int)v38 - *((_DWORD *)this + 6)))
      {
        if (v42 >= 0x40) {
          v42 *= 2;
        }
        else {
          unsigned int v42 = 128;
        }
      }
      else if (v42 - v38 >= v42 >> 3)
      {
        goto LABEL_90;
      }
      llvm::SmallPtrSetImplBase::Grow(this, v42);
      unsigned int v42 = *((_DWORD *)this + 4);
      uint64_t v37 = *((void *)this + 1);
LABEL_90:
      unsigned int v43 = v42 - 1;
      unsigned int v44 = (v42 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      unint64_t v45 = (void *)(v37 + 8 * v44);
      uint64_t v46 = *v45;
      if (*v45 == -1)
      {
        int v47 = 0;
      }
      else
      {
        int v47 = 0;
        int v48 = 1;
        do
        {
          if (v46 == v36) {
            goto LABEL_111;
          }
          if (v47) {
            BOOL v49 = 0;
          }
          else {
            BOOL v49 = v46 == -2;
          }
          if (v49) {
            int v47 = v45;
          }
          unsigned int v50 = v44 + v48++;
          unsigned int v44 = v50 & v43;
          unint64_t v45 = (void *)(v37 + 8 * (v50 & v43));
          uint64_t v46 = *v45;
        }
        while (*v45 != -1);
      }
      if (v47) {
        uint64_t v51 = v47;
      }
      else {
        uint64_t v51 = v45;
      }
      if (*v51 != v36)
      {
        if (*v51 == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        void *v51 = v36;
        goto LABEL_109;
      }
LABEL_111:
      while (1)
      {
        uint64_t v31 = *(void *)(v31 + 8);
        if (!v31) {
          break;
        }
        uint64_t v32 = *(void *)(v31 + 24);
        unsigned int v52 = *(unsigned __int8 *)(v32 + 16);
        if (v32) {
          BOOL v53 = v52 >= 0x1C;
        }
        else {
          BOOL v53 = 0;
        }
        if (v53 && v52 - 29 < 0xB) {
          goto LABEL_77;
        }
      }
      unsigned int v26 = v55;
    }
    while (v55);
  }
}

uint64_t llvm::ICFLoopSafetyInfo::isGuaranteedToExecute(int32x2_t *this, const llvm::BasicBlock **a2, const llvm::DominatorTree *a3, const llvm::BasicBlock ***a4)
{
  if (llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(this + 5, a2)) {
    return 0;
  }
  BOOL v8 = a2[5];

  return llvm::LoopSafetyInfo::allLoopPathsLeadToBlock((llvm::LoopSafetyInfo *)this, a4, v8, a3);
}

void llvm::initializeMustExecutePrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C68, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0C76B8;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC6C68, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0C76B8(uint64_t a1)
{
}

uint64_t sub_1CC0C7764(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC6C60;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2606278;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C68, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0C76B8;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCC6C68, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void llvm::initializeMustBeExecutedContextPrinterPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C70, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC0C7884;
    v3[1] = &v1;
    int v2 = v3;
    std::__call_once(&qword_1EBCC6C70, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC0C7884(uint64_t a1)
{
}

uint64_t sub_1CC0C7938(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC6C61;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F2606318;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC6C70, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC0C7884;
    v5[1] = &PassRegistry;
    unsigned int v4 = v5;
    std::__call_once(&qword_1EBCC6C70, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t *llvm::mayContainIrreducibleControl(llvm *this, const llvm::Function *a2, const llvm::LoopInfo *a3)
{
  uint64_t v3 = (uint64_t *)a2;
  if (a2)
  {
    uint64_t v5 = this;
    long long __p = 0;
    unsigned int v7 = 0;
    uint64_t v8 = 0;
    sub_1CBF8C36C((char **)&__p, (uint64_t)&v5);
    uint64_t v3 = (uint64_t *)sub_1CBFE347C(&__p, v3);
    if (__p)
    {
      unsigned int v7 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::findForwardJoinPoint(llvm::MustBeExecutedContextExplorer *this, const llvm::BasicBlock *a2)
{
  v116[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 4);
  if (!v3
    || (unsigned int v4 = a2,
        uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 48))(v3, *((void *)a2 + 7)),
        (uint64_t v6 = *((void *)this + 12)) == 0))
  {
    sub_1CB920400();
  }
  isGuaranteedToTransferExecutionTouint64_t Successor = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 48))(v6, *((void *)v4 + 7));
  uint64_t v8 = (llvm *)*((void *)v4 + 7);
  int v107 = v8;
  if (!v5) {
    goto LABEL_16;
  }
  int v9 = *(_DWORD *)(v5 + 16);
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)v5;
  unsigned int v11 = v9 - 1;
  uint64_t v12 = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v13 = *(const llvm::BasicBlock **)(*(void *)v5 + 16 * v12);
  if (v13 != v4)
  {
    int v14 = 1;
    while (v13 != (const llvm::BasicBlock *)-4096)
    {
      int v15 = v12 + v14++;
      uint64_t v12 = v15 & v11;
      uint64_t v13 = *(const llvm::BasicBlock **)(v10 + 16 * v12);
      if (v13 == v4) {
        goto LABEL_9;
      }
    }
    goto LABEL_16;
  }
LABEL_9:
  uint64_t v16 = *(void *)(v10 + 16 * v12 + 8);
  if (!v16)
  {
LABEL_16:
    uint64_t v18 = *((void *)v8 + 14);
    if (v18)
    {
      LOBYTE(v21) = 0;
      LOBYTE(v20) = 0;
      uint64_t v17 = (uint64_t)v4;
      if ((*(unsigned char *)(v18 + 20) & 2) == 0) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
    LOBYTE(v21) = 0;
    LOBYTE(v20) = 0;
    uint64_t v17 = (uint64_t)v4;
    goto LABEL_20;
  }
  uint64_t v17 = **(void **)(v16 + 32);
  uint64_t v18 = *((void *)v8 + 14);
  if (v18 && (*(unsigned char *)(v18 + 20) & 2) != 0)
  {
    LOBYTE(v21) = 1;
    goto LABEL_18;
  }
  uint64_t v19 = *(void *)(*(void *)(v17 + 56) + 112);
  if (!v19)
  {
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 1;
    goto LABEL_20;
  }
  LOBYTE(v20) = 0;
  LOBYTE(v21) = 1;
  if ((*(unsigned char *)(v19 + 20) & 2) != 0 && v18) {
LABEL_18:
  }
    LODWORD(v20) = (*(unsigned __int8 *)(v18 + 16) >> 5) & 1;
LABEL_20:
  int v22 = (llvm::BasicBlock **)v116;
  uint64_t v114 = (llvm::BasicBlock **)v116;
  uint64_t v115 = 0x800000000;
  BOOL v23 = (const llvm::BasicBlock *)*((void *)v4 + 5);
  if (v23 == (const llvm::BasicBlock *)((char *)v4 + 40)) {
    goto LABEL_189;
  }
  if (v23) {
    uint64_t v24 = (uint64_t)v23 - 24;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v106 = this;
  if (*(unsigned char *)(v24 + 16) == 30)
  {
    if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3) {
      unsigned int v46 = 2;
    }
    else {
      unsigned int v46 = 1;
    }
  }
  else
  {
    unsigned int v46 = 2;
    int v47 = 0;
    switch(*(unsigned char *)(v24 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        goto LABEL_190;
      case 0x1E:
LABEL_196:
        __break(1u);
        goto LABEL_197;
      case 0x1F:
        unsigned int v46 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
LABEL_197:
        unsigned int v46 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_29;
      case 0x24:
        unsigned int v46 = *(_WORD *)(v24 + 18) & 1;
        break;
      case 0x25:
        unsigned int v46 = 1;
        goto LABEL_29;
      case 0x27:
        unsigned int v46 = *(_DWORD *)(v24 + 80) + 1;
        break;
      default:
        goto LABEL_189;
    }
    if (!v46) {
      goto LABEL_189;
    }
  }
LABEL_29:
  uint64_t v105 = (llvm::Function *)v5;
  int v25 = 0;
  unsigned int v26 = 0;
  uint64_t v5 = 0;
  uint64_t v27 = v24 - 64;
  uint64_t v28 = v46;
  do
  {
    int v29 = *(unsigned __int8 *)(v24 + 16);
    if (v29 == 30)
    {
      unsigned int v33 = (llvm::BasicBlock **)(v24 - 32 - 32 * v5);
    }
    else
    {
      uint64_t v32 = (v29 - 31);
      unsigned int v33 = (llvm::BasicBlock **)(v24 - 32);
      switch(v32)
      {
        case 1:
        case 7:
          int v36 = *(_DWORD *)(v24 + 20);
          if ((v36 & 0x40000000) != 0) {
            uint64_t v37 = *(void *)(v24 - 8);
          }
          else {
            uint64_t v37 = v24 - 32 * (v36 & 0x7FFFFFF);
          }
          unsigned int v33 = (llvm::BasicBlock **)(v37 + 32 * v5 + 32);
          break;
        case 2:
          if (v5) {
            uint64_t v38 = -64;
          }
          else {
            uint64_t v38 = -96;
          }
          unsigned int v33 = (llvm::BasicBlock **)(v24 + v38);
          break;
        case 3:
        case 4:
          goto LABEL_196;
        case 5:
          if ((*(_WORD *)(v24 + 18) & 1) == 0)
          {
            uint64_t v30 = 0;
            goto LABEL_34;
          }
          unsigned int v33 = (llvm::BasicBlock **)(v24 + 32 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
          break;
        case 6:
          break;
        case 8:
          if (v5) {
            unsigned int v33 = (llvm::BasicBlock **)(v27 - 32 * *(unsigned int *)(v24 + 80));
          }
          else {
            unsigned int v33 = (llvm::BasicBlock **)(v24 - 64 - 32 * *(unsigned int *)(v24 + 80));
          }
          break;
        default:
          int v34 = *(_DWORD *)(v24 + 20);
          if ((v34 & 0x40000000) != 0) {
            uint64_t v35 = *(void *)(v24 - 8);
          }
          else {
            uint64_t v35 = v24 - 32 * (v34 & 0x7FFFFFF);
          }
          unsigned int v33 = (llvm::BasicBlock **)(v35 + 32 * (v25 & 0xFFFFFFFE) + 32);
          break;
      }
    }
    uint64_t v30 = *v33;
LABEL_34:
    if (v30 == (llvm::BasicBlock *)v17) {
      char v31 = (char)v20;
    }
    else {
      char v31 = 0;
    }
    if ((v31 & 1) == 0)
    {
      if (v26 >= HIDWORD(v115)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v114[v26] = v30;
      unsigned int v26 = v115 + 1;
      LODWORD(v115) = v115 + 1;
    }
    ++v5;
    v25 += 2;
    v27 += 32;
  }
  while (v28 != v5);
  if (!v26)
  {
LABEL_189:
    int v47 = 0;
    goto LABEL_190;
  }
  if (v26 == 1)
  {
    int v47 = *v114;
    goto LABEL_190;
  }
  uint64_t v5 = (uint64_t)v107;
  if (!isGuaranteedToTransferExecutionToSuccessor) {
    goto LABEL_83;
  }
  uint64_t v39 = *(void *)(isGuaranteedToTransferExecutionToSuccessor + 48);
  uint64_t v40 = *(unsigned int *)(isGuaranteedToTransferExecutionToSuccessor + 64);
  if (!v40) {
    goto LABEL_78;
  }
  LODWORD(v41) = (v40 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  unsigned int v42 = (const llvm::BasicBlock **)(v39 + 16 * v41);
  unsigned int v43 = *v42;
  if (*v42 != v4)
  {
    int v44 = 1;
    while (v43 != (const llvm::BasicBlock *)-4096)
    {
      int v45 = v41 + v44++;
      uint64_t v41 = v45 & (v40 - 1);
      unsigned int v43 = *(const llvm::BasicBlock **)(v39 + 16 * v41);
      if (v43 == v4)
      {
        unsigned int v42 = (const llvm::BasicBlock **)(v39 + 16 * v41);
        goto LABEL_79;
      }
    }
LABEL_78:
    unsigned int v42 = (const llvm::BasicBlock **)(v39 + 16 * v40);
  }
LABEL_79:
  if (v42 != (const llvm::BasicBlock **)(v39 + 16 * v40))
  {
    int v48 = v42[1];
    if (v48)
    {
      BOOL v49 = (llvm::BasicBlock **)*((void *)v48 + 1);
      if (v49)
      {
        int v47 = *v49;
        if (*v49)
        {
LABEL_100:
          uint64_t v57 = *((void *)v107 + 14);
          if (v57 && (*(unsigned char *)(v57 + 20) & 2) != 0 && (*(unsigned char *)(v57 + 16) & 0x20) != 0) {
            goto LABEL_190;
          }
          size_t v108 = v112;
          size_t v109 = v112;
          uint64_t v110 = 16;
          int v111 = 0;
          unsigned int v58 = v115;
          if (!v115) {
            goto LABEL_190;
          }
          unsigned int v4 = (llvm::MustBeExecutedContextExplorer *)((char *)v106 + 104);
          uint64_t v17 = 1;
          uint64_t v24 = -2;
          while (1)
          {
            size_t v59 = v114[--v58];
            LODWORD(v115) = v58;
            if (v59 != v47) {
              break;
            }
LABEL_153:
            if (!v58)
            {
              if (v109 != v108)
              {
                unsigned int v104 = v22;
                free(v109);
                int v22 = v104;
              }
              goto LABEL_190;
            }
          }
          uint64_t v60 = v109;
          uint64_t v61 = HIDWORD(v110);
          if (v109 == v108)
          {
            if (HIDWORD(v110))
            {
              uint64_t v62 = 0;
              uint64_t v63 = 8 * HIDWORD(v110);
              uint64_t v64 = (llvm **)v109;
              while (*v64 != v59)
              {
                if (*v64 == (llvm *)-2) {
                  uint64_t v62 = v64;
                }
                ++v64;
                v63 -= 8;
                if (!v63)
                {
                  if (!v62) {
                    goto LABEL_115;
                  }
                  uint64_t v20 = v22;
                  *uint64_t v62 = v59;
                  --v111;
                  goto LABEL_138;
                }
              }
              goto LABEL_155;
            }
LABEL_115:
            unsigned int v65 = v110;
            if (HIDWORD(v110) < v110)
            {
              uint64_t v20 = v22;
              ++HIDWORD(v110);
              *(void *)&v109[8 * v61] = v59;
LABEL_138:
              uint64_t v113 = v59;
              uint64_t v75 = sub_1CD4B2B50((uint64_t)v4, (uint64_t *)&v113);
              size_t v77 = v75;
              if (*((unsigned char *)v75 + 9))
              {
                isGuaranteedToTransferExecutionTouint64_t Successor = *((unsigned __int8 *)v75 + 8);
              }
              else
              {
                isGuaranteedToTransferExecutionTouint64_t Successor = llvm::isGuaranteedToTransferExecutionToSuccessor(v59, v76);
                int v89 = *((unsigned __int8 *)v77 + 9);
                *((unsigned char *)v77 + 8) = isGuaranteedToTransferExecutionToSuccessor;
                if (!v89) {
                  *((unsigned char *)v77 + 9) = 1;
                }
              }
              int v22 = v20;
              if (!isGuaranteedToTransferExecutionToSuccessor) {
                goto LABEL_187;
              }
              uint64_t v78 = (void *)*((void *)v59 + 5);
              if (v78 == (void *)((char *)v59 + 40))
              {
LABEL_181:
                uint64_t v79 = 0;
                int v21 = 0;
                int v82 = 0;
              }
              else
              {
                uint64_t v79 = (uint64_t)(v78 - 3);
                if (v78) {
                  int v21 = v78 - 3;
                }
                else {
                  int v21 = 0;
                }
                int v80 = *((unsigned __int8 *)v21 + 16);
                int v81 = v80 - 29;
                if (v80 != 30)
                {
                  int v90 = 0;
                  switch(v81)
                  {
                    case 0:
                    case 5:
                    case 6:
                      goto LABEL_150;
                    case 1:
                      goto LABEL_196;
                    case 2:
                      int v90 = (*((_DWORD *)v21 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_150;
                    case 3:
                    case 9:
                      int v90 = (*((_DWORD *)v21 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_150;
                    case 4:
                      int v90 = 2;
                      goto LABEL_150;
                    case 7:
                      int v90 = *((_WORD *)v21 + 9) & 1;
                      goto LABEL_150;
                    case 8:
                      int v90 = 1;
                      goto LABEL_150;
                    case 10:
                      int v90 = *((_DWORD *)v21 + 20) + 1;
                      goto LABEL_150;
                    default:
                      goto LABEL_181;
                  }
                }
                if ((*((_DWORD *)v21 + 5) & 0x7FFFFFF) == 3) {
                  int v90 = 2;
                }
                else {
                  int v90 = 1;
                }
LABEL_150:
                int v82 = v90;
              }
              sub_1CD4B2DF8((uint64_t *)&v114, (uint64_t)&v114[v115], (llvm::Instruction *)v21, 0, v79, v82);
              int v22 = v20;
LABEL_152:
              unsigned int v58 = v115;
              goto LABEL_153;
            }
          }
          else
          {
            unsigned int v65 = v110;
          }
          if (3 * v65 <= 4 * (HIDWORD(v110) - v111))
          {
            if (v65 >= 0x40) {
              v65 *= 2;
            }
            else {
              unsigned int v65 = 128;
            }
          }
          else if (v65 - HIDWORD(v110) >= v65 >> 3)
          {
            goto LABEL_119;
          }
          unsigned int v101 = v22;
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v108, v65);
          int v22 = v101;
          unsigned int v65 = v110;
          uint64_t v60 = v109;
LABEL_119:
          unsigned int v66 = v65 - 1;
          unsigned int v67 = (v65 - 1) & ((v59 >> 4) ^ (v59 >> 9));
          uint64_t v68 = &v60[8 * v67];
          uint64_t v69 = *(llvm **)v68;
          if (*(void *)v68 == -1)
          {
            uint64_t v73 = 0;
LABEL_130:
            if (v73) {
              unsigned int v74 = (llvm **)v73;
            }
            else {
              unsigned int v74 = (llvm **)v68;
            }
            if (*v74 != v59)
            {
              if (*v74 == (llvm *)-2) {
                --v111;
              }
              else {
                ++HIDWORD(v110);
              }
              uint64_t v20 = v22;
              *unsigned int v74 = v59;
              goto LABEL_138;
            }
          }
          else
          {
            uint64_t v73 = 0;
            int v70 = 1;
            while (v69 != v59)
            {
              if (v73) {
                BOOL v71 = 0;
              }
              else {
                BOOL v71 = v69 == (llvm *)-2;
              }
              if (v71) {
                uint64_t v73 = v68;
              }
              unsigned int v72 = v67 + v70++;
              unsigned int v67 = v72 & v66;
              uint64_t v68 = &v60[8 * (v72 & v66)];
              uint64_t v69 = *(llvm **)v68;
              if (*(void *)v68 == -1) {
                goto LABEL_130;
              }
            }
          }
LABEL_155:
          uint64_t v83 = *((void *)v107 + 14);
          if (!v83 || (*(unsigned char *)(v83 + 20) & 2) == 0)
          {
            if (!v105) {
              goto LABEL_187;
            }
            size_t v84 = v22;
            uint64_t v113 = v107;
            size_t v85 = sub_1CD4B2B50((uint64_t)v106 + 128, (uint64_t *)&v113);
            uint64_t v87 = v85;
            if (*((unsigned char *)v85 + 9))
            {
              unsigned int v88 = *((unsigned __int8 *)v85 + 8);
            }
            else
            {
              unsigned int v88 = llvm::mayContainIrreducibleControl(v107, v105, v86);
              int v91 = *((unsigned __int8 *)v87 + 9);
              *((unsigned char *)v87 + 8) = v88;
              if (!v91) {
                *((unsigned char *)v87 + 9) = 1;
              }
            }
            int v22 = v84;
            if (v88)
            {
LABEL_187:
              if (v109 != v108)
              {
                uint64_t v102 = v22;
                free(v109);
                int v22 = v102;
              }
              goto LABEL_189;
            }
            int v92 = *((_DWORD *)v105 + 4);
            if (v92)
            {
              uint64_t v93 = *(void *)v105;
              unsigned int v94 = v92 - 1;
              uint64_t v95 = (v92 - 1) & ((v59 >> 4) ^ (v59 >> 9));
              unint64_t v96 = *(llvm **)(*(void *)v105 + 16 * v95);
              if (v59 == v96)
              {
LABEL_172:
                uint64_t v99 = *(void *)(v93 + 16 * v95 + 8);
                if (v99)
                {
                  uint64_t v100 = *(void *)(*(void *)(**(void **)(v99 + 32) + 56) + 112);
                  if (!v100 || (*(unsigned char *)(v100 + 20) & 2) == 0) {
                    goto LABEL_187;
                  }
                }
              }
              else
              {
                int v97 = 1;
                while (v96 != (llvm *)-4096)
                {
                  int v98 = v95 + v97++;
                  uint64_t v95 = v98 & v94;
                  unint64_t v96 = *(llvm **)(v93 + 16 * v95);
                  if (v59 == v96) {
                    goto LABEL_172;
                  }
                }
              }
            }
          }
          goto LABEL_152;
        }
      }
    }
  }
LABEL_83:
  if (v26 == 2)
  {
    char v50 = (char)v21;
    uint64_t v51 = v22;
    int v47 = *v114;
    unsigned int v52 = v114[1];
    Uniqueuint64_t Successor = llvm::BasicBlock::getUniqueSuccessor(*v114);
    uint64_t v54 = llvm::BasicBlock::getUniqueSuccessor(v52);
    if ((const llvm::BasicBlock *)UniqueSuccessor == v4)
    {
      int v47 = v52;
      int v22 = v51;
      LOBYTE(v21) = v50;
    }
    else
    {
      BOOL v55 = (const llvm::BasicBlock *)v54 == v4 || v47 == (llvm::BasicBlock *)v54;
      int v22 = v51;
      LOBYTE(v21) = v50;
      if (!v55)
      {
        int v47 = v52;
        if (v52 != (llvm::BasicBlock *)UniqueSuccessor)
        {
          if (UniqueSuccessor == v54) {
            int v47 = (llvm::BasicBlock *)UniqueSuccessor;
          }
          else {
            int v47 = 0;
          }
        }
      }
    }
  }
  else
  {
    int v47 = 0;
  }
  char v56 = v21 ^ 1;
  if (v47) {
    char v56 = 1;
  }
  if ((v56 & 1) == 0) {
    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock();
  }
  if (v47) {
    goto LABEL_100;
  }
LABEL_190:
  if (v114 != v22) {
    free(v114);
  }
  return v47;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::findBackwardJoinPoint(llvm::MustBeExecutedContextExplorer *this, const llvm::BasicBlock *a2)
{
  v62[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 4);
  if (!v3
    || (uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 48))(v3, *((void *)a2 + 7)),
        (uint64_t v6 = *((void *)this + 8)) == 0))
  {
    sub_1CB920400();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 48))(v6, *((void *)a2 + 7));
  unsigned int v8 = a2 >> 4;
  if (!v7) {
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = *(unsigned int *)(v7 + 40);
  if (!v10) {
    goto LABEL_10;
  }
  LODWORD(v11) = (v10 - 1) & (v8 ^ (a2 >> 9));
  uint64_t v12 = v9 + 16 * v11;
  uint64_t v13 = *(const llvm::BasicBlock **)v12;
  if (*(const llvm::BasicBlock **)v12 != a2)
  {
    int v14 = 1;
    while (v13 != (const llvm::BasicBlock *)-4096)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      uint64_t v13 = *(const llvm::BasicBlock **)(v9 + 16 * v11);
      if (v13 == a2)
      {
        uint64_t v12 = v9 + 16 * v11;
        goto LABEL_11;
      }
    }
LABEL_10:
    uint64_t v12 = v9 + 16 * v10;
  }
LABEL_11:
  if (v12 != v9 + 16 * v10)
  {
    uint64_t v16 = *(void *)(v12 + 8);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 8);
      if (v17) {
        return *(llvm::BasicBlock **)v17;
      }
    }
  }
LABEL_15:
  if (!v5 || (int v19 = *(_DWORD *)(v5 + 16)) == 0)
  {
LABEL_23:
    char v28 = 0;
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  uint64_t v20 = *(void *)v5;
  unsigned int v21 = v19 - 1;
  uint64_t v22 = v21 & (v8 ^ (a2 >> 9));
  BOOL v23 = *(const llvm::BasicBlock **)(*(void *)v5 + 16 * v22);
  if (v23 != a2)
  {
    int v24 = 1;
    while (v23 != (const llvm::BasicBlock *)-4096)
    {
      int v25 = v22 + v24++;
      uint64_t v22 = v25 & v21;
      BOOL v23 = *(const llvm::BasicBlock **)(v20 + 16 * v22);
      if (v23 == a2) {
        goto LABEL_21;
      }
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v26 = *(void *)(v20 + 16 * v22 + 8);
  if (v26)
  {
    uint64_t v27 = **(const llvm::BasicBlock ***)(v26 + 32);
    char v28 = 1;
    goto LABEL_25;
  }
  char v28 = 0;
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  uint64_t v60 = v62;
  uint64_t v61 = 0x800000000;
  uint64_t v29 = *((void *)a2 + 1);
  if (v29)
  {
    while (1)
    {
      uint64_t v30 = *(void *)(v29 + 24);
      unsigned int v31 = *(unsigned __int8 *)(v30 + 16);
      BOOL v32 = v30 && v31 >= 0x1C;
      if (v32 && v31 - 29 < 0xB) {
        break;
      }
      uint64_t v29 = *(void *)(v29 + 8);
      if (!v29) {
        goto LABEL_35;
      }
    }
    unsigned int v35 = 0;
LABEL_39:
    int v36 = *(const llvm::BasicBlock **)(v30 + 40);
    if (v36 == a2) {
      goto LABEL_66;
    }
    if (v27 == a2)
    {
      uint64_t v38 = *(void *)(v26 + 56);
      uint64_t v37 = *(void *)(v26 + 64);
      if (v37 == v38)
      {
        uint64_t v39 = *(unsigned int *)(v26 + 76);
        uint64_t v40 = (const llvm::BasicBlock **)(v37 + 8 * v39);
        if (v39)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 8 * v39;
          while (*(const llvm::BasicBlock **)(v37 + v41) != v36)
          {
            v41 += 8;
            if (v42 == v41) {
              goto LABEL_61;
            }
          }
          uint64_t v40 = (const llvm::BasicBlock **)(v37 + v41);
        }
LABEL_61:
        uint64_t v38 = *(void *)(v26 + 64);
      }
      else
      {
        uint64_t v43 = *(unsigned int *)(v26 + 72);
        int v44 = v43 - 1;
        unsigned int v45 = (v43 - 1) & ((v36 >> 4) ^ (v36 >> 9));
        uint64_t v40 = (const llvm::BasicBlock **)(v37 + 8 * v45);
        unsigned int v46 = *v40;
        if (*v40 == (const llvm::BasicBlock *)-1)
        {
          int v47 = 0;
LABEL_76:
          if (v47) {
            uint64_t v40 = v47;
          }
          if (*v40 != v36) {
            uint64_t v40 = (const llvm::BasicBlock **)(v37 + 8 * v43);
          }
        }
        else
        {
          int v47 = 0;
          int v48 = 1;
          while (v46 != v36)
          {
            if (v47) {
              BOOL v49 = 0;
            }
            else {
              BOOL v49 = v46 == (const llvm::BasicBlock *)-2;
            }
            if (v49) {
              int v47 = v40;
            }
            unsigned int v50 = v45 + v48++;
            unsigned int v45 = v50 & v44;
            uint64_t v40 = (const llvm::BasicBlock **)(v37 + 8 * (v50 & v44));
            unsigned int v46 = *v40;
            if (*v40 == (const llvm::BasicBlock *)-1) {
              goto LABEL_76;
            }
          }
        }
      }
      if (v37 == v38) {
        uint64_t v51 = (unsigned int *)(v26 + 76);
      }
      else {
        uint64_t v51 = (unsigned int *)(v26 + 72);
      }
      if (v40 != (const llvm::BasicBlock **)(v37 + 8 * *v51)) {
        goto LABEL_66;
      }
    }
    if (v35 >= HIDWORD(v61)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v60 + v35) = v36;
    unsigned int v35 = v61 + 1;
    LODWORD(v61) = v61 + 1;
LABEL_66:
    while (1)
    {
      uint64_t v29 = *(void *)(v29 + 8);
      if (!v29) {
        break;
      }
      uint64_t v30 = *(void *)(v29 + 24);
      unsigned int v52 = *(unsigned __int8 *)(v30 + 16);
      if (v30) {
        BOOL v53 = v52 >= 0x1C;
      }
      else {
        BOOL v53 = 0;
      }
      if (v53 && v52 - 29 < 0xB) {
        goto LABEL_39;
      }
    }
    uint64_t v18 = 0;
    if (!v35) {
      goto LABEL_36;
    }
    if (v35 == 1)
    {
      unsigned int v58 = &v60;
    }
    else
    {
      if (v35 == 2)
      {
        uint64_t v18 = *(llvm::BasicBlock **)v60;
        BOOL v55 = (llvm::BasicBlock *)*((void *)v60 + 1);
        uint64_t UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)v60);
        uint64_t v57 = llvm::BasicBlock::getUniquePredecessor(v55);
        if (v18 != (llvm::BasicBlock *)v57)
        {
          if (v55 == (llvm::BasicBlock *)UniquePredecessor)
          {
            uint64_t v18 = v55;
          }
          else if (UniquePredecessor == v57)
          {
            uint64_t v18 = (llvm::BasicBlock *)UniquePredecessor;
          }
          else
          {
            uint64_t v18 = 0;
          }
        }
      }
      char v59 = v28 ^ 1;
      if (v18) {
        char v59 = 1;
      }
      if (v59) {
        goto LABEL_36;
      }
      unsigned int v58 = (void **)(v26 + 32);
    }
    uint64_t v18 = *(llvm::BasicBlock **)*v58;
  }
  else
  {
LABEL_35:
    uint64_t v18 = 0;
  }
LABEL_36:
  if (v60 != v62) {
    free(v60);
  }
  return v18;
}

llvm::BasicBlock *llvm::MustBeExecutedContextExplorer::getMustBeExecutedPrevInstruction(llvm::MustBeExecutedContextExplorer *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = *(const llvm::BasicBlock **)(a3 + 40);
  if (*((void *)v3 + 6) != a3 + 24)
  {
    uint64_t v4 = *(void *)(a3 + 24);
    if (*(unsigned char *)a1) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v4 == 0;
    }
    if (!v5)
    {
      if (v4) {
        return (llvm::BasicBlock *)(v4 - 24);
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (!*(unsigned char *)a1) {
    return 0;
  }
LABEL_11:
  __n128 result = llvm::MustBeExecutedContextExplorer::findBackwardJoinPoint(a1, v3);
  if (result)
  {
    uint64_t v7 = *((void *)result + 5);
    if (v7) {
      return (llvm::BasicBlock *)(v7 - 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

llvm::MustBeExecutedIterator *llvm::MustBeExecutedIterator::MustBeExecutedIterator(llvm::MustBeExecutedIterator *this, llvm::MustBeExecutedContextExplorer *a2, const llvm::Instruction *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  sub_1CD4B3040((uint64_t)this);
  llvm::MustBeExecutedIterator::resetInstruction(this, (unint64_t)a3);
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  sub_1CD4B3040((uint64_t)this);
  llvm::MustBeExecutedIterator::resetInstruction(this, (unint64_t)a3);
  return this;
}

uint64_t llvm::MustBeExecutedIterator::reset(llvm::MustBeExecutedIterator *this, const llvm::Instruction *a2)
{
  sub_1CD4B3040((uint64_t)this);

  return llvm::MustBeExecutedIterator::resetInstruction(this, (unint64_t)a2);
}

uint64_t sub_1CC0C8A14(uint64_t a1, uint64_t a2, const llvm::DominatorTree *a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v27 = a1 + 8;
  *(void *)a1 = &unk_1F2606568;
  uint64_t v5 = a2 + 72;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a2 + 80);
  if (v6 == a2 + 72) {
    return a1;
  }
  while (1)
  {
    uint64_t v8 = v6 - 24;
    if (!v6) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void *)(v8 + 48);
    if (v9 != v8 + 40) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v5) {
      return a1;
    }
  }
  while (1)
  {
    if (v9) {
      uint64_t v10 = (const llvm::Instruction *)(v9 - 24);
    }
    else {
      uint64_t v10 = 0;
    }
    int v11 = *((_DWORD *)a4 + 4);
    if (!v11) {
      goto LABEL_24;
    }
    uint64_t v12 = *((void *)v10 + 5);
    uint64_t v13 = *a4;
    unsigned int v14 = v11 - 1;
    uint64_t v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v11 - 1);
    uint64_t v16 = *(void *)(*a4 + 16 * v15);
    if (v12 == v16)
    {
LABEL_15:
      int v19 = *(llvm ***)(v13 + 16 * v15 + 8);
      if (!v19) {
        goto LABEL_24;
      }
      while (1)
      {
        v30[0] = 0;
        v30[1] = 0;
        int v31 = 0;
        uint64_t v29 = (const llvm::Instruction *)&unk_1F26061F8;
        __int16 v32 = 0;
        llvm::SimpleLoopSafetyInfo::computeLoopSafetyInfo((llvm::SimpleLoopSafetyInfo *)&v29, (llvm ***)v19);
        if (llvm::SimpleLoopSafetyInfo::isGuaranteedToExecute((llvm::SimpleLoopSafetyInfo *)&v29, v10, a3, (const llvm::BasicBlock ***)v19))break; {
        isGuaranteedToExecuteForEveryIteratiouint64_t n = llvm::isGuaranteedToExecuteForEveryIteration(v10, (const llvm::Instruction *)v19, v20);
        }
        uint64_t v29 = (const llvm::Instruction *)&unk_1F26065B0;
        sub_1CC0CADD4(v30);
        if (isGuaranteedToExecuteForEveryIteration) {
          goto LABEL_18;
        }
LABEL_21:
        int v19 = (llvm **)*v19;
        if (!v19) {
          goto LABEL_24;
        }
      }
      uint64_t v29 = (const llvm::Instruction *)&unk_1F26065B0;
      sub_1CC0CADD4(v30);
LABEL_18:
      uint64_t v29 = v10;
      unsigned int v21 = sub_1CD4B2114(v27, (uint64_t *)&v29);
      unint64_t v22 = *((unsigned int *)v21 + 4);
      if (v22 >= *((unsigned int *)v21 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(v21[1] + 8 * v22) = v19;
      ++*((_DWORD *)v21 + 4);
      goto LABEL_21;
    }
    int v17 = 1;
    while (v16 != -4096)
    {
      int v18 = v15 + v17++;
      uint64_t v15 = v18 & v14;
      uint64_t v16 = *(void *)(v13 + 16 * v15);
      if (v12 == v16) {
        goto LABEL_15;
      }
    }
LABEL_24:
    uint64_t v9 = *(void *)(v9 + 8);
    uint64_t v24 = v6 - 24;
    if (!v6) {
      uint64_t v24 = 0;
    }
    if (v9 == v24 + 40) {
      break;
    }
LABEL_31:
    if (v6 == v5) {
      return a1;
    }
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v5) {
      return a1;
    }
    uint64_t v25 = v6 - 24;
    if (!v6) {
      uint64_t v25 = 0;
    }
    uint64_t v9 = *(void *)(v25 + 48);
    if (v9 != v25 + 40) {
      goto LABEL_31;
    }
  }
}

void *sub_1CC0C8C9C(void *a1)
{
  *a1 = &unk_1F2606568;
  sub_1CD4B24BC((uint64_t)(a1 + 1));
  MEMORY[0x1D25D9CD0](a1[1], 8);
  return a1;
}

void sub_1CC0C8CEC()
{
}

void sub_1CC0C8D2C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0C8D64(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  sub_1CB843600(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);

  sub_1CB843600(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1CC0C8DBC(uint64_t a1, const llvm::Module **a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::LoopInfoWrapperPass::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (uint64_t *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::LoopInfoWrapperPass::ID)+ 32);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::DominatorTreeWrapperPass::ID);
  unsigned int v14 = (llvm *)sub_1CC0C8A14((uint64_t)&v21, (uint64_t)a2, (const llvm::DominatorTree *)(v13 + 32), v8);
  uint64_t v15 = llvm::dbgs(v14);
  llvm::Function::print(a2, v15, (llvm::AssemblyAnnotationWriter *)&v21, 0, 0);
  unsigned int v21 = &unk_1F2606568;
  uint64_t v16 = v22;
  if (v23)
  {
    uint64_t v17 = 56 * v23;
    int v18 = (void *)(v22 + 24);
    do
    {
      if ((*(v18 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v19 = (void *)*(v18 - 2);
        if (v18 != v19) {
          free(v19);
        }
      }
      v18 += 7;
      v17 -= 56;
    }
    while (v17);
    uint64_t v16 = v22;
  }
  MEMORY[0x1D25D9CD0](v16, 8);
  return 0;
}

void sub_1CC0C8F68()
{
}

void sub_1CC0C8FA8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0C8FE0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC0C8FEC(uint64_t a1, uint64_t a2)
{
  v81[8] = *MEMORY[0x1E4F143B8];
  v80[0] = (char *)v81;
  v80[1] = (char *)0x800000000;
  v78[0] = (char *)&v79;
  v78[1] = (char *)0x800000000;
  v76[0] = (char *)&v77;
  v76[1] = (char *)0x800000000;
  uint64_t v73 = (void (**)(void **))&unk_1F26063B8;
  *(void *)&long long v74 = v78;
  *((void *)&v74 + 1) = v76;
  uint64_t v75 = (void **)&v73;
  v71[0] = &unk_1F2606400;
  v71[1] = v78;
  unsigned int v72 = v71;
  v69[0] = &unk_1F2606448;
  v69[1] = v80;
  int v70 = v69;
  unsigned int v65 = (void **)&v63;
  uint64_t v63 = (uint64_t (**)(void **))&unk_1F26063B8;
  long long v64 = v74;
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = &unk_1F2606490;
  v3[4] = v3 + 1;
  v3[1] = &unk_1F26063B8;
  *((_OWORD *)v3 + 1) = v74;
  unsigned int v67 = v3;
  uint64_t v60 = v59;
  v59[0] = &unk_1F2606400;
  v59[1] = v78;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_1F26064D8;
  v4[4] = v4 + 1;
  v4[1] = &unk_1F2606400;
  void v4[2] = v78;
  uint64_t v62 = v4;
  char v56 = v55;
  v55[0] = &unk_1F2606448;
  v55[1] = v80;
  uint64_t v5 = operator new(0x28uLL);
  *uint64_t v5 = &unk_1F2606520;
  v5[4] = v5 + 1;
  v5[1] = &unk_1F2606448;
  void v5[2] = v80;
  unsigned int v58 = v5;
  sub_1CC0CAA54((uint64_t)v68, 1, 1, 1, (uint64_t)v66, (uint64_t)v61, (uint64_t)v57);
  if (v58 == v57)
  {
    (*(void (**)(void *))(v57[0] + 32))(v57);
  }
  else if (v58)
  {
    (*(void (**)(void))(*v58 + 40))();
  }
  if (v56 == v55)
  {
    (*(void (**)(void *))(v55[0] + 32))(v55);
  }
  else if (v56)
  {
    (*(void (**)(void))(*v56 + 40))();
  }
  if (v62 == v61)
  {
    (*(void (**)(void *))(v61[0] + 32))(v61);
  }
  else if (v62)
  {
    (*(void (**)(void))(*v62 + 40))();
  }
  if (v60 == v59)
  {
    (*(void (**)(void *))(v59[0] + 32))(v59);
  }
  else if (v60)
  {
    (*(void (**)(void))(*v60 + 40))();
  }
  if (v67 == v66)
  {
    (*(void (**)(void *))(v66[0] + 32))(v66);
  }
  else if (v67)
  {
    (*(void (**)(void))(*v67 + 40))();
  }
  uint64_t v6 = (llvm *)v65;
  if (v65 == (void **)&v63)
  {
    uint64_t v6 = (llvm *)v63[4]((void **)&v63);
  }
  else if (v65)
  {
    uint64_t v6 = (llvm *)(*((uint64_t (**)(void))*v65 + 5))();
  }
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v42 = a2 + 24;
  if (v7 == a2 + 24) {
    goto LABEL_78;
  }
  do
  {
    uint64_t v8 = v7 - 56;
    if (!v7) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = v8 + 72;
    for (uint64_t i = *(void *)(v8 + 80); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v9) {
        goto LABEL_77;
      }
      uint64_t v11 = i - 24;
      if (!i) {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void *)(v11 + 48);
      if (v12 != v11 + 40) {
        break;
      }
    }
    while (2)
    {
      if (v12) {
        uint64_t v13 = (llvm::Value *)(v12 - 24);
      }
      else {
        uint64_t v13 = 0;
      }
      unsigned int v14 = llvm::dbgs(v6);
      uint64_t v15 = v14;
      uint64_t v16 = (void *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v16 > 0x16uLL)
      {
        qmemcpy(v16, "-- Explore context of: ", 23);
        *((void *)v14 + 4) += 23;
      }
      else
      {
        llvm::raw_ostream::write(v14, "-- Explore context of: ", 0x17uLL);
      }
      llvm::Value::print(v13, v15, 0);
      uint64_t v17 = (unsigned char *)*((void *)v15 + 4);
      if (*((unsigned char **)v15 + 3) == v17)
      {
        llvm::raw_ostream::write(v15, "\n", 1uLL);
      }
      else
      {
        *uint64_t v17 = 10;
        ++*((void *)v15 + 4);
      }
      sub_1CD4B1600((uint64_t)v50, (uint64_t)v68, (uint64_t)v13);
      v46[0] = 0;
      v46[1] = 0;
      int v47 = 0;
      sub_1CBFCB9AC((uint64_t)v46, (uint64_t)v50);
      long long v48 = v51;
      long long v49 = v52;
      v43[0] = 0;
      v43[1] = 0;
      int v44 = 0;
      int v18 = (llvm *)sub_1CBFCB9AC((uint64_t)v43, (uint64_t)v53);
      *(_OWORD *)unsigned int v45 = *(_OWORD *)&v53[24];
      *(_OWORD *)&v45[16] = v54;
      int v19 = (llvm *)*((void *)&v48 + 1);
      while (__PAIR128__(v49, (unint64_t)v19) != *(_OWORD *)&v45[8]
           || *((void *)&v49 + 1) != *(void *)&v45[24])
      {
        uint64_t v20 = llvm::dbgs(v18);
        unsigned int v21 = v20;
        uint64_t v22 = *((void *)v20 + 4);
        if ((unint64_t)(*((void *)v20 + 3) - v22) > 5)
        {
          *(_WORD *)(v22 + 4) = 8250;
          *(_DWORD *)uint64_t v22 = 1180377120;
          *((void *)v20 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v20, "  [F: ", 6uLL);
        }
        unsigned int v23 = *(uint64_t ****)(*((void *)v19 + 5) + 56);
        if ((*((unsigned char *)v23 + 23) & 0x10) == 0) {
          goto LABEL_58;
        }
        uint64_t v24 = ***v23;
        uint64_t v25 = *(void *)(v24 + 152);
        uint64_t v26 = *(unsigned int *)(v24 + 168);
        if (v26)
        {
          LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          char v28 = (uint64_t ****)(v25 + 16 * v27);
          uint64_t v29 = *v28;
          if (*v28 == v23) {
            goto LABEL_56;
          }
          int v30 = 1;
          while (v29 != (uint64_t ***)-4096)
          {
            int v31 = v27 + v30++;
            uint64_t v27 = v31 & (v26 - 1);
            uint64_t v29 = *(uint64_t ****)(v25 + 16 * v27);
            if (v29 == v23)
            {
              char v28 = (uint64_t ****)(v25 + 16 * v27);
              goto LABEL_56;
            }
          }
        }
        char v28 = (uint64_t ****)(v25 + 16 * v26);
LABEL_56:
        __int16 v32 = v28[1];
        size_t v35 = (size_t)*v32;
        unsigned int v33 = (const char *)(v32 + 2);
        size_t v34 = v35;
        int v36 = (_WORD *)*((void *)v21 + 4);
        if (v35 > *((void *)v21 + 3) - (void)v36)
        {
          llvm::raw_ostream::write(v21, v33, v34);
LABEL_58:
          int v36 = (_WORD *)*((void *)v21 + 4);
          goto LABEL_61;
        }
        if (v34)
        {
          memcpy(v36, v33, v34);
          int v36 = (_WORD *)(*((void *)v21 + 4) + v34);
          *((void *)v21 + 4) = v36;
        }
LABEL_61:
        if (*((void *)v21 + 3) - (void)v36 > 1uLL)
        {
          *int v36 = 8285;
          *((void *)v21 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v21, "] ", 2uLL);
        }
        llvm::Value::print(v19, v21, 0);
        uint64_t v38 = (unsigned char *)*((void *)v21 + 4);
        if (*((unsigned char **)v21 + 3) == v38)
        {
          llvm::raw_ostream::write(v21, "\n", 1uLL);
        }
        else
        {
          *uint64_t v38 = 10;
          ++*((void *)v21 + 4);
        }
        int v18 = (llvm *)llvm::MustBeExecutedIterator::advance((llvm::MustBeExecutedIterator *)v46, v37);
        int v19 = v18;
        *((void *)&v48 + 1) = v18;
      }
      MEMORY[0x1D25D9CD0](v43[0], 8);
      MEMORY[0x1D25D9CD0](v46[0], 8);
      uint64_t v6 = (llvm *)sub_1CD4B2924(v50);
      uint64_t v12 = *(void *)(v12 + 8);
      uint64_t v39 = i - 24;
      if (!i) {
        uint64_t v39 = 0;
      }
      if (v12 != v39 + 40)
      {
LABEL_76:
        if (i == v9) {
          goto LABEL_77;
        }
        continue;
      }
      break;
    }
    while (1)
    {
      uint64_t i = *(void *)(i + 8);
      if (i == v9) {
        break;
      }
      uint64_t v40 = i - 24;
      if (!i) {
        uint64_t v40 = 0;
      }
      uint64_t v12 = *(void *)(v40 + 48);
      if (v12 != v40 + 40) {
        goto LABEL_76;
      }
    }
LABEL_77:
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != v42);
LABEL_78:
  sub_1CD4B2960((uint64_t)v68);
  if (v70 == v69)
  {
    (*(void (**)(void *))(v69[0] + 32))(v69);
  }
  else if (v70)
  {
    (*(void (**)(void))(*v70 + 40))();
  }
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
  }
  else if (v72)
  {
    (*(void (**)(void))(*v72 + 40))();
  }
  if (v75 == (void **)&v73)
  {
    v73[4]((void **)&v73);
  }
  else if (v75)
  {
    (*((void (**)(void))*v75 + 5))();
  }
  sub_1CD4B1FA8(v76);
  sub_1CD4B2028(v78);
  sub_1CD4B2098(v80);
  return 0;
}

void sub_1CC0C9A1C()
{
}

__n128 sub_1CC0C9A30(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F26063B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC0C9A7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F26063B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC0C9AAC()
{
}

void sub_1CC0C9C14()
{
}

void *sub_1CC0C9C28(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2606400;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0C9C70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606400;
  a2[1] = v2;
  return result;
}

void sub_1CC0C9C9C()
{
}

void sub_1CC0C9D5C()
{
}

void *sub_1CC0C9D70(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2606448;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0C9DB8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606448;
  a2[1] = v2;
  return result;
}

void sub_1CC0C9DE4()
{
}

uint64_t sub_1CC0C9EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC0C9F38(void *a1)
{
  *a1 = &unk_1F2606490;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC0C9FDC(void *a1)
{
  *a1 = &unk_1F2606490;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC0CA0A0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F2606490;
  sub_1CC0C9EA0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC0CA0F4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2606490;
  return sub_1CC0C9EA0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CC0CA120(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC0CA1B8(void *a1)
{
  *a1 = &unk_1F26064D8;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC0CA25C(void *a1)
{
  *a1 = &unk_1F26064D8;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC0CA320(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F26064D8;
  sub_1CC0CA120((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC0CA374(uint64_t a1, void *a2)
{
  *a2 = &unk_1F26064D8;
  return sub_1CC0CA120((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CC0CA3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC0CA438(void *a1)
{
  *a1 = &unk_1F2606520;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC0CA4DC(void *a1)
{
  *a1 = &unk_1F2606520;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC0CA5A0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F2606520;
  sub_1CC0CA3A0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC0CA5F4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2606520;
  return sub_1CC0CA3A0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1CC0CA620(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v5 = operator new(8 * v4, (std::align_val_t)8uLL);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    if (v6)
    {
      memset_pattern16(v5, &unk_1CFAC4340, 8 * v6);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void sub_1CC0CA6C4(void *a1)
{
  *a1 = &unk_1F2606568;
  sub_1CD4B24BC((uint64_t)(a1 + 1));
  MEMORY[0x1D25D9CD0](a1[1], 8);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0CA734(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  if (!sub_1CD4A7E9C(*(void *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v36)) {
    return;
  }
  sub_1CD4B2418(&v36, *(void *)(a1 + 8), *(_DWORD *)(a1 + 24), a2);
  unint64_t v6 = v37;
  if (v37 < 2)
  {
    uint64_t v12 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v12) <= 0x10)
    {
      uint64_t v9 = " ; (mustexec in: ";
      uint64_t v10 = a3;
      size_t v11 = 17;
      goto LABEL_10;
    }
    *(unsigned char *)(v12 + 16) = 32;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)" ; (mustexec in: ";
    uint64_t v35 = *((void *)a3 + 4) + 17;
  }
  else
  {
    uint64_t v7 = (_OWORD *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v7 > 0xFuLL)
    {
      *uint64_t v7 = *(_OWORD *)" ; (mustexec in ";
      *((void *)a3 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a3, " ; (mustexec in ", 0x10uLL);
    }
    sub_1CD098D14(a3, v6, 0, 0, 0);
    uint64_t v8 = (void *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v8 <= 7uLL)
    {
      uint64_t v9 = " loops: ";
      uint64_t v10 = a3;
      size_t v11 = 8;
LABEL_10:
      llvm::raw_ostream::write(v10, v9, v11);
      goto LABEL_11;
    }
    *uint64_t v8 = 0x203A73706F6F6C20;
    uint64_t v35 = *((void *)a3 + 4) + 8;
  }
  *((void *)a3 + 4) = v35;
LABEL_11:
  if (v37)
  {
    char v13 = 0;
    unsigned int v14 = (char *)v36;
    uint64_t v15 = (char *)v36 + 8 * v37;
    do
    {
      uint64_t v16 = *(void *)v14;
      if (v13) {
        size_t v17 = 2;
      }
      else {
        size_t v17 = 0;
      }
      int v18 = (_WORD *)*((void *)a3 + 4);
      if (v17 <= *((void *)a3 + 3) - (void)v18)
      {
        if (v13)
        {
          *int v18 = 8236;
          *((void *)a3 + 4) += 2;
        }
      }
      else
      {
        if (v13) {
          int v19 = ", ";
        }
        else {
          int v19 = 0;
        }
        llvm::raw_ostream::write(a3, v19, v17);
      }
      uint64_t v20 = **(uint64_t *****)(v16 + 32);
      if ((*((unsigned char *)v20 + 23) & 0x10) == 0) {
        goto LABEL_35;
      }
      uint64_t v21 = ***v20;
      uint64_t v22 = *(void *)(v21 + 152);
      uint64_t v23 = *(unsigned int *)(v21 + 168);
      if (v23)
      {
        LODWORD(v24) = (v23 - 1) & ((v20 >> 4) ^ (v20 >> 9));
        uint64_t v25 = (uint64_t ****)(v22 + 16 * v24);
        uint64_t v26 = *v25;
        if (*v25 == v20) {
          goto LABEL_31;
        }
        int v27 = 1;
        while (v26 != (uint64_t ***)-4096)
        {
          int v28 = v24 + v27++;
          uint64_t v24 = v28 & (v23 - 1);
          uint64_t v26 = *(uint64_t ****)(v22 + 16 * v24);
          if (v26 == v20)
          {
            uint64_t v25 = (uint64_t ****)(v22 + 16 * v24);
            goto LABEL_31;
          }
        }
      }
      uint64_t v25 = (uint64_t ****)(v22 + 16 * v23);
LABEL_31:
      uint64_t v29 = (size_t *)v25[1];
      size_t v32 = *v29;
      int v30 = v29 + 2;
      size_t v31 = v32;
      unsigned int v33 = (void *)*((void *)a3 + 4);
      if (v32 <= *((void *)a3 + 3) - (void)v33)
      {
        if (v31)
        {
          memcpy(v33, v30, v31);
          *((void *)a3 + 4) += v31;
        }
      }
      else
      {
        llvm::raw_ostream::write(a3, (const char *)v30, v31);
      }
LABEL_35:
      v14 += 8;
      char v13 = 1;
    }
    while (v14 != v15);
  }
  size_t v34 = (unsigned char *)*((void *)a3 + 4);
  if (*((unsigned char **)a3 + 3) == v34)
  {
    llvm::raw_ostream::write(a3, ")", 1uLL);
  }
  else
  {
    *size_t v34 = 41;
    ++*((void *)a3 + 4);
  }
  if (v36 != v38) {
    free(v36);
  }
}

uint64_t sub_1CC0CAA54(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = a3;
  *(unsigned char *)(a1 + 2) = a4;
  sub_1CC0CAC0C(a1 + 8, a5);
  sub_1CC0CACA4(a1 + 40, a6);
  sub_1CC0CAD3C(a1 + 72, a7);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = a1;
  *(void *)(a1 + 208) = 0;
  sub_1CD4B3040(a1 + 176);
  llvm::MustBeExecutedIterator::resetInstruction((llvm::MustBeExecutedIterator *)(a1 + 176), 0);
  return a1;
}

void sub_1CC0CAAF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    MEMORY[0x1D25D9CD0](*a2, 8);
    JUMPOUT(0x1D25D9CE0);
  }
}

void *sub_1CC0CAB50(void *a1)
{
  *a1 = &unk_1F2606238;
  a1[9] = &unk_1F26048F8;
  MEMORY[0x1D25D9CD0](a1[10], 8);
  a1[5] = &unk_1F26048F8;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  *a1 = &unk_1F26065B0;
  sub_1CC0CADD4(a1 + 1);
  return a1;
}

uint64_t sub_1CC0CAC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC0CACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC0CAD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_1CC0CADD4(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    unint64_t v6 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        unint64_t v6 = sub_1CD487110(v6);
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

void sub_1CC0CAE48()
{
}

void *sub_1CC0CAE5C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F26065F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0CAEA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F26065F0;
  a2[1] = v2;
  return result;
}

void sub_1CC0CAED0()
{
}

void sub_1CC0CAF00()
{
}

void *sub_1CC0CAF14(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2606638;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0CAF5C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606638;
  a2[1] = v2;
  return result;
}

void sub_1CC0CAF88()
{
}

void sub_1CC0CAFB8()
{
}

void *sub_1CC0CAFCC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2606680;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC0CB014(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2606680;
  a2[1] = v2;
  return result;
}

void sub_1CC0CB040()
{
}

void sub_1CC0CB06C()
{
}

void sub_1CC0CB110(llvm::Pass *this)
{
  *(void *)this = &unk_1F26066C8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x60C40FAFB2B2FLL);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC0CB180(llvm::Pass *this)
{
  *(void *)this = &unk_1F26066C8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x60C40FAFB2B2FLL);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CC0CB204(llvm::Argument *this)
{
  BOOL result = 0;
  unsigned int v3 = *((unsigned __int8 *)this + 16);
  if (v3 >= 0x15 && v3 != 59)
  {
    if (v3 == 21)
    {
      if ((llvm::Argument::hasPassPointeeByValueCopyAttr(this) & 1) != 0
        || (llvm::Argument::hasNestAttr(this) & 1) != 0)
      {
        return 0;
      }
      int v4 = *(unsigned __int8 *)(*(void *)this + 8);
      if (v4 == 15)
      {
        uint64_t v5 = *(void *)(*((void *)this + 3) + 112);
        if (!v5
          || (unsigned int v6 = *((_DWORD *)this + 8) + 2, v6 >= *(_DWORD *)(v5 + 8))
          || (uint64_t v7 = *(void *)(v5 + 8 * v6 + 40)) == 0
          || (*(unsigned char *)(v7 + 21) & 2) == 0)
        {
          int v4 = 15;
          return v4 == 15;
        }
        return 0;
      }
    }
    else
    {
      int v4 = *(unsigned __int8 *)(*(void *)this + 8);
    }
    return v4 == 15;
  }
  return result;
}

uint64_t sub_1CC0CB2C4()
{
  *(void *)&long long v5 = "enable/disable all ARC Optimizations";
  *((void *)&v5 + 1) = 36;
  char v2 = 1;
  unsigned int v3 = &v2;
  int v4 = &llvm::objcarc::EnableARCOpts;
  int v1 = 1;
  sub_1CD4B3A50(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCC6C80, &dword_1CB82C000);
}

llvm::raw_ostream *llvm::objcarc::operator<<(llvm::raw_ostream *result, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::RetainRV";
        goto LABEL_39;
      }
      int v18 = "ARCInstKind::RetainRV";
      goto LABEL_75;
    case 2:
      unsigned int v6 = (_OWORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v6 <= 0x19uLL)
      {
        unsigned int v3 = "ARCInstKind::UnsafeClaimRV";
        goto LABEL_47;
      }
      int v19 = "ARCInstKind::UnsafeClaimRV";
      goto LABEL_80;
    case 3:
      uint64_t v7 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v7) <= 0x17)
      {
        unsigned int v3 = "ARCInstKind::RetainBlock";
        goto LABEL_44;
      }
      uint64_t v20 = "ARCInstKind::RetainBlock";
      goto LABEL_78;
    case 4:
      uint64_t v8 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v8) <= 0x13)
      {
        unsigned int v3 = "ARCInstKind::Release";
        size_t v4 = 20;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      *(_DWORD *)(v8 + 16) = 1702060389;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)"ARCInstKind::Release";
      uint64_t v17 = *((void *)result + 4) + 20;
      goto LABEL_86;
    case 5:
      uint64_t v7 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v7) <= 0x17)
      {
        unsigned int v3 = "ARCInstKind::Autorelease";
        goto LABEL_44;
      }
      uint64_t v20 = "ARCInstKind::Autorelease";
      goto LABEL_78;
    case 6:
      unsigned int v6 = (_OWORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v6 <= 0x19uLL)
      {
        unsigned int v3 = "ARCInstKind::AutoreleaseRV";
        goto LABEL_47;
      }
      int v19 = "ARCInstKind::AutoreleaseRV";
      goto LABEL_80;
    case 7:
      uint64_t v9 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v9 <= 0x1FuLL)
      {
        unsigned int v3 = "ARCInstKind::AutoreleasepoolPush";
        size_t v4 = 32;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v9, "ARCInstKind::AutoreleasepoolPush", 32);
      uint64_t v17 = *((void *)result + 4) + 32;
      goto LABEL_86;
    case 8:
      uint64_t v10 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v10 <= 0x1EuLL)
      {
        unsigned int v3 = "ARCInstKind::AutoreleasepoolPop";
        size_t v4 = 31;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v10, "ARCInstKind::AutoreleasepoolPop", 31);
      uint64_t v17 = *((void *)result + 4) + 31;
      goto LABEL_86;
    case 9:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::NoopCast";
        goto LABEL_39;
      }
      int v18 = "ARCInstKind::NoopCast";
      goto LABEL_75;
    case 10:
      size_t v11 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v11 <= 0x22uLL)
      {
        unsigned int v3 = "ARCInstKind::FusedRetainAutorelease";
        size_t v4 = 35;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v11, "ARCInstKind::FusedRetainAutorelease", 35);
      uint64_t v17 = *((void *)result + 4) + 35;
      goto LABEL_86;
    case 11:
      uint64_t v12 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v12 <= 0x24uLL)
      {
        unsigned int v3 = "ARCInstKind::FusedRetainAutoreleaseRV";
        size_t v4 = 37;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v12, "ARCInstKind::FusedRetainAutoreleaseRV", 37);
      uint64_t v17 = *((void *)result + 4) + 37;
      goto LABEL_86;
    case 12:
      char v13 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v13 <= 0x1CuLL)
      {
        unsigned int v3 = "ARCInstKind::LoadWeakRetained";
        size_t v4 = 29;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v13, "ARCInstKind::LoadWeakRetained", 29);
      uint64_t v17 = *((void *)result + 4) + 29;
      goto LABEL_86;
    case 13:
      unsigned int v14 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v14 <= 0x15uLL)
      {
        unsigned int v3 = "ARCInstKind::StoreWeak";
        size_t v4 = 22;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v14, "ARCInstKind::StoreWeak", 22);
      uint64_t v17 = *((void *)result + 4) + 22;
      goto LABEL_86;
    case 14:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::InitWeak";
        goto LABEL_39;
      }
      int v18 = "ARCInstKind::InitWeak";
      goto LABEL_75;
    case 15:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::LoadWeak";
        goto LABEL_39;
      }
      int v18 = "ARCInstKind::LoadWeak";
      goto LABEL_75;
    case 16:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::MoveWeak";
        goto LABEL_39;
      }
      int v18 = "ARCInstKind::MoveWeak";
      goto LABEL_75;
    case 17:
      uint64_t v5 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v5) <= 0x14)
      {
        unsigned int v3 = "ARCInstKind::CopyWeak";
LABEL_39:
        size_t v4 = 21;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      int v18 = "ARCInstKind::CopyWeak";
LABEL_75:
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v18;
      *(void *)(v5 + 13) = *(void *)(v18 + 13);
      uint64_t v17 = *((void *)result + 4) + 21;
      goto LABEL_86;
    case 18:
      uint64_t v7 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v7) <= 0x17)
      {
        unsigned int v3 = "ARCInstKind::DestroyWeak";
        goto LABEL_44;
      }
      uint64_t v20 = "ARCInstKind::DestroyWeak";
      goto LABEL_78;
    case 19:
      uint64_t v7 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v7) <= 0x17)
      {
        unsigned int v3 = "ARCInstKind::StoreStrong";
LABEL_44:
        size_t v4 = 24;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      uint64_t v20 = "ARCInstKind::StoreStrong";
LABEL_78:
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v20;
      *(void *)(v7 + 16) = *((void *)v20 + 2);
      uint64_t v17 = *((void *)result + 4) + 24;
      goto LABEL_86;
    case 20:
      unsigned int v6 = (_OWORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v6 <= 0x19uLL)
      {
        unsigned int v3 = "ARCInstKind::IntrinsicUser";
LABEL_47:
        size_t v4 = 26;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      int v19 = "ARCInstKind::IntrinsicUser";
LABEL_80:
      *unsigned int v6 = *(_OWORD *)v19;
      *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)(v19 + 10);
      uint64_t v17 = *((void *)result + 4) + 26;
      goto LABEL_86;
    case 21:
      uint64_t v15 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v15 <= 0x16uLL)
      {
        unsigned int v3 = "ARCInstKind::CallOrUser";
        size_t v4 = 23;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      qmemcpy(v15, "ARCInstKind::CallOrUser", 23);
      uint64_t v17 = *((void *)result + 4) + 23;
      goto LABEL_86;
    case 22:
      uint64_t v16 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v16) <= 0x10)
      {
        unsigned int v3 = "ARCInstKind::Call";
        goto LABEL_56;
      }
      char v21 = 108;
      uint64_t v22 = "ARCInstKind::Call";
      goto LABEL_85;
    case 23:
      uint64_t v16 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v16) <= 0x10)
      {
        unsigned int v3 = "ARCInstKind::User";
        goto LABEL_56;
      }
      char v21 = 114;
      uint64_t v22 = "ARCInstKind::User";
      goto LABEL_85;
    case 24:
      uint64_t v16 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v16) <= 0x10)
      {
        unsigned int v3 = "ARCInstKind::None";
LABEL_56:
        size_t v4 = 17;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      char v21 = 101;
      uint64_t v22 = "ARCInstKind::None";
LABEL_85:
      *(unsigned char *)(v16 + 16) = v21;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v22;
      uint64_t v17 = *((void *)result + 4) + 17;
      goto LABEL_86;
    default:
      uint64_t v2 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v2) > 0x12)
      {
        *(_DWORD *)(v2 + 15) = 1852399988;
        *(_OWORD *)uint64_t v2 = *(_OWORD *)"ARCInstKind::Retain";
        uint64_t v17 = *((void *)result + 4) + 19;
LABEL_86:
        *((void *)result + 4) = v17;
      }
      else
      {
        unsigned int v3 = "ARCInstKind::Retain";
        size_t v4 = 19;
        return llvm::raw_ostream::write(result, v3, v4);
      }
      return result;
  }
}

{
  uint64_t v2;
  const char *v3;
  void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  uint64_t v10;

  switch(a2)
  {
    case 1:
      size_t v4 = (void *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v4 <= 7uLL)
      {
        unsigned int v3 = "S_Retain";
        uint64_t v5 = 8;
        return llvm::raw_ostream::write(result, v3, v5);
      }
      *size_t v4 = 0x6E69617465525F53;
      uint64_t v10 = *((void *)result + 4) + 8;
      goto LABEL_23;
    case 2:
      unsigned int v6 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v6) <= 0xB)
      {
        unsigned int v3 = "S_CanRelease";
        uint64_t v5 = 12;
        return llvm::raw_ostream::write(result, v3, v5);
      }
      *(_DWORD *)(v6 + 8) = 1702060389;
      *(void *)unsigned int v6 = *(void *)"S_CanRelease";
      uint64_t v10 = *((void *)result + 4) + 12;
      goto LABEL_23;
    case 3:
      uint64_t v7 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v7) <= 4)
      {
        unsigned int v3 = "S_Use";
        uint64_t v5 = 5;
        return llvm::raw_ostream::write(result, v3, v5);
      }
      *(unsigned char *)(v7 + 4) = 101;
      *(_DWORD *)uint64_t v7 = 1934974803;
      uint64_t v10 = *((void *)result + 4) + 5;
      goto LABEL_23;
    case 4:
      uint64_t v2 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v2) <= 5)
      {
        unsigned int v3 = "S_Stop";
        goto LABEL_13;
      }
      *(_WORD *)(v2 + 4) = 28783;
      uint64_t v9 = 1951620947;
      goto LABEL_21;
    case 5:
      uint64_t v8 = (_OWORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v8 <= 0xFuLL)
      {
        unsigned int v3 = "S_MovableRelease";
        uint64_t v5 = 16;
        return llvm::raw_ostream::write(result, v3, v5);
      }
      *uint64_t v8 = *(_OWORD *)"S_MovableRelease";
      uint64_t v10 = *((void *)result + 4) + 16;
      goto LABEL_23;
    default:
      uint64_t v2 = *((void *)result + 4);
      if ((unint64_t)(*((void *)result + 3) - v2) > 5)
      {
        *(_WORD *)(v2 + 4) = 25966;
        uint64_t v9 = 1867407187;
LABEL_21:
        *(_DWORD *)uint64_t v2 = v9;
        uint64_t v10 = *((void *)result + 4) + 6;
LABEL_23:
        *((void *)result + 4) = v10;
      }
      else
      {
        unsigned int v3 = "S_None";
LABEL_13:
        uint64_t v5 = 6;
        return llvm::raw_ostream::write(result, v3, v5);
      }
      return result;
  }
}

uint64_t sub_1CC0CBA30(int a1)
{
  uint64_t result = 1;
  if (a1 <= 146)
  {
    if (((a1 - 56) > 0x11 || ((1 << (a1 - 56)) & 0x25627) == 0) && (a1 - 2) >= 2) {
      return 0;
    }
  }
  else if (((a1 - 147) > 0x15 || ((1 << (a1 + 109)) & 0x330801) == 0) {
         && ((a1 - 236) > 0x34 || ((1 << (a1 + 20)) & 0x1C000000200011) == 0)
  }
         && (a1 - 313) >= 3)
  {
    return 0;
  }
  return result;
}

uint64_t llvm::objcarc::IsUser(char a1)
{
  return (0xB00000u >> a1) & 1;
}

void *llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(void *this, const llvm::Function *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  this[1] = 0;
  *this = a2;
  this[2] = 0;
  if (*(unsigned char *)(***(void ***)a2 + 81))
  {
    v2[0] = v3;
    v2[1] = 0x100000000;
    int v8 = 0;
    v3[1] = 0;
    void v3[2] = 0;
    int v4 = 0;
    char v7 = 0;
    uint64_t v5 = 0;
    unsigned int v6 = a2;
    sub_1CC5A43B0((uint64_t)v2, 0);
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze();
  }
  return this;
}

uint64_t llvm::OptimizationRemarkEmitter::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(uint64_t **)(a1 + 16);
  if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *v4;
    *int v4 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    MEMORY[0x1D25D9CE0](v8, 0x20C4093837F09);
    *(void *)(a1 + 8) = 0;
  }
  else if (*(void *)(a1 + 8) && (sub_1CD4B4100(a4, (uint64_t)&llvm::BlockFrequencyAnalysis::Key, a2, a3) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

llvm::BlockFrequencyInfoImplBase **llvm::OptimizationRemarkEmitter::computeHotness(llvm::OptimizationRemarkEmitter *this, const llvm::Value *a2)
{
  uint64_t result = (llvm::BlockFrequencyInfoImplBase **)*((void *)this + 1);
  if (result) {
    return (llvm::BlockFrequencyInfoImplBase **)llvm::BlockFrequencyInfo::getBlockProfileCount(result, a2, 0);
  }
  return result;
}

uint64_t llvm::OptimizationRemarkEmitter::computeHotness(uint64_t this, llvm::DiagnosticInfoIROptimization *a2)
{
  unsigned int v3 = (const llvm::BasicBlock *)*((void *)a2 + 45);
  if (v3)
  {
    this = *(void *)(this + 8);
    if (this) {
      this = llvm::BlockFrequencyInfo::getBlockProfileCount((llvm::BlockFrequencyInfoImplBase **)this, v3, 0);
    }
    else {
      uint64_t v4 = 0;
    }
    *((void *)a2 + 8) = this;
    *((void *)a2 + 9) = v4;
  }
  return this;
}

void llvm::OptimizationRemarkEmitterWrapperPass::runOnFunction(llvm::OptimizationRemarkEmitterWrapperPass *this, uint64_t ***a2)
{
  if (*(unsigned char *)(***a2 + 81))
  {
    unsigned int v14 = **a2;
    unsigned int v3 = (uint64_t *)*((void *)this + 1);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (v4 == v5)
    {
LABEL_4:
      uint64_t v6 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v4 != &llvm::LazyBlockFrequencyInfoPass::ID)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_4;
        }
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::LazyBlockFrequencyInfoPass::ID);
    sub_1CD499004((llvm::BlockFrequencyInfo *)(v7 + 32));
    if (llvm::LLVMContext::isDiagnosticsHotnessThresholdSetFromPSI((llvm::LLVMContext *)v14))
    {
      uint64_t v8 = (uint64_t *)*((void *)this + 1);
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      if (v9 == v10)
      {
LABEL_9:
        uint64_t v11 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v9 != &llvm::ProfileSummaryInfoWrapperPass::ID)
        {
          v9 += 16;
          if (v9 == v10) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = *(void *)(v9 + 8);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v11 + 96))(v11, &llvm::ProfileSummaryInfoWrapperPass::ID);
      uint64_t v13 = llvm::ProfileSummaryInfo::getOrCompHotCountThreshold(*(llvm::ProfileSummaryInfo **)(v12 + 32));
      llvm::LLVMContext::setDiagnosticsHotnessThreshold(v14, v13, 1);
    }
  }
  operator new();
}

void llvm::OptimizationRemarkEmitterAnalysis::run(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(unsigned char *)(***(void ***)a1 + 81)) {
    llvm::AnalysisManager<llvm::Function>::getResultImpl();
  }
  *a2 = a1;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1CC0CC058(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeLazyBFIPassPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  operator new();
}

void sub_1CC0CC104(llvm::Pass *this)
{
  *(void *)this = &unk_1F2606770;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v2 = (void *)((char *)this + 32);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1CC0CC1D8((uint64_t)v2, v3);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC0CC164(llvm::Pass *this)
{
  *(void *)this = &unk_1F2606770;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v2 = (void *)((char *)this + 32);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1CC0CC1D8((uint64_t)v2, v3);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC0CC1D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(uint64_t **)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v2)
    {
      uint64_t v3 = *v2;
      *uint64_t v2 = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      MEMORY[0x1D25D9CE0](v2, 0x20C4093837F09);
    }
    JUMPOUT(0x1D25D9CE0);
  }
}

uint64_t llvm::isCheckForZeroAndMulWithOverflow(llvm *this, llvm::Value *a2, llvm::Value *a3, void *a4, llvm::Use **a5)
{
  int v6 = (int)a3;
  int v28 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  v25[0] = &v28;
  v25[1] = &v27;
  int v8 = sub_1CC0CC4AC((uint64_t)v25, (uint64_t)this);
  uint64_t result = 0;
  if (v8)
  {
    uint64_t v10 = v27;
    if (v6 && v28 == 33)
    {
      if (!a2) {
        return 0;
      }
      if (*((unsigned char *)a2 + 16) != 92) {
        return 0;
      }
      uint64_t v11 = (_DWORD *)*((void *)a2 + 8);
      int v12 = *((_DWORD *)a2 + 18);
      int v29 = 1;
      if (v12 != 1) {
        return 0;
      }
      if (*v11 != v29) {
        return 0;
      }
      uint64_t v13 = *((void *)a2 - 4);
      if (*(unsigned char *)(v13 + 16) != 84) {
        return 0;
      }
      uint64_t v14 = *(void *)(v13 - 32);
      if (!v14) {
        return 0;
      }
      if (*(unsigned char *)(v14 + 16)) {
        return 0;
      }
      if (*(void *)(v14 + 24) != *(void *)(v13 + 72)) {
        return 0;
      }
      if ((*(unsigned char *)(v14 + 33) & 0x20) == 0) {
        return 0;
      }
      int v15 = *(_DWORD *)(v14 + 36);
      if (v15 != 309 && v15 != 278) {
        return 0;
      }
      int v16 = *(_DWORD *)(v13 + 20);
      uint64_t v17 = v16 & 0x7FFFFFF;
    }
    else
    {
      if (v6) {
        return 0;
      }
      if (v28 != 32) {
        return 0;
      }
      v25[0] = &v26;
      if (!sub_1CBF686A0(v25, 30, (uint64_t)a2)) {
        return 0;
      }
      if (!v26) {
        return 0;
      }
      if (*(unsigned char *)(v26 + 16) != 92) {
        return 0;
      }
      int v18 = *(_DWORD **)(v26 + 64);
      int v19 = *(_DWORD *)(v26 + 72);
      int v29 = 1;
      if (v19 != 1) {
        return 0;
      }
      if (*v18 != v29) {
        return 0;
      }
      uint64_t v13 = *(void *)(v26 - 32);
      if (*(unsigned char *)(v13 + 16) != 84) {
        return 0;
      }
      uint64_t v20 = *(void *)(v13 - 32);
      if (!v20) {
        return 0;
      }
      if (*(unsigned char *)(v20 + 16)) {
        return 0;
      }
      if (*(void *)(v20 + 24) != *(void *)(v13 + 72)) {
        return 0;
      }
      if ((*(unsigned char *)(v20 + 33) & 0x20) == 0) {
        return 0;
      }
      int v21 = *(_DWORD *)(v20 + 36);
      if (v21 != 309 && v21 != 278) {
        return 0;
      }
      int v16 = *(_DWORD *)(v13 + 20);
      uint64_t v17 = v16 & 0x7FFFFFF;
    }
    uint64_t v22 = (void *)(v13 - 32 * v17);
    if (*v22 == v10)
    {
      uint64_t v23 = 1;
    }
    else
    {
      if (v22[4] != v10) {
        return 0;
      }
      uint64_t v23 = 0;
    }
    if ((v16 & 0x40000000) != 0) {
      uint64_t v24 = *(void *)(v13 - 8);
    }
    else {
      uint64_t v24 = v13 - 32 * (v16 & 0x7FFFFFF);
    }
    *a4 = v24 + 32 * v23;
    return 1;
  }
  return result;
}

uint64_t llvm::isCheckForZeroAndMulWithOverflow(llvm *this, llvm::Value *a2, llvm::Value *a3, BOOL a4, llvm::Use **a5)
{
  return llvm::isCheckForZeroAndMulWithOverflow(this, a2, a3, &v6, a5);
}

uint64_t sub_1CC0CC4AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a2 && *(unsigned char *)(a2 + 16) == 81)
  {
    uint64_t v5 = *(void *)(a2 - 64);
    if (v5)
    {
      **(void **)(a1 + 8) = v5;
      uint64_t v6 = *(void *)(a2 - 32);
      if (v6)
      {
        unsigned int v7 = *(unsigned __int8 *)(v6 + 16);
        if (v7 <= 0x14)
        {
          if (v7 == 16)
          {
            uint64_t v8 = *(unsigned int *)(v6 + 32);
            if (v8 >= 0x41)
            {
              int v10 = 0;
              int64_t v11 = (unint64_t)(v8 + 63) >> 6;
              do
              {
                if (v11-- < 1) {
                  break;
                }
                unint64_t v13 = *(void *)(*(void *)(v6 + 24) + 8 * v11);
                v10 += __clz(v13);
              }
              while (!v13);
              int v14 = v8 | 0xFFFFFFC0;
              if ((v8 & 0x3F) == 0) {
                int v14 = 0;
              }
              if (v10 + v14 == v8) {
                goto LABEL_10;
              }
            }
            else if (!*(void *)(v6 + 24))
            {
LABEL_10:
              **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
              return 1;
            }
          }
          else if (v7 == 17)
          {
            if (sub_1CB844168(*(void *)(a2 - 32), 0.0)) {
              goto LABEL_10;
            }
          }
          else if (v7 - 18 < 3 || v7 == 13)
          {
            goto LABEL_10;
          }
          if (sub_1CC03F414((uint64_t)&v15, (llvm::Constant *)v6)) {
            goto LABEL_10;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::PHITransAddr::Verify(llvm::PHITransAddr *this)
{
  void v16[8] = *MEMORY[0x1E4F143B8];
  if (*(void *)this)
  {
    uint64_t v2 = (unsigned char *)*((void *)this + 4);
    uint64_t v3 = &v2[8 * *((unsigned int *)this + 10)];
    int v14 = v16;
    uint64_t v15 = 0x800000000;
    sub_1CB935BDC((unsigned int *)&v14, v2, v3);
    uint64_t v4 = (llvm *)sub_1CC0CC7FC(*(void *)this, (uint64_t)&v14);
    if (v15)
    {
      uint64_t v5 = (llvm::raw_ostream *)llvm::errs(v4);
      uint64_t v6 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v6 > 0x29uLL)
      {
        qmemcpy(v6, "PHITransAddr contains extra instructions:\n", 42);
        *((void *)v5 + 4) += 42;
      }
      else
      {
        uint64_t v5 = llvm::raw_ostream::write(v5, "PHITransAddr contains extra instructions:\n", 0x2AuLL);
      }
      for (unsigned int i = 0; ; ++i)
      {
        uint64_t v8 = (llvm::raw_ostream *)llvm::errs(v5);
        uint64_t v9 = v8;
        int v10 = (void *)*((void *)v8 + 4);
        if (*((void *)v8 + 3) - (void)v10 > 0xCuLL)
        {
          qmemcpy(v10, "  InstInput #", 13);
          *((void *)v8 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(v8, "  InstInput #", 0xDuLL);
        }
        sub_1CD098D14(v9, i, 0, 0, 0);
        int64_t v11 = (_DWORD *)*((void *)v9 + 4);
        if (*((void *)v9 + 3) - (void)v11 > 3uLL)
        {
          *int64_t v11 = 544434464;
          *((void *)v9 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v9, " is ", 4uLL);
        }
        llvm::Value::print(*(llvm::Value **)(*((void *)this + 4) + 8 * i), v9, 0);
        int v12 = (unsigned char *)*((void *)v9 + 4);
        if (*((unsigned char **)v9 + 3) == v12)
        {
          uint64_t v5 = llvm::raw_ostream::write(v9, "\n", 1uLL);
        }
        else
        {
          *int v12 = 10;
          ++*((void *)v9 + 4);
        }
      }
    }
    if (v14 != v16) {
      free(v14);
    }
  }
  return 1;
}

uint64_t sub_1CC0CC7FC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (_DWORD *)result;
    if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
    {
      uint64_t v4 = *(unsigned int *)(a2 + 8);
      uint64_t v5 = *(void *)a2 + 8 * v4;
      if (v4)
      {
        uint64_t v6 = 8 * v4;
        uint64_t result = *(void *)a2;
        while (*(_DWORD **)result != v2)
        {
          result += 8;
          v6 -= 8;
          if (!v6)
          {
            uint64_t result = *(void *)a2 + 8 * v4;
            break;
          }
        }
      }
      else
      {
        uint64_t result = *(void *)a2;
      }
      if (v4 == (result - *(void *)a2) >> 3)
      {
        uint64_t result = sub_1CC0CC938((uint64_t)v2);
        if (result)
        {
          uint64_t v7 = v2[5] & 0x7FFFFFF;
          if (v7)
          {
            unint64_t v8 = 0;
            uint64_t v9 = 32 * v7;
            do
            {
              int v10 = v2[5];
              if ((v10 & 0x40000000) != 0) {
                int64_t v11 = (_DWORD *)*((void *)v2 - 1);
              }
              else {
                int64_t v11 = &v2[-8 * (v10 & 0x7FFFFFF)];
              }
              uint64_t result = sub_1CC0CC7FC(*(void *)&v11[v8 / 4], a2);
              v8 += 32;
            }
            while (v9 != v8);
          }
        }
        else
        {
          int v12 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
          unint64_t v13 = sub_1CB8E509C(v12, "Instruction in PHITransAddr is not phi-translatable:\n");
          int v14 = (llvm::raw_ostream *)llvm::errs(v13);
          uint64_t v15 = sub_1CD4B4340(v14, (llvm::Value *)v2);
          uint64_t result = (uint64_t)sub_1CD4B4374(v15, 10);
          __break(1u);
        }
      }
      else
      {
        if (v5 != result + 8)
        {
          uint64_t result = (uint64_t)memmove((void *)result, (const void *)(result + 8), v5 - (result + 8));
          LODWORD(v4) = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v4 - 1;
      }
    }
  }
  return result;
}

uint64_t llvm::PHITransAddr::IsPotentiallyPHITranslatable(llvm::PHITransAddr *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return sub_1CC0CC938(v1);
  }
  else {
    return 1;
  }
}

uint64_t sub_1CC0CC938(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  uint64_t result = 1;
  if (v2 != 62 && v2 != 83)
  {
    if ((v2 - 66) <= 0xC)
    {
      if (llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0)) {
        return 1;
      }
      int v2 = *(unsigned __int8 *)(a1 + 16);
    }
    if (v2 == 41)
    {
      int v4 = *(_DWORD *)(a1 + 20);
      uint64_t v5 = (v4 & 0x40000000) != 0 ? *(void *)(a1 - 8) : a1 - 32 * (v4 & 0x7FFFFFF);
      if (*(unsigned char *)(*(void *)(v5 + 32) + 16) == 16) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

llvm::Value *llvm::PHITransAddr::PHITranslateSubExpr(llvm::PHITransAddr *this, llvm::BasicBlock **a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, const llvm::DominatorTree *a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return (llvm::Value *)a2;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 < 0x1C) {
    return (llvm::Value *)a2;
  }
  uint64_t v9 = a3;
  int v12 = (char *)this + 32;
  int64_t v11 = (llvm::Value **)*((void *)this + 4);
  uint64_t v13 = *((unsigned int *)v12 + 2);
  int v14 = &v11[v13];
  uint64_t v15 = v11;
  if (v13)
  {
    uint64_t v16 = 8 * v13;
    uint64_t v15 = v11;
    while (*v15 != (llvm::Value *)a2)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
      {
        uint64_t v15 = &v11[v13];
        break;
      }
    }
  }
  if (v13 != v15 - v11)
  {
    if (a2[5] != a3) {
      return (llvm::Value *)a2;
    }
    if (v13)
    {
      uint64_t v35 = 8 * v13;
      while (*v11 != (llvm::Value *)a2)
      {
        ++v11;
        v35 -= 8;
        if (!v35)
        {
          int64_t v11 = v14;
          break;
        }
      }
    }
    int v36 = v12;
    if (v14 != v11 + 1)
    {
      memmove(v11, v11 + 1, (char *)v14 - (char *)(v11 + 1));
      LODWORD(v13) = *((_DWORD *)this + 10);
      unsigned int v6 = *((unsigned __int8 *)a2 + 16);
    }
    *((_DWORD *)this + 10) = v13 - 1;
    if (v6 == 83)
    {
      uint64_t Cast = sub_1CBF73380((uint64_t)a2, (uint64_t)a4);
      goto LABEL_85;
    }
    if (!sub_1CC0CC938((uint64_t)a2)) {
      return 0;
    }
    uint64_t v38 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    int v12 = v36;
    if (v38)
    {
      unint64_t v39 = 0;
      uint64_t v40 = 32 * v38;
      do
      {
        int v41 = *((_DWORD *)a2 + 5);
        if ((v41 & 0x40000000) != 0) {
          uint64_t v42 = (llvm::BasicBlock **)*(a2 - 1);
        }
        else {
          uint64_t v42 = &a2[-4 * (v41 & 0x7FFFFFF)];
        }
        uint64_t v43 = v42[v39 / 8];
        if (v43) {
          BOOL v44 = *((unsigned __int8 *)v43 + 16) >= 0x1Cu;
        }
        else {
          BOOL v44 = 0;
        }
        if (v44)
        {
          unint64_t v45 = *((unsigned int *)this + 10);
          if (v45 >= *((unsigned int *)this + 11)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*((void *)this + 4) + 8 * v45) = v43;
          ++*((_DWORD *)this + 10);
        }
        v39 += 32;
      }
      while (v40 != v39);
    }
  }
  int v17 = *((unsigned __int8 *)a2 + 16);
  if ((v17 - 79) >= 0xFFFFFFF3)
  {
    uint64_t v23 = 0;
    if (!llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0)) {
      return v23;
    }
    uint64_t v30 = llvm::PHITransAddr::PHITranslateSubExpr(this, *(a2 - 4), v9, a4, a5);
    if (!v30) {
      return 0;
    }
    if ((llvm::BasicBlock *)v30 != *(a2 - 4))
    {
      if (*(unsigned __int8 *)(v30 + 16) > 0x14u)
      {
        uint64_t v31 = *(void *)(v30 + 8);
        if (!v31) {
          return 0;
        }
        while (1)
        {
          uint64_t v23 = *(llvm::Value **)(v31 + 24);
          unsigned int v32 = *((unsigned __int8 *)v23 + 16);
          BOOL v33 = v23 && v32 >= 0x1C;
          BOOL v34 = v33 && v32 - 79 >= 0xFFFFFFF3;
          if (v34 && v32 == *((unsigned __int8 *)a2 + 16) && *(llvm::BasicBlock **)v23 == *a2) {
            break;
          }
          uint64_t v23 = 0;
          uint64_t v31 = *(void *)(v31 + 8);
          if (!v31) {
            return v23;
          }
        }
        if (a5) {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
        }
        return v23;
      }
      uint64_t Cast = (uint64_t)llvm::ConstantExpr::getCast((llvm::ConstantExpr *)(*((unsigned __int8 *)a2 + 16) - 28), (llvm::ConstantExpr *)v30, (llvm::Constant ***)*a2, 0);
LABEL_85:
      uint64_t v23 = (llvm::Value *)Cast;
LABEL_86:
      sub_1CC0CD14C((uint64_t)this, (uint64_t)v23);
      return v23;
    }
    return (llvm::Value *)a2;
  }
  if (v17 != 41)
  {
    if (v17 == 62)
    {
      v92[0] = v93;
      v92[1] = (void *)0x800000000;
      uint64_t v18 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      if (v18)
      {
        uint64_t v86 = (uint64_t)v12;
        unint64_t v19 = 0;
        char v20 = 0;
        uint64_t v21 = 32 * v18;
        while (1)
        {
          uint64_t v22 = llvm::PHITransAddr::PHITranslateSubExpr(this, *(&a2[v19 / 8] - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), v9, a4, a5);
          uint64_t v23 = (llvm::Value *)v22;
          if (!v22) {
            break;
          }
          uint64_t v24 = v9;
          uint64_t v25 = a5;
          uint64_t v26 = a4;
          BOOL v27 = v22 != (void)*(&a2[v19 / 8] - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          if (LODWORD(v92[1]) >= (unint64_t)HIDWORD(v92[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v92[0] + LODWORD(v92[1])) = v22;
          v20 |= v27;
          uint64_t v28 = ++LODWORD(v92[1]);
          v19 += 32;
          a4 = v26;
          a5 = v25;
          uint64_t v9 = v24;
          if (v21 == v19)
          {
            if (v20)
            {
              unsigned int v58 = *(unsigned __int8 **)v92[0];
              char v59 = a2[8];
              uint64_t v60 = v28 - 1;
              int v61 = (*((unsigned __int8 *)a2 + 17) >> 1) & 1;
              uint64_t v62 = *((void *)this + 3);
              long long v87 = *(_OWORD *)((char *)this + 8);
              unsigned int v88 = a5;
              uint64_t v89 = v62;
              uint64_t v90 = 0;
              __int16 v91 = 257;
              uint64_t v63 = sub_1CC036F6C(v59, v58, (uint64_t *)v92[0] + 1, v60, v61, (uint64_t)&v87);
              if (v63)
              {
                uint64_t v23 = v63;
                if (LODWORD(v92[1]))
                {
                  uint64_t v64 = 0;
                  uint64_t v65 = 8 * LODWORD(v92[1]);
                  do
                  {
                    sub_1CC0CD1CC(*(unsigned __int8 **)((char *)v92[0] + v64), v86);
                    v64 += 8;
                  }
                  while (v65 != v64);
                }
                sub_1CC0CD14C((uint64_t)this, (uint64_t)v23);
              }
              else
              {
                for (uint64_t i = *(void *)(*(void *)v92[0] + 8); i; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v23 = *(llvm::Value **)(i + 24);
                  if (*((unsigned char *)v23 + 16) == 62
                    && v23 != 0
                    && *(llvm::BasicBlock **)v23 == *a2
                    && *((llvm::BasicBlock **)v23 + 8) == a2[8])
                  {
                    uint64_t v73 = *((_DWORD *)v23 + 5) & 0x7FFFFFF;
                    if (LODWORD(v92[1]) == v73 && *(void *)(*((void *)v23 + 5) + 56) == *((void *)v24 + 7))
                    {
                      if (a5) {
                        llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
                      }
                      if ((*((_DWORD *)v23 + 5) & 0x7FFFFFF) == 0) {
                        goto LABEL_88;
                      }
                      long long v74 = v92[0];
                      uint64_t v75 = 8 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF);
                      uint64_t v76 = -32 * v73;
                      while (*v74 == *(void *)((char *)v23 + v76))
                      {
                        ++v74;
                        v76 += 32;
                        v75 -= 8;
                        if (!v75) {
                          goto LABEL_88;
                        }
                      }
                    }
                  }
                }
                uint64_t v23 = 0;
              }
            }
            else
            {
              uint64_t v23 = (llvm::Value *)a2;
            }
            break;
          }
        }
      }
      else
      {
        uint64_t v23 = (llvm::Value *)a2;
      }
LABEL_88:
      if (v92[0] != v93) {
        free(v92[0]);
      }
      return v23;
    }
    return 0;
  }
  int v46 = *((_DWORD *)a2 + 5);
  if ((v46 & 0x40000000) != 0) {
    int v47 = (llvm::BasicBlock **)*(a2 - 1);
  }
  else {
    int v47 = &a2[-4 * (v46 & 0x7FFFFFF)];
  }
  Add = v47[4];
  if (*((unsigned char *)Add + 16) != 16) {
    return 0;
  }
  uint64_t v49 = (uint64_t)v12;
  unsigned int v50 = a4;
  unsigned int v51 = *((unsigned __int8 *)a2 + 17);
  uint64_t v52 = llvm::PHITransAddr::PHITranslateSubExpr(this, *v47, v9, v50, a5);
  uint64_t v23 = (llvm::Value *)v52;
  if (!v52) {
    return v23;
  }
  int v53 = (v51 >> 2) & 1;
  int v54 = (v51 >> 1) & 1;
  if (*(unsigned char *)(v52 + 16) == 41
    && ((BOOL v55 = *(llvm::Constant **)(v52 - 32)) != 0 ? (v56 = *((unsigned char *)v55 + 16) == 16) : (v56 = 0), v56))
  {
    uint64_t v57 = *(llvm **)(v52 - 64);
    Add = llvm::ConstantExpr::getAdd(Add, v55, 0, 0);
    uint64_t v66 = *((void *)this + 4);
    uint64_t v67 = *((unsigned int *)this + 10);
    if (v67)
    {
      uint64_t v68 = 8 * v67;
      uint64_t v69 = (llvm::Value **)*((void *)this + 4);
      uint64_t v70 = v49;
      while (*v69 != v23)
      {
        ++v69;
        v68 -= 8;
        if (!v68)
        {
          uint64_t v69 = (llvm::Value **)(v66 + 8 * v67);
          break;
        }
      }
    }
    else
    {
      uint64_t v69 = (llvm::Value **)*((void *)this + 4);
      uint64_t v70 = v49;
    }
    uint64_t v49 = v70;
    if (v67 != ((uint64_t)v69 - v66) >> 3)
    {
      sub_1CC0CD1CC((unsigned __int8 *)v23, v70);
      sub_1CC0CD14C((uint64_t)this, (uint64_t)v57);
    }
    LOBYTE(v53) = 0;
    int v54 = 0;
  }
  else
  {
    uint64_t v57 = (llvm *)v52;
  }
  uint64_t v77 = *((void *)this + 3);
  *(_OWORD *)int v92 = *(_OWORD *)((char *)this + 8);
  v93[0] = a5;
  v93[1] = v77;
  v93[2] = 0;
  __int16 v94 = 257;
  uint64_t v78 = sub_1CC02A5B0(v57, Add, v53, v54, (uint64_t)v92, (llvm::DSOLocalEquivalent **)3);
  if (v78)
  {
    uint64_t v23 = v78;
    sub_1CC0CD1CC((unsigned __int8 *)v57, v49);
    goto LABEL_86;
  }
  int v79 = *((_DWORD *)a2 + 5);
  if ((v79 & 0x40000000) != 0) {
    int v80 = (llvm **)*(a2 - 1);
  }
  else {
    int v80 = &a2[-4 * (v79 & 0x7FFFFFF)];
  }
  if (v57 == *v80)
  {
    uint64_t v23 = (llvm::Value *)a2;
    if (Add == v80[4]) {
      return v23;
    }
  }
  uint64_t v81 = *((void *)v57 + 1);
  if (!v81) {
    return 0;
  }
  while (1)
  {
    uint64_t v23 = *(llvm::Value **)(v81 + 24);
    unsigned int v82 = *((unsigned __int8 *)v23 + 16);
    BOOL v83 = v82 != 41 || v23 == 0;
    BOOL v84 = !v83 && v82 >= 0x1C;
    BOOL v85 = v84 && v82 - 59 >= 0xFFFFFFEE;
    if (v85
      && *((llvm **)v23 - 8) == v57
      && *((const llvm::detail::DoubleAPFloat **)v23 - 4) == Add
      && *(void *)(*((void *)v23 + 5) + 56) == *((void *)v9 + 7))
    {
      break;
    }
    uint64_t v23 = 0;
    uint64_t v81 = *(void *)(v81 + 8);
    if (!v81) {
      return v23;
    }
  }
  if (a5) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates();
  }
  return v23;
}