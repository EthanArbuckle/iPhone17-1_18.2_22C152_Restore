uint64_t sub_1CCB98A9C(uint64_t *a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t AttributeAtIndex;
  int v11;
  unint64_t v12;
  uint64_t v14;

  AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(a1, a3, a4);
  v14 = llvm::AttributeList::removeAttributeAtIndex(a1, a2, a3, a4);
  if (AttributeAtIndex) {
    v11 = *(_DWORD *)(AttributeAtIndex + 12);
  }
  else {
    v11 = 0;
  }
  v12 = llvm::Attribute::get(a2, v11, a5);
  return llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)&v14, (llvm::LLVMContext *)a2, a3, v12);
}

void sub_1CCB98B40()
{
}

__n128 sub_1CCB98B54(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_1F262D410;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCB98BA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262D410;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCB98BD0(uint64_t a1, uint64_t a2)
{
  **(unsigned char **)(a1 + 16) = 1;
}

llvm::detail::IEEEFloat *sub_1CCB98C04(uint64_t a1, unint64_t *a2)
{
  return sub_1CCB96508(*(void *)(a1 + 8), a2, 1);
}

void sub_1CCB98C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = sub_1CCB98E30(a1, a2, a3);
  v5 = *(uint64_t **)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = 8 * v6;
      do
      {
        uint64_t v8 = *v5;
        if (*v5) {
          BOOL v9 = *(unsigned char *)(*v5 + 8) == 16;
        }
        else {
          BOOL v9 = 0;
        }
        if (v9 && *(void *)(v8 + 24)) {
          llvm::StructType::setName(v8, "", 0);
        }
        ++v5;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v10 = 8 * v6;
      do
      {
        uint64_t v30 = *v5;
        v31 = 0;
        if (sub_1CB915048((uint64_t *)(a1 + 8), &v30, &v31))
        {
          void *v31 = -8192;
          *(int32x2_t *)(a1 + 16) = vadd_s32(*(int32x2_t *)(a1 + 16), (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v5;
        v10 -= 8;
      }
      while (v10);
    }
    sub_1CD42769C(a1 + 320, *(unsigned int *)(a1 + 328) - (unint64_t)*(unsigned int *)(a1 + 184));
    uint64_t v11 = *(unsigned int *)(a1 + 184);
    if (v11)
    {
      v12 = *(uint64_t **)(a1 + 176);
      v13 = &v12[v11];
      do
      {
        uint64_t v14 = *v12;
        uint64_t v16 = *(void *)(a1 + 464);
        uint64_t v15 = *(void *)(a1 + 472);
        if (v15 == v16)
        {
          uint64_t v17 = *(unsigned int *)(a1 + 484);
          v18 = (void *)(v15 + 8 * v17);
          if (v17)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 8 * v17;
            while (*(void *)(v15 + v19) != v14)
            {
              v19 += 8;
              if (v20 == v19) {
                goto LABEL_38;
              }
            }
            v18 = (void *)(v15 + v19);
          }
LABEL_38:
          uint64_t v16 = *(void *)(a1 + 472);
        }
        else
        {
          uint64_t v21 = *(unsigned int *)(a1 + 480);
          int v22 = v21 - 1;
          unsigned int v23 = (v21 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          v18 = (void *)(v15 + 8 * v23);
          uint64_t v24 = *v18;
          if (*v18 == -1)
          {
            v25 = 0;
LABEL_47:
            if (v25) {
              v18 = v25;
            }
            if (*v18 != v14) {
              v18 = (void *)(v15 + 8 * v21);
            }
          }
          else
          {
            v25 = 0;
            int v26 = 1;
            while (v24 != v14)
            {
              if (v25) {
                BOOL v27 = 0;
              }
              else {
                BOOL v27 = v24 == -2;
              }
              if (v27) {
                v25 = v18;
              }
              unsigned int v28 = v23 + v26++;
              unsigned int v23 = v28 & v22;
              v18 = (void *)(v15 + 8 * (v28 & v22));
              uint64_t v24 = *v18;
              if (*v18 == -1) {
                goto LABEL_47;
              }
            }
          }
        }
        if (v15 == v16) {
          v29 = (unsigned int *)(a1 + 484);
        }
        else {
          v29 = (unsigned int *)(a1 + 480);
        }
        if (v18 != (void *)(v15 + 8 * *v29))
        {
          void *v18 = -2;
          ++*(_DWORD *)(a1 + 488);
        }
        ++v12;
      }
      while (v12 != v13);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 184) = 0;
}

BOOL sub_1CCB98E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a3;
  if (*(unsigned __int8 *)(a3 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 24);
  if (v8)
  {
    int v9 = v8 - 1;
    unsigned int v10 = v9 & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (void *)(v7 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 == a3) {
      goto LABEL_13;
    }
    v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (void *)(v7 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 == a3) {
        goto LABEL_13;
      }
    }
    if (v13) {
      v46 = v13;
    }
    else {
      v46 = v11;
    }
  }
  else
  {
    v46 = 0;
  }
  uint64_t v11 = sub_1CC7BBA58(v6, (uint64_t)&v49, &v49, v46);
  *uint64_t v11 = v49;
  v11[1] = 0;
LABEL_13:
  uint64_t v17 = v11[1];
  if (v17) {
    return v17 == a2;
  }
  uint64_t v18 = v49;
  if (v49 == a2) {
    goto LABEL_81;
  }
  unsigned int v19 = *(_DWORD *)(v49 + 8);
  if (v49 && v19 == 16)
  {
    if ((v19 & 0x100) == 0)
    {
      v11[1] = a2;
      unsigned int v20 = *(_DWORD *)(a1 + 40);
      if (v20 >= *(_DWORD *)(a1 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 32) + 8 * v20) = v18;
      ++*(_DWORD *)(a1 + 40);
      return 1;
    }
    if ((*(unsigned char *)(a2 + 9) & 1) == 0)
    {
      uint64_t v21 = *(void *)(a1 + 472);
      uint64_t v22 = *(unsigned int *)(a1 + 484);
      if (v21 == *(void *)(a1 + 464))
      {
        if (v22)
        {
          unsigned int v23 = 0;
          uint64_t v24 = 8 * v22;
          v25 = *(void **)(a1 + 472);
          while (*v25 != a2)
          {
            if (*v25 == -2) {
              unsigned int v23 = v25;
            }
            ++v25;
            v24 -= 8;
            if (!v24)
            {
              if (!v23) {
                goto LABEL_30;
              }
              *unsigned int v23 = a2;
              --*(_DWORD *)(a1 + 488);
              goto LABEL_77;
            }
          }
          return 0;
        }
LABEL_30:
        unsigned int v26 = *(_DWORD *)(a1 + 480);
        if (v22 < v26)
        {
          *(_DWORD *)(a1 + 484) = v22 + 1;
          *(void *)(v21 + 8 * v22) = a2;
LABEL_77:
          unsigned int v42 = *(_DWORD *)(a1 + 328);
          if (v42 >= *(_DWORD *)(a1 + 332)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 320) + 8 * v42) = v18;
          ++*(_DWORD *)(a1 + 328);
          unsigned int v43 = *(_DWORD *)(a1 + 40);
          if (v43 >= *(_DWORD *)(a1 + 44)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 32) + 8 * v43) = v49;
          ++*(_DWORD *)(a1 + 40);
          unsigned int v44 = *(_DWORD *)(a1 + 184);
          if (v44 >= *(_DWORD *)(a1 + 188)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(a1 + 176) + 8 * v44) = a2;
          ++*(_DWORD *)(a1 + 184);
LABEL_81:
          v11[1] = a2;
          return 1;
        }
      }
      else
      {
        unsigned int v26 = *(_DWORD *)(a1 + 480);
      }
      if (3 * v26 <= 4 * ((int)v22 - *(_DWORD *)(a1 + 488)))
      {
        if (v26 >= 0x40) {
          v26 *= 2;
        }
        else {
          unsigned int v26 = 128;
        }
      }
      else if (v26 - v22 >= v26 >> 3)
      {
LABEL_58:
        unsigned int v33 = v26 - 1;
        unsigned int v34 = (v26 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v35 = (void *)(v21 + 8 * v34);
        uint64_t v36 = *v35;
        if (*v35 != -1)
        {
          v37 = 0;
          int v38 = 1;
          while (v36 != a2)
          {
            if (v37) {
              BOOL v39 = 0;
            }
            else {
              BOOL v39 = v36 == -2;
            }
            if (v39) {
              v37 = v35;
            }
            unsigned int v40 = v34 + v38++;
            unsigned int v34 = v40 & v33;
            v35 = (void *)(v21 + 8 * (v40 & v33));
            uint64_t v36 = *v35;
            if (*v35 == -1) {
              goto LABEL_70;
            }
          }
          return 0;
        }
        v37 = 0;
LABEL_70:
        if (v37) {
          v41 = v37;
        }
        else {
          v41 = v35;
        }
        if (*v41 == a2) {
          return 0;
        }
        if (*v41 == -2) {
          --*(_DWORD *)(a1 + 488);
        }
        else {
          ++*(_DWORD *)(a1 + 484);
        }
        void *v41 = a2;
        goto LABEL_77;
      }
      v47 = v11;
      uint64_t v48 = v49;
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 464), v26);
      uint64_t v18 = v48;
      uint64_t v11 = v47;
      unsigned int v26 = *(_DWORD *)(a1 + 480);
      uint64_t v21 = *(void *)(a1 + 472);
      goto LABEL_58;
    }
  }
  if (*(_DWORD *)(v49 + 12) != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  unsigned int v27 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = 0;
  switch((char)v27)
  {
    case 13:
      return v3;
    case 14:
      if (v19 > 0xFF != v27 > 0xFF) {
        return 0;
      }
      goto LABEL_46;
    case 15:
      if ((v27 ^ v19) >= 0x100) {
        return 0;
      }
      goto LABEL_46;
    case 16:
      if (((v19 ^ v27) & 0x400) != 0 || ((((v27 & 0x200) == 0) ^ ((unsigned __int16)(v19 & 0x200) >> 9)) & 1) == 0) {
        return 0;
      }
      goto LABEL_46;
    case 17:
      if (*(void *)(a2 + 32) != *(void *)(v49 + 32)) {
        return 0;
      }
      goto LABEL_46;
    default:
      if ((v27 & 0xFE) == 0x12)
      {
        uint64_t v3 = 0;
        if ((v19 == 19) != (*(_DWORD *)(a2 + 8) == 19)
          || *(_DWORD *)(a2 + 32) != *(_DWORD *)(v49 + 32))
        {
          return v3;
        }
      }
LABEL_46:
      v11[1] = a2;
      unsigned int v28 = *(_DWORD *)(a1 + 40);
      if (v28 >= *(_DWORD *)(a1 + 44)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 32) + 8 * v28) = v18;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v29 = *(unsigned int *)(v49 + 12);
      if (!v29) {
        return 1;
      }
      uint64_t v30 = 0;
      uint64_t v31 = 8 * v29 - 8;
      do
      {
        uint64_t v3 = sub_1CCB98E30(a1, *(void *)(*(void *)(a2 + 16) + v30), *(void *)(*(void *)(v49 + 16) + v30));
        if (v3) {
          BOOL v32 = v31 == v30;
        }
        else {
          BOOL v32 = 1;
        }
        v30 += 8;
      }
      while (!v32);
      break;
  }
  return v3;
}

void sub_1CCB99398(uint64_t **a1, void *a2, size_t a3, const void *a4, size_t a5)
{
  v12[31] = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  if (llvm::Module::getNamedValue(**a1, (unsigned __int8 *)a2, a3))
  {
    uint64_t v11 = 0x207265766D79732ELL;
    if (a3 + 8 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (a3) {
      memcpy(v12, a2, a3);
    }
    if (a3 + 10 > 0x100) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_WORD *)((char *)v12 + a3) = 8236;
    size_t v10 = a3 + 10;
    if (a3 + 10 + a5 > 0x100) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (a5)
    {
      memcpy((char *)&v12[-1] + v10, a4, a5);
      size_t v10 = a3 + 10;
    }
    LLVMAppendModuleInlineAsm_0(*v9, (const std::string::value_type *)&v11, v10 + a5);
  }
}

uint64_t sub_1CCB99544(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_14:
      uint64_t result = 1;
    }
    else
    {
      int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v7 == -8192;
        }
        if (v11) {
          int v8 = v6;
        }
        unsigned int v12 = v5 + v9++;
        unsigned int v5 = v12 & v4;
        uint64_t v6 = (void *)(a1 + 8 * (v12 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CCB995CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v12 = 0;
  uint64_t result = sub_1CCB99544(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  uint64_t v7 = v12;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v10 = 0;
    goto LABEL_7;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if (4 * v9 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v9 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1CCB996D4(a2, v8);
    unsigned int v12 = 0;
    uint64_t result = sub_1CCB99544(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    uint64_t v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  char v10 = 1;
LABEL_7:
  uint64_t v11 = *(void *)a2 + 8 * v8;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void *sub_1CCB996D4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6A17DC(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void *sub_1CCB997A0(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CCB99854((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CCB99854(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(unsigned __int8 ***)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CCB99920(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CCB99920(uint64_t result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v4 = result;
  *(void *)(result + 8) = 0;
  uint64_t v5 = *(unsigned int *)(result + 16);
  if (v5)
  {
    unint64_t v6 = *(void **)result;
    uint64_t v7 = 16 * v5;
    do
    {
      *unint64_t v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    unsigned int v8 = a2 + 1;
    do
    {
      if (((unint64_t)*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v12 = 0;
        uint64_t result = sub_1CBA0E618(v4, v8 - 1, &v12);
        int v9 = v12;
        void *v12 = *(v8 - 1);
        v9[1] = *v8;
        uint64_t v10 = (uint64_t)(v9 + 1);
        if (*v8)
        {
          uint64_t result = llvm::MetadataTracking::retrack((uint64_t)v8, *v8, v10);
          *unsigned int v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      uint64_t v11 = v8 + 1;
      v8 += 2;
    }
    while (v11 != a3);
  }
  return result;
}

uint64_t llvm::Linker::linkInModule(llvm::Module **a1, llvm::Module **a2, int a3, void *a4)
{
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (void *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v237 = v236;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v236);
      uint64_t v7 = v237;
    }
    else
    {
      v237 = (void *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v237 = 0;
  }
  v238 = a1;
  v239 = v6;
  v240[0] = 0;
  v240[1] = 0;
  int v241 = 0;
  v243 = 0;
  uint64_t v244 = 0;
  __p = 0;
  int v245 = a3;
  v246[0] = 0;
  v246[1] = 0;
  v246[2] = 0x800000000;
  if (v7)
  {
    if (v7 == v236)
    {
      v248 = v247;
      (*(void (**)(void *))(v236[0] + 24))(v236);
      uint64_t v249 = 0;
      uint64_t v250 = 0;
      int v251 = 0;
      uint64_t v252 = 0;
      uint64_t v253 = 0;
      unsigned int v254 = 0;
      if (v237 == v236)
      {
        (*(void (**)(void *))(v236[0] + 32))(v236);
      }
      else if (v237)
      {
        (*(void (**)(void))(*v237 + 40))();
      }
    }
    else
    {
      v237 = 0;
      uint64_t v249 = 0;
      uint64_t v250 = 0;
      v248 = v7;
      int v251 = 0;
      uint64_t v252 = 0;
      uint64_t v253 = 0;
      unsigned int v254 = 0;
    }
  }
  else
  {
    uint64_t v252 = 0;
    uint64_t v253 = 0;
    unsigned int v254 = 0;
    uint64_t v249 = 0;
    uint64_t v250 = 0;
    v248 = 0;
    int v251 = 0;
  }
  v216 = *v238;
  v221[0] = 0;
  v221[1] = 0;
  int v222 = 0;
  uint64_t v8 = *((unsigned int *)v239 + 32);
  if (v8)
  {
    for (i = (uint64_t *)*((void *)v239 + 15); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)*((void *)v239 + 15);
  }
  uint64_t v215 = *((void *)v239 + 15) + 8 * v8;
  if (i != (uint64_t *)v215)
  {
    uint64_t v37 = *i;
    while (1)
    {
      uint64_t v38 = v37 + 8;
      uint64_t v39 = v249;
      int v40 = v251;
      if (!v251) {
        goto LABEL_70;
      }
      unsigned int v41 = ((v38 >> 4) ^ (v38 >> 9)) & (v251 - 1);
      uint64_t v42 = *(void *)(v249 + 16 * v41);
      if (v38 != v42) {
        break;
      }
      do
      {
LABEL_116:
        uint64_t v87 = i[1];
        ++i;
        uint64_t v37 = v87;
        if (v87) {
          BOOL v88 = v37 == -8;
        }
        else {
          BOOL v88 = 1;
        }
      }
      while (v88);
      if (i == (uint64_t *)v215) {
        goto LABEL_15;
      }
    }
    int v43 = 1;
    while (v42 != -4096)
    {
      unsigned int v44 = v41 + v43++;
      unsigned int v41 = v44 & (v251 - 1);
      uint64_t v42 = *(void *)(v249 + 16 * v41);
      if (v38 == v42) {
        goto LABEL_116;
      }
    }
LABEL_70:
    v212 = (size_t **)(v37 + 8);
    uint64_t v45 = (uint64_t)*v238;
    int v46 = *(_DWORD *)(v37 + 16);
    uint64_t v47 = *((unsigned int *)*v238 + 32);
    if (v47)
    {
      uint64_t v48 = *(size_t **)(v37 + 8);
      size_t v51 = *v48;
      uint64_t v49 = (unsigned __int8 *)(v48 + 9);
      size_t v50 = v51;
      uint64_t v210 = v249;
      int v209 = v251;
      int v213 = *(_DWORD *)(v37 + 16);
      int v52 = 0;
      if (v51)
      {
        size_t v53 = v50;
        v54 = v49;
        do
        {
          int v55 = *v54++;
          int v52 = 33 * v52 + v55;
          --v53;
        }
        while (v53);
      }
      unsigned int v56 = v47 - 1;
      uint64_t v57 = *(void *)(v45 + 120);
      uint64_t v208 = *((unsigned int *)*v238 + 32);
      uint64_t v58 = v57 + 8 * v47 + 8;
      int v59 = 1;
      int v60 = v52;
      while (1)
      {
        uint64_t v61 = v60 & v56;
        v62 = *(void **)(v57 + 8 * v61);
        if (v62 != (void *)-8)
        {
          if (!v62) {
            goto LABEL_84;
          }
          if (*(_DWORD *)(v58 + 4 * v61) == v52 && v50 == *v62)
          {
            if (!v50) {
              break;
            }
            v63 = v49;
            int v64 = memcmp(v49, (char *)v62 + *(unsigned int *)(v45 + 140), v50);
            uint64_t v49 = v63;
            if (!v64) {
              break;
            }
          }
        }
        int v60 = v59 + v61;
        ++v59;
      }
      if (v61 == -1 || (int)v61 == v208)
      {
LABEL_84:
        int v65 = 1;
        int v46 = v213;
LABEL_85:
        v66 = v212;
LABEL_86:
        uint64_t v39 = v210;
        int v40 = v209;
        goto LABEL_87;
      }
      int v89 = *(_DWORD *)(*(void *)(v57 + 8 * (int)v61) + 16);
      if ((v89 | 2) == 2 && (v213 | 2) == 2)
      {
        int v46 = 2;
        if (v213 != 2 && v89 != 2)
        {
          int v65 = 0;
          int v46 = 0;
          goto LABEL_85;
        }
      }
      else
      {
        if (v213 != v89)
        {
          __int16 v226 = 1283;
          v223 = (uint64_t ***)"Linking COMDATs named '";
          v224 = (char *)v49;
          size_t v225 = v50;
          v206 = "': invalid selection kinds!";
          goto LABEL_310;
        }
        if ((v213 - 1) >= 2 && v213 != 4)
        {
          v66 = v212;
          if (v213 == 3)
          {
            int v46 = 3;
            int v65 = 2;
          }
          else
          {
            int v65 = 0;
            int v46 = v213;
          }
          goto LABEL_86;
        }
        int v46 = v213;
      }
      v219 = 0;
      v235 = 0;
      v91 = v49;
      if ((sub_1CCB9BADC((uint64_t)&v238, v45, v49, v50, (unsigned __int8 **)&v219) & 1) != 0
        || (sub_1CCB9BADC((uint64_t)&v238, (uint64_t)v239, v91, v50, &v235) & 1) != 0)
      {
        goto LABEL_262;
      }
      v92 = v91;
      v93 = v239;
      v211 = v219;
      v94 = (llvm::Type *)*((void *)v219 + 3);
      uint64_t v214 = sub_1CB83544C(v45 + 272, (uint64_t)v94);
      BOOL v96 = v95 == 1;
      char Alignment = llvm::DataLayout::getAlignment((llvm::DataLayout *)(v45 + 272), v94, 1);
      if (v96) {
      v99 = (llvm::Module *)((char *)v93 + 272);
      }
      v100 = v235;
      v101 = (llvm::Type *)*((void *)v235 + 3);
      uint64_t v102 = sub_1CB83544C((uint64_t)v99, (uint64_t)v101);
      BOOL v104 = v103 == 1;
      char v106 = llvm::DataLayout::getAlignment(v99, v101, 1);
      if (v104) {
      unint64_t v107 = ((1 << Alignment) + ((unint64_t)(v214 + 7) >> 3) - 1) & -(1 << Alignment);
      }
      unint64_t v108 = ((1 << v106) + ((unint64_t)(v102 + 7) >> 3) - 1) & -(1 << v106);
      if (v46 == 2)
      {
        int v65 = v108 > v107;
        v66 = v212;
      }
      else
      {
        v66 = v212;
        if (v46 == 1)
        {
          if (*((void *)v100 - 4) != *(v211 - 4))
          {
            __int16 v226 = 1283;
            v223 = (uint64_t ***)"Linking COMDATs named '";
            v224 = (char *)v92;
            size_t v225 = v50;
            v206 = "': ExactMatch violated!";
LABEL_310:
            *(void *)&long long v227 = &v223;
            v228 = v206;
            __int16 v230 = 770;
            uint64_t v207 = *(void *)v239;
            int v232 = 3;
            char v233 = 0;
            v231 = &unk_1F262D390;
            v234 = &v227;
            llvm::LLVMContext::diagnose(v207, (const llvm::DiagnosticInfo *)&v231);
            goto LABEL_262;
          }
        }
        else if (v108 != v107)
        {
          __int16 v226 = 1283;
          v223 = (uint64_t ***)"Linking COMDATs named '";
          v224 = (char *)v92;
          size_t v225 = v50;
          v206 = "': SameSize violated!";
          goto LABEL_310;
        }
        int v65 = 0;
      }
      uint64_t v39 = v249;
      int v40 = v251;
    }
    else
    {
      int v65 = 1;
      v66 = (size_t **)(v37 + 8);
    }
LABEL_87:
    *(void *)&long long v227 = v66;
    if (v40)
    {
      unsigned int v67 = (v40 - 1) & ((v66 >> 4) ^ (v66 >> 9));
      v68 = (void *)(v39 + 16 * v67);
      uint64_t v69 = *v68;
      if (v66 == (size_t **)*v68)
      {
LABEL_100:
        *((_DWORD *)v68 + 2) = v46;
        *((_DWORD *)v68 + 3) = v65;
        if (v65 == 1)
        {
          uint64_t v75 = *((unsigned int *)v216 + 32);
          if (v75)
          {
            v76 = (unsigned __int8 *)(*v66 + 9);
            size_t v77 = **v66;
            if (v77)
            {
              int v78 = 0;
              size_t v79 = v77;
              v80 = v76;
              do
              {
                int v81 = *v80++;
                int v78 = 33 * v78 + v81;
                --v79;
              }
              while (v79);
            }
            else
            {
              int v78 = 0;
            }
            uint64_t v82 = *((void *)v216 + 15);
            int v83 = 1;
            int v84 = v78;
            while (1)
            {
              uint64_t v85 = v84 & (v75 - 1);
              v86 = *(void **)(v82 + 8 * v85);
              if (v86 != (void *)-8)
              {
                if (!v86) {
                  goto LABEL_116;
                }
                if (*(_DWORD *)(v82 + 8 * v75 + 8 + 4 * v85) == v78
                  && v77 == *v86
                  && (!v77 || !memcmp(v76, (char *)v86 + *((unsigned int *)v216 + 35), v77)))
                {
                  break;
                }
              }
              int v84 = v83 + v85;
              ++v83;
            }
            if (v85 != -1 && (int)v85 != v75)
            {
              v223 = 0;
              v223 = (uint64_t ***)(*(void *)(v82 + 8 * (int)v85) + 8);
              sub_1CD4201D0((uint64_t)v221, &v223, (uint64_t)&v227);
            }
          }
        }
        goto LABEL_116;
      }
      v70 = 0;
      int v71 = 1;
      while (v69 != -4096)
      {
        if (v70) {
          BOOL v72 = 0;
        }
        else {
          BOOL v72 = v69 == -8192;
        }
        if (v72) {
          v70 = v68;
        }
        unsigned int v73 = v67 + v71++;
        unsigned int v67 = v73 & (v40 - 1);
        v68 = (void *)(v39 + 16 * v67);
        uint64_t v69 = *v68;
        if (v66 == (size_t **)*v68) {
          goto LABEL_100;
        }
      }
      if (v70) {
        v74 = v70;
      }
      else {
        v74 = v68;
      }
    }
    else
    {
      v74 = 0;
    }
    v68 = sub_1CCB9BC08((uint64_t)&v249, (uint64_t *)&v227, v74);
    void *v68 = v66;
    v68[1] = 0;
    goto LABEL_100;
  }
LABEL_15:
  uint64_t v10 = (llvm::Module *)*((void *)v216 + 6);
  if (v10 != (llvm::Module *)((char *)v216 + 40))
  {
    do
    {
      uint64_t v11 = (llvm::Module *)*((void *)v10 + 1);
      if (v10) {
        unsigned int v12 = (const char **)((char *)v10 - 48);
      }
      else {
        unsigned int v12 = 0;
      }
      sub_1CCB9AF58(v12, v221);
      uint64_t v10 = v11;
    }
    while (v11 != (llvm::Module *)((char *)v216 + 40));
  }
  v13 = (llvm::Module *)*((void *)v216 + 2);
  if (v13 != (llvm::Module *)((char *)v216 + 8))
  {
    do
    {
      int v14 = (llvm::Module *)*((void *)v13 + 1);
      if (v13) {
        BOOL v15 = (const char **)((char *)v13 - 56);
      }
      else {
        BOOL v15 = 0;
      }
      sub_1CCB9AF58(v15, v221);
      v13 = v14;
    }
    while (v14 != (llvm::Module *)((char *)v216 + 8));
  }
  unsigned int v16 = (llvm::Module *)*((void *)v216 + 4);
  if (v16 != (llvm::Module *)((char *)v216 + 24))
  {
    do
    {
      uint64_t v17 = (llvm::Module *)*((void *)v16 + 1);
      if (v16) {
        uint64_t v18 = (const char **)((char *)v16 - 56);
      }
      else {
        uint64_t v18 = 0;
      }
      sub_1CCB9AF58(v18, v221);
      unsigned int v16 = v17;
    }
    while (v17 != (llvm::Module *)((char *)v216 + 24));
  }
  unsigned int v19 = v239;
  unsigned int v20 = (char *)v239 + 8;
  uint64_t v21 = (char *)*((void *)v239 + 2);
  if (v21 != (char *)v239 + 8)
  {
    do
    {
      if (v21) {
        uint64_t v22 = v21 - 56;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((*((_DWORD *)v22 + 8) & 0xE) == 2)
      {
        *(void *)&long long v227 = *((void *)v22 + 6);
        if ((void)v227)
        {
          unsigned int v23 = sub_1CD4F7F5C((uint64_t)&v252, (uint64_t *)&v227);
          uint64_t v24 = v23;
          unsigned int v26 = (char **)v23[2];
          unint64_t v25 = v23[3];
          if ((unint64_t)v26 >= v25)
          {
            unsigned int v28 = (void *)v23[1];
            uint64_t v29 = v26 - (char **)v28;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
LABEL_312:
            }
              abort();
            uint64_t v31 = v25 - (void)v28;
            if (v31 >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              if (v32 >> 61) {
LABEL_313:
              }
                sub_1CB833614();
              unsigned int v33 = (char *)operator new(8 * v32);
            }
            else
            {
              unsigned int v33 = 0;
            }
            unsigned int v34 = &v33[8 * v29];
            *(void *)unsigned int v34 = v22;
            unsigned int v27 = v34 + 8;
            if (v26 != v28)
            {
              do
              {
                uint64_t v35 = (uint64_t)*--v26;
                *((void *)v34 - 1) = v35;
                v34 -= 8;
              }
              while (v26 != v28);
              unsigned int v26 = (char **)v24[1];
            }
            v24[1] = v34;
            v24[2] = v27;
            v24[3] = &v33[8 * v32];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *unsigned int v26 = v22;
            unsigned int v27 = v26 + 1;
          }
          v24[2] = v27;
        }
      }
      uint64_t v21 = (char *)*((void *)v21 + 1);
    }
    while (v21 != v20);
    unsigned int v19 = v239;
  }
  v109 = (char *)v19 + 24;
  v110 = (char *)*((void *)v19 + 4);
  if (v110 != (char *)v19 + 24)
  {
    do
    {
      if (v110) {
        v111 = v110 - 56;
      }
      else {
        v111 = 0;
      }
      if ((*((_DWORD *)v111 + 8) & 0xE) == 2)
      {
        *(void *)&long long v227 = *((void *)v111 + 6);
        if ((void)v227)
        {
          v112 = sub_1CD4F7F5C((uint64_t)&v252, (uint64_t *)&v227);
          v113 = v112;
          v115 = (char **)v112[2];
          unint64_t v114 = v112[3];
          if ((unint64_t)v115 >= v114)
          {
            v117 = (void *)v112[1];
            uint64_t v118 = v115 - (char **)v117;
            unint64_t v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 61) {
              goto LABEL_312;
            }
            uint64_t v120 = v114 - (void)v117;
            if (v120 >> 2 > v119) {
              unint64_t v119 = v120 >> 2;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v119;
            }
            if (v121)
            {
              if (v121 >> 61) {
                goto LABEL_313;
              }
              v122 = (char *)operator new(8 * v121);
            }
            else
            {
              v122 = 0;
            }
            v123 = &v122[8 * v118];
            *(void *)v123 = v111;
            v116 = v123 + 8;
            if (v115 != v117)
            {
              do
              {
                uint64_t v124 = (uint64_t)*--v115;
                *((void *)v123 - 1) = v124;
                v123 -= 8;
              }
              while (v115 != v117);
              v115 = (char **)v113[1];
            }
            v113[1] = v123;
            v113[2] = v116;
            v113[3] = &v122[8 * v121];
            if (v115) {
              operator delete(v115);
            }
          }
          else
          {
            *v115 = v111;
            v116 = v115 + 1;
          }
          v113[2] = v116;
        }
      }
      v110 = (char *)*((void *)v110 + 1);
    }
    while (v110 != v109);
    unsigned int v19 = v239;
  }
  v125 = (char *)v19 + 40;
  v126 = (char *)*((void *)v19 + 6);
  if (v126 == (char *)v19 + 40) {
    goto LABEL_212;
  }
  do
  {
    uint64_t AliaseeObject = (uint64_t)(v126 - 48);
    if (v126) {
      v128 = (llvm::GlobalAlias *)(v126 - 48);
    }
    else {
      v128 = 0;
    }
    if ((*((_DWORD *)v128 + 8) & 0xE) == 2)
    {
      *(void *)&long long v227 = 0;
      int v129 = *((unsigned __int8 *)v128 + 16);
      if (v126 && v129 == 1)
      {
        uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v128);
        if (!AliaseeObject) {
          goto LABEL_190;
        }
      }
      else if (v129 == 2)
      {
        goto LABEL_190;
      }
      *(void *)&long long v227 = *(void *)(AliaseeObject + 48);
      if ((void)v227)
      {
        v130 = sub_1CD4F7F5C((uint64_t)&v252, (uint64_t *)&v227);
        v131 = v130;
        v133 = (llvm::GlobalAlias **)v130[2];
        unint64_t v132 = v130[3];
        if ((unint64_t)v133 >= v132)
        {
          v135 = (void *)v130[1];
          uint64_t v136 = v133 - (llvm::GlobalAlias **)v135;
          unint64_t v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 61) {
            goto LABEL_312;
          }
          uint64_t v138 = v132 - (void)v135;
          if (v138 >> 2 > v137) {
            unint64_t v137 = v138 >> 2;
          }
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v139 = v137;
          }
          if (v139)
          {
            if (v139 >> 61) {
              goto LABEL_313;
            }
            v140 = (char *)operator new(8 * v139);
          }
          else
          {
            v140 = 0;
          }
          v141 = &v140[8 * v136];
          *(void *)v141 = v128;
          v134 = v141 + 8;
          if (v133 != v135)
          {
            do
            {
              uint64_t v142 = (uint64_t)*--v133;
              *((void *)v141 - 1) = v142;
              v141 -= 8;
            }
            while (v133 != v135);
            v133 = (llvm::GlobalAlias **)v131[1];
          }
          v131[1] = v141;
          v131[2] = v134;
          v131[3] = &v140[8 * v139];
          if (v133) {
            operator delete(v133);
          }
        }
        else
        {
          *v133 = v128;
          v134 = v133 + 1;
        }
        v131[2] = v134;
      }
    }
LABEL_190:
    v126 = (char *)*((void *)v126 + 1);
  }
  while (v126 != v125);
  unsigned int v19 = v239;
LABEL_212:
  v219 = v221;
  uint64_t v220 = 0;
  v143 = (char *)v19 + 8;
  v144 = (char *)*((void *)v19 + 2);
  if (v144 == (char *)v19 + 8) {
    goto LABEL_219;
  }
  while (1)
  {
    uint64_t v145 = v144 ? (uint64_t)(v144 - 56) : 0;
    if (sub_1CCB9B0F8((uint64_t)&v238, v145, (uint64_t)&v219)) {
      break;
    }
    v144 = (char *)*((void *)v144 + 1);
    if (v144 == v143)
    {
      unsigned int v19 = v239;
LABEL_219:
      v146 = (char *)v19 + 24;
      v147 = (char *)*((void *)v19 + 4);
      if (v147 != (char *)v19 + 24)
      {
        do
        {
          if (v147) {
            uint64_t v148 = (uint64_t)(v147 - 56);
          }
          else {
            uint64_t v148 = 0;
          }
          if (sub_1CCB9B0F8((uint64_t)&v238, v148, (uint64_t)&v219)) {
            goto LABEL_260;
          }
          v147 = (char *)*((void *)v147 + 1);
        }
        while (v147 != v146);
        unsigned int v19 = v239;
      }
      v149 = (char *)v19 + 40;
      v150 = (char *)*((void *)v19 + 6);
      if (v150 != (char *)v19 + 40)
      {
        do
        {
          if (v150) {
            uint64_t v151 = (uint64_t)(v150 - 48);
          }
          else {
            uint64_t v151 = 0;
          }
          if (sub_1CCB9B0F8((uint64_t)&v238, v151, (uint64_t)&v219)) {
            goto LABEL_260;
          }
          v150 = (char *)*((void *)v150 + 1);
        }
        while (v150 != v149);
        unsigned int v19 = v239;
      }
      v152 = (char *)v19 + 56;
      for (uint64_t j = *((void *)v19 + 8); (char *)j != v152; uint64_t j = *(void *)(j + 8))
      {
        if (j) {
          uint64_t v154 = j - 56;
        }
        else {
          uint64_t v154 = 0;
        }
        if (sub_1CCB9B0F8((uint64_t)&v238, v154, (uint64_t)&v219)) {
          goto LABEL_260;
        }
      }
      if (v220)
      {
        v168 = (char *)v219;
        v169 = (char *)v219 + 8 * v220;
        do
        {
          v170 = *(const llvm::GlobalObject **)v168;
          if (*(void *)v168) {
            BOOL v171 = *(unsigned char *)(*(void *)v168 + 16) == 3;
          }
          else {
            BOOL v171 = 0;
          }
          if (v171)
          {
            v180 = (char *)operator new(0x78uLL);
            *((_DWORD *)v180 + 13) = *((_DWORD *)v180 + 13) & 0x38000000 | 1;
            *(void *)v180 = 0;
            *((void *)v180 + 1) = 0;
            *((void *)v180 + 2) = 0;
            *((void *)v180 + 3) = v180 + 32;
            uint64_t v181 = *((void *)v170 + 5);
            v182 = (llvm::PointerType *)*((void *)v170 + 3);
            char v183 = *((unsigned char *)v170 + 80) & 1;
            char v184 = *((_DWORD *)v170 + 8) & 0xF;
            unint64_t v185 = *((void *)v170 - 4);
            __int16 v230 = 257;
            v186 = llvm::GlobalVariable::GlobalVariable((unint64_t *)v180 + 4, v181, v182, v183, v184, v185, (const char **)&v227, 0, 0, 0, 0);
            llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v186, v170);
            v180[112] = v180[112] & 0xFD | *((unsigned char *)v170 + 80) & 2;
            *((void *)v180 + 13) = *((void *)v170 + 9);
            *((_DWORD *)v180 + 16) = *((_DWORD *)v180 + 16) & 0xFFFFBFC0 | 0x4008;
            llvm::GlobalObject::setComdat((llvm::GlobalObject *)(v180 + 32), *((llvm::Comdat **)v170 + 6));
            if (*((llvm::Module **)v170 + 5) != *v238)
            {
              *(void *)&long long v227 = v180 + 32;
              sub_1CC9146E4(v240, &v227);
            }
          }
          else
          {
            if ((*((unsigned char *)v170 + 23) & 0x10) != 0)
            {
              uint64_t v172 = ***(void ***)v170;
              uint64_t v173 = *(void *)(v172 + 152);
              uint64_t v174 = *(unsigned int *)(v172 + 168);
              if (v174)
              {
                LODWORD(v175) = (v174 - 1) & ((v170 >> 4) ^ (v170 >> 9));
                v176 = (const llvm::GlobalObject **)(v173 + 16 * v175);
                v177 = *v176;
                if (*v176 != v170)
                {
                  int v178 = 1;
                  do
                  {
                    if (v177 == (const llvm::GlobalObject *)-4096) {
                      goto LABEL_285;
                    }
                    int v179 = v175 + v178++;
                    uint64_t v175 = v179 & (v174 - 1);
                    v177 = *(const llvm::GlobalObject **)(v173 + 16 * v175);
                  }
                  while (v177 != v170);
                  v176 = (const llvm::GlobalObject **)(v173 + 16 * v175);
                }
              }
              else
              {
LABEL_285:
                v176 = (const llvm::GlobalObject **)(v173 + 16 * v174);
              }
              v187 = v176[1];
              size_t v190 = *(void *)v187;
              v189 = (char *)v187 + 16;
              size_t v188 = v190;
            }
            else
            {
              size_t v188 = 0;
              v189 = &byte_1CFBCE98E;
            }
            __int16 v226 = 1283;
            v223 = (uint64_t ***)"linking '";
            v224 = v189;
            size_t v225 = v188;
            *(void *)&long long v227 = &v223;
            v228 = "': non-variables in comdat nodeduplicate are not handled";
            __int16 v230 = 770;
            uint64_t v191 = *(void *)v239;
            int v232 = 3;
            char v233 = 0;
            v231 = &unk_1F262D390;
            v234 = &v227;
            llvm::LLVMContext::diagnose(v191, (const llvm::DiagnosticInfo *)&v231);
          }
          v168 += 8;
        }
        while (v168 != v169);
      }
      v155 = v243;
      v156 = v243;
      if (v243 == __p) {
        goto LABEL_307;
      }
      uint64_t v157 = 0;
      unsigned int v158 = 0;
      v156 = (uint64_t ****)__p;
      while (2)
      {
        uint64_t v159 = (uint64_t)v156[v157];
        int v160 = *(unsigned __int8 *)(v159 + 16);
        if (v159) {
          BOOL v161 = v160 == 1;
        }
        else {
          BOOL v161 = 0;
        }
        if (v161)
        {
          uint64_t v159 = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v159);
          if (v159) {
            goto LABEL_248;
          }
        }
        else if (v160 != 2)
        {
LABEL_248:
          *(void *)&long long v227 = *(void *)(v159 + 48);
          if ((void)v227)
          {
            v162 = sub_1CD4F7F5C((uint64_t)&v252, (uint64_t *)&v227);
            v163 = (uint64_t ****)v162[1];
            v164 = (uint64_t ****)v162[2];
            while (v163 != v164)
            {
              v223 = 0;
              v223 = *v163;
              v165 = (llvm::GlobalValue *)sub_1CCB9B5A4((uint64_t)*v238, v223);
              LOBYTE(v231) = 1;
              if (!v165) {
                goto LABEL_256;
              }
              if (sub_1CCB9B66C((uint64_t)&v238, (BOOL *)&v231, v165, v223)) {
                goto LABEL_260;
              }
              if ((_BYTE)v231) {
LABEL_256:
              }
                sub_1CC9146E4(v240, &v223);
              ++v163;
            }
          }
        }
        v156 = (uint64_t ****)__p;
        v155 = v243;
        uint64_t v157 = ++v158;
        if (v158 >= (unint64_t)(((char *)v243 - (unsigned char *)__p) >> 3))
        {
          if (__p != v243 && v248)
          {
            do
            {
              v192 = *v156;
              if ((*((unsigned char *)*v156 + 23) & 0x10) != 0)
              {
                uint64_t v193 = ***v192;
                uint64_t v194 = *(void *)(v193 + 152);
                uint64_t v195 = *(unsigned int *)(v193 + 168);
                if (v195)
                {
                  LODWORD(v196) = (v195 - 1) & ((v192 >> 4) ^ (v192 >> 9));
                  v197 = (uint64_t ****)(v194 + 16 * v196);
                  v198 = *v197;
                  if (*v197 != v192)
                  {
                    int v199 = 1;
                    do
                    {
                      if (v198 == (uint64_t ***)-4096) {
                        goto LABEL_302;
                      }
                      int v200 = v196 + v199++;
                      uint64_t v196 = v200 & (v195 - 1);
                      v198 = *(uint64_t ****)(v194 + 16 * v196);
                    }
                    while (v198 != v192);
                    v197 = (uint64_t ****)(v194 + 16 * v196);
                  }
                }
                else
                {
LABEL_302:
                  v197 = (uint64_t ****)(v194 + 16 * v195);
                }
                v201 = v197[1];
                size_t v204 = (size_t)*v201;
                v202 = (unsigned __int8 *)(v201 + 2);
                size_t v203 = v204;
              }
              else
              {
                size_t v203 = 0;
                v202 = (unsigned __int8 *)&byte_1CFBCE98E;
              }
              sub_1CC0D7F54((llvm::StringMapImpl *)v246, v202, v203);
              ++v156;
            }
            while (v156 != v155);
            v156 = (uint64_t ****)__p;
            v155 = v243;
          }
LABEL_307:
          char v218 = 0;
          v205 = v239;
          v239 = 0;
          v217 = v205;
          *(void *)&long long v227 = &v238;
          v229 = (char *)off_1EC7DFA58 + 2;
          llvm::IRMover::move(v238, &v217, (uint64_t)v156, v155 - v156, &v227, 0);
        }
        continue;
      }
    }
  }
LABEL_260:
  if (v219 != v221) {
    free(v219);
  }
LABEL_262:
  MEMORY[0x1D25D9CD0](v221[0], 8);
  sub_1CD6A1B6C(v252, v254);
  MEMORY[0x1D25D9CD0](v252, 8);
  MEMORY[0x1D25D9CD0](v249, 8);
  if (v248 == v247)
  {
    (*(void (**)(void *))(v247[0] + 32))(v247);
  }
  else if (v248)
  {
    (*(void (**)(void))(*v248 + 40))();
  }
  sub_1CC0D7CD8((uint64_t)v246);
  if (__p)
  {
    v243 = (uint64_t ****)__p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v240[0], 8);
  v166 = v239;
  v239 = 0;
  if (v166)
  {
    llvm::Module::~Module(v166);
    MEMORY[0x1D25D9CE0]();
  }
  return 1;
}

uint64_t LLVMLinkModules2(llvm::Module *a1, llvm::Module *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  unint64_t v6 = 0;
  uint64_t v2 = llvm::Linker::linkModules(a1, &v4, 0, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  if (v4)
  {
    llvm::Module::~Module(v4);
    MEMORY[0x1D25D9CE0]();
  }
  return v2;
}

void sub_1CCB9AF58(const char **this, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 != 2)
  {
    uint64_t v4 = (llvm::GlobalAlias *)this;
    if (v2 != 1 || (this = (const char **)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)this)) != 0)
    {
      if (this[6])
      {
        v11[0] = this[6];
        uint64_t v13 = 0;
        if (sub_1CD420258(a2, v11, &v13))
        {
          if (*((void *)v4 + 1))
          {
            if (*((unsigned char *)v4 + 16) == 3)
            {
              llvm::GlobalVariable::setInitializer((uint64_t)v4, 0);
            }
            else
            {
              if (*((unsigned char *)v4 + 16))
              {
                unint64_t v5 = *((void *)v4 + 5);
                unint64_t v6 = (llvm::PointerType *)*((void *)v4 + 3);
                if (v6 && *((unsigned char *)v6 + 8) == 14)
                {
                  __int16 v12 = 257;
                  uint64_t v7 = (char *)operator new(0x80uLL);
                  uint64_t v8 = (int32x2_t ****)(v7 + 8);
                  *((_DWORD *)v7 + 7) = *((_DWORD *)v7 + 7) & 0x38000000 | 0x40000000;
                  *(void *)uint64_t v7 = 0;
                  llvm::Function::Function((unint64_t *)v7 + 1, v6, 0, (llvm::Type *)0xFFFFFFFFLL, v11, v5);
                }
                else
                {
                  int v9 = (char *)operator new(0x78uLL);
                  uint64_t v8 = (int32x2_t ****)(v9 + 32);
                  *((_DWORD *)v9 + 13) = *((_DWORD *)v9 + 13) & 0x38000000 | 1;
                  *(void *)int v9 = 0;
                  *((void *)v9 + 1) = 0;
                  *((void *)v9 + 2) = 0;
                  *((void *)v9 + 3) = v9 + 32;
                  uint64_t v10 = (llvm::PointerType *)*((void *)v4 + 3);
                  __int16 v12 = 257;
                  llvm::GlobalVariable::GlobalVariable((unint64_t *)v9 + 4, v5, v10, 0, 0, 0, v11, 0, 0, 0, 0);
                }
                llvm::Value::takeName(v8, v4);
                llvm::Value::doRAUW(v4, (llvm::Value *)v8, (llvm::Value *)1);
                llvm::GlobalAlias::eraseFromParent(v4);
              }
              sub_1CD660DD8(v4);
            }
          }
          else
          {
            llvm::GlobalValue::eraseFromParent(v4);
          }
        }
      }
    }
  }
}

uint64_t sub_1CCB9B0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1CCB9B5A4(**(void **)a1, (uint64_t ***)a2);
  uint64_t v7 = (llvm::GlobalValue *)v6;
  int v8 = *(_DWORD *)(a1 + 64);
  if ((v8 & 2) != 0)
  {
    int v9 = *(_DWORD *)(a2 + 32) & 0xF;
    if (v9 != 6)
    {
      if (!v6) {
        return 0;
      }
      if (*(unsigned char *)(v6 + 16))
      {
        if (*(unsigned char *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0) {
          return 0;
        }
      }
      else if (*(void *)(v6 + 72) != v6 + 72 || (*(unsigned char *)(v6 + 34) & 0x80) != 0)
      {
        return 0;
      }
LABEL_5:
      if ((v9 - 6) < 3)
      {
LABEL_85:
        char v18 = 1;
        goto LABEL_86;
      }
      int v10 = *(unsigned __int8 *)(v6 + 16);
      int v11 = *(unsigned __int8 *)(a2 + 16);
      if (v11 == 3) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = 0;
      }
      BOOL v13 = v10 == 3;
      if (v10 == 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 0;
      }
      if (!v13 || v11 != 3)
      {
LABEL_56:
        unsigned int v33 = *(_DWORD *)(v6 + 32);
        int v34 = (v33 >> 4) & 3;
        int v35 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
        if (v35 == 2 || v34 == 2) {
          int v37 = 32;
        }
        else {
          int v37 = 0;
        }
        if (v35 == 1 || v34 == 1) {
          int v39 = 16;
        }
        else {
          int v39 = v37;
        }
        unsigned int v40 = v39 | v33 & 0xFFFFFFCF;
        *(_DWORD *)(v6 + 32) = v40;
        if ((v33 & 0xF) - 7 >= 2)
        {
          if (!v39 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) != 0) {
            goto LABEL_70;
          }
          unsigned int v40 = *((_DWORD *)v7 + 8);
        }
        *((_DWORD *)v7 + 8) = v40 | 0x4000;
LABEL_70:
        int v41 = *(_DWORD *)(a2 + 32);
        unsigned int v42 = v41 & 0xFFFFFFCF | v39;
        *(_DWORD *)(a2 + 32) = v42;
        if ((v41 & 0xFu) - 7 < 2
          || v39
          && (char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2),
              unsigned int v42 = *(_DWORD *)(a2 + 32),
              (hasExternalWeakLinkage & 1) == 0))
        {
          v42 |= 0x4000u;
          *(_DWORD *)(a2 + 32) = v42;
        }
        int v43 = *((_DWORD *)v7 + 8);
        int v44 = v42 >> 6;
        if (v43 >> 6 == 1 || v44 == 1) {
          int v46 = 64;
        }
        else {
          int v46 = 128;
        }
        if (v43 >> 6) {
          BOOL v47 = v44 == 0;
        }
        else {
          BOOL v47 = 1;
        }
        if (v47) {
          int v48 = 0;
        }
        else {
          int v48 = v46;
        }
        *((_DWORD *)v7 + 8) = v48 | v43 & 0xFFFFFF3F;
        *(_DWORD *)(a2 + 32) = v48 | *(_DWORD *)(a2 + 32) & 0xFFFFFF3F;
        goto LABEL_85;
      }
      if (v14) {
        BOOL v16 = *(unsigned char *)(v14 + 16) == 3;
      }
      else {
        BOOL v16 = 0;
      }
      if (v16)
      {
        if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) != 0) {
          goto LABEL_40;
        }
      }
      else if (*(unsigned char *)(v14 + 16) || *(void *)(v14 + 72) != v14 + 72 || (*(unsigned char *)(v14 + 34) & 0x80) != 0)
      {
        goto LABEL_40;
      }
      if (*(unsigned char *)(v12 + 16))
      {
        if (*(unsigned char *)(v12 + 16) == 3 && (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_114;
        }
      }
      else if (*(void *)(v12 + 72) == v12 + 72 && (*(unsigned char *)(v12 + 34) & 0x80) == 0)
      {
LABEL_114:
        if ((*(unsigned char *)(v14 + 80) & 1) == 0 || (*(unsigned char *)(v12 + 80) & 1) == 0)
        {
          *(unsigned char *)(v14 + 80) &= ~1u;
          *(unsigned char *)(v12 + 80) &= ~1u;
        }
      }
LABEL_40:
      int v24 = *(_DWORD *)(v14 + 32);
      if ((v24 & 0xF) == 0xA)
      {
        int v25 = *(_DWORD *)(v12 + 32);
        if ((v25 & 0xF) == 0xA)
        {
          char v26 = (BYTE2(v25) & 0x3F) - 1;
          if ((v25 & 0x3F0000) == 0) {
            char v26 = 0;
          }
          unint64_t v27 = 1 << v26;
          if ((v25 & 0x3F0000) == 0) {
            unint64_t v27 = 0;
          }
          BOOL v28 = (v24 & 0x3F0000) == 0;
          char v29 = (BYTE2(v24) & 0x3F) - 1;
          if (v28) {
            char v29 = 0;
          }
          unint64_t v30 = 1 << v29;
          if (v28) {
            unint64_t v30 = 0;
          }
          if (v30 <= v27) {
            unint64_t v30 = v27;
          }
          unsigned int v31 = (__clz(__rbit64(v30)) << 16) + 0x10000;
          if (v30) {
            unsigned int v32 = v31;
          }
          else {
            unsigned int v32 = 0;
          }
          *(_DWORD *)(v12 + 32) = v32 | v25 & 0xFFC0FFFF;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFC0FFFF | v32;
        }
      }
      goto LABEL_56;
    }
  }
  if (v6)
  {
    int v9 = *(_DWORD *)(a2 + 32) & 0xF;
    goto LABEL_5;
  }
  if (v8)
  {
    char v18 = 0;
    goto LABEL_86;
  }
  int v17 = *(_DWORD *)(a2 + 32);
  if ((v17 & 0xE) == 2) {
    return 0;
  }
  char v18 = 0;
  uint64_t result = 0;
  unsigned int v20 = v17 & 0xF;
  BOOL v21 = v20 > 8;
  int v22 = (1 << v20) & 0x182;
  if (v21 || v22 == 0)
  {
LABEL_86:
    int v49 = *(unsigned __int8 *)(a2 + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      if (v49 != 3)
      {
        if (v49 == 2) {
          goto LABEL_118;
        }
        uint64_t AliaseeObject = a2;
        if (v49 == 1)
        {
          uint64_t AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a2);
          if (!AliaseeObject) {
            goto LABEL_118;
          }
        }
        goto LABEL_95;
      }
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0) {
        return 0;
      }
    }
    else if (*(void *)(a2 + 72) == a2 + 72 && (*(unsigned char *)(a2 + 34) & 0x80) == 0)
    {
      return 0;
    }
    uint64_t AliaseeObject = a2;
LABEL_95:
    uint64_t v51 = *(void *)(AliaseeObject + 48);
    uint64_t v58 = v51;
    if (v51)
    {
      uint64_t v52 = *(void *)(a1 + 136);
      int v59 = 0;
      if (sub_1CBB0BF40(v52, *(_DWORD *)(a1 + 152), v51, &v59))
      {
        int v53 = *((_DWORD *)v59 + 3);
        if (!v53) {
          return 0;
        }
LABEL_119:
        LOBYTE(v58) = 1;
        if ((v18 & 1) == 0) {
          goto LABEL_128;
        }
        if (sub_1CCB9B66C(a1, (BOOL *)&v58, v7, (uint64_t ***)a2)) {
          return 1;
        }
        int v56 = v58;
        if (v53 == 2)
        {
          if (!(_BYTE)v58) {
            uint64_t v7 = (llvm::GlobalValue *)a2;
          }
          unsigned int v57 = *(_DWORD *)(a3 + 8);
          if (v57 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)a3 + 8 * v57) = v7;
          ++*(_DWORD *)(a3 + 8);
        }
        if (v56)
        {
LABEL_128:
          int v59 = (void *)a2;
          sub_1CC9146E4((void *)(a1 + 16), &v59);
        }
        return 0;
      }
      v54 = sub_1CCB9BC08(a1 + 136, &v58, v59);
      void *v54 = v51;
      v54[1] = 0;
      return 0;
    }
LABEL_118:
    int v53 = 0;
    goto LABEL_119;
  }
  return result;
}

uint64_t sub_1CCB9B5A4(uint64_t a1, uint64_t ***a2)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0 || (a2[4] & 0xFu) - 7 < 2) {
    return 0;
  }
  uint64_t v3 = ***a2;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(unsigned int *)(v3 + 168);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
    int v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_12;
    }
    int v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      int v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_12;
      }
    }
  }
  uint64_t v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_12:
  uint64_t result = llvm::Module::getNamedValue(a1, (unsigned __int8 *)v7[1] + 16, (unint64_t)*v7[1]);
  if (result)
  {
    if ((*(_DWORD *)(result + 32) & 0xFu) - 7 < 2) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CCB9B66C(uint64_t a1, BOOL *a2, llvm::GlobalValue *this, uint64_t ***a4)
{
  if (*(unsigned char *)(a1 + 64)) {
    goto LABEL_4;
  }
  int v6 = *((_DWORD *)a4 + 8);
  int v7 = v6 & 0xF;
  if (v7 == 6) {
    goto LABEL_4;
  }
  int v9 = *((_DWORD *)this + 8);
  unsigned int v10 = v9 & 0xF;
  if (v10 == 6) {
    goto LABEL_4;
  }
  if (v7 == 1)
  {
    if (v10 != 1)
    {
      if (*((unsigned char *)this + 16))
      {
        LOBYTE(v13) = *((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
      }
      else
      {
        BOOL v15 = (v9 & 0x800000) == 0;
        LOBYTE(v13) = *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) && v15;
      }
      goto LABEL_33;
    }
LABEL_20:
    LOBYTE(v13) = 1;
    goto LABEL_33;
  }
  if (*((unsigned char *)a4 + 16)) {
    BOOL v14 = *((unsigned char *)a4 + 16) == 3 && (*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 0;
  }
  else {
    BOOL v14 = a4[9] == (uint64_t **)(a4 + 9) && (v6 & 0x800000) == 0;
  }
  if (v10 == 1)
  {
    if (!v14) {
      goto LABEL_4;
    }
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 16)) {
    BOOL v13 = *((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  }
  else {
    BOOL v13 = *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) && (v9 & 0x800000) == 0;
  }
  if (v14)
  {
LABEL_33:
    if ((v6 & 0x300) == 0x100)
    {
      uint64_t result = 0;
      *a2 = v13;
      return result;
    }
    if (!llvm::GlobalValue::hasExternalWeakLinkage(this))
    {
      if (*((unsigned char *)a4 + 16))
      {
        if (*((unsigned char *)a4 + 16) == 3 && (*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_51;
        }
      }
      else if (a4[9] == (uint64_t **)(a4 + 9) && (*((unsigned char *)a4 + 34) & 0x80) == 0)
      {
        goto LABEL_51;
      }
      if (*((unsigned char *)this + 16))
      {
        if (*((unsigned char *)this + 16) == 3)
        {
          BOOL v16 = (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
          goto LABEL_63;
        }
      }
      else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
      {
        BOOL v16 = (*((unsigned char *)this + 34) & 0x80) == 0;
LABEL_63:
        BOOL v12 = v16;
        goto LABEL_66;
      }
LABEL_51:
      BOOL v12 = 0;
LABEL_66:
      uint64_t result = 0;
      goto LABEL_5;
    }
LABEL_4:
    uint64_t result = 0;
    BOOL v12 = 1;
LABEL_5:
    *a2 = v12;
    return result;
  }
  if (v13) {
    goto LABEL_4;
  }
  if ((v7 - 2) < 4 || v7 == 9)
  {
    if ((v6 & 0xE) == 4 && (v9 & 0xE) == 2) {
      goto LABEL_4;
    }
    goto LABEL_44;
  }
  if (v7 == 10)
  {
    if ((v9 & 0xE) == 4 || (v9 & 0xE) == 2) {
      goto LABEL_4;
    }
    if (v10 == 10)
    {
      int v17 = (llvm::Type *)*((void *)this + 3);
      char v18 = (llvm::DataLayout *)(*((void *)this + 5) + 272);
      unint64_t v19 = (unint64_t)(sub_1CB83544C((uint64_t)v18, (uint64_t)v17) + 7) >> 3;
      BOOL v21 = v20 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v18, v17, 1);
      uint64_t v24 = (1 << Alignment) + v19 - 1;
      uint64_t v25 = -(1 << Alignment);
      if (v21)
      {
        uint64_t v47 = -(1 << Alignment);
        uint64_t v25 = v47;
      }
      unint64_t v26 = v24 & v25;
      unint64_t v27 = (llvm::Type *)a4[3];
      unint64_t v28 = (unint64_t)(sub_1CB83544C((uint64_t)v18, (uint64_t)v27) + 7) >> 3;
      BOOL v30 = v29 == 1;
      char v31 = llvm::DataLayout::getAlignment(v18, v27, 1);
      unint64_t v33 = ((1 << v31) + v28 - 1) & -(1 << v31);
      if (v30) {
      uint64_t result = 0;
      }
      BOOL v12 = v33 > v26;
      goto LABEL_5;
    }
LABEL_44:
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  if (v10 <= 0xA)
  {
    BOOL v12 = 1;
    if (((1 << v10) & 0x63C) != 0) {
      goto LABEL_66;
    }
  }
  if ((*((unsigned char *)a4 + 23) & 0x10) == 0)
  {
    int v44 = 0;
    int v43 = &byte_1CFBCE98E;
    goto LABEL_78;
  }
  uint64_t v34 = ***a4;
  uint64_t v35 = *(void *)(v34 + 152);
  uint64_t v36 = *(unsigned int *)(v34 + 168);
  if (!v36) {
    goto LABEL_76;
  }
  LODWORD(v37) = (v36 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v38 = (uint64_t ****)(v35 + 16 * v37);
  int v39 = *v38;
  if (*v38 != a4)
  {
    int v40 = 1;
    while (v39 != (uint64_t ***)-4096)
    {
      int v41 = v37 + v40++;
      uint64_t v37 = v41 & (v36 - 1);
      int v39 = *(uint64_t ****)(v35 + 16 * v37);
      if (v39 == a4)
      {
        uint64_t v38 = (uint64_t ****)(v35 + 16 * v37);
        goto LABEL_77;
      }
    }
LABEL_76:
    uint64_t v38 = (uint64_t ****)(v35 + 16 * v36);
  }
LABEL_77:
  unsigned int v42 = v38[1];
  uint64_t v45 = *v42;
  int v43 = (char *)(v42 + 2);
  int v44 = v45;
LABEL_78:
  __int16 v49 = 1283;
  v48[0] = "Linking globals named '";
  v48[2] = v43;
  v48[3] = v44;
  v50[0] = v48;
  v50[2] = "': symbol multiply defined!";
  __int16 v51 = 770;
  uint64_t v46 = **(void **)(a1 + 8);
  int v53 = 3;
  char v54 = 0;
  uint64_t v52 = &unk_1F262D390;
  int v55 = v50;
  llvm::LLVMContext::diagnose(v46, (const llvm::DiagnosticInfo *)&v52);
  return 1;
}

uint64_t sub_1CCB9BADC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 **a5)
{
  NamedValue = (unsigned __int8 *)llvm::Module::getNamedValue(a2, a3, a4);
  if (!NamedValue) {
    goto LABEL_5;
  }
  int v10 = NamedValue[16];
  if (v10 == 1)
  {
    NamedValue = (unsigned __int8 *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)NamedValue);
    if (!NamedValue)
    {
      __int16 v18 = 1283;
      BOOL v15 = "Linking COMDATs named '";
      BOOL v16 = a3;
      unint64_t v17 = a4;
      BOOL v12 = "': COMDAT key involves incomputable alias size.";
      goto LABEL_6;
    }
    int v10 = NamedValue[16];
  }
  if (v10 != 3)
  {
LABEL_5:
    *a5 = 0;
    __int16 v18 = 1283;
    BOOL v15 = "Linking COMDATs named '";
    BOOL v16 = a3;
    unint64_t v17 = a4;
    BOOL v12 = "': GlobalVariable required for data dependent selection!";
LABEL_6:
    v19[0] = &v15;
    v19[2] = v12;
    __int16 v20 = 770;
    uint64_t v13 = **(void **)(a1 + 8);
    int v22 = 3;
    char v23 = 0;
    BOOL v21 = &unk_1F262D390;
    uint64_t v24 = v19;
    llvm::LLVMContext::diagnose(v13, (const llvm::DiagnosticInfo *)&v21);
    return 1;
  }
  uint64_t v11 = 0;
  *a5 = NamedValue;
  return v11;
}

void *sub_1CCB9BC08(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CCB9BCBC(a1, v6);
  int v8 = 0;
  sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CCB9BCBC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = (uint64_t *)(v4 + 8);
      do
      {
        uint64_t v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          __int16 v18 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          BOOL v15 = v18;
          uint64_t *v18 = v14;
          v15[1] = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CCB9BE0C(uint64_t *a1, llvm::GlobalAlias *AliaseeObject, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      unsigned int v42 = v41;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v41);
    }
    else
    {
      unsigned int v42 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    unsigned int v42 = 0;
  }
  uint64_t v6 = *a1;
  BOOL v7 = (*((_DWORD *)AliaseeObject + 8) & 0xE) == 2 || (*((_DWORD *)AliaseeObject + 8) & 0xF) == 1;
  if (!v7 && (*(unsigned char *)(v6 + 64) & 2) == 0) {
    goto LABEL_26;
  }
  if (*(void *)(v6 + 128))
  {
    if ((*((unsigned char *)AliaseeObject + 23) & 0x10) == 0)
    {
      size_t v18 = 0;
      uint64_t v17 = (unsigned __int8 *)&byte_1CFBCE98E;
      goto LABEL_21;
    }
    uint64_t v8 = ***(void ***)AliaseeObject;
    uint64_t v9 = *(void *)(v8 + 152);
    uint64_t v10 = *(unsigned int *)(v8 + 168);
    if (v10)
    {
      LODWORD(v11) = (v10 - 1) & ((AliaseeObject >> 4) ^ (AliaseeObject >> 9));
      uint64_t v12 = (llvm::GlobalAlias **)(v9 + 16 * v11);
      uint64_t v13 = *v12;
      if (*v12 == AliaseeObject)
      {
LABEL_20:
        uint64_t v16 = v12[1];
        size_t v19 = *(void *)v16;
        uint64_t v17 = (unsigned __int8 *)v16 + 16;
        size_t v18 = v19;
LABEL_21:
        sub_1CC0D7F54((llvm::StringMapImpl *)(v6 + 72), v17, v18);
        goto LABEL_22;
      }
      int v14 = 1;
      while (v13 != (llvm::GlobalAlias *)-4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v10 - 1);
        uint64_t v13 = *(llvm::GlobalAlias **)(v9 + 16 * v11);
        if (v13 == AliaseeObject)
        {
          uint64_t v12 = (llvm::GlobalAlias **)(v9 + 16 * v11);
          goto LABEL_20;
        }
      }
    }
    uint64_t v12 = (llvm::GlobalAlias **)(v9 + 16 * v10);
    goto LABEL_20;
  }
LABEL_22:
  if (!v42) {
LABEL_52:
  }
    sub_1CB920400();
  (*(void (**)(void *, llvm::GlobalAlias *))(*v42 + 48))(v42, AliaseeObject);
  int v20 = *((unsigned __int8 *)AliaseeObject + 16);
  if (v20 != 2
    && (v20 != 1 || (uint64_t AliaseeObject = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(AliaseeObject)) != 0))
  {
    uint64_t v40 = *((void *)AliaseeObject + 6);
    if (v40)
    {
      int v22 = sub_1CD4F7F5C(v6 + 160, &v40);
      char v23 = (uint64_t ****)v22[1];
      uint64_t v24 = (uint64_t ****)v22[2];
      if (v23 != v24)
      {
        while (1)
        {
          uint64_t v25 = *v23;
          unint64_t v26 = (llvm::GlobalValue *)sub_1CCB9B5A4(**(void **)v6, *v23);
          char v39 = 1;
          if (!v26) {
            break;
          }
          if (sub_1CCB9B66C(v6, (BOOL *)&v39, v26, v25)) {
            goto LABEL_26;
          }
          if (v39) {
            break;
          }
LABEL_48:
          if (++v23 == v24) {
            goto LABEL_26;
          }
        }
        if (!*(void *)(v6 + 128))
        {
LABEL_46:
          if (!v42) {
            goto LABEL_52;
          }
          (*(void (**)(void *, uint64_t ***))(*v42 + 48))(v42, v25);
          goto LABEL_48;
        }
        if ((*((unsigned char *)v25 + 23) & 0x10) == 0)
        {
          size_t v37 = 0;
          uint64_t v36 = (unsigned __int8 *)&byte_1CFBCE98E;
          goto LABEL_45;
        }
        uint64_t v27 = ***v25;
        uint64_t v28 = *(void *)(v27 + 152);
        uint64_t v29 = *(unsigned int *)(v27 + 168);
        if (v29)
        {
          LODWORD(v30) = (v29 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          char v31 = (uint64_t ****)(v28 + 16 * v30);
          unsigned int v32 = *v31;
          if (*v31 == v25)
          {
LABEL_44:
            uint64_t v35 = v31[1];
            size_t v38 = (size_t)*v35;
            uint64_t v36 = (unsigned __int8 *)(v35 + 2);
            size_t v37 = v38;
LABEL_45:
            sub_1CC0D7F54((llvm::StringMapImpl *)(v6 + 72), v36, v37);
            goto LABEL_46;
          }
          int v33 = 1;
          while (v32 != (uint64_t ***)-4096)
          {
            int v34 = v30 + v33++;
            uint64_t v30 = v34 & (v29 - 1);
            unsigned int v32 = *(uint64_t ****)(v28 + 16 * v30);
            if (v32 == v25)
            {
              char v31 = (uint64_t ****)(v28 + 16 * v30);
              goto LABEL_44;
            }
          }
        }
        char v31 = (uint64_t ****)(v28 + 16 * v29);
        goto LABEL_44;
      }
    }
  }
LABEL_26:
  uint64_t result = (uint64_t)v42;
  if (v42 == v41) {
    return (*(uint64_t (**)(void *))(v41[0] + 32))(v41);
  }
  if (v42) {
    return (*(uint64_t (**)(void))(*v42 + 40))();
  }
  return result;
}

uint64_t sub_1CCB9C19C(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = **(void **)a3;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
    __int16 v12 = 260;
    uint64_t v11 = __p;
    int v14 = 3;
    char v15 = 0;
    uint64_t v13 = &unk_1F262D390;
    uint64_t v16 = &v11;
    llvm::LLVMContext::diagnose(v8, (const llvm::DiagnosticInfo *)&v13);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    **(unsigned char **)(a3 + 8) = 1;
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t llvm::ConstantPool::emitEntries(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8))
  {
    uint64_t v3 = (unsigned int *)result;
    (*(void (**)(uint64_t, void))(*(void *)a2 + 232))(a2, 0);
    uint64_t v4 = v3[2];
    if (v4)
    {
      uint64_t v5 = 32 * v4;
      uint64_t v6 = (unsigned int *)(*(void *)v3 + 16);
      do
      {
        (*(void (**)(uint64_t, void, void, uint64_t, void))(*(void *)a2 + 640))(a2, *v6, 0, 1, 0);
        (*(void (**)(uint64_t, void, void))(*(void *)a2 + 192))(a2, *((void *)v6 - 2), 0);
        (*(void (**)(uint64_t, void, void, void))(*(void *)a2 + 512))(a2, *((void *)v6 - 1), *v6, *((void *)v6 + 1));
        v6 += 8;
        v5 -= 32;
      }
      while (v5);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 232))(a2, 4);
    v3[2] = 0;
  }
  return result;
}

unint64_t llvm::ConstantPool::addEntry(uint64_t a1, unsigned char *a2, llvm::MCContext *this, int a4, uint64_t a5)
{
  if (*a2 == 1) {
    char v10 = a2;
  }
  else {
    char v10 = 0;
  }
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = *(void **)(a1 + 152);
  if (!v11) {
    goto LABEL_15;
  }
  uint64_t v12 = *((void *)v10 + 2);
  uint64_t v13 = (void *)(a1 + 152);
  do
  {
    uint64_t v14 = v11[4];
    BOOL v15 = v14 < v12;
    if (v14 >= v12) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = v11 + 1;
    }
    if (!v15) {
      uint64_t v13 = v11;
    }
    uint64_t v11 = (void *)*v16;
  }
  while (*v16);
  if (v13 != (void *)(a1 + 152) && v12 >= v13[4]) {
    return v13[5];
  }
LABEL_15:
  *(void *)&long long v38 = "tmp";
  __int16 v40 = 259;
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol(this, (const llvm::Twine *)&v38, 1);
  *(void *)&long long v38 = TempSymbol;
  *((void *)&v38 + 1) = a2;
  LODWORD(v39) = a4;
  *((void *)&v39 + 1) = a5;
  uint64_t v18 = *(unsigned int *)(a1 + 8);
  unint64_t v19 = *(void *)a1;
  if (v18 >= *(_DWORD *)(a1 + 12))
  {
    BOOL v37 = v19 + 32 * v18 > (unint64_t)&v38;
    if (v19 > (unint64_t)&v38 || !v37) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v20 = (_OWORD *)(v19 + 32 * *(unsigned int *)(a1 + 8));
  long long v21 = v39;
  *int v20 = v38;
  v20[1] = v21;
  ++*(_DWORD *)(a1 + 8);
  *((void *)this + 34) += 24;
  uint64_t v22 = *((void *)this + 24);
  if (((v22 + 7) & 0xFFFFFFFFFFFFFFF8) - v22 + 24 > *((void *)this + 25) - v22)
  {
    unsigned int v34 = *((_DWORD *)this + 54) >> 7;
    if (v34 >= 0x1E) {
      LOBYTE(v34) = 30;
    }
    uint64_t v35 = 4096 << v34;
    unint64_t v23 = (unint64_t)operator new(4096 << v34, (std::align_val_t)8uLL);
    unsigned int v36 = *((_DWORD *)this + 54);
    if (v36 >= *((_DWORD *)this + 55)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 26) + 8 * v36) = v23;
    ++*((_DWORD *)this + 54);
    *((void *)this + 25) = v23 + v35;
  }
  else
  {
    unint64_t v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 24) = v23 + 24;
  int v24 = *(unsigned __int8 *)(*((void *)this + 19) + 18) << 16;
  *(unsigned char *)unint64_t v23 = 2;
  *(_DWORD *)(v23 + 1) = v24 | (*(unsigned __int8 *)(v23 + 4) << 24);
  *(void *)(v23 + 8) = 0;
  *(void *)(v23 + 16) = TempSymbol;
  if (v10)
  {
    uint64_t v25 = (uint64_t *)*((void *)v10 + 2);
    uint64_t v27 = (uint64_t **)(a1 + 152);
    unint64_t v26 = *(uint64_t **)(a1 + 152);
    if (v26)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v28 = (uint64_t **)v26;
          uint64_t v29 = (uint64_t *)v26[4];
          if ((uint64_t)v29 <= (uint64_t)v25) {
            break;
          }
          unint64_t v26 = *v28;
          uint64_t v27 = v28;
          if (!*v28) {
            goto LABEL_27;
          }
        }
        if ((uint64_t)v29 >= (uint64_t)v25) {
          break;
        }
        unint64_t v26 = v28[1];
        if (!v26)
        {
          uint64_t v27 = v28 + 1;
          goto LABEL_27;
        }
      }
    }
    else
    {
      uint64_t v28 = (uint64_t **)(a1 + 152);
LABEL_27:
      uint64_t v30 = (uint64_t *)v28;
      uint64_t v28 = (uint64_t **)operator new(0x30uLL);
      v28[4] = v25;
      v28[5] = 0;
      *uint64_t v28 = 0;
      v28[1] = 0;
      v28[2] = v30;
      *uint64_t v27 = (uint64_t *)v28;
      uint64_t v31 = **(void **)(a1 + 144);
      unsigned int v32 = (uint64_t *)v28;
      if (v31)
      {
        *(void *)(a1 + 144) = v31;
        unsigned int v32 = *v27;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 152), v32);
      ++*(void *)(a1 + 160);
    }
    v28[5] = (uint64_t *)v23;
  }
  return v23;
}

BOOL llvm::ConstantPool::empty(llvm::ConstantPool *this)
{
  return *((_DWORD *)this + 2) == 0;
}

void llvm::ConstantPool::clearCache(llvm::ConstantPool *this)
{
  v1 = (void *)((char *)this + 152);
  sub_1CBB0D544(*((void **)this + 19));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

uint64_t llvm::AssemblerConstantPools::getConstantPool(llvm::AssemblerConstantPools *this, llvm::MCSection *a2)
{
  uint64_t v3 = sub_1CCB9C7A4((uint64_t)this, (uint64_t)a2);
  if (*((void *)this + 4) == v3) {
    return 0;
  }
  else {
    return v3 + 8;
  }
}

uint64_t sub_1CCB9C7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  if (!sub_1CD3C8538((uint64_t *)a1, &v4, &v5) || v5 == *(void *)a1 + 16 * *(unsigned int *)(a1 + 16)) {
    return *(void *)(a1 + 32);
  }
  else {
    return *(void *)(a1 + 24) + 176 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t llvm::AssemblerConstantPools::getOrCreateConstantPool(llvm::AssemblerConstantPools *this, llvm::MCSection *a2)
{
  uint64_t v3 = a2;
  return sub_1CCB9C838((uint64_t)this, &v3);
}

uint64_t sub_1CCB9C838(uint64_t a1, void *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*a2;
  uint64_t v47 = (void *)*a2;
  int v48 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v9 = (void *)(*(void *)a1 + 16 * v8);
    char v10 = (void *)*v9;
    if (v4 == (void *)*v9)
    {
LABEL_3:
      unsigned int v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      uint64_t v12 = *(void *)(a1 + 24);
      return v12 + 176 * v11 + 8;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v10 != (void *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v10 == (void *)-8192;
      }
      if (v16) {
        uint64_t v14 = v9;
      }
      int v17 = v8 + v15++;
      uint64_t v8 = v17 & v7;
      uint64_t v9 = (void *)(v6 + 16 * v8);
      char v10 = (void *)*v9;
      if (v4 == (void *)*v9) {
        goto LABEL_3;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v9;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  unint64_t v19 = sub_1CCB9CE80(a1, (uint64_t)&v47, (uint64_t *)&v47, v18);
  *unint64_t v19 = v47;
  *((_DWORD *)v19 + 2) = v48;
  memset(v51, 0, sizeof(v51));
  __int16 v49 = v51;
  uint64_t v50 = 0x400000000;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v52 = v53;
  int v20 = (void *)*a2;
  v53[2] = *(void **)a2;
  char v54 = v56;
  uint64_t v55 = 0x400000000;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  unsigned int v57 = &v58;
  uint64_t v22 = *(char **)(a1 + 32);
  unint64_t v21 = *(void *)(a1 + 40);
  if ((unint64_t)v22 >= v21)
  {
    unint64_t v26 = *(char **)(a1 + 24);
    unint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((v22 - v26) >> 4) + 1;
    if (v27 > 0x1745D1745D1745DLL) {
      abort();
    }
    unint64_t v28 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21 - (void)v26) >> 4);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v29 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29 > 0x1745D1745D1745DLL) {
      sub_1CB833614();
    }
    uint64_t v30 = 176 * v29;
    uint64_t v31 = (char *)operator new(176 * v29);
    unsigned int v32 = &v31[16 * ((v22 - v26) >> 4)];
    int v33 = &v31[v30];
    *(void *)unsigned int v32 = v20;
    *((void *)v32 + 1) = v32 + 24;
    *((void *)v32 + 2) = 0x400000000;
    *((void *)v32 + 21) = 0;
    *((void *)v32 + 20) = 0;
    *((void *)v32 + 19) = v32 + 160;
    unsigned int v34 = v32 + 176;
    if (v22 == v26)
    {
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(void *)(a1 + 40) = v33;
    }
    else
    {
      uint64_t v46 = v33;
      uint64_t v35 = 0;
      do
      {
        unsigned int v36 = &v32[v35];
        BOOL v37 = &v22[v35];
        uint64_t v38 = *(void *)&v22[v35 - 176];
        *(void *)&v32[v35 - 168] = &v32[v35 - 152];
        uint64_t v39 = (uint64_t)&v32[v35 - 168];
        *(void *)(v39 - 8) = v38;
        *(void *)(v39 + 8) = 0x400000000;
        if (*(_DWORD *)&v22[v35 - 160]) {
          sub_1CBC19ED8(v39, (uint64_t)(v37 - 168));
        }
        *((void *)v36 - 3) = *((void *)v37 - 3);
        __int16 v40 = v37 - 16;
        uint64_t v41 = *((void *)v37 - 2);
        *((void *)v36 - 2) = v41;
        unsigned int v42 = v36 - 16;
        uint64_t v43 = *((void *)v37 - 1);
        *((void *)v36 - 1) = v43;
        if (v43)
        {
          *(void *)(v41 + 16) = v42;
          *((void *)v37 - 3) = v40;
          *(void *)__int16 v40 = 0;
          *((void *)v37 - 1) = 0;
        }
        else
        {
          *((void *)v36 - 3) = v42;
        }
        v35 -= 176;
      }
      while (&v22[v35] != v26);
      uint64_t v22 = *(char **)(a1 + 24);
      int v44 = *(char **)(a1 + 32);
      *(void *)(a1 + 24) = &v32[v35];
      *(void *)(a1 + 32) = v34;
      for (*(void *)(a1 + 40) = v46; v44 != v22; v44 -= 176)
      {
        sub_1CBB0D544(*((void **)v44 - 2));
        uint64_t v45 = (char *)*((void *)v44 - 21);
        if (v44 - 152 != v45) {
          free(v45);
        }
      }
    }
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)uint64_t v22 = v20;
    *((void *)v22 + 1) = v22 + 24;
    *((void *)v22 + 2) = 0x400000000;
    if (v55) {
      sub_1CBC19ED8((uint64_t)(v22 + 8), (uint64_t)&v54);
    }
    *((void *)v22 + 19) = v57;
    unint64_t v23 = v58;
    *((void *)v22 + 20) = v58;
    int v24 = v22 + 160;
    uint64_t v25 = v59;
    *((void *)v22 + 21) = v59;
    if (v25)
    {
      v23[2] = v24;
      unsigned int v57 = &v58;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
    }
    else
    {
      *((void *)v22 + 19) = v24;
    }
    unsigned int v34 = v22 + 176;
  }
  *(void *)(a1 + 32) = v34;
  sub_1CBB0D544(v58);
  if (v54 != v56) {
    free(v54);
  }
  sub_1CBB0D544(v53[0]);
  if (v49 != v51) {
    free(v49);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  unsigned int v11 = -1171354717 * ((unint64_t)(*(void *)(a1 + 32) - v12) >> 4) - 1;
  *((_DWORD *)v19 + 2) = v11;
  return v12 + 176 * v11 + 8;
}

uint64_t llvm::AssemblerConstantPools::emitAll(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 24);
  for (uint64_t i = *(void *)(result + 32); v2 != i; v2 += 176)
  {
    if (*(_DWORD *)(v2 + 16))
    {
      (*(void (**)(uint64_t, void, void))(*(void *)a2 + 168))(a2, *(void *)v2, 0);
      uint64_t result = llvm::ConstantPool::emitEntries(v2 + 8, a2);
    }
  }
  return result;
}

uint64_t llvm::AssemblerConstantPools::emitForCurrentSection(llvm::AssemblerConstantPools *this, llvm::MCStreamer *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 30);
  if (v4) {
    uint64_t v5 = *(void *)(*((void *)a2 + 14) + 32 * v4 - 32);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t result = sub_1CCB9C7A4((uint64_t)this, v5);
  if (*((void *)this + 4) != result && *(_DWORD *)(result + 16))
  {
    uint64_t v7 = result + 8;
    (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 168))(a2, v5, 0);
    return llvm::ConstantPool::emitEntries(v7, (uint64_t)a2);
  }
  return result;
}

void llvm::AssemblerConstantPools::clearCacheForCurrentSection(llvm::AssemblerConstantPools *this, llvm::MCStreamer *a2)
{
  uint64_t v3 = *((unsigned int *)a2 + 30);
  if (v3) {
    uint64_t v4 = *(void *)(*((void *)a2 + 14) + 32 * v3 - 32);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = sub_1CCB9C7A4((uint64_t)this, v4);
  if (*((void *)this + 4) != v5)
  {
    uint64_t v6 = (void *)(v5 + 160);
    sub_1CBB0D544(*(void **)(v5 + 160));
    *(v6 - 1) = v6;
    *uint64_t v6 = 0;
    v6[1] = 0;
  }
}

unint64_t llvm::AssemblerConstantPools::addEntry(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a2 + 120);
  if (v9) {
    uint64_t v10 = *(void *)(*(void *)(a2 + 112) + 32 * v9 - 32);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v11 = sub_1CCB9C838(a1, &v14);
  uint64_t v12 = *(llvm::MCContext **)(a2 + 8);

  return llvm::ConstantPool::addEntry(v11, a3, v12, a4, a5);
}

void *sub_1CCB9CE80(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CCB9CFB4(a1, v7);
      int v17 = 0;
      sub_1CD40EE24((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1CCB9CFB4(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
    uint64_t v13 = 0;
    int v14 = 1;
    while (v11 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      a4 = (void *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a4;
      if (v8 == *a4) {
        goto LABEL_3;
      }
    }
    if (v13) {
      a4 = v13;
    }
  }
  uint64_t v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CCB9CFB4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6A1BCC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CCB9D08C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D4E8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  sub_1CD6A1DBC((unsigned int *)(a1 + 16));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1CCB9D12C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D4E8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  sub_1CD6A1DBC((unsigned int *)(a1 + 16));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

_DWORD *sub_1CCB9D1EC(uint64_t a1)
{
  *(unsigned char *)(a1 + 64) = 0;
  sub_1CD6A1E20((unsigned int *)(a1 + 16));

  return sub_1CD3C7F68((_DWORD *)(a1 + 40));
}

unint64_t sub_1CCB9D22C(unint64_t result, void *a2)
{
  uint64_t v2 = a2[270];
  unint64_t v55 = result;
  uint64_t v56 = a2[271];
  if (v2 != v56)
  {
    uint64_t v54 = result + 40;
    int v53 = (void **)(a2 + 7);
    while (1)
    {
      unint64_t v5 = *(unsigned __int8 ***)(v2 + 16);
      uint64_t v4 = *(unsigned __int8 ***)(v2 + 24);
      uint64_t v6 = *(void *)(v2 + 8);
      if (v4 && (int v7 = memchr(*(void **)(v2 + 16), 64, *(void *)(v2 + 24))) != 0) {
        unint64_t v8 = v7 - (unsigned char *)v5;
      }
      else {
        unint64_t v8 = -1;
      }
      if ((unint64_t)v4 >= v8) {
        int v9 = (unsigned __int8 **)v8;
      }
      else {
        int v9 = v4;
      }
      uint64_t v10 = (char *)v9 + (void)v5;
      unint64_t v11 = (char *)v4 - (char *)v9;
      if ((unint64_t)((char *)v4 - (char *)v9) >= 3)
      {
        BOOL v14 = *(_WORD *)v10 == 16448 && v10[2] == 64;
        uint64_t v12 = (char *)v9 + (void)v5;
        unint64_t v13 = (char *)v4 - (char *)v9;
        if (v14)
        {
          unint64_t AssociatedFragment = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
          if (!AssociatedFragment && (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v6 + 8) |= 4u;
            unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
            *(void *)uint64_t v6 = *(void *)v6 & 7 | AssociatedFragment;
          }
          if (AssociatedFragment) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = 2;
          }
          uint64_t v12 = &v10[v16];
          unint64_t v13 = v11 - v16;
        }
      }
      else
      {
        uint64_t v12 = (char *)v9 + (void)v5;
        unint64_t v13 = (char *)v4 - (char *)v9;
      }
      int v17 = (llvm::MCContext *)*a2;
      v60[0] = v5;
      v60[1] = v9;
      uint64_t v61 = v12;
      unint64_t v62 = v13;
      __int16 v63 = 1285;
      uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v17, v60);
      uint64_t v19 = Symbol;
      int v20 = *(_DWORD *)(Symbol + 8);
      if ((v20 & 8) == 0)
      {
        *(_DWORD *)(Symbol + 8) = v20 | 8;
        v60[0] = (unsigned __int8 **)Symbol;
        unint64_t v21 = (uint64_t *)a2[8];
        if ((unint64_t)v21 >= a2[9])
        {
          uint64_t v22 = sub_1CBC13470(v53, v60);
        }
        else
        {
          *unint64_t v21 = v19;
          uint64_t v22 = v21 + 1;
        }
        a2[8] = v22;
      }
      unint64_t v23 = (llvm::MCContext *)*a2;
      *((void *)v23 + 34) = *(void *)(*a2 + 272) + 24;
      uint64_t v24 = *((void *)v23 + 24);
      if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 24 > *((void *)v23 + 25) - v24)
      {
        unsigned int v34 = *((_DWORD *)v23 + 54) >> 7;
        if (v34 >= 0x1E) {
          LOBYTE(v34) = 30;
        }
        uint64_t v52 = 4096 << v34;
        unint64_t v25 = (unint64_t)operator new(4096 << v34, (std::align_val_t)8uLL);
        unint64_t v35 = *((unsigned int *)v23 + 54);
        if (v35 >= *((unsigned int *)v23 + 55)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)v23 + 26) + 8 * v35) = v25;
        ++*((_DWORD *)v23 + 54);
        *((void *)v23 + 25) = v25 + v52;
      }
      else
      {
        unint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v23 + 24) = v25 + 24;
      int v26 = *(unsigned __int8 *)(*((void *)v23 + 19) + 18) << 16;
      *(unsigned char *)unint64_t v25 = 2;
      *(_DWORD *)(v25 + 1) = v26 | (*(unsigned __int8 *)(v25 + 4) << 24);
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = v6;
      *(void *)(v19 + 24) = v25;
      *(_DWORD *)(v19 + 8) = *(_DWORD *)(v19 + 8) & 0xFFFFE3FF | 0x800;
      *(void *)v19 &= 7uLL;
      int Binding = llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v6);
      if (Binding > 1)
      {
        if (Binding == 2) {
          __int16 v28 = 16;
        }
        else {
          __int16 v28 = 24;
        }
      }
      else if (Binding)
      {
        __int16 v28 = 8;
      }
      else
      {
        __int16 v28 = 0;
      }
      __int16 v29 = *(_WORD *)(v19 + 12) & 0xFFE7 | v28 | 0x1000;
      *(_WORD *)(v19 + 12) = v29;
      __int16 v30 = *(_WORD *)(v6 + 12) & 0x60 | v29 & 0xFF9F;
      *(_WORD *)(v19 + 12) = v30;
      *(_WORD *)(v19 + 12) = v30 & 0xFC7F | *(_WORD *)(v6 + 12) & 0x380;
      uint64_t v31 = *(void *)v6;
      uint64_t result = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (!result && (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v6 + 8) |= 4u;
        uint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
        uint64_t v31 = *(void *)v6 & 7 | result;
        *(void *)uint64_t v6 = v31;
      }
      if (result && *(unsigned char *)(v2 + 32)) {
        goto LABEL_38;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v6 + 8) |= 4u;
        unint64_t v32 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
        *(void *)uint64_t v6 = *(void *)v6 & 7 | v32;
      }
      if (v11 >= 2 && !v32 && *(_WORD *)v10 == 16448)
      {
        if (v11 < 3) {
          break;
        }
        if (*(_WORD *)v10 != 16448 || v10[2] != 64) {
          break;
        }
      }
      if (sub_1CD40EA84(*(void *)(v55 + 40), *(_DWORD *)(v55 + 56), v6, v60))
      {
        v60[0] = (unsigned __int8 **)v6;
        if (sub_1CD467E2C(v54, (uint64_t *)v60)[1] != v19)
        {
          if ((*(unsigned char *)v6 & 4) != 0)
          {
            uint64_t v41 = *(void **)(v6 - 8);
            unint64_t v42 = *v41;
            unsigned int v36 = (const char *)(v41 + 2);
            unint64_t v37 = v42;
          }
          else
          {
            unsigned int v36 = 0;
            unint64_t v37 = 0;
          }
          uint64_t v38 = *a2;
          uint64_t v39 = *(void *)v2;
          v60[0] = (unsigned __int8 **)"multiple versions for ";
          uint64_t v61 = v36;
          unint64_t v62 = v37;
          __int16 v40 = 1283;
          goto LABEL_66;
        }
      }
      unsigned int v57 = (const char *)v6;
      v58[0] = v19;
      uint64_t result = sub_1CD4729F8((uint64_t)v60, v54, (uint64_t *)&v57, v58);
LABEL_38:
      v2 += 40;
      if (v2 == v56) {
        goto LABEL_71;
      }
    }
    uint64_t v38 = *a2;
    uint64_t v39 = *(void *)v2;
    __int16 v59 = 1283;
    unsigned int v57 = "default version symbol ";
    v58[1] = v5;
    v58[2] = v4;
    v60[0] = (unsigned __int8 **)&v57;
    uint64_t v61 = " must be defined";
    __int16 v40 = 770;
LABEL_66:
    __int16 v63 = v40;
    uint64_t result = llvm::MCContext::reportError(v38, v39, (uint64_t)v60);
    goto LABEL_38;
  }
LABEL_71:
  uint64_t v43 = *(uint64_t ***)(v55 + 72);
  for (uint64_t i = *(uint64_t ***)(v55 + 80); v43 != i; ++v43)
  {
    uint64_t v45 = *v43;
    v60[0] = 0;
    if (sub_1CD40EA84(*(void *)(v55 + 40), *(_DWORD *)(v55 + 56), (uint64_t)v45, v60))
    {
      uint64_t v46 = v60[0][1];
      if (v46) {
        *uint64_t v43 = (uint64_t *)v46;
      }
    }
    uint64_t v47 = *v43;
    uint64_t v48 = **v43;
    uint64_t result = v48 & 0xFFFFFFFFFFFFFFF8;
    if ((v48 & 0xFFFFFFFFFFFFFFF8) == 0 && (v47[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v47 + 2) |= 4u;
      uint64_t result = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v47[3]);
      uint64_t v48 = *v47 & 7 | result;
      void *v47 = v48;
    }
    if (result)
    {
      uint64_t result = v48 & 0xFFFFFFFFFFFFFFF8;
      if ((v48 & 0xFFFFFFFFFFFFFFF8) == 0 && (v47[1] & 0x1C00) == 0x800)
      {
        *((_DWORD *)v47 + 2) |= 4u;
        uint64_t result = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v47[3]);
        void *v47 = *v47 & 7 | result;
      }
      __int16 v49 = *v43;
      if ((_UNKNOWN *)result != llvm::MCSymbol::AbsolutePseudoFragment)
      {
        uint64_t v50 = *v49;
        if ((*v49 & 4) != 0)
        {
          uint64_t v51 = *(v49 - 1);
          if (*(void *)v51 >= 2uLL && *(_WORD *)(v51 + 16) == 19502)
          {
            uint64_t result = v50 & 0xFFFFFFFFFFFFFFF8;
            if ((v50 & 0xFFFFFFFFFFFFFFF8) == 0 && (v49[1] & 0x1C00) == 0x800)
            {
              *((_DWORD *)v49 + 2) |= 4u;
              uint64_t result = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v49[3]);
              *__int16 v49 = *v49 & 7 | result;
            }
            __int16 v49 = *(uint64_t **)(*(void *)(result + 16) + 8);
            *uint64_t v43 = v49;
          }
        }
      }
    }
    else
    {
      __int16 v49 = *v43;
    }
    *((_DWORD *)v49 + 2) |= 0x200u;
  }
  return result;
}

void sub_1CCB9D84C(uint64_t a1, uint64_t *a2, llvm::MCAsmLayout *a3, const llvm::MCFragment *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  int v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void))(*(void *)a2[1] + 80))(a2[1], *(unsigned int *)(a5 + 12))+ 16);
  uint64_t v91 = *((void *)a4 + 2);
  uint64_t v14 = a6[2];
  llvm::MCAsmLayout::ensureValid(a3, a4);
  uint64_t v15 = *((void *)a4 + 4) + *(unsigned int *)(a5 + 8);
  uint64_t v16 = *a2;
  uint64_t v17 = a6[1];
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)v18;
    unint64_t AssociatedFragment = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v18 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
      uint64_t v19 = *(void *)v18 & 7 | AssociatedFragment;
      *(void *)uint64_t v18 = v19;
    }
    if (AssociatedFragment)
    {
      unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v18 + 8) |= 4u;
        unint64_t v21 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
        *(void *)uint64_t v18 = *(void *)v18 & 7 | v21;
      }
      if (*(void *)(v21 + 16) == v91)
      {
        v94[0] = 0;
        unsigned int v86 = 1;
        sub_1CCBC6418(a3, (uint64_t *)v18, 1, v94);
        uint64_t v89 = v15 + v14 - v94[0];
        goto LABEL_8;
      }
      uint64_t v37 = *(void *)(a5 + 16);
      v94[0] = (uint64_t)"Cannot represent a difference across sections";
      __int16 v40 = 259;
    }
    else
    {
      uint64_t v37 = *(void *)(a5 + 16);
      if ((v19 & 4) != 0)
      {
        uint64_t v43 = *(uint64_t **)(v18 - 8);
        uint64_t v44 = *v43;
        uint64_t v38 = v43 + 2;
        uint64_t v39 = v44;
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
      v92[0] = "symbol '";
      v92[2] = v38;
      v92[3] = v39;
      __int16 v93 = 1283;
      v94[0] = (uint64_t)v92;
      v94[2] = (uint64_t)"' can not be undefined in a subtraction expression";
      __int16 v40 = 770;
    }
    __int16 v95 = v40;
    llvm::MCContext::reportError(v16, v37, (uint64_t)v94);
    return;
  }
  uint64_t v89 = v14;
  unsigned int v86 = v13 & 1;
LABEL_8:
  uint64_t v22 = *a6;
  uint64_t v88 = v15;
  if (!*a6)
  {
    int v85 = 0;
    uint64_t v23 = 0;
LABEL_24:
    uint64_t v29 = 0;
    char v87 = 1;
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v22 + 16);
  if (!v23)
  {
    int v85 = 0;
    goto LABEL_24;
  }
  if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800
    && (*(_DWORD *)(v23 + 8) |= 4u, uint64_t v24 = *(void *)(v23 + 24), *(unsigned char *)v24 == 2)
    && *(_WORD *)(v24 + 1) == 29)
  {
    uint64_t v23 = *(void *)(v24 + 16);
    if (!v23)
    {
      char v87 = 1;
      uint64_t v29 = 0;
      int v85 = 1;
      goto LABEL_26;
    }
    int v85 = 1;
  }
  else
  {
    int v85 = 0;
  }
  uint64_t v25 = *(void *)v23;
  unint64_t v26 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
  if (!v26 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    unint64_t v26 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    uint64_t v25 = *(void *)v23 & 7 | v26;
    *(void *)uint64_t v23 = v25;
  }
  if (!v26) {
    goto LABEL_25;
  }
  unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFF8;
  if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    unint64_t v27 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    uint64_t v25 = *(void *)v23 & 7 | v27;
    *(void *)uint64_t v23 = v25;
  }
  if ((_UNKNOWN *)v27 == llvm::MCSymbol::AbsolutePseudoFragment)
  {
LABEL_25:
    char v87 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      unint64_t v28 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      *(void *)uint64_t v23 = *(void *)v23 & 7 | v28;
    }
    char v87 = 0;
    uint64_t v29 = *(void *)(v28 + 16);
  }
LABEL_26:
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v16, *(void *)(a5 + 16), v91, v29))return; {
  uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v16, a6, a5, v86);
  }
  uint64_t v31 = *((void *)a4 + 2);
  char v32 = v87;
  if (!v22)
  {
LABEL_28:
    BOOL v33 = *(_DWORD *)(v31 + 224) == 1879002121;
    if (*(_DWORD *)(v31 + 224) == 1879002121) {
      char v34 = 1;
    }
    else {
      char v34 = v32;
    }
    if ((v34 & 1) == 0)
    {
      unint64_t v35 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v36 = v89;
      if (!v35 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v23 + 8) |= 4u;
        unint64_t v35 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
        char v32 = v87;
        *(void *)uint64_t v23 = *(void *)v23 & 7 | v35;
      }
      if (v35)
      {
        v94[0] = 0;
        sub_1CCBC6418(a3, (uint64_t *)v23, 1, v94);
        char v32 = v87;
        BOOL v33 = 0;
        uint64_t v42 = v94[0] + v89;
        goto LABEL_64;
      }
      BOOL v33 = 0;
      goto LABEL_63;
    }
LABEL_45:
    uint64_t v42 = v89;
    goto LABEL_64;
  }
  uint64_t v41 = *(unsigned __int16 *)(v22 + 1);
  if (v41 <= 0x3C)
  {
    if (((1 << v41) & 0xE000000000010C4) != 0) {
      goto LABEL_44;
    }
    if (v41 == 60) {
      goto LABEL_28;
    }
  }
  unint64_t v45 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = v89;
  if (!v45 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    unint64_t v45 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    char v32 = v87;
    *(void *)uint64_t v23 = *(void *)v23 & 7 | v45;
  }
  if (!v45)
  {
LABEL_62:
    BOOL v33 = 1;
LABEL_63:
    uint64_t v42 = v36;
    goto LABEL_64;
  }
  if (llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v23)) {
    goto LABEL_141;
  }
  char v32 = v87;
  if ((~*(unsigned __int16 *)(v23 + 12) & 6) == 0) {
    goto LABEL_62;
  }
  uint64_t v76 = *(void *)v23;
  unint64_t v77 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
  if (!v77)
  {
    if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      unint64_t v77 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      uint64_t v76 = *(void *)v23 & 7 | v77;
      *(void *)uint64_t v23 = v76;
    }
    uint64_t v36 = v89;
    if (!v77) {
      goto LABEL_140;
    }
  }
  unint64_t v78 = v76 & 0xFFFFFFFFFFFFFFF8;
  if ((v76 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      unint64_t v78 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      uint64_t v76 = *(void *)v23 & 7 | v78;
      *(void *)uint64_t v23 = v76;
    }
    uint64_t v36 = v89;
  }
  if ((_UNKNOWN *)v78 == llvm::MCSymbol::AbsolutePseudoFragment)
  {
LABEL_140:
    if ((llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)a2, (const llvm::MCSymbol *)v23) & 1) == 0)
    {
      char v84 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v23, v30);
      char v32 = v87;
      if ((v84 & 1) == 0) {
        goto LABEL_28;
      }
LABEL_44:
      BOOL v33 = 1;
      goto LABEL_45;
    }
LABEL_141:
    BOOL v33 = 1;
    uint64_t v42 = v36;
    goto LABEL_142;
  }
  unint64_t v79 = v76 & 0xFFFFFFFFFFFFFFF8;
  if ((v76 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    unint64_t v79 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    *(void *)uint64_t v23 = *(void *)v23 & 7 | v79;
  }
  int v80 = *(_DWORD *)(*(void *)(v79 + 16) + 228);
  if ((v80 & 0x10) == 0) {
    goto LABEL_124;
  }
  if (v89)
  {
    BOOL v33 = 1;
    uint64_t v42 = v89;
    goto LABEL_142;
  }
  uint64_t v81 = *(void *)(a1 + 8);
  int v82 = *(unsigned __int16 *)(v81 + 10);
  if (v30 == 9 && v82 == 3)
  {
    uint64_t v42 = 0;
    BOOL v33 = 1;
    goto LABEL_142;
  }
  if (v82 != 8)
  {
LABEL_124:
    uint64_t v36 = v89;
    char v32 = v87;
    if ((v80 & 0x400) != 0) {
      goto LABEL_62;
    }
    goto LABEL_140;
  }
  uint64_t v42 = 0;
  BOOL v33 = 1;
  if ((v80 & 0x400) != 0)
  {
LABEL_142:
    char v32 = v87;
    goto LABEL_64;
  }
  uint64_t v36 = 0;
  char v32 = v87;
  if (*(unsigned char *)(v81 + 12)) {
    goto LABEL_140;
  }
LABEL_64:
  *a7 = v42;
  BOOL v46 = (*(unsigned char *)(*(void *)(a1 + 8) + 12) & 1) == 0;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 12)) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v42;
  }
  *a7 = v47;
  if (v46) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v42;
  }
  if (!v33)
  {
    if (v29)
    {
      uint64_t v50 = *(void *)(v29 + 8);
      if (v50) {
        *(_DWORD *)(v50 + 8) |= 0x200u;
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    uint64_t v49 = v88;
    v94[0] = v91;
    int v53 = sub_1CD4F7F5C(a1 + 16, v94);
    uint64_t v54 = v53;
    uint64_t v56 = (char *)v53[2];
    unint64_t v55 = v53[3];
    if ((unint64_t)v56 < v55) {
      goto LABEL_96;
    }
    unsigned int v57 = (char *)v53[1];
    unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v57) >> 4) + 1;
    if (v58 <= 0x555555555555555)
    {
      unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v57) >> 4);
      if (2 * v59 > v58) {
        unint64_t v58 = 2 * v59;
      }
      if (v59 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v60 = 0x555555555555555;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        if (v60 > 0x555555555555555) {
          goto LABEL_153;
        }
        uint64_t v61 = (char *)operator new(48 * v60);
      }
      else
      {
        uint64_t v61 = 0;
      }
      v70 = &v61[16 * ((v56 - v57) >> 4)];
      *(void *)v70 = v88;
      *((void *)v70 + 1) = v50;
      *((_DWORD *)v70 + 4) = v30;
      int v71 = &v61[48 * v60];
      *((void *)v70 + 3) = v48;
      *((void *)v70 + 4) = v23;
      *((void *)v70 + 5) = v89;
      int v64 = v70 + 48;
      if (v56 == v57) {
        goto LABEL_114;
      }
      do
      {
        long long v72 = *((_OWORD *)v56 - 3);
        long long v73 = *((_OWORD *)v56 - 1);
        *((_OWORD *)v70 - 2) = *((_OWORD *)v56 - 2);
        *((_OWORD *)v70 - 1) = v73;
        *((_OWORD *)v70 - 3) = v72;
        v70 -= 48;
        v56 -= 48;
      }
      while (v56 != v57);
      goto LABEL_113;
    }
LABEL_152:
    abort();
  }
  uint64_t v49 = v88;
  if (v32)
  {
    uint64_t v50 = 0;
  }
  else
  {
    v94[0] = 0;
    int v51 = sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), v23, v94);
    uint64_t v52 = 0;
    if (v51) {
      uint64_t v52 = *(void *)(v94[0] + 8);
    }
    if (v52) {
      uint64_t v50 = v52;
    }
    else {
      uint64_t v50 = v23;
    }
    if (v85) {
      *(_WORD *)(v50 + 12) |= 0x800u;
    }
    else {
      *(_DWORD *)(v50 + 8) |= 0x200u;
    }
  }
  v94[0] = v91;
  unint64_t v62 = sub_1CD4F7F5C(a1 + 16, v94);
  uint64_t v54 = v62;
  uint64_t v56 = (char *)v62[2];
  unint64_t v63 = v62[3];
  if ((unint64_t)v56 >= v63)
  {
    int v65 = (char *)v62[1];
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v65) >> 4) + 1;
    if (v66 <= 0x555555555555555)
    {
      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)v65) >> 4);
      if (2 * v67 > v66) {
        unint64_t v66 = 2 * v67;
      }
      if (v67 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v68 = 0x555555555555555;
      }
      else {
        unint64_t v68 = v66;
      }
      if (!v68)
      {
        uint64_t v69 = 0;
        goto LABEL_111;
      }
      if (v68 <= 0x555555555555555)
      {
        uint64_t v69 = (char *)operator new(48 * v68);
LABEL_111:
        v70 = &v69[16 * ((v56 - v65) >> 4)];
        *(void *)v70 = v88;
        *((void *)v70 + 1) = v50;
        *((_DWORD *)v70 + 4) = v30;
        int v71 = &v69[48 * v68];
        *((void *)v70 + 3) = v48;
        *((void *)v70 + 4) = v23;
        *((void *)v70 + 5) = v89;
        int v64 = v70 + 48;
        if (v56 == v65) {
          goto LABEL_114;
        }
        do
        {
          long long v74 = *((_OWORD *)v56 - 3);
          long long v75 = *((_OWORD *)v56 - 1);
          *((_OWORD *)v70 - 2) = *((_OWORD *)v56 - 2);
          *((_OWORD *)v70 - 1) = v75;
          *((_OWORD *)v70 - 3) = v74;
          v70 -= 48;
          v56 -= 48;
        }
        while (v56 != v65);
LABEL_113:
        uint64_t v56 = (char *)v54[1];
LABEL_114:
        v54[1] = v70;
        v54[2] = v64;
        v54[3] = v71;
        if (v56) {
          operator delete(v56);
        }
        goto LABEL_116;
      }
LABEL_153:
      sub_1CB833614();
    }
    goto LABEL_152;
  }
LABEL_96:
  *(void *)uint64_t v56 = v49;
  *((void *)v56 + 1) = v50;
  *((_DWORD *)v56 + 4) = v30;
  *((void *)v56 + 3) = v48;
  *((void *)v56 + 4) = v23;
  int v64 = v56 + 48;
  *((void *)v56 + 5) = v89;
LABEL_116:
  v54[2] = v64;
}

BOOL sub_1CCB9E21C(int a1, int a2, llvm::MCSymbolELF *this, uint64_t a4, uint64_t a5, int a6)
{
  return (!a6 || !llvm::MCSymbolELF::getBinding(this) && (~*((unsigned __int16 *)this + 6) & 6) != 0)
      && *(void *)(sub_1CC34BE58((uint64_t)this, 1) + 16) == *(void *)(a4 + 16);
}

uint64_t sub_1CCB9E284(uint64_t result)
{
  *(unsigned char *)(result + 64) = 1;
  return result;
}

uint64_t sub_1CCB9E290(uint64_t result)
{
  *(unsigned char *)(result + 65) = 1;
  return result;
}

void sub_1CCB9E29C(void *a1, uint64_t a2)
{
  unint64_t v5 = (void *)a1[10];
  unint64_t v4 = a1[11];
  if ((unint64_t)v5 >= v4)
  {
    int v7 = (void *)a1[9];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v13 = &v12[8 * v8];
    *(void *)int v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      unint64_t v5 = (void *)a1[9];
    }
    a1[9] = v13;
    a1[10] = v6;
    a1[11] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[10] = v6;
}

uint64_t sub_1CCB9E388(uint64_t a1, void *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  v7[0] = a1;
  v7[1] = v3;
  int v8 = v4;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v14 = 0x100000000;
  char v15 = 0;
  uint64_t v13 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  __p = 0;
  uint64_t v5 = sub_1CCB9E424((uint64_t)v7, a2, a3);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v10, 8);
  return v5;
}

uint64_t sub_1CCB9E414()
{
  return 1;
}

uint64_t sub_1CCB9E424(uint64_t a1, void *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v485 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(void *))(*v6 + 80))(v6);
  uint64_t v428 = v6[4];
  uint64_t v429 = v7;
  uint64_t v427 = v6[2];
  int v8 = (llvm::MCContext *)*a2;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)".strtab";
  LOWORD(v472) = 259;
  LOWORD(v483) = 257;
  v455 = v8;
  ELFSection = (uint64_t *)llvm::MCContext::getELFSection(v8, (const llvm::Twine *)&__dst, 3, 0, 0, (const llvm::Twine *)v480, 0, -1, 0);
  *(_DWORD *)(a1 + 84) = sub_1CCBA0E9C((void *)a1, (uint64_t)ELFSection);
  v467[0] = 0;
  v467[1] = 0;
  int v468 = 0;
  v465[0] = 0;
  v465[1] = 0;
  int v466 = 0;
  v464[0] = 0;
  v464[1] = 0;
  v463 = (uint64_t *)v464;
  int v9 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v10 = (_DWORD *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 3uLL)
  {
    *uint64_t v10 = 1179403647;
    *((void *)v9 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v9, byte_1CFB287F0, 4uLL);
  }
  uint64_t v11 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
    char v12 = 2;
  }
  else {
    char v12 = 1;
  }
  uint64_t v13 = (char *)*((void *)v11 + 4);
  if ((unint64_t)v13 >= *((void *)v11 + 3))
  {
    llvm::raw_ostream::write(v11, v12);
  }
  else
  {
    *((void *)v11 + 4) = v13 + 1;
    char *v13 = v12;
  }
  uint64_t v14 = *(llvm::raw_ostream **)(a1 + 8);
  if (*(_DWORD *)(a1 + 16) == 1) {
    char v15 = 1;
  }
  else {
    char v15 = 2;
  }
  uint64_t v16 = (char *)*((void *)v14 + 4);
  if ((unint64_t)v16 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, v15);
  }
  else
  {
    *((void *)v14 + 4) = v16 + 1;
    *uint64_t v16 = v15;
  }
  uint64_t v17 = *(llvm::raw_ostream **)(a1 + 8);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 1);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 1;
  }
  uint64_t v19 = *(llvm::raw_ostream **)(a1 + 8);
  char v20 = *(unsigned char *)(*(void *)(*(void *)a1 + 8) + 8);
  if (!v20 && *(unsigned char *)(*(void *)a1 + 64)) {
    char v20 = 3;
  }
  unint64_t v21 = (char *)*((void *)v19 + 4);
  if ((unint64_t)v21 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, v20);
  }
  else
  {
    *((void *)v19 + 4) = v21 + 1;
    *unint64_t v21 = v20;
  }
  uint64_t v22 = *(llvm::raw_ostream **)(a1 + 8);
  char v23 = *(unsigned char *)(*(void *)(*(void *)a1 + 8) + 9);
  uint64_t v24 = (char *)*((void *)v22 + 4);
  if ((unint64_t)v24 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, v23);
  }
  else
  {
    *((void *)v22 + 4) = v24 + 1;
    *uint64_t v24 = v23;
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "", 7uLL);
  uint64_t v25 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_DWORD *)(a1 + 16) - 1) < 2) {
    __int16 v26 = 1;
  }
  else {
    __int16 v26 = 256;
  }
  *(_WORD *)v480 = v26;
  llvm::raw_ostream::write(v25, v480, 2uLL);
  unint64_t v27 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v28 = *(unsigned __int16 *)(*(void *)(*(void *)a1 + 8) + 10);
  unsigned int v29 = bswap32(v28) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    LOWORD(v28) = v29;
  }
  *(_WORD *)v480 = v28;
  llvm::raw_ostream::write(v27, v480, 2uLL);
  uint64_t v30 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_DWORD *)(a1 + 16) - 1) < 2) {
    int v31 = 1;
  }
  else {
    int v31 = 0x1000000;
  }
  *(_DWORD *)v480 = v31;
  llvm::raw_ostream::write(v30, v480, 4uLL);
  sub_1CCBA0FBC(a1, 0);
  sub_1CCBA0FBC(a1, 0);
  sub_1CCBA0FBC(a1, 0);
  unsigned int v32 = *((_DWORD *)a2 + 126);
  BOOL v33 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v34 = bswap32(v32);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v32 = v34;
  }
  *(_DWORD *)v480 = v32;
  llvm::raw_ostream::write(v33, v480, 4uLL);
  unint64_t v35 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
    __int16 v36 = 64;
  }
  else {
    __int16 v36 = 52;
  }
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    v36 <<= 8;
  }
  *(_WORD *)v480 = v36;
  llvm::raw_ostream::write(v35, v480, 2uLL);
  uint64_t v37 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v480 = 0;
  llvm::raw_ostream::write(v37, v480, 2uLL);
  uint64_t v38 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v480 = 0;
  llvm::raw_ostream::write(v38, v480, 2uLL);
  uint64_t v39 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
    __int16 v40 = 64;
  }
  else {
    __int16 v40 = 40;
  }
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    v40 <<= 8;
  }
  *(_WORD *)v480 = v40;
  llvm::raw_ostream::write(v39, v480, 2uLL);
  uint64_t v41 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v480 = 0;
  llvm::raw_ostream::write(v41, v480, 2uLL);
  unsigned int v42 = *(unsigned __int16 *)(a1 + 84);
  uint64_t v43 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v44 = bswap32(v42) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    LOWORD(v42) = v44;
  }
  *(_WORD *)v480 = v42;
  llvm::raw_ostream::write(v43, v480, 2uLL);
  __p = 0;
  v438 = a2;
  unint64_t v45 = 0;
  v462[0] = 0;
  v462[1] = 0;
  v459 = a3;
  v461 = (uint64_t *)v462;
  uint64_t v47 = (std::string::size_type *)a2[4];
  BOOL v46 = (std::string::size_type *)a2[5];
  if (v47 != v46)
  {
    __p = 0;
    unint64_t v45 = 0;
    v431 = 0;
    a3 = 0;
    uint64_t v48 = 0;
    v445 = (std::string::size_type *)a2[5];
    while (1)
    {
      std::string::size_type v49 = *v47;
      int v50 = *(_DWORD *)(a1 + 24);
      if (v50 == 2)
      {
        unint64_t v52 = *(void *)(v49 + 208);
        if (v52 >= 4 && *(_DWORD *)(*(void *)(v49 + 200) + v52 - 4) == 1870095406)
        {
LABEL_58:
          v452 = v45;
          v440 = v48;
          uint64_t v53 = 1 << *(unsigned char *)(v49 + 24);
          uint64_t v54 = *(void **)(a1 + 8);
          uint64_t v55 = v54[4] - v54[2] + (*(uint64_t (**)(void *))(*v54 + 80))(v54);
          uint64_t v56 = (v55 + v53 - 1) & -(uint64_t)v53;
          unsigned int v57 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v58 = v56 - v55;
          if ((v56 - v55) >= 0x50)
          {
            do
            {
              if (v58 >= 0x4F) {
                size_t v117 = 79;
              }
              else {
                size_t v117 = v58;
              }
              unsigned int v57 = llvm::raw_ostream::write(v57, "", v117);
              v58 -= v117;
            }
            while (v58);
          }
          else
          {
            llvm::raw_ostream::write(v57, "", (v56 - v55));
          }
          uint64_t v59 = *(void *)(v49 + 240);
          if (*(_DWORD *)(*(void *)(*a2 + 152) + 468)) {
            BOOL v60 = *(void *)(v49 + 208) >= 7uLL;
          }
          else {
            BOOL v60 = 0;
          }
          if (v60)
          {
            uint64_t v61 = *(int **)(v49 + 200);
            int v62 = *v61;
            int v63 = *(int *)((char *)v61 + 3);
            BOOL v64 = v62 == 1650811950 && v63 == 1600615778;
            if (v64)
            {
              *(void *)v480 = &v482;
              long long v481 = xmmword_1CFAC3020;
              LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
              char v473 = 0;
              uint64_t v474 = 0;
              int v475 = 1;
              uint64_t v471 = 0;
              uint64_t v472 = 0;
              __dst.__r_.__value_.__r.__words[2] = 0;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2646FA8;
              v476 = v480;
              llvm::raw_ostream::SetBufferAndMode((uint64_t)&__dst, 0, 0, 0);
              llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)a2, (llvm::raw_ostream *)&__dst, (const llvm::MCSection *)v49, v459);
              __break(1u);
              goto LABEL_538;
            }
          }
          llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)a2, *(llvm::raw_ostream **)(a1 + 8), (const llvm::MCSection *)v49, v459);
          int v65 = *(void **)(a1 + 8);
          uint64_t v66 = (*(uint64_t (**)(void *))(*v65 + 80))(v65) + v65[4] - v65[2];
          *(void *)v480 = v49;
          unint64_t v67 = sub_1CD5A4928(&v461, v49, (uint64_t **)v480);
          v67[5] = (uint64_t *)v56;
          v67[6] = (uint64_t *)v66;
          uint64_t v68 = *(void *)a1 + 16;
          *(void *)v480 = v49;
          uint64_t v69 = sub_1CD4F7F5C(v68, (uint64_t *)v480);
          if (v69[1] != v69[2])
          {
            int v71 = *(const std::string::value_type **)(v49 + 200);
            std::string::size_type v72 = *(void *)(v49 + 208);
            int v73 = *(unsigned __int8 *)(*(void *)(*(void *)a1 + 8) + 12);
            BOOL v74 = *(_DWORD *)(v49 + 224) != 1879002121;
            if ((v73 & v74) != 0) {
              long long v75 = ".rela";
            }
            else {
              long long v75 = ".rel";
            }
            if ((v73 & v74) != 0) {
              size_t v76 = 5;
            }
            else {
              size_t v76 = 4;
            }
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v76;
            memcpy(&__dst, v75, v76);
            *(unsigned char *)((unint64_t)&__dst | v76) = 0;
            std::string::append(&__dst, v71, v72);
            if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
              int v77 = 16;
            }
            else {
              int v77 = 8;
            }
            if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
              int v78 = 24;
            }
            else {
              int v78 = 12;
            }
            if ((v73 & v74) != 0) {
              int v79 = 4;
            }
            else {
              int v79 = 9;
            }
            if ((v73 & v74) != 0) {
              int v80 = v78;
            }
            else {
              int v80 = v77;
            }
            if ((*(_DWORD *)(v49 + 228) & 0x200) != 0) {
              int v81 = 512;
            }
            else {
              int v81 = 64;
            }
            LOWORD(v483) = 260;
            *(void *)v480 = &__dst;
            llvm::MCContext::createELFRelSection(v455, (const llvm::Twine *)v480, v79, v81, v80, (const llvm::MCSymbolELF *)(*(void *)(v49 + 240) & 0xFFFFFFFFFFFFFFF8), (const llvm::MCSectionELF *)v49);
          }
          uint64_t v70 = 0;
          *(void *)v480 = 0;
          if ((v59 & 0xFFFFFFFFFFFFFFF8) == 0) {
            goto LABEL_133;
          }
          __dst.__r_.__value_.__r.__words[0] = v59 & 0xFFFFFFFFFFFFFFF8;
          if (!*((_DWORD *)sub_1CD6A1F98(v467, &__dst) + 2)) {
            llvm::MCContext::createELFSectionImpl((uint64_t)v455, ".group", 6uLL, 17, 0, 4, 4, v59 & 0xFFFFFFFFFFFFFFF8, (*(_DWORD *)(v49 + 240) & 4) != 0, -1, 0);
          }
          __dst.__r_.__value_.__r.__words[0] = v59 & 0xFFFFFFFFFFFFFFF8;
          int v82 = sub_1CD4F40F4(&v463, v59 & 0xFFFFFFFFFFFFFFF8, (uint64_t **)&__dst);
          int v83 = v82;
          int v85 = (std::string::size_type *)v82[6];
          char v84 = v82[7];
          if (v85 >= (std::string::size_type *)v84)
          {
            char v87 = v82[5];
            uint64_t v88 = ((char *)v85 - (char *)v87) >> 3;
            unint64_t v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 61) {
              goto LABEL_535;
            }
            uint64_t v90 = (char *)v84 - (char *)v87;
            if (v90 >> 2 > v89) {
              unint64_t v89 = v90 >> 2;
            }
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              if (v91 >> 61) {
                goto LABEL_536;
              }
              v92 = (char *)operator new(8 * v91);
            }
            else
            {
              v92 = 0;
            }
            __int16 v93 = (std::string::size_type *)&v92[8 * v88];
            std::string::size_type *v93 = v49;
            unsigned int v86 = (uint64_t *)(v93 + 1);
            if (v85 != (std::string::size_type *)v87)
            {
              do
              {
                std::string::size_type v94 = *--v85;
                *--__int16 v93 = v94;
              }
              while (v85 != (std::string::size_type *)v87);
              int v85 = (std::string::size_type *)v83[5];
            }
            v83[5] = (uint64_t *)v93;
            v83[6] = v86;
            v83[7] = (uint64_t *)&v92[8 * v91];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *int v85 = v49;
            unsigned int v86 = (uint64_t *)(v85 + 1);
          }
          v83[6] = v86;
          uint64_t v95 = *(void *)v480;
          if (!*(void *)v480)
          {
            uint64_t v70 = 0;
LABEL_133:
            int v107 = sub_1CCBA0E9C((void *)a1, v49);
            __dst.__r_.__value_.__r.__words[0] = v49;
            *((_DWORD *)sub_1CD40EB18((uint64_t)v465, (uint64_t *)&__dst) + 2) = v107;
            if (v70)
            {
              int v108 = sub_1CCBA0E9C((void *)a1, v70);
              *((_DWORD *)sub_1CD40EB18((uint64_t)v465, (uint64_t *)v480) + 2) = v108;
              v109 = v452;
              if (v452 >= v431)
              {
                uint64_t v110 = v452 - __p;
                unint64_t v111 = v110 + 1;
                if ((unint64_t)(v110 + 1) >> 61) {
LABEL_535:
                }
                  abort();
                if (((char *)v431 - (char *)__p) >> 2 > v111) {
                  unint64_t v111 = ((char *)v431 - (char *)__p) >> 2;
                }
                if ((unint64_t)((char *)v431 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v112 = v111;
                }
                if (v112)
                {
                  if (v112 >> 61) {
LABEL_536:
                  }
                    sub_1CB833614();
                  v113 = (char *)operator new(8 * v112);
                  v109 = v452;
                }
                else
                {
                  v113 = 0;
                }
                unint64_t v114 = (uint64_t *)&v113[8 * v110];
                *unint64_t v114 = v70;
                unint64_t v45 = v114 + 1;
                v115 = __p;
                if (v109 == __p)
                {
                  BOOL v46 = v445;
                }
                else
                {
                  BOOL v46 = v445;
                  do
                  {
                    uint64_t v116 = *--v109;
                    *--unint64_t v114 = v116;
                    v115 = __p;
                  }
                  while (v109 != __p);
                }
                v431 = (uint64_t *)&v113[8 * v112];
                if (v115) {
                  operator delete(v115);
                }
                __p = v114;
              }
              else
              {
                uint64_t *v452 = v70;
                unint64_t v45 = v452 + 1;
                BOOL v46 = v445;
              }
            }
            else
            {
              BOOL v46 = v445;
              unint64_t v45 = v452;
            }
            (*(void (**)(void, llvm::MCContext *, std::string::size_type))(**(void **)(*(void *)a1 + 8)
                                                                                      + 48))(*(void *)(*(void *)a1 + 8), v455, v49);
            uint64_t v48 = v440;
            goto LABEL_136;
          }
          unint64_t v96 = (unint64_t)v83[7];
          if ((unint64_t)v86 >= v96)
          {
            v98 = v83[5];
            uint64_t v99 = v86 - v98;
            unint64_t v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 61) {
              goto LABEL_535;
            }
            uint64_t v101 = v96 - (void)v98;
            if (v101 >> 2 > v100) {
              unint64_t v100 = v101 >> 2;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              if (v102 >> 61) {
                goto LABEL_536;
              }
              unint64_t v441 = v102;
              int v103 = (char *)operator new(8 * v102);
              unint64_t v102 = v441;
            }
            else
            {
              int v103 = 0;
            }
            BOOL v104 = (uint64_t *)&v103[8 * v99];
            v105 = (uint64_t *)&v103[8 * v102];
            *BOOL v104 = v95;
            v97 = v104 + 1;
            if (v86 == v98)
            {
              v83[5] = v104;
              v83[6] = v97;
              v83[7] = v105;
            }
            else
            {
              do
              {
                uint64_t v106 = *--v86;
                *--BOOL v104 = v106;
              }
              while (v86 != v98);
              unsigned int v86 = v83[5];
              v83[5] = v104;
              v83[6] = v97;
              v83[7] = v105;
              if (!v86) {
                goto LABEL_132;
              }
            }
            operator delete(v86);
          }
          else
          {
            uint64_t *v86 = *(void *)v480;
            v97 = v86 + 1;
          }
LABEL_132:
          v83[6] = v97;
          uint64_t v70 = *(void *)v480;
          goto LABEL_133;
        }
      }
      else
      {
        if (v50 != 1) {
          goto LABEL_58;
        }
        unint64_t v51 = *(void *)(v49 + 208);
        if (v51 < 4 || *(_DWORD *)(*(void *)(v49 + 200) + v51 - 4) != 1870095406) {
          goto LABEL_58;
        }
      }
LABEL_136:
      if (++v47 == v46)
      {
        a3 = v459;
        break;
      }
    }
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 32), 1);
    goto LABEL_436;
  }
  v453 = (llvm::MCContext *)v45;
  v460 = 0;
  uint64_t v118 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 65))
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)".llvm_addrsig";
    LOWORD(v472) = 259;
    LOWORD(v483) = 257;
    v460 = (uint64_t *)llvm::MCContext::getELFSection(v455, (const llvm::Twine *)&__dst, 1879002115, 0x80000000, 0, (const llvm::Twine *)v480, 0, -1, 0);
    sub_1CCBA0E9C((void *)a1, (uint64_t)v460);
    uint64_t v118 = *(void *)a1;
  }
  unint64_t v119 = (llvm::MCContext *)*a2;
  LOBYTE(v481) = (*(unsigned char *)(*(void *)(v118 + 8) + 12) & 2) != 0;
  uint64_t v482 = 0;
  uint64_t v483 = 0;
  *((void *)&v481 + 1) = 0;
  int v484 = 0;
  if ((*(unsigned char *)(*(void *)(v118 + 8) + 12) & 2) != 0) {
    int v120 = 24;
  }
  else {
    int v120 = 16;
  }
  *(void *)v480 = a1;
  *(void *)v477 = ".symtab";
  __int16 v478 = 259;
  LOWORD(v472) = 257;
  v424 = v119;
  uint64_t v121 = llvm::MCContext::getELFSection(v119, (const llvm::Twine *)v477, 2, 0, v120, (const llvm::Twine *)&__dst, 0, -1, 0);
  uint64_t v122 = v121;
  v479 = (uint64_t *)v121;
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0) {
    char v123 = 3;
  }
  else {
    char v123 = 2;
  }
  *(unsigned char *)(v121 + 24) = v123;
  *(_DWORD *)(a1 + 88) = sub_1CCBA0E9C((void *)a1, v121);
  uint64_t v124 = 1 << *(unsigned char *)(v122 + 24);
  v125 = *(void **)(a1 + 8);
  uint64_t v126 = v125[4] - v125[2] + (*(uint64_t (**)(void *))(*v125 + 80))(v125);
  v127 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v128 = ((v126 + v124 - 1) & -(int)v124) - v126;
  uint64_t v423 = (v126 + v124 - 1) & -(uint64_t)v124;
  if (v128 >= 0x50)
  {
    do
    {
      if (v128 >= 0x4F) {
        size_t v420 = 79;
      }
      else {
        size_t v420 = v128;
      }
      v127 = llvm::raw_ostream::write(v127, "", v420);
      v128 -= v420;
    }
    while (v128);
  }
  else
  {
    llvm::raw_ostream::write(v127, "", ((v126 + v124 - 1) & -(int)v124) - v126);
  }
  sub_1CCBA1040((uint64_t)v480, 0, 0, 0, 0, 0, 0, 0);
  uint64_t v129 = a2[22];
  uint64_t v422 = a2[23];
  if (v422 != v129)
  {
    uint64_t v130 = 32 * ((v422 - v129) >> 5);
    uint64_t v131 = a2[22];
    do
    {
      char v132 = *(unsigned char *)(v131 + 23);
      BOOL v133 = v132 < 0;
      if (v132 >= 0) {
        v134 = (void *)v131;
      }
      else {
        v134 = *(void **)v131;
      }
      uint64_t v135 = v132 & 0x7F;
      if (v133) {
        uint64_t v136 = *(void *)(v131 + 8);
      }
      else {
        uint64_t v136 = v135;
      }
      unsigned int v137 = sub_1CD0B03C8(v134, (uint64_t)v134 + v136);
      llvm::StringTableBuilder::add(a1 + 32, (uint64_t)v134, v136 | ((unint64_t)v137 << 32));
      v131 += 32;
      v130 -= 32;
    }
    while (v130);
  }
  uint64_t v138 = (uint64_t *)v438[7];
  v456 = (llvm::MCContext *)v438[8];
  if (v138 == (uint64_t *)v456)
  {
    unint64_t v139 = 0;
    v140 = 0;
    v141 = 0;
    v430 = 0;
    uint64_t v446 = 0xFFFFFFFFLL;
    uint64_t v142 = v422 - v129;
    uint64_t v143 = v422;
    goto LABEL_317;
  }
  char v421 = 0;
  int v144 = 0;
  v425 = 0;
  v426 = 0;
  unint64_t v139 = 0;
  v430 = 0;
  v432 = 0;
  v141 = 0;
  do
  {
    uint64_t v145 = *v138;
    int v146 = *(_DWORD *)(*v138 + 8);
    __int16 v447 = *(_WORD *)(*v138 + 12);
    char v147 = sub_1CD40EA84(*(void *)(*(void *)a1 + 40), *(_DWORD *)(*(void *)a1 + 56), *v138, &__dst);
    char v148 = v147;
    int v149 = *(_DWORD *)(v145 + 8);
    if ((v149 & 0x1C00) == 0x800)
    {
      v442 = v138;
      int v150 = v144;
      uint64_t v151 = v139;
      v152 = v141;
      *(_DWORD *)(v145 + 8) = v149 | 4;
      v153 = *(unsigned __int8 **)(v145 + 24);
      int v154 = *v153;
      if (v154 == 4)
      {
        if ((*(uint64_t (**)(void))(*((void *)v153 - 1) + 48))()) {
          goto LABEL_193;
        }
        int v154 = *v153;
      }
      if (v154 == 2 && *(_WORD *)(v153 + 1) == 29)
      {
LABEL_193:
        v141 = v152;
        unint64_t v139 = v151;
        int v144 = v150;
        uint64_t v138 = v442;
        goto LABEL_295;
      }
      v141 = v152;
      unint64_t v139 = v151;
      int v144 = v150;
      uint64_t v138 = v442;
      if (((v146 & 0x200 | v447 & 0x800 | v447 & 0x400) != 0) | v148 & 1)
      {
LABEL_197:
        if (!(v146 & 0x200 | v447 & 0x800 | v447 & 0x400)) {
          goto LABEL_295;
        }
        int v155 = *(_DWORD *)(v145 + 8);
        if (v155)
        {
          uint64_t v156 = *(void *)v145;
          unint64_t v157 = *(void *)v145 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_DWORD *)(v145 + 8) & 0x1C00) == 0x800 && v157 == 0)
          {
            *(_DWORD *)(v145 + 8) = v155 | 4;
            unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v145 + 24));
            uint64_t v156 = *(void *)v145 & 7 | AssociatedFragment;
            *(void *)uint64_t v145 = v156;
            if (!AssociatedFragment)
            {
LABEL_204:
              if ((v156 & 4) != 0)
              {
                BOOL v161 = *(uint64_t **)(v145 - 8);
                uint64_t v162 = *v161;
                std::string::size_type v159 = (std::string::size_type)(v161 + 2);
                uint64_t v160 = v162;
              }
              else
              {
                std::string::size_type v159 = 0;
                uint64_t v160 = 0;
              }
              LOWORD(v472) = 1283;
              v163 = "Undefined temporary symbol ";
LABEL_294:
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
              __dst.__r_.__value_.__r.__words[2] = v159;
              uint64_t v471 = v160;
              llvm::MCContext::reportError((uint64_t)v424, 0, (uint64_t)&__dst);
              goto LABEL_295;
            }
          }
          else if (!v157)
          {
            goto LABEL_204;
          }
        }
        goto LABEL_217;
      }
      int v149 = *(_DWORD *)(v145 + 8);
    }
    else if (((v146 & 0x200 | v447 & 0x800 | v447 & 0x400) != 0) | v147 & 1)
    {
      goto LABEL_197;
    }
    if ((v149 & 0x1C00) == 0x800)
    {
      if ((*(void *)v145 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        *(_DWORD *)(v145 + 8) = v149 | 4;
        unint64_t v164 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v145 + 24));
        *(void *)uint64_t v145 = *(void *)v145 & 7 | v164;
        if (!v164)
        {
          llvm::MCAsmLayout::getBaseSymbol((uint64_t **)v459, (const llvm::MCSymbol *)v145);
          goto LABEL_295;
        }
      }
      int v149 = *(_DWORD *)(v145 + 8);
    }
    if ((v149 & 1) != 0 || (*(_WORD *)(v145 + 12) & 7) == 3) {
      goto LABEL_295;
    }
LABEL_217:
    int Binding = llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v145);
    uint64_t v166 = *(void *)v145;
    unint64_t v167 = *(void *)v145 & 0xFFFFFFFFFFFFFFF8;
    if (!v167 && (*(_DWORD *)(v145 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v145 + 8) |= 4u;
      unint64_t v167 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v145 + 24));
      uint64_t v166 = *(void *)v145 & 7 | v167;
      *(void *)uint64_t v145 = v166;
    }
    if ((_UNKNOWN *)v167 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      unsigned int v168 = 65521;
      goto LABEL_220;
    }
    unsigned int v171 = *(_DWORD *)(v145 + 8);
    if (((v171 >> 10) & 7) - 3 <= 1)
    {
      if ((*(_DWORD *)(v145 + 8) & 0x1C00) == 0x1000) {
        unsigned int v168 = *(_DWORD *)(v145 + 16);
      }
      else {
        unsigned int v168 = 65522;
      }
      goto LABEL_220;
    }
    if ((v166 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v145 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v145 + 8) = v171 | 4;
      unint64_t v199 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v145 + 24));
      uint64_t v166 = *(void *)v145 & 7 | v199;
      *(void *)uint64_t v145 = v166;
      if (!v199)
      {
LABEL_237:
        if ((v447 & 0x400) == 0 || (v146 & 0x200) != 0)
        {
          unsigned int v168 = 0;
          goto LABEL_220;
        }
        if (v468)
        {
          uint64_t v175 = (v468 - 1) & ((v145 >> 4) ^ (v145 >> 9));
          uint64_t v176 = *(void *)(v467[0] + 16 * v175);
          if (v145 != v176)
          {
            int v207 = 1;
            while (v176 != -4096)
            {
              int v208 = v175 + v207++;
              uint64_t v175 = v208 & (v468 - 1);
              uint64_t v176 = *(void *)(v467[0] + 16 * v175);
              if (v145 == v176) {
                goto LABEL_241;
              }
            }
            unsigned int v168 = 0;
            goto LABEL_300;
          }
LABEL_241:
          uint64_t v177 = v467[0] + 16 * v175;
          goto LABEL_299;
        }
        goto LABEL_291;
      }
    }
    else if ((v166 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      goto LABEL_237;
    }
    unint64_t v200 = v166 & 0xFFFFFFFFFFFFFFF8;
    if ((v166 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v145 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v145 + 8) |= 4u;
      unint64_t v200 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v145 + 24));
      uint64_t v166 = *(void *)v145 & 7 | v200;
      *(void *)uint64_t v145 = v166;
    }
    uint64_t v201 = *(void *)(v200 + 16);
    if ((*(unsigned char *)(v201 + 44) & 4) == 0)
    {
      if ((v166 & 4) != 0)
      {
        size_t v203 = *(uint64_t **)(v145 - 8);
        uint64_t v204 = *v203;
        std::string::size_type v159 = (std::string::size_type)(v203 + 2);
        uint64_t v160 = v204;
      }
      else
      {
        std::string::size_type v159 = 0;
        uint64_t v160 = 0;
      }
      LOWORD(v472) = 1283;
      v163 = "Undefined section reference: ";
      goto LABEL_294;
    }
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      unint64_t v202 = *(void *)(v201 + 208);
      if (v202 >= 4 && *(_DWORD *)(*(void *)(v201 + 200) + v202 - 4) == 1870095406) {
        goto LABEL_295;
      }
    }
    if (v466)
    {
      uint64_t v205 = (v466 - 1) & ((v201 >> 4) ^ (v201 >> 9));
      uint64_t v206 = *(void *)(v465[0] + 16 * v205);
      if (v201 != v206)
      {
        int v209 = 1;
        while (v206 != -4096)
        {
          int v210 = v205 + v209++;
          uint64_t v205 = v210 & (v466 - 1);
          uint64_t v206 = *(void *)(v465[0] + 16 * v205);
          if (v201 == v206) {
            goto LABEL_298;
          }
        }
        unsigned int v168 = 0;
        goto LABEL_300;
      }
LABEL_298:
      uint64_t v177 = v465[0] + 16 * v205;
LABEL_299:
      unsigned int v168 = *(_DWORD *)(v177 + 8);
      goto LABEL_300;
    }
LABEL_291:
    unsigned int v168 = 0;
LABEL_300:
    v421 |= v168 >> 8 > 0xFE;
LABEL_220:
    v434 = v141;
    if ((v166 & 4) != 0)
    {
      uint64_t v172 = *(uint64_t **)(v145 - 8);
      uint64_t v173 = *v172;
      v169 = v172 + 2;
      uint64_t v170 = v173;
    }
    else
    {
      v169 = 0;
      uint64_t v170 = 0;
    }
    if ((*(_WORD *)(v145 + 12) & 7) == 3)
    {
      uint64_t v170 = 0;
      v169 = 0;
      if (Binding) {
        goto LABEL_228;
      }
    }
    else
    {
      unsigned int v174 = sub_1CD0B03C8(v169, (uint64_t)v169 + v170);
      llvm::StringTableBuilder::add(a1 + 32, (uint64_t)v169, v170 | ((unint64_t)v174 << 32));
      if (Binding)
      {
LABEL_228:
        if (v430 < (uint64_t *)v426)
        {
          uint64_t *v430 = v145;
          v430[1] = (uint64_t)v169;
          v430[2] = v170;
          *((_DWORD *)v430 + 6) = v168;
          *((_DWORD *)v430 + 7) = v144;
          v430 += 4;
LABEL_233:
          v141 = v434;
          goto LABEL_295;
        }
        int v178 = v144;
        int v179 = v139;
        uint64_t v180 = ((char *)v430 - v434) >> 5;
        unint64_t v181 = v180 + 1;
        if ((unint64_t)(v180 + 1) >> 59) {
          goto LABEL_535;
        }
        if ((v426 - v434) >> 4 > v181) {
          unint64_t v181 = (v426 - v434) >> 4;
        }
        if ((unint64_t)(v426 - v434) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v182 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v182 = v181;
        }
        if (v182)
        {
          if (v182 >> 59) {
            goto LABEL_536;
          }
          unint64_t v449 = v182;
          char v183 = (char *)operator new(32 * v182);
          unint64_t v182 = v449;
        }
        else
        {
          char v183 = 0;
        }
        v189 = &v183[32 * v180];
        *(void *)v189 = v145;
        *((void *)v189 + 1) = v169;
        *((void *)v189 + 2) = v170;
        *((_DWORD *)v189 + 6) = v168;
        *((_DWORD *)v189 + 7) = v178;
        size_t v190 = (char *)v430;
        if (v430 == (uint64_t *)v434)
        {
          uint64_t v191 = &v183[32 * v180];
          unint64_t v139 = v179;
        }
        else
        {
          uint64_t v194 = &v183[32 * v180];
          unint64_t v139 = v179;
          do
          {
            long long v195 = *((_OWORD *)v190 - 1);
            uint64_t v191 = v194 - 32;
            *((_OWORD *)v194 - 2) = *((_OWORD *)v190 - 2);
            *((_OWORD *)v194 - 1) = v195;
            v190 -= 32;
            v194 -= 32;
          }
          while (v190 != v434);
        }
        v426 = &v183[32 * v182];
        v430 = (uint64_t *)(v189 + 32);
        int v144 = v178;
        if (v434) {
          operator delete(v434);
        }
        v141 = v191;
        goto LABEL_295;
      }
    }
    if (v139 < v425)
    {
      *(void *)unint64_t v139 = v145;
      *((void *)v139 + 1) = v169;
      *((void *)v139 + 2) = v170;
      *((_DWORD *)v139 + 6) = v168;
      *((_DWORD *)v139 + 7) = v144;
      v139 += 32;
      goto LABEL_233;
    }
    int v448 = v144;
    char v184 = v139;
    uint64_t v185 = (v139 - v432) >> 5;
    unint64_t v186 = v185 + 1;
    if ((unint64_t)(v185 + 1) >> 59) {
      goto LABEL_535;
    }
    if ((v425 - v432) >> 4 > v186) {
      unint64_t v186 = (v425 - v432) >> 4;
    }
    if ((unint64_t)(v425 - v432) >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v187 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v187 = v186;
    }
    if (v187)
    {
      if (v187 >> 59) {
        goto LABEL_536;
      }
      unint64_t v192 = v187;
      size_t v188 = (char *)operator new(32 * v187);
      unint64_t v187 = v192;
    }
    else
    {
      size_t v188 = 0;
    }
    uint64_t v193 = &v188[32 * v185];
    *(void *)uint64_t v193 = v145;
    *((void *)v193 + 1) = v169;
    *((void *)v193 + 2) = v170;
    *((_DWORD *)v193 + 6) = v168;
    *((_DWORD *)v193 + 7) = v448;
    if (v184 == v432)
    {
      v432 = &v188[32 * v185];
      v141 = v434;
    }
    else
    {
      uint64_t v196 = &v188[32 * v185];
      v141 = v434;
      do
      {
        long long v197 = *((_OWORD *)v184 - 1);
        *((_OWORD *)v196 - 2) = *((_OWORD *)v184 - 2);
        *((_OWORD *)v196 - 1) = v197;
        v196 -= 32;
        v184 -= 32;
      }
      while (v184 != v432);
      char v184 = v432;
      v432 = v196;
    }
    v425 = &v188[32 * v187];
    unint64_t v139 = v193 + 32;
    int v144 = v448;
    if (v184) {
      operator delete(v184);
    }
LABEL_295:
    ++v138;
    ++v144;
  }
  while (v138 != (uint64_t *)v456);
  if (v421)
  {
    *(void *)v477 = ".symtab_shndx";
    __int16 v478 = 259;
    LOWORD(v472) = 257;
    uint64_t v211 = llvm::MCContext::getELFSection(v424, (const llvm::Twine *)v477, 18, 0, 4, (const llvm::Twine *)&__dst, 0, -1, 0);
    int v212 = sub_1CCBA0E9C((void *)a1, v211);
    *(unsigned char *)(v211 + 24) = 2;
    uint64_t v213 = (v212 - 1);
  }
  else
  {
    uint64_t v213 = 0xFFFFFFFFLL;
  }
  uint64_t v446 = v213;
  uint64_t v142 = v422 - v129;
  uint64_t v143 = v422;
  v140 = v432;
LABEL_317:
  unint64_t v214 = v142 & 0xFFFFFFFFFFFFFFE0;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 32), 1);
  if (v143 != v129) {
    *(void *)(v129 + 24) = 0;
  }
  v433 = v140;
  v435 = (uint64_t *)v141;
  uint64_t v215 = v129 + v214;
  if (v140 == v139)
  {
    int v216 = 1;
  }
  else
  {
    v457 = (llvm::MCContext *)v139;
    int v217 = 1;
    char v218 = (llvm::MCContext *)v140;
    do
    {
      uint64_t v219 = v129;
      BOOL v64 = v129 == v215;
      uint64_t v129 = v215;
      if (!v64)
      {
        while (*(void *)(v219 + 24) <= (unint64_t)*((unsigned int *)v218 + 7))
        {
          char v220 = *(unsigned char *)(v219 + 23);
          BOOL v221 = v220 < 0;
          if (v220 >= 0) {
            int v222 = (void *)v219;
          }
          else {
            int v222 = *(void **)v219;
          }
          uint64_t v223 = v220 & 0x7F;
          if (v221) {
            uint64_t v224 = *(void *)(v219 + 8);
          }
          else {
            uint64_t v224 = v223;
          }
          unsigned int v225 = sub_1CD0B03C8(v222, (uint64_t)v222 + v224);
          unsigned int Offset = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v222, v224 | ((unint64_t)v225 << 32));
          sub_1CCBA1040((uint64_t)v480, Offset, 4, 0, 0, 0, 0xFFF1u, 1);
          ++v217;
          v219 += 32;
          if (v219 == v215)
          {
            uint64_t v129 = v215;
            goto LABEL_333;
          }
        }
        uint64_t v129 = v219;
      }
LABEL_333:
      uint64_t v227 = *(void *)v218;
      if ((*(_WORD *)(*(void *)v218 + 12) & 7) == 3)
      {
        uint64_t v228 = 0;
      }
      else
      {
        v229 = (void *)*((void *)v218 + 1);
        uint64_t v230 = *((void *)v218 + 2);
        unsigned int v231 = sub_1CD0B03C8(v229, (uint64_t)v229 + v230);
        uint64_t v228 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v229, v230 | ((unint64_t)v231 << 32));
        uint64_t v227 = *(void *)v218;
      }
      int v216 = v217 + 1;
      *(_DWORD *)(v227 + 16) = v217;
      ((void (*)(char *, uint64_t, llvm::MCContext *, llvm::MCAsmLayout *))loc_1CCBA13DC)(v480, v228, v218, v459);
      char v218 = (llvm::MCContext *)((char *)v218 + 32);
      ++v217;
    }
    while (v218 != v457);
  }
  if (v129 == v215)
  {
    int v232 = v435;
  }
  else
  {
    int v232 = v435;
    do
    {
      char v233 = *(unsigned char *)(v129 + 23);
      BOOL v234 = v233 < 0;
      if (v233 >= 0) {
        v235 = (void *)v129;
      }
      else {
        v235 = *(void **)v129;
      }
      uint64_t v236 = v233 & 0x7F;
      if (v234) {
        uint64_t v237 = *(void *)(v129 + 8);
      }
      else {
        uint64_t v237 = v236;
      }
      unsigned int v238 = sub_1CD0B03C8(v235, (uint64_t)v235 + v237);
      unsigned int v239 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v235, v237 | ((unint64_t)v238 << 32));
      sub_1CCBA1040((uint64_t)v480, v239, 4, 0, 0, 0, 0xFFF1u, 1);
      ++v216;
      v129 += 32;
    }
    while (v129 != v215);
  }
  *(_DWORD *)(a1 + 80) = v216;
  a3 = v459;
  if (v232 != v430)
  {
    v240 = v232;
    do
    {
      int v241 = (void *)v240[1];
      uint64_t v242 = v240[2];
      unsigned int v243 = sub_1CD0B03C8(v241, (uint64_t)v241 + v242);
      uint64_t v244 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v241, v242 | ((unint64_t)v243 << 32));
      *(_DWORD *)(*v240 + 16) = v216;
      ((void (*)(char *, uint64_t, uint64_t *, llvm::MCAsmLayout *))loc_1CCBA13DC)(v480, v244, v240, v459);
      v240 += 4;
      ++v216;
    }
    while (v240 != v430);
  }
  int v245 = *(void **)(a1 + 8);
  uint64_t v246 = (*(uint64_t (**)(void *))(*v245 + 80))(v245) + v245[4] - v245[2];
  v247 = sub_1CD5A4928(&v461, (unint64_t)v479, &v479);
  v247[5] = (uint64_t *)v423;
  v247[6] = (uint64_t *)v246;
  v248 = (unsigned int *)*((void *)&v481 + 1);
  uint64_t v249 = v482 - *((void *)&v481 + 1);
  if (v482 != *((void *)&v481 + 1))
  {
    uint64_t v250 = *(void **)(a1 + 8);
    uint64_t v251 = (*(uint64_t (**)(void *))(*v250 + 80))(v250);
    uint64_t v252 = v250[2];
    uint64_t v253 = v251 + v250[4];
    unint64_t v254 = *(void *)(*(void *)(a1 + 96) + 8 * v446);
    __dst.__r_.__value_.__r.__words[0] = v254;
    unint64_t v255 = v249 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      unsigned int v257 = *v248++;
      unsigned int v256 = v257;
      v258 = *(llvm::raw_ostream **)(a1 + 8);
      unsigned int v259 = bswap32(v257);
      if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
        unsigned int v256 = v259;
      }
      *(_DWORD *)v477 = v256;
      llvm::raw_ostream::write(v258, v477, 4uLL);
      v255 -= 4;
    }
    while (v255);
    v260 = (uint64_t *)(v253 - v252);
    v261 = *(void **)(a1 + 8);
    uint64_t v262 = (*(uint64_t (**)(void *))(*v261 + 80))(v261) + v261[4] - v261[2];
    v263 = sub_1CD5A4928(&v461, v254, (uint64_t **)&__dst);
    v263[5] = v260;
    v263[6] = (uint64_t *)v262;
  }
  if (v435) {
    operator delete(v435);
  }
  if (v433) {
    operator delete(v433);
  }
  if (*((void *)&v481 + 1))
  {
    uint64_t v482 = *((void *)&v481 + 1);
    operator delete(*((void **)&v481 + 1));
  }
  if (__p != (uint64_t *)v453)
  {
    v272 = (llvm::MCContext *)__p;
    while (1)
    {
      __dst.__r_.__value_.__r.__words[0] = 0;
      v458 = v272;
      std::string::size_type v273 = *(void *)v272;
      __dst.__r_.__value_.__r.__words[0] = v273;
      uint64_t v274 = 1 << *(unsigned char *)(v273 + 24);
      v275 = *(void **)(a1 + 8);
      uint64_t v276 = v275[4] - v275[2] + (*(uint64_t (**)(void *))(*v275 + 80))(v275);
      v277 = *(llvm::raw_ostream **)(a1 + 8);
      uint64_t v443 = (v276 + v274 - 1) & -(uint64_t)v274;
      unsigned int v278 = v443 - v276;
      if ((v443 - v276) >= 0x50)
      {
        do
        {
          if (v278 >= 0x4F) {
            size_t v347 = 79;
          }
          else {
            size_t v347 = v278;
          }
          v277 = llvm::raw_ostream::write(v277, "", v347);
          v278 -= v347;
        }
        while (v278);
      }
      else
      {
        llvm::raw_ostream::write(v277, "", (v443 - v276));
      }
      uint64_t v279 = *(void *)(v273 + 248);
      unint64_t v280 = *(void *)v279 & 0xFFFFFFFFFFFFFFF8;
      if (!v280 && (*(_DWORD *)(v279 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v279 + 8) |= 4u;
        unint64_t v280 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v279 + 24));
        *(void *)uint64_t v279 = *(void *)v279 & 7 | v280;
      }
      unint64_t v450 = v273;
      uint64_t v281 = *(void *)(v280 + 16);
      uint64_t v282 = *(void *)a1 + 16;
      *(void *)v480 = v281;
      v283 = sub_1CD4F7F5C(v282, (uint64_t *)v480);
      v285 = v283 + 1;
      unint64_t v284 = v283[1];
      uint64_t v286 = v283[2];
      v287 = (_OWORD *)(v286 - 48);
      if (v284 != v286 && v284 < (unint64_t)v287)
      {
        unint64_t v289 = v284 + 48;
        do
        {
          long long v290 = *(_OWORD *)(v289 - 48);
          long long v291 = *(_OWORD *)(v289 - 32);
          long long v292 = *(_OWORD *)(v289 - 16);
          long long v294 = v287[1];
          long long v293 = v287[2];
          *(_OWORD *)(v289 - 48) = *v287;
          *(_OWORD *)(v289 - 32) = v294;
          *(_OWORD *)(v289 - 16) = v293;
          v287[1] = v291;
          v287[2] = v292;
          _OWORD *v287 = v290;
          v287 -= 3;
          BOOL v60 = v289 >= (unint64_t)v287;
          v289 += 48;
        }
        while (!v60);
      }
      (*(void (**)(void, void *, uint64_t *))(**(void **)(*(void *)a1 + 8) + 40))(*(void *)(*(void *)a1 + 8), v438, v285);
      unint64_t v295 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v283[2] - v283[1]) >> 4);
      uint64_t v296 = -1431655765 * ((uint64_t)(v283[2] - v283[1]) >> 4);
      if (v296) {
        break;
      }
LABEL_426:
      v344 = *(void **)(a1 + 8);
      uint64_t v345 = (*(uint64_t (**)(void *))(*v344 + 80))(v344) + v344[4] - v344[2];
      v346 = sub_1CD5A4928(&v461, v450, (uint64_t **)&__dst);
      v346[5] = (uint64_t *)v443;
      v346[6] = (uint64_t *)v345;
      v272 = (llvm::MCContext *)((char *)v458 + 8);
      a3 = v459;
      if ((llvm::MCContext *)((char *)v458 + 8) == v453) {
        goto LABEL_363;
      }
    }
    int v297 = *(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & (*(_DWORD *)(v281 + 224) != 1879002121);
    unsigned int v298 = v295 - 1;
    while (1)
    {
      uint64_t v299 = *v285;
      uint64_t v300 = *v285 + 48 * v298;
      uint64_t v301 = *(void *)(v300 + 8);
      if (v301) {
        uint64_t v302 = *(unsigned int *)(v301 + 16);
      }
      else {
        uint64_t v302 = 0;
      }
      unint64_t v303 = *(void *)v300;
      if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0)
      {
        v329 = *(llvm::raw_ostream **)(a1 + 8);
        unint64_t v330 = bswap64(v303);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unint64_t v303 = v330;
        }
        *(void *)v480 = v303;
        llvm::raw_ostream::write(v329, v480, 8uLL);
        if (*(_WORD *)(*(void *)(*(void *)a1 + 8) + 10) == 8)
        {
          v331 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v332 = bswap32(v302);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v333 = v332;
          }
          else {
            unsigned int v333 = v302;
          }
          *(_DWORD *)v480 = v333;
          llvm::raw_ostream::write(v331, v480, 4uLL);
          uint64_t v334 = v299 + 48 * v298;
          v335 = *(llvm::raw_ostream **)(a1 + 8);
          v480[0] = *(unsigned char *)(v334 + 19);
          llvm::raw_ostream::write(v335, v480, 1uLL);
          v336 = *(llvm::raw_ostream **)(a1 + 8);
          v480[0] = *(_WORD *)(v334 + 18);
          llvm::raw_ostream::write(v336, v480, 1uLL);
          v337 = *(llvm::raw_ostream **)(a1 + 8);
          v480[0] = BYTE1(*(_DWORD *)(v334 + 16));
          llvm::raw_ostream::write(v337, v480, 1uLL);
          v338 = *(llvm::raw_ostream **)(a1 + 8);
          v480[0] = *(_DWORD *)(v334 + 16);
          size_t v339 = 1;
        }
        else
        {
          unint64_t v340 = *(unsigned int *)(v299 + 48 * v298 + 16) | (unint64_t)(v302 << 32);
          v338 = *(llvm::raw_ostream **)(a1 + 8);
          unint64_t v341 = bswap64(v340);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unint64_t v340 = v341;
          }
          *(void *)v480 = v340;
          size_t v339 = 8;
        }
        llvm::raw_ostream::write(v338, v480, v339);
        if (!v297) {
          goto LABEL_425;
        }
        unint64_t v342 = *(void *)(v299 + 48 * v298 + 24);
        v327 = *(llvm::raw_ostream **)(a1 + 8);
        unint64_t v343 = bswap64(v342);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unint64_t v342 = v343;
        }
        *(void *)v480 = v342;
        size_t v328 = 8;
      }
      else
      {
        v304 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v305 = bswap32(v303);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          LODWORD(v303) = v305;
        }
        *(_DWORD *)v480 = v303;
        llvm::raw_ostream::write(v304, v480, 4uLL);
        uint64_t v306 = v299 + 48 * v298;
        int v308 = *(unsigned __int8 *)(v306 + 16);
        v307 = (unsigned int *)(v306 + 16);
        unsigned int v309 = v308 | (v302 << 8);
        v310 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v311 = bswap32(v309);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v309 = v311;
        }
        *(_DWORD *)v480 = v309;
        llvm::raw_ostream::write(v310, v480, 4uLL);
        if (v297)
        {
          unsigned int v312 = *(_DWORD *)(v299 + 48 * v298 + 24);
          v313 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v314 = bswap32(v312);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v312 = v314;
          }
          *(_DWORD *)v480 = v312;
          llvm::raw_ostream::write(v313, v480, 4uLL);
        }
        if (*(_WORD *)(*(void *)(*(void *)a1 + 8) + 10) != 8) {
          goto LABEL_425;
        }
        unsigned int v315 = *v307;
        if ((*v307 & 0xFF00) != 0)
        {
          unsigned int v316 = *(_DWORD *)v300;
          v317 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v318 = bswap32(*(_DWORD *)v300);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v316 = v318;
          }
          *(_DWORD *)v480 = v316;
          llvm::raw_ostream::write(v317, v480, 4uLL);
          unsigned int v319 = BYTE1(v315);
          v320 = *(llvm::raw_ostream **)(a1 + 8);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v319 = v315 >> 8 << 24;
          }
          *(_DWORD *)v480 = v319;
          llvm::raw_ostream::write(v320, v480, 4uLL);
          v321 = *(llvm::raw_ostream **)(a1 + 8);
          *(_DWORD *)v480 = 0;
          llvm::raw_ostream::write(v321, v480, 4uLL);
          unsigned int v315 = *v307;
        }
        if ((v315 & 0xFF0000) == 0) {
          goto LABEL_425;
        }
        unsigned int v322 = *(_DWORD *)v300;
        v323 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v324 = bswap32(*(_DWORD *)v300);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v322 = v324;
        }
        *(_DWORD *)v480 = v322;
        llvm::raw_ostream::write(v323, v480, 4uLL);
        unsigned int v325 = BYTE2(v315);
        v326 = *(llvm::raw_ostream **)(a1 + 8);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v325 = HIWORD(v315) << 24;
        }
        *(_DWORD *)v480 = v325;
        llvm::raw_ostream::write(v326, v480, 4uLL);
        v327 = *(llvm::raw_ostream **)(a1 + 8);
        *(_DWORD *)v480 = 0;
        size_t v328 = 4;
      }
      llvm::raw_ostream::write(v327, v480, v328);
LABEL_425:
      --v298;
      if (!--v296) {
        goto LABEL_426;
      }
    }
  }
LABEL_363:
  if (*(unsigned char *)(*(void *)a1 + 65))
  {
    v264 = *(void **)(a1 + 8);
    uint64_t v265 = (*(uint64_t (**)(void *))(*v264 + 80))(v264) + v264[4] - v264[2];
    uint64_t v266 = *(void *)(*(void *)a1 + 72);
    uint64_t v267 = *(void *)(*(void *)a1 + 80);
    while (v266 != v267)
    {
      unint64_t v268 = *(unsigned int *)(*(void *)v266 + 16);
      v269 = *(llvm::raw_ostream **)(a1 + 8);
      do
      {
        char v270 = v268 & 0x7F | ((v268 > 0x7F) << 7);
        v271 = (char *)*((void *)v269 + 4);
        if ((unint64_t)v271 >= *((void *)v269 + 3))
        {
          v269 = llvm::raw_ostream::write(v269, v270);
        }
        else
        {
          *((void *)v269 + 4) = v271 + 1;
          char *v271 = v270;
        }
        BOOL v133 = v268 > 0x7F;
        v268 >>= 7;
      }
      while (v133);
      v266 += 8;
    }
    v348 = *(void **)(a1 + 8);
    uint64_t v349 = (*(uint64_t (**)(void *))(*v348 + 80))(v348) + v348[4] - v348[2];
    v350 = sub_1CD5A4928(&v461, (unint64_t)v460, &v460);
    v350[5] = (uint64_t *)v265;
    v350[6] = (uint64_t *)v349;
  }
LABEL_436:
  v351 = *(void **)(a1 + 8);
  uint64_t v352 = (*(uint64_t (**)(void *))(*v351 + 80))(v351) + v351[4] - v351[2];
  v455 = (llvm::MCContext *)(a1 + 32);
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 32), *(llvm::raw_ostream **)(a1 + 8));
  v353 = *(void **)(a1 + 8);
  uint64_t v354 = (*(uint64_t (**)(void *))(*v353 + 80))(v353) + v353[4] - v353[2];
  v355 = sub_1CD5A4928(&v461, (unint64_t)ELFSection, &ELFSection);
  v355[5] = (uint64_t *)v352;
  v355[6] = (uint64_t *)v354;
  v356 = *(void **)(a1 + 8);
  char v357 = *(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12);
  uint64_t v358 = v356[4] - v356[2] + (*(uint64_t (**)(void *))(*v356 + 80))(v356);
  uint64_t v359 = -8;
  if ((v357 & 2) == 0) {
    uint64_t v359 = -4;
  }
  uint64_t v360 = 7;
  if ((v357 & 2) == 0) {
    uint64_t v360 = 3;
  }
  uint64_t v56 = (v358 + v360) & v359;
  v361 = *(llvm::raw_ostream **)(a1 + 8);
  LODWORD(v49) = v56 - v358;
  if ((v56 - v358) < 0x50)
  {
    llvm::raw_ostream::write(v361, "", (v56 - v358));
    goto LABEL_442;
  }
  do
  {
LABEL_538:
    if (v49 >= 0x4F) {
      size_t v419 = 79;
    }
    else {
      size_t v419 = v49;
    }
    v361 = llvm::raw_ostream::write(v361, "", v419);
    LODWORD(v49) = v49 - v419;
  }
  while (v49);
LABEL_442:
  uint64_t v362 = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3;
  if ((v362 + 1) >> 8 > 0xFE) {
    unint64_t v363 = (v362 + 1);
  }
  else {
    unint64_t v363 = 0;
  }
  sub_1CCBA1720(a1, 0, 0, 0, 0, v363, 0, 0, 0, 0);
  v364 = *(unint64_t **)(a1 + 96);
  v454 = *(unint64_t **)(a1 + 104);
  if (v364 == v454)
  {
    uint64_t v365 = *(void *)(a1 + 96);
    goto LABEL_517;
  }
  v436 = (void *)v56;
  uint64_t v451 = v465[0];
  int v444 = v466;
  unsigned int v439 = v466 - 1;
  while (2)
  {
    unint64_t v366 = *v364;
    int v367 = *(_DWORD *)(*v364 + 224);
    if (v367 == 17) {
      unsigned int v368 = *(_DWORD *)((*(void *)(v366 + 240) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unsigned int v368 = 0;
    }
    v369 = v462[0];
    if (!v462[0]) {
      goto LABEL_460;
    }
    v370 = v462;
    do
    {
      v371 = v370;
      v372 = v369;
      unint64_t v373 = v369[4];
      v374 = v369 + 1;
      if (v373 >= v366)
      {
        v374 = v372;
        v370 = (void **)v372;
      }
      v369 = (void *)*v374;
    }
    while (v369);
    if (v370 == v462) {
      goto LABEL_460;
    }
    if (v373 >= v366) {
      v371 = (void **)v372;
    }
    if (v366 < (unint64_t)v371[4]) {
LABEL_460:
    }
      v370 = v462;
    if (v367 == 8)
    {
      v375 = *(const llvm::MCFragment **)(v366 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v375);
      uint64_t v376 = *((void *)v375 + 4);
      unint64_t v377 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v375) + v376;
      unint64_t v378 = (unint64_t)v370[5];
      int v367 = *(_DWORD *)(v366 + 224);
    }
    else
    {
      unint64_t v378 = (unint64_t)v370[5];
      unint64_t v377 = (unint64_t)v370[6] - v378;
    }
    unsigned int v379 = 0;
    if (v367 <= 16)
    {
      if (v367 == 2)
      {
        unsigned int v379 = *(_DWORD *)(a1 + 80);
        unsigned int v380 = *(_DWORD *)(a1 + 84);
      }
      else
      {
        BOOL v381 = v367 == 4 || v367 == 9;
        unsigned int v380 = 0;
        if (!v381) {
          goto LABEL_494;
        }
        unsigned int v380 = *(_DWORD *)(a1 + 88);
        uint64_t v382 = *(void *)(v366 + 248);
        unint64_t v383 = *(void *)v382 & 0xFFFFFFFFFFFFFFF8;
        if (!v383 && (*(_DWORD *)(v382 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v382 + 8) |= 4u;
          unint64_t v383 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v382 + 24));
          *(void *)uint64_t v382 = *(void *)v382 & 7 | v383;
        }
        if (v444)
        {
          uint64_t v384 = *(void *)(v383 + 16);
          uint64_t v385 = ((v384 >> 4) ^ (v384 >> 9)) & v439;
          uint64_t v386 = *(void *)(v451 + 16 * v385);
          if (v384 == v386)
          {
LABEL_478:
            unsigned int v379 = *(_DWORD *)(v451 + 16 * v385 + 8);
            goto LABEL_494;
          }
          int v388 = 1;
          while (v386 != -4096)
          {
            int v389 = v385 + v388++;
            uint64_t v385 = v389 & v439;
            uint64_t v386 = *(void *)(v451 + 16 * v385);
            if (v384 == v386) {
              goto LABEL_478;
            }
          }
        }
        unsigned int v379 = 0;
      }
      goto LABEL_494;
    }
    if (v367 > 1879002114)
    {
      BOOL v387 = v367 == 1879002115 || v367 == 1879002121;
      unsigned int v380 = 0;
      if (!v387) {
        goto LABEL_494;
      }
      goto LABEL_484;
    }
    if (v367 == 17)
    {
      unsigned int v380 = *(_DWORD *)(a1 + 88);
      unsigned int v379 = v368;
      goto LABEL_494;
    }
    unsigned int v380 = 0;
    if (v367 == 18)
    {
LABEL_484:
      unsigned int v379 = 0;
      unsigned int v380 = *(_DWORD *)(a1 + 88);
    }
LABEL_494:
    if ((*(unsigned char *)(v366 + 228) & 0x80) != 0)
    {
      uint64_t v390 = *(void *)(v366 + 248);
      if (v390)
      {
        uint64_t v391 = *(void *)v390;
        unint64_t v392 = *(void *)v390 & 0xFFFFFFFFFFFFFFF8;
        if (!v392 && (*(_DWORD *)(v390 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v390 + 8) |= 4u;
          unint64_t v392 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v390 + 24));
          uint64_t v391 = *(void *)v390 & 7 | v392;
          *(void *)uint64_t v390 = v391;
        }
        if (v392)
        {
          unint64_t v393 = v391 & 0xFFFFFFFFFFFFFFF8;
          if ((v391 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v390 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v390 + 8) |= 4u;
            unint64_t v393 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v390 + 24));
            uint64_t v391 = *(void *)v390 & 7 | v393;
            *(void *)uint64_t v390 = v391;
          }
          if ((_UNKNOWN *)v393 != llvm::MCSymbol::AbsolutePseudoFragment)
          {
            unint64_t v394 = v391 & 0xFFFFFFFFFFFFFFF8;
            if ((v391 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v390 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v390 + 8) |= 4u;
              unint64_t v394 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v390 + 24));
              *(void *)uint64_t v390 = *(void *)v390 & 7 | v394;
            }
            if (v444)
            {
              uint64_t v395 = *(void *)(v394 + 16);
              uint64_t v396 = ((v395 >> 4) ^ (v395 >> 9)) & v439;
              uint64_t v397 = *(void *)(v451 + 16 * v396);
              if (v395 == v397)
              {
LABEL_503:
                unsigned int v380 = *(_DWORD *)(v451 + 16 * v396 + 8);
                goto LABEL_515;
              }
              int v398 = 1;
              while (v397 != -4096)
              {
                int v399 = v396 + v398++;
                uint64_t v396 = v399 & v439;
                uint64_t v397 = *(void *)(v451 + 16 * v396);
                if (v395 == v397) {
                  goto LABEL_503;
                }
              }
            }
            unsigned int v380 = 0;
          }
        }
      }
    }
LABEL_515:
    v400 = *(void **)(v366 + 200);
    uint64_t v401 = *(void *)(v366 + 208);
    unsigned int v402 = sub_1CD0B03C8(v400, (uint64_t)v400 + v401);
    unsigned int v403 = llvm::StringTableBuilder::getOffset((uint64_t)v455, (uint64_t)v400, v401 | ((unint64_t)v402 << 32));
    sub_1CCBA1720(a1, v403, *(_DWORD *)(v366 + 224), *(unsigned int *)(v366 + 228), v378, v377, v380, v379, (1 << *(unsigned char *)(v366 + 24)), *(unsigned int *)(v366 + 236));
    ++v364;
    a3 = v459;
    if (v364 != v454) {
      continue;
    }
    break;
  }
  v364 = *(unint64_t **)(a1 + 96);
  uint64_t v365 = *(void *)(a1 + 104);
  uint64_t v56 = (uint64_t)v436;
LABEL_517:
  uint64_t v404 = (v365 - (uint64_t)v364) >> 3;
  if ((unint64_t)(v404 - 65279) >= 0xFFFFFFFFFFFF0100) {
    unsigned int v405 = v404 + 1;
  }
  else {
    unsigned int v405 = 0;
  }
  unsigned int v406 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v407 = bswap32(v405) >> 16;
  if (v406 >= 2) {
    LOWORD(v405) = v407;
  }
  LOWORD(__dst.__r_.__value_.__l.__data_) = v405;
  uint64_t v408 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0)
  {
    unint64_t v412 = bswap64(v56);
    if (v406 >= 2) {
      unint64_t v413 = v412;
    }
    else {
      unint64_t v413 = v56;
    }
    *(void *)v480 = v413;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v408 + 104))(v408, v480, 8, 40);
    uint64_t v411 = 60;
  }
  else
  {
    unsigned int v409 = bswap32(v56);
    if (v406 >= 2) {
      int v410 = v409;
    }
    else {
      int v410 = v56;
    }
    *(_DWORD *)v480 = v410;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v408 + 104))(v408, v480, 4, 32);
    uint64_t v411 = 48;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v408 + 104))(v408, &__dst, 2, v411);
  v414 = *(void **)(a1 + 8);
  uint64_t v415 = (*(uint64_t (**)(void *))(*v414 + 80))(v414);
  uint64_t v416 = v414[4];
  uint64_t v417 = v414[2];
  if (__p) {
    operator delete(__p);
  }
  sub_1CD40B1BC(v462[0]);
  sub_1CD4F4ECC(v464[0]);
  MEMORY[0x1D25D9CD0](v465[0], 8);
  MEMORY[0x1D25D9CD0](v467[0], 8);
  return v427 - (v429 + v428) + v416 + v415 - v417;
}

uint64_t sub_1CCBA0E9C(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)a1[13];
  unint64_t v4 = a1[14];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)a1[12];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      char v12 = (char *)operator new(8 * v11);
    }
    else
    {
      char v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)a1[12];
    }
    a1[12] = v13;
    a1[13] = v6;
    a1[14] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[13] = v6;
  uint64_t v16 = *(void **)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 208);
  unsigned int v17 = sub_1CD0B03C8(v16, (uint64_t)v16 + v15);
  llvm::StringTableBuilder::add((uint64_t)(a1 + 4), (uint64_t)v16, v15 | ((unint64_t)v17 << 32));
  return (a1[13] - a1[12]) >> 3;
}

llvm::raw_ostream *sub_1CCBA0FBC(uint64_t a1, unint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(*(void *)a1 + 8) + 12) & 2) != 0)
  {
    uint64_t v8 = *(llvm::raw_ostream **)(a1 + 8);
    unint64_t v9 = bswap64(a2);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = a2;
    }
    unint64_t v12 = v10;
    uint64_t v5 = (const char *)&v12;
    uint64_t v6 = v8;
    size_t v7 = 8;
  }
  else
  {
    uint64_t v2 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v3 = bswap32(a2);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      int v4 = v3;
    }
    else {
      int v4 = a2;
    }
    int v13 = v4;
    uint64_t v5 = (const char *)&v13;
    uint64_t v6 = v2;
    size_t v7 = 4;
  }
  return llvm::raw_ostream::write(v6, v5, v7);
}

llvm::raw_ostream *sub_1CCBA1040(uint64_t a1, unsigned int a2, char a3, unint64_t a4, unint64_t a5, char a6, unsigned int a7, int a8)
{
  unsigned int v8 = a7;
  char v9 = a6;
  char v12 = a3;
  if (a7 >> 8 < 0xFF) {
    a8 = 1;
  }
  unsigned int v17 = *(unsigned int **)(a1 + 16);
  uint64_t v18 = *(unsigned int **)(a1 + 24);
  uint64_t v16 = (char **)(a1 + 16);
  if (a8)
  {
    if (v17 == v18) {
      goto LABEL_43;
    }
    unint64_t v19 = *(void *)(a1 + 32);
    if ((unint64_t)v18 < v19)
    {
      unsigned int *v18 = 0;
      char v20 = v18 + 1;
LABEL_42:
      *(void *)(a1 + 24) = v20;
      goto LABEL_43;
    }
    char v61 = a3;
    char v62 = a6;
    uint64_t v23 = v18 - v17;
    unint64_t v24 = v23 + 1;
    if (!((unint64_t)(v23 + 1) >> 62))
    {
      uint64_t v25 = v19 - (void)v17;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (!v26)
      {
        unint64_t v27 = 0;
LABEL_33:
        int v31 = (unsigned int *)&v27[4 * v23];
        unsigned int *v31 = 0;
        unsigned int v32 = v31;
        do
        {
          unsigned int v33 = *--v18;
          *--unsigned int v32 = v33;
        }
        while (v18 != v17);
LABEL_39:
        char v20 = v31 + 1;
        *(void *)(a1 + 16) = v32;
        *(void *)(a1 + 24) = v31 + 1;
        *(void *)(a1 + 32) = &v27[4 * v26];
        char v12 = v61;
        if (v17) {
          operator delete(v17);
        }
        char v9 = v62;
        goto LABEL_42;
      }
      if (!(v26 >> 62))
      {
        unint64_t v27 = (char *)operator new(4 * v26);
        goto LABEL_33;
      }
LABEL_71:
      sub_1CB833614();
    }
    goto LABEL_70;
  }
  if (v17 == v18)
  {
    unint64_t v21 = *(unsigned int *)(a1 + 40);
    if (!v21) {
      goto LABEL_43;
    }
    sub_1CBF2A8C4(v16, v21);
    unsigned int v17 = *(unsigned int **)(a1 + 16);
    uint64_t v18 = *(unsigned int **)(a1 + 24);
  }
  if (v17 != v18)
  {
    unint64_t v22 = *(void *)(a1 + 32);
    if ((unint64_t)v18 < v22)
    {
      unsigned int *v18 = v8;
      char v20 = v18 + 1;
      goto LABEL_42;
    }
    char v61 = v12;
    char v62 = v9;
    uint64_t v28 = v18 - v17;
    unint64_t v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 62))
    {
      uint64_t v30 = v22 - (void)v17;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v29;
      }
      if (v26)
      {
        if (v26 >> 62) {
          goto LABEL_71;
        }
        unint64_t v27 = (char *)operator new(4 * v26);
      }
      else
      {
        unint64_t v27 = 0;
      }
      int v31 = (unsigned int *)&v27[4 * v28];
      unsigned int *v31 = v8;
      unsigned int v32 = v31;
      do
      {
        unsigned int v34 = *--v18;
        *--unsigned int v32 = v34;
      }
      while (v18 != v17);
      goto LABEL_39;
    }
LABEL_70:
    abort();
  }
LABEL_43:
  if (!a8) {
    unsigned int v8 = -1;
  }
  unint64_t v35 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
  unsigned int v36 = bswap32(a2);
  if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
    unsigned int v37 = v36;
  }
  else {
    unsigned int v37 = a2;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    *(_DWORD *)int v63 = v37;
    llvm::raw_ostream::write(v35, v63, 4uLL);
    uint64_t v38 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    v63[0] = v12;
    llvm::raw_ostream::write(v38, v63, 1uLL);
    uint64_t v39 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    v63[0] = v9;
    llvm::raw_ostream::write(v39, v63, 1uLL);
    __int16 v40 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unsigned int v41 = bswap32(v8) >> 16;
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      __int16 v42 = v41;
    }
    else {
      __int16 v42 = v8;
    }
    *(_WORD *)int v63 = v42;
    llvm::raw_ostream::write(v40, v63, 2uLL);
    uint64_t v43 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unint64_t v44 = bswap64(a4);
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      unint64_t v45 = v44;
    }
    else {
      unint64_t v45 = a4;
    }
    *(void *)int v63 = v45;
    llvm::raw_ostream::write(v43, v63, 8uLL);
    BOOL v46 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unint64_t v47 = bswap64(a5);
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      unint64_t v48 = v47;
    }
    else {
      unint64_t v48 = a5;
    }
    *(void *)int v63 = v48;
    size_t v49 = 8;
  }
  else
  {
    *(_DWORD *)int v63 = v37;
    llvm::raw_ostream::write(v35, v63, 4uLL);
    int v50 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unsigned int v51 = bswap32(a4);
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      int v52 = v51;
    }
    else {
      int v52 = a4;
    }
    *(_DWORD *)int v63 = v52;
    llvm::raw_ostream::write(v50, v63, 4uLL);
    uint64_t v53 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unsigned int v54 = bswap32(a5);
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      int v55 = v54;
    }
    else {
      int v55 = a5;
    }
    *(_DWORD *)int v63 = v55;
    llvm::raw_ostream::write(v53, v63, 4uLL);
    uint64_t v56 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    v63[0] = v12;
    llvm::raw_ostream::write(v56, v63, 1uLL);
    unsigned int v57 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    v63[0] = v9;
    llvm::raw_ostream::write(v57, v63, 1uLL);
    BOOL v46 = *(llvm::raw_ostream **)(*(void *)a1 + 8);
    unsigned int v58 = bswap32(v8) >> 16;
    if ((*(_DWORD *)(*(void *)a1 + 16) - 1) >= 2) {
      __int16 v59 = v58;
    }
    else {
      __int16 v59 = v8;
    }
    *(_WORD *)int v63 = v59;
    size_t v49 = 2;
  }
  uint64_t result = llvm::raw_ostream::write(v46, v63, v49);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

llvm::raw_ostream *sub_1CCBA1720(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned int a7, unsigned int a8, unint64_t a9, unint64_t a10)
{
  unsigned int v17 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v18 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = a2;
  }
  *(_DWORD *)uint64_t v30 = v19;
  llvm::raw_ostream::write(v17, v30, 4uLL);
  char v20 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v21 = bswap32(a3);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = a3;
  }
  *(_DWORD *)uint64_t v30 = v22;
  llvm::raw_ostream::write(v20, v30, 4uLL);
  sub_1CCBA0FBC(a1, a4);
  sub_1CCBA0FBC(a1, 0);
  sub_1CCBA0FBC(a1, a5);
  sub_1CCBA0FBC(a1, a6);
  uint64_t v23 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v24 = bswap32(a7);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = a7;
  }
  *(_DWORD *)uint64_t v30 = v25;
  llvm::raw_ostream::write(v23, v30, 4uLL);
  unint64_t v26 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v27 = bswap32(a8);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = a8;
  }
  *(_DWORD *)uint64_t v30 = v28;
  llvm::raw_ostream::write(v26, v30, 4uLL);
  sub_1CCBA0FBC(a1, a9);
  return sub_1CCBA0FBC(a1, a10);
}

uint64_t sub_1CCBA186C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D4E8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  sub_1CD6A1DBC((unsigned int *)(a1 + 16));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1CCBA190C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D4E8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  sub_1CD6A1DBC((unsigned int *)(a1 + 16));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBA19CC(uint64_t a1, void *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v6 = *(void *)(a1 + 96);
  int v7 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v13 = a1;
  uint64_t v14 = v6;
  int v15 = v7;
  int v16 = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v21 = 0x100000000;
  char v22 = 0;
  uint64_t v20 = 1;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  __p = 0;
  uint64_t v8 = sub_1CCB9E424((uint64_t)&v13, a2, a3);
  if (__p)
  {
    unsigned int v24 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v17, 8);
  uint64_t v9 = *(void *)(a1 + 104);
  int v10 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v13 = a1;
  uint64_t v14 = v9;
  int v15 = v10;
  int v16 = 2;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v21 = 0x100000000;
  char v22 = 0;
  uint64_t v20 = 1;
  unsigned int v24 = 0;
  uint64_t v25 = 0;
  __p = 0;
  uint64_t v11 = sub_1CCB9E424((uint64_t)&v13, a2, a3);
  if (__p)
  {
    unsigned int v24 = __p;
    operator delete(__p);
  }
  MEMORY[0x1D25D9CD0](v17, 8);
  return v11 + v8;
}

uint64_t sub_1CCBA1AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a4 + 208);
  if (v5 >= 4 && *(_DWORD *)(*(void *)(a4 + 200) + v5 - 4) == 1870095406)
  {
    uint64_t v8 = "A dwo section may not contain relocations";
LABEL_10:
    uint64_t v9 = v8;
    __int16 v10 = 259;
    llvm::MCContext::reportError(a2, a3, (uint64_t)&v9);
    return 0;
  }
  if (a5)
  {
    unint64_t v6 = *(void *)(a5 + 208);
    if (v6 >= 4 && *(_DWORD *)(*(void *)(a5 + 200) + v6 - 4) == 1870095406)
    {
      uint64_t v8 = "A relocation may not refer to a dwo section";
      goto LABEL_10;
    }
  }
  return 1;
}

char **llvm::MCAsmBackend::getFixupKindInfo(uint64_t a1, unsigned int a2)
{
  return &(&off_1E684AC10)[3 * a2];
}

uint64_t llvm::MCAsmBackend::fixupNeedsRelaxationAdvanced(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, a2, a4, a5, a6);
  }
  else {
    return 1;
  }
}

void *sub_1CCBA1C04(void *a1)
{
  *a1 = &unk_1F262D738;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F262D7A0;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

uint64_t llvm::MCAsmInfo::addInitialFrameState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[55];
  if (v4 >= a1[56])
  {
    uint64_t result = sub_1CC34C40C(a1 + 54, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    *(void *)(v4 + 32) = 0;
    sub_1CC34C614((void *)(v4 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 40) - *(void *)(a2 + 32));
    unint64_t v6 = (_OWORD *)(v4 + 56);
    if (*(char *)(a2 + 79) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v6, *(const void **)(a2 + 56), *(void *)(a2 + 64));
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 56);
      *(void *)(v4 + 72) = *(void *)(a2 + 72);
      *unint64_t v6 = v7;
    }
    uint64_t result = v4 + 80;
  }
  a1[55] = result;
  return result;
}

unint64_t llvm::MCAsmInfo::getExprForFDESymbol(llvm::MCAsmInfo *this, const llvm::MCSymbol *a2, char a3, llvm::MCStreamer *a4)
{
  uint64_t v7 = *((void *)a4 + 1);
  *(void *)(v7 + 272) += 24;
  uint64_t v8 = *(void *)(v7 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(v7 + 200) - v8)
  {
    unsigned int v12 = *(_DWORD *)(v7 + 216) >> 7;
    if (v12 >= 0x1E) {
      LOBYTE(v12) = 30;
    }
    uint64_t v13 = 4096 << v12;
    uint64_t v9 = (uint64_t)operator new(4096 << v12, (std::align_val_t)8uLL);
    unsigned int v14 = *(_DWORD *)(v7 + 216);
    if (v14 >= *(_DWORD *)(v7 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v7 + 208) + 8 * v14) = v9;
    ++*(_DWORD *)(v7 + 216);
    *(void *)(v7 + 200) = v9 + v13;
  }
  else
  {
    uint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v7 + 192) = v9 + 24;
  int v10 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
  *(unsigned char *)uint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = a2;
  if ((a3 & 0x10) == 0) {
    return v9;
  }
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v7);
  (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a4 + 192))(a4, TempSymbol, 0);
  unint64_t v16 = llvm::MCSymbolRefExpr::create(TempSymbol, 0, v7, 0);

  return llvm::MCBinaryExpr::create(18, v9, v16, v7, 0);
}

void *sub_1CCBA1F30(void *a1)
{
  *a1 = &unk_1F262D7A0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCBA1F84(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CCBA20C0(v17);
  }
}

uint64_t sub_1CCBA20C0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CCBA20D8(void *a1)
{
  *a1 = &unk_1F262D738;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F262D7A0;
  unint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CCBA21D4(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CCBA21E0(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CCBA21F0(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    unint64_t v4 = &unk_1F262D7F0;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CCBA2274(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CCBA2288(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CCBA2290(void *a1)
{
  *a1 = &unk_1F262D7A0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBA2304(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CCBA230C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CCBA2320(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CCBA2334(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CCBA2348(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CCBA2378()
{
}

void *sub_1CCBA238C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F262D830;
  return result;
}

void sub_1CCBA23C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F262D830;
}

uint64_t sub_1CCBA23F0()
{
  v51[5] = *MEMORY[0x1E4F143B8];
  v36.n128_u64[0] = (unint64_t)v37;
  v37[0] = "Default";
  v37[1] = 7;
  int v38 = 0;
  uint64_t v39 = "Default for platform";
  uint64_t v40 = 20;
  unsigned int v41 = "Enable";
  uint64_t v42 = 6;
  int v43 = 1;
  unint64_t v44 = "Enabled";
  uint64_t v45 = 7;
  BOOL v46 = "Disable";
  uint64_t v47 = 7;
  int v48 = 2;
  size_t v49 = "Disabled";
  uint64_t v50 = 8;
  v36.n128_u64[1] = 0x400000003;
  uint64_t v0 = sub_1CB883A14((uint64_t)&qword_1EBCEE3F0, 0, 0);
  dword_1EBCEE470 = 0;
  qword_1EBCEE478 = (uint64_t)&unk_1F262D7F0;
  *(void *)&dword_1EBCEE480 = 0;
  qword_1EBCEE3F0 = (uint64_t)&unk_1F262D738;
  qword_1EBCEE488 = (uint64_t)&unk_1F262D7A0;
  qword_1EBCEE490 = (uint64_t)&qword_1EBCEE3F0;
  qword_1EBCEE498 = (uint64_t)&unk_1EBCEE4A8;
  qword_1EBCEE4A0 = 0x800000000;
  qword_1EBCEE628 = (uint64_t)&unk_1F262D830;
  qword_1EBCEE640 = (uint64_t)&qword_1EBCEE628;
  llvm::cl::Option::setArgStr(v0, "dwarf-extended-loc", 0x12uLL);
  word_1EBCEE3FA = word_1EBCEE3FA & 0xFF9F | 0x20;
  qword_1EBCEE410 = (uint64_t)"Disable emission of the extended flags in .loc directives.";
  unk_1EBCEE418 = 58;
  uint64_t v2 = v37;
  do
  {
    int v3 = (int *)*v2;
    unint64_t v4 = (int *)v2[1];
    long long v5 = *(_OWORD *)(v2 + 3);
    int v6 = *((_DWORD *)v2 + 4);
    v29[0] = *(int **)v2;
    v29[1] = v4;
    long long v30 = v5;
    int v31 = &unk_1F262D7F0;
    char v33 = 1;
    int v32 = v6;
    unsigned int v7 = qword_1EBCEE4A0;
    uint64_t v8 = qword_1EBCEE498;
    if (qword_1EBCEE4A0 >= HIDWORD(qword_1EBCEE4A0))
    {
      unint64_t v14 = qword_1EBCEE4A0 + 1;
      BOOL v16 = qword_1EBCEE498 <= (unint64_t)v29
         && qword_1EBCEE498 + 48 * (unint64_t)qword_1EBCEE4A0 > (unint64_t)v29;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v29 - qword_1EBCEE498) >> 4);
      if (!v16) {
        unint64_t v17 = -1;
      }
      if (qword_1EBCEE4A0 == -1) {
        sub_1CD0A88F0(v14);
      }
      unint64_t v27 = v17;
      BOOL v28 = v16;
      if (HIDWORD(qword_1EBCEE4A0) == -1) {
        sub_1CD0A89A8(0xFFFFFFFFuLL);
      }
      unint64_t v18 = (2 * HIDWORD(qword_1EBCEE4A0)) | 1;
      if (v18 <= v14) {
        unint64_t v18 = qword_1EBCEE4A0 + 1;
      }
      if (v18 >= 0xFFFFFFFF) {
        unint64_t v18 = 0xFFFFFFFFLL;
      }
      int v26 = v18;
      int v19 = malloc_type_malloc(48 * v18, 0x4065EBACuLL);
      if (!v19) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      uint64_t v8 = (uint64_t)v19;
      __int16 v20 = (_OWORD *)qword_1EBCEE498;
      if (qword_1EBCEE4A0)
      {
        uint64_t v21 = qword_1EBCEE498 + 48 * qword_1EBCEE4A0;
        uint64_t v22 = v8 + 32;
        uint64_t v23 = v8;
        do
        {
          long long v24 = v20[1];
          *(_OWORD *)uint64_t v23 = *v20;
          *(_OWORD *)(v23 + 16) = v24;
          *(void *)(v23 + 32) = &unk_1F262D810;
          int v25 = *((_DWORD *)v20 + 10);
          *(unsigned char *)(v23 + 44) = *((unsigned char *)v20 + 44);
          *(_DWORD *)(v23 + 40) = v25;
          *(void *)(v23 + 32) = &unk_1F262D7F0;
          v22 += 48;
          v20 += 3;
          v23 += 48;
        }
        while (v20 != (_OWORD *)v21);
        __int16 v20 = (_OWORD *)qword_1EBCEE498;
      }
      if (v20 != (_OWORD *)&unk_1EBCEE4A8) {
        free(v20);
      }
      qword_1EBCEE498 = v8;
      HIDWORD(qword_1EBCEE4A0) = v26;
      uint64_t v9 = v29;
      if (v28)
      {
        uint64_t v9 = (int **)(v8 + 48 * v27);
        int v10 = (int *)(v9 + 5);
      }
      else
      {
        int v10 = &v32;
      }
      unsigned int v7 = qword_1EBCEE4A0;
    }
    else
    {
      uint64_t v9 = v29;
      int v10 = &v32;
    }
    uint64_t v11 = v8 + 48 * v7;
    long long v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
    *(_OWORD *)(v11 + 16) = v12;
    *(void *)(v11 + 32) = &unk_1F262D810;
    int v13 = *v10;
    *(unsigned char *)(v11 + 44) = *((unsigned char *)v10 + 4);
    *(_DWORD *)(v11 + 40) = v13;
    *(void *)(v11 + 32) = &unk_1F262D7F0;
    LODWORD(qword_1EBCEE4A0) = qword_1EBCEE4A0 + 1;
    llvm::cl::AddLiteralOption(qword_1EBCEE490, (unsigned __int8 *)v3, (size_t)v4);
    v2 += 5;
  }
  while (v2 != v51);
  dword_1EBCEE470 = 0;
  byte_1EBCEE484 = 1;
  dword_1EBCEE480 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEE3F0);
  if ((void *)v36.n128_u64[0] != v37) {
    free((void *)v36.n128_u64[0]);
  }
  __cxa_atexit((void (*)(void *))sub_1CCBA1C04, &qword_1EBCEE3F0, &dword_1CB82C000);
  int v34 = 0;
  int v35 = 1;
  v36.n128_u64[0] = (unint64_t)"Disable the usage of LEB128 directives, and generate .byte instead.";
  v36.n128_u64[1] = 67;
  v29[0] = &v34;
  sub_1CD6A28C0(&v35, &v36, v29);
  return __cxa_atexit((void (*)(void *))sub_1CC243CA8, &llvm::UseLEB128Directives, &dword_1CB82C000);
}

uint64_t llvm::MCAsmInfoCOFF::MCAsmInfoCOFF(llvm::MCAsmInfoCOFF *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262D878;
  *(unsigned char *)(result + 354) = 0;
  *(_WORD *)(result + 363) = 256;
  *(_DWORD *)(result + 356) = 1;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262D878;
  *(unsigned char *)(result + 354) = 0;
  *(_WORD *)(result + 363) = 256;
  *(_DWORD *)(result + 356) = 1;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  return result;
}

uint64_t llvm::MCAsmInfoMicrosoft::MCAsmInfoMicrosoft(llvm::MCAsmInfoMicrosoft *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(unsigned char *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  *(void *)uint64_t result = &unk_1F262D8F8;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(unsigned char *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  *(void *)uint64_t result = &unk_1F262D8F8;
  return result;
}

uint64_t llvm::MCAsmInfoGNUCOFF::MCAsmInfoGNUCOFF(llvm::MCAsmInfoGNUCOFF *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(unsigned char *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(void *)uint64_t result = &unk_1F262D978;
  *(_WORD *)(result + 21) = 0;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(unsigned char *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(void *)(result + 384) = "\t.weak\t";
  *(unsigned char *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  *(unsigned char *)(result + 408) = 1;
  *(unsigned char *)(result + 338) = 1;
  *(unsigned char *)(result + 472) = 0;
  *(void *)uint64_t result = &unk_1F262D978;
  *(_WORD *)(result + 21) = 0;
  return result;
}

uint64_t sub_1CCBA2BC8(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA2C20(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBA2C98(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA2CF0(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBA2D68(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA2DC0(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::MCAsmInfoDarwin::isSectionAtomizableBySymbols(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 240);
  if (v2 == 2) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 239))
  {
    unint64_t v4 = (_DWORD *)(a2 + 224);
    if (strlen((const char *)(a2 + 224)) == 6 && *v4 == 1094999903 && *(_WORD *)(a2 + 228) == 16724)
    {
      if (*(void *)(a2 + 208) == 10)
      {
        unsigned int v7 = *(uint64_t **)(a2 + 200);
        uint64_t v8 = *v7;
        int v9 = *((unsigned __int16 *)v7 + 4);
        if (v8 == 0x6972747366635F5FLL && v9 == 26478) {
          return 0;
        }
      }
      if (*(void *)(a2 + 208) == 16)
      {
        uint64_t v11 = *(uint64_t **)(a2 + 200);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        if (v13 == 0x635F636A626F5F5FLL && v12 == 0x736665727373616CLL) {
          return 0;
        }
      }
    }
  }
  if (v2 <= 0x14u) {
    return (0xF9907u >> v2) & 1;
  }
  return 1;
}

uint64_t llvm::MCAsmInfoELF::getNonexecutableStackSection(llvm::MCAsmInfoELF *this, llvm::MCContext *a2)
{
  int v3 = ".note.GNU-stack";
  __int16 v4 = 259;
  __int16 v6 = 257;
  return llvm::MCContext::getELFSection(a2, (const llvm::Twine *)&v3, 1, 0, 0, (const llvm::Twine *)v5, 0, -1, 0);
}

uint64_t llvm::MCAsmInfoELF::MCAsmInfoELF(llvm::MCAsmInfoELF *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DA70;
  *(unsigned char *)(result + 366) = 1;
  *(void *)(result + 384) = "\t.weak\t";
  *(void *)(result + 88) = ".L";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = ".L";
  *(void *)(result + 112) = 2;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DA70;
  *(unsigned char *)(result + 366) = 1;
  *(void *)(result + 384) = "\t.weak\t";
  *(void *)(result + 88) = ".L";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = ".L";
  *(void *)(result + 112) = 2;
  return result;
}

uint64_t sub_1CCBA306C(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA30C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::MCAsmInfoGOFF::MCAsmInfoGOFF(llvm::MCAsmInfoGOFF *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DAF0;
  *(void *)(result + 272) = "\t.quad\t";
  *(unsigned char *)(result + 363) = 0;
  *(void *)(result + 88) = "@@";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = "@";
  *(void *)(result + 112) = 1;
  *(void *)(result + 192) = "\t.space\t";
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DAF0;
  *(void *)(result + 272) = "\t.quad\t";
  *(unsigned char *)(result + 363) = 0;
  *(void *)(result + 88) = "@@";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = "@";
  *(void *)(result + 112) = 1;
  *(void *)(result + 192) = "\t.space\t";
  return result;
}

uint64_t sub_1CCBA3220(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA3278(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::MCAsmInfoWasm::MCAsmInfoWasm(llvm::MCAsmInfoWasm *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DB70;
  *(_WORD *)(result + 366) = 257;
  *(void *)(result + 384) = "\t.weak\t";
  *(void *)(result + 88) = ".L";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = ".L";
  *(void *)(result + 112) = 2;
  return result;
}

{
  uint64_t result;

  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DB70;
  *(_WORD *)(result + 366) = 257;
  *(void *)(result + 384) = "\t.weak\t";
  *(void *)(result + 88) = ".L";
  *(void *)(result + 96) = 2;
  *(void *)(result + 104) = ".L";
  *(void *)(result + 112) = 2;
  return result;
}

uint64_t sub_1CCBA33AC(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA3404(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::MCAsmInfoXCOFF::MCAsmInfoXCOFF(llvm::MCAsmInfoXCOFF *this)
{
  uint64_t result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(void *)uint64_t result = &unk_1F262DBF0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 23) = 1;
  *(_WORD *)(result + 360) = 256;
  *(unsigned char *)(result + 365) = 1;
  *(void *)(result + 88) = "L..";
  *(void *)(result + 96) = 3;
  *(void *)(result + 104) = "L..";
  *(void *)(result + 112) = 3;
  *(unsigned char *)(result + 185) = 0;
  *(unsigned char *)(result + 187) = 1;
  *(_WORD *)(result + 426) = 0;
  if (!dword_1EBD0A290) {
    *(unsigned char *)(result + 188) = 0;
  }
  *(void *)(result + 192) = "\t.space\t";
  *(unsigned char *)(result + 200) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = "\t.byte\t";
  *(void *)(result + 232) = "\t.string\t";
  *(_DWORD *)(result + 240) = 1;
  *(void *)(result + 256) = "\t.vbyte\t2, ";
  *(void *)(result + 264) = "\t.vbyte\t4, ";
  *(unsigned char *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 2;
  *(unsigned char *)(result + 363) = 0;
  *(_WORD *)(result + 464) = 256;
  *(unsigned char *)(result + 476) = 1;
  *(_DWORD *)(result + 412) = 6;
  return result;
}

uint64_t llvm::MCAsmInfoXCOFF::isAcceptableChar(llvm::MCAsmInfoXCOFF *this, int a2)
{
  BOOL v5 = a2 - 48 < 0xA
    || (a2 & 0xDFu) - 65 < 0x1A
    || a2 == 95
    || a2 == 46;
  unsigned int v6 = a2 == 93 || v5;
  if (a2 == 91) {
    return 1;
  }
  else {
    return v6;
  }
}

uint64_t sub_1CCBA35A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v3 = (void **)(a1 + 432);
  sub_1CC34C338(&v3);
  return a1;
}

void sub_1CCBA3600(uint64_t a1)
{
  *(void *)a1 = &unk_1F262D6C0;
  int v1 = (void **)(a1 + 432);
  sub_1CC34C338(&v1);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *llvm::MCAsmMacroParameter::dump(llvm::MCAsmMacroParameter *this, llvm::raw_ostream *a2)
{
  __int16 v4 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v4)
  {
    llvm::raw_ostream::write(a2, "\"", 1uLL);
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  else
  {
    *__int16 v4 = 34;
    uint64_t result = (llvm::raw_ostream *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = result;
  }
  unsigned int v6 = *(const void **)this;
  unint64_t v7 = *((void *)this + 1);
  if (v7 <= *((void *)a2 + 3) - (void)result)
  {
    if (v7)
    {
      memcpy(result, v6, *((void *)this + 1));
      uint64_t result = (llvm::raw_ostream *)(*((void *)a2 + 4) + v7);
      *((void *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v6, *((void *)this + 1));
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  if (*((llvm::raw_ostream **)a2 + 3) == result)
  {
    uint64_t result = llvm::raw_ostream::write(a2, "\"", 1uLL);
  }
  else
  {
    *(unsigned char *)uint64_t result = 34;
    ++*((void *)a2 + 4);
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v8 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v8 > 3uLL)
    {
      *uint64_t v8 = 1902473786;
      *((void *)a2 + 4) += 4;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a2, ":req", 4uLL);
    }
  }
  if (*((unsigned char *)this + 41))
  {
    int v9 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v9 > 6uLL)
    {
      *(_DWORD *)((char *)v9 + 3) = 1735549298;
      *int v9 = 1918989882;
      *((void *)a2 + 4) += 7;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a2, ":vararg", 7uLL);
    }
  }
  if (*((void *)this + 2) != *((void *)this + 3))
  {
    uint64_t v10 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v10) > 2)
    {
      *(unsigned char *)(v10 + 2) = 32;
      *(_WORD *)uint64_t v10 = 15648;
      *((void *)a2 + 4) += 3;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a2, " = ", 3uLL);
    }
    uint64_t v11 = *((void *)this + 2);
    uint64_t v12 = *((void *)this + 3);
    if (v11 != v12)
    {
      char v13 = 1;
      do
      {
        uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
        if ((v13 & 1) == 0)
        {
          if (*((void *)a2 + 3) - (void)result > 1uLL)
          {
            *(_WORD *)uint64_t result = 8236;
            uint64_t result = (llvm::raw_ostream *)(*((void *)a2 + 4) + 2);
            *((void *)a2 + 4) = result;
          }
          else
          {
            llvm::raw_ostream::write(a2, ", ", 2uLL);
            uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
          }
        }
        unint64_t v14 = *(const void **)(v11 + 8);
        unint64_t v15 = *(void *)(v11 + 16);
        if (v15 <= *((void *)a2 + 3) - (void)result)
        {
          if (v15)
          {
            uint64_t result = (llvm::raw_ostream *)memcpy(result, v14, *(void *)(v11 + 16));
            *((void *)a2 + 4) += v15;
          }
        }
        else
        {
          uint64_t result = llvm::raw_ostream::write(a2, (const char *)v14, *(void *)(v11 + 16));
        }
        char v13 = 0;
        v11 += 40;
      }
      while (v11 != v12);
    }
  }
  BOOL v16 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v16)
  {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *BOOL v16 = 10;
    ++*((void *)a2 + 4);
  }
  return result;
}

llvm::raw_ostream *llvm::MCAsmMacro::dump(llvm::MCAsmMacro *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8303;
    *(_DWORD *)uint64_t v4 = 1919115597;
    BOOL v5 = (llvm::raw_ostream *)(*((void *)a2 + 4) + 6);
    *((void *)a2 + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Macro ", 6uLL);
    BOOL v5 = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  unsigned int v6 = *(const void **)this;
  unint64_t v7 = *((void *)this + 1);
  if (v7 <= *((void *)a2 + 3) - (void)v5)
  {
    if (v7)
    {
      memcpy(v5, v6, *((void *)this + 1));
      BOOL v5 = (llvm::raw_ostream *)(*((void *)a2 + 4) + v7);
      *((void *)a2 + 4) = v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v6, *((void *)this + 1));
    BOOL v5 = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  if (*((void *)a2 + 3) - (void)v5 > 1uLL)
  {
    *(_WORD *)BOOL v5 = 2618;
    uint64_t v8 = (void *)(*((void *)a2 + 4) + 2);
    *((void *)a2 + 4) = v8;
  }
  else
  {
    BOOL v5 = llvm::raw_ostream::write(a2, ":\n", 2uLL);
    uint64_t v8 = (void *)*((void *)a2 + 4);
  }
  if (*((void *)a2 + 3) - (void)v8 > 0xDuLL)
  {
    qmemcpy(v8, "  Parameters:\n", 14);
    *((void *)a2 + 4) += 14;
  }
  else
  {
    BOOL v5 = llvm::raw_ostream::write(a2, "  Parameters:\n", 0xEuLL);
  }
  int v9 = (llvm::MCAsmMacroParameter *)*((void *)this + 4);
  for (i = (llvm::MCAsmMacroParameter *)*((void *)this + 5); v9 != i; int v9 = (llvm::MCAsmMacroParameter *)((char *)v9 + 48))
  {
    uint64_t v11 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v11 > 3uLL)
    {
      *uint64_t v11 = 538976288;
      *((void *)a2 + 4) += 4;
    }
    else
    {
      BOOL v5 = llvm::raw_ostream::write(a2, "    ", 4uLL);
    }
    uint64_t v12 = llvm::dbgs(v5);
    BOOL v5 = llvm::MCAsmMacroParameter::dump(v9, v12);
  }
  if (*((void *)this + 7) != *((void *)this + 8))
  {
    uint64_t v13 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v13) > 9)
    {
      *(_WORD *)(v13 + 8) = 2618;
      *(void *)uint64_t v13 = *(void *)"  Locals:\n";
      *((void *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  Locals:\n", 0xAuLL);
    }
    unint64_t v14 = (const void **)*((void *)this + 7);
    for (uint64_t j = (const void **)*((void *)this + 8); v14 != j; v14 += 3)
    {
      char v16 = *((unsigned char *)v14 + 23);
      BOOL v17 = v16 < 0;
      if (v16 >= 0) {
        unint64_t v18 = v14;
      }
      else {
        unint64_t v18 = *v14;
      }
      size_t v19 = v16 & 0x7F;
      if (v17) {
        size_t v20 = (size_t)v14[1];
      }
      else {
        size_t v20 = v19;
      }
      uint64_t v21 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v21 > 3uLL)
      {
        *uint64_t v21 = 538976288;
        uint64_t v22 = (unsigned char *)(*((void *)a2 + 4) + 4);
        *((void *)a2 + 4) = v22;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    ", 4uLL);
        uint64_t v22 = (unsigned char *)*((void *)a2 + 4);
      }
      if (v20 <= *((void *)a2 + 3) - (void)v22)
      {
        if (v20)
        {
          memcpy(v22, v18, v20);
          uint64_t v22 = (unsigned char *)(*((void *)a2 + 4) + v20);
          *((void *)a2 + 4) = v22;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v18, v20);
        uint64_t v22 = (unsigned char *)*((void *)a2 + 4);
      }
      if ((unint64_t)v22 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v22 + 1;
        *uint64_t v22 = 10;
      }
    }
  }
  uint64_t v23 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v23 > 0xDuLL)
  {
    qmemcpy(v23, "  (BEGIN BODY)", 14);
    uint64_t result = (llvm::raw_ostream *)(*((void *)a2 + 4) + 14);
    *((void *)a2 + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  (BEGIN BODY)", 0xEuLL);
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  int v25 = (const void *)*((void *)this + 2);
  size_t v26 = *((void *)this + 3);
  if (v26 <= *((void *)a2 + 3) - (void)result)
  {
    if (v26)
    {
      memcpy(result, v25, v26);
      uint64_t result = (llvm::raw_ostream *)(*((void *)a2 + 4) + v26);
      *((void *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, (const char *)v25, v26);
    uint64_t result = (llvm::raw_ostream *)*((void *)a2 + 4);
  }
  if (*((void *)a2 + 3) - (void)result > 0xAuLL)
  {
    *(_DWORD *)((char *)result + 7) = 170481988;
    *(void *)uint64_t result = *(void *)"(END BODY)\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    return llvm::raw_ostream::write(a2, "(END BODY)\n", 0xBuLL);
  }
  return result;
}

void sub_1CCBA3D5C()
{
}

llvm::raw_ostream *sub_1CCBA3E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  BOOL v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xEuLL)
  {
    qmemcpy(v5, "\t.cfi_startproc", 15);
    *((void *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_startproc", 0xFuLL);
  }
  if (*(unsigned char *)(a2 + 73))
  {
    unsigned int v6 = *(llvm::raw_ostream **)(a1 + 280);
    unint64_t v7 = (_DWORD *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 1701605485;
      *unint64_t v7 = 1835627296;
      *((void *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, " simple", 7uLL);
    }
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA3F74(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 1;
  int v3 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v4 = (void *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 0xCuLL)
  {
    qmemcpy(v4, "\t.cfi_endproc", 13);
    *((void *)v3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_endproc", 0xDuLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA3FFC(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  if (a3)
  {
    size_t v4 = a3 - 1;
    if (a3 < a3 - 1) {
      size_t v4 = a3;
    }
    if (a2[a3 - 1] == 10) {
      size_t v5 = v4;
    }
    else {
      size_t v5 = a3;
    }
    uint64_t v6 = *(void *)(a1 + 280);
    unint64_t v7 = *(void **)(v6 + 32);
    if (v5 <= *(void *)(v6 + 24) - (void)v7)
    {
      if (v5)
      {
        memcpy(v7, a2, v5);
        *(void *)(v6 + 32) += v5;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), a2, v5);
    }
  }

  return sub_1CCBB0264(a1);
}

void sub_1CCBA4090(uint64_t a1)
{
  llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)(a1 + 688));
  *(void *)(a1 + 616) = &unk_1F2646B98;
  if (*(_DWORD *)(a1 + 672) == 1)
  {
    uint64_t v7 = *(void *)(a1 + 632);
    if (v7) {
      MEMORY[0x1D25D9CB0](v7, 0x1000C8077774924);
    }
  }
  int v2 = *(void **)(a1 + 464);
  if (v2 != (void *)(a1 + 488)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 312);
  if (v3 != (void *)(a1 + 336)) {
    free(v3);
  }
  size_t v4 = *(llvm::MCAssembler **)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v4)
  {
    llvm::MCAssembler::~MCAssembler(v4);
    MEMORY[0x1D25D9CE0]();
  }
  uint64_t v5 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  llvm::MCStreamer::~MCStreamer((llvm::MCStreamer *)a1);
}

void sub_1CCBA41C4(uint64_t a1)
{
}

uint64_t sub_1CCBA41FC()
{
  return 0;
}

uint64_t sub_1CCBA4204(uint64_t a1)
{
  return *(unsigned char *)(a1 + 752) & 1;
}

uint64_t sub_1CCBA4210()
{
  return 1;
}

llvm::raw_ostream *sub_1CCBA4218(llvm::raw_ostream *result, uint64_t a2, int a3)
{
  if (*((unsigned char *)result + 752))
  {
    uint64_t v5 = result;
    int v9 = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    char v16 = (char *)result + 464;
    int v15 = 0;
    uint64_t v8 = &unk_1F2646FA8;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v6 = llvm::Twine::printOneChild(result, (llvm::raw_ostream *)&v8, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 32));
    uint64_t result = llvm::Twine::printOneChild(v6, (llvm::raw_ostream *)&v8, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned char *)(a2 + 33));
    uint64_t v8 = &unk_1F2646B98;
    if (v15 == 1)
    {
      uint64_t result = v10;
      if (v10) {
        uint64_t result = (llvm::raw_ostream *)MEMORY[0x1D25D9CB0](v10, 0x1000C8077774924);
      }
    }
    if (a3)
    {
      uint64_t v7 = *((void *)v5 + 59);
      if ((unint64_t)(v7 + 1) > *((void *)v5 + 60)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      *(unsigned char *)(*((void *)v5 + 58) + v7) = 10;
      ++*((void *)v5 + 59);
    }
  }
  return result;
}

uint64_t *sub_1CCBA434C(llvm *a1)
{
  if (*((unsigned char *)a1 + 752)) {
    return (uint64_t *)((char *)a1 + 616);
  }
  else {
    return llvm::nulls(a1);
  }
}

llvm::raw_ostream *sub_1CCBA4360(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v6 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 9);
    }
    else
    {
      *((void *)v5 + 4) = v6 + 1;
      *uint64_t v6 = 9;
    }
  }
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *(void *)(a1 + 288);
  int v9 = *(const void **)(v7 + 48);
  size_t v10 = *(void *)(v7 + 56);
  uint64_t v11 = (void *)*((void *)v8 + 4);
  if (v10 <= *((void *)v8 + 3) - (void)v11)
  {
    if (v10)
    {
      uint64_t v11 = memcpy(v11, v9, v10);
      *((void *)v8 + 4) += v10;
    }
  }
  else
  {
    uint64_t v11 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v9, v10);
  }
  uint64_t v12 = llvm::Twine::printOneChild((llvm::raw_ostream *)v11, v8, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 32));
  llvm::Twine::printOneChild(v12, v8, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned char *)(a2 + 33));

  return sub_1CCBB0264(a1);
}

void sub_1CCBA4430(void *a1, const char **a2)
{
  int v3 = 0;
  size_t v4 = 0;
  switch(*((unsigned char *)a2 + 32))
  {
    case 2:
      __break(1u);
      goto LABEL_162;
    case 3:
      int v3 = *a2;
      if (*a2) {
        size_t v4 = strlen(*a2);
      }
      else {
LABEL_162:
      }
        size_t v4 = 0;
      break;
    case 4:
      char v71 = (*a2)[23];
      if (v71 >= 0) {
        int v3 = *a2;
      }
      else {
        int v3 = *(const char **)*a2;
      }
      if (v71 >= 0) {
        size_t v4 = v71 & 0x7F;
      }
      else {
        size_t v4 = *((void *)*a2 + 1);
      }
      break;
    case 5:
      int v3 = *a2;
      size_t v4 = (size_t)a2[1];
      break;
    default:
      break;
  }
  size_t v76 = v3;
  size_t v77 = v4;
  uint64_t v5 = a1[36];
  uint64_t v6 = *(const void **)(v5 + 40);
  if (v6)
  {
    if (v4 == strlen(*(const char **)(v5 + 40)) && (!v4 || !memcmp(v3, v6, v4))) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  size_t v7 = v4 - 2;
  if (v4 >= 2)
  {
    if (*(_WORD *)v3 != 12079)
    {
      if (*(_WORD *)v3 != 10799) {
        goto LABEL_14;
      }
      std::string::size_type v72 = a1 + 39;
      unint64_t v34 = 2;
      while (1)
      {
        unint64_t first_of = llvm::StringRef::find_first_of(&v76, "\r\n", 2, v34);
        size_t v36 = first_of;
        if (first_of >= v7) {
          size_t v37 = v7;
        }
        else {
          size_t v37 = first_of;
        }
        uint64_t v38 = a1[40];
        if (a1[41] < (unint64_t)(v38 + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(a1[39] + v38) = 9;
        size_t v39 = a1[41];
        uint64_t v40 = a1[40] + 1;
        a1[40] = v40;
        uint64_t v41 = a1[36];
        size_t v42 = *(void *)(v41 + 56);
        if (v39 < v42 + v40) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v42)
        {
          memcpy((void *)(a1[39] + v40), *(const void **)(v41 + 48), v42);
          uint64_t v40 = a1[40];
        }
        size_t v43 = v40 + v42;
        a1[40] = v43;
        unint64_t v44 = v76;
        if (v76) {
          break;
        }
        size_t v50 = 0;
        unsigned int v51 = 0;
        std::string __dst = 0;
        size_t v74 = 0;
        int64_t v75 = 0;
LABEL_86:
        if ((char)v44 >= 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = v51;
        }
        if ((char)v44 >= 0) {
          size_t v55 = v44 & 0x7F;
        }
        else {
          size_t v55 = v50;
        }
        if (a1[41] < v55 + v43) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v55)
        {
          memcpy((void *)(a1[39] + v43), p_dst, v55);
          size_t v43 = a1[40];
        }
        a1[40] = v43 + v55;
        if ((v44 & 0x80) != 0) {
          operator delete(v51);
        }
        if (v36 < v7)
        {
          uint64_t v56 = a1[40];
          if (a1[41] < (unint64_t)(v56 + 1)) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(unsigned char *)(a1[39] + v56) = 10;
          ++a1[40];
        }
        unint64_t v34 = v37 + 1;
        if (v37 + 1 >= v7) {
          goto LABEL_141;
        }
      }
      size_t v45 = v77;
      if (v77 >= v34) {
        unint64_t v46 = v34;
      }
      else {
        unint64_t v46 = v77;
      }
      if (v46 <= v37) {
        size_t v47 = v37;
      }
      else {
        size_t v47 = v46;
      }
      if (v77 >= v47) {
        size_t v45 = v47;
      }
      size_t v48 = v45 - v46;
      if (v45 - v46 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_160;
      }
      if (v48 >= 0x17)
      {
        uint64_t v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17) {
          uint64_t v52 = v48 | 7;
        }
        uint64_t v53 = v52 + 1;
        size_t v49 = operator new(v52 + 1);
        size_t v74 = v48;
        int64_t v75 = v53 | 0x8000000000000000;
        std::string __dst = v49;
      }
      else
      {
        HIBYTE(v75) = v45 - v46;
        size_t v49 = &__dst;
        if (v45 == v46) {
          goto LABEL_85;
        }
      }
      memmove(v49, &v44[v46], v48);
LABEL_85:
      *((unsigned char *)v49 + v48) = 0;
      LOBYTE(v44) = HIBYTE(v75);
      unsigned int v51 = __dst;
      size_t v50 = v74;
      size_t v43 = a1[40];
      goto LABEL_86;
    }
    uint64_t v21 = a1[40];
    if (a1[41] < (unint64_t)(v21 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(a1[39] + v21) = 9;
    size_t v22 = a1[41];
    uint64_t v23 = a1[40] + 1;
    a1[40] = v23;
    uint64_t v24 = a1[36];
    size_t v25 = *(void *)(v24 + 56);
    if (v22 < v25 + v23) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v25)
    {
      memcpy((void *)(a1[39] + v23), *(const void **)(v24 + 48), v25);
      uint64_t v23 = a1[40];
    }
    size_t v26 = v23 + v25;
    a1[40] = v26;
    if (!v3)
    {
      size_t v59 = 0;
      BOOL v60 = 0;
      char v61 = 0;
      std::string __dst = 0;
      size_t v74 = 0;
      int64_t v75 = 0;
LABEL_129:
      if (v61 >= 0) {
        uint64_t v69 = &__dst;
      }
      else {
        uint64_t v69 = v60;
      }
      if (v61 >= 0) {
        size_t v70 = v61 & 0x7F;
      }
      else {
        size_t v70 = v59;
      }
      if (a1[41] < v70 + v26) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v70)
      {
        memcpy((void *)(a1[39] + v26), v69, v70);
        size_t v26 = a1[40];
      }
      a1[40] = v26 + v70;
      if ((v61 & 0x80) == 0) {
        goto LABEL_141;
      }
      uint64_t v66 = (char *)v60;
      goto LABEL_140;
    }
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_160;
    }
    if (v7 >= 0x17)
    {
      uint64_t v67 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v67 = v7 | 7;
      }
      uint64_t v68 = v67 + 1;
      unint64_t v27 = operator new(v67 + 1);
      size_t v74 = v7;
      int64_t v75 = v68 | 0x8000000000000000;
      std::string __dst = v27;
    }
    else
    {
      HIBYTE(v75) = v4 - 2;
      unint64_t v27 = &__dst;
      if (v4 < 3) {
        goto LABEL_128;
      }
    }
    memmove(v27, v3 + 2, v7);
LABEL_128:
    *((unsigned char *)v27 + v7) = 0;
    char v61 = HIBYTE(v75);
    BOOL v60 = __dst;
    size_t v59 = v74;
    size_t v26 = a1[40];
    goto LABEL_129;
  }
LABEL_14:
  size_t v8 = *(void *)(v5 + 56);
  if (v4 < v8 || v8 && memcmp(v3, *(const void **)(v5 + 48), v8))
  {
    if (*v3 != 35) {
      goto LABEL_141;
    }
    uint64_t v9 = a1[40];
    if (a1[41] < (unint64_t)(v9 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(a1[39] + v9) = 9;
    size_t v10 = a1[41];
    uint64_t v11 = a1[40] + 1;
    a1[40] = v11;
    uint64_t v12 = a1[36];
    size_t v13 = *(void *)(v12 + 56);
    if (v10 < v13 + v11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v13)
    {
      memcpy((void *)(a1[39] + v11), *(const void **)(v12 + 48), v13);
      uint64_t v11 = a1[40];
    }
    a1[40] = v11 + v13;
    uint64_t v14 = v4 != 0;
    if (v4) {
      int v15 = v3 + 1;
    }
    else {
      int v15 = v3;
    }
    size_t v16 = v4 - v14;
    if (v4 - v14 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v16 >= 0x17)
      {
        uint64_t v28 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v28 = v16 | 7;
        }
        uint64_t v29 = v28 + 1;
        BOOL v17 = operator new(v28 + 1);
        size_t v74 = v16;
        int64_t v75 = v29 | 0x8000000000000000;
        std::string __dst = v17;
      }
      else
      {
        HIBYTE(v75) = v4 - v14;
        BOOL v17 = &__dst;
        if (v4 == v14)
        {
LABEL_48:
          *((unsigned char *)v17 + v16) = 0;
          int v3 = (const char *)__dst;
          int v30 = SHIBYTE(v75);
          if (v75 >= 0) {
            int v31 = &__dst;
          }
          else {
            int v31 = __dst;
          }
          if (v75 >= 0) {
            size_t v32 = HIBYTE(v75) & 0x7F;
          }
          else {
            size_t v32 = v74;
          }
          uint64_t v33 = a1[40];
          if (a1[41] < v32 + v33) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v32)
          {
            memcpy((void *)(a1[39] + v33), v31, v32);
            uint64_t v33 = a1[40];
          }
          a1[40] = v33 + v32;
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_141;
          }
          goto LABEL_123;
        }
      }
      memmove(v17, v15, v16);
      goto LABEL_48;
    }
LABEL_160:
    abort();
  }
  uint64_t v18 = a1[40];
  if (a1[41] < (unint64_t)(v18 + 1)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(a1[39] + v18) = 9;
  uint64_t v19 = a1[40] + 1;
  a1[40] = v19;
  if (!v3)
  {
    size_t v57 = 0;
    char v58 = 0;
    std::string __dst = 0;
    size_t v74 = 0;
    int64_t v75 = 0;
    goto LABEL_113;
  }
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_160;
  }
  if (v4 >= 0x17)
  {
    uint64_t v62 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v62 = v4 | 7;
    }
    uint64_t v63 = v62 + 1;
    size_t v20 = operator new(v62 + 1);
    size_t v74 = v4;
    int64_t v75 = v63 | 0x8000000000000000;
    std::string __dst = v20;
  }
  else
  {
    HIBYTE(v75) = v4;
    size_t v20 = &__dst;
    if (!v4) {
      goto LABEL_112;
    }
  }
  memmove(v20, v3, v4);
LABEL_112:
  *((unsigned char *)v20 + v4) = 0;
  char v58 = HIBYTE(v75);
  int v3 = (const char *)__dst;
  size_t v57 = v74;
  uint64_t v19 = a1[40];
LABEL_113:
  if (v58 >= 0) {
    BOOL v64 = (const char *)&__dst;
  }
  else {
    BOOL v64 = v3;
  }
  if (v58 >= 0) {
    size_t v65 = v58 & 0x7F;
  }
  else {
    size_t v65 = v57;
  }
  if (a1[41] < v65 + v19) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v65)
  {
    memcpy((void *)(a1[39] + v19), v64, v65);
    uint64_t v19 = a1[40];
  }
  a1[40] = v19 + v65;
  if ((v58 & 0x80) == 0) {
    goto LABEL_141;
  }
LABEL_123:
  uint64_t v66 = (char *)v3;
LABEL_140:
  operator delete(v66);
LABEL_141:
  if (v76[v77 - 1] == 10)
  {
    sub_1CCBA4CA4(a1);
  }
}

void *sub_1CCBA4CA4(void *result)
{
  int v1 = result;
  size_t v2 = result[40];
  if (v2)
  {
    int v3 = (const void *)result[39];
    uint64_t v4 = result[35];
    uint64_t v5 = *(void **)(v4 + 32);
    if (v2 <= *(void *)(v4 + 24) - (void)v5)
    {
      uint64_t result = memcpy(v5, v3, v2);
      *(void *)(v4 + 32) += v2;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write((llvm::raw_ostream *)v1[35], (const char *)v3, v2);
    }
  }
  v1[40] = 0;
  return result;
}

uint64_t sub_1CCBA4D18(uint64_t a1, uint64_t (***a2)(void, void, uint64_t, void, uint64_t), uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (**a2)(a2, *(void *)(a1 + 288), *(void *)(a1 + 8) + 24, *(void *)(a1 + 280), a3);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 120);
  if (v5) {
    uint64_t v6 = *(void *)(*(void *)(a1 + 112) + 32 * v5 - 32);
  }
  else {
    uint64_t v6 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t, void))(*(void *)v4 + 48))(*(void *)(a1 + 16), v6, a2, a3, *(void *)(a1 + 280));
}

const char *sub_1CCBA4DB0(uint64_t a1)
{
  int v1 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 296) + 24))(*(void *)(a1 + 296));
  size_t v2 = v1;
  if (v1) {
    strlen(v1);
  }
  return v2;
}

llvm::raw_ostream *sub_1CCBA4E14(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::MCStreamer::emitLabel(a1, (uint64_t)a2, a3);
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v5 = *(void *)(a1 + 288);
  uint64_t v6 = *(const void **)(v5 + 72);
  if (v6)
  {
    size_t v7 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v8 = strlen(*(const char **)(v5 + 72));
    uint64_t v9 = (void *)*((void *)v7 + 4);
    if (v8 <= *((void *)v7 + 3) - (void)v9)
    {
      if (v8)
      {
        memcpy(v9, v6, v8);
        *((void *)v7 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, (const char *)v6, v8);
    }
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA4EC0(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      int v3 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v4 = (_OWORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v4 <= 0xFuLL)
      {
        uint64_t v5 = "\t.syntax unified";
        size_t v6 = 16;
        goto LABEL_22;
      }
      *uint64_t v4 = *(_OWORD *)"\t.syntax unified";
      uint64_t v16 = *((void *)v3 + 4) + 16;
      goto LABEL_30;
    case 1:
      int v3 = *(llvm::raw_ostream **)(a1 + 280);
      size_t v7 = (void *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v7 <= 0x17uLL)
      {
        uint64_t v5 = ".subsections_via_symbols";
        size_t v6 = 24;
        goto LABEL_22;
      }
      qmemcpy(v7, ".subsections_via_symbols", 24);
      uint64_t v16 = *((void *)v3 + 4) + 24;
LABEL_30:
      *((void *)v3 + 4) = v16;
      break;
    case 2:
      size_t v8 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v9 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        *uint64_t v9 = 9;
      }
      uint64_t v12 = *(const char **)(*(void *)(a1 + 288) + 152);
      if (!v12) {
        break;
      }
      goto LABEL_20;
    case 3:
      size_t v8 = *(llvm::raw_ostream **)(a1 + 280);
      size_t v10 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v10 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((void *)v8 + 4) = v10 + 1;
        *size_t v10 = 9;
      }
      uint64_t v12 = *(const char **)(*(void *)(a1 + 288) + 160);
      if (!v12) {
        break;
      }
      goto LABEL_20;
    case 4:
      size_t v8 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v11 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v11 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((void *)v8 + 4) = v11 + 1;
        *uint64_t v11 = 9;
      }
      uint64_t v12 = *(const char **)(*(void *)(a1 + 288) + 168);
      if (!v12) {
        break;
      }
LABEL_20:
      size_t v13 = strlen(v12);
      uint64_t v14 = (void *)*((void *)v8 + 4);
      if (v13 <= *((void *)v8 + 3) - (void)v14)
      {
        if (v13)
        {
          memcpy(v14, v12, v13);
          *((void *)v8 + 4) += v13;
        }
      }
      else
      {
        int v3 = v8;
        uint64_t v5 = v12;
        size_t v6 = v13;
LABEL_22:
        llvm::raw_ostream::write(v3, v5, v6);
      }
      break;
    default:
      break;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA50D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0x10)
  {
    *(unsigned char *)(v7 + 16) = 34;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)"\t.linker_option \"";
    *((void *)v6 + 4) += 17;
  }
  else
  {
    size_t v6 = llvm::raw_ostream::write(v6, "\t.linker_option \"", 0x11uLL);
  }
  char v8 = *(unsigned char *)(a2 + 23);
  BOOL v9 = v8 < 0;
  if (v8 >= 0) {
    size_t v10 = (const char *)a2;
  }
  else {
    size_t v10 = *(const char **)a2;
  }
  size_t v11 = v8 & 0x7F;
  if (v9) {
    size_t v12 = *(void *)(a2 + 8);
  }
  else {
    size_t v12 = v11;
  }
  size_t v13 = llvm::raw_ostream::write(v6, v10, v12);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 34);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 34;
  }
  if (a3 != 1)
  {
    uint64_t v16 = a2 + 24;
    uint64_t v17 = 24 * a3 - 24;
    do
    {
      uint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v19 = (_WORD *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 > 1uLL)
      {
        *uint64_t v19 = 8236;
        size_t v20 = (unsigned char *)(*((void *)v18 + 4) + 2);
        *((void *)v18 + 4) = v20;
      }
      else
      {
        uint64_t v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
        size_t v20 = (unsigned char *)*((void *)v18 + 4);
      }
      if ((unint64_t)v20 >= *((void *)v18 + 3))
      {
        uint64_t v18 = llvm::raw_ostream::write(v18, 34);
      }
      else
      {
        *((void *)v18 + 4) = v20 + 1;
        *size_t v20 = 34;
      }
      char v21 = *(unsigned char *)(v16 + 23);
      BOOL v22 = v21 < 0;
      if (v21 >= 0) {
        uint64_t v23 = (const char *)v16;
      }
      else {
        uint64_t v23 = *(const char **)v16;
      }
      size_t v24 = v21 & 0x7F;
      if (v22) {
        size_t v25 = *(void *)(v16 + 8);
      }
      else {
        size_t v25 = v24;
      }
      size_t v26 = llvm::raw_ostream::write(v18, v23, v25);
      unint64_t v27 = (unsigned char *)*((void *)v26 + 4);
      if ((unint64_t)v27 >= *((void *)v26 + 3))
      {
        llvm::raw_ostream::write(v26, 34);
      }
      else
      {
        *((void *)v26 + 4) = v27 + 1;
        *unint64_t v27 = 34;
      }
      v16 += 24;
      v17 -= 24;
    }
    while (v17);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5288(uint64_t a1, const void *a2, size_t a3)
{
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0xB)
  {
    *(_DWORD *)(v7 + 8) = 572547689;
    *(void *)uint64_t v7 = *(void *)"\t.dyld_lib \"";
    char v8 = (unsigned char *)(*((void *)v6 + 4) + 12);
    *((void *)v6 + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.dyld_lib \"", 0xCuLL);
    char v8 = (unsigned char *)*((void *)v6 + 4);
  }
  if (a3 <= *((void *)v6 + 3) - (void)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      char v8 = (unsigned char *)(*((void *)v6 + 4) + a3);
      *((void *)v6 + 4) = v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v6, (const char *)a2, a3);
    char v8 = (unsigned char *)*((void *)v6 + 4);
  }
  if ((unint64_t)v8 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 34);
  }
  else
  {
    *((void *)v6 + 4) = v8 + 1;
    *char v8 = 34;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5394(llvm::raw_ostream *result, int a2)
{
  if (*(unsigned char *)(*((void *)result + 36) + 186))
  {
    uint64_t v2 = (uint64_t)result;
    switch(a2)
    {
      case 0:
        int v3 = (llvm::raw_ostream *)*((void *)result + 35);
        uint64_t v4 = (void *)*((void *)v3 + 4);
        if (*((void *)v3 + 3) - (void)v4 <= 0xCuLL)
        {
          uint64_t v5 = "\t.data_region";
          size_t v6 = 13;
          goto LABEL_16;
        }
        qmemcpy(v4, "\t.data_region", 13);
        uint64_t v9 = *((void *)v3 + 4) + 13;
        goto LABEL_27;
      case 1:
        int v3 = (llvm::raw_ostream *)*((void *)result + 35);
        uint64_t v7 = *((void *)v3 + 4);
        if ((unint64_t)(*((void *)v3 + 3) - v7) <= 0x10)
        {
          uint64_t v5 = "\t.data_region jt8";
          goto LABEL_15;
        }
        char v10 = 56;
        size_t v11 = "\t.data_region jt8";
        goto LABEL_26;
      case 2:
        int v3 = (llvm::raw_ostream *)*((void *)result + 35);
        uint64_t v8 = *((void *)v3 + 4);
        if ((unint64_t)(*((void *)v3 + 3) - v8) <= 0x11)
        {
          uint64_t v5 = "\t.data_region jt16";
          goto LABEL_12;
        }
        __int16 v12 = 13873;
        size_t v13 = "\t.data_region jt16";
        goto LABEL_24;
      case 3:
        int v3 = (llvm::raw_ostream *)*((void *)result + 35);
        uint64_t v8 = *((void *)v3 + 4);
        if ((unint64_t)(*((void *)v3 + 3) - v8) <= 0x11)
        {
          uint64_t v5 = "\t.data_region jt32";
LABEL_12:
          size_t v6 = 18;
          goto LABEL_16;
        }
        __int16 v12 = 12851;
        size_t v13 = "\t.data_region jt32";
LABEL_24:
        *(_WORD *)(v8 + 16) = v12;
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v13;
        uint64_t v9 = *((void *)v3 + 4) + 18;
        goto LABEL_27;
      case 4:
        int v3 = (llvm::raw_ostream *)*((void *)result + 35);
        uint64_t v7 = *((void *)v3 + 4);
        if ((unint64_t)(*((void *)v3 + 3) - v7) > 0x10)
        {
          char v10 = 110;
          size_t v11 = "\t.end_data_region";
LABEL_26:
          *(unsigned char *)(v7 + 16) = v10;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v11;
          uint64_t v9 = *((void *)v3 + 4) + 17;
LABEL_27:
          *((void *)v3 + 4) = v9;
        }
        else
        {
          uint64_t v5 = "\t.end_data_region";
LABEL_15:
          size_t v6 = 17;
LABEL_16:
          llvm::raw_ostream::write(v3, v5, v6);
        }
LABEL_17:
        uint64_t result = sub_1CCBB0264(v2);
        break;
      default:
        goto LABEL_17;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA555C(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v21[0] = a6;
  v21[1] = a7;
  __int16 v12 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 9;
  }
  uint64_t v14 = off_1E684AE20[a2];
  size_t v15 = strlen(v14);
  uint64_t v16 = (unsigned char *)*((void *)v12 + 4);
  if (v15 <= *((void *)v12 + 3) - (void)v16)
  {
    if (v15)
    {
      memcpy(v16, v14, v15);
      uint64_t v16 = (unsigned char *)(*((void *)v12 + 4) + v15);
      *((void *)v12 + 4) = v16;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, v14, v15);
    uint64_t v16 = (unsigned char *)*((void *)v12 + 4);
  }
  if ((unint64_t)v16 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v16 + 1;
    *uint64_t v16 = 32;
  }
  sub_1CD098D14(v12, a3, 0, 0, 0);
  uint64_t v17 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v17 > 1uLL)
  {
    *uint64_t v17 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);
  if (a5)
  {
    uint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v19 = (_WORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 1uLL)
    {
      *uint64_t v19 = 8236;
      *((void *)v18 + 4) += 2;
    }
    else
    {
      uint64_t v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
    }
    sub_1CD098D14(v18, a5, 0, 0, 0);
  }
  sub_1CCBB0448(*(llvm::raw_ostream **)(a1 + 280), v21);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5748(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  v21[0] = a6;
  v21[1] = a7;
  size_t v11 = off_1E684AE40[a2 - 1];
  __int16 v12 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v13 = (_OWORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 0xFuLL)
  {
    _OWORD *v13 = *(_OWORD *)"\t.build_version ";
    uint64_t v14 = (_WORD *)(*((void *)v12 + 4) + 16);
    *((void *)v12 + 4) = v14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.build_version ", 0x10uLL);
    uint64_t v14 = (_WORD *)*((void *)v12 + 4);
  }
  size_t v15 = strlen(v11);
  size_t v16 = v15;
  if (v15 <= *((void *)v12 + 3) - (void)v14)
  {
    if (v15)
    {
      memcpy(v14, v11, v15);
      uint64_t v14 = (_WORD *)(*((void *)v12 + 4) + v16);
      *((void *)v12 + 4) = v14;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, v11, v15);
    uint64_t v14 = (_WORD *)*((void *)v12 + 4);
  }
  if (*((void *)v12 + 3) - (void)v14 > 1uLL)
  {
    *uint64_t v14 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1CD098D14(v12, a3, 0, 0, 0);
  uint64_t v17 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v17 > 1uLL)
  {
    *uint64_t v17 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);
  if (a5)
  {
    uint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v19 = (_WORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v19 > 1uLL)
    {
      *uint64_t v19 = 8236;
      *((void *)v18 + 4) += 2;
    }
    else
    {
      uint64_t v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
    }
    sub_1CD098D14(v18, a5, 0, 0, 0);
  }
  sub_1CCBB0448(*(llvm::raw_ostream **)(a1 + 280), v21);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5968(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v6 = (char *)*((void *)v5 + 4);
  unint64_t v7 = *((void *)v5 + 3) - (void)v6;
  if (a3)
  {
    if (v7 <= 0x1C)
    {
      uint64_t v8 = "\t.ptrauth_kernel_abi_version ";
      size_t v9 = 29;
LABEL_6:
      llvm::raw_ostream::write(v5, v8, v9);
      goto LABEL_7;
    }
    qmemcpy(v6, "\t.ptrauth_kernel_abi_version ", 29);
    uint64_t v11 = *((void *)v5 + 4) + 29;
  }
  else
  {
    if (v7 <= 0x15)
    {
      uint64_t v8 = "\t.ptrauth_abi_version ";
      size_t v9 = 22;
      goto LABEL_6;
    }
    qmemcpy(v6, "\t.ptrauth_abi_version ", 22);
    uint64_t v11 = *((void *)v5 + 4) + 22;
  }
  *((void *)v5 + 4) = v11;
LABEL_7:
  sub_1CD098D14(*(llvm::raw_ostream **)(a1 + 280), a2, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5A44(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 0xB)
  {
    *(_DWORD *)(v5 + 8) = 1668183398;
    *(void *)uint64_t v5 = *(void *)"\t.thumb_func";
    *((void *)v4 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.thumb_func", 0xCuLL);
  }
  if (*(unsigned char *)(*(void *)(a1 + 288) + 18))
  {
    unint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v8 = (unsigned char *)*((void *)v7 + 4);
    if ((unint64_t)v8 >= *((void *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 9);
    }
    else
    {
      *((void *)v7 + 4) = v8 + 1;
      *uint64_t v8 = 9;
    }
    llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  }

  return sub_1CCBB0264(a1);
}

uint64_t sub_1CCBA5B14(llvm::raw_ostream **a1, llvm::MCSymbol *a2, llvm::raw_ostream *a3)
{
  if (*(unsigned char *)a3 != 4 || ((*(uint64_t (**)(void))(*((void *)a3 - 1) + 48))() & 1) == 0)
  {
    unint64_t v7 = a1[35];
    uint64_t v8 = *((void *)v7 + 4);
    if ((unint64_t)(*((void *)v7 + 3) - v8) > 4)
    {
      *(unsigned char *)(v8 + 4) = 32;
      *(_DWORD *)uint64_t v8 = 1952805678;
      *((void *)v7 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v7, ".set ", 5uLL);
    }
    llvm::MCSymbol::print(a2, a1[35], a1[36]);
    size_t v9 = a1[35];
    char v10 = (_WORD *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v10 > 1uLL)
    {
      *char v10 = 8236;
      *((void *)v9 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v9, ", ", 2uLL);
    }
    llvm::MCExpr::print(a3, a1[35], a1[36], 0);
    sub_1CCBB0264((uint64_t)a1);
  }

  return llvm::MCStreamer::emitAssignment((llvm::MCStreamer *)a1, a2, (const llvm::MCExpr **)a3);
}

llvm::raw_ostream *sub_1CCBA5C44(uint64_t a1, llvm::MCSymbol *a2, llvm::raw_ostream *a3)
{
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0x14uLL)
  {
    qmemcpy(v7, ".lto_set_conditional ", 21);
    *((void *)v6 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".lto_set_conditional ", 0x15uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *size_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCExpr::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA5D2C(uint64_t a1, llvm::MCSymbol *a2, llvm::MCSymbol *a3)
{
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 8)
  {
    *(unsigned char *)(v7 + 8) = 32;
    *(void *)uint64_t v7 = *(void *)".weakref ";
    *((void *)v6 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".weakref ", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *size_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

uint64_t sub_1CCBA5E10(uint64_t a1, llvm::MCSymbol *this, int a3)
{
  int v5 = a3 - 2;
  if ((a3 - 2) >= 7)
  {
    uint64_t result = 0;
    switch(a3)
    {
      case 1:
        return result;
      case 9:
        char v21 = *(const char **)(*(void *)(a1 + 288) + 344);
        if (v21) {
          goto LABEL_57;
        }
        break;
      case 10:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v22 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v22) <= 8)
        {
          size_t v9 = "\t.lglobl\t";
          goto LABEL_30;
        }
        uint64_t v38 = "\t.lglobl\t";
        goto LABEL_85;
      case 11:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v22 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v22) <= 8)
        {
          size_t v9 = "\t.extern\t";
          goto LABEL_30;
        }
        uint64_t v38 = "\t.extern\t";
        goto LABEL_85;
      case 12:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v22 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v22) <= 8)
        {
          size_t v9 = "\t.hidden\t";
LABEL_30:
          size_t v10 = 9;
          goto LABEL_61;
        }
        uint64_t v38 = "\t.hidden\t";
LABEL_85:
        *(unsigned char *)(v22 + 8) = 9;
        *(void *)uint64_t v22 = *(void *)v38;
        uint64_t v37 = *((void *)v7 + 4) + 9;
        goto LABEL_100;
      case 13:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v23 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v23) <= 0x11)
        {
          size_t v9 = "\t.indirect_symbol\t";
          goto LABEL_55;
        }
        __int16 v39 = 2412;
        uint64_t v40 = "\t.indirect_symbol\t";
        goto LABEL_98;
      case 14:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v24 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v24) <= 0xA)
        {
          size_t v9 = "\t.internal\t";
          size_t v10 = 11;
          goto LABEL_61;
        }
        *(_DWORD *)(v24 + 7) = 158097774;
        *(void *)uint64_t v24 = *(void *)"\t.internal\t";
        uint64_t v37 = *((void *)v7 + 4) + 11;
        goto LABEL_100;
      case 15:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v25 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v25) <= 0x10)
        {
          size_t v9 = "\t.lazy_reference\t";
          goto LABEL_45;
        }
        uint64_t v41 = "\t.lazy_reference\t";
        goto LABEL_93;
      case 16:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        size_t v26 = (void *)*((void *)v7 + 4);
        if (*((void *)v7 + 3) - (void)v26 <= 7uLL)
        {
          size_t v9 = "\t.local\t";
          size_t v10 = 8;
          goto LABEL_61;
        }
        *size_t v26 = 0x96C61636F6C2E09;
        uint64_t v37 = *((void *)v7 + 4) + 8;
        goto LABEL_100;
      case 17:
        if (!*(unsigned char *)(*(void *)(a1 + 288) + 367)) {
          return 0;
        }
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v8 = (_OWORD *)*((void *)v7 + 4);
        if (*((void *)v7 + 3) - (void)v8 <= 0xFuLL)
        {
          size_t v9 = "\t.no_dead_strip\t";
          size_t v10 = 16;
          goto LABEL_61;
        }
        *uint64_t v8 = *(_OWORD *)"\t.no_dead_strip\t";
        uint64_t v37 = *((void *)v7 + 4) + 16;
        goto LABEL_100;
      case 18:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v23 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v23) <= 0x11)
        {
          size_t v9 = "\t.symbol_resolver\t";
          goto LABEL_55;
        }
        __int16 v39 = 2418;
        uint64_t v40 = "\t.symbol_resolver\t";
        goto LABEL_98;
      case 19:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v27 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v27) <= 0xB)
        {
          size_t v9 = "\t.alt_entry\t";
          goto LABEL_50;
        }
        int v42 = 158954100;
        size_t v43 = "\t.alt_entry\t";
        goto LABEL_96;
      case 20:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v25 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v25) <= 0x10)
        {
          size_t v9 = "\t.private_extern\t";
LABEL_45:
          size_t v10 = 17;
          goto LABEL_61;
        }
        uint64_t v41 = "\t.private_extern\t";
LABEL_93:
        *(unsigned char *)(v25 + 16) = 9;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v41;
        uint64_t v37 = *((void *)v7 + 4) + 17;
        goto LABEL_100;
      case 21:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v27 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v27) <= 0xB)
        {
          size_t v9 = "\t.protected\t";
          goto LABEL_50;
        }
        int v42 = 157574516;
        size_t v43 = "\t.protected\t";
        goto LABEL_96;
      case 22:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v27 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v27) <= 0xB)
        {
          size_t v9 = "\t.reference\t";
LABEL_50:
          size_t v10 = 12;
          goto LABEL_61;
        }
        int v42 = 157639534;
        size_t v43 = "\t.reference\t";
LABEL_96:
        *(_DWORD *)(v27 + 8) = v42;
        *(void *)uint64_t v27 = *(void *)v43;
        uint64_t v37 = *((void *)v7 + 4) + 12;
        goto LABEL_100;
      case 23:
        char v21 = *(const char **)(*(void *)(a1 + 288) + 376);
        if (!v21) {
          break;
        }
        goto LABEL_57;
      case 24:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v23 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v23) <= 0x11)
        {
          size_t v9 = "\t.weak_definition\t";
LABEL_55:
          size_t v10 = 18;
          goto LABEL_61;
        }
        __int16 v39 = 2414;
        uint64_t v40 = "\t.weak_definition\t";
LABEL_98:
        *(_WORD *)(v23 + 16) = v39;
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v40;
        uint64_t v37 = *((void *)v7 + 4) + 18;
        goto LABEL_100;
      case 25:
        char v21 = *(const char **)(*(void *)(a1 + 288) + 384);
        if (!v21) {
          break;
        }
LABEL_57:
        uint64_t v28 = *(void *)(a1 + 280);
        size_t v10 = strlen(v21);
        uint64_t v29 = *(void **)(v28 + 32);
        if (v10 > *(void *)(v28 + 24) - (void)v29)
        {
          uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
          size_t v9 = v21;
          goto LABEL_61;
        }
        if (v10)
        {
          int v35 = v21;
          size_t v36 = v10;
          memcpy(v29, v35, v10);
          *(void *)(v28 + 32) += v36;
        }
        break;
      case 26:
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        int v30 = (void *)*((void *)v7 + 4);
        if (*((void *)v7 + 3) - (void)v30 > 0x18uLL)
        {
          qmemcpy(v30, "\t.weak_def_can_be_hidden\t", 25);
          uint64_t v37 = *((void *)v7 + 4) + 25;
LABEL_100:
          *((void *)v7 + 4) = v37;
        }
        else
        {
          size_t v9 = "\t.weak_def_can_be_hidden\t";
          size_t v10 = 25;
LABEL_61:
          llvm::raw_ostream::write(v7, v9, v10);
        }
        break;
      default:
        break;
    }
    llvm::MCSymbol::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  }
  else
  {
    if (!*(unsigned char *)(*(void *)(a1 + 288) + 363)) {
      return 0;
    }
    uint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
    __int16 v12 = (_DWORD *)*((void *)v11 + 4);
    if (*((void *)v11 + 3) - (void)v12 > 6uLL)
    {
      *(_DWORD *)((char *)v12 + 3) = 157642873;
      _DWORD *v12 = 2037657097;
      *((void *)v11 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v11, "\t.type\t", 7uLL);
    }
    llvm::MCSymbol::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    size_t v13 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
    if ((unint64_t)v14 >= *((void *)v13 + 3))
    {
      size_t v13 = llvm::raw_ostream::write(v13, 44);
    }
    else
    {
      *((void *)v13 + 4) = v14 + 1;
      *uint64_t v14 = 44;
    }
    if (**(unsigned char **)(*(void *)(a1 + 288) + 48) == 64) {
      char v15 = 37;
    }
    else {
      char v15 = 64;
    }
    size_t v16 = (char *)*((void *)v13 + 4);
    if ((unint64_t)v16 >= *((void *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, v15);
    }
    else
    {
      *((void *)v13 + 4) = v16 + 1;
      *size_t v16 = v15;
    }
    switch(v5)
    {
      case 0:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v18 = (void *)*((void *)v17 + 4);
        if (*((void *)v17 + 3) - (void)v18 <= 7uLL)
        {
          uint64_t v19 = "function";
          size_t v20 = 8;
          goto LABEL_76;
        }
        void *v18 = 0x6E6F6974636E7566;
        uint64_t v44 = *((void *)v17 + 4) + 8;
        goto LABEL_109;
      case 1:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        int v31 = (void *)*((void *)v17 + 4);
        if (*((void *)v17 + 3) - (void)v31 <= 0x14uLL)
        {
          uint64_t v19 = "gnu_indirect_function";
          size_t v20 = 21;
          goto LABEL_76;
        }
        qmemcpy(v31, "gnu_indirect_function", 21);
        uint64_t v44 = *((void *)v17 + 4) + 21;
        goto LABEL_109;
      case 2:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v32 = *((void *)v17 + 4);
        if ((unint64_t)(*((void *)v17 + 3) - v32) <= 5)
        {
          uint64_t v19 = "object";
          goto LABEL_73;
        }
        *(_WORD *)(v32 + 4) = 29795;
        int v45 = 1701470831;
        goto LABEL_107;
      case 3:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v33 = *((void *)v17 + 4);
        if ((unint64_t)(*((void *)v17 + 3) - v33) <= 9)
        {
          uint64_t v19 = "tls_object";
          size_t v20 = 10;
          goto LABEL_76;
        }
        *(_WORD *)(v33 + 8) = 29795;
        *(void *)uint64_t v33 = *(void *)"tls_object";
        uint64_t v44 = *((void *)v17 + 4) + 10;
        goto LABEL_109;
      case 4:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v32 = *((void *)v17 + 4);
        if ((unint64_t)(*((void *)v17 + 3) - v32) <= 5)
        {
          uint64_t v19 = "common";
          goto LABEL_73;
        }
        *(_WORD *)(v32 + 4) = 28271;
        int v45 = 1835888483;
        goto LABEL_107;
      case 5:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v32 = *((void *)v17 + 4);
        if ((unint64_t)(*((void *)v17 + 3) - v32) <= 5)
        {
          uint64_t v19 = "notype";
LABEL_73:
          size_t v20 = 6;
          goto LABEL_76;
        }
        *(_WORD *)(v32 + 4) = 25968;
        int v45 = 2037673838;
LABEL_107:
        *(_DWORD *)uint64_t v32 = v45;
        uint64_t v44 = *((void *)v17 + 4) + 6;
        goto LABEL_109;
      case 6:
        uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v34 = *((void *)v17 + 4);
        if ((unint64_t)(*((void *)v17 + 3) - v34) > 0x10)
        {
          *(unsigned char *)(v34 + 16) = 116;
          *(_OWORD *)uint64_t v34 = *(_OWORD *)"gnu_unique_object";
          uint64_t v44 = *((void *)v17 + 4) + 17;
LABEL_109:
          *((void *)v17 + 4) = v44;
        }
        else
        {
          uint64_t v19 = "gnu_unique_object";
          size_t v20 = 17;
LABEL_76:
          llvm::raw_ostream::write(v17, v19, v20);
        }
        break;
      default:
        return 0;
    }
  }
  sub_1CCBB0264(a1);
  return 1;
}

llvm::raw_ostream *sub_1CCBA6600(uint64_t a1, llvm::MCSymbol *a2, unsigned int a3)
{
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 4)
  {
    *(unsigned char *)(v7 + 4) = 99;
    *(_DWORD *)uint64_t v7 = 1936024622;
    uint64_t v8 = (unsigned char *)(*((void *)v6 + 4) + 5);
    *((void *)v6 + 4) = v8;
  }
  else
  {
    size_t v6 = llvm::raw_ostream::write(v6, ".desc", 5uLL);
    uint64_t v8 = (unsigned char *)*((void *)v6 + 4);
  }
  if ((unint64_t)v8 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((void *)v6 + 4) = v8 + 1;
    *uint64_t v8 = 32;
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v9 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v10 = (unsigned char *)*((void *)v9 + 4);
  if ((unint64_t)v10 >= *((void *)v9 + 3))
  {
    size_t v9 = llvm::raw_ostream::write(v9, 44);
  }
  else
  {
    *((void *)v9 + 4) = v10 + 1;
    *size_t v10 = 44;
  }
  sub_1CD098D14(v9, a3, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6704(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 2406;
    *(_DWORD *)uint64_t v5 = 1701064201;
    *((void *)v4 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.def\t", 6uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 59);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 59;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA67BC(uint64_t a1, int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 2412;
    *(_DWORD *)uint64_t v5 = 1668492809;
    *((void *)v4 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.scl\t", 6uLL);
  }
  unint64_t v6 = a2;
  if (a2 < 0)
  {
    unint64_t v6 = -(uint64_t)a2;
    uint64_t v7 = v4;
    int v8 = 1;
  }
  else
  {
    uint64_t v7 = v4;
    int v8 = 0;
  }
  sub_1CD098D14(v7, v6, 0, 0, v8);
  size_t v9 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v9 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 59);
  }
  else
  {
    *((void *)v4 + 4) = v9 + 1;
    *size_t v9 = 59;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA68A8(uint64_t a1, int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = (_DWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 157642873;
    _DWORD *v5 = 2037657097;
    *((void *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.type\t", 7uLL);
  }
  unint64_t v6 = a2;
  if (a2 < 0)
  {
    unint64_t v6 = -(uint64_t)a2;
    uint64_t v7 = v4;
    int v8 = 1;
  }
  else
  {
    uint64_t v7 = v4;
    int v8 = 0;
  }
  sub_1CD098D14(v7, v6, 0, 0, v8);
  size_t v9 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v9 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 59);
  }
  else
  {
    *((void *)v4 + 4) = v9 + 1;
    *size_t v9 = 59;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6998(uint64_t a1)
{
  uint64_t v2 = *(llvm::raw_ostream **)(a1 + 280);
  int v3 = (_DWORD *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 6uLL)
  {
    *(_DWORD *)((char *)v3 + 3) = 1717920878;
    *int v3 = 1852124681;
    *((void *)v2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.endef", 7uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6A18(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 9)
  {
    *(_WORD *)(v5 + 8) = 2408;
    *(void *)uint64_t v5 = *(void *)"\t.safeseh\t";
    *((void *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.safeseh\t", 0xAuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6AA8(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 8)
  {
    *(unsigned char *)(v5 + 8) = 9;
    *(void *)uint64_t v5 = *(void *)"\t.symidx\t";
    *((void *)v4 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.symidx\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6B38(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 8)
  {
    *(unsigned char *)(v5 + 8) = 9;
    *(void *)uint64_t v5 = *(void *)"\t.secidx\t";
    *((void *)v4 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.secidx\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6BC8(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3)
{
  unint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 154284908;
    *(void *)uint64_t v7 = *(void *)"\t.secrel32\t";
    *((void *)v6 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.secrel32\t", 0xBuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (a3)
  {
    int v8 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      int v8 = llvm::raw_ostream::write(v8, 43);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      *size_t v9 = 43;
    }
    sub_1CD098D14(v8, a3, 0, 0, 0);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6CAC(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  unint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 2401;
    *(_DWORD *)uint64_t v7 = 1987194377;
    *((void *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.rva\t", 6uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (a3 < 1)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
    int v8 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v10 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v10 >= *((void *)v8 + 3))
    {
      int v8 = llvm::raw_ostream::write(v8, 45);
    }
    else
    {
      *((void *)v8 + 4) = v10 + 1;
      *size_t v10 = 45;
    }
    unint64_t v11 = -a3;
  }
  else
  {
    int v8 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v9 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v9 >= *((void *)v8 + 3))
    {
      int v8 = llvm::raw_ostream::write(v8, 43);
    }
    else
    {
      *((void *)v8 + 4) = v9 + 1;
      *size_t v9 = 43;
    }
    unint64_t v11 = a3;
  }
  llvm::raw_ostream::operator<<(v8, v11);
LABEL_12:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA6DB8(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3, llvm::MCSymbol *a4, unsigned int a5)
{
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (void *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 7uLL)
  {
    *unint64_t v11 = 0x96D6D6F636C2E09;
    *((void *)v10 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v10, "\t.lcomm\t", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  __int16 v12 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v13 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v13 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 44);
  }
  else
  {
    *((void *)v12 + 4) = v13 + 1;
    unsigned char *v13 = 44;
  }
  sub_1CD098D14(v12, a3, 0, 0, 0);
  uint64_t v14 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v14 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 44);
  }
  else
  {
    *((void *)v12 + 4) = v14 + 1;
    *uint64_t v14 = 44;
  }
  llvm::MCSymbol::print(a4, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  char v15 = *(llvm::raw_ostream **)(a1 + 280);
  size_t v16 = (unsigned char *)*((void *)v15 + 4);
  if ((unint64_t)v16 >= *((void *)v15 + 3))
  {
    char v15 = llvm::raw_ostream::write(v15, 44);
  }
  else
  {
    *((void *)v15 + 4) = v16 + 1;
    *size_t v16 = 44;
  }
  sub_1CD098D14(v15, 31 - __clz(a5), 0, 0, 0);
  uint64_t result = sub_1CCBB0264(a1);
  uint64_t v18 = *((void *)a4 + 8);
  if (v18)
  {
    uint64_t v19 = (unsigned __int8 *)*((void *)a4 + 7);
    return sub_1CCBA71AC(a1, a4, v19, v18);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA6F54(uint64_t a1, llvm::MCSymbol *this, int a3, int a4)
{
  if (a3 <= 10)
  {
    if (a3 != 9)
    {
      if (a3 == 10)
      {
        uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v8 = *((void *)v7 + 4);
        if ((unint64_t)(*((void *)v7 + 3) - v8) <= 8)
        {
          size_t v9 = "\t.lglobl\t";
LABEL_15:
          size_t v14 = 9;
          goto LABEL_16;
        }
        uint64_t v24 = "\t.lglobl\t";
LABEL_37:
        *(unsigned char *)(v8 + 8) = 9;
        *(void *)uint64_t v8 = *(void *)v24;
        *((void *)v7 + 4) += 9;
        goto LABEL_17;
      }
      goto LABEL_38;
    }
    size_t v10 = *(const char **)(*(void *)(a1 + 288) + 344);
    if (!v10) {
      goto LABEL_17;
    }
LABEL_11:
    unint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v12 = strlen(v10);
    size_t v13 = (void *)*((void *)v11 + 4);
    if (v12 > *((void *)v11 + 3) - (void)v13)
    {
      uint64_t v7 = v11;
      size_t v9 = v10;
      size_t v14 = v12;
LABEL_16:
      llvm::raw_ostream::write(v7, v9, v14);
      goto LABEL_17;
    }
    if (v12)
    {
      memcpy(v13, v10, v12);
      *((void *)v11 + 4) += v12;
    }
    goto LABEL_17;
  }
  if (a3 == 11)
  {
    uint64_t v7 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v8 = *((void *)v7 + 4);
    if ((unint64_t)(*((void *)v7 + 3) - v8) <= 8)
    {
      size_t v9 = "\t.extern\t";
      goto LABEL_15;
    }
    uint64_t v24 = "\t.extern\t";
    goto LABEL_37;
  }
  if (a3 != 23)
  {
LABEL_38:
    uint64_t v25 = "unhandled linkage type";
    goto LABEL_39;
  }
  size_t v10 = *(const char **)(*(void *)(a1 + 288) + 376);
  if (v10) {
    goto LABEL_11;
  }
LABEL_17:
  llvm::MCSymbol::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (!a4) {
    goto LABEL_25;
  }
  if (a4 != 21)
  {
    if (a4 == 12)
    {
      char v15 = *(llvm::raw_ostream **)(a1 + 280);
      size_t v16 = (_DWORD *)*((void *)v15 + 4);
      if (*((void *)v15 + 3) - (void)v16 <= 6uLL)
      {
        uint64_t v17 = ",hidden";
        size_t v18 = 7;
LABEL_24:
        llvm::raw_ostream::write(v15, v17, v18);
        goto LABEL_25;
      }
      *(_DWORD *)((char *)v16 + 3) = 1852138596;
      *size_t v16 = 1684629548;
      uint64_t v23 = *((void *)v15 + 4) + 7;
      goto LABEL_34;
    }
    uint64_t v25 = "unexpected value for Visibility type";
LABEL_39:
    llvm::report_fatal_error((llvm *)v25, (const llvm::Twine *)1);
  }
  char v15 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v19 = *((void *)v15 + 4);
  if ((unint64_t)(*((void *)v15 + 3) - v19) <= 9)
  {
    uint64_t v17 = ",protected";
    size_t v18 = 10;
    goto LABEL_24;
  }
  *(_WORD *)(v19 + 8) = 25701;
  *(void *)uint64_t v19 = *(void *)",protected";
  uint64_t v23 = *((void *)v15 + 4) + 10;
LABEL_34:
  *((void *)v15 + 4) = v23;
LABEL_25:
  uint64_t result = sub_1CCBB0264(a1);
  uint64_t v21 = *((void *)this + 8);
  if (v21)
  {
    uint64_t v22 = (unsigned __int8 *)*((void *)this + 7);
    return sub_1CCBA71AC(a1, this, v22, v21);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA71AC(uint64_t a1, llvm::MCSymbol *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) > 8)
  {
    *(unsigned char *)(v9 + 8) = 9;
    *(void *)uint64_t v9 = *(void *)"\t.rename\t";
    *((void *)v8 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.rename\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    size_t v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 44;
  }
  size_t v12 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v12 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 34);
    if (!a4) {
      goto LABEL_18;
    }
  }
  else
  {
    *((void *)v10 + 4) = v12 + 1;
    unsigned char *v12 = 34;
    if (!a4) {
      goto LABEL_18;
    }
  }
  do
  {
    int v13 = *a3;
    if (v13 == 34)
    {
      size_t v14 = *(llvm::raw_ostream **)(a1 + 280);
      char v15 = (unsigned char *)*((void *)v14 + 4);
      if ((unint64_t)v15 >= *((void *)v14 + 3))
      {
        llvm::raw_ostream::write(v14, 34);
      }
      else
      {
        *((void *)v14 + 4) = v15 + 1;
        *char v15 = 34;
      }
    }
    size_t v16 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v17 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, v13);
    }
    else
    {
      *((void *)v16 + 4) = v17 + 1;
      *uint64_t v17 = v13;
    }
    ++a3;
    --a4;
  }
  while (a4);
LABEL_18:
  size_t v18 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 34);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 34;
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA7348(uint64_t a1, const void *a2, size_t a3)
{
  unint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 8294;
    *(_DWORD *)uint64_t v7 = 1701981705;
    uint64_t v8 = (void *)(*((void *)v6 + 4) + 6);
    *((void *)v6 + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.ref ", 6uLL);
    uint64_t v8 = (void *)*((void *)v6 + 4);
  }
  if (a3 <= *((void *)v6 + 3) - (void)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      *((void *)v6 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v6, (const char *)a2, a3);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA741C(uint64_t a1, llvm::MCSymbol *a2, llvm::raw_ostream *a3)
{
  unint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (_DWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 157645417;
    *uint64_t v7 = 1769156105;
    *((void *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.size\t", 7uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCExpr::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA7504(uint64_t a1, llvm::MCSymbol *a2, const void *a3, size_t a4, char a5)
{
  v18[0] = (uint64_t)a3;
  v18[1] = a4;
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (void *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 7uLL)
  {
    *unint64_t v11 = 0x207265766D79732ELL;
    *((void *)v10 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".symver ", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v12 = *(llvm::raw_ostream **)(a1 + 280);
  int v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 8236;
    size_t v14 = (void *)(*((void *)v12 + 4) + 2);
    *((void *)v12 + 4) = v14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), ", ", 2uLL);
    size_t v14 = (void *)*((void *)v12 + 4);
  }
  if (a4 <= *((void *)v12 + 3) - (void)v14)
  {
    if (a4)
    {
      memcpy(v14, a3, a4);
      *((void *)v12 + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)a3, a4);
  }
  if ((a5 & 1) == 0 && llvm::StringRef::find(v18, "@@@", 3uLL, 0) == -1)
  {
    char v15 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v16 = (void *)*((void *)v15 + 4);
    if (*((void *)v15 + 3) - (void)v16 > 7uLL)
    {
      *size_t v16 = 0x65766F6D6572202CLL;
      *((void *)v15 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v15, ", remove", 8uLL);
    }
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA76A8(uint64_t a1, int a2, uint64_t a3)
{
  switch(a2)
  {
    case 1:
      char v5 = 0;
      unint64_t v6 = "AdrpAdrp";
      size_t v7 = 8;
      break;
    case 2:
      char v5 = 0;
      unint64_t v6 = "AdrpLdr";
      goto LABEL_11;
    case 3:
      char v5 = 0;
      unint64_t v6 = "AdrpAddLdr";
      goto LABEL_13;
    case 4:
      char v5 = 0;
      unint64_t v6 = "AdrpLdrGotLdr";
      goto LABEL_9;
    case 5:
      char v5 = 0;
      unint64_t v6 = "AdrpAddStr";
      goto LABEL_13;
    case 6:
      char v5 = 0;
      unint64_t v6 = "AdrpLdrGotStr";
LABEL_9:
      size_t v7 = 13;
      break;
    case 7:
      char v5 = 0;
      unint64_t v6 = "AdrpAdd";
LABEL_11:
      size_t v7 = 7;
      break;
    case 8:
      char v5 = 0;
      unint64_t v6 = "AdrpLdrGot";
LABEL_13:
      size_t v7 = 10;
      break;
    default:
      unint64_t v6 = 0;
      size_t v7 = 0;
      char v5 = 1;
      break;
  }
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if (*((unsigned char **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t", 1uLL);
    size_t v10 = (_DWORD *)*((void *)v8 + 4);
  }
  else
  {
    *uint64_t v9 = 9;
    size_t v10 = (_DWORD *)(*((void *)v8 + 4) + 1);
    *((void *)v8 + 4) = v10;
  }
  if (*((void *)v8 + 3) - (void)v10 > 3uLL)
  {
    *size_t v10 = 1752132654;
    unint64_t v11 = (unsigned char *)(*((void *)v8 + 4) + 4);
    *((void *)v8 + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(v8, ".loh", 4uLL);
    unint64_t v11 = (unsigned char *)*((void *)v8 + 4);
  }
  if (*((unsigned char **)v8 + 3) == v11)
  {
    llvm::raw_ostream::write(v8, " ", 1uLL);
    size_t v12 = (unsigned char *)*((void *)v8 + 4);
  }
  else
  {
    *unint64_t v11 = 32;
    size_t v12 = (unsigned char *)(*((void *)v8 + 4) + 1);
    *((void *)v8 + 4) = v12;
  }
  if (v7 <= *((void *)v8 + 3) - (void)v12)
  {
    if ((v5 & 1) == 0)
    {
      memcpy(v12, v6, v7);
      size_t v12 = (unsigned char *)(*((void *)v8 + 4) + v7);
      *((void *)v8 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, v6, v7);
    size_t v12 = (unsigned char *)*((void *)v8 + 4);
  }
  if (*((unsigned char **)v8 + 3) == v12)
  {
    llvm::raw_ostream::write(v8, "\t", 1uLL);
  }
  else
  {
    unsigned char *v12 = 9;
    ++*((void *)v8 + 4);
  }
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  if (v13)
  {
    size_t v14 = *(llvm::MCSymbol ***)a3;
    uint64_t v15 = 8 * v13;
    char v16 = 1;
    do
    {
      uint64_t v17 = *v14;
      if ((v16 & 1) == 0)
      {
        size_t v18 = *(llvm::raw_ostream **)(a1 + 280);
        uint64_t v19 = (_WORD *)*((void *)v18 + 4);
        if (*((void *)v18 + 3) - (void)v19 > 1uLL)
        {
          *uint64_t v19 = 8236;
          *((void *)v18 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v18, ", ", 2uLL);
        }
      }
      llvm::MCSymbol::print(v17, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
      char v16 = 0;
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA7990(uint64_t a1, unsigned int a2, unsigned int a3)
{
  char v5 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v6 = (_OWORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 0xFuLL)
  {
    *unint64_t v6 = *(_OWORD *)"\t.gnu_attribute ";
    *((void *)v5 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.gnu_attribute ", 0x10uLL);
  }
  sub_1CD098D14(v5, a2, 0, 0, 0);
  size_t v7 = (_WORD *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v7 > 1uLL)
  {
    *size_t v7 = 8236;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, ", ", 2uLL);
  }
  uint64_t result = sub_1CD098D14(v5, a3, 0, 0, 0);
  uint64_t v9 = (unsigned char *)*((void *)v5 + 4);
  if (*((unsigned char **)v5 + 3) == v9)
  {
    return llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *uint64_t v9 = 10;
    ++*((void *)v5 + 4);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA7AC0(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 6uLL)
  {
    *(_DWORD *)((char *)v9 + 3) = 158166383;
    *uint64_t v9 = 1868770825;
    *((void *)v8 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.comm\t", 7uLL);
  }
  llvm::MCSymbol::print((llvm::MCSymbol *)a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    size_t v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 44;
  }
  sub_1CD098D14(v10, a3, 0, 0, 0);
  if (a4)
  {
    size_t v12 = *(llvm::raw_ostream **)(a1 + 280);
    unint64_t v14 = *((void *)v12 + 3);
    uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
    if (*(unsigned char *)(*(void *)(a1 + 288) + 354))
    {
      if ((unint64_t)v13 >= v14)
      {
        size_t v12 = llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((void *)v12 + 4) = v13 + 1;
        unsigned char *v13 = 44;
      }
    }
    else
    {
      if ((unint64_t)v13 >= v14)
      {
        size_t v12 = llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((void *)v12 + 4) = v13 + 1;
        unsigned char *v13 = 44;
      }
      a4 = __clz(a4) ^ 0x1F;
    }
    sub_1CD098D14(v12, a4, 0, 0, 0);
  }
  uint64_t result = sub_1CCBB0264(a1);
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 8) & 0x1C0) == 0x180)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      if (v16)
      {
        uint64_t v17 = *(unsigned __int8 **)(a2 + 56);
        return sub_1CCBA71AC(a1, (llvm::MCSymbol *)a2, v17, v16);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA7C54(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (void *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 7uLL)
  {
    *uint64_t v9 = 0x96D6D6F636C2E09;
    *((void *)v8 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.lcomm\t", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    size_t v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *unint64_t v11 = 44;
  }
  sub_1CD098D14(v10, a3, 0, 0, 0);
  if (a4 >= 2)
  {
    int v12 = *(_DWORD *)(*(void *)(a1 + 288) + 356);
    if (v12 == 2)
    {
      uint64_t v13 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v15 = (unsigned char *)*((void *)v13 + 4);
      if ((unint64_t)v15 >= *((void *)v13 + 3))
      {
        uint64_t v13 = llvm::raw_ostream::write(v13, 44);
      }
      else
      {
        *((void *)v13 + 4) = v15 + 1;
        *uint64_t v15 = 44;
      }
      a4 = __clz(a4) ^ 0x1F;
    }
    else
    {
      if (v12 != 1) {
        goto LABEL_17;
      }
      uint64_t v13 = *(llvm::raw_ostream **)(a1 + 280);
      unint64_t v14 = (unsigned char *)*((void *)v13 + 4);
      if ((unint64_t)v14 >= *((void *)v13 + 3))
      {
        uint64_t v13 = llvm::raw_ostream::write(v13, 44);
      }
      else
      {
        *((void *)v13 + 4) = v14 + 1;
        *unint64_t v14 = 44;
      }
    }
    sub_1CD098D14(v13, a4, 0, 0, 0);
  }
LABEL_17:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA7DC8(uint64_t a1, uint64_t a2, llvm::MCSymbol *a3, unint64_t a4, unsigned int a5)
{
  if (a3)
  {
    uint64_t v27 = a3;
    *(void *)a3 = *(void *)a3 & 7 | (a2 + 48);
    int v20 = *(_DWORD *)(a1 + 96) + 1;
    *((_DWORD *)sub_1CD6A1F98((uint64_t *)(a1 + 88), &v27) + 2) = v20;
  }
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v11 = *((void *)v10 + 4);
  if ((unint64_t)(*((void *)v10 + 3) - v11) > 9)
  {
    *(_WORD *)(v11 + 8) = 8300;
    *(void *)uint64_t v11 = *(void *)".zerofill ";
    *((void *)v10 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".zerofill ", 0xAuLL);
  }
  int v12 = *(void **)(a1 + 280);
  if (!*(unsigned char *)(a2 + 239))
  {
    size_t v15 = strlen((const char *)(a2 + 224));
    unint64_t v14 = v12 + 4;
    uint64_t v13 = (unsigned char *)v12[4];
    if (v15 <= v12[3] - (void)v13)
    {
      if (!v15) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
LABEL_9:
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, (const char *)(a2 + 224), v15);
    uint64_t v13 = (unsigned char *)v12[4];
    goto LABEL_12;
  }
  unint64_t v14 = v12 + 4;
  uint64_t v13 = (unsigned char *)v12[4];
  size_t v15 = 16;
  if (v12[3] - (void)v13 <= 0xFuLL) {
    goto LABEL_9;
  }
LABEL_11:
  memcpy(v13, (const void *)(a2 + 224), v15);
  uint64_t v13 = (unsigned char *)(*v14 + v15);
  *unint64_t v14 = v13;
LABEL_12:
  if ((unsigned char *)v12[3] == v13)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, ",", 1uLL);
    uint64_t v16 = (void *)v12[4];
  }
  else
  {
    unsigned char *v13 = 44;
    uint64_t v16 = (void *)(v12[4] + 1);
    v12[4] = v16;
  }
  uint64_t v17 = *(const void **)(a2 + 200);
  size_t v18 = *(void *)(a2 + 208);
  if (v18 <= v12[3] - (void)v16)
  {
    if (v18)
    {
      memcpy(v16, v17, v18);
      v12[4] += v18;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, (const char *)v17, v18);
  }
  if (a3)
  {
    uint64_t v21 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
    if ((unint64_t)v22 >= *((void *)v21 + 3))
    {
      llvm::raw_ostream::write(v21, 44);
    }
    else
    {
      *((void *)v21 + 4) = v22 + 1;
      *uint64_t v22 = 44;
    }
    llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    uint64_t v23 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
    if ((unint64_t)v24 >= *((void *)v23 + 3))
    {
      uint64_t v23 = llvm::raw_ostream::write(v23, 44);
    }
    else
    {
      *((void *)v23 + 4) = v24 + 1;
      *uint64_t v24 = 44;
    }
    sub_1CD098D14(v23, a4, 0, 0, 0);
    if (a5)
    {
      uint64_t v25 = *(llvm::raw_ostream **)(a1 + 280);
      size_t v26 = (unsigned char *)*((void *)v25 + 4);
      if ((unint64_t)v26 >= *((void *)v25 + 3))
      {
        uint64_t v25 = llvm::raw_ostream::write(v25, 44);
      }
      else
      {
        *((void *)v25 + 4) = v26 + 1;
        *size_t v26 = 44;
      }
      sub_1CD098D14(v25, __clz(a5) ^ 0x1F, 0, 0, 0);
    }
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA8080(uint64_t a1, uint64_t a2, llvm::MCSymbol *a3, unint64_t a4, unsigned int a5)
{
  uint64_t v17 = a3;
  *(void *)a3 = *(void *)a3 & 7 | (a2 + 48);
  int v9 = *(_DWORD *)(a1 + 96) + 1;
  *((_DWORD *)sub_1CD6A1F98((uint64_t *)(a1 + 88), &v17) + 2) = v9;
  size_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v11 = *((void *)v10 + 4);
  if ((unint64_t)(*((void *)v10 + 3) - v11) > 5)
  {
    *(_WORD *)(v11 + 4) = 8307;
    *(_DWORD *)uint64_t v11 = 1935832110;
    *((void *)v10 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".tbss ", 6uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  int v12 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    int v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);
  if (a5 >= 2)
  {
    unint64_t v14 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v15 = (_WORD *)*((void *)v14 + 4);
    if (*((void *)v14 + 3) - (void)v15 > 1uLL)
    {
      *size_t v15 = 8236;
      *((void *)v14 + 4) += 2;
    }
    else
    {
      unint64_t v14 = llvm::raw_ostream::write(v14, ", ", 2uLL);
    }
    sub_1CD098D14(v14, __clz(a5) ^ 0x1F, 0, 0, 0);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA8208(llvm::raw_ostream *result, unsigned __int8 *a2, unint64_t a3)
{
  if (!a3) {
    return result;
  }
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)result;
  unint64_t v6 = a3 - 1;
  if (a3 == 1)
  {
    uint64_t v7 = *((void *)result + 2);
    if (v7)
    {
LABEL_4:
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 64);
      return (llvm::raw_ostream *)v8();
    }
    uint64_t v9 = *(void *)(v5 + 288);
    goto LABEL_14;
  }
  uint64_t v9 = *((void *)result + 36);
  size_t v10 = *(const void **)(v9 + 216);
  if (v10 && !a2[v6])
  {
    uint64_t v22 = (llvm::raw_ostream *)*((void *)result + 35);
    size_t v23 = strlen(*(const char **)(v9 + 216));
    uint64_t v24 = (void *)*((void *)v22 + 4);
    if (v23 <= *((void *)v22 + 3) - (void)v24)
    {
      if (v23)
      {
        memcpy(v24, v10, v23);
        *((void *)v22 + 4) += v23;
      }
      goto LABEL_25;
    }
    uint64_t v25 = v22;
    size_t v26 = (const char *)v10;
    goto LABEL_24;
  }
  uint64_t v11 = *(const void **)(v9 + 208);
  if (v11)
  {
    int v12 = (llvm::raw_ostream *)*((void *)result + 35);
    size_t v13 = strlen(*(const char **)(v9 + 208));
    unint64_t v14 = (void *)*((void *)v12 + 4);
    if (v13 <= *((void *)v12 + 3) - (void)v14)
    {
      if (v13)
      {
        memcpy(v14, v11, v13);
        *((void *)v12 + 4) += v13;
      }
      goto LABEL_27;
    }
    size_t v15 = v12;
    uint64_t v16 = (const char *)v11;
    goto LABEL_12;
  }
  if (!*(unsigned char *)(v9 + 361))
  {
LABEL_41:
    uint64_t v29 = *(const void **)(v9 + 224);
    if (!v29)
    {
      uint64_t v7 = *((void *)result + 2);
      if (v7) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v17 = *(const char **)(v9 + 248);
      do
      {
        unint64_t v18 = *v4;
        uint64_t v19 = *(llvm::raw_ostream **)(v5 + 280);
        if (v17)
        {
          size_t v20 = strlen(v17);
          uint64_t v21 = (void *)*((void *)v19 + 4);
          if (v20 <= *((void *)v19 + 3) - (void)v21)
          {
            if (v20)
            {
              memcpy(v21, v17, v20);
              *((void *)v19 + 4) += v20;
            }
          }
          else
          {
            llvm::raw_ostream::write(v19, v17, v20);
          }
        }
        sub_1CD098D14(v19, v18, 0, 0, 0);
        uint64_t result = sub_1CCBB0264(v5);
        ++v4;
        --v3;
      }
      while (v3);
      return result;
    }
    int v30 = (llvm::raw_ostream *)*((void *)result + 35);
    size_t v31 = strlen(*(const char **)(v9 + 224));
    uint64_t v32 = (void *)*((void *)v30 + 4);
    if (v31 <= *((void *)v30 + 3) - (void)v32)
    {
      if (v31)
      {
        memcpy(v32, v29, v31);
        *((void *)v30 + 4) += v31;
      }
    }
    else
    {
      llvm::raw_ostream::write(v30, (const char *)v29, v31);
    }
    uint64_t v33 = *(llvm::raw_ostream **)(v5 + 280);
    uint64_t v34 = &v4[v3 - 1];
    if (*(_DWORD *)(*(void *)(v5 + 288) + 240))
    {
      if (v34 != v4)
      {
        do
        {
          unsigned int v35 = *v4;
          if (v35 - 32 > 0x5E)
          {
            uint64_t v37 = (unsigned char *)*((void *)v33 + 4);
            if ((unint64_t)v37 >= *((void *)v33 + 3))
            {
              uint64_t v33 = llvm::raw_ostream::write(v33, 48);
            }
            else
            {
              *((void *)v33 + 4) = v37 + 1;
              unsigned char *v37 = 48;
            }
            int v38 = (v35 >> 6) | 0x30;
            __int16 v39 = (unsigned char *)*((void *)v33 + 4);
            if ((unint64_t)v39 >= *((void *)v33 + 3))
            {
              uint64_t v33 = llvm::raw_ostream::write(v33, v38);
            }
            else
            {
              *((void *)v33 + 4) = v39 + 1;
              *__int16 v39 = v38;
            }
            int v40 = (v35 >> 3) & 7 | 0x30;
            uint64_t v41 = (unsigned char *)*((void *)v33 + 4);
            if ((unint64_t)v41 >= *((void *)v33 + 3))
            {
              uint64_t v33 = llvm::raw_ostream::write(v33, v40);
            }
            else
            {
              *((void *)v33 + 4) = v41 + 1;
              unsigned char *v41 = v40;
            }
            char v42 = v35 & 7 | 0x30;
            size_t v43 = (char *)*((void *)v33 + 4);
            if ((unint64_t)v43 >= *((void *)v33 + 3))
            {
              uint64_t v33 = llvm::raw_ostream::write(v33, v42);
            }
            else
            {
              *((void *)v33 + 4) = v43 + 1;
              *size_t v43 = v42;
            }
          }
          else
          {
            v68[0] = 39;
            v68[1] = v35;
            size_t v36 = (_WORD *)*((void *)v33 + 4);
            if (*((void *)v33 + 3) - (void)v36 > 1uLL)
            {
              *size_t v36 = *(_WORD *)v68;
              *((void *)v33 + 4) += 2;
            }
            else
            {
              uint64_t v33 = llvm::raw_ostream::write(v33, v68, 2uLL);
            }
          }
          uint64_t v44 = (unsigned char *)*((void *)v33 + 4);
          if ((unint64_t)v44 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, 44);
          }
          else
          {
            *((void *)v33 + 4) = v44 + 1;
            *uint64_t v44 = 44;
          }
          ++v4;
          --v6;
        }
        while (v6);
      }
      unsigned int v45 = *v34;
      if (v45 - 32 <= 0x5E)
      {
        v69[0] = 39;
        v69[1] = v45;
        unint64_t v46 = (_WORD *)*((void *)v33 + 4);
        if (*((void *)v33 + 3) - (void)v46 > 1uLL)
        {
          _WORD *v46 = *(_WORD *)v69;
          *((void *)v33 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v33, v69, 2uLL);
        }
        return sub_1CCBB0264(v5);
      }
    }
    else
    {
      if (v34 != v4)
      {
        do
        {
          unsigned int v50 = *v4;
          unsigned int v51 = (unsigned char *)*((void *)v33 + 4);
          if ((unint64_t)v51 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, 48);
          }
          else
          {
            *((void *)v33 + 4) = v51 + 1;
            *unsigned int v51 = 48;
          }
          int v52 = (v50 >> 6) | 0x30;
          uint64_t v53 = (unsigned char *)*((void *)v33 + 4);
          if ((unint64_t)v53 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, v52);
          }
          else
          {
            *((void *)v33 + 4) = v53 + 1;
            *uint64_t v53 = v52;
          }
          int v54 = (v50 >> 3) & 7 | 0x30;
          size_t v55 = (unsigned char *)*((void *)v33 + 4);
          if ((unint64_t)v55 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, v54);
          }
          else
          {
            *((void *)v33 + 4) = v55 + 1;
            *size_t v55 = v54;
          }
          char v56 = v50 & 7 | 0x30;
          size_t v57 = (char *)*((void *)v33 + 4);
          if ((unint64_t)v57 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, v56);
          }
          else
          {
            *((void *)v33 + 4) = v57 + 1;
            *size_t v57 = v56;
          }
          char v58 = (unsigned char *)*((void *)v33 + 4);
          if ((unint64_t)v58 >= *((void *)v33 + 3))
          {
            uint64_t v33 = llvm::raw_ostream::write(v33, 44);
          }
          else
          {
            *((void *)v33 + 4) = v58 + 1;
            *char v58 = 44;
          }
          ++v4;
          --v6;
        }
        while (v6);
      }
      unsigned int v45 = *v34;
    }
    size_t v59 = (unsigned char *)*((void *)v33 + 4);
    if ((unint64_t)v59 >= *((void *)v33 + 3))
    {
      uint64_t v33 = llvm::raw_ostream::write(v33, 48);
    }
    else
    {
      *((void *)v33 + 4) = v59 + 1;
      *size_t v59 = 48;
    }
    int v60 = (v45 >> 6) | 0x30;
    char v61 = (unsigned char *)*((void *)v33 + 4);
    if ((unint64_t)v61 >= *((void *)v33 + 3))
    {
      uint64_t v33 = llvm::raw_ostream::write(v33, v60);
    }
    else
    {
      *((void *)v33 + 4) = v61 + 1;
      *char v61 = v60;
    }
    int v62 = (v45 >> 3) & 7 | 0x30;
    uint64_t v63 = (unsigned char *)*((void *)v33 + 4);
    if ((unint64_t)v63 >= *((void *)v33 + 3))
    {
      uint64_t v33 = llvm::raw_ostream::write(v33, v62);
    }
    else
    {
      *((void *)v33 + 4) = v63 + 1;
      unsigned char *v63 = v62;
    }
    char v64 = v45 & 7 | 0x30;
    size_t v65 = (char *)*((void *)v33 + 4);
    if ((unint64_t)v65 >= *((void *)v33 + 3))
    {
      llvm::raw_ostream::write(v33, v64);
    }
    else
    {
      *((void *)v33 + 4) = v65 + 1;
      *size_t v65 = v64;
    }
    return sub_1CCBB0264(v5);
  }
  if (&a2[a3 - 1] != a2)
  {
    unint64_t v27 = a3 - 1;
    uint64_t v28 = a2;
    while (*v28 - 32 < 0x5F)
    {
      ++v28;
      if (!--v27) {
        goto LABEL_39;
      }
    }
    goto LABEL_41;
  }
LABEL_39:
  if (a2[v6] && a2[v6] - 32 > 0x5E) {
    goto LABEL_41;
  }
  size_t v47 = (llvm::raw_ostream *)*((void *)result + 35);
  if (!a2[v6])
  {
    uint64_t v66 = *(const void **)(v9 + 232);
    if (!v66)
    {
LABEL_25:
      if (v3 >= v6) {
        unint64_t v3 = v6;
      }
      goto LABEL_27;
    }
    size_t v23 = strlen(*(const char **)(v9 + 232));
    uint64_t v67 = (void *)*((void *)v47 + 4);
    if (v23 <= *((void *)v47 + 3) - (void)v67)
    {
      if (v23)
      {
        memcpy(v67, v66, v23);
        *((void *)v47 + 4) += v23;
      }
      goto LABEL_25;
    }
    uint64_t v25 = v47;
    size_t v26 = (const char *)v66;
LABEL_24:
    llvm::raw_ostream::write(v25, v26, v23);
    goto LABEL_25;
  }
  size_t v48 = *(const void **)(v9 + 224);
  if (!v48) {
    goto LABEL_27;
  }
  size_t v13 = strlen(*(const char **)(v9 + 224));
  size_t v49 = (void *)*((void *)v47 + 4);
  if (v13 <= *((void *)v47 + 3) - (void)v49)
  {
    if (v13)
    {
      memcpy(v49, v48, v13);
      *((void *)v47 + 4) += v13;
    }
    goto LABEL_27;
  }
  size_t v15 = v47;
  uint64_t v16 = (const char *)v48;
LABEL_12:
  llvm::raw_ostream::write(v15, v16, v13);
LABEL_27:
  sub_1CCBB05F8((llvm::raw_ostream *)v5, v4, v3, *(llvm::raw_ostream **)(v5 + 280));

  return sub_1CCBB0264(v5);
}

llvm::raw_ostream *sub_1CCBA88D8(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  unint64_t v19 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v19)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = 0;
    do
    {
      unint64_t v6 = v5 + 4;
      if (a3 >= v5 + 4) {
        unint64_t v7 = v5 + 4;
      }
      else {
        unint64_t v7 = a3;
      }
      uint64_t v8 = *(void *)(v4 + 288);
      uint64_t v9 = *(const void **)(v8 + 248);
      if (v9)
      {
        size_t v10 = *(llvm::raw_ostream **)(v4 + 280);
        size_t v11 = strlen(*(const char **)(v8 + 248));
        int v12 = (void *)*((void *)v10 + 4);
        if (v11 <= *((void *)v10 + 3) - (void)v12)
        {
          if (v11)
          {
            memcpy(v12, v9, v11);
            *((void *)v10 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v10, (const char *)v9, v11);
        }
      }
      for (; v5 < v7 - 1; ++v5)
      {
        size_t v13 = *(llvm::raw_ostream **)(v4 + 280);
        uint64_t v14 = *(unsigned __int8 *)(a2 + v5);
        uint64_t v21 = &unk_1F260ED30;
        uint64_t v22 = "0x%02x";
        uint64_t v23 = v14;
        size_t v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)&v21);
        uint64_t v16 = (_WORD *)*((void *)v15 + 4);
        if (*((void *)v15 + 3) - (void)v16 > 1uLL)
        {
          *uint64_t v16 = 8236;
          *((void *)v15 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v15, ", ", 2uLL);
        }
      }
      uint64_t v17 = *(unsigned __int8 *)(a2 + v5);
      unint64_t v18 = *(llvm::raw_ostream **)(v4 + 280);
      uint64_t v21 = &unk_1F260ED30;
      uint64_t v22 = "0x%02x";
      uint64_t v23 = v17;
      llvm::raw_ostream::operator<<(v18, (uint64_t)&v21);
      uint64_t result = sub_1CCBB0264(v4);
      unint64_t v5 = v6;
    }
    while (v6 < v19);
  }
  return result;
}

uint64_t sub_1CCBA8E0C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v11 = *(_DWORD *)(v6 + 216) >> 7;
    if (v11 >= 0x1E) {
      LOBYTE(v11) = 30;
    }
    uint64_t v12 = 4096 << v11;
    unint64_t v8 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
    unsigned int v13 = *(_DWORD *)(v6 + 216);
    if (v13 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v13) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v12;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  *(unsigned char *)unint64_t v8 = 1;
  *(_DWORD *)(v8 + 1) = *(unsigned __int8 *)(v8 + 4) << 24;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v9(a1, v8, a3, 0);
}

uint64_t sub_1CCBA8F60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v11 = *(_DWORD *)(v6 + 216) >> 7;
    if (v11 >= 0x1E) {
      LOBYTE(v11) = 30;
    }
    uint64_t v12 = 4096 << v11;
    unint64_t v8 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
    unsigned int v13 = *(_DWORD *)(v6 + 216);
    if (v13 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v13) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v12;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  *(unsigned char *)unint64_t v8 = 1;
  *(_DWORD *)(v8 + 1) = (*(unsigned __int8 *)(v8 + 4) << 24) | 0x100;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v9(a1, v8, a3, 0);
}

uint64_t sub_1CCBA90B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v11 = *(_DWORD *)(v6 + 216) >> 7;
    if (v11 >= 0x1E) {
      LOBYTE(v11) = 30;
    }
    uint64_t v12 = 4096 << v11;
    unint64_t v8 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
    unsigned int v13 = *(_DWORD *)(v6 + 216);
    if (v13 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v13) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v12;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  *(unsigned char *)unint64_t v8 = 1;
  *(_DWORD *)(v8 + 1) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(v8 + 4) << 24) | 0x100;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v9(a1, v8, a3, 0);
}

void sub_1CCBA9214(llvm::raw_ostream **a1, llvm::raw_ostream *a2)
{
  unint64_t v7 = 0;
  if (llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v7, 0, 0, 0, 0))
  {
    unint64_t v4 = v7;
    llvm::MCStreamer::emitULEB128IntValue((llvm::MCStreamer *)a1, v4, 0);
  }
  else
  {
    unint64_t v5 = a1[35];
    uint64_t v6 = *((void *)v5 + 4);
    if ((unint64_t)(*((void *)v5 + 3) - v6) > 9)
    {
      *(_WORD *)(v6 + 8) = 8248;
      *(void *)uint64_t v6 = *(void *)"\t.uleb128 ";
      *((void *)v5 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v5, "\t.uleb128 ", 0xAuLL);
    }
    llvm::MCExpr::print(a2, a1[35], a1[36], 0);
    sub_1CCBB0264((uint64_t)a1);
  }
}

void sub_1CCBA9300(llvm::raw_ostream **a1, llvm::raw_ostream *a2)
{
  uint64_t v7 = 0;
  if (llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v7, 0, 0, 0, 0))
  {
    uint64_t v4 = v7;
    llvm::MCStreamer::emitSLEB128IntValue((llvm::MCStreamer *)a1, v4);
  }
  else
  {
    unint64_t v5 = a1[35];
    uint64_t v6 = *((void *)v5 + 4);
    if ((unint64_t)(*((void *)v5 + 3) - v6) > 9)
    {
      *(_WORD *)(v6 + 8) = 8248;
      *(void *)uint64_t v6 = *(void *)"\t.sleb128 ";
      *((void *)v5 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v5, "\t.sleb128 ", 0xAuLL);
    }
    llvm::MCExpr::print(a2, a1[35], a1[36], 0);
    sub_1CCBB0264((uint64_t)a1);
  }
}

llvm::raw_ostream *sub_1CCBA93E8(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 312);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 312));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA949C(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 304);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 304));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA9550(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 328);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 328));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA9604(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 320);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 320));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA96B8(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 288);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 288));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA976C(uint64_t a1, llvm::MCExpr *this)
{
  uint64_t v4 = *(void *)(a1 + 288);
  unint64_t v5 = *(const void **)(v4 + 296);
  if (v5)
  {
    uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v7 = strlen(*(const char **)(v4 + 296));
    unint64_t v8 = (void *)*((void *)v6 + 4);
    if (v7 <= *((void *)v6 + 3) - (void)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((void *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(this, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA9820(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v27 = 0;
  uint64_t result = (llvm::raw_ostream *)llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v27, 0, 0, 0, 0);
  uint64_t v7 = v27;
  if (!result || v27)
  {
    uint64_t v8 = *(void *)(a1 + 288);
    uint64_t v9 = *(const char **)(v8 + 192);
    if (v9)
    {
      if (!a3 || *(unsigned char *)(v8 + 200))
      {
        size_t v20 = *(llvm::raw_ostream **)(a1 + 280);
        size_t v21 = strlen(v9);
        uint64_t v22 = (void *)*((void *)v20 + 4);
        if (v21 <= *((void *)v20 + 3) - (void)v22)
        {
          if (v21)
          {
            memcpy(v22, v9, v21);
            *((void *)v20 + 4) += v21;
          }
        }
        else
        {
          llvm::raw_ostream::write(v20, v9, v21);
        }
        llvm::MCExpr::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);
        if (a3)
        {
          uint64_t v23 = *(llvm::raw_ostream **)(a1 + 280);
          uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
          if ((unint64_t)v24 >= *((void *)v23 + 3))
          {
            uint64_t v23 = llvm::raw_ostream::write(v23, 44);
          }
          else
          {
            *((void *)v23 + 4) = v24 + 1;
            *uint64_t v24 = 44;
          }
          unint64_t v25 = (int)a3;
          if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
          {
            unint64_t v25 = -(uint64_t)(int)a3;
            int v26 = 1;
          }
          else
          {
            int v26 = 0;
          }
          sub_1CD098D14(v23, v25, 0, 0, v26);
        }
        return sub_1CCBB0264(a1);
      }
      else
      {
        if (!result) {
          llvm::report_fatal_error((llvm *)"Cannot emit non-absolute expression lengths of fill.", (const llvm::Twine *)1);
        }
        if (v27 >= 1)
        {
          int64_t v10 = a3 << 32;
          unint64_t v11 = (int)a3;
          uint64_t v12 = -(uint64_t)(int)a3;
          do
          {
            uint64_t v14 = *(llvm::raw_ostream **)(a1 + 280);
            uint64_t v13 = *(void *)(a1 + 288);
            size_t v15 = *(const void **)(v13 + 248);
            if (v15)
            {
              size_t v16 = strlen(*(const char **)(v13 + 248));
              uint64_t v17 = (void *)*((void *)v14 + 4);
              if (v16 <= *((void *)v14 + 3) - (void)v17)
              {
                if (v16)
                {
                  memcpy(v17, v15, v16);
                  *((void *)v14 + 4) += v16;
                }
              }
              else
              {
                llvm::raw_ostream::write(v14, (const char *)v15, v16);
              }
            }
            if (v10 < (uint64_t)0xFFFFFFFF00000001)
            {
              unint64_t v18 = v12;
              int v19 = 1;
            }
            else
            {
              unint64_t v18 = v11;
              int v19 = 0;
            }
            sub_1CD098D14(v14, v18, 0, 0, v19);
            uint64_t result = sub_1CCBB0264(a1);
            --v7;
          }
          while (v7);
        }
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBA9A7C(uint64_t a1, llvm::raw_ostream *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 6uLL)
  {
    *(_DWORD *)((char *)v9 + 3) = 158100585;
    *uint64_t v9 = 1768304137;
    *((void *)v8 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.fill\t", 7uLL);
  }
  llvm::MCExpr::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);
  int64_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *unint64_t v11 = 8236;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    int64_t v10 = llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  uint64_t v12 = llvm::raw_ostream::operator<<(v10, a3);
  uint64_t v13 = (_DWORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 3uLL)
  {
    _DWORD *v13 = 2016419884;
    *((void *)v12 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", 0x", 4uLL);
  }
  llvm::write_hex(*(llvm::raw_ostream **)(a1 + 280), a4, 1, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA9BB8(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, int8x8_t a6)
{
  a6.i32[0] = a2;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(a6);
  v8.i16[0] = vaddlv_u8(v8);
  if (*(unsigned char *)(*(void *)(a1 + 288) + 187))
  {
    if (v8.i32[0] != 1) {
      llvm::report_fatal_error((llvm *)"Only power-of-two alignments are supported with .align.", (const llvm::Twine *)1);
    }
    uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
    int64_t v10 = (void *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v10 > 7uLL)
    {
      *int64_t v10 = 0x96E67696C612E09;
      *((void *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, "\t.align\t", 8uLL);
    }
    unint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
    unsigned int v12 = 31 - __clz(a2);
    goto LABEL_40;
  }
  unsigned int v12 = a5;
  char v13 = a4;
  if (v8.i32[0] == 1)
  {
    if (a4 == 1)
    {
      size_t v15 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v16 = *((void *)v15 + 4);
      if ((unint64_t)(*((void *)v15 + 3) - v16) <= 9)
      {
        uint64_t v17 = "\t.p2align\t";
        goto LABEL_19;
      }
      __int16 v31 = 2414;
      uint64_t v32 = "\t.p2align\t";
    }
    else if (a4 == 2)
    {
      size_t v15 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v16 = *((void *)v15 + 4);
      if ((unint64_t)(*((void *)v15 + 3) - v16) <= 9)
      {
        uint64_t v17 = ".p2alignw ";
LABEL_19:
        llvm::raw_ostream::write(v15, v17, 0xAuLL);
        goto LABEL_20;
      }
      __int16 v31 = 8311;
      uint64_t v32 = ".p2alignw ";
    }
    else
    {
      size_t v15 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v16 = *((void *)v15 + 4);
      if ((unint64_t)(*((void *)v15 + 3) - v16) <= 9)
      {
        uint64_t v17 = ".p2alignl ";
        goto LABEL_19;
      }
      __int16 v31 = 8300;
      uint64_t v32 = ".p2alignl ";
    }
    *(_WORD *)(v16 + 8) = v31;
    *(void *)uint64_t v16 = *(void *)v32;
    *((void *)v15 + 4) += 10;
LABEL_20:
    sub_1CD098D14(*(llvm::raw_ostream **)(a1 + 280), 31 - __clz(a2), 0, 0, 0);
    if (!a3 && !v12) {
      goto LABEL_41;
    }
    size_t v21 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v22 = (_DWORD *)*((void *)v21 + 4);
    if (*((void *)v21 + 3) - (void)v22 > 3uLL)
    {
      *uint64_t v22 = 2016419884;
      *((void *)v21 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v21, ", 0x", 4uLL);
    }
    llvm::write_hex(*(llvm::raw_ostream **)(a1 + 280), (0xFFFFFFFFFFFFFFFFLL >> (-8 * v13)) & a3, 1, 0, 0);
    if (!v12) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  if (a4 == 1)
  {
    unint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v23 = (_DWORD *)*((void *)v18 + 4);
    if (*((void *)v18 + 3) - (void)v23 <= 6uLL)
    {
      size_t v20 = ".balign";
      size_t v24 = 7;
LABEL_31:
      llvm::raw_ostream::write(v18, v20, v24);
      goto LABEL_32;
    }
    *(_DWORD *)((char *)v23 + 3) = 1852270956;
    *uint64_t v23 = 1818321454;
    uint64_t v34 = *((void *)v18 + 4) + 7;
  }
  else
  {
    if (a4 == 2)
    {
      unint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
      int v19 = (uint64_t *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 <= 7uLL)
      {
        size_t v20 = ".balignw";
LABEL_30:
        size_t v24 = 8;
        goto LABEL_31;
      }
      uint64_t v33 = 0x776E67696C61622ELL;
    }
    else
    {
      unint64_t v18 = *(llvm::raw_ostream **)(a1 + 280);
      int v19 = (uint64_t *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v19 <= 7uLL)
      {
        size_t v20 = ".balignl";
        goto LABEL_30;
      }
      uint64_t v33 = 0x6C6E67696C61622ELL;
    }
    *int v19 = v33;
    uint64_t v34 = *((void *)v18 + 4) + 8;
  }
  *((void *)v18 + 4) = v34;
LABEL_32:
  unint64_t v25 = *(llvm::raw_ostream **)(a1 + 280);
  int v26 = (unsigned char *)*((void *)v25 + 4);
  if ((unint64_t)v26 >= *((void *)v25 + 3))
  {
    unint64_t v25 = llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((void *)v25 + 4) = v26 + 1;
    *int v26 = 32;
  }
  sub_1CD098D14(v25, a2, 0, 0, 0);
  uint64_t v27 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v28 = (_WORD *)*((void *)v27 + 4);
  if (*((void *)v27 + 3) - (void)v28 > 1uLL)
  {
    *uint64_t v28 = 8236;
    *((void *)v27 + 4) += 2;
  }
  else
  {
    uint64_t v27 = llvm::raw_ostream::write(v27, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v27, (0xFFFFFFFFFFFFFFFFLL >> (-8 * v13)) & a3);
  if (!v12) {
    goto LABEL_41;
  }
LABEL_38:
  unint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v29 = (_WORD *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v29 > 1uLL)
  {
    _WORD *v29 = 8236;
    *((void *)v11 + 4) += 2;
  }
  else
  {
    unint64_t v11 = llvm::raw_ostream::write(v11, ", ", 2uLL);
  }
LABEL_40:
  sub_1CD098D14(v11, v12, 0, 0, 0);
LABEL_41:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBA9FB4(uint64_t a1, unsigned int a2, int8x8_t a3, uint64_t a4, unsigned int a5)
{
  return sub_1CCBA9BB8(a1, a2, *(unsigned int *)(*(void *)(a1 + 288) + 340), 1, a5, a3);
}

llvm::raw_ostream *sub_1CCBA9FC8(uint64_t a1, llvm::raw_ostream *a2, unsigned int a3)
{
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 4)
  {
    *(unsigned char *)(v7 + 4) = 32;
    *(_DWORD *)uint64_t v7 = 1735552814;
    *((void *)v6 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".org ", 5uLL);
  }
  llvm::MCExpr::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);
  uint8x8_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint8x8_t v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1CD098D14(v8, a3, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAA0B4(llvm::raw_ostream **a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = a1[35];
  uint64_t v7 = (_DWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 157641833;
    *uint64_t v7 = 1768304137;
    *((void *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.file\t", 7uLL);
  }
  sub_1CCBB05F8((llvm::raw_ostream *)a1, a2, a3, a1[35]);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAA158(llvm::raw_ostream **a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8, unsigned char *a9, uint64_t a10)
{
  uint64_t v17 = a1[35];
  unint64_t v18 = (_DWORD *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v18 > 6uLL)
  {
    *(_DWORD *)((char *)v18 + 3) = 157641833;
    _DWORD *v18 = 1768304137;
    *((void *)v17 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\t.file\t", 7uLL);
  }
  sub_1CCBB05F8((llvm::raw_ostream *)a1, a2, a3, a1[35]);
  int v19 = a1[35];
  size_t v20 = (unsigned char *)*((void *)v19 + 4);
  if (*((unsigned char **)v19 + 3) == v20)
  {
    llvm::raw_ostream::write(v19, ",", 1uLL);
    if (!a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *size_t v20 = 44;
  ++*((void *)v19 + 4);
  if (a5) {
LABEL_5:
  }
    sub_1CCBB05F8((llvm::raw_ostream *)a1, a4, a5, a1[35]);
LABEL_6:
  if (a7)
  {
    size_t v21 = a1[35];
    uint64_t v22 = (unsigned char *)*((void *)v21 + 4);
    if (*((unsigned char **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, ",", 1uLL);
    }
    else
    {
      *uint64_t v22 = 44;
      ++*((void *)v21 + 4);
    }
    sub_1CCBB05F8((llvm::raw_ostream *)a1, a6, a7, a1[35]);
  }
  if (a10)
  {
    uint64_t v23 = a1[35];
    size_t v24 = (unsigned char *)*((void *)v23 + 4);
    if (*((unsigned char **)v23 + 3) == v24)
    {
      llvm::raw_ostream::write(v23, ",", 1uLL);
    }
    else
    {
      *size_t v24 = 44;
      ++*((void *)v23 + 4);
    }
    sub_1CCBB05F8((llvm::raw_ostream *)a1, a9, a10, a1[35]);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAA31C(llvm::raw_ostream **a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = a1[35];
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 7uLL)
  {
    *uint64_t v7 = 0x9746E6564692E09;
    *((void *)v6 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.ident\t", 8uLL);
  }
  sub_1CCBB05F8((llvm::raw_ostream *)a1, a2, a3, a1[35]);

  return sub_1CCBB0264((uint64_t)a1);
}

void sub_1CCBAA3BC(uint64_t a1@<X0>, unsigned int a2@<W1>, char *a3@<X2>, size_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, long long *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v38 = a3;
  size_t v39 = a4;
  size_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(char **)(v15 + 1480);
  if (v16)
  {
    do
    {
      while (1)
      {
        uint64_t v17 = v16;
        unsigned int v18 = *((_DWORD *)v16 + 8);
        if (v18 <= a10) {
          break;
        }
        uint64_t v16 = *(char **)v17;
        int v30 = (uint64_t **)v17;
        if (!*(void *)v17) {
          goto LABEL_9;
        }
      }
      if (v18 >= a10) {
        goto LABEL_12;
      }
      uint64_t v16 = (char *)*((void *)v17 + 1);
    }
    while (v16);
    int v30 = (uint64_t **)(v17 + 8);
  }
  else
  {
    int v30 = (uint64_t **)(v15 + 1480);
    uint64_t v17 = (char *)(v15 + 1480);
  }
LABEL_9:
  __int16 v31 = v17;
  uint64_t v17 = (char *)operator new(0x228uLL);
  *((_DWORD *)v17 + 8) = a10;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 168) = 0u;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_OWORD *)(v17 + 200) = 0u;
  *(_OWORD *)(v17 + 216) = 0u;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 248) = 0u;
  *((void *)v17 + 65) = 0;
  *(_OWORD *)(v17 + 264) = 0u;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  *(_OWORD *)(v17 + 328) = 0u;
  *(_OWORD *)(v17 + 344) = 0u;
  *(_OWORD *)(v17 + 360) = 0u;
  *(_OWORD *)(v17 + 376) = 0u;
  *(_OWORD *)(v17 + 392) = 0u;
  *(_OWORD *)(v17 + 408) = 0u;
  *(_OWORD *)(v17 + 424) = 0u;
  *(_OWORD *)(v17 + 440) = 0u;
  *(_OWORD *)(v17 + 456) = 0u;
  *(_OWORD *)(v17 + 472) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  *(_OWORD *)(v17 + 488) = 0u;
  *(_OWORD *)(v17 + 504) = 0u;
  *((void *)v17 + 6) = v17 + 64;
  *((_DWORD *)v17 + 15) = 3;
  *((void *)v17 + 17) = v17 + 152;
  *((_DWORD *)v17 + 37) = 3;
  *((void *)v17 + 47) = 0;
  *((void *)v17 + 46) = 0;
  *((void *)v17 + 48) = 0x1000000000;
  *((_OWORD *)v17 + 25) = 0u;
  *((_OWORD *)v17 + 26) = 0u;
  *((_OWORD *)v17 + 27) = 0u;
  *(void *)(v17 + 445) = 0;
  v17[497] = 1;
  *((void *)v17 + 64) = 0;
  *((void *)v17 + 63) = 0;
  *((_DWORD *)v17 + 130) = 0;
  *((void *)v17 + 66) = 0;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 67) = 0;
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = v31;
  *int v30 = (uint64_t *)v17;
  int v19 = (uint64_t *)v17;
  uint64_t v20 = **(void **)(v15 + 1472);
  if (v20)
  {
    *(void *)(v15 + 1472) = v20;
    int v19 = *v30;
  }
  sub_1CB8358B8(*(uint64_t **)(v15 + 1480), v19);
  ++*(void *)(v15 + 1488);
  uint64_t v15 = *(void *)(a1 + 8);
LABEL_12:
  int v21 = *((_DWORD *)v17 + 36);
  long long v42 = *a7;
  LOBYTE(v43) = *((unsigned char *)a7 + 16);
  *(_OWORD *)unsigned int v50 = *a8;
  *(void *)&v50[16] = *((void *)a8 + 2);
  llvm::MCDwarfLineTableHeader::tryGetFile(v17 + 40, (uint64_t)&v38, (uint64_t *)&v36, (size_t)&v42, (long long *)v50, *(unsigned __int16 *)(v15 + 1624), a2, (uint64_t)&v52);
  if (v53)
  {
    uint64_t v27 = v52;
    *(unsigned char *)(a9 + 8) |= 1u;
    *(void *)a9 = v27;
  }
  else
  {
    int v22 = v52;
    if (v21 == *((_DWORD *)v17 + 36) || !*(unsigned char *)(*(void *)(a1 + 288) + 426))
    {
      *(unsigned char *)(a9 + 8) &= ~1u;
      *(_DWORD *)a9 = v22;
    }
    else
    {
      *(void *)unsigned int v50 = v51;
      *(_OWORD *)&v50[8] = xmmword_1CFAC3020;
      DWORD2(v42) = 0;
      char v46 = 0;
      uint64_t v47 = 0;
      size_t v49 = v50;
      int v48 = 0;
      *(void *)&long long v42 = &unk_1F2646FA8;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      long long v23 = *a7;
      char v41 = *((unsigned char *)a7 + 16);
      long long v40 = v23;
      long long v24 = *a8;
      uint64_t v35 = *((void *)a8 + 2);
      int v25 = (*(unsigned __int8 *)(a1 + 752) >> 2) & 1;
      long long v34 = v24;
      sub_1CCBB09C0((llvm::raw_ostream *)a1, v52, v38, v39, v36, v37, (unsigned __int8 *)&v40, (uint64_t)&v34, v25, (llvm::raw_ostream *)&v42);
      uint64_t v26 = *(void *)(a1 + 16);
      if (v26)
      {
        (*(void (**)(uint64_t, void, void))(*(void *)v26 + 40))(v26, *v49, v49[1]);
      }
      else
      {
        uint64_t v29 = *v49;
        uint64_t v28 = v49[1];
        __int16 v33 = 261;
        v32[0] = v29;
        v32[1] = v28;
        llvm::MCStreamer::emitRawText((llvm::MCStreamer *)a1, (const llvm::Twine *)v32);
      }
      *(unsigned char *)(a9 + 8) &= ~1u;
      *(_DWORD *)a9 = v22;
      *(void *)&long long v42 = &unk_1F2646B98;
      if (v48 == 1 && v43) {
        MEMORY[0x1D25D9CB0](v43, 0x1000C8077774924);
      }
      if (*(unsigned char **)v50 != v51) {
        free(*(void **)v50);
      }
    }
  }
}

void sub_1CCBAA7B4(uint64_t a1, void *__src, size_t __len, unsigned char *a4, size_t a5, uint64_t a6, long long *a7, unsigned int a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(unsigned __int16 *)(v8 + 1624) >= 5u)
  {
    long long v49 = *(_OWORD *)a6;
    char v50 = *(unsigned char *)(a6 + 16);
    long long v35 = *a7;
    uint64_t v36 = *((void *)a7 + 2);
    uint64_t v16 = *(char **)(v8 + 1480);
    if (v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          unsigned int v18 = *((_DWORD *)v16 + 8);
          if (v18 <= a8) {
            break;
          }
          uint64_t v16 = *(char **)v17;
          uint64_t v28 = (uint64_t **)v17;
          if (!*(void *)v17) {
            goto LABEL_10;
          }
        }
        if (v18 >= a8) {
          goto LABEL_13;
        }
        uint64_t v16 = (char *)*((void *)v17 + 1);
      }
      while (v16);
      uint64_t v28 = (uint64_t **)(v17 + 8);
    }
    else
    {
      uint64_t v17 = (char *)(v8 + 1480);
      uint64_t v28 = (uint64_t **)(v8 + 1480);
    }
LABEL_10:
    uint64_t v29 = v17;
    size_t v30 = a5;
    uint64_t v17 = (char *)operator new(0x228uLL);
    *((_DWORD *)v17 + 8) = a8;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(_OWORD *)(v17 + 200) = 0u;
    *(_OWORD *)(v17 + 216) = 0u;
    *(_OWORD *)(v17 + 232) = 0u;
    *(_OWORD *)(v17 + 248) = 0u;
    *((void *)v17 + 65) = 0;
    *(_OWORD *)(v17 + 264) = 0u;
    *(_OWORD *)(v17 + 280) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 296) = 0u;
    *(_OWORD *)(v17 + 312) = 0u;
    *(_OWORD *)(v17 + 328) = 0u;
    *(_OWORD *)(v17 + 344) = 0u;
    *(_OWORD *)(v17 + 360) = 0u;
    *(_OWORD *)(v17 + 376) = 0u;
    *(_OWORD *)(v17 + 392) = 0u;
    *(_OWORD *)(v17 + 408) = 0u;
    *(_OWORD *)(v17 + 424) = 0u;
    *(_OWORD *)(v17 + 440) = 0u;
    *(_OWORD *)(v17 + 456) = 0u;
    *(_OWORD *)(v17 + 472) = 0u;
    *(_OWORD *)(v17 + 152) = 0u;
    *(_OWORD *)(v17 + 488) = 0u;
    *(_OWORD *)(v17 + 504) = 0u;
    *((void *)v17 + 6) = v17 + 64;
    *((_DWORD *)v17 + 15) = 3;
    *((void *)v17 + 17) = v17 + 152;
    *((_DWORD *)v17 + 37) = 3;
    *((void *)v17 + 47) = 0;
    *((void *)v17 + 46) = 0;
    *((void *)v17 + 48) = 0x1000000000;
    *((_OWORD *)v17 + 25) = 0u;
    *((_OWORD *)v17 + 26) = 0u;
    *((_OWORD *)v17 + 27) = 0u;
    *(void *)(v17 + 445) = 0;
    v17[497] = 1;
    *((void *)v17 + 64) = 0;
    *((void *)v17 + 63) = 0;
    *((_DWORD *)v17 + 130) = 0;
    *((void *)v17 + 66) = 0;
    *((void *)v17 + 68) = 0;
    *((void *)v17 + 67) = 0;
    *(void *)uint64_t v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v29;
    *uint64_t v28 = (uint64_t *)v17;
    int v19 = (uint64_t *)v17;
    uint64_t v20 = **(void **)(v8 + 1472);
    if (v20)
    {
      *(void *)(v8 + 1472) = v20;
      int v19 = *v28;
    }
    sub_1CB8358B8(*(uint64_t **)(v8 + 1480), v19);
    ++*(void *)(v8 + 1488);
    a5 = v30;
LABEL_13:
    uint64_t v21 = (uint64_t)(v17 + 40);
    long long v39 = v49;
    LOBYTE(v40) = v50;
    *(_OWORD *)uint64_t v47 = v35;
    *(void *)&v47[16] = v36;
    uint64_t v22 = a5;
    sub_1CCBB0D74(v21, __src, __len, a4, a5, &v39, (__n128 *)v47);
    if (*(unsigned char *)(*(void *)(a1 + 288) + 426))
    {
      *(void *)uint64_t v47 = v48;
      *(_OWORD *)&v47[8] = xmmword_1CFAC3020;
      DWORD2(v39) = 0;
      char v43 = 0;
      uint64_t v44 = 0;
      char v46 = v47;
      int v45 = 0;
      *(void *)&long long v39 = &unk_1F2646FA8;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      long long v37 = *(_OWORD *)a6;
      char v38 = *(unsigned char *)(a6 + 16);
      long long v23 = *a7;
      uint64_t v34 = *((void *)a7 + 2);
      int v24 = (*(unsigned __int8 *)(a1 + 752) >> 2) & 1;
      long long v33 = v23;
      sub_1CCBB09C0((llvm::raw_ostream *)a1, 0, (char *)__src, __len, a4, v22, (unsigned __int8 *)&v37, (uint64_t)&v33, v24, (llvm::raw_ostream *)&v39);
      uint64_t v25 = *(void *)(a1 + 16);
      if (v25)
      {
        (*(void (**)(uint64_t, void, void))(*(void *)v25 + 40))(v25, *v46, v46[1]);
      }
      else
      {
        uint64_t v27 = *v46;
        uint64_t v26 = v46[1];
        __int16 v32 = 261;
        v31[0] = v27;
        v31[1] = v26;
        llvm::MCStreamer::emitRawText((llvm::MCStreamer *)a1, (const llvm::Twine *)v31);
      }
      *(void *)&long long v39 = &unk_1F2646B98;
      if (v45 == 1 && v40) {
        MEMORY[0x1D25D9CB0](v40, 0x1000C8077774924);
      }
      if (*(unsigned char **)v47 != v48) {
        free(*(void **)v47);
      }
    }
  }
}

llvm::raw_ostream *sub_1CCBAAB88(llvm::MCStreamer *a1)
{
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo) {
    *(unsigned char *)(CurrentDwarfFrameInfo + 80) = 1;
  }
  unint64_t v3 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v4 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 101;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"\t.cfi_b_key_frame";
    *((void *)v3 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_b_key_frame", 0x11uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

void sub_1CCBAAC18(llvm::MCDwarfLineEntry *this, unsigned int a2, llvm::MCSection *a3, unsigned int a4, char a5, unsigned int a6, unsigned int a7, int a8, const void *a9, size_t a10)
{
  unsigned int v14 = a3;
  if (!*(unsigned char *)(*((void *)this + 36) + 426))
  {
    uint64_t v21 = *((unsigned int *)this + 30);
    if (v21) {
      uint64_t v22 = *(llvm::MCStreamer **)(*((void *)this + 14) + 32 * v21 - 32);
    }
    else {
      uint64_t v22 = 0;
    }
    llvm::MCDwarfLineEntry::make(this, v22, a3);
    goto LABEL_62;
  }
  uint64_t v17 = (llvm::raw_ostream *)*((void *)this + 35);
  uint64_t v18 = *((void *)v17 + 4);
  if ((unint64_t)(*((void *)v17 + 3) - v18) > 5)
  {
    *(_WORD *)(v18 + 4) = 2403;
    *(_DWORD *)uint64_t v18 = 1869360649;
    *((void *)v17 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 35), "\t.loc\t", 6uLL);
  }
  sub_1CD098D14(v17, a2, 0, 0, 0);
  int v19 = (unsigned char *)*((void *)v17 + 4);
  if (*((unsigned char **)v17 + 3) == v19)
  {
    llvm::raw_ostream::write(v17, " ", 1uLL);
  }
  else
  {
    *int v19 = 32;
    ++*((void *)v17 + 4);
  }
  sub_1CD098D14(v17, v14, 0, 0, 0);
  uint64_t v20 = (unsigned char *)*((void *)v17 + 4);
  if (*((unsigned char **)v17 + 3) == v20)
  {
    llvm::raw_ostream::write(v17, " ", 1uLL);
  }
  else
  {
    *uint64_t v20 = 32;
    ++*((void *)v17 + 4);
  }
  sub_1CD098D14(v17, a4, 0, 0, 0);
  if (*(unsigned char *)(*((void *)this + 36) + 431))
  {
    if ((a5 & 2) == 0)
    {
      if ((a5 & 4) == 0) {
        goto LABEL_11;
      }
LABEL_17:
      uint64_t v25 = (llvm::raw_ostream *)*((void *)this + 35);
      uint64_t v26 = (void *)*((void *)v25 + 4);
      if (*((void *)v25 + 3) - (void)v26 > 0xCuLL)
      {
        qmemcpy(v26, " prologue_end", 13);
        *((void *)v25 + 4) += 13;
        if ((a5 & 8) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        llvm::raw_ostream::write(v25, " prologue_end", 0xDuLL);
        if ((a5 & 8) == 0) {
          goto LABEL_21;
        }
      }
LABEL_19:
      uint64_t v27 = (llvm::raw_ostream *)*((void *)this + 35);
      uint64_t v28 = (void *)*((void *)v27 + 4);
      if (*((void *)v27 + 3) - (void)v28 > 0xEuLL)
      {
        qmemcpy(v28, " epilogue_begin", 15);
        *((void *)v27 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v27, " epilogue_begin", 0xFuLL);
      }
LABEL_21:
      if ((a5 & 1) != (*(unsigned char *)(*((void *)this + 1) + 1506) & 1))
      {
        uint64_t v29 = (llvm::raw_ostream *)*((void *)this + 35);
        uint64_t v30 = *((void *)v29 + 4);
        if ((unint64_t)(*((void *)v29 + 3) - v30) > 8)
        {
          *(unsigned char *)(v30 + 8) = 32;
          *(void *)uint64_t v30 = *(void *)" is_stmt ";
          *((void *)v29 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v29, " is_stmt ", 9uLL);
        }
        __int16 v31 = (llvm::raw_ostream *)*((void *)this + 35);
        long long v33 = (char *)*((void *)v31 + 3);
        __int16 v32 = (char *)*((void *)v31 + 4);
        if (a5)
        {
          if (v33 != v32)
          {
            char v47 = 49;
LABEL_74:
            *__int16 v32 = v47;
            ++*((void *)v31 + 4);
            if (!a6) {
              goto LABEL_38;
            }
            goto LABEL_35;
          }
          uint64_t v34 = "1";
        }
        else
        {
          if (v33 != v32)
          {
            char v47 = 48;
            goto LABEL_74;
          }
          uint64_t v34 = "0";
        }
        llvm::raw_ostream::write(v31, v34, 1uLL);
      }
      if (!a6) {
        goto LABEL_38;
      }
LABEL_35:
      long long v35 = (llvm::raw_ostream *)*((void *)this + 35);
      uint64_t v36 = *((void *)v35 + 4);
      if ((unint64_t)(*((void *)v35 + 3) - v36) > 4)
      {
        *(unsigned char *)(v36 + 4) = 32;
        *(_DWORD *)uint64_t v36 = 1634953504;
        *((void *)v35 + 4) += 5;
      }
      else
      {
        long long v35 = llvm::raw_ostream::write(v35, " isa ", 5uLL);
      }
      sub_1CD098D14(v35, a6, 0, 0, 0);
LABEL_38:
      if (a7)
      {
        long long v37 = (llvm::raw_ostream *)*((void *)this + 35);
        char v38 = (void *)*((void *)v37 + 4);
        if (*((void *)v37 + 3) - (void)v38 > 0xEuLL)
        {
          qmemcpy(v38, " discriminator ", 15);
          *((void *)v37 + 4) += 15;
        }
        else
        {
          long long v37 = llvm::raw_ostream::write(v37, " discriminator ", 0xFuLL);
        }
        sub_1CD098D14(v37, a7, 0, 0, 0);
      }
      goto LABEL_42;
    }
    long long v23 = (llvm::raw_ostream *)*((void *)this + 35);
    uint64_t v24 = *((void *)v23 + 4);
    if ((unint64_t)(*((void *)v23 + 3) - v24) > 0xB)
    {
      *(_DWORD *)(v24 + 8) = 1801678700;
      *(void *)uint64_t v24 = *(void *)" basic_block";
      *((void *)v23 + 4) += 12;
      if ((a5 & 4) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      llvm::raw_ostream::write(v23, " basic_block", 0xCuLL);
      if ((a5 & 4) != 0) {
        goto LABEL_17;
      }
    }
LABEL_11:
    if ((a5 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_42:
  if (*((unsigned char *)this + 752))
  {
    llvm::formatted_raw_ostream::PadToColumn(*((llvm::formatted_raw_ostream **)this + 35), 40);
    uint64_t v40 = (llvm::raw_ostream *)*((void *)this + 35);
    uint64_t v39 = *((void *)this + 36);
    uint64_t v41 = *(const void **)(v39 + 48);
    size_t v42 = *(void *)(v39 + 56);
    char v43 = (unsigned char *)*((void *)v40 + 4);
    if (v42 <= *((void *)v40 + 3) - (void)v43)
    {
      if (v42)
      {
        memcpy(v43, v41, v42);
        char v43 = (unsigned char *)(*((void *)v40 + 4) + v42);
        *((void *)v40 + 4) = v43;
      }
    }
    else
    {
      llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 35), (const char *)v41, v42);
      char v43 = (unsigned char *)*((void *)v40 + 4);
    }
    if ((unint64_t)v43 >= *((void *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 32);
    }
    else
    {
      *((void *)v40 + 4) = v43 + 1;
      *char v43 = 32;
    }
    uint64_t v44 = (unsigned char *)*((void *)v40 + 4);
    if (a10 <= *((void *)v40 + 3) - (void)v44)
    {
      if (a10)
      {
        memcpy(v44, a9, a10);
        uint64_t v44 = (unsigned char *)(*((void *)v40 + 4) + a10);
        *((void *)v40 + 4) = v44;
      }
    }
    else
    {
      llvm::raw_ostream::write(v40, (const char *)a9, a10);
      uint64_t v44 = (unsigned char *)*((void *)v40 + 4);
    }
    if ((unint64_t)v44 >= *((void *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 58);
    }
    else
    {
      *((void *)v40 + 4) = v44 + 1;
      *uint64_t v44 = 58;
    }
    sub_1CD098D14(v40, v14, 0, 0, 0);
    int v45 = (unsigned char *)*((void *)v40 + 4);
    if ((unint64_t)v45 >= *((void *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 58);
    }
    else
    {
      *((void *)v40 + 4) = v45 + 1;
      *int v45 = 58;
    }
    sub_1CD098D14(v40, a4, 0, 0, 0);
  }
  sub_1CCBB0264((uint64_t)this);
LABEL_62:
  uint64_t v46 = *((void *)this + 1);
  *(_DWORD *)(v46 + 1496) = a2;
  *(_DWORD *)(v46 + 1500) = v14;
  *(_WORD *)(v46 + 1504) = a4;
  *(unsigned char *)(v46 + 1506) = a5;
  *(unsigned char *)(v46 + 1507) = a6;
  *(_DWORD *)(v46 + 1508) = a7;
  *(unsigned char *)(v46 + 1512) = 1;
}

BOOL sub_1CCBAB1F8(llvm::MCContext **a1, unsigned int a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7)
{
  uint64_t CVContext = llvm::MCContext::getCVContext(a1[1]);
  BOOL v15 = llvm::CodeViewContext::addFile(CVContext, (uint64_t)a1, a2, a3, a4, (uint64_t)a5, a6, a7);
  if (v15)
  {
    uint64_t v16 = a1[35];
    uint64_t v17 = *((void *)v16 + 4);
    if ((unint64_t)(*((void *)v16 + 3) - v17) > 9)
    {
      *(_WORD *)(v17 + 8) = 2405;
      *(void *)uint64_t v17 = *(void *)"\t.cv_file\t";
      *((void *)v16 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a1[35], "\t.cv_file\t", 0xAuLL);
    }
    sub_1CD098D14(v16, a2, 0, 0, 0);
    uint64_t v18 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v18 >= *((void *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 32);
    }
    else
    {
      *((void *)v16 + 4) = v18 + 1;
      unsigned char *v18 = 32;
    }
    sub_1CCBB05F8((llvm::raw_ostream *)a1, a3, a4, a1[35]);
    if (a7)
    {
      uint64_t v20 = a1[35];
      uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
      if ((unint64_t)v21 >= *((void *)v20 + 3))
      {
        llvm::raw_ostream::write(v20, 32);
      }
      else
      {
        *((void *)v20 + 4) = v21 + 1;
        *uint64_t v21 = 32;
      }
      sub_1CD69BA30(a5, a6, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        uint64_t size = __p.__r_.__value_.__l.__size_;
      }
      sub_1CCBB05F8((llvm::raw_ostream *)a1, p_p, size, a1[35]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = a1[35];
      uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
      if ((unint64_t)v25 >= *((void *)v24 + 3))
      {
        uint64_t v24 = llvm::raw_ostream::write(v24, 32);
      }
      else
      {
        *((void *)v24 + 4) = v25 + 1;
        unsigned char *v25 = 32;
      }
      sub_1CD098D14(v24, a7, 0, 0, 0);
    }
    sub_1CCBB0264((uint64_t)a1);
  }
  return v15;
}

BOOL sub_1CCBAB400(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.cv_func_id ", 13);
    *((void *)v4 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_func_id ", 0xDuLL);
  }
  sub_1CD098D14(v4, a2, 0, 0, 0);
  uint64_t v6 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v6 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((void *)v4 + 4) = v6 + 1;
    *uint64_t v6 = 10;
  }
  uint64_t CVContext = (llvm::CodeViewContext *)llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));

  return llvm::CodeViewContext::recordFunctionId(CVContext, a2);
}

BOOL sub_1CCBAB4DC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  unsigned int v14 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v15 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v15) > 0x13)
  {
    *(_DWORD *)(v15 + 16) = 543451487;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)"\t.cv_inline_site_id ";
    *((void *)v14 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_inline_site_id ", 0x14uLL);
  }
  sub_1CD098D14(v14, a2, 0, 0, 0);
  uint64_t v16 = (void *)*((void *)v14 + 4);
  if (*((void *)v14 + 3) - (void)v16 > 7uLL)
  {
    *uint64_t v16 = 0x206E696874697720;
    *((void *)v14 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v14, " within ", 8uLL);
  }
  sub_1CD098D14(v14, a3, 0, 0, 0);
  uint64_t v17 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v17) > 0xB)
  {
    *(_DWORD *)(v17 + 8) = 544498015;
    *(void *)uint64_t v17 = *(void *)" inlined_at ";
    *((void *)v14 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v14, " inlined_at ", 0xCuLL);
  }
  sub_1CD098D14(v14, a4, 0, 0, 0);
  uint64_t v18 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v18 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  sub_1CD098D14(v14, a5, 0, 0, 0);
  int v19 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v19 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v19 + 1;
    *int v19 = 32;
  }
  sub_1CD098D14(v14, a6, 0, 0, 0);
  uint64_t v20 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v20 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 10);
  }
  else
  {
    *((void *)v14 + 4) = v20 + 1;
    *uint64_t v20 = 10;
  }

  return llvm::MCStreamer::EmitCVInlineSiteIdDirective(a1, a2, a3, a4, a5, a6, a7);
}

llvm::raw_ostream *sub_1CCBAB740(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8, const void *a9, size_t a10, uint64_t a11)
{
  unsigned int v15 = a3;
  uint64_t result = (llvm::raw_ostream *)llvm::MCStreamer::checkCVLocSection(a1, a2, a3, a11);
  if (!result) {
    return result;
  }
  int v19 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v20 = *((void *)v19 + 4);
  if ((unint64_t)(*((void *)v19 + 3) - v20) > 8)
  {
    *(unsigned char *)(v20 + 8) = 9;
    *(void *)uint64_t v20 = *(void *)"\t.cv_loc\t";
    *((void *)v19 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_loc\t", 9uLL);
  }
  sub_1CD098D14(v19, a2, 0, 0, 0);
  uint64_t v21 = (unsigned char *)*((void *)v19 + 4);
  if (*((unsigned char **)v19 + 3) == v21)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *uint64_t v21 = 32;
    ++*((void *)v19 + 4);
  }
  sub_1CD098D14(v19, v15, 0, 0, 0);
  uint64_t v22 = (unsigned char *)*((void *)v19 + 4);
  if (*((unsigned char **)v19 + 3) == v22)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *uint64_t v22 = 32;
    ++*((void *)v19 + 4);
  }
  sub_1CD098D14(v19, a4, 0, 0, 0);
  long long v23 = (unsigned char *)*((void *)v19 + 4);
  if (*((unsigned char **)v19 + 3) == v23)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *long long v23 = 32;
    ++*((void *)v19 + 4);
  }
  sub_1CD098D14(v19, a5, 0, 0, 0);
  if (!a6)
  {
LABEL_13:
    if (a7) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v24 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v25 = (void *)*((void *)v24 + 4);
  if (*((void *)v24 + 3) - (void)v25 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v24, " prologue_end", 0xDuLL);
    goto LABEL_13;
  }
  qmemcpy(v25, " prologue_end", 13);
  *((void *)v24 + 4) += 13;
  if (a7)
  {
LABEL_14:
    uint64_t v26 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v27 = *((void *)v26 + 4);
    if ((unint64_t)(*((void *)v26 + 3) - v27) > 9)
    {
      *(_WORD *)(v27 + 8) = 12576;
      *(void *)uint64_t v27 = *(void *)" is_stmt 1";
      *((void *)v26 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v26, " is_stmt 1", 0xAuLL);
    }
  }
LABEL_16:
  if (*(unsigned char *)(a1 + 752))
  {
    llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)(a1 + 280), 40);
    uint64_t v29 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v28 = *(void *)(a1 + 288);
    uint64_t v30 = *(const void **)(v28 + 48);
    size_t v31 = *(void *)(v28 + 56);
    __int16 v32 = (unsigned char *)*((void *)v29 + 4);
    if (v31 <= *((void *)v29 + 3) - (void)v32)
    {
      if (v31)
      {
        memcpy(v32, v30, v31);
        __int16 v32 = (unsigned char *)(*((void *)v29 + 4) + v31);
        *((void *)v29 + 4) = v32;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v30, v31);
      __int16 v32 = (unsigned char *)*((void *)v29 + 4);
    }
    if ((unint64_t)v32 >= *((void *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 32);
    }
    else
    {
      *((void *)v29 + 4) = v32 + 1;
      *__int16 v32 = 32;
    }
    long long v33 = (unsigned char *)*((void *)v29 + 4);
    if (a10 <= *((void *)v29 + 3) - (void)v33)
    {
      if (a10)
      {
        memcpy(v33, a9, a10);
        long long v33 = (unsigned char *)(*((void *)v29 + 4) + a10);
        *((void *)v29 + 4) = v33;
      }
    }
    else
    {
      llvm::raw_ostream::write(v29, (const char *)a9, a10);
      long long v33 = (unsigned char *)*((void *)v29 + 4);
    }
    if ((unint64_t)v33 >= *((void *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 58);
    }
    else
    {
      *((void *)v29 + 4) = v33 + 1;
      *long long v33 = 58;
    }
    sub_1CD098D14(v29, a4, 0, 0, 0);
    uint64_t v34 = (unsigned char *)*((void *)v29 + 4);
    if ((unint64_t)v34 >= *((void *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 58);
    }
    else
    {
      *((void *)v29 + 4) = v34 + 1;
      *uint64_t v34 = 58;
    }
    sub_1CD098D14(v29, a5, 0, 0, 0);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBABB2C(uint64_t a1, unsigned int a2, llvm::MCSymbol *a3, llvm::MCSymbol *a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (void *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 0xEuLL)
  {
    qmemcpy(v9, "\t.cv_linetable\t", 15);
    *((void *)v8 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_linetable\t", 0xFuLL);
  }
  sub_1CD098D14(v8, a2, 0, 0, 0);
  int64_t v10 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v10 > 1uLL)
  {
    *int64_t v10 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  unint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
  unsigned int v12 = (_WORD *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v12 > 1uLL)
  {
    _WORD *v12 = 8236;
    *((void *)v11 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v11, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a4, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBABC74(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, llvm::MCSymbol *a5, llvm::MCSymbol *a6)
{
  unsigned int v12 = *(llvm::raw_ostream **)(a1 + 280);
  char v13 = (void *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 0x15uLL)
  {
    qmemcpy(v13, "\t.cv_inline_linetable\t", 22);
    *((void *)v12 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_inline_linetable\t", 0x16uLL);
  }
  sub_1CD098D14(v12, a2, 0, 0, 0);
  unsigned int v14 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v14 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v14 + 1;
    *unsigned int v14 = 32;
  }
  sub_1CD098D14(v12, a3, 0, 0, 0);
  unsigned int v15 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v15 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v15 + 1;
    *unsigned int v15 = 32;
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);
  uint64_t v16 = (unsigned char *)*((void *)v12 + 4);
  if ((unint64_t)v16 >= *((void *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((void *)v12 + 4) = v16 + 1;
    *uint64_t v16 = 32;
  }
  llvm::MCSymbol::print(a5, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  llvm::MCSymbol::print(a6, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBABE34(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, uint64_t a4)
{
  sub_1CCBB0F44(a1, a2, a3);
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 539782245;
    *(void *)uint64_t v7 = *(void *)", reg_rel, ";
    *((void *)v6 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", reg_rel, ", 0xBuLL);
  }
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  sub_1CD098D14(v8, (unsigned __int16)a4, 0, 0, 0);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1CD098D14(v8, WORD1(a4), 0, 0, 0);
  int64_t v10 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v10 > 1uLL)
  {
    *int64_t v10 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  unint64_t v11 = a4 >> 32;
  if (a4 < 0)
  {
    unint64_t v11 = -(uint64_t)v11;
    unsigned int v12 = v8;
    int v13 = 1;
  }
  else
  {
    unsigned int v12 = v8;
    int v13 = 0;
  }
  sub_1CD098D14(v12, v11, 0, 0, v13);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBABFA8(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, unint64_t a4)
{
  sub_1CCBB0F44(a1, a2, a3);
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (_OWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xFuLL)
  {
    *uint64_t v7 = *(_OWORD *)", subfield_reg, ";
    *((void *)v6 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", subfield_reg, ", 0x10uLL);
  }
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  sub_1CD098D14(v8, (unsigned __int16)a4, 0, 0, 0);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1CD098D14(v8, HIDWORD(a4), 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC0A0(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, unsigned __int16 a4)
{
  sub_1CCBB0F44(a1, a2, a3);
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (_DWORD *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 539780965;
    *uint64_t v7 = 1701978156;
    *((void *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", reg, ", 7uLL);
  }
  sub_1CD098D14(*(llvm::raw_ostream **)(a1 + 280), a4, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC140(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, uint64_t a4)
{
  sub_1CCBB0F44(a1, a2, a3);
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0x10)
  {
    *(unsigned char *)(v7 + 16) = 32;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)", frame_ptr_rel, ";
    *((void *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", frame_ptr_rel, ", 0x11uLL);
  }
  unint64_t v8 = (int)a4;
  if (a4 << 32 < (uint64_t)0xFFFFFFFF00000001)
  {
    unint64_t v8 = -(uint64_t)(int)a4;
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
  }
  sub_1CD098D14(*(llvm::raw_ostream **)(a1 + 280), v8, 0, 0, v9);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC200(uint64_t a1)
{
  uint64_t v2 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v3 = (_OWORD *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0xFuLL)
  {
    *unint64_t v3 = *(_OWORD *)"\t.cv_stringtable";
    *((void *)v2 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cv_stringtable", 0x10uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC278(uint64_t a1)
{
  uint64_t v2 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v3 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v3) > 0x11)
  {
    *(_WORD *)(v3 + 16) = 29549;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)"\t.cv_filechecksums";
    *((void *)v2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cv_filechecksums", 0x12uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC2F8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x17uLL)
  {
    qmemcpy(v5, "\t.cv_filechecksumoffset\t", 24);
    *((void *)v4 + 4) += 24;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "\t.cv_filechecksumoffset\t", 0x18uLL);
  }
  sub_1CD098D14(v4, a2, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC390(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.cv_fpo_data\t", 14);
    *((void *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cv_fpo_data\t", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

uint64_t sub_1CCBAC420(llvm::MCStreamer *a1)
{
  return llvm::MCStreamer::getDwarfLineTableSymbol(a1, 0);
}

llvm::raw_ostream *sub_1CCBAC428(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 <= 0xEuLL)
  {
    llvm::raw_ostream::write(v6, "\t.cfi_sections ", 0xFuLL);
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    if (!a3) {
      goto LABEL_12;
    }
    int64_t v10 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v14 = *((void *)v10 + 4);
    if ((unint64_t)(*((void *)v10 + 3) - v14) <= 0xB)
    {
      unsigned int v12 = ".debug_frame";
      size_t v13 = 12;
      goto LABEL_11;
    }
    *(_DWORD *)(v14 + 8) = 1701667186;
    *(void *)uint64_t v14 = *(void *)".debug_frame";
    uint64_t v16 = *((void *)v10 + 4) + 12;
    goto LABEL_19;
  }
  qmemcpy(v7, "\t.cfi_sections ", 15);
  *((void *)v6 + 4) += 15;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  unint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v9) <= 8)
  {
    llvm::raw_ostream::write(v8, ".eh_frame", 9uLL);
    if (!a3) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  *(unsigned char *)(v9 + 8) = 101;
  *(void *)uint64_t v9 = *(void *)".eh_frame";
  *((void *)v8 + 4) += 9;
  if (a3)
  {
LABEL_5:
    int64_t v10 = *(llvm::raw_ostream **)(a1 + 280);
    unint64_t v11 = (void *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v11 <= 0xDuLL)
    {
      unsigned int v12 = ", .debug_frame";
      size_t v13 = 14;
LABEL_11:
      llvm::raw_ostream::write(v10, v12, v13);
      goto LABEL_12;
    }
    qmemcpy(v11, ", .debug_frame", 14);
    uint64_t v16 = *((void *)v10 + 4) + 14;
LABEL_19:
    *((void *)v10 + 4) = v16;
  }
LABEL_12:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAC5AC(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::MCStreamer::emitCFIDefCfa(a1, a2, a3);
  uint64_t v6 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xDuLL)
  {
    qmemcpy(v7, "\t.cfi_def_cfa ", 14);
    *((void *)v6 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_def_cfa ", 0xEuLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);
  unint64_t v8 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    unint64_t v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAC690(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFIDefCfaOffset(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x14uLL)
  {
    qmemcpy(v5, "\t.cfi_def_cfa_offset ", 21);
    *((void *)v4 + 4) += 21;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "\t.cfi_def_cfa_offset ", 0x15uLL);
  }
  llvm::raw_ostream::operator<<(v4, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAC720(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFIDefCfaRegister(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  unint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x16uLL)
  {
    qmemcpy(v5, "\t.cfi_def_cfa_register ", 23);
    *((void *)v4 + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_def_cfa_register ", 0x17uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAC7B4(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  llvm::MCStreamer::emitCFILLVMDefAspaceCfa(a1, a2, a3, a4);
  unint64_t v8 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v9 = (void *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 0x19uLL)
  {
    qmemcpy(v9, "\t.cfi_llvm_def_aspace_cfa ", 26);
    *((void *)v8 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.cfi_llvm_def_aspace_cfa ", 0x1AuLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);
  int64_t v10 = (llvm::raw_ostream *)*((void *)a1 + 35);
  unint64_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *unint64_t v11 = 8236;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    int64_t v10 = llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v10, a3);
  unsigned int v12 = (llvm::raw_ostream *)*((void *)a1 + 35);
  size_t v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    unsigned int v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v12, a4);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAC8E0(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::MCStreamer::emitCFIOffset(a1, a2, a3);
  uint64_t v6 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xCuLL)
  {
    qmemcpy(v7, "\t.cfi_offset ", 13);
    *((void *)v6 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_offset ", 0xDuLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);
  unint64_t v8 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    unint64_t v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAC9C4(llvm::raw_ostream **a1, llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo((llvm::MCStreamer *)a1);
  if (CurrentDwarfFrameInfo)
  {
    *(void *)(CurrentDwarfFrameInfo + 16) = a2;
    *(_DWORD *)(CurrentDwarfFrameInfo + 60) = a3;
  }
  uint64_t v7 = a1[35];
  uint64_t v8 = *((void *)v7 + 4);
  if ((unint64_t)(*((void *)v7 + 3) - v8) > 0x11)
  {
    *(_WORD *)(v8 + 16) = 8313;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)"\t.cfi_personality ";
    *((void *)v7 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a1[35], "\t.cfi_personality ", 0x12uLL);
  }
  sub_1CD098D14(v7, a3, 0, 0, 0);
  uint64_t v9 = (_WORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a2, a1[35], a1[36]);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACAC8(llvm::raw_ostream **a1, llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo((llvm::MCStreamer *)a1);
  if (CurrentDwarfFrameInfo)
  {
    *(void *)(CurrentDwarfFrameInfo + 24) = a2;
    *(_DWORD *)(CurrentDwarfFrameInfo + 64) = a3;
  }
  uint64_t v7 = a1[35];
  uint64_t v8 = *((void *)v7 + 4);
  if ((unint64_t)(*((void *)v7 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 543253619;
    *(void *)uint64_t v8 = *(void *)"\t.cfi_lsda ";
    *((void *)v7 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a1[35], "\t.cfi_lsda ", 0xBuLL);
  }
  sub_1CD098D14(v7, a3, 0, 0, 0);
  uint64_t v9 = (_WORD *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a2, a1[35], a1[36]);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACBD0(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::emitCFIRememberState(a1);
  uint64_t v2 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v3 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v3) > 0x13)
  {
    *(_DWORD *)(v3 + 16) = 1702125940;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)"\t.cfi_remember_state";
    *((void *)v2 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_remember_state", 0x14uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACC58(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::emitCFIRestoreState(a1);
  uint64_t v2 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v3 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v3) > 0x12)
  {
    *(_DWORD *)(v3 + 15) = 1702125940;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)"\t.cfi_restore_state";
    *((void *)v2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_restore_state", 0x13uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACCE0(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFISameValue(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 0x10)
  {
    *(unsigned char *)(v5 + 16) = 32;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)"\t.cfi_same_value ";
    *((void *)v4 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_same_value ", 0x11uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACD74(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFIRestore(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.cfi_restore ", 14);
    *((void *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_restore ", 0xEuLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACE08(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::MCStreamer::emitCFIRelOffset(a1, a2, a3);
  uint64_t v6 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v7 = *((void *)v6 + 4);
  if ((unint64_t)(*((void *)v6 + 3) - v7) > 0x10)
  {
    *(unsigned char *)(v7 + 16) = 32;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)"\t.cfi_rel_offset ";
    *((void *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_rel_offset ", 0x11uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);
  uint64_t v8 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACEEC(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFIAdjustCfaOffset(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0x17uLL)
  {
    qmemcpy(v5, "\t.cfi_adjust_cfa_offset ", 24);
    *((void *)v4 + 4) += 24;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "\t.cfi_adjust_cfa_offset ", 0x18uLL);
  }
  llvm::raw_ostream::operator<<(v4, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACF7C(llvm::raw_ostream **a1, void *a2, size_t a3)
{
  llvm::MCStreamer::emitCFIEscape((llvm::MCStreamer *)a1, a2, a3);
  sub_1CCBB10FC(a1[35], (unsigned __int8 *)a2, a3);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBACFD4(llvm::MCStreamer *a1, unint64_t a2)
{
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo) {
    *(_DWORD *)(CurrentDwarfFrameInfo + 76) = a2;
  }
  uint64_t v5 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v6 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v6) > 0x13)
  {
    *(_DWORD *)(v6 + 16) = 544107893;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"\t.cfi_return_column ";
    *((void *)v5 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.cfi_return_column ", 0x14uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD074(llvm::raw_ostream **a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  llvm::MCStreamer::emitCFIGnuArgsSize((llvm::MCStreamer *)a1, a2);
  long long v7 = xmmword_1CFB28820;
  uint64_t v4 = 1;
  do
  {
    BOOL v5 = v2 > 0x7F;
    *((unsigned char *)&v7 + v4++) = v2 & 0x7F | ((v2 > 0x7F) << 7);
    v2 >>= 7;
  }
  while (v5);
  sub_1CCBB10FC(a1[35], (unsigned __int8 *)&v7, v4);
  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD120(llvm::MCStreamer *a1)
{
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo) {
    *(unsigned char *)(CurrentDwarfFrameInfo + 72) = 1;
  }
  uint64_t v3 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v4 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 25965;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"\t.cfi_signal_frame";
    *((void *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_signal_frame", 0x12uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD1B0(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::MCStreamer::emitCFIUndefined(a1, a2);
  uint64_t v4 = (llvm::raw_ostream *)*((void *)a1 + 35);
  BOOL v5 = (_OWORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xFuLL)
  {
    _OWORD *v5 = *(_OWORD *)"\t.cfi_undefined ";
    *((void *)v4 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_undefined ", 0x10uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD23C(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::MCStreamer::emitCFIRegister(a1, a2, a3);
  uint64_t v6 = (llvm::raw_ostream *)*((void *)a1 + 35);
  long long v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xEuLL)
  {
    qmemcpy(v7, "\t.cfi_register ", 15);
    *((void *)v6 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_register ", 0xFuLL);
  }
  sub_1CCBB1050((uint64_t)a1, a2);
  uint64_t v8 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 1uLL)
  {
    *uint64_t v9 = 8236;
    *((void *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1CCBB1050((uint64_t)a1, a3);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD324(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::emitCFIWindowSave(a1);
  unint64_t v2 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v3 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v3) > 0x10)
  {
    *(unsigned char *)(v3 + 16) = 101;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)"\t.cfi_window_save";
    *((void *)v2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_window_save", 0x11uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD3A8(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::emitCFINegateRAState(a1);
  unint64_t v2 = (llvm::raw_ostream *)*((void *)a1 + 35);
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0x14uLL)
  {
    qmemcpy(v3, "\t.cfi_negate_ra_state", 21);
    *((void *)v2 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_negate_ra_state", 0x15uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD42C(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::MCStreamer::EmitWinCFIStartProc((void *)a1, (uint64_t)a2, a3);
  BOOL v5 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v6 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 8291;
    *(void *)uint64_t v6 = *(void *)".seh_proc ";
    *((void *)v5 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v5, ".seh_proc ", 0xAuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAD4C0(void *a1, uint64_t a2)
{
  llvm::MCStreamer::EmitWinCFIEndProc(a1, a2);
  uint64_t v3 = (llvm::raw_ostream *)a1[35];
  uint64_t v4 = (void *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 0xCuLL)
  {
    qmemcpy(v4, "\t.seh_endproc", 13);
    *((void *)v3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endproc", 0xDuLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD544(void *a1, uint64_t a2)
{
  llvm::MCStreamer::EmitWinCFIFuncletOrFuncEnd(a1, a2);
  uint64_t v3 = (llvm::raw_ostream *)a1[35];
  uint64_t v4 = (_OWORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 0xFuLL)
  {
    *uint64_t v4 = *(_OWORD *)"\t.seh_endfunclet";
    *((void *)v3 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endfunclet", 0x10uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD5C0(uint64_t a1, uint64_t a2)
{
  llvm::MCStreamer::EmitWinCFIStartChained(a1, a2);
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v4 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 25701;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"\t.seh_startchained";
    *((void *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_startchained", 0x12uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAD644(void *a1, uint64_t a2)
{
  llvm::MCStreamer::EmitWinCFIEndChained(a1, a2);
  uint64_t v3 = (llvm::raw_ostream *)a1[35];
  uint64_t v4 = (_OWORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v4 > 0xFuLL)
  {
    *uint64_t v4 = *(_OWORD *)"\t.seh_endchained";
    *((void *)v3 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endchained", 0x10uLL);
  }

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCStreamer::EmitWinCFIPushReg((void *)a1, a2, a3);
  BOOL v5 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v6 = (void *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 0xDuLL)
  {
    qmemcpy(v6, "\t.seh_pushreg ", 14);
    *((void *)v5 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.seh_pushreg ", 0xEuLL);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 296) + 40))(*(void *)(a1 + 296), *(void *)(a1 + 280), a2);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAD77C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::MCStreamer::EmitWinCFISetFrame((void *)a1, a2, a3, a4);
  long long v7 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v8 = (void *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 0xEuLL)
  {
    qmemcpy(v8, "\t.seh_setframe ", 15);
    *((void *)v7 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_setframe ", 0xFuLL);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 296) + 40))(*(void *)(a1 + 296), *(void *)(a1 + 280), a2);
  uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
  int64_t v10 = (_WORD *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 1uLL)
  {
    *int64_t v10 = 8236;
    *((void *)v9 + 4) += 2;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1CD098D14(v9, a3, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAD894(void *a1, unsigned int a2, uint64_t a3)
{
  llvm::MCStreamer::EmitWinCFIAllocStack(a1, a2, a3);
  BOOL v5 = (llvm::raw_ostream *)a1[35];
  uint64_t v6 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v6) > 0x10)
  {
    *(unsigned char *)(v6 + 16) = 32;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"\t.seh_stackalloc ";
    *((void *)v5 + 4) += 17;
  }
  else
  {
    BOOL v5 = llvm::raw_ostream::write(v5, "\t.seh_stackalloc ", 0x11uLL);
  }
  sub_1CD098D14(v5, a2, 0, 0, 0);

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBAD930(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::MCStreamer::EmitWinCFISaveReg((void *)a1, a2, a3, a4);
  long long v7 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v8 = (void *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 0xDuLL)
  {
    qmemcpy(v8, "\t.seh_savereg ", 14);
    *((void *)v7 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_savereg ", 0xEuLL);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 296) + 40))(*(void *)(a1 + 296), *(void *)(a1 + 280), a2);
  uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
  int64_t v10 = (_WORD *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 1uLL)
  {
    *int64_t v10 = 8236;
    *((void *)v9 + 4) += 2;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1CD098D14(v9, a3, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBADA48(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::MCStreamer::EmitWinCFISaveXMM((void *)a1, a2, a3, a4);
  long long v7 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v8 = (void *)*((void *)v7 + 4);
  if (*((void *)v7 + 3) - (void)v8 > 0xDuLL)
  {
    qmemcpy(v8, "\t.seh_savexmm ", 14);
    *((void *)v7 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_savexmm ", 0xEuLL);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 296) + 40))(*(void *)(a1 + 296), *(void *)(a1 + 280), a2);
  uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
  int64_t v10 = (_WORD *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 1uLL)
  {
    *int64_t v10 = 8236;
    *((void *)v9 + 4) += 2;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1CD098D14(v9, a3, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBADB60(void *a1, int a2, uint64_t a3)
{
  llvm::MCStreamer::EmitWinCFIPushFrame(a1, a2, a3);
  BOOL v5 = (llvm::raw_ostream *)a1[35];
  uint64_t v6 = (void *)*((void *)v5 + 4);
  if (*((void *)v5 + 3) - (void)v6 > 0xEuLL)
  {
    qmemcpy(v6, "\t.seh_pushframe", 15);
    *((void *)v5 + 4) += 15;
    if (!a2) {
      goto LABEL_5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.seh_pushframe", 0xFuLL);
    if (!a2) {
      goto LABEL_5;
    }
  }
  long long v7 = (llvm::raw_ostream *)a1[35];
  uint64_t v8 = *((void *)v7 + 4);
  if ((unint64_t)(*((void *)v7 + 3) - v8) > 5)
  {
    *(_WORD *)(v8 + 4) = 25956;
    *(_DWORD *)uint64_t v8 = 1868775456;
    *((void *)v7 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v7, " @code", 6uLL);
  }
LABEL_5:

  return sub_1CCBB0264((uint64_t)a1);
}

llvm::raw_ostream *sub_1CCBADC38(uint64_t a1, uint64_t a2)
{
  llvm::MCStreamer::EmitWinCFIEndProlog(a1, a2);
  uint64_t v3 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v4 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 101;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"\t.seh_endprologue";
    *((void *)v3 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endprologue", 0x11uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBADCBC(uint64_t a1, llvm::MCSymbol *a2, int a3, int a4, uint64_t a5)
{
  llvm::MCStreamer::EmitWinEHHandler(a1, (uint64_t)a2, a3, a4, a5);
  uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
  int64_t v10 = (void *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 0xDuLL)
  {
    qmemcpy(v10, "\t.seh_handler ", 14);
    *((void *)v9 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\t.seh_handler ", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (a3)
  {
    unint64_t v11 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v12 = *((void *)v11 + 4);
    if ((unint64_t)(*((void *)v11 + 3) - v12) > 8)
    {
      *(unsigned char *)(v12 + 8) = 100;
      *(void *)uint64_t v12 = *(void *)", @unwind";
      *((void *)v11 + 4) += 9;
      if (!a4) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    llvm::raw_ostream::write(v11, ", @unwind", 9uLL);
  }
  if (!a4) {
    goto LABEL_9;
  }
LABEL_7:
  size_t v13 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v14 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v14) > 8)
  {
    *(unsigned char *)(v14 + 8) = 116;
    *(void *)uint64_t v14 = *(void *)", @except";
    *((void *)v13 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v13, ", @except", 9uLL);
  }
LABEL_9:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBADE04(uint64_t a1, uint64_t a2)
{
  uint64_t result = (llvm::raw_ostream *)llvm::MCStreamer::EmitWinEHHandlerData(a1, a2);
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    unint64_t AssociatedFragment = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(v5 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v5 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v5 + 24));
      *(void *)uint64_t v5 = *(void *)v5 & 7 | AssociatedFragment;
    }
    long long v7 = sub_1CCBD37A0(*(llvm::MCContext **)(a1 + 8), (_DWORD *)(a1 + 264), *(llvm::MCSectionCOFF **)(*(void *)(*(void *)(a1 + 8) + 168) + 680), *(void *)(AssociatedFragment + 16));
    uint64_t v8 = *(void *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120);
    uint64_t v9 = *(llvm::MCSectionCOFF **)(v8 - 32);
    uint64_t v10 = *(void *)(v8 - 24);
    *(void *)(v8 - 16) = v9;
    *(void *)(v8 - 8) = v10;
    if (v9 != v7 || v10 != 0)
    {
      *(void *)(v8 - 32) = v7;
      *(void *)(v8 - 24) = 0;
    }
    uint64_t v12 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v13 = *((void *)v12 + 4);
    if ((unint64_t)(*((void *)v12 + 3) - v13) > 0x10)
    {
      *(unsigned char *)(v13 + 16) = 97;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)"\t.seh_handlerdata";
      *((void *)v12 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v12, "\t.seh_handlerdata", 0x11uLL);
    }
    return sub_1CCBB0264(a1);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBADF1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v9 = (void *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 > 0xCuLL)
  {
    qmemcpy(v9, "\t.cg_profile ", 13);
    *((void *)v8 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.cg_profile ", 0xDuLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a2 + 16), *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v10 = *(llvm::raw_ostream **)(a1 + 280);
  unint64_t v11 = (_WORD *)*((void *)v10 + 4);
  if (*((void *)v10 + 3) - (void)v11 > 1uLL)
  {
    *unint64_t v11 = 8236;
    *((void *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a3 + 16), *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  uint64_t v12 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v13 = (_WORD *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 1uLL)
  {
    _WORD *v13 = 8236;
    *((void *)v12 + 4) += 2;
  }
  else
  {
    uint64_t v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAE054(llvm::raw_ostream *result)
{
  if (*(_DWORD *)(*((void *)result + 36) + 176) == 1)
  {
    uint64_t v1 = (uint64_t)result;
    unint64_t v2 = (llvm::raw_ostream *)*((void *)result + 35);
    uint64_t v3 = (void *)*((void *)v2 + 4);
    if (*((void *)v2 + 3) - (void)v3 > 0x16uLL)
    {
      qmemcpy(v3, "\t.intel_syntax noprefix", 23);
      *((void *)v2 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v2, "\t.intel_syntax noprefix", 0x17uLL);
    }
    return sub_1CCBB0264(v1);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBAE0F0@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, llvm::raw_ostream *a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v12 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v13 = (void *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 7uLL)
  {
    void *v13 = 0x20636F6C65722E09;
    *((void *)v12 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v12, "\t.reloc ", 8uLL);
  }
  llvm::MCExpr::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);
  uint64_t v14 = *(llvm::raw_ostream **)(a1 + 280);
  unsigned int v15 = (_WORD *)*((void *)v14 + 4);
  if (*((void *)v14 + 3) - (void)v15 > 1uLL)
  {
    *unsigned int v15 = 8236;
    uint64_t v16 = (void *)(*((void *)v14 + 4) + 2);
    *((void *)v14 + 4) = v16;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), ", ", 2uLL);
    uint64_t v16 = (void *)*((void *)v14 + 4);
  }
  if (a4 <= *((void *)v14 + 3) - (void)v16)
  {
    if (a4)
    {
      memcpy(v16, a3, a4);
      *((void *)v14 + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(v14, (const char *)a3, a4);
  }
  if (a5)
  {
    uint64_t v17 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v18 = (_WORD *)*((void *)v17 + 4);
    if (*((void *)v17 + 3) - (void)v18 > 1uLL)
    {
      _WORD *v18 = 8236;
      *((void *)v17 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v17, ", ", 2uLL);
    }
    llvm::MCExpr::print(a5, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288), 0);
  }
  uint64_t result = sub_1CCBB0264(a1);
  *a6 = 0;
  a6[32] = 0;
  return result;
}

llvm::raw_ostream *sub_1CCBAE270(uint64_t a1)
{
  unint64_t v2 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v3 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v3) > 8)
  {
    *(unsigned char *)(v3 + 8) = 103;
    *(void *)uint64_t v3 = *(void *)"\t.addrsig";
    *((void *)v2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.addrsig", 9uLL);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAE2F0(uint64_t a1, llvm::MCSymbol *a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.addrsig_sym ", 14);
    *((void *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.addrsig_sym ", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAE380(llvm::MCDwarfLineEntry *this, unsigned int *a2, llvm::MCSection *a3)
{
  uint64_t v3 = a3;
  v92[32] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*((void *)this + 36) + 426))
  {
    uint64_t v6 = *((unsigned int *)this + 30);
    if (v6) {
      long long v7 = *(llvm::MCStreamer **)(*((void *)this + 14) + 32 * v6 - 32);
    }
    else {
      long long v7 = 0;
    }
    llvm::MCDwarfLineEntry::make(this, v7, a3);
  }
  if (*((unsigned char *)this + 752)) {
    uint64_t v8 = (uint64_t *)((char *)this + 616);
  }
  else {
    uint64_t v8 = llvm::nulls(this);
  }
  uint64_t v90 = v92;
  long long v91 = xmmword_1CD96DBF0;
  char v87 = v89;
  uint64_t v88 = 0x400000000;
  int v76 = 0;
  char v80 = 0;
  uint64_t v81 = 0;
  int v83 = &v90;
  int v82 = 0;
  int64_t v75 = &unk_1F2646FA8;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v9 = *(void *)(*((void *)this + 38) + 16);
  if (v9)
  {
    (*(void (**)(uint64_t, unsigned int *, void **, void **, llvm::MCSection *))(*(void *)v9 + 32))(v9, a2, &v75, &v87, v3);
    char v84 = v86;
    long long v85 = xmmword_1CD96DBD0;
    int v10 = v91;
    size_t v11 = 8 * v91;
    if (8 * (void)v91)
    {
      if (v11 >= 0x41) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v11) {
        bzero(v84, v11);
      }
      *(void *)&long long v85 = v11;
      int v10 = v91;
    }
    uint64_t v12 = (8 * v10);
    if (v12)
    {
      for (uint64_t i = 0; i != v12; ++i)
        *((unsigned char *)v84 + i) = 0;
    }
    uint64_t v14 = v88;
    if (v88)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = v87;
        uint64_t v17 = (*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 38) + 8) + 80))(*(void *)(*((void *)this + 38) + 8), *((unsigned int *)v87 + 6 * v15 + 3));
        if (*(_DWORD *)(v17 + 12))
        {
          int v18 = 0;
          do
          {
            *((unsigned char *)v84 + (v18 + *(_DWORD *)(v17 + 8) + 8 * v16[6 * v15 + 2])) = v15 + 1;
            ++v18;
          }
          while (v18 != *(_DWORD *)(v17 + 12));
        }
        ++v15;
      }
      while (v15 != v14);
    }
    uint64_t v19 = v8[4];
    size_t v70 = a2;
    char v71 = v3;
    if ((unint64_t)(v8[3] - v19) > 0xA)
    {
      *(_DWORD *)(v19 + 7) = 1528838759;
      *(void *)uint64_t v19 = *(void *)"encoding: [";
      v8[4] += 11;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v8, "encoding: [", 0xBuLL);
    }
    uint64_t v20 = v91;
    if (v91)
    {
      unsigned int v21 = 0;
      uint64_t v22 = 0;
      do
      {
        if (v22)
        {
          long long v23 = (unsigned char *)v8[4];
          if ((unint64_t)v23 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, 44);
          }
          else
          {
            v8[4] = (uint64_t)(v23 + 1);
            *long long v23 = 44;
          }
        }
        int v24 = *((unsigned __int8 *)v84 + (8 * v22));
        for (uint64_t j = 1; j != 8; ++j)
        {
          if (*((unsigned __int8 *)v84 + v21 + j) != v24) {
            goto LABEL_38;
          }
        }
        if (v24 == 255)
        {
LABEL_38:
          uint64_t v27 = (_WORD *)v8[4];
          if ((unint64_t)(v8[3] - (void)v27) > 1)
          {
            *uint64_t v27 = 25136;
            v8[4] += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, "0b", 2uLL);
          }
          int v28 = 7;
          unsigned int v29 = v21;
          do
          {
            if (*(unsigned char *)(*((void *)this + 36) + 16)) {
              unsigned int v30 = v21 + v28;
            }
            else {
              unsigned int v30 = v29;
            }
            int v31 = *((unsigned __int8 *)v84 + v30);
            if (v31)
            {
              char v32 = v31 + 64;
              long long v33 = (char *)v8[4];
              if ((unint64_t)v33 >= v8[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v8, v32);
              }
              else
              {
                v8[4] = (uint64_t)(v33 + 1);
                *long long v33 = v32;
              }
            }
            else
            {
              sub_1CD098D14((llvm::raw_ostream *)v8, (*((char *)v90 + v22) >> v28) & 1, 0, 0, 0);
            }
            --v28;
            ++v29;
          }
          while (v28 != -1);
          goto LABEL_50;
        }
        if (!*((unsigned char *)v84 + (8 * v22)))
        {
          uint64_t v26 = *((unsigned __int8 *)v90 + v22);
          std::string::size_type v72 = &unk_1F260ED30;
          int v73 = "0x%02x";
          uint64_t v74 = v26;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v8, (uint64_t)&v72);
          goto LABEL_50;
        }
        uint64_t v34 = *((unsigned __int8 *)v90 + v22);
        if (*((unsigned char *)v90 + v22))
        {
          std::string::size_type v72 = &unk_1F260ED30;
          int v73 = "0x%02x";
          uint64_t v74 = v34;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v8, (uint64_t)&v72);
          long long v35 = (unsigned char *)v8[4];
          if ((unint64_t)v35 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, 39);
          }
          else
          {
            v8[4] = (uint64_t)(v35 + 1);
            unsigned char *v35 = 39;
          }
          long long v37 = (unsigned char *)v8[4];
          if ((unint64_t)v37 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, v24 + 64);
          }
          else
          {
            v8[4] = (uint64_t)(v37 + 1);
            unsigned char *v37 = v24 + 64;
          }
          char v38 = (unsigned char *)v8[4];
          if ((unint64_t)v38 < v8[3])
          {
            v8[4] = (uint64_t)(v38 + 1);
            *char v38 = 39;
            goto LABEL_50;
          }
          uint64_t v39 = (llvm::raw_ostream *)v8;
          char v40 = 39;
        }
        else
        {
          uint64_t v36 = (unsigned char *)v8[4];
          if ((unint64_t)v36 < v8[3])
          {
            v8[4] = (uint64_t)(v36 + 1);
            *uint64_t v36 = v24 + 64;
            goto LABEL_50;
          }
          char v40 = v24 + 64;
          uint64_t v39 = (llvm::raw_ostream *)v8;
        }
        llvm::raw_ostream::write(v39, v40);
LABEL_50:
        ++v22;
        v21 += 8;
      }
      while (v22 != v20);
    }
    uint64_t v41 = (_WORD *)v8[4];
    if ((unint64_t)(v8[3] - (void)v41) > 1)
    {
      _WORD *v41 = 2653;
      v8[4] += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v8, "]\n", 2uLL);
    }
    uint64_t v42 = v88;
    if (v88)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      do
      {
        int v45 = (char *)v87;
        uint64_t v46 = (const char **)(*(uint64_t (**)(void, void))(**(void **)(*((void *)this + 38) + 8)
                                                                       + 80))(*(void *)(*((void *)this + 38) + 8), *(unsigned int *)((char *)v87 + v43 + 12));
        char v47 = (void *)v8[4];
        if ((unint64_t)(v8[3] - (void)v47) > 7)
        {
          void *v47 = 0x2070757869662020;
          int v48 = (char *)(v8[4] + 8);
          v8[4] = (uint64_t)v48;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "  fixup ", 8uLL);
          int v48 = (char *)v8[4];
        }
        char v49 = v44 + 65;
        if ((unint64_t)v48 >= v8[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, v49);
        }
        else
        {
          v8[4] = (uint64_t)(v48 + 1);
          *int v48 = v49;
        }
        uint64_t v50 = v8[4];
        if ((unint64_t)(v8[3] - v50) > 2)
        {
          *(unsigned char *)(v50 + 2) = 32;
          *(_WORD *)uint64_t v50 = 11552;
          uint64_t v51 = (void *)(v8[4] + 3);
          v8[4] = (uint64_t)v51;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, " - ", 3uLL);
          uint64_t v51 = (void *)v8[4];
        }
        if ((unint64_t)(v8[3] - (void)v51) > 7)
        {
          *uint64_t v51 = 0x203A74657366666FLL;
          v8[4] += 8;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "offset: ", 8uLL);
        }
        sub_1CD098D14((llvm::raw_ostream *)v8, *(unsigned int *)&v45[v43 + 8], 0, 0, 0);
        uint64_t v52 = v8[4];
        if ((unint64_t)(v8[3] - v52) > 8)
        {
          *(unsigned char *)(v52 + 8) = 32;
          *(void *)uint64_t v52 = *(void *)", value: ";
          v8[4] += 9;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, ", value: ", 9uLL);
        }
        llvm::MCExpr::print(*(llvm::raw_ostream **)&v45[v43], (llvm::raw_ostream *)v8, *((const llvm::MCAsmInfo **)this + 36), 0);
        char v53 = (void *)v8[4];
        if ((unint64_t)(v8[3] - (void)v53) > 7)
        {
          *char v53 = 0x203A646E696B202CLL;
          uint64_t v54 = (unsigned char *)(v8[4] + 8);
          v8[4] = (uint64_t)v54;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, ", kind: ", 8uLL);
          uint64_t v54 = (unsigned char *)v8[4];
        }
        size_t v55 = *v46;
        if (v55)
        {
          size_t v56 = strlen(v55);
          size_t v57 = v56;
          if (v56 <= v8[3] - (uint64_t)v54)
          {
            if (v56)
            {
              memcpy(v54, v55, v56);
              uint64_t v54 = (unsigned char *)(v8[4] + v57);
              v8[4] = (uint64_t)v54;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, v55, v56);
            uint64_t v54 = (unsigned char *)v8[4];
          }
        }
        if ((unsigned char *)v8[3] == v54)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "\n", 1uLL);
        }
        else
        {
          unsigned char *v54 = 10;
          ++v8[4];
        }
        ++v44;
        v43 += 24;
      }
      while (v42 != v44);
    }
    if (v84 != v86) {
      free(v84);
    }
    int64_t v75 = &unk_1F2646B98;
    a2 = v70;
    uint64_t v3 = v71;
    if (v82 == 1 && v77) {
      MEMORY[0x1D25D9CB0](v77, 0x1000C8077774924);
    }
  }
  if (v87 != v89) {
    free(v87);
  }
  char v58 = (llvm *)v90;
  if (v90 != v92) {
    free(v90);
  }
  if ((*((unsigned char *)this + 752) & 2) != 0)
  {
    if (*((unsigned char *)this + 752)) {
      uint64_t v66 = (uint64_t *)((char *)this + 616);
    }
    else {
      uint64_t v66 = llvm::nulls(v58);
    }
    uint64_t v67 = llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v66, *((llvm::MCInstPrinter **)this + 37), "\n ", 2uLL, 0);
    if (*((unsigned char *)this + 752)) {
      uint64_t v68 = (uint64_t *)((char *)this + 616);
    }
    else {
      uint64_t v68 = llvm::nulls(v67);
    }
    uint64_t v69 = (unsigned char *)v68[4];
    if ((unsigned char *)v68[3] == v69)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v68, "\n", 1uLL);
    }
    else
    {
      *uint64_t v69 = 10;
      ++v68[4];
    }
  }
  uint64_t v59 = *((void *)this + 2);
  uint64_t v60 = *((void *)this + 37);
  if (v59) {
    char v61 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, unsigned int *, llvm::MCSection *, void))(*(void *)v59 + 32))(v59, v60, 0, a2, v3, *((void *)this + 35));
  }
  else {
    char v61 = (llvm *)(*(uint64_t (**)(void, unsigned int *, void, const char *, void, llvm::MCSection *, void))(*(void *)v60 + 32))(*((void *)this + 37), a2, 0, "", 0, v3, *((void *)this + 35));
  }
  uint64_t v62 = *((void *)this + 59);
  if (v62 && *(unsigned char *)(v62 + *((void *)this + 58) - 1) != 10)
  {
    if (*((unsigned char *)this + 752)) {
      uint64_t v63 = (uint64_t *)((char *)this + 616);
    }
    else {
      uint64_t v63 = llvm::nulls(v61);
    }
    char v64 = (unsigned char *)v63[4];
    if ((unsigned char *)v63[3] == v64)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v63, "\n", 1uLL);
    }
    else
    {
      *char v64 = 10;
      ++v63[4];
    }
  }
  return sub_1CCBB0264((uint64_t)this);
}

llvm::raw_ostream *sub_1CCBAEE00(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v13 = (void *)*((void *)v12 + 4);
  if (*((void *)v12 + 3) - (void)v13 > 0xDuLL)
  {
    qmemcpy(v13, "\t.pseudoprobe\t", 14);
    *((void *)v12 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.pseudoprobe\t", 0xEuLL);
  }
  sub_1CD098D14(v12, a2, 0, 0, 0);
  uint64_t v14 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v14)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *uint64_t v14 = 32;
    ++*((void *)v12 + 4);
  }
  sub_1CD098D14(v12, a3, 0, 0, 0);
  uint64_t v15 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v15)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *uint64_t v15 = 32;
    ++*((void *)v12 + 4);
  }
  sub_1CD098D14(v12, a4, 0, 0, 0);
  uint64_t v16 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v16)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *uint64_t v16 = 32;
    ++*((void *)v12 + 4);
  }
  sub_1CD098D14(v12, a5, 0, 0, 0);
  uint64_t v17 = *((unsigned int *)a6 + 2);
  if (v17)
  {
    uint64_t v18 = *a6;
    uint64_t v19 = *a6 + 16 * v17;
    do
    {
      uint64_t v20 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v21 = *((void *)v20 + 4);
      if ((unint64_t)(*((void *)v20 + 3) - v21) > 2)
      {
        *(unsigned char *)(v21 + 2) = 32;
        *(_WORD *)uint64_t v21 = 16416;
        *((void *)v20 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), " @ ", 3uLL);
      }
      sub_1CD098D14(v20, *(void *)v18, 0, 0, 0);
      uint64_t v22 = (unsigned char *)*((void *)v20 + 4);
      if (*((unsigned char **)v20 + 3) == v22)
      {
        llvm::raw_ostream::write(v20, ":", 1uLL);
      }
      else
      {
        *uint64_t v22 = 58;
        ++*((void *)v20 + 4);
      }
      sub_1CD098D14(v20, *(unsigned int *)(v18 + 8), 0, 0, 0);
      v18 += 16;
    }
    while (v18 != v19);
  }

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAF098(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 0x13)
  {
    *(_DWORD *)(v5 + 16) = 543515759;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)"\t.bundle_align_mode ";
    *((void *)v4 + 4) += 20;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, "\t.bundle_align_mode ", 0x14uLL);
  }
  sub_1CD098D14(v4, a2, 0, 0, 0);

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAF134(uint64_t a1, int a2)
{
  uint64_t v4 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v5 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.bundle_lock", 13);
    *((void *)v4 + 4) += 13;
    if (!a2) {
      goto LABEL_5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.bundle_lock", 0xDuLL);
    if (!a2) {
      goto LABEL_5;
    }
  }
  uint64_t v6 = *(llvm::raw_ostream **)(a1 + 280);
  long long v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xCuLL)
  {
    qmemcpy(v7, " align_to_end", 13);
    *((void *)v6 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v6, " align_to_end", 0xDuLL);
  }
LABEL_5:

  return sub_1CCBB0264(a1);
}

llvm::raw_ostream *sub_1CCBAF20C(uint64_t a1)
{
  unint64_t v2 = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0xEuLL)
  {
    qmemcpy(v3, "\t.bundle_unlock", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.bundle_unlock", 0xFuLL);
  }

  return sub_1CCBB0264(a1);
}

void sub_1CCBAF28C(llvm::MCGenDwarfInfo *this, llvm::MCStreamer *a2)
{
  if (*(unsigned char *)(*((void *)this + 1) + 1513)) {
    llvm::MCGenDwarfInfo::Emit(this, a2);
  }
  if (*(unsigned char *)(*((void *)this + 36) + 426))
  {
    uint64_t v3 = (void *)*((void *)this + 1);
    if (v3[186])
    {
      uint64_t v4 = *(llvm::MCSymbol **)(v3[184] + 40);
      if (v4)
      {
        uint64_t v5 = *(void *)(v3[21] + 88);
        uint64_t v6 = *((void *)this + 14) + 32 * *((unsigned int *)this + 30);
        uint64_t v7 = *(void *)(v6 - 32);
        uint64_t v8 = *(void *)(v6 - 24);
        *(void *)(v6 - 16) = v7;
        *(void *)(v6 - 8) = v8;
        if (v7 != v5 || v8 != 0)
        {
          (*(void (**)(llvm::MCGenDwarfInfo *, uint64_t, void))(*(void *)this + 160))(this, v5, 0);
          uint64_t v10 = *((void *)this + 14) + 32 * *((unsigned int *)this + 30);
          *(void *)(v10 - 32) = v5;
          *(void *)(v10 - 24) = 0;
          uint64_t v11 = *(void *)(v5 + 8);
          if (v11)
          {
            unint64_t AssociatedFragment = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
            if (!AssociatedFragment && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v11 + 8) |= 4u;
              uint64_t v16 = (void *)v11;
              unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
              uint64_t v11 = (uint64_t)v16;
              *uint64_t v16 = *v16 & 7 | AssociatedFragment;
            }
            if (!AssociatedFragment || (_UNKNOWN *)sub_1CC34BE58(v11, 1) == llvm::MCSymbol::AbsolutePseudoFragment) {
              (*(void (**)(llvm::MCGenDwarfInfo *))(*(void *)this + 192))(this);
            }
          }
        }
        sub_1CCBA4E14((uint64_t)this, v4, 0);
      }
    }
    uint64_t v12 = (llvm::raw_ostream *)*((void *)this + 35);
    uint64_t v13 = (const char *)*((void *)v12 + 2);
    if (*((const char **)v12 + 4) != v13)
    {
      *((void *)v12 + 4) = v13;
      llvm::raw_ostream::flush_tied_then_write(v12, v13);
    }
  }
  else
  {
    int v14 = *(unsigned __int16 *)(*((void *)this + 38) + 200) | (*(unsigned __int8 *)(*((void *)this + 38) + 202) << 16);
    llvm::MCDwarfLineTable::emit(this, v14);
  }
}

void *sub_1CCBAF480(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1[36] + 427)) {
    return (void *)llvm::MCStreamer::emitDwarfUnitLength(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1CCBAF494(llvm::MCStreamer *a1, uint64_t *a2, const llvm::Twine *a3)
{
  if (!*(unsigned char *)(*((void *)a1 + 36) + 427))
  {
    uint64_t v4 = (llvm::MCContext *)*((void *)a1 + 1);
    int v5 = *((unsigned __int8 *)a2 + 32);
    if (v5 == 1)
    {
      v9[0] = "_end";
      __int16 v6 = 259;
    }
    else
    {
      if (*((unsigned char *)a2 + 32))
      {
        uint64_t v7 = a2[1];
        if (*((unsigned char *)a2 + 33) == 1)
        {
          uint64_t v8 = (uint64_t *)*a2;
        }
        else
        {
          LOBYTE(v5) = 2;
          uint64_t v8 = a2;
        }
        v9[0] = v8;
        v9[1] = v7;
        v9[2] = "_end";
        LOBYTE(v10) = v5;
        HIBYTE(v10) = 3;
        return llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)v9, 1);
      }
      __int16 v6 = 256;
    }
    __int16 v10 = v6;
    return llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)v9, 1);
  }

  return llvm::MCStreamer::emitDwarfUnitLength(a1, (const llvm::Twine *)a2, a3);
}

uint64_t sub_1CCBAF54C(llvm::raw_ostream **a1, llvm::MCSymbol *a2)
{
  if (*((unsigned char *)a1[36] + 427))
  {
    uint64_t v4 = (uint64_t (*)(void))*((void *)*a1 + 24);
    return v4();
  }
  else
  {
    __int16 v6 = a1[1];
    uint64_t v25 = "debug_line_";
    __int16 v26 = 259;
    uint64_t TempSymbol = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v25, 1);
    sub_1CCBA4E14((uint64_t)a1, TempSymbol, 0);
    if (*((unsigned char *)v6 + 1626)) {
      uint64_t v8 = 12;
    }
    else {
      uint64_t v8 = 4;
    }
    *((void *)v6 + 34) += 24;
    uint64_t v9 = *((void *)v6 + 24);
    if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 24 > *((void *)v6 + 25) - v9)
    {
      unsigned int v16 = *((_DWORD *)v6 + 54) >> 7;
      if (v16 >= 0x1E) {
        LOBYTE(v16) = 30;
      }
      uint64_t v17 = 4096 << v16;
      unint64_t v10 = (unint64_t)operator new(4096 << v16, (std::align_val_t)8uLL);
      unsigned int v18 = *((_DWORD *)v6 + 54);
      if (v18 >= *((_DWORD *)v6 + 55)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)v6 + 26) + 8 * v18) = v10;
      ++*((_DWORD *)v6 + 54);
      *((void *)v6 + 25) = v10 + v17;
    }
    else
    {
      unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v6 + 24) = v10 + 24;
    *(unsigned char *)unint64_t v10 = 1;
    *(_DWORD *)(v10 + 1) = *(unsigned __int8 *)(v10 + 4) << 24;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = v8;
    *((void *)v6 + 34) += 24;
    uint64_t v11 = *((void *)v6 + 24);
    if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 24 > *((void *)v6 + 25) - v11)
    {
      unsigned int v19 = *((_DWORD *)v6 + 54) >> 7;
      if (v19 >= 0x1E) {
        LOBYTE(v19) = 30;
      }
      uint64_t v20 = 4096 << v19;
      unint64_t v12 = (unint64_t)operator new(4096 << v19, (std::align_val_t)8uLL);
      unsigned int v21 = *((_DWORD *)v6 + 54);
      if (v21 >= *((_DWORD *)v6 + 55)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)v6 + 26) + 8 * v21) = v12;
      ++*((_DWORD *)v6 + 54);
      *((void *)v6 + 25) = v12 + v20;
    }
    else
    {
      unint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v6 + 24) = v12 + 24;
    int v13 = *(unsigned __int8 *)(*((void *)v6 + 19) + 18) << 16;
    *(unsigned char *)unint64_t v12 = 2;
    *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = TempSymbol;
    *((void *)v6 + 34) += 32;
    uint64_t v14 = *((void *)v6 + 24);
    if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 32 > *((void *)v6 + 25) - v14)
    {
      unsigned int v22 = *((_DWORD *)v6 + 54) >> 7;
      if (v22 >= 0x1E) {
        LOBYTE(v22) = 30;
      }
      uint64_t v23 = 4096 << v22;
      unint64_t v15 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
      unsigned int v24 = *((_DWORD *)v6 + 54);
      if (v24 >= *((_DWORD *)v6 + 55)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)v6 + 26) + 8 * v24) = v15;
      ++*((_DWORD *)v6 + 54);
      *((void *)v6 + 25) = v15 + v23;
    }
    else
    {
      unint64_t v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v6 + 24) = v15 + 32;
    *(unsigned char *)unint64_t v15 = 0;
    *(_DWORD *)(v15 + 1) = (*(unsigned __int8 *)(v15 + 4) << 24) | 0x12;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = v12;
    *(void *)(v15 + 24) = v10;
    return sub_1CCBA5B14(a1, a2, (llvm::raw_ostream *)v15);
  }
}

void sub_1CCBAF8B0(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (llvm::MCContext *)*((void *)a1 + 1);
  Enduint64_t Symbol = (const llvm::MCSymbol *)llvm::MCSection::getEndSymbol(*(llvm::MCSection **)(*((void *)v5 + 21) + 24), v5);
  uint64_t v7 = *(unsigned int *)(*((void *)v5 + 19) + 8);

  sub_1CCBAF918(a1, 0x7FFFFFFFFFFFFFFFLL, a3, EndSymbol, v7);
}

void sub_1CCBAF918(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, const llvm::MCSymbol *a4, uint64_t a5)
{
  uint64_t v55 = a2;
  if ((*(unsigned char *)a4 & 4) != 0)
  {
    unint64_t v12 = (uint64_t *)*((void *)a4 - 1);
    uint64_t v13 = *v12;
    unint64_t v10 = v12 + 2;
    uint64_t v11 = v13;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  __int16 v54 = 1283;
  v51[0] = "Set address to ";
  uint64_t v52 = v10;
  uint64_t v53 = v11;
  sub_1CCBA4218(a1, (uint64_t)v51, 1);
  uint64_t v14 = *((void *)a1 + 1);
  *(void *)(v14 + 272) += 24;
  uint64_t v15 = *(void *)(v14 + 192);
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 24 > *(void *)(v14 + 200) - v15)
  {
    unsigned int v33 = *(_DWORD *)(v14 + 216) >> 7;
    if (v33 >= 0x1E) {
      LOBYTE(v33) = 30;
    }
    uint64_t v34 = 4096 << v33;
    unint64_t v16 = (unint64_t)operator new(4096 << v33, (std::align_val_t)8uLL);
    unsigned int v35 = *(_DWORD *)(v14 + 216);
    if (v35 >= *(_DWORD *)(v14 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v14 + 208) + 8 * v35) = v16;
    ++*(_DWORD *)(v14 + 216);
    *(void *)(v14 + 200) = v16 + v34;
  }
  else
  {
    unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v14 + 192) = v16 + 24;
  *(unsigned char *)unint64_t v16 = 1;
  *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0;
  (*(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, v16, 1, 0);
  llvm::MCStreamer::emitULEB128IntValue(a1, (a5 + 1), 0);
  uint64_t v17 = *((void *)a1 + 1);
  *(void *)(v17 + 272) += 24;
  uint64_t v18 = *(void *)(v17 + 192);
  if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 24 > *(void *)(v17 + 200) - v18)
  {
    unsigned int v36 = *(_DWORD *)(v17 + 216) >> 7;
    if (v36 >= 0x1E) {
      LOBYTE(v36) = 30;
    }
    uint64_t v37 = 4096 << v36;
    unint64_t v19 = (unint64_t)operator new(4096 << v36, (std::align_val_t)8uLL);
    unsigned int v38 = *(_DWORD *)(v17 + 216);
    if (v38 >= *(_DWORD *)(v17 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v17 + 208) + 8 * v38) = v19;
    ++*(_DWORD *)(v17 + 216);
    *(void *)(v17 + 200) = v19 + v37;
  }
  else
  {
    unint64_t v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v17 + 192) = v19 + 24;
  *(unsigned char *)unint64_t v19 = 1;
  *(_DWORD *)(v19 + 1) = *(unsigned __int8 *)(v19 + 4) << 24;
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = 2;
  (*(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, v19, 1, 0);
  llvm::MCStreamer::emitSymbolValue(a1, a4, a5, 0);
  if (a3)
  {
    if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v51[0] = "End sequence";
      __int16 v54 = 259;
      sub_1CCBA4218(a1, (uint64_t)v51, 1);
      uint64_t v20 = *((void *)a1 + 1);
      *(void *)(v20 + 272) += 24;
      uint64_t v21 = *(void *)(v20 + 192);
      if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v21 + 24 > *(void *)(v20 + 200) - v21)
      {
        unsigned int v39 = *(_DWORD *)(v20 + 216) >> 7;
        if (v39 >= 0x1E) {
          LOBYTE(v39) = 30;
        }
        uint64_t v40 = 4096 << v39;
        unint64_t v22 = (unint64_t)operator new(4096 << v39, (std::align_val_t)8uLL);
        unsigned int v41 = *(_DWORD *)(v20 + 216);
        if (v41 >= *(_DWORD *)(v20 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v20 + 208) + 8 * v41) = v22;
        ++*(_DWORD *)(v20 + 216);
        *(void *)(v20 + 200) = v22 + v40;
      }
      else
      {
        unint64_t v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v20 + 192) = v22 + 24;
      *(unsigned char *)unint64_t v22 = 1;
      *(_DWORD *)(v22 + 1) = *(unsigned __int8 *)(v22 + 4) << 24;
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0;
      (*(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, v22, 1, 0);
      llvm::MCStreamer::emitULEB128IntValue(a1, 1uLL, 0);
      uint64_t v23 = *((void *)a1 + 1);
      *(void *)(v23 + 272) += 24;
      uint64_t v24 = *(void *)(v23 + 192);
      if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 24 > *(void *)(v23 + 200) - v24)
      {
        unsigned int v42 = *(_DWORD *)(v23 + 216) >> 7;
        if (v42 >= 0x1E) {
          LOBYTE(v42) = 30;
        }
        uint64_t v43 = 4096 << v42;
        unint64_t v25 = (unint64_t)operator new(4096 << v42, (std::align_val_t)8uLL);
        unsigned int v44 = *(_DWORD *)(v23 + 216);
        if (v44 >= *(_DWORD *)(v23 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v23 + 208) + 8 * v44) = v25;
        ++*(_DWORD *)(v23 + 216);
        *(void *)(v23 + 200) = v25 + v43;
      }
      else
      {
        unint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v23 + 192) = v25 + 24;
      *(unsigned char *)unint64_t v25 = 1;
      *(_DWORD *)(v25 + 1) = *(unsigned __int8 *)(v25 + 4) << 24;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 1;
      __int16 v26 = *(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512);
      v26(a1, v25, 1, 0);
    }
    else
    {
      v51[0] = "Advance line ";
      uint64_t v52 = &v55;
      __int16 v54 = 3331;
      sub_1CCBA4218(a1, (uint64_t)v51, 1);
      uint64_t v27 = *((void *)a1 + 1);
      *(void *)(v27 + 272) += 24;
      uint64_t v28 = *(void *)(v27 + 192);
      if (((v28 + 7) & 0xFFFFFFFFFFFFFFF8) - v28 + 24 > *(void *)(v27 + 200) - v28)
      {
        unsigned int v45 = *(_DWORD *)(v27 + 216) >> 7;
        if (v45 >= 0x1E) {
          LOBYTE(v45) = 30;
        }
        uint64_t v46 = 4096 << v45;
        unint64_t v29 = (unint64_t)operator new(4096 << v45, (std::align_val_t)8uLL);
        unsigned int v47 = *(_DWORD *)(v27 + 216);
        if (v47 >= *(_DWORD *)(v27 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v27 + 208) + 8 * v47) = v29;
        ++*(_DWORD *)(v27 + 216);
        *(void *)(v27 + 200) = v29 + v46;
      }
      else
      {
        unint64_t v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v27 + 192) = v29 + 24;
      *(unsigned char *)unint64_t v29 = 1;
      *(_DWORD *)(v29 + 1) = *(unsigned __int8 *)(v29 + 4) << 24;
      *(void *)(v29 + 8) = 0;
      *(void *)(v29 + 16) = 3;
      (*(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, v29, 1, 0);
      llvm::MCStreamer::emitSLEB128IntValue(a1, v55);
      uint64_t v30 = *((void *)a1 + 1);
      *(void *)(v30 + 272) += 24;
      uint64_t v31 = *(void *)(v30 + 192);
      if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 24 > *(void *)(v30 + 200) - v31)
      {
        unsigned int v48 = *(_DWORD *)(v30 + 216) >> 7;
        if (v48 >= 0x1E) {
          LOBYTE(v48) = 30;
        }
        uint64_t v49 = 4096 << v48;
        unint64_t v32 = (unint64_t)operator new(4096 << v48, (std::align_val_t)8uLL);
        unsigned int v50 = *(_DWORD *)(v30 + 216);
        if (v50 >= *(_DWORD *)(v30 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v30 + 208) + 8 * v50) = v32;
        ++*(_DWORD *)(v30 + 216);
        *(void *)(v30 + 200) = v32 + v49;
      }
      else
      {
        unint64_t v32 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v30 + 192) = v32 + 24;
      *(unsigned char *)unint64_t v32 = 1;
      *(_DWORD *)(v32 + 1) = *(unsigned __int8 *)(v32 + 4) << 24;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 16) = 1;
      (*(void (**)(llvm::raw_ostream *, unint64_t, uint64_t, void))(*(void *)a1 + 512))(a1, v32, 1, 0);
    }
  }
  else
  {
    v51[0] = "Start sequence";
    __int16 v54 = 259;
    sub_1CCBA4218(a1, (uint64_t)v51, 1);
    llvm::MCDwarfLineAddr::Emit(a1, 981773, a2, 0);
  }
}

unint64_t sub_1CCBB0144(unint64_t result, llvm::MCSection *a2)
{
  if (!*(unsigned char *)(*(void *)(result + 288) + 426))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(result + 120);
    uint64_t v4 = *(void *)(result + 112) + 32 * v3;
    int v5 = *(llvm::MCSection **)(v4 - 32);
    uint64_t v6 = *(void *)(v4 - 24);
    *(void *)(v4 - 16) = v5;
    *(void *)(v4 - 8) = v6;
    if (v5 != a2 || v6 != 0)
    {
      *(void *)(v4 - 32) = a2;
      *(void *)(v4 - 24) = 0;
    }
    if (v3) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    Enduint64_t Symbol = llvm::MCSection::getEndSymbol(v8, *(llvm::MCContext **)(v2 + 8));
    uint64_t v10 = *(void *)EndSymbol;
    unint64_t AssociatedFragment = *(void *)EndSymbol & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment && (*(_DWORD *)(EndSymbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(EndSymbol + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(EndSymbol + 24));
      uint64_t v10 = *(void *)EndSymbol & 7 | AssociatedFragment;
      *(void *)Enduint64_t Symbol = v10;
    }
    if (!AssociatedFragment) {
      goto LABEL_15;
    }
    uint64_t result = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(EndSymbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(EndSymbol + 8) |= 4u;
      uint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(EndSymbol + 24));
      *(void *)Enduint64_t Symbol = *(void *)EndSymbol & 7 | result;
    }
    if ((_UNKNOWN *)result == llvm::MCSymbol::AbsolutePseudoFragment)
    {
LABEL_15:
      return (unint64_t)sub_1CCBA4E14(v2, (llvm::MCSymbol *)EndSymbol, 0);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBB0264(uint64_t a1)
{
  sub_1CCBA4CA4((void *)a1);
  if ((*(unsigned char *)(a1 + 752) & 1) != 0
    && ((size_t v4 = *(void *)(a1 + 472)) != 0 || *(void *)(a1 + 648) != *(void *)(a1 + 632)))
  {
    int v5 = *(unsigned char **)(a1 + 464);
    do
    {
      llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)(a1 + 280), 40);
      if (v4 && (uint64_t v6 = memchr(v5, 10, v4)) != 0) {
        unint64_t v7 = v6 - v5;
      }
      else {
        unint64_t v7 = -1;
      }
      uint64_t v9 = *(llvm::raw_ostream **)(a1 + 280);
      uint64_t v8 = *(void *)(a1 + 288);
      uint64_t v10 = *(const void **)(v8 + 48);
      size_t v11 = *(void *)(v8 + 56);
      unint64_t v12 = (unsigned char *)*((void *)v9 + 4);
      if (v11 <= *((void *)v9 + 3) - (void)v12)
      {
        if (v11)
        {
          memcpy(v12, v10, v11);
          unint64_t v12 = (unsigned char *)(*((void *)v9 + 4) + v11);
          *((void *)v9 + 4) = v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v10, v11);
        unint64_t v12 = (unsigned char *)*((void *)v9 + 4);
      }
      if ((unint64_t)v12 >= *((void *)v9 + 3))
      {
        llvm::raw_ostream::write(v9, 32);
      }
      else
      {
        *((void *)v9 + 4) = v12 + 1;
        unsigned char *v12 = 32;
      }
      if (v4 >= v7) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = v4;
      }
      uint64_t result = (llvm::raw_ostream *)*((void *)v9 + 4);
      if (v13 <= *((void *)v9 + 3) - (void)result)
      {
        if (v13)
        {
          memcpy(result, v5, v13);
          uint64_t result = (llvm::raw_ostream *)(*((void *)v9 + 4) + v13);
          *((void *)v9 + 4) = result;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, v5, v13);
        uint64_t result = (llvm::raw_ostream *)*((void *)v9 + 4);
      }
      if ((unint64_t)result >= *((void *)v9 + 3))
      {
        uint64_t result = llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((void *)v9 + 4) = (char *)result + 1;
        *(unsigned char *)uint64_t result = 10;
      }
      if (v4 >= v7 + 1) {
        size_t v14 = v7 + 1;
      }
      else {
        size_t v14 = v4;
      }
      v5 += v14;
      v4 -= v14;
    }
    while (v4);
    *(void *)(a1 + 472) = 0;
  }
  else
  {
    uint64_t result = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v3 = (unsigned char *)*((void *)result + 4);
    if ((unint64_t)v3 >= *((void *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((void *)result + 4) = v3 + 1;
      *uint64_t v3 = 10;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBB0448(llvm::raw_ostream *this, void *a2)
{
  if (*a2 & 0x7FFFFFFFFFFFFFFFLL | a2[1] & 0x7FFFFFFF7FFFFFFFLL)
  {
    uint64_t v3 = this;
    size_t v4 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v4 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((void *)this + 4) = v4 + 1;
      *size_t v4 = 9;
    }
    uint64_t v5 = *((void *)v3 + 4);
    if ((unint64_t)(*((void *)v3 + 3) - v5) > 0xB)
    {
      *(_DWORD *)(v5 + 8) = 544108393;
      *(void *)uint64_t v5 = *(void *)"sdk_version ";
      *((void *)v3 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v3, "sdk_version ", 0xCuLL);
    }
    this = sub_1CD098D14(v3, *(unsigned int *)a2, 0, 0, 0);
    if ((*a2 & 0x8000000000000000) != 0)
    {
      unint64_t v6 = HIDWORD(*a2) & 0x7FFFFFFFLL;
      unint64_t v7 = (_WORD *)*((void *)v3 + 4);
      if (*((void *)v3 + 3) - (void)v7 > 1uLL)
      {
        *unint64_t v7 = 8236;
        *((void *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, ", ", 2uLL);
      }
      this = sub_1CD098D14(v3, v6, 0, 0, 0);
      if ((a2[1] & 0x80000000) != 0)
      {
        unint64_t v8 = a2[1] & 0x7FFFFFFFLL;
        uint64_t v9 = (_WORD *)*((void *)v3 + 4);
        if (*((void *)v3 + 3) - (void)v9 > 1uLL)
        {
          *uint64_t v9 = 8236;
          *((void *)v3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v3, ", ", 2uLL);
        }
        return sub_1CD098D14(v3, v8, 0, 0, 0);
      }
    }
  }
  return this;
}

llvm::raw_ostream *sub_1CCBB05F8(llvm::raw_ostream *result, unsigned char *a2, uint64_t a3, llvm::raw_ostream *this)
{
  uint64_t v7 = (uint64_t)result;
  unint64_t v8 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v8 >= *((void *)this + 3))
  {
    uint64_t result = llvm::raw_ostream::write(this, 34);
  }
  else
  {
    *((void *)this + 4) = v8 + 1;
    *unint64_t v8 = 34;
  }
  if (!*(unsigned char *)(*(void *)(v7 + 288) + 361))
  {
    if (!a3) {
      goto LABEL_58;
    }
    while (1)
    {
      unsigned int v12 = *a2;
      if (v12 == 92 || v12 == 34)
      {
        size_t v13 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v13 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, 92);
        }
        else
        {
          *((void *)this + 4) = v13 + 1;
          unsigned char *v13 = 92;
        }
      }
      else if (v12 - 32 > 0x5E)
      {
        switch(*a2)
        {
          case 8:
            size_t v14 = (__int16 *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v14 <= 1uLL)
            {
              uint64_t v15 = this;
              unint64_t v16 = "\\b";
              goto LABEL_39;
            }
            __int16 v26 = 25180;
            goto LABEL_57;
          case 9:
            size_t v14 = (__int16 *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v14 <= 1uLL)
            {
              uint64_t v15 = this;
              unint64_t v16 = "\\t";
              goto LABEL_39;
            }
            __int16 v26 = 29788;
            goto LABEL_57;
          case 0xA:
            size_t v14 = (__int16 *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v14 <= 1uLL)
            {
              uint64_t v15 = this;
              unint64_t v16 = "\\n";
              goto LABEL_39;
            }
            __int16 v26 = 28252;
            goto LABEL_57;
          case 0xC:
            size_t v14 = (__int16 *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v14 <= 1uLL)
            {
              uint64_t v15 = this;
              unint64_t v16 = "\\f";
              goto LABEL_39;
            }
            __int16 v26 = 26204;
            goto LABEL_57;
          case 0xD:
            size_t v14 = (__int16 *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v14 > 1uLL)
            {
              __int16 v26 = 29276;
LABEL_57:
              *size_t v14 = v26;
              *((void *)this + 4) += 2;
            }
            else
            {
              uint64_t v15 = this;
              unint64_t v16 = "\\r";
LABEL_39:
              uint64_t result = llvm::raw_ostream::write(v15, v16, 2uLL);
            }
            goto LABEL_40;
          default:
            uint64_t v20 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v20 >= *((void *)this + 3))
            {
              uint64_t result = llvm::raw_ostream::write(this, 92);
            }
            else
            {
              *((void *)this + 4) = v20 + 1;
              *uint64_t v20 = 92;
            }
            int v21 = (v12 >> 6) | 0x30;
            unint64_t v22 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v22 >= *((void *)this + 3))
            {
              uint64_t result = llvm::raw_ostream::write(this, v21);
            }
            else
            {
              *((void *)this + 4) = v22 + 1;
              *unint64_t v22 = v21;
            }
            int v23 = (v12 >> 3) & 7 | 0x30;
            uint64_t v24 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v24 >= *((void *)this + 3))
            {
              uint64_t result = llvm::raw_ostream::write(this, v23);
            }
            else
            {
              *((void *)this + 4) = v24 + 1;
              *uint64_t v24 = v23;
            }
            char v19 = v12 & 7 | 0x30;
            unint64_t v25 = (char *)*((void *)this + 4);
            if ((unint64_t)v25 < *((void *)this + 3))
            {
              *((void *)this + 4) = v25 + 1;
              char *v25 = v19;
              goto LABEL_40;
            }
            uint64_t v18 = this;
            break;
        }
        goto LABEL_28;
      }
      uint64_t v17 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v17 >= *((void *)this + 3))
      {
        uint64_t v18 = this;
        char v19 = v12;
LABEL_28:
        uint64_t result = llvm::raw_ostream::write(v18, v19);
        goto LABEL_40;
      }
      *((void *)this + 4) = v17 + 1;
      *uint64_t v17 = v12;
LABEL_40:
      ++a2;
      if (!--a3) {
        goto LABEL_58;
      }
    }
  }
  for (; a3; --a3)
  {
    int v9 = *a2;
    if (v9 == 34)
    {
      uint64_t v10 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v10 > 1uLL)
      {
        *uint64_t v10 = 8738;
        *((void *)this + 4) += 2;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(this, "\"\"", 2uLL);
      }
    }
    else
    {
      size_t v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *size_t v11 = v9;
      }
    }
    ++a2;
  }
LABEL_58:
  uint64_t v27 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v27 >= *((void *)this + 3))
  {
    return llvm::raw_ostream::write(this, 34);
  }
  else
  {
    *((void *)this + 4) = v27 + 1;
    *uint64_t v27 = 34;
  }
  return result;
}

void sub_1CCBB09C0(llvm::raw_ostream *a1, unsigned int a2, char *a3, size_t a4, unsigned char *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, char a9, llvm::raw_ostream *a10)
{
  uint64_t v12 = a6;
  size_t v13 = a5;
  size_t v14 = a4;
  v37[16] = *MEMORY[0x1E4F143B8];
  unsigned int v35 = v37;
  long long v36 = xmmword_1CFAC3020;
  if ((a9 & 1) == 0 && a4)
  {
    __int16 v34 = 261;
    uint64_t v31 = a5;
    *(void *)&long long v32 = a6;
    if (llvm::sys::path::is_absolute((const char **)&v31, 0))
    {
      size_t v14 = 0;
    }
    else
    {
      *(void *)&long long v36 = 0;
      if (*((void *)&v36 + 1) < v14) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      memcpy(v35, a3, v14);
      *(void *)&long long v36 = v36 + v14;
      __int16 v34 = 261;
      uint64_t v31 = v13;
      *(void *)&long long v32 = v12;
      __int16 v30 = 257;
      __int16 v28 = 257;
      __int16 v26 = 257;
      llvm::sys::path::append(&v35, 0, (const char **)&v31, &v29, (uint64_t)v27, (uint64_t)v25);
      size_t v14 = 0;
      size_t v13 = v35;
      uint64_t v12 = v36;
    }
    a3 = "";
  }
  uint64_t v18 = (_DWORD *)*((void *)a10 + 4);
  if (*((void *)a10 + 3) - (void)v18 > 6uLL)
  {
    *(_DWORD *)((char *)v18 + 3) = 157641833;
    _DWORD *v18 = 1768304137;
    *((void *)a10 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a10, "\t.file\t", 7uLL);
  }
  sub_1CD098D14(a10, a2, 0, 0, 0);
  char v19 = (unsigned char *)*((void *)a10 + 4);
  if ((unint64_t)v19 < *((void *)a10 + 3))
  {
    *((void *)a10 + 4) = v19 + 1;
    *char v19 = 32;
    if (!v14) {
      goto LABEL_17;
    }
LABEL_14:
    sub_1CCBB05F8(a1, a3, v14, a10);
    uint64_t v20 = (unsigned char *)*((void *)a10 + 4);
    if ((unint64_t)v20 >= *((void *)a10 + 3))
    {
      llvm::raw_ostream::write(a10, 32);
    }
    else
    {
      *((void *)a10 + 4) = v20 + 1;
      *uint64_t v20 = 32;
    }
    goto LABEL_17;
  }
  llvm::raw_ostream::write(a10, 32);
  if (v14) {
    goto LABEL_14;
  }
LABEL_17:
  sub_1CCBB05F8(a1, v13, v12, a10);
  if (a7[16])
  {
    int v21 = (_DWORD *)*((void *)a10 + 4);
    if (*((void *)a10 + 3) - (void)v21 > 6uLL)
    {
      *(_DWORD *)((char *)v21 + 3) = 2016419893;
      *int v21 = 895773984;
      *((void *)a10 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a10, " md5 0x", 7uLL);
    }
    uint64_t v31 = &v33;
    long long v32 = xmmword_1CDC7F9D0;
    sub_1CC223914((uint64_t)&v31, 0x20uLL);
    for (uint64_t i = 0; i != 32; i += 2)
    {
      unsigned int v23 = *a7++;
      *((unsigned char *)v31 + i) = a0123456789abcd_6[(unint64_t)v23 >> 4] | 0x20;
      *((unsigned char *)v31 + i + 1) = a0123456789abcd_6[v23 & 0xF] | 0x20;
    }
    llvm::raw_ostream::write(a10, (const char *)v31, v32);
    if (v31 != &v33) {
      free(v31);
    }
  }
  if (*(unsigned char *)(a8 + 16))
  {
    uint64_t v24 = (void *)*((void *)a10 + 4);
    if (*((void *)a10 + 3) - (void)v24 > 7uLL)
    {
      *uint64_t v24 = 0x20656372756F7320;
      *((void *)a10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a10, " source ", 8uLL);
    }
    sub_1CCBB05F8(a1, *(unsigned char **)a8, *(void *)(a8 + 8), a10);
  }
  if (v35 != v37) {
    free(v35);
  }
}

__n128 sub_1CCBB0D74(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, long long *a6, __n128 *a7)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_22;
  }
  if (__len >= 0x17)
  {
    size_t v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v15 = __len | 7;
    }
    size_t v16 = v15 + 1;
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v26 = v16 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v26) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  uint64_t v17 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)uint64_t v17 = __dst;
  *(void *)(a1 + 376) = v26;
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_22:
  }
    abort();
  if (a5 >= 0x17)
  {
    uint64_t v19 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v19 = a5 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v18 = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = a5;
    unint64_t v26 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = v18;
    goto LABEL_18;
  }
  HIBYTE(v26) = a5;
  uint64_t v18 = &__dst;
  if (a5) {
LABEL_18:
  }
    memmove(v18, a4, a5);
  *((unsigned char *)v18 + a5) = 0;
  int v21 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)int v21 = __dst;
  *(void *)(a1 + 400) = v26;
  *(_DWORD *)(a1 + 408) = 0;
  long long v22 = *a6;
  *(unsigned char *)(a1 + 428) = *((unsigned char *)a6 + 16);
  *(_OWORD *)(a1 + 412) = v22;
  unint64_t v23 = a7[1].n128_u64[0];
  __n128 result = *a7;
  *(__n128 *)(a1 + 432) = *a7;
  *(void *)(a1 + 448) = v23;
  LOBYTE(v23) = *((unsigned char *)a6 + 16);
  *(unsigned char *)(a1 + 457) &= v23;
  *(unsigned char *)(a1 + 458) |= v23;
  *(unsigned char *)(a1 + 456) = a7[1].n128_u8[0];
  return result;
}

llvm::raw_ostream *sub_1CCBB0F44(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3)
{
  __n128 result = *(llvm::raw_ostream **)(a1 + 280);
  uint64_t v7 = (void *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v7 > 0xEuLL)
  {
    qmemcpy(v7, "\t.cv_def_range\t", 15);
    *((void *)result + 4) += 15;
    if (!a3) {
      return result;
    }
  }
  else
  {
    __n128 result = llvm::raw_ostream::write(result, "\t.cv_def_range\t", 0xFuLL);
    if (!a3) {
      return result;
    }
  }
  unint64_t v8 = &a2[2 * a3];
  do
  {
    uint64_t v10 = *a2;
    int v9 = a2[1];
    size_t v11 = *(llvm::raw_ostream **)(a1 + 280);
    uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
    if ((unint64_t)v12 >= *((void *)v11 + 3))
    {
      llvm::raw_ostream::write(v11, 32);
    }
    else
    {
      *((void *)v11 + 4) = v12 + 1;
      unsigned char *v12 = 32;
    }
    llvm::MCSymbol::print(v10, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    size_t v13 = *(llvm::raw_ostream **)(a1 + 280);
    size_t v14 = (unsigned char *)*((void *)v13 + 4);
    if ((unint64_t)v14 >= *((void *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, 32);
    }
    else
    {
      *((void *)v13 + 4) = v14 + 1;
      *size_t v14 = 32;
    }
    __n128 result = llvm::MCSymbol::print(v9, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    a2 += 2;
  }
  while (a2 != v8);
  return result;
}

llvm::raw_ostream *sub_1CCBB1050(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 288) + 428)
    || (llvm::MCRegisterInfo::getLLVMRegNum(*(llvm::MCRegisterInfo **)(*(void *)(a1 + 8) + 160), a2, 1) & 0xFF00000000) == 0)
  {
    size_t v4 = *(llvm::raw_ostream **)(a1 + 280);
    return llvm::raw_ostream::operator<<(v4, a2);
  }
  else
  {
    unint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 296) + 40);
    return (llvm::raw_ostream *)v6();
  }
}

llvm::raw_ostream *sub_1CCBB10FC(llvm::raw_ostream *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = (void *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.cfi_escape ", 13);
    *((void *)result + 4) += 13;
    if (!a3) {
      return result;
    }
  }
  else
  {
    __n128 result = llvm::raw_ostream::write(result, "\t.cfi_escape ", 0xDuLL);
    if (!a3) {
      return result;
    }
  }
  if (a3 != 1)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a3 - 1;
    do
    {
      unsigned int v8 = *v6++;
      size_t v11 = &unk_1F260ED30;
      uint64_t v12 = "0x%02x";
      uint64_t v13 = v8;
      __n128 result = llvm::raw_ostream::operator<<(result, (uint64_t)&v11);
      int v9 = (_WORD *)*((void *)result + 4);
      if (*((void *)result + 3) - (void)v9 > 1uLL)
      {
        *int v9 = 8236;
        *((void *)result + 4) += 2;
      }
      else
      {
        __n128 result = llvm::raw_ostream::write(result, ", ", 2uLL);
      }
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = a2[a3 - 1];
  size_t v11 = &unk_1F260ED30;
  uint64_t v12 = "0x%02x";
  uint64_t v13 = v10;
  return llvm::raw_ostream::operator<<(result, (uint64_t)&v11);
}

void llvm::MCAssembler::reset(llvm::MCAssembler *this)
{
  *((void *)this + 5) = *((void *)this + 4);
  *((void *)this + 8) = *((void *)this + 7);
  *((void *)this + 11) = *((void *)this + 10);
  *((void *)this + 14) = *((void *)this + 13);
  uint64_t v2 = (void **)*((void *)this + 16);
  uint64_t v3 = (void **)*((void *)this + 17);
  while (v3 != v2)
  {
    v3 -= 3;
    unint64_t v23 = v3;
    sub_1CB8338B8(&v23);
  }
  *((void *)this + 17) = v2;
  uint64_t v4 = *((void *)this + 19);
  for (uint64_t i = *((void *)this + 20); i != v4; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *((void *)this + 20) = v4;
  uint64_t v6 = *((void *)this + 22);
  uint64_t v7 = *((void *)this + 23);
  if (v7 != v6)
  {
    do
    {
      uint64_t v16 = v6;
      if (*(char *)(v7 - 9) < 0) {
        operator delete(*(void **)(v7 - 32));
      }
      v7 -= 32;
      uint64_t v6 = v16;
    }
    while (v7 != v16);
  }
  uint64_t v8 = *((void *)this + 26);
  *((void *)this + 23) = v6;
  if (*((void *)this + 27) == v8) {
    goto LABEL_7;
  }
  uint64_t v14 = *((unsigned int *)this + 56);
  if (v14 < 0x21 || 4 * (*((_DWORD *)this + 57) - *((_DWORD *)this + 58)) >= v14)
  {
    memset(*((void **)this + 27), 255, 8 * v14);
LABEL_7:
    *((_DWORD *)this + 57) = 0;
    *((_DWORD *)this + 58) = 0;
    goto LABEL_8;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this + 26);
LABEL_8:
  *((_DWORD *)this + 124) = 0;
  *((unsigned char *)this + 500) &= 0xF8u;
  *((_DWORD *)this + 126) = 0;
  uint64_t v9 = *((unsigned int *)this + 132);
  if (v9)
  {
    uint64_t v17 = *((void *)this + 65);
    uint64_t v18 = 48 * v9;
    do
    {
      uint64_t v19 = *(void **)(v17 + v18 - 40);
      if ((void *)(v17 + v18 - 24) != v19) {
        free(v19);
      }
      v18 -= 48;
    }
    while (v18);
  }
  *((_DWORD *)this + 132) = 0;
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 520) = 0;
  *(void *)((char *)this + 2100) = 0;
  *(void *)((char *)this + 2092) = 0;
  *((_DWORD *)this + 529) = 0;
  *((void *)this + 266) = 0;
  *((void *)this + 268) = 0;
  *((void *)this + 267) = 0;
  *((unsigned char *)this + 2152) = 0;
  uint64_t v10 = *((void *)this + 1);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  }
  uint64_t v11 = *((void *)this + 2);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  uint64_t v12 = *((void *)this + 3);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  uint64_t v13 = *((unsigned int *)this + 132);
  if (v13)
  {
    uint64_t v20 = *((void *)this + 65);
    uint64_t v21 = 48 * v13;
    do
    {
      long long v22 = *(void **)(v20 + v21 - 40);
      if ((void *)(v20 + v21 - 24) != v22) {
        free(v22);
      }
      v21 -= 48;
    }
    while (v21);
  }
  *((_DWORD *)this + 132) = 0;
  *((void *)this + 64) = 0;
}

BOOL llvm::MCAssembler::registerSection(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
    uint64_t v10 = a2;
    uint64_t v3 = *(void **)(a1 + 40);
    if ((unint64_t)v3 >= *(void *)(a1 + 48))
    {
      uint64_t v8 = a2;
      uint64_t v9 = a1;
      char v7 = v2;
      uint64_t v6 = sub_1CBC13470((void **)(a1 + 32), &v10);
      char v2 = v7;
      uint64_t v4 = v6;
      a2 = v8;
      a1 = v9;
    }
    else
    {
      *uint64_t v3 = a2;
      uint64_t v4 = v3 + 1;
    }
    *(void *)(a1 + 40) = v4;
    *(unsigned char *)(a2 + 44) |= 4u;
  }
  return (v2 & 4) == 0;
}

uint64_t llvm::MCAssembler::isThumbFunc(llvm::MCAssembler *this, const llvm::MCSymbol *a2)
{
  uint64_t v3 = *((void *)this + 26);
  uint64_t v2 = *((void *)this + 27);
  if (v2 == v3)
  {
    uint64_t v4 = *((unsigned int *)this + 57);
    uint64_t v5 = (const llvm::MCSymbol **)(v2 + 8 * v4);
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v4;
      while (*(const llvm::MCSymbol **)(v2 + v6) != a2)
      {
        v6 += 8;
        if (v7 == v6) {
          goto LABEL_6;
        }
      }
      uint64_t v5 = (const llvm::MCSymbol **)(v2 + v6);
    }
LABEL_6:
    uint64_t v3 = *((void *)this + 27);
  }
  else
  {
    uint64_t v10 = *((unsigned int *)this + 56);
    int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (const llvm::MCSymbol **)(v2 + 8 * v12);
    uint64_t v13 = *v5;
    if (*v5 == (const llvm::MCSymbol *)-1)
    {
      uint64_t v14 = 0;
LABEL_26:
      if (v14) {
        uint64_t v5 = v14;
      }
      if (*v5 != a2) {
        uint64_t v5 = (const llvm::MCSymbol **)(v2 + 8 * v10);
      }
    }
    else
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (const llvm::MCSymbol *)-2;
        }
        if (v16) {
          uint64_t v14 = v5;
        }
        unsigned int v17 = v12 + v15++;
        unsigned int v12 = v17 & v11;
        uint64_t v5 = (const llvm::MCSymbol **)(v2 + 8 * (v17 & v11));
        uint64_t v13 = *v5;
        if (*v5 == (const llvm::MCSymbol *)-1) {
          goto LABEL_26;
        }
      }
    }
  }
  BOOL v16 = v2 == v3;
  uint64_t v8 = 224;
  if (v16) {
    uint64_t v8 = 228;
  }
  if (v5 != (const llvm::MCSymbol **)(v2 + 8 * *(unsigned int *)((char *)this + v8))) {
    return 1;
  }
  if ((*((_DWORD *)a2 + 2) & 0x1C00) != 0x800) {
    return 0;
  }
  uint64_t v21 = (llvm::MCAssembler *)((char *)this + 208);
  *((_DWORD *)a2 + 2) |= 4u;
  uint64_t v18 = *((void *)a2 + 3);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v26 = 0;
  uint64_t v25 = 0;
  int v19 = llvm::MCExpr::evaluateAsRelocatableImpl(v18, &v23, 0, 0, 0, 0, 0);
  uint64_t result = 0;
  if (v19 && !v24 && !v26)
  {
    if (!v23 || *(_WORD *)(v23 + 1)) {
      return 0;
    }
    uint64_t result = llvm::MCAssembler::isThumbFunc(this, *(const llvm::MCSymbol **)(v23 + 16));
    if (result)
    {
      sub_1CB89694C(v21, (uint64_t)a2);
      return 1;
    }
  }
  return result;
}

BOOL llvm::MCAssembler::isSymbolLinkerVisible(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) & 0x201) != 1;
}

const llvm::MCSymbol *llvm::MCAssembler::getAtom(llvm::MCAssembler *this, llvm::MCExpr **a2)
{
  uint64_t v2 = (const llvm::MCSymbol *)a2;
  int v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0x201) != 1) {
    return v2;
  }
  uint64_t v5 = (uint64_t)*a2;
  unint64_t v6 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 0x1C00) == 0x800 && v6 == 0)
  {
    *((_DWORD *)a2 + 2) = v3 | 4;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(a2[3]);
    uint64_t v5 = *(void *)v2 & 7 | AssociatedFragment;
    *(void *)uint64_t v2 = v5;
    if (AssociatedFragment) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_7:
  unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    unint64_t v8 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    uint64_t v5 = *(void *)v2 & 7 | v8;
    *(void *)uint64_t v2 = v5;
  }
  if ((_UNKNOWN *)v8 == llvm::MCSymbol::AbsolutePseudoFragment) {
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)this + 152);
  unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    unint64_t v10 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    *(void *)uint64_t v2 = *(void *)v2 & 7 | v10;
  }
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v9 + 24))(v9, *(void *)(v10 + 16))) {
    return 0;
  }
  unint64_t v11 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    unint64_t v11 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    *(void *)uint64_t v2 = *(void *)v2 & 7 | v11;
  }
  return *(const llvm::MCSymbol **)(v11 + 24);
}

uint64_t llvm::MCAssembler::evaluateFixup(uint64_t a1, uint64_t **a2, uint64_t a3, const llvm::MCFragment *a4, uint64_t *a5, void *a6, unsigned char *a7)
{
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = *(void *)a1;
  *a6 = 0;
  *a7 = 0;
  if ((llvm::MCExpr::evaluateAsRelocatableImpl(v14, (uint64_t)a5, *a2, (uint64_t)a2, a3, 0, 0) & 1) == 0)
  {
    uint64_t v36 = *(void *)(a3 + 16);
    uint64_t v37 = "expected relocatable expression";
LABEL_35:
    v40[0] = v37;
    __int16 v41 = 259;
    llvm::MCContext::reportError(v15, v36, (uint64_t)v40);
    return 1;
  }
  uint64_t v16 = a5[1];
  if (v16 && *(_WORD *)(v16 + 1))
  {
    uint64_t v36 = *(void *)(a3 + 16);
    uint64_t v37 = "unsupported subtraction of qualified symbol";
    goto LABEL_35;
  }
  uint64_t v17 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), *(unsigned int *)(a3 + 12));
  uint64_t v18 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v17 + 16) & 4) == 0)
  {
    int v19 = *(_DWORD *)((*(uint64_t (**)(uint64_t, void))(*(void *)v18 + 80))(v18, *(unsigned int *)(a3 + 12))+ 16);
    int v20 = *(_DWORD *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), *(unsigned int *)(a3 + 12))+ 16);
    if (v20)
    {
      if (a5[1]) {
        goto LABEL_33;
      }
      uint64_t v32 = *a5;
      if (!*a5)
      {
        int v22 = 0;
        uint64_t v25 = a5[2];
        goto LABEL_10;
      }
      if (*(_WORD *)(v32 + 1)) {
        goto LABEL_33;
      }
      uint64_t v33 = *(void *)(v32 + 16);
      unint64_t AssociatedFragment = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*(_DWORD *)(v33 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v33 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v33 + 24));
        *(void *)uint64_t v33 = *(void *)v33 & 7 | AssociatedFragment;
      }
      if (!AssociatedFragment || (uint64_t v35 = *(void *)(a1 + 24)) == 0)
      {
LABEL_33:
        int v22 = 0;
      }
      else if ((v19 & 8) != 0)
      {
        int v22 = 1;
      }
      else
      {
        int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const llvm::MCFragment *, void, uint64_t))(*(void *)v35 + 48))(v35, a1, v33, a4, 0, 1);
      }
      uint64_t v21 = *a5;
    }
    else
    {
      uint64_t v21 = *a5;
      int v22 = *(_OWORD *)a5 == 0;
    }
    *a6 = a5[2];
    if (!v21) {
      goto LABEL_11;
    }
    uint64_t v23 = *(void *)(v21 + 16);
    unint64_t v24 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
    if (!v24 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      unint64_t v24 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      *(void *)uint64_t v23 = *(void *)v23 & 7 | v24;
    }
    if (!v24)
    {
LABEL_11:
      uint64_t v26 = a5[1];
      if (v26)
      {
        unsigned int v39 = *(uint64_t **)(v26 + 16);
        if (sub_1CC34BE58((uint64_t)v39, 1))
        {
          v40[0] = 0;
          sub_1CCBC6418((llvm::MCAsmLayout *)a2, v39, 1, v40);
          *a6 -= v40[0];
        }
      }
      uint64_t v27 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), *(unsigned int *)(a3 + 12));
      if (v20)
      {
        int v28 = *(_DWORD *)(v27 + 16);
        llvm::MCAsmLayout::ensureValid((llvm::MCAsmLayout *)a2, a4);
        LODWORD(v29) = *(_DWORD *)(a3 + 8) + *((_DWORD *)a4 + 8);
        if ((v28 & 2) != 0) {
          uint64_t v29 = v29 & 0xFFFFFFFC;
        }
        else {
          uint64_t v29 = v29;
        }
        *a6 -= v29;
      }
      if (v22)
      {
        int v30 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a1, a3, a5);
        uint64_t result = 1;
        if (!v30) {
          return result;
        }
        *a7 = 1;
      }
      return 0;
    }
    v40[0] = 0;
    sub_1CCBC6418((llvm::MCAsmLayout *)a2, (uint64_t *)v23, 1, v40);
    uint64_t v25 = *a6 + v40[0];
LABEL_10:
    *a6 = v25;
    goto LABEL_11;
  }
  unsigned int v38 = *(uint64_t (**)(void))(*(void *)v18 + 112);

  return v38();
}

unint64_t llvm::MCAssembler::computeFragmentSize(llvm::MCAssembler *this, const llvm::MCAsmLayout *a2, const llvm::MCFragment *a3)
{
  unint64_t result = 4;
  switch(*((unsigned char *)a3 + 48))
  {
    case 1:
    case 3:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xE:
    case 0xF:
      return *((void *)a3 + 9);
    case 2:
      return *((void *)a3 + 19);
    case 4:
      v29[0] = 0;
      if ((llvm::MCExpr::evaluateAsAbsolute(*((llvm::MCExpr **)a3 + 8), (uint64_t *)v29, a2) & 1) == 0)
      {
        uint64_t v9 = *(void **)this;
        uint64_t v10 = *((void *)a3 + 9);
        goto LABEL_30;
      }
      unint64_t result = v29[0] * *((unsigned __int8 *)a3 + 51);
      if ((result & 0x8000000000000000) != 0)
      {
        uint64_t v9 = *(void **)this;
        uint64_t v10 = *((void *)a3 + 9);
        unint64_t v11 = "invalid number of bytes";
        goto LABEL_31;
      }
      return result;
    case 5:
      return *((void *)a3 + 7);
    case 7:
      v32[0] = 0;
      v32[1] = 0;
      int v34 = 0;
      uint64_t v33 = 0;
      if ((llvm::MCExpr::evaluateAsRelocatableImpl(*((void *)a3 + 7), v32, *(void *)a2, a2, 0, 0, 1) & 1) == 0)
      {
        uint64_t v9 = *(void **)this;
        uint64_t v10 = *((void *)a3 + 8);
LABEL_30:
        unint64_t v11 = "expected assembly-time absolute expression";
        goto LABEL_31;
      }
      llvm::MCAsmLayout::ensureValid(a2, a3);
      uint64_t v12 = *((void *)a3 + 4);
      uint64_t v13 = v33;
      uint64_t v30 = v33;
      uint64_t v31 = v12;
      if (!v32[0]) {
        goto LABEL_24;
      }
      v29[0] = 0;
      if (!llvm::MCAsmLayout::getSymbolOffset(a2, *(const llvm::MCSymbol **)(v32[0] + 16), v29))
      {
        uint64_t v9 = *(void **)this;
        uint64_t v10 = *((void *)a3 + 8);
        unint64_t v11 = "expected absolute expression";
LABEL_31:
        *(void *)uint64_t v35 = v11;
        __int16 v36 = 259;
        goto LABEL_32;
      }
      v13 += v29[0];
      uint64_t v30 = v13;
LABEL_24:
      unint64_t result = v13 - v12;
      if ((unint64_t)(v13 - v12) >> 30)
      {
        uint64_t v14 = *(void **)this;
        uint64_t v15 = *((void *)a3 + 8);
        uint64_t v25 = "invalid .org offset '";
        __int16 v26 = 259;
        __int16 v24 = 269;
        v23[0] = (uint64_t)&v30;
        sub_1CB8F1E58((uint64_t *)&v25, v23, (uint64_t)v27);
        uint64_t v21 = "' (at offset '";
        __int16 v22 = 259;
        sub_1CB8F1E58(v27, (uint64_t *)&v21, (uint64_t)v28);
        __int16 v20 = 268;
        v19[0] = (uint64_t)&v31;
        sub_1CB8F1E58(v28, v19, (uint64_t)v29);
        uint64_t v17 = "')";
        __int16 v18 = 259;
        sub_1CB8F1E58((uint64_t *)v29, (uint64_t *)&v17, (uint64_t)v35);
        uint64_t v9 = v14;
        uint64_t v10 = v15;
LABEL_32:
        llvm::MCContext::reportError((uint64_t)v9, v10, (uint64_t)v35);
        return 0;
      }
      return result;
    case 0xB:
      return *((void *)a3 + 8);
    case 0xC:
      return result;
    case 0xD:
      return *((void *)a3 + 11);
    default:
      llvm::MCAsmLayout::ensureValid(a2, a3);
      char v6 = __clz(*((unsigned int *)a3 + 13));
      unsigned int v7 = ((*((_DWORD *)a3 + 8) + (1 << (63 - v6)) - 1) & -(int)(1 << (63 - v6))) - *((_DWORD *)a3 + 8);
      v35[0] = v7;
      if (!(*(unsigned int (**)(void))(**((void **)a3 + 2) + 8))(*((void *)a3 + 2))
        || (*((unsigned char *)a3 + 56) & 1) == 0
        || (char v8 = (*(uint64_t (**)(void, const llvm::MCFragment *, unsigned int *))(**((void **)this + 1)
                                                                                             + 96))(*((void *)this + 1), a3, v35), unsigned int v7 = v35[0], (v8 & 1) == 0))
      {
        if (v7 && (*((unsigned char *)a3 + 56) & 1) != 0)
        {
          while (v7 % (*(unsigned int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1)))
          {
            unsigned int v7 = v35[0] + *((_DWORD *)a3 + 13);
            v35[0] = v7;
          }
        }
        if (v35[0] <= *((_DWORD *)a3 + 19)) {
          return v35[0];
        }
        else {
          return 0;
        }
      }
      return v7;
  }
}

unint64_t llvm::MCAsmLayout::layoutFragment(llvm::MCAssembler **this, llvm::MCFragment *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (*(llvm::MCFragment **)(v4 + 112) == a2)
  {
    *((unsigned char *)a2 + 49) = 1;
    char v6 = (char *)a2 + 49;
  }
  else
  {
    uint64_t v5 = *(const llvm::MCFragment **)a2;
    *((unsigned char *)a2 + 49) = 1;
    char v6 = (char *)a2 + 49;
    if (v5)
    {
      uint64_t v7 = *((void *)v5 + 4);
      *((void *)a2 + 4) = llvm::MCAssembler::computeFragmentSize(*this, (const llvm::MCAsmLayout *)this, v5) + v7;
      uint64_t v4 = *((void *)a2 + 2);
      goto LABEL_4;
    }
  }
  *((void *)a2 + 4) = 0;
LABEL_4:
  *char v6 = 0;
  char v8 = this[19];
  uint64_t v23 = v4;
  int v9 = *((_DWORD *)this + 42);
  if (!v9)
  {
    int v19 = 0;
LABEL_22:
    uint64_t v12 = sub_1CCBB42FC((uint64_t)(this + 19), (uint64_t)&v23, &v23, v19);
    void *v12 = v23;
    v12[1] = 0;
    goto LABEL_6;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  uint64_t v12 = (void *)((char *)v8 + 16 * v11);
  uint64_t v13 = *v12;
  if (v4 != *v12)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v13 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v13 == -8192;
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      unsigned int v18 = v11 + v16++;
      unsigned int v11 = v18 & v10;
      uint64_t v12 = (void *)((char *)v8 + 16 * (v18 & v10));
      uint64_t v13 = *v12;
      if (v4 == *v12) {
        goto LABEL_6;
      }
    }
    if (v15) {
      int v19 = v15;
    }
    else {
      int v19 = v12;
    }
    goto LABEL_22;
  }
LABEL_6:
  v12[1] = a2;
  unint64_t result = (unint64_t)*this;
  if (*((_DWORD *)*this + 124) && *((unsigned char *)a2 + 50))
  {
    unint64_t v20 = llvm::MCAssembler::computeFragmentSize((llvm::MCAssembler *)result, (const llvm::MCAsmLayout *)this, a2);
    uint64_t v21 = *this;
    if ((*((unsigned char *)*this + 500) & 1) != 0 || v20 <= *((unsigned int *)v21 + 124))
    {
      unint64_t result = llvm::computeBundlePadding((uint64_t)v21, (uint64_t)a2, *((void *)a2 + 4), v20);
      if (result < 0x100)
      {
        *((unsigned char *)a2 + 52) = result;
        *((void *)a2 + 4) += result;
        return result;
      }
      __int16 v22 = "Padding cannot exceed 255 bytes";
    }
    else
    {
      __int16 v22 = "Fragment can't be larger than a bundle size";
    }
    llvm::report_fatal_error((llvm *)v22, (const llvm::Twine *)1);
  }
  return result;
}

uint64_t llvm::MCAssembler::registerSymbol(uint64_t result, uint64_t a2, BOOL *a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (a3) {
    *a3 = (*(_DWORD *)(a2 + 8) & 8) == 0;
  }
  if ((v3 & 8) == 0)
  {
    *(_DWORD *)(a2 + 8) |= 8u;
    uint64_t v7 = a2;
    uint64_t v4 = *(void **)(result + 64);
    if ((unint64_t)v4 >= *(void *)(result + 72))
    {
      uint64_t v6 = result;
      uint64_t v5 = sub_1CBC13470((void **)(result + 56), &v7);
      unint64_t result = v6;
    }
    else
    {
      *uint64_t v4 = a2;
      uint64_t v5 = v4 + 1;
    }
    *(void *)(result + 64) = v5;
  }
  return result;
}

uint64_t llvm::MCAssembler::writeFragmentPadding(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 52);
  if (*(unsigned char *)(a3 + 52))
  {
    uint64_t v5 = result;
    uint64_t v7 = *(void *)(a3 + 56);
    if (*(unsigned char *)(a3 + 51))
    {
      unsigned int v8 = *(_DWORD *)(result + 496);
      uint64_t v9 = v4 + a4 - v8;
      if (v4 + a4 > v8)
      {
        if (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(result + 8) + 192))(*(void *)(result + 8), a2, v9, v7) & 1) == 0)
        {
          uint64_t v14 = "unable to write NOP sequence of ";
          __int16 v15 = 259;
          __int16 v13 = 264;
          LODWORD(v12[0]) = v9;
          goto LABEL_9;
        }
        v4 -= v9;
      }
    }
    unint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(v5 + 8) + 192))(*(void *)(v5 + 8), a2, v4, v7);
    if (result) {
      return result;
    }
    uint64_t v14 = "unable to write NOP sequence of ";
    __int16 v15 = 259;
    __int16 v13 = 264;
    LODWORD(v12[0]) = v4;
LABEL_9:
    sub_1CD3E3950((uint64_t *)&v14, v12, (uint64_t)v16);
    int v10 = " bytes";
    __int16 v11 = 259;
    sub_1CD3E3950(v16, (uint64_t *)&v10, (uint64_t)v17);
    llvm::report_fatal_error((llvm *)v17, (const llvm::Twine *)1);
  }
  return result;
}

void llvm::MCAssembler::writeSectionData(llvm::MCAssembler *this, llvm::raw_ostream *a2, const llvm::MCSection *a3, const llvm::MCAsmLayout *a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(const llvm::MCSection *))(*(void *)a3 + 16))(a3))
  {
    for (uint64_t i = *((void *)a3 + 14);
          (const llvm::MCSection *)i != (const llvm::MCSection *)((char *)a3 + 104);
          uint64_t i = *(void *)(i + 8))
    {
      if (*(unsigned char *)(i + 48) == 1)
      {
        if (*(_DWORD *)(i + 128))
        {
          uint64_t v67 = *(void *)this;
          uint64_t v68 = (*(uint64_t (**)(const llvm::MCSection *))(*(void *)a3 + 24))(a3);
          __int16 v107 = 773;
          v106.__r_.__value_.__r.__words[0] = v68;
          v106.__r_.__value_.__l.__size_ = v69;
          v106.__r_.__value_.__r.__words[2] = (std::string::size_type)" section '";
          std::string::size_type v70 = *((void *)a3 + 25);
          std::string::size_type v71 = *((void *)a3 + 26);
          __int16 v105 = 261;
          v103.__r_.__value_.__r.__words[0] = v70;
          v103.__r_.__value_.__l.__size_ = v71;
          sub_1CB8F1E58((uint64_t *)&v106, (uint64_t *)&v103, (uint64_t)&v108);
          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"' cannot have fixups";
          __int16 v102 = 259;
          sub_1CB8F1E58((uint64_t *)&v108, (uint64_t *)&v101, (uint64_t)__src);
          llvm::MCContext::reportError(v67, 0, (uint64_t)__src);
        }
        uint64_t v72 = *(unsigned int *)(i + 72);
        if (*(_DWORD *)(i + 72))
        {
          int v73 = *(unsigned __int8 **)(i + 64);
          while (!*v73++)
          {
            if (!--v72) {
              goto LABEL_110;
            }
          }
          uint64_t v75 = *(void *)this;
          uint64_t v76 = (*(uint64_t (**)(const llvm::MCSection *))(*(void *)a3 + 24))(a3);
          __int16 v107 = 773;
          v106.__r_.__value_.__r.__words[0] = v76;
          v106.__r_.__value_.__l.__size_ = v77;
          v106.__r_.__value_.__r.__words[2] = (std::string::size_type)" section '";
          std::string::size_type v78 = *((void *)a3 + 25);
          std::string::size_type v79 = *((void *)a3 + 26);
          __int16 v105 = 261;
          v103.__r_.__value_.__r.__words[0] = v78;
          v103.__r_.__value_.__l.__size_ = v79;
          sub_1CB8F1E58((uint64_t *)&v106, (uint64_t *)&v103, (uint64_t)&v108);
          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"' cannot have non-zero initializers";
          __int16 v102 = 259;
          sub_1CB8F1E58((uint64_t *)&v108, (uint64_t *)&v101, (uint64_t)__src);
          llvm::MCContext::reportError(v75, 0, (uint64_t)__src);
        }
      }
LABEL_110:
      ;
    }
  }
  else
  {
    (*(void (**)(llvm::raw_ostream *))(*(void *)a2 + 80))(a2);
    unsigned int v8 = (char *)a3 + 104;
    uint64_t v9 = *((void *)a3 + 14);
    if ((char *)v9 != v8)
    {
      while (1)
      {
        size_t v110 = 0;
        unint64_t v10 = llvm::MCAssembler::computeFragmentSize(this, a4, (const llvm::MCFragment *)v9);
        size_t v110 = v10;
        int v11 = *(_DWORD *)(*((void *)this + 1) + 8);
        unsigned int v12 = *(unsigned __int8 *)(v9 + 48);
        BOOL v13 = v12 > 0xF;
        int v14 = (1 << v12) & 0x834A;
        if (!v13 && v14 != 0) {
          llvm::MCAssembler::writeFragmentPadding((uint64_t)this, (uint64_t)a2, v9, v10);
        }
        (*(void (**)(llvm::raw_ostream *))(*(void *)a2 + 80))(a2);
        switch(*(unsigned char *)(v9 + 48))
        {
          case 0:
            size_t v19 = *(unsigned int *)(v9 + 72);
            size_t v20 = v110 / v19;
            *(void *)&v94.__val_ = v110 / v19;
            if (v110 / v19 * v19 != v110)
            {
              v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"undefined .align directive, value size '";
              __int16 v102 = 259;
              __int16 v100 = 264;
              LODWORD(v99.__r_.__value_.__l.__data_) = v19;
              sub_1CD3E3950((uint64_t *)&v101, (uint64_t *)&v99, (uint64_t)&v103);
              v97.__r_.__value_.__r.__words[0] = (std::string::size_type)"' is not a divisor of padding size '";
              __int16 v98 = 259;
              sub_1CD3E3950((uint64_t *)&v103, (uint64_t *)&v97, (uint64_t)&v106);
              __int16 v113 = 268;
              v111[0] = (uint64_t)&v110;
              sub_1CD3E3950((uint64_t *)&v106, v111, (uint64_t)&v108);
              v95.__r_.__value_.__r.__words[0] = (std::string::size_type)"'";
              __int16 v96 = 259;
              char v80 = &v95;
              goto LABEL_115;
            }
            if (*(unsigned char *)(v9 + 56))
            {
              if (((*(uint64_t (**)(void, llvm::raw_ostream *, size_t, void))(**((void **)this + 1)
                                                                                           + 192))(*((void *)this + 1), a2, v20, *(void *)(v9 + 80)) & 1) == 0)
              {
                v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of ";
                __int16 v107 = 259;
                __int16 v105 = 268;
                uint64_t v21 = &v94;
LABEL_114:
                v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
                sub_1CD3E3950((uint64_t *)&v106, (uint64_t *)&v103, (uint64_t)&v108);
                v101.__r_.__value_.__r.__words[0] = (std::string::size_type)" bytes";
                __int16 v102 = 259;
                char v80 = &v101;
LABEL_115:
                sub_1CD3E3950((uint64_t *)&v108, (uint64_t *)v80, (uint64_t)__src);
                llvm::report_fatal_error((llvm *)__src, (const llvm::Twine *)1);
              }
            }
            else if (v110 >= v19)
            {
              do
              {
                int v81 = *(_DWORD *)(v9 + 72);
                if (v81 == 1)
                {
                  char v82 = *(unsigned char *)(v9 + 64);
                  int v83 = (unsigned char *)*((void *)a2 + 4);
                  if ((unint64_t)v83 >= *((void *)a2 + 3))
                  {
                    llvm::raw_ostream::write(a2, *(unsigned char *)(v9 + 64));
                  }
                  else
                  {
                    *((void *)a2 + 4) = v83 + 1;
                    *int v83 = v82;
                  }
                }
                else
                {
                  if (v81 == 2)
                  {
                    unsigned int v84 = bswap32(*(unsigned __int16 *)(v9 + 64)) >> 16;
                    if ((v11 - 1) >= 2) {
                      __int16 v85 = v84;
                    }
                    else {
                      __int16 v85 = *(_WORD *)(v9 + 64);
                    }
                    LOWORD(__src[0]) = v85;
                    unsigned int v86 = a2;
                    size_t v87 = 2;
                  }
                  else if (v81 == 4)
                  {
                    unsigned int v88 = bswap32(*(_DWORD *)(v9 + 64));
                    if ((v11 - 1) >= 2) {
                      unsigned int v89 = v88;
                    }
                    else {
                      unsigned int v89 = *(_DWORD *)(v9 + 64);
                    }
                    LODWORD(__src[0]) = v89;
                    unsigned int v86 = a2;
                    size_t v87 = 4;
                  }
                  else
                  {
                    unint64_t v90 = bswap64(*(void *)(v9 + 64));
                    if ((v11 - 1) >= 2) {
                      unint64_t v91 = v90;
                    }
                    else {
                      unint64_t v91 = *(void *)(v9 + 64);
                    }
                    __src[0] = v91;
                    unsigned int v86 = a2;
                    size_t v87 = 8;
                  }
                  llvm::raw_ostream::write(v86, (const char *)__src, v87);
                }
                --v20;
              }
              while (v20);
            }
LABEL_12:
            uint64_t v9 = *(void *)(v9 + 8);
            if ((char *)v9 == v8) {
              return;
            }
            break;
          case 1:
          case 3:
          case 6:
          case 8:
          case 9:
          case 0xA:
          case 0xE:
          case 0xF:
            int v16 = *(const char **)(v9 + 64);
            size_t v17 = *(void *)(v9 + 72);
            goto LABEL_10;
          case 2:
            uint64_t v58 = *(void *)(v9 + 56);
            uint64_t v59 = *(void *)(v9 + 64);
            __int16 v115 = 261;
            __src[0] = v58;
            __src[1] = v59;
            llvm::MemoryBuffer::getFileSlice((llvm::MemoryBuffer *)__src, *(const llvm::Twine **)(v9 + 152), *(void *)(v9 + 144), 0, (uint64_t)v111);
            if (v112)
            {
              uint64_t v61 = *(void *)this;
              std::string::size_type v62 = *(void *)(v9 + 56);
              uint64_t v63 = *(void *)(v9 + 64);
              __int16 v105 = 1283;
              v103.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot open '";
              v103.__r_.__value_.__r.__words[2] = v62;
              uint64_t v104 = v63;
              v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"' (";
              __int16 v102 = 259;
              sub_1CB8F1E58((uint64_t *)&v103, (uint64_t *)&v101, (uint64_t)&v106);
              if (v112)
              {
                uint64_t v65 = v111[0];
                char v64 = (const std::error_category *)v111[1];
              }
              else
              {
                char v64 = std::system_category();
                uint64_t v65 = 0;
              }
              *(void *)&v94.__val_ = v65;
              v94.__cat_ = v64;
              std::error_code::message(&v95, &v94);
              __int16 v100 = 260;
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
              sub_1CB8F1E58((uint64_t *)&v106, (uint64_t *)&v99, (uint64_t)&v108);
              v97.__r_.__value_.__r.__words[0] = (std::string::size_type)")";
              __int16 v98 = 259;
              sub_1CB8F1E58((uint64_t *)&v108, (uint64_t *)&v97, (uint64_t)__src);
              llvm::MCContext::reportError(v61, 0, (uint64_t)__src);
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v95.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              llvm::raw_ostream::write(a2, *(const char **)(v111[0] + 8), *(void *)(v111[0] + 16) - *(void *)(v111[0] + 8));
            }
            if ((v112 & 1) == 0)
            {
              uint64_t v60 = v111[0];
              v111[0] = 0;
              if (v60) {
                (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
              }
            }
            goto LABEL_12;
          case 4:
            uint64_t v22 = *(unsigned __int8 *)(v9 + 51);
            if (!*(unsigned char *)(v9 + 51))
            {
              uint64_t v23 = 0;
LABEL_22:
              uint64_t v24 = 0;
              do
              {
                *((unsigned char *)__src + v23 + v24) = *((unsigned char *)__src + v24);
                ++v24;
              }
              while (v23 + v24 != 16);
              goto LABEL_24;
            }
            uint64_t v29 = 0;
            unint64_t v30 = *(void *)(v9 + 56);
            uint64_t v23 = *(unsigned __int8 *)(v9 + 51);
            uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(v22 - 1);
            int64x2_t v32 = (int64x2_t)xmmword_1CD96D880;
            char v33 = v22 - 1;
            do
            {
              int32x2_t v34 = vmovn_s64((int64x2_t)vcgeq_u64(v31, (uint64x2_t)v32));
              if (v34.i8[0])
              {
                if (v11 == 1) {
                  char v35 = v29;
                }
                else {
                  char v35 = v33;
                }
                *((unsigned char *)__src + v29) = v30 >> (8 * v35);
              }
              if (v34.i8[4])
              {
                char v36 = (v29 ^ 0xFE) + v22;
                if (v11 == 1) {
                  char v36 = v29 + 1;
                }
                *((unsigned char *)__src + v29 + 1) = v30 >> (8 * v36);
              }
              v29 += 2;
              int64x2_t v32 = vaddq_s64(v32, vdupq_n_s64(2uLL));
              v33 -= 2;
            }
            while ((((_WORD)v22 + 1) & 0x1FE) != v29);
            if (v22 <= 0xF) {
              goto LABEL_22;
            }
LABEL_24:
            size_t v25 = 0x10 / v22 * v22;
            size_t v26 = v110;
            if (v110 >= v25)
            {
              size_t v27 = v110 / v25;
              do
              {
                int v28 = (void *)*((void *)a2 + 4);
                if (*((void *)a2 + 3) - (void)v28 < v25)
                {
                  llvm::raw_ostream::write(a2, (const char *)__src, v25);
                }
                else if (v25 != 0)
                {
                  memcpy(v28, __src, v25);
                  *((void *)a2 + 4) += v25;
                }
                --v27;
              }
              while (v27);
              size_t v26 = v110;
            }
            size_t v17 = v26 % v25;
            if (v26 % v25)
            {
              int v16 = (const char *)__src;
LABEL_10:
              unsigned int v18 = a2;
LABEL_11:
              llvm::raw_ostream::write(v18, v16, v17);
            }
            goto LABEL_12;
          case 5:
            uint64_t v37 = *(void *)(v9 + 64);
            v92 = v8;
            uint64_t v93 = *(void *)(v9 + 56);
            uint64_t v38 = (*(unsigned int (**)(void, void))(**((void **)this + 1) + 184))(*((void *)this + 1), *(void *)(v9 + 80));
            if (v37 > v38)
            {
              uint64_t v39 = *(void *)this;
              uint64_t v40 = *(void *)(v9 + 72);
              std::to_string(&v99, v37);
              __int16 v41 = std::string::insert(&v99, 0, "illegal NOP size ");
              std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              uint64_t v43 = std::string::append(&v101, ". (expected within [0, ");
              std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
              v103.__r_.__value_.__r.__words[2] = v44;
              v43->__r_.__value_.__l.__size_ = 0;
              v43->__r_.__value_.__r.__words[2] = 0;
              v43->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v97, v38);
              if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v45 = &v97;
              }
              else {
                unsigned int v45 = (std::string *)v97.__r_.__value_.__r.__words[0];
              }
              if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = *((unsigned char *)&v97.__r_.__value_.__s + 23) & 0x7F;
              }
              else {
                std::string::size_type size = v97.__r_.__value_.__l.__size_;
              }
              unsigned int v47 = std::string::append(&v103, (const std::string::value_type *)v45, size);
              std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
              v106.__r_.__value_.__r.__words[2] = v48;
              v47->__r_.__value_.__l.__size_ = 0;
              v47->__r_.__value_.__r.__words[2] = 0;
              v47->__r_.__value_.__r.__words[0] = 0;
              uint64_t v49 = std::string::append(&v106, "])");
              std::string::size_type v50 = v49->__r_.__value_.__r.__words[2];
              long long v108 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              std::string::size_type v109 = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              __int16 v115 = 260;
              __src[0] = &v108;
              llvm::MCContext::reportError(v39, v40, (uint64_t)__src);
              if (SHIBYTE(v109) < 0) {
                operator delete((void *)v108);
              }
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v106.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v97.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v103.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v101.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v99.__r_.__value_.__l.__data_);
              }
              uint64_t v37 = v38;
            }
            if (v37) {
              uint64_t v51 = v37;
            }
            else {
              uint64_t v51 = v38;
            }
            unsigned int v8 = v92;
            if (!v93) {
              goto LABEL_12;
            }
            while (1)
            {
              std::string::size_type v52 = v51 >= v93 ? v93 : v51;
              v99.__r_.__value_.__r.__words[0] = v52;
              if (((*(uint64_t (**)(void, llvm::raw_ostream *, std::string::size_type, void))(**((void **)this + 1) + 192))(*((void *)this + 1), a2, v52, *(void *)(v9 + 80)) & 1) == 0)break; {
              unsigned int v8 = v92;
              }
              v93 -= v52;
              if (!v93) {
                goto LABEL_12;
              }
            }
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of the remaining ";
            __int16 v107 = 259;
            __int16 v105 = 268;
            uint64_t v21 = &v99;
            goto LABEL_114;
          case 7:
            for (size_t j = v110; j; --j)
            {
              char v54 = *(unsigned char *)(v9 + 51);
              uint64_t v55 = (char *)*((void *)a2 + 4);
              if ((unint64_t)v55 >= *((void *)a2 + 3))
              {
                llvm::raw_ostream::write(a2, v54);
              }
              else
              {
                *((void *)a2 + 4) = v55 + 1;
                *uint64_t v55 = v54;
              }
            }
            goto LABEL_12;
          case 0xB:
            if (((*(uint64_t (**)(void, llvm::raw_ostream *, size_t, void))(**((void **)this + 1)
                                                                                         + 192))(*((void *)this + 1), a2, v110, *(void *)(v9 + 72)) & 1) != 0)goto LABEL_12;
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of ";
            __int16 v107 = 259;
            __int16 v105 = 268;
            uint64_t v21 = &v110;
            goto LABEL_114;
          case 0xC:
            unsigned int v56 = *(_DWORD *)(*(void *)(v9 + 56) + 16);
            unsigned int v57 = bswap32(v56);
            if ((v11 - 1) >= 2) {
              unsigned int v56 = v57;
            }
            LODWORD(__src[0]) = v56;
            int v16 = (const char *)__src;
            unsigned int v18 = a2;
            size_t v17 = 4;
            goto LABEL_11;
          case 0xD:
            int v16 = *(const char **)(v9 + 80);
            size_t v17 = *(void *)(v9 + 88);
            goto LABEL_10;
          default:
            goto LABEL_12;
        }
      }
    }
  }
}

double llvm::MCAssembler::handleFixup@<D0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, const llvm::MCFragment *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v17 = 0uLL;
  DWORD2(v18) = 0;
  *(void *)&long long v18 = 0;
  uint64_t v16 = 0;
  char v15 = 0;
  char v10 = llvm::MCAssembler::evaluateFixup(a1, a2, a4, a3, (uint64_t *)&v17, &v16, &v15);
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    v14[0] = v17;
    v14[1] = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t **, const llvm::MCFragment *, uint64_t, _OWORD *, uint64_t *))(*(void *)v13 + 32))(v13, a1, a2, a3, a4, v14, &v16);
  }
  double result = *(double *)&v17;
  long long v12 = v18;
  *(_OWORD *)a5 = v17;
  *(_OWORD *)(a5 + 16) = v12;
  *(void *)(a5 + 32) = v16;
  *(unsigned char *)(a5 + 40) = v10;
  return result;
}

uint64_t llvm::MCAssembler::layout(llvm::MCAssembler *this, uint64_t **a2)
{
  uint64_t v2 = a2;
  int v3 = this;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  if (v4 != v5)
  {
    int v6 = 0;
    do
    {
      if (*(void *)(*(void *)v4 + 104) == *(void *)v4 + 104) {
        operator new();
      }
      *(_DWORD *)(*(void *)v4 + 28) = v6++;
      v4 += 8;
    }
    while (v4 != v5);
  }
  uint64_t v7 = *((unsigned int *)a2 + 4);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a2[1];
    do
    {
      uint64_t v10 = v9[v8];
      *(_DWORD *)(v10 + 32) = v8;
      uint64_t v11 = v10 + 104;
      uint64_t v12 = *(void *)(v10 + 112);
      if (v12 != v11)
      {
        int v13 = 0;
        do
        {
          *(_DWORD *)(v12 + 40) = v13++;
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12 != v11);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  int v14 = (llvm::MCSection **)*((void *)this + 4);
  for (uint64_t i = (llvm::MCSection **)*((void *)this + 5); v14 != i; uint64_t i = (llvm::MCSection **)*((void *)this + 5))
  {
    uint64_t v16 = 0;
    do
    {
      long long v17 = *v14;
      uint64_t v18 = v16;
      do
      {
        uint64_t v16 = v18;
        uint64_t result = llvm::MCAssembler::layoutSectionOnce(v3, v2, v17);
        uint64_t v18 = 1;
      }
      while ((result & 1) != 0);
      ++v14;
    }
    while (v14 != i);
    if ((v16 & 1) == 0) {
      break;
    }
    if (*(unsigned char *)(*(void *)v3 + 1960)) {
      return result;
    }
    int v3 = this;
    size_t v20 = (uint64_t *)*((void *)this + 4);
    char v35 = (uint64_t *)*((void *)this + 5);
    if (v20 == v35) {
      break;
    }
    do
    {
      uint64_t v21 = *v20++;
      llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)v2, *(uint64_t **)(v21 + 112));
    }
    while (v20 != v35);
    int v14 = (llvm::MCSection **)*((void *)this + 4);
  }
  llvm::MCAssembler::finishLayout(v3, (llvm::MCAsmLayout *)v2);
  uint64_t result = (*(uint64_t (**)(void, llvm::MCAssembler *, uint64_t **))(**((void **)v3 + 3) + 24))(*((void *)v3 + 3), v3, v2);
  uint64_t v22 = (uint64_t *)*((void *)v3 + 4);
  for (size_t j = (uint64_t *)*((void *)v3 + 5); v22 != j; ++v22)
  {
    uint64_t v23 = *v22 + 104;
    uint64_t v37 = *v22;
    for (uint64_t k = *(void *)(*v22 + 112); k != v23; uint64_t k = *(void *)(k + 8))
    {
      switch(*(unsigned char *)(k + 48))
      {
        case 0:
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 8))(v37);
          if (result)
          {
            if (*(unsigned char *)(k + 56)) {
              uint64_t result = (*(uint64_t (**)(void, llvm::MCAssembler *, uint64_t **, uint64_t))(**((void **)this + 1) + 104))(*((void *)this + 1), this, v2, k);
            }
          }
          continue;
        case 1:
          size_t v25 = (uint64_t *)(k + 120);
          size_t v26 = (unsigned int *)(k + 128);
          goto LABEL_25;
        case 6:
          size_t v25 = (uint64_t *)(k + 96);
          size_t v26 = (unsigned int *)(k + 104);
LABEL_25:
          uint64_t v39 = *(void *)(k + 56);
          goto LABEL_26;
        case 8:
        case 9:
        case 0xF:
          uint64_t v39 = 0;
          size_t v25 = (uint64_t *)(k + 96);
          size_t v26 = (unsigned int *)(k + 104);
          goto LABEL_26;
        case 0xE:
          uint64_t v39 = 0;
          size_t v25 = (uint64_t *)(k + 120);
          size_t v26 = (unsigned int *)(k + 128);
LABEL_26:
          uint64_t v27 = *v26;
          if (v27)
          {
            uint64_t v28 = *v25;
            uint64_t v29 = *(void *)(k + 64);
            uint64_t v30 = *(void *)(k + 72);
            uint64_t v31 = 24 * v27;
            do
            {
              memset(v41, 0, 28);
              long long v45 = 0uLL;
              DWORD2(v46) = 0;
              *(void *)&long long v46 = 0;
              uint64_t v44 = 0;
              char v43 = 0;
              int64x2_t v32 = v2;
              uint64_t v33 = llvm::MCAssembler::evaluateFixup((uint64_t)this, v2, v28, (const llvm::MCFragment *)k, (uint64_t *)&v45, &v44, &v43);
              if ((v33 & 1) == 0)
              {
                uint64_t v34 = *((void *)this + 3);
                v42[0] = v45;
                v42[1] = v46;
                (*(void (**)(uint64_t, llvm::MCAssembler *, uint64_t **, uint64_t, uint64_t, _OWORD *, uint64_t *))(*(void *)v34 + 32))(v34, this, v32, k, v28, v42, &v44);
              }
              *(_DWORD *)uint64_t v40 = HIDWORD(v45);
              *(_OWORD *)&void v40[4] = v46;
              v41[0] = v45;
              *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)v40;
              uint64_t result = (*(uint64_t (**)(void, llvm::MCAssembler *, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), this, v28, v41, v29, v30, v44, v33, v39);
              v28 += 24;
              v31 -= 24;
              uint64_t v2 = v32;
            }
            while (v31);
          }
          break;
        default:
          continue;
      }
    }
  }
  return result;
}

uint64_t llvm::MCAssembler::layoutOnce(llvm::MCAssembler *this, uint64_t **a2)
{
  uint64_t v2 = (llvm::MCSection **)*((void *)this + 4);
  int v3 = (llvm::MCSection **)*((void *)this + 5);
  if (v2 == v3)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v2;
      uint64_t v8 = v6;
      do
      {
        uint64_t v6 = v8;
        char v9 = llvm::MCAssembler::layoutSectionOnce(this, a2, v7);
        uint64_t v8 = 1;
      }
      while ((v9 & 1) != 0);
      ++v2;
    }
    while (v2 != v3);
  }
  return v6 & 1;
}

uint64_t llvm::MCAssembler::finishLayout(llvm::MCAssembler *this, llvm::MCAsmLayout *a2)
{
  uint64_t v4 = *((unsigned int *)a2 + 4);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *(void *)(*((void *)a2 + 1) + v5);
      llvm::MCAsmLayout::ensureValid(a2, *(const llvm::MCFragment **)(v7 + 104));
      llvm::MCAssembler::computeFragmentSize(this, a2, *(const llvm::MCFragment **)(v7 + 104));
      v5 += 8;
    }
    while (v6 != v5);
  }
  uint64_t v8 = *(uint64_t (**)(void))(**((void **)this + 1) + 200);

  return v8();
}

void llvm::MCAssembler::Finish(llvm::MCAssembler *this)
{
  v4[19] = *MEMORY[0x1E4F143B8];
  llvm::MCAsmLayout::MCAsmLayout((llvm::MCAsmLayout *)&v2, this);
  llvm::MCAssembler::layout(this, &v2);
  (*(void (**)(void, llvm::MCAssembler *, uint64_t **))(**((void **)this + 3) + 80))(*((void *)this + 3), this, &v2);
  MEMORY[0x1D25D9CD0](v4[16], 8);
  if (v3 != v4) {
    free(v3);
  }
}

uint64_t llvm::MCAssembler::fixupNeedsRelaxation(uint64_t a1, uint64_t a2, const llvm::MCFragment *a3, uint64_t **a4)
{
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  uint64_t v12 = 0;
  unsigned __int8 v11 = 0;
  uint64_t v8 = llvm::MCAssembler::evaluateFixup(a1, a4, a2, a3, v13, &v12, &v11);
  if (v13[0] && (*(_WORD *)(v13[0] + 1) == 30 ? (BOOL v9 = *(_DWORD *)(a2 + 12) == 1) : (BOOL v9 = 0), v9)) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const llvm::MCFragment *, uint64_t **, void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), a2, v8, v12, a3, a4, v11);
  }
}

uint64_t llvm::MCAssembler::fragmentNeedsRelaxation(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), a2 + 136, *(void *)(a2 + 56));
  if (result)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 104);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 96);
      uint64_t v9 = 24 * v7 - 24;
      do
      {
        uint64_t result = llvm::MCAssembler::fixupNeedsRelaxation(a1, v8, (const llvm::MCFragment *)a2, a3);
        if (result) {
          break;
        }
        v8 += 24;
        uint64_t v10 = v9;
        v9 -= 24;
      }
      while (v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::MCAssembler::relaxInstruction(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::MCAssembler::fragmentNeedsRelaxation(a1, a3, a2);
  if (result)
  {
    unsigned int v6 = result;
    long long v21 = *(_OWORD *)(a3 + 136);
    v22[0] = v23;
    v22[1] = (void *)0x800000000;
    if (*(_DWORD *)(a3 + 160)) {
      sub_1CBD85368((uint64_t)v22, a3 + 152);
    }
    char v24 = *(unsigned char *)(a3 + 296);
    (*(void (**)(void, long long *, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), &v21, *(void *)(a3 + 56));
    v19[0] = v20;
    v19[1] = (void *)0x400000000;
    char v15 = &v16;
    uint64_t v16 = v18;
    long long v17 = xmmword_1CD96DBF0;
    int v8 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    unsigned int v7 = &unk_1F2646FA8;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    (*(void (**)(void, long long *, void **, void **, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), &v21, &v7, v19, *(void *)(a3 + 56));
    *(_OWORD *)(a3 + 136) = v21;
    sub_1CBD85368(a3 + 152, (uint64_t)v22);
    *(unsigned char *)(a3 + 296) = v24;
    sub_1CC223970(a3 + 64, (uint64_t)&v16);
    sub_1CD6A3028(a3 + 96, (uint64_t)v19);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v7);
    if (v16 != v18) {
      free(v16);
    }
    if (v19[0] != v20) {
      free(v19[0]);
    }
    if (v22[0] != v23) {
      free(v22[0]);
    }
    return v6;
  }
  return result;
}

llvm::raw_ostream *sub_1CCBB3A20(llvm::raw_ostream *result, llvm::raw_ostream *this, unsigned int a3)
{
  uint64_t v5 = (uint64_t)result;
  int v6 = 1;
  do
  {
    uint64_t v7 = v5;
    unsigned int v8 = v6;
    char v9 = v5 & 0x7F;
    v5 >>= 7;
    uint64_t v10 = ((unint64_t)v7 >> 6) & 1;
    if (v5 != -1) {
      LODWORD(v10) = 0;
    }
    if ((unint64_t)v7 >= 0x40) {
      int v11 = v10;
    }
    else {
      int v11 = 1;
    }
    if ((v11 & (v8 >= a3)) != 0) {
      char v12 = 0;
    }
    else {
      char v12 = 0x80;
    }
    char v13 = v12 | v9;
    int v14 = (char *)*((void *)this + 4);
    if ((unint64_t)v14 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, v13);
    }
    else
    {
      *((void *)this + 4) = v14 + 1;
      *int v14 = v13;
    }
    int v6 = v8 + 1;
  }
  while (!v11);
  if (v8 < a3)
  {
    uint64_t v15 = (v7 >> 63) & 0x7F;
    if (v8 < a3 - 1)
    {
      char v16 = v15 | 0x80;
      unsigned int v17 = a3 - v6;
      do
      {
        uint64_t v18 = (char *)*((void *)this + 4);
        if ((unint64_t)v18 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, v16);
        }
        else
        {
          *((void *)this + 4) = v18 + 1;
          char *v18 = v16;
        }
        --v17;
      }
      while (v17);
    }
    size_t v19 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v19 >= *((void *)this + 3))
    {
      return llvm::raw_ostream::write(this, v15);
    }
    else
    {
      *((void *)this + 4) = v19 + 1;
      *size_t v19 = v15;
    }
  }
  return result;
}

uint64_t llvm::MCAssembler::relaxBoundaryAlign(llvm::MCAssembler *a1, llvm::MCAsmLayout *a2, uint64_t a3)
{
  if (!*(void *)(a3 + 56)) {
    return 0;
  }
  llvm::MCAsmLayout::ensureValid(a2, (const llvm::MCFragment *)a3);
  unint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(const llvm::MCFragment **)(a3 + 56);
  if (v7 == (const llvm::MCFragment *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      unint64_t v9 = llvm::MCAssembler::computeFragmentSize(a1, a2, v7);
      if (*(const llvm::MCFragment **)(*((void *)v7 + 2) + 112) == v7) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = *(const llvm::MCFragment **)v7;
      }
      v8 += v9;
    }
    while (v7 != (const llvm::MCFragment *)a3);
  }
  char v10 = *(unsigned char *)(a3 + 51);
  unint64_t v11 = v6 >> v10;
  unint64_t v12 = (v8 + v6 - 1) >> v10;
  uint64_t v13 = (v8 + v6) & ~(-1 << v10);
  unint64_t v14 = ((v6 + (1 << v10) - 1) & -(1 << v10)) - v6;
  if (v11 == v12 && v13 != 0) {
    unint64_t v14 = 0;
  }
  if (v14 == *(void *)(a3 + 64)) {
    return 0;
  }
  *(void *)(a3 + 64) = v14;
  llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)a2, (uint64_t *)a3);
  return 1;
}

BOOL llvm::MCAssembler::relaxDwarfLineAddr(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v25 = 0;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t **, char *))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8), a3, a2, &v25))
  {
    return v25 != 0;
  }
  unint64_t v6 = *a2;
  uint64_t v7 = (llvm::raw_ostream *)**a2;
  uint64_t v8 = *(void *)(a3 + 72);
  unint64_t v9 = *(unsigned char **)(a3 + 144);
  char v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v19) = 0;
  uint64_t v18 = 0;
  if (*v9 == 1)
  {
    char v10 = (unint64_t *)(v9 + 16);
  }
  else
  {
    char v10 = (unint64_t *)&v18;
    llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)v9, (uint64_t)&v16, v6, (uint64_t)a2, 0, 0, 1);
  }
  unint64_t v11 = *v10;
  uint64_t v12 = *(void *)(a3 + 136);
  *(void *)(a3 + 72) = 0;
  LODWORD(v17) = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = a3 + 64;
  int v23 = 0;
  char v16 = &unk_1F2646FA8;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  *(_DWORD *)(a3 + 104) = 0;
  unint64_t v13 = *(unsigned __int16 *)(a1 + 200) | ((unint64_t)*(unsigned __int8 *)(a1 + 202) << 16);
  uint64_t v20 = 0;
  llvm::MCDwarfLineAddr::Encode(v7, v13, v12, v11, (llvm::raw_ostream *)&v16);
  BOOL v14 = v8 != *(void *)(a3 + 72);
  char v16 = &unk_1F2646B98;
  if (v23 == 1 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8077774924);
  }
  return v14;
}

BOOL llvm::MCAssembler::relaxDwarfCallFrameFragment(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  char v23 = 0;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t **, char *))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a3, a2, &v23))
  {
    return v23 != 0;
  }
  unint64_t v6 = *a2;
  uint64_t v7 = (llvm::raw_ostream *)**a2;
  uint64_t v8 = *(void *)(a3 + 72);
  unint64_t v9 = *(unsigned char **)(a3 + 136);
  BOOL v14 = 0;
  uint64_t v15 = 0;
  LODWORD(v17) = 0;
  uint64_t v16 = 0;
  if (*v9 == 1)
  {
    char v10 = (unint64_t *)(v9 + 16);
  }
  else
  {
    char v10 = (unint64_t *)&v16;
    llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)v9, (uint64_t)&v14, v6, (uint64_t)a2, 0, 0, 1);
  }
  unint64_t v11 = *v10;
  *(void *)(a3 + 72) = 0;
  LODWORD(v15) = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = a3 + 64;
  int v21 = 0;
  BOOL v14 = &unk_1F2646FA8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(_DWORD *)(a3 + 104) = 0;
  llvm::MCDwarfFrameEmitter::EncodeAdvanceLoc(v7, v11, (llvm::raw_ostream *)&v14, v5);
  BOOL v12 = v8 != *(void *)(a3 + 72);
  BOOL v14 = &unk_1F2646B98;
  if (v21 == 1 && v16) {
    MEMORY[0x1D25D9CB0](v16, 0x1000C8077774924);
  }
  return v12;
}

BOOL llvm::MCAssembler::relaxCVInlineLineTable(llvm::MCContext **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 88);
  uint64_t CVContext = (void *)llvm::MCContext::getCVContext(*a1);
  llvm::CodeViewContext::encodeInlineLineTable(CVContext, a2, a3);
  return v5 != *(void *)(a3 + 88);
}

BOOL llvm::MCAssembler::relaxCVDefRange(llvm::MCContext **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 72);
  uint64_t CVContext = llvm::MCContext::getCVContext(*a1);
  llvm::CodeViewContext::encodeDefRange(CVContext, a2, a3);
  return v5 != *(void *)(a3 + 72);
}

uint64_t llvm::MCAssembler::relaxFragment(llvm::MCAssembler *this, uint64_t **a2, llvm::MCFragment *a3)
{
  uint64_t result = 0;
  switch(*((unsigned char *)a3 + 48))
  {
    case 6:
      uint64_t result = llvm::MCAssembler::relaxInstruction((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 8:
      uint64_t result = llvm::MCAssembler::relaxDwarfLineAddr((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 9:
      uint64_t result = llvm::MCAssembler::relaxDwarfCallFrameFragment((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 0xA:
      uint64_t result = llvm::MCAssembler::relaxLEB(0, a2, (uint64_t)a3);
      break;
    case 0xB:
      uint64_t result = llvm::MCAssembler::relaxBoundaryAlign(this, (llvm::MCAsmLayout *)a2, (uint64_t)a3);
      break;
    case 0xD:
      uint64_t v5 = *((unsigned int *)a3 + 22);
      uint64_t CVContext = (void *)llvm::MCContext::getCVContext(*(llvm::MCContext **)this);
      llvm::CodeViewContext::encodeInlineLineTable(CVContext, a2, (uint64_t)a3);
      uint64_t v9 = *((void *)a3 + 11);
      goto LABEL_16;
    case 0xE:
      uint64_t v5 = *((unsigned int *)a3 + 18);
      uint64_t v12 = llvm::MCContext::getCVContext(*(llvm::MCContext **)this);
      llvm::CodeViewContext::encodeDefRange(v12, a2, (uint64_t)a3);
      uint64_t v9 = *((void *)a3 + 9);
LABEL_16:
      uint64_t result = v5 != v9;
      break;
    case 0xF:
      uint64_t result = llvm::MCAssembler::relaxPseudoProbeAddr(0, a2, (uint64_t)a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::MCAssembler::layoutSectionOnce(llvm::MCAssembler *this, uint64_t **a2, llvm::MCSection *a3)
{
  int v3 = (uint64_t *)((char *)a3 + 104);
  uint64_t v4 = (uint64_t *)*((void *)a3 + 14);
  if (v4 == (uint64_t *)((char *)a3 + 104)) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    if ((llvm::MCAssembler::relaxFragment(this, a2, (llvm::MCFragment *)v4) & (v7 == 0)) != 0) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = (uint64_t *)v4[1];
  }
  while (v4 != v3);
  if (!v7) {
    return 0;
  }
  llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)a2, v7);
  return 1;
}

void sub_1CCBB4288(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        sub_1CB8338B8(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1CCBB42FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBF747C8(a1, v7);
      uint64_t v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBF747C8(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    unint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

double llvm::CodeViewContext::CodeViewContext(llvm::CodeViewContext *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x1000000000;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = (char *)this + 64;
  *((void *)this + 7) = 0x400000000;
  *((void *)this + 26) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 24) = (char *)this + 200;
  double result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 264) = 0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0x1000000000;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = (char *)this + 64;
  *((void *)this + 7) = 0x400000000;
  *((void *)this + 26) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 24) = (char *)this + 200;
  double result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 264) = 0;
  return result;
}

uint64_t llvm::CodeViewContext::getStringTableOffset(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  if (!__n) {
    return 0;
  }
  uint64_t v4 = *((unsigned int *)a1 + 2);
  if (v4)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    do
      int v8 = 33 * v8 + __s1[v7++];
    while (__n != v7);
    uint64_t v9 = *a1;
    uint64_t v10 = *a1 + 8 * v4 + 8;
    int v11 = 1;
    int v12 = v8;
    while (1)
    {
      uint64_t v13 = v12 & (v4 - 1);
      int v14 = *(void **)(v9 + 8 * v13);
      if (v14 != (void *)-8)
      {
        if (!v14) {
          return *(unsigned int *)(*(void *)(v9 + 8 * v4) + 8);
        }
        if (*(_DWORD *)(v10 + 4 * v13) == v8
          && __n == *v14
          && !memcmp(__s1, (char *)v14 + *((unsigned int *)a1 + 5), __n))
        {
          break;
        }
      }
      int v12 = v11 + v13;
      ++v11;
    }
    if (v13 != -1) {
      uint64_t v4 = (int)v13;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v9 = *a1;
  }
  return *(unsigned int *)(*(void *)(v9 + 8 * v4) + 8);
}

void llvm::CodeViewContext::getFunctionLineEntries(llvm::CodeViewContext *this@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  int v3 = (char *)*((void *)this + 25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v3)
  {
    uint64_t v7 = (char *)this + 200;
    do
    {
      unsigned int v8 = *((_DWORD *)v3 + 8);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = (char **)v3;
      }
      else {
        uint64_t v10 = (char **)(v3 + 8);
      }
      if (v9) {
        uint64_t v7 = v3;
      }
      int v3 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 200 && *((_DWORD *)v7 + 8) <= a2)
    {
      uint64_t v11 = *((void *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 31) - v11) >> 4) <= a2)
      {
        uint64_t v51 = 0;
      }
      else
      {
        int v12 = (_DWORD *)(v11 + 48 * a2);
        if (!*v12) {
          int v12 = 0;
        }
        uint64_t v51 = v12;
      }
      uint64_t v14 = *((void *)v7 + 5);
      uint64_t v13 = *((void *)v7 + 6);
      if (v14 != v13)
      {
        BOOL v15 = 0;
        unsigned int v16 = 0;
        uint64_t v52 = *((void *)v7 + 6);
        while (1)
        {
          uint64_t v17 = *((void *)this + 27);
          int v18 = *(_DWORD *)(v17 + 24 * v14 + 8);
          if (v18 != a2) {
            break;
          }
          char v19 = (long long *)(v17 + 24 * v14);
          unint64_t v20 = (unint64_t)a3[2];
          if ((unint64_t)v15 >= v20)
          {
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) + 1;
            if (v23 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_68;
            }
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v16) >> 3);
            if (2 * v24 > v23) {
              unint64_t v23 = 2 * v24;
            }
            if (v24 >= 0x555555555555555) {
              unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              if (v25 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_69;
              }
              size_t v26 = (char *)operator new(24 * v25);
            }
            else
            {
              size_t v26 = 0;
            }
            long long v27 = *v19;
            uint64_t v28 = &v26[8 * ((v15 - v16) >> 3)];
            *((void *)v28 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v28 = v27;
            uint64_t v29 = v28;
            if (v15 != v16)
            {
              do
              {
                long long v30 = *(_OWORD *)(v15 - 24);
                *(void *)(v29 - 9) = *(void *)(v15 - 9);
                *(_OWORD *)(v29 - 24) = v30;
                v29 -= 24;
                v15 -= 24;
              }
              while (v15 != v16);
              BOOL v15 = *a3;
            }
            uint64_t v31 = &v26[24 * v25];
            goto LABEL_37;
          }
          long long v21 = *v19;
          *((void *)v15 + 2) = *((void *)v19 + 2);
          *(_OWORD *)BOOL v15 = v21;
          uint64_t v22 = v15 + 24;
LABEL_41:
          a3[1] = v22;
          BOOL v15 = v22;
LABEL_42:
          if (++v14 == v13) {
            return;
          }
        }
        uint64_t v32 = *((void *)v51 + 3);
        uint64_t v33 = v51[10];
        uint64_t v34 = sub_1CD57516C(v32, v51[10], v18);
        if ((int *)(v32 + 16 * v33) == v34
          || (int v35 = v34[1], v16 != v15)
          && *((_DWORD *)v15 - 3) == v35
          && *((_DWORD *)v15 - 2) == v34[2]
          && v34[3] == *((unsigned __int16 *)v15 - 2))
        {
          uint64_t v13 = v52;
          goto LABEL_42;
        }
        uint64_t v36 = *(void *)(v17 + 24 * v14);
        int v37 = v34[2];
        int v38 = v34[3];
        char v39 = v50 & 0xFC;
        unint64_t v40 = (unint64_t)a3[2];
        v50 &= 0xFCu;
        if ((unint64_t)v15 >= v40)
        {
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) + 1;
          if (v41 > 0xAAAAAAAAAAAAAAALL) {
LABEL_68:
          }
            abort();
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v16) >> 3);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v41;
          }
          unint64_t v49 = v43;
          if (v43)
          {
            uint64_t v47 = *(void *)(v17 + 24 * v14);
            int v48 = v34[1];
            if (v43 > 0xAAAAAAAAAAAAAAALL) {
LABEL_69:
            }
              sub_1CB833614();
            uint64_t v44 = (char *)operator new(24 * v43);
            int v35 = v48;
            uint64_t v36 = v47;
          }
          else
          {
            uint64_t v44 = 0;
          }
          uint64_t v28 = &v44[8 * ((v15 - v16) >> 3)];
          *(void *)uint64_t v28 = v36;
          *((_DWORD *)v28 + 2) = a2;
          *((_DWORD *)v28 + 3) = v35;
          *((_DWORD *)v28 + 4) = v37;
          *((_WORD *)v28 + 10) = v38;
          v28[22] = v50;
          uint64_t v29 = v28;
          if (v16 == v15)
          {
            unint64_t v45 = v49;
          }
          else
          {
            unint64_t v45 = v49;
            do
            {
              long long v46 = *(_OWORD *)(v15 - 24);
              *(void *)(v29 - 9) = *(void *)(v15 - 9);
              *(_OWORD *)(v29 - 24) = v46;
              v29 -= 24;
              v15 -= 24;
            }
            while (v15 != v16);
            BOOL v15 = *a3;
          }
          uint64_t v31 = &v44[24 * v45];
LABEL_37:
          uint64_t v22 = v28 + 24;
          *a3 = v29;
          a3[2] = v31;
          if (v15) {
            operator delete(v15);
          }
          unsigned int v16 = v29;
        }
        else
        {
          *(void *)BOOL v15 = v36;
          *((_DWORD *)v15 + 2) = a2;
          *((_DWORD *)v15 + 3) = v35;
          *((_DWORD *)v15 + 4) = v37;
          *((_WORD *)v15 + 10) = v38;
          uint64_t v22 = v15 + 24;
          v15[22] = v39;
        }
        uint64_t v13 = v52;
        goto LABEL_41;
      }
    }
  }
}

uint64_t llvm::CodeViewContext::getLineExtent(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v4 = (char *)*((void *)this + 25);
  uint64_t v2 = (char *)this + 200;
  int v3 = v4;
  if (!v4) {
    return -1;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *((_DWORD *)v3 + 8);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (char **)v3;
    }
    else {
      unsigned int v8 = (char **)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    int v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *((_DWORD *)v5 + 8) <= a2) {
    return *((void *)v5 + 5);
  }
  else {
    return -1;
  }
}

uint64_t llvm::CodeViewContext::getLinesForExtent(llvm::CodeViewContext *this, unint64_t a2, unint64_t a3)
{
  if (a3 <= a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 27);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 28) - v3) >> 3) <= a2) {
    return 0;
  }
  else {
    return v3 + 24 * a2;
  }
}

uint64_t sub_1CCBB49F8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = **a1;
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v17 = *(_DWORD *)(v6 + 216) >> 7;
    if (v17 >= 0x1E) {
      LOBYTE(v17) = 30;
    }
    uint64_t v18 = 4096 << v17;
    unint64_t v8 = (unint64_t)operator new(4096 << v17, (std::align_val_t)8uLL);
    unsigned int v19 = *(_DWORD *)(v6 + 216);
    if (v19 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v19) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v18;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  int v9 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  *(void *)(v6 + 272) += 24;
  uint64_t v10 = *(void *)(v6 + 192);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v6 + 200) - v10)
  {
    unsigned int v20 = *(_DWORD *)(v6 + 216) >> 7;
    if (v20 >= 0x1E) {
      LOBYTE(v20) = 30;
    }
    uint64_t v21 = 4096 << v20;
    unint64_t v11 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
    unsigned int v22 = *(_DWORD *)(v6 + 216);
    if (v22 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v22) = v11;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v11 + v21;
  }
  else
  {
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v11 + 24;
  int v12 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v11 = 2;
  *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = a3;
  *(void *)(v6 + 272) += 32;
  uint64_t v13 = *(void *)(v6 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 32 > *(void *)(v6 + 200) - v13)
  {
    unsigned int v23 = *(_DWORD *)(v6 + 216) >> 7;
    if (v23 >= 0x1E) {
      LOBYTE(v23) = 30;
    }
    uint64_t v24 = 4096 << v23;
    uint64_t v14 = (uint64_t)operator new(4096 << v23, (std::align_val_t)8uLL);
    unsigned int v25 = *(_DWORD *)(v6 + 216);
    if (v25 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v25) = v14;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v14 + v24;
  }
  else
  {
    uint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v14 + 32;
  *(unsigned char *)uint64_t v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v8;
  BOOL v15 = *a1;
  v26[0] = 0;
  v26[1] = 0;
  int v28 = 0;
  uint64_t v27 = 0;
  llvm::MCExpr::evaluateAsRelocatableImpl(v14, (uint64_t)v26, v15, (uint64_t)a1, 0, 0, 1);
  return v27;
}

uint64_t sub_1CCBB4CD8(uint64_t result, void *a2)
{
  if (result <= 0x7F)
  {
    uint64_t v2 = a2[1];
    if ((unint64_t)(v2 + 1) <= a2[2])
    {
LABEL_3:
      *(unsigned char *)(*a2 + v2) = result;
      ++a2[1];
      return result;
    }
LABEL_14:
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (!(result >> 14))
  {
    uint64_t v3 = a2[1];
    if ((unint64_t)(v3 + 1) > a2[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a2 + v3) = BYTE1(result) | 0x80;
    goto LABEL_13;
  }
  if (!(result >> 29))
  {
    uint64_t v4 = a2[1];
    if ((unint64_t)(v4 + 1) > a2[2]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a2 + v4) = BYTE3(result) | 0xC0;
    uint64_t v5 = a2[1];
    unint64_t v6 = a2[2];
    a2[1] = v5 + 1;
    if (v5 + 2 > v6) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a2 + v5 + 1) = BYTE2(result);
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    a2[1] = v7 + 1;
    if (v7 + 2 > v8) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(*a2 + v7 + 1) = BYTE1(result);
LABEL_13:
    uint64_t v9 = a2[1];
    unint64_t v10 = a2[2];
    uint64_t v2 = v9 + 1;
    a2[1] = v9 + 1;
    if (v9 + 2 <= v10) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }
  return result;
}

void llvm::CodeViewContext::encodeDefRange(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  v82[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **a2;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 128) = 0;
  int v72 = 0;
  char v76 = 0;
  uint64_t v77 = 0;
  uint64_t v79 = a3 + 64;
  int v78 = 0;
  std::string::size_type v71 = &unk_1F2646FA8;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  char v80 = v82;
  uint64_t v81 = 0x400000000;
  uint64_t v4 = *(unsigned int *)(a3 + 240);
  if (v4)
  {
    unint64_t v6 = a2;
    uint64_t v7 = 0;
    unint64_t v8 = *(uint64_t **)(a3 + 232);
    uint64_t v9 = &v8[2 * v4];
    do
    {
      uint64_t v11 = *v8;
      uint64_t v10 = v8[1];
      if (v7) {
        unsigned int v12 = sub_1CCBB49F8(v6, v7, *v8);
      }
      else {
        unsigned int v12 = 0;
      }
      uint64_t v13 = sub_1CCBB49F8(v6, v11, v10);
      if (v81 >= (unint64_t)HIDWORD(v81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v80[v81] = v12 | (unint64_t)(v13 << 32);
      LODWORD(v81) = v81 + 1;
      v8 += 2;
      uint64_t v7 = v10;
    }
    while (v8 != v9);
    uint64_t v14 = *(unsigned int *)(a3 + 240);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v60 = *(unsigned int *)(a3 + 240);
      do
      {
        unsigned int v16 = (char *)&v80[v15];
        unsigned int v17 = *((_DWORD *)v16 + 1);
        uint64_t v18 = v15 + 1;
        if (v15 + 1 == v14)
        {
LABEL_17:
          uint64_t v20 = v14;
        }
        else
        {
          unsigned int v19 = v16 + 12;
          uint64_t v20 = v15 + 1;
          while (1)
          {
            unsigned int v21 = *(v19 - 1) + v17 + *v19;
            if (v21 > 0xF000) {
              break;
            }
            v19 += 2;
            ++v20;
            unsigned int v17 = v21;
            if (v14 == v20)
            {
              unsigned int v17 = v21;
              goto LABEL_17;
            }
          }
        }
        unsigned int v22 = 0;
        uint64_t v61 = v15;
        uint64_t v62 = v20;
        __int16 v63 = 4 * (v20 + ~(_WORD)v15) + 8;
        uint64_t v64 = *(void *)(*(void *)(a3 + 232) + 16 * v15);
        do
        {
          if (v17 >= 0xF000) {
            int v23 = 61440;
          }
          else {
            int v23 = v17;
          }
          *(void *)(v3 + 272) += 24;
          uint64_t v24 = *(void *)(v3 + 192);
          if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) - v24 + 24 > *(void *)(v3 + 200) - v24)
          {
            unsigned int v47 = *(_DWORD *)(v3 + 216) >> 7;
            if (v47 >= 0x1E) {
              LOBYTE(v47) = 30;
            }
            uint64_t v48 = 4096 << v47;
            unint64_t v25 = (unint64_t)operator new(4096 << v47, (std::align_val_t)8uLL);
            unint64_t v49 = *(unsigned int *)(v3 + 216);
            if (v49 >= *(unsigned int *)(v3 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v3 + 208) + 8 * v49) = v25;
            ++*(_DWORD *)(v3 + 216);
            *(void *)(v3 + 200) = v25 + v48;
          }
          else
          {
            unint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          size_t v26 = v6;
          *(void *)(v3 + 192) = v25 + 24;
          int v27 = *(unsigned __int8 *)(*(void *)(v3 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v25 = 2;
          *(_DWORD *)(v25 + 1) = v27 | (*(unsigned __int8 *)(v25 + 4) << 24);
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + 16) = v64;
          *(void *)(v3 + 272) += 24;
          uint64_t v28 = *(void *)(v3 + 192);
          if (((v28 + 7) & 0xFFFFFFFFFFFFFFF8) - v28 + 24 > *(void *)(v3 + 200) - v28)
          {
            unsigned int v50 = *(_DWORD *)(v3 + 216) >> 7;
            if (v50 >= 0x1E) {
              LOBYTE(v50) = 30;
            }
            uint64_t v51 = 4096 << v50;
            unint64_t v29 = (unint64_t)operator new(4096 << v50, (std::align_val_t)8uLL);
            unint64_t v52 = *(unsigned int *)(v3 + 216);
            if (v52 >= *(unsigned int *)(v3 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v3 + 208) + 8 * v52) = v29;
            ++*(_DWORD *)(v3 + 216);
            *(void *)(v3 + 200) = v29 + v51;
          }
          else
          {
            unint64_t v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v3 + 192) = v29 + 24;
          *(unsigned char *)unint64_t v29 = 1;
          *(_DWORD *)(v29 + 1) = *(unsigned __int8 *)(v29 + 4) << 24;
          *(void *)(v29 + 8) = 0;
          *(void *)(v29 + 16) = v22;
          *(void *)(v3 + 272) += 32;
          uint64_t v30 = *(void *)(v3 + 192);
          if (((v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v30 + 32 > *(void *)(v3 + 200) - v30)
          {
            unsigned int v53 = *(_DWORD *)(v3 + 216) >> 7;
            if (v53 >= 0x1E) {
              LOBYTE(v53) = 30;
            }
            uint64_t v59 = 4096 << v53;
            uint64_t v31 = (uint64_t)operator new(4096 << v53, (std::align_val_t)8uLL);
            unint64_t v54 = *(unsigned int *)(v3 + 216);
            if (v54 >= *(unsigned int *)(v3 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v3 + 208) + 8 * v54) = v31;
            ++*(_DWORD *)(v3 + 216);
            *(void *)(v3 + 200) = v31 + v59;
          }
          else
          {
            uint64_t v31 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v3 + 192) = v31 + 32;
          *(unsigned char *)uint64_t v31 = 0;
          *(_DWORD *)(v31 + 1) = *(unsigned __int8 *)(v31 + 4) << 24;
          *(void *)(v31 + 8) = 0;
          *(void *)(v31 + 16) = v25;
          *(void *)(v31 + 24) = v29;
          *(void *)uint64_t v67 = 0;
          uint64_t v68 = 0;
          int v70 = 0;
          uint64_t v69 = 0;
          unint64_t v6 = v26;
          llvm::MCExpr::evaluateAsRelocatableImpl(v31, (uint64_t)v67, *v26, (uint64_t)v26, 0, 0, 0);
          uint64_t v33 = *(const void **)(a3 + 280);
          size_t v32 = *(void *)(a3 + 288);
          LOWORD(v65) = v63 + v32;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, (const char *)&v65, 2uLL);
          if (v32 <= v74 - (uint64_t)v75)
          {
            if (v32)
            {
              memcpy(v75, v33, v32);
              v75 += v32;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v71, (const char *)v33, v32);
          }
          uint64_t v34 = *(void *)(a3 + 72);
          *(void *)&long long v65 = v31;
          *((void *)&v65 + 1) = v34 | 0x1400000000;
          uint64_t v66 = 0;
          unsigned int v35 = *(_DWORD *)(a3 + 128);
          unint64_t v36 = *(void *)(a3 + 120);
          if (v35 >= *(_DWORD *)(a3 + 132))
          {
            BOOL v45 = v36 + 24 * v35 > (unint64_t)&v65;
            if (v36 > (unint64_t)&v65 || !v45) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v37 = v36 + 24 * *(unsigned int *)(a3 + 128);
          long long v38 = v65;
          *(void *)(v37 + 16) = v66;
          *(_OWORD *)uint64_t v37 = v38;
          ++*(_DWORD *)(a3 + 128);
          LODWORD(v65) = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, (const char *)&v65, 4uLL);
          uint64_t v39 = *(void *)(a3 + 72);
          *(void *)&long long v65 = v31;
          *((void *)&v65 + 1) = v39 | 0x1300000000;
          uint64_t v66 = 0;
          unsigned int v40 = *(_DWORD *)(a3 + 128);
          unint64_t v41 = *(void *)(a3 + 120);
          if (v40 >= *(_DWORD *)(a3 + 132))
          {
            BOOL v46 = v41 + 24 * v40 > (unint64_t)&v65;
            if (v41 > (unint64_t)&v65 || !v46) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v42 = v41 + 24 * *(unsigned int *)(a3 + 128);
          long long v43 = v65;
          *(void *)(v42 + 16) = v66;
          *(_OWORD *)uint64_t v42 = v43;
          ++*(_DWORD *)(a3 + 128);
          LOWORD(v65) = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, (const char *)&v65, 2uLL);
          LOWORD(v65) = v23;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, (const char *)&v65, 2uLL);
          v22 += v23;
          BOOL v44 = v17 > 0xF000;
          v17 -= v23;
        }
        while (v44);
        if (v18 != v62)
        {
          uint64_t v55 = v61;
          int v56 = HIDWORD(v80[v61]);
          do
          {
            int v57 = v80[v55 + 1];
            int v58 = HIDWORD(v80[v55 + 1]);
            *(_WORD *)uint64_t v67 = v56;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v71, v67, 2uLL);
            *(_WORD *)uint64_t v67 = v57;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v71, v67, 2uLL);
            v56 += v57 + v58;
            ++v18;
            ++v55;
          }
          while (v62 != v18);
          uint64_t v18 = v62;
        }
        uint64_t v15 = v18;
        uint64_t v14 = v60;
      }
      while (v18 != v60);
    }
  }
  if (v80 != v82) {
    free(v80);
  }
  std::string::size_type v71 = &unk_1F2646B98;
  if (v78 == 1)
  {
    if (v73) {
      MEMORY[0x1D25D9CB0](v73, 0x1000C8077774924);
    }
  }
}

void *sub_1CCBB5624(void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    do
    {
      uint64_t v4 = v2 - 48;
      double result = (void *)MEMORY[0x1D25D9CD0](*(void *)(v2 - 24), 4);
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_1CCBB5678(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(_DWORD **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *uint64_t v4 = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    unsigned int v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v7 = *(_DWORD *)(result + 16);
      if (v7)
      {
        int v8 = v7 - 1;
        unsigned int v9 = (v7 - 1) & (37 * v6);
        uint64_t v10 = *(void *)result + 16 * v9;
        int v11 = *(_DWORD *)v10;
        if (v6 != *(_DWORD *)v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -1)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -2;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v8;
            uint64_t v10 = *(void *)result + 16 * (v15 & v8);
            int v11 = *(_DWORD *)v10;
            if (v6 == *(_DWORD *)v10) {
              goto LABEL_18;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
LABEL_18:
      *(_DWORD *)uint64_t v10 = v6;
      uint64_t v16 = *(void *)(a2 + 1);
      *(_DWORD *)(v10 + 12) = a2[3];
      *(void *)(v10 + 4) = v16;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

char *sub_1CCBB5760(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    unsigned int v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = &v9[24 * v4];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  int v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      long long v12 = *(_OWORD *)(v2 - 24);
      *(void *)(v10 - 9) = *(void *)(v2 - 9);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v11;
}

void sub_1CCBB58A4(llvm *a1)
{
  uint64_t v2 = (llvm::raw_ostream *)llvm::errs(a1);

  llvm::SMDiagnostic::print(a1, 0, v2, 1, 1);
}

_DWORD *llvm::MCContext::reset(llvm::MCContext *this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::SourceMgr *)*((void *)this + 10);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  if (v2)
  {
    llvm::SourceMgr::~SourceMgr(v2);
    MEMORY[0x1D25D9CE0]();
  }
  *((void *)this + 12) = *((void *)this + 11);
  v45[0] = &unk_1F262E228;
  v45[1] = sub_1CCBB58A4;
  BOOL v46 = v45;
  sub_1CBF4266C(v45, (void *)this + 14);
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
  }
  else if (v46)
  {
    (*(void (**)(void))(*v46 + 40))();
  }
  sub_1CCBB5E08((unint64_t)this + 288);
  sub_1CCBB5F84((unint64_t)this + 384);
  sub_1CCBB6100((unint64_t)this + 576);
  sub_1CCBB627C((unint64_t)this + 480);
  sub_1CCBB6498((unint64_t)this + 768);
  sub_1CCBB6614((unint64_t)this + 864);
  sub_1CCBB6790((uint64_t)this + 960);
  sub_1CCBB6100((unint64_t)this + 672);
  sub_1CCBB692C((uint64_t)this + 1848);
  if (*((_DWORD *)this + 289))
  {
    uint64_t v42 = *((unsigned int *)this + 288);
    if (v42)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 8 * v42;
      do
      {
        *(void *)(*((void *)this + 143) + v43) = 0;
        v43 += 8;
      }
      while (v44 != v43);
    }
    *(void *)((char *)this + 1156) = 0;
  }
  if (*((_DWORD *)this + 281))
  {
    uint64_t v3 = *((unsigned int *)this + 280);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 8 * v3;
      do
      {
        *(void *)(*((void *)this + 139) + v4) = 0;
        v4 += 8;
      }
      while (v5 != v4);
    }
    *(void *)((char *)this + 1124) = 0;
  }
  if (*((_DWORD *)this + 267))
  {
    uint64_t v6 = *((unsigned int *)this + 266);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v6;
      do
      {
        *(void *)(*((void *)this + 132) + v7) = 0;
        v7 += 8;
      }
      while (v8 != v7);
    }
    *(void *)((char *)this + 1068) = 0;
  }
  uint64_t v9 = *((unsigned int *)this + 66);
  if (v9)
  {
    uint64_t v31 = (uint64_t *)*((void *)this + 32);
    uint64_t v32 = 16 * v9;
    do
    {
      uint64_t v33 = *v31;
      v31 += 2;
      MEMORY[0x1D25D9CD0](v33, 8);
      v32 -= 16;
    }
    while (v32);
  }
  *((_DWORD *)this + 66) = 0;
  uint64_t v10 = *((unsigned int *)this + 54);
  if (v10)
  {
    *((void *)this + 34) = 0;
    int v11 = (void *)*((void *)this + 26);
    uint64_t v12 = *v11 + 4096;
    *((void *)this + 24) = *v11;
    *((void *)this + 25) = v12;
    if (v10 != 1)
    {
      uint64_t v28 = v11 + 1;
      uint64_t v29 = 8 * v10 - 8;
      do
      {
        uint64_t v30 = *v28++;
        MEMORY[0x1D25D9CD0](v30, 8);
        v29 -= 8;
      }
      while (v29);
    }
    *((_DWORD *)this + 54) = 1;
  }
  int v13 = *((_DWORD *)this + 304);
  if (v13 || *((_DWORD *)this + 305))
  {
    uint64_t v34 = (_DWORD *)((char *)this + 1208);
    uint64_t v35 = *((unsigned int *)this + 306);
    if (v35 > 4 * v13 && v35 >= 0x41)
    {
      sub_1CD569898(v34);
    }
    else
    {
      if (v35)
      {
        unint64_t v36 = *(_DWORD **)v34;
        uint64_t v37 = 16 * v35;
        do
        {
          *unint64_t v36 = -1;
          v36 += 4;
          v37 -= 16;
        }
        while (v37);
      }
      *((void *)this + 152) = 0;
    }
  }
  *((void *)this + 160) = 0;
  if (*((char *)this + 1471) < 0)
  {
    **((unsigned char **)this + 181) = 0;
    *((void *)this + 182) = 0;
  }
  else
  {
    *((unsigned char *)this + 1448) = 0;
    *((unsigned char *)this + 1471) = 0;
  }
  sub_1CCBB90A0(*((char **)this + 185));
  *((void *)this + 184) = (char *)this + 1480;
  *((void *)this + 186) = 0;
  *((void *)this + 185) = 0;
  int v14 = *((_DWORD *)this + 382);
  if (v14 || *((_DWORD *)this + 383))
  {
    long long v38 = (_DWORD *)((char *)this + 1520);
    uint64_t v39 = *((unsigned int *)this + 384);
    if (v39 > 4 * v14 && v39 >= 0x41)
    {
      sub_1CD42616C(v38);
    }
    else
    {
      if (v39)
      {
        unsigned int v40 = *(void **)v38;
        uint64_t v41 = 8 * v39;
        do
        {
          *v40++ = -4096;
          v41 -= 8;
        }
        while (v41);
      }
      *((void *)this + 191) = 0;
    }
  }
  *((void *)this + 194) = *((void *)this + 193);
  *((void *)this + 197) = *((void *)this + 196);
  *((_DWORD *)this + 408) = 0;
  *((void *)this + 187) = 0;
  *((void *)this + 188) = 0x10000;
  *(_OWORD *)((char *)this + 1592) = 0u;
  unsigned int v15 = (llvm::CodeViewContext *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v15)
  {
    llvm::CodeViewContext::~CodeViewContext(v15);
    MEMORY[0x1D25D9CE0]();
  }
  if (*((_DWORD *)this + 419))
  {
    uint64_t v16 = *((unsigned int *)this + 418);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v16;
      do
      {
        uint64_t v19 = *((void *)this + 208);
        uint64_t v20 = *(void *)(v19 + v17);
        if (v20) {
          BOOL v21 = v20 == -8;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21) {
          MEMORY[0x1D25D9CD0]();
        }
        *(void *)(v19 + v17) = 0;
        v17 += 8;
      }
      while (v18 != v17);
    }
    *(void *)((char *)this + 1676) = 0;
  }
  sub_1CCBB9180(*((char **)this + 213));
  *((void *)this + 212) = (char *)this + 1704;
  *((void *)this + 214) = 0;
  *((void *)this + 213) = 0;
  sub_1CCBB9180(*((char **)this + 219));
  *((void *)this + 218) = (char *)this + 1752;
  *((void *)this + 220) = 0;
  *((void *)this + 219) = 0;
  sub_1CCBB9180(*((char **)this + 216));
  *((void *)this + 215) = (char *)this + 1728;
  *((void *)this + 217) = 0;
  *((void *)this + 216) = 0;
  sub_1CCBB9180(*((char **)this + 222));
  *((void *)this + 221) = (char *)this + 1776;
  *((void *)this + 223) = 0;
  *((void *)this + 222) = 0;
  sub_1CCBB9180(*((char **)this + 225));
  *((void *)this + 224) = (char *)this + 1800;
  *((void *)this + 226) = 0;
  *((void *)this + 225) = 0;
  sub_1CCBB9180(*((char **)this + 251));
  *((void *)this + 250) = (char *)this + 2008;
  *((void *)this + 252) = 0;
  *((void *)this + 251) = 0;
  double result = sub_1CCBB9310((_DWORD *)this + 506);
  if (*((_DWORD *)this + 297))
  {
    uint64_t v23 = *((unsigned int *)this + 296);
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 8 * v23;
      do
      {
        uint64_t v26 = *((void *)this + 147);
        double result = *(_DWORD **)(v26 + v24);
        if (result) {
          BOOL v27 = result + 2 == 0;
        }
        else {
          BOOL v27 = 1;
        }
        if (!v27) {
          double result = (_DWORD *)MEMORY[0x1D25D9CD0]();
        }
        *(void *)(v26 + v24) = 0;
        v24 += 8;
      }
      while (v25 != v24);
    }
    *(void *)((char *)this + 1188) = 0;
  }
  *((unsigned char *)this + 1627) = 1;
  *((_WORD *)this + 756) = 0;
  *((_DWORD *)this + 379) = 0;
  *((unsigned char *)this + 1960) = 0;
  return result;
}

unint64_t sub_1CCBB5E08(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      double result = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = result + 248;
      while (v16 <= v15)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v16 = v17 + 496;
        double result = v17 + 248;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      double result = (*v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *v18 + v18[1];
      unint64_t v21 = result + 248;
      while (v21 <= v20)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v21 = v22 + 496;
        double result = v22 + 248;
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(v1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(v1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)unint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t sub_1CCBB5F84(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      double result = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = result + 256;
      while (v16 <= v15)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v16 = v17 + 512;
        double result = v17 + 256;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      double result = (*v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *v18 + v18[1];
      unint64_t v21 = result + 256;
      while (v21 <= v20)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v21 = v22 + 512;
        double result = v22 + 256;
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(v1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(v1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)unint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t sub_1CCBB6100(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      double result = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = result + 224;
      while (v16 <= v15)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v16 = v17 + 448;
        double result = v17 + 224;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      double result = (*v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *v18 + v18[1];
      unint64_t v21 = result + 224;
      while (v21 <= v20)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v21 = v22 + 448;
        double result = v22 + 224;
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(v1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(v1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)unint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t sub_1CCBB627C(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(result + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(v1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v8 = *(void *)v1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (void *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = v9 + 31;
      while ((unint64_t)v10 <= v8)
      {
        int v11 = v10;
        *uint64_t v9 = &unk_1F262FAC8;
        uint64_t v12 = (void *)v9[19];
        if (v12 != v9 + 21)
        {
          uint64_t v24 = v9;
          free(v12);
          uint64_t v9 = v24;
        }
        uint64_t v13 = (void *)v9[15];
        if (v13 != v9 + 17)
        {
          uint64_t v25 = v9;
          free(v13);
          uint64_t v9 = v25;
        }
        uint64_t v14 = v9 + 13;
        double result = v9[14];
        if ((void *)result != v9 + 13)
        {
          do
          {
            uint64_t v15 = *(void *)result;
            unint64_t v16 = *(void **)(result + 8);
            *unint64_t v16 = *(void *)result;
            *(void *)(v15 + 8) = v16;
            *(void *)double result = 0;
            *(void *)(result + 8) = 0;
            llvm::MCFragment::destroy(result);
            double result = (unint64_t)v16;
          }
          while (v16 != v14);
        }
        uint64_t v10 = v11 + 31;
        uint64_t v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v17 = *(unsigned int *)(v1 + 72);
  if (v17)
  {
    uint64_t v26 = *(void **)(v1 + 64);
    BOOL v27 = &v26[2 * v17];
    do
    {
      double result = (*v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v28 = *v26 + v26[1];
      unint64_t v29 = result + 248;
      while (v29 <= v28)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v29 = v30 + 496;
        double result = v30 + 248;
      }
      v26 += 2;
    }
    while (v26 != v27);
    uint64_t v31 = *(unsigned int *)(v1 + 72);
    if (v31)
    {
      uint64_t v32 = *(uint64_t **)(v1 + 64);
      uint64_t v33 = 16 * v31;
      do
      {
        uint64_t v34 = *v32;
        v32 += 2;
        double result = MEMORY[0x1D25D9CD0](v34, 8);
        v33 -= 16;
      }
      while (v33);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v18 = *(unsigned int *)(v1 + 24);
  if (v18)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v19 = *(void **)(v1 + 16);
    uint64_t v20 = *v19 + 4096;
    *(void *)unint64_t v1 = *v19;
    *(void *)(v1 + 8) = v20;
    if (v18 != 1)
    {
      unint64_t v21 = v19 + 1;
      uint64_t v22 = 8 * v18 - 8;
      do
      {
        uint64_t v23 = *v21++;
        double result = MEMORY[0x1D25D9CD0](v23, 8);
        v22 -= 8;
      }
      while (v22);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t sub_1CCBB6498(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      double result = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = result + 264;
      while (v16 <= v15)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v16 = v17 + 528;
        double result = v17 + 264;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      double result = (*v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *v18 + v18[1];
      unint64_t v21 = result + 264;
      while (v21 <= v20)
      {
        llvm::MCSection::~MCSection((llvm::MCSection *)result);
        unint64_t v21 = v22 + 528;
        double result = v22 + 264;
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(v1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(v1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)unint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t sub_1CCBB6614(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      double result = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = result + 272;
      while (v16 <= v15)
      {
        llvm::MCSectionXCOFF::~MCSectionXCOFF((llvm::MCSectionXCOFF *)result);
        unint64_t v16 = v17 + 544;
        double result = v17 + 272;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(v1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      double result = (*v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *v18 + v18[1];
      unint64_t v21 = result + 272;
      while (v21 <= v20)
      {
        llvm::MCSectionXCOFF::~MCSectionXCOFF((llvm::MCSectionXCOFF *)result);
        unint64_t v21 = v22 + 544;
        double result = v22 + 272;
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(v1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(v1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)unint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

void sub_1CCBB6790(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(a1 + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v15 = *(void *)a1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      for (unint64_t i = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 168; i <= v15; i += 168)
      {
        uint64_t v17 = *(void **)(i - 152);
        if ((void *)(i - 136) != v17) {
          free(v17);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3)
  {
    uint64_t v18 = *(void **)(a1 + 64);
    uint64_t v19 = &v18[2 * v3];
    do
    {
      unint64_t v20 = *v18 + v18[1];
      for (unint64_t j = ((*v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 168; j <= v20; j += 168)
      {
        uint64_t v22 = *(void **)(j - 152);
        if ((void *)(j - 136) != v22) {
          free(v22);
        }
      }
      v18 += 2;
    }
    while (v18 != v19);
    uint64_t v23 = *(unsigned int *)(a1 + 72);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)(a1 + 64);
      uint64_t v25 = 16 * v23;
      do
      {
        uint64_t v26 = *v24;
        v24 += 2;
        MEMORY[0x1D25D9CD0](v26, 8);
        v25 -= 16;
      }
      while (v25);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 80) = 0;
    uint64_t v5 = *(void **)(a1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)a1 = *v5;
    *(void *)(a1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

uint64_t sub_1CCBB692C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v10 = *(uint64_t **)(result + 16);
    int v11 = &v10[v2];
    do
    {
      uint64_t v12 = *(void *)(v1 + 16);
      uint64_t v13 = *v10;
      if (*v10 == *(void *)(v12 + 8 * *(unsigned int *)(v1 + 24) - 8))
      {
        unint64_t v15 = *(void *)v1;
      }
      else
      {
        uint64_t v14 = (((unint64_t)v10 - v12) >> 10) & 0x1FFFFFF;
        if (v14 >= 0x1E) {
          LOBYTE(v14) = 30;
        }
        unint64_t v15 = v13 + (4096 << v14);
      }
      unint64_t v16 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v16 + 256 <= v15)
      {
        uint64_t v17 = (uint64_t (***)(void))((v13 + 7) & 0xFFFFFFFFFFFFFFF8);
        do
        {
          double result = (**v17)(v17);
          uint64_t v18 = v17 + 64;
          v17 += 32;
          v16 += 256;
        }
        while ((unint64_t)v18 <= v15);
      }
      ++v10;
    }
    while (v10 != v11);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 72);
  if (v3)
  {
    uint64_t v19 = *(void **)(v1 + 64);
    unint64_t v20 = &v19[2 * v3];
    do
    {
      unint64_t v21 = (*v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v22 = *v19 + v19[1];
      if (v21 + 256 <= v22)
      {
        uint64_t v23 = (uint64_t (***)(void))((*v19 + 7) & 0xFFFFFFFFFFFFFFF8);
        do
        {
          double result = (**v23)(v23);
          uint64_t v24 = v23 + 64;
          v23 += 32;
          v21 += 256;
        }
        while ((unint64_t)v24 <= v22);
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v25 = *(unsigned int *)(v1 + 72);
    if (v25)
    {
      uint64_t v26 = *(uint64_t **)(v1 + 64);
      uint64_t v27 = 16 * v25;
      do
      {
        uint64_t v28 = *v26;
        v26 += 2;
        double result = MEMORY[0x1D25D9CD0](v28, 8);
        v27 -= 16;
      }
      while (v27);
    }
  }
  *(_DWORD *)(v1 + 72) = 0;
  uint64_t v4 = *(unsigned int *)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v5 = *(void **)(v1 + 16);
    uint64_t v6 = *v5 + 4096;
    *(void *)uint64_t v1 = *v5;
    *(void *)(v1 + 8) = v6;
    if (v4 != 1)
    {
      uint64_t v7 = v5 + 1;
      uint64_t v8 = 8 * v4 - 8;
      do
      {
        uint64_t v9 = *v7++;
        double result = MEMORY[0x1D25D9CD0](v9, 8);
        v8 -= 8;
      }
      while (v8);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::MCContext::createMCInst(llvm::MCContext *this)
{
  *((void *)this + 130) += 168;
  uint64_t v2 = *((void *)this + 120);
  if (((v2 + 7) & 0xFFFFFFFFFFFFFFF8) - v2 + 168 > *((void *)this + 121) - v2)
  {
    unsigned int v5 = *((_DWORD *)this + 246) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    unint64_t v3 = (unint64_t)operator new(4096 << v5, (std::align_val_t)8uLL);
    unsigned int v7 = *((_DWORD *)this + 246);
    if (v7 >= *((_DWORD *)this + 247)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 122) + 8 * v7) = v3;
    ++*((_DWORD *)this + 246);
    *((void *)this + 121) = v3 + v6;
  }
  else
  {
    unint64_t v3 = (v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 120) = v3 + 168;
  *(void *)unint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = v3 + 32;
  *(void *)(v3 + 24) = 0x800000000;
  *(unsigned char *)(v3 + 160) = 0;
  return v3;
}

uint64_t llvm::MCContext::getOrCreateSymbol(llvm::MCContext *this, unsigned __int8 ***a2)
{
  v43[16] = *MEMORY[0x1E4F143B8];
  uint64_t v41 = v43;
  long long v42 = xmmword_1CFAC3020;
  char v4 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    size_t v5 = 0;
    uint64_t v6 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        uint64_t v6 = (unsigned __int8 *)*a2;
        if (*a2) {
          size_t v5 = strlen((const char *)*a2);
        }
        else {
          size_t v5 = 0;
        }
        break;
      case 4:
        char v29 = *((unsigned char *)*a2 + 23);
        if (v29 >= 0) {
          uint64_t v6 = (unsigned __int8 *)*a2;
        }
        else {
          uint64_t v6 = **a2;
        }
        if (v29 >= 0) {
          size_t v5 = v29 & 0x7F;
        }
        else {
          size_t v5 = (size_t)(*a2)[1];
        }
        break;
      case 5:
        uint64_t v6 = (unsigned __int8 *)*a2;
        size_t v5 = (size_t)a2[1];
        break;
      default:
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    int v33 = 0;
    char v37 = 0;
    uint64_t v38 = 0;
    unsigned int v40 = &v41;
    int v39 = 0;
    uint64_t v32 = &unk_1F2646FA8;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v28 = llvm::Twine::printOneChild(this, (llvm::raw_ostream *)&v32, (uint64_t)*a2, (size_t)a2[1], v4);
    llvm::Twine::printOneChild(v28, (llvm::raw_ostream *)&v32, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    uint64_t v32 = &unk_1F2646B98;
    if (v39 == 1 && v34) {
      MEMORY[0x1D25D9CB0](v34, 0x1000C8077774924);
    }
    uint64_t v6 = (unsigned __int8 *)v41;
    size_t v5 = v42;
  }
  unsigned int v7 = *((_DWORD *)this + 266);
  if (!v7)
  {
    *(void *)((char *)this + 1068) = 0;
    uint64_t v30 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v30) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v30[16] = 2;
    *((void *)this + 132) = v30;
    unsigned int v7 = 16;
    *((_DWORD *)this + 266) = 16;
  }
  __s1 = v6;
  int v8 = 0;
  if (v5)
  {
    size_t v9 = v5;
    do
    {
      int v10 = *v6++;
      int v8 = 33 * v8 + v10;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = *((void *)this + 132);
  unsigned int v12 = v7 - 1;
  uint64_t v13 = v11 + 8 * v7 + 8;
  int v14 = -1;
  int v15 = 1;
  int v16 = v8;
  while (1)
  {
    uint64_t v17 = v16 & v12;
    uint64_t v18 = *(void **)(v11 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == (void *)-8)
    {
      if (v14 == -1) {
        int v14 = v16 & v12;
      }
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v8 {
           && v5 == *v18
    }
           && (!v5 || !memcmp(__s1, (char *)v18 + *((unsigned int *)this + 269), v5)))
    {
      goto LABEL_22;
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v19 = v14;
  if (v14 == -1)
  {
    uint64_t v19 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v8;
  uint64_t v18 = *(void **)(v11 + 8 * v17);
LABEL_22:
  if (v18)
  {
    uint64_t v23 = (unsigned __int8 *)__s1;
    if (v18 != (void *)-8) {
      goto LABEL_30;
    }
    --*((_DWORD *)this + 268);
  }
  uint64_t v20 = sub_1CB906F34(*((uint64_t **)this + 135), v5 + 17, 3);
  unint64_t v21 = (void *)v20;
  uint64_t v22 = v20 + 16;
  uint64_t v23 = (unsigned __int8 *)__s1;
  if (v5) {
    memcpy((void *)(v20 + 16), __s1, v5);
  }
  *(unsigned char *)(v22 + v5) = 0;
  *unint64_t v21 = v5;
  v21[1] = 0;
  *(void *)(v11 + 8 * v17) = v21;
  ++*((_DWORD *)this + 267);
  for (unint64_t i = (void **)(*((void *)this + 132)
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::MCContext *)((char *)this + 1056), v17));
        ;
        ++i)
  {
    uint64_t v18 = *i;
    if (*i && v18 + 1 != 0) {
      break;
    }
  }
LABEL_30:
  uint64_t Symbol = v18[1];
  if (!Symbol)
  {
    uint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)this, v23, v5, 0, 0);
    v18[1] = Symbol;
  }
  if (v41 != v43) {
    free(v41);
  }
  return Symbol;
}

uint64_t llvm::MCContext::createSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4, int a5)
{
  uint64_t v7 = a1;
  v74[16] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (!*(unsigned char *)(a1 + 1628))
    {
      return llvm::MCContext::createSymbolImpl(a1, 0, 1);
    }
    goto LABEL_93;
  }
  if (*(unsigned char *)(a1 + 1627))
  {
    uint64_t v9 = *(void *)(a1 + 152);
    size_t v10 = *(void *)(v9 + 96);
    if (v10 - 1 < a3) {
      goto LABEL_8;
    }
    if (a3 >= v10)
    {
      if (!v10)
      {
LABEL_93:
        BOOL v11 = 1;
        goto LABEL_9;
      }
LABEL_8:
      BOOL v11 = memcmp(a2, *(const void **)(v9 + 88), v10) == 0;
      goto LABEL_9;
    }
  }
  BOOL v11 = 0;
LABEL_9:
  long long __dst = v74;
  long long v73 = xmmword_1CFAC3020;
  if (a3 <= 0x80 && a3)
  {
    size_t v12 = a3;
    memcpy(__dst, a2, a3);
    uint64_t v13 = v73;
  }
  else
  {
    if (a3 >= 0x81) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v13 = 0;
    size_t v12 = 0;
  }
  *(void *)&long long v73 = v13 + v12;
  unsigned int v14 = *(_DWORD *)(v7 + 1184);
  if (!v14)
  {
    *(void *)(v7 + 1188) = 0;
    int v56 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v56) {
LABEL_90:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v56[16] = 2;
    *(void *)(v7 + 1176) = v56;
    unsigned int v14 = 16;
    *(_DWORD *)(v7 + 1184) = 16;
    size_t v12 = a3;
  }
  int v58 = v11;
  int __src = a4;
  int v15 = 0;
  if (v12)
  {
    int v16 = a2;
    do
    {
      int v17 = *v16++;
      int v15 = 33 * v15 + v17;
      --v12;
    }
    while (v12);
  }
  uint64_t v18 = *(void *)(v7 + 1176);
  unsigned int v19 = v14 - 1;
  uint64_t v20 = v18 + 8 * v14 + 8;
  int v21 = -1;
  int v22 = 1;
  int v23 = v15;
  while (1)
  {
    uint64_t v24 = v23 & v19;
    uint64_t v25 = *(void *)(v18 + 8 * v24);
    if (!v25) {
      break;
    }
    if (v25 == -8)
    {
      if (v21 == -1) {
        int v21 = v23 & v19;
      }
    }
    else if (*(_DWORD *)(v20 + 4 * v24) == v15 {
           && a3 == *(void *)v25
    }
           && (!a3 || !memcmp(a2, (const void *)(v25 + *(unsigned int *)(v7 + 1196)), a3)))
    {
      goto LABEL_28;
    }
    int v23 = v22 + v24;
    ++v22;
  }
  uint64_t v26 = v21;
  if (v21 == -1)
  {
    uint64_t v26 = v24;
    uint64_t v24 = v24;
  }
  else
  {
    uint64_t v24 = v21;
  }
  *(_DWORD *)(v20 + 4 * v26) = v15;
  uint64_t v25 = *(void *)(v18 + 8 * v24);
LABEL_28:
  if (!v25) {
    goto LABEL_29;
  }
  if (v25 == -8)
  {
    --*(_DWORD *)(v7 + 1192);
LABEL_29:
    uint64_t v27 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
    uint64_t v28 = v27;
    char v29 = v27 + 16;
    int v30 = __src;
    if (a3) {
      memcpy(v27 + 16, a2, a3);
    }
    v29[a3] = 0;
    *(void *)uint64_t v28 = a3;
    *((_DWORD *)v28 + 2) = 0;
    *(void *)(v18 + 8 * v24) = v28;
    ++*(_DWORD *)(v7 + 1188);
    for (unint64_t i = (uint64_t *)(*(void *)(v7 + 1176)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v7 + 1176), v24));
          ;
          ++i)
    {
      uint64_t v25 = *i;
      if (*i && v25 != -8) {
        break;
      }
    }
    goto LABEL_36;
  }
  int v30 = __src;
LABEL_36:
  uint64_t v59 = v7;
  if (!v30) {
    goto LABEL_45;
  }
  while (1)
  {
    if ((void)v73 != a3)
    {
      if ((unint64_t)v73 <= a3)
      {
        if (*((void *)&v73 + 1) < a3) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (a3 != (void)v73) {
          bzero((char *)__dst + v73, a3 - v73);
        }
      }
      *(void *)&long long v73 = a3;
    }
    int v64 = 0;
    char v68 = 0;
    uint64_t v69 = 0;
    p_dst = &__dst;
    int v70 = 0;
    __int16 v63 = &unk_1F2646FA8;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    unint64_t v33 = *(unsigned int *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = v33 + 1;
    sub_1CD098D14((llvm::raw_ostream *)&v63, v33, 0, 0, 0);
    __int16 v63 = &unk_1F2646B98;
    if (v70 == 1 && v65) {
      MEMORY[0x1D25D9CB0](v65, 0x1000C8077774924);
    }
LABEL_45:
    size_t v34 = v73;
    __srca = (unsigned __int8 *)__dst;
    unsigned int v35 = *(_DWORD *)(v7 + 1120);
    if (!v35)
    {
      *(void *)(v7 + 1124) = 0;
      uint64_t v55 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v55) {
        goto LABEL_90;
      }
      v55[16] = 2;
      *(void *)(v7 + 1112) = v55;
      unsigned int v35 = 16;
      *(_DWORD *)(v7 + 1120) = 16;
    }
    int v57 = (llvm::StringMapImpl *)(v7 + 1112);
    int v36 = 0;
    if (v34)
    {
      int v36 = 0;
      size_t v37 = v34;
      uint64_t v38 = __srca;
      do
      {
        int v39 = *v38++;
        int v36 = 33 * v36 + v39;
        --v37;
      }
      while (v37);
    }
    uint64_t v40 = *(void *)(v7 + 1112);
    unsigned int v41 = v35 - 1;
    uint64_t v42 = v40 + 8 * v35 + 8;
    int v43 = -1;
    int v44 = 1;
    int v45 = v36;
    while (1)
    {
      uint64_t v46 = v45 & v41;
      uint64_t v47 = *(void *)(v40 + 8 * v46);
      if (!v47) {
        break;
      }
      if (v47 == -8)
      {
        if (v43 == -1) {
          int v43 = v45 & v41;
        }
      }
      else if (*(_DWORD *)(v42 + 4 * v46) == v36 {
             && v34 == *(void *)v47
      }
             && (!v34 || !memcmp(__srca, (const void *)(v47 + *(unsigned int *)(v59 + 1132)), v34)))
      {
        goto LABEL_61;
      }
      int v45 = v44 + v46;
      ++v44;
    }
    uint64_t v48 = v43;
    if (v43 == -1)
    {
      uint64_t v48 = v46;
      uint64_t v46 = v46;
    }
    else
    {
      uint64_t v46 = v43;
    }
    *(_DWORD *)(v42 + 4 * v48) = v36;
    uint64_t v47 = *(void *)(v40 + 8 * v46);
LABEL_61:
    if (!v47) {
      break;
    }
    if (v47 == -8)
    {
      --*(_DWORD *)(v59 + 1128);
      break;
    }
    uint64_t v7 = v59;
    if (!*(unsigned char *)(v47 + 8)) {
      goto LABEL_69;
    }
  }
  uint64_t v7 = v59;
  uint64_t v49 = sub_1CB906F34(*(uint64_t **)(v59 + 1136), v34 + 17, 3);
  uint64_t v50 = v49;
  uint64_t v51 = v49 + 16;
  if (v34) {
    memcpy((void *)(v49 + 16), __srca, v34);
  }
  *(unsigned char *)(v51 + v34) = 0;
  *(void *)uint64_t v50 = v34;
  *(unsigned char *)(v50 + 8) = 1;
  *(void *)(v40 + 8 * v46) = v50;
  ++*(_DWORD *)(v59 + 1124);
  for (unint64_t j = (uint64_t *)(*(void *)(v59 + 1112) + 8 * llvm::StringMapImpl::RehashTable(v57, v46)); ; ++j)
  {
    uint64_t v47 = *j;
    if (*j && v47 != -8) {
      break;
    }
  }
LABEL_69:
  *(unsigned char *)(v47 + 8) = 1;
  uint64_t SymbolImpl = llvm::MCContext::createSymbolImpl(v7, v47, v58);
  if (__dst != v74) {
    free(__dst);
  }
  return SymbolImpl;
}

uint64_t llvm::MCContext::createSymbolImpl(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)a1)
  {
    if (!(!v4 & v3))
    {
      switch(*(_DWORD *)a1)
      {
        case 1:
          BOOL v12 = a2 != 0;
          if (a2) {
            uint64_t v13 = 48;
          }
          else {
            uint64_t v13 = 40;
          }
          uint64_t result = sub_1CB906F34((uint64_t *)(a1 + 192), v13, 3) + 8 * v12;
          *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x80;
          *(_WORD *)(result + 12) = 0;
          *(_DWORD *)(result + 16) = 0;
          *(void *)(result + 24) = 0;
          *(void *)uint64_t result = 4 * v12;
          if (a2) {
            *(void *)(result - 8) = a2;
          }
          *(void *)(result + 32) = 0;
          return result;
        case 2:
          BOOL v7 = a2 != 0;
          if (a2) {
            uint64_t v14 = 40;
          }
          else {
            uint64_t v14 = 32;
          }
          uint64_t result = sub_1CB906F34((uint64_t *)(a1 + 192), v14, 3) + 8 * v7;
          unsigned int v10 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0xC0;
          goto LABEL_6;
        case 3:
          BOOL v15 = a2 != 0;
          if (a2) {
            uint64_t v16 = 48;
          }
          else {
            uint64_t v16 = 40;
          }
          uint64_t result = sub_1CB906F34((uint64_t *)(a1 + 192), v16, 3) + 8 * v15;
          *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x40;
          *(_WORD *)(result + 12) = 0;
          *(_DWORD *)(result + 16) = 0;
          *(void *)(result + 24) = 0;
          *(void *)uint64_t result = 4 * v15;
          if (a2) {
            *(void *)(result - 8) = a2;
          }
          *(_WORD *)(result + 32) = 0;
          return result;
        case 4:
          break;
        case 5:
          BOOL v17 = a2 != 0;
          if (a2) {
            uint64_t v18 = 192;
          }
          else {
            uint64_t v18 = 184;
          }
          uint64_t v19 = sub_1CB906F34((uint64_t *)(a1 + 192), v18, 3);
          return sub_1CD6A8AE8(v19 + 8 * v17, a2, a3);
        case 6:
          return llvm::MCContext::createXCOFFSymbolImpl(a1, a2, a3);
        default:
          JUMPOUT(0);
      }
    }
    BOOL v7 = a2 != 0;
    if (a2) {
      uint64_t v11 = 40;
    }
    else {
      uint64_t v11 = 32;
    }
    uint64_t result = sub_1CB906F34((uint64_t *)(a1 + 192), v11, 3) + 8 * v7;
    unsigned int v10 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3;
  }
  else
  {
    BOOL v7 = a2 != 0;
    if (a2) {
      uint64_t v8 = 40;
    }
    else {
      uint64_t v8 = 32;
    }
    uint64_t result = sub_1CB906F34((uint64_t *)(a1 + 192), v8, 3) + 8 * v7;
    unsigned int v10 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x100;
  }
LABEL_6:
  *(_DWORD *)(result + 8) = v10;
  *(_WORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)uint64_t result = 4 * v7;
  if (a2) {
    *(void *)(result - 8) = a2;
  }
  return result;
}

uint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this, const llvm::Twine *a2, int a3)
{
  size_t v5 = this;
  v22[16] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = &v20;
  uint64_t v20 = v22;
  long long v21 = xmmword_1CFAC3020;
  int v12 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v11 = &unk_1F2646FA8;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v6 = *((void *)this + 19);
  size_t v7 = *(void *)(v6 + 96);
  if (v7) {
    this = llvm::raw_ostream::write((llvm::raw_ostream *)&v11, *(const char **)(v6 + 88), v7);
  }
  uint64_t v8 = llvm::Twine::printOneChild(this, (llvm::raw_ostream *)&v11, *(void *)a2, *((void *)a2 + 1), *((unsigned char *)a2 + 32));
  llvm::Twine::printOneChild(v8, (llvm::raw_ostream *)&v11, *((void *)a2 + 2), *((void *)a2 + 3), *((unsigned char *)a2 + 33));
  uint64_t v11 = &unk_1F2646B98;
  if (v18 == 1 && v13) {
    MEMORY[0x1D25D9CB0](v13, 0x1000C8077774924);
  }
  uint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)v5, (unsigned __int8 *)v20, v21, a3, 1);
  if (v20 != v22) {
    free(v20);
  }
  return Symbol;
}

uint64_t llvm::MCContext::createLinkerPrivateTempSymbol(llvm::MCContext *this)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = &v18;
  int v18 = v20;
  long long v19 = xmmword_1CFAC3020;
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v9 = &unk_1F2646FA8;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v2 = *((void *)this + 19);
  size_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    char v4 = (const char **)(v2 + 120);
LABEL_3:
    llvm::raw_ostream::write((llvm::raw_ostream *)&v9, *v4, v3);
    uint64_t v6 = v12;
    uint64_t v5 = v13;
    goto LABEL_4;
  }
  size_t v3 = *(void *)(v2 + 96);
  if (v3)
  {
    char v4 = (const char **)(v2 + 88);
    goto LABEL_3;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
LABEL_4:
  if ((unint64_t)(v6 - v5) > 2)
  {
    *(unsigned char *)(v5 + 2) = 112;
    *(_WORD *)uint64_t v5 = 28020;
    v13 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v9, "tmp", 3uLL);
  }
  uint64_t v9 = &unk_1F2646B98;
  if (v16 == 1 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8077774924);
  }
  uint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)this, (unsigned __int8 *)v18, v19, 1, 0);
  if (v18 != v20) {
    free(v18);
  }
  return Symbol;
}

uint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this)
{
  uint64_t v2 = "tmp";
  __int16 v3 = 259;
  return llvm::MCContext::createTempSymbol(this, (const llvm::Twine *)&v2, 1);
}

size_t llvm::MCContext::getMachOSection(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, unsigned char *a9)
{
  v60[0] = a2;
  v60[1] = a3;
  v60[2] = 44;
  __int16 v61 = 1797;
  v62[0] = v60;
  v62[2] = a4;
  v62[3] = a5;
  __int16 v63 = 1282;
  llvm::Twine::str((llvm::Twine *)v62, v64);
  uint64_t v15 = (void **)v64[0];
  if (v65 >= 0) {
    uint64_t v15 = v64;
  }
  int __src = v15;
  if (v65 >= 0) {
    size_t v16 = v65 & 0x7F;
  }
  else {
    size_t v16 = (size_t)v64[1];
  }
  unsigned int v17 = *(_DWORD *)(a1 + 1672);
  if (!v17)
  {
    *(void *)(a1 + 1676) = 0;
    uint64_t v51 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v51) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v51[16] = 2;
    *(void *)(a1 + 1664) = v51;
    unsigned int v17 = 16;
    *(_DWORD *)(a1 + 1672) = 16;
  }
  int v56 = a7;
  unint64_t v52 = (llvm::StringMapImpl *)(a1 + 1664);
  uint64_t v57 = a2;
  int v55 = a6;
  int v54 = a8;
  int v18 = 0;
  if (v16)
  {
    size_t v19 = v16;
    uint64_t v20 = __src;
    do
    {
      int v21 = *(unsigned __int8 *)v20;
      uint64_t v20 = (void **)((char *)v20 + 1);
      int v18 = 33 * v18 + v21;
      --v19;
    }
    while (v19);
  }
  uint64_t v58 = a1;
  uint64_t v22 = *(void *)(a1 + 1664);
  unsigned int v23 = v17 - 1;
  uint64_t v24 = v22 + 8 * v17 + 8;
  int v25 = -1;
  int v26 = 1;
  int v27 = v18;
  while (1)
  {
    uint64_t v28 = v27 & v23;
    char v29 = *(void **)(v22 + 8 * v28);
    if (!v29) {
      break;
    }
    if (v29 == (void *)-8)
    {
      if (v25 == -1) {
        int v25 = v27 & v23;
      }
    }
    else if (*(_DWORD *)(v24 + 4 * v28) == v18 {
           && v16 == *v29
    }
           && (!v16 || !memcmp(__src, (char *)v29 + *(unsigned int *)(v58 + 1684), v16)))
    {
      goto LABEL_22;
    }
    int v27 = v26 + v28;
    ++v26;
  }
  uint64_t v30 = v25;
  if (v25 == -1)
  {
    uint64_t v30 = v28;
    uint64_t v28 = v28;
  }
  else
  {
    uint64_t v28 = v25;
  }
  *(_DWORD *)(v24 + 4 * v30) = v18;
  char v29 = *(void **)(v22 + 8 * v28);
LABEL_22:
  unint64_t i = (size_t **)(v22 + 8 * v28);
  if (v29)
  {
    uint64_t v35 = v58;
    if (v29 != (void *)-8)
    {
      char v37 = 1;
      goto LABEL_31;
    }
    --*(_DWORD *)(v58 + 1680);
  }
  uint64_t v32 = operator new(v16 + 17, (std::align_val_t)8uLL);
  unint64_t v33 = v32;
  size_t v34 = (char *)(v32 + 2);
  uint64_t v35 = v58;
  if (v16) {
    memcpy(v32 + 2, __src, v16);
  }
  v34[v16] = 0;
  *unint64_t v33 = v16;
  v33[1] = 0;
  uint64_t *i = v33;
  ++*(_DWORD *)(v58 + 1676);
  for (unint64_t i = (size_t **)(*(void *)(v58 + 1664) + 8 * llvm::StringMapImpl::RehashTable(v52, v28));
        !*i || *i + 1 == 0;
  char v37 = 0;
LABEL_31:
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if ((v37 & 1) == 0)
  {
    if (a9)
    {
      char v47 = 1;
      HIBYTE(v63) = 1;
      if (*a9)
      {
        v62[0] = a9;
        char v47 = 3;
      }
      LOBYTE(v63) = v47;
      uint64_t TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v35, (const llvm::Twine *)v62, 0);
    }
    else
    {
      uint64_t TempSymbol = 0;
    }
    uint64_t v39 = (uint64_t)(*i + 2);
    size_t v40 = **i;
    *(void *)(v35 + 560) += 248;
    uint64_t v41 = *(void *)(v35 + 480);
    if (((v41 + 7) & 0xFFFFFFFFFFFFFFF8) - v41 + 248 > *(void *)(v35 + 488) - v41)
    {
      unsigned int v48 = *(_DWORD *)(v35 + 504) >> 7;
      if (v48 >= 0x1E) {
        LOBYTE(v48) = 30;
      }
      uint64_t v49 = 4096 << v48;
      unint64_t v42 = (unint64_t)operator new(4096 << v48, (std::align_val_t)8uLL);
      unsigned int v50 = *(_DWORD *)(v35 + 504);
      if (v50 >= *(_DWORD *)(v35 + 508)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v35 + 496) + 8 * v50) = v42;
      ++*(_DWORD *)(v35 + 504);
      *(void *)(v35 + 488) = v42 + v49;
    }
    else
    {
      unint64_t v42 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v43 = 0;
    *(void *)(v35 + 480) = v42 + 248;
    size_t v44 = v40 - a5;
    if (v40 < v40 - a5) {
      size_t v44 = v40;
    }
    *(void *)(v42 + 8) = TempSymbol;
    *(void *)(v42 + 16) = 0;
    *(unsigned char *)(v42 + 24) = 0;
    *(_DWORD *)(v42 + 28) = 0;
    *(void *)(v42 + 36) = 0;
    *(unsigned char *)(v42 + 44) &= 0xF8u;
    *(void *)(v42 + 48) = 0;
    *(void *)(v42 + 56) = 0;
    *(void *)(v42 + 64) = v42;
    *(void *)(v42 + 72) = 0;
    *(void *)(v42 + 80) = -1;
    *(void *)(v42 + 88) = 0;
    *(_WORD *)(v42 + 96) = 16;
    *(unsigned char *)(v42 + 98) = 0;
    *(void *)(v42 + 104) = v42 + 104;
    *(void *)(v42 + 112) = v42 + 104;
    *(void *)(v42 + 120) = v42 + 136;
    *(void *)(v42 + 128) = 0x100000000;
    *(void *)(v42 + 152) = v42 + 168;
    *(void *)(v42 + 160) = 0x200000000;
    *(void *)(v42 + 200) = v39 + v44;
    *(void *)(v42 + 208) = v40 - v44;
    *(_DWORD *)(v42 + 216) = 3;
    *(_DWORD *)(v42 + 220) = v54;
    *(void *)unint64_t v42 = &unk_1F262FB58;
    *(_DWORD *)(v42 + 240) = v55;
    *(_DWORD *)(v42 + 244) = v56;
    do
    {
      if (a3 > v43) {
        char v45 = *(unsigned char *)(v57 + v43);
      }
      else {
        char v45 = 0;
      }
      *(unsigned char *)(v42 + v43++ + 224) = v45;
    }
    while (v43 != 16);
    (*i)[1] = v42;
  }
  return (*i)[1];
}

uint64_t llvm::MCContext::getELFNamedSection(llvm::MCContext *this, const llvm::Twine *a2, const llvm::Twine *a3, int a4, int a5, int a6)
{
  if (!*((unsigned char *)a2 + 32))
  {
    LOWORD(v17) = 256;
LABEL_13:
    LOWORD(v20) = 256;
    return llvm::MCContext::getELFSection(this, (const llvm::Twine *)&v18, a4, a5, a6, a3, 1, -1, 0);
  }
  if (*((unsigned char *)a2 + 32) == 1)
  {
    uint64_t v6 = ".";
    *(void *)&long long v15 = ".";
    uint64_t v7 = 259;
    LOWORD(v17) = 259;
    char v8 = 3;
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
    if (*((unsigned char *)a2 + 33) == 1) {
      char v8 = *((unsigned char *)a2 + 32);
    }
    else {
      char v8 = 2;
    }
    uint64_t v6 = *(const char **)a2;
    uint64_t v7 = *((void *)a2 + 1);
    if (*((unsigned char *)a2 + 33) != 1) {
      uint64_t v6 = (const char *)a2;
    }
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v7;
    *(void *)&long long v16 = ".";
    LOBYTE(v17) = v8;
    BYTE1(v17) = 3;
  }
  if (*((unsigned char *)a3 + 32) == 1)
  {
    long long v18 = v15;
    long long v19 = v16;
    uint64_t v20 = v17;
    return llvm::MCContext::getELFSection(this, (const llvm::Twine *)&v18, a4, a5, a6, a3, 1, -1, 0);
  }
  if (!*((unsigned char *)a3 + 32)) {
    goto LABEL_13;
  }
  if (!v9)
  {
    char v8 = 2;
    uint64_t v6 = (const char *)&v15;
  }
  int v10 = *((unsigned __int8 *)a3 + 33);
  uint64_t v11 = *((void *)a3 + 1);
  if (v10 == 1) {
    char v12 = *((unsigned char *)a3 + 32);
  }
  else {
    char v12 = 2;
  }
  if (v10 == 1) {
    uint64_t v13 = *(const llvm::Twine **)a3;
  }
  else {
    uint64_t v13 = a3;
  }
  *(void *)&long long v18 = v6;
  *((void *)&v18 + 1) = v7;
  *(void *)&long long v19 = v13;
  *((void *)&v19 + 1) = v11;
  LOBYTE(v20) = v8;
  BYTE1(v20) = v12;
  return llvm::MCContext::getELFSection(this, (const llvm::Twine *)&v18, a4, a5, a6, a3, 1, -1, 0);
}

uint64_t llvm::MCContext::getELFUniqueIDForEntsize(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v10 = a1 + 2000;
  if (a3 >= 0x17)
  {
    uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v12 = a3 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v11 = operator new(v12 + 1);
    __p[1] = (void *)a3;
    unint64_t v17 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_8;
  }
  HIBYTE(v17) = a3;
  uint64_t v11 = __p;
  if (a3) {
LABEL_8:
  }
    memmove(v11, a2, a3);
  *((unsigned char *)v11 + a3) = 0;
  int v18 = a4;
  int v19 = a5;
  char v14 = sub_1CCBB956C(v10, (uint64_t *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(a1 + 2008) == v14) {
    return 0;
  }
  else {
    return *((unsigned int *)v14 + 16) | 0x100000000;
  }
}

uint64_t llvm::MCContext::hasXCOFFSection(uint64_t a1, void *__src, size_t __len, char a4)
{
  if (!__src)
  {
    size_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
    long long __dst = 0;
    size_t v25 = 0;
    unint64_t v26 = 0;
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_39;
  }
  if (__len >= 0x17)
  {
    size_t v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v12 = __len | 7;
    }
    size_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v25 = __len;
    unint64_t v26 = v13 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v26) = __len;
    p_dst = (void **)&__dst;
    if (!__len) {
      goto LABEL_11;
    }
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((unsigned char *)p_dst + __len) = 0;
  char v11 = HIBYTE(v26);
  uint64_t v10 = __dst;
  size_t v9 = v25;
LABEL_12:
  BOOL v14 = v11 < 0;
  if (v11 >= 0) {
    long long v15 = (void **)&__dst;
  }
  else {
    long long v15 = v10;
  }
  size_t v16 = v11 & 0x7F;
  if (v14) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v16;
  }
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
LABEL_39:
  }
    abort();
  if (v17 >= 0x17)
  {
    uint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v19 = v17 | 7;
    }
    uint64_t v20 = v19 + 1;
    int v18 = operator new(v19 + 1);
    __p[1] = (void *)v17;
    unint64_t v28 = v20 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_25;
  }
  HIBYTE(v28) = v17;
  int v18 = __p;
  if (v17) {
LABEL_25:
  }
    memmove(v18, v15, v17);
  *((unsigned char *)v18 + v17) = 0;
  char v29 = a4;
  char v30 = 1;
  int v21 = *(void **)(a1 + 1800);
  if (!v21)
  {
LABEL_32:
    uint64_t v22 = 0;
    goto LABEL_33;
  }
  while (sub_1CD6A9D18((uint64_t)__p, (uint64_t)(v21 + 4)))
  {
LABEL_28:
    int v21 = (void *)*v21;
    if (!v21) {
      goto LABEL_32;
    }
  }
  if (sub_1CD6A9D18((uint64_t)(v21 + 4), (uint64_t)__p))
  {
    ++v21;
    goto LABEL_28;
  }
  uint64_t v22 = 1;
LABEL_33:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  return v22;
}

uint64_t llvm::MCContext::getSubtargetCopy(llvm::MCContext *this, const llvm::MCSubtargetInfo *a2)
{
  *((void *)this + 241) += 256;
  uint64_t v4 = *((void *)this + 231);
  if (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) - v4 + 256 > *((void *)this + 232) - v4)
  {
    unsigned int v7 = *((_DWORD *)this + 468) >> 7;
    if (v7 >= 0x1E) {
      LOBYTE(v7) = 30;
    }
    uint64_t v8 = 4096 << v7;
    uint64_t v5 = (uint64_t)operator new(4096 << v7, (std::align_val_t)8uLL);
    unsigned int v9 = *((_DWORD *)this + 468);
    if (v9 >= *((_DWORD *)this + 469)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 233) + 8 * v9) = v5;
    ++*((_DWORD *)this + 468);
    *((void *)this + 232) = v5 + v8;
  }
  else
  {
    uint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 231) = v5 + 256;

  return sub_1CCBB8C94(v5, (uint64_t)a2);
}

void llvm::MCContext::RemapDebugPaths(llvm::MCContext *this)
{
  if (*((void *)this + 180))
  {
    BOOL v14 = (void *)((char *)this + 1424);
    uint64_t v1 = (void *)((char *)this + 1272);
    std::string::__init(&__p, *((const std::string::value_type **)this + 159), *((void *)this + 160));
    sub_1CCBB86E4(&v14, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    *((void *)this + 160) = 0;
    sub_1CC22C75C(v1, p_p, (unsigned char *)p_p + size);
    uint64_t v5 = (char *)*((void *)this + 184);
    uint64_t v6 = (char *)this + 1480;
    if (v5 != (char *)this + 1480)
    {
      do
      {
        uint64_t v7 = *((unsigned int *)v5 + 14);
        if (v7)
        {
          uint64_t v8 = (const void **)*((void *)v5 + 6);
          uint64_t v9 = 24 * v7;
          do
          {
            sub_1CCBB86E4(&v14, v8);
            v8 += 3;
            v9 -= 24;
          }
          while (v9);
        }
        uint64_t v10 = (char *)*((void *)v5 + 1);
        if (v10)
        {
          do
          {
            char v11 = v10;
            uint64_t v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            char v11 = (char *)*((void *)v5 + 2);
            BOOL v12 = *(void *)v11 == (void)v5;
            uint64_t v5 = v11;
          }
          while (!v12);
        }
        uint64_t v5 = v11;
      }
      while (v11 != v6);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1CCBB86E4(void **a1, const void **a2)
{
  v34[32] = *MEMORY[0x1E4F143B8];
  char v4 = *((unsigned char *)a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  size_t v7 = v4 & 0x7F;
  if (v5) {
    size_t v8 = (size_t)a2[1];
  }
  else {
    size_t v8 = v7;
  }
  int __src = v34;
  *(_OWORD *)__len = xmmword_1CD96DBF0;
  if (v8 >= 0x101) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  size_t v9 = 0;
  if (v8)
  {
    memcpy(v34, v6, v8);
    size_t v9 = __len[0];
  }
  __len[0] = v9 + v8;
  uint64_t v10 = *a1;
  size_t v13 = (void *)*v10;
  char v11 = v10 + 1;
  BOOL v12 = v13;
  if (v13 != v11)
  {
    while (1)
    {
      char v14 = *((unsigned char *)v12 + 55);
      int v15 = v14;
      size_t v16 = v14 >= 0 ? (unsigned __int8 *)(v12 + 4) : (unsigned __int8 *)v12[4];
      uint64_t v17 = v14 & 0x7F;
      size_t v18 = v15 >= 0 ? v17 : v12[5];
      char v19 = *((unsigned char *)v12 + 79);
      uint64_t v20 = v19 >= 0 ? v12 + 7 : (void *)v12[7];
      uint64_t v21 = v19 >= 0 ? v19 & 0x7F : v12[8];
      if (llvm::sys::path::replace_path_prefix((const void **)&__src, v16, v18, v20, v21, 0)) {
        break;
      }
      uint64_t v22 = (void *)v12[1];
      if (v22)
      {
        do
        {
          unsigned int v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          unsigned int v23 = (void *)v12[2];
          BOOL v24 = *v23 == (void)v12;
          BOOL v12 = v23;
        }
        while (!v24);
      }
      BOOL v12 = v23;
      if (v23 == v11) {
        goto LABEL_45;
      }
    }
    size_t v25 = __src;
    if (!__src)
    {
      long long __dst = 0uLL;
      unint64_t v31 = 0;
LABEL_42:
      if (*((char *)a2 + 23) < 0) {
        operator delete((void *)*a2);
      }
      *(_OWORD *)a2 = __dst;
      a2[2] = (const void *)v31;
      goto LABEL_45;
    }
    size_t v26 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len[0] >= 0x17)
    {
      size_t v28 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17) {
        size_t v28 = __len[0] | 7;
      }
      size_t v29 = v28 + 1;
      p_dst = (long long *)operator new(v28 + 1);
      *((void *)&__dst + 1) = v26;
      unint64_t v31 = v29 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = __len[0];
      p_dst = &__dst;
      if (!__len[0]) {
        goto LABEL_41;
      }
    }
    memmove(p_dst, v25, v26);
LABEL_41:
    *((unsigned char *)p_dst + v26) = 0;
    goto LABEL_42;
  }
LABEL_45:
  if (__src != v34) {
    free(__src);
  }
}

uint64_t llvm::MCContext::emitDwarfUnwindInfo(llvm::MCContext *this)
{
  uint64_t v1 = *((void *)this + 244);
  if (v1) {
    return *(unsigned int *)(v1 + 4);
  }
  else {
    return 2;
  }
}

void llvm::MCContext::getDwarfFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, long long *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v23[0] = a2;
  v23[1] = a3;
  v22[0] = a4;
  v22[1] = a5;
  int v15 = *(char **)(a1 + 1480);
  if (v15)
  {
    do
    {
      while (1)
      {
        size_t v16 = v15;
        unsigned int v17 = *((_DWORD *)v15 + 8);
        if (v17 <= a10) {
          break;
        }
        int v15 = *(char **)v16;
        size_t v18 = (uint64_t **)v16;
        if (!*(void *)v16) {
          goto LABEL_6;
        }
      }
      if (v17 >= a10) {
        goto LABEL_4;
      }
      int v15 = (char *)*((void *)v16 + 1);
    }
    while (v15);
    size_t v18 = (uint64_t **)(v16 + 8);
  }
  else
  {
    size_t v18 = (uint64_t **)(a1 + 1480);
    size_t v16 = (char *)(a1 + 1480);
  }
LABEL_6:
  char v19 = v16;
  size_t v16 = (char *)operator new(0x228uLL);
  *((_DWORD *)v16 + 8) = a10;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 248) = 0u;
  *((void *)v16 + 65) = 0;
  *(_OWORD *)(v16 + 264) = 0u;
  *(_OWORD *)(v16 + 280) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 296) = 0u;
  *(_OWORD *)(v16 + 312) = 0u;
  *(_OWORD *)(v16 + 328) = 0u;
  *(_OWORD *)(v16 + 344) = 0u;
  *(_OWORD *)(v16 + 360) = 0u;
  *(_OWORD *)(v16 + 376) = 0u;
  *(_OWORD *)(v16 + 392) = 0u;
  *(_OWORD *)(v16 + 408) = 0u;
  *(_OWORD *)(v16 + 424) = 0u;
  *(_OWORD *)(v16 + 440) = 0u;
  *(_OWORD *)(v16 + 456) = 0u;
  *(_OWORD *)(v16 + 472) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 488) = 0u;
  *(_OWORD *)(v16 + 504) = 0u;
  *((void *)v16 + 6) = v16 + 64;
  *((_DWORD *)v16 + 15) = 3;
  *((void *)v16 + 17) = v16 + 152;
  *((_DWORD *)v16 + 37) = 3;
  *((void *)v16 + 47) = 0;
  *((void *)v16 + 46) = 0;
  *((void *)v16 + 48) = 0x1000000000;
  *((_OWORD *)v16 + 25) = 0u;
  *((_OWORD *)v16 + 26) = 0u;
  *((_OWORD *)v16 + 27) = 0u;
  *(void *)(v16 + 445) = 0;
  v16[497] = 1;
  *((void *)v16 + 64) = 0;
  *((void *)v16 + 63) = 0;
  *((_DWORD *)v16 + 130) = 0;
  *((void *)v16 + 66) = 0;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 67) = 0;
  *(void *)size_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v19;
  void *v18 = (uint64_t *)v16;
  uint64_t v20 = (uint64_t *)v16;
  uint64_t v21 = **(void **)(a1 + 1472);
  if (v21)
  {
    *(void *)(a1 + 1472) = v21;
    uint64_t v20 = *v18;
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 1480), v20);
  ++*(void *)(a1 + 1488);
LABEL_4:
  long long v26 = *a7;
  char v27 = *((unsigned char *)a7 + 16);
  long long v24 = *(_OWORD *)a8;
  uint64_t v25 = *(void *)(a8 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile(v16 + 40, (uint64_t)v23, v22, (size_t)&v26, &v24, *(unsigned __int16 *)(a1 + 1624), a6, a9);
}

_DWORD *sub_1CCBB8B70(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(_OWORD *)uint64_t result = xmmword_1CFAC4A20;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CCBB8C08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      uint64_t v5 = v3[4];
      v3[4] = 0;
      if (v5)
      {
        uint64_t v6 = sub_1CCBB8C08();
        MEMORY[0x1D25D9CE0](v6, 0x10A0C40C01AB3A7);
      }
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
  }
  size_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_1CCBB8C94(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F26306C8;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1CB8BDF7C(v4, *(const void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  size_t v7 = (_OWORD *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v7, *(const void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *size_t v7 = v8;
  }
  size_t v9 = (_OWORD *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v9, *(const void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *size_t v9 = v10;
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  long long v12 = *(_OWORD *)(a2 + 120);
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 104) = v11;
  long long v14 = *(_OWORD *)(a2 + 168);
  long long v15 = *(_OWORD *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  unsigned int v17 = (_OWORD *)(a1 + 232);
  if (*(char *)(a2 + 255) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v17, *(const void **)(a2 + 232), *(void *)(a2 + 240));
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *unsigned int v17 = v18;
  }
  return a1;
}

uint64_t sub_1CCBB8DD4(uint64_t a1, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
  }
  long long v6 = (_OWORD *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)v6, *(const void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *long long v6 = v7;
  }
  return a1;
}

char *sub_1CCBB8E50(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  long long v6 = (char *)a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    do
    {
      while (1)
      {
        size_t v9 = v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *(char **)v9;
        long long v7 = (uint64_t **)v9;
        if (!*(void *)v9) {
          goto LABEL_7;
        }
      }
      if (v10 >= v8) {
        return v9;
      }
      long long v6 = (char *)*((void *)v9 + 1);
    }
    while (v6);
    long long v7 = (uint64_t **)(v9 + 8);
  }
  else
  {
    size_t v9 = (char *)(a1 + 1);
  }
LABEL_7:
  long long v12 = v9;
  size_t v9 = (char *)operator new(0x228uLL);
  *((_DWORD *)v9 + 8) = **a4;
  *((void *)v9 + 65) = 0;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 488) = 0u;
  *(_OWORD *)(v9 + 504) = 0u;
  *(_OWORD *)(v9 + 456) = 0u;
  *(_OWORD *)(v9 + 472) = 0u;
  *(_OWORD *)(v9 + 424) = 0u;
  *(_OWORD *)(v9 + 440) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *((void *)v9 + 6) = v9 + 64;
  *((_DWORD *)v9 + 15) = 3;
  *((void *)v9 + 17) = v9 + 152;
  *((_DWORD *)v9 + 37) = 3;
  *((void *)v9 + 47) = 0;
  *((void *)v9 + 46) = 0;
  *((void *)v9 + 48) = 0x1000000000;
  *((_OWORD *)v9 + 25) = 0u;
  *((_OWORD *)v9 + 26) = 0u;
  *((_OWORD *)v9 + 27) = 0u;
  *(void *)(v9 + 445) = 0;
  v9[497] = 1;
  *((void *)v9 + 64) = 0;
  *((void *)v9 + 63) = 0;
  *((_DWORD *)v9 + 130) = 0;
  *((void *)v9 + 66) = 0;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 67) = 0;
  *(void *)size_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v12;
  *long long v7 = (uint64_t *)v9;
  long long v13 = (uint64_t *)v9;
  long long v14 = (uint64_t *)**a1;
  if (v14)
  {
    *a1 = v14;
    long long v13 = *v7;
  }
  sub_1CB8358B8(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

char **sub_1CCBB8FFC(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 72 * v3;
    do
    {
      if (v2[v4 - 49] < 0) {
        operator delete(*(void **)&v2[v4 - 72]);
      }
      v4 -= 72;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCBB9078(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F262E228;
  a2[1] = v2;
  return result;
}

void sub_1CCBB90A0(char *a1)
{
  if (a1)
  {
    sub_1CCBB90A0(*(void *)a1);
    sub_1CCBB90A0(*((void *)a1 + 1));
    uint64_t v3 = *((void *)a1 + 66);
    if (v3)
    {
      uint64_t v4 = *((void *)a1 + 67);
      long long v5 = (void *)*((void *)a1 + 66);
      if (v4 != v3)
      {
        do
        {
          long long v6 = *(void **)(v4 - 24);
          if (v6)
          {
            *(void *)(v4 - 16) = v6;
            operator delete(v6);
          }
          v4 -= 32;
        }
        while (v4 != v3);
        long long v5 = (void *)*((void *)a1 + 66);
      }
      *((void *)a1 + 67) = v3;
      operator delete(v5);
    }
    MEMORY[0x1D25D9CD0](*((void *)a1 + 63), 8);
    if (a1[447] < 0) {
      operator delete(*((void **)a1 + 53));
    }
    if (a1[423] < 0) {
      operator delete(*((void **)a1 + 50));
    }
    sub_1CC3724DC((uint64_t)(a1 + 368));
    sub_1CCBB8FFC((char **)a1 + 17);
    sub_1CBFCD310((char **)a1 + 6);
    operator delete(a1);
  }
}

void sub_1CCBB9180(char *a1)
{
  if (a1)
  {
    sub_1CCBB9180(*(void *)a1);
    sub_1CCBB9180(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_1CCBB91F0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 48;
        long long v7 = (void **)(v4 - 32);
        sub_1CCBB926C(&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCBB926C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          uint64_t v6 = *((void *)v4 - 2);
          if (v6) {
            MEMORY[0x1D25D9CB0](v6, 0x1000C8000313F17);
          }
        }
        v4 -= 40;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_1CCBB9310(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD6A8F6C(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(_OWORD **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_1CFAC4A20;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t *sub_1CCBB9364(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i)
  {
    if (v8 != -8)
    {
      while (!v8 || v8 == -8)
      {
        uint64_t v14 = i[1];
        ++i;
        uint64_t v8 = v14;
      }
      return i;
    }
    --*(_DWORD *)(a1 + 16);
  }
  uint64_t v9 = sub_1CB906F34(*(uint64_t **)(a1 + 24), a3 + 17, 3);
  unsigned int v10 = (void *)v9;
  uint64_t v11 = v9 + 16;
  if (a3) {
    memcpy((void *)(v9 + 16), a2, a3);
  }
  *(unsigned char *)(v11 + a3) = 0;
  *unsigned int v10 = a3;
  v10[1] = 0;
  uint64_t *i = (uint64_t)v10;
  ++*(_DWORD *)(a1 + 12);
  for (unint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

uint64_t *sub_1CCBB9468(uint64_t a1, unsigned __int8 *a2, size_t a3, unsigned char *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i)
  {
    if (v10 != -8)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v16 = i[1];
        ++i;
        uint64_t v10 = v16;
      }
      return i;
    }
    --*(_DWORD *)(a1 + 16);
  }
  uint64_t v11 = sub_1CB906F34(*(uint64_t **)(a1 + 24), a3 + 17, 3);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 16;
  if (a3) {
    memcpy((void *)(v11 + 16), a2, a3);
  }
  *(unsigned char *)(v13 + a3) = 0;
  *(void *)uint64_t v12 = a3;
  *(unsigned char *)(v12 + 8) = *a4;
  uint64_t *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (unint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

void *sub_1CCBB956C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_1CD6A96F0((uint64_t)(v3 + 4), a2);
    long long v7 = v3 + 1;
    if (!v6)
    {
      long long v7 = v3;
      long long v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1CD6A96F0((uint64_t)a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

BOOL sub_1CCBB95EC(const void **a1, unsigned __int8 *a2, const void **a3, unsigned __int8 *a4)
{
  BOOL v6 = a1;
  size_t v7 = *((unsigned __int8 *)a3 + 23);
  uint64_t v8 = a3[1];
  if ((v7 & 0x80u) == 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *a3;
  }
  if ((v7 & 0x80u) == 0) {
    size_t v10 = v7 & 0x7F;
  }
  else {
    size_t v10 = (size_t)a3[1];
  }
  size_t v11 = *((unsigned __int8 *)a1 + 23);
  size_t v12 = v11;
  if (*((char *)a1 + 23) < 0)
  {
    a1 = (const void **)*a1;
    size_t v12 = (size_t)v6[1];
  }
  if (v10 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v10;
  }
  int v14 = memcmp(a1, v9, v13);
  BOOL v15 = v12 < v10;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 1;
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v17 = v6;
  }
  else {
    unsigned int v17 = *v6;
  }
  if ((v11 & 0x80u) == 0) {
    size_t v18 = v11;
  }
  else {
    size_t v18 = (size_t)v6[1];
  }
  if ((v7 & 0x80u) != 0) {
    size_t v7 = (size_t)v8;
  }
  if (v18 >= v7) {
    size_t v19 = v7;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v9, v17, v19);
  BOOL v21 = v7 < v18;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  return !v21 && *a2 < *a4;
}

BOOL sub_1CCBB96F8(const void **a1, _DWORD *a2, const void **a3, _DWORD *a4)
{
  BOOL v6 = a1;
  size_t v7 = *((unsigned __int8 *)a3 + 23);
  uint64_t v8 = a3[1];
  if ((v7 & 0x80u) == 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *a3;
  }
  if ((v7 & 0x80u) == 0) {
    size_t v10 = v7 & 0x7F;
  }
  else {
    size_t v10 = (size_t)a3[1];
  }
  size_t v11 = *((unsigned __int8 *)a1 + 23);
  size_t v12 = v11;
  if (*((char *)a1 + 23) < 0)
  {
    a1 = (const void **)*a1;
    size_t v12 = (size_t)v6[1];
  }
  if (v10 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v10;
  }
  int v14 = memcmp(a1, v9, v13);
  BOOL v15 = v12 < v10;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15) {
    return 1;
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v17 = v6;
  }
  else {
    unsigned int v17 = *v6;
  }
  if ((v11 & 0x80u) == 0) {
    size_t v18 = v11;
  }
  else {
    size_t v18 = (size_t)v6[1];
  }
  if ((v7 & 0x80u) != 0) {
    size_t v7 = (size_t)v8;
  }
  if (v18 >= v7) {
    size_t v19 = v7;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v9, v17, v19);
  BOOL v21 = v7 < v18;
  if (v20) {
    BOOL v21 = v20 < 0;
  }
  return !v21 && *a2 < *a4;
}

uint64_t sub_1CCBB9804(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 1240))(*a1, *a2);
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = a1[1];
    size_t v7 = 0;
    if (sub_1CD420258((uint64_t *)v6, a2, &v7))
    {
      *size_t v7 = -8192;
      *(int32x2_t *)(v6 + 8) = vadd_s32(*(int32x2_t *)(v6 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4 ^ 1u;
}

void sub_1CCBB98BC()
{
}

__n128 sub_1CCBB98D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F262E270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCBB991C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262E270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCBB994C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v13[22] = *(void **)MEMORY[0x1E4F143B8];
  llvm::SourceMgr::GetMessage(*(llvm::Twine **)(a1 + 16), *a3, **(char ***)(a1 + 8), 0, 0, 0, 0, 0, (uint64_t)v4);
  sub_1CD4D7434(a2, (uint64_t)v4);
  sub_1CC1925A4(v13);
  if (__p)
  {
    size_t v12 = __p;
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
}

void sub_1CCBB9A40()
{
}

__n128 sub_1CCBB9A54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F262E2B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CCBB9AA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F262E2B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CCBB9AD0(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v13[22] = *(void **)MEMORY[0x1E4F143B8];
  llvm::SourceMgr::GetMessage(*(llvm::Twine **)(a1 + 16), *a3, **(char ***)(a1 + 8), 1, 0, 0, 0, 0, (uint64_t)v4);
  sub_1CD4D7434(a2, (uint64_t)v4);
  sub_1CC1925A4(v13);
  if (__p)
  {
    size_t v12 = __p;
    operator delete(__p);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
}

uint64_t llvm::MCDwarfLineStr::MCDwarfLineStr(uint64_t this, llvm::MCContext *a2)
{
  *(void *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 40) = 0x100000007;
  *(unsigned char *)(this + 48) = 0;
  int v2 = *(unsigned __int8 *)(*((void *)a2 + 19) + 424);
  *(unsigned char *)(this + 56) = v2;
  if (v2) {
    *(void *)this = *(void *)(*(void *)(*((void *)a2 + 21) + 96) + 8);
  }
  return this;
}

{
  int v2;

  *(void *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 40) = 0x100000007;
  *(unsigned char *)(this + 48) = 0;
  int v2 = *(unsigned __int8 *)(*((void *)a2 + 19) + 424);
  *(unsigned char *)(this + 56) = v2;
  if (v2) {
    *(void *)this = *(void *)(*(void *)(*((void *)a2 + 21) + 96) + 8);
  }
  return this;
}

void llvm::MCDwarfLineEntry::make(llvm::MCDwarfLineEntry *this, llvm::MCStreamer *a2, llvm::MCSection *a3)
{
  int v4 = (llvm::MCContext *)*((void *)this + 1);
  if (*((unsigned char *)v4 + 1512))
  {
    v33[0] = (uint64_t)"tmp";
    __int16 v34 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)v33, 1);
    (*(void (**)(llvm::MCDwarfLineEntry *, uint64_t, void))(*(void *)this + 192))(this, TempSymbol, 0);
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = *(void *)(v7 + 1496);
    uint64_t v9 = *(void *)(v7 + 1504);
    *(unsigned char *)(v7 + 1512) = 0;
    unsigned int v10 = *(_DWORD *)(v7 + 1632);
    size_t v11 = *(uint64_t **)(v7 + 1480);
    if (v11)
    {
      do
      {
        while (1)
        {
          size_t v12 = (uint64_t **)v11;
          unsigned int v13 = *((_DWORD *)v11 + 8);
          if (v10 >= v13) {
            break;
          }
          size_t v11 = *v12;
          char v27 = v12;
          if (!*v12) {
            goto LABEL_24;
          }
        }
        if (v13 >= v10) {
          goto LABEL_5;
        }
        size_t v11 = v12[1];
      }
      while (v11);
      char v27 = v12 + 1;
    }
    else
    {
      char v27 = (uint64_t **)(v7 + 1480);
      size_t v12 = (uint64_t **)(v7 + 1480);
    }
LABEL_24:
    int v28 = *(_DWORD *)(v7 + 1632);
    size_t v29 = (char *)operator new(0x228uLL);
    *((_DWORD *)v29 + 8) = v28;
    *(_OWORD *)(v29 + 56) = 0u;
    *(_OWORD *)(v29 + 72) = 0u;
    *(_OWORD *)(v29 + 88) = 0u;
    *(_OWORD *)(v29 + 104) = 0u;
    *(_OWORD *)(v29 + 120) = 0u;
    *(_OWORD *)(v29 + 136) = 0u;
    *(_OWORD *)(v29 + 168) = 0u;
    *(_OWORD *)(v29 + 184) = 0u;
    *(_OWORD *)(v29 + 200) = 0u;
    *(_OWORD *)(v29 + 216) = 0u;
    *(_OWORD *)(v29 + 232) = 0u;
    *(_OWORD *)(v29 + 248) = 0u;
    *((void *)v29 + 65) = 0;
    *(_OWORD *)(v29 + 264) = 0u;
    *(_OWORD *)(v29 + 280) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    *(_OWORD *)(v29 + 296) = 0u;
    *(_OWORD *)(v29 + 312) = 0u;
    *(_OWORD *)(v29 + 328) = 0u;
    *(_OWORD *)(v29 + 344) = 0u;
    *(_OWORD *)(v29 + 360) = 0u;
    *(_OWORD *)(v29 + 376) = 0u;
    *(_OWORD *)(v29 + 392) = 0u;
    *(_OWORD *)(v29 + 408) = 0u;
    *(_OWORD *)(v29 + 424) = 0u;
    *(_OWORD *)(v29 + 440) = 0u;
    *(_OWORD *)(v29 + 456) = 0u;
    *(_OWORD *)(v29 + 472) = 0u;
    *(_OWORD *)(v29 + 488) = 0u;
    *(_OWORD *)(v29 + 504) = 0u;
    *(_OWORD *)(v29 + 152) = 0u;
    *((void *)v29 + 6) = v29 + 64;
    *((_DWORD *)v29 + 15) = 3;
    *((void *)v29 + 17) = v29 + 152;
    *((_DWORD *)v29 + 37) = 3;
    *((void *)v29 + 47) = 0;
    *((void *)v29 + 46) = 0;
    *((void *)v29 + 48) = 0x1000000000;
    *((_OWORD *)v29 + 25) = 0u;
    *((_OWORD *)v29 + 26) = 0u;
    *((_OWORD *)v29 + 27) = 0u;
    *(void *)(v29 + 445) = 0;
    v29[497] = 1;
    *((void *)v29 + 64) = 0;
    *((void *)v29 + 63) = 0;
    *((_DWORD *)v29 + 130) = 0;
    *((void *)v29 + 66) = 0;
    *((void *)v29 + 68) = 0;
    *((void *)v29 + 67) = 0;
    *(void *)size_t v29 = 0;
    *((void *)v29 + 1) = 0;
    *((void *)v29 + 2) = v12;
    *char v27 = (uint64_t *)v29;
    size_t v12 = (uint64_t **)v29;
    char v30 = (uint64_t *)v29;
    uint64_t v31 = **(void **)(v7 + 1472);
    if (v31)
    {
      *(void *)(v7 + 1472) = v31;
      char v30 = *v27;
    }
    sub_1CB8358B8(*(uint64_t **)(v7 + 1480), v30);
    ++*(void *)(v7 + 1488);
LABEL_5:
    v33[0] = (uint64_t)a2;
    int v14 = (char **)sub_1CCBBEBC4((uint64_t)(v12 + 63), v33);
    BOOL v15 = v14;
    unsigned int v17 = v14[1];
    unint64_t v16 = (unint64_t)v14[2];
    if ((unint64_t)v17 >= v16)
    {
      size_t v19 = *v14;
      uint64_t v20 = (v17 - *v14) >> 5;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 59) {
        abort();
      }
      uint64_t v22 = v16 - (void)v19;
      if (v22 >> 4 > v21) {
        unint64_t v21 = v22 >> 4;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 59) {
          sub_1CB833614();
        }
        long long v24 = (char *)operator new(32 * v23);
      }
      else
      {
        long long v24 = 0;
      }
      uint64_t v25 = &v24[32 * v20];
      *(void *)uint64_t v25 = v8;
      *((void *)v25 + 1) = v9;
      *((void *)v25 + 2) = TempSymbol;
      v25[24] = 0;
      *(_DWORD *)(v25 + 25) = *(_DWORD *)v32;
      *((_DWORD *)v25 + 7) = *(_DWORD *)&v32[3];
      size_t v18 = v25 + 32;
      if (v17 != v19)
      {
        do
        {
          long long v26 = *((_OWORD *)v17 - 2);
          *(_OWORD *)(v25 - 23) = *(_OWORD *)(v17 - 23);
          *((_OWORD *)v25 - 2) = v26;
          v25 -= 32;
          v17 -= 32;
        }
        while (v17 != v19);
        unsigned int v17 = *v15;
      }
      *BOOL v15 = v25;
      v15[1] = v18;
      v15[2] = &v24[32 * v23];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)unsigned int v17 = v8;
      *((void *)v17 + 1) = v9;
      *((void *)v17 + 2) = TempSymbol;
      v17[24] = 0;
      *(_DWORD *)(v17 + 25) = *(_DWORD *)v32;
      *((_DWORD *)v17 + 7) = *(_DWORD *)&v32[3];
      size_t v18 = v17 + 32;
    }
    v15[1] = v18;
  }
}

void llvm::MCLineSection::addEndEntry(llvm::MCLineSection *this, llvm::MCSymbol *a2)
{
  unint64_t AssociatedFragment = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a2 + 2) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3));
    *(void *)a2 = *(void *)a2 & 7 | AssociatedFragment;
  }
  uint64_t v29 = *(void *)(AssociatedFragment + 16);
  *(void *)&long long v28 = 0;
  char v5 = sub_1CD3C8538((uint64_t *)this, &v29, &v28);
  uint64_t v6 = v28;
  if ((v5 & 1) == 0) {
    uint64_t v6 = *(void *)this + 16 * *((unsigned int *)this + 4);
  }
  if (v6 != *(void *)this + 16 * *((unsigned int *)this + 4))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 8);
    uint64_t v8 = *((void *)this + 3);
    uint64_t v9 = v8 + 32 * v7;
    if (*((void *)this + 4) != v9)
    {
      unint64_t v12 = *(void *)(v9 + 24);
      size_t v11 = (char **)(v9 + 24);
      unint64_t v10 = v12;
      int v14 = v11 - 1;
      unsigned int v13 = *(v11 - 1);
      long long v28 = *(v13 - 2);
      LODWORD(v29) = *(_DWORD *)((char *)v13 - 7);
      *(_DWORD *)((char *)&v29 + 3) = *((_DWORD *)v13 - 1);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v16 = v8 + 32 * v7;
        size_t v19 = *(_OWORD **)(v16 + 8);
        unsigned int v17 = (char **)(v16 + 8);
        size_t v18 = v19;
        uint64_t v20 = ((char *)v13 - (char *)v19) >> 5;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 59) {
          abort();
        }
        uint64_t v22 = v10 - (void)v18;
        if (v22 >> 4 > v21) {
          unint64_t v21 = v22 >> 4;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          if (v23 >> 59) {
            sub_1CB833614();
          }
          long long v24 = (char *)operator new(32 * v23);
        }
        else
        {
          long long v24 = 0;
        }
        uint64_t v25 = &v24[32 * v20];
        long long v26 = &v24[32 * v23];
        *(_OWORD *)uint64_t v25 = v28;
        *((void *)v25 + 2) = a2;
        v25[24] = 1;
        *(_DWORD *)(v25 + 25) = v29;
        *((_DWORD *)v25 + 7) = *(_DWORD *)((char *)&v29 + 3);
        BOOL v15 = v25 + 32;
        if (v13 == v18)
        {
          *unsigned int v17 = v25;
          *int v14 = v15;
          *size_t v11 = v26;
        }
        else
        {
          do
          {
            long long v27 = *(v13 - 2);
            *(_OWORD *)(v25 - 23) = *(_OWORD *)((char *)v13 - 23);
            *((_OWORD *)v25 - 2) = v27;
            v25 -= 32;
            v13 -= 2;
          }
          while (v13 != v18);
          unsigned int v13 = *v17;
          *unsigned int v17 = v25;
          *int v14 = v15;
          *size_t v11 = v26;
          if (!v13) {
            goto LABEL_8;
          }
        }
        operator delete(v13);
      }
      else
      {
        _OWORD *v13 = *(v13 - 2);
        *((void *)v13 + 2) = a2;
        *((unsigned char *)v13 + 24) = 1;
        *(_DWORD *)((char *)v13 + 25) = *(_DWORD *)((char *)v13 - 7);
        *((_DWORD *)v13 + 7) = *((_DWORD *)v13 - 1);
        BOOL v15 = (char *)(v13 + 2);
      }
LABEL_8:
      *int v14 = v15;
    }
  }
}

uint64_t llvm::MCDwarfLineTable::emitOne(llvm::MCStreamer *a1, uint64_t a2, unsigned int **a3)
{
  int v4 = *a3;
  long long v27 = a3[1];
  if (*a3 == v27)
  {
    uint64_t v10 = 0;
LABEL_31:
    uint64_t v22 = *(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 1272);
    return v22(a1, a2, v10);
  }
  else
  {
    char v5 = 0;
LABEL_3:
    char v24 = v5;
    uint64_t v6 = 0;
    int v26 = 0;
    int v7 = 0;
    int v28 = 1;
    uint64_t v8 = 1;
    int v9 = 1;
    do
    {
      uint64_t v10 = *((void *)v4 + 2);
      uint64_t v11 = *(void *)(*((void *)a1 + 1) + 152);
      if (*((unsigned char *)v4 + 24))
      {
        uint64_t result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, void, void))(*(void *)a1 + 1280))(a1, 0x7FFFFFFFFFFFFFFFLL, v6, *((void *)v4 + 2), *(unsigned int *)(v11 + 8));
        v4 += 8;
        char v5 = 1;
        if (v4 != v27) {
          goto LABEL_3;
        }
        return result;
      }
      unint64_t v12 = *v4;
      uint64_t v13 = v4[1];
      if (v9 != v12)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 4, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v12, 0);
        int v9 = v12;
      }
      unint64_t v14 = *((unsigned __int16 *)v4 + 4);
      if (v7 != v14)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 5, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v14, 0);
        int v7 = v14;
      }
      unint64_t v15 = v4[3];
      if (v15 && *(unsigned __int16 *)(*((void *)a1 + 1) + 1624) >= 4u)
      {
        uint64_t v19 = 1;
        unint64_t v20 = v4[3];
        do
        {
          ++v19;
          BOOL v21 = v20 > 0x7F;
          v20 >>= 7;
        }
        while (v21);
        unint64_t v25 = v19;
        (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a1 + 520))(a1, 0, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v25, 0);
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 4, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v15, 0);
      }
      unint64_t v16 = *((unsigned __int8 *)v4 + 11);
      if (v26 != v16)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 12, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v16, 0);
        int v26 = v16;
      }
      int v17 = *((unsigned __int8 *)v4 + 10);
      if ((v28 ^ v17))
      {
        int v28 = *((unsigned __int8 *)v4 + 10);
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 6, 1);
        LOBYTE(v17) = *((unsigned char *)v4 + 10);
      }
      if ((v17 & 2) != 0)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 7, 1);
        LOBYTE(v17) = *((unsigned char *)v4 + 10);
      }
      if ((v17 & 4) != 0)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 10, 1);
        LOBYTE(v17) = *((unsigned char *)v4 + 10);
      }
      if ((v17 & 8) != 0) {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 11, 1);
      }
      uint64_t result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1280))(a1, v13 - v8, v6, v10, *(unsigned int *)(v11 + 8));
      uint64_t v8 = v4[1];
      v4 += 8;
      uint64_t v6 = v10;
    }
    while (v4 != v27);
    if ((v24 & 1) == 0) {
      goto LABEL_31;
    }
  }
  return result;
}

void llvm::MCDwarfLineTable::emit(llvm::MCStreamer *a1, int a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (*(void *)(v2 + 1488))
  {
    v18[0] = 0;
    char v20 = 0;
    if (*(unsigned __int16 *)(v2 + 1624) >= 5u)
    {
      uint64_t v14 = 0;
      v12[0] = 0;
      v12[1] = 0;
      uint64_t v11 = 0;
      int v13 = 0;
      uint64_t v15 = 0x100000007;
      char v16 = 0;
      if (*(unsigned char *)(*(void *)(v2 + 152) + 424)) {
        uint64_t v11 = *(void *)(*(void *)(*(void *)(v2 + 168) + 96) + 8);
      }
      sub_1CD6AC038((uint64_t)v18, (uint64_t)&v11);
      llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)v12);
    }
    (*(void (**)(llvm::MCStreamer *, void, void))(*(void *)a1 + 168))(a1, *(void *)(*(void *)(v2 + 168) + 88), 0);
    char v5 = *(void **)(v2 + 1472);
    uint64_t v6 = (void *)(v2 + 1480);
    if (v5 != v6)
    {
      int v7 = a2 & 0xFFFFFF;
      do
      {
        llvm::MCDwarfLineTable::emitCU((llvm::MCDwarfLineTableHeader *)(v5 + 5), a1, v7, (uint64_t)v18);
        uint64_t v8 = (void *)v5[1];
        if (v8)
        {
          do
          {
            int v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (void *)v5[2];
            BOOL v10 = *v9 == (void)v5;
            char v5 = v9;
          }
          while (!v10);
        }
        char v5 = v9;
      }
      while (v9 != v6);
    }
    if (v20)
    {
      llvm::MCDwarfLineStr::emitSection((llvm::MCDwarfLineStr *)v18, a1);
      if (v20) {
        llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)&v19);
      }
    }
  }
}

uint64_t llvm::MCDwarfLineTable::emitCU(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, uint64_t a4)
{
  llvm::MCDwarfLineTableHeader::Emit(a1, a2, a3 & 0xFFFFFF, byte_1CFB28850, a3 - 1, a4);
  uint64_t v7 = v6;
  int v9 = (uint64_t *)*((void *)a1 + 61);
  uint64_t v8 = (uint64_t *)*((void *)a1 + 62);
  while (v9 != v8)
  {
    BOOL v10 = (unsigned int **)(v9 + 1);
    uint64_t v11 = *v9;
    v9 += 4;
    llvm::MCDwarfLineTable::emitOne(a2, v11, v10);
  }
  unint64_t v12 = *(uint64_t (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 192);

  return v12(a2, v7, 0);
}

uint64_t llvm::MCDwarfLineTableHeader::Emit(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t TempSymbol = *(void *)a1;
  if (!*(void *)a1)
  {
    v22[0] = "tmp";
    __int16 v23 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v10, (const llvm::Twine *)v22, 1);
  }
  (*(void (**)(llvm::MCStreamer *, uint64_t))(*(void *)a2 + 1264))(a2, TempSymbol);
  if (*(unsigned char *)(v10 + 1626)) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = 4;
  }
  v22[0] = "debug_line";
  __int16 v23 = 259;
  char v20 = "unit length";
  __int16 v21 = 259;
  (*(void (**)(llvm::MCStreamer *, void *, const char **))(*(void *)a2 + 1256))(a2, v22, &v20);
  uint64_t v13 = *(unsigned __int16 *)(v10 + 1624);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, v13, 2);
  if (v13 >= 5)
  {
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, *(unsigned int *)(*(void *)(v10 + 152) + 8), 1);
    (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, 0, 1);
  }
  v22[0] = "prologue_start";
  __int16 v23 = 259;
  uint64_t v14 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v10, (const llvm::Twine *)v22, 1);
  v22[0] = "prologue_end";
  __int16 v23 = 259;
  uint64_t v15 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v10, (const llvm::Twine *)v22, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 840))(a2, v15, v14, v12);
  (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 192))(a2, v14, 0);
  (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, *(unsigned int *)(*(void *)(v10 + 152) + 28), 1);
  if (v13 >= 4) {
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, 1, 1);
  }
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, 1, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, (uint64_t)(__int16)a3 >> 8, 1);
  (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, BYTE2(a3), 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, a5 + 1, 1);
  for (; a5; --a5)
  {
    uint64_t v16 = *a4++;
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, v16, 1);
  }
  if (v13 > 4) {
    llvm::MCDwarfLineTableHeader::emitV5FileDirTables((uint64_t)a1, a2, a6);
  }
  else {
    llvm::MCDwarfLineTableHeader::emitV2FileDirTables(a1, a2);
  }
  (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a2 + 192))(a2, v15, 0);
  return TempSymbol;
}

uint64_t llvm::MCDwarfLineTableHeader::Emit(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, uint64_t a4)
{
  return llvm::MCDwarfLineTableHeader::Emit(a1, a2, a3 & 0xFFFFFF, byte_1CFB28850, a3 - 1, a4);
}

uint64_t llvm::MCDwarfLineTableHeader::emitV2FileDirTables(llvm::MCDwarfLineTableHeader *this, llvm::MCStreamer *a2)
{
  uint64_t v4 = *((unsigned int *)this + 4);
  if (v4)
  {
    char v5 = (uint64_t *)*((void *)this + 1);
    uint64_t v6 = 24 * v4;
    do
    {
      char v7 = *((unsigned char *)v5 + 23);
      BOOL v8 = v7 < 0;
      if (v7 >= 0) {
        int v9 = v5;
      }
      else {
        int v9 = (uint64_t *)*v5;
      }
      uint64_t v10 = v7 & 0x7F;
      if (v8) {
        uint64_t v11 = v5[1];
      }
      else {
        uint64_t v11 = v10;
      }
      (*(void (**)(llvm::MCStreamer *, uint64_t *, uint64_t))(*(void *)a2 + 488))(a2, v9, v11);
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a2 + 488))(a2, &unk_1CFB2885C, 1);
      v5 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, 0, 1);
  if (*((_DWORD *)this + 26) >= 2u)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 1;
    do
    {
      uint64_t v14 = *((void *)this + 12) + v12;
      uint64_t v17 = *(void *)(v14 + 72);
      uint64_t v15 = v14 + 72;
      uint64_t v16 = v17;
      char v18 = *(unsigned char *)(v15 + 23);
      if (v18 >= 0) {
        uint64_t v19 = v15;
      }
      else {
        uint64_t v19 = v16;
      }
      uint64_t v20 = *(void *)(v15 + 8);
      if (v18 >= 0) {
        uint64_t v21 = v18 & 0x7F;
      }
      else {
        uint64_t v21 = v20;
      }
      (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 488))(a2, v19, v21);
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a2 + 488))(a2, &unk_1CFB2885C, 1);
      llvm::MCStreamer::emitULEB128IntValue(a2, *(unsigned int *)(*((void *)this + 12) + v12 + 96), 0);
      (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, 0, 1);
      (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520))(a2, 0, 1);
      ++v13;
      v12 += 72;
    }
    while (v13 < *((unsigned int *)this + 26));
  }
  uint64_t v22 = *(uint64_t (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)a2 + 520);

  return v22(a2, 0, 1);
}

void llvm::MCDwarfLineTableHeader::emitV5FileDirTables(uint64_t a1, llvm::MCStreamer *a2, uint64_t a3)
{
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, 1, 1);
  llvm::MCStreamer::emitULEB128IntValue(a2, 1uLL, 0);
  if (*(unsigned char *)(a3 + 64)) {
    unint64_t v6 = 31;
  }
  else {
    unint64_t v6 = 8;
  }
  llvm::MCStreamer::emitULEB128IntValue(a2, v6, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, *(unsigned int *)(a1 + 16) + 1, 0);
  char v7 = *(unsigned char *)(a1 + 383);
  if (v7 < 0)
  {
    if (*(void *)(a1 + 368)) {
      goto LABEL_6;
    }
LABEL_13:
    uint64_t v10 = *((void *)a2 + 1);
    BOOL v8 = *(void **)(v10 + 1272);
    uint64_t v9 = *(void *)(v10 + 1280);
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a1 + 383)) {
    goto LABEL_13;
  }
LABEL_6:
  if (v7 >= 0) {
    BOOL v8 = (void *)(a1 + 360);
  }
  else {
    BOOL v8 = *(void **)(a1 + 360);
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 383);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 368);
  }
LABEL_14:
  if (*(unsigned char *)(a3 + 64))
  {
    llvm::MCDwarfLineStr::emitRef(a3, a2, v8, v9);
    uint64_t v27 = *(unsigned int *)(a1 + 16);
    if (v27)
    {
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = 24 * v27;
      do
      {
        char v30 = *(unsigned char *)(v28 + 23);
        BOOL v31 = v30 < 0;
        if (v30 >= 0) {
          uint64_t v32 = (void *)v28;
        }
        else {
          uint64_t v32 = *(void **)v28;
        }
        uint64_t v33 = v30 & 0x7F;
        if (v31) {
          uint64_t v34 = *(void *)(v28 + 8);
        }
        else {
          uint64_t v34 = v33;
        }
        llvm::MCDwarfLineStr::emitRef(a3, a2, v32, v34);
        v28 += 24;
        v29 -= 24;
      }
      while (v29);
    }
  }
  else
  {
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a2 + 488))(a2, v8, v9);
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a2 + 488))(a2, &unk_1CFB2885C, 1);
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = *(uint64_t **)(a1 + 8);
      uint64_t v13 = 24 * v11;
      do
      {
        char v14 = *((unsigned char *)v12 + 23);
        BOOL v15 = v14 < 0;
        if (v14 >= 0) {
          uint64_t v16 = v12;
        }
        else {
          uint64_t v16 = (uint64_t *)*v12;
        }
        uint64_t v17 = v14 & 0x7F;
        if (v15) {
          uint64_t v18 = v12[1];
        }
        else {
          uint64_t v18 = v17;
        }
        (*(void (**)(llvm::MCStreamer *, uint64_t *, uint64_t))(*(void *)a2 + 488))(a2, v16, v18);
        (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a2 + 488))(a2, &unk_1CFB2885C, 1);
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
    }
  }
  uint64_t v19 = 2;
  if (*(unsigned char *)(a1 + 457)) {
    uint64_t v19 = 3;
  }
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, v19 + *(unsigned __int8 *)(a1 + 456), 1);
  llvm::MCStreamer::emitULEB128IntValue(a2, 1uLL, 0);
  if (*(unsigned char *)(a3 + 64)) {
    unint64_t v20 = 31;
  }
  else {
    unint64_t v20 = 8;
  }
  llvm::MCStreamer::emitULEB128IntValue(a2, v20, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, 2uLL, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, 0xFuLL, 0);
  if (*(unsigned char *)(a1 + 457))
  {
    llvm::MCStreamer::emitULEB128IntValue(a2, 5uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(a2, 0x1EuLL, 0);
  }
  if (*(unsigned char *)(a1 + 456))
  {
    llvm::MCStreamer::emitULEB128IntValue(a2, 0x2001uLL, 0);
    if (*(unsigned char *)(a3 + 64)) {
      unint64_t v21 = 31;
    }
    else {
      unint64_t v21 = 8;
    }
    llvm::MCStreamer::emitULEB128IntValue(a2, v21, 0);
  }
  unsigned int v22 = *(_DWORD *)(a1 + 104);
  if (v22 <= 1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22;
  }
  llvm::MCStreamer::emitULEB128IntValue(a2, v23, 0);
  uint64_t v24 = a1 + 384;
  if ((*(char *)(a1 + 407) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 407)) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (!*(void *)(a1 + 392)) {
LABEL_41:
  }
    uint64_t v24 = *(void *)(a1 + 96) + 72;
LABEL_42:
  sub_1CCBBB4B0(a2, v24, *(unsigned __int8 *)(a1 + 457), *(unsigned __int8 *)(a1 + 456), a3);
  if (*(_DWORD *)(a1 + 104) >= 2u)
  {
    unint64_t v25 = 1;
    uint64_t v26 = 72;
    do
    {
      sub_1CCBBB4B0(a2, *(void *)(a1 + 96) + v26, *(unsigned __int8 *)(a1 + 457), *(unsigned __int8 *)(a1 + 456), a3);
      ++v25;
      v26 += 72;
    }
    while (v25 < *(unsigned int *)(a1 + 104));
  }
}

void sub_1CCBBB4B0(llvm::MCStreamer *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  char v10 = *(unsigned char *)(a2 + 23);
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    uint64_t v12 = (void *)a2;
  }
  else {
    uint64_t v12 = *(void **)a2;
  }
  uint64_t v13 = v10 & 0x7F;
  if (v11) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v14 = v13;
  }
  if (*(unsigned char *)(a5 + 64))
  {
    llvm::MCDwarfLineStr::emitRef(a5, a1, v12, v14);
  }
  else
  {
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a1 + 488))(a1, v12, v14);
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a1 + 488))(a1, &unk_1CFB2885C, 1);
  }
  llvm::MCStreamer::emitULEB128IntValue(a1, *(unsigned int *)(a2 + 24), 0);
  if (a3) {
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a1 + 504))(a1, a2 + 28, 16);
  }
  if (a4)
  {
    if (*(unsigned char *)(a2 + 64)) {
      uint64_t v15 = *(void *)(a2 + 56);
    }
    else {
      uint64_t v15 = 0;
    }
    if (*(unsigned char *)(a2 + 64)) {
      uint64_t v16 = *(void **)(a2 + 48);
    }
    else {
      uint64_t v16 = 0;
    }
    if (*(unsigned char *)(a5 + 64))
    {
      llvm::MCDwarfLineStr::emitRef(a5, a1, v16, v15);
    }
    else
    {
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a1 + 488))(a1, v16, v15);
      uint64_t v17 = *(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(void *)a1 + 488);
      v17(a1, &unk_1CFB2885C, 1);
    }
  }
}

void llvm::MCDwarfLineTable::tryGetFile(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v10 = *a4;
  char v11 = *((unsigned char *)a4 + 16);
  long long v8 = *(_OWORD *)a5;
  uint64_t v9 = *(void *)(a5 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile(a1, a2, a3, (size_t)&v10, &v8, a6, a7, a8);
}

void llvm::MCDwarfLineTableHeader::tryGetFile(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, size_t a4@<X3>, long long *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = *(const char **)a2;
  size_t v16 = *(void *)(a2 + 8);
  char v18 = a1[383];
  if (v18 >= 0) {
    uint64_t v19 = a1 + 360;
  }
  else {
    uint64_t v19 = (const void *)*((void *)a1 + 45);
  }
  uint64_t v20 = v18 & 0x7F;
  if (v18 < 0) {
    uint64_t v20 = *((void *)a1 + 46);
  }
  if (v16 == v20)
  {
    if (!v16 || (a1 = (char *)memcmp(v17, v19, v16), !a1))
    {
      size_t v16 = 0;
      uint64_t v17 = "";
      *(void *)a2 = "";
      *(void *)(a2 + 8) = 0;
    }
  }
  if (!a3[1])
  {
    size_t v16 = 0;
    *a3 = (uint64_t)"<stdin>";
    a3[1] = 7;
    uint64_t v17 = "";
    *(void *)a2 = "";
    *(void *)(a2 + 8) = 0;
  }
  v127 = (const void **)a2;
  unsigned int v21 = *((_DWORD *)v14 + 26);
  if (!v21)
  {
    char v22 = *(unsigned char *)(a4 + 16);
    v14[457] &= v22;
    v14[458] |= v22;
    v14[456] = *((unsigned char *)a5 + 16);
  }
  if (a6 >= 5)
  {
    long long v142 = *(_OWORD *)a4;
    char v143 = *(unsigned char *)(a4 + 16);
    char v23 = v14[407];
    int v24 = v23;
    uint64_t v25 = v23 & 0x7F;
    size_t v26 = v24 >= 0 ? v25 : *((void *)v14 + 49);
    if (v26 && v26 == a3[1])
    {
      uint64_t v27 = v24 >= 0 ? v14 + 384 : (char *)*((void *)v14 + 48);
      a1 = (char *)memcmp(v27, (const void *)*a3, v26);
      if (!a1)
      {
        if (v14[428] && v143)
        {
          if (*(void *)(v14 + 412) != (void)v142 || *(void *)(v14 + 420) != *((void *)&v142 + 1)) {
            goto LABEL_24;
          }
        }
        else if ((v14[428] == 0) == (v143 != 0))
        {
          goto LABEL_24;
        }
        *(unsigned char *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = 0;
        return;
      }
    }
  }
LABEL_24:
  uint64_t v124 = a5;
  size_t v125 = a4;
  if (a7) {
    goto LABEL_73;
  }
  uint64_t v138 = __dst;
  *(void *)long long __dst = v140;
  uint64_t v28 = a3;
  if (v21 <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v21;
  }
  *(_OWORD *)&__dst[8] = xmmword_1CD96DBF0;
  v128[0] = v17;
  v128[1] = v16;
  v128[2] = 0;
  __int16 v129 = 1797;
  uint64_t v31 = *v28;
  size_t v30 = v28[1];
  uint64_t v122 = v28;
  int v131 = 0;
  char v135 = 0;
  uint64_t v136 = 0;
  int v137 = 0;
  uint64_t v130 = &unk_1F2646FA8;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v32 = llvm::Twine::printOneChild((llvm::raw_ostream *)a1, (llvm::raw_ostream *)&v130, (uint64_t)v128, a4, 2);
  llvm::Twine::printOneChild(v32, (llvm::raw_ostream *)&v130, v31, v30, 5);
  uint64_t v130 = &unk_1F2646B98;
  if (v137 == 1 && v132) {
    MEMORY[0x1D25D9CB0](v132, 0x1000C8077774924);
  }
  size_t v33 = *(void *)&__dst[8];
  __s1 = *(unsigned __int8 **)__dst;
  unsigned int v34 = *((_DWORD *)v14 + 84);
  if (!v34)
  {
    *(void *)(v14 + 340) = 0;
    uint64_t v49 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v49)
    {
      size_t v117 = "Allocation failed";
      goto LABEL_163;
    }
    v49[16] = 2;
    *((void *)v14 + 41) = v49;
    unsigned int v34 = 16;
    *((_DWORD *)v14 + 84) = 16;
  }
  int v120 = v29;
  uint64_t v118 = a8;
  int v35 = 0;
  if (v33)
  {
    size_t v36 = v33;
    char v37 = __s1;
    do
    {
      int v38 = *v37++;
      int v35 = 33 * v35 + v38;
      --v36;
    }
    while (v36);
  }
  uint64_t v39 = *((void *)v14 + 41);
  unsigned int v40 = v34 - 1;
  uint64_t v41 = v39 + 8 * v34 + 8;
  int v42 = -1;
  int v43 = 1;
  int v44 = v35;
  while (1)
  {
    uint64_t v45 = v44 & v40;
    uint64_t v46 = *(void **)(v39 + 8 * v45);
    if (!v46) {
      break;
    }
    if (v46 == (void *)-8)
    {
      if (v42 == -1) {
        int v42 = v44 & v40;
      }
    }
    else if (*(_DWORD *)(v41 + 4 * v45) == v35 {
           && v33 == *v46
    }
           && (!v33 || !memcmp(__s1, (char *)v46 + *((unsigned int *)v14 + 87), v33)))
    {
      goto LABEL_48;
    }
    int v44 = v43 + v45;
    ++v43;
  }
  uint64_t v47 = v42;
  if (v42 == -1)
  {
    uint64_t v47 = v45;
    uint64_t v45 = v45;
  }
  else
  {
    uint64_t v45 = v42;
  }
  *(_DWORD *)(v41 + 4 * v47) = v35;
  uint64_t v46 = *(void **)(v39 + 8 * v45);
LABEL_48:
  if (v46)
  {
    a7 = v120;
    a3 = v122;
    if (v46 != (void *)-8)
    {
      uint64_t v50 = *(void *)(v39 + 8 * v45);
      a8 = v118;
      *(unsigned char *)(v118 + 8) &= ~1u;
      *(_DWORD *)uint64_t v118 = *(_DWORD *)(v50 + 8);
      char v51 = 1;
      goto LABEL_69;
    }
    --*((_DWORD *)v14 + 86);
  }
  unint64_t v52 = (char *)operator new(v33 + 17, (std::align_val_t)8uLL);
  unsigned int v53 = v52;
  int v54 = v52 + 16;
  a7 = v120;
  a3 = v122;
  if (v33) {
    memcpy(v52 + 16, __s1, v33);
  }
  v54[v33] = 0;
  *(void *)unsigned int v53 = v33;
  *((_DWORD *)v53 + 2) = v120;
  *(void *)(v39 + 8 * v45) = v53;
  ++*((_DWORD *)v14 + 85);
  llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v14 + 328), v45);
  char v51 = 0;
  a8 = v118;
LABEL_69:
  a1 = *(char **)__dst;
  if (*(void **)__dst != v140) {
    free(*(void **)__dst);
  }
  if ((v51 & 1) == 0)
  {
    unsigned int v21 = *((_DWORD *)v14 + 26);
LABEL_73:
    if (v21 > a7) {
      goto LABEL_81;
    }
    unint64_t v55 = a7 + 1;
    if (v21 == v55) {
      goto LABEL_81;
    }
    uint64_t v56 = v21;
    if (v21 > v55)
    {
      uint64_t v58 = a3;
      uint64_t v115 = *((void *)v14 + 12) + 72 * v21 - 72;
      uint64_t v116 = 72 * v55 - 72 * v21;
      do
      {
        if (*(char *)(v115 + 23) < 0) {
          operator delete(*(void **)v115);
        }
        v115 -= 72;
        v116 += 72;
      }
      while (v116);
      goto LABEL_80;
    }
    uint64_t v57 = *((unsigned int *)v14 + 27);
    if (v57 >= v55)
    {
      uint64_t v58 = a3;
      uint64_t v59 = (char *)*((void *)v14 + 12);
LABEL_78:
      if (v55 != v56) {
        bzero(&v59[72 * v56], 72 * ((72 * (v55 - v56) - 72) / 0x48) + 72);
      }
LABEL_80:
      *((_DWORD *)v14 + 26) = v55;
      a3 = v58;
LABEL_81:
      unsigned int v60 = a7;
      uint64_t v61 = *((void *)v14 + 12);
      uint64_t v62 = v61 + 72 * a7;
      if (*(char *)(v62 + 23) < 0) {
        uint64_t v63 = *(void *)(v62 + 8);
      }
      else {
        uint64_t v63 = *(unsigned __int8 *)(v62 + 23);
      }
      int v64 = v127;
      if (v63)
      {
        llvm::inconvertibleErrorCode((llvm *)a1);
        operator new();
      }
      if (v14[456] != *((unsigned char *)v124 + 16))
      {
        llvm::inconvertibleErrorCode((llvm *)a1);
        operator new();
      }
      size_t v65 = (size_t)v127[1];
      unsigned int v121 = a7;
      char v123 = a3;
      if (!v65)
      {
        uint64_t v66 = *a3;
        uint64_t v67 = a3[1];
        *(void *)&__dst[16] = 0;
        v140[0] = 0;
        *(void *)long long __dst = v66;
        *(void *)&__dst[8] = v67;
        v140[1] = v67;
        int v141 = 0;
        llvm::sys::path::reverse_iterator::operator++((uint64_t)__dst);
        uint64_t v68 = v140[0];
        if (v140[0])
        {
          uint64_t v69 = a8;
          uint64_t v70 = *(void *)&__dst[16];
          std::string::size_type v71 = (const void *)*a3;
          unint64_t v72 = a3[1];
          unint64_t v73 = sub_1CD0E3AC0((unsigned __int8 *)*a3, v72, 0);
          if (v72 >= v73) {
            unint64_t v74 = v73;
          }
          else {
            unint64_t v74 = v72;
          }
          int v64 = v127;
          if (v73 == -1)
          {
            unint64_t v74 = 0;
            uint64_t v75 = 0;
          }
          else
          {
            uint64_t v75 = v71;
          }
          llvm::raw_ostream *v127 = v75;
          v127[1] = (const void *)v74;
          if (!v74)
          {
            LODWORD(v65) = 0;
            a8 = v69;
            goto LABEL_138;
          }
          *a3 = v70;
          a3[1] = v68;
          a8 = v69;
        }
        size_t v65 = (size_t)v64[1];
        if (!v65) {
          goto LABEL_138;
        }
      }
      uint64_t v119 = a8;
      uint64_t v76 = *((void *)v14 + 1);
      unint64_t v77 = *((unsigned int *)v14 + 4);
      if (v77)
      {
        int v78 = *v64;
        uint64_t v79 = 24 * v77;
        uint64_t v80 = *((void *)v14 + 1);
        while (1)
        {
          char v81 = *(unsigned char *)(v80 + 23);
          int v82 = v81;
          uint64_t v83 = v81 & 0x7F;
          if (v82 < 0) {
            uint64_t v83 = *(void *)(v80 + 8);
          }
          if (v83 == v65)
          {
            unsigned int v84 = v82 >= 0 ? (const void *)v80 : *(const void **)v80;
            if (!memcmp(v84, v78, v65)) {
              break;
            }
          }
          v80 += 24;
          v79 -= 24;
          if (!v79)
          {
            uint64_t v80 = v76 + 24 * v77;
            break;
          }
        }
        int v64 = v127;
      }
      else
      {
        uint64_t v80 = *((void *)v14 + 1);
      }
      unsigned int v96 = -1431655765 * ((v80 - v76) >> 3);
      a8 = v119;
      if (v77 <= v96)
      {
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_156;
        }
        std::string v97 = *v64;
        if (v65 >= 0x17)
        {
          uint64_t v100 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17) {
            uint64_t v100 = v65 | 7;
          }
          uint64_t v101 = v100 + 1;
          __int16 v98 = operator new(v100 + 1);
          *(void *)&__dst[8] = v65;
          *(void *)&__dst[16] = v101 | 0x8000000000000000;
          *(void *)long long __dst = v98;
          uint64_t v99 = (uint64_t)(v14 + 8);
        }
        else
        {
          __dst[23] = v65;
          __int16 v98 = __dst;
          uint64_t v99 = (uint64_t)(v14 + 8);
        }
        memmove(v98, v97, v65);
        v98[v65] = 0;
        unint64_t v102 = sub_1CBFCD38C(v99, (unint64_t)__dst, 1);
        uint64_t v103 = *((void *)v14 + 1) + 24 * *((unsigned int *)v14 + 4);
        long long v104 = *(_OWORD *)v102;
        *(void *)(v103 + 16) = *(void *)(v102 + 16);
        *(_OWORD *)uint64_t v103 = v104;
        *(void *)(v102 + 8) = 0;
        *(void *)(v102 + 16) = 0;
        *(void *)unint64_t v102 = 0;
        ++*((_DWORD *)v14 + 4);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
      LODWORD(v65) = v96 + 1;
LABEL_138:
      size_t v105 = v123[1];
      if (v105 <= 0x7FFFFFFFFFFFFFF7)
      {
        uint64_t v106 = a8;
        __int16 v107 = (const void *)*v123;
        if (v105 >= 0x17)
        {
          uint64_t v109 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v105 | 7) != 0x17) {
            uint64_t v109 = v105 | 7;
          }
          uint64_t v110 = v109 + 1;
          long long v108 = operator new(v109 + 1);
          *(void *)&__dst[8] = v105;
          *(void *)&__dst[16] = v110 | 0x8000000000000000;
          *(void *)long long __dst = v108;
        }
        else
        {
          __dst[23] = v123[1];
          long long v108 = __dst;
          if (!v105) {
            goto LABEL_146;
          }
        }
        memmove(v108, v107, v105);
LABEL_146:
        v108[v105] = 0;
        if (*(char *)(v62 + 23) < 0) {
          operator delete(*(void **)v62);
        }
        *(_OWORD *)uint64_t v62 = *(_OWORD *)__dst;
        *(void *)(v62 + 16) = *(void *)&__dst[16];
        uint64_t v111 = v61 + 72 * v60;
        *(_DWORD *)(v111 + 24) = v65;
        long long v112 = *(_OWORD *)v125;
        *(unsigned char *)(v111 + 44) = *(unsigned char *)(v125 + 16);
        *(_OWORD *)(v111 + 28) = v112;
        char v113 = *(unsigned char *)(v125 + 16);
        v14[457] &= v113;
        v14[458] |= v113;
        long long v114 = *v124;
        *(void *)(v111 + 64) = *((void *)v124 + 2);
        *(_OWORD *)(v111 + 48) = v114;
        if (*((unsigned char *)v124 + 16)) {
          v14[456] = 1;
        }
        *(unsigned char *)(v106 + 8) &= ~1u;
        *(_DWORD *)uint64_t v106 = v121;
        return;
      }
LABEL_156:
      abort();
    }
    unint64_t v85 = (2 * v57) | 1;
    if (v85 <= v55) {
      unint64_t v85 = a7 + 1;
    }
    if (v85 >= 0xFFFFFFFF) {
      uint64_t v86 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v86 = v85;
    }
    a1 = (char *)malloc_type_malloc(72 * v86, 0x4065EBACuLL);
    if (a1)
    {
      uint64_t v59 = a1;
      size_t v87 = (char *)*((void *)v14 + 12);
      int v88 = *((_DWORD *)v14 + 26);
      if (v88)
      {
        unsigned int v89 = &v87[72 * v88];
        unint64_t v90 = a1;
        do
        {
          long long v91 = *(_OWORD *)v87;
          *((void *)v90 + 2) = *((void *)v87 + 2);
          *(_OWORD *)unint64_t v90 = v91;
          *((void *)v87 + 1) = 0;
          *((void *)v87 + 2) = 0;
          *(void *)size_t v87 = 0;
          long long v92 = *(_OWORD *)(v87 + 24);
          long long v93 = *(_OWORD *)(v87 + 40);
          *(_OWORD *)(v90 + 56) = *(_OWORD *)(v87 + 56);
          *(_OWORD *)(v90 + 40) = v93;
          *(_OWORD *)(v90 + 24) = v92;
          v87 += 72;
          v90 += 72;
        }
        while (v87 != v89);
        uint64_t v58 = a3;
        size_t v87 = (char *)*((void *)v14 + 12);
        uint64_t v94 = *((unsigned int *)v14 + 26);
        if (v94)
        {
          uint64_t v95 = 72 * v94;
          do
          {
            if (v87[v95 - 49] < 0) {
              operator delete(*(void **)&v87[v95 - 72]);
            }
            v95 -= 72;
          }
          while (v95);
          size_t v87 = (char *)*((void *)v14 + 12);
        }
      }
      else
      {
        uint64_t v58 = a3;
      }
      if (v87 != v14 + 112) {
        free(v87);
      }
      *((void *)v14 + 12) = v59;
      *((_DWORD *)v14 + 27) = v86;
      uint64_t v56 = *((unsigned int *)v14 + 26);
      goto LABEL_78;
    }
    size_t v117 = "Allocation failed";
LABEL_163:
    llvm::report_bad_alloc_error((llvm *)v117, (const char *)1);
  }
}

void llvm::MCDwarfLineAddr::Emit(void *a1, int a2, uint64_t a3, unint64_t a4)
{
  v17[32] = *MEMORY[0x1E4F143B8];
  char v5 = (llvm::raw_ostream *)a1[1];
  uint64_t v14 = &v15;
  uint64_t v15 = v17;
  long long v16 = xmmword_1CD96DBF0;
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  unint64_t v6 = &unk_1F2646FA8;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  llvm::MCDwarfLineAddr::Encode(v5, *(void *)&a2 & 0xFFFFFFLL, a3, a4, (llvm::raw_ostream *)&v6);
  (*(void (**)(void *, void *, void *))(*a1 + 488))(a1, *v14, v14[1]);
  unint64_t v6 = &unk_1F2646B98;
  if (v13 == 1 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8077774924);
  }
  if (v15 != v17) {
    free(v15);
  }
}

llvm::raw_ostream *llvm::MCDwarfLineAddr::Encode(llvm::raw_ostream *result, unint64_t a2, uint64_t a3, unint64_t a4, llvm::raw_ostream *this)
{
  unint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = BYTE2(a2);
  uint64_t v9 = ~(_BYTE)a2 / BYTE2(a2);
  unint64_t v10 = *(unsigned int *)(*((void *)result + 19) + 28);
  if (v10 != 1) {
    unint64_t v6 = a4 / v10;
  }
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v6 == v9)
    {
      char v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *char v11 = 8;
      }
    }
    else if (v6)
    {
      char v18 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v18 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, 2);
      }
      else
      {
        *((void *)this + 4) = v18 + 1;
        unsigned char *v18 = 2;
      }
      do
      {
        char v27 = v6 & 0x7F | ((v6 > 0x7F) << 7);
        uint64_t v28 = (char *)*((void *)this + 4);
        if ((unint64_t)v28 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, v27);
        }
        else
        {
          *((void *)this + 4) = v28 + 1;
          *uint64_t v28 = v27;
        }
        BOOL v15 = v6 > 0x7F;
        v6 >>= 7;
      }
      while (v15);
    }
    int v29 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v29 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, 0);
    }
    else
    {
      *((void *)this + 4) = v29 + 1;
      unsigned char *v29 = 0;
    }
    size_t v30 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v30 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, 1);
    }
    else
    {
      *((void *)this + 4) = v30 + 1;
      *size_t v30 = 1;
    }
    goto LABEL_59;
  }
  unint64_t v12 = a2 >> 8;
  uint64_t v13 = a2;
  unint64_t v14 = a3 - SBYTE1(a2);
  BOOL v15 = v14 >= BYTE2(a2) || v14 + a2 > 0xFF;
  int v16 = v15;
  if (v16 == 1)
  {
    uint64_t v17 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v17 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, 3);
    }
    else
    {
      *((void *)this + 4) = v17 + 1;
      *uint64_t v17 = 3;
    }
    do
    {
      if ((unint64_t)v7 < 0x40) {
        goto LABEL_25;
      }
      uint64_t v19 = ((unint64_t)v7 >> 6) & 1;
      if (v7 >> 7 != -1) {
        LODWORD(v19) = 0;
      }
      if (v19 == 1)
      {
LABEL_25:
        char v20 = 0;
        int v21 = 1;
      }
      else
      {
        int v21 = 0;
        char v20 = 0x80;
      }
      char v22 = v20 | v7 & 0x7F;
      char v23 = (char *)*((void *)this + 4);
      if ((unint64_t)v23 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, v22);
      }
      else
      {
        *((void *)this + 4) = v23 + 1;
        *char v23 = v22;
      }
      v7 >>= 7;
    }
    while (!v21);
    uint64_t v7 = 0;
    unint64_t v14 = -(char)v12;
  }
  if (!(v7 | v6)) {
    goto LABEL_59;
  }
  uint64_t v24 = v14 + v13;
  if (v6 < (v9 | 0x100uLL))
  {
    unint64_t v25 = v24 + v6 * v8;
    if (v25 <= 0xFF)
    {
      size_t v26 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v26 < *((void *)this + 3))
      {
        *((void *)this + 4) = v26 + 1;
        *size_t v26 = v25;
        return result;
      }
      char v38 = v24 + v6 * v8;
      goto LABEL_70;
    }
    unint64_t v31 = v24 + (v6 - v9) * v8;
    if (v31 <= 0xFF)
    {
      uint64_t v32 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v32 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((void *)this + 4) = v32 + 1;
        *uint64_t v32 = 8;
      }
      unsigned int v40 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v40 < *((void *)this + 3))
      {
        *((void *)this + 4) = v40 + 1;
        *unsigned int v40 = v31;
        return result;
      }
      char v38 = v31;
      goto LABEL_70;
    }
  }
  size_t v33 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v33 >= *((void *)this + 3))
  {
    uint64_t result = llvm::raw_ostream::write(this, 2);
  }
  else
  {
    *((void *)this + 4) = v33 + 1;
    *size_t v33 = 2;
  }
  do
  {
    char v34 = v6 & 0x7F | ((v6 > 0x7F) << 7);
    int v35 = (char *)*((void *)this + 4);
    if ((unint64_t)v35 >= *((void *)this + 3))
    {
      uint64_t result = llvm::raw_ostream::write(this, v34);
    }
    else
    {
      *((void *)this + 4) = v35 + 1;
      char *v35 = v34;
    }
    BOOL v15 = v6 > 0x7F;
    v6 >>= 7;
  }
  while (v15);
  if (v16)
  {
LABEL_59:
    size_t v36 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v36 < *((void *)this + 3))
    {
      *((void *)this + 4) = v36 + 1;
      *size_t v36 = 1;
      return result;
    }
    char v37 = this;
    char v38 = 1;
    goto LABEL_71;
  }
  uint64_t v39 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v39 < *((void *)this + 3))
  {
    *((void *)this + 4) = v39 + 1;
    *uint64_t v39 = v24;
    return result;
  }
  char v38 = v24;
LABEL_70:
  char v37 = this;
LABEL_71:

  return llvm::raw_ostream::write(v37, v38);
}

llvm::MCStreamer *llvm::MCDwarfFrameEmitter::Emit(llvm::MCStreamer *this, llvm::MCObjectStreamer *a2, llvm::MCAsmBackend *a3)
{
  uint64_t v3 = this;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::MCContext *)*((void *)this + 1);
  uint64_t v5 = *((void *)v4 + 21);
  uint64_t v6 = *((void *)v4 + 19);
  uint64_t v200 = 0;
  unsigned __int8 v201 = a3;
  unint64_t v202 = this;
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)this + 4);
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) / 88;
  int v188 = (int)a3;
  uint64_t v180 = v5;
  if (!a3 || !*(void *)(v5 + 64))
  {
    if (*(unsigned char *)(v5 + 10)) {
      return this;
    }
    goto LABEL_3;
  }
  LOBYTE(v191) = *(unsigned char *)(v5 + 10) ^ 1;
  this = (llvm::MCStreamer *)llvm::MCStreamer::generateCompactUnwindEncodings((uint64_t)this, a2);
  if (v8 != v7)
  {
    char v158 = 0;
    uint64_t v159 = 88 * v10;
    uint64_t v160 = v7;
    do
    {
      unint64_t v25 = (__n128 *)*(unsigned int *)(v160 + 68);
      if (v25)
      {
        if ((v158 & 1) == 0)
        {
          (*(void (**)(llvm::MCStreamer *, void, void))(*(void *)v3 + 168))(v3, *(void *)(v180 + 64), 0);
          this = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCStreamer *, void, void, uint64_t, void))(*(void *)v3 + 640))(v3, *(unsigned int *)(v6 + 8), 0, 1, 0);
          unint64_t v25 = (__n128 *)*(unsigned int *)(v160 + 68);
        }
        LODWORD(v191) = v191 & 1 | (v25 == *(_DWORD *)(v180 + 16));
        if (v25)
        {
          uint64_t v189 = *((void *)v3 + 1);
          LODWORD(v190) = *(_DWORD *)(*(void *)(v189 + 168) + 16);
          if (*(void *)(v160 + 24)) {
            BOOL v161 = v25 == *(_DWORD *)(*(void *)(v189 + 168) + 16);
          }
          else {
            BOOL v161 = 1;
          }
          LODWORD(v162) = v25 | 0x40000000;
          if (v161) {
            uint64_t v162 = v25;
          }
          else {
            uint64_t v162 = v162;
          }
          uint64_t TempSymbol = v162;
          uint64_t v163 = 2;
          switch(*(_DWORD *)(*(void *)(v189 + 168) + 12) & 0xFLL)
          {
            case 1:
            case 5:
            case 6:
            case 7:
            case 9:
LABEL_307:
              __break(1u);
LABEL_308:
              uint64_t v176 = 4;
              goto LABEL_310;
            case 2:
            case 0xALL:
              break;
            case 3:
            case 0xBLL:
              uint64_t v163 = 4;
              break;
            case 4:
            case 0xCLL:
              uint64_t v163 = 8;
              break;
            default:
              uint64_t v163 = *(unsigned int *)(*(void *)(v189 + 152) + 8);
              break;
          }
          llvm::MCStreamer::emitSymbolValue(v3, *(const llvm::MCSymbol **)v160, v163, 0);
          unint64_t v164 = sub_1CCBBEE8C(v189, *(void *)v160, *(void *)(v160 + 8), 0);
          sub_1CCBBF2C4(v3, v164, 4);
          (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)v3 + 520))(v3, TempSymbol, 4);
          if (v25 == v190 || (uint64_t v166 = *(const llvm::MCSymbol **)(v160 + 16)) == 0) {
            (*(void (**)(llvm::MCStreamer *, void))(*(void *)v3 + 520))(v3, 0);
          }
          else {
            llvm::MCStreamer::emitSymbolValue(v3, v166, *(unsigned int *)(*(void *)(*((void *)v3 + 1) + 152) + 8), 0);
          }
          uint64_t v165 = 2;
          switch(*(_DWORD *)(v160 + 64) & 0xFLL)
          {
            case 1:
            case 5:
            case 6:
            case 7:
            case 9:
              goto LABEL_307;
            case 2:
            case 0xALL:
              break;
            case 3:
            case 0xBLL:
              uint64_t v165 = 4;
              break;
            case 4:
            case 0xCLL:
              uint64_t v165 = 8;
              break;
            default:
              uint64_t v165 = *(unsigned int *)(*(void *)(*((void *)v3 + 1) + 152) + 8);
              break;
          }
          if (v25 == v190 || (unint64_t v167 = *(const llvm::MCSymbol **)(v160 + 24)) == 0) {
            this = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCStreamer *, void))(*(void *)v3 + 520))(v3, 0);
          }
          else {
            this = (llvm::MCStreamer *)llvm::MCStreamer::emitSymbolValue(v3, v167, v165, 0);
          }
        }
        char v158 = 1;
      }
      v160 += 88;
      v159 -= 88;
    }
    while (v159);
  }
  uint64_t v5 = v180;
  if (v191)
  {
LABEL_3:
    char v11 = (void *)(v5 + 104);
    if (v188) {
      char v11 = (void *)(v5 + 456);
    }
    (*(void (**)(llvm::MCStreamer *, void, void))(*(void *)v3 + 168))(v3, *v11, 0);
    uint64_t v204 = (void **)"tmp";
    __int16 v207 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)&v204, 1);
    (*(void (**)(llvm::MCStreamer *))(*(void *)v3 + 192))(v3);
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    unsigned int v199 = 0;
    int v186 = *(unsigned __int8 *)(v5 + 11);
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    long long v195 = 0;
    uint64_t v196 = 0;
    if (v8 == v7)
    {
      char v20 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      if (v10 >= 0x2E8BA2E8BA2E8BBLL) {
        abort();
      }
      unint64_t v13 = v7 + 88 * v10;
      unint64_t v14 = (char *)operator new(v8 - v7);
      uint64_t v15 = 0;
      uint64_t v193 = (__n128 *)v14;
      uint64_t v194 = (__n128 *)v14;
      long long v195 = &v14[88 * v10];
      do
      {
        uint64_t v16 = v7 + v15;
        uint64_t v17 = &v14[v15];
        long long v18 = *(_OWORD *)(v7 + v15 + 16);
        *(_OWORD *)uint64_t v17 = *(_OWORD *)(v7 + v15);
        *((_OWORD *)v17 + 1) = v18;
        *(void *)&v14[v15 + 32] = 0;
        *((void *)v17 + 5) = 0;
        *((void *)v17 + 6) = 0;
        sub_1CCBBFCB8(&v14[v15 + 32], *(void *)(v7 + v15 + 32), *(void *)(v7 + v15 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v7 + v15 + 40) - *(void *)(v7 + v15 + 32)) >> 4));
        __n128 v12 = *(__n128 *)(v7 + v15 + 56);
        *(_OWORD *)(v17 + 65) = *(_OWORD *)(v7 + v15 + 65);
        *(__n128 *)(v17 + 56) = v12;
        v15 += 88;
      }
      while (v16 + 88 != v13);
      uint64_t v19 = (uint64_t)v193;
      char v20 = (__n128 *)&v14[v15];
      uint64_t v194 = v20;
    }
    if ((uint64_t)v20 - v19 < 1)
    {
LABEL_262:
      sub_1CCBBFE84(v19, v20, 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v20 - v19) >> 3), 0, 0, v12);
    }
    else
    {
      int v21 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      unint64_t v22 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v20 - v19) >> 3);
      while (1)
      {
        char v23 = operator new(88 * v22, v21);
        if (v23) {
          break;
        }
        BOOL v168 = v22 > 1;
        v22 >>= 1;
        if (!v168) {
          goto LABEL_262;
        }
      }
      uint64_t v24 = v23;
      sub_1CCBBFE84(v19, v20, 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v20 - v19) >> 3), v23, v22, v12);
      operator delete(v24);
    }
    unint64_t v25 = v193;
    uint64_t v189 = (uint64_t)v194;
    if (v193 == v194)
    {
LABEL_109:
      uint64_t v204 = (void **)&v193;
      sub_1CCBBFDAC(&v204);
      return (llvm::MCStreamer *)MEMORY[0x1D25D9CD0](v197, 8);
    }
    int v178 = 0;
    while (1)
    {
      uint64_t v191 = (__n128 *)((char *)v25 + 88);
      if (!v186 || v25[4].n128_u32[1] == *(_DWORD *)(v180 + 16)) {
        break;
      }
LABEL_108:
      unint64_t v25 = v191;
      if (v191 == (__n128 *)v189) {
        goto LABEL_109;
      }
    }
    *(void *)unint64_t v192 = v25[1].n128_u64[0];
    *(void *)&v192[8] = *(unint64_t *)((char *)&v25[3].n128_u64[1] + 4);
    *(_WORD *)&v192[16] = v25[4].n128_u16[4];
    *(_DWORD *)&v192[20] = v25[4].n128_u32[3];
    v192[24] = v25[5].n128_u8[0];
    if (!v188)
    {
      size_t v26 = &v196;
LABEL_19:
      uint64_t v185 = v26;
      uint64_t v9 = *v26;
      if (*v26)
      {
        int v46 = HIDWORD(v200);
        int v47 = v201;
      }
      else
      {
        uint64_t v7 = *((void *)v3 + 1);
        uint64_t v182 = *(void *)(v7 + 160);
        uint64_t v179 = *(void *)(v7 + 168);
        uint64_t v204 = (void **)"tmp";
        __int16 v207 = 259;
        uint64_t v9 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v7, (const llvm::Twine *)&v204, 1);
        (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)v3 + 192))(v3, v9, 0);
        uint64_t v204 = (void **)"tmp";
        __int16 v207 = 259;
        uint64_t v190 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v7, (const llvm::Twine *)&v204, 1);
        int v27 = v201;
        if (v201)
        {
          uint64_t v181 = 0;
          uint64_t v29 = 4;
          unsigned int v28 = 4;
        }
        else
        {
          if (*(unsigned char *)(v7 + 1626)) {
            unsigned int v28 = 12;
          }
          else {
            unsigned int v28 = 4;
          }
          if (*(unsigned char *)(v7 + 1626)) {
            uint64_t v29 = 8;
          }
          else {
            uint64_t v29 = 4;
          }
          if (*(unsigned char *)(v7 + 1626) == 1)
          {
            (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)v3 + 520))(v3, 0xFFFFFFFFLL, 4);
            uint64_t v30 = -1;
          }
          else
          {
            uint64_t v30 = 0xFFFFFFFFLL;
          }
          uint64_t v181 = v30;
        }
        *(void *)(v7 + 272) += 24;
        uint64_t v31 = *(void *)(v7 + 192);
        if (((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - v31 + 24 > *(void *)(v7 + 200) - v31)
        {
          unsigned int v140 = *(_DWORD *)(v7 + 216) >> 7;
          if (v140 >= 0x1E) {
            LOBYTE(v140) = 30;
          }
          uint64_t v141 = 4096 << v140;
          unint64_t v32 = (unint64_t)operator new(4096 << v140, (std::align_val_t)8uLL);
          unint64_t v142 = *(unsigned int *)(v7 + 216);
          if (v142 >= *(unsigned int *)(v7 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 208) + 8 * v142) = v32;
          ++*(_DWORD *)(v7 + 216);
          *(void *)(v7 + 200) = v32 + v141;
        }
        else
        {
          unint64_t v32 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v7 + 192) = v32 + 24;
        int v33 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
        *(unsigned char *)unint64_t v32 = 2;
        *(_DWORD *)(v32 + 1) = v33 | (*(unsigned __int8 *)(v32 + 4) << 24);
        *(void *)(v32 + 8) = 0;
        *(void *)(v32 + 16) = v190;
        *(void *)(v7 + 272) += 24;
        uint64_t v34 = *(void *)(v7 + 192);
        if (((v34 + 7) & 0xFFFFFFFFFFFFFFF8) - v34 + 24 > *(void *)(v7 + 200) - v34)
        {
          unsigned int v143 = *(_DWORD *)(v7 + 216) >> 7;
          if (v143 >= 0x1E) {
            LOBYTE(v143) = 30;
          }
          uint64_t v144 = 4096 << v143;
          unint64_t v35 = (unint64_t)operator new(4096 << v143, (std::align_val_t)8uLL);
          unint64_t v145 = *(unsigned int *)(v7 + 216);
          if (v145 >= *(unsigned int *)(v7 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 208) + 8 * v145) = v35;
          ++*(_DWORD *)(v7 + 216);
          *(void *)(v7 + 200) = v35 + v144;
        }
        else
        {
          unint64_t v35 = (v34 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v7 + 192) = v35 + 24;
        int v36 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
        *(unsigned char *)unint64_t v35 = 2;
        *(_DWORD *)(v35 + 1) = v36 | (*(unsigned __int8 *)(v35 + 4) << 24);
        *(void *)(v35 + 8) = 0;
        *(void *)(v35 + 16) = v9;
        *(void *)(v7 + 272) += 32;
        uint64_t v37 = *(void *)(v7 + 192);
        if (((v37 + 7) & 0xFFFFFFFFFFFFFFF8) - v37 + 32 > *(void *)(v7 + 200) - v37)
        {
          unsigned int v146 = *(_DWORD *)(v7 + 216) >> 7;
          if (v146 >= 0x1E) {
            LOBYTE(v146) = 30;
          }
          uint64_t v177 = 4096 << v146;
          unint64_t v38 = (unint64_t)operator new(4096 << v146, (std::align_val_t)8uLL);
          unint64_t v147 = *(unsigned int *)(v7 + 216);
          if (v147 >= *(unsigned int *)(v7 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 208) + 8 * v147) = v38;
          ++*(_DWORD *)(v7 + 216);
          *(void *)(v7 + 200) = v38 + v177;
        }
        else
        {
          unint64_t v38 = (v37 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v7 + 192) = v38 + 32;
        *(unsigned char *)unint64_t v38 = 0;
        *(_DWORD *)(v38 + 1) = (*(unsigned __int8 *)(v38 + 4) << 24) | 0x12;
        *(void *)(v38 + 8) = 0;
        *(void *)(v38 + 16) = v32;
        *(void *)(v38 + 24) = v35;
        *(void *)(v7 + 272) += 24;
        uint64_t v39 = *(void *)(v7 + 192);
        if (((v39 + 7) & 0xFFFFFFFFFFFFFFF8) - v39 + 24 > *(void *)(v7 + 200) - v39)
        {
          unsigned int v148 = *(_DWORD *)(v7 + 216) >> 7;
          if (v148 >= 0x1E) {
            LOBYTE(v148) = 30;
          }
          uint64_t v149 = 4096 << v148;
          unint64_t v40 = (unint64_t)operator new(4096 << v148, (std::align_val_t)8uLL);
          unint64_t v150 = *(unsigned int *)(v7 + 216);
          if (v150 >= *(unsigned int *)(v7 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 208) + 8 * v150) = v40;
          ++*(_DWORD *)(v7 + 216);
          *(void *)(v7 + 200) = v40 + v149;
        }
        else
        {
          unint64_t v40 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v7 + 192) = v40 + 24;
        *(unsigned char *)unint64_t v40 = 1;
        *(_DWORD *)(v40 + 1) = *(unsigned __int8 *)(v40 + 4) << 24;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = v28;
        *(void *)(v7 + 272) += 32;
        uint64_t v41 = *(void *)(v7 + 192);
        if (((v41 + 7) & 0xFFFFFFFFFFFFFFF8) - v41 + 32 > *(void *)(v7 + 200) - v41)
        {
          unsigned int v151 = *(_DWORD *)(v7 + 216) >> 7;
          if (v151 >= 0x1E) {
            LOBYTE(v151) = 30;
          }
          uint64_t v152 = 4096 << v151;
          unint64_t v42 = (unint64_t)operator new(4096 << v151, (std::align_val_t)8uLL);
          unint64_t v153 = *(unsigned int *)(v7 + 216);
          if (v153 >= *(unsigned int *)(v7 + 220)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 208) + 8 * v153) = v42;
          ++*(_DWORD *)(v7 + 216);
          *(void *)(v7 + 200) = v42 + v152;
        }
        else
        {
          unint64_t v42 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v7 + 192) = v42 + 32;
        *(unsigned char *)unint64_t v42 = 0;
        *(_DWORD *)(v42 + 1) = (*(unsigned __int8 *)(v42 + 4) << 24) | 0x12;
        *(void *)(v42 + 8) = 0;
        *(void *)(v42 + 16) = v38;
        *(void *)(v42 + 24) = v40;
        sub_1CCBBF2C4(v3, v42, v29);
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)v3 + 520))(v3, v181, v29);
        if (v27)
        {
          int v44 = 0;
          int v45 = 1;
        }
        else
        {
          int v43 = *(unsigned __int16 *)(v7 + 1624);
          if (v43 == 2)
          {
            int v44 = 0;
            int v45 = 1;
          }
          else if ((v43 - 4) >= 2)
          {
            int v44 = 0;
            int v45 = 0;
          }
          else
          {
            int v45 = 0;
            int v44 = 1;
          }
        }
        (*(void (**)(llvm::MCStreamer *))(*(void *)v3 + 520))(v3);
        if (v27)
        {
          uint64_t v204 = (void **)v206;
          v206[0] = 122;
          long long v205 = xmmword_1CFB28840;
          if (v25[1].n128_u64[0])
          {
            v206[1] = 80;
            uint64_t v169 = 2;
            *(void *)&long long v205 = 2;
          }
          else
          {
            uint64_t v169 = 1;
          }
          if (v25[1].n128_u64[1])
          {
            v206[v169++] = 76;
            *(void *)&long long v205 = v169;
          }
          v206[v169] = 82;
          uint64_t v170 = v205;
          uint64_t v171 = v205 + 1;
          *(void *)&long long v205 = v205 + 1;
          if (v25[4].n128_u8[8])
          {
            if (*((void *)&v205 + 1) < (unint64_t)(v170 + 2)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((unsigned char *)v204 + v171) = 83;
            uint64_t v171 = v205 + 1;
            *(void *)&long long v205 = v205 + 1;
          }
          if (v25[5].n128_u8[0])
          {
            if (*((void *)&v205 + 1) < (unint64_t)(v171 + 1)) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *((unsigned char *)v204 + v171) = 66;
            *(void *)&long long v205 = v205 + 1;
          }
          (*(void (**)(llvm::MCStreamer *, void **))(*(void *)v3 + 488))(v3, v204);
          if (v204 != (void **)v206) {
            free(v204);
          }
        }
        (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, 0, 1);
        if (v44)
        {
          (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, *(unsigned int *)(*(void *)(v7 + 152) + 8), 1);
          (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, 0, 1);
        }
        llvm::MCStreamer::emitULEB128IntValue(v3, *(unsigned int *)(*(void *)(v7 + 152) + 28), 0);
        uint64_t v48 = *(void *)(*((void *)v3 + 1) + 152);
        if (*(unsigned char *)(v48 + 17)) {
          int v49 = *(_DWORD *)(v48 + 12);
        }
        else {
          int v49 = -*(_DWORD *)(v48 + 12);
        }
        llvm::MCStreamer::emitSLEB128IntValue(v3, v49);
        unsigned int DwarfRegNum = v25[4].n128_u32[3];
        if (DwarfRegNum == 0x7FFFFFFF) {
          unsigned int DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(v182, *(_DWORD *)(v182 + 12), v27 != 0);
        }
        if (v45) {
          (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, DwarfRegNum, 1);
        }
        else {
          llvm::MCStreamer::emitULEB128IntValue(v3, DwarfRegNum, 0);
        }
        if (v27)
        {
          uint64_t v172 = v25[1].n128_i64[0];
          if (v172)
          {
            LODWORD(v172) = 3;
            switch(v25[3].n128_u32[3] & 0xFLL)
            {
              case 1:
              case 5:
              case 6:
              case 7:
              case 9:
                goto LABEL_307;
              case 2:
              case 0xALL:
                break;
              case 3:
              case 0xBLL:
                LODWORD(v172) = 5;
                break;
              case 4:
              case 0xCLL:
                LODWORD(v172) = 9;
                break;
              default:
                LODWORD(v172) = *(_DWORD *)(*(void *)(*((void *)v3 + 1) + 152) + 8) + 1;
                break;
            }
          }
          if (v25[1].n128_u64[1]) {
            LODWORD(v172) = v172 + 1;
          }
          llvm::MCStreamer::emitULEB128IntValue(v3, (v172 + 1), 0);
          if (v25[1].n128_u64[0])
          {
            (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, v25[3].n128_u32[3], 1);
            unsigned int v174 = v25[3].n128_u32[3];
            uint64_t v175 = (*(uint64_t (**)(void, unint64_t, void, llvm::MCStreamer *))(**(void **)(*((void *)v3 + 1) + 152) + 32))(*(void *)(*((void *)v3 + 1) + 152), v25[1].n128_u64[0], v174, v3);
            uint64_t v176 = 2;
            unint64_t v51 = v175;
            switch(v174 & 0xF)
            {
              case 1u:
              case 5u:
              case 6u:
              case 7u:
              case 9u:
                goto LABEL_307;
              case 2u:
              case 0xAu:
                break;
              case 3u:
              case 0xBu:
                goto LABEL_308;
              case 4u:
              case 0xCu:
                uint64_t v176 = 8;
                break;
              default:
                uint64_t v176 = *(unsigned int *)(*(void *)(*((void *)v3 + 1) + 152) + 8);
                break;
            }
LABEL_310:
            (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)v3 + 512))(v3, v51, v176, 0);
          }
          if (v25[1].n128_u64[1]) {
            (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, v25[4].n128_u32[0], 1);
          }
          (*(void (**)(llvm::MCStreamer *, void, uint64_t))(*(void *)v3 + 520))(v3, *(unsigned int *)(v179 + 12), 1);
        }
        uint64_t v52 = *(void *)(v7 + 152);
        if (!v25[4].n128_u8[9]) {
          sub_1CCBBF4AC((uint64_t)&v200, *(void *)(v52 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v52 + 440) - *(void *)(v52 + 432)) >> 4), 0);
        }
        int v46 = v200;
        HIDWORD(v200) = v200;
        uint64_t v3 = v202;
        int v47 = v201;
        if (v201) {
          uint64_t v53 = 4;
        }
        else {
          uint64_t v53 = *(unsigned int *)(v52 + 8);
        }
        (*(void (**)(llvm::MCStreamer *, uint64_t, void, uint64_t, void))(*(void *)v202 + 640))(v202, v53, 0, 1, 0);
        (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)v3 + 192))(v3, v190, 0);
        *uint64_t v185 = v9;
      }
      uint64_t v7 = *((void *)v3 + 1);
      uint64_t v204 = (void **)"tmp";
      __int16 v207 = 259;
      uint64_t v54 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v7, (const llvm::Twine *)&v204, 1);
      uint64_t v204 = (void **)"tmp";
      __int16 v207 = 259;
      uint64_t v190 = llvm::MCContext::createTempSymbol((llvm::MCContext *)v7, (const llvm::Twine *)&v204, 1);
      uint64_t v185 = *(uint64_t **)(v7 + 168);
      LODWORD(v200) = v46;
      if (!v47 && *(unsigned char *)(v7 + 1626))
      {
        if (*(unsigned char *)(v7 + 1626) == 1) {
          (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)v3 + 520))(v3, 0xFFFFFFFFLL, 4);
        }
        uint64_t v55 = 8;
      }
      else
      {
        uint64_t v55 = 4;
      }
      *(void *)(v7 + 272) += 24;
      uint64_t v56 = *(void *)(v7 + 192);
      if (((v56 + 7) & 0xFFFFFFFFFFFFFFF8) - v56 + 24 > *(void *)(v7 + 200) - v56)
      {
        unsigned int v97 = *(_DWORD *)(v7 + 216) >> 7;
        if (v97 >= 0x1E) {
          LOBYTE(v97) = 30;
        }
        uint64_t v98 = 4096 << v97;
        unint64_t v57 = (unint64_t)operator new(4096 << v97, (std::align_val_t)8uLL);
        unint64_t v99 = *(unsigned int *)(v7 + 216);
        if (v99 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v99) = v57;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v57 + v98;
      }
      else
      {
        unint64_t v57 = (v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v57 + 24;
      int v58 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v57 = 2;
      *(_DWORD *)(v57 + 1) = v58 | (*(unsigned __int8 *)(v57 + 4) << 24);
      *(void *)(v57 + 8) = 0;
      *(void *)(v57 + 16) = v190;
      *(void *)(v7 + 272) += 24;
      uint64_t v59 = *(void *)(v7 + 192);
      if (((v59 + 7) & 0xFFFFFFFFFFFFFFF8) - v59 + 24 > *(void *)(v7 + 200) - v59)
      {
        unsigned int v100 = *(_DWORD *)(v7 + 216) >> 7;
        if (v100 >= 0x1E) {
          LOBYTE(v100) = 30;
        }
        uint64_t v101 = 4096 << v100;
        unint64_t v60 = (unint64_t)operator new(4096 << v100, (std::align_val_t)8uLL);
        unint64_t v102 = *(unsigned int *)(v7 + 216);
        if (v102 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v102) = v60;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v60 + v101;
      }
      else
      {
        unint64_t v60 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v60 + 24;
      int v61 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v60 = 2;
      *(_DWORD *)(v60 + 1) = v61 | (*(unsigned __int8 *)(v60 + 4) << 24);
      *(void *)(v60 + 8) = 0;
      *(void *)(v60 + 16) = v54;
      *(void *)(v7 + 272) += 32;
      uint64_t v62 = *(void *)(v7 + 192);
      if (((v62 + 7) & 0xFFFFFFFFFFFFFFF8) - v62 + 32 > *(void *)(v7 + 200) - v62)
      {
        unsigned int v103 = *(_DWORD *)(v7 + 216) >> 7;
        if (v103 >= 0x1E) {
          LOBYTE(v103) = 30;
        }
        uint64_t v183 = 4096 << v103;
        unint64_t v63 = (unint64_t)operator new(4096 << v103, (std::align_val_t)8uLL);
        unint64_t v104 = *(unsigned int *)(v7 + 216);
        if (v104 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v104) = v63;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v63 + v183;
      }
      else
      {
        unint64_t v63 = (v62 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v63 + 32;
      *(unsigned char *)unint64_t v63 = 0;
      *(_DWORD *)(v63 + 1) = (*(unsigned __int8 *)(v63 + 4) << 24) | 0x12;
      *(void *)(v63 + 8) = 0;
      *(void *)(v63 + 16) = v57;
      *(void *)(v63 + 24) = v60;
      *(void *)(v7 + 272) += 24;
      uint64_t v64 = *(void *)(v7 + 192);
      if (((v64 + 7) & 0xFFFFFFFFFFFFFFF8) - v64 + 24 > *(void *)(v7 + 200) - v64)
      {
        unsigned int v105 = *(_DWORD *)(v7 + 216) >> 7;
        if (v105 >= 0x1E) {
          LOBYTE(v105) = 30;
        }
        uint64_t v106 = 4096 << v105;
        unint64_t v65 = (unint64_t)operator new(4096 << v105, (std::align_val_t)8uLL);
        unint64_t v107 = *(unsigned int *)(v7 + 216);
        if (v107 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v107) = v65;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v65 + v106;
      }
      else
      {
        unint64_t v65 = (v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v65 + 24;
      *(unsigned char *)unint64_t v65 = 1;
      *(_DWORD *)(v65 + 1) = *(unsigned __int8 *)(v65 + 4) << 24;
      *(void *)(v65 + 8) = 0;
      *(void *)(v65 + 16) = 0;
      *(void *)(v7 + 272) += 32;
      uint64_t v66 = *(void *)(v7 + 192);
      if (((v66 + 7) & 0xFFFFFFFFFFFFFFF8) - v66 + 32 > *(void *)(v7 + 200) - v66)
      {
        unsigned int v108 = *(_DWORD *)(v7 + 216) >> 7;
        if (v108 >= 0x1E) {
          LOBYTE(v108) = 30;
        }
        uint64_t v184 = 4096 << v108;
        unint64_t v67 = (unint64_t)operator new(4096 << v108, (std::align_val_t)8uLL);
        unint64_t v109 = *(unsigned int *)(v7 + 216);
        if (v109 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v109) = v67;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v67 + v184;
      }
      else
      {
        unint64_t v67 = (v66 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v67 + 32;
      *(unsigned char *)unint64_t v67 = 0;
      *(_DWORD *)(v67 + 1) = (*(unsigned __int8 *)(v67 + 4) << 24) | 0x12;
      *(void *)(v67 + 8) = 0;
      *(void *)(v67 + 16) = v63;
      *(void *)(v67 + 24) = v65;
      sub_1CCBBF2C4(v3, v67, v55);
      (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)v3 + 192))(v3, v54, 0);
      uint64_t v68 = *(void *)(v7 + 152);
      if (v47)
      {
        unint64_t v157 = sub_1CCBBEE8C(v7, v9, v54, 0);
        sub_1CCBBF2C4(v3, v157, v55);
        uint64_t v82 = *((unsigned int *)v185 + 3);
        if ((v82 & 0xF) != 0)
        {
          uint64_t v9 = 2;
          switch(v82 & 0xF)
          {
            case 3:
            case 0xBLL:
              uint64_t v9 = 4;
              goto LABEL_94;
            case 4:
            case 0xCLL:
              uint64_t v9 = 8;
              goto LABEL_94;
            case 5:
            case 6:
            case 7:
            case 9:
              goto LABEL_307;
            case 8:
              break;
            default:
              goto LABEL_94;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(v68 + 424))
        {
          llvm::MCStreamer::emitSymbolValue(v3, (const llvm::MCSymbol *)v9, v55, *(unsigned char *)(v68 + 338));
        }
        else
        {
          *(void *)(v7 + 272) += 24;
          uint64_t v69 = *(void *)(v7 + 192);
          if (((v69 + 7) & 0xFFFFFFFFFFFFFFF8) - v69 + 24 > *(void *)(v7 + 200) - v69)
          {
            unsigned int v125 = *(_DWORD *)(v7 + 216) >> 7;
            if (v125 >= 0x1E) {
              LOBYTE(v125) = 30;
            }
            uint64_t v126 = 4096 << v125;
            unint64_t v70 = (unint64_t)operator new(4096 << v125, (std::align_val_t)8uLL);
            unint64_t v127 = *(unsigned int *)(v7 + 216);
            if (v127 >= *(unsigned int *)(v7 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v7 + 208) + 8 * v127) = v70;
            ++*(_DWORD *)(v7 + 216);
            *(void *)(v7 + 200) = v70 + v126;
            uint64_t v71 = *(void *)(v7 + 152);
          }
          else
          {
            unint64_t v70 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v71 = v68;
          }
          *(void *)(v7 + 192) = v70 + 24;
          int v72 = *(unsigned __int8 *)(v71 + 18) << 16;
          *(unsigned char *)unint64_t v70 = 2;
          *(_DWORD *)(v70 + 1) = v72 | (*(unsigned __int8 *)(v70 + 4) << 24);
          *(void *)(v70 + 8) = 0;
          *(void *)(v70 + 16) = v9;
          *(void *)(v7 + 272) += 24;
          uint64_t v73 = *(void *)(v7 + 192);
          if (((v73 + 7) & 0xFFFFFFFFFFFFFFF8) - v73 + 24 > *(void *)(v7 + 200) - v73)
          {
            unsigned int v128 = *(_DWORD *)(v7 + 216) >> 7;
            if (v128 >= 0x1E) {
              LOBYTE(v128) = 30;
            }
            uint64_t v129 = 4096 << v128;
            unint64_t v74 = (unint64_t)operator new(4096 << v128, (std::align_val_t)8uLL);
            unint64_t v130 = *(unsigned int *)(v7 + 216);
            if (v130 >= *(unsigned int *)(v7 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v7 + 208) + 8 * v130) = v74;
            ++*(_DWORD *)(v7 + 216);
            *(void *)(v7 + 200) = v74 + v129;
          }
          else
          {
            unint64_t v74 = (v73 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v7 + 192) = v74 + 24;
          int v75 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v74 = 2;
          *(_DWORD *)(v74 + 1) = v75 | (*(unsigned __int8 *)(v74 + 4) << 24);
          *(void *)(v74 + 8) = 0;
          *(void *)(v74 + 16) = TempSymbol;
          *(void *)(v7 + 272) += 32;
          uint64_t v76 = *(void *)(v7 + 192);
          if (((v76 + 7) & 0xFFFFFFFFFFFFFFF8) - v76 + 32 > *(void *)(v7 + 200) - v76)
          {
            unsigned int v131 = *(_DWORD *)(v7 + 216) >> 7;
            if (v131 >= 0x1E) {
              LOBYTE(v131) = 30;
            }
            uint64_t v132 = 4096 << v131;
            unint64_t v77 = (unint64_t)operator new(4096 << v131, (std::align_val_t)8uLL);
            unint64_t v133 = *(unsigned int *)(v7 + 216);
            if (v133 >= *(unsigned int *)(v7 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v7 + 208) + 8 * v133) = v77;
            ++*(_DWORD *)(v7 + 216);
            *(void *)(v7 + 200) = v77 + v132;
          }
          else
          {
            unint64_t v77 = (v76 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v7 + 192) = v77 + 32;
          *(unsigned char *)unint64_t v77 = 0;
          *(_DWORD *)(v77 + 1) = (*(unsigned __int8 *)(v77 + 4) << 24) | 0x12;
          *(void *)(v77 + 8) = 0;
          *(void *)(v77 + 16) = v70;
          *(void *)(v77 + 24) = v74;
          *(void *)(v7 + 272) += 24;
          uint64_t v78 = *(void *)(v7 + 192);
          if (((v78 + 7) & 0xFFFFFFFFFFFFFFF8) - v78 + 24 > *(void *)(v7 + 200) - v78)
          {
            unsigned int v134 = *(_DWORD *)(v7 + 216) >> 7;
            if (v134 >= 0x1E) {
              LOBYTE(v134) = 30;
            }
            uint64_t v135 = 4096 << v134;
            unint64_t v79 = (unint64_t)operator new(4096 << v134, (std::align_val_t)8uLL);
            unint64_t v136 = *(unsigned int *)(v7 + 216);
            if (v136 >= *(unsigned int *)(v7 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v7 + 208) + 8 * v136) = v79;
            ++*(_DWORD *)(v7 + 216);
            *(void *)(v7 + 200) = v79 + v135;
          }
          else
          {
            unint64_t v79 = (v78 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v7 + 192) = v79 + 24;
          *(unsigned char *)unint64_t v79 = 1;
          *(_DWORD *)(v79 + 1) = *(unsigned __int8 *)(v79 + 4) << 24;
          *(void *)(v79 + 8) = 0;
          *(void *)(v79 + 16) = 0;
          *(void *)(v7 + 272) += 32;
          uint64_t v80 = *(void *)(v7 + 192);
          if (((v80 + 7) & 0xFFFFFFFFFFFFFFF8) - v80 + 32 > *(void *)(v7 + 200) - v80)
          {
            unsigned int v137 = *(_DWORD *)(v7 + 216) >> 7;
            if (v137 >= 0x1E) {
              LOBYTE(v137) = 30;
            }
            uint64_t v138 = 4096 << v137;
            unint64_t v81 = (unint64_t)operator new(4096 << v137, (std::align_val_t)8uLL);
            unint64_t v139 = *(unsigned int *)(v7 + 216);
            if (v139 >= *(unsigned int *)(v7 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v7 + 208) + 8 * v139) = v81;
            ++*(_DWORD *)(v7 + 216);
            *(void *)(v7 + 200) = v81 + v138;
          }
          else
          {
            unint64_t v81 = (v80 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v7 + 192) = v81 + 32;
          *(unsigned char *)unint64_t v81 = 0;
          *(_DWORD *)(v81 + 1) = (*(unsigned __int8 *)(v81 + 4) << 24) | 0x12;
          *(void *)(v81 + 8) = 0;
          *(void *)(v81 + 16) = v77;
          *(void *)(v81 + 24) = v79;
          sub_1CCBBF2C4(v3, v81, v55);
        }
        uint64_t v82 = 0;
      }
      uint64_t v9 = *(unsigned int *)(*(void *)(*((void *)v3 + 1) + 152) + 8);
LABEL_94:
      sub_1CCBBFB60(v3, v25->n128_u64[0], v82, v47 != 0);
      uint64_t v84 = v25->n128_u64[0];
      uint64_t v83 = v25->n128_i64[1];
      *(void *)(v7 + 272) += 24;
      uint64_t v85 = *(void *)(v7 + 192);
      if (((v85 + 7) & 0xFFFFFFFFFFFFFFF8) - v85 + 24 > *(void *)(v7 + 200) - v85)
      {
        unsigned int v110 = *(_DWORD *)(v7 + 216) >> 7;
        if (v110 >= 0x1E) {
          LOBYTE(v110) = 30;
        }
        uint64_t v111 = 4096 << v110;
        unint64_t v86 = (unint64_t)operator new(4096 << v110, (std::align_val_t)8uLL);
        unint64_t v112 = *(unsigned int *)(v7 + 216);
        if (v112 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v112) = v86;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v86 + v111;
      }
      else
      {
        unint64_t v86 = (v85 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v86 + 24;
      int v87 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v86 = 2;
      *(_DWORD *)(v86 + 1) = v87 | (*(unsigned __int8 *)(v86 + 4) << 24);
      *(void *)(v86 + 8) = 0;
      *(void *)(v86 + 16) = v83;
      *(void *)(v7 + 272) += 24;
      uint64_t v88 = *(void *)(v7 + 192);
      if (((v88 + 7) & 0xFFFFFFFFFFFFFFF8) - v88 + 24 > *(void *)(v7 + 200) - v88)
      {
        unsigned int v113 = *(_DWORD *)(v7 + 216) >> 7;
        if (v113 >= 0x1E) {
          LOBYTE(v113) = 30;
        }
        uint64_t v114 = 4096 << v113;
        unint64_t v89 = (unint64_t)operator new(4096 << v113, (std::align_val_t)8uLL);
        unint64_t v115 = *(unsigned int *)(v7 + 216);
        if (v115 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v115) = v89;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v89 + v114;
      }
      else
      {
        unint64_t v89 = (v88 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v89 + 24;
      int v90 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
      *(unsigned char *)unint64_t v89 = 2;
      *(_DWORD *)(v89 + 1) = v90 | (*(unsigned __int8 *)(v89 + 4) << 24);
      *(void *)(v89 + 8) = 0;
      *(void *)(v89 + 16) = v84;
      *(void *)(v7 + 272) += 32;
      uint64_t v91 = *(void *)(v7 + 192);
      if (((v91 + 7) & 0xFFFFFFFFFFFFFFF8) - v91 + 32 > *(void *)(v7 + 200) - v91)
      {
        unsigned int v116 = *(_DWORD *)(v7 + 216) >> 7;
        if (v116 >= 0x1E) {
          LOBYTE(v116) = 30;
        }
        uint64_t v117 = 4096 << v116;
        unint64_t v92 = (unint64_t)operator new(4096 << v116, (std::align_val_t)8uLL);
        unint64_t v118 = *(unsigned int *)(v7 + 216);
        if (v118 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v118) = v92;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v92 + v117;
      }
      else
      {
        unint64_t v92 = (v91 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v92 + 32;
      *(unsigned char *)unint64_t v92 = 0;
      *(_DWORD *)(v92 + 1) = (*(unsigned __int8 *)(v92 + 4) << 24) | 0x12;
      *(void *)(v92 + 8) = 0;
      *(void *)(v92 + 16) = v86;
      *(void *)(v92 + 24) = v89;
      *(void *)(v7 + 272) += 24;
      uint64_t v93 = *(void *)(v7 + 192);
      if (((v93 + 7) & 0xFFFFFFFFFFFFFFF8) - v93 + 24 > *(void *)(v7 + 200) - v93)
      {
        unsigned int v119 = *(_DWORD *)(v7 + 216) >> 7;
        if (v119 >= 0x1E) {
          LOBYTE(v119) = 30;
        }
        uint64_t v120 = 4096 << v119;
        unint64_t v94 = (unint64_t)operator new(4096 << v119, (std::align_val_t)8uLL);
        unint64_t v121 = *(unsigned int *)(v7 + 216);
        if (v121 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v121) = v94;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v94 + v120;
      }
      else
      {
        unint64_t v94 = (v93 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v94 + 24;
      *(unsigned char *)unint64_t v94 = 1;
      *(_DWORD *)(v94 + 1) = *(unsigned __int8 *)(v94 + 4) << 24;
      *(void *)(v94 + 8) = 0;
      *(void *)(v94 + 16) = 0;
      *(void *)(v7 + 272) += 32;
      uint64_t v95 = *(void *)(v7 + 192);
      if (((v95 + 7) & 0xFFFFFFFFFFFFFFF8) - v95 + 32 > *(void *)(v7 + 200) - v95)
      {
        unsigned int v122 = *(_DWORD *)(v7 + 216) >> 7;
        if (v122 >= 0x1E) {
          LOBYTE(v122) = 30;
        }
        uint64_t v123 = 4096 << v122;
        unint64_t v96 = (unint64_t)operator new(4096 << v122, (std::align_val_t)8uLL);
        unint64_t v124 = *(unsigned int *)(v7 + 216);
        if (v124 >= *(unsigned int *)(v7 + 220)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(v7 + 208) + 8 * v124) = v96;
        ++*(_DWORD *)(v7 + 216);
        *(void *)(v7 + 200) = v96 + v123;
      }
      else
      {
        unint64_t v96 = (v95 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *(void *)(v7 + 192) = v96 + 32;
      *(unsigned char *)unint64_t v96 = 0;
      *(_DWORD *)(v96 + 1) = (*(unsigned __int8 *)(v96 + 4) << 24) | 0x12;
      *(void *)(v96 + 8) = 0;
      *(void *)(v96 + 16) = v92;
      *(void *)(v96 + 24) = v94;
      sub_1CCBBF2C4(v3, v96, v9);
      if (v47)
      {
        if (v25[1].n128_u64[1])
        {
          unint64_t v51 = 2;
          switch(v25[4].n128_u32[0] & 0xFLL)
          {
            case 1:
            case 5:
            case 6:
            case 7:
            case 9:
              goto LABEL_307;
            case 2:
            case 0xALL:
              goto LABEL_285;
            case 3:
            case 0xBLL:
              unint64_t v51 = 4;
              goto LABEL_285;
            case 4:
            case 0xCLL:
              unint64_t v51 = 8;
              goto LABEL_285;
            default:
              unint64_t v51 = *(unsigned int *)(*(void *)(*((void *)v3 + 1) + 152) + 8);
              goto LABEL_285;
          }
        }
        unint64_t v51 = 0;
LABEL_285:
        llvm::MCStreamer::emitULEB128IntValue(v3, v51, 0);
        uint64_t v173 = v25[1].n128_i64[1];
        if (v173) {
          sub_1CCBBFB60(v3, v173, v25[4].n128_u32[0], 1);
        }
      }
      sub_1CCBBF4AC((uint64_t)&v200, v25[2].n128_i64[0], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25[2].n128_u64[1] - v25[2].n128_u64[0]) >> 4), (const llvm::MCSymbol *)v25->n128_u64[0]);
      if (v191 == (__n128 *)v189) {
        uint64_t v9 = *(unsigned int *)(v68 + 8);
      }
      uint64_t v3 = v202;
      (*(void (**)(llvm::MCStreamer *, uint64_t, void, uint64_t, void))(*(void *)v202 + 640))(v202, v9, 0, 1, 0);
      (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)v3 + 192))(v3, v190, 0);
      goto LABEL_108;
    }
    size_t v203 = 0;
    unsigned int v154 = v199;
    char v155 = sub_1CCBC19A8(v197, v199, (uint64_t)v192, &v203);
    uint64_t v156 = v203;
    if (v155)
    {
LABEL_221:
      size_t v26 = (uint64_t *)(v156 + 4);
      goto LABEL_19;
    }
    uint64_t v204 = v203;
    if (4 * v178 + 4 >= 3 * v154)
    {
      v154 *= 2;
    }
    else if (v154 + ~v178 - HIDWORD(v198) > v154 >> 3)
    {
      goto LABEL_218;
    }
    sub_1CCBC1C10((uint64_t)&v197, v154);
    sub_1CCBC19A8(v197, v199, (uint64_t)v192, &v204);
    uint64_t v156 = v204;
LABEL_218:
    int v178 = v198 + 1;
    LODWORD(v198) = v198 + 1;
    if (*v156
      || *((_DWORD *)v156 + 2)
      || *((_DWORD *)v156 + 3) != -1
      || *((unsigned char *)v156 + 16)
      || *((unsigned char *)v156 + 17)
      || *((_DWORD *)v156 + 5) != 0x7FFFFFFF
      || *((unsigned char *)v156 + 24))
    {
      --HIDWORD(v198);
    }
    *(_OWORD *)uint64_t v156 = *(_OWORD *)v192;
    *(_OWORD *)((char *)v156 + 9) = *(_OWORD *)&v192[9];
    v156[4] = 0;
    goto LABEL_221;
  }
  return this;
}

llvm::raw_ostream *llvm::MCDwarfFrameEmitter::EncodeAdvanceLoc(llvm::raw_ostream *this, unint64_t a2, llvm::raw_ostream *a3, llvm::raw_ostream *a4)
{
  uint64_t v4 = *((void *)this + 19);
  unint64_t v5 = *(unsigned int *)(v4 + 28);
  if (v5 != 1) {
    a2 /= v5;
  }
  if (a2)
  {
    if (a2 <= 0x3F)
    {
      uint64_t v6 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v6 < *((void *)a3 + 3))
      {
        *((void *)a3 + 4) = v6 + 1;
        *uint64_t v6 = a2 | 0x40;
        return this;
      }
      char v7 = a2 | 0x40;
      this = a3;
LABEL_7:
      return llvm::raw_ostream::write(this, v7);
    }
    this = a3;
    unsigned int v19 = a2;
    if (a2 <= 0xFF)
    {
      uint64_t v8 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v8 >= *((void *)a3 + 3))
      {
        this = llvm::raw_ostream::write(a3, 2);
      }
      else
      {
        *((void *)a3 + 4) = v8 + 1;
        *uint64_t v8 = 2;
      }
      __n128 v12 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v12 < *((void *)this + 3))
      {
        *((void *)this + 4) = v12 + 1;
        unsigned char *v12 = v19;
        return this;
      }
      char v7 = v19;
      goto LABEL_7;
    }
    int v9 = *(unsigned __int8 *)(v4 + 16);
    unint64_t v11 = *((void *)a3 + 3);
    unint64_t v10 = (unsigned char *)*((void *)a3 + 4);
    if (a2 >> 16)
    {
      if ((unint64_t)v10 >= v11)
      {
        this = llvm::raw_ostream::write(a3, 4);
      }
      else
      {
        *((void *)a3 + 4) = v10 + 1;
        *unint64_t v10 = 4;
      }
      unsigned int v17 = bswap32(v19);
      if ((v9 - 1) >= 2) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v19;
      }
      *(_DWORD *)int v21 = v18;
      uint64_t v15 = v21;
      size_t v16 = 4;
    }
    else
    {
      if ((unint64_t)v10 >= v11)
      {
        this = llvm::raw_ostream::write(a3, 3);
      }
      else
      {
        *((void *)a3 + 4) = v10 + 1;
        *unint64_t v10 = 3;
      }
      unsigned int v13 = bswap32(v19) >> 16;
      if ((v9 - 1) >= 2) {
        __int16 v14 = v13;
      }
      else {
        __int16 v14 = v19;
      }
      __int16 v20 = v14;
      uint64_t v15 = (char *)&v20;
      size_t v16 = 2;
    }
    return llvm::raw_ostream::write(this, v15, v16);
  }
  return this;
}

uint64_t sub_1CCBBEBC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v31 = *a2;
  int v32 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)a1;
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    int v9 = (void *)(*(void *)a1 + 16 * v8);
    uint64_t v10 = *v9;
    if (v4 == *v9)
    {
LABEL_3:
      unsigned int v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      uint64_t v12 = *(void *)(a1 + 24);
      return v12 + 32 * v11 + 8;
    }
    __int16 v14 = 0;
    int v15 = 1;
    while (v10 != -4096)
    {
      if (v14) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = v10 == -8192;
      }
      if (v29) {
        __int16 v14 = v9;
      }
      int v30 = v8 + v15++;
      uint64_t v8 = v30 & v7;
      int v9 = (void *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (v4 == *v9) {
        goto LABEL_3;
      }
    }
    if (v14) {
      size_t v16 = v14;
    }
    else {
      size_t v16 = v9;
    }
  }
  else
  {
    size_t v16 = 0;
  }
  unsigned int v17 = sub_1CCB9CE80(a1, (uint64_t)&v31, &v31, v16);
  *unsigned int v17 = v31;
  *((_DWORD *)v17 + 2) = v32;
  unint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *a2;
  __int16 v20 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v20 >= v18)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = ((uint64_t)v20 - v22) >> 5;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 59) {
      abort();
    }
    uint64_t v25 = v18 - v22;
    if (v25 >> 4 > v24) {
      unint64_t v24 = v25 >> 4;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    uint64_t v33[4] = a1 + 40;
    if (v26 >> 59) {
      sub_1CB833614();
    }
    int v27 = (char *)operator new(32 * v26);
    unsigned int v28 = (uint64_t *)&v27[32 * v23];
    v33[0] = v27;
    v33[1] = v28;
    *unsigned int v28 = v19;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0;
    v33[2] = v28 + 4;
    v33[3] = &v27[32 * v26];
    sub_1CCBBED94((uint64_t *)(a1 + 24), v33);
    int v21 = *(void **)(a1 + 32);
    sub_1CCBBEE0C((uint64_t)v33);
  }
  else
  {
    int v21 = v20 + 4;
    *__int16 v20 = v19;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = 0;
  }
  *(void *)(a1 + 32) = v21;
  uint64_t v12 = *(void *)(a1 + 24);
  unsigned int v11 = (((unint64_t)v21 - v12) >> 5) - 1;
  *((_DWORD *)v17 + 2) = v11;
  return v12 + 32 * v11 + 8;
}

uint64_t *sub_1CCBBED94(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = (void *)a2[1];
  while (v2 != v3)
  {
    uint64_t v8 = *(void *)(v2 - 32);
    v2 -= 32;
    *(v4 - 4) = v8;
    v4 -= 4;
    v4[2] = 0;
    v4[3] = 0;
    v4[1] = 0;
    *(_OWORD *)(v4 + 1) = *(_OWORD *)(v2 + 8);
    v4[3] = *(void *)(v2 + 24);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  uint64_t v5 = *result;
  *uint64_t result = (uint64_t)v4;
  a2[1] = v5;
  uint64_t v6 = result[1];
  result[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = result[2];
  result[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1CCBBEE0C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    do
    {
      uint64_t v4 = v2;
      uint64_t v6 = result;
      *(void *)(result + 16) = v1 - 32;
      uint64_t v3 = *(void **)(v1 - 24);
      if (v3)
      {
        *(void *)(v1 - 16) = v3;
        operator delete(v3);
        uint64_t v1 = *(void *)(v6 + 16);
      }
      else
      {
        v1 -= 32;
      }
      uint64_t v2 = v4;
      uint64_t result = v6;
    }
    while (v1 != v4);
  }
  if (*(void *)result)
  {
    uint64_t v5 = result;
    operator delete(*(void **)result);
    return v5;
  }
  return result;
}

unint64_t sub_1CCBBEE8C(uint64_t a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  unsigned int v4 = __sz;
  *(void *)(a1 + 272) += 24;
  uint64_t v8 = *(void *)(a1 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(a1 + 200) - v8)
  {
    unsigned int v22 = *(_DWORD *)(a1 + 216) >> 7;
    if (v22 >= 0x1E) {
      LOBYTE(v22) = 30;
    }
    uint64_t v23 = 4096 << v22;
    unint64_t v9 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
    unsigned int v24 = *(_DWORD *)(a1 + 216);
    if (v24 >= *(_DWORD *)(a1 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v24) = v9;
    ++*(_DWORD *)(a1 + 216);
    *(void *)(a1 + 200) = v9 + v23;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 192) = v9 + 24;
  int v10 = *(unsigned __int8 *)(*(void *)(a1 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = a3;
  *(void *)(a1 + 272) += 24;
  uint64_t v11 = *(void *)(a1 + 192);
  if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 24 > *(void *)(a1 + 200) - v11)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 216) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v12 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(a1 + 216);
    if (v27 >= *(_DWORD *)(a1 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v27) = v12;
    ++*(_DWORD *)(a1 + 216);
    *(void *)(a1 + 200) = v12 + v26;
  }
  else
  {
    unint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 192) = v12 + 24;
  int v13 = *(unsigned __int8 *)(*(void *)(a1 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = a2;
  *(void *)(a1 + 272) += 32;
  uint64_t v14 = *(void *)(a1 + 192);
  if (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) - v14 + 32 > *(void *)(a1 + 200) - v14)
  {
    unsigned int v28 = *(_DWORD *)(a1 + 216) >> 7;
    if (v28 >= 0x1E) {
      LOBYTE(v28) = 30;
    }
    uint64_t v29 = 4096 << v28;
    unint64_t v15 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
    unsigned int v30 = *(_DWORD *)(a1 + 216);
    if (v30 >= *(_DWORD *)(a1 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v30) = v15;
    ++*(_DWORD *)(a1 + 216);
    *(void *)(a1 + 200) = v15 + v29;
  }
  else
  {
    unint64_t v15 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 192) = v15 + 32;
  *(unsigned char *)unint64_t v15 = 0;
  *(_DWORD *)(v15 + 1) = (*(unsigned __int8 *)(v15 + 4) << 24) | 0x12;
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + 16) = v9;
  *(void *)(v15 + 24) = v12;
  uint64_t v16 = v4;
  *(void *)(a1 + 272) += 24;
  uint64_t v17 = *(void *)(a1 + 192);
  if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 24 > *(void *)(a1 + 200) - v17)
  {
    unsigned int v31 = *(_DWORD *)(a1 + 216) >> 7;
    if (v31 >= 0x1E) {
      LOBYTE(v31) = 30;
    }
    uint64_t v32 = 4096 << v31;
    unint64_t v18 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
    unsigned int v33 = *(_DWORD *)(a1 + 216);
    if (v33 >= *(_DWORD *)(a1 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v33) = v18;
    ++*(_DWORD *)(a1 + 216);
    *(void *)(a1 + 200) = v18 + v32;
  }
  else
  {
    unint64_t v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 192) = v18 + 24;
  *(unsigned char *)unint64_t v18 = 1;
  *(_DWORD *)(v18 + 1) = *(unsigned __int8 *)(v18 + 4) << 24;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = v16;
  *(void *)(a1 + 272) += 32;
  uint64_t v19 = *(void *)(a1 + 192);
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - v19 + 32 > *(void *)(a1 + 200) - v19)
  {
    unsigned int v34 = *(_DWORD *)(a1 + 216) >> 7;
    if (v34 >= 0x1E) {
      LOBYTE(v34) = 30;
    }
    uint64_t v35 = 4096 << v34;
    unint64_t v20 = (unint64_t)operator new(4096 << v34, (std::align_val_t)8uLL);
    unsigned int v36 = *(_DWORD *)(a1 + 216);
    if (v36 >= *(_DWORD *)(a1 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 208) + 8 * v36) = v20;
    ++*(_DWORD *)(a1 + 216);
    *(void *)(a1 + 200) = v20 + v35;
  }
  else
  {
    unint64_t v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 192) = v20 + 32;
  *(unsigned char *)unint64_t v20 = 0;
  *(_DWORD *)(v20 + 1) = (*(unsigned __int8 *)(v20 + 4) << 24) | 0x12;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = v15;
  *(void *)(v20 + 24) = v18;
  return v20;
}

uint64_t sub_1CCBBF2C4(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  if (!*(unsigned char *)(*(void *)(v6 + 152) + 353))
  {
    unint64_t v15 = "tmp";
    __int16 v16 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v6, (const llvm::Twine *)&v15, 1);
    (*(void (**)(void *, uint64_t, unint64_t))(*a1 + 280))(a1, TempSymbol, a2);
    *(void *)(v6 + 272) += 24;
    uint64_t v8 = *(void *)(v6 + 192);
    if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(v6 + 200) - v8)
    {
      unsigned int v12 = *(_DWORD *)(v6 + 216) >> 7;
      if (v12 >= 0x1E) {
        LOBYTE(v12) = 30;
      }
      uint64_t v13 = 4096 << v12;
      a2 = (unint64_t)operator new(4096 << v12, (std::align_val_t)8uLL);
      unsigned int v14 = *(_DWORD *)(v6 + 216);
      if (v14 >= *(_DWORD *)(v6 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v6 + 208) + 8 * v14) = a2;
      ++*(_DWORD *)(v6 + 216);
      *(void *)(v6 + 200) = a2 + v13;
    }
    else
    {
      a2 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v6 + 192) = a2 + 24;
    int v9 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
    *(unsigned char *)a2 = 2;
    *(_DWORD *)(a2 + 1) = v9 | (*(unsigned __int8 *)(a2 + 4) << 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = TempSymbol;
  }
  int v10 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v10(a1, a2, a3, 0);
}

void sub_1CCBBF4AC(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::MCSymbol *a4)
{
  if (a3)
  {
    uint64_t v6 = 80 * a3;
    uint64_t v7 = (int *)(a2 + 20);
    while (1)
    {
      uint64_t v8 = *(const llvm::MCSymbol **)(v7 - 3);
      if (!v8) {
        goto LABEL_8;
      }
      unint64_t AssociatedFragment = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*((_DWORD *)v8 + 2) & 0x1C00) == 0x800)
      {
        *((_DWORD *)v8 + 2) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v8 + 3));
        *(void *)uint64_t v8 = *(void *)v8 & 7 | AssociatedFragment;
      }
      if (AssociatedFragment) {
        break;
      }
      uint64_t v8 = a4;
LABEL_57:
      v7 += 20;
      a4 = v8;
      v6 -= 80;
      if (!v6) {
        return;
      }
    }
    if (a4 && v8 != a4) {
      llvm::MCObjectStreamer::emitDwarfAdvanceFrameAddr(*(llvm::MCObjectStreamer **)(a1 + 16), a4, v8);
    }
    else {
LABEL_8:
    }
      uint64_t v8 = a4;
    int v10 = *(void **)(a1 + 16);
    uint64_t v11 = v10[1];
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(llvm::MCRegisterInfo **)(v11 + 160);
    if (*(unsigned char *)(v12 + 17)) {
      int v14 = *(_DWORD *)(v12 + 12);
    }
    else {
      int v14 = -*(_DWORD *)(v12 + 12);
    }
    int v15 = *(v7 - 5);
    switch(v15)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 10, 1);
        goto LABEL_57;
      case 2:
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 11, 1);
        goto LABEL_57;
      case 3:
      case 8:
        unsigned int DwarfRegNumFromDwarfEHRegNum = *(v7 - 1);
        if (!*(unsigned char *)(a1 + 8)) {
          unsigned int DwarfRegNumFromDwarfEHRegNum = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
        }
        signed int v17 = *v7;
        if (v15 == 8) {
          v17 -= *(_DWORD *)a1;
        }
        unint64_t v18 = (v17 / v14);
        if ((v18 & 0x80000000) == 0)
        {
          if (DwarfRegNumFromDwarfEHRegNum > 0x3F)
          {
            (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 5, 1);
            llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), DwarfRegNumFromDwarfEHRegNum, 0);
          }
          else
          {
            (*(void (**)(void *, void, uint64_t))(*v10 + 520))(v10, DwarfRegNumFromDwarfEHRegNum + 128, 1);
          }
          goto LABEL_44;
        }
        (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 17, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), DwarfRegNumFromDwarfEHRegNum, 0);
        llvm::MCStreamer::emitSLEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), (int)v18);
        goto LABEL_57;
      case 4:
        unsigned int v22 = *(v7 - 1);
        if (!*(unsigned char *)(a1 + 8)) {
          unsigned int v22 = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
        }
        (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 48, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), v22, 0);
        unint64_t v23 = *v7;
        *(_DWORD *)a1 = v23;
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), v23, 0);
        unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
        unint64_t v21 = v7[1];
        goto LABEL_56;
      case 5:
        LODWORD(v24) = *(v7 - 1);
        if (!*(unsigned char *)(a1 + 8)) {
          LODWORD(v24) = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
        }
        (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 13, 1);
        goto LABEL_55;
      case 6:
      case 9:
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 14, 1);
        signed int v19 = *v7;
        if (v15 == 9) {
          v19 += *(_DWORD *)a1;
        }
        *(_DWORD *)a1 = v19;
        unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
        unint64_t v21 = v19;
        goto LABEL_56;
      case 7:
        unsigned int v25 = *(v7 - 1);
        if (!*(unsigned char *)(a1 + 8)) {
          unsigned int v25 = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
        }
        (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 12, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), v25, 0);
        unint64_t v21 = *v7;
        *(_DWORD *)a1 = v21;
        unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
        goto LABEL_56;
      case 10:
        (*(void (**)(void, void, void))(*v10 + 488))(*(void *)(a1 + 16), *(void *)(v7 + 3), *(void *)(v7 + 5) - *(void *)(v7 + 3));
        goto LABEL_57;
      case 11:
        LODWORD(v24) = *(v7 - 1);
        if (!*(unsigned char *)(a1 + 8)) {
          LODWORD(v24) = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
        }
        if (v24 > 0x3F)
        {
          (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 6, 1);
LABEL_55:
          unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
          unint64_t v21 = v24;
LABEL_56:
          llvm::MCStreamer::emitULEB128IntValue(v20, v21, 0);
        }
        else
        {
          (*(void (**)(void *, void, uint64_t))(*v10 + 520))(v10, v24 | 0xC0, 1);
        }
        break;
      case 12:
        unint64_t v18 = *(v7 - 1);
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 7, 1);
        goto LABEL_44;
      case 13:
        unsigned int v26 = *(v7 - 1);
        uint64_t v24 = *v7;
        if (!*(unsigned char *)(a1 + 8))
        {
          unsigned int v26 = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, *(v7 - 1));
          LODWORD(v24) = llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(v13, v24);
        }
        (*(void (**)(void *, uint64_t, uint64_t))(*v10 + 520))(v10, 9, 1);
        llvm::MCStreamer::emitULEB128IntValue(*(llvm::MCStreamer **)(a1 + 16), v26, 0);
        goto LABEL_55;
      case 14:
      case 15:
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 45, 1);
        goto LABEL_57;
      case 16:
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 46, 1);
        unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
        unint64_t v21 = *v7;
        goto LABEL_56;
      default:
        unint64_t v18 = *(v7 - 1);
        (*(void (**)(void, uint64_t, uint64_t))(*v10 + 520))(*(void *)(a1 + 16), 8, 1);
LABEL_44:
        unint64_t v20 = *(llvm::MCStreamer **)(a1 + 16);
        unint64_t v21 = v18;
        goto LABEL_56;
    }
    goto LABEL_57;
  }
}

uint64_t sub_1CCBBFB60(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  char v5 = a3;
  uint64_t v7 = *(unsigned char **)(a1[1] + 152);
  unint64_t v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, void *))(*(void *)v7 + 40))(v7, a2, a3, a1);
  uint64_t v9 = 2;
  switch(v5 & 0xF)
  {
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
      __break(1u);
      JUMPOUT(0x1CCBBFC84);
    case 2:
    case 0xA:
      break;
    case 3:
    case 0xB:
      uint64_t v9 = 4;
      break;
    case 4:
    case 0xC:
      uint64_t v9 = 8;
      break;
    default:
      uint64_t v9 = *(unsigned int *)(*(void *)(a1[1] + 152) + 8);
      break;
  }
  if (v7[425]) {
    BOOL v10 = a4 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);
    return v11(a1, v8, v9, 0);
  }
  else
  {
    return sub_1CCBBF2C4(a1, v8, v9);
  }
}

char *sub_1CCBBFCB8(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 5 * a4;
    uint64_t result = (char *)operator new(80 * a4);
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[16 * v7];
    if (a2 != a3)
    {
      uint64_t v8 = a2 + 56;
      do
      {
        uint64_t v9 = result;
        *(_OWORD *)uint64_t result = *(_OWORD *)(v8 - 56);
        *(_OWORD *)(result + 12) = *(_OWORD *)(v8 - 44);
        *((void *)result + 5) = 0;
        *((void *)result + 6) = 0;
        *((void *)result + 4) = 0;
        BOOL v10 = result + 32;
        sub_1CC34C614((void *)result + 4, *(const void **)(v8 - 24), *(void *)(v8 - 16), *(void *)(v8 - 16) - *(void *)(v8 - 24));
        uint64_t v11 = v9 + 56;
        if (*(char *)(v8 + 23) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v11, *(const void **)v8, *(void *)(v8 + 8));
        }
        else
        {
          *uint64_t v11 = *(_OWORD *)v8;
          *((void *)v9 + 9) = *(void *)(v8 + 16);
        }
        uint64_t v12 = v8 - 56;
        v8 += 80;
        uint64_t result = v10 + 48;
      }
      while (v12 + 80 != a3);
      uint64_t result = v9 + 80;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1CCBBFDAC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 88;
        uint64_t v7 = (void **)(v4 - 56);
        sub_1CC34C338(&v7);
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CCBBFE28(uint64_t result)
{
  if (*(char *)(result + 79) < 0)
  {
    uint64_t v2 = result;
    operator delete(*(void **)(result + 56));
    uint64_t result = v2;
  }
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    *(void *)(result + 40) = v1;
    uint64_t v3 = result;
    operator delete(v1);
    return v3;
  }
  return result;
}

__n128 sub_1CCBBFE84(uint64_t a1, __n128 *a2, unint64_t a3, void *a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v8 = (unsigned char *)a2[-5].n128_u64[1];
      uint64_t v9 = *(uint64_t *)((char *)a2[-2].n128_i64 + 4);
      unsigned __int8 v10 = a2[-1].n128_u8[0];
      unsigned __int8 v11 = a2[-1].n128_u8[1];
      unsigned __int32 v12 = a2[-1].n128_u32[1];
      uint64_t v13 = *(void ***)(a1 + 16);
      if (v8 && (*v8 & 4) != 0)
      {
        uint64_t v64 = (uint64_t *)*((void *)v8 - 1);
        uint64_t v65 = *v64;
        int v14 = v64 + 2;
        uint64_t v15 = v65;
      }
      else
      {
        int v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v66 = *(void *)(a1 + 60);
      char v67 = *(unsigned char *)(a1 + 72);
      char v68 = *(unsigned char *)(a1 + 73);
      int v69 = *(_DWORD *)(a1 + 76);
      *(void *)&long long v123 = v14;
      *((void *)&v123 + 1) = v15;
      *(void *)&long long v124 = v9;
      BYTE8(v124) = v10;
      BYTE9(v124) = v11;
      HIDWORD(v124) = v12;
      if (v13)
      {
        if ((*(unsigned char *)v13 & 4) != 0)
        {
          unint64_t v104 = *(v13 - 1);
          uint64_t v105 = *v104;
          uint64_t v13 = (void **)(v104 + 2);
          uint64_t v70 = v105;
LABEL_63:
          uint64_t v132 = v13;
          uint64_t v133 = v70;
          uint64_t v134 = v66;
          LOBYTE(v135) = v67;
          HIBYTE(v135) = v68;
          int v136 = v69;
          if (sub_1CCBC1878((uint64_t)&v123, (uint64_t)&v132))
          {
            unint64_t v112 = (long long *)&a2[-6].n128_i8[8];
            long long v113 = *(_OWORD *)(a1 + 16);
            long long v123 = *(_OWORD *)a1;
            long long v124 = v113;
            long long v122 = *(_OWORD *)(a1 + 32);
            uint64_t v114 = *(void *)(a1 + 48);
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 32) = 0;
            long long v115 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)&v127[9] = *(_OWORD *)(a1 + 65);
            *(_OWORD *)unint64_t v127 = v115;
            long long v116 = *(long long *)((char *)&a2[-5] + 8);
            *(__n128 *)a1 = *(__n128 *)((char *)a2 - 88);
            *(_OWORD *)(a1 + 16) = v116;
            sub_1CD6AC0E0((void **)(a1 + 32));
            long long v118 = *(long long *)((char *)&a2[-4] + 8);
            uint64_t v117 = &a2[-4].n128_i8[8];
            *(_OWORD *)(a1 + 32) = v118;
            *(void *)(a1 + 48) = *((void *)v117 + 2);
            *((void *)v117 + 1) = 0;
            *((void *)v117 + 2) = 0;
            *(void *)uint64_t v117 = 0;
            long long v119 = *(_OWORD *)(v117 + 33);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v117 + 24);
            *(_OWORD *)(a1 + 65) = v119;
            long long v120 = v124;
            long long *v112 = v123;
            v112[1] = v120;
            sub_1CD6AC0E0((void **)v117);
            *(_OWORD *)uint64_t v117 = v122;
            *((void *)v117 + 2) = v114;
            long long v125 = 0uLL;
            uint64_t v126 = 0;
            long long v121 = *(_OWORD *)v127;
            *(_OWORD *)(v117 + 33) = *(_OWORD *)&v127[9];
            *(_OWORD *)(v117 + 24) = v121;
            uint64_t v132 = (void **)&v125;
            sub_1CC34C338(&v132);
          }
          return result;
        }
        uint64_t v13 = 0;
      }
      uint64_t v70 = 0;
      goto LABEL_63;
    }
    if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        unsigned int v22 = (long long *)(a1 + 88);
        if ((__n128 *)(a1 + 88) != a2)
        {
          uint64_t v23 = 0;
          uint64_t v24 = (long long *)a1;
          do
          {
            unsigned int v25 = v22;
            unsigned int v26 = (unsigned char *)*((void *)v24 + 13);
            if (v26 && (*v26 & 4) != 0)
            {
              uint64_t v29 = (uint64_t *)*((void *)v26 - 1);
              uint64_t v30 = *v29;
              unsigned int v27 = v29 + 2;
              uint64_t v28 = v30;
            }
            else
            {
              unsigned int v27 = 0;
              uint64_t v28 = 0;
            }
            uint64_t v31 = *(void *)((char *)v24 + 148);
            char v32 = *((unsigned char *)v24 + 160);
            char v33 = *((unsigned char *)v24 + 161);
            int v34 = *((_DWORD *)v24 + 41);
            uint64_t v35 = (unsigned char *)*((void *)v24 + 2);
            uint64_t v36 = *(void *)((char *)v24 + 60);
            char v37 = *((unsigned char *)v24 + 72);
            char v38 = *((unsigned char *)v24 + 73);
            int v39 = *((_DWORD *)v24 + 19);
            *(void *)&long long v123 = v27;
            *((void *)&v123 + 1) = v28;
            *(void *)&long long v124 = v31;
            BYTE8(v124) = v32;
            BYTE9(v124) = v33;
            HIDWORD(v124) = v34;
            if (v35 && (*v35 & 4) != 0)
            {
              unint64_t v42 = (void *)*((void *)v35 - 1);
              uint64_t v43 = *v42;
              unint64_t v40 = (void **)(v42 + 2);
              uint64_t v41 = v43;
            }
            else
            {
              unint64_t v40 = 0;
              uint64_t v41 = 0;
            }
            uint64_t v132 = v40;
            uint64_t v133 = v41;
            uint64_t v134 = v36;
            LOBYTE(v135) = v37;
            HIBYTE(v135) = v38;
            int v136 = v39;
            if (sub_1CCBC1878((uint64_t)&v123, (uint64_t)&v132))
            {
              long long v44 = v25[1];
              long long v123 = *v25;
              long long v124 = v44;
              long long v125 = *(long long *)((char *)v24 + 120);
              uint64_t v126 = *((void *)v24 + 17);
              *((void *)v24 + 15) = 0;
              *((void *)v24 + 16) = 0;
              *((void *)v24 + 17) = 0;
              *(_OWORD *)unint64_t v127 = v24[9];
              uint64_t v45 = v23;
              *(_OWORD *)&v127[9] = *(long long *)((char *)v24 + 153);
              while (1)
              {
                uint64_t v46 = a1 + v45;
                long long v47 = *(_OWORD *)(a1 + v45 + 16);
                *(_OWORD *)(v46 + 88) = *(_OWORD *)(a1 + v45);
                *(_OWORD *)(v46 + 104) = v47;
                sub_1CD6AC0E0((void **)(a1 + v45 + 120));
                *(_OWORD *)(v46 + 120) = *(_OWORD *)(v46 + 32);
                *(void *)(v46 + 136) = *(void *)(v46 + 48);
                *(void *)(v46 + 40) = 0;
                *(void *)(v46 + 48) = 0;
                *(void *)(v46 + 32) = 0;
                *(_OWORD *)(v46 + 144) = *(_OWORD *)(v46 + 56);
                *(_OWORD *)(v46 + 153) = *(_OWORD *)(v46 + 65);
                if (!v45) {
                  break;
                }
                if ((void)v124 && (*(unsigned char *)v124 & 4) != 0)
                {
                  uint64_t v50 = *(void **)(v124 - 8);
                  uint64_t v51 = *v50;
                  uint64_t v48 = (void **)(v50 + 2);
                  uint64_t v49 = v51;
                }
                else
                {
                  uint64_t v48 = 0;
                  uint64_t v49 = 0;
                }
                uint64_t v52 = *(unsigned char **)(v46 - 72);
                uint64_t v53 = *(void *)(v46 - 28);
                char v54 = *(unsigned char *)(v46 - 16);
                char v55 = *(unsigned char *)(v46 - 15);
                int v56 = *(_DWORD *)(v46 - 12);
                uint64_t v132 = v48;
                uint64_t v133 = v49;
                uint64_t v134 = *(void *)&v127[4];
                __int16 v135 = *(_WORD *)&v127[16];
                int v136 = *(_DWORD *)&v127[20];
                if (v52 && (*v52 & 4) != 0)
                {
                  uint64_t v59 = (uint64_t *)*((void *)v52 - 1);
                  uint64_t v60 = *v59;
                  unint64_t v57 = v59 + 2;
                  uint64_t v58 = v60;
                }
                else
                {
                  unint64_t v57 = 0;
                  uint64_t v58 = 0;
                }
                v128[0] = v57;
                v128[1] = v58;
                v128[2] = v53;
                char v129 = v54;
                char v130 = v55;
                int v131 = v56;
                v45 -= 88;
                if (!sub_1CCBC1878((uint64_t)&v132, (uint64_t)v128))
                {
                  uint64_t v61 = a1 + v45 + 88;
                  goto LABEL_38;
                }
              }
              uint64_t v61 = a1;
LABEL_38:
              long long v62 = v124;
              *(_OWORD *)uint64_t v61 = v123;
              *(_OWORD *)(v61 + 16) = v62;
              sub_1CD6AC0E0((void **)(v61 + 32));
              *(_OWORD *)(v61 + 32) = v125;
              *(void *)(v61 + 48) = v126;
              long long v125 = 0uLL;
              uint64_t v126 = 0;
              long long v63 = *(_OWORD *)v127;
              *(_OWORD *)(v46 + 65) = *(_OWORD *)&v127[9];
              *(_OWORD *)(v46 + 56) = v63;
              uint64_t v132 = (void **)&v125;
              sub_1CC34C338(&v132);
            }
            unsigned int v22 = (long long *)((char *)v25 + 88);
            v23 += 88;
            uint64_t v24 = v25;
          }
          while ((__n128 *)((char *)v25 + 88) != a2);
        }
      }
    }
    else
    {
      unint64_t v19 = a3 >> 1;
      unint64_t v20 = (__n128 *)(a1 + 88 * (a3 >> 1));
      unint64_t v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v71 = sub_1CCBC0584(a1, v20, v21, (uint64_t)a4, result);
        uint64_t v72 = (uint64_t)&a4[11 * v19];
        result.n128_u64[0] = sub_1CCBC0584(a1 + 88 * (a3 >> 1), a2, a3 - (a3 >> 1), v72, v71).n128_u64[0];
        uint64_t v73 = &a4[11 * a3];
        uint64_t v74 = a1 + 56;
        uint64_t v75 = v72;
        uint64_t v76 = a4;
        while ((void *)v75 != v73)
        {
          unint64_t v77 = *(unsigned char **)(v75 + 16);
          if (v77 && (*v77 & 4) != 0)
          {
            uint64_t v80 = (uint64_t *)*((void *)v77 - 1);
            uint64_t v81 = *v80;
            uint64_t v78 = v80 + 2;
            uint64_t v79 = v81;
          }
          else
          {
            uint64_t v78 = 0;
            uint64_t v79 = 0;
          }
          uint64_t v82 = *(void *)(v75 + 60);
          char v83 = *(unsigned char *)(v75 + 72);
          char v84 = *(unsigned char *)(v75 + 73);
          int v85 = *(_DWORD *)(v75 + 76);
          unint64_t v86 = (unsigned char *)v76[2];
          uint64_t v87 = *(void *)((char *)v76 + 60);
          char v88 = *((unsigned char *)v76 + 72);
          char v89 = *((unsigned char *)v76 + 73);
          int v90 = *((_DWORD *)v76 + 19);
          *(void *)&long long v123 = v78;
          *((void *)&v123 + 1) = v79;
          *(void *)&long long v124 = v82;
          BYTE8(v124) = v83;
          BYTE9(v124) = v84;
          HIDWORD(v124) = v85;
          if (v86 && (*v86 & 4) != 0)
          {
            uint64_t v93 = (void *)*((void *)v86 - 1);
            uint64_t v94 = *v93;
            uint64_t v91 = (void **)(v93 + 2);
            uint64_t v92 = v94;
          }
          else
          {
            uint64_t v91 = 0;
            uint64_t v92 = 0;
          }
          uint64_t v95 = (_OWORD *)(v74 - 56);
          uint64_t v132 = v91;
          uint64_t v133 = v92;
          uint64_t v134 = v87;
          LOBYTE(v135) = v88;
          HIBYTE(v135) = v89;
          int v136 = v90;
          BOOL v96 = sub_1CCBC1878((uint64_t)&v123, (uint64_t)&v132);
          unsigned int v97 = (void **)(v74 - 24);
          if (v96)
          {
            long long v98 = *(_OWORD *)(v75 + 16);
            *uint64_t v95 = *(_OWORD *)v75;
            *(_OWORD *)(v74 - 40) = v98;
            sub_1CD6AC0E0(v97);
            *(_OWORD *)(v74 - 24) = *(_OWORD *)(v75 + 32);
            *(void *)(v74 - 8) = *(void *)(v75 + 48);
            *(void *)(v75 + 32) = 0;
            *(void *)(v75 + 40) = 0;
            *(void *)(v75 + 48) = 0;
            uint64_t result = *(__n128 *)(v75 + 56);
            *(_OWORD *)(v74 + 9) = *(_OWORD *)(v75 + 65);
            *(__n128 *)uint64_t v74 = result;
            v75 += 88;
          }
          else
          {
            long long v99 = *((_OWORD *)v76 + 1);
            *uint64_t v95 = *(_OWORD *)v76;
            *(_OWORD *)(v74 - 40) = v99;
            sub_1CD6AC0E0(v97);
            *(_OWORD *)(v74 - 24) = *((_OWORD *)v76 + 2);
            *(void *)(v74 - 8) = v76[6];
            v76[4] = 0;
            v76[5] = 0;
            v76[6] = 0;
            uint64_t result = *(__n128 *)(v76 + 7);
            *(_OWORD *)(v74 + 9) = *(_OWORD *)((char *)v76 + 65);
            *(__n128 *)uint64_t v74 = result;
            v76 += 11;
          }
          v74 += 88;
          if (v76 == (void *)v72)
          {
            if ((void *)v75 != v73)
            {
              uint64_t v100 = 0;
              do
              {
                uint64_t v101 = (void *)(v75 + v100);
                uint64_t v102 = v74 + v100;
                long long v103 = *(_OWORD *)(v75 + v100);
                *(_OWORD *)(v102 - 40) = *(_OWORD *)(v75 + v100 + 16);
                *(_OWORD *)(v102 - 56) = v103;
                sub_1CD6AC0E0((void **)(v74 + v100 - 24));
                *(_OWORD *)(v102 - 24) = *(_OWORD *)(v75 + v100 + 32);
                *(void *)(v102 - 8) = *(void *)(v75 + v100 + 48);
                v101[4] = 0;
                v101[5] = 0;
                v101[6] = 0;
                uint64_t result = *(__n128 *)(v75 + v100 + 56);
                *(_OWORD *)(v102 + 9) = *(_OWORD *)(v75 + v100 + 65);
                *(__n128 *)uint64_t v102 = result;
                v100 += 88;
              }
              while (v101 + 11 != v73);
            }
            goto LABEL_69;
          }
        }
        if (v76 != (void *)v72)
        {
          uint64_t v106 = 0;
          do
          {
            unint64_t v107 = &v76[v106];
            uint64_t v108 = v74 + v106 * 8;
            long long v109 = *(_OWORD *)&v76[v106];
            *(_OWORD *)(v108 - 40) = *(_OWORD *)&v76[v106 + 2];
            *(_OWORD *)(v108 - 56) = v109;
            sub_1CD6AC0E0((void **)(v74 + v106 * 8 - 24));
            *(_OWORD *)(v108 - 24) = *(_OWORD *)&v76[v106 + 4];
            *(void *)(v108 - 8) = v76[v106 + 6];
            v107[4] = 0;
            v107[5] = 0;
            v107[6] = 0;
            uint64_t result = *(__n128 *)&v76[v106 + 7];
            *(_OWORD *)(v108 + 9) = *(_OWORD *)((char *)&v76[v106 + 8] + 1);
            *(__n128 *)uint64_t v108 = result;
            v106 += 11;
          }
          while (v107 + 11 != (void *)v72);
        }
LABEL_69:
        if (a4)
        {
          unint64_t v110 = a3;
          uint64_t v111 = a4 + 4;
          do
          {
            *(void *)&long long v123 = v111;
            sub_1CC34C338((void ***)&v123);
            v111 += 11;
            --v110;
          }
          while (v110);
        }
      }
      else
      {
        sub_1CCBBFE84(a1, v20, v21, a4, a5);
        sub_1CCBBFE84(a1 + 88 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        sub_1CCBC0CC0((long long *)a1, (long long *)(a1 + 88 * (a3 >> 1)), (long long *)a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      }
    }
  }
  return result;
}

__n128 sub_1CCBC0584(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (!a3) {
    return result;
  }
  uint64_t v8 = (_OWORD *)a1;
  if (a3 == 2)
  {
    unsigned __int8 v10 = (unsigned char *)a2[-5].n128_u64[1];
    uint64_t v11 = *(uint64_t *)((char *)a2[-2].n128_i64 + 4);
    __int8 v12 = a2[-1].n128_i8[0];
    __int8 v13 = a2[-1].n128_i8[1];
    __int32 v14 = a2[-1].n128_i32[1];
    uint64_t v15 = *(unsigned char **)(a1 + 16);
    if (v10 && (*v10 & 4) != 0)
    {
      uint64_t v101 = (uint64_t *)*((void *)v10 - 1);
      uint64_t v102 = *v101;
      __int16 v16 = v101 + 2;
      uint64_t v17 = v102;
    }
    else
    {
      __int16 v16 = 0;
      uint64_t v17 = 0;
    }
    long long v103 = &a2[-6].n128_i8[8];
    uint64_t v104 = *(void *)(a1 + 60);
    char v105 = *(unsigned char *)(a1 + 72);
    char v106 = *(unsigned char *)(a1 + 73);
    int v107 = *(_DWORD *)(a1 + 76);
    uint64_t v133 = v16;
    uint64_t v134 = v17;
    uint64_t v135 = v11;
    char v136 = v12;
    char v137 = v13;
    int v138 = v14;
    if (v15)
    {
      if ((*v15 & 4) != 0)
      {
        long long v109 = (void *)*((void *)v15 - 1);
        uint64_t v110 = *v109;
        uint64_t v15 = v109 + 2;
        uint64_t v108 = v110;
        goto LABEL_63;
      }
      uint64_t v15 = 0;
    }
    uint64_t v108 = 0;
LABEL_63:
    unint64_t v127 = v15;
    uint64_t v128 = v108;
    uint64_t v129 = v104;
    char v130 = v105;
    char v131 = v106;
    int v132 = v107;
    BOOL v111 = sub_1CCBC1878((uint64_t)&v133, (uint64_t)&v127);
    unint64_t v112 = (void *)(a4 + 32);
    long long v113 = (__n128 *)(a4 + 56);
    uint64_t v114 = (_OWORD *)(a4 + 88);
    long long v115 = (void *)(a4 + 120);
    if (v111)
    {
      long long v116 = *(long long *)((char *)&a2[-5] + 8);
      *(_OWORD *)a4 = *(_OWORD *)v103;
      *(_OWORD *)(a4 + 16) = v116;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      void *v112 = 0;
      *(__n128 *)(a4 + 32) = *(__n128 *)((char *)a2 - 56);
      *(void *)(a4 + 48) = a2[-3].n128_u64[1];
      a2[-4].n128_u64[1] = 0;
      a2[-3].n128_u64[0] = 0;
      a2[-3].n128_u64[1] = 0;
      __n128 v117 = a2[-2];
      *(__n128 *)(a4 + 65) = *(__n128 *)((char *)a2 - 23);
      __n128 *v113 = v117;
      long long v118 = v8[1];
      *uint64_t v114 = *v8;
      *(_OWORD *)(a4 + 104) = v118;
      *(void *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = 0;
      void *v115 = 0;
      *(_OWORD *)(a4 + 120) = v8[2];
      *(void *)(a4 + 136) = *((void *)v8 + 6);
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      uint64_t result = *(__n128 *)((char *)v8 + 56);
      long long v119 = *(_OWORD *)((char *)v8 + 65);
    }
    else
    {
      long long v120 = v8[1];
      *(_OWORD *)a4 = *v8;
      *(_OWORD *)(a4 + 16) = v120;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      void *v112 = 0;
      *(_OWORD *)(a4 + 32) = v8[2];
      *(void *)(a4 + 48) = *((void *)v8 + 6);
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      __n128 v121 = *(__n128 *)((char *)v8 + 56);
      *(_OWORD *)(a4 + 65) = *(_OWORD *)((char *)v8 + 65);
      __n128 *v113 = v121;
      long long v122 = *(long long *)((char *)&a2[-5] + 8);
      *uint64_t v114 = *(_OWORD *)v103;
      *(_OWORD *)(a4 + 104) = v122;
      *(void *)(a4 + 128) = 0;
      *(void *)(a4 + 136) = 0;
      void *v115 = 0;
      *(__n128 *)(a4 + 120) = *(__n128 *)((char *)a2 - 56);
      *(void *)(a4 + 136) = a2[-3].n128_u64[1];
      a2[-4].n128_u64[1] = 0;
      a2[-3].n128_u64[0] = 0;
      a2[-3].n128_u64[1] = 0;
      uint64_t result = a2[-2];
      long long v119 = *(long long *)((char *)&a2[-2] + 9);
    }
    *(_OWORD *)(a4 + 153) = v119;
    *(__n128 *)(a4 + 144) = result;
    return result;
  }
  if (a3 == 1)
  {
    long long v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_OWORD *)(a4 + 16) = v9;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
    *(void *)(a4 + 48) = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    uint64_t result = *(__n128 *)(a1 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(a1 + 65);
    *(__n128 *)(a4 + 56) = result;
  }
  else if ((uint64_t)a3 > 8)
  {
    uint64_t v70 = 88 * (a3 >> 1);
    __n128 v71 = (void *)(a1 + v70);
    sub_1CCBBFE84(a1, a1 + v70, a3 >> 1, a4, a3 >> 1);
    sub_1CCBBFE84((char *)v8 + v70, a2, a3 - (a3 >> 1), a4 + v70, a3 - (a3 >> 1));
    uint64_t v72 = a4 + 56;
    uint64_t v73 = (__n128 *)((char *)v8 + v70);
    while (v73 != a2)
    {
      uint64_t v74 = (unsigned char *)v73[1].n128_u64[0];
      if (v74 && (*v74 & 4) != 0)
      {
        unint64_t v77 = (uint64_t *)*((void *)v74 - 1);
        uint64_t v78 = *v77;
        uint64_t v75 = v77 + 2;
        uint64_t v76 = v78;
      }
      else
      {
        uint64_t v75 = 0;
        uint64_t v76 = 0;
      }
      uint64_t v79 = *(uint64_t *)((char *)&v73[3].n128_i64[1] + 4);
      char v80 = v73[4].n128_i8[8];
      char v81 = v73[4].n128_i8[9];
      int v82 = v73[4].n128_i32[3];
      char v83 = (unsigned char *)*((void *)v8 + 2);
      uint64_t v84 = *(void *)((char *)v8 + 60);
      char v85 = *((unsigned char *)v8 + 72);
      char v86 = *((unsigned char *)v8 + 73);
      int v87 = *((_DWORD *)v8 + 19);
      uint64_t v133 = v75;
      uint64_t v134 = v76;
      uint64_t v135 = v79;
      char v136 = v80;
      char v137 = v81;
      int v138 = v82;
      if (v83 && (*v83 & 4) != 0)
      {
        int v90 = (uint64_t *)*((void *)v83 - 1);
        uint64_t v91 = *v90;
        char v88 = v90 + 2;
        uint64_t v89 = v91;
      }
      else
      {
        char v88 = 0;
        uint64_t v89 = 0;
      }
      uint64_t v92 = (__n128 *)(v72 - 56);
      unint64_t v127 = v88;
      uint64_t v128 = v89;
      uint64_t v129 = v84;
      char v130 = v85;
      char v131 = v86;
      int v132 = v87;
      BOOL v93 = sub_1CCBC1878((uint64_t)&v133, (uint64_t)&v127);
      uint64_t v94 = (void *)(v72 - 24);
      if (v93)
      {
        __n128 v95 = v73[1];
        __n128 *v92 = *v73;
        *(__n128 *)(v72 - 40) = v95;
        *(void *)(v72 - 16) = 0;
        *(void *)(v72 - 8) = 0;
        void *v94 = 0;
        *(__n128 *)(v72 - 24) = v73[2];
        *(void *)(v72 - 8) = v73[3].n128_u64[0];
        v73[2].n128_u64[0] = 0;
        v73[2].n128_u64[1] = 0;
        v73[3].n128_u64[0] = 0;
        uint64_t result = *(__n128 *)((char *)v73 + 56);
        *(__n128 *)(v72 + 9) = *(__n128 *)((char *)v73 + 65);
        *(__n128 *)uint64_t v72 = result;
        uint64_t v73 = (__n128 *)((char *)v73 + 88);
      }
      else
      {
        long long v96 = v8[1];
        __n128 *v92 = *(__n128 *)v8;
        *(_OWORD *)(v72 - 40) = v96;
        *(void *)(v72 - 16) = 0;
        *(void *)(v72 - 8) = 0;
        void *v94 = 0;
        *(_OWORD *)(v72 - 24) = v8[2];
        *(void *)(v72 - 8) = *((void *)v8 + 6);
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 6) = 0;
        uint64_t result = *(__n128 *)((char *)v8 + 56);
        *(_OWORD *)(v72 + 9) = *(_OWORD *)((char *)v8 + 65);
        *(__n128 *)uint64_t v72 = result;
        uint64_t v8 = (_OWORD *)((char *)v8 + 88);
      }
      v72 += 88;
      if (v8 == (_OWORD *)v71)
      {
        if (v73 != a2)
        {
          unint64_t v97 = 0;
          do
          {
            long long v98 = (char *)v73 + v97;
            uint64_t v99 = v72 + v97;
            long long v100 = *(long long *)((char *)v73 + v97);
            *(__n128 *)(v99 - 40) = *(__n128 *)((char *)v73 + v97 + 16);
            *(_OWORD *)(v99 - 56) = v100;
            *(void *)(v99 - 16) = 0;
            *(void *)(v99 - 8) = 0;
            *(void *)(v99 - 24) = 0;
            *(__n128 *)(v99 - 24) = *(__n128 *)((char *)v73 + v97 + 32);
            *(void *)(v99 - 8) = v73[3].n128_u64[v97 / 8];
            *((void *)v98 + 4) = 0;
            *((void *)v98 + 5) = 0;
            *((void *)v98 + 6) = 0;
            uint64_t result = *(__n128 *)((char *)v73 + v97 + 56);
            *(__n128 *)(v99 + 9) = *(__n128 *)((char *)v73 + v97 + 65);
            *(__n128 *)uint64_t v99 = result;
            v97 += 88;
          }
          while (v98 + 88 != (char *)a2);
        }
        return result;
      }
    }
    if (v8 != (_OWORD *)v71)
    {
      uint64_t v123 = 0;
      do
      {
        uint64_t v124 = v72 + v123;
        long long v125 = (void *)((char *)v8 + v123);
        long long v126 = *(_OWORD *)((char *)v8 + v123);
        *(_OWORD *)(v124 - 40) = *(_OWORD *)((char *)v8 + v123 + 16);
        *(_OWORD *)(v124 - 56) = v126;
        *(void *)(v124 - 16) = 0;
        *(void *)(v124 - 8) = 0;
        *(void *)(v124 - 24) = 0;
        *(_OWORD *)(v124 - 24) = *(_OWORD *)((char *)v8 + v123 + 32);
        *(void *)(v124 - 8) = *(void *)((char *)v8 + v123 + 48);
        v125[4] = 0;
        v125[5] = 0;
        v125[6] = 0;
        uint64_t result = *(__n128 *)((char *)v8 + v123 + 56);
        *(_OWORD *)(v124 + 9) = *(_OWORD *)((char *)v8 + v123 + 65);
        *(__n128 *)uint64_t v124 = result;
        v123 += 88;
      }
      while (v125 + 11 != v71);
    }
  }
  else if ((__n128 *)a1 != a2)
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_OWORD *)(a4 + 16) = v18;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
    *(void *)(a4 + 48) = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    uint64_t result = *(__n128 *)(a1 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(a1 + 65);
    *(__n128 *)(a4 + 56) = result;
    unint64_t v19 = (_OWORD *)(a1 + 88);
    if ((__n128 *)(a1 + 88) != a2)
    {
      uint64_t v20 = 0;
      unint64_t v21 = (_OWORD *)a4;
      do
      {
        unsigned int v22 = v19;
        uint64_t v23 = (unsigned char *)*((void *)v8 + 13);
        if (v23 && (*v23 & 4) != 0)
        {
          unsigned int v26 = (uint64_t *)*((void *)v23 - 1);
          uint64_t v27 = *v26;
          uint64_t v24 = v26 + 2;
          uint64_t v25 = v27;
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v25 = 0;
        }
        uint64_t v28 = *(void *)((char *)v8 + 148);
        char v29 = *((unsigned char *)v8 + 160);
        char v30 = *((unsigned char *)v8 + 161);
        int v31 = *((_DWORD *)v8 + 41);
        char v32 = (unsigned char *)*((void *)v21 + 2);
        uint64_t v33 = *(void *)((char *)v21 + 60);
        char v34 = *((unsigned char *)v21 + 72);
        char v35 = *((unsigned char *)v21 + 73);
        int v36 = *((_DWORD *)v21 + 19);
        uint64_t v133 = v24;
        uint64_t v134 = v25;
        uint64_t v135 = v28;
        char v136 = v29;
        char v137 = v30;
        int v138 = v31;
        if (v32 && (*v32 & 4) != 0)
        {
          int v39 = (uint64_t *)*((void *)v32 - 1);
          uint64_t v40 = *v39;
          char v37 = v39 + 2;
          uint64_t v38 = v40;
        }
        else
        {
          char v37 = 0;
          uint64_t v38 = 0;
        }
        uint64_t v41 = (_OWORD *)((char *)v21 + 88);
        unint64_t v127 = v37;
        uint64_t v128 = v38;
        uint64_t v129 = v33;
        char v130 = v34;
        char v131 = v35;
        int v132 = v36;
        if (sub_1CCBC1878((uint64_t)&v133, (uint64_t)&v127))
        {
          long long v45 = v21[1];
          _OWORD *v41 = *v21;
          *(_OWORD *)((char *)v21 + 104) = v45;
          *(_OWORD *)((char *)v21 + 120) = v21[2];
          *((void *)v21 + 17) = *((void *)v21 + 6);
          *((void *)v21 + 4) = 0;
          *((void *)v21 + 5) = 0;
          *((void *)v21 + 6) = 0;
          v21[9] = *(_OWORD *)((char *)v21 + 56);
          uint64_t v46 = a4;
          *(_OWORD *)((char *)v21 + 153) = *(_OWORD *)((char *)v21 + 65);
          if (v21 != (_OWORD *)a4)
          {
            uint64_t v47 = v20;
            while (1)
            {
              uint64_t v48 = (unsigned char *)*((void *)v8 + 13);
              if (v48 && (*v48 & 4) != 0)
              {
                uint64_t v51 = (uint64_t *)*((void *)v48 - 1);
                uint64_t v52 = *v51;
                uint64_t v49 = v51 + 2;
                uint64_t v50 = v52;
              }
              else
              {
                uint64_t v49 = 0;
                uint64_t v50 = 0;
              }
              uint64_t v53 = (_OWORD *)(a4 + v47);
              uint64_t v54 = *(void *)((char *)v8 + 148);
              char v55 = *((unsigned char *)v8 + 160);
              char v56 = *((unsigned char *)v8 + 161);
              int v57 = *((_DWORD *)v8 + 41);
              uint64_t v58 = *(unsigned char **)(a4 + v47 - 72);
              uint64_t v59 = *(void *)(a4 + v47 - 28);
              char v60 = *(unsigned char *)(a4 + v47 - 16);
              char v61 = *(unsigned char *)(a4 + v47 - 15);
              int v62 = *(_DWORD *)(a4 + v47 - 12);
              uint64_t v133 = v49;
              uint64_t v134 = v50;
              uint64_t v135 = v54;
              char v136 = v55;
              char v137 = v56;
              int v138 = v57;
              if (!v58) {
                goto LABEL_32;
              }
              if ((*v58 & 4) != 0)
              {
                uint64_t v65 = (uint64_t *)*((void *)v58 - 1);
                uint64_t v66 = *v65;
                long long v63 = v65 + 2;
                uint64_t v64 = v66;
              }
              else
              {
LABEL_32:
                long long v63 = 0;
                uint64_t v64 = 0;
              }
              unint64_t v127 = v63;
              uint64_t v128 = v64;
              uint64_t v129 = v59;
              char v130 = v60;
              char v131 = v61;
              int v132 = v62;
              if (!sub_1CCBC1878((uint64_t)&v133, (uint64_t)&v127)) {
                break;
              }
              long long v67 = *(_OWORD *)((char *)v53 - 72);
              *uint64_t v53 = *(_OWORD *)((char *)v53 - 88);
              v53[1] = v67;
              uint64_t v68 = a4 + v47;
              sub_1CD6AC0E0((void **)(a4 + v47 + 32));
              *(_OWORD *)(v68 + 32) = *(_OWORD *)(v68 - 56);
              *(void *)(v68 + 48) = *(void *)(v68 - 40);
              *(void *)(v68 - 48) = 0;
              *(void *)(v68 - 40) = 0;
              *(void *)(v68 - 56) = 0;
              *(_OWORD *)(v68 + 56) = *(_OWORD *)(v68 - 32);
              *(_OWORD *)(v68 + 65) = *(_OWORD *)(v68 - 23);
              v47 -= 88;
              if (!v47)
              {
                uint64_t v46 = a4;
                goto LABEL_38;
              }
            }
            uint64_t v46 = a4 + v47;
          }
LABEL_38:
          long long v69 = v22[1];
          *(_OWORD *)uint64_t v46 = *v22;
          *(_OWORD *)(v46 + 16) = v69;
          sub_1CD6AC0E0((void **)(v46 + 32));
          uint64_t v43 = (void *)v8 + 15;
          *(_OWORD *)(v46 + 32) = *(_OWORD *)((char *)v8 + 120);
          *(void *)(v46 + 48) = *((void *)v8 + 17);
          long long v44 = (_OWORD *)(v46 + 56);
        }
        else
        {
          long long v42 = v22[1];
          _OWORD *v41 = *v22;
          *(_OWORD *)((char *)v21 + 104) = v42;
          *((void *)v21 + 16) = 0;
          *((void *)v21 + 17) = 0;
          *((void *)v21 + 15) = 0;
          uint64_t v43 = (void *)v8 + 15;
          *(_OWORD *)((char *)v21 + 120) = *(_OWORD *)((char *)v8 + 120);
          *((void *)v21 + 17) = *((void *)v8 + 17);
          long long v44 = v21 + 9;
        }
        *uint64_t v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        uint64_t result = *((__n128 *)v8 + 9);
        unint64_t v19 = (_OWORD *)((char *)v22 + 88);
        *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v8 + 153);
        *long long v44 = result;
        v20 += 88;
        unint64_t v21 = v41;
        uint64_t v8 = v22;
      }
      while ((__n128 *)((char *)v22 + 88) != a2);
    }
  }
  return result;
}

void sub_1CCBC0CC0(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v203 = a5;
  if (a5)
  {
    while (1)
    {
      __int16 v207 = a1;
      if (a4 <= a7 || v203 <= a7) {
        break;
      }
      if (!a4) {
        return;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)((char *)a2 + 60);
      char v13 = *((unsigned char *)a2 + 72);
      char v14 = *((unsigned char *)a2 + 73);
      uint64_t v15 = -a4;
      int v16 = *((_DWORD *)a2 + 19);
      while (1)
      {
        uint64_t v17 = (unsigned char *)*((void *)a2 + 2);
        if (v17 && (*v17 & 4) != 0)
        {
          uint64_t v20 = (uint64_t *)*((void *)v17 - 1);
          uint64_t v21 = *v20;
          long long v18 = v20 + 2;
          uint64_t v19 = v21;
        }
        else
        {
          long long v18 = 0;
          uint64_t v19 = 0;
        }
        unsigned int v22 = *(unsigned char **)((char *)a1 + v11 + 16);
        uint64_t v23 = *(void *)((char *)a1 + v11 + 60);
        char v24 = *((unsigned char *)a1 + v11 + 72);
        char v25 = *((unsigned char *)a1 + v11 + 73);
        int v26 = *(_DWORD *)((char *)a1 + v11 + 76);
        *(void *)&long long v215 = v18;
        *((void *)&v215 + 1) = v19;
        *(void *)&long long v216 = v12;
        BYTE8(v216) = v13;
        BYTE9(v216) = v14;
        HIDWORD(v216) = v16;
        if (!v22) {
          goto LABEL_12;
        }
        if ((*v22 & 4) != 0)
        {
          char v29 = (void *)*((void *)v22 - 1);
          uint64_t v30 = *v29;
          uint64_t v27 = (void **)(v29 + 2);
          uint64_t v28 = v30;
        }
        else
        {
LABEL_12:
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
        int v209 = v27;
        uint64_t v210 = v28;
        uint64_t v211 = v23;
        char v212 = v24;
        char v213 = v25;
        int v214 = v26;
        if (sub_1CCBC1878((uint64_t)&v215, (uint64_t)&v209)) {
          break;
        }
        v11 += 88;
        if (__CFADD__(v15++, 1)) {
          return;
        }
      }
      uint64_t v32 = -v15;
      long long v195 = (long long *)((char *)a1 + v11);
      uint64_t v196 = a6;
      if (-v15 >= v203)
      {
        if (v15 == -1)
        {
          uint64_t v184 = (void *)((char *)a1 + v11);
          long long v185 = *(long long *)((char *)a1 + v11 + 16);
          long long v215 = *(long long *)((char *)a1 + v11);
          long long v216 = v185;
          int v186 = (void **)((char *)a1 + v11 + 32);
          long long v208 = *(_OWORD *)v186;
          uint64_t v187 = *(void *)((char *)a1 + v11 + 48);
          unint64_t *v186 = 0;
          v184[5] = 0;
          v184[6] = 0;
          long long v188 = *(_OWORD *)(v184 + 7);
          *(_OWORD *)&v220[9] = *(_OWORD *)((char *)v184 + 65);
          *(_OWORD *)char v220 = v188;
          long long v189 = a2[1];
          *(_OWORD *)uint64_t v184 = *a2;
          *((_OWORD *)v184 + 1) = v189;
          sub_1CD6AC0E0(v186);
          *(_OWORD *)int v186 = a2[2];
          v184[6] = *((void *)a2 + 6);
          *((void *)a2 + 4) = 0;
          *((void *)a2 + 5) = 0;
          *((void *)a2 + 6) = 0;
          long long v190 = *(long long *)((char *)a2 + 56);
          *(_OWORD *)((char *)v184 + 65) = *(long long *)((char *)a2 + 65);
          *(_OWORD *)(v184 + 7) = v190;
          long long v191 = v216;
          *a2 = v215;
          a2[1] = v191;
          sub_1CD6AC0E0((void **)a2 + 4);
          a2[2] = v208;
          *((void *)a2 + 6) = v187;
          uint64_t v217 = 0;
          uint64_t v218 = 0;
          uint64_t v219 = 0;
          long long v192 = *(_OWORD *)&v220[9];
          *(long long *)((char *)a2 + 56) = *(_OWORD *)v220;
          *(long long *)((char *)a2 + 65) = v192;
          int v209 = (void **)&v217;
          sub_1CC34C338(&v209);
          return;
        }
        if (v15 > 0) {
          uint64_t v32 = 1 - v15;
        }
        uint64_t v62 = v32 >> 1;
        long long v63 = a3;
        if (a3 != a2)
        {
          unint64_t v64 = 0x2E8BA2E8BA2E8BA3 * (((char *)a3 - (char *)a2) >> 3);
          uint64_t v65 = (void *)((char *)a1 + 88 * v62 + v11);
          long long v63 = a2;
          do
          {
            uint64_t v66 = (void *)v63 + 11 * (v64 >> 1);
            long long v67 = (unsigned char *)v66[2];
            if (v67 && (*v67 & 4) != 0)
            {
              uint64_t v70 = (uint64_t *)*((void *)v67 - 1);
              uint64_t v71 = *v70;
              uint64_t v68 = v70 + 2;
              uint64_t v69 = v71;
            }
            else
            {
              uint64_t v68 = 0;
              uint64_t v69 = 0;
            }
            uint64_t v72 = *(void *)((char *)v66 + 60);
            char v73 = *((unsigned char *)v66 + 72);
            char v74 = *((unsigned char *)v66 + 73);
            int v75 = *((_DWORD *)v66 + 19);
            uint64_t v76 = (unsigned char *)v65[2];
            uint64_t v77 = *(void *)((char *)v65 + 60);
            char v78 = *((unsigned char *)v65 + 72);
            char v79 = *((unsigned char *)v65 + 73);
            int v80 = *((_DWORD *)v65 + 19);
            *(void *)&long long v215 = v68;
            *((void *)&v215 + 1) = v69;
            *(void *)&long long v216 = v72;
            BYTE8(v216) = v73;
            BYTE9(v216) = v74;
            HIDWORD(v216) = v75;
            if (v76 && (*v76 & 4) != 0)
            {
              char v83 = (void *)*((void *)v76 - 1);
              uint64_t v84 = *v83;
              char v81 = (void **)(v83 + 2);
              uint64_t v82 = v84;
            }
            else
            {
              char v81 = 0;
              uint64_t v82 = 0;
            }
            int v209 = v81;
            uint64_t v210 = v82;
            uint64_t v211 = v77;
            char v212 = v78;
            char v213 = v79;
            int v214 = v80;
            BOOL v85 = sub_1CCBC1878((uint64_t)&v215, (uint64_t)&v209);
            if (v85) {
              v64 += ~(v64 >> 1);
            }
            else {
              v64 >>= 1;
            }
            if (v85) {
              long long v63 = (long long *)(v66 + 11);
            }
          }
          while (v64);
        }
        uint64_t v86 = v62;
        char v35 = (long long *)((char *)a1 + 88 * v62 + v11);
        uint64_t v198 = 0x2E8BA2E8BA2E8BA3 * (((char *)v63 - (char *)a2) >> 3);
        char v61 = v35;
      }
      else
      {
        if (v203 >= 0) {
          uint64_t v33 = v203;
        }
        else {
          uint64_t v33 = v203 + 1;
        }
        uint64_t v34 = v33 >> 1;
        uint64_t v198 = v33 >> 1;
        if ((long long *)((char *)a1 + v11) == a2)
        {
          char v61 = a2;
          char v35 = a2;
        }
        else
        {
          char v35 = (long long *)((char *)a1 + v11);
          unint64_t v36 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - (char *)a1 - v11) >> 3);
          uint64_t v200 = a2;
          char v37 = (void *)a2 + 11 * v34;
          uint64_t v204 = (unsigned char **)(v37 + 2);
          uint64_t v38 = (void *)((char *)v37 + 60);
          int v39 = (char *)(v37 + 9);
          uint64_t v40 = (char *)v37 + 73;
          uint64_t v41 = (int *)v37 + 19;
          do
          {
            long long v42 = *v204;
            if (*v204 && (*v42 & 4) != 0)
            {
              long long v45 = (uint64_t *)*((void *)v42 - 1);
              uint64_t v46 = *v45;
              uint64_t v43 = v45 + 2;
              uint64_t v44 = v46;
            }
            else
            {
              uint64_t v43 = 0;
              uint64_t v44 = 0;
            }
            uint64_t v47 = *v38;
            char v48 = *v39;
            uint64_t v49 = (void *)v35 + 11 * (v36 >> 1);
            char v50 = *v40;
            int v51 = *v41;
            uint64_t v52 = (unsigned char *)v49[2];
            uint64_t v53 = *(void *)((char *)v49 + 60);
            char v54 = *((unsigned char *)v49 + 72);
            char v55 = *((unsigned char *)v49 + 73);
            int v56 = *((_DWORD *)v49 + 19);
            *(void *)&long long v215 = v43;
            *((void *)&v215 + 1) = v44;
            *(void *)&long long v216 = v47;
            BYTE8(v216) = v48;
            BYTE9(v216) = v50;
            HIDWORD(v216) = v51;
            if (v52 && (*v52 & 4) != 0)
            {
              uint64_t v59 = (void *)*((void *)v52 - 1);
              uint64_t v60 = *v59;
              int v57 = (void **)(v59 + 2);
              uint64_t v58 = v60;
            }
            else
            {
              int v57 = 0;
              uint64_t v58 = 0;
            }
            int v209 = v57;
            uint64_t v210 = v58;
            uint64_t v211 = v53;
            char v212 = v54;
            char v213 = v55;
            int v214 = v56;
            if (sub_1CCBC1878((uint64_t)&v215, (uint64_t)&v209))
            {
              v36 >>= 1;
            }
            else
            {
              char v35 = (long long *)(v49 + 11);
              v36 += ~(v36 >> 1);
            }
            a1 = v207;
          }
          while (v36);
          char v61 = v35;
          a2 = v200;
          uint64_t v34 = v198;
        }
        long long v63 = (long long *)((char *)a2 + 88 * v34);
        uint64_t v86 = 0x2E8BA2E8BA2E8BA3 * (((char *)v61 - (char *)a1 - v11) >> 3);
      }
      int v87 = a2;
      char v88 = v63;
      if (v35 != v87)
      {
        char v88 = v61;
        if (v87 != v63)
        {
          uint64_t v193 = v61;
          uint64_t v194 = v86;
          uint64_t v89 = (long long *)((char *)v61 + 88);
          uint64_t v197 = (long long *)((char *)v61 + 88);
          unsigned __int8 v201 = v87;
          while (1)
          {
            long long v90 = *(long long *)((char *)v89 - 72);
            long long v215 = *(long long *)((char *)v89 - 88);
            long long v216 = v90;
            long long v205 = *(long long *)((char *)v89 - 56);
            uint64_t v91 = *((void *)v89 - 5);
            *((void *)v89 - 7) = 0;
            *((void *)v89 - 6) = 0;
            *((void *)v89 - 5) = 0;
            long long v92 = *(v89 - 2);
            *(_OWORD *)&v220[9] = *(long long *)((char *)v89 - 23);
            *(_OWORD *)char v220 = v92;
            long long v93 = *v87;
            *(long long *)((char *)v89 - 72) = v87[1];
            *(long long *)((char *)v89 - 88) = v93;
            sub_1CD6AC0E0((void **)v89 - 7);
            *(long long *)((char *)v89 - 56) = v87[2];
            *((void *)v89 - 5) = *((void *)v87 + 6);
            *((void *)v87 + 4) = 0;
            *((void *)v87 + 5) = 0;
            *((void *)v87 + 6) = 0;
            long long v94 = *(long long *)((char *)v87 + 56);
            *(long long *)((char *)v89 - 23) = *(long long *)((char *)v87 + 65);
            *(v89 - 2) = v94;
            long long v95 = v216;
            *int v87 = v215;
            v87[1] = v95;
            sub_1CD6AC0E0((void **)v87 + 4);
            v87[2] = v205;
            *((void *)v87 + 6) = v91;
            uint64_t v217 = 0;
            uint64_t v218 = 0;
            uint64_t v219 = 0;
            long long v96 = *(_OWORD *)v220;
            *(long long *)((char *)v87 + 65) = *(_OWORD *)&v220[9];
            *(long long *)((char *)v87 + 56) = v96;
            int v209 = (void **)&v217;
            sub_1CC34C338(&v209);
            int v87 = (long long *)((char *)v87 + 88);
            if (v87 == v63) {
              break;
            }
            unint64_t v97 = v201;
            if (v89 == v201) {
              unint64_t v97 = v87;
            }
            unsigned __int8 v201 = v97;
            uint64_t v89 = (long long *)((char *)v89 + 88);
            uint64_t v197 = (long long *)((char *)v197 + 88);
          }
          long long v98 = v201;
          a1 = v207;
          if (v89 != v201)
          {
            do
            {
              while (1)
              {
                long long v99 = v89[1];
                long long v215 = *v89;
                long long v216 = v99;
                long long v206 = v89[2];
                uint64_t v100 = *((void *)v89 + 6);
                *((void *)v89 + 4) = 0;
                *((void *)v89 + 5) = 0;
                *((void *)v89 + 6) = 0;
                long long v101 = *(long long *)((char *)v89 + 56);
                *(_OWORD *)&v220[9] = *(long long *)((char *)v89 + 65);
                *(_OWORD *)char v220 = v101;
                long long v102 = v98[1];
                *uint64_t v89 = *v98;
                v89[1] = v102;
                sub_1CD6AC0E0((void **)v89 + 4);
                v89[2] = v98[2];
                *((void *)v89 + 6) = *((void *)v98 + 6);
                *((void *)v98 + 4) = 0;
                *((void *)v98 + 5) = 0;
                *((void *)v98 + 6) = 0;
                long long v103 = *(long long *)((char *)v98 + 56);
                *(long long *)((char *)v89 + 65) = *(long long *)((char *)v98 + 65);
                *(long long *)((char *)v89 + 56) = v103;
                long long v104 = v216;
                long long *v98 = v215;
                v98[1] = v104;
                sub_1CD6AC0E0((void **)v98 + 4);
                v98[2] = v206;
                *((void *)v98 + 6) = v100;
                uint64_t v217 = 0;
                uint64_t v218 = 0;
                uint64_t v219 = 0;
                long long v105 = *(_OWORD *)&v220[9];
                *(long long *)((char *)v98 + 56) = *(_OWORD *)v220;
                *(long long *)((char *)v98 + 65) = v105;
                int v209 = (void **)&v217;
                sub_1CC34C338(&v209);
                uint64_t v89 = (long long *)((char *)v89 + 88);
                long long v98 = (long long *)((char *)v98 + 88);
                if (v98 == v63) {
                  break;
                }
                char v106 = v201;
                if (v89 == v201) {
                  char v106 = v98;
                }
                unsigned __int8 v201 = v106;
              }
              long long v98 = v201;
            }
            while (v89 != v201);
            a1 = v207;
          }
          char v61 = v193;
          uint64_t v86 = v194;
          char v88 = v197;
        }
      }
      a4 = -(v86 + v15);
      uint64_t v107 = v203 - v198;
      if (v86 + v198 >= v203 - (v86 + v198) - v15)
      {
        a4 = v86;
        sub_1CCBC0CC0(v88, v63, a3, -(v86 + v15), v203 - v198, v196, a7);
        long long v63 = v35;
        a6 = v196;
        uint64_t v107 = v198;
        a3 = v88;
        a1 = v195;
      }
      else
      {
        a6 = v196;
        sub_1CCBC0CC0((char *)a1 + v11, v61, v88, v86, v198, v196, a7);
        a1 = v88;
      }
      uint64_t v203 = v107;
      a2 = v63;
      if (!v107) {
        return;
      }
    }
    if (a4 <= v203)
    {
      if (a1 == a2) {
        return;
      }
      unint64_t v139 = 0;
      uint64_t v109 = 0;
      do
      {
        unsigned int v140 = &a6[v139 / 8];
        uint64_t v141 = (void *)((char *)a1 + v139);
        long long v142 = *(long long *)((char *)a1 + v139 + 16);
        *(_OWORD *)unsigned int v140 = *(long long *)((char *)a1 + v139);
        *((_OWORD *)v140 + 1) = v142;
        v140[5] = 0;
        v140[6] = 0;
        v140[4] = 0;
        *((_OWORD *)v140 + 2) = *(long long *)((char *)a1 + v139 + 32);
        v140[6] = *(void *)((char *)a1 + v139 + 48);
        v141[4] = 0;
        v141[5] = 0;
        v141[6] = 0;
        long long v143 = *(long long *)((char *)a1 + v139 + 56);
        *(_OWORD *)((char *)v140 + 65) = *(long long *)((char *)a1 + v139 + 65);
        *(_OWORD *)(v140 + 7) = v143;
        ++v109;
        v139 += 88;
      }
      while (v141 + 11 != (void *)a2);
      if (v139)
      {
        uint64_t v144 = &a6[v139 / 8];
        uint64_t v145 = (uint64_t)&a6[v139 / 8 - 11];
        unsigned int v146 = (long long *)((char *)a1 + 56);
        unint64_t v147 = a6;
        while (a2 != a3)
        {
          unsigned int v148 = (unsigned char *)*((void *)a2 + 2);
          if (v148 && (*v148 & 4) != 0)
          {
            unsigned int v151 = (uint64_t *)*((void *)v148 - 1);
            uint64_t v152 = *v151;
            uint64_t v149 = v151 + 2;
            uint64_t v150 = v152;
          }
          else
          {
            uint64_t v149 = 0;
            uint64_t v150 = 0;
          }
          uint64_t v153 = *(void *)((char *)a2 + 60);
          char v154 = *((unsigned char *)a2 + 72);
          char v155 = *((unsigned char *)a2 + 73);
          int v156 = *((_DWORD *)a2 + 19);
          unint64_t v157 = (unsigned char *)v147[2];
          uint64_t v158 = *(void *)((char *)v147 + 60);
          char v159 = *((unsigned char *)v147 + 72);
          char v160 = *((unsigned char *)v147 + 73);
          int v161 = *((_DWORD *)v147 + 19);
          *(void *)&long long v215 = v149;
          *((void *)&v215 + 1) = v150;
          *(void *)&long long v216 = v153;
          BYTE8(v216) = v154;
          BYTE9(v216) = v155;
          HIDWORD(v216) = v156;
          if (v157 && (*v157 & 4) != 0)
          {
            unint64_t v164 = (void *)*((void *)v157 - 1);
            uint64_t v165 = *v164;
            uint64_t v162 = (void **)(v164 + 2);
            uint64_t v163 = v165;
          }
          else
          {
            uint64_t v162 = 0;
            uint64_t v163 = 0;
          }
          uint64_t v166 = (_OWORD *)((char *)v146 - 56);
          int v209 = v162;
          uint64_t v210 = v163;
          uint64_t v211 = v158;
          char v212 = v159;
          char v213 = v160;
          int v214 = v161;
          BOOL v167 = sub_1CCBC1878((uint64_t)&v215, (uint64_t)&v209);
          BOOL v168 = (void **)v146 - 3;
          if (v167)
          {
            long long v169 = a2[1];
            long long *v166 = *a2;
            *(_OWORD *)((char *)v146 - 40) = v169;
            sub_1CD6AC0E0(v168);
            *(_OWORD *)((char *)v146 - 24) = a2[2];
            *((void *)v146 - 1) = *((void *)a2 + 6);
            *((void *)a2 + 4) = 0;
            *((void *)a2 + 5) = 0;
            *((void *)a2 + 6) = 0;
            long long v170 = *(long long *)((char *)a2 + 56);
            *(_OWORD *)((char *)v146 + 9) = *(long long *)((char *)a2 + 65);
            _OWORD *v146 = v170;
            a2 = (long long *)((char *)a2 + 88);
          }
          else
          {
            long long v171 = *((_OWORD *)v147 + 1);
            long long *v166 = *(_OWORD *)v147;
            *(_OWORD *)((char *)v146 - 40) = v171;
            sub_1CD6AC0E0(v168);
            *(_OWORD *)((char *)v146 - 24) = *((_OWORD *)v147 + 2);
            *((void *)v146 - 1) = v147[6];
            v147[4] = 0;
            v147[5] = 0;
            v147[6] = 0;
            long long v172 = *(_OWORD *)(v147 + 7);
            *(_OWORD *)((char *)v146 + 9) = *(_OWORD *)((char *)v147 + 65);
            _OWORD *v146 = v172;
            v147 += 11;
          }
          unsigned int v146 = (_OWORD *)((char *)v146 + 88);
          if (v144 == v147) {
            goto LABEL_131;
          }
        }
        if (v144 != v147)
        {
          uint64_t v178 = 0;
          do
          {
            uint64_t v179 = (_OWORD *)((char *)v146 + v178 * 8);
            uint64_t v180 = &v147[v178];
            long long v181 = *(_OWORD *)&v147[v178];
            *(_OWORD *)((char *)v179 - 40) = *(_OWORD *)&v147[v178 + 2];
            *(_OWORD *)((char *)v179 - 56) = v181;
            sub_1CD6AC0E0((void **)((char *)v146 + v178 * 8 - 24));
            *(_OWORD *)((char *)v179 - 24) = *(_OWORD *)&v147[v178 + 4];
            *((void *)v179 - 1) = v147[v178 + 6];
            v180[4] = 0;
            v180[5] = 0;
            v180[6] = 0;
            long long v182 = *(_OWORD *)&v147[v178 + 7];
            *(_OWORD *)((char *)v179 + 9) = *(_OWORD *)((char *)&v147[v178 + 8] + 1);
            *uint64_t v179 = v182;
            v178 += 11;
          }
          while ((void *)v145 != v180);
        }
      }
    }
    else
    {
      if (a2 == a3) {
        return;
      }
      unint64_t v108 = 0;
      uint64_t v109 = 0;
      do
      {
        uint64_t v110 = &a6[v108 / 8];
        BOOL v111 = (void *)((char *)a2 + v108);
        long long v112 = *(long long *)((char *)a2 + v108 + 16);
        *(_OWORD *)uint64_t v110 = *(long long *)((char *)a2 + v108);
        *((_OWORD *)v110 + 1) = v112;
        v110[5] = 0;
        v110[6] = 0;
        v110[4] = 0;
        *((_OWORD *)v110 + 2) = *(long long *)((char *)a2 + v108 + 32);
        v110[6] = *(void *)((char *)a2 + v108 + 48);
        v111[4] = 0;
        v111[5] = 0;
        v111[6] = 0;
        long long v113 = *(long long *)((char *)a2 + v108 + 56);
        *(_OWORD *)((char *)v110 + 65) = *(long long *)((char *)a2 + v108 + 65);
        *(_OWORD *)(v110 + 7) = v113;
        ++v109;
        v108 += 88;
      }
      while (v111 + 11 != (void *)a3);
      if (v108)
      {
        uint64_t v114 = &a6[v108 / 8];
        long long v115 = (void *)a3 - 5;
        while (a2 != a1)
        {
          long long v116 = (unsigned char *)*((void *)v114 - 9);
          if (v116 && (*v116 & 4) != 0)
          {
            long long v119 = (uint64_t *)*((void *)v116 - 1);
            uint64_t v120 = *v119;
            __n128 v117 = v119 + 2;
            uint64_t v118 = v120;
          }
          else
          {
            __n128 v117 = 0;
            uint64_t v118 = 0;
          }
          uint64_t v121 = *(void *)(v114 - 28);
          char v122 = *(v114 - 16);
          char v123 = *(v114 - 15);
          int v124 = *((_DWORD *)v114 - 3);
          long long v125 = (unsigned char *)*((void *)a2 - 9);
          uint64_t v126 = *(void *)((char *)a2 - 28);
          char v127 = *((unsigned char *)a2 - 16);
          char v128 = *((unsigned char *)a2 - 15);
          int v129 = *((_DWORD *)a2 - 3);
          *(void *)&long long v215 = v117;
          *((void *)&v215 + 1) = v118;
          *(void *)&long long v216 = v121;
          BYTE8(v216) = v122;
          BYTE9(v216) = v123;
          HIDWORD(v216) = v124;
          if (v125 && (*v125 & 4) != 0)
          {
            int v132 = (void *)*((void *)v125 - 1);
            uint64_t v133 = *v132;
            char v130 = (void **)(v132 + 2);
            uint64_t v131 = v133;
          }
          else
          {
            char v130 = 0;
            uint64_t v131 = 0;
          }
          int v209 = v130;
          uint64_t v210 = v131;
          uint64_t v211 = v126;
          char v212 = v127;
          char v213 = v128;
          int v214 = v129;
          BOOL v134 = sub_1CCBC1878((uint64_t)&v215, (uint64_t)&v209);
          if (v134) {
            uint64_t v135 = (long long *)((char *)a2 - 88);
          }
          else {
            uint64_t v135 = v114 - 88;
          }
          long long v136 = v135[1];
          if (v134) {
            char v137 = a2;
          }
          else {
            char v137 = (long long *)v114;
          }
          if (v134) {
            a2 = (long long *)((char *)a2 - 88);
          }
          else {
            v114 -= 88;
          }
          *((_OWORD *)v115 - 3) = *v135;
          *((_OWORD *)v115 - 2) = v136;
          sub_1CD6AC0E0((void **)v115 - 2);
          *((_OWORD *)v115 - 1) = *(long long *)((char *)v137 - 56);
          void *v115 = *((void *)v137 - 5);
          *((void *)v137 - 7) = 0;
          *((void *)v137 - 6) = 0;
          *((void *)v137 - 5) = 0;
          long long v138 = *(v137 - 2);
          *(_OWORD *)((char *)v115 + 17) = *(long long *)((char *)v137 - 23);
          *(_OWORD *)(v115 + 1) = v138;
          v115 -= 11;
          a1 = v207;
          if (v114 == (unsigned char *)a6) {
            goto LABEL_131;
          }
        }
        if (v114 != (unsigned char *)a6)
        {
          unint64_t v173 = 0;
          do
          {
            unsigned int v174 = &v114[v173];
            uint64_t v175 = &v115[v173 / 8];
            long long v176 = *(_OWORD *)&v114[v173 - 72];
            *((_OWORD *)v175 - 3) = *(_OWORD *)&v114[v173 - 88];
            *((_OWORD *)v175 - 2) = v176;
            sub_1CD6AC0E0((void **)&v115[v173 / 8 - 2]);
            *((_OWORD *)v175 - 1) = *(_OWORD *)&v114[v173 - 56];
            *uint64_t v175 = *(void *)&v114[v173 - 40];
            *(v174 - 7) = 0;
            *(v174 - 6) = 0;
            *(v174 - 5) = 0;
            long long v177 = *(_OWORD *)&v114[v173 - 32];
            *(_OWORD *)((char *)v175 + 17) = *(_OWORD *)&v114[v173 - 23];
            *(_OWORD *)(v175 + 1) = v177;
            v173 -= 88;
          }
          while (&v114[v173] != (unsigned char *)a6);
        }
      }
    }
LABEL_131:
    if (a6)
    {
      uint64_t v183 = a6 + 4;
      do
      {
        *(void *)&long long v215 = v183;
        sub_1CC34C338((void ***)&v215);
        v183 += 11;
        --v109;
      }
      while (v109);
    }
  }
}

BOOL sub_1CCBC1878(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >= v4) {
    size_t v6 = *(void *)(a1 + 8);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    uint64_t v7 = *(const void **)a2;
    uint64_t v8 = *(const void **)a1;
    int v9 = memcmp(*(const void **)a1, *(const void **)a2, v6);
    if (v9 < 0) {
      return 1;
    }
    if (!v9 && v4 < v5) {
      return 1;
    }
    int v11 = memcmp(v7, v8, v6);
    if (v11 < 0) {
      return 0;
    }
    BOOL v12 = v11 || v5 == v4;
    if (!v12 && v5 < v4) {
      return 0;
    }
  }
  else
  {
    if (v4 < v5) {
      return 1;
    }
    if (v5 < v4) {
      return 0;
    }
  }
  unsigned int v14 = *(_DWORD *)(a1 + 16);
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  if (v14 < v15) {
    return 1;
  }
  if (v15 < v14) {
    return 0;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 20);
  unsigned int v17 = *(_DWORD *)(a2 + 20);
  if (v16 < v17) {
    return 1;
  }
  if (v17 < v16) {
    return 0;
  }
  unsigned int v18 = *(unsigned __int8 *)(a1 + 24);
  unsigned int v19 = *(unsigned __int8 *)(a2 + 24);
  if (v18 < v19) {
    return 1;
  }
  if (v19 < v18) {
    return 0;
  }
  unsigned int v20 = *(unsigned __int8 *)(a1 + 25);
  unsigned int v21 = *(unsigned __int8 *)(a2 + 25);
  if (v20 < v21) {
    return 1;
  }
  if (v21 < v20) {
    return 0;
  }
  return *(_DWORD *)(a1 + 28) < *(_DWORD *)(a2 + 28);
}

uint64_t sub_1CCBC19A8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
    goto LABEL_3;
  }
  int v10 = sub_1CD6AC158((uint64_t *)a3, (int *)(a3 + 8), (int *)(a3 + 12), (char *)(a3 + 16), (char *)(a3 + 17), (int *)(a3 + 20), (char *)(a3 + 24));
  uint64_t v11 = 0;
  unsigned int v12 = (a2 - 1) & v10;
  for (int i = 1; ; ++i)
  {
    uint64_t v5 = a1 + 40 * v12;
    if (*(void *)a3 == *(void *)v5
      && *(_DWORD *)(a3 + 8) == *(_DWORD *)(v5 + 8)
      && *(_DWORD *)(a3 + 12) == *(_DWORD *)(v5 + 12)
      && *(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(v5 + 16)
      && *(unsigned __int8 *)(a3 + 17) == *(unsigned __int8 *)(v5 + 17)
      && *(_DWORD *)(a3 + 20) == *(_DWORD *)(v5 + 20)
      && *(unsigned __int8 *)(a3 + 24) == *(unsigned __int8 *)(v5 + 24))
    {
      uint64_t result = 1;
      goto LABEL_3;
    }
    if (*(void *)v5) {
      goto LABEL_13;
    }
    int v16 = *(_DWORD *)(v5 + 8);
    if (v16 != -1) {
      break;
    }
    if (*(_DWORD *)(v5 + 12) || *(unsigned char *)(v5 + 16) || *(unsigned char *)(v5 + 17) || *(_DWORD *)(v5 + 20) != 0x7FFFFFFF) {
      goto LABEL_13;
    }
    BOOL v14 = *(unsigned char *)(v5 + 24) == 0;
LABEL_14:
    if (v14 && v11 == 0) {
      uint64_t v11 = a1 + 40 * v12;
    }
    unsigned int v15 = v12 + i;
    unsigned int v12 = v15 & (a2 - 1);
  }
  if (v16
    || *(_DWORD *)(v5 + 12) != -1
    || *(unsigned char *)(v5 + 16)
    || *(unsigned char *)(v5 + 17)
    || *(_DWORD *)(v5 + 20) != 0x7FFFFFFF
    || *(unsigned char *)(v5 + 24))
  {
LABEL_13:
    BOOL v14 = 0;
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v5 = v11;
  }
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_1CCBC1B4C(char *a1, uint64_t a2, _DWORD *a3, char *a4, int a5, char *a6)
{
  uint64_t v15 = a2;
  int v9 = sub_1CC0AC9D0(a1, &v15, a3, (unint64_t)a4, a5);
  uint64_t v16 = v15;
  int v10 = sub_1CC0AC730(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  BOOL v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

char *sub_1CCBC1C10(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = &result[40 * v10];
      do
      {
        *(void *)uint64_t result = 0;
        *((void *)result + 1) = 0xFFFFFFFF00000000;
        *((_WORD *)result + 8) = 0;
        *((_DWORD *)result + 5) = 0x7FFFFFFF;
        result[24] = 0;
        result += 40;
      }
      while (result != v11);
    }
    if (!v3)
    {
LABEL_24:
      JUMPOUT(0x1D25D9CD0);
    }
    uint64_t v12 = 40 * v3;
    uint64_t v13 = v4;
    while (1)
    {
      if (!*(void *)v13)
      {
        int v16 = *(_DWORD *)(v13 + 8);
        if (v16 == -1)
        {
          if (!*(_DWORD *)(v13 + 12)) {
            goto LABEL_19;
          }
        }
        else if (!v16 && *(_DWORD *)(v13 + 12) == -1)
        {
LABEL_19:
          if (!*(unsigned char *)(v13 + 16)
            && !*(unsigned char *)(v13 + 17)
            && *(_DWORD *)(v13 + 20) == 0x7FFFFFFF
            && !*(unsigned char *)(v13 + 24))
          {
            goto LABEL_12;
          }
        }
      }
      uint64_t v19 = 0;
      sub_1CCBC19A8(*(void *)a1, *(_DWORD *)(a1 + 16), v13, &v19);
      uint64_t v14 = v19;
      long long v15 = *(_OWORD *)v13;
      *(_OWORD *)(v19 + 9) = *(_OWORD *)(v13 + 9);
      *(_OWORD *)uint64_t v14 = v15;
      *(void *)(v14 + 32) = *(void *)(v13 + 32);
      ++*(_DWORD *)(a1 + 8);
LABEL_12:
      v13 += 40;
      v12 -= 40;
      if (!v12) {
        goto LABEL_24;
      }
    }
  }
  *(void *)(a1 + 8) = 0;
  int v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    unsigned int v18 = &result[40 * v17];
    do
    {
      *(void *)uint64_t result = 0;
      *((void *)result + 1) = 0xFFFFFFFF00000000;
      *((_WORD *)result + 8) = 0;
      *((_DWORD *)result + 5) = 0x7FFFFFFF;
      result[24] = 0;
      result += 40;
    }
    while (result != v18);
  }
  return result;
}

uint64_t llvm::MCELFObjectTargetWriter::MCELFObjectTargetWriter(uint64_t this, int a2, char a3, __int16 a4, char a5, char a6)
{
  *(void *)this = &unk_1F262E300;
  *(unsigned char *)(this + 8) = a3;
  *(unsigned char *)(this + 9) = a6;
  *(_WORD *)(this + 10) = a4;
  if (a2) {
    char v6 = 2;
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(this + 12) = v6 | a5 | *(unsigned char *)(this + 12) & 0xFC;
  return this;
}

uint64_t llvm::MCELFObjectTargetWriter::needsRelocateWithSymbol()
{
  return 0;
}

uint64_t sub_1CCBC1E60()
{
  return 3;
}

BOOL llvm::MCELFStreamer::isBundleLocked(llvm::MCELFStreamer *this)
{
  return *(_DWORD *)(*(void *)(*((void *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 36) != 0;
}

uint64_t llvm::MCELFStreamer::emitSymbolAttribute(void *a1, llvm::MCSymbolELF *this, int a3)
{
  uint64_t v3 = this;
  int v5 = *((_DWORD *)this + 2);
  if ((v5 & 8) == 0)
  {
    uint64_t v6 = a1[34];
    *((_DWORD *)this + 2) = v5 | 8;
    uint64_t v52 = this;
    int v7 = *(void **)(v6 + 64);
    if ((unint64_t)v7 >= *(void *)(v6 + 72))
    {
      int v50 = a3;
      uint64_t v51 = v6;
      unsigned int v8 = sub_1CBC13470((void **)(v6 + 56), &v52);
      uint64_t v6 = v51;
      a3 = v50;
    }
    else
    {
      *int v7 = this;
      unsigned int v8 = v7 + 1;
    }
    *(void *)(v6 + 64) = v8;
  }
  uint64_t result = 0;
  switch(a3)
  {
    case 0:
    case 1:
    case 11:
    case 13:
    case 15:
    case 18:
    case 20:
    case 22:
    case 24:
    case 26:
      return result;
    case 2:
      int v14 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      long long v15 = dword_1CFB28868;
      do
      {
        int v17 = *v15++;
        int v16 = v17;
        if (v17 == 2) {
          int v18 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
        }
        else {
          int v18 = (int)this;
        }
        if (v16 == v14) {
          LODWORD(this) = 2;
        }
        else {
          LODWORD(this) = v18;
        }
      }
      while (v16 != v14 && v16 != 2);
      goto LABEL_63;
    case 3:
      int v20 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      unsigned int v21 = dword_1CFB28868;
      do
      {
        int v23 = *v21++;
        int v22 = v23;
        if (v23 == 10) {
          int v24 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
        }
        else {
          int v24 = (int)this;
        }
        if (v22 == v20) {
          LODWORD(this) = 10;
        }
        else {
          LODWORD(this) = v24;
        }
      }
      while (v22 != v20 && v22 != 10);
      goto LABEL_63;
    case 4:
    case 6:
      if ((*((_WORD *)v3 + 6) & 7) != 0) {
        LODWORD(this) = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      }
      else {
        LODWORD(this) = 1;
      }
      goto LABEL_63;
    case 5:
      uint64_t v26 = 0;
      int v27 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      break;
    case 7:
      LODWORD(this) = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      goto LABEL_63;
    case 8:
      if ((*((_WORD *)v3 + 6) & 7) != 0) {
        int v31 = dword_1CFB2887C[*((_WORD *)v3 + 6) & 7];
      }
      else {
        int v31 = 1;
      }
      llvm::MCSymbolELF::setType((uint64_t)v3, v31);
      *((_WORD *)v3 + 6) |= 0x1018u;
      (*(void (**)(void))(**(void **)(a1[34] + 24) + 56))(*(void *)(a1[34] + 24));
      return 1;
    case 9:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3) != 1)
      {
        uint64_t v32 = a1[1];
        uint64_t v33 = (uint64_t *)a1[32];
        if (v33) {
          uint64_t v34 = *v33;
        }
        else {
          uint64_t v34 = 0;
        }
        if ((*(unsigned char *)v3 & 4) != 0)
        {
          uint64_t v46 = (uint64_t *)*((void *)v3 - 1);
          uint64_t v47 = *v46;
          long long v42 = (llvm::MCSymbolELF *)(v46 + 2);
          uint64_t v43 = v47;
        }
        else
        {
          long long v42 = 0;
          uint64_t v43 = 0;
        }
        __int16 v55 = 773;
        uint64_t v52 = v42;
        uint64_t v53 = v43;
        char v54 = " changed binding to STB_GLOBAL";
        llvm::MCContext::reportError(v32, v34, (uint64_t)&v52);
      }
      __int16 v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1008;
      goto LABEL_15;
    case 12:
      __int16 v10 = *((_WORD *)v3 + 6) & 0xFF9F | 0x40;
      goto LABEL_15;
    case 14:
      __int16 v10 = *((_WORD *)v3 + 6) & 0xFF9F | 0x20;
      goto LABEL_15;
    case 16:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3))
      {
        uint64_t v35 = a1[1];
        unint64_t v36 = (uint64_t *)a1[32];
        if (v36) {
          uint64_t v37 = *v36;
        }
        else {
          uint64_t v37 = 0;
        }
        if ((*(unsigned char *)v3 & 4) != 0)
        {
          char v48 = (uint64_t *)*((void *)v3 - 1);
          uint64_t v49 = *v48;
          uint64_t v44 = (llvm::MCSymbolELF *)(v48 + 2);
          uint64_t v45 = v49;
        }
        else
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
        }
        __int16 v55 = 773;
        uint64_t v52 = v44;
        uint64_t v53 = v45;
        char v54 = " changed binding to STB_LOCAL";
        llvm::MCContext::reportError(v35, v37, (uint64_t)&v52);
      }
      __int16 v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1000;
      goto LABEL_15;
    case 21:
      __int16 v10 = *((_WORD *)v3 + 6) | 0x60;
      goto LABEL_15;
    case 23:
    case 25:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3) != 2)
      {
        uint64_t v11 = (void *)a1[1];
        uint64_t v12 = (uint64_t *)a1[32];
        if (v12) {
          uint64_t v13 = *v12;
        }
        else {
          uint64_t v13 = 0;
        }
        if ((*(unsigned char *)v3 & 4) != 0)
        {
          uint64_t v40 = (uint64_t *)*((void *)v3 - 1);
          uint64_t v41 = *v40;
          uint64_t v38 = (llvm::MCSymbolELF *)(v40 + 2);
          uint64_t v39 = v41;
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v39 = 0;
        }
        __int16 v55 = 773;
        uint64_t v52 = v38;
        uint64_t v53 = v39;
        char v54 = " changed binding to STB_WEAK";
        llvm::MCContext::reportWarning(v11, v13, (uint64_t)&v52);
      }
      __int16 v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1010;
LABEL_15:
      *((_WORD *)v3 + 6) = v10;
      return 1;
    default:
      return 1;
  }
  while (1)
  {
    int v28 = dword_1CFB28868[v26];
    int v29 = v28 == 6 ? dword_1CFB2887C[*((_WORD *)v3 + 6) & 7] : (int)this;
    LODWORD(this) = v28 == v27 ? 6 : v29;
    if (v28 == v27 || v28 == 6) {
      break;
    }
    if (++v26 == 5)
    {
      LODWORD(this) = 6;
      break;
    }
  }
LABEL_63:
  llvm::MCSymbolELF::setType((uint64_t)v3, (int)this);
  return 1;
}

BOOL sub_1CCBC2468(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 120);
  if (v1 >= 2)
  {
    uint64_t v3 = *(void *)(a1 + 112) + 32 * v1;
    uint64_t v4 = *(void *)(v3 - 64);
    if (v4)
    {
      BOOL v5 = *(void *)(v3 - 32) == v4 && *(void *)(v3 - 24) == *(void *)(v3 - 56);
      int v6 = *(_DWORD *)(a1 + 120);
      if (!v5)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
        int v6 = *(_DWORD *)(a1 + 120);
      }
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 120);
    }
    *(_DWORD *)(a1 + 120) = v6 - 1;
  }
  return v1 > 1;
}

void llvm::MCELFStreamer::setAttributeItem(llvm::MCELFStreamer *this, int a2, int a3, int a4)
{
  uint64_t v4 = *((unsigned int *)this + 138);
  if (v4)
  {
    BOOL v5 = (_DWORD *)(*((void *)this + 68) + 8);
    while (*(v5 - 1) != a2)
    {
      v5 += 10;
      if (!--v4) {
        goto LABEL_5;
      }
    }
    if (a4)
    {
      *(v5 - 2) = 1;
      _DWORD *v5 = a3;
    }
  }
  else
  {
LABEL_5:
    v6[0] = 1;
    v6[1] = a2;
    v6[2] = a3;
    char v8 = 0;
    LOBYTE(__p) = 0;
    sub_1CD6AE42C((uint64_t)this + 544, (unint64_t)v6);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t llvm::MCELFStreamer::getAttributeItem(llvm::MCELFStreamer *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 138);
  if (!v2) {
    return 0;
  }
  for (uint64_t result = *((void *)this + 68); *(_DWORD *)(result + 4) != a2; result += 40)
  {
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

void llvm::MCELFStreamer::setAttributeItem(uint64_t a1, unsigned int a2, const void *a3, size_t a4, int a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 552);
  if (!v8)
  {
LABEL_5:
    LODWORD(__dst) = 2;
    *(void *)((char *)&__dst + 4) = a2;
    if (a4 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_28;
    }
    if (a4 >= 0x17)
    {
      uint64_t v15 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17) {
        uint64_t v15 = a4 | 7;
      }
      uint64_t v16 = v15 + 1;
      __int16 v10 = (void **)operator new(v15 + 1);
      v18[1] = (void *)a4;
      unint64_t v19 = v16 | 0x8000000000000000;
      v18[0] = v10;
    }
    else
    {
      __int16 v10 = v18;
      HIBYTE(v19) = a4;
      if (!a4)
      {
LABEL_26:
        *((unsigned char *)v10 + a4) = 0;
        sub_1CD6AE42C(a1 + 544, (unint64_t)&__dst);
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[0]);
        }
        return;
      }
    }
    memmove(v10, a3, a4);
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(a1 + 544);
  while (*(_DWORD *)(v9 + 4) != a2)
  {
    v9 += 40;
    if (!--v8) {
      goto LABEL_5;
    }
  }
  if (a5)
  {
    *(_DWORD *)uint64_t v9 = 2;
    if (a4 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a4 >= 0x17)
      {
        uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a4 | 7) != 0x17) {
          uint64_t v12 = a4 | 7;
        }
        uint64_t v13 = v12 + 1;
        p_dst = (long long *)operator new(v12 + 1);
        *((void *)&__dst + 1) = a4;
        v18[0] = (void *)(v13 | 0x8000000000000000);
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v18[0]) = a4;
        p_dst = &__dst;
        if (!a4) {
          goto LABEL_18;
        }
      }
      memmove(p_dst, a3, a4);
LABEL_18:
      *((unsigned char *)p_dst + a4) = 0;
      int v14 = (void **)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        operator delete(*v14);
      }
      *(_OWORD *)int v14 = __dst;
      *(void **)(v9 + 32) = v18[0];
      return;
    }
LABEL_28:
    abort();
  }
}

void llvm::MCELFStreamer::setAttributeItems(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, size_t a5, int a6)
{
  uint64_t v9 = *(unsigned int *)(a1 + 552);
  if (!v9)
  {
LABEL_5:
    LODWORD(__dst) = 3;
    *(void *)((char *)&__dst + 4) = __PAIR64__(a3, a2);
    if (a5 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_28;
    }
    if (a5 >= 0x17)
    {
      uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17) {
        uint64_t v16 = a5 | 7;
      }
      uint64_t v17 = v16 + 1;
      uint64_t v11 = (void **)operator new(v16 + 1);
      v19[1] = (void *)a5;
      unint64_t v20 = v17 | 0x8000000000000000;
      v19[0] = v11;
    }
    else
    {
      uint64_t v11 = v19;
      HIBYTE(v20) = a5;
      if (!a5)
      {
LABEL_26:
        *((unsigned char *)v11 + a5) = 0;
        sub_1CD6AE42C(a1 + 544, (unint64_t)&__dst);
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[0]);
        }
        return;
      }
    }
    memmove(v11, a4, a5);
    goto LABEL_26;
  }
  uint64_t v10 = *(void *)(a1 + 544);
  while (*(_DWORD *)(v10 + 4) != a2)
  {
    v10 += 40;
    if (!--v9) {
      goto LABEL_5;
    }
  }
  if (a6)
  {
    *(_DWORD *)uint64_t v10 = 3;
    *(_DWORD *)(v10 + 8) = a3;
    if (a5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a5 >= 0x17)
      {
        uint64_t v13 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17) {
          uint64_t v13 = a5 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (long long *)operator new(v13 + 1);
        *((void *)&__dst + 1) = a5;
        v19[0] = (void *)(v14 | 0x8000000000000000);
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v19[0]) = a5;
        p_dst = &__dst;
        if (!a5) {
          goto LABEL_18;
        }
      }
      memmove(p_dst, a4, a5);
LABEL_18:
      *((unsigned char *)p_dst + a5) = 0;
      uint64_t v15 = (void **)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        operator delete(*v15);
      }
      *(_OWORD *)uint64_t v15 = __dst;
      *(void **)(v10 + 32) = v19[0];
      return;
    }
LABEL_28:
    abort();
  }
}

uint64_t sub_1CCBC28F8()
{
  return 1;
}

char *sub_1CCBC2900(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1CB833614();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[40 * v4];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((void *)v10 + 4) = *(void *)(a2 + 32);
  uint64_t v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      long long v13 = *(_OWORD *)(v2 - 40);
      long long v14 = *(_OWORD *)(v2 - 24);
      *(v10 - 8) = *(v2 - 8);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

unint64_t llvm::MCBinaryExpr::create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 272) += 32;
  uint64_t v10 = *(void *)(a4 + 192);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 32 > *(void *)(a4 + 200) - v10)
  {
    unsigned int v13 = *(_DWORD *)(a4 + 216) >> 7;
    if (v13 >= 0x1E) {
      LOBYTE(v13) = 30;
    }
    uint64_t v14 = 4096 << v13;
    unint64_t v11 = (unint64_t)operator new(4096 << v13, (std::align_val_t)8uLL);
    unsigned int v15 = *(_DWORD *)(a4 + 216);
    if (v15 >= *(_DWORD *)(a4 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a4 + 208) + 8 * v15) = v11;
    ++*(_DWORD *)(a4 + 216);
    *(void *)(a4 + 200) = v11 + v14;
  }
  else
  {
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a4 + 192) = v11 + 32;
  *(unsigned char *)unint64_t v11 = 0;
  *(_DWORD *)(v11 + 1) = a1 & 0xFFFFFF | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(void *)(v11 + 8) = a5;
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  return v11;
}

unint64_t llvm::MCConstantExpr::create(llvm::MCConstantExpr *this, uint64_t a2, llvm::MCContext *a3, int a4)
{
  int v5 = (int)a3;
  *(void *)(a2 + 272) += 24;
  uint64_t v8 = *(void *)(a2 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(a2 + 200) - v8)
  {
    unsigned int v12 = *(_DWORD *)(a2 + 216) >> 7;
    if (v12 >= 0x1E) {
      LOBYTE(v12) = 30;
    }
    uint64_t v13 = 4096 << v12;
    unint64_t v9 = (unint64_t)operator new(4096 << v12, (std::align_val_t)8uLL);
    unsigned int v14 = *(_DWORD *)(a2 + 216);
    if (v14 >= *(_DWORD *)(a2 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 208) + 8 * v14) = v9;
    ++*(_DWORD *)(a2 + 216);
    *(void *)(a2 + 200) = v9 + v13;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a2 + 192) = v9 + 24;
  if (v5) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  *(unsigned char *)unint64_t v9 = 1;
  *(_DWORD *)(v9 + 1) = a4 & 0xFFFFFF | v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = this;
  return v9;
}

uint64_t llvm::MCSymbolRefExpr::MCSymbolRefExpr(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v5 = a3 | (*(unsigned __int8 *)(a4 + 18) << 16);
  *(unsigned char *)uint64_t result = 2;
  *(_DWORD *)(result + 1) = v5 | (*(unsigned __int8 *)(result + 4) << 24);
  *(void *)(result + 8) = a5;
  *(void *)(result + 16) = a2;
  return result;
}

{
  int v5;

  int v5 = a3 | (*(unsigned __int8 *)(a4 + 18) << 16);
  *(unsigned char *)uint64_t result = 2;
  *(_DWORD *)(result + 1) = v5 | (*(unsigned __int8 *)(result + 4) << 24);
  *(void *)(result + 8) = a5;
  *(void *)(result + 16) = a2;
  return result;
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a3 + 272) += 24;
  uint64_t v8 = *(void *)(a3 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(a3 + 200) - v8)
  {
    unsigned int v12 = *(_DWORD *)(a3 + 216) >> 7;
    if (v12 >= 0x1E) {
      LOBYTE(v12) = 30;
    }
    uint64_t v13 = 4096 << v12;
    unint64_t v9 = (unint64_t)operator new(4096 << v12, (std::align_val_t)8uLL);
    unsigned int v14 = *(_DWORD *)(a3 + 216);
    if (v14 >= *(_DWORD *)(a3 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a3 + 208) + 8 * v14) = v9;
    ++*(_DWORD *)(a3 + 216);
    *(void *)(a3 + 200) = v9 + v13;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a3 + 192) = v9 + 24;
  int v10 = a2 | (*(unsigned __int8 *)(*(void *)(a3 + 152) + 18) << 16);
  *(unsigned char *)unint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = a4;
  *(void *)(v9 + 16) = a1;
  return v9;
}

unint64_t llvm::MCSymbolRefExpr::create(unsigned __int8 **a1, unsigned __int8 **a2, int a3, llvm::MCContext *this)
{
  __int16 v15 = 261;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t Symbol = llvm::MCContext::getOrCreateSymbol(this, v14);
  *((void *)this + 34) += 24;
  uint64_t v7 = *((void *)this + 24);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *((void *)this + 25) - v7)
  {
    unsigned int v11 = *((_DWORD *)this + 54) >> 7;
    if (v11 >= 0x1E) {
      LOBYTE(v11) = 30;
    }
    uint64_t v12 = 4096 << v11;
    unint64_t v8 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
    unsigned int v13 = *((_DWORD *)this + 54);
    if (v13 >= *((_DWORD *)this + 55)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 26) + 8 * v13) = v8;
    ++*((_DWORD *)this + 54);
    *((void *)this + 25) = v8 + v12;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 24) = v8 + 24;
  int v9 = a3 | (*(unsigned __int8 *)(*((void *)this + 19) + 18) << 16);
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = Symbol;
  return v8;
}

uint64_t llvm::MCSymbolRefExpr::getVariantKindForName(uint64_t a1, uint64_t a2)
{
  v172[0] = a1;
  v172[1] = a2;
  llvm::StringRef::lower((llvm::StringRef *)v172, v170);
  if (v171 >= 0) {
    uint64_t v2 = v170;
  }
  else {
    uint64_t v2 = (void **)v170[0];
  }
  uint64_t v3 = (void *)(v171 & 0x7F);
  if (v171 < 0) {
    uint64_t v3 = v170[1];
  }
  if (v3 != (void *)6)
  {
    switch((unint64_t)v3)
    {
      case 3uLL:
        BOOL v8 = 0;
        if (*(_WORD *)v2 == 28519 && *((unsigned char *)v2 + 2) == 116)
        {
          int v13 = 1;
          int v14 = 65538;
          goto LABEL_104;
        }
        BOOL v12 = *(_WORD *)v2 == 27760 && *((unsigned char *)v2 + 2) == 116;
        int v13 = 1;
        if (!v12)
        {
          int v14 = 0;
          goto LABEL_104;
        }
        int v14 = 65548;
        BOOL v28 = 0;
        BOOL v29 = 0;
        BOOL v30 = 0;
        int v31 = 0;
        int v15 = 0;
        int v25 = 0;
        BOOL v10 = 0;
        goto LABEL_200;
      case 4uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_46;
      case 5uLL:
        if (*(_DWORD *)v2 ^ 0x65726370 | *((unsigned __int8 *)v2 + 4) ^ 0x6C) {
          int v14 = 0;
        }
        else {
          int v14 = 65541;
        }
        BOOL v10 = 1;
        goto LABEL_72;
      case 8uLL:
        if (*v2 == (void *)0x6C65726370746F67)
        {
          BOOL v8 = 0;
          BOOL v28 = 0;
          BOOL v29 = 0;
          BOOL v30 = 0;
          int v13 = 0;
          int v15 = 0;
          int v25 = 0;
          BOOL v10 = 0;
          int v14 = 65542;
          int v31 = 1;
          goto LABEL_200;
        }
        BOOL v10 = 0;
        int v15 = 0;
        if (*v2 == (void *)0x66666F7074746F67) {
          int v14 = 65544;
        }
        else {
          int v14 = 0;
        }
        BOOL v8 = 1;
        goto LABEL_73;
      case 9uLL:
        if (*v2 == (void *)0x666F70746E646E69 && *((unsigned char *)v2 + 8) == 102)
        {
          BOOL v8 = 0;
          BOOL v28 = 0;
          BOOL v29 = 0;
          BOOL v30 = 0;
          int v31 = 0;
          int v13 = 0;
          int v15 = 0;
          BOOL v10 = 0;
          int v14 = 65545;
          int v25 = 1;
          goto LABEL_200;
        }
        int v13 = 0;
        BOOL v19 = *v2 == (void *)0x666F70746E746F67 && *((unsigned char *)v2 + 8) == 102;
        BOOL v8 = 1;
        if (v19) {
          int v14 = 65547;
        }
        else {
          int v14 = 0;
        }
        goto LABEL_104;
      default:
        if (v3 == (void *)16)
        {
          BOOL v10 = 0;
          if (*v2 != (void *)0x6C65726370746F67 || v2[1] != (void *)0x78616C65726F6E5FLL)
          {
            int v14 = 0;
            goto LABEL_72;
          }
          int v14 = 65543;
          int v15 = 0;
          BOOL v8 = 0;
          goto LABEL_73;
        }
LABEL_46:
        BOOL v10 = v3 == (void *)7;
        if (v3 != (void *)7)
        {
          int v15 = 0;
          BOOL v8 = 0;
          int v14 = 0;
          goto LABEL_73;
        }
        BOOL v8 = 0;
        BOOL v17 = *(_DWORD *)v2 == 1668508788 && *(_DWORD *)((char *)v2 + 3) == 1819042147;
        BOOL v10 = 1;
        if (v17)
        {
          int v14 = 65554;
          BOOL v28 = 0;
          BOOL v29 = 0;
          BOOL v30 = 0;
          int v31 = 0;
          int v13 = 0;
          int v15 = 0;
          int v25 = 0;
          goto LABEL_200;
        }
        break;
    }
LABEL_52:
    int v15 = 0;
    int v14 = 0;
    goto LABEL_73;
  }
  BOOL v4 = *(_DWORD *)v2 == 1919972452 && *((_WORD *)v2 + 2) == 27749;
  if (v4)
  {
    BOOL v10 = 0;
    int v15 = 0;
    BOOL v8 = 0;
    int v14 = 65695;
  }
  else
  {
    if (*(_DWORD *)v2 != 1869640804 || *((_WORD *)v2 + 2) != 26214)
    {
      if (*(_DWORD *)v2 == 1869901671 && *((_WORD *)v2 + 2) == 26214)
      {
        BOOL v10 = 0;
        int v14 = 65539;
LABEL_72:
        BOOL v8 = 0;
        int v15 = v10;
        BOOL v10 = 0;
        goto LABEL_73;
      }
      if (*(_DWORD *)v2 == 1920233319 && *((_WORD *)v2 + 2) == 27749)
      {
        BOOL v10 = 0;
        int v15 = 0;
        BOOL v8 = 0;
        int v14 = 65540;
        goto LABEL_73;
      }
      BOOL v8 = 0;
      if (*(_DWORD *)v2 == 1869640814 && *((_WORD *)v2 + 2) == 26214)
      {
        int v14 = 65546;
        int v13 = 0;
LABEL_104:
        int v27 = 0;
        BOOL v10 = 0;
        int v15 = 0;
        BOOL v21 = (v14 & 0x30000) == 0;
        int v25 = v8;
        BOOL v8 = 0;
        goto LABEL_105;
      }
      BOOL v10 = 0;
      goto LABEL_52;
    }
    BOOL v10 = 0;
    int v15 = 0;
    BOOL v8 = 0;
    int v14 = 65553;
  }
LABEL_73:
  int v20 = v14 & 0x10000;
  BOOL v21 = (v14 & 0x30000) == 0;
  if (v10 && !v20 && *(_DWORD *)v2 == 1685286004 && *(_DWORD *)((char *)v2 + 3) == 1668506980)
  {
    int v14 = 65555;
    goto LABEL_94;
  }
  BOOL v4 = v20 == 0;
  char v23 = v15 ^ 1;
  if (!v4) {
    char v23 = 1;
  }
  if ((v23 & 1) == 0)
  {
    if (*(_DWORD *)v2 != 1735617652 || *((unsigned char *)v2 + 4) != 100)
    {
      int v25 = 0;
      if (*(_DWORD *)v2 != 1819503732 || *((unsigned char *)v2 + 4) != 100)
      {
        int v27 = 1;
        int v13 = 0;
        BOOL v21 = 1;
        goto LABEL_105;
      }
      int v14 = 65550;
      int v13 = 0;
LABEL_126:
      BOOL v30 = v3 == (void *)4;
      goto LABEL_130;
    }
    int v14 = 65549;
LABEL_94:
    int v13 = 0;
    int v25 = 0;
    goto LABEL_126;
  }
  int v27 = 0;
  int v25 = 0;
  int v13 = 0;
LABEL_105:
  if (v3 == (void *)6 && v21 && *(_DWORD *)v2 == 1819503732 && *((_WORD *)v2 + 2) == 28004)
  {
    int v14 = 65551;
    goto LABEL_126;
  }
  if (!v27) {
    goto LABEL_120;
  }
  if (*(_DWORD *)v2 == 1718579316 && *((unsigned char *)v2 + 4) == 102)
  {
    int v14 = 65552;
LABEL_129:
    BOOL v30 = v3 == (void *)4;
    int v15 = 1;
    goto LABEL_130;
  }
  if (*(_DWORD *)v2 == 1701998708 && *((unsigned char *)v2 + 4) == 108)
  {
    int v14 = 65694;
    goto LABEL_129;
  }
LABEL_120:
  BOOL v30 = v3 == (void *)4;
  if (v3 != (void *)4) {
    BOOL v21 = 0;
  }
  if (v21)
  {
    BOOL v30 = 1;
    if (*(_DWORD *)v2 == 1886809204)
    {
      int v14 = 65556;
LABEL_142:
      BOOL v29 = v3 == (void *)11;
      goto LABEL_143;
    }
  }
LABEL_130:
  int v35 = v14 & 0x10000;
  if (v8 && !v35 && *v2 == (void *)0x6567617070766C74)
  {
    int v14 = 65557;
    BOOL v8 = 1;
    goto LABEL_142;
  }
  BOOL v29 = v3 == (void *)11;
  if (v3 == (void *)11 && !v35)
  {
    BOOL v36 = *v2 == (void *)0x6567617070766C74 && *(void **)((char *)v2 + 3) == (void *)0x66666F6567617070;
    BOOL v29 = 1;
    if (v36)
    {
      int v14 = 65558;
LABEL_166:
      BOOL v28 = v3 == (void *)10;
      goto LABEL_170;
    }
  }
LABEL_143:
  int v37 = v14 & 0x10000;
  if (v30 && !v37 && *(_DWORD *)v2 == 1701273968)
  {
    int v14 = 65559;
    BOOL v30 = 1;
    goto LABEL_166;
  }
  char v38 = !v10;
  if (v37) {
    char v38 = 1;
  }
  if ((v38 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 1701273968 && *(_DWORD *)((char *)v2 + 3) == 1717989221)
    {
      int v14 = 65560;
    }
    else
    {
      if (*(_DWORD *)v2 != 1886678887 || *(_DWORD *)((char *)v2 + 3) != 1701273968) {
        goto LABEL_157;
      }
      int v14 = 65561;
    }
    BOOL v28 = v3 == (void *)10;
    BOOL v10 = 1;
LABEL_170:
    if (v3 == (void *)6 && (v14 & 0x30000) == 0 && *(_DWORD *)v2 == 1919380841 && *((_WORD *)v2 + 2) == 27749)
    {
      int v14 = 65651;
      goto LABEL_194;
    }
    goto LABEL_176;
  }
LABEL_157:
  BOOL v28 = v3 == (void *)10;
  if (v3 != (void *)10 || v37) {
    goto LABEL_170;
  }
  BOOL v41 = *v2 == (void *)0x6F65676170746F67 && *((_WORD *)v2 + 4) == 26214;
  BOOL v28 = 1;
  if (v41)
  {
    int v14 = 65562;
LABEL_194:
    int v31 = v8;
    BOOL v8 = v3 == (void *)1;
    goto LABEL_200;
  }
LABEL_176:
  int v31 = v8;
  int v43 = v14 & 0x30000;
  if (v8 && !v43 && *v2 == (void *)0x32336C6572636573)
  {
    int v14 = 65563;
    BOOL v8 = 1;
    goto LABEL_194;
  }
  char v44 = !v30;
  if (v43) {
    char v44 = 1;
  }
  if ((v44 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 1702521203)
    {
      int v14 = 65564;
    }
    else
    {
      if (*(_DWORD *)v2 != 947085921) {
        goto LABEL_184;
      }
      int v14 = 65566;
    }
    BOOL v8 = v3 == (void *)1;
    BOOL v30 = 1;
    goto LABEL_200;
  }
LABEL_184:
  if (v3 == (void *)6 && !v43)
  {
    LOBYTE(v8) = 0;
    if (!(*(_DWORD *)v2 ^ 0x6F746C70 | *((unsigned __int16 *)v2 + 2) ^ 0x6666)) {
      int v14 = 65567;
    }
    goto LABEL_208;
  }
  BOOL v8 = v3 == (void *)1;
  if (v3 == (void *)1 && !v43)
  {
    if (*(unsigned char *)v2 == 108)
    {
      int v14 = 65584;
LABEL_204:
      int v43 = v3 == (void *)2;
      LOBYTE(v8) = 1;
      goto LABEL_208;
    }
    BOOL v8 = 1;
  }
LABEL_200:
  int v45 = v14 & 0x10000;
  if (v8 && !v45 && *(unsigned char *)v2 == 104)
  {
    int v14 = 65585;
    goto LABEL_204;
  }
  int v43 = v3 == (void *)2;
  if (v3 == (void *)2 && !v45)
  {
    int v43 = 1;
    if (*(_WORD *)v2 == 24936)
    {
      int v14 = 65586;
      goto LABEL_364;
    }
  }
LABEL_208:
  int v46 = v14 & 0x10000;
  if (v30 && !v46 && *(_DWORD *)v2 == 1751607656)
  {
    int v14 = 65587;
    BOOL v30 = 1;
    goto LABEL_364;
  }
  if (v46) {
    int v47 = 0;
  }
  else {
    int v47 = v15;
  }
  if (v47 == 1 && *(_DWORD *)v2 == 1751607656 && *((unsigned char *)v2 + 4) == 97)
  {
    int v14 = 65588;
    goto LABEL_364;
  }
  BOOL v49 = v3 == (void *)6 && v46 == 0;
  int v50 = v49;
  if (v49 && *(_DWORD *)v2 == 1751607656 && *((_WORD *)v2 + 2) == 29285)
  {
    int v14 = 65589;
    goto LABEL_364;
  }
  if (v46) {
    BOOL v52 = 0;
  }
  else {
    BOOL v52 = v10;
  }
  if (v52)
  {
    if (*(_DWORD *)v2 == 1751607656 && *(_DWORD *)((char *)v2 + 3) == 1634887016)
    {
      int v14 = 65590;
    }
    else
    {
      if (*(_DWORD *)v2 != 1751607656 || *(_DWORD *)((char *)v2 + 3) != 1953719656) {
        goto LABEL_243;
      }
      int v14 = 65591;
    }
LABEL_307:
    BOOL v68 = v3 == (void *)12;
    BOOL v10 = 1;
    goto LABEL_365;
  }
LABEL_243:
  if (v46) {
    int v55 = 0;
  }
  else {
    int v55 = v31;
  }
  if (v55 == 1 && *v2 == (void *)0x6174736568676968)
  {
    int v14 = 65592;
    goto LABEL_364;
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1081372519 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65593;
      goto LABEL_364;
    }
    if (*(_DWORD *)v2 == 1081372519 && *((unsigned char *)v2 + 4) == 104)
    {
      int v14 = 65594;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1081372519 && *((_WORD *)v2 + 2) == 24936)
    {
      int v14 = 65595;
      goto LABEL_364;
    }
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1633906540 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65648;
      goto LABEL_364;
    }
  }
  if (v52 && *(_DWORD *)v2 == 1650683764 && *(_DWORD *)((char *)v2 + 3) == 1702060386)
  {
    int v14 = 65596;
    goto LABEL_364;
  }
  if (v46) {
    int v61 = 0;
  }
  else {
    int v61 = v13;
  }
  if (v61 == 1 && *(_WORD *)v2 == 28532 && *((unsigned char *)v2 + 2) == 99)
  {
    int v14 = 65597;
    goto LABEL_364;
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1080258420 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65598;
      goto LABEL_364;
    }
    if (*(_DWORD *)v2 == 1080258420 && *((unsigned char *)v2 + 4) == 104)
    {
      int v14 = 65599;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1080258420 && *((_WORD *)v2 + 2) == 24936)
    {
      int v14 = 65600;
      goto LABEL_364;
    }
  }
  char v66 = !v8;
  if (v46) {
    char v66 = 1;
  }
  if ((v66 & 1) == 0)
  {
    int v67 = *(unsigned __int8 *)v2;
    if (v67 == 108)
    {
      int v14 = 65602;
      goto LABEL_364;
    }
    if (v67 == 117)
    {
      int v14 = 65601;
LABEL_364:
      BOOL v68 = v3 == (void *)12;
      goto LABEL_365;
    }
  }
  if (v61)
  {
    if (*(_WORD *)v2 == 27764 && *((unsigned char *)v2 + 2) == 115)
    {
      int v14 = 65630;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1836086372 && *((_WORD *)v2 + 2) == 25711)
    {
      int v14 = 65603;
      goto LABEL_364;
    }
  }
  if (!v52) {
    goto LABEL_330;
  }
  if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1816161381)
  {
    int v14 = 65604;
    goto LABEL_307;
  }
  if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1749052517)
  {
    int v14 = 65605;
    goto LABEL_307;
  }
LABEL_330:
  if (v55 && *v2 == (void *)0x6168406C65727074)
  {
    int v14 = 65606;
    goto LABEL_364;
  }
  char v73 = !v28;
  if (v46) {
    char v73 = 1;
  }
  if ((v73 & 1) == 0 && *v2 == (void *)0x6968406C65727074 && *((_WORD *)v2 + 4) == 26727)
  {
    int v14 = 65607;
    goto LABEL_364;
  }
  char v75 = !v29;
  if (v46) {
    char v75 = 1;
  }
  if ((v75 & 1) == 0
    && *v2 == (void *)0x6968406C65727074
    && *(void **)((char *)v2 + 3) == (void *)0x6168676968406C65)
  {
    BOOL v68 = v3 == (void *)12;
    int v14 = 65608;
LABEL_801:
    BOOL v77 = v3 == (void *)13;
    goto LABEL_372;
  }
  BOOL v68 = v3 == (void *)12;
  if (v3 == (void *)12 && !v46)
  {
    if (!((unint64_t)*v2 ^ 0x6968406C65727074 | *((unsigned int *)v2 + 2) ^ 0x72656867)) {
      int v14 = 65609;
    }
    BOOL v68 = 1;
    goto LABEL_801;
  }
LABEL_365:
  BOOL v77 = v3 == (void *)13;
  if (v3 == (void *)13 && (v14 & 0x30000) == 0)
  {
    if (*v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 5) == (void *)0x6172656867696840)
    {
      int v14 = 65610;
LABEL_387:
      BOOL v81 = v3 == (void *)14;
      BOOL v77 = 1;
      goto LABEL_388;
    }
    BOOL v77 = 1;
  }
LABEL_372:
  int v79 = v14 & 0x10000;
  if (v77 && !v79 && *v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 5) == (void *)0x7473656867696840)
  {
    int v14 = 65611;
    goto LABEL_387;
  }
  BOOL v81 = v3 == (void *)14;
  if (v3 == (void *)14 && !v79)
  {
    if (*v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 6) == (void *)0x6174736568676968)
    {
      int v14 = 65612;
      goto LABEL_446;
    }
    BOOL v81 = 1;
  }
LABEL_388:
  int v83 = v14 & 0x10000;
  if (v31 && !v83)
  {
    if (*v2 == (void *)0x6C406C6572707464)
    {
      int v14 = 65613;
      int v31 = 1;
      goto LABEL_446;
    }
    if (*v2 == (void *)0x68406C6572707464)
    {
      int v14 = 65614;
      goto LABEL_446;
    }
  }
  char v84 = v25 ^ 1;
  if (v83) {
    char v84 = 1;
  }
  if ((v84 & 1) == 0 && *v2 == (void *)0x68406C6572707464 && *((unsigned char *)v2 + 8) == 97)
  {
    int v14 = 65615;
    goto LABEL_446;
  }
  char v86 = !v29;
  if (v83) {
    char v86 = 1;
  }
  if ((v86 & 1) == 0
    && *v2 == (void *)0x68406C6572707464
    && *(void **)((char *)v2 + 3) == (void *)0x68676968406C6572)
  {
    int v14 = 65616;
    goto LABEL_446;
  }
  char v88 = !v68;
  if (v83) {
    char v88 = 1;
  }
  if ((v88 & 1) == 0 && *v2 == (void *)0x68406C6572707464 && *((_DWORD *)v2 + 2) == 1634232169)
  {
    int v14 = 65617;
    goto LABEL_446;
  }
  char v90 = !v77;
  if (v83) {
    char v90 = 1;
  }
  if ((v90 & 1) == 0
    && *v2 == (void *)0x68406C6572707464
    && *(void **)((char *)v2 + 5) == (void *)0x726568676968406CLL)
  {
    int v14 = 65618;
    goto LABEL_446;
  }
  char v92 = !v81;
  if (v83) {
    char v92 = 1;
  }
  if ((v92 & 1) == 0)
  {
    if (*v2 != (void *)0x68406C6572707464 || *(void **)((char *)v2 + 6) != (void *)0x6172656867696840)
    {
      if (*v2 == (void *)0x68406C6572707464 && *(void **)((char *)v2 + 6) == (void *)0x7473656867696840)
      {
        int v14 = 65620;
        goto LABEL_850;
      }
      goto LABEL_431;
    }
    int v14 = 65619;
LABEL_446:
    BOOL v95 = v3 == (void *)15;
    goto LABEL_447;
  }
LABEL_431:
  BOOL v95 = v3 == (void *)15;
  if (v3 == (void *)15 && !v83)
  {
    if (*v2 == (void *)0x68406C6572707464 && *(void **)((char *)v2 + 7) == (void *)0x6174736568676968)
    {
      int v14 = 65621;
      goto LABEL_850;
    }
    BOOL v95 = 1;
  }
LABEL_447:
  int v97 = v14 & 0x10000;
  if ((v14 & 0x30000) != 0) {
    int v98 = 0;
  }
  else {
    int v98 = v25;
  }
  if (v98 == 1 && *v2 == (void *)0x6572707440746F67 && *((unsigned char *)v2 + 8) == 108)
  {
    int v14 = 65622;
    goto LABEL_850;
  }
  if (v97) {
    BOOL v100 = 0;
  }
  else {
    BOOL v100 = v29;
  }
  if (v100)
  {
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C406C6572707440)
    {
      int v14 = 65623;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 3) == (void *)0x68406C6572707440)
    {
      int v14 = 65624;
      goto LABEL_850;
    }
  }
  if (v97) {
    BOOL v68 = 0;
  }
  if (v68 && *v2 == (void *)0x6572707440746F67 && *((_DWORD *)v2 + 2) == 1634222188)
  {
    int v14 = 65625;
    goto LABEL_850;
  }
  char v104 = !v28;
  if (v97) {
    char v104 = 1;
  }
  if ((v104 & 1) == 0 && *v2 == (void *)0x7270746440746F67 && *((_WORD *)v2 + 4) == 27749)
  {
    int v14 = 65626;
    goto LABEL_850;
  }
  if (v68)
  {
    if (*v2 == (void *)0x7270746440746F67 && *((_DWORD *)v2 + 2) == 1816161381)
    {
      int v14 = 65627;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x7270746440746F67 && *((_DWORD *)v2 + 2) == 1749052517)
    {
      int v14 = 65628;
      goto LABEL_850;
    }
  }
  if (v97) {
    BOOL v108 = 0;
  }
  else {
    BOOL v108 = v77;
  }
  if (v108 && *v2 == (void *)0x7270746440746F67 && *(void **)((char *)v2 + 5) == (void *)0x6168406C65727074)
  {
    int v14 = 65629;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *((unsigned char *)v2 + 8) == 100)
    {
      int v14 = 65631;
      goto LABEL_850;
    }
  }
  if (v100)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C406467736C7440)
    {
      int v14 = 65632;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x68406467736C7440)
    {
      int v14 = 65633;
      goto LABEL_850;
    }
  }
  if (v68 && *v2 == (void *)0x67736C7440746F67 && *((_DWORD *)v2 + 2) == 1634222180)
  {
    int v14 = 65634;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x6C736C7440746F67 && *((unsigned char *)v2 + 8) == 100)
    {
      int v14 = 65638;
      goto LABEL_850;
    }
  }
  if (v100)
  {
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C40646C736C7440)
    {
      int v14 = 65639;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6840646C736C7440)
    {
      int v14 = 65640;
      goto LABEL_850;
    }
  }
  if (v68 && *v2 == (void *)0x6C736C7440746F67 && *((_DWORD *)v2 + 2) == 1634222180)
  {
    int v14 = 65641;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x6572637040746F67 && *((unsigned char *)v2 + 8) == 108)
    {
      int v14 = 65642;
      goto LABEL_850;
    }
  }
  char v119 = !v95;
  if (v97) {
    char v119 = 1;
  }
  if ((v119 & 1) == 0)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C65726370406467)
    {
      int v14 = 65643;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C6572637040646CLL)
    {
      int v14 = 65644;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C65726370406C65)
    {
      int v14 = 65645;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x6572637040736C74 && *((unsigned char *)v2 + 8) == 108)
    {
      int v14 = 65646;
      goto LABEL_850;
    }
  }
  if (v97) {
    int v124 = 0;
  }
  else {
    int v124 = v15;
  }
  if (v124 == 1)
  {
    if (*(_DWORD *)v2 == 1869901678 && *((unsigned char *)v2 + 4) == 99)
    {
      int v14 = 65649;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1869046887 && *((unsigned char *)v2 + 4) == 116)
    {
      int v14 = 65655;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1819305063 && *((unsigned char *)v2 + 4) == 116)
    {
      int v14 = 65657;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1869047145 && *((unsigned char *)v2 + 4) == 116)
    {
      int v14 = 65660;
      goto LABEL_850;
    }
  }
  if (v97) {
    int v43 = 0;
  }
  if (v43 == 1 && *(_WORD *)v2 == 25961)
  {
    int v14 = 65659;
    goto LABEL_850;
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1869046892 && *((unsigned char *)v2 + 4) == 116)
    {
      int v14 = 65656;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1819305068 && *((unsigned char *)v2 + 4) == 116)
    {
      int v14 = 65658;
      goto LABEL_850;
    }
  }
  if (v97) {
    BOOL v30 = 0;
  }
  if (v30 && *(_DWORD *)v2 == 1701736302)
  {
    int v14 = 65568;
    goto LABEL_850;
  }
  if (v97) {
    int v131 = 0;
  }
  else {
    int v131 = v31;
  }
  if (v131 == 1 && *v2 == (void *)0x6C6572705F746F67)
  {
    int v14 = 65569;
    goto LABEL_850;
  }
  if (v97) {
    BOOL v10 = 0;
  }
  if (v10)
  {
    if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 829711719)
    {
      int v14 = 65570;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 846488935)
    {
      int v14 = 65571;
      goto LABEL_850;
    }
  }
  BOOL v134 = v3 == (void *)6 && v97 == 0;
  int v135 = v134;
  if (v134 && *(_DWORD *)v2 == 1818587760 && *((_WORD *)v2 + 2) == 12595)
  {
    int v14 = 65572;
    goto LABEL_850;
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1701995123 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65573;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1819503732 && *((_WORD *)v2 + 2) == 28516)
    {
      int v14 = 65574;
      goto LABEL_850;
    }
  }
  char v139 = v13 ^ 1;
  if (v97) {
    char v139 = 1;
  }
  if ((v139 & 1) == 0)
  {
    if (*(_WORD *)v2 == 28524 && *((unsigned char *)v2 + 2) == 56)
    {
      int v14 = 65577;
      goto LABEL_850;
    }
    if (*(_WORD *)v2 == 26984 && *((unsigned char *)v2 + 2) == 56)
    {
      int v14 = 65578;
      goto LABEL_850;
    }
  }
  if (v30 && *(_DWORD *)v2 == 946826344)
  {
    int v14 = 65579;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x65646E6965707974 && *((unsigned char *)v2 + 8) == 120)
    {
      int v14 = 65661;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1701995124 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65664;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1701995117 && *((unsigned char *)v2 + 4) == 108)
    {
      int v14 = 65663;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1920167028 && *((_WORD *)v2 + 2) == 27749)
    {
      int v14 = 65662;
      goto LABEL_850;
    }
  }
  if (v10 && *(_DWORD *)v2 == 1081372519 && *(_DWORD *)((char *)v2 + 3) == 1936487488)
  {
    int v14 = 65665;
    goto LABEL_850;
  }
  if (v108)
  {
    if (*v2 == (void *)0x6C65726370746F67 && *(void **)((char *)v2 + 5) == (void *)0x6F6C4032336C6572)
    {
      int v14 = 65666;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C65726370746F67 && *(void **)((char *)v2 + 5) == (void *)0x69684032336C6572)
    {
      int v14 = 65667;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x6F6C4032336C6572)
    {
      int v14 = 65668;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x69684032336C6572)
    {
      int v14 = 65669;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 913073522 && *((unsigned char *)v2 + 4) == 52)
    {
      int v14 = 65670;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x6F6C403233736261)
    {
      int v14 = 65671;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6968403233736261)
    {
      int v14 = 65672;
      goto LABEL_850;
    }
  }
  if (v43)
  {
    if (*(_WORD *)v2 == 26984)
    {
      int v14 = 65673;
      goto LABEL_850;
    }
    if (*(_WORD *)v2 == 28524)
    {
      int v14 = 65674;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1751081840 && *((unsigned char *)v2 + 4) == 105)
    {
      int v14 = 65675;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1818190704 && *((unsigned char *)v2 + 4) == 111)
    {
      int v14 = 65676;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601466215 && *((_WORD *)v2 + 2) == 26984)
    {
      int v14 = 65677;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601466215 && *((_WORD *)v2 + 2) == 28524)
    {
      int v14 = 65678;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x685F66666F746F67 && *((unsigned char *)v2 + 8) == 105)
    {
      int v14 = 65679;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C5F66666F746F67 && *((unsigned char *)v2 + 8) == 111)
    {
      int v14 = 65680;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601465456 && *((_WORD *)v2 + 2) == 26984)
    {
      int v14 = 65681;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601465456 && *((_WORD *)v2 + 2) == 28524)
    {
      int v14 = 65682;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x685F64675F736C74 && *((unsigned char *)v2 + 8) == 105)
    {
      int v14 = 65683;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C5F64675F736C74 && *((unsigned char *)v2 + 8) == 111)
    {
      int v14 = 65684;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x69685F66666F7074)
    {
      int v14 = 65685;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6F6C5F66666F7074)
    {
      int v14 = 65686;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 28524)
    {
      int v14 = 65687;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 26984)
    {
      int v14 = 65688;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 29555)
    {
      int v14 = 65689;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x36746F675F786761 && *((unsigned char *)v2 + 8) == 52)
    {
      int v14 = 65690;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x33746F675F786761 && *((unsigned char *)v2 + 8) == 50)
    {
      int v14 = 65691;
      goto LABEL_850;
    }
    uint64_t v165 = (unint64_t)*v2 ^ 0x31746F675F786761 | *((unsigned __int8 *)v2 + 8) ^ 0x36;
    if (v165) {
      BOOL v166 = v100;
    }
    else {
      BOOL v166 = 0;
    }
    if (v165) {
      int v167 = v14;
    }
    else {
      int v167 = 65692;
    }
    if (!v166)
    {
      int v14 = v167;
      goto LABEL_850;
    }
  }
  else if (!v100)
  {
    goto LABEL_850;
  }
  if (!((unint64_t)*v2 ^ 0x5F746F675F786761 | *(unint64_t *)((char *)v2 + 3) ^ 0x736C745F746F675FLL)) {
    int v14 = 65693;
  }
LABEL_850:
  if (v171 < 0) {
    operator delete(v170[0]);
  }
  if ((v14 & 0x30000) != 0) {
    return (unsigned __int16)v14;
  }
  else {
    return 1;
  }
}

uint64_t llvm::MCExpr::evaluateAsAbsolute(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  long long v8 = 0uLL;
  int v10 = 0;
  uint64_t v9 = 0;
  if (*(unsigned char *)a1 == 1)
  {
    *a2 = *(void *)(a1 + 16);
    return 1;
  }
  else
  {
    uint64_t result = llvm::MCExpr::evaluateAsRelocatableImpl(a1, (uint64_t)&v8, a3, a4, 0, a5, a6);
    *a2 = v9;
    if (result) {
      return v8 == 0;
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsAbsolute(llvm::MCExpr *this, uint64_t *a2, const llvm::MCAsmLayout *a3)
{
  uint64_t v5 = *(void *)a3;
  long long v7 = 0uLL;
  int v9 = 0;
  uint64_t v8 = 0;
  if (*(unsigned char *)this == 1)
  {
    *a2 = *((void *)this + 2);
    return 1;
  }
  else
  {
    uint64_t result = llvm::MCExpr::evaluateAsRelocatableImpl(this, &v7, v5, a3, 0, 0, 0);
    *a2 = v8;
    if (result) {
      return v7 == 0;
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsAbsolute(llvm::MCExpr *this, uint64_t *a2, const llvm::MCAssembler *a3)
{
  long long v5 = 0uLL;
  int v7 = 0;
  uint64_t v6 = 0;
  if (*(unsigned char *)this == 1)
  {
    *a2 = *((void *)this + 2);
    return 1;
  }
  else
  {
    uint64_t result = llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)this, (uint64_t)&v5, (uint64_t *)a3, 0, 0, 0, 0);
    *a2 = v6;
    if (result) {
      return v5 == 0;
    }
  }
  return result;
}

{
  uint64_t result;
  long long v5;
  uint64_t v6;
  int v7;

  long long v5 = 0uLL;
  int v7 = 0;
  uint64_t v6 = 0;
  if (*(unsigned char *)this == 1)
  {
    *a2 = *((void *)this + 2);
    return 1;
  }
  else
  {
    uint64_t result = llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)this, (uint64_t)&v5, (uint64_t *)a3, 0, 0, 0, 0);
    *a2 = v6;
    if (result) {
      return v5 == 0;
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateKnownAbsolute(llvm::MCExpr *this, uint64_t *a2, uint64_t **a3)
{
  long long v5 = *a3;
  long long v7 = 0uLL;
  int v9 = 0;
  uint64_t v8 = 0;
  if (*(unsigned char *)this == 1)
  {
    *a2 = *((void *)this + 2);
    return 1;
  }
  else
  {
    uint64_t result = llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)this, (uint64_t)&v7, v5, (uint64_t)a3, 0, 0, 1);
    *a2 = v8;
    if (result) {
      return v7 == 0;
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsRelocatableImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  if (*(unsigned char *)a1 != 2)
  {
    switch(*(unsigned char *)a1)
    {
      case 1:
        uint64_t v28 = *(void *)(a1 + 16);
        goto LABEL_38;
      case 2:
        __break(1u);
        goto LABEL_54;
      case 3:
LABEL_54:
        memset(v52, 0, 28);
        int v36 = llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 16), v52, a3, a4, a5, a6, a7);
        uint64_t result = 0;
        if (v36)
        {
          switch(*(_DWORD *)(a1 + 1) & 0xFFFFFF)
          {
            case 0:
              if (v52[0] != 0) {
                return 0;
              }
              uint64_t v28 = *(void *)&v52[1] == 0;
              goto LABEL_38;
            case 1:
              uint64_t v46 = *(void *)&v52[0];
              if (*(void *)&v52[0] && !*((void *)&v52[0] + 1)) {
                return 0;
              }
              uint64_t v47 = -*(void *)&v52[1];
              *(void *)a2 = *((void *)&v52[0] + 1);
              *(void *)(a2 + 8) = v46;
              *(void *)(a2 + 16) = v47;
              goto LABEL_40;
            case 2:
              if (v52[0] != 0) {
                return 0;
              }
              uint64_t v28 = ~*(void *)&v52[1];
              goto LABEL_38;
            case 3:
              *(_OWORD *)a2 = v52[0];
              *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)v52 + 12);
              return 1;
            default:
              return 1;
          }
        }
        return result;
      case 4:
        int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32);
        uint64_t v38 = a1 - 8;
        return v37(v38, a2, a4, a5);
      default:
        memset(v52, 0, 28);
        long long v49 = 0uLL;
        int v51 = 0;
        uint64_t v50 = 0;
        if (llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 16), v52, a3, a4, a5, a6, a7)
          && (llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 24), &v49, a3, a4, a5, a6, a7) & 1) != 0)
        {
          if (v52[0] == 0 && v49 == 0)
          {
            unsigned int v29 = *(_DWORD *)(a1 + 1) & 0xFFFFFF;
            if (v29 == 18)
            {
              uint64_t v30 = *(void *)&v52[1] - v50;
LABEL_47:
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = v30;
              goto LABEL_4;
            }
            uint64_t v30 = 0;
            if (v29 <= 0x12)
            {
              switch(v29)
              {
                case 0u:
                  uint64_t v30 = v50 + *(void *)&v52[1];
                  goto LABEL_47;
                case 1u:
                  uint64_t v30 = v50 & *(void *)&v52[1];
                  goto LABEL_47;
                case 2u:
                case 0xAu:
                  if (!v50) {
                    return 0;
                  }
                  if (v29 == 2)
                  {
                    uint64_t v30 = *(void *)&v52[1] / v50;
                    goto LABEL_47;
                  }
                  uint64_t v30 = *(void *)&v52[1] % v50;
                  break;
                case 3u:
                  uint64_t v30 = *(void *)&v52[1] == v50;
                  goto LABEL_104;
                case 4u:
                  uint64_t v30 = *(void *)&v52[1] > v50;
                  goto LABEL_104;
                case 5u:
                  uint64_t v30 = *(void *)&v52[1] >= v50;
                  goto LABEL_104;
                case 6u:
                  if (*(void *)&v52[1]) {
                    BOOL v48 = v50 == 0;
                  }
                  else {
                    BOOL v48 = 1;
                  }
                  goto LABEL_97;
                case 7u:
                  BOOL v48 = (*(void *)&v52[1] | v50) == 0;
LABEL_97:
                  uint64_t v30 = !v48;
                  goto LABEL_47;
                case 8u:
                  uint64_t v30 = *(void *)&v52[1] < v50;
                  goto LABEL_104;
                case 9u:
                  uint64_t v30 = *(void *)&v52[1] <= v50;
                  goto LABEL_104;
                case 0xBu:
                  uint64_t v30 = v50 * *(void *)&v52[1];
                  goto LABEL_47;
                case 0xCu:
                  uint64_t v30 = *(void *)&v52[1] != v50;
                  goto LABEL_104;
                case 0xDu:
                  uint64_t v30 = v50 | *(void *)&v52[1];
                  goto LABEL_47;
                case 0xEu:
                  uint64_t v30 = *(void *)&v52[1] | ~v50;
                  goto LABEL_47;
                case 0xFu:
                  uint64_t v30 = *(void *)&v52[1] << v50;
                  goto LABEL_47;
                case 0x10u:
                  uint64_t v30 = *(uint64_t *)&v52[1] >> v50;
                  goto LABEL_47;
                case 0x11u:
                  uint64_t v30 = *(void *)&v52[1] >> v50;
                  goto LABEL_47;
                case 0x12u:
                  break;
                case 0x13u:
                  uint64_t v30 = v50 ^ *(void *)&v52[1];
                  goto LABEL_47;
                default:
                  JUMPOUT(0);
              }
            }
            if (v29 > 0xC || ((1 << *(unsigned char *)(a1 + 1)) & 0x1338) == 0) {
              goto LABEL_47;
            }
LABEL_104:
            if (v30) {
              uint64_t v28 = -1;
            }
            else {
              uint64_t v28 = 0;
            }
            goto LABEL_38;
          }
          int v16 = *(_DWORD *)(a1 + 1) & 0xFFFFFF;
          if (v16 == 18)
          {
            uint64_t v17 = *((void *)&v49 + 1);
            uint64_t v18 = v49;
            uint64_t v19 = -v50;
            return sub_1CCBC55A8((uint64_t)a3, a4, a6, a7, (uint64_t *)v52, v17, v18, v19, a2);
          }
          if (!v16)
          {
            uint64_t v18 = *((void *)&v49 + 1);
            uint64_t v17 = v49;
            uint64_t v19 = v50;
            return sub_1CCBC55A8((uint64_t)a3, a4, a6, a7, (uint64_t *)v52, v17, v18, v19, a2);
          }
        }
        else
        {
          int v31 = *(unsigned __int8 **)(a1 + 16);
          int v33 = *v31;
          uint64_t v32 = v31 - 8;
          if (v33 == 4)
          {
            uint64_t v34 = *(void *)(a1 + 24);
            if (v34)
            {
              int v35 = *(_DWORD *)(a1 + 1) & 0xFFFFFF;
              if (v35 == 12)
              {
                unsigned int v41 = (*(uint64_t (**)(void))(*(void *)(v34 - 8) + 40))();
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                uint64_t v28 = v41 - 1;
LABEL_39:
                *(void *)(a2 + 16) = v28;
LABEL_40:
                *(_DWORD *)(a2 + 24) = 0;
                return 1;
              }
              if (v35 == 3)
              {
                uint64_t v28 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v32 + 40))(v32) << 63 >> 63;
LABEL_38:
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                goto LABEL_39;
              }
            }
          }
        }
        return 0;
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if ((*(_DWORD *)(v14 + 8) & 0x1C00) != 0x800) {
    goto LABEL_3;
  }
  int v20 = *(unsigned __int16 *)(a1 + 1);
  if (!a4)
  {
    if (*(_WORD *)(a1 + 1)) {
      goto LABEL_3;
    }
  }
  *(_DWORD *)(v14 + 8) |= 4u;
  uint64_t v21 = *(void *)(v14 + 24);
  if (*(unsigned char *)v21 != 2)
  {
    if (a7) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  int v39 = *(unsigned __int16 *)(v21 + 1);
  if (v39 != 29 && (a7 & 1) == 0)
  {
LABEL_17:
    uint64_t v22 = *(void *)v14;
    unint64_t AssociatedFragment = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
    if (!AssociatedFragment)
    {
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v21);
      uint64_t v22 = *(void *)v14 & 7 | AssociatedFragment;
      *(void *)uint64_t v14 = v22;
    }
    if (AssociatedFragment)
    {
      unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v14 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v14 + 8) |= 4u;
        unint64_t v24 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v14 + 24));
        *(void *)uint64_t v14 = *(void *)v14 & 7 | v24;
      }
      if ((_UNKNOWN *)v24 != llvm::MCSymbol::AbsolutePseudoFragment) {
        goto LABEL_3;
      }
    }
    goto LABEL_22;
  }
  if (v39 == 29) {
    goto LABEL_3;
  }
LABEL_22:
  int v25 = *(_DWORD *)(a1 + 1);
  *(_DWORD *)(v14 + 8) |= 4u;
  if (!llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(v14 + 24), a2, a3, a4, a5, a6, a7 | ((v25 & 0x10000u) >> 16)))
  {
LABEL_3:
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = a1;
LABEL_4:
    uint64_t result = 1;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  if (!v20) {
    goto LABEL_24;
  }
  uint64_t v40 = *(void *)a2;
  if (*(_OWORD *)a2 == 0)
  {
    *(void *)a2 = a1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t result = 1;
    *(_DWORD *)(a2 + 24) = 0;
    return result;
  }
  uint64_t result = 0;
  if (v40 && !*(_DWORD *)(a2 + 24) && !*(void *)(a2 + 8) && !*(void *)(a2 + 16))
  {
    uint64_t v42 = *(void *)(v40 + 16);
    uint64_t v43 = *a3;
    uint64_t v44 = sub_1CB906F34((uint64_t *)(v43 + 192), 24, 3);
    int v45 = *(unsigned __int8 *)(*(void *)(v43 + 152) + 18);
    *(unsigned char *)uint64_t v44 = 2;
    *(_DWORD *)(v44 + 1) = (*(unsigned __int8 *)(v44 + 4) << 24) | (v45 << 16) | v20;
    *(void *)(v44 + 8) = 0;
    *(void *)(v44 + 16) = v42;
    *(void *)a2 = v44;
LABEL_24:
    if ((v25 & 0x10000) == 0 || *(_OWORD *)a2 == 0) {
      return 1;
    }
    BOOL v26 = !*(void *)a2 || *(void *)(a2 + 8) == 0;
    BOOL v27 = !v26;
    if (!*(void *)(a2 + 16) && !v27) {
      return 1;
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsRelocatable(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)a3;
  if (a3) {
    a3 = (uint64_t *)*a3;
  }
  return llvm::MCExpr::evaluateAsRelocatableImpl(a1, a2, a3, v5, a4, 0, 0);
}

uint64_t sub_1CCBC55A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = a7;
  uint64_t v21 = a6;
  uint64_t v9 = *a5;
  uint64_t v18 = a5[1];
  uint64_t v19 = v9;
  uint64_t v17 = a5[2] + a8;
  if (a1)
  {
    sub_1CCBC5830(a1, a2, a3, a4, &v19, &v18, &v17);
    sub_1CCBC5830(a1, a2, a3, a4, &v19, &v20, &v17);
    sub_1CCBC5830(a1, a2, a3, a4, &v21, &v18, &v17);
    sub_1CCBC5830(a1, a2, a3, a4, &v21, &v20, &v17);
    uint64_t v9 = v19;
    a6 = v21;
  }
  if (v9 && a6) {
    return 0;
  }
  uint64_t v14 = v18;
  if (v18)
  {
    if (v20) {
      return 0;
    }
  }
  if (!v9) {
    uint64_t v9 = a6;
  }
  uint64_t v16 = v17;
  if (!v18) {
    uint64_t v14 = v20;
  }
  *(void *)a9 = v9;
  *(void *)(a9 + 8) = v14;
  *(void *)(a9 + 16) = v16;
  *(_DWORD *)(a9 + 24) = 0;
  return 1;
}

unint64_t llvm::MCExpr::findAssociatedFragment(llvm::MCExpr *this)
{
  while (2)
  {
    if (*(unsigned char *)this == 2)
    {
      uint64_t v5 = *((void *)this + 2);
      unint64_t result = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!result && (*(_DWORD *)(v5 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v5 + 8) |= 4u;
        unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v5 + 24));
        *(void *)uint64_t v5 = *(void *)v5 & 7 | result;
      }
    }
    else
    {
      switch(*(unsigned char *)this)
      {
        case 1:
          return (unint64_t)llvm::MCSymbol::AbsolutePseudoFragment;
        case 2:
          __break(1u);
          goto LABEL_20;
        case 3:
          this = (llvm::MCExpr *)*((void *)this + 2);
          continue;
        case 4:
LABEL_20:
          uint64_t v6 = *(uint64_t (**)(char *))(*((void *)this - 1) + 64);
          return v6((char *)this - 8);
        default:
          unint64_t AssociatedFragment = (void *)llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 2));
          unint64_t result = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 3));
          if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment
            && (_UNKNOWN *)result != llvm::MCSymbol::AbsolutePseudoFragment)
          {
            goto LABEL_5;
          }
          if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
          {
            if ((_UNKNOWN *)result == llvm::MCSymbol::AbsolutePseudoFragment)
            {
              unint64_t result = (unint64_t)AssociatedFragment;
            }
            else
            {
LABEL_5:
              if (AssociatedFragment) {
                unint64_t v4 = (unint64_t)AssociatedFragment;
              }
              else {
                unint64_t v4 = result;
              }
              if ((*(_DWORD *)((unsigned char *)this + 1) & 0xFFFFFF) == 0x12) {
                unint64_t result = (unint64_t)llvm::MCSymbol::AbsolutePseudoFragment;
              }
              else {
                unint64_t result = v4;
              }
            }
          }
          break;
      }
    }
    return result;
  }
}

uint64_t sub_1CCBC5830(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7 = *a6;
  if (*a5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(*a5 + 16);
    uint64_t v17 = *(void *)(v7 + 16);
    unint64_t result = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
    if (!result && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v16 + 8) |= 4u;
      unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
      *(void *)uint64_t v16 = *(void *)v16 & 7 | result;
    }
    if (result)
    {
      unint64_t result = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
      if (!result && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v17 + 8) |= 4u;
        unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
        *(void *)uint64_t v17 = *(void *)v17 & 7 | result;
      }
      if (result)
      {
        unint64_t result = llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(*(void *)(v15 + 24), v15, *a5, *a6, a4);
        if (result)
        {
          unint64_t v18 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
          if (!v18 && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v16 + 8) |= 4u;
            unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
            unint64_t v18 = result;
            *(void *)uint64_t v16 = *(void *)v16 & 7 | result;
          }
          unint64_t v19 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
          if (!v19 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v17 + 8) |= 4u;
            unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
            unint64_t v19 = result;
            *(void *)uint64_t v17 = *(void *)v17 & 7 | result;
          }
          if (v18 != v19
            || (*(_DWORD *)(v16 + 8) & 0x1400 | 0x800) == 0x800
            || (*(_DWORD *)(v17 + 8) & 0x1400 | 0x800) == 0x800)
          {
            uint64_t v20 = *(void *)(v18 + 16);
            uint64_t v21 = *(void *)(v19 + 16);
            if (!a3 && v20 != v21) {
              return result;
            }
            if (a2)
            {
              uint64_t v22 = *(void *)(a2 + 152);
              int v23 = *(_DWORD *)(a2 + 168);
              unsigned int v76 = v20 >> 4;
              uint64_t v77 = *(void *)(v18 + 16);
              if (v23)
              {
                int v24 = v23 - 1;
                unsigned int v25 = v24 & ((v20 >> 4) ^ (v20 >> 9));
                unint64_t result = v22 + 16 * v25;
                uint64_t v26 = *(void *)result;
                if (v20 == *(void *)result) {
                  goto LABEL_20;
                }
                uint64_t v59 = 0;
                int v60 = 1;
                while (v26 != -4096)
                {
                  if (v59) {
                    BOOL v61 = 0;
                  }
                  else {
                    BOOL v61 = v26 == -8192;
                  }
                  if (v61) {
                    uint64_t v59 = (void *)result;
                  }
                  unsigned int v62 = v25 + v60++;
                  unsigned int v25 = v62 & v24;
                  unint64_t result = v22 + 16 * v25;
                  uint64_t v26 = *(void *)result;
                  if (v20 == *(void *)result) {
                    goto LABEL_20;
                  }
                }
                uint64_t v74 = v21;
                uint64_t v75 = v20;
                if (v59) {
                  int v67 = v59;
                }
                else {
                  int v67 = (void *)result;
                }
              }
              else
              {
                uint64_t v74 = v21;
                uint64_t v75 = v20;
                int v67 = 0;
              }
              unint64_t result = (uint64_t)sub_1CCBB42FC(a2 + 152, (uint64_t)&v77, &v77, v67);
              *(void *)unint64_t result = v77;
              *(void *)(result + 8) = 0;
              uint64_t v21 = v74;
              uint64_t v20 = v75;
LABEL_20:
              uint64_t v27 = *(void *)(result + 8);
              if (v27)
              {
                if (*(_DWORD *)(v18 + 40) <= *(_DWORD *)(v27 + 40)) {
                  goto LABEL_22;
                }
                uint64_t v72 = v27 + 8;
              }
              else
              {
                uint64_t v72 = v77 + 112;
              }
              if (*(unsigned char *)(*(void *)v72 + 49)) {
                return result;
              }
LABEL_22:
              uint64_t v28 = *(void *)(v19 + 16);
              uint64_t v77 = v28;
              int v29 = *(_DWORD *)(a2 + 168);
              if (v29)
              {
                uint64_t v30 = *(void *)(a2 + 152);
                int v31 = v29 - 1;
                unsigned int v32 = ((v28 >> 4) ^ (v28 >> 9)) & v31;
                unint64_t result = v30 + 16 * v32;
                uint64_t v33 = *(void *)result;
                if (v28 == *(void *)result) {
                  goto LABEL_24;
                }
                long long v63 = 0;
                int v64 = 1;
                while (v33 != -4096)
                {
                  if (v63) {
                    BOOL v65 = 0;
                  }
                  else {
                    BOOL v65 = v33 == -8192;
                  }
                  if (v65) {
                    long long v63 = (void *)result;
                  }
                  unsigned int v66 = v32 + v64++;
                  unsigned int v32 = v66 & v31;
                  unint64_t result = v30 + 16 * v32;
                  uint64_t v33 = *(void *)result;
                  if (v28 == *(void *)result) {
                    goto LABEL_24;
                  }
                }
                uint64_t v68 = a2 + 152;
                uint64_t v69 = v20;
                uint64_t v70 = v21;
                if (v63) {
                  uint64_t v71 = v63;
                }
                else {
                  uint64_t v71 = (void *)result;
                }
              }
              else
              {
                uint64_t v68 = a2 + 152;
                uint64_t v69 = v20;
                uint64_t v70 = v21;
                uint64_t v71 = 0;
              }
              unint64_t result = (uint64_t)sub_1CCBB42FC(v68, (uint64_t)&v77, &v77, v71);
              *(void *)unint64_t result = v77;
              *(void *)(result + 8) = 0;
              uint64_t v21 = v70;
              uint64_t v20 = v69;
LABEL_24:
              uint64_t v34 = *(void *)(result + 8);
              if (v34)
              {
                if (*(_DWORD *)(v19 + 40) <= *(_DWORD *)(v34 + 40)) {
                  goto LABEL_26;
                }
                uint64_t v73 = v34 + 8;
              }
              else
              {
                uint64_t v73 = v77 + 112;
              }
              if (*(unsigned char *)(*(void *)v73 + 49)) {
                return result;
              }
LABEL_26:
              int v35 = *(uint64_t **)(*a5 + 16);
              uint64_t v77 = 0;
              uint64_t v36 = v21;
              uint64_t v37 = v20;
              sub_1CCBC6418((llvm::MCAsmLayout *)a2, v35, 1, &v77);
              uint64_t v38 = v77;
              int v39 = *(uint64_t **)(*a6 + 16);
              uint64_t v77 = 0;
              sub_1CCBC6418((llvm::MCAsmLayout *)a2, v39, 1, &v77);
              uint64_t v40 = *a7 + v38 - v77;
              *a7 = v40;
              if (v37 == v36 || !a3) {
                goto LABEL_64;
              }
              int v41 = *((_DWORD *)a3 + 4);
              if (v41)
              {
                uint64_t v42 = *a3;
                unsigned int v43 = v41 - 1;
                uint64_t v44 = v43 & (v76 ^ (v37 >> 9));
                uint64_t v45 = *(void *)(*a3 + 16 * v44);
                if (v37 == v45)
                {
LABEL_33:
                  uint64_t v48 = *(void *)(v42 + 16 * v44 + 8);
                }
                else
                {
                  int v46 = 1;
                  while (v45 != -4096)
                  {
                    int v47 = v44 + v46++;
                    uint64_t v44 = v47 & v43;
                    uint64_t v45 = *(void *)(v42 + 16 * v44);
                    if (v37 == v45) {
                      goto LABEL_33;
                    }
                  }
                  uint64_t v48 = 0;
                }
                uint64_t v49 = v43 & ((v36 >> 4) ^ (v36 >> 9));
                uint64_t v50 = *(void *)(v42 + 16 * v49);
                if (v36 == v50)
                {
LABEL_38:
                  uint64_t v53 = *(void *)(v42 + 16 * v49 + 8);
LABEL_39:
                  uint64_t v54 = v48 + v40 - v53;
LABEL_63:
                  *a7 = v54;
LABEL_64:
                  if (llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)v15, (const llvm::MCSymbol *)v16))*a7 |= 1uLL; {
                  unint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v15 + 8) + 224))(*(void *)(v15 + 8), v16);
                  }
                  if (result) {
                    *a7 |= 1uLL;
                  }
                  *a6 = 0;
                  *a5 = 0;
                  return result;
                }
                int v51 = 1;
                while (v50 != -4096)
                {
                  int v52 = v49 + v51++;
                  uint64_t v49 = v52 & v43;
                  uint64_t v50 = *(void *)(v42 + 16 * v49);
                  if (v36 == v50) {
                    goto LABEL_38;
                  }
                }
              }
              else
              {
                uint64_t v48 = 0;
              }
              uint64_t v53 = 0;
              goto LABEL_39;
            }
            if ((*(_DWORD *)(v16 + 8) & 0x1400 | 0x800) == 0x800
              || (*(_DWORD *)(v17 + 8) & 0x1400 | 0x800) == 0x800
              || *(unsigned char *)(v18 + 48) != 1
              || *(unsigned char *)(v19 + 48) != 1)
            {
              return result;
            }
            uint64_t v55 = v20 + 104;
            if (*(_DWORD *)(v18 + 44) != *(_DWORD *)(v19 + 44) || v19 == v55) {
              return result;
            }
            uint64_t v57 = *(void *)(v16 + 24) - *(void *)(v17 + 24);
            while (v19 != v18)
            {
              if (*(unsigned char *)(v19 + 48) == 1)
              {
                v57 += *(void *)(v19 + 72);
                unint64_t v19 = *(void *)(v19 + 8);
                if (v19 != v55) {
                  continue;
                }
              }
              return result;
            }
            uint64_t v58 = *a7;
          }
          else
          {
            uint64_t v58 = *(void *)(v16 + 24) - *(void *)(v17 + 24);
            uint64_t v57 = *a7;
          }
          uint64_t v54 = v58 + v57;
          goto LABEL_63;
        }
      }
    }
  }
  return result;
}

llvm::MCAsmLayout *llvm::MCAsmLayout::MCAsmLayout(llvm::MCAsmLayout *this, llvm::MCAssembler *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 0x1000000000;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  uint64_t v3 = (void *)*((void *)a2 + 4);
  unint64_t v4 = (void *)*((void *)a2 + 5);
  if (v3 != v4)
  {
    do
    {
      uint64_t v6 = *v3;
      if (((*(uint64_t (**)(void))(*(void *)*v3 + 16))(*v3) & 1) == 0)
      {
        unint64_t v7 = *((unsigned int *)this + 4);
        if (v7 >= *((unsigned int *)this + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 1) + 8 * v7) = v6;
        ++*((_DWORD *)this + 4);
      }
      ++v3;
    }
    while (v3 != v4);
    BOOL v8 = (void *)*((void *)a2 + 4);
    uint64_t v9 = (void *)*((void *)a2 + 5);
    while (v8 != v9)
    {
      uint64_t v10 = *v8;
      if ((*(unsigned int (**)(void))(*(void *)*v8 + 16))(*v8))
      {
        unint64_t v12 = *((unsigned int *)this + 4);
        if (v12 >= *((unsigned int *)this + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)this + 1) + 8 * v12) = v10;
        ++*((_DWORD *)this + 4);
      }
      ++v8;
    }
  }
  return this;
}

BOOL llvm::MCAsmLayout::isFragmentValid(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = *(void *)(a1 + 152);
    unsigned int v5 = v2 - 1;
    uint64_t v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
    uint64_t v7 = *(void *)(v4 + 16 * v6);
    if (v3 == v7)
    {
LABEL_3:
      uint64_t v8 = *(void *)(v4 + 16 * v6 + 8);
      if (v8) {
        return *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v8 + 40);
      }
    }
    else
    {
      int v10 = 1;
      while (v7 != -4096)
      {
        int v11 = v6 + v10++;
        uint64_t v6 = v11 & v5;
        uint64_t v7 = *(void *)(v4 + 16 * v6);
        if (v3 == v7) {
          goto LABEL_3;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::MCAsmLayout::canGetFragmentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v20 = v3;
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v4 = a1 + 152;
  uint64_t v5 = v6;
  int v7 = *(_DWORD *)(v4 + 16);
  if (v7)
  {
    int v8 = v7 - 1;
    unsigned int v9 = ((v3 >> 4) ^ (v3 >> 9)) & (v7 - 1);
    int v10 = (void *)(v5 + 16 * v9);
    uint64_t v11 = *v10;
    if (v3 == *v10) {
      goto LABEL_3;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v11 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v11 == -8192;
      }
      if (v16) {
        uint64_t v14 = v10;
      }
      unsigned int v17 = v9 + v15++;
      unsigned int v9 = v17 & v8;
      int v10 = (void *)(v5 + 16 * (v17 & v8));
      uint64_t v11 = *v10;
      if (v3 == *v10) {
        goto LABEL_3;
      }
    }
    if (v14) {
      unint64_t v18 = v14;
    }
    else {
      unint64_t v18 = v10;
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  int v10 = sub_1CCBB42FC(v4, (uint64_t)&v20, &v20, v18);
  *int v10 = v20;
  v10[1] = 0;
LABEL_3:
  uint64_t v12 = v10[1];
  if (!v12)
  {
    uint64_t v19 = v20 + 112;
    return *(unsigned __int8 *)(*(void *)v19 + 49) == 0;
  }
  if (*(_DWORD *)(a2 + 40) > *(_DWORD *)(v12 + 40))
  {
    uint64_t v19 = v12 + 8;
    return *(unsigned __int8 *)(*(void *)v19 + 49) == 0;
  }
  return 1;
}

void *llvm::MCAsmLayout::invalidateFragmentsFrom(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 152);
  unint64_t result = (void *)(a1 + 152);
  uint64_t v3 = v4;
  int v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    uint64_t v6 = a2[2];
    unsigned int v7 = v5 - 1;
    unsigned int v8 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
    unsigned int v9 = (void *)(v3 + 16 * v8);
    uint64_t v10 = *v9;
    if (v6 == *v9)
    {
      uint64_t v11 = ((v6 >> 4) ^ (v6 >> 9)) & v7;
LABEL_4:
      uint64_t v12 = *(void *)(v3 + 16 * v11 + 8);
      if (v12 && *((_DWORD *)a2 + 10) <= *(_DWORD *)(v12 + 40))
      {
        if (*(uint64_t **)(v6 + 112) == a2) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = *a2;
        }
        uint64_t v22 = a2[2];
        if (v6 != v10)
        {
          unsigned int v17 = 0;
          int v18 = 1;
          while (v10 != -4096)
          {
            if (v17) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v10 == -8192;
            }
            if (v19) {
              unsigned int v17 = v9;
            }
            unsigned int v20 = v8 + v18++;
            unsigned int v8 = v20 & v7;
            unsigned int v9 = (void *)(v3 + 16 * (v20 & v7));
            uint64_t v10 = *v9;
            if (v6 == *v9) {
              goto LABEL_14;
            }
          }
          if (v17) {
            uint64_t v21 = v17;
          }
          else {
            uint64_t v21 = v9;
          }
          unint64_t result = sub_1CCBB42FC((uint64_t)result, (uint64_t)&v22, &v22, v21);
          unsigned int v9 = result;
          *unint64_t result = v22;
          result[1] = 0;
        }
LABEL_14:
        v9[1] = v16;
      }
    }
    else
    {
      int v13 = 1;
      uint64_t v14 = *v9;
      LODWORD(v11) = ((v6 >> 4) ^ (v6 >> 9)) & v7;
      while (v14 != -4096)
      {
        int v15 = v11 + v13++;
        uint64_t v11 = v15 & v7;
        uint64_t v14 = *(void *)(v3 + 16 * v11);
        if (v6 == v14) {
          goto LABEL_4;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::MCAsmLayout::ensureValid(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v31 = v4;
  uint64_t v7 = *((void *)this + 19);
  uint64_t result = (uint64_t)this + 152;
  uint64_t v6 = v7;
  int v8 = *(_DWORD *)(result + 16);
  if (v8)
  {
    int v9 = v8 - 1;
    unsigned int v10 = ((v4 >> 4) ^ (v4 >> 9)) & (v8 - 1);
    uint64_t v11 = (void *)(v6 + 16 * v10);
    uint64_t v12 = *v11;
    if (v4 == *v11) {
      goto LABEL_3;
    }
    uint64_t v26 = 0;
    int v27 = 1;
    while (v12 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v12 == -8192;
      }
      if (v28) {
        uint64_t v26 = v11;
      }
      unsigned int v29 = v10 + v27++;
      unsigned int v10 = v29 & v9;
      uint64_t v11 = (void *)(v6 + 16 * (v29 & v9));
      uint64_t v12 = *v11;
      if (v4 == *v11) {
        goto LABEL_3;
      }
    }
    if (v26) {
      uint64_t v30 = v26;
    }
    else {
      uint64_t v30 = v11;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t result = (uint64_t)sub_1CCBB42FC(result, (uint64_t)&v31, &v31, v30);
  uint64_t v11 = (void *)result;
  *(void *)uint64_t result = v31;
  *(void *)(result + 8) = 0;
  uint64_t v4 = v31;
LABEL_3:
  uint64_t v13 = v11[1];
  uint64_t v14 = (llvm::MCFragment **)(v4 + 112);
  if (v13) {
    int v15 = (llvm::MCFragment **)(v13 + 8);
  }
  else {
    int v15 = v14;
  }
  while (1)
  {
    uint64_t v16 = *v15;
    int v17 = *((_DWORD *)this + 42);
    if (!v17) {
      goto LABEL_10;
    }
    uint64_t v18 = *((void *)a2 + 2);
    uint64_t v19 = *((void *)this + 19);
    unsigned int v20 = v17 - 1;
    uint64_t v21 = ((v18 >> 4) ^ (v18 >> 9)) & (v17 - 1);
    uint64_t v22 = *(void *)(v19 + 16 * v21);
    if (v18 == v22) {
      break;
    }
    int v24 = 1;
    while (v22 != -4096)
    {
      int v25 = v21 + v24++;
      uint64_t v21 = v25 & v20;
      uint64_t v22 = *(void *)(v19 + 16 * v21);
      if (v18 == v22) {
        goto LABEL_8;
      }
    }
LABEL_10:
    uint64_t result = llvm::MCAsmLayout::layoutFragment((llvm::MCAssembler **)this, v16);
    int v15 = (llvm::MCFragment **)((char *)v16 + 8);
  }
LABEL_8:
  uint64_t v23 = *(void *)(v19 + 16 * v21 + 8);
  if (!v23 || *((_DWORD *)a2 + 10) > *(_DWORD *)(v23 + 40)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t llvm::MCAsmLayout::getFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  return *((void *)a2 + 4);
}

uint64_t sub_1CCBC6418(llvm::MCAsmLayout *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  int v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 0x1C00) == 0x800)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v19 = 0;
    uint64_t v18 = 0;
    *((_DWORD *)a2 + 2) = v8 | 4;
    if (llvm::MCExpr::evaluateAsRelocatableImpl(a2[3], &v16, *(void *)a1, a1, 0, 0, 1))
    {
      uint64_t v9 = v18;
      if (v16)
      {
        v24[0] = 0;
        uint64_t result = sub_1CCBC6418(a1, *(void *)(v16 + 16), a3, v24);
        if (!result) {
          return result;
        }
        v9 += v24[0];
      }
      if (v17)
      {
        v24[0] = 0;
        uint64_t result = sub_1CCBC6418(a1, *(void *)(v17 + 16), a3, v24);
        if (!result) {
          return result;
        }
        v9 -= v24[0];
      }
      *a4 = v9;
      return 1;
    }
    uint64_t v13 = sub_1CD6ACAC0(a2);
    __int16 v23 = 1283;
    int v15 = "unable to evaluate offset for variable '";
LABEL_17:
    v22[0] = (uint64_t)v15;
    uint64_t v22[2] = v13;
    v22[3] = v14;
    unsigned int v20 = "'";
    __int16 v21 = 259;
    sub_1CD3E3950(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm *)v24, (const llvm::Twine *)1);
  }
  uint64_t v11 = *a2;
  if ((unint64_t)*a2 <= 7)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v13 = sub_1CD6ACAC0(a2);
    __int16 v23 = 1283;
    int v15 = "unable to evaluate offset to undefined symbol '";
    goto LABEL_17;
  }
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  llvm::MCAsmLayout::ensureValid(a1, (const llvm::MCFragment *)(v11 & 0xFFFFFFFFFFFFFFF8));
  *a4 = a2[3] + *(void *)(v12 + 32);
  return 1;
}

uint64_t llvm::MCAsmLayout::getSymbolOffset(llvm::MCAsmLayout *this, const llvm::MCSymbol *a2)
{
  uint64_t v3 = 0;
  sub_1CCBC6418(this, (uint64_t *)a2, 1, &v3);
  return v3;
}

uint64_t llvm::MCAsmLayout::getSectionAddressSize(llvm::MCAsmLayout *this, const llvm::MCSection *a2)
{
  uint64_t v3 = (const llvm::MCFragment *)*((void *)a2 + 13);
  llvm::MCAsmLayout::ensureValid(this, v3);
  uint64_t v4 = *((void *)v3 + 4);
  return llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)this, this, v3) + v4;
}

uint64_t llvm::MCAsmLayout::getSectionFileSize(llvm::MCAsmLayout *this, const llvm::MCFragment **a2)
{
  if ((*((uint64_t (**)(const llvm::MCFragment **))*a2 + 2))(a2)) {
    return 0;
  }
  uint64_t v4 = a2[13];
  llvm::MCAsmLayout::ensureValid(this, v4);
  uint64_t v5 = *((void *)v4 + 4);
  return llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)this, this, v4) + v5;
}

uint64_t llvm::MCFragment::destroy(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(unsigned char *)(this + 48))
  {
    case 0:
    case 4:
    case 5:
    case 7:
    case 0xB:
    case 0xC:
    case 0x10:
      goto LABEL_7;
    case 1:
      int v2 = *(void **)(this + 120);
      if (v2 != (void *)(v1 + 136)) {
        free(v2);
      }
      goto LABEL_4;
    case 2:
      uint64_t v3 = *(void **)(this + 56);
      uint64_t v4 = (void *)(v1 + 80);
      goto LABEL_5;
    case 3:
    case 0xA:
      goto LABEL_4;
    case 6:
      uint64_t v6 = *(void **)(this + 152);
      if (v6 != (void *)(v1 + 168)) {
        free(v6);
      }
      uint64_t v7 = *(void **)(v1 + 96);
      if (v7 != (void *)(v1 + 112)) {
        free(v7);
      }
      goto LABEL_4;
    case 8:
      uint64_t v5 = *(void **)(this + 96);
      if (v5 != (void *)(v1 + 112)) {
        free(v5);
      }
      goto LABEL_4;
    case 9:
    case 0xF:
      int v8 = *(void **)(this + 96);
      if (v8 != (void *)(v1 + 112)) {
        free(v8);
      }
LABEL_4:
      uint64_t v3 = *(void **)(v1 + 64);
      uint64_t v4 = (void *)(v1 + 88);
      goto LABEL_5;
    case 0xD:
      uint64_t v3 = *(void **)(this + 80);
      uint64_t v4 = (void *)(v1 + 104);
LABEL_5:
      if (v3 != v4) {
        free(v3);
      }
      goto LABEL_7;
    case 0xE:
      sub_1CD6AFF7C((void *)this);
      goto LABEL_7;
    default:
      if (*(unsigned __int8 *)(this + 48) == 255)
      {
LABEL_7:
        JUMPOUT(0x1D25D9CE0);
      }
      return this;
  }
}

uint64_t llvm::MCFragment::MCFragment(uint64_t result, int a2, char a3, uint64_t a4)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = -1;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = a2;
  *(unsigned char *)(result + 49) = 0;
  *(unsigned char *)(result + 50) = a3;
  if (a2 != 16)
  {
    if (a4)
    {
      uint64_t v5 = *(void *)(a4 + 104);
      uint64_t v4 = (void *)(a4 + 104);
      *(void *)uint64_t result = v5;
      *(void *)(result + 8) = v4;
      *(void *)(v5 + 8) = result;
      *uint64_t v4 = result;
    }
  }
  return result;
}

{
  void *v4;
  uint64_t v5;

  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = -1;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = a2;
  *(unsigned char *)(result + 49) = 0;
  *(unsigned char *)(result + 50) = a3;
  if (a2 != 16)
  {
    if (a4)
    {
      uint64_t v5 = *(void *)(a4 + 104);
      uint64_t v4 = (void *)(a4 + 104);
      *(void *)uint64_t result = v5;
      *(void *)(result + 8) = v4;
      *(void *)(v5 + 8) = result;
      *uint64_t v4 = result;
    }
  }
  return result;
}

BOOL llvm::MCOperand::evaluateAsConstantImm(llvm::MCOperand *this, uint64_t *a2)
{
  int v2 = *(unsigned __int8 *)this;
  if (v2 == 2) {
    *a2 = *((void *)this + 1);
  }
  return v2 == 2;
}

BOOL llvm::MCOperand::isBareSymbolRef(llvm::MCOperand *this)
{
  uint64_t v1 = *((void *)this + 1);
  return *(unsigned char *)v1 == 2 && *(unsigned __int16 *)(v1 + 1) == 0;
}

llvm::raw_ostream *llvm::dumpBytes(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    char v6 = 1;
    do
    {
      unint64_t v7 = *(unsigned __int8 *)v5;
      if ((v6 & 1) == 0)
      {
        int v8 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v8 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((void *)this + 4) = v8 + 1;
          *int v8 = 32;
        }
      }
      char v9 = a0123456789abcd_0[v7 >> 4];
      unsigned int v10 = (char *)*((void *)this + 4);
      if ((unint64_t)v10 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((void *)this + 4) = v10 + 1;
        *unsigned int v10 = v9;
      }
      char v11 = a0123456789abcd_0[v7 & 0xF];
      unint64_t v12 = (char *)*((void *)this + 4);
      if ((unint64_t)v12 >= *((void *)this + 3))
      {
        uint64_t result = llvm::raw_ostream::write(this, v11);
      }
      else
      {
        *((void *)this + 4) = v12 + 1;
        char *v12 = v11;
      }
      char v6 = 0;
      uint64_t v5 = (llvm::raw_ostream *)((char *)v5 + 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MCInstPrinter::matchAliasPatterns(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *a2;
  uint64_t v8 = *(void *)(a4 + 8);
  if (v8)
  {
    char v9 = *(_DWORD **)a4;
    unint64_t v10 = *(void *)(a4 + 8);
    do
    {
      unint64_t v11 = v10 >> 1;
      unint64_t v12 = &v9[2 * (v10 >> 1)];
      unsigned int v14 = *v12;
      uint64_t v13 = v12 + 2;
      v10 += ~(v10 >> 1);
      if (v14 < v7) {
        char v9 = v13;
      }
      else {
        unint64_t v10 = v11;
      }
    }
    while (v10);
  }
  else
  {
    char v9 = *(_DWORD **)a4;
  }
  if (v9 == (_DWORD *)(*(void *)a4 + 8 * v8) || *v9 != v7) {
    return 0;
  }
  if (!*((_WORD *)v9 + 3))
  {
    BOOL v20 = 0;
    goto LABEL_48;
  }
  uint64_t v15 = *(void *)(a4 + 16) + 12 * *((unsigned __int16 *)v9 + 2);
  uint64_t v16 = v15 + 12 * *((unsigned __int16 *)v9 + 3);
  uint64_t v17 = a3 + 192;
LABEL_13:
  unsigned int v18 = a2[6];
  int v19 = *(unsigned __int8 *)(v15 + 8);
  BOOL v20 = v18 != v19;
  if (v18 != v19) {
    goto LABEL_48;
  }
  if (!*(unsigned char *)(v15 + 9))
  {
LABEL_46:
    BOOL v20 = 0;
    unsigned int v33 = *(_DWORD *)v15;
    goto LABEL_49;
  }
  char v21 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = 8 * *(unsigned __int8 *)(v15 + 9);
  int v24 = (_DWORD *)(*(void *)(a4 + 32) + 8 * *(unsigned int *)(v15 + 4) + 4);
  while (2)
  {
    switch(*((unsigned char *)v24 - 4))
    {
      case 0:
        if (((*(void *)(v17 + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) >> *v24) & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_30;
      case 1:
        if ((*(void *)(v17 + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) >> *v24)) {
          goto LABEL_43;
        }
        goto LABEL_30;
      case 2:
        uint64_t v28 = (*(void *)(v17 + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) >> *v24) & 1;
        goto LABEL_27;
      case 3:
        LOBYTE(v28) = ((*(void *)(v17 + (((unint64_t)*v24 >> 3) & 0x1FFFFFF8)) >> *v24) & 1) == 0;
LABEL_27:
        v21 |= v28;
        goto LABEL_30;
      case 4:
        if (v21)
        {
          char v21 = 0;
LABEL_30:
          v24 += 2;
          v23 -= 8;
          if (!v23) {
            goto LABEL_46;
          }
          continue;
        }
LABEL_43:
        v15 += 12;
        if (v15 != v16) {
          goto LABEL_13;
        }
LABEL_48:
        unsigned int v33 = -1;
LABEL_49:
        int v34 = v33 == -1 || v20;
        uint64_t v35 = *(void *)(a4 + 48) + v33;
        if (v34) {
          return 0;
        }
        else {
          return v35;
        }
      default:
        uint64_t v25 = v22;
        uint64_t v26 = *((void *)a2 + 2);
        int v27 = (unsigned char *)(v26 + 16 * v22++);
        switch(*((unsigned char *)v24 - 4))
        {
          case 6:
            if (*v27 != 1 || *(_DWORD *)(v26 + 16 * v25 + 8) != *v24) {
              goto LABEL_43;
            }
            goto LABEL_30;
          case 7:
            if (*v27 != 1 || *(_DWORD *)(v26 + 16 * v25 + 8) != *(_DWORD *)(v26 + 16 * *v24 + 8)) {
              goto LABEL_43;
            }
            goto LABEL_30;
          case 8:
            if (*v27 != 2 || *(void *)(v26 + 16 * v25 + 8) != *v24) {
              goto LABEL_43;
            }
            goto LABEL_30;
          case 9:
            if (*v27 != 1) {
              goto LABEL_43;
            }
            unint64_t v29 = *(unsigned int *)(v26 + 16 * v25 + 8);
            uint64_t v30 = *(void *)(*(void *)(a1 + 32) + 24) + 32 * *v24;
            if ((v29 >> 3) >= *(unsigned __int16 *)(v30 + 22)
              || ((*(unsigned __int8 *)(*(void *)(v30 + 8) + (v29 >> 3)) >> (v29 & 7)) & 1) == 0)
            {
              goto LABEL_43;
            }
            goto LABEL_30;
          case 0xA:
            uint64_t v36 = a1;
            uint64_t v37 = a2;
            char v31 = (*(uint64_t (**)(unsigned char *, uint64_t, void))(a4 + 64))(v27, a3, *v24);
            a1 = v36;
            a2 = v37;
            if ((v31 & 1) == 0) {
              goto LABEL_43;
            }
            goto LABEL_30;
          default:
            goto LABEL_30;
        }
    }
  }
}

const char *llvm::MCInstPrinter::markup(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48)) {
    return (const char *)a2;
  }
  else {
    return "";
  }
}

uint64_t llvm::MCInstrAnalysis::evaluateBranch()
{
  return 0;
}

void sub_1CCBC6EA0()
{
}

uint64_t llvm::MCInstrDesc::mayAffectControlFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 8) & 0xCA0) != 0) {
    return 1;
  }
  int v5 = *(_DWORD *)(a3 + 16);
  if (v5) {
    return llvm::MCInstrDesc::hasDefOfPhysReg(a1, a2, v5, (void *)a3);
  }
  else {
    return 0;
  }
}

uint64_t llvm::MCInstrDesc::hasDefOfPhysReg(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(unsigned char *)(a1 + 4))
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a2 + 16);
    while (1)
    {
      if (*(unsigned char *)(v5 + 16 * v4) == 1)
      {
        unsigned int v6 = *(_DWORD *)(v5 + 16 * v4 + 8);
        if (v6 == a3) {
          break;
        }
        unsigned int v7 = (_WORD *)(a4[6] + 2 * *(unsigned int *)(*a4 + 24 * v6 + 8));
        int v8 = (unsigned __int16)*v7;
        unsigned __int16 v9 = v8 + v6;
        BOOL v11 = v8 == 0;
        BOOL v10 = *v7 != 0;
        BOOL v11 = v11 || v9 == a3;
        if (!v11)
        {
          unint64_t v12 = v7 + 1;
          do
          {
            int v14 = *v12++;
            int v13 = v14;
            v9 += v14;
            BOOL v10 = v14 != 0;
            if (!v14) {
              unint64_t v12 = 0;
            }
            if (v13) {
              BOOL v15 = v9 == a3;
            }
            else {
              BOOL v15 = 1;
            }
          }
          while (!v15);
        }
        if (v10) {
          break;
        }
      }
      if (++v4 == *(unsigned __int8 *)(a1 + 4)) {
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    if ((*(unsigned char *)(a1 + 12) & 0x80) == 0) {
      return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
    }
    unsigned int v16 = *(unsigned __int16 *)(a1 + 2) - 1;
    int v17 = *(_DWORD *)(a2 + 24);
    if (v16 == v17) {
      return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
    }
    uint64_t v18 = *(void *)(a2 + 16);
    while (1)
    {
      unsigned int v19 = v16;
      if (*(unsigned char *)(v18 + 16 * v16) == 1)
      {
        unsigned int v20 = *(_DWORD *)(v18 + 16 * v16 + 8);
        if (v20 == a3) {
          break;
        }
        char v21 = (_WORD *)(a4[6] + 2 * *(unsigned int *)(*a4 + 24 * v20 + 8));
        int v22 = (unsigned __int16)*v21;
        unsigned __int16 v23 = v22 + v20;
        BOOL v11 = v22 == 0;
        BOOL v24 = *v21 != 0;
        if (!v11 && v23 != a3)
        {
          uint64_t v26 = v21 + 1;
          do
          {
            int v28 = *v26++;
            int v27 = v28;
            v23 += v28;
            BOOL v24 = v28 != 0;
            if (!v28) {
              uint64_t v26 = 0;
            }
            if (v27) {
              BOOL v29 = v23 == a3;
            }
            else {
              BOOL v29 = 1;
            }
          }
          while (!v29);
        }
        if (v24) {
          break;
        }
      }
      unsigned int v16 = v19 + 1;
      if (v19 + 1 == v17) {
        return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
      }
    }
  }
  return 1;
}

uint64_t llvm::MCInstrDesc::hasImplicitDefOfPhysReg(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(unsigned __int16 **)(a1 + 32);
  if (!v3) {
    return 0;
  }
  unsigned __int16 v4 = *v3;
  if (!*v3) {
    return 0;
  }
  while (a2 != v4)
  {
    if (a3)
    {
      uint64_t v5 = (_WORD *)(a3[6] + 2 * *(unsigned int *)(*a3 + 24 * v4 + 8));
      int v6 = (unsigned __int16)*v5;
      unsigned __int16 v7 = v6 + v4;
      BOOL v9 = v6 == 0;
      BOOL v8 = *v5 != 0;
      BOOL v9 = v9 || v7 == a2;
      if (!v9)
      {
        BOOL v10 = v5 + 1;
        do
        {
          int v12 = *v10++;
          int v11 = v12;
          v7 += v12;
          BOOL v8 = v12 != 0;
          if (!v12) {
            BOOL v10 = 0;
          }
          if (v11) {
            BOOL v13 = v7 == a2;
          }
          else {
            BOOL v13 = 1;
          }
        }
        while (!v13);
      }
      if (v8) {
        break;
      }
    }
    int v14 = v3[1];
    ++v3;
    unsigned __int16 v4 = v14;
    if (!v14) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::MCInstrInfo::getDeprecatedInfo(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && (int v6 = *(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(v5 + 8 * v4)) != 0)
  {
    return v6(a2, a3, a4);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8
      && (unint64_t v9 = *(unsigned __int8 *)(v8 + v4), v9 != 255)
      && ((*(void *)(a3 + ((v9 >> 3) & 0x18) + 192) >> v9) & 1) != 0)
    {
      MEMORY[0x1D25D9630](a4, "deprecated");
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

llvm::raw_ostream *llvm::MCLabel::print(llvm::MCLabel *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v4 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 34);
  }
  else
  {
    *((void *)a2 + 4) = v4 + 1;
    *uint64_t v4 = 34;
  }
  uint64_t result = sub_1CD098D14(a2, *(unsigned int *)this, 0, 0, 0);
  int v6 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v6 >= *((void *)a2 + 3))
  {
    return llvm::raw_ostream::write(a2, 34);
  }
  else
  {
    *((void *)a2 + 4) = v6 + 1;
    *int v6 = 34;
  }
  return result;
}

llvm::raw_ostream *llvm::MCLabel::dump(llvm::MCLabel *this)
{
  int v2 = llvm::dbgs(this);

  return llvm::MCLabel::print(this, v2);
}

llvm::raw_ostream *sub_1CCBC7254(llvm::raw_ostream *this)
{
  *(void *)this = &unk_1F262E9B8;
  int v2 = (const char *)*((void *)this + 4);
  uint64_t v3 = (const char *)*((void *)this + 2);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3);
  }
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v6 = *((void *)this + 2);
    if (v6) {
      MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924, v4);
    }
  }
  return this;
}

void sub_1CCBC72F8(llvm::raw_ostream *this)
{
  *(void *)this = &unk_1F262E9B8;
  int v2 = (const char *)*((void *)this + 4);
  uint64_t v3 = (const char *)*((void *)this + 2);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    *((void *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3);
  }
  *(void *)this = &unk_1F2646B98;
  if (*((_DWORD *)this + 14) == 1)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924, v4);
    }
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBC73BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 64) += a3;
  return result;
}

uint64_t sub_1CCBC73CC(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void sub_1CCBC73D4(llvm::MCObjectStreamer *a1)
{
  *(void *)a1 = &unk_1F262EA30;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 69), 8);

  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
}

void sub_1CCBC7430(llvm::MCObjectStreamer *a1)
{
  *(void *)a1 = &unk_1F262EA30;
  MEMORY[0x1D25D9CD0](*((void *)a1 + 69), 8);
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
}

double sub_1CCBC74A0(llvm::MCObjectStreamer *this)
{
  uint64_t v1 = (unsigned int *)this;
  *((unsigned char *)this + 546) = 0;
  int v2 = *((_DWORD *)this + 140);
  if (*((void *)this + 70))
  {
    int64_t v4 = (_DWORD *)((char *)this + 552);
    uint64_t v8 = v1;
    uint64_t v5 = v1[142];
    if (v5 > 4 * v2 && v5 >= 0x41)
    {
      sub_1CD3C8060(v4);
      uint64_t v1 = v8;
    }
    else
    {
      if (v5)
      {
        uint64_t v6 = *(void **)v4;
        uint64_t v7 = 16 * v5;
        do
        {
          *uint64_t v6 = -4096;
          v6 += 2;
          v7 -= 16;
        }
        while (v7);
      }
      uint64_t v1 = v8;
      *((void *)v8 + 70) = 0;
    }
  }

  return llvm::MCObjectStreamer::reset((llvm::MCObjectStreamer *)v1);
}

size_t sub_1CCBC753C(uint64_t a1, uint64_t a2, const llvm::MCExpr *a3)
{
  uint64_t v7 = a2;
  size_t result = llvm::MCObjectStreamer::changeSectionImpl((llvm::MCObjectStreamer *)a1, (llvm::MCSection *)a2, a3);
  if (!*(unsigned char *)(a2 + 239))
  {
    size_t result = strlen((const char *)(a2 + 224));
    if (result == 7 && *(_DWORD *)(a2 + 224) == 1464098655 && *(_DWORD *)(a2 + 227) == 1179795799) {
      *(unsigned char *)(a1 + 546) = 1;
    }
  }
  if (*(unsigned char *)(a1 + 544))
  {
    size_t result = (size_t)sub_1CD68E11C(a1 + 552, &v7);
    if (!*(unsigned char *)(result + 8) && !*(void *)(a2 + 8))
    {
      *(void *)(a2 + 8) = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 8));
      size_t result = (size_t)sub_1CD68E11C(a1 + 552, &v7);
      *(unsigned char *)(result + 8) = 1;
    }
  }
  return result;
}

void sub_1CCBC760C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a2 + 8) & 0x201) != 1) {
    operator new();
  }
  llvm::MCObjectStreamer::emitLabel(a1, a2, a3);
  *(_WORD *)(a2 + 12) &= 0xFFF8u;
}

void *sub_1CCBC77EC(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 8) == 0)
  {
    uint64_t v7 = result[34];
    *(_DWORD *)(a2 + 8) = v6 | 8;
    uint64_t v11 = a2;
    uint64_t v8 = *(void **)(v7 + 64);
    if ((unint64_t)v8 >= *(void *)(v7 + 72))
    {
      uint64_t v10 = v7;
      size_t result = sub_1CBC13470((void **)(v7 + 56), &v11);
      uint64_t v7 = v10;
    }
    else
    {
      *uint64_t v8 = a2;
      size_t result = v8 + 1;
    }
    *(void *)(v7 + 64) = result;
    int v6 = *(_DWORD *)(a2 + 8);
  }
  if ((v6 & 0x10) != 0) {
    size_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v5 + 304))(v5, a3, 9);
  }
  if ((*(_WORD *)(a2 + 12) & 0x80) != 0) {
    size_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v5 + 304))(v5, a3, 24);
  }
  if ((*(unsigned char *)(a2 + 8) & 0x20) != 0)
  {
    unint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v5 + 304);
    return (void *)v9(v5, a3, 20);
  }
  return result;
}

uint64_t sub_1CCBC7948(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 272) + 8) + 208))(*(void *)(*(void *)(a1 + 272) + 8));
  if (a2 == 1) {
    *(unsigned char *)(*(void *)(a1 + 272) + 500) |= 2u;
  }
  return result;
}

void sub_1CCBC79B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 272);
  if (a3)
  {
    if (a3 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_28;
    }
    uint64_t v5 = 3 * a3;
    uint64_t v6 = 24 * a3;
    uint64_t v7 = (char *)operator new(24 * a3);
    uint64_t v8 = 0;
    unint64_t v9 = &v7[8 * v5];
    do
    {
      uint64_t v10 = (long long *)(a2 + v8);
      uint64_t v11 = (uint64_t)&v7[v8];
      if (*(char *)(a2 + v8 + 23) < 0)
      {
        sub_1CB8BDF7C(v11, *(const void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v12 = *v10;
        *(void *)(v11 + 16) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v11 = v12;
      }
      v8 += 24;
    }
    while (v6 != v8);
    BOOL v13 = &v7[v8];
  }
  else
  {
    unint64_t v9 = 0;
    BOOL v13 = 0;
    uint64_t v7 = 0;
  }
  BOOL v15 = (void **)v3[17];
  unint64_t v14 = v3[18];
  if ((unint64_t)v15 < v14)
  {
    *BOOL v15 = v7;
    v15[1] = v13;
    v15[2] = v9;
    unsigned int v16 = v15 + 3;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    goto LABEL_27;
  }
  int v17 = (void *)v3[16];
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - (void **)v17) + 1;
  if (v18 > 0xAAAAAAAAAAAAAAALL) {
LABEL_28:
  }
    abort();
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v17) >> 3);
  if (2 * v19 > v18) {
    unint64_t v18 = 2 * v19;
  }
  if (v19 >= 0x555555555555555) {
    unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  uint64_t v21 = 3 * v20;
  int v22 = (char *)operator new(24 * v20);
  unsigned __int16 v23 = &v22[8 * (v15 - (void **)v17)];
  *(void *)unsigned __int16 v23 = v7;
  *((void *)v23 + 1) = v13;
  BOOL v24 = &v22[8 * v21];
  *((void *)v23 + 2) = v9;
  unsigned int v16 = v23 + 24;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  if (v15 == v17)
  {
    v3[16] = v23;
    v3[17] = v16;
    v3[18] = v24;
  }
  else
  {
    do
    {
      long long v25 = *(_OWORD *)(v15 - 3);
      v15 -= 3;
      *(_OWORD *)(v23 - 24) = v25;
      v23 -= 24;
      *((void *)v23 + 2) = v15[2];
      *BOOL v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
    }
    while (v15 != v17);
    BOOL v15 = (void **)v3[16];
    uint64_t v26 = (void **)v3[17];
    v3[16] = v23;
    v3[17] = v16;
    v3[18] = v24;
    while (v26 != v15)
    {
      v26 -= 3;
      uint64_t v30 = v26;
      sub_1CB8338B8(&v30);
    }
  }
  if (v15) {
    operator delete(v15);
  }
LABEL_27:
  v3[17] = v16;
  uint64_t v30 = (void **)&v27;
  sub_1CB8338B8(&v30);
}

uint64_t sub_1CCBC7B94(uint64_t result, void *__src, size_t __len)
{
  uint64_t v3 = *(void **)(result + 272);
  if (!__src)
  {
    long long v20 = 0uLL;
    unint64_t v21 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_31;
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = (long long *)operator new(v7 + 1);
    *((void *)&v20 + 1) = __len;
    unint64_t v21 = v8 | 0x8000000000000000;
    *(void *)&long long v20 = v6;
  }
  else
  {
    HIBYTE(v21) = __len;
    uint64_t v6 = &v20;
    if (!__len) {
      goto LABEL_11;
    }
  }
  uint64_t result = (uint64_t)memmove(v6, __src, __len);
LABEL_11:
  *((unsigned char *)v6 + __len) = 0;
LABEL_12:
  unint64_t v9 = v3[21];
  unint64_t v10 = v3[20];
  if (v10 < v9)
  {
    *(_OWORD *)unint64_t v10 = v20;
    *(void *)(v10 + 16) = v21;
    unint64_t v11 = v10 + 24;
    goto LABEL_30;
  }
  uint64_t v12 = v3[19];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3) + 1;
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_31:
  }
    abort();
  if (0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3) > v13) {
    unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3) >= 0x555555555555555) {
    unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v14 = v13;
  }
  long long v25 = v3 + 21;
  if (v14)
  {
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_1CB833614();
    }
    BOOL v15 = (char *)operator new(24 * v14);
  }
  else
  {
    BOOL v15 = 0;
  }
  unsigned int v16 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  *(_OWORD *)unsigned int v16 = v20;
  *((void *)v16 + 2) = v21;
  if (v10 == v12)
  {
    int64x2_t v19 = vdupq_n_s64(v10);
    int v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  }
  else
  {
    int v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
    do
    {
      long long v18 = *(_OWORD *)(v10 - 24);
      *((void *)v17 - 1) = *(void *)(v10 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      *(void *)(v10 - 24) = 0;
      v10 -= 24;
    }
    while (v10 != v12);
    int64x2_t v19 = *(int64x2_t *)(v3 + 19);
    unint64_t v9 = v3[21];
  }
  unint64_t v11 = (unint64_t)(v16 + 24);
  v3[19] = v17;
  v3[20] = v16 + 24;
  int64x2_t v23 = v19;
  v3[21] = &v15[24 * v14];
  unint64_t v24 = v9;
  uint64_t v22 = v19.i64[0];
  uint64_t result = sub_1CBF4EE0C((uint64_t)&v22);
LABEL_30:
  v3[20] = v11;
  return result;
}

void sub_1CCBC7D88(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      int v3 = 1;
      goto LABEL_6;
    case 1:
      int v3 = 2;
      goto LABEL_6;
    case 2:
      int v3 = 3;
      goto LABEL_6;
    case 3:
      int v3 = 4;
LABEL_6:
      sub_1CCBC90B0(a1, v3);
      break;
    case 4:
      uint64_t v4 = *(void *)(a1[34] + 112);
      uint64_t v5 = (llvm::MCContext *)a1[1];
      size_t v8 = "tmp";
      __int16 v9 = 259;
      uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v5, (const llvm::Twine *)&v8, 1);
      *(void *)(v4 - 8) = TempSymbol;
      size_t v7 = *(void (**)(void *, uint64_t, void))(*a1 + 192);
      v7(a1, TempSymbol, 0);
      break;
    default:
      return;
  }
}

uint64_t sub_1CCBC7EB8(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 272);
  *(unsigned char *)(v7 + 2072) = 0;
  *(_DWORD *)(v7 + 2076) = a2;
  *(_DWORD *)(v7 + 2080) = a3;
  *(_DWORD *)(v7 + 2084) = a4;
  *(_DWORD *)(v7 + 2088) = a5;
  *(void *)(v7 + 2092) = a6;
  *(void *)(v7 + 2100) = a7;
  return result;
}

uint64_t sub_1CCBC7EDC(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 272);
  *(unsigned char *)(v7 + 2072) = 1;
  *(_DWORD *)(v7 + 2076) = a2;
  *(_DWORD *)(v7 + 2080) = a3;
  *(_DWORD *)(v7 + 2084) = a4;
  *(_DWORD *)(v7 + 2088) = a5;
  *(void *)(v7 + 2092) = a6;
  *(void *)(v7 + 2100) = a7;
  return result;
}

uint64_t sub_1CCBC7F04(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 272);
  *(unsigned char *)(v7 + 2108) = 1;
  *(_DWORD *)(v7 + 2112) = a2;
  *(_DWORD *)(v7 + 2116) = a3;
  *(_DWORD *)(v7 + 2120) = a4;
  *(_DWORD *)(v7 + 2124) = a5;
  *(void *)(v7 + 2128) = a6;
  *(void *)(v7 + 2136) = a7;
  return result;
}

uint64_t sub_1CCBC7F2C(uint64_t result, int a2, char a3)
{
  uint64_t v3 = *(void *)(result + 272);
  if (!*(unsigned char *)(v3 + 2148)) {
    *(unsigned char *)(v3 + 2148) = 1;
  }
  *(_DWORD *)(v3 + 2144) = a2;
  *(unsigned char *)(*(void *)(result + 272) + 2152) = a3;
  return result;
}

void sub_1CCBC7F50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 272);
  uint64_t v4 = *(void *)(v3 + 216);
  uint64_t v5 = *(unsigned int *)(v3 + 228);
  if (v4 != *(void *)(v3 + 208))
  {
    unsigned int v9 = *(_DWORD *)(v3 + 224);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *(_DWORD *)(v3 + 224);
    if (v5 < v9)
    {
      *(_DWORD *)(v3 + 228) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      goto LABEL_33;
    }
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *(_DWORD *)(v3 + 232)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 208), v9);
    unsigned int v9 = *(_DWORD *)(v3 + 224);
    uint64_t v4 = *(void *)(v3 + 216);
LABEL_14:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      unint64_t v14 = 0;
LABEL_26:
      if (v14) {
        long long v18 = v14;
      }
      else {
        long long v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == -2) {
          --*(_DWORD *)(v3 + 232);
        }
        else {
          ++*(_DWORD *)(v3 + 228);
        }
        void *v18 = a2;
      }
    }
    else
    {
      unint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == -2;
        }
        if (v16) {
          unint64_t v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        uint64_t v12 = (void *)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == -1) {
          goto LABEL_26;
        }
      }
    }
    goto LABEL_33;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 8 * v5;
  size_t v8 = *(void **)(v3 + 216);
  while (*v8 != a2)
  {
    if (*v8 == -2) {
      uint64_t v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *uint64_t v6 = a2;
      --*(_DWORD *)(v3 + 232);
      break;
    }
  }
LABEL_33:
  *(_WORD *)(a2 + 12) |= 8u;
}

int32x2_t sub_1CCBC80E0(llvm::MCObjectStreamer *a1, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  if (llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)a3, (uint64_t)&v9, 0, 0, 0, 0, 0)
    && v9
    && !v10)
  {
    uint64_t v6 = *(unsigned char **)(v9 + 16);
    if ((*v6 & 4) == 0 || (**((void **)v6 - 1) ? (BOOL v7 = v11 == 0) : (BOOL v7 = 0), !v7)) {
      *((_WORD *)a2 + 6) |= 0x200u;
    }
  }
  return llvm::MCObjectStreamer::emitAssignment(a1, a2, a3);
}

uint64_t sub_1CCBC8198(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 13)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 120);
    if (v4) {
      uint64_t v5 = *(void *)(*(void *)(a1 + 112) + 32 * v4 - 32);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v13 = *(void **)(a1 + 272);
    int v15 = (char *)v13[11];
    unint64_t v14 = v13[12];
    if ((unint64_t)v15 >= v14)
    {
      unsigned int v17 = (char *)v13[10];
      uint64_t v18 = (v15 - v17) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        abort();
      }
      uint64_t v20 = v14 - (void)v17;
      if (v20 >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 60) {
          sub_1CB833614();
        }
        uint64_t v22 = (char *)operator new(16 * v21);
      }
      else
      {
        uint64_t v22 = 0;
      }
      int64x2_t v23 = &v22[16 * v18];
      *(void *)int64x2_t v23 = a2;
      *((void *)v23 + 1) = v5;
      BOOL v16 = v23 + 16;
      if (v15 != v17)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v15 - 1);
          v23 -= 16;
          v15 -= 16;
        }
        while (v15 != v17);
        int v15 = (char *)v13[10];
      }
      v13[10] = v23;
      v13[11] = v16;
      v13[12] = &v22[16 * v21];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)int v15 = a2;
      *((void *)v15 + 1) = v5;
      BOOL v16 = v15 + 16;
    }
    v13[11] = v16;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 8);
    if ((v7 & 8) == 0)
    {
      uint64_t v8 = *(void *)(a1 + 272);
      *(_DWORD *)(a2 + 8) = v7 | 8;
      uint64_t v26 = a2;
      uint64_t v9 = *(void **)(v8 + 64);
      if ((unint64_t)v9 >= *(void *)(v8 + 72))
      {
        uint64_t v10 = sub_1CBC13470((void **)(v8 + 56), &v26);
      }
      else
      {
        *uint64_t v9 = a2;
        uint64_t v10 = v9 + 1;
      }
      *(void *)(v8 + 64) = v10;
    }
    uint64_t result = 0;
    switch(a3)
    {
      case 0:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 12:
      case 14:
      case 16:
      case 21:
      case 23:
        return result;
      case 1:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x400;
        goto LABEL_42;
      case 9:
        *(_DWORD *)(a2 + 8) |= 0x10u;
        __int16 v12 = *(_WORD *)(a2 + 12) & 0xFFFE;
        goto LABEL_42;
      case 15:
        *(_WORD *)(a2 + 12) |= 0x20u;
        unint64_t AssociatedFragment = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (!AssociatedFragment && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(a2 + 8) |= 4u;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
          *(void *)a2 = *(void *)a2 & 7 | AssociatedFragment;
        }
        if (AssociatedFragment) {
          return 1;
        }
        __int16 v12 = *(_WORD *)(a2 + 12) | 1;
        goto LABEL_42;
      case 17:
      case 22:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x20;
        goto LABEL_42;
      case 18:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x100;
        goto LABEL_42;
      case 19:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x200;
        goto LABEL_42;
      case 20:
        *(_DWORD *)(a2 + 8) |= 0x30u;
        return 1;
      case 24:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x80;
        goto LABEL_42;
      case 25:
        unint64_t v25 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (!v25 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(a2 + 8) |= 4u;
          unint64_t v25 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
          *(void *)a2 = *(void *)a2 & 7 | v25;
        }
        if (v25) {
          return 1;
        }
        __int16 v12 = *(_WORD *)(a2 + 12) | 0x40;
        goto LABEL_42;
      case 26:
        __int16 v12 = *(_WORD *)(a2 + 12) | 0xC0;
LABEL_42:
        *(_WORD *)(a2 + 12) = v12;
        break;
      default:
        return 1;
    }
  }
  return 1;
}

void *sub_1CCBC84C4(void *result, uint64_t a2, __int16 a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 8) == 0)
  {
    uint64_t v4 = result[34];
    *(_DWORD *)(a2 + 8) = v3 | 8;
    uint64_t v9 = a2;
    uint64_t v5 = *(void **)(v4 + 64);
    if ((unint64_t)v5 >= *(void *)(v4 + 72))
    {
      uint64_t v7 = v4;
      uint64_t v8 = a2;
      __int16 v6 = a3;
      uint64_t result = sub_1CBC13470((void **)(v4 + 56), &v9);
      uint64_t v4 = v7;
      a2 = v8;
      a3 = v6;
    }
    else
    {
      void *v5 = a2;
      uint64_t result = v5 + 1;
    }
    *(void *)(v4 + 64) = result;
  }
  *(_WORD *)(a2 + 12) = a3;
  return result;
}

void sub_1CCBC8530(uint64_t a1, int a2, uint64_t a3)
{
}

void *sub_1CCBC8548(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) == 0)
  {
    uint64_t v5 = result[34];
    *(_DWORD *)(a2 + 8) = v4 | 8;
    uint64_t v11 = a2;
    __int16 v6 = *(void **)(v5 + 64);
    if ((unint64_t)v6 >= *(void *)(v5 + 72))
    {
      uint64_t v10 = a2;
      unsigned int v8 = a4;
      uint64_t v9 = a3;
      uint64_t v7 = v5;
      uint64_t result = sub_1CBC13470((void **)(v5 + 56), &v11);
      uint64_t v5 = v7;
      a3 = v9;
      a4 = v8;
      a2 = v10;
    }
    else
    {
      *__int16 v6 = a2;
      uint64_t result = v6 + 1;
    }
    *(void *)(v5 + 64) = result;
    int v4 = *(_DWORD *)(a2 + 8);
  }
  *(void *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 8) = (-8192 * __clz(a4)) & 0x3E000 | 0xC10 | v4 & 0xFFFC0FFF;
  return result;
}

uint64_t sub_1CCBC85E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t, uint64_t, void))(*a1 + 472))(a1, *(void *)(*(void *)(a1[1] + 168) + 608), a2, a3, a4, 0);
}

uint64_t sub_1CCBC862C(llvm::MCStreamer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    __n128 v12 = sub_1CD6AD2C8((uint64_t)a1);
    (*(void (**)(llvm::MCStreamer *, uint64_t, void, __n128))(*(void *)a1 + 168))(a1, a2, 0, v12);
    if (a3)
    {
      (*(void (**)(llvm::MCStreamer *, uint64_t, void, uint64_t, void))(*(void *)a1 + 640))(a1, a5, 0, 1, 0);
      (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)a1 + 192))(a1, a3, 0);
      llvm::MCStreamer::emitZeros(a1, a4);
    }
    return sub_1CCBC2468((uint64_t)a1);
  }
  else
  {
    uint64_t v14 = *((void *)a1 + 1);
    int v15 = "The usage of .zerofill is restricted to sections of ZEROFILL type. Use .zero or .space instead.";
    __int16 v16 = 259;
    return llvm::MCContext::reportError(v14, a6, (uint64_t)&v15);
  }
}

uint64_t sub_1CCBC87AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 472))(a1, a2, a3, a4, a5, 0);
}

void sub_1CCBC87E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(*(void *)(a2 + 16) + 8) & 1) == 0 && (*(unsigned char *)(*(void *)(a3 + 16) + 8) & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 272);
    unsigned int v8 = (void *)v7[274];
    unint64_t v9 = v7[275];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = (void *)v7[273];
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v11) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v11) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        int v15 = (char *)operator new(24 * v14);
      }
      else
      {
        int v15 = 0;
      }
      __int16 v16 = &v15[8 * (v8 - v11)];
      *(void *)__int16 v16 = a2;
      *((void *)v16 + 1) = a3;
      *((void *)v16 + 2) = a4;
      uint64_t v10 = v16 + 24;
      if (v8 != v11)
      {
        do
        {
          long long v17 = *(_OWORD *)(v8 - 3);
          *((void *)v16 - 1) = *(v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 3;
        }
        while (v8 != v11);
        unsigned int v8 = (void *)v7[273];
      }
      v7[273] = v16;
      v7[274] = v10;
      v7[275] = &v15[24 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *unsigned int v8 = a2;
      v8[1] = a3;
      uint64_t v10 = v8 + 3;
      v8[2] = a4;
    }
    v7[274] = v10;
  }
}

uint64_t sub_1CCBC893C(llvm::MCStreamer *a1)
{
  llvm::MCObjectStreamer::emitFrames(a1, *(llvm::MCAsmBackend **)(*((void *)a1 + 34) + 8));
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unsigned int v46 = 0;
  int v2 = (uint64_t *)*((void *)a1 + 34);
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[8];
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = *(void *)v3;
      int v7 = *(_DWORD *)(*(void *)v3 + 8);
      if ((v7 & 0x201) != 1)
      {
        uint64_t v8 = *(void *)v6;
        unint64_t v9 = *(void *)v6 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x1C00) == 0x800 && v9 == 0)
        {
          *(_DWORD *)(v6 + 8) = v7 | 4;
          unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
          uint64_t v8 = *(void *)v6 & 7 | AssociatedFragment;
          *(void *)unint64_t v6 = v8;
          if (!AssociatedFragment) {
            goto LABEL_22;
          }
LABEL_9:
          unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFF8;
          if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v6 + 8) |= 4u;
            unint64_t v11 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
            uint64_t v8 = *(void *)v6 & 7 | v11;
            *(void *)unint64_t v6 = v8;
          }
          if ((_UNKNOWN *)v11 == llvm::MCSymbol::AbsolutePseudoFragment || (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800) {
            goto LABEL_22;
          }
          unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
          int v47 = 0;
          unsigned int v13 = v46;
          char v14 = sub_1CC137310(v5, v46, v8 & 0xFFFFFFFFFFFFFFF8, &v47);
          int v15 = v47;
          if ((v14 & 1) == 0)
          {
            if (4 * (int)v45 + 4 >= 3 * v13)
            {
              int v16 = 2 * v13;
LABEL_17:
              sub_1CC1373A4((uint64_t)&v44, v16);
              int v47 = 0;
              uint64_t v5 = v44;
              sub_1CC137310(v44, v46, v12, &v47);
              int v15 = v47;
            }
            else if (v13 + ~v45 - HIDWORD(v45) <= v13 >> 3)
            {
              int v16 = v13;
              goto LABEL_17;
            }
            LODWORD(v45) = v45 + 1;
            if (*v15 != -4096) {
              --HIDWORD(v45);
            }
            *int v15 = v12;
            v15[1] = 0;
          }
          v15[1] = v6;
          goto LABEL_22;
        }
        if (v9) {
          goto LABEL_9;
        }
      }
LABEL_22:
      v3 += 8;
      if (v3 == v4)
      {
        int v2 = (uint64_t *)*((void *)a1 + 34);
        break;
      }
    }
  }
  uint64_t v18 = v2[4];
  uint64_t v19 = v2[5];
  if (v18 == v19) {
    goto LABEL_45;
  }
  uint64_t v20 = v44;
  int v21 = v46;
  unsigned int v22 = v46 - 1;
  do
  {
    uint64_t v23 = *(void *)v18 + 104;
    uint64_t v24 = *(void *)(*(void *)v18 + 112);
    if (v24 != v23)
    {
      uint64_t v25 = 0;
      while (1)
      {
        if (!v21) {
          goto LABEL_39;
        }
        uint64_t v26 = ((v24 >> 4) ^ (v24 >> 9)) & v22;
        uint64_t v27 = *(void *)(v20 + 16 * v26);
        if (v24 != v27) {
          break;
        }
LABEL_34:
        uint64_t v28 = *(void *)(v20 + 16 * v26 + 8);
LABEL_40:
        if (v28) {
          uint64_t v25 = v28;
        }
        *(void *)(v24 + 24) = v25;
        uint64_t v24 = *(void *)(v24 + 8);
        if (v24 == v23) {
          goto LABEL_43;
        }
      }
      int v29 = 1;
      while (v27 != -4096)
      {
        int v30 = v26 + v29++;
        uint64_t v26 = v30 & v22;
        uint64_t v27 = *(void *)(v20 + 16 * v26);
        if (v24 == v27) {
          goto LABEL_34;
        }
      }
LABEL_39:
      uint64_t v28 = 0;
      goto LABEL_40;
    }
LABEL_43:
    v18 += 8;
  }
  while (v18 != v19);
  int v2 = (uint64_t *)*((void *)a1 + 34);
LABEL_45:
  char v31 = (void *)v2[273];
  unsigned int v32 = (void *)v2[274];
  if (v31 != v32)
  {
    while (1)
    {
      uint64_t v33 = *(void *)(*v31 + 16);
      uint64_t v34 = *((void *)a1 + 34);
      int v35 = *(_DWORD *)(v33 + 8);
      if ((v35 & 8) == 0)
      {
        *(_DWORD *)(v33 + 8) = v35 | 8;
        int v47 = (unint64_t *)v33;
        uint64_t v36 = *(void **)(v34 + 64);
        if ((unint64_t)v36 >= *(void *)(v34 + 72))
        {
          uint64_t v37 = sub_1CBC13470((void **)(v34 + 56), &v47);
        }
        else
        {
          *uint64_t v36 = v33;
          uint64_t v37 = v36 + 1;
        }
        *(void *)(v34 + 64) = v37;
        *(_DWORD *)(v33 + 8) |= 0x10u;
        uint64_t v34 = *((void *)a1 + 34);
      }
      uint64_t v38 = *(void *)(v31[1] + 16);
      int v39 = *(_DWORD *)(v38 + 8);
      if ((v39 & 8) == 0)
      {
        *(_DWORD *)(v38 + 8) = v39 | 8;
        int v47 = (unint64_t *)v38;
        uint64_t v40 = *(void **)(v34 + 64);
        if ((unint64_t)v40 >= *(void *)(v34 + 72))
        {
          int v41 = sub_1CBC13470((void **)(v34 + 56), &v47);
        }
        else
        {
          *uint64_t v40 = v38;
          int v41 = v40 + 1;
        }
        *(void *)(v34 + 64) = v41;
        *(_DWORD *)(v38 + 8) |= 0x10u;
      }
      v31 += 3;
      if (v31 == v32)
      {
        size_t MachOSection = llvm::MCContext::getMachOSection(*v2, (uint64_t)"__LLVM", 6uLL, (uint64_t)"__cg_profile", 12, 0, 0, 0, 0);
        llvm::MCAssembler::registerSection((uint64_t)v2, MachOSection);
        operator new();
      }
    }
  }
  llvm::MCObjectStreamer::finishImpl((llvm::MCContext **)a1);
  return MEMORY[0x1D25D9CD0](v44, 8);
}

void sub_1CCBC8DD8(llvm::MCObjectStreamer *a1, uint64_t a2, uint64_t a3)
{
  v32[12] = *MEMORY[0x1E4F143B8];
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, 0);
  int v30 = (char *)v32;
  uint64_t v31 = 0x400000000;
  uint64_t v26 = &v27;
  uint64_t v27 = v29;
  long long v28 = xmmword_1CD96DBF0;
  int v19 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v18 = &unk_1F2646FA8;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  (*(void (**)(void, uint64_t, void **, char **, uint64_t))(**(void **)(*((void *)a1 + 34) + 16) + 32))(*(void *)(*((void *)a1 + 34) + 16), a2, &v18, &v30, a3);
  if (v31)
  {
    int v7 = v30;
    unsigned int v8 = *(_DWORD *)(DataFragment + 128);
    uint64_t v9 = 24 * v31;
    uint64_t v10 = v30;
    do
    {
      *((_DWORD *)v10 + 2) += *(_DWORD *)(DataFragment + 72);
      unint64_t v11 = *(void *)(DataFragment + 120);
      if (v8 >= *(_DWORD *)(DataFragment + 132))
      {
        unint64_t v14 = v11 + 24 * v8;
        if (v11 > (unint64_t)v10 || v14 <= (unint64_t)v10) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v12 = v11 + 24 * *(unsigned int *)(DataFragment + 128);
      long long v13 = *(_OWORD *)v10;
      *(void *)(v12 + 16) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      unsigned int v8 = *(_DWORD *)(DataFragment + 128) + 1;
      *(_DWORD *)(DataFragment + 128) = v8;
      v10 += 24;
      v7 += 24;
      v9 -= 24;
    }
    while (v9);
  }
  *(unsigned char *)(DataFragment + 50) = 1;
  *(void *)(DataFragment + 56) = a3;
  uint64_t v16 = v28;
  uint64_t v17 = *(void *)(DataFragment + 72);
  if (*(void *)(DataFragment + 80) < (unint64_t)(v17 + v28)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if ((void)v28)
  {
    memcpy((void *)(*(void *)(DataFragment + 64) + v17), v27, v28);
    uint64_t v17 = *(void *)(DataFragment + 72);
  }
  *(void *)(DataFragment + 72) = v17 + v16;
  uint64_t v18 = &unk_1F2646B98;
  if (v25 == 1 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8077774924);
  }
  if (v27 != v29) {
    free(v27);
  }
  if (v30 != (char *)v32) {
    free(v30);
  }
}

void sub_1CCBC90B0(void *a1, int a2)
{
  uint64_t v4 = (llvm::MCContext *)a1[1];
  uint64_t v17 = "tmp";
  __int16 v18 = 259;
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)&v17, 1);
  (*(void (**)(void *, uint64_t, void))(*a1 + 192))(a1, TempSymbol, 0);
  unint64_t v6 = (void *)a1[34];
  unsigned int v8 = (char *)v6[14];
  unint64_t v7 = v6[15];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v6[13];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v10) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      unint64_t v14 = (char *)operator new(24 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    int v15 = &v14[8 * ((v8 - v10) >> 3)];
    *(_DWORD *)int v15 = a2;
    *((_DWORD *)v15 + 1) = 0;
    *((void *)v15 + 1) = TempSymbol;
    *((void *)v15 + 2) = 0;
    uint64_t v9 = v15 + 24;
    if (v8 != v10)
    {
      do
      {
        long long v16 = *(_OWORD *)(v8 - 24);
        *((void *)v15 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v8 -= 24;
      }
      while (v8 != v10);
      unsigned int v8 = (char *)v6[13];
    }
    v6[13] = v15;
    v6[14] = v9;
    v6[15] = &v14[24 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)unsigned int v8 = a2;
    *((_DWORD *)v8 + 1) = 0;
    uint64_t v9 = v8 + 24;
    *((void *)v8 + 1) = TempSymbol;
    *((void *)v8 + 2) = 0;
  }
  v6[14] = v9;
}

void llvm::MCNullInstPrinter::~MCNullInstPrinter(llvm::MCNullInstPrinter *this)
{
}

const char *llvm::MCNullInstPrinter::getMnemonic()
{
  return "";
}

llvm::raw_ostream *llvm::MCNullInstPrinter::printInst(int a1, int a2, int a3, int a4, int a5, int a6, llvm::raw_ostream *this)
{
  unint64_t v7 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v7) {
    return llvm::raw_ostream::write(this, "-", 1uLL);
  }
  *unint64_t v7 = 45;
  ++*((void *)this + 4);
  return result;
}

void sub_1CCBC92B8(llvm::MCStreamer *a1)
{
}

void sub_1CCBC92C8()
{
  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBC92F0()
{
  return 1;
}

uint64_t sub_1CCBC92F8()
{
  return 1;
}

size_t llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  *((unsigned char *)this + 9) = 0;
  *((void *)this + 57) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__eh_frame", 10, 1744830475, 0, 4, 0);
  unsigned int v4 = *((_DWORD *)a2 + 9);
  if (v4 == 7 || v4 <= 0x21 && ((1 << v4) & 0x3F0000808) != 0)
  {
    int v5 = *((_DWORD *)a2 + 6);
    if (v5 == 5 || v5 == 3) {
      *((unsigned char *)this + 10) = 1;
    }
  }
  uint64_t v7 = *(void *)(*((void *)this + 105) + 1952);
  if (!v7 || (int v8 = *(_DWORD *)(v7 + 4), v8 == 2))
  {
    LOBYTE(v8) = *((_DWORD *)a2 + 7) == 22 || *((unsigned char *)this + 10) != 0;
    goto LABEL_11;
  }
  if (v8 == 1)
  {
LABEL_11:
    *((unsigned char *)this + 11) = v8;
    goto LABEL_12;
  }
  if (!v8) {
    *((unsigned char *)this + 11) = 0;
  }
LABEL_12:
  *((_DWORD *)this + 3) = 16;
  if ((v4 & 0xFFFFFFF7) == 3 && llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 5, 0)) {
    *((unsigned char *)this + 8) = 0;
  }
  *((void *)this + 3) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 2, 0);
  *((void *)this + 4) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 19, 0);
  *((void *)this + 5) = 0;
  *((void *)this + 52) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 19, 0);
  *((void *)this + 53) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
  *((void *)this + 66) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 19, 0);
  *((void *)this + 67) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 19, 0);
  *((void *)this + 68) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 5, 0);
  *((void *)this + 69) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__ustring", 9, 0, 0, 6, 0);
  *((void *)this + 77) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal4", 10, 3, 0, 8, 0);
  *((void *)this + 78) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal8", 10, 4, 0, 9, 0);
  *((void *)this + 79) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal16", 11, 14, 0, 10, 0);
  *((void *)this + 6) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 4, 0);
  int v9 = *((_DWORD *)a2 + 6);
  size_t MachOSection = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 20, 0);
  *((void *)this + 72) = MachOSection;
  if ((v9 & 0xFFFFFFFD) == 0x15)
  {
    *((void *)this + 70) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__textcoal_nt", 13, -2147483637, 0, 2, 0);
    *((void *)this + 71) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const_coal", 12, 11, 0, 4, 0);
    size_t MachOSection = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__datacoal_nt", 13, 11, 0, 19, 0);
    size_t v11 = MachOSection;
  }
  else
  {
    size_t v11 = *((void *)this + 4);
    *((void *)this + 70) = *((void *)this + 3);
    *((void *)this + 71) = *((void *)this + 6);
  }
  *((void *)this + 73) = v11;
  *((void *)this + 74) = MachOSection;
  *((void *)this + 75) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__common", 8, 1, 0, 15, 0);
  *((void *)this + 76) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__bss", 5, 1, 0, 15, 0);
  *((void *)this + 80) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__la_symbol_ptr", 15, 7, 0, 0, 0);
  *((void *)this + 81) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__nl_symbol_ptr", 15, 6, 0, 0, 0);
  *((void *)this + 82) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_ptr", 12, 20, 0, 0, 0);
  *((void *)this + 7) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__gcc_except_tab", 16, 0, 0, 20, 0);
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  unsigned int v12 = *((_DWORD *)a2 + 9);
  if (v12 == 7 || v12 <= 0x21 && ((1 << v12) & 0x3F0000808) != 0)
  {
    int v13 = *((_DWORD *)a2 + 6);
    if (v13 != 3 && v13 != 5 && *((_DWORD *)a2 + 7) != 22)
    {
      if ((v12 & 0xFFFFFFF7) == 3)
      {
        if (!llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 6, 0)) {
          goto LABEL_63;
        }
        unsigned int v12 = *((_DWORD *)a2 + 9);
      }
      if (v12 == 7 || v12 == 28)
      {
        if ((*((_DWORD *)a2 + 6) - 41) < 2) {
          goto LABEL_63;
        }
      }
      else if (v12 == 33)
      {
        goto LABEL_63;
      }
      if (*((_DWORD *)a2 + 10) != 20) {
        goto LABEL_23;
      }
    }
LABEL_63:
    *((void *)this + 8) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__LD", 4uLL, (uint64_t)"__compact_unwind", 16, 0x2000000, 0, 4, 0);
    int v45 = *((_DWORD *)a2 + 6);
    if ((v45 - 41) >= 2)
    {
      int v46 = 50331648;
      if (v45 > 4)
      {
        if (v45 == 5) {
          goto LABEL_65;
        }
        if (v45 != 39) {
          goto LABEL_23;
        }
      }
      else if (v45 != 1)
      {
        if (v45 != 3) {
          goto LABEL_23;
        }
LABEL_65:
        *((_DWORD *)this + 4) = v46;
        goto LABEL_23;
      }
    }
    int v46 = 0x4000000;
    goto LABEL_65;
  }
LABEL_23:
  *((void *)this + 23) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_names", 13, 0x2000000, 0, 0, "debug_names_begin");
  *((void *)this + 24) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_names", 13, 0x2000000, 0, 0, "names_begin");
  *((void *)this + 25) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_objc", 12, 0x2000000, 0, 0, "objc_begin");
  *((void *)this + 26) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_namespac", 16, 0x2000000, 0, 0, "namespac_begin");
  *((void *)this + 27) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_types", 13, 0x2000000, 0, 0, "types_begin");
  *((void *)this + 47) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__swift_ast", 11, 0x2000000, 0, 0, 0);
  *((void *)this + 9) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_abbrev", 14, 0x2000000, 0, 0, "section_abbrev");
  *((void *)this + 10) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_info", 12, 0x2000000, 0, 0, "section_info");
  *((void *)this + 11) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line", 12, 0x2000000, 0, 0, "section_line");
  *((void *)this + 12) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line_str", 16, 0x2000000, 0, 0, "section_line_str");
  *((void *)this + 13) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_frame", 13, 0x2000000, 0, 0, 0);
  *((void *)this + 22) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubnames", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 14) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubtypes", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 45) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubn", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 46) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubt", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 16) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str", 11, 0x2000000, 0, 0, "info_string");
  *((void *)this + 37) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str_offs", 16, 0x2000000, 0, 0, "section_str_off");
  *((void *)this + 38) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_addr", 12, 0x2000000, 0, 0, "section_info");
  *((void *)this + 17) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loc", 11, 0x2000000, 0, 0, "section_debug_loc");
  *((void *)this + 40) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loclists", 16, 0x2000000, 0, 0, "section_debug_loc");
  *((void *)this + 18) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_aranges", 15, 0x2000000, 0, 0, 0);
  *((void *)this + 19) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_ranges", 14, 0x2000000, 0, 0, "debug_range");
  *((void *)this + 39) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_rnglists", 16, 0x2000000, 0, 0, "debug_range");
  *((void *)this + 20) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macinfo", 15, 0x2000000, 0, 0, "debug_macinfo");
  *((void *)this + 21) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macro", 13, 0x2000000, 0, 0, "debug_macro");
  *((void *)this + 15) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_inlined", 15, 0x2000000, 0, 0, 0);
  *((void *)this + 43) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_cu_index", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 44) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_tu_index", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 54) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__LLVM_STACKMAPS", 0x10uLL, (uint64_t)"__llvm_stackmaps", 16, 0, 0, 0, 0);
  *((void *)this + 55) = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__LLVM_FAULTMAPS", 0x10uLL, (uint64_t)"__llvm_faultmaps", 16, 0, 0, 0, 0);
  size_t result = llvm::MCContext::getMachOSection(*((void *)this + 105), (uint64_t)"__LLVM", 6uLL, (uint64_t)"__remarks", 9, 0x2000000, 0, 0, 0);
  *((void *)this + 56) = result;
  uint64_t v15 = *((void *)this + 105);
  if (*(void *)(v15 + 16))
  {
    uint64_t v16 = *(void *)(v15 + 8);
    if (v16) {
      size_t v17 = strlen(*(const char **)(v15 + 8));
    }
    else {
      size_t v17 = 0;
    }
    *((void *)this + 94) = llvm::MCContext::getMachOSection(v15, v16, v17, (uint64_t)"__swift5_fieldmd", 16, 0, 0, 0, 0);
    uint64_t v18 = *((void *)this + 105);
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19) {
      size_t v20 = strlen(*(const char **)(v18 + 8));
    }
    else {
      size_t v20 = 0;
    }
    *((void *)this + 95) = llvm::MCContext::getMachOSection(v18, v19, v20, (uint64_t)"__swift5_assocty", 16, 0, 0, 0, 0);
    uint64_t v21 = *((void *)this + 105);
    uint64_t v22 = *(void *)(v21 + 8);
    if (v22) {
      size_t v23 = strlen(*(const char **)(v21 + 8));
    }
    else {
      size_t v23 = 0;
    }
    *((void *)this + 96) = llvm::MCContext::getMachOSection(v21, v22, v23, (uint64_t)"__swift5_builtin", 16, 0, 0, 0, 0);
    uint64_t v24 = *((void *)this + 105);
    uint64_t v25 = *(void *)(v24 + 8);
    if (v25) {
      size_t v26 = strlen(*(const char **)(v24 + 8));
    }
    else {
      size_t v26 = 0;
    }
    *((void *)this + 97) = llvm::MCContext::getMachOSection(v24, v25, v26, (uint64_t)"__swift5_capture", 16, 0, 0, 0, 0);
    uint64_t v27 = *((void *)this + 105);
    uint64_t v28 = *(void *)(v27 + 8);
    if (v28) {
      size_t v29 = strlen(*(const char **)(v27 + 8));
    }
    else {
      size_t v29 = 0;
    }
    *((void *)this + 98) = llvm::MCContext::getMachOSection(v27, v28, v29, (uint64_t)"__swift5_typeref", 16, 0, 0, 0, 0);
    uint64_t v30 = *((void *)this + 105);
    uint64_t v31 = *(void *)(v30 + 8);
    if (v31) {
      size_t v32 = strlen(*(const char **)(v30 + 8));
    }
    else {
      size_t v32 = 0;
    }
    *((void *)this + 99) = llvm::MCContext::getMachOSection(v30, v31, v32, (uint64_t)"__swift5_reflstr", 16, 0, 0, 0, 0);
    uint64_t v33 = *((void *)this + 105);
    uint64_t v34 = *(void *)(v33 + 8);
    if (v34) {
      size_t v35 = strlen(*(const char **)(v33 + 8));
    }
    else {
      size_t v35 = 0;
    }
    *((void *)this + 100) = llvm::MCContext::getMachOSection(v33, v34, v35, (uint64_t)"__swift5_proto", 14, 0, 0, 0, 0);
    uint64_t v36 = *((void *)this + 105);
    uint64_t v37 = *(void *)(v36 + 8);
    if (v37) {
      size_t v38 = strlen(*(const char **)(v36 + 8));
    }
    else {
      size_t v38 = 0;
    }
    *((void *)this + 101) = llvm::MCContext::getMachOSection(v36, v37, v38, (uint64_t)"__swift5_protos", 15, 0, 0, 0, 0);
    uint64_t v39 = *((void *)this + 105);
    uint64_t v40 = *(void *)(v39 + 8);
    if (v40) {
      size_t v41 = strlen(*(const char **)(v39 + 8));
    }
    else {
      size_t v41 = 0;
    }
    *((void *)this + 102) = llvm::MCContext::getMachOSection(v39, v40, v41, (uint64_t)"__swift5_acfuncs", 16, 0, 0, 0, 0);
    uint64_t v42 = *((void *)this + 105);
    uint64_t v43 = *(void *)(v42 + 8);
    if (v43) {
      size_t v44 = strlen(*(const char **)(v42 + 8));
    }
    else {
      size_t v44 = 0;
    }
    size_t result = llvm::MCContext::getMachOSection(v42, v43, v44, (uint64_t)"__swift5_mpenum", 15, 0, 0, 0, 0);
    *((void *)this + 103) = result;
  }
  *((void *)this + 51) = *((void *)this + 66);
  return result;
}

void llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  llvm::MCContext::getGOFFSection(*((void *)this + 105), ".text", 5uLL, 2);
  *((void *)this + 3) = v3;
  llvm::MCContext::getGOFFSection(*((void *)this + 105), ".bss", 4uLL, 15);
  *((void *)this + 5) = v4;
}

void llvm::MCObjectFileInfo::initSPIRVMCObjectFileInfo(llvm::MCContext **this, const llvm::Triple *a2)
{
}

void llvm::MCObjectFileInfo::initMCObjectFileInfo(llvm::MCObjectFileInfo *this, llvm::MCContext *a2, char a3, int a4)
{
  *((unsigned char *)this + 832) = a3;
  *((void *)this + 105) = a2;
  *((_WORD *)this + 4) = 257;
  *((void *)this + 57) = 0;
  *((void *)this + 8) = 0;
  *(void *)((char *)this + 10) = 0;
  *((_WORD *)this + 9) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((char *)a2 + 47) < 0)
  {
    int v8 = a2;
    int v9 = this;
    int v7 = a4;
    sub_1CB8BDF7C((uint64_t)__p, *((const void **)a2 + 3), *((void *)a2 + 4));
    a2 = v8;
    this = v9;
    a4 = v7;
    uint64_t v4 = (llvm::MCContext *)*((void *)v9 + 105);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)((char *)a2 + 24);
    uint64_t v12 = *((void *)a2 + 5);
    uint64_t v4 = a2;
  }
  long long v13 = *((_OWORD *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 8);
  if (*(_DWORD *)v4)
  {
    uint64_t v10 = this;
    switch(*(_DWORD *)v4)
    {
      case 1:
        llvm::MCObjectFileInfo::initELFMCObjectFileInfo(this, (const llvm::Triple *)__p, a4);
        break;
      case 2:
        llvm::MCContext::getGOFFSection((uint64_t)v4, ".text", 5uLL, 2);
        *((void *)v10 + 3) = v5;
        llvm::MCContext::getGOFFSection(*((void *)v10 + 105), ".bss", 4uLL, 15);
        *((void *)v10 + 5) = v6;
        break;
      case 3:
        llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(this, (const llvm::Triple *)__p);
        break;
      case 4:
        llvm::MCContext::getSPIRVSection(v4);
      case 5:
        llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(this, a2);
        break;
      case 6:
        llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(this, a2);
        break;
      default:
        break;
    }
  }
  else
  {
    llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(this, (const llvm::Triple *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t llvm::MCObjectFileInfo::getPseudoProbeDescSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(llvm::MCContext **)(a1 + 840);
  if (*(_DWORD *)v4 != 1) {
    return *(void *)(a1 + 480);
  }
  unsigned int v5 = *((_DWORD *)v4 + 17);
  BOOL v6 = v5 >= 9;
  BOOL v8 = v5 == 9;
  int v7 = (1 << v5) & 0x320;
  BOOL v8 = !v8 && v6 || v7 == 0;
  if (!v8 || a3 == 0) {
    return *(void *)(a1 + 480);
  }
  uint64_t v10 = *(void *)(a1 + 480);
  int v11 = *(_DWORD *)(v10 + 224);
  int v12 = *(_DWORD *)(v10 + 228) | 0x200;
  uint64_t v13 = *(void *)(v10 + 200);
  uint64_t v14 = *(void *)(v10 + 208);
  __int16 v22 = 261;
  v21[0] = v13;
  v21[1] = v14;
  int v15 = *(_DWORD *)(v10 + 236);
  __int16 v18 = 773;
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = "_";
  v19[0] = v17;
  v19[2] = a2;
  v19[3] = a3;
  __int16 v20 = 1282;
  return llvm::MCContext::getELFSection(v4, (const llvm::Twine *)v21, v11, v12, v15, (const llvm::Twine *)v19, 1, -1, 0);
}

uint64_t llvm::MCObjectStreamer::getAssemblerPtr(llvm::MCObjectStreamer *this)
{
  if (*((unsigned char *)this + 268)) {
    return *((void *)this + 34);
  }
  else {
    return 0;
  }
}

llvm::MCSection *llvm::MCObjectStreamer::addPendingLabel(llvm::MCSection *this, llvm::MCSymbol *a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v3 = *((unsigned int *)this + 30);
  if (v3 && (this = *(llvm::MCSection **)(*((void *)this + 14) + 32 * v3 - 32), (int v11 = this) != 0))
  {
    uint64_t v4 = *(unsigned int *)(v2 + 304);
    if (v4)
    {
      int v9 = a2;
      uint64_t v10 = this;
      BOOL v6 = *(llvm::MCSymbol ***)(v2 + 296);
      uint64_t v7 = 8 * v4;
      do
      {
        BOOL v8 = *v6++;
        llvm::MCSection::addPendingLabel((uint64_t)v10, v8, 0);
        v7 -= 8;
      }
      while (v7);
      *(_DWORD *)(v2 + 304) = 0;
      a2 = v9;
      this = v10;
    }
    llvm::MCSection::addPendingLabel((uint64_t)this, a2, *(_DWORD *)(v2 + 416));
    return (llvm::MCSection *)sub_1CCBCA7C0(v2 + 328, (uint64_t *)&v11);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(v2 + 304);
    if (v5 >= *(_DWORD *)(v2 + 308)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v2 + 296) + 8 * v5) = a2;
    ++*(_DWORD *)(v2 + 304);
  }
  return this;
}

BOOL sub_1CCBCA7C0(uint64_t a1, uint64_t *a2)
{
  sub_1CCBCD2E0(a1, a2, (uint64_t)v8);
  int v4 = v9;
  if (v9)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_DWORD *llvm::MCObjectStreamer::flushPendingLabels(_DWORD *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = this[30];
  if (v3)
  {
    int v4 = this;
    uint64_t v5 = *(void *)(*((void *)this + 14) + 32 * v3 - 32);
    if (v5)
    {
      uint64_t v8 = this[76];
      if (v8)
      {
        uint64_t v16 = (llvm::MCSymbol **)*((void *)this + 37);
        uint64_t v17 = 8 * v8;
        do
        {
          __int16 v18 = *v16++;
          this = (_DWORD *)llvm::MCSection::addPendingLabel(v5, v18, v4[104]);
          v17 -= 8;
        }
        while (v17);
        v4[76] = 0;
      }
      int v9 = v4[104];
      if (a2)
      {
        int v10 = *(_DWORD *)(v5 + 160);
        if (v10)
        {
          int v11 = *(_DWORD **)(v5 + 152);
          int v12 = v11;
          do
          {
            if (v12[2] == v9)
            {
              uint64_t v13 = *(unint64_t **)v12;
              unint64_t *v13 = **(void **)v12 & 7 | a2;
              uint64_t v13[3] = a3;
              *((_DWORD *)v13 + 2) = v13[1] & 0xFFFFE3FF | 0x400;
              int v11 = *(_DWORD **)(v5 + 152);
              uint64_t v14 = *(unsigned int *)(v5 + 160);
              uint64_t v15 = (char *)&v11[4 * v14] - (char *)(v12 + 4);
              if (v15)
              {
                this = memmove(v12, v12 + 4, v15 - 4);
                LODWORD(v14) = *(_DWORD *)(v5 + 160);
                int v11 = *(_DWORD **)(v5 + 152);
              }
              v12 -= 4;
              int v10 = v14 - 1;
              *(_DWORD *)(v5 + 160) = v10;
            }
            v12 += 4;
          }
          while (v12 != &v11[4 * v10]);
        }
      }
      else
      {
        return llvm::MCSection::flushPendingLabels((_DWORD *)v5, 0, 0, v9);
      }
    }
  }
  return this;
}

uint64_t llvm::MCObjectStreamer::flushPendingLabels(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 304);
  if (v1)
  {
    uint64_t v11 = this;
    uint64_t v6 = *(unsigned int *)(this + 120);
    if (v6) {
      uint64_t v7 = *(void *)(*(void *)(this + 112) + 32 * v6 - 32);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(llvm::MCSymbol ***)(this + 296);
    uint64_t v9 = 8 * v1;
    do
    {
      int v10 = *v8++;
      llvm::MCSection::addPendingLabel(v7, v10, *(_DWORD *)(v11 + 416));
      v9 -= 8;
    }
    while (v9);
    this = v11;
    *(_DWORD *)(v11 + 304) = 0;
  }
  uint64_t v2 = *(unsigned int *)(this + 376);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(this + 368);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      this = llvm::MCSection::flushPendingLabels(v5);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

llvm::MCObjectStreamer *llvm::MCObjectStreamer::resolvePendingFixups(llvm::MCObjectStreamer *this)
{
  uint64_t v1 = *((unsigned int *)this + 108);
  if (v1)
  {
    uint64_t v2 = 40 * v1;
    uint64_t v3 = (unint64_t *)(*((void *)this + 53) + 32);
    do
    {
      uint64_t v16 = this;
      uint64_t v4 = *(v3 - 4);
      if (v4 && sub_1CC34BE58(v4, 1))
      {
        llvm::MCObjectStreamer::flushPendingLabels(v16, *v3, *(void *)(*v3 + 72));
        uint64_t v5 = *(v3 - 4);
        *((_DWORD *)v3 - 4) += *(_DWORD *)(v5 + 24);
        unint64_t v6 = sub_1CC34BE58(v5, 1);
        unint64_t v7 = v6;
        switch(*(unsigned char *)(v6 + 48))
        {
          case 6:
          case 8:
          case 0xF:
            unint64_t v8 = sub_1CD41C4F0(v6 + 96, (unint64_t)(v3 - 3), 1);
            uint64_t v9 = *(void *)(v7 + 96) + 24 * *(unsigned int *)(v7 + 104);
            long long v10 = *(_OWORD *)v8;
            *(void *)(v9 + 16) = *(void *)(v8 + 16);
            *(_OWORD *)uint64_t v9 = v10;
            ++*(_DWORD *)(v7 + 104);
            break;
          case 7:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            goto LABEL_13;
          case 0xE:
            goto LABEL_11;
          default:
            if (*(unsigned char *)(v6 + 48) != 1) {
LABEL_13:
            }
              unint64_t v7 = *v3;
LABEL_11:
            unint64_t v13 = sub_1CD41C4F0(v7 + 120, (unint64_t)(v3 - 3), 1);
            uint64_t v14 = *(void *)(v7 + 120) + 24 * *(unsigned int *)(v7 + 128);
            long long v15 = *(_OWORD *)v13;
            *(void *)(v14 + 16) = *(void *)(v13 + 16);
            *(_OWORD *)uint64_t v14 = v15;
            ++*(_DWORD *)(v7 + 128);
            break;
        }
      }
      else
      {
        uint64_t v11 = *((void *)v16 + 1);
        uint64_t v12 = *(v3 - 1);
        uint64_t v17 = "unresolved relocation offset";
        __int16 v18 = 259;
        llvm::MCContext::reportError(v11, v12, (uint64_t)&v17);
      }
      v3 += 5;
      v2 -= 40;
      this = v16;
    }
    while (v2);
  }
  *((_DWORD *)this + 108) = 0;
  return this;
}

uint64_t llvm::MCObjectStreamer::emitAbsoluteSymbolDiff(llvm::MCObjectStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  if ((*(_DWORD *)(**((void **)this + 34) + 48) - 31) >= 2
    && (unint64_t v8 = sub_1CCBCACEC((uint64_t)a2, (uint64_t)a3), v9))
  {
    uint64_t v11 = *(uint64_t (**)(llvm::MCObjectStreamer *, unint64_t, uint64_t))(*(void *)this + 520);
    return v11(this, v8, a4);
  }
  else
  {
    return llvm::MCStreamer::emitAbsoluteSymbolDiff(this, a2, a3, a4);
  }
}

unint64_t sub_1CCBCACEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t AssociatedFragment = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    uint64_t v4 = *(void *)a1 & 7 | AssociatedFragment;
    *(void *)a1 = v4;
  }
  if (!AssociatedFragment) {
    goto LABEL_8;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    unint64_t v6 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    *(void *)a1 = *(void *)a1 & 7 | v6;
  }
  unint64_t v7 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v7 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a2 + 8) |= 4u;
    unint64_t v7 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    *(void *)a2 = *(void *)a2 & 7 | v7;
  }
  if (v6 == v7 && (*(_DWORD *)(a1 + 8) & 0x1C00) != 0x800 && (*(_DWORD *)(a2 + 8) & 0x1C00) != 0x800)
  {
    unint64_t v9 = (*(void *)(a1 + 24) - *(void *)(a2 + 24)) & 0xFFFFFFFFFFFFFF00;
    uint64_t v8 = (*(unsigned char *)(a1 + 24) - *(unsigned char *)(a2 + 24));
  }
  else
  {
LABEL_8:
    uint64_t v8 = 0;
    unint64_t v9 = 0;
  }
  return v9 | v8;
}

double llvm::MCObjectStreamer::reset(llvm::MCObjectStreamer *this)
{
  uint64_t v2 = (llvm::MCAssembler *)*((void *)this + 34);
  if (v2) {
    llvm::MCAssembler::reset(v2);
  }
  *((void *)this + 35) = 0;
  *((_WORD *)this + 144) = 1;
  *((_DWORD *)this + 76) = 0;
  sub_1CCBCD584((void *)this + 41);
  *((_DWORD *)this + 94) = 0;

  *(void *)&double result = llvm::MCStreamer::reset(this).n128_u64[0];
  return result;
}

llvm::MCStreamer *llvm::MCObjectStreamer::emitFrames(llvm::MCStreamer *this, llvm::MCAsmBackend *a2)
{
  if (-1171354717 * ((*((void *)this + 4) - *((void *)this + 3)) >> 3))
  {
    if (*((unsigned char *)this + 288))
    {
      uint64_t v2 = a2;
      uint64_t v3 = this;
      llvm::MCDwarfFrameEmitter::Emit(this, a2, (llvm::MCAsmBackend *)1);
      a2 = v2;
      this = v3;
    }
    if (*((unsigned char *)this + 289))
    {
      return llvm::MCDwarfFrameEmitter::Emit(this, a2, 0);
    }
  }
  return this;
}

uint64_t llvm::MCObjectStreamer::getOrCreateDataFragment(llvm::MCObjectStreamer *this, const llvm::MCSubtargetInfo *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 35);
  if (v3 == *(uint64_t **)(*(void *)(*((void *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 112)
    || (uint64_t result = *v3) == 0
    || *(unsigned char *)(result + 48) != 1)
  {
LABEL_11:
    operator new();
  }
  if (*(unsigned char *)(result + 50))
  {
    uint64_t v5 = *((void *)this + 34);
    if (*(_DWORD *)(v5 + 496))
    {
      if ((*(unsigned char *)(v5 + 500) & 1) == 0) {
        goto LABEL_11;
      }
    }
    else if (a2 && *(const llvm::MCSubtargetInfo **)(result + 56) != a2)
    {
      goto LABEL_11;
    }
  }
  return result;
}

void *llvm::MCObjectStreamer::visitUsedSymbol(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 8) == 0)
  {
    uint64_t v3 = result[34];
    *(_DWORD *)(a2 + 8) = v2 | 8;
    uint64_t v6 = a2;
    uint64_t v4 = *(void **)(v3 + 64);
    if ((unint64_t)v4 >= *(void *)(v3 + 72))
    {
      uint64_t v5 = v3;
      uint64_t result = sub_1CBC13470((void **)(v3 + 56), &v6);
      uint64_t v3 = v5;
    }
    else
    {
      *uint64_t v4 = a2;
      uint64_t result = v4 + 1;
    }
    *(void *)(v3 + 64) = result;
  }
  return result;
}

uint64_t llvm::MCObjectStreamer::emitCFISections(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 288) = a2;
  *(unsigned char *)(this + 289) = a3;
  return this;
}

void llvm::MCObjectStreamer::emitValueImpl(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::MCStreamer::visitUsedExpr((llvm::MCStreamer *)a1, (const llvm::MCExpr **)a2);
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  uint64_t v10 = DataFragment;
  uint64_t v11 = *(unsigned int *)(a1 + 120);
  if (!v11) {
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 112) + 32 * v11 - 32);
  if (v12)
  {
    uint64_t v13 = *(void *)(DataFragment + 72);
    uint64_t v14 = *(unsigned int *)(a1 + 304);
    if (v14)
    {
      size_t v38 = *(llvm::MCSymbol ***)(a1 + 296);
      uint64_t v39 = 8 * v14;
      do
      {
        uint64_t v40 = *v38++;
        llvm::MCSection::addPendingLabel(v12, v40, *(_DWORD *)(a1 + 416));
        v39 -= 8;
      }
      while (v39);
      *(_DWORD *)(a1 + 304) = 0;
      int v15 = *(_DWORD *)(a1 + 416);
      if (!v10)
      {
        llvm::MCSection::flushPendingLabels((_DWORD *)v12, 0, 0, *(_DWORD *)(a1 + 416));
        goto LABEL_6;
      }
    }
    else
    {
      int v15 = *(_DWORD *)(a1 + 416);
    }
    int v16 = *(_DWORD *)(v12 + 160);
    if (v16)
    {
      uint64_t v31 = *(_DWORD **)(v12 + 152);
      size_t v32 = v31;
      do
      {
        if (v32[2] == v15)
        {
          uint64_t v33 = *(uint64_t **)v32;
          *uint64_t v33 = **(void **)v32 & 7 | v10;
          v33[3] = v13;
          *((_DWORD *)v33 + 2) = v33[1] & 0xFFFFE3FF | 0x400;
          uint64_t v31 = *(_DWORD **)(v12 + 152);
          uint64_t v34 = *(unsigned int *)(v12 + 160);
          uint64_t v35 = (char *)&v31[4 * v34] - (char *)(v32 + 4);
          if (v35)
          {
            memmove(v32, v32 + 4, v35 - 4);
            LODWORD(v34) = *(_DWORD *)(v12 + 160);
            uint64_t v31 = *(_DWORD **)(v12 + 152);
          }
          v32 -= 4;
          int v16 = v34 - 1;
          *(_DWORD *)(v12 + 160) = v16;
        }
        v32 += 4;
      }
      while (v32 != &v31[4 * v16]);
    }
  }
LABEL_6:
  uint64_t v17 = *(unsigned int *)(a1 + 120);
  if (v17)
  {
    __int16 v18 = *(llvm::MCStreamer **)(*(void *)(a1 + 112) + 32 * v17 - 32);
    goto LABEL_8;
  }
LABEL_33:
  __int16 v18 = 0;
LABEL_8:
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v18, v9);
  uint64_t v19 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  long long v48 = 0uLL;
  int v50 = 0;
  int64_t v49 = 0;
  if (*(unsigned char *)a2 == 1)
  {
    int64_t v21 = *(void *)(a2 + 16);
    int64_t v51 = v21;
    goto LABEL_27;
  }
  char v20 = llvm::MCExpr::evaluateAsRelocatableImpl(a2, (uint64_t)&v48, v19, 0, 0, 0, 0);
  int64_t v21 = v49;
  int64_t v51 = v49;
  if ((v20 & 1) != 0 && v48 == 0)
  {
LABEL_27:
    if (8 * a3 <= 0x3F
      && 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3) < v21
      && ((uint64_t v36 = -1 << (8 * a3 - 1), v36 > v21) || v21 > ~v36))
    {
      uint64_t v37 = *(void *)(a1 + 8);
      int v45 = "value evaluated as ";
      __int16 v46 = 259;
      __int16 v44 = 269;
      uint64_t v43 = &v51;
      sub_1CB8F1E58((uint64_t *)&v45, (uint64_t *)&v43, (uint64_t)v47);
      size_t v41 = " is out of range.";
      __int16 v42 = 259;
      sub_1CB8F1E58(v47, (uint64_t *)&v41, (uint64_t)&v48);
      llvm::MCContext::reportError(v37, a4, (uint64_t)&v48);
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 520))(a1);
    }
    return;
  }
  unint64_t v22 = *(void *)(v10 + 120);
  uint64_t v23 = *(void *)(v10 + 72);
  unsigned int v24 = dword_1CFB28DB0[a3 - 1];
  *(void *)&long long v48 = a2;
  *((void *)&v48 + 1) = __PAIR64__(v24, v23);
  int64_t v49 = a4;
  unsigned int v25 = *(_DWORD *)(v10 + 128);
  if (v25 >= *(_DWORD *)(v10 + 132))
  {
    BOOL v30 = v22 + 24 * v25 > (unint64_t)&v48;
    if (v22 > (unint64_t)&v48 || !v30) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v26 = v22 + 24 * *(unsigned int *)(v10 + 128);
  long long v27 = v48;
  *(void *)(v26 + 16) = v49;
  *(_OWORD *)uint64_t v26 = v27;
  ++*(_DWORD *)(v10 + 128);
  uint64_t v28 = *(void *)(v10 + 72);
  unint64_t v29 = v28 + a3;
  if (__CFADD__(v28, a3))
  {
    *(void *)(v10 + 72) = v29;
  }
  else
  {
    if (v29 > *(void *)(v10 + 80)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    bzero((void *)(*(void *)(v10 + 64) + v28), a3);
    *(void *)(v10 + 72) += a3;
  }
}

uint64_t llvm::MCObjectStreamer::emitCFIStartProcImpl(void *a1, uint64_t *a2)
{
  uint64_t v4 = (llvm::MCContext *)a1[1];
  uint64_t v8 = "tmp";
  __int16 v9 = 259;
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)&v8, 1);
  *a2 = TempSymbol;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, void))(*a1 + 192);

  return v6(a1, TempSymbol, 0);
}

uint64_t llvm::MCObjectStreamer::emitCFIEndProcImpl(void *a1, uint64_t a2)
{
  uint64_t v4 = (llvm::MCContext *)a1[1];
  uint64_t v8 = "tmp";
  __int16 v9 = 259;
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)&v8, 1);
  *(void *)(a2 + 8) = TempSymbol;
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, void))(*a1 + 192);

  return v6(a1, TempSymbol, 0);
}

int32x2_t llvm::MCObjectStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCStreamer::emitLabel(a1, a2, a3);
  int v5 = *(_DWORD *)(a2 + 8);
  if ((v5 & 8) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    *(_DWORD *)(a2 + 8) = v5 | 8;
    uint64_t v14 = a2;
    unint64_t v7 = *(uint64_t **)(v6 + 64);
    if ((unint64_t)v7 >= *(void *)(v6 + 72))
    {
      uint64_t v13 = v6;
      uint64_t v8 = sub_1CBC13470((void **)(v6 + 56), &v14);
      uint64_t v6 = v13;
    }
    else
    {
      *unint64_t v7 = a2;
      uint64_t v8 = v7 + 1;
    }
    *(void *)(v6 + 64) = v8;
  }
  __int16 v9 = *(uint64_t **)(a1 + 280);
  if (v9 == *(uint64_t **)(*(void *)(*(void *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 112)
    || (uint64_t v10 = *v9) == 0
    || *(unsigned char *)(v10 + 48) != 1
    || (uint64_t v11 = *(void *)(a1 + 272), *(_DWORD *)(v11 + 496)) && (*(unsigned char *)(v11 + 500) & 1) != 0)
  {
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
    llvm::MCObjectStreamer::addPendingLabel((llvm::MCSection *)a1, (llvm::MCSymbol *)a2);
  }
  else
  {
    *(void *)a2 = *(void *)a2 & 7 | v10;
    *(void *)(a2 + 24) = *(void *)(v10 + 72);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
  }

  return llvm::MCObjectStreamer::emitPendingAssignments((llvm::MCObjectStreamer *)a1, (llvm::MCSymbol *)a2);
}

int32x2_t llvm::MCObjectStreamer::emitPendingAssignments(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2)
{
  uint64_t v3 = sub_1CCBCB89C((uint64_t *)this + 65, (uint64_t)a2);
  if ((uint64_t *)(*((void *)this + 65) + 40 * *((unsigned int *)this + 134)) != v3)
  {
    int v5 = v3;
    uint64_t v6 = (uint64_t *)v3[1];
    uint64_t v7 = *((unsigned int *)v3 + 4);
    if (v7)
    {
      uint64_t v8 = &v6[2 * v7];
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v6[1];
        v6 += 2;
        (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(void *)this + 280))(this, v9, v10);
      }
      while (v6 != v8);
      uint64_t v6 = (uint64_t *)v5[1];
    }
    if (v6 != v5 + 3) {
      free(v6);
    }
    uint64_t *v5 = -8192;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)this + 528), (int32x2_t)0x1FFFFFFFFLL);
    *((int32x2_t *)this + 66) = result;
  }
  return result;
}

uint64_t *sub_1CCBCB89C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (!v3) {
    return (uint64_t *)(v2 + 40 * v3);
  }
  unsigned int v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int32x2_t result = (uint64_t *)(v2 + 40 * v5);
  uint64_t v6 = *result;
  if (*result != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v5 + v7++;
      unsigned int v5 = v8 & (v3 - 1);
      int32x2_t result = (uint64_t *)(v2 + 40 * v5);
      uint64_t v6 = *result;
      if (*result == a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 40 * v3);
  }
  return result;
}

BOOL llvm::MCObjectStreamer::changeSectionImpl(llvm::MCObjectStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  *(unsigned char *)(*((void *)this + 1) + 1512) = 0;
  BOOL v6 = llvm::MCAssembler::registerSection(*((void *)this + 34), (uint64_t)a2);
  unsigned int v7 = 0;
  uint64_t v11 = 0;
  if (a3)
  {
    uint64_t v9 = (const llvm::MCAssembler *)(*(uint64_t (**)(llvm::MCObjectStreamer *, void))(*(void *)this + 72))(this, 0);
    if (llvm::MCExpr::evaluateAsAbsolute(a3, &v11, v9))
    {
      unsigned int v7 = v11;
      if ((unint64_t)v11 <= 0x2000) {
        goto LABEL_2;
      }
      uint64_t v10 = "Subsection number out of range";
    }
    else
    {
      uint64_t v10 = "Cannot evaluate subsection number";
    }
    llvm::report_fatal_error((llvm *)v10, (const llvm::Twine *)1);
  }
LABEL_2:
  *((_DWORD *)this + 104) = v7;
  *((void *)this + 35) = llvm::MCSection::getSubsectionInsertionPoint(a2, v7);
  return v6;
}

int32x2_t llvm::MCObjectStreamer::emitAssignment(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  int v5 = *((_DWORD *)a2 + 2);
  if ((v5 & 8) == 0)
  {
    uint64_t v6 = *((void *)this + 34);
    *((_DWORD *)a2 + 2) = v5 | 8;
    uint64_t v12 = a2;
    unsigned int v7 = *(void **)(v6 + 64);
    if ((unint64_t)v7 >= *(void *)(v6 + 72))
    {
      uint64_t v10 = (const llvm::MCExpr *)a3;
      uint64_t v11 = v6;
      unsigned int v8 = sub_1CBC13470((void **)(v6 + 56), &v12);
      a3 = (const llvm::MCExpr **)v10;
      uint64_t v6 = v11;
    }
    else
    {
      *unsigned int v7 = a2;
      unsigned int v8 = v7 + 1;
    }
    *(void *)(v6 + 64) = v8;
  }
  llvm::MCStreamer::emitAssignment(this, a2, a3);

  return llvm::MCObjectStreamer::emitPendingAssignments(this, a2);
}

uint64_t llvm::MCObjectStreamer::emitInstruction(uint64_t a1, uint64_t a2, llvm::MCSection *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 120);
  if (v6) {
    unsigned int v7 = *(void **)(*(void *)(a1 + 112) + 32 * v6 - 32);
  }
  else {
    unsigned int v7 = 0;
  }
  if ((*(unsigned int (**)(void *))(*v7 + 16))(v7))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = (*(uint64_t (**)(void *))(*v7 + 24))(v7);
    __int16 v23 = 261;
    v22[0] = v12;
    v22[1] = v13;
    char v20 = " section '";
    __int16 v21 = 259;
    sub_1CB8F1E58(v22, (uint64_t *)&v20, (uint64_t)v24);
    uint64_t v14 = v7[25];
    uint64_t v15 = v7[26];
    __int16 v19 = 261;
    v18[0] = v14;
    v18[1] = v15;
    sub_1CB8F1E58(v24, v18, (uint64_t)v25);
    int v16 = "' cannot have instructions";
    __int16 v17 = 259;
    sub_1CB8F1E58(v25, (uint64_t *)&v16, (uint64_t)v26);
    return llvm::MCContext::reportError(v10, v11, (uint64_t)v26);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, llvm::MCSection *))(**(void **)(*(void *)(a1 + 272) + 8)
                                                                        + 32))(*(void *)(*(void *)(a1 + 272) + 8), a1, a2, a3);
    llvm::MCObjectStreamer::emitInstructionImpl((llvm::MCDwarfLineEntry *)a1, (long long *)a2, a3);
    unsigned int v8 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 272) + 8) + 40);
    return v8();
  }
}

void llvm::MCObjectStreamer::emitInstructionImpl(llvm::MCDwarfLineEntry *this, long long *a2, llvm::MCSection *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    unsigned int v7 = v6 - 1;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)a2 + 2);
      if (*(unsigned char *)(v9 + 16 * v7) == 5) {
        llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(v9 + 16 * v7 + 8));
      }
      --v7;
    }
    while (v8);
  }
  uint64_t v10 = *((unsigned int *)this + 30);
  if (v10) {
    uint64_t v11 = *(void *)(*((void *)this + 14) + 32 * v10 - 32);
  }
  else {
    uint64_t v11 = 0;
  }
  *(unsigned char *)(v11 + 44) |= 2u;
  uint64_t v12 = *((unsigned int *)this + 30);
  if (v12) {
    uint64_t v13 = *(llvm::MCStreamer **)(*((void *)this + 14) + 32 * v12 - 32);
  }
  else {
    uint64_t v13 = 0;
  }
  llvm::MCDwarfLineEntry::make(this, v13, a3);
  uint64_t v14 = *((void *)this + 34);
  uint64_t v15 = *(void *)(v14 + 8);
  if (((*(uint64_t (**)(uint64_t, long long *, llvm::MCSection *))(*(void *)v15 + 128))(v15, a2, a3) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15) & 1) == 0)
  {
    int v16 = *(void (**)(llvm::MCDwarfLineEntry *, long long *, llvm::MCSection *))(*(void *)this + 1296);
    __int16 v17 = this;
    __int16 v18 = a2;
    __int16 v19 = a3;
LABEL_14:
    v16(v17, v18, v19);
    return;
  }
  if ((*(unsigned char *)(v14 + 500) & 1) == 0 && (!*(_DWORD *)(v14 + 496) || !*(_DWORD *)(v11 + 36)))
  {
    int v16 = *(void (**)(llvm::MCDwarfLineEntry *, long long *, llvm::MCSection *))(*(void *)this + 1312);
    __int16 v17 = this;
    __int16 v18 = a2;
    __int16 v19 = a3;
    goto LABEL_14;
  }
  long long v20 = *a2;
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 6)) {
    sub_1CBD85368((uint64_t)v21, (uint64_t)(a2 + 1));
  }
  v22[128] = *((unsigned char *)a2 + 160);
  if ((*(unsigned int (**)(uint64_t, long long *, llvm::MCSection *))(*(void *)v15 + 128))(v15, &v20, a3))
  {
    do
      (*(void (**)(uint64_t, long long *, llvm::MCSection *))(*(void *)v15 + 152))(v15, &v20, a3);
    while (((*(uint64_t (**)(uint64_t, long long *, llvm::MCSection *))(*(void *)v15 + 128))(v15, &v20, a3) & 1) != 0);
  }
  (*(void (**)(llvm::MCDwarfLineEntry *, long long *, llvm::MCSection *))(*(void *)this + 1296))(this, &v20, a3);
  if (v21[0] != v22) {
    free(v21[0]);
  }
}

void llvm::MCObjectStreamer::emitInstToFragment()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void llvm::MCObjectStreamer::emitDwarfLocDirective(uint64_t a1, int a2, llvm::MCSection *a3, __int16 a4, char a5, char a6, int a7)
{
  int v11 = (int)a3;
  uint64_t v14 = *(unsigned int *)(a1 + 120);
  if (v14) {
    uint64_t v15 = *(llvm::MCStreamer **)(*(void *)(a1 + 112) + 32 * v14 - 32);
  }
  else {
    uint64_t v15 = 0;
  }
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v15, a3);
  uint64_t v16 = *(void *)(a1 + 8);
  *(_DWORD *)(v16 + 1496) = a2;
  *(_DWORD *)(v16 + 1500) = v11;
  *(_WORD *)(v16 + 1504) = a4;
  *(unsigned char *)(v16 + 1506) = a5;
  *(unsigned char *)(v16 + 1507) = a6;
  *(_DWORD *)(v16 + 1508) = a7;
  *(unsigned char *)(v16 + 1512) = 1;
}

void llvm::MCObjectStreamer::emitDwarfAdvanceLineAddr(llvm::MCObjectStreamer *this, uint64_t a2, const llvm::MCSymbol *a3, const llvm::MCSymbol *a4, uint64_t a5)
{
  if (a3)
  {
    unint64_t v8 = sub_1CCBCC780((uint64_t)this, (uint64_t)a4, (uint64_t)a3);
    uint64_t v9 = (uint64_t *)(*(uint64_t (**)(llvm::MCObjectStreamer *))(*(void *)this + 72))(this);
    long long v13 = 0uLL;
    int v15 = 0;
    unint64_t v14 = 0;
    if (*(unsigned char *)v8 == 1)
    {
      unint64_t v12 = *(void *)(v8 + 16);
    }
    else
    {
      if ((llvm::MCExpr::evaluateAsRelocatableImpl(v8, (uint64_t)&v13, v9, 0, 0, 0, 0) & 1) == 0 || v13 != 0) {
        operator new();
      }
      unint64_t v12 = v14;
    }
    llvm::MCDwarfLineAddr::Emit(this, *(unsigned __int16 *)(*((void *)this + 34) + 200) | (*(unsigned __int8 *)(*((void *)this + 34) + 202) << 16), a2, v12);
  }
  else
  {
    int v11 = *(unsigned __int16 *)(*((void *)this + 34) + 200) | (*(unsigned __int8 *)(*((void *)this + 34) + 202) << 16);
    (*(void (**)(llvm::MCObjectStreamer *, void, uint64_t))(*(void *)this + 520))(this, 0, 1);
    llvm::MCStreamer::emitULEB128IntValue(this, (int)a5 + 1, 0);
    (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(void *)this + 520))(this, 2, 1);
    llvm::MCStreamer::emitSymbolValue(this, a4, a5, 0);
    llvm::MCDwarfLineAddr::Emit(this, v11, a2, 0);
  }
}

unint64_t sub_1CCBCC780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(v5 + 272) += 24;
  uint64_t v6 = *(void *)(v5 + 192);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 24 > *(void *)(v5 + 200) - v6)
  {
    unsigned int v15 = *(_DWORD *)(v5 + 216) >> 7;
    if (v15 >= 0x1E) {
      LOBYTE(v15) = 30;
    }
    uint64_t v16 = 4096 << v15;
    unint64_t v7 = (unint64_t)operator new(4096 << v15, (std::align_val_t)8uLL);
    unsigned int v17 = *(_DWORD *)(v5 + 216);
    if (v17 >= *(_DWORD *)(v5 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v5 + 208) + 8 * v17) = v7;
    ++*(_DWORD *)(v5 + 216);
    *(void *)(v5 + 200) = v7 + v16;
  }
  else
  {
    unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 192) = v7 + 24;
  int v8 = *(unsigned __int8 *)(*(void *)(v5 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = a2;
  *(void *)(v5 + 272) += 24;
  uint64_t v9 = *(void *)(v5 + 192);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 24 > *(void *)(v5 + 200) - v9)
  {
    unsigned int v18 = *(_DWORD *)(v5 + 216) >> 7;
    if (v18 >= 0x1E) {
      LOBYTE(v18) = 30;
    }
    uint64_t v19 = 4096 << v18;
    unint64_t v10 = (unint64_t)operator new(4096 << v18, (std::align_val_t)8uLL);
    unsigned int v20 = *(_DWORD *)(v5 + 216);
    if (v20 >= *(_DWORD *)(v5 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v5 + 208) + 8 * v20) = v10;
    ++*(_DWORD *)(v5 + 216);
    *(void *)(v5 + 200) = v10 + v19;
  }
  else
  {
    unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 192) = v10 + 24;
  int v11 = *(unsigned __int8 *)(*(void *)(v5 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v10 = 2;
  *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = a3;
  *(void *)(v5 + 272) += 32;
  uint64_t v12 = *(void *)(v5 + 192);
  if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 32 > *(void *)(v5 + 200) - v12)
  {
    unsigned int v21 = *(_DWORD *)(v5 + 216) >> 7;
    if (v21 >= 0x1E) {
      LOBYTE(v21) = 30;
    }
    uint64_t v22 = 4096 << v21;
    unint64_t v13 = (unint64_t)operator new(4096 << v21, (std::align_val_t)8uLL);
    unsigned int v23 = *(_DWORD *)(v5 + 216);
    if (v23 >= *(_DWORD *)(v5 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v5 + 208) + 8 * v23) = v13;
    ++*(_DWORD *)(v5 + 216);
    *(void *)(v5 + 200) = v13 + v22;
  }
  else
  {
    unint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 192) = v13 + 32;
  *(unsigned char *)unint64_t v13 = 0;
  *(_DWORD *)(v13 + 1) = (*(unsigned __int8 *)(v13 + 4) << 24) | 0x12;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v10;
  return v13;
}

uint64_t llvm::MCObjectStreamer::emitBytes(uint64_t a1, const void *a2, llvm::MCSection *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 120);
  if (v6) {
    unint64_t v7 = *(llvm::MCStreamer **)(*(void *)(a1 + 112) + 32 * v6 - 32);
  }
  else {
    unint64_t v7 = 0;
  }
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v7, a3);
  uint64_t result = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  uint64_t v9 = result;
  uint64_t v10 = *(unsigned int *)(a1 + 120);
  if (!v10) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 112) + 32 * v10 - 32);
  if (!v11) {
    goto LABEL_8;
  }
  unint64_t v12 = *(void *)(result + 72);
  uint64_t v13 = *(unsigned int *)(a1 + 304);
  if (v13)
  {
    uint64_t v22 = *(llvm::MCSymbol ***)(a1 + 296);
    uint64_t v23 = 8 * v13;
    do
    {
      unsigned int v24 = *v22++;
      uint64_t result = llvm::MCSection::addPendingLabel(v11, v24, *(_DWORD *)(a1 + 416));
      v23 -= 8;
    }
    while (v23);
    *(_DWORD *)(a1 + 304) = 0;
    int v14 = *(_DWORD *)(a1 + 416);
    if (!v9)
    {
      uint64_t result = (uint64_t)llvm::MCSection::flushPendingLabels((_DWORD *)v11, 0, 0, v14);
      goto LABEL_8;
    }
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 416);
  }
  int v15 = *(_DWORD *)(v11 + 160);
  if (v15)
  {
    unsigned int v17 = *(_DWORD **)(v11 + 152);
    unsigned int v18 = v17;
    do
    {
      if (v18[2] == v14)
      {
        uint64_t v19 = *(unint64_t **)v18;
        *uint64_t v19 = **(void **)v18 & 7 | v9;
        v19[3] = v12;
        *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
        unsigned int v17 = *(_DWORD **)(v11 + 152);
        uint64_t v20 = *(unsigned int *)(v11 + 160);
        uint64_t v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
        if (v21)
        {
          uint64_t result = (uint64_t)memmove(v18, v18 + 4, v21 - 4);
          LODWORD(v20) = *(_DWORD *)(v11 + 160);
          unsigned int v17 = *(_DWORD **)(v11 + 152);
        }
        v18 -= 4;
        int v15 = v20 - 1;
        *(_DWORD *)(v11 + 160) = v15;
      }
      v18 += 4;
    }
    while (v18 != &v17[4 * v15]);
  }
LABEL_8:
  uint64_t v16 = *(void *)(v9 + 72);
  if (*(void *)(v9 + 80) >= (unint64_t)a3 + v16 && a3) {
    goto LABEL_10;
  }
  if (*(void *)(v9 + 80) < (unint64_t)a3 + v16) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a3)
  {
LABEL_10:
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v9 + 64) + v16), a2, (size_t)a3);
    uint64_t v16 = *(void *)(v9 + 72);
  }
  *(void *)(v9 + 72) = (char *)a3 + v16;
  return result;
}

void llvm::MCObjectStreamer::emitValueToAlignment(llvm::MCObjectStreamer *this)
{
}

uint64_t llvm::MCObjectStreamer::emitCodeAlignment(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = ((uint64_t (*)(void **, uint64_t, void, uint64_t, uint64_t))(*a1)[80])(a1, a2, 0, 1, a4);
  uint64_t v7 = *a1[35];
  *(unsigned char *)(v7 + 56) |= 1u;
  *(void *)(v7 + 80) = a3;
  return result;
}

void llvm::MCObjectStreamer::emitFill(uint64_t a1)
{
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 112) + 32 * v3 - 32);
    if (v4)
    {
      uint64_t v5 = DataFragment;
      uint64_t v6 = *(void *)(DataFragment + 72);
      uint64_t v7 = *(unsigned int *)(a1 + 304);
      if (v7)
      {
        int v15 = *(llvm::MCSymbol ***)(a1 + 296);
        uint64_t v16 = 8 * v7;
        do
        {
          unsigned int v17 = *v15++;
          llvm::MCSection::addPendingLabel(v4, v17, *(_DWORD *)(a1 + 416));
          v16 -= 8;
        }
        while (v16);
        *(_DWORD *)(a1 + 304) = 0;
        int v8 = *(_DWORD *)(a1 + 416);
        if (!v5)
        {
          llvm::MCSection::flushPendingLabels((_DWORD *)v4, 0, 0, *(_DWORD *)(a1 + 416));
          goto LABEL_6;
        }
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 416);
      }
      int v9 = *(_DWORD *)(v4 + 160);
      if (v9)
      {
        uint64_t v10 = *(_DWORD **)(v4 + 152);
        uint64_t v11 = v10;
        do
        {
          if (v11[2] == v8)
          {
            unint64_t v12 = *(uint64_t **)v11;
            uint64_t *v12 = **(void **)v11 & 7 | v5;
            v12[3] = v6;
            *((_DWORD *)v12 + 2) = v12[1] & 0xFFFFE3FF | 0x400;
            uint64_t v10 = *(_DWORD **)(v4 + 152);
            uint64_t v13 = *(unsigned int *)(v4 + 160);
            uint64_t v14 = (char *)&v10[4 * v13] - (char *)(v11 + 4);
            if (v14)
            {
              memmove(v11, v11 + 4, v14 - 4);
              LODWORD(v13) = *(_DWORD *)(v4 + 160);
              uint64_t v10 = *(_DWORD **)(v4 + 152);
            }
            v11 -= 4;
            int v9 = v13 - 1;
            *(_DWORD *)(v4 + 160) = v9;
          }
          v11 += 4;
        }
        while (v11 != &v10[4 * v9]);
      }
    }
  }
LABEL_6:
  operator new();
}

void llvm::MCObjectStreamer::finishImpl(llvm::MCContext **this)
{
  llvm::MCContext::RemapDebugPaths(this[1]);
  if (*((unsigned char *)this[1] + 1513)) {
    llvm::MCGenDwarfInfo::Emit((llvm::MCGenDwarfInfo *)this, v2);
  }
  llvm::MCDwarfLineTable::emit((llvm::MCStreamer *)this, *((unsigned __int16 *)this[34] + 100) | (*((unsigned __int8 *)this[34] + 202) << 16));
  uint64_t v3 = this[1];
  if (*((void *)v3 + 207)) {
    llvm::MCPseudoProbeSection::emit((llvm::MCPseudoProbeSection **)v3 + 205, (llvm::MCObjectStreamer *)this);
  }
  llvm::MCObjectStreamer::flushPendingLabels((uint64_t)this);
  llvm::MCObjectStreamer::resolvePendingFixups((llvm::MCObjectStreamer *)this);
  uint64_t v4 = this[34];

  llvm::MCAssembler::Finish(v4);
}

char *sub_1CCBCD1A4(int64x2_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unsigned int v25 = a1 + 1;
  if (v7 >> 59) {
    sub_1CB833614();
  }
  uint64_t v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v3];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v13 = *a3;
  *((void *)v11 + 2) = v12;
  *((void *)v11 + 3) = v13;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v14);
    unsigned int v17 = &v10[32 * v3];
  }
  else
  {
    unsigned int v17 = &v10[32 * v3];
    do
    {
      long long v18 = *(_OWORD *)(v14 - 32);
      *((void *)v17 - 2) = *(void *)(v14 - 16);
      *((_OWORD *)v17 - 2) = v18;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 32) = 0;
      *((void *)v17 - 1) = *(void *)(v14 - 8);
      v17 -= 32;
      v14 -= 32;
    }
    while (v14 != v15);
    int64x2_t v16 = *a1;
  }
  uint64_t v19 = v11 + 32;
  a1->i64[0] = (uint64_t)v17;
  a1->i64[1] = (uint64_t)(v11 + 32);
  int64x2_t v23 = v16;
  uint64_t v20 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v10[32 * v7];
  uint64_t v24 = v20;
  uint64_t v22 = v16.i64[0];
  sub_1CD573B00((uint64_t)&v22);
  return v19;
}

uint64_t sub_1CCBCD2E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v17 = 0;
  uint64_t result = sub_1CCBCD41C(a1, *a2, &v17);
  unint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)a1;
  if (result)
  {
    if (v8)
    {
      uint64_t v15 = a1 + 8;
      uint64_t v16 = 4;
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(unsigned int *)(a1 + 16);
    }
    char v14 = 0;
    uint64_t v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  unsigned int v9 = v8 >> 1;
  if (v8) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_18;
  }
  if (v10 + ~v9 - *(_DWORD *)(a1 + 4) <= v10 >> 3)
  {
LABEL_18:
    sub_1CD6B588C(a1, v10);
    unsigned int v17 = 0;
    uint64_t result = sub_1CCBCD41C(a1, *a2, &v17);
    unint64_t v7 = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *unint64_t v7 = *a2;
  uint64_t v11 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    uint64_t v12 = 4;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
  }
  uint64_t v13 = v11 + 8 * v12;
  char v14 = 1;
LABEL_11:
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 16) = v14;
  return result;
}

uint64_t sub_1CCBCD41C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_16;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1CCBCD4C8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    unsigned int v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    unsigned int v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CCBCD41C((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void *sub_1CCBCD584(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v3 = result + 1;
      int v4 = result + 5;
      goto LABEL_8;
    }
    uint64_t v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!v2)
      {
        int v5 = 0;
LABEL_10:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v3 = (void *)result[1];
      int v4 = &v3[v2];
      do
LABEL_8:
        *v3++ = -4096;
      while (v3 != v4);
      int v5 = *(_DWORD *)result & 1;
      goto LABEL_10;
    }
    return sub_1CD6B5A08(result);
  }
  return result;
}

uint64_t sub_1CCBCD600(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v4 = (void *)(a1 + 40 * v8);
    uint64_t v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        int v4 = (void *)(a1 + 40 * (v13 & v7));
        uint64_t v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        int v4 = v10;
      }
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_WORD *)(a3 + 1) || *(_WORD *)(a4 + 1)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a4 + 16);
  unint64_t AssociatedFragment = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    *(void *)uint64_t v8 = *(void *)v8 & 7 | AssociatedFragment;
  }
  if (!AssociatedFragment) {
    return 0;
  }
  unint64_t v11 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 && (*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v9 + 8) |= 4u;
    unint64_t v11 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
    *(void *)uint64_t v9 = *(void *)v9 & 7 | v11;
  }
  if (!v11) {
    return 0;
  }
  unint64_t v12 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v12 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    unint64_t v12 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    *(void *)uint64_t v8 = *(void *)v8 & 7 | v12;
  }
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v13 && (*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v9 + 8) |= 4u;
    unint64_t v13 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
    *(void *)uint64_t v9 = *(void *)v9 & 7 | v13;
  }
  if (!v13) {
    return 0;
  }
  char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40);

  return v14(a1, a2, v8, v9, a5);
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a4 + 8) |= 4u;
    *(void *)a4 = *(void *)a4 & 7 | llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);

  return v7(a1, a2, a3);
}

void llvm::MCPseudoProbeTable::emit(llvm::MCPseudoProbeTable *this, llvm::MCObjectStreamer *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)(v2 + 1656)) {
    llvm::MCPseudoProbeSection::emit((llvm::MCPseudoProbeSection **)(v2 + 1640), this);
  }
}

llvm::raw_ostream *llvm::MCPseudoProbeFuncDesc::print(llvm::MCPseudoProbeFuncDesc *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8250;
    *(_DWORD *)uint64_t v4 = 1145656647;
    *((void *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "GUID: ", 6uLL);
  }
  sub_1CD098D14(a2, *(void *)this, 0, 0, 0);
  uint64_t v5 = (_DWORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 540697965;
    _DWORD *v5 = 1835093536;
    *((void *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, " Name: ", 7uLL);
  }
  char v6 = *((unsigned char *)this + 39);
  if (v6 >= 0) {
    int v7 = (char *)this + 16;
  }
  else {
    int v7 = (const char *)*((void *)this + 2);
  }
  if (v6 >= 0) {
    size_t v8 = v6 & 0x7F;
  }
  else {
    size_t v8 = *((void *)this + 3);
  }
  llvm::raw_ostream::write(a2, v7, v8);
  uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v9)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v10 = *((void *)a2 + 4);
  }
  else
  {
    *uint64_t v9 = 10;
    uint64_t v10 = *((void *)a2 + 4) + 1;
    *((void *)a2 + 4) = v10;
  }
  if ((unint64_t)(*((void *)a2 + 3) - v10) > 5)
  {
    *(_WORD *)(v10 + 4) = 8250;
    *(_DWORD *)uint64_t v10 = 1752392008;
    *((void *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Hash: ", 6uLL);
  }
  uint64_t result = sub_1CD098D14(a2, *((void *)this + 1), 0, 0, 0);
  unint64_t v12 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v12)
  {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    unsigned char *v12 = 10;
    ++*((void *)a2 + 4);
  }
  return result;
}

unint64_t llvm::MCDecodedPseudoProbe::getInlineContext(unint64_t result, unint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = *(void *)(v4 + 80);
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    do
    {
      size_t v8 = sub_1CCBD0110(a3, v5);
      unint64_t v11 = (void *)v8[5];
      uint64_t v9 = v8 + 5;
      uint64_t v10 = v11;
      char v12 = *((unsigned char *)v9 + 23);
      int v13 = v12;
      if (v12 >= 0) {
        uint64_t v10 = v9;
      }
      uint64_t v14 = v12 & 0x7F;
      if (v13 < 0) {
        uint64_t v14 = v9[1];
      }
      *(void *)&long long v20 = v10;
      *((void *)&v20 + 1) = v14;
      int v21 = *(_DWORD *)(v4 + 88);
      uint64_t result = sub_1CCBCDC08(a2, &v20);
      uint64_t v4 = *(void *)(v4 + 72);
      unint64_t v5 = *(void *)(v4 + 80);
    }
    while (v5);
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    if (v7 != v15)
    {
      unint64_t v16 = *(void *)a2 + 24 * v7;
      unint64_t v17 = *(void *)a2 + 24 * v15;
      while (1)
      {
        v17 -= 24;
        if (v16 >= v17) {
          break;
        }
        long long v18 = *(_OWORD *)v16;
        *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
        *(_OWORD *)unint64_t v17 = v18;
        int v19 = *(_DWORD *)(v16 + 16);
        *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
        *(_DWORD *)(v17 + 16) = v19;
        v16 += 24;
      }
    }
  }
  return result;
}

unint64_t sub_1CCBCDC08(unint64_t result, long long *a2)
{
  unint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    long long v7 = *a2;
    int v8 = *((_DWORD *)a2 + 4);
    uint64_t result = sub_1CBA0E760(result, (unint64_t)&v7, 1);
    uint64_t v4 = *(void *)v2 + 24 * *(unsigned int *)(v2 + 8);
    long long v5 = *(_OWORD *)result;
    uint64_t v6 = *(void *)(result + 16);
  }
  else
  {
    uint64_t v4 = *(void *)result + 24 * v3;
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
  }
  *(void *)(v4 + 16) = v6;
  *(_OWORD *)uint64_t v4 = v5;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t llvm::MCDecodedPseudoProbe::getInlineContextStr(unint64_t a1, void *a2)
{
  v29[48] = *MEMORY[0x1E4F143B8];
  sub_1CBF4C1CC((uint64_t)v25);
  long long v27 = v29;
  uint64_t v28 = 0x1000000000;
  llvm::MCDecodedPseudoProbe::getInlineContext(a1, (unint64_t)&v27, a2);
  if (v28)
  {
    uint64_t v4 = (char *)v27 + 24 * v28;
    long long v5 = (size_t *)((char *)v27 + 8);
    while (1)
    {
      std::stringbuf::str();
      size_t v6 = v24 >= 0 ? HIBYTE(v24) : v23;
      if ((SHIBYTE(v24) & 0x80000000) == 0) {
        break;
      }
      operator delete(__p);
      if (v6) {
        goto LABEL_8;
      }
LABEL_9:
      long long v7 = v5 - 1;
      int v8 = (const void *)*(v5 - 1);
      if (v8)
      {
        size_t v9 = *v5;
        if (*v5 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v9 >= 0x17)
        {
          uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v14 = v9 | 7;
          }
          uint64_t v15 = v14 + 1;
          p_p = operator new(v14 + 1);
          size_t v23 = v9;
          int64_t v24 = v15 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v24) = *v5;
          p_p = &__p;
          if (!v9) {
            goto LABEL_21;
          }
        }
        memmove(p_p, v8, v9);
LABEL_21:
        *((unsigned char *)p_p + v9) = 0;
        char v13 = HIBYTE(v24);
        char v12 = (void **)__p;
        uint64_t v11 = v23;
        goto LABEL_22;
      }
      uint64_t v11 = 0;
      char v12 = 0;
      char v13 = 0;
      std::string __p = 0;
      size_t v23 = 0;
      int64_t v24 = 0;
LABEL_22:
      int v16 = v13;
      if (v13 >= 0) {
        unint64_t v17 = &__p;
      }
      else {
        unint64_t v17 = v12;
      }
      uint64_t v18 = v13 & 0x7F;
      if (v16 >= 0) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = v11;
      }
      long long v20 = sub_1CBF435C4(v25, (uint64_t)v17, v19);
      sub_1CBF435C4(v20, (uint64_t)":", 1);
      std::ostream::operator<<();
      if (SHIBYTE(v24) < 0) {
        operator delete(__p);
      }
      v5 += 3;
      if (v7 + 3 == (size_t *)v4) {
        goto LABEL_31;
      }
    }
    if (!v6) {
      goto LABEL_9;
    }
LABEL_8:
    sub_1CBF435C4(v25, (uint64_t)" @ ", 3);
    goto LABEL_9;
  }
LABEL_31:
  std::stringbuf::str();
  if (v27 != v29) {
    free(v27);
  }
  sub_1CD45577C((uint64_t)v25, MEMORY[0x1E4FBA418]);
  return MEMORY[0x1D25D9C00](&v26);
}

void llvm::MCDecodedPseudoProbe::print(unint64_t a1, llvm::raw_ostream *this, void *a3, int a4)
{
  uint64_t v8 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v8) > 5)
  {
    *(_WORD *)(v8 + 4) = 8250;
    *(_DWORD *)uint64_t v8 = 1129207110;
    *((void *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "FUNC: ", 6uLL);
  }
  unint64_t v9 = *(void *)a1;
  if (!a4)
  {
    sub_1CD098D14(this, v9, 0, 0, 0);
    long long v20 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) == v20)
    {
      llvm::raw_ostream::write(this, " ", 1uLL);
    }
    else
    {
      *long long v20 = 32;
      ++*((void *)this + 4);
    }
    goto LABEL_33;
  }
  uint64_t v10 = sub_1CCBD0110(a3, v9);
  char v13 = (const void *)v10[5];
  uint64_t v11 = v10 + 5;
  char v12 = v13;
  char v14 = *((unsigned char *)v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = v12;
  }
  if (!v15)
  {
    size_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 0;
    long long __dst = 0;
    size_t v44 = 0;
    int64_t v45 = 0;
    goto LABEL_23;
  }
  int v16 = v14;
  size_t v17 = v14 & 0x7F;
  if (v16 >= 0) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v11[1];
  }
  if (v18 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    size_t v44 = v18;
    int64_t v45 = v25 | 0x8000000000000000;
    long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v45) = v18;
    p_dst = (void **)&__dst;
    if (!v18) {
      goto LABEL_22;
    }
  }
  memmove(p_dst, v15, v18);
LABEL_22:
  *((unsigned char *)p_dst + v18) = 0;
  char v23 = HIBYTE(v45);
  uint64_t v22 = (const char *)__dst;
  size_t v21 = v44;
LABEL_23:
  BOOL v26 = v23 < 0;
  if (v23 >= 0) {
    long long v27 = (const char *)&__dst;
  }
  else {
    long long v27 = v22;
  }
  size_t v28 = v23 & 0x7F;
  if (v26) {
    size_t v29 = v21;
  }
  else {
    size_t v29 = v28;
  }
  llvm::raw_ostream::write(this, v27, v29);
  BOOL v30 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v30)
  {
    llvm::raw_ostream::write(this, " ", 1uLL);
  }
  else
  {
    *BOOL v30 = 32;
    ++*((void *)this + 4);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__dst);
  }
LABEL_33:
  uint64_t v31 = (_DWORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v31 > 6uLL)
  {
    *(_DWORD *)((char *)v31 + 3) = 540702821;
    _DWORD *v31 = 1701080649;
    *((void *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "Index: ", 7uLL);
  }
  sub_1CD098D14(this, *(void *)(a1 + 8), 0, 0, 0);
  size_t v32 = (_WORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v32 > 1uLL)
  {
    *size_t v32 = 8224;
    uint64_t v33 = *((void *)this + 4) + 2;
    *((void *)this + 4) = v33;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    uint64_t v33 = *((void *)this + 4);
  }
  if ((unint64_t)(*((void *)this + 3) - v33) > 5)
  {
    *(_WORD *)(v33 + 4) = 8250;
    *(_DWORD *)uint64_t v33 = 1701869908;
    uint64_t v34 = (_WORD *)(*((void *)this + 4) + 6);
    *((void *)this + 4) = v34;
  }
  else
  {
    llvm::raw_ostream::write(this, "Type: ", 6uLL);
    uint64_t v34 = (_WORD *)*((void *)this + 4);
  }
  uint64_t v35 = off_1E684B438[*(unsigned __int8 *)(a1 + 17)];
  size_t v36 = strlen(v35);
  size_t v37 = v36;
  if (v36 <= *((void *)this + 3) - (void)v34)
  {
    if (v36)
    {
      memcpy(v34, v35, v36);
      uint64_t v34 = (_WORD *)(*((void *)this + 4) + v37);
      *((void *)this + 4) = v34;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v35, v36);
    uint64_t v34 = (_WORD *)*((void *)this + 4);
  }
  if (*((void *)this + 3) - (void)v34 > 1uLL)
  {
    *uint64_t v34 = 8224;
    *((void *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
  }
  llvm::MCDecodedPseudoProbe::getInlineContextStr(a1, a3);
  size_t v38 = HIBYTE(v45) & 0x7F;
  if (v45 < 0) {
    size_t v38 = v44;
  }
  if (v38)
  {
    uint64_t v39 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v39) > 0xA)
    {
      *(_DWORD *)(v39 + 7) = 541073466;
      *(void *)uint64_t v39 = *(void *)"Inlined: @ ";
      *((void *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, "Inlined: @ ", 0xBuLL);
    }
    if (v45 >= 0) {
      uint64_t v40 = (const char *)&__dst;
    }
    else {
      uint64_t v40 = (const char *)__dst;
    }
    if (v45 >= 0) {
      size_t v41 = HIBYTE(v45) & 0x7F;
    }
    else {
      size_t v41 = v44;
    }
    llvm::raw_ostream::write(this, v40, v41);
  }
  __int16 v42 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v42)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *__int16 v42 = 10;
    ++*((void *)this + 4);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__dst);
  }
}

const std::error_category *llvm::MCPseudoProbeDecoder::readString@<X0>(llvm::MCPseudoProbeDecoder *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 23);
  unint64_t v5 = v4 + a2;
  if (v5 <= *((void *)this + 24))
  {
    uint64_t result = (const std::error_category *)a2;
    *((void *)this + 23) = v5;
    char v7 = *(unsigned char *)(a3 + 16) & 0xFE;
  }
  else
  {
    uint64_t result = std::system_category();
    uint64_t v4 = 0;
    char v7 = *(unsigned char *)(a3 + 16) | 1;
  }
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::MCPseudoProbeDecoder::buildGUID2FuncDescMap(llvm::MCPseudoProbeDecoder *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = &a2[a3];
  *((void *)this + 23) = a2;
  *((void *)this + 24) = &a2[a3];
  if (a3 < 1) {
    return 1;
  }
  unint64_t v5 = (void *)((char *)this + 16);
  while (1)
  {
    size_t v6 = a2 + 8;
    if (a2 + 8 > v3) {
      break;
    }
    unint64_t v9 = *(void *)a2;
    char v7 = a2 + 16;
    unint64_t v8 = v9;
    *((void *)this + 23) = v6;
    if (v7 > v3) {
      break;
    }
    uint64_t v10 = *(void *)v6;
    *((void *)this + 23) = v7;
    sub_1CCBCE8FC((std::error_category *)&__len, (uint64_t)this);
    if (v48) {
      return 0;
    }
    size_t v11 = __len;
    unint64_t v12 = *((void *)this + 23);
    char v13 = (char *)(v12 + __len);
    if ((unint64_t)v13 > *((void *)this + 24)) {
      break;
    }
    *((void *)this + 23) = v13;
    *(void *)&long long v44 = v8;
    *((void *)&v44 + 1) = v10;
    if (v11 >= 0x17)
    {
      if ((v11 | 7) == 0x17) {
        uint64_t v15 = (v11 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v15 = v11 | 7;
      }
      p_p = (long long *)operator new(v15 + 1);
      *((void *)&__p + 1) = v11;
      uint64_t v46 = v15 - 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&long long __p = p_p;
    }
    else
    {
      HIBYTE(v46) = v11;
      p_p = &__p;
      if (!v11) {
        goto LABEL_15;
      }
    }
    memmove(p_p, (const void *)v12, v11);
LABEL_15:
    *((unsigned char *)p_p + v11) = 0;
    unint64_t v16 = *((void *)this + 1);
    if (v16)
    {
      uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        unint64_t v12 = v8;
        if (v16 <= v8) {
          unint64_t v12 = v8 % v16;
        }
      }
      else
      {
        unint64_t v12 = (v16 - 1) & v8;
      }
      size_t v18 = *(void **)(*(void *)this + 8 * v12);
      if (v18)
      {
        for (int i = (void *)*v18; i; int i = (void *)*i)
        {
          unint64_t v20 = i[1];
          if (v20 == v8)
          {
            if (i[2] == v8) {
              goto LABEL_87;
            }
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v20 >= v16) {
                v20 %= v16;
              }
            }
            else
            {
              v20 &= v16 - 1;
            }
            if (v20 != v12) {
              break;
            }
          }
        }
      }
    }
    size_t v21 = (char *)operator new(0x40uLL);
    *(void *)size_t v21 = 0;
    *((void *)v21 + 1) = v8;
    *((void *)v21 + 2) = v8;
    *(_OWORD *)(v21 + 24) = v44;
    *(_OWORD *)(v21 + 40) = __p;
    *((void *)v21 + 7) = v46;
    long long __p = 0uLL;
    uint64_t v46 = 0;
    float v22 = (float)(unint64_t)(*((void *)this + 3) + 1);
    float v23 = *((float *)this + 8);
    if (!v16 || (float)(v23 * (float)v16) < v22)
    {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3) {
        BOOL v24 = 1;
      }
      unint64_t v25 = v24 | (2 * v16);
      unint64_t v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      else {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v16 = *((void *)this + 1);
      }
      if (*(void *)&prime <= v16)
      {
        if (*(void *)&prime < v16)
        {
          unint64_t v34 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
          if (v16 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
          {
            unint64_t v34 = std::__next_prime(v34);
          }
          else
          {
            uint64_t v36 = 1 << -(char)__clz(v34 - 1);
            if (v34 >= 2) {
              unint64_t v34 = v36;
            }
          }
          if (*(void *)&prime <= v34) {
            int8x8_t prime = (int8x8_t)v34;
          }
          if (*(void *)&prime >= v16)
          {
            unint64_t v16 = *((void *)this + 1);
          }
          else
          {
            if (prime) {
              goto LABEL_43;
            }
            __int16 v42 = *(void **)this;
            *(void *)this = 0;
            if (v42) {
              operator delete(v42);
            }
            unint64_t v16 = 0;
            *((void *)this + 1) = 0;
          }
        }
      }
      else
      {
LABEL_43:
        if (*(void *)&prime >> 61) {
          sub_1CB833614();
        }
        size_t v28 = operator new(8 * *(void *)&prime);
        size_t v29 = *(void **)this;
        *(void *)this = v28;
        if (v29) {
          operator delete(v29);
        }
        uint64_t v30 = 0;
        *((int8x8_t *)this + 1) = prime;
        do
          *(void *)(*(void *)this + 8 * v30++) = 0;
        while (*(void *)&prime != v30);
        uint64_t v31 = (void *)*v5;
        if (*v5)
        {
          unint64_t v32 = v31[1];
          uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            if (v32 >= *(void *)&prime) {
              v32 %= *(void *)&prime;
            }
          }
          else
          {
            v32 &= *(void *)&prime - 1;
          }
          *(void *)(*(void *)this + 8 * v32) = v5;
          size_t v37 = (void *)*v31;
          if (*v31)
          {
            do
            {
              unint64_t v38 = v37[1];
              if (v33.u32[0] > 1uLL)
              {
                if (v38 >= *(void *)&prime) {
                  v38 %= *(void *)&prime;
                }
              }
              else
              {
                v38 &= *(void *)&prime - 1;
              }
              if (v38 != v32)
              {
                if (!*(void *)(*(void *)this + 8 * v38))
                {
                  *(void *)(*(void *)this + 8 * v38) = v31;
                  goto LABEL_68;
                }
                void *v31 = *v37;
                void *v37 = **(void **)(*(void *)this + 8 * v38);
                **(void **)(*(void *)this + 8 * v38) = v37;
                size_t v37 = v31;
              }
              unint64_t v38 = v32;
LABEL_68:
              uint64_t v31 = v37;
              size_t v37 = (void *)*v37;
              unint64_t v32 = v38;
            }
            while (v37);
          }
        }
        unint64_t v16 = (unint64_t)prime;
      }
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v16 <= v8) {
          unint64_t v12 = v8 % v16;
        }
        else {
          unint64_t v12 = v8;
        }
      }
      else
      {
        unint64_t v12 = (v16 - 1) & v8;
      }
    }
    int8x8_t v39 = *(int8x8_t *)this;
    uint64_t v40 = *(void **)(*(void *)this + 8 * v12);
    if (v40)
    {
      *(void *)size_t v21 = *v40;
    }
    else
    {
      *(void *)size_t v21 = *v5;
      void *v5 = v21;
      *(void *)(*(void *)&v39 + 8 * v12) = v5;
      if (!*(void *)v21) {
        goto LABEL_86;
      }
      unint64_t v41 = *(void *)(*(void *)v21 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v41 >= v16) {
          v41 %= v16;
        }
      }
      else
      {
        v41 &= v16 - 1;
      }
      uint64_t v40 = (void *)(*(void *)this + 8 * v41);
    }
    *uint64_t v40 = v21;
LABEL_86:
    ++*((void *)this + 3);
LABEL_87:
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)__p);
    }
    a2 = (const unsigned __int8 *)*((void *)this + 23);
    unsigned int v3 = (const unsigned __int8 *)*((void *)this + 24);
    if (a2 >= v3) {
      return 1;
    }
  }
  std::system_category();
  return 0;
}

std::error_category *sub_1CCBCE8FC(std::error_category *result, uint64_t a2)
{
  unint64_t v2 = result;
  unint64_t v3 = 0;
  unsigned int v4 = 0;
  unint64_t v5 = *(char **)(a2 + 184);
  do
  {
    if (!v5 || (char v6 = *v5, v7 = *v5 & 0x7F, v4 >= 0x40) && (*v5 & 0x7F) != 0 || (unint64_t)(v7 << v4) >> v4 != v7)
    {
      LODWORD(v3) = 0;
      goto LABEL_10;
    }
    v3 += v7 << v4;
    v4 += 7;
    ++v5;
  }
  while (v6 < 0);
  if (HIDWORD(v3)) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v8 = *(void *)(a2 + 184) + v5 - *(void *)(a2 + 184);
  if (v8 > *(void *)(a2 + 192))
  {
LABEL_11:
    uint64_t result = (std::error_category *)std::system_category();
    LOBYTE(v2[2].__vftable) |= 1u;
    v2->__vftable = 0;
    v2[1].__vftable = (std::error_category_vtbl *)result;
    return result;
  }
  *(void *)(a2 + 184) = v8;
  LOBYTE(result[2].__vftable) &= ~1u;
  LODWORD(result->__vftable) = v3;
  return result;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 80;
  if (a1 + 80 != a2)
  {
    sub_1CCBCE8FC(v38, a1);
    if (v39) {
      return 0;
    }
  }
  unint64_t v9 = *(unint64_t **)(a1 + 184);
  uint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > *(void *)(a1 + 192))
  {
LABEL_4:
    std::system_category();
    return 0;
  }
  unint64_t v11 = *v9;
  *(void *)(a1 + 184) = v10;
  unint64_t v33 = v11;
  if (v8 != a2 || !a4[3])
  {
    if (!a2) {
      goto LABEL_12;
    }
LABEL_11:
    operator new();
  }
  unint64_t v12 = sub_1CC7C03C0(a4, &v33);
  if (a2 && v12) {
    goto LABEL_11;
  }
LABEL_12:
  sub_1CCBCE8FC(v38, a1);
  if (v39) {
    return 0;
  }
  uint64_t v13 = LODWORD(v38[0].__vftable);
  sub_1CCBCE8FC(&v36, a1);
  if (v37) {
    return 0;
  }
  if (v13)
  {
    uint64_t v14 = 0;
    do
    {
      sub_1CCBCE8FC(&v34, a1);
      if (v35) {
        return 0;
      }
      unint64_t v16 = *(char **)(a1 + 184);
      unint64_t v15 = *(void *)(a1 + 192);
      uint8x8_t v17 = (uint64_t *)(v16 + 1);
      if ((unint64_t)(v16 + 1) > v15) {
        goto LABEL_4;
      }
      int v18 = *v16;
      *(void *)(a1 + 184) = v17;
      if (v18 < 0)
      {
        uint64_t v21 = 0;
        unsigned int v22 = 0;
        float v23 = v16 + 1;
        do
        {
          char v24 = *v23;
          uint64_t v25 = *v23 & 0x7F;
          if (v22 >= 0x40)
          {
            if (((v21 >> 63) & 0x7F) != v25) {
              goto LABEL_32;
            }
          }
          else if (v22 == 63 && v25 != 127 && v25 != 0)
          {
LABEL_32:
            uint64_t v27 = 0;
            goto LABEL_39;
          }
          v21 |= v25 << v22;
          v22 += 7;
          ++v23;
        }
        while (v24 < 0);
        BOOL v28 = (v24 & 0x40) == 0 || v22 > 0x3F;
        uint64_t v29 = -1 << v22;
        if (v28) {
          uint64_t v29 = 0;
        }
        uint64_t v27 = v21 | v29;
LABEL_39:
        uint64_t v30 = (char *)v17 + (v23 - v17);
        if ((unint64_t)v30 > v15) {
          goto LABEL_4;
        }
        *(void *)(a1 + 184) = v30;
        uint64_t v20 = *a3 + v27;
      }
      else
      {
        uint64_t v19 = v16 + 9;
        if ((unint64_t)v19 > v15) {
          goto LABEL_4;
        }
        uint64_t v20 = *v17;
        *(void *)(a1 + 184) = v19;
      }
      *a3 = v20;
    }
    while (++v14 != v13);
  }
  for (int i = (int)v36.__vftable; i; --i)
    llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(a1, 0, a3, a4);
  return 1;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + 192) = a2 + a3;
  uint64_t v8 = 0;
  if (a3 >= 1)
  {
    uint64_t v6 = a1 + 80;
    do
      llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(a1, v6, &v8, a4);
    while (*(void *)(a1 + 184) < *(void *)(a1 + 192));
  }
  return 1;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(llvm::MCPseudoProbeDecoder *this, const unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v11 = 1065353216;
  *((void *)this + 23) = a2;
  *((void *)this + 24) = &a2[a3];
  uint64_t v12 = 0;
  if (a3 > 0)
  {
    unsigned int v4 = (char *)this + 80;
    do
      llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap((uint64_t)this, (uint64_t)v4, &v12, v9);
    while (*((void *)this + 23) < *((void *)this + 24));
    unint64_t v5 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v6 = (void *)*v5;
        operator delete(v5);
        unint64_t v5 = v6;
      }
      while (v6);
    }
  }
  uint64_t v7 = v9[0];
  v9[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  return 1;
}

void llvm::MCPseudoProbeDecoder::printGUID2FuncDescMap(llvm::MCPseudoProbeDecoder *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 171598707;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Pseudo Probe Desc:\n";
    *((void *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Pseudo Probe Desc:\n", 0x13uLL);
  }
  unint64_t v5 = (uint64_t *)*((void *)this + 2);
  char v24 = 0;
  uint64_t v25 = 0;
  float v23 = &v24;
  if (!v5) {
    goto LABEL_44;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v24;
  while (1)
  {
    uint64_t v8 = &v24;
    if (v7 == &v24) {
      goto LABEL_11;
    }
    unint64_t v9 = v6;
    uint64_t v10 = &v24;
    if (v6)
    {
      do
      {
        uint64_t v8 = (uint64_t **)v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v8 = (uint64_t **)v10[2];
        BOOL v12 = *v8 == (uint64_t *)v10;
        uint64_t v10 = v8;
      }
      while (v12);
    }
    unint64_t v11 = v5[2];
    if ((unint64_t)v8[4] < v11)
    {
LABEL_11:
      BOOL v12 = v6 == 0;
      if (v6) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = &v24;
      }
      if (v6) {
        uint64_t v14 = (uint64_t ***)v8;
      }
      else {
        uint64_t v14 = &v23;
      }
      if (v12) {
        unint64_t v15 = &v24;
      }
      else {
        unint64_t v15 = v8 + 1;
      }
      if (v14[1]) {
        goto LABEL_35;
      }
LABEL_29:
      uint8x8_t v17 = (char *)operator new(0x50uLL);
      *((void *)v17 + 4) = v5[2];
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(v5 + 3);
      int v18 = v17 + 56;
      if (*((char *)v5 + 63) < 0)
      {
        sub_1CB8BDF7C((uint64_t)v18, (const void *)v5[5], v5[6]);
      }
      else
      {
        long long v19 = *(_OWORD *)(v5 + 5);
        *((void *)v17 + 9) = v5[7];
        _OWORD *v18 = v19;
      }
      *(void *)uint8x8_t v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v13;
      *unint64_t v15 = (uint64_t *)v17;
      if (*v23)
      {
        float v23 = (uint64_t **)*v23;
        uint8x8_t v17 = (char *)*v15;
      }
      sub_1CB8358B8(v24, (uint64_t *)v17);
      ++v25;
      goto LABEL_35;
    }
    unint64_t v15 = &v24;
    uint64_t v13 = &v24;
    if (!v6) {
      goto LABEL_29;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v6;
        unint64_t v16 = v6[4];
        if (v16 <= v11) {
          break;
        }
        uint64_t v6 = *v13;
        unint64_t v15 = v13;
        if (!*v13) {
          goto LABEL_29;
        }
      }
      if (v16 >= v11) {
        break;
      }
      uint64_t v6 = v13[1];
      if (!v6)
      {
        unint64_t v15 = v13 + 1;
        goto LABEL_29;
      }
    }
LABEL_35:
    unint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      break;
    }
    uint64_t v7 = v23;
    uint64_t v6 = v24;
  }
  uint64_t v20 = (uint64_t *)v23;
  if (v23 != &v24)
  {
    do
    {
      llvm::MCPseudoProbeFuncDesc::print((llvm::MCPseudoProbeFuncDesc *)(v20 + 5), a2);
      uint64_t v21 = (uint64_t *)v20[1];
      if (v21)
      {
        do
        {
          unsigned int v22 = (uint64_t **)v21;
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned int v22 = (uint64_t **)v20[2];
          BOOL v12 = *v22 == v20;
          uint64_t v20 = (uint64_t *)v22;
        }
        while (!v12);
      }
      uint64_t v20 = (uint64_t *)v22;
    }
    while (v22 != &v24);
  }
LABEL_44:
  sub_1CCBD01C0((char *)v24);
}

void llvm::MCPseudoProbeDecoder::printProbeForAddress(int8x8_t *this, llvm::raw_ostream *a2, unint64_t a3)
{
  int8x8_t v3 = this[6];
  if (v3)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = a3;
      if (*(void *)&v3 <= a3) {
        unint64_t v7 = a3 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v7 = (*(void *)&v3 - 1) & a3;
    }
    uint64_t v8 = *(void **)(*(void *)&this[5] + 8 * v7);
    if (v8)
    {
      for (int i = (void *)*v8; i; int i = (void *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == a3)
        {
          if (i[2] == a3)
          {
            unint64_t v11 = i + 3;
            BOOL v12 = (void *)i[4];
            if (v12 != i + 3)
            {
              do
              {
                uint64_t v13 = *((void *)a2 + 4);
                if ((unint64_t)(*((void *)a2 + 3) - v13) > 9)
                {
                  *(_WORD *)(v13 + 8) = 2362;
                  *(void *)uint64_t v13 = *(void *)" [Probe]:\t";
                  *((void *)a2 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(a2, " [Probe]:\t", 0xAuLL);
                }
                llvm::MCDecodedPseudoProbe::print((unint64_t)(v12 + 2), a2, this, 1);
                BOOL v12 = (void *)v12[1];
              }
              while (v12 != v11);
            }
            return;
          }
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v10 >= *(void *)&v3) {
              v10 %= *(void *)&v3;
            }
          }
          else
          {
            v10 &= *(void *)&v3 - 1;
          }
          if (v10 != v7) {
            return;
          }
        }
      }
    }
  }
}

void llvm::MCPseudoProbeDecoder::printProbesForAllAddresses(int8x8_t *this, llvm::raw_ostream *a2)
{
  unint64_t v2 = (void *)this[7];
  if (!v2)
  {
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
    return;
  }
  int8x8_t v3 = a2;
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint8x8_t v6 = 0;
  do
  {
    unint64_t v7 = v2[2];
    unint64_t v32 = &v32;
    unint64_t v33 = &v32;
    uint64_t v8 = v2[4];
    if ((void *)v8 == v2 + 3)
    {
      uint64_t v10 = 0;
    }
    else
    {
      unint64_t v9 = v6;
      uint64_t v10 = 0;
      unint64_t v11 = &v32;
      do
      {
        BOOL v12 = v11;
        unint64_t v11 = operator new(0x38uLL);
        *unint64_t v11 = 0;
        v11[1] = 0;
        uint64_t v13 = *(void *)(v8 + 48);
        long long v14 = *(_OWORD *)(v8 + 32);
        *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 16);
        *((_OWORD *)v11 + 2) = v14;
        v11[6] = v13;
        *unint64_t v11 = v12;
        v11[1] = &v32;
        v12[1] = v11;
        ++v10;
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while ((void *)v8 != v2 + 3);
      unint64_t v32 = v11;
      uint8x8_t v6 = v9;
      int8x8_t v3 = a2;
    }
    uint64_t v34 = v10;
    if (v5 < v6)
    {
      *v5++ = v7;
      if (!v10) {
        goto LABEL_29;
      }
LABEL_27:
      float v23 = v32;
      unsigned int v22 = v33;
      uint64_t v24 = *v33;
      *(void *)(v24 + 8) = v32[1];
      *(void *)v23[1] = v24;
      uint64_t v34 = 0;
      if (v22 != &v32)
      {
        do
        {
          uint64_t v25 = (void *)v22[1];
          operator delete(v22);
          unsigned int v22 = v25;
        }
        while (v25 != &v32);
      }
      goto LABEL_29;
    }
    uint64_t v15 = v5 - v4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      abort();
    }
    if (((char *)v6 - (char *)v4) >> 2 > v16) {
      unint64_t v16 = ((char *)v6 - (char *)v4) >> 2;
    }
    if ((unint64_t)((char *)v6 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_1CB833614();
      }
      int v18 = (char *)operator new(8 * v17);
    }
    else
    {
      int v18 = 0;
    }
    long long v19 = (unint64_t *)&v18[8 * v15];
    *long long v19 = v7;
    uint64_t v20 = v19 + 1;
    while (v5 != v4)
    {
      unint64_t v21 = *--v5;
      *--long long v19 = v21;
    }
    uint8x8_t v6 = (unint64_t *)&v18[8 * v17];
    if (v4)
    {
      operator delete(v4);
      uint64_t v10 = v34;
    }
    uint64_t v4 = v19;
    unint64_t v5 = v20;
    if (v10) {
      goto LABEL_27;
    }
LABEL_29:
    unint64_t v2 = (void *)*v2;
  }
  while (v2);
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  if (v4 != v5)
  {
    unint64_t v26 = v4;
    do
    {
      unint64_t v27 = *v26;
      uint64_t v28 = *((void *)v3 + 4);
      if ((unint64_t)(*((void *)v3 + 3) - v28) > 8)
      {
        *(unsigned char *)(v28 + 8) = 9;
        *(void *)uint64_t v28 = *(void *)"Address:\t";
        *((void *)v3 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v3, "Address:\t", 9uLL);
      }
      sub_1CD098D14(v3, v27, 0, 0, 0);
      uint64_t v29 = (unsigned char *)*((void *)v3 + 4);
      if (*((unsigned char **)v3 + 3) == v29)
      {
        llvm::raw_ostream::write(v3, "\n", 1uLL);
      }
      else
      {
        unsigned char *v29 = 10;
        ++*((void *)v3 + 4);
      }
      llvm::MCPseudoProbeDecoder::printProbeForAddress(this, v3, v27);
      ++v26;
    }
    while (v26 != v5);
  }
  if (v4) {
    operator delete(v4);
  }
}

uint64_t llvm::MCPseudoProbeDecoder::getCallProbeForAddr(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[6];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*(void *)&this[5] + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint8x8_t v6 = (void *)*v5;
  if (!v6) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= *(void *)&v2) {
        v7 %= *(void *)&v2;
      }
    }
    else
    {
      v7 &= *(void *)&v2 - 1;
    }
    if (v7 != v4) {
      return 0;
    }
LABEL_16:
    uint8x8_t v6 = (void *)*v6;
    if (!v6) {
      return 0;
    }
  }
  if (v6[2] != a2) {
    goto LABEL_16;
  }
  uint64_t v9 = v6[4];
  if ((void *)v9 == v6 + 3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*(unsigned __int8 *)(v9 + 33) - 1 < 2) {
      uint64_t result = v9 + 16;
    }
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while ((void *)v9 != v6 + 3);
  return result;
}

void *llvm::MCPseudoProbeDecoder::getFuncDescForGUID(llvm::MCPseudoProbeDecoder *this, unint64_t a2)
{
  return sub_1CCBD0110(this, a2) + 3;
}

unint64_t llvm::MCPseudoProbeDecoder::getInlineContextForProbe(void *a1, unint64_t *a2, unint64_t a3, int a4)
{
  unint64_t result = llvm::MCDecodedPseudoProbe::getInlineContext((unint64_t)a2, a3, a1);
  if (a4)
  {
    uint64_t v9 = sub_1CCBD0110(a1, *a2);
    unint64_t v10 = a2[1];
    uint64_t v13 = (void *)v9[5];
    unint64_t v11 = v9 + 5;
    BOOL v12 = v13;
    char v14 = *((unsigned char *)v11 + 23);
    int v15 = v14;
    if (v14 >= 0) {
      BOOL v12 = v11;
    }
    uint64_t v16 = v14 & 0x7F;
    if (v15 < 0) {
      uint64_t v16 = v11[1];
    }
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = v16;
    int v18 = v10;
    return sub_1CCBCDC08(a3, &v17);
  }
  return result;
}

void *llvm::MCPseudoProbeDecoder::getInlinerDescForProbe(void *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 32) + 80);
  if (v2) {
    return sub_1CCBD0110(a1, v2) + 3;
  }
  else {
    return 0;
  }
}

void *sub_1CCBCFE4C(uint64_t a1, unint64_t a2, unsigned int a3, _OWORD *a4, uint64_t *a5)
{
  unint64_t v9 = a3 ^ a2;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v5 = a3 ^ a2;
      if (v9 >= v10) {
        unint64_t v5 = v9 % v10;
      }
    }
    else
    {
      unint64_t v5 = (v10 - 1) & v9;
    }
    BOOL v12 = *(void ***)(*(void *)a1 + 8 * v5);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2 && *((_DWORD *)v13 + 6) == a3) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v5) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x28uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  uint64_t v16 = *a5;
  *a5 = 0;
  v13[4] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_60;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_60:
      }
        sub_1CD3F1760(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v5 = v9 % v10;
      }
      else {
        unint64_t v5 = v9;
      }
    }
    else
    {
      unint64_t v5 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v5);
  if (v27)
  {
    void *v13 = *v27;
LABEL_57:
    *unint64_t v27 = v13;
    goto LABEL_58;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v26 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    unint64_t v28 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_57;
  }
LABEL_58:
  ++*(void *)(a1 + 24);
  return v13;
}

void *sub_1CCBD0110(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  unint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1CCBD01C0(char *a1)
{
  if (a1)
  {
    sub_1CCBD01C0(*(void *)a1);
    sub_1CCBD01C0(*((void *)a1 + 1));
    if (a1[79] < 0) {
      operator delete(*((void **)a1 + 7));
    }
    operator delete(a1);
  }
}

uint64_t llvm::MCRegisterInfo::getMatchingSuperReg(uint64_t *a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = *a1;
  uint8x8_t v6 = (unsigned __int16 *)(v4 + 2 * *(unsigned int *)(*a1 + 24 * a2 + 8));
  uint64_t v7 = *v6;
  if (*v6)
  {
    unsigned __int16 v8 = v7 + a2;
    while (1)
    {
      uint64_t v7 = v8;
      uint64_t v9 = v8 >> 3;
      if (v9 < *(unsigned __int16 *)(a4 + 22)
        && ((*(unsigned __int8 *)(*(void *)(a4 + 8) + v9) >> (v7 & 7)) & 1) != 0)
      {
        uint64_t v11 = *(unsigned int *)(v5 + 24 * v7 + 4);
        int v12 = *(unsigned __int16 *)(v4 + 2 * v11);
        if (*(_WORD *)(v4 + 2 * v11))
        {
          LOWORD(v12) = v12 + v7;
          uint64_t v13 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(v5 + 24 * v7 + 12));
          unint64_t v14 = (unsigned __int16 *)(v4 + 2 + 2 * v11);
          while (*v13 != a3)
          {
            int v15 = *v14++;
            LOWORD(v12) = v15 + v12;
            ++v13;
            if (!v15)
            {
              int v12 = 0;
              goto LABEL_13;
            }
          }
          int v12 = (unsigned __int16)v12;
        }
LABEL_13:
        if (v12 == a2) {
          break;
        }
      }
      int v10 = v6[1];
      ++v6;
      unsigned __int16 v8 = v10 + v7;
      if (!v10) {
        return 0;
      }
    }
  }
  return v7;
}

uint64_t llvm::MCRegisterInfo::getSubReg(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(unsigned int *)(*a1 + 24 * a2 + 4);
  if (!*(_WORD *)(v3 + 2 * v4)) {
    return 0;
  }
  unsigned __int16 v5 = *(_WORD *)(v3 + 2 * v4) + a2;
  uint8x8_t v6 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(*a1 + 24 * a2 + 12));
  uint64_t v7 = (unsigned __int16 *)(v3 + 2 * v4 + 2);
  while (*v6 != a3)
  {
    int v9 = *v7++;
    v5 += v9;
    ++v6;
    if (!v9) {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::MCRegisterInfo::getSubRegIndex(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(unsigned int *)(*a1 + 24 * a2 + 4);
  if (!*(_WORD *)(v3 + 2 * v4)) {
    return 0;
  }
  unsigned __int16 v5 = *(_WORD *)(v3 + 2 * v4) + a2;
  uint8x8_t v6 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(*a1 + 24 * a2 + 12));
  uint64_t v7 = (unsigned __int16 *)(v3 + 2 * v4 + 2);
  while (a3 != v5)
  {
    int v8 = *v7++;
    v5 += v8;
    ++v6;
    if (!v8) {
      return 0;
    }
  }
  return *v6;
}

uint64_t llvm::MCRegisterInfo::getSubRegIdxSize(llvm::MCRegisterInfo *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 11) + 4 * a2 + 2);
}

uint64_t llvm::MCRegisterInfo::getSubRegIdxOffset(llvm::MCRegisterInfo *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 11) + 4 * a2);
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNum(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = 128;
  if (a3) {
    uint64_t v3 = 136;
  }
  uint64_t v4 = *(_DWORD **)(a1 + v3);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 112;
  if (a3) {
    uint64_t v5 = 116;
  }
  unint64_t v6 = *(unsigned int *)(a1 + v5);
  uint64_t v7 = &v4[2 * v6];
  if (v6)
  {
    do
    {
      unint64_t v8 = v6 >> 1;
      int v9 = &v4[2 * (v6 >> 1)];
      unsigned int v11 = *v9;
      int v10 = v9 + 2;
      v6 += ~(v6 >> 1);
      if (v11 < a2) {
        uint64_t v4 = v10;
      }
      else {
        unint64_t v6 = v8;
      }
    }
    while (v6);
  }
  if (v4 != v7 && *v4 == a2) {
    return v4[1];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(llvm::MCRegisterInfo *this, uint64_t a2)
{
  int8x8_t v2 = (_DWORD *)*((void *)this + 19);
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)this + 31);
    uint64_t v4 = &v2[2 * v3];
    if (v3)
    {
      do
      {
        unint64_t v5 = v3 >> 1;
        unint64_t v6 = &v2[2 * (v3 >> 1)];
        unsigned int v8 = *v6;
        uint64_t v7 = v6 + 2;
        v3 += ~(v3 >> 1);
        if (v8 < a2) {
          int8x8_t v2 = v7;
        }
        else {
          unint64_t v3 = v5;
        }
      }
      while (v3);
    }
    if (v2 != v4 && *v2 == a2)
    {
      int v9 = (_DWORD *)*((void *)this + 16);
      if (!v9) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v10 = v2[1];
      unint64_t v11 = *((unsigned int *)this + 28);
      int v12 = &v9[2 * v11];
      if (v11)
      {
        do
        {
          unint64_t v13 = v11 >> 1;
          unint64_t v14 = &v9[2 * (v11 >> 1)];
          unsigned int v16 = *v14;
          int v15 = v14 + 2;
          v11 += ~(v11 >> 1);
          if (v16 < v10) {
            int v9 = v15;
          }
          else {
            unint64_t v11 = v13;
          }
        }
        while (v11);
      }
      if (v9 != v12 && *v9 == v10) {
        return v9[1];
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return a2;
}

BOOL llvm::MCRegisterInfo::regsOverlap(void *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = *(unsigned int *)(*a1 + 24 * a2 + 16);
  __int16 v4 = v3 & 0xF;
  uint64_t v5 = a1[6];
  unint64_t v6 = (_WORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFE));
  __int16 v8 = *v6;
  uint64_t v7 = v6 + 1;
  unsigned __int16 v9 = v8 + v4 * a2;
  unint64_t v10 = *(unsigned int *)(*a1 + 24 * a3 + 16);
  __int16 v11 = v10 & 0xF;
  int v12 = (_WORD *)(v5 + ((v10 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v13 = *v12 + v11 * a3;
LABEL_2:
  unsigned __int16 v14 = v13;
  ++v12;
  do
  {
    int v15 = v9;
    if (v9 == v13) {
      break;
    }
    if (v9 >= v13)
    {
      v13 += *v12;
      if (*v12) {
        goto LABEL_2;
      }
      return v15 == v14;
    }
    int v16 = *v7++;
    v9 += v16;
  }
  while (v16);
  return v15 == v14;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = result;
  LODWORD(result) = 0;
  __int16 v4 = (__int16 *)(*(void *)(v3 + 144) + 4 * *(unsigned __int16 *)(a2 + 14));
  while (1)
  {
    unsigned int v6 = *v4;
    v4 += 2;
    uint64_t v5 = v6;
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    if ((int)result <= (int)v5) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = result;
    }
    if (!--v2) {
      return result;
    }
  }
  return v5;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if ((~*(unsigned __int16 *)(v3 + 24 * a3 + 8) & 0x1FFF) == 0) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)(v3 + 24 * a3 + 16);
  if (!*(_WORD *)(v3 + 24 * a3 + 16)) {
    return 0;
  }
  LODWORD(result) = 0;
  unsigned int v6 = (__int16 *)(*(void *)(a2 + 144) + 4 * *(unsigned __int16 *)(v3 + 24 * a3 + 14));
  while (1)
  {
    unsigned int v8 = *v6;
    v6 += 2;
    uint64_t v7 = v8;
    if ((v8 & 0x80000000) != 0) {
      break;
    }
    if ((int)result <= (int)v7) {
      uint64_t result = v7;
    }
    else {
      uint64_t result = result;
    }
    if (!--v4) {
      return result;
    }
  }
  return v7;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t a1, void *a2, void *a3, unsigned int *a4)
{
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(_WORD *)(v5 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6) + 8) & 0x1FFF;
  if (v6 == 0x1FFF) {
    return 0;
  }
  if (v6 == 8190)
  {
    do
    {
      unsigned int v8 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
      uint64_t v9 = *(void *)(a1 + 40);
    }
    while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
    uint64_t v10 = v9 + 24 * v8;
  }
  else
  {
    uint64_t v10 = v5 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6);
  }
  uint64_t v11 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16)) {
    return 0;
  }
  LODWORD(result) = 0;
  unsigned __int16 v13 = (__int16 *)(a2[18] + 4 * *(unsigned __int16 *)(v10 + 14));
  while (1)
  {
    unsigned int v15 = *v13;
    v13 += 2;
    uint64_t v14 = v15;
    if ((v15 & 0x80000000) != 0) {
      break;
    }
    if ((int)result <= (int)v14) {
      uint64_t result = v14;
    }
    else {
      uint64_t result = result;
    }
    if (!--v11) {
      return result;
    }
  }
  return v14;
}

double llvm::MCSchedModel::getReciprocalThroughput(uint64_t a1, _WORD *a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 160);
  if (a2[6])
  {
    uint64_t v5 = (unsigned __int16 *)(*(void *)(a1 + 136) + 4 * (unsigned __int16)a2[5]);
    int v6 = &v5[2 * (unsigned __int16)a2[6]];
    double v7 = 0.0;
    char v8 = 1;
    do
    {
      while (1)
      {
        unsigned int v9 = v5[1];
        if (!v5[1]) {
          break;
        }
        unsigned int v10 = *v5;
        v5 += 2;
        LODWORD(a4) = *(_DWORD *)(*(void *)(v4 + 32) + 32 * v10 + 8);
        a4 = (double)*(unint64_t *)&a4 / (double)v9;
        if (v8 & 1 | (a4 < v7)) {
          double v7 = a4;
        }
        char v8 = 0;
        if (v5 == v6) {
          return 1.0 / v7;
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    if (v8) {
      goto LABEL_11;
    }
    return 1.0 / v7;
  }
  else
  {
LABEL_11:
    LODWORD(a4) = *(_DWORD *)v4;
    return (double)(a2[4] & 0x1FFF) / (double)*(unint64_t *)&a4;
  }
}

double llvm::MCSchedModel::getReciprocalThroughput(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4, double a5, double a6)
{
  uint64_t v8 = *(void *)(a1 + 40);
  int v9 = *(_WORD *)(v8 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6) + 8) & 0x1FFF;
  if (v9 == 0x1FFF)
  {
    LODWORD(a5) = *(_DWORD *)a1;
    return 1.0 / (double)*(unint64_t *)&a5;
  }
  else
  {
    if (v9 == 8190)
    {
      do
      {
        unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        uint64_t v12 = *(void *)(a1 + 40);
      }
      while ((*(_WORD *)(v12 + 24 * v11 + 8) & 0x1FFF) == 0x1FFE);
      unsigned __int16 v13 = (_WORD *)(v12 + 24 * v11);
    }
    else
    {
      unsigned __int16 v13 = (_WORD *)(v8 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6));
    }
    return llvm::MCSchedModel::getReciprocalThroughput(a2, v13, a5, a6);
  }
}

double llvm::MCSchedModel::getReciprocalThroughput(unsigned int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96) + 10 * a1;
  unsigned int v3 = *(unsigned __int16 *)(v2 + 2);
  unsigned int v4 = *(unsigned __int16 *)(v2 + 4);
  if (v3 == v4) {
    return 1.0;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  int v6 = (int8x8_t *)(v5 + 24 * v4);
  double v7 = (int8x8_t *)(v5 + 24 * v3);
  double v8 = 0.0;
  char v9 = 1;
  do
  {
    while (v7->i32[0])
    {
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(v7[1]);
      v10.i16[0] = vaddlv_u8(v10);
      double v11 = (double)v10.u32[0] / (double)v7->u32[0];
      if (v9 & 1 | (v11 < v8)) {
        double v8 = v11;
      }
      v7 += 3;
      char v9 = 0;
      if (v7 == v6) {
        return 1.0 / v8;
      }
    }
    v7 += 3;
  }
  while (v7 != v6);
  if (v9) {
    return 1.0;
  }
  return 1.0 / v8;
}

uint64_t llvm::MCSchedModel::getForwardingDelayCycles(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  int v3 = 0;
  uint64_t v4 = 12 * a2;
  uint64_t v5 = (int *)(a1 + 8);
  do
  {
    if (*(v5 - 1) == a3 && *v5 < v3) {
      int v3 = *v5;
    }
    v5 += 3;
    v4 -= 12;
  }
  while (v4);
  if (v3 >= 0) {
    return v3;
  }
  else {
    return -v3;
  }
}

double llvm::MCSection::MCSection(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_1F262FAC8;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 44) &= 0xF8u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 16;
  *(unsigned char *)(a1 + 98) = 0;
  *(void *)(a1 + 104) = a1 + 104;
  *(void *)(a1 + 112) = a1 + 104;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x100000000;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 160) = 0x200000000;
  *(void *)(a1 + 200) = a3;
  *(void *)(a1 + 208) = a4;
  *(_DWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 220) = a5;
  return result;
}

unint64_t llvm::MCSection::hasEnded(llvm::MCSection *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)v1;
  unint64_t result = *(void *)v1 & 0xFFFFFFFFFFFFFFF8;
  if (!result && (*(_DWORD *)(v1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v1 + 8) |= 4u;
    unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v1 + 24));
    uint64_t v2 = *(void *)v1 & 7 | result;
    *(void *)uint64_t v1 = v2;
  }
  if (result)
  {
    unint64_t AssociatedFragment = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v1 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v1 + 8) |= 4u;
      unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v1 + 24));
      *(void *)uint64_t v1 = *(void *)v1 & 7 | AssociatedFragment;
    }
    return AssociatedFragment != (void)llvm::MCSymbol::AbsolutePseudoFragment;
  }
  return result;
}

void llvm::MCSection::~MCSection(llvm::MCSection *this)
{
  *(void *)this = &unk_1F262FAC8;
  uint64_t v2 = (char *)*((void *)this + 19);
  if (v2 != (char *)this + 168) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 15);
  if (v3 != (char *)this + 136) {
    free(v3);
  }
  uint64_t v4 = (llvm::MCSection *)*((void *)this + 14);
  if (v4 != (llvm::MCSection *)((char *)this + 104))
  {
    do
    {
      uint64_t v5 = *(void *)v4;
      int v6 = (llvm::MCSection *)*((void *)v4 + 1);
      *(void *)int v6 = *(void *)v4;
      *(void *)(v5 + 8) = v6;
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      llvm::MCFragment::destroy((uint64_t)v4);
      uint64_t v4 = v6;
    }
    while (v6 != (llvm::MCSection *)((char *)this + 104));
  }
}

char *llvm::MCSection::getSubsectionInsertionPoint(llvm::MCSection *this, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)this + 32);
  if (a2)
  {
    int v3 = (_DWORD *)*((void *)this + 15);
    if (!v2)
    {
      uint64_t v2 = 0;
      uint64_t v4 = (_DWORD *)*((void *)this + 15);
      goto LABEL_11;
    }
  }
  else
  {
    if (!v2) {
      return (char *)this + 104;
    }
    int v3 = (_DWORD *)*((void *)this + 15);
  }
  uint64_t v4 = v3;
  unint64_t v5 = *((unsigned int *)this + 32);
  do
  {
    unint64_t v6 = v5 >> 1;
    double v7 = &v4[4 * (v5 >> 1)];
    unsigned int v9 = *v7;
    double v8 = v7 + 4;
    v5 += ~(v5 >> 1);
    if (v9 < a2) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v5 = v6;
    }
  }
  while (v5);
LABEL_11:
  uint8x8_t v10 = &v3[4 * v2];
  if (v4 == v10)
  {
    BOOL v11 = 0;
  }
  else
  {
    BOOL v11 = *v4 == a2;
    v4 += 4 * v11;
  }
  if (v4 == v10) {
    uint64_t v12 = (char *)this + 104;
  }
  else {
    uint64_t v12 = (char *)*((void *)v4 + 1);
  }
  if (!a2) {
    BOOL v11 = 1;
  }
  if (!v11) {
    operator new();
  }
  return v12;
}

uint64_t llvm::MCSection::addPendingLabel(uint64_t this, llvm::MCSymbol *a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(this + 160);
  if (v3 >= *(_DWORD *)(this + 164)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)(this + 152) + 16 * v3);
  *uint64_t v4 = a2;
  v4[1] = a3;
  ++*(_DWORD *)(this + 160);
  return this;
}

_DWORD *llvm::MCSection::flushPendingLabels(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = result[40];
  if (v4)
  {
    double v8 = result;
    unsigned int v9 = (_DWORD *)*((void *)result + 19);
    uint8x8_t v10 = v9;
    do
    {
      if (v10[2] == a4)
      {
        BOOL v11 = *(uint64_t **)v10;
        *BOOL v11 = **(void **)v10 & 7 | a2;
        v11[3] = a3;
        *((_DWORD *)v11 + 2) = v11[1] & 0xFFFFE3FF | 0x400;
        unsigned int v9 = (_DWORD *)*((void *)v8 + 19);
        uint64_t v12 = v8[40];
        uint64_t v13 = (char *)&v9[4 * v12] - (char *)(v10 + 4);
        if (v13)
        {
          unint64_t result = memmove(v10, v10 + 4, v13 - 4);
          LODWORD(v12) = v8[40];
          unsigned int v9 = (_DWORD *)*((void *)v8 + 19);
        }
        v10 -= 4;
        int v4 = v12 - 1;
        v8[40] = v4;
      }
      v10 += 4;
    }
    while (v10 != &v9[4 * v4]);
  }
  return result;
}

uint64_t llvm::MCSection::flushPendingLabels(uint64_t this)
{
  if (*(_DWORD *)(this + 160))
  {
    llvm::MCSection::getSubsectionInsertionPoint((llvm::MCSection *)this, *(_DWORD *)(*(void *)(this + 152) + 8));
    operator new();
  }
  return this;
}

uint64_t llvm::MCSectionELF::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 232) == -1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a4 + 64))(a4);
  }
  else {
    return 0;
  }
}

llvm::raw_ostream *sub_1CCBD1154(llvm::raw_ostream *a1, unsigned __int8 *a2, int64_t a3)
{
  int v4 = a2;
  v19[0] = a2;
  v19[1] = a3;
  unint64_t result = (llvm::raw_ostream *)llvm::StringRef::find_first_not_of(v19, "0123456789_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 64, 0);
  if (result == (llvm::raw_ostream *)-1)
  {
    unint64_t result = (llvm::raw_ostream *)*((void *)a1 + 4);
    if ((unint64_t)a3 <= *((void *)a1 + 3) - (void)result)
    {
      if (a3)
      {
        unint64_t result = (llvm::raw_ostream *)memcpy(result, v4, a3);
        *((void *)a1 + 4) += a3;
      }
    }
    else
    {
      return llvm::raw_ostream::write(a1, (const char *)v4, a3);
    }
  }
  else
  {
    double v7 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v7 >= *((void *)a1 + 3))
    {
      unint64_t result = llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v7 + 1;
      *double v7 = 34;
    }
    if (a3 >= 1)
    {
      double v8 = &v4[a3];
      do
      {
        int v9 = *v4;
        if (v9 == 92)
        {
          if (v4 + 1 != v8)
          {
            uint64_t v13 = (unsigned char *)*((void *)a1 + 4);
            if ((unint64_t)v13 >= *((void *)a1 + 3))
            {
              unint64_t result = llvm::raw_ostream::write(a1, 92);
            }
            else
            {
              *((void *)a1 + 4) = v13 + 1;
              unsigned char *v13 = 92;
            }
            char v16 = v4[1];
            float v17 = (char *)*((void *)a1 + 4);
            if ((unint64_t)v17 >= *((void *)a1 + 3))
            {
              unint64_t result = llvm::raw_ostream::write(a1, v16);
            }
            else
            {
              *((void *)a1 + 4) = v17 + 1;
              *float v17 = v16;
            }
            ++v4;
            goto LABEL_29;
          }
          unsigned int v15 = (_WORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v15 > 1uLL)
          {
            *unsigned int v15 = 23644;
            goto LABEL_33;
          }
          BOOL v11 = a1;
          uint64_t v12 = "\\\\"";
        }
        else
        {
          if (v9 != 34)
          {
            uint64_t v14 = (unsigned char *)*((void *)a1 + 4);
            if ((unint64_t)v14 >= *((void *)a1 + 3))
            {
              unint64_t result = llvm::raw_ostream::write(a1, v9);
            }
            else
            {
              *((void *)a1 + 4) = v14 + 1;
              *uint64_t v14 = v9;
            }
            goto LABEL_29;
          }
          uint8x8_t v10 = (_WORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v10 > 1uLL)
          {
            *uint8x8_t v10 = 8796;
LABEL_33:
            *((void *)a1 + 4) += 2;
            goto LABEL_29;
          }
          BOOL v11 = a1;
          uint64_t v12 = "\\\"";
        }
        unint64_t result = llvm::raw_ostream::write(v11, v12, 2uLL);
LABEL_29:
        ++v4;
      }
      while (v4 < v8);
    }
    float v18 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v18 >= *((void *)a1 + 3))
    {
      return llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v18 + 1;
      unsigned char *v18 = 34;
    }
  }
  return result;
}

uint64_t llvm::MCSectionMachO::MCSectionMachO(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9)
{
  unint64_t v9 = 0;
  *(void *)(result + 36) = 0;
  *(unsigned char *)(result + 44) &= 0xF8u;
  *(void *)(result + 80) = -1;
  *(void *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 16;
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = result + 136;
  *(void *)(result + 128) = 0x100000000;
  *(void *)(result + 152) = result + 168;
  *(void *)(result + 8) = a9;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 98) = 0;
  *(void *)(result + 160) = 0x200000000;
  *(void *)(result + 200) = a4;
  *(void *)(result + 208) = a5;
  *(_DWORD *)(result + 216) = 3;
  *(_DWORD *)(result + 220) = a8;
  *(void *)unint64_t result = &unk_1F262FB58;
  *(_DWORD *)(result + 240) = a6;
  *(_DWORD *)(result + 244) = a7;
  do
  {
    if (a3 <= v9) {
      char v10 = 0;
    }
    else {
      char v10 = *(unsigned char *)(a2 + v9);
    }
    *(unsigned char *)(result + v9++ + 224) = v10;
  }
  while (v9 != 16);
  return result;
}

{
  unint64_t v9;
  char v10;

  unint64_t v9 = 0;
  *(void *)(result + 36) = 0;
  *(unsigned char *)(result + 44) &= 0xF8u;
  *(void *)(result + 80) = -1;
  *(void *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 16;
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = result + 136;
  *(void *)(result + 128) = 0x100000000;
  *(void *)(result + 152) = result + 168;
  *(void *)(result + 8) = a9;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = result;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 98) = 0;
  *(void *)(result + 160) = 0x200000000;
  *(void *)(result + 200) = a4;
  *(void *)(result + 208) = a5;
  *(_DWORD *)(result + 216) = 3;
  *(_DWORD *)(result + 220) = a8;
  *(void *)unint64_t result = &unk_1F262FB58;
  *(_DWORD *)(result + 240) = a6;
  *(_DWORD *)(result + 244) = a7;
  do
  {
    if (a3 > v9) {
      char v10 = *(unsigned char *)(a2 + v9);
    }
    else {
      char v10 = 0;
    }
    *(unsigned char *)(result + v9++ + 224) = v10;
  }
  while (v9 != 16);
  return result;
}

uint64_t llvm::MCSectionMachO::useCodeAlign(llvm::MCSectionMachO *this)
{
  return *((_DWORD *)this + 60) >> 31;
}

uint64_t llvm::MCSectionMachO::isVirtualSection(llvm::MCSectionMachO *this)
{
  return (*((unsigned __int8 *)this + 240) < 0x13u) & (0x41002u >> *((unsigned char *)this + 240));
}

uint64_t llvm::MCSectionWasm::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a4 + 64))(a4);
}

void llvm::MCSectionXCOFF::~MCSectionXCOFF(llvm::MCSectionXCOFF *this)
{
  *(void *)this = &unk_1F262FAC8;
  uint64_t v2 = (char *)*((void *)this + 19);
  if (v2 != (char *)this + 168) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 15);
  if (v3 != (char *)this + 136) {
    free(v3);
  }
  int v4 = (llvm::MCSectionXCOFF *)*((void *)this + 14);
  if (v4 != (llvm::MCSectionXCOFF *)((char *)this + 104))
  {
    do
    {
      uint64_t v5 = *(void *)v4;
      unint64_t v6 = (llvm::MCSectionXCOFF *)*((void *)v4 + 1);
      *(void *)unint64_t v6 = *(void *)v4;
      *(void *)(v5 + 8) = v6;
      *(void *)int v4 = 0;
      *((void *)v4 + 1) = 0;
      llvm::MCFragment::destroy((uint64_t)v4);
      int v4 = v6;
    }
    while (v6 != (llvm::MCSectionXCOFF *)((char *)this + 104));
  }
}

void *llvm::MCTargetStreamer::MCTargetStreamer(void *a1, uint64_t a2)
{
  *a1 = &unk_1F262FC08;
  a1[1] = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = a1;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

__n128 llvm::MCStreamer::reset(llvm::MCStreamer *this)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v2 != v3)
  {
    do
    {
      uint64_t v10 = v2 - 88;
      *(void *)&v11[0] = v2 - 56;
      sub_1CC34C338((void ***)v11);
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  int v4 = (char *)this + 48;
  *((void *)v4 - 2) = v3;
  *((void *)v4 + 3) = 0;
  sub_1CCBD4B38((uint64_t)v4, v5);
  sub_1CCBD17BC((uint64_t)(v4 + 40));
  *((_DWORD *)v4 + 18) = 0;
  memset(v11, 0, sizeof(v11));
  unint64_t v6 = sub_1CBA9C894((uint64_t)(v4 + 64), (unint64_t)v11, 1);
  double v7 = (_OWORD *)(*((void *)v4 + 8) + 32 * *((unsigned int *)v4 + 18));
  __n128 result = *(__n128 *)v6;
  long long v9 = *(_OWORD *)(v6 + 16);
  *double v7 = *(_OWORD *)v6;
  v7[1] = v9;
  ++*((_DWORD *)v4 + 18);
  return result;
}

uint64_t sub_1CCBD17BC(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_1CD5156F4(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          void *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t llvm::MCStreamer::getNumFrameInfos(llvm::MCStreamer *this)
{
  return -1171354717 * ((*((void *)this + 4) - *((void *)this + 3)) >> 3);
}

uint64_t llvm::MCStreamer::getDwarfFrameInfos(llvm::MCStreamer *this)
{
  return *((void *)this + 3);
}

uint64_t llvm::MCStreamer::emitIntValue(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 488))();
}

void llvm::MCStreamer::emitULEB128IntValue(llvm::MCStreamer *this, unint64_t a2, unsigned int a3)
{
  v26[16] = *MEMORY[0x1E4F143B8];
  unint64_t v23 = &v24;
  uint8x8_t v24 = v26;
  long long v25 = xmmword_1CFAC3020;
  int v16 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  unsigned int v15 = &unk_1F2646FA8;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  BOOL v19 = 0;
  unsigned int v6 = 1;
  do
  {
    unsigned int v7 = v6;
    BOOL v8 = v6 < a3 || a2 > 0x7F;
    if (v8) {
      char v9 = 0x80;
    }
    else {
      char v9 = 0;
    }
    char v10 = v9 & 0x80 | a2 & 0x7F;
    BOOL v11 = v19;
    if ((unint64_t)v19 >= v18)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v15, v10);
    }
    else
    {
      ++v19;
      *BOOL v11 = v10;
    }
    unsigned int v6 = v7 + 1;
    BOOL v8 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v8);
  if (v7 < a3)
  {
    if (v7 < a3 - 1)
    {
      unsigned int v12 = a3 - v6;
      do
      {
        uint64_t v13 = v19;
        if ((unint64_t)v19 >= v18)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v15, 128);
        }
        else
        {
          ++v19;
          char *v13 = 0x80;
        }
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v19;
    if ((unint64_t)v19 >= v18)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v15, 0);
    }
    else
    {
      ++v19;
      *uint64_t v14 = 0;
    }
  }
  (*(void (**)(llvm::MCStreamer *, void *, void *))(*(void *)this + 488))(this, *v23, v23[1]);
  unsigned int v15 = &unk_1F2646B98;
  if (v22 == 1 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8077774924);
  }
  if (v24 != v26) {
    free(v24);
  }
}

void llvm::MCStreamer::emitSLEB128IntValue(llvm::MCStreamer *this, uint64_t a2)
{
  v20[16] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = &v18;
  unint64_t v18 = v20;
  long long v19 = xmmword_1CFAC3020;
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  char v9 = &unk_1F2646FA8;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    uint64_t v3 = a2 >> 7;
    if ((unint64_t)a2 < 0x40) {
      goto LABEL_6;
    }
    uint64_t v4 = ((unint64_t)a2 >> 6) & 1;
    if (v3 != -1) {
      LODWORD(v4) = 0;
    }
    if (v4 == 1)
    {
LABEL_6:
      char v5 = 0;
      int v6 = 1;
    }
    else
    {
      int v6 = 0;
      char v5 = 0x80;
    }
    char v7 = v5 | a2 & 0x7F;
    BOOL v8 = v13;
    if ((unint64_t)v13 >= v12)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v9, v7);
    }
    else
    {
      ++v13;
      *BOOL v8 = v7;
    }
    a2 = v3;
  }
  while (!v6);
  (*(void (**)(llvm::MCStreamer *, void *, void *))(*(void *)this + 488))(this, *v17, v17[1]);
  char v9 = &unk_1F2646B98;
  if (v16 == 1 && v11) {
    MEMORY[0x1D25D9CB0](v11, 0x1000C8077774924);
  }
  if (v18 != v20) {
    free(v18);
  }
}

uint64_t llvm::MCStreamer::emitValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

uint64_t llvm::MCStreamer::emitSymbolValue(llvm::MCStreamer *this, const llvm::MCSymbol *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v16 = *(uint64_t (**)(void))(*(void *)this + 376);
    return v16();
  }
  else
  {
    uint64_t v7 = *((void *)this + 1);
    *(void *)(v7 + 272) += 24;
    uint64_t v8 = *(void *)(v7 + 192);
    if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(v7 + 200) - v8)
    {
      unsigned int v13 = *(_DWORD *)(v7 + 216) >> 7;
      if (v13 >= 0x1E) {
        LOBYTE(v13) = 30;
      }
      uint64_t v14 = 4096 << v13;
      unint64_t v9 = (unint64_t)operator new(4096 << v13, (std::align_val_t)8uLL);
      unsigned int v15 = *(_DWORD *)(v7 + 216);
      if (v15 >= *(_DWORD *)(v7 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v7 + 208) + 8 * v15) = v9;
      ++*(_DWORD *)(v7 + 216);
      *(void *)(v7 + 200) = v9 + v14;
    }
    else
    {
      unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v7 + 192) = v9 + 24;
    int v10 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v9 = 2;
    *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = a2;
    uint64_t v11 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)this + 512);
    return v11(this, v9, a3, 0);
  }
}

uint64_t llvm::MCStreamer::emitZeros(llvm::MCStreamer *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 1);
  *(void *)(v4 + 272) += 24;
  uint64_t v5 = *(void *)(v4 + 192);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) - v5 + 24 > *(void *)(v4 + 200) - v5)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 216) >> 7;
    if (v9 >= 0x1E) {
      LOBYTE(v9) = 30;
    }
    uint64_t v10 = 4096 << v9;
    unint64_t v6 = (unint64_t)operator new(4096 << v9, (std::align_val_t)8uLL);
    unsigned int v11 = *(_DWORD *)(v4 + 216);
    if (v11 >= *(_DWORD *)(v4 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v4 + 208) + 8 * v11) = v6;
    ++*(_DWORD *)(v4 + 216);
    *(void *)(v4 + 200) = v6 + v10;
  }
  else
  {
    unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v4 + 192) = v6 + 24;
  *(unsigned char *)unint64_t v6 = 1;
  *(_DWORD *)(v6 + 1) = *(unsigned __int8 *)(v6 + 4) << 24;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = a2;
  uint64_t v7 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t, void, void))(*(void *)this + 616);

  return v7(this, v6, 0, 0);
}

void llvm::MCStreamer::tryEmitDwarfFileDirective(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, long long *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 8);
  long long v13 = *(_OWORD *)a7;
  char v14 = *(unsigned char *)(a7 + 16);
  long long v11 = *a8;
  uint64_t v12 = *((void *)a8 + 2);
  llvm::MCContext::getDwarfFile(v10, a3, a4, a5, a6, a2, &v13, (uint64_t)&v11, a9, a10);
}

double llvm::MCStreamer::emitDwarfFile0Directive(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, uint64_t a6, __n128 *a7, unsigned int a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = *(void *)(a1 + 8);
  long long v26 = *(_OWORD *)a6;
  char v27 = *(unsigned char *)(a6 + 16);
  __n128 v22 = *a7;
  unint64_t v23 = a7[1].n128_u64[0];
  char v14 = *(char **)(v13 + 1480);
  if (v14)
  {
    do
    {
      while (1)
      {
        uint64_t v15 = v14;
        unsigned int v16 = *((_DWORD *)v14 + 8);
        if (v16 <= a8) {
          break;
        }
        char v14 = *(char **)v15;
        unint64_t v18 = (uint64_t **)v15;
        if (!*(void *)v15) {
          goto LABEL_6;
        }
      }
      if (v16 >= a8) {
        goto LABEL_4;
      }
      char v14 = (char *)*((void *)v15 + 1);
    }
    while (v14);
    unint64_t v18 = (uint64_t **)(v15 + 8);
  }
  else
  {
    unint64_t v18 = (uint64_t **)(v13 + 1480);
    uint64_t v15 = (char *)(v13 + 1480);
  }
LABEL_6:
  long long v19 = v15;
  uint64_t v15 = (char *)operator new(0x228uLL);
  *((_DWORD *)v15 + 8) = a8;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *((void *)v15 + 65) = 0;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_OWORD *)(v15 + 312) = 0u;
  *(_OWORD *)(v15 + 328) = 0u;
  *(_OWORD *)(v15 + 344) = 0u;
  *(_OWORD *)(v15 + 360) = 0u;
  *(_OWORD *)(v15 + 376) = 0u;
  *(_OWORD *)(v15 + 392) = 0u;
  *(_OWORD *)(v15 + 408) = 0u;
  *(_OWORD *)(v15 + 424) = 0u;
  *(_OWORD *)(v15 + 440) = 0u;
  *(_OWORD *)(v15 + 456) = 0u;
  *(_OWORD *)(v15 + 472) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 488) = 0u;
  *(_OWORD *)(v15 + 504) = 0u;
  *((void *)v15 + 6) = v15 + 64;
  *((_DWORD *)v15 + 15) = 3;
  *((void *)v15 + 17) = v15 + 152;
  *((_DWORD *)v15 + 37) = 3;
  *((void *)v15 + 47) = 0;
  *((void *)v15 + 46) = 0;
  *((void *)v15 + 48) = 0x1000000000;
  *((_OWORD *)v15 + 25) = 0u;
  *((_OWORD *)v15 + 26) = 0u;
  *((_OWORD *)v15 + 27) = 0u;
  *(void *)(v15 + 445) = 0;
  v15[497] = 1;
  *((void *)v15 + 64) = 0;
  *((void *)v15 + 63) = 0;
  *((_DWORD *)v15 + 130) = 0;
  *((void *)v15 + 66) = 0;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 67) = 0;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v19;
  void *v18 = (uint64_t *)v15;
  char v20 = (uint64_t *)v15;
  uint64_t v21 = **(void **)(v13 + 1472);
  if (v21)
  {
    *(void *)(v13 + 1472) = v21;
    char v20 = *v18;
  }
  sub_1CB8358B8(*(uint64_t **)(v13 + 1480), v20);
  ++*(void *)(v13 + 1488);
LABEL_4:
  long long v28 = v26;
  char v29 = v27;
  __n128 v24 = v22;
  unint64_t v25 = v23;
  *(void *)&double result = sub_1CCBB0D74((uint64_t)(v15 + 40), __src, __len, a4, a5, &v28, &v24).n128_u64[0];
  return result;
}

uint64_t llvm::MCStreamer::getCurrentDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (*((void *)this + 3) != v2 && !*(void *)(v2 - 80)) {
    return v2 - 88;
  }
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (uint64_t *)*((void *)this + 32);
  if (v5) {
    uint64_t v6 = *v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
  __int16 v8 = 259;
  llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  return 0;
}

uint64_t llvm::MCStreamer::emitDwarfLocDirective(uint64_t result, int a2, int a3, __int16 a4, char a5, char a6, int a7)
{
  uint64_t v7 = *(void *)(result + 8);
  *(_DWORD *)(v7 + 1496) = a2;
  *(_DWORD *)(v7 + 1500) = a3;
  *(_WORD *)(v7 + 1504) = a4;
  *(unsigned char *)(v7 + 1506) = a5;
  *(unsigned char *)(v7 + 1507) = a6;
  *(_DWORD *)(v7 + 1508) = a7;
  *(unsigned char *)(v7 + 1512) = 1;
  return result;
}

uint64_t llvm::MCStreamer::getDwarfLineTableSymbol(llvm::MCStreamer *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(char **)(v4 + 1480);
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = v5;
        unsigned int v7 = *((_DWORD *)v5 + 8);
        if (v7 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v6;
        uint64_t v13 = (uint64_t **)v6;
        if (!*(void *)v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        goto LABEL_4;
      }
      uint64_t v5 = (char *)*((void *)v6 + 1);
    }
    while (v5);
    uint64_t v13 = (uint64_t **)(v6 + 8);
  }
  else
  {
    uint64_t v13 = (uint64_t **)(v4 + 1480);
    uint64_t v6 = (char *)(v4 + 1480);
  }
LABEL_8:
  char v14 = v6;
  uint64_t v6 = (char *)operator new(0x228uLL);
  *((_DWORD *)v6 + 8) = a2;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((void *)v6 + 65) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((void *)v6 + 6) = v6 + 64;
  *((_DWORD *)v6 + 15) = 3;
  *((void *)v6 + 17) = v6 + 152;
  *((_DWORD *)v6 + 37) = 3;
  *((void *)v6 + 47) = 0;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 48) = 0x1000000000;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *(void *)(v6 + 445) = 0;
  v6[497] = 1;
  *((void *)v6 + 64) = 0;
  *((void *)v6 + 63) = 0;
  *((_DWORD *)v6 + 130) = 0;
  *((void *)v6 + 66) = 0;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 67) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = v14;
  char *v13 = (uint64_t *)v6;
  uint64_t v15 = (uint64_t *)v6;
  uint64_t v16 = **(void **)(v4 + 1472);
  if (v16)
  {
    *(void *)(v4 + 1472) = v16;
    uint64_t v15 = *v13;
  }
  sub_1CB8358B8(*(uint64_t **)(v4 + 1480), v15);
  ++*(void *)(v4 + 1488);
LABEL_4:
  uint64_t result = *((void *)v6 + 5);
  if (!result)
  {
    unsigned int v9 = (llvm::MCContext *)*((void *)this + 1);
    uint64_t v10 = *((void *)v9 + 19);
    uint64_t v12 = *(void *)(v10 + 88);
    uint64_t v11 = *(void *)(v10 + 96);
    __int16 v18 = 773;
    v17[0] = v12;
    v17[1] = v11;
    v17[2] = "line_table_start";
    v19[0] = (unsigned __int8 **)v17;
    void v19[2] = (unsigned __int8 **)a2;
    __int16 v20 = 2050;
    uint64_t result = llvm::MCContext::getOrCreateSymbol(v9, v19);
    *((void *)v6 + 5) = result;
  }
  return result;
}

BOOL llvm::MCStreamer::hasUnfinishedDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v1 = *((void *)this + 4);
  return *((void *)this + 3) != v1 && *(void *)(v1 - 80) == 0;
}

uint64_t llvm::MCStreamer::initSections(void *a1)
{
  return (*(uint64_t (**)(void *, void, void))(*a1 + 168))(a1, *(void *)(*(void *)(a1[1] + 168) + 24), 0);
}

uint64_t llvm::MCStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 2) != 0)
  {
    if ((*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
    {
      *(void *)(a2 + 24) = 0;
      v6 &= 0xFFFFE3FF;
    }
    uint64_t v7 = *(void *)a2 & 7;
    *(void *)a2 = v7;
    v6 &= ~2u;
    *(_DWORD *)(a2 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(void *)a2;
  }
  unint64_t AssociatedFragment = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0x1C00) == 0x800 && AssociatedFragment == 0)
  {
    *(_DWORD *)(a2 + 8) = v6 | 4;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    uint64_t v7 = *(void *)a2 & 7 | AssociatedFragment;
    *(void *)a2 = v7;
  }
  if (AssociatedFragment || (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    unint64_t v23 = "symbol '";
    __int16 v24 = 259;
    if ((v7 & 4) != 0)
    {
      uint64_t v17 = *(uint64_t **)(a2 - 8);
      uint64_t v18 = *v17;
      uint64_t v15 = (uint64_t)(v17 + 2);
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    __int16 v22 = 261;
    v21[0] = v15;
    v21[1] = v16;
    sub_1CB8F1E58((uint64_t *)&v23, v21, (uint64_t)v25);
    long long v19 = "' is already defined";
    __int16 v20 = 259;
    sub_1CB8F1E58(v25, (uint64_t *)&v19, (uint64_t)v26);
    return llvm::MCContext::reportError(v14, a3, (uint64_t)v26);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 120);
    if (v10) {
      uint64_t v11 = *(void *)(*(void *)(a1 + 112) + 32 * v10 - 32);
    }
    else {
      uint64_t v11 = 0;
    }
    *(void *)a2 = v7 & 7 | (v11 + 48);
    uint64_t result = *(void *)(a1 + 16);
    if (result)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v13();
    }
  }
  return result;
}

void llvm::MCStreamer::emitCFIStartProc(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 24) == v4 || *(void *)(v4 - 80))
  {
    memset(v17, 0, 42);
    long long v15 = 0u;
    long long v16 = 0u;
    *(_DWORD *)&v17[44] = 0x7FFFFFFF;
    v17[48] = 0;
    v17[41] = a2;
    (**(void (***)(uint64_t, long long *))a1)(a1, &v15);
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 152);
    if (v6)
    {
      uint64_t v7 = *(_DWORD **)(v6 + 432);
      for (int i = *(_DWORD **)(v6 + 440); v7 != i; v7 += 20)
      {
        if (*v7 <= 7u && ((1 << *v7) & 0xB0) != 0) {
          *(_DWORD *)&v17[24] = v7[4];
        }
      }
    }
    unint64_t v9 = *(void *)(a1 + 32);
    if (v9 >= *(void *)(a1 + 40))
    {
      uint64_t v12 = sub_1CCBD4BA8(v5, (uint64_t)&v15);
    }
    else
    {
      long long v10 = v16;
      *(_OWORD *)unint64_t v9 = v15;
      *(_OWORD *)(v9 + 16) = v10;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      sub_1CCBBFCB8((char *)(v9 + 32), *(uint64_t *)v17, *(uint64_t *)&v17[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v17[8] - *(void *)v17) >> 4));
      long long v11 = *(_OWORD *)&v17[24];
      *(_OWORD *)(v9 + 65) = *(_OWORD *)&v17[33];
      *(_OWORD *)(v9 + 56) = v11;
      uint64_t v12 = v9 + 88;
    }
    *(void *)(a1 + 32) = v12;
    uint64_t v18 = (void **)v17;
    sub_1CC34C338(&v18);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)&long long v15 = "starting new .cfi frame before finishing the previous one";
    *(_WORD *)uint64_t v17 = 259;
    llvm::MCContext::reportError(v14, a3, (uint64_t)&v15);
  }
}

uint64_t llvm::MCStreamer::emitCFIEndProc(llvm::MCStreamer *this)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(void *)this + 8);
    return v3(this, result);
  }
  return result;
}

void llvm::MCStreamer::emitCFIDefCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v12 = 6;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIAdjustCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v12 = 9;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v14 = 3;
  *(void *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  HIBYTE(v19) = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    long long v8 = CurrentDwarfFrameInfo;
    unint64_t v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v12 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      int v13 = SHIBYTE(v19);
      v8[5] = v12;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)unint64_t v9 = v10;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      long long v11 = *(_OWORD *)__p;
      *(void *)(v9 + 72) = v19;
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15)
    {
      long long v16 = v15;
      operator delete(v15);
    }
  }
}

void llvm::MCStreamer::emitCFIRelOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v14 = 8;
  *(void *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  HIBYTE(v19) = 0;
  long long v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    long long v8 = CurrentDwarfFrameInfo;
    unint64_t v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v12 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      int v13 = SHIBYTE(v19);
      v8[5] = v12;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)unint64_t v9 = v10;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      long long v11 = *(_OWORD *)__p;
      *(void *)(v9 + 72) = v19;
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15)
    {
      long long v16 = v15;
      operator delete(v15);
    }
  }
}

void llvm::MCStreamer::emitCFIRememberState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)long long v10 = 1;
  *(void *)&v10[8] = v2;
  *(void *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v4 = CurrentDwarfFrameInfo;
    unint64_t v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v8 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      int v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)unint64_t v5 = v6;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      long long v7 = *(_OWORD *)__p;
      *(void *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFIRestoreState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)long long v10 = 2;
  *(void *)&v10[8] = v2;
  *(void *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v4 = CurrentDwarfFrameInfo;
    unint64_t v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v8 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      int v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)unint64_t v5 = v6;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      long long v7 = *(_OWORD *)__p;
      *(void *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFISameValue(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v12 = 0;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    long long v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIRestore(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)uint64_t v12 = 11;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    long long v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      uint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIEscape(llvm::MCStreamer *a1, const void *a2, size_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)a1 + 80))(a1);
  uint64_t v7 = 0;
  long long v8 = 0;
  *(_DWORD *)uint64_t v17 = 10;
  *(void *)&v17[8] = v6;
  *(void *)&v17[16] = 0;
  uint64_t v19 = 0;
  __int16 v20 = 0;
  uint64_t v18 = 0;
  if (a3)
  {
    if ((a3 & 0x8000000000000000) != 0) {
      abort();
    }
    long long v9 = (char *)operator new(a3);
    long long v8 = v9;
    uint64_t v7 = (uint64_t)&v9[a3];
    uint64_t v18 = v9;
    __int16 v20 = &v9[a3];
    memmove(v9, a2, a3);
    uint64_t v19 = v7;
  }
  HIBYTE(v22) = 0;
  LOBYTE(__p) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
  {
    int v11 = CurrentDwarfFrameInfo;
    unint64_t v12 = CurrentDwarfFrameInfo[5];
    if (v12 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v15 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v17);
      int v16 = SHIBYTE(v22);
      v11[5] = v15;
      if (v16 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      long long v13 = *(_OWORD *)v17;
      *(_OWORD *)(v12 + 12) = *(_OWORD *)&v17[12];
      *(_OWORD *)unint64_t v12 = v13;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 32) = 0;
      sub_1CC34C614((void *)(v12 + 32), v8, v7, v7 - (void)v8);
      long long v14 = __p;
      *(void *)(v12 + 72) = v22;
      *(_OWORD *)(v12 + 56) = v14;
      v11[5] = v12 + 80;
    }
  }
  if (v18)
  {
    uint64_t v19 = (uint64_t)v18;
    operator delete(v18);
  }
}

void llvm::MCStreamer::emitCFIGnuArgsSize(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)unint64_t v12 = 16;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  long long v14 = 0;
  uint64_t v15 = 0;
  long long v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      long long v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIUndefined(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)unint64_t v12 = 12;
  *(void *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  long long v14 = 0;
  uint64_t v15 = 0;
  long long v13 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v6 = CurrentDwarfFrameInfo;
    unint64_t v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v10 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      int v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)unint64_t v7 = v8;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 32) = 0;
      long long v9 = *(_OWORD *)__p;
      *(void *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      long long v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIRegister(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)long long v14 = 13;
  *(void *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  *(_OWORD *)uint64_t v15 = 0u;
  memset(__p, 0, sizeof(__p));
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    long long v8 = CurrentDwarfFrameInfo;
    unint64_t v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v12 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      int v13 = SHIBYTE(__p[3]);
      v8[5] = v12;
      if (v13 < 0) {
        operator delete(__p[1]);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)unint64_t v9 = v10;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 32) = 0;
      long long v11 = *(_OWORD *)&__p[1];
      *(void **)(v9 + 72) = __p[3];
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void llvm::MCStreamer::emitCFIWindowSave(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)long long v10 = 14;
  *(void *)&v10[8] = v2;
  *(void *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v4 = CurrentDwarfFrameInfo;
    unint64_t v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v8 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      int v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)unint64_t v5 = v6;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      long long v7 = *(_OWORD *)__p;
      *(void *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFINegateRAState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  *(_DWORD *)long long v10 = 15;
  *(void *)&v10[8] = v2;
  *(void *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v4 = CurrentDwarfFrameInfo;
    unint64_t v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      uint64_t v8 = sub_1CC34C40C(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      int v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)unint64_t v5 = v6;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      long long v7 = *(_OWORD *)__p;
      *(void *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
  }
}

llvm::MCSectionCOFF *llvm::MCStreamer::getAssociatedPDataSection(llvm::MCContext **this, const llvm::MCSection *a2)
{
  return sub_1CCBD37A0(this[1], (_DWORD *)this + 66, *(llvm::MCSectionCOFF **)(*((void *)this[1] + 21) + 672), (uint64_t)a2);
}

llvm::MCSectionCOFF *sub_1CCBD37A0(llvm::MCContext *this, _DWORD *a2, llvm::MCSectionCOFF *a3, uint64_t a4)
{
  COFFSection = (int *)a3;
  if (*(void *)(*((void *)this + 21) + 24) == a4) {
    return (llvm::MCSectionCOFF *)COFFSection;
  }
  unsigned int v6 = *(_DWORD *)(a4 + 228);
  if (v6 == -1)
  {
    unsigned int v6 = (*a2)++;
    *(_DWORD *)(a4 + 228) = v6;
  }
  if ((*(unsigned char *)(a4 + 225) & 0x10) != 0)
  {
    if (!*(unsigned char *)(*((void *)this + 19) + 21))
    {
      uint64_t v7 = *((void *)a3 + 25);
      uint64_t v8 = *((void *)a3 + 26);
      __int16 v21 = 773;
      v20[0] = v7;
      v20[1] = v8;
      v20[2] = "$";
      uint64_t v9 = *(void *)(a4 + 200);
      unint64_t v10 = *(void *)(a4 + 208);
      v19[0] = v9;
      v19[1] = v10;
      LOBYTE(v22[0]) = 36;
      uint64_t v11 = llvm::StringRef::find(v19, (char *)v22, 1uLL, 0);
      unint64_t v12 = v11 + 1;
      if (v10 < v11 + 1) {
        unint64_t v12 = v10;
      }
      unint64_t v13 = v10 - v12;
      unint64_t v14 = v9 + v12;
      if (v11 == -1)
      {
        unint64_t v14 = 0;
        unint64_t v13 = 0;
      }
      v22[0] = v20;
      uint64_t v22[2] = v14;
      v22[3] = v13;
      __int16 v23 = 1282;
      llvm::Twine::str((llvm::Twine *)v22, v24);
      if (v25 >= 0) {
        uint64_t v15 = (std::string::value_type *)v24;
      }
      else {
        uint64_t v15 = (std::string::value_type *)v24[0];
      }
      if (v25 >= 0) {
        std::string::size_type v16 = v25 & 0x7F;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v24[1];
      }
      COFFSection = (int *)llvm::MCContext::getCOFFSection(this, v15, v16, COFFSection[56] | 0x1000u, COFFSection[55], (std::string::size_type)"", 0, 2u, 0xFFFFFFFF, 0);
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      return (llvm::MCSectionCOFF *)COFFSection;
    }
    uint64_t v18 = *(const llvm::MCSymbol **)(a4 + 232);
  }
  else
  {
    uint64_t v18 = 0;
  }

  return llvm::MCContext::getAssociativeCOFFSection(this, (llvm::MCSectionCOFF *)COFFSection, v18, v6);
}

uint64_t llvm::MCStreamer::Finish(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  if ((a1[3] == v3 || *(void *)(v3 - 80)) && ((uint64_t v4 = a1[7], a1[6] == v4) || *(void *)(*(void *)(v4 - 8) + 8)))
  {
    uint64_t v5 = a1[2];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    unsigned int v6 = *(uint64_t (**)(void *))(*a1 + 1232);
    return v6(a1);
  }
  else
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = "Unfinished frame!";
    __int16 v10 = 259;
    return llvm::MCContext::reportError(v8, a2, (uint64_t)&v9);
  }
}

void *llvm::MCStreamer::maybeEmitDwarf64Mark(void *this)
{
  if (*(unsigned char *)(this[1] + 1626) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = "DWARF64 Mark";
    __int16 v3 = 259;
    (*(void (**)(void *, const char **, uint64_t))(*this + 112))(this, &v2, 1);
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v1 + 520))(v1, 0xFFFFFFFFLL, 4);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(void *a1, uint64_t a2, uint64_t a3)
{
  llvm::MCStreamer::maybeEmitDwarf64Mark(a1);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, a3, 1);
  if (*(unsigned char *)(a1[1] + 1626)) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = 4;
  }
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 520);

  return v7(a1, a2, v6);
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  llvm::MCStreamer::maybeEmitDwarf64Mark(this);
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(void *)this + 112))(this, a3, 1);
  uint64_t v6 = (llvm::MCContext *)*((void *)this + 1);
  int v7 = *((unsigned __int8 *)a2 + 32);
  if (v7 == 1)
  {
    __int16 v20 = "_start";
    __int16 v8 = 259;
    goto LABEL_5;
  }
  if (!*((unsigned char *)a2 + 32))
  {
    __int16 v8 = 256;
LABEL_5:
    __int16 v23 = v8;
    goto LABEL_10;
  }
  uint64_t v9 = *((void *)a2 + 1);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    __int16 v10 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v7) = 2;
    __int16 v10 = a2;
  }
  __int16 v20 = (const char *)v10;
  uint64_t v21 = v9;
  uint64_t v22 = "_start";
  LOBYTE(v23) = v7;
  HIBYTE(v23) = 3;
LABEL_10:
  uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v20, 1);
  unint64_t v12 = (llvm::MCContext *)*((void *)this + 1);
  int v13 = *((unsigned __int8 *)a2 + 32);
  if (v13 == 1)
  {
    __int16 v20 = "_end";
    __int16 v14 = 259;
    goto LABEL_14;
  }
  if (!*((unsigned char *)a2 + 32))
  {
    __int16 v14 = 256;
LABEL_14:
    __int16 v23 = v14;
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)a2 + 1);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    std::string::size_type v16 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v13) = 2;
    std::string::size_type v16 = a2;
  }
  __int16 v20 = (const char *)v16;
  uint64_t v21 = v15;
  uint64_t v22 = "_end";
  LOBYTE(v23) = v13;
  HIBYTE(v23) = 3;
LABEL_19:
  uint64_t v17 = llvm::MCContext::createTempSymbol(v12, (const llvm::Twine *)&v20, 1);
  if (*(unsigned char *)(*((void *)this + 1) + 1626)) {
    uint64_t v18 = 8;
  }
  else {
    uint64_t v18 = 4;
  }
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t))(*(void *)this + 840))(this, v17, TempSymbol, v18);
  (*(void (**)(llvm::MCStreamer *, uint64_t, void))(*(void *)this + 192))(this, TempSymbol, 0);
  return v17;
}

uint64_t llvm::MCStreamer::emitDwarfLineStartLabel(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 192))(a1, a2, 0);
}

uint64_t llvm::MCStreamer::emitAssignment(llvm::MCStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::MCStreamer::visitUsedExpr(this, a3);
  *((void *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFE3FF | 0x800;
  *(void *)a2 &= 7uLL;
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v7();
  }
  return result;
}

llvm::MCStreamer *llvm::MCStreamer::visitUsedExpr(llvm::MCStreamer *this, const llvm::MCExpr **a2)
{
  __int16 v3 = this;
  while (2)
  {
    switch(*(unsigned char *)a2)
    {
      case 0:
        this = (llvm::MCStreamer *)llvm::MCStreamer::visitUsedExpr(v3, a2[2]);
        int v7 = (const llvm::MCExpr ***)(a2 + 3);
        goto LABEL_10;
      case 2:
        uint64_t v6 = a2[2];
        uint64_t v4 = *(uint64_t (**)(llvm::MCStreamer *, llvm::MCStreamer *))(*(void *)v3 + 56);
        uint64_t v5 = v3;
        goto LABEL_5;
      case 3:
        int v7 = (const llvm::MCExpr ***)(a2 + 2);
LABEL_10:
        a2 = *v7;
        continue;
      case 4:
        uint64_t v4 = (uint64_t (*)(llvm::MCStreamer *, llvm::MCStreamer *))*((void *)*(a2 - 1) + 7);
        uint64_t v5 = (llvm::MCStreamer *)(a2 - 1);
        uint64_t v6 = v3;
LABEL_5:
        this = (llvm::MCStreamer *)v4(v5, v6);
        break;
      default:
        return this;
    }
    return this;
  }
}

llvm::MCStreamer *llvm::MCStreamer::emitInstruction(llvm::MCStreamer *this, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    uint64_t v4 = this;
    unsigned int v5 = v2 - 1;
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2 + 16);
      if (*(unsigned char *)(v7 + 16 * v5) == 5) {
        this = llvm::MCStreamer::visitUsedExpr(v4, *(const llvm::MCExpr ***)(v7 + 16 * v5 + 8));
      }
      --v5;
    }
    while (v6);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiff(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  uint64_t v8 = *((void *)this + 1);
  *(void *)(v8 + 272) += 24;
  uint64_t v9 = *(void *)(v8 + 192);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v9 + 24 > *(void *)(v8 + 200) - v9)
  {
    unsigned int v26 = *(_DWORD *)(v8 + 216) >> 7;
    if (v26 >= 0x1E) {
      LOBYTE(v26) = 30;
    }
    uint64_t v27 = 4096 << v26;
    unint64_t v10 = (unint64_t)operator new(4096 << v26, (std::align_val_t)8uLL);
    unsigned int v28 = *(_DWORD *)(v8 + 216);
    if (v28 >= *(_DWORD *)(v8 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v8 + 208) + 8 * v28) = v10;
    ++*(_DWORD *)(v8 + 216);
    *(void *)(v8 + 200) = v10 + v27;
  }
  else
  {
    unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v8 + 192) = v10 + 24;
  int v11 = *(unsigned __int8 *)(*(void *)(v8 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v10 = 2;
  *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = a2;
  uint64_t v12 = *((void *)this + 1);
  *(void *)(v12 + 272) += 24;
  uint64_t v13 = *(void *)(v12 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 24 > *(void *)(v12 + 200) - v13)
  {
    unsigned int v29 = *(_DWORD *)(v12 + 216) >> 7;
    if (v29 >= 0x1E) {
      LOBYTE(v29) = 30;
    }
    uint64_t v30 = 4096 << v29;
    unint64_t v14 = (unint64_t)operator new(4096 << v29, (std::align_val_t)8uLL);
    unsigned int v31 = *(_DWORD *)(v12 + 216);
    if (v31 >= *(_DWORD *)(v12 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v12 + 208) + 8 * v31) = v14;
    ++*(_DWORD *)(v12 + 216);
    *(void *)(v12 + 200) = v14 + v30;
  }
  else
  {
    unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v12 + 192) = v14 + 24;
  int v15 = *(unsigned __int8 *)(*(void *)(v12 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v14 = 2;
  *(_DWORD *)(v14 + 1) = v15 | (*(unsigned __int8 *)(v14 + 4) << 24);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = a3;
  uint64_t v16 = *((void *)this + 1);
  *(void *)(v16 + 272) += 32;
  uint64_t v17 = *(void *)(v16 + 192);
  if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 32 > *(void *)(v16 + 200) - v17)
  {
    unsigned int v32 = *(_DWORD *)(v16 + 216) >> 7;
    if (v32 >= 0x1E) {
      LOBYTE(v32) = 30;
    }
    uint64_t v33 = 4096 << v32;
    unint64_t v18 = (unint64_t)operator new(4096 << v32, (std::align_val_t)8uLL);
    unsigned int v34 = *(_DWORD *)(v16 + 216);
    if (v34 >= *(_DWORD *)(v16 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v16 + 208) + 8 * v34) = v18;
    ++*(_DWORD *)(v16 + 216);
    *(void *)(v16 + 200) = v18 + v33;
  }
  else
  {
    unint64_t v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v16 + 192) = v18 + 32;
  *(unsigned char *)unint64_t v18 = 0;
  *(_DWORD *)(v18 + 1) = (*(unsigned __int8 *)(v18 + 4) << 24) | 0x12;
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = v10;
  *(void *)(v18 + 24) = v14;
  uint64_t v19 = (llvm::MCContext *)*((void *)this + 1);
  if (*(unsigned char *)(*((void *)v19 + 19) + 352))
  {
    char v39 = "set";
    __int16 v40 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v19, (const llvm::Twine *)&v39, 1);
    (*(void (**)(llvm::MCStreamer *, uint64_t, unint64_t))(*(void *)this + 280))(this, TempSymbol, v18);
    uint64_t v21 = *((void *)this + 1);
    *(void *)(v21 + 272) += 24;
    uint64_t v22 = *(void *)(v21 + 192);
    if (((v22 + 7) & 0xFFFFFFFFFFFFFFF8) - v22 + 24 > *(void *)(v21 + 200) - v22)
    {
      unsigned int v35 = *(_DWORD *)(v21 + 216) >> 7;
      if (v35 >= 0x1E) {
        LOBYTE(v35) = 30;
      }
      uint64_t v36 = 4096 << v35;
      unint64_t v23 = (unint64_t)operator new(4096 << v35, (std::align_val_t)8uLL);
      unsigned int v37 = *(_DWORD *)(v21 + 216);
      if (v37 >= *(_DWORD *)(v21 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v21 + 208) + 8 * v37) = v23;
      ++*(_DWORD *)(v21 + 216);
      *(void *)(v21 + 200) = v23 + v36;
    }
    else
    {
      unint64_t v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v21 + 192) = v23 + 24;
    int v24 = *(unsigned __int8 *)(*(void *)(v21 + 152) + 18) << 16;
    *(unsigned char *)unint64_t v23 = 2;
    *(_DWORD *)(v23 + 1) = v24 | (*(unsigned __int8 *)(v23 + 4) << 24);
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = TempSymbol;
    return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)this + 512))(this, v23, a4, 0);
  }
  else
  {
    unint64_t v38 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)this + 512);
    return v38(this, v18, a4, 0);
  }
}

void *llvm::MCStreamer::SwitchSection(void *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v3 = this[14] + 32 * *((unsigned int *)this + 30);
  uint64_t v4 = *(llvm::MCSection **)(v3 - 32);
  unsigned int v5 = *(const llvm::MCExpr **)(v3 - 24);
  *(void *)(v3 - 16) = v4;
  *(void *)(v3 - 8) = v5;
  if (v4 != a2 || v5 != a3)
  {
    uint64_t v9 = this;
    this = (void *)(*(uint64_t (**)(void *))(*this + 160))(this);
    uint64_t v10 = v9[14] + 32 * *((unsigned int *)v9 + 30);
    *(void *)(v10 - 32) = a2;
    *(void *)(v10 - 24) = a3;
    uint64_t v11 = *((void *)a2 + 1);
    if (v11)
    {
      unint64_t AssociatedFragment = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v11 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
        *(void *)uint64_t v11 = *(void *)v11 & 7 | AssociatedFragment;
      }
      if (!AssociatedFragment
        || (this = (void *)sub_1CC34BE58(v11, 1), this == (void *)llvm::MCSymbol::AbsolutePseudoFragment))
      {
        uint64_t v13 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + 192);
        return (void *)v13(v9, v11, 0);
      }
    }
  }
  return this;
}

uint64_t llvm::MCStreamer::emitVersionForTarget(uint64_t this, const llvm::Triple *a2, const llvm::VersionTuple *a3, const llvm::Triple *a4, const llvm::VersionTuple *a5)
{
  if (*((_DWORD *)a2 + 11) != 5) {
    return this;
  }
  unsigned int v6 = *((_DWORD *)a2 + 9);
  BOOL v7 = v6 > 0x21;
  uint64_t v8 = (1 << v6) & 0x3F0000888;
  if (v7 || v8 == 0) {
    return this;
  }
  uint64_t v12 = (llvm::MCStreamer *)this;
  this = llvm::Triple::getOSVersion(a2);
  if (!this) {
    return this;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v13 = *((_DWORD *)a2 + 9);
  if (v13 > 27)
  {
    switch(v13)
    {
      case 29:
        unint64_t WatchOSVersion = llvm::Triple::getWatchOSVersion(a2);
        break;
      case 30:
        unint64_t WatchOSVersion = llvm::Triple::getBridgeOSVersion(a2);
        break;
      case 31:
        unint64_t WatchOSVersion = llvm::Triple::getDriverKitVersion(a2);
        break;
      case 32:
      case 33:
        unint64_t WatchOSVersion = llvm::Triple::getOSVersion(a2);
        break;
      default:
        goto LABEL_39;
    }
    goto LABEL_10;
  }
  if (v13 == 7)
  {
LABEL_39:
    unint64_t WatchOSVersion = llvm::Triple::getiOSVersion(a2);
LABEL_10:
    uint64_t v16 = WatchOSVersion;
    uint64_t v17 = v15;
    goto LABEL_11;
  }
  llvm::Triple::getMacOSXVersion(a2, (llvm::VersionTuple *)&v38);
  uint64_t v16 = v38;
  uint64_t v17 = v39;
LABEL_11:
  v37[0] = sub_1CCBD4A18(a2, v16, v17);
  v37[1] = v18;
  int v19 = *((_DWORD *)a2 + 9);
  if (v19 <= 27)
  {
    unint64_t v20 = 0x8000000E0000000ALL;
    if (v19 == 7)
    {
      if (*((_DWORD *)a2 + 10) == 21) {
LABEL_13:
      }
        unint64_t v20 = 0;
      else {
LABEL_16:
      }
        unint64_t v20 = 12;
    }
  }
  else
  {
    switch(v19)
    {
      case 29:
        unint64_t v20 = 5;
        break;
      case 30:
      case 31:
      case 32:
      case 33:
        goto LABEL_13;
      default:
        goto LABEL_16;
    }
  }
  v36[0] = v20;
  v36[1] = 0;
  if (v20 & 0x7FFFFFFFFFFFFFFFLL) != 0 && (this = sub_1CC156834(v37, v36), (this))
  {
    char v21 = 0;
    if (!a4) {
      goto LABEL_29;
    }
  }
  else
  {
    int v22 = *((_DWORD *)a2 + 10);
    if (a4 && v22 == 21 && (*((_DWORD *)a4 + 9) & 0xFFFFFFF7) == 3)
    {
      v35[0] = 0;
      v35[1] = 0;
      llvm::MCStreamer::emitVersionForTarget(v12, a4, a5, 0, (const llvm::VersionTuple *)v35);
      uint64_t v23 = sub_1CCBD4A74(*((_DWORD *)a2 + 9), *((_DWORD *)a2 + 10));
      return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(void *)v12 + 256))(v12, v23);
    }
    uint64_t v24 = sub_1CCBD4A74(*((_DWORD *)a2 + 9), v22);
    this = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(void *)v12 + 248))(v12, v24);
    char v21 = 1;
    if (!a4) {
      goto LABEL_29;
    }
  }
  if ((*((_DWORD *)a2 + 9) & 0xFFFFFFF7) == 3 && *((_DWORD *)a4 + 10) == 21)
  {
    uint64_t v27 = llvm::Triple::getiOSVersion(a4);
    uint64_t v29 = sub_1CCBD4A18(a4, v27, v28);
    int v31 = v30;
    uint64_t v32 = sub_1CCBD4A74(*((_DWORD *)a4 + 9), *((_DWORD *)a4 + 10));
    if (v29 < 0) {
      uint64_t v33 = HIDWORD(v29) & 0x7FFFFFFF;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v31 < 0) {
      uint64_t v34 = v31 & 0x7FFFFFFF;
    }
    else {
      uint64_t v34 = 0;
    }
    this = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v12 + 256))(v12, v32, v29, v33, v34, *(void *)a5, *((void *)a5 + 1));
    if (v21) {
      return this;
    }
    goto LABEL_30;
  }
LABEL_29:
  if (v21) {
    return this;
  }
LABEL_30:
  int v25 = *((_DWORD *)a2 + 9);
  uint64_t v26 = 1;
  if (v25 <= 10)
  {
    uint64_t v26 = v25 == 3;
  }
  else if (v25 != 11)
  {
    if (v25 == 28) {
      uint64_t v26 = 2;
    }
    else {
      uint64_t v26 = 3;
    }
  }
  return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(void *)v12 + 240))(v12, v26);
}

uint64_t sub_1CCBD4A18(llvm::Triple *a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  v6[0] = llvm::Triple::getMinimumSupportedOSVersion(a1);
  v6[1] = v3;
  if (!(v6[0] & 0x7FFFFFFFFFFFFFFFLL | v3 & 0x7FFFFFFF7FFFFFFFLL) || (uint64_t v4 = v6, (sub_1CC156834(v7, v6) & 1) == 0)) {
    uint64_t v4 = v7;
  }
  return *v4;
}

uint64_t sub_1CCBD4A74(int a1, int a2)
{
  if (a1 <= 27)
  {
    if (a2 == 20) {
      int v5 = 7;
    }
    else {
      int v5 = 2;
    }
    if (a2 == 21) {
      unsigned int v6 = 6;
    }
    else {
      unsigned int v6 = v5;
    }
    if (a1 != 7) {
      unsigned int v6 = 1;
    }
    if (a1 == 3) {
      return 1;
    }
    else {
      return v6;
    }
  }
  else
  {
    switch(a1)
    {
      case 29:
        BOOL v2 = a2 == 20;
        unsigned int v3 = 4;
        unsigned int v4 = 9;
        goto LABEL_16;
      case 30:
        uint64_t result = 5;
        break;
      case 31:
        uint64_t result = 10;
        break;
      case 32:
        uint64_t result = 14;
        break;
      case 33:
        if (a2 == 20) {
          uint64_t result = 12;
        }
        else {
          uint64_t result = 11;
        }
        break;
      default:
        BOOL v2 = a2 == 20;
        unsigned int v3 = 3;
        unsigned int v4 = 8;
LABEL_16:
        if (v2) {
          uint64_t result = v4;
        }
        else {
          uint64_t result = v3;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1CCBD4B38(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(void **)(result + 8);
  while (v3 != a2)
  {
    uint64_t v4 = *--v3;
    uint64_t result = v4;
    *unsigned int v3 = 0;
    if (v4) {
      sub_1CD6BB07C(result);
    }
  }
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t sub_1CCBD4BA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v3;
  }
  int v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    BOOL v7 = (char *)operator new(88 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v8 = &v7[88 * v2];
  long long __p = v7;
  uint64_t v16 = v8;
  uint64_t v18 = &v7[88 * v6];
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 4) = 0;
  sub_1CCBBFCB8(v8 + 32, *(void *)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 65) = *(_OWORD *)(a2 + 65);
  uint64_t v17 = v8 + 88;
  sub_1CD6BAFD0(a1, &__p);
  uint64_t v10 = a1[1];
  uint64_t v12 = v16;
  uint64_t v11 = v17;
  if (v17 != v16)
  {
    do
    {
      int v13 = v11 - 88;
      unint64_t v20 = (void **)(v11 - 56);
      sub_1CC34C338(&v20);
      uint64_t v11 = v13;
    }
    while (v13 != v12);
  }
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

char *sub_1CCBD4D24(char **a1, uint64_t *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  long long v9 = &v8[8 * v2];
  uint64_t v10 = &v8[8 * v7];
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)long long v9 = v11;
  uint64_t v12 = v9 + 8;
  int v13 = *a1;
  unint64_t v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      v14 -= 8;
      *(void *)unint64_t v14 = 0;
      *((void *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    unint64_t v14 = *a1;
    uint64_t v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      uint64_t v17 = v18;
      *(void *)uint64_t v16 = 0;
      if (v18) {
        sub_1CD6BB07C(v17);
      }
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_1CCBD4E3C(uint64_t a1, _DWORD *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, unint64_t a10, const char **a11, uint64_t a12)
{
  int64x2_t v60 = 0uLL;
  uint64_t v61 = 0;
  llvm::SubtargetFeatures::Split(&v60, a6, a7);
  if (a10) {
    BOOL v17 = a12 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_95;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3)
  {
    if (a3 == 4 && *a2 == 1886152040)
    {
      sub_1CCBD6164(a9, a10, a11, a12);
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_25;
    }
    uint64_t v18 = sub_1CCBD5F98(a2, a3, (const char **)a9, a10);
    if (v18)
    {
      sub_1CCBD56B8(a1, (uint64_t)(v18 + 1), (uint64_t)a11, a12);
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_25;
    }
    int v19 = (llvm::raw_ostream *)llvm::errs(0);
    unint64_t v20 = v19;
    char v21 = (unsigned char *)*((void *)v19 + 4);
    if (*((unsigned char **)v19 + 3) == v21)
    {
      llvm::raw_ostream::write(v19, "'", 1uLL);
      int v22 = (void *)*((void *)v20 + 4);
    }
    else
    {
      *char v21 = 39;
      int v22 = (void *)(*((void *)v19 + 4) + 1);
      *((void *)v20 + 4) = v22;
    }
    if (a3 <= *((void *)v20 + 3) - (void)v22)
    {
      memcpy(v22, a2, a3);
      uint64_t v23 = (void *)(*((void *)v20 + 4) + a3);
      *((void *)v20 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v20, (const char *)a2, a3);
      uint64_t v23 = (void *)*((void *)v20 + 4);
    }
    if (*((void *)v20 + 3) - (void)v23 > 0x2EuLL)
    {
      qmemcpy(v23, "' is not a recognized processor for this target", 47);
      uint64_t v24 = (void *)(*((void *)v20 + 4) + 47);
      *((void *)v20 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v20, "' is not a recognized processor for this target", 0x2FuLL);
      uint64_t v24 = (void *)*((void *)v20 + 4);
    }
    if (*((void *)v20 + 3) - (void)v24 > 0x15uLL)
    {
      qmemcpy(v24, " (ignoring processor)\n", 22);
      *((void *)v20 + 4) += 22;
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_25;
    }
    llvm::raw_ostream::write(v20, " (ignoring processor)\n", 0x16uLL);
  }
  if (!a5) {
    goto LABEL_38;
  }
LABEL_25:
  int v25 = sub_1CCBD5F98(a4, a5, (const char **)a9, a10);
  if (v25)
  {
    sub_1CCBD56B8(a1, (uint64_t)(v25 + 6), (uint64_t)a11, a12);
  }
  else if (a5 != a3 || (int v25 = (const char **)memcmp(a4, a2, a3), v25))
  {
    uint64_t v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v25);
    uint64_t v27 = v26;
    uint64_t v28 = (unsigned char *)*((void *)v26 + 4);
    if (*((unsigned char **)v26 + 3) == v28)
    {
      llvm::raw_ostream::write(v26, "'", 1uLL);
      uint64_t v29 = (void *)*((void *)v27 + 4);
    }
    else
    {
      *uint64_t v28 = 39;
      uint64_t v29 = (void *)(*((void *)v26 + 4) + 1);
      *((void *)v27 + 4) = v29;
    }
    if (a5 <= *((void *)v27 + 3) - (void)v29)
    {
      memcpy(v29, a4, a5);
      int v30 = (void *)(*((void *)v27 + 4) + a5);
      *((void *)v27 + 4) = v30;
    }
    else
    {
      llvm::raw_ostream::write(v27, (const char *)a4, a5);
      int v30 = (void *)*((void *)v27 + 4);
    }
    if (*((void *)v27 + 3) - (void)v30 > 0x28uLL)
    {
      qmemcpy(v30, "' is not a recognized processor for this ", 41);
      int v31 = (void *)(*((void *)v27 + 4) + 41);
      *((void *)v27 + 4) = v31;
    }
    else
    {
      llvm::raw_ostream::write(v27, "' is not a recognized processor for this ", 0x29uLL);
      int v31 = (void *)*((void *)v27 + 4);
    }
    if (*((void *)v27 + 3) - (void)v31 > 0x1BuLL)
    {
      qmemcpy(v31, "target (ignoring processor)\n", 28);
      *((void *)v27 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v27, "target (ignoring processor)\n", 0x1CuLL);
    }
  }
LABEL_38:
  uint64_t v59 = a1;
  uint64_t v33 = v60.i64[1];
  uint64_t v32 = v60.i64[0];
  if (v60.i64[0] != v60.i64[1])
  {
    while (1)
    {
      char v34 = *(unsigned char *)(v32 + 23);
      size_t v35 = v34 >= 0 ? v34 & 0x7F : *(void *)(v32 + 8);
      if (v35 == 8) {
        break;
      }
      if (v35 != 5) {
        goto LABEL_64;
      }
      unint64_t v36 = *(unsigned __int8 *)(v32 + 23);
      unsigned int v37 = (unsigned __int8 *)v32;
      if ((*(unsigned char *)(v32 + 23) & 0x80) != 0)
      {
        unsigned int v37 = *(unsigned __int8 **)v32;
        unint64_t v36 = *(void *)(v32 + 8);
      }
      size_t v38 = v36 >= 5 ? 5 : v36;
      if (memcmp(v37, "+help", v38) || v36 != 5) {
        goto LABEL_64;
      }
      sub_1CCBD6164(a9, a10, a11, a12);
LABEL_68:
      v32 += 24;
      if (v32 == v33) {
        goto LABEL_95;
      }
    }
    unint64_t v40 = *(unsigned __int8 *)(v32 + 23);
    unint64_t v41 = (unsigned __int8 *)v32;
    if ((*(unsigned char *)(v32 + 23) & 0x80) != 0)
    {
      unint64_t v41 = *(unsigned __int8 **)v32;
      unint64_t v40 = *(void *)(v32 + 8);
    }
    if (v40 >= 8) {
      size_t v42 = 8;
    }
    else {
      size_t v42 = v40;
    }
    uint64_t v43 = (llvm *)memcmp(v41, "+cpuhelp", v42);
    if (v43) {
      BOOL v44 = 0;
    }
    else {
      BOOL v44 = v40 == 8;
    }
    if (v44)
    {
      if ((byte_1EA61DEB9 & 1) == 0)
      {
        uint64_t v46 = (llvm::raw_ostream *)llvm::errs(v43);
        int v47 = (void *)*((void *)v46 + 4);
        if (*((void *)v46 + 3) - (void)v47 > 0x20uLL)
        {
          qmemcpy(v47, "Available CPUs for this target:\n\n", 33);
          *((void *)v46 + 4) += 33;
        }
        else
        {
          uint64_t v46 = llvm::raw_ostream::write(v46, "Available CPUs for this target:\n\n", 0x21uLL);
        }
        uint64_t v48 = 96 * a10;
        uint64_t v49 = (const char **)a9;
        do
        {
          uint64_t v46 = (llvm::raw_ostream *)llvm::errs(v46);
          int v50 = v46;
          int64_t v51 = (unsigned char *)*((void *)v46 + 4);
          if (*((unsigned char **)v46 + 3) == v51)
          {
            uint64_t v46 = llvm::raw_ostream::write(v46, "\t", 1uLL);
            int v52 = (unsigned char *)*((void *)v50 + 4);
          }
          else
          {
            *int64_t v51 = 9;
            int v52 = (unsigned char *)(*((void *)v46 + 4) + 1);
            *((void *)v46 + 4) = v52;
          }
          uint64_t v53 = *v49;
          if (*v49)
          {
            uint64_t v46 = (llvm::raw_ostream *)strlen(*v49);
            uint64_t v54 = v46;
            if ((unint64_t)v46 <= *((void *)v50 + 3) - (void)v52)
            {
              if (v46)
              {
                uint64_t v46 = (llvm::raw_ostream *)memcpy(v52, v53, (size_t)v46);
                int v52 = (char *)v54 + *((void *)v50 + 4);
                *((void *)v50 + 4) = v52;
              }
            }
            else
            {
              uint64_t v46 = llvm::raw_ostream::write(v50, v53, (size_t)v46);
              int v52 = (unsigned char *)*((void *)v50 + 4);
            }
          }
          if (*((unsigned char **)v50 + 3) == v52)
          {
            uint64_t v46 = llvm::raw_ostream::write(v50, "\n", 1uLL);
          }
          else
          {
            *int v52 = 10;
            ++*((void *)v50 + 4);
          }
          v49 += 12;
          v48 -= 96;
        }
        while (v48);
        uint64_t v55 = (llvm::raw_ostream *)llvm::errs(v46);
        int v56 = (unsigned char *)*((void *)v55 + 4);
        if ((unint64_t)v56 >= *((void *)v55 + 3))
        {
          uint64_t v55 = llvm::raw_ostream::write(v55, 10);
        }
        else
        {
          *((void *)v55 + 4) = v56 + 1;
          *int v56 = 10;
        }
        uint64_t v57 = (llvm::raw_ostream *)llvm::errs(v55);
        uint64_t v58 = (void *)*((void *)v57 + 4);
        if (*((void *)v57 + 3) - (void)v58 > 0x7DuLL)
        {
          qmemcpy(v58, "Use -mcpu or -mtune to specify the target's processor.\nFor example, clang --target=aarch64-unknown-linux-gui -mcpu=cortex-a35\n", 126);
          *((void *)v57 + 4) += 126;
        }
        else
        {
          llvm::raw_ostream::write(v57, "Use -mcpu or -mtune to specify the target's processor.\nFor example, clang --target=aarch64-unknown-linux-gui -mcpu=cortex-a35\n", 0x7EuLL);
        }
        byte_1EA61DEB9 = 1;
      }
      goto LABEL_68;
    }
LABEL_64:
    if (v34 >= 0) {
      int64_t v45 = (unsigned __int8 *)v32;
    }
    else {
      int64_t v45 = *(unsigned __int8 **)v32;
    }
    sub_1CCBD5BBC(v59, v45, v35, a11, a12);
    goto LABEL_68;
  }
LABEL_95:
  unsigned int v62 = &v60;
  sub_1CB8338B8((void ***)&v62);
}

double llvm::MCSubtargetInfo::setDefaultFeatures(uint64_t a1, _DWORD *a2, size_t a3, const void *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  sub_1CCBD4E3C((uint64_t)&__dst, a2, a3, a4, a5, (uint64_t)a6, a7, a8, *(uint64_t **)(a1 + 120), *(void *)(a1 + 128), *(const char ***)(a1 + 104), *(void *)(a1 + 112));
  long long v11 = v18;
  *(_OWORD *)(a1 + 192) = __dst;
  *(_OWORD *)(a1 + 208) = v11;
  *(void *)(a1 + 224) = v19;
  if (a7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a7 >= 0x17)
  {
    uint64_t v13 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17) {
      uint64_t v13 = a7 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = a7;
    *(void *)&long long v18 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v18) = a7;
  p_dst = &__dst;
  if (a7) {
LABEL_8:
  }
    memmove(p_dst, a6, a7);
  *((unsigned char *)p_dst + a7) = 0;
  uint64_t v15 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v15);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v15 = __dst;
  *(void *)(a1 + 248) = v18;
  return result;
}

uint64_t llvm::MCSubtargetInfo::MCSubtargetInfo(uint64_t a1, long long *a2, std::string::value_type *__s, std::string::size_type __sz, const std::string::value_type *a5, std::string::size_type a6, const std::string::value_type *a7, std::string::size_type a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, __s, __sz, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

{
  const std::string::value_type *v18;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  _DWORD *v26;
  size_t v27;
  size_t v28;
  char v29;
  BOOL v30;
  _DWORD *v31;
  size_t v32;
  size_t v33;
  std::string::size_type v36;
  long long *v37;

  long long v18 = __s;
  *(void *)a1 = &unk_1F26306C8;
  unint64_t v20 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    unsigned int v37 = a2;
    unint64_t v36 = __sz;
    sub_1CB8BDF7C(v20, *(const void **)a2, *((void *)a2 + 1));
    a2 = v37;
    long long v18 = __s;
    __sz = v36;
  }
  else
  {
    char v21 = *a2;
    *(void *)(v20 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v20 = v21;
  }
  int v22 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 48) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 32) = v22;
  std::string::__init((std::string *)(a1 + 56), v18, __sz);
  std::string::__init((std::string *)(a1 + 80), a5, a6);
  *(void *)(a1 + 104) = a9;
  *(void *)(a1 + 112) = a10;
  *(void *)(a1 + 120) = a11;
  *(void *)(a1 + 128) = a12;
  *(void *)(a1 + 136) = a13;
  *(void *)(a1 + 144) = a14;
  *(void *)(a1 + 152) = a15;
  *(void *)(a1 + 168) = a16;
  *(void *)(a1 + 176) = a17;
  *(void *)(a1 + 184) = a18;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v24 = *(unsigned char *)(a1 + 79);
  int v25 = v24 < 0;
  if (v24 >= 0) {
    uint64_t v26 = (_DWORD *)(a1 + 56);
  }
  else {
    uint64_t v26 = *(_DWORD **)(a1 + 56);
  }
  uint64_t v27 = v24 & 0x7F;
  if (v25) {
    uint64_t v28 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v28 = v27;
  }
  uint64_t v29 = *(unsigned char *)(a1 + 103);
  int v30 = v29 < 0;
  if (v29 >= 0) {
    int v31 = (_DWORD *)(a1 + 80);
  }
  else {
    int v31 = *(_DWORD **)(a1 + 80);
  }
  uint64_t v32 = v29 & 0x7F;
  if (v30) {
    uint64_t v33 = *(void *)(a1 + 88);
  }
  else {
    uint64_t v33 = v32;
  }
  *(_OWORD *)(a1 + 224) = 0uLL;
  *(_OWORD *)(a1 + 240) = 0uLL;
  llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, v26, v28, v31, v33, a7, a8, v23);
  return a1;
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(__n128 *this@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  this[12].n128_u64[a2 >> 6] ^= 1 << a2;
  __n128 result = this[12];
  __n128 v4 = this[13];
  *a3 = result;
  a3[1] = v4;
  a3[2].n128_u64[0] = this[14].n128_u64[0];
  return result;
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  __n128 v4 = (__n128 *)(a1 + 192);
  do
  {
    v4->n128_u64[v3] ^= *(void *)(a2 + v3 * 8);
    ++v3;
  }
  while (v3 != 5);
  __n128 result = *v4;
  long long v6 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a3 = *v4;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = *(void *)(a1 + 224);
  return result;
}

__n128 llvm::MCSubtargetInfo::SetFeatureBitsTransitively@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1CCBD56B8(a1 + 192, a2, *(void *)(a1 + 104), *(void *)(a1 + 112));
  __n128 result = *(__n128 *)(a1 + 192);
  long long v6 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = *(void *)(a1 + 224);
  return result;
}

uint64_t sub_1CCBD56B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  for (uint64_t i = 0; i != 40; i += 8)
    *(void *)(result + i) |= *(void *)(a2 + i);
  if (a4)
  {
    uint64_t v9 = a4 << 6;
    uint64_t v10 = a3 + 24;
    do
    {
      if ((*(void *)(a2 + (((unint64_t)*(unsigned int *)(v10 - 8) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v10 - 8))) {
        __n128 result = sub_1CCBD56B8(v7, v10, a3, a4);
      }
      v10 += 64;
      v9 -= 64;
    }
    while (v9);
  }
  return result;
}

__n128 llvm::MCSubtargetInfo::ClearFeatureBitsTransitively@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = 0;
  uint64_t v7 = a1 + 192;
  do
  {
    uint64_t v8 = v6 >> 6;
    if (((1 << v6) & *(void *)(a2 + 8 * v8)) != 0)
    {
      *(void *)(v7 + 8 * v8) &= ~(1 << v6);
      sub_1CCBD57E8(v7, v6, *(void *)(a1 + 104), *(void *)(a1 + 112));
    }
    ++v6;
  }
  while (v6 != 320);
  __n128 result = *(__n128 *)v7;
  long long v10 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v7;
  *(_OWORD *)(a3 + 16) = v10;
  *(void *)(a3 + 32) = *(void *)(v7 + 32);
  return result;
}

uint64_t sub_1CCBD57E8(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    uint64_t v5 = 1 << a2;
    uint64_t v6 = a2 >> 6;
    uint64_t v7 = a4 << 6;
    uint64_t v8 = a3 + 24;
    do
    {
      if ((*(void *)(v8 + 8 * v6) & v5) != 0)
      {
        *(void *)(v4 + (((unint64_t)*(unsigned int *)(v8 - 8) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v8 - 8));
        __n128 result = sub_1CCBD57E8(v4);
      }
      v8 += 64;
      v7 -= 64;
    }
    while (v7);
  }
  return result;
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = *a2;
  if (v8 == 45 || (uint64_t v9 = a2, v10 = a3, v8 == 43))
  {
    if (a3) {
      uint64_t v9 = a2 + 1;
    }
    else {
      uint64_t v9 = a2;
    }
    size_t v10 = a3 - (a3 != 0);
  }
  uint64_t v12 = *(const char ***)(a1 + 104);
  unint64_t v11 = *(void *)(a1 + 112);
  uint64_t v13 = sub_1CCBD5A94(v9, v10, v12, v11);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = a1 + 192;
    unint64_t v16 = *((unsigned int *)v14 + 4);
    uint64_t v17 = 1 << v16;
    unint64_t v18 = v16 >> 6;
    uint64_t v19 = *(void *)(a1 + 192 + 8 * (v16 >> 6));
    if (((1 << v16) & v19) != 0)
    {
      *(void *)(v15 + 8 * v18) = v19 & ~v17;
      sub_1CCBD57E8(v15, v16, (uint64_t)v12, v11);
    }
    else
    {
      *(void *)(v15 + 8 * v18) = v17 | v19;
      sub_1CCBD56B8(v15, (uint64_t)(v14 + 3), (uint64_t)v12, v11);
    }
  }
  else
  {
    unint64_t v20 = (llvm::raw_ostream *)llvm::errs(0);
    char v21 = v20;
    int v22 = (unsigned char *)*((void *)v20 + 4);
    if (*((unsigned char **)v20 + 3) == v22)
    {
      llvm::raw_ostream::write(v20, "'", 1uLL);
      uint64_t v23 = (void *)*((void *)v21 + 4);
    }
    else
    {
      *int v22 = 39;
      uint64_t v23 = (void *)(*((void *)v20 + 4) + 1);
      *((void *)v21 + 4) = v23;
    }
    if (a3 <= *((void *)v21 + 3) - (void)v23)
    {
      if (a3)
      {
        memcpy(v23, a2, a3);
        uint64_t v23 = (void *)(*((void *)v21 + 4) + a3);
        *((void *)v21 + 4) = v23;
      }
    }
    else
    {
      llvm::raw_ostream::write(v21, (const char *)a2, a3);
      uint64_t v23 = (void *)*((void *)v21 + 4);
    }
    if (*((void *)v21 + 3) - (void)v23 > 0x2CuLL)
    {
      qmemcpy(v23, "' is not a recognized feature for this target", 45);
      uint64_t v24 = *((void *)v21 + 4) + 45;
      *((void *)v21 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v21, "' is not a recognized feature for this target", 0x2DuLL);
      uint64_t v24 = *((void *)v21 + 4);
    }
    if ((unint64_t)(*((void *)v21 + 3) - v24) > 0x13)
    {
      *(_DWORD *)(v24 + 16) = 170485106;
      *(_OWORD *)uint64_t v24 = *(_OWORD *)" (ignoring feature)\n";
      *((void *)v21 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v21, " (ignoring feature)\n", 0x14uLL);
    }
  }
  __n128 result = *(__n128 *)(a1 + 192);
  long long v26 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v26;
  *(void *)(a4 + 32) = *(void *)(a1 + 224);
  return result;
}

const char **sub_1CCBD5A94(const void *a1, size_t a2, const char **a3, unint64_t a4)
{
  if (a4)
  {
    int v8 = a3;
    unint64_t v9 = a4;
    do
    {
      size_t v10 = (char **)&v8[8 * (v9 >> 1)];
      uint64_t v12 = *v10;
      unint64_t v11 = (const char **)(v10 + 8);
      BOOL v13 = sub_1CD6BB8CC(v12, a1, a2);
      if (v13) {
        v9 += ~(v9 >> 1);
      }
      else {
        v9 >>= 1;
      }
      if (v13) {
        int v8 = v11;
      }
    }
    while (v9);
  }
  else
  {
    int v8 = a3;
  }
  if (v8 == &a3[8 * a4]) {
    return 0;
  }
  size_t v14 = *v8 ? strlen(*v8) : 0;
  if (v14 != a2) {
    return 0;
  }
  if (a2 && memcmp(*v8, a1, a2)) {
    return 0;
  }
  return v8;
}

__n128 llvm::MCSubtargetInfo::ApplyFeatureFlag@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1CCBD5BBC(a1 + 192, a2, a3, *(const char ***)(a1 + 104), *(void *)(a1 + 112));
  __n128 result = *(__n128 *)(a1 + 192);
  long long v7 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v7;
  *(void *)(a4 + 32) = *(void *)(a1 + 224);
  return result;
}

double sub_1CCBD5BBC(uint64_t a1, unsigned __int8 *a2, size_t a3, const char **a4, unint64_t a5)
{
  int v10 = *a2;
  if (v10 == 45 || (unint64_t v11 = a2, v12 = a3, v10 == 43))
  {
    if (a3) {
      unint64_t v11 = a2 + 1;
    }
    else {
      unint64_t v11 = a2;
    }
    size_t v12 = a3 - (a3 != 0);
  }
  BOOL v13 = sub_1CCBD5A94(v11, v12, a4, a5);
  if (v13)
  {
    unint64_t v14 = *((unsigned int *)v13 + 4);
    unint64_t v15 = v14 >> 6;
    uint64_t v16 = *(void *)(a1 + 8 * (v14 >> 6));
    uint64_t v17 = 1 << v14;
    if (v10 == 43)
    {
      *(void *)(a1 + 8 * v15) = v17 | v16;
      sub_1CCBD56B8(a1, (uint64_t)(v13 + 3), (uint64_t)a4, a5);
    }
    else
    {
      *(void *)(a1 + 8 * v15) = v16 & ~v17;
      sub_1CCBD57E8(a1, v14, (uint64_t)a4, a5);
    }
  }
  else
  {
    uint64_t v19 = (llvm::raw_ostream *)llvm::errs(0);
    unint64_t v20 = v19;
    char v21 = (unsigned char *)*((void *)v19 + 4);
    if (*((unsigned char **)v19 + 3) == v21)
    {
      llvm::raw_ostream::write(v19, "'", 1uLL);
      int v22 = (void *)*((void *)v20 + 4);
    }
    else
    {
      *char v21 = 39;
      int v22 = (void *)(*((void *)v19 + 4) + 1);
      *((void *)v20 + 4) = v22;
    }
    if (a3 <= *((void *)v20 + 3) - (void)v22)
    {
      if (a3)
      {
        memcpy(v22, a2, a3);
        int v22 = (void *)(*((void *)v20 + 4) + a3);
        *((void *)v20 + 4) = v22;
      }
    }
    else
    {
      llvm::raw_ostream::write(v20, (const char *)a2, a3);
      int v22 = (void *)*((void *)v20 + 4);
    }
    if (*((void *)v20 + 3) - (void)v22 > 0x2CuLL)
    {
      qmemcpy(v22, "' is not a recognized feature for this target", 45);
      uint64_t v23 = *((void *)v20 + 4) + 45;
      *((void *)v20 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v20, "' is not a recognized feature for this target", 0x2DuLL);
      uint64_t v23 = *((void *)v20 + 4);
    }
    if ((unint64_t)(*((void *)v20 + 3) - v23) > 0x13)
    {
      *(_DWORD *)(v23 + 16) = 170485106;
      double result = *(double *)" (ignoring feature)\n";
      *(_OWORD *)uint64_t v23 = *(_OWORD *)" (ignoring feature)\n";
      *((void *)v20 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v20, " (ignoring feature)\n", 0x14uLL);
    }
  }
  return result;
}

BOOL llvm::MCSubtargetInfo::checkFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v27 = 0uLL;
  uint64_t v28 = 0;
  llvm::SubtargetFeatures::Split(&v27, a2, a3);
  uint64_t v26 = 0;
  memset(__s2, 0, sizeof(__s2));
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v5 = v27.i64[1];
  for (uint64_t i = v27.i64[0]; i != v5; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      sub_1CB8BDF7C((uint64_t)__p, *(const void **)i, *(void *)(i + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)i;
      *(void *)&long long v21 = *(void *)(i + 16);
      *(_OWORD *)long long __p = v6;
    }
    if ((SBYTE7(v21) & 0x80u) == 0) {
      long long v7 = (unsigned __int8 *)__p;
    }
    else {
      long long v7 = (unsigned __int8 *)__p[0];
    }
    if ((SBYTE7(v21) & 0x80u) == 0) {
      size_t v8 = BYTE7(v21) & 0x7F;
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    sub_1CCBD5BBC((uint64_t)__s2, v7, v8, *(const char ***)(a1 + 104), *(void *)(a1 + 112));
    char v9 = BYTE7(v21);
    int v10 = (unsigned __int8 *)__p[0];
    if ((SBYTE7(v21) & 0x80u) == 0) {
      unint64_t v11 = __p;
    }
    else {
      unint64_t v11 = (void **)__p[0];
    }
    if (*(unsigned char *)v11 == 45)
    {
      *(unsigned char *)unint64_t v11 = 43;
      char v9 = BYTE7(v21);
      int v10 = (unsigned __int8 *)__p[0];
    }
    int v12 = v9;
    if (v9 >= 0) {
      BOOL v13 = (unsigned __int8 *)__p;
    }
    else {
      BOOL v13 = v10;
    }
    unint64_t v14 = (void *)(v9 & 0x7F);
    if (v12 >= 0) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = __p[1];
    }
    sub_1CCBD5BBC((uint64_t)v23, v13, (size_t)v15, *(const char ***)(a1 + 104), *(void *)(a1 + 112));
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v16 = 0;
  long long v17 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 192);
  long long v21 = v17;
  uint64_t v22 = *(void *)(a1 + 224);
  do
  {
    __p[v16] = (void *)((unint64_t)__p[v16] & *(void *)((unsigned char *)v23 + v16 * 8));
    ++v16;
  }
  while (v16 != 5);
  BOOL v18 = memcmp(__p, __s2, 0x28uLL) == 0;
  *(void *)&__s2[0] = &v27;
  sub_1CB8338B8((void ***)__s2);
  return v18;
}

const char **sub_1CCBD5F98(const void *a1, size_t a2, const char **a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = a3;
    unint64_t v7 = a4;
    do
    {
      size_t v8 = &v6[12 * (v7 >> 1)];
      if (*v8) {
        size_t v9 = strlen(*v8);
      }
      else {
        size_t v9 = 0;
      }
      if (a2 >= v9) {
        size_t v10 = v9;
      }
      else {
        size_t v10 = a2;
      }
      if (v10 && (int v11 = memcmp(*v8, a1, v10)) != 0)
      {
        int v12 = (v11 >> 31) | 1;
      }
      else
      {
        if (v9 < a2) {
          int v12 = -1;
        }
        else {
          int v12 = 1;
        }
        if (v9 == a2) {
          int v12 = 0;
        }
      }
      if (v12 == -1) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v12 == -1) {
        long long v6 = v8 + 12;
      }
    }
    while (v7);
  }
  else
  {
    long long v6 = a3;
  }
  if (v6 == &a3[12 * a4]) {
    return 0;
  }
  size_t v13 = *v6 ? strlen(*v6) : 0;
  if (v13 != a2) {
    return 0;
  }
  if (a2 && memcmp(*v6, a1, a2)) {
    return 0;
  }
  return v6;
}

__n128 llvm::MCSubtargetInfo::getInstrItineraryForCPU@<Q0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  SchedModelForCPU = llvm::MCSubtargetInfo::getSchedModelForCPU(a1, a2, a3);
  uint64_t v7 = *(void *)(a1 + 184);
  __n128 result = *(__n128 *)(a1 + 168);
  long long v9 = SchedModelForCPU[3];
  *(_OWORD *)(a4 + 32) = SchedModelForCPU[2];
  *(_OWORD *)(a4 + 48) = v9;
  *(void *)(a4 + 64) = *((void *)SchedModelForCPU + 8);
  long long v10 = SchedModelForCPU[1];
  *(_OWORD *)a4 = *SchedModelForCPU;
  *(_OWORD *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 72) = result;
  uint64_t v11 = *(void *)(a4 + 56);
  *(void *)(a4 + 88) = v7;
  *(void *)(a4 + 96) = v11;
  return result;
}

__n128 llvm::MCSubtargetInfo::initInstrItins(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(long long **)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 184);
  __n128 result = *(__n128 *)((char *)v2 + 56);
  long long v5 = *(_OWORD *)(a1 + 168);
  long long v6 = *v2;
  long long v7 = v2[1];
  long long v8 = v2[2];
  *(void *)(a2 + 48) = *((void *)v2 + 6);
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)a2 = v6;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v5;
  *(void *)(a2 + 88) = v3;
  *(void *)(a2 + 96) = result.n128_u64[0];
  return result;
}

uint64_t *sub_1CCBD6164(uint64_t *result, uint64_t a2, const char **a3, uint64_t a4)
{
  if (byte_1EA61DEB8) {
    return result;
  }
  long long v7 = result;
  if (a2)
  {
    long long v8 = 0;
    uint64_t v9 = 96 * a2;
    long long v10 = (const char **)result;
    do
    {
      uint64_t v11 = *v10;
      v10 += 12;
      __n128 result = (uint64_t *)strlen(v11);
      if (v8 <= result) {
        long long v8 = result;
      }
      v9 -= 96;
    }
    while (v9);
  }
  else
  {
    LODWORD(v8) = 0;
  }
  uint64_t v12 = a4 << 6;
  if (a4)
  {
    size_t v13 = 0;
    uint64_t v14 = a4 << 6;
    unint64_t v15 = a3;
    do
    {
      uint64_t v16 = *v15;
      v15 += 8;
      __n128 result = (uint64_t *)strlen(v16);
      if (v13 <= result) {
        size_t v13 = result;
      }
      v14 -= 64;
    }
    while (v14);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  long long v17 = (llvm *)llvm::errs((llvm *)result);
  BOOL v18 = (void *)*((void *)v17 + 4);
  if (*((void *)v17 + 3) - (void)v18 > 0x20uLL)
  {
    qmemcpy(v18, "Available CPUs for this target:\n\n", 33);
    *((void *)v17 + 4) += 33;
    if (a2)
    {
LABEL_18:
      uint64_t v19 = 96 * a2;
      do
      {
        unint64_t v20 = (llvm::raw_ostream *)llvm::errs(v17);
        int v31 = &unk_1F2630738;
        uint64_t v21 = *v7;
        v7 += 12;
        uint64_t v32 = "  %-*s - Select the %s processor.\n";
        int v33 = (int)v8;
        *(void *)&long long v34 = v21;
        *((void *)&v34 + 1) = v21;
        long long v17 = llvm::raw_ostream::operator<<(v20, (uint64_t)&v31);
        v19 -= 96;
      }
      while (v19);
    }
  }
  else
  {
    long long v17 = llvm::raw_ostream::write(v17, "Available CPUs for this target:\n\n", 0x21uLL);
    if (a2) {
      goto LABEL_18;
    }
  }
  uint64_t v22 = (llvm::raw_ostream *)llvm::errs(v17);
  uint64_t v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    uint64_t v22 = llvm::raw_ostream::write(v22, 10);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *uint64_t v23 = 10;
  }
  uint64_t v24 = (llvm::raw_ostream *)llvm::errs(v22);
  int v25 = (void *)*((void *)v24 + 4);
  if (*((void *)v24 + 3) - (void)v25 > 0x24uLL)
  {
    qmemcpy(v25, "Available features for this target:\n\n", 37);
    *((void *)v24 + 4) += 37;
    if (!a4) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v24 = llvm::raw_ostream::write(v24, "Available features for this target:\n\n", 0x25uLL);
    if (!a4) {
      goto LABEL_26;
    }
  }
  do
  {
    uint64_t v26 = (llvm::raw_ostream *)llvm::errs(v24);
    int v31 = &unk_1F2630738;
    uint64_t v32 = "  %-*s - %s.\n";
    int v33 = (int)v13;
    long long v27 = *(_OWORD *)a3;
    a3 += 8;
    long long v34 = v27;
    uint64_t v24 = llvm::raw_ostream::operator<<(v26, (uint64_t)&v31);
    v12 -= 64;
  }
  while (v12);
LABEL_26:
  uint64_t v28 = (llvm::raw_ostream *)llvm::errs(v24);
  uint64_t v29 = (unsigned char *)*((void *)v28 + 4);
  if ((unint64_t)v29 >= *((void *)v28 + 3))
  {
    uint64_t v28 = llvm::raw_ostream::write(v28, 10);
  }
  else
  {
    *((void *)v28 + 4) = v29 + 1;
    unsigned char *v29 = 10;
  }
  __n128 result = (uint64_t *)llvm::errs(v28);
  int v30 = (void *)result[4];
  if ((unint64_t)(result[3] - (void)v30) > 0x74)
  {
    qmemcpy(v30, "Use +feature to enable a feature, or -feature to disable it.\nFor example, llc -mcpu=mycpu -mattr=+feature1,-feature2\n", 117);
    result[4] += 117;
  }
  else
  {
    __n128 result = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "Use +feature to enable a feature, or -feature to disable it.\nFor example, llc -mcpu=mycpu -mattr=+feature1,-feature2\n", 0x75uLL);
  }
  byte_1EA61DEB8 = 1;
  return result;
}

uint64_t llvm::MCSymbol::operator new(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB906F34((uint64_t *)(a3 + 192), a1 + 8 * (a2 != 0), 3) + 8 * (a2 != 0);
}

uint64_t llvm::MCSymbol::setVariableValue(uint64_t this, const llvm::MCExpr *a2)
{
  *(void *)(this + 24) = a2;
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFFFFE3FF | 0x800;
  *(void *)this &= 7uLL;
  return this;
}

uint64_t llvm::MCSymbolELF::setIsBindingSet(uint64_t this)
{
  *(_WORD *)(this + 12) |= 0x1000u;
  return this;
}

double llvm::MCTargetOptions::MCTargetOptions(llvm::MCTargetOptions *this)
{
  *(_WORD *)this = *(_WORD *)this & 0xC000 | 0x1000;
  *(void *)((char *)this + 4) = 2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

{
  double result;

  *(_WORD *)this = *(_WORD *)this & 0xC000 | 0x1000;
  *(void *)((char *)this + 4) = 2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

char *llvm::MCTargetOptions::getAssemblyLanguage(llvm::MCTargetOptions *this)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v1 = (char *)this + 40;
  uint64_t v2 = v3;
  if (v1[23] >= 0) {
    return v1;
  }
  return (char *)v2;
}

uint64_t llvm::mc::getRelaxAll(llvm::mc *this)
{
  return byte_1EBCEE7C8;
}

uint64_t llvm::mc::getExplicitRelaxAll(llvm::mc *this)
{
  if (word_1EBCEE750) {
    return byte_1EBCEE7C8 | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t llvm::mc::getIncrementalLinkerCompatible(llvm::mc *this)
{
  return byte_1EBCEE888;
}

uint64_t llvm::mc::getDwarfVersion(llvm::mc *this)
{
  return dword_1EBCEE948;
}

uint64_t llvm::mc::getDwarf64(llvm::mc *this)
{
  return byte_1EBCEEA08;
}

uint64_t llvm::mc::getEmitDwarfUnwind(llvm::mc *this)
{
  return dword_1EBCEF058;
}

uint64_t llvm::mc::getShowMCInst(llvm::mc *this)
{
  return byte_1EBCEEAC8;
}

uint64_t llvm::mc::getFatalWarnings(llvm::mc *this)
{
  return byte_1EBCEEB88;
}

uint64_t llvm::mc::getNoWarn(llvm::mc *this)
{
  return byte_1EBCEEC48;
}

uint64_t llvm::mc::getNoDeprecatedWarn(llvm::mc *this)
{
  return byte_1EBCEED08;
}

uint64_t llvm::mc::getNoTypeCheck(llvm::mc *this)
{
  return byte_1EBCEEDC8;
}

void *llvm::mc::getABIName@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EBCEEE9F < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EBCEEE88, qword_1EBCEEE90);
  }
  uint64_t v2 = *(void *)(qword_1EBCEE648 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCEE648 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

void *llvm::mc::getAsSecureLogFile@<X0>(uint64_t a1@<X8>)
{
  if (byte_1EBCEEF87 < 0) {
    return sub_1CB8BDF7C(a1, (const void *)qword_1EBCEEF70, qword_1EBCEEF78);
  }
  uint64_t v2 = *(void *)(qword_1EBCEE650 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1EBCEE650 + 128);
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags(uint64_t this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE658, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = this;
    int v2 = __cxa_guard_acquire(&qword_1EBCEE658);
    this = v1;
    if (v2)
    {
      *(void *)&long long v52 = "When used with filetype=obj, relax all fixups in the emitted object file";
      *((void *)&v52 + 1) = 72;
      sub_1CD3F4B2C((llvm::cl::Option *)algn_1EBCEE748, "mc-relax-all", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, algn_1EBCEE748, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE658);
      this = v1;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE660, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = this;
    int v4 = __cxa_guard_acquire(&qword_1EBCEE660);
    this = v3;
    if (v4)
    {
      uint64_t v5 = sub_1CB883A14((uint64_t)qword_1EBCEE808, 0, 0);
      byte_1EBCEE888 = 0;
      qword_1EBCEE898 = 0;
      qword_1EBCEE890 = (uint64_t)&unk_1F25EDE58;
      qword_1EBCEE808[0] = (uint64_t)&unk_1F26440A0;
      qword_1EBCEE8A0 = (uint64_t)&unk_1F2643CC0;
      qword_1EBCEE8A8 = (uint64_t)&unk_1F25EDE78;
      qword_1EBCEE8C0 = (uint64_t)&qword_1EBCEE8A8;
      llvm::cl::Option::setArgStr(v5, "incremental-linker-compatible", 0x1DuLL);
      qword_1EBCEE828 = (uint64_t)"When used with filetype=obj, emit an object file which can be used with an incremental linker";
      unk_1EBCEE830 = 93;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCEE808);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCEE808, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE660);
      this = v3;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE668, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = this;
    int v7 = __cxa_guard_acquire(&qword_1EBCEE668);
    this = v6;
    if (v7)
    {
      uint64_t v8 = sub_1CB883A14((uint64_t)qword_1EBCEE8C8, 0, 0);
      dword_1EBCEE948 = 0;
      qword_1EBCEE958 = 0;
      qword_1EBCEE950 = (uint64_t)&unk_1F25F74C8;
      qword_1EBCEE8C8[0] = (uint64_t)&unk_1F2643F68;
      qword_1EBCEE960 = (uint64_t)&unk_1F2643D20;
      qword_1EBCEE968 = (uint64_t)&unk_1F25F7480;
      qword_1EBCEE980 = (uint64_t)&qword_1EBCEE968;
      llvm::cl::Option::setArgStr(v8, "dwarf-version", 0xDuLL);
      qword_1EBCEE8E8 = (uint64_t)"Dwarf version";
      qword_1EBCEE8F0 = 13;
      dword_1EBCEE948 = 0;
      BYTE4(qword_1EBCEE958) = 1;
      LODWORD(qword_1EBCEE958) = 0;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCEE8C8);
      __cxa_atexit((void (*)(void *))sub_1CBB1C45C, qword_1EBCEE8C8, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE668);
      this = v6;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE670, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = this;
    int v10 = __cxa_guard_acquire(&qword_1EBCEE670);
    this = v9;
    if (v10)
    {
      *(void *)&long long v52 = "Generate debugging info in the 64-bit DWARF format";
      *((void *)&v52 + 1) = 50;
      sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCEE988, "dwarf64", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEE988, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE670);
      this = v9;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE678, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = this;
    int v12 = __cxa_guard_acquire(&qword_1EBCEE678);
    this = v11;
    if (v12)
    {
      *(void *)&long long v52 = v53;
      v53[0] = "always";
      v53[1] = 6;
      int v54 = 0;
      uint64_t v55 = "Always emit EH frame entries";
      uint64_t v56 = 28;
      uint64_t v57 = "no-compact-unwind";
      uint64_t v58 = 17;
      int v59 = 1;
      int64x2_t v60 = "Only emit EH frame entries when compact unwind is not available";
      uint64_t v61 = 63;
      unsigned int v62 = "default";
      uint64_t v63 = 7;
      int v64 = 2;
      BOOL v65 = "Use target platform default";
      uint64_t v66 = 27;
      *((void *)&v52 + 1) = 0x400000003;
      uint64_t v13 = sub_1CB883A14((uint64_t)qword_1EBCEEFD8, 0, 0);
      dword_1EBCEF058 = 0;
      qword_1EBCEF060 = (uint64_t)&unk_1F2630810;
      *(void *)&dword_1EBCEF068 = 0;
      qword_1EBCEEFD8[0] = (uint64_t)&unk_1F2630758;
      qword_1EBCEF070 = (uint64_t)&unk_1F26307C0;
      qword_1EBCEF078 = (uint64_t)qword_1EBCEEFD8;
      qword_1EBCEF080 = (uint64_t)&unk_1EBCEF090;
      qword_1EBCEF088 = 0x800000000;
      qword_1EBCEF210 = (uint64_t)&unk_1F2630850;
      qword_1EBCEF228 = (uint64_t)&qword_1EBCEF210;
      llvm::cl::Option::setArgStr(v13, "emit-dwarf-unwind", 0x11uLL);
      qword_1EBCEEFF8 = (uint64_t)"Whether to emit DWARF EH frame entries.";
      unk_1EBCEF000 = 39;
      dword_1EBCEF058 = 2;
      byte_1EBCEF06C = 1;
      dword_1EBCEF068 = 2;
      if (DWORD2(v52))
      {
        uint64_t v14 = v52;
        uint64_t v15 = v52 + 40 * DWORD2(v52);
        do
        {
          uint64_t v16 = *(unsigned __int8 **)v14;
          size_t v17 = *(void *)(v14 + 8);
          int v18 = *(_DWORD *)(v14 + 16);
          long long v19 = *(_OWORD *)(v14 + 24);
          v47[0] = *(void *)v14;
          v47[1] = v17;
          long long v48 = v19;
          uint64_t v49 = &unk_1F2630810;
          char v51 = 1;
          int v50 = v18;
          uint64_t v20 = qword_1EBCEF080;
          if (qword_1EBCEF088 >= HIDWORD(qword_1EBCEF088))
          {
            unint64_t v25 = qword_1EBCEF088 + 1;
            if (qword_1EBCEF080 <= (unint64_t)v47
              && qword_1EBCEF080 + 48 * (unint64_t)qword_1EBCEF088 > (unint64_t)v47)
            {
              uint64_t v46 = (char *)v47 - qword_1EBCEF080;
              sub_1CCBD7B48(v25);
              uint64_t v20 = qword_1EBCEF080;
              uint64_t v21 = &v46[qword_1EBCEF080];
              goto LABEL_28;
            }
            sub_1CCBD7B48(v25);
            uint64_t v20 = qword_1EBCEF080;
          }
          uint64_t v21 = (char *)v47;
LABEL_28:
          uint64_t v22 = v20 + 48 * qword_1EBCEF088;
          long long v23 = *((_OWORD *)v21 + 1);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
          *(_OWORD *)(v22 + 16) = v23;
          *(void *)(v22 + 32) = &unk_1F2630830;
          int v24 = *((_DWORD *)v21 + 10);
          *(unsigned char *)(v22 + 44) = v21[44];
          *(_DWORD *)(v22 + 40) = v24;
          *(void *)(v22 + 32) = &unk_1F2630810;
          LODWORD(qword_1EBCEF088) = qword_1EBCEF088 + 1;
          llvm::cl::AddLiteralOption(qword_1EBCEF078, v16, v17);
          v14 += 40;
        }
        while (v14 != v15);
      }
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCEEFD8);
      if ((void *)v52 != v53) {
        free((void *)v52);
      }
      __cxa_atexit((void (*)(void *))sub_1CCBD7414, qword_1EBCEEFD8, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE678);
      this = v11;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE680, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = this;
    int v27 = __cxa_guard_acquire(&qword_1EBCEE680);
    this = v26;
    if (v27)
    {
      *(void *)&long long v52 = "Emit internal instruction representation to assembly file";
      *((void *)&v52 + 1) = 57;
      sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCEEA48, "asm-show-inst", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEEA48, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE680);
      this = v26;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE688, memory_order_acquire) & 1) == 0)
  {
    uint64_t v28 = this;
    int v29 = __cxa_guard_acquire(&qword_1EBCEE688);
    this = v28;
    if (v29)
    {
      *(void *)&long long v52 = "Treat warnings as errors";
      *((void *)&v52 + 1) = 24;
      sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCEEB08, "fatal-warnings", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEEB08, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE688);
      this = v28;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE690, memory_order_acquire) & 1) == 0)
  {
    uint64_t v30 = this;
    int v31 = __cxa_guard_acquire(&qword_1EBCEE690);
    this = v30;
    if (v31)
    {
      *(void *)&long long v52 = "Suppress all warnings";
      *((void *)&v52 + 1) = 21;
      sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCEEBC8, "no-warn", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEEBC8, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE690);
      this = v30;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE698, memory_order_acquire) & 1) == 0)
  {
    uint64_t v32 = this;
    int v33 = __cxa_guard_acquire(&qword_1EBCEE698);
    this = v32;
    if (v33)
    {
      uint64_t v34 = sub_1CB883A14((uint64_t)&qword_1EBCEE6C0, 0, 1);
      qword_1EBCEE6C0 = (uint64_t)&unk_1F2644108;
      qword_1EBCEE740 = 0;
      llvm::cl::Option::setArgStr(v34, "W", 1uLL);
      qword_1EBCEE6E0 = (uint64_t)"Alias for --no-warn";
      unk_1EBCEE6E8 = 19;
      sub_1CD6BBE84(&qword_1EBCEE6C0, (uint64_t)&unk_1EBCEEBC8);
      sub_1CD6BBD70((llvm *)&qword_1EBCEE6C0);
      __cxa_atexit((void (*)(void *))sub_1CD6BBD6C, &qword_1EBCEE6C0, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE698);
      this = v32;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE6A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v35 = this;
    int v36 = __cxa_guard_acquire(&qword_1EBCEE6A0);
    this = v35;
    if (v36)
    {
      uint64_t v37 = sub_1CB883A14((uint64_t)qword_1EBCEEC88, 0, 0);
      byte_1EBCEED08 = 0;
      qword_1EBCEED18 = 0;
      qword_1EBCEED10 = (uint64_t)&unk_1F25EDE58;
      qword_1EBCEEC88[0] = (uint64_t)&unk_1F26440A0;
      qword_1EBCEED20 = (uint64_t)&unk_1F2643CC0;
      qword_1EBCEED28 = (uint64_t)&unk_1F25EDE78;
      qword_1EBCEED40 = (uint64_t)&qword_1EBCEED28;
      llvm::cl::Option::setArgStr(v37, "no-deprecated-warn", 0x12uLL);
      qword_1EBCEECA8 = (uint64_t)"Suppress all deprecated warnings";
      qword_1EBCEECB0 = 32;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EBCEEC88);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCEEC88, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE6A0);
      this = v35;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE6A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v38 = this;
    int v39 = __cxa_guard_acquire(&qword_1EBCEE6A8);
    this = v38;
    if (v39)
    {
      *(void *)&long long v52 = "Suppress type errors (Wasm)";
      *((void *)&v52 + 1) = 27;
      sub_1CD3F4B2C((llvm::cl::Option *)&unk_1EBCEED48, "no-type-check", &v52);
      __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCEED48, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE6A8);
      this = v38;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE6B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v40 = this;
    int v41 = __cxa_guard_acquire(&qword_1EBCEE6B0);
    this = v40;
    if (v41)
    {
      *(void *)&long long v52 = "";
      uint64_t v42 = sub_1CB883A14((uint64_t)&qword_1EBCEEE08, 0, 0);
      qword_1EBCEEE90 = 0;
      qword_1EBCEEE88 = 0;
      unk_1EBCEEE98 = 0;
      qword_1EBCEEEA8 = 0;
      qword_1EBCEEEB8 = 0;
      qword_1EBCEEEB0 = 0;
      byte_1EBCEEEC0 = 0;
      qword_1EBCEEEA0 = (uint64_t)&unk_1F2643C20;
      qword_1EBCEEE08 = (uint64_t)&unk_1F2643FD0;
      qword_1EBCEEEC8 = (uint64_t)&unk_1F2643EA0;
      qword_1EBCEEED0 = (uint64_t)&unk_1F25F6428;
      qword_1EBCEEEE8 = (uint64_t)&qword_1EBCEEED0;
      llvm::cl::Option::setArgStr(v42, "target-abi", 0xAuLL);
      word_1EBCEEE12 = word_1EBCEEE12 & 0xFF9F | 0x20;
      qword_1EBCEEE28 = (uint64_t)"The name of the ABI to be targeted from the backend.";
      qword_1EBCEEE30 = 52;
      sub_1CBAD7D28((const char **)&v52, (uint64_t)&qword_1EBCEEE08);
      llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEEE08);
      __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCEEE08, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE6B0);
      this = v40;
    }
  }
  qword_1EBCEE648 = (uint64_t)&qword_1EBCEEE08;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCEE6B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v43 = this;
    int v44 = __cxa_guard_acquire(&qword_1EBCEE6B8);
    this = v43;
    if (v44)
    {
      uint64_t v45 = sub_1CB883A14((uint64_t)&qword_1EBCEEEF0, 0, 0);
      qword_1EBCEEF78 = 0;
      qword_1EBCEEF70 = 0;
      unk_1EBCEEF80 = 0;
      qword_1EBCEEF90 = 0;
      qword_1EBCEEFA0 = 0;
      qword_1EBCEEF98 = 0;
      byte_1EBCEEFA8 = 0;
      qword_1EBCEEF88 = (uint64_t)&unk_1F2643C20;
      qword_1EBCEEEF0 = (uint64_t)&unk_1F2643FD0;
      qword_1EBCEEFB0 = (uint64_t)&unk_1F2643EA0;
      qword_1EBCEEFB8 = (uint64_t)&unk_1F25F6428;
      qword_1EBCEEFD0 = (uint64_t)&qword_1EBCEEFB8;
      llvm::cl::Option::setArgStr(v45, "as-secure-log-file", 0x12uLL);
      qword_1EBCEEF10 = (uint64_t)"As secure log file name";
      qword_1EBCEEF18 = 23;
      word_1EBCEEEFA = word_1EBCEEEFA & 0xFF9F | 0x20;
      llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EBCEEEF0);
      __cxa_atexit((void (*)(void *))sub_1CD41C8DC, &qword_1EBCEEEF0, &dword_1CB82C000);
      __cxa_guard_release(&qword_1EBCEE6B8);
      this = v43;
    }
  }
  qword_1EBCEE650 = (uint64_t)&qword_1EBCEEEF0;
  return this;
}

void *sub_1CCBD7414(void *a1)
{
  *a1 = &unk_1F2630758;
  int v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F26307C0;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

double llvm::mc::InitMCTargetOptionsFromFlags@<D0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)a1 & 0xC000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  __int16 v4 = v3 | byte_1EBCEE7C8 | (byte_1EBCEE888 << 8) | 0x1000;
  __int16 v5 = byte_1EBCEEA08 << 13;
  *(_DWORD *)(a1 + 8) = dword_1EBCEE948;
  __int16 v6 = byte_1EBCEEAC8 << 10;
  if (byte_1EBCEEE9F < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v14, (const void *)qword_1EBCEEE88, qword_1EBCEEE90);
  }
  else
  {
    long long v14 = *(_OWORD *)(qword_1EBCEE648 + 128);
    uint64_t v15 = *(void *)(qword_1EBCEE648 + 144);
  }
  int v7 = byte_1EBCEEF87;
  int v8 = dword_1EBCEF058;
  __int16 v9 = byte_1EBCEEDC8 != 0;
  __int16 v10 = byte_1EBCEED08 != 0;
  __int16 v11 = byte_1EBCEEC48 != 0;
  __int16 v12 = byte_1EBCEEB88 != 0;
  *(_OWORD *)(a1 + 16) = v14;
  *(void *)(a1 + 32) = v15;
  *(_WORD *)a1 = v6 | v5 | v4 | (4 * v12) | (8 * v11) | (16 * v10) | (32 * v9);
  *(_DWORD *)(a1 + 4) = v8;
  if (v7 < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v14, (const void *)qword_1EBCEEF70, qword_1EBCEEF78);
  }
  else
  {
    long long v14 = *(_OWORD *)(qword_1EBCEE650 + 128);
    uint64_t v15 = *(void *)(qword_1EBCEE650 + 144);
  }
  double result = *(double *)&v14;
  *(_OWORD *)(a1 + 88) = v14;
  *(void *)(a1 + 104) = v15;
  return result;
}

void *sub_1CCBD7688(void *a1)
{
  *a1 = &unk_1F26307C0;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CCBD76DC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    uint64_t v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    void v21[2] = "'!";
    __int16 v22 = 770;
    uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CCBD7818(v17);
  }
}

uint64_t sub_1CCBD7818(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CCBD7830(void *a1)
{
  *a1 = &unk_1F2630758;
  int v2 = a1 + 71;
  __int16 v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F26307C0;
  __int16 v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CCBD792C(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CCBD7938(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CCBD7948(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    __int16 v4 = &unk_1F2630810;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CCBD79CC(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CCBD79E0(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CCBD79E8(void *a1)
{
  *a1 = &unk_1F26307C0;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBD7A5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CCBD7A64(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CCBD7A78(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CCBD7A8C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CCBD7AA0(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1CCBD7AD0()
{
}

void *sub_1CCBD7AE4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F2630850;
  return result;
}

void sub_1CCBD7B1C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2630850;
}

void sub_1CCBD7B48(unint64_t a1)
{
  if (HIDWORD(a1)) {
    sub_1CD0A88F0(a1);
  }
  if (HIDWORD(qword_1EBCEF088) == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v1 = (2 * HIDWORD(qword_1EBCEF088)) | 1;
  if (v1 <= a1) {
    unint64_t v1 = a1;
  }
  if (v1 >= 0xFFFFFFFF) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = v1;
  }
  int v3 = malloc_type_malloc(48 * v2, 0x4065EBACuLL);
  if (!v3) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v4 = (uint64_t)v3;
  int v5 = (_OWORD *)qword_1EBCEF080;
  if (qword_1EBCEF088)
  {
    uint64_t v6 = qword_1EBCEF080 + 48 * qword_1EBCEF088;
    uint64_t v7 = v4 + 32;
    uint64_t v8 = v4;
    do
    {
      long long v9 = v5[1];
      *(_OWORD *)uint64_t v8 = *v5;
      *(_OWORD *)(v8 + 16) = v9;
      *(void *)(v8 + 32) = &unk_1F2630830;
      int v10 = *((_DWORD *)v5 + 10);
      *(unsigned char *)(v8 + 44) = *((unsigned char *)v5 + 44);
      *(_DWORD *)(v8 + 40) = v10;
      *(void *)(v8 + 32) = &unk_1F2630810;
      v7 += 48;
      v5 += 3;
      v8 += 48;
    }
    while (v5 != (_OWORD *)v6);
    int v5 = (_OWORD *)qword_1EBCEF080;
  }
  if (v5 != (_OWORD *)&unk_1EBCEF090) {
    free(v5);
  }
  qword_1EBCEF080 = v4;
  HIDWORD(qword_1EBCEF088) = v2;
}

uint64_t llvm::MCValue::getAccessVariant(llvm::MCValue *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this) {
    LODWORD(v1) = *(_DWORD *)(v1 + 1);
  }
  return (unsigned __int16)v1;
}

uint64_t llvm::MCWasmObjectTargetWriter::MCWasmObjectTargetWriter(uint64_t this, char a2, int a3)
{
  *(void *)this = &unk_1F2630898;
  if (a3) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(this + 8) = v3 | a2 | *(unsigned char *)(this + 8) & 0xFC;
  return this;
}

uint64_t sub_1CCBD7CE4()
{
  return 7;
}

uint64_t llvm::MCWasmStreamer::mergeFragment(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(result + 120);
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(*(void *)(result + 112) + 32 * v5 - 32);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v9 = *(unsigned int *)(result + 304);
  if (!v9)
  {
    int v10 = *(_DWORD *)(result + 416);
    goto LABEL_5;
  }
  int v31 = *(llvm::MCSymbol ***)(result + 296);
  uint64_t v32 = 8 * v9;
  do
  {
    int v33 = *v31++;
    double result = llvm::MCSection::addPendingLabel(v7, v33, *(_DWORD *)(v6 + 416));
    v32 -= 8;
  }
  while (v32);
  *(_DWORD *)(v6 + 304) = 0;
  int v10 = *(_DWORD *)(v6 + 416);
  if (a2)
  {
LABEL_5:
    int v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      uint64_t v26 = *(_DWORD **)(v7 + 152);
      int v27 = v26;
      do
      {
        if (v27[2] == v10)
        {
          uint64_t v28 = *(uint64_t **)v27;
          *uint64_t v28 = **(void **)v27 & 7 | a2;
          v28[3] = v8;
          *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
          uint64_t v26 = *(_DWORD **)(v7 + 152);
          uint64_t v29 = *(unsigned int *)(v7 + 160);
          uint64_t v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
          if (v30)
          {
            double result = (uint64_t)memmove(v27, v27 + 4, v30 - 4);
            LODWORD(v29) = *(_DWORD *)(v7 + 160);
            uint64_t v26 = *(_DWORD **)(v7 + 152);
          }
          v27 -= 4;
          int v11 = v29 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v27 += 4;
      }
      while (v27 != &v26[4 * v11]);
    }
    goto LABEL_6;
  }
  int v34 = *(_DWORD *)(v7 + 160);
  if (v34)
  {
    uint64_t v35 = *(_DWORD **)(v7 + 152);
    int v36 = v35;
    do
    {
      if (v36[2] == v10)
      {
        uint64_t v37 = *(uint64_t **)v36;
        uint64_t *v37 = **(void **)v36 & 7;
        v37[3] = 0;
        *((_DWORD *)v37 + 2) = v37[1] & 0xFFFFE3FF | 0x400;
        uint64_t v35 = *(_DWORD **)(v7 + 152);
        uint64_t v38 = *(unsigned int *)(v7 + 160);
        uint64_t v39 = (char *)&v35[4 * v38] - (char *)(v36 + 4);
        if (v39)
        {
          double result = (uint64_t)memmove(v36, v36 + 4, v39 - 4);
          LODWORD(v38) = *(_DWORD *)(v7 + 160);
          uint64_t v35 = *(_DWORD **)(v7 + 152);
        }
        v36 -= 4;
        int v34 = v38 - 1;
        *(_DWORD *)(v7 + 160) = v34;
      }
      v36 += 4;
    }
    while (v36 != &v35[4 * v34]);
  }
LABEL_6:
  uint64_t v12 = *(unsigned int *)(a3 + 128);
  if (v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = *(_DWORD *)(a2 + 128);
    uint64_t v15 = 24 * v12;
    do
    {
      uint64_t v16 = (long long *)(*(void *)(a3 + 120) + v13);
      *((_DWORD *)v16 + 2) += *(_DWORD *)(a2 + 72);
      unint64_t v17 = *(void *)(a2 + 120);
      if (v14 >= *(_DWORD *)(a2 + 132))
      {
        unint64_t v20 = v17 + 24 * v14;
        if (v17 > (unint64_t)v16 || v20 <= (unint64_t)v16) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v18 = v17 + 24 * *(unsigned int *)(a2 + 128);
      long long v19 = *v16;
      *(void *)(v18 + 16) = *((void *)v16 + 2);
      *(_OWORD *)unint64_t v18 = v19;
      unsigned int v14 = *(_DWORD *)(a2 + 128) + 1;
      *(_DWORD *)(a2 + 128) = v14;
      v13 += 24;
    }
    while (v15 != v13);
  }
  if (!*(void *)(a2 + 56))
  {
    uint64_t v22 = *(void *)(a3 + 56);
    if (v22)
    {
      *(unsigned char *)(a2 + 50) = 1;
      *(void *)(a2 + 56) = v22;
    }
  }
  int v24 = *(const void **)(a3 + 64);
  size_t v23 = *(void *)(a3 + 72);
  uint64_t v25 = *(void *)(a2 + 72);
  if (*(void *)(a2 + 80) < v25 + v23) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (v23)
  {
    double result = (uint64_t)memcpy((void *)(*(void *)(a2 + 64) + v25), v24, v23);
    uint64_t v25 = *(void *)(a2 + 72);
  }
  *(void *)(a2 + 72) = v25 + v23;
  return result;
}

void llvm::Win64EH::UnwindEmitter::Emit(llvm::Win64EH::UnwindEmitter *this, llvm::MCStreamer *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a2 + 6);
  uint64_t v3 = *((void *)a2 + 7) - (void)v2;
  if (v3)
  {
    uint64_t v5 = (_DWORD *)((char *)a2 + 264);
    uint64_t v6 = 8 * (v3 >> 3);
    do
    {
      uint64_t v7 = sub_1CCBD37A0(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(void *)(*((void *)a2 + 1) + 168) + 680), *(void *)(*v2 + 56));
      (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v7, 0);
      uint64_t v8 = *v2++;
      sub_1CCBD8164((uint64_t)a2, v8);
      v6 -= 8;
    }
    while (v6);
    uint64_t v9 = (uint64_t **)*((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7) - (void)v9;
    if (v10)
    {
      uint64_t v11 = 8 * (v10 >> 3);
      do
      {
        uint64_t v12 = sub_1CCBD37A0(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(void *)(*((void *)a2 + 1) + 168) + 672), (*v9)[7]);
        (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v12, 0);
        uint64_t v13 = *v9++;
        sub_1CCBD8A50(a2, v13);
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t sub_1CCBD8164(uint64_t result, uint64_t a2)
{
  if (!*(void *)(a2 + 48))
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(llvm::MCContext **)(result + 8);
    uint64_t v40 = "tmp";
    __int16 v41 = 259;
    uint64_t TempSymbol = llvm::MCContext::createTempSymbol(v4, (const llvm::Twine *)&v40, 1);
    (*(void (**)(void *, uint64_t, void, uint64_t, void))(*v3 + 640))(v3, 4, 0, 1, 0);
    (*(void (**)(void *, uint64_t, void))(*v3 + 192))(v3, TempSymbol, 0);
    *(void *)(a2 + 48) = TempSymbol;
    if (*(void *)(a2 + 80))
    {
      unsigned int v6 = 33;
    }
    else
    {
      if (*(unsigned char *)(a2 + 68)) {
        int v7 = 17;
      }
      else {
        int v7 = 1;
      }
      if (*(unsigned char *)(a2 + 69)) {
        unsigned int v6 = v7 | 8;
      }
      else {
        unsigned int v6 = v7;
      }
    }
    (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, v6, 1);
    uint64_t v8 = *(void *)(a2 + 40);
    if (v8) {
      sub_1CCBDA2DC(v3, v8, *(void *)a2);
    }
    else {
      (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, 0, 1);
    }
    uint64_t v38 = v4;
    uint64_t v9 = *(void *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 96);
    if (v9 == v10)
    {
      LOBYTE(v11) = 0;
    }
    else
    {
      int v11 = 0;
      do
      {
        switch(*(_DWORD *)(v9 + 16))
        {
          case 1:
            if (*(_DWORD *)(v9 + 8) <= 0x7FFF8u) {
              int v12 = 2;
            }
            else {
              int v12 = 3;
            }
            v11 += v12;
            break;
          case 4:
          case 8:
            v11 += 2;
            break;
          case 5:
          case 9:
            v11 += 3;
            break;
          case 6:
          case 7:
LABEL_77:
            __break(1u);
            JUMPOUT(0x1CCBD89F8);
          default:
            ++v11;
            break;
        }
        v9 += 24;
      }
      while (v9 != v10);
    }
    (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, v11, 1);
    unsigned int v13 = *(_DWORD *)(a2 + 72);
    char v39 = v6;
    if ((v13 & 0x80000000) != 0) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *(_DWORD *)(*(void *)(a2 + 88) + 24 * v13 + 8) & 0xF0 | *(_DWORD *)(*(void *)(a2 + 88)
    }
                                                                                  + 24 * v13
                                                                                  + 12) & 0xFu;
    double result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, v14, 1);
    int v15 = (-85 * ((*(_DWORD *)(a2 + 96) - *(_DWORD *)(a2 + 88)) >> 3));
    if (-85 * ((*(_DWORD *)(a2 + 96) - *(_DWORD *)(a2 + 88)) >> 3))
    {
      while (2)
      {
        uint64_t v16 = *(unsigned int **)(a2 + 96);
        uint64_t v18 = *((void *)v16 - 3);
        v16 -= 6;
        uint64_t v17 = v18;
        unint64_t v19 = v16[2];
        unsigned int v20 = v16[3];
        uint64_t v21 = v16[4];
        *(void *)(a2 + 96) = v16;
        uint64_t v22 = *(void *)a2;
        switch(v21)
        {
          case 1:
            sub_1CCBDA2DC(v3, v17, v22);
            if (v19 < 0x7FFF9)
            {
              (*(void (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, v21 & 0xF, 1);
              char v27 = 3;
            }
            else
            {
              (*(void (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, 17, 1);
              (*(void (**)(void *, unint64_t, uint64_t))(*v3 + 520))(v3, v19 & 0xFFF8, 2);
              char v27 = 16;
            }
            double result = (*(uint64_t (**)(void *, void, uint64_t))(*v3 + 520))(v3, v19 >> v27, 2);
            goto LABEL_49;
          case 2:
            uint64_t v26 = (2 * (_BYTE)v19 - 16) & 0xF0 | 2u;
            goto LABEL_48;
          case 3:
            sub_1CCBDA2DC(v3, v17, v22);
            double result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, v21 & 0xF, 1);
            goto LABEL_49;
          case 4:
          case 8:
            sub_1CCBDA2DC(v3, v17, v22);
            (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, (16 * (v20 & 0xF)) | v21, 1);
            unsigned int v23 = v19 >> 3;
            if (v21 == 8) {
              LOWORD(v23) = (v19 >> 4) & 0x7FFF;
            }
            unint64_t v24 = (unsigned __int16)v23;
            goto LABEL_39;
          case 5:
          case 9:
            sub_1CCBDA2DC(v3, v17, v22);
            (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, (16 * (v20 & 0xF)) | v21, 1);
            if (v21 == 9) {
              int v25 = 65520;
            }
            else {
              int v25 = 65528;
            }
            (*(void (**)(void *, void, uint64_t))(*v3 + 520))(v3, v25 & v19, 2);
            unint64_t v24 = v19 >> 16;
LABEL_39:
            double result = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*v3 + 520))(v3, v24, 2);
            goto LABEL_49;
          case 6:
          case 7:
            goto LABEL_77;
          case 10:
            if (v19 == 1) {
              uint64_t v26 = v21 & 0xF | 0x10;
            }
            else {
              uint64_t v26 = v21 & 0xF;
            }
LABEL_48:
            sub_1CCBDA2DC(v3, v17, v22);
            double result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, v26, 1);
            goto LABEL_49;
          default:
            sub_1CCBDA2DC(v3, v17, v22);
            double result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v3 + 520))(v3, 16 * (v20 & 0xF), 1);
LABEL_49:
            if (!--v15) {
              break;
            }
            continue;
        }
        break;
      }
    }
    if (v11) {
      double result = (*(uint64_t (**)(void *, void, uint64_t))(*v3 + 520))(v3, 0, 2);
    }
    if ((v39 & 0x20) != 0)
    {
      int v33 = *(uint64_t **)(a2 + 80);
      return sub_1CCBD8A50(v3, v33);
    }
    else if ((v39 & 0x18) != 0)
    {
      uint64_t v28 = *(void *)(a2 + 24);
      *((void *)v38 + 34) += 24;
      uint64_t v29 = *((void *)v38 + 24);
      if (((v29 + 7) & 0xFFFFFFFFFFFFFFF8) - v29 + 24 > *((void *)v38 + 25) - v29)
      {
        unsigned int v35 = *((_DWORD *)v38 + 54) >> 7;
        if (v35 >= 0x1E) {
          LOBYTE(v35) = 30;
        }
        uint64_t v36 = 4096 << v35;
        unint64_t v30 = (unint64_t)operator new(4096 << v35, (std::align_val_t)8uLL);
        unsigned int v37 = *((_DWORD *)v38 + 54);
        if (v37 >= *((_DWORD *)v38 + 55)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*((void *)v38 + 26) + 8 * v37) = v30;
        ++*((_DWORD *)v38 + 54);
        *((void *)v38 + 25) = v30 + v36;
      }
      else
      {
        unint64_t v30 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v38 + 24) = v30 + 24;
      if (*(unsigned char *)(*((void *)v38 + 19) + 18)) {
        int v31 = 65651;
      }
      else {
        int v31 = 115;
      }
      *(unsigned char *)unint64_t v30 = 2;
      *(_DWORD *)(v30 + 1) = v31 | (*(unsigned __int8 *)(v30 + 4) << 24);
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = v28;
      uint64_t v32 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*v3 + 512);
      return v32(v3, v30, 4, 0);
    }
    else if (!(_BYTE)v11)
    {
      int v34 = *(uint64_t (**)(void *, void, uint64_t))(*v3 + 520);
      return v34(v3, 0, 4);
    }
  }
  return result;
}

uint64_t sub_1CCBD8A50(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  (*(void (**)(void *, uint64_t, void, uint64_t, void))(*a1 + 640))(a1, 4, 0, 1, 0);
  sub_1CCBDA5D4(a1, *a2, *a2);
  sub_1CCBDA5D4(a1, *a2, a2[1]);
  uint64_t v5 = a2[6];
  *(void *)(v4 + 272) += 24;
  uint64_t v6 = *(void *)(v4 + 192);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 24 > *(void *)(v4 + 200) - v6)
  {
    unsigned int v11 = *(_DWORD *)(v4 + 216) >> 7;
    if (v11 >= 0x1E) {
      LOBYTE(v11) = 30;
    }
    uint64_t v12 = 4096 << v11;
    unint64_t v7 = (unint64_t)operator new(4096 << v11, (std::align_val_t)8uLL);
    unsigned int v13 = *(_DWORD *)(v4 + 216);
    if (v13 >= *(_DWORD *)(v4 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v4 + 208) + 8 * v13) = v7;
    ++*(_DWORD *)(v4 + 216);
    *(void *)(v4 + 200) = v7 + v12;
  }
  else
  {
    unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v4 + 192) = v7 + 24;
  if (*(unsigned char *)(*(void *)(v4 + 152) + 18)) {
    int v8 = 65651;
  }
  else {
    int v8 = 115;
  }
  *(unsigned char *)unint64_t v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = v5;
  uint64_t v9 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v9(a1, v7, 4, 0);
}

uint64_t llvm::Win64EH::UnwindEmitter::EmitUnwindInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1CCBD37A0(*(llvm::MCContext **)(a2 + 8), (_DWORD *)(a2 + 264), *(llvm::MCSectionCOFF **)(*(void *)(*(void *)(a2 + 8) + 168) + 680), *(void *)(a3 + 56));
  (*(void (**)(uint64_t, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v5, 0);

  return sub_1CCBD8164(a2, a3);
}

void llvm::Win64EH::ARM64UnwindEmitter::Emit(llvm::Win64EH::ARM64UnwindEmitter *this, llvm::MCStreamer *a2)
{
  uint64_t v2 = (uint64_t **)*((void *)a2 + 6);
  uint64_t v3 = (uint64_t **)*((void *)a2 + 7);
  if (v3 != v2)
  {
    uint64_t v5 = (_DWORD *)((char *)a2 + 264);
    do
    {
      uint64_t v6 = *v2;
      if ((*v2)[11] == (*v2)[12])
      {
        for (uint64_t i = v6[17]; i != v6[18]; i += 32)
        {
          if (*(void *)(i + 8) != *(void *)(i + 16)) {
            goto LABEL_4;
          }
        }
      }
      else
      {
LABEL_4:
        unint64_t v7 = sub_1CCBD37A0(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(void *)(*((void *)a2 + 1) + 168) + 680), v6[7]);
        (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v7, 0);
        ((void (*)(llvm::MCStreamer *, uint64_t *, uint64_t))loc_1CCBD8FCC)(a2, v6, 1);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v9 = (uint64_t *)*((void *)a2 + 6);
    uint64_t v10 = *((void *)a2 + 7) - (void)v9;
    if (v10)
    {
      uint64_t v11 = 8 * (v10 >> 3);
      do
      {
        uint64_t v12 = *v9;
        if (*(void *)(*v9 + 48))
        {
          unsigned int v13 = sub_1CCBD37A0(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(void *)(*((void *)a2 + 1) + 168) + 672), *(void *)(v12 + 56));
          (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v13, 0);
          uint64_t v14 = *((void *)a2 + 1);
          (*(void (**)(llvm::MCStreamer *, uint64_t, void, uint64_t, void))(*(void *)a2 + 640))(a2, 4, 0, 1, 0);
          sub_1CCBDA5D4(a2, *(void *)v12, *(void *)v12);
          uint64_t v15 = *(unsigned int *)(v12 + 64);
          if (v15)
          {
            (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)a2 + 520))(a2, v15, 4);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 48);
            *(void *)(v14 + 272) += 24;
            uint64_t v17 = *(void *)(v14 + 192);
            if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v17 + 24 > *(void *)(v14 + 200) - v17)
            {
              unsigned int v20 = *(_DWORD *)(v14 + 216) >> 7;
              if (v20 >= 0x1E) {
                LOBYTE(v20) = 30;
              }
              uint64_t v22 = 4096 << v20;
              unint64_t v18 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
              unint64_t v21 = *(unsigned int *)(v14 + 216);
              if (v21 >= *(unsigned int *)(v14 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v14 + 208) + 8 * v21) = v18;
              ++*(_DWORD *)(v14 + 216);
              *(void *)(v14 + 200) = v18 + v22;
            }
            else
            {
              unint64_t v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v14 + 192) = v18 + 24;
            if (*(unsigned char *)(*(void *)(v14 + 152) + 18)) {
              int v19 = 65651;
            }
            else {
              int v19 = 115;
            }
            *(unsigned char *)unint64_t v18 = 2;
            *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
            *(void *)(v18 + 8) = 0;
            *(void *)(v18 + 16) = v16;
            (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)a2 + 512))(a2, v18, 4, 0);
          }
        }
        ++v9;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

void llvm::Win64EH::ARM64UnwindEmitter::EmitUnwindInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 168))(a2, *(void *)(a3 + 56), 0);
    *(void *)(a3 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
  }
  uint64_t v5 = sub_1CCBD37A0(*(llvm::MCContext **)(a2 + 8), (_DWORD *)(a2 + 264), *(llvm::MCSectionCOFF **)(*(void *)(*(void *)(a2 + 8) + 168) + 680), *(void *)(a3 + 56));
  (*(void (**)(uint64_t, llvm::MCSectionCOFF *, void))(*(void *)a2 + 168))(a2, v5, 0);

  JUMPOUT(0x1CCBD8FCCLL);
}

void sub_1CCBDA2B0()
{
}

void sub_1CCBDA2C8()
{
}

uint64_t sub_1CCBDA2DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v17 = *(_DWORD *)(v6 + 216) >> 7;
    if (v17 >= 0x1E) {
      LOBYTE(v17) = 30;
    }
    uint64_t v18 = 4096 << v17;
    unint64_t v8 = (unint64_t)operator new(4096 << v17, (std::align_val_t)8uLL);
    unsigned int v19 = *(_DWORD *)(v6 + 216);
    if (v19 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v19) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v18;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  int v9 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  *(void *)(v6 + 272) += 24;
  uint64_t v10 = *(void *)(v6 + 192);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v6 + 200) - v10)
  {
    unsigned int v20 = *(_DWORD *)(v6 + 216) >> 7;
    if (v20 >= 0x1E) {
      LOBYTE(v20) = 30;
    }
    uint64_t v21 = 4096 << v20;
    unint64_t v11 = (unint64_t)operator new(4096 << v20, (std::align_val_t)8uLL);
    unsigned int v22 = *(_DWORD *)(v6 + 216);
    if (v22 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v22) = v11;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v11 + v21;
  }
  else
  {
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v11 + 24;
  int v12 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v11 = 2;
  *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = a3;
  *(void *)(v6 + 272) += 32;
  uint64_t v13 = *(void *)(v6 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 32 > *(void *)(v6 + 200) - v13)
  {
    unsigned int v23 = *(_DWORD *)(v6 + 216) >> 7;
    if (v23 >= 0x1E) {
      LOBYTE(v23) = 30;
    }
    uint64_t v24 = 4096 << v23;
    unint64_t v14 = (unint64_t)operator new(4096 << v23, (std::align_val_t)8uLL);
    unsigned int v25 = *(_DWORD *)(v6 + 216);
    if (v25 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v25) = v14;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v14 + v24;
  }
  else
  {
    unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v14 + 32;
  *(unsigned char *)unint64_t v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v11;
  uint64_t v15 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v15(a1, v14, 1, 0);
}

uint64_t sub_1CCBDA5D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v22 = *(_DWORD *)(v6 + 216) >> 7;
    if (v22 >= 0x1E) {
      LOBYTE(v22) = 30;
    }
    uint64_t v23 = 4096 << v22;
    unint64_t v8 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
    unsigned int v24 = *(_DWORD *)(v6 + 216);
    if (v24 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v24) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v23;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  int v9 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  *(void *)(v6 + 272) += 24;
  uint64_t v10 = *(void *)(v6 + 192);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v6 + 200) - v10)
  {
    unsigned int v25 = *(_DWORD *)(v6 + 216) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v11 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(v6 + 216);
    if (v27 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v27) = v11;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v11 + v26;
  }
  else
  {
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v11 + 24;
  int v12 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v11 = 2;
  *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = a3;
  *(void *)(v6 + 272) += 32;
  uint64_t v13 = *(void *)(v6 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 32 > *(void *)(v6 + 200) - v13)
  {
    unsigned int v28 = *(_DWORD *)(v6 + 216) >> 7;
    if (v28 >= 0x1E) {
      LOBYTE(v28) = 30;
    }
    uint64_t v29 = 4096 << v28;
    unint64_t v14 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
    unsigned int v30 = *(_DWORD *)(v6 + 216);
    if (v30 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v30) = v14;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v14 + v29;
  }
  else
  {
    unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v14 + 32;
  *(unsigned char *)unint64_t v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v8;
  *(void *)(v6 + 272) += 24;
  uint64_t v15 = *(void *)(v6 + 192);
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 24 > *(void *)(v6 + 200) - v15)
  {
    unsigned int v31 = *(_DWORD *)(v6 + 216) >> 7;
    if (v31 >= 0x1E) {
      LOBYTE(v31) = 30;
    }
    uint64_t v32 = 4096 << v31;
    unint64_t v16 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
    unsigned int v33 = *(_DWORD *)(v6 + 216);
    if (v33 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v33) = v16;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v16 + v32;
  }
  else
  {
    unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v16 + 24;
  if (*(unsigned char *)(*(void *)(v6 + 152) + 18)) {
    int v17 = 65651;
  }
  else {
    int v17 = 115;
  }
  *(unsigned char *)unint64_t v16 = 2;
  *(_DWORD *)(v16 + 1) = v17 | (*(unsigned __int8 *)(v16 + 4) << 24);
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = a2;
  *(void *)(v6 + 272) += 32;
  uint64_t v18 = *(void *)(v6 + 192);
  if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 32 > *(void *)(v6 + 200) - v18)
  {
    unsigned int v34 = *(_DWORD *)(v6 + 216) >> 7;
    if (v34 >= 0x1E) {
      LOBYTE(v34) = 30;
    }
    uint64_t v35 = 4096 << v34;
    unint64_t v19 = (unint64_t)operator new(4096 << v34, (std::align_val_t)8uLL);
    unsigned int v36 = *(_DWORD *)(v6 + 216);
    if (v36 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v36) = v19;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v19 + v35;
  }
  else
  {
    unint64_t v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v19 + 32;
  *(unsigned char *)unint64_t v19 = 0;
  *(_DWORD *)(v19 + 1) = *(unsigned __int8 *)(v19 + 4) << 24;
  *(void *)(v19 + 8) = 0;
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = v14;
  unsigned int v20 = *(uint64_t (**)(void *, unint64_t, uint64_t, void))(*a1 + 512);

  return v20(a1, v19, 4, 0);
}

uint64_t sub_1CCBDAA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(v6 + 272) += 24;
  uint64_t v7 = *(void *)(v6 + 192);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 24 > *(void *)(v6 + 200) - v7)
  {
    unsigned int v16 = *(_DWORD *)(v6 + 216) >> 7;
    if (v16 >= 0x1E) {
      LOBYTE(v16) = 30;
    }
    uint64_t v17 = 4096 << v16;
    unint64_t v8 = (unint64_t)operator new(4096 << v16, (std::align_val_t)8uLL);
    unsigned int v18 = *(_DWORD *)(v6 + 216);
    if (v18 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v18) = v8;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v8 + v17;
  }
  else
  {
    unint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v8 + 24;
  int v9 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = a2;
  *(void *)(v6 + 272) += 24;
  uint64_t v10 = *(void *)(v6 + 192);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 24 > *(void *)(v6 + 200) - v10)
  {
    unsigned int v19 = *(_DWORD *)(v6 + 216) >> 7;
    if (v19 >= 0x1E) {
      LOBYTE(v19) = 30;
    }
    uint64_t v20 = 4096 << v19;
    unint64_t v11 = (unint64_t)operator new(4096 << v19, (std::align_val_t)8uLL);
    unsigned int v21 = *(_DWORD *)(v6 + 216);
    if (v21 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v21) = v11;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v11 + v20;
  }
  else
  {
    unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v11 + 24;
  int v12 = *(unsigned __int8 *)(*(void *)(v6 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v11 = 2;
  *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = a3;
  *(void *)(v6 + 272) += 32;
  uint64_t v13 = *(void *)(v6 + 192);
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 32 > *(void *)(v6 + 200) - v13)
  {
    unsigned int v22 = *(_DWORD *)(v6 + 216) >> 7;
    if (v22 >= 0x1E) {
      LOBYTE(v22) = 30;
    }
    uint64_t v23 = 4096 << v22;
    unint64_t v14 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
    unsigned int v24 = *(_DWORD *)(v6 + 216);
    if (v24 >= *(_DWORD *)(v6 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 208) + 8 * v24) = v14;
    ++*(_DWORD *)(v6 + 216);
    *(void *)(v6 + 200) = v14 + v23;
  }
  else
  {
    unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 192) = v14 + 32;
  *(unsigned char *)unint64_t v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v8;
  *(void *)(v14 + 24) = v11;
  uint64_t v25 = 0;
  if ((llvm::MCExpr::evaluateAsAbsolute((llvm::MCExpr *)v14, &v25, *(const llvm::MCAssembler **)(a1 + 272)) & 1) == 0) {
    llvm::report_fatal_error((llvm *)"Failed to evaluate function length in SEH unwind info", (const llvm::Twine *)1);
  }
  return v25;
}

uint64_t sub_1CCBDAD50(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = 24 * a2;
  uint64_t v4 = (int *)(v2 + 16);
  do
  {
    uint64_t v5 = *v4;
    v4 += 6;
    double result = (dword_1CFB28EA0[v5 - 1] + result);
    v3 -= 24;
  }
  while (v3);
  return result;
}

uint64_t sub_1CCBDAD94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v19 = *a2;
  int v20 = 0;
  unsigned int v21 = 0;
  if (sub_1CD3C8538(a1, &v19, &v21))
  {
    unsigned int v4 = *((_DWORD *)v21 + 2);
    uint64_t v5 = a1[3];
  }
  else
  {
    uint64_t v7 = sub_1CD3CDD8C((uint64_t)a1, (uint64_t)&v19, &v19, v21);
    *uint64_t v7 = v19;
    *((_DWORD *)v7 + 2) = v20;
    uint64_t v8 = *a2;
    uint64_t v10 = (char *)a1[4];
    unint64_t v9 = a1[5];
    if ((unint64_t)v10 >= v9)
    {
      int v12 = (char *)a1[3];
      uint64_t v13 = (v10 - v12) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        abort();
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 60) {
          sub_1CB833614();
        }
        uint64_t v17 = (char *)operator new(16 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      unsigned int v18 = &v17[16 * v13];
      *(void *)unsigned int v18 = v8;
      *((void *)v18 + 1) = 0;
      unint64_t v11 = v18 + 16;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v18 -= 16;
          v10 -= 16;
        }
        while (v10 != v12);
        uint64_t v10 = (char *)a1[3];
      }
      a1[3] = (uint64_t)v18;
      a1[4] = (uint64_t)v11;
      a1[5] = (uint64_t)&v17[16 * v16];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)uint64_t v10 = v8;
      *((void *)v10 + 1) = 0;
      unint64_t v11 = v10 + 16;
    }
    a1[4] = (uint64_t)v11;
    uint64_t v5 = a1[3];
    unsigned int v4 = (((unint64_t)v11 - v5) >> 4) - 1;
    *((_DWORD *)v7 + 2) = v4;
  }
  return v5 + 16 * v4 + 8;
}

uint64_t sub_1CCBDAF10(uint64_t a1, unsigned int *a2)
{
  switch(a2[4])
  {
    case 2u:
      uint64_t v9 = ((unint64_t)a2[2] >> 4) & 0x1F;
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      __break(1u);
      JUMPOUT(0x1CCBDB454);
    case 0xAu:
      uint64_t v9 = 233;
      break;
    case 0xBu:
      unint64_t v4 = a2[2];
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 520))(a1, (v4 >> 12) & 7 | 0xC0, 1);
      goto LABEL_24;
    case 0xCu:
      uint64_t v9 = (*((unsigned __int8 *)a2 + 8) >> 3) | 0x20u;
      break;
    case 0xDu:
      uint64_t v9 = ((a2[2] - 1) >> 3) & 0x3F | 0x80;
      break;
    case 0xEu:
      uint64_t v9 = ((unint64_t)a2[2] >> 3) & 0x3F | 0x40;
      break;
    case 0xFu:
      unsigned int v5 = a2[3] + 237;
      int v6 = 208;
      goto LABEL_9;
    case 0x10u:
      int v11 = a2[3] + 237;
      int v12 = *(void (**)(void))(*(void *)a1 + 520);
      goto LABEL_18;
    case 0x11u:
      unsigned int v5 = a2[3] + 237;
      int v6 = 200;
LABEL_9:
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 520))(a1, v6 & 0xFFFFFFFC | (v5 >> 2) & 3, 1);
      int v10 = a2[2] >> 3;
      goto LABEL_12;
    case 0x12u:
      unsigned int v5 = a2[3] + 237;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 520))(a1, (v5 >> 2) & 3 | 0xCC, 1);
      int v10 = (a2[2] >> 3) - 1;
LABEL_12:
      LOBYTE(v10) = v10 | ((_BYTE)v5 << 6);
      goto LABEL_29;
    case 0x13u:
      unsigned int v13 = a2[3] + 237;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 520))(a1, (v13 >> 3) & 1 | 0xD6, 1);
      uint64_t v9 = (a2[2] >> 3) | (32 * v13) & 0xC0;
      break;
    case 0x14u:
      unint64_t v7 = a2[3];
      uint64_t v8 = 220;
      goto LABEL_27;
    case 0x15u:
      int v11 = a2[3];
      int v12 = *(void (**)(void))(*(void *)a1 + 520);
LABEL_18:
      v12();
      int v10 = ((a2[2] >> 3) - 1) | (32 * v11);
      goto LABEL_29;
    case 0x16u:
      unint64_t v7 = a2[3];
      uint64_t v8 = 216;
LABEL_27:
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 520))(a1, v8 & 0xFFFFFFFFFFFFFFFELL | (v7 >> 2) & 1, 1);
      int v10 = a2[2] >> 3;
      goto LABEL_28;
    case 0x17u:
      unint64_t v7 = a2[3];
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 520))(a1, (v7 >> 2) & 1 | 0xDA, 1);
      int v10 = (a2[2] >> 3) - 1;
LABEL_28:
      LOBYTE(v10) = v10 | ((_BYTE)v7 << 6);
LABEL_29:
      uint64_t v9 = v10;
      break;
    case 0x18u:
      uint64_t v9 = 225;
      break;
    case 0x19u:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 226, 1);
      uint64_t v9 = ((unint64_t)a2[2] >> 3);
      break;
    case 0x1Au:
      uint64_t v9 = 227;
      break;
    case 0x1Bu:
      uint64_t v9 = 228;
      break;
    case 0x1Cu:
      uint64_t v9 = 230;
      break;
    case 0x1Du:
      uint64_t v9 = 232;
      break;
    case 0x1Eu:
      uint64_t v9 = 234;
      break;
    case 0x1Fu:
      uint64_t v9 = 236;
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 224, 1);
      unint64_t v4 = a2[2];
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 520))(a1, (v4 >> 20), 1);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 520))(a1, (v4 >> 12), 1);
LABEL_24:
      uint64_t v9 = (v4 >> 4);
      break;
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 520);

  return v14(a1, v9, 1);
}

void llvm::MCWinCOFFStreamer::MCWinCOFFStreamer(llvm::MCStreamer *a1, llvm::MCContext *a2, void *a3, void *a4, void *a5)
{
  *a3 = 0;
  *a5 = 0;
  *a4 = 0;
  llvm::MCObjectStreamer::MCObjectStreamer(a1, a2);
}

void llvm::MCWinCOFFStreamer::emitInstToData(llvm::MCObjectStreamer *a1, uint64_t a2, uint64_t a3)
{
  v32[12] = *MEMORY[0x1E4F143B8];
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, 0);
  unsigned int v30 = (char *)v32;
  uint64_t v31 = 0x400000000;
  uint64_t v26 = &v27;
  unsigned int v27 = v29;
  long long v28 = xmmword_1CD96DBF0;
  int v19 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  unsigned int v18 = &unk_1F2646FA8;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  (*(void (**)(void, uint64_t, void **, char **, uint64_t))(**(void **)(*((void *)a1 + 34) + 16) + 32))(*(void *)(*((void *)a1 + 34) + 16), a2, &v18, &v30, a3);
  if (v31)
  {
    uint64_t v7 = 0;
    unsigned int v8 = *(_DWORD *)(DataFragment + 128);
    uint64_t v9 = 24 * v31;
    do
    {
      int v10 = &v30[v7];
      *(_DWORD *)&v30[v7 + 8] += *(_DWORD *)(DataFragment + 72);
      unint64_t v11 = *(void *)(DataFragment + 120);
      if (v8 >= *(_DWORD *)(DataFragment + 132))
      {
        unint64_t v14 = v11 + 24 * v8;
        if (v11 > (unint64_t)v10 || v14 <= (unint64_t)v10) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v12 = v11 + 24 * *(unsigned int *)(DataFragment + 128);
      long long v13 = *(_OWORD *)v10;
      *(void *)(v12 + 16) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      unsigned int v8 = *(_DWORD *)(DataFragment + 128) + 1;
      *(_DWORD *)(DataFragment + 128) = v8;
      v7 += 24;
    }
    while (v9 != v7);
  }
  *(unsigned char *)(DataFragment + 50) = 1;
  *(void *)(DataFragment + 56) = a3;
  uint64_t v16 = v28;
  uint64_t v17 = *(void *)(DataFragment + 72);
  if (*(void *)(DataFragment + 80) < (unint64_t)(v17 + v28)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if ((void)v28)
  {
    memcpy((void *)(*(void *)(DataFragment + 64) + v17), v27, v28);
    uint64_t v17 = *(void *)(DataFragment + 72);
  }
  *(void *)(DataFragment + 72) = v17 + v16;
  unsigned int v18 = &unk_1F2646B98;
  if (v25 == 1 && v20) {
    MEMORY[0x1D25D9CB0](v20, 0x1000C8077774924);
  }
  if (v27 != v29) {
    free(v27);
  }
  if (v30 != (char *)v32) {
    free(v30);
  }
}

uint64_t llvm::MCWinCOFFStreamer::initSections(llvm::MCWinCOFFStreamer *this, BOOL a2, const llvm::MCSubtargetInfo *a3)
{
  (*(void (**)(llvm::MCWinCOFFStreamer *, void, void))(*(void *)this + 168))(this, *(void *)(*(void *)(*((void *)this + 1) + 168) + 24), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, void))(*(void *)this + 648))(this, 4, a3, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, void, void))(*(void *)this + 168))(this, *(void *)(*(void *)(*((void *)this + 1) + 168) + 32), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, void))(*(void *)this + 648))(this, 4, a3, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, void, void))(*(void *)this + 168))(this, *(void *)(*(void *)(*((void *)this + 1) + 168) + 40), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, void))(*(void *)this + 648))(this, 4, a3, 0);
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 1) + 168) + 24);
  int v6 = *(uint64_t (**)(llvm::MCWinCOFFStreamer *, uint64_t, void))(*(void *)this + 168);

  return v6(this, v5, 0);
}

uint64_t llvm::MCWinCOFFStreamer::emitAssemblerFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 272) + 8) + 208))();
}

uint64_t llvm::MCWinCOFFStreamer::emitSymbolAttribute(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 8) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 272);
    *(_DWORD *)(a2 + 8) = v3 | 8;
    uint64_t v13 = a2;
    uint64_t v5 = *(void **)(v4 + 64);
    if ((unint64_t)v5 >= *(void *)(v4 + 72))
    {
      uint64_t v11 = v4;
      uint64_t v12 = a2;
      int v10 = a3;
      int v6 = sub_1CBC13470((void **)(v4 + 56), &v13);
      uint64_t v4 = v11;
      a2 = v12;
      a3 = v10;
    }
    else
    {
      void *v5 = a2;
      int v6 = v5 + 1;
    }
    *(void *)(v4 + 64) = v6;
  }
  HIDWORD(v8) = a3 - 9;
  LODWORD(v8) = a3 - 9;
  int v7 = v8 >> 1;
  if ((v7 - 7) < 2)
  {
    *(_WORD *)(a2 + 12) |= 0x100u;
LABEL_8:
    *(_DWORD *)(a2 + 8) |= 0x10u;
    return 1;
  }
  if (!v7) {
    goto LABEL_8;
  }
  return 0;
}

uint64_t llvm::MCWinCOFFStreamer::BeginCOFFSymbolDef(uint64_t this, const llvm::MCSymbol *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 544))
  {
    uint64_t v4 = "starting a new symbol definition without completing the previous one";
    __int16 v5 = 259;
    this = llvm::MCContext::reportError(*(void *)(this + 8), 0, (uint64_t)&v4);
  }
  *(void *)(v3 + 544) = a2;
  return this;
}

uint64_t llvm::MCWinCOFFStreamer::Error(uint64_t a1, uint64_t a2)
{
  return llvm::MCContext::reportError(*(void *)(a1 + 8), 0, a2);
}

uint64_t *llvm::MCWinCOFFStreamer::EmitCOFFSymbolStorageClass(uint64_t *this, unsigned int a2)
{
  uint64_t v2 = this[68];
  if (!v2)
  {
    v14[0] = "storage class specified outside of symbol definition";
    __int16 v7 = 259;
LABEL_11:
    __int16 v15 = v7;
    return (uint64_t *)llvm::MCContext::reportError(this[1], 0, (uint64_t)v14);
  }
  if (a2 >= 0x100)
  {
    v12[0] = "storage class value '";
    void v12[2] = a2;
    __int16 v13 = 2307;
    v14[0] = v12;
    _OWORD v14[2] = "' out of range";
    __int16 v7 = 770;
    goto LABEL_11;
  }
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    uint64_t v4 = this[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    v14[0] = v2;
    __int16 v5 = *(uint64_t **)(v4 + 64);
    if ((unint64_t)v5 >= *(void *)(v4 + 72))
    {
      __int16 v10 = a2;
      uint64_t v11 = this;
      uint64_t v9 = v4;
      unint64_t v8 = sub_1CBC13470((void **)(v4 + 56), v14);
      uint64_t v4 = v9;
      LOWORD(a2) = v10;
      int v6 = v8;
      this = v11;
    }
    else
    {
      uint64_t *v5 = v2;
      int v6 = v5 + 1;
    }
    *(void *)(v4 + 64) = v6;
    uint64_t v2 = this[68];
  }
  *(_WORD *)(v2 + 12) = a2 | (*(unsigned __int8 *)(v2 + 13) << 8);
  return this;
}

uint64_t *llvm::MCWinCOFFStreamer::EmitCOFFSymbolType(uint64_t *this, unsigned int a2)
{
  uint64_t v2 = this[68];
  if (!v2)
  {
    v14[0] = "symbol type specified outside of a symbol definition";
    __int16 v7 = 259;
LABEL_11:
    __int16 v15 = v7;
    return (uint64_t *)llvm::MCContext::reportError(this[1], 0, (uint64_t)v14);
  }
  if (a2 >= 0x10000)
  {
    v12[0] = "type value '";
    void v12[2] = a2;
    __int16 v13 = 2307;
    v14[0] = v12;
    _OWORD v14[2] = "' out of range";
    __int16 v7 = 770;
    goto LABEL_11;
  }
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    uint64_t v4 = this[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    v14[0] = v2;
    __int16 v5 = *(uint64_t **)(v4 + 64);
    if ((unint64_t)v5 >= *(void *)(v4 + 72))
    {
      __int16 v10 = a2;
      uint64_t v11 = this;
      uint64_t v9 = v4;
      unint64_t v8 = sub_1CBC13470((void **)(v4 + 56), v14);
      uint64_t v4 = v9;
      LOWORD(a2) = v10;
      int v6 = v8;
      this = v11;
    }
    else
    {
      uint64_t *v5 = v2;
      int v6 = v5 + 1;
    }
    *(void *)(v4 + 64) = v6;
    uint64_t v2 = this[68];
  }
  *(_WORD *)(v2 + 32) = a2;
  return this;
}

uint64_t llvm::MCWinCOFFStreamer::EndCOFFSymbolDef(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(void *)(this + 544))
  {
    uint64_t v2 = "ending symbol definition without starting one";
    __int16 v3 = 259;
    this = llvm::MCContext::reportError(*(void *)(this + 8), 0, (uint64_t)&v2);
  }
  *(void *)(v1 + 544) = 0;
  return this;
}

uint64_t llvm::MCWinCOFFStreamer::EmitCOFFSafeSEH(uint64_t this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  if (*(_DWORD *)(v2 + 48) == 41 && (*((_WORD *)a2 + 6) & 0x200) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(v2 + 168) + 688);
    llvm::MCAssembler::registerSection(*(void *)(this + 272), v3);
    if (((1 << *(unsigned char *)(v3 + 24)) & 0xFFFFFFFCLL) == 0) {
      *(unsigned char *)(v3 + 24) = 2;
    }
    operator new();
  }
  return this;
}

void llvm::MCWinCOFFStreamer::EmitCOFFSymbolIndex(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = *((unsigned int *)this + 30);
  if (v2) {
    uint64_t v3 = *(void *)(*((void *)this + 14) + 32 * v2 - 32);
  }
  else {
    uint64_t v3 = 0;
  }
  llvm::MCAssembler::registerSection(*((void *)this + 34), v3);
  if (((1 << *(unsigned char *)(v3 + 24)) & 0xFFFFFFFCLL) == 0) {
    *(unsigned char *)(v3 + 24) = 2;
  }
  operator new();
}

uint64_t llvm::MCWinCOFFStreamer::EmitCOFFSectionIndex(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2)
{
  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(void *)this + 56))(this);
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  uint64_t v5 = *((void *)this + 1);
  *(void *)(v5 + 272) += 24;
  uint64_t v6 = *(void *)(v5 + 192);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 24 > *(void *)(v5 + 200) - v6)
  {
    unsigned int v17 = *(_DWORD *)(v5 + 216) >> 7;
    if (v17 >= 0x1E) {
      LOBYTE(v17) = 30;
    }
    uint64_t v18 = 4096 << v17;
    unint64_t v7 = (unint64_t)operator new(4096 << v17, (std::align_val_t)8uLL);
    unsigned int v19 = *(_DWORD *)(v5 + 216);
    if (v19 >= *(_DWORD *)(v5 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v5 + 208) + 8 * v19) = v7;
    ++*(_DWORD *)(v5 + 216);
    *(void *)(v5 + 200) = v7 + v18;
  }
  else
  {
    unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 192) = v7 + 24;
  int v8 = *(unsigned __int8 *)(*(void *)(v5 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = a2;
  uint64_t result = DataFragment + 120;
  unint64_t v10 = *(void *)(DataFragment + 120);
  uint64_t v11 = *(void *)(DataFragment + 72);
  *(void *)&long long v20 = v7;
  *((void *)&v20 + 1) = v11 | 0x1300000000;
  uint64_t v21 = 0;
  unsigned int v12 = *(_DWORD *)(DataFragment + 128);
  if (v12 >= *(_DWORD *)(DataFragment + 132))
  {
    BOOL v16 = v10 + 24 * v12 > (unint64_t)&v20;
    if (v10 > (unint64_t)&v20 || !v16) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v13 = v10 + 24 * *(unsigned int *)(DataFragment + 128);
  long long v14 = v20;
  *(void *)(v13 + 16) = v21;
  *(_OWORD *)uint64_t v13 = v14;
  ++*(_DWORD *)(DataFragment + 128);
  unint64_t v15 = *(void *)(DataFragment + 72);
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (v15 + 2 > *(void *)(DataFragment + 80)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_WORD *)(*(void *)(DataFragment + 64) + v15) = 0;
    unint64_t v15 = *(void *)(DataFragment + 72);
  }
  *(void *)(DataFragment + 72) = v15 + 2;
  return result;
}

uint64_t llvm::MCWinCOFFStreamer::EmitCOFFSecRel32(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2, uint64_t a3)
{
  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(void *)this + 56))(this);
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  uint64_t v7 = *((void *)this + 1);
  *(void *)(v7 + 272) += 24;
  uint64_t v8 = *(void *)(v7 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(v7 + 200) - v8)
  {
    unsigned int v25 = *(_DWORD *)(v7 + 216) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v9 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(v7 + 216);
    if (v27 >= *(_DWORD *)(v7 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v7 + 208) + 8 * v27) = v9;
    ++*(_DWORD *)(v7 + 216);
    *(void *)(v7 + 200) = v9 + v26;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v7 + 192) = v9 + 24;
  int v10 = *(unsigned __int8 *)(*(void *)(v7 + 152) + 18) << 16;
  *(unsigned char *)unint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = a2;
  if (a3)
  {
    uint64_t v11 = *((void *)this + 1);
    *(void *)(v11 + 272) += 24;
    uint64_t v12 = *(void *)(v11 + 192);
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 24 > *(void *)(v11 + 200) - v12)
    {
      unsigned int v28 = *(_DWORD *)(v11 + 216) >> 7;
      if (v28 >= 0x1E) {
        LOBYTE(v28) = 30;
      }
      uint64_t v29 = 4096 << v28;
      unint64_t v13 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
      unsigned int v30 = *(_DWORD *)(v11 + 216);
      if (v30 >= *(_DWORD *)(v11 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v11 + 208) + 8 * v30) = v13;
      ++*(_DWORD *)(v11 + 216);
      *(void *)(v11 + 200) = v13 + v29;
    }
    else
    {
      unint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v11 + 192) = v13 + 24;
    *(unsigned char *)unint64_t v13 = 1;
    *(_DWORD *)(v13 + 1) = *(unsigned __int8 *)(v13 + 4) << 24;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = a3;
    uint64_t v14 = *((void *)this + 1);
    *(void *)(v14 + 272) += 32;
    uint64_t v15 = *(void *)(v14 + 192);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 32 > *(void *)(v14 + 200) - v15)
    {
      unsigned int v31 = *(_DWORD *)(v14 + 216) >> 7;
      if (v31 >= 0x1E) {
        LOBYTE(v31) = 30;
      }
      uint64_t v32 = 4096 << v31;
      unint64_t v16 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
      unsigned int v33 = *(_DWORD *)(v14 + 216);
      if (v33 >= *(_DWORD *)(v14 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v14 + 208) + 8 * v33) = v16;
      ++*(_DWORD *)(v14 + 216);
      *(void *)(v14 + 200) = v16 + v32;
    }
    else
    {
      unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v14 + 192) = v16 + 32;
    *(unsigned char *)unint64_t v16 = 0;
    *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = v9;
    *(void *)(v16 + 24) = v13;
    unint64_t v9 = v16;
  }
  uint64_t result = DataFragment + 120;
  unint64_t v18 = *(void *)(DataFragment + 120);
  uint64_t v19 = *(void *)(DataFragment + 72);
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v19 | 0x1400000000;
  uint64_t v35 = 0;
  unsigned int v20 = *(_DWORD *)(DataFragment + 128);
  if (v20 >= *(_DWORD *)(DataFragment + 132))
  {
    BOOL v24 = v18 + 24 * v20 > (unint64_t)&v34;
    if (v18 > (unint64_t)&v34 || !v24) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v21 = v18 + 24 * *(unsigned int *)(DataFragment + 128);
  long long v22 = v34;
  *(void *)(v21 + 16) = v35;
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(DataFragment + 128);
  unint64_t v23 = *(void *)(DataFragment + 72);
  if (v23 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v23 + 4 > *(void *)(DataFragment + 80)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*(void *)(DataFragment + 64) + v23) = 0;
    unint64_t v23 = *(void *)(DataFragment + 72);
  }
  *(void *)(DataFragment + 72) = v23 + 4;
  return result;
}

uint64_t llvm::MCWinCOFFStreamer::EmitCOFFImgRel32(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2, uint64_t a3)
{
  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(void *)this + 56))(this);
  uint64_t DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  uint64_t v7 = *((void *)this + 1);
  *(void *)(v7 + 272) += 24;
  uint64_t v8 = *(void *)(v7 + 192);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 24 > *(void *)(v7 + 200) - v8)
  {
    unsigned int v25 = *(_DWORD *)(v7 + 216) >> 7;
    if (v25 >= 0x1E) {
      LOBYTE(v25) = 30;
    }
    uint64_t v26 = 4096 << v25;
    unint64_t v9 = (unint64_t)operator new(4096 << v25, (std::align_val_t)8uLL);
    unsigned int v27 = *(_DWORD *)(v7 + 216);
    if (v27 >= *(_DWORD *)(v7 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v7 + 208) + 8 * v27) = v9;
    ++*(_DWORD *)(v7 + 216);
    *(void *)(v7 + 200) = v9 + v26;
  }
  else
  {
    unint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v7 + 192) = v9 + 24;
  if (*(unsigned char *)(*(void *)(v7 + 152) + 18)) {
    int v10 = 65651;
  }
  else {
    int v10 = 115;
  }
  *(unsigned char *)unint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = a2;
  if (a3)
  {
    uint64_t v11 = *((void *)this + 1);
    *(void *)(v11 + 272) += 24;
    uint64_t v12 = *(void *)(v11 + 192);
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) - v12 + 24 > *(void *)(v11 + 200) - v12)
    {
      unsigned int v28 = *(_DWORD *)(v11 + 216) >> 7;
      if (v28 >= 0x1E) {
        LOBYTE(v28) = 30;
      }
      uint64_t v29 = 4096 << v28;
      unint64_t v13 = (unint64_t)operator new(4096 << v28, (std::align_val_t)8uLL);
      unsigned int v30 = *(_DWORD *)(v11 + 216);
      if (v30 >= *(_DWORD *)(v11 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v11 + 208) + 8 * v30) = v13;
      ++*(_DWORD *)(v11 + 216);
      *(void *)(v11 + 200) = v13 + v29;
    }
    else
    {
      unint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v11 + 192) = v13 + 24;
    *(unsigned char *)unint64_t v13 = 1;
    *(_DWORD *)(v13 + 1) = *(unsigned __int8 *)(v13 + 4) << 24;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = a3;
    uint64_t v14 = *((void *)this + 1);
    *(void *)(v14 + 272) += 32;
    uint64_t v15 = *(void *)(v14 + 192);
    if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 32 > *(void *)(v14 + 200) - v15)
    {
      unsigned int v31 = *(_DWORD *)(v14 + 216) >> 7;
      if (v31 >= 0x1E) {
        LOBYTE(v31) = 30;
      }
      uint64_t v32 = 4096 << v31;
      unint64_t v16 = (unint64_t)operator new(4096 << v31, (std::align_val_t)8uLL);
      unsigned int v33 = *(_DWORD *)(v14 + 216);
      if (v33 >= *(_DWORD *)(v14 + 220)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v14 + 208) + 8 * v33) = v16;
      ++*(_DWORD *)(v14 + 216);
      *(void *)(v14 + 200) = v16 + v32;
    }
    else
    {
      unint64_t v16 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v14 + 192) = v16 + 32;
    *(unsigned char *)unint64_t v16 = 0;
    *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = v9;
    *(void *)(v16 + 24) = v13;
    unint64_t v9 = v16;
  }
  uint64_t result = DataFragment + 120;
  unint64_t v18 = *(void *)(DataFragment + 120);
  uint64_t v19 = *(void *)(DataFragment + 72);
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v19 | 0x300000000;
  uint64_t v35 = 0;
  unsigned int v20 = *(_DWORD *)(DataFragment + 128);
  if (v20 >= *(_DWORD *)(DataFragment + 132))
  {
    BOOL v24 = v18 + 24 * v20 > (unint64_t)&v34;
    if (v18 > (unint64_t)&v34 || !v24) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v21 = v18 + 24 * *(unsigned int *)(DataFragment + 128);
  long long v22 = v34;
  *(void *)(v21 + 16) = v35;
  *(_OWORD *)uint64_t v21 = v22;
  ++*(_DWORD *)(DataFragment + 128);
  unint64_t v23 = *(void *)(DataFragment + 72);
  if (v23 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v23 + 4 > *(void *)(DataFragment + 80)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_DWORD *)(*(void *)(DataFragment + 64) + v23) = 0;
    unint64_t v23 = *(void *)(DataFragment + 72);
  }
  *(void *)(DataFragment + 72) = v23 + 4;
  return result;
}

void llvm::MCWinCOFFStreamer::emitCommonSymbol(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, unint64_t a3, unsigned int a4)
{
  v33[16] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((void *)this + 1);
  if (*(_DWORD *)(v7 + 60) == 15 && (*(_DWORD *)(v7 + 64) | 0x10) == 0x10)
  {
    if (a4 >= 0x21) {
      llvm::report_fatal_error((llvm *)"alignment is limited to 32-bytes", (const llvm::Twine *)1);
    }
    if (a4 > a3) {
      a3 = a4;
    }
  }
  int v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 8) == 0)
  {
    uint64_t v9 = *((void *)this + 34);
    *((_DWORD *)a2 + 2) = v8 | 8;
    unsigned int v31 = a2;
    int v10 = *(void **)(v9 + 64);
    if ((unint64_t)v10 >= *(void *)(v9 + 72))
    {
      unint64_t v21 = a3;
      uint64_t v11 = sub_1CBC13470((void **)(v9 + 56), &v31);
      a3 = v21;
    }
    else
    {
      *int v10 = a2;
      uint64_t v11 = v10 + 1;
    }
    *(void *)(v9 + 64) = v11;
    int v8 = *((_DWORD *)a2 + 2);
  }
  BOOL v12 = 0;
  *((void *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = (-8192 * __clz(a4)) & 0x3E000 | 0xC10 | v8 & 0xFFFC0FFF;
  if (*(_DWORD *)(v7 + 60) == 15)
  {
    int v13 = *(_DWORD *)(v7 + 64);
    if (v13 == 16) {
      return;
    }
    BOOL v12 = v13 == 0;
  }
  if (a4 >= 2 && !v12)
  {
    unsigned int v30 = &v31;
    unsigned int v31 = v33;
    long long v32 = xmmword_1CFAC3020;
    int v23 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    int v29 = 0;
    long long v22 = &unk_1F2646FA8;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    long long __dst = 0;
    uint64_t v14 = *(void *)(*((void *)this + 1) + 168);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v22, " -aligncomm:\"", 0xDuLL);
    uint64_t v15 = __dst;
    if ((*(unsigned char *)a2 & 4) != 0)
    {
      unint64_t v16 = (size_t *)*((void *)a2 - 1);
      size_t v19 = *v16;
      unsigned int v17 = v16 + 2;
      size_t v18 = v19;
      if (v19 <= v25 - (uint64_t)__dst)
      {
        if (v18)
        {
          memcpy(__dst, v17, v18);
          uint64_t v15 = (char *)__dst + v18;
          long long __dst = (char *)__dst + v18;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v22, (const char *)v17, v18);
        uint64_t v15 = __dst;
      }
    }
    if ((unint64_t)(v25 - (void)v15) > 1)
    {
      *uint64_t v15 = 11298;
      long long __dst = (char *)__dst + 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v22, "\",", 2uLL);
    }
    sub_1CD098D14((llvm::raw_ostream *)&v22, 32 - __clz(a4 - 1), 0, 0, 0);
    __n128 v20 = sub_1CD6AD2C8((uint64_t)this);
    (*(void (**)(llvm::MCWinCOFFStreamer *, void, void, __n128))(*(void *)this + 168))(this, *(void *)(v14 + 664), 0, v20);
    (*(void (**)(llvm::MCWinCOFFStreamer *, void *, void))(*(void *)this + 488))(this, v31, v32);
    sub_1CCBC2468((uint64_t)this);
    long long v22 = &unk_1F2646B98;
    if (v29 == 1 && v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8077774924);
    }
    if (v31 != v33) {
      free(v31);
    }
  }
}

BOOL llvm::MCWinCOFFStreamer::emitLocalCommonSymbol(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(*((void *)this + 1) + 168) + 40);
  __n128 v9 = sub_1CD6AD2C8((uint64_t)this);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, void, __n128))(*(void *)this + 168))(this, v8, 0, v9);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, void, uint64_t, void))(*(void *)this + 640))(this, a4, 0, 1, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, llvm::MCSymbol *, void))(*(void *)this + 192))(this, a2, 0);
  *((_DWORD *)a2 + 2) &= ~0x10u;
  llvm::MCStreamer::emitZeros(this, a3);

  return sub_1CCBC2468((uint64_t)this);
}

char *llvm::MCWinCOFFStreamer::emitWeakReference(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(llvm::MCWinCOFFStreamer *, llvm::MCSymbol *, uint64_t))(*(void *)this + 304))(this, a2, 23);
  int v7 = *((_DWORD *)a3 + 2);
  if ((v7 & 8) == 0)
  {
    uint64_t v8 = *((void *)this + 34);
    *((_DWORD *)a3 + 2) = v7 | 8;
    unsigned int v17 = a3;
    __n128 v9 = *(void **)(v8 + 64);
    if ((unint64_t)v9 >= *(void *)(v8 + 72))
    {
      uint64_t result = (char *)sub_1CBC13470((void **)(v8 + 56), &v17);
    }
    else
    {
      *__n128 v9 = a3;
      uint64_t result = (char *)(v9 + 1);
    }
    *(void *)(v8 + 64) = result;
  }
  uint64_t v10 = *((void *)this + 1);
  *(void *)(v10 + 272) += 24;
  uint64_t v11 = *(void *)(v10 + 192);
  if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 24 > *(void *)(v10 + 200) - v11)
  {
    unsigned int v14 = *(_DWORD *)(v10 + 216) >> 7;
    if (v14 >= 0x1E) {
      LOBYTE(v14) = 30;
    }
    uint64_t v15 = 4096 << v14;
    uint64_t result = (char *)operator new(4096 << v14, (std::align_val_t)8uLL);
    unint64_t v12 = (unint64_t)result;
    unsigned int v16 = *(_DWORD *)(v10 + 216);
    if (v16 >= *(_DWORD *)(v10 + 220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v10 + 208) + 8 * v16) = result;
    ++*(_DWORD *)(v10 + 216);
    *(void *)(v10 + 200) = &result[v15];
  }
  else
  {
    unint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v10 + 192) = v12 + 24;
  if (*(unsigned char *)(*(void *)(v10 + 152) + 18)) {
    int v13 = 65565;
  }
  else {
    int v13 = 29;
  }
  *(unsigned char *)unint64_t v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = a3;
  *((void *)a2 + 3) = v12;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFE3FF | 0x800;
  *(void *)a2 &= 7uLL;
  return result;
}

void llvm::MCWinCOFFStreamer::emitCGProfileEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(*(void *)(a2 + 16) + 8) & 1) == 0 && (*(unsigned char *)(*(void *)(a3 + 16) + 8) & 1) == 0)
  {
    int v7 = *(void **)(a1 + 272);
    uint64_t v8 = (void *)v7[274];
    unint64_t v9 = v7[275];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = (void *)v7[273];
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v11) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v11) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        uint64_t v15 = (char *)operator new(24 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      unsigned int v16 = &v15[8 * (v8 - v11)];
      *(void *)unsigned int v16 = a2;
      *((void *)v16 + 1) = a3;
      *((void *)v16 + 2) = a4;
      uint64_t v10 = v16 + 24;
      if (v8 != v11)
      {
        do
        {
          long long v17 = *(_OWORD *)(v8 - 3);
          *((void *)v16 - 1) = *(v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 3;
        }
        while (v8 != v11);
        uint64_t v8 = (void *)v7[273];
      }
      v7[273] = v16;
      v7[274] = v10;
      v7[275] = &v15[24 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v8 = a2;
      v8[1] = a3;
      uint64_t v10 = v8 + 3;
      v8[2] = a4;
    }
    v7[274] = v10;
  }
}

void *llvm::MCWinCOFFStreamer::finalizeCGProfileEntry(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    uint64_t v4 = result[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    uint64_t v8 = v2;
    uint64_t v5 = *(void **)(v4 + 64);
    if ((unint64_t)v5 >= *(void *)(v4 + 72))
    {
      uint64_t v6 = v2;
      uint64_t v7 = v4;
      uint64_t result = sub_1CBC13470((void **)(v4 + 56), &v8);
      uint64_t v2 = v6;
      uint64_t v4 = v7;
    }
    else
    {
      void *v5 = v2;
      uint64_t result = v5 + 1;
    }
    *(void *)(v4 + 64) = result;
    *(_DWORD *)(v2 + 8) |= 0x10u;
  }
  return result;
}

void *llvm::MCWinCOFFStreamer::finalizeCGProfile(void *this)
{
  uint64_t v1 = this[34];
  uint64_t v2 = *(void **)(v1 + 2184);
  int v3 = *(void **)(v1 + 2192);
  if (v2 != v3)
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = *(void *)(*v2 + 16);
      uint64_t v6 = v4[34];
      int v7 = *(_DWORD *)(v5 + 8);
      if ((v7 & 8) == 0)
      {
        *(_DWORD *)(v5 + 8) = v7 | 8;
        uint64_t v14 = v5;
        uint64_t v8 = *(void **)(v6 + 64);
        if ((unint64_t)v8 >= *(void *)(v6 + 72))
        {
          uint64_t v12 = v5;
          this = sub_1CBC13470((void **)(v6 + 56), &v14);
          uint64_t v5 = v12;
        }
        else
        {
          *uint64_t v8 = v5;
          this = v8 + 1;
        }
        *(void *)(v6 + 64) = this;
        *(_DWORD *)(v5 + 8) |= 0x10u;
        uint64_t v6 = v4[34];
      }
      uint64_t v9 = *(void *)(v2[1] + 16);
      int v10 = *(_DWORD *)(v9 + 8);
      if ((v10 & 8) == 0)
      {
        *(_DWORD *)(v9 + 8) = v10 | 8;
        uint64_t v14 = v9;
        uint64_t v11 = *(void **)(v6 + 64);
        if ((unint64_t)v11 >= *(void *)(v6 + 72))
        {
          uint64_t v13 = v9;
          this = sub_1CBC13470((void **)(v6 + 56), &v14);
          uint64_t v9 = v13;
        }
        else
        {
          *uint64_t v11 = v9;
          this = v11 + 1;
        }
        *(void *)(v6 + 64) = this;
        *(_DWORD *)(v9 + 8) |= 0x10u;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return this;
}

void llvm::MCWinCOFFStreamer::finishImpl(llvm::MCContext **this)
{
  llvm::MCWinCOFFStreamer::finalizeCGProfile(this);

  llvm::MCObjectStreamer::finishImpl(this);
}

void sub_1CCBDD380(llvm::MCObjectStreamer *a1)
{
}

double sub_1CCBDD3B8(llvm::MCObjectStreamer *this)
{
  *((void *)this + 68) = 0;
  return llvm::MCObjectStreamer::reset(this);
}

uint64_t llvm::MCXCOFFObjectTargetWriter::MCXCOFFObjectTargetWriter(uint64_t this, char a2)
{
  *(void *)this = &unk_1F26313C8;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t sub_1CCBDD3FC()
{
  return 9;
}

_DWORD *llvm::MachObjectWriter::reset(llvm::MachObjectWriter *this)
{
  sub_1CCBDD498((unsigned int *)this + 4);
  sub_1CBB8977C((_DWORD *)this + 10);
  *((unsigned char *)this + 128) = 0;
  uint64_t result = sub_1CCBE370C((_DWORD *)this + 22);
  *((void *)this + 18) = *((void *)this + 17);
  *((void *)this + 21) = *((void *)this + 20);
  *((void *)this + 24) = *((void *)this + 23);
  return result;
}

void sub_1CCBDD498(unsigned int *a1)
{
  unsigned int v2 = a1[2];
  if (v2 || a1[3])
  {
    uint64_t v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CD6BD44C(a1);
    }
    else
    {
      if (v3)
      {
        uint64_t v4 = *(void **)a1;
        uint64_t v5 = 32 * v3;
        do
        {
          if (*v4 != -4096)
          {
            if (*v4 != -8192)
            {
              uint64_t v6 = (void *)v4[1];
              if (v6)
              {
                v4[2] = v6;
                operator delete(v6);
              }
            }
            *uint64_t v4 = -4096;
          }
          v4 += 4;
          v5 -= 32;
        }
        while (v5);
      }
      *((void *)a1 + 1) = 0;
    }
  }
}

uint64_t llvm::MachObjectWriter::doesSymbolRequireExternRelocation(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  unint64_t AssociatedFragment = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a2 + 2) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3));
    *(void *)a2 = *(void *)a2 & 7 | AssociatedFragment;
  }
  if (AssociatedFragment) {
    return (*((unsigned __int16 *)a2 + 6) >> 7) & 1;
  }
  else {
    return 1;
  }
}

BOOL llvm::MachObjectWriter::MachSymbolData::operator<(void *a1, void *a2)
{
  if ((*(unsigned char *)*a1 & 4) != 0)
  {
    unsigned int v2 = *(size_t **)(*a1 - 8);
    size_t v5 = *v2;
    uint64_t v3 = v2 + 2;
    size_t v4 = v5;
  }
  else
  {
    uint64_t v3 = 0;
    size_t v4 = 0;
  }
  if ((*(unsigned char *)*a2 & 4) != 0)
  {
    uint64_t v6 = *(size_t **)(*a2 - 8);
    size_t v9 = *v6;
    int v7 = v6 + 2;
    size_t v8 = v9;
  }
  else
  {
    int v7 = 0;
    size_t v8 = 0;
  }
  if (v8 >= v4) {
    size_t v10 = v4;
  }
  else {
    size_t v10 = v8;
  }
  if (v10 && (int v11 = memcmp(v3, v7, v10)) != 0)
  {
    int v12 = (v11 >> 31) | 1;
  }
  else
  {
    if (v4 < v8) {
      int v12 = -1;
    }
    else {
      int v12 = 1;
    }
    if (v4 == v8) {
      int v12 = 0;
    }
  }
  return v12 == -1;
}

uint64_t llvm::MachObjectWriter::isFixupKindPCRel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 80))(*(void *)(a2 + 8), a3)+ 16) & 1;
}

uint64_t llvm::MachObjectWriter::getFragmentAddress(llvm::MachObjectWriter *this, const llvm::MCFragment *a2, const llvm::MCAsmLayout *a3)
{
  int v4 = *((_DWORD *)this + 20);
  if (!v4)
  {
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)this + 8);
  unsigned int v7 = v4 - 1;
  uint64_t v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  uint64_t v9 = *(void *)(v6 + 16 * v8);
  if (v5 != v9)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v8 + v10++;
      uint64_t v8 = v11 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * v8);
      if (v5 == v9) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v12 = *(void *)(v6 + 16 * v8 + 8);
LABEL_7:
  llvm::MCAsmLayout::ensureValid(a3, a2);
  return *((void *)a2 + 4) + v12;
}

uint64_t llvm::MachObjectWriter::getSymbolAddress(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2, const llvm::MCAsmLayout *a3)
{
  if ((*((_DWORD *)a2 + 2) & 0x1C00) != 0x800)
  {
    int v3 = *((_DWORD *)this + 20);
    if (v3)
    {
      uint64_t v4 = *(void *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      uint64_t v5 = *((void *)this + 8);
      unsigned int v6 = v3 - 1;
      uint64_t v7 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
      uint64_t v8 = *(void *)(v5 + 16 * v7);
      if (v4 == v8)
      {
LABEL_4:
        uint64_t v9 = *(void *)(v5 + 16 * v7 + 8);
LABEL_5:
        v27[0] = 0;
        sub_1CCBC6418(a3, (uint64_t *)a2, 1, v27);
        return v27[0] + v9;
      }
      int v11 = 1;
      while (v8 != -4096)
      {
        int v12 = v7 + v11++;
        uint64_t v7 = v12 & v6;
        uint64_t v8 = *(void *)(v5 + 16 * v7);
        if (v4 == v8) {
          goto LABEL_4;
        }
      }
    }
    uint64_t v9 = 0;
    goto LABEL_5;
  }
  int v13 = *((_DWORD *)a2 + 2) | 4;
  *((_DWORD *)a2 + 2) = v13;
  uint64_t v14 = *((void *)a2 + 3);
  if (*(unsigned char *)v14 == 1) {
    return *(void *)(v14 + 16);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v31 = 0;
  uint64_t v30 = 0;
  *((_DWORD *)a2 + 2) = v13;
  if ((llvm::MCExpr::evaluateAsRelocatable(v14, (uint64_t)&v28, (uint64_t *)a3, 0) & 1) == 0)
  {
    uint64_t v15 = sub_1CD6ACAC0(a2);
    __int16 v26 = 1283;
    long long v17 = "unable to evaluate offset for variable '";
    goto LABEL_28;
  }
  if (v28 && !sub_1CC34BE58(*(void *)(v28 + 16), 1))
  {
    uint64_t v18 = v28;
LABEL_27:
    uint64_t v15 = sub_1CD6ACAC0(*(unsigned char **)(v18 + 16));
    __int16 v26 = 1283;
    long long v17 = "unable to evaluate offset to undefined symbol '";
LABEL_28:
    v25[0] = (uint64_t)v17;
    v25[2] = v15;
    v25[3] = v16;
    int v23 = "'";
    __int16 v24 = 259;
    sub_1CD3E3950(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm *)v27, (const llvm::Twine *)1);
  }
  if (v29 && !sub_1CC34BE58(*(void *)(v29 + 16), 1))
  {
    uint64_t v18 = v29;
    goto LABEL_27;
  }
  uint64_t v22 = v30;
  if (v28) {
    v22 += llvm::MachObjectWriter::getSymbolAddress(this, *(const llvm::MCSymbol **)(v28 + 16), a3);
  }
  if (v29) {
    v22 += llvm::MachObjectWriter::getSymbolAddress(this, *(const llvm::MCSymbol **)(v29 + 16), a3);
  }
  return v22;
}

unint64_t llvm::MachObjectWriter::getPaddingSize(llvm::MachObjectWriter *this, const llvm::MCSection *a2, const llvm::MCAsmLayout *a3)
{
  int v5 = *((_DWORD *)this + 20);
  if (!v5)
  {
LABEL_12:
    uint64_t v10 = 0;
    goto LABEL_4;
  }
  uint64_t v6 = *((void *)this + 8);
  unsigned int v7 = v5 - 1;
  uint64_t v8 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v9 = *(const llvm::MCSection **)(v6 + 16 * v8);
  if (v9 != a2)
  {
    int v19 = 1;
    while (v9 != (const llvm::MCSection *)-4096)
    {
      int v20 = v8 + v19++;
      uint64_t v8 = v20 & v7;
      uint64_t v9 = *(const llvm::MCSection **)(v6 + 16 * v8);
      if (v9 == a2) {
        goto LABEL_3;
      }
    }
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v10 = *(void *)(v6 + 16 * v8 + 8);
LABEL_4:
  int v11 = (const llvm::MCFragment *)*((void *)a2 + 13);
  llvm::MCAsmLayout::ensureValid(a3, v11);
  uint64_t v12 = *((void *)v11 + 4);
  unint64_t v13 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v11);
  unsigned int v14 = *((_DWORD *)a2 + 8) + 1;
  if (*((_DWORD *)a3 + 4) <= v14) {
    return 0;
  }
  unint64_t v15 = v13;
  uint64_t v16 = *(unsigned char **)(*((void *)a3 + 1) + 8 * v14);
  if ((*(uint64_t (**)(unsigned char *))(*(void *)v16 + 16))(v16)) {
    return 0;
  }
  uint64_t v17 = 1 << (63 - __clz((1 << v16[24])));
  return ((v12 + v10 + v15 + v17 - 1) & -v17) - (v12 + v10 + v15);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeHeader(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, int a7)
{
  if (a5) {
    int v13 = 0x2000;
  }
  else {
    int v13 = 0;
  }
  (*(void (**)(void))(**(void **)(a1 + 208) + 80))(*(void *)(a1 + 208));
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    unsigned int v14 = -17958193;
  }
  else {
    unsigned int v14 = -17958194;
  }
  unint64_t v15 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v16 = bswap32(v14);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v14 = v16;
  }
  *(_DWORD *)uint64_t v38 = v14;
  llvm::raw_ostream::write(v15, v38, 4uLL);
  unsigned int v17 = *(_DWORD *)(*(void *)(a1 + 8) + 12);
  uint64_t v18 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v19 = bswap32(v17);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v17 = v19;
  }
  *(_DWORD *)uint64_t v38 = v17;
  llvm::raw_ostream::write(v18, v38, 4uLL);
  unsigned int v20 = *(_DWORD *)(*(void *)(a1 + 8) + 16);
  if (a7) {
    int v21 = -1073741822;
  }
  else {
    int v21 = -2147483646;
  }
  int v22 = v21 | (a6 << 24);
  if ((a6 & 0xFF00000000) != 0) {
    unsigned int v20 = v22;
  }
  int v23 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v24 = bswap32(v20);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v20 = v24;
  }
  *(_DWORD *)uint64_t v38 = v20;
  llvm::raw_ostream::write(v23, v38, 4uLL);
  uint64_t v25 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v26 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v27 = v26;
  }
  else {
    unsigned int v27 = a2;
  }
  *(_DWORD *)uint64_t v38 = v27;
  llvm::raw_ostream::write(v25, v38, 4uLL);
  uint64_t v28 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v29 = bswap32(a3);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = a3;
  }
  *(_DWORD *)uint64_t v38 = v30;
  llvm::raw_ostream::write(v28, v38, 4uLL);
  int v31 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v32 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v33 = v32;
  }
  else {
    unsigned int v33 = a4;
  }
  *(_DWORD *)uint64_t v38 = v33;
  llvm::raw_ostream::write(v31, v38, 4uLL);
  long long v34 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    int v35 = v13 << 8;
  }
  else {
    int v35 = v13;
  }
  *(_DWORD *)uint64_t v38 = v35;
  uint64_t result = llvm::raw_ostream::write(v34, v38, 4uLL);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8))
  {
    unsigned int v37 = *(llvm::raw_ostream **)(a1 + 208);
    *(_DWORD *)uint64_t v38 = 0;
    return llvm::raw_ostream::write(v37, v38, 4uLL);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeWithPadding(uint64_t a1, const char *a2, size_t a3, int a4)
{
  unsigned int v7 = *(llvm::raw_ostream **)(a1 + 208);
  uint64_t v8 = (void *)*((void *)v7 + 4);
  if (a3 > *((void *)v7 + 3) - (void)v8)
  {
    llvm::raw_ostream::write(v7, a2, a3);
  }
  else if (a3)
  {
    memcpy(v8, a2, a3);
    *((void *)v7 + 4) += a3;
  }
  uint64_t v9 = *(llvm::raw_ostream **)(a1 + 208);

  return llvm::raw_ostream::write_zeros(v9, a4 - (int)a3);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSegmentLoadCommand(uint64_t a1, const char *a2, size_t a3, unsigned int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unsigned int a9, unsigned int a10)
{
  (*(void (**)(void))(**(void **)(a1 + 208) + 80))(*(void *)(a1 + 208));
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    int v18 = 25;
  }
  else {
    int v18 = 1;
  }
  unsigned int v19 = *(llvm::raw_ostream **)(a1 + 208);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    int v20 = 72;
  }
  else {
    int v20 = 56;
  }
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    v18 <<= 24;
  }
  *(_DWORD *)BOOL v65 = v18;
  llvm::raw_ostream::write(v19, v65, 4uLL);
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    int v21 = 80;
  }
  else {
    int v21 = 68;
  }
  unsigned int v22 = v20 + v21 * a4;
  int v23 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v24 = bswap32(v22);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v22 = v24;
  }
  *(_DWORD *)BOOL v65 = v22;
  llvm::raw_ostream::write(v23, v65, 4uLL);
  uint64_t v25 = *(void *)(a1 + 208);
  unsigned int v26 = *(void **)(v25 + 32);
  if (a3 > *(void *)(v25 + 24) - (void)v26)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 208), a2, a3);
  }
  else if (a3)
  {
    memcpy(v26, a2, a3);
    *(void *)(v25 + 32) += a3;
  }
  unsigned int v27 = *(llvm::raw_ostream **)(a1 + 208);
  size_t v28 = (16 - a3);
  if (v28 >= 0x50)
  {
    do
    {
      if (v28 >= 0x4F) {
        size_t v53 = 79;
      }
      else {
        size_t v53 = v28;
      }
      unsigned int v27 = llvm::raw_ostream::write(v27, "", v53);
      LODWORD(v28) = v28 - v53;
    }
    while (v28);
  }
  else
  {
    llvm::raw_ostream::write(v27, "", v28);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8))
  {
    unsigned int v29 = *(llvm::raw_ostream **)(a1 + 208);
    unint64_t v30 = bswap64(a5);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unint64_t v31 = v30;
    }
    else {
      unint64_t v31 = a5;
    }
    *(void *)BOOL v65 = v31;
    llvm::raw_ostream::write(v29, v65, 8uLL);
    unsigned int v32 = *(llvm::raw_ostream **)(a1 + 208);
    unint64_t v33 = bswap64(a6);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unint64_t v34 = v33;
    }
    else {
      unint64_t v34 = a6;
    }
    *(void *)BOOL v65 = v34;
    llvm::raw_ostream::write(v32, v65, 8uLL);
    int v35 = *(llvm::raw_ostream **)(a1 + 208);
    unint64_t v36 = bswap64(a7);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unint64_t v37 = v36;
    }
    else {
      unint64_t v37 = a7;
    }
    *(void *)BOOL v65 = v37;
    llvm::raw_ostream::write(v35, v65, 8uLL);
    uint64_t v38 = *(llvm::raw_ostream **)(a1 + 208);
    unint64_t v39 = bswap64(a8);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unint64_t v40 = v39;
    }
    else {
      unint64_t v40 = a8;
    }
    *(void *)BOOL v65 = v40;
    size_t v41 = 8;
  }
  else
  {
    int v54 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v55 = bswap32(a5);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v56 = v55;
    }
    else {
      int v56 = a5;
    }
    *(_DWORD *)BOOL v65 = v56;
    llvm::raw_ostream::write(v54, v65, 4uLL);
    uint64_t v57 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v58 = bswap32(a6);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v59 = v58;
    }
    else {
      int v59 = a6;
    }
    *(_DWORD *)BOOL v65 = v59;
    llvm::raw_ostream::write(v57, v65, 4uLL);
    int64x2_t v60 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v61 = bswap32(a7);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v62 = v61;
    }
    else {
      int v62 = a7;
    }
    *(_DWORD *)BOOL v65 = v62;
    llvm::raw_ostream::write(v60, v65, 4uLL);
    uint64_t v38 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v63 = bswap32(a8);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v64 = v63;
    }
    else {
      int v64 = a8;
    }
    *(_DWORD *)BOOL v65 = v64;
    size_t v41 = 4;
  }
  llvm::raw_ostream::write(v38, v65, v41);
  uint64_t v42 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v43 = bswap32(a9);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v44 = v43;
  }
  else {
    unsigned int v44 = a9;
  }
  *(_DWORD *)BOOL v65 = v44;
  llvm::raw_ostream::write(v42, v65, 4uLL);
  uint64_t v45 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v46 = bswap32(a10);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v47 = v46;
  }
  else {
    unsigned int v47 = a10;
  }
  *(_DWORD *)BOOL v65 = v47;
  llvm::raw_ostream::write(v45, v65, 4uLL);
  long long v48 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v49 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v50 = v49;
  }
  else {
    unsigned int v50 = a4;
  }
  *(_DWORD *)BOOL v65 = v50;
  llvm::raw_ostream::write(v48, v65, 4uLL);
  char v51 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)BOOL v65 = 0;
  return llvm::raw_ostream::write(v51, v65, 4uLL);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSection(llvm::MachObjectWriter *this, const llvm::MCAsmLayout *a2, const llvm::MCSection *a3, unint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  int v13 = (const llvm::MCFragment *)*((void *)a3 + 13);
  llvm::MCAsmLayout::ensureValid(a2, v13);
  uint64_t v76 = *((void *)v13 + 4);
  unint64_t v14 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a2, a2, v13);
  unsigned int v15 = *((unsigned __int8 *)a3 + 240);
  BOOL v75 = v15 < 0x13;
  (*(void (**)(void))(**((void **)this + 26) + 80))(*((void *)this + 26));
  unsigned int v16 = (const char *)*((void *)a3 + 25);
  unint64_t v17 = *((void *)a3 + 26);
  uint64_t v18 = *((void *)this + 26);
  unsigned int v19 = *(void **)(v18 + 32);
  if (v17 > *(void *)(v18 + 24) - (void)v19)
  {
    llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 26), v16, *((void *)a3 + 26));
  }
  else if (v17)
  {
    memcpy(v19, v16, *((void *)a3 + 26));
    *(void *)(v18 + 32) += v17;
  }
  int v20 = (llvm::raw_ostream *)*((void *)this + 26);
  size_t v21 = (16 - v17);
  if (v21 >= 0x50)
  {
    do
    {
      if (v21 >= 0x4F) {
        size_t v67 = 79;
      }
      else {
        size_t v67 = v21;
      }
      int v20 = llvm::raw_ostream::write(v20, "", v67);
      LODWORD(v21) = v21 - v67;
    }
    while (v21);
  }
  else
  {
    llvm::raw_ostream::write(v20, "", v21);
  }
  if (*((unsigned char *)a3 + 239))
  {
    int v23 = (void *)*((void *)this + 26);
    uint64_t v25 = v23 + 4;
    unsigned int v24 = (void *)v23[4];
    size_t v22 = 16;
    if (v23[3] - (void)v24 > 0xFuLL) {
      goto LABEL_11;
    }
LABEL_59:
    llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)a3 + 224, v22);
    goto LABEL_12;
  }
  size_t v22 = strlen((const char *)a3 + 224);
  int v23 = (void *)*((void *)this + 26);
  uint64_t v25 = v23 + 4;
  unsigned int v24 = (void *)v23[4];
  if (v22 > v23[3] - (void)v24) {
    goto LABEL_59;
  }
  if (v22)
  {
LABEL_11:
    memcpy(v24, (char *)a3 + 224, v22);
    *v25 += v22;
  }
LABEL_12:
  unsigned int v26 = 0x41002u >> v15;
  unsigned int v27 = (llvm::raw_ostream *)*((void *)this + 26);
  size_t v28 = (16 - v22);
  if (v28 >= 0x50)
  {
    do
    {
      if (v28 >= 0x4F) {
        size_t v68 = 79;
      }
      else {
        size_t v68 = v28;
      }
      unsigned int v27 = llvm::raw_ostream::write(v27, "", v68);
      LODWORD(v28) = v28 - v68;
    }
    while (v28);
  }
  else
  {
    llvm::raw_ostream::write(v27, "", v28);
  }
  unint64_t v29 = v14 + v76;
  int v30 = v75 & v26;
  if (*(unsigned char *)(*((void *)this + 1) + 8))
  {
    unint64_t v31 = (llvm::raw_ostream *)*((void *)this + 26);
    unint64_t v32 = bswap64(a4);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      unint64_t v33 = v32;
    }
    else {
      unint64_t v33 = a4;
    }
    *(void *)int v80 = v33;
    llvm::raw_ostream::write(v31, v80, 8uLL);
    unint64_t v34 = (llvm::raw_ostream *)*((void *)this + 26);
    unint64_t v35 = bswap64(v29);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      unint64_t v36 = v35;
    }
    else {
      unint64_t v36 = v14 + v76;
    }
    *(void *)int v80 = v36;
    size_t v37 = 8;
  }
  else
  {
    uint64_t v69 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v70 = bswap32(a4);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      int v71 = v70;
    }
    else {
      int v71 = a4;
    }
    *(_DWORD *)int v80 = v71;
    llvm::raw_ostream::write(v69, v80, 4uLL);
    unint64_t v34 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v72 = bswap32(v29);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      unsigned int v73 = v72;
    }
    else {
      unsigned int v73 = v14 + v76;
    }
    *(_DWORD *)int v80 = v73;
    size_t v37 = 4;
  }
  llvm::raw_ostream::write(v34, v80, v37);
  if (v30) {
    unsigned int v38 = 0;
  }
  else {
    unsigned int v38 = a5;
  }
  unint64_t v39 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v40 = bswap32(v38);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v38 = v40;
  }
  *(_DWORD *)int v80 = v38;
  llvm::raw_ostream::write(v39, v80, 4uLL);
  unsigned int v41 = 31 - __clz(1 << *((unsigned char *)a3 + 24));
  uint64_t v42 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v43 = bswap32(v41);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v41 = v43;
  }
  *(_DWORD *)int v80 = v41;
  llvm::raw_ostream::write(v42, v80, 4uLL);
  if (a8) {
    unsigned int v44 = a7;
  }
  else {
    unsigned int v44 = 0;
  }
  uint64_t v45 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v46 = bswap32(v44);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v44 = v46;
  }
  *(_DWORD *)int v80 = v44;
  llvm::raw_ostream::write(v45, v80, 4uLL);
  unsigned int v47 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v48 = bswap32(a8);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v49 = v48;
  }
  else {
    unsigned int v49 = a8;
  }
  *(_DWORD *)int v80 = v49;
  llvm::raw_ostream::write(v47, v80, 4uLL);
  unsigned int v50 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v51 = bswap32(a6);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v52 = v51;
  }
  else {
    unsigned int v52 = a6;
  }
  *(_DWORD *)int v80 = v52;
  llvm::raw_ostream::write(v50, v80, 4uLL);
  unsigned int v53 = 0;
  int v54 = *((_DWORD *)this + 14);
  if (v54)
  {
    uint64_t v62 = *((void *)this + 5);
    unsigned int v63 = v54 - 1;
    uint64_t v64 = (v54 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    BOOL v65 = *(const llvm::MCSection **)(v62 + 16 * v64);
    if (v65 == a3)
    {
LABEL_49:
      unsigned int v53 = *(_DWORD *)(v62 + 16 * v64 + 8);
    }
    else
    {
      int v66 = 1;
      while (v65 != (const llvm::MCSection *)-4096)
      {
        int v74 = v64 + v66++;
        uint64_t v64 = v74 & v63;
        BOOL v65 = *(const llvm::MCSection **)(v62 + 16 * v64);
        if (v65 == a3) {
          goto LABEL_49;
        }
      }
      unsigned int v53 = 0;
    }
  }
  unsigned int v55 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v56 = bswap32(v53);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v53 = v56;
  }
  *(_DWORD *)int v80 = v53;
  llvm::raw_ostream::write(v55, v80, 4uLL);
  unsigned int v57 = *((_DWORD *)a3 + 61);
  unsigned int v58 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v59 = bswap32(v57);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v57 = v59;
  }
  *(_DWORD *)int v80 = v57;
  uint64_t result = llvm::raw_ostream::write(v58, v80, 4uLL);
  if (*(unsigned char *)(*((void *)this + 1) + 8))
  {
    unsigned int v61 = (llvm::raw_ostream *)*((void *)this + 26);
    *(_DWORD *)int v80 = 0;
    return llvm::raw_ostream::write(v61, v80, 4uLL);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSymtabLoadCommand(llvm::MachObjectWriter *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  (*(void (**)(void))(**((void **)this + 26) + 80))(*((void *)this + 26));
  uint64_t v10 = (llvm::raw_ostream *)*((void *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    int v11 = 0x2000000;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)unsigned int v27 = v11;
  llvm::raw_ostream::write(v10, v27, 4uLL);
  uint64_t v12 = (llvm::raw_ostream *)*((void *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    int v13 = 402653184;
  }
  else {
    int v13 = 24;
  }
  *(_DWORD *)unsigned int v27 = v13;
  llvm::raw_ostream::write(v12, v27, 4uLL);
  unint64_t v14 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v15 = bswap32(a2);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = a2;
  }
  *(_DWORD *)unsigned int v27 = v16;
  llvm::raw_ostream::write(v14, v27, 4uLL);
  unint64_t v17 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v18 = bswap32(a3);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = a3;
  }
  *(_DWORD *)unsigned int v27 = v19;
  llvm::raw_ostream::write(v17, v27, 4uLL);
  int v20 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v21 = bswap32(a4);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = a4;
  }
  *(_DWORD *)unsigned int v27 = v22;
  llvm::raw_ostream::write(v20, v27, 4uLL);
  int v23 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v24 = bswap32(a5);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = a5;
  }
  *(_DWORD *)unsigned int v27 = v25;
  return llvm::raw_ostream::write(v23, v27, 4uLL);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeDysymtabLoadCommand(llvm::MachObjectWriter *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  (*(void (**)(void))(**((void **)this + 26) + 80))(*((void *)this + 26));
  unint64_t v17 = (llvm::raw_ostream *)*((void *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    int v18 = 184549376;
  }
  else {
    int v18 = 11;
  }
  *(_DWORD *)unsigned int v56 = v18;
  llvm::raw_ostream::write(v17, v56, 4uLL);
  unsigned int v19 = (llvm::raw_ostream *)*((void *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    int v20 = 1342177280;
  }
  else {
    int v20 = 80;
  }
  *(_DWORD *)unsigned int v56 = v20;
  llvm::raw_ostream::write(v19, v56, 4uLL);
  unsigned int v21 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v22 = bswap32(a2);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = a2;
  }
  *(_DWORD *)unsigned int v56 = v23;
  llvm::raw_ostream::write(v21, v56, 4uLL);
  unsigned int v24 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v25 = bswap32(a3);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = a3;
  }
  *(_DWORD *)unsigned int v56 = v26;
  llvm::raw_ostream::write(v24, v56, 4uLL);
  unsigned int v27 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v28 = bswap32(a4);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = a4;
  }
  *(_DWORD *)unsigned int v56 = v29;
  llvm::raw_ostream::write(v27, v56, 4uLL);
  int v30 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v31 = bswap32(a5);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v32 = v31;
  }
  else {
    unsigned int v32 = a5;
  }
  *(_DWORD *)unsigned int v56 = v32;
  llvm::raw_ostream::write(v30, v56, 4uLL);
  unint64_t v33 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v34 = bswap32(a6);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v35 = v34;
  }
  else {
    unsigned int v35 = a6;
  }
  *(_DWORD *)unsigned int v56 = v35;
  llvm::raw_ostream::write(v33, v56, 4uLL);
  unint64_t v36 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v37 = bswap32(a7);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v38 = v37;
  }
  else {
    unsigned int v38 = a7;
  }
  *(_DWORD *)unsigned int v56 = v38;
  llvm::raw_ostream::write(v36, v56, 4uLL);
  unint64_t v39 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v39, v56, 4uLL);
  unsigned int v40 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v40, v56, 4uLL);
  unsigned int v41 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v41, v56, 4uLL);
  uint64_t v42 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v42, v56, 4uLL);
  unsigned int v43 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v43, v56, 4uLL);
  unsigned int v44 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v44, v56, 4uLL);
  uint64_t v45 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v46 = bswap32(a8);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v47 = v46;
  }
  else {
    unsigned int v47 = a8;
  }
  *(_DWORD *)unsigned int v56 = v47;
  llvm::raw_ostream::write(v45, v56, 4uLL);
  unsigned int v48 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v49 = bswap32(a9);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v50 = v49;
  }
  else {
    unsigned int v50 = a9;
  }
  *(_DWORD *)unsigned int v56 = v50;
  llvm::raw_ostream::write(v48, v56, 4uLL);
  unsigned int v51 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v51, v56, 4uLL);
  unsigned int v52 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v52, v56, 4uLL);
  unsigned int v53 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  llvm::raw_ostream::write(v53, v56, 4uLL);
  int v54 = (llvm::raw_ostream *)*((void *)this + 26);
  *(_DWORD *)unsigned int v56 = 0;
  return llvm::raw_ostream::write(v54, v56, 4uLL);
}

const llvm::MCSymbol **llvm::MachObjectWriter::findSymbolData(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  uint64_t v2 = 0;
  v6[3] = *MEMORY[0x1E4F143B8];
  v6[0] = (char *)this + 136;
  v6[1] = (char *)this + 160;
  void v6[2] = (char *)this + 184;
  do
  {
    int v3 = (const llvm::MCSymbol ***)v6[v2];
    uint64_t result = *v3;
    int v5 = v3[1];
    while (result != v5)
    {
      if (*result == a2) {
        return result;
      }
      result += 3;
    }
    ++v2;
  }
  while (v2 != 3);
  return 0;
}

const llvm::MCSymbol *llvm::MachObjectWriter::findAliasedSymbol(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  uint64_t result = a2;
  for (int i = *((_DWORD *)a2 + 2); (i & 0x1C00) == 0x800; int i = *((_DWORD *)result + 2))
  {
    *((_DWORD *)result + 2) = i | 4;
    uint64_t v4 = *((void *)result + 3);
    if (*(unsigned char *)v4 != 2) {
      break;
    }
    uint64_t result = *(const llvm::MCSymbol **)(v4 + 16);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeNlist(llvm::MachObjectWriter *this, char *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v7 & 0x1C00) != 0x800)
  {
    uint64_t v8 = 0;
    char v9 = a2[16];
LABEL_3:
    int v10 = 1;
    uint64_t v11 = v6;
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)a2;
  do
  {
    *(_DWORD *)(v11 + 8) = v7 | 4;
    uint64_t v40 = *(void *)(v11 + 24);
    if (*(unsigned char *)v40 != 2) {
      break;
    }
    uint64_t v11 = *(void *)(v40 + 16);
    int v7 = *(_DWORD *)(v11 + 8);
  }
  while ((v7 & 0x1C00) == 0x800);
  char v9 = a2[16];
  if (v6 == v11)
  {
    uint64_t v8 = 0;
    goto LABEL_3;
  }
  uint64_t v45 = 0;
  *(void *)BOOL v65 = (char *)this + 136;
  int v66 = (char *)this + 160;
  size_t v67 = (char *)this + 184;
  while (2)
  {
    unsigned int v46 = *(uint64_t **)&v65[8 * v45];
    uint64_t v8 = *v46;
    uint64_t v47 = v46[1];
    while (v8 != v47)
    {
      if (*(void *)v8 == v11)
      {
        char v9 = *(unsigned char *)(v8 + 16);
        goto LABEL_73;
      }
      v8 += 24;
    }
    if (++v45 != 3) {
      continue;
    }
    break;
  }
  uint64_t v8 = 0;
LABEL_73:
  if (!sub_1CC34BE58(v11, 1))
  {
    unsigned int v48 = *(_DWORD *)(v6 + 8);
    int v49 = (v48 >> 1) & 0x10;
    if ((v48 & 0x10) != 0) {
      char v50 = 11;
    }
    else {
      char v50 = 10;
    }
    LOBYTE(v17) = v49 | v50;
    goto LABEL_79;
  }
  int v10 = 0;
LABEL_4:
  uint64_t v12 = *(void *)v11;
  unint64_t AssociatedFragment = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v11 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
    uint64_t v12 = *(void *)v11 & 7 | AssociatedFragment;
    *(void *)uint64_t v11 = v12;
  }
  if (AssociatedFragment)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v11 + 8) |= 4u;
      unint64_t v14 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
      uint64_t v12 = *(void *)v11 & 7 | v14;
      *(void *)uint64_t v11 = v12;
    }
    if ((_UNKNOWN *)v14 == llvm::MCSymbol::AbsolutePseudoFragment) {
      int v15 = 2;
    }
    else {
      int v15 = 14;
    }
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = *(_DWORD *)(v6 + 8);
  int v17 = (v16 >> 1) & 0x10 | v15;
  if ((v16 & 0x10) != 0)
  {
    LOBYTE(v17) = v17 | 1;
    if (v10)
    {
LABEL_12:
      char v18 = 1;
      goto LABEL_13;
    }
  }
  else if (v10)
  {
    unint64_t v39 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v11 + 8) |= 4u;
      unint64_t v39 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
      uint64_t v12 = *(void *)v11 & 7 | v39;
      *(void *)uint64_t v11 = v12;
    }
    LOBYTE(v17) = v17 | (v39 == 0);
    goto LABEL_12;
  }
LABEL_79:
  if (!sub_1CC34BE58(v11, 1))
  {
    uint64_t SymbolAddress = *(void *)(v8 + 8);
    char v18 = 0;
    goto LABEL_16;
  }
  char v18 = 0;
  uint64_t v12 = *(void *)v11;
LABEL_13:
  unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v11 + 8) |= 4u;
    unint64_t v19 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
    *(void *)uint64_t v11 = *(void *)v11 & 7 | v19;
  }
  if (v19)
  {
    uint64_t SymbolAddress = llvm::MachObjectWriter::getSymbolAddress(this, (const llvm::MCSymbol *)v6, a3);
  }
  else if (((*(_DWORD *)(v11 + 8) >> 10) & 7u) - 3 <= 1)
  {
    uint64_t SymbolAddress = *(void *)(v11 + 24);
  }
  else
  {
    uint64_t SymbolAddress = 0;
  }
LABEL_16:
  unsigned int v21 = *((_DWORD *)a2 + 2);
  unsigned int v22 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v23 = bswap32(v21);
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    unsigned int v21 = v23;
  }
  *(_DWORD *)BOOL v65 = v21;
  llvm::raw_ostream::write(v22, v65, 4uLL);
  unsigned int v24 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, v17);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = v17;
  }
  unsigned int v26 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v27 = (char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, v9);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *unsigned int v27 = v9;
  }
  if (v18) {
    int v28 = 0;
  }
  else {
    int v28 = (*(unsigned __int16 *)(v6 + 12) >> 9) & 1;
  }
  unsigned int v29 = *(unsigned __int16 *)(v11 + 12);
  unsigned int v30 = *(_DWORD *)(v11 + 8);
  if (((v30 >> 10) & 7) - 3 <= 1)
  {
    int v41 = (v30 >> 13) & 0x1F;
    if (v41)
    {
      unsigned int v42 = v41 - 1;
      if (v42 >= 0x10)
      {
        int64x2_t v60 = "invalid 'common' alignment '";
        __int16 v61 = 259;
        __int16 v59 = 264;
        LODWORD(v58[0]) = 1 << v42;
        sub_1CD3E3950((uint64_t *)&v60, v58, (uint64_t)v62);
        unsigned int v56 = "' for '";
        __int16 v57 = 259;
        sub_1CD3E3950(v62, (uint64_t *)&v56, (uint64_t)v63);
        __int16 v55 = 261;
        v54[0] = sub_1CD6ACAC0((unsigned char *)v11);
        v54[1] = v51;
        sub_1CD3E3950(v63, v54, (uint64_t)v64);
        unsigned int v52 = "'";
        __int16 v53 = 259;
        sub_1CD3E3950(v64, (uint64_t *)&v52, (uint64_t)v65);
        llvm::report_fatal_error((llvm *)v65, 0);
      }
      unsigned int v29 = v29 & 0xFFFFF0FF | (v42 << 8);
    }
  }
  if (v28) {
    unsigned int v31 = v29 | 0x200;
  }
  else {
    unsigned int v31 = v29;
  }
  unsigned int v32 = (llvm::raw_ostream *)*((void *)this + 26);
  unsigned int v33 = bswap32(v31) >> 16;
  if ((*((_DWORD *)this + 54) - 1) >= 2) {
    LOWORD(v31) = v33;
  }
  *(_WORD *)BOOL v65 = v31;
  llvm::raw_ostream::write(v32, v65, 2uLL);
  if (*(unsigned char *)(*((void *)this + 1) + 8))
  {
    unsigned int v34 = (llvm::raw_ostream *)*((void *)this + 26);
    unint64_t v35 = bswap64(SymbolAddress);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      unint64_t v36 = v35;
    }
    else {
      unint64_t v36 = SymbolAddress;
    }
    *(void *)BOOL v65 = v36;
    size_t v37 = 8;
  }
  else
  {
    unsigned int v34 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v43 = bswap32(SymbolAddress);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      int v44 = v43;
    }
    else {
      int v44 = SymbolAddress;
    }
    *(_DWORD *)BOOL v65 = v44;
    size_t v37 = 4;
  }
  return llvm::raw_ostream::write(v34, v65, v37);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeLoadDylibLoadCommand(uint64_t a1, const char *a2, size_t a3)
{
  int v6 = a3 + 24;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    int v7 = 8;
  }
  else {
    int v7 = 4;
  }
  int v8 = v7 + v6;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 8)) {
    int v9 = -8;
  }
  else {
    int v9 = -4;
  }
  unsigned int v10 = v8 & v9;
  (*(void (**)(void))(**(void **)(a1 + 208) + 80))(*(void *)(a1 + 208));
  uint64_t v11 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    int v12 = 201326592;
  }
  else {
    int v12 = 12;
  }
  *(_DWORD *)int v28 = v12;
  llvm::raw_ostream::write(v11, v28, 4uLL);
  int v13 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v14 = bswap32(v10);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v10;
  }
  *(_DWORD *)int v28 = v15;
  llvm::raw_ostream::write(v13, v28, 4uLL);
  unsigned int v16 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    int v17 = 402653184;
  }
  else {
    int v17 = 24;
  }
  *(_DWORD *)int v28 = v17;
  llvm::raw_ostream::write(v16, v28, 4uLL);
  char v18 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
    int v19 = 0x2000000;
  }
  else {
    int v19 = 2;
  }
  *(_DWORD *)int v28 = v19;
  llvm::raw_ostream::write(v18, v28, 4uLL);
  int v20 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)int v28 = 0;
  llvm::raw_ostream::write(v20, v28, 4uLL);
  unsigned int v21 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)int v28 = 0;
  llvm::raw_ostream::write(v21, v28, 4uLL);
  unsigned int v22 = *(llvm::raw_ostream **)(a1 + 208);
  unsigned int v23 = (unsigned char *)*((void *)v22 + 4);
  if (a3 > *((void *)v22 + 3) - (void)v23)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 208), a2, a3);
    unsigned int v23 = (unsigned char *)*((void *)v22 + 4);
  }
  else if (a3)
  {
    memcpy(v23, a2, a3);
    unsigned int v23 = (unsigned char *)(*((void *)v22 + 4) + a3);
    *((void *)v22 + 4) = v23;
  }
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 0);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    *unsigned int v23 = 0;
  }
  uint64_t result = *(llvm::raw_ostream **)(a1 + 208);
  uint64_t v25 = 1 << (*(unsigned char *)(*(void *)(a1 + 8) + 8) & 1 | 2u);
  unsigned int v26 = ((v25 + v6) & -(int)v25) - a3 - 25;
  if (v26 < 0x50) {
    return llvm::raw_ostream::write(result, "", ((v25 + v6) & -(int)v25) - a3 - 25);
  }
  do
  {
    if (v26 >= 0x4F) {
      size_t v27 = 79;
    }
    else {
      size_t v27 = v26;
    }
    uint64_t result = llvm::raw_ostream::write(result, "", v27);
    v26 -= v27;
  }
  while (v26);
  return result;
}

uint64_t llvm::MachObjectWriter::recordRelocation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)a6) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(void *)(a6 + 8) == 0;
  }
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 8);
    long long v14 = *(_OWORD *)(a6 + 16);
    v18[0] = *(_OWORD *)a6;
    v18[1] = v14;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(*(void *)v13 + 32))(v13, a1, a2, a3, a4, a5, v18, a7);
  }
  else
  {
    uint64_t v15 = *a2;
    uint64_t v16 = *(void *)(a5 + 16);
    int v19 = "unsupported relocation expression";
    __int16 v20 = 259;
    return llvm::MCContext::reportError(v15, v16, (uint64_t)&v19);
  }
}

uint64_t llvm::MachObjectWriter::bindIndirectSymbols(uint64_t this, llvm::MCAssembler *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a2 + 10);
  int v3 = (uint64_t *)*((void *)a2 + 11);
  if (v2 != v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)a2 + 10);
    do
    {
      int v5 = *(unsigned __int8 *)(v2[1] + 240);
      if ((v5 - 6) >= 3 && v5 != 20)
      {
        uint64_t v14 = sub_1CD6ACAC0((unsigned char *)*v2);
        __int16 v23 = 1283;
        int v19 = "indirect symbol '";
        uint64_t v21 = v14;
        uint64_t v22 = v15;
        int v17 = "' not in a symbol pointer or stub section";
        __int16 v18 = 259;
        sub_1CD3E3950((uint64_t *)&v19, (uint64_t *)&v17, (uint64_t)v24);
        llvm::report_fatal_error((llvm *)v24, (const llvm::Twine *)1);
      }
      v2 += 2;
    }
    while (v2 != v3);
    int v7 = 0;
    uint64_t v8 = this + 40;
    do
    {
      int v9 = *(unsigned __int8 *)(v4[1] + 240);
      if (v9 == 20 || v9 == 6)
      {
        int v19 = (const char *)v4[1];
        int v20 = v7;
        sub_1CD6BD508((uint64_t)v24, v8, (uint64_t *)&v19, &v20);
        this = llvm::MCAssembler::registerSymbol((uint64_t)a2, *v4, 0);
      }
      ++v7;
      v4 += 2;
    }
    while (v4 != v3);
    BOOL v11 = (uint64_t *)*((void *)a2 + 10);
    int v12 = (uint64_t *)*((void *)a2 + 11);
    if (v11 != v12)
    {
      int v13 = 0;
      do
      {
        if (*(unsigned __int8 *)(v11[1] + 240) - 7 <= 1)
        {
          int v19 = (const char *)v11[1];
          int v20 = v13;
          sub_1CD6BD508((uint64_t)v24, v8, (uint64_t *)&v19, &v20);
          v24[0] = 0;
          this = llvm::MCAssembler::registerSymbol((uint64_t)a2, *v11, v24);
          if (v24[0]) {
            *(_WORD *)(*v11 + 12) |= 1u;
          }
        }
        v11 += 2;
        ++v13;
      }
      while (v11 != v12);
    }
  }
  return this;
}

uint64_t llvm::MachObjectWriter::computeSymbolTable(uint64_t a1, void *a2, void **a3, __n128 **a4, uint64_t a5)
{
  v174[3] = *MEMORY[0x1E4F143B8];
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  unsigned int v173 = 0;
  uint64_t v8 = (uint64_t *)a2[4];
  int v9 = (uint64_t *)a2[5];
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (1)
    {
      uint64_t v12 = *v8;
      v174[0] = 0;
      unsigned int v13 = v173;
      char v14 = sub_1CC137310(v10, v173, v12, v174);
      uint64_t v15 = v174[0];
      if ((v14 & 1) == 0) {
        break;
      }
LABEL_9:
      *(unsigned char *)(v15 + 8) = v11;
      ++v8;
      ++v11;
      if (v8 == v9) {
        goto LABEL_14;
      }
    }
    if (4 * (int)v172 + 4 >= 3 * v13)
    {
      int v16 = 2 * v13;
    }
    else
    {
      if (v13 + ~v172 - HIDWORD(v172) > v13 >> 3)
      {
LABEL_6:
        LODWORD(v172) = v172 + 1;
        if (*(void *)v15 != -4096) {
          --HIDWORD(v172);
        }
        *(void *)uint64_t v15 = v12;
        *(unsigned char *)(v15 + 8) = 0;
        goto LABEL_9;
      }
      int v16 = v13;
    }
    sub_1CCBE1FC0((uint64_t)&v171, v16);
    v174[0] = 0;
    uint64_t v10 = v171;
    sub_1CC137310(v171, v173, v12, v174);
    uint64_t v15 = v174[0];
    goto LABEL_6;
  }
LABEL_14:
  uint64_t v165 = a5;
  uint64_t v17 = a2[7];
  for (uint64_t i = a2[8]; v17 != i; v17 += 8)
  {
    int v19 = *(unsigned char **)v17;
    if ((*(_DWORD *)(*(void *)v17 + 8) & 0x201) != 1)
    {
      if ((*v19 & 4) != 0)
      {
        uint64_t v22 = (uint64_t *)*((void *)v19 - 1);
        uint64_t v23 = *v22;
        int v20 = v22 + 2;
        uint64_t v21 = v23;
      }
      else
      {
        int v20 = 0;
        uint64_t v21 = 0;
      }
      unsigned int v24 = sub_1CD0B03C8(v20, (uint64_t)v20 + v21);
      llvm::StringTableBuilder::add(a1 + 88, (uint64_t)v20, v21 | ((unint64_t)v24 << 32));
    }
  }
  uint64_t v170 = a1 + 88;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 88), 1);
  uint64_t v25 = v165;
  size_t v27 = (unint64_t *)a2[7];
  unsigned int v26 = (unint64_t *)a2[8];
  if (v27 == v26) {
    goto LABEL_191;
  }
  int v167 = a4;
  uint64_t v168 = v171;
  int v166 = v173;
  unsigned int v163 = v173 - 1;
  do
  {
    unint64_t v28 = *v27;
    int v29 = *(_DWORD *)(*v27 + 8);
    if ((v29 & 0x201) == 1) {
      goto LABEL_107;
    }
    uint64_t v30 = *(void *)v28;
    if ((v29 & 0x10) == 0)
    {
      unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 0x1C00) == 0x800 && v31 == 0)
      {
        *(_DWORD *)(v28 + 8) = v29 | 4;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
        uint64_t v30 = *(void *)v28 & 7 | AssociatedFragment;
        *(void *)unint64_t v28 = v30;
        if (AssociatedFragment) {
          goto LABEL_107;
        }
      }
      else if (v31)
      {
        goto LABEL_107;
      }
    }
    if ((v30 & 4) != 0)
    {
      unint64_t v35 = *(uint64_t **)(v28 - 8);
      uint64_t v36 = *v35;
      unsigned int v33 = v35 + 2;
      uint64_t v34 = v36;
    }
    else
    {
      unsigned int v33 = 0;
      uint64_t v34 = 0;
    }
    unsigned int v37 = sub_1CD0B03C8(v33, (uint64_t)v33 + v34);
    uint64_t Offset = llvm::StringTableBuilder::getOffset(v170, (uint64_t)v33, v34 | ((unint64_t)v37 << 32));
    uint64_t v39 = *(void *)v28;
    unint64_t v40 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v40 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v28 + 8) |= 4u;
      unint64_t v40 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
      uint64_t v39 = *(void *)v28 & 7 | v40;
      *(void *)unint64_t v28 = v39;
    }
    if (v40)
    {
      unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFF8;
      if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v28 + 8) |= 4u;
        unint64_t v41 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
        uint64_t v39 = *(void *)v28 & 7 | v41;
        *(void *)unint64_t v28 = v39;
      }
      if ((_UNKNOWN *)v41 == llvm::MCSymbol::AbsolutePseudoFragment)
      {
        uint64_t v51 = a4[1];
        unint64_t v50 = (unint64_t)a4[2];
        if ((unint64_t)v51 >= v50)
        {
          uint64_t v68 = *a4;
          unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)*a4) >> 3);
          unint64_t v70 = v69 + 1;
          if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_229:
          }
            abort();
          unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)v68) >> 3);
          if (2 * v71 > v70) {
            unint64_t v70 = 2 * v71;
          }
          if (v71 >= 0x555555555555555) {
            unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v72 = v70;
          }
          if (v72)
          {
            if (v72 > 0xAAAAAAAAAAAAAAALL) {
LABEL_230:
            }
              sub_1CB833614();
            unsigned int v73 = (char *)operator new(24 * v72);
          }
          else
          {
            unsigned int v73 = 0;
          }
          BOOL v81 = &v73[24 * v69];
          *(void *)BOOL v81 = v28;
          *((void *)v81 + 1) = Offset;
          v81[16] = 0;
          uint64_t v82 = (__n128 *)v81;
          if (v51 == v68)
          {
            a4 = v167;
          }
          else
          {
            a4 = v167;
            do
            {
              __n128 v83 = *(__n128 *)((char *)v51 - 24);
              v82[-1].n128_u64[1] = v51[-1].n128_u64[1];
              *(__n128 *)((char *)v82 - 24) = v83;
              uint64_t v82 = (__n128 *)((char *)v82 - 24);
              uint64_t v51 = (__n128 *)((char *)v51 - 24);
            }
            while (v51 != v68);
            uint64_t v51 = *v167;
          }
          char v84 = &v73[24 * v72];
          unsigned int v52 = (unint64_t *)(v81 + 24);
          *a4 = v82;
          a4[1] = (__n128 *)(v81 + 24);
          a4[2] = (__n128 *)v84;
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          v51->n128_u64[0] = v28;
          v51->n128_u64[1] = Offset;
          unsigned int v52 = &v51[1].n128_u64[1];
          v51[1].n128_u8[0] = 0;
        }
        a4[1] = (__n128 *)v52;
      }
      else
      {
        unint64_t v42 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v28 + 8) |= 4u;
          unint64_t v42 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
          *(void *)unint64_t v28 = *(void *)v28 & 7 | v42;
        }
        if (v166)
        {
          uint64_t v43 = *(void *)(v42 + 16);
          uint64_t v44 = ((v43 >> 4) ^ (v43 >> 9)) & v163;
          uint64_t v45 = *(void *)(v168 + 16 * v44);
          if (v43 == v45)
          {
LABEL_40:
            char v46 = *(unsigned char *)(v168 + 16 * v44 + 8);
          }
          else
          {
            int v86 = 1;
            while (v45 != -4096)
            {
              int v87 = v44 + v86++;
              uint64_t v44 = v87 & v163;
              uint64_t v45 = *(void *)(v168 + 16 * v44);
              if (v43 == v45) {
                goto LABEL_40;
              }
            }
            char v46 = 0;
          }
        }
        else
        {
          char v46 = 0;
        }
        int64x2_t v60 = a4[1];
        unint64_t v59 = (unint64_t)a4[2];
        if ((unint64_t)v60 >= v59)
        {
          uint64_t v62 = *a4;
          unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)*a4) >> 3);
          unint64_t v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_229;
          }
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (void)v62) >> 3);
          if (2 * v65 > v64) {
            unint64_t v64 = 2 * v65;
          }
          if (v65 >= 0x555555555555555) {
            unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            if (v66 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_230;
            }
            size_t v67 = (char *)operator new(24 * v66);
          }
          else
          {
            size_t v67 = 0;
          }
          int v74 = &v67[24 * v63];
          *(void *)int v74 = v28;
          *((void *)v74 + 1) = Offset;
          v74[16] = v46;
          BOOL v75 = (__n128 *)v74;
          if (v60 == v62)
          {
            a4 = v167;
          }
          else
          {
            a4 = v167;
            do
            {
              __n128 v76 = *(__n128 *)((char *)v60 - 24);
              v75[-1].n128_u64[1] = v60[-1].n128_u64[1];
              *(__n128 *)((char *)v75 - 24) = v76;
              BOOL v75 = (__n128 *)((char *)v75 - 24);
              int64x2_t v60 = (__n128 *)((char *)v60 - 24);
            }
            while (v60 != v62);
            int64x2_t v60 = *v167;
          }
          __int16 v61 = (__n128 *)(v74 + 24);
          *a4 = v75;
          a4[1] = (__n128 *)(v74 + 24);
          a4[2] = (__n128 *)&v67[24 * v66];
          if (v60) {
            operator delete(v60);
          }
          uint64_t v25 = v165;
        }
        else
        {
          v60->n128_u64[0] = v28;
          v60->n128_u64[1] = Offset;
          __int16 v61 = (__n128 *)((char *)v60 + 24);
          v60[1].n128_u8[0] = v46;
        }
        a4[1] = v61;
      }
    }
    else
    {
      unsigned int v48 = *(__n128 **)(v25 + 8);
      unint64_t v47 = *(void *)(v25 + 16);
      if ((unint64_t)v48 >= v47)
      {
        __int16 v53 = *(__n128 **)v25;
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(void *)v25) >> 3);
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_229;
        }
        unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v53) >> 3);
        if (2 * v56 > v55) {
          unint64_t v55 = 2 * v56;
        }
        if (v56 >= 0x555555555555555) {
          unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          if (v57 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_230;
          }
          unsigned int v58 = (char *)operator new(24 * v57);
        }
        else
        {
          unsigned int v58 = 0;
        }
        uint64_t v77 = &v58[24 * v54];
        *(void *)uint64_t v77 = v28;
        *((void *)v77 + 1) = Offset;
        v77[16] = 0;
        char v78 = v77;
        if (v48 == v53)
        {
          a4 = v167;
        }
        else
        {
          a4 = v167;
          do
          {
            long long v79 = *(long long *)((char *)&v48[-2] + 8);
            *((void *)v78 - 1) = v48[-1].n128_u64[1];
            *(_OWORD *)(v78 - 24) = v79;
            v78 -= 24;
            unsigned int v48 = (__n128 *)((char *)v48 - 24);
          }
          while (v48 != v53);
          unsigned int v48 = *(__n128 **)v25;
        }
        int v80 = &v58[24 * v57];
        int v49 = (unint64_t *)(v77 + 24);
        *(void *)uint64_t v25 = v78;
        *(void *)(v25 + 8) = v77 + 24;
        *(void *)(v25 + 16) = v80;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        v48->n128_u64[0] = v28;
        v48->n128_u64[1] = Offset;
        int v49 = &v48[1].n128_u64[1];
        v48[1].n128_u8[0] = 0;
      }
      *(void *)(v25 + 8) = v49;
    }
LABEL_107:
    ++v27;
  }
  while (v27 != v26);
  char v88 = (uint64_t *)a2[7];
  uint64_t v89 = (uint64_t *)a2[8];
  if (v88 != v89)
  {
    while (1)
    {
      uint64_t v90 = *v88;
      int v91 = *(_DWORD *)(*v88 + 8);
      if ((v91 & 0x201) == 1 || (v91 & 0x10) != 0) {
        goto LABEL_179;
      }
      uint64_t v93 = *(void *)v90;
      unint64_t v94 = *(void *)v90 & 0xFFFFFFFFFFFFFFF8;
      if ((v91 & 0x1C00) == 0x800 && v94 == 0) {
        break;
      }
      if (v94) {
        goto LABEL_129;
      }
LABEL_179:
      if (++v88 == v89) {
        goto LABEL_191;
      }
    }
    *(_DWORD *)(v90 + 8) = v91 | 4;
    unint64_t v128 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
    uint64_t v93 = *(void *)v90 & 7 | v128;
    *(void *)uint64_t v90 = v93;
    if (!v128) {
      goto LABEL_179;
    }
LABEL_129:
    if ((v93 & 4) != 0)
    {
      int v98 = *(uint64_t **)(v90 - 8);
      uint64_t v99 = *v98;
      long long v96 = v98 + 2;
      uint64_t v97 = v99;
    }
    else
    {
      long long v96 = 0;
      uint64_t v97 = 0;
    }
    unsigned int v100 = sub_1CD0B03C8(v96, (uint64_t)v96 + v97);
    uint64_t v101 = llvm::StringTableBuilder::getOffset(v170, (uint64_t)v96, v97 | ((unint64_t)v100 << 32));
    uint64_t v102 = *(void *)v90;
    unint64_t v103 = *(void *)v90 & 0xFFFFFFFFFFFFFFF8;
    if (v103)
    {
      char v104 = a3;
    }
    else
    {
      char v104 = a3;
      if ((*(_DWORD *)(v90 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v90 + 8) |= 4u;
        unint64_t v103 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
        char v104 = a3;
        uint64_t v102 = *(void *)v90 & 7 | v103;
        *(void *)uint64_t v90 = v102;
      }
    }
    if ((_UNKNOWN *)v103 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      BOOL v111 = (char *)v104[1];
      unint64_t v110 = (unint64_t)v104[2];
      if ((unint64_t)v111 < v110)
      {
        *(void *)BOOL v111 = v90;
        *((void *)v111 + 1) = v101;
        long long v112 = v111 + 24;
        v111[16] = 0;
LABEL_178:
        v104[1] = v112;
        goto LABEL_179;
      }
      uint64_t v120 = (char *)*v104;
      unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (unsigned char *)*v104) >> 3);
      unint64_t v122 = v121 + 1;
      if (v121 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_229;
      }
      unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (void)v120) >> 3);
      if (2 * v123 > v122) {
        unint64_t v122 = 2 * v123;
      }
      if (v123 >= 0x555555555555555) {
        unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v118 = v122;
      }
      if (v118)
      {
        if (v118 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_230;
        }
        char v119 = (char *)operator new(24 * v118);
        char v104 = a3;
      }
      else
      {
        char v119 = 0;
      }
      int v124 = &v119[24 * v121];
      *(void *)int v124 = v90;
      *((void *)v124 + 1) = v101;
      v124[16] = 0;
      long long v125 = v124;
      if (v111 == v120)
      {
        a4 = v167;
      }
      else
      {
        a4 = v167;
        do
        {
          long long v127 = *(_OWORD *)(v111 - 24);
          *((void *)v125 - 1) = *((void *)v111 - 1);
          *(_OWORD *)(v125 - 24) = v127;
          v125 -= 24;
          v111 -= 24;
        }
        while (v111 != v120);
LABEL_174:
        BOOL v111 = (char *)*v104;
      }
    }
    else
    {
      unint64_t v105 = v102 & 0xFFFFFFFFFFFFFFF8;
      if ((v102 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v90 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v90 + 8) |= 4u;
        unint64_t v105 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
        char v104 = a3;
        *(void *)uint64_t v90 = *(void *)v90 & 7 | v105;
      }
      if (v166)
      {
        uint64_t v106 = *(void *)(v105 + 16);
        uint64_t v107 = ((v106 >> 4) ^ (v106 >> 9)) & v163;
        uint64_t v108 = *(void *)(v168 + 16 * v107);
        if (v106 == v108)
        {
LABEL_138:
          char v109 = *(unsigned char *)(v168 + 16 * v107 + 8);
        }
        else
        {
          int v129 = 1;
          while (v108 != -4096)
          {
            int v130 = v107 + v129++;
            uint64_t v107 = v130 & v163;
            uint64_t v108 = *(void *)(v168 + 16 * v107);
            if (v106 == v108) {
              goto LABEL_138;
            }
          }
          char v109 = 0;
        }
      }
      else
      {
        char v109 = 0;
      }
      BOOL v111 = (char *)v104[1];
      unint64_t v113 = (unint64_t)v104[2];
      if ((unint64_t)v111 < v113)
      {
        *(void *)BOOL v111 = v90;
        *((void *)v111 + 1) = v101;
        long long v112 = v111 + 24;
        v111[16] = v109;
        goto LABEL_178;
      }
      uint64_t v114 = (char *)*v104;
      unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (unsigned char *)*v104) >> 3);
      unint64_t v116 = v115 + 1;
      if (v115 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_229;
      }
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (void)v114) >> 3);
      if (2 * v117 > v116) {
        unint64_t v116 = 2 * v117;
      }
      if (v117 >= 0x555555555555555) {
        unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v118 = v116;
      }
      if (v118)
      {
        if (v118 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_230;
        }
        char v119 = (char *)operator new(24 * v118);
        char v104 = a3;
      }
      else
      {
        char v119 = 0;
      }
      int v124 = &v119[24 * v115];
      *(void *)int v124 = v90;
      *((void *)v124 + 1) = v101;
      v124[16] = v109;
      long long v125 = v124;
      if (v111 != v114)
      {
        a4 = v167;
        do
        {
          long long v126 = *(_OWORD *)(v111 - 24);
          *((void *)v125 - 1) = *((void *)v111 - 1);
          *(_OWORD *)(v125 - 24) = v126;
          v125 -= 24;
          v111 -= 24;
        }
        while (v111 != v114);
        goto LABEL_174;
      }
      a4 = v167;
    }
    long long v112 = v124 + 24;
    *char v104 = v125;
    v104[1] = v124 + 24;
    v104[2] = &v119[24 * v118];
    if (v111)
    {
      operator delete(v111);
      char v104 = a3;
    }
    uint64_t v25 = v165;
    goto LABEL_178;
  }
LABEL_191:
  int v131 = a4[1];
  unint64_t v132 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)*a4) >> 3));
  if (v131 == *a4) {
    uint64_t v133 = 0;
  }
  else {
    uint64_t v133 = v132;
  }
  sub_1CCBE208C(*a4, v131, v133, 1);
  BOOL v134 = *(__n128 **)(v25 + 8);
  unint64_t v135 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v134 - *(void *)v25) >> 3));
  if (v134 == *(__n128 **)v25) {
    uint64_t v136 = 0;
  }
  else {
    uint64_t v136 = v135;
  }
  sub_1CCBE208C(*(__n128 **)v25, v134, v136, 1);
  int v137 = 0;
  uint64_t v138 = 0;
  v174[0] = a3;
  v174[1] = a4;
  v174[2] = v25;
  do
  {
    char v139 = (uint64_t **)v174[v138];
    unsigned int v140 = *v139;
    uint64_t v141 = v139[1];
    while (v140 != v141)
    {
      uint64_t v142 = *v140;
      v140 += 3;
      *(_DWORD *)(v142 + 16) = v137++;
    }
    ++v138;
  }
  while (v138 != 3);
  long long v143 = (uint64_t *)a2[4];
  uint64_t v144 = (uint64_t *)a2[5];
  if (v143 != v144)
  {
    while (2)
    {
      uint64_t v145 = *v143;
      v174[0] = *v143;
      int v146 = *(_DWORD *)(a1 + 32);
      if (v146)
      {
        uint64_t v147 = *(void *)(a1 + 16);
        unsigned int v148 = v146 - 1;
        uint64_t v149 = v148 & ((v145 >> 4) ^ (v145 >> 9));
        uint64_t v150 = (void *)(v147 + 32 * v149);
        uint64_t v151 = *v150;
        if (v145 != *v150)
        {
          uint64_t v152 = 0;
          int v153 = 1;
          while (v151 != -4096)
          {
            if (v152) {
              BOOL v154 = 0;
            }
            else {
              BOOL v154 = v151 == -8192;
            }
            if (v154) {
              uint64_t v152 = v150;
            }
            int v155 = v149 + v153++;
            uint64_t v149 = v155 & v148;
            uint64_t v150 = (void *)(v147 + 32 * v149);
            uint64_t v151 = *v150;
            if (v145 == *v150) {
              goto LABEL_218;
            }
          }
          if (v152) {
            int v156 = v152;
          }
          else {
            int v156 = v150;
          }
LABEL_217:
          uint64_t v150 = sub_1CBC6117C((uint64_t *)(a1 + 16), (uint64_t)v174, v174, v156);
          void *v150 = v174[0];
          v150[1] = 0;
          v150[2] = 0;
          v150[3] = 0;
        }
LABEL_218:
        unint64_t v157 = (_DWORD *)v150[1];
        uint64_t v158 = (_DWORD *)v150[2];
        while (v157 != v158)
        {
          if (*(void *)v157)
          {
            int v159 = *(_DWORD *)(*(void *)v157 + 16);
            int v160 = v157[3] | (v159 << 8) | 0x10;
            unsigned int v161 = v159 | v157[3] & 0xFF000000 | 0x8000000;
            if (*(_DWORD *)(a1 + 216) != 1) {
              unsigned int v161 = v160;
            }
            v157[3] = v161;
          }
          v157 += 4;
        }
        if (++v143 == v144) {
          return MEMORY[0x1D25D9CD0](v171, 8);
        }
        continue;
      }
      break;
    }
    int v156 = 0;
    goto LABEL_217;
  }
  return MEMORY[0x1D25D9CD0](v171, 8);
}

unint64_t llvm::MachObjectWriter::computeSectionAddresses(unint64_t this, const llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  uint64_t v3 = *((unsigned int *)a3 + 4);
  if (v3)
  {
    uint64_t v5 = this;
    unint64_t v6 = 0;
    int v7 = (uint64_t *)*((void *)a3 + 1);
    unint64_t v41 = (uint64_t *)(this + 64);
    unint64_t v42 = &v7[v3];
    while (1)
    {
      uint64_t v8 = *v7;
      uint64_t v43 = v8;
      char v9 = *(unsigned char *)(v8 + 24);
      unsigned int v10 = *(_DWORD *)(v5 + 80);
      if (v10)
      {
        uint64_t v11 = *(void *)(v5 + 64);
        unsigned int v12 = v10 - 1;
        unsigned int v13 = (v10 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        char v14 = (void *)(v11 + 16 * v13);
        uint64_t v15 = *v14;
        if (v8 == *v14) {
          goto LABEL_5;
        }
        uint64_t v34 = 0;
        int v35 = 1;
        while (v15 != -4096)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v15 == -8192;
          }
          if (v36) {
            uint64_t v34 = v14;
          }
          unsigned int v37 = v13 + v35++;
          unsigned int v13 = v37 & v12;
          char v14 = (void *)(v11 + 16 * (v37 & v12));
          uint64_t v15 = *v14;
          if (v8 == *v14) {
            goto LABEL_5;
          }
        }
        if (v34) {
          char v14 = v34;
        }
      }
      else
      {
        char v14 = 0;
      }
      int v40 = *(_DWORD *)(v5 + 72);
      if (4 * v40 + 4 >= 3 * v10) {
        break;
      }
      if (v10 + ~v40 - *(_DWORD *)(v5 + 76) <= v10 >> 3) {
        goto LABEL_37;
      }
LABEL_32:
      ++*(_DWORD *)(v5 + 72);
      if (*v14 != -4096) {
        --*(_DWORD *)(v5 + 76);
      }
      *char v14 = v43;
      v14[1] = 0;
      uint64_t v8 = v43;
LABEL_5:
      uint64_t v16 = (v6 + (1 << v9) - 1) & -(uint64_t)(1 << v9);
      v14[1] = v16;
      uint64_t v17 = *(const llvm::MCFragment **)(v8 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v17);
      uint64_t v18 = *((void *)v17 + 4);
      unint64_t v19 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v17);
      uint64_t v20 = v43;
      int v21 = *(_DWORD *)(v5 + 80);
      if (v21)
      {
        uint64_t v22 = *(void *)(v5 + 64);
        unsigned int v23 = v21 - 1;
        uint64_t v24 = ((v43 >> 4) ^ (v43 >> 9)) & (v21 - 1);
        uint64_t v25 = *(void *)(v22 + 16 * v24);
        if (v25 == v43)
        {
LABEL_7:
          uint64_t v26 = *(void *)(v22 + 16 * v24 + 8);
          goto LABEL_8;
        }
        int v38 = 1;
        while (v25 != -4096)
        {
          int v39 = v24 + v38++;
          uint64_t v24 = v39 & v23;
          uint64_t v25 = *(void *)(v22 + 16 * v24);
          if (v25 == v43) {
            goto LABEL_7;
          }
        }
      }
      uint64_t v26 = 0;
LABEL_8:
      size_t v27 = *(const llvm::MCFragment **)(v43 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v27);
      uint64_t v28 = *((void *)v27 + 4);
      this = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v27);
      unsigned int v29 = *(_DWORD *)(v20 + 32) + 1;
      if (*((_DWORD *)a3 + 4) <= v29
        || (unint64_t v30 = this,
            unint64_t v31 = *(unsigned char **)(*((void *)a3 + 1) + 8 * v29),
            this = (*(uint64_t (**)(unsigned char *))(*(void *)v31 + 16))(v31),
            (this & 1) != 0))
      {
        uint64_t v33 = 0;
      }
      else
      {
        uint64_t v32 = 1 << (63 - __clz((1 << v31[24])));
        uint64_t v33 = ((v28 + v26 + v30 + v32 - 1) & -v32) - (v28 + v26 + v30);
      }
      unint64_t v6 = v18 + v16 + v19 + v33;
      if (++v7 == v42) {
        return this;
      }
    }
    v10 *= 2;
LABEL_37:
    sub_1CB915218((uint64_t)v41, v10);
    uint64_t v44 = 0;
    sub_1CB915048(v41, &v43, &v44);
    char v14 = v44;
    goto LABEL_32;
  }
  return this;
}

uint64_t llvm::MachObjectWriter::executePostLayoutBinding(llvm::MachObjectWriter *this, llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  llvm::MachObjectWriter::computeSectionAddresses((unint64_t)this, a2, a3);

  return llvm::MachObjectWriter::bindIndirectSymbols((uint64_t)this, a2);
}

uint64_t llvm::MachObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800 || (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
  }
}

BOOL llvm::MachObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(llvm::MachObjectWriter *this, const llvm::MCAssembler *a2, const llvm::MCSymbol *a3, const llvm::MCFragment *a4, char a5, int a6)
{
  if (a5) {
    return 1;
  }
  while ((*((_DWORD *)a3 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a3 + 2) |= 4u;
    uint64_t v23 = *((void *)a3 + 3);
    if (*(unsigned char *)v23 != 2) {
      break;
    }
    a3 = *(const llvm::MCSymbol **)(v23 + 16);
  }
  uint64_t v13 = *(void *)a3;
  unint64_t AssociatedFragment = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*((_DWORD *)a3 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a3 + 2) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a3 + 3));
    uint64_t v13 = *(void *)a3 & 7 | AssociatedFragment;
    *(void *)a3 = v13;
  }
  uint64_t v15 = *(void *)(AssociatedFragment + 16);
  uint64_t v16 = *((void *)a4 + 2);
  if (!a6) {
    goto LABEL_45;
  }
  if (*(_DWORD *)(*((void *)this + 1) + 12) != 16777223)
  {
    unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)a3 + 2) & 0x1C00) == 0x800)
    {
      *((_DWORD *)a3 + 2) |= 4u;
      unint64_t v17 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a3 + 3));
      uint64_t v13 = *(void *)a3 & 7 | v17;
      *(void *)a3 = v13;
    }
    if (v17)
    {
      unint64_t v18 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)a3 + 2) & 0x1C00) == 0x800)
      {
        *((_DWORD *)a3 + 2) |= 4u;
        unint64_t v18 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a3 + 3));
        uint64_t v13 = *(void *)a3 & 7 | v18;
        *(void *)a3 = v13;
      }
      if ((_UNKNOWN *)v18 != llvm::MCSymbol::AbsolutePseudoFragment && v15 == v16)
      {
        int v20 = *((_DWORD *)a3 + 2);
        if (v20) {
          return 1;
        }
        uint64_t v21 = *((void *)a4 + 3);
        unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFF8;
        if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)a3 + 2) & 0x1C00) == 0x800)
        {
          *((_DWORD *)a3 + 2) = v20 | 4;
          unint64_t v22 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a3 + 3));
          *(void *)a3 = *(void *)a3 & 7 | v22;
        }
        if (v21 == *(void *)(v22 + 24) || (*((unsigned char *)a2 + 500) & 2) == 0) {
          return 1;
        }
      }
    }
    return 0;
  }
  if (*((void *)a4 + 3)
    || (*((unsigned char *)a3 + 8) & 1) == 0
    || !sub_1CC34BE58((uint64_t)a3, 1)
    || ((uint64_t v6 = 1, (_UNKNOWN *)sub_1CC34BE58((uint64_t)a3, 1) != llvm::MCSymbol::AbsolutePseudoFragment)
      ? (BOOL v25 = v15 == v16)
      : (BOOL v25 = 0),
        !v25))
  {
LABEL_45:
    if (v15 == v16)
    {
      unint64_t v24 = sub_1CC34BE58((uint64_t)a3, 1);
      if (v24) {
        return *(void *)(v24 + 24) == *((void *)a4 + 3);
      }
    }
    return 0;
  }
  return v6;
}

uint64_t llvm::MachObjectWriter::writeObject(llvm::MachObjectWriter *this, llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  uint64_t v285 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)*((void *)this + 26);
  uint64_t v7 = (*(uint64_t (**)(void *))(*v6 + 80))(v6);
  uint64_t v253 = v6[4];
  uint64_t v254 = v7;
  uint64_t v252 = v6[2];
  llvm::MachObjectWriter::computeSymbolTable((uint64_t)this, a2, (void **)this + 17, (__n128 **)this + 20, (uint64_t)this + 184);
  if (*((void *)a2 + 273) != *((void *)a2 + 274))
  {
    uint64_t v8 = *(void *)(llvm::MCContext::getMachOSection(*(void *)a2, (uint64_t)"__LLVM", 6uLL, (uint64_t)"__cg_profile", 12, 0, 0, 0, 0)+ 112);
    if (*(unsigned char *)(v8 + 48) != 1) {
      uint64_t v8 = 0;
    }
    *(void *)(v8 + 72) = 0;
    LODWORD(v278) = 0;
    char v281 = 0;
    uint64_t v282 = 0;
    uint64_t v284 = v8 + 64;
    int v283 = 0;
    *(void *)v277 = &unk_1F2646FA8;
    v279[0] = 0;
    v279[1] = 0;
    uint64_t v280 = 0;
    char v9 = (void *)*((void *)a2 + 273);
    unsigned int v10 = (void *)*((void *)a2 + 274);
    if (v9 != v10)
    {
      do
      {
        unsigned int v11 = *(_DWORD *)(*(void *)(*v9 + 16) + 16);
        unsigned int v12 = *(_DWORD *)(*(void *)(v9[1] + 16) + 16);
        unsigned int v13 = bswap32(v11);
        if ((*((_DWORD *)this + 54) - 1) >= 2) {
          unsigned int v11 = v13;
        }
        *(_DWORD *)v275 = v11;
        char v14 = llvm::raw_ostream::write((llvm::raw_ostream *)v277, v275, 4uLL);
        unsigned int v15 = bswap32(v12);
        if ((*((_DWORD *)this + 54) - 1) >= 2) {
          unsigned int v16 = v15;
        }
        else {
          unsigned int v16 = v12;
        }
        *(_DWORD *)v275 = v16;
        unint64_t v17 = llvm::raw_ostream::write(v14, v275, 4uLL);
        unint64_t v18 = v9[2];
        unint64_t v19 = bswap64(v18);
        if ((*((_DWORD *)this + 54) - 1) >= 2) {
          unint64_t v18 = v19;
        }
        *(void *)v275 = v18;
        llvm::raw_ostream::write(v17, v275, 8uLL);
        v9 += 3;
      }
      while (v9 != v10);
      *(void *)v277 = &unk_1F2646B98;
      if (v283 == 1 && v279[0]) {
        MEMORY[0x1D25D9CB0](v279[0], 0x1000C8077774924);
      }
    }
  }
  uint64_t v20 = *(void *)a3;
  int v21 = *(unsigned char *)(*((void *)this + 1) + 8) & 1;
  uint64_t v256 = (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3;
  unsigned int v22 = 80;
  if ((*(unsigned char *)(*((void *)this + 1) + 8) & 1) == 0) {
    unsigned int v22 = 68;
  }
  uint64_t v23 = 72;
  if ((*(unsigned char *)(*((void *)this + 1) + 8) & 1) == 0) {
    uint64_t v23 = 56;
  }
  unint64_t v24 = v23 + v22 * (unint64_t)((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  uint64_t v251 = *(void *)a3 + 2072;
  if (*(_DWORD *)(v20 + 2080))
  {
    unint64_t v25 = v24 + 16;
    v24 += 24;
    if (!*(unsigned char *)(*(void *)a3 + 2072)) {
      unint64_t v24 = v25;
    }
    int v26 = 2;
  }
  else
  {
    int v26 = 1;
  }
  *(void *)v258 = *(void *)a3;
  if (*(_DWORD *)(v20 + 2116))
  {
    v24 += 24;
    ++v26;
  }
  int v27 = -1431655765 * ((*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  int v257 = v27;
  if (v27) {
    unint64_t v28 = v24 + 16;
  }
  else {
    unint64_t v28 = v24;
  }
  if (v27) {
    int v29 = v26 + 1;
  }
  else {
    int v29 = v26;
  }
  uint64_t v30 = *((void *)a2 + 64);
  if (!v30)
  {
    uint64_t v31 = *((unsigned int *)a2 + 132);
    if (v31)
    {
      uint64_t v32 = (llvm::MCLOHDirective *)*((void *)a2 + 65);
      uint64_t v33 = 48 * v31;
      do
      {
        uint64_t v30 = *((void *)a2 + 64) + llvm::MCLOHDirective::getEmitSize(v32, this, a3);
        *((void *)a2 + 64) = v30;
        uint64_t v32 = (llvm::MCLOHDirective *)((char *)v32 + 48);
        v33 -= 48;
      }
      while (v33);
      int v21 = *(unsigned char *)(*((void *)this + 1) + 8) & 1;
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
  uint64_t v34 = -4;
  if (v21) {
    uint64_t v34 = -8;
  }
  uint64_t v35 = 8;
  if (!v21) {
    uint64_t v35 = 4;
  }
  int v250 = v30;
  uint64_t v37 = (v30 + v35 - 1) & v34;
  BOOL v36 = v37 == 0;
  *(void *)v260 = v37;
  unint64_t v38 = v28 + 16;
  if (v36) {
    unint64_t v38 = v28;
  }
  if (v36) {
    unsigned int v39 = v29;
  }
  else {
    unsigned int v39 = v29 + 1;
  }
  uint64_t v40 = -1431655765 * ((*((void *)this + 18) - *((void *)this + 17)) >> 3)
      - 1431655765 * ((*((void *)this + 21) - *((void *)this + 20)) >> 3)
      - 1431655765 * ((*((void *)this + 24) - *((void *)this + 23)) >> 3);
  uint64_t v259 = v40;
  if (v40) {
    unint64_t v41 = v38 + 104;
  }
  else {
    unint64_t v41 = v38;
  }
  if (v40) {
    unsigned int v42 = v39 + 2;
  }
  else {
    unsigned int v42 = v39;
  }
  uint64_t v43 = (uint64_t *)*((void *)a2 + 16);
  uint64_t v44 = (uint64_t *)*((void *)a2 + 17);
  if (v43 != v44)
  {
    if (v21) {
      int v45 = -8;
    }
    else {
      int v45 = -4;
    }
    if (v21) {
      int v46 = 7;
    }
    else {
      int v46 = 3;
    }
    do
    {
      uint64_t v47 = *v43;
      int v48 = 12;
      while (v47 != v43[1])
      {
        if (*(char *)(v47 + 23) < 0) {
          uint64_t v49 = *(void *)(v47 + 8);
        }
        else {
          LODWORD(v49) = *(unsigned __int8 *)(v47 + 23);
        }
        v48 += v49 + 1;
        v47 += 24;
      }
      ++v42;
      v41 += (v48 + v46) & v45;
      v43 += 3;
    }
    while (v43 != v44);
  }
  uint64_t v50 = *((void *)a2 + 19);
  uint64_t v51 = *((void *)a2 + 20);
  if (v50 != v51)
  {
    int v52 = -8;
    if (!v21) {
      int v52 = -4;
    }
    int v53 = v35 + 24;
    do
    {
      ++v42;
      int v54 = *(char *)(v50 + 23);
      if (v54 >= 0) {
        int v55 = v54 & 0x7F;
      }
      else {
        int v55 = *(_DWORD *)(v50 + 8);
      }
      v41 += (v53 + v55) & v52;
      v50 += 24;
    }
    while (v50 != v51);
  }
  uint64_t v56 = 32;
  if (!v21) {
    uint64_t v56 = 28;
  }
  unsigned int v255 = v41;
  uint64_t v262 = a2;
  unint64_t v263 = v41 + v56;
  unint64_t v57 = (uint64_t *)*((void *)a2 + 4);
  v261 = (uint64_t *)*((void *)a2 + 5);
  if (v57 == v261)
  {
    unint64_t v95 = 0;
    unint64_t v58 = 0;
    unint64_t v96 = 0;
    goto LABEL_110;
  }
  unint64_t v269 = 0;
  unint64_t v271 = 0;
  unint64_t v58 = 0;
  unint64_t v268 = a3;
  do
  {
    uint64_t v59 = *v57;
    int v60 = *((_DWORD *)this + 20);
    unsigned int v61 = *v57 >> 4;
    if (v60)
    {
      uint64_t v62 = *((void *)this + 8);
      unsigned int v63 = v60 - 1;
      uint64_t v64 = (v61 ^ (v59 >> 9)) & (v60 - 1);
      uint64_t v65 = *(void *)(v62 + 16 * v64);
      if (v59 == v65)
      {
LABEL_85:
        uint64_t v266 = *(void *)(v62 + 16 * v64 + 8);
        goto LABEL_86;
      }
      int v66 = 1;
      while (v65 != -4096)
      {
        int v67 = v64 + v66++;
        uint64_t v64 = v67 & v63;
        uint64_t v65 = *(void *)(v62 + 16 * v64);
        if (v59 == v65) {
          goto LABEL_85;
        }
      }
    }
    uint64_t v266 = 0;
LABEL_86:
    uint64_t v68 = *(const llvm::MCFragment **)(v59 + 104);
    llvm::MCAsmLayout::ensureValid(a3, v68);
    unint64_t v69 = (llvm::MCAssembler **)a3;
    uint64_t v70 = *((void *)v68 + 4);
    unint64_t v71 = llvm::MCAssembler::computeFragmentSize(*v69, (const llvm::MCAsmLayout *)v69, v68);
    uint64_t SectionFileSize = llvm::MCAsmLayout::getSectionFileSize((llvm::MCAsmLayout *)v69, (const llvm::MCFragment **)v59);
    int v73 = *((_DWORD *)this + 20);
    unint64_t v267 = v58;
    unint64_t v264 = v71;
    uint64_t v265 = SectionFileSize;
    if (!v73) {
      goto LABEL_108;
    }
    uint64_t v74 = *((void *)this + 8);
    unsigned int v75 = v73 - 1;
    uint64_t v76 = (v73 - 1) & (v61 ^ (v59 >> 9));
    uint64_t v77 = *(void *)(v74 + 16 * v76);
    if (v77 != v59)
    {
      int v78 = 1;
      while (v77 != -4096)
      {
        int v79 = v76 + v78++;
        uint64_t v76 = v79 & v75;
        uint64_t v77 = *(void *)(v74 + 16 * v76);
        if (v77 == v59) {
          goto LABEL_91;
        }
      }
LABEL_108:
      uint64_t v80 = 0;
      goto LABEL_92;
    }
LABEL_91:
    uint64_t v80 = *(void *)(v74 + 16 * v76 + 8);
LABEL_92:
    BOOL v81 = *(const llvm::MCFragment **)(v59 + 104);
    llvm::MCAsmLayout::ensureValid(v268, v81);
    uint64_t v82 = *((void *)v81 + 4);
    unint64_t v83 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)v268, v268, v81);
    unsigned int v84 = *(_DWORD *)(v59 + 32) + 1;
    if (*((_DWORD *)v268 + 4) <= v84
      || (unint64_t v85 = v83,
          int v86 = *(unsigned char **)(*((void *)v268 + 1) + 8 * v84),
          ((*(uint64_t (**)(unsigned char *))(*(void *)v86 + 16))(v86) & 1) != 0))
    {
      uint64_t v88 = 0;
    }
    else
    {
      uint64_t v87 = 1 << (63 - __clz((1 << v86[24])));
      uint64_t v88 = ((v82 + v80 + v85 + v87 - 1) & -v87) - (v82 + v80 + v85);
    }
    unint64_t v89 = v70 + v266 + v264;
    unint64_t v90 = v271;
    if (v271 <= v89) {
      unint64_t v90 = v70 + v266 + v264;
    }
    unint64_t v271 = v90;
    char v91 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 16))(v59);
    a3 = v268;
    unint64_t v92 = v269;
    if (v269 <= v89) {
      unint64_t v93 = v89;
    }
    else {
      unint64_t v93 = v269;
    }
    unint64_t v94 = v265 + v266 + v88;
    unint64_t v58 = v267;
    if (v267 > v94) {
      unint64_t v94 = v267;
    }
    if ((v91 & 1) == 0)
    {
      unint64_t v58 = v94;
      unint64_t v92 = v93;
    }
    unint64_t v269 = v92;
    ++v57;
  }
  while (v57 != v261);
  LOBYTE(v21) = *(unsigned char *)(*((void *)this + 1) + 8) & 1;
  a2 = v262;
  unint64_t v96 = v92;
  unint64_t v95 = v271;
LABEL_110:
  uint64_t v97 = 1 << (v21 | 2u);
  uint64_t v98 = v58 + v97 - 1;
  unint64_t v270 = (v98 & -v97) - v58;
  size_t v99 = (v98 & -(int)v97) - v58;
  uint64_t v100 = *((void *)a2 + 268);
  unsigned int v101 = v100;
  if ((v100 & 0xFF00000000) != 0 && (v100 & 0xFFFFFFC0) != 0)
  {
    unint64_t v273 = v95;
    uint64_t v242 = *(void *)a2;
    unsigned int v243 = (char *)v279 + 5;
    unint64_t v244 = v100;
    if (v100)
    {
      unsigned int v243 = (char *)v279 + 5;
      do
      {
        *--unsigned int v243 = (v244 % 0xA) | 0x30;
        BOOL v245 = v244 > 9;
        v244 /= 0xAuLL;
      }
      while (v245);
    }
    sub_1CC028D80(&v274, v243, (char *)v279 + 5, (char *)v279 + 5 - v243);
    uint64_t v246 = std::string::insert(&v274, 0, "invalid ptrauth ABI version: ");
    std::string::size_type v247 = v246->__r_.__value_.__r.__words[2];
    *(_OWORD *)v275 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
    std::string::size_type v276 = v247;
    v246->__r_.__value_.__l.__size_ = 0;
    v246->__r_.__value_.__r.__words[2] = 0;
    v246->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v280) = 260;
    *(void *)v277 = v275;
    llvm::MCContext::reportError(v242, 0, (uint64_t)v277);
    if (SHIBYTE(v276) < 0) {
      operator delete(*(void **)v275);
    }
    unint64_t v95 = v273;
    if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v274.__r_.__value_.__l.__data_);
    }
    unsigned int v101 = 63;
  }
  llvm::MachObjectWriter::writeHeader((uint64_t)this, 1u, v42, v255, (*((unsigned __int8 *)a2 + 500) >> 1) & 1, v100 & 0xFFFFFFFF00000000 | v101, *((unsigned __int8 *)a2 + 2152));
  llvm::MachObjectWriter::writeSegmentLoadCommand((uint64_t)this, "", 0, v256, 0, v95, v263, v96, 7u, 7u);
  size_t v272 = v99;
  unint64_t v102 = v58 + v263 + v99;
  unint64_t v103 = (void *)*((void *)a2 + 4);
  char v104 = (void *)*((void *)a2 + 5);
  if (v103 != v104)
  {
    while (2)
    {
      *(void *)v277 = *v103;
      uint64_t v105 = *(void *)v277;
      int v106 = *((_DWORD *)this + 8);
      unsigned int v107 = *(_DWORD *)v277 >> 4;
      if (v106)
      {
        uint64_t v108 = *((void *)this + 2);
        unsigned int v109 = v106 - 1;
        uint64_t v110 = v109 & (v107 ^ (*(_DWORD *)v277 >> 9));
        BOOL v111 = (void *)(v108 + 32 * v110);
        uint64_t v112 = *v111;
        if (*(void *)v277 != *v111)
        {
          unint64_t v113 = 0;
          int v114 = 1;
          while (v112 != -4096)
          {
            if (v113) {
              BOOL v115 = 0;
            }
            else {
              BOOL v115 = v112 == -8192;
            }
            if (v115) {
              unint64_t v113 = v111;
            }
            int v116 = v110 + v114++;
            uint64_t v110 = v116 & v109;
            BOOL v111 = (void *)(v108 + 32 * v110);
            uint64_t v112 = *v111;
            if (*(void *)v277 == *v111) {
              goto LABEL_128;
            }
          }
          if (v113) {
            unint64_t v117 = v113;
          }
          else {
            unint64_t v117 = v111;
          }
LABEL_127:
          BOOL v111 = sub_1CBC6117C((uint64_t *)this + 2, (uint64_t)v277, v277, v117);
          void *v111 = *(void *)v277;
          v111[1] = 0;
          uint64_t v111[2] = 0;
          v111[3] = 0;
        }
LABEL_128:
        uint64_t v119 = v111[1];
        uint64_t v118 = v111[2];
        int v120 = *((_DWORD *)this + 20);
        if (v120)
        {
          uint64_t v121 = *((void *)this + 8);
          unsigned int v122 = v120 - 1;
          uint64_t v123 = (v120 - 1) & (v107 ^ (v105 >> 9));
          uint64_t v124 = *(void *)(v121 + 16 * v123);
          uint64_t v125 = v123;
          if (v105 == v124)
          {
LABEL_133:
            uint64_t v129 = *(void *)(v121 + 16 * v125 + 8);
          }
          else
          {
            int v126 = 1;
            uint64_t v127 = *(void *)(v121 + 16 * (v122 & (v107 ^ (v105 >> 9))));
            LODWORD(v125) = v122 & (v107 ^ (v105 >> 9));
            while (v127 != -4096)
            {
              int v128 = v125 + v126++;
              uint64_t v125 = v128 & v122;
              uint64_t v127 = *(void *)(v121 + 16 * v125);
              if (v105 == v127) {
                goto LABEL_133;
              }
            }
            LODWORD(v129) = 0;
          }
          unsigned int v130 = v129 + v263;
          unsigned int v131 = *(_DWORD *)(v105 + 240) | ((*(unsigned char *)(v105 + 44) & 2) << 9);
          if (v105 == v124)
          {
LABEL_138:
            unint64_t v134 = *(void *)(v121 + 16 * v123 + 8);
          }
          else
          {
            int v132 = 1;
            while (v124 != -4096)
            {
              int v133 = v123 + v132++;
              uint64_t v123 = v133 & v122;
              uint64_t v124 = *(void *)(v121 + 16 * v123);
              if (v105 == v124) {
                goto LABEL_138;
              }
            }
            unint64_t v134 = 0;
          }
        }
        else
        {
          unint64_t v134 = 0;
          unsigned int v131 = *(_DWORD *)(v105 + 240) | ((*(unsigned char *)(v105 + 44) & 2) << 9);
          unsigned int v130 = v263;
        }
        unint64_t v135 = v118 - v119;
        llvm::MachObjectWriter::writeSection(this, a3, (const llvm::MCSection *)v105, v134, v130, v131, v102, (unint64_t)(v118 - v119) >> 4);
        v102 += (v135 >> 1) & 0x7FFFFFFF8;
        if (++v103 == v104) {
          goto LABEL_145;
        }
        continue;
      }
      break;
    }
    unint64_t v117 = 0;
    goto LABEL_127;
  }
LABEL_145:
  if (*(_DWORD *)(*(void *)v258 + 2080)) {
    sub_1CCBE1A54((uint64_t)this, v251);
  }
  if (*(_DWORD *)(*(void *)v258 + 2116)) {
    sub_1CCBE1A54((uint64_t)this, *(void *)v258 + 2108);
  }
  if (v257) {
    llvm::MachObjectWriter::writeLinkeditLoadCommand(this, 0x29u, v102, 8 * v257);
  }
  unsigned int v136 = v102 + 8 * v257;
  if (*(void *)v260) {
    llvm::MachObjectWriter::writeLinkeditLoadCommand(this, 0x2Eu, v136, v260[0]);
  }
  if (v259)
  {
    unsigned int v137 = v136 + v260[0];
    unsigned int v138 = -1431655765 * ((*((void *)this + 18) - *((void *)this + 17)) >> 3);
    unsigned int v139 = -1431655765 * ((*((void *)this + 21) - *((void *)this + 20)) >> 3);
    unsigned int v140 = v139 - 1431655765 * ((*((void *)this + 18) - *((void *)this + 17)) >> 3);
    uint64_t v141 = *((void *)this + 23);
    unsigned int v142 = -1431655765 * ((unint64_t)(*((void *)this + 24) - v141) >> 3);
    unint64_t v143 = *((void *)a2 + 11) - *((void *)a2 + 10);
    unint64_t v144 = v143 >> 4;
    unsigned int v146 = ((v143 >> 2) & 0xFFFFFFFC) + v137;
    if (*(unsigned char *)(*((void *)this + 1) + 8)) {
      int v147 = 16;
    }
    else {
      int v147 = 12;
    }
    unsigned int v145 = v140 - 1431655765 * ((unint64_t)(*((void *)this + 24) - v141) >> 3);
    llvm::MachObjectWriter::writeSymtabLoadCommand(this, v146, v145, v146 + v147 * v145, *((_DWORD *)this + 28));
    if (v144) {
      unsigned int v148 = v137;
    }
    else {
      unsigned int v148 = 0;
    }
    llvm::MachObjectWriter::writeDysymtabLoadCommand(this, 0, v138, v138, v139, v140, v142, v148, v144);
  }
  uint64_t v149 = (uint64_t *)*((void *)a2 + 16);
  uint64_t v150 = (uint64_t *)*((void *)a2 + 17);
  while (v149 != v150)
  {
    llvm::MachObjectWriter::writeLinkerOptionsLoadCommand((uint64_t)this, v149);
    v149 += 3;
  }
  uint64_t v151 = *((void *)a2 + 19);
  uint64_t v152 = *((void *)a2 + 20);
  while (v151 != v152)
  {
    char v153 = *(unsigned char *)(v151 + 23);
    BOOL v154 = v153 < 0;
    if (v153 >= 0) {
      int v155 = (const char *)v151;
    }
    else {
      int v155 = *(const char **)v151;
    }
    size_t v156 = v153 & 0x7F;
    if (v154) {
      size_t v157 = *(void *)(v151 + 8);
    }
    else {
      size_t v157 = v156;
    }
    llvm::MachObjectWriter::writeLoadDylibLoadCommand((uint64_t)this, v155, v157);
    v151 += 24;
  }
  uint64_t v158 = (const llvm::MCSection **)*((void *)a2 + 4);
  int v159 = (const llvm::MCSection **)*((void *)a2 + 5);
  if (v158 != v159)
  {
    while (2)
    {
      int v160 = *v158;
      llvm::MCAssembler::writeSectionData(a2, *((llvm::raw_ostream **)this + 26), *v158, a3);
      int v161 = *((_DWORD *)this + 20);
      if (!v161) {
        goto LABEL_187;
      }
      uint64_t v162 = *((void *)this + 8);
      unsigned int v163 = v161 - 1;
      uint64_t v164 = (v161 - 1) & ((v160 >> 4) ^ (v160 >> 9));
      uint64_t v165 = *(const llvm::MCSection **)(v162 + 16 * v164);
      if (v165 == v160)
      {
LABEL_179:
        uint64_t v168 = *(void *)(v162 + 16 * v164 + 8);
      }
      else
      {
        int v166 = 1;
        while (v165 != (const llvm::MCSection *)-4096)
        {
          int v167 = v164 + v166++;
          uint64_t v164 = v167 & v163;
          uint64_t v165 = *(const llvm::MCSection **)(v162 + 16 * v164);
          if (v165 == v160) {
            goto LABEL_179;
          }
        }
LABEL_187:
        LODWORD(v168) = 0;
      }
      long long v169 = (const llvm::MCFragment *)*((void *)v160 + 13);
      llvm::MCAsmLayout::ensureValid(a3, v169);
      uint64_t v170 = *((void *)v169 + 4);
      int v171 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v169);
      unsigned int v172 = *((_DWORD *)v160 + 8) + 1;
      if (*((_DWORD *)a3 + 4) <= v172
        || (int v173 = v171,
            unsigned int v174 = *(unsigned char **)(*((void *)a3 + 1) + 8 * v172),
            (*(unsigned int (**)(unsigned char *))(*(void *)v174 + 16))(v174)))
      {
        unsigned int v176 = 0;
        long long v177 = (llvm::raw_ostream *)*((void *)this + 26);
        a2 = v262;
LABEL_183:
        llvm::raw_ostream::write(v177, "", v176);
      }
      else
      {
        char v175 = __clz((1 << v174[24]));
        unsigned int v176 = ((v170 + v168 + v173 + (1 << (63 - v175)) - 1) & -(1 << (63 - v175))) - (v170 + v168 + v173);
        long long v177 = (llvm::raw_ostream *)*((void *)this + 26);
        a2 = v262;
        if (v176 < 0x50) {
          goto LABEL_183;
        }
        do
        {
          if (v176 >= 0x4F) {
            size_t v178 = 79;
          }
          else {
            size_t v178 = v176;
          }
          long long v177 = llvm::raw_ostream::write(v177, "", v178);
          v176 -= v178;
        }
        while (v176);
      }
      if (++v158 == v159) {
        break;
      }
      continue;
    }
  }
  uint64_t v179 = (llvm::raw_ostream *)*((void *)this + 26);
  if (v270 >= 0x50)
  {
    do
    {
      if (v270 >= 0x4F) {
        size_t v248 = 79;
      }
      else {
        size_t v248 = v270;
      }
      uint64_t v179 = llvm::raw_ostream::write(v179, "", v248);
      LODWORD(v270) = v270 - v248;
    }
    while (v270);
  }
  else
  {
    llvm::raw_ostream::write(v179, "", v272);
  }
  uint64_t v180 = (uint64_t *)*((void *)a2 + 4);
  long long v181 = (uint64_t *)*((void *)a2 + 5);
  if (v180 != v181)
  {
    while (2)
    {
      uint64_t v182 = *v180;
      *(void *)v277 = *v180;
      int v183 = *((_DWORD *)this + 8);
      if (v183)
      {
        uint64_t v184 = *((void *)this + 2);
        unsigned int v185 = v183 - 1;
        uint64_t v186 = v185 & ((v182 >> 4) ^ (v182 >> 9));
        uint64_t v187 = (void *)(v184 + 32 * v186);
        uint64_t v188 = *v187;
        if (v182 != *v187)
        {
          long long v189 = 0;
          int v190 = 1;
          while (v188 != -4096)
          {
            if (v189) {
              BOOL v191 = 0;
            }
            else {
              BOOL v191 = v188 == -8192;
            }
            if (v191) {
              long long v189 = v187;
            }
            int v192 = v186 + v190++;
            uint64_t v186 = v192 & v185;
            uint64_t v187 = (void *)(v184 + 32 * v186);
            uint64_t v188 = *v187;
            if (v182 == *v187) {
              goto LABEL_211;
            }
          }
          if (v189) {
            uint64_t v193 = v189;
          }
          else {
            uint64_t v193 = v187;
          }
LABEL_210:
          uint64_t v187 = sub_1CBC6117C((uint64_t *)this + 2, (uint64_t)v277, v277, v193);
          void *v187 = *(void *)v277;
          v187[1] = 0;
          v187[2] = 0;
          v187[3] = 0;
        }
LABEL_211:
        uint64_t v194 = v187[1];
        uint64_t v195 = v187[2];
        if (v195 != v194)
        {
          do
          {
            uint64_t v196 = v195 - 16;
            unsigned int v197 = *(_DWORD *)(v195 - 8);
            uint64_t v198 = (llvm::raw_ostream *)*((void *)this + 26);
            unsigned int v199 = bswap32(v197);
            if ((*((_DWORD *)this + 54) - 1) >= 2) {
              unsigned int v197 = v199;
            }
            *(_DWORD *)v277 = v197;
            llvm::raw_ostream::write(v198, v277, 4uLL);
            unsigned int v200 = *(_DWORD *)(v195 - 4);
            unsigned __int8 v201 = (llvm::raw_ostream *)*((void *)this + 26);
            unsigned int v202 = bswap32(v200);
            if ((*((_DWORD *)this + 54) - 1) >= 2) {
              unsigned int v200 = v202;
            }
            *(_DWORD *)v277 = v200;
            llvm::raw_ostream::write(v201, v277, 4uLL);
            v195 -= 16;
          }
          while (v196 != v194);
        }
        if (++v180 == v181) {
          goto LABEL_220;
        }
        continue;
      }
      break;
    }
    uint64_t v193 = 0;
    goto LABEL_210;
  }
LABEL_220:
  uint64_t v203 = (const llvm::MCSymbol **)*((void *)a2 + 13);
  uint64_t v204 = (unsigned __int16 *)*((void *)a2 + 14);
  while (v203 != (const llvm::MCSymbol **)v204)
  {
    unsigned int SymbolAddress = llvm::MachObjectWriter::getSymbolAddress(this, v203[1], a3);
    long long v206 = v203[2];
    if (!v206) {
      llvm::report_fatal_error((llvm *)"Data region not terminated", (const llvm::Twine *)1);
    }
    unsigned int v207 = SymbolAddress;
    int v208 = llvm::MachObjectWriter::getSymbolAddress(this, v206, a3);
    int v209 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v210 = bswap32(v207);
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      unsigned int v211 = v210;
    }
    else {
      unsigned int v211 = v207;
    }
    *(_DWORD *)v277 = v211;
    llvm::raw_ostream::write(v209, v277, 4uLL);
    __int16 v212 = v208 - v207;
    char v213 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v214 = bswap32(v208 - v207) >> 16;
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      __int16 v212 = v214;
    }
    *(_WORD *)v277 = v212;
    llvm::raw_ostream::write(v213, v277, 2uLL);
    unsigned int v216 = *(unsigned __int16 *)v203;
    v203 += 3;
    __int16 v215 = v216;
    uint64_t v217 = (llvm::raw_ostream *)*((void *)this + 26);
    unsigned int v218 = bswap32(v216) >> 16;
    if ((*((_DWORD *)this + 54) - 1) >= 2) {
      __int16 v215 = v218;
    }
    *(_WORD *)v277 = v215;
    llvm::raw_ostream::write(v217, v277, 2uLL);
  }
  if (*(void *)v260)
  {
    uint64_t v219 = *((unsigned int *)a2 + 132);
    if (v219)
    {
      char v220 = (llvm::MCLOHDirective *)*((void *)a2 + 65);
      uint64_t v221 = 48 * v219;
      do
      {
        llvm::MCLOHDirective::emit_impl(v220, *((llvm::raw_ostream **)this + 26), this, a3);
        char v220 = (llvm::MCLOHDirective *)((char *)v220 + 48);
        v221 -= 48;
      }
      while (v221);
    }
    int v222 = (llvm::raw_ostream *)*((void *)this + 26);
    uint64_t v223 = 1 << (*(unsigned char *)(*((void *)this + 1) + 8) & 1 | 2u);
    unsigned int v224 = ((v250 - 1 + v223) & -(int)v223) - v250;
    if (v224 >= 0x50)
    {
      do
      {
        if (v224 >= 0x4F) {
          size_t v249 = 79;
        }
        else {
          size_t v249 = v224;
        }
        int v222 = llvm::raw_ostream::write(v222, "", v249);
        v224 -= v249;
      }
      while (v224);
    }
    else
    {
      llvm::raw_ostream::write(v222, "", ((v250 - 1 + v223) & -(int)v223) - v250);
    }
  }
  if (v259)
  {
    unsigned int v225 = (uint64_t *)*((void *)a2 + 10);
    for (uint64_t i = (uint64_t *)*((void *)a2 + 11); v225 != i; v225 += 2)
    {
      uint64_t v227 = *v225;
      if (*(unsigned char *)(v225[1] + 240) != 6) {
        goto LABEL_252;
      }
      unint64_t AssociatedFragment = *(void *)v227 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*(_DWORD *)(v227 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v227 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v227 + 24));
        *(void *)uint64_t v227 = *(void *)v227 & 7 | AssociatedFragment;
        uint64_t v227 = *v225;
      }
      if (AssociatedFragment && (int v229 = *(_DWORD *)(v227 + 8), (v229 & 0x10) == 0))
      {
        unint64_t v230 = *(void *)v227 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v227 + 8) & 0x1C00) == 0x800 && v230 == 0)
        {
          *(_DWORD *)(v227 + 8) = v229 | 4;
          unint64_t v230 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v227 + 24));
          *(void *)uint64_t v227 = *(void *)v227 & 7 | v230;
        }
        if ((_UNKNOWN *)v230 == llvm::MCSymbol::AbsolutePseudoFragment) {
          unsigned int v232 = -1073741824;
        }
        else {
          unsigned int v232 = 0x80000000;
        }
        char v233 = (llvm::raw_ostream *)*((void *)this + 26);
        unsigned int v234 = *((_DWORD *)this + 54) - 1;
        unsigned int v235 = HIBYTE(v232);
      }
      else
      {
LABEL_252:
        unsigned int v232 = *(_DWORD *)(v227 + 16);
        char v233 = (llvm::raw_ostream *)*((void *)this + 26);
        unsigned int v234 = *((_DWORD *)this + 54) - 1;
        unsigned int v235 = bswap32(v232);
      }
      if (v234 >= 2) {
        unsigned int v232 = v235;
      }
      *(_DWORD *)v277 = v232;
      llvm::raw_ostream::write(v233, v277, 4uLL);
    }
    uint64_t v236 = 0;
    *(void *)v277 = (char *)this + 136;
    unsigned int v278 = (char *)this + 160;
    v279[0] = (char *)this + 184;
    do
    {
      uint64_t v237 = *(char ***)&v277[8 * v236];
      unsigned int v238 = *v237;
      unsigned int v239 = v237[1];
      while (v238 != v239)
      {
        llvm::MachObjectWriter::writeNlist(this, v238, a3);
        v238 += 24;
      }
      ++v236;
    }
    while (v236 != 3);
    llvm::StringTableBuilder::write((llvm::MachObjectWriter *)((char *)this + 88), *((llvm::raw_ostream **)this + 26));
  }
  v240 = (void *)*((void *)this + 26);
  return v252 - (v254 + v253) + v240[4] + (*(uint64_t (**)(void *))(*v240 + 80))(v240) - v240[2];
}

llvm::raw_ostream *sub_1CCBE1A54(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(_DWORD *)(a2 + 12) << 8) | (*(_DWORD *)(a2 + 8) << 16) | *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
  uint64_t v5 = *(void *)(a2 + 20);
  uint64_t v6 = *(void *)(a2 + 28);
  uint64_t v7 = v5 & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF7FFFFFFFLL;
  if ((int)v6 < 0) {
    int v8 = v6 & 0x7FFFFFFF;
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = ((unint64_t)v5 >> 24) & 0xFFFFFF00;
  if (v5 >= 0) {
    LODWORD(v9) = 0;
  }
  unsigned int v10 = v9 | (v5 << 16) | v8;
  if (v7) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  if (*(unsigned char *)a2)
  {
    unsigned int v12 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v13 = 838860800;
    }
    else {
      int v13 = 50;
    }
    *(_DWORD *)BOOL v36 = v13;
    llvm::raw_ostream::write(v12, v36, 4uLL);
    char v14 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v15 = 402653184;
    }
    else {
      int v15 = 24;
    }
    *(_DWORD *)BOOL v36 = v15;
    llvm::raw_ostream::write(v14, v36, 4uLL);
    unsigned int v16 = *(_DWORD *)(a2 + 4);
    unint64_t v17 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v18 = bswap32(v16);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unsigned int v16 = v18;
    }
    *(_DWORD *)BOOL v36 = v16;
    llvm::raw_ostream::write(v17, v36, 4uLL);
    unint64_t v19 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v20 = bswap32(v4);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unsigned int v21 = v20;
    }
    else {
      unsigned int v21 = v4;
    }
    *(_DWORD *)BOOL v36 = v21;
    llvm::raw_ostream::write(v19, v36, 4uLL);
    unsigned int v22 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v23 = bswap32(v11);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unsigned int v24 = v23;
    }
    else {
      unsigned int v24 = v11;
    }
    *(_DWORD *)BOOL v36 = v24;
    llvm::raw_ostream::write(v22, v36, 4uLL);
    unint64_t v25 = *(llvm::raw_ostream **)(a1 + 208);
    *(_DWORD *)BOOL v36 = 0;
  }
  else
  {
    int v26 = dword_1CFB28F20[*(int *)(a2 + 4)];
    int v27 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      v26 <<= 24;
    }
    *(_DWORD *)BOOL v36 = v26;
    llvm::raw_ostream::write(v27, v36, 4uLL);
    unint64_t v28 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      int v29 = 0x10000000;
    }
    else {
      int v29 = 16;
    }
    *(_DWORD *)BOOL v36 = v29;
    llvm::raw_ostream::write(v28, v36, 4uLL);
    uint64_t v30 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v31 = bswap32(v4);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = v4;
    }
    *(_DWORD *)BOOL v36 = v32;
    llvm::raw_ostream::write(v30, v36, 4uLL);
    unint64_t v25 = *(llvm::raw_ostream **)(a1 + 208);
    unsigned int v33 = bswap32(v11);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = v11;
    }
    *(_DWORD *)BOOL v36 = v34;
  }
  return llvm::raw_ostream::write(v25, v36, 4uLL);
}

void sub_1CCBE1C7C()
{
}

void sub_1CCBE1D3C(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631930;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(void *)(a1 + 144) = v4;
    operator delete(v4);
  }
  llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)(a1 + 88));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 64), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  sub_1CCBE1E20((unsigned int *)(a1 + 16));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 16), 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  llvm::MCObjectWriter::~MCObjectWriter((llvm::MCObjectWriter *)a1);
}

void sub_1CCBE1E20(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void *)(*(void *)a1 + 16);
    do
    {
      uint64_t v4 = *(v3 - 2);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *uint64_t v3 = v5;
          uint64_t v6 = v3;
          uint64_t v7 = v2;
          operator delete(v5);
          uint64_t v3 = v6;
          uint64_t v2 = v7;
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void *sub_1CCBE1E8C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CD57D418(a1, v7);
      unint64_t v17 = 0;
      sub_1CC48C528((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1CD57D418(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v11 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
    int v13 = 0;
    int v14 = 1;
    while (v11 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v11 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      a4 = (void *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a4;
      if (v8 == *a4) {
        goto LABEL_3;
      }
    }
    if (v13) {
      a4 = v13;
    }
  }
  uint64_t v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CCBE1FC0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6BD5A4(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CCBE208C(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
BOOL sub_1CCBE2614(void *a1, void *a2, void *a3)
{
  BOOL v6 = llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1);
  BOOL result = llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      uint64_t v8 = a1[2];
      long long v9 = *(_OWORD *)a1;
      uint64_t v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      uint64_t v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      BOOL result = llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2[2];
      long long v9 = *(_OWORD *)a2;
      uint64_t v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    uint64_t v11 = a2[2];
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    BOOL result = llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1);
    if (result)
    {
      uint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      uint64_t v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

void *sub_1CCBE2734(void *a1, void *a2)
{
  uint64_t v2 = a2;
  long long v14 = *(_OWORD *)a1;
  uint64_t v15 = a1[2];
  if (llvm::MachObjectWriter::MachSymbolData::operator<(&v14, a2 - 3))
  {
    char v4 = a1;
    do
      v4 += 3;
    while (!llvm::MachObjectWriter::MachSymbolData::operator<(&v14, v4));
  }
  else
  {
    char v5 = a1 + 3;
    do
    {
      char v4 = v5;
      if (v5 >= v2) {
        break;
      }
      BOOL v6 = llvm::MachObjectWriter::MachSymbolData::operator<(&v14, v5);
      char v5 = v4 + 3;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
      v2 -= 3;
    while (llvm::MachObjectWriter::MachSymbolData::operator<(&v14, v2));
  }
  while (v4 < v2)
  {
    long long v7 = *(_OWORD *)v4;
    uint64_t v17 = v4[2];
    long long v16 = v7;
    long long v8 = *(_OWORD *)v2;
    v4[2] = v2[2];
    *(_OWORD *)char v4 = v8;
    long long v9 = v16;
    v2[2] = v17;
    *(_OWORD *)uint64_t v2 = v9;
    do
      v4 += 3;
    while (!llvm::MachObjectWriter::MachSymbolData::operator<(&v14, v4));
    do
      v2 -= 3;
    while (llvm::MachObjectWriter::MachSymbolData::operator<(&v14, v2));
  }
  uint64_t v10 = (long long *)(v4 - 3);
  if (v4 - 3 != a1)
  {
    long long v11 = *v10;
    a1[2] = *(v4 - 1);
    *(_OWORD *)a1 = v11;
  }
  long long v12 = v14;
  *(v4 - 1) = v15;
  *uint64_t v10 = v12;
  return v4;
}

BOOL sub_1CCBE2878(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 24);
      if (llvm::MachObjectWriter::MachSymbolData::operator<(&a2[-2].n128_u64[1], a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *BOOL v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_1CCBE2614(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      sub_1CCBE2A60(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      sub_1CCBE2B30(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      uint64_t v10 = a1 + 3;
      sub_1CCBE2614(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      long long v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (llvm::MachObjectWriter::MachSymbolData::operator<(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (!llvm::MachObjectWriter::MachSymbolData::operator<(&v17, (void *)v15 + 3))
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    uint64_t v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

__n128 sub_1CCBE2A60(__n128 *a1, void *a2, void *a3, void *a4)
{
  sub_1CCBE2614(a1, a2, a3);
  if (llvm::MachObjectWriter::MachSymbolData::operator<(a4, a3))
  {
    uint64_t v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2))
    {
      uint64_t v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      uint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_1CCBE2B30(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  sub_1CCBE2A60(a1, a2, a3, a4);
  if (llvm::MachObjectWriter::MachSymbolData::operator<(a5, a4))
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (llvm::MachObjectWriter::MachSymbolData::operator<(a4, a3))
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2))
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

void sub_1CCBE2C3C(__n128 *a1, __n128 *a2, __n128 *a3)
{
  if (a1 != a2)
  {
    uint64_t v35 = v3;
    uint64_t v36 = v4;
    BOOL v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        sub_1CCBE2EB0((uint64_t)a1, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      uint64_t v13 = v6;
      do
      {
        if (llvm::MachObjectWriter::MachSymbolData::operator<(v13, a1))
        {
          unint64_t v14 = v13[1].n128_u64[0];
          __n128 v15 = *v13;
          unint64_t v16 = a1[1].n128_u64[0];
          __n128 *v13 = *a1;
          v13[1].n128_u64[0] = v16;
          *a1 = v15;
          a1[1].n128_u64[0] = v14;
          sub_1CCBE2EB0((uint64_t)a1, v9, a1);
        }
        uint64_t v13 = (__n128 *)((char *)v13 + 24);
      }
      while (v13 != a3);
    }
    if (v8 >= 25)
    {
      do
      {
        uint64_t v17 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        long long v18 = a1;
        do
        {
          uint64_t v19 = &v18[1].n128_i8[24 * v17 + 8];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v9
            && llvm::MachObjectWriter::MachSymbolData::operator<(&v18[1].n128_u64[3 * v17 + 1], &v18[3].n128_u64[3 * v17]))
          {
            v19 += 24;
            uint64_t v20 = v21;
          }
          __n128 v22 = *(__n128 *)v19;
          v18[1].n128_u64[0] = *((void *)v19 + 2);
          __n128 *v18 = v22;
          long long v18 = (__n128 *)v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        BOOL v6 = (__n128 *)((char *)v6 - 24);
        if (v19 == (char *)v6)
        {
          *((void *)v19 + 2) = v32;
          *(__n128 *)uint64_t v19 = v31;
        }
        else
        {
          __n128 v23 = *v6;
          *((void *)v19 + 2) = v6[1].n128_u64[0];
          *(__n128 *)uint64_t v19 = v23;
          *BOOL v6 = v31;
          v6[1].n128_u64[0] = v32;
          uint64_t v24 = v19 - (char *)a1 + 24;
          if (v24 >= 25)
          {
            unint64_t v25 = (v24 / 0x18uLL - 2) >> 1;
            int v26 = &a1->n128_u64[3 * v25];
            if (llvm::MachObjectWriter::MachSymbolData::operator<(v26, v19))
            {
              long long v27 = *(_OWORD *)v19;
              unint64_t v34 = *((void *)v19 + 2);
              long long v33 = v27;
              do
              {
                __n128 v28 = v26;
                long long v29 = *(_OWORD *)v26;
                *((void *)v19 + 2) = v26[2];
                *(_OWORD *)uint64_t v19 = v29;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                int v26 = &a1->n128_u64[3 * v25];
                uint64_t v19 = (char *)v28;
              }
              while (llvm::MachObjectWriter::MachSymbolData::operator<(v26, &v33));
              *(_OWORD *)__n128 v28 = v33;
              v28[2] = v34;
            }
          }
        }
      }
      while (v9-- > 2);
    }
  }
}

__n128 sub_1CCBE2EB0(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    BOOL v6 = a3;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - a1) >> 3)))
    {
      uint64_t v10 = (0x5555555555555556 * (((uint64_t)a3 - a1) >> 3)) | 1;
      unint64_t v11 = (__n128 *)(a1 + 24 * v10);
      uint64_t v12 = 0x5555555555555556 * (((uint64_t)a3 - a1) >> 3) + 2;
      if (v12 < a2 && llvm::MachObjectWriter::MachSymbolData::operator<((void *)(a1 + 24 * v10), &v11[1].n128_u64[1]))
      {
        unint64_t v11 = (__n128 *)((char *)v11 + 24);
        uint64_t v10 = v12;
      }
      if (!llvm::MachObjectWriter::MachSymbolData::operator<(v11, v6))
      {
        __n128 v18 = *v6;
        unint64_t v19 = v6[1].n128_u64[0];
        do
        {
          unint64_t v14 = v11;
          __n128 v15 = *v11;
          v6[1].n128_u64[0] = v11[1].n128_u64[0];
          *BOOL v6 = v15;
          if (v8 < v10) {
            break;
          }
          uint64_t v16 = (2 * v10) | 1;
          unint64_t v11 = (__n128 *)(a1 + 24 * v16);
          uint64_t v17 = 2 * v10 + 2;
          if (v17 < a2
            && llvm::MachObjectWriter::MachSymbolData::operator<((void *)(a1 + 24 * v16), &v11[1].n128_u64[1]))
          {
            unint64_t v11 = (__n128 *)((char *)v11 + 24);
            uint64_t v16 = v17;
          }
          BOOL v6 = v14;
          uint64_t v10 = v16;
        }
        while (!llvm::MachObjectWriter::MachSymbolData::operator<(v11, &v18));
        __n128 result = v18;
        v14[1].n128_u64[0] = v19;
        *unint64_t v14 = result;
      }
    }
  }
  return result;
}

void llvm::StringTableBuilder::~StringTableBuilder(llvm::StringTableBuilder *this)
{
}

{
  MEMORY[0x1D25D9CD0](*(void *)this, 8);
}

uint64_t llvm::StringTableBuilder::initSize(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 32);
  if (v1 <= 8) {
    *(void *)(this + 24) = qword_1CFB28F78[v1];
  }
  return this;
}

uint64_t llvm::StringTableBuilder::StringTableBuilder(uint64_t result, unsigned int a2, int a3)
{
  *(void *)(result + 24) = 0;
  *(void *)__n128 result = 0;
  *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(unsigned char *)(result + 40) = 0;
  if (a2 <= 8 && ((0x13Fu >> a2) & 1) != 0) {
    *(void *)(result + 24) = qword_1CFB28F30[a2];
  }
  return result;
}

{
  *(void *)(result + 24) = 0;
  *(void *)__n128 result = 0;
  *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(unsigned char *)(result + 40) = 0;
  if (a2 <= 8 && ((0x13Fu >> a2) & 1) != 0) {
    *(void *)(result + 24) = qword_1CFB28F30[a2];
  }
  return result;
}

void llvm::StringTableBuilder::write(llvm::StringTableBuilder *this, llvm::raw_ostream *a2)
{
  if (*((void *)this + 3)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  llvm::StringTableBuilder::write((unsigned int *)this, (unsigned __int8 *)&v3);
  llvm::raw_ostream::write(a2, (const char *)&v3, 0);
}

unsigned int *llvm::StringTableBuilder::write(unsigned int *this, unsigned __int8 *a2)
{
  uint64_t v3 = this;
  if (this[2])
  {
    uint64_t v4 = this[4];
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = *(void *)this;
      while (1)
      {
        int v7 = *(_DWORD *)(v6 + 12);
        if (v7)
        {
          if (v7 != 1 || *(void *)v6 != -2) {
            goto LABEL_10;
          }
        }
        else if (*(void *)v6 != -1)
        {
          goto LABEL_10;
        }
        v6 += 24;
        v5 -= 24;
        if (!v5) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v6 = *(void *)this;
LABEL_10:
    uint64_t v8 = *(void *)this + 24 * v4;
LABEL_11:
    if (v6 != v8)
    {
      size_t v9 = *(unsigned int *)(v6 + 8);
      if (v9) {
        this = (unsigned int *)memcpy(&a2[*(void *)(v6 + 16)], *(const void **)v6, v9);
      }
      while (1)
      {
        v6 += 24;
        if (v6 == v8) {
          break;
        }
        int v10 = *(_DWORD *)(v6 + 12);
        if (v10)
        {
          if (v10 != 1 || *(void *)v6 != -2) {
            goto LABEL_11;
          }
        }
        else if (*(void *)v6 != -1)
        {
          goto LABEL_11;
        }
      }
    }
  }
LABEL_21:
  int v11 = v3[8];
  if (v11 == 1)
  {
    unsigned int v12 = v3[6];
LABEL_27:
    *(_DWORD *)a2 = v12;
    return this;
  }
  if (v11 == 8)
  {
    unsigned int v12 = bswap32(v3[6]);
    goto LABEL_27;
  }
  return this;
}

void llvm::StringTableBuilder::finalize(llvm::StringTableBuilder *this)
{
}

void llvm::StringTableBuilder::finalizeStringTable(llvm::StringTableBuilder *this, int a2)
{
  *((unsigned char *)this + 40) = 1;
  if (a2)
  {
    uint64_t v3 = *((unsigned int *)this + 2);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)operator new(8 * v3);
      *(void *)&long long v25 = v4;
      *((void *)&v25 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v4;
      int v26 = &v4[v3];
      uint64_t v5 = *((unsigned int *)this + 4);
      if (v5)
      {
        uint64_t v6 = 24 * v5;
        uint64_t v7 = *(void *)this;
        while (1)
        {
          int v8 = *(_DWORD *)(v7 + 12);
          if (v8)
          {
            if (v8 != 1 || *(void *)v7 != -2) {
              goto LABEL_11;
            }
          }
          else if (*(void *)v7 != -1)
          {
            goto LABEL_11;
          }
          v7 += 24;
          v6 -= 24;
          if (!v6) {
            goto LABEL_23;
          }
        }
      }
      uint64_t v7 = *(void *)this;
LABEL_11:
      uint64_t v9 = *(void *)this + 24 * v5;
LABEL_12:
      if (v7 != v9)
      {
        if (v4 >= v26) {
          uint64_t v4 = sub_1CBF63C18((void **)&v25, v7);
        }
        else {
          *v4++ = v7;
        }
        *((void *)&v25 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v4;
        while (1)
        {
          v7 += 24;
          if (v7 == v9) {
            break;
          }
          int v10 = *(_DWORD *)(v7 + 12);
          if (v10)
          {
            if (v10 != 1 || *(void *)v7 != -2) {
              goto LABEL_12;
            }
          }
          else if (*(void *)v7 != -1)
          {
            goto LABEL_12;
          }
        }
      }
LABEL_23:
      int v11 = (uint64_t *)v25;
    }
    else
    {
      int v11 = 0;
      uint64_t v4 = 0;
    }
    sub_1CCBE35E8((uint64_t)v11, v4 - v11, 0);
    uint64_t v12 = *((int *)this + 8);
    if (v12 <= 8) {
      *((void *)this + 3) = qword_1CFB28F78[v12];
    }
    if (v11 != v4)
    {
      unint64_t v13 = 0;
      unint64_t v14 = 0;
      __n128 v15 = (const void ***)v11;
      do
      {
        uint64_t v16 = *v15;
        uint64_t v17 = (char *)**v15;
        unint64_t v18 = *((unsigned int *)*v15 + 2);
        if (v13 < v18
          || v18 && memcmp(&v14[v13 - v18], **v15, *((unsigned int *)*v15 + 2))
          || (uint64_t v21 = (const void *)(*((void *)this + 3) - v18 - (v12 != 6)),
              (v21 & (*((_DWORD *)this + 9) - 1)) != 0))
        {
          unint64_t v19 = (*((void *)this + 3) + (unint64_t)*((unsigned int *)this + 9) - 1)
              / *((unsigned int *)this + 9)
              * *((unsigned int *)this + 9);
          v16[2] = (const void *)v19;
          unint64_t v20 = v19 + v18;
          *((void *)this + 3) = v20;
          if (v12 != 6) {
            *((void *)this + 3) = v20 + 1;
          }
          unint64_t v14 = v17;
          unint64_t v13 = v18;
        }
        else
        {
          v16[2] = v21;
        }
        ++v15;
      }
      while (v15 != (const void ***)v4);
    }
    if (v11) {
      operator delete(v11);
    }
  }
  int v22 = *((_DWORD *)this + 8);
  switch(v22)
  {
    case 3:
      goto LABEL_41;
    case 2:
      goto LABEL_51;
    case 5:
LABEL_41:
      *((void *)this + 3) = (*((void *)this + 3) + 7) & 0xFFFFFFFFFFFFFFF8;
      break;
    case 4:
LABEL_51:
      *((void *)this + 3) = (*((void *)this + 3) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      break;
  }
  if ((v22 & 0xFFFFFFFE) == 4)
  {
    int HashValue = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(" ", 1);
    *(void *)&long long v25 = " ";
    DWORD2(v25) = 1;
    HIDWORD(v25) = HashValue;
    *(void *)(sub_1CD6BDA58((uint64_t *)this, &v25) + 16) = 0;
    int v22 = *((_DWORD *)this + 8);
  }
  if (!v22)
  {
    int v24 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue("", 0);
    *(void *)&long long v25 = "";
    DWORD2(v25) = 0;
    HIDWORD(v25) = v24;
    *(void *)(sub_1CD6BDA58((uint64_t *)this, &v25) + 16) = 0;
  }
}

void llvm::StringTableBuilder::finalizeInOrder(llvm::StringTableBuilder *this)
{
}

uint64_t sub_1CCBE35E8(uint64_t result, unint64_t a2, int a3)
{
  if (a2 >= 2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = result;
    unint64_t v5 = a3;
    while (1)
    {
      unint64_t v6 = *(unsigned int *)(*(void *)v4 + 8);
      if (v5 >= v6) {
        int v7 = -1;
      }
      else {
        int v7 = *(unsigned __int8 *)(**(void **)v4 + v6 + ~v5);
      }
      uint64_t v8 = 0;
      unint64_t v9 = v3;
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *(void *)(v4 + 8 * v10);
        unint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v5 >= v12)
        {
          int v13 = -1;
        }
        else
        {
          int v13 = *(unsigned __int8 *)(*(void *)v11 + ~v5 + v12);
          if (v7 < v13)
          {
            uint64_t v14 = *(void *)(v4 + 8 * v8);
            *(void *)(v4 + 8 * v8++) = v11;
            *(void *)(v4 + 8 * v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v14;
            goto LABEL_13;
          }
        }
        if (v13 < v7)
        {
          --v9;
          uint64_t v15 = *(void *)(v4 + 8 * v9);
          *(void *)(v4 + 8 * v9) = v11;
          *(void *)(v4 + 8 * v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v15;
          continue;
        }
LABEL_13:
        ++v10;
      }
      while (v10 < v9);
      sub_1CCBE35E8(v4, v8, v5);
      __n128 result = sub_1CCBE35E8(v4 + 8 * v9, v3 - v9, v5);
      if (v7 != -1)
      {
        unint64_t v3 = v9 - v8;
        v4 += 8 * v8;
        ++v5;
        if (v9 - v8 > 1) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

_DWORD *llvm::StringTableBuilder::clear(_DWORD *this)
{
  *((unsigned char *)this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  return sub_1CCBE370C(this);
}

_DWORD *sub_1CCBE370C(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CCBE3C90(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(_OWORD **)result;
        uint64_t v3 = 24 * v1;
        do
        {
          _OWORD *v2 = xmmword_1CFAC4A20;
          uint64_t v2 = (_OWORD *)((char *)v2 + 24);
          v3 -= 24;
        }
        while (v3);
      }
      *((void *)result + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    }
  }
  return result;
}

uint64_t llvm::StringTableBuilder::getOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v7 = 0;
  if (sub_1CCBE38EC((uint64_t *)a1, (uint64_t)v6, &v7)) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v4 + 16);
}

unint64_t llvm::StringTableBuilder::add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  *(void *)&long long v7 = a2;
  *((void *)&v7 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = a3;
  uint64_t v8 = 0;
  sub_1CCBE3D44(a1, &v7, &v8, (uint64_t)&v9);
  if (!v10) {
    return *(void *)(v9 + 16);
  }
  unint64_t result = (*(void *)(a1 + 24) + (unint64_t)*(unsigned int *)(a1 + 36) - 1)
         / *(unsigned int *)(a1 + 36)
         * *(unsigned int *)(a1 + 36);
  *(void *)(v9 + 16) = result;
  unint64_t v6 = result + v3;
  if (*(_DWORD *)(a1 + 32) != 6) {
    ++v6;
  }
  *(void *)(a1 + 24) = v6;
  return result;
}

_DWORD *sub_1CCBE384C(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    unint64_t result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 24 * v5;
      do
      {
        *(_OWORD *)unint64_t result = xmmword_1CFAC4A20;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)unint64_t result = 0;
    *((void *)result + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CCBE38EC(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    goto LABEL_21;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  int v8 = *(_DWORD *)(a2 + 12);
  unsigned int v9 = v4 - 1;
  int v10 = 1;
  for (int i = v8; ; int i = v12 + v10++)
  {
    int v12 = i & v9;
    uint64_t v13 = v7 + 24 * (i & v9);
    int v14 = *(_DWORD *)(v13 + 12);
    if (v8 == v14)
    {
      uint64_t v15 = *(const void **)a2;
      uint64_t v16 = *(const void **)v13;
      if (*(void *)v13 == -1)
      {
        if (v15 == (const void *)-1) {
          goto LABEL_20;
        }
      }
      else if (v16 == (const void *)-2)
      {
        if (v15 == (const void *)-2) {
          goto LABEL_20;
        }
      }
      else
      {
        size_t v19 = *(unsigned int *)(v13 + 8);
        int v20 = *(_DWORD *)(a2 + 8);
        if (v20 == v19 && (!v20 || !memcmp(v15, v16, v19)))
        {
LABEL_20:
          uint64_t result = 1;
          goto LABEL_21;
        }
      }
    }
    if (!v14) {
      break;
    }
    if (v14 == 1)
    {
      BOOL v18 = *(void *)v13 == -2;
      goto LABEL_13;
    }
LABEL_22:
    BOOL v18 = 0;
LABEL_13:
    if (v18 && v6 == 0) {
      uint64_t v6 = v13;
    }
  }
  if (*(void *)v13 != -1) {
    goto LABEL_22;
  }
  uint64_t result = 0;
  if (v6) {
    uint64_t v13 = v6;
  }
LABEL_21:
  *a3 = v13;
  return result;
}

uint64_t sub_1CCBE3A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CCBE3ADC(a1, v7);
    uint64_t v9 = 0;
    sub_1CCBE38EC((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 12) || *(void *)a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CCBE3ADC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CCBE3BB8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC4A20;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CCBE3BB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_1CFAC4A20;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    int v9 = *(_DWORD *)(a2 + 12);
    if (!v9)
    {
      if (*(void *)a2 == -1) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t v11 = 0;
      uint64_t result = sub_1CCBE38EC((uint64_t *)v5, a2, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(_OWORD *)a2;
      *((void *)v10 + 2) = *(void *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_8;
    }
    if (v9 != 1 || *(void *)a2 != -2) {
      goto LABEL_7;
    }
LABEL_8:
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1CCBE3C90(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(_OWORD **)result;
      uint64_t v7 = 24 * v2;
      do
      {
        *uint64_t v6 = xmmword_1CFAC4A20;
        uint64_t v6 = (_OWORD *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CCBE384C(v1, v5);
  }
  return result;
}

uint64_t sub_1CCBE3D44@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CCBE38EC((uint64_t *)a1, (uint64_t)a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = sub_1CCBE3A20(a1, (uint64_t)a2, (uint64_t)a2, v12);
    uint64_t v9 = result;
    *(_OWORD *)uint64_t result = *a2;
    *(void *)(result + 16) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

unint64_t *sub_1CCBE3DDC(unint64_t *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  unint64_t v3 = *result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    int v4 = (int64x2_t *)result;
    unint64_t v5 = result[1];
    uint64_t v15 = result + 2;
    uint64_t v6 = 3 * a2;
    uint64_t v7 = (char *)operator new(24 * a2);
    uint64_t v8 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
    if (v5 == v3)
    {
      int64x2_t v9 = vdupq_n_s64(v3);
      char v10 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
    }
    else
    {
      char v10 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
      do
      {
        long long v11 = *(_OWORD *)(v5 - 24);
        *((void *)v10 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(void *)(v5 - 8);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        *(void *)(v5 - 16) = 0;
        *(void *)(v5 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
        *(void *)(v5 - 24) = 0;
        v5 -= 24;
      }
      while (v5 != v3);
      int64x2_t v9 = *v4;
      unint64_t v2 = v4[1].u64[0];
    }
    v4->i64[0] = (uint64_t)v10;
    v4->i64[1] = (uint64_t)v8;
    int64x2_t v13 = v9;
    v4[1].i64[0] = (uint64_t)&v7[8 * v6];
    unint64_t v14 = v2;
    uint64_t v12 = v9.i64[0];
    return (unint64_t *)sub_1CBF4EE0C((uint64_t)&v12);
  }
  return result;
}

int64x2_t *llvm::SubtargetFeatures::SubtargetFeatures(int64x2_t *a1, uint64_t a2, uint64_t a3)
{
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  llvm::SubtargetFeatures::Split(a1, a2, a3);
  return a1;
}

{
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  llvm::SubtargetFeatures::Split(a1, a2, a3);
  return a1;
}

uint64_t llvm::TargetRegistry::targets(llvm::TargetRegistry *this)
{
  return qword_1EBD0A2D0;
}

uint64_t llvm::TargetRegistry::lookupTarget(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(a1 + 23);
  if (v5 < 0) {
    unint64_t v6 = *(void *)(a1 + 8);
  }
  else {
    unint64_t v6 = v5 & 0x7F;
  }
  if (!v6)
  {
    memset(&v26, 0, sizeof(v26));
    uint64_t v21 = llvm::TargetRegistry::lookupTarget((std::string::size_type)a2, (uint64_t)&v26);
    if (v21)
    {
      uint64_t v7 = (uint64_t)v21;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      return v7;
    }
    std::operator+<char>();
    int v22 = std::string::append(&v27, "', see --version and --triple.\n");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v28[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v25 = v28[0];
    *(void *)a3 = v23;
    *(void *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v25;
    *(void *)(a3 + 15) = *(void *)((char *)v28 + 7);
    *(unsigned char *)(a3 + 23) = v24;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
LABEL_28:
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  uint64_t v7 = qword_1EBD0A2D0;
  if (!qword_1EBD0A2D0)
  {
LABEL_25:
    std::operator+<char>();
    int64x2_t v13 = std::string::append(&v26, "'.\n");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    std::string::size_type v16 = v27.__r_.__value_.__r.__words[0];
    *(void *)a3 = v14;
    *(void *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v16;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7);
    *(unsigned char *)(a3 + 23) = v15;
    goto LABEL_28;
  }
  if (v5 < 0) {
    uint64_t v8 = *(void **)a1;
  }
  else {
    uint64_t v8 = (void *)a1;
  }
  if (v5 < 0) {
    size_t v9 = *(void *)(a1 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  BOOL v10 = *(void *)(a1 + 8) != -1 || v5 >= 0;
  if (v9 >= v6) {
    size_t v11 = v6;
  }
  else {
    size_t v11 = v9;
  }
  while (1)
  {
    if (strlen(*(const char **)(v7 + 16)) == v6)
    {
      if (!v10) {
        abort();
      }
      if (!memcmp(v8, *(const void **)(v7 + 16), v11) && v9 == v6) {
        break;
      }
    }
    uint64_t v7 = *(void *)v7;
    if (!v7) {
      goto LABEL_25;
    }
  }
  uint64_t ArchTypeForLLVMName = llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)v8, v6);
  if (ArchTypeForLLVMName)
  {
    ArchName = (char *)llvm::Triple::getArchName(ArchTypeForLLVMName, ArchTypeForLLVMName, 0);
    llvm::Triple::setArchName(a2, ArchName, v20);
  }
  return v7;
}

uint64_t sub_1CCBE419C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 >= v3) {
    size_t v4 = *(void *)(a1 + 8);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    int v5 = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v5) {
      return (v5 >> 31) | 1u;
    }
  }
  if (v3 < v2) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v3 == v2) {
    return 0;
  }
  else {
    return v7;
  }
}

void sub_1CCBE41F8(uint64_t a1)
{
  unint64_t v2 = llvm::dbgs((llvm *)a1);
  llvm::wasm::relocTypetoString((llvm::wasm *)*(unsigned int *)(a1 + 24), (uint64_t)__p, v3);
  if (v15 >= 0) {
    size_t v4 = __p;
  }
  else {
    size_t v4 = (void **)__p[0];
  }
  if (v15 >= 0) {
    size_t v5 = v15 & 0x7F;
  }
  else {
    size_t v5 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v2, (const char *)v4, v5);
  uint64_t v6 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v6) > 4)
  {
    *(unsigned char *)(v6 + 4) = 61;
    *(_DWORD *)uint64_t v6 = 1717980960;
    *((void *)v2 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v2, " Off=", 5uLL);
  }
  sub_1CD098D14(v2, *(void *)a1, 0, 0, 0);
  uint64_t v7 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 15725;
    *(_DWORD *)uint64_t v7 = 2035490860;
    *((void *)v2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", Sym=", 6uLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a1 + 8), v2, 0);
  uint64_t v8 = *((void *)v2 + 4);
  if ((unint64_t)(*((void *)v2 + 3) - v8) > 8)
  {
    *(unsigned char *)(v8 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 61;
    *(void *)uint64_t v8 = *(void *)", Addend=";
    *((void *)v2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", Addend=", 9uLL);
  }
  llvm::raw_ostream::operator<<(v2, *(void *)(a1 + 16));
  size_t v9 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v9 > 0xEuLL)
  {
    qmemcpy(v9, ", FixupSection=", 15);
    BOOL v10 = (void *)(*((void *)v2 + 4) + 15);
    *((void *)v2 + 4) = v10;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", FixupSection=", 0xFuLL);
    BOOL v10 = (void *)*((void *)v2 + 4);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(const void **)(v11 + 200);
  size_t v13 = *(void *)(v11 + 208);
  if (v13 <= *((void *)v2 + 3) - (void)v10)
  {
    if (v13)
    {
      memcpy(v10, v12, v13);
      *((void *)v2 + 4) += v13;
    }
  }
  else
  {
    llvm::raw_ostream::write(v2, (const char *)v12, v13);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_1CCBE4414(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631A00;
  unint64_t v2 = *(char **)(a1 + 576);
  uint64_t v3 = *(unsigned int *)(a1 + 584);
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    do
    {
      size_t v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 8] != v5) {
        free(v5);
      }
      v4 -= 80;
    }
    while (v4);
    unint64_t v2 = *(char **)(a1 + 576);
  }
  if (v2 != (char *)(a1 + 592)) {
    free(v2);
  }
  sub_1CD6BE6EC((char **)(a1 + 304));
  sub_1CD6BE774(a1 + 280);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 280), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 256), 8);
  sub_1CBF995A8((unsigned int *)(a1 + 232));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 232), 8);
  uint64_t v6 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v6) {
    MEMORY[0x1D25D9CE0](v6, 0x1070C40257E1745);
  }
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    MEMORY[0x1D25D9CE0](v7, 0x1070C40257E1745);
  }
  uint64_t v8 = *(void **)(a1 + 192);
  if (v8)
  {
    *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = v8;
    operator delete(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 168), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 144), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 120), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 72), 8);
  size_t v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  BOOL v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(void *)(a1 + 32) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void sub_1CCBE45C0(uint64_t a1)
{
  sub_1CCBE4414(a1);

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CCBE45F8(uint64_t a1)
{
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  sub_1CD3C7F68((_DWORD *)(a1 + 72));
  sub_1CD3C7F68((_DWORD *)(a1 + 120));
  sub_1CD3C7F68((_DWORD *)(a1 + 144));
  sub_1CD3C7F68((_DWORD *)(a1 + 96));
  sub_1CD695B54((_DWORD *)(a1 + 168));
  *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(a1 + 192);
  uint64_t v2 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x1070C40257E1745);
  }
  uint64_t v3 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v3) {
    MEMORY[0x1D25D9CE0](v3, 0x1070C40257E1745);
  }
  int v4 = *(_DWORD *)(a1 + 240);
  if (!v4 && !*(_DWORD *)(a1 + 244)) {
    goto LABEL_21;
  }
  size_t v5 = (void *)(a1 + 232);
  uint64_t v6 = *(unsigned int *)(a1 + 248);
  if (v6 <= 4 * v4 || v6 < 0x41)
  {
    if (!v6)
    {
LABEL_20:
      *(void *)(a1 + 24llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      goto LABEL_21;
    }
    uint64_t v7 = (void *)*v5;
    uint64_t v8 = 32 * v6;
    while (1)
    {
      if (*v7 == -8192) {
        goto LABEL_18;
      }
      if (*v7 != -4096) {
        break;
      }
LABEL_19:
      v7 += 4;
      v8 -= 32;
      if (!v8) {
        goto LABEL_20;
      }
    }
    size_t v9 = (void *)v7[1];
    if (v9)
    {
      void v7[2] = v9;
      operator delete(v9);
    }
LABEL_18:
    *uint64_t v7 = -4096;
    goto LABEL_19;
  }
  sub_1CBF995A8((unsigned int *)(a1 + 232));
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 248))
    {
      MEMORY[0x1D25D9CD0](*v5, 8);
      void *v5 = 0;
      *(void *)(a1 + 24llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      *(_DWORD *)(a1 + 24MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  int v15 = 1 << (33 - __clz(v4 - 1));
  if (v15 <= 64) {
    unsigned int v16 = 64;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 == *(_DWORD *)(a1 + 248))
  {
    *(void *)(a1 + 24llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
    uint64_t v17 = 32 * v16;
    BOOL v18 = *(void **)(a1 + 232);
    do
    {
      void *v18 = -4096;
      v18 += 4;
      v17 -= 32;
    }
    while (v17);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 232), 8);
    unint64_t v19 = (4 * v16 / 3 + 1) | ((unint64_t)(4 * v16 / 3 + 1) >> 1);
    unint64_t v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
    LODWORD(v2llvm::StringTableBuilder::finalizeStringTable(this, 0) = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
    *(_DWORD *)(a1 + 24MEMORY[0x1D25D9CD0](*(void *)this, 8) = v20;
    uint64_t v21 = operator new(32 * v20, (std::align_val_t)8uLL);
    *(void *)(a1 + 232) = v21;
    *(void *)(a1 + 24llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 248);
    if (v22)
    {
      uint64_t v23 = 32 * v22;
      do
      {
        *uint64_t v21 = -4096;
        v21 += 4;
        v23 -= 32;
      }
      while (v23);
    }
  }
LABEL_21:
  sub_1CD6BE958(a1 + 280);
  sub_1CD6BEB18((uint64_t *)(a1 + 304));
  uint64_t v10 = *(unsigned int *)(a1 + 584);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 576);
    uint64_t v12 = 80 * v10;
    do
    {
      size_t v13 = *(void **)(v11 + v12 - 32);
      if ((void *)(v11 + v12 - 8) != v13) {
        free(v13);
      }
      v12 -= 80;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 584) = 0;
  sub_1CD3C7F68((_DWORD *)(a1 + 256));
  double result = 0.0;
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 92llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  return result;
}

uint64_t sub_1CCBE485C(uint64_t a1, uint64_t a2)
{
  int v4 = *(llvm::MCContext **)a2;
  unint64_t v19 = "__indirect_function_table";
  __int16 v21 = 259;
  uint64_t result = llvm::MCContext::lookupSymbol(v4, (const llvm::Twine *)&v19);
  if (result)
  {
    if ((*(_WORD *)(result + 12) & 0x80) != 0)
    {
      int v6 = *(_DWORD *)(result + 8);
      if ((v6 & 8) == 0)
      {
        *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6 | 8;
        unint64_t v19 = (const char *)result;
        uint64_t v7 = *(uint64_t **)(a2 + 64);
        if ((unint64_t)v7 >= *(void *)(a2 + 72))
        {
          uint64_t result = (uint64_t)sub_1CBC13470((void **)(a2 + 56), &v19);
          uint64_t v8 = (void *)result;
        }
        else
        {
          *uint64_t v7 = result;
          uint64_t v8 = v7 + 1;
        }
        *(void *)(a2 + 64) = v8;
      }
    }
  }
  size_t v9 = *(uint64_t ***)(a2 + 56);
  uint64_t v10 = *(uint64_t ***)(a2 + 64);
  if (v9 != v10)
  {
    uint64_t v11 = a1 + 256;
    do
    {
      uint64_t v12 = *v9;
      uint64_t v13 = **v9;
      uint64_t result = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 && (v12[1] & 0x1C00) == 0x800)
      {
        *((_DWORD *)v12 + 2) |= 4u;
        uint64_t result = llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v12[3]);
        uint64_t v13 = *v12 & 7 | result;
        uint64_t *v12 = v13;
      }
      if (result)
      {
        if (*((unsigned char *)v12 + 36)) {
          BOOL v14 = *((_DWORD *)v12 + 8) == 0;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14 && (v12[1] & 0x1C00) != 0x800)
        {
          uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
          unint64_t v19 = (const char *)v15;
          v20[0] = v12;
          uint64_t result = sub_1CCBE54A0(v11, &v19, v20, (uint64_t)v18);
          if (!v18[16])
          {
            uint64_t v16 = *(void *)(v15 + 200);
            uint64_t v17 = *(void *)(v15 + 208);
            __int16 v21 = 1283;
            unint64_t v19 = "section already has a defining function: ";
            v20[1] = v16;
            v20[2] = v17;
            llvm::report_fatal_error((llvm *)&v19, (const llvm::Twine *)1);
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return result;
}

void sub_1CCBE49E4(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *this, llvm::MCFragment *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v14 = *((void *)a4 + 2);
  unint64_t v15 = a6[2];
  llvm::MCAsmLayout::ensureValid(this, a4);
  uint64_t v99 = *((void *)a4 + 4) + *(unsigned int *)(a5 + 8);
  uint64_t v98 = *(llvm::MCContext **)a2;
  uint64_t v16 = a6[1];
  if (!v16)
  {
    unint64_t v100 = v15;
    goto LABEL_9;
  }
  uint64_t v17 = *(void *)(v16 + 16);
  if ((*(_DWORD *)(v14 + 220) & 0xFE) == 2)
  {
    uint64_t v58 = *(void *)(a5 + 16);
    if ((*(unsigned char *)v17 & 4) != 0)
    {
      int v73 = *(uint64_t **)(v17 - 8);
      uint64_t v74 = *v73;
      uint64_t v59 = v73 + 2;
      uint64_t v60 = v74;
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    uint64_t v75 = *(void *)a2;
    v101[0] = (uint64_t)"symbol '";
    unint64_t v102 = v59;
    uint64_t v103 = v60;
    __int16 v104 = 1283;
    uint64_t v76 = "' unsupported subtraction expression used in relocation in code section.";
    goto LABEL_104;
  }
  uint64_t v18 = *(void *)v17;
  unint64_t AssociatedFragment = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    uint64_t v18 = *(void *)v17 & 7 | AssociatedFragment;
    *(void *)uint64_t v17 = v18;
  }
  if (!AssociatedFragment)
  {
    uint64_t v58 = *(void *)(a5 + 16);
    if ((v18 & 4) != 0)
    {
      uint64_t v77 = *(uint64_t **)(v17 - 8);
      uint64_t v78 = *v77;
      unsigned int v61 = v77 + 2;
      uint64_t v62 = v78;
    }
    else
    {
      unsigned int v61 = 0;
      uint64_t v62 = 0;
    }
    uint64_t v75 = (uint64_t)v98;
    v101[0] = (uint64_t)"symbol '";
    unint64_t v102 = v61;
    uint64_t v103 = v62;
    __int16 v104 = 1283;
    uint64_t v76 = "' can not be undefined in a subtraction expression";
    goto LABEL_104;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    unint64_t v20 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    uint64_t v18 = *(void *)v17 & 7 | v20;
    *(void *)uint64_t v17 = v18;
  }
  if (*(void *)(v20 + 16) != v14)
  {
    uint64_t v58 = *(void *)(a5 + 16);
    if ((v18 & 4) != 0)
    {
      int v79 = *(uint64_t **)(v17 - 8);
      uint64_t v80 = *v79;
      unsigned int v63 = v79 + 2;
      uint64_t v64 = v80;
    }
    else
    {
      unsigned int v63 = 0;
      uint64_t v64 = 0;
    }
    uint64_t v75 = (uint64_t)v98;
    v101[0] = (uint64_t)"symbol '";
    unint64_t v102 = v63;
    uint64_t v103 = v64;
    __int16 v104 = 1283;
    uint64_t v76 = "' can not be placed in a different section";
LABEL_104:
    v105[0] = v101;
    v105[2] = v76;
    __int16 v106 = 770;
    llvm::MCContext::reportError(v75, v58, (uint64_t)v105);
    return;
  }
  v105[0] = 0;
  sub_1CCBC6418(this, (uint64_t *)v17, 1, v105);
  unint64_t v100 = v99 + v15 - (unint64_t)v105[0];
LABEL_9:
  uint64_t v21 = *a6;
  uint64_t v22 = *(void *)(*a6 + 16);
  if (*(void *)(v14 + 208) >= 0xBuLL)
  {
    uint64_t v23 = *(uint64_t **)(v14 + 200);
    uint64_t v24 = *v23;
    uint64_t v25 = *(uint64_t *)((char *)v23 + 3);
    if (v24 == 0x72615F74696E692ELL && v25 == 0x79617272615F7469)
    {
      *(unsigned char *)(v22 + 44) = 1;
      return;
    }
  }
  if ((*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800) {
    *(_DWORD *)(v22 + 8) |= 4u;
  }
  *a7 = 0;
  unsigned int v27 = (*(uint64_t (**)(void, void *, uint64_t, uint64_t, BOOL))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a6, a5, v14, v16 != 0);
  if (v27 <= 0x16 && ((1 << v27) & 0x400300) != 0)
  {
    uint64_t v29 = *(void *)v22;
    unint64_t v30 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
    if (!v30 && (*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v22 + 8) |= 4u;
      unint64_t v30 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v22 + 24));
      uint64_t v29 = *(void *)v22 & 7 | v30;
      *(void *)uint64_t v22 = v29;
    }
    if (v30)
    {
      if (*(unsigned char *)(v14 + 220))
      {
        uint64_t v97 = "relocations for function or section offsets are only supported in metadata sections";
        goto LABEL_148;
      }
      unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v22 + 8) |= 4u;
        unint64_t v31 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v22 + 24));
        *(void *)uint64_t v22 = *(void *)v22 & 7 | v31;
      }
      unint64_t v32 = *(void **)(v31 + 16);
      if ((*((_DWORD *)v32 + 55) & 0xFE) == 2)
      {
        v101[0] = *(void *)(v31 + 16);
        v105[0] = 0;
        if (!sub_1CCBE5534((uint64_t *)(a1 + 256), v101, v105)
          || (unint64_t v32 = v105[0], v105[0] == (void *)(*(void *)(a1 + 256) + 16 * *(unsigned int *)(a1 + 272))))
        {
          uint64_t v97 = "section doesn't have defining symbol";
          goto LABEL_148;
        }
      }
      uint64_t v33 = v32[1];
      if (!v33)
      {
        uint64_t v97 = "section symbol is required for relocation";
        goto LABEL_148;
      }
      v105[0] = 0;
      sub_1CCBC6418(this, (uint64_t *)v22, 1, v105);
      v100 += (unint64_t)v105[0];
      uint64_t v22 = v33;
    }
  }
  if (v27 <= 0x18)
  {
    if (v27 == 6) {
      goto LABEL_44;
    }
    if (((1 << v27) & 0x10C1006) != 0)
    {
      v105[0] = "__indirect_function_table";
      __int16 v106 = 259;
      uint64_t v34 = llvm::MCContext::lookupSymbol(v98, (const llvm::Twine *)v105);
      if (v34)
      {
        if (*(unsigned char *)(v34 + 36) && *(_DWORD *)(v34 + 32) == 5 && *(unsigned char *)(v34 + 168) && *(unsigned char *)(v34 + 136) == 112)
        {
          *(_WORD *)(v34 + 12) |= 0x80u;
          int v35 = *(_DWORD *)(v34 + 8);
          if ((v35 & 8) == 0)
          {
            *(_DWORD *)(v34 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v35 | 8;
            v105[0] = (void *)v34;
            uint64_t v36 = *(uint64_t **)(a2 + 64);
            if ((unint64_t)v36 >= *(void *)(a2 + 72))
            {
              uint64_t v37 = sub_1CBC13470((void **)(a2 + 56), v105);
            }
            else
            {
              *uint64_t v36 = v34;
              uint64_t v37 = v36 + 1;
            }
            *(void *)(a2 + 64) = v37;
          }
          goto LABEL_41;
        }
        uint64_t v97 = "__indirect_function_table symbol has wrong type";
      }
      else
      {
        uint64_t v97 = "missing indirect function table symbol";
      }
LABEL_148:
      llvm::report_fatal_error((llvm *)v97, (const llvm::Twine *)1);
    }
  }
LABEL_41:
  if ((*(unsigned char *)v22 & 4) == 0 || !**(void **)(v22 - 8))
  {
    uint64_t v97 = "relocations against un-named temporaries are not yet supported by wasm";
    goto LABEL_148;
  }
  *(_DWORD *)(v22 + 8) |= 0x200u;
LABEL_44:
  int v38 = *(unsigned __int16 *)(v21 + 1);
  if (v38 == 129 || v38 == 2) {
    *(unsigned char *)(v22 + 45) = 1;
  }
  int v40 = *(unsigned __int8 *)(v14 + 220);
  int v41 = v40 & 0xFC;
  BOOL v43 = (v40 - 15) < 6 || v41 == 4 || v41 == 8;
  if (v43 || (v40 - 12) <= 2)
  {
    __n128 v45 = *(void **)(a1 + 56);
    unint64_t v44 = *(void *)(a1 + 64);
    if ((unint64_t)v45 >= v44)
    {
      __n128 v47 = *(void **)(a1 + 48);
      unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * (v45 - v47) + 1;
      if (v48 > 0x666666666666666) {
        goto LABEL_141;
      }
      unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (void)v47) >> 3);
      if (2 * v49 > v48) {
        unint64_t v48 = 2 * v49;
      }
      if (v49 >= 0x333333333333333) {
        unint64_t v50 = 0x666666666666666;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 > 0x666666666666666) {
          goto LABEL_145;
        }
        __n128 v51 = (char *)operator new(40 * v50);
      }
      else
      {
        __n128 v51 = 0;
      }
      unint64_t v52 = &v51[8 * (v45 - v47)];
      *(void *)unint64_t v52 = v99;
      *((void *)v52 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v22;
      *((void *)v52 + 2) = v100;
      *((_DWORD *)v52 + 6) = v27;
      *((void *)v52 + 4) = v14;
      __n128 v46 = v52 + 40;
      if (v45 != v47)
      {
        do
        {
          long long v53 = *(_OWORD *)(v45 - 5);
          long long v54 = *(_OWORD *)(v45 - 3);
          *((void *)v52 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v45 - 1);
          *(_OWORD *)(v52 - 24) = v54;
          *(_OWORD *)(v52 - 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v53;
          v52 -= 40;
          v45 -= 5;
        }
        while (v45 != v47);
        __n128 v45 = *(void **)(a1 + 48);
      }
      *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v52;
      *(void *)(a1 + 56) = v46;
      *(void *)(a1 + 64) = &v51[40 * v50];
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *__n128 v45 = v99;
      v45[1] = v22;
      v45[2] = v100;
      *((_DWORD *)v45 + 6) = v27;
      __n128 v46 = v45 + 5;
      v45[4] = v14;
    }
    *(void *)(a1 + 56) = v46;
    return;
  }
  if ((*(_DWORD *)(v14 + 220) & 0xFE) != 2)
  {
    v101[0] = v14;
    uint64_t v66 = *(void *)(a1 + 232);
    uint64_t v65 = a1 + 232;
    v105[0] = 0;
    char v67 = sub_1CBF98030(v66, *(_DWORD *)(v65 + 16), v14, v105);
    uint64_t v68 = v105[0];
    if (v67)
    {
      unint64_t v71 = (char *)v105[0][2];
      unint64_t v69 = v105[0][3];
      uint64_t v70 = (char **)(v105[0] + 2);
      if ((unint64_t)v71 < v69)
      {
        *(void *)unint64_t v71 = v99;
        *((void *)v71 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v22;
        *((void *)v71 + 2) = v100;
        *((_DWORD *)v71 + 6) = v27;
        unint64_t v72 = v71 + 40;
        *((void *)v71 + 4) = v14;
        goto LABEL_131;
      }
      int v86 = (unsigned char *)v105[0][1];
    }
    else
    {
      uint64_t v68 = sub_1CCBE5750(v65, v101, v105[0]);
      int v86 = 0;
      unint64_t v71 = 0;
      unint64_t v69 = 0;
      void *v68 = v14;
      v68[1] = 0;
      v68[3] = 0;
      char v68[2] = 0;
      uint64_t v70 = (char **)(v68 + 2);
    }
    unint64_t v87 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v86) >> 3) + 1;
    if (v87 > 0x666666666666666) {
      goto LABEL_141;
    }
    unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (void)v86) >> 3);
    if (2 * v88 > v87) {
      unint64_t v87 = 2 * v88;
    }
    if (v88 >= 0x333333333333333) {
      unint64_t v89 = 0x666666666666666;
    }
    else {
      unint64_t v89 = v87;
    }
    if (v89)
    {
      if (v89 > 0x666666666666666) {
        goto LABEL_145;
      }
      unint64_t v90 = (char *)operator new(40 * v89);
    }
    else
    {
      unint64_t v90 = 0;
    }
    char v91 = &v90[8 * ((v71 - v86) >> 3)];
    *(void *)char v91 = v99;
    *((void *)v91 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v22;
    *((void *)v91 + 2) = v100;
    *((_DWORD *)v91 + 6) = v27;
    *((void *)v91 + 4) = v14;
    unint64_t v72 = v91 + 40;
    if (v71 != v86)
    {
      do
      {
        long long v92 = *(_OWORD *)(v71 - 40);
        long long v93 = *(_OWORD *)(v71 - 24);
        *((void *)v91 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v71 - 1);
        *(_OWORD *)(v91 - 24) = v93;
        *(_OWORD *)(v91 - 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v92;
        v91 -= 40;
        v71 -= 40;
      }
      while (v71 != v86);
      int v86 = (unsigned char *)v68[1];
    }
    v68[1] = v91;
    uint64_t *v70 = v72;
    v68[3] = &v90[40 * v89];
    if (v86) {
      operator delete(v86);
    }
LABEL_131:
    uint64_t *v70 = v72;
    return;
  }
  unint64_t v56 = *(void **)(a1 + 32);
  unint64_t v55 = *(void *)(a1 + 40);
  if ((unint64_t)v56 >= v55)
  {
    BOOL v81 = *(void **)(a1 + 24);
    unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * (v56 - v81) + 1;
    if (v82 <= 0x666666666666666)
    {
      unint64_t v83 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (void)v81) >> 3);
      if (2 * v83 > v82) {
        unint64_t v82 = 2 * v83;
      }
      if (v83 >= 0x333333333333333) {
        unint64_t v84 = 0x666666666666666;
      }
      else {
        unint64_t v84 = v82;
      }
      if (!v84)
      {
        unint64_t v85 = 0;
        goto LABEL_133;
      }
      if (v84 <= 0x666666666666666)
      {
        unint64_t v85 = (char *)operator new(40 * v84);
LABEL_133:
        unint64_t v94 = &v85[8 * (v56 - v81)];
        *(void *)unint64_t v94 = v99;
        *((void *)v94 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v22;
        *((void *)v94 + 2) = v100;
        *((_DWORD *)v94 + 6) = v27;
        *((void *)v94 + 4) = v14;
        __n128 v57 = v94 + 40;
        if (v56 != v81)
        {
          do
          {
            long long v95 = *(_OWORD *)(v56 - 5);
            long long v96 = *(_OWORD *)(v56 - 3);
            *((void *)v94 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v56 - 1);
            *(_OWORD *)(v94 - 24) = v96;
            *(_OWORD *)(v94 - 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v95;
            v94 -= 40;
            v56 -= 5;
          }
          while (v56 != v81);
          unint64_t v56 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 24) = v94;
        *(void *)(a1 + 32) = v57;
        *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = &v85[40 * v84];
        if (v56) {
          operator delete(v56);
        }
        goto LABEL_138;
      }
LABEL_145:
      sub_1CB833614();
    }
LABEL_141:
    abort();
  }
  *unint64_t v56 = v99;
  v56[1] = v22;
  v56[2] = v100;
  *((_DWORD *)v56 + 6) = v27;
  __n128 v57 = v56 + 5;
  char v56[4] = v14;
LABEL_138:
  *(void *)(a1 + 32) = v57;
}

uint64_t sub_1CCBE534C(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v10 = *(void *)(a1 + 936);
  int v11 = 1;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = &v10;
  if (!*(unsigned char *)(a1 + 932)) {
    return sub_1CCBE5928(a1, a2, a3, 0);
  }
  uint64_t v6 = sub_1CCBE5928(a1, a2, a3, 1);
  uint64_t v8 = *(void *)(a1 + 944);
  int v9 = 1;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = &v8;
  return sub_1CCBE5928(a1, a2, a3, 2) + v6;
}

void sub_1CCBE5408(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    *(void *)a1 = operator new(72 * v4, (std::align_val_t)8uLL);
    sub_1CD6BE58C(a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t sub_1CCBE54A0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CCBE5534((uint64_t *)a1, a2, &v12);
  int v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CCBE55D0(a1, (uint64_t)a2, a2, v12);
    int v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1CCBE5534(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v9 = 0;
      int v10 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          int v9 = v7;
        }
        unsigned int v13 = v6 + v10++;
        unsigned int v6 = v13 & v5;
        uint64_t v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_10;
        }
      }
      uint64_t result = 0;
      if (v9) {
        uint64_t v7 = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_10:
  *a3 = v7;
  return result;
}

void *sub_1CCBE55D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CCBE5684(a1, v7);
    int v9 = 0;
    sub_1CCBE5534((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CCBE5684(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD6BEC2C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1CCBE5750(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(32 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 32 * v15;
      do
      {
        *uint64_t v14 = -4096;
        v14 += 4;
        v16 -= 32;
      }
      while (v16);
    }
    if (v6)
    {
      int v17 = 0;
      uint64_t v18 = 32 * v6;
      uint64_t v19 = v9;
      do
      {
        uint64_t v20 = *(void *)v19;
        if ((*(void *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v25 = 0;
          sub_1CBF98030(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          uint64_t v21 = v25;
          uint64_t *v25 = v20;
          v21[1] = 0;
          void v21[2] = 0;
          v21[3] = 0;
          *(_OWORD *)(v21 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(_OWORD *)(v19 + 8);
          v21[3] = *(void *)(v19 + 24);
          ++v17;
          *(void *)(v19 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
          *(void *)(v19 + 16) = 0;
          *(void *)(v19 + 24) = 0;
          *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v17;
        }
        v19 += 32;
        v18 -= 32;
      }
      while (v18);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    uint64_t v22 = *(unsigned int *)(a1 + 16);
    if (v22)
    {
      uint64_t v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 4;
      }
      while (4 * v22 != v23);
    }
  }
  sub_1CBF98030((uint64_t)v14, v22, *a2, &v24);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CCBE5928(uint64_t a1, void *a2, uint64_t **a3, int a4)
{
  uint64_t v825 = *MEMORY[0x1E4F143B8];
  int v7 = **(void ***)(a1 + 8);
  uint64_t v8 = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
  uint64_t v750 = v7[4];
  uint64_t v751 = v8;
  uint64_t v749 = v7[2];
  *(_DWORD *)(a1 + 92MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(a1 + 192);
  v810 = v812;
  uint64_t v811 = 0x400000000;
  v807 = v809;
  uint64_t v808 = 0x400000000;
  v804 = v806;
  uint64_t v805 = 0x400000000;
  v801 = v803;
  uint64_t v802 = 0x400000000;
  v798 = &v800;
  uint64_t v799 = 0x200000000;
  v795 = v797;
  uint64_t v796 = 0x100000000;
  v792 = v794;
  uint64_t v793 = 0x100000000;
  v789 = v791;
  uint64_t v790 = 0x400000000;
  v786 = v788;
  uint64_t v787 = 0x200000000;
  v770 = 0;
  unint64_t v771 = 0;
  v769 = (uint64_t *)&v770;
  v757 = a2;
  int v765 = a4;
  if (a4 == 2) {
    goto LABEL_2;
  }
  v772[0] = "env";
  v772[1] = 3;
  v772[2] = "__linear_memory";
  v772[3] = 15;
  LOBYTE(v773) = 2;
  char v774 = 4 * (*(unsigned char *)(*(void *)(a1 + 16) + 8) & 1);
  unint64_t v400 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v772);
  uint64_t v401 = (char *)v804 + 72 * v805;
  *(_OWORD *)uint64_t v401 = *(_OWORD *)v400;
  uint64_t v402 = *(void *)(v400 + 64);
  long long v403 = *(_OWORD *)(v400 + 48);
  long long v404 = *(_OWORD *)(v400 + 16);
  *((_OWORD *)v401 + 2) = *(_OWORD *)(v400 + 32);
  *((_OWORD *)v401 + 3) = v403;
  *((void *)v401 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v402;
  *((_OWORD *)v401 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v404;
  LODWORD(v805) = v805 + 1;
  unsigned int v405 = (const llvm::MCSymbol **)a2[7];
  unsigned int v406 = (const llvm::MCSymbol **)a2[8];
  if (v405 == v406) {
    goto LABEL_936;
  }
  unint64_t v747 = (unint64_t)&v822;
  do
  {
    unsigned int v407 = *v405;
    int v408 = *((unsigned __int8 *)*v405 + 36);
    int v409 = *((_DWORD *)*v405 + 8);
    if (*((unsigned char *)*v405 + 36)) {
      BOOL v410 = v409 == 0;
    }
    else {
      BOOL v410 = 0;
    }
    if (v410)
    {
      Baseuint64_t Symbol = (uint64_t *)llvm::MCAsmLayout::getBaseSymbol(a3, *v405);
      if (!BaseSymbol)
      {
        uint64_t v738 = sub_1CD6ACAC0(v407);
        __int16 v817 = 261;
        *(void *)v813 = v738;
        uint64_t v814 = v739;
        v820[0] = ": absolute addressing not supported!";
        LOWORD(v823) = 259;
        v736 = (uint64_t *)v820;
LABEL_1043:
        sub_1CD3E3950((uint64_t *)v813, v736, (uint64_t)v777);
        goto LABEL_1044;
      }
      sub_1CCBEA3A0(a1, BaseSymbol);
      int v408 = *((unsigned __int8 *)v407 + 36);
      int v409 = *((_DWORD *)v407 + 8);
    }
    if (v408) {
      BOOL v412 = v409 == 4;
    }
    else {
      BOOL v412 = 0;
    }
    if (v412)
    {
      v820[0] = &v821;
      v820[1] = (void *)0x100000000;
      v822 = v824;
      uint64_t v823 = 0x400000000;
      v824[4] = 0;
      uint64_t v421 = *((void *)v407 + 15);
      if (v421)
      {
        sub_1CD59F0BC((uint64_t)v820, *((void *)v407 + 15));
        sub_1CD59F0BC((uint64_t)&v822, v421 + 24);
      }
      uint64_t v422 = *(unsigned int *)(a1 + 312);
      sub_1CD6BE664((uint64_t)v813, v820);
      uint64_t v819 = v422;
      sub_1CD6BF68C((uint64_t)v777, v813);
      DWORD2(v78llvm::StringTableBuilder::finalizeStringTable(this, 1) = v819;
      sub_1CD6BEE4C((uint64_t)&v775, a1 + 280, (uint64_t)v777, (_DWORD *)&v781 + 2);
      if (v778[1] != &v780) {
        free(v778[1]);
      }
      if (v777[0] != v778) {
        free(v777[0]);
      }
      if (v816 != &v818) {
        free(v816);
      }
      if (*(uint64_t **)v813 != &v815) {
        free(*(void **)v813);
      }
      if (v776) {
        sub_1CD6BEDC0(a1 + 304, v820);
      }
      int v423 = *(_DWORD *)(v775 + 64);
      v777[0] = v407;
      *((_DWORD *)sub_1CD40EB18(a1 + 72, (uint64_t *)v777) + 2) = v423;
      if (v822 != v824) {
        free(v822);
      }
      if (v820[0] != &v821) {
        free(v820[0]);
      }
    }
    int v413 = *((_DWORD *)v407 + 2);
    if ((v413 & 1) == 0)
    {
      uint64_t v414 = *(void *)v407;
      unint64_t v415 = *(void *)v407 & 0xFFFFFFFFFFFFFFF8;
      if ((*((_DWORD *)v407 + 2) & 0x1C00) == 0x800 && v415 == 0)
      {
        *((_DWORD *)v407 + 2) = v413 | 4;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v407 + 3));
        uint64_t v414 = *(void *)v407 & 7 | AssociatedFragment;
        *(void *)unsigned int v407 = v414;
        if (AssociatedFragment) {
          goto LABEL_627;
        }
      }
      else if (v415)
      {
        goto LABEL_627;
      }
      if (*((unsigned char *)v407 + 42)) {
        goto LABEL_627;
      }
      int v417 = *((_DWORD *)v407 + 8);
      if (*((unsigned char *)v407 + 36)) {
        BOOL v418 = v417 == 0;
      }
      else {
        BOOL v418 = 0;
      }
      if (v418)
      {
        v778[0] = 0;
        v778[1] = 0;
        if (*((unsigned char *)v407 + 64))
        {
          v426 = (const char *)*((void *)v407 + 6);
          uint64_t v425 = *((void *)v407 + 7);
        }
        else
        {
          uint64_t v425 = 3;
          v426 = "env";
        }
        v777[0] = (void *)v426;
        v777[1] = (void *)v425;
        if (*((unsigned char *)v407 + 88))
        {
          v431 = (void *)*((void *)v407 + 9);
          v432 = (void *)*((void *)v407 + 10);
        }
        else if ((*(unsigned char *)v407 & 4) != 0)
        {
          v437 = (void **)*((void *)v407 - 1);
          v438 = *v437;
          v431 = v437 + 2;
          v432 = v438;
        }
        else
        {
          v431 = 0;
          v432 = 0;
        }
        v778[0] = v431;
        v778[1] = v432;
        LOBYTE(v779) = 0;
        *(void *)v813 = v407;
        LODWORD(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = *((_DWORD *)sub_1CD40EB18(a1 + 72, (uint64_t *)v813) + 2);
        unint64_t v439 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v777);
        v440 = (char *)v804 + 72 * v805;
        *(_OWORD *)v440 = *(_OWORD *)v439;
        uint64_t v441 = *(void *)(v439 + 64);
        long long v442 = *(_OWORD *)(v439 + 48);
        long long v443 = *(_OWORD *)(v439 + 16);
        *((_OWORD *)v440 + 2) = *(_OWORD *)(v439 + 32);
        *((_OWORD *)v440 + 3) = v442;
        *((void *)v440 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v441;
        *((_OWORD *)v440 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v443;
        LODWORD(v805) = v805 + 1;
        int v444 = *(_DWORD *)(a1 + 912);
        *(_DWORD *)(a1 + 912) = v444 + 1;
LABEL_696:
        *(void *)v813 = v407;
        *((_DWORD *)sub_1CD40EB18(a1 + 120, (uint64_t *)v813) + 2) = v444;
        goto LABEL_627;
      }
      if (*((unsigned char *)v407 + 36) && v417 == 2)
      {
        if (*((unsigned char *)v407 + 40))
        {
          v737 = "undefined global symbol cannot be weak";
          goto LABEL_606;
        }
        *(_OWORD *)v777 = 0u;
        *(_OWORD *)v778 = 0u;
        if (*((unsigned char *)v407 + 88))
        {
          uint64_t v427 = (void *)*((void *)v407 + 9);
          uint64_t v428 = (void *)*((void *)v407 + 10);
        }
        else if ((v414 & 4) != 0)
        {
          v445 = (void **)*((void *)v407 - 1);
          uint64_t v446 = *v445;
          uint64_t v427 = v445 + 2;
          uint64_t v428 = v446;
        }
        else
        {
          uint64_t v427 = 0;
          uint64_t v428 = 0;
        }
        v778[0] = v427;
        v778[1] = v428;
        LOBYTE(v779) = 3;
        if (*((unsigned char *)v407 + 64))
        {
          int v448 = (const char *)*((void *)v407 + 6);
          uint64_t v447 = *((void *)v407 + 7);
        }
        else
        {
          uint64_t v447 = 3;
          int v448 = "env";
        }
        v777[0] = (void *)v448;
        v777[1] = (void *)v447;
        LOWORD(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = *((_WORD *)v407 + 64);
        unint64_t v449 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v777);
        unint64_t v450 = (char *)v804 + 72 * v805;
        *(_OWORD *)unint64_t v450 = *(_OWORD *)v449;
        uint64_t v451 = *(void *)(v449 + 64);
        long long v452 = *(_OWORD *)(v449 + 48);
        long long v453 = *(_OWORD *)(v449 + 16);
        *((_OWORD *)v450 + 2) = *(_OWORD *)(v449 + 32);
        *((_OWORD *)v450 + 3) = v452;
        *((void *)v450 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v451;
        *((_OWORD *)v450 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v453;
        LODWORD(v805) = v805 + 1;
        int v444 = *(_DWORD *)(a1 + 916);
        *(_DWORD *)(a1 + 916) = v444 + 1;
        goto LABEL_696;
      }
      if (*((unsigned char *)v407 + 36) && v417 == 4)
      {
        if (*((unsigned char *)v407 + 40))
        {
          v737 = "undefined tag symbol cannot be weak";
          goto LABEL_606;
        }
        v778[0] = 0;
        v778[1] = 0;
        if (*((unsigned char *)v407 + 64))
        {
          v430 = (const char *)*((void *)v407 + 6);
          uint64_t v429 = *((void *)v407 + 7);
        }
        else
        {
          uint64_t v429 = 3;
          v430 = "env";
        }
        v777[0] = (void *)v430;
        v777[1] = (void *)v429;
        if (*((unsigned char *)v407 + 88))
        {
          v433 = (void *)*((void *)v407 + 9);
          v434 = (void *)*((void *)v407 + 10);
        }
        else if ((*(unsigned char *)v407 & 4) != 0)
        {
          v454 = (void **)*((void *)v407 - 1);
          v455 = *v454;
          v433 = v454 + 2;
          v434 = v455;
        }
        else
        {
          v433 = 0;
          v434 = 0;
        }
        v778[0] = v433;
        v778[1] = v434;
        LOBYTE(v779) = 4;
        *(void *)v813 = v407;
        LODWORD(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = *((_DWORD *)sub_1CD40EB18(a1 + 72, (uint64_t *)v813) + 2);
        unint64_t v456 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v777);
        v457 = (char *)v804 + 72 * v805;
        *(_OWORD *)v457 = *(_OWORD *)v456;
        uint64_t v458 = *(void *)(v456 + 64);
        long long v459 = *(_OWORD *)(v456 + 48);
        long long v460 = *(_OWORD *)(v456 + 16);
        *((_OWORD *)v457 + 2) = *(_OWORD *)(v456 + 32);
        *((_OWORD *)v457 + 3) = v459;
        *((void *)v457 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v458;
        *((_OWORD *)v457 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v460;
        LODWORD(v805) = v805 + 1;
        int v444 = *(_DWORD *)(a1 + 924);
        *(_DWORD *)(a1 + 924) = v444 + 1;
        goto LABEL_696;
      }
      if (*((unsigned char *)v407 + 36) && v417 == 5)
      {
        if (*((unsigned char *)v407 + 40))
        {
          v737 = "undefined table symbol cannot be weak";
          goto LABEL_606;
        }
        v778[0] = 0;
        v778[1] = 0;
        if (*((unsigned char *)v407 + 64))
        {
          size_t v420 = (const char *)*((void *)v407 + 6);
          uint64_t v419 = *((void *)v407 + 7);
        }
        else
        {
          uint64_t v419 = 3;
          size_t v420 = "env";
        }
        v777[0] = (void *)v420;
        v777[1] = (void *)v419;
        if (*((unsigned char *)v407 + 88))
        {
          v435 = (void *)*((void *)v407 + 9);
          v436 = (void *)*((void *)v407 + 10);
        }
        else if ((*(unsigned char *)v407 & 4) != 0)
        {
          v461 = (void **)*((void *)v407 - 1);
          v462 = *v461;
          v435 = v461 + 2;
          v436 = v462;
        }
        else
        {
          v435 = 0;
          v436 = 0;
        }
        v778[0] = v435;
        v778[1] = v436;
        LOBYTE(v779) = 1;
        long long v463 = *(_OWORD *)((char *)v407 + 152);
        long long v780 = *(_OWORD *)((char *)v407 + 136);
        long long v781 = v463;
        unint64_t v464 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v777);
        v465 = (char *)v804 + 72 * v805;
        *(_OWORD *)v465 = *(_OWORD *)v464;
        uint64_t v466 = *(void *)(v464 + 64);
        long long v467 = *(_OWORD *)(v464 + 48);
        long long v468 = *(_OWORD *)(v464 + 16);
        *((_OWORD *)v465 + 2) = *(_OWORD *)(v464 + 32);
        *((_OWORD *)v465 + 3) = v467;
        *((void *)v465 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v466;
        *((_OWORD *)v465 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v468;
        LODWORD(v805) = v805 + 1;
        int v444 = *(_DWORD *)(a1 + 920);
        *(_DWORD *)(a1 + 92llvm::StringTableBuilder::finalizeStringTable(this, 0) = v444 + 1;
        goto LABEL_696;
      }
    }
LABEL_627:
    ++v405;
  }
  while (v405 != v406);
  v651 = (uint64_t *)a2[7];
  for (int i = (uint64_t *)v757[8]; v651 != i; ++v651)
  {
    uint64_t v653 = *v651;
    if (*(unsigned char *)(*v651 + 45))
    {
      v654 = 0;
      v655 = 0;
      v778[0] = 0;
      v778[1] = 0;
      v656 = "GOT.mem";
      if (*(unsigned char *)(v653 + 36) != 0 && *(_DWORD *)(v653 + 32) == 0) {
        v656 = "GOT.func";
      }
      uint64_t v657 = 7;
      if (*(unsigned char *)(v653 + 36) != 0 && *(_DWORD *)(v653 + 32) == 0) {
        uint64_t v657 = 8;
      }
      v777[0] = (void *)v656;
      v777[1] = (void *)v657;
      if ((*(unsigned char *)v653 & 4) != 0)
      {
        v658 = *(void ***)(v653 - 8);
        v659 = *v658;
        v654 = v658 + 2;
        v655 = v659;
      }
      v778[0] = v654;
      v778[1] = v655;
      LOBYTE(v779) = 3;
      LOWORD(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = 383;
      unint64_t v660 = sub_1CC1B4828((uint64_t)&v804, (unint64_t)v777);
      v661 = (char *)v804 + 72 * v805;
      *(_OWORD *)v661 = *(_OWORD *)v660;
      uint64_t v662 = *(void *)(v660 + 64);
      long long v663 = *(_OWORD *)(v660 + 48);
      long long v664 = *(_OWORD *)(v660 + 16);
      *((_OWORD *)v661 + 2) = *(_OWORD *)(v660 + 32);
      *((_OWORD *)v661 + 3) = v663;
      *((void *)v661 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v662;
      *((_OWORD *)v661 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v664;
      LODWORD(v805) = v805 + 1;
      int v665 = *(_DWORD *)(a1 + 916);
      *(_DWORD *)(a1 + 916) = v665 + 1;
      *(void *)v813 = v653;
      *((_DWORD *)sub_1CD40EB18(a1 + 144, (uint64_t *)v813) + 2) = v665;
      a4 = v765;
    }
  }
LABEL_936:
  a2 = v757;
LABEL_2:
  unint64_t v10 = (uint64_t *)a2[4];
  uint64_t v9 = (uint64_t *)a2[5];
  if (v10 != v9)
  {
    unint64_t v11 = 0;
    unint64_t v747 = a1 + 592;
    v762 = v9;
    while (1)
    {
      uint64_t v12 = *v10;
      uint64_t v14 = *(void **)(*v10 + 200);
      unint64_t v13 = *(void *)(*v10 + 208);
      if (a4 == 2) {
        break;
      }
      if (a4 != 1) {
        goto LABEL_11;
      }
      if (v13 >= 4)
      {
        if (*(_DWORD *)((char *)v14 + v13 - 4) == 1870095406) {
          goto LABEL_93;
        }
        goto LABEL_11;
      }
LABEL_16:
      if ((*(_DWORD *)(v12 + 220) & 0xFE) != 2)
      {
        int v16 = *(_DWORD *)(v12 + 220);
        int v17 = *(_DWORD *)(v12 + 220) & 0xFC;
        BOOL v19 = (v16 - 15) < 6 || v17 == 4 || v17 == 8;
        if (v19 || (v16 - 12) <= 2)
        {
          unsigned int v20 = *(_DWORD *)(a1 + 584);
          char v21 = *(unsigned char *)(v12 + 24);
          uint64_t v22 = *(unsigned int *)(a1 + 588);
          uint64_t v766 = v20;
          if (v20 >= v22)
          {
            if (v22 == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v91 = (2 * v22) | 1;
            if (v91 >= 0xFFFFFFFF) {
              uint64_t v92 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v92 = v91;
            }
            long long v93 = (char *)malloc_type_malloc(80 * v92, 0x4065EBACuLL);
            if (!v93) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            uint64_t v25 = v93;
            unint64_t v94 = &v93[80 * *(unsigned int *)(a1 + 584)];
            *((_OWORD *)v94 + 3) = 0u;
            *((_OWORD *)v94 + 4) = 0u;
            *((_OWORD *)v94 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0u;
            *((_OWORD *)v94 + 2) = 0u;
            *(_OWORD *)unint64_t v94 = 0u;
            *((void *)v94 + 6) = v94 + 72;
            *(_OWORD *)(v94 + 56) = xmmword_1CDB159A0;
            long long v95 = *(char **)(a1 + 576);
            int v96 = *(_DWORD *)(a1 + 584);
            if (v96)
            {
              int v745 = v92;
              unint64_t v754 = v11;
              uint64_t v97 = &v95[80 * v96];
              uint64_t v98 = (uint64_t)(v93 + 48);
              uint64_t v99 = (uint64_t)(v95 + 48);
              do
              {
                long long v100 = *(_OWORD *)(v99 - 48);
                long long v101 = *(_OWORD *)(v99 - 16);
                *(_OWORD *)(v98 - 32) = *(_OWORD *)(v99 - 32);
                *(_OWORD *)(v98 - 16) = v101;
                *(_OWORD *)(v98 - 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v100;
                *(void *)uint64_t v98 = v98 + 24;
                *(_OWORD *)(v98 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = xmmword_1CDB159A0;
                if (*(void *)(v99 + 8)) {
                  sub_1CC1B8518(v98, v99);
                }
                uint64_t v102 = v99 - 48;
                v98 += 80;
                v99 += 80;
              }
              while ((char *)(v102 + 80) != v97);
              long long v95 = *(char **)(a1 + 576);
              uint64_t v103 = *(unsigned int *)(a1 + 584);
              if (v103)
              {
                uint64_t v104 = 80 * v103;
                LODWORD(v92) = v745;
                do
                {
                  uint64_t v105 = *(char **)&v95[v104 - 32];
                  if (&v95[v104 - 8] != v105) {
                    free(v105);
                  }
                  v104 -= 80;
                }
                while (v104);
                long long v95 = *(char **)(a1 + 576);
                unint64_t v11 = v754;
              }
              else
              {
                unint64_t v11 = v754;
                LODWORD(v92) = v745;
              }
            }
            if (v95 != (char *)v747) {
              free(v95);
            }
            *(void *)(a1 + 576) = v25;
            *(_DWORD *)(a1 + 58MEMORY[0x1D25D9CD0](*(void *)this, 8) = v92;
            unsigned int v24 = *(_DWORD *)(a1 + 584) + 1;
            *(_DWORD *)(a1 + 584) = v24;
          }
          else
          {
            uint64_t v23 = (_OWORD *)(*(void *)(a1 + 576) + 80 * v20);
            v23[3] = 0u;
            uint64_t v23[4] = 0u;
            v23[1] = 0u;
            _OWORD v23[2] = 0u;
            *uint64_t v23 = 0u;
            *((void *)v23 + 6) = (char *)v23 + 72;
            *(_OWORD *)((char *)v23 + 56) = xmmword_1CDB159A0;
            unsigned int v24 = *(_DWORD *)(a1 + 584) + 1;
            *(_DWORD *)(a1 + 584) = v24;
            uint64_t v25 = *(char **)(a1 + 576);
          }
          uint64_t v26 = (v11 + (1 << v21) - 1) & -(uint64_t)(1 << v21);
          unsigned int v27 = &v25[80 * v24];
          *((void *)v27 - 9) = v14;
          *((void *)v27 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v13;
          *((_DWORD *)v27 - 14) = *(unsigned __int8 *)(v12 + 252);
          *((void *)v27 - 6) = v26;
          *((void *)v27 - 1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v12;
          unint64_t v28 = *((void *)v27 - 3);
          unint64_t v29 = (v28 + (1 << *(unsigned char *)(v12 + 24)) - 1) & -(uint64_t)(1 << *(unsigned char *)(v12 + 24));
          if (v28 == v29)
          {
            unint64_t v29 = *((void *)v27 - 3);
          }
          else
          {
            if (v28 <= v29)
            {
              if (*((void *)v27 - 2) < v29) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              if (v29 != v28) {
                bzero((void *)(*((void *)v27 - 4) + v28), v29 - v28);
              }
            }
            *((void *)v27 - 3) = v29;
          }
          uint64_t v30 = *(void *)(v12 + 112);
          if (v30 == v12 + 104)
          {
LABEL_51:
            *((_DWORD *)v27 - 1llvm::StringTableBuilder::finalizeStringTable(this, 0) = 31 - __clz(1 << *(unsigned char *)(v12 + 24));
            *((_DWORD *)v27 - 9) = *(_DWORD *)(v12 + 256);
            unint64_t v11 = v29 + v26;
            *(_DWORD *)(v12 + 24MEMORY[0x1D25D9CD0](*(void *)this, 8) = v766;
            uint64_t v36 = *(unsigned char **)(v12 + 232);
            if (v36)
            {
              a4 = v765;
              if ((*v36 & 4) != 0)
              {
                unsigned int v39 = (void **)*((void *)v36 - 1);
                int v40 = *v39;
                uint64_t v37 = v39 + 2;
                int v38 = v40;
              }
              else
              {
                uint64_t v37 = 0;
                int v38 = 0;
              }
              v777[0] = v37;
              v777[1] = v38;
              int v41 = sub_1CCBE9B3C(&v769, v777);
              uint64_t v42 = v41;
              unint64_t v44 = (void *)v41[1];
              unint64_t v43 = v41[2];
              if ((unint64_t)v44 >= v43)
              {
                __n128 v46 = (void *)*v41;
                uint64_t v47 = ((uint64_t)v44 - *v41) >> 3;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 61) {
                  goto LABEL_1050;
                }
                uint64_t v49 = v43 - (void)v46;
                if (v49 >> 2 > v48) {
                  unint64_t v48 = v49 >> 2;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  if (v50 >> 61) {
                    goto LABEL_1051;
                  }
                  __n128 v51 = (char *)operator new(8 * v50);
                }
                else
                {
                  __n128 v51 = 0;
                }
                long long v54 = &v51[8 * v47];
                *(void *)long long v54 = v766 << 32;
                __n128 v45 = v54 + 8;
                if (v44 != v46)
                {
                  do
                  {
                    uint64_t v55 = *--v44;
                    *((void *)v54 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v55;
                    v54 -= 8;
                  }
                  while (v44 != v46);
                  unint64_t v44 = (void *)*v42;
                }
                *uint64_t v42 = (uint64_t)v54;
                v42[1] = (uint64_t)v45;
                _OWORD v42[2] = (uint64_t)&v51[8 * v50];
                if (v44) {
                  operator delete(v44);
                }
              }
              else
              {
                *unint64_t v44 = v766 << 32;
                __n128 v45 = v44 + 1;
              }
              v42[1] = (uint64_t)v45;
            }
            else
            {
              a4 = v765;
            }
            uint64_t v9 = v762;
            goto LABEL_93;
          }
          while (2)
          {
            if (*(unsigned char *)(v30 + 50))
            {
              v737 = "only data supported in data sections";
              goto LABEL_606;
            }
            int v31 = *(unsigned __int8 *)(v30 + 48);
            if (v31 != 10)
            {
              if (v31 == 4)
              {
                v777[0] = 0;
                llvm::MCExpr::evaluateAsAbsolute(*(void *)(v30 + 64), v777, 0, 0, 0, 0);
                sub_1CC202034((uint64_t *)v27 - 4, *((void *)v27 - 4) + *((void *)v27 - 3), (unint64_t)v777[0] * *(unsigned __int8 *)(v30 + 51), *(char *)(v30 + 56));
                goto LABEL_48;
              }
              if (!*(unsigned char *)(v30 + 48))
              {
                if (*(_DWORD *)(v30 + 72) != 1)
                {
                  v737 = "only byte values supported for alignment";
                  goto LABEL_606;
                }
                if (*(unsigned char *)(v30 + 56)) {
                  LODWORD(v32) = 0;
                }
                else {
                  uint64_t v32 = *(void *)(v30 + 64);
                }
                unint64_t v33 = *((void *)v27 - 3);
                if (v33 + *(unsigned int *)(v30 + 76) >= (v33 + *(unsigned int *)(v30 + 52) - 1)
                                                        / *(unsigned int *)(v30 + 52)
                                                        * *(unsigned int *)(v30 + 52))
                  unint64_t v34 = (v33 + *(unsigned int *)(v30 + 52) - 1)
                      / *(unsigned int *)(v30 + 52)
                      * *(unsigned int *)(v30 + 52);
                else {
                  unint64_t v34 = v33 + *(unsigned int *)(v30 + 76);
                }
                size_t v35 = v34 - v33;
                if (v34 != v33)
                {
                  if (v34 >= v33)
                  {
                    if (v34 > *((void *)v27 - 2)) {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    }
                    memset((void *)(*((void *)v27 - 4) + v33), v32, v35);
                    *((void *)v27 - 3) += v35;
                  }
                  else
                  {
                    *((void *)v27 - 3) = v34;
                  }
                }
LABEL_48:
                uint64_t v30 = *(void *)(v30 + 8);
                if (v30 == v12 + 104)
                {
                  unint64_t v29 = *((void *)v27 - 3);
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          sub_1CCBEA54C((uint64_t *)v27 - 4, *((void *)v27 - 4) + *((void *)v27 - 3), *(char **)(v30 + 64), (char *)(*(void *)(v30 + 64) + *(void *)(v30 + 72)));
          goto LABEL_48;
        }
        if (v13 >= 0x10 && *v14 == 0x5F6D6F747375632ELL && v14[1] == 0x2E6E6F6974636573)
        {
          v14 += 2;
          v13 -= 16;
        }
        if (*(void *)(v12 + 8))
        {
          uint64_t v90 = (*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 5;
          v777[0] = *(void **)(v12 + 8);
          *((_DWORD *)sub_1CD40EB18(a1 + 120, (uint64_t *)v777) + 2) = v90;
        }
        if (v13 == 15)
        {
          if (*v14 == 0x665F746567726174 && *(void *)((char *)v14 + 7) == 0x7365727574616566) {
            operator new();
          }
        }
        else if (v13 == 9 && *v14 == 0x72656375646F7270 && *((unsigned char *)v14 + 8) == 115)
        {
          operator new();
        }
        __n128 v57 = *(unsigned char **)(v12 + 232);
        if (v57)
        {
          if ((*v57 & 4) != 0)
          {
            uint64_t v60 = (void **)*((void *)v57 - 1);
            unsigned int v61 = *v60;
            uint64_t v58 = v60 + 2;
            uint64_t v59 = v61;
          }
          else
          {
            uint64_t v58 = 0;
            uint64_t v59 = 0;
          }
          v777[0] = v58;
          v777[1] = v59;
          uint64_t v62 = sub_1CCBE9B3C(&v769, v777);
          unsigned int v63 = v62;
          unint64_t v64 = *(void *)(a1 + 200) - *(void *)(a1 + 192);
          uint64_t v66 = (unint64_t *)v62[1];
          unint64_t v65 = v62[2];
          if ((unint64_t)v66 >= v65)
          {
            unint64_t v752 = v11;
            uint64_t v68 = (unint64_t *)*v62;
            uint64_t v69 = ((uint64_t)v66 - *v62) >> 3;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61) {
              goto LABEL_1050;
            }
            uint64_t v71 = v65 - (void)v68;
            if (v71 >> 2 > v70) {
              unint64_t v70 = v71 >> 2;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v767 = v70;
            if (v70)
            {
              if (v70 >> 61) {
                goto LABEL_1051;
              }
              unint64_t v72 = (char *)operator new(8 * v70);
            }
            else
            {
              unint64_t v72 = 0;
            }
            int v73 = (unint64_t *)&v72[8 * v69];
            *int v73 = ((unint64_t)(v64 >> 5) << 32) | 5;
            char v67 = v73 + 1;
            if (v66 == v68)
            {
              unint64_t v11 = v752;
              unint64_t v74 = v767;
            }
            else
            {
              unint64_t v11 = v752;
              unint64_t v74 = v767;
              do
              {
                unint64_t v75 = *--v66;
                *--int v73 = v75;
              }
              while (v66 != v68);
              uint64_t v66 = (unint64_t *)*v63;
            }
            uint64_t *v63 = (uint64_t)v73;
            v63[1] = (uint64_t)v67;
            v63[2] = (uint64_t)&v72[8 * v74];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *uint64_t v66 = ((unint64_t)(v64 >> 5) << 32) | 5;
            char v67 = v66 + 1;
          }
          v63[1] = (uint64_t)v67;
          a4 = v765;
          uint64_t v9 = v762;
        }
        uint64_t v77 = *(char **)(a1 + 200);
        unint64_t v76 = *(void *)(a1 + 208);
        if ((unint64_t)v77 >= v76)
        {
          unint64_t v753 = v11;
          int v79 = *(char **)(a1 + 192);
          uint64_t v80 = (v77 - v79) >> 5;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 59) {
LABEL_1050:
          }
            abort();
          uint64_t v82 = v76 - (void)v79;
          if (v82 >> 4 > v81) {
            unint64_t v81 = v82 >> 4;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v83 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v83 = v81;
          }
          if (v83 >> 59) {
LABEL_1051:
          }
            sub_1CB833614();
          unint64_t v84 = (char *)operator new(32 * v83);
          unint64_t v85 = &v84[32 * v80];
          *(void *)unint64_t v85 = v14;
          *((void *)v85 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v13;
          *((void *)v85 + 2) = v12;
          *((void *)v85 + 3) = 0xFFFFFFFF00000000;
          if (v77 == v79)
          {
            unint64_t v88 = &v84[32 * v80];
            unint64_t v11 = v753;
          }
          else
          {
            int v86 = &v84[32 * v80];
            unint64_t v11 = v753;
            do
            {
              long long v87 = *((_OWORD *)v77 - 1);
              unint64_t v88 = v86 - 32;
              *((_OWORD *)v86 - 2) = *((_OWORD *)v77 - 2);
              *((_OWORD *)v86 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v87;
              v77 -= 32;
              v86 -= 32;
            }
            while (v77 != v79);
          }
          unint64_t v89 = &v84[32 * v83];
          uint64_t v78 = v85 + 32;
          *(void *)(a1 + 192) = v88;
          *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = v85 + 32;
          *(void *)(a1 + 20MEMORY[0x1D25D9CD0](*(void *)this, 8) = v89;
          if (v79) {
            operator delete(v79);
          }
          uint64_t v9 = v762;
        }
        else
        {
          *(void *)uint64_t v77 = v14;
          *((void *)v77 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v13;
          *((void *)v77 + 2) = v12;
          uint64_t v78 = v77 + 32;
          *((void *)v77 + 3) = 0xFFFFFFFF00000000;
        }
        *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = v78;
      }
LABEL_93:
      if (++v10 == v9) {
        goto LABEL_168;
      }
    }
    if (v13 < 4 || *(_DWORD *)((char *)v14 + v13 - 4) != 1870095406) {
      goto LABEL_93;
    }
LABEL_11:
    if (v13 >= 0xB)
    {
      BOOL v15 = *v14 == 0x72615F74696E692ELL && *(void *)((char *)v14 + 3) == 0x79617272615F7469;
      if (v15) {
        goto LABEL_93;
      }
    }
    goto LABEL_16;
  }
  unint64_t v11 = 0;
LABEL_168:
  unint64_t v755 = v11;
  __int16 v106 = a3;
  if (a4 == 2) {
    goto LABEL_314;
  }
  unsigned int v107 = (uint64_t *)v757[7];
  uint64_t v108 = (uint64_t *)v757[8];
  if (v107 == v108) {
    goto LABEL_314;
  }
  uint64_t v109 = a1 + 72;
  uint64_t v110 = a1 + 120;
  BOOL v111 = &v780;
  uint64_t v112 = &v777[1];
  unint64_t v113 = &v779;
  uint64_t v768 = a1 + 168;
  while (2)
  {
    uint64_t v114 = *v107;
    int v115 = *(_DWORD *)(*v107 + 8);
    if (v115)
    {
      if ((*(unsigned char *)v114 & 4) != 0 && (*(_DWORD *)(*v107 + 8) & 0x1C00) != 0x800 && **(void **)(v114 - 8) != 0) {
        goto LABEL_179;
      }
      goto LABEL_282;
    }
    if ((*(_DWORD *)(*v107 + 8) & 0x1C00) == 0x800) {
      goto LABEL_282;
    }
LABEL_179:
    if (!*(unsigned char *)(v114 + 42) || *(void *)v114 >= 8uLL)
    {
      int v117 = *(_DWORD *)(v114 + 32);
      if (*(unsigned char *)(v114 + 36)) {
        BOOL v118 = v117 == 0;
      }
      else {
        BOOL v118 = 0;
      }
      if (!v118)
      {
        if (*(unsigned char *)(v114 + 36)) {
          BOOL v119 = v117 == 1;
        }
        else {
          BOOL v119 = 1;
        }
        if (!v119)
        {
          if (v117 == 5)
          {
            unint64_t v151 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_DWORD *)(*v107 + 8) & 0x1C00) == 0x800 && v151 == 0)
            {
              *(_DWORD *)(v114 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v115 | 4;
              unint64_t v168 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
              *(void *)uint64_t v114 = *(void *)v114 & 7 | v168;
              if (!v168) {
                goto LABEL_282;
              }
            }
            else if (!v151)
            {
              goto LABEL_282;
            }
            *(void *)BOOL v111 = 0;
            *((void *)v111 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
            char v153 = v111;
            BOOL v154 = v113;
            uint64_t v155 = v110;
            uint64_t v156 = v109;
            LODWORD(v777[0]) = v793 + *(_DWORD *)(a1 + 920);
            int v157 = (int)v777[0];
            long long v158 = *(_OWORD *)(v114 + 152);
            *(_OWORD *)uint64_t v112 = *(_OWORD *)(v114 + 136);
            *((_OWORD *)v112 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v158;
            *(void *)v813 = v114;
            *((_DWORD *)sub_1CD40EB18(v155, (uint64_t *)v813) + 2) = v157;
            uint64_t v109 = v156;
            uint64_t v110 = v155;
            unint64_t v113 = v154;
            BOOL v111 = v153;
            unint64_t v159 = sub_1CD68E7B0((uint64_t)&v792, (unint64_t)v777);
            int v160 = (char *)v792 + 56 * v793;
            long long v161 = *(_OWORD *)v159;
            long long v162 = *(_OWORD *)(v159 + 16);
            long long v163 = *(_OWORD *)(v159 + 32);
            *((void *)v160 + 6) = *(void *)(v159 + 48);
            *((_OWORD *)v160 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v162;
            *((_OWORD *)v160 + 2) = v163;
            *(_OWORD *)int v160 = v161;
            LODWORD(v793) = v793 + 1;
            goto LABEL_282;
          }
          if (v117 != 4)
          {
            if (v117 != 2) {
              goto LABEL_282;
            }
            unint64_t v137 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_DWORD *)(*v107 + 8) & 0x1C00) == 0x800 && v137 == 0)
            {
              *(_DWORD *)(v114 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v115 | 4;
              unint64_t v166 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
              *(void *)uint64_t v114 = *(void *)v114 & 7 | v166;
              if (!v166) {
                goto LABEL_282;
              }
            }
            else if (!v137)
            {
              goto LABEL_282;
            }
            v758 = v111;
            unsigned int v139 = v113;
            uint64_t v140 = v109;
            *(_OWORD *)unsigned int v139 = 0u;
            *((_OWORD *)v139 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0u;
            uint64_t v141 = v139;
            WORD2(v777[0]) = *(_WORD *)(v114 + 128);
            int v142 = v796 + *(_DWORD *)(a1 + 916);
            LODWORD(v777[0]) = v142;
            LOBYTE(v777[1]) = 0;
            char v143 = 65;
            switch(BYTE4(v777[0]))
            {
              case '|':
                char v143 = 68;
                break;
              case '}':
                char v143 = 67;
                break;
              case '~':
                char v143 = 66;
                break;
              case '\x7F':
                break;
              default:
                char v143 = -48;
                break;
            }
            LOBYTE(v778[0]) = v143;
            *(void *)v813 = v114;
            *((_DWORD *)sub_1CD40EB18(v110, (uint64_t *)v813) + 2) = v142;
            long long v169 = (long long *)sub_1CD59B6E8((uint64_t)&v795, (unint64_t)v777);
            uint64_t v170 = (char *)v795 + 64 * (unint64_t)v796;
            long long v171 = *v169;
            long long v172 = v169[1];
            long long v173 = v169[3];
            v170[2] = v169[2];
            v170[3] = v173;
            _OWORD *v170 = v171;
            v170[1] = v172;
            LODWORD(v796) = v796 + 1;
            uint64_t v109 = v140;
            unint64_t v113 = v141;
            goto LABEL_248;
          }
          unint64_t v144 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_DWORD *)(*v107 + 8) & 0x1C00) == 0x800 && v144 == 0)
          {
            *(_DWORD *)(v114 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v115 | 4;
            unint64_t v167 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
            *(void *)uint64_t v114 = *(void *)v114 & 7 | v167;
            if (!v167) {
              goto LABEL_282;
            }
          }
          else if (!v144)
          {
            goto LABEL_282;
          }
          v759 = v111;
          v743 = v113;
          int v146 = v799 + *(_DWORD *)(a1 + 924);
          v777[0] = (void *)v114;
          uint64_t v147 = v110;
          uint64_t v148 = v109;
          int v149 = *((_DWORD *)sub_1CD40EB18(v109, (uint64_t *)v777) + 2);
          v777[0] = (void *)v114;
          uint64_t v150 = v147;
          *((_DWORD *)sub_1CD40EB18(v147, (uint64_t *)v777) + 2) = v146;
          if (v799 >= (unint64_t)HIDWORD(v799)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v113 = v743;
          BOOL v111 = v759;
          *((_DWORD *)v798 + v799) = v149;
          LODWORD(v799) = v799 + 1;
          uint64_t v109 = v148;
          uint64_t v110 = v150;
          goto LABEL_282;
        }
        if (!sub_1CCBE9C38(*v107)) {
          goto LABEL_282;
        }
        unint64_t v120 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
        if (!v120 && (*(_DWORD *)(v114 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v114 + 8) |= 4u;
          unint64_t v120 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
          *(void *)uint64_t v114 = *(void *)v114 & 7 | v120;
        }
        if (!v120) {
          goto LABEL_282;
        }
        uint64_t v121 = *(llvm::MCExpr **)(v114 + 176);
        if (v121)
        {
          *(void *)v813 = 0;
          if ((llvm::MCExpr::evaluateAsAbsolute(v121, (uint64_t *)v813, (const llvm::MCAsmLayout *)a3) & 1) == 0)
          {
LABEL_1045:
            v737 = ".size expression must be evaluatable";
            goto LABEL_606;
          }
          unsigned int v122 = v112;
          unint64_t v123 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
          if (!v123 && (*(_DWORD *)(v114 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v114 + 8) |= 4u;
            unint64_t v123 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
            *(void *)uint64_t v114 = *(void *)v114 & 7 | v123;
          }
          v758 = v111;
          uint64_t v763 = v110;
          uint64_t v124 = v109;
          uint64_t v125 = v113;
          int v126 = v122;
          uint64_t v127 = *(void *)(v123 + 16);
          int v128 = *(unsigned __int8 *)(v127 + 220);
          int v129 = v128 & 0xFC;
          BOOL v131 = (v128 - 15) < 6 || v129 == 4 || v129 == 8;
          if (!v131 && (v128 - 12) >= 3)
          {
            v740 = (void *)sub_1CD6ACAC0((unsigned char *)v114);
            __int16 v779 = 1283;
            v742 = "data symbols must live in a data section: ";
            goto LABEL_1057;
          }
          int v132 = *(_DWORD *)(v127 + 248);
          v777[0] = 0;
          sub_1CCBC6418((llvm::MCAsmLayout *)a3, (uint64_t *)v114, 1, v777);
          int v133 = v777[0];
          unint64_t v134 = *(void **)v813;
          v777[0] = (void *)v114;
          unint64_t v135 = sub_1CD697878(v768, (uint64_t *)v777);
          *((_DWORD *)v135 + 2) = v132;
          *((_DWORD *)v135 + 3) = 0;
          v135[2] = v133;
          v135[3] = v134;
          unsigned int v136 = v126;
          unint64_t v113 = v125;
          uint64_t v112 = v136;
          uint64_t v109 = v124;
          uint64_t v110 = v763;
LABEL_248:
          BOOL v111 = v758;
          goto LABEL_282;
        }
        v740 = (void *)sub_1CD6ACAC0((unsigned char *)v114);
        __int16 v779 = 1283;
        v742 = "data symbols must have a size set with .size: ";
LABEL_1057:
        v777[0] = (void *)v742;
        v778[0] = v740;
        v778[1] = v741;
LABEL_1044:
        llvm::report_fatal_error((llvm *)v777, (const llvm::Twine *)1);
      }
      unint64_t v164 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_DWORD *)(*v107 + 8) & 0x1C00) == 0x800 && v164 == 0)
      {
        *(_DWORD *)(v114 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v115 | 4;
        unint64_t v174 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
        *(void *)uint64_t v114 = *(void *)v114 & 7 | v174;
        if (!v174) {
          goto LABEL_233;
        }
      }
      else if (!v164)
      {
LABEL_233:
        sub_1CD40EA84(*(void *)(a1 + 120), *(_DWORD *)(a1 + 136), v114, v777);
        goto LABEL_282;
      }
      if (*(void *)(v114 + 24))
      {
        v737 = "function sections must contain one function each";
        goto LABEL_606;
      }
      uint64_t v764 = v110;
      if (!*(void *)(v114 + 176))
      {
        v737 = "function symbols must have a size set with .size";
        goto LABEL_606;
      }
      uint64_t v175 = (v811 + *(_DWORD *)(a1 + 912));
      v777[0] = (void *)v114;
      uint64_t v748 = v109;
      uint64_t v176 = *((unsigned int *)sub_1CD40EB18(v109, (uint64_t *)v777) + 2);
      v777[0] = (void *)v114;
      uint64_t v746 = v175;
      *((_DWORD *)sub_1CD40EB18(v764, (uint64_t *)v777) + 2) = v175;
      if (v811 >= (unint64_t)HIDWORD(v811)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v177 = (unint64_t *)((char *)v810 + 16 * v811);
      unint64_t v747 = v747 & 0xFFFFFFFF00000000 | v176;
      unint64_t *v177 = v747;
      v177[1] = v114;
      LODWORD(v81llvm::StringTableBuilder::finalizeStringTable(this, 1) = v811 + 1;
      unint64_t v178 = *(void *)v114 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v109 = v748;
      if (!v178 && (*(_DWORD *)(v114 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v114 + 8) |= 4u;
        unint64_t v178 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v114 + 24));
        *(void *)uint64_t v114 = *(void *)v114 & 7 | v178;
      }
      uint64_t v179 = *(unsigned char **)(*(void *)(v178 + 16) + 232);
      if (v179)
      {
        v760 = v111;
        uint64_t v180 = v112;
        if ((*v179 & 4) != 0)
        {
          int v183 = (void **)*((void *)v179 - 1);
          uint64_t v184 = *v183;
          long long v181 = v183 + 2;
          uint64_t v182 = v184;
        }
        else
        {
          long long v181 = 0;
          uint64_t v182 = 0;
        }
        v777[0] = v181;
        v777[1] = v182;
        unsigned int v185 = sub_1CCBE9B3C(&v769, v777);
        uint64_t v186 = v185;
        uint64_t v188 = (uint64_t *)v185[1];
        unint64_t v187 = v185[2];
        if ((unint64_t)v188 >= v187)
        {
          v744 = v113;
          int v190 = (uint64_t *)*v185;
          uint64_t v191 = ((uint64_t)v188 - *v185) >> 3;
          unint64_t v192 = v191 + 1;
          if ((unint64_t)(v191 + 1) >> 61) {
            goto LABEL_1050;
          }
          uint64_t v193 = v187 - (void)v190;
          if (v193 >> 2 > v192) {
            unint64_t v192 = v193 >> 2;
          }
          if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v194 = v192;
          }
          if (v194)
          {
            if (v194 >> 61) {
              goto LABEL_1051;
            }
            uint64_t v195 = (char *)operator new(8 * v194);
          }
          else
          {
            uint64_t v195 = 0;
          }
          uint64_t v196 = (uint64_t *)&v195[8 * v191];
          *uint64_t v196 = (v746 << 32) | 1;
          long long v189 = v196 + 1;
          if (v188 != v190)
          {
            do
            {
              uint64_t v197 = *--v188;
              *--uint64_t v196 = v197;
            }
            while (v188 != v190);
            uint64_t v188 = (uint64_t *)*v186;
          }
          uint64_t *v186 = (uint64_t)v196;
          v186[1] = (uint64_t)v189;
          v186[2] = (uint64_t)&v195[8 * v194];
          unint64_t v113 = v744;
          if (v188) {
            operator delete(v188);
          }
          BOOL v111 = v760;
          uint64_t v112 = v180;
        }
        else
        {
          *uint64_t v188 = (v746 << 32) | 1;
          long long v189 = v188 + 1;
          uint64_t v112 = v180;
        }
        v186[1] = (uint64_t)v189;
        uint64_t v109 = v748;
      }
      if (*(unsigned char *)(v114 + 112))
      {
        *(_OWORD *)v777 = *(_OWORD *)(v114 + 96);
        LOBYTE(v778[0]) = 0;
        HIDWORD(v778[0]) = v746;
        unint64_t v198 = sub_1CD483108((uint64_t)&v801, (unint64_t)v777);
        unsigned int v199 = (char *)v801 + 24 * v802;
        long long v200 = *(_OWORD *)v198;
        *((void *)v199 + 2) = *(void *)(v198 + 16);
        *(_OWORD *)unsigned int v199 = v200;
        LODWORD(v802) = v802 + 1;
      }
      uint64_t v110 = v764;
    }
LABEL_282:
    if (++v107 != v108) {
      continue;
    }
    break;
  }
  __int16 v106 = a3;
  unsigned __int8 v201 = (const llvm::MCSymbol **)v757[7];
  for (unint64_t j = (const llvm::MCSymbol **)v757[8]; v201 != j; ++v201)
  {
    uint64_t v203 = *v201;
    if ((*((_DWORD *)*v201 + 2) & 0x1C00) == 0x800)
    {
      uint64_t v204 = llvm::MCAsmLayout::getBaseSymbol(a3, *v201);
      if (!v204)
      {
        uint64_t v734 = sub_1CD6ACAC0(v203);
        __int16 v817 = 261;
        *(void *)v813 = v734;
        uint64_t v814 = v735;
        v772[0] = ": absolute addressing not supported!";
        __int16 v773 = 259;
        v736 = v772;
        goto LABEL_1043;
      }
      long long v205 = v204;
      int v206 = *((_DWORD *)v204 + 8);
      if (*((unsigned char *)v204 + 36)) {
        BOOL v207 = v206 == 0;
      }
      else {
        BOOL v207 = 0;
      }
      if (v207)
      {
        v777[0] = 0;
        if (sub_1CD40EA84(*(void *)(a1 + 120), *(_DWORD *)(a1 + 136), (uint64_t)v204, v777)) {
          unsigned int v216 = v777[0];
        }
        else {
          unsigned int v216 = (_DWORD *)(*(void *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
        }
        int v217 = v216[2];
        v777[0] = v203;
        *((_DWORD *)sub_1CD40EB18(v110, (uint64_t *)v777) + 2) = v217;
      }
      else
      {
        if (*((unsigned char *)v204 + 36)) {
          BOOL v208 = v206 == 1;
        }
        else {
          BOOL v208 = 1;
        }
        if (!v208)
        {
          v737 = "don't yet support global/tag aliases";
          goto LABEL_606;
        }
        unint64_t v209 = *(void *)v203 & 0xFFFFFFFFFFFFFFF8;
        if (!v209 && (*((_DWORD *)v203 + 2) & 0x1C00) == 0x800)
        {
          *((_DWORD *)v203 + 2) |= 4u;
          unint64_t v209 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v203 + 3));
          *(void *)uint64_t v203 = *(void *)v203 & 7 | v209;
        }
        uint64_t v210 = *(void *)(v209 + 16);
        v777[0] = 0;
        sub_1CCBC6418((llvm::MCAsmLayout *)a3, (uint64_t *)v203, 1, v777);
        unsigned int v211 = v777[0];
        *(void *)v813 = 0;
        if ((llvm::MCExpr::evaluateAsAbsolute(*((llvm::MCExpr **)v205 + 22), (uint64_t *)v813, (const llvm::MCAsmLayout *)a3) & 1) == 0)goto LABEL_1045; {
        unsigned int v212 = *(_DWORD *)(v210 + 248);
        }
        if (*(void *)(*(void *)(a1 + 576) + 80 * v212 + 56) - (void)v211 >= *(void *)v813) {
          LODWORD(v213) = *(_DWORD *)v813;
        }
        else {
          uint64_t v213 = *(void *)(*(void *)(a1 + 576) + 80 * v212 + 56) - (void)v211;
        }
        v777[0] = 0;
        sub_1CCBC6418((llvm::MCAsmLayout *)a3, (uint64_t *)v203, 1, v777);
        uint64_t v214 = LODWORD(v777[0]);
        v777[0] = v203;
        __int16 v215 = sub_1CD697878(v768, (uint64_t *)v777);
        *((_DWORD *)v215 + 2) = v212;
        *((_DWORD *)v215 + 3) = 0;
        v215[2] = v214;
        v215[3] = v213;
      }
    }
  }
LABEL_314:
  unsigned int v218 = (uint64_t *)v757[7];
  for (uint64_t k = (uint64_t *)v757[8]; v218 != k; ++v218)
  {
    uint64_t v220 = *v218;
    if (sub_1CCBE9C38(*v218))
    {
      if (*(unsigned char *)(v220 + 41)) {
        int v221 = *(unsigned __int8 *)(v220 + 40) | 4;
      }
      else {
        int v221 = *(unsigned __int8 *)(v220 + 40);
      }
      int v222 = *(_DWORD *)(v220 + 8);
      uint64_t v223 = *(void *)v220;
      if ((v222 & 0x10) == 0)
      {
        unint64_t v224 = v223 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v220 + 8) & 0x1C00) == 0x800 && v224 == 0)
        {
          *(_DWORD *)(v220 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v222 | 4;
          unint64_t v224 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v220 + 24));
          uint64_t v223 = *(void *)v220 & 7 | v224;
          *(void *)uint64_t v220 = v223;
        }
        if (v224) {
          v221 |= 2u;
        }
      }
      unint64_t v226 = v223 & 0xFFFFFFFFFFFFFFF8;
      if ((v223 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v220 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v220 + 8) |= 4u;
        unint64_t v226 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v220 + 24));
        uint64_t v223 = *(void *)v220 & 7 | v226;
        *(void *)uint64_t v220 = v223;
      }
      if (v226) {
        int v227 = v221;
      }
      else {
        int v227 = v221 | 0x10;
      }
      __int16 v228 = *(_WORD *)(v220 + 12);
      if ((v228 & 0x80) != 0)
      {
        if ((*(unsigned char *)(*(void *)(a1 + 16) + 8) & 2) != 0) {
          int v229 = 160;
        }
        else {
          int v229 = 128;
        }
        v227 |= v229;
      }
      if (*(unsigned char *)(v220 + 88)) {
        v227 |= 0x40u;
      }
      int v230 = *(unsigned __int8 *)(v220 + 112);
      LOBYTE(v778[1]) = 0;
      if (v230) {
        v227 |= 0x20u;
      }
      LOBYTE(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      BYTE8(v78llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      BYTE8(v78llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
      char v782 = 0;
      char v783 = 0;
      if ((v223 & 4) != 0)
      {
        char v233 = *(void ***)(v220 - 8);
        unsigned int v234 = *v233;
        unsigned int v231 = v233 + 2;
        unsigned int v232 = v234;
      }
      else
      {
        unsigned int v231 = 0;
        unsigned int v232 = 0;
      }
      int v235 = v227 | v228 & 0x100;
      v777[0] = v231;
      v777[1] = v232;
      uint64_t v236 = *(void *)(v220 + 32);
      if ((v236 & 0xFF00000000) != 0) {
        char v237 = *(void *)(v220 + 32);
      }
      else {
        char v237 = 1;
      }
      LOBYTE(v778[0]) = v237;
      HIDWORD(v778[0]) = v235;
      if ((v236 & 0xFF00000000) == 0 || v236 == 1)
      {
        unint64_t v239 = v223 & 0xFFFFFFFFFFFFFFF8;
        if ((v223 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v220 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v220 + 8) |= 4u;
          unint64_t v239 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v220 + 24));
          *(void *)uint64_t v220 = *(void *)v220 & 7 | v239;
        }
        if (v239)
        {
          *(void *)v813 = 0;
          if (sub_1CD41F538(*(void *)(a1 + 168), *(_DWORD *)(a1 + 184), v220, v813)) {
            v240 = *(char **)v813;
          }
          else {
            v240 = (char *)(*(void *)(a1 + 168) + 32 * *(unsigned int *)(a1 + 184));
          }
          long long v784 = *(_OWORD *)(v240 + 8);
          uint64_t v785 = *((void *)v240 + 3);
        }
      }
      else
      {
        *(void *)v813 = 0;
        if (sub_1CD40EA84(*(void *)(a1 + 120), *(_DWORD *)(a1 + 136), v220, v813)) {
          unsigned int v238 = *(_DWORD **)v813;
        }
        else {
          unsigned int v238 = (_DWORD *)(*(void *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
        }
        LODWORD(v784) = v238[2];
      }
      *(_DWORD *)(v220 + 16) = v790;
      sub_1CD6BECDC((unint64_t)&v789, (long long *)v777);
    }
    else
    {
      *(_DWORD *)(v220 + 16) = -1;
    }
  }
  v777[0] = v106;
  v777[1] = (void *)a1;
  v778[0] = &v807;
  uint64_t v241 = *(void *)(a1 + 24);
  uint64_t v242 = *(void *)(a1 + 32);
  while (v241 != v242)
  {
    sub_1CCBE9CE8((uint64_t)v777, *(const llvm::MCSymbol **)(v241 + 8), *(_DWORD *)(v241 + 24));
    v241 += 40;
  }
  uint64_t v243 = *(void *)(a1 + 48);
  for (uint64_t m = *(void *)(a1 + 56); v243 != m; v243 += 40)
    sub_1CCBE9CE8((uint64_t)v777, *(const llvm::MCSymbol **)(v243 + 8), *(_DWORD *)(v243 + 24));
  uint64_t v245 = v757[4];
  uint64_t v246 = v757[5];
  if (v245 != v246)
  {
    while (1)
    {
      std::string::size_type v247 = *(void **)v245;
      unint64_t v248 = *(void *)(*(void *)v245 + 208);
      if (v248 >= 0xB)
      {
        uint64_t v249 = v247[25];
        if (*(void *)v249 == 0x72615F696E69662ELL && *(void *)(v249 + 3) == 0x79617272615F696ELL)
        {
          v737 = ".fini_array sections are unsupported";
          goto LABEL_606;
        }
        BOOL v251 = *(void *)v249 == 0x72615F74696E692ELL && *(void *)(v249 + 3) == 0x79617272615F7469;
        if (v251 && (void *)v247[13] != v247 + 13)
        {
          uint64_t v252 = 4;
          uint64_t v253 = v247 + 13;
          do
          {
            uint64_t v253 = (void *)v253[1];
            --v252;
          }
          while (v253 != v247 + 13);
          if (v252)
          {
            v737 = "only one .init_array section fragment supported";
            goto LABEL_606;
          }
          uint64_t v254 = v247[14];
          if (*(unsigned char *)(v254 + 48) != 1 || (uint64_t v255 = *(void *)(v254 + 8), *(unsigned char *)(v255 + 48)))
          {
            v737 = ".init_array section should be aligned";
            goto LABEL_606;
          }
          if (*(unsigned char *)(*(void *)(a1 + 16) + 8)) {
            int v256 = 8;
          }
          else {
            int v256 = 4;
          }
          if (*(_DWORD *)(v255 + 52) != v256)
          {
            v737 = ".init_array section should be aligned for pointers";
            goto LABEL_606;
          }
          uint64_t v257 = *(void *)(v255 + 8);
          if (*(unsigned char *)(v257 + 50) || *(unsigned char *)(v257 + 48) != 1)
          {
            v737 = "only data supported in .init_array section";
            goto LABEL_606;
          }
          if (v248 < 0xC)
          {
            uint64_t v265 = 0xFFFFLL;
          }
          else
          {
            if (*(unsigned char *)(v249 + 11) != 46)
            {
              v737 = ".init_array section priority should start with '.'";
              goto LABEL_606;
            }
            unint64_t v258 = v248 - 12;
            if (!v258) {
              goto LABEL_605;
            }
            unint64_t v259 = 0;
            v260 = (unsigned __int8 *)(v249 + 12);
            do
            {
              int v261 = *v260;
              if ((v261 - 48) >= 0xA)
              {
                if ((v261 - 97) >= 0x1A)
                {
                  if ((v261 - 65) > 0x19) {
                    goto LABEL_605;
                  }
                  int v262 = -55;
                }
                else
                {
                  int v262 = -87;
                }
              }
              else
              {
                int v262 = -48;
              }
              unsigned int v263 = v262 + v261;
              if (v263 > 9) {
                goto LABEL_605;
              }
              unint64_t v264 = 10 * v259 + v263;
              if (v259 > v264 / 0xA) {
                goto LABEL_605;
              }
              ++v260;
              unint64_t v259 = v264;
              --v258;
            }
            while (v258);
            uint64_t v265 = v264 >= 0xFFFF ? 0xFFFFLL : v264;
            if (v264 >= 0x10000)
            {
LABEL_605:
              v737 = "invalid .init_array section priority";
              goto LABEL_606;
            }
          }
          uint64_t v266 = *(void *)(v257 + 72);
          if (v266)
          {
            unint64_t v267 = *(unsigned char **)(v257 + 64);
            do
            {
              if (*v267)
              {
                v737 = "non-symbolic data in .init_array section";
                goto LABEL_606;
              }
              ++v267;
              --v266;
            }
            while (v266);
          }
          uint64_t v268 = *(unsigned int *)(v257 + 128);
          if (v268) {
            break;
          }
        }
      }
LABEL_381:
      v245 += 8;
      if (v245 == v246) {
        goto LABEL_431;
      }
    }
    uint64_t v269 = *(void *)(v257 + 120);
    uint64_t v270 = 24 * v268;
    while (**(unsigned char **)v269 == 2)
    {
      uint64_t v271 = *(void *)(*(void *)v269 + 16);
      uint64_t v272 = *(unsigned int *)(v271 + 16);
      if (v272 == -1)
      {
        v737 = "symbols in .init_array should exist in symtab";
        goto LABEL_606;
      }
      int v273 = *(unsigned __int8 *)(v271 + 36);
      int v274 = *(_DWORD *)(v271 + 32);
      if (v273) {
        BOOL v275 = v274 == 0;
      }
      else {
        BOOL v275 = 0;
      }
      if (!v275)
      {
        v737 = "symbols in .init_array should be for functions";
        goto LABEL_606;
      }
      if (v787 >= (unint64_t)HIDWORD(v787)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v786 + v787) = v265 | (v272 << 32);
      LODWORD(v787) = v787 + 1;
      v269 += 24;
      v270 -= 24;
      if (!v270) {
        goto LABEL_381;
      }
    }
    v737 = "fixups in .init_array should be symbol references";
LABEL_606:
    llvm::report_fatal_error((llvm *)v737, (const llvm::Twine *)1);
  }
LABEL_431:
  llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), byte_1CFB28FC0, 4uLL);
  uint64_t v276 = *(void *)(a1 + 8);
  v277 = *(llvm::raw_ostream **)v276;
  if ((*(_DWORD *)(v276 + 8) - 1) < 2) {
    int v278 = 1;
  }
  else {
    int v278 = 0x1000000;
  }
  LODWORD(v777[0]) = v278;
  llvm::raw_ostream::write(v277, (const char *)v777, 4uLL);
  int v279 = v765;
  if (v765 == 2)
  {
    int v280 = 0;
    int v761 = 0;
    char v281 = (const llvm::MCAsmLayout *)a3;
    uint64_t v282 = (llvm::MCAssembler *)v757;
    goto LABEL_436;
  }
  unint64_t v469 = *(unsigned int *)(a1 + 312);
  char v281 = (const llvm::MCAsmLayout *)a3;
  if (v469)
  {
    uint64_t v470 = *(void *)(a1 + 304);
    sub_1CCBEA6E0(a1, (uint64_t)v777, 1);
    uint64_t v471 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v472 = v469;
    do
    {
      char v473 = v472 & 0x7F | ((v472 > 0x7F) << 7);
      uint64_t v474 = (char *)*((void *)v471 + 4);
      if ((unint64_t)v474 >= *((void *)v471 + 3))
      {
        uint64_t v471 = llvm::raw_ostream::write(v471, v473);
      }
      else
      {
        *((void *)v471 + 4) = v474 + 1;
        *uint64_t v474 = v473;
      }
      BOOL v301 = v472 > 0x7F;
      v472 >>= 7;
    }
    while (v301);
    uint64_t v475 = v470 + (v469 << 6);
    do
    {
      v476 = **(llvm::raw_ostream ***)(a1 + 8);
      v477 = (unsigned char *)*((void *)v476 + 4);
      if ((unint64_t)v477 >= *((void *)v476 + 3))
      {
        llvm::raw_ostream::write(v476, 96);
      }
      else
      {
        *((void *)v476 + 4) = v477 + 1;
        unsigned char *v477 = 96;
      }
      unint64_t v478 = *(unsigned int *)(v470 + 32);
      v479 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v480 = v478 & 0x7F | ((v478 > 0x7F) << 7);
        long long v481 = (char *)*((void *)v479 + 4);
        if ((unint64_t)v481 >= *((void *)v479 + 3))
        {
          v479 = llvm::raw_ostream::write(v479, v480);
        }
        else
        {
          *((void *)v479 + 4) = v481 + 1;
          *long long v481 = v480;
        }
        BOOL v301 = v478 > 0x7F;
        v478 >>= 7;
      }
      while (v301);
      uint64_t v482 = *(unsigned int *)(v470 + 32);
      if (v482)
      {
        uint64_t v483 = *(int **)(v470 + 24);
        uint64_t v484 = 4 * v482;
        do
        {
          int v485 = *v483;
          v486 = **(llvm::raw_ostream ***)(a1 + 8);
          v487 = (unsigned char *)*((void *)v486 + 4);
          if ((unint64_t)v487 >= *((void *)v486 + 3))
          {
            llvm::raw_ostream::write(v486, *v483);
          }
          else
          {
            *((void *)v486 + 4) = v487 + 1;
            unsigned char *v487 = v485;
          }
          ++v483;
          v484 -= 4;
        }
        while (v484);
      }
      unint64_t v488 = *(unsigned int *)(v470 + 8);
      v489 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v490 = v488 & 0x7F | ((v488 > 0x7F) << 7);
        v491 = (char *)*((void *)v489 + 4);
        if ((unint64_t)v491 >= *((void *)v489 + 3))
        {
          v489 = llvm::raw_ostream::write(v489, v490);
        }
        else
        {
          *((void *)v489 + 4) = v491 + 1;
          char *v491 = v490;
        }
        BOOL v301 = v488 > 0x7F;
        v488 >>= 7;
      }
      while (v301);
      uint64_t v492 = *(unsigned int *)(v470 + 8);
      if (v492)
      {
        v493 = *(int **)v470;
        uint64_t v494 = 4 * v492;
        do
        {
          int v495 = *v493;
          v496 = **(llvm::raw_ostream ***)(a1 + 8);
          v497 = (unsigned char *)*((void *)v496 + 4);
          if ((unint64_t)v497 >= *((void *)v496 + 3))
          {
            llvm::raw_ostream::write(v496, *v493);
          }
          else
          {
            *((void *)v496 + 4) = v497 + 1;
            unsigned char *v497 = v495;
          }
          ++v493;
          v494 -= 4;
        }
        while (v494);
      }
      v470 += 64;
    }
    while (v470 != v475);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v498 = v805;
  uint64_t v282 = (llvm::MCAssembler *)v757;
  if (v805)
  {
    unint64_t v499 = v808;
    v500 = (char *)v804;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 2);
    v501 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v502 = v498;
    do
    {
      char v503 = v502 & 0x7F | ((v502 > 0x7F) << 7);
      v504 = (char *)*((void *)v501 + 4);
      if ((unint64_t)v504 >= *((void *)v501 + 3))
      {
        v501 = llvm::raw_ostream::write(v501, v503);
      }
      else
      {
        *((void *)v501 + 4) = v504 + 1;
        char *v504 = v503;
      }
      BOOL v301 = v502 > 0x7F;
      v502 >>= 7;
    }
    while (v301);
    v505 = &v500[72 * v498];
    do
    {
      sub_1CCBEAA54(a1, *(char **)v500, *((void *)v500 + 1));
      sub_1CCBEAA54(a1, *((char **)v500 + 2), *((void *)v500 + 3));
      v506 = **(llvm::raw_ostream ***)(a1 + 8);
      char v507 = v500[32];
      v508 = (char *)*((void *)v506 + 4);
      if ((unint64_t)v508 >= *((void *)v506 + 3))
      {
        llvm::raw_ostream::write(v506, v507);
      }
      else
      {
        *((void *)v506 + 4) = v508 + 1;
        char *v508 = v507;
      }
      switch(v500[32])
      {
        case 1:
          v526 = **(llvm::raw_ostream ***)(a1 + 8);
          char v527 = v500[40];
          v528 = (char *)*((void *)v526 + 4);
          if ((unint64_t)v528 >= *((void *)v526 + 3))
          {
            llvm::raw_ostream::write(v526, v527);
          }
          else
          {
            *((void *)v526 + 4) = v528 + 1;
            char *v528 = v527;
          }
          v536 = **(llvm::raw_ostream ***)(a1 + 8);
          v537 = (unsigned char *)*((void *)v536 + 4);
          if ((unint64_t)v537 >= *((void *)v536 + 3))
          {
            llvm::raw_ostream::write(v536, 0);
          }
          else
          {
            *((void *)v536 + 4) = v537 + 1;
            unsigned char *v537 = 0;
          }
          v538 = **(llvm::raw_ostream ***)(a1 + 8);
          unint64_t v539 = v499;
          do
          {
            char v540 = v539 & 0x7F | ((v539 > 0x7F) << 7);
            v541 = (char *)*((void *)v538 + 4);
            if ((unint64_t)v541 >= *((void *)v538 + 3))
            {
              v538 = llvm::raw_ostream::write(v538, v540);
            }
            else
            {
              *((void *)v538 + 4) = v541 + 1;
              char *v541 = v540;
            }
            BOOL v301 = v539 > 0x7F;
            v539 >>= 7;
          }
          while (v301);
          break;
        case 2:
          unint64_t v515 = v500[40];
          v516 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v517 = v515 & 0x7F | ((v515 > 0x7F) << 7);
            v518 = (char *)*((void *)v516 + 4);
            if ((unint64_t)v518 >= *((void *)v516 + 3))
            {
              v516 = llvm::raw_ostream::write(v516, v517);
            }
            else
            {
              *((void *)v516 + 4) = v518 + 1;
              char *v518 = v517;
            }
            BOOL v301 = v515 > 0x7F;
            v515 >>= 7;
          }
          while (v301);
          v519 = **(llvm::raw_ostream ***)(a1 + 8);
          unint64_t v520 = (v755 + 0xFFFF) >> 16;
          do
          {
            char v521 = v520 & 0x7F | ((v520 > 0x7F) << 7);
            v522 = (char *)*((void *)v519 + 4);
            if ((unint64_t)v522 >= *((void *)v519 + 3))
            {
              v519 = llvm::raw_ostream::write(v519, v521);
            }
            else
            {
              *((void *)v519 + 4) = v522 + 1;
              char *v522 = v521;
            }
            BOOL v301 = v520 > 0x7F;
            v520 >>= 7;
          }
          while (v301);
          break;
        case 3:
          v523 = **(llvm::raw_ostream ***)(a1 + 8);
          char v524 = v500[40];
          v525 = (char *)*((void *)v523 + 4);
          if ((unint64_t)v525 >= *((void *)v523 + 3))
          {
            llvm::raw_ostream::write(v523, v524);
          }
          else
          {
            *((void *)v523 + 4) = v525 + 1;
            char *v525 = v524;
          }
          v533 = **(llvm::raw_ostream ***)(a1 + 8);
          char v534 = v500[41];
          v535 = (char *)*((void *)v533 + 4);
          if ((unint64_t)v535 >= *((void *)v533 + 3))
          {
            llvm::raw_ostream::write(v533, v534);
          }
          else
          {
            *((void *)v533 + 4) = v535 + 1;
            char *v535 = v534;
          }
          break;
        case 4:
          v513 = **(llvm::raw_ostream ***)(a1 + 8);
          v514 = (unsigned char *)*((void *)v513 + 4);
          if ((unint64_t)v514 >= *((void *)v513 + 3))
          {
            llvm::raw_ostream::write(v513, 0);
          }
          else
          {
            *((void *)v513 + 4) = v514 + 1;
            unsigned char *v514 = 0;
          }
          unint64_t v529 = *((unsigned int *)v500 + 10);
          v530 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v531 = v529 & 0x7F | ((v529 > 0x7F) << 7);
            v532 = (char *)*((void *)v530 + 4);
            if ((unint64_t)v532 >= *((void *)v530 + 3))
            {
              v530 = llvm::raw_ostream::write(v530, v531);
            }
            else
            {
              *((void *)v530 + 4) = v532 + 1;
              char *v532 = v531;
            }
            BOOL v301 = v529 > 0x7F;
            v529 >>= 7;
          }
          while (v301);
          break;
        default:
          unint64_t v509 = *((unsigned int *)v500 + 10);
          v510 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v511 = v509 & 0x7F | ((v509 > 0x7F) << 7);
            v512 = (char *)*((void *)v510 + 4);
            if ((unint64_t)v512 >= *((void *)v510 + 3))
            {
              v510 = llvm::raw_ostream::write(v510, v511);
            }
            else
            {
              *((void *)v510 + 4) = v512 + 1;
              char *v512 = v511;
            }
            BOOL v301 = v509 > 0x7F;
            v509 >>= 7;
          }
          while (v301);
          break;
      }
      v500 += 72;
    }
    while (v500 != v505);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v542 = v811;
  if (v811)
  {
    v543 = (unsigned int *)v810;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 3);
    v544 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v545 = v542;
    do
    {
      char v546 = v545 & 0x7F | ((v545 > 0x7F) << 7);
      v547 = (char *)*((void *)v544 + 4);
      if ((unint64_t)v547 >= *((void *)v544 + 3))
      {
        v544 = llvm::raw_ostream::write(v544, v546);
      }
      else
      {
        *((void *)v544 + 4) = v547 + 1;
        char *v547 = v546;
      }
      BOOL v301 = v545 > 0x7F;
      v545 >>= 7;
    }
    while (v301);
    v548 = &v543[4 * v542];
    do
    {
      unint64_t v549 = *v543;
      v550 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v551 = v549 & 0x7F | ((v549 > 0x7F) << 7);
        v552 = (char *)*((void *)v550 + 4);
        if ((unint64_t)v552 >= *((void *)v550 + 3))
        {
          v550 = llvm::raw_ostream::write(v550, v551);
        }
        else
        {
          *((void *)v550 + 4) = v552 + 1;
          char *v552 = v551;
        }
        BOOL v301 = v549 > 0x7F;
        v549 >>= 7;
      }
      while (v301);
      v543 += 4;
    }
    while (v543 != v548);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v553 = v793;
  if (v793)
  {
    v554 = (char *)v792;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 4);
    v555 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v556 = v553;
    do
    {
      char v557 = v556 & 0x7F | ((v556 > 0x7F) << 7);
      v558 = (char *)*((void *)v555 + 4);
      if ((unint64_t)v558 >= *((void *)v555 + 3))
      {
        v555 = llvm::raw_ostream::write(v555, v557);
      }
      else
      {
        *((void *)v555 + 4) = v558 + 1;
        char *v558 = v557;
      }
      BOOL v301 = v556 > 0x7F;
      v556 >>= 7;
    }
    while (v301);
    v559 = &v554[56 * v553];
    do
    {
      unint64_t v560 = v554[8];
      v561 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v562 = v560 & 0x7F | ((v560 > 0x7F) << 7);
        v563 = (char *)*((void *)v561 + 4);
        if ((unint64_t)v563 >= *((void *)v561 + 3))
        {
          v561 = llvm::raw_ostream::write(v561, v562);
        }
        else
        {
          *((void *)v561 + 4) = v563 + 1;
          char *v563 = v562;
        }
        BOOL v301 = v560 > 0x7F;
        v560 >>= 7;
      }
      while (v301);
      unint64_t v564 = v554[16];
      v565 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v566 = v564 & 0x7F | ((v564 > 0x7F) << 7);
        v567 = (char *)*((void *)v565 + 4);
        if ((unint64_t)v567 >= *((void *)v565 + 3))
        {
          v565 = llvm::raw_ostream::write(v565, v566);
        }
        else
        {
          *((void *)v565 + 4) = v567 + 1;
          char *v567 = v566;
        }
        BOOL v301 = v564 > 0x7F;
        v564 >>= 7;
      }
      while (v301);
      unint64_t v568 = *((void *)v554 + 3);
      v569 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v570 = v568 & 0x7F | ((v568 > 0x7F) << 7);
        v571 = (char *)*((void *)v569 + 4);
        if ((unint64_t)v571 >= *((void *)v569 + 3))
        {
          v569 = llvm::raw_ostream::write(v569, v570);
        }
        else
        {
          *((void *)v569 + 4) = v571 + 1;
          char *v571 = v570;
        }
        BOOL v301 = v568 > 0x7F;
        v568 >>= 7;
      }
      while (v301);
      if (v554[16])
      {
        unint64_t v572 = *((void *)v554 + 4);
        v573 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v574 = v572 & 0x7F | ((v572 > 0x7F) << 7);
          v575 = (char *)*((void *)v573 + 4);
          if ((unint64_t)v575 >= *((void *)v573 + 3))
          {
            v573 = llvm::raw_ostream::write(v573, v574);
          }
          else
          {
            *((void *)v573 + 4) = v575 + 1;
            char *v575 = v574;
          }
          BOOL v301 = v572 > 0x7F;
          v572 >>= 7;
        }
        while (v301);
      }
      v554 += 56;
    }
    while (v554 != v559);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v576 = v799;
  if (v799)
  {
    v577 = (unsigned int *)v798;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 13);
    v578 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v579 = v576;
    do
    {
      char v580 = v579 & 0x7F | ((v579 > 0x7F) << 7);
      v581 = (char *)*((void *)v578 + 4);
      if ((unint64_t)v581 >= *((void *)v578 + 3))
      {
        v578 = llvm::raw_ostream::write(v578, v580);
      }
      else
      {
        *((void *)v578 + 4) = v581 + 1;
        char *v581 = v580;
      }
      BOOL v301 = v579 > 0x7F;
      v579 >>= 7;
    }
    while (v301);
    v582 = &v577[v576];
    do
    {
      unint64_t v583 = *v577;
      v584 = **(llvm::raw_ostream ***)(a1 + 8);
      v585 = (unsigned char *)*((void *)v584 + 4);
      if ((unint64_t)v585 >= *((void *)v584 + 3))
      {
        llvm::raw_ostream::write(v584, 0);
      }
      else
      {
        *((void *)v584 + 4) = v585 + 1;
        unsigned char *v585 = 0;
      }
      v586 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v587 = v583 & 0x7F | ((v583 > 0x7F) << 7);
        v588 = (char *)*((void *)v586 + 4);
        if ((unint64_t)v588 >= *((void *)v586 + 3))
        {
          v586 = llvm::raw_ostream::write(v586, v587);
        }
        else
        {
          *((void *)v586 + 4) = v588 + 1;
          char *v588 = v587;
        }
        BOOL v301 = v583 > 0x7F;
        v583 >>= 7;
      }
      while (v301);
      ++v577;
    }
    while (v577 != v582);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v589 = v796;
  if (v796)
  {
    v590 = (unsigned __int8 *)v795;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 6);
    v591 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v592 = v589;
    do
    {
      char v593 = v592 & 0x7F | ((v592 > 0x7F) << 7);
      v594 = (char *)*((void *)v591 + 4);
      if ((unint64_t)v594 >= *((void *)v591 + 3))
      {
        v591 = llvm::raw_ostream::write(v591, v593);
      }
      else
      {
        *((void *)v591 + 4) = v594 + 1;
        char *v594 = v593;
      }
      BOOL v301 = v592 > 0x7F;
      v592 >>= 7;
    }
    while (v301);
    v595 = &v590[64 * v589];
    while (2)
    {
      unint64_t v596 = v590[4];
      v597 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v598 = v596 & 0x7F | ((v596 > 0x7F) << 7);
        v599 = (char *)*((void *)v597 + 4);
        if ((unint64_t)v599 >= *((void *)v597 + 3))
        {
          v597 = llvm::raw_ostream::write(v597, v598);
        }
        else
        {
          *((void *)v597 + 4) = v599 + 1;
          char *v599 = v598;
        }
        BOOL v301 = v596 > 0x7F;
        v596 >>= 7;
      }
      while (v301);
      v600 = **(llvm::raw_ostream ***)(a1 + 8);
      char v601 = v590[5];
      v602 = (char *)*((void *)v600 + 4);
      if ((unint64_t)v602 >= *((void *)v600 + 3))
      {
        llvm::raw_ostream::write(v600, v601);
      }
      else
      {
        *((void *)v600 + 4) = v602 + 1;
        char *v602 = v601;
      }
      v603 = **(llvm::raw_ostream ***)(a1 + 8);
      char v604 = v590[16];
      v605 = (char *)*((void *)v603 + 4);
      if ((unint64_t)v605 >= *((void *)v603 + 3))
      {
        llvm::raw_ostream::write(v603, v604);
      }
      else
      {
        *((void *)v603 + 4) = v605 + 1;
        char *v605 = v604;
      }
      switch(v590[4])
      {
        case '|':
          *(void *)v813 = 0;
          v608 = **(llvm::raw_ostream ***)(a1 + 8);
          size_t v609 = 8;
          goto LABEL_871;
        case '}':
          *(_DWORD *)v813 = 0;
          v608 = **(llvm::raw_ostream ***)(a1 + 8);
          size_t v609 = 4;
LABEL_871:
          llvm::raw_ostream::write(v608, v813, v609);
          goto LABEL_877;
        case '~':
        case '\x7F':
          v606 = **(llvm::raw_ostream ***)(a1 + 8);
          v607 = (unsigned char *)*((void *)v606 + 4);
          if ((unint64_t)v607 < *((void *)v606 + 3))
          {
            *((void *)v606 + 4) = v607 + 1;
            unsigned char *v607 = 0;
            goto LABEL_877;
          }
          char v610 = 0;
          goto LABEL_876;
        default:
          v606 = **(llvm::raw_ostream ***)(a1 + 8);
          v611 = (unsigned char *)*((void *)v606 + 4);
          if ((unint64_t)v611 >= *((void *)v606 + 3))
          {
            char v610 = 111;
LABEL_876:
            llvm::raw_ostream::write(v606, v610);
          }
          else
          {
            *((void *)v606 + 4) = v611 + 1;
            unsigned char *v611 = 111;
          }
LABEL_877:
          v612 = **(llvm::raw_ostream ***)(a1 + 8);
          v613 = (unsigned char *)*((void *)v612 + 4);
          if ((unint64_t)v613 >= *((void *)v612 + 3))
          {
            llvm::raw_ostream::write(v612, 11);
          }
          else
          {
            *((void *)v612 + 4) = v613 + 1;
            unsigned char *v613 = 11;
          }
          v590 += 64;
          if (v590 != v595) {
            continue;
          }
          sub_1CCBEA89C(a1, (uint64_t *)v777);
          break;
      }
      break;
    }
  }
  unint64_t v614 = v802;
  if (v802)
  {
    v615 = (char *)v801;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 7);
    v616 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v617 = v614;
    do
    {
      char v618 = v617 & 0x7F | ((v617 > 0x7F) << 7);
      v619 = (char *)*((void *)v616 + 4);
      if ((unint64_t)v619 >= *((void *)v616 + 3))
      {
        v616 = llvm::raw_ostream::write(v616, v618);
      }
      else
      {
        *((void *)v616 + 4) = v619 + 1;
        char *v619 = v618;
      }
      BOOL v301 = v617 > 0x7F;
      v617 >>= 7;
    }
    while (v301);
    v620 = &v615[24 * v614];
    do
    {
      sub_1CCBEAA54(a1, *(char **)v615, *((void *)v615 + 1));
      v621 = **(llvm::raw_ostream ***)(a1 + 8);
      char v622 = v615[16];
      v623 = (char *)*((void *)v621 + 4);
      if ((unint64_t)v623 >= *((void *)v621 + 3))
      {
        llvm::raw_ostream::write(v621, v622);
      }
      else
      {
        *((void *)v621 + 4) = v623 + 1;
        char *v623 = v622;
      }
      unint64_t v624 = *((unsigned int *)v615 + 5);
      v625 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v626 = v624 & 0x7F | ((v624 > 0x7F) << 7);
        v627 = (char *)*((void *)v625 + 4);
        if ((unint64_t)v627 >= *((void *)v625 + 3))
        {
          v625 = llvm::raw_ostream::write(v625, v626);
        }
        else
        {
          *((void *)v625 + 4) = v627 + 1;
          char *v627 = v626;
        }
        BOOL v301 = v624 > 0x7F;
        v624 >>= 7;
      }
      while (v301);
      v615 += 24;
    }
    while (v615 != v620);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  v628 = (llvm::MCContext *)*v757;
  v777[0] = "__indirect_function_table";
  __int16 v779 = 259;
  uint64_t v629 = llvm::MCContext::lookupSymbol(v628, (const llvm::Twine *)v777);
  unint64_t v630 = v808;
  if (v808)
  {
    uint64_t v699 = v629;
    v700 = (unsigned int *)v807;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 9);
    v701 = **(llvm::raw_ostream ***)(a1 + 8);
    v702 = (unsigned char *)*((void *)v701 + 4);
    if ((unint64_t)v702 >= *((void *)v701 + 3))
    {
      llvm::raw_ostream::write(v701, 1);
    }
    else
    {
      *((void *)v701 + 4) = v702 + 1;
      unsigned char *v702 = 1;
    }
    *(void *)v813 = 0;
    if (sub_1CD40EA84(*(void *)(a1 + 120), *(_DWORD *)(a1 + 136), v699, v813)) {
      v703 = *(_DWORD **)v813;
    }
    else {
      v703 = (_DWORD *)(*(void *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
    }
    unint64_t v704 = v703[2];
    char v705 = 2 * (v703[2] != 0);
    v706 = **(llvm::raw_ostream ***)(a1 + 8);
    v707 = (char *)*((void *)v706 + 4);
    if ((unint64_t)v707 >= *((void *)v706 + 3))
    {
      llvm::raw_ostream::write(v706, v705);
    }
    else
    {
      *((void *)v706 + 4) = v707 + 1;
      char *v707 = v705;
    }
    if (v704)
    {
      v708 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v709 = v704 & 0x7F | ((v704 > 0x7F) << 7);
        v710 = (char *)*((void *)v708 + 4);
        if ((unint64_t)v710 >= *((void *)v708 + 3))
        {
          v708 = llvm::raw_ostream::write(v708, v709);
        }
        else
        {
          *((void *)v708 + 4) = v710 + 1;
          char *v710 = v709;
        }
        BOOL v301 = v704 > 0x7F;
        v704 >>= 7;
      }
      while (v301);
      v711 = **(llvm::raw_ostream ***)(a1 + 8);
      v712 = (unsigned char *)*((void *)v711 + 4);
      if ((unint64_t)v712 >= *((void *)v711 + 3))
      {
        llvm::raw_ostream::write(v711, 65);
      }
      else
      {
        *((void *)v711 + 4) = v712 + 1;
        unsigned char *v712 = 65;
      }
      v715 = **(llvm::raw_ostream ***)(a1 + 8);
      v716 = (unsigned char *)*((void *)v715 + 4);
      if ((unint64_t)v716 >= *((void *)v715 + 3))
      {
        llvm::raw_ostream::write(v715, 1);
      }
      else
      {
        *((void *)v715 + 4) = v716 + 1;
        unsigned char *v716 = 1;
      }
      v717 = **(llvm::raw_ostream ***)(a1 + 8);
      v718 = (unsigned char *)*((void *)v717 + 4);
      if ((unint64_t)v718 >= *((void *)v717 + 3))
      {
        llvm::raw_ostream::write(v717, 11);
      }
      else
      {
        *((void *)v717 + 4) = v718 + 1;
        unsigned char *v718 = 11;
      }
      v719 = **(llvm::raw_ostream ***)(a1 + 8);
      v720 = (unsigned char *)*((void *)v719 + 4);
      if ((unint64_t)v720 < *((void *)v719 + 3))
      {
        *((void *)v719 + 4) = v720 + 1;
        unsigned char *v720 = 0;
LABEL_1023:
        v725 = **(llvm::raw_ostream ***)(a1 + 8);
        unint64_t v726 = v630;
        do
        {
          char v727 = v726 & 0x7F | ((v726 > 0x7F) << 7);
          v728 = (char *)*((void *)v725 + 4);
          if ((unint64_t)v728 >= *((void *)v725 + 3))
          {
            v725 = llvm::raw_ostream::write(v725, v727);
          }
          else
          {
            *((void *)v725 + 4) = v728 + 1;
            char *v728 = v727;
          }
          BOOL v301 = v726 > 0x7F;
          v726 >>= 7;
        }
        while (v301);
        v729 = &v700[v630];
        do
        {
          unint64_t v730 = *v700;
          v731 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v732 = v730 & 0x7F | ((v730 > 0x7F) << 7);
            v733 = (char *)*((void *)v731 + 4);
            if ((unint64_t)v733 >= *((void *)v731 + 3))
            {
              v731 = llvm::raw_ostream::write(v731, v732);
            }
            else
            {
              *((void *)v731 + 4) = v733 + 1;
              char *v733 = v732;
            }
            BOOL v301 = v730 > 0x7F;
            v730 >>= 7;
          }
          while (v301);
          ++v700;
        }
        while (v700 != v729);
        sub_1CCBEA89C(a1, (uint64_t *)v777);
        goto LABEL_900;
      }
      char v721 = 0;
    }
    else
    {
      v713 = **(llvm::raw_ostream ***)(a1 + 8);
      v714 = (unsigned char *)*((void *)v713 + 4);
      if ((unint64_t)v714 >= *((void *)v713 + 3))
      {
        llvm::raw_ostream::write(v713, 65);
      }
      else
      {
        *((void *)v713 + 4) = v714 + 1;
        unsigned char *v714 = 65;
      }
      v722 = **(llvm::raw_ostream ***)(a1 + 8);
      v723 = (unsigned char *)*((void *)v722 + 4);
      if ((unint64_t)v723 >= *((void *)v722 + 3))
      {
        llvm::raw_ostream::write(v722, 1);
      }
      else
      {
        *((void *)v722 + 4) = v723 + 1;
        unsigned char *v723 = 1;
      }
      v719 = **(llvm::raw_ostream ***)(a1 + 8);
      v724 = (unsigned char *)*((void *)v719 + 4);
      if ((unint64_t)v724 < *((void *)v719 + 3))
      {
        *((void *)v719 + 4) = v724 + 1;
        unsigned char *v724 = 11;
        goto LABEL_1023;
      }
      char v721 = 11;
    }
    llvm::raw_ostream::write(v719, v721);
    goto LABEL_1023;
  }
LABEL_900:
  if (*(_DWORD *)(a1 + 584))
  {
    sub_1CCBEA6E0(a1, (uint64_t)v777, 12);
    unint64_t v631 = *(unsigned int *)(a1 + 584);
    v632 = **(llvm::raw_ostream ***)(a1 + 8);
    do
    {
      char v633 = v631 & 0x7F | ((v631 > 0x7F) << 7);
      v634 = (char *)*((void *)v632 + 4);
      if ((unint64_t)v634 >= *((void *)v632 + 3))
      {
        v632 = llvm::raw_ostream::write(v632, v633);
      }
      else
      {
        *((void *)v632 + 4) = v634 + 1;
        char *v634 = v633;
      }
      BOOL v301 = v631 > 0x7F;
      v631 >>= 7;
    }
    while (v301);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
  }
  unint64_t v635 = v811;
  if (v811)
  {
    v636 = (char *)v810;
    sub_1CCBEA6E0(a1, (uint64_t)v777, 10);
    v637 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v638 = v635;
    do
    {
      char v639 = v638 & 0x7F | ((v638 > 0x7F) << 7);
      v640 = (char *)*((void *)v637 + 4);
      if ((unint64_t)v640 >= *((void *)v637 + 3))
      {
        v637 = llvm::raw_ostream::write(v637, v639);
      }
      else
      {
        *((void *)v637 + 4) = v640 + 1;
        char *v640 = v639;
      }
      BOOL v301 = v638 > 0x7F;
      v638 >>= 7;
    }
    while (v301);
    v641 = &v636[16 * v635];
    v642 = v778[0];
    do
    {
      uint64_t v643 = *((void *)v636 + 1);
      unint64_t v644 = *(void *)v643 & 0xFFFFFFFFFFFFFFF8;
      if (!v644 && (*(_DWORD *)(v643 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v643 + 8) |= 4u;
        unint64_t v644 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v643 + 24));
        *(void *)uint64_t v643 = *(void *)v643 & 7 | v644;
        uint64_t v643 = *((void *)v636 + 1);
      }
      v645 = *(const llvm::MCSection **)(v644 + 16);
      *(void *)v813 = 0;
      if ((llvm::MCExpr::evaluateAsAbsolute(*(llvm::MCExpr **)(v643 + 176), (uint64_t *)v813, (const llvm::MCAsmLayout *)a3) & 1) == 0)goto LABEL_1045; {
      unint64_t v646 = *(void *)v813;
      }
      v647 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v648 = v646 & 0x7F | ((v646 > 0x7F) << 7);
        v649 = (char *)*((void *)v647 + 4);
        if ((unint64_t)v649 >= *((void *)v647 + 3))
        {
          v647 = llvm::raw_ostream::write(v647, v648);
        }
        else
        {
          *((void *)v647 + 4) = v649 + 1;
          char *v649 = v648;
        }
        BOOL v301 = v646 > 0x7F;
        v646 >>= 7;
      }
      while (v301);
      v650 = **(void ***)(a1 + 8);
      *((void *)v645 + 3llvm::StringTableBuilder::finalizeStringTable(this, 0) = (*(uint64_t (**)(void *))(*v650 + 80))(v650)
                             + v650[4]
                             - ((void)v642
                              + v650[2]);
      llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)v757, **(llvm::raw_ostream ***)(a1 + 8), v645, (const llvm::MCAsmLayout *)a3);
      v636 += 16;
    }
    while (v636 != v641);
    sub_1CCBEAB30(a1, *(void *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3), (uint64_t)v642, a3);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
    int v280 = (int)v778[1];
  }
  else
  {
    int v280 = 0;
  }
  if (*(_DWORD *)(a1 + 584))
  {
    sub_1CCBEA6E0(a1, (uint64_t)v777, 11);
    unint64_t v666 = *(unsigned int *)(a1 + 584);
    v667 = **(llvm::raw_ostream ***)(a1 + 8);
    do
    {
      char v668 = v666 & 0x7F | ((v666 > 0x7F) << 7);
      v669 = (char *)*((void *)v667 + 4);
      if ((unint64_t)v669 >= *((void *)v667 + 3))
      {
        v667 = llvm::raw_ostream::write(v667, v668);
      }
      else
      {
        *((void *)v667 + 4) = v669 + 1;
        char *v669 = v668;
      }
      BOOL v301 = v666 > 0x7F;
      v666 >>= 7;
    }
    while (v301);
    unsigned int v670 = *(_DWORD *)(a1 + 584);
    if (v670)
    {
      v671 = *(uint64_t **)(a1 + 576);
      v672 = &v671[10 * v670];
      v673 = v778[0];
      do
      {
        unint64_t v674 = *((unsigned int *)v671 + 6);
        v675 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v676 = v674 & 0x7F | ((v674 > 0x7F) << 7);
          v677 = (char *)*((void *)v675 + 4);
          if ((unint64_t)v677 >= *((void *)v675 + 3))
          {
            v675 = llvm::raw_ostream::write(v675, v676);
          }
          else
          {
            *((void *)v675 + 4) = v677 + 1;
            char *v677 = v676;
          }
          BOOL v301 = v674 > 0x7F;
          v674 >>= 7;
        }
        while (v301);
        if ((v671[3] & 2) != 0)
        {
          v678 = **(llvm::raw_ostream ***)(a1 + 8);
          v679 = (unsigned char *)*((void *)v678 + 4);
          if ((unint64_t)v679 >= *((void *)v678 + 3))
          {
            llvm::raw_ostream::write(v678, 0);
          }
          else
          {
            *((void *)v678 + 4) = v679 + 1;
            unsigned char *v679 = 0;
          }
        }
        if ((v671[3] & 1) == 0)
        {
          v680 = **(llvm::raw_ostream ***)(a1 + 8);
          if (*(unsigned char *)(*(void *)(a1 + 16) + 8)) {
            char v681 = 66;
          }
          else {
            char v681 = 65;
          }
          v682 = (char *)*((void *)v680 + 4);
          if ((unint64_t)v682 >= *((void *)v680 + 3))
          {
            llvm::raw_ostream::write(v680, v681);
          }
          else
          {
            *((void *)v680 + 4) = v682 + 1;
            char *v682 = v681;
          }
          uint64_t v683 = v671[4];
          v684 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            uint64_t v685 = v683 >> 7;
            if ((unint64_t)v683 < 0x40) {
              goto LABEL_967;
            }
            uint64_t v686 = ((unint64_t)v683 >> 6) & 1;
            if (v685 != -1) {
              LODWORD(v686) = 0;
            }
            if (v686 == 1)
            {
LABEL_967:
              char v687 = 0;
              int v688 = 1;
            }
            else
            {
              int v688 = 0;
              char v687 = 0x80;
            }
            char v689 = v687 | v683 & 0x7F;
            v690 = (char *)*((void *)v684 + 4);
            if ((unint64_t)v690 >= *((void *)v684 + 3))
            {
              v684 = llvm::raw_ostream::write(v684, v689);
            }
            else
            {
              *((void *)v684 + 4) = v690 + 1;
              char *v690 = v689;
            }
            uint64_t v683 = v685;
          }
          while (!v688);
          v691 = **(llvm::raw_ostream ***)(a1 + 8);
          v692 = (unsigned char *)*((void *)v691 + 4);
          if ((unint64_t)v692 >= *((void *)v691 + 3))
          {
            llvm::raw_ostream::write(v691, 11);
          }
          else
          {
            *((void *)v691 + 4) = v692 + 1;
            unsigned char *v692 = 11;
          }
        }
        unint64_t v693 = v671[7];
        v694 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v695 = v693 & 0x7F | ((v693 > 0x7F) << 7);
          v696 = (char *)*((void *)v694 + 4);
          if ((unint64_t)v696 >= *((void *)v694 + 3))
          {
            v694 = llvm::raw_ostream::write(v694, v695);
          }
          else
          {
            *((void *)v694 + 4) = v696 + 1;
            char *v696 = v695;
          }
          BOOL v301 = v693 > 0x7F;
          v693 >>= 7;
        }
        while (v301);
        uint64_t v697 = *v671;
        v698 = **(void ***)(a1 + 8);
        *(void *)(v697 + 24llvm::StringTableBuilder::finalizeStringTable(this, 0) = (*(uint64_t (**)(void *))(*v698 + 80))(v698)
                                + v698[4]
                                - ((void)v673
                                 + v698[2]);
        llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), (const char *)v671[6], v671[7]);
        v671 += 10;
        int v279 = v765;
      }
      while (v671 != v672);
    }
    else
    {
      v673 = v778[0];
    }
    sub_1CCBEAB30(a1, *(void *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3), (uint64_t)v673, a3);
    sub_1CCBEA89C(a1, (uint64_t *)v777);
    int v761 = (int)v778[1];
  }
  else
  {
    int v761 = 0;
  }
LABEL_436:
  int v283 = v769;
  if (v769 != (uint64_t *)&v770)
  {
    do
    {
      uint64_t v284 = (_DWORD *)v283[6];
      uint64_t v285 = (_DWORD *)v283[7];
      while (v284 != v285)
      {
        if (*v284 == 5) {
          v284[1] += *(_DWORD *)(a1 + 928);
        }
        v284 += 2;
      }
      uint64_t v286 = (uint64_t *)v283[1];
      if (v286)
      {
        do
        {
          v287 = v286;
          uint64_t v286 = (uint64_t *)*v286;
        }
        while (v286);
      }
      else
      {
        do
        {
          v287 = (uint64_t *)v283[2];
          BOOL v15 = *v287 == (void)v283;
          int v283 = v287;
        }
        while (!v15);
      }
      int v283 = v287;
    }
    while (v287 != (uint64_t *)&v770);
  }
  uint64_t v289 = *(void *)(a1 + 192);
  uint64_t v288 = *(void *)(a1 + 200);
  while (v289 != v288)
  {
    sub_1CCBE9DFC(a1, v289, v282, v281);
    v289 += 32;
  }
  if (v279 != 2)
  {
    long long v290 = (char *)v789;
    unint64_t v291 = v790;
    long long v292 = (unsigned __int16 *)v786;
    unint64_t v293 = v787;
    sub_1CCBEB1F8(a1, (uint64_t)v777, (uint64_t *)"linking", 7uLL);
    long long v294 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v295 = (unsigned char *)*((void *)v294 + 4);
    if ((unint64_t)v295 >= *((void *)v294 + 3))
    {
      llvm::raw_ostream::write(v294, 2);
      if (!v291) {
        goto LABEL_505;
      }
    }
    else
    {
      *((void *)v294 + 4) = v295 + 1;
      *unint64_t v295 = 2;
      if (!v291) {
        goto LABEL_505;
      }
    }
    int v296 = v280;
    sub_1CCBEA6E0(a1, (uint64_t)v813, 8);
    int v297 = **(llvm::raw_ostream ***)(a1 + 8);
    unint64_t v298 = v291;
    do
    {
      char v299 = v298 & 0x7F | ((v298 > 0x7F) << 7);
      uint64_t v300 = (char *)*((void *)v297 + 4);
      if ((unint64_t)v300 >= *((void *)v297 + 3))
      {
        int v297 = llvm::raw_ostream::write(v297, v299);
      }
      else
      {
        *((void *)v297 + 4) = v300 + 1;
        *uint64_t v300 = v299;
      }
      BOOL v301 = v298 > 0x7F;
      v298 >>= 7;
    }
    while (v301);
    uint64_t v302 = &v290[120 * v291];
    do
    {
      unint64_t v303 = v290[16];
      v304 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v305 = v303 & 0x7F | ((v303 > 0x7F) << 7);
        uint64_t v306 = (char *)*((void *)v304 + 4);
        if ((unint64_t)v306 >= *((void *)v304 + 3))
        {
          v304 = llvm::raw_ostream::write(v304, v305);
        }
        else
        {
          *((void *)v304 + 4) = v306 + 1;
          *uint64_t v306 = v305;
        }
        BOOL v301 = v303 > 0x7F;
        v303 >>= 7;
      }
      while (v301);
      unint64_t v307 = *((unsigned int *)v290 + 5);
      int v308 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v309 = v307 & 0x7F | ((v307 > 0x7F) << 7);
        v310 = (char *)*((void *)v308 + 4);
        if ((unint64_t)v310 >= *((void *)v308 + 3))
        {
          int v308 = llvm::raw_ostream::write(v308, v309);
        }
        else
        {
          *((void *)v308 + 4) = v310 + 1;
          char *v310 = v309;
        }
        BOOL v301 = v307 > 0x7F;
        v307 >>= 7;
      }
      while (v301);
      int v311 = v290[16];
      if (((1 << v311) & 0x35) != 0)
      {
        unint64_t v312 = *((unsigned int *)v290 + 24);
        v313 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v314 = v312 & 0x7F | ((v312 > 0x7F) << 7);
          unsigned int v315 = (char *)*((void *)v313 + 4);
          if ((unint64_t)v315 >= *((void *)v313 + 3))
          {
            v313 = llvm::raw_ostream::write(v313, v314);
          }
          else
          {
            *((void *)v313 + 4) = v315 + 1;
            *unsigned int v315 = v314;
          }
          BOOL v301 = v312 > 0x7F;
          v312 >>= 7;
        }
        while (v301);
        if ((*((_DWORD *)v290 + 5) & 0x50) != 0x10) {
          sub_1CCBEAA54(a1, *(char **)v290, *((void *)v290 + 1));
        }
      }
      else if (v311 == 1)
      {
        sub_1CCBEAA54(a1, *(char **)v290, *((void *)v290 + 1));
        if ((v290[20] & 0x10) == 0)
        {
          unint64_t v316 = *((unsigned int *)v290 + 24);
          v317 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v318 = v316 & 0x7F | ((v316 > 0x7F) << 7);
            unsigned int v319 = (char *)*((void *)v317 + 4);
            if ((unint64_t)v319 >= *((void *)v317 + 3))
            {
              v317 = llvm::raw_ostream::write(v317, v318);
            }
            else
            {
              *((void *)v317 + 4) = v319 + 1;
              *unsigned int v319 = v318;
            }
            BOOL v301 = v316 > 0x7F;
            v316 >>= 7;
          }
          while (v301);
          unint64_t v320 = *((void *)v290 + 13);
          v321 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v322 = v320 & 0x7F | ((v320 > 0x7F) << 7);
            v323 = (char *)*((void *)v321 + 4);
            if ((unint64_t)v323 >= *((void *)v321 + 3))
            {
              v321 = llvm::raw_ostream::write(v321, v322);
            }
            else
            {
              *((void *)v321 + 4) = v323 + 1;
              char *v323 = v322;
            }
            BOOL v301 = v320 > 0x7F;
            v320 >>= 7;
          }
          while (v301);
          unint64_t v324 = *((void *)v290 + 14);
          unsigned int v325 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v326 = v324 & 0x7F | ((v324 > 0x7F) << 7);
            v327 = (char *)*((void *)v325 + 4);
            if ((unint64_t)v327 >= *((void *)v325 + 3))
            {
              unsigned int v325 = llvm::raw_ostream::write(v325, v326);
            }
            else
            {
              *((void *)v325 + 4) = v327 + 1;
              char *v327 = v326;
            }
            BOOL v301 = v324 > 0x7F;
            v324 >>= 7;
          }
          while (v301);
        }
      }
      else
      {
        unint64_t v328 = *(unsigned int *)(*(void *)(a1 + 192) + 32 * *((unsigned int *)v290 + 24) + 28);
        v329 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v330 = v328 & 0x7F | ((v328 > 0x7F) << 7);
          v331 = (char *)*((void *)v329 + 4);
          if ((unint64_t)v331 >= *((void *)v329 + 3))
          {
            v329 = llvm::raw_ostream::write(v329, v330);
          }
          else
          {
            *((void *)v329 + 4) = v331 + 1;
            char *v331 = v330;
          }
          BOOL v301 = v328 > 0x7F;
          v328 >>= 7;
        }
        while (v301);
      }
      v290 += 120;
    }
    while (v290 != v302);
    sub_1CCBEA89C(a1, (uint64_t *)v813);
    char v281 = (const llvm::MCAsmLayout *)a3;
    uint64_t v282 = (llvm::MCAssembler *)v757;
    int v280 = v296;
LABEL_505:
    if (*(_DWORD *)(a1 + 584))
    {
      sub_1CCBEA6E0(a1, (uint64_t)v813, 5);
      unint64_t v332 = *(unsigned int *)(a1 + 584);
      unsigned int v333 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v334 = v332 & 0x7F | ((v332 > 0x7F) << 7);
        v335 = (char *)*((void *)v333 + 4);
        if ((unint64_t)v335 >= *((void *)v333 + 3))
        {
          unsigned int v333 = llvm::raw_ostream::write(v333, v334);
        }
        else
        {
          *((void *)v333 + 4) = v335 + 1;
          char *v335 = v334;
        }
        BOOL v301 = v332 > 0x7F;
        v332 >>= 7;
      }
      while (v301);
      int v336 = v280;
      unsigned int v337 = *(_DWORD *)(a1 + 584);
      if (v337)
      {
        uint64_t v338 = *(void *)(a1 + 576);
        uint64_t v339 = v338 + 80 * v337;
        do
        {
          sub_1CCBEAA54(a1, *(char **)(v338 + 8), *(void *)(v338 + 16));
          unint64_t v340 = *(unsigned int *)(v338 + 40);
          unint64_t v341 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v342 = v340 & 0x7F | ((v340 > 0x7F) << 7);
            unint64_t v343 = (char *)*((void *)v341 + 4);
            if ((unint64_t)v343 >= *((void *)v341 + 3))
            {
              unint64_t v341 = llvm::raw_ostream::write(v341, v342);
            }
            else
            {
              *((void *)v341 + 4) = v343 + 1;
              *unint64_t v343 = v342;
            }
            BOOL v301 = v340 > 0x7F;
            v340 >>= 7;
          }
          while (v301);
          unint64_t v344 = *(unsigned int *)(v338 + 44);
          uint64_t v345 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v346 = v344 & 0x7F | ((v344 > 0x7F) << 7);
            size_t v347 = (char *)*((void *)v345 + 4);
            if ((unint64_t)v347 >= *((void *)v345 + 3))
            {
              uint64_t v345 = llvm::raw_ostream::write(v345, v346);
            }
            else
            {
              *((void *)v345 + 4) = v347 + 1;
              *size_t v347 = v346;
            }
            BOOL v301 = v344 > 0x7F;
            v344 >>= 7;
          }
          while (v301);
          v338 += 80;
        }
        while (v338 != v339);
      }
      sub_1CCBEA89C(a1, (uint64_t *)v813);
      int v280 = v336;
    }
    if (v293)
    {
      sub_1CCBEA6E0(a1, (uint64_t)v813, 6);
      v348 = **(llvm::raw_ostream ***)(a1 + 8);
      unint64_t v349 = v293;
      do
      {
        char v350 = v349 & 0x7F | ((v349 > 0x7F) << 7);
        v351 = (char *)*((void *)v348 + 4);
        if ((unint64_t)v351 >= *((void *)v348 + 3))
        {
          v348 = llvm::raw_ostream::write(v348, v350);
        }
        else
        {
          *((void *)v348 + 4) = v351 + 1;
          char *v351 = v350;
        }
        BOOL v301 = v349 > 0x7F;
        v349 >>= 7;
      }
      while (v301);
      uint64_t v352 = &v292[4 * v293];
      do
      {
        unint64_t v353 = *v292;
        uint64_t v354 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v355 = v353 & 0x7F | ((v353 > 0x7F) << 7);
          v356 = (char *)*((void *)v354 + 4);
          if ((unint64_t)v356 >= *((void *)v354 + 3))
          {
            uint64_t v354 = llvm::raw_ostream::write(v354, v355);
          }
          else
          {
            *((void *)v354 + 4) = v356 + 1;
            char *v356 = v355;
          }
          BOOL v301 = v353 > 0x7F;
          v353 >>= 7;
        }
        while (v301);
        unint64_t v357 = *((unsigned int *)v292 + 1);
        uint64_t v358 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          char v359 = v357 & 0x7F | ((v357 > 0x7F) << 7);
          uint64_t v360 = (char *)*((void *)v358 + 4);
          if ((unint64_t)v360 >= *((void *)v358 + 3))
          {
            uint64_t v358 = llvm::raw_ostream::write(v358, v359);
          }
          else
          {
            *((void *)v358 + 4) = v360 + 1;
            *uint64_t v360 = v359;
          }
          BOOL v301 = v357 > 0x7F;
          v357 >>= 7;
        }
        while (v301);
        v292 += 4;
      }
      while (v292 != v352);
      sub_1CCBEA89C(a1, (uint64_t *)v813);
    }
    if (v771)
    {
      sub_1CCBEA6E0(a1, (uint64_t)v813, 7);
      unint64_t v361 = v771;
      uint64_t v362 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        char v363 = v361 & 0x7F | ((v361 > 0x7F) << 7);
        v364 = (char *)*((void *)v362 + 4);
        if ((unint64_t)v364 >= *((void *)v362 + 3))
        {
          uint64_t v362 = llvm::raw_ostream::write(v362, v363);
        }
        else
        {
          *((void *)v362 + 4) = v364 + 1;
          char *v364 = v363;
        }
        BOOL v301 = v361 > 0x7F;
        v361 >>= 7;
      }
      while (v301);
      uint64_t v365 = v769;
      if (v769 != (uint64_t *)&v770)
      {
        do
        {
          sub_1CCBEAA54(a1, (char *)v365[4], v365[5]);
          unint64_t v366 = **(llvm::raw_ostream ***)(a1 + 8);
          int v367 = (unsigned char *)*((void *)v366 + 4);
          if ((unint64_t)v367 >= *((void *)v366 + 3))
          {
            llvm::raw_ostream::write(v366, 0);
          }
          else
          {
            *((void *)v366 + 4) = v367 + 1;
            *int v367 = 0;
          }
          unint64_t v368 = (v365[7] - v365[6]) >> 3;
          v369 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            char v370 = v368 & 0x7F | ((v368 > 0x7F) << 7);
            v371 = (char *)*((void *)v369 + 4);
            if ((unint64_t)v371 >= *((void *)v369 + 3))
            {
              v369 = llvm::raw_ostream::write(v369, v370);
            }
            else
            {
              *((void *)v369 + 4) = v371 + 1;
              char *v371 = v370;
            }
            BOOL v301 = v368 > 0x7F;
            v368 >>= 7;
          }
          while (v301);
          v372 = (unsigned int *)v365[6];
          unint64_t v373 = (unsigned int *)v365[7];
          while (v372 != v373)
          {
            unint64_t v374 = *v372;
            v375 = **(llvm::raw_ostream ***)(a1 + 8);
            do
            {
              char v376 = v374 & 0x7F | ((v374 > 0x7F) << 7);
              unint64_t v377 = (char *)*((void *)v375 + 4);
              if ((unint64_t)v377 >= *((void *)v375 + 3))
              {
                v375 = llvm::raw_ostream::write(v375, v376);
              }
              else
              {
                *((void *)v375 + 4) = v377 + 1;
                *unint64_t v377 = v376;
              }
              BOOL v301 = v374 > 0x7F;
              v374 >>= 7;
            }
            while (v301);
            unint64_t v378 = v372[1];
            unsigned int v379 = **(llvm::raw_ostream ***)(a1 + 8);
            do
            {
              char v380 = v378 & 0x7F | ((v378 > 0x7F) << 7);
              BOOL v381 = (char *)*((void *)v379 + 4);
              if ((unint64_t)v381 >= *((void *)v379 + 3))
              {
                unsigned int v379 = llvm::raw_ostream::write(v379, v380);
              }
              else
              {
                *((void *)v379 + 4) = v381 + 1;
                *BOOL v381 = v380;
              }
              BOOL v301 = v378 > 0x7F;
              v378 >>= 7;
            }
            while (v301);
            v372 += 2;
          }
          uint64_t v382 = (uint64_t *)v365[1];
          if (v382)
          {
            do
            {
              unint64_t v383 = v382;
              uint64_t v382 = (uint64_t *)*v382;
            }
            while (v382);
          }
          else
          {
            do
            {
              unint64_t v383 = (uint64_t *)v365[2];
              BOOL v15 = *v383 == (void)v365;
              uint64_t v365 = v383;
            }
            while (!v15);
          }
          uint64_t v365 = v383;
        }
        while (v383 != (uint64_t *)&v770);
      }
      sub_1CCBEA89C(a1, (uint64_t *)v813);
    }
    sub_1CCBEA89C(a1, (uint64_t *)v777);
    sub_1CCBE9F14(a1, v280, "CODE", 4uLL, (uint64_t *)(a1 + 24), v384);
    sub_1CCBE9F14(a1, v761, "DATA", 4uLL, (uint64_t *)(a1 + 48), v385);
  }
  uint64_t v386 = *(void *)(a1 + 192);
  uint64_t v387 = *(void *)(a1 + 200);
  while (v386 != v387)
  {
    int v388 = sub_1CCBEB4BC(a1 + 232, (uint64_t *)(v386 + 16));
    int v389 = *(_DWORD *)(v386 + 28);
    uint64_t v390 = *(const void **)v386;
    size_t v391 = *(void *)(v386 + 8);
    v386 += 32;
    sub_1CCBE9F14(a1, v389, v390, v391, v388, v392);
  }
  uint64_t v393 = *(void *)(a1 + 216);
  if (v393) {
    sub_1CCBE9DFC(a1, v393, v282, v281);
  }
  uint64_t v394 = *(void *)(a1 + 224);
  if (v394) {
    sub_1CCBE9DFC(a1, v394, v282, v281);
  }
  uint64_t v395 = **(void ***)(a1 + 8);
  uint64_t v396 = (*(uint64_t (**)(void *))(*v395 + 80))(v395);
  uint64_t v397 = v395[4];
  uint64_t v398 = v395[2];
  sub_1CCBEC1F8(v770);
  if (v786 != v788) {
    free(v786);
  }
  if (v789 != v791) {
    free(v789);
  }
  if (v792 != v794) {
    free(v792);
  }
  if (v795 != v797) {
    free(v795);
  }
  if (v798 != &v800) {
    free(v798);
  }
  if (v801 != v803) {
    free(v801);
  }
  if (v804 != v806) {
    free(v804);
  }
  if (v807 != v809) {
    free(v807);
  }
  if (v810 != v812) {
    free(v810);
  }
  return v749 - (v751 + v750) + v397 + v396 - v398;
}

uint64_t *sub_1CCBE9B3C(uint64_t **a1, _OWORD *a2)
{
  int v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (!v4)
  {
    uint64_t v6 = a1 + 1;
LABEL_10:
    uint64_t v8 = (uint64_t *)operator new(0x48uLL);
    *((_OWORD *)v8 + 2) = *a2;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[7] = 0;
    v8[8] = 0;
    v8[6] = 0;
    v8[2] = (uint64_t)v6;
    void *v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    unint64_t v10 = v8;
    if (v9)
    {
      *a1 = v9;
      unint64_t v10 = *v5;
    }
    sub_1CB8358B8(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 6;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t **)v4;
      uint64_t v7 = (uint64_t)(v4 + 4);
      if (!sub_1CC016A40((uint64_t)(a1 + 2), (uint64_t)a2, (uint64_t)(v4 + 4))) {
        break;
      }
      uint64_t v4 = *v6;
      int v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!sub_1CC016A40((uint64_t)(a1 + 2), v7, (uint64_t)a2)) {
      break;
    }
    int v5 = v6 + 1;
    uint64_t v4 = v6[1];
    if (!v4) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = *v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v8 + 6;
}

unint64_t sub_1CCBE9C38(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  unint64_t result = 1;
  if ((v2 & 0x200) == 0 && !*(unsigned char *)(a1 + 44))
  {
    if (*(unsigned char *)(a1 + 42))
    {
      unint64_t result = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v2 & 0x1C00) == 0x800 && result == 0)
      {
        *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v2 | 4;
        unint64_t result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
        *(void *)a1 = *(void *)a1 & 7 | result;
        if (!result) {
          return result;
        }
      }
      else if (!result)
      {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 8);
    }
    return (v2 & 1) == 0 && (!*(unsigned char *)(a1 + 36) || *(_DWORD *)(a1 + 32) != 3) && *(unsigned char *)(a1 + 43) == 0;
  }
  return result;
}

void sub_1CCBE9CE8(uint64_t a1, const llvm::MCSymbol *a2, unsigned int a3)
{
  if (a3 <= 0x18 && ((1 << a3) & 0x10C1006) != 0)
  {
    v15[5] = v3;
    v15[6] = v4;
    uint64_t v6 = *(void *)(a1 + 8);
    Baseuint64_t Symbol = (uint64_t *)llvm::MCAsmLayout::getBaseSymbol(*(uint64_t ***)a1, a2);
    v15[0] = (uint64_t)BaseSymbol;
    v12[0] = 0;
    uint64_t v8 = (sub_1CD40EA84(*(void *)(v6 + 120), *(_DWORD *)(v6 + 136), (uint64_t)BaseSymbol, v12) & 1) != 0
       ? v12[0]
       : *(void *)(v6 + 120) + 16 * *(unsigned int *)(v6 + 136);
    int v9 = *(_DWORD *)(v8 + 8);
    int v14 = *(_DWORD *)(*(void *)(a1 + 16) + 8) + 1;
    sub_1CD40E370((uint64_t)v12, v6 + 96, v15, &v14);
    if (v13)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      unsigned int v11 = *(_DWORD *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v10 + 4 * v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v9;
      ++*(_DWORD *)(v10 + 8);
      sub_1CCBEA3A0(v6, BaseSymbol);
    }
  }
}

uint64_t sub_1CCBE9DFC(uint64_t a1, uint64_t a2, llvm::MCAssembler *a3, const llvm::MCAsmLayout *a4)
{
  uint64_t v8 = (uint64_t *)(a2 + 16);
  int v9 = *(const llvm::MCSection **)(a2 + 16);
  sub_1CCBEB1F8(a1, (uint64_t)v20, *(uint64_t **)a2, *(void *)(a2 + 8));
  uint64_t v10 = **(void ***)(a1 + 8);
  uint64_t v11 = (*(uint64_t (**)(void *))(*v10 + 80))(v10);
  uint64_t v12 = v10[4];
  uint64_t v13 = v10[2];
  LODWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v21;
  *((void *)v9 + 3llvm::StringTableBuilder::finalizeStringTable(this, 0) = v11 + v12 - (v21 + v13);
  llvm::MCAssembler::writeSectionData(a3, **(llvm::raw_ostream ***)(a1 + 8), v9, a4);
  int v14 = v22;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v14;
  sub_1CCBEA89C(a1, v20);
  BOOL v15 = sub_1CCBEB4BC(a1 + 232, v8);
  uint64_t v16 = *v15;
  uint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v15[1] - *v15) >> 3);
  uint64_t v18 = *(unsigned int *)(a2 + 24);

  return sub_1CCBEAB30(a1, v16, v17, v18, (uint64_t **)a4);
}

uint64_t sub_1CCBE9F14(uint64_t result, int a2, const void *a3, size_t a4, uint64_t *a5, __n128 a6)
{
  uint64_t v7 = *a5;
  uint64_t v6 = (char *)a5[1];
  if ((char *)*a5 == v6) {
    return result;
  }
  uint64_t v11 = result;
  if ((uint64_t)&v6[-v7] < 5121)
  {
LABEL_6:
    sub_1CCBEB528(v7, v6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3), 0, 0, a6);
  }
  else
  {
    uint64_t v12 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3);
    while (1)
    {
      int v14 = operator new(40 * v13, v12);
      if (v14) {
        break;
      }
      BOOL v15 = v13 > 1;
      v13 >>= 1;
      if (!v15) {
        goto LABEL_6;
      }
    }
    uint64_t v16 = v14;
    sub_1CCBEB528(v7, v6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3), (uint64_t)v14, v13, a6);
    operator delete(v16);
  }
  *((unsigned char *)&v66.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v66, "reloc.");
  if (a3)
  {
    if (a4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a4 >= 0x17)
    {
      uint64_t v22 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17) {
        uint64_t v22 = a4 | 7;
      }
      unint64_t v18 = v22 + 1;
      p_dst = (void **)operator new(v22 + 1);
      size_t v64 = a4;
      unint64_t v65 = v18 | 0x8000000000000000;
      long long __dst = p_dst;
      LODWORD(v1MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
    }
    else
    {
      HIBYTE(v65) = a4;
      p_dst = (void **)&__dst;
      LODWORD(v1MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
      if (!a4) {
        goto LABEL_18;
      }
    }
    memmove(p_dst, a3, a4);
LABEL_18:
    *((unsigned char *)p_dst + a4) = 0;
    char v21 = HIBYTE(v65);
    unsigned int v20 = (const std::string::value_type *)__dst;
    std::string::size_type v19 = v64;
    goto LABEL_19;
  }
  std::string::size_type v19 = 0;
  unsigned int v20 = 0;
  char v21 = 0;
  long long __dst = 0;
  size_t v64 = 0;
  unint64_t v65 = 0;
  LODWORD(v1MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
LABEL_19:
  BOOL v23 = v21 < 0;
  if (v21 >= 0) {
    unsigned int v24 = (const std::string::value_type *)&__dst;
  }
  else {
    unsigned int v24 = v20;
  }
  std::string::size_type v25 = v21 & 0x7F;
  if (v23) {
    std::string::size_type v26 = v19;
  }
  else {
    std::string::size_type v26 = v25;
  }
  unsigned int v27 = std::string::append(&v66, v24, v26);
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  uint64_t v68 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v68 >= 0) {
    unint64_t v29 = (uint64_t *)__p;
  }
  else {
    unint64_t v29 = (uint64_t *)__p[0];
  }
  if (v68 >= 0) {
    size_t v30 = HIBYTE(v68) & 0x7F;
  }
  else {
    size_t v30 = (size_t)__p[1];
  }
  sub_1CCBEB1F8(v11, (uint64_t)v69, v29, v30);
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(__dst);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  unint64_t v18 = v18;
  int v31 = **(llvm::raw_ostream ***)(v11 + 8);
  do
  {
    char v32 = v18 & 0x7F | ((v18 > 0x7F) << 7);
    unint64_t v33 = (char *)*((void *)v31 + 4);
    if ((unint64_t)v33 >= *((void *)v31 + 3))
    {
      int v31 = llvm::raw_ostream::write(v31, v32);
    }
    else
    {
      *((void *)v31 + 4) = v33 + 1;
      *unint64_t v33 = v32;
    }
    BOOL v15 = v18 > 0x7F;
    v18 >>= 7;
  }
  while (v15);
  unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3);
  size_t v35 = **(llvm::raw_ostream ***)(v11 + 8);
  do
  {
    char v36 = v34 & 0x7F | ((v34 > 0x7F) << 7);
    uint64_t v37 = (char *)*((void *)v35 + 4);
    if ((unint64_t)v37 >= *((void *)v35 + 3))
    {
      size_t v35 = llvm::raw_ostream::write(v35, v36);
    }
    else
    {
      *((void *)v35 + 4) = v37 + 1;
      char *v37 = v36;
    }
    BOOL v15 = v34 > 0x7F;
    v34 >>= 7;
  }
  while (v15);
  uint64_t v38 = *a5;
  uint64_t v39 = a5[1];
  if (*a5 != v39)
  {
    do
    {
      uint64_t v40 = *(void *)v38;
      uint64_t v41 = *(void *)(*(void *)(v38 + 32) + 240);
      LODWORD(v42) = sub_1CCBEB15C(v11, v38);
      unint64_t v43 = **(llvm::raw_ostream ***)(v11 + 8);
      int v44 = *(_DWORD *)(v38 + 24);
      __n128 v45 = (unsigned char *)*((void *)v43 + 4);
      if ((unint64_t)v45 >= *((void *)v43 + 3))
      {
        llvm::raw_ostream::write(v43, *(_DWORD *)(v38 + 24));
      }
      else
      {
        *((void *)v43 + 4) = v45 + 1;
        *__n128 v45 = v44;
      }
      unint64_t v46 = v41 + v40;
      uint64_t v47 = **(llvm::raw_ostream ***)(v11 + 8);
      do
      {
        char v48 = v46 & 0x7F | ((v46 > 0x7F) << 7);
        uint64_t v49 = (char *)*((void *)v47 + 4);
        if ((unint64_t)v49 >= *((void *)v47 + 3))
        {
          uint64_t v47 = llvm::raw_ostream::write(v47, v48);
        }
        else
        {
          *((void *)v47 + 4) = v49 + 1;
          *uint64_t v49 = v48;
        }
        BOOL v15 = v46 > 0x7F;
        v46 >>= 7;
      }
      while (v15);
      unint64_t v42 = v42;
      unint64_t v50 = **(llvm::raw_ostream ***)(v11 + 8);
      do
      {
        char v51 = v42 & 0x7F | ((v42 > 0x7F) << 7);
        unint64_t v52 = (char *)*((void *)v50 + 4);
        if ((unint64_t)v52 >= *((void *)v50 + 3))
        {
          unint64_t v50 = llvm::raw_ostream::write(v50, v51);
        }
        else
        {
          *((void *)v50 + 4) = v52 + 1;
          *unint64_t v52 = v51;
        }
        BOOL v15 = v42 > 0x7F;
        v42 >>= 7;
      }
      while (v15);
      unsigned int v53 = *(_DWORD *)(v38 + 24);
      if (v53 <= 0x19 && ((1 << v53) & 0x2E3CB38) != 0)
      {
        uint64_t v54 = *(void *)(v38 + 16);
        uint64_t v55 = **(llvm::raw_ostream ***)(v11 + 8);
        do
        {
          uint64_t v56 = v54 >> 7;
          if ((unint64_t)v54 < 0x40) {
            goto LABEL_68;
          }
          uint64_t v57 = ((unint64_t)v54 >> 6) & 1;
          if (v56 != -1) {
            LODWORD(v57) = 0;
          }
          if (v57 == 1)
          {
LABEL_68:
            char v58 = 0;
            int v59 = 1;
          }
          else
          {
            int v59 = 0;
            char v58 = 0x80;
          }
          char v60 = v58 | v54 & 0x7F;
          unsigned int v61 = (char *)*((void *)v55 + 4);
          if ((unint64_t)v61 >= *((void *)v55 + 3))
          {
            uint64_t v55 = llvm::raw_ostream::write(v55, v60);
          }
          else
          {
            *((void *)v55 + 4) = v61 + 1;
            *unsigned int v61 = v60;
          }
          uint64_t v54 = v56;
        }
        while (!v59);
      }
      v38 += 40;
    }
    while (v38 != v39);
  }
  return sub_1CCBEA89C(v11, v69);
}

void sub_1CCBEA3A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v19[0] = &v20;
  v19[1] = (void *)0x100000000;
  v21[0] = v22;
  v21[1] = (void *)0x400000000;
  void v22[4] = 0;
  uint64_t v4 = a2[15];
  if (v4)
  {
    sub_1CD59F0BC((uint64_t)v19, a2[15]);
    sub_1CD59F0BC((uint64_t)v21, v4 + 24);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 312);
  sub_1CD6BE664((uint64_t)v9, v19);
  uint64_t v13 = v5;
  sub_1CD6BF68C((uint64_t)v14, v9);
  int v18 = v13;
  sub_1CD6BEE4C((uint64_t)&v7, a1 + 280, (uint64_t)v14, &v18);
  if (v16 != &v17) {
    free(v16);
  }
  if (v14[0] != &v15) {
    free(v14[0]);
  }
  if (v11 != &v12) {
    free(v11);
  }
  if (v9[0] != &v10) {
    free(v9[0]);
  }
  if (v8) {
    sub_1CD6BEDC0(a1 + 304, v19);
  }
  int v6 = *(_DWORD *)(v7 + 64);
  v14[0] = a2;
  *((_DWORD *)sub_1CD40EB18(a1 + 72, (uint64_t *)v14) + 2) = v6;
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v19[0] != &v20) {
    free(v19[0]);
  }
}

char *sub_1CCBEA54C(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2 - *a1;
  size_t v10 = a4 - __src;
  unint64_t v11 = v8 + a4 - __src;
  unint64_t v12 = a1[2];
  if (*a1 + v8 == a2)
  {
    if (v12 < v11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + v8), v5, v10);
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
    }
    a1[1] = v8 + v10;
    return (char *)(v7 + v9);
  }
  else
  {
    if (v12 < v11) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v13 = (char *)(v7 + v9);
    uint64_t v15 = (char *)(v7 + v8);
    if (v8 - v9 < v10)
    {
      size_t __n = v8 - v9;
      a1[1] = v8 + v10;
      if (v9 != v8) {
        memcpy((void *)(v7 + v10 + v9), v13, v8 - v9);
      }
      if (__n)
      {
        uint64_t v16 = v13;
        do
        {
          char v17 = *v5++;
          *v16++ = v17;
          --__n;
        }
        while (__n);
      }
      if (v5 != a4) {
        memcpy(v15, v5, a4 - v5);
      }
    }
    else
    {
      sub_1CC2171BC(a1, &v15[-v10], (char *)(v7 + v8));
      if (&v15[-v10] != v13) {
        memmove(&v13[v10], v13, &v15[-v10] - v13);
      }
      if (v5 != a4) {
        memmove(v13, v5, v10);
      }
    }
  }
  return v13;
}

uint64_t sub_1CCBEA6E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = **(llvm::raw_ostream ***)(a1 + 8);
  int v6 = (char *)*((void *)v5 + 4);
  if ((unint64_t)v6 >= *((void *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, a3);
  }
  else
  {
    *((void *)v5 + 4) = v6 + 1;
    *int v6 = a3;
  }
  uint64_t v7 = **(void ***)(a1 + 8);
  *(void *)a2 = (*(uint64_t (**)(void *))(*v7 + 80))(v7) + v7[4] - v7[2];
  uint64_t v8 = **(llvm::raw_ostream ***)(a1 + 8);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    uint64_t v8 = llvm::raw_ostream::write(v8, 128);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 0x80;
  }
  int v10 = 3;
  do
  {
    unint64_t v11 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v11 >= *((void *)v8 + 3))
    {
      uint64_t v8 = llvm::raw_ostream::write(v8, 128);
    }
    else
    {
      *((void *)v8 + 4) = v11 + 1;
      *unint64_t v11 = 0x80;
    }
    --v10;
  }
  while (v10);
  unint64_t v12 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v12 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 0);
  }
  else
  {
    *((void *)v8 + 4) = v12 + 1;
    unsigned char *v12 = 0;
  }
  uint64_t v13 = **(void ***)(a1 + 8);
  *(void *)(a2 + 16) = (*(uint64_t (**)(void *))(*v13 + 80))(v13) + v13[4] - v13[2];
  int v14 = **(void ***)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*v14 + 80))(v14);
  *(void *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = result + v14[4] - v14[2];
  int v16 = *(_DWORD *)(a1 + 928);
  *(_DWORD *)(a1 + 92MEMORY[0x1D25D9CD0](*(void *)this, 8) = v16 + 1;
  *(_DWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t sub_1CCBEA89C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = **(void ***)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
  uint64_t v6 = v4[4] - v4[2] + result;
  if (v6)
  {
    unint64_t v7 = v6 - a2[1];
    if (HIDWORD(v7)) {
      llvm::report_fatal_error((llvm *)"section size does not fit in a uint32_t", (const llvm::Twine *)1);
    }
    uint64_t v8 = **(void **)(a1 + 8);
    uint64_t v9 = *a2;
    return sub_1CCBEA958(v8, v7, v9);
  }
  return result;
}

uint64_t sub_1CCBEA958(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  int v6 = 0;
  unint64_t v7 = a2;
  do
  {
    uint64_t v8 = v5;
    BOOL v9 = v5 < 4 || v7 > 0x7F;
    if (v9) {
      char v10 = 0x80;
    }
    else {
      char v10 = 0;
    }
    ++v5;
    v15[v8] = v10 & 0x80 | v7 & 0x7F;
    --v6;
    BOOL v9 = v7 > 0x7F;
    v7 >>= 7;
  }
  while (v9);
  unint64_t v11 = &v15[v5];
  if (v8 <= 3)
  {
    if (v5 != 4)
    {
      if (v5 <= 3) {
        int v12 = 3;
      }
      else {
        int v12 = v5;
      }
      uint64_t v13 = (v12 + v6);
      memset(v11, 128, v13 + 1);
      unint64_t v11 = &v15[v5 + 1 + v13];
    }
    *unint64_t v11 = 0;
    LODWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v11 + 1;
  }
  return (*(uint64_t (**)(uint64_t, unsigned char *, void, uint64_t))(*(void *)a1 + 104))(a1, v15, v11 - v15, a3);
}

llvm::raw_ostream *sub_1CCBEAA54(uint64_t a1, char *a2, size_t a3)
{
  int v6 = **(llvm::raw_ostream ***)(a1 + 8);
  unint64_t v7 = a3;
  do
  {
    char v8 = v7 & 0x7F | ((v7 > 0x7F) << 7);
    BOOL v9 = (char *)*((void *)v6 + 4);
    if ((unint64_t)v9 >= *((void *)v6 + 3))
    {
      int v6 = llvm::raw_ostream::write(v6, v8);
    }
    else
    {
      *((void *)v6 + 4) = v9 + 1;
      *BOOL v9 = v8;
    }
    BOOL v10 = v7 > 0x7F;
    v7 >>= 7;
  }
  while (v10);
  unint64_t v11 = **(llvm::raw_ostream ***)(a1 + 8);
  uint64_t result = (llvm::raw_ostream *)*((void *)v11 + 4);
  if (a3 <= *((void *)v11 + 3) - (void)result)
  {
    if (a3)
    {
      uint64_t result = (llvm::raw_ostream *)memcpy(result, a2, a3);
      *((void *)v11 + 4) += a3;
    }
  }
  else
  {
    return llvm::raw_ostream::write(v11, a2, a3);
  }
  return result;
}

uint64_t sub_1CCBEAB30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v52 = result;
  void v53[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a2 + 40 * a3;
    uint64_t v8 = **(void **)(result + 8);
    uint64_t v47 = result + 144;
    uint64_t v48 = result + 120;
    uint64_t v49 = result + 96;
    uint64_t v50 = result + 168;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v6 + 32) + 240) + a4 + *(void *)v6;
      switch(*(_DWORD *)(v6 + 24))
      {
        case 1:
        case 2:
        case 0xC:
        case 0x12:
        case 0x13:
        case 0x18:
LABEL_69:
          v53[0] = (uint64_t)llvm::MCAsmLayout::getBaseSymbol(a5, *(const llvm::MCSymbol **)(v6 + 8));
          int v43 = *(_DWORD *)(v6 + 24);
          if (v43 == 24 || v43 == 12) {
            unsigned int v45 = *((_DWORD *)sub_1CD40EB18(v49, v53) + 2) - 1;
          }
          else {
            unsigned int v45 = *((_DWORD *)sub_1CD40EB18(v49, v53) + 2);
          }
          uint64_t v12 = v45;
          break;
        case 3:
        case 4:
        case 5:
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x15:
        case 0x17:
        case 0x19:
LABEL_4:
          uint64_t v10 = *(void *)(v6 + 8);
          unint64_t AssociatedFragment = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
          if (!AssociatedFragment && (*(_DWORD *)(v10 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v10 + 8) |= 4u;
            unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v10 + 24));
            *(void *)uint64_t v10 = *(void *)v10 & 7 | AssociatedFragment;
          }
          if (!AssociatedFragment) {
            goto LABEL_6;
          }
          unsigned int v24 = sub_1CD697878(v50, (uint64_t *)(v6 + 8));
          uint64_t v22 = *(void *)(*(void *)(v52 + 576) + 80 * *((unsigned int *)v24 + 2) + 32);
          uint64_t v23 = v24[2] + *(void *)(v6 + 16);
          goto LABEL_21;
        case 6:
          uint64_t v12 = sub_1CCBEB15C(v52, v6);
          break;
        case 7:
        case 0xD:
          uint64_t v13 = (uint64_t *)(v6 + 8);
          uint64_t v14 = *(void *)(v6 + 8);
          int v15 = *(unsigned __int8 *)(v14 + 36);
          int v16 = *(_DWORD *)(v14 + 32);
          if (v15) {
            BOOL v17 = v16 == 2;
          }
          else {
            BOOL v17 = 0;
          }
          if (v17)
          {
            switch(*(_DWORD *)(v6 + 24))
            {
              case 8:
              case 9:
                goto LABEL_13;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_69;
              default:
                goto LABEL_75;
            }
          }
          uint64_t v46 = v47;
          goto LABEL_81;
        case 8:
        case 9:
        case 0x16:
LABEL_13:
          uint64_t v18 = *(void *)(v6 + 8);
          unint64_t v19 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
          if (!v19 && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v18 + 8) |= 4u;
            unint64_t v19 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
            *(void *)uint64_t v18 = *(void *)v18 & 7 | v19;
          }
          if (v19)
          {
            uint64_t v20 = *(void *)(v6 + 8);
            unint64_t v21 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
            if (!v21 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v20 + 8) |= 4u;
              unint64_t v21 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
              *(void *)uint64_t v20 = *(void *)v20 & 7 | v21;
            }
            uint64_t v22 = *(void *)(*(void *)(v21 + 16) + 240);
            uint64_t v23 = *(void *)(v6 + 16);
LABEL_21:
            uint64_t v12 = v23 + v22;
          }
          else
          {
LABEL_6:
            uint64_t v12 = 0;
          }
          break;
        default:
LABEL_75:
          uint64_t v13 = (uint64_t *)(v6 + 8);
          uint64_t v46 = v48;
LABEL_81:
          uint64_t v12 = *((unsigned int *)sub_1CD40EB18(v46, v13) + 2);
          break;
      }
      switch(*(_DWORD *)(v6 + 24))
      {
        case 1:
        case 4:
        case 0xB:
        case 0xC:
        case 0x15:
          uint64_t v25 = 0;
          uint64_t v26 = (int)v12;
          while (1)
          {
            uint64_t v27 = v26;
            uint64_t v28 = v25;
            char v29 = v26 & 0x7F;
            if ((unint64_t)v26 <= 0x3F) {
              break;
            }
            v26 >>= 7;
            if (v27 >> 7 == -1) {
              int v30 = ((unint64_t)v27 >> 6) & 1;
            }
            else {
              int v30 = 0;
            }
            ++v25;
            if ((v30 & ((v28 + 1) > 4)) != 0) {
              char v31 = 0;
            }
            else {
              char v31 = 0x80;
            }
            *((unsigned char *)v53 + v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v31 | v29;
            if (v30 == 1)
            {
              char v32 = (char *)v53 + v25;
              if (v25 > 4) {
                goto LABEL_66;
              }
LABEL_49:
              uint64_t v38 = (v27 >> 63) & 0x7F;
              if (v25 > 3) {
                goto LABEL_65;
              }
              int v39 = v38 | 0xFFFFFF80;
              uint64_t v40 = (3 - v25);
              goto LABEL_64;
            }
          }
          LODWORD(v25) = v25 + 1;
          *((unsigned char *)v53 + v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v29 | (((v28 + 1) < 5) << 7);
          char v32 = (char *)v53 + v28 + 1;
          if (v25 > 4) {
            goto LABEL_66;
          }
          goto LABEL_49;
        case 2:
        case 5:
        case 8:
        case 9:
        case 0xD:
        case 0x17:
          LODWORD(v53[0]) = v12;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v53, 4, v9);
          goto LABEL_67;
        case 0xE:
          uint64_t v33 = 0;
          while (1)
          {
            uint64_t v34 = v12;
            uint64_t v28 = v33;
            char v35 = v12 & 0x7F;
            if ((unint64_t)v12 <= 0x3F) {
              goto LABEL_61;
            }
            v12 >>= 7;
            if (v34 >> 7 == -1) {
              int v41 = ((unint64_t)v34 >> 6) & 1;
            }
            else {
              int v41 = 0;
            }
            ++v33;
            if ((v41 & ((v28 + 1) > 9)) != 0) {
              char v42 = 0;
            }
            else {
              char v42 = 0x80;
            }
            *((unsigned char *)v53 + v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v42 | v35;
            if (v41 == 1) {
              goto LABEL_45;
            }
          }
        case 0xF:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x19:
          uint64_t v33 = 0;
          break;
        case 0x10:
        case 0x13:
        case 0x16:
          v53[0] = v12;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v53, 8, v9);
          goto LABEL_67;
        default:
          uint64_t result = sub_1CCBEA958(v8, v12, v9);
          goto LABEL_67;
      }
      while (1)
      {
        uint64_t v34 = v12;
        uint64_t v28 = v33;
        char v35 = v12 & 0x7F;
        if ((unint64_t)v12 <= 0x3F) {
          break;
        }
        v12 >>= 7;
        if (v34 >> 7 == -1) {
          int v36 = ((unint64_t)v34 >> 6) & 1;
        }
        else {
          int v36 = 0;
        }
        ++v33;
        if ((v36 & ((v28 + 1) > 9)) != 0) {
          char v37 = 0;
        }
        else {
          char v37 = 0x80;
        }
        *((unsigned char *)v53 + v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v37 | v35;
        if (v36 == 1)
        {
LABEL_45:
          char v32 = (char *)v53 + v33;
          if (v33 > 9) {
            goto LABEL_66;
          }
          goto LABEL_62;
        }
      }
LABEL_61:
      LODWORD(v33) = v28 + 1;
      *((unsigned char *)v53 + v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = v35 | (((v28 + 1) < 0xA) << 7);
      char v32 = (char *)v53 + v28 + 1;
      if ((v28 + 1) > 9) {
        goto LABEL_66;
      }
LABEL_62:
      uint64_t v38 = (v34 >> 63) & 0x7F;
      if (v33 <= 8)
      {
        int v39 = v38 | 0xFFFFFF80;
        uint64_t v40 = (8 - v33);
LABEL_64:
        memset(v32, v39, v40 + 1);
        char v32 = (char *)v53 + v28 + v40 + 2;
      }
LABEL_65:
      *char v32 = v38;
      LODWORD(v32) = v32 + 1;
LABEL_66:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)v8 + 104))(v8, v53, v32 - v53, v9);
LABEL_67:
      v6 += 40;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_1CCBEB15C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24) == 6)
  {
    uint64_t v4 = (uint64_t *)(a2 + 8);
    uint64_t v5 = a1 + 72;
    if ((sub_1CD40EA84(*(void *)(a1 + 72), *(_DWORD *)(a1 + 88), *(void *)(a2 + 8), v8) & 1) == 0)
    {
      uint64_t v6 = sub_1CD6ACAC0((unsigned char *)*v4);
      __int16 v9 = 1283;
      v8[0] = "symbol not found in type index space: ";
      v8[2] = v6;
      v8[3] = v7;
      llvm::report_fatal_error((llvm *)v8, (const llvm::Twine *)1);
    }
    int v2 = (unsigned int *)(sub_1CD40EB18(v5, v4) + 1);
  }
  else
  {
    int v2 = (unsigned int *)(*(void *)(a2 + 8) + 16);
  }
  return *v2;
}

uint64_t sub_1CCBEB1F8(uint64_t a1, uint64_t a2, uint64_t *a3, size_t a4)
{
  sub_1CCBEA6E0(a1, a2, 0);
  uint64_t v8 = **(void ***)(a1 + 8);
  *(void *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = (*(uint64_t (**)(void *))(*v8 + 80))(v8) + v8[4] - v8[2];
  if (a4 == 10 && (*a3 == 0x61676E616C635F5FLL ? (BOOL v9 = *((unsigned __int16 *)a3 + 4) == 29811) : (BOOL v9 = 0), v9))
  {
    int v30 = 0;
    uint64_t v35 = 0;
    int v36 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    char v34 = 0;
    uint64_t v31 = 0;
    char v29 = &unk_1F2646D90;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 10);
    uint64_t v12 = **(void ***)(a1 + 8);
    int v13 = (*(uint64_t (**)(void *))(*v12 + 80))(v12);
    uint64_t v14 = v12[4];
    uint64_t v15 = v12[2];
    int v16 = v13 + v14 - v15;
    int v17 = v16 + 14;
    int v18 = ((v16 + 14) & 0xFFFFFFFC) - v16;
    unint64_t v19 = **(llvm::raw_ostream ***)(a1 + 8);
    if ((v18 - 10) >= 2) {
      char v20 = -118;
    }
    else {
      char v20 = 10;
    }
    unint64_t v21 = (char *)*((void *)v19 + 4);
    if ((unint64_t)v21 >= *((void *)v19 + 3))
    {
      unint64_t v19 = llvm::raw_ostream::write(v19, v20);
    }
    else
    {
      *((void *)v19 + 4) = v21 + 1;
      *unint64_t v21 = v20;
    }
    if ((v18 - 10) >= 2)
    {
      if ((v18 - 11) >= 2)
      {
        int v22 = v13 + v14 - v15 - (v17 & 0xFFFFFFFC) + 12;
        do
        {
          uint64_t v23 = (unsigned char *)*((void *)v19 + 4);
          if ((unint64_t)v23 >= *((void *)v19 + 3))
          {
            unint64_t v19 = llvm::raw_ostream::write(v19, 128);
          }
          else
          {
            *((void *)v19 + 4) = v23 + 1;
            *uint64_t v23 = 0x80;
          }
        }
        while (!__CFADD__(v22++, 1));
      }
      uint64_t v25 = (unsigned char *)*((void *)v19 + 4);
      if ((unint64_t)v25 >= *((void *)v19 + 3))
      {
        llvm::raw_ostream::write(v19, 0);
      }
      else
      {
        *((void *)v19 + 4) = v25 + 1;
        unsigned char *v25 = 0;
      }
    }
    uint64_t v26 = **(llvm::raw_ostream ***)(a1 + 8);
    uint64_t v27 = *((void *)v26 + 4);
    if ((unint64_t)(*((void *)v26 + 3) - v27) > 9)
    {
      uint64_t v28 = *a3;
      *(_WORD *)(v27 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *((_WORD *)a3 + 4);
      *(void *)uint64_t v27 = v28;
      *((void *)v26 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v26, (const char *)a3, 0xAuLL);
    }
    llvm::raw_null_ostream::~raw_null_ostream((llvm::raw_null_ostream *)&v29);
  }
  else
  {
    sub_1CCBEAA54(a1, (char *)a3, a4);
  }
  uint64_t v10 = **(void ***)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(void *))(*v10 + 80))(v10);
  *(void *)(a2 + 16) = result + v10[4] - v10[2];
  return result;
}

void *sub_1CCBEB4BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CBF98030(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t v5 = v8;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CCBE5750(a1, a2, v8);
    uint64_t v6 = *a2;
    v5[2] = 0;
    void v5[3] = 0;
    void *v5 = v6;
    v5[1] = 0;
  }
  return v5 + 1;
}

__n128 sub_1CCBEB528(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      uint64_t v8 = a2 - 40;
      if (*(void *)(*((void *)a2 - 1) + 240) + *((void *)a2 - 5) < *(void *)(*(void *)(a1 + 32) + 240)
                                                                          + *(void *)a1)
      {
        uint64_t result = *(__n128 *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *((void *)a2 - 1);
        long long v12 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)(a1 + 16) = v12;
        *(void *)(a1 + 32) = v11;
        *((void *)a2 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v10;
        *(__n128 *)uint64_t v8 = result;
        *(_OWORD *)(a2 - 24) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v25 = a4;
      unint64_t v26 = a3 >> 1;
      uint64_t v27 = (void *)(a1 + 40 * (a3 >> 1));
      unint64_t v28 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v29 = sub_1CCBEB844(a1, v27, v28, a4, result);
        uint64_t v30 = v25 + 40 * v26;
        result.n128_u64[0] = sub_1CCBEB844(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v30, v29).n128_u64[0];
        unint64_t v31 = v25 + 40 * a3;
        uint64_t v32 = v30;
        while (v32 != v31)
        {
          if (*(void *)(*(void *)(v32 + 32) + 240) + *(void *)v32 >= *(void *)(*(void *)(v25 + 32) + 240)
                                                                            + *(void *)v25)
          {
            uint64_t result = *(__n128 *)v25;
            long long v34 = *(_OWORD *)(v25 + 16);
            *(void *)(v7 + 32) = *(void *)(v25 + 32);
            *(__n128 *)uint64_t v7 = result;
            *(_OWORD *)(v7 + 16) = v34;
            v25 += 40;
          }
          else
          {
            uint64_t result = *(__n128 *)v32;
            long long v33 = *(_OWORD *)(v32 + 16);
            *(void *)(v7 + 32) = *(void *)(v32 + 32);
            *(__n128 *)uint64_t v7 = result;
            *(_OWORD *)(v7 + 16) = v33;
            v32 += 40;
          }
          v7 += 40;
          if (v25 == v30)
          {
            if (v32 != v31)
            {
              uint64_t v35 = 0;
              do
              {
                uint64_t v36 = v7 + v35;
                uint64_t result = *(__n128 *)(v32 + v35);
                long long v37 = *(_OWORD *)(v32 + v35 + 16);
                *(void *)(v36 + 32) = *(void *)(v32 + v35 + 32);
                *(__n128 *)uint64_t v36 = result;
                *(_OWORD *)(v36 + 16) = v37;
                v35 += 40;
              }
              while (v32 + v35 != v31);
            }
            return result;
          }
        }
        if (v25 != v30)
        {
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = v7 + v38;
            uint64_t result = *(__n128 *)(v25 + v38);
            long long v40 = *(_OWORD *)(v25 + v38 + 16);
            *(void *)(v39 + 32) = *(void *)(v25 + v38 + 32);
            *(__n128 *)uint64_t v39 = result;
            *(_OWORD *)(v39 + 16) = v40;
            v38 += 40;
          }
          while (v25 + v38 != v30);
        }
      }
      else
      {
        sub_1CCBEB528(a1, v27, v28, a4, a5);
        sub_1CCBEB528(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v25, a5);
        sub_1CCBEBB28((char *)v7, (char *)(v7 + 40 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v25, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      uint64_t v14 = (__n128 *)(a1 + 40);
      if ((char *)(a1 + 40) != a2)
      {
        uint64_t v15 = 0;
        int v16 = (__n128 *)a1;
        do
        {
          int v17 = v14;
          unint64_t v18 = v14->n128_u64[0];
          unint64_t v19 = v16[4].n128_u64[1];
          if (*(void *)(v19 + 240) + v18 < *(void *)(v16[2].n128_u64[0] + 240) + v16->n128_u64[0])
          {
            __n128 v41 = v16[3];
            unint64_t v42 = v16[4].n128_u64[0];
            uint64_t v20 = v15;
            while (1)
            {
              uint64_t v21 = a1 + v20;
              long long v22 = *(_OWORD *)(a1 + v20 + 16);
              *(_OWORD *)(v21 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(_OWORD *)(a1 + v20);
              *(_OWORD *)(v21 + 56) = v22;
              *(void *)(v21 + 72) = *(void *)(a1 + v20 + 32);
              if (!v20) {
                break;
              }
              v20 -= 40;
              if (*(void *)(v19 + 240) + v18 >= *(void *)(*(void *)(v21 - 8) + 240) + *(void *)(v21 - 40))
              {
                uint64_t v23 = a1 + v20 + 40;
                goto LABEL_15;
              }
            }
            uint64_t v23 = a1;
LABEL_15:
            *(void *)uint64_t v23 = v18;
            uint64_t result = v41;
            *(__n128 *)(v23 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v41;
            *(void *)(v23 + 24) = v42;
            *(void *)(v23 + 32) = v19;
          }
          uint64_t v14 = (__n128 *)((char *)v17 + 40);
          v15 += 40;
          int v16 = v17;
        }
        while (&v17[2].n128_i8[8] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1CCBEB844(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v8 = (void *)a1;
    if (a3 == 2)
    {
      uint64_t v10 = (__n128 *)(a2 - 5);
      if (*(void *)(*(a2 - 1) + 240) + *(a2 - 5) >= *(void *)(*(void *)(a1 + 32) + 240) + *(void *)a1)
      {
        __n128 v27 = *(__n128 *)a1;
        long long v28 = *(_OWORD *)(a1 + 16);
        *(void *)(a4 + 32) = *(void *)(a1 + 32);
        *(__n128 *)a4 = v27;
        *(_OWORD *)(a4 + 16) = v28;
        uint64_t result = *v10;
        long long v13 = *(_OWORD *)(a2 - 3);
        uint64_t v14 = *(a2 - 1);
      }
      else
      {
        __n128 v11 = *v10;
        long long v12 = *(_OWORD *)(a2 - 3);
        *(void *)(a4 + 32) = *(a2 - 1);
        *(__n128 *)a4 = v11;
        *(_OWORD *)(a4 + 16) = v12;
        uint64_t result = *(__n128 *)a1;
        long long v13 = *(_OWORD *)(a1 + 16);
        uint64_t v14 = *(void *)(a1 + 32);
      }
      *(void *)(a4 + 72) = v14;
      *(__n128 *)(a4 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = result;
      *(_OWORD *)(a4 + 56) = v13;
    }
    else if (a3 == 1)
    {
      uint64_t result = *(__n128 *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      __n128 v29 = (void *)(a1 + 40 * (a3 >> 1));
      sub_1CCBEB528(a1, v29, a3 >> 1, a4, a3 >> 1);
      sub_1CCBEB528(&v8[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 40 * (a3 >> 1), a3 - (a3 >> 1));
      uint64_t v30 = &v8[5 * (a3 >> 1)];
      while (v30 != a2)
      {
        if (*(void *)(v30[4] + 240) + *v30 >= *(void *)(v8[4] + 240) + *v8)
        {
          uint64_t result = *(__n128 *)v8;
          long long v32 = *((_OWORD *)v8 + 1);
          *(void *)(v5 + 32) = v8[4];
          *(__n128 *)uint64_t v5 = result;
          *(_OWORD *)(v5 + 16) = v32;
          v8 += 5;
        }
        else
        {
          uint64_t result = *(__n128 *)v30;
          long long v31 = *((_OWORD *)v30 + 1);
          *(void *)(v5 + 32) = v30[4];
          *(__n128 *)uint64_t v5 = result;
          *(_OWORD *)(v5 + 16) = v31;
          v30 += 5;
        }
        v5 += 40;
        if (v8 == v29)
        {
          if (v30 != a2)
          {
            uint64_t v33 = 0;
            do
            {
              uint64_t v34 = v5 + v33 * 8;
              uint64_t result = *(__n128 *)&v30[v33];
              long long v35 = *(_OWORD *)&v30[v33 + 2];
              *(void *)(v34 + 32) = v30[v33 + 4];
              *(__n128 *)uint64_t v34 = result;
              *(_OWORD *)(v34 + 16) = v35;
              v33 += 5;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v8 != v29)
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = v5 + v36 * 8;
          uint64_t result = *(__n128 *)&v8[v36];
          long long v38 = *(_OWORD *)&v8[v36 + 2];
          *(void *)(v37 + 32) = v8[v36 + 4];
          *(__n128 *)uint64_t v37 = result;
          *(_OWORD *)(v37 + 16) = v38;
          v36 += 5;
        }
        while (&v8[v36] != v29);
      }
    }
    else if ((void *)a1 != a2)
    {
      uint64_t result = *(__n128 *)a1;
      long long v15 = *(_OWORD *)(a1 + 16);
      *(void *)(a4 + 32) = *(void *)(a1 + 32);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      int v16 = (void *)(a1 + 40);
      if ((void *)(a1 + 40) != a2)
      {
        uint64_t v17 = 0;
        uint64_t v18 = a4;
        do
        {
          unint64_t v19 = v8;
          uint64_t v20 = v18;
          uint64_t v8 = v16;
          v18 += 40;
          unint64_t v21 = *(void *)(v19[9] + 240) + *v16;
          uint64_t v22 = v18;
          if (v21 < *(void *)(*(void *)(v20 + 32) + 240) + *(void *)v20)
          {
            long long v23 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
            *(_OWORD *)(v18 + 16) = v23;
            *(void *)(v18 + 32) = *(void *)(v20 + 32);
            uint64_t v22 = a4;
            if (v20 != a4)
            {
              uint64_t v24 = v17;
              while (1)
              {
                uint64_t v22 = a4 + v24;
                if (*(void *)(v19[9] + 240) + *v8 >= *(void *)(*(void *)(a4 + v24 - 8) + 240)
                                                        + *(void *)(a4 + v24 - 40))
                  break;
                long long v25 = *(_OWORD *)(a4 + v24 - 24);
                *(_OWORD *)uint64_t v22 = *(_OWORD *)(a4 + v24 - 40);
                *(_OWORD *)(v22 + 16) = v25;
                *(void *)(v22 + 32) = *(void *)(a4 + v24 - 8);
                v24 -= 40;
                if (!v24)
                {
                  uint64_t v22 = a4;
                  break;
                }
              }
            }
          }
          uint64_t result = *(__n128 *)v8;
          long long v26 = *((_OWORD *)v8 + 1);
          *(void *)(v22 + 32) = v8[4];
          *(__n128 *)uint64_t v22 = result;
          *(_OWORD *)(v22 + 16) = v26;
          int v16 = v8 + 5;
          v17 += 40;
        }
        while (v8 + 5 != a2);
      }
    }
  }
  return result;
}

char *sub_1CCBEBB28(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    long long v9 = result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v10 = 0;
      uint64_t v11 = -a4;
      while (1)
      {
        long long v12 = &v9[v10];
        if (*(void *)(*((void *)a2 + 4) + 240) + *(void *)a2 < *(void *)(*(void *)&v9[v10 + 32] + 240)
                                                                      + *(void *)&v9[v10])
          break;
        v10 += 40;
        BOOL v76 = __CFADD__(v11++, 1);
        if (v76) {
          return result;
        }
      }
      uint64_t v13 = -v11;
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          unint64_t v89 = &v9[v10];
          uint64_t v123 = *(void *)&v9[v10 + 32];
          long long v113 = *(_OWORD *)&v9[v10];
          long long v118 = *(_OWORD *)&v9[v10 + 16];
          long long v90 = *(_OWORD *)a2;
          long long v91 = *((_OWORD *)a2 + 1);
          *((void *)v89 + 4) = *((void *)a2 + 4);
          *(_OWORD *)unint64_t v89 = v90;
          *((_OWORD *)v89 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v91;
          *((void *)a2 + 4) = v123;
          *(_OWORD *)a2 = v113;
          *((_OWORD *)a2 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v118;
          return result;
        }
        if (v11 > 0) {
          uint64_t v13 = 1 - v11;
        }
        uint64_t v24 = v13 >> 1;
        uint64_t v18 = &v9[40 * (v13 >> 1) + v10];
        int v16 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
          int v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            __n128 v27 = &v16[40 * (v25 >> 1)];
            unint64_t v28 = *(void *)(*((void *)v27 + 4) + 240) + *(void *)v27;
            __n128 v29 = v27 + 40;
            v25 += ~(v25 >> 1);
            if (v28 < *(void *)(*(void *)&v9[40 * v24 + 32 + v10] + 240) + *(void *)v18) {
              int v16 = v29;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3);
        long long v23 = &v9[40 * v24 + v10];
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v14 = a5;
        }
        else {
          uint64_t v14 = a5 + 1;
        }
        uint64_t v15 = v14 >> 1;
        int v16 = &a2[40 * (v14 >> 1)];
        if (v12 == a2)
        {
          long long v23 = a2;
          uint64_t v18 = a2;
        }
        else
        {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9 - v10) >> 3);
          uint64_t v18 = &v9[v10];
          do
          {
            unint64_t v19 = v17 >> 1;
            uint64_t v20 = &v18[40 * (v17 >> 1)];
            unint64_t v21 = *(void *)(*((void *)v20 + 4) + 240) + *(void *)v20;
            uint64_t v22 = v20 + 40;
            v17 += ~(v17 >> 1);
            if (*(void *)(*(void *)&a2[40 * v15 + 32] + 240) + *(void *)v16 < v21) {
              unint64_t v17 = v19;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v17);
          long long v23 = v18;
        }
        uint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v9 - v10) >> 3);
      }
      uint64_t v30 = v16;
      if (v18 != a2)
      {
        uint64_t v30 = v23;
        if (a2 != v16)
        {
          long long v31 = v18 + 40;
          if (v18 + 40 == a2)
          {
            uint64_t v120 = *((void *)v18 + 4);
            long long v110 = *(_OWORD *)v18;
            long long v115 = *((_OWORD *)v18 + 1);
            uint64_t v37 = (char *)(v16 - a2);
            int v96 = a6;
            uint64_t v98 = v23;
            long long v38 = a3;
            uint64_t v102 = a5;
            uint64_t v104 = a7;
            uint64_t v100 = v15;
            uint64_t v106 = v24;
            memmove(v18, a2, v16 - a2);
            long long v23 = v98;
            uint64_t v15 = v100;
            a7 = v104;
            uint64_t v24 = v106;
            a5 = v102;
            a3 = v38;
            a6 = v96;
            uint64_t v30 = &v37[(void)v18];
            *(_OWORD *)uint64_t v30 = v110;
            *((_OWORD *)v30 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v115;
            *((void *)v30 + 4) = v120;
          }
          else
          {
            long long v32 = a2 + 40;
            if (a2 + 40 == v16)
            {
              uint64_t v121 = *((void *)v16 - 1);
              long long v111 = *(_OWORD *)(v16 - 40);
              long long v116 = *(_OWORD *)(v16 - 24);
              uint64_t v30 = v23 + 40;
              if (v16 - 40 != v18)
              {
                uint64_t v39 = a6;
                long long v40 = a3;
                uint64_t v103 = a5;
                uint64_t v105 = a7;
                uint64_t v99 = v23;
                uint64_t v101 = v15;
                uint64_t v107 = v24;
                uint64_t v97 = v23 + 40;
                memmove(v23 + 40, v18, v16 - 40 - v23);
                uint64_t v30 = v97;
                long long v23 = v99;
                a7 = v105;
                uint64_t v24 = v107;
                uint64_t v15 = v101;
                a5 = v103;
                a3 = v40;
                a6 = v39;
              }
              *((void *)v18 + 4) = v121;
              *(_OWORD *)uint64_t v18 = v111;
              *((_OWORD *)v18 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v116;
            }
            else
            {
              unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v23) >> 3);
              if (v33 == 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3))
              {
                do
                {
                  uint64_t v119 = *((void *)v31 - 1);
                  long long v109 = *(_OWORD *)(v31 - 40);
                  long long v114 = *(_OWORD *)(v31 - 24);
                  long long v34 = *(_OWORD *)(v32 - 40);
                  long long v35 = *(_OWORD *)(v32 - 24);
                  *((void *)v31 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v32 - 1);
                  *(_OWORD *)(v31 - 24) = v35;
                  *(_OWORD *)(v31 - 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v34;
                  *((void *)v32 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v119;
                  *(_OWORD *)(v32 - 24) = v114;
                  *(_OWORD *)(v32 - 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v109;
                  if (v31 == a2) {
                    break;
                  }
                  v31 += 40;
                  BOOL v36 = v32 == v16;
                  v32 += 40;
                }
                while (!v36);
                uint64_t v30 = a2;
              }
              else
              {
                uint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3);
                unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v23) >> 3);
                do
                {
                  uint64_t v43 = v42;
                  unint64_t v42 = v41;
                  uint64_t v41 = v43 % v41;
                }
                while (v41);
                if (v42)
                {
                  int v44 = &v18[40 * v42];
                  do
                  {
                    long long v45 = *(_OWORD *)(v44 - 40);
                    long long v46 = *(_OWORD *)(v44 - 24);
                    uint64_t v47 = *((void *)v44 - 1);
                    v44 -= 40;
                    uint64_t v122 = v47;
                    long long v112 = v45;
                    long long v117 = v46;
                    uint64_t v48 = &v44[8 * ((a2 - v23) >> 3)];
                    uint64_t v49 = v44;
                    do
                    {
                      uint64_t v50 = v48;
                      long long v51 = *(_OWORD *)v48;
                      long long v52 = *((_OWORD *)v48 + 1);
                      *((void *)v49 + 4) = *((void *)v48 + 4);
                      *(_OWORD *)uint64_t v49 = v51;
                      *((_OWORD *)v49 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v52;
                      unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v48) >> 3);
                      v48 += 8 * ((a2 - v23) >> 3);
                      BOOL v54 = __OFSUB__(v33, v53);
                      uint64_t v56 = v33 - v53;
                      char v55 = (v56 < 0) ^ v54;
                      uint64_t v57 = &v18[40 * v56];
                      if (!v55) {
                        uint64_t v48 = v57;
                      }
                      uint64_t v49 = v50;
                    }
                    while (v48 != v44);
                    *((void *)v50 + 4) = v122;
                    *(_OWORD *)uint64_t v50 = v112;
                    *((_OWORD *)v50 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v117;
                  }
                  while (v44 != v18);
                }
                uint64_t v30 = &v18[8 * ((v16 - a2) >> 3)];
              }
            }
          }
        }
      }
      a4 = -(v24 + v11);
      uint64_t v58 = a5 - v15;
      if (v24 + v15 >= a5 - (v24 + v15) - v11)
      {
        uint64_t v108 = v24;
        uint64_t v64 = -(v24 + v11);
        unint64_t v65 = a6;
        uint64_t v66 = a7;
        uint64_t v58 = v15;
        char v67 = v30;
        uint64_t result = (char *)sub_1CCBEBB28(v30, v16, a3, v64, a5 - v15);
        a7 = v66;
        a6 = v65;
        int v16 = v18;
        a4 = v108;
        a3 = v67;
      }
      else
      {
        int v59 = &v9[v10];
        char v60 = a6;
        uint64_t v61 = a7;
        uint64_t v62 = a3;
        unsigned int v63 = v30;
        uint64_t result = (char *)sub_1CCBEBB28(v59, v23, v30, v24, v15);
        a7 = v61;
        a3 = v62;
        a6 = v60;
        long long v12 = v63;
      }
      a5 = v58;
      long long v9 = v12;
      a2 = v16;
      if (!v58) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (v9 != a2)
      {
        uint64_t v80 = 0;
        do
        {
          unint64_t v81 = &a6[v80];
          long long v82 = *(_OWORD *)&v9[v80];
          long long v83 = *(_OWORD *)&v9[v80 + 16];
          *((void *)v81 + 4) = *(void *)&v9[v80 + 32];
          *(_OWORD *)unint64_t v81 = v82;
          *((_OWORD *)v81 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v83;
          v80 += 40;
        }
        while (&v9[v80] != a2);
        if (v80)
        {
          unint64_t v84 = a6;
          while (a2 != a3)
          {
            if (*(void *)(*((void *)a2 + 4) + 240) + *(void *)a2 >= *(void *)(*((void *)v84 + 4) + 240)
                                                                           + *(void *)v84)
            {
              long long v87 = *(_OWORD *)v84;
              long long v88 = *((_OWORD *)v84 + 1);
              *((void *)v9 + 4) = *((void *)v84 + 4);
              *(_OWORD *)long long v9 = v87;
              *((_OWORD *)v9 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v88;
              v84 += 40;
            }
            else
            {
              long long v85 = *(_OWORD *)a2;
              long long v86 = *((_OWORD *)a2 + 1);
              *((void *)v9 + 4) = *((void *)a2 + 4);
              *(_OWORD *)long long v9 = v85;
              *((_OWORD *)v9 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v86;
              a2 += 40;
            }
            v9 += 40;
            if (&a6[v80] == v84) {
              return result;
            }
          }
          return (char *)memmove(v9, v84, a6 - v84 + v80);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v68 = 0;
      do
      {
        uint64_t v69 = &a6[v68];
        long long v70 = *(_OWORD *)&a2[v68];
        long long v71 = *(_OWORD *)&a2[v68 + 16];
        *((void *)v69 + 4) = *(void *)&a2[v68 + 32];
        *(_OWORD *)uint64_t v69 = v70;
        *((_OWORD *)v69 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v71;
        v68 += 40;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        unint64_t v72 = &a6[v68];
        int v73 = a3 - 40;
        while (a2 != v9)
        {
          unint64_t v74 = *(void *)(*((void *)v72 - 1) + 240) + *((void *)v72 - 5);
          unint64_t v75 = *(void *)(*((void *)a2 - 1) + 240) + *((void *)a2 - 5);
          BOOL v76 = v74 >= v75;
          if (v74 >= v75) {
            uint64_t v77 = v72 - 40;
          }
          else {
            uint64_t v77 = a2 - 40;
          }
          if (v76) {
            v72 -= 40;
          }
          else {
            a2 -= 40;
          }
          long long v78 = *(_OWORD *)v77;
          long long v79 = *((_OWORD *)v77 + 1);
          *((void *)v73 + 4) = *((void *)v77 + 4);
          *(_OWORD *)int v73 = v78;
          *((_OWORD *)v73 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v79;
          v73 -= 40;
          if (v72 == a6) {
            return result;
          }
        }
        if (v72 != a6)
        {
          unint64_t v92 = 0;
          do
          {
            long long v93 = &v73[v92];
            long long v94 = *(_OWORD *)&v72[v92 - 40];
            long long v95 = *(_OWORD *)&v72[v92 - 24];
            *((void *)v93 + 4) = *(void *)&v72[v92 - 8];
            *(_OWORD *)long long v93 = v94;
            *((_OWORD *)v93 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v95;
            v92 -= 40;
          }
          while (&v72[v92] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1CCBEC1F8(void *a1)
{
  if (a1)
  {
    sub_1CCBEC1F8(*a1);
    sub_1CCBEC1F8(a1[1]);
    int v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t llvm::MCWinCOFFObjectTargetWriter::MCWinCOFFObjectTargetWriter(uint64_t this, int a2)
{
  *(void *)this = &unk_1F2631A68;
  *(_DWORD *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
  return this;
}

uint64_t sub_1CCBEC284()
{
  return 1;
}

uint64_t sub_1CCBEC28C()
{
  return 1;
}

void *sub_1CCBEC294(void *a1)
{
  *a1 = &unk_1F2631AA8;
  int v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[25], 8);
  MEMORY[0x1D25D9CD0](a1[22], 8);
  MEMORY[0x1D25D9CD0](a1[19], 8);
  MEMORY[0x1D25D9CD0](a1[13], 8);
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    char v4 = (void *)a1[11];
    uint64_t v5 = (void *)a1[10];
    if (v4 != v3)
    {
      do
        char v4 = sub_1CCBEF2E4(v4 - 1);
      while (v4 != v3);
      uint64_t v5 = (void *)a1[10];
    }
    a1[11] = v3;
    operator delete(v5);
  }
  uint64_t v6 = (uint64_t *)a1[7];
  if (v6)
  {
    uint64_t v7 = (uint64_t *)a1[8];
    uint64_t v8 = (void *)a1[7];
    if (v7 != v6)
    {
      do
        uint64_t v7 = sub_1CCBEF354(v7 - 1);
      while (v7 != v6);
      uint64_t v8 = (void *)a1[7];
    }
    a1[8] = v6;
    operator delete(v8);
  }
  uint64_t v9 = a1[3];
  a1[3] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return a1;
}

void sub_1CCBEC3B4(void *a1)
{
  sub_1CCBEC294(a1);

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCBEC3EC(uint64_t a1)
{
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 32) = *(_DWORD *)(*(void *)(a1 + 24) + 8);
  int v2 = *(uint64_t **)(a1 + 64);
  uint64_t v3 = *(uint64_t **)(a1 + 56);
  while (v2 != v3)
    int v2 = sub_1CCBEF354(v2 - 1);
  *(void *)(a1 + 64) = v3;
  uint64_t v5 = *(void **)(a1 + 80);
  for (int i = *(void **)(a1 + 88); i != v5; int i = sub_1CCBEF2E4(i - 1))
    ;
  *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v5;
  *(unsigned char *)(a1 + 144) = 0;
  uint64_t result = sub_1CCBE370C((_DWORD *)(a1 + 104));
  uint64_t v7 = (void *)(a1 + 152);
  int v8 = *(_DWORD *)(a1 + 160);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 168);
    if (v9 > 4 * v8 && v9 >= 0x41)
    {
      uint64_t result = (void *)*v7;
      int v10 = 1 << (33 - __clz(v8 - 1));
      if (v10 <= 64) {
        int v11 = 64;
      }
      else {
        int v11 = v10;
      }
      if (v11 == v9)
      {
        *(void *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
        uint64_t v12 = 16 * v9;
        do
        {
          *uint64_t result = -4096;
          result += 2;
          v12 -= 16;
        }
        while (v12);
      }
      else
      {
        MEMORY[0x1D25D9CD0](result, 8);
        unint64_t v23 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
        unint64_t v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
        LODWORD(v24) = (((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8)) + 1;
        *(_DWORD *)(a1 + 16MEMORY[0x1D25D9CD0](*(void *)this, 8) = v24;
        uint64_t result = operator new(16 * v24, (std::align_val_t)8uLL);
        *(void *)(a1 + 152) = result;
        *(void *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
        uint64_t v25 = *(unsigned int *)(a1 + 168);
        if (v25)
        {
          uint64_t v26 = 16 * v25;
          do
          {
            *uint64_t result = -4096;
            result += 2;
            v26 -= 16;
          }
          while (v26);
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 164)) {
      goto LABEL_24;
    }
    LODWORD(v9) = *(_DWORD *)(a1 + 168);
    if (v9 > 0x40)
    {
      uint64_t result = (void *)MEMORY[0x1D25D9CD0](*v7, 8);
      *uint64_t v7 = 0;
      *(void *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      *(_DWORD *)(a1 + 16MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
      goto LABEL_24;
    }
  }
  if (v9)
  {
    uint64_t v13 = (void *)*v7;
    uint64_t v14 = 16 * v9;
    do
    {
      void *v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *(void *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
LABEL_24:
  uint64_t v15 = (void *)(a1 + 176);
  int v16 = *(_DWORD *)(a1 + 184);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(a1 + 192);
    if (v17 > 4 * v16 && v17 >= 0x41)
    {
      uint64_t result = (void *)*v15;
      int v18 = 1 << (33 - __clz(v16 - 1));
      if (v18 <= 64) {
        int v19 = 64;
      }
      else {
        int v19 = v18;
      }
      if (v19 == v17)
      {
        *(void *)(a1 + 184) = 0;
        uint64_t v20 = 16 * v17;
        do
        {
          *uint64_t result = -4096;
          result += 2;
          v20 -= 16;
        }
        while (v20);
      }
      else
      {
        MEMORY[0x1D25D9CD0](result, 8);
        unint64_t v27 = (4 * v19 / 3u + 1) | ((unint64_t)(4 * v19 / 3u + 1) >> 1);
        unint64_t v28 = v27 | (v27 >> 2) | ((v27 | (v27 >> 2)) >> 4);
        LODWORD(v2MEMORY[0x1D25D9CD0](*(void *)this, 8) = (((v28 | (v28 >> 8)) >> 16) | v28 | (v28 >> 8)) + 1;
        *(_DWORD *)(a1 + 192) = v28;
        uint64_t result = operator new(16 * v28, (std::align_val_t)8uLL);
        *(void *)(a1 + 176) = result;
        *(void *)(a1 + 184) = 0;
        uint64_t v29 = *(unsigned int *)(a1 + 192);
        if (v29)
        {
          uint64_t v30 = 16 * v29;
          do
          {
            *uint64_t result = -4096;
            result += 2;
            v30 -= 16;
          }
          while (v30);
        }
      }
      return result;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 188)) {
      return result;
    }
    LODWORD(v17) = *(_DWORD *)(a1 + 192);
    if (v17 > 0x40)
    {
      uint64_t result = (void *)MEMORY[0x1D25D9CD0](*v15, 8);
      *uint64_t v15 = 0;
      *(void *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      return result;
    }
  }
  if (v17)
  {
    unint64_t v21 = (void *)*v15;
    uint64_t v22 = 16 * v17;
    do
    {
      *unint64_t v21 = -4096;
      v21 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  *(void *)(a1 + 184) = 0;
  return result;
}

void sub_1CCBEC6C0(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*(unsigned char *)(a1 + 226))
  {
    uint64_t COFFSection = llvm::MCContext::getCOFFSection(*(llvm::MCContext **)a2, ".llvm_addrsig", 0xDuLL, 2048, 0, (std::string::size_type)&unk_1CFBF5F4A, 0, 0, 0xFFFFFFFF, 0);
    *(void *)(a1 + 232) = COFFSection;
    llvm::MCAssembler::registerSection(a2, COFFSection);
  }
  if (*(void *)(a2 + 2184) != *(void *)(a2 + 2192))
  {
    uint64_t v36 = llvm::MCContext::getCOFFSection(*(llvm::MCContext **)a2, ".llvm.call-graph-profile", 0x18uLL, 2048, 0, (std::string::size_type)&unk_1CFBF5F4A, 0, 0, 0xFFFFFFFF, 0);
    *(void *)(a1 + 264) = v36;
    llvm::MCAssembler::registerSection(a2, v36);
  }
  if (*(void *)(a2 + 32) != *(void *)(a2 + 40)) {
    operator new();
  }
  uint64_t v5 = *(uint64_t **)(a2 + 56);
  uint64_t v6 = *(uint64_t **)(a2 + 64);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v7 = *v5;
      if ((*(unsigned char *)(*v5 + 8) & 1) == 0) {
        break;
      }
LABEL_60:
      if (++v5 == v6) {
        return;
      }
    }
    uint64_t v8 = sub_1CCBEF5A0(a1, *v5);
    Baseuint64_t Symbol = llvm::MCAsmLayout::getBaseSymbol(a3, (const llvm::MCSymbol *)v7);
    if (BaseSymbol)
    {
      int v10 = BaseSymbol;
      uint64_t v11 = *(void *)BaseSymbol;
      unint64_t AssociatedFragment = *(void *)BaseSymbol & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*((_DWORD *)v10 + 2) & 0x1C00) == 0x800)
      {
        *((_DWORD *)v10 + 2) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v10 + 3));
        uint64_t v11 = *(void *)v10 & 7 | AssociatedFragment;
        *(void *)int v10 = v11;
      }
      if (AssociatedFragment)
      {
        unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v10 + 2) & 0x1C00) == 0x800)
        {
          *((_DWORD *)v10 + 2) |= 4u;
          unint64_t v13 = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v10 + 3));
          *(void *)int v10 = *(void *)v10 & 7 | v13;
        }
        v41[0] = *(void *)(v13 + 16);
        uint64_t v14 = *sub_1CC4EB4AC(a1 + 152, v41);
        uint64_t v15 = *(void *)(v8 + 112);
        if (v15) {
          BOOL v16 = v15 == v14;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16) {
          llvm::report_fatal_error((llvm *)"conflicting sections for symbol", (const llvm::Twine *)1);
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((*(_WORD *)(v7 + 12) & 0x100) == 0)
      {
        *(void *)(v8 + 112) = v14;
        goto LABEL_34;
      }
    }
    else if ((*(_WORD *)(v7 + 12) & 0x100) == 0)
    {
      *(_DWORD *)(v8 + 12) = -1;
LABEL_34:
      unsigned int v26 = *(_DWORD *)(v7 + 8);
      if ((v26 & 0x10) != 0 && ((v26 >> 10) & 7) - 3 <= 1)
      {
        uint64_t v27 = *(void *)(v7 + 24);
      }
      else
      {
        v41[0] = 0;
        int v28 = sub_1CCBC6418((llvm::MCAsmLayout *)a3, (uint64_t *)v7, 0, v41);
        LODWORD(v27) = v41[0];
        if (!v28) {
          LODWORD(v27) = 0;
        }
      }
      *(_DWORD *)(v8 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v27;
      *(_WORD *)(v8 + 16) = *(_WORD *)(v7 + 32);
      __int16 v29 = *(_WORD *)(v7 + 12);
      *(unsigned char *)(v8 + 1MEMORY[0x1D25D9CD0](*(void *)this, 8) = v29;
      if ((_BYTE)v29) {
        goto LABEL_59;
      }
      int v30 = *(_DWORD *)(v7 + 8);
      if ((v30 & 0x10) != 0)
      {
        char v33 = 2;
        goto LABEL_58;
      }
      unint64_t v31 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_DWORD *)(v7 + 8) & 0x1C00) == 0x800 && v31 == 0)
      {
        *(_DWORD *)(v7 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v30 | 4;
        unint64_t v34 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v7 + 24));
        *(void *)uint64_t v7 = *(void *)v7 & 7 | v34;
        if (v34) {
          goto LABEL_46;
        }
      }
      else if (v31)
      {
LABEL_46:
        char v33 = 3;
LABEL_58:
        *(unsigned char *)(v8 + 1MEMORY[0x1D25D9CD0](*(void *)this, 8) = v33;
LABEL_59:
        *(void *)(v8 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = v7;
        goto LABEL_60;
      }
      if ((*(_DWORD *)(v7 + 8) & 0x1C00) == 0x800) {
        char v33 = 3;
      }
      else {
        char v33 = 2;
      }
      goto LABEL_58;
    }
    *(unsigned char *)(v8 + 1MEMORY[0x1D25D9CD0](*(void *)this, 8) = 105;
    *(void *)(v8 + 112) = 0;
    if ((*(_DWORD *)(v7 + 8) & 0x1C00) != 0x800) {
      goto LABEL_30;
    }
    *(_DWORD *)(v7 + 8) |= 4u;
    uint64_t v17 = *(void *)(v7 + 24);
    if (*(unsigned char *)v17 != 2) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(v17 + 16);
    unint64_t v19 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
    if (!v19 && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v18 + 8) |= 4u;
      unint64_t v19 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
      *(void *)uint64_t v18 = *(void *)v18 & 7 | v19;
    }
    if (v19 && (*(unsigned char *)(v18 + 8) & 0x10) == 0 || (uint64_t v20 = sub_1CCBEF5A0(a1, v18)) == 0)
    {
LABEL_30:
      if ((*(unsigned char *)v7 & 4) != 0)
      {
        unint64_t v23 = *(uint64_t **)(v7 - 8);
        uint64_t v24 = *v23;
        unint64_t v21 = v23 + 2;
        uint64_t v22 = v24;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      __int16 v40 = 1283;
      v39[0] = ".weak.";
      v39[2] = v21;
      v39[3] = v22;
      v41[0] = (uint64_t)v39;
      _OWORD v41[2] = (uint64_t)".default";
      __int16 v42 = 770;
      llvm::Twine::str((llvm::Twine *)v41, &v38);
      sub_1CCBEF3D0();
    }
    *(void *)(v8 + 104) = v20;
    sub_1CCBEF644(v8 + 64, 1uLL);
    uint64_t v25 = *(void **)(v8 + 64);
    void *v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    **(void **)(v8 + 64) = 0;
    *(_DWORD *)(*(void *)(v8 + 64) + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 3;
    goto LABEL_59;
  }
}

void sub_1CCBED1F4(uint64_t a1, uint64_t *a2, llvm::MCAsmLayout *a3, const llvm::MCFragment *a4, uint64_t a5, void *a6, unint64_t *a7)
{
  uint64_t v9 = *(void *)(*a6 + 16);
  int v10 = *(_DWORD *)(v9 + 8);
  if ((v10 & 8) == 0)
  {
    uint64_t v37 = *a2;
    uint64_t v38 = *(void *)(a5 + 16);
    if ((*(unsigned char *)v9 & 4) != 0)
    {
      char v60 = *(uint64_t **)(v9 - 8);
      uint64_t v61 = *v60;
      uint64_t v39 = v60 + 2;
      uint64_t v40 = v61;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v62 = "symbol '";
    goto LABEL_80;
  }
  if ((v10 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)v9;
  unint64_t v17 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v9 + 8) & 0x1C00) != 0x800 || v17 != 0)
  {
    if (v17) {
      goto LABEL_8;
    }
    goto LABEL_76;
  }
  *(_DWORD *)(v9 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v10 | 4;
  unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
  uint64_t v16 = *(void *)v9 & 7 | AssociatedFragment;
  *(void *)uint64_t v9 = v16;
  if (!AssociatedFragment)
  {
LABEL_76:
    uint64_t v37 = *a2;
    uint64_t v38 = *(void *)(a5 + 16);
    if ((v16 & 4) != 0)
    {
      char v67 = *(uint64_t **)(v9 - 8);
      uint64_t v68 = *v67;
      uint64_t v39 = v67 + 2;
      uint64_t v40 = v68;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v62 = "assembler label '";
LABEL_80:
    v72[0] = (uint64_t)v62;
    int v73 = v39;
    uint64_t v74 = v40;
    __int16 v75 = 1283;
    unint64_t v65 = "' can not be undefined";
LABEL_81:
    v76[0] = v72;
    v76[2] = v65;
    __int16 v77 = 770;
    llvm::MCContext::reportError(v37, v38, (uint64_t)v76);
    return;
  }
LABEL_8:
  long long v70 = a2;
  uint64_t v71 = *((void *)a4 + 2);
  uint64_t v69 = (void *)*sub_1CC4EB4AC(a1 + 152, &v71);
  uint64_t v19 = a6[1];
  if (!v19)
  {
    unint64_t v24 = a6[2];
    goto LABEL_13;
  }
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)v20;
  unint64_t v22 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v22 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    unint64_t v22 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    uint64_t v21 = *(void *)v20 & 7 | v22;
    *(void *)uint64_t v20 = v21;
  }
  if (!v22)
  {
    uint64_t v37 = *v70;
    uint64_t v38 = *(void *)(a5 + 16);
    if ((v21 & 4) != 0)
    {
      unsigned int v63 = *(uint64_t **)(v20 - 8);
      uint64_t v64 = *v63;
      uint64_t v58 = v63 + 2;
      uint64_t v59 = v64;
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
    }
    v72[0] = (uint64_t)"symbol '";
    int v73 = v58;
    uint64_t v74 = v59;
    __int16 v75 = 1283;
    unint64_t v65 = "' can not be undefined in a subtraction expression";
    goto LABEL_81;
  }
  v76[0] = 0;
  sub_1CCBC6418(a3, (uint64_t *)v20, 1, v76);
  unint64_t v23 = v76[0];
  llvm::MCAsmLayout::ensureValid(a3, a4);
  unint64_t v24 = *((void *)a4 + 4) - (void)v23 + *(unsigned int *)(a5 + 8) + a6[2];
LABEL_13:
  *a7 = v24;
  llvm::MCAsmLayout::ensureValid(a3, a4);
  int v25 = *((_DWORD *)a4 + 8);
  int v26 = *(_DWORD *)(v9 + 8);
  if (v26)
  {
    unint64_t v29 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800 && v29 == 0)
    {
      *(_DWORD *)(v9 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v26 | 4;
      unint64_t v29 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
      *(void *)uint64_t v9 = *(void *)v9 & 7 | v29;
    }
    v72[0] = *(void *)(v29 + 16);
    unint64_t v31 = sub_1CC4EB4AC(a1 + 152, v72);
    uint64_t v32 = *v31;
    uint64_t v28 = *(void *)(*v31 + 80);
    v76[0] = 0;
    sub_1CCBC6418(a3, (uint64_t *)v9, 1, v76);
    unint64_t v33 = (unint64_t)v76[0] + *a7;
    *a7 = v33;
    if (*(unsigned char *)(a1 + 225))
    {
      unint64_t v34 = *(unsigned int *)(v32 + 120);
      if (v34)
      {
        if (v33 >= 0x100000)
        {
          if (v33 >> 20 <= v34) {
            uint64_t v35 = *(void *)(v32 + 112) + 8 * (v33 >> 20);
          }
          else {
            uint64_t v35 = *(void *)(v32 + 112) + 8 * v34;
          }
          uint64_t v28 = *(void *)(v35 - 8);
          *a7 = v33 - *(unsigned int *)(v28 + 8);
        }
      }
    }
  }
  else
  {
    v72[0] = v9;
    uint64_t v27 = *(void *)(a1 + 176);
    v76[0] = 0;
    if (sub_1CBB0BF40(v27, *(_DWORD *)(a1 + 192), v9, v76))
    {
      uint64_t v28 = v76[0][1];
    }
    else
    {
      uint64_t v36 = sub_1CC4EB2E8(a1 + 176, v72, v76[0]);
      uint64_t v28 = 0;
      *uint64_t v36 = v9;
      v36[1] = 0;
    }
  }
  BOOL v41 = v19 != 0;
  ++*(_DWORD *)(v28 + 120);
  int v42 = *(_DWORD *)(a5 + 8);
  unsigned __int16 v43 = (*(uint64_t (**)(void, uint64_t, void *, uint64_t, BOOL, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *v70, a6, a5, v41, v70[1]);
  unsigned __int16 v44 = v43;
  int v45 = *(unsigned __int16 *)(a1 + 32);
  if (v45 == 34404 && v43 == 4 || v45 == 332 && v43 == 20 || v45 == 452 && v43 == 10 || v45 == 43620 && v43 == 17) {
    *a7 += 4;
  }
  if (v45 == 452 && v43 <= 0x15u && ((1 << v43) & 0x340000) != 0) {
    *a7 += 4;
  }
  if (*(_DWORD *)(a5 + 12) == 19) {
    *a7 = 0;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a5))
  {
    int v47 = v42 + v25;
    uint64_t v49 = (char *)v69[12];
    unint64_t v48 = v69[13];
    if ((unint64_t)v49 >= v48)
    {
      long long v51 = (char *)v69[11];
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v51) >> 3) + 1;
      if (v52 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v51) >> 3);
      if (2 * v53 > v52) {
        unint64_t v52 = 2 * v53;
      }
      if (v53 >= 0x555555555555555) {
        unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54)
      {
        if (v54 > 0xAAAAAAAAAAAAAAALL) {
          sub_1CB833614();
        }
        char v55 = (char *)operator new(24 * v54);
      }
      else
      {
        char v55 = 0;
      }
      uint64_t v56 = &v55[8 * ((v49 - v51) >> 3)];
      *(_DWORD *)uint64_t v56 = v47;
      *((_DWORD *)v56 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
      *((_WORD *)v56 + 4) = v44;
      *((void *)v56 + 2) = v28;
      uint64_t v50 = v56 + 24;
      if (v49 != v51)
      {
        do
        {
          long long v57 = *(_OWORD *)(v49 - 24);
          *((void *)v56 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v49 - 1);
          *(_OWORD *)(v56 - 24) = v57;
          v56 -= 24;
          v49 -= 24;
        }
        while (v49 != v51);
        uint64_t v49 = (char *)v69[11];
      }
      v69[11] = v56;
      v69[12] = v50;
      v69[13] = &v55[24 * v54];
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v49 = v47;
      *((_DWORD *)v49 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
      *((_WORD *)v49 + 4) = v44;
      uint64_t v50 = v49 + 24;
      *((void *)v49 + 2) = v28;
    }
    v69[12] = v50;
  }
}

BOOL sub_1CCBED794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(_WORD *)(a3 + 32) & 0xFFF0) != 0x20 && *(void *)(sub_1CC34BE58(a3, 1) + 16) == *(void *)(a4 + 16);
}

uint64_t sub_1CCBED7E8(uint64_t result)
{
  *(unsigned char *)(result + 226) = 1;
  return result;
}

void sub_1CCBED7F4(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)a1[31];
  unint64_t v4 = a1[32];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)a1[30];
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[8 * v8];
    *(void *)unint64_t v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)a1[30];
    }
    a1[30] = v13;
    a1[31] = v6;
    a1[32] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    void *v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  a1[31] = v6;
}

uint64_t sub_1CCBED8E0(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unint64_t v8 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x3FFFFFFF9)
  {
    uint64_t v74 = "PE COFF object files can't have more than 2147483647 sections";
LABEL_320:
    llvm::report_fatal_error((llvm *)v74, (const llvm::Twine *)1);
  }
  uint64_t v9 = v4[4];
  uint64_t v10 = v4[2];
  *(unsigned char *)(a1 + 224) = v8 > 0x7F7F8;
  *(_DWORD *)(a1 + 36) = v8 >> 3;
  *(_DWORD *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  uint64_t v281 = v9;
  uint64_t v282 = v5;
  uint64_t v280 = v10;
  if (!*(_DWORD *)(a1 + 208)) {
    goto LABEL_41;
  }
  char v11 = 0;
  uint64_t v12 = 0;
  *(_WORD *)int v297 = 256;
  unint64_t v13 = *(uint64_t **)(a1 + 88);
  while (1)
  {
    char v14 = v11;
    if (*(uint64_t **)(a1 + 80) != v13) {
      break;
    }
LABEL_19:
    char v11 = 1;
    uint64_t v12 = 1;
    if (v14) {
      goto LABEL_41;
    }
  }
  int v15 = v297[v12];
  uint64_t v16 = *(void *)(a1 + 200);
  uint64_t v17 = *(unsigned int *)(a1 + 216);
  int v18 = v17 - 1;
  uint64_t v19 = *(uint64_t **)(a1 + 80);
  while (1)
  {
    uint64_t v20 = *v19;
    if (v17)
    {
      unsigned int v21 = ((v20 >> 4) ^ (v20 >> 9)) & v18;
      uint64_t v22 = *(void *)(v16 + 8 * v21);
      if (v22 == v20) {
        goto LABEL_18;
      }
      int v23 = 1;
      while (v22 != -4096)
      {
        unsigned int v24 = v21 + v23++;
        unsigned int v21 = v24 & v18;
        uint64_t v22 = *(void *)(v16 + 8 * v21);
        if (v22 == v20) {
          goto LABEL_18;
        }
      }
    }
    if (*(unsigned char *)(v20 + 18) != 2) {
      goto LABEL_18;
    }
    uint64_t v25 = *(void *)(v20 + 112);
    if (v25) {
      break;
    }
    if (*(_DWORD *)(v20 + 12) == -1) {
      goto LABEL_21;
    }
LABEL_18:
    if (++v19 == v13) {
      goto LABEL_19;
    }
  }
  if (!v15 && (*(unsigned char *)(v25 + 37) & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_21:
  if (v17)
  {
    uint64_t v26 = 8 * v17;
    uint64_t v27 = *(void **)(a1 + 200);
    while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v27;
      v26 -= 8;
      if (!v26) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void **)(a1 + 200);
  }
  uint64_t v28 = (void *)(v16 + 8 * v17);
  if (v27 != v28)
  {
    unint64_t v29 = (void *)*v27;
LABEL_29:
    uint64_t v30 = v29[4];
    if (v29[5] < (unint64_t)(v30 + 1)) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(unsigned char *)(v29[3] + v3llvm::StringTableBuilder::finalizeStringTable(this, 0) = 46;
    size_t v31 = v29[5];
    uint64_t v32 = v29[4] + 1;
    v29[4] = v32;
    size_t v33 = *(void *)(v20 + 32);
    if (v31 < v33 + v32) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    if (v33)
    {
      memcpy((void *)(v29[3] + v32), *(const void **)(v20 + 24), v33);
      uint64_t v32 = v29[4];
    }
    v29[4] = v32 + v33;
    while (++v27 != v28)
    {
      unint64_t v29 = (void *)*v27;
      if ((*v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v27 != v28) {
          goto LABEL_29;
        }
        break;
      }
    }
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
  }
LABEL_41:
  if (v6 != v7)
  {
    uint64_t v34 = 1;
    do
    {
      uint64_t v35 = *(void *)(*(void *)v6 + 80);
      uint64_t v36 = *(void *)(v35 + 64);
      if (*(unsigned char *)(v36 + 20) != 5)
      {
        *(_DWORD *)(*(void *)v6 + 64) = v34;
        *(_DWORD *)(v35 + 12) = v34;
        *(_DWORD *)(v36 + 16) = v34++;
      }
      v6 += 8;
    }
    while (v6 != v7);
    uint64_t v37 = *(void *)(a1 + 56);
    uint64_t v38 = *(void *)(a1 + 64);
    while (v37 != v38)
    {
      uint64_t v39 = *(void *)(*(void *)v37 + 80);
      uint64_t v40 = *(void *)(v39 + 64);
      if (*(unsigned char *)(v40 + 20) == 5)
      {
        *(_DWORD *)(*(void *)v37 + 64) = v34;
        *(_DWORD *)(v39 + 12) = v34;
        *(_DWORD *)(v40 + 16) = v34++;
      }
      v37 += 8;
    }
  }
  if (*(void *)(a2 + 184) != *(void *)(a2 + 176)) {
    sub_1CCBEF3D0();
  }
  BOOL v41 = *(uint64_t **)(a1 + 80);
  int v42 = *(uint64_t **)(a1 + 88);
  if (v41 != v42)
  {
    int v43 = *(_DWORD *)(a1 + 48);
    unsigned __int16 v44 = *(uint64_t **)(a1 + 80);
    do
    {
      uint64_t v45 = *v44;
      uint64_t v46 = *(void *)(*v44 + 112);
      if (v46) {
        *(_DWORD *)(v45 + 12) = *(_DWORD *)(v46 + 64);
      }
      *(_DWORD *)(v45 + 56) = v43;
      uint64_t v47 = *(void *)(v45 + 128);
      if (v47) {
        *(_DWORD *)(v47 + 16) = v43;
      }
      int v48 = *(_DWORD *)(v45 + 72);
      *(unsigned char *)(v45 + 19) = v48;
      v43 += 1 + v48;
      ++v44;
    }
    while (v44 != v42);
    *(_DWORD *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v43;
  }
  uint64_t v49 = *(uint64_t **)(a1 + 56);
  uint64_t v50 = *(uint64_t **)(a1 + 64);
  if (v49 != v50)
  {
    do
    {
      uint64_t v51 = *v49;
      char v52 = *(unsigned char *)(*v49 + 63);
      if (v52 < 0) {
        unint64_t v53 = *(void *)(v51 + 48);
      }
      else {
        unint64_t v53 = *(unsigned __int8 *)(*v49 + 63);
      }
      if (v53 >= 9)
      {
        uint64_t v56 = *(void **)(v51 + 40);
        unint64_t v54 = (void *)(v51 + 40);
        char v55 = v56;
        if (v52 >= 0) {
          long long v57 = v54;
        }
        else {
          long long v57 = v55;
        }
        uint64_t v58 = v54[1];
        if (v52 >= 0) {
          uint64_t v59 = *(unsigned __int8 *)(*v49 + 63);
        }
        else {
          uint64_t v59 = v58;
        }
        unsigned int v60 = sub_1CD0B03C8(v57, (uint64_t)v57 + v59);
        llvm::StringTableBuilder::add(a1 + 104, (uint64_t)v57, v59 | ((unint64_t)v60 << 32));
      }
      ++v49;
    }
    while (v49 != v50);
    BOOL v41 = *(uint64_t **)(a1 + 80);
    int v42 = *(uint64_t **)(a1 + 88);
  }
  for (; v41 != v42; ++v41)
  {
    unint64_t v61 = *(void *)(*v41 + 32);
    if (v61 >= 9)
    {
      uint64_t v62 = *(void **)(*v41 + 24);
      unsigned int v63 = sub_1CD0B03C8(v62, (uint64_t)v62 + v61);
      llvm::StringTableBuilder::add(a1 + 104, (uint64_t)v62, v61 | ((unint64_t)v63 << 32));
    }
  }
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 104), 1);
  uint64_t v64 = *(void ***)(a1 + 56);
  unint64_t v65 = *(void ***)(a1 + 64);
  while (v64 != v65)
  {
    uint64_t v66 = *v64;
    char v67 = *((unsigned char *)*v64 + 63);
    int v68 = v67;
    size_t v69 = v67 & 0x7F;
    if (v68 >= 0) {
      size_t v70 = v69;
    }
    else {
      size_t v70 = *((void *)*v64 + 6);
    }
    if (v68 >= 0) {
      uint64_t v71 = v66 + 5;
    }
    else {
      uint64_t v71 = (void *)v66[5];
    }
    if (v70 > 8)
    {
      unsigned int v72 = sub_1CD0B03C8(v71, (uint64_t)v71 + v70);
      unint64_t Offset = llvm::StringTableBuilder::getOffset(a1 + 104, (uint64_t)v71, v70 | ((unint64_t)v72 << 32));
      if ((llvm::COFF::encodeSectionName((llvm::COFF *)v66, Offset) & 1) == 0)
      {
        uint64_t v74 = "COFF string table is greater than 64 GB.";
        goto LABEL_320;
      }
    }
    else
    {
      memcpy(*v64, v71, v70);
    }
    ++v64;
  }
  uint64_t v75 = *(void *)(a1 + 80);
  uint64_t v76 = *(void *)(a1 + 88);
  if (v75 != v76)
  {
    do
    {
      __int16 v77 = *(_DWORD **)v75;
      unint64_t v78 = *(void *)(*(void *)v75 + 32);
      if (v78 < 9)
      {
        if (v78 >= *((void *)v77 + 5)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(unsigned char *)(*((void *)v77 + 3) + v7MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
        memcpy(v77, *((const void **)v77 + 3), *((void *)v77 + 4));
      }
      else
      {
        long long v79 = (void *)*((void *)v77 + 3);
        unsigned int v80 = sub_1CD0B03C8(v79, (uint64_t)v79 + v78);
        int v81 = llvm::StringTableBuilder::getOffset(a1 + 104, (uint64_t)v79, v78 | ((unint64_t)v80 << 32));
        *__int16 v77 = 0;
        v77[1] = v81;
      }
      v75 += 8;
    }
    while (v75 != v76);
    uint64_t v82 = *(void *)(a1 + 80);
    uint64_t v83 = *(void *)(a1 + 88);
    while (v82 != v83)
    {
      uint64_t v84 = *(void *)(*(void *)v82 + 104);
      if (v84) {
        *(_DWORD *)(*(void *)(*(void *)v82 + 64) + 4) = *(_DWORD *)(v84 + 56);
      }
      v82 += 8;
    }
  }
  uint64_t v85 = *(void *)(a1 + 56);
  for (uint64_t i = *(void *)(a1 + 64); v85 != i; v85 += 8)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)v85 + 80) + 64) + 20) == 5)
    {
      uint64_t v87 = *(void *)(*(void *)v85 + 72);
      uint64_t v88 = *(void *)(v87 + 232);
      uint64_t v89 = *(void *)v88;
      unint64_t AssociatedFragment = *(void *)v88 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*(_DWORD *)(v88 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v88 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v88 + 24));
        uint64_t v89 = *(void *)v88 & 7 | AssociatedFragment;
        *(void *)uint64_t v88 = v89;
      }
      if (!AssociatedFragment) {
        goto LABEL_115;
      }
      unint64_t v91 = v89 & 0xFFFFFFFFFFFFFFF8;
      if ((v89 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v88 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v88 + 8) |= 4u;
        unint64_t v91 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v88 + 24));
        uint64_t v89 = *(void *)v88 & 7 | v91;
        *(void *)uint64_t v88 = v89;
      }
      if ((_UNKNOWN *)v91 == llvm::MCSymbol::AbsolutePseudoFragment)
      {
LABEL_115:
        uint64_t v94 = *(void *)a2;
        uint64_t v285 = "cannot make section ";
        long long v286 = *(_OWORD *)(v87 + 200);
        __int16 v287 = 1283;
        *(void *)uint64_t v288 = &v285;
        long long v290 = " associative with sectionless symbol ";
        LOWORD(v292) = 770;
        if ((*(unsigned char *)v88 & 4) != 0)
        {
          uint64_t v97 = *(uint64_t **)(v88 - 8);
          uint64_t v98 = *v97;
          long long v95 = v97 + 2;
          uint64_t v96 = v98;
        }
        else
        {
          long long v95 = 0;
          uint64_t v96 = 0;
        }
        *(void *)int v297 = v288;
        *((void *)&v298 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v95;
        uint64_t v299 = v96;
        LOWORD(v30llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1282;
        llvm::MCContext::reportError(v94, 0, (uint64_t)v297);
      }
      else
      {
        unint64_t v92 = v89 & 0xFFFFFFFFFFFFFFF8;
        if ((v89 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v88 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v88 + 8) |= 4u;
          unint64_t v92 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v88 + 24));
          *(void *)uint64_t v88 = *(void *)v88 & 7 | v92;
        }
        *(void *)int v297 = *(void *)(v92 + 16);
        int v93 = *(_DWORD *)(*sub_1CC4EB4AC(a1 + 152, (uint64_t *)v297) + 64);
        if (v93 != -1) {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)v85 + 80) + 64) + 16) = v93;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 226)) {
    operator new();
  }
  if (*(void *)(a1 + 264)) {
    operator new();
  }
  uint64_t v99 = *(_DWORD **)(a1 + 8);
  int v100 = (*(uint64_t (**)(_DWORD *))(*(void *)v99 + 80))(v99) + v99[8] - v99[4];
  if (*(unsigned char *)(a1 + 224)) {
    int v101 = 56;
  }
  else {
    int v101 = 20;
  }
  int v102 = v101 + 40 * *(_DWORD *)(a1 + 36) + v100;
  uint64_t v103 = *(uint64_t **)(a2 + 32);
  for (unint64_t j = *(uint64_t **)(a2 + 40); v103 != j; ++v103)
  {
    uint64_t v105 = *v103;
    *(void *)int v297 = *v103;
    uint64_t v106 = sub_1CC4EB4AC(a1 + 152, (uint64_t *)v297);
    uint64_t v107 = *v106;
    if (*(_DWORD *)(*v106 + 64) != -1)
    {
      uint64_t v108 = *(const llvm::MCFragment **)(v105 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v108);
      int v109 = *((_DWORD *)v108 + 8);
      int v110 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)a3, a3, v108) + v109;
      *(_DWORD *)(v107 + 16) = v110;
      if ((*(unsigned char *)(v107 + 36) & 0x80) == 0)
      {
        *(_DWORD *)(v107 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v102;
        v102 += v110;
      }
      uint64_t v111 = *(void *)(v107 + 88);
      uint64_t v112 = *(void *)(v107 + 96);
      if (v111 != v112)
      {
        unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 3);
        if (v113 > 0xFFFE) {
          __int16 v114 = -1;
        }
        else {
          __int16 v114 = -21845 * ((v112 - v111) >> 3);
        }
        *(_WORD *)(v107 + 32) = v114;
        *(_DWORD *)(v107 + 24) = v102;
        do
        {
          *(_DWORD *)(v111 + 4) = *(_DWORD *)(*(void *)(v111 + 16) + 56);
          v111 += 24;
        }
        while (v111 != v112);
        if (v113 <= 0xFFFE) {
          int v115 = v102;
        }
        else {
          int v115 = v102 + 10;
        }
        int v102 = 10 * v113 + v115;
      }
      uint64_t v116 = *(void *)(*(void *)(v107 + 80) + 64);
      *(_DWORD *)(v116 + 4) = v110;
      *(_WORD *)(v116 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_WORD *)(v107 + 32);
      *(_WORD *)(v116 + 1llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(_WORD *)(v107 + 34);
    }
  }
  *(_DWORD *)(a1 + 44) = v102;
  if ((*(unsigned char *)(a2 + 500) & 4) != 0)
  {
    time_t v118 = time(0);
    int v117 = -1;
    if ((unint64_t)v118 < 0xFFFFFFFF) {
      int v117 = v118;
    }
    if (v118 < 0) {
      int v117 = -1;
    }
  }
  else
  {
    int v117 = 0;
  }
  *(_DWORD *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v117;
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v119 = *(llvm::raw_ostream **)(a1 + 8);
    *(_WORD *)int v297 = 0;
    llvm::raw_ostream::write(v119, v297, 2uLL);
    uint64_t v120 = *(llvm::raw_ostream **)(a1 + 8);
    *(_WORD *)int v297 = -1;
    llvm::raw_ostream::write(v120, v297, 2uLL);
    uint64_t v121 = *(llvm::raw_ostream **)(a1 + 8);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      __int16 v122 = 512;
    }
    else {
      __int16 v122 = 2;
    }
    *(_WORD *)int v297 = v122;
    llvm::raw_ostream::write(v121, v297, 2uLL);
    unsigned int v123 = *(unsigned __int16 *)(a1 + 32);
    uint64_t v124 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v125 = bswap32(v123) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      LOWORD(v123) = v125;
    }
    *(_WORD *)int v297 = v123;
    llvm::raw_ostream::write(v124, v297, 2uLL);
    unsigned int v126 = *(_DWORD *)(a1 + 40);
    uint64_t v127 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v128 = bswap32(v126);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v126 = v128;
    }
    *(_DWORD *)int v297 = v126;
    llvm::raw_ostream::write(v127, v297, 4uLL);
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), byte_1CFB28FC4, 0x10uLL);
    int v129 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)int v297 = 0;
    llvm::raw_ostream::write(v129, v297, 4uLL);
    unsigned int v130 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)int v297 = 0;
    llvm::raw_ostream::write(v130, v297, 4uLL);
    BOOL v131 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)int v297 = 0;
    llvm::raw_ostream::write(v131, v297, 4uLL);
    int v132 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)int v297 = 0;
    llvm::raw_ostream::write(v132, v297, 4uLL);
    unsigned int v133 = *(_DWORD *)(a1 + 36);
    unint64_t v134 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v135 = bswap32(v133);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v133 = v135;
    }
    *(_DWORD *)int v297 = v133;
    llvm::raw_ostream::write(v134, v297, 4uLL);
    unsigned int v136 = *(_DWORD *)(a1 + 44);
    unint64_t v137 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v138 = bswap32(v136);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v136 = v138;
    }
    *(_DWORD *)int v297 = v136;
    llvm::raw_ostream::write(v137, v297, 4uLL);
    unsigned int v139 = *(_DWORD *)(a1 + 48);
    uint64_t v140 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v141 = bswap32(v139);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v139 = v141;
    }
    *(_DWORD *)int v297 = v139;
    size_t v142 = 4;
  }
  else
  {
    unsigned int v143 = *(unsigned __int16 *)(a1 + 32);
    unint64_t v144 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v145 = bswap32(v143) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      LOWORD(v143) = v145;
    }
    *(_WORD *)int v297 = v143;
    llvm::raw_ostream::write(v144, v297, 2uLL);
    unsigned int v146 = *(unsigned __int16 *)(a1 + 36);
    uint64_t v147 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v148 = bswap32(v146) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      LOWORD(v146) = v148;
    }
    *(_WORD *)int v297 = v146;
    llvm::raw_ostream::write(v147, v297, 2uLL);
    unsigned int v149 = *(_DWORD *)(a1 + 40);
    uint64_t v150 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v151 = bswap32(v149);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v149 = v151;
    }
    *(_DWORD *)int v297 = v149;
    llvm::raw_ostream::write(v150, v297, 4uLL);
    unsigned int v152 = *(_DWORD *)(a1 + 44);
    char v153 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v154 = bswap32(v152);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v152 = v154;
    }
    *(_DWORD *)int v297 = v152;
    llvm::raw_ostream::write(v153, v297, 4uLL);
    unsigned int v155 = *(_DWORD *)(a1 + 48);
    uint64_t v156 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v157 = bswap32(v155);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      unsigned int v155 = v157;
    }
    *(_DWORD *)int v297 = v155;
    llvm::raw_ostream::write(v156, v297, 4uLL);
    unsigned int v158 = *(unsigned __int16 *)(a1 + 52);
    unint64_t v159 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v160 = bswap32(v158) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      LOWORD(v15MEMORY[0x1D25D9CD0](*(void *)this, 8) = v160;
    }
    *(_WORD *)int v297 = v158;
    llvm::raw_ostream::write(v159, v297, 2uLL);
    unsigned int v161 = *(unsigned __int16 *)(a1 + 54);
    uint64_t v140 = *(llvm::raw_ostream **)(a1 + 8);
    unsigned int v162 = bswap32(v161) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
      LOWORD(v16llvm::StringTableBuilder::finalizeStringTable(this, 1) = v162;
    }
    *(_WORD *)int v297 = v161;
    size_t v142 = 2;
  }
  llvm::raw_ostream::write(v140, v297, v142);
  long long v163 = *(uint64_t **)(a1 + 56);
  unint64_t v164 = *(uint64_t **)(a1 + 64);
  if (v163 == v164)
  {
    unint64_t v167 = 0;
    long long v169 = 0;
  }
  else
  {
    uint64_t v165 = 0;
    unint64_t v166 = 0;
    unint64_t v167 = 0;
    do
    {
      uint64_t v168 = *v163;
      if (v166 >= v165)
      {
        uint64_t v170 = v166 - v167;
        unint64_t v171 = v170 + 1;
        if ((unint64_t)(v170 + 1) >> 61) {
          abort();
        }
        if (((char *)v165 - (char *)v167) >> 2 > v171) {
          unint64_t v171 = ((char *)v165 - (char *)v167) >> 2;
        }
        if ((unint64_t)((char *)v165 - (char *)v167) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v172 = v171;
        }
        if (v172)
        {
          if (v172 >> 61) {
            sub_1CB833614();
          }
          long long v173 = (char *)operator new(8 * v172);
        }
        else
        {
          long long v173 = 0;
        }
        unint64_t v174 = (uint64_t *)&v173[8 * v170];
        *unint64_t v174 = v168;
        long long v169 = v174 + 1;
        while (v166 != v167)
        {
          uint64_t v175 = *--v166;
          *--unint64_t v174 = v175;
        }
        uint64_t v165 = (uint64_t *)&v173[8 * v172];
        if (v167) {
          operator delete(v167);
        }
        unint64_t v167 = v174;
      }
      else
      {
        uint64_t *v166 = v168;
        long long v169 = v166 + 1;
      }
      ++v163;
      unint64_t v166 = v169;
    }
    while (v163 != v164);
  }
  unint64_t v176 = 126 - 2 * __clz(v169 - v167);
  if (v169 == v167) {
    uint64_t v177 = 0;
  }
  else {
    uint64_t v177 = v176;
  }
  sub_1CCBEF6D8(v167, v169, v177, 1);
  if (v169 != v167)
  {
    unint64_t v178 = v167;
    do
    {
      uint64_t v179 = *v178;
      if (*(_DWORD *)(*v178 + 64) != -1)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v179 + 96) - *(void *)(v179 + 88)) >> 3) >= 0xFFFF) {
          *(_DWORD *)(v179 + 36) |= 0x1000000u;
        }
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), (const char *)v179, 8uLL);
        unsigned int v180 = *(_DWORD *)(v179 + 8);
        long long v181 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v182 = bswap32(v180);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v180 = v182;
        }
        *(_DWORD *)int v297 = v180;
        llvm::raw_ostream::write(v181, v297, 4uLL);
        unsigned int v183 = *(_DWORD *)(v179 + 12);
        uint64_t v184 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v185 = bswap32(v183);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v183 = v185;
        }
        *(_DWORD *)int v297 = v183;
        llvm::raw_ostream::write(v184, v297, 4uLL);
        unsigned int v186 = *(_DWORD *)(v179 + 16);
        unint64_t v187 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v188 = bswap32(v186);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v186 = v188;
        }
        *(_DWORD *)int v297 = v186;
        llvm::raw_ostream::write(v187, v297, 4uLL);
        unsigned int v189 = *(_DWORD *)(v179 + 20);
        int v190 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v191 = bswap32(v189);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v189 = v191;
        }
        *(_DWORD *)int v297 = v189;
        llvm::raw_ostream::write(v190, v297, 4uLL);
        unsigned int v192 = *(_DWORD *)(v179 + 24);
        uint64_t v193 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v194 = bswap32(v192);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v192 = v194;
        }
        *(_DWORD *)int v297 = v192;
        llvm::raw_ostream::write(v193, v297, 4uLL);
        unsigned int v195 = *(_DWORD *)(v179 + 28);
        uint64_t v196 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v197 = bswap32(v195);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v195 = v197;
        }
        *(_DWORD *)int v297 = v195;
        llvm::raw_ostream::write(v196, v297, 4uLL);
        unsigned int v198 = *(unsigned __int16 *)(v179 + 32);
        unsigned int v199 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v200 = bswap32(v198) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          LOWORD(v19MEMORY[0x1D25D9CD0](*(void *)this, 8) = v200;
        }
        *(_WORD *)int v297 = v198;
        llvm::raw_ostream::write(v199, v297, 2uLL);
        unsigned int v201 = *(unsigned __int16 *)(v179 + 34);
        unsigned int v202 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v203 = bswap32(v201) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          LOWORD(v20llvm::StringTableBuilder::finalizeStringTable(this, 1) = v203;
        }
        *(_WORD *)int v297 = v201;
        llvm::raw_ostream::write(v202, v297, 2uLL);
        unsigned int v204 = *(_DWORD *)(v179 + 36);
        long long v205 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v206 = bswap32(v204);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v204 = v206;
        }
        *(_DWORD *)int v297 = v204;
        llvm::raw_ostream::write(v205, v297, 4uLL);
      }
      ++v178;
    }
    while (v178 != v169);
  }
  if (v167) {
    operator delete(v167);
  }
  BOOL v207 = *(uint64_t **)(a1 + 56);
  BOOL v208 = *(uint64_t **)(a1 + 64);
  uint64_t v210 = *(const llvm::MCSection ***)(a2 + 32);
  unint64_t v209 = *(const llvm::MCSection ***)(a2 + 40);
  if (v207 != v208 && v210 != v209)
  {
    do
    {
      uint64_t v270 = *v207;
      if (*(_DWORD *)(*v207 + 64) != -1)
      {
        if (*(_DWORD *)(v270 + 20))
        {
          uint64_t v271 = *v210;
          long long v298 = xmmword_1CFAC3020;
          int v289 = 0;
          char v293 = 0;
          uint64_t v294 = 0;
          *(void *)uint64_t v288 = &unk_1F2646FA8;
          int v296 = v297;
          *(void *)int v297 = &v299;
          int v295 = 0;
          uint64_t v291 = 0;
          uint64_t v292 = 0;
          long long v290 = 0;
          llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)a2, (llvm::raw_ostream *)v288, v271, a3);
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), *(const char **)v297, v298);
          uint64_t v272 = *(char **)v297;
          uint64_t v273 = v298;
          if ((void)v298)
          {
            unsigned int v274 = 0;
            BOOL v275 = *(const char **)v297;
            do
            {
              char v276 = *v275++;
              unsigned int v274 = dword_1CFB2E4B8[(v276 ^ v274)] ^ (v274 >> 8);
              --v273;
            }
            while (v273);
          }
          else
          {
            unsigned int v274 = 0;
          }
          *(void *)uint64_t v288 = &unk_1F2646B98;
          if (v295 == 1 && v290)
          {
            MEMORY[0x1D25D9CB0](v290, 0x1000C8077774924);
            uint64_t v272 = *(char **)v297;
          }
          if (v272 != (char *)&v299) {
            free(v272);
          }
          *(void *)int v297 = v271;
          *(_DWORD *)(*(void *)(*(void *)(*sub_1CC4EB4AC(a1 + 152, (uint64_t *)v297) + 80) + 64) + 12) = v274;
        }
        uint64_t v278 = *(void *)(v270 + 88);
        uint64_t v277 = *(void *)(v270 + 96);
        if (v278 != v277)
        {
          unint64_t v279 = 0xAAAAAAAAAAAAAAABLL * ((v277 - v278) >> 3);
          if (v279 >= 0xFFFF)
          {
            *(_DWORD *)int v297 = v279 + 1;
            *(_DWORD *)&v297[4] = 0;
            LOWORD(v29MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
            sub_1CCBF0130(a1, (uint64_t)v297);
            uint64_t v278 = *(void *)(v270 + 88);
            uint64_t v277 = *(void *)(v270 + 96);
          }
          while (v278 != v277)
          {
            sub_1CCBF0130(a1, v278);
            v278 += 24;
          }
        }
      }
      if (++v207 == v208) {
        break;
      }
      ++v210;
    }
    while (v210 != v209);
  }
  unsigned int v212 = *(const char ***)(a1 + 80);
  uint64_t v213 = *(const char ***)(a1 + 88);
  if (v212 != v213)
  {
    while (1)
    {
      uint64_t v214 = *v212;
      if (*((_DWORD *)*v212 + 14) != -1)
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), *v212, 8uLL);
        unsigned int v215 = *((_DWORD *)v214 + 2);
        unsigned int v216 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v217 = bswap32(v215);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          unsigned int v215 = v217;
        }
        *(_DWORD *)int v297 = v215;
        llvm::raw_ostream::write(v216, v297, 4uLL);
        unsigned int v218 = *((_DWORD *)v214 + 3);
        if (*(unsigned char *)(a1 + 224))
        {
          uint64_t v219 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v220 = bswap32(v218);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v218 = v220;
          }
          *(_DWORD *)int v297 = v218;
          size_t v221 = 4;
        }
        else
        {
          uint64_t v219 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v222 = bswap32(v218) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            LOWORD(v21MEMORY[0x1D25D9CD0](*(void *)this, 8) = v222;
          }
          *(_WORD *)int v297 = v218;
          size_t v221 = 2;
        }
        llvm::raw_ostream::write(v219, v297, v221);
        unsigned int v223 = *((unsigned __int16 *)v214 + 8);
        unint64_t v224 = *(llvm::raw_ostream **)(a1 + 8);
        unsigned int v225 = bswap32(v223) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
          LOWORD(v223) = v225;
        }
        *(_WORD *)int v297 = v223;
        llvm::raw_ostream::write(v224, v297, 2uLL);
        unint64_t v226 = *(llvm::raw_ostream **)(a1 + 8);
        char v227 = v214[18];
        __int16 v228 = (char *)*((void *)v226 + 4);
        if ((unint64_t)v228 >= *((void *)v226 + 3))
        {
          llvm::raw_ostream::write(v226, v227);
        }
        else
        {
          *((void *)v226 + 4) = v228 + 1;
          char *v228 = v227;
        }
        int v229 = *(llvm::raw_ostream **)(a1 + 8);
        char v230 = v214[19];
        unsigned int v231 = (char *)*((void *)v229 + 4);
        if ((unint64_t)v231 >= *((void *)v229 + 3))
        {
          llvm::raw_ostream::write(v229, v230);
        }
        else
        {
          *((void *)v229 + 4) = v231 + 1;
          char *v231 = v230;
        }
        uint64_t v232 = *((unsigned int *)v214 + 18);
        if (v232) {
          break;
        }
      }
LABEL_294:
      if (++v212 == v213) {
        goto LABEL_295;
      }
    }
    uint64_t v233 = 24 * v232;
    unsigned int v234 = (unsigned __int16 *)(*((void *)v214 + 8) + 10);
    while (2)
    {
      int v235 = *(_DWORD *)(v234 - 5);
      switch(v235)
      {
        case 2:
          unsigned int v248 = *(_DWORD *)(v234 - 3);
          uint64_t v249 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v250 = bswap32(v248);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v248 = v250;
          }
          *(_DWORD *)int v297 = v248;
          llvm::raw_ostream::write(v249, v297, 4uLL);
          unsigned int v251 = *(v234 - 1);
          uint64_t v252 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v253 = bswap32(v251) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            LOWORD(v25llvm::StringTableBuilder::finalizeStringTable(this, 1) = v253;
          }
          *(_WORD *)int v297 = v251;
          llvm::raw_ostream::write(v252, v297, 2uLL);
          unsigned int v254 = *v234;
          uint64_t v255 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v256 = bswap32(v254) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            LOWORD(v254) = v256;
          }
          *(_WORD *)int v297 = v254;
          llvm::raw_ostream::write(v255, v297, 2uLL);
          unsigned int v257 = *(_DWORD *)(v234 + 1);
          unint64_t v258 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v259 = bswap32(v257);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v257 = v259;
          }
          *(_DWORD *)int v297 = v257;
          llvm::raw_ostream::write(v258, v297, 4uLL);
          unsigned int v260 = v234[3];
          int v261 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v262 = bswap32(v260) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            LOWORD(v26llvm::StringTableBuilder::finalizeStringTable(this, 0) = v262;
          }
          *(_WORD *)int v297 = v260;
          llvm::raw_ostream::write(v261, v297, 2uLL);
          unsigned int v263 = *(llvm::raw_ostream **)(a1 + 8);
          char v264 = *((unsigned char *)v234 + 10);
          uint64_t v265 = (char *)*((void *)v263 + 4);
          if ((unint64_t)v265 >= *((void *)v263 + 3))
          {
            llvm::raw_ostream::write(v263, v264);
          }
          else
          {
            *((void *)v263 + 4) = v265 + 1;
            *uint64_t v265 = v264;
          }
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "", 1uLL);
          unsigned int v266 = v234[4];
          uint64_t v242 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v267 = bswap32(v266) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            LOWORD(v266) = v267;
          }
          *(_WORD *)int v297 = v266;
          uint64_t v243 = v297;
          size_t v244 = 2;
LABEL_290:
          llvm::raw_ostream::write(v242, v243, v244);
          if (!*(unsigned char *)(a1 + 224))
          {
LABEL_293:
            v234 += 12;
            v233 -= 24;
            if (!v233) {
              goto LABEL_294;
            }
            continue;
          }
          uint64_t v245 = *(llvm::raw_ostream **)(a1 + 8);
          uint64_t v246 = "";
          size_t v247 = 2;
          break;
        case 1:
          uint64_t v245 = *(llvm::raw_ostream **)(a1 + 8);
          uint64_t v246 = (const char *)(v234 - 3);
          if (*(unsigned char *)(a1 + 224)) {
            size_t v247 = 20;
          }
          else {
            size_t v247 = 18;
          }
          break;
        case 0:
          unsigned int v236 = *(_DWORD *)(v234 - 3);
          char v237 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v238 = bswap32(v236);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v236 = v238;
          }
          *(_DWORD *)int v297 = v236;
          llvm::raw_ostream::write(v237, v297, 4uLL);
          unsigned int v239 = *(_DWORD *)(v234 - 1);
          v240 = *(llvm::raw_ostream **)(a1 + 8);
          unsigned int v241 = bswap32(v239);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
            unsigned int v239 = v241;
          }
          *(_DWORD *)int v297 = v239;
          llvm::raw_ostream::write(v240, v297, 4uLL);
          uint64_t v242 = *(llvm::raw_ostream **)(a1 + 8);
          uint64_t v243 = "";
          size_t v244 = 10;
          goto LABEL_290;
        default:
          goto LABEL_293;
      }
      break;
    }
    llvm::raw_ostream::write(v245, v246, v247);
    goto LABEL_293;
  }
LABEL_295:
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 104), *(llvm::raw_ostream **)(a1 + 8));
  uint64_t v268 = *(void **)(a1 + 8);
  return v280 - (v282 + v281) + v268[4] + (*(uint64_t (**)(void *))(*v268 + 80))(v268) - v268[2];
}

void *sub_1CCBEF2E4(void *a1)
{
  int v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (void *)v2[8];
    if (v3 != v2 + 10) {
      free(v3);
    }
    unint64_t v4 = (void *)v2[3];
    if (v4 != v2 + 6) {
      free(v4);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10E0C40ABAEFE22);
  }
  return a1;
}

uint64_t *sub_1CCBEF354(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 112);
    if (v3 != (void *)(v2 + 128)) {
      free(v3);
    }
    unint64_t v4 = *(void **)(v2 + 88);
    if (v4)
    {
      *(void *)(v2 + 96) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 63) < 0) {
      operator delete(*(void **)(v2 + 40));
    }
    MEMORY[0x1D25D9CE0](v2, 0x10F2C4051320FA1);
  }
  return a1;
}

void sub_1CCBEF3D0()
{
}

uint64_t sub_1CCBEF5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  uint64_t v3 = a1 + 176;
  if ((sub_1CBB0BF40(*(void *)(a1 + 176), *(_DWORD *)(a1 + 192), a2, &v7) & 1) == 0)
  {
    uint64_t v5 = sub_1CC4EB2E8(v3, &v6, v7);
    void *v5 = a2;
    v5[1] = 0;
    goto LABEL_5;
  }
  uint64_t result = v7[1];
  if (!result) {
LABEL_5:
  }
    sub_1CCBEF3D0();
  return result;
}

void sub_1CCBEF644(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
      }
    }
    *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v3;
  }
}

uint64_t *sub_1CCBEF6D8(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 64) < *(_DWORD *)(*v10 + 64))
                {
                  *uint64_t v10 = v39;
                  *(a2 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CCBEFE04(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CCBF0098(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                BOOL v41 = v10 + 1;
                int v42 = v10 + 2;
                int v43 = v10 + 3;
                uint64_t result = sub_1CCBF0098(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 64) < *(_DWORD *)(v45 + 64))
                {
                  *int v43 = v44;
                  *(a2 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  int v48 = *(_DWORD *)(*v43 + 64);
                  if (v48 < *(_DWORD *)(*v42 + 64))
                  {
                    *int v42 = v46;
                    *int v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(_DWORD *)(*v41 + 64))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(_DWORD *)(*v10 + 64))
                      {
                        *uint64_t v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                char v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  char v55 = v51;
                  int v58 = *(_DWORD *)(v56 + 64);
                  if (v58 < *(_DWORD *)(v57 + 64))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        unint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(_DWORD *)(v57 + 64));
                    unint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *unint64_t v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v51;
                int v92 = *(_DWORD *)(v90 + 64);
                if (v92 < *(_DWORD *)(v91 + 64))
                {
                  do
                  {
                    *uint64_t v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(_DWORD *)(v91 + 64));
                  *uint64_t v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 64) < *(_DWORD *)(v66[1] + 64))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  int v69 = *(_DWORD *)(*result + 64);
                  if (*(_DWORD *)(v67 + 64) >= v69)
                  {
                    do
                    {
                      size_t v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 64) < *(_DWORD *)(v66[1] + 64))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 64) >= v69);
                    uint64_t *v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                uint64_t v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  __int16 v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v78 + 64);
                    if ((int)result < *(_DWORD *)(v77[1] + 64))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *uint64_t v75 = v78;
                  uint64_t v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *__int16 v77 = v74;
                }
                else
                {
                  *__int16 v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    int v87 = *(_DWORD *)(*v77 + 64);
                    if (*(_DWORD *)(*v84 + 64) < v87)
                    {
                      do
                      {
                        uint64_t v88 = v84;
                        *__int16 v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        __int16 v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 64) < v87);
                      *uint64_t v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          char v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CCBEFE04(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CCBEFE04(v9 + 1, v14 - 1, a2 - 2);
            sub_1CCBEFE04(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CCBEFE04(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            *char v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CCBEFE04(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(v16 + 64);
          if (*(_DWORD *)(*(v9 - 1) + 64) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 64))
          {
            size_t v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(_DWORD *)(*v10 + 64));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v30 + 64));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(_DWORD *)(v33 + 64));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              *uint64_t v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(_DWORD *)(v36 + 64));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(_DWORD *)(v37 + 64));
            }
            while (v10 < v32);
          }
          uint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v38;
          }
          a4 = 0;
          *uint64_t v38 = v16;
        }
        int v17 = *(_DWORD *)(v16 + 64);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 64) < v17);
        uint64_t v20 = &v9[v18];
        unsigned int v21 = a2;
        if (v18 == 1)
        {
          unsigned int v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 64) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 64) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            *uint64_t v10 = v24;
            uint64_t *v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 64) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 64) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *uint64_t v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CCBEF6D8(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CCBEFE8C(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CCBEFE8C(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CCBEFE04(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  int v5 = *(_DWORD *)(*a2 + 64);
  int v6 = *(_DWORD *)(*result + 64);
  uint64_t v7 = *a3;
  int v8 = *(_DWORD *)(*a3 + 64);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 64) < *(_DWORD *)(*result + 64))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 64) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CCBEFE8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 64) < *(_DWORD *)(*a1 + 64))
      {
        *a1 = v6;
        *(a2 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v7;
      }
      return result;
    case 3:
      sub_1CCBEFE04(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CCBF0098(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CCBF0098(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 64) < *(_DWORD *)(v22 + 64))
      {
        *uint64_t v20 = v21;
        *(a2 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        int v25 = *(_DWORD *)(*v20 + 64);
        if (v25 < *(_DWORD *)(*v19 + 64))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 64))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 64))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      sub_1CCBEFE04(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    int v14 = *(_DWORD *)(*v9 + 64);
    if (v14 < *(_DWORD *)(*v8 + 64))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 64))
        {
          int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int v17 = a1;
LABEL_13:
      *int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CCBF0098(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CCBEFE04(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 64) < *(_DWORD *)(*a3 + 64))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 64) < *(_DWORD *)(*a2 + 64))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 64) < *(_DWORD *)(*a1 + 64))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CCBF0130(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)a2;
  int v5 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v6 = bswap32(*(_DWORD *)a2);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v4 = v6;
  }
  *(_DWORD *)int v14 = v4;
  llvm::raw_ostream::write(v5, v14, 4uLL);
  unsigned int v7 = *(_DWORD *)(a2 + 4);
  int v8 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v9 = bswap32(v7);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    unsigned int v7 = v9;
  }
  *(_DWORD *)uint64_t v15 = v7;
  llvm::raw_ostream::write(v8, v15, 4uLL);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v11 = *(llvm::raw_ostream **)(a1 + 8);
  unsigned int v12 = bswap32(v10) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2) {
    LOWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v12;
  }
  *(_WORD *)uint64_t v16 = v10;
  return llvm::raw_ostream::write(v11, v16, 2uLL);
}

uint64_t sub_1CCBF01E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v6 = 8 * a3;
  uint64_t v7 = (8 * a3) >> 3;
  *(_OWORD *)a1 = 0u;
  if (!(8 * a3))
  {
    int v8 = 0;
    goto LABEL_6;
  }
  sub_1CCBF2AEC(a1, (8 * a3) >> 3);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 32) + v6;
  int v8 = (void *)(v9 + 8 * (v10 >> 9));
  if (*(void *)(a1 + 16) == v9)
  {
LABEL_6:
    uint64_t v11 = 0;
    if (a3) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v12 = v11;
    uint64_t v13 = v8;
    goto LABEL_11;
  }
  uint64_t v11 = *v8 + 8 * (v10 & 0x1FF);
  if (!a3) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v14 = v7 + ((v11 - *v8) >> 3);
  if (v14 < 1)
  {
    unint64_t v15 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    uint64_t v13 = &v8[-(v15 >> 9)];
  }
  else
  {
    uint64_t v13 = &v8[(unint64_t)v14 >> 9];
  }
  uint64_t v12 = *v13 + 8 * (v14 & 0x1FF);
LABEL_11:
  if (v11 != v12)
  {
    do
    {
      uint64_t v16 = v12;
      if (v8 != v13) {
        uint64_t v16 = *v8 + 4096;
      }
      if (v11 == v16)
      {
        uint64_t v16 = v11;
      }
      else
      {
        int v17 = (void *)v11;
        do
        {
          uint64_t v18 = *a2++;
          *v17++ = v18;
        }
        while (v17 != (void *)v16);
      }
      v6 += (v16 - v11) >> 3;
      if (v8 == v13) {
        break;
      }
      uint64_t v19 = v8[1];
      ++v8;
      uint64_t v11 = v19;
    }
    while (v19 != v12);
    *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v6;
  }
  return a1;
}

uint64_t sub_1CCBF0324(uint64_t a1, const void *a2, size_t a3, int a4, char a5, void *a6)
{
  *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0u;
  uint64_t v11 = (void *)(a1 + 8);
  *(void *)a1 = &unk_1F2631BA0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 52) = a4;
  *(_WORD *)(a1 + 56) = -3;
  memcpy((void *)(a1 + 8), a2, a3);
  *(void *)a1 = &unk_1F2631B78;
  *(unsigned char *)(a1 + 5MEMORY[0x1D25D9CD0](*(void *)this, 8) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v12 = a6[4];
  uint64_t v13 = a6[1];
  uint64_t v14 = (char *)(v13 + 8 * (v12 >> 9));
  if (a6[2] == v13)
  {
    unint64_t v15 = 0;
    uint64_t v18 = 0;
    int v17 = (char *)(v13 + 8 * ((a6[5] + v12) >> 9));
  }
  else
  {
    unint64_t v15 = (uint64_t *)(*(void *)v14 + 8 * (a6[4] & 0x1FFLL));
    unint64_t v16 = a6[5] + v12;
    int v17 = (char *)(v13 + 8 * (v16 >> 9));
    uint64_t v18 = *(void *)v17 + 8 * (v16 & 0x1FF);
  }
  if ((uint64_t *)v18 != v15)
  {
    uint64_t v19 = ((v18 - *(void *)v17) >> 3) + ((v17 - v14) << 6);
    uint64_t v20 = (uint64_t)v15 - *(void *)v14;
    if (v19 != v20 >> 3)
    {
      unint64_t v21 = v19 - (v20 >> 3);
      sub_1CCBF2AEC(a1 + 64, v21);
      uint64_t v22 = *(void *)(a1 + 104);
      uint64_t v23 = *(void *)(a1 + 72);
      unint64_t v24 = *(void *)(a1 + 96) + v22;
      int v25 = (void *)(v23 + 8 * (v24 >> 9));
      uint64_t v26 = (void *)*v25;
      uint64_t v27 = *v25 + 8 * (v24 & 0x1FF);
      uint64_t v28 = *(void *)(a1 + 80) == v23 ? 0 : (void *)v27;
      uint64_t v29 = v21 + v28 - v26;
      if (v29 < 1)
      {
        unint64_t v31 = 511 - v29;
        LOWORD(v29) = ~(511 - v29);
        uint64_t v30 = &v25[-(v31 >> 9)];
      }
      else
      {
        uint64_t v30 = &v25[(unint64_t)v29 >> 9];
      }
      uint64_t v32 = *v30 + 8 * (v29 & 0x1FF);
      if (v28 != (void *)v32)
      {
        do
        {
          uint64_t v33 = v26 + 512;
          if (v25 == v30) {
            uint64_t v33 = (void *)v32;
          }
          if (v28 == v33)
          {
            uint64_t v33 = v28;
          }
          else
          {
            uint64_t v34 = v28;
            do
            {
              uint64_t v35 = *v15++;
              *v34++ = v35;
              if ((uint64_t *)((char *)v15 - *(void *)v14) == (uint64_t *)4096)
              {
                uint64_t v36 = (uint64_t *)*((void *)v14 + 1);
                v14 += 8;
                unint64_t v15 = v36;
              }
            }
            while (v34 != v33);
          }
          v22 += v33 - v28;
          if (v25 == v30) {
            break;
          }
          uint64_t v37 = (void *)v25[1];
          ++v25;
          uint64_t v26 = v37;
          uint64_t v28 = v37;
        }
        while (v37 != (void *)v32);
        *(void *)(a1 + 104) = v22;
      }
    }
  }
  memcpy(v11, a2, a3);
  return a1;
}

uint64_t sub_1CCBF0560(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1CCBF0628(void *a1)
{
  *a1 = &unk_1F2631B10;
  unint64_t v2 = (void *)a1[150];
  if (v2)
  {
    uint64_t v3 = (void *)a1[151];
    unint64_t v4 = (void *)a1[150];
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      uint64_t v7 = v3 - 9;
      do
      {
        uint64_t v8 = *v7;
        v7 -= 9;
        (*(void (**)(void *))(v8 + 8))(v6);
        v5 -= 9;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = (void *)a1[150];
    }
    a1[151] = v2;
    operator delete(v4);
  }
  a1[131] = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 139));
  a1[117] = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 125));
  a1[103] = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 111));
  a1[89] = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 97));
  a1[75] = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 83));
  sub_1CCBF34F8((uint64_t)(a1 + 69));
  sub_1CCBF34F8((uint64_t)(a1 + 63));
  sub_1CCBF34F8((uint64_t)(a1 + 57));
  sub_1CCBF34F8((uint64_t)(a1 + 51));
  sub_1CCBF34F8((uint64_t)(a1 + 45));
  sub_1CCBF34F8((uint64_t)(a1 + 39));
  sub_1CCBF34F8((uint64_t)(a1 + 33));
  sub_1CCBF34F8((uint64_t)(a1 + 27));
  sub_1CCBF34F8((uint64_t)(a1 + 21));
  MEMORY[0x1D25D9CD0](a1[18], 8);
  MEMORY[0x1D25D9CD0](a1[15], 8);
  MEMORY[0x1D25D9CD0](a1[8], 8);
  uint64_t v10 = a1[7];
  a1[7] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

void sub_1CCBF0844(void *a1)
{
  sub_1CCBF0628(a1);

  JUMPOUT(0x1D25D9CE0);
}

_DWORD *sub_1CCBF087C(uint64_t a1)
{
  sub_1CCBD17BC(a1 + 144);
  unint64_t v2 = (void *)(a1 + 120);
  int v3 = *(_DWORD *)(a1 + 128);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 136);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      unint64_t v5 = (void *)*v2;
      int v6 = 1 << (33 - __clz(v3 - 1));
      if (v6 <= 64) {
        int v7 = 64;
      }
      else {
        int v7 = v6;
      }
      if (v7 == v4)
      {
        *(void *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
        uint64_t v8 = 16 * v4;
        do
        {
          void *v5 = -4096;
          v5 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v5, 8);
        unint64_t v31 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
        unint64_t v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
        LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
        *(_DWORD *)(a1 + 136) = v32;
        uint64_t v33 = operator new(16 * v32, (std::align_val_t)8uLL);
        *(void *)(a1 + 12llvm::StringTableBuilder::finalizeStringTable(this, 0) = v33;
        *(void *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
        uint64_t v34 = *(unsigned int *)(a1 + 136);
        if (v34)
        {
          uint64_t v35 = 16 * v34;
          do
          {
            *uint64_t v33 = -4096;
            v33 += 2;
            v35 -= 16;
          }
          while (v35);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 132)) {
      goto LABEL_18;
    }
    LODWORD(v4) = *(_DWORD *)(a1 + 136);
    if (v4 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*v2, 8);
      void *v2 = 0;
      *(void *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      goto LABEL_18;
    }
  }
  if (v4)
  {
    BOOL v9 = (void *)*v2;
    uint64_t v10 = 16 * v4;
    do
    {
      *BOOL v9 = -4096;
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  *(void *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
LABEL_18:
  uint64_t v11 = *(void ***)(a1 + 176);
  unint64_t v12 = *(void ***)(a1 + 184);
  if (v12 == v11)
  {
    uint64_t v13 = (void *)(a1 + 208);
    unint64_t v12 = *(void ***)(a1 + 176);
  }
  else
  {
    uint64_t v13 = (void *)(a1 + 208);
    unint64_t v14 = *(void *)(a1 + 200);
    unint64_t v15 = &v11[v14 / 0x2A];
    unint64_t v16 = (unint64_t)*v15 + 96 * (v14 % 0x2A);
    unint64_t v17 = (unint64_t)v11[(*(void *)(a1 + 208) + v14) / 0x2A] + 96 * ((*(void *)(a1 + 208) + v14) % 0x2A);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *(void **)(v16 + 64);
        if (v18 != (void *)(v16 + 80)) {
          free(v18);
        }
        uint64_t v19 = *(void **)(v16 + 32);
        if (v19 != (void *)(v16 + 48)) {
          free(v19);
        }
        v16 += 96;
        if (v16 - (void)*v15 == 4032)
        {
          unint64_t v20 = (unint64_t)v15[1];
          ++v15;
          unint64_t v16 = v20;
        }
      }
      while (v16 != v17);
      uint64_t v11 = *(void ***)(a1 + 176);
      unint64_t v12 = *(void ***)(a1 + 184);
    }
  }
  void *v13 = 0;
  unint64_t v21 = (char *)v12 - (char *)v11;
  if (v21 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      uint64_t v22 = *(void *)(a1 + 184);
      uint64_t v11 = (void **)(*(void *)(a1 + 176) + 8);
      *(void *)(a1 + 176) = v11;
      unint64_t v21 = v22 - (void)v11;
    }
    while (v21 > 0x10);
  }
  if (v21 >> 3 == 1)
  {
    uint64_t v23 = 21;
    goto LABEL_35;
  }
  if (v21 >> 3 == 2)
  {
    uint64_t v23 = 42;
LABEL_35:
    *(void *)(a1 + 20llvm::StringTableBuilder::finalizeStringTable(this, 0) = v23;
  }
  for (uint64_t i = 0; i != 40; i += 8)
    (***(void (****)(void))(a1 + 1160 + i))(*(void *)(a1 + 1160 + i));
  int v25 = *(void (****)(void))(a1 + 1200);
  uint64_t v26 = *(void (****)(void))(a1 + 1208);
  if (v25 != v26)
  {
    uint64_t v27 = *(void (****)(void))(a1 + 1200);
    uint64_t v28 = v27;
    do
    {
      uint64_t v29 = *v28;
      v28 += 9;
      (*v29)(v27);
      v25 += 9;
      uint64_t v27 = v28;
    }
    while (v28 != v26);
  }
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 104) = 0;

  return sub_1CCBE370C((_DWORD *)(a1 + 64));
}

void sub_1CCBF0BAC(uint64_t a1, void *a2, llvm::MCAsmLayout *a3)
{
  v126[9] = *MEMORY[0x1E4F143B8];
  int v3 = (uint64_t *)a2[4];
  uint64_t v4 = (uint64_t *)a2[5];
  if (v3 != v4)
  {
    uint64_t v108 = (void *)(a1 + 504);
    int v110 = (void *)(a1 + 552);
    __int16 v114 = (void *)(a1 + 456);
    uint64_t v116 = (void *)(a1 + 408);
    uint64_t v105 = (void *)(a1 + 312);
    uint64_t v106 = (void *)(a1 + 264);
    uint64_t v107 = (void *)(a1 + 360);
    uint64_t v121 = a1 + 64;
    unsigned int v123 = (void *)(a1 + 216);
    uint64_t v5 = a1 + 120;
    while (2)
    {
      uint64_t v6 = *v3;
      uint64_t v125 = v6;
      unint64_t v7 = *(void *)(v6 + 248);
      if (v7 >= 9)
      {
        uint64_t v8 = *(void **)(v6 + 240);
        unsigned int v9 = sub_1CD0B03C8(v8, (uint64_t)v8 + v7);
        llvm::StringTableBuilder::add(v121, (uint64_t)v8, v7 | ((unint64_t)v9 << 32));
      }
      if (*(unsigned char *)(v6 + 226))
      {
        uint64_t v10 = v123;
        switch(*(unsigned char *)(v6 + 224))
        {
          case 0:
            goto LABEL_17;
          case 1:
            uint64_t v10 = v106;
            goto LABEL_17;
          case 3:
          case 0xF:
          case 0x16:
            uint64_t v10 = v116;
            goto LABEL_17;
          case 5:
            int v11 = *(unsigned __int8 *)(v6 + 225);
            uint64_t v10 = v114;
            if (v11 == 3) {
              goto LABEL_17;
            }
            uint64_t v10 = v105;
            if (v11 == 1) {
              goto LABEL_17;
            }
            uint64_t v104 = "Unhandled mapping of read-write csect to section.";
            goto LABEL_109;
          case 9:
            uint64_t v10 = v114;
            goto LABEL_17;
          case 0xA:
            uint64_t v10 = v107;
            goto LABEL_17;
          case 0x10:
            uint64_t v104 = "toc-data not yet supported when writing object files.";
            goto LABEL_109;
          case 0x14:
            uint64_t v10 = v108;
            goto LABEL_17;
          case 0x15:
            uint64_t v10 = v110;
LABEL_17:
            sub_1CCBF3694((uint64_t)v10, &v125);
            unint64_t v12 = v10[5] + v10[4] - 1;
            uint64_t v13 = *(void *)(v10[1] + 8 * (v12 / 0x2A)) + 96 * (v12 % 0x2A);
            *sub_1CC959744(v5, &v125) = v13;
            if (++v3 == v4) {
              goto LABEL_18;
            }
            continue;
          default:
            uint64_t v104 = "Unhandled mapping of csect to section.";
            goto LABEL_109;
        }
      }
      break;
    }
    operator new();
  }
LABEL_18:
  unint64_t v14 = (uint64_t *)a2[7];
  unint64_t v15 = (uint64_t *)a2[8];
  if (v14 != v15)
  {
    uint64_t v16 = a1 + 120;
    do
    {
      uint64_t v17 = *v14;
      if ((*(unsigned char *)(*v14 + 8) & 1) == 0)
      {
        uint64_t v18 = sub_1CCBF3C90(*v14);
        uint64_t v19 = v18;
        v126[0] = v18;
        if (*(unsigned char *)(v18 + 225))
        {
          if (v17 == *(void *)(v18 + 232) || (*(unsigned char *)(v17 + 8) & 0x10) == 0) {
            goto LABEL_32;
          }
          uint64_t v20 = *sub_1CC959744(v16, v126);
          uint64_t v21 = *(unsigned int *)(v20 + 40);
          if (v21 >= *(_DWORD *)(v20 + 44)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v22 = *(void *)(v20 + 32) + 16 * v21;
          *(void *)uint64_t v22 = v17;
          *(_DWORD *)(v22 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = -1;
          *(_DWORD *)(v20 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v21 + 1;
          unint64_t v23 = *(void *)(v17 + 64);
          if (!v23)
          {
            if ((*(unsigned char *)v17 & 4) != 0)
            {
              uint64_t v33 = *(uint64_t **)(v17 - 8);
              uint64_t v34 = *v33;
              uint64_t v29 = (uint64_t)(v33 + 2);
              uint64_t v30 = v34;
            }
            else
            {
              uint64_t v29 = 0;
              uint64_t v30 = 0;
            }
            sub_1CD586E78(v29, v30);
          }
          if (v23 < 9) {
            goto LABEL_32;
          }
          unint64_t v24 = *(void *)(v17 + 64);
          if (v24)
          {
            int v25 = *(void **)(v17 + 56);
          }
          else
          {
            if ((*(unsigned char *)v17 & 4) != 0)
            {
              uint64_t v35 = *(uint64_t **)(v17 - 8);
              uint64_t v36 = *v35;
              uint64_t v31 = (uint64_t)(v35 + 2);
              uint64_t v32 = v36;
            }
            else
            {
              uint64_t v31 = 0;
              uint64_t v32 = 0;
            }
            int v25 = (void *)sub_1CD586E78(v31, v32);
            unint64_t v24 = v37;
          }
          goto LABEL_31;
        }
        sub_1CCBF3694(a1 + 168, v126);
        unint64_t v26 = *(void *)(a1 + 208) + *(void *)(a1 + 200) - 1;
        uint64_t v27 = *(void *)(*(void *)(a1 + 176) + 8 * (v26 / 0x2A)) + 96 * (v26 % 0x2A);
        *sub_1CC959744(v16, v126) = v27;
        unint64_t v24 = *(void *)(v19 + 248);
        if (v24 >= 9)
        {
          int v25 = *(void **)(v19 + 240);
LABEL_31:
          unsigned int v28 = sub_1CD0B03C8(v25, (uint64_t)v25 + v24);
          llvm::StringTableBuilder::add(a1 + 64, (uint64_t)v25, v24 | ((unint64_t)v28 << 32));
        }
      }
LABEL_32:
      ++v14;
    }
    while (v14 != v15);
  }
  int v38 = 1;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 64), 1);
  uint64_t v39 = *(void *)(a1 + 176);
  if (*(void *)(a1 + 184) == v39
    || (unint64_t v40 = *(void *)(a1 + 200),
        unint64_t v41 = *(void *)(v39 + 8 * (v40 / 0x2A)) + 96 * (v40 % 0x2A),
        unint64_t v42 = *(void *)(v39 + 8 * ((*(void *)(a1 + 208) + v40) / 0x2A))
            + 96 * ((*(void *)(a1 + 208) + v40) % 0x2A),
        v41 == v42))
  {
    uint64_t v44 = a3;
  }
  else
  {
    int v43 = (void *)(v39 + 8 * (v40 / 0x2A));
    uint64_t v44 = a3;
    do
    {
      *(void *)(v41 + 16) = 0;
      *(void *)(v41 + 24) = 0;
      *(_DWORD *)(v41 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v38;
      uint64_t v45 = *(void *)v41;
      v41 += 96;
      v126[0] = *(void *)(v45 + 232);
      *((_DWORD *)sub_1CD6A1F98((uint64_t *)(a1 + 144), v126) + 2) = v38;
      if (v41 - *v43 == 4032)
      {
        unint64_t v46 = v43[1];
        ++v43;
        unint64_t v41 = v46;
      }
      v38 += 2;
    }
    while (v41 != v42);
  }
  unsigned int v47 = 0;
  char v111 = 0;
  int v48 = (uint64_t *)(a1 + 144);
  int v49 = 1;
  uint64_t v50 = (uint64_t *)(a1 + 1160);
  uint64_t v124 = (uint64_t *)(a1 + 144);
  do
  {
    uint64_t v51 = *v50;
    uint64_t v52 = *(void *)(*v50 + 72);
    if (*(void *)(*v50 + 80) != v52)
    {
      int v115 = v50;
      uint64_t v117 = *v50;
      unint64_t v53 = *(void *)(v51 + 96);
      uint64_t v54 = (uint64_t *)(v52 + 8 * (v53 >> 9));
      uint64_t v55 = *v54;
      uint64_t v56 = *v54 + 8 * (v53 & 0x1FF);
      uint64_t v57 = *(void *)(v52 + (((*(void *)(v51 + 104) + v53) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(void *)(v51 + 104) + v53) & 0x1FF);
      if (v56 != v57)
      {
        uint64_t v58 = *v54 + 8 * (v53 & 0x1FF);
        uint64_t v59 = v54;
        while (!*(void *)(*(void *)v58 + 40))
        {
          v58 += 8;
          if (v58 - v55 == 4096)
          {
            uint64_t v60 = v59[1];
            ++v59;
            uint64_t v55 = v60;
            uint64_t v58 = v60;
          }
          if (v58 == v57) {
            goto LABEL_88;
          }
        }
        if (v49 >= 0x8000)
        {
          uint64_t v104 = "Section index overflow!";
          goto LABEL_109;
        }
        char v61 = 0;
        *(_WORD *)(v117 + 56) = v49;
        ++*(_WORD *)(a1 + 24);
        int v62 = *(_DWORD *)(v117 + 52);
        char v63 = (v62 == 1024) | v111;
        if (v62 == 1024) {
          unsigned int v64 = 0;
        }
        else {
          unsigned int v64 = v47;
        }
        v111 |= v62 == 1024;
        if (v63) {
          unsigned int v65 = v64;
        }
        else {
          unsigned int v65 = 0;
        }
        int v109 = v49 + 1;
        if (v62 == 2048) {
          unsigned int v66 = v65;
        }
        else {
          unsigned int v66 = v64;
        }
        uint64_t v118 = v57;
        do
        {
          uint64_t v67 = *(void **)v56;
          uint64_t v68 = *(void *)(*(void *)v56 + 40);
          if (v68)
          {
            char v120 = v61;
            __int16 v122 = v54;
            uint64_t v69 = v67[1];
            if (v67[2] != v69)
            {
              unint64_t v70 = v67[4];
              uint64_t v71 = (void *)(v69 + 8 * (v70 / 0x2A));
              unint64_t v72 = *v71 + 96 * (v70 % 0x2A);
              unint64_t v73 = *(void *)(v69 + 8 * ((v70 + v68) / 0x2A)) + 96 * ((v70 + v68) % 0x2A);
              while (v72 != v73)
              {
                uint64_t v74 = *(void *)v72;
                *(void *)(v72 + 16) = (v66
                                       + (unint64_t)(1 << *(unsigned char *)(*(void *)v72 + 24))
                                       - 1) & -(uint64_t)(1 << *(unsigned char *)(*(void *)v72 + 24));
                uint64_t v75 = *(const llvm::MCFragment **)(v74 + 104);
                llvm::MCAsmLayout::ensureValid(v44, v75);
                uint64_t v76 = *((void *)v75 + 4);
                unint64_t v77 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)v44, v44, v75);
                int v78 = v77 + v76;
                *(void *)(v72 + 24) = v77 + v76;
                int v79 = *(_DWORD *)(v72 + 16);
                *(_DWORD *)(v72 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v38;
                v126[0] = *(void *)(v74 + 232);
                *((_DWORD *)sub_1CD6A1F98(v124, v126) + 2) = v38;
                uint64_t v80 = *(unsigned int *)(v72 + 40);
                v38 += 2;
                if (v80)
                {
                  uint64_t v81 = 16 * v80;
                  uint64_t v82 = (int *)(*(void *)(v72 + 32) + 8);
                  do
                  {
                    *uint64_t v82 = v38;
                    v126[0] = *((void *)v82 - 1);
                    *((_DWORD *)sub_1CD6A1F98(v124, v126) + 2) = v38;
                    v38 += 2;
                    v82 += 4;
                    v81 -= 16;
                  }
                  while (v81);
                }
                v72 += 96;
                if (v72 - *v71 == 4032)
                {
                  unint64_t v83 = v71[1];
                  ++v71;
                  unint64_t v72 = v83;
                }
                uint64_t v44 = a3;
                unsigned int v66 = v79 + v78;
              }
            }
            if ((v120 & 1) == 0) {
              *(void *)(v117 + 16) = *(void *)(*(void *)(v67[1] + 8 * (v67[4] / 0x2AuLL))
            }
                                                 + 96 * (v67[4] % 0x2AuLL)
                                                 + 16);
            char v61 = 1;
            uint64_t v54 = v122;
            uint64_t v57 = v118;
          }
          v56 += 8;
          if (v56 - *v54 == 4096)
          {
            uint64_t v84 = v54[1];
            ++v54;
            uint64_t v56 = v84;
          }
        }
        while (v56 != v57);
        unsigned int v47 = (v66 + 3) & 0xFFFFFFFC;
        *(void *)(v117 + 24) = v47 - *(void *)(v117 + 16);
        int v49 = v109;
      }
LABEL_88:
      int v48 = (uint64_t *)(a1 + 144);
      uint64_t v50 = v115;
    }
    ++v50;
  }
  while (v50 != (uint64_t *)(a1 + 1200));
  uint64_t v85 = *(void *)(a1 + 1200);
  uint64_t v86 = *(void *)(a1 + 1208);
  if (v85 == v86)
  {
    uint64_t v87 = a1;
  }
  else
  {
    uint64_t v87 = a1;
    do
    {
      uint64_t v88 = *(uint64_t **)(v85 + 64);
      uint64_t v89 = *v88;
      int v90 = v49 + 1;
      *(_WORD *)(v85 + 56) = v49;
      ++*(_WORD *)(a1 + 24);
      *((_DWORD *)v88 + 2) = v38;
      v126[0] = *(void *)(v89 + 232);
      *((_DWORD *)sub_1CD6A1F98(v48, v126) + 2) = v38;
      v38 += 2;
      unint64_t v91 = (v47 + (unint64_t)(1 << *(unsigned char *)(v89 + 24)) - 1) & -(uint64_t)(1 << *(unsigned char *)(v89 + 24));
      v88[2] = v91;
      *(void *)(v85 + 16) = v91;
      int v92 = *(const llvm::MCFragment **)(v89 + 104);
      llvm::MCAsmLayout::ensureValid(v44, v92);
      uint64_t v93 = *((void *)v92 + 4);
      unint64_t v94 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)v44, v44, v92);
      v88[3] = v94 + v93;
      *(void *)(v85 + 24) = v94 + v93;
      unsigned int v47 = (*((_DWORD *)v88 + 4) + v94 + v93 + 3) & 0xFFFFFFFC;
      v85 += 72;
      int v49 = v90;
    }
    while (v85 != v86);
  }
  uint64_t v95 = 0;
  *(_DWORD *)(v87 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v38;
  unsigned int v96 = 72;
  if (!*(unsigned char *)(*(void *)(v87 + 56) + 8)) {
    unsigned int v96 = 40;
  }
  uint64_t v97 = 24;
  if (!*(unsigned char *)(*(void *)(v87 + 56) + 8)) {
    uint64_t v97 = 20;
  }
  unint64_t v98 = v97 + v96 * (unint64_t)*(unsigned __int16 *)(v87 + 24);
  do
  {
    uint64_t v99 = *(void *)(a1 + 1160 + v95);
    if (*(__int16 *)(v99 + 56) != -3 && !*(unsigned char *)(v99 + 58))
    {
      *(void *)(v99 + 32) = v98;
      v98 += *(void *)(v99 + 24);
      if (v98 > *(void *)(v87 + 112))
      {
        uint64_t v104 = "Section raw data overflowed this object file.";
LABEL_109:
        llvm::report_fatal_error((llvm *)v104, (const llvm::Twine *)1);
      }
    }
    v95 += 8;
  }
  while (v95 != 40);
  uint64_t v100 = *(void *)(v87 + 1200);
  for (uint64_t i = *(void *)(v87 + 1208); v100 != i; v100 += 72)
  {
    uint64_t v102 = 1 << *(unsigned char *)(**(void **)(v100 + 64) + 24);
    uint64_t v103 = (v98 + v102 - 1) & -(uint64_t)v102;
    *(void *)(v100 + 32) = v103;
    unint64_t v98 = (*(void *)(v100 + 24) + v103 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  *(void *)(v87 + 32) = v98;
}

uint64_t sub_1CCBF1944(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v12 = *(void *)(*a6 + 16);
  uint64_t v13 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 80))(*(void *)(a2 + 8), *(unsigned int *)(a5 + 12));
  unsigned int v14 = (*(uint64_t (**)(void, void *, uint64_t, void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), a6, a5, *(_DWORD *)(v13 + 16) & 1);
  uint64_t v15 = sub_1CCBF3C90(v12);
  uint64_t v16 = v15;
  uint64_t v42 = v15;
  if (*(unsigned char *)(v15 + 226) && *(unsigned char *)(v15 + 224) == 16)
  {
    uint64_t v20 = "toc-data not yet supported when writing object files.";
    goto LABEL_40;
  }
  uint64_t v43 = v12;
  uint64_t v44 = v12;
  uint64_t v45 = 0;
  uint64_t v39 = (uint64_t *)(a1 + 144);
  if (!sub_1CC48C528((uint64_t *)(a1 + 144), &v44, &v45)
    || v45 == *(void *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 160))
  {
    uint64_t v45 = *(void *)(v16 + 232);
    uint64_t v17 = sub_1CD6A1F98((uint64_t *)(a1 + 144), &v45);
  }
  else
  {
    uint64_t v17 = sub_1CD6A1F98((uint64_t *)(a1 + 144), &v43);
  }
  unsigned int v18 = *((_DWORD *)v17 + 2);
  if ((v14 & 0xDF) != 0)
  {
    if (v14 == 49)
    {
LABEL_11:
      uint64_t v19 = *(void *)(*sub_1CC959744(a1 + 120, &v42) + 16)
          - *(void *)(*(void *)(*(void *)(a1 + 416) + 8 * (*(void *)(a1 + 440) / 0x2AuLL))
                      + 96 * (*(void *)(a1 + 440) % 0x2AuLL)
                      + 16)
          + a6[2];
      if (v14 == 3 && (unint64_t)(v19 + 0x8000) >= 0x10000)
      {
        uint64_t v20 = "TOCEntryOffset overflows in small code model mode";
        goto LABEL_40;
      }
      goto LABEL_21;
    }
    if (v14 != 36)
    {
      if (v14 != 3) {
        goto LABEL_22;
      }
      goto LABEL_11;
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v44 = v16;
    if (*(unsigned char *)(v16 + 260))
    {
      uint64_t v45 = 0;
      sub_1CCBC6418(a3, (uint64_t *)v12, 1, &v45);
      uint64_t v21 = v45;
    }
    else
    {
      unint64_t AssociatedFragment = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
      if (!AssociatedFragment && (*(_DWORD *)(v12 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v12 + 8) |= 4u;
        unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v12 + 24));
        *(void *)uint64_t v12 = *(void *)v12 & 7 | AssociatedFragment;
      }
      unint64_t v38 = AssociatedFragment;
      uint64_t v21 = *(void *)(*sub_1CC959744(a1 + 120, &v44) + 16);
      if (v38)
      {
        uint64_t v45 = 0;
        sub_1CCBC6418(a3, (uint64_t *)v12, 1, &v45);
        v21 += v45;
      }
    }
    uint64_t v19 = a6[2] + v21;
  }
LABEL_21:
  *a7 = v19;
LABEL_22:
  llvm::MCAsmLayout::ensureValid(a3, (const llvm::MCFragment *)a4);
  uint64_t v23 = (*(_DWORD *)(a5 + 8) + *(_DWORD *)(a4 + 32));
  uint64_t v41 = *(void *)(a4 + 16);
  uint64_t v24 = a1 + 120;
  int v25 = sub_1CC959744(a1 + 120, &v41);
  uint64_t result = sub_1CB839378(*v25 + 64, v18 | ((unint64_t)v23 << 32), bswap32(v14) >> 16);
  uint64_t v27 = a6[1];
  if (!v27) {
    return result;
  }
  uint64_t v28 = *(void *)(v27 + 16);
  if (v12 == v28)
  {
    uint64_t v20 = "relocation for opposite term is not yet supported";
    goto LABEL_40;
  }
  uint64_t v29 = a3;
  uint64_t v30 = sub_1CCBF3C90(*(void *)(v27 + 16));
  if (v16 == v30)
  {
    uint64_t v20 = "relocation for paired relocatable term is not yet supported";
LABEL_40:
    llvm::report_fatal_error((llvm *)v20, (const llvm::Twine *)1);
  }
  uint64_t v31 = v30;
  uint64_t v43 = v28;
  uint64_t v44 = v28;
  uint64_t v32 = v23 << 32;
  uint64_t v45 = 0;
  if (!sub_1CC48C528(v39, &v44, &v45)
    || v45 == *(void *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 160))
  {
    uint64_t v45 = *(void *)(v31 + 232);
    uint64_t v33 = sub_1CD6A1F98(v39, &v45);
  }
  else
  {
    uint64_t v33 = sub_1CD6A1F98(v39, &v43);
  }
  uint64_t v34 = *((unsigned int *)v33 + 2);
  uint64_t v35 = sub_1CC959744(a1 + 120, &v41);
  sub_1CB839378(*v35 + 64, v32 | v34, BYTE1(v14) | 0x100);
  uint64_t v44 = v31;
  if (*(unsigned char *)(v31 + 260))
  {
    uint64_t v45 = 0;
    uint64_t result = sub_1CCBC6418(v29, (uint64_t *)v28, 1, &v45);
    uint64_t v36 = v45;
  }
  else
  {
    unint64_t v37 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v37 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v28 + 8) |= 4u;
      unint64_t v37 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
      *(void *)uint64_t v28 = *(void *)v28 & 7 | v37;
    }
    uint64_t result = (uint64_t)sub_1CC959744(v24, &v44);
    uint64_t v36 = *(void *)(*(void *)result + 16);
    if (v37)
    {
      uint64_t v45 = 0;
      uint64_t result = sub_1CCBC6418(v29, (uint64_t *)v28, 1, &v45);
      v36 += v45;
    }
  }
  *a7 -= v36;
  return result;
}

uint64_t sub_1CCBF1DE4(uint64_t a1, unint64_t a2, const llvm::MCAsmLayout *a3)
{
  if ((*(unsigned char *)(a2 + 500) & 4) != 0)
  {
    unint64_t v166 = "Incremental linking not supported for XCOFF.";
    goto LABEL_174;
  }
  unint64_t v4 = a2;
  uint64_t v6 = a1 + 1160;
  uint64_t v183 = a1 + 1200;
  uint64_t v175 = a1 + 1160;
  do
  {
    uint64_t v7 = *(void *)v6;
    if (*(__int16 *)(*(void *)v6 + 56) != -3)
    {
      uint64_t v8 = *(void *)(v7 + 72);
      if (*(void *)(v7 + 80) != v8)
      {
        unint64_t v9 = *(void *)(v7 + 96);
        uint64_t v10 = (uint64_t *)(v8 + 8 * (v9 >> 9));
        uint64_t v11 = *v10;
        uint64_t v12 = *v10 + 8 * (v9 & 0x1FF);
        uint64_t v13 = *(void *)(v8 + (((*(void *)(v7 + 104) + v9) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(void *)(v7 + 104) + v9) & 0x1FF);
        while (1)
        {
          if (v12 == v13) {
            goto LABEL_17;
          }
          unsigned int v14 = *(void **)v12;
          uint64_t v15 = *(void *)(*(void *)v12 + 40);
          if (v15)
          {
            uint64_t v16 = v14[1];
            if (v14[2] != v16) {
              break;
            }
          }
LABEL_15:
          v12 += 8;
          if (v12 - v11 == 4096)
          {
            uint64_t v25 = v10[1];
            ++v10;
            uint64_t v11 = v25;
            uint64_t v12 = v25;
          }
        }
        unint64_t v17 = v14[4];
        unsigned int v18 = (unint64_t *)(v16 + 8 * (v17 / 0x2A));
        unint64_t v19 = *v18;
        unint64_t v20 = *v18 + 96 * (v17 % 0x2A);
        unint64_t v21 = *(void *)(v16 + 8 * ((v17 + v15) / 0x2A)) + 96 * ((v17 + v15) % 0x2A);
        while (1)
        {
          if (v20 == v21) {
            goto LABEL_15;
          }
          uint64_t v22 = *(unsigned int *)(v20 + 72);
          if (v22 > 0xFFFE) {
            break;
          }
          unint64_t v23 = *(unsigned int *)(v7 + 48);
          if (0xFFFF - v22 <= v23) {
            break;
          }
          *(_DWORD *)(v7 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v23 + v22;
          v20 += 96;
          if (v20 - v19 == 4032)
          {
            unint64_t v24 = v18[1];
            ++v18;
            unint64_t v19 = v24;
            unint64_t v20 = v24;
          }
        }
        unint64_t v166 = "relocation entries overflowed; overflow section is not implemented yet";
LABEL_174:
        llvm::report_fatal_error((llvm *)v166, (const llvm::Twine *)1);
      }
    }
LABEL_17:
    v6 += 8;
  }
  while (v6 != v183);
  uint64_t v26 = *(void *)(a1 + 1200);
  uint64_t v27 = *(void *)(a1 + 1208);
  if (v26 != v27)
  {
    uint64_t v28 = *(void *)(a1 + 1200);
    do
    {
      *(_DWORD *)(v28 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(*(void *)(v28 + 64) + 72);
      v28 += 72;
    }
    while (v28 != v27);
  }
  unint64_t v29 = *(void *)(a1 + 32);
  uint64_t v30 = 1160;
  while (2)
  {
    uint64_t v31 = *(void *)(a1 + v30);
    if (*(__int16 *)(v31 + 56) != -3)
    {
      int v32 = *(_DWORD *)(v31 + 48);
      if (v32)
      {
        *(void *)(v31 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v29;
        v29 += (10 * v32);
        if (v29 > *(void *)(a1 + 112))
        {
LABEL_175:
          unint64_t v166 = "Relocation data overflowed this object file.";
          goto LABEL_174;
        }
      }
    }
    v30 += 8;
    if (v30 != 1200) {
      continue;
    }
    break;
  }
  while (v26 != v27)
  {
    int v33 = *(_DWORD *)(v26 + 48);
    if (v33)
    {
      *(void *)(v26 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v29;
      v29 += (10 * v33);
      if (v29 > *(void *)(a1 + 112)) {
        goto LABEL_175;
      }
    }
    v26 += 72;
  }
  if (*(_DWORD *)(a1 + 8)) {
    *(void *)(a1 + 16) = v29;
  }
  uint64_t v34 = *(void **)(a1 + 40);
  uint64_t v35 = (*(uint64_t (**)(void *))(*v34 + 80))(v34);
  uint64_t v168 = v34[4];
  uint64_t v169 = v35;
  uint64_t v167 = v34[2];
  if (*(unsigned char *)(*(void *)(a1 + 56) + 8)) {
    unsigned int v36 = 503;
  }
  else {
    unsigned int v36 = 479;
  }
  unint64_t v37 = *(llvm::raw_ostream **)(a1 + 40);
  __int16 v38 = __rev16(v36);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    LOWORD(v36) = v38;
  }
  *(_WORD *)uint64_t v184 = v36;
  llvm::raw_ostream::write(v37, v184, 2uLL);
  unsigned int v39 = *(unsigned __int16 *)(a1 + 24);
  unint64_t v40 = *(llvm::raw_ostream **)(a1 + 40);
  unsigned int v41 = bswap32(v39) >> 16;
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    LOWORD(v39) = v41;
  }
  *(_WORD *)uint64_t v184 = v39;
  llvm::raw_ostream::write(v40, v184, 2uLL);
  uint64_t v42 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)uint64_t v184 = 0;
  llvm::raw_ostream::write(v42, v184, 4uLL);
  sub_1CCBF3DA4(a1, *(void *)(a1 + 16));
  if (*(unsigned char *)(*(void *)(a1 + 56) + 8))
  {
    uint64_t v43 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)uint64_t v184 = 0;
    llvm::raw_ostream::write(v43, v184, 2uLL);
    uint64_t v44 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)uint64_t v184 = 0;
    llvm::raw_ostream::write(v44, v184, 2uLL);
    uint64_t v45 = *(llvm::raw_ostream **)(a1 + 40);
    *(_DWORD *)uint64_t v184 = 0;
    size_t v46 = 4;
  }
  else
  {
    unsigned int v47 = *(_DWORD *)(a1 + 8);
    int v48 = *(llvm::raw_ostream **)(a1 + 40);
    unsigned int v49 = bswap32(v47);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      unsigned int v47 = v49;
    }
    *(_DWORD *)uint64_t v184 = v47;
    llvm::raw_ostream::write(v48, v184, 4uLL);
    uint64_t v50 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)uint64_t v184 = 0;
    llvm::raw_ostream::write(v50, v184, 2uLL);
    uint64_t v45 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)uint64_t v184 = 0;
    size_t v46 = 2;
  }
  llvm::raw_ostream::write(v45, v184, v46);
  for (uint64_t i = 1160; i != 1200; i += 8)
    sub_1CCBF3E24((llvm::raw_ostream *)a1, *(void *)(a1 + i), 0);
  uint64_t v52 = *(void *)(a1 + 1200);
  uint64_t v53 = *(void *)(a1 + 1208);
  while (v52 != v53)
  {
    sub_1CCBF3E24((llvm::raw_ostream *)a1, v52, 1);
    v52 += 72;
  }
  LODWORD(v54) = *(unsigned __int8 *)(*(void *)(a1 + 56) + 8);
  if (!*(unsigned char *)(*(void *)(a1 + 56) + 8))
  {
    uint64_t v55 = v175;
    do
    {
      uint64_t v56 = *(void *)v55;
      if (*(__int16 *)(*(void *)v55 + 56) != -3)
      {
        uint64_t v54 = *(void *)(v56 + 16);
        if (*(unsigned char *)(v56 + 58))
        {
          LODWORD(v54) = *(_DWORD *)(v56 + 24) + v54;
        }
        else
        {
          uint64_t v57 = *(void *)(v56 + 72);
          if (*(void *)(v56 + 80) == v57)
          {
            uint64_t v74 = *(void *)(v56 + 16);
          }
          else
          {
            uint64_t v177 = *(void *)v55;
            unint64_t v58 = *(void *)(v56 + 96);
            uint64_t v59 = (uint64_t *)(v57 + 8 * (v58 >> 9));
            uint64_t v60 = *v59;
            uint64_t v61 = *v59 + 8 * (v58 & 0x1FF);
            uint64_t v180 = *(void *)(v57 + (((*(void *)(v56 + 104) + v58) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*(void *)(v56 + 104) + v58) & 0x1FF);
            if (v61 == v180)
            {
              LODWORD(v74) = *(void *)(v56 + 16);
              uint64_t v56 = *(void *)v55;
            }
            else
            {
              do
              {
                uint64_t v62 = *(void *)v61;
                uint64_t v63 = *(void *)(*(void *)v61 + 8);
                if (*(void *)(*(void *)v61 + 16) != v63)
                {
                  unint64_t v64 = *(void *)(v62 + 32);
                  unsigned int v65 = (void *)(v63 + 8 * (v64 / 0x2A));
                  unint64_t v66 = *v65 + 96 * (v64 % 0x2A);
                  unint64_t v67 = *(void *)(v63 + 8 * ((*(void *)(v62 + 40) + v64) / 0x2A))
                      + 96 * ((*(void *)(v62 + 40) + v64) % 0x2A);
                  if (v66 != v67)
                  {
                    do
                    {
                      int v68 = *(_DWORD *)(v66 + 16);
                      size_t v69 = (v68 - v54);
                      if (v68 != v54)
                      {
                        unint64_t v70 = *(llvm::raw_ostream **)(a1 + 40);
                        if (v69 >= 0x50)
                        {
                          do
                          {
                            int v172 = v69;
                            if (v69 >= 0x4F) {
                              size_t v69 = 79;
                            }
                            else {
                              size_t v69 = v69;
                            }
                            int v170 = v69;
                            unint64_t v70 = llvm::raw_ostream::write(v70, "", v69);
                            LODWORD(v69) = v172 - v170;
                          }
                          while (v172 != v170);
                        }
                        else
                        {
                          llvm::raw_ostream::write(v70, "", v69);
                        }
                      }
                      uint64_t v54 = *(void *)(v66 + 24);
                      if (v54)
                      {
                        llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)v4, *(llvm::raw_ostream **)(a1 + 40), *(const llvm::MCSection **)v66, a3);
                        uint64_t v54 = *(void *)(v66 + 24);
                      }
                      int v71 = *(_DWORD *)(v66 + 16);
                      v66 += 96;
                      if (v66 - *v65 == 4032)
                      {
                        unint64_t v72 = v65[1];
                        ++v65;
                        unint64_t v66 = v72;
                      }
                      LODWORD(v54) = v71 + v54;
                    }
                    while (v66 != v67);
                    uint64_t v60 = *v59;
                  }
                }
                v61 += 8;
                if (v61 - v60 == 4096)
                {
                  uint64_t v73 = v59[1];
                  ++v59;
                  uint64_t v60 = v73;
                  uint64_t v61 = v73;
                }
              }
              while (v61 != v180);
              uint64_t v56 = v177;
              uint64_t v74 = *(void *)(v177 + 16);
            }
          }
          int v75 = *(_DWORD *)(v56 + 24) + v74;
          size_t v76 = (v75 - v54);
          if (v75 != v54)
          {
            unint64_t v77 = *(llvm::raw_ostream **)(a1 + 40);
            if (v76 >= 0x50)
            {
              do
              {
                int v78 = v76;
                if (v76 >= 0x4F) {
                  size_t v79 = 79;
                }
                else {
                  size_t v79 = v76;
                }
                unint64_t v77 = llvm::raw_ostream::write(v77, "", v79);
                LODWORD(v76) = v78 - v79;
              }
              while (v78 != v79);
            }
            else
            {
              llvm::raw_ostream::write(v77, "", v76);
            }
            LODWORD(v54) = v75;
          }
        }
      }
      v55 += 8;
    }
    while (v55 != v183);
    uint64_t v80 = *(void *)(a1 + 1200);
    for (uint64_t j = *(void *)(a1 + 1208); v80 != j; v80 += 72)
    {
      int v82 = *(_DWORD *)(v80 + 16);
      size_t v83 = (v82 - v54);
      if (v82 != v54)
      {
        uint64_t v84 = *(llvm::raw_ostream **)(a1 + 40);
        if (v83 >= 0x50)
        {
          do
          {
            if (v83 >= 0x4F) {
              size_t v88 = 79;
            }
            else {
              size_t v88 = v83;
            }
            int v89 = v83;
            uint64_t v84 = llvm::raw_ostream::write(v84, "", v88);
            LODWORD(v83) = v89 - v88;
          }
          while (v89 != v88);
        }
        else
        {
          llvm::raw_ostream::write(v84, "", v83);
        }
      }
      uint64_t v85 = *(void *)(v80 + 24);
      if (v85)
      {
        llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)v4, *(llvm::raw_ostream **)(a1 + 40), **(const llvm::MCSection ***)(v80 + 64), a3);
        uint64_t v85 = *(void *)(v80 + 24);
      }
      int v86 = *(_DWORD *)(v80 + 16) + v85;
      if ((v86 & 3) != 0) {
        int v87 = 4 - (v86 & 3);
      }
      else {
        int v87 = 0;
      }
      if ((v86 & 3) != 0) {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "", 4 - (v86 & 3u));
      }
      LODWORD(v54) = v87 + v86;
    }
    uint64_t v90 = v175;
    do
    {
      unint64_t v91 = *(void **)v90;
      uint64_t v173 = v90;
      if (*(__int16 *)(*(void *)v90 + 56) != -3)
      {
        uint64_t v92 = v91[9];
        if (v91[10] != v92)
        {
          unint64_t v93 = v91[12];
          uint64_t v94 = v91[13];
          uint64_t v95 = (uint64_t *)(v92 + 8 * (v93 >> 9));
          uint64_t v96 = *v95;
          uint64_t v97 = *v95 + 8 * (v93 & 0x1FF);
          uint64_t v98 = *(void *)(v92 + (((v94 + v93) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v94 + v93) & 0x1FF);
          if (v97 != v98)
          {
            uint64_t v178 = *(void *)(v92 + (((v94 + v93) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v94 + v93) & 0x1FF);
            do
            {
              uint64_t v99 = *(void **)v97;
              uint64_t v100 = *(void *)(*(void *)v97 + 40);
              if (v100)
              {
                uint64_t v101 = v99[1];
                if (v99[2] != v101)
                {
                  long long v181 = v95;
                  unint64_t v102 = v99[4];
                  uint64_t v103 = (unint64_t *)(v101 + 8 * (v102 / 0x2A));
                  unint64_t v104 = *v103;
                  unint64_t v105 = *v103 + 96 * (v102 % 0x2A);
                  unint64_t v106 = *(void *)(v101 + 8 * ((v102 + v100) / 0x2A)) + 96 * ((v102 + v100) % 0x2A);
                  if (v105 != v106)
                  {
                    do
                    {
                      unsigned int v107 = *(_DWORD *)(v105 + 72);
                      if (v107)
                      {
                        uint64_t v108 = *(void *)(v105 + 64);
                        uint64_t v109 = v108 + 12 * v107;
                        do
                        {
                          unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v108 + 8);
                          sub_1CCBF3FDC(a1, *(void *)v108, v4, *(unsigned char *)(*(void *)v105 + 226), *(void *)(v105 + 16));
                          v108 += 12;
                        }
                        while (v108 != v109);
                        unint64_t v104 = *v103;
                      }
                      v105 += 96;
                      if (v105 - v104 == 4032)
                      {
                        unint64_t v110 = v103[1];
                        ++v103;
                        unint64_t v104 = v110;
                        unint64_t v105 = v110;
                      }
                    }
                    while (v105 != v106);
                    uint64_t v95 = v181;
                    uint64_t v96 = *v181;
                  }
                  uint64_t v98 = v178;
                }
              }
              v97 += 8;
              if (v97 - v96 == 4096)
              {
                uint64_t v111 = v95[1];
                ++v95;
                uint64_t v96 = v111;
                uint64_t v97 = v111;
              }
            }
            while (v97 != v98);
          }
        }
      }
      uint64_t v90 = v173 + 8;
    }
    while (v173 + 8 != v183);
    uint64_t v112 = *(void *)(a1 + 1200);
    for (uint64_t k = *(void *)(a1 + 1208); v112 != k; v112 += 72)
    {
      uint64_t v114 = *(void *)(v112 + 64);
      unsigned int v115 = *(_DWORD *)(v114 + 72);
      if (v115)
      {
        uint64_t v116 = *(void *)(v114 + 64);
        uint64_t v117 = v116 + 12 * v115;
        do
        {
          unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v116 + 8);
          sub_1CCBF3FDC(a1, *(void *)v116, v4, *(unsigned char *)(**(void **)(v112 + 64) + 226), *(void *)(*(void *)(v112 + 64) + 16));
          v116 += 12;
        }
        while (v116 != v117);
      }
    }
    sub_1CCBF40C4(a1, ".file", 5uLL, 0, 0xFFFFFFFE, 103, 0);
    uint64_t v118 = *(void *)(a1 + 176);
    if (*(void *)(a1 + 184) != v118)
    {
      unint64_t v119 = *(void *)(a1 + 200);
      char v120 = (void *)(v118 + 8 * (v119 / 0x2A));
      uint64_t v121 = (unsigned int *)(*v120 + 96 * (v119 % 0x2A));
      unint64_t v122 = *(void *)(v118 + 8 * ((*(void *)(a1 + 208) + v119) / 0x2A))
           + 96 * ((*(void *)(a1 + 208) + v119) % 0x2A);
      if (v121 != (unsigned int *)v122)
      {
        unsigned int v123 = (unsigned int *)(*v120 + 96 * (v119 % 0x2A));
        do
        {
          uint64_t v124 = *(void *)v123;
          v123 += 24;
          sub_1CCBF4284(a1, v121, 0, *(unsigned char *)(*(void *)(v124 + 232) + 32));
          if ((unsigned int *)((char *)v123 - *v120) == (unsigned int *)4032)
          {
            uint64_t v125 = (unsigned int *)v120[1];
            ++v120;
            unsigned int v123 = v125;
          }
          uint64_t v121 = v123;
        }
        while (v123 != (unsigned int *)v122);
      }
    }
    uint64_t v126 = v175;
    do
    {
      uint64_t v176 = v126;
      uint64_t v127 = *(void *)v126;
      if (*(__int16 *)(*(void *)v126 + 56) != -3)
      {
        uint64_t v128 = *(void *)(v127 + 72);
        if (*(void *)(v127 + 80) != v128)
        {
          unint64_t v129 = *(void *)(v127 + 96);
          unsigned int v130 = (uint64_t *)(v128 + 8 * (v129 >> 9));
          uint64_t v131 = *v130;
          uint64_t v132 = *v130 + 8 * (v129 & 0x1FF);
          uint64_t v133 = *(void *)(v128 + (((*(void *)(v127 + 104) + v129) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((*(void *)(v127 + 104) + v129) & 0x1FF);
          if (v132 != v133)
          {
            uint64_t v171 = *(void *)(v128 + (((*(void *)(v127 + 104) + v129) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*(void *)(v127 + 104) + v129) & 0x1FF);
            uint64_t v174 = v127;
            do
            {
              unint64_t v134 = *(void **)v132;
              uint64_t v135 = *(void *)(*(void *)v132 + 40);
              if (v135)
              {
                uint64_t v136 = v134[1];
                if (v134[2] != v136)
                {
                  unint64_t v137 = v134[4];
                  unsigned int v138 = (void *)(v136 + 8 * (v137 / 0x2A));
                  unint64_t v139 = *v138 + 96 * (v137 % 0x2A);
                  unint64_t v140 = *(void *)(v136 + 8 * ((v137 + v135) / 0x2A)) + 96 * ((v137 + v135) % 0x2A);
                  if (v139 != v140)
                  {
                    uint64_t v179 = v132;
                    unsigned int v182 = v130;
                    __int16 v141 = *(_WORD *)(v127 + 56);
                    do
                    {
                      sub_1CCBF4284(a1, (unsigned int *)v139, v141, *(unsigned char *)(*(void *)(*(void *)v139 + 232) + 32));
                      uint64_t v142 = *(unsigned int *)(v139 + 40);
                      if (v142)
                      {
                        unsigned int v143 = *(uint64_t ***)(v139 + 32);
                        uint64_t v144 = 16 * v142;
                        do
                        {
                          unsigned int v145 = *v143;
                          *(void *)uint64_t v184 = 0;
                          sub_1CCBC6418(a3, v145, 1, v184);
                          int v146 = *(_DWORD *)v184;
                          uint64_t v147 = *v143;
                          unint64_t v148 = (*v143)[8];
                          if (v148)
                          {
                            unsigned int v149 = (char *)v147[7];
                          }
                          else
                          {
                            if ((*(unsigned char *)v147 & 4) != 0)
                            {
                              unsigned int v152 = (uint64_t *)*(v147 - 1);
                              uint64_t v153 = *v152;
                              uint64_t v150 = (uint64_t)(v152 + 2);
                              uint64_t v151 = v153;
                            }
                            else
                            {
                              uint64_t v150 = 0;
                              uint64_t v151 = 0;
                            }
                            unsigned int v149 = (char *)sub_1CD586E78(v150, v151);
                            unint64_t v148 = v154;
                            uint64_t v147 = *v143;
                          }
                          sub_1CCBF40C4(a1, v149, v148, *(_DWORD *)(v139 + 16) + v146, v141, *((unsigned char *)v147 + 32), 1);
                          sub_1CCBF430C(a1, *(_DWORD *)(v139 + 8), 2, *(unsigned char *)(*(void *)v139 + 224));
                          v143 += 2;
                          v144 -= 16;
                        }
                        while (v144);
                      }
                      v139 += 96;
                      if (v139 - *v138 == 4032)
                      {
                        unint64_t v155 = v138[1];
                        ++v138;
                        unint64_t v139 = v155;
                      }
                    }
                    while (v139 != v140);
                    uint64_t v132 = v179;
                    unsigned int v130 = v182;
                    uint64_t v131 = *v182;
                    uint64_t v133 = v171;
                    uint64_t v127 = v174;
                  }
                }
              }
              v132 += 8;
              if (v132 - v131 == 4096)
              {
                uint64_t v156 = v130[1];
                ++v130;
                uint64_t v131 = v156;
                uint64_t v132 = v156;
              }
            }
            while (v132 != v133);
          }
        }
      }
      uint64_t v126 = v176 + 8;
    }
    while (v176 + 8 != v183);
    uint64_t v157 = *(void *)(a1 + 1200);
    for (uint64_t m = *(void *)(a1 + 1208); v157 != m; v157 += 72)
    {
      unint64_t v159 = *(_DWORD **)(v157 + 64);
      sub_1CCBF40C4(a1, *(char **)(*(void *)v159 + 240), *(void *)(*(void *)v159 + 248), 0, *(__int16 *)(v157 + 56), 112, 1);
      unsigned int v160 = v159[6];
      unsigned int v161 = *(llvm::raw_ostream **)(a1 + 40);
      unsigned int v162 = bswap32(v160);
      if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
        unsigned int v160 = v162;
      }
      *(_DWORD *)uint64_t v184 = v160;
      llvm::raw_ostream::write(v161, v184, 4uLL);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "", 4uLL);
      long long v163 = *(llvm::raw_ostream **)(a1 + 40);
      *(_DWORD *)uint64_t v184 = 0;
      llvm::raw_ostream::write(v163, v184, 4uLL);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "", 6uLL);
    }
    llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 64), *(llvm::raw_ostream **)(a1 + 40));
  }
  unint64_t v164 = *(void **)(a1 + 40);
  return v167 - (v169 + v168) + v164[4] + (*(uint64_t (**)(void *))(*v164 + 80))(v164) - v164[2];
}

void sub_1CCBF2AEC(uint64_t a1, unint64_t a2)
{
  int v3 = *(char **)(a1 + 8);
  unint64_t v4 = *(char **)(a1 + 16);
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  unint64_t v7 = v6 >> 9;
  BOOL v8 = (v6 & 0x1FF) != 0;
  if ((v6 & 0x1FF) != 0) {
    unint64_t v9 = v7 + 1;
  }
  else {
    unint64_t v9 = v6 >> 9;
  }
  unint64_t v10 = *(void *)(a1 + 32);
  if (v9 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v9 <= v10 >> 9)
  {
    for (*(void *)(a1 + 32) = v10 - (v11 << 9); v11; --v11)
    {
      unsigned int v18 = *(void **)(a1 + 8);
      uint64_t v21 = *v18;
      unint64_t v19 = (char *)(v18 + 1);
      uint64_t v20 = v21;
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v19;
      if (v4 == *(char **)(a1 + 24))
      {
        uint64_t v22 = *(char **)a1;
        if ((unint64_t)v19 <= *(void *)a1)
        {
          if (v4 == v22) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (v4 - v22) >> 2;
          }
          if (v28 >> 61) {
            goto LABEL_154;
          }
          unint64_t v29 = (char *)operator new(8 * v28);
          uint64_t v30 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = v4 - v19;
          BOOL v31 = v4 == v19;
          unint64_t v4 = v30;
          if (!v31)
          {
            unint64_t v4 = &v30[v32 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v33 = 8 * (v32 >> 3);
            uint64_t v34 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v35 = *(void *)v19;
              v19 += 8;
              *(void *)uint64_t v34 = v35;
              v34 += 8;
              v33 -= 8;
            }
            while (v33);
          }
          *(void *)a1 = v29;
          *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v30;
          *(void *)(a1 + 16) = v4;
          *(void *)(a1 + 24) = &v29[8 * v28];
          if (v22)
          {
            operator delete(v22);
            unint64_t v4 = *(char **)(a1 + 16);
          }
        }
        else
        {
          uint64_t v23 = (uint64_t)&v19[-*(void *)a1] >> 3;
          if (v23 >= -1) {
            uint64_t v24 = v23 + 1;
          }
          else {
            uint64_t v24 = v23 + 2;
          }
          uint64_t v25 = &v19[-8 * (v24 >> 1)];
          int64_t v26 = v4 - v19;
          if (v4 != v19)
          {
            memmove(&v19[-8 * (v24 >> 1)], v19, v4 - v19);
            unint64_t v4 = *(char **)(a1 + 8);
          }
          uint64_t v27 = &v4[-8 * (v24 >> 1)];
          unint64_t v4 = &v25[v26];
          *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v27;
          *(void *)(a1 + 16) = &v25[v26];
        }
      }
      *(void *)unint64_t v4 = v20;
      unint64_t v4 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v4;
    }
  }
  else
  {
    unint64_t v12 = v9 - v11;
    uint64_t v13 = *(void *)(a1 + 24) - *(void *)a1;
    if (v12 <= (v13 >> 3) - (v5 >> 3))
    {
      if (v12)
      {
        uint64_t v36 = -(uint64_t)v7;
        unint64_t v37 = v8 - v11;
        while (*(char **)(a1 + 24) != v4)
        {
          *(void *)unint64_t v4 = operator new(0x1000uLL);
          unint64_t v4 = (char *)(*(void *)(a1 + 16) + 8);
          *(void *)(a1 + 16) = v4;
          if (v37 == ++v36) {
            goto LABEL_134;
          }
        }
        unint64_t v82 = v37 - v36;
        if (v82)
        {
          unint64_t v11 = v8 - v36;
          do
          {
            size_t v83 = operator new(0x1000uLL);
            uint64_t v84 = *(char **)(a1 + 8);
            if (v84 == *(char **)a1)
            {
              unint64_t v86 = *(void *)(a1 + 24);
              if ((unint64_t)v4 >= v86)
              {
                uint64_t v91 = v86 - (void)v84;
                BOOL v31 = v91 == 0;
                uint64_t v92 = v91 >> 2;
                if (v31) {
                  unint64_t v93 = 1;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93 >> 61) {
                  goto LABEL_154;
                }
                uint64_t v94 = (char *)operator new(8 * v93);
                uint64_t v85 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v95 = v85;
                uint64_t v96 = v4 - v84;
                if (v4 != v84)
                {
                  uint64_t v95 = &v85[v96 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v97 = 8 * (v96 >> 3);
                  uint64_t v98 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v99 = v84;
                  do
                  {
                    uint64_t v100 = *(void *)v99;
                    v99 += 8;
                    *(void *)uint64_t v98 = v100;
                    v98 += 8;
                    v97 -= 8;
                  }
                  while (v97);
                }
                *(void *)a1 = v94;
                *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v85;
                *(void *)(a1 + 16) = v95;
                *(void *)(a1 + 24) = &v94[8 * v93];
                if (v84)
                {
                  operator delete(v84);
                  uint64_t v85 = *(char **)(a1 + 8);
                }
              }
              else
              {
                uint64_t v87 = (uint64_t)(v86 - (void)v4) >> 3;
                if (v87 >= -1) {
                  uint64_t v88 = v87 + 1;
                }
                else {
                  uint64_t v88 = v87 + 2;
                }
                uint64_t v89 = v88 >> 1;
                uint64_t v90 = &v4[8 * (v88 >> 1)];
                uint64_t v85 = &v90[-(v4 - v84)];
                if (v4 != v84)
                {
                  memmove(&v90[-(v4 - v84)], *(const void **)(a1 + 8), v4 - v84);
                  unint64_t v4 = *(char **)(a1 + 16);
                }
                *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v85;
                *(void *)(a1 + 16) = &v4[8 * v89];
              }
            }
            else
            {
              uint64_t v85 = *(char **)(a1 + 8);
            }
            *((void *)v85 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v83;
            unint64_t v4 = *(char **)(a1 + 16);
            uint64_t v101 = *(void *)(a1 + 8) - 8;
            *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v101;
            if (&v4[-v101] == (char *)8) {
              uint64_t v102 = 511;
            }
            else {
              uint64_t v102 = 512;
            }
            unint64_t v10 = v102 + *(void *)(a1 + 32);
            *(void *)(a1 + 32) = v10;
            --v82;
          }
          while (v82);
        }
      }
LABEL_134:
      for (*(void *)(a1 + 32) = v10 - (v11 << 9); v11; --v11)
      {
        uint64_t v103 = *(void **)(a1 + 8);
        uint64_t v106 = *v103;
        unint64_t v104 = (char *)(v103 + 1);
        uint64_t v105 = v106;
        *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v104;
        if (v4 == *(char **)(a1 + 24))
        {
          unsigned int v107 = *(char **)a1;
          if ((unint64_t)v104 <= *(void *)a1)
          {
            if (v4 == v107) {
              unint64_t v113 = 1;
            }
            else {
              unint64_t v113 = (v4 - v107) >> 2;
            }
            if (v113 >> 61) {
              goto LABEL_154;
            }
            uint64_t v114 = (char *)operator new(8 * v113);
            unsigned int v115 = &v114[8 * (v113 >> 2)];
            uint64_t v116 = v4 - v104;
            BOOL v31 = v4 == v104;
            unint64_t v4 = v115;
            if (!v31)
            {
              unint64_t v4 = &v115[v116 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v117 = 8 * (v116 >> 3);
              uint64_t v118 = &v114[8 * (v113 >> 2)];
              do
              {
                uint64_t v119 = *(void *)v104;
                v104 += 8;
                *(void *)uint64_t v118 = v119;
                v118 += 8;
                v117 -= 8;
              }
              while (v117);
            }
            *(void *)a1 = v114;
            *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v115;
            *(void *)(a1 + 16) = v4;
            *(void *)(a1 + 24) = &v114[8 * v113];
            if (v107)
            {
              operator delete(v107);
              unint64_t v4 = *(char **)(a1 + 16);
            }
          }
          else
          {
            uint64_t v108 = (uint64_t)&v104[-*(void *)a1] >> 3;
            if (v108 >= -1) {
              uint64_t v109 = v108 + 1;
            }
            else {
              uint64_t v109 = v108 + 2;
            }
            unint64_t v110 = &v104[-8 * (v109 >> 1)];
            int64_t v111 = v4 - v104;
            if (v4 != v104)
            {
              memmove(&v104[-8 * (v109 >> 1)], v104, v4 - v104);
              unint64_t v4 = *(char **)(a1 + 8);
            }
            uint64_t v112 = &v4[-8 * (v109 >> 1)];
            unint64_t v4 = &v110[v111];
            *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v112;
            *(void *)(a1 + 16) = &v110[v111];
          }
        }
        *(void *)unint64_t v4 = v105;
        unint64_t v4 = (char *)(*(void *)(a1 + 16) + 8);
        *(void *)(a1 + 16) = v4;
      }
    }
    else
    {
      uint64_t v14 = v5 >> 3;
      unint64_t v15 = v12 + (v5 >> 3);
      if (v13 >> 2 <= v15) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = v13 >> 2;
      }
      if (v16)
      {
        if (v16 >> 61) {
LABEL_154:
        }
          sub_1CB833614();
        unint64_t v17 = (char *)operator new(8 * v16);
      }
      else
      {
        unint64_t v17 = 0;
      }
      unint64_t v120 = v11 << 9;
      __int16 v38 = &v17[8 * (v14 - v11)];
      unsigned int v39 = &v17[8 * v16];
      unint64_t v40 = v38;
      do
      {
        unsigned int v41 = operator new(0x1000uLL);
        if (v40 == v39)
        {
          if (v38 <= v17)
          {
            long long __p = v17;
            if (v39 == v17) {
              unint64_t v46 = 1;
            }
            else {
              unint64_t v46 = (v39 - v17) >> 2;
            }
            if (v46 >> 61) {
              goto LABEL_154;
            }
            unsigned int v47 = (char *)operator new(8 * v46);
            int v48 = v47;
            unsigned int v49 = &v47[8 * (v46 >> 2)];
            unint64_t v40 = v49;
            uint64_t v50 = v39 - v38;
            if (v39 != v38)
            {
              unint64_t v40 = &v49[v50 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v51 = 8 * (v50 >> 3);
              uint64_t v52 = &v47[8 * (v46 >> 2)];
              do
              {
                uint64_t v53 = *(void *)v38;
                v38 += 8;
                *(void *)uint64_t v52 = v53;
                v52 += 8;
                v51 -= 8;
              }
              while (v51);
            }
            unsigned int v39 = &v47[8 * v46];
            if (__p) {
              operator delete(__p);
            }
            __int16 v38 = v49;
            unint64_t v17 = v48;
          }
          else
          {
            uint64_t v42 = (v38 - v17) >> 3;
            if (v42 >= -1) {
              unint64_t v43 = v42 + 1;
            }
            else {
              unint64_t v43 = v42 + 2;
            }
            unint64_t v44 = v43 >> 1;
            uint64_t v45 = &v38[-8 * v44];
            if (v39 != v38) {
              memmove(&v38[-8 * v44], v38, v39 - v38);
            }
            unint64_t v40 = &v45[v39 - v38];
            __int16 v38 = v45;
          }
        }
        *(void *)unint64_t v40 = v41;
        v40 += 8;
        --v12;
      }
      while (v12);
      uint64_t v54 = *(void **)(a1 + 8);
      if (v11)
      {
        while (1)
        {
          if (v40 == v39)
          {
            if (v38 <= v17)
            {
              uint64_t v59 = v17;
              if (v39 == v17) {
                unint64_t v60 = 1;
              }
              else {
                unint64_t v60 = (v39 - v17) >> 2;
              }
              if (v60 >> 61) {
                goto LABEL_154;
              }
              uint64_t v61 = (char *)operator new(8 * v60);
              uint64_t v62 = v61;
              uint64_t v55 = &v61[8 * (v60 >> 2)];
              unint64_t v40 = v55;
              uint64_t v63 = v39 - v38;
              if (v39 != v38)
              {
                unint64_t v40 = &v55[v63 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v64 = 8 * (v63 >> 3);
                unsigned int v65 = &v61[8 * (v60 >> 2)];
                do
                {
                  uint64_t v66 = *(void *)v38;
                  v38 += 8;
                  *(void *)unsigned int v65 = v66;
                  v65 += 8;
                  v64 -= 8;
                }
                while (v64);
              }
              unsigned int v39 = &v61[8 * v60];
              if (v59) {
                operator delete(v59);
              }
              unint64_t v17 = v62;
            }
            else
            {
              uint64_t v56 = (v38 - v17) >> 3;
              if (v56 >= -1) {
                unint64_t v57 = v56 + 1;
              }
              else {
                unint64_t v57 = v56 + 2;
              }
              unint64_t v58 = v57 >> 1;
              uint64_t v55 = &v38[-8 * v58];
              if (v39 != v38) {
                memmove(&v38[-8 * v58], v38, v39 - v38);
              }
              unint64_t v40 = &v55[v39 - v38];
            }
          }
          else
          {
            uint64_t v55 = v38;
          }
          *(void *)unint64_t v40 = *v54;
          v40 += 8;
          uint64_t v54 = (void *)(*(void *)(a1 + 8) + 8);
          *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v54;
          __int16 v38 = v55;
          if (!--v11) {
            goto LABEL_87;
          }
        }
      }
      uint64_t v55 = v38;
LABEL_87:
      unint64_t v67 = *(void **)(a1 + 16);
      if (v67 != v54)
      {
        do
        {
          if (v55 == v17)
          {
            if (v40 >= v39)
            {
              if (v39 == v17) {
                unint64_t v72 = 1;
              }
              else {
                unint64_t v72 = (v39 - v17) >> 2;
              }
              if (v72 >> 61) {
                goto LABEL_154;
              }
              uint64_t v73 = (char *)operator new(8 * v72);
              uint64_t v74 = v73;
              uint64_t v55 = &v73[(2 * v72 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v75 = v40 - v17;
              BOOL v31 = v40 == v17;
              unint64_t v40 = v55;
              if (!v31)
              {
                unint64_t v40 = &v55[v75 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v76 = 8 * (v75 >> 3);
                unint64_t v77 = &v73[(2 * v72 + 6) & 0xFFFFFFFFFFFFFFF8];
                int v78 = v17;
                do
                {
                  uint64_t v79 = *(void *)v78;
                  v78 += 8;
                  *(void *)unint64_t v77 = v79;
                  v77 += 8;
                  v76 -= 8;
                }
                while (v76);
              }
              unsigned int v39 = &v73[8 * v72];
              if (v17) {
                operator delete(v17);
              }
              unint64_t v17 = v74;
            }
            else
            {
              uint64_t v68 = (v39 - v40) >> 3;
              if (v68 >= -1) {
                unint64_t v69 = v68 + 1;
              }
              else {
                unint64_t v69 = v68 + 2;
              }
              unint64_t v70 = &v40[8 * (v69 >> 1)];
              uint64_t v55 = &v70[-(v40 - v17)];
              size_t v71 = v40 - v17;
              BOOL v31 = v40 == v17;
              unint64_t v40 = v70;
              if (!v31) {
                memmove(v55, v17, v71);
              }
            }
          }
          uint64_t v80 = *--v67;
          *((void *)v55 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v80;
          v55 -= 8;
        }
        while (v67 != *(void **)(a1 + 8));
      }
      uint64_t v81 = *(char **)a1;
      *(void *)a1 = v17;
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v55;
      *(void *)(a1 + 16) = v40;
      *(void *)(a1 + 24) = v39;
      *(void *)(a1 + 32) -= v120;
      if (v81)
      {
        operator delete(v81);
      }
    }
  }
}

void sub_1CCBF324C(uint64_t a1)
{
  *(_DWORD *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 56) = -3;
  uint64_t v1 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) != v1)
  {
    unint64_t v2 = *(void *)(a1 + 96);
    int v3 = (void *)(v1 + 8 * (v2 >> 9));
    uint64_t v4 = *v3 + 8 * (v2 & 0x1FF);
    uint64_t v5 = *(void *)(v1 + (((*(void *)(a1 + 104) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 104) + v2) & 0x1FF);
    if (v4 != v5)
    {
      while (1)
      {
        unint64_t v6 = *(void **)v4;
        unint64_t v7 = *(void ***)(*(void *)v4 + 8);
        BOOL v8 = *(void ***)(*(void *)v4 + 16);
        if (v8 == v7)
        {
          unint64_t v9 = v6 + 5;
          BOOL v8 = *(void ***)(*(void *)v4 + 8);
        }
        else
        {
          unint64_t v9 = v6 + 5;
          unint64_t v10 = v6[4];
          unint64_t v11 = &v7[v10 / 0x2A];
          unint64_t v12 = (unint64_t)*v11 + 96 * (v10 % 0x2A);
          unint64_t v13 = (unint64_t)v7[(v6[5] + v10) / 0x2A] + 96 * ((v6[5] + v10) % 0x2A);
          if (v12 != v13)
          {
            do
            {
              uint64_t v14 = *(void **)(v12 + 64);
              if (v14 != (void *)(v12 + 80)) {
                free(v14);
              }
              unint64_t v15 = *(void **)(v12 + 32);
              if (v15 != (void *)(v12 + 48)) {
                free(v15);
              }
              v12 += 96;
              if (v12 - (void)*v11 == 4032)
              {
                unint64_t v16 = (unint64_t)v11[1];
                ++v11;
                unint64_t v12 = v16;
              }
            }
            while (v12 != v13);
            unint64_t v7 = (void **)v6[1];
            BOOL v8 = (void **)v6[2];
          }
        }
        *unint64_t v9 = 0;
        unint64_t v17 = (char *)v8 - (char *)v7;
        if (v17 >= 0x11)
        {
          do
          {
            operator delete(*v7);
            uint64_t v18 = v6[2];
            unint64_t v7 = (void **)(v6[1] + 8);
            v6[1] = v7;
            unint64_t v17 = v18 - (void)v7;
          }
          while (v17 > 0x10);
        }
        if (v17 >> 3 == 1) {
          break;
        }
        if (v17 >> 3 == 2)
        {
          uint64_t v19 = 42;
LABEL_20:
          void v6[4] = v19;
        }
        v4 += 8;
        if (v4 - *v3 == 4096)
        {
          uint64_t v20 = v3[1];
          ++v3;
          uint64_t v4 = v20;
        }
        if (v4 == v5) {
          return;
        }
      }
      uint64_t v19 = 21;
      goto LABEL_20;
    }
  }
}

void *sub_1CCBF3420(void *a1)
{
  *a1 = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 8));
  return a1;
}

void sub_1CCBF3464(void *a1)
{
  *a1 = &unk_1F2631B78;
  sub_1CCBF0560((uint64_t)(a1 + 8));

  JUMPOUT(0x1D25D9CE0);
}

double sub_1CCBF34C8(uint64_t a1)
{
  *(_DWORD *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 56) = -3;
  return result;
}

void sub_1CCBF34E4()
{
}

uint64_t sub_1CCBF34F8(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    int v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 / 0x2A];
    unint64_t v7 = (unint64_t)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        unint64_t v9 = *(void **)(v7 + 64);
        if (v9 != (void *)(v7 + 80)) {
          free(v9);
        }
        unint64_t v10 = *(void **)(v7 + 32);
        if (v10 != (void *)(v7 + 48)) {
          free(v10);
        }
        v7 += 96;
        if (v7 - (void)*v6 == 4032)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
        }
      }
      while (v7 != v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      int v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 21;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 42;
LABEL_18:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_1CCBF3694(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  unint64_t v5 = *(char **)(a1 + 16);
  uint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = v5 - v4;
  if (v5 == v4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 42 * v6 - 1;
  }
  unint64_t v9 = *(void *)(a1 + 32);
  if (v8 == *(void *)(a1 + 40) + v9)
  {
    BOOL v10 = v9 >= 0x2A;
    unint64_t v11 = v9 - 42;
    if (v10)
    {
      *(void *)(a1 + 32) = v11;
      uint64_t v14 = *(void *)v4;
      unint64_t v12 = v4 + 8;
      uint64_t v13 = v14;
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v12;
      if (v5 == *(char **)(a1 + 24))
      {
        unint64_t v15 = *(char **)a1;
        if ((unint64_t)v12 <= *(void *)a1)
        {
          if (v5 == v15) {
            unint64_t v34 = 1;
          }
          else {
            unint64_t v34 = (v5 - v15) >> 2;
          }
          if (v34 >> 61) {
            goto LABEL_96;
          }
          uint64_t v35 = (char *)operator new(8 * v34);
          uint64_t v36 = &v35[8 * (v34 >> 2)];
          uint64_t v38 = v5 - v12;
          BOOL v37 = v5 == v12;
          unint64_t v5 = v36;
          if (!v37)
          {
            unint64_t v5 = &v36[v38 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v39 = 8 * (v38 >> 3);
            unint64_t v40 = &v35[8 * (v34 >> 2)];
            do
            {
              uint64_t v41 = *(void *)v12;
              v12 += 8;
              *(void *)unint64_t v40 = v41;
              v40 += 8;
              v39 -= 8;
            }
            while (v39);
          }
          *(void *)a1 = v35;
          *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v36;
          *(void *)(a1 + 16) = v5;
          *(void *)(a1 + 24) = &v35[8 * v34];
          if (v15)
          {
            operator delete(v15);
            unint64_t v5 = *(char **)(a1 + 16);
          }
        }
        else
        {
          uint64_t v16 = (uint64_t)&v12[-*(void *)a1] >> 3;
          if (v16 >= -1) {
            uint64_t v17 = v16 + 1;
          }
          else {
            uint64_t v17 = v16 + 2;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v12[-8 * v19];
          int64_t v21 = v5 - v12;
          if (v5 != v12)
          {
            memmove(&v12[-8 * v19], v12, v5 - v12);
            unint64_t v5 = *(char **)(a1 + 8);
          }
          uint64_t v22 = &v5[8 * v18];
          unint64_t v5 = &v20[v21];
          *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v22;
          *(void *)(a1 + 16) = &v20[v21];
        }
      }
      *(void *)unint64_t v5 = v13;
      goto LABEL_37;
    }
    uint64_t v23 = *(char **)(a1 + 24);
    uint64_t v24 = *(char **)a1;
    uint64_t v25 = (uint64_t)&v23[-*(void *)a1];
    if (v6 < (unint64_t)(v25 >> 3))
    {
      int64_t v26 = operator new(0xFC0uLL);
      uint64_t v27 = v26;
      if (v23 != v5)
      {
        *(void *)unint64_t v5 = v26;
LABEL_37:
        *(void *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v4 == v24)
      {
        if (v5 == v4) {
          unint64_t v63 = 1;
        }
        else {
          unint64_t v63 = v25 >> 2;
        }
        if (v63 >> 61) {
          goto LABEL_96;
        }
        uint64_t v64 = (char *)operator new(8 * v63);
        uint64_t v45 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
        unsigned int v65 = v45;
        if (v5 != v4)
        {
          uint64_t v66 = 8 * v6;
          unint64_t v67 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v68 = v4;
          unsigned int v65 = &v45[8 * v6];
          do
          {
            uint64_t v69 = *(void *)v68;
            v68 += 8;
            *(void *)unint64_t v67 = v69;
            v67 += 8;
            v66 -= 8;
          }
          while (v66);
        }
        *(void *)a1 = v64;
        *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v45;
        *(void *)(a1 + 16) = v65;
        *(void *)(a1 + 24) = &v64[8 * v63];
        if (v4)
        {
          operator delete(v4);
          uint64_t v45 = *(char **)(a1 + 8);
        }
      }
      else
      {
        uint64_t v45 = v4;
      }
      *((void *)v45 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v27;
      unint64_t v70 = *(char **)(a1 + 8);
      size_t v71 = *(char **)(a1 + 16);
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v70 - 8;
      uint64_t v72 = *((void *)v70 - 1);
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v70;
      if (v71 != *(char **)(a1 + 24))
      {
LABEL_95:
        *(void *)size_t v71 = v72;
        goto LABEL_37;
      }
      uint64_t v73 = *(char **)a1;
      if ((unint64_t)v70 > *(void *)a1)
      {
        uint64_t v74 = (uint64_t)&v70[-*(void *)a1] >> 3;
        if (v74 >= -1) {
          uint64_t v75 = v74 + 1;
        }
        else {
          uint64_t v75 = v74 + 2;
        }
        uint64_t v76 = -(v75 >> 1);
        uint64_t v77 = v75 >> 1;
        int v78 = &v70[-8 * v77];
        size_t v79 = v71 - v70;
        if (v79)
        {
          memmove(&v70[-8 * v77], v70, v79);
          unint64_t v70 = *(char **)(a1 + 8);
        }
        size_t v71 = &v78[v79];
        *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = &v70[8 * v76];
        *(void *)(a1 + 16) = v71;
        goto LABEL_95;
      }
      if (v71 == v73) {
        unint64_t v80 = 1;
      }
      else {
        unint64_t v80 = (v71 - v73) >> 2;
      }
      if (!(v80 >> 61))
      {
        uint64_t v81 = (char *)operator new(8 * v80);
        unint64_t v82 = &v81[8 * (v80 >> 2)];
        uint64_t v83 = v71 - v70;
        BOOL v37 = v71 == v70;
        size_t v71 = v82;
        if (!v37)
        {
          size_t v71 = &v82[v83 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v84 = 8 * (v83 >> 3);
          uint64_t v85 = &v81[8 * (v80 >> 2)];
          do
          {
            uint64_t v86 = *(void *)v70;
            v70 += 8;
            *(void *)uint64_t v85 = v86;
            v85 += 8;
            v84 -= 8;
          }
          while (v84);
        }
        *(void *)a1 = v81;
        *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v82;
        *(void *)(a1 + 16) = v71;
        *(void *)(a1 + 24) = &v81[8 * v80];
        if (v73)
        {
          operator delete(v73);
          size_t v71 = *(char **)(a1 + 16);
        }
        goto LABEL_95;
      }
LABEL_96:
      sub_1CB833614();
    }
    if (v23 == v24) {
      unint64_t v28 = 1;
    }
    else {
      unint64_t v28 = v25 >> 2;
    }
    if (v28 >> 61) {
      goto LABEL_96;
    }
    unint64_t v29 = (char *)operator new(8 * v28);
    uint64_t v30 = &v29[8 * v6];
    BOOL v31 = &v29[8 * v28];
    uint64_t v32 = operator new(0xFC0uLL);
    if (v6 == v28)
    {
      if (v7 < 1)
      {
        if (v5 == v4) {
          unint64_t v46 = 1;
        }
        else {
          unint64_t v46 = v7 >> 2;
        }
        if (v46 >> 61) {
          goto LABEL_96;
        }
        unsigned int v47 = v32;
        uint64_t v30 = (char *)operator new(8 * v46);
        BOOL v31 = &v30[8 * v46];
        operator delete(v29);
        uint64_t v4 = *(char **)(a1 + 8);
        unint64_t v5 = *(char **)(a1 + 16);
        unint64_t v29 = v30;
        uint64_t v32 = v47;
      }
      else
      {
        unint64_t v33 = v6 + 2;
        if (v6 >= -1) {
          unint64_t v33 = v6 + 1;
        }
        v30 -= 8 * (v33 >> 1);
      }
    }
    *(void *)uint64_t v30 = v32;
    int v48 = v30 + 8;
    if (v5 != v4)
    {
      while (1)
      {
        if (v30 == v29)
        {
          if (v48 >= v31)
          {
            if (v31 == v30) {
              unint64_t v53 = 1;
            }
            else {
              unint64_t v53 = (v31 - v30) >> 2;
            }
            if (v53 >> 61) {
              goto LABEL_96;
            }
            uint64_t v54 = (char *)operator new(8 * v53);
            unint64_t v29 = v54;
            unsigned int v49 = &v54[(2 * v53 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v50 = v49;
            uint64_t v55 = v48 - v30;
            if (v48 != v30)
            {
              uint64_t v50 = &v49[v55 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v56 = 8 * (v55 >> 3);
              unint64_t v57 = &v54[(2 * v53 + 6) & 0xFFFFFFFFFFFFFFF8];
              unint64_t v58 = v30;
              do
              {
                uint64_t v59 = *(void *)v58;
                v58 += 8;
                *(void *)unint64_t v57 = v59;
                v57 += 8;
                v56 -= 8;
              }
              while (v56);
            }
            BOOL v31 = &v54[8 * v53];
            operator delete(v30);
          }
          else
          {
            uint64_t v51 = (v31 - v48) >> 3;
            if (v51 >= -1) {
              unint64_t v52 = v51 + 1;
            }
            else {
              unint64_t v52 = v51 + 2;
            }
            uint64_t v50 = &v48[8 * (v52 >> 1)];
            unsigned int v49 = &v30[8 * (v52 >> 1)];
            if (v48 == v30)
            {
              unint64_t v29 = v48;
            }
            else
            {
              memmove(&v30[8 * (v52 >> 1)], v30, v48 - v30);
              unint64_t v29 = v30;
            }
          }
        }
        else
        {
          unsigned int v49 = v30;
          uint64_t v50 = v48;
        }
        uint64_t v60 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v49 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v60;
        uint64_t v61 = v49 - 8;
        int v48 = v50;
        uint64_t v30 = v61;
        if (v5 == *(char **)(a1 + 8)) {
          goto LABEL_67;
        }
      }
    }
    uint64_t v61 = v30;
    uint64_t v50 = v30 + 8;
LABEL_67:
    uint64_t v62 = *(char **)a1;
    *(void *)a1 = v29;
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v61;
    *(void *)(a1 + 16) = v50;
    *(void *)(a1 + 24) = v31;
    if (v62) {
      operator delete(v62);
    }
  }
LABEL_38:
  uint64_t v42 = *(void *)(a1 + 40);
  unint64_t v43 = *(void *)(*(void *)(a1 + 8) + 8 * ((*(void *)(a1 + 32) + v42) / 0x2AuLL))
      + 96 * ((*(void *)(a1 + 32) + v42) % 0x2AuLL);
  *(void *)unint64_t v43 = *a2;
  *(_DWORD *)(v43 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = -1;
  *(_OWORD *)(v43 + 16) = xmmword_1CFAC4A20;
  *(void *)(v43 + 32) = v43 + 48;
  *(void *)&double result = 0x100000000;
  *(void *)(v43 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0x100000000;
  *(void *)(v43 + 64) = v43 + 80;
  *(void *)(v43 + 72) = 0x100000000;
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v42 + 1;
  return result;
}

void *sub_1CCBF3BDC(void *a1)
{
  unint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = (void *)v2[8];
    if (v3 != v2 + 10) {
      free(v3);
    }
    uint64_t v4 = (void *)v2[4];
    if (v4 != v2 + 6) {
      free(v4);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10E0C40DF66E2BDLL);
  }
  return a1;
}

void *sub_1CCBF3C4C(void *a1)
{
  *a1 = &unk_1F2631BC8;
  sub_1CCBF3BDC(a1 + 8);
  return a1;
}

uint64_t sub_1CCBF3C90(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t AssociatedFragment = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!AssociatedFragment && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    unint64_t AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    uint64_t v2 = *(void *)a1 & 7 | AssociatedFragment;
    *(void *)a1 = v2;
  }
  if (AssociatedFragment)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a1 + 8) |= 4u;
      unint64_t v4 = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
      *(void *)a1 = *(void *)a1 & 7 | v4;
    }
    unint64_t v5 = v4 + 16;
  }
  else
  {
    unint64_t v5 = a1 + 40;
  }
  return *(void *)v5;
}

void sub_1CCBF3D40(void *a1)
{
  *a1 = &unk_1F2631BC8;
  sub_1CCBF3BDC(a1 + 8);

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CCBF3DA4(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 56) + 8))
  {
    uint64_t v2 = *(llvm::raw_ostream **)(a1 + 40);
    unint64_t v3 = bswap64(a2);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = a2;
    }
    unint64_t v12 = v4;
    unint64_t v5 = (char *)&v12;
    uint64_t v6 = v2;
    size_t v7 = 8;
  }
  else
  {
    uint64_t v8 = *(llvm::raw_ostream **)(a1 + 40);
    unsigned int v9 = bswap32(a2);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      int v10 = v9;
    }
    else {
      int v10 = a2;
    }
    *(_DWORD *)uint64_t v13 = v10;
    unint64_t v5 = v13;
    uint64_t v6 = v8;
    size_t v7 = 4;
  }
  return llvm::raw_ostream::write(v6, v5, v7);
}

llvm::raw_ostream *sub_1CCBF3E24(llvm::raw_ostream *result, uint64_t a2, char a3)
{
  if (*(__int16 *)(a2 + 56) != -3)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 8;
    uint64_t v8 = (llvm::raw_ostream *)*((void *)result + 5);
    do
    {
      v23[0] = *(unsigned char *)(v7 + v6);
      uint64_t v8 = llvm::raw_ostream::write(v8, v23, 1uLL);
      ++v6;
    }
    while (v6 != 8);
    if (a3)
    {
      sub_1CCBF3DA4(v5, 0);
      unint64_t v9 = 0;
    }
    else
    {
      sub_1CCBF3DA4(v5, *(void *)(a2 + 16));
      unint64_t v9 = *(void *)(a2 + 16);
    }
    sub_1CCBF3DA4(v5, v9);
    sub_1CCBF3DA4(v5, *(void *)(a2 + 24));
    sub_1CCBF3DA4(v5, *(void *)(a2 + 32));
    sub_1CCBF3DA4(v5, *(void *)(a2 + 40));
    sub_1CCBF3DA4(v5, 0);
    if (*(unsigned char *)(*(void *)(v5 + 56) + 8))
    {
      int v10 = *(llvm::raw_ostream **)(v5 + 40);
      *(_DWORD *)uint64_t v23 = 0;
      llvm::raw_ostream::write(v10, v23, 4uLL);
      unint64_t v11 = *(llvm::raw_ostream **)(v5 + 40);
      *(_DWORD *)uint64_t v23 = 0;
      llvm::raw_ostream::write(v11, v23, 4uLL);
      unsigned int v12 = *(_DWORD *)(a2 + 52);
      uint64_t v13 = *(llvm::raw_ostream **)(v5 + 40);
      unsigned int v14 = bswap32(v12);
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2) {
        unsigned int v12 = v14;
      }
      *(_DWORD *)uint64_t v23 = v12;
      llvm::raw_ostream::write(v13, v23, 4uLL);
      unint64_t v15 = *(llvm::raw_ostream **)(v5 + 40);
      uint64_t v16 = "";
    }
    else
    {
      unsigned int v17 = *(unsigned __int16 *)(a2 + 48);
      uint64_t v18 = *(llvm::raw_ostream **)(v5 + 40);
      unsigned int v19 = bswap32(v17) >> 16;
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2) {
        LOWORD(v17) = v19;
      }
      *(_WORD *)uint64_t v23 = v17;
      llvm::raw_ostream::write(v18, v23, 2uLL);
      uint64_t v20 = *(llvm::raw_ostream **)(v5 + 40);
      *(_WORD *)uint64_t v23 = 0;
      llvm::raw_ostream::write(v20, v23, 2uLL);
      unsigned int v21 = *(_DWORD *)(a2 + 52);
      unint64_t v15 = *(llvm::raw_ostream **)(v5 + 40);
      unsigned int v22 = bswap32(v21);
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2) {
        unsigned int v21 = v22;
      }
      *(_DWORD *)uint64_t v23 = v21;
      uint64_t v16 = v23;
    }
    return llvm::raw_ostream::write(v15, v16, 4uLL);
  }
  return result;
}

llvm::raw_ostream *sub_1CCBF3FDC(uint64_t a1, unint64_t a2, __int16 a3, char a4, int a5)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  if (a4)
  {
    unsigned int v9 = HIDWORD(a2) + a5;
    int v10 = *(llvm::raw_ostream **)(a1 + 40);
    unsigned int v11 = bswap32(HIDWORD(a2) + a5);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      unsigned int v9 = v11;
    }
    unsigned int v20 = v9;
    unsigned int v12 = (char *)&v20;
  }
  else
  {
    int v10 = *(llvm::raw_ostream **)(a1 + 40);
    unsigned int v13 = bswap32(HIDWORD(a2));
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      LODWORD(vMEMORY[0x1D25D9CD0](*(void *)this, 8) = v13;
    }
    *(_DWORD *)unsigned int v21 = v8;
    unsigned int v12 = v21;
  }
  llvm::raw_ostream::write(v10, v12, 4uLL);
  unsigned int v14 = *(llvm::raw_ostream **)(a1 + 40);
  unsigned int v15 = bswap32(v6);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v6;
  }
  *(_DWORD *)unsigned int v22 = v16;
  llvm::raw_ostream::write(v14, v22, 4uLL);
  unsigned int v17 = *(llvm::raw_ostream **)(a1 + 40);
  char v23 = a3;
  llvm::raw_ostream::write(v17, &v23, 1uLL);
  uint64_t v18 = *(llvm::raw_ostream **)(a1 + 40);
  char v24 = HIBYTE(a3);
  return llvm::raw_ostream::write(v18, &v24, 1uLL);
}

llvm::raw_ostream *sub_1CCBF40C4(uint64_t a1, char *__src, unint64_t a3, unsigned int a4, unsigned int a5, char a6, char a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a3 < 9)
  {
    strncpy(__dst, __src, 8uLL);
    uint64_t v20 = 0;
    unsigned int v21 = *(llvm::raw_ostream **)(a1 + 40);
    do
    {
      char v32 = __dst[v20];
      unsigned int v21 = llvm::raw_ostream::write(v21, &v32, 1uLL);
      ++v20;
    }
    while (v20 != 8);
  }
  else
  {
    unsigned int v14 = *(llvm::raw_ostream **)(a1 + 40);
    *(_DWORD *)long long __dst = 0;
    llvm::raw_ostream::write(v14, __dst, 4uLL);
    unsigned int v15 = sub_1CD0B03C8(__src, (uint64_t)&__src[a3]);
    unsigned int Offset = llvm::StringTableBuilder::getOffset(a1 + 64, (uint64_t)__src, a3 | ((unint64_t)v15 << 32));
    unsigned int v17 = *(llvm::raw_ostream **)(a1 + 40);
    unsigned int v18 = bswap32(Offset);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = Offset;
    }
    *(_DWORD *)long long __dst = v19;
    llvm::raw_ostream::write(v17, __dst, 4uLL);
  }
  unsigned int v22 = *(llvm::raw_ostream **)(a1 + 40);
  unsigned int v23 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = a4;
  }
  *(_DWORD *)long long __dst = v24;
  llvm::raw_ostream::write(v22, __dst, 4uLL);
  uint64_t v25 = *(llvm::raw_ostream **)(a1 + 40);
  unsigned int v26 = bswap32(a5) >> 16;
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    __int16 v27 = v26;
  }
  else {
    __int16 v27 = a5;
  }
  *(_WORD *)long long __dst = v27;
  llvm::raw_ostream::write(v25, __dst, 2uLL);
  unint64_t v28 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)long long __dst = 0;
  llvm::raw_ostream::write(v28, __dst, 2uLL);
  unint64_t v29 = *(llvm::raw_ostream **)(a1 + 40);
  __dst[0] = a6;
  llvm::raw_ostream::write(v29, __dst, 1uLL);
  uint64_t v30 = *(llvm::raw_ostream **)(a1 + 40);
  __dst[0] = a7;
  return llvm::raw_ostream::write(v30, __dst, 1uLL);
}

llvm::raw_ostream *sub_1CCBF4284(uint64_t a1, unsigned int *a2, unsigned int a3, char a4)
{
  sub_1CCBF40C4(a1, *(char **)(*(void *)a2 + 240), *(void *)(*(void *)a2 + 248), a2[4], a3, a4, 1);
  unsigned int v6 = a2[6];
  char v7 = (8 * (~__clz(1 << *(unsigned char *)(*(void *)a2 + 24)) & 0x1F)) | *(unsigned char *)(*(void *)a2 + 225);
  char v8 = *(unsigned char *)(*(void *)a2 + 224);

  return sub_1CCBF430C(a1, v6, v7, v8);
}

llvm::raw_ostream *sub_1CCBF430C(uint64_t a1, unsigned int a2, char a3, char a4)
{
  char v7 = *(llvm::raw_ostream **)(a1 + 40);
  unsigned int v8 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = a2;
  }
  *(_DWORD *)unsigned int v17 = v9;
  llvm::raw_ostream::write(v7, v17, 4uLL);
  int v10 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)unsigned int v17 = 0;
  llvm::raw_ostream::write(v10, v17, 4uLL);
  unsigned int v11 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)unsigned int v17 = 0;
  llvm::raw_ostream::write(v11, v17, 2uLL);
  unsigned int v12 = *(llvm::raw_ostream **)(a1 + 40);
  v17[0] = a3;
  llvm::raw_ostream::write(v12, v17, 1uLL);
  unsigned int v13 = *(llvm::raw_ostream **)(a1 + 40);
  v17[0] = a4;
  llvm::raw_ostream::write(v13, v17, 1uLL);
  unsigned int v14 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)unsigned int v17 = 0;
  llvm::raw_ostream::write(v14, v17, 4uLL);
  unsigned int v15 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)unsigned int v17 = 0;
  return llvm::raw_ostream::write(v15, v17, 2uLL);
}

uint64_t llvm::mca::CodeEmitter::getOrCreateEncodingInfo(llvm::mca::CodeEmitter *this, unsigned int a2)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_DWORD *)(*((void *)this + 49) + 8 * a2);
  if (v2[1]) {
    return *(void *)v2;
  }
  v16[0] = v17;
  v16[1] = (void *)0x200000000;
  uint64_t v6 = *((void *)this + 47);
  char v7 = (long long *)(v6 + 168 * a2);
  long long v12 = *v7;
  unsigned int v13 = v15;
  uint64_t v14 = 0x800000000;
  unsigned int v8 = *((_DWORD *)v7 + 6);
  unsigned int v9 = (void **)(v7 + 1);
  if (v8) {
    BOOL v10 = &v13 == v9;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (v8 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v15, *v9, 16 * *((unsigned int *)v7 + 6));
    LODWORD(v14) = v8;
  }
  v15[128] = *(unsigned char *)(v6 + 168 * a2 + 160);
  if ((*(unsigned int (**)(void, long long *, void))(**((void **)this + 1) + 128))(*((void *)this + 1), v7, *(void *)this))
  {
    (*(void (**)(void, long long *, void))(**((void **)this + 1) + 152))(*((void *)this + 1), &v12, *(void *)this);
  }
  _DWORD *v2 = *((void *)this + 4);
  (*(void (**)(void, long long *, char *, void **, void))(**((void **)this + 2) + 32))(*((void *)this + 2), &v12, (char *)this + 304, v16, *(void *)this);
  v2[1] = *((_DWORD *)this + 8) - *v2;
  uint64_t v3 = *(void *)v2;
  if (v13 != v15) {
    free(v13);
  }
  if (v16[0] != v17) {
    free(v16[0]);
  }
  return v3;
}

void llvm::mca::Context::createDefaultPipeline(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 160) + 4) > 1u) {
    operator new();
  }

  llvm::mca::Context::createInOrderPipeline();
}

void llvm::mca::Context::createInOrderPipeline()
{
}

void sub_1CCBF4F8C(uint64_t a1, char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      unsigned int v11 = &a2[-v5];
      sub_1CCBF5014(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = &v11[*(void *)a1];
    }
    else
    {
      sub_1CCBF5014(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6 + 1;
}

void sub_1CCBF5014(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 8 * v9;
    long long v12 = v7;
    do
    {
      uint64_t v13 = *v8;
      *v8++ = 0;
      *v12++ = v13;
      v11 -= 8;
    }
    while (v11);
    uint64_t v14 = *(void *)a1 - 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + v10);
      *(void *)(v14 + v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      v10 -= 8;
    }
    while (v10);
    unint64_t v8 = *(uint64_t **)a1;
  }
  if (v8 != (uint64_t *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void *sub_1CCBF5134(void *a1)
{
  *a1 = &unk_1F2631BF0;
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_1CCBF5214(void *a1)
{
  *a1 = &unk_1F2631BF0;
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t *sub_1CCBF5314(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_1CCBF539C((char **)(v1 + 56));
    *(void *)uint64_t v1 = &unk_1F26320F0;
    sub_1CC1B4328(v1 + 16, *(void **)(v1 + 24));
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

char **sub_1CCBF539C(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6)
      {
        uint64_t v7 = *(void **)(v6 + 512);
        if (v7)
        {
          *(void *)(v6 + 52llvm::StringTableBuilder::finalizeStringTable(this, 0) = v7;
          operator delete(v7);
        }
        unint64_t v8 = *(void **)(v6 + 304);
        if (v8 != (void *)(v6 + 320)) {
          free(v8);
        }
        sub_1CCBF5448((char **)(v6 + 16));
        MEMORY[0x1D25D9CE0](v6, 0x10E0C40F9C4931CLL);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CCBF5448(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 136 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5) {
        free(v5);
      }
      v4 -= 136;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void llvm::mca::CustomBehaviour::~CustomBehaviour(llvm::mca::CustomBehaviour *this)
{
}

uint64_t llvm::mca::CustomBehaviour::checkCustomHazard()
{
  return 0;
}

void llvm::mca::CustomBehaviour::getStartViews(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::mca::CustomBehaviour::getPostInstrInfoViews(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::mca::CustomBehaviour::getEndViews(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1CCBF5518()
{
}

void llvm::mca::HardwareUnit::~HardwareUnit(llvm::mca::HardwareUnit *this)
{
}

uint64_t llvm::mca::LSUnitBase::LSUnitBase(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  *(void *)double result = &unk_1F2631CF8;
  *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = a5;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(_DWORD *)(result + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(result + 56) = 1;
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5)
  {
    if (!a3)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 36);
      if (v6) {
        *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v6 + 16) & ~(*(int *)(*(void *)(a2 + 32)
      }
                                                                                              + 32 * v6
                                                                                              + 16) >> 31);
    }
    if (!a4)
    {
      uint64_t v7 = *(unsigned int *)(v5 + 40);
      if (v7) {
        *(_DWORD *)(result + 12) = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v7 + 16) & ~(*(int *)(*(void *)(a2 + 32)
      }
                                                                                               + 32 * v7
                                                                                               + 16) >> 31);
    }
  }
  return result;
}

void llvm::mca::LSUnitBase::~LSUnitBase(llvm::mca::LSUnitBase *this)
{
  *(void *)this = &unk_1F2631CF8;
  sub_1CCBF63DC((uint64_t *)this + 4);
}

uint64_t llvm::mca::LSUnitBase::cycleEvent(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 32);
  uint64_t v2 = *(unsigned int *)(this + 48);
  uint64_t v3 = (unsigned int *)(v1 + 16 * v2);
  if (*(_DWORD *)(this + 40))
  {
    if (v2)
    {
      uint64_t v4 = 16 * v2;
      uint64_t v5 = *(unsigned int **)(this + 32);
      while (*v5 >= 0xFFFFFFFE)
      {
        v5 += 4;
        v4 -= 16;
        if (!v4) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v5 = *(unsigned int **)(this + 32);
    }
  }
  else
  {
LABEL_6:
    uint64_t v5 = (unsigned int *)(v1 + 16 * v2);
  }
  uint64_t v6 = (unsigned int *)(v1 + 16 * v2);
LABEL_9:
  while (v5 != v6)
  {
    uint64_t v7 = (_DWORD *)*((void *)v5 + 1);
    if (*v7 > (v7[2] + v7[1]))
    {
      int v8 = v7[32];
      if (v8) {
        v7[32] = v8 - 1;
      }
    }
    uint64_t v9 = v5 + 4;
    while (v9 != v3)
    {
      unsigned int v10 = *v9;
      v9 += 4;
      if (v10 <= 0xFFFFFFFD)
      {
        uint64_t v5 = v9 - 4;
        goto LABEL_9;
      }
    }
    uint64_t v5 = v3;
  }
  return this;
}

uint64_t llvm::mca::LSUnit::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(v3 + 540);
  char v5 = v4;
  if ((v4 & 4) != 0)
  {
    ++*(_DWORD *)(a1 + 16);
    char v5 = *(unsigned char *)(v3 + 540);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_18:
      sub_1CCBF5970();
    }
  }
  else if ((*(unsigned char *)(v3 + 540) & 8) == 0)
  {
    goto LABEL_3;
  }
  ++*(_DWORD *)(a1 + 20);
  if ((*(unsigned char *)(v3 + 540) & 8) != 0) {
    goto LABEL_18;
  }
LABEL_4:
  unsigned int v6 = *(_DWORD *)(a1 + 60);
  unsigned int v7 = *(_DWORD *)(a1 + 64);
  if (v6 <= v7) {
    unsigned int v8 = *(_DWORD *)(a1 + 64);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 60);
  }
  if ((v4 & 1) != 0
    || (v8 ? (BOOL v9 = v7 >= v6) : (BOOL v9 = 1),
        v9
     || v8 <= *(_DWORD *)(a1 + 68)
     || (v14 = v8, unsigned int v10 = (_DWORD *)*((void *)sub_1CC3DEC94((uint64_t *)(a1 + 32), &v14) + 1), (v11 = v10[4]) != 0)
     && v11 == v10[3] - v10[5]))
  {
    sub_1CCBF5970();
  }
  unsigned int v14 = *(_DWORD *)(a1 + 60);
  long long v12 = sub_1CC3DEC94((uint64_t *)(a1 + 32), &v14);
  ++*(_DWORD *)(*((void *)v12 + 1) + 12);
  return *(unsigned int *)(a1 + 60);
}

void sub_1CCBF5970()
{
}

uint64_t sub_1CCBF5AA4(uint64_t result, _DWORD *a2, char a3)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 16);
  if (a3)
  {
    ++*a2;
    if (v4)
    {
      if (v4 == *(_DWORD *)(result + 12) - *(_DWORD *)(result + 20))
      {
        ++a2[1];
        unsigned int v5 = *(_DWORD *)(*(void *)(result + 144) + 548);
        if (a2[32] < v5)
        {
          a2[30] = *(_DWORD *)(result + 136);
          a2[32] = v5;
        }
      }
    }
    unsigned int v7 = (_DWORD *)(result + 80);
    uint64_t v6 = *(unsigned int *)(result + 80);
    result += 72;
    if (v6 >= *(_DWORD *)(v3 + 84)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)result + 8 * v6) = a2;
LABEL_12:
    *unsigned int v7 = v6 + 1;
    return result;
  }
  if (!v4 || v4 != *(_DWORD *)(result + 12) - *(_DWORD *)(result + 20))
  {
    ++*a2;
    unsigned int v7 = (_DWORD *)(result + 32);
    uint64_t v6 = *(unsigned int *)(result + 32);
    result += 24;
    if (v6 >= *(_DWORD *)(v3 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)result + 8 * v6) = a2;
    goto LABEL_12;
  }
  return result;
}

uint64_t llvm::mca::LSUnit::isAvailable(_DWORD *a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a2 + 8) + 540) & 4) != 0)
  {
    int v2 = a1[2];
    if (v2)
    {
      if (v2 == a1[4]) {
        return 1;
      }
    }
  }
  if ((*(unsigned char *)(*(void *)(a2 + 8) + 540) & 8) != 0)
  {
    int v4 = a1[3];
    if (v4)
    {
      if (v4 == a1[5]) {
        return 2;
      }
    }
  }
  return 0;
}

int32x2_t llvm::mca::LSUnitBase::onInstructionExecuted(uint64_t a1, int *a2)
{
  int v15 = *(_DWORD *)(*((void *)a2 + 1) + 556);
  int v4 = sub_1CC3DEC94((uint64_t *)(a1 + 32), &v15);
  uint64_t v6 = v4;
  uint64_t v7 = *((void *)v4 + 1);
  int v8 = *a2;
  int v9 = *(_DWORD *)(v7 + 20) + 1;
  --*(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v9;
  if (*(void *)(v7 + 144) && *(_DWORD *)(v7 + 136) == v8) {
    *(void *)(v7 + 144) = 0;
  }
  if (*(_DWORD *)(v7 + 12) == v9)
  {
    uint64_t v10 = *(unsigned int *)(v7 + 80);
    if (v10)
    {
      int v11 = *(uint64_t **)(v7 + 72);
      uint64_t v12 = 8 * v10;
      int32x2_t result = (int32x2_t)0x1FFFFFFFFLL;
      do
      {
        uint64_t v13 = *v11++;
        *(int32x2_t *)(v13 + 4) = vadd_s32(*(int32x2_t *)(v13 + 4), (int32x2_t)0x1FFFFFFFFLL);
        v12 -= 8;
      }
      while (v12);
    }
  }
  uint64_t v14 = *((void *)v4 + 1);
  if (*(_DWORD *)(v14 + 12) == *(_DWORD *)(v14 + 20))
  {
    *((void *)v6 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    sub_1CCBF6368((void *)v14);
    *uint64_t v6 = -2;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 40), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = result;
  }
  return result;
}

uint64_t llvm::mca::LSUnitBase::onInstructionRetired(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(*(void *)(a2 + 8) + 540);
  if ((v2 & 4) == 0)
  {
    if ((*(unsigned char *)(*(void *)(a2 + 8) + 540) & 8) == 0) {
      return result;
    }
LABEL_5:
    --*(_DWORD *)(result + 20);
    return result;
  }
  --*(_DWORD *)(result + 16);
  if ((v2 & 8) != 0) {
    goto LABEL_5;
  }
  return result;
}

void llvm::mca::LSUnit::onInstructionExecuted(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(v2 + 540) & 0xC) != 0)
  {
    llvm::mca::LSUnitBase::onInstructionExecuted(a1, (int *)a2);
    int v4 = *(_DWORD *)(v2 + 556);
    int v5 = v4;
    if (!v4
      || (int *)(*(void *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48)) == sub_1CC3DEC94((uint64_t *)(a1 + 32), &v5))
    {
      if (v4 == *(_DWORD *)(a1 + 60)) {
        *(_DWORD *)(a1 + 6llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      }
      if (v4 == *(_DWORD *)(a1 + 68)) {
        *(_DWORD *)(a1 + 6MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
      }
      if (v4 == *(_DWORD *)(a1 + 64)) {
        *(_DWORD *)(a1 + 64) = 0;
      }
      if (v4 == *(_DWORD *)(a1 + 72)) {
        *(_DWORD *)(a1 + 72) = 0;
      }
    }
  }
}

void *sub_1CCBF5E00(void *a1)
{
  *a1 = &unk_1F2631CF8;
  sub_1CCBF63DC(a1 + 4);
  return a1;
}

void sub_1CCBF5E44(void *a1)
{
  *a1 = &unk_1F2631CF8;
  sub_1CCBF63DC(a1 + 4);

  JUMPOUT(0x1D25D9CE0);
}

_DWORD *sub_1CCBF5EA8(uint64_t a1, int *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  int v4 = *(_DWORD *)(v3 + 556);
  int v31 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  int32x2_t result = (_DWORD *)(a1 + 32);
  uint64_t v6 = v7;
  int v8 = result[4];
  if (!v8)
  {
    unsigned int v17 = 0;
LABEL_13:
    int32x2_t result = sub_1CCBF6030((uint64_t)result, &v31, v17);
    int v11 = result;
    *int32x2_t result = v4;
    *((void *)result + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
    uint64_t v3 = *((void *)a2 + 1);
    goto LABEL_14;
  }
  int v9 = v8 - 1;
  unsigned int v10 = (v8 - 1) & (37 * v4);
  int v11 = (_DWORD *)(v6 + 16 * v10);
  int v12 = *v11;
  if (v4 != *v11)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        uint64_t v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      int v11 = (_DWORD *)(v6 + 16 * (v16 & v9));
      int v12 = *v11;
      if (v4 == *v11) {
        goto LABEL_14;
      }
    }
    if (v13) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = v11;
    }
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v18 = *((void *)v11 + 1);
  int v19 = *a2;
  int v20 = *(_DWORD *)(v18 + 16) + 1;
  *(_DWORD *)(v18 + 16) = v20;
  uint64_t v21 = *(void *)(v18 + 144);
  if (!v21 || *(_DWORD *)(v21 + 548) < *(_DWORD *)(v3 + 548))
  {
    *(_DWORD *)(v18 + 136) = v19;
    *(void *)(v18 + 144) = v3;
    uint64_t v21 = v3;
  }
  if (v20 && v20 == *(_DWORD *)(v18 + 12) - *(_DWORD *)(v18 + 20))
  {
    uint64_t v22 = *(unsigned int *)(v18 + 32);
    if (v22)
    {
      unsigned int v23 = *(uint64_t **)(v18 + 24);
      uint64_t v24 = 8 * v22;
      do
      {
        uint64_t v25 = *v23++;
        ++*(_DWORD *)(v25 + 8);
        v24 -= 8;
      }
      while (v24);
    }
    uint64_t v26 = *(unsigned int *)(v18 + 80);
    if (v26)
    {
      uint64_t v27 = *(void *)(v18 + 72);
      unsigned int v28 = *(_DWORD *)(v21 + 548);
      uint64_t v29 = 8 * v26;
      do
      {
        uint64_t v30 = *(_DWORD **)v27;
        v30[1] = *(_DWORD *)(*(void *)v27 + 4) + 1;
        if (v30[32] < v28)
        {
          v30[30] = *(_DWORD *)(v18 + 136);
          v30[32] = v28;
        }
        v27 += 8;
        v29 -= 8;
      }
      while (v29);
    }
  }
  return result;
}

_DWORD *sub_1CCBF6030(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
    sub_1CCBF61B8((uint64_t *)a1, v6);
    int v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      int v17 = v16 - 1;
      unsigned int v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(void *)a1 + 16 * v18);
      int v19 = *a3;
      if (*a2 == *a3) {
        goto LABEL_3;
      }
      int v12 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v12) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          int v12 = a3;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a3 = (_DWORD *)(*(void *)a1 + 16 * v18);
        int v19 = *a3;
        if (*a2 == *a3) {
          goto LABEL_3;
        }
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1CCBF61B8((uint64_t *)a1, 2 * v6);
  int v8 = *(_DWORD *)(a1 + 16);
  if (!v8) {
    goto LABEL_28;
  }
  int v9 = v8 - 1;
  unsigned int v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
  int v11 = *a3;
  if (*a2 == *a3) {
    goto LABEL_3;
  }
  int v12 = 0;
  int v13 = 1;
  while (v11 != -1)
  {
    if (v12) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v11 == -2;
    }
    if (v14) {
      int v12 = a3;
    }
    unsigned int v15 = v10 + v13++;
    unsigned int v10 = v15 & v9;
    a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
    int v11 = *a3;
    if (*a2 == *a3) {
      goto LABEL_3;
    }
  }
LABEL_29:
  if (v12) {
    a3 = v12;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

_DWORD *sub_1CCBF61B8(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  int v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  int32x2_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *int32x2_t result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      int v12 = v4;
      int v13 = &v4[4 * v3];
      do
      {
        int v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & (37 * v14);
          uint64_t v17 = *a1 + 16 * v16;
          int v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v18 != -1)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v18 == -2;
              }
              if (v23) {
                uint64_t v21 = v17;
              }
              unsigned int v24 = v16 + v22++;
              unsigned int v16 = v24 & v15;
              uint64_t v17 = *a1 + 16 * (v24 & v15);
              int v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17) {
                goto LABEL_12;
              }
            }
            if (v21) {
              uint64_t v17 = v21;
            }
          }
LABEL_12:
          *(_DWORD *)uint64_t v17 = v14;
          uint64_t v19 = *((void *)v12 + 1);
          *((void *)v12 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
          *(void *)(v17 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v19;
          ++*((_DWORD *)a1 + 2);
          int v20 = (void *)*((void *)v12 + 1);
          *((void *)v12 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
          if (v20) {
            sub_1CCBF6368(v20);
          }
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v25 = *((unsigned int *)a1 + 4);
  if (v25)
  {
    uint64_t v26 = 16 * v25;
    do
    {
      *int32x2_t result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

void *sub_1CCBF6368(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)result[9];
    if (v2 != v1 + 11) {
      free(v2);
    }
    uint64_t v3 = (void *)v1[3];
    if (v3 != v1 + 5) {
      free(v3);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t *sub_1CCBF63DC(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    unint64_t v5 = (void **)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        unint64_t v6 = *v5;
        unsigned int *v5 = 0;
        if (v6) {
          sub_1CCBF6368(v6);
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t llvm::mca::WriteRef::WriteRef(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)int32x2_t result = a2;
  *(_WORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  return result;
}

{
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)int32x2_t result = a2;
  *(_WORD *)(result + 12) = 0;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t llvm::mca::WriteRef::commit(uint64_t this)
{
  uint64_t v1 = *(_WORD **)(this + 16);
  *(_WORD *)(this + 12) = v1[6];
  *(_DWORD *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(*(void *)v1 + 12);
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t llvm::mca::WriteRef::notifyExecuted(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

BOOL llvm::mca::WriteRef::hasKnownWriteBackCycle(llvm::mca::WriteRef *this)
{
  if (*(_DWORD *)this == -1) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 1;
  }
  int v2 = *(_DWORD *)(v1 + 8);
  return v2 != -512 && v2 < 1;
}

uint64_t llvm::mca::WriteRef::isWriteZero(llvm::mca::WriteRef *this)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + 21);
}

uint64_t llvm::mca::WriteRef::getWriteResourceID(llvm::mca::WriteRef *this)
{
  uint64_t v1 = (void *)*((void *)this + 2);
  if (v1) {
    int v2 = (unsigned int *)(*v1 + 12);
  }
  else {
    int v2 = (unsigned int *)((char *)this + 8);
  }
  return *v2;
}

uint64_t llvm::mca::WriteRef::getRegisterID(llvm::mca::WriteRef *this)
{
  uint64_t v1 = (llvm::mca::WriteRef *)*((void *)this + 2);
  if (!v1) {
    uint64_t v1 = this;
  }
  return *((unsigned __int16 *)v1 + 6);
}

uint64_t llvm::mca::RegisterFile::RegisterFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F2631D98;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = a3;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x400000000;
  unint64_t v8 = *(unsigned int *)(a3 + 8);
  uint64_t v11 = 0xFFFFFFFFLL;
  int v12 = 0;
  __int16 v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0x100000000;
  int v16 = 0;
  char v17 = 0;
  sub_1CCBF8160((void *)(a1 + 112), v8, (uint64_t)&v11);
  unsigned int v9 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 144) = v9;
  if (v9 > 0x40) {
    operator new[]();
  }
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  llvm::mca::RegisterFile::initialize(a1, a2, a4);
  return a1;
}

uint64_t llvm::mca::RegisterFile::initialize(uint64_t a1, uint64_t a2, int a3)
{
  int v10 = a3;
  uint64_t result = sub_1CCBF6710(a1 + 16, &v10);
  uint64_t v6 = *(void *)(a2 + 64);
  if (v6)
  {
    unsigned int v7 = *(_DWORD *)(v6 + 16);
    if (v7 >= 2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 24 * v7 - 24;
      do
      {
        uint64_t result = llvm::mca::RegisterFile::addRegisterFile(a1, *(void *)(v6 + 8) + v8 + 24, (unsigned int *)(*(void *)(v6 + 24) + 12 * *(unsigned __int16 *)(*(void *)(v6 + 8) + v8 + 36)), *(unsigned __int16 *)(*(void *)(v6 + 8) + v8 + 34));
        v8 += 24;
      }
      while (v9 != v8);
    }
  }
  return result;
}

uint64_t sub_1CCBF6710(uint64_t a1, int *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    int v12 = *a2;
    v13[0] = 0;
    *(void *)((char *)v13 + 5) = 0;
    unint64_t v9 = sub_1CD5DEBA8(a1, (unint64_t)&v12);
    uint64_t v10 = *(void *)a1 + 20 * *(unsigned int *)(a1 + 8);
    long long v11 = *(_OWORD *)v9;
    *(_DWORD *)(v10 + 16) = *(_DWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v10 = v11;
    unsigned int v6 = *(_DWORD *)(a1 + 8) + 1;
    uint64_t v7 = *(void *)a1 + 20 * v6;
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)a1 + 20 * v3;
    *(_DWORD *)uint64_t v5 = *a2;
    unsigned int v6 = v3 + 1;
    uint64_t v7 = v4 + 20 * v6;
    *(void *)(v5 + 4) = 0;
    *(void *)(v5 + 9) = 0;
  }
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6;
  return v7 - 20;
}

uint64_t llvm::mca::RegisterFile::addRegisterFile(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t result = a1 + 16;
  int v8 = *(unsigned __int16 *)(a2 + 14);
  char v9 = *(unsigned char *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(v6 + 24);
  if (v10 >= *(_DWORD *)(v6 + 28))
  {
    v57[0] = *(unsigned __int16 *)(a2 + 8);
    v57[1] = 0;
    v57[2] = v8;
    v57[3] = 0;
    char v58 = v9;
    uint64_t result = sub_1CD5DEBA8(result, (unint64_t)v57);
    uint64_t v52 = *(void *)(v6 + 16) + 20 * *(unsigned int *)(v6 + 24);
    long long v53 = *(_OWORD *)result;
    *(_DWORD *)(v52 + 16) = *(_DWORD *)(result + 16);
    *(_OWORD *)uint64_t v52 = v53;
    unsigned int v12 = *(_DWORD *)(v6 + 24);
  }
  else
  {
    uint64_t v11 = *(void *)result + 20 * v10;
    *(_DWORD *)uint64_t v11 = *(unsigned __int16 *)(a2 + 8);
    *(_DWORD *)(v11 + 4) = 0;
    *(_DWORD *)(v11 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v8;
    *(_DWORD *)(v11 + 12) = 0;
    *(unsigned char *)(v11 + 16) = v9;
    unsigned int v12 = v10;
  }
  *(_DWORD *)(v6 + 24) = v12 + 1;
  if (a4)
  {
    uint64_t v54 = &a3[3 * a4];
    __int16 v13 = *(uint64_t **)(v6 + 8);
    do
    {
      uint64_t v14 = v13[3] + 32 * *a3;
      if (*(_WORD *)(v14 + 20))
      {
        uint64_t v15 = *(unsigned __int16 **)v14;
        uint64_t v16 = *(void *)v14 + 2 * *(unsigned __int16 *)(v14 + 20);
        uint64_t v55 = v16;
        uint64_t v56 = a3;
        do
        {
          unsigned int v17 = *v15;
          uint64_t v18 = *(void *)(v6 + 112);
          uint64_t v19 = v18 + 40 * *v15;
          int v22 = *(_DWORD *)(v19 + 24);
          uint64_t v21 = (unsigned int *)(v19 + 24);
          int v20 = v22;
          if (v22) {
            BOOL v23 = v20 == v10;
          }
          else {
            BOOL v23 = 1;
          }
          if (!v23)
          {
            uint64_t result = (uint64_t)llvm::errs((llvm *)result);
            unsigned int v24 = (llvm::raw_ostream *)result;
            uint64_t v25 = *(void *)(result + 32);
            if ((unint64_t)(*(void *)(result + 24) - v25) > 0x11)
            {
              *(_WORD *)(v25 + 16) = 8306;
              *(_OWORD *)uint64_t v25 = *(_OWORD *)"warning: register ";
              *(void *)(result + 32) += 18;
            }
            else
            {
              uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, "warning: register ", 0x12uLL);
              unsigned int v24 = (llvm::raw_ostream *)result;
            }
            uint64_t v26 = v6;
            uint64_t v27 = *(void **)(v6 + 8);
            uint64_t v28 = v27[8];
            if (v28)
            {
              uint64_t v29 = (const char *)(v28 + *(unsigned int *)(*v27 + 24 * v17));
              size_t v30 = strlen(v29);
              uint64_t result = *((void *)v24 + 4);
              if (v30 <= *((void *)v24 + 3) - result)
              {
                if (v30)
                {
                  uint64_t result = (uint64_t)memcpy((void *)result, v29, v30);
                  *((void *)v24 + 4) += v30;
                }
              }
              else
              {
                uint64_t result = (uint64_t)llvm::raw_ostream::write(v24, v29, v30);
                unsigned int v24 = (llvm::raw_ostream *)result;
              }
            }
            int v31 = (void *)*((void *)v24 + 4);
            uint64_t v6 = v26;
            if (*((void *)v24 + 3) - (void)v31 > 0x23uLL)
            {
              qmemcpy(v31, " defined in multiple register files.", 36);
              *((void *)v24 + 4) += 36;
            }
            else
            {
              uint64_t result = (uint64_t)llvm::raw_ostream::write(v24, " defined in multiple register files.", 0x24uLL);
            }
            uint64_t v16 = v55;
            a3 = v56;
          }
          unsigned int v32 = a3[1];
          *uint64_t v21 = v10;
          v21[1] = v32;
          uint64_t v33 = v18 + 40 * v17;
          *(_WORD *)(v33 + 32) = v17;
          *(unsigned char *)(v33 + 36) = *((unsigned char *)a3 + 8);
          __int16 v13 = *(uint64_t **)(v6 + 8);
          uint64_t v34 = v13[6];
          uint64_t v35 = *v13;
          uint64_t v36 = (_WORD *)(v34 + 2 * *(unsigned int *)(*v13 + 24 * v17 + 4));
          if (*v36)
          {
            unsigned __int16 v37 = *v36 + v17;
            uint64_t v38 = *(void *)(v6 + 112);
            do
            {
              uint64_t v39 = v38 + 40 * v37;
              int v41 = *(_DWORD *)(v39 + 24);
              unint64_t v40 = (void *)(v39 + 24);
              if (!v41)
              {
                uint64_t v42 = v38 + 40 * v37;
                int v45 = *(unsigned __int16 *)(v42 + 32);
                unint64_t v43 = (_WORD *)(v42 + 32);
                int v44 = v45;
                if (!v45) {
                  goto LABEL_31;
                }
                unint64_t v46 = (_WORD *)(v34 + 2 * *(unsigned int *)(v35 + 24 * v37 + 8));
                uint64_t result = *v46 == 0;
                if (*v46)
                {
                  int v47 = (unsigned __int16)*v46 + v37;
                  if (v44 != (unsigned __int16)v47)
                  {
                    int v48 = v46 + 1;
                    do
                    {
                      int v50 = *v48++;
                      int v49 = v50;
                      uint64_t result = v50 == 0;
                      if (!v50) {
                        int v48 = 0;
                      }
                      if (!v49) {
                        break;
                      }
                      v47 += v49;
                    }
                    while (v44 != (unsigned __int16)v47);
                  }
                }
                if ((result & 1) == 0)
                {
LABEL_31:
                  *unint64_t v40 = *(void *)v21;
                  *unint64_t v43 = v17;
                }
              }
              int v51 = (unsigned __int16)v36[1];
              ++v36;
              v37 += v51;
            }
            while (v51);
          }
          ++v15;
        }
        while (v15 != (unsigned __int16 *)v16);
      }
      a3 += 3;
    }
    while (a3 != v54);
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::cycleStart(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = 20 * v1;
    unsigned int v3 = (_DWORD *)(*(void *)(this + 16) + 12);
    do
    {
      *unsigned int v3 = 0;
      v3 += 5;
      v2 -= 20;
    }
    while (v2);
  }
  return this;
}

uint64_t llvm::mca::RegisterFile::onInstructionExecuted(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = v3 + 136 * v2;
    do
    {
      if (*(unsigned char *)(v3 + 22)) {
        break;
      }
      unsigned int v5 = *(unsigned __int16 *)(v3 + 12);
      if (*(_WORD *)(v3 + 12))
      {
        uint64_t v6 = *(void *)(result + 112);
        int v7 = *(unsigned __int16 *)(v6 + 40 * *(unsigned __int16 *)(v3 + 12) + 32);
        if (v7 != v5 && v7 != 0) {
          unsigned int v5 = *(unsigned __int16 *)(v6 + 40 * *(unsigned __int16 *)(v3 + 12) + 32);
        }
        uint64_t v9 = v6 + 40 * v5;
        if (*(void *)(v9 + 16) == v3) {
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(result + 152);
        }
        unsigned int v10 = *(uint64_t **)(result + 8);
        uint64_t v11 = v10[6];
        uint64_t v12 = *v10;
        uint64_t v13 = *(unsigned int *)(v12 + 24 * v5 + 4);
        if (*(_WORD *)(v11 + 2 * v13))
        {
          unsigned __int16 v14 = *(_WORD *)(v11 + 2 * v13) + v5;
          uint64_t v15 = (unsigned __int16 *)(v11 + 2 * v13 + 2);
          do
          {
            uint64_t v16 = v6 + 40 * v14;
            if (*(void *)(v16 + 16) == v3) {
              *(_DWORD *)(v16 + 4) = *(_DWORD *)(result + 152);
            }
            int v17 = *v15++;
            v14 += v17;
          }
          while (v17);
        }
        if (*(unsigned char *)(v3 + 20))
        {
          uint64_t v18 = *(unsigned int *)(v12 + 24 * v5 + 8);
          if (*(_WORD *)(v11 + 2 * v18))
          {
            unsigned __int16 v19 = *(_WORD *)(v11 + 2 * v18) + v5;
            int v20 = (unsigned __int16 *)(v11 + 2 * v18 + 2);
            do
            {
              uint64_t v21 = v6 + 40 * v19;
              if (*(void *)(v21 + 16) == v3) {
                *(_DWORD *)(v21 + 4) = *(_DWORD *)(result + 152);
              }
              int v22 = *v20++;
              v19 += v22;
            }
            while (v22);
          }
        }
      }
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::allocatePhysRegs(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  uint64_t v4 = *a2;
  unsigned int v3 = a2[1];
  uint64_t v5 = *(void *)(result + 16);
  if (v4)
  {
    *(_DWORD *)(v5 + 20 * v4 + 4) += v3;
    a3[v4] += v3;
  }
  *(_DWORD *)(v5 + 4) += v3;
  *a3 += v3;
  return result;
}

uint64_t llvm::mca::RegisterFile::freePhysRegs(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  uint64_t v4 = *a2;
  unsigned int v3 = a2[1];
  uint64_t v5 = *(void *)(result + 16);
  if (v4)
  {
    *(_DWORD *)(v5 + 20 * v4 + 4) -= v3;
    a3[v4] += v3;
  }
  *(_DWORD *)(v5 + 4) -= v3;
  *a3 += v3;
  return result;
}

uint64_t *llvm::mca::RegisterFile::addRegisterWrite(uint64_t *result, long long *a2, _DWORD *a3)
{
  uint64_t v3 = *((void *)a2 + 2);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 12);
  if (!*(_WORD *)(v3 + 12)) {
    return result;
  }
  int v7 = result;
  int v8 = *(unsigned __int8 *)(v3 + 21);
  int v9 = *(unsigned __int8 *)(v3 + 22);
  uint64_t v10 = result[14];
  uint64_t v11 = v10 + 40 * *(unsigned __int16 *)(v3 + 12);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v11 + 24);
  unsigned int v12 = *(unsigned __int16 *)(v11 + 32);
  if (*(_WORD *)(v11 + 32)) {
    BOOL v13 = v12 == v4;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    BOOL v54 = (v9 | v8) == 0;
    unsigned int v12 = v4;
  }
  else if (*(unsigned char *)(v3 + 20))
  {
    BOOL v54 = (v9 | v8) == 0;
    unsigned int v4 = *(unsigned __int16 *)(v11 + 32);
  }
  else
  {
    uint64_t v14 = v10 + 40 * *(unsigned __int16 *)(v11 + 32);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15 && (int v16 = *(_DWORD *)v14, v16 != *(_DWORD *)a2))
    {
      int v44 = *(_DWORD *)(v15 + 8);
      if (v44 == -512)
      {
        *(void *)(v15 + 32) = v3;
      }
      else
      {
        *(_WORD *)(v3 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_WORD *)(v15 + 12);
        int v53 = v44 & ~(v44 >> 31);
        *(_DWORD *)(v3 + 52) = v53;
        *(_DWORD *)(v3 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v53;
        *(_DWORD *)(v3 + 44) = v16;
        uint64_t v15 = 0;
      }
      BOOL v54 = 0;
      *(void *)(v3 + 24) = v15;
    }
    else
    {
      BOOL v54 = 0;
    }
  }
  uint64_t result = sub_1CD6BFBEC(result + 17, v4, v8 != 0);
  int v17 = (void *)v7[1];
  uint64_t v18 = v17[6];
  uint64_t v19 = *(unsigned int *)(*v17 + 24 * v4 + 4);
  if (*(_WORD *)(v18 + 2 * v19))
  {
    unsigned int v20 = *(unsigned __int16 *)(v18 + 2 * v19) + v4;
    uint64_t v21 = (unsigned __int16 *)(v18 + 2 * v19 + 2);
    do
    {
      uint64_t result = sub_1CD6BFBEC(v7 + 17, (unsigned __int16)v20, v8 != 0);
      int v22 = *v21++;
      v20 += v22;
    }
    while (v22);
  }
  if (!v9)
  {
    uint64_t v23 = v7[14];
    uint64_t v24 = v23 + 40 * v12;
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25 && *(_DWORD *)v24 == *(_DWORD *)a2 && *(_DWORD *)(*(void *)v25 + 4) > *(_DWORD *)(*(void *)v3 + 4))
    {
      if (v54)
      {
        uint64_t v26 = v23 + 40 * v12;
        uint64_t v28 = *(unsigned int *)(v26 + 24);
        int v27 = *(_DWORD *)(v26 + 28);
        uint64_t v29 = v7[2];
        if (v28)
        {
          *(_DWORD *)(v29 + 20 * v28 + 4) += v27;
          a3[v28] += v27;
        }
        *(_DWORD *)(v29 + 4) += v27;
        *a3 += v27;
      }
      return result;
    }
    long long v30 = *a2;
    *(void *)(v24 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v24 = v30;
    uint64_t v31 = v7[14];
    *(_WORD *)(v31 + 40 * v12 + 34) = 0;
    unsigned int v32 = (void *)v7[1];
    uint64_t v33 = v32[6];
    uint64_t v34 = *(unsigned int *)(*v32 + 24 * v12 + 4);
    if (*(_WORD *)(v33 + 2 * v34))
    {
      unsigned int v35 = *(unsigned __int16 *)(v33 + 2 * v34) + v12;
      uint64_t v36 = (unsigned __int16 *)(v33 + 2 * v34 + 2);
      do
      {
        uint64_t v37 = v31 + 40 * (unsigned __int16)v35;
        long long v38 = *a2;
        *(void *)(v37 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v37 = v38;
        uint64_t v31 = v7[14];
        *(_WORD *)(v31 + 40 * (unsigned __int16)v35 + 34) = 0;
        int v39 = *v36++;
        v35 += v39;
      }
      while (v39);
    }
    if (v54)
    {
      uint64_t v40 = v31 + 40 * v12;
      uint64_t v42 = *(unsigned int *)(v40 + 24);
      int v41 = *(_DWORD *)(v40 + 28);
      uint64_t v43 = v7[2];
      if (v42)
      {
        *(_DWORD *)(v43 + 20 * v42 + 4) += v41;
        a3[v42] += v41;
      }
      *(_DWORD *)(v43 + 4) += v41;
      *a3 += v41;
    }
  }
  if (*(unsigned char *)(v3 + 20))
  {
    int v45 = (void *)v7[1];
    uint64_t v46 = v45[6];
    uint64_t v47 = *(unsigned int *)(*v45 + 24 * v12 + 8);
    if (*(_WORD *)(v46 + 2 * v47))
    {
      unsigned __int16 v48 = *(_WORD *)(v46 + 2 * v47) + v12;
      int v49 = (unsigned __int16 *)(v46 + 2 * v47 + 2);
      do
      {
        if (!v9)
        {
          uint64_t v50 = v7[14] + 40 * v48;
          long long v51 = *a2;
          *(void *)(v50 + 16) = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v50 = v51;
          *(_WORD *)(v7[14] + 40 * v48 + 34) = 0;
        }
        uint64_t result = sub_1CD6BFBEC(v7 + 17, v48, v8 != 0);
        int v52 = *v49++;
        v48 += v52;
      }
      while (v52);
    }
  }
  return result;
}

unint64_t llvm::mca::RegisterFile::removeRegisterWrite(unint64_t result, uint64_t *a2, _DWORD *a3)
{
  if (*((unsigned char *)a2 + 22)) {
    return result;
  }
  int v3 = *((unsigned __int16 *)a2 + 6);
  if (!*((_WORD *)a2 + 6)) {
    return result;
  }
  uint64_t v4 = *(void *)(result + 112);
  unsigned int v5 = *(unsigned __int16 *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
  if (*(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32)) {
    BOOL v6 = v5 == v3;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unsigned int v5 = *((unsigned __int16 *)a2 + 6);
    __int16 v7 = *((_WORD *)a2 + 6);
    __int16 v8 = v7;
    if (!*((unsigned char *)a2 + 21)) {
      goto LABEL_13;
    }
  }
  else if (*((unsigned char *)a2 + 21))
  {
    __int16 v8 = *(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
  }
  else
  {
    __int16 v7 = *(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
    __int16 v8 = v7;
    if (*((unsigned char *)a2 + 20))
    {
LABEL_13:
      uint64_t v9 = v4 + 40 * v5;
      uint64_t v11 = *(unsigned int *)(v9 + 24);
      int v10 = *(_DWORD *)(v9 + 28);
      uint64_t v12 = *(void *)(result + 16);
      if (v11)
      {
        *(_DWORD *)(v12 + 20 * v11 + 4) -= v10;
        a3[v11] += v10;
      }
      *(_DWORD *)(v12 + 4) -= v10;
      *a3 += v10;
      __int16 v8 = v7;
    }
  }
  uint64_t v13 = v4 + 40 * v5;
  if (*(uint64_t **)(v13 + 16) == a2)
  {
    *(_WORD *)(v13 + 12) = v3;
    *(_DWORD *)(v13 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(*a2 + 12);
    *(void *)(v13 + 16) = 0;
  }
  uint64_t v14 = *(uint64_t **)(result + 8);
  uint64_t v15 = v14[6];
  uint64_t v16 = *v14;
  uint64_t v17 = *(unsigned int *)(v16 + 24 * v5 + 4);
  if (*(_WORD *)(v15 + 2 * v17))
  {
    unsigned __int16 v18 = *(_WORD *)(v15 + 2 * v17) + v8;
    uint64_t v19 = *a2;
    unsigned int v20 = (unsigned __int16 *)(v15 + 2 * v17 + 2);
    do
    {
      uint64_t v21 = v4 + 40 * v18;
      if (*(uint64_t **)(v21 + 16) == a2)
      {
        *(_WORD *)(v21 + 12) = v3;
        *(_DWORD *)(v21 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(v19 + 12);
        *(void *)(v21 + 16) = 0;
      }
      unsigned int v22 = *v20++;
      uint64_t result = v22;
      v18 += v22;
    }
    while (v22);
  }
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v23 = *(unsigned int *)(v16 + 24 * v5 + 8);
    if (*(_WORD *)(v15 + 2 * v23))
    {
      unsigned __int16 v24 = *(_WORD *)(v15 + 2 * v23) + v8;
      uint64_t v25 = *a2;
      uint64_t v26 = (unsigned __int16 *)(v15 + 2 * v23 + 2);
      do
      {
        uint64_t v27 = v4 + 40 * v24;
        if (*(uint64_t **)(v27 + 16) == a2)
        {
          *(_WORD *)(v27 + 12) = v3;
          *(_DWORD *)(v27 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(v25 + 12);
          *(void *)(v27 + 16) = 0;
        }
        int v28 = *v26++;
        v24 += v28;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::canEliminateMove(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4 = *(unsigned __int16 *)(a3 + 8);
  uint64_t v5 = *(void *)(a1 + 112);
  BOOL v6 = *(_DWORD *)(v5 + 40 * v4 + 24) == a4 && *(_DWORD *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 24) == a4;
  if (v6
    && *(unsigned char *)(v5 + 40 * *(unsigned __int16 *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32) + 36)
    && (*(_WORD *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32)
      ? (BOOL v7 = *(unsigned __int16 *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32) == *(unsigned __int16 *)(a2 + 12))
      : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = *(unsigned char *)(a2 + 20) == 0) : (BOOL v8 = 0),
        !v8))
  {
    uint64_t v9 = (void *)(a1 + 136);
    if (*(_DWORD *)(a1 + 144) >= 0x41u) {
      uint64_t v9 = (void *)(*v9 + ((v4 >> 3) & 0x1FF8));
    }
    char v10 = (*(unsigned char *)(*(void *)(a1 + 16) + 20 * a4 + 16) == 0) | (*v9 >> v4);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t llvm::mca::RegisterFile::tryEliminateMoveOrSwap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a3 == a5 && (unint64_t)(a3 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v10 = *(void *)(a1 + 112);
    unsigned int v11 = *(_DWORD *)(v10 + 40 * *(unsigned __int16 *)(a2 + 12) + 24);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(unsigned int *)(v12 + 20 * v11 + 8);
    if (v13 && a3 + (unint64_t)*(unsigned int *)(v12 + 20 * v11 + 12) > v13)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = a2 + 136 * a3 - 136;
      uint64_t v15 = -1;
      uint64_t v16 = a4;
      while (a3 != ++v15)
      {
        uint64_t v17 = v16 + 48;
        uint64_t v18 = v14 - 136;
        char canEliminateMove = llvm::mca::RegisterFile::canEliminateMove(a1, v14, v16, v11);
        uint64_t v14 = v18;
        uint64_t v16 = v17;
        if ((canEliminateMove & 1) == 0) {
          return 0;
        }
      }
      uint64_t result = 1;
      if (a3)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(uint64_t **)(a1 + 8);
        uint64_t v22 = v21[6];
        uint64_t v23 = *v21;
        unsigned int v24 = *(_DWORD *)(a1 + 144);
        do
        {
          uint64_t v25 = v20 + 1;
          uint64_t v26 = a3 - (v20 + 1);
          unint64_t v27 = *(unsigned __int16 *)(a4 + 48 * v20 + 8);
          if (*(_WORD *)(v10 + 40 * v27 + 32)) {
            unsigned int v28 = *(unsigned __int16 *)(v10 + 40 * *(unsigned __int16 *)(a4 + 48 * v20 + 8) + 32);
          }
          else {
            unsigned int v28 = v27;
          }
          unsigned int v29 = *(unsigned __int16 *)(v10 + 40 * *(unsigned __int16 *)(a2 + 136 * v26 + 12) + 32);
          if (!*(_WORD *)(v10 + 40 * *(unsigned __int16 *)(a2 + 136 * v26 + 12) + 32)) {
            unsigned int v29 = *(unsigned __int16 *)(a2 + 136 * v26 + 12);
          }
          __int16 v30 = *(_WORD *)(v10 + 40 * v28 + 34);
          if (!v30) {
            __int16 v30 = v28;
          }
          *(_WORD *)(v10 + 40 * v29 + 34) = v30;
          uint64_t v31 = *(unsigned int *)(v23 + 24 * v29 + 4);
          if (*(_WORD *)(v22 + 2 * v31))
          {
            unsigned int v32 = *(unsigned __int16 *)(v22 + 2 * v31) + v29;
            uint64_t v33 = (unsigned __int16 *)(v22 + 2 + 2 * v31);
            do
            {
              *(_WORD *)(v10 + 40 * (unsigned __int16)v32 + 34) = v30;
              int v34 = *v33++;
              v32 += v34;
            }
            while (v34);
          }
          unsigned int v35 = (void *)(a1 + 136);
          if (v24 >= 0x41) {
            unsigned int v35 = (void *)(*(void *)(a1 + 136) + ((v27 >> 3) & 0x1FF8));
          }
          if ((*v35 >> v27))
          {
            *(unsigned char *)(a2 + 136 * v26 + 2llvm::StringTableBuilder::finalizeStringTable(this, 1) = 1;
            *(unsigned char *)(a4 + 48 * v20 + 4llvm::StringTableBuilder::finalizeStringTable(this, 1) = 1;
          }
          uint64_t v36 = a2 + 136 * v26;
          *(_DWORD *)(v36 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
          *(unsigned char *)(v36 + 22) = 1;
          ++*(_DWORD *)(v12 + 20 * v11 + 12);
          uint64_t v20 = v25;
        }
        while (a3 != v25);
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::mca::WriteRef::getWriteBackCycle(llvm::mca::WriteRef *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t llvm::mca::RegisterFile::getElapsedCyclesFromWriteBack(llvm::mca::RegisterFile *this, const llvm::mca::WriteRef *a2)
{
  return (*((_DWORD *)this + 38) - *((_DWORD *)a2 + 1));
}

void llvm::mca::RegisterFile::collectWrites(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v61 = *(void *)a3;
  unsigned int v8 = *(_DWORD *)(*(void *)a3 + 12);
  uint64_t v9 = *(void *)(*(void *)(a2 + 160) + 40);
  uint64_t v10 = *(void *)(a1 + 112);
  if (*(_WORD *)(v10 + 40 * a3[4] + 34)) {
    unsigned int v11 = *(unsigned __int16 *)(v10 + 40 * a3[4] + 34);
  }
  else {
    unsigned int v11 = a3[4];
  }
  unint64_t v12 = v10 + 40 * v11;
  uint64_t v13 = a4;
  if (*(void *)(v12 + 16)) {
    goto LABEL_5;
  }
  if (*(_DWORD *)v12 != -1)
  {
    uint64_t v43 = v9 + 24 * v8;
    uint64_t v44 = *(unsigned __int16 *)(v43 + 20);
    if (*(_WORD *)(v43 + 20))
    {
      unsigned int v45 = *(_DWORD *)(v61 + 4);
      uint64_t v46 = (_DWORD *)(*(void *)(a2 + 152) + 12 * *(unsigned __int16 *)(v43 + 18) + 8);
      uint64_t v47 = 12 * v44;
      while (1)
      {
        unsigned int v48 = *(v46 - 2);
        if (v48 >= v45)
        {
          if (v48 > v45) {
            goto LABEL_6;
          }
          int v49 = *(v46 - 1);
          if (!v49 || v49 == *(_DWORD *)(v12 + 8)) {
            break;
          }
        }
        v46 += 3;
        v47 -= 12;
        if (!v47) {
          goto LABEL_6;
        }
      }
      if ((*v46 & 0x80000000) != 0)
      {
        uint64_t v13 = a5;
        if (*(_DWORD *)(a1 + 152) - *(_DWORD *)(v12 + 4) < -*v46)
        {
LABEL_5:
          unint64_t v14 = sub_1CD483108(v13, v12);
          uint64_t v15 = *(void *)v13 + 24 * *(unsigned int *)(v13 + 8);
          long long v16 = *(_OWORD *)v14;
          *(void *)(v15 + 16) = *(void *)(v14 + 16);
          *(_OWORD *)uint64_t v15 = v16;
          ++*(_DWORD *)(v13 + 8);
        }
      }
    }
  }
LABEL_6:
  uint64_t v17 = (_WORD *)(*(void *)(*(void *)(a1 + 8) + 48)
                + 2 * *(unsigned int *)(**(void **)(a1 + 8) + 24 * v11 + 4));
  if (*v17)
  {
    unsigned __int16 v18 = *v17 + v11;
    uint64_t v19 = v9 + 24 * v8;
    uint64_t v20 = (unsigned __int16 *)(v19 + 18);
    uint64_t v21 = (_WORD *)(v19 + 20);
    do
    {
      unint64_t v22 = *(void *)(a1 + 112) + 40 * v18;
      uint64_t v23 = a4;
      if (*(void *)(v22 + 16)) {
        goto LABEL_9;
      }
      if (*(_DWORD *)v22 != -1 && *v21)
      {
        unsigned int v28 = *(_DWORD *)(v61 + 4);
        unsigned int v29 = (_DWORD *)(*(void *)(a2 + 152) + 12 * *v20 + 8);
        uint64_t v30 = 12 * (unsigned __int16)*v21;
        while (1)
        {
          unsigned int v31 = *(v29 - 2);
          if (v31 >= v28)
          {
            if (v31 > v28) {
              goto LABEL_10;
            }
            int v32 = *(v29 - 1);
            if (!v32 || v32 == *(_DWORD *)(v22 + 8)) {
              break;
            }
          }
          v29 += 3;
          v30 -= 12;
          if (!v30) {
            goto LABEL_10;
          }
        }
        if ((*v29 & 0x80000000) != 0)
        {
          uint64_t v23 = a5;
          if (*(_DWORD *)(a1 + 152) - *(_DWORD *)(v22 + 4) < -*v29)
          {
LABEL_9:
            unint64_t v24 = sub_1CD483108(v23, v22);
            uint64_t v25 = *(void *)v23 + 24 * *(unsigned int *)(v23 + 8);
            long long v26 = *(_OWORD *)v24;
            *(void *)(v25 + 16) = *(void *)(v24 + 16);
            *(_OWORD *)uint64_t v25 = v26;
            ++*(_DWORD *)(v23 + 8);
          }
        }
      }
LABEL_10:
      int v27 = (unsigned __int16)v17[1];
      ++v17;
      v18 += v27;
    }
    while (v27);
  }
  unint64_t v34 = *(unsigned int *)(a4 + 8);
  if (v34 > 1)
  {
    sub_1CCBF81F0(*(void *)a4, *(void *)a4 + 24 * v34, 126 - 2 * __clz(v34), 1);
    unint64_t v35 = *(void *)a4;
    unsigned int v36 = *(_DWORD *)(a4 + 8);
    uint64_t v37 = *(void *)a4 + 24 * v36;
    unint64_t v38 = *(void *)a4;
    if (v36)
    {
      if (v36 == 1)
      {
LABEL_60:
        unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v35) >> 3);
        if (v56 != v36)
        {
          unsigned int v57 = v36;
          if (v56 >= v36)
          {
            if (v56 > *(unsigned int *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v36 != v56)
            {
              unint64_t v58 = v35 + 24 * v56;
              unint64_t v59 = v35 + 24 * v57;
              do
              {
                *(void *)unint64_t v59 = 0xFFFFFFFFLL;
                *(_DWORD *)(v59 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
                *(_WORD *)(v59 + 12) = 0;
                *(void *)(v59 + 16) = 0;
                v59 += 24;
              }
              while (v59 != v58);
            }
          }
          *(_DWORD *)(a4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v56;
        }
        return;
      }
      uint64_t v39 = 0;
      while (1)
      {
        uint64_t v40 = *(void *)(v35 + v39 + 16);
        if (v40)
        {
          uint64_t v41 = *(void *)(v35 + v39 + 40);
          if (v41 && v40 == v41) {
            break;
          }
        }
        v39 += 24;
        if (24 * v36 - 24 == v39) {
          goto LABEL_60;
        }
      }
      unint64_t v38 = v35 + v39;
    }
    if (v38 != v37)
    {
      unint64_t v51 = v38 + 48;
      if (v38 + 48 != v37)
      {
        do
        {
          uint64_t v52 = *(void *)(v38 + 16);
          if (!v52 || ((uint64_t v53 = *(void *)(v51 + 16)) != 0 ? (v54 = v52 == v53) : (v54 = 0), !v54))
          {
            long long v55 = *(_OWORD *)v51;
            *(void *)(v38 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(v51 + 16);
            *(_OWORD *)(v38 + 24) = v55;
            v38 += 24;
          }
          v51 += 24;
        }
        while (v51 != v37);
        unint64_t v35 = *(void *)a4;
        unsigned int v36 = *(_DWORD *)(a4 + 8);
      }
      uint64_t v37 = v38 + 24;
    }
    goto LABEL_60;
  }
}

unint64_t llvm::mca::RegisterFile::checkRAWHazards(llvm::mca::RegisterFile *this, const llvm::MCSubtargetInfo *a2, const llvm::mca::ReadState *a3)
{
  v47[12] = *MEMORY[0x1E4F143B8];
  unsigned int v45 = v47;
  uint64_t v46 = 0x400000000;
  uint64_t v42 = v44;
  uint64_t v43 = 0x400000000;
  uint64_t v5 = *(void *)a3;
  unsigned int v6 = *(_DWORD *)(*(void *)a3 + 12);
  uint64_t v7 = *(void *)(*((void *)a2 + 20) + 40);
  llvm::mca::RegisterFile::collectWrites((uint64_t)this, (uint64_t)a2, (unsigned __int16 *)a3, (uint64_t)&v45, (uint64_t)&v42);
  unsigned int v8 = v45;
  if (v46)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    unsigned int v11 = *(_DWORD *)(v5 + 4);
    uint64_t v12 = v7 + 24 * v6;
    unsigned int v13 = *(unsigned __int16 *)(v12 + 18);
    uint64_t v14 = *(unsigned __int16 *)(v12 + 20);
    uint64_t v15 = v45;
    while (1)
    {
      uint64_t v16 = v15[2];
      if (v14)
      {
        uint64_t v17 = 12 * v14;
        unsigned __int16 v18 = (int *)(*((void *)a2 + 19) + 12 * v13 + 8);
        while (1)
        {
          unsigned int v19 = *(v18 - 2);
          if (v19 >= v11)
          {
            if (v19 > v11) {
              goto LABEL_12;
            }
            int v20 = *(v18 - 1);
            if (!v20 || v20 == *(_DWORD *)(*(void *)v16 + 12)) {
              break;
            }
          }
          v18 += 3;
          v17 -= 12;
          if (!v17) {
            goto LABEL_12;
          }
        }
        int v22 = *v18;
      }
      else
      {
LABEL_12:
        int v22 = 0;
      }
      int v23 = *(_DWORD *)(v16 + 8);
      if (v23 != -512) {
        break;
      }
      if (!v9)
      {
        uint64_t v24 = 4294966784;
LABEL_21:
        unsigned int v9 = *(unsigned __int16 *)(v16 + 12);
        uint64_t v10 = v24;
      }
LABEL_22:
      v15 += 3;
      if (v15 == (void *)((char *)v45 + 24 * v46)) {
        goto LABEL_26;
      }
    }
    uint64_t v24 = (v23 - v22);
    if ((int)v24 < 1 || (int)v10 >= (int)v24) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v10 = 0;
  unsigned int v9 = 0;
LABEL_26:
  LODWORD(v46) = 0;
  if (v43)
  {
    unsigned int v26 = *(_DWORD *)(v5 + 4);
    uint64_t v27 = v7 + 24 * v6;
    unsigned int v28 = *(unsigned __int16 *)(v27 + 18);
    uint64_t v29 = *(unsigned __int16 *)(v27 + 20);
    for (uint64_t i = (char *)v42; i != (char *)v42 + 24 * v43; i += 24)
    {
      unsigned int v31 = (unsigned __int16 *)*((void *)i + 2);
      if (v31)
      {
        int v32 = (int *)(*(void *)v31 + 12);
        if (v29) {
          goto LABEL_32;
        }
      }
      else
      {
        int v32 = (int *)(i + 8);
        if (v29)
        {
LABEL_32:
          int v33 = *v32;
          uint64_t v34 = 12 * v29;
          unint64_t v35 = (int *)(*((void *)a2 + 19) + 12 * v28 + 8);
          while (1)
          {
            unsigned int v36 = *(v35 - 2);
            if (v36 >= v26)
            {
              if (v36 > v26) {
                goto LABEL_40;
              }
              int v37 = *(v35 - 1);
              if (!v37 || v37 == v33) {
                break;
              }
            }
            v35 += 3;
            v34 -= 12;
            if (!v34) {
              goto LABEL_40;
            }
          }
          int v39 = *v35;
          goto LABEL_41;
        }
      }
LABEL_40:
      int v39 = 0;
LABEL_41:
      uint64_t v40 = (*((_DWORD *)i + 1) - (v39 + *((_DWORD *)this + 38)));
      if ((int)v10 < (int)v40)
      {
        if (!v31) {
          unsigned int v31 = (unsigned __int16 *)i;
        }
        unsigned int v9 = v31[6];
        uint64_t v10 = v40;
      }
    }
  }
  if (v42 != v44)
  {
    free(v42);
    unsigned int v8 = v45;
  }
  if (v8 != v47) {
    free(v8);
  }
  return v9 | (unint64_t)(v10 << 32);
}

void llvm::mca::RegisterFile::addRegisterRead(llvm::mca::RegisterFile *this, llvm::mca::ReadState *a2, const llvm::MCSubtargetInfo *a3)
{
  v60[12] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *((unsigned __int16 *)a2 + 4);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(*((void *)this + 14) + 40 * v3 + 24);
  if (!*((unsigned char *)a2 + 42))
  {
    uint64_t v7 = (void *)((char *)this + 136);
    if (*((_DWORD *)this + 36) >= 0x41u) {
      uint64_t v7 = (void *)(*v7 + ((v3 >> 3) & 0x1FF8));
    }
    if ((*v7 >> v3)) {
      *((unsigned char *)a2 + 4llvm::StringTableBuilder::finalizeStringTable(this, 1) = 1;
    }
    unint64_t v58 = v60;
    uint64_t v59 = 0x400000000;
    long long v55 = v57;
    uint64_t v56 = 0x400000000;
    llvm::mca::RegisterFile::collectWrites((uint64_t)this, (uint64_t)a3, (unsigned __int16 *)a2, (uint64_t)&v58, (uint64_t)&v55);
    unsigned int v8 = v59;
    unsigned int v9 = v56;
    BOOL v27 = v56 + v59 == 0;
    *((_DWORD *)a2 + 4) = v56 + v59;
    char v10 = v27;
    *((unsigned char *)a2 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v10;
    uint64_t v11 = *(void *)a2;
    unsigned int v12 = *(_DWORD *)(*(void *)a2 + 12);
    uint64_t v13 = *(void *)(*((void *)a3 + 20) + 40);
    if (v8)
    {
      uint64_t v14 = (char *)v58;
      uint64_t v15 = (char *)v58 + 24 * v8;
      unsigned int v54 = *(_DWORD *)(*(void *)a2 + 12);
      uint64_t v16 = v13 + 24 * v12;
      uint64_t v17 = (unsigned __int16 *)(v16 + 18);
      unsigned __int16 v18 = (_WORD *)(v16 + 20);
      do
      {
        unsigned int v19 = (void *)*((void *)v14 + 2);
        if (v19) {
          int v20 = (int *)(*v19 + 12);
        }
        else {
          int v20 = (int *)(v14 + 8);
        }
        if (*v18)
        {
          int v21 = *v20;
          unsigned int v22 = *(_DWORD *)(v11 + 4);
          int v23 = (unsigned int *)(*((void *)a3 + 19) + 12 * *v17 + 8);
          uint64_t v24 = 12 * (unsigned __int16)*v18;
          while (1)
          {
            unsigned int v25 = *(v23 - 2);
            if (v25 >= v22)
            {
              if (v25 > v22) {
                goto LABEL_23;
              }
              int v26 = *(v23 - 1);
              BOOL v27 = !v26 || v26 == v21;
              if (v27) {
                break;
              }
            }
            v23 += 3;
            v24 -= 12;
            if (!v24) {
              goto LABEL_23;
            }
          }
          unsigned int v28 = *v23;
        }
        else
        {
LABEL_23:
          unsigned int v28 = 0;
        }
        int v29 = *(_DWORD *)v14;
        v14 += 24;
        llvm::mca::WriteState::addUser((uint64_t)v19, v29, a2, v28);
      }
      while (v14 != v15);
      unsigned int v9 = v56;
      unsigned int v12 = v54;
    }
    uint64_t v30 = v55;
    if (v9)
    {
      unsigned int v31 = (char *)v55 + 24 * v9;
      uint64_t v32 = v13 + 24 * v12;
      unsigned int v33 = *(_DWORD *)(v11 + 4);
      unsigned int v34 = *(unsigned __int16 *)(v32 + 18);
      uint64_t v35 = *(unsigned __int16 *)(v32 + 20);
      int v36 = *((_DWORD *)this + 38);
      int v37 = *((_DWORD *)a2 + 4);
      unsigned int v38 = *((_DWORD *)a2 + 6);
      uint64_t v39 = *((void *)a3 + 19) + 12 * v34 + 8;
      for (uint64_t i = (char *)v55; i != v31; i += 24)
      {
        uint64_t v41 = (_WORD *)*((void *)i + 2);
        if (v41)
        {
          uint64_t v42 = (int *)(*(void *)v41 + 12);
          if (v35) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v42 = (int *)(i + 8);
          if (v35)
          {
LABEL_33:
            int v43 = *v42;
            uint64_t v44 = 12 * v35;
            unsigned int v45 = (int *)v39;
            while (1)
            {
              unsigned int v46 = *(v45 - 2);
              if (v46 >= v33)
              {
                if (v46 > v33) {
                  goto LABEL_41;
                }
                int v47 = *(v45 - 1);
                if (!v47 || v47 == v43) {
                  break;
                }
              }
              v45 += 3;
              v44 -= 12;
              if (!v44) {
                goto LABEL_41;
              }
            }
            int v49 = *v45;
            goto LABEL_42;
          }
        }
LABEL_41:
        int v49 = 0;
LABEL_42:
        int v50 = *(_DWORD *)i;
        int v51 = *((_DWORD *)i + 1);
        if (!v41) {
          uint64_t v41 = i;
        }
        __int16 v52 = v41[6];
        unsigned int v53 = v51 - (v36 + v49);
        *((_DWORD *)a2 + 4) = --v37;
        if (v38 < v53)
        {
          *((_WORD *)a2 + 16) = v52;
          *((_DWORD *)a2 + 9) = v53;
          unsigned int v38 = v51 - (v36 + v49);
          *((_DWORD *)a2 + 6) = v53;
          *((_DWORD *)a2 + 7) = v50;
        }
        if (!v37)
        {
          *((_DWORD *)a2 + 5) = v38;
          *((unsigned char *)a2 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v38 == 0;
        }
      }
    }
    if (v30 != v57) {
      free(v30);
    }
    if (v58 != v60) {
      free(v58);
    }
  }
}

uint64_t llvm::mca::RegisterFile::isAvailable(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if (v6 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6) {
    bzero(v21, 4 * v6);
  }
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 112);
    int v8 = v21[0];
    uint64_t v9 = 2 * a3;
    do
    {
      unsigned int v10 = *a2;
      uint64_t v11 = *(unsigned int *)(v7 + 40 * *a2 + 24);
      if (v11) {
        v21[v11] += *(_DWORD *)(v7 + 40 * *a2 + 28);
      }
      v8 += *(_DWORD *)(v7 + 40 * v10 + 28);
      v21[0] = v8;
      ++a2;
      v9 -= 2;
    }
    while (v9);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  do
  {
    unsigned int v16 = v21[v14];
    if (v16)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      unsigned int v18 = *(_DWORD *)(v17 + v13);
      if (v18)
      {
        if (v18 < v16) {
          unsigned int v16 = *(_DWORD *)(v17 + v13);
        }
        if (v18 >= *(_DWORD *)(v17 + v13 + 4) + v16) {
          int v19 = 0;
        }
        else {
          int v19 = 1 << v14;
        }
        uint64_t v15 = v19 | v15;
      }
    }
    ++v14;
    v13 += 20;
  }
  while (v12 != v14);
  return v15;
}

uint64_t sub_1CCBF8028(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631D98;
  if (*(_DWORD *)(a1 + 144) >= 0x41u)
  {
    uint64_t v2 = *(void *)(a1 + 136);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
    }
  }
  unint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12llvm::StringTableBuilder::finalizeStringTable(this, 0) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 32)) {
    free(v4);
  }
  return a1;
}

void sub_1CCBF80B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631D98;
  if (*(_DWORD *)(a1 + 144) >= 0x41u)
  {
    uint64_t v2 = *(void *)(a1 + 136);
    if (v2) {
      MEMORY[0x1D25D9CB0](v2, 0x1000C8000313F17);
    }
  }
  unint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12llvm::StringTableBuilder::finalizeStringTable(this, 0) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 32)) {
    free(v4);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CCBF8160(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      abort();
    }
    uint64_t v5 = 5 * a2;
    uint64_t v6 = 40 * a2;
    uint64_t v7 = operator new(40 * a2);
    *a1 = v7;
    a1[1] = v7;
    int v8 = (char *)v7 + 8 * v5;
    a1[2] = v8;
    do
    {
      long long v9 = *(_OWORD *)(a3 + 16);
      *uint64_t v7 = *(_OWORD *)a3;
      v7[1] = v9;
      *((void *)v7 + 4) = *(void *)(a3 + 32);
      uint64_t v7 = (_OWORD *)((char *)v7 + 40);
      v6 -= 40;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_1CCBF81F0(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(void *)(a2 - 8) < *(void *)(v10 + 16))
                {
                  uint64_t v118 = *(void *)(v10 + 16);
                  long long v109 = *(_OWORD *)v10;
                  long long v47 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v47;
                  *(void *)(a2 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v118;
                  *(_OWORD *)(a2 - 24) = v109;
                }
                break;
              case 3:
                sub_1CCBF8AE8((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4:
                sub_1CCBF8E6C(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5:
                unsigned int v48 = (long long *)(v10 + 24);
                int v49 = (long long *)(v10 + 48);
                int v50 = (long long *)(v10 + 72);
                sub_1CCBF8E6C(v10, v10 + 24, v10 + 48, v10 + 72);
                if (*(void *)(a2 - 8) < *(void *)(v10 + 88))
                {
                  long long v51 = *v50;
                  uint64_t v52 = *(void *)(v10 + 88);
                  uint64_t v53 = *(void *)(a2 - 8);
                  *int v50 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v53;
                  *(void *)(a2 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v52;
                  *(_OWORD *)(a2 - 24) = v51;
                  if (*(void *)(v10 + 88) < *(void *)(v10 + 64))
                  {
                    uint64_t v54 = *(void *)(v10 + 64);
                    long long v55 = *v49;
                    *int v49 = *v50;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *int v50 = v55;
                    *(void *)(v10 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v54;
                    if (*(void *)(v10 + 64) < *(void *)(v10 + 40))
                    {
                      uint64_t v56 = *(void *)(v10 + 40);
                      long long v57 = *v48;
                      *unsigned int v48 = *v49;
                      *(void *)(v10 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(v10 + 64);
                      *int v49 = v57;
                      *(void *)(v10 + 64) = v56;
                      if (*(void *)(v10 + 40) < *(void *)(v10 + 16))
                      {
                        uint64_t v119 = *(void *)(v10 + 16);
                        long long v110 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v48;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *unsigned int v48 = v110;
                        *(void *)(v10 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v119;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v58 = (_OWORD *)(v10 + 24);
            BOOL v60 = v10 == a2 || v58 == (_OWORD *)a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                uint64_t v62 = (_OWORD *)v10;
                do
                {
                  unint64_t v63 = *((void *)v62 + 5);
                  unint64_t v64 = *((void *)v62 + 2);
                  uint64_t v62 = v58;
                  if (v63 < v64)
                  {
                    long long v111 = *v58;
                    uint64_t v65 = v61;
                    while (1)
                    {
                      uint64_t v66 = v10 + v65;
                      *(_OWORD *)(v66 + 24) = *(_OWORD *)(v10 + v65);
                      *(void *)(v66 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(v10 + v65 + 16);
                      if (!v65) {
                        break;
                      }
                      v65 -= 24;
                      if (v63 >= *(void *)(v66 - 8))
                      {
                        uint64_t v67 = v10 + v65 + 24;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v67 = v10;
LABEL_83:
                    *(_OWORD *)uint64_t v67 = v111;
                    *(void *)(v67 + 16) = v63;
                  }
                  unint64_t v58 = (_OWORD *)((char *)v62 + 24);
                  v61 += 24;
                }
                while ((_OWORD *)((char *)v62 + 24) != (_OWORD *)a2);
              }
            }
            else if (!v60)
            {
              do
              {
                unint64_t v99 = *(void *)(a1 + 40);
                unint64_t v100 = *(void *)(a1 + 16);
                a1 = (unint64_t)v58;
                if (v99 < v100)
                {
                  long long v114 = *v58;
                  uint64_t v101 = v58;
                  do
                  {
                    _OWORD *v101 = *(_OWORD *)((char *)v101 - 24);
                    *((void *)v101 + 2) = *((void *)v101 - 1);
                    unint64_t v102 = *((void *)v101 - 4);
                    uint64_t v101 = (_OWORD *)((char *)v101 - 24);
                  }
                  while (v99 < v102);
                  _OWORD *v101 = v114;
                  *((void *)v101 + 2) = v99;
                }
                unint64_t v58 = (_OWORD *)(a1 + 24);
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (unint64_t)(v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = v10 + 24 * v71;
                  if (2 * v70 + 2 < v12)
                  {
                    unint64_t v73 = *(void *)(v10 + 24 * v71 + 16);
                    unint64_t v74 = *(void *)(v72 + 40);
                    v72 += 24 * (v73 < v74);
                    if (v73 < v74) {
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  unint64_t v75 = *(void *)(v10 + 24 * v70 + 16);
                  if (*(void *)(v72 + 16) >= v75)
                  {
                    unint64_t v76 = v10 + 24 * v70;
                    long long v112 = *(_OWORD *)v76;
                    do
                    {
                      unint64_t v77 = v76;
                      unint64_t v76 = v72;
                      long long v78 = *(_OWORD *)v72;
                      *(void *)(v77 + 16) = *(void *)(v72 + 16);
                      *(_OWORD *)unint64_t v77 = v78;
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v79 = (2 * v71) | 1;
                      unint64_t v72 = v10 + 24 * v79;
                      uint64_t v80 = 2 * v71 + 2;
                      if (v80 < v12)
                      {
                        unint64_t v81 = *(void *)(v10 + 24 * v79 + 16);
                        unint64_t v82 = *(void *)(v72 + 40);
                        v72 += 24 * (v81 < v82);
                        if (v81 < v82) {
                          uint64_t v79 = v80;
                        }
                      }
                      uint64_t v71 = v79;
                    }
                    while (*(void *)(v72 + 16) >= v75);
                    *(_OWORD *)unint64_t v76 = v112;
                    *(void *)(v76 + 16) = v75;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              do
              {
                uint64_t v83 = 0;
                uint64_t v120 = *(void *)(v10 + 16);
                long long v113 = *(_OWORD *)v10;
                unint64_t v84 = v10;
                do
                {
                  uint64_t v85 = v83 + 1;
                  unint64_t v86 = v84 + 24 * (v83 + 1);
                  uint64_t v87 = (2 * v83) | 1;
                  uint64_t v88 = 2 * v83 + 2;
                  if (v88 < v12)
                  {
                    unint64_t v89 = *(void *)(v84 + 24 * v85 + 16);
                    unint64_t v90 = *(void *)(v86 + 40);
                    v86 += 24 * (v89 < v90);
                    if (v89 < v90) {
                      uint64_t v87 = v88;
                    }
                  }
                  long long v91 = *(_OWORD *)v86;
                  *(void *)(v84 + 16) = *(void *)(v86 + 16);
                  *(_OWORD *)unint64_t v84 = v91;
                  unint64_t v84 = v86;
                  uint64_t v83 = v87;
                }
                while (v87 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 24;
                if (v86 == a2)
                {
                  *(void *)(v86 + 16) = v120;
                  *(_OWORD *)unint64_t v86 = v113;
                }
                else
                {
                  long long v92 = *(_OWORD *)a2;
                  *(void *)(v86 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v86 = v92;
                  *(void *)(a2 + 16) = v120;
                  *(_OWORD *)a2 = v113;
                  uint64_t v93 = v86 - v10 + 24;
                  if (v93 >= 25)
                  {
                    unint64_t v94 = (v93 / 0x18uLL - 2) >> 1;
                    if (*(void *)(v10 + 24 * v94 + 16) < *(void *)(v86 + 16))
                    {
                      long long v105 = *(_OWORD *)v86;
                      unint64_t v95 = *(void *)(v86 + 16);
                      do
                      {
                        unint64_t v96 = v86;
                        unint64_t v86 = v10 + 24 * v94;
                        long long v97 = *(_OWORD *)v86;
                        *(void *)(v96 + 16) = *(void *)(v86 + 16);
                        *(_OWORD *)unint64_t v96 = v97;
                        if (!v94) {
                          break;
                        }
                        unint64_t v94 = (v94 - 1) >> 1;
                      }
                      while (*(void *)(v10 + 24 * v94 + 16) < v95);
                      *(_OWORD *)unint64_t v86 = v105;
                      *(void *)(v86 + 16) = v95;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 24 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CCBF8AE8((long long *)a1, (long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            unsigned int v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_1CCBF8AE8((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            uint64_t v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_1CCBF8AE8((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_1CCBF8AE8(v16, (long long *)v14, v17);
            uint64_t v115 = *(void *)(a1 + 16);
            long long v106 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v115;
            *(_OWORD *)unint64_t v14 = v106;
          }
          else
          {
            sub_1CCBF8AE8((long long *)(a1 + 24 * ((unint64_t)v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v19 = *(void *)(a1 + 16);
          if (*(void *)(a1 - 8) < v19) {
            goto LABEL_12;
          }
          long long v104 = *(_OWORD *)a1;
          if (v19 >= *(void *)(a2 - 8))
          {
            unint64_t v37 = a1 + 24;
            do
            {
              unint64_t v10 = v37;
              if (v37 >= a2) {
                break;
              }
              unint64_t v38 = *(void *)(v37 + 16);
              v37 += 24;
            }
            while (v19 >= v38);
          }
          else
          {
            unint64_t v35 = a1;
            do
            {
              unint64_t v10 = v35 + 24;
              unint64_t v36 = *(void *)(v35 + 40);
              v35 += 24;
            }
            while (v19 >= v36);
          }
          unint64_t v39 = a2;
          if (v10 < a2)
          {
            unint64_t v40 = a2;
            do
            {
              unint64_t v39 = v40 - 24;
              unint64_t v41 = *(void *)(v40 - 8);
              v40 -= 24;
            }
            while (v19 < v41);
          }
          while (v10 < v39)
          {
            uint64_t v117 = *(void *)(v10 + 16);
            long long v108 = *(_OWORD *)v10;
            long long v42 = *(_OWORD *)v39;
            *(void *)(v10 + 16) = *(void *)(v39 + 16);
            *(_OWORD *)unint64_t v10 = v42;
            *(void *)(v39 + 16) = v117;
            *(_OWORD *)unint64_t v39 = v108;
            do
            {
              unint64_t v43 = *(void *)(v10 + 40);
              v10 += 24;
            }
            while (v19 >= v43);
            do
            {
              unint64_t v44 = *(void *)(v39 - 8);
              v39 -= 24;
            }
            while (v19 < v44);
          }
          unsigned int v45 = (long long *)(v10 - 24);
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v46 = *v45;
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *unsigned int v45 = v104;
          *(void *)(v10 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v19;
        }
        unint64_t v19 = *(void *)(a1 + 16);
LABEL_12:
        uint64_t v20 = 0;
        long long v103 = *(_OWORD *)a1;
        do
        {
          unint64_t v21 = *(void *)(a1 + v20 + 40);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v26 = a2;
          while (v22 < v26)
          {
            unint64_t v24 = v26 - 24;
            unint64_t v27 = *(void *)(v26 - 8);
            v26 -= 24;
            if (v27 < v19) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = v26;
        }
        else
        {
          do
          {
            unint64_t v24 = v23 - 24;
            unint64_t v25 = *(void *)(v23 - 8);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
LABEL_22:
        unint64_t v10 = v22;
        if (v22 < v24)
        {
          unint64_t v28 = v24;
          do
          {
            uint64_t v116 = *(void *)(v10 + 16);
            long long v107 = *(_OWORD *)v10;
            long long v29 = *(_OWORD *)v28;
            *(void *)(v10 + 16) = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v10 = v29;
            *(void *)(v28 + 16) = v116;
            *(_OWORD *)unint64_t v28 = v107;
            do
            {
              unint64_t v30 = *(void *)(v10 + 40);
              v10 += 24;
            }
            while (v30 < v19);
            do
            {
              unint64_t v31 = *(void *)(v28 - 8);
              v28 -= 24;
            }
            while (v31 >= v19);
          }
          while (v10 < v28);
        }
        uint64_t v32 = (long long *)(v10 - 24);
        if (v10 - 24 != a1)
        {
          long long v33 = *v32;
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v33;
        }
        *uint64_t v32 = v103;
        *(void *)(v10 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v19;
        if (v22 >= v24) {
          break;
        }
LABEL_33:
        sub_1CCBF81F0(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = sub_1CCBF8BD8(a1, v10 - 24);
      if (sub_1CCBF8BD8(v10, a2)) {
        break;
      }
      if (!v34) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 24;
    if (!v34) {
      continue;
    }
    break;
  }
}

long long *sub_1CCBF8AE8(long long *result, long long *a2, long long *a3)
{
  unint64_t v3 = *((void *)a2 + 2);
  unint64_t v4 = *((void *)a3 + 2);
  if (v3 >= *((void *)result + 2))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if (*((void *)a2 + 2) < *((void *)result + 2))
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *uint64_t result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if (*((void *)a3 + 2) >= *((void *)a2 + 2)) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *uint64_t result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1CCBF8BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 8) < *(void *)(a1 + 16))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6;
      }
      return result;
    case 3uLL:
      sub_1CCBF8AE8((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1CCBF8E6C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v17 = (long long *)(a1 + 24);
      uint64_t v18 = (long long *)(a1 + 48);
      unint64_t v19 = (long long *)(a1 + 72);
      sub_1CCBF8E6C(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(void *)(a2 - 8) < *(void *)(a1 + 88))
      {
        uint64_t v20 = *(void *)(a1 + 88);
        long long v21 = *v19;
        uint64_t v22 = *(void *)(a2 - 8);
        *unint64_t v19 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v22;
        *(_OWORD *)(a2 - 24) = v21;
        *(void *)(a2 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v20;
        if (*(void *)(a1 + 88) < *(void *)(a1 + 64))
        {
          uint64_t v23 = *(void *)(a1 + 64);
          long long v24 = *v18;
          long long *v18 = *v19;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *unint64_t v19 = v24;
          *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v23;
          if (*(void *)(a1 + 64) < *(void *)(a1 + 40))
          {
            uint64_t v25 = *(void *)(a1 + 40);
            long long v26 = *v17;
            *uint64_t v17 = *v18;
            *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(a1 + 64);
            long long *v18 = v26;
            *(void *)(a1 + 64) = v25;
            if (*(void *)(a1 + 40) < *(void *)(a1 + 16))
            {
              uint64_t v27 = *(void *)(a1 + 16);
              long long v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v17 = v28;
              *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v27;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_1CCBF8AE8((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      int v11 = 0;
      uint64_t v12 = 72;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v10 + 16);
    if (v13 < *(void *)(v9 + 16))
    {
      long long v29 = *(_OWORD *)v10;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(a1 + v14 - 24);
        *(void *)(v15 + 16) = *(void *)(a1 + v14 - 8);
        v14 -= 24;
        if (!v14) {
          break;
        }
        if (v13 >= *(void *)(v15 - 32))
        {
          uint64_t v16 = a1 + v14;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v16 = v29;
      *(void *)(v16 + 16) = v13;
      if (++v11 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v12 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CCBF8E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CCBF8AE8((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*(void *)(a3 + 16) < *(void *)(a2 + 16))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      if (*(void *)(a2 + 16) < *(void *)(a1 + 16))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::mca::DefaultResourceStrategy::select(llvm::mca::DefaultResourceStrategy *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = v2 & a2;
  if ((v2 & a2) != 0
    || (uint64_t v4 = *((void *)this + 1),
        uint64_t v2 = *((void *)this + 3) ^ v4,
        *((void *)this + 3) = 0,
        unint64_t v3 = v2 & a2,
        (v2 & a2) != 0))
  {
    char v5 = __clz(v3);
    LOBYTE(v3) = v5 ^ 0x3F;
  }
  else
  {
    unint64_t v3 = (63 - __clz(v4 & a2));
    char v5 = 63 - v3;
    uint64_t v2 = v4;
  }
  *((void *)this + 2) = (0xFFFFFFFFFFFFFFFFLL >> v5) & v2;
  return 1 << v3;
}

void *llvm::mca::DefaultResourceStrategy::used(void *this, unint64_t a2)
{
  unint64_t v2 = this[2];
  if (v2 >= a2)
  {
    uint64_t v3 = v2 & ~a2;
    this[2] = v3;
    if (!v3)
    {
      this[2] = this[3] ^ this[1];
      this[3] = 0;
    }
  }
  else
  {
    this[3] |= a2;
  }
  return this;
}

uint64_t llvm::mca::ResourceState::ResourceState(uint64_t result, uint64_t a2, int a3, unint64_t a4)
{
  *(_DWORD *)__n128 result = a3;
  *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = a4;
  int v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 32) = v4;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v5.i16[0] = vaddlv_u8(v5);
  *(unsigned char *)(result + 4llvm::StringTableBuilder::finalizeStringTable(this, 1) = v5.u32[0] > 1uLL;
  if (v5.u32[0] < 2uLL) {
    uint64_t v6 = ~(-1 << *(_DWORD *)(a2 + 8));
  }
  else {
    uint64_t v6 = (1 << ~__clz(a4)) ^ a4;
  }
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v6;
  if (v4 == -1) {
    int v4 = 0;
  }
  *(_DWORD *)(result + 36) = v4;
  *(unsigned char *)(result + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  return result;
}

BOOL llvm::mca::ResourceState::isReady(int8x8_t *this, unsigned int a2)
{
  if (this[5].i8[0] && this[4].i32[0]) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(this[3]);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.i32[0] >= a2;
}

uint64_t llvm::mca::ResourceState::isBufferAvailable(llvm::mca::ResourceState *this)
{
  int v1 = *((_DWORD *)this + 8);
  if (!v1) {
    return 2 * *((unsigned __int8 *)this + 40);
  }
  if (v1 < 1) {
    return 0;
  }
  return *((_DWORD *)this + 9) == 0;
}

uint64_t llvm::mca::ResourceManager::ResourceManager(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2631DB8;
  int v4 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v5 = v4 - 1;
  if (v4 != 1)
  {
    size_t v6 = 8 * (v4 - 1);
    long long v7 = (char *)operator new(v6);
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v7;
    uint64_t v8 = &v7[8 * v5];
    *(void *)(a1 + 24) = v8;
    bzero(v7, v6);
    *(void *)(a1 + 16) = v8;
  }
  int v9 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  int v10 = v9 - 1;
  if (v9 != 1)
  {
    size_t v11 = 8 * (v9 - 1);
    uint64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * v10];
    *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v13;
    bzero(v12, v11);
    *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v13;
  }
  int v14 = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  int v15 = v14 - 1;
  if (v14 != 1)
  {
    size_t v16 = 8 * (v14 - 1);
    uint64_t v17 = (char *)operator new(v16);
    *(void *)(a1 + 56) = v17;
    uint64_t v18 = &v17[8 * v15];
    *(void *)(a1 + 72) = v18;
    bzero(v17, v16);
    *(void *)(a1 + 64) = v18;
  }
  *(void *)(a1 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = a1 + 96;
  unint64_t v19 = *(unsigned int *)(a2 + 48);
  *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0x800000000;
  sub_1CBF7C198(a1 + 80, v19, 0);
  *(void *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = a1 + 176;
  uint64_t v20 = (*(_DWORD *)(a2 + 48) - 1);
  *(_DWORD *)(a1 + 172) = 8;
  if (v20 >= 9)
  {
    *(_DWORD *)(a1 + 16MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v20) {
    bzero((void *)(a1 + 176), 4 * v20);
  }
  *(_DWORD *)(a1 + 16MEMORY[0x1D25D9CD0](*(void *)this, 8) = v20;
  *(void *)(a1 + 20MEMORY[0x1D25D9CD0](*(void *)this, 8) = 1;
  for (uint64_t i = 216; i != 312; i += 24)
  {
    uint64_t v22 = (void *)(a1 + i);
    *uint64_t v22 = -1;
    v22[1] = -1;
  }
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_1CFAC4A20;
  llvm::mca::computeProcResourceMasks(a2, *(void **)(a1 + 80));
  uint64_t v23 = *(unsigned int *)(a2 + 48);
  if (v23 >= 2)
  {
    uint64_t v24 = *(void *)(a1 + 80);
    uint64_t v25 = *(void *)(a1 + 160);
    for (uint64_t j = 1; j != v23; ++j)
      *(_DWORD *)(v25 + 4 * (63 - __clz(*(void *)(v24 + 8 * j)))) = j;
    if (*(_DWORD *)(a2 + 48) >= 2u) {
      operator new();
    }
  }
  *(void *)(a1 + 32llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(void *)(a1 + 312);
  return a1;
}

uint64_t llvm::mca::ResourceManager::setCustomStrategyImpl(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unsigned int v3 = 63 - __clz(a3);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(v4 + 8 * v3);
  *(void *)(v4 + 8 * v3) = v5;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::mca::ResourceManager::resolveResourceMask(llvm::mca::ResourceManager *this, unint64_t a2)
{
  return *(unsigned int *)(*((void *)this + 20) + 4 * (63 - __clz(a2)));
}

uint64_t llvm::mca::ResourceManager::getNumUnits(llvm::mca::ResourceManager *this, unint64_t a2)
{
  unint64_t v2 = *(int8x8_t **)(*((void *)this + 1) + 8 * (63 - __clz(a2)));
  if (v2[5].i8[1]) {
    return 1;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2[2]);
  v4.i16[0] = vaddlv_u8(v4);
  return v4.u32[0];
}

unint64_t llvm::mca::ResourceManager::selectPipe(llvm::mca::ResourceManager *this, unint64_t a2)
{
  do
  {
    unint64_t v3 = a2;
    uint64_t v4 = 63 - __clz(a2);
    uint64_t v5 = *(int8x8_t **)(*((void *)this + 1) + 8 * v4);
    if (!v5[5].i8[1])
    {
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5[2]);
      v6.i16[0] = vaddlv_u8(v6);
      if (v6.u32[0] == 1) {
        break;
      }
    }
    uint64_t v7 = *(void *)(*((void *)this + 4) + 8 * v4);
    a2 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 16))(v7, *(void *)&v5[3]);
  }
  while (v5[5].i8[1]);
  return v3;
}

uint64_t llvm::mca::ResourceManager::use(uint64_t result, unint64_t *a2)
{
  unint64_t v3 = (void *)result;
  uint64_t v4 = 63 - __clz(*a2);
  uint64_t v5 = *(void *)(*(void *)(result + 8) + 8 * v4);
  *(void *)(v5 + 24) ^= a2[1];
  if (!*(unsigned char *)(v5 + 41) && (*(void *)(v5 + 16) & (*(void *)(v5 + 16) - 1)) != 0)
  {
    uint64_t v6 = *(void *)(*(void *)(result + 32) + 8 * v4);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  if (*(unsigned char *)(v5 + 40) && *(_DWORD *)(v5 + 32) || !*(void *)(v5 + 24))
  {
    v3[40] ^= *a2;
    for (uint64_t i = *(void *)(v3[7] + 8 * v4); i; i &= i - 1)
    {
      unsigned int v8 = 63 - __clz(i & -i);
      uint64_t v9 = *(void *)(v3[1] + 8 * v8);
      *(void *)(v9 + 24) ^= *a2;
      uint64_t v10 = *(void *)(v3[4] + 8 * v8);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
  }
  return result;
}

void *llvm::mca::ResourceManager::release(void *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 63 - __clz(*a2);
  uint64_t v4 = result[1];
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (*(unsigned char *)(v5 + 40) && *(_DWORD *)(v5 + 32))
  {
    *(void *)(v5 + 24) ^= a2[1];
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 24);
    *(void *)(v5 + 24) = a2[1] ^ v6;
    if (v6) {
      return result;
    }
  }
  result[40] ^= v2;
  for (uint64_t i = *(void *)(result[7] + 8 * v3); i; i &= i - 1)
  {
    uint64_t v8 = *(void *)(v4 + 8 * (63 - __clz(i & -i)));
    *(void *)(v8 + 24) ^= v2;
  }
  return result;
}

uint64_t llvm::mca::ResourceManager::canBeDispatched(llvm::mca::ResourceManager *this, uint64_t a2)
{
  if ((*((void *)this + 43) & a2) != 0) {
    return 2;
  }
  else {
    return (a2 & ~*((void *)this + 42)) != 0;
  }
}

void *llvm::mca::ResourceManager::reserveBuffers(void *this, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = this[1];
    while (1)
    {
      unint64_t v3 = a2 & -a2;
      uint64_t v4 = *(void *)(v2 + 8 * (63 - __clz(v3)));
      int v5 = *(_DWORD *)(v4 + 32);
      if (v5 < 1) {
        break;
      }
      uint64_t v6 = this + 42;
      int v7 = *(_DWORD *)(v4 + 36) - 1;
      *(_DWORD *)(v4 + 36) = v7;
      if (!v7) {
        goto LABEL_5;
      }
LABEL_6:
      a2 ^= v3;
      if (!a2) {
        return this;
      }
    }
    uint64_t v6 = this + 43;
    if (v5) {
      goto LABEL_6;
    }
LABEL_5:
    *v6 ^= v3;
    goto LABEL_6;
  }
  return this;
}

uint64_t llvm::mca::ResourceManager::releaseBuffers(uint64_t this, uint64_t a2)
{
  *(void *)(this + 336) |= a2;
  if (a2)
  {
    uint64_t v2 = *(void *)(this + 8);
    do
    {
      unint64_t v3 = a2 & -a2;
      uint64_t v4 = *(void *)(v2 + 8 * (63 - __clz(v3)));
      if (*(int *)(v4 + 32) >= 1) {
        ++*(_DWORD *)(v4 + 36);
      }
      a2 ^= v3;
    }
    while (a2);
  }
  return this;
}

uint64_t llvm::mca::ResourceManager::checkAvailability(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 144);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 24 * v2;
    int v5 = (unsigned int *)(*(void *)(a2 + 136) + 20);
    do
    {
      if (*((unsigned char *)v5 - 4)) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = *v5;
      }
      unint64_t v7 = *(void *)(v5 - 5);
      uint64_t v8 = *(int8x8_t **)(a1[1] + 8 * (63 - __clz(v7)));
      if (v8[5].i8[0] && v8[4].i32[0] || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8[3]), v9.i16[0] = vaddlv_u8(v9), v6 > v9.i32[0])) {
        v3 |= v7;
      }
      v5 += 6;
      v4 -= 24;
    }
    while (v4);
  }
  else
  {
    uint64_t v3 = 0;
  }
  for (uint64_t i = *(void *)(a2 + 264); i; i ^= v11)
  {
    unint64_t v11 = i & -i;
    uint64_t v12 = 63 - __clz(v11);
    uint64_t v13 = *(void *)(a1[1] + 8 * v12);
    if ((!*(unsigned char *)(v13 + 40) || !*(_DWORD *)(v13 + 32)) && *(void *)(v13 + 24)) {
      uint64_t v12 = 0;
    }
    v3 |= v12;
  }
  uint64_t v14 = a1[39] & v3;
  if (!v14) {
    return a1[41] & *(void *)(a2 + 272);
  }
  return v14;
}

uint64_t llvm::mca::ResourceManager::issueInstruction(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 144);
  if (v3)
  {
    uint64_t v4 = (llvm::mca::ResourceManager *)this;
    int v5 = (_DWORD *)(this + 208);
    uint64_t v6 = 24 * v3;
    uint64_t v7 = *(void *)(a2 + 136) + 8;
    do
    {
      int v8 = *(_DWORD *)(v7 + 4);
      int v9 = v8 - *(_DWORD *)v7;
      if (v8 == *(_DWORD *)v7)
      {
        unsigned int v10 = 63 - __clz(*(void *)(v7 - 8));
        uint64_t v11 = *(void *)(*((void *)v4 + 1) + 8 * v10);
        *(unsigned char *)(v11 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
        if (*(unsigned char *)(v11 + 41)) {
          *((void *)v4 + 41) ^= 1 << v10;
        }
        if (!*(_DWORD *)(v11 + 32)) {
          *((void *)v4 + 43) ^= 1 << v10;
        }
      }
      else if (*(unsigned char *)(v7 + 8))
      {
        int v12 = __clz(*(void *)(v7 - 8));
        *(unsigned char *)(*(void *)(*((void *)v4 + 1) + 8 * (63 - v12)) + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1;
        *((void *)v4 + 41) ^= 1 << ~(_BYTE)v12;
        uint64_t v13 = *(void *)(v7 - 8);
        *(void *)&long long v26 = v13;
        *((void *)&v26 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v13;
        *(void *)&long long v28 = 0;
        this = sub_1CCBF9FD0((uint64_t)v5, v13, v13, &v28);
        uint64_t v14 = v28;
        if (this)
        {
          int v15 = *(_DWORD *)(v28 + 16);
        }
        else
        {
          this = (uint64_t)sub_1CCBFA0D4(v5, (uint64_t *)&v26, (void *)v28);
          uint64_t v14 = this;
          int v15 = 0;
          *(void *)this = v13;
          *(void *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v13;
          *(_DWORD *)(this + 16) = 0;
        }
        *(_DWORD *)(v14 + 16) = v9 + v15;
      }
      else
      {
        unint64_t v16 = llvm::mca::ResourceManager::selectPipe(v4, *(void *)(v7 - 8));
        uint64_t v18 = v17;
        *(void *)&long long v28 = v16;
        *((void *)&v28 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v17;
        llvm::mca::ResourceManager::use((uint64_t)v4, (unint64_t *)&v28);
        int v19 = *(_DWORD *)v7;
        int v20 = *(_DWORD *)(v7 + 4);
        *(void *)&long long v26 = 0;
        int v21 = sub_1CCBF9FD0((uint64_t)v5, v16, v18, &v26);
        uint64_t v22 = (void *)v26;
        if (v21)
        {
          int v23 = *(_DWORD *)(v26 + 16);
        }
        else
        {
          uint64_t v22 = sub_1CCBFA0D4(v5, (uint64_t *)&v28, (void *)v26);
          int v23 = 0;
          *uint64_t v22 = v16;
          v22[1] = v18;
          *((_DWORD *)v22 + 4) = 0;
        }
        *((_DWORD *)v22 + 4) = v20 - v19 + v23;
        uint64_t v24 = (*(_DWORD *)(v7 + 4) - *(_DWORD *)v7);
        long long v26 = v28;
        uint64_t v27 = v24 | 0x100000000;
        this = sub_1CCBF9C04(a3, &v26);
      }
      v7 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return this;
}

void *llvm::mca::ResourceManager::releaseResource(void *this, unint64_t a2)
{
  unsigned int v2 = 63 - __clz(a2);
  uint64_t v3 = *(void *)(this[1] + 8 * v2);
  *(unsigned char *)(v3 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  if (*(unsigned char *)(v3 + 41)) {
    this[41] ^= 1 << v2;
  }
  if (!*(_DWORD *)(v3 + 32)) {
    this[43] ^= 1 << v2;
  }
  return this;
}

uint64_t sub_1CCBF9C04(uint64_t a1, long long *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    long long v11 = *a2;
    uint64_t v12 = *((void *)a2 + 2);
    unint64_t v10 = sub_1CD41C4F0(a1, (unint64_t)&v11, 1);
    uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    long long v5 = *(_OWORD *)v10;
    uint64_t v6 = *(void *)(v10 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)a1 + 24 * v3;
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
  }
  *(void *)(v4 + 16) = v6;
  *(_OWORD *)uint64_t v4 = v5;
  unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
  uint64_t v8 = *(void *)a1 + 24 * v7;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v7;
  return v8 - 24;
}

uint64_t llvm::mca::ResourceManager::reserveResource(uint64_t this, unint64_t a2)
{
  int v2 = __clz(a2);
  *(unsigned char *)(*(void *)(*(void *)(this + 8) + 8 * (63 - v2)) + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1;
  *(void *)(this + 328) ^= 1 << ~(_BYTE)v2;
  return this;
}

uint64_t llvm::mca::ResourceManager::cycleEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = result + 208;
  unsigned int v4 = *(_DWORD *)(result + 208);
  if (v4 <= 1)
  {
    if (v4)
    {
      uint64_t v6 = result + 216;
      unsigned int v7 = 4;
    }
    else
    {
      uint64_t v6 = *(void *)(result + 216);
      unsigned int v7 = *(_DWORD *)(result + 224);
    }
    long long v11 = (int8x8_t *)(v6 + 24 * v7);
    uint64_t v8 = v11;
    if (v4)
    {
LABEL_24:
      int v15 = (int8x8_t *)(result + 216);
      unsigned int v16 = 4;
      goto LABEL_25;
    }
LABEL_21:
    int v15 = *(int8x8_t **)(result + 216);
    unsigned int v16 = *(_DWORD *)(result + 224);
    goto LABEL_25;
  }
  if (v4)
  {
    uint64_t v8 = (int8x8_t *)(result + 216);
    unint64_t v10 = (int8x8_t *)(result + 312);
    goto LABEL_8;
  }
  uint64_t v8 = *(int8x8_t **)(result + 216);
  unsigned int v9 = *(_DWORD *)(result + 224);
  if (v9)
  {
    unint64_t v10 = &v8[3 * v9];
LABEL_8:
    long long v11 = v8;
    while (1)
    {
      int8x8_t v12 = v11[1];
      if ((*v11 != -1 || *(void *)&v12 != -1) && (*v11 != -2 || *(void *)&v12 != -2)) {
        break;
      }
      v11 += 3;
      if (v11 == v10)
      {
        long long v11 = v10;
        break;
      }
    }
    uint64_t v8 = v10;
    if (*(_DWORD *)(result + 208)) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  unsigned int v16 = 0;
  long long v11 = *(int8x8_t **)(result + 216);
  int v15 = v11;
LABEL_25:
  uint64_t v17 = &v15[3 * v16];
  while (v11 != v17)
  {
    __int32 v18 = v11[2].i32[0];
    if (!v18 || (__int32 v19 = v18 - 1, (v11[2].i32[0] = v19) == 0))
    {
      unint64_t v20 = (unint64_t)*v11;
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(*v11);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] == 1)
      {
        uint64_t result = (uint64_t)llvm::mca::ResourceManager::release((void *)v3, (unint64_t *)v11);
        unint64_t v20 = (unint64_t)*v11;
      }
      unsigned int v22 = 63 - __clz(v20);
      uint64_t v23 = *(void *)(*(void *)(v3 + 8) + 8 * v22);
      *(unsigned char *)(v23 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      if (*(unsigned char *)(v23 + 41)) {
        *(void *)(v3 + 328) ^= 1 << v22;
      }
      if (!*(_DWORD *)(v23 + 32)) {
        *(void *)(v3 + 344) ^= 1 << v22;
      }
      unint64_t v24 = *(unsigned int *)(a2 + 8);
      if (v24 >= *(unsigned int *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_OWORD *)(*(void *)a2 + 16 * v24) = *(_OWORD *)v11->i8;
      ++*(_DWORD *)(a2 + 8);
    }
    uint64_t v25 = v11 + 3;
    long long v11 = v8;
    if (v25 != v8)
    {
      long long v11 = v25;
      while (1)
      {
        int8x8_t v26 = v11[1];
        if ((*v11 != -1 || *(void *)&v26 != -1) && (*v11 != -2 || *(void *)&v26 != -2)) {
          break;
        }
        v11 += 3;
        if (v11 == v8)
        {
          long long v11 = v8;
          break;
        }
      }
    }
  }
  uint64_t v29 = *(unsigned int *)(a2 + 8);
  if (v29)
  {
    unint64_t v30 = *(uint64_t **)a2;
    unint64_t v31 = &v30[2 * v29];
    int64x2_t v35 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
    do
    {
      uint64_t v32 = *v30;
      uint64_t v33 = v30[1];
      unint64_t v36 = 0;
      uint64_t result = sub_1CCBF9FD0(v5, v32, v33, &v36);
      if (result)
      {
        *unint64_t v36 = v35;
        int v34 = *(_DWORD *)(v3 + 212) + 1;
        *(_DWORD *)(v3 + 208) -= 2;
        *(_DWORD *)(v3 + 212) = v34;
      }
      v30 += 2;
    }
    while (v30 != v31);
  }
  return result;
}

void sub_1CCBF9F80()
{
}

void sub_1CCBF9F98(uint64_t a1)
{
  sub_1CCBFA434(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCBF9FD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 4;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      int8x8_t v12 = 0;
      uint64_t result = 0;
      goto LABEL_11;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  unint64_t v6 = ((37 * a3) | (unint64_t)(0x2500000000 * a2))
     + ~((unint64_t)(37 * a3) << 32);
  unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
  int v10 = v5 - 1;
  unsigned int v11 = (v5 - 1) & v9;
  int8x8_t v12 = (void *)(v4 + 24 * v11);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v16 = 0;
    int v17 = 1;
    uint64_t result = 1;
    while (v13 != -1 || v14 != -1)
    {
      if (v16) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v14 == -2;
      }
      if (v19 && v13 == -2) {
        unsigned int v16 = v12;
      }
      unsigned int v21 = v11 + v17++;
      unsigned int v11 = v21 & v10;
      int8x8_t v12 = (void *)(v4 + 24 * (v21 & v10));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == a2 && v14 == a3) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    if (v16) {
      int8x8_t v12 = v16;
    }
  }
LABEL_11:
  *a4 = v12;
  return result;
}

void *sub_1CCBFA0D4(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CCBFA198((uint64_t)a1, v6);
  int v9 = 0;
  sub_1CCBF9FD0((uint64_t)a1, *a2, a2[1], &v9);
  a3 = v9;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1 || a3[1] != -1) {
    --a1[1];
  }
  return a3;
}

uint64_t sub_1CCBFA198(uint64_t a1, unsigned int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v16 = a2;
      *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CCBFA350(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v8 = 0;
  int v9 = v17;
  do
  {
    uint64_t v10 = *(void *)(a1 + v8 + 8);
    uint64_t v11 = *(void *)(a1 + v8 + 16);
    if ((v10 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
    {
      *(_OWORD *)int v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v14 = a2;
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v14;
  }
  return sub_1CCBFA350(a1, (uint64_t)v17, (uint64_t)v9);
}

uint64_t sub_1CCBFA350(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    int v9 = (void *)(result + 104);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(result + 16);
    if (!v7) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void **)(result + 8);
    int v9 = &v8[3 * v7];
  }
  do
  {
    *uint64_t v8 = -1;
    v8[1] = -1;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    if ((*(void *)a2 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
    {
      int v15 = 0;
      uint64_t result = sub_1CCBF9FD0((uint64_t)v5, v10, v11, &v15);
      uint64_t v14 = v15;
      *int v15 = *(void *)a2;
      v14[1] = *(void *)(a2 + 8);
      *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1CCBFA434(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631DB8;
  if ((*(unsigned char *)(a1 + 208) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 216), 8);
  }
  int v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176)) {
    free(v2);
  }
  unint64_t v3 = *(void **)(a1 + 80);
  if (v3 != (void *)(a1 + 96)) {
    free(v3);
  }
  unint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }
  int v6 = (void **)(a1 + 32);
  sub_1CCBFA4E8(&v6);
  int v6 = (void **)(a1 + 8);
  sub_1CCBFA590(&v6);
  return a1;
}

void sub_1CCBFA4E8(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CCBFA590(void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7) {
          MEMORY[0x1D25D9CE0](v6, 0x1000C407EB0D517);
        }
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::mca::RetireControlUnit::RetireControlUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F2631E38;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = a1 + 32;
  if (v3 <= 1) {
    unsigned int v3 = 0;
  }
  *(_DWORD *)(v4 - 12) = v3;
  *(_DWORD *)(v4 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(v4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(v4 + 16) = 0;
  int v5 = *(unsigned int **)(a2 + 64);
  if (v5)
  {
    unsigned int v6 = *v5;
    if (*v5)
    {
      *(_DWORD *)(a1 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v6;
      unsigned int v3 = v6;
    }
    *(_DWORD *)(a1 + 24) = v5[1];
  }
  *(_DWORD *)(a1 + 16) = v3;
  unint64_t v7 = 2 * v3;
  if (v7) {
    sub_1CCBFA914((char **)v4, v7);
  }
  return a1;
}

uint64_t llvm::mca::RetireControlUnit::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)(*(void *)v2 + 284);
  if (*(_DWORD *)(a1 + 16) < v3) {
    unsigned int v3 = *(_DWORD *)(a1 + 16);
  }
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32) + 24 * v5;
  *(_DWORD *)uint64_t v6 = *(_DWORD *)a2;
  *(void *)(v6 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v2;
  *(_DWORD *)(v6 + 16) = v4;
  *(unsigned char *)(v6 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = (*(_DWORD *)(a1 + 8) + v4)
                      % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3));
  *(_DWORD *)(a1 + 20) -= v4;
  return v5;
}

uint64_t llvm::mca::RetireControlUnit::getCurrentToken(llvm::mca::RetireControlUnit *this)
{
  return *((void *)this + 4) + 24 * *((unsigned int *)this + 3);
}

unint64_t llvm::mca::RetireControlUnit::computeNextSlotIdx(llvm::mca::RetireControlUnit *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  unsigned int v3 = *(_DWORD *)(v2 + 24 * v1 + 16);
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  return (v3 + v1) % (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v2) >> 3));
}

uint64_t llvm::mca::RetireControlUnit::peekNextToken(llvm::mca::RetireControlUnit *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  unsigned int v3 = *(_DWORD *)(v2 + 24 * v1 + 16);
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  return v2 + 24 * ((v3 + v1) % (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v2) >> 3)));
}

uint64_t llvm::mca::RetireControlUnit::consumeCurrentToken(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 12);
  uint64_t v2 = *(void *)(this + 32);
  uint64_t v3 = *(void *)(this + 40);
  uint64_t v4 = v2 + 24 * v1;
  *(_DWORD *)(*(void *)(v4 + 8) + 544) = 6;
  unsigned int v5 = *(_DWORD *)(v4 + 16);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 16);
  }
  *(_DWORD *)(this + 12) = (v6 + v1) % (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3));
  *(_DWORD *)(this + 20) += v5;
  *(_DWORD *)uint64_t v4 = 0;
  *(void *)(v4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  return this;
}

uint64_t llvm::mca::RetireControlUnit::onInstructionExecuted(uint64_t this, unsigned int a2)
{
  *(unsigned char *)(*(void *)(this + 32) + 24 * a2 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1;
  return this;
}

void *sub_1CCBFA854(void *a1)
{
  *a1 = &unk_1F2631E38;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CCBFA8A4(void *a1)
{
  *a1 = &unk_1F2631E38;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CCBFA914(char **a1, unint64_t a2)
{
  unsigned int v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      bzero(a1[1], 24 * ((24 * a2 - 24) / 0x18) + 24);
      v5 += 24 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    int v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int8x8_t v12 = &v11[24 * v7];
    uint64_t v13 = &v11[24 * v10];
    uint64_t v14 = 3 * a2;
    bzero(v12, 24 * ((8 * v14 - 24) / 0x18uLL) + 24);
    int v15 = &v12[8 * v14];
    if (v5 != v6)
    {
      do
      {
        long long v16 = *(_OWORD *)(v5 - 24);
        *((void *)v12 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      unsigned int v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t llvm::mca::Scheduler::initializeStrategy(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    operator new();
  }
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = result;
  if (v4)
  {
    unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  return result;
}

void llvm::mca::DefaultSchedulerStrategy::~DefaultSchedulerStrategy(llvm::mca::DefaultSchedulerStrategy *this)
{
}

uint64_t llvm::mca::Scheduler::isAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(*(void *)(a2 + 8) + 560);
  if ((*(void *)(v3 + 344) & v4) != 0)
  {
    *(unsigned char *)(a1 + 14llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1;
    return 4;
  }
  else
  {
    uint64_t v6 = v4 & ~*(void *)(v3 + 336);
    *(unsigned char *)(a1 + 14llvm::StringTableBuilder::finalizeStringTable(this, 0) = v6 != 0;
    if (v6)
    {
      return 3;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
      *(unsigned char *)(a1 + 14llvm::StringTableBuilder::finalizeStringTable(this, 0) = result != 0;
    }
  }
  return result;
}

void llvm::mca::Scheduler::issueInstructionImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  llvm::mca::ResourceManager::issueInstruction(*(void *)(a1 + 24), *(void *)v5, a3);
  llvm::mca::Instruction::execute(v5, *(_DWORD *)a2);
  llvm::mca::Instruction::computeCriticalRegDep((llvm::mca::Instruction *)v5);
  if ((*(unsigned char *)(v5 + 540) & 0xC) != 0)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2);
    uint64_t v6 = *(void *)(a1 + 8);
    int v20 = *(_DWORD *)(v5 + 556);
    uint64_t v7 = *((void *)sub_1CC3DEC94((uint64_t *)(v6 + 32), &v20) + 1);
    uint64_t v8 = *(void *)(v7 + 120);
    *(_DWORD *)(v5 + 58MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(v7 + 128);
    *(void *)(v5 + 58llvm::StringTableBuilder::finalizeStringTable(this, 0) = v8;
  }
  int v9 = *(_DWORD *)(v5 + 544);
  if (v9 == 5)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
  }
  else if (v9 == 4)
  {
    uint64_t v11 = *(_OWORD **)(a1 + 112);
    unint64_t v10 = *(void *)(a1 + 120);
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = *(_OWORD **)(a1 + 104);
      uint64_t v14 = v11 - v13;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        abort();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 60) {
          sub_1CB833614();
        }
        uint64_t v18 = (char *)operator new(16 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      BOOL v19 = &v18[16 * v14];
      *(_OWORD *)BOOL v19 = *(_OWORD *)a2;
      int8x8_t v12 = v19 + 16;
      if (v11 != v13)
      {
        do
        {
          *((_OWORD *)v19 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v11 - 1);
          v19 -= 16;
          --v11;
        }
        while (v11 != v13);
        uint64_t v11 = *(_OWORD **)(a1 + 104);
      }
      *(void *)(a1 + 104) = v19;
      *(void *)(a1 + 112) = v12;
      *(void *)(a1 + 12llvm::StringTableBuilder::finalizeStringTable(this, 0) = &v18[16 * v17];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *uint64_t v11 = *(_OWORD *)a2;
      int8x8_t v12 = v11 + 1;
    }
    *(void *)(a1 + 112) = v12;
  }
}

void llvm::mca::Scheduler::issueInstruction(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(unsigned int *)(v10 + 24);
  if (v11)
  {
    int8x8_t v12 = (_DWORD *)(*(void *)(v10 + 16) + 64);
    uint64_t v13 = 136 * v11;
    while (1)
    {
      int v14 = *((void *)v12 - 4) ? -1 : 0;
      if (*v12 != v14) {
        break;
      }
      v12 += 34;
      v13 -= 136;
      if (!v13) {
        goto LABEL_8;
      }
    }
    int v15 = 1;
  }
  else
  {
LABEL_8:
    int v15 = 0;
  }
  BOOL v18 = (*(unsigned char *)(v10 + 540) & 0xC) != 0
     && (uint64_t v16 = a1[1],
         int v20 = *(_DWORD *)(v10 + 556),
         unint64_t v17 = (_DWORD *)*((void *)sub_1CC3DEC94((uint64_t *)(v16 + 32), &v20) + 1),
         v17[3] != v17[5])
     && v17[8] + (unint64_t)v17[20] != 0;
  int v19 = v18 | v15;
  llvm::mca::ResourceManager::releaseBuffers(a1[3], *(void *)(v10 + 560));
  llvm::mca::Scheduler::issueInstructionImpl((uint64_t)a1, a2, a3);
  if (v19)
  {
    if (llvm::mca::Scheduler::promoteToPendingSet(a1, a4)) {
      llvm::mca::Scheduler::promoteToReadySet(a1, a5);
    }
  }
}

BOOL llvm::mca::Scheduler::promoteToPendingSet(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[4];
  uint64_t v5 = (uint64_t *)a1[5];
  uint64_t v3 = (void **)(a1 + 4);
  if (v4 == v5)
  {
    unsigned int v7 = 0;
    uint64_t v26 = a1[4];
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = v4[1];
      if (!v8) {
        break;
      }
      if (*(_DWORD *)(v8 + 544) == 1
        && (llvm::mca::Instruction::updateDispatched((llvm::mca::Instruction *)v4[1]) & 1) == 0
        || (*(unsigned char *)(v8 + 540) & 0xC) != 0
        && (uint64_t v9 = a1[1],
            int v30 = *(_DWORD *)(v4[1] + 556),
            uint64_t v10 = sub_1CC3DEC94((uint64_t *)(v9 + 32), &v30),
            **((_DWORD **)v10 + 1) > (*(_DWORD *)(*((void *)v10 + 1) + 8)
                                                  + *(_DWORD *)(*((void *)v10 + 1) + 4))))
      {
        v4 += 2;
      }
      else
      {
        uint64_t v11 = *(unsigned int *)(a2 + 8);
        if (v11 >= *(_DWORD *)(a2 + 12))
        {
          sub_1CD4C2394(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(void *)a2 + 16 * v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(_OWORD *)v4;
          ++*(_DWORD *)(a2 + 8);
        }
        uint64_t v13 = (_OWORD *)a1[8];
        unint64_t v12 = a1[9];
        if ((unint64_t)v13 >= v12)
        {
          int v15 = (_OWORD *)a1[7];
          uint64_t v16 = v13 - v15;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            abort();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          unint64_t v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
          if (v19)
          {
            if (v19 >> 60) {
              sub_1CB833614();
            }
            int v20 = (char *)operator new(16 * v19);
          }
          else
          {
            int v20 = 0;
          }
          unsigned int v21 = &v20[16 * v16];
          *(_OWORD *)unsigned int v21 = *(_OWORD *)v4;
          unsigned int v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v13 - 1);
              v22 -= 16;
              --v13;
            }
            while (v13 != v15);
            uint64_t v13 = (_OWORD *)a1[7];
          }
          uint64_t v23 = &v20[16 * v19];
          int v14 = v21 + 16;
          a1[7] = v22;
          a1[8] = v21 + 16;
          a1[9] = v23;
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          _OWORD *v13 = *(_OWORD *)v4;
          int v14 = v13 + 1;
        }
        a1[8] = v14;
        v4[1] = 0;
        unint64_t v24 = &v5[-2 * ++v7];
        int v25 = *(_DWORD *)v4;
        *(_DWORD *)uint64_t v4 = *(_DWORD *)v24;
        v4[1] = v24[1];
        *(_DWORD *)unint64_t v24 = v25;
        v24[1] = 0;
      }
    }
    while (v4 != v5);
    uint64_t v4 = (uint64_t *)a1[4];
    uint64_t v26 = a1[5];
  }
  unint64_t v27 = (v26 - (uint64_t)v4) >> 4;
  unint64_t v28 = v27 - v7;
  if (v27 >= v7)
  {
    if (v27 > v28) {
      a1[5] = &v4[2 * v28];
    }
  }
  else
  {
    sub_1CCBFBD74(v3, -(uint64_t)v7);
  }
  return v7 != 0;
}

BOOL llvm::mca::Scheduler::promoteToReadySet(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[7];
  uint64_t v5 = (uint64_t *)a1[8];
  uint64_t v3 = (void **)(a1 + 7);
  if (v4 == v5)
  {
    unsigned int v7 = 0;
    uint64_t v26 = a1[7];
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = v4[1];
      if (!v8) {
        break;
      }
      if ((*(_DWORD *)(v8 + 544) == 3
         || (llvm::mca::Instruction::updatePending((llvm::mca::Instruction *)v4[1]) & 1) != 0)
        && ((*(unsigned char *)(v8 + 540) & 0xC) == 0
         || (uint64_t v9 = a1[1],
             int v30 = *(_DWORD *)(v4[1] + 556),
             uint64_t v10 = sub_1CC3DEC94((uint64_t *)(v9 + 32), &v30),
             *(_DWORD *)(*((void *)v10 + 1) + 8) == **((_DWORD **)v10 + 1))))
      {
        uint64_t v11 = *(unsigned int *)(a2 + 8);
        if (v11 >= *(_DWORD *)(a2 + 12))
        {
          sub_1CD4C2394(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(void *)a2 + 16 * v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(_OWORD *)v4;
          ++*(_DWORD *)(a2 + 8);
        }
        uint64_t v13 = (_OWORD *)a1[11];
        unint64_t v12 = a1[12];
        if ((unint64_t)v13 >= v12)
        {
          int v15 = (_OWORD *)a1[10];
          uint64_t v16 = v13 - v15;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            abort();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          unint64_t v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
          if (v19)
          {
            if (v19 >> 60) {
              sub_1CB833614();
            }
            int v20 = (char *)operator new(16 * v19);
          }
          else
          {
            int v20 = 0;
          }
          unsigned int v21 = &v20[16 * v16];
          *(_OWORD *)unsigned int v21 = *(_OWORD *)v4;
          unsigned int v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v13 - 1);
              v22 -= 16;
              --v13;
            }
            while (v13 != v15);
            uint64_t v13 = (_OWORD *)a1[10];
          }
          uint64_t v23 = &v20[16 * v19];
          int v14 = v21 + 16;
          a1[10] = v22;
          a1[11] = v21 + 16;
          a1[12] = v23;
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          _OWORD *v13 = *(_OWORD *)v4;
          int v14 = v13 + 1;
        }
        a1[11] = v14;
        v4[1] = 0;
        unint64_t v24 = &v5[-2 * ++v7];
        int v25 = *(_DWORD *)v4;
        *(_DWORD *)uint64_t v4 = *(_DWORD *)v24;
        v4[1] = v24[1];
        *(_DWORD *)unint64_t v24 = v25;
        v24[1] = 0;
      }
      else
      {
        v4 += 2;
      }
    }
    while (v4 != v5);
    uint64_t v4 = (uint64_t *)a1[7];
    uint64_t v26 = a1[8];
  }
  unint64_t v27 = (v26 - (uint64_t)v4) >> 4;
  unint64_t v28 = v27 - v7;
  if (v27 >= v7)
  {
    if (v27 > v28) {
      a1[8] = &v4[2 * v28];
    }
  }
  else
  {
    sub_1CCBFBD74(v3, -(uint64_t)v7);
  }
  return v7 != 0;
}

uint64_t llvm::mca::Scheduler::select(llvm::mca::Scheduler *this)
{
  uint64_t v3 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 11);
  uint64_t v4 = v2 - v3;
  if (((unint64_t)(v2 - v3) >> 4))
  {
    uint64_t v5 = 0;
    uint64_t v6 = ((unint64_t)v4 >> 4);
    uint64_t v7 = 8;
    uint64_t v8 = v6;
    do
    {
      uint64_t v9 = *((void *)this + 10);
      if (v8 == (*((void *)this + 11) - v9) >> 4
        || (*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v9 + v7 - 8, v9 + 16 * v8))
      {
        uint64_t v10 = *(uint64_t **)(v9 + v7);
        uint64_t v11 = llvm::mca::ResourceManager::checkAvailability(*((void **)this + 3), *v10);
        if (v11) {
          v10[74] = v11;
        }
        else {
          uint64_t v8 = v5;
        }
        *((void *)this + 16) |= v11;
      }
      ++v5;
      v7 += 16;
    }
    while (v6 != v5);
    uint64_t v3 = *((void *)this + 10);
    uint64_t v2 = *((void *)this + 11);
    uint64_t v4 = v2 - v3;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v12 = v4 >> 4;
  if (v12 == v8) {
    return 0;
  }
  int v14 = (uint64_t *)(v3 + 16 * v8);
  uint64_t result = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v3 + 16 * v12;
  *(_DWORD *)int v14 = *(_DWORD *)(v16 - 16);
  v14[1] = *(void *)(v16 - 8);
  *(_DWORD *)(v16 - 16) = result;
  *(void *)(v16 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v15;
  *((void *)this + 1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v2 - 16;
  return result;
}

void llvm::mca::Scheduler::updateIssuedSet(void **a1, uint64_t a2)
{
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[14];
  uint64_t v3 = (void **)(a1 + 13);
  if (v4 == v5)
  {
    unsigned int v7 = 0;
    uint64_t v12 = (char *)a1[13];
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = v4[1];
      if (!v8) {
        break;
      }
      if (*(_DWORD *)(v8 + 544) == 5)
      {
        (*(void (**)(void *, uint64_t *))(*a1[1] + 32))(a1[1], v4);
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(_DWORD *)(a2 + 12))
        {
          sub_1CD4C2394(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(void *)a2 + 16 * v9) = *(_OWORD *)v4;
          ++*(_DWORD *)(a2 + 8);
        }
        ++v7;
        v4[1] = 0;
        uint64_t v10 = &v5[-2 * v7];
        int v11 = *(_DWORD *)v4;
        *(_DWORD *)uint64_t v4 = *(_DWORD *)v10;
        v4[1] = v10[1];
        *(_DWORD *)uint64_t v10 = v11;
        v10[1] = 0;
      }
      else
      {
        v4 += 2;
      }
    }
    while (v4 != v5);
    uint64_t v4 = a1[13];
    uint64_t v12 = (char *)a1[14];
  }
  unint64_t v13 = (v12 - (char *)v4) >> 4;
  unint64_t v14 = v13 - v7;
  if (v13 >= v7)
  {
    if (v13 > v14) {
      a1[14] = &v4[2 * v14];
    }
  }
  else
  {
    sub_1CCBFBD74(v3, -(uint64_t)v7);
  }
}

uint64_t llvm::mca::Scheduler::analyzeResourcePressure(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 128);
}

uint64_t llvm::mca::Scheduler::analyzeDataDependencies(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 56);
  uint64_t v4 = *(void *)(result + 64) - 16 * *(unsigned int *)(result + 136);
  if (v3 != v4)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *(void *)(v3 + 8);
      uint64_t result = llvm::mca::ResourceManager::checkAvailability(*(void **)(v7 + 24), *(void *)v8);
      if (!result)
      {
        if ((*(unsigned char *)(v8 + 540) & 0xC) != 0)
        {
          uint64_t v9 = *(void *)(v7 + 8);
          int v14 = *(_DWORD *)(v8 + 556);
          uint64_t result = (uint64_t)sub_1CC3DEC94((uint64_t *)(v9 + 32), &v14);
          uint64_t v10 = *(_DWORD **)(result + 8);
          int v11 = v10[1];
          if (v11)
          {
            if (v10[2] + v11 == *v10)
            {
              uint64_t v12 = *(unsigned int *)(a3 + 8);
              if (v12 >= *(_DWORD *)(a3 + 12))
              {
                uint64_t result = sub_1CCBFC10C(a3, (_OWORD *)v3);
              }
              else
              {
                *(_OWORD *)(*(void *)a3 + 16 * v12) = *(_OWORD *)v3;
                ++*(_DWORD *)(a3 + 8);
              }
            }
          }
        }
        if (*(_DWORD *)(v8 + 544) == 2)
        {
          uint64_t v13 = *(unsigned int *)(a2 + 8);
          if (v13 >= *(_DWORD *)(a2 + 12))
          {
            uint64_t result = sub_1CCBFC10C(a2, (_OWORD *)v3);
          }
          else
          {
            *(_OWORD *)(*(void *)a2 + 16 * v13) = *(_OWORD *)v3;
            ++*(_DWORD *)(a2 + 8);
          }
        }
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

BOOL llvm::mca::Scheduler::cycleEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  llvm::mca::ResourceManager::cycleEvent(*(void *)(a1 + 24), a2);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 112);
  while (v10 != v11)
  {
    llvm::mca::Instruction::cycleEvent(*(void *)(v10 + 8));
    v10 += 16;
  }
  llvm::mca::Scheduler::updateIssuedSet((void **)a1, a3);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  while (v12 != v13)
  {
    llvm::mca::Instruction::cycleEvent(*(void *)(v12 + 8));
    v12 += 16;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  while (v14 != v15)
  {
    llvm::mca::Instruction::cycleEvent(*(void *)(v14 + 8));
    v14 += 16;
  }
  llvm::mca::Scheduler::promoteToPendingSet((void *)a1, a4);
  BOOL result = llvm::mca::Scheduler::promoteToReadySet((void *)a1, a5);
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  return result;
}

uint64_t llvm::mca::Scheduler::mustIssueImmediately(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  if (*(_DWORD *)(v2 + 280)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(_DWORD *)(v2 + 144) == 0;
  }
  return (v3 | *(unsigned __int8 *)(v2 + 292)) & 1;
}

uint64_t llvm::mca::Scheduler::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  llvm::mca::ResourceManager::reserveBuffers(*(void **)(a1 + 24), *(void *)(v4 + 560));
  if ((*(unsigned char *)(v4 + 540) & 0xC) != 0) {
    *(_DWORD *)(v4 + 556) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2);
  }
  int v5 = *(_DWORD *)(v4 + 544);
  if (v5 == 1)
  {
LABEL_6:
    uint64_t v9 = *(_OWORD **)(a1 + 40);
    unint64_t v8 = *(void *)(a1 + 48);
    if ((unint64_t)v9 < v8)
    {
      *uint64_t v9 = *(_OWORD *)a2;
      uint64_t v10 = v9 + 1;
LABEL_32:
      uint64_t result = 0;
      *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v10;
      return result;
    }
    uint64_t v11 = *(_OWORD **)(a1 + 32);
    uint64_t v12 = v9 - v11;
    unint64_t v13 = v12 + 1;
    if (!((unint64_t)(v12 + 1) >> 60))
    {
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (!v15)
      {
        uint64_t v16 = 0;
        goto LABEL_27;
      }
      if (!(v15 >> 60))
      {
        uint64_t v16 = (char *)operator new(16 * v15);
LABEL_27:
        int v25 = &v16[16 * v12];
        *(_OWORD *)int v25 = *(_OWORD *)a2;
        uint64_t v10 = v25 + 16;
        if (v9 != v11)
        {
          do
          {
            *((_OWORD *)v25 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v9 - 1);
            v25 -= 16;
            --v9;
          }
          while (v9 != v11);
          uint64_t v9 = *(_OWORD **)(a1 + 32);
        }
        *(void *)(a1 + 32) = v25;
        *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v10;
        *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = &v16[16 * v15];
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_32;
      }
LABEL_72:
      sub_1CB833614();
    }
LABEL_71:
    abort();
  }
  if ((*(unsigned char *)(v4 + 540) & 0xC) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    int v44 = *(_DWORD *)(*(void *)(a2 + 8) + 556);
    uint64_t v7 = sub_1CC3DEC94((uint64_t *)(v6 + 32), &v44);
    if (**((_DWORD **)v7 + 1) > (*(_DWORD *)(*((void *)v7 + 1) + 8)
                                              + *(_DWORD *)(*((void *)v7 + 1) + 4)))
      goto LABEL_6;
    int v5 = *(_DWORD *)(v4 + 544);
  }
  if (v5 == 2
    || (*(unsigned char *)(v4 + 540) & 0xC) != 0
    && (uint64_t v20 = *(void *)(a1 + 8),
        int v45 = *(_DWORD *)(*(void *)(a2 + 8) + 556),
        unsigned int v21 = (_DWORD *)*((void *)sub_1CC3DEC94((uint64_t *)(v20 + 32), &v45) + 1),
        (int v22 = v21[1]) != 0)
    && v21[2] + v22 == *v21)
  {
    uint64_t v18 = *(_OWORD **)(a1 + 64);
    unint64_t v17 = *(void *)(a1 + 72);
    if ((unint64_t)v18 >= v17)
    {
      unint64_t v27 = *(_OWORD **)(a1 + 56);
      uint64_t v28 = v18 - v27;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        goto LABEL_71;
      }
      uint64_t v30 = v17 - (void)v27;
      if (v30 >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 60) {
          goto LABEL_72;
        }
        uint64_t v32 = (char *)operator new(16 * v31);
      }
      else
      {
        uint64_t v32 = 0;
      }
      unint64_t v36 = &v32[16 * v28];
      *(_OWORD *)unint64_t v36 = *(_OWORD *)a2;
      unint64_t v19 = v36 + 16;
      if (v18 != v27)
      {
        do
        {
          *((_OWORD *)v36 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v18 - 1);
          v36 -= 16;
          --v18;
        }
        while (v18 != v27);
        uint64_t v18 = *(_OWORD **)(a1 + 56);
      }
      *(void *)(a1 + 56) = v36;
      *(void *)(a1 + 64) = v19;
      *(void *)(a1 + 72) = &v32[16 * v31];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      _OWORD *v18 = *(_OWORD *)a2;
      unint64_t v19 = v18 + 1;
    }
    uint64_t result = 0;
    *(void *)(a1 + 64) = v19;
    ++*(_DWORD *)(a1 + 136);
  }
  else
  {
    uint64_t v23 = **(void **)(a2 + 8);
    if (*(_DWORD *)(v23 + 280)) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = *(_DWORD *)(v23 + 144) == 0;
    }
    uint64_t result = 1;
    if (!v24 && (*(unsigned char *)(v23 + 292) & 1) == 0)
    {
      int v34 = *(_OWORD **)(a1 + 88);
      unint64_t v33 = *(void *)(a1 + 96);
      if ((unint64_t)v34 >= v33)
      {
        unint64_t v37 = *(_OWORD **)(a1 + 80);
        uint64_t v38 = v34 - v37;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60) {
          goto LABEL_71;
        }
        uint64_t v40 = v33 - (void)v37;
        if (v40 >> 3 > v39) {
          unint64_t v39 = v40 >> 3;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          if (v41 >> 60) {
            goto LABEL_72;
          }
          long long v42 = (char *)operator new(16 * v41);
        }
        else
        {
          long long v42 = 0;
        }
        unint64_t v43 = &v42[16 * v38];
        *(_OWORD *)unint64_t v43 = *(_OWORD *)a2;
        int64x2_t v35 = v43 + 16;
        if (v34 != v37)
        {
          do
          {
            *((_OWORD *)v43 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *(v34 - 1);
            v43 -= 16;
            --v34;
          }
          while (v34 != v37);
          int v34 = *(_OWORD **)(a1 + 80);
        }
        *(void *)(a1 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = v43;
        *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v35;
        *(void *)(a1 + 96) = &v42[16 * v41];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *int v34 = *(_OWORD *)a2;
        int64x2_t v35 = v34 + 1;
      }
      *(void *)(a1 + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = v35;
      return 1;
    }
  }
  return result;
}

BOOL sub_1CCBFBCBC(uint64_t a1, int *a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = *(unsigned int *)(v3 + 24);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = 136 * v4;
    uint64_t v7 = (_DWORD *)(*(void *)(v3 + 16) + 64);
    do
    {
      v5 += *v7;
      if (*((void *)v7 - 4)) {
        ++v5;
      }
      v7 += 34;
      v6 -= 136;
    }
    while (v6);
  }
  else
  {
    int v5 = 0;
  }
  unsigned int v8 = *a2;
  unsigned int v9 = *a3;
  uint64_t v10 = *((void *)a3 + 1);
  uint64_t v11 = *(unsigned int *)(v10 + 24);
  if (v11)
  {
    int v12 = 0;
    uint64_t v13 = 136 * v11;
    uint64_t v14 = (_DWORD *)(*(void *)(v10 + 16) + 64);
    do
    {
      v12 += *v14;
      if (*((void *)v14 - 4)) {
        ++v12;
      }
      v14 += 34;
      v13 -= 136;
    }
    while (v13);
  }
  else
  {
    int v12 = 0;
  }
  int v15 = v8 - v5;
  int v16 = v9 - v12;
  BOOL v17 = v8 < v9;
  BOOL v18 = v15 == v16;
  BOOL v19 = v15 < v16;
  if (v18) {
    return v17;
  }
  else {
    return v19;
  }
}

void sub_1CCBFBD74(void **a1, unint64_t a2)
{
  int v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    int v12 = &v5[16 * a2];
    do
    {
      *(_DWORD *)int v5 = 0;
      *((void *)v5 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
      v5 += 16;
    }
    while (v5 != v12);
    a1[1] = v12;
  }
  else
  {
    uint64_t v6 = (char *)*a1;
    uint64_t v7 = v5 - (unsigned char *)*a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_1CB833614();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * (v7 >> 4)];
    uint64_t v14 = &v13[16 * a2];
    int v15 = v13;
    do
    {
      *(_DWORD *)int v15 = 0;
      *((void *)v15 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
      v15 += 16;
    }
    while (v15 != v14);
    int v16 = &v11[16 * v10];
    if (v5 == v6)
    {
      BOOL v17 = &v11[16 * (v7 >> 4)];
    }
    else
    {
      do
      {
        BOOL v17 = v13 - 16;
        *((_OWORD *)v13 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v13 -= 16;
      }
      while (v5 != v6);
    }
    BOOL v18 = *a1;
    *a1 = v17;
    a1[1] = v14;
    a1[2] = v16;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

char *sub_1CCBFBEBC(uint64_t *a1, uint64_t a2, long long *a3, long long *a4)
{
  int v5 = a3;
  uint64_t v6 = *a1;
  uint64_t v7 = (a2 - *a1) >> 4;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  unint64_t v8 = *((unsigned int *)a1 + 3);
  unsigned int v10 = *((_DWORD *)a1 + 2);
  uint64_t v11 = (char *)a4 - (char *)a3;
  unint64_t v12 = v9 + a4 - a3;
  if (*a1 + 16 * v9 == a2)
  {
    if (v12 > v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v5 != a4)
    {
      unsigned int v21 = (_OWORD *)(v6 + 16 * v9);
      do
      {
        long long v22 = *v5++;
        *v21++ = v22;
      }
      while (v5 != a4);
      unsigned int v10 = *((_DWORD *)a1 + 2);
      uint64_t v6 = *a1;
    }
    *((_DWORD *)a1 + 2) = v10 + ((unint64_t)v11 >> 4);
    return (char *)(v6 + 16 * v7);
  }
  else
  {
    unint64_t v13 = v11 >> 4;
    if (v12 > v8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v14 = (a2 - *a1) >> 4;
    int v15 = (char *)(v6 + 16 * v7);
    int v16 = (char *)(v6 + 16 * v9);
    unint64_t v17 = (v16 - v15) >> 4;
    if (v17 >= v13)
    {
      uint64_t v23 = (a2 - *a1) >> 4;
      if (v13 + v10 > *((unsigned int *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a4 != v5)
      {
        BOOL v24 = (_OWORD *)(*a1 + 16 * v10);
        uint64_t v25 = -16 * v13;
        do
        {
          *v24++ = *(_OWORD *)&v16[v25];
          v25 += 16;
        }
        while (v25);
        unsigned int v10 = *((_DWORD *)a1 + 2);
      }
      *((_DWORD *)a1 + 2) = v10 + v13;
      if (&v16[-16 * v13] != v15)
      {
        uint64_t v26 = 16 * v9;
        uint64_t v27 = v6 - 16 * v13;
        uint64_t v28 = 16 * v13 + 16 * v23;
        do
        {
          uint64_t v29 = v6 + v26;
          *(_DWORD *)(v29 - 16) = *(_DWORD *)(v27 + v26 - 16);
          *(void *)(v29 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(void *)(v27 + v26 - 8);
          v6 -= 16;
          v27 -= 16;
          v28 += 16;
        }
        while (v26 != v28);
      }
      if (v5 != a4)
      {
        uint64_t v30 = v15;
        do
        {
          *(_DWORD *)uint64_t v30 = *(_DWORD *)v5;
          *((void *)v30 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v5++ + 1);
          v30 += 16;
        }
        while (v5 != a4);
      }
    }
    else
    {
      unsigned int v18 = v10 + ((unint64_t)v11 >> 4);
      *((_DWORD *)a1 + 2) = v18;
      if (v14 != v9)
      {
        memcpy((void *)(v6 + 16 * v18 - 16 * v17), v15, v16 - v15);
        BOOL v19 = v15;
        do
        {
          *(_DWORD *)BOOL v19 = *(_DWORD *)v5;
          *((void *)v19 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = *((void *)v5++ + 1);
          v19 += 16;
          --v17;
        }
        while (v17);
      }
      while (v5 != a4)
      {
        long long v20 = *v5++;
        *(_OWORD *)int v16 = v20;
        v16 += 16;
      }
    }
  }
  return v15;
}

uint64_t sub_1CCBFC10C(uint64_t a1, _OWORD *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a1 + 16 * v2) = *a2;
  unsigned int v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v3;
  return *(void *)a1 + 16 * v3 - 16;
}

uint64_t llvm::mca::InstrBuilder::InstrBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a1 + 48;
  uint64_t v7 = (void **)(a1 + 32);
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0x800000000;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(_DWORD *)(a1 + 12MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 257;
  *(unsigned char *)(a1 + 162) = a6;
  sub_1CD42769C(a1 + 32, *(unsigned int *)(*(void *)(a2 + 160) + 48));
  llvm::mca::computeProcResourceMasks(*(void *)(*(void *)a1 + 160), *v7);
  return a1;
}

void llvm::mca::InstrBuilder::populateWrites(void **a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v7 = *a3;
  uint64_t v8 = *a1[1];
  uint64_t v9 = v8 + 48 * *a3;
  uint64_t v10 = *(void *)(v9 + 32);
  long long v57 = (__int16 **)(v9 + 32);
  unsigned int v11 = *(unsigned __int8 *)(v9 + 4);
  if (v10)
  {
    unsigned int v12 = -1;
    do
      ++v12;
    while (*(_WORD *)(v10 + 2 * v12));
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v59 = *(void *)((*a1)[20] + 40);
  unsigned int v13 = *(unsigned __int16 *)(v59 + 24 * a4 + 16);
  uint64_t v14 = v8 + 48 * v7;
  unsigned int v15 = *(_DWORD *)(v14 + 8);
  v14 += 8;
  unsigned int v60 = a3[6];
  int v61 = *(unsigned __int16 *)(v14 - 6);
  int v16 = v60 - v61;
  sub_1CCBFFDBC(a2, ((v15 >> 2) & 1) + v12 + v11 + v60 - v61);
  unint64_t v17 = (uint64_t *)v14;
  unsigned int v18 = a3;
  unsigned int v19 = *(unsigned __int16 *)(v14 - 6);
  unsigned int v20 = v19 - 1;
  unint64_t v21 = a3[6];
  if (v21 && v11)
  {
    unsigned int v22 = 0;
    uint64_t v23 = (unsigned __int8 *)*((void *)a3 + 2);
    BOOL v24 = (void *)(v8 + 48 * v7 + 40);
    uint64_t v25 = *(void *)a2;
    unsigned int v27 = a4;
    uint64_t v26 = v59;
    int v28 = *(_DWORD *)(a2 + 280);
    unint64_t v29 = 1;
    int v31 = v61;
    unsigned int v30 = v12 + v11;
    unsigned int v32 = v60;
    do
    {
      int v33 = *v23;
      v23 += 16;
      if (v33 == 1)
      {
        if ((*(unsigned char *)(*v24 + 6 * v22 + 2) & 4) != 0)
        {
          unsigned int v20 = v22;
        }
        else
        {
          *(_DWORD *)(v25 + 20 * v22) = v29 - 1;
          if (v22 >= v13)
          {
            int v36 = 0;
            int v35 = v28;
          }
          else
          {
            int v34 = (__int16 *)((*a1)[18] + 4 * (v22 + *(unsigned __int16 *)(v59 + 24 * a4 + 14)));
            int v35 = *v34;
            if (v35 < 0) {
              int v35 = *(_DWORD *)(a2 + 280);
            }
            int v36 = (unsigned __int16)v34[1];
          }
          uint64_t v37 = v25 + 20 * v22;
          *(_DWORD *)(v37 + 4) = v35;
          *(_DWORD *)(v37 + 12) = v36;
          *(unsigned char *)(v37 + 16) = 0;
        }
        ++v22;
      }
      if (v29 >= v21) {
        break;
      }
      ++v29;
    }
    while (v22 < v11);
  }
  else
  {
    int v31 = v61;
    unsigned int v30 = v12 + v11;
    unsigned int v32 = v60;
    unsigned int v27 = a4;
    uint64_t v26 = v59;
  }
  if (v12)
  {
    uint64_t v38 = *(void *)a2;
    unint64_t v39 = *v57;
    int v40 = *(_DWORD *)(a2 + 280);
    uint64_t v41 = v12;
    int v42 = -1;
    do
    {
      uint64_t v43 = v38 + 20 * v11;
      *(_DWORD *)uint64_t v43 = v42;
      __int16 v44 = *v39++;
      *(_WORD *)(v43 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v44;
      if (v11 >= v13)
      {
        int v47 = 0;
        int v46 = v40;
      }
      else
      {
        int v45 = (__int16 *)((*a1)[18] + 4 * (v11 + *(unsigned __int16 *)(v26 + 24 * v27 + 14)));
        int v46 = *v45;
        if (v46 < 0) {
          int v46 = *(_DWORD *)(a2 + 280);
        }
        int v47 = (unsigned __int16)v45[1];
      }
      uint64_t v48 = v38 + 20 * v11;
      *(_DWORD *)(v48 + 4) = v46;
      *(_DWORD *)(v48 + 12) = v47;
      *(unsigned char *)(v48 + 16) = 0;
      --v42;
      ++v11;
      --v41;
    }
    while (v41);
  }
  uint64_t v49 = *v17;
  if ((*v17 & 4) != 0)
  {
    int v50 = *(_DWORD *)(a2 + 280);
    uint64_t v51 = *(void *)a2 + 20 * v30;
    *(_DWORD *)uint64_t v51 = v20;
    *(_DWORD *)(v51 + 4) = v50;
    *(_DWORD *)(v51 + 12) = 0;
    *(unsigned char *)(v51 + 16) = 1;
  }
  if (v32 != v31)
  {
    unsigned int v52 = ((v49 >> 2) & 1) + v30;
    if ((v49 & 0x8000000000) != 0)
    {
      uint64_t v53 = *((void *)v18 + 2);
      uint64_t v54 = *(void *)a2;
      int v55 = *(_DWORD *)(a2 + 280);
      do
      {
        if (*(unsigned char *)(v53 + 16 * v19) == 1)
        {
          uint64_t v56 = v54 + 20 * v52;
          *(_DWORD *)uint64_t v56 = v19;
          *(_DWORD *)(v56 + 4) = v55;
          *(_DWORD *)(v56 + 12) = 0;
          *(unsigned char *)(v56 + 16) = 0;
          ++v52;
        }
        ++v19;
        --v16;
      }
      while (v16);
    }
    sub_1CCBFFDBC(a2, v52);
  }
}

void llvm::mca::InstrBuilder::populateReads(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v6 = **(void **)(a1 + 8);
  unsigned int v7 = (unsigned __int16 *)(v6 + 48 * *a3);
  int v9 = v7[1];
  ++v7;
  int v8 = v9;
  uint64_t v10 = (unsigned __int8 *)(v7 + 1);
  int v11 = v9 - *((unsigned __int8 *)v7 + 2);
  uint64_t v12 = *(void *)(v7 + 11);
  int v42 = v7;
  int v45 = *((unsigned __int8 *)v7 + 2);
  __int16 v44 = (__int16 **)(v7 + 11);
  if (v12)
  {
    unsigned int v13 = -1;
    do
      ++v13;
    while (*(_WORD *)(v12 + 2 * v13));
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t v14 = v6 + 48 * *a3;
  uint64_t v15 = *(void *)(v14 + 8);
  int v46 = (void *)(v14 + 8);
  uint64_t v43 = v15 << 61 >> 63;
  int v16 = v11 + ((int)(v15 << 29) >> 31);
  int v17 = v8;
  unsigned int v18 = a3[6];
  int v19 = v18 - v8;
  unsigned int v20 = v16 + v13;
  unint64_t v21 = (uint64_t *)(a2 + 56);
  sub_1CCBFFE50(a2 + 56, v16 + v13 + v18 - v8);
  unsigned int v22 = 0;
  if (!v16)
  {
    unsigned int v27 = v21;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  int v23 = 0;
  int v24 = *v10;
  uint64_t v25 = *((void *)a3 + 2);
  uint64_t v26 = *v21;
  unsigned int v27 = v21;
  do
  {
    if (*(unsigned char *)(v25 + 16 * (v24 + v23)) == 1)
    {
      int v28 = (_DWORD *)(v26 + 16 * v22);
      *int v28 = v24 + v23;
      v28[1] = v23;
      void v28[3] = a4;
      ++v22;
    }
    ++v23;
  }
  while (v16 != v23);
  if (v13)
  {
LABEL_14:
    uint64_t v29 = *v27;
    unsigned int v30 = *v44;
    uint64_t v31 = v13;
    int v32 = v17 + v43 - v45;
    int v33 = -1;
    unsigned int v34 = v22;
    do
    {
      uint64_t v35 = v29 + 16 * v34;
      *(_DWORD *)uint64_t v35 = v33;
      *(_DWORD *)(v35 + 4) = v32;
      __int16 v36 = *v30++;
      *(_WORD *)(v35 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v36;
      *(_DWORD *)(v35 + 12) = a4;
      ++v32;
      --v33;
      ++v34;
      --v31;
    }
    while (v31);
  }
LABEL_16:
  unsigned int v37 = v22 + v13;
  if (v18 != v17 && (*v46 & 0x8000000000) == 0)
  {
    unsigned int v38 = *v42;
    uint64_t v39 = *((void *)a3 + 2);
    uint64_t v40 = *v27;
    do
    {
      if (*(unsigned char *)(v39 + 16 * v38) == 1)
      {
        uint64_t v41 = (unsigned int *)(v40 + 16 * v37);
        unsigned int *v41 = v38;
        v41[1] = v20;
        void v41[3] = a4;
        ++v37;
      }
      ++v38;
      ++v20;
      --v19;
    }
    while (v19);
  }

  sub_1CCBFFE50((uint64_t)v27, v37);
}

uint64_t llvm::mca::InstrBuilder::verifyInstrDesc@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (!*(_DWORD *)(a1 + 284))
  {
    if (*(void *)(a1 + 248)) {
      BOOL v2 = 0;
    }
    else {
      BOOL v2 = *(_DWORD *)(a1 + 144) == 0;
    }
    if (!v2)
    {
      strcpy((char *)operator new(0x68uLL), "found an inconsistent instruction that decodes to zero opcodes and that consumes scheduler resources.");
      operator new();
    }
  }
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

void llvm::mca::InstrBuilder::convertUnsupportedInstrToDesc(llvm::raw_ostream *a1, unsigned __int16 *a2)
{
  unsigned int v3 = a1;
  unsigned int v4 = *a2;
  uint64_t v5 = **((void **)a1 + 1);
  uint64_t v6 = *(void *)(*(void *)a1 + 160);
  unsigned int v7 = (llvm::raw_ostream *)*(unsigned __int16 *)(v5 + 48 * *a2 + 6);
  if ((*(_WORD *)(*(void *)(v6 + 40) + 24 * (void)v7 + 8) & 0x1FFF) == 0x1FFE)
  {
    if (!v7) {
LABEL_6:
    }
      operator new();
    uint64_t v8 = *(unsigned int *)(v6 + 28);
    while ((*(_WORD *)(*(void *)(v6 + 40) + 24 * v7 + 8) & 0x1FFF) == 0x1FFE)
    {
      a1 = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *, unsigned __int16 *, void, uint64_t))(**(void **)v3 + 16))(*(void *)v3, v7, a2, *((void *)v3 + 1), v8);
      unsigned int v7 = a1;
      if (!a1) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v9 = v5 + 48 * v4;
  uint64_t v12 = *(void *)(v9 + 8);
  int v11 = (uint64_t *)(v9 + 8);
  LOBYTE(v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v12;
  if ((v12 & 0x80) != 0 && *((unsigned char *)v3 + 160))
  {
    unsigned int v13 = llvm::WithColor::warning(a1);
    uint64_t v14 = (void *)*((void *)v13 + 4);
    if (*((void *)v13 + 3) - (void)v14 > 0x2CuLL)
    {
      qmemcpy(v14, "found a call in the input assembly sequence.\n", 45);
      *((void *)v13 + 4) += 45;
    }
    else
    {
      unsigned int v13 = llvm::raw_ostream::write(v13, "found a call in the input assembly sequence.\n", 0x2DuLL);
    }
    a1 = llvm::WithColor::note(v13);
    uint64_t v15 = (void *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v15 > 0x2CuLL)
    {
      qmemcpy(v15, "call instructions are not correctly modeled. ", 45);
      int v16 = (void *)(*((void *)a1 + 4) + 45);
      *((void *)a1 + 4) = v16;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "call instructions are not correctly modeled. ", 0x2DuLL);
      int v16 = (void *)*((void *)a1 + 4);
    }
    if (*((void *)a1 + 3) - (void)v16 > 0x1AuLL)
    {
      qmemcpy(v16, "Assume a latency of 100cy.\n", 27);
      *((void *)a1 + 4) += 27;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "Assume a latency of 100cy.\n", 0x1BuLL);
    }
    *((unsigned char *)v3 + 16llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
    uint64_t v10 = *v11;
  }
  if ((v10 & 0x20) != 0 && *((unsigned char *)v3 + 161))
  {
    int v17 = llvm::WithColor::warning(a1);
    unsigned int v18 = (void *)*((void *)v17 + 4);
    if (*((void *)v17 + 3) - (void)v18 > 0x26uLL)
    {
      qmemcpy(v18, "found a return instruction in the input", 39);
      uint64_t v19 = *((void *)v17 + 4) + 39;
      *((void *)v17 + 4) = v19;
    }
    else
    {
      int v17 = llvm::raw_ostream::write(v17, "found a return instruction in the input", 0x27uLL);
      uint64_t v19 = *((void *)v17 + 4);
    }
    if ((unint64_t)(*((void *)v17 + 3) - v19) > 0x13)
    {
      *(_DWORD *)(v19 + 16) = 170812771;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)" assembly sequence.\n";
      *((void *)v17 + 4) += 20;
    }
    else
    {
      int v17 = llvm::raw_ostream::write(v17, " assembly sequence.\n", 0x14uLL);
    }
    unsigned int v20 = llvm::WithColor::note(v17);
    unint64_t v21 = (void *)*((void *)v20 + 4);
    if (*((void *)v20 + 3) - (void)v21 > 0x24uLL)
    {
      qmemcpy(v21, "program counter updates are ignored.\n", 37);
      *((void *)v20 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v20, "program counter updates are ignored.\n", 0x25uLL);
    }
    *((unsigned char *)v3 + 16llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
  }
  operator new();
}

void llvm::mca::InstrBuilder::createInstrDescImpl(llvm::raw_ostream *a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 160);
  uint64_t v8 = **((void **)a1 + 1);
  int v5 = *(unsigned __int16 *)(*(void *)(v4 + 40) + 24 * *(unsigned __int16 *)(v8 + 48 * *a2 + 6) + 8);
  if ((v5 & 0x1FFF) == 0x1FFE)
  {
    if (!*(_WORD *)(v8 + 48 * *a2 + 6)) {
LABEL_6:
    }
      operator new();
    uint64_t v6 = *(unsigned int *)(v4 + 28);
    uint64_t v7 = *(unsigned __int16 *)(v8 + 48 * *a2 + 6);
    while (1)
    {
      int v5 = *(unsigned __int16 *)(*(void *)(v4 + 40) + 24 * v7 + 8);
      if ((v5 & 0x1FFF) != 0x1FFE) {
        break;
      }
      uint64_t v7 = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, void, uint64_t))(**(void **)a1 + 16))(*(void *)a1, v7, a2, *((void *)a1 + 1), v6);
      if (!v7) {
        goto LABEL_6;
      }
    }
  }
  if ((~v5 & 0x1FFF) == 0)
  {
    if (*((unsigned char *)a1 + 162))
    {
      llvm::mca::InstrBuilder::convertUnsupportedInstrToDesc(a1, a2);
    }
    operator new();
  }
  operator new();
}

void *llvm::mca::InstrBuilder::getOrCreateInstrDesc@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 112;
  uint64_t v7 = v8;
  int v9 = *a2;
  uint64_t v10 = *(unsigned int *)(v6 + 16);
  if (v10)
  {
    LODWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = (v10 - 1) & (37 * v9);
    uint64_t v12 = (unsigned __int16 *)(v7 + 16 * v11);
    int v13 = *v12;
    if (v13 == v9) {
      goto LABEL_8;
    }
    int v14 = 1;
    while (v13 != 0xFFFF)
    {
      int v15 = v11 + v14++;
      uint64_t v11 = v15 & (v10 - 1);
      int v13 = *(unsigned __int16 *)(v7 + 16 * v11);
      if (v13 == v9)
      {
        uint64_t v12 = (unsigned __int16 *)(v7 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  uint64_t v12 = (unsigned __int16 *)(v7 + 16 * v10);
LABEL_8:
  if (v12 == (unsigned __int16 *)(v7 + 16 * v10))
  {
    uint64_t v17 = *(void *)(a1 + 136);
    uint64_t v19 = 0;
    if (!sub_1CBB0BF40(v17, *(_DWORD *)(a1 + 152), (uint64_t)a2, &v19)
      || v19 == (unsigned __int16 *)(*(void *)(a1 + 136) + 16 * *(unsigned int *)(a1 + 152)))
    {
      llvm::mca::InstrBuilder::createInstrDescImpl((llvm::raw_ostream *)a1, a2);
    }
    uint64_t v19 = a2;
    uint64_t result = sub_1CCC002F0(a1 + 136, (uint64_t *)&v19);
  }
  else
  {
    LOWORD(v19) = *a2;
    uint64_t result = sub_1CCBFFEC4(v6, (unsigned __int16 *)&v19);
  }
  uint64_t v18 = result[1];
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(void *)a3 = v18;
  return result;
}

void *llvm::mca::InstrBuilder::createInstruction@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::mca::InstrBuilder::getOrCreateInstrDesc(a1, a2, (uint64_t)&v6);
  uint64_t v5 = v6;
  if ((v7 & 1) == 0) {
    operator new();
  }
  *(unsigned char *)(a3 + 8) |= 1u;
  *(void *)a3 = v5;
  return result;
}

void sub_1CCBFE900(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (int8x8_t *)(a2 - 24);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                int8x8_t v68 = *(int8x8_t *)(a2 - 24);
                uint8x8_t v69 = (uint8x8_t)vcnt_s8(v68);
                v69.i16[0] = vaddlv_u8(v69);
                unsigned int v70 = v69.i32[0];
                int8x8_t v71 = *(int8x8_t *)v11;
                uint8x8_t v72 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v11);
                v72.i16[0] = vaddlv_u8(v72);
                if (v70 < v72.i32[0]
                  || (*(void *)&v68 < *(void *)&v71 ? (BOOL v73 = v70 > v72.i32[0]) : (BOOL v73 = 1), !v73))
                {
                  *(int8x8_t *)unint64_t v11 = v68;
                  *(int8x8_t *)(a2 - 24) = v71;
                  long long v180 = *(_OWORD *)(v11 + 8);
                  *(_OWORD *)(v11 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a2 - 16);
                  *(_OWORD *)(a2 - 16) = v180;
                }
                break;
              case 3:
                sub_1CCBFF60C(v11, v11 + 24, a2 - 24);
                break;
              case 4:
                sub_1CCBFFB58(v11, v11 + 24, v11 + 48, a2 - 24);
                break;
              case 5:
                sub_1CCBFFB58(v11, v11 + 24, v11 + 48, v11 + 72);
                int8x8_t v74 = *(int8x8_t *)(a2 - 24);
                uint8x8_t v75 = (uint8x8_t)vcnt_s8(v74);
                v75.i16[0] = vaddlv_u8(v75);
                unsigned int v76 = v75.i32[0];
                int8x8_t v77 = *(int8x8_t *)(v11 + 72);
                uint8x8_t v78 = (uint8x8_t)vcnt_s8(v77);
                v78.i16[0] = vaddlv_u8(v78);
                if (v76 < v78.i32[0]
                  || (*(void *)&v74 < *(void *)&v77 ? (BOOL v79 = v76 > v78.i32[0]) : (BOOL v79 = 1), !v79))
                {
                  *(int8x8_t *)(v11 + 72) = v74;
                  *(int8x8_t *)(a2 - 24) = v77;
                  long long v80 = *(_OWORD *)(v11 + 80);
                  *(_OWORD *)(v11 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(_OWORD *)(a2 - 16);
                  *(_OWORD *)(a2 - 16) = v80;
                  int8x8_t v81 = *(int8x8_t *)(v11 + 72);
                  *(int8x8_t *)&long long v80 = vcnt_s8(v81);
                  LOWORD(v8llvm::StringTableBuilder::finalizeStringTable(this, 0) = vaddlv_u8(*(uint8x8_t *)&v80);
                  unsigned int v82 = v80;
                  int8x8_t v83 = *(int8x8_t *)(v11 + 48);
                  uint8x8_t v84 = (uint8x8_t)vcnt_s8(v83);
                  v84.i16[0] = vaddlv_u8(v84);
                  if (v82 < v84.i32[0] || *(void *)&v81 < *(void *)&v83 && v82 <= v84.i32[0])
                  {
                    *(int8x8_t *)(v11 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v81;
                    *(int8x8_t *)(v11 + 72) = v83;
                    long long v85 = *(_OWORD *)(v11 + 56);
                    *(_OWORD *)(v11 + 56) = *(_OWORD *)(v11 + 80);
                    *(_OWORD *)(v11 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = v85;
                    int8x8_t v86 = *(int8x8_t *)(v11 + 24);
                    uint8x8_t v87 = (uint8x8_t)vcnt_s8(v86);
                    v87.i16[0] = vaddlv_u8(v87);
                    if (v82 < v87.i32[0] || *(void *)&v81 < *(void *)&v86 && v82 <= v87.i32[0])
                    {
                      *(int8x8_t *)(v11 + 24) = v81;
                      *(int8x8_t *)(v11 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v86;
                      long long v88 = *(_OWORD *)(v11 + 32);
                      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 56);
                      *(_OWORD *)(v11 + 56) = v88;
                      int8x8_t v89 = *(int8x8_t *)v11;
                      uint8x8_t v90 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v11);
                      v90.i16[0] = vaddlv_u8(v90);
                      if (v82 < v90.i32[0] || *(void *)&v81 < *(void *)&v89 && v82 <= v90.i32[0])
                      {
                        *(int8x8_t *)unint64_t v11 = v81;
                        *(int8x8_t *)(v11 + 24) = v89;
                        long long v181 = *(_OWORD *)(v11 + 8);
                        *(_OWORD *)(v11 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v11 + 32);
                        *(_OWORD *)(v11 + 32) = v181;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            unint64_t v91 = v11 + 24;
            BOOL v93 = v11 == a2 || v91 == a2;
            if (a4)
            {
              if (!v93)
              {
                uint64_t v94 = 0;
                unint64_t v95 = v11;
                do
                {
                  unint64_t v96 = v91;
                  int8x8_t v97 = *(int8x8_t *)(v95 + 24);
                  uint8x8_t v98 = (uint8x8_t)vcnt_s8(v97);
                  v98.i16[0] = vaddlv_u8(v98);
                  unsigned int v99 = v98.i32[0];
                  uint8x8_t v100 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v95);
                  v100.i16[0] = vaddlv_u8(v100);
                  if (v99 < v100.i32[0]
                    || (*(void *)&v97 < *(void *)v95 ? (BOOL v101 = v99 > v100.i32[0]) : (BOOL v101 = 1), !v101))
                  {
                    long long v182 = *(_OWORD *)(v95 + 32);
                    *(void *)(v95 + 24) = *(void *)v95;
                    *(_OWORD *)(v96 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v95 + 8);
                    if (v95 == v11)
                    {
                      long long v107 = (_OWORD *)(v95 + 8);
                    }
                    else
                    {
                      uint64_t v102 = v94;
                      do
                      {
                        uint64_t v103 = v11 + v102;
                        int8x8_t v104 = *(int8x8_t *)(v11 + v102 - 24);
                        uint8x8_t v105 = (uint8x8_t)vcnt_s8(v104);
                        v105.i16[0] = vaddlv_u8(v105);
                        if (v99 >= v105.i32[0] && (*(void *)&v97 >= *(void *)&v104 || v99 > v105.i32[0]))
                        {
                          long long v108 = (void *)(v11 + v102);
                          long long v107 = v108 + 1;
                          goto LABEL_161;
                        }
                        *(int8x8_t *)uint64_t v103 = v104;
                        *(_OWORD *)(v103 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v103 - 16);
                        v102 -= 24;
                      }
                      while (v102);
                      long long v107 = (_OWORD *)(v11 + 8);
                    }
                    long long v108 = (void *)v11;
LABEL_161:
                    *long long v108 = v97;
                    *long long v107 = v182;
                  }
                  unint64_t v91 = v96 + 24;
                  v94 += 24;
                  unint64_t v95 = v96;
                }
                while (v96 + 24 != a2);
              }
            }
            else if (!v93)
            {
              unint64_t v163 = v11 + 8;
              do
              {
                unint64_t v164 = v91;
                int8x8_t v165 = *(int8x8_t *)(a1 + 24);
                uint8x8_t v166 = (uint8x8_t)vcnt_s8(v165);
                v166.i16[0] = vaddlv_u8(v166);
                unsigned int v167 = v166.i32[0];
                uint8x8_t v168 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
                v168.i16[0] = vaddlv_u8(v168);
                if (v167 < v168.i32[0]
                  || (*(void *)&v165 < *(void *)a1 ? (BOOL v169 = v167 > v168.i32[0]) : (BOOL v169 = 1), !v169))
                {
                  long long v185 = *(_OWORD *)(a1 + 32);
                  int8x8_t v170 = *(int8x8_t *)a1;
                  for (unint64_t i = v163; ; i -= 24)
                  {
                    *(int8x8_t *)(i + 16) = v170;
                    *(_OWORD *)(i + 24) = *(_OWORD *)i;
                    int8x8_t v170 = *(int8x8_t *)(i - 32);
                    uint8x8_t v172 = (uint8x8_t)vcnt_s8(v170);
                    v172.i16[0] = vaddlv_u8(v172);
                    if (v167 >= v172.i32[0] && (*(void *)&v165 >= *(void *)&v170 || v167 > v172.i32[0])) {
                      break;
                    }
                  }
                  *(int8x8_t *)(i - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v165;
                  *(_OWORD *)unint64_t i = v185;
                }
                unint64_t v91 = v164 + 24;
                v163 += 24;
                a1 = v164;
              }
              while (v164 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v109 = (unint64_t)(v13 - 2) >> 1;
              int64_t v110 = v109;
              do
              {
                int64_t v111 = v110;
                if (v109 >= v110)
                {
                  uint64_t v112 = (2 * v110) | 1;
                  unint64_t v113 = v11 + 24 * v112;
                  if (2 * v111 + 2 < v13)
                  {
                    int8x8_t v117 = *(int8x8_t *)v113;
                    uint8x8_t v114 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v113);
                    v114.i16[0] = vaddlv_u8(v114);
                    unsigned int v119 = v114.i32[0];
                    uint8x8_t v115 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v113 + 24));
                    v115.i16[0] = vaddlv_u8(v115);
                    if (v119 < v115.i32[0]
                      || (v119 <= v115.i32[0] ? (BOOL v116 = *(void *)&v117 >= *(void *)(v113 + 24)) : (BOOL v116 = 1), !v116))
                    {
                      unsigned int v119 = v115.i32[0];
                      int8x8_t v117 = *(int8x8_t *)(v113 + 24);
                      v113 += 24;
                      uint64_t v112 = 2 * v111 + 2;
                    }
                  }
                  else
                  {
                    int8x8_t v117 = *(int8x8_t *)v113;
                    uint8x8_t v118 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v113);
                    v118.i16[0] = vaddlv_u8(v118);
                    unsigned int v119 = v118.i32[0];
                  }
                  unint64_t v120 = v11 + 24 * v111;
                  int8x8_t v121 = *(int8x8_t *)v120;
                  uint8x8_t v122 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v120);
                  v122.i16[0] = vaddlv_u8(v122);
                  unsigned int v123 = v122.i32[0];
                  if (v119 >= v122.i32[0] && (*(void *)&v117 >= *(void *)&v121 || v119 > v122.i32[0]))
                  {
                    long long v183 = *(_OWORD *)(v120 + 8);
                    int8x8_t v125 = *(int8x8_t *)v113;
                    do
                    {
                      unint64_t v126 = v120;
                      unint64_t v120 = v113;
                      *(int8x8_t *)unint64_t v126 = v125;
                      *(_OWORD *)(v126 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v113 + 8);
                      if (v109 < v112) {
                        break;
                      }
                      uint64_t v127 = 2 * v112;
                      uint64_t v112 = (2 * v112) | 1;
                      unint64_t v113 = v11 + 24 * v112;
                      uint64_t v128 = v127 + 2;
                      if (v127 + 2 < v13)
                      {
                        int8x8_t v125 = *(int8x8_t *)v113;
                        uint8x8_t v129 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v113);
                        v129.i16[0] = vaddlv_u8(v129);
                        unsigned int v133 = v129.i32[0];
                        uint8x8_t v130 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v113 + 24));
                        v130.i16[0] = vaddlv_u8(v130);
                        if (v133 < v130.i32[0]
                          || (v133 <= v130.i32[0] ? (BOOL v131 = *(void *)&v125 >= *(void *)(v113 + 24)) : (BOOL v131 = 1),
                              !v131))
                        {
                          unsigned int v133 = v130.i32[0];
                          int8x8_t v125 = *(int8x8_t *)(v113 + 24);
                          v113 += 24;
                          uint64_t v112 = v128;
                        }
                      }
                      else
                      {
                        int8x8_t v125 = *(int8x8_t *)v113;
                        uint8x8_t v132 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v113);
                        v132.i16[0] = vaddlv_u8(v132);
                        unsigned int v133 = v132.i32[0];
                      }
                      if (v133 < v123) {
                        break;
                      }
                    }
                    while (v133 > v123 || *(void *)&v125 >= *(void *)&v121);
                    *(int8x8_t *)unint64_t v120 = v121;
                    *(_OWORD *)(v120 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v183;
                  }
                }
                int64_t v110 = v111 - 1;
              }
              while (v111);
              do
              {
                uint64_t v135 = 0;
                int8x8_t v136 = *(int8x8_t *)v11;
                long long v176 = *(_OWORD *)(v11 + 8);
                unint64_t v137 = v11;
                do
                {
                  unint64_t v138 = v137;
                  v137 += 24 * v135 + 24;
                  uint64_t v139 = 2 * v135;
                  uint64_t v135 = (2 * v135) | 1;
                  uint64_t v140 = v139 + 2;
                  if (v140 < v13)
                  {
                    int8x8_t v145 = *(int8x8_t *)v137;
                    uint8x8_t v141 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v137);
                    v141.i16[0] = vaddlv_u8(v141);
                    unsigned int v142 = v141.i32[0];
                    uint8x8_t v143 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v137 + 24));
                    v143.i16[0] = vaddlv_u8(v143);
                    if (v142 < v143.i32[0]
                      || (v142 <= v143.i32[0] ? (BOOL v144 = *(void *)&v145 >= *(void *)(v137 + 24)) : (BOOL v144 = 1), !v144))
                    {
                      int8x8_t v145 = *(int8x8_t *)(v137 + 24);
                      v137 += 24;
                      uint64_t v135 = v140;
                    }
                  }
                  else
                  {
                    int8x8_t v145 = *(int8x8_t *)v137;
                  }
                  *(int8x8_t *)unint64_t v138 = v145;
                  *(_OWORD *)(v138 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v137 + 8);
                }
                while (v135 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
                int v146 = (long long *)(v137 + 8);
                if (v137 == a2 - 24)
                {
                  *(int8x8_t *)unint64_t v137 = v136;
                  long long *v146 = v176;
                }
                else
                {
                  *(void *)unint64_t v137 = *(void *)(a2 - 24);
                  long long *v146 = *(_OWORD *)(a2 - 16);
                  *(int8x8_t *)(a2 - 24) = v136;
                  *(_OWORD *)(a2 - 16) = v176;
                  uint64_t v147 = v137 - v11 + 24;
                  if (v147 >= 25)
                  {
                    unint64_t v148 = v147 / 0x18uLL - 2;
                    unint64_t v149 = v148 >> 1;
                    unint64_t v150 = v11 + 24 * (v148 >> 1);
                    uint8x8_t v151 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v150);
                    v151.i16[0] = vaddlv_u8(v151);
                    unsigned int v152 = v151.i32[0];
                    int8x8_t v153 = *(int8x8_t *)v137;
                    uint8x8_t v154 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v137);
                    v154.i16[0] = vaddlv_u8(v154);
                    unsigned int v155 = v154.i32[0];
                    if (v152 < v154.i32[0]
                      || (*(void *)v150 < *(void *)&v153 ? (BOOL v156 = v152 > v154.i32[0]) : (BOOL v156 = 1), !v156))
                    {
                      long long v184 = *v146;
                      *(void *)unint64_t v137 = *(void *)v150;
                      uint64_t v157 = (long long *)(v11 + 24 * v149 + 8);
                      long long *v146 = *v157;
                      if (v148 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v159 = v149 - 1;
                          unint64_t v149 = (v149 - 1) >> 1;
                          unsigned int v158 = (int8x8_t *)(v11 + 24 * v149);
                          int8x8_t v160 = *v158;
                          uint8x8_t v161 = (uint8x8_t)vcnt_s8(*v158);
                          v161.i16[0] = vaddlv_u8(v161);
                          if (v161.i32[0] >= v155 && (*(void *)&v160 >= *(void *)&v153 || v161.i32[0] > v155)) {
                            break;
                          }
                          *(int8x8_t *)unint64_t v150 = v160;
                          uint64_t v157 = (long long *)(v11 + 24 * v149 + 8);
                          *(_OWORD *)(v150 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *v157;
                          unint64_t v150 = v11 + 24 * v149;
                          if (v159 < 2) {
                            goto LABEL_224;
                          }
                        }
                      }
                      unsigned int v158 = (int8x8_t *)v150;
LABEL_224:
                      *unsigned int v158 = v153;
                      *uint64_t v157 = v184;
                    }
                  }
                }
                a2 -= 24;
                BOOL v52 = v13-- <= 2;
              }
              while (!v52);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          int v15 = (int8x8_t *)(v11 + 24 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 >= 0xC01)
          {
            sub_1CCBFF60C(a1, a1 + 24 * ((unint64_t)v13 >> 1), a2 - 24);
            unint64_t v16 = a1 + 24 * v14;
            sub_1CCBFF60C(a1 + 24, v16 - 24, a2 - 48);
            sub_1CCBFF60C(a1 + 48, a1 + 24 + 24 * v14, a2 - 72);
            sub_1CCBFF60C(v16 - 24, (uint64_t)v15, a1 + 24 + 24 * v14);
            int8x8_t v17 = *(int8x8_t *)a1;
            *(int8x8_t *)a1 = *v15;
            *int v15 = v17;
            long long v177 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v16 + 8);
            *(_OWORD *)(v16 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v177;
          }
          else
          {
            sub_1CCBFF60C(a1 + 24 * ((unint64_t)v13 >> 1), a1, a2 - 24);
          }
          --a3;
          int8x8_t v18 = *(int8x8_t *)a1;
          if (a4) {
            break;
          }
          uint8x8_t v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 - 24));
          v21.i16[0] = vaddlv_u8(v21);
          unsigned int v22 = v21.i32[0];
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v18);
          v23.i16[0] = vaddlv_u8(v23);
          unsigned int v20 = v23.i32[0];
          if (v22 < v23.i32[0] || *(void *)(a1 - 24) < *(void *)&v18 && v22 <= v23.i32[0]) {
            goto LABEL_14;
          }
          long long v175 = *(_OWORD *)(a1 + 8);
          int8x8_t v47 = *v10;
          uint8x8_t v48 = (uint8x8_t)vcnt_s8(*v10);
          v48.i16[0] = vaddlv_u8(v48);
          if (v20 >= v48.i32[0] && (*(void *)&v18 >= *(void *)&v47 || v20 > v48.i32[0]))
          {
            unint64_t v64 = (int8x8_t *)(a1 + 24);
            do
            {
              unint64_t v11 = (unint64_t)v64;
              if ((unint64_t)v64 >= a2) {
                break;
              }
              int8x8_t v65 = *v64;
              uint8x8_t v66 = (uint8x8_t)vcnt_s8(*v64);
              v66.i16[0] = vaddlv_u8(v66);
              if (v20 < v66.i32[0]) {
                break;
              }
              v64 += 3;
            }
            while (*(void *)&v18 >= *(void *)&v65 || v20 > v66.i32[0]);
          }
          else
          {
            uint64_t v49 = (int8x8_t *)(a1 + 24);
            do
            {
              unint64_t v11 = (unint64_t)v49;
              int8x8_t v50 = *v49;
              uint8x8_t v51 = (uint8x8_t)vcnt_s8(*v49);
              v51.i16[0] = vaddlv_u8(v51);
              if (v20 < v51.i32[0]) {
                break;
              }
              v49 += 3;
              BOOL v52 = *(void *)&v18 >= *(void *)&v50 || v20 > v51.i32[0];
            }
            while (v52);
          }
          unint64_t j = a2;
          if (v11 < a2)
          {
            for (unint64_t j = a2 - 24; ; j -= 24)
            {
              uint8x8_t v54 = (uint8x8_t)vcnt_s8(v47);
              v54.i16[0] = vaddlv_u8(v54);
              if (v20 >= v54.i32[0] && (*(void *)&v18 >= *(void *)&v47 || v20 > v54.i32[0])) {
                break;
              }
              int8x8_t v55 = *(int8x8_t *)(j - 24);
              int8x8_t v47 = v55;
            }
          }
          if (v11 < j)
          {
            int8x8_t v56 = *(int8x8_t *)v11;
            int8x8_t v57 = *(int8x8_t *)j;
            do
            {
              *(int8x8_t *)unint64_t v11 = v57;
              *(int8x8_t *)unint64_t j = v56;
              long long v179 = *(_OWORD *)(v11 + 8);
              *(_OWORD *)(v11 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(j + 8);
              *(_OWORD *)(j + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v179;
              unint64_t v58 = (int8x8_t *)(v11 + 24);
              do
              {
                unint64_t v11 = (unint64_t)v58;
                int8x8_t v56 = *v58;
                uint8x8_t v59 = (uint8x8_t)vcnt_s8(*v58);
                v59.i16[0] = vaddlv_u8(v59);
                if (v20 < v59.i32[0]) {
                  break;
                }
                v58 += 3;
              }
              while (*(void *)&v18 >= *(void *)&v56 || v20 > v59.i32[0]);
              do
              {
                do
                {
                  int8x8_t v61 = *(int8x8_t *)(j - 24);
                  j -= 24;
                  int8x8_t v57 = v61;
                  uint8x8_t v62 = (uint8x8_t)vcnt_s8(v61);
                  v62.i16[0] = vaddlv_u8(v62);
                }
                while (v20 < v62.i32[0]);
              }
              while (*(void *)&v18 < *(void *)&v57 && v20 <= v62.i32[0]);
            }
            while (v11 < j);
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            *(void *)a1 = *(void *)(v11 - 24);
            *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v11 - 16);
          }
          a4 = 0;
          *(int8x8_t *)(v11 - 24) = v18;
          *(_OWORD *)(v11 - 16) = v175;
        }
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
        v19.i16[0] = vaddlv_u8(v19);
        unsigned int v20 = v19.i32[0];
LABEL_14:
        long long v174 = *(_OWORD *)(a1 + 8);
        for (uint64_t k = 24; ; k += 24)
        {
          int8x8_t v25 = *(int8x8_t *)(a1 + k);
          uint8x8_t v26 = (uint8x8_t)vcnt_s8(v25);
          v26.i16[0] = vaddlv_u8(v26);
          if (v20 <= v26.i32[0] && (*(void *)&v25 >= *(void *)&v18 || v20 < v26.i32[0])) {
            break;
          }
        }
        unint64_t v28 = a1 + k;
        uint64_t v29 = (int8x8_t *)(a2 - 24);
        if (k == 24)
        {
          unsigned int v34 = (int8x8_t *)(a2 - 24);
          while (v28 < (unint64_t)&v34[3])
          {
            unsigned int v30 = v34;
            int8x8_t v35 = *v34;
            uint8x8_t v36 = (uint8x8_t)vcnt_s8(*v34);
            v36.i16[0] = vaddlv_u8(v36);
            if (v20 <= v36.i32[0])
            {
              v34 -= 3;
              if (*(void *)&v35 >= *(void *)&v18 || v20 < v36.i32[0]) {
                continue;
              }
            }
            goto LABEL_40;
          }
          unsigned int v30 = v34 + 3;
        }
        else
        {
          do
          {
            unsigned int v30 = v29;
            int8x8_t v31 = *v29;
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(*v29);
            v32.i16[0] = vaddlv_u8(v32);
            if (v20 > v32.i32[0]) {
              break;
            }
            v29 -= 3;
          }
          while (*(void *)&v31 >= *(void *)&v18 || v20 < v32.i32[0]);
        }
LABEL_40:
        if (v28 >= (unint64_t)v30)
        {
          unint64_t v11 = v28;
        }
        else
        {
          int8x8_t v38 = *v30;
          unint64_t v11 = v28;
          uint64_t v39 = v30;
          do
          {
            *(int8x8_t *)unint64_t v11 = v38;
            *uint64_t v39 = v25;
            long long v178 = *(_OWORD *)(v11 + 8);
            *(_OWORD *)(v11 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)v39[1].i8;
            *(_OWORD *)v39[1].i8 = v178;
            do
            {
              do
              {
                int8x8_t v40 = *(int8x8_t *)(v11 + 24);
                v11 += 24;
                int8x8_t v25 = v40;
                uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
                v41.i16[0] = vaddlv_u8(v41);
              }
              while (v20 > v41.i32[0]);
            }
            while (*(void *)&v25 < *(void *)&v18 && v20 >= v41.i32[0]);
            uint64_t v43 = v39 - 3;
            do
            {
              uint64_t v39 = v43;
              int8x8_t v38 = *v43;
              uint8x8_t v44 = (uint8x8_t)vcnt_s8(*v43);
              v44.i16[0] = vaddlv_u8(v44);
              if (v20 > v44.i32[0]) {
                break;
              }
              v43 -= 3;
            }
            while (*(void *)&v38 >= *(void *)&v18 || v20 < v44.i32[0]);
          }
          while (v11 < (unint64_t)v39);
        }
        if (v11 - 24 != a1)
        {
          *(void *)a1 = *(void *)(v11 - 24);
          *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v11 - 16);
        }
        *(int8x8_t *)(v11 - 24) = v18;
        *(_OWORD *)(v11 - 16) = v174;
        if (v28 >= (unint64_t)v30) {
          break;
        }
LABEL_63:
        sub_1CCBFE900(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v46 = sub_1CCBFF7A8(a1, v11 - 24);
      if (sub_1CCBFF7A8(v11, a2)) {
        break;
      }
      if (!v46) {
        goto LABEL_63;
      }
    }
    a2 = v11 - 24;
    if (!v46) {
      continue;
    }
    break;
  }
}

uint64_t sub_1CCBFF60C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int8x8_t v3 = *(int8x8_t *)a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a2);
  v4.i16[0] = vaddlv_u8(v4);
  unsigned int v5 = v4.i32[0];
  int8x8_t v6 = *(int8x8_t *)result;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)result);
  v7.i16[0] = vaddlv_u8(v7);
  if (v5 >= v7.i32[0] && (*(void *)&v3 < *(void *)&v6 ? (BOOL v8 = v5 > v7.i32[0]) : (BOOL v8 = 1), v8))
  {
    int8x8_t v9 = *(int8x8_t *)a3;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a3);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.i32[0] < v5 || (*(void *)&v9 < *(void *)&v3 ? (BOOL v11 = v10.i32[0] > v5) : (BOOL v11 = 1), !v11))
    {
      *(int8x8_t *)a2 = v9;
      *(int8x8_t *)a3 = v3;
      long long v12 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v12;
      int8x8_t v13 = *(int8x8_t *)a2;
      *(int8x8_t *)&long long v12 = vcnt_s8(*(int8x8_t *)a2);
      LOWORD(v12) = vaddlv_u8(*(uint8x8_t *)&v12);
      unsigned int v14 = v12;
      int8x8_t v15 = *(int8x8_t *)result;
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)result);
      v16.i16[0] = vaddlv_u8(v16);
      if (v14 < v16.i32[0] || *(void *)&v13 < *(void *)&v15 && v14 <= v16.i32[0])
      {
        *(int8x8_t *)uint64_t result = v13;
        *(int8x8_t *)a2 = v15;
        long long v17 = *(_OWORD *)(result + 8);
        *(_OWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v17;
      }
    }
  }
  else
  {
    int8x8_t v18 = *(int8x8_t *)a3;
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a3);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.i32[0] < v5 || (*(void *)&v18 < *(void *)&v3 ? (BOOL v20 = v19.i32[0] > v5) : (BOOL v20 = 1), !v20))
    {
      *(int8x8_t *)uint64_t result = v18;
      *(int8x8_t *)a3 = v6;
      long long v26 = *(_OWORD *)(result + 8);
      *(_OWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a3 + 8);
      goto LABEL_27;
    }
    *(int8x8_t *)uint64_t result = v3;
    *(int8x8_t *)a2 = v6;
    long long v21 = *(_OWORD *)(result + 8);
    *(_OWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v21;
    int8x8_t v22 = *(int8x8_t *)a3;
    *(int8x8_t *)&long long v21 = vcnt_s8(*(int8x8_t *)a3);
    LOWORD(v2llvm::StringTableBuilder::finalizeStringTable(this, 1) = vaddlv_u8(*(uint8x8_t *)&v21);
    unsigned int v23 = v21;
    int8x8_t v24 = *(int8x8_t *)a2;
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a2);
    v25.i16[0] = vaddlv_u8(v25);
    if (v23 < v25.i32[0] || *(void *)&v22 < *(void *)&v24 && v23 <= v25.i32[0])
    {
      *(int8x8_t *)a2 = v22;
      *(int8x8_t *)a3 = v24;
      long long v26 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a3 + 8);
LABEL_27:
      *(_OWORD *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v26;
    }
  }
  return result;
}

BOOL sub_1CCBFF7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int8x8_t v6 = *(int8x8_t *)(a2 - 24);
      uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      unsigned int v8 = v7.i32[0];
      int8x8_t v9 = *(int8x8_t *)a1;
      uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
      v10.i16[0] = vaddlv_u8(v10);
      if (v8 < v10.i32[0] || (*(void *)&v6 < *(void *)&v9 ? (BOOL v11 = v8 > v10.i32[0]) : (BOOL v11 = 1), !v11))
      {
        *(int8x8_t *)a1 = v6;
        *(int8x8_t *)(a2 - 24) = v9;
        long long v12 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v12;
      }
      return result;
    case 3uLL:
      sub_1CCBFF60C(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_1CCBFFB58(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1CCBFFB58(a1, a1 + 24, a1 + 48, a1 + 72);
      int8x8_t v30 = *(int8x8_t *)(a2 - 24);
      uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      unsigned int v32 = v31.i32[0];
      int8x8_t v33 = *(int8x8_t *)(a1 + 72);
      uint8x8_t v34 = (uint8x8_t)vcnt_s8(v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v32 >= v34.i32[0])
      {
        BOOL result = 1;
        if (*(void *)&v30 >= *(void *)&v33 || v32 > v34.i32[0]) {
          return result;
        }
      }
      *(int8x8_t *)(a1 + 72) = v30;
      *(int8x8_t *)(a2 - 24) = v33;
      long long v35 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a2 - 16) = v35;
      int8x8_t v36 = *(int8x8_t *)(a1 + 72);
      *(int8x8_t *)&long long v35 = vcnt_s8(v36);
      LOWORD(v35) = vaddlv_u8(*(uint8x8_t *)&v35);
      unsigned int v37 = v35;
      int8x8_t v38 = *(int8x8_t *)(a1 + 48);
      uint8x8_t v39 = (uint8x8_t)vcnt_s8(v38);
      v39.i16[0] = vaddlv_u8(v39);
      if (v37 >= v39.i32[0])
      {
        BOOL result = 1;
        if (*(void *)&v36 >= *(void *)&v38 || v37 > v39.i32[0]) {
          return result;
        }
      }
      *(int8x8_t *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v36;
      *(int8x8_t *)(a1 + 72) = v38;
      long long v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = v40;
      int8x8_t v41 = *(int8x8_t *)(a1 + 24);
      uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
      v42.i16[0] = vaddlv_u8(v42);
      if (v37 >= v42.i32[0])
      {
        BOOL result = 1;
        if (*(void *)&v36 >= *(void *)&v41 || v37 > v42.i32[0]) {
          return result;
        }
      }
      *(int8x8_t *)(a1 + 24) = v36;
      *(int8x8_t *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v41;
      long long v43 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v43;
      int8x8_t v44 = *(int8x8_t *)a1;
      uint8x8_t v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
      v45.i16[0] = vaddlv_u8(v45);
      if (v37 >= v45.i32[0])
      {
        BOOL result = 1;
        if (*(void *)&v36 >= *(void *)&v44 || v37 > v45.i32[0]) {
          return result;
        }
      }
      *(int8x8_t *)a1 = v36;
      *(int8x8_t *)(a1 + 24) = v44;
      long long v46 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v46;
      return 1;
    default:
      uint64_t v13 = a1 + 48;
      sub_1CCBFF60C(a1, a1 + 24, a1 + 48);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int8x8_t v17 = *(int8x8_t *)v14;
    uint8x8_t v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v14);
    v18.i16[0] = vaddlv_u8(v18);
    unsigned int v19 = v18.i32[0];
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v13);
    v20.i16[0] = vaddlv_u8(v20);
    if (v19 < v20.i32[0] || (*(void *)&v17 < *(void *)v13 ? (BOOL v21 = v19 > v20.i32[0]) : (BOOL v21 = 1), !v21))
    {
      long long v47 = *(_OWORD *)(v14 + 8);
      *(void *)uint64_t v14 = *(void *)v13;
      *(_OWORD *)(v14 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(v13 + 8);
      if (v13 == a1)
      {
        unsigned int v27 = (_OWORD *)(v13 + 8);
LABEL_25:
        unint64_t v28 = (void *)a1;
      }
      else
      {
        uint64_t v22 = v15;
        while (1)
        {
          uint64_t v23 = a1 + v22;
          int8x8_t v24 = *(int8x8_t *)(a1 + v22 + 24);
          uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          if (v19 >= v25.i32[0] && (*(void *)&v17 >= *(void *)&v24 || v19 > v25.i32[0])) {
            break;
          }
          *(int8x8_t *)(v23 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v24;
          *(_OWORD *)(v23 + 56) = *(_OWORD *)(v23 + 32);
          v22 -= 24;
          if (v22 == -48)
          {
            unsigned int v27 = (_OWORD *)(a1 + 8);
            goto LABEL_25;
          }
        }
        uint64_t v29 = a1 + v22;
        unsigned int v27 = (_OWORD *)(v29 + 56);
        unint64_t v28 = (void *)(v29 + 48);
      }
      *unint64_t v28 = v17;
      *unsigned int v27 = v47;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 sub_1CCBFFB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CCBFF60C(a1, a2, a3);
  int8x8_t v8 = *(int8x8_t *)a4;
  result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a4);
  result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
  unsigned __int32 v9 = result.n128_u32[0];
  int8x8_t v10 = *(int8x8_t *)a3;
  result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a3);
  result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
  if (v9 < result.n128_u32[0] || (*(void *)&v8 < *(void *)&v10 ? (BOOL v12 = v9 > result.n128_u32[0]) : (BOOL v12 = 1), !v12))
  {
    *(int8x8_t *)a3 = v8;
    *(int8x8_t *)a4 = v10;
    __n128 result = *(__n128 *)(a3 + 8);
    *(_OWORD *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a4 + 8);
    *(__n128 *)(a4 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = result;
    int8x8_t v13 = *(int8x8_t *)a3;
    result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a3);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    unsigned __int32 v14 = result.n128_u32[0];
    int8x8_t v15 = *(int8x8_t *)a2;
    result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a2);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    if (v14 < result.n128_u32[0]
      || (*(void *)&v13 < *(void *)&v15 ? (BOOL v16 = v14 > result.n128_u32[0]) : (BOOL v16 = 1), !v16))
    {
      *(int8x8_t *)a2 = v13;
      *(int8x8_t *)a3 = v15;
      __n128 result = *(__n128 *)(a2 + 8);
      *(_OWORD *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a3 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = result;
      int8x8_t v17 = *(int8x8_t *)a2;
      result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a2);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      unsigned __int32 v18 = result.n128_u32[0];
      int8x8_t v19 = *(int8x8_t *)a1;
      result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a1);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      if (v18 < result.n128_u32[0] || *(void *)&v17 < *(void *)&v19 && v18 <= result.n128_u32[0])
      {
        *(int8x8_t *)a1 = v17;
        *(int8x8_t *)a2 = v19;
        __n128 result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1CCBFFCA0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631EA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1CCBFFCF0(uint64_t a1)
{
  *(void *)a1 = &unk_1F2631EA8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1D25D9CE0);
}

llvm::raw_ostream *sub_1CCBFFD60(uint64_t a1, llvm::raw_ostream *this)
{
  unsigned int v5 = *(const char **)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  char v6 = *(unsigned char *)(v3 + 23);
  int v7 = v6;
  if (v6 >= 0) {
    int8x8_t v8 = (const char *)v3;
  }
  else {
    int8x8_t v8 = v4;
  }
  size_t v9 = v6 & 0x7F;
  if (v7 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = *(void *)(v3 + 8);
  }
  return llvm::raw_ostream::write(this, v8, v10);
}

void *sub_1CCBFFD90()
{
  return &llvm::mca::InstructionError<llvm::MCInst>::ID;
}

BOOL sub_1CCBFFD9C(uint64_t a1, void *a2)
{
  return a2 == &llvm::mca::InstructionError<llvm::MCInst>::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void sub_1CCBFFDBC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 20 * v2), 20 * ((20 * (a2 - v2) - 20) / 0x14) + 20);
      }
    }
    *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v3;
  }
}

void sub_1CCBFFE50(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 16 * v2), 16 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v3;
  }
}

unsigned __int16 *sub_1CCBFFEC4(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = *a2;
    unsigned int v6 = (37 * v5) & (v4 - 1);
    __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v6);
    int v8 = *result;
    if (v5 == v8) {
      return result;
    }
    size_t v9 = 0;
    int v10 = 1;
    while (v8 != 0xFFFF)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == 65534;
      }
      if (v11) {
        size_t v9 = result;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & (v4 - 1);
      __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v6);
      int v8 = *result;
      if (v5 == v8) {
        return result;
      }
    }
    if (v9) {
      __n128 result = v9;
    }
  }
  else
  {
    __n128 result = 0;
  }
  int v13 = *(_DWORD *)(a1 + 8);
  if (4 * v13 + 4 >= 3 * v4)
  {
    sub_1CCC000D0((unsigned __int16 **)a1, 2 * v4);
    int v14 = *a2;
    int v15 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v16 = (37 * v14) & v15;
    __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v16);
    int v17 = *result;
    if (v14 == v17) {
      goto LABEL_16;
    }
    unsigned __int32 v18 = 0;
    int v19 = 1;
    while (v17 != 0xFFFF)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == 65534;
      }
      if (v20) {
        unsigned __int32 v18 = result;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v16);
      int v17 = *result;
      if (v14 == v17) {
        goto LABEL_16;
      }
    }
    goto LABEL_43;
  }
  if (v4 + ~v13 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1CCC000D0((unsigned __int16 **)a1, v4);
    int v14 = *a2;
    int v22 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v23 = (37 * v14) & v22;
    __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v23);
    int v24 = *result;
    if (v14 == v24) {
      goto LABEL_16;
    }
    unsigned __int32 v18 = 0;
    int v25 = 1;
    while (v24 != 0xFFFF)
    {
      if (v18) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v24 == 65534;
      }
      if (v26) {
        unsigned __int32 v18 = result;
      }
      unsigned int v27 = v23 + v25++;
      unsigned int v23 = v27 & v22;
      __n128 result = (unsigned __int16 *)(*(void *)a1 + 16 * v23);
      int v24 = *result;
      if (v14 == v24) {
        goto LABEL_16;
      }
    }
LABEL_43:
    if (v18) {
      __n128 result = v18;
    }
  }
  int v14 = *result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v14 != 0xFFFF) {
    --*(_DWORD *)(a1 + 12);
  }
  *__n128 result = *a2;
  *((void *)result + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
  return result;
}

unsigned __int16 *sub_1CCC000D0(unsigned __int16 **a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  unsigned int v4 = *a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = (unsigned __int16 *)operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *__n128 result = -1;
        result += 8;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      unsigned int v12 = v4;
      int v13 = &v4[8 * v3];
      do
      {
        unsigned int v14 = *v12;
        if (v14 <= 0xFFFD)
        {
          int v15 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v16 = v15 & (37 * v14);
          int v17 = &(*a1)[8 * v16];
          int v18 = *v17;
          if (v14 != v18)
          {
            unsigned int v23 = 0;
            int v24 = 1;
            while (v18 != 0xFFFF)
            {
              if (v23) {
                BOOL v25 = 0;
              }
              else {
                BOOL v25 = v18 == 65534;
              }
              if (v25) {
                unsigned int v23 = v17;
              }
              unsigned int v26 = v16 + v24++;
              unsigned int v16 = v26 & v15;
              int v17 = &(*a1)[8 * (v26 & v15)];
              int v18 = *v17;
              if (v14 == v18) {
                goto LABEL_12;
              }
            }
            if (v23) {
              int v17 = v23;
            }
          }
LABEL_12:
          *int v17 = v14;
          uint64_t v19 = *((void *)v12 + 1);
          *((void *)v12 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
          *((void *)v17 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = v19;
          ++*((_DWORD *)a1 + 2);
          uint64_t v20 = *((void *)v12 + 1);
          *((void *)v12 + llvm::StringTableBuilder::finalizeStringTable(this, 1) = 0;
          if (v20)
          {
            unsigned int v21 = *(void **)(v20 + 136);
            if (v21 != (void *)(v20 + 152)) {
              free(v21);
            }
            int v22 = *(void **)(v20 + 56);
            if (v22 != (void *)(v20 + 72)) {
              free(v22);
            }
            if (*(void *)v20 != v20 + 16) {
              free(*(void **)v20);
            }
            MEMORY[0x1D25D9CE0](v20, 0x1080C40CEB3F022);
          }
        }
        v12 += 8;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v27 = *((unsigned int *)a1 + 4);
  if (v27)
  {
    uint64_t v28 = 16 * v27;
    do
    {
      *__n128 result = -1;
      result += 8;
      v28 -= 16;
    }
    while (v28);
  }
  return result;
}

uint64_t *sub_1CCC002F0(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  __n128 result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CCC003CC(a1, v7);
    unsigned int v8 = 0;
    sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    __n128 result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *__n128 result = *a2;
  result[1] = 0;
  return result;
}

void *sub_1CCC003CC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *__n128 result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      unsigned int v12 = (uint64_t *)(v4 + 8);
      uint64_t v13 = 16 * v3;
      do
      {
        uint64_t v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v22 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          int v15 = v22;
          *int v22 = *(v12 - 1);
          uint64_t v16 = *v12;
          uint64_t *v12 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          uint64_t v17 = *v12;
          uint64_t *v12 = 0;
          if (v17)
          {
            int v18 = *(void **)(v17 + 136);
            if (v18 != (void *)(v17 + 152)) {
              free(v18);
            }
            uint64_t v19 = *(void **)(v17 + 56);
            if (v19 != (void *)(v17 + 72)) {
              free(v19);
            }
            if (*(void *)v17 != v17 + 16) {
              free(*(void **)v17);
            }
            MEMORY[0x1D25D9CE0](v17, 0x1080C40CEB3F022);
          }
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  if (v20)
  {
    uint64_t v21 = 16 * v20;
    do
    {
      *__n128 result = -4096;
      result += 2;
      v21 -= 16;
    }
    while (v21);
  }
  return result;
}

void sub_1CCC00580(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1 + 136 * v2;
    unint64_t v5 = (uint64_t *)(a2 + 56);
    uint64_t v6 = *a1 + 56;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 56);
      long long v8 = *(_OWORD *)(v6 - 40);
      uint64_t v9 = *(void *)(v6 - 8);
      *(_OWORD *)(v5 - 3) = *(_OWORD *)(v6 - 24);
      *(_OWORD *)(v5 - 5) = v8;
      *(_OWORD *)(v5 - 7) = v7;
      *(v5 - llvm::StringTableBuilder::finalizeStringTable(this, 1) = v9;
      uint64_t *v5 = (uint64_t)(v5 + 2);
      v5[1] = 0x400000000;
      if (*(_DWORD *)(v6 + 8)) {
        sub_1CCC0065C(v5, (uint64_t *)v6);
      }
      uint64_t v10 = v6 - 56;
      v5 += 17;
      v6 += 136;
    }
    while (v10 + 136 != v4);
    uint64_t v11 = *((unsigned int *)a1 + 2);
    if (v11)
    {
      uint64_t v12 = *a1;
      uint64_t v13 = 136 * v11;
      do
      {
        uint64_t v14 = *(void **)(v12 + v13 - 80);
        if ((void *)(v12 + v13 - 64) != v14) {
          free(v14);
        }
        v13 -= 136;
      }
      while (v13);
    }
  }
}

uint64_t *sub_1CCC0065C(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *((unsigned int *)a2 + 2);
    uint64_t v4 = *((unsigned int *)a1 + 2);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v5 = *a2;
        uint64_t v6 = *a2 + 16 * v3;
        uint64_t v7 = *a1;
        do
        {
          *(void *)uint64_t v7 = *(void *)v5;
          *(_DWORD *)(v7 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(v5 + 8);
          v5 += 16;
          v7 += 16;
        }
        while (v5 != v6);
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 3) < v3)
      {
        *((_DWORD *)a1 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v8 = *a2;
        uint64_t v9 = *a2 + 16 * v4;
        uint64_t v10 = *a1;
        do
        {
          *(void *)uint64_t v10 = *(void *)v8;
          *(_DWORD *)(v10 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_DWORD *)(v8 + 8);
          v8 += 16;
          v10 += 16;
        }
        while (v8 != v9);
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (v4 != v3) {
        memcpy((void *)(*a1 + 16 * v4), (const void *)(*a2 + 16 * v4), *a2 + 16 * v3 - (*a2 + 16 * v4));
      }
    }
    *((_DWORD *)a1 + 2) = v3;
  }
  return a1;
}

uint64_t llvm::mca::WriteState::writeStartEvent(uint64_t this, int a2, __int16 a3, int a4)
{
  *(_WORD *)(this + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = a3;
  *(_DWORD *)(this + 52) = a4;
  *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = a4;
  *(_DWORD *)(this + 44) = a2;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t llvm::mca::ReadState::writeStartEvent(uint64_t this, int a2, __int16 a3, unsigned int a4)
{
  int v4 = *(_DWORD *)(this + 16) - 1;
  *(_DWORD *)(this + 16) = v4;
  unsigned int v5 = *(_DWORD *)(this + 24);
  if (v5 >= a4)
  {
    if (v4) {
      return this;
    }
LABEL_5:
    *(_DWORD *)(this + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v5;
    *(unsigned char *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v5 == 0;
    return this;
  }
  *(_WORD *)(this + 32) = a3;
  *(_DWORD *)(this + 36) = a4;
  unsigned int v5 = a4;
  *(_DWORD *)(this + 24) = a4;
  *(_DWORD *)(this + 2MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
  if (!v4) {
    goto LABEL_5;
  }
  return this;
}

uint64_t llvm::mca::WriteState::onInstructionIssued(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(*(void *)this + 4);
  *(_DWORD *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v2;
  uint64_t v3 = *(unsigned int *)(this + 64);
  if (v3)
  {
    int v4 = *(_DWORD **)(this + 56);
    unsigned int v5 = &v4[4 * v3];
    __int16 v6 = *(_WORD *)(this + 12);
    do
    {
      uint64_t v7 = *(void *)v4;
      unsigned int v8 = (v2 - v4[2]) & ~((v2 - v4[2]) >> 31);
      int v9 = *(_DWORD *)(*(void *)v4 + 16) - 1;
      *(_DWORD *)(v7 + 16) = v9;
      unsigned int v10 = *(_DWORD *)(v7 + 24);
      if (v10 < v8)
      {
        *(_WORD *)(v7 + 32) = v6;
        *(_DWORD *)(v7 + 36) = v8;
        unsigned int v10 = v8;
        *(_DWORD *)(v7 + 24) = v8;
        *(_DWORD *)(v7 + 2MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
      }
      if (!v9)
      {
        *(_DWORD *)(v7 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v10;
        *(unsigned char *)(v7 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v10 == 0;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  uint64_t v11 = *(void *)(this + 32);
  if (v11)
  {
    *(_WORD *)(v11 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(_WORD *)(this + 12);
    *(_DWORD *)(v11 + 52) = v2;
    *(_DWORD *)(v11 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v2;
    *(_DWORD *)(v11 + 44) = a2;
    *(void *)(v11 + 24) = 0;
  }
  return this;
}

uint64_t llvm::mca::WriteState::addUser(uint64_t this, int a2, llvm::mca::ReadState *a3, unsigned int a4)
{
  unsigned int v10 = a3;
  unsigned int v9 = a4;
  int v4 = *(_DWORD *)(this + 8);
  if (v4 == -512) {
    return sub_1CCC008EC(this + 56, &v10, &v9);
  }
  unsigned int v5 = (v4 - a4) & ~((int)(v4 - a4) >> 31);
  __int16 v6 = *(_WORD *)(this + 12);
  int v7 = *((_DWORD *)a3 + 4) - 1;
  *((_DWORD *)a3 + 4) = v7;
  unsigned int v8 = *((_DWORD *)a3 + 6);
  if (v8 < v5)
  {
    *((_WORD *)a3 + 16) = v6;
    *((_DWORD *)a3 + 9) = v5;
    unsigned int v8 = v5;
    *((_DWORD *)a3 + 6) = v5;
    *((_DWORD *)a3 + 7) = a2;
  }
  if (!v7)
  {
    *((_DWORD *)a3 + 5) = v8;
    *((unsigned char *)a3 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v8 == 0;
  }
  return this;
}

uint64_t sub_1CCC008EC(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    return sub_1CCC00E18(a1, a2, a3);
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)a1 + 16 * v3;
  *(void *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *a3;
  unsigned int v6 = v3 + 1;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t llvm::mca::WriteState::addUser(uint64_t this, int a2, llvm::mca::WriteState *a3)
{
  int v3 = *(_DWORD *)(this + 8);
  if (v3 == -512)
  {
    *(void *)(this + 32) = a3;
  }
  else
  {
    *((_WORD *)a3 + 24) = *(_WORD *)(this + 12);
    int v4 = v3 & ~(v3 >> 31);
    *((_DWORD *)a3 + 13) = v4;
    *((_DWORD *)a3 + 1llvm::StringTableBuilder::finalizeStringTable(this, 0) = v4;
    *((_DWORD *)a3 + 1llvm::StringTableBuilder::finalizeStringTable(this, 1) = a2;
    this = 0;
  }
  *((void *)a3 + 3) = this;
  return this;
}

uint64_t llvm::mca::WriteState::cycleEvent(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 8);
  if (v1 != -512) {
    *(_DWORD *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v1 - 1;
  }
  int v2 = *(_DWORD *)(this + 40);
  if (v2) {
    *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v2 - 1;
  }
  return this;
}

uint64_t llvm::mca::ReadState::cycleEvent(uint64_t this)
{
  if (*(_DWORD *)(this + 16) && (int v1 = *(_DWORD *)(this + 24)) != 0)
  {
    *(_DWORD *)(this + 24) = v1 - 1;
  }
  else
  {
    int v2 = *(_DWORD *)(this + 20);
    if (v2 != -512 && v2 != 0)
    {
      int v4 = v2 - 1;
      *(_DWORD *)(this + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v4;
      *(unsigned char *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = v4 == 0;
    }
  }
  return this;
}

uint64_t llvm::mca::Instruction::computeCriticalRegDep(llvm::mca::Instruction *this)
{
  uint64_t result = (uint64_t)this + 568;
  if (!*((_DWORD *)this + 144))
  {
    uint64_t v3 = *((unsigned int *)this + 6);
    if (v3)
    {
      uint64_t v4 = 136 * v3;
      uint64_t v5 = (_DWORD *)(*((void *)this + 2) + 52);
      do
      {
        if (*v5)
        {
          uint64_t v6 = *((void *)v5 - 1);
          *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *v5;
          *(void *)uint64_t result = v6;
        }
        v5 += 34;
        v4 -= 136;
      }
      while (v4);
    }
    uint64_t v7 = *((unsigned int *)this + 78);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 38);
      uint64_t v9 = 48 * v7;
      unsigned int v10 = (_DWORD *)(v8 + 36);
      do
      {
        if (*v10)
        {
          uint64_t v11 = *((void *)v10 - 1);
          *(_DWORD *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *v10;
          *(void *)uint64_t result = v11;
        }
        v10 += 12;
        v9 -= 48;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t llvm::mca::Instruction::dispatch(llvm::mca::Instruction *this, int a2)
{
  *((_DWORD *)this + 136) = 1;
  *((_DWORD *)this + 13MEMORY[0x1D25D9CD0](*(void *)this, 8) = a2;
  uint64_t result = llvm::mca::Instruction::updateDispatched(this);
  if (result)
  {
    return llvm::mca::Instruction::updatePending(this);
  }
  return result;
}

uint64_t llvm::mca::Instruction::updateDispatched(llvm::mca::Instruction *this)
{
  uint64_t v1 = *((unsigned int *)this + 78);
  if (v1)
  {
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (unsigned char *)(*((void *)this + 38) + 42);
    while (1)
    {
      BOOL v4 = *v3 || *(_DWORD *)(v3 - 22) <= 0;
      if (v4 && !*(v3 - 2)) {
        break;
      }
      v3 += 48;
      v2 -= 48;
      if (!v2) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v5 = *((unsigned int *)this + 6);
    if (!v5)
    {
LABEL_14:
      *((_DWORD *)this + 136) = 2;
      return 1;
    }
    uint64_t v6 = (void *)(*((void *)this + 2) + 24);
    uint64_t v7 = 136 * v5;
    while (!*v6)
    {
      v6 += 17;
      v7 -= 136;
      if (!v7) {
        goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t llvm::mca::Instruction::updatePending(llvm::mca::Instruction *this)
{
  uint64_t v1 = *((unsigned int *)this + 78);
  if (v1)
  {
    uint64_t v2 = (unsigned __int8 *)(*((void *)this + 38) + 40);
    uint64_t v3 = 48 * v1;
    while (1)
    {
      int v4 = *v2;
      v2 += 48;
      if (!v4) {
        break;
      }
      v3 -= 48;
      if (!v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 6);
    if (!v5)
    {
LABEL_11:
      *((_DWORD *)this + 136) = 3;
      return 1;
    }
    uint64_t v6 = 136 * v5;
    uint64_t v7 = (_DWORD *)(*((void *)this + 2) + 40);
    while (!*((void *)v7 - 2) && (!*v7 || *v7 < *(_DWORD *)(*((void *)v7 - 5) + 4)))
    {
      v7 += 34;
      v6 -= 136;
      if (!v6) {
        goto LABEL_11;
      }
    }
  }
  return 0;
}

uint64_t llvm::mca::Instruction::execute(uint64_t this, int a2)
{
  uint64_t v2 = this;
  *(_DWORD *)(this + 544) = 4;
  int v3 = *(_DWORD *)(*(void *)this + 280);
  *(_DWORD *)(this + 54MEMORY[0x1D25D9CD0](*(void *)this, 8) = v3;
  uint64_t v4 = *(unsigned int *)(this + 24);
  if (v4)
  {
    uint64_t v6 = *(void *)(this + 16);
    uint64_t v7 = 136 * v4;
    do
    {
      this = llvm::mca::WriteState::onInstructionIssued(v6, a2);
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
    int v3 = *(_DWORD *)(v2 + 548);
  }
  if (!v3) {
    *(_DWORD *)(v2 + 544) = 5;
  }
  return this;
}

double llvm::mca::Instruction::forceExecuted(llvm::mca::Instruction *this)
{
  *(void *)&double result = 5;
  *((void *)this + 6MEMORY[0x1D25D9CD0](*(void *)this, 8) = 5;
  return result;
}

llvm::mca::Instruction *llvm::mca::Instruction::update(llvm::mca::Instruction *this)
{
  uint64_t v1 = this;
  int v2 = *((_DWORD *)this + 136);
  if (v2 == 1)
  {
    this = (llvm::mca::Instruction *)llvm::mca::Instruction::updateDispatched(this);
    int v2 = *((_DWORD *)v1 + 136);
  }
  if (v2 == 2)
  {
    return (llvm::mca::Instruction *)llvm::mca::Instruction::updatePending(v1);
  }
  return this;
}

uint64_t llvm::mca::Instruction::cycleEvent(uint64_t this)
{
  uint64_t v1 = (llvm::mca::Instruction *)this;
  int v2 = *(_DWORD *)(this + 544);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 3)
    {
      uint64_t v14 = *(unsigned int *)(this + 24);
      if (v14)
      {
        uint64_t v15 = 136 * v14;
        uint64_t v16 = (_DWORD *)(*(void *)(this + 16) + 40);
        do
        {
          int v17 = *(v16 - 8);
          if (v17 != -512) {
            *(v16 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v17 - 1;
          }
          if (*v16) {
            --*v16;
          }
          v16 += 34;
          v15 -= 136;
        }
        while (v15);
      }
      int v18 = *(_DWORD *)(this + 548) - 1;
      *(_DWORD *)(this + 54MEMORY[0x1D25D9CD0](*(void *)this, 8) = v18;
      if (!v18) {
        *(_DWORD *)(this + 544) = 5;
      }
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(this + 312);
    if (v3)
    {
      uint64_t v4 = 48 * v3;
      uint64_t v5 = *(void *)(this + 304) + 20;
      do
      {
        if (*(_DWORD *)(v5 - 4) && (int v6 = *(_DWORD *)(v5 + 4)) != 0)
        {
          *(_DWORD *)(v5 + 4) = v6 - 1;
        }
        else
        {
          int v7 = *(_DWORD *)v5;
          if (*(_DWORD *)v5 != -512 && v7 != 0)
          {
            int v9 = v7 - 1;
            *(_DWORD *)uint64_t v5 = v9;
            *(unsigned char *)(v5 + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = v9 == 0;
          }
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    uint64_t v10 = *(unsigned int *)(this + 24);
    if (v10)
    {
      uint64_t v11 = 136 * v10;
      uint64_t v12 = (_DWORD *)(*(void *)(this + 16) + 40);
      do
      {
        int v13 = *(v12 - 8);
        if (v13 != -512) {
          *(v12 - MEMORY[0x1D25D9CD0](*(void *)this, 8) = v13 - 1;
        }
        if (*v12) {
          --*v12;
        }
        v12 += 34;
        v11 -= 136;
      }
      while (v11);
    }
    if (v2 == 1)
    {
      this = llvm::mca::Instruction::updateDispatched((llvm::mca::Instruction *)this);
      int v2 = *((_DWORD *)v1 + 136);
    }
    if (v2 == 2)
    {
      return llvm::mca::Instruction::updatePending(v1);
    }
  }
  return this;
}

uint64_t sub_1CCC00E18(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v5 = (void *)(*(void *)a1 + 16 * v4);
  void *v5 = *a2;
  v5[1] = v3;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v5;
  return *(void *)a1 + 16 * v5 - 16;
}

uint64_t **llvm::mca::Pipeline::addEventListener(uint64_t **this, llvm::mca::HWEventListener *a2)
{
  uint64_t v2 = (uint64_t)this;
  int v7 = (uint64_t *)a2;
  if (a2) {
    this = sub_1CCC01548(this + 10, (unint64_t *)&v7, &v7);
  }
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3)
  {
    unsigned int v4 = *(uint64_t **)v2;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v8 = v7;
      this = sub_1CCC01548((uint64_t **)(v6 + 16), (unint64_t *)&v8, &v8);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::mca::Pipeline::hasWorkToProcess(uint64_t **this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *this;
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    if (result) {
      break;
    }
    uint64_t v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t llvm::mca::Pipeline::run@<X0>(llvm::mca::Pipeline *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)this + 88;
  while (1)
  {
    uint64_t v5 = (char *)*((void *)this + 10);
    if (v5 != v4)
    {
      do
      {
        (***((void (****)(void))v5 + 4))(*((void *)v5 + 4));
        uint64_t v6 = (char *)*((void *)v5 + 1);
        if (v6)
        {
          do
          {
            int v7 = v6;
            uint64_t v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            int v7 = (char *)*((void *)v5 + 2);
            BOOL v8 = *(void *)v7 == (void)v5;
            uint64_t v5 = v7;
          }
          while (!v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
    }
    uint64_t result = (uint64_t)llvm::mca::Pipeline::runCycle((uint64_t **)this, &v20);
    uint64_t v10 = v20;
    if (v20)
    {
      *(unsigned char *)(a2 + 8) |= 1u;
      *(void *)a2 = v10;
      return result;
    }
    uint64_t v11 = (char *)*((void *)this + 10);
    if (v11 != v4)
    {
      do
      {
        uint64_t result = (*(uint64_t (**)(void))(**((void **)v11 + 4) + 8))(*((void *)v11 + 4));
        uint64_t v12 = (char *)*((void *)v11 + 1);
        if (v12)
        {
          do
          {
            int v13 = v12;
            uint64_t v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (char *)*((void *)v11 + 2);
            BOOL v8 = *(void *)v13 == (void)v11;
            uint64_t v11 = v13;
          }
          while (!v8);
        }
        uint64_t v11 = v13;
      }
      while (v13 != v4);
    }
    ++*((_DWORD *)this + 26);
    uint64_t v14 = *((unsigned int *)this + 2);
    if (!v14) {
      break;
    }
    uint64_t v15 = *(void *)this;
    uint64_t v16 = 8 * v14;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v15 + 24))();
      if (result) {
        break;
      }
      v15 += 8;
      v16 -= 8;
      if (!v16) {
        goto LABEL_21;
      }
    }
  }
LABEL_21:
  int v17 = (char *)*((void *)this + 10);
  if (v17 != v4)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)v17 + 4) + 16))(*((void *)v17 + 4));
      int v18 = (char *)*((void *)v17 + 1);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          int v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (char *)*((void *)v17 + 2);
          BOOL v8 = *(void *)v19 == (void)v17;
          int v17 = v19;
        }
        while (!v8);
      }
      int v17 = v19;
    }
    while (v19 != v4);
  }
  *(unsigned char *)(a2 + 8) &= ~1u;
  *(_DWORD *)a2 = *((_DWORD *)this + 26);
  return result;
}

uint64_t llvm::mca::Pipeline::notifyCycleBegin(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 80);
  uint64_t v2 = (void *)(this + 88);
  if (v1 != (void *)(this + 88))
  {
    do
    {
      this = (**(uint64_t (***)(void))v1[4])(v1[4]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

void *llvm::mca::Pipeline::runCycle@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = *this;
  uint64_t v5 = *((unsigned int *)this + 2);
  if (!v5)
  {
    LODWORD(v17) = 0;
    uint64_t v18 = 0;
LABEL_8:
    uint64_t v9 = *v4;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v17);
      if (!result) {
        break;
      }
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(void *)v9 + 48))(&v16, v9, &v17);
      uint64_t v10 = v16;
      *a2 = v16;
    }
    while (!v10);
    uint64_t v4 = *this;
    goto LABEL_12;
  }
  uint64_t v6 = 8 * v5 - 8;
  do
  {
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)((char *)v4 + v6) + 32))(&v17);
    uint64_t v8 = v17;
    *a2 = v17;
    if (!v6) {
      break;
    }
    v6 -= 8;
  }
  while (!v8);
  uint64_t v4 = *this;
  LODWORD(v17) = 0;
  uint64_t v18 = 0;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_12:
  uint64_t v11 = *((unsigned int *)this + 2);
  if (v11)
  {
    uint64_t v12 = 8 * v11 - 8;
    do
    {
      uint64_t v13 = *v4++;
      uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v13 + 40))(&v16);
      uint64_t v14 = v16;
      *a2 = v16;
      if (v14) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = v12 == 0;
      }
      v12 -= 8;
    }
    while (!v15);
  }
  return result;
}

uint64_t llvm::mca::Pipeline::notifyCycleEnd(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 80);
  uint64_t v2 = (void *)(this + 88);
  if (v1 != (void *)(this + 88))
  {
    do
    {
      this = (*(uint64_t (**)(void))(*(void *)v1[4] + 8))(v1[4]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t llvm::mca::Pipeline::notifyFinished(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 80);
  uint64_t v2 = (void *)(this + 88);
  if (v1 != (void *)(this + 88))
  {
    do
    {
      this = (*(uint64_t (**)(void))(*(void *)v1[4] + 16))(v1[4]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

void llvm::mca::Pipeline::appendStage(uint64_t a1, char *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2) {
    *(void *)(*(void *)(*(void *)a1 + 8 * v2 - 8) + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(void *)a2;
  }
  sub_1CCC014C0(a1, a2);
}

void sub_1CCC014C0(uint64_t a1, char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v8 = v4 + 1;
    unint64_t v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      uint64_t v11 = &a2[-v5];
      sub_1CCC01628(a1, v8);
      unint64_t v5 = *(void *)a1;
      a2 = &v11[*(void *)a1];
    }
    else
    {
      sub_1CCC01628(a1, v8);
      unint64_t v5 = *(void *)a1;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = v6 + 1;
}

uint64_t **sub_1CCC01548(uint64_t **a1, unint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)v8;
    unint64_t v8 = (uint64_t **)operator new(0x28uLL);
    void v8[4] = *a3;
    *unint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *uint64_t v6 = (uint64_t *)v8;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    sub_1CB8358B8(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

void sub_1CCC01628(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  unint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 8 * v9;
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = *v8;
      *v8++ = 0;
      *v12++ = v13;
      v11 -= 8;
    }
    while (v11);
    uint64_t v14 = *(void *)a1 - 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + v10);
      *(void *)(v14 + v1llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      v10 -= 8;
    }
    while (v10);
    unint64_t v8 = *(uint64_t **)a1;
  }
  if (v8 != (uint64_t *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::mca::DispatchStage::DispatchStage(uint64_t this, const llvm::MCSubtargetInfo *a2, const llvm::MCRegisterInfo *a3, int a4, llvm::mca::RetireControlUnit *a5, llvm::mca::RegisterFile *a6)
{
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(this + 16) = this + 24;
  *(void *)this = &unk_1F2631EF8;
  *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = a4;
  *(_DWORD *)(this + 44) = a4;
  *(_DWORD *)(this + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = a2;
  *(void *)(this + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = a5;
  *(void *)(this + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = a6;
  if (!a4) {
    *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = **((_DWORD **)a2 + 20);
  }
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(this + 16) = this + 24;
  *(void *)this = &unk_1F2631EF8;
  *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = a4;
  *(_DWORD *)(this + 44) = a4;
  *(_DWORD *)(this + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = a2;
  *(void *)(this + 8llvm::StringTableBuilder::finalizeStringTable(this, 0) = a5;
  *(void *)(this + 8MEMORY[0x1D25D9CD0](*(void *)this, 8) = a6;
  if (!a4) {
    *(_DWORD *)(this + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = **((_DWORD **)a2 + 20);
  }
  return this;
}

uint64_t llvm::mca::DispatchStage::notifyInstructionDispatched(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = 6;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  int v14 = a5;
  uint64_t v5 = *(void **)(result + 16);
  uint64_t v6 = (void *)(result + 24);
  if (v5 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v5[4] + 24))(v5[4], &v10);
      unint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

BOOL llvm::mca::DispatchStage::checkPRF(void *a1, uint64_t a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  long long v22 = xmmword_1CDB159A0;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 24);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 136 * v5;
    unint64_t v8 = (__int16 *)(*(void *)(v4 + 16) + 12);
    do
    {
      __int16 v10 = *v8;
      v8 += 68;
      __int16 v9 = v10;
      if (v6 >= *((void *)&v22 + 1))
      {
        if (v6 + 1 > *((void *)&v22 + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *((_WORD *)v21 + v6) = v9;
        unint64_t v6 = v22;
      }
      else
      {
        *((_WORD *)v21 + v6) = v9;
      }
      *(void *)&long long v22 = ++v6;
      v7 -= 136;
    }
    while (v7);
    uint64_t v11 = (unsigned __int16 *)v21;
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v11 = (unsigned __int16 *)v23;
  }
  int isAvailable = llvm::mca::RegisterFile::isAvailable(a1[11], v11, v6);
  if (isAvailable)
  {
    int v19 = 1;
    uint64_t v20 = a2;
    uint64_t v13 = (void *)a1[2];
    int v14 = a1 + 3;
    if (v13 != v14)
    {
      do
      {
        (*(void (**)(void, int *))(*(void *)v13[4] + 32))(v13[4], &v19);
        uint64_t v15 = (void *)v13[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void *)v13[2];
            BOOL v17 = *v16 == (void)v13;
            uint64_t v13 = v16;
          }
          while (!v17);
        }
        uint64_t v13 = v16;
      }
      while (v16 != v14);
    }
  }
  if (v21 != v23) {
    free(v21);
  }
  return isAvailable == 0;
}

BOOL llvm::mca::DispatchStage::checkRCU(void *a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(**(void **)(a2 + 8) + 284);
  unsigned int v3 = *(_DWORD *)(a1[10] + 20);
  if (*(_DWORD *)(a1[10] + 16) < v2) {
    unsigned int v2 = *(_DWORD *)(a1[10] + 16);
  }
  if (v2 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v2;
  }
  if (v3 < v4)
  {
    int v11 = 2;
    uint64_t v12 = a2;
    uint64_t v5 = (void *)a1[2];
    unint64_t v6 = a1 + 3;
    if (v5 != a1 + 3)
    {
      do
      {
        (*(void (**)(void, int *))(*(void *)v5[4] + 32))(v5[4], &v11);
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            unint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            unint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v6);
    }
  }
  return v3 >= v4;
}

uint64_t llvm::mca::DispatchStage::canDispatch(void *a1, uint64_t a2)
{
  BOOL v4 = llvm::mca::DispatchStage::checkRCU(a1, a2);
  BOOL v5 = llvm::mca::DispatchStage::checkPRF(a1, a2);
  uint64_t v6 = a1[1];
  if (v6) {
    LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
  }
  return (v4 && v5) & v6;
}

void llvm::mca::DispatchStage::dispatch(uint64_t a1, uint64_t a2, llvm::mca::Instruction *a3)
{
  unsigned int v4 = a2;
  void v26[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a2;
  v22[1] = a3;
  unsigned int v6 = *(_DWORD *)(*(void *)a3 + 284);
  unsigned int v7 = *(_DWORD *)(a1 + 40);
  int v8 = v6 - v7;
  if (v6 <= v7)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 44) - v6;
  }
  else
  {
    unsigned int v9 = 0;
    *(_DWORD *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = v8;
    *(_DWORD *)(a1 + 56) = a2;
    *(void *)(a1 + 64) = a3;
  }
  *(_DWORD *)(a1 + 44) = v9;
  if ((*((unsigned char *)a3 + 540) & 0x40) != 0) {
    unsigned int v9 = 0;
  }
  *(_DWORD *)(a1 + 44) = v9;
  if (*((unsigned char *)a3 + 8)
    && llvm::mca::RegisterFile::tryEliminateMoveOrSwap(*(void *)(a1 + 88), *((void *)a3 + 2), *((unsigned int *)a3 + 6), *((void *)a3 + 38), *((unsigned int *)a3 + 78)))
  {
    *((unsigned char *)a3 + 60llvm::StringTableBuilder::finalizeStringTable(this, 0) = 1;
  }
  if (!*((unsigned char *)a3 + 600))
  {
    uint64_t v10 = *((unsigned int *)a3 + 78);
    if (v10)
    {
      int v11 = (llvm::mca::ReadState *)*((void *)a3 + 38);
      uint64_t v12 = 48 * v10;
      do
      {
        llvm::mca::RegisterFile::addRegisterRead(*(llvm::mca::RegisterFile **)(a1 + 88), v11, *(const llvm::MCSubtargetInfo **)(a1 + 72));
        int v11 = (llvm::mca::ReadState *)((char *)v11 + 48);
        v12 -= 48;
      }
      while (v12);
    }
  }
  uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 88) + 24);
  unsigned int v23 = v26;
  int v25 = 4;
  if (v13 >= 5)
  {
    unsigned int v24 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v13) {
    bzero(v26, 4 * v13);
  }
  unsigned int v24 = v13;
  uint64_t v14 = *((unsigned int *)a3 + 6);
  if (v14)
  {
    uint64_t v15 = *((void *)a3 + 2);
    uint64_t v16 = 136 * v14;
    do
    {
      BOOL v17 = *(uint64_t **)(a1 + 88);
      DWORD2(v2llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      *(void *)&long long v20 = v4;
      WORD6(v2llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
      uint64_t v21 = v15;
      llvm::mca::RegisterFile::addRegisterWrite(v17, &v20, v23);
      v15 += 136;
      v16 -= 136;
    }
    while (v16);
  }
  int v18 = llvm::mca::RetireControlUnit::dispatch(*(void *)(a1 + 80), (uint64_t)v22);
  *((_DWORD *)a3 + 136) = 1;
  *((_DWORD *)a3 + 13MEMORY[0x1D25D9CD0](*(void *)this, 8) = v18;
  if (llvm::mca::Instruction::updateDispatched(a3)) {
    llvm::mca::Instruction::updatePending(a3);
  }
  if (v6 >= *(_DWORD *)(a1 + 40)) {
    int v19 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v19 = v6;
  }
  llvm::mca::DispatchStage::notifyInstructionDispatched(a1, (uint64_t)v22, (uint64_t)v23, v24, v19);
  (*(void (**)(void, void *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v22);
  if (v23 != v26) {
    free(v23);
  }
}

void llvm::mca::DispatchStage::cycleStart(llvm::mca::DispatchStage *this@<X0>, void *a2@<X8>)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 12);
  unsigned int v5 = *((_DWORD *)this + 10);
  if (v4)
  {
    unsigned int v6 = v5 - v4;
    if (v5 < v4) {
      unsigned int v6 = 0;
    }
    int v7 = v5 - v6;
    *((_DWORD *)this + 1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v6;
    *((_DWORD *)this + 12) = v4 - (v5 - v6);
    uint64_t v8 = *(unsigned int *)(*((void *)this + 11) + 24);
    if (v8 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v8) {
      bzero(v9, 4 * v8);
    }
    llvm::mca::DispatchStage::notifyInstructionDispatched((uint64_t)this, (uint64_t)this + 56, (uint64_t)v9, v8, v7);
    if (!*((_DWORD *)this + 12))
    {
      *((_DWORD *)this + 14) = 0;
      *((void *)this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    }
    *a2 = 0;
  }
  else
  {
    *((_DWORD *)this + 1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v5;
    *a2 = 0;
  }
}

uint64_t llvm::mca::DispatchStage::isAvailable(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 44);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *(unsigned char **)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(*(void *)v3 + 284);
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  if (v5 < v4) {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
  }
  if (v4 <= v2 && ((int v6 = v3[540] & 0x20, v2 != v5) ? (v7 = v6 == 0) : (v7 = 1), v7)) {
    return llvm::mca::DispatchStage::canDispatch((void *)a1, a2);
  }
  else {
    return 0;
  }
}

void llvm::mca::DispatchStage::execute(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CCC01FA0(uint64_t a1)
{
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1CCC01FE8(uint64_t a1)
{
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCC02050()
{
  return 0;
}

void sub_1CCC02058(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL llvm::mca::EntryStage::hasWorkToComplete(llvm::mca::EntryStage *this)
{
  return *((void *)this + 6) != 0;
}

uint64_t llvm::mca::EntryStage::isAvailable(uint64_t a1)
{
  if (*(void *)(a1 + 48) && (uint64_t v2 = *(void *)(a1 + 8)) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, a1 + 40);
  }
  else {
    return 0;
  }
}

uint64_t llvm::mca::EntryStage::getNextInstruction(uint64_t this)
{
  if (*(void *)(*(void *)(this + 200) + 8) * (unint64_t)*(unsigned int *)(*(void *)(this + 200) + 20) > *(unsigned int *)(*(void *)(this + 200) + 16)) {
    operator new();
  }
  return this;
}

uint64_t llvm::mca::EntryStage::execute@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1 + 40);
  if (!*a2)
  {
    *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
    uint64_t result = llvm::mca::EntryStage::getNextInstruction(a1);
    *a2 = 0;
  }
  return result;
}

uint64_t llvm::mca::EntryStage::cycleStart@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (!*(void *)(this + 48)) {
    this = llvm::mca::EntryStage::getNextInstruction(this);
  }
  *a2 = 0;
  return this;
}

uint64_t llvm::mca::EntryStage::cycleEnd@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  uint64_t v4 = *(unsigned int *)(this + 208);
  unsigned int v5 = *(char **)(this + 56);
  int v6 = &v5[8 * v4];
  unint64_t v7 = *(unsigned int *)(this + 64);
  uint64_t v8 = &v5[8 * v7];
  if (v4 != v7)
  {
    uint64_t v9 = 8 * v7 - 8 * v4;
    while (*(_DWORD *)(*(void *)v6 + 544) == 6)
    {
      v6 += 8;
      v9 -= 8;
      if (!v9)
      {
        int v6 = &v5[8 * v7];
        break;
      }
    }
  }
  *(_DWORD *)(this + 20MEMORY[0x1D25D9CD0](*(void *)this, 8) = (unint64_t)(v6 - v5) >> 3;
  if ((((unint64_t)(v6 - v5) >> 2) & 0xFFFFFFFE) >= v7)
  {
    uint64_t v10 = v5;
    if (v8 != v6)
    {
      do
      {
        uint64_t v11 = *(void *)v6;
        *(void *)int v6 = 0;
        uint64_t v12 = *(void *)v5;
        *(void *)unsigned int v5 = v11;
        if (v12)
        {
          uint64_t v13 = *(void **)(v12 + 512);
          if (v13)
          {
            *(void *)(v12 + 52llvm::StringTableBuilder::finalizeStringTable(this, 0) = v13;
            operator delete(v13);
          }
          uint64_t v14 = *(void **)(v12 + 304);
          if (v14 != (void *)(v12 + 320)) {
            free(v14);
          }
          sub_1CCBF5448((char **)(v12 + 16));
          this = MEMORY[0x1D25D9CE0](v12, 0x10E0C40F9C4931CLL);
        }
        v6 += 8;
        v5 += 8;
        v10 += 8;
      }
      while (v6 != v8);
      unsigned int v5 = *(char **)(v2 + 56);
      unint64_t v7 = *(unsigned int *)(v2 + 64);
    }
    uint64_t v15 = &v5[8 * v7];
    if (v15 != v10)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        uint64_t v16 = v17;
        *(void *)uint64_t v15 = 0;
        if (v17)
        {
          int v18 = *(void **)(v16 + 512);
          if (v18)
          {
            *(void *)(v16 + 52llvm::StringTableBuilder::finalizeStringTable(this, 0) = v18;
            operator delete(v18);
          }
          int v19 = *(void **)(v16 + 304);
          if (v19 != (void *)(v16 + 320)) {
            free(v19);
          }
          sub_1CCBF5448((char **)(v16 + 16));
          this = MEMORY[0x1D25D9CE0](v16, 0x10E0C40F9C4931CLL);
        }
      }
      while (v15 != v10);
      unsigned int v5 = *(char **)(v2 + 56);
    }
    *(_DWORD *)(v2 + 64) = (unint64_t)(v10 - v5) >> 3;
    *(_DWORD *)(v2 + 20MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  }
  *a2 = 0;
  return this;
}

uint64_t sub_1CCC026C4(uint64_t a1)
{
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1CCC02718(uint64_t a1)
{
  sub_1CCBF539C((char **)(a1 + 56));
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::mca::toHWStallEventType(int a1)
{
  return dword_1CFB29010[a1];
}

BOOL llvm::mca::ExecuteStage::isAvailable(void *a1, uint64_t a2)
{
  int isAvailable = llvm::mca::Scheduler::isAvailable(a1[5], a2);
  int v5 = isAvailable;
  if (isAvailable)
  {
    int v12 = dword_1CFB29030[isAvailable - 1];
    uint64_t v13 = a2;
    int v6 = (void *)a1[2];
    unint64_t v7 = a1 + 3;
    if (v6 != v7)
    {
      do
      {
        (*(void (**)(void, int *))(*(void *)v6[4] + 32))(v6[4], &v12);
        uint64_t v8 = (void *)v6[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v6[2];
            BOOL v10 = *v9 == (void)v6;
            int v6 = v9;
          }
          while (!v10);
        }
        int v6 = v9;
      }
      while (v9 != v7);
    }
  }
  return v5 == 0;
}

void llvm::mca::ExecuteStage::issueInstruction(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v19[12] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v14 = v16;
  uint64_t v15 = 0x400000000;
  uint64_t v11 = v13;
  uint64_t v12 = 0x400000000;
  llvm::mca::Scheduler::issueInstruction(*(void **)(a1 + 40), a2, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11);
  int v6 = *(_DWORD **)(a2 + 8);
  *(_DWORD *)(a1 + 52) += *(_DWORD *)(*(void *)v6 + 284);
  llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers((void *)a1, a2, 0);
  llvm::mca::ExecuteStage::notifyInstructionIssued(a1, a2, (unint64_t *)v17, v18);
  if (v6[136] != 5
    || (llvm::mca::ExecuteStage::notifyInstructionExecuted(a1, a2),
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2),
        !*a3))
  {
    if (v15)
    {
      unint64_t v7 = (char *)v14;
      uint64_t v8 = 16 * v15;
      do
      {
        llvm::mca::ExecuteStage::notifyInstructionPending(a1, (uint64_t)v7);
        v7 += 16;
        v8 -= 16;
      }
      while (v8);
    }
    if (v12)
    {
      uint64_t v9 = (char *)v11;
      uint64_t v10 = 16 * v12;
      do
      {
        llvm::mca::ExecuteStage::notifyInstructionReady(a1, (uint64_t)v9);
        v9 += 16;
        v10 -= 16;
      }
      while (v10);
    }
    *a3 = 0;
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v14 != v16) {
    free(v14);
  }
  if (v17 != v19) {
    free(v17);
  }
}

void llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers(void *a1, uint64_t a2, char a3)
{
  uint64_t v20[2] = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = *(int8x8_t *)(**(void **)(a2 + 8) + 248);
  if (v3)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v3);
    v7.i16[0] = vaddlv_u8(v7);
    uint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 4uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(v20, 4 * v7.u32[0]);
    uint64_t v9 = v20;
    unsigned int v19 = v8;
    if (v8)
    {
      uint64_t v10 = *(void *)(*(void *)(a1[5] + 24) + 160);
      do
      {
        unint64_t v11 = *(void *)&v3 & -*(void *)&v3;
        *v9++ = *(_DWORD *)(v10 + 4 * (63 - __clz(v11)));
        *(void *)&v3 ^= v11;
        --v8;
      }
      while (v8);
    }
    uint64_t v12 = (void *)a1[2];
    uint64_t v13 = a1 + 3;
    if (a3)
    {
      if (v12 != v13)
      {
        do
        {
          (*(void (**)(void, uint64_t, void *, void))(*(void *)v12[4] + 56))(v12[4], a2, v20, v19);
          uint64_t v14 = (void *)v12[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v12[2];
              BOOL v16 = *v15 == (void)v12;
              uint64_t v12 = v15;
            }
            while (!v16);
          }
          uint64_t v12 = v15;
        }
        while (v15 != v13);
      }
    }
    else if (v12 != v13)
    {
      do
      {
        (*(void (**)(void, uint64_t, void *, void))(*(void *)v12[4] + 64))(v12[4], a2, v20, v19);
        uint64_t v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v12[2];
            BOOL v16 = *v18 == (void)v12;
            uint64_t v12 = v18;
          }
          while (!v16);
        }
        uint64_t v12 = v18;
      }
      while (v18 != v13);
    }
  }
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionIssued(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(result + 40) + 24) + 160);
    uint64_t v5 = 24 * a4;
    int v6 = a3;
    do
    {
      *int v6 = *(unsigned int *)(v4 + 4 * (63 - __clz(*v6)));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  int v12 = 4;
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint8x8_t v7 = *(void **)(result + 16);
  uint64_t v8 = (void *)(result + 24);
  if (v7 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v7[4] + 24))(v7[4], &v12);
      uint64_t v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          uint8x8_t v7 = v10;
        }
        while (!v11);
      }
      uint8x8_t v7 = v10;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionExecuted(uint64_t result, uint64_t a2)
{
  int v7 = 5;
  uint64_t v8 = a2;
  uint64_t v2 = *(void **)(result + 16);
  int8x8_t v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v2[4] + 24))(v2[4], &v7);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionPending(uint64_t result, uint64_t a2)
{
  int v7 = 2;
  uint64_t v8 = a2;
  uint64_t v2 = *(void **)(result + 16);
  int8x8_t v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v2[4] + 24))(v2[4], &v7);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionReady(uint64_t result, uint64_t a2)
{
  int v7 = 3;
  uint64_t v8 = a2;
  uint64_t v2 = *(void **)(result + 16);
  int8x8_t v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v2[4] + 24))(v2[4], &v7);
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

void llvm::mca::ExecuteStage::issueReadyInstructions(llvm::mca::Scheduler **this@<X0>, void *a2@<X8>)
{
  for (v5[0] = llvm::mca::Scheduler::select(this[5]); ; LODWORD(v5[0]) = llvm::mca::Scheduler::select(this[5]))
  {
    v5[1] = v4;
    if (!v4) {
      break;
    }
    llvm::mca::ExecuteStage::issueInstruction((uint64_t)this, (uint64_t)v5, a2);
    if (*a2) {
      return;
    }
  }
  *a2 = 0;
}

void llvm::mca::ExecuteStage::cycleStart(llvm::mca::ExecuteStage *this@<X0>, void *a2@<X8>)
{
  v28[16] = *MEMORY[0x1E4F143B8];
  unsigned int v26 = v28;
  uint64_t v27 = 0x800000000;
  unsigned int v23 = v25;
  uint64_t v24 = 0x400000000;
  long long v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v17 = v19;
  uint64_t v18 = 0x400000000;
  llvm::mca::Scheduler::cycleEvent(*((void *)this + 5), (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17);
  *((void *)this + 6) = 0;
  if (v27)
  {
    uint64_t v4 = (char *)v26;
    uint64_t v5 = (char *)v26 + 16 * v27;
    BOOL v6 = (char *)this + 24;
    do
    {
      int v7 = (char *)*((void *)this + 2);
      if (v7 != v6)
      {
        do
        {
          (*(void (**)(void, char *))(**((void **)v7 + 4) + 48))(*((void *)v7 + 4), v4);
          uint64_t v8 = (char *)*((void *)v7 + 1);
          if (v8)
          {
            do
            {
              uint64_t v9 = v8;
              uint64_t v8 = *(char **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = (char *)*((void *)v7 + 2);
              BOOL v10 = *(void *)v9 == (void)v7;
              int v7 = v9;
            }
            while (!v10);
          }
          int v7 = v9;
        }
        while (v9 != v6);
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  if (v24)
  {
    BOOL v11 = (char *)v23;
    uint64_t v12 = 16 * v24;
    while (1)
    {
      llvm::mca::ExecuteStage::notifyInstructionExecuted((uint64_t)this, (uint64_t)v11);
      (*(void (**)(void, char *))(**((void **)this + 1) + 48))(*((void *)this + 1), v11);
      if (*a2) {
        break;
      }
      v11 += 16;
      v12 -= 16;
      if (!v12) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    if (v21)
    {
      uint64_t v13 = (char *)v20;
      uint64_t v14 = 16 * v21;
      do
      {
        llvm::mca::ExecuteStage::notifyInstructionPending((uint64_t)this, (uint64_t)v13);
        v13 += 16;
        v14 -= 16;
      }
      while (v14);
    }
    if (v18)
    {
      uint64_t v15 = (char *)v17;
      uint64_t v16 = 16 * v18;
      do
      {
        llvm::mca::ExecuteStage::notifyInstructionReady((uint64_t)this, (uint64_t)v15);
        v15 += 16;
        v16 -= 16;
      }
      while (v16);
    }
    llvm::mca::ExecuteStage::issueReadyInstructions((llvm::mca::Scheduler **)this, a2);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v20 != v22) {
    free(v20);
  }
  if (v23 != v25) {
    free(v23);
  }
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t llvm::mca::ExecuteStage::notifyResourceAvailable(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 16);
  int8x8_t v3 = (void *)(result + 24);
  if (v2 != (void *)(result + 24))
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)v2[4] + 48))(v2[4], a2);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void llvm::mca::ExecuteStage::cycleEnd(llvm::mca::ExecuteStage *this@<X0>, void *a2@<X8>)
{
  v30[16] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 56)
    && ((uint64_t v4 = *((void *)this + 5), *(unsigned char *)(v4 + 140)) || *((_DWORD *)this + 12) > *((_DWORD *)this + 13)))
  {
    uint64_t v28 = v30;
    uint64_t v29 = 0x800000000;
    sub_1CCBFBEBC((uint64_t *)&v28, (uint64_t)v30, *(long long **)(v4 + 80), *(long long **)(v4 + 88));
    uint64_t v5 = *(void *)(v4 + 128);
    if (v5)
    {
      LODWORD(v25) = 1;
      uint64_t v26 = (uint64_t)v28;
      v27[0] = v29;
      v27[1] = v5;
      BOOL v6 = (llvm::mca::ExecuteStage *)*((void *)this + 2);
      if (v6 != (llvm::mca::ExecuteStage *)((char *)this + 24))
      {
        do
        {
          (*(void (**)(void, void **))(**((void **)v6 + 4) + 40))(*((void *)v6 + 4), &v25);
          BOOL v7 = (llvm::mca::ExecuteStage *)*((void *)v6 + 1);
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              BOOL v7 = *(llvm::mca::ExecuteStage **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (llvm::mca::ExecuteStage *)*((void *)v6 + 2);
              BOOL v9 = *(void *)v8 == (void)v6;
              BOOL v6 = v8;
            }
            while (!v9);
          }
          BOOL v6 = v8;
        }
        while (v8 != (llvm::mca::ExecuteStage *)((char *)this + 24));
      }
    }
    int v25 = v27;
    uint64_t v26 = 0x800000000;
    long long v22 = v24;
    uint64_t v23 = 0x800000000;
    llvm::mca::Scheduler::analyzeDataDependencies(*((void *)this + 5), (uint64_t)&v25, (uint64_t)&v22);
    if (v26)
    {
      int v18 = 2;
      unsigned int v19 = v25;
      uint64_t v20 = v26;
      uint64_t v21 = 0;
      BOOL v10 = (llvm::mca::ExecuteStage *)*((void *)this + 2);
      if (v10 != (llvm::mca::ExecuteStage *)((char *)this + 24))
      {
        do
        {
          (*(void (**)(void, int *))(**((void **)v10 + 4) + 40))(*((void *)v10 + 4), &v18);
          BOOL v11 = (llvm::mca::ExecuteStage *)*((void *)v10 + 1);
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              BOOL v11 = *(llvm::mca::ExecuteStage **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (llvm::mca::ExecuteStage *)*((void *)v10 + 2);
              BOOL v9 = *(void *)v12 == (void)v10;
              BOOL v10 = v12;
            }
            while (!v9);
          }
          BOOL v10 = v12;
        }
        while (v12 != (llvm::mca::ExecuteStage *)((char *)this + 24));
      }
    }
    uint64_t v13 = v22;
    if (v23)
    {
      int v18 = 3;
      unsigned int v19 = v22;
      uint64_t v20 = v23;
      uint64_t v21 = 0;
      uint64_t v14 = (char *)*((void *)this + 2);
      uint64_t v15 = (char *)this + 24;
      if (v14 != v15)
      {
        do
        {
          (*(void (**)(void, int *))(**((void **)v14 + 4) + 40))(*((void *)v14 + 4), &v18);
          uint64_t v16 = (char *)*((void *)v14 + 1);
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint64_t v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (char *)*((void *)v14 + 2);
              BOOL v9 = *(void *)v17 == (void)v14;
              uint64_t v14 = v17;
            }
            while (!v9);
          }
          uint64_t v14 = v17;
        }
        while (v17 != v15);
        uint64_t v13 = v22;
      }
    }
    *a2 = 0;
    if (v13 != v24) {
      free(v13);
    }
    if (v25 != v27) {
      free(v25);
    }
    if (v28 != v30) {
      free(v28);
    }
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t llvm::mca::ExecuteStage::handleInstructionEliminated(uint64_t a1, uint64_t a2)
{
  llvm::mca::ExecuteStage::notifyInstructionPending(a1, a2);
  llvm::mca::ExecuteStage::notifyInstructionReady(a1, a2);
  llvm::mca::ExecuteStage::notifyInstructionIssued(a1, a2, 0, 0);
  *(void *)(*(void *)(a2 + 8) + 544) = 5;
  llvm::mca::ExecuteStage::notifyInstructionExecuted(a1, a2);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 48);

  return v4();
}

void llvm::mca::ExecuteStage::execute(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a2 + 8) + 600))
  {
    llvm::mca::ExecuteStage::handleInstructionEliminated(a1, a2);
    return;
  }
  char v6 = llvm::mca::Scheduler::dispatch(*(void *)(a1 + 40), a2);
  BOOL v7 = *(_DWORD **)(a2 + 8);
  *(_DWORD *)(a1 + 48) += *(_DWORD *)(*(void *)v7 + 284);
  llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers((void *)a1, a2, 1);
  if ((v6 & 1) == 0)
  {
    if (v7[136] == 2) {
      llvm::mca::ExecuteStage::notifyInstructionPending(a1, a2);
    }
    goto LABEL_12;
  }
  llvm::mca::ExecuteStage::notifyInstructionPending(a1, a2);
  llvm::mca::ExecuteStage::notifyInstructionReady(a1, a2);
  uint64_t v8 = **(void **)(a2 + 8);
  if ((*(_DWORD *)(v8 + 280) || *(_DWORD *)(v8 + 144)) && (*(unsigned char *)(v8 + 292) & 1) == 0)
  {
LABEL_12:
    *a3 = 0;
    return;
  }

  llvm::mca::ExecuteStage::issueInstruction(a1, a2, a3);
}

uint64_t sub_1CCC03790(uint64_t a1)
{
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1CCC037D8(uint64_t a1)
{
  *(void *)a1 = &unk_1F26320F0;
  sub_1CC1B4328(a1 + 16, *(void **)(a1 + 24));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CCC03840()
{
  return 0;
}

uint64_t llvm::mca::StallInfo::clear(uint64_t this)
{
  *(void *)(this + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t llvm::mca::StallInfo::update(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + MEMORY[0x1D25D9CD0](*(void *)this, 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 2llvm::StringTableBuilder::finalizeStringTable(this, 0) = a4;
  return result;
}

uint64_t llvm::mca::StallInfo::cycleEnd(uint64_t this)
{
  if (*(void *)(this + 8))
  {
    int v1 = *(_DWORD *)(this + 16);
    if (v1) {
      *(_DWORD *)(this + 16) = v1 - 1;
    }
  }
  return this;
}

uint64_t llvm::mca::InOrderIssueStage::InOrderIssueStage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4llvm::StringTableBuilder::finalizeStringTable(this, 0) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)a1 = &unk_1F2631FD0;
  *(void *)(a1 + 4MEMORY[0x1D25D9CD0](*(void *)this, 8) = a3;
  llvm::mca::ResourceManager::ResourceManager(a1 + 56, *(void *)(a2 + 160));
  *(void *)(a1 + 40MEMORY[0x1D25D9CD0](*(void *)this, 8) = a4;
  *(void *)(a1 + 416) = a5;
  *(void *)(a1 + 424) = a1 + 440;
  *(void *)(a1 + 432) = 0x400000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 52MEMORY[0x1D25D9CD0](*(void *)this, 8) = 0;
  *(void *)(a1 + 52llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 56llvm::StringTableBuilder::finalizeStringTable(this, 0) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 64))(a4, a1);
  return a1;
}

uint64_t llvm::mca::InOrderIssueStage::getIssueWidth(llvm::mca::InOrderIssueStage *this)
{
  return **(unsigned int **)(*((void *)this + 5) + 160);
}

BOOL llvm::mca::InOrderIssueStage::hasWorkToComplete(llvm::mca::InOrderIssueStage *this)
{
  return *((_DWORD *)this + 108) || *((void *)this + 65) || *((void *)this + 68) != 0;
}

BOOL llvm::mca::InOrderIssueStage::isAvailable(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (!*(void *)(a1 + 520) && !*(void *)(a1 + 544))
  {
    uint64_t v2 = *(unsigned char **)(a2 + 8);
    unsigned int v3 = *(_DWORD *)(*(void *)v2 + 284);
    BOOL v4 = *(_DWORD *)(a1 + 556) >= v3 || v3 > **(_DWORD **)(*(void *)(a1 + 40) + 160);
    if (v4 && ((v2[540] & 0x20) == 0 || !*(_DWORD *)(a1 + 504))) {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::mca::InOrderIssueStage::canExecute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 312);
  if (v5)
  {
    BOOL v7 = *(const llvm::MCSubtargetInfo **)(a1 + 40);
    char v6 = *(llvm::mca::RegisterFile **)(a1 + 48);
    uint64_t v8 = *(const llvm::mca::ReadState **)(v4 + 304);
    uint64_t v9 = 48 * v5;
    while (1)
    {
      int64_t v10 = llvm::mca::RegisterFile::checkRAWHazards(v6, v7, v8);
      if ((_WORD)v10) {
        break;
      }
      uint64_t v8 = (const llvm::mca::ReadState *)((char *)v8 + 48);
      v9 -= 48;
      if (!v9)
      {
        uint64_t v4 = *(void *)(a2 + 8);
        goto LABEL_11;
      }
    }
    unint64_t v11 = HIDWORD(v10);
    if (v10 < 0) {
      LODWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = 1;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    if (v11)
    {
      *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
      HIDWORD(v12) = 1;
LABEL_10:
      LODWORD(v12) = v11;
LABEL_18:
      uint64_t result = 0;
      *(void *)(a1 + 52llvm::StringTableBuilder::finalizeStringTable(this, 0) = v4;
      *(void *)(a1 + 52MEMORY[0x1D25D9CD0](*(void *)this, 8) = v12;
      return result;
    }
  }
LABEL_11:
  if (llvm::mca::ResourceManager::checkAvailability((void *)(a1 + 56), *(void *)v4))
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
    uint64_t v12 = 0x200000001;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(v4 + 540) & 0xC) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 416);
    int v25 = *(_DWORD *)(v4 + 556);
    uint64_t v14 = sub_1CC3DEC94((uint64_t *)(v13 + 32), &v25);
    if (*(_DWORD *)(*((void *)v14 + 1) + 8) != **((_DWORD **)v14 + 1))
    {
      *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
      uint64_t v12 = 0x400000001;
      uint64_t v4 = *(void *)(a2 + 8);
      goto LABEL_18;
    }
  }
  unsigned int v15 = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(a1 + 408) + 32))(*(void *)(a1 + 408), *(void *)(a1 + 424), *(unsigned int *)(a1 + 432), a2);
  if (v15)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v12 = v15 | 0x500000000;
    goto LABEL_18;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 560);
  if (v17)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if ((*(char *)(v4 + 540) & 0x80000000) == 0)
    {
      unsigned int v18 = *(_DWORD *)(*(void *)v4 + 280);
      uint64_t v19 = *(unsigned int *)(v4 + 24);
      if (v19)
      {
        uint64_t v20 = 136 * v19;
        uint64_t v21 = (int *)(*(void *)(v4 + 16) + 8);
        do
        {
          int v22 = *v21;
          if (*v21 == -512) {
            int v22 = *(_DWORD *)(*((void *)v21 - 1) + 4);
          }
          unsigned int v23 = v22 & ~(v22 >> 31);
          if (v23 < v18) {
            unsigned int v18 = v23;
          }
          v21 += 34;
          v20 -= 136;
        }
        while (v20);
      }
      BOOL v24 = v17 >= v18;
      LODWORD(v1llvm::StringTableBuilder::finalizeStringTable(this, 1) = v17 - v18;
      if (v11 != 0 && v24)
      {
        *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
        HIDWORD(v12) = 3;
        goto LABEL_10;
      }
    }
  }
  return 1;
}

uint64_t llvm::mca::InOrderIssueStage::notifyInstructionIssued(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v15 = 3;
  uint64_t v16 = a2;
  BOOL v7 = *(void **)(result + 16);
  uint64_t v8 = (void *)(result + 24);
  if (v7 != (void *)(result + 24))
  {
    uint64_t v9 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v7[4] + 24))(v7[4], &v15);
      int64_t v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          int64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          BOOL v7 = v11;
        }
        while (!v12);
      }
      BOOL v7 = v11;
    }
    while (v11 != v8);
    BOOL v7 = *(void **)(v9 + 16);
  }
  int v15 = 4;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  if (v7 != v8)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)v7[4] + 24))(v7[4], &v15);
      uint64_t v13 = (void *)v7[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v7[2];
          BOOL v12 = *v14 == (void)v7;
          BOOL v7 = v14;
        }
        while (!v12);
      }
      BOOL v7 = v14;
    }
    while (v14 != v8);
  }
  return result;
}