uint64_t sub_1CBB0BB70(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;

  v3 = *(void *)(a2 + 8);
  v4 = *(unsigned int *)(a2 + 16);
  if (v4)
  {
    v5 = result;
    v6 = (uint64_t *)(v3 + 8 * v4);
    result = *(void *)(result + 1248);
    LODWORD(v7) = *(_DWORD *)(v5 + 1264);
    v8 = 8 * v4 - 8;
    v9 = *(uint64_t **)(a2 + 8);
    while (1)
    {
      v10 = *v9;
      v22 = 0;
      if (sub_1CBB0BF40(result, v7, v10, &v22))
      {
        v11 = v22;
        result = *(void *)(v5 + 1248);
        v7 = *(unsigned int *)(v5 + 1264);
      }
      else
      {
        result = *(void *)(v5 + 1248);
        v7 = *(unsigned int *)(v5 + 1264);
        v11 = result + 16 * v7;
      }
      if (v11 != result + 16 * v7)
      {
        v12 = *(_DWORD *)(v11 + 12);
        if (v12)
        {
          v13 = *(_DWORD *)(v5 + 1360);
          if (v13 > v12 && ((*(void *)(*(void *)(v5 + 1296) + 8 * (v12 >> 6)) >> v12) & 1) != 0) {
            break;
          }
        }
      }
      ++v9;
      v8 -= 8;
      if (v9 == v6) {
        goto LABEL_13;
      }
    }
    if (v9 + 1 == v6)
    {
      v6 = v9;
    }
    else
    {
      v15 = 1;
      v6 = v9;
      do
      {
        v16 = v9[v15];
        v22 = 0;
        result = sub_1CBB0BF40(*(void *)(v5 + 1248), *(_DWORD *)(v5 + 1264), v16, &v22);
        if (result)
        {
          v17 = v22;
          v18 = *(void *)(v5 + 1248);
          v19 = v7;
        }
        else
        {
          v18 = *(void *)(v5 + 1248);
          v19 = v7;
          v17 = v18 + 16 * v7;
        }
        if (v17 == v18 + 16 * v19
          || ((v20 = *(_DWORD *)(v17 + 12)) != 0 ? (v21 = v13 > v20) : (v21 = 0),
              !v21 || ((*(void *)(*(void *)(v5 + 1296) + 8 * (v20 >> 6)) >> v20) & 1) == 0))
        {
          *v6++ = v9[v15];
        }
        ++v15;
        v8 -= 8;
      }
      while (v8);
      v3 = *(void *)(a2 + 8);
    }
  }
  else
  {
    v6 = *(uint64_t **)(a2 + 8);
  }
LABEL_13:
  v14 = ((unint64_t)v6 - v3) >> 3;
  *(_DWORD *)(a2 + 16) = v14;
  if (!v14) {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t sub_1CBB0BD18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a4;
  uint64_t v22 = a2;
  uint64_t result = sub_1CBC2CCF8(a3, *(void *)(a1 + 1416));
  BOOL v21 = result == 4;
  BOOL v12 = (a5 & 0xFF00000000) != 0 && a5 != 1;
  BOOL v20 = v12;
  v13 = *(uint64_t **)(a6 + 8);
  uint64_t v14 = *(unsigned int *)(a6 + 16);
  v25[0] = a1;
  v25[1] = &v22;
  v25[2] = a3;
  v25[3] = &v24;
  v25[4] = &v23;
  v25[5] = &v21;
  v25[6] = &v20;
  v25[7] = a6;
  if (!v14) {
    goto LABEL_18;
  }
  v15 = &v13[v14];
  uint64_t v16 = 8 * v14 - 8;
  v17 = v13;
  do
  {
    uint64_t v18 = *v17++;
    uint64_t result = sub_1CBB0BFD4((uint64_t)v25, v18);
    if (result) {
      break;
    }
    v16 -= 8;
    v13 = v17;
  }
  while (v17 != v15);
  if (v17 == v15)
  {
LABEL_18:
    v15 = v13;
  }
  else
  {
    uint64_t v19 = 1;
    v15 = v13;
    do
    {
      uint64_t result = sub_1CBB0BFD4((uint64_t)v25, v13[v19]);
      if ((result & 1) == 0) {
        *v15++ = v13[v19];
      }
      ++v19;
      v16 -= 8;
    }
    while (v16);
  }
  *(_DWORD *)(a6 + 16) = ((unint64_t)v15 - *(void *)(a6 + 8)) >> 3;
  return result;
}

uint64_t sub_1CBB0BE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  v3 = sub_1CBB0CAA8(a1 + 1248, &v6);
  uint64_t v4 = *((unsigned int *)v3 + 1);
  if (!v4)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 1216);
    if (v4 >= *(_DWORD *)(a1 + 1220)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 1208) + 8 * v4) = v4;
    ++*(_DWORD *)(a1 + 1216);
    *((_DWORD *)v3 + 1) = v4;
  }
  return v4;
}

unsigned int *sub_1CBB0BED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1CBB0BE3C(a1, a2);
  uint64_t v9 = a3;
  uint64_t result = (unsigned int *)sub_1CBB0CAA8(a1 + 1248, &v9);
  v7 = result;
  uint64_t v8 = *result;
  if (v8)
  {
    uint64_t result = (unsigned int *)sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v5, v8);
    LODWORD(v5) = result;
  }
  _DWORD *v7 = v5;
  return result;
}

uint64_t sub_1CBB0BF40(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

BOOL sub_1CBB0BFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)a1;
  uint64_t v133 = **(void **)(a1 + 8);
  uint64_t v134 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 24);
  int v6 = **(_DWORD **)(a1 + 32);
  int v128 = **(unsigned __int8 **)(a1 + 40);
  int v7 = *(unsigned __int8 *)(v3 + 1849);
  int v8 = **(unsigned __int8 **)(a1 + 48);
  uint64_t v9 = v5 & 0xFF00000000;
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v11 = v5;
  BOOL v12 = (v5 & 0xFF00000000) == 0 || v10 == 0;
  if (v12) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(*(void *)(v3 + 1408) + 356))
  {
    uint64_t v13 = *(void *)(v3 + 1416);
    unsigned int v14 = *(_DWORD *)(v10 + 32 * v5 + 4);
    unsigned int v15 = *(_DWORD *)(v2 + 4);
    uint64_t v16 = *(void *)(v13 + 8);
    unint64_t v17 = *(unsigned int *)(v16 + 24 * v14 + 16);
    uint64_t v18 = *(void *)(v13 + 56);
    uint64_t v19 = (_WORD *)(v18 + ((v17 >> 3) & 0x1FFFFFFE));
    __int16 v20 = *v19 + (v17 & 0xF) * v14;
    unint64_t v21 = *(unsigned int *)(v16 + 24 * v15 + 16);
    __int16 v22 = v21 & 0xF;
    uint64_t v23 = (_WORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFE));
    __int16 v25 = *v23;
    uint64_t v24 = v23 + 1;
    __int16 v26 = v25 + v22 * v15;
LABEL_7:
    ++v19;
    v27 = v24;
    __int16 v28 = v26;
    while (v20 != v28)
    {
      int v29 = *v27++;
      v28 += v29;
      if (!v29)
      {
        char v30 = 0;
        v20 += *v19;
        if (*v19) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
  }
  char v30 = 1;
LABEL_13:
  char v31 = **(unsigned char **)(a1 + 56) ? 0 : v30;
  BOOL result = sub_1CBB0C8EC(v31, v6, v4, v5, *(unsigned __int8 *)(*(void *)(v3 + 1408) + 356) != 0);
  if (result)
  {
LABEL_17:
    if (v9) {
      sub_1CBB0BED4(v3, v2, v10 + 32 * v11);
    }
    else {
      sub_1CBB0CA3C(v3, v2, v4);
    }
    if (*(unsigned char *)(v3 + 1841))
    {
      uint64_t v33 = *(void *)(*(void *)(v2 + 8) + 16);
      unint64_t v34 = sub_1CBB07BD8(v3, v133);
      uint64_t v35 = sub_1CBB07D28(v34);
      if ((*(unsigned char *)(v33 + 16) & 2) != 0)
      {
        uint64_t v37 = *(void *)(v35 + 64);
        uint64_t v36 = *(void *)(v35 + 72);
        if (v36 == v37)
        {
          uint64_t v38 = *(unsigned int *)(v35 + 84);
          v39 = (void *)(v36 + 8 * v38);
          if (v38)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 8 * v38;
            while (*(void *)(v36 + v40) != v2)
            {
              v40 += 8;
              if (v41 == v40) {
                goto LABEL_40;
              }
            }
            v39 = (void *)(v36 + v40);
          }
LABEL_40:
          uint64_t v37 = *(void *)(v35 + 72);
        }
        else
        {
          uint64_t v42 = *(unsigned int *)(v35 + 80);
          int v43 = v42 - 1;
          unsigned int v44 = (v42 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          v39 = (void *)(v36 + 8 * v44);
          uint64_t v45 = *v39;
          if (*v39 == -1)
          {
            v46 = 0;
LABEL_170:
            if (v46) {
              v39 = v46;
            }
            if (*v39 != v2) {
              v39 = (void *)(v36 + 8 * v42);
            }
          }
          else
          {
            v46 = 0;
            int v47 = 1;
            while (v45 != v2)
            {
              if (v46) {
                BOOL v48 = 0;
              }
              else {
                BOOL v48 = v45 == -2;
              }
              if (v48) {
                v46 = v39;
              }
              unsigned int v49 = v44 + v47++;
              unsigned int v44 = v49 & v43;
              v39 = (void *)(v36 + 8 * (v49 & v43));
              uint64_t v45 = *v39;
              if (*v39 == -1) {
                goto LABEL_170;
              }
            }
          }
        }
        BOOL v12 = v36 == v37;
        uint64_t v50 = 80;
        if (v12) {
          uint64_t v50 = 84;
        }
        v51 = (void *)(v36 + 8 * *(unsigned int *)(v35 + v50));
        if (v39 != v51)
        {
          void *v39 = -2;
          ++*(_DWORD *)(v35 + 88);
          uint64_t v2 = v134;
        }
        *(unsigned char *)(v3 + 64) = v39 == v51;
        uint64_t v53 = *(void *)(v35 + 128);
        uint64_t v52 = *(void *)(v35 + 136);
        if (v52 == v53)
        {
          uint64_t v54 = *(unsigned int *)(v35 + 148);
          v55 = (void *)(v52 + 8 * v54);
          if (v54)
          {
            uint64_t v56 = 0;
            uint64_t v57 = 8 * v54;
            while (*(void *)(v52 + v56) != v2)
            {
              v56 += 8;
              if (v57 == v56) {
                goto LABEL_63;
              }
            }
            v55 = (void *)(v52 + v56);
          }
LABEL_63:
          uint64_t v53 = *(void *)(v35 + 136);
        }
        else
        {
          uint64_t v58 = *(unsigned int *)(v35 + 144);
          int v59 = v58 - 1;
          unsigned int v60 = (v58 - 1) & ((v2 >> 4) ^ (v2 >> 9));
          v55 = (void *)(v52 + 8 * v60);
          uint64_t v61 = *v55;
          if (*v55 == -1)
          {
            v62 = 0;
LABEL_175:
            if (v62) {
              v55 = v62;
            }
            if (*v55 != v2) {
              v55 = (void *)(v52 + 8 * v58);
            }
          }
          else
          {
            v62 = 0;
            int v63 = 1;
            while (v61 != v2)
            {
              if (v62) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = v61 == -2;
              }
              if (v64) {
                v62 = v55;
              }
              unsigned int v65 = v60 + v63++;
              unsigned int v60 = v65 & v59;
              v55 = (void *)(v52 + 8 * (v65 & v59));
              uint64_t v61 = *v55;
              if (*v55 == -1) {
                goto LABEL_175;
              }
            }
          }
        }
        BOOL v12 = v52 == v53;
        uint64_t v66 = 144;
        if (v12) {
          uint64_t v66 = 148;
        }
        if (v55 != (void *)(v52 + 8 * *(unsigned int *)(v35 + v66)))
        {
          void *v55 = -2;
          ++*(_DWORD *)(v35 + 152);
        }
      }
    }
    int v127 = v8;
    unint64_t v132 = *((unsigned int *)sub_1CBB0CAA8(v3 + 1248, &v134) + 1);
    if (v7)
    {
      uint64_t v67 = *(void *)(v134 + 8);
      uint64_t v129 = *(unsigned int *)(v67 + 40);
      if (v129)
      {
        uint64_t v68 = 0;
        v130 = (uint64_t *)(v3 + 16);
        uint64_t v131 = *(void *)(v67 + 24);
        while (1)
        {
          uint64_t v69 = *(void *)(v67 + 32) + 32 * v68;
          int v70 = sub_1CBC2D2EC(v67, v68, (void *)(*(void *)(v3 + 1416) + 8));
          if (v70 == 6) {
            break;
          }
          if (v70 == 4)
          {
            if (*(_DWORD *)(v3 + 24))
            {
              sub_1CBAF9B1C(&v135, (void *)v67, v68, *(void *)(v3 + 1416), 1, 0);
              unint64_t v71 = v135;
              int v72 = v136;
              unint64_t v73 = HIDWORD(v135);
              if (v136 != HIDWORD(v135))
              {
                while (1)
                {
                  uint64_t v74 = *(void *)(v67 + 32) + 32 * v68;
                  char v75 = (*(_DWORD *)(v74 + 16) - 81) > 4 ? 0 : *(_DWORD *)(v74 + 4);
                  uint64_t v76 = sub_1CBAD8000(v74);
                  if ((v76 & 0xFF00000000) == 0 || ((1 << (v73 - v75)) & v76) != 0) {
                    break;
                  }
LABEL_114:
                  unint64_t v71 = (v71 & 0xFFFFFFFF00000000) + 0x100000000;
                  unint64_t v73 = HIDWORD(v71);
                  if (v72 == HIDWORD(v71)) {
                    goto LABEL_152;
                  }
                }
                if (v73 >= *(unsigned int *)(v3 + 24)) {
                  sub_1CBB0A8B0((uint64_t)v130, (v73 + 1));
                }
                uint64_t v78 = *v130;
                uint64_t v79 = *v130 + 96 * v73;
                uint64_t v82 = *(void *)(v79 + 24);
                uint64_t v81 = *(void *)(v79 + 32);
                v80 = (unsigned int *)(v79 + 24);
                if (v81 == v82)
                {
                  uint64_t v83 = v80[5];
                  v84 = (void *)(v81 + 8 * v83);
                  if (v83)
                  {
                    uint64_t v85 = 0;
                    while (*(void *)(v81 + v85) != v69)
                    {
                      v85 += 8;
                      if (8 * v83 == v85) {
                        goto LABEL_101;
                      }
                    }
                    v84 = (void *)(v81 + v85);
                  }
LABEL_101:
                  uint64_t v82 = v81;
                  goto LABEL_108;
                }
                uint64_t v86 = v80[4];
                int v87 = v86 - 1;
                unsigned int v88 = (v86 - 1) & ((v69 >> 4) ^ (v69 >> 9));
                v84 = (void *)(v81 + 8 * v88);
                uint64_t v89 = *v84;
                if (*v84 == -1)
                {
                  v90 = 0;
LABEL_103:
                  if (v90) {
                    v84 = v90;
                  }
                  if (*v84 != v69)
                  {
                    LODWORD(v83) = v80[5];
                    v84 = (void *)(v81 + 8 * v86);
                    goto LABEL_108;
                  }
                }
                else
                {
                  v90 = 0;
                  int v91 = 1;
                  while (v89 != v69)
                  {
                    if (v90) {
                      BOOL v92 = 0;
                    }
                    else {
                      BOOL v92 = v89 == -2;
                    }
                    if (v92) {
                      v90 = v84;
                    }
                    unsigned int v93 = v88 + v91++;
                    unsigned int v88 = v93 & v87;
                    v84 = (void *)(v81 + 8 * (v93 & v87));
                    uint64_t v89 = *v84;
                    if (*v84 == -1) {
                      goto LABEL_103;
                    }
                  }
                }
                LODWORD(v83) = v80[5];
LABEL_108:
                if (v81 == v82) {
                  unsigned int v94 = v83;
                }
                else {
                  unsigned int v94 = v80[4];
                }
                if (v84 != (void *)(v81 + 8 * v94))
                {
                  void *v84 = -2;
                  ++v80[6];
                  uint64_t v95 = sub_1CBB0BE3C(v3, v69);
                  sub_1CBB0CCF4((uint64_t *)(v3 + 1208), v132, v95);
                  if (v131 == v133)
                  {
                    uint64_t v96 = v78 + 96 * v73;
                    *(_DWORD *)(v96 + 16) = 0;
                    *(_DWORD *)uint64_t v96 = 0;
                    *(unsigned char *)(v96 + 4) = 1;
                  }
                }
                goto LABEL_114;
              }
            }
          }
LABEL_152:
          if (++v68 == v129) {
            goto LABEL_153;
          }
        }
        if (!v128) {
          goto LABEL_152;
        }
        if (!*(_DWORD *)(v3 + 40)) {
          goto LABEL_152;
        }
        sub_1CBAF9B1C(&v135, (void *)v67, v68, *(void *)(v3 + 1416), 1, 0);
        unint64_t v97 = v135;
        int v98 = v136;
        if (v136 == HIDWORD(v135)) {
          goto LABEL_152;
        }
        while (1)
        {
          uint64_t v99 = sub_1CBB084F0(v3 + 32, v97);
          uint64_t v100 = v99;
          uint64_t v102 = *(void *)(v99 + 32);
          uint64_t v101 = *(void *)(v99 + 40);
          if (v101 == v102)
          {
            uint64_t v103 = *(unsigned int *)(v99 + 52);
            v104 = (void *)(v101 + 8 * v103);
            if (v103)
            {
              uint64_t v105 = 0;
              while (*(void *)(v101 + v105) != v69)
              {
                v105 += 8;
                if (8 * v103 == v105) {
                  goto LABEL_138;
                }
              }
              v104 = (void *)(v101 + v105);
            }
LABEL_138:
            uint64_t v102 = *(void *)(v99 + 40);
            goto LABEL_145;
          }
          uint64_t v106 = *(unsigned int *)(v99 + 48);
          int v107 = v106 - 1;
          unsigned int v108 = (v106 - 1) & ((v69 >> 4) ^ (v69 >> 9));
          v104 = (void *)(v101 + 8 * v108);
          uint64_t v109 = *v104;
          if (*v104 != -1) {
            break;
          }
          v110 = 0;
LABEL_140:
          if (v110) {
            v104 = v110;
          }
          if (*v104 == v69) {
            goto LABEL_144;
          }
          LODWORD(v103) = *(_DWORD *)(v99 + 52);
          v104 = (void *)(v101 + 8 * v106);
LABEL_145:
          if (v101 == v102) {
            unsigned int v114 = v103;
          }
          else {
            unsigned int v114 = *(_DWORD *)(v99 + 48);
          }
          if (v104 != (void *)(v101 + 8 * v114))
          {
            void *v104 = -2;
            ++*(_DWORD *)(v99 + 56);
            uint64_t v115 = sub_1CBB0BE3C(v3, v69);
            sub_1CBB0CCF4((uint64_t *)(v3 + 1208), v132, v115);
            if (v131 == v133) {
              *(_DWORD *)(v100 + 16) = 0;
            }
          }
          unint64_t v116 = (v97 & 0xFFFFFFFF00000000) + 0x100000000;
          unint64_t v97 = v116 & 0xFFFFFFFF00000000 | v97;
          if (v98 == HIDWORD(v116)) {
            goto LABEL_152;
          }
        }
        v110 = 0;
        int v111 = 1;
        while (v109 != v69)
        {
          if (v110) {
            BOOL v112 = 0;
          }
          else {
            BOOL v112 = v109 == -2;
          }
          if (v112) {
            v110 = v104;
          }
          unsigned int v113 = v108 + v111++;
          unsigned int v108 = v113 & v107;
          v104 = (void *)(v101 + 8 * (v113 & v107));
          uint64_t v109 = *v104;
          if (*v104 == -1) {
            goto LABEL_140;
          }
        }
LABEL_144:
        LODWORD(v103) = *(_DWORD *)(v99 + 52);
        goto LABEL_145;
      }
    }
LABEL_153:
    if (v127)
    {
      return 1;
    }
    else
    {
      v117 = (uint64_t *)(v3 + 1296);
      if (*(_DWORD *)(v3 + 1360) <= v132)
      {
        int v119 = v132 + 1;
        int v120 = *(_DWORD *)(v3 + 1360) & 0x3F;
        uint64_t v121 = *(unsigned int *)(v3 + 1304);
        if (v120)
        {
          uint64_t v126 = *(void *)(v3 + 1296) + 8 * v121;
          *(void *)(v126 - 8) &= ~(-1 << v120);
        }
        unsigned int v122 = v121;
        *(_DWORD *)(v3 + 1360) = v119;
        unsigned int v123 = v132 + 64;
        if (v121 != (v132 + 64) >> 6)
        {
          uint64_t v124 = v123 >> 6;
          if (v121 > v124)
          {
            *(_DWORD *)(v3 + 1304) = v124;
            unsigned int v122 = v123 >> 6;
          }
          else
          {
            if (v124 > *(_DWORD *)(v3 + 1308)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v124 != v121) {
              bzero((void *)(*v117 + 8 * v121), 8 * (v124 - v121));
            }
            unsigned int v122 = v124;
            *(_DWORD *)(v3 + 1304) = v124;
            int v119 = *(_DWORD *)(v3 + 1360);
          }
        }
        uint64_t v118 = *v117;
        int v125 = v119 & 0x3F;
        if (v125) {
          *(void *)(v118 + 8 * v122 - 8) &= ~(-1 << v125);
        }
      }
      else
      {
        uint64_t v118 = *v117;
      }
      BOOL result = 1;
      *(void *)(v118 + ((v132 >> 3) & 0x1FFFFFF8)) |= 1 << v132;
    }
  }
  return result;
}

BOOL sub_1CBB0C8EC(char a1, int a2, uint64_t a3, unsigned __int16 a4, int a5)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a2 != 3 || (a1 & 1) != 0) {
      return 1;
    }
    int v6 = **(unsigned __int16 **)(a3 + 16);
    uint64_t v7 = sub_1CBE52E8C(v6);
    if ((v7 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    return v7 == 147 && !*(unsigned char *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v6, 0x11u));
  }
  if (a1) {
    return 1;
  }
  if (a2 != 1 || !sub_1CBB07920(*(unsigned __int16 **)(a3 + 16))) {
    return 0;
  }
  sub_1CBB079A4((uint64_t)&v13, *(unsigned __int16 **)(a3 + 16));
  uint64_t v10 = v13;
  if (v14)
  {
    uint64_t v11 = 2 * v14;
    uint64_t v10 = v13;
    while (*(unsigned __int16 *)v10 != a4)
    {
      v10 += 2;
      v11 -= 2;
      if (!v11)
      {
        uint64_t v10 = &v13[2 * v14];
        break;
      }
    }
  }
  BOOL v8 = v14 == (v10 - v13) >> 1;
  if (v13 != (char *)v15) {
    free(v13);
  }
  return v8;
}

unsigned int *sub_1CBB0CA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1CBB0BE3C(a1, a2);
  uint64_t v9 = a3;
  BOOL result = (unsigned int *)sub_1CBB0CC8C(a1 + 1224, &v9);
  uint64_t v7 = result;
  uint64_t v8 = *result;
  if (v8)
  {
    BOOL result = (unsigned int *)sub_1CBB0CCF4((uint64_t *)(a1 + 1208), v5, v8);
    LODWORD(v5) = result;
  }
  _DWORD *v7 = v5;
  return result;
}

uint64_t *sub_1CBB0CAA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v24 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  uint64_t v5 = v24;
  if (v4) {
    return v5 + 1;
  }
  __int16 v25 = v24;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v8 = 2 * v7;
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    unsigned int v15 = operator new(16 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      if (v16)
      {
        uint64_t v17 = 16 * v16;
        do
        {
          void *v15 = -4096;
          v15 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        uint64_t v18 = (uint64_t *)(v10 + 8);
        uint64_t v19 = 16 * v7;
        do
        {
          uint64_t v20 = *(v18 - 1);
          if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            __int16 v26 = 0;
            sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            unint64_t v21 = v26;
            *__int16 v26 = v20;
            v21[1] = *v18;
            ++*(_DWORD *)(a1 + 8);
          }
          v18 += 2;
          v19 -= 16;
        }
        while (v19);
      }
      MEMORY[0x1D25D9CD0](v10, 8);
      unsigned int v15 = *(void **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v22 = *(unsigned int *)(a1 + 16);
      if (v22)
      {
        uint64_t v23 = 0;
        do
        {
          v15[v23] = -4096;
          v23 += 2;
        }
        while (2 * v22 != v23);
      }
    }
    sub_1CBB0BF40((uint64_t)v15, v22, *a2, &v25);
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

void *sub_1CBB0CC8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBB0CD88(a1, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

uint64_t sub_1CBB0CCF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1CBB0CF44(a1, a2);
  unsigned int v6 = sub_1CBB0CF44(a1, a3);
  uint64_t result = v5;
  if (v5 != v6)
  {
    uint64_t v8 = *a1;
    unsigned int v9 = *(_DWORD *)(*a1 + 8 * v5 + 4);
    unsigned int v10 = *(_DWORD *)(*a1 + 8 * v6 + 4);
    if (v9 >= v10) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = v6;
    }
    if (v9 < v10) {
      unsigned int v6 = v5;
    }
    unint64_t v11 = (_DWORD *)(v8 + 8 * v6);
    *unint64_t v11 = result;
    uint64_t v12 = v8 + 8 * result;
    int v15 = *(_DWORD *)(v12 + 4);
    int v13 = (_DWORD *)(v12 + 4);
    int v14 = v15;
    if (v15 == v11[1]) {
      _DWORD *v13 = v14 + 1;
    }
  }
  return result;
}

void *sub_1CBB0CD88(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v23 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  int v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 16 * v15;
      do
      {
        *int v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if (v6)
    {
      uint64_t v17 = (uint64_t *)(v9 + 8);
      uint64_t v18 = 16 * v6;
      do
      {
        uint64_t v19 = *(v17 - 1);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v24 = 0;
          sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v24);
          uint64_t v20 = v24;
          *uint64_t v24 = v19;
          v20[1] = *v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v17 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    int v14 = *(void **)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v21 = *(unsigned int *)(a1 + 16);
    if (v21)
    {
      uint64_t v22 = 0;
      do
      {
        v14[v22] = -4096;
        v22 += 2;
      }
      while (2 * v21 != v22);
    }
  }
  sub_1CBB0BF40((uint64_t)v14, v21, *a2, &v23);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v23;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CBB0CF44(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (_DWORD *)(*a1 + 8 * a2);
  if (*v3 != a2)
  {
    uint64_t v2 = sub_1CBB0CF44();
    _DWORD *v3 = v2;
  }
  return v2;
}

uint64_t sub_1CBB0CF88(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  if (a2 == 4)
  {
    uint64_t v4 = result + 8;
    int v5 = 0;
    uint64_t result = sub_1CBB0D074((uint64_t)&v4);
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else
  {
    if (a2 >= 6) {
      abort();
    }
    uint64_t v3 = *(void *)(result + 8) & ~(1 << a2);
    *(void *)(result + 8) = v3;
  }
  if ((v3 & 0x3F) == 0) {
    *(_DWORD *)uint64_t v2 = 0;
  }
  return result;
}

uint64_t sub_1CBB0D000(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void **)result;
  if (!v1)
  {
    char v5 = -6;
    goto LABEL_7;
  }
  unint64_t v3 = (64 - v1);
  char v4 = 6;
  if (v3 < 6) {
    char v4 = 64 - v1;
  }
  *v2++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1);
  *(void *)uint64_t result = v2;
  if (v3 <= 5)
  {
    char v5 = v4 - 6;
LABEL_7:
    *(void *)uint64_t result = v2;
    *v2 |= 0xFFFFFFFFFFFFFFFFLL >> v5;
  }
  return result;
}

uint64_t sub_1CBB0D074(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void **)result;
  if (!v1)
  {
    char v5 = -6;
    goto LABEL_7;
  }
  unint64_t v3 = (64 - v1);
  char v4 = 6;
  if (v3 < 6) {
    char v4 = 64 - v1;
  }
  *v2++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v1 - v4)) & (-1 << v1));
  *(void *)uint64_t result = v2;
  if (v3 <= 5)
  {
    char v5 = v4 - 6;
LABEL_7:
    *(void *)uint64_t result = v2;
    *v2 &= ~(0xFFFFFFFFFFFFFFFFLL >> v5);
  }
  return result;
}

void sub_1CBB0D0E8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v5 + 104 * v2;
    uint64_t v7 = a1 + 1224;
    uint64_t v8 = (uint64_t *)(a1 + 1208);
    uint64_t v26 = v6;
    do
    {
      if (*(_DWORD *)(v5 + 52) == *(_DWORD *)(v5 + 56)) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(v5 + 40);
      uint64_t v10 = 48;
      if (v9 == *(void *)(v5 + 32)) {
        uint64_t v10 = 52;
      }
      uint64_t v11 = *(unsigned int *)(v5 + v10);
      if (v11)
      {
        uint64_t v12 = 8 * v11;
        unsigned int v13 = *(uint64_t **)(v5 + 40);
        while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v13;
          v12 -= 8;
          if (!v12) {
            goto LABEL_18;
          }
        }
      }
      else
      {
        unsigned int v13 = *(uint64_t **)(v5 + 40);
      }
      int v14 = (void *)(v9 + 8 * v11);
      if (v13 != v14)
      {
        uint64_t v15 = *v13;
LABEL_14:
        sub_1CBB0CA3C(a1, v15, a2);
        uint64_t v16 = (unint64_t *)(v13 + 1);
        while (v16 != v14)
        {
          unint64_t v17 = *v16++;
          uint64_t v15 = v17;
          if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unsigned int v13 = (uint64_t *)(v16 - 1);
            goto LABEL_14;
          }
        }
      }
LABEL_18:
      if (!*(unsigned char *)v5)
      {
LABEL_19:
        uint64_t v18 = *(unsigned int *)(v5 + 16);
        if (v18)
        {
          uint64_t v19 = *(unsigned int **)(v5 + 8);
          uint64_t v20 = 4 * v18;
          do
          {
            uint64_t v21 = *v19;
            uint64_t v27 = a2;
            uint64_t v22 = sub_1CBB0CC8C(v7, &v27);
            uint64_t v23 = *v22;
            if (v23) {
              LODWORD(v21) = sub_1CBB0CCF4(v8, v21, v23);
            }
            *uint64_t v22 = v21;
            ++v19;
            v20 -= 4;
          }
          while (v20);
          uint64_t v24 = *(int **)(v5 + 8);
          int v25 = *v24;
          *(_DWORD *)(v5 + 16) = 0;
          if (!*(_DWORD *)(v5 + 20)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v6 = v26;
          *uint64_t v24 = v25;
          ++*(_DWORD *)(v5 + 16);
        }
      }
      v5 += 104;
    }
    while (v5 != v6);
    sub_1CBB07F10(*(void *)(a1 + 32), *(void *)(a1 + 32) + 104 * *(unsigned int *)(a1 + 40));
    *(_DWORD *)(a1 + 40) = 0;
  }
}

uint64_t *sub_1CBB0D2AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 16 * a2);
  }
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  char v4 = (uint64_t *)(a1 + 16 * v3);
  uint64_t v5 = *v4;
  if (*v4 != a3)
  {
    int v6 = 1;
    while (v5 != -4096)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v5 = *(void *)(a1 + 16 * v3);
      if (v5 == a3) {
        return (uint64_t *)(a1 + 16 * v3);
      }
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

char *sub_1CBB0D30C(uint64_t **a1, int a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  int v7 = v6;
  *((_DWORD *)v6 + 8) = a2;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
  *((void *)v6 + 7) = *(void *)(a3 + 16);
  uint64_t v8 = a1 + 1;
  uint64_t v9 = (uint64_t **)a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = v9;
        if (*((_DWORD *)v9 + 8) <= a2) {
          break;
        }
        uint64_t v9 = (uint64_t **)*v9;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = (uint64_t **)v9[1];
    }
    while (v9);
    uint64_t v10 = v8 + 1;
  }
  else
  {
    uint64_t v10 = a1 + 1;
  }
LABEL_8:
  *(void *)int v6 = 0;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = v8;
  char *v10 = (uint64_t *)v6;
  uint64_t v11 = (uint64_t *)**a1;
  uint64_t v12 = (uint64_t *)v6;
  if (v11)
  {
    *a1 = v11;
    uint64_t v12 = *v10;
  }
  sub_1CB8358B8(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

void sub_1CBB0D3D8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      char v4 = v3;
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = a2;
    do
    {
      char v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  int v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1CB91F7C8(v7, a2);

  operator delete(a2);
}

uint64_t *sub_1CBB0D464(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v2 = *((unsigned int *)result + 2);
  if (v2 >= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *((unsigned int *)result + 2);
  }
  if (v3)
  {
    uint64_t v4 = *result;
    do
    {
      *(void *)uint64_t v4 = 0x8000000080000000;
      *(_DWORD *)(v4 + 8) = 0x80000000;
      v4 += 12;
      --v3;
    }
    while (v3);
    unint64_t v2 = *((unsigned int *)result + 2);
  }
  unint64_t v5 = v2 - a2;
  if (v2 < a2)
  {
    uint64_t v6 = *result + 12 * v2;
    do
    {
      *(void *)uint64_t v6 = 0x8000000080000000;
      *(_DWORD *)(v6 + 8) = 0x80000000;
      v6 += 12;
    }
    while (!__CFADD__(v5++, 1));
  }
  *((_DWORD *)result + 2) = a2;
  return result;
}

void sub_1CBB0D544(void *a1)
{
  if (a1)
  {
    sub_1CBB0D544(*a1);
    sub_1CBB0D544(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1CBB0D590(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = 4 * v4;
    do
    {
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7)
      {
        sub_1CB920400();
        JUMPOUT(0x1CBB0D6B4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 48))(v7, v3++);
      v6 -= 4;
    }
    while (v6);
  }
  uint64_t result = std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v9 = *(int **)a1;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  uint64_t v11 = *(void *)a1 + 4 * v10;
  if (v10)
  {
    uint64_t v12 = v9 - 1;
    uint64_t v13 = 4 * v10 - 4;
    while (v13)
    {
      int v14 = v12[1];
      int v15 = v12[2];
      ++v12;
      v13 -= 4;
      if (v14 == v15) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v12 = *(int **)a1;
LABEL_11:
    if (v12 != (int *)v11)
    {
      uint64_t v16 = v12 + 2;
      if (v12 + 2 != (int *)v11)
      {
        int v17 = *v12;
        do
        {
          int v18 = v17;
          int v17 = *v16;
          if (v18 != *v16)
          {
            v12[1] = v17;
            ++v12;
          }
          ++v16;
        }
        while (v16 != (int *)v11);
      }
      uint64_t v11 = (uint64_t)(v12 + 1);
    }
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(v11 - (void)v9) >> 2;
  return result;
}

void sub_1CBB0D6B8()
{
}

void *sub_1CBB0D6CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F6ED8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBB0D714(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F6ED8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBB0D740(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(**(void **)(result + 8) + 4 * *a2);
  return result;
}

__n128 sub_1CBB0D758(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, int a5)
{
  uint64_t v9 = *a3;
  if (!v9) {
    goto LABEL_33;
  }
  uint64_t v10 = **(void **)(a1 + 16);
  uint64_t v11 = (_DWORD *)(v10 + 16 * v9);
  uint64_t v12 = v11 + 3;
  if (v11[3] == a2) {
    goto LABEL_33;
  }
  uint64_t v13 = *(_DWORD **)(a1 + 40);
  if (v11[2] == 0x7FFFFFFF)
  {
    v11[2] = a2;
    uint64_t v14 = *(void *)(a1 + 24);
    if (*(_DWORD *)(v14 + 48) == a2)
    {
      int v15 = *(_DWORD *)(v14 + 24) - 1;
    }
    else
    {
      unsigned int v16 = *(_DWORD *)(v14 + 24);
      if (v16 >= *(_DWORD *)(v14 + 28)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v17 = *(void *)(v14 + 16) + 12 * v16;
      *(void *)(v17 + 4) = 0;
      result.n128_u64[0] = 0x8000000080000000;
      *(void *)uint64_t v17 = 0x8000000080000000;
      *(_DWORD *)(v17 + 8) = 0;
      int v15 = *(_DWORD *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = v15 + 1;
      *(_DWORD *)(v14 + 48) = a2;
    }
    *(_DWORD *)(*(void *)(v14 + 32) + 4 * v9) = v15;
    uint64_t v19 = *(void *)(v14 + 16) + 12 * *(unsigned int *)(v14 + 24);
    uint64_t v20 = (int *)(*(void *)v14 + 12 * v9);
    int v21 = *v20;
    int v22 = *(_DWORD *)(v19 - 8);
    if (*(_DWORD *)(v19 - 12) > *v20) {
      int v21 = *(_DWORD *)(v19 - 12);
    }
    *(_DWORD *)(v19 - 12) = v21;
    int v23 = v20[2];
    if (v22 > v23) {
      int v23 = v22;
    }
    *(_DWORD *)(v19 - 8) = v23;
    if (v13[350])
    {
      uint64_t v24 = *(uint64_t **)(a1 + 32);
      uint64_t v25 = *v24;
      unsigned int v26 = *((_DWORD *)v24 + 4);
      if (v26)
      {
        unsigned int v27 = v26 - 1;
        unsigned int v28 = (37 * *a3) & (v26 - 1);
        int v29 = (_DWORD *)(v25 + 12 * v28);
        int v30 = *v29;
        if (*a3 == *v29) {
          goto LABEL_20;
        }
        int v31 = 1;
        while (v30 != -1)
        {
          unsigned int v32 = v28 + v31++;
          unsigned int v28 = v32 & v27;
          int v29 = (_DWORD *)(v25 + 12 * (v32 & v27));
          int v30 = *v29;
          if (*a3 == *v29) {
            goto LABEL_20;
          }
        }
      }
      int v29 = (_DWORD *)(v25 + 12 * v26);
LABEL_20:
      if (v29 != (_DWORD *)(v25 + 12 * v26))
      {
        int v33 = v13[349];
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0538, memory_order_acquire) & 1) == 0)
        {
          int v49 = a5;
          v46 = v11 + 3;
          uint64_t v47 = v10;
          uint64_t v50 = v9;
          v51 = v13;
          BOOL v48 = (_DWORD *)(v10 + 16 * v9);
          uint64_t v45 = v29;
          int v44 = v33;
          int v43 = __cxa_guard_acquire(&qword_1EBCC0538);
          int v33 = v44;
          int v29 = v45;
          uint64_t v12 = v46;
          uint64_t v10 = v47;
          uint64_t v11 = v48;
          uint64_t v9 = v50;
          uint64_t v13 = v51;
          a5 = v49;
          if (v43)
          {
            dword_1EBCC04F8 = 10;
            __cxa_guard_release(&qword_1EBCC0538);
            int v33 = v44;
            int v29 = v45;
            uint64_t v12 = v46;
            uint64_t v10 = v47;
            uint64_t v11 = v48;
            uint64_t v9 = v50;
            uint64_t v13 = v51;
            a5 = v49;
          }
        }
        int v34 = v29[1];
        if (v34 != 0x80000000 && *v11 >= v33)
        {
          int v35 = v29[2];
          if ((int)(v34 - a2 + v35) >= dword_1EBCC04F8)
          {
            *(unsigned char *)(v10 + 16 * v9 + 4) = 1;
            v13[349] = v35;
          }
        }
      }
    }
  }
  if (!a5 || (v13[348] == a2 ? (BOOL v36 = *v12 == 0x7FFFFFFF) : (BOOL v36 = 1), v36))
  {
    *uint64_t v12 = a2;
    sub_1CB839378(*(void *)a1, a2, *a3);
  }
LABEL_33:
  int v37 = a3[1];
  if (v37)
  {
    uint64_t v38 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v52 = a2;
    v52[4] = 1;
    *(_DWORD *)&v52[8] = v37;
    *(void *)&v52[12] = *(void *)a4;
    *(_DWORD *)&v52[20] = *(_DWORD *)(a4 + 8);
    unsigned int v39 = *(_DWORD *)(v38 + 8);
    unint64_t v40 = *(void *)v38;
    if (v39 >= *(_DWORD *)(v38 + 12))
    {
      BOOL v42 = v40 + 24 * v39 > (unint64_t)v52;
      if (v40 <= (unint64_t)v52 && v42) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v41 = (__n128 *)(v40 + 24 * *(unsigned int *)(v38 + 8));
    __n128 result = *(__n128 *)v52;
    v41[1].n128_u64[0] = *(void *)&v52[16];
    *uint64_t v41 = result;
    ++*(_DWORD *)(v38 + 8);
  }
  return result;
}

_DWORD *sub_1CBB0DB08(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  __n128 result = operator new(12 * v8, (std::align_val_t)4uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v12 = *((unsigned int *)a1 + 4);
    if (v12)
    {
      uint64_t v13 = 12 * v12;
      do
      {
        *__n128 result = -1;
        result += 3;
        v13 -= 12;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = v4;
      do
      {
        unsigned int v15 = *v14;
        if (*v14 <= 0xFFFFFFFD)
        {
          int v16 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v17 = v16 & (37 * v15);
          uint64_t v18 = *a1 + 12 * v17;
          int v19 = *(_DWORD *)v18;
          if (v15 != *(_DWORD *)v18)
          {
            uint64_t v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                uint64_t v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = *a1 + 12 * (v23 & v16);
              int v19 = *(_DWORD *)v18;
              if (v15 == *(_DWORD *)v18) {
                goto LABEL_20;
              }
            }
            if (v20) {
              uint64_t v18 = v20;
            }
          }
LABEL_20:
          *(_DWORD *)uint64_t v18 = v15;
          *(void *)(v18 + 4) = *(void *)(v14 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v14 += 3;
      }
      while (v14 != &v4[3 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v10 = *((unsigned int *)a1 + 4);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      *__n128 result = -1;
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB0DCA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_1CBB0DF24(uint64_t a1)
{
  sub_1CBB103F8((unsigned int *)(a1 + 448));
  sub_1CBB103F8((unsigned int *)(a1 + 472));
  sub_1CBB103F8((unsigned int *)(a1 + 496));
  *(_DWORD *)(a1 + 248) = 0;
  uint64_t v2 = (*(_DWORD *)a1 + 1);
  if (*(_DWORD *)a1 != -1)
  {
    unsigned int v3 = (_DWORD *)(*(void *)(a1 + 8) + 8);
    do
    {
      _DWORD *v3 = 0;
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_1CBB0ECB4(a1 + 352);
  sub_1CBB0ED58(a1 + 256);
  *(_DWORD *)(a1 + 520) = 0;
}

uint64_t sub_1CBB0DF94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(void *)(a1 + 432) += 40;
  uint64_t v10 = *(void *)(a1 + 352);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 40 > *(void *)(a1 + 360) - v10)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 376) >> 7;
    if (v15 >= 0x1E) {
      LOBYTE(v15) = 30;
    }
    uint64_t v16 = 4096 << v15;
    uint64_t v11 = (uint64_t)operator new(4096 << v15, (std::align_val_t)8uLL);
    unsigned int v17 = *(_DWORD *)(a1 + 376);
    if (v17 >= *(_DWORD *)(a1 + 380)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 368) + 8 * v17) = v11;
    ++*(_DWORD *)(a1 + 376);
    *(void *)(a1 + 360) = v11 + v16;
  }
  else
  {
    uint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 352) = v11 + 40;
  *(_DWORD *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 16) = a4;
  *(_DWORD *)(v11 + 20) = a5;
  *(void *)(v11 + 24) = a3;
  *(_DWORD *)(v11 + 32) = -1;
  *(unsigned char *)(v11 + 36) = 0;
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v12) = v11;
  ++*(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a1 + 8);

  return sub_1CBB0E0FC(v13, v11);
}

uint64_t sub_1CBB0E0FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result + 24 * *(unsigned int *)(a2 + 16);
  unsigned int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v2 + 8 * v3) = a2;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

unint64_t sub_1CBB0E164(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  unsigned int v7 = *(_DWORD *)(a3 + 16);
  if (!v7) {
    goto LABEL_4;
  }
  uint64_t v8 = (v7 - 1) & (37 * a2);
  int v9 = *(_DWORD *)(v6 + 16 * v8);
  if (v9 != a2)
  {
    int v25 = 1;
    while (v9 != -1)
    {
      int v26 = v8 + v25++;
      uint64_t v8 = v26 & (v7 - 1);
      int v9 = *(_DWORD *)(v6 + 16 * v8);
      if (v9 == a2) {
        goto LABEL_3;
      }
    }
LABEL_4:
    *(void *)(a1 + 336) += 40;
    uint64_t v10 = *(void *)(a1 + 256);
    if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - v10 + 40 > *(void *)(a1 + 264) - v10)
    {
      unsigned int v22 = *(_DWORD *)(a1 + 280) >> 7;
      if (v22 >= 0x1E) {
        LOBYTE(v22) = 30;
      }
      uint64_t v23 = 4096 << v22;
      unint64_t v11 = (unint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
      unsigned int v24 = *(_DWORD *)(a1 + 280);
      if (v24 >= *(_DWORD *)(a1 + 284)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 272) + 8 * v24) = v11;
      ++*(_DWORD *)(a1 + 280);
      *(void *)(a1 + 264) = v11 + v23;
      uint64_t v6 = *(void *)a3;
      unsigned int v7 = *(_DWORD *)(a3 + 16);
    }
    else
    {
      unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a1 + 256) = v11 + 40;
    *(unsigned char *)unint64_t v11 = 0;
    *(void *)(v11 + 24) = v11 + 40;
    *(void *)(v11 + 8) = v11 + 24;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 32) = 0;
    if (v7)
    {
      unsigned int v12 = v7 - 1;
      unsigned int v13 = (v7 - 1) & (37 * a2);
      uint64_t v14 = v6 + 16 * v13;
      int v15 = *(_DWORD *)v14;
      if (*(_DWORD *)v14 == a2)
      {
LABEL_24:
        *(void *)(v14 + 8) = v11;
        return v11;
      }
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        uint64_t v14 = v6 + 16 * (v19 & v12);
        int v15 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 == a2) {
          goto LABEL_24;
        }
      }
      if (v16) {
        uint64_t v14 = v16;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v20 = *(_DWORD *)(a3 + 8);
    if (4 * v20 + 4 >= 3 * v7)
    {
      sub_1CBB0E4B4((uint64_t *)a3, 2 * v7);
      int v27 = *(_DWORD *)(a3 + 16);
      if (v27)
      {
        int v28 = v27 - 1;
        unsigned int v29 = (v27 - 1) & (37 * a2);
        uint64_t v14 = *(void *)a3 + 16 * v29;
        int v30 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 == a2) {
          goto LABEL_21;
        }
        uint64_t v31 = 0;
        int v32 = 1;
        while (v30 != -1)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -2;
          }
          if (v33) {
            uint64_t v31 = v14;
          }
          unsigned int v34 = v29 + v32++;
          unsigned int v29 = v34 & v28;
          uint64_t v14 = *(void *)a3 + 16 * (v34 & v28);
          int v30 = *(_DWORD *)v14;
          if (*(_DWORD *)v14 == a2) {
            goto LABEL_21;
          }
        }
LABEL_61:
        if (v31) {
          uint64_t v14 = v31;
        }
        goto LABEL_21;
      }
    }
    else
    {
      if (v7 + ~v20 - *(_DWORD *)(a3 + 12) > v7 >> 3)
      {
LABEL_21:
        ++*(_DWORD *)(a3 + 8);
        if (*(_DWORD *)v14 != -1) {
          --*(_DWORD *)(a3 + 12);
        }
        *(_DWORD *)uint64_t v14 = a2;
        *(void *)(v14 + 8) = 0;
        goto LABEL_24;
      }
      sub_1CBB0E4B4((uint64_t *)a3, v7);
      int v35 = *(_DWORD *)(a3 + 16);
      if (v35)
      {
        int v36 = v35 - 1;
        unsigned int v37 = (v35 - 1) & (37 * a2);
        uint64_t v14 = *(void *)a3 + 16 * v37;
        int v38 = *(_DWORD *)v14;
        if (*(_DWORD *)v14 == a2) {
          goto LABEL_21;
        }
        uint64_t v31 = 0;
        int v39 = 1;
        while (v38 != -1)
        {
          if (v31) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v38 == -2;
          }
          if (v40) {
            uint64_t v31 = v14;
          }
          unsigned int v41 = v37 + v39++;
          unsigned int v37 = v41 & v36;
          uint64_t v14 = *(void *)a3 + 16 * (v41 & v36);
          int v38 = *(_DWORD *)v14;
          if (*(_DWORD *)v14 == a2) {
            goto LABEL_21;
          }
        }
        goto LABEL_61;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_21;
  }
LABEL_3:
  if (v8 == v7) {
    goto LABEL_4;
  }
  return *(void *)(v6 + 16 * v8 + 8);
}

_DWORD *sub_1CBB0E4B4(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      unsigned int v12 = v4;
      do
      {
        int v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          int v14 = *((_DWORD *)a1 + 4) - 1;
          unsigned int v15 = v14 & (37 * v13);
          uint64_t v16 = *a1 + 16 * v15;
          int v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            uint64_t v18 = 0;
            int v19 = 1;
            while (v17 != -1)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v17 == -2;
              }
              if (v20) {
                uint64_t v18 = v16;
              }
              unsigned int v21 = v15 + v19++;
              unsigned int v15 = v21 & v14;
              uint64_t v16 = *a1 + 16 * (v21 & v14);
              int v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16) {
                goto LABEL_12;
              }
            }
            if (v18) {
              uint64_t v16 = v18;
            }
          }
LABEL_12:
          *(_DWORD *)uint64_t v16 = v13;
          *(void *)(v16 + 8) = *((void *)v12 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 4;
      }
      while (v12 != &v4[4 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v22 = *((unsigned int *)a1 + 4);
  if (v22)
  {
    uint64_t v23 = 16 * v22;
    do
    {
      *uint64_t result = -1;
      result += 4;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1CBB0E644(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10 = result;
  uint64_t v11 = *(unsigned int *)(a6 + 16);
  uint64_t v12 = *(void *)a6 + 16 * v11;
  if (*(_DWORD *)(a6 + 8))
  {
    if (v11)
    {
      uint64_t v13 = 16 * v11;
      uint64_t v14 = *(void *)a6;
      while (*(_DWORD *)v14 >= 0xFFFFFFFE)
      {
        v14 += 16;
        v13 -= 16;
        if (!v13) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v14 = *(void *)a6;
    }
  }
  else
  {
LABEL_6:
    uint64_t v14 = *(void *)a6 + 16 * v11;
  }
  uint64_t v15 = *(void *)a6 + 16 * v11;
  if (v14 != v15)
  {
    BOOL v48 = (void *)(a4 + 8);
    uint64_t v51 = *(void *)a6 + 16 * v11;
    do
    {
      if (a7)
      {
        if (*(void *)(a7 + 48))
        {
          uint64_t v16 = *(uint64_t **)(a7 + 40);
          if (v16)
          {
            unsigned int v17 = *(_DWORD *)v14;
            do
            {
              unsigned int v18 = *((_DWORD *)v16 + 7);
              if (v17 >= v18)
              {
                if (v18 >= v17) {
                  goto LABEL_20;
                }
                ++v16;
              }
              uint64_t v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
          goto LABEL_51;
        }
        uint64_t v42 = *(unsigned int *)(a7 + 8);
        if (!v42) {
          goto LABEL_51;
        }
        int v43 = *(_DWORD **)a7;
        unsigned int v17 = *(_DWORD *)v14;
        uint64_t v44 = 4 * v42;
        while (*v43 != v17)
        {
          ++v43;
          v44 -= 4;
          if (!v44) {
            goto LABEL_51;
          }
        }
        if (!v44) {
          goto LABEL_51;
        }
      }
      else
      {
        unsigned int v17 = *(_DWORD *)v14;
      }
LABEL_20:
      uint64_t v19 = *(void *)(v14 + 8);
      uint64_t result = sub_1CBB0E164(v10, v17, a5);
      uint64_t v20 = result;
      uint64_t v21 = *(unsigned int *)(v19 + 32);
      if (v21)
      {
        uint64_t v22 = *(uint64_t **)(v19 + 24);
        uint64_t v23 = &v22[v21];
        do
        {
          uint64_t v24 = *v22;
          uint64_t v25 = *(unsigned int *)(v20 + 32);
          if (v25)
          {
            int v26 = *(uint64_t **)(v20 + 24);
            uint64_t v27 = 8 * v25;
            while (1)
            {
              uint64_t v28 = *v26;
              if (*(void *)(v24 + 24) == *(void *)(*v26 + 24) && *(_DWORD *)(v24 + 32) == *(_DWORD *)(v28 + 32)) {
                break;
              }
              ++v26;
              v27 -= 8;
              if (!v27) {
                goto LABEL_27;
              }
            }
            *(_DWORD *)uint64_t v28 = 0;
            *(void *)(v28 + 8) &= *(void *)(v24 + 8);
            char v29 = *(unsigned char *)(v28 + 36);
            if (v29)
            {
              if (*(unsigned char *)(v24 + 36)) {
                char v29 = 1;
              }
              else {
                char v29 = a8;
              }
            }
            *(unsigned char *)(v28 + 36) = v29;
          }
          else
          {
LABEL_27:
            uint64_t result = sub_1CBB0E96C(v10, v20 + 24, (long long *)v24, a8);
          }
          ++v22;
        }
        while (v22 != v23);
      }
      if (*(unsigned char *)v19
        || !*(_DWORD *)(v19 + 32)
        || ((v45 = **(void **)(v19 + 24), uint64_t result = *(void *)(v45 + 24), v46 = *(_DWORD *)(v45 + 32), result)
          ? (BOOL v47 = v46 == -1)
          : (BOOL v47 = 1),
            v47 || (uint64_t result = sub_1CBC2D2EC(result, v46, v48), a2 == a3) || (result & 0xFFFFFFFD) != 5))
      {
        uint64_t v30 = *(unsigned int *)(v19 + 16);
        if (v30)
        {
          uint64_t v31 = *(uint64_t **)(v19 + 8);
          int v32 = &v31[v30];
          do
          {
            uint64_t v33 = *v31;
            uint64_t v34 = *(unsigned int *)(v20 + 32);
            if (v34)
            {
              uint64_t v35 = *(void *)(v20 + 24);
              uint64_t v36 = 8 * v34;
              while (*(void *)(v33 + 24) != *(void *)(*(void *)v35 + 24)
                   || *(_DWORD *)(v33 + 32) != *(_DWORD *)(*(void *)v35 + 32))
              {
                v35 += 8;
                v36 -= 8;
                if (!v36) {
                  goto LABEL_43;
                }
              }
            }
            else
            {
LABEL_43:
              uint64_t v37 = *(unsigned int *)(v20 + 16);
              if (v37)
              {
                uint64_t v38 = *(void *)(v20 + 8);
                uint64_t v39 = 8 * v37;
                while (*(void *)(v33 + 24) != *(void *)(*(void *)v38 + 24)
                     || *(_DWORD *)(v33 + 32) != *(_DWORD *)(*(void *)v38 + 32))
                {
                  v38 += 8;
                  v39 -= 8;
                  if (!v39) {
                    goto LABEL_48;
                  }
                }
              }
              else
              {
LABEL_48:
                uint64_t result = sub_1CBB0E96C(v10, v20 + 8, (long long *)v33, 0);
              }
            }
            ++v31;
          }
          while (v31 != v32);
        }
      }
      *(unsigned char *)uint64_t v20 = 1;
      uint64_t v15 = v51;
LABEL_51:
      BOOL v40 = (unsigned int *)(v14 + 16);
      while (v40 != (unsigned int *)v12)
      {
        unsigned int v41 = *v40;
        v40 += 4;
        if (v41 <= 0xFFFFFFFD)
        {
          uint64_t v14 = (uint64_t)(v40 - 4);
          goto LABEL_56;
        }
      }
      uint64_t v14 = v12;
LABEL_56:
      ;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t sub_1CBB0E96C(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  *(void *)(a1 + 432) += 40;
  uint64_t v8 = *(void *)(a1 + 352);
  if (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) - v8 + 40 > *(void *)(a1 + 360) - v8)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 376) >> 7;
    if (v14 >= 0x1E) {
      LOBYTE(v14) = 30;
    }
    uint64_t v15 = 4096 << v14;
    uint64_t v9 = (uint64_t)operator new(4096 << v14, (std::align_val_t)8uLL);
    unsigned int v16 = *(_DWORD *)(a1 + 376);
    if (v16 >= *(_DWORD *)(a1 + 380)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a1 + 368) + 8 * v16) = v9;
    ++*(_DWORD *)(a1 + 376);
    *(void *)(a1 + 360) = v9 + v15;
  }
  else
  {
    uint64_t v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 352) = v9 + 40;
  long long v10 = *a3;
  long long v11 = a3[1];
  *(void *)(v9 + 32) = *((void *)a3 + 4);
  *(_OWORD *)uint64_t v9 = v10;
  *(_OWORD *)(v9 + 16) = v11;
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  if (v12 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a2 + 8 * v12) = v9;
  ++*(_DWORD *)(a2 + 8);
  uint64_t result = sub_1CBB0E0FC(*(void *)(a1 + 8), v9);
  if (a4) {
    *(unsigned char *)(v9 + 36) = 1;
  }
  return result;
}

uint64_t *sub_1CBB0EABC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 496), 8);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 472), 8);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 448), 8);
    sub_1CBB0ECB4(v2 + 352);
    uint64_t v3 = *(unsigned int *)(v2 + 376);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)(v2 + 368);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        MEMORY[0x1D25D9CD0](v6, 8);
        v5 -= 8;
      }
      while (v5);
    }
    int v7 = *(uint64_t **)(v2 + 416);
    uint64_t v8 = *(unsigned int *)(v2 + 424);
    if (v8)
    {
      uint64_t v22 = 16 * v8;
      do
      {
        uint64_t v23 = *v7;
        v7 += 2;
        MEMORY[0x1D25D9CD0](v23, 8);
        v22 -= 16;
      }
      while (v22);
      int v7 = *(uint64_t **)(v2 + 416);
    }
    if (v7 != (uint64_t *)(v2 + 432)) {
      free(v7);
    }
    uint64_t v9 = *(void **)(v2 + 368);
    if (v9 != (void *)(v2 + 384)) {
      free(v9);
    }
    sub_1CBB0ED58(v2 + 256);
    uint64_t v10 = *(unsigned int *)(v2 + 280);
    if (v10)
    {
      long long v11 = *(uint64_t **)(v2 + 272);
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11++;
        MEMORY[0x1D25D9CD0](v13, 8);
        v12 -= 8;
      }
      while (v12);
    }
    unsigned int v14 = *(uint64_t **)(v2 + 320);
    uint64_t v15 = *(unsigned int *)(v2 + 328);
    if (v15)
    {
      uint64_t v24 = 16 * v15;
      do
      {
        uint64_t v25 = *v14;
        v14 += 2;
        MEMORY[0x1D25D9CD0](v25, 8);
        v24 -= 16;
      }
      while (v24);
      unsigned int v14 = *(uint64_t **)(v2 + 320);
    }
    if (v14 != (uint64_t *)(v2 + 336)) {
      free(v14);
    }
    unsigned int v16 = *(void **)(v2 + 272);
    if (v16 != (void *)(v2 + 288)) {
      free(v16);
    }
    unsigned int v17 = *(void **)(v2 + 240);
    if (v17 != (void *)(v2 + 256)) {
      free(v17);
    }
    unsigned int v18 = *(char **)(v2 + 8);
    uint64_t v19 = *(unsigned int *)(v2 + 16);
    if (v19)
    {
      uint64_t v20 = 24 * v19;
      do
      {
        uint64_t v21 = *(char **)&v18[v20 - 24];
        if (&v18[v20 - 8] != v21) {
          free(v21);
        }
        v20 -= 24;
      }
      while (v20);
      unsigned int v18 = *(char **)(v2 + 8);
    }
    if (v18 != (char *)(v2 + 24)) {
      free(v18);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

uint64_t sub_1CBB0ECB4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 72);
  if (v2)
  {
    uint64_t v9 = *(uint64_t **)(result + 64);
    uint64_t v10 = 16 * v2;
    do
    {
      uint64_t v11 = *v9;
      v9 += 2;
      uint64_t result = MEMORY[0x1D25D9CD0](v11, 8);
      v10 -= 16;
    }
    while (v10);
  }
  uint64_t v3 = *(unsigned int *)(v1 + 24);
  *(_DWORD *)(v1 + 72) = 0;
  if (v3)
  {
    *(void *)(v1 + 80) = 0;
    uint64_t v4 = *(void **)(v1 + 16);
    uint64_t v5 = *v4 + 4096;
    *(void *)uint64_t v1 = *v4;
    *(void *)(v1 + 8) = v5;
    if (v3 != 1)
    {
      uint64_t v6 = v4 + 1;
      uint64_t v7 = 8 * v3 - 8;
      do
      {
        uint64_t v8 = *v6++;
        uint64_t result = MEMORY[0x1D25D9CD0](v8, 8);
        v7 -= 8;
      }
      while (v7);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

void sub_1CBB0ED58(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      unint64_t v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 40 <= v8)
      {
        uint64_t v10 = (void **)(v9 + 24);
        do
        {
          if (v10 + 2 != *v10) {
            free(*v10);
          }
          uint64_t v11 = (void **)*(v10 - 2);
          if (v10 != v11) {
            free(v11);
          }
          uint64_t v12 = v10 + 7;
          v10 += 5;
        }
        while ((unint64_t)v12 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13)
  {
    unsigned int v14 = *(void **)(a1 + 64);
    uint64_t v15 = &v14[2 * v13];
    do
    {
      unint64_t v16 = (*v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v17 = *v14 + v14[1];
      if (v16 + 40 <= v17)
      {
        unsigned int v18 = (void **)(v16 + 24);
        do
        {
          if (v18 + 2 != *v18) {
            free(*v18);
          }
          uint64_t v19 = (void **)*(v18 - 2);
          if (v18 != v19) {
            free(v19);
          }
          uint64_t v20 = v18 + 7;
          v18 += 5;
        }
        while ((unint64_t)v20 <= v17);
      }
      v14 += 2;
    }
    while (v14 != v15);
    uint64_t v21 = *(unsigned int *)(a1 + 72);
    if (v21)
    {
      uint64_t v28 = *(uint64_t **)(a1 + 64);
      uint64_t v29 = 16 * v21;
      do
      {
        uint64_t v30 = *v28;
        v28 += 2;
        MEMORY[0x1D25D9CD0](v30, 8);
        v29 -= 16;
      }
      while (v29);
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v22 = *(unsigned int *)(a1 + 24);
  if (v22)
  {
    *(void *)(a1 + 80) = 0;
    uint64_t v23 = *(void **)(a1 + 16);
    uint64_t v24 = *v23 + 4096;
    *(void *)a1 = *v23;
    *(void *)(a1 + 8) = v24;
    if (v22 != 1)
    {
      uint64_t v25 = v23 + 1;
      uint64_t v26 = 8 * v22 - 8;
      do
      {
        uint64_t v27 = *v25++;
        MEMORY[0x1D25D9CD0](v27, 8);
        v26 -= 8;
      }
      while (v26);
    }
    *(_DWORD *)(a1 + 24) = 1;
  }
}

uint64_t sub_1CBB0EF28(uint64_t a1, void *a2, unsigned int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, char a9)
{
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  unsigned __int8 v79 = 0;
  if ((a4 & 0xFFFFFFFE) == 6 && (v13 = *(void *)(a1 + 1864), uint64_t v14 = *(unsigned int *)(v13 + 248), v14))
  {
    uint64_t v15 = *(_DWORD **)(*(void *)(v13 + 240) + 8 * v14 - 8);
    if (*v15) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = v15;
    }
  }
  else
  {
    unint64_t v16 = 0;
  }
  uint64_t v17 = a2[4] + 32 * a3;
  unint64_t v80 = 0;
  if (sub_1CBB0BF40(*(void *)(a1 + 1248), *(_DWORD *)(a1 + 1264), v17, &v80)) {
    BOOL v18 = v80 == *(void *)(v12 + 1248) + 16 * *(unsigned int *)(v12 + 1264);
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    *(_DWORD *)&v65[4] = 0;
    *(_DWORD *)unsigned int v65 = 0;
  }
  else
  {
    *(void *)&v65[4] = *(unsigned int *)(v80 + 12);
    *(_DWORD *)unsigned int v65 = *(_DWORD *)(*(void *)(v12 + 1272) + 4 * *(void *)&v65[4]);
  }
  unsigned int v71 = sub_1CBC2CCF8(v11, *(void *)(v12 + 1416));
  sub_1CBAF9B1C(&v80, v11, a3, *(void *)(v12 + 1416), 1, 0);
  unint64_t v19 = v80;
  unint64_t v20 = HIDWORD(v80);
  int v72 = (int)v81;
  if (v81 != HIDWORD(v80))
  {
    uint64_t v64 = 1 << v71;
    BOOL v66 = v80 == 0;
    uint64_t v68 = v12;
    uint64_t v69 = v16;
    uint64_t v67 = a7;
    while (a4 == 4)
    {
      uint64_t v28 = v11[4] + 32 * a3;
      char v29 = (*(_DWORD *)(v28 + 16) - 81) > 4 ? 0 : *(_DWORD *)(v28 + 4);
      uint64_t v30 = sub_1CBAD8000(v28);
      if ((v30 & 0xFF00000000) == 0 || ((1 << (v20 - v29)) & v30) != 0) {
        break;
      }
LABEL_77:
      LODWORD(v20) = v20 + 1;
      unint64_t v19 = v19 | ((unint64_t)v20 << 32);
      if (v20 == v72) {
        goto LABEL_14;
      }
    }
    uint64_t v32 = *(void *)(v12 + 1864);
    if (v19)
    {
      if (v19 == 2)
      {
        uint64_t v33 = v32 + 472;
      }
      else
      {
        if (v19 != 1)
        {
          unint64_t v34 = 0;
          if (!v16)
          {
LABEL_42:
            int v78 = 0;
            __int16 v77 = 0;
            uint64_t v76 = 0;
            __int16 v75 = 0;
            uint64_t v36 = v11[3];
            uint64_t v37 = *(uint64_t **)(v34 + 24);
            uint64_t v38 = *(unsigned int *)(v34 + 32);
            unint64_t v80 = v12;
            uint64_t v81 = (char *)&v75 + 1;
            uint64_t v39 = v11;
            uint64_t v82 = v11;
            LODWORD(v83) = a3;
            v84 = &v79;
            LODWORD(v85) = v71;
            uint64_t v86 = &v78;
            int v87 = &v76;
            uint64_t v40 = a5;
            int v88 = a5;
            int v89 = a4;
            v90 = &v77;
            unint64_t v91 = v34;
            BOOL v92 = (char *)&v77 + 1;
            BOOL v93 = v66;
            char v94 = a9;
            uint64_t v95 = &v75;
            uint64_t v96 = v36;
            if (!v38) {
              goto LABEL_53;
            }
            uint64_t v41 = 8 * v38;
            uint64_t v42 = v37;
            int v43 = &v37[v38];
            do
            {
              uint64_t v44 = *v42++;
              if (sub_1CBB0F984((uint64_t)&v80, v44)) {
                break;
              }
              uint64_t v37 = v42;
              v41 -= 8;
            }
            while (v41);
            if (v41 == 8)
            {
LABEL_53:
              int v43 = v37;
            }
            else
            {
              uint64_t v45 = 8;
              int v43 = v37;
              do
              {
                if ((sub_1CBB0F984((uint64_t)&v80, v37[(unint64_t)v45 / 8]) & 1) == 0) {
                  *v43++ = v37[(unint64_t)v45 / 8];
                }
                v45 += 8;
              }
              while (v41 != v45);
            }
            *(_DWORD *)(v34 + 32) = ((unint64_t)v43 - *(void *)(v34 + 24)) >> 3;
            if ((_BYTE)v75)
            {
              uint64_t v12 = v68;
              unint64_t v16 = v69;
              a5 = v40;
              uint64_t v11 = v39;
              uint64_t v46 = v67;
              if (!HIBYTE(v75))
              {
LABEL_62:
                int v51 = v78;
                if (v78 != 1 && v77 != 0)
                {
                  char v53 = sub_1CBB0F8AC(v12, a4, a3, v11, v34 + 8);
                  v79 |= v53;
                  int v51 = v78;
                }
                if (v51 == 2)
                {
                  sub_1CBB0F8AC(v12, a4, a3, v11, v34 + 24);
                  uint64_t v54 = *(void **)(v34 + 8);
                  uint64_t v55 = *(unsigned int *)(v34 + 16);
                  if (v55)
                  {
                    uint64_t v56 = 8 * v55;
                    uint64_t v57 = *(_DWORD ***)(v34 + 8);
                    do
                    {
                      uint64_t v58 = *v57++;
                      *uint64_t v58 = 2;
                      v56 -= 8;
                    }
                    while (v56);
                  }
                  uint64_t v59 = v76;
                  *(_DWORD *)(v34 + 16) = 0;
                  if (!*(_DWORD *)(v34 + 20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *uint64_t v54 = v59;
                  ++*(_DWORD *)(v34 + 16);
                }
                *(unsigned char *)unint64_t v34 = 0;
                if (a8)
                {
                  unsigned int v60 = *(_DWORD *)(v46 + 8);
                  if (v60 >= *(_DWORD *)(v46 + 12))
                  {
                    LODWORD(v80) = 0;
                    uint64_t v81 = 0;
                    uint64_t v82 = *(void **)v65;
                    uint64_t v83 = v11;
                    LODWORD(v84) = a3;
                    BYTE4(v84) = 0;
                    unint64_t v85 = v34;
                    BOOL v62 = *(void *)v46 + 48 * (unint64_t)v60 > (unint64_t)&v80;
                    if (*(void *)v46 > (unint64_t)&v80 || !v62) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v61 = *(void *)v46 + 48 * v60;
                  *(_DWORD *)uint64_t v61 = 0;
                  *(void *)(v61 + 8) = 0;
                  *(_DWORD *)(v61 + 16) = *(_DWORD *)v65;
                  *(_DWORD *)(v61 + 20) = *(_DWORD *)&v65[4];
                  *(void *)(v61 + 24) = v11;
                  *(_DWORD *)(v61 + 32) = a3;
                  *(unsigned char *)(v61 + 36) = 0;
                  *(void *)(v61 + 40) = v34;
                  ++*(_DWORD *)(v46 + 8);
                }
                goto LABEL_77;
              }
            }
            else
            {
              __int16 v75 = 256;
              uint64_t v12 = v68;
              unint64_t v16 = v69;
              a5 = v40;
              uint64_t v11 = v39;
              uint64_t v46 = v67;
            }
            uint64_t v47 = *(unsigned int *)(v34 + 16);
            if (v47)
            {
              BOOL v48 = *(_DWORD ***)(v34 + 8);
              uint64_t v49 = 8 * v47;
              do
              {
                uint64_t v50 = *v48++;
                *uint64_t v50 = 2;
                v49 -= 8;
              }
              while (v49);
            }
            *(_DWORD *)(v34 + 16) = 0;
            goto LABEL_62;
          }
LABEL_38:
          if (!*v16)
          {
            if (v71 >= 7) {
              abort();
            }
            uint64_t v35 = *((void *)v16 + 1);
            if ((v35 & v64) == 0)
            {
              unsigned __int8 v79 = 1;
              *((void *)v16 + 1) = v64 | v35 | 0x40;
            }
          }
          goto LABEL_42;
        }
        uint64_t v33 = v32 + 448;
      }
    }
    else
    {
      uint64_t v33 = v32 + 496;
    }
    unint64_t v34 = sub_1CBB0E164(v32, SHIDWORD(v19), v33);
    if (!v16) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }
LABEL_14:
  if (!a5)
  {
    if (!v79) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v21 = v11;
  unsigned __int8 v22 = v79 != 0;
  char v23 = sub_1CBC2CCF8(v21, *(void *)(v12 + 1416)) == 4;
  uint64_t v24 = *(void *)(v12 + 1864);
  uint64_t v25 = *(void *)(v12 + 1416);
  int v26 = sub_1CBC2CCF8(v21, v25);
  if (sub_1CBB0F564(*(void *)(v24 + 8), a5, a6, v22, v23, v25, v26)) {
LABEL_16:
  }
    unsigned __int8 v79 = 1;
LABEL_17:
  if (v16 && *v16) {
    *(_DWORD *)(*(void *)(v12 + 1864) + 248) = 0;
  }
  return v79;
}

uint64_t sub_1CBB0F564(uint64_t a1, unsigned int a2, int a3, unsigned __int8 a4, char a5, uint64_t a6, int a7)
{
  unsigned __int8 v24 = a4;
  char v23 = a5;
  char v22 = 0;
  uint64_t v10 = a1 + 24 * a2;
  *(void *)&long long v17 = &v24;
  *((void *)&v17 + 1) = &v23;
  BOOL v18 = &v22;
  int v19 = a3;
  uint64_t v20 = a6;
  int v21 = a7;
  sub_1CBB0F618(v10, &v17);
  if (v22)
  {
    *(void *)&long long v12 = &v24;
    *((void *)&v12 + 1) = &v23;
    uint64_t v13 = &v22;
    int v14 = a3;
    uint64_t v15 = a6;
    int v16 = a7;
    sub_1CBB0F618(v10, &v12);
  }
  return v24;
}

uint64_t sub_1CBB0F618(uint64_t result, _OWORD *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(int ***)result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v9[2] = a2[2];
  if (v4)
  {
    uint64_t v6 = &v3[v4];
    uint64_t v7 = 8 * v4 - 8;
    while (1)
    {
      uint64_t result = sub_1CBB0F6DC((uint64_t)v9, v3);
      unint64_t v8 = v3 + 1;
      if (result) {
        break;
      }
      v7 -= 8;
      ++v3;
      if (v7 == -8)
      {
        uint64_t v3 = v6;
        goto LABEL_10;
      }
    }
    for (; v7; v7 -= 8)
    {
      uint64_t result = sub_1CBB0F6DC((uint64_t)v9, v8);
      if ((result & 1) == 0) {
        *v3++ = *v8;
      }
      ++v8;
    }
  }
LABEL_10:
  *(_DWORD *)(v2 + 8) = ((unint64_t)v3 - *(void *)v2) >> 3;
  return result;
}

BOOL sub_1CBB0F6DC(uint64_t a1, int **a2)
{
  uint64_t v4 = *((void *)*a2 + 3);
  if (!v4)
  {
    int v7 = 0;
LABEL_11:
    int v13 = 0;
    int v12 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = (*a2)[8];
  int v7 = (sub_1CBC2CCF8(*((void **)*a2 + 3), v5) == 1) << 8;
  if (v6 == -1) {
    goto LABEL_11;
  }
  unint64_t v8 = (void *)(v5 + 8);
  if (sub_1CBC2D2EC(v4, v6, v8) - 3 > 1) {
    goto LABEL_11;
  }
  uint64_t v9 = *(unsigned int *)(v4 + 40);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while ((*(_DWORD *)(*(void *)(v4 + 32) + v10) & 0x10000FF) != 0x1000000
         || sub_1CBC2D2EC(v4, v11, v8) != 3)
    {
      ++v11;
      v10 += 32;
      if (v9 == v11) {
        goto LABEL_9;
      }
    }
    int v13 = 1;
    int v12 = 1;
  }
  else
  {
LABEL_9:
    int v12 = 0;
    int v13 = 1;
  }
LABEL_12:
  int v14 = *(unsigned char **)a1;
  if (**(unsigned char **)a1)
  {
    if ((v13 & 1) != 0 || **(unsigned char **)(a1 + 8)) {
      **a2 = 2;
    }
    unsigned int v15 = *(_DWORD *)(a1 + 40);
    if (v15 >= 7) {
      abort();
    }
    int v16 = *a2;
    *((void *)v16 + 1) = (1 << v15) | *((void *)*a2 + 1) | 0x40;
    int v17 = *v16;
  }
  else
  {
    int v17 = **a2;
    if (!v17)
    {
      int v17 = *(_DWORD *)(a1 + 24);
      if (v17)
      {
        if ((*a2)[5] == v17 && ((v13 & v12 & 1) != 0 || v7 && **(unsigned char **)(a1 + 8)))
        {
          int v17 = 0;
          **(unsigned char **)(a1 + 16) = 1;
          *int v14 = 1;
        }
        else
        {
          int v17 = 0;
        }
      }
    }
  }
  return v17 != 0;
}

uint64_t sub_1CBB0F8AC(uint64_t a1, int a2, unsigned int a3, void *a4, uint64_t a5)
{
  unsigned int v10 = sub_1CBC2CCF8(a4, *(void *)(a1 + 1416));
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11)
  {
    unsigned int v12 = v10;
    char v13 = 0;
    int v14 = *(uint64_t **)a5;
    uint64_t v15 = 1 << v10;
    uint64_t v16 = 8 * v11;
    do
    {
      int v17 = (_DWORD *)*v14;
      if (!*(_DWORD *)*v14 && sub_1CBB0FB5C(a1, (uint64_t)a4, a3, a2, *v14))
      {
        if (v12 >= 7) {
          abort();
        }
        v13 |= (*((void *)v17 + 1) & v15) == 0;
      }
      ++v14;
      v16 -= 8;
    }
    while (v16);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1CBB0F984(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 2 && !**(unsigned char **)(a1 + 80))
    {
      uint64_t v4 = *(void *)(a2 + 24);
      if (v4) {
        LOBYTE(v4) = *(void *)(v4 + 24) == *(void *)(a1 + 112);
      }
    }
    else
    {
      LOBYTE(v4) = 0;
    }
    **(unsigned char **)(a1 + 8) |= v4;
    return 1;
  }
  uint64_t v6 = *(void *)a1;
  **(unsigned char **)(a1 + 104) = 1;
  int v7 = sub_1CBB0FB5C(v6, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 68), a2);
  if (v7 == 1)
  {
    **(unsigned char **)(a1 + 88) = 1;
    unsigned int v10 = *(_DWORD **)(a1 + 48);
    if (!*v10) {
      _DWORD *v10 = 1;
    }
    if (*(_DWORD *)(a1 + 68) != 5)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 >= 7) {
        goto LABEL_33;
      }
      BOOL v12 = ((*(void *)(a2 + 8) >> v11) & 1) == 0 && *(_DWORD *)(a1 + 64) != 0;
      **(unsigned char **)(a1 + 32) |= v12;
    }
    if (*(unsigned char *)(a1 + 96) && !*(unsigned char *)(a1 + 97)) {
      return 0;
    }
    uint64_t result = 1;
LABEL_31:
    *(_DWORD *)a2 = 1;
    return result;
  }
  if (v7 != 2)
  {
    uint64_t result = 0;
    **(unsigned char **)(a1 + 72) = 1;
    **(unsigned char **)(a1 + 88) = 1;
    return result;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 >= 7) {
LABEL_33:
  }
    abort();
  BOOL v9 = ((*(void *)(a2 + 8) >> v8) & 1) == 0 && *(_DWORD *)(a1 + 64) != 0;
  **(unsigned char **)(a1 + 32) |= v9;
  **(_DWORD **)(a1 + 48) = 2;
  char v13 = *(uint64_t **)(a1 + 56);
  uint64_t v14 = *v13;
  if (!*v13)
  {
    uint64_t *v13 = a2;
    uint64_t v14 = **(void **)(a1 + 56);
  }
  uint64_t result = 1;
  if (v14 != a2)
  {
    *(void *)(v14 + 8) &= *(void *)(a2 + 8);
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_1CBB0FB5C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 24);
  if (v6)
  {
    uint64_t v11 = *(unsigned int *)(a5 + 32);
    int v12 = sub_1CBC2D2EC(*(void *)(a5 + 24), *(_DWORD *)(a5 + 32), (void *)(*(void *)(a1 + 1416) + 8));
    switch(a4)
    {
      case 4:
        BOOL v33 = v12 == 4;
        goto LABEL_19;
      case 5:
        if (v12 == 4) {
          return 2;
        }
        uint64_t v35 = *(void *)(a2 + 32);
        int v36 = *(_DWORD *)(v35 + 32 * a3 + 16);
        if ((v36 - 81) > 4)
        {
          unsigned int v39 = 0;
        }
        else
        {
          unsigned int v37 = *(_DWORD *)(v35 + 32 * a3);
          if ((_BYTE)v37) {
            int v38 = (v37 >> 8) & 0xFFF;
          }
          else {
            LOWORD(v38) = 0;
          }
          if ((v38 & 0x200) != 0) {
            LOWORD(v38) = v38 & 0xCFF;
          }
          BOOL v31 = (v38 & 0xEFF) == 0;
          unsigned int v39 = ((v38 & 0xEFFu) - 129) >> 1;
          if (v31) {
            unsigned int v39 = 0;
          }
        }
        uint64_t v40 = *(void *)(v6 + 32);
        int v41 = *(_DWORD *)(v40 + 32 * v11 + 16);
        if ((v41 - 81) > 4)
        {
          unsigned int v44 = 0;
        }
        else
        {
          unsigned int v42 = *(_DWORD *)(v40 + 32 * v11);
          if ((_BYTE)v42) {
            int v43 = (v42 >> 8) & 0xFFF;
          }
          else {
            LOWORD(v43) = 0;
          }
          if ((v43 & 0x200) != 0) {
            LOWORD(v43) = v43 & 0xCFF;
          }
          BOOL v31 = (v43 & 0xEFF) == 0;
          unsigned int v44 = ((v43 & 0xEFFu) - 129) >> 1;
          if (v31) {
            unsigned int v44 = 0;
          }
        }
        if (v36 == v41 && (v36 == 81 || *(void *)(a2 + 24) == *(void *)(v6 + 24))) {
          return (v44 ^ v39) < 2;
        }
        else {
          return 2;
        }
      case 6:
        BOOL v33 = v12 == 6;
LABEL_19:
        int v34 = !v33;
        return (2 * v34);
      case 7:
        BOOL v31 = v12 == 6;
        goto LABEL_12;
      default:
        if (a2)
        {
          if (*(unsigned char *)(*(void *)(a1 + 1408) + 356))
          {
            uint64_t v13 = *(void *)(a1 + 1416);
            unsigned int v14 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * a3 + 4);
            unsigned int v15 = *(_DWORD *)(*(void *)(v6 + 32) + 32 * v11 + 4);
            uint64_t v16 = *(void *)(v13 + 8);
            unint64_t v17 = *(unsigned int *)(v16 + 24 * v14 + 16);
            uint64_t v18 = *(void *)(v13 + 56);
            int v19 = (_WORD *)(v18 + ((v17 >> 3) & 0x1FFFFFFE));
            __int16 v20 = *v19 + (v17 & 0xF) * v14;
            unint64_t v21 = *(unsigned int *)(v16 + 24 * v15 + 16);
            LOWORD(v16) = v21 & 0xF;
            char v22 = (_WORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFE));
            __int16 v24 = *v22;
            char v23 = v22 + 1;
            __int16 v25 = v24 + v16 * v15;
            BOOL v26 = 1;
            while (1)
            {
              ++v19;
              uint64_t v27 = v23;
              __int16 v28 = v25;
              do
              {
                if (v20 == v28)
                {
                  BOOL v26 = 1;
                  goto LABEL_46;
                }
                int v29 = *v27++;
                v28 += v29;
              }
              while (v29);
              char v30 = 0;
              v20 += *v19;
              if (!*v19) {
                goto LABEL_47;
              }
            }
          }
          BOOL v26 = 0;
        }
        else
        {
          BOOL v26 = *(unsigned __int8 *)(*(void *)(a1 + 1408) + 356) != 0;
        }
LABEL_46:
        char v30 = 1;
LABEL_47:
        if (*(unsigned char *)(a5 + 36)) {
          char v45 = 0;
        }
        else {
          char v45 = v30;
        }
        uint64_t result = sub_1CBB0C8EC(v45, a4, a2, a3, v26);
        break;
    }
  }
  else
  {
    BOOL v31 = a4 == 6;
LABEL_12:
    if (v31) {
      return 2;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CBB0FE18(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v4 = *(void *)result + 16 * v3;
  if (*(_DWORD *)(result + 8))
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = *(void *)result;
      while (*(_DWORD *)v6 >= 0xFFFFFFFE)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v6 = *(void *)result;
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = *(void *)result + 16 * v3;
  }
  uint64_t v7 = *(void *)result + 16 * v3;
LABEL_9:
  while (v6 != v7)
  {
    uint64_t v11 = *(void *)(v6 + 8);
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8)
    {
      sub_1CB920400();
      JUMPOUT(0x1CBB0FEFCLL);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &v11);
    BOOL v9 = (unsigned int *)(v6 + 16);
    while (v9 != (unsigned int *)v4)
    {
      unsigned int v10 = *v9;
      v9 += 4;
      if (v10 <= 0xFFFFFFFD)
      {
        uint64_t v6 = (uint64_t)(v9 - 4);
        goto LABEL_9;
      }
    }
    uint64_t v6 = v4;
  }
  return result;
}

void sub_1CBB0FF00()
{
}

__n128 sub_1CBB0FF14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F6F20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBB0FF60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6F20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBB0FF90(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(unsigned int *)(*a2 + 32);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(_DWORD ***)(v2 + 24);
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t v7 = *v5;
      if (!**v5)
      {
        __n128 result = *((void *)v7 + 3);
        unsigned int v8 = v7[8];
        if (result) {
          BOOL v9 = v8 == -1;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9) {
          __n128 result = sub_1CBC2D2EC(result, v8, (void *)(*(void *)(v4 + 16) + 8));
        }
        _DWORD *v7 = 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v10 = *(unsigned int *)(v2 + 16);
  if (v10)
  {
    uint64_t v11 = *(_DWORD ***)(v2 + 8);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      _DWORD *v13 = 2;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

void sub_1CBB1003C()
{
}

void *sub_1CBB10050()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F6F68;
  return result;
}

void sub_1CBB10088(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F6F68;
}

void sub_1CBB100B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(unsigned char *)uint64_t v2 = 0;
}

void sub_1CBB100C8()
{
}

__n128 sub_1CBB100DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F6FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBB10128(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F6FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBB10158(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *((void *)*a2 + 3);
  uint64_t v4 = *((unsigned int *)*a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = (int **)(v3 + 8 * v4);
    uint64_t v7 = 8 * v4 - 8;
    unsigned int v8 = (int **)*((void *)*a2 + 3);
    while (1)
    {
      int v9 = **v8;
      if (v9) {
        break;
      }
      ++v8;
      v7 -= 8;
      if (v8 == v6)
      {
        BOOL v10 = 0;
        goto LABEL_25;
      }
    }
    uint64_t v11 = *((void *)*v8 + 3);
    BOOL v10 = v11 && *(void *)(v11 + 24) == v5 && v9 == 2 && *v2 == 0;
    if (v8 + 1 == v6)
    {
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v12 = 1;
      uint64_t v6 = v8;
      do
      {
        uint64_t v13 = v8[v12];
        int v14 = *v13;
        if (*v13)
        {
          uint64_t v15 = *((void *)v13 + 3);
          if (v15 && *(void *)(v15 + 24) == v5)
          {
            if (v14 == 2) {
              int v16 = *v2 ^ 1;
            }
            else {
              int v16 = 0;
            }
            BOOL v10 = (v16 | v10) != 0;
          }
        }
        else
        {
          *v6++ = v13;
        }
        ++v12;
        v7 -= 8;
      }
      while (v7);
      uint64_t v3 = *((void *)v2 + 3);
    }
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v6 = (int **)*((void *)*a2 + 3);
  }
LABEL_25:
  unint64_t v17 = (unint64_t)v6 - v3;
  unint64_t v18 = ((unint64_t)v6 - v3) >> 3;
  *((_DWORD *)v2 + 8) = v18;
  if (v10 || (v17 & 0x7FFFFFFF8) == 0)
  {
    *((_DWORD *)v2 + 4) = 0;
  }
  else
  {
    uint64_t v19 = *((void *)v2 + 1);
    uint64_t v20 = *((unsigned int *)v2 + 4);
    if (v20)
    {
      unint64_t v21 = (void *)(v19 + 8 * v20);
      uint64_t v22 = 8 * v20 - 8;
      char v23 = (_DWORD **)*((void *)v2 + 1);
      __int16 v24 = v23;
      while (1)
      {
        __int16 v25 = *v24++;
        if (*v25) {
          break;
        }
        v22 -= 8;
        char v23 = v24;
        if (v24 == v21) {
          goto LABEL_40;
        }
      }
      if (v24 == v21)
      {
        unint64_t v21 = v23;
      }
      else
      {
        uint64_t v26 = 1;
        unint64_t v21 = v23;
        do
        {
          uint64_t v27 = v23[v26];
          if (!*v27) {
            *v21++ = v27;
          }
          ++v26;
          v22 -= 8;
        }
        while (v22);
        uint64_t v19 = *((void *)v2 + 1);
      }
    }
    else
    {
      unint64_t v21 = (void *)*((void *)v2 + 1);
    }
LABEL_40:
    *((_DWORD *)v2 + 4) = ((unint64_t)v21 - v19) >> 3;
  }
  __int16 v28 = *(char **)(result + 16);
  if (v18) {
    BOOL v29 = 1;
  }
  else {
    BOOL v29 = *v28 == 0;
  }
  char v30 = !v29;
  *__int16 v28 = v30;
  return result;
}

uint64_t sub_1CBB10328(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

unsigned int *sub_1CBB103F8(unsigned int *result)
{
  uint64_t v1 = result;
  unsigned int v2 = result[2];
  if (v2)
  {
    uint64_t v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      __n128 result = *(unsigned int **)result;
      int v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64) {
        int v5 = 64;
      }
      else {
        int v5 = v4;
      }
      if (v5 == v3)
      {
        *((void *)v1 + 1) = 0;
        uint64_t v6 = 16 * v3;
        do
        {
          *__n128 result = -1;
          result += 4;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1D25D9CD0](result, 8);
        unint64_t v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        unint64_t v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
        v1[4] = v10;
        __n128 result = (unsigned int *)operator new(16 * v10, (std::align_val_t)8uLL);
        *(void *)uint64_t v1 = result;
        *((void *)v1 + 1) = 0;
        uint64_t v11 = v1[4];
        if (v11)
        {
          uint64_t v12 = 16 * v11;
          do
          {
            *__n128 result = -1;
            result += 4;
            v12 -= 16;
          }
          while (v12);
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3]) {
      return result;
    }
    LODWORD(v3) = result[4];
    if (v3 > 0x40)
    {
      __n128 result = (unsigned int *)MEMORY[0x1D25D9CD0](*(void *)result, 8);
      *(void *)uint64_t v1 = 0;
      *((void *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
  }
  if (v3)
  {
    uint64_t v7 = *(_DWORD **)result;
    uint64_t v8 = 16 * v3;
    do
    {
      _DWORD *v7 = -1;
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  *((void *)result + 1) = 0;
  return result;
}

unsigned int *sub_1CBB10540(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (a3)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    uint64_t v6 = 4 * a3;
    do
    {
      if (v5 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v5) = *a2;
      unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v5;
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
  }
  uint64_t v7 = *(unsigned int **)a1;
  unint64_t v8 = 126 - 2 * __clz(v5);
  if (v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  __n128 result = sub_1CBB10688(v7, (unsigned int *)(*(void *)a1 + 4 * v5), v9, 1);
  uint64_t v11 = *(unsigned int **)a1;
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  uint64_t v13 = *(void *)a1 + 4 * v12;
  if (v12)
  {
    int v14 = v11 - 1;
    uint64_t v15 = 4 * v12 - 4;
    while (v15)
    {
      unsigned int v16 = v14[1];
      unsigned int v17 = v14[2];
      ++v14;
      v15 -= 4;
      if (v16 == v17) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    int v14 = *(unsigned int **)a1;
LABEL_17:
    if (v14 != (unsigned int *)v13)
    {
      unint64_t v18 = v14 + 2;
      if (v14 + 2 != (unsigned int *)v13)
      {
        unsigned int v19 = *v14;
        do
        {
          unsigned int v20 = v19;
          unsigned int v19 = *v18;
          if (v20 != *v18)
          {
            v14[1] = v19;
            ++v14;
          }
          ++v18;
        }
        while (v18 != (unsigned int *)v13);
      }
      uint64_t v13 = (uint64_t)(v14 + 1);
    }
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(v13 - (void)v11) >> 2;
  return result;
}

unsigned int *sub_1CBB10688(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4)
{
unsigned int *sub_1CBB10A88(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  unsigned int v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      unsigned int v6 = *result;
      if (*a2 < *result)
      {
        *__n128 result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (*a3 >= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CBB10AF8(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 1);
      unsigned int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB10A88(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB10C78(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CBB10CF8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_1CBB10A88(a1, a1 + 1, a1 + 2);
      unint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    unsigned int v12 = *v9;
    unsigned int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        unsigned int v13 = *(unsigned int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          unsigned int v16 = (unsigned int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unsigned int v16 = a1;
LABEL_12:
      *unsigned int v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

unsigned int *sub_1CBB10C78(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  BOOL result = sub_1CBB10A88(a1, a2, a3);
  unsigned int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    unsigned int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      unsigned int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unsigned int *sub_1CBB10CF8(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  BOOL result = sub_1CBB10C78(a1, a2, a3, a4);
  unsigned int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    unsigned int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      unsigned int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        unsigned int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CBB10D9C(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  if ((unsigned int *)result != a2)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (unsigned int *)result;
    uint64_t v6 = (uint64_t)a2 - result;
    uint64_t v7 = ((uint64_t)a2 - result) >> 2;
    if ((uint64_t)a2 - result >= 5)
    {
      unint64_t v8 = (unint64_t)(v7 - 2) >> 1;
      unint64_t v9 = v8 + 1;
      unsigned int v10 = (unsigned int *)(result + 4 * v8);
      do
      {
        BOOL result = sub_1CBB10F60((uint64_t)v5, v7, v10--);
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      unsigned int v11 = v4;
      do
      {
        unsigned int v12 = *v11;
        if (*v11 < *v5)
        {
          *unsigned int v11 = *v5;
          *unsigned int v5 = v12;
          BOOL result = sub_1CBB10F60((uint64_t)v5, v7, v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 5)
    {
      do
      {
        uint64_t v13 = 0;
        unsigned int v14 = *v5;
        uint64_t v15 = v5;
        do
        {
          unsigned int v16 = &v15[v13 + 1];
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v13 = 2 * v13 + 2;
          if (v13 >= v7)
          {
            unsigned int v18 = *v16;
            uint64_t v13 = v17;
          }
          else
          {
            unsigned int v18 = *v16;
            unsigned int v19 = v16[1];
            if (*v16 <= v19) {
              unsigned int v18 = v16[1];
            }
            if (*v16 >= v19) {
              uint64_t v13 = v17;
            }
            else {
              ++v16;
            }
          }
          unsigned int *v15 = v18;
          uint64_t v15 = v16;
        }
        while (v13 <= (uint64_t)((unint64_t)(v7 - 2) >> 1));
        if (v16 == --v4)
        {
          *unsigned int v16 = v14;
        }
        else
        {
          *unsigned int v16 = *v4;
          *uint64_t v4 = v14;
          uint64_t v20 = (char *)v16 - (char *)v5 + 4;
          if (v20 >= 5)
          {
            unint64_t v21 = (((unint64_t)v20 >> 2) - 2) >> 1;
            uint64_t v22 = &v5[v21];
            unsigned int v23 = *v22;
            unsigned int v24 = *v16;
            if (*v22 < *v16)
            {
              do
              {
                *unsigned int v16 = v23;
                unsigned int v16 = v22;
                if (!v21) {
                  break;
                }
                unint64_t v21 = (v21 - 1) >> 1;
                uint64_t v22 = &v5[v21];
                unsigned int v23 = *v22;
              }
              while (*v22 < v24);
              *unsigned int v16 = v24;
            }
          }
        }
      }
      while (v7-- > 2);
    }
  }
  return result;
}

uint64_t sub_1CBB10F60(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 2)
    {
      uint64_t v5 = v3 >> 1;
      uint64_t v6 = (v3 >> 1) + 1;
      uint64_t v7 = (unsigned int *)(result + 4 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 >= a2)
      {
        unsigned int v9 = *v7;
      }
      else
      {
        unsigned int v9 = *v7;
        unsigned int v10 = v7[1];
        if (*v7 <= v10) {
          unsigned int v9 = v7[1];
        }
        if (*v7 < v10)
        {
          ++v7;
          uint64_t v6 = v8;
        }
      }
      unsigned int v11 = *a3;
      if (v9 >= *a3)
      {
        do
        {
          *a3 = v9;
          a3 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v12 = (2 * v6) | 1;
          uint64_t v7 = (unsigned int *)(result + 4 * v12);
          uint64_t v6 = 2 * v6 + 2;
          if (v6 >= a2)
          {
            unsigned int v9 = *v7;
            uint64_t v6 = v12;
          }
          else
          {
            unsigned int v9 = *v7;
            unsigned int v13 = v7[1];
            if (*v7 <= v13) {
              unsigned int v9 = v7[1];
            }
            if (*v7 >= v13) {
              uint64_t v6 = v12;
            }
            else {
              ++v7;
            }
          }
        }
        while (v9 >= v11);
        *a3 = v11;
      }
    }
  }
  return result;
}

void sub_1CBB11024(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  uint64_t v6 = *(llvm::MachineFunction **)(a1 + 32);
  uint64_t v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v50 = v6;
  uint64_t v51 = (*(uint64_t (**)(void *))(**((void **)v6 + 2) + 104))(*((void **)v6 + 2));
  uint64_t v58 = 0;
  *(void *)&long long v52 = 0;
  long long v53 = a2;
  *((void *)&v52 + 1) = a1;
  uint64_t v7 = *(void *)(v51 + 8) + 298656;
  uint64_t v58 = 0;
  uint64_t v8 = llvm::MachineFunction::CreateMachineInstr(v50, v7, &v58, 0);
  if (!v58) {
    goto LABEL_3;
  }
  int v46 = *v58;
  if ((v46 - 4) > 0x1E)
  {
    if ((v46 - 3) >= 0xFFFFFFFE) {
      uint64_t v49 = v58;
    }
    else {
      uint64_t v49 = 0;
    }
    if ((v46 - 3) < 0xFFFFFFFE)
    {
      if (v46 == 3) {
        *((void *)v58 + 1) = 0;
      }
      goto LABEL_3;
    }
    unint64_t v48 = (unint64_t)(v49 + 8);
  }
  else
  {
    if ((v58[1] & 0x7F) != 2 && !*((_DWORD *)v58 + 3)) {
      goto LABEL_3;
    }
    uint64_t v47 = *((void *)v58 + 2);
    if ((v47 & 4) == 0) {
      goto LABEL_3;
    }
    unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
    if (!v48) {
      goto LABEL_3;
    }
  }
  uint64_t v55 = &v58;
  sub_1CC5FA668(v48 + 16, &v55);
LABEL_3:
  unsigned int v9 = (unint64_t *)v53;
  uint64_t v10 = *(void *)(*((void *)&v52 + 1) + 40);
  *((void *)v8 + 3) = v10;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *((unsigned int *)v8 + 10);
  if (v12)
  {
    uint64_t v38 = *((void *)v8 + 4);
    uint64_t v39 = *(void *)(v11 + 40);
    uint64_t v40 = 32 * v12;
    do
    {
      if (!*(unsigned char *)v38)
      {
        uint64_t v41 = *(unsigned int *)(v38 + 4);
        if ((int)v41 >= 0) {
          unsigned int v42 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v41);
        }
        else {
          unsigned int v42 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
        }
        uint64_t v43 = *v42;
        if (*v42)
        {
          uint64_t v44 = *(void *)(v43 + 16);
          *(void *)(v43 + 16) = v38;
          *(void *)(v38 + 16) = v44;
          if (*(unsigned char *)(v38 + 3))
          {
            *(void *)(v38 + 24) = v43;
          }
          else
          {
            *(void *)(v38 + 24) = 0;
            unsigned int v42 = (uint64_t *)(v44 + 24);
          }
        }
        else
        {
          *(void *)(v38 + 16) = v38;
          *(void *)(v38 + 24) = 0;
        }
        *unsigned int v42 = v38;
      }
      v38 += 32;
      v40 -= 32;
    }
    while (v40);
  }
  uint64_t v13 = *(void *)(v11 + 728);
  if (v13) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v13 + 24))(v13, v8);
  }
  unint64_t v14 = *v9 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v8 = v14 | *(void *)v8 & 7;
  *((void *)v8 + 1) = v9;
  *(void *)(v14 + 8) = v8;
  *unsigned int v9 = *v9 & 7 | (unint64_t)v8;
  if (*((void *)&v53 + 1)) {
    (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v53 + 1) + 24))(*((void *)&v53 + 1), v8);
  }
  LODWORD(v55) = 1;
  uint64_t v56 = 0;
  uint64_t v57 = a3 << 24;
  llvm::MachineInstr::addOperand(v8, v50, (const llvm::MachineOperand *)&v55);
  for (int i = 1; i != 4; ++i)
  {
    uint64_t v16 = *(void *)(v51 + 8);
    uint64_t v58 = (unsigned __int8 *)v52;
    if ((void)v52) {
      llvm::MetadataTracking::track((uint64_t)&v58, (unsigned __int8 *)v52, 2);
    }
    uint64_t v17 = llvm::MachineFunction::CreateMachineInstr(v50, v16 + 298656, &v58, 0);
    if (v58)
    {
      int v31 = *v58;
      if ((v31 - 4) > 0x1E)
      {
        if ((v31 - 3) >= 0xFFFFFFFE) {
          int v34 = v58;
        }
        else {
          int v34 = 0;
        }
        if ((v31 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v33 = (unint64_t)(v34 + 8);
LABEL_43:
          uint64_t v55 = &v58;
          sub_1CC5FA668(v33 + 16, &v55);
          goto LABEL_12;
        }
        if (v31 == 3) {
          *((void *)v58 + 1) = 0;
        }
      }
      else if ((v58[1] & 0x7F) == 2 || *((_DWORD *)v58 + 3))
      {
        uint64_t v32 = *((void *)v58 + 2);
        if ((v32 & 4) != 0)
        {
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
          if (v33) {
            goto LABEL_43;
          }
        }
      }
    }
LABEL_12:
    unsigned int v18 = (unint64_t *)v53;
    uint64_t v19 = *(void *)(*((void *)&v52 + 1) + 40);
    *((void *)v17 + 3) = v19;
    uint64_t v20 = *(void *)(v19 + 32);
    uint64_t v21 = *((unsigned int *)v17 + 10);
    if (v21)
    {
      uint64_t v24 = *((void *)v17 + 4);
      uint64_t v25 = *(void *)(v20 + 40);
      uint64_t v26 = 32 * v21;
      do
      {
        if (!*(unsigned char *)v24)
        {
          uint64_t v27 = *(unsigned int *)(v24 + 4);
          if ((int)v27 >= 0) {
            __int16 v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
          }
          else {
            __int16 v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
          }
          uint64_t v29 = *v28;
          if (*v28)
          {
            uint64_t v30 = *(void *)(v29 + 16);
            *(void *)(v29 + 16) = v24;
            *(void *)(v24 + 16) = v30;
            if (*(unsigned char *)(v24 + 3))
            {
              *(void *)(v24 + 24) = v29;
            }
            else
            {
              *(void *)(v24 + 24) = 0;
              __int16 v28 = (uint64_t *)(v30 + 24);
            }
          }
          else
          {
            *(void *)(v24 + 16) = v24;
            *(void *)(v24 + 24) = 0;
          }
          *__int16 v28 = v24;
        }
        v24 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    uint64_t v22 = *(void *)(v20 + 728);
    if (v22) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, v17);
    }
    unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v17 = v23 | *(void *)v17 & 7;
    *((void *)v17 + 1) = v18;
    *(void *)(v23 + 8) = v17;
    *unsigned int v18 = *v18 & 7 | (unint64_t)v17;
    if (*((void *)&v53 + 1)) {
      (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v53 + 1) + 24))(*((void *)&v53 + 1), v17);
    }
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand(v17, v50, (const llvm::MachineOperand *)&v55);
  }
  if ((void)v52)
  {
    int v35 = *(unsigned __int8 *)v52;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        uint64_t v36 = v52;
      }
      else {
        uint64_t v36 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v37 = v36 + 8;
        goto LABEL_56;
      }
      if (v35 == 3) {
        *(void *)(v52 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v52 + 1) & 0x7F) == 2 || *(_DWORD *)(v52 + 12))
    {
      uint64_t v45 = *(void *)(v52 + 16);
      if ((v45 & 4) != 0)
      {
        unint64_t v37 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v37)
        {
LABEL_56:
          uint64_t v55 = (unsigned __int8 **)&v52;
          sub_1CC5FA668(v37 + 16, &v55);
        }
      }
    }
  }
}

uint64_t sub_1CBB1163C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x1000000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      uint64_t v10 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 0x11) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v10, 4 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v10;
        int v11 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = (void *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = a1 + 88;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 80) = v5;
    *uint64_t v5 = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v7;
  }
  return a1;
}

void sub_1CBB1173C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 4 * v2), 4 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t sub_1CBB117B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CBB11974(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v16);
  uint64_t v9 = v16;
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  if (result)
  {
    char v14 = 0;
    goto LABEL_13;
  }
  int v11 = *(_DWORD *)(a2 + 8);
  if (4 * v11 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_15;
  }
  if (v10 + ~v11 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_15:
    sub_1CBB11A0C(a2, v10);
    uint64_t v16 = 0;
    sub_1CBB11974(*(void *)a2, *(_DWORD *)(a2 + 16), *a3, &v16);
    uint64_t v9 = v16;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(void *)v9 != -4096) {
    --*(_DWORD *)(a2 + 12);
  }
  *(void *)uint64_t v9 = *a3;
  *(void *)(v9 + 8) = v9 + 24;
  uint64_t result = v9 + 8;
  *(void *)(v9 + 16) = 0x600000000;
  if (v9 + 8 != a4)
  {
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    if (v12)
    {
      uint64_t v13 = *(const void **)a4;
      if (*(void *)a4 == a4 + 16)
      {
        if (v12 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t result = (uint64_t)memcpy((void *)(v9 + 24), v13, 8 * *(unsigned int *)(a4 + 8));
        *(_DWORD *)(v9 + 16) = v12;
      }
      else
      {
        *(void *)(v9 + 8) = v13;
        *(_DWORD *)(v9 + 16) = v12;
        *(_DWORD *)(v9 + 20) = *(_DWORD *)(a4 + 12);
        *(void *)a4 = a4 + 16;
        *(_DWORD *)(a4 + 12) = 0;
      }
      *(_DWORD *)(a4 + 8) = 0;
    }
  }
  *(_DWORD *)(v9 + 72) = *(_DWORD *)(a4 + 64);
  unsigned int v10 = *(_DWORD *)(a2 + 16);
  char v14 = 1;
LABEL_13:
  uint64_t v15 = *(void *)a2 + 80 * v10;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1CBB11974(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 80 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      unsigned int v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          unsigned int v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 80 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CBB11A0C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4200D0(a1, v4, v4 + 80 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 80 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 10;
      v11 -= 80;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB11AE4(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = (int8x16_t *)a2;
    v318 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          BOOL v12 = (int8x16_t *)v11;
          uint64_t v13 = (char *)v10 - (char *)v11;
          uint64_t v14 = ((char *)v10 - (char *)v11) >> 3;
          v322 = (uint64_t *)v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v263 = *(a2 - 1);
                uint64_t v264 = v12->i64[0];
                int v265 = *(_DWORD *)(*(void *)(v263 + 24) + 24);
                uint64_t v266 = *a3;
                uint64_t v323 = 0;
                if (sub_1CD40EA84(*(void *)v266, *(_DWORD *)(v266 + 16), v263, &v323)) {
                  int v267 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v267 = 0;
                }
                int v275 = *(_DWORD *)(*(void *)(v264 + 24) + 24);
                uint64_t v276 = *a3;
                uint64_t v323 = 0;
                uint64_t result = sub_1CD40EA84(*(void *)v276, *(_DWORD *)(v276 + 16), v264, &v323);
                if (result) {
                  int v277 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v277 = 0;
                }
                if (v265 < v275 || (v275 >= v265 ? (BOOL v281 = v267 < v277) : (BOOL v281 = 0), v281))
                {
                  uint64_t v282 = v12->i64[0];
                  v12->i64[0] = *(a2 - 1);
                  *(a2 - 1) = v282;
                }
                break;
              case 3:
                uint64_t result = sub_1CBB130A8(v12->i64, &v12->i64[1], v318, a3);
                break;
              case 4:
                uint64_t result = sub_1CBB139E0(v12->i64, &v12->i64[1], v12[1].i64, v318, a3);
                break;
              case 5:
                i64 = v12[1].i64;
                v269 = &v12[1].i64[1];
                sub_1CBB139E0(v12->i64, &v12->i64[1], v12[1].i64, &v12[1].i64[1], a3);
                uint64_t v270 = *(a2 - 1);
                uint64_t v271 = v12[1].i64[1];
                int v272 = *(_DWORD *)(*(void *)(v270 + 24) + 24);
                uint64_t v273 = *a3;
                uint64_t v323 = 0;
                if (sub_1CD40EA84(*(void *)v273, *(_DWORD *)(v273 + 16), v270, &v323)) {
                  int v274 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v274 = 0;
                }
                int v278 = *(_DWORD *)(*(void *)(v271 + 24) + 24);
                uint64_t v279 = *a3;
                uint64_t v323 = 0;
                uint64_t result = sub_1CD40EA84(*(void *)v279, *(_DWORD *)(v279 + 16), v271, &v323);
                if (result) {
                  int v280 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v280 = 0;
                }
                if (v272 < v278 || (v278 >= v272 ? (BOOL v283 = v274 < v280) : (BOOL v283 = 0), v283))
                {
                  uint64_t v284 = *v269;
                  uint64_t *v269 = *(a2 - 1);
                  *(a2 - 1) = v284;
                  uint64_t v285 = *v269;
                  uint64_t v286 = *i64;
                  int v287 = *(_DWORD *)(*(void *)(*v269 + 24) + 24);
                  uint64_t v288 = *a3;
                  uint64_t v323 = 0;
                  int v289 = sub_1CD40EA84(*(void *)v288, *(_DWORD *)(v288 + 16), v285, &v323)
                       ? *(_DWORD *)(v323 + 8)
                       : 0;
                  int v290 = *(_DWORD *)(*(void *)(v286 + 24) + 24);
                  uint64_t v291 = *a3;
                  uint64_t v323 = 0;
                  uint64_t result = sub_1CD40EA84(*(void *)v291, *(_DWORD *)(v291 + 16), v286, &v323);
                  int v292 = result ? *(_DWORD *)(v323 + 8) : 0;
                  if (v287 < v290 || v290 >= v287 && v289 < v292)
                  {
                    uint64_t v293 = *i64;
                    uint64_t v294 = *v269;
                    uint64_t *i64 = *v269;
                    uint64_t *v269 = v293;
                    uint64_t v295 = v12->i64[1];
                    int v296 = *(_DWORD *)(*(void *)(v294 + 24) + 24);
                    uint64_t v297 = *a3;
                    uint64_t v323 = 0;
                    int v298 = sub_1CD40EA84(*(void *)v297, *(_DWORD *)(v297 + 16), v294, &v323)
                         ? *(_DWORD *)(v323 + 8)
                         : 0;
                    int v299 = *(_DWORD *)(*(void *)(v295 + 24) + 24);
                    uint64_t v300 = *a3;
                    uint64_t v323 = 0;
                    uint64_t result = sub_1CD40EA84(*(void *)v300, *(_DWORD *)(v300 + 16), v295, &v323);
                    int v301 = result ? *(_DWORD *)(v323 + 8) : 0;
                    if (v296 < v299 || v299 >= v296 && v298 < v301)
                    {
                      uint64_t v303 = v12->i64[1];
                      uint64_t v302 = v12[1].i64[0];
                      uint64_t v304 = v12->i64[0];
                      v12->i64[1] = v302;
                      v12[1].i64[0] = v303;
                      int v305 = *(_DWORD *)(*(void *)(v302 + 24) + 24);
                      uint64_t v306 = *a3;
                      uint64_t v323 = 0;
                      int v307 = sub_1CD40EA84(*(void *)v306, *(_DWORD *)(v306 + 16), v302, &v323)
                           ? *(_DWORD *)(v323 + 8)
                           : 0;
                      int v308 = *(_DWORD *)(*(void *)(v304 + 24) + 24);
                      uint64_t v309 = *a3;
                      uint64_t v323 = 0;
                      uint64_t result = sub_1CD40EA84(*(void *)v309, *(_DWORD *)(v309 + 16), v304, &v323);
                      int v310 = result ? *(_DWORD *)(v323 + 8) : 0;
                      if (v305 < v308 || v308 >= v305 && v307 < v310) {
                        *BOOL v12 = vextq_s8(*v12, *v12, 8uLL);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 191)
          {
            unint64_t v132 = &v12->i64[1];
            BOOL v134 = v12 == v10 || v132 == (uint64_t *)v10;
            if (a5)
            {
              if (!v134)
              {
                uint64_t v135 = 0;
                int v136 = (uint64_t *)v12;
                do
                {
                  v137 = v132;
                  uint64_t v139 = *v136;
                  uint64_t v138 = v136[1];
                  int v140 = *(_DWORD *)(*(void *)(v138 + 24) + 24);
                  uint64_t v141 = *a3;
                  uint64_t v323 = 0;
                  if (sub_1CD40EA84(*(void *)v141, *(_DWORD *)(v141 + 16), v138, &v323)) {
                    int v142 = *(_DWORD *)(v323 + 8);
                  }
                  else {
                    int v142 = 0;
                  }
                  int v143 = *(_DWORD *)(*(void *)(v139 + 24) + 24);
                  uint64_t v144 = *a3;
                  uint64_t v323 = 0;
                  uint64_t result = sub_1CD40EA84(*(void *)v144, *(_DWORD *)(v144 + 16), v139, &v323);
                  if (result) {
                    int v145 = *(_DWORD *)(v323 + 8);
                  }
                  else {
                    int v145 = 0;
                  }
                  if (v140 < v143 || (v143 >= v140 ? (BOOL v146 = v142 < v145) : (BOOL v146 = 0), v146))
                  {
                    uint64_t v147 = v136[1];
                    v136[1] = *v136;
                    v148 = (uint64_t *)v12;
                    if (v136 != (uint64_t *)v12)
                    {
                      uint64_t v149 = v135;
                      do
                      {
                        v150 = (uint64_t *)((char *)v12->i64 + v149);
                        uint64_t v151 = *(uint64_t *)((char *)&v12->i64[-1] + v149);
                        int v152 = *(_DWORD *)(*(void *)(v147 + 24) + 24);
                        uint64_t v153 = *a3;
                        uint64_t v323 = 0;
                        if (sub_1CD40EA84(*(void *)v153, *(_DWORD *)(v153 + 16), v147, &v323)) {
                          int v154 = *(_DWORD *)(v323 + 8);
                        }
                        else {
                          int v154 = 0;
                        }
                        int v155 = *(_DWORD *)(*(void *)(v151 + 24) + 24);
                        uint64_t v156 = *a3;
                        uint64_t v323 = 0;
                        uint64_t result = sub_1CD40EA84(*(void *)v156, *(_DWORD *)(v156 + 16), v151, &v323);
                        if (result) {
                          int v157 = *(_DWORD *)(v323 + 8);
                        }
                        else {
                          int v157 = 0;
                        }
                        if (v152 >= v155 && (v155 < v152 || v154 >= v157))
                        {
                          BOOL v12 = (int8x16_t *)v322;
                          v148 = (uint64_t *)((char *)v322 + v149);
                          goto LABEL_232;
                        }
                        void *v150 = *(v150 - 1);
                        v149 -= 8;
                        BOOL v12 = (int8x16_t *)v322;
                      }
                      while (v149);
                      v148 = v322;
                    }
LABEL_232:
                    uint64_t *v148 = v147;
                  }
                  unint64_t v132 = v137 + 1;
                  v135 += 8;
                  int v136 = v137;
                }
                while (v137 + 1 != a2);
              }
            }
            else if (!v134)
            {
              do
              {
                v241 = v132;
                uint64_t v243 = v12->i64[0];
                uint64_t v242 = v12->i64[1];
                int v244 = *(_DWORD *)(*(void *)(v242 + 24) + 24);
                uint64_t v245 = *a3;
                uint64_t v323 = 0;
                if (sub_1CD40EA84(*(void *)v245, *(_DWORD *)(v245 + 16), v242, &v323)) {
                  int v246 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v246 = 0;
                }
                int v247 = *(_DWORD *)(*(void *)(v243 + 24) + 24);
                uint64_t v248 = *a3;
                uint64_t v323 = 0;
                uint64_t result = sub_1CD40EA84(*(void *)v248, *(_DWORD *)(v248 + 16), v243, &v323);
                if (result) {
                  int v249 = *(_DWORD *)(v323 + 8);
                }
                else {
                  int v249 = 0;
                }
                v250 = a2;
                if (v244 < v247 || (v247 >= v244 ? (BOOL v251 = v246 < v249) : (BOOL v251 = 0), v251))
                {
                  uint64_t v252 = *v241;
                  do
                  {
                    v253 = (uint64_t *)v12;
                    v12->i64[1] = v12->i64[0];
                    uint64_t v255 = v12[-1].i64[1];
                    BOOL v12 = (int8x16_t *)((char *)v12 - 8);
                    uint64_t v254 = v255;
                    int v256 = *(_DWORD *)(*(void *)(v252 + 24) + 24);
                    uint64_t v257 = *a3;
                    uint64_t v323 = 0;
                    if (sub_1CD40EA84(*(void *)v257, *(_DWORD *)(v257 + 16), v252, &v323)) {
                      int v258 = *(_DWORD *)(v323 + 8);
                    }
                    else {
                      int v258 = 0;
                    }
                    int v259 = *(_DWORD *)(*(void *)(v254 + 24) + 24);
                    uint64_t v260 = *a3;
                    uint64_t v323 = 0;
                    uint64_t result = sub_1CD40EA84(*(void *)v260, *(_DWORD *)(v260 + 16), v254, &v323);
                    if (result) {
                      int v261 = *(_DWORD *)(v323 + 8);
                    }
                    else {
                      int v261 = 0;
                    }
                  }
                  while (v256 < v259 || v259 >= v256 && v258 < v261);
                  uint64_t *v253 = v252;
                  v250 = a2;
                }
                unint64_t v132 = v241 + 1;
                BOOL v12 = (int8x16_t *)v241;
              }
              while (v241 + 1 != v250);
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != v10)
            {
              int64_t v159 = (unint64_t)(v14 - 2) >> 1;
              int64_t v160 = v159;
              do
              {
                int64_t v161 = v160;
                if (v159 >= v160)
                {
                  uint64_t v162 = (2 * v160) | 1;
                  v163 = &v322[v162];
                  if (2 * v160 + 2 < v14)
                  {
                    uint64_t v164 = *v163;
                    v166 = v163 + 1;
                    uint64_t v165 = v163[1];
                    int v167 = *(_DWORD *)(*(void *)(*v163 + 24) + 24);
                    uint64_t v168 = *a3;
                    uint64_t v323 = 0;
                    int v315 = sub_1CD40EA84(*(void *)v168, *(_DWORD *)(v168 + 16), v164, &v323)
                         ? *(_DWORD *)(v323 + 8)
                         : 0;
                    int v169 = *(_DWORD *)(*(void *)(v165 + 24) + 24);
                    uint64_t v170 = *a3;
                    uint64_t v323 = 0;
                    int v171 = sub_1CD40EA84(*(void *)v170, *(_DWORD *)(v170 + 16), v165, &v323)
                         ? *(_DWORD *)(v323 + 8)
                         : 0;
                    v163 = &v322[v162];
                    if (v167 < v169 || (v315 < v171 ? (BOOL v172 = v169 < v167) : (BOOL v172 = 1), !v172))
                    {
                      v163 = v166;
                      uint64_t v162 = 2 * v161 + 2;
                    }
                  }
                  v173 = &v322[v161];
                  v319 = v163;
                  uint64_t v174 = *v163;
                  uint64_t v175 = *v173;
                  int v176 = *(_DWORD *)(*(void *)(*v163 + 24) + 24);
                  uint64_t v177 = *a3;
                  uint64_t v323 = 0;
                  if (sub_1CD40EA84(*(void *)v177, *(_DWORD *)(v177 + 16), v174, &v323)) {
                    int v178 = *(_DWORD *)(v323 + 8);
                  }
                  else {
                    int v178 = 0;
                  }
                  int v179 = *(_DWORD *)(*(void *)(v175 + 24) + 24);
                  uint64_t v180 = *a3;
                  uint64_t v323 = 0;
                  uint64_t result = sub_1CD40EA84(*(void *)v180, *(_DWORD *)(v180 + 16), v175, &v323);
                  if (result) {
                    int v181 = *(_DWORD *)(v323 + 8);
                  }
                  else {
                    int v181 = 0;
                  }
                  if (v176 >= v179 && (v179 < v176 || v178 >= v181))
                  {
                    uint64_t v316 = *v173;
                    do
                    {
                      v183 = v319;
                      uint64_t *v173 = *v319;
                      if (v159 < v162) {
                        break;
                      }
                      uint64_t v184 = 2 * v162;
                      uint64_t v162 = (2 * v162) | 1;
                      v185 = &v322[v162];
                      uint64_t v186 = v184 + 2;
                      if (v184 + 2 < v14)
                      {
                        uint64_t v187 = *v185;
                        v189 = v185 + 1;
                        uint64_t v188 = v185[1];
                        int v312 = *(_DWORD *)(*(void *)(*v185 + 24) + 24);
                        uint64_t v190 = *a3;
                        uint64_t v323 = 0;
                        int v311 = sub_1CD40EA84(*(void *)v190, *(_DWORD *)(v190 + 16), v187, &v323)
                             ? *(_DWORD *)(v323 + 8)
                             : 0;
                        int v191 = *(_DWORD *)(*(void *)(v188 + 24) + 24);
                        uint64_t v192 = *a3;
                        uint64_t v323 = 0;
                        int v193 = sub_1CD40EA84(*(void *)v192, *(_DWORD *)(v192 + 16), v188, &v323)
                             ? *(_DWORD *)(v323 + 8)
                             : 0;
                        v185 = &v322[v162];
                        if (v312 < v191 || (v311 < v193 ? (BOOL v194 = v191 < v312) : (BOOL v194 = 1), !v194))
                        {
                          v185 = v189;
                          uint64_t v162 = v186;
                        }
                      }
                      v319 = v185;
                      uint64_t v195 = *v185;
                      int v196 = *(_DWORD *)(*(void *)(*v185 + 24) + 24);
                      uint64_t v197 = *a3;
                      uint64_t v323 = 0;
                      int v198 = sub_1CD40EA84(*(void *)v197, *(_DWORD *)(v197 + 16), v195, &v323)
                           ? *(_DWORD *)(v323 + 8)
                           : 0;
                      int v199 = *(_DWORD *)(*(void *)(v316 + 24) + 24);
                      uint64_t v200 = *a3;
                      uint64_t v323 = 0;
                      uint64_t result = sub_1CD40EA84(*(void *)v200, *(_DWORD *)(v200 + 16), v316, &v323);
                      int v201 = result ? *(_DWORD *)(v323 + 8) : 0;
                      if (v196 < v199) {
                        break;
                      }
                      BOOL v202 = v199 >= v196 && v198 < v201;
                      v173 = v183;
                    }
                    while (!v202);
                    uint64_t *v183 = v316;
                  }
                }
                int64_t v160 = v161 - 1;
              }
              while (v161);
              v203 = v322;
              do
              {
                uint64_t v204 = 0;
                uint64_t v313 = *v203;
                do
                {
                  v205 = v203;
                  v203 += v204 + 1;
                  uint64_t v206 = 2 * v204;
                  uint64_t v204 = (2 * v204) | 1;
                  uint64_t v207 = v206 + 2;
                  if (v206 + 2 < v14)
                  {
                    uint64_t v208 = *v203;
                    uint64_t v209 = v203[1];
                    int v320 = *(_DWORD *)(*(void *)(*v203 + 24) + 24);
                    uint64_t v210 = *a3;
                    uint64_t v323 = 0;
                    int v211 = sub_1CD40EA84(*(void *)v210, *(_DWORD *)(v210 + 16), v208, &v323);
                    int v317 = v211 ? *(_DWORD *)(v323 + 8) : 0;
                    int v212 = *(_DWORD *)(*(void *)(v209 + 24) + 24);
                    uint64_t v213 = *a3;
                    uint64_t v323 = 0;
                    uint64_t result = sub_1CD40EA84(*(void *)v213, *(_DWORD *)(v213 + 16), v209, &v323);
                    int v214 = result ? *(_DWORD *)(v323 + 8) : 0;
                    if (v320 < v212 || (v317 < v214 ? (BOOL v215 = v212 < v320) : (BOOL v215 = 1), !v215))
                    {
                      ++v203;
                      uint64_t v204 = v207;
                    }
                  }
                  uint64_t *v205 = *v203;
                }
                while (v204 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
                v216 = a2 - 1;
                BOOL v6 = v203 == --a2;
                if (v6)
                {
                  uint64_t *v203 = v313;
                }
                else
                {
                  uint64_t *v203 = *v216;
                  uint64_t *v216 = v313;
                  uint64_t v217 = (char *)v203 - (char *)v322 + 8;
                  if (v217 >= 9)
                  {
                    unint64_t v218 = ((unint64_t)v217 >> 3) - 2;
                    unint64_t v219 = v218 >> 1;
                    v220 = &v322[v218 >> 1];
                    uint64_t v221 = *v220;
                    uint64_t v222 = *v203;
                    int v223 = *(_DWORD *)(*(void *)(*v220 + 24) + 24);
                    uint64_t v224 = *a3;
                    uint64_t v323 = 0;
                    int v225 = sub_1CD40EA84(*(void *)v224, *(_DWORD *)(v224 + 16), v221, &v323)
                         ? *(_DWORD *)(v323 + 8)
                         : 0;
                    int v226 = *(_DWORD *)(*(void *)(v222 + 24) + 24);
                    uint64_t v227 = *a3;
                    uint64_t v323 = 0;
                    uint64_t result = sub_1CD40EA84(*(void *)v227, *(_DWORD *)(v227 + 16), v222, &v323);
                    int v228 = result ? *(_DWORD *)(v323 + 8) : 0;
                    if (v223 < v226 || (v226 >= v223 ? (BOOL v229 = v225 < v228) : (BOOL v229 = 0), v229))
                    {
                      uint64_t v230 = *v203;
                      uint64_t *v203 = *v220;
                      if (v218 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v232 = v219 - 1;
                          unint64_t v219 = (v219 - 1) >> 1;
                          v231 = &v322[v219];
                          uint64_t v233 = *v231;
                          int v234 = *(_DWORD *)(*(void *)(*v231 + 24) + 24);
                          uint64_t v235 = *a3;
                          uint64_t v323 = 0;
                          int v236 = sub_1CD40EA84(*(void *)v235, *(_DWORD *)(v235 + 16), v233, &v323)
                               ? *(_DWORD *)(v323 + 8)
                               : 0;
                          int v237 = *(_DWORD *)(*(void *)(v230 + 24) + 24);
                          uint64_t v238 = *a3;
                          uint64_t v323 = 0;
                          uint64_t result = sub_1CD40EA84(*(void *)v238, *(_DWORD *)(v238 + 16), v230, &v323);
                          int v239 = result ? *(_DWORD *)(v323 + 8) : 0;
                          if (v234 >= v237 && (v237 < v234 || v236 >= v239)) {
                            break;
                          }
                          uint64_t *v220 = *v231;
                          v220 = &v322[v219];
                          if (v232 <= 1) {
                            goto LABEL_342;
                          }
                        }
                      }
                      v231 = v220;
LABEL_342:
                      uint64_t *v231 = v230;
                    }
                  }
                }
                BOOL v27 = v14-- <= 2;
                v203 = v322;
              }
              while (!v27);
            }
            return result;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12->i64[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            sub_1CBB130A8(v16, v12->i64, v318, a3);
          }
          else
          {
            sub_1CBB130A8(v12->i64, v16, v318, a3);
            sub_1CBB130A8(&v12->i64[1], v16 - 1, a2 - 2, a3);
            sub_1CBB130A8(v12[1].i64, &v12->i64[v15 + 1], a2 - 3, a3);
            sub_1CBB130A8(v16 - 1, v16, &v12->i64[v15 + 1], a3);
            uint64_t v17 = v12->i64[0];
            v12->i64[0] = *v16;
            *uint64_t v16 = v17;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v69 = v12[-1].i64[1];
          uint64_t v70 = v12->i64[0];
          int v71 = *(_DWORD *)(*(void *)(v69 + 24) + 24);
          uint64_t v72 = *a3;
          uint64_t v323 = 0;
          int v73 = sub_1CD40EA84(*(void *)v72, *(_DWORD *)(v72 + 16), v69, &v323)
              ? *(_DWORD *)(v323 + 8)
              : 0;
          int v74 = *(_DWORD *)(*(void *)(v70 + 24) + 24);
          uint64_t v75 = *a3;
          uint64_t v323 = 0;
          int v76 = sub_1CD40EA84(*(void *)v75, *(_DWORD *)(v75 + 16), v70, &v323)
              ? *(_DWORD *)(v323 + 8)
              : 0;
          if (v71 < v74) {
            break;
          }
          if (v74 >= v71 && v73 < v76) {
            break;
          }
          uint64_t v78 = v12->i64[0];
          uint64_t v79 = *v318;
          int v80 = *(_DWORD *)(*(void *)(v12->i64[0] + 24) + 24);
          uint64_t v81 = *a3;
          uint64_t v323 = 0;
          if (sub_1CD40EA84(*(void *)v81, *(_DWORD *)(v81 + 16), v78, &v323)) {
            int v82 = *(_DWORD *)(v323 + 8);
          }
          else {
            int v82 = 0;
          }
          int v83 = *(_DWORD *)(*(void *)(v79 + 24) + 24);
          uint64_t v84 = *a3;
          uint64_t v323 = 0;
          uint64_t result = sub_1CD40EA84(*(void *)v84, *(_DWORD *)(v84 + 16), v79, &v323);
          if (result) {
            int v85 = *(_DWORD *)(v323 + 8);
          }
          else {
            int v85 = 0;
          }
          if (v80 >= v83 && (v83 < v80 || v82 >= v85))
          {
            unsigned int v123 = &v12->i64[1];
            do
            {
              uint64_t v11 = v123;
              if (v123 >= (uint64_t *)v10) {
                break;
              }
              uint64_t v124 = *v123;
              int v125 = *(_DWORD *)(*(void *)(v78 + 24) + 24);
              uint64_t v126 = *a3;
              uint64_t v323 = 0;
              int v127 = sub_1CD40EA84(*(void *)v126, *(_DWORD *)(v126 + 16), v78, &v323)
                   ? *(_DWORD *)(v323 + 8)
                   : 0;
              int v128 = *(_DWORD *)(*(void *)(v124 + 24) + 24);
              uint64_t v129 = *a3;
              uint64_t v323 = 0;
              uint64_t result = sub_1CD40EA84(*(void *)v129, *(_DWORD *)(v129 + 16), v124, &v323);
              int v130 = result ? *(_DWORD *)(v323 + 8) : 0;
              BOOL v12 = (int8x16_t *)v322;
              if (v125 < v128) {
                break;
              }
              unsigned int v123 = v11 + 1;
            }
            while (v128 < v125 || v127 >= v130);
          }
          else
          {
            uint64_t v86 = &v12->i64[1];
            do
            {
              uint64_t v11 = v86;
              uint64_t v87 = *v86;
              int v88 = *(_DWORD *)(*(void *)(v78 + 24) + 24);
              uint64_t v89 = *a3;
              uint64_t v323 = 0;
              if (sub_1CD40EA84(*(void *)v89, *(_DWORD *)(v89 + 16), v78, &v323)) {
                int v90 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v90 = 0;
              }
              int v91 = *(_DWORD *)(*(void *)(v87 + 24) + 24);
              uint64_t v92 = *a3;
              uint64_t v323 = 0;
              uint64_t result = sub_1CD40EA84(*(void *)v92, *(_DWORD *)(v92 + 16), v87, &v323);
              if (result) {
                int v93 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v93 = 0;
              }
              BOOL v12 = (int8x16_t *)v322;
              if (v88 < v91) {
                break;
              }
              uint64_t v86 = v11 + 1;
            }
            while (v91 < v88 || v90 >= v93);
          }
          int i = (uint64_t *)v10;
          if (v11 < (uint64_t *)v10)
          {
            for (int i = a2 - 1; ; --i)
            {
              uint64_t v96 = *i;
              int v97 = *(_DWORD *)(*(void *)(v78 + 24) + 24);
              uint64_t v98 = *a3;
              uint64_t v323 = 0;
              int v99 = sub_1CD40EA84(*(void *)v98, *(_DWORD *)(v98 + 16), v78, &v323)
                  ? *(_DWORD *)(v323 + 8)
                  : 0;
              int v100 = *(_DWORD *)(*(void *)(v96 + 24) + 24);
              uint64_t v101 = *a3;
              uint64_t v323 = 0;
              uint64_t result = sub_1CD40EA84(*(void *)v101, *(_DWORD *)(v101 + 16), v96, &v323);
              int v102 = result ? *(_DWORD *)(v323 + 8) : 0;
              BOOL v12 = (int8x16_t *)v322;
              if (v97 >= v100 && (v100 < v97 || v99 >= v102)) {
                break;
              }
            }
          }
          while (v11 < i)
          {
            uint64_t v104 = *v11;
            *uint64_t v11 = *i;
            *int i = v104;
            uint64_t v105 = v11 + 1;
            do
            {
              uint64_t v11 = v105;
              uint64_t v106 = *v105;
              int v107 = *(_DWORD *)(*(void *)(v78 + 24) + 24);
              uint64_t v108 = *a3;
              uint64_t v323 = 0;
              if (sub_1CD40EA84(*(void *)v108, *(_DWORD *)(v108 + 16), v78, &v323)) {
                int v109 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v109 = 0;
              }
              int v110 = *(_DWORD *)(*(void *)(v106 + 24) + 24);
              uint64_t v111 = *a3;
              uint64_t v323 = 0;
              if (sub_1CD40EA84(*(void *)v111, *(_DWORD *)(v111 + 16), v106, &v323)) {
                int v112 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v112 = 0;
              }
              if (v107 < v110) {
                break;
              }
              uint64_t v105 = v11 + 1;
            }
            while (v110 < v107 || v109 >= v112);
            --i;
            uint64_t v10 = (int8x16_t *)a2;
            while (1)
            {
              uint64_t v114 = *i;
              int v115 = *(_DWORD *)(*(void *)(v78 + 24) + 24);
              uint64_t v116 = *a3;
              uint64_t v323 = 0;
              int v117 = sub_1CD40EA84(*(void *)v116, *(_DWORD *)(v116 + 16), v78, &v323)
                   ? *(_DWORD *)(v323 + 8)
                   : 0;
              int v118 = *(_DWORD *)(*(void *)(v114 + 24) + 24);
              uint64_t v119 = *a3;
              uint64_t v323 = 0;
              uint64_t result = sub_1CD40EA84(*(void *)v119, *(_DWORD *)(v119 + 16), v114, &v323);
              int v120 = result ? *(_DWORD *)(v323 + 8) : 0;
              BOOL v12 = (int8x16_t *)v322;
              if (v115 >= v118 && (v118 < v115 || v117 >= v120)) {
                break;
              }
              --i;
            }
          }
          unsigned int v122 = v11 - 1;
          BOOL v5 = v11 - 1 >= (uint64_t *)v12;
          BOOL v6 = v11 - 1 == (uint64_t *)v12;
          if (v11 - 1 != (uint64_t *)v12) {
            v12->i64[0] = *v122;
          }
          a5 = 0;
          *unsigned int v122 = v78;
        }
        uint64_t v18 = v12->i64[0];
        for (uint64_t j = 1; ; ++j)
        {
          uint64_t v20 = v12->i64[j];
          int v21 = *(_DWORD *)(*(void *)(v20 + 24) + 24);
          uint64_t v22 = *a3;
          uint64_t v323 = 0;
          int v23 = sub_1CD40EA84(*(void *)v22, *(_DWORD *)(v22 + 16), v20, &v323)
              ? *(_DWORD *)(v323 + 8)
              : 0;
          int v24 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
          uint64_t v25 = *a3;
          uint64_t v323 = 0;
          int v26 = sub_1CD40EA84(*(void *)v25, *(_DWORD *)(v25 + 16), v18, &v323)
              ? *(_DWORD *)(v323 + 8)
              : 0;
          if (v21 >= v24)
          {
            BOOL v27 = v24 >= v21 && v23 < v26;
            if (!v27) {
              break;
            }
          }
        }
        unint64_t v28 = (unint64_t)&v12->u64[j];
        uint64_t v29 = a2 - 1;
        if (j == 1)
        {
          uint64_t v39 = a2 - 1;
          while (v28 < (unint64_t)(v39 + 1))
          {
            uint64_t v30 = v39;
            uint64_t v40 = *v39;
            int v41 = *(_DWORD *)(*(void *)(*v39 + 24) + 24);
            uint64_t v42 = *a3;
            uint64_t v323 = 0;
            if (sub_1CD40EA84(*(void *)v42, *(_DWORD *)(v42 + 16), v40, &v323)) {
              int v43 = *(_DWORD *)(v323 + 8);
            }
            else {
              int v43 = 0;
            }
            int v44 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
            uint64_t v45 = *a3;
            uint64_t v323 = 0;
            if (sub_1CD40EA84(*(void *)v45, *(_DWORD *)(v45 + 16), v18, &v323)) {
              int v46 = *(_DWORD *)(v323 + 8);
            }
            else {
              int v46 = 0;
            }
            if (v41 >= v44)
            {
              uint64_t v39 = v30 - 1;
              if (v44 < v41 || v43 >= v46) {
                continue;
              }
            }
            goto LABEL_55;
          }
          uint64_t v30 = v39 + 1;
        }
        else
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v31 = *v29;
            int v32 = *(_DWORD *)(*(void *)(*v29 + 24) + 24);
            uint64_t v33 = *a3;
            uint64_t v323 = 0;
            if (sub_1CD40EA84(*(void *)v33, *(_DWORD *)(v33 + 16), v31, &v323)) {
              int v34 = *(_DWORD *)(v323 + 8);
            }
            else {
              int v34 = 0;
            }
            int v35 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
            uint64_t v36 = *a3;
            uint64_t v323 = 0;
            if (sub_1CD40EA84(*(void *)v36, *(_DWORD *)(v36 + 16), v18, &v323)) {
              int v37 = *(_DWORD *)(v323 + 8);
            }
            else {
              int v37 = 0;
            }
            if (v32 < v35) {
              break;
            }
            uint64_t v29 = v30 - 1;
          }
          while (v35 < v32 || v34 >= v37);
        }
LABEL_55:
        uint64_t v11 = (uint64_t *)v28;
        if (v28 < (unint64_t)v30)
        {
          unint64_t v48 = v30;
          do
          {
            uint64_t v49 = *v11;
            *v11++ = *v48;
            *unint64_t v48 = v49;
            while (1)
            {
              uint64_t v50 = *v11;
              int v51 = *(_DWORD *)(*(void *)(*v11 + 24) + 24);
              uint64_t v52 = *a3;
              uint64_t v323 = 0;
              int v53 = sub_1CD40EA84(*(void *)v52, *(_DWORD *)(v52 + 16), v50, &v323)
                  ? *(_DWORD *)(v323 + 8)
                  : 0;
              int v54 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
              uint64_t v55 = *a3;
              uint64_t v323 = 0;
              int v56 = sub_1CD40EA84(*(void *)v55, *(_DWORD *)(v55 + 16), v18, &v323)
                  ? *(_DWORD *)(v323 + 8)
                  : 0;
              if (v51 >= v54 && (v54 < v51 || v53 >= v56)) {
                break;
              }
              ++v11;
            }
            uint64_t v58 = v48 - 1;
            do
            {
              unint64_t v48 = v58;
              uint64_t v59 = *v58;
              int v60 = *(_DWORD *)(*(void *)(*v58 + 24) + 24);
              uint64_t v61 = *a3;
              uint64_t v323 = 0;
              if (sub_1CD40EA84(*(void *)v61, *(_DWORD *)(v61 + 16), v59, &v323)) {
                int v62 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v62 = 0;
              }
              int v63 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
              uint64_t v64 = *a3;
              uint64_t v323 = 0;
              if (sub_1CD40EA84(*(void *)v64, *(_DWORD *)(v64 + 16), v18, &v323)) {
                int v65 = *(_DWORD *)(v323 + 8);
              }
              else {
                int v65 = 0;
              }
              if (v60 < v63) {
                break;
              }
              uint64_t v58 = v48 - 1;
            }
            while (v63 < v60 || v62 >= v65);
          }
          while (v11 < v48);
        }
        uint64_t v67 = v11 - 1;
        uint64_t v9 = v322;
        if (v11 - 1 != v322) {
          uint64_t *v322 = *v67;
        }
        *uint64_t v67 = v18;
        BOOL v5 = v28 >= (unint64_t)v30;
        uint64_t v10 = (int8x16_t *)a2;
        if (v5) {
          break;
        }
LABEL_90:
        uint64_t result = sub_1CBB11AE4(v322, v11 - 1, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v68 = sub_1CBB133EC(v322, v11 - 1, a3);
      uint64_t result = sub_1CBB133EC(v11, a2, a3);
      if (result) {
        break;
      }
      if (!v68) {
        goto LABEL_90;
      }
    }
    a2 = v11 - 1;
    if (!v68) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1CBB130A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v6 = a2;
  int v7 = a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  int v10 = *(_DWORD *)(*(void *)(*a2 + 24) + 24);
  uint64_t v11 = *a4;
  uint64_t v50 = 0;
  if (sub_1CD40EA84(*(void *)v11, *(_DWORD *)(v11 + 16), v8, &v50)) {
    int v12 = *(_DWORD *)(v50 + 8);
  }
  else {
    int v12 = 0;
  }
  int v13 = *(_DWORD *)(*(void *)(v9 + 24) + 24);
  uint64_t v14 = *a4;
  uint64_t v50 = 0;
  if (sub_1CD40EA84(*(void *)v14, *(_DWORD *)(v14 + 16), v9, &v50)) {
    int v15 = *(_DWORD *)(v50 + 8);
  }
  else {
    int v15 = 0;
  }
  if (v10 < v13 || (v13 >= v10 ? (BOOL v16 = v12 < v15) : (BOOL v16 = 0), v16))
  {
    uint64_t v22 = *a3;
    uint64_t v23 = *v6;
    int v24 = *(_DWORD *)(*(void *)(*a3 + 24) + 24);
    uint64_t v25 = *a4;
    uint64_t v50 = 0;
    if (sub_1CD40EA84(*(void *)v25, *(_DWORD *)(v25 + 16), v22, &v50)) {
      int v26 = *(_DWORD *)(v50 + 8);
    }
    else {
      int v26 = 0;
    }
    int v27 = *(_DWORD *)(*(void *)(v23 + 24) + 24);
    uint64_t v28 = *a4;
    uint64_t v50 = 0;
    uint64_t result = sub_1CD40EA84(*(void *)v28, *(_DWORD *)(v28 + 16), v23, &v50);
    if (result) {
      int v30 = *(_DWORD *)(v50 + 8);
    }
    else {
      int v30 = 0;
    }
    if (v24 >= v27 && (v27 < v24 || v26 >= v30))
    {
      uint64_t v41 = *v7;
      uint64_t *v7 = *v6;
      *BOOL v6 = v41;
      uint64_t v42 = *a3;
      int v43 = *(_DWORD *)(*(void *)(*a3 + 24) + 24);
      uint64_t v44 = *a4;
      uint64_t v50 = 0;
      if (sub_1CD40EA84(*(void *)v44, *(_DWORD *)(v44 + 16), v42, &v50)) {
        int v40 = *(_DWORD *)(v50 + 8);
      }
      else {
        int v40 = 0;
      }
      int v48 = *(_DWORD *)(*(void *)(v41 + 24) + 24);
      uint64_t v49 = *a4;
      uint64_t v50 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v49, *(_DWORD *)(v49 + 16), v41, &v50);
      if (result) {
        int v47 = *(_DWORD *)(v50 + 8);
      }
      else {
        int v47 = 0;
      }
      if (v43 >= v48)
      {
        if (v48 < v43) {
          return result;
        }
        int v7 = v6;
        BOOL v6 = a3;
LABEL_52:
        if (v40 >= v47) {
          return result;
        }
        goto LABEL_24;
      }
      int v7 = v6;
    }
    BOOL v6 = a3;
LABEL_24:
    uint64_t v31 = *v7;
    uint64_t *v7 = *v6;
    *BOOL v6 = v31;
    return result;
  }
  uint64_t v17 = *a3;
  uint64_t v18 = *v6;
  int v19 = *(_DWORD *)(*(void *)(*a3 + 24) + 24);
  uint64_t v20 = *a4;
  uint64_t v50 = 0;
  if (sub_1CD40EA84(*(void *)v20, *(_DWORD *)(v20 + 16), v17, &v50)) {
    int v21 = *(_DWORD *)(v50 + 8);
  }
  else {
    int v21 = 0;
  }
  int v32 = *(_DWORD *)(*(void *)(v18 + 24) + 24);
  uint64_t v33 = *a4;
  uint64_t v50 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)v33, *(_DWORD *)(v33 + 16), v18, &v50);
  if (result) {
    int v34 = *(_DWORD *)(v50 + 8);
  }
  else {
    int v34 = 0;
  }
  if (v19 < v32 || v32 >= v19 && v21 < v34)
  {
    uint64_t v35 = *v6;
    *BOOL v6 = *a3;
    *a3 = v35;
    uint64_t v36 = *v6;
    uint64_t v37 = *v7;
    int v38 = *(_DWORD *)(*(void *)(*v6 + 24) + 24);
    uint64_t v39 = *a4;
    uint64_t v50 = 0;
    if (sub_1CD40EA84(*(void *)v39, *(_DWORD *)(v39 + 16), v36, &v50)) {
      int v40 = *(_DWORD *)(v50 + 8);
    }
    else {
      int v40 = 0;
    }
    int v45 = *(_DWORD *)(*(void *)(v37 + 24) + 24);
    uint64_t v46 = *a4;
    uint64_t v50 = 0;
    uint64_t result = sub_1CD40EA84(*(void *)v46, *(_DWORD *)(v46 + 16), v37, &v50);
    if (result) {
      int v47 = *(_DWORD *)(v50 + 8);
    }
    else {
      int v47 = 0;
    }
    if (v38 >= v45)
    {
      if (v45 < v38) {
        return result;
      }
      goto LABEL_52;
    }
    goto LABEL_24;
  }
  return result;
}

BOOL sub_1CBB133EC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a2;
  BOOL v5 = a1;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v34 = *(a2 - 1);
      uint64_t v35 = *v5;
      int v36 = *(_DWORD *)(*(void *)(v34 + 24) + 24);
      uint64_t v37 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v37, *(_DWORD *)(v37 + 16), v34, &v87)) {
        int v38 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v38 = 0;
      }
      int v47 = *(_DWORD *)(*(void *)(v35 + 24) + 24);
      uint64_t v48 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v48, *(_DWORD *)(v48 + 16), v35, &v87)) {
        int v49 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v49 = 0;
      }
      if (v36 < v47 || (v47 >= v36 ? (BOOL v53 = v38 < v49) : (BOOL v53 = 0), v53))
      {
        uint64_t v54 = *v5;
        *BOOL v5 = *(v4 - 1);
        *(v4 - 1) = v54;
      }
      return 1;
    case 3:
      sub_1CBB130A8(v5, v5 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CBB139E0(v5, v5 + 1, v5 + 2, a2 - 1, a3);
      return 1;
    case 5:
      uint64_t v39 = v5 + 2;
      int v40 = v5 + 3;
      sub_1CBB139E0(v5, v5 + 1, v5 + 2, v5 + 3, a3);
      uint64_t v41 = v4;
      uint64_t v42 = *(v4 - 1);
      uint64_t v43 = v5[3];
      int v44 = *(_DWORD *)(*(void *)(v42 + 24) + 24);
      uint64_t v45 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v45, *(_DWORD *)(v45 + 16), v42, &v87)) {
        int v46 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v46 = 0;
      }
      int v50 = *(_DWORD *)(*(void *)(v43 + 24) + 24);
      uint64_t v51 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v51, *(_DWORD *)(v51 + 16), v43, &v87)) {
        int v52 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v52 = 0;
      }
      if (v44 >= v50 && (v50 < v44 || v46 >= v52)) {
        return 1;
      }
      uint64_t v56 = *v40;
      *int v40 = *(v41 - 1);
      *(v41 - 1) = v56;
      uint64_t v57 = *v40;
      uint64_t v58 = *v39;
      int v59 = *(_DWORD *)(*(void *)(*v40 + 24) + 24);
      uint64_t v60 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v60, *(_DWORD *)(v60 + 16), v57, &v87)) {
        int v61 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v61 = 0;
      }
      int v62 = *(_DWORD *)(*(void *)(v58 + 24) + 24);
      uint64_t v63 = *v3;
      uint64_t v87 = 0;
      if (sub_1CD40EA84(*(void *)v63, *(_DWORD *)(v63 + 16), v58, &v87)) {
        int v64 = *(_DWORD *)(v87 + 8);
      }
      else {
        int v64 = 0;
      }
      if (v59 < v62 || (BOOL result = 1, v62 >= v59) && v61 < v64)
      {
        uint64_t v65 = *v39;
        uint64_t v66 = *v40;
        uint64_t *v39 = *v40;
        *int v40 = v65;
        uint64_t v67 = v5[1];
        int v68 = *(_DWORD *)(*(void *)(v66 + 24) + 24);
        uint64_t v69 = *v3;
        uint64_t v87 = 0;
        int v70 = sub_1CD40EA84(*(void *)v69, *(_DWORD *)(v69 + 16), v66, &v87) ? *(_DWORD *)(v87 + 8) : 0;
        int v71 = *(_DWORD *)(*(void *)(v67 + 24) + 24);
        uint64_t v72 = *v3;
        uint64_t v87 = 0;
        int v73 = sub_1CD40EA84(*(void *)v72, *(_DWORD *)(v72 + 16), v67, &v87) ? *(_DWORD *)(v87 + 8) : 0;
        if (v68 < v71 || (BOOL result = 1, v71 >= v68) && v70 < v73)
        {
          uint64_t v75 = v5[1];
          uint64_t v74 = v5[2];
          uint64_t v76 = *v5;
          v5[1] = v74;
          v5[2] = v75;
          int v77 = *(_DWORD *)(*(void *)(v74 + 24) + 24);
          uint64_t v78 = *v3;
          uint64_t v87 = 0;
          int v79 = sub_1CD40EA84(*(void *)v78, *(_DWORD *)(v78 + 16), v74, &v87) ? *(_DWORD *)(v87 + 8) : 0;
          int v80 = *(_DWORD *)(*(void *)(v76 + 24) + 24);
          uint64_t v81 = *v3;
          uint64_t v87 = 0;
          int v82 = sub_1CD40EA84(*(void *)v81, *(_DWORD *)(v81 + 16), v76, &v87) ? *(_DWORD *)(v87 + 8) : 0;
          int v83 = (int8x16_t *)v5;
          if (v77 < v80 || (BOOL result = 1, v80 >= v77) && (v83 = (int8x16_t *)v5, v79 < v82))
          {
            *int v83 = vextq_s8(*v83, *v83, 8uLL);
            return 1;
          }
        }
      }
      return result;
    default:
      uint64_t v8 = v5 + 2;
      sub_1CBB130A8(v5, v5 + 1, v5 + 2, a3);
      uint64_t v9 = v5 + 3;
      if (v5 + 3 == v4) {
        return 1;
      }
      uint64_t v10 = 0;
      int v86 = 0;
      uint64_t v84 = v4;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = *v8;
    int v13 = *(_DWORD *)(*(void *)(*v9 + 24) + 24);
    uint64_t v14 = *v3;
    uint64_t v87 = 0;
    int v15 = sub_1CD40EA84(*(void *)v14, *(_DWORD *)(v14 + 16), v11, &v87) ? *(_DWORD *)(v87 + 8) : 0;
    int v16 = *(_DWORD *)(*(void *)(v12 + 24) + 24);
    uint64_t v17 = *v3;
    uint64_t v87 = 0;
    int v18 = sub_1CD40EA84(*(void *)v17, *(_DWORD *)(v17 + 16), v12, &v87) ? *(_DWORD *)(v87 + 8) : 0;
    if (v13 < v16 || (v16 >= v13 ? (BOOL v19 = v15 < v18) : (BOOL v19 = 0), v19))
    {
      uint64_t v20 = *v9;
      *uint64_t v9 = *v8;
      int v21 = v5;
      if (v8 != v5)
      {
        uint64_t v22 = v3;
        uint64_t v85 = v10;
        uint64_t v23 = v10;
        do
        {
          int v24 = (char *)v5 + v23;
          uint64_t v25 = *(uint64_t *)((char *)v5 + v23 + 8);
          int v26 = *(_DWORD *)(*(void *)(v20 + 24) + 24);
          uint64_t v27 = *v22;
          uint64_t v87 = 0;
          uint64_t v28 = v5;
          if (sub_1CD40EA84(*(void *)v27, *(_DWORD *)(v27 + 16), v20, &v87)) {
            int v29 = *(_DWORD *)(v87 + 8);
          }
          else {
            int v29 = 0;
          }
          int v30 = *(_DWORD *)(*(void *)(v25 + 24) + 24);
          uint64_t v31 = *v22;
          uint64_t v87 = 0;
          if (sub_1CD40EA84(*(void *)v31, *(_DWORD *)(v31 + 16), v25, &v87)) {
            int v32 = *(_DWORD *)(v87 + 8);
          }
          else {
            int v32 = 0;
          }
          if (v26 >= v30 && (v30 < v26 || v29 >= v32))
          {
            BOOL v5 = v28;
            int v21 = (uint64_t *)((char *)v28 + v23 + 16);
            goto LABEL_33;
          }
          *((void *)v24 + 2) = *((void *)v24 + 1);
          v23 -= 8;
          BOOL v5 = v28;
        }
        while (v23 != -16);
        int v21 = v28;
LABEL_33:
        unsigned int v3 = v22;
        uint64_t v4 = v84;
        uint64_t v10 = v85;
      }
      *int v21 = v20;
      if (++v86 == 8) {
        return v9 + 1 == v4;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == v4) {
      return result;
    }
  }
}

uint64_t sub_1CBB139E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CBB130A8(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  int v12 = *(_DWORD *)(*(void *)(*a4 + 24) + 24);
  uint64_t v13 = *a5;
  uint64_t v39 = 0;
  if (sub_1CD40EA84(*(void *)v13, *(_DWORD *)(v13 + 16), v10, &v39)) {
    int v14 = *(_DWORD *)(v39 + 8);
  }
  else {
    int v14 = 0;
  }
  int v15 = *(_DWORD *)(*(void *)(v11 + 24) + 24);
  uint64_t v16 = *a5;
  uint64_t v39 = 0;
  uint64_t result = sub_1CD40EA84(*(void *)v16, *(_DWORD *)(v16 + 16), v11, &v39);
  if (result) {
    int v18 = *(_DWORD *)(v39 + 8);
  }
  else {
    int v18 = 0;
  }
  if (v12 < v15 || (v15 >= v12 ? (BOOL v19 = v14 < v18) : (BOOL v19 = 0), v19))
  {
    uint64_t v20 = *a3;
    *a3 = *a4;
    *a4 = v20;
    uint64_t v21 = *a3;
    uint64_t v22 = *a2;
    int v23 = *(_DWORD *)(*(void *)(*a3 + 24) + 24);
    uint64_t v24 = *a5;
    uint64_t v39 = 0;
    if (sub_1CD40EA84(*(void *)v24, *(_DWORD *)(v24 + 16), v21, &v39)) {
      int v25 = *(_DWORD *)(v39 + 8);
    }
    else {
      int v25 = 0;
    }
    int v26 = *(_DWORD *)(*(void *)(v22 + 24) + 24);
    uint64_t v27 = *a5;
    uint64_t v39 = 0;
    uint64_t result = sub_1CD40EA84(*(void *)v27, *(_DWORD *)(v27 + 16), v22, &v39);
    if (result) {
      int v28 = *(_DWORD *)(v39 + 8);
    }
    else {
      int v28 = 0;
    }
    if (v23 < v26 || v26 >= v23 && v25 < v28)
    {
      uint64_t v29 = *a2;
      *a2 = *a3;
      *a3 = v29;
      uint64_t v30 = *a2;
      uint64_t v31 = *a1;
      int v32 = *(_DWORD *)(*(void *)(*a2 + 24) + 24);
      uint64_t v33 = *a5;
      uint64_t v39 = 0;
      if (sub_1CD40EA84(*(void *)v33, *(_DWORD *)(v33 + 16), v30, &v39)) {
        int v34 = *(_DWORD *)(v39 + 8);
      }
      else {
        int v34 = 0;
      }
      int v35 = *(_DWORD *)(*(void *)(v31 + 24) + 24);
      uint64_t v36 = *a5;
      uint64_t v39 = 0;
      uint64_t result = sub_1CD40EA84(*(void *)v36, *(_DWORD *)(v36 + 16), v31, &v39);
      if (result) {
        int v37 = *(_DWORD *)(v39 + 8);
      }
      else {
        int v37 = 0;
      }
      if (v32 < v35 || v35 >= v32 && v34 < v37)
      {
        uint64_t v38 = *a1;
        *a1 = *a2;
        *a2 = v38;
      }
    }
  }
  return result;
}

uint64_t sub_1CBB13C14()
{
  *(void *)&long long v4 = "Enable global fence placement.";
  *((void *)&v4 + 1) = 30;
  int v3 = 0;
  LOBYTE(v1) = 1;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FA18(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC0540, &dword_1CB82C000);
  *(void *)&long long v4 = "Specify size of MBB from which we allow to fences live out from the basic block.";
  *((void *)&v4 + 1) = 80;
  int v3 = 0;
  int v1 = -1;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FB3C(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC0600, &dword_1CB82C000);
  *(void *)&long long v4 = "Whether to kill set-fences for IR and STK writes out of basic blocks.";
  *((void *)&v4 + 1) = 69;
  int v3 = 0;
  LOBYTE(v1) = 0;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FC60((uint64_t)&unk_1EBCC06C0, "global-fence-placement-kill-non-waited-writes", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC06C0, &dword_1CB82C000);
  *(void *)&long long v4 = "Force applying a special technique of dependency killing by transitivity.";
  *((void *)&v4 + 1) = 73;
  int v3 = 0;
  LOBYTE(v1) = 1;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FC60((uint64_t)&unk_1EBCC0780, "fence-placement-force-aggressive-transitivity", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0780, &dword_1CB82C000);
  *(void *)&long long v4 = "Enable physical fence post-processing: validate fence placement and remove unneeded waits.";
  *((void *)&v4 + 1) = 90;
  int v3 = 0;
  LOBYTE(v1) = 0;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FD88(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC0840, &dword_1CB82C000);
  *(void *)&long long v4 = "Enable fence plancement for divergent hazards.";
  *((void *)&v4 + 1) = 46;
  int v3 = 0;
  LOBYTE(v1) = 1;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FC60((uint64_t)&unk_1EBCC0900, "fence-placement-divergent-hazards", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0900, &dword_1CB82C000);
  *(void *)&long long v4 = "Restrict physical fence count.";
  *((void *)&v4 + 1) = 30;
  LODWORD(v2) = 0;
  sub_1CD41FEAC(&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC09C0, &dword_1CB82C000);
  *(void *)&long long v4 = "Print GIN-782 SWWA Debug thread-safely (agx-perf multithreaded-compatible)";
  *((void *)&v4 + 1) = 74;
  LOBYTE(v3) = 0;
  unint64_t v2 = (char *)&v3;
  sub_1CD41D15C((uint64_t)algn_1EBCC0A80, "print-gin-782-debug", &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, algn_1EBCC0A80, &dword_1CB82C000);
  *(void *)&long long v4 = "Minimal size for a batch of post-deactivation samples to force a wait for the samples on first encounterd imgwci.";
  *((void *)&v4 + 1) = 113;
  int v3 = 0;
  int v1 = 16;
  unint64_t v2 = (char *)&v1;
  sub_1CD41FFB0(&v4, &v3, (int **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCC0B40, &dword_1CB82C000);
}

uint64_t sub_1CBB13ED8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_1CBE52E8C(**(unsigned __int16 **)(a1 + 16));
  if ((v6 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  int v7 = v6;
  int v8 = sub_1CBC2D2EC(a1, a2, (void *)(a3 + 8));
  if (v8 != 3)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    switch(v8)
    {
      case 3:
LABEL_35:
        __break(1u);
        JUMPOUT(0x1CBB14100);
      case 4:
        uint64_t v9 = 0x4600000000;
        uint64_t v10 = 50;
        if (v7 > 163)
        {
          if ((v7 - 164) < 4) {
            return v9 | v10;
          }
          if (v7 == 200)
          {
            uint64_t v9 = 0x1E00000000;
LABEL_27:
            uint64_t v10 = 20;
            return v9 | v10;
          }
        }
        else if (v7 > 84)
        {
          if (v7 != 107 && v7 == 85)
          {
LABEL_15:
            uint64_t v9 = 0x7D000000000;
            uint64_t v10 = 400;
            return v9 | v10;
          }
        }
        else
        {
          if ((v7 - 78) < 3) {
            return v9 | v10;
          }
          if (v7 == 18) {
            goto LABEL_15;
          }
        }
        uint64_t v9 = 0x3200000000;
        goto LABEL_27;
      case 5:
        uint64_t v9 = 0xE00000000;
        uint64_t v10 = 12;
        return v9 | v10;
      case 6:
        uint64_t v9 = 0x1B00000000;
        uint64_t v10 = 23;
        return v9 | v10;
      case 7:
        uint64_t v10 = 100;
        if (v7 != 63) {
          uint64_t v10 = 12;
        }
        uint64_t v9 = 0xE00000000;
        if (v7 == 63) {
          uint64_t v9 = 0xFA00000000;
        }
        return v9 | v10;
      default:
        return v9 | v10;
    }
  }
  if (v7 <= 146)
  {
    switch(v7)
    {
      case ']':
      case 'b':
        uint64_t v9 = 0x9600000000;
        uint64_t v10 = 50;
        return v9 | v10;
      case '^':
      case 'd':
        uint64_t v9 = 0x2700000000;
        uint64_t v10 = 33;
        return v9 | v10;
      case '_':
      case 'a':
      case 'c':
        goto LABEL_35;
      case 'e':
      case 'f':
      case 'g':
      case 'h':
        goto LABEL_8;
      default:
        if (v7 == 64)
        {
          uint64_t v9 = 0xFA00000000;
          uint64_t v10 = 100;
        }
        else
        {
LABEL_8:
          uint64_t v9 = 0x3000000000;
          uint64_t v10 = 40;
        }
        break;
    }
  }
  else
  {
    uint64_t v9 = 0x1F400000000;
    uint64_t v10 = 300;
    if ((v7 - 164) >= 4)
    {
      uint64_t v10 = 27;
      uint64_t v9 = 0x2000000000;
    }
  }
  return v9 | v10;
}

uint64_t sub_1CBB14150(uint64_t a1)
{
  uint64_t v1 = sub_1CBE52E8C(**(unsigned __int16 **)(a1 + 16));
  if ((v1 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  if (v1 == 193)
  {
    uint64_t v2 = 0x1500000000;
    uint64_t v3 = 18;
  }
  else if (v1 == 100)
  {
    uint64_t v2 = 0x2200000000;
    uint64_t v3 = 29;
  }
  else
  {
    uint64_t v2 = 0x1900000000;
    uint64_t v3 = 25;
  }
  return v2 | v3;
}

uint64_t sub_1CBB141C8(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 48))
  {
    BOOL v19 = (void *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 40);
    unsigned int v20 = *a2;
    if (v18)
    {
      uint64_t result = 1;
      do
      {
        while (1)
        {
          uint64_t v21 = (void *)v18;
          unsigned int v22 = *(_DWORD *)(v18 + 28);
          if (v20 >= v22) {
            break;
          }
          uint64_t v18 = *v21;
          BOOL v19 = v21;
          if (!*v21) {
            goto LABEL_31;
          }
        }
        if (v22 >= v20) {
          return result;
        }
        uint64_t v18 = v21[1];
      }
      while (v18);
      BOOL v19 = v21 + 1;
    }
    else
    {
      uint64_t v21 = (void *)(a1 + 40);
    }
LABEL_31:
    int v23 = operator new(0x20uLL);
    v23[7] = v20;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v21;
    *BOOL v19 = v23;
    uint64_t v24 = **(void **)(a1 + 32);
    if (v24)
    {
      *(void *)(a1 + 32) = v24;
      int v23 = (_DWORD *)*v19;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (!v4)
    {
LABEL_3:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
      return 0x100000001;
    }
    uint64_t v7 = 4 * v4;
    int v8 = *(_DWORD **)a1;
    while (*v8 != v5)
    {
      ++v8;
      v7 -= 4;
      if (!v7) {
        goto LABEL_10;
      }
    }
    if (v7) {
      return 1;
    }
LABEL_10:
    if (v4 <= 3) {
      goto LABEL_3;
    }
    uint64_t v9 = (void *)(a1 + 40);
    do
    {
      uint64_t v10 = *(void *)a1 + 4 * v4;
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = (void *)(a1 + 40);
      uint64_t v13 = (void *)(a1 + 40);
      if (v11)
      {
        unsigned int v14 = *(_DWORD *)(v10 - 4);
        do
        {
          while (1)
          {
            uint64_t v13 = (void *)v11;
            unsigned int v15 = *(_DWORD *)(v11 + 28);
            if (v14 >= v15) {
              break;
            }
            uint64_t v11 = *v13;
            int v12 = v13;
            if (!*v13) {
              goto LABEL_19;
            }
          }
          if (v15 >= v14) {
            goto LABEL_22;
          }
          uint64_t v11 = v13[1];
        }
        while (v11);
        int v12 = v13 + 1;
      }
LABEL_19:
      uint64_t v16 = operator new(0x20uLL);
      v16[7] = *(_DWORD *)(v10 - 4);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      *int v12 = v16;
      uint64_t v17 = **(void **)(a1 + 32);
      if (v17)
      {
        *(void *)(a1 + 32) = v17;
        uint64_t v16 = (_DWORD *)*v12;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 40), (uint64_t *)v16);
      ++*(void *)(a1 + 48);
      LODWORD(v4) = *(_DWORD *)(a1 + 8);
LABEL_22:
      LODWORD(v4) = v4 - 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    while (v4);
    int v25 = (_DWORD *)*v9;
    unsigned int v26 = *a2;
    uint64_t v27 = (void *)(a1 + 40);
    if (*v9)
    {
      do
      {
        while (1)
        {
          uint64_t v27 = v25;
          unsigned int v28 = v25[7];
          if (v26 >= v28) {
            break;
          }
          int v25 = (_DWORD *)*v27;
          uint64_t v9 = v27;
          if (!*v27) {
            goto LABEL_43;
          }
        }
        if (v28 >= v26) {
          return 0x100000001;
        }
        int v25 = (_DWORD *)v27[1];
      }
      while (v25);
      uint64_t v9 = v27 + 1;
    }
LABEL_43:
    int v23 = operator new(0x20uLL);
    v23[7] = v26;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v27;
    *uint64_t v9 = v23;
    uint64_t v29 = **(void **)(a1 + 32);
    if (v29)
    {
      *(void *)(a1 + 32) = v29;
      int v23 = (_DWORD *)*v9;
    }
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 40), (uint64_t *)v23);
  ++*(void *)(a1 + 48);
  return 0x100000001;
}

void sub_1CBB1445C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0C20))
  {
    dword_1EBCC0C08 = 16;
    __cxa_guard_release(&qword_1EBCC0C20);
  }
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  unsigned int v5 = *(uint64_t **)(a2 + 16);
  if (v4 != v5)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 |= sub_1CBB1445C(a1, v7);
    }
    while (v4 != v5);
  }
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatch();
}

uint64_t sub_1CBB1559C(llvm::FunctionPass *a1, uint64_t a2)
{
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *((void *)a1 + 31) = v4;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
    uint64_t v6 = *(void *)(a2 + 40);
    *((void *)a1 + 32) = v5;
    *((void *)a1 + 33) = v6;
    uint64_t v7 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 == v9)
    {
LABEL_24:
      uint64_t v10 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v8 != &llvm::MachineLoopInfo::ID)
      {
        v8 += 16;
        if (v8 == v9) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = *(void *)(v8 + 8);
    }
    *((void *)a1 + 35) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::MachineLoopInfo::ID);
    uint64_t v11 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (v12 == v13)
    {
LABEL_8:
      uint64_t v14 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v12 != &llvm::MachineDominatorTree::ID)
      {
        v12 += 16;
        if (v12 == v13) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = *(void *)(v12 + 8);
    }
    *((void *)a1 + 36) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineDominatorTree::ID);
    unsigned int v15 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    if (v16 == v17)
    {
LABEL_13:
      uint64_t v18 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v16 != &llvm::MachinePostDominatorTree::ID)
      {
        v16 += 16;
        if (v16 == v17) {
          goto LABEL_13;
        }
      }
      uint64_t v18 = *(void *)(v16 + 8);
    }
    *((void *)a1 + 37) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::MachinePostDominatorTree::ID);
    BOOL v19 = (uint64_t *)*((void *)a1 + 1);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    if (v20 == v21)
    {
LABEL_18:
      uint64_t v22 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v20 != &llvm::AAResultsWrapperPass::ID)
      {
        v20 += 16;
        if (v20 == v21) {
          goto LABEL_18;
        }
      }
      uint64_t v22 = *(void *)(v20 + 8);
    }
    *((void *)a1 + 34) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::AAResultsWrapperPass::ID)+ 32);
    uint64_t v23 = *((void *)a1 + 35);
    uint64_t v24 = *(uint64_t **)(v23 + 272);
    if (v24 != *(uint64_t **)(v23 + 280)) {
      sub_1CBB1445C((uint64_t)a1, *v24);
    }
  }
  return 0;
}

void sub_1CBB157F4(llvm *a1)
{
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  operator new();
}

const char *sub_1CBB158AC()
{
  return "AGX3 flag def hoisting pass";
}

uint64_t sub_1CBB158BC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC0CF0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F70B8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0CF8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBB159B4;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCC0CF8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBB159B4(uint64_t a1)
{
}

void sub_1CBB15A5C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBB15B10(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBB15BBC()
{
  return "AGX3 FlagR to GPR Spiller pass";
}

void sub_1CBB15BCC(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  *(unsigned char *)(a2 + 160) = 1;

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

BOOL sub_1CBB15C70(void *a1, uint64_t a2)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCC0CB0) {
    return 0;
  }
  uint64_t v3 = a2 + 320;
  if (*(void *)(a2 + 320) == a2 + 320) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v5;
  }
  a1[34] = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  a1[32] = v6;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6);
  a1[33] = (*(uint64_t (**)(void))(*(void *)a1[32] + 176))(a1[32]);
  a1[35] = *(void *)(a2 + 40);
  uint64_t v7 = (uint64_t *)a1[1];
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_8:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::LiveIntervals::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  a1[36] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::LiveIntervals::ID);
  uint64_t v124 = v126;
  uint64_t v125 = 0x600000000;
  uint64_t v11 = *(void *)(a2 + 328);
  if (v11 == v3) {
    return 0;
  }
  unsigned int v12 = 0;
  do
  {
    for (uint64_t i = *(void *)(v11 + 56); i != v11 + 48; uint64_t i = *(void *)(i + 8))
    {
      int v14 = **(unsigned __int16 **)(i + 16);
      if (v14 != 332 && v14 != 356)
      {
        uint64_t v15 = sub_1CBE52E8C(v14);
        if ((v15 & 0xFF00000000) == 0 || v15 != 59 && v15 != 148 && v15 != 88) {
          goto LABEL_18;
        }
        unint64_t v16 = *(void *)(i + 48);
        if (v16 < 8) {
          goto LABEL_18;
        }
        if ((v16 & 7) != 0)
        {
          if ((*(void *)(i + 48) & 7) != 3
            || (v16 & 0xFFFFFFFFFFFFFFF8) == 0
            || *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) != 1)
          {
            goto LABEL_18;
          }
        }
        else
        {
          v16 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)(i + 48) = v16;
        }
        if ((v16 & 7) != 0)
        {
          unint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(i + 48) = v17;
        }
        if (*(_DWORD *)(v17 + 16)) {
          goto LABEL_18;
        }
      }
      if (v12 >= HIDWORD(v125)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v124 + v12) = i;
      unsigned int v12 = v125 + 1;
      LODWORD(v125) = v125 + 1;
LABEL_18:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11 != v3);
  uint64_t v18 = (uint64_t *)v124;
  BOOL v19 = v12 != 0;
  if (!v12) {
    goto LABEL_243;
  }
  int v117 = 0;
  uint64_t v118 = 0;
  unsigned int v119 = 0;
  unsigned int v115 = sub_1CBDA6464(356, 0x21u);
  unsigned int v114 = sub_1CBDA6464(332, 0x21u);
  unsigned int v113 = sub_1CBDA6464(356, 0x2Du);
  unsigned int v112 = sub_1CBDA6464(332, 0x2Du);
  uint64_t v116 = (uint64_t *)((char *)v124 + 8 * v12);
  while (2)
  {
    uint64_t v20 = *v18;
    int v21 = **(unsigned __int16 **)(*v18 + 16);
    if (v21 == 356 || v21 == 332)
    {
      unsigned int v22 = v115;
      if (v21 != 356) {
        unsigned int v22 = v114;
      }
    }
    else
    {
      unsigned int v22 = 1;
    }
    int v23 = *(_DWORD *)(*(void *)(v20 + 32) + 32 * v22 + 16);
    uint64_t v24 = v117;
    unsigned int v25 = v119;
    if (v119)
    {
      LODWORD(v26) = (v119 - 1) & (37 * v23);
      uint64_t v27 = &v117[2 * v26];
      int v28 = *v27;
      if (*v27 != v23)
      {
        int v29 = 1;
        while (v28 != 0x7FFFFFFF)
        {
          int v30 = v26 + v29++;
          uint64_t v26 = v30 & (v119 - 1);
          int v28 = v117[2 * v26];
          if (v28 == v23)
          {
            uint64_t v27 = &v117[2 * v26];
            goto LABEL_56;
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
LABEL_55:
      uint64_t v27 = &v117[2 * v119];
    }
LABEL_56:
    if (&v117[2 * v119] == v27)
    {
      uint64_t v32 = a1[35];
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v32, "", 0);
      *(void *)(*(void *)(v32 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF970;
      uint64_t v33 = *(void *)(v32 + 8);
      if (v33)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
        if (v25) {
          goto LABEL_60;
        }
      }
      else if (v25)
      {
LABEL_60:
        unsigned int v34 = v25 - 1;
        unsigned int v35 = (v25 - 1) & (37 * v23);
        uint64_t v36 = &v24[2 * v35];
        int v37 = *v36;
        if (v23 == *v36)
        {
LABEL_104:
          v36[1] = IncompleteVirtualRegister;
          goto LABEL_105;
        }
        uint64_t v38 = 0;
        int v39 = 1;
        while (v37 != 0x7FFFFFFF)
        {
          if (v38) {
            BOOL v40 = 0;
          }
          else {
            BOOL v40 = v37 == 0x80000000;
          }
          if (v40) {
            uint64_t v38 = v36;
          }
          unsigned int v41 = v35 + v39++;
          unsigned int v35 = v41 & v34;
          uint64_t v36 = &v24[2 * (v41 & v34)];
          int v37 = *v36;
          if (v23 == *v36) {
            goto LABEL_104;
          }
        }
        if (v38) {
          uint64_t v36 = v38;
        }
LABEL_75:
        if (4 * (int)v118 + 4 >= 3 * v25)
        {
          sub_1CBB16BC8((uint64_t)&v117, 2 * v25);
          if (v119)
          {
            unsigned int v49 = v119 - 1;
            unsigned int v50 = (v119 - 1) & (37 * v23);
            uint64_t v36 = &v117[2 * v50];
            int v51 = *v36;
            if (v23 != *v36)
            {
              uint64_t v45 = 0;
              int v52 = 1;
              while (v51 != 0x7FFFFFFF)
              {
                if (v45) {
                  BOOL v53 = 0;
                }
                else {
                  BOOL v53 = v51 == 0x80000000;
                }
                if (v53) {
                  uint64_t v45 = v36;
                }
                unsigned int v54 = v50 + v52++;
                unsigned int v50 = v54 & v49;
                uint64_t v36 = &v117[2 * (v54 & v49)];
                int v51 = *v36;
                if (v23 == *v36) {
                  goto LABEL_101;
                }
              }
              goto LABEL_99;
            }
LABEL_101:
            LODWORD(v118) = v118 + 1;
            if (*v36 != 0x7FFFFFFF) {
              --HIDWORD(v118);
            }
            *uint64_t v36 = v23;
            v36[1] = 0;
            goto LABEL_104;
          }
        }
        else
        {
          if (v25 + ~v118 - HIDWORD(v118) > v25 >> 3) {
            goto LABEL_101;
          }
          sub_1CBB16BC8((uint64_t)&v117, v25);
          if (v119)
          {
            unsigned int v42 = v119 - 1;
            unsigned int v43 = (v119 - 1) & (37 * v23);
            uint64_t v36 = &v117[2 * v43];
            int v44 = *v36;
            if (v23 != *v36)
            {
              uint64_t v45 = 0;
              int v46 = 1;
              while (v44 != 0x7FFFFFFF)
              {
                if (v45) {
                  BOOL v47 = 0;
                }
                else {
                  BOOL v47 = v44 == 0x80000000;
                }
                if (v47) {
                  uint64_t v45 = v36;
                }
                unsigned int v48 = v43 + v46++;
                unsigned int v43 = v48 & v42;
                uint64_t v36 = &v117[2 * (v48 & v42)];
                int v44 = *v36;
                if (v23 == *v36) {
                  goto LABEL_101;
                }
              }
LABEL_99:
              if (v45) {
                uint64_t v36 = v45;
              }
              goto LABEL_101;
            }
            goto LABEL_101;
          }
        }
        uint64_t v36 = 0;
        goto LABEL_101;
      }
      uint64_t v36 = 0;
      goto LABEL_75;
    }
    int IncompleteVirtualRegister = v27[1];
LABEL_105:
    if (v21 != 356 && v21 != 332)
    {
      unsigned int v67 = sub_1CBE52EB8(**(unsigned __int16 **)(v20 + 16), 0, 2);
      uint64_t v68 = *(void *)(v20 + 24);
      uint64_t v69 = *(void *)(a1[31] + 8) + 48 * v67;
      if ((*(_WORD *)(v20 + 44) & 4) == 0)
      {
        int v70 = *(llvm::MachineFunction **)(v68 + 32);
        int v71 = *(void **)(v20 + 56);
        v122[0] = v71;
        if (v71) {
          llvm::MetadataTracking::track((uint64_t)v122, (unsigned __int8 *)v71, 2);
        }
        uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v70, v69, (unsigned __int8 **)v122, 0);
        if (!v122[0]) {
          goto LABEL_133;
        }
        int v96 = *(unsigned __int8 *)v122[0];
        if ((v96 - 4) > 0x1E)
        {
          if ((v96 - 3) >= 0xFFFFFFFE) {
            int v102 = v122[0];
          }
          else {
            int v102 = 0;
          }
          if ((v96 - 3) < 0xFFFFFFFE)
          {
            if (v96 == 3) {
              *((void *)v122[0] + 1) = 0;
            }
            goto LABEL_133;
          }
          unint64_t v98 = (unint64_t)v102 + 8;
        }
        else
        {
          if ((*((unsigned char *)v122[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v122[0] + 3)) {
            goto LABEL_133;
          }
          uint64_t v97 = *((void *)v122[0] + 2);
          if ((v97 & 4) == 0) {
            goto LABEL_133;
          }
          unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFF8;
          if (!v98) {
            goto LABEL_133;
          }
        }
        int v127 = v122;
        sub_1CC5FA668(v98 + 16, &v127);
LABEL_133:
        uint64_t v72 = *(void *)(v68 + 40);
        *(void *)(MachineInstr + 24) = v72;
        uint64_t v73 = *(void *)(v72 + 32);
        uint64_t v74 = *(unsigned int *)(MachineInstr + 40);
        if (v74)
        {
          uint64_t v89 = *(void *)(MachineInstr + 32);
          uint64_t v90 = *(void *)(v73 + 40);
          uint64_t v91 = 32 * v74;
          do
          {
            if (!*(unsigned char *)v89)
            {
              uint64_t v92 = *(unsigned int *)(v89 + 4);
              if ((int)v92 >= 0) {
                int v93 = (uint64_t *)(*(void *)(v90 + 272) + 8 * v92);
              }
              else {
                int v93 = (uint64_t *)(*(void *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
              }
              uint64_t v94 = *v93;
              if (*v93)
              {
                uint64_t v95 = *(void *)(v94 + 16);
                *(void *)(v94 + 16) = v89;
                *(void *)(v89 + 16) = v95;
                if (*(unsigned char *)(v89 + 3))
                {
                  *(void *)(v89 + 24) = v94;
                }
                else
                {
                  *(void *)(v89 + 24) = 0;
                  int v93 = (uint64_t *)(v95 + 24);
                }
              }
              else
              {
                *(void *)(v89 + 16) = v89;
                *(void *)(v89 + 24) = 0;
              }
              *int v93 = v89;
            }
            v89 += 32;
            v91 -= 32;
          }
          while (v91);
        }
        uint64_t v75 = *(void *)(v73 + 728);
        if (v75) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v75 + 24))(v75, MachineInstr);
        }
        unint64_t v76 = *(void *)v20 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t MachineInstr = v76 | *(void *)MachineInstr & 7;
        *(void *)(MachineInstr + 8) = v20;
        *(void *)(v76 + 8) = MachineInstr;
        *(void *)uint64_t v20 = *(void *)v20 & 7 | MachineInstr;
LABEL_144:
        long long v128 = 0uLL;
        *(void *)&long long v129 = 0;
        LODWORD(v127) = 0x1000000;
        HIDWORD(v127) = IncompleteVirtualRegister;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v70, (const llvm::MachineOperand *)&v127);
        if (*(_DWORD *)(v20 + 40) >= 3u)
        {
          uint64_t v78 = 64;
          unint64_t v79 = 2;
          do
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v70, (const llvm::MachineOperand *)(*(void *)(v20 + 32) + v78));
            ++v79;
            v78 += 32;
          }
          while (v79 < *(unsigned int *)(v20 + 40));
        }
        goto LABEL_156;
      }
      int v70 = *(llvm::MachineFunction **)(v68 + 32);
      int v77 = *(void **)(v20 + 56);
      v122[0] = v77;
      if (v77) {
        llvm::MetadataTracking::track((uint64_t)v122, (unsigned __int8 *)v77, 2);
      }
      uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v70, v69, (unsigned __int8 **)v122, 0);
      if (v122[0])
      {
        int v99 = *(unsigned __int8 *)v122[0];
        if ((v99 - 4) > 0x1E)
        {
          if ((v99 - 3) >= 0xFFFFFFFE) {
            uint64_t v103 = v122[0];
          }
          else {
            uint64_t v103 = 0;
          }
          if ((v99 - 3) < 0xFFFFFFFE)
          {
            if (v99 == 3) {
              *((void *)v122[0] + 1) = 0;
            }
            goto LABEL_140;
          }
          unint64_t v101 = (unint64_t)v103 + 8;
        }
        else
        {
          if ((*((unsigned char *)v122[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v122[0] + 3)) {
            goto LABEL_140;
          }
          uint64_t v100 = *((void *)v122[0] + 2);
          if ((v100 & 4) == 0) {
            goto LABEL_140;
          }
          unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
          if (!v101) {
            goto LABEL_140;
          }
        }
        int v127 = v122;
        sub_1CC5FA668(v101 + 16, &v127);
      }
LABEL_140:
      if (v68 + 48 != v20 && (*(_WORD *)(v20 + 44) & 4) != 0) {
        *(_WORD *)(MachineInstr + 44) |= 0xCu;
      }
      sub_1CC31973C((uint64_t *)(v68 + 40), (uint64_t *)v20, MachineInstr);
      goto LABEL_144;
    }
    uint64_t v55 = *(void *)(v20 + 24);
    int v56 = **(unsigned __int16 **)(v20 + 16);
    if (v56 == 356) {
      uint64_t v57 = v113;
    }
    else {
      uint64_t v57 = v112;
    }
    int v58 = *(_DWORD *)(*(void *)(v20 + 32) + 32 * v57 + 4);
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    uint64_t v59 = *(void *)(v55 + 32);
    int v127 = (void **)&unk_1F261CD58;
    *(void *)&long long v128 = v59;
    *(void *)&long long v129 = *(void *)(v59 + 40);
    *((void *)&v128 + 1) = (*(uint64_t (**)(void))(**(void **)(v59 + 16) + 104))(*(void *)(v59 + 16));
    int v120 = 0;
    if (!*((void *)&v129 + 1)) {
      goto LABEL_111;
    }
    int v81 = **((unsigned char **)&v129 + 1);
    if ((v81 - 4) > 0x1E)
    {
      if ((v81 - 3) >= 0xFFFFFFFE) {
        uint64_t v87 = *((void *)&v129 + 1);
      }
      else {
        uint64_t v87 = 0;
      }
      if ((v81 - 3) > 0xFFFFFFFD)
      {
        unint64_t v83 = v87 + 8;
        goto LABEL_175;
      }
      if (v81 == 3) {
        *(void *)(*((void *)&v129 + 1) + 8) = 0;
      }
LABEL_111:
      *((void *)&v129 + 1) = 0;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v129 + 1) + 12)) {
        goto LABEL_111;
      }
      uint64_t v82 = *(void *)(*((void *)&v129 + 1) + 16);
      if ((v82 & 4) == 0) {
        goto LABEL_111;
      }
      unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
      if (!v83) {
        goto LABEL_111;
      }
LABEL_175:
      v122[0] = (char *)&v129 + 8;
      sub_1CC5FA668(v83 + 16, v122);
      *((void *)&v129 + 1) = v120;
      if (v120) {
        llvm::MetadataTracking::retrack((uint64_t)&v120, v120, (uint64_t)&v129 + 8);
      }
    }
    *((void *)&v130 + 1) = v20;
    *(void *)&long long v131 = 0;
    *(void *)&long long v130 = *(void *)(v20 + 24);
    *((void *)&v130 + 1) = v20;
    if ((long long *)(v20 + 56) != (long long *)((char *)&v129 + 8))
    {
      if (!*((void *)&v129 + 1)) {
        goto LABEL_114;
      }
      int v84 = **((unsigned char **)&v129 + 1);
      if ((v84 - 4) <= 0x1E)
      {
        if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v129 + 1) + 12)) {
          goto LABEL_114;
        }
        uint64_t v85 = *(void *)(*((void *)&v129 + 1) + 16);
        if ((v85 & 4) == 0) {
          goto LABEL_114;
        }
        unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
        if (!v86) {
          goto LABEL_114;
        }
        goto LABEL_182;
      }
      if ((v84 - 3) >= 0xFFFFFFFE) {
        uint64_t v88 = *((void *)&v129 + 1);
      }
      else {
        uint64_t v88 = 0;
      }
      if ((v84 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v86 = v88 + 8;
LABEL_182:
        v122[0] = (char *)&v129 + 8;
        sub_1CC5FA668(v86 + 16, v122);
        goto LABEL_114;
      }
      if (v84 == 3) {
        *(void *)(*((void *)&v129 + 1) + 8) = 0;
      }
LABEL_114:
      *((void *)&v129 + 1) = *(void *)(v20 + 56);
      if (*((void *)&v129 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v129 + 8, *((unsigned __int8 **)&v129 + 1), 2);
      }
    }
    if (v56 == 356) {
      int v60 = v58;
    }
    else {
      int v60 = IncompleteVirtualRegister;
    }
    if (v56 == 356) {
      int v61 = IncompleteVirtualRegister;
    }
    else {
      int v61 = v58;
    }
    LODWORD(v120) = v61;
    int v121 = 1;
    LODWORD(v122[0]) = v60;
    int v123 = 0;
    ((void (*)(void ***, uint64_t, unsigned __int8 **, uint64_t, void **, uint64_t, void))v127[4])(&v127, 19, &v120, 1, v122, 1, 0);
    uint64_t MachineInstr = v62;
    int v127 = (void **)&unk_1F261CD58;
    if (*((void *)&v129 + 1))
    {
      int v64 = **((unsigned char **)&v129 + 1);
      if ((v64 - 4) > 0x1E)
      {
        if ((v64 - 3) >= 0xFFFFFFFE) {
          uint64_t v80 = *((void *)&v129 + 1);
        }
        else {
          uint64_t v80 = 0;
        }
        if ((v64 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v66 = v80 + 8;
          goto LABEL_153;
        }
        if (v64 == 3) {
          *(void *)(*((void *)&v129 + 1) + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*((void *)&v129 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v129 + 1) + 12))
      {
        uint64_t v65 = *(void *)(*((void *)&v129 + 1) + 16);
        if ((v65 & 4) != 0)
        {
          unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
          if (v66)
          {
LABEL_153:
            v122[0] = (char *)&v129 + 8;
            sub_1CC5FA668(v66 + 16, v122);
          }
        }
      }
    }
LABEL_156:
    sub_1CBB16C94(*(int32x2_t **)(a1[36] + 288), v20, MachineInstr);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v20);
    if (++v18 != v116) {
      continue;
    }
    break;
  }
  v122[0] = &v123;
  v122[1] = (void *)0x400000000;
  if (v118)
  {
    if (v119)
    {
      uint64_t v105 = 8 * v119;
      uint64_t v106 = v117;
      while ((*v106 - 0x7FFFFFFF) <= 1)
      {
        v106 += 2;
        v105 -= 8;
        if (!v105) {
          goto LABEL_236;
        }
      }
    }
    else
    {
      uint64_t v106 = v117;
    }
  }
  else
  {
LABEL_236:
    uint64_t v106 = &v117[2 * v119];
  }
  if (v106 != &v117[2 * v119])
  {
    uint64_t v107 = a1[36];
    int v108 = v106[1];
    unint64_t v109 = *(unsigned int *)(v107 + 416);
    BOOL v110 = (v108 & 0x7FFFFFFFu) >= v109;
    unint64_t v111 = (v108 & 0x7FFFFFFF) - v109;
    if (v110) {
      sub_1CB9153B8(v107 + 408, v111 + 1, *(void *)(v107 + 424));
    }
    llvm::LiveIntervals::createInterval();
  }
  MEMORY[0x1D25D9CD0](v117, 4);
  uint64_t v18 = (uint64_t *)v124;
  BOOL v19 = 1;
LABEL_243:
  if (v18 != (uint64_t *)v126) {
    free(v18);
  }
  return v19;
}

_DWORD *sub_1CBB16BC8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4208F8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *uint64_t result = 0x7FFFFFFF;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB16C94(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v3 = a1[46];
  uint64_t v4 = a1[48].u32[0];
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v6 = (uint64_t *)(*(void *)&v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_3;
    }
    int v15 = 1;
    while (v7 != -4096)
    {
      int v16 = v5 + v15++;
      uint64_t v5 = v16 & (v4 - 1);
      uint64_t v7 = *(void *)(*(void *)&v3 + 16 * v5);
      if (v7 == a2)
      {
        unint64_t v6 = (uint64_t *)(*(void *)&v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  unint64_t v6 = (uint64_t *)(*(void *)&v3 + 16 * v4);
LABEL_3:
  if (v6 == (uint64_t *)(*(void *)&v3 + 16 * v4)) {
    return 0;
  }
  uint64_t v8 = v6[1];
  *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16) = a3;
  *unint64_t v6 = -8192;
  a1[47] = vadd_s32(a1[47], (int32x2_t)0x1FFFFFFFFLL);
  uint64_t v23 = a3;
  uint64_t v24 = v8;
  if (!v4)
  {
    int v21 = 0;
LABEL_24:
    unsigned int v22 = sub_1CB9150E4((uint64_t)&a1[46], (uint64_t)&v23, &v23, v21);
    *unsigned int v22 = v23;
    v22[1] = v24;
    return v8;
  }
  int32x2_t v9 = a1[46];
  int v10 = v4 - 1;
  unsigned int v11 = v10 & ((a3 >> 4) ^ (a3 >> 9));
  unsigned int v12 = (void *)(*(void *)&v9 + 16 * v11);
  uint64_t v13 = *v12;
  if (*v12 != a3)
  {
    unint64_t v17 = 0;
    int v18 = 1;
    while (v13 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v13 == -8192;
      }
      if (v19) {
        unint64_t v17 = v12;
      }
      unsigned int v20 = v11 + v18++;
      unsigned int v11 = v20 & v10;
      unsigned int v12 = (void *)(*(void *)&v9 + 16 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a3) {
        return v8;
      }
    }
    if (v17) {
      int v21 = v17;
    }
    else {
      int v21 = v12;
    }
    goto LABEL_24;
  }
  return v8;
}

void sub_1CBB16DFC()
{
}

uint64_t sub_1CBB16E38()
{
  v4.n128_u64[0] = (unint64_t)"Enable Spilling of Flag regs to GPRs";
  v4.n128_u64[1] = 36;
  char v2 = 1;
  int32x2_t v3 = &v2;
  int v1 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCC0C30, "enable-flag-to-gpr-spiller", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0C30, &dword_1CB82C000);
}

_UNKNOWN **sub_1CBB16EC4()
{
  return &off_1EC7DF9E8;
}

BOOL sub_1CBB16ED0(uint64_t a1, uint64_t a2)
{
  return sub_1CBAD8504(a2, 1024);
}

uint64_t sub_1CBB16EDC()
{
  return 391;
}

uint64_t sub_1CBB16EE4()
{
  return 267;
}

uint64_t sub_1CBB16EEC()
{
  return 104;
}

uint64_t sub_1CBB16EF8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32) + 32 * sub_1CBDA6464(**(unsigned __int16 **)(a2 + 16), 0x24u);
}

void sub_1CBB16F34(int a1, llvm::MachineBasicBlock *this, int a3, uint64_t a4)
{
  __n128 v4 = (void *)*((void *)this + 4);
  int v5 = (*(unsigned __int16 *)(*v4 + 18) >> 4) & 0x3FF;
  if (v5) {
    BOOL v6 = v5 == 8;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || v5 == 255) {
    return;
  }
  if (!*(unsigned char *)(v4[7] + 62))
  {
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_8:
    uint64_t v11 = FirstTerminator;
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)this + 7);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v11 != FirstTerminator)
  {
    do
    {
      if ((*(_WORD *)(v11 + 44) & 0xC) != 0 && (*(_WORD *)(v11 + 44) & 4) == 0)
      {
        unint64_t v24 = FirstTerminator;
        BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v11, 128, 1);
        unint64_t FirstTerminator = v24;
        if (hasPropertyInBundle) {
          goto LABEL_9;
        }
      }
      else if ((*(unsigned char *)(*(void *)(v11 + 16) + 8) & 0x80) != 0)
      {
        goto LABEL_9;
      }
      if ((*(unsigned char *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          uint64_t v11 = *(void *)(v11 + 8);
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while (v11 != FirstTerminator);
    goto LABEL_8;
  }
LABEL_9:
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v11)
  {
LABEL_45:
    unsigned int v25 = 0;
  }
  else
  {
    uint64_t v12 = v11;
    while (1)
    {
      unsigned int v13 = **(unsigned __int16 **)(v12 + 16);
      BOOL v14 = v13 > 0x17;
      int v15 = (1 << v13) & 0x83E000;
      if (v14 || v15 == 0) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 8);
      if ((llvm::MachineBasicBlock *)v12 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_45;
      }
    }
    unint64_t v17 = *(unsigned __int8 **)(v12 + 56);
    unsigned int v25 = v17;
    if (v17) {
      llvm::MetadataTracking::track((uint64_t)&v25, v17, 2);
    }
  }
  sub_1CBAECAFC(a4, (uint64_t)this, (unint64_t *)v11, 0, a3, 1, 0, &v25, 0);
  if (v25)
  {
    int v19 = *v25;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unsigned int v22 = v25;
      }
      else {
        unsigned int v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v25 + 1) = 0;
        }
        return;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v25[1] & 0x7F) != 2 && !*((_DWORD *)v25 + 3)) {
        return;
      }
      uint64_t v20 = *((void *)v25 + 2);
      if ((v20 & 4) == 0) {
        return;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        return;
      }
    }
    uint64_t v26 = &v25;
    sub_1CC5FA668(v21 + 16, &v26);
  }
}

uint64_t sub_1CBB1713C@<X0>(llvm::TargetInstrInfo *this@<X2>, uint64_t result@<X0>, void *a3@<X1>, uint64_t a4@<X8>)
{
  if (((a3[12] - a3[11]) & 0x7FFFFFFF8) == 0) {
    goto LABEL_30;
  }
  BOOL v6 = (void *)a3[7];
  if (a3 + 6 == v6) {
    goto LABEL_30;
  }
  uint64_t v8 = result;
  unint64_t v9 = a3[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v9 || (*(unsigned char *)v9 & 4) == 0)
  {
    while ((*(_WORD *)(v9 + 44) & 4) != 0)
      unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    int v10 = *(unsigned __int16 **)(v9 + 16);
    int v11 = *v10;
    BOOL v12 = (v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0;
    BOOL v13 = !v12 || v11 == 0;
    if (!v13 && (v10[4] & 0x10) == 0) {
      break;
    }
    if ((void *)v9 == v6) {
      goto LABEL_30;
    }
    unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v9 || (*(unsigned char *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 4) != 0)
        unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == 304)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v16 = 0;
    char v17 = 1;
    goto LABEL_32;
  }
  uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v9);
  if (!result)
  {
LABEL_30:
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_31;
  }
  int v18 = **(unsigned __int16 **)(v9 + 16);
  if (v9 == a3[7]) {
    goto LABEL_39;
  }
  unint64_t v19 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v19 || (*(unsigned char *)v19 & 4) == 0)
  {
    while ((*(_WORD *)(v19 + 44) & 4) != 0)
      unint64_t v19 = *(void *)v19 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t result = llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v19);
  if ((result & 1) == 0)
  {
LABEL_39:
    if (v18 != 305)
    {
      if (v18 == 303)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
        uint64_t v14 = 0;
        char v17 = 0;
        char v16 = 0;
        uint64_t v15 = *(void *)(result + 16);
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        char v17 = 0;
        char v16 = 1;
      }
      goto LABEL_32;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
    uint64_t v15 = *(void *)(result + 16);
    uint64_t v20 = (void *)a3[11];
    unint64_t v21 = (void *)a3[12];
    if (v20 == v21)
    {
LABEL_50:
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = a3[1];
      while (v14 != *v20 || *v20 == v15)
      {
        if (++v20 == v21) {
          goto LABEL_50;
        }
      }
    }
LABEL_31:
    char v17 = 0;
    char v16 = 0;
    goto LABEL_32;
  }
  char v17 = 0;
  uint64_t v14 = 0;
  char v16 = 1;
  uint64_t v15 = 0;
  if (**(_WORD **)(v19 + 16) == 305 && v18 == 303)
  {
    uint64_t v15 = *(void *)((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v19) + 16);
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 40))(v8, v9);
    char v17 = 0;
    char v16 = 0;
    uint64_t v14 = *(void *)(result + 16);
  }
LABEL_32:
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v14;
  *(unsigned char *)(a4 + 16) = v17;
  *(unsigned char *)(a4 + 17) = 0;
  *(unsigned char *)(a4 + 18) = v16;
  return result;
}

void sub_1CBB17428(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, llvm::TargetInstrInfo *this)
{
  unint64_t v8 = sub_1CBB19C08((uint64_t)a2, this);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  int v10 = (void *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_51:
    int v39 = 0;
LABEL_9:
    uint64_t v17 = 26304;
    if (a4) {
      uint64_t v17 = 26352;
    }
    uint64_t v18 = *((void *)this + 1) + v17;
    unint64_t v19 = (llvm::MachineFunction *)*((void *)a2 + 4);
    BOOL v40 = 0;
    goto LABEL_12;
  }
  unint64_t v11 = FirstTerminator;
  while (1)
  {
    unsigned int v12 = **(unsigned __int16 **)(v11 + 16);
    BOOL v13 = v12 > 0x17;
    int v14 = (1 << v12) & 0x83E000;
    if (v13 || v14 == 0) {
      break;
    }
    unint64_t v11 = *(void *)(v11 + 8);
    if ((llvm::MachineBasicBlock *)v11 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
      goto LABEL_51;
    }
  }
  char v16 = *(unsigned __int8 **)(v11 + 56);
  int v39 = v16;
  if (!v16) {
    goto LABEL_9;
  }
  llvm::MetadataTracking::track((uint64_t)&v39, v16, 2);
  uint64_t v37 = 26304;
  if (a4) {
    uint64_t v37 = 26352;
  }
  uint64_t v18 = *((void *)this + 1) + v37;
  unint64_t v19 = (llvm::MachineFunction *)*((void *)a2 + 4);
  BOOL v40 = v39;
  if (v39) {
    llvm::MetadataTracking::track((uint64_t)&v40, v39, 2);
  }
LABEL_12:
  uint64_t v20 = llvm::MachineFunction::CreateMachineInstr(v19, v18, &v40, 0);
  if (v40) {
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  }
  uint64_t v21 = *((void *)a2 + 5);
  *((void *)v20 + 3) = v21;
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v23 = *((unsigned int *)v20 + 10);
  if (v23)
  {
    uint64_t v27 = *((void *)v20 + 4);
    uint64_t v28 = *(void *)(v22 + 40);
    uint64_t v29 = 32 * v23;
    do
    {
      if (!*(unsigned char *)v27)
      {
        uint64_t v30 = *(unsigned int *)(v27 + 4);
        if ((int)v30 >= 0) {
          uint64_t v31 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v30);
        }
        else {
          uint64_t v31 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
        }
        uint64_t v32 = *v31;
        if (*v31)
        {
          uint64_t v33 = *(void *)(v32 + 16);
          *(void *)(v32 + 16) = v27;
          *(void *)(v27 + 16) = v33;
          if (*(unsigned char *)(v27 + 3))
          {
            *(void *)(v27 + 24) = v32;
          }
          else
          {
            *(void *)(v27 + 24) = 0;
            uint64_t v31 = (uint64_t *)(v33 + 24);
          }
        }
        else
        {
          *(void *)(v27 + 16) = v27;
          *(void *)(v27 + 24) = 0;
        }
        *uint64_t v31 = v27;
      }
      v27 += 32;
      v29 -= 32;
    }
    while (v29);
  }
  uint64_t v24 = *(void *)(v22 + 728);
  if (v24) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, v20);
  }
  unint64_t v25 = *v10 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = v25 | *(void *)v20 & 7;
  *((void *)v20 + 1) = v10;
  *(void *)(v25 + 8) = v20;
  void *v10 = *v10 & 7 | (unint64_t)v20;
  LODWORD(v40) = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v40);
  int v26 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  LODWORD(v40) = 0;
  HIDWORD(v40) = v26;
  uint64_t v43 = 0;
  llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v40);
  LODWORD(v40) = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 1;
  llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v40);
  if (v39)
  {
    int v34 = *v39;
    if ((v34 - 4) > 0x1E)
    {
      if ((v34 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v39;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v34 - 3) < 0xFFFFFFFE)
      {
        if (v34 == 3) {
          *((void *)v39 + 1) = 0;
        }
        return;
      }
      unint64_t v36 = (unint64_t)(v38 + 8);
    }
    else
    {
      if ((v39[1] & 0x7F) != 2 && !*((_DWORD *)v39 + 3)) {
        return;
      }
      uint64_t v35 = *((void *)v39 + 2);
      if ((v35 & 4) == 0) {
        return;
      }
      unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v36) {
        return;
      }
    }
    BOOL v40 = (unsigned __int8 *)&v39;
    sub_1CC5FA668(v36 + 16, &v40);
  }
}

void sub_1CBB17734(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_1CBBFE62C(a2);
  BOOL v6 = a2 + 6;
  uint64_t v7 = a2[7];
  if (a2 + 6 == (void *)v7)
  {
LABEL_34:
    uint64_t v21 = 0;
LABEL_9:
    uint64_t v14 = *(void *)(a4 + 8) + 26016;
    uint64_t v15 = (llvm::MachineFunction *)a2[4];
    uint64_t v22 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = a2[7];
  while (1)
  {
    unsigned int v9 = **(unsigned __int16 **)(v8 + 16);
    BOOL v10 = v9 > 0x17;
    int v11 = (1 << v9) & 0x83E000;
    if (v10 || v11 == 0) {
      break;
    }
    uint64_t v8 = *(void *)(v8 + 8);
    if ((void *)v8 == v6) {
      goto LABEL_34;
    }
  }
  BOOL v13 = *(unsigned __int8 **)(v8 + 56);
  uint64_t v21 = v13;
  if (!v13) {
    goto LABEL_9;
  }
  llvm::MetadataTracking::track((uint64_t)&v21, v13, 2);
  uint64_t v14 = *(void *)(a4 + 8) + 26016;
  uint64_t v15 = (llvm::MachineFunction *)a2[4];
  uint64_t v22 = (uint64_t)v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&v22, v21, 2);
  }
LABEL_10:
  uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v15, v14, (unsigned __int8 **)&v22, 0);
  if (v22) {
    llvm::MetadataTracking::untrack((uint64_t)&v22, (unsigned __int8 *)v22);
  }
  if (v6 != (void *)v7 && (*(_WORD *)(v7 + 44) & 4) != 0) {
    *((_WORD *)MachineInstr + 22) |= 0xCu;
  }
  sub_1CC31973C(a2 + 5, (uint64_t *)v7, (uint64_t)MachineInstr);
  LODWORD(v22) = 1;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v22);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x200000000;
  uint64_t v25 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v22);
  LODWORD(v22) = 1;
  uint64_t v23 = 0;
  uint64_t v24 = 1;
  llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v22);
  if (v21)
  {
    int v17 = *v21;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v20 = v21;
      }
      else {
        uint64_t v20 = 0;
      }
      if ((v17 - 3) < 0xFFFFFFFE)
      {
        if (v17 == 3) {
          *((void *)v21 + 1) = 0;
        }
        return;
      }
      unint64_t v19 = (unint64_t)(v20 + 8);
    }
    else
    {
      if ((v21[1] & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
        return;
      }
      uint64_t v18 = *((void *)v21 + 2);
      if ((v18 & 4) == 0) {
        return;
      }
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v19) {
        return;
      }
    }
    uint64_t v22 = (uint64_t)&v21;
    sub_1CC5FA668(v19 + 16, &v22);
  }
}

void sub_1CBB17954(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10, char a11, llvm::TargetInstrInfo *a12)
{
  unint64_t v82 = sub_1CBB19C08((uint64_t)a2, a12);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  unint64_t v19 = (unint64_t *)FirstTerminator;
  uint64_t v20 = (unint64_t *)((char *)a2 + 48);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_124:
    int v84 = 0;
  }
  else
  {
    unint64_t v21 = FirstTerminator;
    while (1)
    {
      unsigned int v22 = **(unsigned __int16 **)(v21 + 16);
      BOOL v23 = v22 > 0x17;
      int v24 = (1 << v22) & 0x83E000;
      if (v23 || v24 == 0) {
        break;
      }
      unint64_t v21 = *(void *)(v21 + 8);
      if ((unint64_t *)v21 == v20) {
        goto LABEL_124;
      }
    }
    int v26 = *(unsigned __int8 **)(v21 + 56);
    int v84 = v26;
    if (v26) {
      llvm::MetadataTracking::track((uint64_t)&v84, v26, 2);
    }
  }
  if ((a7 & 1) != 0 || (a11 & 1) != 0 || a9)
  {
    if (!a7 || (a5 & 1) != 0 || a9) && ((a9 & ~(_BYTE)a5 & 1) != 0 || (a7))
    {
      sub_1CBB19D34(*(_DWORD *)(*(void *)(v82 + 32) + 4), v19, (uint64_t)a2, a8, a10, a5, a4, (uint64_t)a12);
    }
    else
    {
      if (a5) {
        uint64_t v42 = a10;
      }
      else {
        uint64_t v42 = a8;
      }
      sub_1CBAECAFC((uint64_t)a12, (uint64_t)a2, v19, v42, a4, 1, 0, &v84, 0);
    }
  }
  if (a6)
  {
    if (v20 == v19)
    {
LABEL_128:
      unint64_t v83 = 0;
    }
    else
    {
      uint64_t v43 = v19;
      while (1)
      {
        unsigned int v44 = *(unsigned __int16 *)v43[2];
        BOOL v23 = v44 > 0x17;
        int v45 = (1 << v44) & 0x83E000;
        if (v23 || v45 == 0) {
          break;
        }
        uint64_t v43 = (unint64_t *)v43[1];
        if (v43 == v20) {
          goto LABEL_128;
        }
      }
      BOOL v47 = (unsigned __int8 *)v43[7];
      unint64_t v83 = v47;
      if (v47)
      {
        llvm::MetadataTracking::track((uint64_t)&v83, v47, 2);
        uint64_t v81 = 25968;
        if (a5) {
          uint64_t v81 = 25920;
        }
        uint64_t v49 = *((void *)a12 + 1) + v81;
        unsigned int v50 = (llvm::MachineFunction *)*((void *)a2 + 4);
        uint64_t v85 = (unsigned __int8 **)v83;
        if (v83) {
          llvm::MetadataTracking::track((uint64_t)&v85, v83, 2);
        }
        goto LABEL_53;
      }
    }
    uint64_t v48 = 25968;
    if (a5) {
      uint64_t v48 = 25920;
    }
    uint64_t v49 = *((void *)a12 + 1) + v48;
    unsigned int v50 = (llvm::MachineFunction *)*((void *)a2 + 4);
    uint64_t v85 = 0;
LABEL_53:
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v50, v49, (unsigned __int8 **)&v85, 0);
    if (v85) {
      llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
    }
    uint64_t v52 = *((void *)a2 + 5);
    *((void *)MachineInstr + 3) = v52;
    uint64_t v53 = *(void *)(v52 + 32);
    uint64_t v54 = *((unsigned int *)MachineInstr + 10);
    if (v54)
    {
      uint64_t v74 = *((void *)MachineInstr + 4);
      uint64_t v75 = *(void *)(v53 + 40);
      uint64_t v76 = 32 * v54;
      do
      {
        if (!*(unsigned char *)v74)
        {
          uint64_t v77 = *(unsigned int *)(v74 + 4);
          if ((int)v77 >= 0) {
            uint64_t v78 = (uint64_t *)(*(void *)(v75 + 272) + 8 * v77);
          }
          else {
            uint64_t v78 = (uint64_t *)(*(void *)(v75 + 24) + 16 * (v77 & 0x7FFFFFFF) + 8);
          }
          uint64_t v79 = *v78;
          if (*v78)
          {
            uint64_t v80 = *(void *)(v79 + 16);
            *(void *)(v79 + 16) = v74;
            *(void *)(v74 + 16) = v80;
            if (*(unsigned char *)(v74 + 3))
            {
              *(void *)(v74 + 24) = v79;
            }
            else
            {
              *(void *)(v74 + 24) = 0;
              uint64_t v78 = (uint64_t *)(v80 + 24);
            }
          }
          else
          {
            *(void *)(v74 + 16) = v74;
            *(void *)(v74 + 24) = 0;
          }
          *uint64_t v78 = v74;
        }
        v74 += 32;
        v76 -= 32;
      }
      while (v76);
    }
    uint64_t v55 = *(void *)(v53 + 728);
    if (v55) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, MachineInstr);
    }
    unint64_t v56 = *v19 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v56 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v19;
    *(void *)(v56 + 8) = MachineInstr;
    *unint64_t v19 = *v19 & 7 | (unint64_t)MachineInstr;
    LODWORD(v85) = 1;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v50, (const llvm::MachineOperand *)&v85);
    int v57 = *(_DWORD *)(*(void *)(v82 + 32) + 4);
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    LODWORD(v85) = 0;
    HIDWORD(v85) = v57;
    uint64_t v88 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v50, (const llvm::MachineOperand *)&v85);
    LODWORD(v85) = 1;
    uint64_t v86 = 0;
    uint64_t v87 = (a6 + 2);
    llvm::MachineInstr::addOperand(MachineInstr, v50, (const llvm::MachineOperand *)&v85);
    if (v83) {
      llvm::MetadataTracking::untrack((uint64_t)&v83, v83);
    }
    goto LABEL_31;
  }
  if (v20 == v19)
  {
LABEL_126:
    unint64_t v83 = 0;
LABEL_22:
    uint64_t v32 = 26160;
    if (a5) {
      uint64_t v32 = 26208;
    }
    uint64_t v33 = *((void *)a12 + 1) + v32;
    int v34 = (llvm::MachineFunction *)*((void *)a2 + 4);
    uint64_t v85 = 0;
    goto LABEL_25;
  }
  uint64_t v27 = v19;
  while (1)
  {
    unsigned int v28 = *(unsigned __int16 *)v27[2];
    BOOL v23 = v28 > 0x17;
    int v29 = (1 << v28) & 0x83E000;
    if (v23 || v29 == 0) {
      break;
    }
    uint64_t v27 = (unint64_t *)v27[1];
    if (v27 == v20) {
      goto LABEL_126;
    }
  }
  uint64_t v31 = (unsigned __int8 *)v27[7];
  unint64_t v83 = v31;
  if (!v31) {
    goto LABEL_22;
  }
  llvm::MetadataTracking::track((uint64_t)&v83, v31, 2);
  uint64_t v65 = 26160;
  if (a5) {
    uint64_t v65 = 26208;
  }
  uint64_t v33 = *((void *)a12 + 1) + v65;
  int v34 = (llvm::MachineFunction *)*((void *)a2 + 4);
  uint64_t v85 = (unsigned __int8 **)v83;
  if (v83) {
    llvm::MetadataTracking::track((uint64_t)&v85, v83, 2);
  }
LABEL_25:
  uint64_t v35 = llvm::MachineFunction::CreateMachineInstr(v34, v33, (unsigned __int8 **)&v85, 0);
  if (v85) {
    llvm::MetadataTracking::untrack((uint64_t)&v85, (unsigned __int8 *)v85);
  }
  uint64_t v36 = *((void *)a2 + 5);
  *((void *)v35 + 3) = v36;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *((unsigned int *)v35 + 10);
  if (v38)
  {
    uint64_t v58 = *((void *)v35 + 4);
    uint64_t v59 = *(void *)(v37 + 40);
    uint64_t v60 = 32 * v38;
    do
    {
      if (!*(unsigned char *)v58)
      {
        uint64_t v61 = *(unsigned int *)(v58 + 4);
        if ((int)v61 >= 0) {
          uint64_t v62 = (uint64_t *)(*(void *)(v59 + 272) + 8 * v61);
        }
        else {
          uint64_t v62 = (uint64_t *)(*(void *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
        }
        uint64_t v63 = *v62;
        if (*v62)
        {
          uint64_t v64 = *(void *)(v63 + 16);
          *(void *)(v63 + 16) = v58;
          *(void *)(v58 + 16) = v64;
          if (*(unsigned char *)(v58 + 3))
          {
            *(void *)(v58 + 24) = v63;
          }
          else
          {
            *(void *)(v58 + 24) = 0;
            uint64_t v62 = (uint64_t *)(v64 + 24);
          }
        }
        else
        {
          *(void *)(v58 + 16) = v58;
          *(void *)(v58 + 24) = 0;
        }
        uint64_t *v62 = v58;
      }
      v58 += 32;
      v60 -= 32;
    }
    while (v60);
  }
  uint64_t v39 = *(void *)(v37 + 728);
  if (v39) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v39 + 24))(v39, v35);
  }
  unint64_t v40 = *v19 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v35 = v40 | *(void *)v35 & 7;
  *((void *)v35 + 1) = v19;
  *(void *)(v40 + 8) = v35;
  *unint64_t v19 = *v19 & 7 | (unint64_t)v35;
  LODWORD(v85) = 1;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v85);
  int v41 = *(_DWORD *)(*(void *)(v82 + 32) + 4);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  LODWORD(v85) = 0;
  HIDWORD(v85) = v41;
  uint64_t v88 = 0;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v85);
  LODWORD(v85) = 1;
  uint64_t v86 = 0;
  uint64_t v87 = 2;
  llvm::MachineInstr::addOperand(v35, v34, (const llvm::MachineOperand *)&v85);
  if (v83)
  {
    int v69 = *v83;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v73 = v83;
      }
      else {
        uint64_t v73 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *((void *)v83 + 1) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v71 = (unint64_t)(v73 + 8);
    }
    else
    {
      if ((v83[1] & 0x7F) != 2 && !*((_DWORD *)v83 + 3)) {
        goto LABEL_31;
      }
      uint64_t v70 = *((void *)v83 + 2);
      if ((v70 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_31;
      }
    }
    uint64_t v85 = &v83;
    sub_1CC5FA668(v71 + 16, &v85);
  }
LABEL_31:
  if (!v84) {
    return;
  }
  int v66 = *v84;
  if ((v66 - 4) > 0x1E)
  {
    if ((v66 - 3) >= 0xFFFFFFFE) {
      uint64_t v72 = v84;
    }
    else {
      uint64_t v72 = 0;
    }
    if ((v66 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v68 = (unint64_t)(v72 + 8);
LABEL_94:
      uint64_t v85 = &v84;
      sub_1CC5FA668(v68 + 16, &v85);
      return;
    }
    if (v66 == 3) {
      *((void *)v84 + 1) = 0;
    }
  }
  else if ((v84[1] & 0x7F) == 2 || *((_DWORD *)v84 + 3))
  {
    uint64_t v67 = *((void *)v84 + 2);
    if ((v67 & 4) != 0)
    {
      unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      if (v68) {
        goto LABEL_94;
      }
    }
  }
}

void sub_1CBB18040(int a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, char a12, char a13, llvm::TargetInstrInfo *a14)
{
  unint64_t v20 = sub_1CBB19C08((uint64_t)a2, a14);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  unsigned int v22 = (unint64_t *)FirstTerminator;
  BOOL v23 = (unint64_t *)((char *)a2 + 48);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_148:
    uint64_t v104 = 0;
  }
  else
  {
    unint64_t v24 = FirstTerminator;
    while (1)
    {
      unsigned int v25 = **(unsigned __int16 **)(v24 + 16);
      BOOL v26 = v25 > 0x17;
      int v27 = (1 << v25) & 0x83E000;
      if (v26 || v27 == 0) {
        break;
      }
      unint64_t v24 = *(void *)(v24 + 8);
      if ((unint64_t *)v24 == v23) {
        goto LABEL_148;
      }
    }
    int v29 = *(unsigned __int8 **)(v24 + 56);
    uint64_t v104 = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v104, v29, 2);
    }
  }
  if (!v20) {
    goto LABEL_33;
  }
  if ((a8 & 1) != 0 || (a12 & 1) != 0 || a10)
  {
    if (!a8 || (a6 & 1) != 0 || a10) && ((a10 & ~(_BYTE)a6 & 1) != 0 || (a8))
    {
      sub_1CBB19D34(*(_DWORD *)(*(void *)(v20 + 32) + 4), v22, (uint64_t)a2, a9, a11, a6, a5, (uint64_t)a14);
    }
    else
    {
      if (a6) {
        uint64_t v92 = a11;
      }
      else {
        uint64_t v92 = a9;
      }
      sub_1CBAECAFC((uint64_t)a14, (uint64_t)a2, v22, v92, a5, 1, 0, &v104, 0);
    }
  }
  if (!a7)
  {
    if (v23 == v22)
    {
LABEL_150:
      uint64_t v103 = 0;
    }
    else
    {
      uint64_t v30 = v22;
      while (1)
      {
        unsigned int v31 = *(unsigned __int16 *)v30[2];
        BOOL v26 = v31 > 0x17;
        int v32 = (1 << v31) & 0x83E000;
        if (v26 || v32 == 0) {
          break;
        }
        uint64_t v30 = (unint64_t *)v30[1];
        if (v30 == v23) {
          goto LABEL_150;
        }
      }
      int v34 = (unsigned __int8 *)v30[7];
      uint64_t v103 = v34;
      if (v34)
      {
        llvm::MetadataTracking::track((uint64_t)&v103, v34, 2);
        uint64_t v91 = 26160;
        if (a6) {
          uint64_t v91 = 26208;
        }
        uint64_t v36 = *((void *)a14 + 1) + v91;
        uint64_t v37 = (llvm::MachineFunction *)*((void *)a2 + 4);
        uint64_t v105 = (unsigned __int8 **)v103;
        if (v103) {
          llvm::MetadataTracking::track((uint64_t)&v105, v103, 2);
        }
        goto LABEL_26;
      }
    }
    uint64_t v35 = 26160;
    if (a6) {
      uint64_t v35 = 26208;
    }
    uint64_t v36 = *((void *)a14 + 1) + v35;
    uint64_t v37 = (llvm::MachineFunction *)*((void *)a2 + 4);
    uint64_t v105 = 0;
LABEL_26:
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v37, v36, (unsigned __int8 **)&v105, 0);
    if (v105) {
      llvm::MetadataTracking::untrack((uint64_t)&v105, (unsigned __int8 *)v105);
    }
    uint64_t v39 = *((void *)a2 + 5);
    *((void *)MachineInstr + 3) = v39;
    uint64_t v40 = *(void *)(v39 + 32);
    uint64_t v41 = *((unsigned int *)MachineInstr + 10);
    if (v41)
    {
      uint64_t v62 = *((void *)MachineInstr + 4);
      uint64_t v63 = *(void *)(v40 + 40);
      uint64_t v64 = 32 * v41;
      do
      {
        if (!*(unsigned char *)v62)
        {
          uint64_t v65 = *(unsigned int *)(v62 + 4);
          if ((int)v65 >= 0) {
            int v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
          }
          else {
            int v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
          }
          uint64_t v67 = *v66;
          if (*v66)
          {
            uint64_t v68 = *(void *)(v67 + 16);
            *(void *)(v67 + 16) = v62;
            *(void *)(v62 + 16) = v68;
            if (*(unsigned char *)(v62 + 3))
            {
              *(void *)(v62 + 24) = v67;
            }
            else
            {
              *(void *)(v62 + 24) = 0;
              int v66 = (uint64_t *)(v68 + 24);
            }
          }
          else
          {
            *(void *)(v62 + 16) = v62;
            *(void *)(v62 + 24) = 0;
          }
          *int v66 = v62;
        }
        v62 += 32;
        v64 -= 32;
      }
      while (v64);
    }
    uint64_t v42 = *(void *)(v40 + 728);
    if (v42) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v42 + 24))(v42, MachineInstr);
    }
    unint64_t v43 = *v22 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v43 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v22;
    *(void *)(v43 + 8) = MachineInstr;
    *unsigned int v22 = *v22 & 7 | (unint64_t)MachineInstr;
    LODWORD(v105) = 1;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v37, (const llvm::MachineOperand *)&v105);
    int v44 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    LODWORD(v105) = 0;
    HIDWORD(v105) = v44;
    uint64_t v108 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v37, (const llvm::MachineOperand *)&v105);
    LODWORD(v105) = 1;
    uint64_t v106 = 0;
    uint64_t v107 = 2;
    int v45 = MachineInstr;
    int v46 = v37;
    goto LABEL_32;
  }
  if (v23 == v22)
  {
LABEL_152:
    uint64_t v103 = 0;
  }
  else
  {
    uint64_t v75 = v22;
    while (1)
    {
      unsigned int v76 = *(unsigned __int16 *)v75[2];
      BOOL v26 = v76 > 0x17;
      int v77 = (1 << v76) & 0x83E000;
      if (v26 || v77 == 0) {
        break;
      }
      uint64_t v75 = (unint64_t *)v75[1];
      if (v75 == v23) {
        goto LABEL_152;
      }
    }
    uint64_t v79 = (unsigned __int8 *)v75[7];
    uint64_t v103 = v79;
    if (v79)
    {
      llvm::MetadataTracking::track((uint64_t)&v103, v79, 2);
      uint64_t v102 = 25968;
      if (a6) {
        uint64_t v102 = 25920;
      }
      uint64_t v81 = *((void *)a14 + 1) + v102;
      unint64_t v82 = (llvm::MachineFunction *)*((void *)a2 + 4);
      uint64_t v105 = (unsigned __int8 **)v103;
      if (v103) {
        llvm::MetadataTracking::track((uint64_t)&v105, v103, 2);
      }
      goto LABEL_96;
    }
  }
  uint64_t v80 = 25968;
  if (a6) {
    uint64_t v80 = 25920;
  }
  uint64_t v81 = *((void *)a14 + 1) + v80;
  unint64_t v82 = (llvm::MachineFunction *)*((void *)a2 + 4);
  uint64_t v105 = 0;
LABEL_96:
  unint64_t v83 = llvm::MachineFunction::CreateMachineInstr(v82, v81, (unsigned __int8 **)&v105, 0);
  if (v105) {
    llvm::MetadataTracking::untrack((uint64_t)&v105, (unsigned __int8 *)v105);
  }
  uint64_t v84 = *((void *)a2 + 5);
  *((void *)v83 + 3) = v84;
  uint64_t v85 = *(void *)(v84 + 32);
  uint64_t v86 = *((unsigned int *)v83 + 10);
  if (v86)
  {
    uint64_t v95 = *((void *)v83 + 4);
    uint64_t v96 = *(void *)(v85 + 40);
    uint64_t v97 = 32 * v86;
    do
    {
      if (!*(unsigned char *)v95)
      {
        uint64_t v98 = *(unsigned int *)(v95 + 4);
        if ((int)v98 >= 0) {
          int v99 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v98);
        }
        else {
          int v99 = (uint64_t *)(*(void *)(v96 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
        }
        uint64_t v100 = *v99;
        if (*v99)
        {
          uint64_t v101 = *(void *)(v100 + 16);
          *(void *)(v100 + 16) = v95;
          *(void *)(v95 + 16) = v101;
          if (*(unsigned char *)(v95 + 3))
          {
            *(void *)(v95 + 24) = v100;
          }
          else
          {
            *(void *)(v95 + 24) = 0;
            int v99 = (uint64_t *)(v101 + 24);
          }
        }
        else
        {
          *(void *)(v95 + 16) = v95;
          *(void *)(v95 + 24) = 0;
        }
        *int v99 = v95;
      }
      v95 += 32;
      v97 -= 32;
    }
    while (v97);
  }
  uint64_t v87 = (a7 + 2);
  uint64_t v88 = *(void *)(v85 + 728);
  if (v88) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v88 + 24))(v88, v83);
  }
  unint64_t v89 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v83 = v89 | *(void *)v83 & 7;
  *((void *)v83 + 1) = v22;
  *(void *)(v89 + 8) = v83;
  *unsigned int v22 = *v22 & 7 | (unint64_t)v83;
  LODWORD(v105) = 1;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  llvm::MachineInstr::addOperand(v83, v82, (const llvm::MachineOperand *)&v105);
  int v90 = *(_DWORD *)(*(void *)(v20 + 32) + 4);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  LODWORD(v105) = 0;
  HIDWORD(v105) = v90;
  uint64_t v108 = 0;
  llvm::MachineInstr::addOperand(v83, v82, (const llvm::MachineOperand *)&v105);
  LODWORD(v105) = 1;
  uint64_t v106 = 0;
  uint64_t v107 = v87;
  int v45 = v83;
  int v46 = v82;
LABEL_32:
  llvm::MachineInstr::addOperand(v45, v46, (const llvm::MachineOperand *)&v105);
  if (!v103) {
    goto LABEL_33;
  }
  int v72 = *v103;
  if ((v72 - 4) > 0x1E)
  {
    if ((v72 - 3) >= 0xFFFFFFFE) {
      uint64_t v94 = v103;
    }
    else {
      uint64_t v94 = 0;
    }
    if ((v72 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v74 = (unint64_t)(v94 + 8);
LABEL_121:
      uint64_t v105 = &v103;
      sub_1CC5FA668(v74 + 16, &v105);
      goto LABEL_33;
    }
    if (v72 == 3) {
      *((void *)v103 + 1) = 0;
    }
  }
  else if ((v103[1] & 0x7F) == 2 || *((_DWORD *)v103 + 3))
  {
    uint64_t v73 = *((void *)v103 + 2);
    if ((v73 & 4) != 0)
    {
      unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
      if (v74) {
        goto LABEL_121;
      }
    }
  }
LABEL_33:
  if (a5 && (a13 & 1) == 0) {
    sub_1CBAECAFC((uint64_t)a14, (uint64_t)a2, v22, 0, a5, 1, 0, &v104, 0);
  }
  uint64_t v47 = *((void *)a14 + 1) + 20256;
  uint64_t v48 = (llvm::MachineFunction *)*((void *)a2 + 4);
  uint64_t v105 = (unsigned __int8 **)v104;
  if (v104) {
    llvm::MetadataTracking::track((uint64_t)&v105, v104, 2);
  }
  uint64_t v49 = llvm::MachineFunction::CreateMachineInstr(v48, v47, (unsigned __int8 **)&v105, 0);
  if (v105) {
    llvm::MetadataTracking::untrack((uint64_t)&v105, (unsigned __int8 *)v105);
  }
  uint64_t v50 = *((void *)a2 + 5);
  *((void *)v49 + 3) = v50;
  uint64_t v51 = *(void *)(v50 + 32);
  uint64_t v52 = *((unsigned int *)v49 + 10);
  if (v52)
  {
    uint64_t v55 = *((void *)v49 + 4);
    uint64_t v56 = *(void *)(v51 + 40);
    uint64_t v57 = 32 * v52;
    do
    {
      if (!*(unsigned char *)v55)
      {
        uint64_t v58 = *(unsigned int *)(v55 + 4);
        if ((int)v58 >= 0) {
          uint64_t v59 = (uint64_t *)(*(void *)(v56 + 272) + 8 * v58);
        }
        else {
          uint64_t v59 = (uint64_t *)(*(void *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
        }
        uint64_t v60 = *v59;
        if (*v59)
        {
          uint64_t v61 = *(void *)(v60 + 16);
          *(void *)(v60 + 16) = v55;
          *(void *)(v55 + 16) = v61;
          if (*(unsigned char *)(v55 + 3))
          {
            *(void *)(v55 + 24) = v60;
          }
          else
          {
            *(void *)(v55 + 24) = 0;
            uint64_t v59 = (uint64_t *)(v61 + 24);
          }
        }
        else
        {
          *(void *)(v55 + 16) = v55;
          *(void *)(v55 + 24) = 0;
        }
        *uint64_t v59 = v55;
      }
      v55 += 32;
      v57 -= 32;
    }
    while (v57);
  }
  uint64_t v53 = *(void *)(v51 + 728);
  if (v53) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v53 + 24))(v53, v49);
  }
  unint64_t v54 = *v22 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v49 = v54 | *(void *)v49 & 7;
  *((void *)v49 + 1) = v22;
  *(void *)(v54 + 8) = v49;
  *unsigned int v22 = *v22 & 7 | (unint64_t)v49;
  LODWORD(v105) = 1;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v105);
  uint64_t v106 = 0;
  uint64_t v107 = a3;
  LODWORD(v105) = 4;
  llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v105);
  if (v104)
  {
    int v69 = *v104;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        int v93 = v104;
      }
      else {
        int v93 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *((void *)v104 + 1) = 0;
        }
        return;
      }
      unint64_t v71 = (unint64_t)(v93 + 8);
    }
    else
    {
      if ((v104[1] & 0x7F) != 2 && !*((_DWORD *)v104 + 3)) {
        return;
      }
      uint64_t v70 = *((void *)v104 + 2);
      if ((v70 & 4) == 0) {
        return;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        return;
      }
    }
    uint64_t v105 = &v104;
    sub_1CC5FA668(v71 + 16, &v105);
  }
}

void sub_1CBB188C8(int a1, llvm::MachineBasicBlock *this, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *((void *)this + 7);
  if ((llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v10)
  {
LABEL_32:
    unint64_t v21 = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v11 = **(unsigned __int16 **)(v10 + 16);
      BOOL v12 = v11 > 0x17;
      int v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0) {
        break;
      }
      uint64_t v10 = *(void *)(v10 + 8);
      if ((llvm::MachineBasicBlock *)v10 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_32;
      }
    }
    uint64_t v15 = *(unsigned __int8 **)(v10 + 56);
    unint64_t v21 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v21, v15, 2);
    }
  }
  if (a3 >= 2)
  {
    unsigned int v16 = a3 >> 1;
    do
    {
      sub_1CBB1A1F0(this, 0, &v21, a5, a6, 2);
      --v16;
    }
    while (v16);
  }
  if (a3) {
    sub_1CBB1A1F0(this, 0, &v21, a5, a6, 1);
  }
  if (v21)
  {
    int v17 = *v21;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        unint64_t v20 = v21;
      }
      else {
        unint64_t v20 = 0;
      }
      if ((v17 - 3) < 0xFFFFFFFE)
      {
        if (v17 == 3) {
          *((void *)v21 + 1) = 0;
        }
        return;
      }
      unint64_t v19 = (unint64_t)(v20 + 8);
    }
    else
    {
      if ((v21[1] & 0x7F) != 2 && !*((_DWORD *)v21 + 3)) {
        return;
      }
      uint64_t v18 = *((void *)v21 + 2);
      if ((v18 & 4) == 0) {
        return;
      }
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v19) {
        return;
      }
    }
    unsigned int v22 = &v21;
    sub_1CC5FA668(v19 + 16, &v22);
  }
}

void sub_1CBB18A48(int a1, llvm::MachineBasicBlock *this, uint64_t a3, int a4, uint64_t a5)
{
  if (!a4
    || (uint64_t v8 = *((void *)this + 7), (llvm::MachineBasicBlock *)((char *)this + 48) == (llvm::MachineBasicBlock *)v8))
  {
LABEL_27:
    uint64_t v18 = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v9 = **(unsigned __int16 **)(v8 + 16);
      BOOL v10 = v9 > 0x17;
      int v11 = (1 << v9) & 0x83E000;
      if (v10 || v11 == 0) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 8);
      if ((llvm::MachineBasicBlock *)v8 == (llvm::MachineBasicBlock *)((char *)this + 48)) {
        goto LABEL_27;
      }
    }
    int v13 = *(unsigned __int8 **)(v8 + 56);
    uint64_t v18 = v13;
    if (v13) {
      llvm::MetadataTracking::track((uint64_t)&v18, v13, 2);
    }
  }
  sub_1CBB1A1F0(this, 1, &v18, a5, a4, -1);
  if (v18)
  {
    int v14 = *v18;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) >= 0xFFFFFFFE) {
        int v17 = v18;
      }
      else {
        int v17 = 0;
      }
      if ((v14 - 3) < 0xFFFFFFFE)
      {
        if (v14 == 3) {
          *((void *)v18 + 1) = 0;
        }
        return;
      }
      unint64_t v16 = (unint64_t)(v17 + 8);
    }
    else
    {
      if ((v18[1] & 0x7F) != 2 && !*((_DWORD *)v18 + 3)) {
        return;
      }
      uint64_t v15 = *((void *)v18 + 2);
      if ((v15 & 4) == 0) {
        return;
      }
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (!v16) {
        return;
      }
    }
    unint64_t v19 = &v18;
    sub_1CC5FA668(v16 + 16, &v19);
  }
}

void sub_1CBB18B88(int a1, llvm::MachineFunction **this, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t FirstTerminator = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)this);
  unsigned int v9 = FirstTerminator;
  if (this + 6 == (llvm::MachineFunction **)FirstTerminator)
  {
LABEL_46:
    int v34 = 0;
  }
  else
  {
    BOOL v10 = FirstTerminator;
    while (1)
    {
      unsigned int v11 = **((unsigned __int16 **)v10 + 2);
      BOOL v12 = v11 > 0x17;
      int v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0) {
        break;
      }
      BOOL v10 = (llvm::MachineBasicBlock *)*((void *)v10 + 1);
      if (v10 == (llvm::MachineBasicBlock *)(this + 6)) {
        goto LABEL_46;
      }
    }
    uint64_t v15 = (unsigned __int8 *)*((void *)v10 + 7);
    int v34 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v34, v15, 2);
    }
  }
  if (a4
    || (int v24 = (*(unsigned __int16 *)(*(void *)this[4] + 18) >> 4) & 0x3FF) == 0
    || (v24 != 255 ? (BOOL v25 = v24 == 8) : (BOOL v25 = 1), v25))
  {
    uint64_t v33 = v34;
    if (v34) {
      llvm::MetadataTracking::track((uint64_t)&v33, v34, 2);
    }
    sub_1CBBFE62C(this);
    uint64_t v16 = *(void *)(a5 + 8) + 26304;
    int v17 = this[4];
    uint64_t v35 = (uint64_t)v33;
    if (v33) {
      llvm::MetadataTracking::track((uint64_t)&v35, v33, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v17, v16, (unsigned __int8 **)&v35, 0);
    if (v35) {
      llvm::MetadataTracking::untrack((uint64_t)&v35, (unsigned __int8 *)v35);
    }
    unint64_t v19 = this[5];
    *((void *)MachineInstr + 3) = v19;
    uint64_t v20 = *((void *)v19 + 4);
    uint64_t v21 = *((unsigned int *)MachineInstr + 10);
    if (v21)
    {
      uint64_t v26 = *((void *)MachineInstr + 4);
      uint64_t v27 = *(void *)(v20 + 40);
      uint64_t v28 = 32 * v21;
      do
      {
        if (!*(unsigned char *)v26)
        {
          uint64_t v29 = *(unsigned int *)(v26 + 4);
          if ((int)v29 >= 0) {
            uint64_t v30 = (uint64_t *)(*(void *)(v27 + 272) + 8 * v29);
          }
          else {
            uint64_t v30 = (uint64_t *)(*(void *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
          }
          uint64_t v31 = *v30;
          if (*v30)
          {
            uint64_t v32 = *(void *)(v31 + 16);
            *(void *)(v31 + 16) = v26;
            *(void *)(v26 + 16) = v32;
            if (*(unsigned char *)(v26 + 3))
            {
              *(void *)(v26 + 24) = v31;
            }
            else
            {
              *(void *)(v26 + 24) = 0;
              uint64_t v30 = (uint64_t *)(v32 + 24);
            }
          }
          else
          {
            *(void *)(v26 + 16) = v26;
            *(void *)(v26 + 24) = 0;
          }
          *uint64_t v30 = v26;
        }
        v26 += 32;
        v28 -= 32;
      }
      while (v28);
    }
    uint64_t v22 = *(void *)(v20 + 728);
    if (v22) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
    }
    unint64_t v23 = *v9 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v23 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v9;
    *(void *)(v23 + 8) = MachineInstr;
    *unsigned int v9 = *v9 & 7 | (unint64_t)MachineInstr;
    LODWORD(v35) = 1;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v35);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0x200000000;
    uint64_t v38 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v35);
    LODWORD(v35) = 1;
    uint64_t v36 = 0;
    uint64_t v37 = 2;
    llvm::MachineInstr::addOperand(MachineInstr, v17, (const llvm::MachineOperand *)&v35);
    if (v33) {
      llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
    }
  }
  if (v34) {
    llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  }
}

llvm::MachineInstr *sub_1CBB18E4C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v7 = 0;
  uint64_t v8 = a2[7];
  unsigned int v9 = a2;
  do
  {
    BOOL v10 = v9 + 6;
    for (uint64_t i = v9[7]; (void *)i != v10; uint64_t i = *(void *)(i + 8))
    {
      BOOL v12 = *(unsigned __int16 **)(i + 16);
      int v13 = *v12;
      if ((v13 - 9) <= 0x3C && ((1 << (v13 - 9)) & 0x1000000000000605) != 0
        || v13 == 0)
      {
        goto LABEL_19;
      }
      uint64_t v16 = *((void *)v12 + 1);
      if ((v16 & 0x10) != 0) {
        goto LABEL_19;
      }
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        unsigned int v34 = v7;
        uint64_t v35 = v9;
        BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(i, 1024, 1);
        unsigned int v9 = v35;
        unsigned int v7 = v34;
        if (hasPropertyInBundle) {
          goto LABEL_19;
        }
      }
      else if ((v16 & 0x400) != 0)
      {
        goto LABEL_19;
      }
      BOOL v18 = v7++ > 4;
      if (v18) {
        break;
      }
LABEL_19:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    if (++v7 > 5) {
      break;
    }
    unsigned int v9 = (void *)v9[1];
  }
  while (v9 != a3);
  if (v7 < 6) {
    return 0;
  }
  unint64_t v19 = a2 + 6;
  if (a2 + 6 == (void *)v8)
  {
LABEL_59:
    uint64_t v36 = 0;
    goto LABEL_33;
  }
  uint64_t v20 = v8;
  while (1)
  {
    unsigned int v21 = **(unsigned __int16 **)(v20 + 16);
    BOOL v18 = v21 > 0x17;
    int v22 = (1 << v21) & 0x83E000;
    if (v18 || v22 == 0) {
      break;
    }
    uint64_t v20 = *(void *)(v20 + 8);
    if ((void *)v20 == v19) {
      goto LABEL_59;
    }
  }
  int v24 = *(unsigned __int8 **)(v20 + 56);
  uint64_t v36 = v24;
  if (v24)
  {
    llvm::MetadataTracking::track((uint64_t)&v36, v24, 2);
    uint64_t v25 = *(void *)(a4 + 8) + 20448;
    uint64_t v26 = (llvm::MachineFunction *)a2[4];
    uint64_t v37 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v37, v36, 2);
    }
  }
  else
  {
LABEL_33:
    uint64_t v25 = *(void *)(a4 + 8) + 20448;
    uint64_t v26 = (llvm::MachineFunction *)a2[4];
    uint64_t v37 = 0;
  }
  uint64_t v27 = llvm::MachineFunction::CreateMachineInstr(v26, v25, &v37, 0);
  if (v37) {
    llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  }
  if (v19 != (void *)v8 && (*(_WORD *)(v8 + 44) & 4) != 0) {
    *((_WORD *)v27 + 22) |= 0xCu;
  }
  sub_1CC31973C(a2 + 5, (uint64_t *)v8, (uint64_t)v27);
  LODWORD(v37) = 1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v37);
  uint64_t v38 = 0;
  uint64_t v39 = a3;
  LODWORD(v37) = 4;
  llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v37);
  if (v36)
  {
    int v29 = *v36;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v32 = v36;
      }
      else {
        uint64_t v32 = 0;
      }
      if ((v29 - 3) < 0xFFFFFFFE)
      {
        if (v29 == 3) {
          *((void *)v36 + 1) = 0;
        }
        return v27;
      }
      unint64_t v31 = (unint64_t)(v32 + 8);
    }
    else
    {
      if ((v36[1] & 0x7F) != 2 && !*((_DWORD *)v36 + 3)) {
        return v27;
      }
      uint64_t v30 = *((void *)v36 + 2);
      if ((v30 & 4) == 0) {
        return v27;
      }
      unint64_t v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        return v27;
      }
    }
    uint64_t v37 = (unsigned __int8 *)&v36;
    sub_1CC5FA668(v31 + 16, &v37);
  }
  return v27;
}

uint64_t sub_1CBB1914C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t sub_1CBB19194(uint64_t a1)
{
  return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 16);
}

void sub_1CBB191D0(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = sub_1CBB19C08((uint64_t)a2, this);
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  int v14 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_50:
    uint64_t v42 = 0;
  }
  else
  {
    unint64_t v15 = FirstTerminator;
    while (1)
    {
      unsigned int v16 = **(unsigned __int16 **)(v15 + 16);
      BOOL v17 = v16 > 0x17;
      int v18 = (1 << v16) & 0x83E000;
      if (v17 || v18 == 0) {
        break;
      }
      unint64_t v15 = *(void *)(v15 + 8);
      if ((llvm::MachineBasicBlock *)v15 == (llvm::MachineBasicBlock *)((char *)a2 + 48)) {
        goto LABEL_50;
      }
    }
    uint64_t v20 = *(unsigned __int8 **)(v15 + 56);
    uint64_t v42 = v20;
    if (v20) {
      llvm::MetadataTracking::track((uint64_t)&v42, v20, 2);
    }
  }
  if (v12)
  {
    long long v44 = xmmword_1CDB16620;
    unsigned int v21 = sub_1CBE0418C(148, 4, &v44);
    int v22 = *(_DWORD *)(*(void *)(v12 + 32) + 4);
    uint64_t v23 = *((void *)this + 1) + 48 * v21;
    int v24 = (llvm::MachineFunction *)*((void *)a2 + 4);
    unint64_t v43 = v42;
    if (v42) {
      llvm::MetadataTracking::track((uint64_t)&v43, v42, 2);
    }
    uint64_t v25 = llvm::MachineFunction::CreateMachineInstr(v24, v23, &v43, 0);
    if (v43) {
      llvm::MetadataTracking::untrack((uint64_t)&v43, v43);
    }
    uint64_t v26 = *((void *)a2 + 5);
    *((void *)v25 + 3) = v26;
    uint64_t v27 = *(void *)(v26 + 32);
    uint64_t v28 = *((unsigned int *)v25 + 10);
    if (v28)
    {
      uint64_t v31 = *((void *)v25 + 4);
      uint64_t v32 = *(void *)(v27 + 40);
      uint64_t v33 = 32 * v28;
      do
      {
        if (!*(unsigned char *)v31)
        {
          uint64_t v34 = *(unsigned int *)(v31 + 4);
          if ((int)v34 >= 0) {
            uint64_t v35 = (uint64_t *)(*(void *)(v32 + 272) + 8 * v34);
          }
          else {
            uint64_t v35 = (uint64_t *)(*(void *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
          }
          uint64_t v36 = *v35;
          if (*v35)
          {
            uint64_t v37 = *(void *)(v36 + 16);
            *(void *)(v36 + 16) = v31;
            *(void *)(v31 + 16) = v37;
            if (*(unsigned char *)(v31 + 3))
            {
              *(void *)(v31 + 24) = v36;
            }
            else
            {
              *(void *)(v31 + 24) = 0;
              uint64_t v35 = (uint64_t *)(v37 + 24);
            }
          }
          else
          {
            *(void *)(v31 + 16) = v31;
            *(void *)(v31 + 24) = 0;
          }
          *uint64_t v35 = v31;
        }
        v31 += 32;
        v33 -= 32;
      }
      while (v33);
    }
    uint64_t v29 = *(void *)(v27 + 728);
    if (v29) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v29 + 24))(v29, v25);
    }
    unint64_t v30 = *v14 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v25 = v30 | *(void *)v25 & 7;
    *((void *)v25 + 1) = v14;
    *(void *)(v30 + 8) = v25;
    *int v14 = *v14 & 7 | (unint64_t)v25;
    *((void *)&v44 + 1) = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    LODWORD(v44) = 0x1000000;
    DWORD1(v44) = a4;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    uint64_t v45 = 0;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v44);
    *((void *)&v44 + 1) = 0;
    uint64_t v45 = 0;
    LODWORD(v44) = 0;
    DWORD1(v44) = v22;
    uint64_t v46 = 0;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    uint64_t v45 = a5;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v44);
    LODWORD(v44) = 1;
    *((void *)&v44 + 1) = 0;
    uint64_t v45 = a6;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v44);
  }
  else
  {
    sub_1CBAECAFC((uint64_t)this, (uint64_t)a2, v14, a5, a4, 1, 0, &v42, 0);
  }
  if (v42)
  {
    int v38 = *v42;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v41 = v42;
      }
      else {
        uint64_t v41 = 0;
      }
      if ((v38 - 3) < 0xFFFFFFFE)
      {
        if (v38 == 3) {
          *((void *)v42 + 1) = 0;
        }
        return;
      }
      unint64_t v40 = (unint64_t)(v41 + 8);
    }
    else
    {
      if ((v42[1] & 0x7F) != 2 && !*((_DWORD *)v42 + 3)) {
        return;
      }
      uint64_t v39 = *((void *)v42 + 2);
      if ((v39 & 4) == 0) {
        return;
      }
      unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
      if (!v40) {
        return;
      }
    }
    *(void *)&long long v44 = &v42;
    sub_1CC5FA668(v40 + 16, &v44);
  }
}

void sub_1CBB1957C(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  unint64_t v12 = (unint64_t *)a2[7];
  if (a2 + 6 == v12)
  {
LABEL_90:
    int v18 = 0;
    int v69 = 0;
  }
  else
  {
    uint64_t v13 = a2[7];
    while (1)
    {
      unsigned int v14 = **(unsigned __int16 **)(v13 + 16);
      BOOL v15 = v14 > 0x17;
      int v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0) {
        break;
      }
      uint64_t v13 = *(void *)(v13 + 8);
      if ((void *)v13 == a2 + 6) {
        goto LABEL_90;
      }
    }
    int v18 = *(unsigned __int8 **)(v13 + 56);
    int v69 = v18;
    if (v18)
    {
      llvm::MetadataTracking::track((uint64_t)&v69, v18, 2);
      int v18 = v69;
    }
  }
  if (a6)
  {
    uint64_t v50 = *(void *)(a7 + 8) + 26016;
    uint64_t v51 = (llvm::MachineFunction *)a2[4];
    uint64_t v71 = (uint64_t)v18;
    if (v18) {
      llvm::MetadataTracking::track((uint64_t)&v71, v18, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v51, v50, (unsigned __int8 **)&v71, 0);
    if (v71) {
      llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
    }
    uint64_t v53 = a2[5];
    *((void *)MachineInstr + 3) = v53;
    uint64_t v54 = *(void *)(v53 + 32);
    uint64_t v55 = *((unsigned int *)MachineInstr + 10);
    if (v55)
    {
      uint64_t v62 = *((void *)MachineInstr + 4);
      uint64_t v63 = *(void *)(v54 + 40);
      uint64_t v64 = 32 * v55;
      do
      {
        if (!*(unsigned char *)v62)
        {
          uint64_t v65 = *(unsigned int *)(v62 + 4);
          if ((int)v65 >= 0) {
            int v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
          }
          else {
            int v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
          }
          uint64_t v67 = *v66;
          if (*v66)
          {
            uint64_t v68 = *(void *)(v67 + 16);
            *(void *)(v67 + 16) = v62;
            *(void *)(v62 + 16) = v68;
            if (*(unsigned char *)(v62 + 3))
            {
              *(void *)(v62 + 24) = v67;
            }
            else
            {
              *(void *)(v62 + 24) = 0;
              int v66 = (uint64_t *)(v68 + 24);
            }
          }
          else
          {
            *(void *)(v62 + 16) = v62;
            *(void *)(v62 + 24) = 0;
          }
          *int v66 = v62;
        }
        v62 += 32;
        v64 -= 32;
      }
      while (v64);
    }
    uint64_t v56 = *(void *)(v54 + 728);
    if (v56) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, MachineInstr);
    }
    unint64_t v57 = *v12 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v57 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v12;
    *(void *)(v57 + 8) = MachineInstr;
    *unint64_t v12 = *v12 & 7 | (unint64_t)MachineInstr;
    LODWORD(v71) = 1;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v51, (const llvm::MachineOperand *)&v71);
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0x200000000;
    uint64_t v74 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v51, (const llvm::MachineOperand *)&v71);
    LODWORD(v71) = 1;
    uint64_t v72 = 0;
    uint64_t v73 = 1;
    llvm::MachineInstr::addOperand(MachineInstr, v51, (const llvm::MachineOperand *)&v71);
    unsigned int v19 = 545;
    int v18 = v69;
  }
  else
  {
    unsigned int v19 = 548;
  }
  uint64_t v20 = *(void *)(a7 + 8) + 215904;
  unsigned int v21 = (llvm::MachineFunction *)a2[4];
  uint64_t v70 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v70, v18, 2);
  }
  int v22 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v70, 0);
  if (v70) {
    llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
  }
  uint64_t v23 = a2[5];
  *((void *)v22 + 3) = v23;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *((unsigned int *)v22 + 10);
  if (v25)
  {
    uint64_t v36 = *((void *)v22 + 4);
    uint64_t v37 = *(void *)(v24 + 40);
    uint64_t v38 = 32 * v25;
    do
    {
      if (!*(unsigned char *)v36)
      {
        uint64_t v39 = *(unsigned int *)(v36 + 4);
        if ((int)v39 >= 0) {
          unint64_t v40 = (uint64_t *)(*(void *)(v37 + 272) + 8 * v39);
        }
        else {
          unint64_t v40 = (uint64_t *)(*(void *)(v37 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
        }
        uint64_t v41 = *v40;
        if (*v40)
        {
          uint64_t v42 = *(void *)(v41 + 16);
          *(void *)(v41 + 16) = v36;
          *(void *)(v36 + 16) = v42;
          if (*(unsigned char *)(v36 + 3))
          {
            *(void *)(v36 + 24) = v41;
          }
          else
          {
            *(void *)(v36 + 24) = 0;
            unint64_t v40 = (uint64_t *)(v42 + 24);
          }
        }
        else
        {
          *(void *)(v36 + 16) = v36;
          *(void *)(v36 + 24) = 0;
        }
        *unint64_t v40 = v36;
      }
      v36 += 32;
      v38 -= 32;
    }
    while (v38);
  }
  uint64_t v26 = *(void *)(v24 + 728);
  if (v26) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, v22);
  }
  unint64_t v27 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v22 = v27 | *(void *)v22 & 7;
  *((void *)v22 + 1) = v12;
  *(void *)(v27 + 8) = v22;
  *unint64_t v12 = *v12 & 7 | (unint64_t)v22;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v71 = 0x4A01000000;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = 8;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  LODWORD(v71) = 0;
  HIDWORD(v71) = a4;
  uint64_t v74 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = a5;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v71);
  uint64_t v28 = *(void *)(a7 + 8) + 48 * v19;
  uint64_t v29 = (llvm::MachineFunction *)a2[4];
  uint64_t v71 = (uint64_t)v69;
  if (v69) {
    llvm::MetadataTracking::track((uint64_t)&v71, v69, 2);
  }
  unint64_t v30 = llvm::MachineFunction::CreateMachineInstr(v29, v28, (unsigned __int8 **)&v71, 0);
  if (v71) {
    llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
  }
  uint64_t v31 = a2[5];
  *((void *)v30 + 3) = v31;
  uint64_t v32 = *(void *)(v31 + 32);
  uint64_t v33 = *((unsigned int *)v30 + 10);
  if (v33)
  {
    uint64_t v43 = *((void *)v30 + 4);
    uint64_t v44 = *(void *)(v32 + 40);
    uint64_t v45 = 32 * v33;
    do
    {
      if (!*(unsigned char *)v43)
      {
        uint64_t v46 = *(unsigned int *)(v43 + 4);
        if ((int)v46 >= 0) {
          uint64_t v47 = (uint64_t *)(*(void *)(v44 + 272) + 8 * v46);
        }
        else {
          uint64_t v47 = (uint64_t *)(*(void *)(v44 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
        }
        uint64_t v48 = *v47;
        if (*v47)
        {
          uint64_t v49 = *(void *)(v48 + 16);
          *(void *)(v48 + 16) = v43;
          *(void *)(v43 + 16) = v49;
          if (*(unsigned char *)(v43 + 3))
          {
            *(void *)(v43 + 24) = v48;
          }
          else
          {
            *(void *)(v43 + 24) = 0;
            uint64_t v47 = (uint64_t *)(v49 + 24);
          }
        }
        else
        {
          *(void *)(v43 + 16) = v43;
          *(void *)(v43 + 24) = 0;
        }
        *uint64_t v47 = v43;
      }
      v43 += 32;
      v45 -= 32;
    }
    while (v45);
  }
  uint64_t v34 = *(void *)(v32 + 728);
  if (v34) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v34 + 24))(v34, v30);
  }
  unint64_t v35 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v30 = v35 | *(void *)v30 & 7;
  *((void *)v30 + 1) = v12;
  *(void *)(v35 + 8) = v30;
  *unint64_t v12 = *v12 & 7 | (unint64_t)v30;
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v71);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v71 = 0x4A00000000;
  uint64_t v74 = 0;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  uint64_t v72 = 0;
  uint64_t v73 = 1;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v71);
  if (v69)
  {
    int v58 = *v69;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v61 = v69;
      }
      else {
        uint64_t v61 = 0;
      }
      if ((v58 - 3) < 0xFFFFFFFE)
      {
        if (v58 == 3) {
          *((void *)v69 + 1) = 0;
        }
        return;
      }
      unint64_t v60 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v69[1] & 0x7F) != 2 && !*((_DWORD *)v69 + 3)) {
        return;
      }
      uint64_t v59 = *((void *)v69 + 2);
      if ((v59 & 4) == 0) {
        return;
      }
      unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
      if (!v60) {
        return;
      }
    }
    uint64_t v71 = (uint64_t)&v69;
    sub_1CC5FA668(v60 + 16, &v71);
  }
}

unint64_t sub_1CBB19C08(uint64_t a1, llvm::TargetInstrInfo *this)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (a1 + 48 == v2) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    BOOL v6 = *(unsigned __int16 **)(v5 + 16);
    int v7 = *v6;
    BOOL v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    BOOL v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0) {
      break;
    }
    if (v5 == v2) {
      return 0;
    }
    unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(unsigned char *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (**(_WORD **)(v5 + 16) != 305)
  {
    if (v5 != *(void *)(a1 + 56))
    {
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(unsigned char *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
      if (llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v5)) {
        continue;
      }
    }
    return 0;
  }
  return v5;
}

void sub_1CBB19D34(int a1, unint64_t *a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, int a6, int a7, uint64_t a8)
{
  if ((unint64_t *)(a3 + 48) == a2)
  {
LABEL_69:
    unint64_t v57 = 0;
  }
  else
  {
    int v16 = a2;
    while (1)
    {
      unsigned int v17 = *(unsigned __int16 *)v16[2];
      BOOL v18 = v17 > 0x17;
      int v19 = (1 << v17) & 0x83E000;
      if (v18 || v19 == 0) {
        break;
      }
      int v16 = (unint64_t *)v16[1];
      if (v16 == (unint64_t *)(a3 + 48)) {
        goto LABEL_69;
      }
    }
    unsigned int v21 = (unsigned __int8 *)v16[7];
    unint64_t v57 = v21;
    if (v21) {
      llvm::MetadataTracking::track((uint64_t)&v57, v21, 2);
    }
  }
  sub_1CBAECAFC(a8, a3, a2, a5, a7, 1, 0, &v57, 0);
  uint64_t v22 = 26304;
  if (a6) {
    uint64_t v22 = 26352;
  }
  uint64_t v23 = *(void *)(a8 + 8) + v22;
  uint64_t v24 = *(llvm::MachineFunction **)(a3 + 32);
  int v58 = v57;
  if (v57) {
    llvm::MetadataTracking::track((uint64_t)&v58, v57, 2);
  }
  uint64_t v25 = llvm::MachineFunction::CreateMachineInstr(v24, v23, &v58, 0);
  if (v58) {
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  }
  uint64_t v26 = *(void *)(a3 + 40);
  *((void *)v25 + 3) = v26;
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v28 = *((unsigned int *)v25 + 10);
  if (v28)
  {
    uint64_t v42 = *((void *)v25 + 4);
    uint64_t v43 = *(void *)(v27 + 40);
    uint64_t v44 = 32 * v28;
    do
    {
      if (!*(unsigned char *)v42)
      {
        uint64_t v45 = *(unsigned int *)(v42 + 4);
        if ((int)v45 >= 0) {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 272) + 8 * v45);
        }
        else {
          uint64_t v46 = (uint64_t *)(*(void *)(v43 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8);
        }
        uint64_t v47 = *v46;
        if (*v46)
        {
          uint64_t v48 = *(void *)(v47 + 16);
          *(void *)(v47 + 16) = v42;
          *(void *)(v42 + 16) = v48;
          if (*(unsigned char *)(v42 + 3))
          {
            *(void *)(v42 + 24) = v47;
          }
          else
          {
            *(void *)(v42 + 24) = 0;
            uint64_t v46 = (uint64_t *)(v48 + 24);
          }
        }
        else
        {
          *(void *)(v42 + 16) = v42;
          *(void *)(v42 + 24) = 0;
        }
        uint64_t *v46 = v42;
      }
      v42 += 32;
      v44 -= 32;
    }
    while (v44);
  }
  uint64_t v29 = *(void *)(v27 + 728);
  if (v29) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v29 + 24))(v29, v25);
  }
  unint64_t v30 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v25 = v30 | *(void *)v25 & 7;
  *((void *)v25 + 1) = a2;
  *(void *)(v30 + 8) = v25;
  *a2 = *a2 & 7 | (unint64_t)v25;
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v58);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  LODWORD(v58) = 0;
  HIDWORD(v58) = a1;
  uint64_t v61 = 0;
  llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 1;
  llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v58);
  sub_1CBAECAFC(a8, a3, a2, a4, a7, 1, 0, &v57, 0);
  uint64_t v31 = *(void *)(a8 + 8) + 26112;
  uint64_t v32 = *(llvm::MachineFunction **)(a3 + 32);
  int v58 = v57;
  if (v57) {
    llvm::MetadataTracking::track((uint64_t)&v58, v57, 2);
  }
  uint64_t v33 = llvm::MachineFunction::CreateMachineInstr(v32, v31, &v58, 0);
  if (v58) {
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  }
  uint64_t v34 = *(void *)(a3 + 40);
  *((void *)v33 + 3) = v34;
  uint64_t v35 = *(void *)(v34 + 32);
  uint64_t v36 = *((unsigned int *)v33 + 10);
  if (v36)
  {
    uint64_t v49 = *((void *)v33 + 4);
    uint64_t v50 = *(void *)(v35 + 40);
    uint64_t v51 = 32 * v36;
    do
    {
      if (!*(unsigned char *)v49)
      {
        uint64_t v52 = *(unsigned int *)(v49 + 4);
        if ((int)v52 >= 0) {
          uint64_t v53 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v52);
        }
        else {
          uint64_t v53 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
        }
        uint64_t v54 = *v53;
        if (*v53)
        {
          uint64_t v55 = *(void *)(v54 + 16);
          *(void *)(v54 + 16) = v49;
          *(void *)(v49 + 16) = v55;
          if (*(unsigned char *)(v49 + 3))
          {
            *(void *)(v49 + 24) = v54;
          }
          else
          {
            *(void *)(v49 + 24) = 0;
            uint64_t v53 = (uint64_t *)(v55 + 24);
          }
        }
        else
        {
          *(void *)(v49 + 16) = v49;
          *(void *)(v49 + 24) = 0;
        }
        *uint64_t v53 = v49;
      }
      v49 += 32;
      v51 -= 32;
    }
    while (v51);
  }
  uint64_t v37 = *(void *)(v35 + 728);
  if (v37) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v37 + 24))(v37, v33);
  }
  unint64_t v38 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v33 = v38 | *(void *)v33 & 7;
  *((void *)v33 + 1) = a2;
  *(void *)(v38 + 8) = v33;
  *a2 = *a2 & 7 | (unint64_t)v33;
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 1;
  llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v58);
  if (v57)
  {
    int v39 = *v57;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        uint64_t v56 = v57;
      }
      else {
        uint64_t v56 = 0;
      }
      if ((v39 - 3) < 0xFFFFFFFE)
      {
        if (v39 == 3) {
          *((void *)v57 + 1) = 0;
        }
        return;
      }
      unint64_t v41 = (unint64_t)(v56 + 8);
    }
    else
    {
      if ((v57[1] & 0x7F) != 2 && !*((_DWORD *)v57 + 3)) {
        return;
      }
      uint64_t v40 = *((void *)v57 + 2);
      if ((v40 & 4) == 0) {
        return;
      }
      unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
      if (!v41) {
        return;
      }
    }
    int v58 = (unsigned __int8 *)&v57;
    sub_1CC5FA668(v41 + 16, &v58);
  }
}

void sub_1CBB1A1F0(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, uint64_t a4, int a5, int a6)
{
  LODWORD(v6) = a6;
  if (a5) {
    FirstInstrTerminator = (uint64_t *)*((void *)this + 7);
  }
  else {
    FirstInstrTerminator = (uint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  }
  uint64_t v12 = *(void *)(a4 + 8) + 26112;
  uint64_t v13 = (llvm::MachineFunction *)*((void *)this + 4);
  unsigned int v14 = *a3;
  unsigned int v17 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v17, v14, 2);
  }
  BOOL v15 = llvm::MachineFunction::CreateMachineInstr(v13, v12, &v17, 0);
  if (v17) {
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
  }
  if ((uint64_t *)((char *)this + 48) != FirstInstrTerminator && (*((_WORD *)FirstInstrTerminator + 22) & 4) != 0) {
    *((_WORD *)v15 + 22) |= 0xCu;
  }
  if (a2) {
    unsigned int v16 = 2;
  }
  else {
    unsigned int v16 = 1;
  }
  if (v6 == -1) {
    uint64_t v6 = v16;
  }
  else {
    uint64_t v6 = v6;
  }
  sub_1CC31973C((uint64_t *)this + 5, FirstInstrTerminator, (uint64_t)v15);
  LODWORD(v17) = 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  uint64_t v18 = 0;
  uint64_t v19 = v6;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
}

uint64_t sub_1CBB1A328()
{
  return __cxa_atexit((void (*)(void *))nullsub_1564, &off_1EC7DF9E8, &dword_1CB82C000);
}

void sub_1CBB1A34C(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 56);
  unsigned int v7 = *(_DWORD *)(v6 + 48);
  int v8 = *(_DWORD *)(v6 + 72);
  int v9 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  if (v9) {
    BOOL v10 = v9 == 8;
  }
  else {
    BOOL v10 = 1;
  }
  if ((v10 || v9 == 255) && sub_1CBA65424(a2))
  {
    uint64_t v13 = (unint64_t *)*((void *)a3 + 7);
    unint64_t v41 = 0;
    sub_1CBAECAFC(v5, (uint64_t)a3, v13, 0, 267, 1, 0, &v41, 0);
    if (v41) {
      llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
    }
  }
  if (v8 >= 1) {
    sub_1CBB316C4(v5, v7, a3, *((void **)a3 + 7));
  }
  uint64_t v11 = *(void *)(a2 + 48);
  if (!v11)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v11;
  }
  uint64_t v12 = *(void *)(v11 + 536);
  if ((v12 & 0xFF00000000) != 0)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v46 = 0;
    unint64_t v41 = (unsigned __int8 *)&unk_1F261CD58;
    uint64_t v42 = (llvm::MachineFunction *)a2;
    *((void *)&v43 + 1) = *(void *)(a2 + 40);
    *(void *)&long long v43 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    uint64_t v49 = 0;
    if (!(void)v44)
    {
LABEL_16:
      *(void *)&long long v44 = 0;
LABEL_17:
      unint64_t v14 = *((void *)a3 + 7);
      *((void *)&v44 + 1) = a3;
      long long v45 = v14;
      FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a2 + 432), v12);
      if (FixedStack) {
        int v16 = *((_DWORD *)FixedStack + 3);
      }
      else {
        int v16 = 0;
      }
      v38[0] = (unint64_t)FixedStack | 4;
      v38[1] = 0;
      int v39 = v16;
      char v40 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(a2, (uint64_t)v38, 2, 4, 2, &v47, 0, 1, 0, 0, 0);
      uint64_t v18 = v42;
      uint64_t v19 = *(void *)(v43 + 8) + 432864;
      *(void *)&long long v47 = v44;
      if ((void)v44) {
        llvm::MetadataTracking::track((uint64_t)&v47, (unsigned __int8 *)v44, 2);
      }
      uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v18, v19, (unsigned __int8 **)&v47, 0);
      if ((void)v47) {
        llvm::MetadataTracking::untrack((uint64_t)&v47, (unsigned __int8 *)v47);
      }
      unsigned int v21 = (unint64_t *)v45;
      uint64_t v22 = *(void *)(*((void *)&v44 + 1) + 40);
      *((void *)MachineInstr + 3) = v22;
      uint64_t v23 = *(void *)(v22 + 32);
      uint64_t v24 = *((unsigned int *)MachineInstr + 10);
      if (v24)
      {
        uint64_t v30 = *((void *)MachineInstr + 4);
        uint64_t v31 = *(void *)(v23 + 40);
        uint64_t v32 = 32 * v24;
        do
        {
          if (!*(unsigned char *)v30)
          {
            uint64_t v33 = *(unsigned int *)(v30 + 4);
            if ((int)v33 >= 0) {
              uint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
            }
            else {
              uint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
            }
            uint64_t v35 = *v34;
            if (*v34)
            {
              uint64_t v36 = *(void *)(v35 + 16);
              *(void *)(v35 + 16) = v30;
              *(void *)(v30 + 16) = v36;
              if (*(unsigned char *)(v30 + 3))
              {
                *(void *)(v30 + 24) = v35;
              }
              else
              {
                *(void *)(v30 + 24) = 0;
                uint64_t v34 = (uint64_t *)(v36 + 24);
              }
            }
            else
            {
              *(void *)(v30 + 16) = v30;
              *(void *)(v30 + 24) = 0;
            }
            *uint64_t v34 = v30;
          }
          v30 += 32;
          v32 -= 32;
        }
        while (v32);
      }
      uint64_t v25 = *(void *)(v23 + 728);
      if (v25) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, MachineInstr);
      }
      unint64_t v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v26 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v21;
      *(void *)(v26 + 8) = MachineInstr;
      *unsigned int v21 = *v21 & 7 | (unint64_t)MachineInstr;
      if (*((void *)&v45 + 1)) {
        (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v45 + 1) + 24))(*((void *)&v45 + 1), MachineInstr);
      }
      LODWORD(v47) = 5;
      *((void *)&v47 + 1) = 0;
      LODWORD(v48) = v12;
      llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v47);
      LODWORD(v47) = 1;
      *((void *)&v47 + 1) = 0;
      *(void *)&long long v48 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v47);
      llvm::MachineInstr::addMemOperand(MachineInstr, v18, MachineMemOperand);
      unint64_t v41 = (unsigned __int8 *)&unk_1F261CD58;
      if ((void)v44) {
        llvm::MetadataTracking::untrack((uint64_t)&v44, (unsigned __int8 *)v44);
      }
      return;
    }
    int v27 = *(unsigned __int8 *)v44;
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v37 = v44;
      }
      else {
        uint64_t v37 = 0;
      }
      if ((v27 - 3) <= 0xFFFFFFFD)
      {
        if (v27 == 3) {
          *(void *)(v44 + 8) = 0;
        }
        goto LABEL_16;
      }
      unint64_t v29 = v37 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v44 + 1) & 0x7F) != 2 && !*(_DWORD *)(v44 + 12)) {
        goto LABEL_16;
      }
      uint64_t v28 = *(void *)(v44 + 16);
      if ((v28 & 4) == 0) {
        goto LABEL_16;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if (!v29) {
        goto LABEL_16;
      }
    }
    *(void *)&long long v47 = &v44;
    sub_1CC5FA668(v29 + 16, &v47);
    *(void *)&long long v44 = v49;
    if (v49) {
      llvm::MetadataTracking::retrack((uint64_t)&v49, v49, (uint64_t)&v44);
    }
    goto LABEL_17;
  }
}

void sub_1CBB1A818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  int v6 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
  if (v6) {
    BOOL v7 = v6 == 8;
  }
  else {
    BOOL v7 = 1;
  }
  if ((v7 || v6 == 255) && sub_1CBA65424(a2))
  {
    unint64_t v10 = *(void *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(unsigned char *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        unint64_t v10 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v38 = 0;
    sub_1CBAECAFC(v5, a3, (unint64_t *)v10, 0, 267, 1, 0, &v38, 0);
    if (v38) {
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    }
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (!v8)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v8;
  }
  uint64_t v9 = *(void *)(v8 + 536);
  if ((v9 & 0xFF00000000) != 0)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    unint64_t v38 = (unsigned __int8 *)&unk_1F261CD58;
    int v39 = (llvm::MachineFunction *)a2;
    *((void *)&v40 + 1) = *(void *)(a2 + 40);
    *(void *)&long long v40 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    uint64_t v46 = 0;
    if (!(void)v41)
    {
LABEL_17:
      *(void *)&long long v41 = 0;
LABEL_18:
      long long v42 = 0uLL;
      unint64_t v11 = *(void *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (!v11 || (*(unsigned char *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 4) != 0)
          unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)&v41 + 1) = a3;
      *(void *)&long long v42 = v11;
      FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a2 + 432), v9);
      if (FixedStack) {
        int v13 = *((_DWORD *)FixedStack + 3);
      }
      else {
        int v13 = 0;
      }
      v35[0] = (unint64_t)FixedStack | 4;
      v35[1] = 0;
      int v36 = v13;
      char v37 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(a2, (uint64_t)v35, 1, 4, 2, &v44, 0, 1, 0, 0, 0);
      BOOL v15 = v39;
      uint64_t v16 = *(void *)(v40 + 8) + 432720;
      *(void *)&long long v44 = v41;
      if ((void)v41) {
        llvm::MetadataTracking::track((uint64_t)&v44, (unsigned __int8 *)v41, 2);
      }
      uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v15, v16, (unsigned __int8 **)&v44, 0);
      if ((void)v44) {
        llvm::MetadataTracking::untrack((uint64_t)&v44, (unsigned __int8 *)v44);
      }
      uint64_t v18 = (unint64_t *)v42;
      uint64_t v19 = *(void *)(*((void *)&v41 + 1) + 40);
      *((void *)MachineInstr + 3) = v19;
      uint64_t v20 = *(void *)(v19 + 32);
      uint64_t v21 = *((unsigned int *)MachineInstr + 10);
      if (v21)
      {
        uint64_t v27 = *((void *)MachineInstr + 4);
        uint64_t v28 = *(void *)(v20 + 40);
        uint64_t v29 = 32 * v21;
        do
        {
          if (!*(unsigned char *)v27)
          {
            uint64_t v30 = *(unsigned int *)(v27 + 4);
            if ((int)v30 >= 0) {
              uint64_t v31 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v30);
            }
            else {
              uint64_t v31 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
            }
            uint64_t v32 = *v31;
            if (*v31)
            {
              uint64_t v33 = *(void *)(v32 + 16);
              *(void *)(v32 + 16) = v27;
              *(void *)(v27 + 16) = v33;
              if (*(unsigned char *)(v27 + 3))
              {
                *(void *)(v27 + 24) = v32;
              }
              else
              {
                *(void *)(v27 + 24) = 0;
                uint64_t v31 = (uint64_t *)(v33 + 24);
              }
            }
            else
            {
              *(void *)(v27 + 16) = v27;
              *(void *)(v27 + 24) = 0;
            }
            *uint64_t v31 = v27;
          }
          v27 += 32;
          v29 -= 32;
        }
        while (v29);
      }
      uint64_t v22 = *(void *)(v20 + 728);
      if (v22) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v22 + 24))(v22, MachineInstr);
      }
      unint64_t v23 = *v18 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v23 | *(void *)MachineInstr & 7;
      *((void *)MachineInstr + 1) = v18;
      *(void *)(v23 + 8) = MachineInstr;
      *uint64_t v18 = *v18 & 7 | (unint64_t)MachineInstr;
      if (*((void *)&v42 + 1)) {
        (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v42 + 1) + 24))(*((void *)&v42 + 1), MachineInstr);
      }
      LODWORD(v44) = 1;
      *((void *)&v44 + 1) = 0;
      *(void *)&long long v45 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v44);
      LODWORD(v44) = 5;
      *((void *)&v44 + 1) = 0;
      LODWORD(v45) = v9;
      llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v44);
      LODWORD(v44) = 1;
      *((void *)&v44 + 1) = 0;
      *(void *)&long long v45 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v44);
      LODWORD(v44) = 1;
      *((void *)&v44 + 1) = 0;
      *(void *)&long long v45 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v15, (const llvm::MachineOperand *)&v44);
      llvm::MachineInstr::addMemOperand(MachineInstr, v15, MachineMemOperand);
      unint64_t v38 = (unsigned __int8 *)&unk_1F261CD58;
      if ((void)v41) {
        llvm::MetadataTracking::untrack((uint64_t)&v41, (unsigned __int8 *)v41);
      }
      return;
    }
    int v24 = *(unsigned __int8 *)v41;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v34 = v41;
      }
      else {
        uint64_t v34 = 0;
      }
      if ((v24 - 3) <= 0xFFFFFFFD)
      {
        if (v24 == 3) {
          *(void *)(v41 + 8) = 0;
        }
        goto LABEL_17;
      }
      unint64_t v26 = v34 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v41 + 1) & 0x7F) != 2 && !*(_DWORD *)(v41 + 12)) {
        goto LABEL_17;
      }
      uint64_t v25 = *(void *)(v41 + 16);
      if ((v25 & 4) == 0) {
        goto LABEL_17;
      }
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (!v26) {
        goto LABEL_17;
      }
    }
    *(void *)&long long v44 = &v41;
    sub_1CC5FA668(v26 + 16, &v44);
    *(void *)&long long v41 = v46;
    if (v46) {
      llvm::MetadataTracking::retrack((uint64_t)&v46, v46, (uint64_t)&v41);
    }
    goto LABEL_18;
  }
}

uint64_t sub_1CBB1AD1C()
{
  return 0;
}

void sub_1CBB1AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v60[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(llvm::MachineFrameInfo **)(a2 + 56);
  int v6 = *((_DWORD *)v5 + 8);
  if (v6)
  {
    uint64_t v7 = -v6;
    uint64_t v8 = (uint64_t *)*((void *)v5 + 1);
    uint64_t v9 = v7 + 1;
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v12 = *v8;
      v8 += 5;
      uint64_t v11 = v12;
      if (v12 < v10) {
        uint64_t v10 = v11;
      }
    }
    while (v9++);
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  int v14 = *((unsigned __int8 *)v5 + 62);
  uint64_t v15 = *(void *)(a2 + 48);
  if (!v15)
  {
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v15;
  }
  if (*(unsigned __int8 *)(v15 + 496) | v14) {
    BOOL v16 = ((*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FFu) - 100 >= 9;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    if (v10 >= 4)
    {
      int FixedSpillStackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject(v5, 4, 0, 0);
      uint64_t v10 = 0;
    }
    else
    {
      int FixedSpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)v5, 4, 2u);
    }
    int v18 = *(unsigned __int8 *)(v15 + 540);
    *(_DWORD *)(v15 + 536) = FixedSpillStackObject;
    if (!v18) {
      *(unsigned char *)(v15 + 540) = 1;
    }
  }
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v20 = *(void *)(a2 + 328);
  uint64_t v52 = a2 + 320;
  if (v20 == a2 + 320) {
    goto LABEL_86;
  }
  uint64_t v21 = v19;
  uint64_t v53 = v5;
  int v22 = 0;
  while (2)
  {
    for (uint64_t i = *(void *)(v20 + 56); i != v20 + 48; uint64_t i = *(void *)(i + 8))
    {
      int v24 = **(unsigned __int16 **)(i + 16);
      uint64_t v25 = sub_1CBE52E8C(v24);
      uint64_t v26 = v25 & 0xFF00000000;
      if ((v25 & 0xFF00000000) != 0 && v25 == 65) {
        goto LABEL_26;
      }
      v54[0] = i;
      v54[1] = v21;
      int v55 = v24;
      uint64_t v27 = *(void *)(*(void *)(*(void *)(i + 24) + 32) + 16);
      if (!*(unsigned char *)(v27 + 372)) {
        goto LABEL_99;
      }
      if (!v26) {
        goto LABEL_42;
      }
      if (v25 > 0x25 || ((1 << v25) & 0x300C000000) == 0)
      {
LABEL_99:
        if (*(unsigned char *)(v27 + 360)) {
          BOOL v28 = v26 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          BOOL v29 = (v25 - 61) > 0x3C || ((1 << (v25 - 61)) & 0x100037B180000007) == 0;
          if (!v29 || ((v25 - 190) <= 3 ? (BOOL v30 = v25 == 191) : (BOOL v30 = 1), !v30))
          {
            sub_1CBC2E8B4((int *)v54, (uint64_t)v56);
            sub_1CBC2EAB8(v54, (uint64_t)v56, 0, 0, 0, &v58);
            if (v56[0] != &v57) {
              free(v56[0]);
            }
            if (v59)
            {
              uint64_t v34 = 8 * v59;
              uint64_t v35 = (unsigned int *)((char *)v58 + 4);
              do
              {
                unsigned int v36 = *v35;
                v35 += 2;
                *(_DWORD *)(*(void *)(i + 32) + 32 * v36) &= ~0x8000000u;
                v34 -= 8;
              }
              while (v34);
              if (v58 != v60) {
                free(v58);
              }
              int v33 = 3;
              goto LABEL_72;
            }
            if (v58 != v60) {
              free(v58);
            }
            int v24 = **(unsigned __int16 **)(i + 16);
          }
        }
LABEL_42:
        if (v24 == 332) {
          int v22 = 1;
        }
        goto LABEL_44;
      }
      uint64_t v32 = (_DWORD *)(*(void *)(i + 32) + 32 * sub_1CBDA6464(v24, 0x43u));
      if (!*(unsigned char *)v32)
      {
        unsigned int v50 = v32[1];
        sub_1CD42D100((int *)v54, (uint64_t)&v58);
        BOOL v51 = sub_1CD42D240(v54, (uint64_t)&v58, v50, 0, 0);
        if (v58 != v60) {
          free(v58);
        }
        if (v51)
        {
          *v32 &= ~0x8000000u;
LABEL_26:
          int v22 = 1;
        }
      }
LABEL_44:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v20 = *(void *)(v20 + 8);
    if (v20 != v52) {
      continue;
    }
    break;
  }
  if (!v22)
  {
    uint64_t v5 = v53;
    goto LABEL_86;
  }
  int v33 = 1;
  do
  {
LABEL_72:
    uint64_t v37 = *(void *)(v21 + 264);
    unsigned int v38 = *(_DWORD *)(v21 + 272) * ((*(void *)(v21 + 248) - *(void *)(v21 + 240)) >> 3) + 10;
    int64_t v39 = (unint64_t)*(unsigned int *)(v37 + 24 * v38 + 4) >> 3;
    if (v10 >= v39)
    {
      int SpillStackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject(v53, v39, 0, 0);
      uint64_t v10 = 0;
    }
    else
    {
      int SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)v53, v39, 63 - __clz((unint64_t)*(unsigned int *)(v37 + 24 * v38 + 8) >> 3));
    }
    unint64_t v41 = *(unsigned int *)(v15 + 512);
    if (v41 >= *(unsigned int *)(v15 + 516)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)(v15 + 504) + 4 * v41) = SpillStackObject;
    int v42 = *(_DWORD *)(v15 + 512) + 1;
    *(_DWORD *)(v15 + 512) = v42;
    --v33;
  }
  while (v33);
  if (v42) {
    uint64_t v43 = **(unsigned int **)(v15 + 504);
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v5 = v53;
  if (a3)
  {
    unsigned int v44 = *(_DWORD *)(a3 + 56);
    if (v44 >= *(_DWORD *)(a3 + 60)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v45 = (void *)(*(void *)(a3 + 48) + 16 * v44);
    *long long v45 = v43;
    v45[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
LABEL_86:
  if (v10 >= 1)
  {
    uint64_t v46 = *((void *)v5 + 1);
    unsigned int v47 = *((_DWORD *)v5 + 8);
    uint64_t v48 = -858993459 * ((unint64_t)(*((void *)v5 + 2) - v46) >> 3) - v47;
    if (v48)
    {
      while (!*(unsigned char *)(v46 + 40 * v47 + 33))
      {
        ++v47;
        if (!--v48) {
          return;
        }
      }
      if (v10 >= 4) {
        uint64_t v49 = 4;
      }
      else {
        uint64_t v49 = v10;
      }
      llvm::MachineFrameInfo::CreateFixedSpillStackObject(v5, v49, 0, 0);
    }
  }
}

void sub_1CBB1B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 56);
  __n128 v4 = *(int **)a3;
  unint64_t v5 = *(unsigned int *)(a3 + 8);
  int v6 = (int *)(*(void *)a3 + 4 * v5);
  uint64_t v15 = v3;
  if (v5 >= 0x81)
  {
    uint64_t v7 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v8 = v5;
    while (1)
    {
      uint64_t v9 = v6;
      unint64_t v10 = v5;
      uint64_t v11 = v4;
      uint64_t v12 = (int *)operator new(4 * v8, v7);
      if (v12) {
        break;
      }
      BOOL v14 = v8 > 1;
      v8 >>= 1;
      __n128 v4 = v11;
      unint64_t v5 = v10;
      int v6 = v9;
      if (!v14) {
        goto LABEL_2;
      }
    }
    int v13 = v12;
    sub_1CBB1B96C(v11, v9, &v15, v10, v12, v8);
    operator delete(v13);
  }
  else
  {
LABEL_2:
    sub_1CBB1B96C(v4, v6, &v15, v5, 0, 0);
  }
}

uint64_t sub_1CBB1B378()
{
  return 0;
}

uint64_t sub_1CBB1B380()
{
  return 0;
}

BOOL sub_1CBB1B388(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  return *(void *)(v2 + 8) != *(void *)(v2 + 16) || *(unsigned char *)(v2 + 62) != 0;
}

uint64_t sub_1CBB1B3B0()
{
  return 0;
}

void sub_1CBB1B3B8(uint64_t a1, uint64_t a2, void *a3)
{
  v14[7] = *MEMORY[0x1E4F143B8];
  llvm::TargetFrameLowering::determineCalleeSaves(a1, (uint64_t *)a2, (uint64_t)a3);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  int v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*v6)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v5 + 88))(&v13, v5, a2);
      unsigned int v8 = (unsigned __int16)*v7;
      if (*v7)
      {
        uint64_t v9 = *(void **)(a2 + 40);
        unsigned int v10 = 1;
        do
        {
          uint64_t v11 = 1 << v8;
          uint64_t v12 = v8 >> 6;
          if (((1 << v8) & *((void *)v13 + v12)) != 0
            && llvm::MachineRegisterInfo::isPhysRegModified(v9, v8, 0))
          {
            *(void *)(*a3 + 8 * v12) |= v11;
          }
          unsigned int v8 = (unsigned __int16)v7[v10++];
        }
        while (v8);
      }
      if (v13 != v14) {
        free(v13);
      }
    }
  }
}

unsigned char *sub_1CBB1B540(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  __n128 v4 = a4;
  if (a4)
  {
    int v6 = a4;
    if ((*a4 & 4) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    int v6 = 0;
  }
  while ((*((_WORD *)v6 + 22) & 8) != 0)
    int v6 = (unsigned char *)*((void *)v6 + 1);
LABEL_4:
  uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
  if (v7 != a4)
  {
    do
    {
      unsigned int v8 = (unsigned char *)*((void *)v4 + 1);
      uint64_t v9 = *(void *)(*((void *)v4 + 3) + 32);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 728);
        if (v10) {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 32))(v10, v4);
        }
        uint64_t v11 = *((unsigned int *)v4 + 10);
        if (v11)
        {
          uint64_t v12 = *((void *)v4 + 4);
          uint64_t v13 = *(void *)(v9 + 40);
          uint64_t v14 = 32 * v11;
          do
          {
            if (!*(unsigned char *)v12)
            {
              uint64_t v15 = *(unsigned int *)(v12 + 4);
              if ((v15 & 0x80000000) != 0) {
                BOOL v16 = (uint64_t *)(*(void *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v16 = (uint64_t *)(*(void *)(v13 + 272) + 8 * v15);
              }
              uint64_t v17 = *v16;
              uint64_t v19 = *(void *)(v12 + 16);
              uint64_t v18 = *(void *)(v12 + 24);
              if (v12 != *v16) {
                BOOL v16 = (uint64_t *)(v19 + 24);
              }
              *BOOL v16 = v18;
              if (v18) {
                uint64_t v20 = v18;
              }
              else {
                uint64_t v20 = v17;
              }
              *(void *)(v20 + 16) = v19;
              *(void *)(v12 + 16) = 0;
              *(void *)(v12 + 24) = 0;
            }
            v12 += 32;
            v14 -= 32;
          }
          while (v14);
        }
      }
      *((void *)v4 + 3) = 0;
      uint64_t v21 = (unint64_t *)*((void *)v4 + 1);
      unint64_t v22 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      *uint64_t v21 = v22 | *v21 & 7;
      *(void *)(v22 + 8) = v21;
      *(void *)v4 &= 7uLL;
      *((void *)v4 + 1) = 0;
      uint64_t v23 = *(void *)(*(void *)(a3 + 40) + 32);
      int v24 = (void *)*((void *)v4 + 4);
      if (v24)
      {
        uint64_t v25 = v4[47];
        uint64_t v26 = (uint64_t *)(v23 + 232);
        if (*(_DWORD *)(v23 + 240) <= v25) {
          sub_1CC34BDE0(v23 + 232, v25 + 1);
        }
        uint64_t v27 = *v26;
        *int v24 = *(void *)(*v26 + 8 * v25);
        *(void *)(v27 + 8 * v25) = v24;
      }
      *(void *)__n128 v4 = *(void *)(v23 + 224);
      *(void *)(v23 + 224) = v4;
      __n128 v4 = v8;
    }
    while (v8 != v7);
  }
  return v7;
}

uint64_t sub_1CBB1B6EC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *a4 = (*(uint64_t (**)(void))(v7 + 552))();
  return *(void *)(*(void *)(v6 + 8) + 40 * (*(_DWORD *)(v6 + 32) + a3));
}

uint64_t sub_1CBB1B7A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 112))(*(void *)(a2 + 16));
  uint64_t v11 = a4;
  uint64_t v9 = *a4;
  uint64_t v10 = v11[1];
  if (v10 != v9)
  {
    uint64_t v13 = v8;
    uint64_t v14 = *(unsigned __int8 **)(a2 + 56);
    uint64_t v15 = v10;
    do
    {
      BOOL v16 = 0;
      unsigned int v17 = *(_DWORD *)(v15 - 12);
      v15 -= 12;
      uint64_t v18 = *(uint64_t ***)(v7 + 240);
      unsigned int v19 = v17 - 0x40000000;
      unint64_t v20 = (unint64_t)v17 >> 3;
      int v21 = 1 << (v17 & 7);
      do
      {
        if (v19 >= 0xC0000001)
        {
          uint64_t v22 = **v18;
          if (v20 < *(unsigned __int16 *)(v22 + 22)
            && (v21 & *(unsigned char *)(*(void *)(v22 + 8) + v20)) != 0
            && (!v16
             || *v18 != v16
             && ((*(_DWORD *)(v16[1] + ((*(unsigned __int16 *)(v22 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v22 + 24)) & 1) != 0))
          {
            BOOL v16 = *v18;
          }
        }
        ++v18;
      }
      while (v18 != *(uint64_t ***)(v7 + 248));
      int v24 = (unsigned int *)(*(void *)(a3 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v16 + 24)
                            + *(_DWORD *)(a3 + 272)
                            * ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3))
                           + 4);
      unint64_t v23 = *v24;
      unsigned __int8 v25 = 63 - __clz((unint64_t)v24[1] >> 3);
      if (*(unsigned __int8 *)(v13 + 12) >= v25) {
        unsigned __int8 v26 = v25;
      }
      else {
        unsigned __int8 v26 = *(unsigned char *)(v13 + 12);
      }
      *(_DWORD *)(v10 - 8) = llvm::MachineFrameInfo::CreateStackObject(v14, v23 >> 3, v26, 1u, 0, 0);
      *(unsigned char *)(v10 - 3) = 0;
      uint64_t v10 = v15;
    }
    while (v15 != v9);
  }
  return 1;
}

int *sub_1CBB1B96C(int *result, int *a2, uint64_t *a3, unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      int v9 = *(a2 - 1);
      int v10 = *result;
      if (*(unsigned __int8 *)(*(void *)(*a3 + 8) + 40 * (*(_DWORD *)(*a3 + 32) + v9) + 16) < *(unsigned __int8 *)(*(void *)(*a3 + 8) + 40 * (*(_DWORD *)(*a3 + 32) + *result) + 16))
      {
        *uint64_t result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unsigned __int8 v25 = a5;
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = &result[a4 >> 1];
      unint64_t v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1CBB1BC4C(result, v27, a3, v28, a5);
        BOOL v29 = &v25[v26];
        uint64_t result = sub_1CBB1BC4C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        BOOL v30 = &v25[a4];
        uint64_t v31 = *a3;
        uint64_t v32 = v29;
        while (v32 != v30)
        {
          int v33 = v32;
          int v34 = *v32;
          int v35 = *v25;
          int v36 = *(_DWORD *)(v31 + 32);
          uint64_t v37 = *(void *)(v31 + 8);
          unsigned int v38 = *(unsigned __int8 *)(v37 + 40 * (v36 + v34) + 16);
          unsigned int v39 = *(unsigned __int8 *)(v37 + 40 * (v36 + *v25) + 16);
          if (v38 < v39) {
            int v35 = v34;
          }
          v25 += v38 >= v39;
          uint64_t v32 = &v33[v38 < v39];
          *v8++ = v35;
          if (v25 == v29)
          {
            if (v32 != v30)
            {
              uint64_t v40 = 0;
              if (v38 < v39) {
                char v41 = 1;
              }
              else {
                char v41 = 2;
              }
              int v42 = &v33[v41 & 1];
              do
              {
                v8[v40] = v42[v40];
                ++v40;
              }
              while (&v42[v40] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          uint64_t v43 = 0;
          do
          {
            v8[v43] = v25[v43];
            ++v43;
          }
          while (&v25[v43] != v29);
        }
      }
      else
      {
        sub_1CBB1B96C(result, v27, a3, v28, a5, a6);
        sub_1CBB1B96C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_1CBB1BED4(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = *(void *)(*a3 + 8);
        uint64_t v15 = 4;
        BOOL v16 = result;
        do
        {
          int v18 = *v16;
          int v17 = v16[1];
          BOOL v16 = v12;
          if (*(unsigned __int8 *)(v14 + 40 * (*(_DWORD *)(v13 + 32) + v17) + 16) < *(unsigned __int8 *)(v14 + 40 * (*(_DWORD *)(v13 + 32) + v18) + 16))
          {
            uint64_t v19 = v15;
            while (1)
            {
              *(int *)((char *)v8 + v19) = v18;
              uint64_t v20 = v19 - 4;
              if (v19 == 4) {
                break;
              }
              int v18 = *(int *)((char *)v8 + v19 - 8);
              int v21 = *(_DWORD *)(v13 + 32);
              unsigned int v22 = *(unsigned __int8 *)(v14 + 40 * (v21 + v17) + 16);
              uint64_t result = (int *)*(unsigned __int8 *)(v14 + 40 * (v21 + v18) + 16);
              uint64_t v19 = v20;
              if (v22 >= result)
              {
                unint64_t v23 = (int *)((char *)v8 + v20);
                goto LABEL_15;
              }
            }
            unint64_t v23 = v8;
LABEL_15:
            *unint64_t v23 = v17;
          }
          uint64_t v12 = v16 + 1;
          v15 += 4;
        }
        while (v16 + 1 != a2);
      }
    }
  }
  return result;
}

int *sub_1CBB1BC4C(int *result, int *a2, uint64_t *a3, unint64_t a4, int *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *uint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      int v10 = *(a2 - 1);
      int v11 = *(_DWORD *)(*a3 + 32);
      uint64_t v12 = *(void *)(*a3 + 8);
      unsigned int v13 = *(unsigned __int8 *)(v12 + 40 * (v11 + v10) + 16);
      unsigned int v14 = *(unsigned __int8 *)(v12 + 40 * (v11 + *result) + 16);
      if (v13 >= v14) {
        int v10 = *result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v13 >= v14) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = &result[a4 >> 1];
      sub_1CBB1B96C(result, v26, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (int *)sub_1CBB1B96C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      uint64_t v27 = *a3;
      unint64_t v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        BOOL v29 = v28;
        int v30 = *v28;
        int v31 = *v7;
        int v32 = *(_DWORD *)(v27 + 32);
        uint64_t v33 = *(void *)(v27 + 8);
        unsigned int v34 = *(unsigned __int8 *)(v33 + 40 * (v32 + v30) + 16);
        unsigned int v35 = *(unsigned __int8 *)(v33 + 40 * (v32 + *v7) + 16);
        if (v34 < v35) {
          int v31 = v30;
        }
        unint64_t v28 = &v29[v34 < v35];
        v7 += v34 >= v35;
        *v5++ = v31;
        if (v7 == v26)
        {
          if (v28 != a2)
          {
            uint64_t v36 = 0;
            uint64_t v37 = &v29[v34 < v35];
            do
            {
              v5[v36] = v37[v36];
              ++v36;
            }
            while (&v37[v36] != a2);
          }
          return result;
        }
      }
      if (v7 != v26)
      {
        uint64_t v38 = 0;
        do
        {
          v5[v38] = v7[v38];
          ++v38;
        }
        while (&v7[v38] != v26);
      }
    }
    else if (result != a2)
    {
      uint64_t v15 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *a3;
        uint64_t v18 = *(void *)(*a3 + 8);
        uint64_t v19 = a5;
        uint64_t v20 = a5;
        do
        {
          int v22 = *v20++;
          int v21 = v22;
          if (*(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + *v15) + 16) >= *(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + v22) + 16))
          {
            *uint64_t v20 = *v15;
          }
          else
          {
            v19[1] = v21;
            unint64_t v23 = a5;
            if (v19 != a5)
            {
              uint64_t v24 = v16;
              while (1)
              {
                unint64_t v23 = (int *)((char *)a5 + v24);
                int v25 = *(int *)((char *)a5 + v24 - 4);
                if (*(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + *v15) + 16) >= *(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + v25) + 16)) {
                  break;
                }
                *unint64_t v23 = v25;
                v24 -= 4;
                if (!v24)
                {
                  unint64_t v23 = a5;
                  break;
                }
              }
            }
            *unint64_t v23 = *v15;
          }
          ++v15;
          v16 += 4;
          uint64_t v19 = v20;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

_DWORD *sub_1CBB1BED4(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    int v11 = result;
    while (a5 > a8 && v8 > a8)
    {
      if (!a5) {
        return result;
      }
      int v12 = *(_DWORD *)(*a4 + 32);
      uint64_t v13 = *(void *)(*a4 + 8);
      while (1)
      {
        int v14 = *v11;
        if (*(unsigned __int8 *)(v13 + 40 * (v12 + *a2) + 16) < *(unsigned __int8 *)(v13 + 40 * (*v11 + v12) + 16)) {
          break;
        }
        ++v11;
        if (!--a5) {
          return result;
        }
      }
      if (a5 >= v8)
      {
        if (a5 == 1)
        {
          *int v11 = *a2;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0) {
          uint64_t v25 = a5;
        }
        else {
          uint64_t v25 = a5 + 1;
        }
        uint64_t v24 = v25 >> 1;
        uint64_t v18 = &v11[v25 >> 1];
        uint64_t v17 = a3;
        if (a3 != a2)
        {
          unint64_t v26 = a3 - a2;
          uint64_t v17 = a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            unint64_t v28 = &v17[v26 >> 1];
            int v30 = *v28;
            BOOL v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (*(unsigned __int8 *)(v13 + 40 * (v30 + v12) + 16) < *(unsigned __int8 *)(v13 + 40 * (*v18 + v12) + 16)) {
              uint64_t v17 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v15 = v8;
        }
        else {
          uint64_t v15 = v8 + 1;
        }
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = &a2[v15 >> 1];
        uint64_t v18 = a2;
        if (v11 != a2)
        {
          unint64_t v19 = a2 - v11;
          uint64_t v18 = v11;
          do
          {
            unint64_t v20 = v19 >> 1;
            int v21 = &v18[v19 >> 1];
            int v23 = *v21;
            int v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (*(unsigned __int8 *)(v13 + 40 * (*v17 + v12) + 16) < *(unsigned __int8 *)(v13 + 40 * (v23 + v12) + 16)) {
              unint64_t v19 = v20;
            }
            else {
              uint64_t v18 = v22;
            }
          }
          while (v19);
        }
        uint64_t v24 = v18 - v11;
      }
      int v31 = v17;
      if (v18 != a2)
      {
        int v31 = v18;
        if (a2 != v17)
        {
          uint64_t v68 = a4;
          int v69 = a7;
          uint64_t v67 = a8;
          if (v18 + 1 == a2)
          {
            int v63 = *v18;
            int64_t v34 = (char *)v17 - (char *)a2;
            uint64_t v65 = a3;
            memmove(v18, a2, (char *)v17 - (char *)a2);
            a8 = v67;
            a4 = v68;
            a3 = v65;
            a7 = v69;
            int v31 = (_DWORD *)((char *)v18 + v34);
            *int v31 = v63;
          }
          else if (a2 + 1 == v17)
          {
            int v35 = *(v17 - 1);
            int v31 = v18 + 1;
            if (v17 - 1 != v18)
            {
              int v66 = a3;
              int v64 = *(v17 - 1);
              memmove(v18 + 1, v18, (char *)(v17 - 1) - (char *)v18);
              int v35 = v64;
              a8 = v67;
              a4 = v68;
              a3 = v66;
              a7 = v69;
            }
            *uint64_t v18 = v35;
          }
          else
          {
            int v32 = a3;
            uint64_t v33 = sub_1CBB1C390(v18, a2, v17);
            a8 = v67;
            a4 = v68;
            a3 = v32;
            a7 = v69;
            int v31 = v33;
          }
        }
      }
      a5 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a5 + v8)
      {
        int v42 = v17;
        uint64_t v43 = a7;
        uint64_t v44 = a8;
        long long v45 = a4;
        uint64_t result = (_DWORD *)sub_1CBB1BED4(v31, v42, a3);
        a8 = v44;
        a4 = v45;
        a7 = v43;
        uint64_t v17 = v18;
        uint64_t v8 = v16;
        a5 = v24;
        a3 = v31;
      }
      else
      {
        uint64_t v36 = v11;
        uint64_t v37 = v18;
        uint64_t v38 = a3;
        unsigned int v39 = a7;
        uint64_t v40 = a8;
        char v41 = a4;
        uint64_t result = (_DWORD *)sub_1CBB1BED4(v36, v37, v31);
        a8 = v40;
        a4 = v41;
        a3 = v38;
        a7 = v39;
        int v11 = v31;
      }
      a2 = v17;
      if (!v8) {
        return result;
      }
    }
    if (a5 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v51 = 0;
        do
        {
          a7[v51] = v11[v51];
          ++v51;
        }
        while (&v11[v51] != a2);
        if (v51 * 4)
        {
          uint64_t v52 = *a4;
          uint64_t v53 = a7;
          while (a2 != a3)
          {
            int v54 = *a2;
            int v55 = *(_DWORD *)(v52 + 32);
            uint64_t v56 = *(void *)(v52 + 8);
            unsigned int v57 = *(unsigned __int8 *)(v56 + 40 * (v55 + *a2) + 16);
            unsigned int v58 = *(unsigned __int8 *)(v56 + 40 * (v55 + *v53) + 16);
            BOOL v59 = v57 >= v58;
            BOOL v60 = v57 < v58;
            unsigned int v61 = v59;
            if (v59) {
              int v54 = *v53;
            }
            v53 += v61;
            a2 += v60;
            *v11++ = v54;
            if (&a7[v51] == v53) {
              return result;
            }
          }
          return memmove(v11, v53, (char *)a7 - (char *)v53 + v51 * 4);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v46 = 0;
      do
      {
        a7[v46] = a2[v46];
        ++v46;
      }
      while (&a2[v46] != a3);
      if (v46 * 4)
      {
        unsigned int v47 = &a7[v46];
        uint64_t v48 = *a4;
        uint64_t v49 = a3 - 1;
        while (a2 != v11)
        {
          int v50 = *(v47 - 1);
          uint64_t result = *(_DWORD **)(v48 + 8);
          if (LOBYTE(result[10 * (*(_DWORD *)(v48 + 32) + v50) + 4]) >= LOBYTE(result[10 * (*(_DWORD *)(v48 + 32) + *(a2 - 1)) + 4])) {
            --v47;
          }
          else {
            int v50 = *--a2;
          }
          *v49-- = v50;
          if (v47 == a7) {
            return result;
          }
        }
        if (v47 != a7)
        {
          uint64_t v62 = 0;
          do
          {
            v49[v62] = v47[v62 - 1];
            --v62;
          }
          while (&v47[v62] != a7);
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1CBB1C390(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        int v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((_DWORD *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      int v12 = &a1[v10];
      do
      {
        int v14 = *--v12;
        int v13 = v14;
        uint64_t v15 = &v12[v3];
        uint64_t v16 = v12;
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = v15;
          _DWORD *v17 = *v15;
          BOOL v18 = __OFSUB__(v3, a3 - v15);
          uint64_t v20 = v3 - (a3 - v15);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v15 = &a1[v20];
          if (v19) {
            uint64_t v15 = &v16[v3];
          }
        }
        while (v15 != v12);
        *uint64_t v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void *sub_1CBB1C45C(void *a1)
{
  *a1 = &unk_1F2643F68;
  uint64_t v2 = a1 + 20;
  uint64_t v3 = (void *)a1[23];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  return sub_1CB87DD48(a1);
}

llvm *sub_1CBB1C510(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::dbgs((llvm *)a1);
  uint64_t v5 = *((void *)result + 4);
  if ((unint64_t)(*((void *)result + 3) - v5) > 0x10)
  {
    *(unsigned char *)(v5 + 16) = 10;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)"Assigned Reg Map\n";
    *((void *)result + 4) += 17;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(result, "Assigned Reg Map\n", 0x11uLL);
  }
  uint64_t v6 = *(void *)(a1 + 224);
  uint64_t v7 = *(unsigned int *)(a1 + 240);
  uint64_t v8 = (unsigned int *)(v6 + 8 * v7);
  if (*(_DWORD *)(a1 + 232))
  {
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      uint64_t v10 = *(unsigned int **)(a1 + 224);
      while (*v10 >= 0xFFFFFFFE)
      {
        v10 += 2;
        v9 -= 8;
        if (!v9) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v10 = *(unsigned int **)(a1 + 224);
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (unsigned int *)(v6 + 8 * v7);
  }
  uint64_t v11 = (unsigned int *)(v6 + 8 * v7);
  if (v10 != v11)
  {
    int v12 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
    do
    {
      int v13 = llvm::dbgs(result);
      unsigned int v14 = *v10;
      uint64_t v15 = operator new(0x28uLL);
      *(void *)uint64_t v15 = &unk_1F26154E0;
      void v15[2] = v14;
      *((void *)v15 + 2) = a2;
      v15[6] = 0;
      *((void *)v15 + 4) = 0;
      int v21 = (llvm *)v15;
      v12((llvm::raw_ostream *)v15, v13);
      uint64_t v16 = (_DWORD *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v16 > 3uLL)
      {
        *uint64_t v16 = 540945696;
        *((void *)v13 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v13, " -> ", 4uLL);
      }
      sub_1CD098D14(v13, v10[1], 0, 0, 0);
      uint64_t v17 = (unsigned char *)*((void *)v13 + 4);
      if (*((unsigned char **)v13 + 3) == v17)
      {
        llvm::raw_ostream::write(v13, "\n", 1uLL);
      }
      else
      {
        unsigned char *v17 = 10;
        ++*((void *)v13 + 4);
      }
      uint64_t result = v21;
      if (v21 == (llvm *)v20)
      {
        uint64_t result = (llvm *)(*(uint64_t (**)(void *))(v20[0] + 32))(v20);
      }
      else if (v21)
      {
        uint64_t result = (llvm *)(*(uint64_t (**)(void))(*(void *)v21 + 40))();
      }
      BOOL v18 = v10 + 2;
      while (v18 != v8)
      {
        unsigned int v19 = *v18;
        v18 += 2;
        if (v19 <= 0xFFFFFFFD)
        {
          uint64_t v10 = v18 - 2;
          goto LABEL_25;
        }
      }
      uint64_t v10 = v8;
LABEL_25:
      ;
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t sub_1CBB1C7B4(uint64_t a1)
{
  uint64_t v2 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC0D00;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F73C0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 288;
  *(void *)(a1 + 280) = 0x400000000;
  *(void *)(a1 + 320) = a1 + 336;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 1;
  do
  {
    uint64_t v3 = a1 + v2;
    *(_DWORD *)(v3 + 352) = 0;
    *(void *)(v3 + 360) = 0;
    v2 += 16;
  }
  while (v2 != 80);
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(unsigned char *)(a1 + 504) = 1;
  *(void *)(a1 + 512) = a1 + 544;
  *(void *)(a1 + 520) = a1 + 544;
  *(void *)(a1 + 528) = 8;
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 608) = a1 + 624;
  *(void *)(a1 + 616) = 0x800000000;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 764) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 812) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 964) = 0;
  *(_OWORD *)(a1 + 948) = 0u;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = a1 + 984;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0D10, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CBB1C998;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCC0D10, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  *(_DWORD *)(a1 + 840) = 64;
  return a1;
}

void sub_1CBB1C998(llvm *a1)
{
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  operator new();
}

void sub_1CBB1CA50(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F73C0;
  sub_1CBB232D4(*(void **)(a1 + 984));
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 808), 4);
  uint64_t v2 = *(void **)(a1 + 784);
  if (v2)
  {
    *(void *)(a1 + 792) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 760), 4);
  uint64_t v3 = *(void **)(a1 + 736);
  if (v3)
  {
    *(void *)(a1 + 744) = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 712), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 688), 8);
  uint64_t v4 = *(char **)(a1 + 608);
  uint64_t v5 = *(unsigned int *)(a1 + 616);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    uint64_t v7 = v4 - 8;
    do
    {
      uint64_t v8 = *(void *)&v7[v6];
      *(void *)&v7[v6] = 0;
      if (v8) {
        MEMORY[0x1D25D9CE0](v8, 0x1020C403A5D3213);
      }
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = *(char **)(a1 + 608);
  }
  if (v4 != (char *)(a1 + 624)) {
    free(v4);
  }
  uint64_t v9 = *(void **)(a1 + 520);
  if (v9 != *(void **)(a1 + 512)) {
    free(v9);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 472), 4);
  for (uint64_t i = 464; i != 424; i -= 8)
  {
    uint64_t v11 = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0;
    if (v11) {
      sub_1CBB2333C(a1 + i, v11);
    }
  }
  for (uint64_t j = 416; j != 336; j -= 16)
    llvm::LiveIntervalUnion::Array::clear((llvm::LiveIntervalUnion::Array *)(a1 + j));
  *(void *)(a1 + 248) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 280);
  if (v13)
  {
    unsigned int v14 = *(uint64_t **)(a1 + 272);
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *v14++;
      MEMORY[0x1D25D9CD0](v16, 8);
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v17 = *(uint64_t **)(a1 + 320);
  uint64_t v18 = *(unsigned int *)(a1 + 328);
  if (v18)
  {
    uint64_t v23 = 16 * v18;
    do
    {
      uint64_t v24 = *v17;
      v17 += 2;
      MEMORY[0x1D25D9CD0](v24, 8);
      v23 -= 16;
    }
    while (v23);
    uint64_t v17 = *(uint64_t **)(a1 + 320);
  }
  if (v17 != (uint64_t *)(a1 + 336)) {
    free(v17);
  }
  unsigned int v19 = *(void **)(a1 + 272);
  if (v19 != (void *)(a1 + 288)) {
    free(v19);
  }
  *(void *)a1 = &unk_1F260E110;
  uint64_t v20 = *(void **)(a1 + 176);
  if (v20 != (void *)(a1 + 192)) {
    free(v20);
  }
  int v21 = *(void **)(a1 + 104);
  if (v21 != (void *)(a1 + 120)) {
    free(v21);
  }
  uint64_t v22 = *(void **)(a1 + 32);
  if (v22 != (void *)(a1 + 48)) {
    free(v22);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CBB1CCA8(uint64_t a1)
{
  sub_1CBB1CA50(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBB1CCE0()
{
  return "AGX3 interface register allocation pass";
}

void sub_1CBB1CCF0(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

void sub_1CBB1CDEC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 496))
  {
    uint64_t v2 = 0;
    uint64_t v3 = a1 + 432;
    uint64_t v4 = (llvm::LiveIntervalUnion::Array *)(a1 + 352);
    do
    {
      uint64_t v5 = *(void *)(v3 + v2);
      *(void *)(v3 + v2) = 0;
      if (v5) {
        sub_1CBB2333C(v3 + v2, v5);
      }
      llvm::LiveIntervalUnion::Array::clear(v4);
      v2 += 8;
      uint64_t v4 = (llvm::LiveIntervalUnion::Array *)((char *)v4 + 16);
    }
    while (v2 != 40);
    *(_DWORD *)(a1 + 496) = 0;
    sub_1CBB233D8((_DWORD *)(a1 + 472));
    *(_DWORD *)(a1 + 500) = 0;
    *(unsigned char *)(a1 + 504) = 1;
  }
  uint64_t v6 = *(void **)(a1 + 520);
  if (v6 == *(void **)(a1 + 512)) {
    goto LABEL_8;
  }
  uint64_t v28 = *(unsigned int *)(a1 + 528);
  if (v28 < 0x21 || 4 * (*(_DWORD *)(a1 + 532) - *(_DWORD *)(a1 + 536)) >= v28)
  {
    memset(v6, 255, 8 * v28);
LABEL_8:
    *(void *)(a1 + 532) = 0;
    goto LABEL_9;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 512));
LABEL_9:
  uint64_t v7 = *(unsigned int *)(a1 + 616);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    uint64_t v9 = *(void *)(a1 + 608) - 8;
    do
    {
      uint64_t v10 = *(void *)(v9 + v8);
      *(void *)(v9 + v8) = 0;
      if (v10) {
        MEMORY[0x1D25D9CE0](v10, 0x1020C403A5D3213);
      }
      v8 -= 8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 616) = 0;
  uint64_t v11 = (void *)(a1 + 688);
  int v12 = *(_DWORD *)(a1 + 696);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 704);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      unsigned int v14 = (_DWORD *)*v11;
      int v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64) {
        int v16 = 64;
      }
      else {
        int v16 = v15;
      }
      if (v16 == v13)
      {
        *(void *)(a1 + 696) = 0;
        uint64_t v17 = 16 * v13;
        do
        {
          *unsigned int v14 = -1;
          v14 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1D25D9CD0](v14, 8);
        unint64_t v23 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        unint64_t v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
        LODWORD(v24) = (((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8)) + 1;
        *(_DWORD *)(a1 + 704) = v24;
        uint64_t v25 = operator new(16 * v24, (std::align_val_t)8uLL);
        *(void *)(a1 + 688) = v25;
        *(void *)(a1 + 696) = 0;
        uint64_t v26 = *(unsigned int *)(a1 + 704);
        if (v26)
        {
          uint64_t v27 = 16 * v26;
          do
          {
            *uint64_t v25 = -1;
            v25 += 4;
            v27 -= 16;
          }
          while (v27);
        }
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 700)) {
      goto LABEL_31;
    }
    LODWORD(v13) = *(_DWORD *)(a1 + 704);
    if (v13 > 0x40)
    {
      MEMORY[0x1D25D9CD0](*v11, 8);
      *uint64_t v11 = 0;
      *(void *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = 0;
      goto LABEL_31;
    }
  }
  if (v13)
  {
    uint64_t v18 = (_DWORD *)*v11;
    uint64_t v19 = 16 * v13;
    do
    {
      *uint64_t v18 = -1;
      v18 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  *(void *)(a1 + 696) = 0;
LABEL_31:
  sub_1CBB23528((_DWORD *)(a1 + 712));
  *(void *)(a1 + 744) = *(void *)(a1 + 736);
  int v20 = *(_DWORD *)(a1 + 768);
  if (v20 || *(_DWORD *)(a1 + 772))
  {
    int v21 = (void **)(a1 + 760);
    uint64_t v22 = *(unsigned int *)(a1 + 776);
    if (v22 <= 4 * v20 || v22 < 0x41)
    {
      if (v22) {
        memset(*v21, 255, 4 * v22);
      }
      *(void *)(a1 + 768) = 0;
    }
    else
    {
      sub_1CBB23624(v21);
    }
  }
  *(void *)(a1 + 792) = *(void *)(a1 + 784);
  sub_1CBB233D8((_DWORD *)(a1 + 808));
  *(void *)(a1 + 832) = 0;
  sub_1CBB232D4(*(void **)(a1 + 984));
  *(void *)(a1 + 976) = a1 + 984;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 984) = 0;
}

BOOL sub_1CBB1D0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v926 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
    *(void *)(a2 + 48) = v4;
  }
  *(void *)(a1 + 872) = v4;
  uint64_t v5 = *(unsigned char **)(a2 + 16);
  *(void *)(a1 + 856) = v5;
  BOOL v6 = v5[300] || v5[301] || v5[298] || v5[299] != 0;
  *(unsigned char *)(a1 + 1000) = v6;
  *(void *)(a1 + 848) = (*(uint64_t (**)(unsigned char *))(*(void *)v5 + 104))(v5);
  *(void *)(a1 + 864) = (*(uint64_t (**)(void))(**(void **)(a1 + 856) + 176))(*(void *)(a1 + 856));
  *(void *)(a1 + 880) = *(void *)(a2 + 40);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_10:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::SlotIndexes::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_10;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 832) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::SlotIndexes::ID);
  uint64_t v11 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_15:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::MachineDominatorTree::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_15;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  *(void *)(a1 + 896) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineDominatorTree::ID);
  int v15 = *(uint64_t **)(a1 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_20:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_20;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  *(void *)(a1 + 904) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::MachineBlockFrequencyInfo::ID);
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  if (v20 == v21)
  {
LABEL_25:
    uint64_t v22 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v20 != &llvm::LiveIntervals::ID)
    {
      v20 += 16;
      if (v20 == v21) {
        goto LABEL_25;
      }
    }
    uint64_t v22 = *(void *)(v20 + 8);
  }
  *(void *)(a1 + 888) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v22 + 96))(v22, &llvm::LiveIntervals::ID);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  *(unsigned char *)(a1 + 944) = 0;
  int v23 = *(_DWORD *)(*(void *)(a1 + 880) + 32);
  if (v23)
  {
    for (int i = 0; i != v23; ++i)
    {
      LODWORD(__base) = i | 0x80000000;
      uint64_t v25 = i & 0x7FFFFFFF;
      uint64_t v26 = *(void *)(*(void *)(a1 + 880) + 24);
      uint64_t v27 = *(void *)(v26 + 16 * v25 + 8);
      if (v27)
      {
        while ((*(_DWORD *)v27 & 0x80000000) != 0)
        {
          uint64_t v27 = *(void *)(v27 + 24);
          if (!v27) {
            goto LABEL_42;
          }
        }
        uint64_t v28 = *(void *)(a1 + 888);
        if (v25 < *(_DWORD *)(v28 + 416) && *(void *)(*(void *)(v28 + 408) + 8 * v25))
        {
          int v29 = *(unsigned __int16 *)(*(void *)(*(void *)(v26 + 16 * v25) & 0xFFFFFFFFFFFFFFF8) + 24);
          BOOL v30 = (v29 - 14) > 0x32 || ((1 << (v29 - 14)) & 0x4000000004001) == 0;
          if (!v30 || v29 == 105 || v29 == 127) {
            operator new();
          }
        }
      }
LABEL_42:
      ;
    }
  }
  int v31 = *(unsigned int **)(a1 + 784);
  int v32 = *(unsigned int **)(a1 + 792);
  if (v31 != v32)
  {
    while (1)
    {
      uint64_t v33 = *v31;
      LODWORD(v921) = v33;
      uint64_t v34 = *(void *)(a1 + 880);
      int v35 = (uint64_t *)((v33 & 0x80000000) != 0
                      ? *(void *)(v34 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8
                      : *(void *)(v34 + 272) + 8 * v33);
      uint64_t v36 = *v35;
      if (*v35)
      {
        while ((*(unsigned char *)(v36 + 3) & 1) != 0)
        {
          uint64_t v36 = *(void *)(v36 + 24);
          if (!v36) {
            goto LABEL_51;
          }
        }
        int v37 = 0;
        uint64_t v49 = *(void **)(v36 + 8);
LABEL_70:
        v910 = v49;
        __base = 0;
        if (sub_1CBB23F80((uint64_t *)(a1 + 712), &v910, &__base))
        {
          int v50 = __base;
          uint64_t v51 = *(void *)(a1 + 712);
          uint64_t v52 = *(unsigned int *)(a1 + 728);
        }
        else
        {
          uint64_t v51 = *(void *)(a1 + 712);
          uint64_t v52 = *(unsigned int *)(a1 + 728);
          int v50 = (void *)(v51 + 8 * v52);
        }
        if (v50 != (void *)(v51 + 8 * v52)) {
          ++v37;
        }
        uint64_t v53 = *(void **)(v36 + 8);
        while (1)
        {
          uint64_t v36 = *(void *)(v36 + 24);
          if (!v36) {
            break;
          }
          if ((*(unsigned char *)(v36 + 3) & 1) == 0)
          {
            uint64_t v49 = *(void **)(v36 + 8);
            if (v49 != v53) {
              goto LABEL_70;
            }
          }
        }
      }
      else
      {
LABEL_51:
        int v37 = 0;
      }
      int v38 = *(_DWORD *)(a1 + 824);
      if (!v38) {
        break;
      }
      uint64_t v39 = *(void *)(a1 + 808);
      int v40 = v38 - 1;
      unsigned int v41 = (37 * v921) & v40;
      int v42 = (_DWORD *)(v39 + 8 * v41);
      int v43 = *v42;
      if (v921 != *v42)
      {
        uint64_t v44 = 0;
        int v45 = 1;
        while (v43 != -1)
        {
          if (v44) {
            BOOL v46 = 0;
          }
          else {
            BOOL v46 = v43 == -2;
          }
          if (v46) {
            uint64_t v44 = v42;
          }
          unsigned int v47 = v41 + v45++;
          unsigned int v41 = v47 & v40;
          int v42 = (_DWORD *)(v39 + 8 * v41);
          int v43 = *v42;
          if (v921 == *v42) {
            goto LABEL_67;
          }
        }
        if (v44) {
          uint64_t v48 = v44;
        }
        else {
          uint64_t v48 = v42;
        }
        goto LABEL_66;
      }
LABEL_67:
      v42[1] = v37;
      if (++v31 == v32) {
        goto LABEL_82;
      }
    }
    uint64_t v48 = 0;
LABEL_66:
    int v42 = sub_1CBB2401C(a1 + 808, (uint64_t)&v921, (int *)&v921, v48);
    *(void *)int v42 = v921;
    goto LABEL_67;
  }
LABEL_82:
  int v54 = *(_DWORD *)(a1 + 616);
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a1 + 1000);
  unsigned int v55 = 4 * v54;
  if (v55 >= 0x30) {
    unsigned int v56 = 48;
  }
  else {
    unsigned int v56 = v55;
  }
  sub_1CBB24198(a1 + 248, v56);
  int v58 = dword_1EBCC0DB0;
  if (!word_1EBCC0D38) {
    int v58 = 2;
  }
  *(_DWORD *)(a1 + 912) = v58;
  if (*(char *)(a1 + 943) < 0)
  {
    **(unsigned char **)(a1 + 920) = 0;
    *(void *)(a1 + 928) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 920) = 0;
    *(unsigned char *)(a1 + 943) = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0D18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0D18))
  {
    byte_1EBCC0D04 = 1;
    __cxa_guard_release(&qword_1EBCC0D18);
  }
  if ((byte_1EBCC0D04 & 1) == 0)
  {
    *(void *)&long long v922 = 0;
    v921 = 0;
    DWORD2(v922) = 0;
    *(void *)&long long v924 = 0;
    long long v923 = 0uLL;
    v892 = 0;
    uint64_t v893 = 0;
    v894[0] = 0;
    LODWORD(v911) = 0;
    char v913 = 0;
    uint64_t v914 = 0;
    v916 = &v892;
    int v915 = 0;
    v910 = &unk_1F2646F30;
    memset(v912, 0, sizeof(v912));
    uint64_t v59 = *(void *)(a1 + 736);
    uint64_t v60 = *(void *)(a1 + 744);
    if (v59 != v60)
    {
      do
      {
        uint64_t v61 = *(unsigned int *)(*(void *)v59 + 40);
        if (v61)
        {
          uint64_t v62 = *(_DWORD **)(*(void *)v59 + 32);
          int v63 = &v62[8 * v61];
          do
          {
            if ((*v62 & 0x10000FF) == 0)
            {
              uint64_t v64 = *(void *)(a1 + 880);
              uint64_t v65 = v62[1];
              uint64_t v66 = *(void *)(v64 + 24);
              int v67 = *(unsigned __int16 *)(*(void *)(*(void *)(v66 + 16 * (v65 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 24);
              BOOL v68 = (v67 - 14) > 0x32 || ((1 << (v67 - 14)) & 0x4000000004001) == 0;
              if (!v68 || v67 == 105 || v67 == 127)
              {
                LODWORD(__base) = v62[1];
                int v69 = (uint64_t *)((v65 & 0x80000000) != 0
                                ? v66 + 16 * (v65 & 0x7FFFFFFF) + 8
                                : *(void *)(v64 + 272) + 8 * v65);
                uint64_t v70 = *v69;
                if (v70)
                {
                  while ((*(unsigned char *)(v70 + 3) & 1) != 0)
                  {
                    uint64_t v70 = *(void *)(v70 + 24);
                    if (!v70) {
                      goto LABEL_103;
                    }
                  }
                  if ((v65 & 0x80000000) != 0) {
                    uint64_t v71 = (uint64_t *)(v66 + 16 * (v65 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v71 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v65);
                  }
                  uint64_t v72 = *v71;
                  if (v72)
                  {
                    while ((*(unsigned char *)(v72 + 3) & 1) != 0)
                    {
                      uint64_t v72 = *(void *)(v72 + 24);
                      if (!v72) {
                        goto LABEL_119;
                      }
                    }
                    while (1)
                    {
                      uint64_t v72 = *(void *)(v72 + 24);
                      if (!v72) {
                        break;
                      }
                      if ((*(unsigned char *)(v72 + 3) & 1) == 0) {
                        goto LABEL_119;
                      }
                    }
                  }
                  else
                  {
LABEL_119:
                    sub_1CBA84648((uint64_t)&v921, (int *)&__base);
                  }
                }
              }
            }
LABEL_103:
            v62 += 8;
          }
          while (v62 != v63);
        }
        v59 += 8;
      }
      while (v59 != v60);
      uint64_t v74 = (unsigned int *)*((void *)&v923 + 1);
      uint64_t v73 = (unsigned int *)v923;
      if ((void)v923 != *((void *)&v923 + 1))
      {
        v876 = &v896;
        v872 = (unsigned int *)*((void *)&v923 + 1);
        do
        {
          uint64_t v75 = *v73;
          LODWORD(v889) = v75;
          __base = v920;
          size_t v919 = 0x600000000;
          uint64_t v76 = *(void *)(a1 + 880);
          if ((v75 & 0x80000000) != 0) {
            int v77 = (uint64_t *)(*(void *)(v76 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
          }
          else {
            int v77 = (uint64_t *)(*(void *)(v76 + 272) + 8 * v75);
          }
          uint64_t v78 = *v77;
          if (!*v77) {
            goto LABEL_161;
          }
          while ((*(_DWORD *)v78 & 0x81000000) != 0)
          {
            uint64_t v78 = *(void *)(v78 + 24);
            if (!v78) {
              goto LABEL_161;
            }
          }
          LODWORD(v79) = 0;
          unint64_t v80 = *(void *)(v78 + 8);
LABEL_132:
          __int16 v81 = *(_WORD *)(v80 + 44);
          unint64_t v82 = v80;
          if ((v81 & 4) != 0)
          {
            do
              unint64_t v82 = *(void *)v82 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v82 + 44) & 4) != 0);
          }
          if ((v81 & 8) != 0)
          {
            do
              unint64_t v80 = *(void *)(v80 + 8);
            while ((*(_WORD *)(v80 + 44) & 8) != 0);
          }
          unint64_t v83 = *(void *)(v80 + 8);
          if (v82 != v83)
          {
            while (1)
            {
              unsigned int v84 = **(unsigned __int16 **)(v82 + 16);
              BOOL v614 = v84 > 0x17;
              int v85 = (1 << v84) & 0x83E000;
              if (v614 || v85 == 0) {
                break;
              }
              unint64_t v82 = *(void *)(v82 + 8);
              if (v82 == v83)
              {
                unint64_t v82 = v83;
                break;
              }
            }
          }
          uint64_t v87 = *(void *)(*(void *)(a1 + 888) + 288);
          uint64_t v88 = *(void *)(v87 + 368);
          uint64_t v89 = *(unsigned int *)(v87 + 384);
          if (v89)
          {
            LODWORD(v90) = ((v82 >> 4) ^ (v82 >> 9)) & (v89 - 1);
            uint64_t v91 = (uint64_t *)(v88 + 16 * v90);
            uint64_t v92 = *v91;
            if (v82 == *v91) {
              goto LABEL_148;
            }
            int v93 = 1;
            while (v92 != -4096)
            {
              int v94 = v90 + v93++;
              uint64_t v90 = v94 & (v89 - 1);
              uint64_t v92 = *(void *)(v88 + 16 * v90);
              if (v82 == v92)
              {
                uint64_t v91 = (uint64_t *)(v88 + 16 * v90);
                goto LABEL_148;
              }
            }
          }
          uint64_t v91 = (uint64_t *)(v88 + 16 * v89);
LABEL_148:
          if (v79 >= HIDWORD(v919)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)__base + v79) = v91[1];
          size_t v79 = (v919 + 1);
          LODWORD(v919) = v919 + 1;
          uint64_t v95 = *(void *)(v78 + 8);
          while (1)
          {
            uint64_t v78 = *(void *)(v78 + 24);
            if (!v78) {
              break;
            }
            if ((*(_DWORD *)v78 & 0x81000000) == 0)
            {
              unint64_t v80 = *(void *)(v78 + 8);
              if (v80 != v95) {
                goto LABEL_132;
              }
            }
          }
          if (v79 >= 2) {
            qsort(__base, v79, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CBB24DA4);
          }
LABEL_161:
          uint64_t v96 = *(void *)(a1 + 880);
          uint64_t v97 = *(void *)(v96 + 24);
          if ((__int16 ***)(*(void *)(v97 + 16 * (v889 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66ABEE0)
          {
            v904 = 0;
            uint64_t v905 = 0;
            int v906 = 0;
            v908 = 0;
            uint64_t v909 = 0;
            __p = 0;
            if ((v889 & 0x80000000) != 0) {
              uint64_t v98 = (uint64_t *)(v97 + 16 * (v889 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v98 = (uint64_t *)(*(void *)(v96 + 272) + 8 * v889);
            }
            uint64_t v99 = *v98;
            v874 = v73;
            if (*v98)
            {
              if ((*(unsigned char *)(v99 + 3) & 1) != 0
                || (uint64_t v99 = *(void *)(v99 + 24)) != 0 && (*(unsigned char *)(v99 + 3) & 1) != 0)
              {
                uint64_t v100 = *(void *)(v99 + 8);
LABEL_167:
                *(void *)&long long v899 = *(void *)(v100 + 24);
                sub_1CBB24B0C((uint64_t)&v904, &v899);
                uint64_t v101 = *(void *)(v99 + 8);
                while (1)
                {
                  uint64_t v99 = *(void *)(v99 + 24);
                  if (!v99 || (*(unsigned char *)(v99 + 3) & 1) == 0) {
                    break;
                  }
                  uint64_t v100 = *(void *)(v99 + 8);
                  if (v100 != v101) {
                    goto LABEL_167;
                  }
                }
                uint64_t v102 = __p;
                if (__p != v908)
                {
                  unint64_t v103 = 0;
                  uint64_t v104 = *(void *)(*(void *)(a1 + 904) + 248);
                  while (1)
                  {
                    if (!v104) {
                      goto LABEL_187;
                    }
                    int v105 = *(_DWORD *)(v104 + 176);
                    if (!v105) {
                      goto LABEL_187;
                    }
                    uint64_t v106 = *(void *)(v104 + 160);
                    unsigned int v107 = v105 - 1;
                    uint64_t v108 = (v105 - 1) & ((*v102 >> 4) ^ (*v102 >> 9));
                    uint64_t v109 = *(void *)(v106 + 16 * (v107 & ((*v102 >> 4) ^ (*v102 >> 9))));
                    if (v109 != *v102) {
                      break;
                    }
LABEL_177:
                    uint64_t v110 = *(unsigned int *)(v106 + 16 * v108 + 8);
                    if (v110 == 0xFFFFFFFFLL) {
                      goto LABEL_187;
                    }
                    unint64_t v111 = *(void *)(*(void *)(v104 + 8) + 24 * v110 + 16);
LABEL_179:
                    if (v103 <= v111) {
                      unint64_t v103 = v111;
                    }
                    if (++v102 == v908) {
                      goto LABEL_191;
                    }
                  }
                  int v112 = 1;
                  while (v109 != -4096)
                  {
                    int v113 = v108 + v112++;
                    uint64_t v108 = v113 & v107;
                    uint64_t v109 = *(void *)(v106 + 16 * v108);
                    if (v109 == *v102) {
                      goto LABEL_177;
                    }
                  }
LABEL_187:
                  unint64_t v111 = 0;
                  goto LABEL_179;
                }
              }
            }
            unint64_t v103 = 0;
LABEL_191:
            long long v899 = 0uLL;
            LODWORD(v900) = 0;
            v902 = 0;
            uint64_t v903 = 0;
            v901 = 0;
            uint64_t v114 = *(void *)(a1 + 888);
            uint64_t v115 = v889 & 0x7FFFFFFF;
            uint64_t v116 = (void *)(v114 + 408);
            uint64_t v117 = *(unsigned int *)(v114 + 416);
            if (v115 >= v117)
            {
              sub_1CB9153B8((uint64_t)v116, v115 - v117 + 1, *(void *)(v114 + 424));
LABEL_326:
              operator new();
            }
            uint64_t v118 = *(void *)(*v116 + 8 * v115);
            if (!v118) {
              goto LABEL_326;
            }
            unint64_t v119 = v919;
            if (v919 >= 2)
            {
              for (unint64_t j = 1; j < v119; ++j)
              {
                unint64_t v121 = *((void *)__base + j);
                unint64_t v122 = v121 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v123 = *(void *)(*(void *)(a1 + 888) + 288);
                if (v121 >= 8 && (uint64_t v124 = *(void *)(v122 + 16)) != 0)
                {
                  uint64_t v125 = (uint64_t *)(v124 + 24);
                }
                else
                {
                  uint64_t v156 = *(void **)(v123 + 536);
                  unint64_t v157 = *(unsigned int *)(v123 + 544);
                  if (v157)
                  {
                    unsigned int v158 = (v121 >> 1) & 3 | *(_DWORD *)((v121 & 0xFFFFFFFFFFFFFFF8) + 24);
                    int64_t v159 = v156;
                    unint64_t v160 = v157;
                    do
                    {
                      unint64_t v161 = v160 >> 1;
                      uint64_t v162 = &v159[2 * (v160 >> 1)];
                      uint64_t v164 = *v162;
                      v163 = v162 + 2;
                      v160 += ~(v160 >> 1);
                      if (((v164 >> 1) & 3 | *(_DWORD *)((v164 & 0xFFFFFFFFFFFFFFF8) + 24)) < v158) {
                        int64_t v159 = v163;
                      }
                      else {
                        unint64_t v160 = v161;
                      }
                    }
                    while (v160);
                    if (v159 == &v156[2 * v157]
                      || ((*v159 >> 1) & 3 | *(_DWORD *)((*v159 & 0xFFFFFFFFFFFFFFF8) + 24)) > v158)
                    {
                      v159 -= 2;
                    }
                  }
                  else
                  {
                    int64_t v159 = *(void **)(v123 + 536);
                  }
                  uint64_t v125 = v159 + 1;
                }
                unint64_t v126 = *(void *)(*(void *)(a1 + 904) + 248);
                if (v126)
                {
                  int v127 = *(_DWORD *)(v126 + 176);
                  if (!v127) {
                    goto LABEL_251;
                  }
                  uint64_t v128 = *v125;
                  uint64_t v129 = *(void *)(v126 + 160);
                  unsigned int v130 = v127 - 1;
                  uint64_t v131 = (v127 - 1) & ((v128 >> 4) ^ (v128 >> 9));
                  uint64_t v132 = *(void *)(v129 + 16 * v131);
                  if (v132 != v128)
                  {
                    int v141 = 1;
                    while (v132 != -4096)
                    {
                      int v142 = v131 + v141++;
                      uint64_t v131 = v142 & v130;
                      uint64_t v132 = *(void *)(v129 + 16 * v131);
                      if (v132 == v128) {
                        goto LABEL_201;
                      }
                    }
LABEL_251:
                    unint64_t v126 = 0;
                    goto LABEL_203;
                  }
LABEL_201:
                  uint64_t v133 = *(unsigned int *)(v129 + 16 * v131 + 8);
                  if (v133 == 0xFFFFFFFFLL) {
                    goto LABEL_251;
                  }
                  unint64_t v126 = *(void *)(*(void *)(v126 + 8) + 24 * v133 + 16);
                }
LABEL_203:
                uint64_t v134 = *(void *)(a1 + 880);
                if ((v889 & 0x80000000) != 0) {
                  uint64_t v135 = (uint64_t *)(*(void *)(v134 + 24) + 16 * (v889 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v135 = (uint64_t *)(*(void *)(v134 + 272) + 8 * v889);
                }
                uint64_t v136 = *v135;
                if (!v136) {
                  continue;
                }
                if ((*(unsigned char *)(v136 + 3) & 1) == 0)
                {
                  uint64_t v136 = *(void *)(v136 + 24);
                  if (!v136 || (*(unsigned char *)(v136 + 3) & 1) == 0) {
                    continue;
                  }
                }
                uint64_t v137 = *(void *)(v136 + 24);
                if (v137 && (*(unsigned char *)(v137 + 3) & 1) == 0) {
                  uint64_t v137 = 0;
                }
                if (v126 > v103 || v137) {
                  continue;
                }
                uint64_t v138 = *(void *)(v118 + 64);
                uint64_t v139 = *(unsigned int *)(v118 + 72);
                *(void *)&long long v895 = &v896;
                *((void *)&v895 + 1) = 0x200000000;
                if (v121 < 8)
                {
                  int v140 = 0;
                  if (v139)
                  {
LABEL_220:
                    uint64_t v143 = v138 + 8 * v139;
                    do
                    {
                      ++*(_DWORD *)(a1 + 968);
                      unint64_t v144 = *(void *)(*(void *)v138 + 8);
                      if (v144 < 8) {
                        uint64_t v145 = 0;
                      }
                      else {
                        uint64_t v145 = *(void *)((v144 & 0xFFFFFFFFFFFFFFF8) + 16);
                      }
                      (*(void (**)(void, void, void *, void, void, uint64_t, void))(**(void **)(a1 + 848) + 176))(*(void *)(a1 + 848), v140[3], v140, v889, 0, v145, *(void *)(a1 + 864));
                      unint64_t v146 = *v140 & 0xFFFFFFFFFFFFFFF8;
                      if (!v146 || (*(unsigned char *)v146 & 4) == 0)
                      {
                        while ((*(_WORD *)(v146 + 44) & 4) != 0)
                          unint64_t v146 = *(void *)v146 & 0xFFFFFFFFFFFFFFF8;
                      }
                      if (DWORD2(v895) >= (unint64_t)HIDWORD(v895)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *(void *)(v895 + 8 * DWORD2(v895)) = v146;
                      uint64_t v147 = ++DWORD2(v895);
                      v138 += 8;
                    }
                    while (v138 != v143);
                    if (v147)
                    {
                      v148 = (uint64_t *)v895;
                      uint64_t v149 = 8 * v147;
                      do
                      {
                        uint64_t v150 = *v148++;
                        sub_1CB914C88(*(void *)(*(void *)(a1 + 888) + 288), v150, 0);
                        v149 -= 8;
                      }
                      while (v149);
                      if (DWORD2(v895))
                      {
                        uint64_t v151 = v895;
                        uint64_t v152 = v895 + 8 * DWORD2(v895);
                        do
                        {
                          uint64_t v153 = *(unsigned int *)(*(void *)v151 + 40);
                          if (v153)
                          {
                            uint64_t v154 = 32 * v153;
                            int v155 = (_DWORD *)(*(void *)(*(void *)v151 + 32) + 4);
                            do
                            {
                              if ((*(v155 - 1) & 0x10000FF) == 0)
                              {
                                LODWORD(v887[0]) = *v155;
                                sub_1CBA84648((uint64_t)&v899, (int *)v887);
                              }
                              v155 += 8;
                              v154 -= 32;
                            }
                            while (v154);
                          }
                          v151 += 8;
                        }
                        while (v151 != v152);
                      }
                    }
                  }
                }
                else
                {
                  int v140 = *(void **)(v122 + 16);
                  if (v139) {
                    goto LABEL_220;
                  }
                }
                if (v901 != v902) {
                  sub_1CBA84648((uint64_t)&v899, (int *)&v889);
                }
                if ((long long *)v895 != &v896) {
                  free((void *)v895);
                }
                unint64_t v119 = v919;
              }
            }
            uint64_t v165 = v901;
            v880 = v902;
            if (v901 != v902)
            {
              do
              {
                uint64_t v166 = *(void *)(a1 + 888);
                uint64_t v167 = *v165 & 0x7FFFFFFF;
                uint64_t v168 = (void *)(v166 + 408);
                uint64_t v169 = *(unsigned int *)(v166 + 416);
                if ((*v165 & 0x7FFFFFFFu) >= v169)
                {
                  sub_1CB9153B8((uint64_t)v168, v167 - v169 + 1, *(void *)(v166 + 424));
LABEL_315:
                  operator new();
                }
                uint64_t v170 = *(void *)(*v168 + 8 * v167);
                if (!v170) {
                  goto LABEL_315;
                }
                if (*v165 == v889)
                {
                  sub_1CBB238E8(a1 + 688, (int *)&v889);
                  uint64_t v171 = *(void *)(a1 + 888);
                  uint64_t v172 = *(void *)(v171 + 408);
                  uint64_t v173 = *(void *)(v172 + 8 * v167);
                  if (v173)
                  {
                    uint64_t v174 = *(void *)(v173 + 104);
                    if (v174)
                    {
                      do
                      {
                        uint64_t v188 = *(void *)(v174 + 96);
                        uint64_t v187 = *(void *)(v174 + 104);
                        *(void *)(v174 + 96) = 0;
                        if (v188)
                        {
                          sub_1CB833A08(v188, *(void **)(v188 + 8));
                          MEMORY[0x1D25D9CE0](v188, 0x1020C4062D53EE8);
                        }
                        v189 = *(void **)(v174 + 64);
                        if (v189 != (void *)(v174 + 80)) {
                          free(v189);
                        }
                        if (*(void *)v174 != v174 + 16) {
                          free(*(void **)v174);
                        }
                        uint64_t v174 = v187;
                      }
                      while (v187);
                    }
                    uint64_t v175 = *(void *)(v173 + 96);
                    *(void *)(v173 + 96) = 0;
                    *(void *)(v173 + 104) = 0;
                    if (v175)
                    {
                      sub_1CB833A08(v175, *(void **)(v175 + 8));
                      MEMORY[0x1D25D9CE0](v175, 0x1020C4062D53EE8);
                    }
                    int v176 = *(void **)(v173 + 64);
                    if (v176 != (void *)(v173 + 80)) {
                      free(v176);
                    }
                    if (*(void *)v173 != v173 + 16) {
                      free(*(void **)v173);
                    }
                    MEMORY[0x1D25D9CE0](v173, 0x10A0C408DA535C6);
                    uint64_t v172 = *(void *)(v171 + 408);
                  }
                  *(void *)(v172 + 8 * v167) = 0;
                  uint64_t v177 = *(void *)(a1 + 888);
                  uint64_t v178 = *(unsigned int *)(v177 + 416);
                  if (v167 >= v178) {
                    sub_1CB9153B8(v177 + 408, v167 - v178 + 1, *(void *)(v177 + 424));
                  }
                  operator new();
                }
                if (*(void *)(v170 + 104))
                {
                  *(_DWORD *)(v170 + 72) = 0;
                  *(_DWORD *)(v170 + 8) = 0;
                  uint64_t v179 = *(void *)(a1 + 888);
                  uint64_t v180 = *(void *)(v179 + 408);
                  uint64_t v181 = *(void *)(v180 + 8 * v167);
                  if (v181)
                  {
                    uint64_t v182 = *(void *)(v181 + 104);
                    if (v182)
                    {
                      do
                      {
                        uint64_t v191 = *(void *)(v182 + 96);
                        uint64_t v190 = *(void *)(v182 + 104);
                        *(void *)(v182 + 96) = 0;
                        if (v191)
                        {
                          sub_1CB833A08(v191, *(void **)(v191 + 8));
                          MEMORY[0x1D25D9CE0](v191, 0x1020C4062D53EE8);
                        }
                        uint64_t v192 = *(void **)(v182 + 64);
                        if (v192 != (void *)(v182 + 80)) {
                          free(v192);
                        }
                        if (*(void *)v182 != v182 + 16) {
                          free(*(void **)v182);
                        }
                        uint64_t v182 = v190;
                      }
                      while (v190);
                    }
                    uint64_t v183 = *(void *)(v181 + 96);
                    *(void *)(v181 + 96) = 0;
                    *(void *)(v181 + 104) = 0;
                    if (v183)
                    {
                      sub_1CB833A08(v183, *(void **)(v183 + 8));
                      MEMORY[0x1D25D9CE0](v183, 0x1020C4062D53EE8);
                    }
                    uint64_t v184 = *(void **)(v181 + 64);
                    if (v184 != (void *)(v181 + 80)) {
                      free(v184);
                    }
                    if (*(void *)v181 != v181 + 16) {
                      free(*(void **)v181);
                    }
                    MEMORY[0x1D25D9CE0](v181, 0x10A0C408DA535C6);
                    uint64_t v180 = *(void *)(v179 + 408);
                  }
                  *(void *)(v180 + 8 * v167) = 0;
                  uint64_t v185 = *(void *)(a1 + 888);
                  uint64_t v186 = *(unsigned int *)(v185 + 416);
                  if (v167 >= v186) {
                    sub_1CB9153B8(v185 + 408, v167 - v186 + 1, *(void *)(v185 + 424));
                  }
                  operator new();
                }
                llvm::LiveIntervals::extendToUses(*(llvm::LiveIntervals **)(a1 + 888), (llvm::LiveInterval *)v170);
                ++v165;
              }
              while (v165 != v880);
              uint64_t v165 = v901;
            }
            uint64_t v74 = v872;
            uint64_t v73 = v874;
            if (v165)
            {
              v902 = v165;
              operator delete(v165);
            }
            MEMORY[0x1D25D9CD0](v899, 4);
            if (__p)
            {
              v908 = __p;
              operator delete(__p);
            }
            MEMORY[0x1D25D9CD0](v904, 8);
          }
          if (__base != v920) {
            free(__base);
          }
          ++v73;
        }
        while (v73 != v74);
      }
    }
    v910 = &unk_1F2646B98;
    if (v915 == 1 && v912[0]) {
      MEMORY[0x1D25D9CB0](v912[0], 0x1000C8077774924);
    }
    if (SHIBYTE(v894[0]) < 0) {
      operator delete(v892);
    }
    if ((void)v923)
    {
      *((void *)&v923 + 1) = v923;
      operator delete((void *)v923);
    }
    MEMORY[0x1D25D9CD0](v921, 4);
  }
  int v193 = *(uint64_t ***)(a1 + 608);
  uint64_t v194 = *(unsigned int *)(a1 + 616);
  if (*(_DWORD *)(a1 + 912))
  {
    v887[0] = a1;
    v892 = v887;
    uint64_t v893 = a1;
    uint64_t v195 = *(void *)(a1 + 888);
    v910 = v912;
    uint64_t v911 = 0x400000000;
    uint64_t v917 = v195;
    v889 = v891;
    size_t __nel = 0;
    if (v194)
    {
      uint64_t v196 = 8 * v194;
      do
      {
        uint64_t v197 = **v193;
        if (*(_DWORD *)(v197 + 8) && sub_1CBB25324(**v193, *(void *)(a1 + 880)) - 1 <= 1)
        {
          uint64_t v198 = *(void *)(*(void *)v197 + 24 * *(unsigned int *)(v197 + 8) - 16);
          if (__nel >= (unint64_t)HIDWORD(__nel)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v889 + __nel) = v198;
          LODWORD(__nel) = __nel + 1;
        }
        ++v193;
        v196 -= 8;
      }
      while (v196);
      if (__nel >= 2) {
        qsort(v889, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CBB24DA4);
      }
    }
    LODWORD(v922) = 0;
    LOBYTE(v924) = 0;
    *((void *)&v924 + 1) = 0;
    *((void *)&v925 + 1) = a1 + 920;
    LODWORD(v925) = 0;
    v921 = (llvm::MachineOperand *)&unk_1F2646F30;
    *((void *)&v922 + 1) = 0;
    long long v923 = 0uLL;
    uint64_t v199 = *(unsigned int *)(a1 + 616);
    if (v199)
    {
      uint64_t v200 = *(uint64_t ***)(a1 + 608);
      v869 = &v200[v199];
      v863 = (llvm::SmallPtrSetImplBase *)(a1 + 512);
      v876 = (long long *)&v906;
LABEL_348:
      v873 = *v200;
      v875 = v200;
      uint64_t v201 = **v200;
      *(void *)&long long v895 = &v896;
      *((void *)&v895 + 1) = 0x400000000;
      uint64_t v877 = v201;
      if (!*(_DWORD *)(v201 + 8)) {
        goto LABEL_545;
      }
      uint64_t v202 = *(void *)(a1 + 880);
      uint64_t v203 = *(unsigned int *)(v877 + 112);
      uint64_t v204 = (uint64_t *)((v203 & 0x80000000) != 0
                       ? *(void *)(v202 + 24) + 16 * (v203 & 0x7FFFFFFF) + 8
                       : *(void *)(v202 + 272) + 8 * v203);
      uint64_t v205 = *v204;
      if (!*v204) {
        goto LABEL_545;
      }
      while ((*(unsigned char *)(v205 + 3) & 1) != 0)
      {
        uint64_t v205 = *(void *)(v205 + 24);
        if (!v205) {
          goto LABEL_545;
        }
      }
      unsigned int v206 = 0;
      uint64_t v207 = *(void *)(v205 + 8);
LABEL_356:
      uint64_t v208 = *(void *)(v207 + 16);
      if ((*(unsigned char *)(v208 + 8) & 8) == 0 && (*(void *)(v208 + 16) & 2) != 0)
      {
        if (v206 >= HIDWORD(v895)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v895 + 8 * v206) = v207;
        unsigned int v206 = ++DWORD2(v895);
        uint64_t v207 = *(void *)(v205 + 8);
      }
      while (1)
      {
        uint64_t v205 = *(void *)(v205 + 24);
        if (!v205) {
          break;
        }
        if ((*(unsigned char *)(v205 + 3) & 1) == 0 && *(void *)(v205 + 8) != v207)
        {
          uint64_t v207 = *(void *)(v205 + 8);
          goto LABEL_356;
        }
      }
      if (!v206) {
        goto LABEL_545;
      }
      __base = v920;
      size_t v919 = 0x800000000;
      uint64_t v209 = (uint64_t *)v895;
      uint64_t v878 = v895 + 8 * v206;
      while (1)
      {
        uint64_t v210 = *v209;
        v904 = &v906;
        uint64_t v905 = 0x400000000;
        if (v210) {
          break;
        }
LABEL_476:
        if (++v209 == (uint64_t *)v878)
        {
          if (v919 == 1)
          {
            char v281 = 0;
            uint64_t v282 = __base;
            uint64_t v280 = *(void *)__base;
          }
          else
          {
            if (!v919)
            {
              unint64_t v279 = 0;
              LODWORD(v280) = 0;
              char v281 = 1;
              uint64_t v282 = __base;
              goto LABEL_542;
            }
            qsort(__base, v919, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CBB24DA4);
            uint64_t v282 = __base;
            BOOL v283 = (char *)__base + 8 * v919;
            uint64_t v284 = (char *)__base;
            if (v919)
            {
              uint64_t v284 = (char *)__base - 8;
              uint64_t v285 = 8 * v919 - 8;
              while (v285)
              {
                uint64_t v286 = *((void *)v284 + 1);
                uint64_t v287 = *((void *)v284 + 2);
                v284 += 8;
                v285 -= 8;
                if (v286 == v287) {
                  goto LABEL_533;
                }
              }
            }
            else
            {
LABEL_533:
              if (v284 != v283)
              {
                uint64_t v288 = v284 + 16;
                if (v284 + 16 != v283)
                {
                  uint64_t v289 = *(void *)v284;
                  do
                  {
                    uint64_t v290 = v289;
                    uint64_t v289 = *(void *)v288;
                    if (v290 != *(void *)v288)
                    {
                      *((void *)v284 + 1) = v289;
                      v284 += 8;
                    }
                    v288 += 8;
                  }
                  while (v288 != v283);
                }
                BOOL v283 = v284 + 8;
              }
            }
            char v281 = 0;
            unint64_t v291 = v283 - v282;
            LODWORD(v919) = v291 >> 3;
            uint64_t v280 = *(void *)&v282[(v291 & 0x7FFFFFFF8) - 8];
          }
          unint64_t v279 = v280 & 0xFFFFFFFFFFFFFF00;
LABEL_542:
          if (v282 != v920) {
            free(v282);
          }
          if ((v281 & 1) == 0)
          {
            unint64_t v299 = v280 | v279;
            unint64_t v300 = *(void *)(*(void *)v877 + 24 * *(unsigned int *)(v877 + 8) - 16);
            unint64_t v301 = v280 & 0xF8 | v279 & 0xFFFFFFFFFFFFFFF8;
            unsigned int v302 = *(_DWORD *)(v301 + 0x18) | (v280 >> 1) & 3;
            unsigned int v303 = *(_DWORD *)((v300 & 0xFFFFFFFFFFFFFFF8) + 24) | (v300 >> 1) & 3;
            unsigned int v304 = v302 - v303;
            if (v302 <= v303) {
              goto LABEL_568;
            }
            uint64_t v305 = *(void *)(*(void *)(a1 + 888) + 288);
            if (v299 >= 8 && (uint64_t v306 = *(void *)(v301 + 16)) != 0)
            {
              int v307 = (uint64_t *)(v306 + 24);
            }
            else
            {
              uint64_t v366 = *(unsigned int *)(v305 + 544);
              if (v366)
              {
                v367 = *(void **)(v305 + 536);
                unint64_t v368 = *(unsigned int *)(v305 + 544);
                do
                {
                  unint64_t v369 = v368 >> 1;
                  v370 = &v367[2 * (v368 >> 1)];
                  uint64_t v372 = *v370;
                  v371 = v370 + 2;
                  v368 += ~(v368 >> 1);
                  if (((v372 >> 1) & 3 | *(_DWORD *)((v372 & 0xFFFFFFFFFFFFFFF8) + 24)) < v302) {
                    v367 = v371;
                  }
                  else {
                    unint64_t v368 = v369;
                  }
                }
                while (v368);
                if (v367 == (void *)(*(void *)(v305 + 536) + 16 * v366)
                  || ((*v367 >> 1) & 3 | *(_DWORD *)((*v367 & 0xFFFFFFFFFFFFFFF8) + 24)) > v302)
                {
                  v367 -= 2;
                }
              }
              else
              {
                v367 = *(void **)(v305 + 536);
              }
              int v307 = v367 + 1;
            }
            if (v300 >= 8 && (uint64_t v308 = *(void *)((v300 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
            {
              uint64_t v309 = (uint64_t *)(v308 + 24);
            }
            else
            {
              v373 = *(void **)(v305 + 536);
              unint64_t v374 = *(unsigned int *)(v305 + 544);
              if (v374)
              {
                v375 = v373;
                unint64_t v376 = v374;
                do
                {
                  unint64_t v377 = v376 >> 1;
                  v378 = &v375[2 * (v376 >> 1)];
                  uint64_t v380 = *v378;
                  v379 = v378 + 2;
                  v376 += ~(v376 >> 1);
                  if (((v380 >> 1) & 3 | *(_DWORD *)((v380 & 0xFFFFFFFFFFFFFFF8) + 24)) < v303) {
                    v375 = v379;
                  }
                  else {
                    unint64_t v376 = v377;
                  }
                }
                while (v376);
                if (v375 == &v373[2 * v374]
                  || ((*v375 >> 1) & 3 | *(_DWORD *)((*v375 & 0xFFFFFFFFFFFFFFF8) + 24)) > v303)
                {
                  v375 -= 2;
                }
              }
              else
              {
                v375 = v373;
              }
              uint64_t v309 = v375 + 1;
            }
            uint64_t v310 = *v307;
            if (!*v307) {
              goto LABEL_568;
            }
            uint64_t v311 = *v309;
            BOOL v312 = !v311 || v310 == v311;
            if (v312 || !*(unsigned char *)(*(void *)(a1 + 856) + 305) || *(_DWORD *)(a1 + 616) < 0x32u) {
              goto LABEL_568;
            }
            int v354 = *(_DWORD *)(v310 + 24);
            int v355 = *(_DWORD *)(v311 + 24);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0D20, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCC0D20))
            {
              byte_1EBCC0D08 = 1;
              __cxa_guard_release(&qword_1EBCC0D20);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0D28, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EBCC0D28))
            {
              byte_1EBCC0D0C = 1;
              __cxa_guard_release(&qword_1EBCC0D28);
            }
            if ((byte_1EBCC0D08 & 1) != 0 || (byte_1EBCC0D0C & 1) != 0 || ((v354 - v355) & v304 & 0x80000000) != 0)
            {
LABEL_568:
              uint64_t v313 = v875;
            }
            else
            {
              uint64_t v313 = v875;
              if (v300 != v299)
              {
                v356 = (_OWORD *)*((void *)&v923 + 1);
                if ((void)v923 - *((void *)&v923 + 1) > 0x12uLL)
                {
                  *(_DWORD *)(*((void *)&v923 + 1) + 15) = 543515502;
                  _OWORD *v356 = *(_OWORD *)"Shrunk to distance ";
                  *((void *)&v923 + 1) += 19;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v921, "Shrunk to distance ", 0x13uLL);
                }
                sub_1CD098D14((llvm::raw_ostream *)&v921, 0, 0, 0, 0);
                if ((void)v923 == *((void *)&v923 + 1))
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v921, "\n", 1uLL);
                }
                else
                {
                  **((unsigned char **)&v923 + 1) = 10;
                  ++*((void *)&v923 + 1);
                }
                unint64_t v299 = v300;
              }
            }
            sub_1CBB250A8(a1, v877, v299);
            goto LABEL_635;
          }
LABEL_545:
          uint64_t v292 = *v873;
          if (!*(_DWORD *)(*v873 + 8)) {
            goto LABEL_588;
          }
          if (!*(unsigned char *)(a1 + 944)) {
            goto LABEL_585;
          }
          uint64_t v293 = *(void *)(a1 + 880);
          uint64_t v294 = *(unsigned int *)(v292 + 112);
          uint64_t v295 = *(void *)(v293 + 24);
          if (*(_WORD *)(*(void *)(*(void *)(v295 + 16 * (v294 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24) == 14) {
            goto LABEL_585;
          }
          int v296 = sub_1CBB26664(*(void *)(a1 + 880), *(_DWORD *)(v292 + 112));
          uint64_t v297 = (uint64_t *)((v294 & 0x80000000) != 0
                           ? v295 + 16 * (v294 & 0x7FFFFFFF) + 8
                           : *(void *)(v293 + 272) + 8 * v294);
          uint64_t v298 = *v297;
          if (!*v297) {
            goto LABEL_585;
          }
          while ((*(_DWORD *)v298 & 0x81000000) != 0)
          {
            uint64_t v298 = *(void *)(v298 + 24);
            if (!v298) {
              goto LABEL_585;
            }
          }
          char v314 = 0;
LABEL_571:
          if (**(_WORD **)(*(void *)(v298 + 8) + 16) != 4998) {
            goto LABEL_574;
          }
          if (!sub_1CBB26718(a1, v298, v296))
          {
            char v314 = 1;
LABEL_574:
            while (1)
            {
              uint64_t v298 = *(void *)(v298 + 24);
              if (!v298) {
                break;
              }
              if ((*(_DWORD *)v298 & 0x81000000) == 0) {
                goto LABEL_571;
              }
            }
            if (v314)
            {
              uint64_t v315 = *(unsigned int *)(v292 + 72);
              if (v315)
              {
                uint64_t v316 = *(void *)(v292 + 64);
                uint64_t v317 = 8 * v315;
                while (*(void *)(*(void *)v316 + 8) < 8uLL || (*(void *)(*(void *)v316 + 8) & 6) != 0)
                {
                  v316 += 8;
                  v317 -= 8;
                  if (!v317) {
                    goto LABEL_585;
                  }
                }
                goto LABEL_588;
              }
            }
LABEL_585:
            if (*(_DWORD *)(a1 + 912) != 2) {
              goto LABEL_588;
            }
            unint64_t v319 = *(void *)(*(void *)v292 + 24 * *(unsigned int *)(v292 + 8) - 16);
            if ((v319 & 6) == 0)
            {
              unsigned int v334 = (v319 >> 1) & 3;
              unint64_t v335 = v319 & 0xFFFFFFFFFFFFFFF8;
              if (v334) {
                unint64_t v319 = v335 | (2 * (v334 - 1));
              }
              else {
                unint64_t v319 = *(void *)v335 | 6;
              }
            }
            uint64_t v337 = *(void *)(*(void *)(a1 + 888) + 288);
            unint64_t v338 = v319 & 0xFFFFFFFFFFFFFFF8;
            if (v319 >= 8 && (uint64_t v339 = *(void *)(v338 + 16)) != 0)
            {
              v340 = (uint64_t *)(v339 + 24);
            }
            else
            {
              uint64_t v357 = *(unsigned int *)(v337 + 544);
              if (v357)
              {
                unsigned int v358 = *(_DWORD *)(v338 + 24) | (v319 >> 1) & 3;
                v359 = *(void **)(v337 + 536);
                unint64_t v360 = *(unsigned int *)(v337 + 544);
                do
                {
                  unint64_t v361 = v360 >> 1;
                  v362 = &v359[2 * (v360 >> 1)];
                  uint64_t v364 = *v362;
                  v363 = v362 + 2;
                  v360 += ~(v360 >> 1);
                  if (((v364 >> 1) & 3 | *(_DWORD *)((v364 & 0xFFFFFFFFFFFFFFF8) + 24)) < v358) {
                    v359 = v363;
                  }
                  else {
                    unint64_t v360 = v361;
                  }
                }
                while (v360);
                if (v359 == (void *)(*(void *)(v337 + 536) + 16 * v357)
                  || ((*v359 >> 1) & 3 | *(_DWORD *)((*v359 & 0xFFFFFFFFFFFFFFF8) + 24)) > v358)
                {
                  v359 -= 2;
                }
              }
              else
              {
                v359 = *(void **)(v337 + 536);
              }
              v340 = v359 + 1;
            }
            v341 = (uint64_t *)*v340;
            unint64_t v342 = *(void *)(*(void *)(v337 + 392) + 16 * *(unsigned int *)(*v340 + 24) + 8);
            unsigned int v343 = *(_DWORD *)((v342 & 0xFFFFFFFFFFFFFFF8) + 24) - *(_DWORD *)(v338 + 24);
            if (v343 < 0x204)
            {
              sub_1CBB25324(v292, *(void *)(a1 + 880));
              if ((v343 & 0xFFFFFFFC) == 0x200)
              {
LABEL_630:
                unint64_t v347 = v342;
              }
              else
              {
                if (*(unsigned char *)(*(void *)(a1 + 856) + 380))
                {
                  unint64_t v348 = sub_1CD420C04(v889, __nel, v319);
                  if (v365) {
                    goto LABEL_633;
                  }
                }
                while (1)
                {
                  v349 = (uint64_t *)v341[11];
                  v350 = (uint64_t *)v341[12];
                  if (v349 == v350) {
                    break;
                  }
                  while (1)
                  {
                    v341 = (uint64_t *)*v349;
                    if (*v349 + 48 != (*(void *)(*v349 + 48) & 0xFFFFFFFFFFFFFFF8))
                    {
                      uint64_t v351 = sub_1CBB25A34((uint64_t)&v910, *v349);
                      if (*(_DWORD *)(v351 + 8))
                      {
                        uint64_t v352 = sub_1CBB265E0((uint64_t *)v351, v341[7]);
                        unint64_t v347 = v352;
                        int v353 = *(_DWORD *)((v352 & 0xFFFFFFFFFFFFFFF8) + 24);
                        if (((v352 >> 1) & 3 | v353) > (*(_DWORD *)((v342 & 0xFFFFFFFFFFFFFFF8) + 24) | (v342 >> 1) & 3)) {
                          break;
                        }
                      }
                    }
                    if (++v349 == v350) {
                      goto LABEL_630;
                    }
                  }
                  unint64_t v342 = v352;
                  if ((v353 - *(_DWORD *)(v338 + 24)) > 0x1FF) {
                    goto LABEL_634;
                  }
                }
                unint64_t v347 = v342;
              }
            }
            else
            {
              v344 = (uint64_t *)sub_1CBB25A34((uint64_t)&v910, *v340);
              unint64_t v345 = *(void *)(*(void *)v292 + 24 * *(unsigned int *)(v292 + 8) - 16);
              llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(a1 + 888), v292);
              if (v345 < 8) {
                uint64_t v346 = 0;
              }
              else {
                uint64_t v346 = *(void *)((v345 & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              unint64_t v348 = sub_1CBB265E0(v344, v346);
LABEL_633:
              unint64_t v347 = v348;
            }
LABEL_634:
            sub_1CBB250A8(a1, v877, v347);
            uint64_t v313 = v875;
LABEL_635:
            if ((long long *)v895 != &v896) {
              free((void *)v895);
            }
            uint64_t v200 = v313 + 1;
            if (v200 == v869)
            {
              uint64_t v57 = *((void *)&v923 + 1) - *((void *)&v922 + 1);
              if (*((void *)&v923 + 1) != *((void *)&v922 + 1))
              {
                *((void *)&v923 + 1) = *((void *)&v922 + 1);
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v921, *((const char **)&v922 + 1));
              }
              goto LABEL_711;
            }
            goto LABEL_348;
          }
LABEL_588:
          uint64_t v320 = *(void *)(a1 + 520);
          uint64_t v321 = *(unsigned int *)(a1 + 532);
          if (v320 == *(void *)(a1 + 512))
          {
            uint64_t v313 = v875;
            if (v321)
            {
              v322 = 0;
              uint64_t v323 = 8 * v321;
              v324 = *(uint64_t **)(a1 + 520);
              while (*v324 != v292)
              {
                if (*v324 == -2) {
                  v322 = v324;
                }
                ++v324;
                v323 -= 8;
                if (!v323)
                {
                  if (!v322) {
                    goto LABEL_596;
                  }
                  uint64_t *v322 = v292;
                  --*(_DWORD *)(a1 + 536);
                  goto LABEL_635;
                }
              }
              goto LABEL_635;
            }
LABEL_596:
            unsigned int v325 = *(_DWORD *)(a1 + 528);
            if (v321 < v325)
            {
              *(_DWORD *)(a1 + 532) = v321 + 1;
              *(void *)(v320 + 8 * v321) = v292;
              goto LABEL_635;
            }
          }
          else
          {
            unsigned int v325 = *(_DWORD *)(a1 + 528);
            uint64_t v313 = v875;
          }
          if (3 * v325 <= 4 * ((int)v321 - *(_DWORD *)(a1 + 536)))
          {
            if (v325 >= 0x40) {
              v325 *= 2;
            }
            else {
              unsigned int v325 = 128;
            }
          }
          else if (v325 - v321 >= v325 >> 3)
          {
            goto LABEL_601;
          }
          llvm::SmallPtrSetImplBase::Grow(v863, v325);
          unsigned int v325 = *(_DWORD *)(a1 + 528);
          uint64_t v320 = *(void *)(a1 + 520);
LABEL_601:
          unsigned int v326 = v325 - 1;
          unsigned int v327 = (v325 - 1) & ((v292 >> 4) ^ (v292 >> 9));
          v328 = (uint64_t *)(v320 + 8 * v327);
          uint64_t v329 = *v328;
          if (*v328 == -1)
          {
            v330 = 0;
LABEL_615:
            if (v330) {
              v336 = v330;
            }
            else {
              v336 = v328;
            }
            if (*v336 != v292)
            {
              if (*v336 == -2) {
                --*(_DWORD *)(a1 + 536);
              }
              else {
                ++*(_DWORD *)(a1 + 532);
              }
              uint64_t *v336 = v292;
            }
          }
          else
          {
            v330 = 0;
            int v331 = 1;
            while (v329 != v292)
            {
              if (v330) {
                BOOL v332 = 0;
              }
              else {
                BOOL v332 = v329 == -2;
              }
              if (v332) {
                v330 = v328;
              }
              unsigned int v333 = v327 + v331++;
              unsigned int v327 = v333 & v326;
              v328 = (uint64_t *)(v320 + 8 * (v333 & v326));
              uint64_t v329 = *v328;
              if (*v328 == -1) {
                goto LABEL_615;
              }
            }
          }
          goto LABEL_635;
        }
      }
      uint64_t v211 = *(unsigned int *)(*(void *)(v210 + 32) + 4);
      uint64_t v212 = *(void *)(a1 + 880);
      if ((v211 & 0x80000000) != 0) {
        uint64_t v213 = (uint64_t *)(*(void *)(v212 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v213 = (uint64_t *)(*(void *)(v212 + 272) + 8 * v211);
      }
      uint64_t v214 = *v213;
      if (!v214) {
        goto LABEL_374;
      }
      uint64_t v215 = *(void *)(*(void *)v877 + 24 * *(unsigned int *)(v877 + 8) - 16);
      while ((*(unsigned char *)(v214 + 3) & 1) != 0)
      {
        uint64_t v214 = *(void *)(v214 + 24);
        if (!v214) {
          goto LABEL_374;
        }
      }
      if ((v211 & 0x80000000) != 0) {
        v216 = (uint64_t *)(*(void *)(v212 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
      }
      else {
        v216 = (uint64_t *)(*(void *)(v212 + 272) + 8 * v211);
      }
      uint64_t v217 = *v216;
      if (v217
        && ((*(unsigned char *)(v217 + 3) & 1) != 0 || (uint64_t v217 = *(void *)(v217 + 24)) != 0 && (*(unsigned char *)(v217 + 3) & 1) != 0))
      {
        uint64_t v219 = *(void *)(v217 + 24);
        if (v219)
        {
          LOBYTE(v218) = (*(unsigned char *)(v219 + 3) & 1) == 0;
          if ((v211 & 0x80000000) != 0) {
            goto LABEL_383;
          }
        }
        else
        {
          LOBYTE(v218) = 1;
          if ((v211 & 0x80000000) != 0) {
            goto LABEL_383;
          }
        }
      }
      else
      {
        LOBYTE(v218) = 0;
        if ((v211 & 0x80000000) != 0)
        {
LABEL_383:
          v220 = (uint64_t *)(*(void *)(v212 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
          goto LABEL_384;
        }
      }
      v220 = (uint64_t *)(*(void *)(v212 + 272) + 8 * v211);
LABEL_384:
      uint64_t v221 = *v220;
      if (!*v220) {
        goto LABEL_444;
      }
      while ((*(unsigned char *)(v221 + 3) & 1) != 0)
      {
        uint64_t v221 = *(void *)(v221 + 24);
        if (!v221) {
          goto LABEL_444;
        }
      }
      unint64_t v222 = v215 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v223 = *(void *)(v221 + 8);
      char v224 = 1;
LABEL_389:
      int v225 = **(unsigned __int16 **)(v223 + 16);
      if (v225 != 19 && v225 != 11)
      {
LABEL_399:
        if ((v211 & 0x80000000) != 0)
        {
          if ((v225 - 13) >= 5 && v225 != 7)
          {
            unint64_t v232 = v222;
            sub_1CBB25678(a1, &v892, v223, v215, (uint64_t)&v904, v218 & 1);
            unint64_t v222 = v232;
            char v224 = 0;
          }
LABEL_401:
          uint64_t v231 = *(void *)(v221 + 8);
          while (1)
          {
            uint64_t v221 = *(void *)(v221 + 24);
            if (!v221) {
              break;
            }
            if ((*(unsigned char *)(v221 + 3) & 1) == 0)
            {
              unint64_t v223 = *(void *)(v221 + 8);
              if (v223 != v231) {
                goto LABEL_389;
              }
            }
          }
          if ((v224 & 1) == 0) {
            goto LABEL_449;
          }
          uint64_t v212 = *(void *)(a1 + 880);
LABEL_444:
          if ((v211 & 0x80000000) != 0) {
            v250 = (uint64_t *)(*(void *)(v212 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
          }
          else {
            v250 = (uint64_t *)(*(void *)(v212 + 272) + 8 * v211);
          }
          uint64_t v251 = *v250;
          if (*v250)
          {
            while ((*(unsigned char *)(v251 + 3) & 1) != 0)
            {
              uint64_t v251 = *(void *)(v251 + 24);
              if (!v251) {
                goto LABEL_449;
              }
            }
            unint64_t v259 = *(void *)(v251 + 8);
LABEL_455:
            sub_1CBB25678(a1, &v892, v259, v215, (uint64_t)&v904, v218 & 1);
            uint64_t v260 = *(void *)(v251 + 8);
            while (1)
            {
              uint64_t v251 = *(void *)(v251 + 24);
              if (!v251) {
                break;
              }
              if ((*(unsigned char *)(v251 + 3) & 1) == 0)
              {
                unint64_t v259 = *(void *)(v251 + 8);
                if (v259 != v260) {
                  goto LABEL_455;
                }
              }
            }
          }
LABEL_449:
          uint64_t v252 = *(void *)(a1 + 888);
          v253 = (void *)(v252 + 408);
          unint64_t v254 = *(unsigned int *)(v252 + 416);
          BOOL v516 = (v211 & 0x7FFFFFFF) >= v254;
          unint64_t v255 = (v211 & 0x7FFFFFFF) - v254;
          if (v516)
          {
            sub_1CB9153B8((uint64_t)v253, v255 + 1, *(void *)(v252 + 424));
LABEL_521:
            operator new();
          }
          uint64_t v256 = *(void *)(*v253 + 8 * (v211 & 0x7FFFFFFF));
          if (!v256) {
            goto LABEL_521;
          }
          uint64_t v257 = *(void *)(*(void *)v256 + 24 * *(unsigned int *)(v256 + 8) - 16);
          int v258 = v905;
          if (((v257 >> 1) & 3 | *(_DWORD *)((v257 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v215 & 0xFFFFFFFFFFFFFFF8) + 24) | (v215 >> 1) & 3))
          {
            if (v905)
            {
              *(void *)&long long v899 = &v900;
              *((void *)&v899 + 1) = 0x400000000;
LABEL_465:
              sub_1CBA6E388((uint64_t)&v899, (const void **)&v904);
              goto LABEL_466;
            }
            if (!HIDWORD(v905)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)v904 = v257;
            int v258 = v905 + 1;
            LODWORD(v905) = v905 + 1;
          }
          *(void *)&long long v899 = &v900;
          *((void *)&v899 + 1) = 0x400000000;
          if (v258) {
            goto LABEL_465;
          }
LABEL_466:
          if (v904 != &v906) {
            free(v904);
          }
          int v261 = (llvm::MachineInstr **)v899;
          if (DWORD2(v899))
          {
            unsigned int v262 = v919;
            uint64_t v263 = 8 * DWORD2(v899);
            do
            {
              if (v262 >= HIDWORD(v919)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)__base + v262) = *v261;
              unsigned int v262 = v919 + 1;
              LODWORD(v919) = v919 + 1;
              ++v261;
              v263 -= 8;
            }
            while (v263);
            int v261 = (llvm::MachineInstr **)v899;
          }
          if (v261 != &v900) {
            free(v261);
          }
          goto LABEL_476;
        }
        uint64_t v264 = *(void *)(a1 + 520);
        uint64_t v265 = *(unsigned int *)(a1 + 532);
        if (v264 == *(void *)(a1 + 512))
        {
          if (v265)
          {
            uint64_t v266 = 0;
            uint64_t v267 = 8 * v265;
            v268 = *(uint64_t **)(a1 + 520);
            while (*v268 != v877)
            {
              if (*v268 == -2) {
                uint64_t v266 = v268;
              }
              ++v268;
              v267 -= 8;
              if (!v267)
              {
                if (!v266) {
                  goto LABEL_486;
                }
                *uint64_t v266 = v877;
                --*(_DWORD *)(a1 + 536);
                goto LABEL_374;
              }
            }
            goto LABEL_374;
          }
LABEL_486:
          unsigned int v269 = *(_DWORD *)(a1 + 528);
          if (v265 < v269)
          {
            *(_DWORD *)(a1 + 532) = v265 + 1;
            *(void *)(v264 + 8 * v265) = v877;
LABEL_374:
            *(void *)&long long v899 = &v900;
            *((void *)&v899 + 1) = 0x400000000;
            goto LABEL_466;
          }
        }
        else
        {
          unsigned int v269 = *(_DWORD *)(a1 + 528);
        }
        if (3 * v269 <= 4 * ((int)v265 - *(_DWORD *)(a1 + 536)))
        {
          if (v269 >= 0x40) {
            v269 *= 2;
          }
          else {
            unsigned int v269 = 128;
          }
        }
        else if (v269 - v265 >= v269 >> 3)
        {
          goto LABEL_491;
        }
        llvm::SmallPtrSetImplBase::Grow(v863, v269);
        unsigned int v269 = *(_DWORD *)(a1 + 528);
        uint64_t v264 = *(void *)(a1 + 520);
LABEL_491:
        unsigned int v270 = v269 - 1;
        unsigned int v271 = (v269 - 1) & ((v877 >> 4) ^ (v877 >> 9));
        int v272 = (uint64_t *)(v264 + 8 * v271);
        uint64_t v273 = *v272;
        if (*v272 == -1)
        {
          int v274 = 0;
LABEL_503:
          if (v274) {
            int v278 = v274;
          }
          else {
            int v278 = v272;
          }
          if (*v278 != v877)
          {
            if (*v278 == -2) {
              --*(_DWORD *)(a1 + 536);
            }
            else {
              ++*(_DWORD *)(a1 + 532);
            }
            *int v278 = v877;
          }
        }
        else
        {
          int v274 = 0;
          int v275 = 1;
          while (v273 != v877)
          {
            if (v274) {
              BOOL v276 = 0;
            }
            else {
              BOOL v276 = v273 == -2;
            }
            if (v276) {
              int v274 = v272;
            }
            unsigned int v277 = v271 + v275++;
            unsigned int v271 = v277 & v270;
            int v272 = (uint64_t *)(v264 + 8 * (v277 & v270));
            uint64_t v273 = *v272;
            if (*v272 == -1) {
              goto LABEL_503;
            }
          }
        }
        goto LABEL_374;
      }
      uint64_t v227 = 0;
      unint64_t v228 = *(unsigned int *)(*(void *)(v223 + 32) + 4);
      unint64_t v229 = v228 >> 3;
      while (1)
      {
        if ((v228 - 1) <= 0x3FFFFFFE)
        {
          uint64_t v230 = (uint64_t)*(&off_1E66AB3C0)[v227];
          if (v229 < *(unsigned __int16 *)(v230 + 22)
            && ((1 << (v228 & 7)) & *(unsigned __int8 *)(*(void *)(v230 + 8) + v229)) != 0)
          {
            break;
          }
        }
        if (++v227 == 8) {
          goto LABEL_399;
        }
      }
      uint64_t v218 = *(void *)(*(void *)(*(void *)(a1 + 880) + 272) + 8 * v228);
      if (!v218) {
        goto LABEL_401;
      }
      while ((*(unsigned char *)(v218 + 3) & 1) != 0)
      {
        uint64_t v218 = *(void *)(v218 + 24);
        if (!v218) {
          goto LABEL_401;
        }
      }
      unint64_t v233 = *(void *)(v218 + 8);
LABEL_413:
      if (**(unsigned __int16 **)(v233 + 16) - 13 < 5) {
        goto LABEL_433;
      }
      __int16 v234 = *(_WORD *)(v233 + 44);
      unint64_t v235 = v233;
      if ((v234 & 4) != 0)
      {
        do
          unint64_t v235 = *(void *)v235 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v235 + 44) & 4) != 0);
      }
      unint64_t v236 = v233;
      if ((v234 & 8) != 0)
      {
        do
          unint64_t v236 = *(void *)(v236 + 8);
        while ((*(_WORD *)(v236 + 44) & 8) != 0);
      }
      unint64_t v237 = *(void *)(v236 + 8);
      if (v235 != v237)
      {
        while (1)
        {
          unsigned int v238 = **(unsigned __int16 **)(v235 + 16);
          BOOL v614 = v238 > 0x17;
          int v239 = (1 << v238) & 0x83E000;
          if (v614 || v239 == 0) {
            break;
          }
          unint64_t v235 = *(void *)(v235 + 8);
          if (v235 == v237)
          {
            unint64_t v235 = v237;
            break;
          }
        }
      }
      uint64_t v241 = *(void *)(*(void *)(a1 + 888) + 288);
      uint64_t v242 = *(void *)(v241 + 368);
      uint64_t v243 = *(unsigned int *)(v241 + 384);
      if (v243)
      {
        LODWORD(v244) = ((v235 >> 4) ^ (v235 >> 9)) & (v243 - 1);
        uint64_t v245 = (uint64_t *)(v242 + 16 * v244);
        uint64_t v246 = *v245;
        if (v235 == *v245)
        {
LABEL_430:
          uint64_t v249 = v245[1];
          if (((v249 >> 1) & 3 | *(_DWORD *)((v249 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v222 + 24) | (v215 >> 1) & 3))
          {
            if (v905 >= (unint64_t)HIDWORD(v905)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v904 + v905) = v249;
            LODWORD(v905) = v905 + 1;
            unint64_t v233 = *(void *)(v218 + 8);
          }
LABEL_433:
          while (1)
          {
            uint64_t v218 = *(void *)(v218 + 24);
            if (!v218) {
              goto LABEL_401;
            }
            if ((*(unsigned char *)(v218 + 3) & 1) == 0 && *(void *)(v218 + 8) != v233)
            {
              unint64_t v233 = *(void *)(v218 + 8);
              goto LABEL_413;
            }
          }
        }
        int v247 = 1;
        while (v246 != -4096)
        {
          int v248 = v244 + v247++;
          uint64_t v244 = v248 & (v243 - 1);
          uint64_t v246 = *(void *)(v242 + 16 * v244);
          if (v235 == v246)
          {
            uint64_t v245 = (uint64_t *)(v242 + 16 * v244);
            goto LABEL_430;
          }
        }
      }
      uint64_t v245 = (uint64_t *)(v242 + 16 * v243);
      goto LABEL_430;
    }
LABEL_711:
    v921 = (llvm::MachineOperand *)&unk_1F2646B98;
    if (v925 == 1 && *((void *)&v922 + 1)) {
      MEMORY[0x1D25D9CB0](*((void *)&v922 + 1), 0x1000C8077774924, v57);
    }
    if (v889 != v891) {
      free(v889);
    }
    v381 = v910;
    if (v911)
    {
      v852 = (char *)v910 - 8;
      uint64_t v853 = 16 * v911;
      do
      {
        v854 = *(void **)&v852[v853];
        *(void *)&v852[v853] = 0;
        if (v854)
        {
          v855 = (void *)v854[5];
          if (v855 != v854 + 7) {
            free(v855);
          }
          v856 = (void *)v854[3];
          if (v856 != v854 + 5) {
            free(v856);
          }
          MEMORY[0x1D25D9CD0](*v854, 8);
          MEMORY[0x1D25D9CE0](v854, 0x10E0C4078A40482);
        }
        v853 -= 16;
      }
      while (v853);
      v381 = v910;
    }
    if (v381 != v912) {
      free(v381);
    }
    int v193 = *(uint64_t ***)(a1 + 608);
    LODWORD(v194) = *(_DWORD *)(a1 + 616);
  }
  v910 = v912;
  uint64_t v911 = 0x800000000;
  v889 = v891;
  size_t __nel = 0x200000000;
  __base = v920;
  size_t v919 = 0x800000000;
  if (v194)
  {
    v382 = &v193[v194];
    do
    {
      v383 = *v193;
      if (!*(_DWORD *)(a1 + 912)) {
        goto LABEL_744;
      }
      uint64_t v384 = *v383;
      uint64_t v385 = *(void *)(a1 + 520);
      uint64_t v386 = *(void *)(a1 + 512);
      if (v385 == v386)
      {
        uint64_t v387 = *(unsigned int *)(a1 + 532);
        v388 = (void *)(v385 + 8 * v387);
        if (v387)
        {
          uint64_t v389 = 0;
          uint64_t v390 = 8 * v387;
          while (*(void *)(v385 + v389) != v384)
          {
            v389 += 8;
            if (v390 == v389) {
              goto LABEL_739;
            }
          }
          v388 = (void *)(v385 + v389);
        }
LABEL_739:
        uint64_t v386 = *(void *)(a1 + 520);
      }
      else
      {
        uint64_t v391 = *(unsigned int *)(a1 + 528);
        int v392 = v391 - 1;
        unsigned int v393 = (v391 - 1) & ((v384 >> 4) ^ (v384 >> 9));
        v388 = (void *)(v385 + 8 * v393);
        uint64_t v394 = *v388;
        if (*v388 == -1)
        {
          v395 = 0;
LABEL_754:
          if (v395) {
            v388 = v395;
          }
          if (*v388 != v384) {
            v388 = (void *)(v385 + 8 * v391);
          }
        }
        else
        {
          v395 = 0;
          int v396 = 1;
          while (v394 != v384)
          {
            if (v395) {
              BOOL v397 = 0;
            }
            else {
              BOOL v397 = v394 == -2;
            }
            if (v397) {
              v395 = v388;
            }
            unsigned int v398 = v393 + v396++;
            unsigned int v393 = v398 & v392;
            v388 = (void *)(v385 + 8 * (v398 & v392));
            uint64_t v394 = *v388;
            if (*v388 == -1) {
              goto LABEL_754;
            }
          }
        }
      }
      v399 = (unsigned int *)(v385 == v386 ? a1 + 532 : a1 + 528);
      if (v388 == (void *)(v385 + 8 * *v399))
      {
        if (*(unsigned char *)(a1 + 944))
        {
          uint64_t v402 = *(void *)(a1 + 880);
          uint64_t v403 = *(unsigned int *)(v384 + 112);
          if ((sub_1CBB23854(v402, *(_DWORD *)(v384 + 112)) & 1) == 0)
          {
            uint64_t v404 = *(void *)(v402 + 24);
            if (*(_WORD *)(*(void *)(*(void *)(v404 + 16 * (v403 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24) != 14)
            {
              int v405 = sub_1CBB26664(v402, v403);
              if ((v403 & 0x80000000) != 0) {
                v406 = (uint64_t *)(v404 + 16 * (v403 & 0x7FFFFFFF) + 8);
              }
              else {
                v406 = (uint64_t *)(*(void *)(v402 + 272) + 8 * v403);
              }
              uint64_t v407 = *v406;
              if (*v406)
              {
                int v408 = v405;
                while ((*(_DWORD *)v407 & 0x81000000) != 0)
                {
                  uint64_t v407 = *(void *)(v407 + 24);
                  if (!v407) {
                    goto LABEL_764;
                  }
                }
LABEL_774:
                if (sub_1CBB26718(a1, v407, v408)) {
                  goto LABEL_775;
                }
                while (1)
                {
                  uint64_t v407 = *(void *)(v407 + 24);
                  if (!v407) {
                    break;
                  }
                  if ((*(_DWORD *)v407 & 0x81000000) == 0) {
                    goto LABEL_774;
                  }
                }
              }
LABEL_764:
              uint64_t v409 = *(unsigned int *)(v384 + 72);
              if (v409)
              {
                uint64_t v410 = *(void *)(v384 + 64);
                uint64_t v411 = 8 * v409;
                while (*(void *)(*(void *)v410 + 8) < 8uLL || (*(void *)(*(void *)v410 + 8) & 6) != 0)
                {
                  v410 += 8;
                  v411 -= 8;
                  if (!v411) {
                    goto LABEL_749;
                  }
                }
LABEL_775:
                uint64_t v400 = __nel;
                if (__nel >= (unint64_t)HIDWORD(__nel)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                p_base = &v889;
                goto LABEL_751;
              }
            }
          }
        }
LABEL_749:
        uint64_t v400 = v911;
        if (v911 >= (unint64_t)HIDWORD(v911)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        p_base = &v910;
      }
      else
      {
LABEL_744:
        uint64_t v400 = v919;
        if (v919 >= (unint64_t)HIDWORD(v919)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        p_base = &__base;
      }
LABEL_751:
      *((void *)*p_base + v400) = v383;
      ++*((_DWORD *)p_base + 2);
      ++v193;
    }
    while (v193 != v382);
  }
  LOBYTE(v883) = 0;
  BYTE4(v883) = 0;
  unint64_t v883 = sub_1CBB26BA0((uint64_t *)a1, (uint64_t)&v910, (uint64_t *)&v883, 1);
  unint64_t v883 = sub_1CBB26BA0((uint64_t *)a1, (uint64_t)&v889, (uint64_t *)&v883, 1);
  unint64_t v413 = sub_1CBB26BA0((uint64_t *)a1, (uint64_t)&__base, (uint64_t *)&v883, 0);
  unint64_t v883 = v413;
  if ((v413 & 0xFF00000000) != 0) {
    unsigned int v414 = v413;
  }
  else {
    unsigned int v414 = 0;
  }
  *(void *)(a1 + 956) = 0;
  *(void *)(a1 + 964) = 0;
  *(void *)(a1 + 948) = 0;
  v415 = *(void **)(a1 + 736);
  v416 = *(void **)(a1 + 744);
  if (v415 == v416) {
    goto LABEL_1033;
  }
  uint64_t v881 = a1 + 688;
  v876 = &v923;
  v867 = *(void **)(a1 + 744);
  do
  {
    uint64_t v417 = *v415;
    *(void *)&long long v922 = 0;
    v921 = 0;
    DWORD2(v922) = 0;
    *(void *)&long long v924 = 0;
    long long v923 = 0uLL;
    uint64_t v418 = *(unsigned int *)(v417 + 40);
    if (v418)
    {
      v419 = *(_DWORD **)(v417 + 32);
      v420 = &v419[8 * v418];
      while (1)
      {
        if ((*v419 & 0x10000FF) != 0) {
          goto LABEL_796;
        }
        int v421 = v419[1];
        int v422 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 880) + 24)
                                                           + 16 * (v421 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 24);
        BOOL v423 = (v422 - 14) > 0x32 || ((1 << (v422 - 14)) & 0x4000000004001) == 0;
        if (v423 && v422 != 105 && v422 != 127) {
          goto LABEL_796;
        }
        LODWORD(v904) = 0;
        uint64_t v424 = *(void *)(a1 + 472);
        uint64_t v425 = *(unsigned int *)(a1 + 488);
        if (!v425) {
          goto LABEL_808;
        }
        LODWORD(v426) = (v425 - 1) & (37 * v421);
        v427 = (int *)(v424 + 8 * v426);
        int v428 = *v427;
        if (v421 != *v427) {
          break;
        }
LABEL_800:
        if ((int *)(v424 + 8 * v425) == v427) {
          int v429 = 0;
        }
        else {
          int v429 = v427[1];
        }
        LODWORD(v904) = v429;
        sub_1CBB29A9C((uint64_t)&v921, (int *)&v904);
LABEL_796:
        v419 += 8;
        if (v419 == v420) {
          goto LABEL_809;
        }
      }
      int v430 = 1;
      while (v428 != -1)
      {
        int v431 = v426 + v430++;
        uint64_t v426 = v431 & (v425 - 1);
        int v428 = *(_DWORD *)(v424 + 8 * v426);
        if (v421 == v428)
        {
          v427 = (int *)(v424 + 8 * v426);
          goto LABEL_800;
        }
      }
LABEL_808:
      v427 = (int *)(v424 + 8 * v425);
      goto LABEL_800;
    }
LABEL_809:
    sub_1CBB2A024(&v921);
    long long v432 = v923;
    long long v923 = 0uLL;
    *(void *)&long long v924 = 0;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (*((void *)&v432 + 1) - (void)v432 > 4uLL)
    {
      BOOL v433 = (*(_DWORD *)(a1 + 840) + *(_DWORD *)v432) > *(_DWORD *)(*((void *)&v432 + 1) - 4);
LABEL_812:
      operator delete((void *)v432);
      goto LABEL_813;
    }
    BOOL v433 = 1;
    if ((void)v432) {
      goto LABEL_812;
    }
LABEL_813:
    if ((void)v923)
    {
      *((void *)&v923 + 1) = v923;
      operator delete((void *)v923);
    }
    MEMORY[0x1D25D9CD0](v921, 4);
    if (v433) {
      goto LABEL_1032;
    }
    v868 = v415;
    unsigned int v870 = v414;
    ++*(_DWORD *)(a1 + 948);
    v887[0] = 0;
    v887[1] = 0;
    unsigned int v888 = 0;
    v921 = (llvm::MachineOperand *)((char *)&v922 + 8);
    *(void *)&long long v922 = 0x400000000;
    long long v899 = 0uLL;
    LODWORD(v900) = 0;
    v902 = 0;
    uint64_t v903 = 0;
    v901 = 0;
    char v886 = *(unsigned char *)(a1 + 1000);
    long long v895 = 0uLL;
    LODWORD(v896) = 0;
    uint64_t v897 = 0;
    uint64_t v898 = 0;
    *((void *)&v896 + 1) = 0;
    unint64_t v434 = *(unsigned int *)(v417 + 40);
    if (!v434) {
      goto LABEL_916;
    }
    for (unint64_t k = 0; k < v434; ++k)
    {
      v436 = (_DWORD *)(*(void *)(v417 + 32) + 32 * k);
      if ((*v436 & 0x10000FF) == 0)
      {
        uint64_t v437 = v436[1];
        int v438 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 880) + 24)
                                                           + 16 * (v437 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 24);
        BOOL v439 = (v438 - 14) > 0x32 || ((1 << (v438 - 14)) & 0x4000000004001) == 0;
        if (!v439 || v438 == 105 || v438 == 127)
        {
          LODWORD(v885[0]) = v436[1];
          v440 = sub_1CBA84AA4(v887, v885);
          if ((int *)(v887[0] + 8 * v888) != v440)
          {
            llvm::MachineOperand::setReg((uint64_t)v436, v440[1]);
LABEL_892:
            unint64_t v434 = *(unsigned int *)(v417 + 40);
            continue;
          }
          uint64_t v441 = *(void *)(a1 + 472);
          uint64_t v442 = *(unsigned int *)(a1 + 488);
          if (v442)
          {
            LODWORD(v443) = (v442 - 1) & (37 * LODWORD(v885[0]));
            v444 = (int *)(v441 + 8 * v443);
            int v445 = *v444;
            if (LODWORD(v885[0]) == *v444)
            {
LABEL_832:
              if ((int *)(v441 + 8 * v442) == v444) {
                int v446 = 0;
              }
              else {
                int v446 = v444[1];
              }
              v447 = sub_1CBB238E8(v881, (int *)v885);
              v448 = *(void **)(a1 + 880);
              if ((v885[0] & 0x80000000) != 0) {
                v449 = (uint64_t *)(v448[3] + 16 * (v885[0] & 0x7FFFFFFF) + 8);
              }
              else {
                v449 = (uint64_t *)(v448[34] + 8 * LODWORD(v885[0]));
              }
              uint64_t v450 = *(void *)v447;
              uint64_t v451 = *v449;
              if (!v451)
              {
LABEL_843:
                unint64_t v452 = *(void *)(v448[3] + 16 * (v885[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v448, "", 0);
                v864 = (llvm::SmallPtrSetImplBase *)IncompleteVirtualRegister;
                unint64_t v858 = IncompleteVirtualRegister & 0x7FFFFFFF;
                *(void *)(v448[3] + 16 * v858) = v452;
                uint64_t v454 = v448[1];
                if (v454) {
                  (*(void (**)(uint64_t, void))(*(void *)v454 + 24))(v454, IncompleteVirtualRegister);
                }
                LODWORD(v884[0]) = IncompleteVirtualRegister;
                uint64_t v455 = *(void *)(*(void *)v450 + 64);
                uint64_t v456 = *(unsigned int *)(*(void *)v450 + 72);
                v904 = &v906;
                uint64_t v905 = 0x200000000;
                if (v456)
                {
                  unsigned int v457 = 0;
                  uint64_t v458 = v455 + 8 * v456;
                  do
                  {
                    ++*(_DWORD *)(a1 + 956);
                    unint64_t v459 = *(void *)(*(void *)v455 + 8);
                    if ((v459 & 6) != 0)
                    {
                      if (v459 < 8) {
                        uint64_t v460 = 0;
                      }
                      else {
                        uint64_t v460 = *(void *)((v459 & 0xFFFFFFFFFFFFFFF8) + 16);
                      }
                      uint64_t v461 = v460;
                      if ((*(unsigned char *)v460 & 4) == 0)
                      {
                        uint64_t v461 = v460;
                        if ((*(_WORD *)(v460 + 44) & 8) != 0)
                        {
                          uint64_t v461 = v460;
                          do
                            uint64_t v461 = *(void *)(v461 + 8);
                          while ((*(_WORD *)(v461 + 44) & 8) != 0);
                        }
                      }
                      v462 = *(void **)(v461 + 8);
                      (*(void (**)(void, void, void *, llvm::SmallPtrSetImplBase *, void, uint64_t, void))(**(void **)(a1 + 848) + 176))(*(void *)(a1 + 848), *(void *)(v460 + 24), v462, v864, 0, v460, *(void *)(a1 + 864));
                      unint64_t v463 = *v462 & 0xFFFFFFFFFFFFFFF8;
                      if (!v463 || (*(unsigned char *)v463 & 4) == 0)
                      {
                        while ((*(_WORD *)(v463 + 44) & 4) != 0)
                          unint64_t v463 = *(void *)v463 & 0xFFFFFFFFFFFFFFF8;
                      }
                      if (v905 >= (unint64_t)HIDWORD(v905)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v904 + v905) = v463;
                      unsigned int v457 = v905 + 1;
                      LODWORD(v905) = v905 + 1;
                    }
                    v455 += 8;
                  }
                  while (v455 != v458);
                  if (v457)
                  {
                    v464 = (uint64_t *)v904;
                    uint64_t v465 = 8 * v457;
                    do
                    {
                      uint64_t v466 = *v464++;
                      sub_1CB914C88(*(void *)(*(void *)(a1 + 888) + 288), v466, 0);
                      v465 -= 8;
                    }
                    while (v465);
                    if (v905)
                    {
                      v467 = v904;
                      v862 = (char *)v904 + 8 * v905;
                      do
                      {
                        v879 = v467;
                        uint64_t v468 = *v467;
                        uint64_t v469 = *(unsigned int *)(v468 + 40);
                        if (v469)
                        {
                          uint64_t v470 = 32 * v469;
                          v471 = (_DWORD *)(*(void *)(v468 + 32) + 4);
                          do
                          {
                            if ((*(v471 - 1) & 0x10000FF) == 0)
                            {
                              LODWORD(v892) = *v471;
                              sub_1CBA84648((uint64_t)&v895, (int *)&v892);
                              uint64_t v472 = *(void *)(a1 + 888);
                              uint64_t v473 = *v471 & 0x7FFFFFFF;
                              v474 = (void *)(v472 + 408);
                              uint64_t v475 = *(unsigned int *)(v472 + 416);
                              if ((*v471 & 0x7FFFFFFFu) >= v475)
                              {
                                sub_1CB9153B8((uint64_t)v474, v473 - v475 + 1, *(void *)(v472 + 424));
LABEL_880:
                                operator new();
                              }
                              v476 = *(llvm::LiveInterval **)(*v474 + 8 * v473);
                              if (!v476) {
                                goto LABEL_880;
                              }
                              llvm::LiveIntervals::extendToUses((llvm::LiveIntervals *)v472, v476);
                            }
                            v471 += 8;
                            v470 -= 32;
                          }
                          while (v470);
                        }
                        v467 = v879 + 1;
                      }
                      while (v879 + 1 != (void *)v862);
                    }
                  }
                }
                llvm::MachineOperand::setReg((uint64_t)v436, v864);
                uint64_t v477 = *(void *)(a1 + 888);
                unint64_t v478 = *(unsigned int *)(v477 + 416);
                BOOL v516 = v858 >= v478;
                unint64_t v479 = v858 - v478;
                if (v516) {
                  sub_1CB9153B8(v477 + 408, v479 + 1, *(void *)(v477 + 424));
                }
                operator new();
              }
              while ((*(unsigned char *)(v451 + 3) & 1) != 0)
              {
                uint64_t v451 = *(void *)(v451 + 24);
                if (!v451) {
                  goto LABEL_843;
                }
              }
              while (1)
              {
                uint64_t v451 = *(void *)(v451 + 24);
                if (!v451) {
                  break;
                }
                if ((*(unsigned char *)(v451 + 3) & 1) == 0) {
                  goto LABEL_843;
                }
              }
              ++*(_DWORD *)(a1 + 952);
              sub_1CBA84648((uint64_t)&v899, (int *)v885);
              if (v922 >= DWORD1(v922)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v482 = (char *)v921 + 12 * v922;
              *(void *)v482 = LODWORD(v885[0]) | (unint64_t)(v437 << 32);
              *((_DWORD *)v482 + 2) = v446;
              LODWORD(v922) = v922 + 1;
              goto LABEL_892;
            }
            int v480 = 1;
            while (v445 != -1)
            {
              int v481 = v443 + v480++;
              uint64_t v443 = v481 & (v442 - 1);
              int v445 = *(_DWORD *)(v441 + 8 * v443);
              if (LODWORD(v885[0]) == v445)
              {
                v444 = (int *)(v441 + 8 * v443);
                goto LABEL_832;
              }
            }
          }
          v444 = (int *)(v441 + 8 * v442);
          goto LABEL_832;
        }
      }
    }
    if (*((void *)&v896 + 1) != v897)
    {
      uint64_t v483 = *(void *)(a1 + 888);
      uint64_t v484 = **((_DWORD **)&v896 + 1) & 0x7FFFFFFF;
      uint64_t v485 = *(void *)(v483 + 408);
      uint64_t v486 = *(void *)(v485 + 8 * v484);
      if (v486)
      {
        uint64_t v487 = *(void *)(v486 + 104);
        if (v487)
        {
          do
          {
            uint64_t v492 = *(void *)(v487 + 96);
            uint64_t v493 = *(void *)(v487 + 104);
            *(void *)(v487 + 96) = 0;
            if (v492)
            {
              sub_1CB833A08(v492, *(void **)(v492 + 8));
              MEMORY[0x1D25D9CE0](v492, 0x1020C4062D53EE8);
            }
            v494 = *(void **)(v487 + 64);
            if (v494 != (void *)(v487 + 80)) {
              free(v494);
            }
            if (*(void *)v487 != v487 + 16) {
              free(*(void **)v487);
            }
            uint64_t v487 = v493;
          }
          while (v493);
        }
        uint64_t v488 = *(void *)(v486 + 96);
        *(void *)(v486 + 96) = 0;
        *(void *)(v486 + 104) = 0;
        if (v488)
        {
          sub_1CB833A08(v488, *(void **)(v488 + 8));
          MEMORY[0x1D25D9CE0](v488, 0x1020C4062D53EE8);
        }
        v489 = *(void **)(v486 + 64);
        if (v489 != (void *)(v486 + 80)) {
          free(v489);
        }
        if (*(void *)v486 != v486 + 16) {
          free(*(void **)v486);
        }
        MEMORY[0x1D25D9CE0](v486, 0x10A0C408DA535C6);
        uint64_t v485 = *(void *)(v483 + 408);
      }
      *(void *)(v485 + 8 * v484) = 0;
      uint64_t v490 = *(void *)(a1 + 888);
      uint64_t v491 = *(unsigned int *)(v490 + 416);
      if (v484 >= v491) {
        sub_1CB9153B8(v490 + 408, v484 - v491 + 1, *(void *)(v490 + 424));
      }
      operator new();
    }
LABEL_916:
    unint64_t v495 = v922;
    if (v922 == 2) {
      ++*(_DWORD *)(a1 + 960);
    }
    else {
      ++*(_DWORD *)(a1 + 964);
    }
    v885[0] = a1;
    v885[1] = &v886;
    unint64_t v496 = 126 - 2 * __clz(v495);
    if (v495) {
      uint64_t v497 = v496;
    }
    else {
      uint64_t v497 = 0;
    }
    sub_1CBB2A3F4((unint64_t)v921, (unint64_t)v921 + 12 * v495, v497, 1);
    v498 = (int *)v901;
    v499 = v902;
    v415 = v868;
    v416 = v867;
    if (v901 != v902)
    {
      while (2)
      {
        int v500 = *v498;
        LODWORD(v904) = *v498;
        int v501 = *(_DWORD *)(a1 + 704);
        if (!v501)
        {
          v511 = 0;
          goto LABEL_935;
        }
        uint64_t v502 = *(void *)(a1 + 688);
        int v503 = v501 - 1;
        unsigned int v504 = v503 & (37 * v500);
        v505 = (_DWORD *)(v502 + 16 * v504);
        int v506 = *v505;
        if (v500 != *v505)
        {
          v507 = 0;
          int v508 = 1;
          while (v506 != -1)
          {
            if (v507) {
              BOOL v509 = 0;
            }
            else {
              BOOL v509 = v506 == -2;
            }
            if (v509) {
              v507 = v505;
            }
            unsigned int v510 = v504 + v508++;
            unsigned int v504 = v510 & v503;
            v505 = (_DWORD *)(v502 + 16 * v504);
            int v506 = *v505;
            if (v500 == *v505) {
              goto LABEL_936;
            }
          }
          if (v507) {
            v511 = v507;
          }
          else {
            v511 = v505;
          }
LABEL_935:
          v505 = sub_1CBB23AC4(v881, (int *)&v904, v511);
          _DWORD *v505 = v500;
          *((void *)v505 + 1) = 0;
        }
LABEL_936:
        uint64_t v512 = *((void *)v505 + 1);
        uint64_t v513 = *(int *)(v512 + 8);
        unsigned int v514 = v513 + 2;
        if ((v513 + 2) >= 3)
        {
          if (v513 == 1)
          {
            uint64_t v515 = 82;
          }
          else
          {
            BOOL v516 = v514 >= 5;
            BOOL v30 = v514 == 5;
            uint64_t v515 = 84;
            if (!v30) {
              uint64_t v515 = 85;
            }
            if (!v516) {
              uint64_t v515 = 83;
            }
          }
        }
        else
        {
          uint64_t v515 = 81;
        }
        v517 = *(const llvm::LiveInterval **)v512;
        uint64_t v518 = *(void *)(a1 + 472);
        uint64_t v519 = *(unsigned int *)(a1 + 488);
        if (v519)
        {
          int v521 = *((_DWORD *)v517 + 28);
          LODWORD(v522) = (v519 - 1) & (37 * v521);
          v520 = (int *)(v518 + 8 * v522);
          int v523 = *v520;
          if (v521 != *v520)
          {
            int v526 = 1;
            while (v523 != -1)
            {
              int v527 = v522 + v526++;
              uint64_t v522 = v527 & (v519 - 1);
              int v523 = *(_DWORD *)(v518 + 8 * v522);
              if (v521 == v523)
              {
                v520 = (int *)(v518 + 8 * v522);
                goto LABEL_947;
              }
            }
            goto LABEL_945;
          }
        }
        else
        {
LABEL_945:
          v520 = (int *)(v518 + 8 * v519);
        }
LABEL_947:
        unsigned int v524 = v520[1];
        if (*(unsigned char *)(a1 + 504))
        {
          llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*(void *)(a1 + 352 + 16 * v513 + 8) + 216 * (v524 >> v513)), v517, (uint64_t **)v517);
        }
        else
        {
          int v525 = dword_1CDB1663C[v515 - 81];
          do
          {
            llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*(void *)(a1 + 360) + 216 * v524++), v517, (uint64_t **)v517);
            --v525;
          }
          while (v525);
        }
        int *v520 = -2;
        *(int32x2_t *)(a1 + 480) = vadd_s32(*(int32x2_t *)(a1 + 480), (int32x2_t)0x1FFFFFFFFLL);
        if (++v498 == v499) {
          break;
        }
        continue;
      }
    }
    v528 = v894;
    v892 = v894;
    uint64_t v893 = 0x400000000;
    v529 = v894;
    if (!v922) {
      goto LABEL_968;
    }
    uint64_t v530 = 12 * v922;
    v531 = (int *)((char *)v921 + 4);
    do
    {
      uint64_t v532 = *(void *)sub_1CBB238E8(v881, v531);
      if (v893 >= (unint64_t)HIDWORD(v893)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v892 + v893) = v532;
      unint64_t v533 = (v893 + 1);
      LODWORD(v893) = v893 + 1;
      v531 += 3;
      v530 -= 12;
    }
    while (v530);
    v528 = (uint64_t *)v892;
    v529 = (uint64_t *)((char *)v892 + 8 * v533);
    if (v533) {
      uint64_t v534 = 126 - 2 * __clz(v533);
    }
    else {
LABEL_968:
    }
      uint64_t v534 = 0;
    sub_1CBB2B10C(v528, v529, v534, 1);
    v884[0] = &v892;
    v884[1] = v885;
    v904 = &v906;
    uint64_t v905 = 0x300000000;
    int v535 = v922;
    unsigned int v536 = *((_DWORD *)v921 + 3 * v922 - 1);
    char v537 = sub_1CBB2A238(v884, v536 - *(_DWORD *)(a1 + 840), v536, (uint64_t)&v904);
    if (v535 == 2)
    {
      if ((v537 & 1) == 0)
      {
        unsigned int v538 = *(_DWORD *)(a1 + 840);
        if (v536)
        {
          unsigned int v539 = 0;
          while (1)
          {
            unsigned int v540 = v539 + v538;
            unsigned int v541 = v540 >= 0x1000 ? 4096 : v540;
            if (sub_1CBB2A238(v884, v539, v541, (uint64_t)&v904)) {
              break;
            }
            unsigned int v538 = *(_DWORD *)(a1 + 840);
            int v542 = v538 >> 3;
            if (v538 >> 3 <= 1) {
              int v542 = 1;
            }
            v539 += v542;
            if (v539 >= v536) {
              goto LABEL_980;
            }
          }
        }
        else
        {
LABEL_980:
          for (unsigned int m = 0; m < 0x1000; m += v546)
          {
            unsigned int v544 = m + v538;
            if (v544 >= 0x1000) {
              unsigned int v545 = 4096;
            }
            else {
              unsigned int v545 = v544;
            }
            if (sub_1CBB2A238(v884, m, v545, (uint64_t)&v904)) {
              break;
            }
            unsigned int v538 = *(_DWORD *)(a1 + 840);
            int v546 = v538 >> 3;
            if (v538 >> 3 <= 1) {
              int v546 = 1;
            }
          }
        }
      }
    }
    else if ((v537 & 1) == 0)
    {
      if (v536)
      {
        unsigned int v547 = 0;
        unsigned int v548 = *(_DWORD *)(a1 + 840);
        while (1)
        {
          unsigned int v549 = v547 + v548;
          unsigned int v550 = v549 >= 0x1000 ? 4096 : v549;
          if (sub_1CBB2A238(v884, v547, v550, (uint64_t)&v904)) {
            break;
          }
          unsigned int v548 = *(_DWORD *)(a1 + 840);
          int v551 = v548 >> 3;
          if (v548 >> 3 <= 1) {
            int v551 = 1;
          }
          v547 += v551;
          if (v547 >= v536) {
            goto LABEL_999;
          }
        }
      }
      else
      {
LABEL_999:
        unsigned int v552 = *(_DWORD *)(*(void *)v892 + 8) + 2;
        if (v552 >= 3)
        {
          if (*(_DWORD *)(*(void *)v892 + 8) == 1)
          {
            int v553 = 2;
          }
          else if (v552 >= 5)
          {
            if (*(_DWORD *)(*(void *)v892 + 8) == 3) {
              int v553 = 8;
            }
            else {
              int v553 = 16;
            }
          }
          else
          {
            int v553 = 4;
          }
        }
        else
        {
          int v553 = 1;
        }
        unsigned int v554 = (v536 + v553 - 1) & -v553;
        if (v554 <= 0xFFF)
        {
          unsigned int v555 = *(_DWORD *)(a1 + 840);
          do
          {
            unsigned int v556 = v554 + v555;
            if (v556 >= 0x1000) {
              unsigned int v557 = 4096;
            }
            else {
              unsigned int v557 = v556;
            }
            if (sub_1CBB2A238(v884, v554, v557, (uint64_t)&v904)) {
              break;
            }
            unsigned int v555 = *(_DWORD *)(a1 + 840);
            int v558 = v555 >> 3;
            if (v555 >> 3 <= 1) {
              int v558 = 1;
            }
            v554 += v558;
          }
          while (v554 < 0x1000);
        }
      }
    }
    v559 = (char *)v904;
    v560 = (char *)v904 + 16 * v905;
    if (v905)
    {
      do
      {
        sub_1CBB27828(a1 + 248, *(_DWORD **)v559, *((_DWORD *)v559 + 2));
        v559 += 16;
      }
      while (v559 != v560);
      v559 = (char *)v904;
    }
    unsigned int v561 = *(_DWORD *)(a1 + 500);
    if (v559 != (char *)&v906) {
      free(v559);
    }
    unsigned int v414 = v870;
    if (v892 != v894) {
      free(v892);
    }
    if (*((void *)&v896 + 1))
    {
      uint64_t v897 = *((void *)&v896 + 1);
      operator delete(*((void **)&v896 + 1));
    }
    MEMORY[0x1D25D9CD0](v895, 4);
    if (v901)
    {
      v902 = v901;
      operator delete(v901);
    }
    MEMORY[0x1D25D9CD0](v899, 4);
    if (v921 != (llvm::MachineOperand *)((char *)&v922 + 8)) {
      free(v921);
    }
    MEMORY[0x1D25D9CD0](v887[0], 4);
    if (v870 <= v561) {
      unsigned int v414 = v561;
    }
LABEL_1032:
    ++v415;
  }
  while (v415 != v416);
LABEL_1033:
  if (*(_DWORD *)(a1 + 616))
  {
    uint64_t v562 = *(void *)(a1 + 872);
    int v563 = *(unsigned __int8 *)(v562 + 556);
    *(_DWORD *)(v562 + 552) = v414;
    if (!v563) {
      *(unsigned char *)(v562 + 556) = 1;
    }
  }
  if (__base != v920) {
    free(__base);
  }
  if (v889 != v891) {
    free(v889);
  }
  if (v910 != v912) {
    free(v910);
  }
  __base = v920;
  size_t v919 = 0x1000000000;
  v910 = v912;
  uint64_t v911 = 0x2000000000;
  uint64_t v564 = *(unsigned int *)(a1 + 616);
  if (v564)
  {
    v565 = *(uint64_t **)(a1 + 608);
    v566 = &v565[v564];
    v865 = v566;
    while (1)
    {
      uint64_t v567 = *v565;
      uint64_t v568 = *(unsigned int *)(*(void *)*v565 + 112);
      uint64_t v569 = *(void *)(a1 + 472);
      uint64_t v570 = *(unsigned int *)(a1 + 488);
      if (!v570) {
        goto LABEL_1342;
      }
      LODWORD(v571) = (v570 - 1) & (37 * v568);
      v572 = (int *)(v569 + 8 * v571);
      int v573 = *v572;
      if (v568 != *v572) {
        break;
      }
LABEL_1046:
      if ((int *)(v569 + 8 * v570) == v572) {
        unsigned int v882 = 0;
      }
      else {
        unsigned int v882 = v572[1];
      }
      v904 = &v906;
      uint64_t v905 = 0x1000000000;
      uint64_t v574 = *(void *)(a1 + 880);
      if ((v568 & 0x80000000) != 0) {
        v575 = (uint64_t *)(*(void *)(v574 + 24) + 16 * (v568 & 0x7FFFFFFF) + 8);
      }
      else {
        v575 = (uint64_t *)(*(void *)(v574 + 272) + 8 * v568);
      }
      uint64_t v576 = *v575;
      if (*v575)
      {
        while ((*(_DWORD *)v576 & 0x80000000) != 0)
        {
          uint64_t v576 = *(void *)(v576 + 24);
          if (!v576) {
            goto LABEL_1336;
          }
        }
        unsigned int v577 = 0;
        unsigned int v578 = 16;
LABEL_1057:
        if (v577 >= v578) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v904 + v577) = v576;
        unsigned int v577 = v905 + 1;
        LODWORD(v905) = v905 + 1;
        while (1)
        {
          uint64_t v576 = *(void *)(v576 + 24);
          if (!v576) {
            break;
          }
          if ((*(_DWORD *)v576 & 0x80000000) == 0)
          {
            unsigned int v578 = HIDWORD(v905);
            goto LABEL_1057;
          }
        }
        v579 = (llvm::MachineOperand **)v904;
        if (v577)
        {
          v866 = v565;
          v580 = (llvm::MachineOperand **)((char *)v904 + 8 * v577);
          while (1)
          {
            v581 = *v579;
            unsigned int v582 = *(_DWORD *)*v579;
            if ((v582 & 0x1000000) == 0)
            {
              unsigned int v583 = *(_DWORD *)(v567 + 8) + 2;
              if (*(_DWORD *)(v567 + 8) == 3) {
                int v584 = 84;
              }
              else {
                int v584 = 85;
              }
              if (v583 < 5) {
                int v584 = 83;
              }
              BOOL v585 = v583 >= 3;
              if (*(_DWORD *)(v567 + 8) == 1) {
                int v586 = 82;
              }
              else {
                int v586 = v584;
              }
              if (!v585) {
                int v586 = 81;
              }
              int v587 = (((v582 >> 20) & 0x100 | (v882 >> 22) & 0x200) << 8) | 7;
              if (v911 >= HIDWORD(v911))
              {
                v921 = *v579;
                LODWORD(v922) = v587;
                DWORD1(v922) = v882 & 0x7FFFFFFF;
                *((void *)&v922 + 1) = 0;
                LODWORD(v923) = v586;
                DWORD2(v923) = 0;
                unint64_t v671 = sub_1CBB2BF28((uint64_t)&v910, (unint64_t)&v921);
                v672 = (char *)v910 + 40 * v911;
                uint64_t v673 = *(void *)(v671 + 32);
                long long v674 = *(_OWORD *)(v671 + 16);
                *(_OWORD *)v672 = *(_OWORD *)v671;
                *((_OWORD *)v672 + 1) = v674;
                *((void *)v672 + 4) = v673;
              }
              else
              {
                v588 = (char *)v910 + 40 * v911;
                *(void *)v588 = v581;
                *((_DWORD *)v588 + 2) = v587;
                *((_DWORD *)v588 + 3) = v882 & 0x7FFFFFFF;
                *((void *)v588 + 2) = 0;
                *((_DWORD *)v588 + 6) = v586;
                *((_DWORD *)v588 + 8) = 0;
              }
              LODWORD(v911) = v911 + 1;
              goto LABEL_1205;
            }
            uint64_t v589 = *((void *)v581 + 1);
            int v590 = **(unsigned __int16 **)(v589 + 16);
            if (v590 == 263)
            {
              uint64_t v601 = *(void *)(a1 + 848);
              unsigned int v602 = *(_DWORD *)(v567 + 8) + 2;
              if (*(_DWORD *)(v567 + 8) == 3) {
                int v603 = 84;
              }
              else {
                int v603 = 85;
              }
              if (v602 < 5) {
                int v603 = 83;
              }
              BOOL v604 = v602 >= 3;
              if (*(_DWORD *)(v567 + 8) == 1) {
                int v605 = 82;
              }
              else {
                int v605 = v603;
              }
              if (v604) {
                int v606 = v605;
              }
              else {
                int v606 = 81;
              }
              sub_1CBB2BB64((uint64_t)&v921, (unsigned int *)*v579, v606, v882);
              *(void *)(v589 + 16) = *(void *)(v601 + 8) + 12672;
              sub_1CBB2BE90((unint64_t)&v910, (uint64_t)v581, (long long *)&v921);
              goto LABEL_1205;
            }
            if (v590 != 19)
            {
              v921 = (llvm::MachineOperand *)((char *)&v922 + 8);
              LODWORD(v876) = v876 & 0xFFF00000 | 1;
              DWORD2(v922) = v876;
              long long v923 = 0uLL;
              *(void *)&long long v922 = 0x800000001;
              if (*(_DWORD *)(v589 + 40) >= 2u)
              {
                unsigned int v607 = 1;
                uint64_t v608 = 32;
                unint64_t v609 = 1;
                do
                {
                  v610 = (llvm::MachineOperand *)(*(void *)(v589 + 32) + v608);
                  if (v607 >= DWORD1(v922))
                  {
                    v613 = (char *)v921 + 32 * v607;
                    BOOL v614 = v921 <= v610 && v613 > (char *)v610;
                    if (!v614) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v611 = (_OWORD *)((char *)v921 + 32 * v922);
                  long long v612 = *((_OWORD *)v610 + 1);
                  _OWORD *v611 = *(_OWORD *)v610;
                  v611[1] = v612;
                  unsigned int v607 = v922 + 1;
                  LODWORD(v922) = v922 + 1;
                  ++v609;
                  v608 += 32;
                }
                while (v609 < *(unsigned int *)(v589 + 40));
              }
              unsigned int v615 = *(_DWORD *)(v567 + 8) + 2;
              if (v615 >= 3)
              {
                if (*(_DWORD *)(v567 + 8) == 3) {
                  int v617 = 84;
                }
                else {
                  int v617 = 85;
                }
                if (v615 < 5) {
                  int v617 = 83;
                }
                if (*(_DWORD *)(v567 + 8) == 1) {
                  int v616 = 82;
                }
                else {
                  int v616 = v617;
                }
              }
              else
              {
                int v616 = 81;
              }
              sub_1CBB2BB64((uint64_t)&v899, (unsigned int *)v581, v616, v882);
              sub_1CBAD7F90(v589, 0, 3);
              while (1)
              {
                int v618 = *(_DWORD *)(v589 + 40);
                if (v618 == 1) {
                  break;
                }
                llvm::MachineInstr::removeOperand((char *)v589, v618 - 1);
              }
              if (v922)
              {
                v619 = v921;
                uint64_t v620 = 32 * v922;
                do
                {
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v589, *(llvm::MachineFunction **)(*(void *)(v589 + 24) + 32), v619);
                  v619 = (llvm::MachineOperand *)((char *)v619 + 32);
                  v620 -= 32;
                }
                while (v620);
              }
              sub_1CBB2BE90((unint64_t)&v910, *(void *)(v589 + 32), &v899);
              if (v921 != (llvm::MachineOperand *)((char *)&v922 + 8)) {
                free(v921);
              }
              goto LABEL_1205;
            }
            uint64_t v591 = *(void *)(a1 + 880);
            v592 = *(void **)(a1 + 864);
            uint64_t v871 = *(void *)(a1 + 888);
            uint64_t v593 = *(void *)(v589 + 32);
            long long v594 = *(_OWORD *)(v593 + 48);
            long long v895 = *(_OWORD *)(v593 + 32);
            long long v896 = v594;
            uint64_t v595 = DWORD1(v895);
            uint64_t v596 = *(void *)(v589 + 24);
            long long v924 = 0u;
            long long v925 = 0u;
            long long v922 = 0u;
            long long v923 = 0u;
            uint64_t v597 = *(void *)(v596 + 32);
            v921 = (llvm::MachineOperand *)&unk_1F261CD58;
            *(void *)&long long v922 = v597;
            *(void *)&long long v923 = *(void *)(v597 + 40);
            *((void *)&v922 + 1) = (*(uint64_t (**)(void))(**(void **)(v597 + 16) + 104))(*(void *)(v597 + 16));
            v892 = 0;
            if (!*((void *)&v923 + 1)) {
              goto LABEL_1082;
            }
            int v635 = **((unsigned char **)&v923 + 1);
            if ((v635 - 4) > 0x1E)
            {
              if ((v635 - 3) >= 0xFFFFFFFE) {
                uint64_t v691 = *((void *)&v923 + 1);
              }
              else {
                uint64_t v691 = 0;
              }
              if ((v635 - 3) <= 0xFFFFFFFD)
              {
                if (v635 == 3) {
                  *(void *)(*((void *)&v923 + 1) + 8) = 0;
                }
LABEL_1082:
                *((void *)&v923 + 1) = 0;
                goto LABEL_1083;
              }
              unint64_t v637 = v691 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*((void *)&v923 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v923 + 1) + 12)) {
                goto LABEL_1082;
              }
              uint64_t v636 = *(void *)(*((void *)&v923 + 1) + 16);
              if ((v636 & 4) == 0) {
                goto LABEL_1082;
              }
              unint64_t v637 = v636 & 0xFFFFFFFFFFFFFFF8;
              if (!v637) {
                goto LABEL_1082;
              }
            }
            *(void *)&long long v899 = (char *)&v923 + 8;
            sub_1CC5FA668(v637 + 16, &v899);
            *((void *)&v923 + 1) = v892;
            if (v892) {
              llvm::MetadataTracking::retrack((uint64_t)&v892, (unsigned __int8 *)v892, (uint64_t)&v923 + 8);
            }
LABEL_1083:
            *(void *)&long long v925 = 0;
            *((void *)&v924 + 1) = v589;
            *(void *)&long long v924 = *(void *)(v589 + 24);
            *((void *)&v924 + 1) = v589;
            if ((long long *)(v589 + 56) != (long long *)((char *)&v923 + 8))
            {
              if (!*((void *)&v923 + 1)) {
                goto LABEL_1085;
              }
              int v668 = **((unsigned char **)&v923 + 1);
              if ((v668 - 4) > 0x1E)
              {
                if ((v668 - 3) >= 0xFFFFFFFE) {
                  uint64_t v698 = *((void *)&v923 + 1);
                }
                else {
                  uint64_t v698 = 0;
                }
                if ((v668 - 3) < 0xFFFFFFFE)
                {
                  if (v668 == 3) {
                    *(void *)(*((void *)&v923 + 1) + 8) = 0;
                  }
                  goto LABEL_1085;
                }
                unint64_t v670 = v698 + 8;
LABEL_1270:
                *(void *)&long long v899 = (char *)&v923 + 8;
                sub_1CC5FA668(v670 + 16, &v899);
              }
              else if ((*(unsigned char *)(*((void *)&v923 + 1) + 1) & 0x7F) == 2 {
                     || *(_DWORD *)(*((void *)&v923 + 1) + 12))
              }
              {
                uint64_t v669 = *(void *)(*((void *)&v923 + 1) + 16);
                if ((v669 & 4) != 0)
                {
                  unint64_t v670 = v669 & 0xFFFFFFFFFFFFFFF8;
                  if (v670) {
                    goto LABEL_1270;
                  }
                }
              }
LABEL_1085:
              v598 = *(unsigned __int8 **)(v589 + 56);
              *((void *)&v923 + 1) = v598;
              if (v598) {
                llvm::MetadataTracking::track((uint64_t)&v923 + 8, v598, 2);
              }
            }
            BOOL v599 = ((*(_DWORD *)v581 >> 8) & 0xFFFu) - 25 < 0x10 || ((*(_DWORD *)v581 >> 8) & 0xFFF) == 0;
            if ((v595 & 0x80000000) != 0) {
              v600 = (uint64_t *)(*(void *)(v591 + 24) + 16 * (v595 & 0x7FFFFFFF) + 8);
            }
            else {
              v600 = (uint64_t *)(*(void *)(v591 + 272) + 8 * v595);
            }
            uint64_t v621 = *v600;
            if (!v621) {
              goto LABEL_1135;
            }
            if ((*(unsigned char *)(v621 + 3) & 1) == 0)
            {
              uint64_t v699 = *(void *)(v621 + 24);
              if (!v699 || (*(unsigned char *)(v699 + 3) & 1) == 0) {
                goto LABEL_1135;
              }
            }
            if ((v595 & 0x80000000) != 0) {
              v624 = (uint64_t *)(*(void *)(v591 + 24) + 16 * (v595 & 0x7FFFFFFF) + 8);
            }
            else {
              v624 = (uint64_t *)(*(void *)(v591 + 272) + 8 * v595);
            }
            uint64_t v625 = *v624;
            if (v625)
            {
              if ((*(unsigned char *)(v625 + 3) & 1) == 0)
              {
                uint64_t v625 = *(void *)(v625 + 24);
                if (v625)
                {
                  if ((*(unsigned char *)(v625 + 3) & 1) == 0) {
                    uint64_t v625 = 0;
                  }
                }
              }
            }
            uint64_t v626 = *(void *)(v625 + 8);
            while (1)
            {
              uint64_t v625 = *(void *)(v625 + 24);
              if (!v625 || (*(unsigned char *)(v625 + 3) & 1) == 0) {
                break;
              }
              if (*(void *)(v625 + 8) != v626) {
                goto LABEL_1135;
              }
            }
            if (!v626) {
              goto LABEL_1135;
            }
            char v627 = !v599;
            if (**(_WORD **)(v626 + 16) != 552) {
              char v627 = 1;
            }
            if (v627)
            {
LABEL_1135:
              if ((v595 & 0x80000000) != 0 && v599)
              {
                unint64_t v622 = *(void *)(*(void *)(v591 + 24) + 16 * (v595 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                if (((v895 >> 8) & 0xFFF) != 0)
                {
                  uint64_t v623 = (*(uint64_t (**)(void *, unint64_t, __int16 ***))(*v592 + 184))(v592, v622, &off_1E66AF580);
LABEL_1175:
                  if (v623 != v622)
                  {
                    *(void *)&long long v899 = &off_1E66AF580;
                    DWORD2(v899) = 2;
                    v638 = (llvm::MachineFunction *)sub_1CC739C54(&v921, 0x13u, (unint64_t *)&v899, 1, 0, 0, 0);
                    v634 = v639;
                    llvm::MachineInstr::addOperand(v639, v638, (const llvm::MachineOperand *)&v895);
                    int v640 = *(_DWORD *)(*((void *)v634 + 4) + 4);
                    LODWORD(v895) = 0;
                    DWORD1(v895) = v640;
                    long long v896 = 0uLL;
                    *((void *)&v895 + 1) = 0;
                    goto LABEL_1178;
                  }
                }
                else if ((__int16 ***)v622 != &off_1E66AF580)
                {
                  if (v622 && (uint64_t v692 = v592[30], v693 = (unint64_t)(v592[31] - v692) >> 3, v693))
                  {
                    unsigned int v694 = 0;
                    v695 = *(_DWORD **)(v622 + 8);
                    v696 = &dword_1CDC6E5B8;
                    while (1)
                    {
                      unsigned int v697 = *v696 & *v695;
                      if (v697) {
                        break;
                      }
                      uint64_t v623 = 0;
                      ++v696;
                      ++v695;
                      v694 += 32;
                      if (v694 >= v693) {
                        goto LABEL_1175;
                      }
                    }
                    uint64_t v623 = *(void *)(v692 + 8 * (__clz(__rbit32(v697)) + v694));
                  }
                  else
                  {
                    uint64_t v623 = 0;
                  }
                  goto LABEL_1175;
                }
              }
LABEL_1177:
              v634 = 0;
              goto LABEL_1178;
            }
            if ((v595 & 0x80000000) != 0) {
              v628 = (uint64_t *)(*(void *)(v591 + 24) + 16 * (v595 & 0x7FFFFFFF) + 8);
            }
            else {
              v628 = (uint64_t *)(*(void *)(v591 + 272) + 8 * v595);
            }
            uint64_t v629 = *v628;
            if ((*(unsigned char *)(v629 + 3) & 1) == 0) {
              uint64_t v629 = *(void *)(v629 + 24);
            }
            uint64_t v630 = *(void *)(*(void *)(v629 + 8) + 32);
            long long v631 = *(_OWORD *)(v630 + 80);
            long long v895 = *(_OWORD *)(v630 + 64);
            long long v896 = v631;
            if ((v595 & 0x80000000) != 0) {
              v632 = (uint64_t *)(*(void *)(v591 + 24) + 16 * (v595 & 0x7FFFFFFF) + 8);
            }
            else {
              v632 = (uint64_t *)(*(void *)(v591 + 272) + 8 * v595);
            }
            uint64_t v633 = *v632;
            if (!v633) {
              goto LABEL_1177;
            }
            while ((*(unsigned char *)(v633 + 3) & 1) != 0)
            {
              uint64_t v633 = *(void *)(v633 + 24);
              if (!v633) {
                goto LABEL_1177;
              }
            }
            while (1)
            {
              uint64_t v633 = *(void *)(v633 + 24);
              if (!v633) {
                break;
              }
              v634 = 0;
              if ((*(unsigned char *)(v633 + 3) & 1) == 0) {
                goto LABEL_1178;
              }
            }
            uint64_t v675 = v595 & 0x7FFFFFFF;
            uint64_t v676 = *(void *)(v871 + 408);
            uint64_t v677 = *(void *)(v676 + 8 * v675);
            uint64_t v861 = v626;
            if (v677)
            {
              uint64_t v678 = *(void *)(v677 + 104);
              if (v678)
              {
                do
                {
                  uint64_t v716 = *(void *)(v678 + 96);
                  uint64_t v717 = *(void *)(v678 + 104);
                  *(void *)(v678 + 96) = 0;
                  if (v716)
                  {
                    uint64_t v857 = v716;
                    uint64_t v860 = v717;
                    sub_1CB833A08(v716, *(void **)(v716 + 8));
                    MEMORY[0x1D25D9CE0](v857, 0x1020C4062D53EE8);
                    uint64_t v717 = v860;
                  }
                  v718 = *(void **)(v678 + 64);
                  if (v718 != (void *)(v678 + 80))
                  {
                    uint64_t v859 = v717;
                    free(v718);
                    uint64_t v717 = v859;
                  }
                  v719 = *(void **)v678;
                  if (*(void *)v678 != v678 + 16)
                  {
                    uint64_t v715 = v717;
                    free(v719);
                    uint64_t v717 = v715;
                  }
                  uint64_t v678 = v717;
                }
                while (v717);
              }
              uint64_t v679 = *(void *)(v677 + 96);
              *(void *)(v677 + 96) = 0;
              *(void *)(v677 + 104) = 0;
              if (v679)
              {
                sub_1CB833A08(v679, *(void **)(v679 + 8));
                MEMORY[0x1D25D9CE0](v679, 0x1020C4062D53EE8);
              }
              v680 = *(void **)(v677 + 64);
              if (v680 != (void *)(v677 + 80)) {
                free(v680);
              }
              if (*(void *)v677 != v677 + 16) {
                free(*(void **)v677);
              }
              MEMORY[0x1D25D9CE0](v677, 0x10A0C408DA535C6);
              uint64_t v681 = v871;
              uint64_t v676 = *(void *)(v871 + 408);
            }
            else
            {
              uint64_t v681 = v871;
            }
            *(void *)(v676 + 8 * v675) = 0;
            v682 = *(int32x2_t **)(v681 + 288);
            int32x2_t v683 = v682[46];
            uint64_t v684 = v682[48].u32[0];
            uint64_t v685 = v861;
            if (!v684) {
              goto LABEL_1279;
            }
            LODWORD(v686) = (v684 - 1) & ((v861 >> 4) ^ (v861 >> 9));
            v687 = (uint64_t *)(*(void *)&v683 + 16 * v686);
            uint64_t v688 = *v687;
            if (*v687 != v861)
            {
              int v689 = 1;
              while (v688 != -4096)
              {
                int v690 = v686 + v689++;
                uint64_t v686 = v690 & (v684 - 1);
                uint64_t v688 = *(void *)(*(void *)&v683 + 16 * v686);
                if (v688 == v861)
                {
                  v687 = (uint64_t *)(*(void *)&v683 + 16 * v686);
                  goto LABEL_1280;
                }
              }
LABEL_1279:
              v687 = (uint64_t *)(*(void *)&v683 + 16 * v684);
            }
LABEL_1280:
            if (v687 != (uint64_t *)(*(void *)&v683 + 16 * v684))
            {
              unint64_t v700 = v687[1] & 0xFFFFFFFFFFFFFFF8;
              uint64_t *v687 = -8192;
              v682[47] = vadd_s32(v682[47], (int32x2_t)0x1FFFFFFFFLL);
              *(void *)(v700 + 16) = 0;
            }
            uint64_t v701 = *(void *)(*(void *)(v861 + 24) + 32);
            if (v701)
            {
              uint64_t v702 = *(void *)(v701 + 728);
              if (v702)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v702 + 32))(v702, v861);
                uint64_t v685 = v861;
              }
              uint64_t v703 = *(unsigned int *)(v685 + 40);
              if (v703)
              {
                uint64_t v704 = *(void *)(v685 + 32);
                uint64_t v705 = *(void *)(v701 + 40);
                uint64_t v706 = 32 * v703;
                do
                {
                  if (!*(unsigned char *)v704)
                  {
                    uint64_t v707 = *(unsigned int *)(v704 + 4);
                    if ((v707 & 0x80000000) != 0) {
                      v708 = (uint64_t *)(*(void *)(v705 + 24) + 16 * (v707 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      v708 = (uint64_t *)(*(void *)(v705 + 272) + 8 * v707);
                    }
                    uint64_t v709 = *v708;
                    uint64_t v711 = *(void *)(v704 + 16);
                    uint64_t v710 = *(void *)(v704 + 24);
                    if (v704 != *v708) {
                      v708 = (uint64_t *)(v711 + 24);
                    }
                    uint64_t *v708 = v710;
                    if (v710) {
                      uint64_t v712 = v710;
                    }
                    else {
                      uint64_t v712 = v709;
                    }
                    *(void *)(v712 + 16) = v711;
                    *(void *)(v704 + 16) = 0;
                    *(void *)(v704 + 24) = 0;
                  }
                  v704 += 32;
                  v706 -= 32;
                }
                while (v706);
              }
            }
            v634 = 0;
            *(void *)(v685 + 24) = 0;
            v713 = *(unint64_t **)(v685 + 8);
            unint64_t v714 = *(void *)v685 & 0xFFFFFFFFFFFFFFF8;
            unint64_t *v713 = v714 | *v713 & 7;
            *(void *)(v714 + 8) = v713;
            *(void *)v685 &= 7uLL;
            *(void *)(v685 + 8) = 0;
LABEL_1178:
            unsigned int v641 = *(_DWORD *)(v567 + 8) + 2;
            if (*(_DWORD *)(v567 + 8) == 3) {
              int v642 = 84;
            }
            else {
              int v642 = 85;
            }
            if (v641 < 5) {
              int v642 = 83;
            }
            BOOL v643 = v641 >= 3;
            if (*(_DWORD *)(v567 + 8) == 1) {
              int v644 = 82;
            }
            else {
              int v644 = v642;
            }
            if (v643) {
              int v645 = v644;
            }
            else {
              int v645 = 81;
            }
            sub_1CBB2BB64((uint64_t)&v892, (unsigned int *)v581, v645, v882);
            v646 = (llvm::MachineFunction *)v922;
            uint64_t v647 = *(void *)(*((void *)&v922 + 1) + 8);
            if (v599) {
              uint64_t v648 = 26784;
            }
            else {
              uint64_t v648 = 26832;
            }
            v889 = (void *)*((void *)&v923 + 1);
            if (*((void *)&v923 + 1)) {
              llvm::MetadataTracking::track((uint64_t)&v889, *((unsigned __int8 **)&v923 + 1), 2);
            }
            uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v646, v647 + v648, (unsigned __int8 **)&v889, 0);
            if (v889)
            {
              int v721 = *(unsigned __int8 *)v889;
              if ((v721 - 4) > 0x1E)
              {
                if ((v721 - 3) >= 0xFFFFFFFE) {
                  v724 = v889;
                }
                else {
                  v724 = 0;
                }
                if ((v721 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v723 = (unint64_t)v724 + 8;
LABEL_1324:
                  *(void *)&long long v899 = &v889;
                  sub_1CC5FA668(v723 + 16, &v899);
                  goto LABEL_1195;
                }
                if (v721 == 3) {
                  *((void *)v889 + 1) = 0;
                }
              }
              else if ((*((unsigned char *)v889 + 1) & 0x7F) == 2 || *((_DWORD *)v889 + 3))
              {
                uint64_t v722 = *((void *)v889 + 2);
                if ((v722 & 4) != 0)
                {
                  unint64_t v723 = v722 & 0xFFFFFFFFFFFFFFF8;
                  if (v723) {
                    goto LABEL_1324;
                  }
                }
              }
            }
LABEL_1195:
            v650 = (unint64_t *)*((void *)&v924 + 1);
            uint64_t v651 = *(void *)(v924 + 40);
            *((void *)MachineInstr + 3) = v651;
            uint64_t v652 = *(void *)(v651 + 32);
            uint64_t v653 = *((unsigned int *)MachineInstr + 10);
            if (v653)
            {
              uint64_t v661 = *((void *)MachineInstr + 4);
              uint64_t v662 = *(void *)(v652 + 40);
              uint64_t v663 = 32 * v653;
              do
              {
                if (!*(unsigned char *)v661)
                {
                  uint64_t v664 = *(unsigned int *)(v661 + 4);
                  if ((int)v664 >= 0) {
                    v665 = (uint64_t *)(*(void *)(v662 + 272) + 8 * v664);
                  }
                  else {
                    v665 = (uint64_t *)(*(void *)(v662 + 24) + 16 * (v664 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v666 = *v665;
                  if (*v665)
                  {
                    uint64_t v667 = *(void *)(v666 + 16);
                    *(void *)(v666 + 16) = v661;
                    *(void *)(v661 + 16) = v667;
                    if (*(unsigned char *)(v661 + 3))
                    {
                      *(void *)(v661 + 24) = v666;
                    }
                    else
                    {
                      *(void *)(v661 + 24) = 0;
                      v665 = (uint64_t *)(v667 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v661 + 16) = v661;
                    *(void *)(v661 + 24) = 0;
                  }
                  uint64_t *v665 = v661;
                }
                v661 += 32;
                v663 -= 32;
              }
              while (v663);
            }
            uint64_t v654 = *(void *)(v652 + 728);
            if (v654) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v654 + 24))(v654, MachineInstr);
            }
            unint64_t v655 = *v650 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t MachineInstr = v655 | *(void *)MachineInstr & 7;
            *((void *)MachineInstr + 1) = v650;
            *(void *)(v655 + 8) = MachineInstr;
            unint64_t *v650 = *v650 & 7 | (unint64_t)MachineInstr;
            if ((void)v925) {
              (*(void (**)(void, llvm::MachineInstr *))(*(void *)v925 + 24))(v925, MachineInstr);
            }
            llvm::MachineInstr::addOperand(MachineInstr, v646, (const llvm::MachineOperand *)&v892);
            LODWORD(v899) = 1;
            *((void *)&v899 + 1) = 0;
            v900 = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v646, (const llvm::MachineOperand *)&v899);
            LODWORD(v899) = 1;
            *((void *)&v899 + 1) = 0;
            v900 = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v646, (const llvm::MachineOperand *)&v899);
            llvm::MachineInstr::addOperand(MachineInstr, v646, (const llvm::MachineOperand *)&v895);
            LODWORD(v899) = 1;
            *((void *)&v899 + 1) = 0;
            v900 = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v646, (const llvm::MachineOperand *)&v899);
            *(void *)&long long v899 = v589;
            *((void *)&v899 + 1) = MachineInstr;
            v900 = v634;
            if (v919 >= HIDWORD(v919))
            {
              if (__base > &v899 || (char *)__base + 24 * v919 <= (char *)&v899) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v656 = (char *)__base + 24 * v919;
            long long v657 = v899;
            *((void *)v656 + 2) = v900;
            *(_OWORD *)v656 = v657;
            LODWORD(v919) = v919 + 1;
            v921 = (llvm::MachineOperand *)&unk_1F261CD58;
            if (!*((void *)&v923 + 1)) {
              goto LABEL_1205;
            }
            int v658 = **((unsigned char **)&v923 + 1);
            if ((v658 - 4) > 0x1E)
            {
              if ((v658 - 3) >= 0xFFFFFFFE) {
                uint64_t v659 = *((void *)&v923 + 1);
              }
              else {
                uint64_t v659 = 0;
              }
              if ((v658 - 3) < 0xFFFFFFFE)
              {
                if (v658 == 3) {
                  *(void *)(*((void *)&v923 + 1) + 8) = 0;
                }
                goto LABEL_1205;
              }
              unint64_t v660 = v659 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*((void *)&v923 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v923 + 1) + 12)) {
                goto LABEL_1205;
              }
              uint64_t v720 = *(void *)(*((void *)&v923 + 1) + 16);
              if ((v720 & 4) == 0) {
                goto LABEL_1205;
              }
              unint64_t v660 = v720 & 0xFFFFFFFFFFFFFFF8;
              if (!v660) {
                goto LABEL_1205;
              }
            }
            *(void *)&long long v899 = (char *)&v923 + 8;
            sub_1CC5FA668(v660 + 16, &v899);
LABEL_1205:
            if (++v579 == v580)
            {
              v579 = (llvm::MachineOperand **)v904;
              v566 = v865;
              v565 = v866;
              break;
            }
          }
        }
        if (v579 != (llvm::MachineOperand **)&v906) {
          free(v579);
        }
      }
LABEL_1336:
      if (++v565 == v566)
      {
        if (v911)
        {
          v727 = (char *)v910;
          v728 = (char *)v910 + 40 * v911;
          do
          {
            v729 = *(unsigned int **)v727;
            unsigned int v730 = *((_DWORD *)v727 + 6);
            unsigned int v731 = *((_DWORD *)v727 + 8);
            int v733 = *((_DWORD *)v727 + 2);
            unsigned int v732 = *((_DWORD *)v727 + 3);
            unsigned int v734 = **(_DWORD **)v727;
            if (!(_BYTE)v734)
            {
              uint64_t v735 = *((void *)v729 + 2);
              if (v735)
              {
                uint64_t v736 = *((void *)v729 + 1);
                if (v736)
                {
                  uint64_t v737 = *(void *)(v736 + 24);
                  if (v737)
                  {
                    uint64_t v738 = *(void *)(v737 + 32);
                    if (v738)
                    {
                      uint64_t v739 = *(void *)(v738 + 40);
                      uint64_t v740 = v729[1];
                      if ((v740 & 0x80000000) != 0) {
                        v741 = (unsigned int **)(*(void *)(v739 + 24) + 16 * (v740 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        v741 = (unsigned int **)(*(void *)(v739 + 272) + 8 * v740);
                      }
                      v742 = *v741;
                      v743 = (unsigned int *)*((void *)v729 + 3);
                      if (*v741 != v729) {
                        v741 = (unsigned int **)(v735 + 24);
                      }
                      *v741 = v743;
                      if (v743) {
                        v744 = v743;
                      }
                      else {
                        v744 = v742;
                      }
                      *((void *)v744 + 2) = v735;
                      *((void *)v729 + 2) = 0;
                      *((void *)v729 + 3) = 0;
                      unsigned int v734 = *v729;
                    }
                  }
                }
              }
            }
            BOOL v30 = v733 == 0;
            int v745 = v733 & 0xFFF00 | 7;
            v729[4] = v730;
            v729[6] = v731;
            if (v30) {
              int v746 = 7;
            }
            else {
              int v746 = v745;
            }
            unsigned int *v729 = v746 | v734 & 0xFFF00000;
            v729[1] = v732;
            uint64_t v747 = *(void *)(*(void *)v727 + 8);
            if (**(_WORD **)(v747 + 16) == 265) {
              *(void *)(v747 + 16) = *(void *)(*(void *)(a1 + 848) + 8) + 12768;
            }
            v727 += 40;
          }
          while (v727 != v728);
        }
        goto LABEL_1366;
      }
    }
    int v725 = 1;
    while (v573 != -1)
    {
      int v726 = v571 + v725++;
      uint64_t v571 = v726 & (v570 - 1);
      int v573 = *(_DWORD *)(v569 + 8 * v571);
      if (v568 == v573)
      {
        v572 = (int *)(v569 + 8 * v571);
        goto LABEL_1046;
      }
    }
LABEL_1342:
    v572 = (int *)(v569 + 8 * v570);
    goto LABEL_1046;
  }
LABEL_1366:
  if (!v919)
  {
    *(void *)&long long v922 = 0;
    v921 = 0;
    DWORD2(v922) = 0;
    *(void *)&long long v924 = 0;
    long long v923 = 0uLL;
    goto LABEL_1476;
  }
  uint64_t v748 = 24 * v919;
  v749 = (uint64_t *)((char *)__base + 16);
  do
  {
    if (*v749) {
      sub_1CB914C88(*(void *)(*(void *)(a1 + 888) + 288), *v749, 0);
    }
    sub_1CB914C88(*(void *)(*(void *)(a1 + 888) + 288), *(v749 - 1), 0);
    v749 += 3;
    v748 -= 24;
  }
  while (v748);
  v750 = (unint64_t *)__base;
  *(void *)&long long v922 = 0;
  v921 = 0;
  DWORD2(v922) = 0;
  *(void *)&long long v924 = 0;
  long long v923 = 0uLL;
  if (v919)
  {
    v751 = (unint64_t *)((char *)__base + 24 * v919);
    while (1)
    {
      v752 = (llvm::MachineInstr *)*v750;
      __int16 v753 = *(_WORD *)(*v750 + 44);
      unint64_t v754 = *v750;
      if ((v753 & 4) != 0)
      {
        do
          unint64_t v754 = *(void *)v754 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v754 + 44) & 4) != 0);
      }
      unint64_t v755 = *v750;
      if ((v753 & 8) != 0)
      {
        do
          unint64_t v755 = *(void *)(v755 + 8);
        while ((*(_WORD *)(v755 + 44) & 8) != 0);
      }
      unint64_t v756 = *(void *)(v755 + 8);
      if (v754 != v756)
      {
        while (1)
        {
          unsigned int v757 = **(unsigned __int16 **)(v754 + 16);
          BOOL v614 = v757 > 0x17;
          int v758 = (1 << v757) & 0x83E000;
          if (v614 || v758 == 0) {
            break;
          }
          unint64_t v754 = *(void *)(v754 + 8);
          if (v754 == v756)
          {
            unint64_t v754 = v756;
            break;
          }
        }
      }
      unsigned int v760 = *(_DWORD *)(*((void *)v752 + 4) + 36);
      v761 = *(int32x2_t **)(*(void *)(a1 + 888) + 288);
      int32x2_t v762 = v761[46];
      uint64_t v763 = v761[48].u32[0];
      if (!v763) {
        goto LABEL_1389;
      }
      LODWORD(v764) = ((v754 >> 4) ^ (v754 >> 9)) & (v763 - 1);
      v765 = (uint64_t *)(*(void *)&v762 + 16 * v764);
      uint64_t v766 = *v765;
      if (v754 != *v765) {
        break;
      }
      uint64_t v767 = v765[1];
LABEL_1391:
      LODWORD(v770) = (v763 - 1) & ((v752 >> 4) ^ (v752 >> 9));
      v771 = (llvm::MachineInstr **)(*(void *)&v762 + 16 * v770);
      v772 = *v771;
      if (*v771 == v752) {
        goto LABEL_1397;
      }
      int v773 = 1;
      while (v772 != (llvm::MachineInstr *)-4096)
      {
        int v774 = v770 + v773++;
        uint64_t v770 = v774 & (v763 - 1);
        v772 = *(llvm::MachineInstr **)(*(void *)&v762 + 16 * v770);
        if (v772 == v752)
        {
          v771 = (llvm::MachineInstr **)(*(void *)&v762 + 16 * v770);
          goto LABEL_1397;
        }
      }
LABEL_1396:
      v771 = (llvm::MachineInstr **)(*(void *)&v762 + 16 * v763);
LABEL_1397:
      if (v771 != (llvm::MachineInstr **)(*(void *)&v762 + 16 * v763))
      {
        unint64_t v775 = (unint64_t)v771[1] & 0xFFFFFFFFFFFFFFF8;
        *v771 = (llvm::MachineInstr *)-8192;
        v761[47] = vadd_s32(v761[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v775 + 16) = 0;
        v752 = (llvm::MachineInstr *)*v750;
      }
      llvm::MachineInstr::eraseFromParent(v752);
      LODWORD(v904) = v760;
      if ((v760 & 0x80000000) == 0)
      {
        uint64_t v776 = *(void *)(a1 + 864);
        if (v776) {
          v777 = (void *)(v776 + 8);
        }
        else {
          v777 = 0;
        }
        unint64_t v778 = *(unsigned int *)(*v777 + 24 * v760 + 16);
        v779 = (_WORD *)(v777[6] + ((v778 >> 3) & 0x1FFFFFFE));
        unsigned __int16 v780 = *v779 + (v778 & 0xF) * v760;
        unint64_t v781 = v767 & 0xFFFFFFFFFFFFFFF8 | 4;
        while (1)
        {
          v782 = *(void **)(a1 + 880);
          uint64_t v783 = (*(uint64_t (**)(void))(**(void **)(*v782 + 16) + 176))(*(void *)(*v782 + 16));
          if (v783) {
            v784 = (uint64_t *)(v783 + 8);
          }
          else {
            v784 = 0;
          }
          uint64_t v785 = v784[5];
          uint64_t v786 = 4 * v780;
          unsigned int v787 = *(unsigned __int16 *)(v785 + v786);
          if (*(_WORD *)(v785 + v786))
          {
            uint64_t v788 = v784[6];
            if (!v788) {
              goto LABEL_1450;
            }
            uint64_t v789 = *v784;
            unsigned int v790 = *(unsigned __int16 *)(v785 + 4 * v780 + 2);
            do
            {
              unsigned int v791 = v787;
              unsigned int v792 = (unsigned __int16)v787;
              unsigned int v787 = v790;
              v793 = (unsigned __int16 *)(v788 + 2 * *(unsigned int *)(v789 + 24 * v792 + 8));
              while (((*(void *)(v782[44] + ((v791 >> 3) & 0x1FF8)) >> v791) & 1) != 0)
              {
                int v794 = *v793++;
                v791 += v794;
                if (!v794) {
                  goto LABEL_1450;
                }
              }
              unsigned int v790 = 0;
            }
            while ((_WORD)v787);
          }
          uint64_t v795 = *(void *)(a1 + 888);
          uint64_t v796 = *(void *)(*(void *)(v795 + 680) + 8 * v780);
          if (v796)
          {
            unint64_t v797 = v750[1];
            __int16 v798 = *(_WORD *)(v797 + 44);
            unint64_t v799 = v797;
            if ((v798 & 4) != 0)
            {
              do
                unint64_t v799 = *(void *)v799 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v799 + 44) & 4) != 0);
            }
            if ((v798 & 8) != 0)
            {
              do
                unint64_t v797 = *(void *)(v797 + 8);
              while ((*(_WORD *)(v797 + 44) & 8) != 0);
            }
            unint64_t v800 = *(void *)(v797 + 8);
            if (v799 != v800)
            {
              while (1)
              {
                unsigned int v801 = **(unsigned __int16 **)(v799 + 16);
                BOOL v614 = v801 > 0x17;
                int v802 = (1 << v801) & 0x83E000;
                if (v614 || v802 == 0) {
                  break;
                }
                unint64_t v799 = *(void *)(v799 + 8);
                if (v799 == v800)
                {
                  unint64_t v799 = v800;
                  break;
                }
              }
            }
            uint64_t v804 = *(void *)(v795 + 288);
            uint64_t v805 = *(void *)(v804 + 368);
            uint64_t v806 = *(unsigned int *)(v804 + 384);
            if (v806)
            {
              LODWORD(v807) = ((v799 >> 4) ^ (v799 >> 9)) & (v806 - 1);
              v808 = (uint64_t *)(v805 + 16 * v807);
              uint64_t v809 = *v808;
              if (v799 != *v808)
              {
                int v810 = 1;
                while (v809 != -4096)
                {
                  int v811 = v807 + v810++;
                  uint64_t v807 = v811 & (v806 - 1);
                  uint64_t v809 = *(void *)(v805 + 16 * v807);
                  if (v799 == v809)
                  {
                    v808 = (uint64_t *)(v805 + 16 * v807);
                    goto LABEL_1432;
                  }
                }
                goto LABEL_1431;
              }
            }
            else
            {
LABEL_1431:
              v808 = (uint64_t *)(v805 + 16 * v806);
            }
LABEL_1432:
            uint64_t v812 = v808[1];
            unint64_t v813 = *(unsigned int *)(v796 + 8);
            v814 = *(void **)v796;
            if (v813)
            {
              uint64_t v815 = v814[3 * v813 - 2];
              unsigned int v816 = *(_DWORD *)((v812 & 0xFFFFFFFFFFFFFFF8) + 24) | (v812 >> 1) & 3;
              unsigned int v817 = (v815 >> 1) & 3 | *(_DWORD *)((v815 & 0xFFFFFFFFFFFFFFF8) + 24);
              v818 = v814;
              unint64_t v819 = v813;
              if (v816 < v817)
              {
                do
                {
                  unint64_t v820 = v819 >> 1;
                  uint64_t v821 = v818[3 * (v819 >> 1) + 1];
                  LODWORD(v821) = (v821 >> 1) & 3 | *(_DWORD *)((v821 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v819 -= (v819 >> 1) + 1;
                  BOOL v822 = v816 >= v821;
                  if (v816 >= v821) {
                    unint64_t v823 = v820 + 1;
                  }
                  else {
                    unint64_t v823 = 0;
                  }
                  v818 += 3 * v823;
                  if (!v822) {
                    unint64_t v819 = v820;
                  }
                }
                while (v819);
                goto LABEL_1443;
              }
            }
            else
            {
              LODWORD(v813) = 0;
            }
            v818 = &v814[3 * v813];
LABEL_1443:
            v824 = &v814[3 * v813];
            if (v818 == v824
              || ((*v818 >> 1) & 3 | *(_DWORD *)((*v818 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v812 & 0xFFFFFFFFFFFFFFF8) + 24) | (v812 >> 1) & 3))
            {
              v818 = v824;
            }
            if (v818 == v824) {
              v825 = 0;
            }
            else {
              v825 = v818;
            }
            if (v825[1] == v781) {
              v825[1] = v812 & 0xFFFFFFFFFFFFFFF8 | 4;
            }
          }
LABEL_1450:
          int v826 = (unsigned __int16)v779[1];
          ++v779;
          v780 += v826;
          if (!v826) {
            goto LABEL_1458;
          }
        }
      }
      sub_1CBA84648((uint64_t)&v921, (int *)&v904);
LABEL_1458:
      unint64_t v827 = v750[2];
      if (v827)
      {
        uint64_t v828 = *(void *)(a1 + 888);
        int v829 = *(_DWORD *)(*(void *)(v827 + 32) + 4);
        uint64_t v830 = *(unsigned int *)(v828 + 416);
        if ((v829 & 0x7FFFFFFFu) >= v830) {
          sub_1CB9153B8(v828 + 408, (v829 & 0x7FFFFFFF) - v830 + 1, *(void *)(v828 + 424));
        }
        operator new();
      }
      v750 += 3;
      if (v750 == v751)
      {
        v832 = (_DWORD *)*((void *)&v923 + 1);
        for (n = (_DWORD *)v923; n != v832; ++n)
        {
          uint64_t v833 = *(void *)(a1 + 888);
          uint64_t v834 = *n & 0x7FFFFFFF;
          v835 = (void *)(v833 + 408);
          uint64_t v836 = *(unsigned int *)(v833 + 416);
          if ((*n & 0x7FFFFFFFu) >= v836)
          {
            sub_1CB9153B8((uint64_t)v835, v834 - v836 + 1, *(void *)(v833 + 424));
LABEL_1474:
            operator new();
          }
          uint64_t v837 = *(void *)(*v835 + 8 * v834);
          if (!v837) {
            goto LABEL_1474;
          }
          llvm::LiveIntervals::shrinkToUses((void *)v833, v837, 0);
        }
        goto LABEL_1476;
      }
    }
    int v768 = 1;
    while (v766 != -4096)
    {
      int v769 = v764 + v768++;
      uint64_t v764 = v769 & (v763 - 1);
      uint64_t v766 = *(void *)(*(void *)&v762 + 16 * v764);
      if (v754 == v766) {
        goto LABEL_1390;
      }
    }
LABEL_1389:
    uint64_t v764 = v761[48].u32[0];
LABEL_1390:
    uint64_t v767 = *(void *)(*(void *)&v762 + 16 * v764 + 8);
    if (!v763) {
      goto LABEL_1396;
    }
    goto LABEL_1391;
  }
LABEL_1476:
  uint64_t v838 = *(unsigned int *)(a1 + 616);
  if (v838)
  {
    uint64_t v839 = *(void *)(a1 + 608);
    uint64_t v840 = v839 + 8 * v838;
    do
    {
      uint64_t v841 = *(void *)(a1 + 888);
      uint64_t v842 = *(_DWORD *)(**(void **)v839 + 112) & 0x7FFFFFFF;
      uint64_t v843 = *(void *)(v841 + 408);
      uint64_t v844 = *(void *)(v843 + 8 * v842);
      if (v844)
      {
        uint64_t v845 = *(void *)(v844 + 104);
        if (v845)
        {
          do
          {
            uint64_t v848 = *(void *)(v845 + 96);
            uint64_t v849 = *(void *)(v845 + 104);
            *(void *)(v845 + 96) = 0;
            if (v848)
            {
              sub_1CB833A08(v848, *(void **)(v848 + 8));
              MEMORY[0x1D25D9CE0](v848, 0x1020C4062D53EE8);
            }
            v850 = *(void **)(v845 + 64);
            if (v850 != (void *)(v845 + 80)) {
              free(v850);
            }
            if (*(void *)v845 != v845 + 16) {
              free(*(void **)v845);
            }
            uint64_t v845 = v849;
          }
          while (v849);
        }
        uint64_t v846 = *(void *)(v844 + 96);
        *(void *)(v844 + 96) = 0;
        *(void *)(v844 + 104) = 0;
        if (v846)
        {
          sub_1CB833A08(v846, *(void **)(v846 + 8));
          MEMORY[0x1D25D9CE0](v846, 0x1020C4062D53EE8);
        }
        v847 = *(void **)(v844 + 64);
        if (v847 != (void *)(v844 + 80)) {
          free(v847);
        }
        if (*(void *)v844 != v844 + 16) {
          free(*(void **)v844);
        }
        MEMORY[0x1D25D9CE0](v844, 0x10A0C408DA535C6);
        uint64_t v843 = *(void *)(v841 + 408);
      }
      *(void *)(v843 + 8 * v842) = 0;
      v839 += 8;
    }
    while (v839 != v840);
  }
  if ((void)v923)
  {
    *((void *)&v923 + 1) = v923;
    operator delete((void *)v923);
  }
  MEMORY[0x1D25D9CD0](v921, 4);
  if (v910 != v912) {
    free(v910);
  }
  if (__base != v920) {
    free(__base);
  }
  return *(_DWORD *)(a1 + 616) != 0;
}

_DWORD *sub_1CBB231A0(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(8 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void *sub_1CBB23234(void *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = operator new(4 * v4, (std::align_val_t)4uLL);
    *uint64_t v2 = result;
    v2[1] = 0;
    uint64_t v5 = *((unsigned int *)v2 + 4);
    if (v5)
    {
      return memset(result, 255, 4 * v5);
    }
  }
  else
  {
    *uint64_t result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1CBB232D4(void *a1)
{
  if (a1)
  {
    sub_1CBB232D4(*a1);
    sub_1CBB232D4(a1[1]);
    unint64_t v3 = (void *)a1[8];
    if (v3)
    {
      a1[9] = v3;
      operator delete(v3);
    }
    MEMORY[0x1D25D9CD0](a1[5], 4);
    operator delete(a1);
  }
}

void sub_1CBB2333C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 - 8);
    if (v3)
    {
      uint64_t v4 = 176 * v3;
      do
      {
        uint64_t v5 = a2 + v4;
        uint64_t v6 = *(void **)(a2 + v4 - 64);
        if ((void *)(a2 + v4 - 48) != v6) {
          free(v6);
        }
        uint64_t v7 = *(void **)(v5 - 144);
        if ((void *)(v5 - 128) != v7) {
          free(v7);
        }
        v4 -= 176;
      }
      while (v4);
    }
    JUMPOUT(0x1D25D9CB0);
  }
}

_DWORD *sub_1CBB233D8(_DWORD *result)
{
  uint64_t v1 = result;
  int v2 = result[2];
  if (v2)
  {
    unsigned int v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      int v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64) {
        int v5 = 64;
      }
      else {
        int v5 = v4;
      }
LABEL_9:
      if (v5 == v3)
      {
        *((void *)result + 1) = 0;
        uint64_t v12 = 8 * v3;
        uint64_t v13 = *(_DWORD **)result;
        do
        {
          _DWORD *v13 = -1;
          v13 += 2;
          v12 -= 8;
        }
        while (v12);
      }
      else
      {
        uint64_t result = (_DWORD *)MEMORY[0x1D25D9CD0](*(void *)result, 4);
        if (v5)
        {
          unint64_t v6 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
          LODWORD(v7) = (((v7 | (v7 >> 8)) >> 16) | v7 | (v7 >> 8)) + 1;
          v1[4] = v7;
          uint64_t result = operator new(8 * v7, (std::align_val_t)4uLL);
          *(void *)uint64_t v1 = result;
          *((void *)v1 + 1) = 0;
          uint64_t v8 = v1[4];
          if (v8)
          {
            uint64_t v9 = 8 * v8;
            do
            {
              *uint64_t result = -1;
              result += 2;
              v9 -= 8;
            }
            while (v9);
          }
        }
        else
        {
          *(void *)uint64_t v1 = 0;
          *((void *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3]) {
      return result;
    }
    unsigned int v3 = result[4];
    if (v3 > 0x40)
    {
      int v5 = 0;
      goto LABEL_9;
    }
  }
  if (v3)
  {
    uint64_t v10 = *(_DWORD **)result;
    uint64_t v11 = 8 * v3;
    do
    {
      _DWORD *v10 = -1;
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
  }
  *((void *)result + 1) = 0;
  return result;
}

_DWORD *sub_1CBB23528(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        int v2 = *(void **)result;
        uint64_t v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return sub_1CBB23578(result);
    }
  }
  return result;
}

_DWORD *sub_1CBB23578(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      unint64_t v6 = *(void **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CBB231A0(v1, v5);
  }
  return result;
}

void *sub_1CBB23624(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    result[1] = 0;
    if (v2)
    {
      unint64_t v6 = (void *)*result;
      return memset(v6, 255, 4 * v2);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*result, 4);
    return sub_1CBB23234(v1, v5);
  }
  return result;
}

void sub_1CBB236E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  unint64_t v6 = *(uint64_t **)a1;
  if (v4 >= v5)
  {
    unint64_t v8 = v4 + 1;
    BOOL v10 = (unint64_t)v6 <= a2 && (unint64_t)&v6[v4] > a2;
    if (v10) {
      uint64_t v11 = (uint64_t)(a2 - (void)v6) >> 3;
    }
    else {
      uint64_t v11 = -1;
    }
    if (v4 == -1) {
      sub_1CD0A88F0(v8);
    }
    if (v5 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v12 = (2 * v5) | 1;
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 >= 0xFFFFFFFF) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = (uint64_t *)malloc_type_malloc(8 * v13, 0x4065EBACuLL);
    if (!v14) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unint64_t v6 = v14;
    int v15 = *(uint64_t **)a1;
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      uint64_t v18 = 8 * v16;
      uint64_t v19 = v6;
      do
      {
        uint64_t v20 = *v15;
        *v15++ = 0;
        *v19++ = v20;
        v18 -= 8;
      }
      while (v18);
      uint64_t v21 = *(void *)a1 - 8;
      do
      {
        uint64_t v22 = *(void *)(v21 + v17);
        *(void *)(v21 + v17) = 0;
        if (v22) {
          MEMORY[0x1D25D9CE0](v22, 0x1020C403A5D3213);
        }
        v17 -= 8;
      }
      while (v17);
      int v15 = *(uint64_t **)a1;
    }
    if (v15 != (uint64_t *)(a1 + 16)) {
      free(v15);
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 12) = v13;
    if (v10) {
      uint64_t v2 = &v6[v11];
    }
    uint64_t v4 = *(unsigned int *)(a1 + 8);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  v6[v4] = v7;
  *(_DWORD *)(a1 + 8) = v4 + 1;
}

uint64_t sub_1CBB23854(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 0;
  }
  while ((*(_DWORD *)v3 & 0x80000000) != 0)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(v3 + 8);
LABEL_9:
  int v6 = **(unsigned __int16 **)(v5 + 16);
  if (v6 != 263 && v6 != 550 && v6 != 4998)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v3 + 24);
      if (!v3) {
        return 0;
      }
      if ((*(_DWORD *)v3 & 0x80000000) == 0 && *(void *)(v3 + 8) != v5)
      {
        uint64_t v5 = *(void *)(v3 + 8);
        goto LABEL_9;
      }
    }
  }
  return 1;
}

_DWORD *sub_1CBB238E8(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unint64_t v12 = 0;
LABEL_13:
    int v6 = sub_1CBB23AC4(a1, a2, v12);
    *int v6 = *a2;
    *((void *)v6 + 1) = 0;
    return v6 + 2;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  int v6 = (_DWORD *)(*(void *)a1 + 16 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    unint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -2;
      }
      if (v10) {
        unint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      int v6 = (_DWORD *)(*(void *)a1 + 16 * (v11 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6 + 2;
      }
    }
    if (v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v6;
    }
    goto LABEL_13;
  }
  return v6 + 2;
}

BOOL sub_1CBB239A4(uint64_t a1, void *a2)
{
  sub_1CBB23C3C((_DWORD *)a1, a2, (uint64_t)&v17);
  int v4 = v18;
  if (v18)
  {
    int v6 = *(void **)(a1 + 32);
    unint64_t v5 = *(void *)(a1 + 40);
    if ((unint64_t)v6 >= v5)
    {
      unint64_t v8 = *(void **)(a1 + 24);
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        uint64_t v13 = (char *)operator new(8 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      *(void *)uint64_t v14 = *a2;
      int v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          uint64_t v15 = *--v6;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        int v6 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v14;
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = &v13[8 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *int v6 = *a2;
      int v7 = v6 + 1;
    }
    *(void *)(a1 + 32) = v7;
  }
  return v4 != 0;
}

_DWORD *sub_1CBB23AC4(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CBB0E4B4((uint64_t *)a1, 2 * v6);
    int v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = (37 * *a2) & v9;
    a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
    int v11 = *a3;
    if (*a2 != *a3)
    {
      unint64_t v12 = 0;
      int v13 = 1;
      while (v11 != -1)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          unint64_t v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (_DWORD *)(*(void *)a1 + 16 * v10);
        int v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      int v7 = *a3;
      goto LABEL_4;
    }
    sub_1CBB0E4B4((uint64_t *)a1, v6);
    int v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = (37 * *a2) & v16;
    a3 = (_DWORD *)(*(void *)a1 + 16 * v17);
    int v18 = *a3;
    if (*a2 != *a3)
    {
      unint64_t v12 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          unint64_t v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (_DWORD *)(*(void *)a1 + 16 * v17);
        int v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CBB23C3C@<X0>(_DWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v10 = 0;
  uint64_t result = sub_1CBB23CC4((uint64_t)a1, a2, &v10);
  int v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CBB23D58(a1, (uint64_t)a2, a2, v10);
    int v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * a1[4];
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1CBB23CC4(uint64_t a1, void *a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    int v4 = v3 - 1;
    unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    unsigned int v6 = (void *)(*(void *)a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      char v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          char v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unsigned int v6 = (void *)(*(void *)a1 + 8 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*a2 == *v6) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unsigned int v6 = v8;
      }
    }
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

void *sub_1CBB23D58(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CBB23E0C((uint64_t)a1, v7);
  int v9 = 0;
  sub_1CBB23CC4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CBB23E0C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBB23ED8(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB23ED8(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v9 = 0;
      uint64_t result = sub_1CBB23CC4(v5, a2, &v9);
      *int v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBB23F80(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    int v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBB2401C(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CBA85C80(a1, 2 * v7);
    int v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
    int v12 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v13 = 0;
      int v14 = 1;
      while (v12 != -1)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          unsigned int v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (_DWORD *)(*(void *)a1 + 8 * v11);
        int v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      int v8 = *a4;
      goto LABEL_4;
    }
    sub_1CBA85C80(a1, v7);
    int v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(void *)a1 + 8 * v18);
    int v19 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v13 = 0;
      int v20 = 1;
      while (v19 != -1)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -2;
        }
        if (v21) {
          unsigned int v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (_DWORD *)(*(void *)a1 + 8 * v18);
        int v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_20:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CBB24198(uint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 248) < a2) {
    operator new[]();
  }
  return result;
}

uint64_t *sub_1CBB2468C(uint64_t *result)
{
  uint64_t v1 = result + 1;
  uint64_t v2 = *result;
  if (*(_DWORD *)(*result + 192))
  {
    unsigned int v3 = *(_DWORD *)(v2 + 196);
    *((_DWORD *)result + 4) = 0;
    if (!*((_DWORD *)result + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v4 = (void *)*v1;
    *(void *)*uint64_t v1 = v2 + 8;
  }
  else
  {
    unsigned int v3 = *(_DWORD *)(v2 + 196);
    *((_DWORD *)result + 4) = 0;
    if (!*((_DWORD *)result + 5)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v4 = (void *)*v1;
    *(void *)*uint64_t v1 = v2;
  }
  v4[1] = v3;
  unsigned int v5 = *((_DWORD *)result + 4);
  unsigned int v6 = v5 + 1;
  *((_DWORD *)result + 4) = v5 + 1;
  unsigned int v7 = *(_DWORD *)(*result + 192);
  if (v7) {
    BOOL v8 = v5 >= v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    do
    {
      uint64_t v9 = result[1];
      uint64_t v10 = *(void *)(*(void *)(v9 + 16 * v5) + 8 * *(unsigned int *)(v9 + 16 * v5 + 12));
      if (v6 >= *((_DWORD *)result + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v11 = (unint64_t *)(v9 + 16 * v6);
      *unsigned int v11 = v10 & 0xFFFFFFFFFFFFFFC0;
      v11[1] = (v10 & 0x3F) + 1;
      unsigned int v5 = *((_DWORD *)result + 4);
      unsigned int v6 = v5 + 1;
      *((_DWORD *)result + 4) = v5 + 1;
    }
    while (v5 < v7);
  }
  return result;
}

uint64_t sub_1CBB24830(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBB248D4(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBB24A50(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB24A50(a1, v14, v6);
}

uint64_t sub_1CBB24A50(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unsigned int v11 = 0;
      uint64_t result = sub_1CBB24830((uint64_t)v5, v10, &v11);
      *unsigned int v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBB24B0C(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    int v5 = v4 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    uint64_t v7 = (void *)(*(void *)a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7) {
      return 0;
    }
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(*(void *)a1 + 8 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return 0;
      }
    }
    if (v9) {
      int v14 = v9;
    }
    else {
      int v14 = v7;
    }
  }
  else
  {
    int v14 = 0;
  }
  *sub_1CBB24DE0(a1, (uint64_t)a2, a2, v14) = *a2;
  unsigned int v16 = *(void **)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  if ((unint64_t)v16 >= v15)
  {
    unsigned int v18 = *(void **)(a1 + 24);
    uint64_t v19 = v16 - v18;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      abort();
    }
    uint64_t v21 = v15 - (void)v18;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        sub_1CB833614();
      }
      int v23 = (char *)operator new(8 * v22);
    }
    else
    {
      int v23 = 0;
    }
    unint64_t v24 = &v23[8 * v19];
    *(void *)unint64_t v24 = *a2;
    int v17 = v24 + 8;
    if (v16 != v18)
    {
      do
      {
        uint64_t v25 = *--v16;
        *((void *)v24 - 1) = v25;
        v24 -= 8;
      }
      while (v16 != v18);
      unsigned int v16 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 24) = v24;
    *(void *)(a1 + 32) = v17;
    *(void *)(a1 + 40) = &v23[8 * v22];
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unsigned int v16 = *a2;
    int v17 = v16 + 1;
  }
  *(void *)(a1 + 32) = v17;
  return 1;
}

uint64_t sub_1CBB24CA0(uint64_t a1, unint64_t a2, char a3)
{
  __int16 v3 = *(_WORD *)(a2 + 44);
  unint64_t v4 = a2;
  unint64_t v5 = a2;
  if ((v3 & 0xC) != 0)
  {
    unint64_t v4 = a2;
    if ((v3 & 4) != 0)
    {
      unint64_t v4 = a2;
      do
        unint64_t v4 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v4 + 44) & 4) != 0);
    }
    unint64_t v5 = a2;
    if ((v3 & 8) != 0)
    {
      do
        unint64_t v5 = *(void *)(v5 + 8);
      while ((*(_WORD *)(v5 + 44) & 8) != 0);
    }
  }
  if ((a3 & 1) == 0)
  {
    a2 = *(void *)(v5 + 8);
    if (v4 != a2)
    {
      while (1)
      {
        unsigned int v6 = **(unsigned __int16 **)(v4 + 16);
        BOOL v7 = v6 > 0x17;
        int v8 = (1 << v6) & 0x83E000;
        if (v7 || v8 == 0) {
          break;
        }
        unint64_t v4 = *(void *)(v4 + 8);
        if (v4 == a2) {
          goto LABEL_10;
        }
      }
    }
    a2 = v4;
  }
LABEL_10:
  uint64_t v10 = *(void *)(a1 + 368);
  uint64_t v11 = *(unsigned int *)(a1 + 384);
  if (!v11) {
    goto LABEL_17;
  }
  LODWORD(v12) = ((a2 >> 4) ^ (a2 >> 9)) & (v11 - 1);
  uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
  uint64_t v14 = *v13;
  if (a2 != *v13)
  {
    int v16 = 1;
    while (v14 != -4096)
    {
      int v17 = v12 + v16++;
      uint64_t v12 = v17 & (v11 - 1);
      uint64_t v14 = *(void *)(v10 + 16 * v12);
      if (a2 == v14)
      {
        uint64_t v13 = (uint64_t *)(v10 + 16 * v12);
        return v13[1];
      }
    }
LABEL_17:
    uint64_t v13 = (uint64_t *)(v10 + 16 * v11);
  }
  return v13[1];
}

uint64_t sub_1CBB24DA4(void *a1, void *a2)
{
  unsigned int v2 = (*a1 >> 1) & 3 | *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v3 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3 < v2;
  }
}

void *sub_1CBB24DE0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBB24F14(a1, v7);
      int v17 = 0;
      sub_1CBB23CC4(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBB24F14(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 8 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBB24F14(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBB24FE0(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB24FE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    unint64_t v4 = *(void **)result;
    uint64_t v5 = 8 * v3;
    do
    {
      *v4++ = -4096;
      v5 -= 8;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    int v6 = 0;
    int v7 = v3 - 1;
    do
    {
      uint64_t v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        uint64_t v10 = (void *)(*(void *)result + 8 * v9);
        uint64_t v11 = *v10;
        if (v8 != *v10)
        {
          uint64_t v12 = 0;
          int v13 = 1;
          while (v11 != -4096)
          {
            if (v12) {
              BOOL v14 = 0;
            }
            else {
              BOOL v14 = v11 == -8192;
            }
            if (v14) {
              uint64_t v12 = v10;
            }
            unsigned int v15 = v9 + v13++;
            unsigned int v9 = v15 & v7;
            uint64_t v10 = (void *)(*(void *)result + 8 * (v15 & v7));
            uint64_t v11 = *v10;
            if (v8 == *v10) {
              goto LABEL_19;
            }
          }
          if (v12) {
            uint64_t v10 = v12;
          }
        }
LABEL_19:
        void *v10 = v8;
        *(_DWORD *)(result + 8) = ++v6;
      }
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1CBB250A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)a2 + 24 * *(unsigned int *)(a2 + 8);
  unint64_t v5 = *(void *)(v4 - 16);
  unsigned int v6 = (v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24);
  int v7 = (void *)(a3 & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v6 < v8)
  {
    uint64_t v10 = *(void **)(a1 + 888);
    uint64_t v11 = v10[36];
    unsigned int v12 = *(_DWORD *)((*(void *)(v11 + 344) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v6 >= v12) {
      unint64_t v5 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF9 | (2 * ((v5 >> 1) & 3));
    }
    if (v5 >= 8 && (uint64_t v13 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
    {
      BOOL v14 = (uint64_t *)(v13 + 24);
    }
    else
    {
      uint64_t v23 = *(unsigned int *)(v11 + 544);
      if (v23)
      {
        unsigned int v24 = *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3;
        uint64_t v25 = *(void **)(v11 + 536);
        unint64_t v26 = *(unsigned int *)(v11 + 544);
        do
        {
          unint64_t v27 = v26 >> 1;
          uint64_t v28 = &v25[2 * (v26 >> 1)];
          uint64_t v30 = *v28;
          int v29 = v28 + 2;
          v26 += ~(v26 >> 1);
          if (((v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24)) < v24) {
            uint64_t v25 = v29;
          }
          else {
            unint64_t v26 = v27;
          }
        }
        while (v26);
        if (v25 == (void *)(*(void *)(v11 + 536) + 16 * v23)
          || ((*v25 >> 1) & 3 | *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24)) > v24)
        {
          v25 -= 2;
        }
      }
      else
      {
        uint64_t v25 = *(void **)(v11 + 536);
      }
      BOOL v14 = v25 + 1;
    }
    if (v8 >= v12) {
      unint64_t v3 = *v7 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v3 >> 1) & 3));
    }
    uint64_t v15 = *v14;
    if (v3 >= 8 && (uint64_t v16 = *(void *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
    {
      int v17 = (void *)(v16 + 24);
    }
    else
    {
      uint64_t v31 = *(unsigned int *)(v11 + 544);
      if (v31)
      {
        unsigned int v32 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24) | (v3 >> 1) & 3;
        uint64_t v33 = *(void **)(v11 + 536);
        unint64_t v34 = *(unsigned int *)(v11 + 544);
        do
        {
          unint64_t v35 = v34 >> 1;
          uint64_t v36 = &v33[2 * (v34 >> 1)];
          uint64_t v38 = *v36;
          int v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (((v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24)) < v32) {
            uint64_t v33 = v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
        if (v33 == (void *)(*(void *)(v11 + 536) + 16 * v31)
          || ((*v33 >> 1) & 3 | *(_DWORD *)((*v33 & 0xFFFFFFFFFFFFFFF8) + 24)) > v32)
        {
          v33 -= 2;
        }
      }
      else
      {
        uint64_t v33 = *(void **)(v11 + 536);
      }
      int v17 = v33 + 1;
    }
    if (v15 == *v17)
    {
      uint64_t v18 = v10[31];
      uint64_t v19 = v10[37];
      uint64_t v20 = v10[38];
      uint64_t v21 = *(void *)(v18 + 40);
      *(void *)uint64_t v20 = v18;
      *(void *)(v20 + 8) = v21;
      *(void *)(v20 + 16) = v11;
      *(void *)(v20 + 24) = v19;
      *(void *)(v20 + 32) = v10 + 39;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v20);
      *(_DWORD *)(v20 + 184) = 0;
      unint64_t v22 = (llvm::LiveRangeCalc *)v10[38];
      llvm::LiveRangeCalc::extend(v22, a2, v3, 0, 0, 0);
    }
    else
    {
      *(void *)(v4 - 16) = v3;
    }
  }
}

uint64_t sub_1CBB25324(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = (uint64_t *)v19;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 112);
  if ((v4 & 0x80000000) != 0) {
    unint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (*v5)
  {
    if ((*(unsigned char *)(v6 + 3) & 0x81) == 0)
    {
LABEL_7:
      uint64_t v7 = *(void *)(v6 + 8);
LABEL_8:
      unsigned int v8 = *(unsigned __int16 **)(v7 + 16);
      if ((v8[4] & 8) == 0)
      {
        uint64_t v9 = sub_1CBE52E8C(*v8);
        if ((v9 & 0xFF00000000) == 0) {
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
        }
        if ((v9 - 164) >= 4)
        {
          if ((v9 - 78) >= 3) {
            int v17 = 2;
          }
          else {
            int v17 = 1;
          }
        }
        else
        {
          int v17 = 0;
        }
        sub_1CBB254F0(&v18, &v17);
      }
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v6 = *(void *)(v6 + 24);
        if (!v6) {
          break;
        }
        if ((*(_DWORD *)v6 & 0x81000000) == 0)
        {
          uint64_t v7 = *(void *)(v6 + 8);
          if (v7 != v10) {
            goto LABEL_8;
          }
        }
      }
      uint64_t v11 = v20;
      unsigned int v12 = v21;
      if (v20 != v21) {
        goto LABEL_29;
      }
      uint64_t v4 = *(unsigned int *)(a1 + 112);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_23;
    }
    while (1)
    {
      uint64_t v6 = *(void *)(v6 + 24);
      if (!v6) {
        break;
      }
      if ((*(_DWORD *)v6 & 0x81000000) == 0) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v11 = 0;
  if ((v4 & 0x80000000) == 0)
  {
LABEL_38:
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
LABEL_24:
  uint64_t v14 = *v13;
  if (!v14)
  {
LABEL_27:
    uint64_t v15 = 2;
    goto LABEL_34;
  }
  while ((*(unsigned char *)(v14 + 3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      goto LABEL_27;
    }
  }
  unsigned int v12 = v11;
LABEL_29:
  if (v12 - v11 == 4)
  {
    if (*(_DWORD *)v11 == 3) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = *(unsigned int *)v11;
    }
    goto LABEL_35;
  }
  uint64_t v15 = 0;
LABEL_34:
  if (v11)
  {
LABEL_35:
    uint64_t v21 = v11;
    operator delete(v11);
  }
  sub_1CBB0D544(v19[0]);
  return v15;
}

void sub_1CBB254F0(uint64_t **a1, int *a2)
{
  unint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  int v6 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        int v8 = *((_DWORD *)v4 + 7);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        unint64_t v5 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x20uLL);
    v9[7] = v6;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *unint64_t v5 = (uint64_t *)v9;
    uint64_t v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v5;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    sub_1CB8358B8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v13 = a1[4];
    unint64_t v12 = (unint64_t)a1[5];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = a1[3];
      uint64_t v16 = ((char *)v13 - (char *)v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        abort();
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          sub_1CB833614();
        }
        uint64_t v20 = (char *)operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      *(_DWORD *)uint64_t v21 = *a2;
      uint64_t v14 = (uint64_t *)(v21 + 4);
      if (v13 != v15)
      {
        do
        {
          int v22 = *((_DWORD *)v13 - 1);
          uint64_t v13 = (uint64_t *)((char *)v13 - 4);
          *((_DWORD *)v21 - 1) = v22;
          v21 -= 4;
        }
        while (v13 != v15);
        uint64_t v13 = a1[3];
      }
      a1[3] = (uint64_t *)v21;
      a1[4] = v14;
      a1[5] = (uint64_t *)&v20[4 * v19];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = *a2;
      uint64_t v14 = (uint64_t *)((char *)v13 + 4);
    }
    a1[4] = v14;
  }
}

uint64_t sub_1CBB25678(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (**(unsigned __int16 **)(a3 + 16) - 13 < 5) {
    return result;
  }
  __int16 v6 = *(_WORD *)(a3 + 44);
  unint64_t v7 = a3;
  if ((v6 & 4) != 0)
  {
    unint64_t v7 = a3;
    do
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  uint64_t v8 = *(void *)(*(void *)(result + 888) + 288);
  if ((v6 & 8) != 0)
  {
    do
      a3 = *(void *)(a3 + 8);
    while ((*(_WORD *)(a3 + 44) & 8) != 0);
  }
  uint64_t v9 = *(void *)(a3 + 8);
  if (v7 != v9)
  {
    while (1)
    {
      unsigned int v10 = **(unsigned __int16 **)(v7 + 16);
      BOOL v11 = v10 > 0x17;
      int v12 = (1 << v10) & 0x83E000;
      if (v11 || v12 == 0) {
        break;
      }
      unint64_t v7 = *(void *)(v7 + 8);
      if (v7 == v9)
      {
        unint64_t v7 = *(void *)(a3 + 8);
        break;
      }
    }
  }
  uint64_t v14 = *(void *)(v8 + 368);
  uint64_t v15 = *(unsigned int *)(v8 + 384);
  if (v15)
  {
    LODWORD(v16) = ((v7 >> 4) ^ (v7 >> 9)) & (v15 - 1);
    unint64_t v17 = (uint64_t *)(v14 + 16 * v16);
    uint64_t v18 = *v17;
    if (v7 == *v17) {
      goto LABEL_18;
    }
    int v19 = 1;
    while (v18 != -4096)
    {
      int v20 = v16 + v19++;
      uint64_t v16 = v20 & (v15 - 1);
      uint64_t v18 = *(void *)(v14 + 16 * v16);
      if (v7 == v18)
      {
        unint64_t v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_18;
      }
    }
  }
  unint64_t v17 = (uint64_t *)(v14 + 16 * v15);
LABEL_18:
  unint64_t v21 = v17[1];
  unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v23 = (v21 >> 1) & 3;
  if ((v23 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
  {
    if (a6)
    {
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24)
      {
        uint64_t v25 = *(unint64_t **)a5;
        uint64_t v26 = *(void *)a5 + 8 * v24;
        do
        {
          unint64_t v27 = *v25;
          if (*v25 == v21) {
            return result;
          }
          uint64_t v28 = *(void *)(*(void *)(*(void *)*a2 + 888) + 288);
          unint64_t v29 = *(void *)(v28 + 344) & 0xFFFFFFFFFFFFFFF9;
          if (v29 == v27)
          {
            uint64_t v30 = 0;
          }
          else
          {
            if (v27 >= 8 && (uint64_t v31 = *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
            {
              unsigned int v32 = (uint64_t *)(v31 + 24);
            }
            else
            {
              uint64_t v35 = *(unsigned int *)(v28 + 544);
              if (v35)
              {
                unsigned int v36 = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3;
                int v37 = *(void **)(v28 + 536);
                unint64_t v38 = *(unsigned int *)(v28 + 544);
                do
                {
                  unint64_t v39 = v38 >> 1;
                  int v40 = &v37[2 * (v38 >> 1)];
                  uint64_t v42 = *v40;
                  unsigned int v41 = v40 + 2;
                  uint64_t result = (v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v38 += ~(v38 >> 1);
                  if (result < v36) {
                    int v37 = v41;
                  }
                  else {
                    unint64_t v38 = v39;
                  }
                }
                while (v38);
                if (v37 == (void *)(*(void *)(v28 + 536) + 16 * v35)
                  || ((*v37 >> 1) & 3 | *(_DWORD *)((*v37 & 0xFFFFFFFFFFFFFFF8) + 24)) > v36)
                {
                  v37 -= 2;
                }
              }
              else
              {
                int v37 = *(void **)(v28 + 536);
              }
              unsigned int v32 = v37 + 1;
            }
            uint64_t v30 = *v32;
          }
          if (v29 != v21)
          {
            if (v21 >= 8 && (uint64_t v33 = *(void *)(v22 + 16)) != 0)
            {
              unint64_t v34 = (void *)(v33 + 24);
              if (!v30) {
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v43 = *(void *)(v28 + 536);
              unint64_t v44 = *(unsigned int *)(v28 + 544);
              if (v44)
              {
                unsigned int v45 = *(_DWORD *)(v22 + 24) | v23;
                BOOL v46 = *(void **)(v28 + 536);
                unint64_t v47 = v44;
                uint64_t result = -1;
                do
                {
                  unint64_t v48 = v47 >> 1;
                  uint64_t v49 = &v46[2 * (v47 >> 1)];
                  uint64_t v51 = *v49;
                  int v50 = v49 + 2;
                  v47 += ~(v47 >> 1);
                  if (((v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24)) < v45) {
                    BOOL v46 = v50;
                  }
                  else {
                    unint64_t v47 = v48;
                  }
                }
                while (v47);
                if (v46 == (void *)(v43 + 16 * v44)
                  || ((*v46 >> 1) & 3 | *(_DWORD *)((*v46 & 0xFFFFFFFFFFFFFFF8) + 24)) > v45)
                {
                  v46 -= 2;
                }
              }
              else
              {
                BOOL v46 = *(void **)(v28 + 536);
              }
              unint64_t v34 = v46 + 1;
              if (!v30) {
                goto LABEL_37;
              }
            }
            if (*v34)
            {
              if (v30 != *v34)
              {
                llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a2[1] + 896));
                llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
              }
              if ((*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3) < (*(_DWORD *)(v22 + 24) | v23)) {
                return result;
              }
            }
          }
LABEL_37:
          ++v25;
        }
        while (v25 != (unint64_t *)v26);
      }
    }
    unsigned int v52 = *(_DWORD *)(a5 + 8);
    if (v52 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a5 + 8 * v52) = v21;
    ++*(_DWORD *)(a5 + 8);
  }
  return result;
}

uint64_t sub_1CBB25A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
LABEL_5:
  }
    operator new();
  uint64_t v3 = *(void *)a1 + 8;
  uint64_t v4 = 16 * v2;
  while (*(void *)(v3 - 8) != a2)
  {
    v3 += 16;
    v4 -= 16;
    if (!v4) {
      goto LABEL_5;
    }
  }
  return *(void *)v3;
}

uint64_t sub_1CBB265E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        unint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  unint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  unsigned int v9 = *((_DWORD *)v5 + 2) + 128;
  if (*((_DWORD *)a1 + 2) - 1 < v9) {
    unsigned int v9 = *((_DWORD *)a1 + 2) - 1;
  }
  return *(void *)(a1[3] + 8 * v9);
}

uint64_t sub_1CBB26664(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 0;
  }
  if ((*(unsigned char *)(v3 + 3) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3 || (*(unsigned char *)(v3 + 3) & 1) == 0) {
      return 0;
    }
  }
  LODWORD(result) = 0;
  uint64_t v5 = *(void *)(v3 + 8);
LABEL_6:
  unsigned int v6 = **(_DWORD **)(v5 + 32);
  unsigned int v7 = ((v6 >> 8) & 0xFFF) - 25;
  char v8 = BYTE1(v6) - 1;
  if (v7 < 0x10) {
    char v8 = BYTE1(v6) - 25;
  }
  BOOL v9 = ((v6 >> 8) & 0xFFF) == 0;
  int v10 = 1 << v8;
  if (v9) {
    int v10 = 1;
  }
  if (v7 >= 0x10) {
    int v10 = 0;
  }
  uint64_t result = v10 | result;
  while (1)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3 || (*(unsigned char *)(v3 + 3) & 1) == 0) {
      return result;
    }
    if (*(void *)(v3 + 8) != v5)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      goto LABEL_6;
    }
  }
}

BOOL sub_1CBB26718(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1CBAD8000(a2);
  if ((v6 & 0xFF00000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 864);
    LODWORD(v6) = ~(-1 << (*(_DWORD *)(*(void *)(v7 + 264)
                                     + 24
                                     * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 880)
                                                                                                + 24)
                                                                                    + 16
                                                                                    * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                            + 24)
                                      + *(_DWORD *)(v7 + 272)
                                      * ((*(void *)(v7 + 248) - *(void *)(v7 + 240)) >> 3))) >> 5));
  }
  return (v6 & ~a3) != 0;
}

void *sub_1CBB267BC(void *a1)
{
  uint64_t v3 = a1 + 5;
  uint64_t v2 = (void *)a1[5];
  if (v2 != v3 + 2) {
    free(v2);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4 != v3) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

void *sub_1CBB26818(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    int v12 = 0;
LABEL_15:
    uint64_t v6 = sub_1CBB268D8(a1, (uint64_t)a2, a2, v12);
    *uint64_t v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    char v8 = 0;
    int v9 = 1;
    while (v7 != -4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -8192;
      }
      if (v10) {
        char v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 16 * (v11 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      int v12 = v8;
    }
    else {
      int v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

void *sub_1CBB268D8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CBAEE424(a1, v7);
      unint64_t v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CBAEE424(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t *sub_1CBB26A0C(uint64_t a1, void *a2, uint64_t *a3)
{
  unsigned int v5 = (uint64_t **)sub_1CBB26ABC(a1, &v12, a2);
  int v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    int v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    uint64_t v8 = v12;
    *int v6 = 0;
    v6[1] = 0;
    void v6[2] = v8;
    void *v7 = v6;
    uint64_t v9 = **(void **)a1;
    int v10 = v6;
    if (v9)
    {
      *(void *)a1 = v9;
      int v10 = *v7;
    }
    sub_1CB8358B8(*(uint64_t **)(a1 + 8), v10);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void *sub_1CBB26ABC(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  int v4 = v5;
  if (v5)
  {
    unsigned int v6 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
    do
    {
      while (1)
      {
        unsigned int v7 = v4;
        unsigned int v8 = (v4[4] >> 1) & 3 | *(_DWORD *)((v4[4] & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v6 >= v8) {
          break;
        }
        int v4 = (void *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_6;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t result = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = result;
  }
LABEL_6:
  *a2 = v7;
  return result;
}

void *sub_1CBB26B2C(void *a1, void *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    unint64_t v3 = a2 - a1;
    a2 = a1;
    do
    {
      unint64_t v4 = v3 >> 1;
      unsigned int v5 = &a2[v3 >> 1];
      uint64_t v7 = *v5;
      unsigned int v6 = v5 + 1;
      v3 += ~(v3 >> 1);
      if ((*(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24) - *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24)) > 0x203
        && (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        unint64_t v3 = v4;
      }
      else
      {
        a2 = v6;
      }
    }
    while (v3);
  }
  return a2;
}

unint64_t sub_1CBB26BA0(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v5 = *(unsigned int *)(a2 + 8);
  if (!v5)
  {
    uint64_t v8 = *a3;
    unint64_t v115 = *a3 & 0xFFFFFFFF00000000;
    return v115 | v8;
  }
  uint64_t v123 = a1[99];
  uint64_t v124 = a1[98];
  if (v124 == v123)
  {
    sub_1CBB27998(*(void *)a2, (uint64_t *)(*(void *)a2 + 8 * v5), 126 - 2 * __clz(v5), 1);
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  if ((*(_DWORD *)a3 + 1) < 0xFF0) {
    int v7 = *(_DWORD *)a3 + 1;
  }
  else {
    int v7 = 0;
  }
  if (*((unsigned char *)a3 + 4)) {
    LODWORD(v8) = v7;
  }
  else {
    LODWORD(v8) = 0;
  }
  if (!v5)
  {
    unint64_t v115 = 0x100000000;
    return v115 | v8;
  }
  unsigned int v122 = v8;
  __p = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  unsigned int v11 = *(uint64_t **)a2;
  uint64_t v12 = *(void *)a2 + 8 * v5;
  uint64_t v13 = (uint64_t)a1;
  do
  {
    uint64_t v14 = *v11;
    if (v9 >= v10)
    {
      uint64_t v16 = (v9 - __p) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        abort();
      }
      if ((v10 - __p) >> 2 > v17) {
        unint64_t v17 = (v10 - __p) >> 2;
      }
      if ((unint64_t)(v10 - __p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 61) {
          sub_1CB833614();
        }
        int v19 = (char *)operator new(8 * v18);
      }
      else
      {
        int v19 = 0;
      }
      int v20 = &v19[8 * v16];
      *(void *)int v20 = v14;
      unint64_t v21 = v20 + 8;
      while (v9 != __p)
      {
        uint64_t v22 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v20 - 1) = v22;
        v20 -= 8;
      }
      int v10 = &v19[8 * v18];
      if (__p) {
        operator delete(__p);
      }
      BOOL v15 = (BOOL)v20;
      uint64_t v9 = v21;
    }
    else
    {
      *(void *)uint64_t v9 = v14;
      v9 += 8;
      BOOL v15 = (BOOL)__p;
    }
    __p = (char *)v15;
    unsigned int v130 = a1;
    sub_1CBB297C0(v15, (uint64_t)v9, (uint64_t *)&v130, (uint64_t)&v9[-v15] >> 3);
    ++v11;
  }
  while (v11 != (uint64_t *)v12);
  unsigned int v23 = __p;
  if (__p == v9)
  {
    unsigned int v118 = v122;
    goto LABEL_195;
  }
  unsigned int v23 = __p;
  unint64_t v24 = *(void *)a2;
  uint64_t v25 = (unsigned int **)(a1 + 123);
  unsigned int v127 = v122;
  unsigned int v118 = v122;
  uint64_t v126 = (uint64_t)(a1 + 31);
  do
  {
    if (v124 == v123) {
      uint64_t v26 = (_DWORD **)v24;
    }
    else {
      uint64_t v26 = (_DWORD **)v23;
    }
    uint64_t v128 = *v26;
    unsigned int v130 = (void *)v13;
    uint64_t v27 = v9 - v23;
    if (v9 - v23 >= 9)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v27 >> 3;
      uint64_t v30 = (uint64_t ***)__p;
      uint64_t v119 = *(void *)__p;
      int v120 = (void *)v24;
      int64_t v31 = (unint64_t)((v27 >> 3) - 2) >> 1;
      do
      {
        unsigned int v32 = &v30[v28];
        uint64_t v35 = v32[1];
        uint64_t v33 = (char *)(v32 + 1);
        unint64_t v34 = v35;
        uint64_t v36 = (2 * v28) | 1;
        uint64_t v37 = 2 * v28 + 2;
        if (v37 < v29)
        {
          unint64_t v38 = (uint64_t **)*((void *)v33 + 1);
          if (sub_1CBB29868((uint64_t)v130, v34, v38))
          {
            unint64_t v34 = v38;
            v33 += 8;
            uint64_t v36 = v37;
          }
        }
        *uint64_t v30 = v34;
        uint64_t v30 = (uint64_t ***)v33;
        uint64_t v28 = v36;
      }
      while (v36 <= v31);
      unint64_t v39 = v9 - 8;
      if (v33 == v9 - 8)
      {
        *(void *)uint64_t v33 = v119;
      }
      else
      {
        *(void *)uint64_t v33 = *(void *)v39;
        *(void *)unint64_t v39 = v119;
        sub_1CBB297C0((BOOL)__p, (uint64_t)(v33 + 8), (uint64_t *)&v130, (v33 + 8 - __p) >> 3);
      }
      uint64_t v13 = (uint64_t)a1;
      unint64_t v24 = (unint64_t)v120;
      uint64_t v25 = (unsigned int **)(a1 + 123);
    }
    unsigned int v40 = v127;
    if (a4) {
      unsigned int v40 = v122;
    }
    unsigned int v127 = v40;
    int v41 = *(_DWORD *)(v13 + 776);
    if (!v41) {
      goto LABEL_166;
    }
    uint64_t v42 = *(unsigned int *)(*(void *)v128 + 112);
    uint64_t v43 = *(void *)(v13 + 760);
    int v44 = v41 - 1;
    unsigned int v45 = v44 & (37 * v42);
    int v46 = *(_DWORD *)(v43 + 4 * v45);
    if (v42 != v46)
    {
      int v105 = 1;
      do
      {
        if (v46 == -1) {
          goto LABEL_166;
        }
        unsigned int v106 = v45 + v105++;
        unsigned int v45 = v106 & v44;
        int v46 = *(_DWORD *)(v43 + 4 * v45);
      }
      while (v42 != v46);
    }
    unint64_t v47 = *v25;
    if (!*v25) {
      goto LABEL_61;
    }
    unint64_t v48 = *v25;
    uint64_t v49 = v25;
    do
    {
      unsigned int v50 = v48[8];
      BOOL v51 = v50 >= v42;
      if (v50 >= v42) {
        unsigned int v52 = (unsigned int **)v48;
      }
      else {
        unsigned int v52 = (unsigned int **)(v48 + 2);
      }
      if (v51) {
        uint64_t v49 = (unsigned int **)v48;
      }
      unint64_t v48 = *v52;
    }
    while (*v52);
    if (v49 != v25 && v42 >= *((_DWORD *)v49 + 8))
    {
      uint64_t v70 = (char *)(v49 + 5);
    }
    else
    {
LABEL_61:
      unsigned int v130 = 0;
      uint64_t v131 = 0;
      int v132 = 0;
      v133[1] = 0;
      uint64_t v134 = 0;
      v133[0] = 0;
      uint64_t v53 = *(void *)(v13 + 880);
      if ((v42 & 0x80000000) != 0) {
        int v54 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
      }
      else {
        int v54 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v42);
      }
      uint64_t v55 = *v54;
      if (*v54)
      {
        while ((*(unsigned char *)(v55 + 3) & 1) != 0)
        {
          uint64_t v55 = *(void *)(v55 + 24);
          if (!v55) {
            goto LABEL_89;
          }
        }
        uint64_t v56 = *(void *)(v55 + 8);
LABEL_68:
        uint64_t v135 = 0;
        *(void *)uint64_t v136 = v56;
        if (sub_1CBB23F80(a1 + 89, v136, &v135))
        {
          uint64_t v57 = *(unsigned int *)(v56 + 40);
          if (v57)
          {
            uint64_t v58 = *(void *)(v56 + 32);
            uint64_t v59 = 32 * v57;
            uint64_t v60 = (int *)(v58 + 4);
            do
            {
              if ((*(v60 - 1) & 0x10000FF) == 0 && *v60 != v42)
              {
                int v61 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(*(void *)(v13 + 880) + 24)
                                                                  + 16 * (*v60 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 24);
                BOOL v62 = (v61 - 14) > 0x32 || ((1 << (v61 - 14)) & 0x4000000004001) == 0;
                if (!v62 || v61 == 105 || v61 == 127)
                {
                  v136[0] = *v60;
                  sub_1CBA84648((uint64_t)&v130, v136);
                }
              }
              v60 += 8;
              v59 -= 32;
            }
            while (v59);
          }
        }
        uint64_t v63 = *(void *)(v55 + 8);
        uint64_t v25 = (unsigned int **)(a1 + 123);
        while (1)
        {
          uint64_t v55 = *(void *)(v55 + 24);
          if (!v55) {
            break;
          }
          if ((*(unsigned char *)(v55 + 3) & 1) == 0)
          {
            uint64_t v56 = *(void *)(v55 + 8);
            if (v56 != v63) {
              goto LABEL_68;
            }
          }
        }
        unint64_t v47 = (unsigned int *)a1[123];
      }
LABEL_89:
      uint64_t v64 = (uint64_t **)v25;
      uint64_t v65 = (char *)v25;
      if (v47)
      {
        do
        {
          while (1)
          {
            uint64_t v65 = (char *)v47;
            unsigned int v66 = v47[8];
            if (v66 <= v42) {
              break;
            }
            unint64_t v47 = *(unsigned int **)v65;
            uint64_t v64 = (uint64_t **)v65;
            if (!*(void *)v65) {
              goto LABEL_95;
            }
          }
          if (v66 >= v42) {
            goto LABEL_98;
          }
          unint64_t v47 = (unsigned int *)*((void *)v65 + 1);
        }
        while (v47);
        uint64_t v64 = (uint64_t **)(v65 + 8);
      }
LABEL_95:
      int v67 = v65;
      uint64_t v65 = (char *)operator new(0x58uLL);
      *((_DWORD *)v65 + 8) = v42;
      *(void *)uint64_t v65 = 0;
      *((void *)v65 + 1) = 0;
      *(_OWORD *)(v65 + 40) = 0u;
      *(_OWORD *)(v65 + 56) = 0u;
      *(_OWORD *)(v65 + 72) = 0u;
      *((void *)v65 + 2) = v67;
      *uint64_t v64 = (uint64_t *)v65;
      uint64_t v68 = **(void **)(v13 + 976);
      int v69 = (uint64_t *)v65;
      if (v68)
      {
        *(void *)(v13 + 976) = v68;
        int v69 = *v64;
      }
      sub_1CB8358B8(*(uint64_t **)(v13 + 984), v69);
      ++*(void *)(v13 + 992);
LABEL_98:
      uint64_t v70 = v65 + 40;
      MEMORY[0x1D25D9CD0](*((void *)v65 + 5), 4);
      *((void *)v65 + 5) = v130;
      *((void *)v65 + 6) = v131;
      unsigned int v130 = 0;
      uint64_t v131 = 0;
      *((_DWORD *)v65 + 14) = v132;
      int v132 = 0;
      uint64_t v71 = (void *)*((void *)v65 + 8);
      if (v71)
      {
        *((void *)v65 + 9) = v71;
        operator delete(v71);
        uint64_t v71 = v130;
      }
      *((_OWORD *)v65 + 4) = *(_OWORD *)v133;
      *((void *)v65 + 10) = v134;
      v133[1] = 0;
      uint64_t v134 = 0;
      v133[0] = 0;
      MEMORY[0x1D25D9CD0](v71, 4);
    }
    uint64_t v72 = (_DWORD *)*((void *)v70 + 3);
    uint64_t v73 = (_DWORD *)*((void *)v70 + 4);
    if (v72 == v73) {
      goto LABEL_166;
    }
    unsigned int v130 = 0;
    uint64_t v131 = 0;
    int v132 = 0;
    v133[1] = 0;
    uint64_t v134 = 0;
    v133[0] = 0;
    do
    {
      uint64_t v74 = *(void *)(v13 + 472);
      uint64_t v75 = *(unsigned int *)(v13 + 488);
      if (v75)
      {
        LODWORD(v76) = (v75 - 1) & (37 * *v72);
        int v77 = (int *)(v74 + 8 * v76);
        int v78 = *v77;
        if (*v72 == *v77) {
          goto LABEL_105;
        }
        int v79 = 1;
        while (v78 != -1)
        {
          int v80 = v76 + v79++;
          uint64_t v76 = v80 & (v75 - 1);
          int v78 = *(_DWORD *)(v74 + 8 * v76);
          if (*v72 == v78)
          {
            int v77 = (int *)(v74 + 8 * v76);
            goto LABEL_105;
          }
        }
      }
      int v77 = (int *)(v74 + 8 * v75);
LABEL_105:
      if ((int *)(v74 + 8 * v75) != v77)
      {
        *(void *)uint64_t v136 = v77[1] | 0x100000000;
        sub_1CBB29A9C((uint64_t)&v130, v136);
      }
      ++v72;
    }
    while (v72 != v73);
    __int16 v81 = v133[1];
    if (v133[0] == v133[1])
    {
      uint64_t v88 = 0;
      unsigned __int8 v89 = 0;
      int v90 = 0;
      if (v133[1]) {
        goto LABEL_147;
      }
    }
    else
    {
      sub_1CBB2A024(&v130);
      unint64_t v82 = (int *)v133[0];
      unint64_t v83 = v133[1];
      v133[0] = 0;
      v133[1] = 0;
      uint64_t v134 = 0;
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      int v84 = *v82;
      unint64_t v121 = v82;
      if (v83 - (unsigned char *)v82 == 4)
      {
        int v85 = *(_DWORD *)(v13 + 840);
        int v86 = (v84 - v85) & ~((v84 - v85) >> 31);
        unsigned int v87 = v85 + v84;
        goto LABEL_123;
      }
      unsigned int v91 = *((_DWORD *)v83 - 1);
      int v92 = *(_DWORD *)(v13 + 840);
      if (v92 + v84 < v91)
      {
        unint64_t v93 = v24;
        goto LABEL_136;
      }
      int v86 = (v84 - v92) & ~((v84 - v92) >> 31);
      unsigned int v87 = v92 + v91;
LABEL_123:
      unint64_t v93 = v24;
      if (v87 >= 0x1000) {
        unsigned int v94 = 4096;
      }
      else {
        unsigned int v94 = v87;
      }
      if (*(unsigned char *)(v13 + 1000)) {
        int v95 = 1 << v128[2];
      }
      else {
        int v95 = 1;
      }
      unsigned int v96 = (v86 + v95 - 1) & -v95;
      if (v96 >= 0xFF0) {
        uint64_t v97 = 0;
      }
      else {
        uint64_t v97 = v96;
      }
      if (v96 <= 0xFEF && v94 >= v97)
      {
        if (sub_1CBB27568(v126, v128, v97))
        {
          unsigned int v99 = v95 + v96;
          while (1)
          {
            uint64_t v88 = 0;
            int v90 = 0;
            uint64_t v97 = v99 >= 0xFF0 ? 0 : v99;
            unsigned __int8 v89 = 0;
            if (v99 > 0xFEF || v94 < v97) {
              break;
            }
            v99 += v95;
            if (!sub_1CBB27568(v126, v128, v97)) {
              goto LABEL_145;
            }
          }
        }
        else
        {
LABEL_145:
          sub_1CBB27828(v126, v128, v97);
          int v90 = v97 & 0xFFFFFF00;
          uint64_t v88 = 0x100000000;
          unsigned __int8 v89 = v97;
        }
      }
      else
      {
LABEL_136:
        int v90 = 0;
        unsigned __int8 v89 = 0;
        uint64_t v88 = 0;
      }
      operator delete(v121);
      __int16 v81 = v133[0];
      unint64_t v24 = v93;
      uint64_t v25 = (unsigned int **)(a1 + 123);
      if (v133[0])
      {
LABEL_147:
        v133[1] = v81;
        operator delete(v81);
      }
    }
    MEMORY[0x1D25D9CD0](v130, 4);
    if ((v88 & 0x100000000) != 0)
    {
      unsigned int v100 = v128[2] + 2;
      if (v128[2] == 3) {
        int v101 = 8;
      }
      else {
        int v101 = 16;
      }
      if (v100 < 5) {
        int v101 = 4;
      }
      BOOL v102 = v100 >= 3;
      if (v128[2] == 1) {
        int v103 = 2;
      }
      else {
        int v103 = v101;
      }
      if (!v102) {
        int v103 = 1;
      }
      unsigned int v104 = v118;
      if (v118 <= v89 + (v90 & 0xFFFFFF00) + v103 - 1) {
        unsigned int v104 = v89 + (v90 & 0xFFFFFF00) + v103 - 1;
      }
      unsigned int v118 = v104;
      goto LABEL_189;
    }
LABEL_166:
    if (*(unsigned char *)(v13 + 1000)) {
      int v107 = 1 << v128[2];
    }
    else {
      int v107 = 1;
    }
    uint64_t v108 = (v127 + v107 - 1) & -v107;
    if (v108 <= 0xFEF)
    {
      while (sub_1CBB27568(v126, v128, v108))
      {
        uint64_t v108 = (v108 + v107);
        if (v108 > 0xFEF) {
          goto LABEL_189;
        }
      }
      sub_1CBB27828(v126, v128, v108);
      unsigned int v109 = v128[2] + 2;
      if (v109 >= 3)
      {
        if (v128[2] == 3) {
          int v111 = 8;
        }
        else {
          int v111 = 16;
        }
        if (v109 < 5) {
          int v111 = 4;
        }
        if (v128[2] == 1) {
          int v110 = 2;
        }
        else {
          int v110 = v111;
        }
      }
      else
      {
        int v110 = 1;
      }
      unsigned int v112 = v110 + v108 - 1;
      unsigned int v113 = v118;
      if (v118 <= v112) {
        unsigned int v113 = v112;
      }
      unsigned int v118 = v113;
      if ((v107 + v108) >= 0xFF0) {
        unsigned int v114 = 0;
      }
      else {
        unsigned int v114 = v107 + v108;
      }
      unsigned int v127 = v114;
    }
LABEL_189:
    v24 += 8 * (v124 == v123);
    v9 -= 8;
    MEMORY[0x1D25D9CD0](0, 8);
    unsigned int v23 = __p;
  }
  while (__p != v9);
LABEL_195:
  if (v23) {
    operator delete(v23);
  }
  unint64_t v115 = 0x100000000;
  LODWORD(v8) = v118;
  return v115 | v8;
}

uint64_t sub_1CBB27568(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*(_DWORD *)(*(void *)a2 + 8)) {
    return 0;
  }
  uint64_t v3 = a3;
  unsigned int v6 = a2[2] + 2;
  if (v6 >= 3)
  {
    if (a2[2] == 1)
    {
      int v7 = 2;
      if (!*(unsigned char *)(a1 + 256))
      {
LABEL_16:
        int v11 = v7 - 1;
        do
        {
          uint64_t v12 = (llvm::LiveIntervalUnion::Query *)sub_1CBB2A0A4(a1, *(void *)a2, (v3 << 32) | 0x51);
          int v13 = llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v12, 1u);
          BOOL v14 = v13 != 0;
          uint64_t v3 = (v3 + 1);
          if (v13) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v11 == 0;
          }
          --v11;
        }
        while (!v15);
        return v14;
      }
    }
    else
    {
      BOOL v8 = v6 >= 5;
      BOOL v9 = v6 == 5;
      if (!*(unsigned char *)(a1 + 256))
      {
        uint64_t v10 = 1;
        if (!v9) {
          uint64_t v10 = 2;
        }
        if (!v8) {
          uint64_t v10 = 0;
        }
        int v7 = dword_1CDB16630[v10];
        goto LABEL_16;
      }
      if (v6 >= 5)
      {
        if (a2[2] == 3) {
          int v7 = 8;
        }
        else {
          int v7 = 16;
        }
      }
      else
      {
        int v7 = 4;
      }
    }
  }
  else
  {
    int v7 = 1;
    if (!*(unsigned char *)(a1 + 256)) {
      goto LABEL_16;
    }
  }
  uint64_t v37 = a1 + 104;
  int v16 = 1;
  uint64_t v17 = a3;
  BOOL v14 = 1;
  while (1)
  {
    unsigned int v18 = 4 * v16;
    if ((4 * v16) < 0x21) {
      uint64_t v19 = 84;
    }
    else {
      uint64_t v19 = 85;
    }
    if (v18 < 0x11) {
      uint64_t v19 = 83;
    }
    if (v18 < 9) {
      uint64_t v19 = 82;
    }
    uint64_t v20 = v18 >= 5 ? v19 : 81;
    unint64_t v21 = (llvm::LiveIntervalUnion::Query *)sub_1CBB2A0A4(a1, *(void *)a2, v20 | (v17 << 32));
    if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v21, 1u)) {
      break;
    }
    unsigned int v22 = a2[2] + 2;
    if (v22 >= 3)
    {
      if (a2[2] == 3) {
        int v24 = 84;
      }
      else {
        int v24 = 85;
      }
      if (v22 < 5) {
        int v24 = 83;
      }
      if (a2[2] == 1) {
        int v23 = 82;
      }
      else {
        int v23 = v24;
      }
    }
    else
    {
      int v23 = 81;
    }
    if (v23 != v20)
    {
      unsigned int v25 = v17 >> (v20 - 81);
      uint64_t v26 = *(void *)(v37 + 16 * (v20 - 81) + 8);
      int v27 = *(_DWORD *)(v26 + 216 * v25 + 204);
      if (v27)
      {
        uint64_t v28 = **(void ***)a2;
        uint64_t v29 = v26 + 216 * v25;
        unsigned int v30 = v27 - 1;
        uint64_t v31 = v29 + 8 + 16 * v30 + 8;
        unsigned int v32 = (void *)(v29 + 8 + 8 * v30 + 96);
        if (!*(_DWORD *)(v29 + 200)) {
          unsigned int v32 = (void *)v31;
        }
        if ((*(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v28 >> 1) & 3) <= ((*v32 >> 1) & 3 | *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          uint64_t v33 = v28[3 * *(unsigned int *)(*(void *)a2 + 8) - 2];
          if ((*(_DWORD *)((*(void *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(void *)(v29 + 8) >> 1) & 3) <= ((v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24))) {
            return 1;
          }
        }
      }
    }
    uint64_t v17 = (v16 + v17);
    if ((int)v17 >= v7 + (int)v3)
    {
      unsigned int v34 = v3 & (-2 * v16);
      BOOL v35 = v16 <= 15;
      if (v16 <= 15) {
        v16 *= 2;
      }
      else {
        int v16 = -1;
      }
      if (v35) {
        uint64_t v17 = v34;
      }
      else {
        uint64_t v17 = 0xFFFFFFFFLL;
      }
      if (v35)
      {
        LODWORD(v3) = v34;
      }
      else
      {
        int v7 = -1;
        LODWORD(v3) = -1;
      }
    }
    if (v16 == -1 && v17 == -1) {
      return 0;
    }
  }
  return v14;
}

void sub_1CBB27828(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  int v22 = *(_DWORD *)(*(void *)a2 + 112);
  sub_1CBB2A17C(a1 + 224, &v22)[1] = a3;
  int v6 = a2[2];
  unsigned int v7 = *(_DWORD *)(a1 + 248);
  int v8 = v6;
  if (v7 <= a3)
  {
    sub_1CBB24198(a1, 2 * v7);
    int v8 = a2[2];
  }
  unsigned int v9 = v8 + 2;
  if (v9 >= 3)
  {
    if (v9 == 3)
    {
      uint64_t v10 = 1;
    }
    else
    {
      BOOL v11 = v9 >= 5;
      BOOL v12 = v9 == 5;
      uint64_t v10 = 3;
      if (!v12) {
        uint64_t v10 = 4;
      }
      if (!v11) {
        uint64_t v10 = 2;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v13 = *(const llvm::LiveInterval **)a2;
  if (*(unsigned char *)(a1 + 256))
  {
    llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(*(void *)(a1 + 16 * v6 + 112) + 216 * (a3 >> v6)), *(const llvm::LiveInterval **)a2, *(uint64_t ***)a2);
  }
  else
  {
    int v14 = dword_1CDB1663C[v10];
    unsigned int v15 = a3;
    do
    {
      llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(*(void *)(a1 + 112) + 216 * v15++), v13, (uint64_t **)v13);
      --v14;
    }
    while (v14);
  }
  unsigned int v16 = a2[2] + 2;
  if (a2[2] == 3) {
    int v17 = 8;
  }
  else {
    int v17 = 16;
  }
  if (v16 >= 5) {
    int v18 = v17;
  }
  else {
    int v18 = 4;
  }
  BOOL v19 = v16 >= 3;
  if (a2[2] == 1) {
    int v20 = 2;
  }
  else {
    int v20 = v18;
  }
  if (!v19) {
    int v20 = 1;
  }
  unsigned int v21 = a3 + v20 - 1;
  if (*(_DWORD *)(a1 + 252) > v21) {
    unsigned int v21 = *(_DWORD *)(a1 + 252);
  }
  *(_DWORD *)(a1 + 252) = v21;
}

unint64_t sub_1CBB27998(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int v8 = (_DWORD **)result;
LABEL_2:
  unsigned int v9 = a2 - 1;
  unint64_t v10 = (unint64_t)v8;
  while (1)
  {
    int v8 = (_DWORD **)v10;
    uint64_t v11 = (uint64_t)a2 - v10;
    uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v98 = (_DWORD *)*(a2 - 1);
          unsigned int v99 = *(_DWORD **)v10;
          unsigned int v100 = v98[2] + 2;
          if (v98[2] == 3) {
            int v101 = 84;
          }
          else {
            int v101 = 85;
          }
          if (v100 >= 5) {
            int v102 = v101;
          }
          else {
            int v102 = 83;
          }
          BOOL v103 = v100 >= 3;
          if (v98[2] == 1) {
            unsigned int v104 = 82;
          }
          else {
            unsigned int v104 = v102;
          }
          if (!v103) {
            unsigned int v104 = 81;
          }
          unsigned int v105 = v99[2] + 2;
          if (v105 >= 3)
          {
            if (v99[2] == 1)
            {
              unsigned int v106 = 82;
            }
            else if (v105 >= 5)
            {
              if (v99[2] == 3) {
                unsigned int v106 = 84;
              }
              else {
                unsigned int v106 = 85;
              }
            }
            else
            {
              unsigned int v106 = 83;
            }
          }
          else
          {
            unsigned int v106 = 81;
          }
          if (v104 > v106 || v104 == v106 && *(_DWORD *)(*(void *)v98 + 112) < *(_DWORD *)(*(void *)v99 + 112))
          {
            *(void *)unint64_t v10 = v98;
            *(a2 - 1) = (uint64_t)v99;
          }
          break;
        case 3:
          uint64_t result = (unint64_t)sub_1CBB28D04((_DWORD **)v10, v10 + 8, a2 - 1);
          break;
        case 4:
          uint64_t result = (unint64_t)sub_1CBB295A4((_DWORD **)v10, v10 + 8, (uint64_t *)(v10 + 16), a2 - 1);
          break;
        case 5:
          int v107 = (_DWORD **)(v10 + 16);
          unint64_t v108 = v10 + 24;
          uint64_t result = (unint64_t)sub_1CBB295A4((_DWORD **)v10, v10 + 8, (uint64_t *)(v10 + 16), (uint64_t *)(v10 + 24));
          unsigned int v109 = (_DWORD *)*(a2 - 1);
          int v110 = *(_DWORD **)(v10 + 24);
          unsigned int v111 = v109[2] + 2;
          if (v109[2] == 3) {
            int v112 = 84;
          }
          else {
            int v112 = 85;
          }
          if (v111 >= 5) {
            int v113 = v112;
          }
          else {
            int v113 = 83;
          }
          BOOL v114 = v111 >= 3;
          if (v109[2] == 1) {
            unsigned int v115 = 82;
          }
          else {
            unsigned int v115 = v113;
          }
          if (!v114) {
            unsigned int v115 = 81;
          }
          unsigned int v116 = v110[2] + 2;
          if (v116 >= 3)
          {
            if (v110[2] == 1)
            {
              unsigned int v117 = 82;
            }
            else
            {
              BOOL v224 = v116 >= 5;
              if (v110[2] == 3) {
                unsigned int v117 = 84;
              }
              else {
                unsigned int v117 = 85;
              }
              if (!v224) {
                unsigned int v117 = 83;
              }
            }
          }
          else
          {
            unsigned int v117 = 81;
          }
          if (v115 > v117
            || v115 == v117 && *(_DWORD *)(*(void *)v109 + 112) < *(_DWORD *)(*(void *)v110 + 112))
          {
            *(void *)unint64_t v108 = v109;
            *(a2 - 1) = (uint64_t)v110;
            int v225 = *(_DWORD **)v108;
            int v226 = *v107;
            unsigned int v227 = *(_DWORD *)(*(void *)v108 + 8) + 2;
            if (*(_DWORD *)(*(void *)v108 + 8) == 3) {
              int v228 = 84;
            }
            else {
              int v228 = 85;
            }
            if (v227 >= 5) {
              int v229 = v228;
            }
            else {
              int v229 = 83;
            }
            if (*(_DWORD *)(*(void *)v108 + 8) == 1) {
              int v230 = 82;
            }
            else {
              int v230 = v229;
            }
            if (v227 >= 3) {
              unsigned int v231 = v230;
            }
            else {
              unsigned int v231 = 81;
            }
            unsigned int v232 = v226[2] + 2;
            if (v232 >= 3)
            {
              if (v226[2] == 1)
              {
                unsigned int v233 = 82;
              }
              else
              {
                BOOL v234 = v232 >= 5;
                if (v226[2] == 3) {
                  unsigned int v233 = 84;
                }
                else {
                  unsigned int v233 = 85;
                }
                if (!v234) {
                  unsigned int v233 = 83;
                }
              }
            }
            else
            {
              unsigned int v233 = 81;
            }
            if (v231 > v233
              || v231 == v233 && *(_DWORD *)(*(void *)v225 + 112) < *(_DWORD *)(*(void *)v226 + 112))
            {
              *int v107 = v225;
              *(void *)unint64_t v108 = v226;
              unint64_t v235 = *(_DWORD **)(v10 + 8);
              if (v227 == 5) {
                int v236 = 84;
              }
              else {
                int v236 = 85;
              }
              if (v227 >= 5) {
                int v237 = v236;
              }
              else {
                int v237 = 83;
              }
              if (v227 == 3) {
                int v238 = 82;
              }
              else {
                int v238 = v237;
              }
              if (v227 >= 3) {
                unsigned int v239 = v238;
              }
              else {
                unsigned int v239 = 81;
              }
              unsigned int v240 = v235[2] + 2;
              if (v240 >= 3)
              {
                if (v235[2] == 1)
                {
                  unsigned int v241 = 82;
                }
                else
                {
                  BOOL v242 = v240 >= 5;
                  if (v235[2] == 3) {
                    unsigned int v241 = 84;
                  }
                  else {
                    unsigned int v241 = 85;
                  }
                  if (!v242) {
                    unsigned int v241 = 83;
                  }
                }
              }
              else
              {
                unsigned int v241 = 81;
              }
              if (v239 > v241
                || v239 == v241 && *(_DWORD *)(*(void *)v225 + 112) < *(_DWORD *)(*(void *)v235 + 112))
              {
                *(void *)(v10 + 8) = v225;
                *(void *)(v10 + 16) = v235;
                uint64_t v243 = *(_DWORD **)v10;
                if (v227 == 5) {
                  int v244 = 84;
                }
                else {
                  int v244 = 85;
                }
                if (v227 >= 5) {
                  int v245 = v244;
                }
                else {
                  int v245 = 83;
                }
                BOOL v246 = v227 >= 3;
                if (v227 == 3) {
                  unsigned int v247 = 82;
                }
                else {
                  unsigned int v247 = v245;
                }
                if (!v246) {
                  unsigned int v247 = 81;
                }
                unsigned int v248 = v243[2] + 2;
                if (v248 >= 3)
                {
                  if (v243[2] == 1)
                  {
                    unsigned int v249 = 82;
                  }
                  else
                  {
                    BOOL v250 = v248 >= 5;
                    if (v243[2] == 3) {
                      unsigned int v249 = 84;
                    }
                    else {
                      unsigned int v249 = 85;
                    }
                    if (!v250) {
                      unsigned int v249 = 83;
                    }
                  }
                }
                else
                {
                  unsigned int v249 = 81;
                }
                if (v247 > v249
                  || v247 == v249 && *(_DWORD *)(*(void *)v225 + 112) < *(_DWORD *)(*(void *)v243 + 112))
                {
                  *(void *)unint64_t v10 = v225;
                  *(void *)(v10 + 8) = v243;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191)
    {
      unsigned int v118 = (uint64_t *)(v10 + 8);
      BOOL v120 = (uint64_t *)v10 == a2 || v118 == a2;
      if (a4)
      {
        if (!v120)
        {
          uint64_t v121 = 0;
          unint64_t v122 = v10;
          do
          {
            unint64_t v123 = v122;
            unint64_t v122 = (unint64_t)v118;
            uint64_t v125 = *(_DWORD **)v123;
            uint64_t v124 = *(_DWORD **)(v123 + 8);
            unsigned int v126 = v124[2] + 2;
            if (v124[2] == 3) {
              LODWORD(result) = 84;
            }
            else {
              LODWORD(result) = 85;
            }
            if (v126 < 5) {
              LODWORD(result) = 83;
            }
            if (v124[2] == 1) {
              LODWORD(result) = 82;
            }
            if (v126 >= 3) {
              uint64_t result = result;
            }
            else {
              uint64_t result = 81;
            }
            unsigned int v127 = v125[2] + 2;
            if (v127 >= 3)
            {
              if (v125[2] == 1)
              {
                unsigned int v128 = 82;
              }
              else if (v127 >= 5)
              {
                if (v125[2] == 3) {
                  unsigned int v128 = 84;
                }
                else {
                  unsigned int v128 = 85;
                }
              }
              else
              {
                unsigned int v128 = 83;
              }
            }
            else
            {
              unsigned int v128 = 81;
            }
            if (result > v128
              || result == v128
              && (uint64_t result = *(unsigned int *)(*(void *)v125 + 112),
                  *(_DWORD *)(*(void *)v124 + 112) < result))
            {
              *(void *)(v123 + 8) = v125;
              uint64_t v129 = (void *)v10;
              if (v123 != v10)
              {
                if (v126 < 3) {
                  unsigned int v130 = 81;
                }
                else {
                  unsigned int v130 = 82;
                }
                if (v126 == 5) {
                  int v131 = 84;
                }
                else {
                  int v131 = 85;
                }
                if (v126 < 5) {
                  int v131 = 83;
                }
                if (v126 >= 4) {
                  unsigned int v130 = v131;
                }
                uint64_t v132 = v121;
                while (1)
                {
                  uint64_t result = *(void *)(v10 + v132 - 8);
                  unsigned int v133 = *(_DWORD *)(result + 8) + 2;
                  if (v133 >= 3)
                  {
                    if (*(_DWORD *)(result + 8) == 1)
                    {
                      unsigned int v134 = 82;
                    }
                    else if (v133 >= 5)
                    {
                      unsigned int v134 = *(_DWORD *)(result + 8) == 3 ? 84 : 85;
                    }
                    else
                    {
                      unsigned int v134 = 83;
                    }
                  }
                  else
                  {
                    unsigned int v134 = 81;
                  }
                  if (v130 <= v134
                    && (v130 != v134 || *(_DWORD *)(*(void *)v124 + 112) >= *(_DWORD *)(*(void *)result + 112)))
                  {
                    break;
                  }
                  *(void *)(v10 + v132) = result;
                  v132 -= 8;
                  if (!v132)
                  {
                    uint64_t v129 = (void *)v10;
                    goto LABEL_360;
                  }
                }
                uint64_t v129 = (void *)(v10 + v132);
              }
LABEL_360:
              *uint64_t v129 = v124;
            }
            unsigned int v118 = (uint64_t *)(v122 + 8);
            v121 += 8;
          }
          while ((uint64_t *)(v122 + 8) != a2);
        }
      }
      else if (!v120)
      {
        do
        {
          uint64_t v207 = v8;
          int v8 = (_DWORD **)v118;
          uint64_t v209 = *v207;
          uint64_t v208 = v207[1];
          unsigned int v210 = v208[2] + 2;
          if (v208[2] == 3) {
            unsigned int v211 = 84;
          }
          else {
            unsigned int v211 = 85;
          }
          if (v210 < 5) {
            unsigned int v211 = 83;
          }
          if (v208[2] == 1) {
            unsigned int v211 = 82;
          }
          if (v210 < 3) {
            unsigned int v211 = 81;
          }
          unsigned int v212 = v209[2] + 2;
          if (v212 >= 3)
          {
            if (v209[2] == 1)
            {
              unsigned int v213 = 82;
            }
            else
            {
              BOOL v214 = v212 >= 5;
              if (v209[2] == 3) {
                unsigned int v213 = 84;
              }
              else {
                unsigned int v213 = 85;
              }
              if (!v214) {
                unsigned int v213 = 83;
              }
            }
          }
          else
          {
            unsigned int v213 = 81;
          }
          if (v211 > v213
            || v211 == v213 && *(_DWORD *)(*(void *)v208 + 112) < *(_DWORD *)(*(void *)v209 + 112))
          {
            if (v210 < 3) {
              int v215 = 81;
            }
            else {
              int v215 = 82;
            }
            if (v208[2] == 3) {
              int v216 = 84;
            }
            else {
              int v216 = 85;
            }
            if (v210 < 5) {
              int v216 = 83;
            }
            if (v210 >= 4) {
              unsigned int v217 = v216;
            }
            else {
              unsigned int v217 = v215;
            }
            while (1)
            {
              uint64_t v218 = v207;
              uint64_t v219 = v209;
              v220 = *--v207;
              uint64_t v209 = v220;
              v207[2] = v219;
              unsigned int v221 = v220[2] + 2;
              if (v221 >= 3)
              {
                if (v221 == 3)
                {
                  unsigned int v222 = 82;
                }
                else
                {
                  BOOL v223 = v221 >= 5;
                  if (v221 == 5) {
                    unsigned int v222 = 84;
                  }
                  else {
                    unsigned int v222 = 85;
                  }
                  if (!v223) {
                    unsigned int v222 = 83;
                  }
                }
              }
              else
              {
                unsigned int v222 = 81;
              }
              if (v217 <= v222)
              {
                if (v217 != v222) {
                  break;
                }
                uint64_t result = *(unsigned int *)(*(void *)v208 + 112);
                if (result >= *(_DWORD *)(*(void *)v209 + 112)) {
                  break;
                }
              }
            }
            *uint64_t v218 = v208;
          }
          unsigned int v118 = (uint64_t *)(v8 + 1);
        }
        while (v8 + 1 != (_DWORD **)a2);
      }
      return result;
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    int v14 = (void *)(v10 + 8 * ((unint64_t)v12 >> 1));
    if ((unint64_t)v11 >= 0x401)
    {
      sub_1CBB28D04(v8, (uint64_t)&v8[(unint64_t)v12 >> 1], a2 - 1);
      sub_1CBB28D04(v8 + 1, (uint64_t)(v14 - 1), a2 - 2);
      sub_1CBB28D04(v8 + 2, (uint64_t)&v8[v13 + 1], a2 - 3);
      sub_1CBB28D04((_DWORD **)v14 - 1, (uint64_t)v14, (uint64_t *)&v8[v13 + 1]);
      unsigned int v15 = *v8;
      *int v8 = (_DWORD *)*v14;
      *int v14 = v15;
    }
    else
    {
      sub_1CBB28D04(&v8[(unint64_t)v12 >> 1], (uint64_t)v8, a2 - 1);
    }
    --a3;
    unsigned int v16 = *v8;
    if (a4)
    {
      unsigned int v17 = v16[2] + 2;
    }
    else
    {
      int v18 = *(v8 - 1);
      unsigned int v19 = v18[2] + 2;
      if (v18[2] == 3) {
        int v20 = 84;
      }
      else {
        int v20 = 85;
      }
      if (v19 < 5) {
        int v20 = 83;
      }
      BOOL v21 = v19 >= 3;
      if (v18[2] == 1) {
        int v22 = 82;
      }
      else {
        int v22 = v20;
      }
      if (v21) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = 81;
      }
      unsigned int v17 = v16[2] + 2;
      if (v16[2] == 3) {
        int v24 = 84;
      }
      else {
        int v24 = 85;
      }
      if (v17 < 5) {
        int v24 = 83;
      }
      uint64_t result = 82;
      if (v16[2] == 1) {
        int v24 = 82;
      }
      if (v17 >= 3) {
        unsigned int v25 = v24;
      }
      else {
        unsigned int v25 = 81;
      }
      if (v23 <= v25)
      {
        unsigned int v26 = *(_DWORD *)(*(void *)v16 + 112);
        if (v23 != v25 || *(_DWORD *)(*(void *)v18 + 112) >= v26)
        {
          if (v17 >= 3)
          {
            if (v16[2] == 1)
            {
              unsigned int v58 = 82;
            }
            else if (v17 >= 5)
            {
              if (v16[2] == 3) {
                unsigned int v58 = 84;
              }
              else {
                unsigned int v58 = 85;
              }
            }
            else
            {
              unsigned int v58 = 83;
            }
          }
          else
          {
            unsigned int v58 = 81;
          }
          uint64_t v59 = *v9;
          int v60 = *(_DWORD *)(*v9 + 8);
          if ((v60 + 2) >= 3)
          {
            if (v60 == 1)
            {
              unsigned int v61 = 82;
            }
            else if ((v60 + 2) >= 5)
            {
              if (v60 == 3) {
                unsigned int v61 = 84;
              }
              else {
                unsigned int v61 = 85;
              }
            }
            else
            {
              unsigned int v61 = 83;
            }
          }
          else
          {
            unsigned int v61 = 81;
          }
          if (v58 > v61 || v58 == v61 && v26 < *(_DWORD *)(*(void *)v59 + 112))
          {
            if (v17 < 3) {
              unsigned int v62 = 81;
            }
            else {
              unsigned int v62 = 82;
            }
            if (v16[2] == 3) {
              int v63 = 84;
            }
            else {
              int v63 = 85;
            }
            if (v17 < 5) {
              int v63 = 83;
            }
            if (v17 >= 4) {
              unsigned int v62 = v63;
            }
            uint64_t v64 = (uint64_t *)(v8 + 1);
            do
            {
              unint64_t v10 = (unint64_t)v64;
              uint64_t v65 = *v64;
              unsigned int v66 = *(_DWORD *)(*v64 + 8) + 2;
              if (v66 >= 3)
              {
                if (v66 == 3)
                {
                  unsigned int v67 = 82;
                }
                else
                {
                  BOOL v68 = v66 >= 5;
                  if (v66 == 5) {
                    int v69 = 84;
                  }
                  else {
                    int v69 = 85;
                  }
                  if (v68) {
                    unsigned int v67 = v69;
                  }
                  else {
                    unsigned int v67 = 83;
                  }
                }
              }
              else
              {
                unsigned int v67 = 81;
              }
              if (v62 > v67) {
                break;
              }
              uint64_t v64 = (uint64_t *)(v10 + 8);
            }
            while (v62 != v67 || v26 >= *(_DWORD *)(*(void *)v65 + 112));
          }
          else
          {
            if (v17 < 3) {
              unsigned int v91 = 81;
            }
            else {
              unsigned int v91 = 82;
            }
            if (v16[2] == 3) {
              int v92 = 84;
            }
            else {
              int v92 = 85;
            }
            if (v17 < 5) {
              int v92 = 83;
            }
            if (v17 >= 4) {
              unsigned int v91 = v92;
            }
            unint64_t v93 = v8 + 1;
            do
            {
              unint64_t v10 = (unint64_t)v93;
              if (v93 >= (_DWORD **)a2) {
                break;
              }
              unsigned int v94 = (*v93)[2] + 2;
              if (v94 >= 3)
              {
                if (v94 == 3)
                {
                  unsigned int v95 = 82;
                }
                else
                {
                  BOOL v96 = v94 >= 5;
                  int v97 = v94 == 5 ? 84 : 85;
                  unsigned int v95 = v96 ? v97 : 83;
                }
              }
              else
              {
                unsigned int v95 = 81;
              }
              if (v91 > v95) {
                break;
              }
              unint64_t v93 = (_DWORD **)(v10 + 8);
            }
            while (v91 != v95 || v26 >= *(_DWORD *)(**(void **)v10 + 112));
          }
          uint64_t i = a2;
          if (v10 < (unint64_t)a2)
          {
            if (v17 < 3) {
              int v71 = 81;
            }
            else {
              int v71 = 82;
            }
            if (v16[2] == 3) {
              unsigned int v72 = 84;
            }
            else {
              unsigned int v72 = 85;
            }
            if (v17 < 5) {
              unsigned int v72 = 83;
            }
            if (v17 < 4) {
              unsigned int v72 = v71;
            }
            for (uint64_t i = a2 - 1; ; --i)
            {
              unsigned int v73 = v60 + 2;
              if (v73 == 5) {
                int v74 = 84;
              }
              else {
                int v74 = 85;
              }
              if (v73 < 5) {
                int v74 = 83;
              }
              BOOL v75 = v73 >= 3;
              if (v73 == 3) {
                unsigned int v76 = 82;
              }
              else {
                unsigned int v76 = v74;
              }
              if (!v75) {
                unsigned int v76 = 81;
              }
              if (v72 <= v76 && (v72 != v76 || v26 >= *(_DWORD *)(*(void *)v59 + 112))) {
                break;
              }
              uint64_t v77 = *(i - 1);
              uint64_t v59 = v77;
              int v60 = *(_DWORD *)(v77 + 8);
            }
          }
          if (v10 < (unint64_t)i)
          {
            if (v17 < 3) {
              int v78 = 81;
            }
            else {
              int v78 = 82;
            }
            if (v16[2] == 3) {
              int v79 = 84;
            }
            else {
              int v79 = 85;
            }
            int v80 = *(_DWORD **)v10;
            uint64_t v81 = *i;
            if (v17 < 5) {
              int v79 = 83;
            }
            if (v17 >= 4) {
              unsigned int v82 = v79;
            }
            else {
              unsigned int v82 = v78;
            }
            do
            {
              *(void *)unint64_t v10 = v81;
              *uint64_t i = (uint64_t)v80;
              unint64_t v83 = v10 + 8;
              do
              {
                unint64_t v10 = v83;
                int v80 = *(_DWORD **)v83;
                unsigned int v84 = *(_DWORD *)(*(void *)v83 + 8) + 2;
                if (v84 >= 3)
                {
                  if (*(_DWORD *)(*(void *)v83 + 8) == 1)
                  {
                    unsigned int v85 = 82;
                  }
                  else
                  {
                    BOOL v86 = v84 >= 5;
                    if (*(_DWORD *)(*(void *)v83 + 8) == 3) {
                      unsigned int v85 = 84;
                    }
                    else {
                      unsigned int v85 = 85;
                    }
                    if (!v86) {
                      unsigned int v85 = 83;
                    }
                  }
                }
                else
                {
                  unsigned int v85 = 81;
                }
                if (v82 > v85) {
                  break;
                }
                v83 += 8;
              }
              while (v82 != v85 || *(_DWORD *)(*(void *)v16 + 112) >= *(_DWORD *)(*(void *)v80 + 112));
              do
              {
                uint64_t v87 = *--i;
                uint64_t v81 = v87;
                unsigned int v88 = *(_DWORD *)(v87 + 8) + 2;
                if (v88 >= 3)
                {
                  if (v88 == 3)
                  {
                    unsigned int v89 = 82;
                  }
                  else if (v88 >= 5)
                  {
                    if (v88 == 5) {
                      unsigned int v89 = 84;
                    }
                    else {
                      unsigned int v89 = 85;
                    }
                  }
                  else
                  {
                    unsigned int v89 = 83;
                  }
                }
                else
                {
                  unsigned int v89 = 81;
                }
              }
              while (v82 > v89
                   || v82 == v89 && *(_DWORD *)(*(void *)v16 + 112) < *(_DWORD *)(*(void *)v81 + 112));
            }
            while (v10 < (unint64_t)i);
          }
          int v90 = (void *)(v10 - 8);
          BOOL v4 = v10 - 8 >= (unint64_t)v8;
          BOOL v5 = v10 - 8 == (void)v8;
          if ((_DWORD **)(v10 - 8) != v8) {
            *int v8 = (_DWORD *)*v90;
          }
          a4 = 0;
          void *v90 = v16;
          continue;
        }
      }
    }
    if (v17 < 3) {
      int v27 = 81;
    }
    else {
      int v27 = 82;
    }
    if (v17 == 5) {
      int v28 = 84;
    }
    else {
      int v28 = 85;
    }
    if (v17 < 5) {
      int v28 = 83;
    }
    if (v17 >= 4) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v27;
    }
    for (uint64_t j = 1; ; ++j)
    {
      uint64_t v31 = v8[j];
      unsigned int v32 = v31[2] + 2;
      if (v32 < 3) {
        break;
      }
      if (v31[2] == 1)
      {
        unsigned int v33 = 82;
      }
      else if (v32 >= 5)
      {
        if (v31[2] == 3) {
          unsigned int v33 = 84;
        }
        else {
          unsigned int v33 = 85;
        }
      }
      else
      {
        unsigned int v33 = 83;
      }
      if (v33 <= v29) {
        goto LABEL_58;
      }
LABEL_60:
      ;
    }
    unsigned int v33 = 81;
LABEL_58:
    unsigned int v34 = *(_DWORD *)(*(void *)v16 + 112);
    if (v33 == v29 && *(_DWORD *)(*(void *)v31 + 112) < v34) {
      goto LABEL_60;
    }
    unint64_t v35 = (unint64_t)&v8[j];
    uint64_t v36 = a2 - 1;
    if (j != 1)
    {
      while (1)
      {
        uint64_t v37 = v36;
        uint64_t v38 = *v36;
        unsigned int v39 = *(_DWORD *)(*v36 + 8) + 2;
        if (v39 >= 3)
        {
          if (*(_DWORD *)(*v36 + 8) == 1)
          {
            unsigned int v40 = 82;
          }
          else
          {
            BOOL v41 = v39 >= 5;
            if (*(_DWORD *)(*v36 + 8) == 3) {
              unsigned int v40 = 84;
            }
            else {
              unsigned int v40 = 85;
            }
            if (!v41) {
              unsigned int v40 = 83;
            }
          }
          if (v40 > v29) {
            goto LABEL_91;
          }
        }
        else
        {
          unsigned int v40 = 81;
        }
        --v36;
        if (v40 == v29 && *(_DWORD *)(*(void *)v38 + 112) < v34) {
          goto LABEL_91;
        }
      }
    }
    uint64_t v42 = a2 - 1;
    while (v35 < (unint64_t)(v42 + 1))
    {
      uint64_t v37 = v42;
      uint64_t v43 = *v42;
      unsigned int v44 = *(_DWORD *)(*v42 + 8) + 2;
      if (v44 >= 3)
      {
        if (*(_DWORD *)(*v42 + 8) == 1)
        {
          unsigned int v45 = 82;
        }
        else
        {
          BOOL v46 = v44 >= 5;
          if (*(_DWORD *)(*v42 + 8) == 3) {
            unsigned int v45 = 84;
          }
          else {
            unsigned int v45 = 85;
          }
          if (!v46) {
            unsigned int v45 = 83;
          }
        }
        if (v45 > v29) {
          goto LABEL_91;
        }
      }
      else
      {
        unsigned int v45 = 81;
      }
      --v42;
      if (v45 == v29 && *(_DWORD *)(*(void *)v43 + 112) < v34) {
        goto LABEL_91;
      }
    }
    uint64_t v37 = v42 + 1;
LABEL_91:
    if (v35 >= (unint64_t)v37)
    {
      unint64_t v10 = v35;
      goto LABEL_123;
    }
    uint64_t v47 = *v37;
    unint64_t v10 = v35;
    unint64_t v48 = v37;
    while (2)
    {
      *(void *)unint64_t v10 = v47;
      v10 += 8;
      *unint64_t v48 = (uint64_t)v31;
      while (2)
      {
        uint64_t v31 = *(_DWORD **)v10;
        unsigned int v49 = *(_DWORD *)(*(void *)v10 + 8) + 2;
        if (v49 < 3)
        {
          unsigned int v50 = 81;
          break;
        }
        if (*(_DWORD *)(*(void *)v10 + 8) == 1)
        {
          unsigned int v50 = 82;
        }
        else if (v49 >= 5)
        {
          if (*(_DWORD *)(*(void *)v10 + 8) == 3) {
            unsigned int v50 = 84;
          }
          else {
            unsigned int v50 = 85;
          }
        }
        else
        {
          unsigned int v50 = 83;
        }
        if (v50 > v29)
        {
LABEL_106:
          v10 += 8;
          continue;
        }
        break;
      }
      unsigned int v51 = *(_DWORD *)(*(void *)v16 + 112);
      if (v50 == v29 && *(_DWORD *)(*(void *)v31 + 112) < v51) {
        goto LABEL_106;
      }
      unsigned int v52 = v48 - 1;
      while (2)
      {
        unint64_t v48 = v52;
        uint64_t v47 = *v52;
        unsigned int v53 = *(_DWORD *)(*v52 + 8) + 2;
        if (v53 < 3)
        {
          unsigned int v54 = 81;
          goto LABEL_118;
        }
        if (*(_DWORD *)(*v52 + 8) == 1)
        {
          unsigned int v54 = 82;
        }
        else
        {
          BOOL v55 = v53 >= 5;
          if (*(_DWORD *)(*v52 + 8) == 3) {
            unsigned int v54 = 84;
          }
          else {
            unsigned int v54 = 85;
          }
          if (!v55) {
            unsigned int v54 = 83;
          }
        }
        if (v54 <= v29)
        {
LABEL_118:
          --v52;
          if (v54 == v29 && *(_DWORD *)(*(void *)v47 + 112) < v51) {
            break;
          }
          continue;
        }
        break;
      }
      if (v10 < (unint64_t)v48) {
        continue;
      }
      break;
    }
LABEL_123:
    uint64_t v56 = (void *)(v10 - 8);
    if ((_DWORD **)(v10 - 8) != v8) {
      *int v8 = (_DWORD *)*v56;
    }
    *uint64_t v56 = v16;
    if (v35 < (unint64_t)v37)
    {
LABEL_128:
      uint64_t result = sub_1CBB27998(v8, v10 - 8, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v57 = sub_1CBB2900C((uint64_t)v8, (uint64_t *)(v10 - 8));
      uint64_t result = sub_1CBB2900C(v10, a2);
      if (result)
      {
        a2 = (uint64_t *)(v10 - 8);
        if (v57) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v57) {
        goto LABEL_128;
      }
    }
  }
  if ((uint64_t *)v10 != a2)
  {
    int64_t v135 = (unint64_t)(v12 - 2) >> 1;
    int64_t v136 = v135;
    do
    {
      int64_t v137 = v136;
      if (v135 >= v136)
      {
        uint64_t v138 = (2 * v136) | 1;
        uint64_t v139 = (void *)(v10 + 8 * v138);
        if (2 * v137 + 2 < v12)
        {
          int v140 = (_DWORD *)v139[1];
          unsigned int v141 = *(_DWORD *)(*v139 + 8) + 2;
          if (*(_DWORD *)(*v139 + 8) == 3) {
            int v142 = 84;
          }
          else {
            int v142 = 85;
          }
          if (v141 < 5) {
            int v142 = 83;
          }
          BOOL v143 = v141 >= 3;
          if (*(_DWORD *)(*v139 + 8) == 1) {
            unsigned int v144 = 82;
          }
          else {
            unsigned int v144 = v142;
          }
          if (!v143) {
            unsigned int v144 = 81;
          }
          unsigned int v145 = v140[2] + 2;
          if (v145 >= 3)
          {
            if (v140[2] == 1)
            {
              unsigned int v146 = 82;
            }
            else
            {
              BOOL v147 = v145 >= 5;
              if (v140[2] == 3) {
                unsigned int v146 = 84;
              }
              else {
                unsigned int v146 = 85;
              }
              if (!v147) {
                unsigned int v146 = 83;
              }
            }
          }
          else
          {
            unsigned int v146 = 81;
          }
          if (v144 > v146
            || (*(_DWORD *)(*(void *)*v139 + 112) < *(_DWORD *)(*(void *)v140 + 112)
              ? (BOOL v148 = v144 == v146)
              : (BOOL v148 = 0),
                v148))
          {
            ++v139;
            uint64_t v138 = 2 * v137 + 2;
          }
        }
        uint64_t v149 = (_DWORD **)(v10 + 8 * v137);
        uint64_t v150 = (_DWORD *)*v139;
        uint64_t v151 = *v149;
        unsigned int v152 = *(_DWORD *)(*v139 + 8) + 2;
        if (*(_DWORD *)(*v139 + 8) == 3) {
          int v153 = 84;
        }
        else {
          int v153 = 85;
        }
        if (v152 < 5) {
          int v153 = 83;
        }
        BOOL v154 = v152 >= 3;
        int v155 = *(_DWORD *)(*v139 + 8) == 1 ? 82 : v153;
        unsigned int v156 = v154 ? v155 : 81;
        unsigned int v157 = v151[2] + 2;
        if (v157 >= 3)
        {
          if (v151[2] == 1)
          {
            unsigned int v158 = 82;
          }
          else if (v157 >= 5)
          {
            unsigned int v158 = v151[2] == 3 ? 84 : 85;
          }
          else
          {
            unsigned int v158 = 83;
          }
        }
        else
        {
          unsigned int v158 = 81;
        }
        if (v156 <= v158
          && (v156 != v158 || *(_DWORD *)(*(void *)v150 + 112) >= *(_DWORD *)(*(void *)v151 + 112)))
        {
          if (v157 < 3) {
            int v159 = 81;
          }
          else {
            int v159 = 82;
          }
          if (v151[2] == 3) {
            int v160 = 84;
          }
          else {
            int v160 = 85;
          }
          if (v157 < 5) {
            int v160 = 83;
          }
          if (v157 >= 4) {
            unsigned int v161 = v160;
          }
          else {
            unsigned int v161 = v159;
          }
          while (1)
          {
            uint64_t v162 = v139;
            *uint64_t v149 = v150;
            if (v135 < v138) {
              break;
            }
            uint64_t v163 = 2 * v138;
            uint64_t v138 = (2 * v138) | 1;
            uint64_t v139 = (void *)(v10 + 8 * v138);
            uint64_t v164 = v163 + 2;
            if (v164 < v12)
            {
              uint64_t v165 = (_DWORD *)v139[1];
              unsigned int v166 = *(_DWORD *)(*v139 + 8) + 2;
              if (*(_DWORD *)(*v139 + 8) == 3) {
                int v167 = 84;
              }
              else {
                int v167 = 85;
              }
              if (v166 < 5) {
                int v167 = 83;
              }
              BOOL v168 = v166 >= 3;
              if (*(_DWORD *)(*v139 + 8) == 1) {
                unsigned int v169 = 82;
              }
              else {
                unsigned int v169 = v167;
              }
              if (!v168) {
                unsigned int v169 = 81;
              }
              unsigned int v170 = v165[2] + 2;
              if (v170 >= 3)
              {
                if (v165[2] == 1)
                {
                  unsigned int v171 = 82;
                }
                else
                {
                  BOOL v172 = v170 >= 5;
                  if (v165[2] == 3) {
                    unsigned int v171 = 84;
                  }
                  else {
                    unsigned int v171 = 85;
                  }
                  if (!v172) {
                    unsigned int v171 = 83;
                  }
                }
              }
              else
              {
                unsigned int v171 = 81;
              }
              if (v169 > v171
                || (*(_DWORD *)(*(void *)*v139 + 112) < *(_DWORD *)(*(void *)v165 + 112)
                  ? (BOOL v173 = v169 == v171)
                  : (BOOL v173 = 0),
                    v173))
              {
                ++v139;
                uint64_t v138 = v164;
              }
            }
            uint64_t v150 = (_DWORD *)*v139;
            unsigned int v174 = *(_DWORD *)(*v139 + 8) + 2;
            if (v174 >= 3)
            {
              if (*(_DWORD *)(*v139 + 8) == 1)
              {
                unsigned int v175 = 82;
              }
              else if (v174 >= 5)
              {
                if (*(_DWORD *)(*v139 + 8) == 3) {
                  unsigned int v175 = 84;
                }
                else {
                  unsigned int v175 = 85;
                }
              }
              else
              {
                unsigned int v175 = 83;
              }
              if (v175 > v161) {
                break;
              }
            }
            else
            {
              unsigned int v175 = 81;
            }
            uint64_t v149 = (_DWORD **)v162;
            if (v175 == v161)
            {
              uint64_t v149 = (_DWORD **)v162;
              if (*(_DWORD *)(*(void *)v150 + 112) < *(_DWORD *)(*(void *)v151 + 112)) {
                break;
              }
            }
          }
          *uint64_t v162 = v151;
        }
      }
      int64_t v136 = v137 - 1;
    }
    while (v137);
    while (2)
    {
      uint64_t v176 = 0;
      uint64_t v177 = *(_DWORD **)v10;
      uint64_t v178 = (uint64_t *)v10;
      do
      {
        uint64_t v179 = v178;
        v178 += v176 + 1;
        uint64_t v180 = 2 * v176;
        uint64_t v176 = (2 * v176) | 1;
        uint64_t v181 = v180 + 2;
        if (v181 < v12)
        {
          uint64_t v182 = (_DWORD *)v178[1];
          unsigned int v183 = *(_DWORD *)(*v178 + 8) + 2;
          if (*(_DWORD *)(*v178 + 8) == 3) {
            int v184 = 84;
          }
          else {
            int v184 = 85;
          }
          if (v183 < 5) {
            int v184 = 83;
          }
          BOOL v185 = v183 >= 3;
          if (*(_DWORD *)(*v178 + 8) == 1) {
            unsigned int v186 = 82;
          }
          else {
            unsigned int v186 = v184;
          }
          if (!v185) {
            unsigned int v186 = 81;
          }
          unsigned int v187 = v182[2] + 2;
          if (v187 >= 3)
          {
            if (v182[2] == 1)
            {
              unsigned int v188 = 82;
            }
            else
            {
              BOOL v189 = v187 >= 5;
              if (v182[2] == 3) {
                unsigned int v188 = 84;
              }
              else {
                unsigned int v188 = 85;
              }
              if (!v189) {
                unsigned int v188 = 83;
              }
            }
          }
          else
          {
            unsigned int v188 = 81;
          }
          if (v186 > v188
            || (*(_DWORD *)(*(void *)*v178 + 112) < *(_DWORD *)(*(void *)v182 + 112)
              ? (BOOL v190 = v186 == v188)
              : (BOOL v190 = 0),
                v190))
          {
            ++v178;
            uint64_t v176 = v181;
          }
        }
        uint64_t result = *v178;
        *uint64_t v179 = *v178;
      }
      while (v176 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
      if (v178 == --a2)
      {
        *uint64_t v178 = (uint64_t)v177;
        goto LABEL_548;
      }
      *uint64_t v178 = *a2;
      *a2 = (uint64_t)v177;
      uint64_t v191 = (uint64_t)v178 - v10 + 8;
      if (v191 < 9) {
        goto LABEL_548;
      }
      unint64_t v192 = ((unint64_t)v191 >> 3) - 2;
      unint64_t v193 = v192 >> 1;
      uint64_t v194 = (unint64_t *)(v10 + 8 * (v192 >> 1));
      uint64_t result = *v194;
      unsigned int v195 = *(_DWORD *)(*v194 + 8) + 2;
      if (v195 >= 3)
      {
        if (*(_DWORD *)(*v194 + 8) == 1)
        {
          unsigned int v196 = 82;
        }
        else if (v195 >= 5)
        {
          unsigned int v196 = *(_DWORD *)(*v194 + 8) == 3 ? 84 : 85;
        }
        else
        {
          unsigned int v196 = 83;
        }
      }
      else
      {
        unsigned int v196 = 81;
      }
      uint64_t v197 = *v178;
      unsigned int v198 = *(_DWORD *)(*v178 + 8) + 2;
      if (v198 >= 3)
      {
        if (*(_DWORD *)(*v178 + 8) == 1)
        {
          unsigned int v199 = 82;
        }
        else
        {
          if (*(_DWORD *)(*v178 + 8) == 3) {
            unsigned int v199 = 84;
          }
          else {
            unsigned int v199 = 85;
          }
          if (v198 < 5) {
            unsigned int v199 = 83;
          }
        }
      }
      else
      {
        unsigned int v199 = 81;
      }
      if (v196 <= v199
        && (v196 != v199 || *(_DWORD *)(*(void *)result + 112) >= *(_DWORD *)(*(void *)v197 + 112)))
      {
LABEL_548:
        if (v12-- <= 2) {
          return result;
        }
        continue;
      }
      break;
    }
    *uint64_t v178 = result;
    if (v192 < 2)
    {
LABEL_523:
      unint64_t v200 = (unint64_t)v194;
LABEL_547:
      *(void *)unint64_t v200 = v197;
      goto LABEL_548;
    }
    if (v198 < 3) {
      unsigned int v201 = 81;
    }
    else {
      unsigned int v201 = 82;
    }
    if (v198 == 5) {
      int v202 = 84;
    }
    else {
      int v202 = 85;
    }
    if (v198 < 5) {
      int v202 = 83;
    }
    if (v198 >= 4) {
      unsigned int v201 = v202;
    }
    while (2)
    {
      uint64_t result = v193 - 1;
      unint64_t v193 = (v193 - 1) >> 1;
      unint64_t v200 = v10 + 8 * v193;
      unint64_t v203 = *(void *)v200;
      unsigned int v204 = *(_DWORD *)(*(void *)v200 + 8) + 2;
      if (v204 >= 3)
      {
        if (*(_DWORD *)(*(void *)v200 + 8) == 1)
        {
          unsigned int v205 = 82;
        }
        else if (v204 >= 5)
        {
          if (*(_DWORD *)(*(void *)v200 + 8) == 3) {
            unsigned int v205 = 84;
          }
          else {
            unsigned int v205 = 85;
          }
        }
        else
        {
          unsigned int v205 = 83;
        }
        if (v205 <= v201) {
          goto LABEL_544;
        }
      }
      else
      {
        unsigned int v205 = 81;
LABEL_544:
        if (v205 != v201 || *(_DWORD *)(*(void *)v203 + 112) >= *(_DWORD *)(*(void *)v197 + 112)) {
          goto LABEL_523;
        }
      }
      *uint64_t v194 = v203;
      uint64_t v194 = (unint64_t *)(v10 + 8 * v193);
      if (result <= 1) {
        goto LABEL_547;
      }
      continue;
    }
  }
  return result;
}

_DWORD **sub_1CBB28D04(_DWORD **result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(_DWORD **)a2;
  BOOL v4 = *result;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 8) + 2;
  if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
    int v6 = 84;
  }
  else {
    int v6 = 85;
  }
  if (v5 >= 5) {
    int v7 = v6;
  }
  else {
    int v7 = 83;
  }
  if (*(_DWORD *)(*(void *)a2 + 8) == 1) {
    int v8 = 82;
  }
  else {
    int v8 = v7;
  }
  if (v5 >= 3) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 81;
  }
  unsigned int v10 = v4[2] + 2;
  if (v10 >= 3)
  {
    if (v4[2] == 1)
    {
      unsigned int v11 = 82;
    }
    else
    {
      if (v4[2] == 3) {
        unsigned int v11 = 84;
      }
      else {
        unsigned int v11 = 85;
      }
      if (v10 < 5) {
        unsigned int v11 = 83;
      }
    }
  }
  else
  {
    unsigned int v11 = 81;
  }
  if (v9 > v11 || (unsigned int v12 = *(_DWORD *)(*(void *)v3 + 112), v9 == v11) && v12 < *(_DWORD *)(*(void *)v4 + 112))
  {
    unint64_t v13 = (_DWORD *)*a3;
    unsigned int v14 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3) {
      int v15 = 84;
    }
    else {
      int v15 = 85;
    }
    if (v14 >= 5) {
      int v16 = v15;
    }
    else {
      int v16 = 83;
    }
    BOOL v17 = v14 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1) {
      unsigned int v18 = 82;
    }
    else {
      unsigned int v18 = v16;
    }
    if (!v17) {
      unsigned int v18 = 81;
    }
    if (v5 >= 3)
    {
      if (*(_DWORD *)(*(void *)a2 + 8) == 1)
      {
        unsigned int v19 = 82;
      }
      else if (v5 >= 5)
      {
        if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
          unsigned int v19 = 84;
        }
        else {
          unsigned int v19 = 85;
        }
      }
      else
      {
        unsigned int v19 = 83;
      }
    }
    else
    {
      unsigned int v19 = 81;
    }
    if (v18 > v19 || v18 == v19 && *(_DWORD *)(*(void *)v13 + 112) < *(_DWORD *)(*(void *)v3 + 112))
    {
      *uint64_t result = v13;
LABEL_64:
      *a3 = (uint64_t)v4;
      return result;
    }
    *uint64_t result = v3;
    *(void *)a2 = v4;
    uint64_t v27 = *a3;
    unsigned int v28 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3) {
      int v29 = 84;
    }
    else {
      int v29 = 85;
    }
    if (v28 >= 5) {
      int v30 = v29;
    }
    else {
      int v30 = 83;
    }
    BOOL v31 = v28 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1) {
      unsigned int v32 = 82;
    }
    else {
      unsigned int v32 = v30;
    }
    if (!v31) {
      unsigned int v32 = 81;
    }
    if (v10 >= 3)
    {
      if (v10 == 3)
      {
        unsigned int v33 = 82;
      }
      else if (v10 >= 5)
      {
        if (v10 == 5) {
          unsigned int v33 = 84;
        }
        else {
          unsigned int v33 = 85;
        }
      }
      else
      {
        unsigned int v33 = 83;
      }
    }
    else
    {
      unsigned int v33 = 81;
    }
    if (v32 > v33 || v32 == v33 && *(_DWORD *)(*(void *)v27 + 112) < *(_DWORD *)(*(void *)v4 + 112))
    {
      *(void *)a2 = v27;
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v20 = *a3;
    unsigned int v21 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3) {
      int v22 = 84;
    }
    else {
      int v22 = 85;
    }
    if (v21 >= 5) {
      int v23 = v22;
    }
    else {
      int v23 = 83;
    }
    BOOL v24 = v21 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1) {
      unsigned int v25 = 82;
    }
    else {
      unsigned int v25 = v23;
    }
    if (!v24) {
      unsigned int v25 = 81;
    }
    if (v5 >= 3)
    {
      if (*(_DWORD *)(*(void *)a2 + 8) == 1)
      {
        unsigned int v26 = 82;
      }
      else
      {
        BOOL v34 = v5 >= 5;
        if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
          unsigned int v26 = 84;
        }
        else {
          unsigned int v26 = 85;
        }
        if (!v34) {
          unsigned int v26 = 83;
        }
      }
    }
    else
    {
      unsigned int v26 = 81;
    }
    if (v25 > v26 || v25 == v26 && *(_DWORD *)(*(void *)v20 + 112) < v12)
    {
      *(void *)a2 = v20;
      *a3 = (uint64_t)v3;
      unint64_t v35 = *(_DWORD **)a2;
      uint64_t v36 = *result;
      unsigned int v37 = *(_DWORD *)(*(void *)a2 + 8) + 2;
      if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
        int v38 = 84;
      }
      else {
        int v38 = 85;
      }
      if (v37 >= 5) {
        int v39 = v38;
      }
      else {
        int v39 = 83;
      }
      BOOL v40 = v37 >= 3;
      if (*(_DWORD *)(*(void *)a2 + 8) == 1) {
        unsigned int v41 = 82;
      }
      else {
        unsigned int v41 = v39;
      }
      if (!v40) {
        unsigned int v41 = 81;
      }
      unsigned int v42 = v36[2] + 2;
      if (v42 >= 3)
      {
        if (v36[2] == 1)
        {
          unsigned int v43 = 82;
        }
        else if (v42 >= 5)
        {
          if (v36[2] == 3) {
            unsigned int v43 = 84;
          }
          else {
            unsigned int v43 = 85;
          }
        }
        else
        {
          unsigned int v43 = 83;
        }
      }
      else
      {
        unsigned int v43 = 81;
      }
      if (v41 > v43 || v41 == v43 && *(_DWORD *)(*(void *)v35 + 112) < *(_DWORD *)(*(void *)v36 + 112))
      {
        *uint64_t result = v35;
        *(void *)a2 = v36;
      }
    }
  }
  return result;
}

BOOL sub_1CBB2900C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = (_DWORD *)*(a2 - 1);
      int v7 = *(_DWORD **)a1;
      unsigned int v8 = v6[2] + 2;
      if (v6[2] == 3) {
        int v9 = 84;
      }
      else {
        int v9 = 85;
      }
      if (v8 >= 5) {
        int v10 = v9;
      }
      else {
        int v10 = 83;
      }
      BOOL v11 = v8 >= 3;
      if (v6[2] == 1) {
        unsigned int v12 = 82;
      }
      else {
        unsigned int v12 = v10;
      }
      if (!v11) {
        unsigned int v12 = 81;
      }
      unsigned int v13 = v7[2] + 2;
      if (v13 >= 3)
      {
        if (v7[2] == 1)
        {
          unsigned int v14 = 82;
        }
        else if (v13 >= 5)
        {
          if (v7[2] == 3) {
            unsigned int v14 = 84;
          }
          else {
            unsigned int v14 = 85;
          }
        }
        else
        {
          unsigned int v14 = 83;
        }
      }
      else
      {
        unsigned int v14 = 81;
      }
      if (v12 > v14 || v12 == v14 && *(_DWORD *)(*(void *)v6 + 112) < *(_DWORD *)(*(void *)v7 + 112))
      {
        *(void *)a1 = v6;
        *(a2 - 1) = (uint64_t)v7;
      }
      return result;
    case 3:
      sub_1CBB28D04((_DWORD **)a1, a1 + 8, a2 - 1);
      return 1;
    case 4:
      sub_1CBB295A4((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      unsigned int v33 = (_DWORD **)(a1 + 16);
      uint64_t v34 = a1 + 24;
      sub_1CBB295A4((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 24));
      unint64_t v35 = (_DWORD *)*(a2 - 1);
      uint64_t v36 = *(_DWORD **)(a1 + 24);
      unsigned int v37 = v35[2] + 2;
      if (v35[2] == 3) {
        int v38 = 84;
      }
      else {
        int v38 = 85;
      }
      if (v37 >= 5) {
        int v39 = v38;
      }
      else {
        int v39 = 83;
      }
      BOOL v40 = v37 >= 3;
      if (v35[2] == 1) {
        unsigned int v41 = 82;
      }
      else {
        unsigned int v41 = v39;
      }
      if (!v40) {
        unsigned int v41 = 81;
      }
      unsigned int v42 = v36[2] + 2;
      if (v42 >= 3)
      {
        if (v36[2] == 1)
        {
          unsigned int v43 = 82;
        }
        else
        {
          BOOL v44 = v42 >= 5;
          if (v36[2] == 3) {
            unsigned int v43 = 84;
          }
          else {
            unsigned int v43 = 85;
          }
          if (!v44) {
            unsigned int v43 = 83;
          }
        }
      }
      else
      {
        unsigned int v43 = 81;
      }
      if (v41 <= v43)
      {
        BOOL result = 1;
        if (v41 != v43 || *(_DWORD *)(*(void *)v35 + 112) >= *(_DWORD *)(*(void *)v36 + 112)) {
          return result;
        }
      }
      *(void *)uint64_t v34 = v35;
      *(a2 - 1) = (uint64_t)v36;
      unsigned int v45 = *(_DWORD **)v34;
      BOOL v46 = *v33;
      unsigned int v47 = *(_DWORD *)(*(void *)v34 + 8) + 2;
      int v48 = *(_DWORD *)(*(void *)v34 + 8) == 3 ? 84 : 85;
      int v49 = v47 >= 5 ? v48 : 83;
      int v50 = *(_DWORD *)(*(void *)v34 + 8) == 1 ? 82 : v49;
      unsigned int v51 = v47 >= 3 ? v50 : 81;
      unsigned int v52 = v46[2] + 2;
      if (v52 >= 3)
      {
        if (v46[2] == 1)
        {
          unsigned int v53 = 82;
        }
        else
        {
          BOOL v54 = v52 >= 5;
          if (v46[2] == 3) {
            unsigned int v53 = 84;
          }
          else {
            unsigned int v53 = 85;
          }
          if (!v54) {
            unsigned int v53 = 83;
          }
        }
      }
      else
      {
        unsigned int v53 = 81;
      }
      if (v51 <= v53)
      {
        BOOL result = 1;
        if (v51 != v53 || *(_DWORD *)(*(void *)v45 + 112) >= *(_DWORD *)(*(void *)v46 + 112)) {
          return result;
        }
      }
      *unsigned int v33 = v45;
      *(void *)uint64_t v34 = v46;
      BOOL v55 = *(_DWORD **)(a1 + 8);
      int v56 = v47 == 5 ? 84 : 85;
      int v57 = v47 >= 5 ? v56 : 83;
      int v58 = v47 == 3 ? 82 : v57;
      unsigned int v59 = v47 >= 3 ? v58 : 81;
      unsigned int v60 = v55[2] + 2;
      if (v60 >= 3)
      {
        if (v55[2] == 1)
        {
          unsigned int v61 = 82;
        }
        else
        {
          BOOL v62 = v60 >= 5;
          if (v55[2] == 3) {
            unsigned int v61 = 84;
          }
          else {
            unsigned int v61 = 85;
          }
          if (!v62) {
            unsigned int v61 = 83;
          }
        }
      }
      else
      {
        unsigned int v61 = 81;
      }
      if (v59 <= v61)
      {
        BOOL result = 1;
        if (v59 != v61 || *(_DWORD *)(*(void *)v45 + 112) >= *(_DWORD *)(*(void *)v55 + 112)) {
          return result;
        }
      }
      *(void *)(a1 + 8) = v45;
      *(void *)(a1 + 16) = v55;
      int v63 = *(_DWORD **)a1;
      if (v47 == 5) {
        int v64 = 84;
      }
      else {
        int v64 = 85;
      }
      if (v47 >= 5) {
        int v65 = v64;
      }
      else {
        int v65 = 83;
      }
      BOOL v66 = v47 >= 3;
      if (v47 == 3) {
        unsigned int v67 = 82;
      }
      else {
        unsigned int v67 = v65;
      }
      if (!v66) {
        unsigned int v67 = 81;
      }
      unsigned int v68 = v63[2] + 2;
      if (v68 >= 3)
      {
        if (v63[2] == 1)
        {
          unsigned int v69 = 82;
        }
        else if (v68 >= 5)
        {
          unsigned int v69 = v63[2] == 3 ? 84 : 85;
        }
        else
        {
          unsigned int v69 = 83;
        }
      }
      else
      {
        unsigned int v69 = 81;
      }
      if (v67 <= v69)
      {
        BOOL result = 1;
        if (v67 != v69 || *(_DWORD *)(*(void *)v45 + 112) >= *(_DWORD *)(*(void *)v63 + 112)) {
          return result;
        }
      }
      *(void *)a1 = v45;
      *(void *)(a1 + 8) = v63;
      return 1;
    default:
      int v15 = (uint64_t *)(a1 + 16);
      sub_1CBB28D04((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16));
      int v16 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  do
  {
    unsigned int v19 = (_DWORD *)*v16;
    uint64_t v20 = (_DWORD *)*v15;
    unsigned int v21 = *(_DWORD *)(*v16 + 8) + 2;
    if (*(_DWORD *)(*v16 + 8) == 3) {
      unsigned int v22 = 84;
    }
    else {
      unsigned int v22 = 85;
    }
    if (v21 < 5) {
      unsigned int v22 = 83;
    }
    if (*(_DWORD *)(*v16 + 8) == 1) {
      unsigned int v22 = 82;
    }
    if (v21 < 3) {
      unsigned int v22 = 81;
    }
    unsigned int v23 = v20[2] + 2;
    if (v23 >= 3)
    {
      if (v20[2] == 1)
      {
        unsigned int v24 = 82;
      }
      else
      {
        BOOL v25 = v23 >= 5;
        if (v20[2] == 3) {
          unsigned int v24 = 84;
        }
        else {
          unsigned int v24 = 85;
        }
        if (!v25) {
          unsigned int v24 = 83;
        }
      }
    }
    else
    {
      unsigned int v24 = 81;
    }
    if (v22 > v24 || v22 == v24 && *(_DWORD *)(*(void *)v19 + 112) < *(_DWORD *)(*(void *)v20 + 112))
    {
      *int v16 = (uint64_t)v20;
      unsigned int v26 = (void *)a1;
      if (v15 != (uint64_t *)a1)
      {
        if (v21 < 3) {
          unsigned int v27 = 81;
        }
        else {
          unsigned int v27 = 82;
        }
        if (v21 == 5) {
          int v28 = 84;
        }
        else {
          int v28 = 85;
        }
        if (v21 < 5) {
          int v28 = 83;
        }
        if (v21 >= 4) {
          unsigned int v27 = v28;
        }
        uint64_t v29 = v17;
        while (1)
        {
          int v30 = *(_DWORD **)(a1 + v29 + 8);
          unsigned int v31 = v30[2] + 2;
          if (v31 >= 3)
          {
            if (v30[2] == 1)
            {
              unsigned int v32 = 82;
            }
            else if (v31 >= 5)
            {
              unsigned int v32 = v30[2] == 3 ? 84 : 85;
            }
            else
            {
              unsigned int v32 = 83;
            }
          }
          else
          {
            unsigned int v32 = 81;
          }
          if (v27 <= v32 && (v27 != v32 || *(_DWORD *)(*(void *)v19 + 112) >= *(_DWORD *)(*(void *)v30 + 112))) {
            break;
          }
          *(void *)(a1 + v29 + 16) = v30;
          v29 -= 8;
          if (v29 == -16)
          {
            unsigned int v26 = (void *)a1;
            goto LABEL_65;
          }
        }
        unsigned int v26 = (void *)(a1 + v29 + 16);
      }
LABEL_65:
      *unsigned int v26 = v19;
      if (++v18 == 8) {
        return v16 + 1 == a2;
      }
    }
    int v15 = v16;
    v17 += 8;
    ++v16;
  }
  while (v16 != a2);
  return 1;
}

_DWORD **sub_1CBB295A4(_DWORD **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CBB28D04(a1, a2, a3);
  uint64_t v9 = *a4;
  int v10 = (_DWORD *)*a3;
  unsigned int v11 = *(_DWORD *)(*a4 + 8) + 2;
  if (*(_DWORD *)(*a4 + 8) == 3) {
    int v12 = 84;
  }
  else {
    int v12 = 85;
  }
  if (v11 >= 5) {
    int v13 = v12;
  }
  else {
    int v13 = 83;
  }
  BOOL v14 = v11 >= 3;
  if (*(_DWORD *)(*a4 + 8) == 1) {
    unsigned int v15 = 82;
  }
  else {
    unsigned int v15 = v13;
  }
  if (!v14) {
    unsigned int v15 = 81;
  }
  unsigned int v16 = v10[2] + 2;
  if (v16 >= 3)
  {
    if (v10[2] == 1)
    {
      unsigned int v17 = 82;
    }
    else
    {
      BOOL v18 = v16 >= 5;
      if (v10[2] == 3) {
        unsigned int v17 = 84;
      }
      else {
        unsigned int v17 = 85;
      }
      if (!v18) {
        unsigned int v17 = 83;
      }
    }
  }
  else
  {
    unsigned int v17 = 81;
  }
  if (v15 > v17 || v15 == v17 && *(_DWORD *)(*(void *)v9 + 112) < *(_DWORD *)(*(void *)v10 + 112))
  {
    *a3 = v9;
    *a4 = (uint64_t)v10;
    uint64_t v19 = *a3;
    uint64_t v20 = *(_DWORD **)a2;
    unsigned int v21 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3) {
      int v22 = 84;
    }
    else {
      int v22 = 85;
    }
    if (v21 >= 5) {
      int v23 = v22;
    }
    else {
      int v23 = 83;
    }
    BOOL v24 = v21 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1) {
      unsigned int v25 = 82;
    }
    else {
      unsigned int v25 = v23;
    }
    if (!v24) {
      unsigned int v25 = 81;
    }
    unsigned int v26 = v20[2] + 2;
    if (v26 >= 3)
    {
      if (v20[2] == 1)
      {
        unsigned int v27 = 82;
      }
      else
      {
        BOOL v28 = v26 >= 5;
        if (v20[2] == 3) {
          unsigned int v27 = 84;
        }
        else {
          unsigned int v27 = 85;
        }
        if (!v28) {
          unsigned int v27 = 83;
        }
      }
    }
    else
    {
      unsigned int v27 = 81;
    }
    if (v25 > v27 || v25 == v27 && *(_DWORD *)(*(void *)v19 + 112) < *(_DWORD *)(*(void *)v20 + 112))
    {
      *(void *)a2 = v19;
      *a3 = (uint64_t)v20;
      uint64_t v29 = *(_DWORD **)a2;
      int v30 = *a1;
      unsigned int v31 = *(_DWORD *)(*(void *)a2 + 8) + 2;
      if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
        int v32 = 84;
      }
      else {
        int v32 = 85;
      }
      if (v31 >= 5) {
        int v33 = v32;
      }
      else {
        int v33 = 83;
      }
      BOOL v34 = v31 >= 3;
      if (*(_DWORD *)(*(void *)a2 + 8) == 1) {
        unsigned int v35 = 82;
      }
      else {
        unsigned int v35 = v33;
      }
      if (!v34) {
        unsigned int v35 = 81;
      }
      unsigned int v36 = v30[2] + 2;
      if (v36 >= 3)
      {
        if (v30[2] == 1)
        {
          unsigned int v37 = 82;
        }
        else if (v36 >= 5)
        {
          if (v30[2] == 3) {
            unsigned int v37 = 84;
          }
          else {
            unsigned int v37 = 85;
          }
        }
        else
        {
          unsigned int v37 = 83;
        }
      }
      else
      {
        unsigned int v37 = 81;
      }
      if (v35 > v37 || v35 == v37 && *(_DWORD *)(*(void *)v29 + 112) < *(_DWORD *)(*(void *)v30 + 112))
      {
        *a1 = v29;
        *(void *)a2 = v30;
      }
    }
  }
  return result;
}

BOOL sub_1CBB297C0(BOOL result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    unsigned int v8 = (uint64_t ***)(result + 8 * (v4 >> 1));
    uint64_t v9 = *v8;
    unsigned int v11 = (uint64_t ***)(a2 - 8);
    int v10 = *(uint64_t ***)(a2 - 8);
    BOOL result = sub_1CBB29868(*a3, *v8, v10);
    if (result)
    {
      do
      {
        int v12 = v8;
        *unsigned int v11 = v9;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        unsigned int v8 = (uint64_t ***)(v6 + 8 * v7);
        uint64_t v9 = *v8;
        BOOL result = sub_1CBB29868(*a3, *v8, v10);
        unsigned int v11 = v12;
      }
      while (result);
      *int v12 = v10;
    }
  }
  return result;
}

BOOL sub_1CBB29868(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  unsigned int v3 = a2[2] + 2;
  if (a2[2] == 3) {
    int v4 = 84;
  }
  else {
    int v4 = 85;
  }
  if (v3 >= 5) {
    int v5 = v4;
  }
  else {
    int v5 = 83;
  }
  BOOL v6 = v3 >= 3;
  if (a2[2] == 1) {
    unsigned int v7 = 82;
  }
  else {
    unsigned int v7 = v5;
  }
  if (!v6) {
    unsigned int v7 = 81;
  }
  unsigned int v8 = *((_DWORD *)a3 + 2) + 2;
  if (*((_DWORD *)a3 + 2) == 3) {
    int v9 = 84;
  }
  else {
    int v9 = 85;
  }
  if (v8 < 5) {
    int v9 = 83;
  }
  BOOL v10 = v8 >= 3;
  if (*((_DWORD *)a3 + 2) == 1) {
    unsigned int v11 = 82;
  }
  else {
    unsigned int v11 = v9;
  }
  if (!v10) {
    unsigned int v11 = 81;
  }
  BOOL v12 = v7 >= v11;
  if (v7 == v11)
  {
    int v13 = *(uint64_t **)a2;
    unsigned int v14 = *(_DWORD *)(*(void *)a2 + 112);
    uint64_t v15 = *(void *)(a1 + 808);
    uint64_t v16 = *(unsigned int *)(a1 + 824);
    if (v16)
    {
      LODWORD(v18) = (v16 - 1) & (37 * v14);
      unsigned int v17 = (int *)(v15 + 8 * v18);
      int v19 = *v17;
      if (v14 == *v17)
      {
LABEL_26:
        uint64_t v20 = *a3;
        unsigned int v21 = (int *)(v15 + 8 * v16);
        if (v21 == v17) {
          unsigned int v22 = 0;
        }
        else {
          unsigned int v22 = v17[1];
        }
        unsigned int v23 = *((_DWORD *)v20 + 28);
        if (v16)
        {
          unsigned int v30 = v16 - 1;
          LODWORD(v16) = (v16 - 1) & (37 * v23);
          unsigned int v31 = (int *)(v15 + 8 * v16);
          int v32 = *v31;
          if (v23 == *v31)
          {
LABEL_37:
            if (v21 != v31)
            {
              unsigned int v24 = v31[1];
              goto LABEL_31;
            }
          }
          else
          {
            int v41 = 1;
            while (v32 != -1)
            {
              int v42 = v16 + v41++;
              uint64_t v16 = v42 & v30;
              int v32 = *(_DWORD *)(v15 + 8 * v16);
              if (v23 == v32)
              {
                unsigned int v31 = (int *)(v15 + 8 * v16);
                goto LABEL_37;
              }
            }
          }
        }
        unsigned int v24 = 0;
LABEL_31:
        BOOL v12 = v22 >= v24;
        if (v22 == v24)
        {
          uint64_t v25 = *((unsigned int *)v13 + 2);
          if (v25)
          {
            unsigned int v26 = 0;
            uint64_t v27 = *v13;
            uint64_t v28 = 24 * v25;
            uint64_t v29 = (void *)(v27 + 8);
            do
            {
              unsigned int v26 = ((*v29 >> 1) & 3 | *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24))
                  + v26
                  - ((*(v29 - 1) >> 1) & 3 | *(_DWORD *)((*(v29 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
              v29 += 3;
              v28 -= 24;
            }
            while (v28);
          }
          else
          {
            unsigned int v26 = 0;
          }
          uint64_t v33 = *((unsigned int *)v20 + 2);
          if (v33)
          {
            unsigned int v34 = 0;
            uint64_t v35 = *v20;
            uint64_t v36 = 24 * v33;
            unsigned int v37 = (void *)(v35 + 8);
            do
            {
              unsigned int v34 = ((*v37 >> 1) & 3 | *(_DWORD *)((*v37 & 0xFFFFFFFFFFFFFFF8) + 24))
                  + v34
                  - ((*(v37 - 1) >> 1) & 3 | *(_DWORD *)((*(v37 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
              v37 += 3;
              v36 -= 24;
            }
            while (v36);
          }
          else
          {
            unsigned int v34 = 0;
          }
          BOOL v12 = v26 >= v34;
          if (v26 == v34) {
            BOOL v12 = v14 >= v23;
          }
        }
        return !v12;
      }
      int v39 = 1;
      while (v19 != -1)
      {
        int v40 = v18 + v39++;
        uint64_t v18 = v40 & (v16 - 1);
        int v19 = *(_DWORD *)(v15 + 8 * v18);
        if (v14 == v19)
        {
          unsigned int v17 = (int *)(v15 + 8 * v18);
          goto LABEL_26;
        }
      }
    }
    unsigned int v17 = (int *)(v15 + 8 * v16);
    goto LABEL_26;
  }
  return !v12;
}

uint64_t sub_1CBB29A9C(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)a1;
    int v6 = v4 - 1;
    unsigned int v7 = (37 * *a2) & v6;
    unsigned int v8 = (int *)(*(void *)a1 + 4 * v7);
    int v9 = *v8;
    if (*a2 == *v8) {
      return 0;
    }
    BOOL v10 = 0;
    int v11 = 1;
    while (v9 != -1)
    {
      uint64_t result = 0;
      if (v10) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v9 == -2;
      }
      if (v13) {
        BOOL v10 = v8;
      }
      unsigned int v14 = v7 + v11++;
      unsigned int v7 = v14 & v6;
      unsigned int v8 = (int *)(v5 + 4 * v7);
      int v9 = *v8;
      if (*a2 == *v8) {
        return result;
      }
    }
    if (v10) {
      uint64_t v15 = v10;
    }
    else {
      uint64_t v15 = v8;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  *sub_1CBB29C30(a1, (uint64_t)a2, a2, v15) = *a2;
  unsigned int v17 = *(int **)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 40);
  if ((unint64_t)v17 >= v16)
  {
    int v19 = *(int **)(a1 + 24);
    uint64_t v20 = v17 - v19;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62) {
      abort();
    }
    uint64_t v22 = v16 - (void)v19;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        sub_1CB833614();
      }
      unsigned int v24 = (char *)operator new(4 * v23);
    }
    else
    {
      unsigned int v24 = 0;
    }
    uint64_t v25 = (int *)&v24[4 * v20];
    *uint64_t v25 = *a2;
    uint64_t v18 = v25 + 1;
    while (v17 != v19)
    {
      int v26 = *--v17;
      *--uint64_t v25 = v26;
    }
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = &v24[4 * v23];
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    int *v17 = *a2;
    uint64_t v18 = v17 + 1;
  }
  *(void *)(a1 + 32) = v18;
  return 1;
}

int *sub_1CBB29C30(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 < (3 * v7))
  {
    if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CBB29E58(a1, *(_DWORD *)(a1 + 16));
    int v22 = *(_DWORD *)(a1 + 16);
    if (v22)
    {
      int v23 = v22 - 1;
      unsigned int v24 = (37 * *a3) & v23;
      a4 = (int *)(*(void *)a1 + 4 * v24);
      int v25 = *a4;
      if (*a3 != *a4)
      {
        int v26 = 0;
        int v27 = 1;
        while (v25 != -1)
        {
          if (v26) {
            BOOL v28 = 0;
          }
          else {
            BOOL v28 = v25 == -2;
          }
          if (v28) {
            int v26 = a4;
          }
          unsigned int v29 = v24 + v27++;
          unsigned int v24 = v29 & v23;
          a4 = (int *)(*(void *)a1 + 4 * v24);
          int v25 = *a4;
          if (*a3 == *a4) {
            goto LABEL_3;
          }
        }
        if (v26) {
          a4 = v26;
        }
      }
      goto LABEL_3;
    }
LABEL_34:
    a4 = 0;
    goto LABEL_3;
  }
  int v9 = *(int **)a1;
  unint64_t v10 = (2 * v7 - 1) | ((unint64_t)(2 * v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  unsigned int v14 = (int *)operator new(4 * v13, (std::align_val_t)4uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    sub_1CBB29F38((void *)a1, v9, &v9[v7]);
    MEMORY[0x1D25D9CD0](v9, 4);
    LODWORD(v7) = *(_DWORD *)(a1 + 16);
    if (!v7) {
      goto LABEL_34;
    }
    uint64_t v15 = *(int **)a1;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (!v7) {
      goto LABEL_34;
    }
    uint64_t v15 = v14;
    memset(v14, 255, 4 * v7);
  }
  int v16 = (37 * *a3) & (v7 - 1);
  a4 = &v15[v16];
  int v17 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -1)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        uint64_t v18 = a4;
      }
      int v21 = v16 + v19++;
      int v16 = v21 & (v7 - 1);
      a4 = &v15[v16];
      int v17 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
    }
    if (v18) {
      a4 = v18;
    }
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBB29E58(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBB29F38((void *)a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    return memset(result, 255, 4 * v10);
  }
  return result;
}

void *sub_1CBB29F38(void *result, int *a2, int *a3)
{
  unint64_t v5 = result;
  result[1] = 0;
  unint64_t v6 = (char *)*result;
  uint64_t v7 = *((unsigned int *)result + 4);
  if (v7) {
    uint64_t result = memset((void *)*result, 255, 4 * v7);
  }
  for (; a2 != a3; ++a2)
  {
    int v8 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v9 = *((_DWORD *)v5 + 4) - 1;
      unsigned int v10 = v9 & (37 * v8);
      unint64_t v11 = &v6[4 * v10];
      int v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        unsigned int v13 = 0;
        int v14 = 1;
        while (v12 != -1)
        {
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == -2;
          }
          if (v15) {
            unsigned int v13 = v11;
          }
          unsigned int v16 = v10 + v14++;
          unsigned int v10 = v16 & v9;
          unint64_t v11 = &v6[4 * (v16 & v9)];
          int v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11) {
            goto LABEL_10;
          }
        }
        if (v13) {
          unint64_t v11 = v13;
        }
      }
LABEL_10:
      *(_DWORD *)unint64_t v11 = v8;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

void *sub_1CBB2A024(void *result)
{
  uint64_t v1 = result;
  int v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    uint64_t v3 = *((unsigned int *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      return sub_1CD420CA0(result);
    }
    else
    {
      if (v3) {
        uint64_t result = memset((void *)*result, 255, 4 * v3);
      }
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t sub_1CBB2A0A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = HIDWORD(a3);
  unsigned int v6 = a3 - 81;
  unsigned int v7 = *(_DWORD *)(a1 + 248);
  if (v7 <= HIDWORD(a3)) {
    sub_1CBB24198(a1, 2 * v7);
  }
  unsigned int v8 = v5 >> v6;
  uint64_t v9 = *(void *)(a1 + 8 * v6 + 184);
  uint64_t result = v9 + 176 * (v5 >> v6);
  unint64_t v11 = (_DWORD *)(*(void *)(a1 + 16 * v6 + 112) + 216 * (v5 >> v6));
  if (*(_DWORD *)(result + 168)
    || *(void *)(v9 + 176 * v8 + 8) != a2
    || *(_DWORD **)result != v11
    || *v11 != *(_DWORD *)(v9 + 176 * v8 + 164))
  {
    *(void *)uint64_t result = v11;
    uint64_t v12 = v9 + 176 * v8;
    *(void *)(v12 + 8) = a2;
    *(_DWORD *)(v12 + 120) = 0;
    *(_WORD *)(v12 + 160) = 0;
    *(_DWORD *)(v12 + 164) = *v11;
    *(_DWORD *)(result + 168) = 0;
  }
  return result;
}

_DWORD *sub_1CBB2A17C(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    unsigned int v10 = 0;
LABEL_8:
    unsigned int v6 = sub_1CBB2401C(a1, (uint64_t)a2, a2, v10);
    *(void *)unsigned int v6 = *a2;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  unsigned int v6 = (_DWORD *)(*(void *)a1 + 8 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    unsigned int v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == -2;
      }
      if (v12) {
        unsigned int v8 = v6;
      }
      unsigned int v13 = v5 + v9++;
      unsigned int v5 = v13 & v4;
      unsigned int v6 = (_DWORD *)(*(void *)a1 + 8 * (v13 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      unsigned int v10 = v8;
    }
    else {
      unsigned int v10 = v6;
    }
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1CBB2A238(void *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 8) = 0;
  int v4 = (_DWORD ***)*a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 8);
  if (!v5) {
    return 1;
  }
  int v9 = *v4;
  uint64_t v26 = (uint64_t)&(*v4)[v5];
  while (1)
  {
    if (a2 >= a3) {
      return 0;
    }
    unsigned int v10 = *v9;
    uint64_t v11 = a1[1];
    int v12 = **(unsigned char **)(v11 + 8) ? 1 << (*v9)[2] : 1;
    unsigned int v13 = (a2 + v12 - 1) & -v12;
    uint64_t v14 = v13 >= 0xFF0 ? 0 : v13;
    if (v13 > 0xFEF || v14 >= a3) {
      return 0;
    }
    uint64_t v16 = *(void *)v11 + 248;
    if (sub_1CBB27568(v16, *v9, v14)) {
      break;
    }
LABEL_22:
    unsigned int v19 = v10[2] + 2;
    if (v10[2] == 3) {
      int v20 = 8;
    }
    else {
      int v20 = 16;
    }
    if (v19 < 5) {
      int v20 = 4;
    }
    BOOL v21 = v19 >= 3;
    if (v10[2] == 1) {
      int v22 = 2;
    }
    else {
      int v22 = v20;
    }
    if (v21) {
      int v23 = v22;
    }
    else {
      int v23 = 1;
    }
    uint64_t v24 = *(unsigned int *)(a4 + 8);
    if (v24 >= *(_DWORD *)(a4 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = *(void *)a4 + 16 * v24;
    *(void *)uint64_t v25 = v10;
    *(_DWORD *)(v25 + 8) = v14;
    *(_DWORD *)(a4 + 8) = v24 + 1;
    a2 = v23 + v14;
    if (++v9 == (_DWORD **)v26) {
      return 1;
    }
  }
  unsigned int v17 = v12 + v13;
  while (1)
  {
    uint64_t result = 0;
    uint64_t v14 = v17 >= 0xFF0 ? 0 : v17;
    if (v17 > 0xFEF || v14 >= a3) {
      return result;
    }
    v17 += v12;
    if (!sub_1CBB27568(v16, v10, v14)) {
      goto LABEL_22;
    }
  }
}

unint64_t sub_1CBB2A3F4(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = a2 - v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v10 + 8))
                {
                  int v116 = *(_DWORD *)(v10 + 8);
                  uint64_t v110 = *(void *)v10;
                  uint64_t v47 = *(void *)(a2 - 12);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 4);
                  *(void *)unint64_t v10 = v47;
                  *(_DWORD *)(a2 - 4) = v116;
                  *(void *)(a2 - 12) = v110;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CBB2ACB8((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(a2 - 12));
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CBB2B03C(v10, v10 + 12, v10 + 24, a2 - 12);
                break;
              case 5:
                int v48 = (uint64_t *)(v10 + 12);
                int v49 = (uint64_t *)(v10 + 24);
                int v50 = (uint64_t *)(v10 + 36);
                uint64_t result = (unint64_t)sub_1CBB2B03C(v10, v10 + 12, v10 + 24, v10 + 36);
                if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v10 + 44))
                {
                  uint64_t v51 = *v50;
                  int v52 = *(_DWORD *)(v10 + 44);
                  int v53 = *(_DWORD *)(a2 - 4);
                  *int v50 = *(void *)(a2 - 12);
                  *(_DWORD *)(v10 + 44) = v53;
                  *(_DWORD *)(a2 - 4) = v52;
                  *(void *)(a2 - 12) = v51;
                  if (*(_DWORD *)(v10 + 44) < *(_DWORD *)(v10 + 32))
                  {
                    int v54 = *(_DWORD *)(v10 + 32);
                    uint64_t v55 = *v49;
                    *int v49 = *v50;
                    *(_DWORD *)(v10 + 32) = *(_DWORD *)(v10 + 44);
                    *int v50 = v55;
                    *(_DWORD *)(v10 + 44) = v54;
                    if (*(_DWORD *)(v10 + 32) < *(_DWORD *)(v10 + 20))
                    {
                      int v56 = *(_DWORD *)(v10 + 20);
                      uint64_t v57 = *v48;
                      *int v48 = *v49;
                      *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 32);
                      *int v49 = v57;
                      *(_DWORD *)(v10 + 32) = v56;
                      if (*(_DWORD *)(v10 + 20) < *(_DWORD *)(v10 + 8))
                      {
                        int v117 = *(_DWORD *)(v10 + 8);
                        uint64_t v111 = *(void *)v10;
                        *(void *)unint64_t v10 = *v48;
                        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 20);
                        *int v48 = v111;
                        *(_DWORD *)(v10 + 20) = v117;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 287)
          {
            unint64_t v58 = v10 + 12;
            BOOL v60 = v10 == a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = v10;
                do
                {
                  unsigned int v63 = *(_DWORD *)(v62 + 20);
                  unsigned int v64 = *(_DWORD *)(v62 + 8);
                  unint64_t v62 = v58;
                  if (v63 < v64)
                  {
                    uint64_t v65 = *(void *)v58;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      uint64_t v67 = v10 + v66;
                      *(void *)(v67 + 12) = *(void *)(v10 + v66);
                      *(_DWORD *)(v67 + 20) = *(_DWORD *)(v10 + v66 + 8);
                      if (!v66) {
                        break;
                      }
                      v66 -= 12;
                      if (v63 >= *(_DWORD *)(v67 - 4))
                      {
                        uint64_t v68 = v10 + v66 + 12;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v68 = v10;
LABEL_85:
                    *(void *)uint64_t v68 = v65;
                    *(_DWORD *)(v68 + 8) = v63;
                  }
                  unint64_t v58 = v62 + 12;
                  v61 += 12;
                }
                while (v62 + 12 != a2);
              }
            }
            else if (!v60)
            {
              do
              {
                unsigned int v102 = *(_DWORD *)(v9 + 20);
                unsigned int v103 = *(_DWORD *)(v9 + 8);
                unint64_t v9 = v58;
                if (v102 < v103)
                {
                  uint64_t v104 = *(void *)v58;
                  do
                  {
                    unint64_t v105 = v58;
                    uint64_t v106 = *(void *)(v58 - 12);
                    v58 -= 12;
                    *(void *)unint64_t v105 = v106;
                    *(_DWORD *)(v105 + 8) = *(_DWORD *)(v105 - 4);
                  }
                  while (v102 < *(_DWORD *)(v105 - 16));
                  *(void *)unint64_t v58 = v104;
                  *(_DWORD *)(v58 + 8) = v102;
                }
                unint64_t v58 = v9 + 12;
              }
              while (v9 + 12 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v69 = (unint64_t)(v12 - 2) >> 1;
              int64_t v70 = v69;
              do
              {
                int64_t v71 = v70;
                if (v69 >= v70)
                {
                  uint64_t v72 = (2 * v70) | 1;
                  unint64_t v73 = v10 + 12 * v72;
                  if (2 * v71 + 2 < v12)
                  {
                    unsigned int v74 = *(_DWORD *)(v10 + 12 * v72 + 8);
                    unsigned int v75 = *(_DWORD *)(v73 + 20);
                    v73 += 12 * (v74 < v75);
                    if (v74 < v75) {
                      uint64_t v72 = 2 * v71 + 2;
                    }
                  }
                  unsigned int v76 = *(_DWORD *)(v10 + 12 * v71 + 8);
                  if (*(_DWORD *)(v73 + 8) >= v76)
                  {
                    unint64_t v77 = v10 + 12 * v71;
                    uint64_t v78 = *(void *)v77;
                    do
                    {
                      unint64_t v79 = v77;
                      unint64_t v77 = v73;
                      uint64_t v80 = *(void *)v73;
                      uint64_t result = *(unsigned int *)(v77 + 8);
                      *(_DWORD *)(v79 + 8) = result;
                      *(void *)unint64_t v79 = v80;
                      if (v69 < v72) {
                        break;
                      }
                      uint64_t v81 = (2 * v72) | 1;
                      unint64_t v73 = v10 + 12 * v81;
                      uint64_t v82 = 2 * v72 + 2;
                      if (v82 < v12)
                      {
                        unsigned int v83 = *(_DWORD *)(v10 + 12 * v81 + 8);
                        unsigned int v84 = *(_DWORD *)(v73 + 20);
                        v73 += 12 * (v83 < v84);
                        if (v83 < v84) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t result = *(unsigned int *)(v73 + 8);
                      uint64_t v72 = v81;
                    }
                    while (result >= v76);
                    *(void *)unint64_t v77 = v78;
                    *(_DWORD *)(v77 + 8) = v76;
                  }
                }
                int64_t v70 = v71 - 1;
              }
              while (v71);
              do
              {
                uint64_t v85 = 0;
                int v118 = *(_DWORD *)(v10 + 8);
                uint64_t v112 = *(void *)v10;
                unint64_t v86 = v10;
                do
                {
                  uint64_t v87 = v85 + 1;
                  unint64_t v88 = v86 + 12 * (v85 + 1);
                  uint64_t v89 = (2 * v85) | 1;
                  uint64_t v90 = 2 * v85 + 2;
                  if (v90 < v12)
                  {
                    unsigned int v91 = *(_DWORD *)(v86 + 12 * v87 + 8);
                    unsigned int v92 = *(_DWORD *)(v88 + 20);
                    v88 += 12 * (v91 < v92);
                    if (v91 < v92) {
                      uint64_t v89 = v90;
                    }
                  }
                  uint64_t v93 = *(void *)v88;
                  *(_DWORD *)(v86 + 8) = *(_DWORD *)(v88 + 8);
                  *(void *)unint64_t v86 = v93;
                  unint64_t v86 = v88;
                  uint64_t v85 = v89;
                }
                while (v89 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                a2 -= 12;
                if (v88 == a2)
                {
                  *(_DWORD *)(v88 + 8) = v118;
                  *(void *)unint64_t v88 = v112;
                }
                else
                {
                  uint64_t v94 = *(void *)a2;
                  *(_DWORD *)(v88 + 8) = *(_DWORD *)(a2 + 8);
                  *(void *)unint64_t v88 = v94;
                  *(_DWORD *)(a2 + 8) = v118;
                  *(void *)a2 = v112;
                  uint64_t v95 = v88 - v10 + 12;
                  if (v95 >= 13)
                  {
                    unint64_t v96 = (v95 / 0xCuLL - 2) >> 1;
                    unsigned int v97 = *(_DWORD *)(v88 + 8);
                    if (*(_DWORD *)(v10 + 12 * v96 + 8) < v97)
                    {
                      uint64_t v98 = *(void *)v88;
                      do
                      {
                        unint64_t v99 = v88;
                        unint64_t v88 = v10 + 12 * v96;
                        uint64_t v100 = *(void *)v88;
                        *(_DWORD *)(v99 + 8) = *(_DWORD *)(v88 + 8);
                        *(void *)unint64_t v99 = v100;
                        if (!v96) {
                          break;
                        }
                        unint64_t v96 = (v96 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v10 + 12 * v96 + 8) < v97);
                      *(void *)unint64_t v88 = v98;
                      *(_DWORD *)(v88 + 8) = v97;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 12 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0x601)
          {
            sub_1CBB2ACB8((uint64_t *)v9, (uint64_t *)(v9 + 12 * ((unint64_t)v12 >> 1)), (uint64_t *)(a2 - 12));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (uint64_t *)(v9 + 12 * v13 - 12);
            sub_1CBB2ACB8((uint64_t *)(v9 + 12), v16, (uint64_t *)(a2 - 24));
            unsigned int v17 = (uint64_t *)(v9 + 12 + 4 * v15);
            sub_1CBB2ACB8((uint64_t *)(v9 + 24), v17, (uint64_t *)(a2 - 36));
            uint64_t result = (unint64_t)sub_1CBB2ACB8(v16, (uint64_t *)v14, v17);
            int v113 = *(_DWORD *)(v9 + 8);
            uint64_t v107 = *(void *)v9;
            int v18 = *(_DWORD *)(v14 + 8);
            *(void *)unint64_t v9 = *(void *)v14;
            *(_DWORD *)(v9 + 8) = v18;
            *(_DWORD *)(v14 + 8) = v113;
            *(void *)unint64_t v14 = v107;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CBB2ACB8((uint64_t *)(v9 + 12 * ((unint64_t)v12 >> 1)), (uint64_t *)v9, (uint64_t *)(a2 - 12));
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v19 = *(_DWORD *)(v9 + 8);
          if (*(_DWORD *)(v9 - 4) < v19) {
            goto LABEL_13;
          }
          if (v19 >= *(_DWORD *)(a2 - 4))
          {
            unint64_t v37 = v9 + 12;
            do
            {
              unint64_t v10 = v37;
              if (v37 >= a2) {
                break;
              }
              unsigned int v38 = *(_DWORD *)(v37 + 8);
              v37 += 12;
            }
            while (v19 >= v38);
          }
          else
          {
            unint64_t v35 = v9;
            do
            {
              unint64_t v10 = v35 + 12;
              unsigned int v36 = *(_DWORD *)(v35 + 20);
              v35 += 12;
            }
            while (v19 >= v36);
          }
          unint64_t v39 = a2;
          if (v10 < a2)
          {
            unint64_t v40 = a2;
            do
            {
              unint64_t v39 = v40 - 12;
              unsigned int v41 = *(_DWORD *)(v40 - 4);
              v40 -= 12;
            }
            while (v19 < v41);
          }
          uint64_t v42 = *(void *)v9;
          while (v10 < v39)
          {
            int v115 = *(_DWORD *)(v10 + 8);
            uint64_t v109 = *(void *)v10;
            uint64_t v43 = *(void *)v39;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v39 + 8);
            *(void *)unint64_t v10 = v43;
            *(_DWORD *)(v39 + 8) = v115;
            *(void *)unint64_t v39 = v109;
            do
            {
              unsigned int v44 = *(_DWORD *)(v10 + 20);
              v10 += 12;
            }
            while (v19 >= v44);
            do
            {
              unsigned int v45 = *(_DWORD *)(v39 - 4);
              v39 -= 12;
            }
            while (v19 < v45);
          }
          BOOL v4 = v10 - 12 >= v9;
          BOOL v5 = v10 - 12 == v9;
          if (v10 - 12 != v9)
          {
            uint64_t v46 = *(void *)(v10 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
            *(void *)unint64_t v9 = v46;
          }
          a4 = 0;
          *(void *)(v10 - 12) = v42;
          *(_DWORD *)(v10 - 4) = v19;
        }
        unsigned int v19 = *(_DWORD *)(v9 + 8);
LABEL_13:
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)v9;
        do
        {
          unsigned int v22 = *(_DWORD *)(v9 + v20 + 20);
          v20 += 12;
        }
        while (v22 < v19);
        unint64_t v23 = v9 + v20;
        unint64_t v24 = a2;
        if (v20 == 12)
        {
          unint64_t v27 = a2;
          while (v23 < v27)
          {
            unint64_t v25 = v27 - 12;
            unsigned int v28 = *(_DWORD *)(v27 - 4);
            v27 -= 12;
            if (v28 < v19) {
              goto LABEL_23;
            }
          }
          unint64_t v25 = v27;
        }
        else
        {
          do
          {
            unint64_t v25 = v24 - 12;
            unsigned int v26 = *(_DWORD *)(v24 - 4);
            v24 -= 12;
          }
          while (v26 >= v19);
        }
LABEL_23:
        unint64_t v10 = v23;
        if (v23 < v25)
        {
          unint64_t v29 = v25;
          do
          {
            int v114 = *(_DWORD *)(v10 + 8);
            uint64_t v108 = *(void *)v10;
            uint64_t v30 = *(void *)v29;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v29 + 8);
            *(void *)unint64_t v10 = v30;
            *(_DWORD *)(v29 + 8) = v114;
            *(void *)unint64_t v29 = v108;
            do
            {
              unsigned int v31 = *(_DWORD *)(v10 + 20);
              v10 += 12;
            }
            while (v31 < v19);
            do
            {
              unsigned int v32 = *(_DWORD *)(v29 - 4);
              v29 -= 12;
            }
            while (v32 >= v19);
          }
          while (v10 < v29);
        }
        if (v10 - 12 != v9)
        {
          uint64_t v33 = *(void *)(v10 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 4);
          *(void *)unint64_t v9 = v33;
        }
        *(void *)(v10 - 12) = v21;
        *(_DWORD *)(v10 - 4) = v19;
        if (v23 >= v25) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1CBB2A3F4(v9, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = sub_1CBB2ADA8(v9, v10 - 12);
      uint64_t result = sub_1CBB2ADA8(v10, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 12;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CBB2ACB8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  unsigned int v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      int v8 = *((_DWORD *)a2 + 2);
      uint64_t v9 = *a2;
      int v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        int v11 = *((_DWORD *)result + 2);
        uint64_t v12 = *result;
        int v13 = *((_DWORD *)a2 + 2);
        *uint64_t result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      int v14 = *((_DWORD *)result + 2);
      uint64_t v15 = *result;
      int v16 = *((_DWORD *)a2 + 2);
      *uint64_t result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
      int v5 = *((_DWORD *)a2 + 2);
      uint64_t v6 = *a2;
      int v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      int v5 = *((_DWORD *)result + 2);
      uint64_t v6 = *result;
      int v7 = *((_DWORD *)a3 + 2);
      *uint64_t result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1CBB2ADA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        uint64_t v7 = *(void *)a1;
        int v8 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(void *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_1CBB2ACB8((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_1CBB2B03C(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      int v18 = (uint64_t *)(a1 + 12);
      unsigned int v19 = (uint64_t *)(a1 + 24);
      uint64_t v20 = (uint64_t *)(a1 + 36);
      sub_1CBB2B03C(a1, a1 + 12, a1 + 24, a1 + 36);
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 44))
      {
        int v21 = *(_DWORD *)(a1 + 44);
        uint64_t v22 = *v20;
        int v23 = *(_DWORD *)(a2 - 4);
        *uint64_t v20 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v23;
        *(void *)(a2 - 12) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        if (*(_DWORD *)(a1 + 44) < *(_DWORD *)(a1 + 32))
        {
          int v24 = *(_DWORD *)(a1 + 32);
          uint64_t v25 = *v19;
          *unsigned int v19 = *v20;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *uint64_t v20 = v25;
          *(_DWORD *)(a1 + 44) = v24;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 20))
          {
            int v26 = *(_DWORD *)(a1 + 20);
            uint64_t v27 = *v18;
            *int v18 = *v19;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *unsigned int v19 = v27;
            *(_DWORD *)(a1 + 32) = v26;
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 8))
            {
              int v28 = *(_DWORD *)(a1 + 8);
              uint64_t v29 = *(void *)a1;
              *(void *)a1 = *v18;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *int v18 = v29;
              *(_DWORD *)(a1 + 20) = v28;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 24;
      sub_1CBB2ACB8((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v10 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(void *)(v16 + 36) = *(void *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24) {
          break;
        }
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          uint64_t v17 = a1 + v15 + 36;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8) {
        return v10 + 12 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CBB2B03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CBB2ACB8((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    int v9 = *(_DWORD *)(a3 + 8);
    uint64_t v10 = *(void *)a3;
    int v11 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(void *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      int v12 = *(_DWORD *)(a2 + 8);
      uint64_t v13 = *(void *)a2;
      int v14 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(void *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        int v15 = *(_DWORD *)(a1 + 8);
        uint64_t v16 = *(void *)a1;
        int v17 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(void *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_1CBB2B10C(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 8) > *(_DWORD *)(*v10 + 8))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                BOOL result = sub_1CBB2B838(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                BOOL result = sub_1CBB2BACC(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                unsigned int v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                BOOL result = sub_1CBB2BACC(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 8) > *(_DWORD *)(v45 + 8))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  int v48 = *(_DWORD *)(*v43 + 8);
                  if (v48 > *(_DWORD *)(*v42 + 8))
                  {
                    *uint64_t v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 > *(_DWORD *)(*v41 + 8))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 > *(_DWORD *)(*v10 + 8))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  uint64_t v55 = v51;
                  int v58 = *(_DWORD *)(v56 + 8);
                  if (v58 > *(_DWORD *)(v57 + 8))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        uint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 > *(_DWORD *)(v57 + 8));
                    uint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *uint64_t v61 = v56;
                  }
                  uint64_t v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                int v9 = v51;
                int v92 = *(_DWORD *)(v90 + 8);
                if (v92 > *(_DWORD *)(v91 + 8))
                {
                  do
                  {
                    uint64_t *v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 > *(_DWORD *)(v91 + 8));
                  uint64_t *v51 = v90;
                }
                uint64_t v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 8) > *(_DWORD *)(v66[1] + 8))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  BOOL result = &v10[v64];
                  uint64_t v68 = *result;
                  int v69 = *(_DWORD *)(*result + 8);
                  if (*(_DWORD *)(v67 + 8) <= v69)
                  {
                    do
                    {
                      int64_t v70 = v66;
                      *BOOL result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 8) > *(_DWORD *)(v66[1] + 8))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      BOOL result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 8) <= v69);
                    *int64_t v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                unsigned int v75 = v10;
                do
                {
                  unsigned int v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  unint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    BOOL result = (uint64_t *)*(unsigned int *)(v78 + 8);
                    if ((int)result > *(_DWORD *)(v77[1] + 8))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  *unsigned int v75 = v78;
                  unsigned int v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *unint64_t v77 = v74;
                }
                else
                {
                  *unint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    unsigned int v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    int v87 = *(_DWORD *)(*v77 + 8);
                    if (*(_DWORD *)(*v84 + 8) > v87)
                    {
                      do
                      {
                        unint64_t v88 = v84;
                        *unint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        unsigned int v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        unint64_t v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 8) > v87);
                      *unint64_t v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          int v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CBB2B838(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CBB2B838(v9 + 1, v14 - 1, a2 - 2);
            sub_1CBB2B838(v9 + 2, &v9[v13 + 1], a2 - 3);
            BOOL result = sub_1CBB2B838(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *int v9 = *v14;
            *int v14 = v15;
          }
          else
          {
            BOOL result = sub_1CBB2B838(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(v16 + 8);
          if (*(_DWORD *)(*(v9 - 1) + 8) > v17) {
            goto LABEL_13;
          }
          if (v17 <= *(_DWORD *)(*(a2 - 1) + 8))
          {
            unsigned int v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 <= *(_DWORD *)(*v10 + 8));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 <= *(_DWORD *)(v30 + 8));
          }
          unsigned int v32 = a2;
          if (v10 < a2)
          {
            unsigned int v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 > *(_DWORD *)(v33 + 8));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              *unsigned int v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 <= *(_DWORD *)(v36 + 8));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 > *(_DWORD *)(v37 + 8));
            }
            while (v10 < v32);
          }
          unsigned int v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v38;
          }
          a4 = 0;
          *unsigned int v38 = v16;
        }
        int v17 = *(_DWORD *)(v16 + 8);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 8) > v17);
        uint64_t v20 = &v9[v18];
        int v21 = a2;
        if (v18 == 1)
        {
          int v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 8) <= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 8) <= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            *uint64_t v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 8) > v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 8) <= v17);
          }
          while (v10 < v25);
        }
        int v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *int v9 = *v28;
        }
        *int v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        BOOL result = (uint64_t *)sub_1CBB2B10C(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CBB2B8C0(v9, v10 - 1);
      BOOL result = (uint64_t *)sub_1CBB2B8C0(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CBB2B838(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  int v5 = *(_DWORD *)(*a2 + 8);
  int v6 = *(_DWORD *)(*result + 8);
  uint64_t v7 = *a3;
  int v8 = *(_DWORD *)(*a3 + 8);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 8) > *(_DWORD *)(*result + 8))
      {
        *BOOL result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *BOOL result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) <= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *BOOL result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CBB2B8C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 8) > *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CBB2B838(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CBB2BACC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CBB2BACC(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) > *(_DWORD *)(v22 + 8))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        int v25 = *(_DWORD *)(*v20 + 8);
        if (v25 > *(_DWORD *)(*v19 + 8))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 > *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 > *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      sub_1CBB2B838(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    int v14 = *(_DWORD *)(*v9 + 8);
    if (v14 > *(_DWORD *)(*v8 + 8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_DWORD *)(v13 + 8))
        {
          int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int v17 = a1;
LABEL_13:
      uint64_t *v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CBB2BACC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CBB2B838(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) > *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) > *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) > *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CBB2BB64(uint64_t result, unsigned int *a2, int a3, int a4)
{
  uint64_t v6 = result;
  unsigned int v7 = *a2;
  int v8 = (*a2 >> 8) & 0xFFF;
  unsigned int v9 = v8 - 25;
  if ((v8 - 25) >= 0x10) {
    int v10 = 16;
  }
  else {
    int v10 = 32;
  }
  if (v9 >= 0x10) {
    unsigned int v9 = v8 - 1;
  }
  if (v8) {
    BOOL v11 = (v8 - 25) >= 0x10;
  }
  else {
    BOOL v11 = 0;
  }
  if (v8) {
    int v12 = v10;
  }
  else {
    int v12 = 0;
  }
  if (v8) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = 0;
  }
  if ((v7 & 0x1000000) != 0
    && (uint64_t v14 = *(void *)(*(void *)(*((void *)a2 + 1) + 24) + 32),
        uint64_t v15 = *(void *)(v14 + 16),
        *(unsigned char *)(v15 + 362)))
  {
    int v46 = v12;
    uint64_t v16 = *(void *)(v14 + 40);
    uint64_t v17 = a2[1];
    if ((v17 & 0x80000000) != 0) {
      uint64_t v18 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v18 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v17);
    }
    uint64_t v20 = *v18;
    if (*v18)
    {
      while ((*(_DWORD *)v20 & 0x81000000) != 0)
      {
        uint64_t v20 = *(void *)(v20 + 24);
        if (!v20) {
          goto LABEL_24;
        }
      }
      BOOL v42 = v11;
      uint64_t v44 = v15;
      uint64_t v39 = v16;
      unsigned int v41 = (unsigned char *)(v15 + 305);
      uint64_t v21 = *(void *)(v20 + 8);
LABEL_26:
      BOOL result = sub_1CBE52E8C(**(unsigned __int16 **)(v21 + 16));
      if ((result & 0xFF00000000) == 0
        || (result - 164) < 4
        || (result - 78) < 3
        || *(unsigned char *)(v44 + 303)
        || *v41)
      {
        uint64_t v16 = v39;
        while (1)
        {
          uint64_t v20 = *(void *)(v20 + 24);
          if (!v20) {
            break;
          }
          if ((*(_DWORD *)v20 & 0x81000000) == 0 && *(void *)(v20 + 8) != v21)
          {
            uint64_t v21 = *(void *)(v20 + 8);
            goto LABEL_26;
          }
        }
        int v19 = 1;
        BOOL v11 = v42;
        uint64_t v15 = v44;
      }
      else
      {
        int v19 = 0;
        BOOL v11 = v42;
        uint64_t v15 = v44;
        uint64_t v16 = v39;
      }
    }
    else
    {
LABEL_24:
      unsigned int v41 = (unsigned char *)(v15 + 305);
      int v19 = 1;
    }
    if ((v17 & 0x80000000) != 0) {
      uint64_t v22 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v22 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v17);
    }
    uint64_t v23 = *v22;
    if (*v22)
    {
      while ((*(_DWORD *)v23 & 0x81000000) != 0)
      {
        uint64_t v23 = *(void *)(v23 + 24);
        if (!v23) {
          goto LABEL_58;
        }
      }
      uint64_t v45 = v15;
      int v40 = a4;
      uint64_t v24 = *(void *)(v23 + 8);
      BOOL result = sub_1CBE52E8C(**(unsigned __int16 **)(v24 + 16));
      if ((result & 0xFF00000000) != 0)
      {
        while (2)
        {
          if ((result - 164) >= 4 && (result - 78) >= 3 && !*(unsigned char *)(v45 + 303) && !*v41)
          {
            BOOL v43 = v11;
            while (1)
            {
              uint64_t v23 = *(void *)(v23 + 24);
              if (!v23)
              {
                a4 = v40;
                LOBYTE(v11) = v43;
                goto LABEL_58;
              }
              if ((*(_DWORD *)v23 & 0x81000000) == 0)
              {
                uint64_t v25 = *(void *)(v23 + 8);
                if (v25 != v24) {
                  break;
                }
              }
            }
            BOOL result = sub_1CBE52E8C(**(unsigned __int16 **)(v25 + 16));
            uint64_t v24 = v25;
            BOOL v11 = v43;
            if ((result & 0xFF00000000) != 0) {
              continue;
            }
          }
          break;
        }
      }
      if ((v19 & 1) == 0) {
        llvm::report_fatal_error((llvm *)"IR Reg used by both PBETPU and FFBRIA inst kinds. Unsupported interleave", (const llvm::Twine *)1);
      }
      int v19 = 1;
      a4 = v40;
    }
LABEL_58:
    int v12 = v46;
  }
  else
  {
    int v19 = 0;
  }
  unsigned int v26 = v13 * v12;
  if (!v8) {
    unsigned int v26 = 0;
  }
  BOOL v27 = a3 != 81;
  unsigned int v28 = v26 >> 5;
  unsigned int v29 = v26 >> 3;
  BOOL v30 = (v27 & v19) == 0;
  if ((v27 & v19) != 0) {
    unsigned int v31 = v28;
  }
  else {
    unsigned int v31 = 0;
  }
  unsigned int v32 = v31 + a4;
  if (v30) {
    int v33 = a3;
  }
  else {
    int v33 = 81;
  }
  if (!v30) {
    LOWORD(v29) = 0;
  }
  unsigned int v34 = v32 >> 31;
  if (v8 != 0 && v11) {
    __int16 v35 = 130;
  }
  else {
    __int16 v35 = 129;
  }
  __int16 v36 = v29 + v35;
  int v37 = v32 & 0x7FFFFFFF;
  unsigned int v38 = *(_DWORD *)v6 & 0xFFF00000;
  *(void *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = v33;
  *(_DWORD *)(v6 + 24) = 0;
  *(_DWORD *)uint64_t v6 = v38 & 0xFFF000FF | ((v36 & 0xFFF | (v7 >> 20) & 0x100 | ((_WORD)v34 << 9) & 0xFFF) << 8) | 7;
  *(_DWORD *)(v6 + 4) = v37;
  return result;
}

unint64_t sub_1CBB2BE90(unint64_t result, uint64_t a2, long long *a3)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    uint64_t v11 = a2;
    long long v7 = a3[1];
    long long v12 = *a3;
    long long v13 = v7;
    BOOL result = sub_1CBB2BF28(result, (unint64_t)&v11);
    uint64_t v8 = *(void *)v3 + 40 * *(unsigned int *)(v3 + 8);
    uint64_t v9 = *(void *)(result + 32);
    long long v10 = *(_OWORD *)(result + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)result;
    *(_OWORD *)(v8 + 16) = v10;
    *(void *)(v8 + 32) = v9;
  }
  else
  {
    uint64_t v5 = *(void *)result + 40 * v4;
    *(void *)uint64_t v5 = a2;
    long long v6 = *a3;
    *(_OWORD *)(v5 + 24) = a3[1];
    *(_OWORD *)(v5 + 8) = v6;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

unint64_t sub_1CBB2BF28(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v3 = *(void *)a1 + 40 * v2;
    if (*(void *)a1 > a2 || v3 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

void sub_1CBB2BFA0()
{
}

uint64_t sub_1CBB2BFDC()
{
  v4.n128_u64[0] = (unint64_t)"Densely allocate IPR regs";
  v4.n128_u64[1] = 25;
  unint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 2;
  sub_1CD420D5C(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCC0D30, &dword_1CB82C000);
}

uint64_t sub_1CBB2C050(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    int v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t result = *v2;
  if (*v2 && (*(unsigned char *)(result + 3) & 1) == 0)
  {
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 3)) {
        return *(void *)(result + 24);
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CBB2C0A8(uint64_t result, int a2)
{
  uint64_t v2 = a2 & 0x7FFFFFFF;
  uint64_t v3 = *(void *)(result + 408);
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(v4 + 104);
    if (v6)
    {
      do
      {
        uint64_t v12 = *(void *)(v6 + 96);
        uint64_t v13 = *(void *)(v6 + 104);
        *(void *)(v6 + 96) = 0;
        if (v12)
        {
          uint64_t v17 = v2;
          uint64_t v15 = v12;
          sub_1CB833A08(v12, *(void **)(v12 + 8));
          uint64_t v16 = v15;
          uint64_t v2 = v17;
          MEMORY[0x1D25D9CE0](v16, 0x1020C4062D53EE8);
        }
        uint64_t v14 = *(void **)(v6 + 64);
        if (v14 != (void *)(v6 + 80)) {
          free(v14);
        }
        if (*(void *)v6 != v6 + 16) {
          free(*(void **)v6);
        }
        uint64_t v6 = v13;
      }
      while (v13);
    }
    uint64_t v7 = *(void *)(v4 + 96);
    *(void *)(v4 + 96) = 0;
    *(void *)(v4 + 104) = 0;
    if (v7)
    {
      uint64_t v9 = v2;
      uint64_t v10 = v7;
      sub_1CB833A08(v7, *(void **)(v7 + 8));
      uint64_t v11 = v10;
      uint64_t v2 = v9;
      MEMORY[0x1D25D9CE0](v11, 0x1020C4062D53EE8);
    }
    uint64_t v8 = *(void **)(v4 + 64);
    if (v8 != (void *)(v4 + 80)) {
      free(v8);
    }
    if (*(void *)v4 != v4 + 16) {
      free(*(void **)v4);
    }
    uint64_t result = MEMORY[0x1D25D9CE0](v4, 0x10A0C408DA535C6);
    uint64_t v3 = *(void *)(v5 + 408);
  }
  *(void *)(v3 + 8 * v2) = 0;
  return result;
}

uint64_t sub_1CBB2C200(void *a1, void *a2)
{
  v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  a1[31] = v4;
  a1[32] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  a1[33] = a2[5];
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::LiveIntervals::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  a1[34] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::LiveIntervals::ID);
  uint64_t v9 = a2 + 40;
  for (uint64_t i = a2[41]; (void *)i != v9; uint64_t i = *(void *)(i + 8))
  {
    for (uint64_t j = *(void *)(i + 56); j != i + 48; uint64_t j = *(void *)(j + 8))
    {
      int v12 = **(unsigned __int16 **)(j + 16);
      uint64_t v13 = sub_1CBE52E8C(v12);
      if ((v13 & 0xFF00000000) != 0 && (v13 == 85 || v13 == 18))
      {
        uint64_t v23 = *(unsigned int *)(*(void *)(j + 32) + 32 * sub_1CBDA6464(v12, 0x3Du) + 4);
        uint64_t v24 = a1[33];
        if ((v23 & 0x80000000) != 0) {
          uint64_t v25 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v25 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v23);
        }
        uint64_t v26 = *v25;
        if (!v26)
        {
LABEL_35:
          unsigned int VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v24, *(void *)(*(void *)(v24 + 24) + 16 * (v23 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, "", 0);
          BOOL v53 = v55;
          uint64_t v54 = 0x400000000;
          uint64_t v28 = sub_1CBB2C050(a1[33], v23);
          unsigned int v30 = 0;
          if (v28 != v29)
          {
            uint64_t v31 = v28;
            do
            {
              if (v30 >= HIDWORD(v54)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v53 + v30) = *(void *)(v31 + 8);
              unsigned int v30 = v54 + 1;
              LODWORD(v54) = v54 + 1;
              uint64_t v32 = v31;
              while (1)
              {
                uint64_t v32 = *(void *)(v32 + 24);
                if (!v32) {
                  goto LABEL_44;
                }
                if ((*(unsigned char *)(v32 + 3) & 1) == 0) {
                  break;
                }
                if (*(void *)(v32 + 8) != *(void *)(v31 + 8)) {
                  goto LABEL_44;
                }
              }
              uint64_t v32 = 0;
LABEL_44:
              uint64_t v31 = v32;
            }
            while (v32 != v29);
          }
          int v49 = v23;
          if (v30)
          {
            int v33 = (uint64_t *)v53;
            uint64_t v34 = 8 * v30;
            do
            {
              uint64_t v35 = *v33;
              if (**(_WORD **)(*v33 + 16) != 19)
              {
                unsigned int v47 = **(_DWORD **)(v35 + 32);
                unsigned int v46 = llvm::MachineRegisterInfo::createVirtualRegister(a1[33], (uint64_t)&off_1E66AF580, "", 0);
                llvm::MachineOperand::setReg(*(void *)(v35 + 32), v46);
                **(_DWORD **)(v35 + 32) &= 0xFFF000FF;
                **(_DWORD **)(v35 + 32) &= ~0x10000000u;
                sub_1CBA05F5C((uint64_t)v52, v35);
                uint64_t v44 = *(void **)(v35 + 8);
                v52[5] = *(void **)(v35 + 24);
                v52[6] = v44;
                v51[0] = v23;
                v51[2] = 1;
                v50[0] = v46;
                v50[4] = 0;
                sub_1CC73695C((uint64_t)v52, (uint64_t)v51, (uint64_t)v50);
                **(_DWORD **)(v45 + 32) = **(_DWORD **)(v45 + 32) & 0xFFF000FF | (((v47 >> 8) & 0xFFF) << 8);
                **(_DWORD **)(v45 + 32) = **(_DWORD **)(v45 + 32) & 0xEFFFFFFF | (((v47 >> 28) & 1) << 28);
                sub_1CB914C88(*(void *)(a1[34] + 288), v45, 0);
                sub_1CBB2C8B4(a1[34], v46);
              }
              ++v33;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v36 = sub_1CBB2C050(a1[33], v23);
          unsigned int v37 = VirtualRegister;
          uint64_t v48 = v38;
          if (v36 != v38)
          {
            uint64_t v39 = v36;
            uint64_t v40 = v36;
            do
            {
              unsigned int v41 = *(uint64_t **)(v39 + 8);
              unint64_t v42 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(i + 32), (const llvm::MachineInstr *)v41);
              llvm::MachineInstr::substituteRegister(v42, v49, v37, 0, (void *)a1[32]);
              llvm::MachineBasicBlock::insert(v41[3], (uint64_t)v41, v42);
              sub_1CB914C88(*(void *)(a1[34] + 288), v42, 0);
              while (1)
              {
                uint64_t v40 = *(void *)(v40 + 24);
                if (!v40) {
                  goto LABEL_57;
                }
                if ((*(unsigned char *)(v40 + 3) & 1) == 0) {
                  break;
                }
                if (*(void *)(v40 + 8) != *(void *)(v39 + 8)) {
                  goto LABEL_57;
                }
              }
              uint64_t v40 = 0;
LABEL_57:
              uint64_t v39 = v40;
            }
            while (v40 != v48);
          }
          llvm::MachineInstr::substituteRegister(j, v49, v37, 0, (void *)a1[32]);
          sub_1CBB2C8B4(a1[34], v37);
        }
        if ((*(unsigned char *)(v26 + 3) & 0x81) == 0) {
          goto LABEL_33;
        }
        do
        {
          uint64_t v26 = *(void *)(v26 + 24);
          if (!v26) {
            goto LABEL_35;
          }
        }
        while ((*(_DWORD *)v26 & 0x81000000) != 0);
LABEL_33:
        while (1)
        {
          uint64_t v26 = *(void *)(v26 + 24);
          if (!v26) {
            break;
          }
          if ((*(_DWORD *)v26 & 0x81000000) == 0) {
            goto LABEL_35;
          }
        }
      }
      if ((*(unsigned char *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          uint64_t j = *(void *)(j + 8);
      }
    }
  }
  uint64_t v15 = a1[33];
  int v16 = *(_DWORD *)(v15 + 32);
  if (v16)
  {
    char v17 = 0;
    int v18 = 0;
    uint64_t v19 = a1[34];
    unsigned int v20 = *(_DWORD *)(v19 + 416);
    do
    {
      uint64_t v21 = v18 & 0x7FFFFFFF;
      if (v21 < v20)
      {
        if (*(void *)(*(void *)(v19 + 408) + 8 * v21))
        {
          uint64_t v22 = (void *)(*(void *)(v15 + 24) + 16 * v21);
          if ((__int16 ***)(*v22 & 0xFFFFFFFFFFFFFFF8) == &off_1E66ABDD8)
          {
            *uint64_t v22 = &off_1E66AF580;
            char v17 = 1;
          }
        }
      }
      ++v18;
    }
    while (v16 != v18);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

void sub_1CBB2C7FC(uint64_t a1)
{
}

const char *sub_1CBB2C8A4()
{
  return "AGX3 IR canonicalizer pass";
}

void sub_1CBB2C8B4(uint64_t a1, int a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 416);
  BOOL v3 = (a2 & 0x7FFFFFFFu) >= v2;
  unint64_t v4 = (a2 & 0x7FFFFFFF) - v2;
  if (v3) {
    sub_1CB9153B8(a1 + 408, v4 + 1, *(void *)(a1 + 424));
  }
  operator new();
}

BOOL sub_1CBB2C97C(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  v108[16] = *MEMORY[0x1E4F143B8];
  uint64_t v106 = v108;
  uint64_t v107 = 0x1000000000;
  uint64_t v100 = 1;
  int64x2_t v101 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v102 = v101;
  unsigned int v103 = v105;
  uint64_t v104 = 0x400000000;
  uint64_t v10 = a1 + 48;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 40);
  unint64_t v13 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v13 || (*(unsigned char *)v13 & 4) == 0)
  {
    while ((*(_WORD *)(v13 + 44) & 4) != 0)
      unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = &unk_1CD91C000;
  if (v13 != v10)
  {
    a4 = &v103;
    a5 = (void *)(a2 + 408);
    a3 = a2 + 312;
    a6 = 0x3FFFFFFFLL;
    a7 = 2139095040;
    a8 = 24;
    a2 = 8642560;
    while (1)
    {
      if (**(_WORD **)(v13 + 16) != 19) {
        goto LABEL_18;
      }
      uint64_t v15 = *(_DWORD **)(v13 + 32);
      int v16 = v15[1];
      if ((v16 & 0x80000000) == 0 || (*v15 & 0xFFF00) != 0) {
        goto LABEL_18;
      }
      unint64_t v17 = v16 & 0x7FFFFFFF;
      int v18 = (__int16 ***)(*(void *)(*(void *)(v12 + 24) + 16 * v17) & 0xFFFFFFFFFFFFFFF8);
      if (v18 != &off_1E66AF580 && v18 != (__int16 ***)&off_1E66AF970) {
        goto LABEL_18;
      }
      int v20 = v15[9];
      if ((v20 & 0x80000000) == 0 || (v15[8] & 0xFFF00) != 0) {
        goto LABEL_18;
      }
      uint64_t v21 = v20 & 0x7FFFFFFF;
      unint64_t v22 = *(unsigned int *)(v8 + 416);
      if ((v20 & 0x7FFFFFFFu) >= v22)
      {
        sub_1CB9153B8((uint64_t)a5, v21 - v22 + 1, *(void *)(v8 + 424));
LABEL_84:
        operator new();
      }
      uint64_t v23 = *(void *)(*a5 + 8 * v21);
      if (!v23) {
        goto LABEL_84;
      }
      if (v17 >= v22)
      {
        sub_1CB9153B8((uint64_t)a5, v17 - v22 + 1, *(void *)(v8 + 424));
LABEL_86:
        operator new();
      }
      uint64_t v24 = *(void *)(*a5 + 8 * v17);
      if (!v24) {
        goto LABEL_86;
      }
      uint64_t v25 = *(unsigned int *)(v24 + 72);
      if (!v25) {
        goto LABEL_18;
      }
      uint64_t v26 = *(void *)(v24 + 64);
      uint64_t v27 = 8 * v25;
      while ((*(unsigned char *)(*(void *)v26 + 8) & 6) != 0)
      {
        v26 += 8;
        v27 -= 8;
        if (!v27) {
          goto LABEL_18;
        }
      }
      __int16 v28 = *(_WORD *)(v13 + 44);
      unint64_t v29 = v13;
      if ((v28 & 4) != 0)
      {
        do
          unint64_t v29 = *(void *)v29 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v29 + 44) & 4) != 0);
      }
      unint64_t v30 = v13;
      if ((v28 & 8) != 0)
      {
        do
          unint64_t v30 = *(void *)(v30 + 8);
        while ((*(_WORD *)(v30 + 44) & 8) != 0);
      }
      unint64_t v31 = *(void *)(v30 + 8);
      if (v29 != v31)
      {
        while (1)
        {
          unsigned int v32 = **(unsigned __int16 **)(v29 + 16);
          BOOL v33 = v32 > 0x17;
          int v34 = (1 << v32) & 0x83E000;
          if (v33 || v34 == 0) {
            break;
          }
          unint64_t v29 = *(void *)(v29 + 8);
          if (v29 == v31)
          {
            unint64_t v29 = v31;
            break;
          }
        }
      }
      uint64_t v36 = *(void *)(v8 + 288);
      uint64_t v37 = *(void *)(v36 + 368);
      uint64_t v38 = *(unsigned int *)(v36 + 384);
      if (v38)
      {
        LODWORD(v39) = ((v29 >> 4) ^ (v29 >> 9)) & (v38 - 1);
        uint64_t v40 = (uint64_t *)(v37 + 16 * v39);
        uint64_t v41 = *v40;
        if (v29 == *v40) {
          goto LABEL_50;
        }
        int v42 = 1;
        while (v41 != -4096)
        {
          int v43 = v39 + v42++;
          uint64_t v39 = v43 & (v38 - 1);
          uint64_t v41 = *(void *)(v37 + 16 * v39);
          if (v29 == v41)
          {
            uint64_t v40 = (uint64_t *)(v37 + 16 * v39);
            goto LABEL_50;
          }
        }
      }
      uint64_t v40 = (uint64_t *)(v37 + 16 * v38);
LABEL_50:
      unint64_t v44 = v40[1] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v45 = *(unsigned int *)(v23 + 8);
      unsigned int v46 = *(void **)v23;
      if (!v45)
      {
        LODWORD(v45) = 0;
LABEL_61:
        uint64_t v50 = &v46[3 * v45];
        goto LABEL_62;
      }
      uint64_t v47 = v46[3 * v45 - 2];
      unsigned int v48 = *(_DWORD *)(v44 + 24);
      unsigned int v49 = (v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v50 = v46;
      unint64_t v51 = v45;
      if (v48 >= v49) {
        goto LABEL_61;
      }
      do
      {
        unint64_t v52 = v51 >> 1;
        uint64_t v53 = v50[3 * (v51 >> 1) + 1];
        LODWORD(v53) = (v53 >> 1) & 3 | *(_DWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 24);
        v51 -= (v51 >> 1) + 1;
        BOOL v54 = v48 >= v53;
        if (v48 >= v53) {
          unint64_t v55 = v52 + 1;
        }
        else {
          unint64_t v55 = 0;
        }
        v50 += 3 * v55;
        if (!v54) {
          unint64_t v51 = v52;
        }
      }
      while (v51);
LABEL_62:
      uint64_t v56 = &v46[3 * v45];
      if (v50 != v56
        && ((*v50 >> 1) & 3 | *(_DWORD *)((*v50 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v44 + 24))
      {
        uint64_t v57 = v50[2];
        unint64_t v58 = v50[1] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v59 = v50 + 3;
        if (v44 == v58 && v59 == v56)
        {
          if (v57)
          {
            uint64_t v61 = *(void *)(v57 + 8);
LABEL_69:
            if ((v61 & 6) != 4) {
              goto LABEL_18;
            }
            uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (**(unsigned __int16 **)(v62 + 16) - 517 > 1) {
              goto LABEL_18;
            }
            uint64_t v98 = *(void *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
            uint64_t v63 = a3;
            int64_t v64 = a5;
            uint64_t v65 = a4;
            uint64_t v66 = v14;
            if (v107 >= (unint64_t)HIDWORD(v107)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v106 + v107) = v13;
            LODWORD(v107) = v107 + 1;
            unint64_t v99 = 0;
            char v67 = sub_1CBB2E920((uint64_t)&v100, v62, &v99);
            uint64_t v68 = v98;
            uint64_t v14 = v66;
            a4 = v65;
            a5 = v64;
            a3 = v63;
            a6 = 0x3FFFFFFFLL;
            a7 = 2139095040;
            a8 = 24;
            a2 = 8642560;
            if (v67) {
              goto LABEL_18;
            }
            if (v100) {
              unsigned int v69 = 4;
            }
            else {
              unsigned int v69 = v101.u32[2];
            }
            if (4 * (v100 >> 1) + 4 >= 3 * v69)
            {
              v69 *= 2;
            }
            else if (v69 + ~(v100 >> 1) - HIDWORD(v100) > v69 >> 3)
            {
LABEL_77:
              LODWORD(v100) = v100 + 2;
              a2 = 8642560;
              if (*v99 != -4096) {
                --HIDWORD(v100);
              }
              *unint64_t v99 = v68;
              if (v104 >= (unint64_t)HIDWORD(v104)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v103 + v104) = v68;
              LODWORD(v104) = v104 + 1;
              goto LABEL_18;
            }
            sub_1CBB2E9CC((uint64_t)&v100, v69);
            unint64_t v99 = 0;
            sub_1CBB2E920((uint64_t)&v100, v98, &v99);
            uint64_t v68 = v98;
            a8 = 24;
            a7 = 2139095040;
            a6 = 0x3FFFFFFFLL;
            a3 = v63;
            a5 = v64;
            a4 = v65;
            uint64_t v14 = &unk_1CD91C000;
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v61 = *(void *)(v57 + 8);
          if (v61 != v44) {
            goto LABEL_69;
          }
        }
      }
LABEL_18:
      unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
      if (!v13 || (*(unsigned char *)v13 & 4) == 0)
      {
        while ((*(_WORD *)(v13 + 44) & 4) != 0)
          unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v13 == v10)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        break;
      }
    }
  }
  uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t, void **, void *, uint64_t, uint64_t, uint64_t))(**(void **)(v11 + 16) + 104))(*(void *)(v11 + 16), a2, a3, a4, a5, a6, a7, a8);
  if (v107)
  {
    uint64_t v71 = v70;
    uint64_t v72 = (uint64_t *)v106;
    uint64_t v73 = 8 * v107;
    do
    {
      uint64_t v75 = *v72++;
      uint64_t v74 = v75;
      uint64_t v76 = *(void *)(v75 + 32);
      if ((__int16 ***)(*(void *)(*(void *)(v12 + 24) + 16 * (*(_DWORD *)(v76 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E66AF580) {
        uint64_t v77 = 24816;
      }
      else {
        uint64_t v77 = 24864;
      }
      *(void *)(v74 + 16) = *(void *)(v71 + 8) + v77;
      llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v76 + 32), 0, 0);
      v73 -= 8;
    }
    while (v73);
  }
  uint64_t v78 = (llvm::MachineInstr **)v103;
  if (v104)
  {
    uint64_t v79 = (llvm::MachineInstr **)((char *)v103 + 8 * v104);
    while (1)
    {
      uint64_t v80 = *v78;
      uint64_t v81 = *(unsigned int *)(*((void *)*v78 + 4) + 4);
      if ((v81 & 0x80000000) != 0) {
        uint64_t v82 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v82 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v81);
      }
      uint64_t v83 = *v82;
      if (v83)
      {
        while ((*(unsigned char *)(v83 + 3) & 1) != 0)
        {
          uint64_t v83 = *(void *)(v83 + 24);
          if (!v83) {
            goto LABEL_109;
          }
        }
        unint64_t v92 = *(unsigned int *)(v8 + 416);
        BOOL v54 = (v81 & 0x7FFFFFFF) >= v92;
        unint64_t v93 = (v81 & 0x7FFFFFFF) - v92;
        if (v54)
        {
          sub_1CB9153B8(v8 + 408, v93 + 1, *(void *)(v8 + 424));
LABEL_125:
          operator new();
        }
        uint64_t v94 = *(void *)(*(void *)(v8 + 408) + 8 * (v81 & 0x7FFFFFFF));
        if (!v94) {
          goto LABEL_125;
        }
        llvm::LiveIntervals::shrinkToUses((void *)v8, v94, 0);
        goto LABEL_118;
      }
LABEL_109:
      unsigned int v84 = *(int32x2_t **)(v8 + 288);
      int32x2_t v85 = v84[46];
      uint64_t v86 = v84[48].u32[0];
      if (!v86) {
        goto LABEL_120;
      }
      LODWORD(v87) = (v86 - 1) & ((v80 >> 4) ^ (v80 >> 9));
      unint64_t v88 = (llvm::MachineInstr **)(*(void *)&v85 + 16 * v87);
      uint64_t v89 = *v88;
      if (*v88 != v80) {
        break;
      }
LABEL_121:
      if (v88 != (llvm::MachineInstr **)(*(void *)&v85 + 16 * v86))
      {
        unint64_t v95 = (unint64_t)v88[1] & 0xFFFFFFFFFFFFFFF8;
        *unint64_t v88 = (llvm::MachineInstr *)-8192;
        v84[47] = vadd_s32(v84[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v95 + 16) = 0;
      }
      llvm::MachineInstr::eraseFromParent(v80);
LABEL_118:
      if (++v78 == v79)
      {
        uint64_t v78 = (llvm::MachineInstr **)v103;
        goto LABEL_127;
      }
    }
    int v90 = 1;
    while (v89 != (llvm::MachineInstr *)-4096)
    {
      int v91 = v87 + v90++;
      uint64_t v87 = v91 & (v86 - 1);
      uint64_t v89 = *(llvm::MachineInstr **)(*(void *)&v85 + 16 * v87);
      if (v89 == v80)
      {
        unint64_t v88 = (llvm::MachineInstr **)(*(void *)&v85 + 16 * v87);
        goto LABEL_121;
      }
    }
LABEL_120:
    unint64_t v88 = (llvm::MachineInstr **)(*(void *)&v85 + 16 * v86);
    goto LABEL_121;
  }
LABEL_127:
  int v96 = v107;
  if (v78 != (llvm::MachineInstr **)v105) {
    free(v78);
  }
  if ((v100 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v101.i64[0], 8);
  }
  if (v106 != v108) {
    free(v106);
  }
  return v96 != 0;
}

BOOL sub_1CBB2D55C(void *a1)
{
  v60[16] = *MEMORY[0x1E4F143B8];
  int v1 = (uint64_t *)a1[8];
  if (((a1[9] - (void)v1) & 0x7FFFFFFF8) != 8) {
    return 0;
  }
  uint64_t v3 = *v1;
  uint64_t v47 = 0;
  uint64_t v47 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v3 + 32) + 16) + 176))(*(void *)(*(void *)(v3 + 32) + 16));
  v57[0] = 1;
  uint64_t v4 = 1;
  int64x2_t v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v57[v4] = v5;
    v4 += 2;
  }
  while (v4 != 17);
  unint64_t v58 = v60;
  uint64_t v59 = 0x1000000000;
  v45[0] = 0;
  v45[1] = 0;
  unsigned int v46 = 0;
  v44[0] = &v47;
  v44[1] = v45;
  v44[2] = v57;
  uint64_t v7 = a1[6];
  uint64_t v6 = a1 + 6;
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((void *)v8 == v6) {
    goto LABEL_62;
  }
  do
  {
    sub_1CBB2EC04((uint64_t)v44, v8);
    unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || (*(unsigned char *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while ((void *)v8 != v6);
  if (!v59) {
    goto LABEL_62;
  }
  BOOL v54 = v56;
  uint64_t v55 = 0x1000000000;
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v9 = v3 + 48;
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v11 == v9)
  {
LABEL_62:
    BOOL v26 = 0;
    goto LABEL_86;
  }
  do
  {
    int v12 = **(unsigned __int16 **)(v11 + 16);
    if ((v12 - 517) > 1) {
      goto LABEL_53;
    }
    sub_1CBB2ED64((uint64_t)&v51, *(_DWORD *)(*(void *)(v11 + 32) + 4), v47);
    unsigned int v48 = v50;
    uint64_t v49 = 0x200000000;
    if (!v52) {
      goto LABEL_51;
    }
    unsigned int v13 = 0;
    uint64_t v14 = (char *)v51;
    uint64_t v15 = (char *)v51 + 4 * v52;
    do
    {
      if (!v46) {
        goto LABEL_27;
      }
      LODWORD(v17) = (v46 - 1) & (37 * *(_DWORD *)v14);
      uint64_t v16 = v45[0] + 16 * v17;
      int v18 = *(_DWORD *)v16;
      if (*(_DWORD *)v14 != *(_DWORD *)v16)
      {
        int v19 = 1;
        while (v18 != -1)
        {
          int v20 = v17 + v19++;
          uint64_t v17 = v20 & (v46 - 1);
          int v18 = *(_DWORD *)(v45[0] + 16 * v17);
          if (*(_DWORD *)v14 == v18)
          {
            uint64_t v16 = v45[0] + 16 * v17;
            goto LABEL_28;
          }
        }
LABEL_27:
        uint64_t v16 = v45[0] + 16 * v46;
      }
LABEL_28:
      if (v45[0] + 16 * v46 != v16)
      {
        if (v13 >= HIDWORD(v49)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v48 + v13) = *(void *)(v16 + 8);
        unsigned int v13 = v49 + 1;
        LODWORD(v49) = v49 + 1;
      }
      v14 += 4;
    }
    while (v14 != v15);
    uint64_t v21 = v48;
    if (v12 == 517) {
      int v22 = 2;
    }
    else {
      int v22 = 1;
    }
    if (v13 == v22)
    {
      uint64_t v23 = *(void *)v48;
      if (*(_DWORD *)(*(void *)(*(void *)v48 + 32) + 4) == *(_DWORD *)(*(void *)(v11 + 32) + 4))
      {
        uint64_t v24 = 0;
        uint64_t v25 = 8 * v13;
        while (v23 == *(void *)((char *)v48 + v24))
        {
          v24 += 8;
          if (v25 == v24)
          {
            if (v55 >= (unint64_t)HIDWORD(v55)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v54 + v55) = v23;
            LODWORD(v55) = v55 + 1;
            uint64_t v21 = v48;
            break;
          }
        }
      }
    }
    if (v21 != v50) {
      free(v21);
    }
LABEL_51:
    if (v51 != &v53) {
      free(v51);
    }
LABEL_53:
    sub_1CBB2EC04((uint64_t)v44, v11);
    unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 || (*(unsigned char *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 4) != 0)
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (v11 != v9);
  BOOL v26 = v55 != 0;
  uint64_t v27 = (llvm::MachineInstr **)v54;
  if (v55)
  {
    __int16 v28 = (llvm::MachineInstr **)((char *)v54 + 8 * v55);
    do
    {
      unint64_t v29 = *v27;
      unint64_t v30 = (void *)*((void *)*v27 + 3);
      int v31 = *(_DWORD *)(*((void *)*v27 + 4) + 4);
      BOOL v33 = (char *)v30[20];
      unint64_t v32 = v30[21];
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v35 = (char *)v30[19];
        uint64_t v36 = (v33 - v35) >> 4;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60) {
          abort();
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 3 > v37) {
          unint64_t v37 = v38 >> 3;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          if (v39 >> 60) {
            sub_1CB833614();
          }
          uint64_t v40 = (char *)operator new(16 * v39);
        }
        else
        {
          uint64_t v40 = 0;
        }
        uint64_t v41 = &v40[16 * v36];
        *(_WORD *)uint64_t v41 = v31;
        *((void *)v41 + 1) = -1;
        int v42 = v41;
        if (v33 != v35)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v33 - 1);
            v42 -= 16;
            v33 -= 16;
          }
          while (v33 != v35);
          BOOL v33 = (char *)v30[19];
        }
        int v34 = v41 + 16;
        v30[19] = v42;
        v30[20] = v41 + 16;
        v30[21] = &v40[16 * v39];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(_WORD *)BOOL v33 = v31;
        *((void *)v33 + 1) = -1;
        int v34 = v33 + 16;
      }
      v30[20] = v34;
      llvm::MachineInstr::eraseFromParent(v29);
      ++v27;
    }
    while (v27 != v28);
    uint64_t v27 = (llvm::MachineInstr **)v54;
  }
  if (v27 != (llvm::MachineInstr **)v56) {
    free(v27);
  }
LABEL_86:
  MEMORY[0x1D25D9CD0](v45[0], 8);
  if (v58 != v60) {
    free(v58);
  }
  if ((v57[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v57[1], 8);
  }
  return v26;
}

BOOL sub_1CBB2DAC0(void *a1)
{
  v118[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[8];
  if (((a1[9] - v1) & 0x7FFFFFFF8) != 8) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(*(void *)v1 + 32) + 16);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v2);
  uint64_t v4 = v3;
  v97[0] = 0;
  v97[1] = 0;
  unsigned int v98 = 0;
  v104[0] = 1;
  uint64_t v5 = 1;
  int64x2_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v104[v5] = v6;
    v5 += 2;
  }
  while (v5 != 17);
  unint64_t v105 = v107;
  uint64_t v106 = 0x1000000000;
  uint64_t v7 = a1[6];
  unint64_t v95 = a1 + 6;
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((void *)v8 == v95)
  {
    BOOL v87 = 0;
    goto LABEL_194;
  }
  if (v3) {
    uint64_t v9 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  do
  {
    uint64_t v10 = *(unsigned int *)(v8 + 40);
    if (!v10) {
      goto LABEL_180;
    }
    unint64_t v11 = *(_DWORD **)(v8 + 32);
    int v12 = &v11[8 * v10];
    int v96 = (_OWORD *)(v8 + 56);
    while ((*v11 & 0x10000FF) != 0x1000000)
    {
LABEL_72:
      v11 += 8;
      if (v11 == v12) {
        goto LABEL_172;
      }
    }
    sub_1CBB2ED64((uint64_t)&v116, v11[1], v4);
    sub_1CBB2EE34(v116, v117, v97, 0, v4);
    if (**(_WORD **)(v8 + 16) != 518) {
      goto LABEL_68;
    }
    if (v117)
    {
      unsigned int v13 = v116;
      uint64_t v14 = 4 * v117;
      do
      {
        LODWORD(v108) = 0;
        int v15 = *v13++;
        LODWORD(v108) = v15;
        *((void *)sub_1CBB2F1A4((uint64_t)v97, &v108) + 1) = v8;
        v14 -= 4;
      }
      while (v14);
    }
    unsigned int v16 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
    uint64_t v17 = *v9;
    uint64_t v19 = v9[5];
    uint64_t v18 = v9[6];
    int v20 = (_WORD *)(v18 + (((unint64_t)*(unsigned int *)(*v9 + 24 * v16 + 16) >> 3) & 0x1FFFFFFE));
    int v21 = (unsigned __int16)*v20 + (*(_DWORD *)(*v9 + 24 * v16 + 16) & 0xF) * v16;
    while (1)
    {
      ++v20;
      LOWORD(v22) = *(_WORD *)(v19 + 4 * (unsigned __int16)v21);
      if ((_WORD)v22) {
        break;
      }
LABEL_29:
      v21 += (unsigned __int16)*v20;
      int v28 = 3;
      if (!*v20) {
        goto LABEL_69;
      }
    }
    int v23 = *(unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21 + 2);
    unsigned int v24 = v23 << 16;
    while (!v18)
    {
LABEL_27:
      unsigned int v24 = 0;
      LOWORD(v22) = v23;
      BOOL v27 = (unsigned __int16)v23 == 0;
      LOWORD(v23) = 0;
      if (v27) {
        goto LABEL_29;
      }
    }
    uint64_t v25 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(v17 + 24 * (unsigned __int16)v22 + 8));
    while (v16 == (unsigned __int16)v22)
    {
      int v26 = *v25++;
      LOWORD(v22) = v26 + v22;
      if (!v26) {
        goto LABEL_27;
      }
    }
    unint64_t v29 = *(__int16 *****)(v4 + 248);
    while (1)
    {
      if (*(__int16 *****)(v4 + 240) == v29)
      {
        unint64_t v30 = 0;
      }
      else
      {
        unint64_t v30 = 0;
        int v31 = *(__int16 *****)(v4 + 240);
        do
        {
          if ((_WORD)v22)
          {
            unint64_t v32 = **v31;
            if ((unint64_t)(unsigned __int16)v22 >> 3 < *((unsigned __int16 *)v32 + 11)
              && ((1 << (v22 & 7)) & *((unsigned __int8 *)v32[1] + ((unsigned __int16)v22 >> 3))) != 0
              && (!v30
               || *v31 != v30
               && ((*(_DWORD *)((char *)v30[1] + ((*((unsigned __int16 *)v32 + 12) >> 3) & 0x1FFCLL)) >> *((_WORD *)v32 + 12)) & 1) != 0))
            {
              unint64_t v30 = *v31;
            }
          }
          ++v31;
        }
        while (v31 != v29);
      }
      if (v30 == &off_1E66AF580 || v30 == (__int16 ***)&off_1E66ABE90) {
        break;
      }
      do
      {
        int v34 = *v25++;
        __int16 v33 = v34;
        if (v34)
        {
          LOWORD(v22) = v33 + v22;
        }
        else
        {
          unsigned int v22 = HIWORD(v24);
          if (HIWORD(v24))
          {
            v24 >>= 16;
          }
          else
          {
            if (!*v20) {
              goto LABEL_68;
            }
            v21 += (unsigned __int16)*v20++;
            uint64_t v35 = (unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21);
            unsigned int v22 = *v35;
            unsigned int v24 = v35[1] << 16;
          }
          uint64_t v25 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(v17 + 24 * v22 + 8));
        }
      }
      while (v16 == (unsigned __int16)v22);
      if (!v20) {
        goto LABEL_68;
      }
    }
    if (!(_WORD)v22)
    {
LABEL_68:
      int v28 = 3;
      goto LABEL_69;
    }
    int v93 = (unsigned __int16)v22;
    sub_1CBB2ED64((uint64_t)&v113, (unsigned __int16)v22, v4);
    if (v114)
    {
      uint64_t v36 = v113;
      if (v98)
      {
        unint64_t v37 = (uint64_t *)((char *)v113 + 4 * v114);
        unsigned int v38 = v98 - 1;
        unint64_t v39 = v113;
        while (1)
        {
          unsigned int v40 = (37 * *(_DWORD *)v39) & v38;
          int v41 = *(_DWORD *)(*(void *)v97 + 16 * v40);
          if (v41 != *(_DWORD *)v39) {
            break;
          }
LABEL_62:
          unint64_t v39 = (uint64_t *)((char *)v39 + 4);
          if (v39 == v37)
          {
            while (1)
            {
              if (!v98) {
                goto LABEL_80;
              }
              LODWORD(v44) = (v98 - 1) & (37 * *(_DWORD *)v36);
              uint64_t v45 = *(void *)v97 + 16 * v44;
              int v46 = *(_DWORD *)v45;
              if (*(_DWORD *)v36 != *(_DWORD *)v45) {
                break;
              }
LABEL_81:
              sub_1CBB03C18((uint64_t)v104, (uint64_t *)(v45 + 8));
              uint64_t v36 = (uint64_t *)((char *)v36 + 4);
              if (v36 == v37) {
                goto LABEL_82;
              }
            }
            int v47 = 1;
            while (v46 != -1)
            {
              int v48 = v44 + v47++;
              uint64_t v44 = v48 & (v98 - 1);
              int v46 = *(_DWORD *)(*(void *)v97 + 16 * v44);
              if (*(_DWORD *)v36 == v46)
              {
                uint64_t v45 = *(void *)v97 + 16 * v44;
                goto LABEL_81;
              }
            }
LABEL_80:
            uint64_t v45 = *(void *)v97 + 16 * v98;
            goto LABEL_81;
          }
        }
        int v42 = 1;
        while (v41 != -1)
        {
          unsigned int v43 = v40 + v42++;
          unsigned int v40 = v43 & v38;
          int v41 = *(_DWORD *)(*(void *)v97 + 16 * (v43 & v38));
          if (v41 == *(_DWORD *)v39) {
            goto LABEL_62;
          }
        }
      }
      int v28 = 3;
      goto LABEL_100;
    }
LABEL_82:
    uint64_t v49 = *(void *)(v8 + 24);
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    uint64_t v50 = *(void *)(v49 + 32);
    uint64_t v108 = (char *)&unk_1F261CD58;
    *(void *)&long long v109 = v50;
    *(void *)&long long v110 = *(void *)(v50 + 40);
    *((void *)&v109 + 1) = (*(uint64_t (**)(void))(**(void **)(v50 + 16) + 104))(*(void *)(v50 + 16));
    unsigned int v103 = 0;
    if (!*((void *)&v110 + 1)) {
      goto LABEL_83;
    }
    int v64 = **((unsigned char **)&v110 + 1);
    if ((v64 - 4) > 0x1E)
    {
      if ((v64 - 3) >= 0xFFFFFFFE) {
        uint64_t v77 = *((void *)&v110 + 1);
      }
      else {
        uint64_t v77 = 0;
      }
      if ((v64 - 3) <= 0xFFFFFFFD)
      {
        if (v64 == 3) {
          *(void *)(*((void *)&v110 + 1) + 8) = 0;
        }
LABEL_83:
        unint64_t v51 = 0;
        *((void *)&v110 + 1) = 0;
        goto LABEL_84;
      }
      unint64_t v66 = v77 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v110 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v110 + 1) + 12)) {
        goto LABEL_83;
      }
      uint64_t v65 = *(void *)(*((void *)&v110 + 1) + 16);
      if ((v65 & 4) == 0) {
        goto LABEL_83;
      }
      unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
      if (!v66) {
        goto LABEL_83;
      }
    }
    unint64_t v99 = (unsigned __int8 **)&v110 + 1;
    sub_1CC5FA668(v66 + 16, &v99);
    unint64_t v51 = v103;
    *((void *)&v110 + 1) = v103;
    if (v103)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v103, v103, (uint64_t)&v110 + 8);
      unint64_t v51 = (unsigned __int8 *)*((void *)&v110 + 1);
    }
LABEL_84:
    *((void *)&v111 + 1) = v8;
    *(void *)&long long v112 = 0;
    *(void *)&long long v111 = *(void *)(v8 + 24);
    *((void *)&v111 + 1) = v8;
    if (v96 == (long long *)((char *)&v110 + 8)) {
      goto LABEL_117;
    }
    if (v51)
    {
      int v74 = *v51;
      if ((v74 - 4) > 0x1E)
      {
        if ((v74 - 3) >= 0xFFFFFFFE) {
          uint64_t v78 = v51;
        }
        else {
          uint64_t v78 = 0;
        }
        if ((v74 - 3) < 0xFFFFFFFE)
        {
          if (v74 == 3) {
            *((void *)v51 + 1) = 0;
          }
          goto LABEL_86;
        }
        unint64_t v76 = (unint64_t)(v78 + 8);
      }
      else
      {
        if ((v51[1] & 0x7F) != 2 && !*((_DWORD *)v51 + 3)) {
          goto LABEL_86;
        }
        uint64_t v75 = *((void *)v51 + 2);
        if ((v75 & 4) == 0) {
          goto LABEL_86;
        }
        unint64_t v76 = v75 & 0xFFFFFFFFFFFFFFF8;
        if (!v76) {
          goto LABEL_86;
        }
      }
      unint64_t v99 = (unsigned __int8 **)&v110 + 1;
      sub_1CC5FA668(v76 + 16, &v99);
    }
LABEL_86:
    *((void *)&v110 + 1) = *(void *)v96;
    if (!*((void *)&v110 + 1))
    {
      unsigned int v52 = (llvm::MachineFunction *)v109;
      uint64_t v53 = *(void *)(*((void *)&v109 + 1) + 8) + 24816;
      unsigned int v103 = 0;
      goto LABEL_88;
    }
    llvm::MetadataTracking::track((uint64_t)&v110 + 8, *((unsigned __int8 **)&v110 + 1), 2);
    unint64_t v51 = (unsigned __int8 *)*((void *)&v110 + 1);
LABEL_117:
    unsigned int v52 = (llvm::MachineFunction *)v109;
    uint64_t v53 = *(void *)(*((void *)&v109 + 1) + 8) + 24816;
    unsigned int v103 = v51;
    if (v51) {
      llvm::MetadataTracking::track((uint64_t)&v103, v51, 2);
    }
LABEL_88:
    unint64_t v92 = v52;
    BOOL v54 = llvm::MachineFunction::CreateMachineInstr(v52, v53, &v103, 0);
    if (!v103) {
      goto LABEL_89;
    }
    int v80 = *v103;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        uint64_t v83 = v103;
      }
      else {
        uint64_t v83 = 0;
      }
      if ((v80 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v82 = (unint64_t)(v83 + 8);
LABEL_169:
        unint64_t v99 = &v103;
        sub_1CC5FA668(v82 + 16, &v99);
        goto LABEL_89;
      }
      if (v80 == 3) {
        *((void *)v103 + 1) = 0;
      }
    }
    else if ((v103[1] & 0x7F) == 2 || *((_DWORD *)v103 + 3))
    {
      uint64_t v81 = *((void *)v103 + 2);
      if ((v81 & 4) != 0)
      {
        unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
        if (v82) {
          goto LABEL_169;
        }
      }
    }
LABEL_89:
    uint64_t v55 = (unint64_t *)*((void *)&v111 + 1);
    uint64_t v56 = *(void *)(v111 + 40);
    *((void *)v54 + 3) = v56;
    uint64_t v57 = *(void *)(v56 + 32);
    uint64_t v58 = *((unsigned int *)v54 + 10);
    if (v58)
    {
      uint64_t v67 = *((void *)v54 + 4);
      uint64_t v68 = *(void *)(v57 + 40);
      uint64_t v69 = 32 * v58;
      do
      {
        if (!*(unsigned char *)v67)
        {
          uint64_t v70 = *(unsigned int *)(v67 + 4);
          if ((int)v70 >= 0) {
            uint64_t v71 = (uint64_t *)(*(void *)(v68 + 272) + 8 * v70);
          }
          else {
            uint64_t v71 = (uint64_t *)(*(void *)(v68 + 24) + 16 * (v70 & 0x7FFFFFFF) + 8);
          }
          uint64_t v72 = *v71;
          if (*v71)
          {
            uint64_t v73 = *(void *)(v72 + 16);
            *(void *)(v72 + 16) = v67;
            *(void *)(v67 + 16) = v73;
            if (*(unsigned char *)(v67 + 3))
            {
              *(void *)(v67 + 24) = v72;
            }
            else
            {
              *(void *)(v67 + 24) = 0;
              uint64_t v71 = (uint64_t *)(v73 + 24);
            }
          }
          else
          {
            *(void *)(v67 + 16) = v67;
            *(void *)(v67 + 24) = 0;
          }
          *uint64_t v71 = v67;
        }
        v67 += 32;
        v69 -= 32;
      }
      while (v69);
    }
    uint64_t v59 = *(void *)(v57 + 728);
    if (v59) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v59 + 24))(v59, v54);
    }
    unint64_t v60 = *v55 & 0xFFFFFFFFFFFFFFF8;
    *(void *)BOOL v54 = v60 | *(void *)v54 & 7;
    *((void *)v54 + 1) = v55;
    *(void *)(v60 + 8) = v54;
    unint64_t *v55 = *v55 & 7 | (unint64_t)v54;
    if ((void)v112) {
      (*(void (**)(void, llvm::MachineInstr *))(*(void *)v112 + 24))(v112, v54);
    }
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    LODWORD(v99) = 0x1000000;
    HIDWORD(v99) = v93;
    llvm::MachineInstr::addOperand(v54, v92, (const llvm::MachineOperand *)&v99);
    LODWORD(v99) = 1;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    llvm::MachineInstr::addOperand(v54, v92, (const llvm::MachineOperand *)&v99);
    uint64_t v108 = (char *)&unk_1F261CD58;
    if (!*((void *)&v110 + 1)) {
      goto LABEL_98;
    }
    int v61 = **((unsigned char **)&v110 + 1);
    if ((v61 - 4) > 0x1E)
    {
      if ((v61 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = *((void *)&v110 + 1);
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v61 - 3) < 0xFFFFFFFE)
      {
        if (v61 == 3) {
          *(void *)(*((void *)&v110 + 1) + 8) = 0;
        }
        goto LABEL_98;
      }
      unint64_t v63 = v62 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v110 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v110 + 1) + 12)) {
        goto LABEL_98;
      }
      uint64_t v79 = *(void *)(*((void *)&v110 + 1) + 16);
      if ((v79 & 4) == 0) {
        goto LABEL_98;
      }
      unint64_t v63 = v79 & 0xFFFFFFFFFFFFFFF8;
      if (!v63) {
        goto LABEL_98;
      }
    }
    unint64_t v99 = (unsigned __int8 **)&v110 + 1;
    sub_1CC5FA668(v63 + 16, &v99);
LABEL_98:
    int v28 = 2;
    uint64_t v36 = v113;
LABEL_100:
    if (v36 != &v115) {
      free(v36);
    }
LABEL_69:
    if (v116 != (int *)v118) {
      free(v116);
    }
    if (v28 == 3) {
      goto LABEL_72;
    }
LABEL_172:
    uint64_t v84 = *(unsigned int *)(v8 + 40);
    if (v84)
    {
      uint64_t v85 = 32 * v84;
      uint64_t v86 = (unsigned int *)(*(void *)(v8 + 32) + 4);
      do
      {
        if ((*(v86 - 1) & 0x10000FF) == 0)
        {
          if (*v86)
          {
            sub_1CBB2ED64((uint64_t)&v108, *v86, v4);
            sub_1CBB2EE34(v108, v109, v97, 0, v4);
            if (v108 != (char *)&v109 + 8) {
              free(v108);
            }
          }
        }
        v86 += 8;
        v85 -= 32;
      }
      while (v85);
    }
LABEL_180:
    unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || (*(unsigned char *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while ((void *)v8 != v95);
  BOOL v87 = v106 != 0;
  unint64_t v88 = (llvm::MachineInstr **)v105;
  if (v106)
  {
    uint64_t v89 = 8 * v106;
    do
    {
      int v90 = *v88++;
      llvm::MachineInstr::eraseFromParent(v90);
      v89 -= 8;
    }
    while (v89);
    unint64_t v88 = (llvm::MachineInstr **)v105;
  }
  if (v88 != (llvm::MachineInstr **)v107) {
    free(v88);
  }
LABEL_194:
  if ((v104[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v104[1], 8);
  }
  MEMORY[0x1D25D9CD0](*(void *)v97, 8);
  return v87;
}

uint64_t sub_1CBB2E5F8(uint64_t a1)
{
  if (byte_1EBCC0E98)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0E08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC0E08))
    {
      byte_1EBCC0E01 = 1;
      __cxa_guard_release(&qword_1EBCC0E08);
    }
    if (byte_1EBCC0E01 == 1)
    {
      if (*(unsigned char *)(a1 + 248))
      {
        uint64_t v2 = *(uint64_t **)(a1 + 8);
        uint64_t v3 = *v2;
        uint64_t v4 = v2[1];
        if (v3 == v4)
        {
LABEL_20:
          uint64_t v5 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v3 != &llvm::LiveIntervals::ID)
          {
            v3 += 16;
            if (v3 == v4) {
              goto LABEL_20;
            }
          }
          uint64_t v5 = *(void *)(v3 + 8);
        }
        (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LiveIntervals::ID);
      }
      int64x2_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      if (v7 == v8)
      {
LABEL_12:
        uint64_t v9 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v7 != &llvm::MachineLoopInfo::ID)
        {
          v7 += 16;
          if (v7 == v8) {
            goto LABEL_12;
          }
        }
        uint64_t v9 = *(void *)(v7 + 8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineLoopInfo::ID);
      if (*(void *)(v10 + 272) != *(void *)(v10 + 280)) {
        llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
      }
    }
  }
  return 0;
}

void sub_1CBB2E848(uint64_t a1)
{
}

const char *sub_1CBB2E8F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 248)) {
    return "AGX3 Redundant PHI Copy Elim";
  }
  else {
    return "AGX3 Redundant PHI Elim CLR";
  }
}

uint64_t sub_1CBB2E920(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_5;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_5;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBB2E9CC(uint64_t a1, unsigned int a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBB2EB48(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB2EB48(a1, v14, v6);
}

uint64_t sub_1CBB2EB48(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 40);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v11 = 0;
      uint64_t result = sub_1CBB2E920((uint64_t)v5, v10, &v11);
      *int v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CBB2EC04(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if (v2)
  {
    int v5 = *(_DWORD **)(a2 + 32);
    int v6 = &v5[8 * v2];
    do
    {
      while ((*v5 & 0x10000FF) != 0x1000000)
      {
        v5 += 8;
        if (v5 == v6) {
          return;
        }
      }
      sub_1CBB2ED64((uint64_t)&v14, v5[1], **(void **)a1);
      sub_1CBB2EE34(v14, v15, *(int32x2_t **)(a1 + 8), *(void *)(a1 + 16), **(void **)a1);
      unsigned int v7 = **(unsigned __int16 **)(a2 + 16) - 517;
      if (v7 <= 1)
      {
        if (v15)
        {
          uint64_t v8 = (int *)v14;
          uint64_t v9 = 4 * v15;
          do
          {
            LODWORD(v13) = 0;
            int v10 = *v8++;
            LODWORD(v13) = v10;
            *((void *)sub_1CBB2F1A4(*(void *)(a1 + 8), &v13) + 1) = a2;
            v9 -= 4;
          }
          while (v9);
        }
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v13 = a2;
        sub_1CBB03C18(v11, &v13);
      }
      if (v14 != v16) {
        free(v14);
      }
      v5 += 8;
    }
    while (v7 >= 2 && v5 != v6);
  }
}

uint64_t sub_1CBB2ED64(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = 0;
  unint64_t v4 = (void *)(a3 + 8);
  if (!a3) {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *v4 + 24 * a2;
  *(void *)uint64_t result = result + 16;
  *(void *)(result + 8) = 0x200000000;
  unint64_t v6 = *(unsigned int *)(v5 + 16);
  unsigned int v7 = (_WORD *)(v4[6] + ((v6 >> 3) & 0x1FFFFFFE));
  __int16 v9 = *v7;
  uint64_t v8 = v7 + 1;
  unsigned __int16 v10 = v9 + (v6 & 0xF) * a2;
  do
  {
    if (v3 >= *(_DWORD *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)result + 4 * v3) = v10;
    unsigned int v3 = *(_DWORD *)(result + 8) + 1;
    *(_DWORD *)(result + 8) = v3;
    int v11 = *v8++;
    v10 += v11;
  }
  while (v11);
  return result;
}

void sub_1CBB2EE34(_DWORD *a1, int a2, int32x2_t *a3, uint64_t a4, uint64_t a5)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v42 = 1;
  uint64_t v43 = -1;
  uint64_t v44 = -1;
  uint64_t v45 = v47;
  uint64_t v46 = 0x400000000;
  if (!a2) {
    goto LABEL_56;
  }
  unsigned int v7 = a1;
  uint64_t v8 = &a1[a2];
  do
  {
    int32x2_t v9 = *a3;
    uint64_t v10 = a3[2].u32[0];
    if (!v10) {
      goto LABEL_4;
    }
    LODWORD(v25) = (v10 - 1) & (37 * *v7);
    uint64_t v11 = *(void *)&v9 + 16 * v25;
    int v26 = *(_DWORD *)v11;
    if (*v7 != *(_DWORD *)v11)
    {
      int v27 = 1;
      while (v26 != -1)
      {
        int v28 = v25 + v27++;
        uint64_t v25 = v28 & (v10 - 1);
        int v26 = *(_DWORD *)(*(void *)&v9 + 16 * v25);
        if (*v7 == v26)
        {
          uint64_t v11 = *(void *)&v9 + 16 * v25;
          goto LABEL_5;
        }
      }
LABEL_4:
      uint64_t v11 = *(void *)&v9 + 16 * v10;
    }
LABEL_5:
    if (*(void *)&v9 + 16 * v10 != v11)
    {
      sub_1CBB2ED64((uint64_t)&v39, *(_DWORD *)(*(void *)(*(void *)(v11 + 8) + 32) + 4), a5);
      uint64_t v12 = (uint64_t *)v39;
      if (v40)
      {
        uint64_t v13 = (char *)v39 + 4 * v40;
        while (1)
        {
          if (v42)
          {
            int v14 = 4;
            unsigned int v15 = &v43;
          }
          else
          {
            int v14 = v44;
            if (!v44)
            {
              unsigned int v24 = 0;
LABEL_23:
              *sub_1CB834EC4((uint64_t)&v42, (uint64_t)v12, v12, v24) = *(_DWORD *)v12;
              if (v46 >= (unint64_t)HIDWORD(v46)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v45 + v46) = *(_DWORD *)v12;
              LODWORD(v46) = v46 + 1;
              goto LABEL_25;
            }
            unsigned int v15 = (uint64_t *)v43;
          }
          int v16 = v14 - 1;
          unsigned int v17 = (37 * *(_DWORD *)v12) & v16;
          uint64_t v18 = (_DWORD *)v15 + v17;
          int v19 = *v18;
          if (*(_DWORD *)v12 != *v18)
          {
            int v20 = 0;
            int v21 = 1;
            while (v19 != -1)
            {
              if (v20) {
                BOOL v22 = 0;
              }
              else {
                BOOL v22 = v19 == -2;
              }
              if (v22) {
                int v20 = v18;
              }
              unsigned int v23 = v17 + v21++;
              unsigned int v17 = v23 & v16;
              uint64_t v18 = (_DWORD *)v15 + v17;
              int v19 = *v18;
              if (*(_DWORD *)v12 == *v18) {
                goto LABEL_25;
              }
            }
            if (v20) {
              unsigned int v24 = v20;
            }
            else {
              unsigned int v24 = v18;
            }
            goto LABEL_23;
          }
LABEL_25:
          uint64_t v12 = (uint64_t *)((char *)v12 + 4);
          if (v12 == (uint64_t *)v13)
          {
            uint64_t v12 = (uint64_t *)v39;
            break;
          }
        }
      }
      if (v12 != &v41) {
        free(v12);
      }
    }
    ++v7;
  }
  while (v7 != v8);
  unint64_t v29 = v45;
  if (v46)
  {
    unint64_t v30 = (char *)v45 + 4 * v46;
    while (1)
    {
      int32x2_t v31 = *a3;
      uint64_t v32 = a3[2].u32[0];
      if (v32)
      {
        LODWORD(v34) = (v32 - 1) & (37 * *v29);
        uint64_t v33 = *(void *)&v31 + 16 * v34;
        int v35 = *(_DWORD *)v33;
        if (*v29 == *(_DWORD *)v33) {
          goto LABEL_43;
        }
        int v36 = 1;
        while (v35 != -1)
        {
          int v37 = v34 + v36++;
          uint64_t v34 = v37 & (v32 - 1);
          int v35 = *(_DWORD *)(*(void *)&v31 + 16 * v34);
          if (*v29 == v35)
          {
            uint64_t v33 = *(void *)&v31 + 16 * v34;
            goto LABEL_43;
          }
        }
      }
      uint64_t v33 = *(void *)&v31 + 16 * v32;
LABEL_43:
      if (*(void *)&v31 + 16 * v32 != v33)
      {
        if (a4) {
          sub_1CBB07FD8(a4, (void *)(v33 + 8));
        }
        *(_DWORD *)uint64_t v33 = -2;
        a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      if (++v29 == (_DWORD *)v30)
      {
        unint64_t v29 = v45;
        break;
      }
    }
  }
  if (v29 != (_DWORD *)v47) {
    free(v29);
  }
LABEL_56:
  if ((v42 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v43, 4);
  }
}

_DWORD *sub_1CBB2F1A4(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v12 = 0;
LABEL_15:
    unint64_t v6 = sub_1CBB2F264(a1, (uint64_t)a2, a2, v12);
    *unint64_t v6 = *a2;
    *((void *)v6 + 1) = 0;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = (37 * *a2) & (v3 - 1);
  unint64_t v6 = (_DWORD *)(*(void *)a1 + 16 * v5);
  int v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v8 = 0;
    int v9 = 1;
    while (v7 != -1)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == -2;
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      unint64_t v6 = (_DWORD *)(*(void *)a1 + 16 * (v11 & v4));
      int v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v8) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v6;
    }
    goto LABEL_15;
  }
  return v6;
}

_DWORD *sub_1CBB2F264(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_3;
    }
    sub_1CBB2F3F0(a1, v7);
    int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = (37 * *a3) & v16;
      a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
      int v18 = *a4;
      if (*a3 == *a4) {
        goto LABEL_3;
      }
      uint64_t v13 = 0;
      int v19 = 1;
      while (v18 != -1)
      {
        if (v13) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -2;
        }
        if (v20) {
          uint64_t v13 = a4;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a4 = (_DWORD *)(*(void *)a1 + 16 * v17);
        int v18 = *a4;
        if (*a3 == *a4) {
          goto LABEL_3;
        }
      }
      goto LABEL_10;
    }
LABEL_31:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1CBB2F3F0(a1, 2 * v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (!v9) {
    goto LABEL_31;
  }
  int v10 = v9 - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
  int v12 = *a4;
  if (*a3 == *a4) {
    goto LABEL_3;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != -1)
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v12 == -2;
    }
    if (v22) {
      uint64_t v13 = a4;
    }
    unsigned int v23 = v11 + v14++;
    unsigned int v11 = v23 & v10;
    a4 = (_DWORD *)(*(void *)a1 + 16 * v11);
    int v12 = *a4;
    if (*a3 == *a4) {
      goto LABEL_3;
    }
  }
LABEL_10:
  if (v13) {
    a4 = v13;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CBB2F3F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBB2F4BC(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBB2F4BC(uint64_t result, int *a2, int *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    int v4 = *(_DWORD **)result;
    uint64_t v5 = 16 * v3;
    do
    {
      *int v4 = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    int v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      int v7 = *(_DWORD *)(result + 16) - 1;
      unsigned int v8 = v7 & (37 * v6);
      uint64_t v9 = *(void *)result + 16 * v8;
      int v10 = *(_DWORD *)v9;
      if (v6 != *(_DWORD *)v9)
      {
        uint64_t v11 = 0;
        int v12 = 1;
        while (v10 != -1)
        {
          if (v11) {
            BOOL v13 = 0;
          }
          else {
            BOOL v13 = v10 == -2;
          }
          if (v13) {
            uint64_t v11 = v9;
          }
          unsigned int v14 = v8 + v12++;
          unsigned int v8 = v14 & v7;
          uint64_t v9 = *(void *)result + 16 * (v14 & v7);
          int v10 = *(_DWORD *)v9;
          if (v6 == *(_DWORD *)v9) {
            goto LABEL_11;
          }
        }
        if (v11) {
          uint64_t v9 = v11;
        }
      }
LABEL_11:
      *(_DWORD *)uint64_t v9 = v6;
      *(void *)(v9 + 8) = *((void *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1CBB2F590()
{
  v4.n128_u64[0] = (unint64_t)"Eliminate Redundant Values(CLR) after phi elimination";
  v4.n128_u64[1] = 53;
  LOBYTE(v1) = 1;
  uint64_t v3 = (char *)&v1;
  int v5 = 1;
  sub_1CD4214D4(&v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC0E18, &dword_1CB82C000);
  int v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Run second pass for testing";
  v4.n128_u64[1] = 27;
  char v2 = 1;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD42164C(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC0ED8, &dword_1CB82C000);
}

void sub_1CBB2F668()
{
}

void sub_1CBB2F700()
{
}

void sub_1CBB2F7A4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBB2F858(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBB2F904()
{
  return "AGX3 Interpolation Predication Pass";
}

void sub_1CBB2F914(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

_DWORD *sub_1CBB30654(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = a2 + 8;
  if (*(_DWORD *)a2)
  {
    int v7 = 16;
    uint64_t v8 = a2 + 8;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      int v18 = 0;
      goto LABEL_18;
    }
    uint64_t v8 = *(void *)(a2 + 8);
  }
  int v9 = v7 - 1;
  unsigned int v10 = (37 * *a3) & v9;
  uint64_t result = (_DWORD *)(v8 + 4 * v10);
  int v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if (*(_DWORD *)a2)
    {
      uint64_t v17 = 16;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v17 = *(unsigned int *)(a2 + 16);
    }
    char v21 = 0;
    uint64_t v20 = v6 + 4 * v17;
    goto LABEL_21;
  }
  BOOL v13 = 0;
  int v14 = 1;
  while (v12 != -1)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v12 == -2;
    }
    if (v15) {
      BOOL v13 = result;
    }
    unsigned int v16 = v10 + v14++;
    unsigned int v10 = v16 & v9;
    uint64_t result = (_DWORD *)(v8 + 4 * v10);
    int v12 = *result;
    if (*a3 == *result) {
      goto LABEL_13;
    }
  }
  if (v13) {
    int v18 = v13;
  }
  else {
    int v18 = result;
  }
LABEL_18:
  uint64_t result = sub_1CBB30820(a2, (uint64_t)a3, a3, v18);
  *uint64_t result = *a3;
  if (*(unsigned char *)a2)
  {
    uint64_t v19 = 16;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v19 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v20 = v6 + 4 * v19;
  char v21 = 1;
LABEL_21:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_1CBB30778(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  int v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (_DWORD *)(v3 + 4 * (v12 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBB30820(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBB30998(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    int v15 = *a4;
    if (*a3 != *a4)
    {
      unsigned int v16 = 0;
      int v17 = 1;
      while (v15 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          unsigned int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        int v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBB30998(a1, v8);
      uint64_t v20 = 0;
      sub_1CBB30778(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void *sub_1CBB30998(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v6 = *(int **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v8 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v8;
    }
    sub_1CBB30B10((void *)a1, v6, &v6[v7]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v9 = v14;
  for (uint64_t i = 8; i != 72; i += 4)
  {
    unsigned int v11 = *(_DWORD *)(a1 + i);
    if (v11 <= 0xFFFFFFFD) {
      *v9++ = v11;
    }
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v12;
  }
  return sub_1CBB30B10((void *)a1, v14, v9);
}

void *sub_1CBB30B10(void *result, int *a2, int *a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)result;
  *uint64_t result = *(_DWORD *)result & 1;
  uint64_t v7 = (char *)(result + 1);
  if (v6)
  {
    size_t v10 = 64;
    int v9 = result + 1;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (!v8) {
      goto LABEL_5;
    }
    int v9 = (void *)result[1];
    size_t v10 = 4 * v8;
  }
  uint64_t result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    int v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)v5)
      {
        int v13 = 16;
        uint64_t v12 = v7;
      }
      else
      {
        uint64_t v12 = (char *)v5[1];
        int v13 = *((_DWORD *)v5 + 4);
      }
      int v14 = v13 - 1;
      unsigned int v15 = (v13 - 1) & (37 * v11);
      unsigned int v16 = &v12[4 * v15];
      int v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        BOOL v18 = 0;
        int v19 = 1;
        while (v17 != -1)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            BOOL v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          unsigned int v16 = &v12[4 * (v21 & v14)];
          int v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16) {
            goto LABEL_21;
          }
        }
        if (v18) {
          unsigned int v16 = v18;
        }
      }
LABEL_21:
      *(_DWORD *)unsigned int v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBB30C30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v17 = 0;
  uint64_t result = sub_1CBB30D70(a2, *a3, &v17);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)a2;
  if (result)
  {
    if (v8)
    {
      uint64_t v15 = a2 + 8;
      uint64_t v16 = 32;
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = *(unsigned int *)(a2 + 16);
    }
    char v14 = 0;
    uint64_t v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  unsigned int v9 = v8 >> 1;
  if (v8) {
    unsigned int v10 = 32;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_15;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_15:
    sub_1CBB30E1C(a2, v10);
    int v17 = 0;
    uint64_t result = sub_1CBB30D70(a2, *a3, &v17);
    uint64_t v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096) {
    --*(_DWORD *)(a2 + 4);
  }
  uint64_t *v7 = *a3;
  uint64_t v11 = a2 + 8;
  if (*(unsigned char *)a2)
  {
    uint64_t v12 = 32;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(unsigned int *)(a2 + 16);
  }
  uint64_t v13 = v11 + 8 * v12;
  char v14 = 1;
LABEL_11:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1CBB30D70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 32;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        unsigned int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBB30E1C(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x21)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x20)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBB30FA4(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 264; i += 8)
  {
    uint64_t v8 = *(void *)(a1 + i);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB30FA4(a1, v14, v6);
}

uint64_t sub_1CBB30FA4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 264);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CBB30D70((uint64_t)v5, v10, &v11);
      *uint64_t v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBB31060(uint64_t result, int a2)
{
  int v2 = 1;
  *(_DWORD *)(result + 12) = 1;
  switch(a2)
  {
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'h':
      __break(1u);
      JUMPOUT(0x1CBB3110CLL);
      *(unsigned char *)(result + 21) = 1;
      goto LABEL_13;
    case 'b':
      *(_DWORD *)(result + 12) = 2;
      goto LABEL_9;
    case 'c':
LABEL_9:
      *(_DWORD *)(result + 8) = 3;
      *(unsigned char *)(result + 22) = 1;
      return result;
    case 'd':
LABEL_13:
      int v2 = 2;
      goto LABEL_4;
    case 'e':
      *(_DWORD *)(result + 8) = 0;
      return result;
    case 'f':
      goto LABEL_4;
    case 'g':
      int v2 = 8;
      goto LABEL_4;
    case 'i':
      int v2 = 9;
      goto LABEL_4;
    case 'j':
      int v2 = 10;
      goto LABEL_4;
    case 'k':
      int v2 = 7;
      goto LABEL_4;
    case 'l':
      int v2 = 5;
      goto LABEL_4;
    case 'm':
      int v2 = 6;
      goto LABEL_4;
    case 'n':
      int v2 = 4;
      goto LABEL_4;
    case 'o':
    case 'p':
      int v2 = 12;
LABEL_4:
      *(_DWORD *)(result + 8) = v2;
      break;
    default:
      *(unsigned char *)(result + 20) = 1;
      break;
  }
  return result;
}

uint64_t sub_1CBB31168(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *(void *)(a1 + 24) = a5;
  uint64_t result = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v9 + 330)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *(unsigned __int8 *)(v9 + 358) != 0;
  }
  if (a3 != 3)
  {
    if (a3 == 1)
    {
      switch(a4)
      {
        case 4:
          goto LABEL_24;
        case 5:
          goto LABEL_25;
        case 6:
          goto LABEL_9;
        case 7:
          if (*(unsigned char *)(a1 + 20))
          {
            if (!*(unsigned char *)(a1 + 21))
            {
LABEL_24:
              BOOL v11 = !v10;
              int v12 = 7;
              goto LABEL_10;
            }
          }
          else if (!*(unsigned char *)(a1 + 21))
          {
LABEL_9:
            BOOL v11 = !v10;
            int v12 = 11;
            goto LABEL_10;
          }
LABEL_25:
          BOOL v11 = !v10;
          int v12 = 3;
LABEL_10:
          if (!v11) {
            ++v12;
          }
          break;
        default:
          return result;
      }
      goto LABEL_12;
    }
    switch(a4)
    {
      case 4:
        goto LABEL_31;
      case 5:
        goto LABEL_14;
      case 6:
        goto LABEL_22;
      case 7:
        if (*(unsigned char *)(a1 + 20))
        {
          if (!*(unsigned char *)(a1 + 21))
          {
LABEL_31:
            int v12 = 6;
            goto LABEL_12;
          }
        }
        else if (!*(unsigned char *)(a1 + 21))
        {
LABEL_22:
          int v12 = 10;
LABEL_12:
          *(_DWORD *)(a1 + 16) = v12;
          return result;
        }
LABEL_14:
        int v12 = 2;
        goto LABEL_12;
      default:
        return result;
    }
  }
  int v13 = 9;
  switch(a4)
  {
    case 4:
      goto LABEL_27;
    case 5:
      goto LABEL_28;
    case 6:
      goto LABEL_19;
    case 7:
      if (*(unsigned char *)(a1 + 20))
      {
        if (!*(unsigned char *)(a1 + 21))
        {
LABEL_27:
          int v13 = 5;
          goto LABEL_19;
        }
      }
      else if (!*(unsigned char *)(a1 + 21))
      {
        int v13 = 9;
        goto LABEL_19;
      }
LABEL_28:
      int v13 = 1;
LABEL_19:
      *(_DWORD *)(a1 + 16) = v13;
      *(unsigned char *)(a1 + 23) = 1;
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_1CBB31348(uint64_t a1, int a2, int a3, int a4, int a5, char a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 23))
  {
    BOOL v6 = a2 == 0;
    LODWORD(v7) = 92;
    goto LABEL_3;
  }
  if (a6)
  {
    uint64_t v7 = 61;
  }
  else
  {
    if (a2)
    {
      BOOL v6 = *(unsigned char *)(*(void *)(a1 + 24) + 302) == 0;
      LODWORD(v7) = 63;
LABEL_3:
      if (v6) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = (v7 + 1);
      }
      goto LABEL_6;
    }
    uint64_t v7 = 62;
  }
LABEL_6:
  if (a2) {
    int v8 = 45;
  }
  else {
    int v8 = 40;
  }
  if (a3) {
    int v9 = 49;
  }
  else {
    int v9 = 41;
  }
  int v10 = 2 * (a5 != 32);
  if (a4) {
    int v10 = 42;
  }
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  if (a6)
  {
    uint64_t v12 = 3;
  }
  else
  {
    if (*(unsigned char *)(a1 + 22)) {
      int v11 = 44;
    }
    else {
      int v11 = 43;
    }
    uint64_t v12 = 4;
    v14[3] = v11;
  }
  return sub_1CBE0418C(v7, v12, v14);
}

uint64_t sub_1CBB31490(uint64_t a1, int a2, int a3)
{
  int v3 = a2 - 1;
  if ((a2 - 1) >= 8 || ((0x8Bu >> v3) & 1) == 0) {
    llvm::report_fatal_error((llvm *)"Unhandled number of load bytes.", (const llvm::Twine *)1);
  }
  uint64_t v4 = qword_1CDB18AD8[v3];
  uint64_t v5 = qword_1CDB18B18[v3];
  uint64_t v6 = 2048;
  if (!a3) {
    uint64_t v6 = 0;
  }
  return v4 | v6 | v5;
}

uint64_t sub_1CBB314F8()
{
  return 0;
}

BOOL sub_1CBB31500(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E758, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a2;
    int v4 = __cxa_guard_acquire(&qword_1EA61E758);
    a2 = v5;
    if (v4)
    {
      __cxa_guard_release(&qword_1EA61E758);
      a2 = v5;
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0) {
    return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 11) >> 6) & 1;
  }

  return llvm::MachineInstr::hasPropertyInBundle(a2, 0x40000000, 2);
}

BOOL sub_1CBB315A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned __int16 **)(a2 + 16);
  int v7 = *v6;
  uint64_t v8 = sub_1CBE52E8C(v7);
  if ((v8 & 0xFF00000000) != 0 && (v8 & 0xFFFFFFFE) == 0xBC) {
    return 1;
  }
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    uint64_t v12 = 1;
    if (llvm::MachineInstr::hasPropertyInBundle(a2, 512, 1)) {
      return v12;
    }
    int v7 = **(unsigned __int16 **)(a2 + 16);
  }
  else if ((*((unsigned char *)v6 + 9) & 2) != 0)
  {
    return 1;
  }
  if ((v7 - 2) < 5) {
    return 1;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a4 + 16) + 120))(*(void *)(a4 + 16));
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a4 + 16) + 176))(*(void *)(a4 + 16));
  return llvm::MachineInstr::findRegisterDefOperandIdx(a2, *(_DWORD *)(v10 + 88), 0, 1, v11) != -1;
}

unint64_t sub_1CBB316C4(uint64_t a1, unsigned int a2, llvm::MachineBasicBlock *a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)a3 + 4);
  uint64_t v9 = *(void *)(v8 + 48);
  if (!v9)
  {
    uint64_t v32 = *((void *)a3 + 4);
    uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 8) + 216))(*(void *)(v8 + 8), v8 + 128, v32);
    uint64_t v8 = v32;
    uint64_t v9 = v33;
    *(void *)(v32 + 48) = v33;
  }
  uint64_t v53 = 0;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  int v48 = &unk_1F261CD58;
  uint64_t v49 = (llvm::MachineFunction *)v8;
  *((void *)&v50 + 1) = *(void *)(v8 + 40);
  *(void *)&long long v50 = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 104))(*(void *)(v8 + 16));
  uint64_t v54 = 0;
  *(void *)&long long v51 = 0;
  long long v52 = (unint64_t)a4;
  *((void *)&v51 + 1) = a3;
  if (!*(unsigned char *)(v9 + 560))
  {
    unint64_t v30 = sub_1CC734F48(&v48, 0x15F9u);
    unint64_t MachineInstr = v31;
    sub_1CC734FCC(&v48, (uint64_t)v30, v31);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = (int)a2;
    goto LABEL_33;
  }
  uint64_t v10 = (int)a2;
  if (HIWORD(a2))
  {
    if (*(unsigned char *)(*(void *)(a1 + 80) + 364)) {
      goto LABEL_35;
    }
    unint64_t v39 = sub_1CC734F48(&v48, 0x1108u);
    uint64_t v41 = (llvm::MachineInstr *)v40;
    sub_1CC734FCC(&v48, (uint64_t)v39, v40);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v55 = 0x6901000000;
    llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v55);
    LODWORD(v39) = sub_1CD421B9C(v42, a3, a4, (unsigned __int16 ***)&off_1E66AF580);
    uint64_t v43 = sub_1CC734F48(&v48, 0x15F9u);
    uint64_t v45 = (llvm::MachineInstr *)v44;
    sub_1CC734FCC(&v48, (uint64_t)v43, v44);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    LODWORD(v55) = 0x1000000;
    HIDWORD(v55) = v39;
    llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = v10;
    llvm::MachineInstr::addOperand(v45, v43, (const llvm::MachineOperand *)&v55);
    uint64_t v55 = 0;
    LODWORD(v56) = 0;
    unsigned int v46 = sub_1CBE0418C(67, 3, &v55);
    unint64_t v30 = sub_1CC734F48(&v48, v46);
    unint64_t MachineInstr = v47;
    sub_1CC734FCC(&v48, (uint64_t)v30, v47);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0x6900000000;
    uint64_t v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    LODWORD(v55) = 0;
    HIDWORD(v55) = v39;
    uint64_t v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v30, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
LABEL_33:
    BOOL v20 = (llvm::MachineInstr *)MachineInstr;
    unsigned int v21 = v30;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 80) + 364))
  {
    uint64_t v11 = v49;
    uint64_t v12 = *(void *)(v50 + 8) + 209280;
    uint64_t v55 = v51;
    unint64_t MachineInstr = (unint64_t)llvm::MachineFunction::CreateMachineInstr(v49, v12, (unsigned __int8 **)&v55, 0);
    if (v55) {
      llvm::MetadataTracking::untrack((uint64_t)&v55, (unsigned __int8 *)v55);
    }
    char v14 = (unint64_t *)v52;
    uint64_t v15 = *(void *)(*((void *)&v51 + 1) + 40);
    *(void *)(MachineInstr + 24) = v15;
    uint64_t v16 = *(void *)(v15 + 32);
    uint64_t v17 = *(unsigned int *)(MachineInstr + 40);
    if (v17)
    {
      uint64_t v23 = *(void *)(MachineInstr + 32);
      uint64_t v24 = *(void *)(v16 + 40);
      uint64_t v25 = 32 * v17;
      do
      {
        if (!*(unsigned char *)v23)
        {
          uint64_t v26 = *(unsigned int *)(v23 + 4);
          if ((int)v26 >= 0) {
            int v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
          }
          else {
            int v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
          }
          uint64_t v28 = *v27;
          if (*v27)
          {
            uint64_t v29 = *(void *)(v28 + 16);
            *(void *)(v28 + 16) = v23;
            *(void *)(v23 + 16) = v29;
            if (*(unsigned char *)(v23 + 3))
            {
              *(void *)(v23 + 24) = v28;
            }
            else
            {
              *(void *)(v23 + 24) = 0;
              int v27 = (uint64_t *)(v29 + 24);
            }
          }
          else
          {
            *(void *)(v23 + 16) = v23;
            *(void *)(v23 + 24) = 0;
          }
          uint64_t *v27 = v23;
        }
        v23 += 32;
        v25 -= 32;
      }
      while (v25);
    }
    uint64_t v18 = *(void *)(v16 + 728);
    if (v18) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v18 + 24))(v18, MachineInstr);
    }
    unint64_t v19 = *v14 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t MachineInstr = v19 | *(void *)MachineInstr & 7;
    *(void *)(MachineInstr + 8) = v14;
    *(void *)(v19 + 8) = MachineInstr;
    *char v14 = *v14 & 7 | MachineInstr;
    if (*((void *)&v52 + 1)) {
      (*(void (**)(void, unint64_t))(**((void **)&v52 + 1) + 24))(*((void *)&v52 + 1), MachineInstr);
    }
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = v10;
    goto LABEL_14;
  }
LABEL_35:
  uint64_t v34 = sub_1CC734F48(&v48, 0x1108u);
  unint64_t MachineInstr = v35;
  sub_1CC734FCC(&v48, (uint64_t)v34, v35);
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0x6901000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v34, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  uint64_t v56 = 0;
  uint64_t v57 = (uint64_t)(int)a2 >> 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v34, (const llvm::MachineOperand *)&v55);
  uint64_t v36 = a2 & 3;
  if ((a2 & 3) != 0)
  {
    uint64_t v55 = 0;
    LODWORD(v56) = 1;
    unsigned int v37 = sub_1CBE0418C(67, 3, &v55);
    uint64_t v11 = sub_1CC734F48(&v48, v37);
    unint64_t MachineInstr = v38;
    sub_1CC734FCC(&v48, (uint64_t)v11, v38);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = 0x6900000000;
    uint64_t v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v11, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    uint64_t v56 = 0;
    uint64_t v57 = v36;
LABEL_14:
    BOOL v20 = (llvm::MachineInstr *)MachineInstr;
    unsigned int v21 = v11;
LABEL_15:
    llvm::MachineInstr::addOperand(v20, v21, (const llvm::MachineOperand *)&v55);
  }
  int v48 = &unk_1F261CD58;
  if ((void)v51) {
    llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
  }
  return MachineInstr;
}

llvm::MachineInstr *sub_1CBB31E64(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, int a7)
{
  if (*(unint64_t **)(a2 + 56) == a3) {
    return 0;
  }
  unsigned int v9 = 0;
  int v10 = a7 ^ 1;
  unint64_t v11 = (unint64_t)a3;
  uint64_t v12 = a6;
  while (1)
  {
    unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
    if (v11 && (*(unsigned char *)v11 & 4) != 0)
    {
      __int16 v13 = *(_WORD *)(v11 + 44);
    }
    else
    {
      while (1)
      {
        __int16 v13 = *(_WORD *)(v11 + 44);
        if ((v13 & 4) == 0) {
          break;
        }
        unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    int v14 = v13 & 0xC;
    int v15 = v13 & 4;
    if (v14 && v15 == 0)
    {
      uint64_t v71 = v12;
      uint64_t v72 = a1;
      uint64_t v69 = a3;
      uint64_t v70 = a2;
      int v61 = a4;
      uint64_t v62 = a5;
      int v68 = v10;
      uint64_t v63 = a6;
      unint64_t v64 = v11;
      unsigned int v65 = v9;
      BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v11, 128, 1);
      a2 = v70;
      uint64_t v12 = v71;
      int v10 = v68;
      a3 = v69;
      BOOL v67 = hasPropertyInBundle;
      a1 = v72;
      if (v67) {
        return 0;
      }
      unsigned int v9 = v65;
      unint64_t v11 = v64;
      a6 = v63;
      a5 = v62;
      a4 = v61;
      uint64_t v17 = *(unsigned __int16 **)(v64 + 16);
      uint64_t v18 = *((void *)v17 + 1);
    }
    else
    {
      uint64_t v17 = *(unsigned __int16 **)(v11 + 16);
      uint64_t v18 = *((void *)v17 + 1);
      if ((v18 & 0x80) != 0) {
        return 0;
      }
    }
    if ((v18 & 0x2000) != 0)
    {
      uint64_t v38 = *(void *)(v11 + 32);
      if (*(unsigned char *)v38) {
        goto LABEL_35;
      }
      int v39 = *v17;
      int v40 = v39 & 0xFFFE;
      unsigned int v41 = v39 - 517;
      if (v41 < 2)
      {
        unsigned int v42 = *(_DWORD *)(v38 + 4);
        if (v42 == a6)
        {
          uint64_t v46 = 0;
          return sub_1CBAECAFC((uint64_t)a1, a2, a3, v46, a5, v10, v40 == 5622, a4, *(void *)(v38 + 48));
        }
      }
      else
      {
        if (*(unsigned char *)(v38 + 64) != 1) {
          goto LABEL_35;
        }
        unsigned int v42 = *(_DWORD *)(v38 + 4);
        if (v42 == a6)
        {
          uint64_t v46 = *(void *)(v38 + 80);
          return sub_1CBAECAFC((uint64_t)a1, a2, a3, v46, a5, v10, v40 == 5622, a4, *(void *)(v38 + 48));
        }
      }
      BOOL v43 = v40 != 5622 && v41 >= 2;
      int v44 = v43 ? 0 : v10;
      if (v44 == 1)
      {
        uint64_t v48 = a1[12];
        uint64_t v49 = a1[18];
        uint64_t v50 = *(unsigned int *)(v48 + 24 * v42 + 4);
        if (*(_WORD *)(v49 + 2 * v50))
        {
          unsigned int v51 = v42;
          LOWORD(v42) = *(_WORD *)(v49 + 2 * v50) + v42;
          long long v52 = (_WORD *)(a1[22] + 2 * *(unsigned int *)(v48 + 24 * v51 + 12));
          uint64_t v53 = (unsigned __int16 *)(v49 + 2 * v50 + 2);
          uint64_t v54 = v53;
          uint64_t v55 = v52;
          unsigned __int16 v56 = v42;
          do
          {
            if (*v55 == 1)
            {
              int v57 = v56;
              goto LABEL_49;
            }
            int v59 = *v54++;
            v56 += v59;
            ++v55;
          }
          while (v59);
          int v57 = 0;
LABEL_49:
          while (*v52 != 2)
          {
            int v60 = *v53++;
            LOWORD(v42) = v60 + v42;
            ++v52;
            if (!v60) {
              goto LABEL_61;
            }
          }
          unsigned int v42 = (unsigned __int16)v42;
        }
        else
        {
          int v57 = 0;
LABEL_61:
          unsigned int v42 = 0;
        }
        if (v57 == a6)
        {
          if (v41 >= 2)
          {
            uint64_t v58 = *(unsigned __int16 *)(v38 + 80);
            return sub_1CBAECAFC((uint64_t)a1, a2, a3, v58, a5, 1, v40 == 5622, a4, *(void *)(v38 + 48));
          }
LABEL_54:
          uint64_t v58 = 0;
          return sub_1CBAECAFC((uint64_t)a1, a2, a3, v58, a5, 1, v40 == 5622, a4, *(void *)(v38 + 48));
        }
        if (v42 == a6) {
          break;
        }
      }
    }
    uint64_t v19 = *(unsigned int *)(v11 + 40);
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(v11 + 32);
      while ((*(_DWORD *)(v21 + 32 * v20) & 0x30000FF) != 0x1000000)
      {
LABEL_15:
        if (++v20 == v19) {
          goto LABEL_35;
        }
      }
      unsigned int v22 = *(_DWORD *)(v21 + 32 * v20 + 4);
      uint64_t v23 = a1[12];
      unint64_t v24 = *(unsigned int *)(v23 + 24 * v22 + 16);
      __int16 v25 = v24 & 0xF;
      uint64_t v26 = a1[18];
      int v27 = (_WORD *)(v26 + ((v24 >> 3) & 0x1FFFFFFE));
      __int16 v28 = *v27 + v25 * v22;
      unint64_t v29 = *(unsigned int *)(v23 + 24 * v12 + 16);
      __int16 v30 = v29 & 0xF;
      uint64_t v31 = (_WORD *)(v26 + ((v29 >> 3) & 0x1FFFFFFE));
      __int16 v33 = *v31;
      uint64_t v32 = v31 + 1;
      __int16 v34 = v33 + v30 * a6;
LABEL_18:
      ++v27;
      uint64_t v35 = v32;
      __int16 v36 = v34;
      while (v28 != v36)
      {
        int v37 = *v35++;
        v36 += v37;
        if (!v37)
        {
          v28 += *v27;
          if (*v27) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
      }
      return 0;
    }
LABEL_35:
    if (v11 == *(void *)(a2 + 56) || v9++ >= 0xF) {
      return 0;
    }
  }
  if (v41 < 2) {
    goto LABEL_54;
  }
  uint64_t v58 = *(uint64_t *)(v38 + 80) >> 16;
  return sub_1CBAECAFC((uint64_t)a1, a2, a3, v58, a5, 1, v40 == 5622, a4, *(void *)(v38 + 48));
}

llvm::MachineInstr *sub_1CBB321E8(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a4;
  __int16 v34 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v34, v12, 2);
  }
  __int16 v13 = sub_1CBB31E64(a1, a2, a3, &v34, a5, a6, 1);
  if (v34)
  {
    int v30 = *v34;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        __int16 v33 = v34;
      }
      else {
        __int16 v33 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v32 = (unint64_t)(v33 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_4;
      }
      uint64_t v31 = *((void *)v34 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_4;
      }
    }
    __int16 v36 = &v34;
    sub_1CC5FA668(v32 + 16, &v36);
  }
LABEL_4:
  if (!v13)
  {
    uint64_t v14 = a1[1] + 26496;
    int v15 = *(llvm::MachineFunction **)(a2 + 32);
    uint64_t v16 = *a4;
    uint64_t v35 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v35, v16, 2);
    }
    __int16 v13 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v35, 0);
    if (v35) {
      llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
    }
    uint64_t v17 = *(void *)(a2 + 40);
    *((void *)v13 + 3) = v17;
    uint64_t v18 = *(void *)(v17 + 32);
    uint64_t v19 = *((unsigned int *)v13 + 10);
    if (v19)
    {
      uint64_t v23 = *((void *)v13 + 4);
      uint64_t v24 = *(void *)(v18 + 40);
      uint64_t v25 = 32 * v19;
      do
      {
        if (!*(unsigned char *)v23)
        {
          uint64_t v26 = *(unsigned int *)(v23 + 4);
          if ((int)v26 >= 0) {
            int v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
          }
          else {
            int v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
          }
          uint64_t v28 = *v27;
          if (*v27)
          {
            uint64_t v29 = *(void *)(v28 + 16);
            *(void *)(v28 + 16) = v23;
            *(void *)(v23 + 16) = v29;
            if (*(unsigned char *)(v23 + 3))
            {
              *(void *)(v23 + 24) = v28;
            }
            else
            {
              *(void *)(v23 + 24) = 0;
              int v27 = (uint64_t *)(v29 + 24);
            }
          }
          else
          {
            *(void *)(v23 + 16) = v23;
            *(void *)(v23 + 24) = 0;
          }
          uint64_t *v27 = v23;
        }
        v23 += 32;
        v25 -= 32;
      }
      while (v25);
    }
    uint64_t v20 = *(void *)(v18 + 728);
    if (v20) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, v13);
    }
    unint64_t v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)__int16 v13 = v21 | *(void *)v13 & 7;
    *((void *)v13 + 1) = a3;
    *(void *)(v21 + 8) = v13;
    *a3 = *a3 & 7 | (unint64_t)v13;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    LODWORD(v36) = 0x1000000;
    HIDWORD(v36) = a5;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    LODWORD(v36) = 1;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    LODWORD(v36) = 0;
    HIDWORD(v36) = a6;
    uint64_t v39 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    LODWORD(v36) = 1;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
  }
  return v13;
}

llvm::MachineInstr *sub_1CBB324BC(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a4;
  __int16 v34 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v34, v12, 2);
  }
  __int16 v13 = sub_1CBB31E64(a1, a2, a3, &v34, a5, a6, 0);
  if (v34)
  {
    int v30 = *v34;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        __int16 v33 = v34;
      }
      else {
        __int16 v33 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v32 = (unint64_t)(v33 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_4;
      }
      uint64_t v31 = *((void *)v34 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_4;
      }
    }
    __int16 v36 = &v34;
    sub_1CC5FA668(v32 + 16, &v36);
  }
LABEL_4:
  if (!v13)
  {
    uint64_t v14 = a1[1] + 26688;
    int v15 = *(llvm::MachineFunction **)(a2 + 32);
    uint64_t v16 = *a4;
    uint64_t v35 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v35, v16, 2);
    }
    __int16 v13 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v35, 0);
    if (v35) {
      llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
    }
    uint64_t v17 = *(void *)(a2 + 40);
    *((void *)v13 + 3) = v17;
    uint64_t v18 = *(void *)(v17 + 32);
    uint64_t v19 = *((unsigned int *)v13 + 10);
    if (v19)
    {
      uint64_t v23 = *((void *)v13 + 4);
      uint64_t v24 = *(void *)(v18 + 40);
      uint64_t v25 = 32 * v19;
      do
      {
        if (!*(unsigned char *)v23)
        {
          uint64_t v26 = *(unsigned int *)(v23 + 4);
          if ((int)v26 >= 0) {
            int v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
          }
          else {
            int v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
          }
          uint64_t v28 = *v27;
          if (*v27)
          {
            uint64_t v29 = *(void *)(v28 + 16);
            *(void *)(v28 + 16) = v23;
            *(void *)(v23 + 16) = v29;
            if (*(unsigned char *)(v23 + 3))
            {
              *(void *)(v23 + 24) = v28;
            }
            else
            {
              *(void *)(v23 + 24) = 0;
              int v27 = (uint64_t *)(v29 + 24);
            }
          }
          else
          {
            *(void *)(v23 + 16) = v23;
            *(void *)(v23 + 24) = 0;
          }
          uint64_t *v27 = v23;
        }
        v23 += 32;
        v25 -= 32;
      }
      while (v25);
    }
    uint64_t v20 = *(void *)(v18 + 728);
    if (v20) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, v13);
    }
    unint64_t v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)__int16 v13 = v21 | *(void *)v13 & 7;
    *((void *)v13 + 1) = a3;
    *(void *)(v21 + 8) = v13;
    *a3 = *a3 & 7 | (unint64_t)v13;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    LODWORD(v36) = 0x1000000;
    HIDWORD(v36) = a5;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    LODWORD(v36) = 1;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    LODWORD(v36) = 0;
    HIDWORD(v36) = a6;
    uint64_t v39 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
    LODWORD(v36) = 1;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    llvm::MachineInstr::addOperand(v13, v15, (const llvm::MachineOperand *)&v36);
  }
  return v13;
}

void sub_1CBB32790(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = a5 - 1;
  if ((a5 - 1) >= 0xE7)
  {
    unsigned int v14 = a6 - 1;
LABEL_16:
    if (v14 > 0x3FFFFFFE)
    {
      int v22 = 0;
      int v21 = 0;
      goto LABEL_23;
    }
    LODWORD(v15) = a6 >> 3;
LABEL_18:
    if (v15 > 0x40) {
      int v21 = 0;
    }
    else {
      int v21 = (byte_1CDEF2F4C[v15] >> (a6 & 7)) & 1;
    }
    int v22 = 1;
LABEL_23:
    if (v13 >= 0x207)
    {
      int v25 = v21 ^ 1;
      BOOL v24 = 1;
    }
    else
    {
      int v23 = (1 << (a5 & 7)) & byte_1CDEF2F4C[a5 >> 3];
      BOOL v24 = v23 == 0;
      int v25 = v21 ^ 1;
      if ((v25 & 1) == 0 && v23)
      {
        uint64_t v26 = *a4;
        uint64_t v165 = v26;
        if (v26) {
          llvm::MetadataTracking::track((uint64_t)&v165, v26, 2);
        }
        sub_1CBB324BC(a1, a2, a3, &v165, a5, a6);
        uint64_t v17 = v165;
        if (!v165) {
          return;
        }
        int v18 = *v165;
        if ((v18 - 4) <= 0x1E)
        {
          if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
            return;
          }
          uint64_t v27 = *((void *)v165 + 2);
          if ((v27 & 4) == 0) {
            return;
          }
          unint64_t v20 = v27 & 0xFFFFFFFFFFFFFFF8;
          if (!v20) {
            return;
          }
          goto LABEL_118;
        }
        if ((v18 - 3) >= 0xFFFFFFFE) {
          uint64_t v75 = v165;
        }
        else {
          uint64_t v75 = 0;
        }
        if ((v18 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v20 = (unint64_t)(v75 + 8);
LABEL_118:
          int v74 = &v165;
          goto LABEL_155;
        }
LABEL_156:
        if (v18 == 3) {
          *((void *)v17 + 1) = 0;
        }
        return;
      }
    }
    if (a6 < 0x58) {
      int v28 = v22;
    }
    else {
      int v28 = 0;
    }
    BOOL v29 = v28 != 1 || ((byte_1CDEF317A[a6 >> 3] >> (a6 & 7)) & 1) == 0;
    if (v13 > 0x56)
    {
      BOOL v30 = 1;
    }
    else
    {
      BOOL v30 = ((byte_1CDEF317A[a5 >> 3] >> (a5 & 7)) & 1) == 0;
      char v31 = ((byte_1CDEF317A[a5 >> 3] >> (a5 & 7)) & 1) == 0 || v29;
      if ((v31 & 1) == 0)
      {
        unint64_t v32 = *a4;
        uint64_t v164 = v32;
        if (v32)
        {
          llvm::MetadataTracking::track((uint64_t)&v164, v32, 2);
          __int16 v33 = v164;
        }
        else
        {
          __int16 v33 = 0;
        }
        uint64_t v56 = a1[1];
        long long v167 = xmmword_1CDB165C0;
        uint64_t v57 = v56 + 48 * sub_1CBE0418C(148, 4, &v167);
        uint64_t v58 = *(llvm::MachineFunction **)(a2 + 32);
        unsigned int v158 = v33;
        if (v33) {
          llvm::MetadataTracking::track((uint64_t)&v158, v33, 2);
        }
        int v59 = llvm::MachineFunction::CreateMachineInstr(v58, v57, &v158, 0);
        if (!v158)
        {
LABEL_85:
          uint64_t v60 = *(void *)(a2 + 40);
          *((void *)v59 + 3) = v60;
          uint64_t v61 = *(void *)(v60 + 32);
          uint64_t v62 = *((unsigned int *)v59 + 10);
          if (v62)
          {
            uint64_t v96 = *((void *)v59 + 4);
            uint64_t v97 = *(void *)(v61 + 40);
            uint64_t v98 = 32 * v62;
            do
            {
              if (!*(unsigned char *)v96)
              {
                uint64_t v99 = *(unsigned int *)(v96 + 4);
                if ((int)v99 >= 0) {
                  uint64_t v100 = (uint64_t *)(*(void *)(v97 + 272) + 8 * v99);
                }
                else {
                  uint64_t v100 = (uint64_t *)(*(void *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
                }
                uint64_t v101 = *v100;
                if (*v100)
                {
                  uint64_t v102 = *(void *)(v101 + 16);
                  *(void *)(v101 + 16) = v96;
                  *(void *)(v96 + 16) = v102;
                  if (*(unsigned char *)(v96 + 3))
                  {
                    *(void *)(v96 + 24) = v101;
                  }
                  else
                  {
                    *(void *)(v96 + 24) = 0;
                    uint64_t v100 = (uint64_t *)(v102 + 24);
                  }
                }
                else
                {
                  *(void *)(v96 + 16) = v96;
                  *(void *)(v96 + 24) = 0;
                }
                *uint64_t v100 = v96;
              }
              v96 += 32;
              v98 -= 32;
            }
            while (v98);
          }
          uint64_t v63 = *(void *)(v61 + 728);
          if (v63) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v63 + 24))(v63, v59);
          }
          unint64_t v64 = *a3 & 0xFFFFFFFFFFFFFFF8;
          *(void *)int v59 = v64 | *(void *)v59 & 7;
          *((void *)v59 + 1) = a3;
          *(void *)(v64 + 8) = v59;
          *a3 = *a3 & 7 | (unint64_t)v59;
          *((void *)&v167 + 1) = 0;
          uint64_t v168 = 0;
          uint64_t v169 = 0;
          LODWORD(v167) = 0x1000000;
          DWORD1(v167) = a5;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v167);
          LODWORD(v167) = 1;
          *((void *)&v167 + 1) = 0;
          uint64_t v168 = 0;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v167);
          *((void *)&v167 + 1) = 0;
          uint64_t v168 = 0;
          LODWORD(v167) = 0;
          DWORD1(v167) = a6;
          uint64_t v169 = 0;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v167);
          LODWORD(v167) = 1;
          *((void *)&v167 + 1) = 0;
          uint64_t v168 = 1;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v167);
          LODWORD(v167) = 1;
          *((void *)&v167 + 1) = 0;
          uint64_t v168 = 0;
          llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v167);
          uint64_t v17 = v164;
          if (!v164) {
            return;
          }
          int v18 = *v164;
          if ((v18 - 4) > 0x1E)
          {
            if ((v18 - 3) >= 0xFFFFFFFE) {
              unint64_t v76 = v164;
            }
            else {
              unint64_t v76 = 0;
            }
            if ((v18 - 3) < 0xFFFFFFFE) {
              goto LABEL_156;
            }
            unint64_t v20 = (unint64_t)(v76 + 8);
          }
          else
          {
            if ((v164[1] & 0x7F) != 2 && !*((_DWORD *)v164 + 3)) {
              return;
            }
            uint64_t v65 = *((void *)v164 + 2);
            if ((v65 & 4) == 0) {
              return;
            }
            unint64_t v20 = v65 & 0xFFFFFFFFFFFFFFF8;
            if (!v20) {
              return;
            }
          }
          int v74 = &v164;
          goto LABEL_155;
        }
        int v140 = *v158;
        if ((v140 - 4) > 0x1E)
        {
          if ((v140 - 3) >= 0xFFFFFFFE) {
            BOOL v147 = v158;
          }
          else {
            BOOL v147 = 0;
          }
          if ((v140 - 3) < 0xFFFFFFFE)
          {
            if (v140 == 3) {
              *((void *)v158 + 1) = 0;
            }
            goto LABEL_85;
          }
          unint64_t v142 = (unint64_t)(v147 + 8);
        }
        else
        {
          if ((v158[1] & 0x7F) != 2 && !*((_DWORD *)v158 + 3)) {
            goto LABEL_85;
          }
          uint64_t v141 = *((void *)v158 + 2);
          if ((v141 & 4) == 0) {
            goto LABEL_85;
          }
          unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFF8;
          if (!v142) {
            goto LABEL_85;
          }
        }
        *(void *)&long long v167 = &v158;
        sub_1CC5FA668(v142 + 16, &v167);
        goto LABEL_85;
      }
    }
    if (v29 || v24)
    {
      if ((v25 | v30))
      {
        uint64_t v34 = 0;
        uint64_t v157 = *(void *)(a2 + 32);
        uint64_t v156 = *(void *)(v157 + 40);
        unint64_t v35 = (unint64_t)a5 >> 3;
        unint64_t v36 = (unint64_t)a6 >> 3;
        while (1)
        {
          if (v13 <= 0x3FFFFFFE)
          {
            uint64_t v37 = (uint64_t)*(&off_1E66AB960)[v34];
            unsigned int v38 = *(unsigned __int16 *)(v37 + 22);
            if (v35 < v38)
            {
              uint64_t v39 = *(void *)(v37 + 8);
              char v40 = v22 ^ 1;
              if (((1 << (a5 & 7)) & *(unsigned __int8 *)(v39 + v35)) == 0) {
                char v40 = 1;
              }
              if ((v40 & 1) == 0 && v36 < v38 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v39 + v36)) != 0) {
                break;
              }
            }
          }
          v34 += 3;
          if (v34 == 45) {
            return;
          }
        }
        int v154 = (int)(&off_1E66AB960)[v34 + 1];
        unsigned int v78 = a5;
        uint64_t v79 = a1 + 12;
        uint64_t v80 = a1[12];
        uint64_t v81 = a1[18];
        uint64_t v82 = *(unsigned int *)(v80 + 24 * a5 + 4);
        unsigned int v83 = *(unsigned __int16 *)(v81 + 2 * v82);
        if (!*(_WORD *)(v81 + 2 * v82)) {
          goto LABEL_160;
        }
        LOWORD(v83) = v83 + a5;
        uint64_t v84 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v80 + 24 * a5 + 12));
        uint64_t v85 = (unsigned __int16 *)(v81 + 2 * v82 + 2);
        while (v154 != *v84)
        {
          int v86 = *v85++;
          LOWORD(v83) = v86 + v83;
          ++v84;
          if (!v86)
          {
            unsigned int v83 = 0;
            goto LABEL_160;
          }
        }
        unsigned int v83 = (unsigned __int16)v83;
LABEL_160:
        unsigned int v95 = a6;
        if (v83 == a6) {
          BOOL v153 = 1;
        }
        else {
          BOOL v153 = v83 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v79, a6, v83);
        }
        int v110 = 0;
        unsigned int v151 = HIDWORD((&off_1E66AB960)[v34 + 1]) - v154;
        int v152 = HIDWORD((&off_1E66AB960)[v34 + 1]);
        int v150 = LOBYTE((&off_1E66AB960)[v34 + 2]);
        while (1)
        {
          int v111 = v152 - v110;
          if (!v153) {
            int v111 = v110 + v154;
          }
          uint64_t v112 = a1[12];
          uint64_t v113 = a1[18];
          uint64_t v114 = *(unsigned int *)(v112 + 24 * v95 + 4);
          if (*(_WORD *)(v113 + 2 * v114))
          {
            unsigned __int16 v115 = *(_WORD *)(v113 + 2 * v114) + a6;
            int v116 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v112 + 24 * v95 + 12));
            unsigned int v117 = (unsigned __int16 *)(v113 + 2 * v114 + 2);
            while (v111 != *v116)
            {
              int v118 = *v117++;
              v115 += v118;
              ++v116;
              if (!v118) {
                goto LABEL_198;
              }
            }
            uint64_t v119 = v115;
          }
          else
          {
LABEL_198:
            uint64_t v119 = 0;
          }
          uint64_t v120 = *(unsigned int *)(v112 + 24 * v78 + 4);
          if (*(_WORD *)(v113 + 2 * v120))
          {
            unsigned __int16 v121 = *(_WORD *)(v113 + 2 * v120) + a5;
            unint64_t v122 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v112 + 24 * v78 + 12));
            unint64_t v123 = (unsigned __int16 *)(v113 + 2 * v120 + 2);
            while (v111 != *v122)
            {
              int v124 = *v123++;
              v121 += v124;
              ++v122;
              if (!v124) {
                goto LABEL_204;
              }
            }
            uint64_t v125 = v121;
          }
          else
          {
LABEL_204:
            uint64_t v125 = 0;
          }
          unsigned int v126 = *a4;
          if (v150)
          {
            unsigned int v161 = *a4;
            if (v126) {
              llvm::MetadataTracking::track((uint64_t)&v161, v126, 2);
            }
            unsigned int v127 = sub_1CBB321E8(a1, a2, a3, &v161, v125, v119);
            unsigned int v128 = v161;
            if (!v161) {
              goto LABEL_240;
            }
            int v129 = *v161;
            if ((v129 - 4) > 0x1E)
            {
              if ((v129 - 3) >= 0xFFFFFFFE) {
                unsigned int v133 = v161;
              }
              else {
                unsigned int v133 = 0;
              }
              if ((v129 - 3) < 0xFFFFFFFE) {
                goto LABEL_238;
              }
              unint64_t v131 = (unint64_t)(v133 + 8);
            }
            else
            {
              if ((v161[1] & 0x7F) != 2 && !*((_DWORD *)v161 + 3)) {
                goto LABEL_240;
              }
              uint64_t v130 = *((void *)v161 + 2);
              if ((v130 & 4) == 0) {
                goto LABEL_240;
              }
              unint64_t v131 = v130 & 0xFFFFFFFFFFFFFFF8;
              if (!v131) {
                goto LABEL_240;
              }
            }
            unsigned int v134 = &v161;
          }
          else
          {
            int v160 = *a4;
            if (v126) {
              llvm::MetadataTracking::track((uint64_t)&v160, v126, 2);
            }
            unsigned int v127 = sub_1CBB324BC(a1, a2, a3, &v160, v125, v119);
            unsigned int v128 = v160;
            if (!v160) {
              goto LABEL_240;
            }
            int v129 = *v160;
            if ((v129 - 4) > 0x1E)
            {
              if ((v129 - 3) >= 0xFFFFFFFE) {
                int64_t v135 = v160;
              }
              else {
                int64_t v135 = 0;
              }
              if ((v129 - 3) < 0xFFFFFFFE)
              {
LABEL_238:
                if (v129 == 3) {
                  *((void *)v128 + 1) = 0;
                }
                goto LABEL_240;
              }
              unint64_t v131 = (unint64_t)(v135 + 8);
            }
            else
            {
              if ((v160[1] & 0x7F) != 2 && !*((_DWORD *)v160 + 3)) {
                goto LABEL_240;
              }
              uint64_t v132 = *((void *)v160 + 2);
              if ((v132 & 4) == 0) {
                goto LABEL_240;
              }
              unint64_t v131 = v132 & 0xFFFFFFFFFFFFFFF8;
              if (!v131) {
                goto LABEL_240;
              }
            }
            unsigned int v134 = &v160;
          }
          *(void *)&long long v167 = v134;
          sub_1CC5FA668(v131 + 16, &v167);
LABEL_240:
          unsigned int v158 = (unsigned __int8 *)v157;
          int v159 = v127;
          if (*(unsigned char *)(v156 + 16))
          {
            if (((v110 != 0) & a7) != 0) {
              unsigned int v136 = 36;
            }
            else {
              unsigned int v136 = 4;
            }
            sub_1CB89517C((llvm::MachineFunction **)&v158, a6, v136, 0);
          }
          else
          {
            *((void *)&v167 + 1) = 0;
            uint64_t v168 = 0;
            uint64_t v169 = 0;
            LODWORD(v167) = 50331648;
            DWORD1(v167) = a5;
            llvm::MachineInstr::addOperand(v127, (llvm::MachineFunction *)v157, (const llvm::MachineOperand *)&v167);
            if (v110)
            {
              *((void *)&v167 + 1) = 0;
              uint64_t v168 = 0;
              uint64_t v169 = 0;
              LODWORD(v167) = 0x2000000;
              DWORD1(v167) = a5;
              llvm::MachineInstr::addOperand(v159, (llvm::MachineFunction *)v158, (const llvm::MachineOperand *)&v167);
            }
          }
          if (++v110 > v151) {
            return;
          }
        }
      }
      BOOL v43 = *a4;
      uint64_t v162 = v43;
      if (v43)
      {
        llvm::MetadataTracking::track((uint64_t)&v162, v43, 2);
        uint64_t v44 = a1[1] + 216336;
        uint64_t v45 = *(llvm::MachineFunction **)(a2 + 32);
        unsigned int v158 = v162;
        if (v162) {
          llvm::MetadataTracking::track((uint64_t)&v158, v162, 2);
        }
      }
      else
      {
        uint64_t v44 = a1[1] + 216336;
        uint64_t v45 = *(llvm::MachineFunction **)(a2 + 32);
        unsigned int v158 = 0;
      }
      unint64_t v66 = llvm::MachineFunction::CreateMachineInstr(v45, v44, &v158, 0);
      if (!v158)
      {
LABEL_97:
        uint64_t v67 = *(void *)(a2 + 40);
        *((void *)v66 + 3) = v67;
        uint64_t v68 = *(void *)(v67 + 32);
        uint64_t v69 = *((unsigned int *)v66 + 10);
        if (v69)
        {
          uint64_t v103 = *((void *)v66 + 4);
          uint64_t v104 = *(void *)(v68 + 40);
          uint64_t v105 = 32 * v69;
          do
          {
            if (!*(unsigned char *)v103)
            {
              uint64_t v106 = *(unsigned int *)(v103 + 4);
              if ((int)v106 >= 0) {
                uint64_t v107 = (uint64_t *)(*(void *)(v104 + 272) + 8 * v106);
              }
              else {
                uint64_t v107 = (uint64_t *)(*(void *)(v104 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
              }
              uint64_t v108 = *v107;
              if (*v107)
              {
                uint64_t v109 = *(void *)(v108 + 16);
                *(void *)(v108 + 16) = v103;
                *(void *)(v103 + 16) = v109;
                if (*(unsigned char *)(v103 + 3))
                {
                  *(void *)(v103 + 24) = v108;
                }
                else
                {
                  *(void *)(v103 + 24) = 0;
                  uint64_t v107 = (uint64_t *)(v109 + 24);
                }
              }
              else
              {
                *(void *)(v103 + 16) = v103;
                *(void *)(v103 + 24) = 0;
              }
              *uint64_t v107 = v103;
            }
            v103 += 32;
            v105 -= 32;
          }
          while (v105);
        }
        uint64_t v70 = *(void *)(v68 + 728);
        if (v70) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v66);
        }
        unint64_t v71 = *a3 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v66 = v71 | *(void *)v66 & 7;
        *((void *)v66 + 1) = a3;
        *(void *)(v71 + 8) = v66;
        *a3 = *a3 & 7 | (unint64_t)v66;
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        LODWORD(v167) = 0x1000000;
        DWORD1(v167) = a5;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        LODWORD(v167) = 1;
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 0;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        LODWORD(v167) = 1;
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 8;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 0;
        LODWORD(v167) = 0;
        DWORD1(v167) = a6;
        uint64_t v169 = 0;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        LODWORD(v167) = 1;
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 0;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        LODWORD(v167) = 1;
        *((void *)&v167 + 1) = 0;
        uint64_t v168 = 0;
        llvm::MachineInstr::addOperand(v66, v45, (const llvm::MachineOperand *)&v167);
        uint64_t v17 = v162;
        if (!v162) {
          return;
        }
        int v18 = *v162;
        if ((v18 - 4) > 0x1E)
        {
          if ((v18 - 3) >= 0xFFFFFFFE) {
            uint64_t v77 = v162;
          }
          else {
            uint64_t v77 = 0;
          }
          if ((v18 - 3) < 0xFFFFFFFE) {
            goto LABEL_156;
          }
          unint64_t v20 = (unint64_t)(v77 + 8);
        }
        else
        {
          if ((v162[1] & 0x7F) != 2 && !*((_DWORD *)v162 + 3)) {
            return;
          }
          uint64_t v72 = *((void *)v162 + 2);
          if ((v72 & 4) == 0) {
            return;
          }
          unint64_t v20 = v72 & 0xFFFFFFFFFFFFFFF8;
          if (!v20) {
            return;
          }
        }
        int v74 = &v162;
        goto LABEL_155;
      }
      int v143 = *v158;
      if ((v143 - 4) > 0x1E)
      {
        if ((v143 - 3) >= 0xFFFFFFFE) {
          BOOL v148 = v158;
        }
        else {
          BOOL v148 = 0;
        }
        if ((v143 - 3) < 0xFFFFFFFE)
        {
          if (v143 == 3) {
            *((void *)v158 + 1) = 0;
          }
          goto LABEL_97;
        }
        unint64_t v145 = (unint64_t)(v148 + 8);
      }
      else
      {
        if ((v158[1] & 0x7F) != 2 && !*((_DWORD *)v158 + 3)) {
          goto LABEL_97;
        }
        uint64_t v144 = *((void *)v158 + 2);
        if ((v144 & 4) == 0) {
          goto LABEL_97;
        }
        unint64_t v145 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (!v145) {
          goto LABEL_97;
        }
      }
      *(void *)&long long v167 = &v158;
      sub_1CC5FA668(v145 + 16, &v167);
      goto LABEL_97;
    }
    unsigned int v41 = *a4;
    uint64_t v163 = v41;
    if (v41)
    {
      llvm::MetadataTracking::track((uint64_t)&v163, v41, 2);
      unsigned int v42 = v163;
    }
    else
    {
      unsigned int v42 = 0;
    }
    uint64_t v46 = a1[1];
    long long v167 = xmmword_1CDB16620;
    uint64_t v47 = v46 + 48 * sub_1CBE0418C(148, 4, &v167);
    uint64_t v48 = *(llvm::MachineFunction **)(a2 + 32);
    unsigned int v158 = v42;
    if (v42) {
      llvm::MetadataTracking::track((uint64_t)&v158, v42, 2);
    }
    uint64_t v49 = llvm::MachineFunction::CreateMachineInstr(v48, v47, &v158, 0);
    if (!v158)
    {
LABEL_71:
      uint64_t v50 = *(void *)(a2 + 40);
      *((void *)v49 + 3) = v50;
      uint64_t v51 = *(void *)(v50 + 32);
      uint64_t v52 = *((unsigned int *)v49 + 10);
      if (v52)
      {
        uint64_t v87 = *((void *)v49 + 4);
        uint64_t v88 = *(void *)(v51 + 40);
        uint64_t v89 = 32 * v52;
        do
        {
          if (!*(unsigned char *)v87)
          {
            uint64_t v90 = *(unsigned int *)(v87 + 4);
            if ((int)v90 >= 0) {
              int v91 = (uint64_t *)(*(void *)(v88 + 272) + 8 * v90);
            }
            else {
              int v91 = (uint64_t *)(*(void *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
            }
            uint64_t v92 = *v91;
            if (*v91)
            {
              uint64_t v93 = *(void *)(v92 + 16);
              *(void *)(v92 + 16) = v87;
              *(void *)(v87 + 16) = v93;
              if (*(unsigned char *)(v87 + 3))
              {
                *(void *)(v87 + 24) = v92;
              }
              else
              {
                *(void *)(v87 + 24) = 0;
                int v91 = (uint64_t *)(v93 + 24);
              }
            }
            else
            {
              *(void *)(v87 + 16) = v87;
              *(void *)(v87 + 24) = 0;
            }
            *int v91 = v87;
          }
          v87 += 32;
          v89 -= 32;
        }
        while (v89);
      }
      uint64_t v53 = *(void *)(v51 + 728);
      if (v53) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v53 + 24))(v53, v49);
      }
      unint64_t v54 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v49 = v54 | *(void *)v49 & 7;
      *((void *)v49 + 1) = a3;
      *(void *)(v54 + 8) = v49;
      *a3 = *a3 & 7 | (unint64_t)v49;
      *((void *)&v167 + 1) = 0;
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      LODWORD(v167) = 0x1000000;
      DWORD1(v167) = a5;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v167);
      LODWORD(v167) = 1;
      *((void *)&v167 + 1) = 0;
      uint64_t v168 = 0;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v167);
      *((void *)&v167 + 1) = 0;
      uint64_t v168 = 0;
      LODWORD(v167) = 0;
      DWORD1(v167) = a6;
      uint64_t v169 = 0;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v167);
      LODWORD(v167) = 1;
      *((void *)&v167 + 1) = 0;
      uint64_t v168 = 1;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v167);
      LODWORD(v167) = 1;
      *((void *)&v167 + 1) = 0;
      uint64_t v168 = 0;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v167);
      uint64_t v17 = v163;
      if (!v163) {
        return;
      }
      int v18 = *v163;
      if ((v18 - 4) > 0x1E)
      {
        if ((v18 - 3) >= 0xFFFFFFFE) {
          uint64_t v73 = v163;
        }
        else {
          uint64_t v73 = 0;
        }
        if ((v18 - 3) < 0xFFFFFFFE) {
          goto LABEL_156;
        }
        unint64_t v20 = (unint64_t)(v73 + 8);
      }
      else
      {
        if ((v163[1] & 0x7F) != 2 && !*((_DWORD *)v163 + 3)) {
          return;
        }
        uint64_t v55 = *((void *)v163 + 2);
        if ((v55 & 4) == 0) {
          return;
        }
        unint64_t v20 = v55 & 0xFFFFFFFFFFFFFFF8;
        if (!v20) {
          return;
        }
      }
      int v74 = &v163;
LABEL_155:
      *(void *)&long long v167 = v74;
      sub_1CC5FA668(v20 + 16, &v167);
      return;
    }
    int v137 = *v158;
    if ((v137 - 4) > 0x1E)
    {
      if ((v137 - 3) >= 0xFFFFFFFE) {
        unsigned int v146 = v158;
      }
      else {
        unsigned int v146 = 0;
      }
      if ((v137 - 3) < 0xFFFFFFFE)
      {
        if (v137 == 3) {
          *((void *)v158 + 1) = 0;
        }
        goto LABEL_71;
      }
      unint64_t v139 = (unint64_t)(v146 + 8);
    }
    else
    {
      if ((v158[1] & 0x7F) != 2 && !*((_DWORD *)v158 + 3)) {
        goto LABEL_71;
      }
      uint64_t v138 = *((void *)v158 + 2);
      if ((v138 & 4) == 0) {
        goto LABEL_71;
      }
      unint64_t v139 = v138 & 0xFFFFFFFFFFFFFFF8;
      if (!v139) {
        goto LABEL_71;
      }
    }
    *(void *)&long long v167 = &v158;
    sub_1CC5FA668(v139 + 16, &v167);
    goto LABEL_71;
  }
  unsigned int v14 = a6 - 1;
  if (((byte_1CDEF36D2[a5 >> 3] >> (a5 & 7)) & 1) == 0 || v14 > 0x3FFFFFFE) {
    goto LABEL_16;
  }
  unint64_t v15 = (unint64_t)a6 >> 3;
  if (a6 > 0xE7 || ((byte_1CDEF36D2[v15] >> (a6 & 7)) & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v16 = *a4;
  unsigned int v166 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v166, v16, 2);
  }
  sub_1CBB321E8(a1, a2, a3, &v166, a5, a6);
  uint64_t v17 = v166;
  if (!v166) {
    return;
  }
  int v18 = *v166;
  if ((v18 - 4) > 0x1E)
  {
    if ((v18 - 3) >= 0xFFFFFFFE) {
      uint64_t v94 = v166;
    }
    else {
      uint64_t v94 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v94 + 8);
LABEL_154:
      int v74 = &v166;
      goto LABEL_155;
    }
    goto LABEL_156;
  }
  if ((v166[1] & 0x7F) == 2 || *((_DWORD *)v166 + 3))
  {
    uint64_t v19 = *((void *)v166 + 2);
    if ((v19 & 4) != 0)
    {
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (v20) {
        goto LABEL_154;
      }
    }
  }
}

uint64_t sub_1CBB337BC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 317) > 0xFu) {
    return 0;
  }
  *a4 = dword_1CDB18B58[(__int16)(**(_WORD **)(a2 + 16) - 317)];
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(unsigned char *)v4 || *(unsigned char *)(v4 + 96) != 5 || *(unsigned char *)(v4 + 128) != 1 || *(void *)(v4 + 144)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v4 + 112);
  return *(unsigned int *)(v4 + 4);
}

uint64_t sub_1CBB3382C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 72))(a1, a2, a3, &v4);
}

uint64_t sub_1CBB33874(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 341) > 0xFu) {
    return 0;
  }
  *a4 = dword_1CDB18B58[(__int16)(**(_WORD **)(a2 + 16) - 341)];
  uint64_t v4 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v4 + 64) || *(unsigned char *)(v4 + 96) != 5 || *(unsigned char *)(v4 + 128) != 1 || *(void *)(v4 + 144)) {
    return 0;
  }
  *a3 = *(_DWORD *)(v4 + 112);
  return *(unsigned int *)(v4 + 68);
}

uint64_t sub_1CBB338E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, a3, &v4);
}

void sub_1CBB3392C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v70 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v70)
  {
    uint64_t v16 = *(unsigned __int8 **)(a3 + 56);
    uint64_t v70 = v16;
    if (v16) {
      llvm::MetadataTracking::track((uint64_t)&v70, v16, 2);
    }
  }
  unint64_t v17 = *(unsigned __int16 *)(*(void *)a7 + 24);
  unint64_t v18 = v17 >> 5;
  int v19 = dword_1CDC6E078[v17 >> 5];
  int v20 = 1 << v17;
  int v65 = a5;
  if ((v20 & v19) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 356;
  }
  else if ((dword_1CDC6D610[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 343;
  }
  else if ((dword_1CDC6E2B8[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 349;
  }
  else if ((dword_1CDC6EA48[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 351;
  }
  else if ((dword_1CDC6EF78[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 352;
  }
  else if ((dword_1CDC6F928[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 354;
  }
  else if ((dword_1CDC70098[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 355;
  }
  else if ((dword_1CDC70518[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 341;
  }
  else if ((dword_1CDC70B88[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 342;
  }
  else if ((dword_1CDC71628[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 344;
  }
  else if ((dword_1CDC718F8[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 345;
  }
  else if ((dword_1CDC71BF8[v18] & v20) != 0)
  {
    int v21 = a4;
    unsigned int v22 = 346;
  }
  else
  {
    int v21 = a4;
    if ((dword_1CDC71F08[v18] & v20) != 0)
    {
      unsigned int v22 = 347;
    }
    else if ((dword_1CDC726F8[v18] & v20) != 0)
    {
      unsigned int v22 = 348;
    }
    else if ((dword_1CDC729C8[v18] & v20) != 0)
    {
      unsigned int v22 = 350;
    }
    else
    {
      unsigned int v22 = 0;
    }
  }
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t v24 = *(void *)(v23 + 56);
  FixedStacunint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v23 + 432), a6);
  if (FixedStack) {
    int v26 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = *(void *)(v24 + 8) + 40 * (*(_DWORD *)(v24 + 32) + a6);
  uint64_t v28 = *(unsigned int *)(v27 + 8);
  char v29 = *(unsigned char *)(v27 + 16);
  v67[0] = (unint64_t)FixedStack | 4;
  v67[1] = 0;
  int v68 = v26;
  char v69 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v23, (uint64_t)v67, 2, v28, v29, &v71, 0, 1, 0, 0, 0);
  uint64_t v31 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v31 + 329))
  {
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v32 = *(void *)v23;
    LODWORD(v71) = 0;
    if (sub_1CBC1C7DC(v31, v32, "MemoryWriteCacheCtl", (int *)&v71)) {
      uint64_t v33 = v71;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v31 = *(void *)(a1 + 80);
  }
  uint64_t v34 = *(void *)v23;
  LODWORD(v71) = 0;
  int v35 = sub_1CBC1C7DC(v31, v34, "MemoryWriteL2Pers", (int *)&v71);
  uint64_t v36 = v71;
  uint64_t v37 = *(void *)(a1 + 8) + 48 * v22;
  unsigned int v38 = *(llvm::MachineFunction **)(a2 + 32);
  *(void *)&long long v71 = v70;
  if (v70) {
    llvm::MetadataTracking::track((uint64_t)&v71, v70, 2);
  }
  unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v38, v37, (unsigned __int8 **)&v71, 0);
  if ((void)v71) {
    llvm::MetadataTracking::untrack((uint64_t)&v71, (unsigned __int8 *)v71);
  }
  uint64_t v40 = *(void *)(a2 + 40);
  *((void *)MachineInstr + 3) = v40;
  uint64_t v41 = *(void *)(v40 + 32);
  uint64_t v42 = *((unsigned int *)MachineInstr + 10);
  if (v42)
  {
    uint64_t v54 = *((void *)MachineInstr + 4);
    uint64_t v55 = *(void *)(v41 + 40);
    uint64_t v56 = 32 * v42;
    do
    {
      if (!*(unsigned char *)v54)
      {
        uint64_t v57 = *(unsigned int *)(v54 + 4);
        if ((int)v57 >= 0) {
          uint64_t v58 = (uint64_t *)(*(void *)(v55 + 272) + 8 * v57);
        }
        else {
          uint64_t v58 = (uint64_t *)(*(void *)(v55 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
        }
        uint64_t v59 = *v58;
        if (*v58)
        {
          uint64_t v60 = *(void *)(v59 + 16);
          *(void *)(v59 + 16) = v54;
          *(void *)(v54 + 16) = v60;
          if (*(unsigned char *)(v54 + 3))
          {
            *(void *)(v54 + 24) = v59;
          }
          else
          {
            *(void *)(v54 + 24) = 0;
            uint64_t v58 = (uint64_t *)(v60 + 24);
          }
        }
        else
        {
          *(void *)(v54 + 16) = v54;
          *(void *)(v54 + 24) = 0;
        }
        *uint64_t v58 = v54;
      }
      v54 += 32;
      v56 -= 32;
    }
    while (v56);
  }
  uint64_t v43 = *(void *)(v41 + 728);
  if (v43) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v43 + 24))(v43, MachineInstr);
  }
  unint64_t v44 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t MachineInstr = v44 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = a3;
  *(void *)(v44 + 8) = MachineInstr;
  *(void *)a3 = *(void *)a3 & 7 | (unint64_t)MachineInstr;
  v66[0] = v38;
  v66[1] = MachineInstr;
  uint64_t v45 = 4 * v36;
  if (!v35) {
    uint64_t v45 = 4;
  }
  if (v33 == 3) {
    uint64_t v45 = 4;
  }
  LODWORD(v71) = 1;
  *((void *)&v71 + 1) = 0;
  *(void *)&long long v72 = v45 | v33;
  llvm::MachineInstr::addOperand(MachineInstr, v38, (const llvm::MachineOperand *)&v71);
  LODWORD(v71) = 1;
  *((void *)&v71 + 1) = 0;
  *(void *)&long long v72 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v38, (const llvm::MachineOperand *)&v71);
  if (v65) {
    unsigned int v46 = 8;
  }
  else {
    unsigned int v46 = 0;
  }
  uint64_t v47 = sub_1CB89517C(v66, v21, v46, 0);
  uint64_t v48 = v47[1];
  uint64_t v49 = *v47;
  LODWORD(v71) = 5;
  *((void *)&v71 + 1) = 0;
  LODWORD(v72) = a6;
  llvm::MachineInstr::addOperand(v48, v49, (const llvm::MachineOperand *)&v71);
  uint64_t v51 = *v47;
  uint64_t v50 = v47[1];
  LODWORD(v71) = 1;
  *((void *)&v71 + 1) = 0;
  *(void *)&long long v72 = 0;
  llvm::MachineInstr::addOperand(v50, v51, (const llvm::MachineOperand *)&v71);
  uint64_t v53 = *v47;
  uint64_t v52 = v47[1];
  LODWORD(v71) = 1;
  *((void *)&v71 + 1) = 0;
  *(void *)&long long v72 = a9;
  llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v71);
  llvm::MachineInstr::addMemOperand(v47[1], *v47, MachineMemOperand);
  if (v70)
  {
    int v61 = *v70;
    if ((v61 - 4) > 0x1E)
    {
      if ((v61 - 3) >= 0xFFFFFFFE) {
        unint64_t v64 = v70;
      }
      else {
        unint64_t v64 = 0;
      }
      if ((v61 - 3) < 0xFFFFFFFE)
      {
        if (v61 == 3) {
          *((void *)v70 + 1) = 0;
        }
        return;
      }
      unint64_t v63 = (unint64_t)(v64 + 8);
    }
    else
    {
      if ((v70[1] & 0x7F) != 2 && !*((_DWORD *)v70 + 3)) {
        return;
      }
      uint64_t v62 = *((void *)v70 + 2);
      if ((v62 & 4) == 0) {
        return;
      }
      unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
      if (!v63) {
        return;
      }
    }
    *(void *)&long long v71 = &v70;
    sub_1CC5FA668(v63 + 16, &v71);
  }
}

uint64_t sub_1CBB33F24(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = a4;
  if ((a4 & 0x80000000) != 0) {
    unsigned int MaxLaneMaskForVReg = llvm::MachineRegisterInfo::getMaxLaneMaskForVReg(*(void *)(v15 + 40), a4);
  }
  else {
    unsigned int MaxLaneMaskForVReg = ~(-1 << (llvm::TargetRegisterInfo::getRegSizeInBits(a8, a4, *(void *)(v15 + 40)) >> 4));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 456))(a1, a2, a3, v16, a5, a6, a7, a8, MaxLaneMaskForVReg);
}

void sub_1CBB3400C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v60)
  {
    uint64_t v15 = *(unsigned __int8 **)(a3 + 56);
    uint64_t v60 = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v60, v15, 2);
    }
  }
  unint64_t v16 = *(unsigned __int16 *)(*(void *)a6 + 24);
  unint64_t v17 = v16 >> 5;
  int v18 = dword_1CDC6E078[v16 >> 5];
  int v19 = 1 << v16;
  int v55 = a4;
  uint64_t v56 = a8;
  if ((v19 & v18) != 0)
  {
    unsigned int v20 = 332;
  }
  else if ((dword_1CDC6D610[v17] & v19) != 0)
  {
    unsigned int v20 = 319;
  }
  else if ((dword_1CDC6E2B8[v17] & v19) != 0)
  {
    unsigned int v20 = 325;
  }
  else if ((dword_1CDC6EA48[v17] & v19) != 0)
  {
    unsigned int v20 = 327;
  }
  else if ((dword_1CDC6EF78[v17] & v19) != 0)
  {
    unsigned int v20 = 328;
  }
  else if ((dword_1CDC6F928[v17] & v19) != 0)
  {
    unsigned int v20 = 330;
  }
  else if ((dword_1CDC70098[v17] & v19) != 0)
  {
    unsigned int v20 = 331;
  }
  else if ((dword_1CDC70518[v17] & v19) != 0)
  {
    unsigned int v20 = 317;
  }
  else if ((dword_1CDC70B88[v17] & v19) != 0)
  {
    unsigned int v20 = 318;
  }
  else if ((dword_1CDC71628[v17] & v19) != 0)
  {
    unsigned int v20 = 320;
  }
  else if ((dword_1CDC718F8[v17] & v19) != 0)
  {
    unsigned int v20 = 321;
  }
  else if ((dword_1CDC71BF8[v17] & v19) != 0)
  {
    unsigned int v20 = 322;
  }
  else if ((dword_1CDC71F08[v17] & v19) != 0)
  {
    unsigned int v20 = 323;
  }
  else if ((dword_1CDC726F8[v17] & v19) != 0)
  {
    unsigned int v20 = 324;
  }
  else if ((dword_1CDC729C8[v17] & v19) != 0)
  {
    unsigned int v20 = 326;
  }
  else
  {
    unsigned int v20 = 0;
  }
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v22 = *(void *)(v21 + 56);
  FixedStacunint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v21 + 432), a5);
  if (FixedStack) {
    int v24 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = *(void *)(v22 + 8) + 40 * (*(_DWORD *)(v22 + 32) + a5);
  uint64_t v26 = *(unsigned int *)(v25 + 8);
  char v27 = *(unsigned char *)(v25 + 16);
  v57[0] = (unint64_t)FixedStack | 4;
  v57[1] = 0;
  int v58 = v24;
  char v59 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v21, (uint64_t)v57, 1, v26, v27, &v62, 0, 1, 0, 0, 0);
  uint64_t v29 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v29 + 329))
  {
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v30 = *(void *)v21;
    LODWORD(v62) = 0;
    if (sub_1CBC1C7DC(v29, v30, "MemoryWriteCacheCtl", (int *)&v62)) {
      uint64_t v31 = v62;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v29 = *(void *)(a1 + 80);
  }
  uint64_t v32 = *(void *)v21;
  LODWORD(v62) = 0;
  int v33 = sub_1CBC1C7DC(v29, v32, "MemoryWriteL2Pers", (int *)&v62);
  uint64_t v34 = v62;
  uint64_t v35 = *(void *)(a1 + 8) + 48 * v20;
  uint64_t v36 = *(llvm::MachineFunction **)(a2 + 32);
  int v61 = v60;
  if (v60) {
    llvm::MetadataTracking::track((uint64_t)&v61, v60, 2);
  }
  uint64_t v37 = llvm::MachineFunction::CreateMachineInstr(v36, v35, &v61, 0);
  if (v61) {
    llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
  }
  uint64_t v38 = *(void *)(a2 + 40);
  *((void *)v37 + 3) = v38;
  uint64_t v39 = *(void *)(v38 + 32);
  uint64_t v40 = *((unsigned int *)v37 + 10);
  if (v40)
  {
    uint64_t v44 = *((void *)v37 + 4);
    uint64_t v45 = *(void *)(v39 + 40);
    uint64_t v46 = 32 * v40;
    do
    {
      if (!*(unsigned char *)v44)
      {
        uint64_t v47 = *(unsigned int *)(v44 + 4);
        if ((int)v47 >= 0) {
          uint64_t v48 = (uint64_t *)(*(void *)(v45 + 272) + 8 * v47);
        }
        else {
          uint64_t v48 = (uint64_t *)(*(void *)(v45 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
        }
        uint64_t v49 = *v48;
        if (*v48)
        {
          uint64_t v50 = *(void *)(v49 + 16);
          *(void *)(v49 + 16) = v44;
          *(void *)(v44 + 16) = v50;
          if (*(unsigned char *)(v44 + 3))
          {
            *(void *)(v44 + 24) = v49;
          }
          else
          {
            *(void *)(v44 + 24) = 0;
            uint64_t v48 = (uint64_t *)(v50 + 24);
          }
        }
        else
        {
          *(void *)(v44 + 16) = v44;
          *(void *)(v44 + 24) = 0;
        }
        *uint64_t v48 = v44;
      }
      v44 += 32;
      v46 -= 32;
    }
    while (v46);
  }
  uint64_t v41 = *(void *)(v39 + 728);
  if (v41) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
  }
  unint64_t v42 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v37 = v42 | *(void *)v37 & 7;
  *((void *)v37 + 1) = a3;
  *(void *)(v42 + 8) = v37;
  *(void *)a3 = *(void *)a3 & 7 | (unint64_t)v37;
  *((void *)&v62 + 1) = 0;
  long long v63 = 0uLL;
  LODWORD(v62) = 0x1000000;
  DWORD1(v62) = v55;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  uint64_t v43 = 4 * v34;
  if (!v33) {
    uint64_t v43 = 4;
  }
  if (v31 == 3) {
    uint64_t v43 = 4;
  }
  LODWORD(v62) = 1;
  *((void *)&v62 + 1) = 0;
  *(void *)&long long v63 = v43 | v31;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 1;
  *((void *)&v62 + 1) = 0;
  *(void *)&long long v63 = 0;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 5;
  *((void *)&v62 + 1) = 0;
  LODWORD(v63) = a5;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 1;
  *((void *)&v62 + 1) = 0;
  *(void *)&long long v63 = 0;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  LODWORD(v62) = 1;
  *((void *)&v62 + 1) = 0;
  *(void *)&long long v63 = v56;
  llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v62);
  llvm::MachineInstr::addMemOperand(v37, v36, MachineMemOperand);
  if (v60)
  {
    int v51 = *v60;
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        uint64_t v54 = v60;
      }
      else {
        uint64_t v54 = 0;
      }
      if ((v51 - 3) < 0xFFFFFFFE)
      {
        if (v51 == 3) {
          *((void *)v60 + 1) = 0;
        }
        return;
      }
      unint64_t v53 = (unint64_t)(v54 + 8);
    }
    else
    {
      if ((v60[1] & 0x7F) != 2 && !*((_DWORD *)v60 + 3)) {
        return;
      }
      uint64_t v52 = *((void *)v60 + 2);
      if ((v52 & 4) == 0) {
        return;
      }
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        return;
      }
    }
    *(void *)&long long v62 = &v60;
    sub_1CC5FA668(v53 + 16, &v62);
  }
}

uint64_t sub_1CBB345D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = a4;
  if ((a4 & 0x80000000) != 0) {
    unsigned int MaxLaneMaskForVReg = llvm::MachineRegisterInfo::getMaxLaneMaskForVReg(*(void *)(v13 + 40), a4);
  }
  else {
    unsigned int MaxLaneMaskForVReg = ~(-1 << (llvm::TargetRegisterInfo::getRegSizeInBits(a7, a4, *(void *)(v13 + 40)) >> 4));
  }
  unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 472);

  return v16(a1, a2, a3, v14, a5, a6, a7, MaxLaneMaskForVReg);
}

llvm::MachineInstr *sub_1CBB346B8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t *a6, int a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0FA0))
  {
    byte_1EBCC0F98 = 1;
    __cxa_guard_release(&qword_1EBCC0FA0);
  }
  if (byte_1EBCC0F98 != 1 || *a4) {
    return 0;
  }
  int v15 = **(unsigned __int16 **)(a3 + 16);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a3 + 24) + 32) + 16);
  *(void *)&long long v56 = &unk_1F25FDCB8;
  *((void *)&v56 + 1) = v16;
  *((void *)&v57 + 1) = &v56;
  unsigned int v17 = sub_1CBD854F8((uint64_t)&v56);
  if (*((long long **)&v57 + 1) == &v56)
  {
    (*(void (**)(long long *))(v56 + 32))(&v56);
  }
  else if (*((void *)&v57 + 1))
  {
    (*(void (**)(void))(**((void **)&v57 + 1) + 40))();
  }
  if (!sub_1CBE530B4(v15, v17)) {
    return 0;
  }
  if (sub_1CBC2F844(a3)) {
    return 0;
  }
  if (**(_WORD **)(a3 + 16) == 19) {
    return 0;
  }
  if (sub_1CBC2F7C4(a3)) {
    return 0;
  }
  unsigned int v52 = sub_1CBE52EB8(**(unsigned __int16 **)(a3 + 16), 0, 3);
  int v18 = *(_DWORD **)(a3 + 32);
  unsigned int v19 = v18[1];
  if ((v19 & 0x80000000) == 0) {
    return 0;
  }
  unsigned int v20 = (*v18 >> 8) & 0xFFF;
  uint64_t v21 = *(void *)(a2 + 56);
  if (v20)
  {
    if (v20 >= 0x10 && v20 - 25 > 0xE) {
      return 0;
    }
    if (v20 >= 0x10) {
      unsigned int RegSizeInBits = 32;
    }
    else {
      unsigned int RegSizeInBits = 16;
    }
    if (v20 >= 0x10) {
      int v23 = 2 * v20 - 50;
    }
    else {
      int v23 = v20 - 1;
    }
  }
  else
  {
    unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a1 + 88, v19, *(void *)(a2 + 40));
    int v23 = 0;
  }
  FixedStacunint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a2 + 432), a7);
  v53[0] = (unint64_t)FixedStack | 4;
  v53[1] = (2 * v23);
  char v55 = 0;
  if (FixedStack) {
    int v25 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v25 = 0;
  }
  int v54 = v25;
  char v26 = *(unsigned char *)(*(void *)(v21 + 8) + 40 * (*(_DWORD *)(v21 + 32) + a7) + 16);
  long long v56 = 0u;
  long long v57 = 0u;
  MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(a2, (uint64_t)v53, 2, RegSizeInBits >> 3, v26, &v56, 0, 1, 0, 0, 0);
  unsigned int v28 = RegSizeInBits >> sub_1CBE52FAC(**(unsigned __int16 **)(a3 + 16));
  if (v28 != 32 && v28 != 16) {
    return 0;
  }
  uint64_t v29 = *(void *)(a3 + 24);
  uint64_t v30 = *(void *)(a1 + 8) + 48 * v52;
  uint64_t v31 = *(llvm::MachineFunction **)(v29 + 32);
  uint64_t v32 = *(unsigned __int8 **)(a3 + 56);
  *(void *)&long long v56 = v32;
  if (v32) {
    llvm::MetadataTracking::track((uint64_t)&v56, v32, 2);
  }
  unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v31, v30, (unsigned __int8 **)&v56, 0);
  if ((void)v56) {
    llvm::MetadataTracking::untrack((uint64_t)&v56, (unsigned __int8 *)v56);
  }
  uint64_t v33 = *(void *)(v29 + 40);
  *((void *)MachineInstr + 3) = v33;
  uint64_t v34 = *(void *)(v33 + 32);
  uint64_t v35 = *((unsigned int *)MachineInstr + 10);
  if (v35)
  {
    uint64_t v45 = *((void *)MachineInstr + 4);
    uint64_t v46 = *(void *)(v34 + 40);
    uint64_t v47 = 32 * v35;
    do
    {
      if (!*(unsigned char *)v45)
      {
        uint64_t v48 = *(unsigned int *)(v45 + 4);
        if ((int)v48 >= 0) {
          uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
        }
        else {
          uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
        }
        uint64_t v50 = *v49;
        if (*v49)
        {
          uint64_t v51 = *(void *)(v50 + 16);
          *(void *)(v50 + 16) = v45;
          *(void *)(v45 + 16) = v51;
          if (*(unsigned char *)(v45 + 3))
          {
            *(void *)(v45 + 24) = v50;
          }
          else
          {
            *(void *)(v45 + 24) = 0;
            uint64_t v49 = (uint64_t *)(v51 + 24);
          }
        }
        else
        {
          *(void *)(v45 + 16) = v45;
          *(void *)(v45 + 24) = 0;
        }
        *uint64_t v49 = v45;
      }
      v45 += 32;
      v47 -= 32;
    }
    while (v47);
  }
  uint64_t v36 = *(void *)(v34 + 728);
  if (v36) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v36 + 24))(v36, MachineInstr);
  }
  unint64_t v37 = *a6 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t MachineInstr = v37 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = a6;
  *(void *)(v37 + 8) = MachineInstr;
  *a6 = *a6 & 7 | (unint64_t)MachineInstr;
  if (v28 == 16) {
    int v38 = 86;
  }
  else {
    int v38 = 87;
  }
  *((void *)&v56 + 1) = 0;
  LODWORD(v57) = v38;
  DWORD2(v57) = 0;
  LODWORD(v56) = 7;
  DWORD1(v56) = v23;
  llvm::MachineInstr::addOperand(MachineInstr, v31, (const llvm::MachineOperand *)&v56);
  LODWORD(v56) = 5;
  *((void *)&v56 + 1) = 0;
  LODWORD(v57) = a7;
  llvm::MachineInstr::addOperand(MachineInstr, v31, (const llvm::MachineOperand *)&v56);
  if (*(_DWORD *)(a3 + 40) >= 2u)
  {
    unint64_t v39 = 1;
    uint64_t v40 = 32;
    do
    {
      llvm::MachineInstr::addOperand(MachineInstr, v31, (const llvm::MachineOperand *)(*(void *)(a3 + 32) + v40));
      ++v39;
      v40 += 32;
    }
    while (v39 < *(unsigned int *)(a3 + 40));
  }
  if (MachineMemOperand) {
    llvm::MachineInstr::addMemOperand(MachineInstr, (llvm::MachineFunction *)a2, MachineMemOperand);
  }
  if (*(unsigned char *)(*(void *)(a2 + 16) + 392))
  {
    uint64_t v41 = *(void *)(a2 + 344);
    uint64_t v42 = *(void *)a2;
    if (v42 == (*(uint64_t (**)(uint64_t))(*(void *)v41 + 560))(v41))
    {
      uint64_t v43 = sub_1CBE52E8C(v52);
      if ((v43 & 0xFF00000000) != 0 && v43 == 9)
      {
        uint64_t v44 = *((void *)MachineInstr + 4) + 32 * sub_1CBDA6464((unsigned __int16)v52, 0x2Eu);
        *(void *)(v44 + 16) |= 0x20000uLL;
      }
    }
  }
  return MachineInstr;
}

uint64_t sub_1CBB34C0C(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (a2 + 48 == v3) {
    return 0;
  }
  unint64_t v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    uint64_t v6 = *(unsigned __int16 **)(v5 + 16);
    int v7 = *v6;
    BOOL v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    BOOL v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0) {
      break;
    }
    if (v5 == v3) {
      return 0;
    }
    unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(unsigned char *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v7 != 303 && v7 != 305) {
    return 0;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v5);
  if (v2 == *(void **)(a2 + 56)) {
    return 1;
  }
  unint64_t v10 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v10 || (*(unsigned char *)v10 & 4) == 0)
  {
    while ((*(_WORD *)(v10 + 44) & 4) != 0)
      unint64_t v10 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v10 + 16) != 305) {
    return 1;
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v10);
  return 2;
}

uint64_t sub_1CBB34D3C()
{
  return 0;
}

uint64_t sub_1CBB34D44(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 **)(a1 + 16);
  int v5 = *v4;
  uint64_t result = sub_1CBDA6464(v5, 0x2Fu);
  uint64_t v7 = *((void *)v4 + 2);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(v8 + 32 * result + 16);
  if ((v7 & 0x1D00) == 0x500 || (v7 & 0x1E00) == 0x600)
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 14) = 1;
    if ((v9 & 0x2000000000000000) == 0)
    {
      *(_DWORD *)(a2 + 8) = (v9 >> 54);
      *(unsigned char *)(a2 + 14) = 0;
    }
    int v10 = v9 >> 4;
  }
  else
  {
    int v10 = v9 >> 4;
    *(_DWORD *)(a2 + 4) = v10;
    uint64_t result = sub_1CBDA6464(v5, 0x6Au);
    if (*(unsigned char *)(v8 + 32 * result) == 1)
    {
      *(_DWORD *)(a2 + 8) = *(void *)(v8 + 32 * result + 16);
      *(unsigned char *)(a2 + 14) = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 14) = 1;
    }
  }
  int v11 = v9 & 0xF;
  int v12 = 4;
  int v13 = 1;
  if (((1 << (v9 & 0xF)) & 0xF531) == 0)
  {
    if (((1 << v11) & 0xCA) == 0)
    {
LABEL_14:
      int v13 = v12;
      goto LABEL_15;
    }
    int v13 = 2;
  }
  BOOL v15 = v11 == 15;
  int v14 = (1 << v11) & 0xF100;
  BOOL v15 = !v15 && (v9 & 0xF) == 15 || v14 == 0;
  if (v15)
  {
    int v12 = v13;
    goto LABEL_14;
  }
  int v10 = 15;
LABEL_15:
  *(_DWORD *)a2 = v13;
  *(_DWORD *)(a2 + 4) = v10;
  return result;
}

void sub_1CBB34E88(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 256;
  operator new[]();
}

BOOL sub_1CBB35008(void *a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1[3] + 32) + 344);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 560))(v2);
  if (v3 && (*(_WORD *)(v3 + 18) & 0x3FF0) == 0x660) {
    return 0;
  }
  int v4 = (unsigned __int16 *)a1[2];
  return (*((unsigned char *)v4 + 21) & 1) == 0
      && (*(void *)(a1[4] + 32 * sub_1CBDA6464(*v4, 0x2Fu) + 16) & 0x380) != 640;
}

uint64_t sub_1CBB350B0(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  uint64_t v9 = *(void *)(a1 + 8) + 14544;
  int v10 = (llvm::MachineFunction *)a2[4];
  int v11 = *a7;
  v27[0] = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)v27, v11, 2);
  }
  unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v10, v9, v27, 0);
  if (v27[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v27, v27[0]);
  }
  uint64_t v13 = a2[5];
  *((void *)MachineInstr + 3) = v13;
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *((unsigned int *)MachineInstr + 10);
  if (v15)
  {
    uint64_t v20 = *((void *)MachineInstr + 4);
    uint64_t v21 = *(void *)(v14 + 40);
    uint64_t v22 = 32 * v15;
    do
    {
      if (!*(unsigned char *)v20)
      {
        uint64_t v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0) {
          int v24 = (uint64_t *)(*(void *)(v21 + 272) + 8 * v23);
        }
        else {
          int v24 = (uint64_t *)(*(void *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        uint64_t v25 = *v24;
        if (*v24)
        {
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = v20;
          *(void *)(v20 + 16) = v26;
          if (*(unsigned char *)(v20 + 3))
          {
            *(void *)(v20 + 24) = v25;
          }
          else
          {
            *(void *)(v20 + 24) = 0;
            int v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(void *)(v20 + 16) = v20;
          *(void *)(v20 + 24) = 0;
        }
        *int v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  uint64_t v16 = *(void *)(v14 + 728);
  if (v16) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v16 + 24))(v16, MachineInstr);
  }
  uint64_t v18 = a2[6];
  unsigned int v17 = a2 + 6;
  *(void *)unint64_t MachineInstr = v18 & 0xFFFFFFFFFFFFFFF8 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v17;
  *(void *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) = MachineInstr;
  unint64_t *v17 = *v17 & 7 | (unint64_t)MachineInstr;
  v27[1] = 0;
  v27[2] = a3;
  LODWORD(v27[0]) = 4;
  llvm::MachineInstr::addOperand(MachineInstr, v10, (const llvm::MachineOperand *)v27);
  return 1;
}

uint64_t sub_1CBB3524C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v9 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v13 = 0x200000000;
  int v14 = 1;
  if (sub_1CBE0418C(67, 3, &v13) == v9) {
    goto LABEL_6;
  }
  uint64_t v13 = 46;
  int v14 = 1;
  if (sub_1CBE0418C(67, 3, &v13) == v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    if (*(void *)(v11 + 144) || *(unsigned char *)(v11 + 64)) {
      return 0;
    }
    int v12 = 25;
    goto LABEL_9;
  }
  uint64_t v13 = 0x20000002ELL;
  int v14 = 1;
  if (sub_1CBE0418C(67, 3, &v13) == v9)
  {
LABEL_6:
    uint64_t v11 = *(void *)(a2 + 32);
    if (*(void *)(v11 + 144) || *(unsigned char *)(v11 + 64)) {
      return 0;
    }
    int v12 = 1;
LABEL_9:
    *a3 = *(_DWORD *)(v11 + 68);
    *a4 = *(_DWORD *)(v11 + 4);
    *a5 = v12;
    return 1;
  }
  return 0;
}

uint64_t sub_1CBB35398(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if ((*(void *)(*(void *)(a1 + 16) + 16) & 0x400000000) != 0) {
    return 0;
  }
  uint64_t v6 = 1;
  if ((*(void *)(*(void *)(a1 + 16) + 16) & 0x1D00) != 0x500
    && (*(void *)(*(void *)(a1 + 16) + 16) & 0x1D00) != 0x900)
  {
    uint64_t v6 = 0;
    uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 16) & 0x1E00;
    if (v9 != 2560 && v9 != 1536) {
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 40) != 6) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v7 + 32 * v6) != 1) {
    return 0;
  }
  if (*(unsigned char *)(v7 + 128) != 1) {
    return 0;
  }
  unint64_t v8 = *(void *)(a1 + 48);
  if (v8 < 8) {
    return 0;
  }
  if ((v8 & 7) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v8;
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  if ((*(void *)(a1 + 48) & 7) != 3 || (v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
    return v4;
  }
  if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) != 1) {
    return 0;
  }
LABEL_19:
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 7) != 0) {
    unint64_t v10 = *(void *)(v10 + 8);
  }
  else {
    *(void *)(a1 + 48) = v10;
  }
  *a4 = sub_1CB8F20C0(v10);
  char v11 = sub_1CD4218AC(*(void *)(v7 + 32 * v6 + 16));
  int v12 = *(_DWORD *)(v7 + 100);
  if (*(unsigned char *)(v7 + 96)) {
    v12 |= 0x40000000u;
  }
  *a2 = v12;
  *a3 = *(void *)(v7 + 144) << v11;
  return 1;
}

uint64_t sub_1CBB354E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  long long v80 = 0u;
  long long v81 = 0u;
  uint64_t v4 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v6 = *(unsigned __int16 **)(a3 + 16);
  uint64_t v7 = *((void *)v6 + 2);
  v79[0] = v5;
  v79[1] = v7;
  int v8 = *v4;
  int v9 = *v6;
  v78[0] = v8;
  v78[1] = v9;
  int v73 = v9;
  v77[0] = a2;
  v77[1] = a3;
  char v10 = 1;
  do
  {
    char v11 = v10;
    int v12 = v78[v3];
    unsigned int v13 = v12 - 566;
    unsigned int v14 = v12 - 6165;
    if (v13 < 3 || v14 <= 1)
    {
      uint64_t v16 = v3 ^ 1;
      uint64_t v17 = v79[v16];
      uint64_t v18 = sub_1CBE52E8C(v78[v16]);
      uint64_t result = 0;
      BOOL v20 = (v18 & 0xFF00000000) == 0 || (v18 - 79) >= 2;
      BOOL v21 = !v20;
      BOOL v22 = (v17 & 0x1E00) != 0x600 && (v17 & 0x10000000) == 0;
      if (!v22 || v21) {
        return result;
      }
    }
    char v10 = 0;
    uint64_t v3 = 1;
  }
  while ((v11 & 1) != 0);
  if (((v5 | v7) & 2) != 0)
  {
    uint64_t v25 = sub_1CBE52E8C(v8);
    int v26 = v73;
    if ((v25 & 0xFF00000000) != 0 && (v25 - 79) <= 1)
    {
      uint64_t v27 = sub_1CBE52E8C(v73);
      if ((v27 & 0xFF00000000) != 0 && (v27 - 79) < 2) {
        return 0;
      }
    }
    __int16 v28 = *(_WORD *)(a2 + 44);
    uint64_t v29 = *((void *)v4 + 1);
    if ((v28 & 0xC) != 0 && (v28 & 4) == 0)
    {
      if ((v29 & 0x1000000) != 0) {
        return 0;
      }
      uint64_t v70 = a2;
      int v26 = v73;
      uint64_t result = 0;
      while ((*(_WORD *)(v70 + 44) & 8) != 0)
      {
        uint64_t v70 = *(void *)(v70 + 8);
        if (*(unsigned char *)(*(void *)(v70 + 16) + 11)) {
          return result;
        }
      }
    }
    else if ((v29 & 0x1000000) != 0)
    {
      return 0;
    }
    if (v8 - 1) <= 1 && (*(unsigned char *)(*(void *)(a2 + 32) + 48)) {
      return 0;
    }
    uint64_t v30 = *((void *)v6 + 1);
    if ((*(_WORD *)(a3 + 44) & 0xC) != 0 && (*(_WORD *)(a3 + 44) & 4) == 0)
    {
      if ((v30 & 0x1000000) != 0) {
        return 0;
      }
      uint64_t v69 = a3;
      int v26 = v73;
      uint64_t result = 0;
      while ((*(_WORD *)(v69 + 44) & 8) != 0)
      {
        uint64_t v69 = *(void *)(v69 + 8);
        if (*(unsigned char *)(*(void *)(v69 + 16) + 11)) {
          return result;
        }
      }
    }
    else if ((v30 & 0x1000000) != 0)
    {
      return 0;
    }
    return (v26 - 1) > 1 || (*(unsigned char *)(*(void *)(a3 + 32) + 48) & 1) == 0;
  }
  if (v8 == 9209)
  {
    int v24 = *(_DWORD *)(*(void *)(a2 + 32) + 48);
    char v23 = 1;
  }
  else if (v8 == 9211)
  {
    char v23 = 1;
    int v24 = -1;
  }
  else
  {
    int v24 = 0;
    char v23 = 0;
  }
  if (v73 == 9211)
  {
    int v32 = -1;
    if ((v23 & 1) == 0) {
      return 1;
    }
    return (v24 | v32) >= 0 && v24 != v32;
  }
  if (v73 != 9209)
  {
    if (v23) {
      return 1;
    }
    unsigned int v34 = v8 - 9;
    char v36 = ((v8 - 9) <= 0x3C && ((1 << v34) & 0x1000000000000605) != 0
        || !v8
        || *((void *)v4 + 1) & 0x10 | v5 & 1)
       && (uint64_t v35 = *(void *)(a2 + 32), *(unsigned char *)v35 == 7)
       && *(_DWORD *)(v35 + 16) == 64;
    unsigned int v37 = v73 - 9;
    if ((v73 - 9) <= 0x3C && ((1 << v37) & 0x1000000000000605) != 0
      || !v73
      || *((void *)v6 + 1) & 0x10 | v7 & 1)
    {
      uint64_t v38 = *(void *)(a3 + 32);
      if (*(unsigned char *)v38 == 7) {
        v36 ^= *(_DWORD *)(v38 + 16) == 64;
      }
    }
    if (v36) {
      return 1;
    }
    if ((v34 > 0x3C || ((1 << v34) & 0x1000000000000605) == 0) && v8 && !(*((void *)v4 + 1) & 0x10 | v5 & 1)) {
      goto LABEL_104;
    }
    unint64_t v39 = *(_DWORD **)(a2 + 32);
    if (*v39 != 7 || v39[4] != 64) {
      goto LABEL_104;
    }
    if ((v37 > 0x3C || ((1 << v37) & 0x1000000000000605) == 0) && v73 && !(*((void *)v6 + 1) & 0x10 | v7 & 1)) {
      goto LABEL_104;
    }
    uint64_t v40 = *(unsigned int **)(a3 + 32);
    unsigned int v41 = *v40;
    if (*v40 != 7 || v40[4] != 64) {
      goto LABEL_104;
    }
    uint64_t v42 = 0;
    uint64_t v43 = v39[1];
    unint64_t v44 = (unint64_t)v39[6] << 33;
    unsigned int v45 = (*v39 >> 8) & 0xFFF;
    if (v45 <= 2)
    {
      if (v45 == 1) {
        goto LABEL_90;
      }
      if (v45 != 2) {
        goto LABEL_92;
      }
    }
    else
    {
      if (v45 == 3)
      {
        uint64_t v42 = 8;
        goto LABEL_92;
      }
      if (v45 != 15)
      {
        if (v45 != 14)
        {
LABEL_92:
          uint64_t v46 = 0;
          uint64_t v47 = v44 | (2 * v43);
          int64_t v48 = ((unint64_t)v40[6] << 33) | (2 * v40[1]);
          int v49 = (v41 >> 8) & 0xFFF;
          if (v49 <= 2)
          {
            if (v49 == 1)
            {
LABEL_100:
              uint64_t v46 = 2;
              goto LABEL_102;
            }
            if (v49 != 2)
            {
LABEL_102:
              uint64_t result = 1;
              if (v42 + v47 <= v48 || v46 + v48 <= v47) {
                return result;
              }
LABEL_104:
              uint64_t v50 = 0;
              char v51 = 1;
              unsigned int v52 = (_DWORD *)&v80 + 2;
              do
              {
                char v53 = v51;
                uint64_t v54 = v77[v50];
                long long v56 = (int *)(v54 + 48);
                unint64_t v55 = *(void *)(v54 + 48);
                if (v55 >= 8)
                {
                  if ((v55 & 7) == 0)
                  {
                    *(void *)(v54 + 48) = v55 & 0xFFFFFFFFFFFFFFF8;
                    int v61 = (int *)(v54 + 56);
                    while (1)
                    {
LABEL_114:
                      unint64_t v62 = *(unsigned int *)(*(void *)v56 + 16);
                      if (v62)
                      {
                        if (v62 >= 0x51) {
                          abort();
                        }
                      }
                      else
                      {
                        uint64_t v63 = v79[v50];
                        if ((v63 & 0x1D00) != 0xD00 && (v63 & 0x1E00) != 0xE00) {
                          return 0;
                        }
                      }
                      *(void *)((char *)&v80 + 16 * v50 + ((v62 >> 3) & 0x1FFFFFF8)) |= 1 << v62;
                      v56 += 2;
                      if (v56 == v61) {
                        goto LABEL_120;
                      }
                    }
                  }
                  long long v57 = (int *)(v55 & 0xFFFFFFFFFFFFFFF8);
                  if ((*(void *)(v54 + 48) & 7) == 3 && v57 != 0)
                  {
                    uint64_t v60 = *v57;
                    long long v56 = v57 + 2;
                    uint64_t v59 = v60;
                    if (v60)
                    {
                      int v61 = &v56[2 * v59];
                      goto LABEL_114;
                    }
                  }
                }
LABEL_120:
                unint64_t v64 = &v80 + v50;
                if (!*(void *)v64 && (*v52 & 0x1FFFF) == 0)
                {
                  uint64_t v65 = v79[v50];
                  if ((v65 & 0x1D00) != 0xD00 && (v65 & 0x1E00) != 0xE00) {
                    return 0;
                  }
                  *(void *)unint64_t v64 = 1;
                }
                char v51 = 0;
                v52 += 4;
                uint64_t v50 = 1;
              }
              while ((v53 & 1) != 0);
              if (!sub_1CB969194(&v80, 0, (uint64_t)&v80 + 8, 0x11u, &v81)) {
                return ((unint64_t)v81 & (unint64_t)v80 | DWORD2(v80) & DWORD2(v81) & 0x1FFFF) == 0;
              }
              uint64_t v75 = 0;
              uint64_t v76 = 0;
              uint64_t v74 = 0;
              if (!sub_1CBB35398(a2, (_DWORD *)&v74 + 1, (_DWORD *)&v76 + 1, (_DWORD *)&v75 + 1)
                || !sub_1CBB35398(a3, &v74, &v76, &v75)
                || HIDWORD(v74) != v74)
              {
                return ((unint64_t)v81 & (unint64_t)v80 | DWORD2(v80) & DWORD2(v81) & 0x1FFFF) == 0;
              }
              int v66 = v76;
              if ((int)v76 >= SHIDWORD(v76)) {
                int v67 = HIDWORD(v76);
              }
              else {
                int v67 = v76;
              }
              if (SHIDWORD(v76) > (int)v76) {
                int v66 = HIDWORD(v76);
              }
              int v68 = (uint64_t *)((char *)&v75 + 4);
              if (SHIDWORD(v76) > (int)v76) {
                int v68 = &v75;
              }
              if (*(_DWORD *)v68 + v67 > v66) {
                return ((unint64_t)v81 & (unint64_t)v80 | DWORD2(v80) & DWORD2(v81) & 0x1FFFF) == 0;
              }
              return 1;
            }
          }
          else
          {
            if (v49 == 3)
            {
              uint64_t v46 = 8;
              goto LABEL_102;
            }
            if (v49 != 15)
            {
              if (v49 != 14) {
                goto LABEL_102;
              }
              goto LABEL_100;
            }
          }
          uint64_t v46 = 4;
          goto LABEL_102;
        }
LABEL_90:
        uint64_t v42 = 2;
        goto LABEL_92;
      }
    }
    uint64_t v42 = 4;
    goto LABEL_92;
  }
  int v32 = *(_DWORD *)(*(void *)(a3 + 32) + 48);
  if ((v23 & 1) == 0) {
    return 1;
  }
  return (v24 | v32) >= 0 && v24 != v32;
}

uint64_t sub_1CBB35BE4(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 79);
  int v2 = v1;
  uint64_t v3 = v1 & 0x7F;
  if (v2 < 0) {
    uint64_t v3 = *(void *)(a1 + 64);
  }
  if (!v3) {
    return 10;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v4 = a1 + 56;
  uint64_t v5 = v6;
  uint64_t v7 = v2 >= 0 ? v4 : v5;
  unint64_t v8 = v3 - 1;
  if (v8 < 3)
  {
    if (v8 != 2) {
      return 0;
    }
  }
  else
  {
    if (*(_WORD *)(v7 + 1) == 14129 && *(unsigned char *)(v7 + 3) == 103) {
      return 13;
    }
    if (*(_WORD *)(v7 + 1) == 14129 && *(unsigned char *)(v7 + 3) == 115) {
      return 13;
    }
    if (*(_WORD *)(v7 + 1) == 14385 && *(unsigned char *)(v7 + 3) == 103) {
      return 15;
    }
  }
  switch(*(_WORD *)(v7 + 1))
  {
    case 0x3531:
      return 10;
    case 0x3631:
      return 11;
    case 0x3731:
      return 12;
    case 0x3831:
      return 14;
  }
  return 0;
}

uint64_t sub_1CBB35CE8(uint64_t a1, uint64_t a2)
{
  int v3 = **(unsigned __int16 **)(a2 + 16);
  uint64_t v4 = sub_1CBE52E8C(v3);
  if ((v4 & 0xFF00000000) == 0 || v4 != 69 && v4 != 50) {
    return 0;
  }
  __int16 v6 = sub_1CBDA6464(v3, 0x18u);
  char v7 = 0;
  uint64_t v8 = *(void *)(a2 + 32);
  while (1)
  {
    int v9 = (unsigned __int8 *)(v8 + 32 * v6);
    int v10 = *v9;
    if (v10 != 7) {
      break;
    }
    if (v7 & 1 | (*((_DWORD *)v9 + 4) != 64)) {
      return 0;
    }
LABEL_9:
    __int16 v6 = sub_1CBDA6464(v3, 0x19u);
    char v7 = 1;
  }
  if (v10 != 1) {
    return 0;
  }
  if ((v7 & 1) == 0) {
    goto LABEL_9;
  }
  return 1;
}

uint64_t sub_1CBB35DA8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 1) & 1;
}

uint64_t sub_1CBB35DB8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v10 = a4;
    int v11 = __cxa_guard_acquire(&qword_1EBCC0FA8);
    a4 = v10;
    if (v11)
    {
      byte_1EBCC0F9C = 1;
      __cxa_guard_release(&qword_1EBCC0FA8);
      a4 = v10;
    }
  }
  if ((byte_1EBCC0F9C & 1) == 0)
  {
    uint64_t v45 = a4;
    uint64_t v12 = a5;
    uint64_t v13 = *(void *)(a5 + 24);
    unint64_t v14 = *(void *)(v13 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    if (v14 == (*(void *)(v13 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
      && sub_1CBE53070(*(unsigned __int16 *)(*(void *)v14 + 24))
      && sub_1CBE53070(*(unsigned __int16 *)(*(void *)v14 + 24)))
    {
      uint64_t UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v12, a2);
      uint64_t v16 = *(void *)(UniqueVRegDef + 24);
      uint64_t v17 = llvm::MachineRegisterInfo::getUniqueVRegDef(v12, a3);
      uint64_t v18 = *(void *)(v17 + 24);
      if (v18 != v16)
      {
        uint64_t v19 = v17;
        uint64_t v20 = sub_1CBB36158(v45, v16);
        uint64_t v21 = sub_1CBB36158(v45, v18);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FB0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCC0FB0))
        {
          __cxa_atexit(MEMORY[0x1E4FBA268], &stru_1EA615180, &dword_1CB82C000);
          __cxa_guard_release(&qword_1EBCC0FB0);
        }
        std::mutex::lock(&stru_1EA615180);
        int v22 = 0;
        int v23 = 0;
        int v24 = *(_DWORD *)(v21 + 16);
        int v25 = *(_DWORD *)(v20 + 16);
        if (v24 - v25 >= 0) {
          int v26 = v24 - v25;
        }
        else {
          int v26 = v25 - v24;
        }
        v47[0] = 0;
        v47[1] = 0;
        int v48 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        int v49 = 0;
        if (v26 <= byte_1EBCC0F9C << 31 >> 31) {
          goto LABEL_22;
        }
        if (**(_WORD **)(UniqueVRegDef + 16) != 269)
        {
          int v22 = v26;
          int v23 = byte_1EBCC0F9C << 31 >> 31;
          goto LABEL_22;
        }
        uint64_t v27 = sub_1CBB36200(v12, *(_DWORD *)(*(void *)(UniqueVRegDef + 32) + 36));
        if (v27 != v28)
        {
          uint64_t v32 = v27;
          uint64_t v33 = v28;
          do
          {
            uint64_t v34 = *(void *)(v32 + 8);
            if (v34 != v19 && v34 != UniqueVRegDef)
            {
              uint64_t v36 = sub_1CBB36158(v45, *(void *)(v34 + 24));
              int v37 = v24 - *(_DWORD *)(v36 + 16);
              if (v37 < 0) {
                int v37 = *(_DWORD *)(v36 + 16) - v24;
              }
              if (v37 <= byte_1EBCC0F9C << 31 >> 31) {
                goto LABEL_58;
              }
              int v46 = *(_DWORD *)(v36 + 16);
              sub_1CBB36254(v47, &v46);
              uint64_t v34 = *(void *)(v32 + 8);
            }
            do
              uint64_t v32 = *(void *)(v32 + 24);
            while (v32 && ((*(unsigned char *)(v32 + 3) & 0x81) != 0 || *(void *)(v32 + 8) == v34));
          }
          while (v32 != v33);
        }
        sub_1CD4224C4((uint64_t)v47);
        uint64_t v29 = v49;
        uint64_t v30 = v50;
        int v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        std::__sort<std::__less<int,int> &,int *>();
        if (v29 == v30)
        {
          if (v26 > byte_1EBCC0F9C << 31 >> 31)
          {
            uint64_t v31 = v29;
LABEL_48:
            if (v31 != v30) {
              int v25 = *v31;
            }
            int v44 = 1;
            goto LABEL_52;
          }
        }
        else
        {
          if (*(v30 - 1) < v24) {
            int v25 = *(v30 - 1);
          }
          int v38 = v24 - v25;
          if (v24 - v25 < 0) {
            int v38 = v25 - v24;
          }
          if (v38 > byte_1EBCC0F9C << 31 >> 31)
          {
            unint64_t v39 = v30 - v29;
            uint64_t v31 = v29;
            do
            {
              unint64_t v40 = v39 >> 1;
              unsigned int v41 = &v31[v39 >> 1];
              int v43 = *v41;
              uint64_t v42 = v41 + 1;
              v39 += ~(v39 >> 1);
              if (v43 < v24) {
                uint64_t v31 = v42;
              }
              else {
                unint64_t v39 = v40;
              }
            }
            while (v39);
            goto LABEL_48;
          }
        }
        int v44 = 0;
LABEL_52:
        if (v29) {
          operator delete(v29);
        }
        if (!v44)
        {
LABEL_58:
          BOOL v8 = 1;
          goto LABEL_23;
        }
        int v23 = byte_1EBCC0F9C << 31 >> 31;
        int v22 = v24 - v25;
        if (v24 - v25 < 0) {
          int v22 = v25 - v24;
        }
LABEL_22:
        BOOL v8 = v22 <= v23;
LABEL_23:
        sub_1CD421E44(v47);
        std::mutex::unlock(&stru_1EA615180);
        return v8;
      }
    }
  }
  return 1;
}

uint64_t sub_1CBB36158(uint64_t a1, uint64_t a2)
{
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
  uint64_t v4 = *(void *)(a1 + 1320);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(unsigned int *)(v4 + 40);
  if (v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    BOOL v8 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a2) {
      goto LABEL_3;
    }
    int v11 = 1;
    while (v9 != -4096)
    {
      int v12 = v7 + v11++;
      uint64_t v7 = v12 & (v6 - 1);
      uint64_t v9 = *(void *)(v5 + 16 * v7);
      if (v9 == a2)
      {
        BOOL v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_3;
      }
    }
  }
  BOOL v8 = (uint64_t *)(v5 + 16 * v6);
LABEL_3:
  if (v8 == (uint64_t *)(v5 + 16 * v6)) {
    return 0;
  }
  else {
    return v8[1];
  }
}

uint64_t sub_1CBB36200(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    int v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t result = *v2;
  if (*v2 && (*(unsigned char *)(result + 3) & 0x81) != 0)
  {
    do
      uint64_t result = *(void *)(result + 24);
    while (result && (*(_DWORD *)result & 0x81000000) != 0);
  }
  return result;
}

void sub_1CBB36254(void *a1, _DWORD *a2)
{
  sub_1CD422060((uint64_t)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    uint64_t v5 = (char *)a1[4];
    unint64_t v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = (char *)a1[3];
      uint64_t v8 = (v5 - v7) >> 2;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 1 > v9) {
        unint64_t v9 = v10 >> 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 62) {
          sub_1CB833614();
        }
        int v12 = (char *)operator new(4 * v11);
      }
      else
      {
        int v12 = 0;
      }
      uint64_t v13 = &v12[4 * v8];
      *(_DWORD *)uint64_t v13 = *a2;
      uint64_t v6 = v13 + 4;
      while (v5 != v7)
      {
        int v14 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v13 - 1) = v14;
        v13 -= 4;
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[4 * v11];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v5 = *a2;
      uint64_t v6 = v5 + 4;
    }
    a1[4] = v6;
  }
}

BOOL sub_1CBB3635C(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = a2;
    int v3 = __cxa_guard_acquire(&qword_1EBCC0FB8);
    a2 = v8;
    if (v3)
    {
      byte_1EBCC0F9D = 0;
      __cxa_guard_release(&qword_1EBCC0FB8);
      a2 = v8;
    }
  }
  if (!byte_1EBCC0F9D) {
    return 1;
  }
  unint64_t v4 = *(void *)(a2 + 48);
  if (v4 < 8) {
    return 1;
  }
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    BOOL v6 = (*(void *)(a2 + 48) & 7) != 3 || v5 == 0;
    if (v6 || !*v5) {
      return 1;
    }
  }
  else
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v4;
  }
  if ((v4 & 7) != 0)
  {
    unint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v7;
  }
  return (*(_WORD *)(v7 + 32) & 1) == 0;
}

uint64_t sub_1CBB36430()
{
  return 1;
}

uint64_t sub_1CBB36438(uint64_t a1)
{
  return *(void *)(a1 + 768);
}

void *sub_1CBB36440(void *result)
{
  char v1 = (void *)result[40];
  if (v1 != result + 42)
  {
    BOOL v6 = result;
    free(v1);
    uint64_t result = v6;
  }
  int v2 = (void *)result[31];
  if (v2 != result + 33)
  {
    unint64_t v7 = result;
    free(v2);
    uint64_t result = v7;
  }
  int v3 = (void *)result[22];
  if (v3 != result + 24)
  {
    uint64_t v8 = result;
    free(v3);
    uint64_t result = v8;
  }
  unint64_t v4 = (void *)result[13];
  if (v4 != result + 15)
  {
    unint64_t v9 = result;
    free(v4);
    uint64_t result = v9;
  }
  uint64_t v5 = (void *)result[6];
  if (v5 != result + 8)
  {
    uint64_t v10 = result;
    free(v5);
    return v10;
  }
  return result;
}

void sub_1CBB36510(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    uint64_t v5 = operator new(4 * v4, (std::align_val_t)4uLL);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    if (v6)
    {
      memset_pattern16(v5, &unk_1CDB165A0, 4 * v6);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void sub_1CBB365B4(uint64_t a1)
{
}

uint64_t sub_1CBB3665C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC0FC0;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25F7CA8;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC0FC8, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBB365B4;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCC0FC8, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBB36768()
{
}

void sub_1CBB367A4(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F7CA8;
  uint64_t v2 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1F260E110;
  unint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CBB36888(llvm::Pass *this)
{
  *(void *)this = &unk_1F25F7CA8;
  uint64_t v2 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1F260E110;
  unint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBB36980()
{
  return "AGX3InstructionExpansion";
}

void sub_1CBB36990(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&unk_1EA61EFE3);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&unk_1EA61EFE3);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CBB36A0C(uint64_t a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) == 0)
  {
    *(void *)(a1 + 248) = *(void *)(a2 + 40);
    if (!byte_1EBCC1128) {
      operator new();
    }
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (v3 == v4)
    {
LABEL_6:
      uint64_t v5 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v3 != &unk_1EA61EFE3)
      {
        v3 += 16;
        if (v3 == v4) {
          goto LABEL_6;
        }
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &unk_1EA61EFE3);
    operator new();
  }
  return 0;
}

void sub_1CBB38384()
{
}

uint64_t sub_1CBB38398()
{
  return 1;
}

uint64_t sub_1CBB383A0()
{
  return 0;
}

uint64_t sub_1CBB383A8()
{
  return 1;
}

uint64_t sub_1CBB383B0()
{
  return 24;
}

uint64_t sub_1CBB383B8()
{
  return 8;
}

uint64_t sub_1CBB383C0(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1CBB383C8()
{
  return 1;
}

uint64_t sub_1CBB383D0()
{
  return 0;
}

uint64_t sub_1CBB383D8(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1CBB383E8()
{
  return 1;
}

uint64_t sub_1CBB383F0()
{
  return 0;
}

uint64_t sub_1CBB383F8()
{
  return 1;
}

uint64_t sub_1CBB38400()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1CBB38408()
{
  return 0;
}

uint64_t sub_1CBB38410()
{
  return 0;
}

uint64_t sub_1CBB38418(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CBB3842C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CBB38440(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1CBB38454()
{
  return 391;
}

uint64_t sub_1CBB3845C()
{
  return 0;
}

uint64_t sub_1CBB38464()
{
  return 0;
}

uint64_t sub_1CBB3846C()
{
  return 1;
}

uint64_t sub_1CBB38474()
{
  return 0;
}

uint64_t sub_1CBB3847C()
{
  return 0;
}

uint64_t sub_1CBB38484()
{
  return 3;
}

uint64_t sub_1CBB3848C()
{
  return 0;
}

uint64_t sub_1CBB38494(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 61)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_DWORD *)(a2 + 4) == 3;
  }
  if (v2) {
    return 6;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CBB384B4()
{
  return 0;
}

uint64_t sub_1CBB384BC()
{
  return 1;
}

uint64_t sub_1CBB384C4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1)+ 24);
  }
  else {
    return dword_1CDB18BBC[(int)a2 - 2];
  }
}

__int16 ***sub_1CBB38528(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = a2 - 1;
  uint64_t v4 = &(&off_1E66ABB10)[v3];
  uint64_t v5 = (__int16 ****)&(&off_1E66ABAC8)[(int)v3];
  if (!a3) {
    uint64_t v5 = v4;
  }
  return *v5;
}

uint64_t sub_1CBB38558()
{
  return 0x1900000001;
}

uint64_t sub_1CBB38564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 48);
  if (!v5)
  {
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 8) + 216))(*(void *)(a3 + 8), a3 + 128, a3);
    *(void *)(a3 + 48) = v5;
  }
  uint64_t v6 = *(void *)(*(void *)a3 + 112);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          uint64_t v9 = *(void *)(v7 + 24);
          uint64_t v10 = &unk_1EBCBE000;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
          {
            uint64_t v24 = v9;
            uint64_t v25 = v5;
            int v23 = v8;
            int v20 = __cxa_guard_acquire(&qword_1EBCBE588);
            uint64_t v10 = &unk_1EBCBE000;
            int v8 = v23;
            int v21 = v20;
            uint64_t v9 = v24;
            uint64_t v5 = v25;
            if (v21)
            {
              unint64_t v22 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v22 = 0xFF51AFD7ED558CCDLL;
              }
              qword_1EBCBE580 = v22;
              __cxa_guard_release(&qword_1EBCBE588);
              uint64_t v10 = (void *)&unk_1EBCBE000;
              int v8 = v23;
              uint64_t v9 = v24;
              uint64_t v5 = v25;
            }
          }
          unint64_t v11 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v10[176] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
          unsigned int v12 = (-348639895 * ((v11 >> 47) ^ v11)) ^ 0x616F6E73;
          int v13 = v8 - 1;
          for (int i = 1; ; ++i)
          {
            unsigned int v15 = v12 & v13;
            uint64_t v16 = v9 + 24 * v15;
            uint64_t v17 = *(void **)v16;
            if (*(void *)v16 == -1)
            {
              if ("samplesnoalias" == (char *)-1) {
                break;
              }
            }
            else if (v17 == (void *)-2)
            {
              if ("samplesnoalias" == (char *)-2) {
                break;
              }
            }
            else if (*(void *)(v16 + 8) == 14 {
                   && *v17 == 0x6E73656C706D6173
            }
                   && *(void *)((char *)v17 + 6) == 0x7361696C616F6E73)
            {
              break;
            }
            if (v17 == (void *)-1) {
              break;
            }
            unsigned int v12 = i + v15;
          }
        }
      }
    }
  }

  return sub_1CBB389E0(v5, a2, a3);
}

uint64_t sub_1CBB387B0(uint64_t a1, int a2)
{
  return dword_1CDB18BE8[a2];
}

void sub_1CBB387C4(uint64_t a1, unsigned int a2, int *a3, void *a4, uint64_t a5)
{
  if (a2) {
    int v5 = 5626;
  }
  else {
    int v5 = 518;
  }
  *a3 = v5;
  unsigned int v6 = *(_DWORD *)(a5 + 8);
  if (v6 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v6) = xmmword_1CD91C140;
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (a2)
  {
    if (v7 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
    *int v8 = a2 | 0x100000000;
    v8[1] = -1;
    ++*(_DWORD *)(a5 + 8);
  }
  *a4 = &off_1E66AF970;
}

void sub_1CBB388A8(uint64_t a1, unsigned int a2, int *a3, void *a4, uint64_t a5)
{
  if (a2) {
    int v5 = 5625;
  }
  else {
    int v5 = 517;
  }
  *a3 = v5;
  unsigned int v6 = *(_DWORD *)(a5 + 8);
  if (v6 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v6) = xmmword_1CD91C140;
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  if (a2)
  {
    if (v7 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v8 = (uint64_t *)(*(void *)a5 + 16 * v7);
    *int v8 = a2 | 0x100000000;
    v8[1] = -1;
    ++*(_DWORD *)(a5 + 8);
  }
  *a4 = &off_1E66AF580;
}

uint64_t sub_1CBB3898C()
{
  return 0;
}

uint64_t sub_1CBB38994()
{
  return 0;
}

uint64_t sub_1CBB3899C()
{
  return 1;
}

uint64_t sub_1CBB389A4()
{
  return 0;
}

uint64_t sub_1CBB389AC()
{
  return 1;
}

uint64_t sub_1CBB389B4()
{
  return 0;
}

uint64_t sub_1CBB389BC()
{
  return 313;
}

BOOL sub_1CBB389C4(uint64_t a1, int a2)
{
  return a2 == 313;
}

uint64_t sub_1CBB389D0()
{
  return 0;
}

uint64_t sub_1CBB389D8()
{
  return 0;
}

uint64_t sub_1CBB389E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  (*(void (**)(void))(**(void **)(a3 + 16) + 104))(*(void *)(a3 + 16));
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  if (!sub_1CBB38B84((uint64_t *)(a1 + 160), &v7, &v8)
    || v8 == *(void *)(a1 + 160) + 16 * *(unsigned int *)(a1 + 176))
  {
    sub_1CBB38C20((uint64_t *)(a1 + 160), &v6);
    operator new();
  }
  return *(void *)(v8 + 8);
}

uint64_t sub_1CBB38B84(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v6 = *a1;
    int v7 = v3 - 1;
    unsigned int v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    uint64_t v4 = (void *)(*a1 + 16 * v8);
    uint64_t v9 = *v4;
    if (*a2 == *v4)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v9 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -8192;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        uint64_t v4 = (void *)(v6 + 16 * (v13 & v7));
        uint64_t v9 = *v4;
        if (*a2 == *v4) {
          goto LABEL_3;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v4 = v10;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

void *sub_1CBB38C20(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CBB38B84(a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = sub_1CBB38C80((uint64_t)a1, (uint64_t)a2, a2, v7);
    *int v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CBB38C80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CBB38D34(a1, v7);
    uint64_t v9 = 0;
    sub_1CBB38B84((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CBB38D34(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD4226F8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CBB38E00()
{
}

uint64_t sub_1CBB38E14()
{
  return 1;
}

uint64_t sub_1CBB38E1C()
{
  return 1;
}

uint64_t sub_1CBB38E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, a4);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, a5);
  unsigned int v15 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, a6) + 4);
  uint64_t result = sub_1CC73C210(v15, *(void *)(a1 + 48), (uint64_t)&v46);
  if (!(_BYTE)v48) {
    goto LABEL_4;
  }
  if (v47 > 0x40)
  {
    if (v46) {
      MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
    }
LABEL_4:
    unint64_t v17 = sub_1CD2C31B4(a1, a2, *(_DWORD *)(v13 + 4));
    int v18 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), v17);
    unint64_t v20 = v19;
    sub_1CC73C210(v15, *(void *)(a1 + 48), (uint64_t)&v51);
    if (v53)
    {
      unsigned int v21 = v52;
      if (v52 > 0x40) {
        uint64_t v22 = *(void *)v51;
      }
      else {
        uint64_t v22 = v51 << -(char)v52 >> -(char)v52;
      }
      int v23 = 0;
      uint64_t v24 = 0;
      unsigned __int8 v45 = 1;
    }
    else
    {
      sub_1CBB3E0F0((uint64_t)&v46, *(void *)(a1 + 48), v15);
      if (v50)
      {
        unsigned int v15 = HIDWORD(v46);
        unsigned __int8 v45 = v46;
        int v23 = v46 & 0xFFFFFF00;
        uint64_t v24 = v47;
        uint64_t v22 = v48;
        uint64_t v39 = v49;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v22 = 0;
        uint64_t v39 = 0;
        unsigned __int8 v45 = 0;
        int v23 = 0;
      }
      if (!v53) {
        goto LABEL_18;
      }
      unsigned int v21 = v52;
    }
    if (v21 >= 0x41 && v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
LABEL_18:
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, void, uint64_t))a2)(a2, 3, 0, 0, 1);
    if (!v26)
    {
      char v25 = byte_1EBCC1068;
      if (!byte_1EBCC1068) {
        goto LABEL_20;
      }
    }
    int v42 = v23;
    int v27 = (**(uint64_t (***)(uint64_t, uint64_t, void, uint64_t, uint64_t))a2)(a2, 3, 0, 1, 1);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 24))(v28, 4);
    uint64_t v30 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 144))(*(void *)(a1 + 8), (v29 * v27));
    unint64_t v32 = v31;
    unsigned int v33 = *(_DWORD *)(v14 + 4);
    uint64_t result = sub_1CC73C210(v33, *(void *)(a1 + 48), (uint64_t)&v51);
    uint64_t v43 = v24;
    uint64_t v44 = v22;
    int v40 = v18;
    int v41 = v30;
    if (v53)
    {
      unsigned int v34 = v52;
      if (v52 > 0x40) {
        uint64_t v35 = *(void *)v51;
      }
      else {
        uint64_t v35 = v51 << -(char)v52 >> -(char)v52;
      }
      int v37 = 0;
      uint64_t v38 = 0;
      unsigned __int8 v36 = 1;
    }
    else
    {
      uint64_t result = sub_1CBB3E0F0((uint64_t)&v46, *(void *)(a1 + 48), v33);
      if (v50)
      {
        unsigned __int8 v36 = v46;
        unsigned int v33 = HIDWORD(v46);
        int v37 = v46 & 0xFFFFFF00;
        uint64_t v38 = v47;
        uint64_t v35 = v48;
        uint64_t v30 = v49;
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v35 = 0;
        uint64_t v30 = 0;
        unsigned __int8 v36 = 0;
        int v37 = 0;
      }
      if (!v53) {
        goto LABEL_34;
      }
      unsigned int v34 = v52;
    }
    if (v34 >= 0x41)
    {
      uint64_t result = v51;
      if (v51) {
        uint64_t result = MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
      }
    }
LABEL_34:
    *(_DWORD *)a7 = (v20 >> 24) & 0xFFF00 | 7;
    *(_DWORD *)(a7 + 4) = v40;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = v20;
    *(_DWORD *)(a7 + 24) = 0;
    char v25 = 1;
    *(unsigned char *)(a7 + 32) = 1;
    *(_DWORD *)(a7 + 40) = v45 | v42;
    *(_DWORD *)(a7 + 44) = v15;
    *(void *)(a7 + 48) = v43;
    *(void *)(a7 + 56) = v44;
    *(void *)(a7 + 64) = v39;
    *(unsigned char *)(a7 + 72) = 1;
    *(_DWORD *)(a7 + 80) = (v32 >> 24) & 0xFFF00 | 7;
    *(_DWORD *)(a7 + 84) = v41;
    *(void *)(a7 + 88) = 0;
    *(_DWORD *)(a7 + 96) = v32;
    *(_DWORD *)(a7 + 104) = 0;
    *(unsigned char *)(a7 + 112) = 1;
    *(_DWORD *)(a7 + 120) = 0;
    *(_DWORD *)(a7 + 128) = v36 | v37;
    *(_DWORD *)(a7 + 132) = v33;
    *(void *)(a7 + 136) = v38;
    *(void *)(a7 + 144) = v35;
    *(void *)(a7 + 152) = v30;
    *(unsigned char *)(a7 + 160) = 1;
    goto LABEL_35;
  }
  if (((v46 << -(char)v47) & 0x8000000000000000) == 0) {
    goto LABEL_4;
  }
  char v25 = 0;
LABEL_20:
  *(unsigned char *)a7 = 0;
LABEL_35:
  *(unsigned char *)(a7 + 168) = v25;
  return result;
}

void sub_1CBB39318(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, const llvm::MachineOperand *a4@<X4>, unsigned int *a5@<X5>, unsigned int *a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long *a15, uint64_t a16, char a17, char a18, int a19, unsigned int a20)
{
  uint64_t v20 = a3;
  unsigned int v21 = a2;
  uint64_t v22 = a1;
  uint64_t v480 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = *((unsigned int *)a2 + 6);
  if (v23 == -1)
  {
    uint64_t v34 = 0xFFFFFFFFLL;
  }
  else
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 32 * v23 + 4), *(void *)(a1 + 48), (uint64_t)v466);
    if (!(_BYTE)v467)
    {
      uint64_t v441 = 0;
      goto LABEL_4;
    }
    if (LODWORD(v466[1]) > 0x40)
    {
      if (v466[0]) {
        MEMORY[0x1D25D9CB0](v466[0], 0x1000C8000313F17);
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v21 = a2;
      uint64_t v22 = a1;
    }
    else
    {
      unint64_t v32 = ((uint64_t)v466[0] << -LOBYTE(v466[1]) >> -LOBYTE(v466[1])) & 0xFFFFFFFFFFFFFF00;
      uint64_t v33 = ((uint64_t)v466[0] << -LOBYTE(v466[1]) >> -LOBYTE(v466[1]));
    }
    uint64_t v34 = v33 | v32;
  }
  uint64_t v441 = v34;
LABEL_4:
  uint64_t v443 = *(void *)(v22 + 1416);
  if (*((_DWORD *)v21 + 14) == -1)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v207 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    uint64_t v208 = v207;
    uint64_t v209 = *(void *)(v22 + 48);
    if (*((_DWORD *)v21 + 23) == -1) {
      sub_1CBC2DBFC(v207, v209, 0, 0, (uint64_t)v466);
    }
    else {
      sub_1CBC2E5E8(v207, v209, (uint64_t)v466);
    }
    if (v468)
    {
      int v210 = *(unsigned __int8 *)(v22 + 792);
      long long v211 = v467;
      *(_OWORD *)(v22 + 760) = *(_OWORD *)v466;
      *(_OWORD *)(v22 + 776) = v211;
      if (!v210) {
        *(unsigned char *)(v22 + 792) = 1;
      }
      int v212 = *(unsigned __int8 *)(v22 + 1408);
      long long v213 = v467;
      *(_OWORD *)(v22 + 1376) = *(_OWORD *)v466;
      *(_OWORD *)(v22 + 1392) = v213;
      uint64_t v24 = 1;
      if (!v212) {
        *(unsigned char *)(v22 + 1408) = 1;
      }
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v22 + 168))(v469, v22, v208);
      int v236 = *(unsigned __int8 *)(v22 + 792);
      long long v237 = v470;
      *(_OWORD *)(v22 + 760) = *(_OWORD *)v469;
      *(_OWORD *)(v22 + 776) = v237;
      if (!v236) {
        *(unsigned char *)(v22 + 792) = 1;
      }
      uint64_t v24 = 2;
    }
  }
  uint64_t v448 = v24;
  if (*((_DWORD *)v21 + 23) == -1)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(v20 + 32) + 32 * *((unsigned int *)v21 + 7) + 4), *(void *)(v22 + 48), (uint64_t)v466);
    if ((_BYTE)v467)
    {
      if (LODWORD(v466[1]) > 0x40)
      {
        if (v466[0]) {
          MEMORY[0x1D25D9CB0](v466[0], 0x1000C8000313F17);
        }
        unint64_t v25 = 0;
        unsigned int v21 = a2;
        uint64_t v22 = a1;
      }
      else
      {
        unint64_t v25 = ((uint64_t)v466[0] << -(uint64_t)LODWORD(v466[1]) >> -(uint64_t)LODWORD(v466[1]));
      }
    }
    else
    {
      unint64_t v25 = 0;
    }
    uint64_t v26 = (v25 >> 2) & 1;
  }
  else
  {
    LODWORD(v26) = 0;
  }
  int v27 = *(uint64_t **)(*(void *)(v20 + 24) + 32);
  uint64_t v28 = (unsigned char *)v27[1];
  v466[0] = &unk_1F25FDCB8;
  v466[1] = v28 + 1328;
  *((void *)&v467 + 1) = v466;
  unsigned int v29 = sub_1CBD854F8((uint64_t)v466);
  if (*((void ***)&v467 + 1) == v466)
  {
    (*((void (**)(void **))v466[0] + 4))(v466);
  }
  else if (*((void *)&v467 + 1))
  {
    (*(void (**)(void))(**((void **)&v467 + 1) + 40))();
  }
  unsigned int v464 = v29;
  int v30 = *((_DWORD *)v21 + 1);
  unsigned int v434 = v26;
  if (v30 != 1)
  {
    if (v30 == 2)
    {
      if (*((_DWORD *)v21 + 12) != -1)
      {
        uint64_t v31 = 4;
        goto LABEL_27;
      }
      BOOL v35 = *((_DWORD *)v21 + 13) == -1;
      uint64_t v36 = 1;
    }
    else
    {
      BOOL v35 = v21[60] == 0;
      uint64_t v36 = 3;
    }
    if (v35) {
      uint64_t v31 = v36;
    }
    else {
      uint64_t v31 = v36 + 1;
    }
    goto LABEL_27;
  }
  uint64_t v31 = 0;
LABEL_27:
  int v37 = (long long *)a9;
  uint64_t v38 = 0;
  BOOL v39 = (*(_WORD *)(**(void **)(*(void *)(v20 + 24) + 32) + 18) & 0x3FF0) == 0x650
     && *((_DWORD *)v21 + 23) == -1;
  if (!v39 || *((_DWORD *)v21 + 18) == -1 || v31 != 1)
  {
    unsigned int v436 = v443;
    int v40 = v448;
    goto LABEL_32;
  }
  v466[0] = &v467;
  v466[1] = (void *)0x600000000;
  v469[0] = &v470;
  v469[1] = (void *)0x300000000;
  uint64_t v177 = *(unsigned int *)(v22 + 336);
  if (v177)
  {
    unsigned int v178 = 0;
    uint64_t v179 = 40 * v177;
    uint64_t v180 = (int *)(*(void *)(v22 + 328) + 4);
    do
    {
      int v182 = *v180;
      v180 += 10;
      int v181 = v182;
      if (v178 >= HIDWORD(v466[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v466[0] + v178) = v181;
      unsigned int v178 = ++LODWORD(v466[1]);
      v179 -= 40;
    }
    while (v179);
    unsigned int v183 = v469[1];
  }
  else
  {
    unsigned int v183 = 0;
  }
  if (a10)
  {
    uint64_t v184 = 32 * a10;
    BOOL v185 = (int *)(a9 + 4);
    do
    {
      int v187 = *v185;
      v185 += 8;
      int v186 = v187;
      if (v183 >= HIDWORD(v469[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v469[0] + v183) = v186;
      unsigned int v183 = ++LODWORD(v469[1]);
      v184 -= 32;
    }
    while (v184);
  }
  *(void *)&long long v475 = &v476;
  *((void *)&v475 + 1) = 0x400000000;
  if (v183)
  {
    unsigned int v188 = 0;
    uint64_t v189 = 0;
    unint64_t v190 = (v448 << 32) | 1;
    int v40 = v448;
    uint64_t v22 = a1;
    while (1)
    {
      uint64_t v191 = *((unsigned int *)v466[0] + (2 * v189));
      uint64_t v192 = *(void *)(v22 + 48);
      if ((v191 & 0x80000000) != 0) {
        unint64_t v193 = (uint64_t *)(*(void *)(v192 + 24) + 16 * (v191 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v193 = (uint64_t *)(*(void *)(v192 + 272) + 8 * v191);
      }
      uint64_t v194 = *v193;
      if ((*(unsigned char *)(v194 + 3) & 1) == 0) {
        uint64_t v194 = *(void *)(v194 + 24);
      }
      uint64_t v195 = *(void *)(v194 + 8);
      uint64_t v196 = *(unsigned int *)(v195 + 40);
      if (!v196) {
        break;
      }
      uint64_t v197 = *((unsigned int *)v466[0] + ((2 * v189) | 1u));
      uint64_t v198 = *(void *)(v195 + 32);
      while (*(unsigned char *)v198 != 17)
      {
        v198 += 32;
        if (!--v196) {
          goto LABEL_428;
        }
      }
      if (*(_DWORD *)(v198 + 16) != 2449 || (int v199 = *(_DWORD *)(v198 + 36)) == 0)
      {
        uint64_t v22 = a1;
        break;
      }
      if (v188 >= HIDWORD(v475)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(v475 + 4 * v188) = v199;
      unsigned int v188 = ++DWORD2(v475);
      uint64_t v22 = a1;
      uint64_t v200 = *(void *)(a1 + 48);
      if ((v197 & 0x80000000) != 0) {
        unsigned int v201 = (uint64_t *)(*(void *)(v200 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v201 = (uint64_t *)(*(void *)(v200 + 272) + 8 * v197);
      }
      uint64_t v202 = *v201;
      if ((*(unsigned char *)(v202 + 3) & 1) == 0) {
        uint64_t v202 = *(void *)(v202 + 24);
      }
      uint64_t v203 = *(void *)(v202 + 8);
      uint64_t v204 = *(unsigned int *)(v203 + 40);
      if (v204)
      {
        uint64_t v205 = *(void *)(v203 + 32);
        while (*(unsigned char *)v205 != 17)
        {
          v205 += 32;
          if (!--v204) {
            goto LABEL_428;
          }
        }
        if (*(_DWORD *)(v205 + 16) == 2450)
        {
          int v206 = *(_DWORD *)(v205 + 36);
          if (v206)
          {
            if (v188 >= HIDWORD(v475)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(v475 + 4 * v188) = v206;
            unsigned int v188 = ++DWORD2(v475);
            if (++v189 < (unint64_t)LODWORD(v469[1])) {
              continue;
            }
          }
        }
      }
      break;
    }
LABEL_428:
    if (v188 != 4) {
      goto LABEL_460;
    }
    BOOL v302 = *(_DWORD *)v475 == *(_DWORD *)(v475 + 4) && *(_DWORD *)(v475 + 8) == *(_DWORD *)(v475 + 12);
    BOOL v303 = *(_DWORD *)v475 == *(_DWORD *)v469[0] && *(_DWORD *)(v475 + 8) == *((_DWORD *)v469[0] + 1);
    int v304 = v303 && v302;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FD0, memory_order_acquire) & 1) == 0)
    {
      int v411 = __cxa_guard_acquire(&qword_1EBCC0FD0);
      unint64_t v190 = (v448 << 32) | 1;
      if (v411)
      {
        byte_1EBCC0FC1 = 1;
        __cxa_guard_release(&qword_1EBCC0FD0);
        unint64_t v190 = (v448 << 32) | 1;
      }
    }
    uint64_t v38 = 0;
    if (!v304 || !byte_1EBCC0FC1) {
      goto LABEL_461;
    }
    uint64_t v305 = *(void *)(v22 + 48);
    uint64_t v306 = (unsigned int *)v466[0];
    uint64_t v307 = *(unsigned int *)v466[0];
    if ((v307 & 0x80000000) != 0) {
      uint64_t v308 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v307 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v308 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v307);
    }
    uint64_t v309 = *v308;
    if ((*(unsigned char *)(v309 + 3) & 1) == 0) {
      uint64_t v309 = *(void *)(v309 + 24);
    }
    uint64_t v38 = *(llvm::MachineBasicBlock **)(*(void *)(v309 + 8) + 24);
    if (LODWORD(v466[1]))
    {
      uint64_t v310 = 4 * LODWORD(v466[1]);
      uint64_t v311 = v310 - 4;
      BOOL v312 = (unsigned int *)v466[0];
      do
      {
        uint64_t v313 = *v312;
        if ((v313 & 0x80000000) != 0) {
          char v314 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v313 & 0x7FFFFFFF) + 8);
        }
        else {
          char v314 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v313);
        }
        uint64_t v315 = *v314;
        if ((*(unsigned char *)(v315 + 3) & 1) == 0) {
          uint64_t v315 = *(void *)(v315 + 24);
        }
        uint64_t v316 = *(llvm::MachineBasicBlock **)(*(void *)(v315 + 8) + 24);
        ++v312;
        BOOL v317 = v316 != v38 || v311 == 0;
        v311 -= 4;
      }
      while (!v317);
      do
      {
        uint64_t v318 = *v306;
        if ((v318 & 0x80000000) != 0) {
          unint64_t v319 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v318 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v319 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v318);
        }
        uint64_t v320 = *v319;
        if ((*(unsigned char *)(v320 + 3) & 1) == 0) {
          uint64_t v320 = *(void *)(v320 + 24);
        }
        if (*(void *)(*(void *)(v320 + 8) + 24) == *(void *)(v20 + 24))
        {
          unsigned int v436 = 0;
          uint64_t v38 = 0;
          goto LABEL_462;
        }
        ++v306;
        v310 -= 4;
      }
      while (v310);
      if (v316 == v38) {
        goto LABEL_468;
      }
      goto LABEL_460;
    }
LABEL_468:
    if (v448 != 2) {
      goto LABEL_474;
    }
    uint64_t v321 = *(unsigned int *)(v22 + 764);
    if ((v321 & 0x80000000) != 0) {
      v322 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v321 & 0x7FFFFFFF) + 8);
    }
    else {
      v322 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v321);
    }
    uint64_t v323 = *v322;
    if ((*(unsigned char *)(v323 + 3) & 1) == 0) {
      uint64_t v323 = *(void *)(v323 + 24);
    }
    if (*(llvm::MachineBasicBlock **)(*(void *)(v323 + 8) + 24) == v38)
    {
LABEL_474:
      if (*((_DWORD *)a2 + 16) == -1)
      {
        int v327 = 0;
        goto LABEL_495;
      }
      uint64_t v324 = *(unsigned int *)(v22 + 724);
      if ((v324 & 0x80000000) != 0) {
        unsigned int v325 = (uint64_t *)(*(void *)(v305 + 24) + 16 * (v324 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v325 = (uint64_t *)(*(void *)(v305 + 272) + 8 * v324);
      }
      uint64_t v326 = *v325;
      if ((*(unsigned char *)(v326 + 3) & 1) == 0) {
        uint64_t v326 = *(void *)(v326 + 24);
      }
      if (*(llvm::MachineBasicBlock **)(*(void *)(v326 + 8) + 24) == v38)
      {
        int v327 = 1;
LABEL_495:
        int v347 = *(_DWORD *)(v22 + 1428);
        unint64_t v348 = sub_1CBE53724(v190, v443 & 0xFFFFFFFF00000000, v347, v327, v464);
        if (HIBYTE(v348)) {
          int v349 = 2;
        }
        else {
          int v349 = v347;
        }
        if (BYTE1(v348) | BYTE4(v348)) {
          int v350 = v349;
        }
        else {
          int v350 = v347;
        }
        if (BYTE1(v348)) {
          BOOL v351 = BYTE4(v348) == 0;
        }
        else {
          BOOL v351 = 1;
        }
        int v40 = v448;
        if (v351 && (v443 & 0xFFFFFFFF00000000) != 0x200000000) {
          goto LABEL_735;
        }
        uint64_t v376 = *(unsigned int *)(v22 + 292);
        uint64_t v377 = *(void *)(v22 + 48);
        if ((v376 & 0x80000000) != 0) {
          v378 = (uint64_t *)(*(void *)(v377 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8);
        }
        else {
          v378 = (uint64_t *)(*(void *)(v377 + 272) + 8 * v376);
        }
        uint64_t v379 = *v378;
        if ((*(unsigned char *)(v379 + 3) & 1) == 0) {
          uint64_t v379 = *(void *)(v379 + 24);
        }
        if (*(llvm::MachineBasicBlock **)(*(void *)(v379 + 8) + 24) == v38)
        {
LABEL_735:
          if (v350 != 2 || (uint64_t v352 = *(unsigned int *)(v22 + 592), !v352))
          {
LABEL_516:
            unsigned int v436 = 0;
            goto LABEL_462;
          }
          uint64_t v353 = *(void *)(v22 + 48);
          uint64_t v354 = 40 * v352;
          int v355 = (unsigned int *)(*(void *)(v22 + 584) + 4);
          while (1)
          {
            unsigned int v357 = *v355;
            v355 += 10;
            uint64_t v356 = v357;
            if ((v357 & 0x80000000) != 0) {
              unsigned int v358 = (uint64_t *)(*(void *)(v353 + 24) + 16 * (v356 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v358 = (uint64_t *)(*(void *)(v353 + 272) + 8 * v356);
            }
            uint64_t v359 = *v358;
            if ((*(unsigned char *)(v359 + 3) & 1) == 0) {
              uint64_t v359 = *(void *)(v359 + 24);
            }
            if (*(llvm::MachineBasicBlock **)(*(void *)(v359 + 8) + 24) != v38) {
              break;
            }
            v354 -= 40;
            if (!v354) {
              goto LABEL_516;
            }
          }
        }
      }
    }
LABEL_460:
    uint64_t v38 = 0;
LABEL_461:
    unsigned int v436 = v443;
    goto LABEL_462;
  }
  uint64_t v38 = 0;
  unsigned int v436 = v443;
  uint64_t v22 = a1;
  int v40 = v448;
LABEL_462:
  if ((long long *)v475 != &v476) {
    free((void *)v475);
  }
  unsigned int v21 = a2;
  if (v469[0] != &v470) {
    free(v469[0]);
  }
  if (v466[0] != &v467) {
    free(v466[0]);
  }
LABEL_32:
  if (v40 == 1 && *(unsigned char *)(v22 + 1376) == 1 && *(void *)(v22 + 1392) >= 0x800uLL) {
    *(void *)(v22 + 1392) = 0;
  }
  int v41 = *((_DWORD *)v21 + 1);
  int v438 = v38;
  if (v41 == 2)
  {
    if (*((_DWORD *)v21 + 12) == -1) {
      goto LABEL_35;
    }
  }
  else if (v41 != 3 || !v21[60])
  {
    goto LABEL_35;
  }
  if (*(unsigned char *)(v22 + 1216) == 1 && *(void *)(v22 + 1232) >= 6uLL) {
    *(void *)(v22 + 1232) = 0;
  }
LABEL_35:
  int v42 = v28[1683];
  char v463 = v28[1683];
  uint64_t v43 = *v27;
  BOOL v44 = v28[1675] == 0;
  LODWORD(v466[0]) = 0;
  int v45 = sub_1CBC1C7DC((int)v28 + 1328, v43, "SampleWriteL2Pers", (int *)v466);
  int v46 = (int)v466[0];
  if (!v45) {
    int v46 = v44;
  }
  int v430 = v46;
  if (*((_DWORD *)v21 + 23) == -1)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v433 = 0;
    goto LABEL_39;
  }
  if (!v42)
  {
    BOOL v250 = 0;
    LODWORD(v48) = 0;
    uint64_t v433 = 0;
    unsigned int v249 = 0;
    unsigned int v251 = 0;
    if (v40 == 1) {
      int v40 = 2;
    }
    goto LABEL_331;
  }
  int v245 = *((_DWORD *)v21 + 1);
  if (v245 == 2)
  {
    if (*((_DWORD *)v21 + 12) != -1)
    {
      uint64_t v248 = 4;
      goto LABEL_318;
    }
    BOOL v246 = *((_DWORD *)v21 + 13) == -1;
    uint64_t v247 = 1;
  }
  else
  {
    if (v245 != 3)
    {
      uint64_t v248 = 0;
      goto LABEL_318;
    }
    BOOL v246 = v21[60] == 0;
    uint64_t v247 = 3;
  }
  if (v246) {
    uint64_t v248 = v247;
  }
  else {
    uint64_t v248 = v247 + 1;
  }
LABEL_318:
  if (v436 == 2)
  {
    if (*(unsigned char *)(a1 + 248) == 1) {
      LODWORD(v48) = 1;
    }
    else {
      LODWORD(v48) = 3;
    }
  }
  else
  {
    LODWORD(v48) = 0;
  }
  if (v40 == 1)
  {
    if (*(unsigned char *)(a1 + 1376) == 1) {
      uint64_t v345 = 1;
    }
    else {
      uint64_t v345 = 3;
    }
    uint64_t v433 = v345;
  }
  else
  {
    uint64_t v433 = 0;
  }
  if (v248 == 4)
  {
    unsigned int v249 = *(unsigned __int8 *)(a1 + 1216);
    if (v249 != 1)
    {
      if (v249 == 7) {
        unsigned int v249 = 3;
      }
      else {
        unsigned int v249 = 0;
      }
    }
  }
  else
  {
    unsigned int v249 = 0;
  }
  BOOL v250 = v48 == 3;
  if (v48 == 3) {
    unsigned int v251 = 2;
  }
  else {
    unsigned int v251 = 1;
  }
  if (v433 != 3) {
    unsigned int v251 = v48 == 3;
  }
LABEL_331:
  LODWORD(v448) = v40;
  if (v249 == 3) {
    ++v251;
  }
  BOOL v252 = v249 == 3 && v251 > 1;
  if (v249 == 3 && v251 > 1) {
    uint64_t v253 = 0;
  }
  else {
    uint64_t v253 = v249;
  }
  uint64_t v47 = v253;
  if (v250 && v251 - v252 > 1) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v48;
  }
LABEL_39:
  uint64_t v431 = v48;
  uint64_t v432 = v47;
  if (a16)
  {
    uint64_t v221 = 32 * a16;
    do
    {
      long long v222 = *a15;
      long long v223 = a15[1];
      a15 += 2;
      *(_OWORD *)uint64_t v466 = v222;
      long long v467 = v223;
      char v468 = 1;
      unint64_t v224 = sub_1CBB40070(a1 + 840, (unint64_t)v466, 1);
      uint64_t v225 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      uint64_t v226 = *(void *)(v224 + 32);
      long long v227 = *(_OWORD *)(v224 + 16);
      *(_OWORD *)uint64_t v225 = *(_OWORD *)v224;
      *(_OWORD *)(v225 + 16) = v227;
      *(void *)(v225 + 32) = v226;
      ++*(_DWORD *)(a1 + 848);
      v221 -= 32;
    }
    while (v221);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC0FD8))
  {
    byte_1EBCC0FC2 = 1;
    __cxa_guard_release(&qword_1EBCC0FD8);
  }
  uint64_t v49 = a1;
  char v50 = (void *)(a1 + 840);
  uint64_t v429 = a1 + 840;
  if (!byte_1EBCC0FC2 || (uint64_t v51 = *(unsigned int *)(a1 + 848), !v51))
  {
    uint64_t v435 = 0;
    goto LABEL_44;
  }
  if (*(unsigned char *)(v27[2] + 354))
  {
    unsigned int v265 = 0;
    uint64_t v266 = v27[5];
    v466[0] = &v467;
    v466[1] = (void *)0x400000000;
    uint64_t v267 = (_OWORD *)*v50;
    uint64_t v268 = 40 * v51;
    unsigned int v269 = (_OWORD *)*v50;
    do
    {
      if (v265 >= HIDWORD(v466[1]))
      {
        int v392 = (char *)v466[0] + 32 * v265;
        if (v466[0] > v269 || v392 <= (char *)v269) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v270 = (char *)v466[0] + 32 * LODWORD(v466[1]);
      long long v271 = v269[1];
      *unsigned int v270 = *v269;
      v270[1] = v271;
      unsigned int v265 = ++LODWORD(v466[1]);
      unsigned int v269 = (_OWORD *)((char *)v269 + 40);
      uint64_t v267 = (_OWORD *)((char *)v267 + 40);
      v268 -= 40;
    }
    while (v268);
    uint64_t v272 = *((unsigned int *)v466[0] + 17);
    uint64_t v273 = *((unsigned int *)v466[0] + 25);
    if (*((_DWORD *)v466[0] + 9) != v272 || v272 != v273)
    {
      sub_1CC73C210(*((_DWORD *)v466[0] + 25), v266, (uint64_t)v469);
      uint64_t v49 = a1;
      if ((v273 & 0x80000000) != 0) {
        uint64_t v289 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v289 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v273);
      }
      uint64_t v290 = *v289;
      if ((*(unsigned char *)(v290 + 3) & 1) == 0) {
        uint64_t v290 = *(void *)(v290 + 24);
      }
      uint64_t v291 = *(void *)(v290 + 8);
      if (**(_WORD **)(v291 + 16) == 121) {
        uint64_t v292 = *(void *)(*(void *)(v291 + 32) + 48);
      }
      else {
        uint64_t v292 = 0;
      }
      if (!(_BYTE)v470
        || ((uint64_t v405 = v20, v406 = v469[1], LODWORD(v469[1]) > 0x40)
          ? (uint64_t v407 = *(void *)v469[0])
          : (uint64_t v407 = (uint64_t)v469[0] << -LOBYTE(v469[1]) >> -LOBYTE(v469[1])),
            uint64_t v49 = a1,
            v407))
      {
        if (v292)
        {
          if (*(_UNKNOWN **)(v292 + 32) == &unk_1CFB2E344) {
            uint64_t v346 = *(void *)(v292 + 40);
          }
          else {
            uint64_t v346 = v292 + 24;
          }
          BOOL v293 = (*(unsigned char *)(v346 + 28) & 7) == 3;
        }
        else
        {
          BOOL v293 = 0;
        }
        if (!(_BYTE)v470) {
          goto LABEL_410;
        }
        uint64_t v405 = v20;
        unsigned int v406 = v469[1];
      }
      else
      {
        BOOL v293 = 1;
      }
      if (v406 >= 0x41 && v469[0])
      {
        MEMORY[0x1D25D9CB0](v469[0], 0x1000C8000313F17);
        uint64_t v20 = v405;
        uint64_t v49 = a1;
        if (v293)
        {
LABEL_701:
          uint64_t v419 = *((unsigned int *)v466[0] + 17);
          sub_1CC73C210(*((_DWORD *)v466[0] + 17), v266, (uint64_t)v469);
          if ((v419 & 0x80000000) != 0) {
            v420 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v419 & 0x7FFFFFFF) + 8);
          }
          else {
            v420 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v419);
          }
          uint64_t v421 = *v420;
          if ((*(unsigned char *)(v421 + 3) & 1) == 0) {
            uint64_t v421 = *(void *)(v421 + 24);
          }
          uint64_t v422 = *(void *)(v421 + 8);
          if (**(_WORD **)(v422 + 16) == 121) {
            uint64_t v423 = *(void *)(*(void *)(v422 + 32) + 48);
          }
          else {
            uint64_t v423 = 0;
          }
          if (!(_BYTE)v470
            || ((uint64_t v426 = v20, v427 = v469[1], LODWORD(v469[1]) > 0x40)
              ? (uint64_t v428 = *(void *)v469[0])
              : (uint64_t v428 = (uint64_t)v469[0] << -LOBYTE(v469[1]) >> -LOBYTE(v469[1])),
                uint64_t v49 = a1,
                v428))
          {
            if (v423)
            {
              if (*(_UNKNOWN **)(v423 + 32) == &unk_1CFB2E344) {
                uint64_t v425 = *(void *)(v423 + 40);
              }
              else {
                uint64_t v425 = v423 + 24;
              }
              BOOL v424 = (*(unsigned char *)(v425 + 28) & 7) == 3;
            }
            else
            {
              BOOL v424 = 0;
            }
            if (!(_BYTE)v470)
            {
LABEL_711:
              if (v424) {
                uint64_t v275 = 3;
              }
              else {
                uint64_t v275 = 1;
              }
              goto LABEL_386;
            }
            uint64_t v426 = v20;
            unsigned int v427 = v469[1];
          }
          else
          {
            BOOL v424 = 1;
          }
          if (v427 >= 0x41 && v469[0]) {
            MEMORY[0x1D25D9CB0](v469[0], 0x1000C8000313F17);
          }
          uint64_t v20 = v426;
          uint64_t v49 = a1;
          goto LABEL_711;
        }
        goto LABEL_411;
      }
      uint64_t v20 = v405;
      uint64_t v49 = a1;
LABEL_410:
      if (v293) {
        goto LABEL_701;
      }
LABEL_411:
      if (*((_DWORD *)v466[0] + 1) != *((_DWORD *)v466[0] + 17))
      {
        unsigned int v294 = *((_DWORD *)v466[0] + 25);
LABEL_413:
        if ((v294 & 0x80000000) != 0) {
          uint64_t v295 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v294 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v295 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v294);
        }
        uint64_t v296 = *v295;
        if ((*(unsigned char *)(v296 + 3) & 1) == 0) {
          uint64_t v296 = *(void *)(v296 + 24);
        }
        uint64_t v297 = *(void *)(v296 + 8);
        if (**(_WORD **)(v297 + 16) == 121
          && (uint64_t v390 = *(void *)(*(void *)(v297 + 32) + 48)) != 0
          && (sub_1CB844168(v390, 1.0) & 1) != 0)
        {
          uint64_t v275 = 2;
        }
        else
        {
          uint64_t v275 = 0;
        }
        goto LABEL_386;
      }
      unsigned int v294 = *((_DWORD *)v466[0] + 25);
      if (*((_DWORD *)v466[0] + 9) != v294) {
        goto LABEL_413;
      }
      uint64_t v275 = 6;
LABEL_386:
      if (v466[0] != &v467) {
        free(v466[0]);
      }
      uint64_t v435 = v275;
      goto LABEL_389;
    }
    uint64_t v49 = a1;
    if (*((_DWORD *)v466[0] + 1) == v272)
    {
      uint64_t v275 = 5;
      goto LABEL_386;
    }
    sub_1CC73C210(*((_DWORD *)v466[0] + 17), v266, (uint64_t)v469);
    if ((v272 & 0x80000000) != 0) {
      uint64_t v385 = (uint64_t *)(*(void *)(v266 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v385 = (uint64_t *)(*(void *)(v266 + 272) + 8 * v272);
    }
    uint64_t v386 = *v385;
    if ((*(unsigned char *)(v386 + 3) & 1) == 0) {
      uint64_t v386 = *(void *)(v386 + 24);
    }
    uint64_t v387 = *(void *)(v386 + 8);
    if (**(_WORD **)(v387 + 16) == 121) {
      uint64_t v388 = *(void *)(*(void *)(v387 + 32) + 48);
    }
    else {
      uint64_t v388 = 0;
    }
    if (!(_BYTE)v470
      || ((uint64_t v408 = v20, v409 = v469[1], LODWORD(v469[1]) > 0x40)
        ? (uint64_t v410 = *(void *)v469[0])
        : (uint64_t v410 = (uint64_t)v469[0] << -LOBYTE(v469[1]) >> -LOBYTE(v469[1])),
          uint64_t v49 = a1,
          v410))
    {
      if (v388)
      {
        if (*(_UNKNOWN **)(v388 + 32) == &unk_1CFB2E344) {
          uint64_t v391 = *(void *)(v388 + 40);
        }
        else {
          uint64_t v391 = v388 + 24;
        }
        BOOL v389 = (*(unsigned char *)(v391 + 28) & 7) == 3;
      }
      else
      {
        BOOL v389 = 0;
      }
      if (!(_BYTE)v470)
      {
LABEL_550:
        if (v389) {
          uint64_t v275 = 4;
        }
        else {
          uint64_t v275 = 7;
        }
        goto LABEL_386;
      }
      uint64_t v408 = v20;
      unsigned int v409 = v469[1];
    }
    else
    {
      BOOL v389 = 1;
    }
    if (v409 >= 0x41 && v469[0]) {
      MEMORY[0x1D25D9CB0](v469[0], 0x1000C8000313F17);
    }
    uint64_t v20 = v408;
    uint64_t v49 = a1;
    goto LABEL_550;
  }
  uint64_t v435 = 0;
  uint64_t v49 = a1;
LABEL_389:
  unsigned int v21 = a2;
LABEL_44:
  unsigned int v52 = v464;
  if (v21[62]) {
    BOOL v53 = v464 >= 5;
  }
  else {
    BOOL v53 = 0;
  }
  if (v53) {
    unsigned int v54 = 4;
  }
  else {
    unsigned int v54 = 0;
  }
  char v55 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v49 + 208))(v49, v21, v20);
  int v56 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v49 + 320))(v49, v21, v20);
  int v57 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v49 + 328))(v49, v21, v20);
  uint64_t v59 = *(unsigned int *)(v20 + 40);
  if (v59)
  {
    uint64_t v60 = 0;
    int v61 = *(unsigned __int8 **)(v20 + 32);
    while (1)
    {
      int v62 = *v61;
      v61 += 32;
      if (v62 == 17) {
        break;
      }
      if (v59 == ++v60) {
        goto LABEL_54;
      }
    }
  }
  else
  {
LABEL_54:
    LODWORD(v60) = -1;
  }
  if ((*(_DWORD *)(*(void *)(v20 + 32) + 32 * v60 + 16) - 2824) < 0xC)
  {
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v49 + 336))(v49, a2, v20)) {
      unsigned int v63 = 1;
    }
    else {
      unsigned int v63 = 2;
    }
  }
  else
  {
    unsigned int v63 = 0;
  }
  if (v55)
  {
    unsigned int v54 = 2;
  }
  else
  {
    if (!v56)
    {
      unsigned int v64 = v448;
      if (!v57) {
        goto LABEL_60;
      }
      if (v464 > 3 && !a2[2] && !a2[62] && !*(_DWORD *)(v49 + 1428) && *((_DWORD *)a2 + 16) == -1)
      {
        unsigned int v54 = 1;
        goto LABEL_60;
      }
LABEL_667:
      *a8 = 0;
      a8[16] = 0;
      return;
    }
    if (v464 <= 3 || v441 != 15 || *((_DWORD *)a2 + 3) != 4 || a2[8]) {
      goto LABEL_667;
    }
    unsigned int v54 = 3;
    uint64_t v49 = a1;
  }
  unsigned int v64 = v448;
LABEL_60:
  unint64_t v65 = *(void *)(v20 + 48);
  if (v65 < 8)
  {
    uint64_t v68 = v20;
    goto LABEL_648;
  }
  if ((v65 & 7) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(v20 + 48) = v65;
    goto LABEL_63;
  }
  uint64_t v68 = v20;
  unsigned int v69 = 0;
  if ((v65 & 7) != 3)
  {
    int v66 = a2;
    uint64_t v49 = a1;
    unsigned int v64 = v448;
    goto LABEL_66;
  }
  int v66 = a2;
  uint64_t v49 = a1;
  unsigned int v64 = v448;
  if ((v65 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_66;
  }
  uint64_t v20 = v68;
  if (*(_DWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) != 1)
  {
LABEL_648:
    unsigned int v69 = 0;
    int v66 = a2;
    goto LABEL_66;
  }
LABEL_63:
  int v66 = a2;
  if ((v65 & 7) != 0)
  {
    uint64_t v68 = v20;
    unint64_t v67 = *(void *)((v65 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v67 = v65 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v68 = v20;
    *(void *)(v20 + 48) = v67;
  }
  unsigned int v69 = *(unsigned __int16 *)(v67 + 32);
LABEL_66:
  int v70 = *((_DWORD *)v66 + 1);
  if (v70 == 2)
  {
    if (*((_DWORD *)v66 + 12) != -1)
    {
      uint64_t v72 = 4;
      goto LABEL_71;
    }
    BOOL v71 = *((_DWORD *)v66 + 13) == -1;
    uint64_t v72 = 1;
  }
  else
  {
    if (v70 != 3)
    {
      uint64_t v72 = 0;
      goto LABEL_71;
    }
    BOOL v71 = v66[60] == 0;
    uint64_t v72 = 3;
  }
  if (!v71) {
    ++v72;
  }
LABEL_71:
  v449 = (uint64_t *)(v49 + 72);
  if (*((_DWORD *)v66 + 23) == -1)
  {
    unsigned int v73 = 0;
    unint64_t v74 = v72 | ((unint64_t)v64 << 32);
    unsigned int v75 = *((_DWORD *)v66 + 16) != -1;
    uint64_t v76 = v66;
    unsigned int v77 = v66[62];
    if (v77 && *((_DWORD *)v76 + 21) != -1) {
      unsigned int v73 = a20;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC0FE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC0FE0))
    {
      byte_1EBCC0FC3 = 1;
      __cxa_guard_release(&qword_1EBCC0FE0);
    }
    unint64_t v78 = sub_1CBB400FC(*(_DWORD *)(v49 + 1428), v441 & 0xF, v74, v77, v73, v443 & 0xFFFFFFFF00000000 | v436, v75, byte_1EBCC0FC3, v434, (v69 >> 5) & 2, v54, v63);
    int v66 = a2;
    int v79 = *((_DWORD *)a2 + 23);
    unint64_t v462 = v78;
    memset(v461, 0, 13);
    unsigned int v52 = v464;
    if (v79 == -1)
    {
      unint64_t v80 = v78;
      unint64_t v81 = sub_1CBE53724((4 * v78) & 0x300000000 | (v78 >> 2) & 7, v443 & 0xFFFFFFFF00000000 | v436, *(_DWORD *)(v49 + 1428), (v78 >> 10) & 1, v464);
      v461[0] = v81;
      LODWORD(v461[1]) = v82;
      BYTE4(v461[1]) = v83;
      int v84 = BYTE4(v81);
      uint64_t v85 = (uint64_t *)(v49 + 72);
      int v86 = v435;
      uint64_t v87 = v68;
      if ((v81 & 0xFF00) != 0 && BYTE4(v81))
      {
        int v84 = 0;
        WORD2(v461[0]) = 256;
        unint64_t v80 = v80 & 0xFFFFFFFCFFFFFFFFLL | 0x200000000;
        unint64_t v462 = v80;
      }
      BOOL v89 = (v81 & 0xFF00) != 0 || v84 != 0;
      if (HIBYTE(v81) && v89)
      {
        *(_WORD *)((char *)v461 + 7) = 256;
        unint64_t v462 = v80 & 0xFFFFFFFFFFFFFFFCLL | 2;
      }
    }
    else
    {
      uint64_t v87 = v68;
      uint64_t v85 = (uint64_t *)(v49 + 72);
      int v86 = v435;
    }
  }
  else
  {
    uint64_t v254 = 0x1000000;
    if (!v66[8]) {
      uint64_t v254 = 0x800000;
    }
    int v86 = v435;
    unint64_t v462 = ((unint64_t)v64 << 30) | (v433 << 35) | ((unint64_t)(v430 == 0) << 34) | (v432 << 38) | (v431 << 41) | (v435 << 44) | v254 | ((unint64_t)*v66 << 21) | (4 * v72) | ((unint64_t)(v66[1] == 0) << 26) | ((unint64_t)((v69 >> 5) & 2) << 28);
    memset(v461, 0, 13);
    uint64_t v87 = v68;
    uint64_t v85 = (uint64_t *)(v49 + 72);
  }
  sub_1CBE54050((uint64_t)v466, (uint64_t)v66, &v462, v461, v52, v58, 0, 61);
  uint64_t v90 = (uint64_t)a4;
  if (a10)
  {
    uint64_t v91 = 32 * a10;
    do
    {
      long long v92 = *v37;
      long long v93 = v37[1];
      v37 += 2;
      long long v470 = v93;
      *(_OWORD *)uint64_t v469 = v92;
      LOBYTE(v471) = 1;
      unint64_t v94 = sub_1CBB40070((uint64_t)v85, (unint64_t)v469, 1);
      uint64_t v95 = *(void *)(v49 + 72) + 40 * *(unsigned int *)(v49 + 80);
      uint64_t v96 = *(void *)(v94 + 32);
      long long v97 = *(_OWORD *)(v94 + 16);
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v94;
      *(_OWORD *)(v95 + 16) = v97;
      *(void *)(v95 + 32) = v96;
      ++*(_DWORD *)(v49 + 80);
      v91 -= 32;
    }
    while (v91);
  }
  uint64_t v98 = a7;
  uint64_t v99 = v438;
  if (*((_DWORD *)v66 + 23) != -1 && v86)
  {
    v469[0] = &v470;
    v469[1] = (void *)0x400000000;
    uint64_t v276 = *(unsigned int *)(v49 + 848);
    if (v276)
    {
      unsigned int v277 = 0;
      int v278 = *(_OWORD **)(a1 + 840);
      uint64_t v279 = 40 * v276;
      uint64_t v280 = v278;
      do
      {
        if (v277 >= HIDWORD(v469[1]))
        {
          v401 = (char *)v469[0] + 32 * v277;
          if (v469[0] > v280 || v401 <= (char *)v280) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        char v281 = (char *)v469[0] + 32 * LODWORD(v469[1]);
        long long v282 = v280[1];
        *char v281 = *v280;
        v281[1] = v282;
        unsigned int v277 = ++LODWORD(v469[1]);
        uint64_t v280 = (_OWORD *)((char *)v280 + 40);
        int v278 = (_OWORD *)((char *)v278 + 40);
        v279 -= 40;
      }
      while (v279);
    }
    uint64_t v49 = a1;
    *(_DWORD *)(a1 + 848) = 0;
    if ((v86 - 4) < 2)
    {
      long long v283 = *((_OWORD *)v469[0] + 1);
      long long v475 = *(_OWORD *)v469[0];
      long long v476 = v283;
      char v477 = 1;
      unint64_t v284 = sub_1CBB40070(v429, (unint64_t)&v475, 1);
      uint64_t v285 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      uint64_t v286 = *(void *)(v284 + 32);
      long long v287 = *(_OWORD *)(v284 + 16);
      *(_OWORD *)uint64_t v285 = *(_OWORD *)v284;
      *(_OWORD *)(v285 + 16) = v287;
      *(void *)(v285 + 32) = v286;
      ++*(_DWORD *)(a1 + 848);
      uint64_t v90 = (uint64_t)a4;
      goto LABEL_396;
    }
    uint64_t v90 = (uint64_t)a4;
    if (((1 << v86) & 6) != 0)
    {
      long long v328 = *((_OWORD *)v469[0] + 1);
      long long v475 = *(_OWORD *)v469[0];
      long long v476 = v328;
      char v477 = 1;
      uint64_t v329 = a1 + 840;
      unint64_t v330 = sub_1CBB40070(v429, (unint64_t)&v475, 1);
      uint64_t v331 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      uint64_t v332 = *(void *)(v330 + 32);
      long long v333 = *(_OWORD *)(v330 + 16);
      *(_OWORD *)uint64_t v331 = *(_OWORD *)v330;
      *(_OWORD *)(v331 + 16) = v333;
      *(void *)(v331 + 32) = v332;
      ++*(_DWORD *)(a1 + 848);
      long long v334 = *((_OWORD *)v469[0] + 3);
      long long v475 = *((_OWORD *)v469[0] + 2);
      long long v476 = v334;
      char v477 = 1;
      unint64_t v335 = sub_1CBB40070(v429, (unint64_t)&v475, 1);
      uint64_t v336 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      uint64_t v337 = *(void *)(v335 + 32);
      long long v338 = *(_OWORD *)(v335 + 16);
      *(_OWORD *)uint64_t v336 = *(_OWORD *)v335;
      *(_OWORD *)(v336 + 16) = v338;
      *(void *)(v336 + 32) = v337;
      ++*(_DWORD *)(a1 + 848);
      long long v339 = *((_OWORD *)v469[0] + 4);
      long long v340 = *((_OWORD *)v469[0] + 5);
    }
    else
    {
      if (((1 << v86) & 0xC8) == 0)
      {
LABEL_396:
        if (v469[0] != &v470) {
          free(v469[0]);
        }
        goto LABEL_94;
      }
      long long v380 = *((_OWORD *)v469[0] + 1);
      long long v475 = *(_OWORD *)v469[0];
      long long v476 = v380;
      char v477 = 1;
      uint64_t v329 = a1 + 840;
      unint64_t v381 = sub_1CBB40070(v429, (unint64_t)&v475, 1);
      uint64_t v382 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      uint64_t v383 = *(void *)(v381 + 32);
      long long v384 = *(_OWORD *)(v381 + 16);
      *(_OWORD *)uint64_t v382 = *(_OWORD *)v381;
      *(_OWORD *)(v382 + 16) = v384;
      *(void *)(v382 + 32) = v383;
      ++*(_DWORD *)(a1 + 848);
      long long v339 = *((_OWORD *)v469[0] + 2);
      long long v340 = *((_OWORD *)v469[0] + 3);
    }
    long long v475 = v339;
    long long v476 = v340;
    char v477 = 1;
    unint64_t v341 = sub_1CBB40070(v329, (unint64_t)&v475, 1);
    uint64_t v342 = *(void *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
    uint64_t v99 = v438;
    uint64_t v343 = *(void *)(v341 + 32);
    long long v344 = *(_OWORD *)(v341 + 16);
    *(_OWORD *)uint64_t v342 = *(_OWORD *)v341;
    *(_OWORD *)(v342 + 16) = v344;
    *(void *)(v342 + 32) = v343;
    ++*(_DWORD *)(a1 + 848);
    goto LABEL_396;
  }
LABEL_94:
  if (*((_DWORD *)v66 + 13) != -1)
  {
    uint64_t v298 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v87);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v49 + 168))(v469, v49, v298);
    int v299 = *(unsigned __int8 *)(v49 + 832);
    long long v300 = v470;
    *(_OWORD *)(v49 + 800) = *(_OWORD *)v469;
    *(_OWORD *)(v49 + 816) = v300;
    if (!v299) {
      *(unsigned char *)(v49 + 832) = 1;
    }
    sub_1CC73C210(*(_DWORD *)(v49 + 804), *(void *)(v49 + 48), (uint64_t)v469);
    if ((_BYTE)v470)
    {
      if (LODWORD(v469[1]) >= 0x41)
      {
        if (v469[0]) {
          MEMORY[0x1D25D9CB0](v469[0], 0x1000C8000313F17);
        }
        int v66 = a2;
        uint64_t v49 = a1;
        uint64_t v98 = a7;
        uint64_t v90 = (uint64_t)a4;
        uint64_t v99 = v438;
        uint64_t v85 = v449;
      }
      else if ((unint64_t)((uint64_t)v469[0] << -(uint64_t)LODWORD(v469[1]) >> -(uint64_t)LODWORD(v469[1])) >= 8)
      {
        int v301 = *(unsigned __int8 *)(v49 + 832);
        *(_DWORD *)(v49 + 800) = 1;
        *(void *)(v49 + 816) = 0;
        *(void *)(v49 + 808) = 0;
        if (!v301) {
          *(unsigned char *)(v49 + 832) = 1;
        }
      }
    }
  }
  uint64_t v100 = *(void *)(v49 + 64);
  if (v99)
  {
    uint64_t v360 = *(void *)(v100 + 48);
    uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(v99);
    uint64_t v362 = *(void *)(v49 + 64);
    *(void *)(v362 + 40) = v99;
    *(void *)(v362 + 48) = FirstInstrTerminator;
    sub_1CBB3E4A8((uint64_t)v459, (uint64_t)v466, v85, *(llvm::IntegerType ******)(v49 + 64));
    v363 = *(void **)(v49 + 64);
    uint64_t v364 = (llvm::MachineFunction *)v363[1];
    uint64_t v365 = *(void *)(v363[2] + 8) + 12720;
    uint64_t v366 = (void *)v363[4];
    v469[0] = v366;
    if (v366) {
      llvm::MetadataTracking::track((uint64_t)v469, (unsigned __int8 *)v366, 2);
    }
    unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v364, v365, (unsigned __int8 **)v469, 0);
    if (v469[0]) {
      llvm::MetadataTracking::untrack((uint64_t)v469, (unsigned __int8 *)v469[0]);
    }
    unint64_t v368 = (unint64_t *)v363[6];
    uint64_t v369 = *(void *)(v363[5] + 40);
    *((void *)MachineInstr + 3) = v369;
    uint64_t v370 = *(void *)(v369 + 32);
    uint64_t v371 = *((unsigned int *)MachineInstr + 10);
    if (v371)
    {
      uint64_t v394 = *((void *)MachineInstr + 4);
      uint64_t v395 = *(void *)(v370 + 40);
      uint64_t v396 = 32 * v371;
      do
      {
        if (!*(unsigned char *)v394)
        {
          uint64_t v397 = *(unsigned int *)(v394 + 4);
          if ((int)v397 >= 0) {
            unsigned int v398 = (uint64_t *)(*(void *)(v395 + 272) + 8 * v397);
          }
          else {
            unsigned int v398 = (uint64_t *)(*(void *)(v395 + 24) + 16 * (v397 & 0x7FFFFFFF) + 8);
          }
          uint64_t v399 = *v398;
          if (*v398)
          {
            uint64_t v400 = *(void *)(v399 + 16);
            *(void *)(v399 + 16) = v394;
            *(void *)(v394 + 16) = v400;
            if (*(unsigned char *)(v394 + 3))
            {
              *(void *)(v394 + 24) = v399;
            }
            else
            {
              *(void *)(v394 + 24) = 0;
              unsigned int v398 = (uint64_t *)(v400 + 24);
            }
          }
          else
          {
            *(void *)(v394 + 16) = v394;
            *(void *)(v394 + 24) = 0;
          }
          *unsigned int v398 = v394;
          uint64_t v49 = a1;
          uint64_t v98 = a7;
        }
        v394 += 32;
        v396 -= 32;
      }
      while (v396);
    }
    uint64_t v372 = *(void *)(v370 + 728);
    if (v372) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v372 + 24))(v372, MachineInstr);
    }
    unint64_t v373 = *v368 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t MachineInstr = v373 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v368;
    *(void *)(v373 + 8) = MachineInstr;
    *unint64_t v368 = *v368 & 7 | (unint64_t)MachineInstr;
    uint64_t v374 = v363[7];
    if (v374) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v374 + 24))(v374, MachineInstr);
    }
    long long v470 = 0uLL;
    v469[1] = 0;
    HIDWORD(v469[0]) = v460;
    LODWORD(v469[0]) = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v364, (const llvm::MachineOperand *)v469);
    uint64_t v375 = *(void *)(v49 + 64);
    *(void *)(v375 + 40) = *(void *)(v360 + 24);
    *(void *)(v375 + 48) = v360;
    int v66 = a2;
    uint64_t v90 = (uint64_t)a4;
  }
  else
  {
    sub_1CBB3E4A8((uint64_t)v459, (uint64_t)v466, v85, (llvm::IntegerType *****)v100);
  }
  LOBYTE(v456) = 0;
  unsigned __int8 v458 = 0;
  LOBYTE(v453) = 0;
  char v455 = 0;
  if (LOWORD(v461[0]))
  {
    uint64_t v101 = &v456;
    if (!LOBYTE(v461[0])) {
      uint64_t v101 = &v453;
    }
    int v102 = *((unsigned __int8 *)v101 + 32);
    long long v103 = *(_OWORD *)(v49 + 1352);
    *uint64_t v101 = *(_OWORD *)(v49 + 1336);
    v101[1] = v103;
    if (!v102) {
      *((unsigned char *)v101 + 32) = 1;
    }
  }
  if (*(_WORD *)((char *)v461 + 3))
  {
    v412 = &v456;
    if (!BYTE3(v461[0])) {
      v412 = &v453;
    }
    int v413 = *((unsigned __int8 *)v412 + 32);
    long long v414 = *(_OWORD *)(v49 + 1312);
    long long *v412 = *(_OWORD *)(v49 + 1296);
    v412[1] = v414;
    if (!v413) {
      *((unsigned char *)v412 + 32) = 1;
    }
  }
  if (BYTE6(v461[0]))
  {
    LODWORD(v475) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(void *)(v49 + 48), 129, "", 0);
    v415 = sub_1CC7390C0(*(void **)(v49 + 64), 2806, (int *)&v475, 1, 0);
    int v416 = *(_DWORD *)(v49 + 292);
    long long v470 = 0uLL;
    v469[1] = 0;
    HIDWORD(v469[0]) = v416;
    LODWORD(v469[0]) = 0;
    llvm::MachineInstr::addOperand(v417, v415, (const llvm::MachineOperand *)v469);
    llvm::MachineOperand::setReg(v49 + 288, v475);
    long long v418 = *(_OWORD *)(v49 + 304);
    long long v456 = *(_OWORD *)(v49 + 288);
    long long v457 = v418;
    if (!v458) {
      unsigned __int8 v458 = 1;
    }
    int v66 = a2;
    uint64_t v49 = a1;
    uint64_t v98 = a7;
    uint64_t v90 = (uint64_t)a4;
  }
  if (HIBYTE(v461[0]))
  {
    long long v288 = *(_OWORD *)(v49 + 1272);
    long long v453 = *(_OWORD *)(v49 + 1256);
    long long v454 = v288;
    if (!v455) {
      char v455 = 1;
    }
  }
  int v104 = v458;
  if (BYTE2(v461[1]))
  {
    long long v217 = *(_OWORD *)(v49 + 1392);
    long long v456 = *(_OWORD *)(v49 + 1376);
    long long v457 = v217;
    if (!v458) {
      unsigned __int8 v458 = 1;
    }
    int v104 = 1;
  }
  LODWORD(v105) = *a5;
  v106.i32[0] = *a5;
  v106.i32[1] = *(_DWORD *)v98;
  int32x2_t v107 = (int32x2_t)vand_s8(v106, (int8x8_t)0xFF000000FFLL);
  unsigned int v108 = v464;
  if (*((_DWORD *)v66 + 3) == -1)
  {
    if (vceq_s32(v107, (int32x2_t)0x100000001).u8[0]) {
      int v255 = 49;
    }
    else {
      int v255 = 41;
    }
    if (v433 == 3) {
      int v256 = 2;
    }
    else {
      int v256 = 1;
    }
    if (v432 == 3) {
      int v257 = 2;
    }
    else {
      int v257 = 1;
    }
    if (v431 == 3) {
      int v258 = 2;
    }
    else {
      int v258 = 1;
    }
    LODWORD(v469[0]) = 48;
    HIDWORD(v469[0]) = v255;
    if (v464 < 5) {
      uint64_t v119 = 79;
    }
    else {
      uint64_t v119 = 80;
    }
    v469[1] = (void *)__PAIR64__(v257, v256);
    LODWORD(v470) = v258;
    uint64_t v121 = 5;
  }
  else
  {
    v109.i32[1] = 1;
    int8x8_t v110 = (int8x8_t)vceq_s32(v107, (int32x2_t)0x100000001);
    if (v456 == 1 || v104 == 0) {
      int v112 = 1;
    }
    else {
      int v112 = 2;
    }
    BOOL v113 = v453 == 1 || v455 == 0;
    v109.i32[0] = v441;
    uint8x8_t v114 = (uint8x8_t)vcnt_s8(v109);
    v114.i16[0] = vaddlv_u8(v114);
    if (v113) {
      int v115 = 1;
    }
    else {
      int v115 = 2;
    }
    if (a18) {
      int v116 = 75;
    }
    else {
      int v116 = 12;
    }
    if (v66[2]) {
      unsigned int v117 = 164;
    }
    else {
      unsigned int v117 = 166;
    }
    if (v66[2]) {
      unsigned int v118 = 165;
    }
    else {
      unsigned int v118 = 167;
    }
    if (v464 >= 5) {
      uint64_t v119 = v118;
    }
    else {
      uint64_t v119 = v117;
    }
    if (v66[8]) {
      int v120 = 59;
    }
    else {
      int v120 = 54;
    }
    v469[0] = (void *)__PAIR64__(dword_1CDB18C1C[((unint64_t)v114.u32[0] << v66[96]) - 1], v120);
    v469[1] = (void *)__PAIR64__(v115, v112);
    *(int8x8_t *)&long long v470 = vbsl_s8(v110, (int8x8_t)0x2A00000031, (int8x8_t)0x4C00000029);
    DWORD2(v470) = v116;
    uint64_t v121 = 7;
  }
  unsigned int v122 = sub_1CBE0418C(v119, v121, v469);
  v469[0] = (void *)1;
  unint64_t v123 = &v469[1];
  for (uint64_t i = 1; i != 17; i += 2)
    v469[i] = (void *)-4096;
  *(void *)&long long v475 = 1;
  for (uint64_t j = 8; j != 136; j += 16)
    *(void *)((char *)&v475 + j) = 0x7FFFFFFFFFFFFFFFLL;
  if (*(unsigned char *)v90 == 7)
  {
    v465[0] = (uint64_t)(*(unsigned int *)(v90 + 4) | ((unint64_t)*(unsigned int *)(v90 + 24) << 32)) / 8;
    uint64_t v105 = v465[0];
    uint64_t v126 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v126 + 8);
    unint64_t v478 = (long long *)v90;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v105;
    LOBYTE(v105) = *(unsigned char *)a5;
  }
  if (v105 == 7)
  {
    v465[0] = (uint64_t)(a5[1] | ((unint64_t)a5[6] << 32)) / 8;
    uint64_t v127 = v465[0];
    uint64_t v128 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v128 + 8);
    unint64_t v478 = (long long *)a5;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v127;
  }
  if (*(unsigned char *)a6 == 7)
  {
    v465[0] = (uint64_t)(a6[1] | ((unint64_t)a6[6] << 32)) / 8;
    uint64_t v129 = v465[0];
    uint64_t v130 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v130 + 8);
    unint64_t v478 = (long long *)a6;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v129;
  }
  if (*(unsigned char *)v98 == 7)
  {
    v465[0] = (uint64_t)(*(unsigned int *)(v98 + 4) | ((unint64_t)*(unsigned int *)(v98 + 24) << 32)) / 8;
    uint64_t v131 = v465[0];
    uint64_t v132 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v132 + 8);
    unint64_t v478 = (long long *)v98;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v131;
  }
  if (v458 && v456 == 7)
  {
    uint64_t v133 = (uint64_t)(DWORD1(v456) | ((unint64_t)DWORD2(v457) << 32)) / 8;
    v465[0] = v133;
    uint64_t v134 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v134 + 8);
    unint64_t v478 = &v456;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v133;
  }
  if (v455 && v453 == 7)
  {
    uint64_t v218 = (uint64_t)(DWORD1(v453) | ((unint64_t)DWORD2(v454) << 32)) / 8;
    v465[0] = v218;
    uint64_t v219 = sub_1CBB40558((uint64_t)&v475, v465);
    ++*(_DWORD *)(v219 + 8);
    unint64_t v478 = &v453;
    sub_1CBB40A04((uint64_t)v469, (uint64_t *)&v478)[1] = v218;
  }
  unsigned int v135 = v475;
  unsigned int v136 = sub_1CBB40F44((uint64_t)v469, v98);
  char v137 = (char)v469[0];
  if ((uint64_t)v469[0])
  {
    uint64_t v138 = 8;
    unint64_t v139 = &v469[1];
  }
  else
  {
    unint64_t v139 = (void **)v469[1];
    uint64_t v138 = v470;
  }
  if (&v139[2 * v138] == (void **)v136) {
    int v140 = 0;
  }
  else {
    int v140 = *((_DWORD *)sub_1CBB40FE0((uint64_t)&v475, v136[1]) + 2);
  }
  uint64_t v141 = sub_1CBB40F44((uint64_t)v469, (uint64_t)a5);
  if (v137)
  {
    uint64_t v142 = 8;
  }
  else
  {
    unint64_t v123 = (void **)v469[1];
    uint64_t v142 = v470;
  }
  unsigned int v143 = v135 >> 1;
  uint64_t v144 = a1;
  if (&v123[2 * v142] == (void **)v141) {
    int v145 = 0;
  }
  else {
    int v145 = *((_DWORD *)sub_1CBB40FE0((uint64_t)&v475, v141[1]) + 2);
  }
  if (v143 != 5)
  {
    if (v143 != 6) {
      goto LABEL_161;
    }
    sub_1CBB4041C(a1, v98);
    uint64_t v403 = a1;
    uint64_t v404 = (uint64_t)a5;
    goto LABEL_599;
  }
  if (v140 == 1)
  {
    int v228 = *(_DWORD *)(v98 + 4);
    int v229 = (*(_DWORD *)v98 >> 8) & 0xFFF;
    if (!*(_DWORD *)v98) {
      int v229 = 0;
    }
    if (v229 == 2) {
      goto LABEL_293;
    }
    uint64_t v230 = 1;
    if (v229 > 13)
    {
      int v66 = a2;
      uint64_t v144 = a1;
      uint64_t v98 = a7;
      if (v229 == 15)
      {
LABEL_293:
        uint64_t v230 = 257;
LABEL_294:
        uint64_t v231 = *(void *)(v144 + 64);
        unint64_t v478 = (long long *)v230;
        int v479 = 0;
        unsigned int v232 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long **, uint64_t, void, void, void))(*(void *)v231 + 32))(v231, 313, &v478, 1, 0, 0, 0);
        BOOL v234 = v233;
        LODWORD(v465[0]) = 1;
        v465[1] = 0;
        v465[2] = (2 * v228);
        llvm::MachineInstr::addOperand(v233, v232, (const llvm::MachineOperand *)v465);
        int v235 = *(_DWORD *)(*((void *)v234 + 4) + 4);
        *(_DWORD *)uint64_t v98 = 0;
        *(_DWORD *)(v98 + 4) = v235;
        *(void *)(v98 + 16) = 0;
        *(void *)(v98 + 24) = 0;
        *(void *)(v98 + 8) = 0;
        goto LABEL_161;
      }
      if (v229 != 14) {
        goto LABEL_294;
      }
    }
    else
    {
      int v66 = a2;
      uint64_t v144 = a1;
      uint64_t v98 = a7;
      if (v229 != 1)
      {
        if (v229 == 3) {
          uint64_t v230 = 513;
        }
        goto LABEL_294;
      }
    }
    uint64_t v230 = 129;
    goto LABEL_294;
  }
  sub_1CBB4041C(a1, (uint64_t)a5);
  if (v145 != 1)
  {
    uint64_t v403 = a1;
    uint64_t v404 = v98;
LABEL_599:
    sub_1CBB4041C(v403, v404);
  }
LABEL_161:
  if ((v475 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)&v475 + 1), 8);
  }
  if (((uint64_t)v469[0] & 1) == 0) {
    MEMORY[0x1D25D9CD0](v469[1], 8);
  }
  unsigned int v146 = *(void **)(v144 + 64);
  BOOL v147 = (llvm::MachineFunction *)v146[1];
  uint64_t v148 = *(void *)(v146[2] + 8) + 48 * v122;
  uint64_t v149 = (void *)v146[4];
  v469[0] = v149;
  if (v149) {
    llvm::MetadataTracking::track((uint64_t)v469, (unsigned __int8 *)v149, 2);
  }
  int v150 = llvm::MachineFunction::CreateMachineInstr(v147, v148, (unsigned __int8 **)v469, 0);
  if (v469[0]) {
    llvm::MetadataTracking::untrack((uint64_t)v469, (unsigned __int8 *)v469[0]);
  }
  unsigned int v151 = (unint64_t *)v146[6];
  uint64_t v152 = *(void *)(v146[5] + 40);
  *((void *)v150 + 3) = v152;
  uint64_t v153 = *(void *)(v152 + 32);
  uint64_t v154 = *((unsigned int *)v150 + 10);
  if (v154)
  {
    uint64_t v238 = *((void *)v150 + 4);
    uint64_t v239 = *(void *)(v153 + 40);
    uint64_t v240 = 32 * v154;
    do
    {
      if (!*(unsigned char *)v238)
      {
        uint64_t v241 = *(unsigned int *)(v238 + 4);
        if ((int)v241 >= 0) {
          BOOL v242 = (uint64_t *)(*(void *)(v239 + 272) + 8 * v241);
        }
        else {
          BOOL v242 = (uint64_t *)(*(void *)(v239 + 24) + 16 * (v241 & 0x7FFFFFFF) + 8);
        }
        uint64_t v243 = *v242;
        if (*v242)
        {
          uint64_t v244 = *(void *)(v243 + 16);
          *(void *)(v243 + 16) = v238;
          *(void *)(v238 + 16) = v244;
          if (*(unsigned char *)(v238 + 3))
          {
            *(void *)(v238 + 24) = v243;
          }
          else
          {
            *(void *)(v238 + 24) = 0;
            BOOL v242 = (uint64_t *)(v244 + 24);
          }
        }
        else
        {
          *(void *)(v238 + 16) = v238;
          *(void *)(v238 + 24) = 0;
        }
        *BOOL v242 = v238;
      }
      v238 += 32;
      v240 -= 32;
    }
    while (v240);
  }
  uint64_t v155 = *(void *)(v153 + 728);
  if (v155) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v155 + 24))(v155, v150);
  }
  unint64_t v156 = *v151 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v150 = v156 | *(void *)v150 & 7;
  *((void *)v150 + 1) = v151;
  *(void *)(v156 + 8) = v150;
  *unsigned int v151 = *v151 & 7 | (unint64_t)v150;
  uint64_t v157 = v146[7];
  if (v157) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v157 + 24))(v157, v150);
  }
  *(void *)&long long v475 = v147;
  *((void *)&v475 + 1) = v150;
  if (*((_DWORD *)v66 + 23) == -1)
  {
    unsigned int v442 = v108;
    if (v66[8]) {
      int v158 = 32;
    }
    else {
      int v158 = 16;
    }
    uint64_t v444 = v87;
    int v159 = sub_1CD2C4E60((uint64_t *)v144, (uint64_t)v66, v87);
    uint64_t v160 = (*(uint64_t (**)(void))(**(void **)(v144 + 8) + 256))();
    uint64_t v161 = (v158 << 19) | 4u | (8 * (unsigned __int16)v159);
    if (v159 == 1) {
      uint64_t v161 = (8 * v158) | 1u;
    }
    BOOL v439 = (llvm::MachineBasicBlock *)v161;
    uint64_t v440 = v160;
    uint64_t v162 = *(void *)(v144 + 48);
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v162, "", 0);
    unint64_t v164 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v162 + 24) + 16 * v164) = 4;
    unint64_t v165 = *(unsigned int *)(v162 + 432);
    if (v164 >= v165)
    {
      uint64_t v166 = *(void *)(v162 + 440);
      uint64_t v167 = v164 + 1 - v165;
      if (v164 >= *(unsigned int *)(v162 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v168 = *(_DWORD *)(v162 + 432);
      if (v167)
      {
        uint64_t v169 = (void *)(*(void *)(v162 + 424) + 8 * *(unsigned int *)(v162 + 432));
        uint64_t v170 = ~v164 + v165;
        do
        {
          *v169++ = v166;
          BOOL v53 = __CFADD__(v170++, 1);
        }
        while (!v53);
        int v168 = *(_DWORD *)(v162 + 432);
      }
      *(_DWORD *)(v162 + 432) = v168 + v167;
    }
    *(void *)(*(void *)(v162 + 424) + 8 * v164) = v439;
    uint64_t v171 = *(void *)(v162 + 8);
    uint64_t v144 = a1;
    uint64_t v98 = a7;
    unsigned int v108 = v442;
    if (v171) {
      (*(void (**)(uint64_t))(*(void *)v171 + 24))(v171);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * v164) = v440 & 0xFFFFFFFFFFFFFFFBLL;
    long long v470 = 0uLL;
    v469[1] = 0;
    HIDWORD(v469[0]) = IncompleteVirtualRegister;
    LODWORD(v469[0]) = 0x1000000;
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    LODWORD(v469[0]) = 1;
    *(void *)&long long v470 = 0;
    v469[1] = 0;
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    uint64_t v87 = v444;
    int v66 = a2;
  }
  else
  {
    LODWORD(v469[0]) = 1;
    *(void *)&long long v470 = 0;
    v469[1] = 0;
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  }
  unint64_t v172 = v462;
  LODWORD(v469[0]) = 1;
  v469[1] = 0;
  *(void *)&long long v470 = v462;
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  if (*((_DWORD *)v66 + 23) != -1) {
    goto LABEL_197;
  }
  if (!v458) {
    goto LABEL_193;
  }
  if (v456 != 1)
  {
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)&v456);
LABEL_193:
    LODWORD(v469[0]) = 1;
    *(void *)&long long v470 = 0;
    v469[1] = 0;
    goto LABEL_194;
  }
  LODWORD(v469[0]) = 1;
  v469[1] = 0;
  *(void *)&long long v470 = (unsigned __int16)v457;
LABEL_194:
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  if (v455)
  {
    if (v453 == 1)
    {
      LODWORD(v469[0]) = 1;
      v469[1] = 0;
      *(void *)&long long v470 = (unsigned __int16)v454;
      goto LABEL_196;
    }
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)&v453);
  }
  LODWORD(v469[0]) = 1;
  *(void *)&long long v470 = 0;
  v469[1] = 0;
LABEL_196:
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
LABEL_197:
  llvm::MachineInstr::addOperand(v150, v147, a4);
  LODWORD(v469[0]) = 1;
  *(void *)&long long v470 = 0;
  v469[1] = 0;
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)a5);
  if (*(unsigned char *)a5 != 1)
  {
    LODWORD(v469[0]) = 1;
    *(void *)&long long v470 = 0;
    v469[1] = 0;
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  }
  if (*((_DWORD *)v66 + 23) == -1)
  {
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)a6);
    LODWORD(v469[0]) = 1;
    *(void *)&long long v470 = 0;
    v469[1] = 0;
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v98);
    if (*(unsigned char *)v98 != 1)
    {
      LODWORD(v469[0]) = 1;
      *(void *)&long long v470 = 0;
      v469[1] = 0;
      llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    }
  }
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v459);
  LODWORD(v469[0]) = 1;
  *(void *)&long long v470 = 0;
  v469[1] = 0;
  llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  if (*((_DWORD *)v66 + 23) != -1)
  {
    uint64_t v259 = (v172 >> 35) & 7;
    if (v259 > 1)
    {
      llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)(v144 + 1376));
      LODWORD(v469[0]) = 1;
      *(void *)&long long v470 = 0;
      v469[1] = 0;
    }
    else
    {
      if (v259) {
        uint64_t v260 = *(void *)(v144 + 1392);
      }
      else {
        uint64_t v260 = 0;
      }
      LODWORD(v469[0]) = 1;
      v469[1] = 0;
      *(void *)&long long v470 = v260;
    }
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    uint64_t v261 = (v172 >> 38) & 7;
    if (v261 > 1)
    {
      llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)(v144 + 1216));
      LODWORD(v469[0]) = 1;
      *(void *)&long long v470 = 0;
      v469[1] = 0;
    }
    else
    {
      if (v261) {
        uint64_t v262 = *(void *)(v144 + 1232);
      }
      else {
        uint64_t v262 = 0;
      }
      LODWORD(v469[0]) = 1;
      v469[1] = 0;
      *(void *)&long long v470 = v262;
    }
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
    uint64_t v263 = (v172 >> 41) & 7;
    if (v263 > 1)
    {
      llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)(v144 + 248));
      LODWORD(v469[0]) = 1;
      *(void *)&long long v470 = 0;
      v469[1] = 0;
    }
    else
    {
      if (v263) {
        uint64_t v264 = *(void *)(v144 + 264);
      }
      else {
        uint64_t v264 = 0;
      }
      LODWORD(v469[0]) = 1;
      v469[1] = 0;
      *(void *)&long long v470 = v264;
    }
    llvm::MachineInstr::addOperand(v150, v147, (const llvm::MachineOperand *)v469);
  }
  if (v108 >= 5)
  {
    v469[0] = (void *)v144;
    v469[1] = v66;
    *(void *)&long long v470 = &v462;
    *((void *)&v470 + 1) = v461;
    v471 = &v464;
    uint64_t v472 = &v463;
    uint64_t v473 = v449;
    v474 = &v475;
    uint64_t v214 = *(void *)(v144 + 64);
    *(void *)(v214 + 40) = *(void *)(v87 + 24);
    *(void *)(v214 + 48) = v150;
    sub_1CBB3FF44((uint64_t *)v469, 94, v173);
    sub_1CBB3FF44((uint64_t *)v469, 95, v215);
    uint64_t v216 = *(void *)(v144 + 64);
    *(void *)(v216 + 40) = *(void *)(v87 + 24);
    *(void *)(v216 + 48) = v87;
  }
  *(_OWORD *)a8 = v475;
  a8[16] = 1;
  unsigned int v174 = (char *)v466[1];
  if (v467)
  {
    uint64_t v175 = 96 * v467;
    do
    {
      uint64_t v176 = *(char **)&v174[v175 - 72];
      if (&v174[v175 - 56] != v176) {
        free(v176);
      }
      v175 -= 96;
    }
    while (v175);
    unsigned int v174 = (char *)v466[1];
  }
  if (v174 != (char *)&v467 + 8) {
    free(v174);
  }
}

void sub_1CBB3C1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4);
    *(_DWORD *)unint64_t v78 = -1;
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)a1 + 152))(a1, v13, v78, 0);
    if (*(int *)v78 >= 0) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (!(v15 | v14 ^ 1)) {
      uint64_t v13 = 0;
    }
  }
  if (*(unsigned char *)(a2 + 61))
  {
    *a7 = 1;
    return;
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    uint64_t v77 = v13;
    if (*(_DWORD *)(a2 + 48) == -1)
    {
      unsigned int v16 = *(_DWORD *)(a2 + 4);
      if (!v16) {
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v16 = (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 224))(*(void *)(a1 + 8), a2) >> 1;
      if (!v16)
      {
LABEL_30:
        if (v77)
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 168))(v78, a1);
          int v39 = *(unsigned __int8 *)(a1 + 320);
          long long v40 = *(_OWORD *)&v78[16];
          *(_OWORD *)(a1 + 288) = *(_OWORD *)v78;
          *(_OWORD *)(a1 + 304) = v40;
          if (!v39) {
            *(unsigned char *)(a1 + 320) = 1;
          }
          uint64_t v41 = 0x200000005;
        }
        else
        {
          uint64_t v41 = 5;
        }
LABEL_62:
        int v53 = *(unsigned __int8 *)(a1 + 1424);
        *(void *)(a1 + 1416) = v41;
        if (!v53) {
          *(unsigned char *)(a1 + 1424) = 1;
        }
        return;
      }
    }
    int v24 = 0;
    *a5 = 8;
    do
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a4, (v24 + *(_DWORD *)(a2 + 72)));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v25, a6, 0xFFFFFFFFLL);
      if (!*(unsigned char *)(a2 + 60))
      {
        int v26 = *(_DWORD *)(a6 + 8);
        int v27 = (_OWORD *)(*(void *)a6 + 32 * (v26 - 2));
        long long v28 = v27[1];
        *(_OWORD *)unint64_t v78 = *v27;
        *(_OWORD *)&v78[16] = v28;
        char v79 = 1;
        unint64_t v29 = sub_1CBB40070(a1 + 328, (unint64_t)v78, 1);
        uint64_t v30 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v31 = *(void *)(v29 + 32);
        long long v32 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v29;
        *(_OWORD *)(v30 + 16) = v32;
        *(void *)(v30 + 32) = v31;
        ++*(_DWORD *)(a1 + 336);
        uint64_t v33 = (_OWORD *)(*(void *)a6 + 32 * (v26 - 1));
        long long v34 = v33[1];
        *(_OWORD *)unint64_t v78 = *v33;
        *(_OWORD *)&v78[16] = v34;
        char v79 = 1;
        unint64_t v35 = sub_1CBB40070(a1 + 328, (unint64_t)v78, 1);
        uint64_t v36 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v37 = *(void *)(v35 + 32);
        long long v38 = *(_OWORD *)(v35 + 16);
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v35;
        *(_OWORD *)(v36 + 16) = v38;
        *(void *)(v36 + 32) = v37;
        ++*(_DWORD *)(a1 + 336);
      }
      ++v24;
    }
    while (v16 != v24);
    goto LABEL_30;
  }
  if (v13)
  {
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a4, *(unsigned int *)(a2 + 88));
    sub_1CBC2DBFC(v56, *(void *)(a1 + 48), 0x100000001, 0, (uint64_t)v78);
    if (v79)
    {
      sub_1CBC2DBFC(v56, *(void *)(a1 + 48), 0, 0, (uint64_t)v83);
      LOBYTE(a7) = v78[0];
      *(_OWORD *)unint64_t v81 = *(_OWORD *)&v78[1];
      *(_OWORD *)&v81[15] = *(_OWORD *)&v78[16];
      *(_OWORD *)&v82[7] = *(_OWORD *)v83;
      *(_OWORD *)&v82[23] = *(_OWORD *)&v83[16];
      *(_OWORD *)unint64_t v80 = *(_OWORD *)v82;
      *(_OWORD *)&v80[16] = *(_OWORD *)&v82[16];
      *(void *)&v80[31] = *(void *)&v83[24];
      uint64_t v17 = 1;
      int v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(v82, a1, v13);
      LOBYTE(a7) = 0;
      int v18 = 0;
      *(_OWORD *)&v83[7] = *(_OWORD *)v82;
      *(_OWORD *)&v83[23] = *(_OWORD *)&v82[16];
      *(_OWORD *)unint64_t v80 = *(_OWORD *)v83;
      *(_OWORD *)&v80[16] = *(_OWORD *)&v83[16];
      *(void *)&v80[31] = *(void *)&v82[24];
      uint64_t v17 = 2;
    }
  }
  else
  {
    uint64_t v17 = 0;
    int v18 = 0;
  }
  unsigned int v19 = *(_DWORD *)(a2 + 76);
  unsigned int v20 = *(_DWORD *)(a2 + 68);
  if (v19 == -1 && v20 == -1)
  {
    if (*(_DWORD *)(a2 + 92) == -1)
    {
      if (v13)
      {
        int v50 = *(unsigned __int8 *)(a1 + 320);
        long long v51 = *(_OWORD *)&v80[23];
        *(_OWORD *)(a1 + 288) = *(_OWORD *)&v80[7];
        *(_OWORD *)(a1 + 304) = v51;
        if (!v50) {
          *(unsigned char *)(a1 + 320) = 1;
        }
        if (v18)
        {
          int v52 = *(unsigned __int8 *)(a1 + 1328);
          *(unsigned char *)(a1 + 1296) = (_BYTE)a7;
          *(_OWORD *)(a1 + 1312) = *(_OWORD *)&v81[15];
          *(_OWORD *)(a1 + 1297) = *(_OWORD *)v81;
          if (!v52) {
            *(unsigned char *)(a1 + 1328) = 1;
          }
        }
      }
      uint64_t v41 = v17 << 32;
      goto LABEL_62;
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)a1 + 72))(v78, a1, 0);
    int v21 = *(unsigned __int8 *)(a1 + 280);
    long long v22 = *(_OWORD *)&v78[16];
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 264) = v22;
    if (!v21) {
      *(unsigned char *)(a1 + 280) = 1;
    }
    if (!*(unsigned char *)(a1 + 1424)) {
      *(unsigned char *)(a1 + 1424) = 1;
    }
    uint64_t v23 = 0x100000004;
LABEL_69:
    *(void *)(a1 + 1416) = v23;
    return;
  }
  if (v20 == -1) {
    uint64_t v42 = v19;
  }
  else {
    uint64_t v42 = v20;
  }
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a4, v42);
  uint64_t v44 = v43;
  if (*(_DWORD *)(a2 + 92) != -1)
  {
    sub_1CBC2E5E8(v43, *(void *)(a1 + 48), (uint64_t)v78);
    if (v79
      && (v78[0] == 1 ? (BOOL v45 = *(void *)&v78[16] < 255) : (BOOL v45 = 0), !v45 ? (v46 = 0) : (v46 = 1), v78[0] == 7 || v46))
    {
      int v54 = *(unsigned __int8 *)(a1 + 280);
      long long v55 = *(_OWORD *)&v78[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v78;
      *(_OWORD *)(a1 + 264) = v55;
      if (!v54) {
        *(unsigned char *)(a1 + 280) = 1;
      }
      uint64_t v49 = 2;
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(v83, a1, v44);
      int v47 = *(unsigned __int8 *)(a1 + 280);
      long long v48 = *(_OWORD *)&v83[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v83;
      *(_OWORD *)(a1 + 264) = v48;
      if (!v47) {
        *(unsigned char *)(a1 + 280) = 1;
      }
      uint64_t v49 = 4;
    }
    uint64_t v23 = v49 | (v17 << 32);
    if (!*(unsigned char *)(a1 + 1424)) {
      *(unsigned char *)(a1 + 1424) = 1;
    }
    goto LABEL_69;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v43) & 1) != 0
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, v44))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8))) {
      goto LABEL_111;
    }
  }
  else if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v44) & 1) == 0 {
         && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, v44)
  }
         || (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8)) != 2)
  {
LABEL_111:
    llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const llvm::Twine *)1);
  }
  int v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, a2, a4);
  sub_1CBC2DBFC(v44, *(void *)(a1 + 48), 0x100000000, v57, (uint64_t)v78);
  sub_1CBC2DBFC(v44, *(void *)(a1 + 48), 0, 0, (uint64_t)v83);
  if (!v79)
  {
    int v62 = 2 * (v20 == -1);
    int v63 = 2 * (v20 != -1);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(v82, a1, v44);
    int v64 = *(unsigned __int8 *)(a1 + 280);
    long long v65 = *(_OWORD *)&v82[16];
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v82;
    *(_OWORD *)(a1 + 264) = v65;
    if (!v64) {
      *(unsigned char *)(a1 + 280) = 1;
    }
LABEL_91:
    int v61 = 1;
    goto LABEL_92;
  }
  int v58 = v78[0];
  if (v20 == -1) {
    int v59 = v57;
  }
  else {
    int v59 = 1;
  }
  if (*(void *)&v78[16]) {
    BOOL v60 = v78[0] == 1;
  }
  else {
    BOOL v60 = 0;
  }
  if (v60 || v59)
  {
    int v62 = v20 == -1;
    int v63 = v20 != -1;
    int v66 = *(unsigned __int8 *)(a1 + 1368);
    long long v67 = *(_OWORD *)&v78[16];
    *(_OWORD *)(a1 + 1336) = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 1352) = v67;
    if (!v66) {
      *(unsigned char *)(a1 + 1368) = 1;
    }
    if (v58 != 7)
    {
      int v75 = *(unsigned __int8 *)(a1 + 280);
      long long v76 = *(_OWORD *)&v83[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v83;
      *(_OWORD *)(a1 + 264) = v76;
      int v61 = 1;
      if (!v75) {
        *(unsigned char *)(a1 + 280) = 1;
      }
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  int v61 = 0;
  int v62 = 0;
  int v63 = 0;
LABEL_92:
  if (v13)
  {
    int v68 = *(unsigned __int8 *)(a1 + 320);
    long long v69 = *(_OWORD *)&v80[23];
    *(_OWORD *)(a1 + 288) = *(_OWORD *)&v80[7];
    *(_OWORD *)(a1 + 304) = v69;
    if (!v68) {
      *(unsigned char *)(a1 + 320) = 1;
    }
    if (v18)
    {
      int v70 = *(unsigned __int8 *)(a1 + 1328);
      *(unsigned char *)(a1 + 1296) = (_BYTE)a7;
      *(_OWORD *)(a1 + 1312) = *(_OWORD *)&v81[15];
      *(_OWORD *)(a1 + 1297) = *(_OWORD *)v81;
      if (!v70) {
        *(unsigned char *)(a1 + 1328) = 1;
      }
    }
  }
  if (v61)
  {
    uint64_t v71 = 3;
    if (v62 == 1) {
      uint64_t v71 = 1;
    }
    uint64_t v72 = 4;
    if (v63 == 1) {
      uint64_t v72 = 2;
    }
    if (!v62) {
      uint64_t v71 = v72;
    }
    uint64_t v73 = v71 | (v17 << 32);
  }
  else
  {
    uint64_t v73 = v17 << 32;
  }
  int v74 = *(unsigned __int8 *)(a1 + 1424);
  *(void *)(a1 + 1416) = v73;
  if (!v74) {
    *(unsigned char *)(a1 + 1424) = 1;
  }
}

__n128 sub_1CBB3CB5C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[16];
  unsigned int v7 = a2[20];
  if (v6 == -1 && v7 == -1) {
    return result;
  }
  if (v6 != -1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, v6);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(v50, a1, v12);
    uint64_t v13 = *(unsigned int *)(a4 + 8);
    unint64_t v14 = *(void *)a4;
    if (v13 >= *(_DWORD *)(a4 + 12))
    {
      BOOL v38 = v14 + 32 * v13 > (unint64_t)v50;
      if (v14 > (unint64_t)v50 || !v38) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v15 = (_OWORD *)(v14 + 32 * *(unsigned int *)(a4 + 8));
    long long v16 = v51;
    _OWORD *v15 = *(_OWORD *)v50;
    v15[1] = v16;
    ++*(_DWORD *)(a4 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(a1 + 752);
    __n128 result = *(__n128 *)v50;
    long long v18 = v51;
    *(_OWORD *)(a1 + 720) = *(_OWORD *)v50;
    *(_OWORD *)(a1 + 736) = v18;
    if (!v15) {
      *(unsigned char *)(a1 + 752) = 1;
    }
    unsigned int v7 = a2[20];
  }
  if (v7 == -1) {
    return result;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3);
  sub_1CBC2DBFC(v19, *(void *)(a1 + 48), 0, 0, (uint64_t)&v47);
  if (!v49)
  {
    *(_DWORD *)(a1 + 1428) = 2;
    uint64_t v28 = a2[1];
    if (v28 == 1)
    {
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v44, a1, v19);
      uint64_t v39 = a1 + 584;
      *(_OWORD *)int v50 = v44;
      long long v51 = v45;
      char v52 = 1;
      goto LABEL_41;
    }
    v50[0] = &v51;
    HIDWORD(v50[1]) = 4;
    if (v28 >= 5)
    {
      LODWORD(v50[1]) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v29 = &v51;
    if (v28)
    {
      bzero(&v51, 8 * v28);
      unint64_t v29 = (long long *)v50[0];
    }
    LODWORD(v50[1]) = v28;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, v19, v29, v28);
    uint64_t v30 = (char *)v50[0];
    if (!LODWORD(v50[1]))
    {
LABEL_33:
      if (v30 != (char *)&v51) {
        free(v30);
      }
      return result;
    }
    uint64_t v31 = 8 * LODWORD(v50[1]);
    while (1)
    {
      uint64_t v32 = *(void *)v30;
      sub_1CC73C210(*(_DWORD *)(*(void *)v30 + 4), *(void *)(a1 + 48), (uint64_t)&v44);
      if ((_BYTE)v45)
      {
        if (DWORD2(v44) < 0x41)
        {
          uint64_t v36 = -(uint64_t)DWORD2(v44);
          uint64_t v37 = (void)v44 << v36;
          unsigned int v4 = v4 & 0xFFF00000 | 1;
          LODWORD(v44) = v4;
          *((void *)&v44 + 1) = 0;
          *(void *)&long long v45 = v37 >> v36;
          goto LABEL_29;
        }
        if ((void)v44) {
          MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        }
      }
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(v43, a1, v32);
      long long v44 = v43[0];
      long long v45 = v43[1];
LABEL_29:
      char v46 = 1;
      unint64_t v33 = sub_1CBB40070(a1 + 584, (unint64_t)&v44, 1);
      uint64_t v34 = *(void *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
      uint64_t v35 = *(void *)(v33 + 32);
      __n128 result = *(__n128 *)(v33 + 16);
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v33;
      *(__n128 *)(v34 + 16) = result;
      *(void *)(v34 + 32) = v35;
      ++*(_DWORD *)(a1 + 592);
      v30 += 8;
      v31 -= 8;
      if (!v31)
      {
        uint64_t v30 = (char *)v50[0];
        goto LABEL_33;
      }
    }
  }
  int v20 = *(unsigned __int8 *)(a1 + 1288);
  result.n128_u64[0] = v47;
  long long v21 = v48;
  *(_OWORD *)(a1 + 1256) = v47;
  *(_OWORD *)(a1 + 1272) = v21;
  if (!v20) {
    *(unsigned char *)(a1 + 1288) = 1;
  }
  *(_DWORD *)(a1 + 1428) = 1;
  unsigned int v22 = a2[1];
  if (v22)
  {
    unsigned int v23 = v48;
    if (v22 != 1)
    {
      int v24 = 0;
      do
      {
        LODWORD(v50[0]) = 1;
        v50[1] = 0;
        *(void *)&long long v51 = ((15 << v24) & v23) >> v24;
        char v52 = 1;
        unint64_t v25 = sub_1CBB40070(a1 + 584, (unint64_t)v50, 1);
        uint64_t v26 = *(void *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
        uint64_t v27 = *(void *)(v25 + 32);
        __n128 result = *(__n128 *)(v25 + 16);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v25;
        *(__n128 *)(v26 + 16) = result;
        *(void *)(v26 + 32) = v27;
        ++*(_DWORD *)(a1 + 592);
        v24 += 4;
        --v22;
      }
      while (v22);
      return result;
    }
    LODWORD(v50[0]) = 1;
    v50[1] = 0;
    *(void *)&long long v51 = v48;
    char v52 = 1;
    uint64_t v39 = a1 + 584;
LABEL_41:
    unint64_t v40 = sub_1CBB40070(v39, (unint64_t)v50, 1);
    uint64_t v41 = *(void *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
    uint64_t v42 = *(void *)(v40 + 32);
    __n128 result = *(__n128 *)(v40 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v40;
    *(__n128 *)(v41 + 16) = result;
    *(void *)(v41 + 32) = v42;
    ++*(_DWORD *)(a1 + 592);
  }
  return result;
}

void sub_1CBB3D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned int *)(a2 + 48);
  if (v7 == -1)
  {
    if (*(unsigned char *)(a2 + 60))
    {
      int v147 = *(_DWORD *)(a2 + 72);
      uint64_t v157 = 257;
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 16);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 184))(v12);
      v155[0] = a1;
      v155[1] = (uint64_t)&v156;
      uint64_t v156 = v13;
      v162[0] = &v163;
      v162[1] = (void *)0x200000000;
      sub_1CBB41080(v155, 0, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v162);
      int v15 = *(_DWORD *)v162[0];
      int v14 = *((_DWORD *)v162[0] + 1);
      int v154 = v14;
      if (!*(unsigned char *)(a1 + 1248)) {
        *(unsigned char *)(a1 + 1248) = 1;
      }
      *(_DWORD *)(a1 + 1216) = 0;
      *(_DWORD *)(a1 + 1220) = v14;
      *(void *)(a1 + 1224) = 0;
      *(void *)(a1 + 1240) = 0;
      *(void *)(a1 + 1232) = 0;
      uint64_t v16 = *(void *)(a1 + 64);
      *(void *)&long long v164 = 257;
      DWORD2(v164) = 0;
      uint64_t v17 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)v16 + 32))(v16, 3356, &v164, 1, 0, 0, 0);
      uint64_t v19 = v18;
      LODWORD(v168) = 1;
      *((void *)&v168 + 1) = 0;
      *(void *)&long long v169 = 0;
      llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v168);
      *((void *)&v168 + 1) = 0;
      long long v169 = 0uLL;
      LODWORD(v168) = 0;
      DWORD1(v168) = v15;
      llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v168);
      LODWORD(v168) = 1;
      *((void *)&v168 + 1) = 0;
      *(void *)&long long v169 = 0;
      llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v168);
      *(void *)(*(void *)(*(void *)(a1 + 48) + 24)
                + 16 * (*(_DWORD *)(*((void *)v19 + 4) + 4) & 0x7FFFFFFF)) = &off_1E66AF580;
      sub_1CC73B5D0(v19, *(void *)(a1 + 40), *(void **)(a1 + 56));
      uint64_t v20 = *(void *)(a1 + 64);
      *(void *)&long long v164 = 257;
      DWORD2(v164) = 0;
      *(void *)&long long v168 = v17;
      *((void *)&v168 + 1) = v19;
      LODWORD(v169) = 1;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v20 + 32))(v20, 19, &v164, 1, &v168, 1, 0);
      uint64_t v22 = *(void *)(a1 + 64);
      *(void *)&long long v164 = 257;
      DWORD2(v164) = 0;
      *(void *)&long long v168 = v21;
      *((void *)&v168 + 1) = v23;
      uint64_t v139 = v23;
      LODWORD(v169) = 1;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v22 + 32))(v22, 184, &v164, 1, &v168, 1, 0);
      uint64_t v25 = v24;
      v160[0] = &v161;
      v160[1] = (void *)0x200000000;
      sub_1CBB41080(v155, 1u, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v160);
      v158[0] = &v159;
      v158[1] = (void *)0x200000000;
      sub_1CBB41080(v155, 2u, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v158);
      uint64_t v26 = *(void *)(a1 + 64);
      uint64_t v27 = v157;
      *(void *)&long long v168 = v157;
      DWORD2(v168) = 0;
      sub_1CC7374CC(v26, (unint64_t *)&v168, 0.5);
      int v28 = *(_DWORD *)v160[0];
      uint64_t v29 = *(void *)(a1 + 64);
      uint64_t v149 = v30;
      uint64_t v150 = v27;
      *(void *)&long long v164 = v27;
      DWORD2(v164) = 0;
      LODWORD(v168) = v28;
      LODWORD(v169) = 0;
      uint64_t v145 = v25;
      DWORD2(v169) = *(_DWORD *)(*(void *)(v25 + 32) + 4);
      int v171 = 0;
      int v172 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
      int v173 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v29 + 32))(v29, 166, &v164, 1, &v168, 3, 0);
      uint64_t v141 = *(void **)(a1 + 64);
      uint64_t v143 = v31;
      uint64_t v32 = *(void *)(a1 + 48);
      unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v32, "", 0);
      unint64_t v34 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(v32 + 24) + 16 * v34) = 4;
      unint64_t v35 = *(unsigned int *)(v32 + 432);
      if (v34 >= v35)
      {
        uint64_t v36 = *(void *)(v32 + 440);
        uint64_t v37 = v34 + 1 - v35;
        if (v34 >= *(unsigned int *)(v32 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v38 = *(_DWORD *)(v32 + 432);
        if (v37)
        {
          uint64_t v39 = (void *)(*(void *)(v32 + 424) + 8 * *(unsigned int *)(v32 + 432));
          uint64_t v40 = ~v34 + v35;
          do
          {
            *v39++ = v36;
            BOOL v41 = __CFADD__(v40++, 1);
          }
          while (!v41);
          int v38 = *(_DWORD *)(v32 + 432);
        }
        *(_DWORD *)(v32 + 432) = v38 + v37;
      }
      *(void *)(*(void *)(v32 + 424) + 8 * v34) = v150;
      uint64_t v42 = *(void *)(v32 + 8);
      if (v42) {
        (*(void (**)(uint64_t, void))(*(void *)v42 + 24))(v42, IncompleteVirtualRegister);
      }
      LODWORD(v164) = IncompleteVirtualRegister;
      uint64_t v43 = sub_1CC7390C0(v141, 2131, (int *)&v164, 1, 0);
      long long v45 = v44;
      int v46 = *(_DWORD *)(*(void *)(v143 + 32) + 4);
      *((void *)&v168 + 1) = 0;
      long long v169 = 0uLL;
      LODWORD(v168) = 0;
      DWORD1(v168) = v46;
      llvm::MachineInstr::addOperand(v44, v43, (const llvm::MachineOperand *)&v168);
      int v144 = *(_DWORD *)(*((void *)v45 + 4) + 4);
      int v47 = *(_DWORD *)v158[0];
      uint64_t v48 = *(void *)(a1 + 64);
      *(void *)&long long v164 = v150;
      DWORD2(v164) = 0;
      LODWORD(v168) = v47;
      LODWORD(v169) = 0;
      DWORD2(v169) = *(_DWORD *)(*(void *)(v145 + 32) + 4);
      int v171 = 0;
      int v172 = *(_DWORD *)(*(void *)(v149 + 32) + 4);
      int v173 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, long long *, uint64_t, void))(*(void *)v48 + 32))(v48, 166, &v164, 1, &v168, 3, 0);
      uint64_t v146 = v49;
      uint64_t v142 = *(void **)(a1 + 64);
      uint64_t v50 = *(void *)(a1 + 48);
      unsigned int v51 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v50, "", 0);
      unint64_t v52 = v51 & 0x7FFFFFFF;
      *(void *)(*(void *)(v50 + 24) + 16 * v52) = 4;
      unint64_t v53 = *(unsigned int *)(v50 + 432);
      if (v52 >= v53)
      {
        uint64_t v54 = *(void *)(v50 + 440);
        uint64_t v55 = v52 + 1 - v53;
        if (v52 >= *(unsigned int *)(v50 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v56 = *(_DWORD *)(v50 + 432);
        if (v55)
        {
          int v57 = (void *)(*(void *)(v50 + 424) + 8 * *(unsigned int *)(v50 + 432));
          uint64_t v58 = ~v52 + v53;
          do
          {
            *v57++ = v54;
            BOOL v41 = __CFADD__(v58++, 1);
          }
          while (!v41);
          int v56 = *(_DWORD *)(v50 + 432);
        }
        *(_DWORD *)(v50 + 432) = v56 + v55;
      }
      *(void *)(*(void *)(v50 + 424) + 8 * v52) = v150;
      uint64_t v59 = *(void *)(v50 + 8);
      if (v59) {
        (*(void (**)(uint64_t, void))(*(void *)v59 + 24))(v59, v51);
      }
      LODWORD(v164) = v51;
      BOOL v60 = sub_1CC7390C0(v142, 2131, (int *)&v164, 1, 0);
      int v62 = v61;
      int v63 = *(_DWORD *)(*(void *)(v146 + 32) + 4);
      *((void *)&v168 + 1) = 0;
      long long v169 = 0uLL;
      LODWORD(v168) = 0;
      DWORD1(v168) = v63;
      llvm::MachineInstr::addOperand(v61, v60, (const llvm::MachineOperand *)&v168);
      int v64 = *(_DWORD *)(*((void *)v62 + 4) + 4);
      *(_DWORD *)(a4 + 8) = 0;
      if (!*(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v65 = *(const llvm::MachineOperand **)a4;
      *(_DWORD *)long long v65 = 0;
      *((_DWORD *)v65 + 1) = v144;
      *((void *)v65 + 2) = 0;
      *((void *)v65 + 3) = 0;
      *((void *)v65 + 1) = 0;
      unsigned int v66 = *(_DWORD *)(a4 + 12);
      uint64_t v67 = (*(_DWORD *)(a4 + 8) + 1);
      *(_DWORD *)(a4 + 8) = v67;
      *((void *)&v168 + 1) = 0;
      long long v169 = 0uLL;
      LODWORD(v168) = 0;
      DWORD1(v168) = v64;
      int v68 = *(const llvm::MachineOperand **)a4;
      if (v67 >= v66)
      {
        BOOL v138 = (char *)v68 + 32 * v67 > (char *)&v168;
        if (v68 > (const llvm::MachineOperand *)&v168 || !v138) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      long long v69 = (long long *)((char *)v68 + 32 * *(unsigned int *)(a4 + 8));
      long long v70 = v169;
      *long long v69 = v168;
      v69[1] = v70;
      ++*(_DWORD *)(a4 + 8);
      if (v147 != -1)
      {
        int v74 = *(_DWORD *)(*(void *)a5 + 4);
        int v75 = *(_DWORD *)(*(void *)a5 + 36);
        int v76 = *(_DWORD *)(*(void *)a5 + 68);
        int v77 = *(_DWORD *)(*(void *)a5 + 100);
        int v78 = *(_DWORD *)(*(void *)a5 + 132);
        int v79 = *(_DWORD *)(*(void *)a5 + 164);
        long long v168 = xmmword_1CDB18BA8;
        LODWORD(v169) = 0;
        unsigned int v153 = sub_1CBE0418C(88, 5, &v168);
        uint64_t v80 = *(void *)(a1 + 64);
        *(void *)&long long v168 = v150;
        DWORD2(v168) = 0;
        sub_1CC7374CC(v80, (unint64_t *)&v168, 1.0);
        int v82 = *(_DWORD *)(*(void *)(v81 + 32) + 4);
        *(void *)&long long v164 = a1;
        *((void *)&v164 + 1) = &v153;
        *(void *)&long long v165 = &v157;
        *((void *)&v165 + 1) = &v156;
        v152[0] = a1;
        v152[1] = (uint64_t)&v157;
        v152[2] = (uint64_t)&v154;
        int v83 = sub_1CD4232C0((uint64_t *)&v164, v154, 6u, v76, v74);
        int v148 = sub_1CD4232C0((uint64_t *)&v164, v154, 2u, v74, v78);
        int v84 = sub_1CD4232C0((uint64_t *)&v164, v154, 6u, v77, v75);
        int v151 = sub_1CD4232C0((uint64_t *)&v164, v154, 2u, v75, v79);
        int v85 = *(_DWORD *)(*(void *)(v139 + 32) + 4);
        int v86 = *(_DWORD *)(*(void *)(v149 + 32) + 4);
        uint64_t v87 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v85;
        LODWORD(v169) = 0;
        DWORD2(v169) = v86;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v87 + 32))(v87, 165, &v166, 1, &v168, 2, 0);
        int v89 = *(_DWORD *)(*(void *)(v88 + 32) + 4);
        uint64_t v90 = sub_1CD4234B0(v152, v153, 0);
        long long v92 = v91;
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v82;
        llvm::MachineInstr::addOperand(v91, v90, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 2;
        llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v168);
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v82;
        llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 0;
        llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v168);
        sub_1CC73B5D0(v92, *(void *)(a1 + 40), *(void **)(a1 + 56));
        int v93 = *(_DWORD *)(*((void *)v92 + 4) + 4);
        unint64_t v94 = sub_1CD4234B0(v152, v153, 5u);
        uint64_t v96 = v95;
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v93;
        llvm::MachineInstr::addOperand(v95, v94, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 2;
        llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v168);
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v93;
        llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 0;
        llvm::MachineInstr::addOperand(v96, v94, (const llvm::MachineOperand *)&v168);
        sub_1CC73B5D0(v96, *(void *)(a1 + 40), *(void **)(a1 + 56));
        int v97 = *(_DWORD *)(*((void *)v96 + 4) + 4);
        uint64_t v98 = sub_1CD4234B0(v152, v153, 2u);
        uint64_t v100 = v99;
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v82;
        llvm::MachineInstr::addOperand(v99, v98, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 0;
        llvm::MachineInstr::addOperand(v100, v98, (const llvm::MachineOperand *)&v168);
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        LODWORD(v168) = 0;
        DWORD1(v168) = v82;
        llvm::MachineInstr::addOperand(v100, v98, (const llvm::MachineOperand *)&v168);
        LODWORD(v168) = 1;
        *((void *)&v168 + 1) = 0;
        *(void *)&long long v169 = 2;
        llvm::MachineInstr::addOperand(v100, v98, (const llvm::MachineOperand *)&v168);
        sub_1CC73B5D0(v100, *(void *)(a1 + 40), *(void **)(a1 + 56));
        int v101 = *(_DWORD *)(*((void *)v100 + 4) + 4);
        uint64_t v102 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v83;
        LODWORD(v169) = 0;
        DWORD2(v169) = v89;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v102
                                                                                                  + 32))(v102, 165, &v166, 1, &v168, 2, 0);
        LODWORD(v98) = *(_DWORD *)(*(void *)(v103 + 32) + 4);
        uint64_t v104 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v84;
        LODWORD(v169) = 0;
        DWORD2(v169) = v89;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v104
                                                                                                  + 32))(v104, 165, &v166, 1, &v168, 2, 0);
        LODWORD(v100) = *(_DWORD *)(*(void *)(v105 + 32) + 4);
        uint64_t v106 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v148;
        LODWORD(v169) = 0;
        DWORD2(v169) = v89;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v106
                                                                                                  + 32))(v106, 165, &v166, 1, &v168, 2, 0);
        int v108 = *(_DWORD *)(*(void *)(v107 + 32) + 4);
        uint64_t v109 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v151;
        LODWORD(v169) = 0;
        DWORD2(v169) = v89;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v109
                                                                                                  + 32))(v109, 165, &v166, 1, &v168, 2, 0);
        int v111 = *(_DWORD *)(*(void *)(v110 + 32) + 4);
        uint64_t v112 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v98;
        LODWORD(v169) = 0;
        DWORD2(v169) = v97;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v112
                                                                                                  + 32))(v112, 165, &v166, 1, &v168, 2, 0);
        int v114 = *(_DWORD *)(*(void *)(v113 + 32) + 4);
        uint64_t v115 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v100;
        LODWORD(v169) = 0;
        DWORD2(v169) = v101;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v115
                                                                                                  + 32))(v115, 165, &v166, 1, &v168, 2, 0);
        LODWORD(v100) = *(_DWORD *)(*(void *)(v116 + 32) + 4);
        uint64_t v117 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v108;
        LODWORD(v169) = 0;
        DWORD2(v169) = v97;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v117
                                                                                                  + 32))(v117, 165, &v166, 1, &v168, 2, 0);
        LODWORD(v98) = *(_DWORD *)(*(void *)(v118 + 32) + 4);
        uint64_t v119 = *(void *)(a1 + 64);
        uint64_t v166 = v157;
        int v167 = 0;
        LODWORD(v168) = v111;
        LODWORD(v169) = 0;
        DWORD2(v169) = v101;
        int v171 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)v119
                                                                                                  + 32))(v119, 165, &v166, 1, &v168, 2, 0);
        int v121 = *(_DWORD *)(*(void *)(v120 + 32) + 4);
        LODWORD(v168) = 0;
        DWORD1(v168) = v114;
        long long v169 = 0uLL;
        *((void *)&v168 + 1) = 0;
        char v170 = 1;
        unint64_t v122 = sub_1CBB40070(a1 + 328, (unint64_t)&v168, 1);
        uint64_t v123 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v124 = *(void *)(v122 + 32);
        long long v125 = *(_OWORD *)(v122 + 16);
        *(_OWORD *)uint64_t v123 = *(_OWORD *)v122;
        *(_OWORD *)(v123 + 16) = v125;
        *(void *)(v123 + 32) = v124;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v168) = 0;
        DWORD1(v168) = v100;
        long long v169 = 0uLL;
        *((void *)&v168 + 1) = 0;
        char v170 = 1;
        unint64_t v126 = sub_1CBB40070(a1 + 328, (unint64_t)&v168, 1);
        uint64_t v127 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v128 = *(void *)(v126 + 32);
        long long v129 = *(_OWORD *)(v126 + 16);
        *(_OWORD *)uint64_t v127 = *(_OWORD *)v126;
        *(_OWORD *)(v127 + 16) = v129;
        *(void *)(v127 + 32) = v128;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v168) = 0;
        DWORD1(v168) = v98;
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        char v170 = 1;
        unint64_t v130 = sub_1CBB40070(a1 + 328, (unint64_t)&v168, 1);
        uint64_t v131 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v132 = *(void *)(v130 + 32);
        long long v133 = *(_OWORD *)(v130 + 16);
        *(_OWORD *)uint64_t v131 = *(_OWORD *)v130;
        *(_OWORD *)(v131 + 16) = v133;
        *(void *)(v131 + 32) = v132;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v168) = 0;
        DWORD1(v168) = v121;
        *((void *)&v168 + 1) = 0;
        long long v169 = 0uLL;
        char v170 = 1;
        unint64_t v134 = sub_1CBB40070(a1 + 328, (unint64_t)&v168, 1);
        uint64_t v135 = *(void *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        uint64_t v136 = *(void *)(v134 + 32);
        long long v137 = *(_OWORD *)(v134 + 16);
        *(_OWORD *)uint64_t v135 = *(_OWORD *)v134;
        *(_OWORD *)(v135 + 16) = v137;
        *(void *)(v135 + 32) = v136;
        ++*(_DWORD *)(a1 + 336);
      }
      if (v158[0] != &v159) {
        free(v158[0]);
      }
      if (v160[0] != &v161) {
        free(v160[0]);
      }
      if (v162[0] != &v163) {
        free(v162[0]);
      }
    }
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a3, v7);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a1 + 48);
    if (*(_DWORD *)(a2 + 92) == -1) {
      sub_1CBC2DBFC(v8, v10, 0, 0, (uint64_t)&v168);
    }
    else {
      sub_1CBC2E5E8(v8, v10, (uint64_t)&v168);
    }
    if (v170)
    {
      int v71 = *(unsigned __int8 *)(a1 + 1248);
      long long v72 = v168;
      long long v73 = v169;
    }
    else
    {
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 168))(&v164, a1, v9);
      int v71 = *(unsigned __int8 *)(a1 + 1248);
      long long v72 = v164;
      long long v73 = v165;
    }
    *(_OWORD *)(a1 + 1216) = v72;
    *(_OWORD *)(a1 + 1232) = v73;
    if (!v71) {
      *(unsigned char *)(a1 + 1248) = 1;
    }
  }
}

uint64_t sub_1CBB3E0F0(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = result;
  if ((a3 & 0x80000000) == 0) {
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (v6 && ((*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3) & 1) != 0)) {
    uint64_t VRegDef = *(void *)(v6 + 8);
  }
  else {
    uint64_t VRegDef = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(VRegDef + 24) + 32);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 184))(*(void *)(v8 + 16));
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 176))(*(void *)(v8 + 16));
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(*(void *)(VRegDef + 32) + 4);
  if (v12 - 1 <= 0x3FFFFFFE) {
    __n128 result = *(unsigned int *)(*(void *)(v10 + 264)
  }
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v9, v12, v10) + 24)
                              + *(_DWORD *)(v11 + 272)
                              * ((*(void *)(v11 + 248) - *(void *)(v11 + 240)) >> 3)));
  else {
    __n128 result = llvm::TargetRegisterInfo::getRegSizeInBits(v10, v12, a2);
  }
  int v13 = **(unsigned __int16 **)(VRegDef + 16);
  if (v13 == 19)
  {
    while (1)
    {
      uint64_t v24 = *(void *)(VRegDef + 32);
      if ((*(_DWORD *)(v24 + 32) & 0xFFF00) != 0) {
        goto LABEL_30;
      }
      unsigned int v3 = *(_DWORD *)(v24 + 36);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_30;
      }
      uint64_t v25 = result;
      uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(v24 + 36));
      int v13 = **(unsigned __int16 **)(VRegDef + 16);
      __n128 result = v25;
      if (v13 != 19) {
        goto LABEL_9;
      }
    }
  }
  if ((unint64_t)v3 >> 31) {
LABEL_9:
  }
    int v14 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  else {
    int v14 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v15 = *v14;
  if (!v15
    || (*(unsigned char *)(v15 + 3) & 1) == 0 && ((uint64_t v15 = *(void *)(v15 + 24)) == 0 || (*(unsigned char *)(v15 + 3) & 1) == 0)
    || (uint64_t v16 = *(void *)(v15 + 8)) == 0
    || **(_WORD **)(v16 + 16) != 313
    || (uint64_t v17 = *(void *)(v16 + 32), *(unsigned char *)(v17 + 32) != 1))
  {
    if (v13 == 119 && result == 16)
    {
      __n128 result = sub_1CBB3E410(a2, *(_DWORD *)(*(void *)(VRegDef + 32) + 36));
      if (v26)
      {
        if (result >= 0) {
          uint64_t v27 = result;
        }
        else {
          uint64_t v27 = result + 1;
        }
        unint64_t v28 = v27 >> 1;
        unint64_t v29 = HIDWORD(v28);
        int v30 = 263;
        goto LABEL_43;
      }
    }
    else if (v13 == 76 && result == 64)
    {
      uint64_t v31 = *(void *)(VRegDef + 32);
      __n128 result = sub_1CBB3E410(a2, *(_DWORD *)(v31 + 36));
      if (v32)
      {
        uint64_t v33 = result;
        __n128 result = sub_1CBB3E410(a2, *(_DWORD *)(v31 + 68));
        if (v34)
        {
          if ((v33 & 7) == 0 && v33 + 4 == result)
          {
            if (v33 >= 0) {
              uint64_t v35 = v33;
            }
            else {
              uint64_t v35 = v33 + 1;
            }
            unint64_t v28 = v35 >> 1;
            unint64_t v29 = HIDWORD(v28);
            int v30 = 775;
LABEL_43:
            *(_DWORD *)uint64_t v4 = v30;
            *(_DWORD *)(v4 + 4) = v28;
            *(void *)(v4 + 8) = 0;
            *(_DWORD *)(v4 + 16) = 64;
            *(_DWORD *)(v4 + 24) = v29;
            char v22 = 1;
            goto LABEL_31;
          }
        }
      }
    }
LABEL_30:
    char v22 = 0;
    *(unsigned char *)uint64_t v4 = 0;
    goto LABEL_31;
  }
  unint64_t v18 = *(void *)(v17 + 48) / 2;
  uint64_t v19 = ((result + 7) >> 3) - 2;
  if (v19 > 6) {
    int v20 = 7;
  }
  else {
    int v20 = dword_1CDB18C3C[v19];
  }
  unint64_t v21 = HIDWORD(v18);
  *(_DWORD *)uint64_t v4 = v20;
  *(_DWORD *)(v4 + 4) = v18;
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 64;
  char v22 = 1;
  *(_DWORD *)(v4 + 24) = v21;
LABEL_31:
  *(unsigned char *)(v4 + 32) = v22;
  return result;
}

unint64_t sub_1CBB3E410(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    BOOL v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    goto LABEL_12;
  }
  if ((*(unsigned char *)(v3 + 3) & 1) == 0)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3) {
      goto LABEL_12;
    }
    if ((*(unsigned char *)(v3 + 3) & 1) == 0)
    {
LABEL_11:
      uint64_t v3 = 0;
      goto LABEL_12;
    }
  }
  uint64_t v3 = *(void *)(v3 + 8);
  if (!v3)
  {
LABEL_12:
    unint64_t v5 = 0;
    return v5 | v3;
  }
  if (**(_WORD **)(v3 + 16) != 313) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v3 + 32);
  if (*(unsigned char *)(v4 + 32) != 1) {
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v4 + 48);
  unint64_t v5 = v3 & 0xFFFFFFFFFFFFFF00;
  uint64_t v3 = v3;
  return v5 | v3;
}

void sub_1CBB3E4A8(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::IntegerType *****a4)
{
  int v181 = 0;
  int v183 = 0;
  unsigned int v185 = 0;
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  uint64_t v204 = v206;
  uint64_t v205 = 0x800000000;
  uint64_t v184 = a4[1][2];
  while (1)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    unint64_t v8 = v6;
    if (v7 >= 2)
    {
      unint64_t v9 = v6 + 96;
      uint64_t v10 = 96 * v7 - 96;
      unint64_t v8 = *(void *)(a2 + 8);
      do
      {
        if (*(_DWORD *)(v8 + 4) < *(_DWORD *)(v9 + 4)) {
          unint64_t v8 = v9;
        }
        v9 += 96;
        v10 -= 96;
      }
      while (v10);
    }
    unint64_t v11 = v6 + 96 * v7;
    unsigned int v12 = v8 == v11 ? 0 : *(_DWORD *)(v8 + 4) + 1;
    unsigned int v13 = v185;
    if (v185 >= v12) {
      break;
    }
    uint64_t v200 = v202;
    uint64_t v201 = 0x800000000;
    if (!v7) {
      goto LABEL_37;
    }
    unsigned int v14 = 0;
    uint64_t v15 = 96 * v7;
    unint64_t v16 = v6;
    do
    {
      if (*(_DWORD *)(v6 + 4) == v13)
      {
        if (v14 >= HIDWORD(v201))
        {
          char v22 = (char *)v200 + 96 * v14;
          if ((unint64_t)v200 > v6 || (unint64_t)v22 <= v6) {
            sub_1CD423078();
          }
          sub_1CD423078();
        }
        uint64_t v17 = (char *)v200 + 96 * v201;
        long long v18 = *(_OWORD *)v6;
        *((void *)v17 + 2) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v17 = v18;
        uint64_t v19 = v17 + 40;
        *((void *)v17 + 4) = 0x200000000;
        *((void *)v17 + 3) = v17 + 40;
        int v20 = v17 + 24;
        unsigned int v21 = *(_DWORD *)(v6 + 32);
        if (v21 && v20 != (char *)(v6 + 24))
        {
          if (v21 >= 3)
          {
            *((_DWORD *)v20 + 2) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v19, *(const void **)(v6 + 24), 28 * *(unsigned int *)(v6 + 32));
          *((_DWORD *)v20 + 2) = v21;
          unsigned int v13 = v185;
        }
        unsigned int v14 = v201 + 1;
        LODWORD(v201) = v201 + 1;
      }
      v6 += 96;
      v16 += 96;
      v15 -= 96;
    }
    while (v15);
    if (!v14)
    {
LABEL_37:
      if (!v183)
      {
        uint64_t v214 = (void *)257;
        LODWORD(v215) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*a4)[4])(a4, 68, &v214, 1, 0, 0, 0);
        int v181 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
      }
      unint64_t v31 = v205;
      unint64_t v32 = HIDWORD(v205);
      int v183 = 1;
      LODWORD(MachineInstr) = v181;
      goto LABEL_221;
    }
    uint64_t v186 = v14;
    unint64_t MachineInstr = (llvm::MachineInstr *)(96 * v14);
    uint64_t v25 = MachineInstr;
    char v26 = v200;
    do
    {
      if ((*v26 - 1) <= 1)
      {
        uint64_t v33 = 0;
        char v34 = 0;
        while (1)
        {
          uint64_t v35 = (int *)((char *)v200 + 96 * v33);
          if (*v35) {
            break;
          }
          *(void *)&long long v207 = 257;
          DWORD2(v207) = 0;
          sub_1CBE53460(a3, *((_DWORD *)v200 + 24 * v33 + 5), (uint64_t)&v214);
          LODWORD(v210) = HIDWORD(v214);
          LODWORD(v212[0]) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 118, &v207, 1, &v210, 1, 0);
          LODWORD(MachineInstr) = *(_DWORD *)(*(void *)(v53 + 32) + 4);
LABEL_131:
          ++v33;
          char v34 = 1;
          if (v33 == v186) {
            goto LABEL_220;
          }
        }
        uint64_t v36 = (char *)v200 + 96 * v33;
        LODWORD(v187) = 0;
        HIDWORD(v187) = MachineInstr;
        uint64_t v189 = 0;
        uint64_t v190 = 0;
        uint64_t v188 = 0;
        char v191 = v34;
        v192[0] = *(_DWORD *)v193;
        *(_DWORD *)((char *)v192 + 3) = *(_DWORD *)&v193[3];
        int v37 = *v35;
        int v197 = 1;
        uint64_t v198 = 0;
        uint64_t v199 = 0;
        LOBYTE(v214) = 0;
        char v217 = 0;
        LOBYTE(v210) = 0;
        char v213 = 0;
        uint64_t v40 = *((void *)v36 + 3);
        uint64_t v39 = v36 + 24;
        uint64_t v38 = v40;
        v196[0] = &v214;
        v196[1] = &v210;
        uint64_t v41 = *((unsigned int *)v39 + 2);
        if (v41)
        {
          uint64_t v42 = 28 * v41;
          uint64_t v43 = (unsigned char *)(v38 + 24);
          do
          {
            if (*v43)
            {
              sub_1CBE53460(a3, *((_DWORD *)v43 - 1), (uint64_t)&v207);
            }
            else
            {
              LOBYTE(v207) = 0;
              LOBYTE(v209) = 0;
            }
            uint64_t v44 = v196[*((unsigned int *)v43 - 5)];
            uint64_t v45 = v209;
            long long v46 = v208;
            *(_OWORD *)uint64_t v44 = v207;
            *(_OWORD *)(v44 + 16) = v46;
            *(void *)(v44 + 32) = v45;
            v43 += 28;
            v42 -= 28;
          }
          while (v42);
          uint64_t v47 = (uint64_t)a4[1][5];
          if (v217)
          {
            if (!(_BYTE)v214)
            {
              sub_1CC73C210(HIDWORD(v214), v47, (uint64_t)&v207);
              if ((_BYTE)v208)
              {
                if (DWORD2(v207) >= 0x41)
                {
                  if ((void)v207) {
                    MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
                  }
                }
                else if ((uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207) <= 255)
                {
                  LODWORD(v214) = 1;
                  uint64_t v215 = 0;
                  v216[0] = (uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207);
                  if (!v217) {
                    char v217 = 1;
                  }
                }
              }
            }
            if (v214 == 1)
            {
              unint64_t v48 = v216[0];
              if (v216[0] >= 256)
              {
                *(void *)&long long v207 = 129;
                DWORD2(v207) = 0;
                uint64_t v49 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
                uint64_t v50 = llvm::ConstantInt::get(v49, v48, (const llvm::APInt *)1);
                ((void (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v207, v50);
                int v52 = *(_DWORD *)(*(void *)(v51 + 32) + 4);
                if (!v217) {
                  char v217 = 1;
                }
                LODWORD(v214) = 0;
                HIDWORD(v214) = v52;
                v216[0] = 0;
                v216[1] = 0;
                uint64_t v215 = 0;
              }
            }
          }
        }
        else
        {
          uint64_t v47 = (uint64_t)a4[1][5];
        }
        if (v213)
        {
          if (!(_BYTE)v210)
          {
            sub_1CC73C210(HIDWORD(v210), v47, (uint64_t)&v207);
            if ((_BYTE)v208)
            {
              if (DWORD2(v207) >= 0x41)
              {
                if ((void)v207) {
                  MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
                }
              }
              else if ((uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207) <= 255)
              {
                LODWORD(v210) = 1;
                uint64_t v211 = 0;
                v212[0] = (uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207);
                if (!v213) {
                  char v213 = 1;
                }
              }
            }
          }
          if (v210 == 1)
          {
            unint64_t v54 = v212[0];
            if (v212[0] >= 256)
            {
              *(void *)&long long v207 = 129;
              DWORD2(v207) = 0;
              uint64_t v55 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
              int v56 = llvm::ConstantInt::get(v55, v54, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v207, v56);
              int v58 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
              if (!v213) {
                char v213 = 1;
              }
              LODWORD(v210) = 0;
              HIDWORD(v210) = v58;
              v212[0] = 0;
              v212[1] = 0;
              uint64_t v211 = 0;
            }
          }
        }
        if (v191)
        {
          if (!(_BYTE)v187)
          {
            sub_1CC73C210(HIDWORD(v187), v47, (uint64_t)&v207);
            if ((_BYTE)v208)
            {
              if (DWORD2(v207) >= 0x41)
              {
                if ((void)v207) {
                  MEMORY[0x1D25D9CB0](v207, 0x1000C8000313F17);
                }
              }
              else if ((uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207) <= 255)
              {
                LODWORD(v187) = 1;
                uint64_t v188 = 0;
                uint64_t v189 = (uint64_t)((void)v207 << -(uint64_t)DWORD2(v207)) >> -(uint64_t)DWORD2(v207);
                if (!v191) {
                  char v191 = 1;
                }
              }
            }
          }
          if (v187 == 1)
          {
            unint64_t v59 = v189;
            if (v189 >= 256)
            {
              *(void *)&long long v207 = 129;
              DWORD2(v207) = 0;
              BOOL v60 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
              int v61 = llvm::ConstantInt::get(v60, v59, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v207, v61);
              int v63 = *(_DWORD *)(*(void *)(v62 + 32) + 4);
              if (!v191) {
                char v191 = 1;
              }
              LODWORD(v187) = 0;
              HIDWORD(v187) = v63;
              uint64_t v189 = 0;
              uint64_t v190 = 0;
              uint64_t v188 = 0;
            }
          }
        }
        switch(v37)
        {
          case 1:
            uint64_t v64 = 120;
            break;
          case 2:
            uint64_t v64 = 119;
            break;
          case 0:
            llvm::report_fatal_error((llvm *)"Expected a pack kind", (const llvm::Twine *)1);
          default:
            uint64_t v64 = 0;
            break;
        }
        if (v210 == 1 || v213 == 0) {
          int v66 = 1;
        }
        else {
          int v66 = 2;
        }
        if (v214 == 1 || v217 == 0) {
          int v68 = 1;
        }
        else {
          int v68 = 2;
        }
        LODWORD(v207) = 0;
        *(void *)((char *)&v207 + 4) = __PAIR64__(v66, v68);
        HIDWORD(v207) = v191 == 0;
        unsigned int v69 = sub_1CBE0418C(v64, 4, &v207);
        uint64_t v70 = (uint64_t)a4[3];
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v70, "", 0);
        *(void *)(*(void *)(v70 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66ABDD8;
        uint64_t v72 = *(void *)(v70 + 8);
        if (v72) {
          (*(void (**)(uint64_t))(*(void *)v72 + 24))(v72);
        }
        *(void *)&long long v207 = &unk_1F25FDD00;
        *((void *)&v207 + 1) = v184;
        *((void *)&v208 + 1) = &v207;
        int v73 = sub_1CBD854F8((uint64_t)&v207);
        if (*((long long **)&v208 + 1) == &v207)
        {
          (*(void (**)(long long *))(v207 + 32))(&v207);
        }
        else if (*((void *)&v208 + 1))
        {
          (*(void (**)(void))(**((void **)&v208 + 1) + 40))();
        }
        unint64_t v74 = sub_1CBE59368((uint64_t *)v39, v73);
        unint64_t v76 = v75;
        int v77 = (llvm::MachineFunction *)a4[1];
        int v78 = a4[2][1];
        int v79 = (unsigned __int8 *)a4[4];
        uint64_t v194 = (uint64_t)v79;
        if (v79) {
          llvm::MetadataTracking::track((uint64_t)&v194, v79, 2);
        }
        unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v77, (uint64_t)&v78[6 * v69], (unsigned __int8 **)&v194, 0);
        if (v194)
        {
          int v100 = *(unsigned __int8 *)v194;
          if ((v100 - 4) > 0x1E)
          {
            if ((v100 - 3) >= 0xFFFFFFFE) {
              uint64_t v103 = v194;
            }
            else {
              uint64_t v103 = 0;
            }
            if ((v100 - 3) < 0xFFFFFFFE)
            {
              if (v100 == 3) {
                *(void *)(v194 + 8) = 0;
              }
              goto LABEL_111;
            }
            unint64_t v102 = v103 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v194 + 1) & 0x7F) != 2 && !*(_DWORD *)(v194 + 12)) {
              goto LABEL_111;
            }
            uint64_t v101 = *(void *)(v194 + 16);
            if ((v101 & 4) == 0) {
              goto LABEL_111;
            }
            unint64_t v102 = v101 & 0xFFFFFFFFFFFFFFF8;
            if (!v102) {
              goto LABEL_111;
            }
          }
          *(void *)&long long v207 = &v194;
          sub_1CC5FA668(v102 + 16, &v207);
        }
LABEL_111:
        uint64_t v80 = (unint64_t *)a4[6];
        uint64_t v81 = a4[5][5];
        *((void *)MachineInstr + 3) = v81;
        int v82 = v81[4];
        uint64_t v83 = *((unsigned int *)MachineInstr + 10);
        if (v83)
        {
          uint64_t v93 = *((void *)MachineInstr + 4);
          unint64_t v94 = v82[5];
          uint64_t v95 = 32 * v83;
          do
          {
            if (!*(unsigned char *)v93)
            {
              uint64_t v96 = *(unsigned int *)(v93 + 4);
              if ((int)v96 >= 0) {
                int v97 = (uint64_t *)(*((void *)v94 + 34) + 8 * v96);
              }
              else {
                int v97 = (uint64_t *)(*((void *)v94 + 3) + 16 * (v96 & 0x7FFFFFFF) + 8);
              }
              uint64_t v98 = *v97;
              if (*v97)
              {
                uint64_t v99 = *(void *)(v98 + 16);
                *(void *)(v98 + 16) = v93;
                *(void *)(v93 + 16) = v99;
                if (*(unsigned char *)(v93 + 3))
                {
                  *(void *)(v93 + 24) = v98;
                }
                else
                {
                  *(void *)(v93 + 24) = 0;
                  int v97 = (uint64_t *)(v99 + 24);
                }
              }
              else
              {
                *(void *)(v93 + 16) = v93;
                *(void *)(v93 + 24) = 0;
              }
              *int v97 = v93;
            }
            v93 += 32;
            v95 -= 32;
          }
          while (v95);
        }
        int v84 = v82[91];
        if (v84) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v84 + 24))(v84, MachineInstr);
        }
        unint64_t v85 = *v80 & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t MachineInstr = v85 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v80;
        *(void *)(v85 + 8) = MachineInstr;
        unint64_t *v80 = *v80 & 7 | (unint64_t)MachineInstr;
        int v86 = a4[7];
        if (v86) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v86)[3])(v86, MachineInstr);
        }
        *((void *)&v207 + 1) = 0;
        long long v208 = 0uLL;
        DWORD1(v207) = IncompleteVirtualRegister;
        LODWORD(v207) = 0x1000000;
        llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v207);
        LODWORD(v207) = 1;
        *((void *)&v207 + 1) = 0;
        *(void *)&long long v208 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v207);
        LODWORD(v207) = 1;
        *((void *)&v207 + 1) = 0;
        *(void *)&long long v208 = (v74 >> 28) & 0xFF0 | v74 | ((unint64_t)v76 << 9) | (v76 >> 19) & 0x1FE000;
        llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v207);
        if (v217)
        {
          llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v214);
          if (v214 != 1)
          {
            LODWORD(v207) = 1;
            *((void *)&v207 + 1) = 0;
            *(void *)&long long v208 = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v207);
          }
        }
        else
        {
          llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v197);
        }
        if (v213)
        {
          llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v210);
          if (v210 != 1)
          {
            LODWORD(v207) = 1;
            *((void *)&v207 + 1) = 0;
            *(void *)&long long v208 = 0;
            uint64_t v87 = (const llvm::MachineOperand *)&v207;
            goto LABEL_124;
          }
        }
        else
        {
          uint64_t v87 = (const llvm::MachineOperand *)&v197;
LABEL_124:
          llvm::MachineInstr::addOperand(MachineInstr, v77, v87);
        }
        if (v191)
        {
          llvm::MachineInstr::addOperand(MachineInstr, v77, (const llvm::MachineOperand *)&v187);
          if (v187 != 1)
          {
            LODWORD(v207) = 1;
            *((void *)&v207 + 1) = 0;
            *(void *)&long long v208 = 0;
            uint64_t v88 = (const llvm::MachineOperand *)&v207;
            goto LABEL_129;
          }
        }
        else
        {
          uint64_t v88 = (const llvm::MachineOperand *)&v197;
LABEL_129:
          llvm::MachineInstr::addOperand(MachineInstr, v77, v88);
        }
        int v89 = a4[1];
        ((void (*)(llvm::IntegerType ***))(*v89[2])[23])(v89[2]);
        uint64_t v90 = ((uint64_t (*)(llvm::IntegerType ***))(*v89[2])[13])(v89[2]);
        uint64_t v91 = (void *)((uint64_t (*)(llvm::IntegerType ***))(*v89[2])[22])(v89[2]);
        sub_1CC73B5D0(MachineInstr, v90, v91);
        uint64_t v194 = 257;
        int v195 = 0;
        *(void *)&long long v207 = v77;
        *((void *)&v207 + 1) = MachineInstr;
        LODWORD(v208) = 1;
        ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a4)[4])(a4, 19, &v194, 1, &v207, 1, 0);
        LODWORD(MachineInstr) = *(_DWORD *)(*(void *)(v92 + 32) + 4);
        goto LABEL_131;
      }
      v26 += 24;
      uint64_t v25 = (llvm::MachineInstr *)((char *)v25 - 96);
    }
    while (v25);
    int v210 = v212;
    uint64_t v211 = 0x200000000;
    uint64_t v27 = (int *)((char *)v200 + 20);
    do
    {
      int v28 = *v27;
      v27 += 24;
      sub_1CBE53460(a3, v28, (uint64_t)&v214);
      if (v211 >= (unint64_t)HIDWORD(v211)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v210 + v211) = HIDWORD(v214);
      int v29 = v211 + 1;
      LODWORD(v211) = v211 + 1;
      unint64_t MachineInstr = (llvm::MachineInstr *)((char *)MachineInstr - 96);
    }
    while (MachineInstr);
    if (v201 == 1 && *((_DWORD *)v200 + 4) == 16 && *((_DWORD *)v200 + 3) == 16)
    {
      *(void *)&long long v207 = 129;
      DWORD2(v207) = 0;
      uint64_t v143 = llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
      uint64_t v145 = *(llvm::ConstantInt **)v143;
      unsigned int v146 = *(_DWORD *)(v143 + 8);
      LODWORD(v215) = v146 >> 8;
      if (v146 >> 8 >= 0x41) {
        operator new[]();
      }
      uint64_t v214 = 0;
      int v147 = llvm::ConstantInt::get(v145, (llvm::LLVMContext *)&v214, v144);
      if (v215 >= 0x41 && v214) {
        MEMORY[0x1D25D9CB0](v214, 0x1000C8000313F17);
      }
      ((void (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v207, v147);
      LODWORD(v214) = *(_DWORD *)(*(void *)(v148 + 32) + 4);
      sub_1CD4231B4((uint64_t *)&v210, (uint64_t)v210, &v214);
      int v29 = v211;
    }
    uint64_t v104 = v210;
    if (v29 == 2)
    {
      char v105 = 0;
      uint64_t v106 = 0;
      do
      {
        char v107 = v105;
        int v108 = v104[v106];
        if ((v108 & 0x80000000) == 0
          || (uint64_t v109 = a4[3], v110 = v108 & 0x7FFFFFFF, v110 >= *((_DWORD *)v109 + 108))
          || ((unint64_t)v109[53][v110] & 0xFFFFFFFFFFFFFFF9) == 0)
        {
          *(void *)&long long v207 = 129;
          DWORD2(v207) = 0;
          LODWORD(v214) = v104[v106];
          LODWORD(v216[0]) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 19, &v207, 1, &v214, 1, 0);
          v104[v106] = *(_DWORD *)(*(void *)(v111 + 32) + 4);
        }
        char v105 = 1;
        uint64_t v106 = 1;
      }
      while ((v107 & 1) == 0);
      int v112 = v211;
      uint64_t v113 = (int *)v210;
      *(void *)&long long v207 = 8388628;
      DWORD2(v207) = 0;
      uint64_t v214 = v216;
      uint64_t v215 = 0x800000000;
      if (v211 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v211)
      {
        uint64_t v114 = 0;
        uint64_t v115 = 4 * v211;
        do
        {
          int v116 = *v113++;
          uint64_t v117 = &v216[v114];
          _DWORD *v117 = v116;
          v117[4] = 0;
          v114 += 3;
          v115 -= 4;
        }
        while (v115);
        int v118 = v215;
      }
      else
      {
        int v118 = 0;
      }
      LODWORD(v215) = v118 + v112;
      ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void *))(*a4)[4])(a4, 77, &v207, 1, v216);
      uint64_t v136 = v135;
      if (v214 != v216) {
        free(v214);
      }
      int v137 = *(_DWORD *)(*(void *)(v136 + 32) + 4);
      if (v137 < 0)
      {
        BOOL v138 = a4[1][5];
        if ((v137 & 0x7FFFFFFFu) < *((_DWORD *)v138 + 108))
        {
          uint64_t v139 = v138[53][v137 & 0x7FFFFFFF];
          if (v139 != (llvm::IntegerType *)257 && ((unint64_t)v139 & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            *(void *)&long long v207 = 257;
            DWORD2(v207) = 0;
            LODWORD(v214) = v137;
            LODWORD(v216[0]) = 0;
            sub_1CC7382B0((uint64_t)a4);
            int v137 = *(_DWORD *)(*(void *)(v141 + 32) + 4);
          }
        }
      }
      *(void *)&long long v207 = 257;
      DWORD2(v207) = 0;
      LODWORD(v214) = v137;
      LODWORD(v216[0]) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 19, &v207, 1, &v214, 1, 0);
      LODWORD(MachineInstr) = *(_DWORD *)(*(void *)(v142 + 32) + 4);
    }
    else
    {
      unsigned int v119 = *(_DWORD *)v210;
      uint64_t v120 = (uint64_t)a4[3];
      if ((*(_DWORD *)v210 & 0x80000000) != 0 && (v119 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v120 + 432)) {
        unint64_t v121 = *(void *)(*(void *)(v120 + 424) + 8 * (v119 & 0x7FFFFFFF));
      }
      else {
        unint64_t v121 = 0;
      }
      unint64_t v187 = v121;
      unint64_t v122 = a4[1];
      uint64_t v123 = ((uint64_t (*)(llvm::IntegerType ***))(*v122[2])[23])(v122[2]);
      uint64_t v124 = ((uint64_t (*)(llvm::IntegerType ***))(*v122[2])[22])(v122[2]);
      if ((v187 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        if (v187)
        {
          unsigned int RegSizeInBits = v187 >> 3;
        }
        else if ((v187 & 4) != 0)
        {
          if ((v187 & 2) != 0) {
            unsigned int RegSizeInBits = (unsigned __int16)(v187 >> 19);
          }
          else {
            unsigned int RegSizeInBits = v187 >> 19;
          }
        }
        else
        {
          unsigned int RegSizeInBits = (unsigned __int16)(v187 >> 3);
        }
      }
      else if (v119 - 1 <= 0x3FFFFFFE)
      {
        unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v124 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v123, v119, v124)+ 24)+ *(_DWORD *)(v124 + 272)* ((*(void *)(v124 + 248) - *(void *)(v124 + 240)) >> 3)));
      }
      else
      {
        unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v124, v119, v120);
      }
      uint64_t v127 = sub_1CB8F1DC4(&v187);
      if (v126 == 1) {
      if (v127 == 16)
      }
      {
        unint64_t v187 = 257;
        *(void *)&long long v207 = 257;
        DWORD2(v207) = 0;
        LODWORD(v214) = v119;
        LODWORD(v216[0]) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 118, &v207, 1, &v214, 1, 0);
        unsigned int v119 = *(_DWORD *)(*(void *)(v128 + 32) + 4);
        unsigned int RegSizeInBits = 32;
      }
      uint64_t v129 = (8 * RegSizeInBits) | 1;
      if ((v119 & 0x80000000) != 0)
      {
        unint64_t v130 = a4[1][5];
        if ((v119 & 0x7FFFFFFF) < *((_DWORD *)v130 + 108))
        {
          uint64_t v131 = v130[53][v119 & 0x7FFFFFFF];
          if (((unint64_t)v131 & 0xFFFFFFFFFFFFFFF9) != 0 && v131 != (llvm::IntegerType *)v129)
          {
            *(void *)&long long v207 = v129;
            DWORD2(v207) = 0;
            LODWORD(v214) = v119;
            LODWORD(v216[0]) = 0;
            sub_1CC7382B0((uint64_t)a4);
            unsigned int v119 = *(_DWORD *)(*(void *)(v133 + 32) + 4);
          }
        }
      }
      *(void *)&long long v207 = v129;
      DWORD2(v207) = 0;
      LODWORD(v214) = v119;
      LODWORD(v216[0]) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 19, &v207, 1, &v214, 1, 0);
      LODWORD(MachineInstr) = *(_DWORD *)(*(void *)(v134 + 32) + 4);
    }
    if (v210 != v212) {
      free(v210);
    }
LABEL_220:
    unint64_t v31 = v205;
    unint64_t v32 = HIDWORD(v205);
LABEL_221:
    if (v31 >= v32) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v204 + v31) = MachineInstr;
    LODWORD(v205) = v205 + 1;
    sub_1CBB4038C((char **)&v200);
    ++v185;
  }
  if (v7 >= 2)
  {
    unint64_t v149 = v6 + 96;
    uint64_t v150 = 96 * v7 - 96;
    do
    {
      if (*(_DWORD *)(v6 + 4) < *(_DWORD *)(v149 + 4)) {
        unint64_t v6 = v149;
      }
      v149 += 96;
      v150 -= 96;
    }
    while (v150);
  }
  if (v6 == v11 || 32 * *(_DWORD *)(v6 + 4) == -32)
  {
    unsigned int v154 = 0;
  }
  else
  {
    unint64_t v151 = (32 * *(_DWORD *)(v6 + 4) + 32 - 1) | ((unint64_t)(32 * *(_DWORD *)(v6 + 4) + 32 - 1) >> 1);
    unint64_t v152 = v151 | (v151 >> 2) | ((v151 | (v151 >> 2)) >> 4);
    unint64_t v153 = v152 | (v152 >> 8) | ((v152 | (v152 >> 8)) >> 16);
    unsigned int v154 = (HIDWORD(v153) | v153) + 1;
  }
  uint64_t v155 = ((uint64_t (*)(llvm::IntegerType ***))(*v184)[22])(v184);
  uint64_t v200 = &unk_1F25FDD00;
  uint64_t v201 = (uint64_t)v184;
  uint64_t v203 = &v200;
  unsigned int v156 = sub_1CBD854F8((uint64_t)&v200);
  if (v203 == &v200)
  {
    (*((void (**)(void **))v200 + 4))(&v200);
  }
  else if (v203)
  {
    (*((void (**)(void))*v203 + 5))();
  }
  if (v156 >= 5) {
    uint64_t v157 = 269;
  }
  else {
    uint64_t v157 = 19;
  }
  if (v154)
  {
    int v158 = *(void **)(*(void *)(v155 + 240) + 8 * sub_1CBE52FF4(v154));
    unsigned int v159 = v205;
    unsigned int v160 = 32 * v205;
    if (32 * (int)v205 < v154)
    {
      int v161 = v181;
      int v162 = v183;
      do
      {
        if (!v162)
        {
          uint64_t v200 = (void *)257;
          LODWORD(v201) = 0;
          ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*a4)[4])(a4, 68, &v200, 1, 0, 0, 0);
          int v161 = *(_DWORD *)(*(void *)(v163 + 32) + 4);
          unsigned int v159 = v205;
        }
        if (v159 >= HIDWORD(v205)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v204 + v159) = v161;
        unsigned int v159 = v205 + 1;
        LODWORD(v205) = v205 + 1;
        v160 += 32;
        int v162 = 1;
      }
      while (v160 < v154);
    }
    if (v159 == 1)
    {
      int v164 = *(_DWORD *)v204;
      uint64_t v214 = v158;
      LODWORD(v215) = 2;
      LODWORD(v200) = v164;
      v202[0] = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, v157, &v214, 1, &v200, 1, 0);
    }
    else
    {
      uint64_t v214 = (void *)((8 * (unsigned __int16)v159) | 0x1000004u);
      LODWORD(v215) = 0;
      int v167 = (int *)v204;
      uint64_t v200 = v202;
      uint64_t v201 = 0x800000000;
      if (v159 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v159)
      {
        uint64_t v168 = 0;
        uint64_t v169 = 4 * v159;
        do
        {
          int v170 = *v167++;
          int v171 = &v202[v168];
          *int v171 = v170;
          v171[4] = 0;
          v168 += 6;
          v169 -= 4;
        }
        while (v169);
        int v172 = v201;
      }
      else
      {
        int v172 = 0;
      }
      LODWORD(v201) = v172 + v159;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, _DWORD *))(*a4)[4])(a4, 77, &v214, 1, v202);
      uint64_t v177 = v176;
      if (v200 != v202) {
        free(v200);
      }
      int v178 = *(_DWORD *)(*(void *)(v177 + 32) + 4);
      uint64_t v214 = v158;
      LODWORD(v215) = 2;
      LODWORD(v200) = v178;
      v202[0] = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 19, &v214, 1, &v200, 1, 0);
    }
    int v179 = *(_DWORD *)(*(void *)(v165 + 32) + 4);
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v179;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v214 = *(void **)(*(void *)(v155 + 240) + 112);
    LODWORD(v215) = 2;
    int v166 = v181;
    if (!v183)
    {
      uint64_t v200 = (void *)257;
      LODWORD(v201) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void, void, void))(*a4)[4])(a4, 68, &v200, 1, 0, 0, 0);
      int v166 = *(_DWORD *)(*(void *)(v173 + 32) + 4);
    }
    LODWORD(v200) = v166;
    v202[0] = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, v157, &v214, 1, &v200, 1, 0);
    int v175 = *(_DWORD *)(*(void *)(v174 + 32) + 4);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)a1 = 0x2000000;
    *(_DWORD *)(a1 + 4) = v175;
  }
  if (v204 != v206) {
    free(v204);
  }
}

void sub_1CBB3FF44(uint64_t *a1, int a2, __n128 a3)
{
  v24[192] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  sub_1CBE54050((uint64_t)v21, a1[1], (void *)a1[2], (unsigned char *)a1[3], *(_DWORD *)a1[4], a3, 0, a2);
  sub_1CBB3E4A8((uint64_t)v15, (uint64_t)v21, (uint64_t *)a1[6], *(llvm::IntegerType ******)(v4 + 64));
  unint64_t v5 = (llvm::MachineFunction **)a1[7];
  uint64_t v7 = *v5;
  unint64_t v6 = v5[1];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v17[0] = 0;
  v17[1] = v16;
  uint64_t v20 = 0;
  llvm::MachineInstr::addOperand(v6, v7, (const llvm::MachineOperand *)v17);
  unint64_t v8 = (llvm::MachineFunction **)a1[7];
  uint64_t v10 = *v8;
  unint64_t v9 = v8[1];
  v17[0] = 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)v17);
  unint64_t v11 = (char *)v22;
  if (v23)
  {
    uint64_t v12 = 96 * v23;
    do
    {
      unsigned int v13 = *(char **)&v11[v12 - 72];
      if (&v11[v12 - 56] != v13)
      {
        unsigned int v14 = v11;
        free(v13);
        unint64_t v11 = v14;
      }
      v12 -= 96;
    }
    while (v12);
    unint64_t v11 = (char *)v22;
  }
  if (v11 != (char *)v24) {
    free(v11);
  }
}

unint64_t sub_1CBB40070(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 40 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

unint64_t sub_1CBB400FC(unsigned int a1, unsigned __int8 a2, unint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12)
{
  uint64_t v12 = 0;
  if (a1 > 3) {
    goto LABEL_18;
  }
  unint64_t v13 = 0;
  if ((a3 & 0xFFFFFFF8) != 0) {
    return v13 | v12;
  }
  uint64_t v12 = 0;
  if (a4 > 1 || (a6 & 0xFFFFFFF8) != 0) {
    goto LABEL_18;
  }
  unint64_t v13 = 0;
  if (a6 >> 34) {
    return v13 | v12;
  }
  if (a7 > 1 || a8 > 1 || a5 > 3)
  {
LABEL_17:
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    return v13 | v12;
  }
  uint64_t v12 = 0;
  if (a2 > 0xFuLL)
  {
LABEL_18:
    unint64_t v13 = 0;
    return v13 | v12;
  }
  unint64_t v13 = 0;
  if (a3 >> 34) {
    return v13 | v12;
  }
  if (a9 > 3 || a10 > 3) {
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  if (a11 > 7) {
    goto LABEL_18;
  }
  unint64_t v13 = 0;
  if (a12 <= 3)
  {
    unint64_t v13 = a6 & 0xFFFFFFFF00000000 | (a3 >> 2) & 0x3FFFFFFFC0000000 | ((unint64_t)a2 << 13) | ((unint64_t)a5 << 19) | ((unint64_t)a7 << 10) | ((unint64_t)a8 << 11) | ((unint64_t)a9 << 21) | ((unint64_t)a10 << 28) | ((unint64_t)a11 << 47) | ((unint64_t)a12 << 50) | ((4 * a3) | a1 | (32 * a4) | ((unint64_t)a6 << 7)) & 0xFFFFFFFFFFFFFF00;
    uint64_t v12 = ((4 * a3) | a1 | (32 * a4) | ((_BYTE)a6 << 7));
  }
  return v13 | v12;
}

uint64_t sub_1CBB40240(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2 + 16;
    uint64_t v3 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      unint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *(const void **)a2, 28 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v15 = *(unsigned int *)(a1 + 8);
          uint64_t v16 = a2;
          memmove(*(void **)a1, v3, 28 * v7);
          uint64_t v8 = v15;
          a2 = v16;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 28 * v8), (const void *)(*(void *)a2 + 28 * v8), *(void *)a2 + 28 * v9 - (*(void *)a2 + 28 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v12 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v12);
        uint64_t v3 = *(const void **)v11;
      }
      *(void *)a1 = v3;
      uint64_t v13 = v11;
      uint64_t v14 = *(void *)(v11 + 8);
      unint64_t v6 = (_DWORD *)(v11 + 8);
      *(void *)(a1 + 8) = v14;
      *(void *)uint64_t v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
    }
    *unint64_t v6 = 0;
  }
  return a1;
}

char **sub_1CBB4038C(char **result)
{
  char v1 = *result;
  uint64_t v2 = *((unsigned int *)result + 2);
  if (v2)
  {
    uint64_t v3 = 96 * v2;
    do
    {
      uint64_t v4 = *(char **)&v1[v3 - 72];
      if (&v1[v3 - 56] != v4)
      {
        uint64_t v8 = result;
        uint64_t v5 = v3;
        unint64_t v6 = v1;
        free(v4);
        uint64_t v3 = v5;
        char v1 = v6;
        __n128 result = v8;
      }
      v3 -= 96;
    }
    while (v3);
    char v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    uint64_t v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

void sub_1CBB4041C(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 4);
  int v4 = (*(_DWORD *)a2 >> 8) & 0xFFF;
  if (!*(_DWORD *)a2) {
    int v4 = 0;
  }
  if (v4 == 2) {
    goto LABEL_4;
  }
  uint64_t v5 = 1;
  if (v4 > 13)
  {
    if (v4 == 15)
    {
LABEL_4:
      uint64_t v5 = 257;
      goto LABEL_5;
    }
    if (v4 != 14) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v5 = 129;
    goto LABEL_5;
  }
  if (v4 == 1) {
    goto LABEL_8;
  }
  if (v4 == 3) {
    uint64_t v5 = 513;
  }
LABEL_5:
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v14 = v5;
  int v15 = 0;
  uint64_t v7 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v6 + 32))(v6, 313, &v14, 1, 0, 0, 0);
  uint64_t v9 = v8;
  int v11 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = (2 * v3);
  llvm::MachineInstr::addOperand(v8, v7, (const llvm::MachineOperand *)&v11);
  int v10 = *(_DWORD *)(*((void *)v9 + 4) + 4);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v10;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
}

uint64_t sub_1CBB40558(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  unsigned int v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      unsigned int v11 = 0;
      goto LABEL_10;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  uint64_t v7 = v2 + 16 * v6;
  uint64_t v8 = *(void *)v7;
  if (*a2 == *(void *)v7) {
    return v7;
  }
  uint64_t v9 = 0;
  int v10 = 1;
  while (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v9) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v8 == 0x8000000000000000;
    }
    if (v14) {
      uint64_t v9 = v7;
    }
    unsigned int v15 = v6 + v10++;
    unsigned int v6 = v15 & v5;
    uint64_t v7 = v2 + 16 * (v15 & v5);
    uint64_t v8 = *(void *)v7;
    if (*a2 == *(void *)v7) {
      return v7;
    }
  }
  if (v9) {
    uint64_t v7 = v9;
  }
  if (v3) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 16);
  }
LABEL_10:
  unsigned int v12 = v3 >> 1;
  if (4 * v12 + 4 >= 3 * v11)
  {
    uint64_t v17 = a2;
    uint64_t v18 = a1;
    unsigned int v16 = 2 * v11;
LABEL_26:
    sub_1CBB40764(a1, v16);
    uint64_t v19 = 0;
    sub_1CBB406C8(v18, *v17, &v19);
    a2 = v17;
    a1 = v18;
    uint64_t v7 = v19;
    goto LABEL_12;
  }
  if (v11 + ~v12 - *(_DWORD *)(a1 + 4) <= v11 >> 3)
  {
    uint64_t v17 = a2;
    uint64_t v18 = a1;
    unsigned int v16 = v11;
    goto LABEL_26;
  }
LABEL_12:
  *(_DWORD *)a1 += 2;
  if (*(void *)v7 != 0x7FFFFFFFFFFFFFFFLL) {
    --*(_DWORD *)(a1 + 4);
  }
  *(void *)uint64_t v7 = *a2;
  *(_DWORD *)(v7 + 8) = 0;
  return v7;
}

uint64_t sub_1CBB406C8(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == 0x8000000000000000;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1CBB40764(uint64_t a1, unsigned int a2)
{
  int v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBB408F4((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  uint64_t v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((unint64_t)(v8 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      uint64_t *v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB408F4((int *)a1, v14, v7);
}

int *sub_1CBB408F4(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 34;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = 0x7FFFFFFFFFFFFFFFLL;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 8;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & (37 * v7);
      uint64_t v12 = (uint64_t *)&v9[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        BOOL v14 = 0;
        int v15 = 1;
        while (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == 0x8000000000000000;
          }
          if (v16) {
            BOOL v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_14:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1CBB40A04(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 8;
  unsigned int v4 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    int v7 = 8;
    uint64_t v8 = a1 + 8;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
    {
      __n128 result = 0;
      unsigned int v15 = 0;
      goto LABEL_10;
    }
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v9 = v7 - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  __n128 result = (uint64_t *)(v8 + 16 * v10);
  uint64_t v12 = *result;
  if (*a2 == *result) {
    return result;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v12 != -4096)
  {
    if (v13) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v12 == -8192;
    }
    if (v22) {
      uint64_t v13 = result;
    }
    unsigned int v23 = v10 + v14++;
    unsigned int v10 = v23 & v9;
    __n128 result = (uint64_t *)(v8 + 16 * v10);
    uint64_t v12 = *result;
    if (*a2 == *result) {
      return result;
    }
  }
  if (v13) {
    __n128 result = v13;
  }
  if (v6) {
    unsigned int v15 = 8;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a1 + 16);
  }
LABEL_10:
  if (4 * (v4 >> 1) + 4 < 3 * v15)
  {
    if (v15 + ~(v4 >> 1) - *(_DWORD *)(a1 + 4) <= v15 >> 3)
    {
      sub_1CBB40CB8(a1, v15);
      char v26 = 0;
      sub_1CBB40C20(a1, *a2, &v26);
      __n128 result = v26;
      unsigned int v4 = *(_DWORD *)a1;
      int v6 = *(_DWORD *)a1 & 1;
    }
    goto LABEL_13;
  }
  sub_1CBB40CB8(a1, 2 * v15);
  unsigned int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v16 = 8;
    goto LABEL_21;
  }
  int v16 = *(_DWORD *)(a1 + 16);
  if (v16)
  {
    uint64_t v5 = *(void *)(a1 + 8);
LABEL_21:
    int v6 = *(_DWORD *)a1 & 1;
    int v17 = v16 - 1;
    unsigned int v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
    __n128 result = (uint64_t *)(v5 + 16 * v18);
    uint64_t v19 = *result;
    if (*a2 != *result)
    {
      uint64_t v20 = 0;
      int v21 = 1;
      while (v19 != -4096)
      {
        if (v20) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v19 == -8192;
        }
        if (v24) {
          uint64_t v20 = result;
        }
        unsigned int v25 = v18 + v21++;
        unsigned int v18 = v25 & v17;
        __n128 result = (uint64_t *)(v5 + 16 * v18);
        uint64_t v19 = *result;
        if (*a2 == *result) {
          goto LABEL_13;
        }
      }
      if (v20) {
        __n128 result = v20;
      }
    }
    goto LABEL_13;
  }
  int v6 = 0;
  __n128 result = 0;
LABEL_13:
  *(_DWORD *)a1 = (v4 & 0xFFFFFFFE | v6) + 2;
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  *__n128 result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CBB40C20(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      int v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (void *)(v3 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1CBB40CB8(uint64_t a1, unsigned int a2)
{
  int v14[16] = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBB40E44((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      v7[1] = *(void *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBB40E44((int *)a1, v14, v7);
}

int *sub_1CBB40E44(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 34;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 8;
        uint64_t v9 = result + 2;
      }
      else
      {
        uint64_t v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = &v9[4 * v11];
      uint64_t v13 = *(void *)v12;
      if (v7 != *(void *)v12)
      {
        int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v13 == -8192;
          }
          if (v17) {
            int v14 = v12;
          }
          unsigned int v18 = v11 + v15++;
          unsigned int v11 = v18 & v10;
          uint64_t v12 = &v9[4 * (v18 & v10)];
          uint64_t v13 = *(void *)v12;
          if (v7 == *(void *)v12) {
            goto LABEL_14;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_14:
      uint64_t v16 = a2[1];
      *(void *)uint64_t v12 = v7;
      *((void *)v12 + 1) = v16;
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1CBB40F44(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 8;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      uint64_t v9 = 0;
      return (uint64_t *)(v3 + 16 * v9);
    }
  }
  int v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      int v11 = v5 + v8++;
      uint64_t v5 = v11 & v4;
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2) {
        return (uint64_t *)(v3 + 16 * v5);
      }
    }
    if (*(_DWORD *)a1)
    {
      uint64_t v9 = 8;
      uint64_t v3 = a1 + 8;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v9);
  }
  return v6;
}

uint64_t *sub_1CBB40FE0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1)
  {
    int v2 = 8;
    uint64_t v3 = a1 + 8;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      uint64_t v9 = 0;
      return (uint64_t *)(v3 + 16 * v9);
    }
  }
  int v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & (37 * a2);
  uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
  uint64_t v7 = *v6;
  if (*v6 != a2)
  {
    int v8 = 1;
    while (v7 != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v11 = v5 + v8++;
      uint64_t v5 = v11 & v4;
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2) {
        return (uint64_t *)(v3 + 16 * v5);
      }
    }
    if (*(_DWORD *)a1)
    {
      uint64_t v9 = 8;
      uint64_t v3 = a1 + 8;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v9);
  }
  return v6;
}

uint64_t sub_1CBB41080(uint64_t *a1, unsigned int a2, const llvm::MachineOperand *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  if (a2 > 2)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v10 = qword_1CDB18C58[a2];
    int v11 = (&off_1E66ABBB8)[a2];
    uint64_t v12 = 27 * a2 + 436;
  }
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v36 = v10;
  int v37 = 0;
  int v14 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v13 + 32))(v13, v12, &v36, 1, 0, 0, 0);
  uint64_t v16 = v15;
  LODWORD(v31) = 1;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v31);
  *(void *)(*(void *)(*(void *)(v9 + 48) + 24) + 16 * (*(_DWORD *)(*((void *)v16 + 4) + 4) & 0x7FFFFFFF)) = v11;
  if (a4)
  {
    uint64_t v17 = 32 * a4;
    do
    {
      llvm::MachineInstr::addOperand(v16, v14, a3);
      LODWORD(v31) = 1;
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v31);
      a3 = (const llvm::MachineOperand *)((char *)a3 + 32);
      v17 -= 32;
    }
    while (v17);
  }
  sub_1CC73B5D0(v16, *(void *)(v9 + 40), *(void **)(v9 + 56));
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v36 = v10;
  int v37 = 0;
  uint64_t v31 = (uint64_t)v14;
  unint64_t v32 = v16;
  LODWORD(v33) = 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v18 + 32))(v18, 19, &v36, 1, &v31, 1, 0);
  if (a2)
  {
    int v21 = *(_DWORD *)(*((void *)v20 + 4) + 4);
    unsigned int v22 = *(_DWORD *)(a5 + 8);
    unsigned int v23 = *(_DWORD *)(a5 + 12);
  }
  else
  {
    BOOL v24 = *(void **)(v9 + 64);
    uint64_t v31 = result;
    unint64_t v32 = v20;
    LODWORD(v33) = 1;
    sub_1CC7363F0(v24, 0x81uLL, (int *)&v31);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v9 + 64);
    uint64_t v36 = 257;
    int v37 = 0;
    uint64_t v28 = *(void *)(v25 + 32);
    LODWORD(v31) = *(_DWORD *)(v28 + 4);
    LODWORD(v33) = 0;
    int v34 = *(_DWORD *)(v28 + 36);
    int v35 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v27 + 32))(v27, 76, &v36, 1, &v31, 2, 0);
    unsigned int v30 = *(_DWORD *)(a5 + 8);
    if (v30 >= *(_DWORD *)(a5 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)a5 + 4 * v30) = *(_DWORD *)(*(void *)(v29 + 32) + 4);
    unsigned int v23 = *(_DWORD *)(a5 + 12);
    unsigned int v22 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v22;
    int v21 = *(_DWORD *)(*(void *)(v26 + 32) + 68);
  }
  if (v22 >= v23) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a5 + 4 * v22) = v21;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

uint64_t sub_1CBB413A0(uint64_t result)
{
  char v1 = *(void **)(result + 768);
  if (v1 != (void *)(result + 784))
  {
    uint64_t v4 = result;
    free(v1);
    uint64_t result = v4;
  }
  int v2 = *(void **)(result + 512);
  if (v2 != (void *)(result + 528))
  {
    uint64_t v5 = result;
    free(v2);
    uint64_t result = v5;
  }
  uint64_t v3 = *(void **)(result + 256);
  if (v3 != (void *)(result + 272))
  {
    uint64_t v6 = result;
    free(v3);
    uint64_t result = v6;
  }
  if (*(void *)result != result + 16)
  {
    uint64_t v7 = result;
    free(*(void **)result);
    return v7;
  }
  return result;
}

void sub_1CBB4144C()
{
}

uint64_t sub_1CBB41460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  v21[0] = a4;
  v21[1] = v7;
  v21[2] = a2;
  memset(&v21[3], 0, 24);
  v21[6] = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 184))(*(void *)(v6 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 16) + 176))(*(void *)(*(void *)(a4 + 8) + 16));
  uint64_t result = 0;
  v21[7] = v8;
  unsigned int v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 > 0x4C)
  {
    if (v10 != 205)
    {
      if (v10 != 77) {
        return result;
      }
      uint64_t v11 = *(void *)(*(void *)(a4 + 8) + 40);
      uint64_t v12 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
      if ((v12 & 0x80000000) != 0) {
        uint64_t v13 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v13 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v12);
      }
      uint64_t v14 = *v13;
      if (v14)
      {
        while ((*(unsigned char *)(v14 + 3) & 1) != 0)
        {
          uint64_t v14 = *(void *)(v14 + 24);
          if (!v14) {
            return sub_1CBC4375C((int)v21, (llvm::MachineInstr *)a3);
          }
        }
        uint64_t v15 = *(void *)(v14 + 8);
LABEL_15:
        if (**(_WORD **)(v15 + 16) == 19)
        {
          int v16 = *(_DWORD *)(*(void *)(v15 + 32) + 4);
          if (v16 < 0)
          {
            uint64_t v17 = *(void *)(*(void *)(v11 + 24) + 16 * (v16 & 0x7FFFFFFF));
            if ((v17 & 4) == 0)
            {
              unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFF8;
              if (v18)
              {
                int v19 = *(unsigned __int16 *)(*(void *)v18 + 24);
                BOOL v20 = (v19 - 14) > 0x32 || ((1 << (v19 - 14)) & 0x4000000004001) == 0;
                if (!v20 || v19 == 105 || v19 == 127) {
                  return 0;
                }
              }
            }
          }
        }
        while (1)
        {
          uint64_t v14 = *(void *)(v14 + 24);
          if (!v14) {
            break;
          }
          if ((*(unsigned char *)(v14 + 3) & 1) == 0 && *(void *)(v14 + 8) != v15)
          {
            uint64_t v15 = *(void *)(v14 + 8);
            goto LABEL_15;
          }
        }
      }
    }
    return sub_1CBC4375C((int)v21, (llvm::MachineInstr *)a3);
  }
  if (v10 == 19 || v10 == 74) {
    return sub_1CBC4375C((int)v21, (llvm::MachineInstr *)a3);
  }
  return result;
}

uint64_t sub_1CBB41630()
{
  int v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Assume bindless sampler base allocated for run pass testing purposes.";
  v4.n128_u64[1] = 69;
  char v1 = 0;
  int v2 = &v1;
  sub_1CD423628((llvm::cl::Option *)&unk_1EBCC0FE8, "assume-bindless-sampler-base-allocated", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC0FE8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Instruction Expansion";
  v4.n128_u64[1] = 47;
  int v3 = 0;
  char v1 = 1;
  int v2 = &v1;
  sub_1CD41FC60((uint64_t)&unk_1EBCC10A8, "enable-cse-in-agx3-inst-expansion", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC10A8, &dword_1CB82C000);
}

uint64_t sub_1CBB41720(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F80F0;
  if ((*(unsigned char *)(a1 + 264) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  }
  sub_1CD3FC170(a1 + 112);
  return a1;
}

void sub_1CBB41780(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F80F0;
  if ((*(unsigned char *)(a1 + 264) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 272), 8);
  }
  sub_1CD3FC170(a1 + 112);

  JUMPOUT(0x1D25D9CE0);
}

#error "1CBB41800: too big function (funcsize=0)"

uint64_t sub_1CBB5FAAC(uint64_t result)
{
  *(void *)(result + 104) = 0;
  return result;
}

void *sub_1CBB5FAB4()
{
  return &unk_1CDB18DD0;
}

uint64_t sub_1CBB5FAC0(uint64_t a1, int a2, unint64_t a3)
{
  switch(a2)
  {
    case 2:
      if (a3 >= 0x13) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = (0x700F0u >> a3) & 1;
      }
      break;
    case 3:
      BOOL v4 = (a3 & 0xFFFFFFFFFFFFFFFCLL) == 12;
      goto LABEL_5;
    case 4:
      BOOL v4 = a3 == 8;
LABEL_5:
      uint64_t result = v4;
      break;
    default:
      uint64_t result = a3 < 0x80;
      break;
  }
  return result;
}

BOOL sub_1CBB5FB34(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) >= 0x41u) {
    int v3 = *(void **)a3;
  }
  else {
    int v3 = (void *)a3;
  }
  return *v3 < qword_1CDC6CAD8[a2 - 1];
}

uint64_t sub_1CBB5FB64(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 3) {
    return sub_1CB9867B8(a3);
  }
  if (a2 == 2) {
    return sub_1CB9868C0(a3);
  }
  return sub_1CBB63AAC(a3);
}

uint64_t sub_1CBB5FB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1CBB633EC((uint64_t)v7, *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40), *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 1u);
  if (v8 < 4) {
    return sub_1CBB630AC((uint64_t)a3, a1, a2, 0);
  }
  *a3 = 0;
  a3[144] = 0;
  return result;
}

void sub_1CBB5FC20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v46[8] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  uint64_t v7 = *(unsigned int *)(a2 + 4);
  if ((v7 & 0x80000000) != 0) {
    int v8 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    int v8 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
    uint64_t v9 = *(void *)(v9 + 24);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = **(unsigned __int16 **)(v10 + 16);
  BOOL v12 = (v11 - 118) > 8 || ((1 << (v11 - 118)) & 0x141) == 0;
  if (v12
    || (uint64_t v13 = *(void *)(v10 + 32), *(unsigned char *)(v13 + 32))
    || ((unsigned int v14 = *(_DWORD *)(v13 + 36), v14 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v15 = *(void *)(a1 + 80),
         int RegSizeInBits = *(_DWORD *)(*(void *)(v15 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v14, v15)+ 24)+ *(_DWORD *)(v15 + 272)* ((*(void *)(v15 + 248) - *(void *)(v15 + 240)) >> 3)))): (int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v14, v6)), RegSizeInBits != 16))
  {
    unsigned int v17 = 8;
  }
  else
  {
    unsigned int v17 = 8 * (v11 != 126);
    uint64_t v18 = *(void *)(v10 + 32);
    long long v19 = *(_OWORD *)(v18 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(a2 + 16) = v19;
  }
  uint64_t v44 = v46;
  uint64_t v45 = 0x200000000;
  if (sub_1CBB644E4(a1, v6, (unsigned __int8 *)a2, (uint64_t)&v44, v17, 0, 0))
  {
    int v34 = v36;
    uint64_t v35 = 0x200000000;
    uint64_t v20 = v45;
    if (v45)
    {
      if (v45 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v36, v44, 32 * v45);
      LODWORD(v35) = v20;
    }
    int v21 = operator new(0x58uLL);
    unsigned int v22 = v21;
    *int v21 = &unk_1F25F8198;
    v21[1] = v21 + 3;
    v21[2] = 0x200000000;
    if (v20)
    {
      if (v34 == v36)
      {
        if (v20 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v21 + 3, v36, 32 * v20);
        *((_DWORD *)v22 + 4) = v20;
      }
      else
      {
        v21[1] = v34;
        int v32 = HIDWORD(v35);
        *((_DWORD *)v21 + 4) = v20;
        *((_DWORD *)v21 + 5) = v32;
        int v34 = v36;
        HIDWORD(v35) = 0;
      }
      LODWORD(v35) = 0;
    }
    uint64_t v38 = v22;
    uint64_t v23 = v45;
    if (v45)
    {
      if (v45 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v33, v44, 32 * v45);
    }
    BOOL v24 = operator new(0x58uLL);
    *BOOL v24 = &unk_1F25F81E0;
    v24[1] = v24 + 3;
    v24[2] = 0x200000000;
    if (v23)
    {
      if (v23 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v24 + 3, v33, 32 * v23);
      *((_DWORD *)v24 + 4) = v23;
    }
    uint64_t v40 = v24;
    uint64_t v41 = v43;
    uint64_t v42 = 0x400000000;
    sub_1CB986BF0((uint64_t)&v41, (uint64_t)v37, (uint64_t)&v41);
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x400000000;
    if (v42)
    {
      sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v41);
      uint64_t v25 = v42;
      *(unsigned char *)(a3 + 144) = 1;
      uint64_t v26 = v41;
      if (!v25)
      {
LABEL_44:
        if (v26 != v43) {
          free(v26);
        }
        for (uint64_t i = 0; i != -8; i -= 4)
        {
          uint64_t v31 = (&v40)[i];
          if (&v39[i * 8] == v31)
          {
            (*(void (**)(unsigned char *))(*(void *)&v39[i * 8] + 32))(&v39[i * 8]);
          }
          else if (v31)
          {
            (*(void (**)(unsigned char *))(*(void *)v31 + 40))(v31);
          }
        }
        if (v34 != v36) {
          free(v34);
        }
        goto LABEL_54;
      }
      uint64_t v27 = 32 * v25;
      uint64_t v28 = (char *)v41 - 32;
      do
      {
        uint64_t v29 = *(char **)&v28[v27 + 24];
        if (&v28[v27] == v29)
        {
          (*(void (**)(char *))(*(void *)&v28[v27] + 32))(&v28[v27]);
        }
        else if (v29)
        {
          (*(void (**)(char *))(*(void *)v29 + 40))(v29);
        }
        v27 -= 32;
      }
      while (v27);
    }
    else
    {
      *(unsigned char *)(a3 + 144) = 1;
    }
    uint64_t v26 = v41;
    goto LABEL_44;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 144) = 0;
LABEL_54:
  if (v44 != v46) {
    free(v44);
  }
}

void *sub_1CBB601BC@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  unsigned int v3 = a1[1];
  long long v13 = *(_OWORD *)(a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  if (!*a1)
  {
    sub_1CBB63F08((uint64_t)&v19, v3, *(void *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 32) + 40));
    if (v22)
    {
      int v4 = (int)v19;
      unsigned int v3 = HIDWORD(v19);
      long long v13 = v20;
      uint64_t v14 = v21;
    }
  }
  uint64_t v5 = operator new(0x28uLL);
  *(void *)uint64_t v5 = &unk_1F25F8228;
  void v5[2] = v4;
  v5[3] = v3;
  *((_OWORD *)v5 + 1) = v13;
  *((void *)v5 + 4) = v14;
  int v16 = v5;
  v17[0] = &unk_1F25F8270;
  uint64_t v18 = v17;
  long long v19 = (char *)&v20 + 8;
  *(void *)&long long v20 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v19, (uint64_t)v15, (uint64_t)&v19);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  if (v20)
  {
    sub_1CB986D14((unsigned int *)a2, (unsigned int *)&v19);
    uint64_t v6 = v20;
    *(unsigned char *)(a2 + 144) = 1;
    uint64_t v7 = (char *)v19;
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v8 = 32 * v6;
    uint64_t v9 = (char *)v19 - 32;
    do
    {
      uint64_t v10 = *(char **)&v9[v8 + 24];
      if (&v9[v8] == v10)
      {
        (*(void (**)(char *))(*(void *)&v9[v8] + 32))(&v9[v8]);
      }
      else if (v10)
      {
        (*(void (**)(char *))(*(void *)v10 + 40))(v10);
      }
      v8 -= 32;
    }
    while (v8);
  }
  else
  {
    *(unsigned char *)(a2 + 144) = 1;
  }
  uint64_t v7 = (char *)v19;
LABEL_15:
  if (v7 != (char *)&v20 + 8) {
    free(v7);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v18)[i];
    if (&v17[i] == result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(v17[i] + 32))(&v17[i]);
    }
    else if (result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
  }
  return result;
}

void **sub_1CBB60448@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 32) + 40);
  uint64_t v4 = sub_1CBB63D6C(v3, a1, 1);
  int v6 = v5;
  int v8 = *(_DWORD *)v4;
  unsigned int v7 = *(_DWORD *)(v4 + 4);
  long long v17 = *(_OWORD *)(v4 + 8);
  uint64_t v18 = *(void *)(v4 + 24);
  if (!*(_DWORD *)v4)
  {
    sub_1CBB63F08((uint64_t)&v24, v7, v3);
    if (v27)
    {
      int v8 = (int)v24;
      unsigned int v7 = HIDWORD(v24);
      long long v17 = v25;
      uint64_t v18 = v26;
    }
  }
  uint64_t v9 = operator new(0x28uLL);
  *(void *)uint64_t v9 = &unk_1F25F82B8;
  v9[2] = v8;
  _OWORD v9[3] = v7;
  *((_OWORD *)v9 + 1) = v17;
  *((void *)v9 + 4) = v18;
  long long v20 = v9;
  uint64_t v21 = &unk_1F25F8300;
  int v22 = v6;
  uint64_t v23 = &v21;
  BOOL v24 = (char *)&v25 + 8;
  *(void *)&long long v25 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v24, (uint64_t)v19, (uint64_t)&v24);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  if (v25)
  {
    sub_1CB986D14((unsigned int *)a2, (unsigned int *)&v24);
    uint64_t v10 = v25;
    *(unsigned char *)(a2 + 144) = 1;
    int v11 = (char *)v24;
    if (!v10) {
      goto LABEL_15;
    }
    uint64_t v12 = 32 * v10;
    long long v13 = (char *)v24 - 32;
    do
    {
      uint64_t v14 = *(char **)&v13[v12 + 24];
      if (&v13[v12] == v14)
      {
        (*(void (**)(char *))(*(void *)&v13[v12] + 32))(&v13[v12]);
      }
      else if (v14)
      {
        (*(void (**)(char *))(*(void *)v14 + 40))(v14);
      }
      v12 -= 32;
    }
    while (v12);
  }
  else
  {
    *(unsigned char *)(a2 + 144) = 1;
  }
  int v11 = (char *)v24;
LABEL_15:
  if (v11 != (char *)&v25 + 8) {
    free(v11);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v23)[i];
    if ((void **)((char *)&v21 + i * 8) == result)
    {
      uint64_t result = (void **)(*(uint64_t (***)(char *))((char *)&v21 + i * 8))[4]((char *)&v21 + i * 8);
    }
    else if (result)
    {
      uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 5))(result);
    }
  }
  return result;
}

void **sub_1CBB606F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  uint64_t result = (void **)sub_1CBB633EC((uint64_t)v21, v5, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 1u);
  if (v22 >= 4)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return result;
  }
  uint64_t v7 = sub_1CBB63D6C(v5, a2, 1);
  int v9 = v8;
  int v11 = *(_DWORD *)v7;
  unsigned int v10 = *(_DWORD *)(v7 + 4);
  long long v19 = *(_OWORD *)(v7 + 8);
  uint64_t v20 = *(void *)(v7 + 24);
  if (!*(_DWORD *)v7)
  {
    sub_1CBB63F08((uint64_t)&v28, v10, v5);
    if (v31)
    {
      int v11 = (int)v28;
      unsigned int v10 = HIDWORD(v28);
      long long v19 = v29;
      uint64_t v20 = v30;
    }
  }
  uint64_t v12 = operator new(0x28uLL);
  *(void *)uint64_t v12 = &unk_1F25F8348;
  v12[2] = v11;
  v12[3] = v10;
  *((_OWORD *)v12 + 1) = v19;
  *((void *)v12 + 4) = v20;
  BOOL v24 = v12;
  long long v25 = &unk_1F25F8390;
  int v26 = v9;
  char v27 = &v25;
  uint64_t v28 = (char *)&v29 + 8;
  *(void *)&long long v29 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v28, (uint64_t)v23, (uint64_t)&v28);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v29)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_16:
    uint64_t v14 = v28;
    goto LABEL_17;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v28);
  uint64_t v13 = v29;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v14 = v28;
  if (v13)
  {
    uint64_t v15 = 32 * v13;
    int v16 = v28 - 32;
    do
    {
      long long v17 = *(char **)&v16[v15 + 24];
      if (&v16[v15] == v17)
      {
        (*(void (**)(char *))(*(void *)&v16[v15] + 32))(&v16[v15]);
      }
      else if (v17)
      {
        (*(void (**)(char *))(*(void *)v17 + 40))(v17);
      }
      v15 -= 32;
    }
    while (v15);
    goto LABEL_16;
  }
LABEL_17:
  if (v14 != (char *)&v29 + 8) {
    free(v14);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t result = (&v27)[i];
    if ((void **)((char *)&v25 + i * 8) == result)
    {
      uint64_t result = (void **)(*(uint64_t (***)(char *))((char *)&v25 + i * 8))[4]((char *)&v25 + i * 8);
    }
    else if (result)
    {
      uint64_t result = (void **)(*((uint64_t (**)(void **))*result + 5))(result);
    }
  }
  return result;
}

void sub_1CBB609E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_1CBB609F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2) {
    goto LABEL_2;
  }
  uint64_t v7 = (int *)(a2 + 4);
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  int v9 = (uint64_t *)((v6 & 0x80000000) != 0
                 ? *(void *)(v8 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8
                 : *(void *)(v8 + 272) + 8 * v6);
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    goto LABEL_2;
  }
  int v12 = **(unsigned __int16 **)(v11 + 16);
  if (sub_1CBB66094(a1, a2))
  {
    sub_1CBB6617C(a3, a1, a2, 1);
    return;
  }
  BOOL v13 = (v12 - 118) > 8 || ((1 << (v12 - 118)) & 0x141) == 0;
  if (v13
    || (uint64_t v14 = *(void *)(v11 + 32), *(unsigned char *)(v14 + 32))
    || ((unsigned int v15 = *(_DWORD *)(v14 + 36), v15 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v16 = *(void *)(a1 + 80),
         int RegSizeInBits = *(_DWORD *)(*(void *)(v16 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v15, v16)+ 24)+ *(_DWORD *)(v16 + 272)* ((*(void *)(v16 + 248) - *(void *)(v16 + 240)) >> 3)))): (int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v15, v8)), RegSizeInBits != 16))
  {
    unsigned int v19 = 0;
  }
  else
  {
    int v18 = **(unsigned __int16 **)(v11 + 16);
    if (v18 == 124)
    {
      unsigned int v19 = 8;
    }
    else
    {
      if (v18 == 126) {
        goto LABEL_2;
      }
      unsigned int v19 = 0;
    }
    unint64_t v54 = v56;
    uint64_t v55 = 0x200000000;
    if (sub_1CBB644E4(a1, v8, (unsigned __int8 *)(*(void *)(v11 + 32) + 32), (uint64_t)&v54, v19, 0, 0))
    {
      uint64_t v44 = v46;
      uint64_t v45 = 0x200000000;
      uint64_t v28 = v55;
      if (v55)
      {
        if (v55 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v46, v54, 32 * v55);
        LODWORD(v45) = v28;
      }
      long long v29 = operator new(0x58uLL);
      uint64_t v30 = v29;
      *long long v29 = &unk_1F25F8540;
      v29[1] = v29 + 3;
      v29[2] = 0x200000000;
      if (v28)
      {
        if (v44 == v46)
        {
          if (v28 >= 3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v29 + 3, v46, 32 * v28);
          *((_DWORD *)v30 + 4) = v28;
        }
        else
        {
          v29[1] = v44;
          int v42 = HIDWORD(v45);
          *((_DWORD *)v29 + 4) = v28;
          *((_DWORD *)v29 + 5) = v42;
          uint64_t v44 = v46;
          HIDWORD(v45) = 0;
        }
        LODWORD(v45) = 0;
      }
      unint64_t v48 = v30;
      uint64_t v31 = v55;
      if (v55)
      {
        if (v55 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v43, v54, 32 * v55);
      }
      uint64_t v32 = operator new(0x58uLL);
      *uint64_t v32 = &unk_1F25F8588;
      v32[1] = v32 + 3;
      v32[2] = 0x200000000;
      if (v31)
      {
        if (v31 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v32 + 3, v43, 32 * v31);
        *((_DWORD *)v32 + 4) = v31;
      }
      uint64_t v50 = v32;
      uint64_t v51 = v53;
      uint64_t v52 = 0x400000000;
      sub_1CB986BF0((uint64_t)&v51, (uint64_t)v47, (uint64_t)&v51);
      *(void *)a3 = a3 + 16;
      *(void *)(a3 + 8) = 0x400000000;
      if (v52)
      {
        sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v51);
        uint64_t v33 = v52;
        *(unsigned char *)(a3 + 144) = 1;
        int v34 = v51;
        if (!v33)
        {
LABEL_80:
          if (v34 != v53) {
            free(v34);
          }
          for (uint64_t i = 0; i != -8; i -= 4)
          {
            uint64_t v41 = (&v50)[i];
            if (&v49[i * 8] == v41)
            {
              (*(void (**)(unsigned char *))(*(void *)&v49[i * 8] + 32))(&v49[i * 8]);
            }
            else if (v41)
            {
              (*(void (**)(unsigned char *))(*(void *)v41 + 40))(v41);
            }
          }
          if (v44 != v46) {
            free(v44);
          }
          if (v54 != v56) {
            free(v54);
          }
          return;
        }
        uint64_t v35 = 32 * v33;
        uint64_t v36 = (char *)v51 - 32;
        do
        {
          int v37 = *(char **)&v36[v35 + 24];
          if (&v36[v35] == v37)
          {
            (*(void (**)(char *))(*(void *)&v36[v35] + 32))(&v36[v35]);
          }
          else if (v37)
          {
            (*(void (**)(char *))(*(void *)v37 + 40))(v37);
          }
          v35 -= 32;
        }
        while (v35);
      }
      else
      {
        *(unsigned char *)(a3 + 144) = 1;
      }
      int v34 = v51;
      goto LABEL_80;
    }
    if (v54 != v56) {
      free(v54);
    }
  }
  if (**(_WORD **)(v11 + 16) != 65) {
    goto LABEL_2;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v11 + 32) + 68), v8, (uint64_t)&v51);
  if (!v53[0]) {
    goto LABEL_2;
  }
  if (v52 >= 0x41)
  {
    if (v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  unint64_t v20 = (uint64_t)((void)v51 << -(char)v52) >> -(char)v52;
  if (v20 >> 16)
  {
LABEL_2:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return;
  }
  if (v20 == 0xFFFF) {
    uint64_t v7 = (int *)(*(void *)(v11 + 32) + 36);
  }
  int v21 = *v7;
  int v22 = operator new(0x20uLL);
  *int v22 = &unk_1F25F85D0;
  v22[1] = a1;
  v22[2] = v8;
  *((_DWORD *)v22 + 6) = v21;
  v56[1] = v22;
  uint64_t v57 = &unk_1F25F8618;
  unsigned int v58 = v19;
  unint64_t v59 = &v57;
  uint64_t v51 = v53;
  uint64_t v52 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v51, (uint64_t)&v54, (uint64_t)v60);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v52)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_68:
    BOOL v24 = v51;
    goto LABEL_69;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v51);
  uint64_t v23 = v52;
  *(unsigned char *)(a3 + 144) = 1;
  BOOL v24 = v51;
  if (v23)
  {
    uint64_t v25 = 32 * v23;
    int v26 = (char *)v51 - 32;
    do
    {
      char v27 = *(char **)&v26[v25 + 24];
      if (&v26[v25] == v27)
      {
        (*(void (**)(char *))(*(void *)&v26[v25] + 32))(&v26[v25]);
      }
      else if (v27)
      {
        (*(void (**)(char *))(*(void *)v27 + 40))(v27);
      }
      v25 -= 32;
    }
    while (v25);
    goto LABEL_68;
  }
LABEL_69:
  if (v24 != v53) {
    free(v24);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    uint64_t v39 = (void *)v60[j - 1];
    if ((void **)((char *)&v57 + j * 8) == v39)
    {
      (*(void (***)(char *))((char *)&v57 + j * 8))[4]((char *)&v57 + j * 8);
    }
    else if (v39)
    {
      (*(void (**)(void *))(*v39 + 40))(v39);
    }
  }
}

void sub_1CBB61284(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a2) {
    goto LABEL_2;
  }
  uint64_t v7 = (int *)(a2 + 4);
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  int v9 = (uint64_t *)((v6 & 0x80000000) != 0
                 ? *(void *)(v8 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8
                 : *(void *)(v8 + 272) + 8 * v6);
  uint64_t v10 = *v9;
  if (!v10) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    goto LABEL_2;
  }
  int v12 = **(unsigned __int16 **)(v11 + 16);
  if (sub_1CBB66094(a1, a2))
  {
    sub_1CBB6617C(a3, a1, a2, 1);
    return;
  }
  if ((v12 - 118) <= 8 && ((1 << (v12 - 118)) & 0x141) != 0)
  {
    uint64_t v14 = *(void *)(v11 + 32);
    if (!*(unsigned char *)(v14 + 32))
    {
      unsigned int v15 = *(_DWORD *)(v14 + 36);
      if (v15 - 1 <= 0x3FFFFFFE)
      {
        uint64_t v16 = *(void *)(a1 + 80);
        int RegSizeInBits = *(_DWORD *)(*(void *)(v16 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v15, v16)+ 24)+ *(_DWORD *)(v16 + 272)* ((*(void *)(v16 + 248) - *(void *)(v16 + 240)) >> 3)));
      }
      else
      {
        int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v15, v8);
      }
      if (RegSizeInBits == 16)
      {
        uint64_t v52 = v54;
        uint64_t v53 = 0x200000000;
        if (sub_1CBB644E4(a1, v8, (unsigned __int8 *)(*(void *)(v11 + 32) + 32), (uint64_t)&v52, 0, 0, 0))
        {
          int v42 = v44;
          uint64_t v43 = 0x200000000;
          uint64_t v18 = v53;
          if (v53)
          {
            if (v53 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v44, v52, 32 * v53);
            LODWORD(v43) = v18;
          }
          unsigned int v19 = operator new(0x58uLL);
          unint64_t v20 = v19;
          *unsigned int v19 = &unk_1F25F8660;
          v19[1] = v19 + 3;
          v19[2] = 0x200000000;
          if (v18)
          {
            if (v42 == v44)
            {
              if (v18 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v19 + 3, v44, 32 * v18);
              *((_DWORD *)v20 + 4) = v18;
            }
            else
            {
              v19[1] = v42;
              int v40 = HIDWORD(v43);
              *((_DWORD *)v19 + 4) = v18;
              *((_DWORD *)v19 + 5) = v40;
              int v42 = v44;
              HIDWORD(v43) = 0;
            }
            LODWORD(v43) = 0;
          }
          long long v46 = v20;
          uint64_t v21 = v53;
          if (v53)
          {
            if (v53 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v41, v52, 32 * v53);
          }
          int v22 = operator new(0x58uLL);
          *int v22 = &unk_1F25F86A8;
          v22[1] = v22 + 3;
          v22[2] = 0x200000000;
          if (v21)
          {
            if (v21 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v22 + 3, v41, 32 * v21);
            *((_DWORD *)v22 + 4) = v21;
          }
          unint64_t v48 = v22;
          uint64_t v49 = v51;
          uint64_t v50 = 0x400000000;
          sub_1CB986BF0((uint64_t)&v49, (uint64_t)v45, (uint64_t)&v49);
          *(void *)a3 = a3 + 16;
          *(void *)(a3 + 8) = 0x400000000;
          if (v50)
          {
            sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v49);
            uint64_t v23 = v50;
            *(unsigned char *)(a3 + 144) = 1;
            BOOL v24 = v49;
            if (!v23)
            {
LABEL_75:
              if (v24 != v51) {
                free(v24);
              }
              for (uint64_t i = 0; i != -8; i -= 4)
              {
                uint64_t v39 = (&v48)[i];
                if (&v47[i * 8] == v39)
                {
                  (*(void (**)(unsigned char *))(*(void *)&v47[i * 8] + 32))(&v47[i * 8]);
                }
                else if (v39)
                {
                  (*(void (**)(unsigned char *))(*(void *)v39 + 40))(v39);
                }
              }
              if (v42 != v44) {
                free(v42);
              }
              if (v52 != v54) {
                free(v52);
              }
              return;
            }
            uint64_t v25 = 32 * v23;
            int v26 = (char *)v49 - 32;
            do
            {
              char v27 = *(char **)&v26[v25 + 24];
              if (&v26[v25] == v27)
              {
                (*(void (**)(char *))(*(void *)&v26[v25] + 32))(&v26[v25]);
              }
              else if (v27)
              {
                (*(void (**)(char *))(*(void *)v27 + 40))(v27);
              }
              v25 -= 32;
            }
            while (v25);
          }
          else
          {
            *(unsigned char *)(a3 + 144) = 1;
          }
          BOOL v24 = v49;
          goto LABEL_75;
        }
        if (v52 != v54) {
          free(v52);
        }
      }
    }
  }
  if (**(_WORD **)(v11 + 16) != 65) {
    goto LABEL_2;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v11 + 32) + 68), v8, (uint64_t)&v49);
  if (!v51[0]) {
    goto LABEL_2;
  }
  if (v50 >= 0x41)
  {
    if (v49) {
      MEMORY[0x1D25D9CB0](v49, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  unint64_t v28 = (uint64_t)((void)v49 << -(char)v50) >> -(char)v50;
  if (v28 >> 16)
  {
LABEL_2:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    return;
  }
  if (v28 == 0xFFFF) {
    uint64_t v7 = (int *)(*(void *)(v11 + 32) + 36);
  }
  int v29 = *v7;
  uint64_t v30 = operator new(0x20uLL);
  *uint64_t v30 = &unk_1F25F86F0;
  v30[1] = a1;
  v30[2] = v8;
  *((_DWORD *)v30 + 6) = v29;
  v54[1] = v30;
  uint64_t v55 = &unk_1F25F8738;
  int v56 = 0;
  uint64_t v57 = &v55;
  uint64_t v49 = v51;
  uint64_t v50 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v49, (uint64_t)&v52, (uint64_t)v58);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v50)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_63:
    uint64_t v32 = v49;
    goto LABEL_64;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v49);
  uint64_t v31 = v50;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v32 = v49;
  if (v31)
  {
    uint64_t v33 = 32 * v31;
    int v34 = (char *)v49 - 32;
    do
    {
      uint64_t v35 = *(char **)&v34[v33 + 24];
      if (&v34[v33] == v35)
      {
        (*(void (**)(char *))(*(void *)&v34[v33] + 32))(&v34[v33]);
      }
      else if (v35)
      {
        (*(void (**)(char *))(*(void *)v35 + 40))(v35);
      }
      v33 -= 32;
    }
    while (v33);
    goto LABEL_63;
  }
LABEL_64:
  if (v32 != v51) {
    free(v32);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    int v37 = (void *)v58[j - 1];
    if ((void **)((char *)&v55 + j * 8) == v37)
    {
      (*(void (***)(char *))((char *)&v55 + j * 8))[4]((char *)&v55 + j * 8);
    }
    else if (v37)
    {
      (*(void (**)(void *))(*v37 + 40))(v37);
    }
  }
}

uint64_t sub_1CBB61AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1CBB630AC(a3, a1, a2, 1);
}

void sub_1CBB61AF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v30[8] = *MEMORY[0x1E4F143B8];
  unint64_t v28 = v30;
  uint64_t v29 = 0x200000000;
  if ((sub_1CBB67B10(a1, *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40), (long long *)a2, (uint64_t)&v28) & 1) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_38;
  }
  uint64_t v18 = v20;
  uint64_t v19 = 0x200000000;
  uint64_t v4 = v29;
  if (v29)
  {
    if (v29 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v20, v28, 32 * v29);
    LODWORD(v19) = v4;
  }
  uint64_t v5 = operator new(0x58uLL);
  uint64_t v6 = v5;
  *uint64_t v5 = &unk_1F25F8780;
  v5[1] = v5 + 3;
  void v5[2] = 0x200000000;
  if (v4)
  {
    if (v18 == v20)
    {
      if (v4 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v5 + 3, v20, 32 * v4);
      *((_DWORD *)v6 + 4) = v4;
    }
    else
    {
      v5[1] = v18;
      int v16 = HIDWORD(v19);
      *((_DWORD *)v5 + 4) = v4;
      *((_DWORD *)v5 + 5) = v16;
      uint64_t v18 = v20;
      HIDWORD(v19) = 0;
    }
    LODWORD(v19) = 0;
  }
  int v22 = v6;
  uint64_t v7 = v29;
  if (v29)
  {
    if (v29 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v17, v28, 32 * v29);
  }
  uint64_t v8 = operator new(0x58uLL);
  *uint64_t v8 = &unk_1F25F87C8;
  v8[1] = v8 + 3;
  v8[2] = 0x200000000;
  if (v7)
  {
    if (v7 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v8 + 3, v17, 32 * v7);
    *((_DWORD *)v8 + 4) = v7;
  }
  BOOL v24 = v8;
  uint64_t v25 = v27;
  uint64_t v26 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v25, (uint64_t)v21, (uint64_t)&v25);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v26)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_27:
    uint64_t v10 = v25;
    goto LABEL_28;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v25);
  uint64_t v9 = v26;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v10 = v25;
  if (v9)
  {
    uint64_t v11 = 32 * v9;
    int v12 = (char *)v25 - 32;
    do
    {
      BOOL v13 = *(char **)&v12[v11 + 24];
      if (&v12[v11] == v13)
      {
        (*(void (**)(char *))(*(void *)&v12[v11] + 32))(&v12[v11]);
      }
      else if (v13)
      {
        (*(void (**)(char *))(*(void *)v13 + 40))(v13);
      }
      v11 -= 32;
    }
    while (v11);
    goto LABEL_27;
  }
LABEL_28:
  if (v10 != v27) {
    free(v10);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    unsigned int v15 = (&v24)[i];
    if (&v23[i * 8] == v15)
    {
      (*(void (**)(unsigned char *))(*(void *)&v23[i * 8] + 32))(&v23[i * 8]);
    }
    else if (v15)
    {
      (*(void (**)(unsigned char *))(*(void *)v15 + 40))(v15);
    }
  }
  if (v18 != v20) {
    free(v18);
  }
LABEL_38:
  if (v28 != v30) {
    free(v28);
  }
}

uint64_t sub_1CBB61F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1CBB6617C(a3, a1, a2, 1);
}

void sub_1CBB61F84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v48[8] = *MEMORY[0x1E4F143B8];
  long long v46 = (long long *)v48;
  uint64_t v47 = 0x200000000;
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  if (sub_1CBB66094(a1, a2))
  {
    sub_1CBB6617C(a3, a1, a2, 0);
    goto LABEL_47;
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v31 = *(_OWORD *)a2;
  long long v32 = v7;
  if (!(_BYTE)v31)
  {
    sub_1CBB63F08((uint64_t)&v43, DWORD1(v31), v6);
    if (v45)
    {
      long long v31 = v43;
      long long v32 = v44;
    }
  }
  if (v47 >= HIDWORD(v47))
  {
    if (v46 > &v31 || &v46[2 * v47] <= &v31) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v8 = &v46[2 * v47];
  long long v9 = v32;
  *uint64_t v8 = v31;
  v8[1] = v9;
  uint64_t v10 = (v47 + 1);
  LODWORD(v47) = v10;
  LODWORD(v43) = 1;
  *((void *)&v43 + 1) = 0;
  *(void *)&long long v44 = 0;
  if (v10 >= HIDWORD(v47))
  {
    BOOL v28 = &v46[2 * v10] > &v43;
    if (v46 > &v43 || !v28) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v11 = &v46[2 * v47];
  long long v12 = v44;
  *uint64_t v11 = v43;
  v11[1] = v12;
  int v13 = v47;
  uint64_t v36 = v38;
  uint64_t v37 = 0x200000000;
  uint64_t v14 = (v47 + 1);
  LODWORD(v47) = v47 + 1;
  if (v13 != -1)
  {
    unsigned int v15 = v13 + 1;
    if (v14 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v38, v46, 32 * v15);
    LODWORD(v37) = v14;
  }
  int v16 = operator new(0x58uLL);
  long long v17 = v16;
  *int v16 = &unk_1F25F8810;
  v16[1] = v16 + 3;
  void v16[2] = 0x200000000;
  if (v14)
  {
    if (v36 == v38)
    {
      if (v14 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v16 + 3, v38, 32 * v14);
      *((_DWORD *)v17 + 4) = v14;
    }
    else
    {
      v16[1] = v36;
      int v29 = HIDWORD(v37);
      *((_DWORD *)v16 + 4) = v14;
      *((_DWORD *)v16 + 5) = v29;
      uint64_t v36 = v38;
      HIDWORD(v37) = 0;
    }
    LODWORD(v37) = 0;
  }
  int v40 = v17;
  uint64_t v33 = v35;
  uint64_t v34 = 0x200000000;
  uint64_t v18 = v47;
  if (v47)
  {
    if (v47 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v35, v46, 32 * v47);
    LODWORD(v34) = v18;
  }
  uint64_t v19 = operator new(0x58uLL);
  unint64_t v20 = v19;
  *uint64_t v19 = &unk_1F25F8858;
  v19[1] = v19 + 3;
  v19[2] = 0x200000000;
  if (v18)
  {
    if (v33 == v35)
    {
      if (v18 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v19 + 3, v35, 32 * v18);
      *((_DWORD *)v20 + 4) = v18;
    }
    else
    {
      v19[1] = v33;
      int v30 = HIDWORD(v34);
      *((_DWORD *)v19 + 4) = v18;
      *((_DWORD *)v19 + 5) = v30;
      uint64_t v33 = v35;
      HIDWORD(v34) = 0;
    }
    LODWORD(v34) = 0;
  }
  int v42 = v20;
  *(void *)&long long v43 = &v44;
  *((void *)&v43 + 1) = 0x400000000;
  sub_1CB986BF0((uint64_t)&v43, (uint64_t)v39, (uint64_t)&v43);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!DWORD2(v43))
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_34:
    int v22 = (long long *)v43;
    goto LABEL_35;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v43);
  uint64_t v21 = DWORD2(v43);
  *(unsigned char *)(a3 + 144) = 1;
  int v22 = (long long *)v43;
  if (v21)
  {
    uint64_t v23 = 32 * v21;
    uint64_t v24 = v43 - 32;
    do
    {
      uint64_t v25 = *(void *)(v24 + v23 + 24);
      if (v24 + v23 == v25)
      {
        (*(void (**)(uint64_t))(*(void *)(v24 + v23) + 32))(v24 + v23);
      }
      else if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 40))(v25);
      }
      v23 -= 32;
    }
    while (v23);
    goto LABEL_34;
  }
LABEL_35:
  if (v22 != &v44) {
    free(v22);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    char v27 = (&v42)[i];
    if (&v41[i * 8] == v27)
    {
      (*(void (**)(unsigned char *))(*(void *)&v41[i * 8] + 32))(&v41[i * 8]);
    }
    else if (v27)
    {
      (*(void (**)(unsigned char *))(*(void *)v27 + 40))(v27);
    }
  }
  if (v33 != v35) {
    free(v33);
  }
  if (v36 != v38) {
    free(v36);
  }
LABEL_47:
  if (v46 != (long long *)v48) {
    free(v46);
  }
}

void sub_1CBB6255C(long long *a1@<X1>, uint64_t a2@<X8>)
{
  v46[8] = *MEMORY[0x1E4F143B8];
  long long v44 = (long long *)v46;
  uint64_t v45 = 0x200000000;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 1) + 24) + 32) + 40);
  long long v4 = a1[1];
  long long v29 = *a1;
  long long v30 = v4;
  if ((_BYTE)v29)
  {
    uint64_t v5 = (long long *)v46;
  }
  else
  {
    sub_1CBB63F08((uint64_t)&v41, DWORD1(v29), v3);
    if (v43)
    {
      long long v29 = v41;
      long long v30 = v42;
    }
    uint64_t v5 = v44;
    if (v45 >= HIDWORD(v45))
    {
      if (v44 > &v29 || &v44[2 * v45] <= &v29) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
  }
  uint64_t v6 = &v5[2 * v45];
  long long v7 = v30;
  *uint64_t v6 = v29;
  v6[1] = v7;
  uint64_t v8 = (v45 + 1);
  LODWORD(v45) = v8;
  LODWORD(v41) = 1;
  *((void *)&v41 + 1) = 0;
  *(void *)&long long v42 = 0;
  if (v8 >= HIDWORD(v45))
  {
    BOOL v26 = &v44[2 * v8] > &v41;
    if (v44 > &v41 || !v26) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v9 = &v44[2 * v45];
  long long v10 = v42;
  *long long v9 = v41;
  v9[1] = v10;
  int v11 = v45;
  uint64_t v34 = v36;
  uint64_t v35 = 0x200000000;
  uint64_t v12 = (v45 + 1);
  LODWORD(v45) = v45 + 1;
  if (v11 != -1)
  {
    unsigned int v13 = v11 + 1;
    if (v12 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v36, v44, 32 * v13);
    LODWORD(v35) = v12;
  }
  uint64_t v14 = operator new(0x58uLL);
  unsigned int v15 = v14;
  *uint64_t v14 = &unk_1F25F88A0;
  v14[1] = v14 + 3;
  v14[2] = 0x200000000;
  if (v12)
  {
    if (v34 == v36)
    {
      if (v12 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v14 + 3, v36, 32 * v12);
      *((_DWORD *)v15 + 4) = v12;
    }
    else
    {
      v14[1] = v34;
      int v27 = HIDWORD(v35);
      *((_DWORD *)v14 + 4) = v12;
      *((_DWORD *)v14 + 5) = v27;
      uint64_t v34 = v36;
      HIDWORD(v35) = 0;
    }
    LODWORD(v35) = 0;
  }
  uint64_t v38 = v15;
  long long v31 = v33;
  uint64_t v32 = 0x200000000;
  uint64_t v16 = v45;
  if (v45)
  {
    if (v45 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v33, v44, 32 * v45);
    LODWORD(v32) = v16;
  }
  long long v17 = operator new(0x58uLL);
  uint64_t v18 = v17;
  void *v17 = &unk_1F25F88E8;
  v17[1] = v17 + 3;
  _DWORD v17[2] = 0x200000000;
  if (v16)
  {
    if (v31 == v33)
    {
      if (v16 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v17 + 3, v33, 32 * v16);
      *((_DWORD *)v18 + 4) = v16;
    }
    else
    {
      v17[1] = v31;
      int v28 = HIDWORD(v32);
      *((_DWORD *)v17 + 4) = v16;
      *((_DWORD *)v17 + 5) = v28;
      long long v31 = v33;
      HIDWORD(v32) = 0;
    }
    LODWORD(v32) = 0;
  }
  int v40 = v18;
  *(void *)&long long v41 = &v42;
  *((void *)&v41 + 1) = 0x400000000;
  sub_1CB986BF0((uint64_t)&v41, (uint64_t)v37, (uint64_t)&v41);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  if (DWORD2(v41))
  {
    sub_1CB986D14((unsigned int *)a2, (unsigned int *)&v41);
    uint64_t v19 = DWORD2(v41);
    *(unsigned char *)(a2 + 144) = 1;
    unint64_t v20 = (long long *)v41;
    if (!v19) {
      goto LABEL_34;
    }
    uint64_t v21 = 32 * v19;
    uint64_t v22 = v41 - 32;
    do
    {
      uint64_t v23 = *(void *)(v22 + v21 + 24);
      if (v22 + v21 == v23)
      {
        (*(void (**)(uint64_t))(*(void *)(v22 + v21) + 32))(v22 + v21);
      }
      else if (v23)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
      }
      v21 -= 32;
    }
    while (v21);
  }
  else
  {
    *(unsigned char *)(a2 + 144) = 1;
  }
  unint64_t v20 = (long long *)v41;
LABEL_34:
  if (v20 != &v42) {
    free(v20);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    uint64_t v25 = (&v40)[i];
    if (&v39[i * 8] == v25)
    {
      (*(void (**)(unsigned char *))(*(void *)&v39[i * 8] + 32))(&v39[i * 8]);
    }
    else if (v25)
    {
      (*(void (**)(unsigned char *))(*(void *)v25 + 40))(v25);
    }
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v34 != v36) {
    free(v34);
  }
  if (v44 != (long long *)v46) {
    free(v44);
  }
}

void sub_1CBB62B14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  long long v42 = v44;
  uint64_t v43 = 0x200000000;
  if (*(unsigned char *)a2) {
    goto LABEL_2;
  }
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  long long v7 = (uint64_t *)((v6 & 0x80000000) != 0
                 ? *(void *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8
                 : *(void *)(v4 + 272) + 8 * v6);
  uint64_t v8 = *v7;
  if (!v8) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v8 + 3) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v8 + 24);
    if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    goto LABEL_2;
  }
  unsigned int v10 = **(unsigned __int16 **)(v9 + 16) - 118;
  BOOL v11 = v10 > 8;
  int v12 = (1 << v10) & 0x141;
  BOOL v13 = v11 || v12 == 0;
  if (v13
    || (uint64_t v14 = *(void *)(v9 + 32), *(unsigned char *)(v14 + 32))
    || ((unsigned int v15 = *(_DWORD *)(v14 + 36), v15 - 1 <= 0x3FFFFFFE)
      ? (uint64_t v16 = *(void *)(a1 + 80),
         int RegSizeInBits = *(_DWORD *)(*(void *)(v16 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a1 + 88), v15, v16)+ 24)+ *(_DWORD *)(v16 + 272)* ((*(void *)(v16 + 248) - *(void *)(v16 + 240)) >> 3)))): (int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v15, v4)), RegSizeInBits != 32|| (sub_1CBB644E4(a1, v4, (unsigned __int8 *)(*(void *)(v9 + 32) + 32), (uint64_t)&v42, 8 * (**(_WORD **)(v9 + 16) == 124), 0, 0) & 1) == 0))
  {
LABEL_2:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 144) = 0;
    goto LABEL_3;
  }
  uint64_t v32 = v34;
  uint64_t v33 = 0x200000000;
  uint64_t v18 = v43;
  if (v43)
  {
    if (v43 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v34, v42, 32 * v43);
    LODWORD(v33) = v18;
  }
  uint64_t v19 = operator new(0x58uLL);
  unint64_t v20 = v19;
  *uint64_t v19 = &unk_1F25F8930;
  v19[1] = v19 + 3;
  v19[2] = 0x200000000;
  if (v18)
  {
    if (v32 == v34)
    {
      if (v18 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v19 + 3, v34, 32 * v18);
      *((_DWORD *)v20 + 4) = v18;
    }
    else
    {
      v19[1] = v32;
      int v30 = HIDWORD(v33);
      *((_DWORD *)v19 + 4) = v18;
      *((_DWORD *)v19 + 5) = v30;
      uint64_t v32 = v34;
      HIDWORD(v33) = 0;
    }
    LODWORD(v33) = 0;
  }
  uint64_t v36 = v20;
  uint64_t v21 = v43;
  if (v43)
  {
    if (v43 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v31, v42, 32 * v43);
  }
  uint64_t v22 = operator new(0x58uLL);
  *uint64_t v22 = &unk_1F25F8978;
  v22[1] = v22 + 3;
  v22[2] = 0x200000000;
  if (v21)
  {
    if (v21 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v22 + 3, v31, 32 * v21);
    *((_DWORD *)v22 + 4) = v21;
  }
  uint64_t v38 = v22;
  uint64_t v39 = v41;
  uint64_t v40 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v39, (uint64_t)v35, (uint64_t)&v39);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x400000000;
  if (!v40)
  {
    *(unsigned char *)(a3 + 144) = 1;
LABEL_44:
    uint64_t v24 = v39;
    goto LABEL_45;
  }
  sub_1CB986D14((unsigned int *)a3, (unsigned int *)&v39);
  uint64_t v23 = v40;
  *(unsigned char *)(a3 + 144) = 1;
  uint64_t v24 = v39;
  if (v23)
  {
    uint64_t v25 = 32 * v23;
    BOOL v26 = (char *)v39 - 32;
    do
    {
      int v27 = *(char **)&v26[v25 + 24];
      if (&v26[v25] == v27)
      {
        (*(void (**)(char *))(*(void *)&v26[v25] + 32))(&v26[v25]);
      }
      else if (v27)
      {
        (*(void (**)(char *))(*(void *)v27 + 40))(v27);
      }
      v25 -= 32;
    }
    while (v25);
    goto LABEL_44;
  }
LABEL_45:
  if (v24 != v41) {
    free(v24);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    long long v29 = (&v38)[i];
    if (&v37[i * 8] == v29)
    {
      (*(void (**)(unsigned char *))(*(void *)&v37[i * 8] + 32))(&v37[i * 8]);
    }
    else if (v29)
    {
      (*(void (**)(unsigned char *))(*(void *)v29 + 40))(v29);
    }
  }
  if (v32 != v34) {
    free(v32);
  }
LABEL_3:
  if (v42 != v44) {
    free(v42);
  }
}

uint64_t sub_1CBB630AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v32[16] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 + 8);
  unsigned int v9 = **(unsigned __int16 **)(v8 + 16);
  BOOL v10 = 1;
  if (v9 > 0x10F)
  {
    BOOL v13 = v9 - 272 > 0x3D || ((1 << (v9 - 16)) & 0x20000040000000C1) == 0;
    if (!v13 || v9 == 357) {
      goto LABEL_18;
    }
  }
  else
  {
    if (v9 - 163 <= 0x38 && ((1 << (v9 + 93)) & 0x18800000039D4EFLL) != 0) {
      goto LABEL_18;
    }
    BOOL v12 = v9 - 85 > 0x32 || ((1 << (v9 - 85)) & 0x4001000000001) == 0;
    if (!v12 || v9 == 54) {
      goto LABEL_18;
    }
  }
  int v21 = v9 & 0xFFFE;
  uint64_t v22 = *(unsigned int *)(v8 + 40);
  if (v21 == 116)
  {
    if (!v22)
    {
LABEL_50:
      BOOL v10 = 0;
      goto LABEL_18;
    }
    uint64_t v23 = (_DWORD *)(*(void *)(v8 + 32) + 16);
    uint64_t v24 = *(unsigned int *)(v8 + 40);
    while (*((unsigned char *)v23 - 16) != 17)
    {
      v23 += 8;
      if (!--v24) {
        goto LABEL_45;
      }
    }
    if (*v23 == 2131)
    {
      BOOL v10 = 1;
      goto LABEL_18;
    }
  }
LABEL_45:
  if (!v22) {
    goto LABEL_50;
  }
  uint64_t v25 = (_DWORD *)(*(void *)(v8 + 32) + 16);
  while (*((unsigned char *)v25 - 16) != 17)
  {
    BOOL v10 = 0;
    v25 += 8;
    if (!--v22) {
      goto LABEL_18;
    }
  }
  int v26 = *v25;
  BOOL v10 = v26 == 2483 || v26 == 2624;
LABEL_18:
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = &unk_1F25F8150;
  v14[1] = a2;
  v14[2] = a3;
  *((unsigned char *)v14 + 24) = v10;
  *((unsigned char *)v14 + 25) = a4;
  long long v29 = v14;
  int v30 = v32;
  uint64_t v31 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v30, (uint64_t)v28, (uint64_t)&v30);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (v31)
  {
    sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v30);
    uint64_t v15 = v31;
    *(unsigned char *)(a1 + 144) = 1;
    uint64_t v16 = v30;
    if (!v15) {
      goto LABEL_29;
    }
    uint64_t v17 = 32 * v15;
    uint64_t v18 = (char *)v30 - 32;
    do
    {
      uint64_t v19 = *(char **)&v18[v17 + 24];
      if (&v18[v17] == v19)
      {
        (*(void (**)(char *))(*(void *)&v18[v17] + 32))(&v18[v17]);
      }
      else if (v19)
      {
        (*(void (**)(char *))(*(void *)v19 + 40))(v19);
      }
      v17 -= 32;
    }
    while (v17);
  }
  else
  {
    *(unsigned char *)(a1 + 144) = 1;
  }
  uint64_t v16 = v30;
LABEL_29:
  if (v16 != v32) {
    free(v16);
  }
  uint64_t result = (uint64_t)v29;
  if (v29 == v28) {
    return (*(uint64_t (**)(void *))(v28[0] + 32))(v28);
  }
  if (v29) {
    return (*(uint64_t (**)(void))(*v29 + 40))();
  }
  return result;
}

uint64_t sub_1CBB633EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7, __int16 a8, unsigned __int8 a9)
{
  BOOL v12 = a5;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = a3;
  *(void *)(a1 + 112) = a4;
  if (!*a5)
  {
    uint64_t v19 = *((unsigned int *)a5 + 1);
    if ((v19 - 1) <= 0x3FFFFFFE)
    {
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)(a3 + 264)
                                       + 24
                                       * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(a4, *((_DWORD *)a5 + 1), a3)+ 24)+ *(_DWORD *)(a3 + 272)* ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3)));
    }
    else
    {
      *(_DWORD *)(a1 + 88) = llvm::TargetRegisterInfo::getRegSizeInBits(a3, *((_DWORD *)a5 + 1), a2);
      if ((v19 & 0x80000000) != 0)
      {
        char v20 = 0;
        int v21 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
        goto LABEL_8;
      }
    }
    int v21 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v19);
    char v20 = 1;
LABEL_8:
    uint64_t v22 = *v21;
    if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
      uint64_t v22 = *(void *)(v22 + 24);
    }
    uint64_t v17 = *(void *)(v22 + 8);
    unsigned int v23 = **(unsigned __int16 **)(v17 + 16) - 121;
    *(unsigned char *)(a1 + 92) = (v23 < 0x40) & (0xE7039C0000004001 >> v23);
    if (v20)
    {
      *(unsigned char *)(a1 + 93) = 0;
      uint64_t v24 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v19);
    }
    else
    {
      unint64_t v26 = v19 & 0x7FFFFFFF;
      if (v26 >= *(unsigned int *)(a2 + 432)) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = *(void *)(*(void *)(a2 + 424) + 8 * v26);
      }
      *(unsigned char *)(a1 + 93) = v27 < 0;
      uint64_t v24 = (uint64_t *)(*(void *)(a2 + 24) + 16 * v26 + 8);
    }
    uint64_t v28 = *v24;
    if ((*(unsigned char *)(v28 + 3) & 1) == 0) {
      uint64_t v28 = *(void *)(v28 + 24);
    }
    uint64_t v29 = *(void *)(v28 + 8);
    if (**(_WORD **)(v29 + 16) == 121) {
      uint64_t v16 = *(void *)(*(void *)(v29 + 32) + 48);
    }
    else {
      uint64_t v16 = 0;
    }
    sub_1CC73C210(v19, a2, (uint64_t)&v67);
    if (v69)
    {
      if (v68 < 0x41)
      {
        unint64_t v18 = (uint64_t)((void)v67 << -(uint64_t)v68) >> -(uint64_t)v68;
        if (!v16)
        {
LABEL_29:
          unsigned int v25 = 4;
          goto LABEL_32;
        }
LABEL_28:
        unsigned int v25 = 5;
        goto LABEL_32;
      }
      if (v67) {
        MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
      }
    }
    unint64_t v18 = 0;
    if (!v16)
    {
      unsigned int v25 = 0;
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 88) = 16;
  int v15 = *a5;
  if (v15 != 3)
  {
    if (v15 != 1)
    {
      unsigned int v25 = 0;
      unint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      goto LABEL_32;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = *((void *)a5 + 2);
    *(unsigned char *)(a1 + 92) = 0;
    goto LABEL_29;
  }
  unint64_t v18 = 0;
  uint64_t v16 = *((void *)a5 + 2);
  *(unsigned char *)(a1 + 92) = 1;
  if (v16) {
    unsigned int v25 = 5;
  }
  else {
    unsigned int v25 = 0;
  }
  uint64_t v17 = 0;
LABEL_32:
  *(_DWORD *)(a1 + 80) = v25;
  if (v25 > 3) {
    int v30 = a9;
  }
  else {
    int v30 = 0;
  }
  if ((a8 & 0xFF00) != 0) {
    *(unsigned char *)(a1 + 92) = a8;
  }
  if (!v30) {
    goto LABEL_65;
  }
  int v31 = *(_DWORD *)(a1 + 88);
  if (v31 == 32)
  {
    if (*(unsigned char *)(a1 + 92))
    {
      if ((sub_1CB9868C0(v16 + 24) & 1) == 0) {
        goto LABEL_65;
      }
      goto LABEL_92;
    }
  }
  else if (v31 == 16)
  {
    if (*(unsigned char *)(a1 + 92))
    {
      uint64_t v32 = v16 + 24;
      if (*(unsigned char *)(a1 + 93))
      {
        if (sub_1CBB63AAC(v32)) {
          goto LABEL_92;
        }
      }
      else if (sub_1CB9867B8(v32))
      {
        goto LABEL_92;
      }
      goto LABEL_65;
    }
  }
  else if (*(unsigned char *)(a1 + 92) || v31 != 64)
  {
    goto LABEL_65;
  }
  if (v18 >= 0x100 && a6)
  {
    unint64_t v33 = v18 & 0xFFFFFFFFFFFFFC03;
    if ((v18 & 0xFFFFFFFFFFFFFE01) != 0 && v33 && (v18 & 0xFFFFFFFFFFFFF807) != 0)
    {
      if ((v18 & 0xFFFFFFFFFFFFF00FLL) != 0)
      {
        *(_DWORD *)(a1 + 84) = 0;
        goto LABEL_65;
      }
      int v35 = 4;
    }
    else
    {
      if (v33) {
        int v34 = 3;
      }
      else {
        int v34 = 2;
      }
      if ((v18 & 0xFFFFFFFFFFFFFE01) != 0) {
        int v35 = v34;
      }
      else {
        int v35 = 1;
      }
    }
    *(_DWORD *)(a1 + 84) = v35;
    goto LABEL_92;
  }
  if (v18 <= 0xFF)
  {
LABEL_92:
    int v44 = *(_DWORD *)(a1 + 88);
    if (v44 == 32)
    {
      if (*(unsigned char *)(a1 + 92))
      {
        uint64_t v57 = *(void **)(v16 + 32);
        int v56 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
        if (v57 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v56, (llvm::APInt *)&v67);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v56, (uint64_t)&v67);
        }
        unsigned int v46 = v68;
        uint64_t v47 = v67;
        unsigned int v58 = (unsigned int *)&v67;
        if (v68 >= 0x41) {
          unsigned int v58 = v67;
        }
        unsigned int v59 = *v58;
        unsigned int v60 = (v59 >> 23);
        int v51 = (v59 >> 19) & 0xF;
        unsigned int v61 = v60 - 124;
        unsigned int v62 = (v51 | 0x10u) >> (125 - v60);
        if (v60 > 0x7C) {
          unsigned int v62 = (v59 >> 19) & 0xF;
        }
        else {
          unsigned int v61 = 0;
        }
        if (v60 | v51)
        {
          unsigned int v60 = v61;
          int v51 = v62;
        }
        int v63 = (16 * v60) | (v59 >> 31 << 7);
        goto LABEL_123;
      }
    }
    else if (v44 == 16 && *(unsigned char *)(a1 + 92))
    {
      uint64_t v45 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
      if (*(unsigned char *)(a1 + 93))
      {
        if (*(_UNKNOWN **)v45 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v45, (llvm::APInt *)&v67);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v45, (uint64_t)&v67);
        }
        unsigned int v46 = v68;
        uint64_t v47 = v67;
        unint64_t v48 = (unsigned int *)&v67;
        if (v68 >= 0x41) {
          unint64_t v48 = v67;
        }
        unsigned int v49 = *v48;
        unsigned int v50 = (v49 >> 7);
        int v51 = (v49 >> 3) & 7;
        int v52 = v50 | v51;
        unsigned int v53 = v50 - 124;
        unsigned int v54 = (v51 | 0x10u) >> (125 - v50);
        BOOL v55 = v50 > 0x7C;
      }
      else
      {
        if (*(_UNKNOWN **)v45 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v45, (llvm::APInt *)&v67);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v45, (uint64_t)&v67);
        }
        unsigned int v46 = v68;
        uint64_t v47 = v67;
        uint64_t v64 = (unsigned int *)&v67;
        if (v68 >= 0x41) {
          uint64_t v64 = v67;
        }
        unsigned int v49 = *v64;
        unsigned int v50 = (v49 >> 10) & 0x1F;
        int v51 = (v49 >> 6) & 0xF;
        int v52 = v50 | v51;
        unsigned int v53 = v50 - 12;
        unsigned int v54 = (v51 | 0x10u) >> (13 - ((v49 >> 10) & 0x1F));
        BOOL v55 = v50 > 0xC;
      }
      if (v55) {
        unsigned int v54 = v51;
      }
      else {
        unsigned int v53 = 0;
      }
      if (v52)
      {
        unsigned int v50 = v53;
        int v51 = v54;
      }
      int v63 = (v49 >> 8) & 0x80 | (16 * v50);
LABEL_123:
      unint64_t v18 = v63 | v51;
      if (v46 >= 0x41 && v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
    }
    unint64_t v65 = v18 >> *(_DWORD *)(a1 + 84);
    int v66 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)a1 = 1;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = v65;
    if (!v66) {
      *(unsigned char *)(a1 + 32) = 1;
    }
    return a1;
  }
LABEL_65:
  if (a6)
  {
    int v36 = **(unsigned __int16 **)(v17 + 16);
    if (v36 == 127 || v36 == 47)
    {
      sub_1CC73C210(*(_DWORD *)(*(void *)(v17 + 32) + 68), a2, (uint64_t)&v67);
      if (v69)
      {
        if (v68 >= 0x41)
        {
          if (v67) {
            MEMORY[0x1D25D9CB0](v67, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v37 = (uint64_t)((void)v67 << -(char)v68) >> -(char)v68;
          int v38 = **(unsigned __int16 **)(v17 + 16);
          if (v38 == 127 && v37 <= 4)
          {
            unsigned int v39 = (uint64_t)((void)v67 << -(char)v68) >> -(char)v68;
LABEL_73:
            *(_DWORD *)(a1 + 84) = v39;
            BOOL v12 = (_OWORD *)(*(void *)(v17 + 32) + 32);
            goto LABEL_74;
          }
          if (v38 == 47 && v37 <= 16)
          {
            unsigned int v39 = 31 - __clz(v37);
            if (1 << v39 == v37) {
              goto LABEL_73;
            }
          }
        }
      }
    }
  }
LABEL_74:
  if (v17 && (a7 & 1) != 0)
  {
    int v40 = *(unsigned __int8 *)(a1 + 32);
    if (**(_WORD **)(v17 + 16) == 313)
    {
      long long v41 = v12[1];
      *(_OWORD *)a1 = *v12;
      *(_OWORD *)(a1 + 16) = v41;
      if (!v40) {
        *(unsigned char *)(a1 + 32) = 1;
      }
      *(_DWORD *)(a1 + 80) = 2;
      return a1;
    }
  }
  else
  {
    int v40 = *(unsigned __int8 *)(a1 + 32);
  }
  long long v42 = v12[1];
  *(_OWORD *)a1 = *v12;
  *(_OWORD *)(a1 + 16) = v42;
  if (!v40) {
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_1CBB63AAC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v4 = *(void **)(a1 + 8);
  int v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v3 = v4;
  if (v4 == &unk_1CFB2E344) {
    uint64_t v1 = *(void *)(v1 + 16);
  }
  unsigned int v5 = *(unsigned char *)(v1 + 28) & 7;
  if (v5 < 2) {
    return 0;
  }
  if (v5 == 3) {
    return 1;
  }
  if (v3 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (llvm::APInt *)&v12);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (uint64_t)&v12);
  }
  uint64_t v8 = (uint64_t *)&v12;
  if (v13 >= 0x41) {
    uint64_t v8 = v12;
  }
  uint64_t v9 = *v8;
  BOOL v6 = 1;
  if (v9)
  {
    unsigned int v10 = (v9 >> 7);
    BOOL v11 = (v9 & 7) != 0 || v10 - 121 > 0xA;
    if (v11 || v10 <= 0x7C && (((v9 | 0x80uLL) >> (125 - v10)) & 7) != 0) {
      BOOL v6 = 0;
    }
  }
  if (v13 >= 0x41 && v12) {
    MEMORY[0x1D25D9CB0]();
  }
  return v6;
}

void sub_1CBB63BB8()
{
}

__n128 sub_1CBB63BCC(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_1F25F8150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBB63C20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB63C58(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = *(void *)(*(void *)(*((void *)v3 + 3) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 25);
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = sub_1CBB63D6C(*(void *)(*(void *)(*((void *)v3 + 3) + 32) + 40), v5, 0);
    unsigned int v8 = v7;
  }
  else
  {
    unsigned int v8 = 0;
  }
  int v10 = *(_DWORD *)v5;
  unsigned int v9 = *(_DWORD *)(v5 + 4);
  long long v13 = *(_OWORD *)(v5 + 8);
  uint64_t v14 = *(void *)(v5 + 24);
  if (!v6 && !(_BYTE)v10)
  {
    sub_1CBB63F08((uint64_t)&v15, v9, v4);
    if ((_BYTE)v19)
    {
      int v10 = v15;
      unsigned int v9 = v16;
      long long v13 = v17;
      uint64_t v14 = v18;
    }
    uint64_t v3 = a2[1];
  }
  int v15 = v10;
  unsigned int v16 = v9;
  long long v17 = v13;
  uint64_t v18 = v14;
  unsigned int v19 = v8;
  llvm::MachineInstr::addOperand(v3, *a2, (const llvm::MachineOperand *)&v15);
  BOOL v12 = *a2;
  BOOL v11 = a2[1];
  LODWORD(v13) = 1;
  *((void *)&v13 + 1) = 0;
  uint64_t v14 = v19;
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)&v13);
}

uint64_t sub_1CBB63D6C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if ((v4 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (!*v5) {
    return v3;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      return v3;
    }
  }
  int v7 = 0;
  uint64_t v8 = *(void *)(v6 + 8);
  if (!a3 || !v8)
  {
LABEL_13:
    if (v8) {
      goto LABEL_16;
    }
    return v3;
  }
  if (**(_WORD **)(v8 + 16) == 262)
  {
    uint64_t v9 = *(void *)(v8 + 32);
    uint64_t v3 = v9 + 32;
    uint64_t v10 = *(unsigned int *)(v9 + 36);
    if ((v10 & 0x80000000) != 0) {
      BOOL v11 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      BOOL v11 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v10);
    }
    uint64_t v12 = *v11;
    if (!v12) {
      return v3;
    }
    if ((*(unsigned char *)(v12 + 3) & 1) == 0)
    {
      uint64_t v12 = *(void *)(v12 + 24);
      if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
        return v3;
      }
    }
    uint64_t v8 = *(void *)(v12 + 8);
    int v7 = 1;
    goto LABEL_13;
  }
  int v7 = 0;
LABEL_16:
  while (1)
  {
    int v13 = **(unsigned __int16 **)(v8 + 16);
    if (v13 != 177) {
      break;
    }
    uint64_t v14 = *(void *)(v8 + 32);
    uint64_t v3 = v14 + 32;
    v7 ^= 2u;
    uint64_t v15 = *(unsigned int *)(v14 + 36);
    if ((int)v15 < 0) {
      unsigned int v16 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v16 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v15);
    }
    uint64_t v17 = *v16;
    if (v17)
    {
      if (*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3))
      {
        uint64_t v8 = *(void *)(v17 + 8);
        if (v8) {
          continue;
        }
      }
    }
    return v3;
  }
  if (v13 == 184) {
    return *(void *)(v8 + 32) + 32;
  }
  return v3;
}

uint64_t sub_1CBB63F08(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = result;
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  if (v7 && ((*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3) & 1) != 0)) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 32);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 16) + 184))(*(void *)(v9 + 16));
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v9 + 16) + 176))(*(void *)(v9 + 16));
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
  if (v13 - 1 <= 0x3FFFFFFE) {
    __n128 result = *(unsigned int *)(*(void *)(v11 + 264)
  }
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v10, v13, v11) + 24)
                              + *(_DWORD *)(v12 + 272)
                              * ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
  else {
    __n128 result = llvm::TargetRegisterInfo::getRegSizeInBits(v11, v13, a3);
  }
  int v14 = **(unsigned __int16 **)(v8 + 16);
  if (v14 == 19)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(v8 + 32);
      if ((*(_DWORD *)(v15 + 32) & 0xFFF00) != 0) {
        goto LABEL_2;
      }
      unsigned int v16 = *(_DWORD *)(v15 + 36);
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_2;
      }
      uint64_t v17 = *(void *)(*(void *)(a3 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
      if (v17
        && ((*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3) & 1) != 0))
      {
        uint64_t v8 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v8 = 0;
      }
      int v14 = **(unsigned __int16 **)(v8 + 16);
      if (v14 != 19) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v16 = a2;
  if ((unint64_t)a2 >> 31) {
LABEL_21:
  }
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
  else {
    uint64_t v18 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a2);
  }
  uint64_t v19 = *v18;
  if (!v19
    || (*(unsigned char *)(v19 + 3) & 1) == 0 && ((uint64_t v19 = *(void *)(v19 + 24)) == 0 || (*(unsigned char *)(v19 + 3) & 1) == 0)
    || (uint64_t v20 = *(void *)(v19 + 8)) == 0
    || **(_WORD **)(v20 + 16) != 313
    || (uint64_t v21 = *(void *)(v20 + 32), *(unsigned char *)(v21 + 32) != 1))
  {
    if (v14 != 119 || result != 16)
    {
      if (v14 != 76 || result != 64) {
        goto LABEL_2;
      }
      uint64_t v27 = *(void *)(v8 + 32);
      uint64_t v28 = *(unsigned int *)(v27 + 36);
      uint64_t v29 = (uint64_t *)((v28 & 0x80000000) != 0
                      ? *(void *)(a3 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8
                      : *(void *)(a3 + 272) + 8 * v28);
      uint64_t v30 = *v29;
      if (!v30) {
        goto LABEL_2;
      }
      if ((*(unsigned char *)(v30 + 3) & 1) == 0)
      {
        uint64_t v30 = *(void *)(v30 + 24);
        if (!v30 || (*(unsigned char *)(v30 + 3) & 1) == 0) {
          goto LABEL_2;
        }
      }
      uint64_t v31 = *(void *)(v30 + 8);
      if (!v31 || **(_WORD **)(v31 + 16) != 313 || *(unsigned char *)(*(void *)(v31 + 32) + 32) != 1) {
        goto LABEL_2;
      }
      uint64_t v32 = *(unsigned int *)(v27 + 68);
      unint64_t v33 = (uint64_t *)((v32 & 0x80000000) != 0
                      ? *(void *)(a3 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8
                      : *(void *)(a3 + 272) + 8 * v32);
      uint64_t v34 = *v33;
      if (!v34) {
        goto LABEL_2;
      }
      if ((*(unsigned char *)(v34 + 3) & 1) == 0)
      {
        uint64_t v34 = *(void *)(v34 + 24);
        if (!v34 || (*(unsigned char *)(v34 + 3) & 1) == 0) {
          goto LABEL_2;
        }
      }
      uint64_t v35 = *(void *)(v34 + 8);
      if (!v35 || **(_WORD **)(v35 + 16) != 313 || *(unsigned char *)(*(void *)(v35 + 32) + 32) != 1) {
        goto LABEL_2;
      }
      if ((v28 & 0x80000000) != 0) {
        int v36 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
      }
      else {
        int v36 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v28);
      }
      uint64_t v37 = *v36;
      if (!v37) {
        goto LABEL_98;
      }
      if ((*(unsigned char *)(v37 + 3) & 1) == 0)
      {
        uint64_t v37 = *(void *)(v37 + 24);
        if (!v37) {
          goto LABEL_98;
        }
        if ((*(unsigned char *)(v37 + 3) & 1) == 0)
        {
LABEL_97:
          uint64_t v37 = 0;
          goto LABEL_98;
        }
      }
      uint64_t v37 = *(void *)(v37 + 8);
      if (v37)
      {
        if (**(_WORD **)(v37 + 16) == 313)
        {
          uint64_t v38 = *(void *)(v37 + 32);
          if (*(unsigned char *)(v38 + 32) == 1)
          {
            uint64_t v37 = *(void *)(v38 + 48);
            unint64_t v39 = v37 & 0xFFFFFFFFFFFFFF00;
            uint64_t v37 = v37;
            goto LABEL_99;
          }
        }
        goto LABEL_97;
      }
LABEL_98:
      unint64_t v39 = 0;
LABEL_99:
      if ((v32 & 0x80000000) != 0) {
        int v51 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
      }
      else {
        int v51 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v32);
      }
      uint64_t v52 = *v51;
      if (!v52) {
        goto LABEL_110;
      }
      if ((*(unsigned char *)(v52 + 3) & 1) == 0)
      {
        uint64_t v52 = *(void *)(v52 + 24);
        if (!v52) {
          goto LABEL_110;
        }
        if ((*(unsigned char *)(v52 + 3) & 1) == 0)
        {
LABEL_109:
          uint64_t v52 = 0;
          goto LABEL_110;
        }
      }
      uint64_t v52 = *(void *)(v52 + 8);
      if (v52)
      {
        if (**(_WORD **)(v52 + 16) == 313)
        {
          uint64_t v53 = *(void *)(v52 + 32);
          if (*(unsigned char *)(v53 + 32) == 1)
          {
            uint64_t v52 = *(void *)(v53 + 48);
            unint64_t v54 = v52 & 0xFFFFFFFFFFFFFF00;
            uint64_t v52 = v52;
            goto LABEL_111;
          }
        }
        goto LABEL_109;
      }
LABEL_110:
      unint64_t v54 = 0;
LABEL_111:
      if ((v37 & 7) != 0 || (uint64_t v55 = v39 | v37, v55 + 4 != (v54 | v52)))
      {
LABEL_2:
        char v5 = 0;
        *(unsigned char *)uint64_t v4 = 0;
        goto LABEL_3;
      }
      if (v55 >= 0) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = v55 + 1;
      }
      unint64_t v48 = v56 >> 1;
      unint64_t v49 = HIDWORD(v48);
      int v50 = 775;
LABEL_90:
      *(_DWORD *)uint64_t v4 = v50;
      *(_DWORD *)(v4 + 4) = v48;
      *(void *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 64;
      *(_DWORD *)(v4 + 24) = v49;
      char v5 = 1;
      goto LABEL_3;
    }
    uint64_t v40 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
    if ((v40 & 0x80000000) != 0) {
      long long v41 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
    }
    else {
      long long v41 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v40);
    }
    uint64_t v42 = *v41;
    if (!v42) {
      goto LABEL_2;
    }
    if ((*(unsigned char *)(v42 + 3) & 1) == 0)
    {
      uint64_t v42 = *(void *)(v42 + 24);
      if (!v42 || (*(unsigned char *)(v42 + 3) & 1) == 0) {
        goto LABEL_2;
      }
    }
    uint64_t v43 = *(void *)(v42 + 8);
    if (!v43 || **(_WORD **)(v43 + 16) != 313 || *(unsigned char *)(*(void *)(v43 + 32) + 32) != 1) {
      goto LABEL_2;
    }
    if ((v40 & 0x80000000) != 0) {
      int v44 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
    }
    else {
      int v44 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v40);
    }
    uint64_t v45 = *v44;
    if (!v45) {
      goto LABEL_88;
    }
    if ((*(unsigned char *)(v45 + 3) & 1) == 0)
    {
      uint64_t v45 = *(void *)(v45 + 24);
      if (!v45) {
        goto LABEL_88;
      }
      if ((*(unsigned char *)(v45 + 3) & 1) == 0)
      {
LABEL_87:
        uint64_t v45 = 0;
        goto LABEL_88;
      }
    }
    uint64_t v45 = *(void *)(v45 + 8);
    if (v45)
    {
      if (**(_WORD **)(v45 + 16) == 313)
      {
        uint64_t v46 = *(void *)(v45 + 32);
        if (*(unsigned char *)(v46 + 32) == 1)
        {
          uint64_t v45 = *(void *)(v46 + 48);
          unint64_t v47 = v45 & 0xFFFFFFFFFFFFFF00;
          uint64_t v45 = v45;
LABEL_89:
          unint64_t v48 = (uint64_t)(v47 | v45) / 2;
          unint64_t v49 = HIDWORD(v48);
          int v50 = 263;
          goto LABEL_90;
        }
      }
      goto LABEL_87;
    }
LABEL_88:
    unint64_t v47 = 0;
    goto LABEL_89;
  }
  unint64_t v22 = *(void *)(v21 + 48) / 2;
  uint64_t v23 = ((result + 7) >> 3) - 2;
  if (v23 > 6) {
    int v24 = 7;
  }
  else {
    int v24 = dword_1CDC6CB18[v23];
  }
  unint64_t v25 = HIDWORD(v22);
  *(_DWORD *)uint64_t v4 = v24;
  *(_DWORD *)(v4 + 4) = v22;
  *(void *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 64;
  char v5 = 1;
  *(_DWORD *)(v4 + 24) = v25;
LABEL_3:
  *(unsigned char *)(v4 + 32) = v5;
  return result;
}

uint64_t sub_1CBB644E4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, int a6, char a7)
{
  uint64_t v10 = (uint64_t)a3;
  if ((a7 & 1) != 0
    || (sub_1CBB633EC((uint64_t)v29, a2, *(void *)(a1 + 80), *(void *)(a1 + 88), a3, 0, 0, 0, 1u),
        uint64_t result = 0,
        v31 <= 3))
  {
    if (a6)
    {
      uint64_t v10 = sub_1CBB63D6C(a2, v10, 0);
      a6 = v13;
    }
    int v15 = *(_DWORD *)v10;
    unsigned int v14 = *(_DWORD *)(v10 + 4);
    long long v27 = *(_OWORD *)(v10 + 8);
    *(void *)&long long v28 = *(void *)(v10 + 24);
    if (!(_BYTE)v15)
    {
      sub_1CBB63F08((uint64_t)v29, v14, a2);
      if ((_BYTE)v30)
      {
        int v15 = *(_DWORD *)v29;
        unsigned int v14 = *(_DWORD *)&v29[4];
        long long v27 = *(_OWORD *)&v29[8];
        *(void *)&long long v28 = *(void *)&v29[24];
      }
    }
    *(_DWORD *)uint64_t v29 = v15;
    *(_DWORD *)&v29[4] = v14;
    *(_OWORD *)&v29[8] = v27;
    *(void *)&v29[24] = v28;
    int v30 = a6;
    uint64_t v16 = *(unsigned int *)(a4 + 8);
    unint64_t v17 = *(void *)a4;
    if (v16 >= *(_DWORD *)(a4 + 12))
    {
      BOOL v25 = v17 + 32 * v16 > (unint64_t)v29;
      if (v17 > (unint64_t)v29 || !v25) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v18 = (_OWORD *)(v17 + 32 * *(unsigned int *)(a4 + 8));
    long long v19 = *(_OWORD *)&v29[16];
    *uint64_t v18 = *(_OWORD *)v29;
    v18[1] = v19;
    unsigned int v20 = *(_DWORD *)(a4 + 12);
    uint64_t v21 = (*(_DWORD *)(a4 + 8) + 1);
    *(_DWORD *)(a4 + 8) = v21;
    LODWORD(v27) = 1;
    *((void *)&v27 + 1) = 0;
    *(void *)&long long v28 = v30 | a5;
    unint64_t v22 = *(void *)a4;
    if (v21 >= v20)
    {
      BOOL v26 = v22 + 32 * v21 > (unint64_t)&v27;
      if (v22 <= (unint64_t)&v27 && v26) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v23 = (_OWORD *)(v22 + 32 * *(unsigned int *)(a4 + 8));
    long long v24 = v28;
    *uint64_t v23 = v27;
    v23[1] = v24;
    ++*(_DWORD *)(a4 + 8);
    return 1;
  }
  return result;
}

void *sub_1CBB64718(void *a1)
{
  *a1 = &unk_1F25F8198;
  int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB6476C(void *a1)
{
  *a1 = &unk_1F25F8198;
  int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB647E0(uint64_t a1)
{
  int v2 = operator new(0x58uLL);
  uint64_t v3 = v2;
  *int v2 = &unk_1F25F8198;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB648B0(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8198;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB64978(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB64994(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB649DC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB649E8(void *a1)
{
  *a1 = &unk_1F25F81E0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB64A3C(void *a1)
{
  *a1 = &unk_1F25F81E0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB64AB0(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F81E0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB64B80(const void **result, const void **a2)
{
  *a2 = &unk_1F25F81E0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB64C48(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB64C64(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB64CAC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB64CC0()
{
}

__n128 sub_1CBB64CD4(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25F8228;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBB64D28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB64D60(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB64D70()
{
}

void *sub_1CBB64D84()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F8270;
  return result;
}

void sub_1CBB64DBC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F8270;
}

void sub_1CBB64DE4(uint64_t a1, llvm::MachineFunction **a2)
{
  BOOL v3 = *a2;
  unsigned int v2 = a2[1];
  int v5 = 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v5);
}

void sub_1CBB64E1C()
{
}

__n128 sub_1CBB64E30(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25F82B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBB64E84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F82B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB64EBC(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB64ECC()
{
}

_DWORD *sub_1CBB64EE0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25F8300;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBB64F2C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8300;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CBB64F5C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  BOOL v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1CBB64F98()
{
}

__n128 sub_1CBB64FAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F8348;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBB65000(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB65038(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB65048()
{
}

_DWORD *sub_1CBB6505C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25F8390;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBB650A8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8390;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CBB650D8(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  BOOL v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1CBB65110(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3) {
    goto LABEL_2;
  }
  uint64_t v8 = (int *)(a3 + 4);
  uint64_t v7 = *(unsigned int *)(a3 + 4);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 24) + 32) + 40);
  uint64_t v10 = (uint64_t *)((v7 & 0x80000000) != 0
                  ? *(void *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(void *)(v9 + 272) + 8 * v7);
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_2;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    goto LABEL_2;
  }
  int v13 = *(_WORD **)(v12 + 16);
  int v14 = (unsigned __int16)*v13;
  if ((v14 - 118) <= 8 && ((1 << (v14 - 118)) & 0x141) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 32);
    if (!*(unsigned char *)(v16 + 32))
    {
      unsigned int v17 = *(_DWORD *)(v16 + 36);
      if (v17 - 1 <= 0x3FFFFFFE)
      {
        uint64_t v18 = *(void *)(a2 + 80);
        int RegSizeInBits = *(_DWORD *)(*(void *)(v18 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(void *)(a2 + 88), v17, v18)+ 24)+ *(_DWORD *)(v18 + 272)* ((*(void *)(v18 + 248) - *(void *)(v18 + 240)) >> 3)));
      }
      else
      {
        int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a2 + 80), v17, v9);
      }
      int v13 = *(_WORD **)(v12 + 16);
      if (RegSizeInBits == 16)
      {
        if (*v13 == 124) {
          a4 |= 8u;
        }
        unint64_t v54 = v56;
        uint64_t v55 = 0x200000000;
        if (sub_1CBB644E4(a2, v9, (unsigned __int8 *)(*(void *)(v12 + 32) + 32), (uint64_t)&v54, a4, 0, 0))
        {
          int v44 = v46;
          uint64_t v45 = 0x200000000;
          uint64_t v20 = v55;
          if (v55)
          {
            if (v55 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v46, v54, 32 * v55);
            LODWORD(v45) = v20;
          }
          uint64_t v21 = operator new(0x58uLL);
          unint64_t v22 = v21;
          *uint64_t v21 = &unk_1F25F83D8;
          v21[1] = v21 + 3;
          v21[2] = 0x200000000;
          if (v20)
          {
            if (v44 == v46)
            {
              if (v20 >= 3) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v21 + 3, v46, 32 * v20);
              *((_DWORD *)v22 + 4) = v20;
            }
            else
            {
              v21[1] = v44;
              int v42 = HIDWORD(v45);
              *((_DWORD *)v21 + 4) = v20;
              *((_DWORD *)v21 + 5) = v42;
              int v44 = v46;
              HIDWORD(v45) = 0;
            }
            LODWORD(v45) = 0;
          }
          unint64_t v48 = v22;
          uint64_t v23 = v55;
          if (v55)
          {
            if (v55 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v43, v54, 32 * v55);
          }
          long long v24 = operator new(0x58uLL);
          *long long v24 = &unk_1F25F8420;
          v24[1] = v24 + 3;
          v24[2] = 0x200000000;
          if (v23)
          {
            if (v23 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v24 + 3, v43, 32 * v23);
            *((_DWORD *)v24 + 4) = v23;
          }
          int v50 = v24;
          int v51 = v53;
          uint64_t v52 = 0x400000000;
          sub_1CB986BF0((uint64_t)&v51, (uint64_t)v47, (uint64_t)&v51);
          *(void *)a1 = a1 + 16;
          *(void *)(a1 + 8) = 0x400000000;
          if (v52)
          {
            sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v51);
            uint64_t v25 = v52;
            *(unsigned char *)(a1 + 144) = 1;
            BOOL v26 = v51;
            if (!v25)
            {
LABEL_75:
              if (v26 != v53) {
                free(v26);
              }
              for (uint64_t i = 0; i != -8; i -= 4)
              {
                long long v41 = (&v50)[i];
                if (&v49[i * 8] == v41)
                {
                  (*(void (**)(unsigned char *))(*(void *)&v49[i * 8] + 32))(&v49[i * 8]);
                }
                else if (v41)
                {
                  (*(void (**)(unsigned char *))(*(void *)v41 + 40))(v41);
                }
              }
              if (v44 != v46) {
                free(v44);
              }
              if (v54 != v56) {
                free(v54);
              }
              return;
            }
            uint64_t v27 = 32 * v25;
            long long v28 = (char *)v51 - 32;
            do
            {
              uint64_t v29 = *(char **)&v28[v27 + 24];
              if (&v28[v27] == v29)
              {
                (*(void (**)(char *))(*(void *)&v28[v27] + 32))(&v28[v27]);
              }
              else if (v29)
              {
                (*(void (**)(char *))(*(void *)v29 + 40))(v29);
              }
              v27 -= 32;
            }
            while (v27);
          }
          else
          {
            *(unsigned char *)(a1 + 144) = 1;
          }
          BOOL v26 = v51;
          goto LABEL_75;
        }
        if (v54 != v56) {
          free(v54);
        }
        int v13 = *(_WORD **)(v12 + 16);
      }
    }
    int v14 = (unsigned __int16)*v13;
  }
  if (v14 != 65) {
    goto LABEL_2;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v12 + 32) + 68), v9, (uint64_t)&v51);
  if (!v53[0]) {
    goto LABEL_2;
  }
  if (v52 >= 0x41)
  {
    if (v51) {
      MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  unint64_t v30 = (uint64_t)((void)v51 << -(char)v52) >> -(char)v52;
  if (v30 >> 16)
  {
LABEL_2:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 144) = 0;
    return;
  }
  if (v30 == 0xFFFF) {
    uint64_t v8 = (int *)(*(void *)(v12 + 32) + 36);
  }
  int v31 = *v8;
  uint64_t v32 = operator new(0x20uLL);
  *uint64_t v32 = &unk_1F25F8468;
  v32[1] = a2;
  v32[2] = v9;
  *((_DWORD *)v32 + 6) = v31;
  v56[1] = v32;
  uint64_t v57 = &unk_1F25F84B0;
  unsigned int v58 = a4;
  unsigned int v59 = &v57;
  int v51 = v53;
  uint64_t v52 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v51, (uint64_t)&v54, (uint64_t)v60);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (!v52)
  {
    *(unsigned char *)(a1 + 144) = 1;
LABEL_63:
    uint64_t v34 = v51;
    goto LABEL_64;
  }
  sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v51);
  uint64_t v33 = v52;
  *(unsigned char *)(a1 + 144) = 1;
  uint64_t v34 = v51;
  if (v33)
  {
    uint64_t v35 = 32 * v33;
    int v36 = (char *)v51 - 32;
    do
    {
      uint64_t v37 = *(char **)&v36[v35 + 24];
      if (&v36[v35] == v37)
      {
        (*(void (**)(char *))(*(void *)&v36[v35] + 32))(&v36[v35]);
      }
      else if (v37)
      {
        (*(void (**)(char *))(*(void *)v37 + 40))(v37);
      }
      v35 -= 32;
    }
    while (v35);
    goto LABEL_63;
  }
LABEL_64:
  if (v34 != v53) {
    free(v34);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    unint64_t v39 = (void *)v60[j - 1];
    if ((void **)((char *)&v57 + j * 8) == v39)
    {
      (*(void (***)(char *))((char *)&v57 + j * 8))[4]((char *)&v57 + j * 8);
    }
    else if (v39)
    {
      (*(void (**)(void *))(*v39 + 40))(v39);
    }
  }
}

void *sub_1CBB6591C(void *a1)
{
  *a1 = &unk_1F25F83D8;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB65970(void *a1)
{
  *a1 = &unk_1F25F83D8;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB659E4(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *uint64_t v2 = &unk_1F25F83D8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB65AB4(const void **result, const void **a2)
{
  *a2 = &unk_1F25F83D8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB65B7C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB65B98(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB65BE0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB65BEC(void *a1)
{
  *a1 = &unk_1F25F8420;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB65C40(void *a1)
{
  *a1 = &unk_1F25F8420;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB65CB4(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8420;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB65D84(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8420;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB65E4C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB65E68(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB65EB0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB65EC4()
{
}

__n128 sub_1CBB65ED8(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F25F8468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBB65F2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB65F64(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1CB9885B8(*(void *)(a1 + 8), *(void *)(a2 + 8), *(void **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E66AF970);
  unsigned int v4 = *(llvm::MachineFunction **)a2;
  BOOL v5 = *(llvm::MachineInstr **)(a2 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  uint64_t v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1CBB65FCC()
{
}

_DWORD *sub_1CBB65FE0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25F84B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBB6602C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F84B0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CBB6605C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  int v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

uint64_t sub_1CBB66094(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 24) + 32) + 40);
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if ((v4 & 0x80000000) != 0) {
    BOOL v5 = (uint64_t *)(*(void *)(v3 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v5 = (uint64_t *)(*(void *)(v3 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      return 0;
    }
  }
  unint64_t v7 = *(void *)(v6 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 120) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v8 + 48);
  if (*(unsigned char *)(v8 + 32) != 1)
  {
    uint64_t v10 = (unint64_t *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      uint64_t v10 = (unint64_t *)*v10;
    }
    unint64_t v9 = *v10;
  }
  if (v9 >> 16) {
    return 0;
  }
  uint64_t v11 = sub_1CBB6646C(a1, v7, 0x81uLL, v9, 0);
  llvm::MachineOperand::setReg(a2, *(_DWORD *)(*((void *)v11 + 4) + 4));
  return 1;
}

uint64_t sub_1CBB6617C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v26[16] = *MEMORY[0x1E4F143B8];
  if (!a4) {
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(a3 + 8);
  unsigned int v8 = **(unsigned __int16 **)(v7 + 16);
  BOOL v9 = 1;
  if (v8 > 0x10F)
  {
    BOOL v12 = v8 - 272 > 0x3D || ((1 << (v8 - 16)) & 0x20000040000000C1) == 0;
    if (!v12 || v8 == 357) {
      goto LABEL_28;
    }
  }
  else
  {
    if (v8 - 163 <= 0x38 && ((1 << (v8 + 93)) & 0x18800000039D4EFLL) != 0) {
      goto LABEL_28;
    }
    BOOL v11 = v8 - 85 > 0x32 || ((1 << (v8 - 85)) & 0x4001000000001) == 0;
    if (!v11 || v8 == 54) {
      goto LABEL_28;
    }
  }
  if ((v8 & 0xFFFE) != 0x74 || (uint64_t v13 = *(unsigned int *)(v7 + 40), !v13))
  {
LABEL_27:
    BOOL v9 = 0;
    goto LABEL_28;
  }
  int v14 = (_DWORD *)(*(void *)(v7 + 32) + 16);
  while (*((unsigned char *)v14 - 16) != 17)
  {
    BOOL v9 = 0;
    v14 += 8;
    if (!--v13) {
      goto LABEL_28;
    }
  }
  BOOL v9 = *v14 == 2131;
LABEL_28:
  int v15 = operator new(0x20uLL);
  void *v15 = &unk_1F25F84F8;
  v15[1] = a2;
  void v15[2] = a3;
  *((unsigned char *)v15 + 24) = v9;
  uint64_t v23 = v15;
  long long v24 = v26;
  uint64_t v25 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v24, (uint64_t)v22, (uint64_t)&v24);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (v25)
  {
    sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v24);
    uint64_t v16 = v25;
    *(unsigned char *)(a1 + 144) = 1;
    unsigned int v17 = v24;
    if (!v16) {
      goto LABEL_39;
    }
    uint64_t v18 = 32 * v16;
    long long v19 = (char *)v24 - 32;
    do
    {
      uint64_t v20 = *(char **)&v19[v18 + 24];
      if (&v19[v18] == v20)
      {
        (*(void (**)(char *))(*(void *)&v19[v18] + 32))(&v19[v18]);
      }
      else if (v20)
      {
        (*(void (**)(char *))(*(void *)v20 + 40))(v20);
      }
      v18 -= 32;
    }
    while (v18);
  }
  else
  {
    *(unsigned char *)(a1 + 144) = 1;
  }
  unsigned int v17 = v24;
LABEL_39:
  if (v17 != v26) {
    free(v17);
  }
  uint64_t result = (uint64_t)v23;
  if (v23 == v22) {
    return (*(uint64_t (**)(void *))(v22[0] + 32))(v22);
  }
  if (v23) {
    return (*(uint64_t (**)(void))(*v23 + 40))();
  }
  return result;
}

llvm::MachineInstr *sub_1CBB6646C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  v44[0] = a3;
  uint64_t v10 = *(void *)(a2 + 24);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v38 = &unk_1F261CD58;
  uint64_t v39 = v11;
  *((void *)&v40 + 1) = *(void *)(v11 + 40);
  *(void *)&long long v40 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 104))(*(void *)(v11 + 16));
  v44[1] = 0;
  *(void *)&long long v41 = 0;
  long long v42 = a2;
  *((void *)&v41 + 1) = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) != &v41)
  {
    BOOL v12 = *(unsigned __int8 **)(a2 + 56);
    *(void *)&long long v41 = v12;
    if (v12) {
      llvm::MetadataTracking::track((uint64_t)&v41, v12, 2);
    }
  }
  if (a3 == 513)
  {
    unint64_t v13 = HIDWORD(a4);
    int v14 = *(_DWORD *)(*(void *)(sub_1CBB6646C(a1, a2, 257, a4, 0) + 32) + 4);
    int v15 = *(_DWORD *)(*(void *)(sub_1CBB6646C(a1, a2, 257, v13, 0) + 32) + 4);
    uint64_t v45 = (long long *)v44[0];
    LODWORD(v46) = 0;
    uint64_t v16 = (llvm::MachineFunction *)sub_1CC739C54(&v38, 0x12u, (unint64_t *)&v45, 1, 0, 0, 0);
    uint64_t v18 = v17;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    LODWORD(v45) = 0;
    HIDWORD(v45) = v14;
    uint64_t v48 = 0;
    llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)&v45);
    LODWORD(v45) = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 25;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v45);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    LODWORD(v45) = 0;
    HIDWORD(v45) = v15;
    uint64_t v48 = 0;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v45);
    LODWORD(v45) = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 26;
    llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v45);
    uint64_t v19 = *(void *)(v39 + 40);
    int v20 = *(_DWORD *)(*((void *)v18 + 4) + 4);
    int v22 = sub_1CB8F1DC4(v44);
    if (v21 == 1) {
    if (v22 <= 111)
    }
    {
      if (v22 <= 47)
      {
        uint64_t v23 = (__int16 ***)&off_1E66AF970;
        if (v22 != 1 && v22 != 16) {
          uint64_t v23 = &off_1E66AF580;
        }
      }
      else if (v22 > 79)
      {
        if (v22 == 80) {
          uint64_t v23 = (__int16 ***)&off_1E66AF698;
        }
        else {
          uint64_t v23 = (__int16 ***)&off_1E66AF6D0;
        }
      }
      else if (v22 == 48)
      {
        uint64_t v23 = (__int16 ***)&off_1E66AF628;
      }
      else
      {
        uint64_t v23 = (__int16 ***)&off_1E66AF9A8;
      }
    }
    else if (v22 > 223)
    {
      if (v22 > 287)
      {
        if (v22 == 288) {
          uint64_t v23 = (__int16 ***)&off_1E66AF890;
        }
        else {
          uint64_t v23 = (__int16 ***)&off_1E66AF8C8;
        }
      }
      else if (v22 == 224)
      {
        uint64_t v23 = (__int16 ***)&off_1E66AF820;
      }
      else
      {
        uint64_t v23 = (__int16 ***)&off_1E66AF858;
      }
    }
    else if (v22 > 159)
    {
      if (v22 == 160) {
        uint64_t v23 = (__int16 ***)&off_1E66AF7B0;
      }
      else {
        uint64_t v23 = (__int16 ***)&off_1E66AF7E8;
      }
    }
    else if (v22 == 112)
    {
      uint64_t v23 = (__int16 ***)&off_1E66AF740;
    }
    else
    {
      uint64_t v23 = (__int16 ***)&off_1E66AF778;
    }
    *(void *)(*(void *)(v19 + 24) + 16 * (v20 & 0x7FFFFFFF)) = v23;
  }
  else
  {
    sub_1CB8F1DC4(v44);
    if (v24 == 1) {
    int v26 = sub_1CB8F1DC4(v44);
    }
    if (v25 == 1) {
    if (v26 == 16)
    }
      int v27 = 5626;
    else {
      int v27 = 5625;
    }
    if (v26 == 16) {
      int v28 = 5623;
    }
    else {
      int v28 = 5622;
    }
    if (a5) {
      int v27 = v28;
    }
    if (v26 == 16) {
      int v29 = 518;
    }
    else {
      int v29 = 517;
    }
    if (a4) {
      unsigned int v30 = v27;
    }
    else {
      unsigned int v30 = v29;
    }
    uint64_t v45 = (long long *)v44[0];
    LODWORD(v46) = 0;
    int v31 = (llvm::MachineFunction *)sub_1CC739C54(&v38, v30, (unint64_t *)&v45, 1, 0, 0, 0);
    uint64_t v18 = v32;
    LODWORD(v45) = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v45);
    if (v30 - 519 <= 0xFFFFFFFD)
    {
      LODWORD(v45) = 1;
      uint64_t v46 = 0;
      uint64_t v47 = a4;
      llvm::MachineInstr::addOperand(v18, v31, (const llvm::MachineOperand *)&v45);
    }
    sub_1CC73B5D0(v18, *(void *)(a1 + 72), *(void **)(a1 + 80));
  }
  uint64_t v38 = &unk_1F261CD58;
  if ((void)v41)
  {
    int v33 = *(unsigned __int8 *)v41;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        uint64_t v35 = v41;
      }
      else {
        uint64_t v35 = 0;
      }
      if ((v33 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v36 = v35 + 8;
LABEL_66:
        uint64_t v45 = &v41;
        sub_1CC5FA668(v36 + 16, &v45);
        return v18;
      }
      if (v33 == 3) {
        *(void *)(v41 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v41 + 1) & 0x7F) == 2 || *(_DWORD *)(v41 + 12))
    {
      uint64_t v37 = *(void *)(v41 + 16);
      if ((v37 & 4) != 0)
      {
        unint64_t v36 = v37 & 0xFFFFFFFFFFFFFFF8;
        if (v36) {
          goto LABEL_66;
        }
      }
    }
  }
  return v18;
}

void sub_1CBB66A7C()
{
}

__n128 sub_1CBB66A90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F84F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBB66AE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F84F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB66B1C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = *(void *)(*(void *)(*((void *)v3 + 3) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v5 = sub_1CBB63D6C(*(void *)(*(void *)(*((void *)v3 + 3) + 32) + 40), v5, 0);
    unsigned int v7 = v6;
  }
  else
  {
    unsigned int v7 = 0;
  }
  int v9 = *(_DWORD *)v5;
  unsigned int v8 = *(_DWORD *)(v5 + 4);
  long long v12 = *(_OWORD *)(v5 + 8);
  uint64_t v13 = *(void *)(v5 + 24);
  if (!(_BYTE)v9)
  {
    sub_1CBB63F08((uint64_t)&v14, v8, v4);
    if ((_BYTE)v18)
    {
      int v9 = v14;
      unsigned int v8 = v15;
      long long v12 = v16;
      uint64_t v13 = v17;
    }
    uint64_t v3 = a2[1];
  }
  int v14 = v9;
  unsigned int v15 = v8;
  long long v16 = v12;
  uint64_t v17 = v13;
  unsigned int v18 = v7;
  llvm::MachineInstr::addOperand(v3, *a2, (const llvm::MachineOperand *)&v14);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  LODWORD(v12) = 1;
  *((void *)&v12 + 1) = 0;
  uint64_t v13 = v18;
  llvm::MachineInstr::addOperand(v10, v11, (const llvm::MachineOperand *)&v12);
}

void *sub_1CBB66C20(void *a1)
{
  *a1 = &unk_1F25F8540;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB66C74(void *a1)
{
  *a1 = &unk_1F25F8540;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB66CE8(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t v3 = v2;
  *uint64_t v2 = &unk_1F25F8540;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB66DB8(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8540;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB66E80(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB66E9C(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB66EE4(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB66EF0(void *a1)
{
  *a1 = &unk_1F25F8588;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB66F44(void *a1)
{
  *a1 = &unk_1F25F8588;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB66FB8(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8588;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB67088(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8588;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB67150(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB6716C(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB671B4(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB671C8()
{
}

__n128 sub_1CBB671DC(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F25F85D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBB67230(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F85D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB67268(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1CB9885B8(*(void *)(a1 + 8), *(void *)(a2 + 8), *(void **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E66AF970);
  unsigned int v4 = *(llvm::MachineFunction **)a2;
  BOOL v5 = *(llvm::MachineInstr **)(a2 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  uint64_t v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1CBB672D0()
{
}

_DWORD *sub_1CBB672E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25F8618;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBB67330(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8618;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CBB67360(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  int v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void *sub_1CBB67398(void *a1)
{
  *a1 = &unk_1F25F8660;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB673EC(void *a1)
{
  *a1 = &unk_1F25F8660;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB67460(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  int v3 = v2;
  *uint64_t v2 = &unk_1F25F8660;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB67530(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8660;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB675F8(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB67614(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB6765C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB67668(void *a1)
{
  *a1 = &unk_1F25F86A8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB676BC(void *a1)
{
  *a1 = &unk_1F25F86A8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB67730(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F86A8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB67800(const void **result, const void **a2)
{
  *a2 = &unk_1F25F86A8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB678C8(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB678E4(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB6792C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB67940()
{
}

__n128 sub_1CBB67954(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F25F86F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBB679A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F86F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CBB679E0(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1CB9885B8(*(void *)(a1 + 8), *(void *)(a2 + 8), *(void **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E66AF970);
  unsigned int v4 = *(llvm::MachineFunction **)a2;
  BOOL v5 = *(llvm::MachineInstr **)(a2 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  uint64_t v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1CBB67A48()
{
}

_DWORD *sub_1CBB67A5C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F25F8738;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBB67AA8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8738;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1CBB67AD8(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned int v4 = *a2;
  int v3 = a2[1];
  int v6 = 1;
  uint64_t v7 = 0;
  uint64_t v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

uint64_t sub_1CBB67B10(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  sub_1CBB633EC((uint64_t)v28, a2, *(void *)(a1 + 80), *(void *)(a1 + 88), (unsigned __int8 *)a3, 0, 0, 0, 1u);
  int RegSizeInBits = 0;
  if (!*(unsigned char *)a3)
  {
    unsigned int v9 = *((_DWORD *)a3 + 1);
    uint64_t v10 = *(void *)(a1 + 80);
    if (v9 - 1 <= 0x3FFFFFFE)
    {
      uint64_t v24 = *(void *)(a1 + 88);
      uint64_t v25 = *(void *)(a1 + 80);
      int RegSizeInBits = *(_DWORD *)(*(void *)(v25 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v24, v9, v10)
                                                       + 24)
                                 + *(_DWORD *)(v25 + 272)
                                 * ((*(void *)(v25 + 248) - *(void *)(v25 + 240)) >> 3)));
    }
    else
    {
      int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(void *)(a1 + 80), v9, a2);
    }
  }
  if (v29 > 3 || RegSizeInBits != 32 && RegSizeInBits != 16) {
    return 0;
  }
  long long v11 = a3[1];
  long long v26 = *a3;
  long long v27 = v11;
  if (!(_BYTE)v26)
  {
    sub_1CBB63F08((uint64_t)&v30, DWORD1(v26), a2);
    if (v32)
    {
      long long v26 = v30;
      long long v27 = v31;
    }
  }
  uint64_t v12 = *(unsigned int *)(a4 + 8);
  unint64_t v13 = *(void *)a4;
  if (v12 >= *(_DWORD *)(a4 + 12))
  {
    BOOL v22 = v13 + 32 * v12 > (unint64_t)&v26;
    if (v13 > (unint64_t)&v26 || !v22) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v14 = (_OWORD *)(v13 + 32 * *(unsigned int *)(a4 + 8));
  long long v15 = v27;
  *int v14 = v26;
  v14[1] = v15;
  unsigned int v16 = *(_DWORD *)(a4 + 12);
  uint64_t v17 = (*(_DWORD *)(a4 + 8) + 1);
  *(_DWORD *)(a4 + 8) = v17;
  LODWORD(v30) = 1;
  *((void *)&v30 + 1) = 0;
  *(void *)&long long v31 = 0;
  unint64_t v18 = *(void *)a4;
  if (v17 >= v16)
  {
    BOOL v23 = v18 + 32 * v17 > (unint64_t)&v30;
    if (v18 <= (unint64_t)&v30 && v23) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v19 = (_OWORD *)(v18 + 32 * *(unsigned int *)(a4 + 8));
  long long v20 = v31;
  *uint64_t v19 = v30;
  v19[1] = v20;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

void *sub_1CBB67D60(void *a1)
{
  *a1 = &unk_1F25F8780;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB67DB4(void *a1)
{
  *a1 = &unk_1F25F8780;
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB67E28(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  int v3 = v2;
  *uint64_t v2 = &unk_1F25F8780;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB67EF8(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8780;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB67FC0(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB67FDC(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB68024(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB68030(void *a1)
{
  *a1 = &unk_1F25F87C8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB68084(void *a1)
{
  *a1 = &unk_1F25F87C8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB680F8(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F87C8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB681C8(const void **result, const void **a2)
{
  *a2 = &unk_1F25F87C8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB68290(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB682AC(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB682F4(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB68304(void *a1)
{
  *a1 = &unk_1F25F8810;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB68358(void *a1)
{
  *a1 = &unk_1F25F8810;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB683CC(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8810;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB6849C(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8810;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB68564(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB68580(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB685C8(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB685D4(void *a1)
{
  *a1 = &unk_1F25F8858;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB68628(void *a1)
{
  *a1 = &unk_1F25F8858;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB6869C(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8858;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB6876C(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8858;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB68834(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB68850(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB68898(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB688A8(void *a1)
{
  *a1 = &unk_1F25F88A0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB688FC(void *a1)
{
  *a1 = &unk_1F25F88A0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB68970(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F88A0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB68A40(const void **result, const void **a2)
{
  *a2 = &unk_1F25F88A0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB68B08(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB68B24(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB68B6C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB68B78(void *a1)
{
  *a1 = &unk_1F25F88E8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB68BCC(void *a1)
{
  *a1 = &unk_1F25F88E8;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB68C40(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F88E8;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB68D10(const void **result, const void **a2)
{
  *a2 = &unk_1F25F88E8;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB68DD8(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB68DF4(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB68E3C(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB68E4C(void *a1)
{
  *a1 = &unk_1F25F8930;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB68EA0(void *a1)
{
  *a1 = &unk_1F25F8930;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB68F14(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8930;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB68FE4(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8930;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB690AC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB690C8(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB69110(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB6911C(void *a1)
{
  *a1 = &unk_1F25F8978;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB69170(void *a1)
{
  *a1 = &unk_1F25F8978;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB691E4(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8978;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB692B4(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8978;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __n128 result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB6937C(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB69398(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB693E0(uint64_t a1, llvm::MachineFunction **a2)
{
}

void sub_1CBB693F0(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) + 48);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)&v37;
  uint64_t v6 = *(void *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344)
  {
    BOOL v5 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    uint64_t v37 = *(void *)(v4 + 32);
    uint64_t v7 = (uint64_t *)*(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80) {
      operator new[]();
    }
    char v8 = *(unsigned char *)(v4 + 52);
    int v9 = v8 & 7;
    char v40 = v8 & 0xF;
    int v39 = *(_DWORD *)(v4 + 48);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F) {
        uint64_t v7 = (uint64_t *)&v38;
      }
      unsigned int v16 = *(uint64_t **)(v4 + 40);
      long long v15 = (uint64_t *)(v4 + 40);
      int v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80) {
        int v14 = v15;
      }
      if (v13 <= 0xFFFFFFBF)
      {
        unint64_t v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          uint64_t v18 = *v14++;
          *v7++ = v18;
          --v17;
        }
        while (v17);
      }
    }
  }
  uint64_t v19 = v38;
  if ((_UNKNOWN *)v37 != &unk_1CFB2E344) {
    uint64_t v19 = &v36;
  }
  char v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    BOOL v22 = *a2;
    uint64_t v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 128;
    }
    else
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v33);
  }
  else
  {
    if ((_UNKNOWN *)v37 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v31);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v31);
    }
    BOOL v23 = (unsigned int *)&v31;
    if (v32 >= 0x41) {
      BOOL v23 = v31;
    }
    unsigned int v24 = *v23;
    unsigned int v25 = (v24 >> 10) & 0x1F;
    int v26 = (v24 >> 6) & 0xF;
    unsigned int v27 = v25 - 12;
    unsigned int v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC) {
      unsigned int v28 = (v24 >> 6) & 0xF;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v25 | v26)
    {
      unsigned int v25 = v27;
      int v26 = v28;
    }
    long long v30 = *a2;
    int v29 = a2[1];
    int v33 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v33);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v38);
  }
  else if ((*(_DWORD *)(v37 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
}

void sub_1CBB6969C(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) + 48);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)&v37;
  uint64_t v6 = *(void *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344)
  {
    BOOL v5 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    uint64_t v37 = *(void *)(v4 + 32);
    uint64_t v7 = (uint64_t *)*(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80) {
      operator new[]();
    }
    char v8 = *(unsigned char *)(v4 + 52);
    int v9 = v8 & 7;
    char v40 = v8 & 0xF;
    int v39 = *(_DWORD *)(v4 + 48);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F) {
        uint64_t v7 = (uint64_t *)&v38;
      }
      unsigned int v16 = *(uint64_t **)(v4 + 40);
      long long v15 = (uint64_t *)(v4 + 40);
      int v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80) {
        int v14 = v15;
      }
      if (v13 <= 0xFFFFFFBF)
      {
        unint64_t v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          uint64_t v18 = *v14++;
          *v7++ = v18;
          --v17;
        }
        while (v17);
      }
    }
  }
  uint64_t v19 = v38;
  if ((_UNKNOWN *)v37 != &unk_1CFB2E344) {
    uint64_t v19 = &v36;
  }
  char v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    BOOL v22 = *a2;
    uint64_t v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 128;
    }
    else
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v33);
  }
  else
  {
    if ((_UNKNOWN *)v37 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v31);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v31);
    }
    BOOL v23 = (unsigned int *)&v31;
    if (v32 >= 0x41) {
      BOOL v23 = v31;
    }
    unsigned int v24 = *v23;
    unsigned int v25 = (v24 >> 23);
    int v26 = (v24 >> 19) & 0xF;
    unsigned int v27 = v25 - 124;
    unsigned int v28 = (v26 | 0x10u) >> (125 - v25);
    if (v25 > 0x7C) {
      unsigned int v28 = (v24 >> 19) & 0xF;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v25 | v26)
    {
      unsigned int v25 = v27;
      int v26 = v28;
    }
    long long v30 = *a2;
    int v29 = a2[1];
    int v33 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = (16 * v25) | (v24 >> 31 << 7) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v33);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v38);
  }
  else if ((*(_DWORD *)(v37 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
}

void sub_1CBB69948(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) + 48);
  BOOL v5 = (llvm::detail::DoubleAPFloat *)&v37;
  uint64_t v6 = *(void *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1CFB2E344)
  {
    BOOL v5 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(&v37, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    uint64_t v37 = *(void *)(v4 + 32);
    uint64_t v7 = (uint64_t *)*(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80) {
      operator new[]();
    }
    char v8 = *(unsigned char *)(v4 + 52);
    int v9 = v8 & 7;
    char v40 = v8 & 0xF;
    int v39 = *(_DWORD *)(v4 + 48);
    BOOL v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F) {
        uint64_t v7 = (uint64_t *)&v38;
      }
      unsigned int v16 = *(uint64_t **)(v4 + 40);
      long long v15 = (uint64_t *)(v4 + 40);
      int v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80) {
        int v14 = v15;
      }
      if (v13 <= 0xFFFFFFBF)
      {
        unint64_t v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          uint64_t v18 = *v14++;
          *v7++ = v18;
          --v17;
        }
        while (v17);
      }
    }
  }
  uint64_t v19 = v38;
  if ((_UNKNOWN *)v37 != &unk_1CFB2E344) {
    uint64_t v19 = &v36;
  }
  char v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    BOOL v22 = *a2;
    uint64_t v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 128;
    }
    else
    {
      int v33 = 1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v33);
  }
  else
  {
    if ((_UNKNOWN *)v37 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (llvm::APInt *)&v31);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (uint64_t)&v31);
    }
    BOOL v23 = (unsigned int *)&v31;
    if (v32 >= 0x41) {
      BOOL v23 = v31;
    }
    unsigned int v24 = *v23;
    unsigned int v25 = (v24 >> 10) & 0x1F;
    int v26 = (v24 >> 6) & 0xF;
    unsigned int v27 = v25 - 12;
    unsigned int v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC) {
      unsigned int v28 = (v24 >> 6) & 0xF;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v25 | v26)
    {
      unsigned int v25 = v27;
      int v26 = v28;
    }
    long long v30 = *a2;
    int v29 = a2[1];
    int v33 = 1;
    uint64_t v34 = 0;
    uint64_t v35 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v33);
    if (v32 >= 0x41 && v31) {
      MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
    }
  }
  if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v38);
  }
  else if ((*(_DWORD *)(v37 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v38) {
      MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
    }
  }
}

void sub_1CBB69BF4(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  sub_1CC73C210(*(_DWORD *)(*(void *)(a3 + 32) + 4), *(void *)(*(void *)(*(void *)(a3 + 24) + 32) + 40), (uint64_t)&v9);
  if ((_BYTE)v11)
  {
    if (v10 > 0x40)
    {
      if (v9) {
        MEMORY[0x1D25D9CB0](v9, 0x1000C8000313F17);
      }
      unint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v5 = (v9 << -(char)v10 >> -(char)v10) & 0xFFFFFFFFFFFFFF00;
      uint64_t v6 = (v9 << -(char)v10 >> -(char)v10);
    }
    unint64_t v4 = v6 | v5;
  }
  else
  {
    unint64_t v4 = 0;
  }
  char v8 = *a2;
  uint64_t v7 = a2[1];
  LODWORD(v9) = 1;
  uint64_t v10 = 0;
  unint64_t v11 = v4;
  llvm::MachineInstr::addOperand(v7, v8, (const llvm::MachineOperand *)&v9);
}

void sub_1CBB69CAC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  int v9 = *(_DWORD *)(v8 + 4);
  uint64_t v10 = 32;
  if (**(_WORD **)(a2 + 16) == 116) {
    uint64_t v10 = 64;
  }
  unsigned int v11 = *(_DWORD *)(v8 + v10 + 4);
  uint64_t v12 = 96;
  if (**(_WORD **)(a2 + 16) != 116) {
    uint64_t v12 = 64;
  }
  unsigned int v13 = *(_DWORD *)(v8 + v12 + 4);
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v7 + 432)) {
    unint64_t v14 = *(void *)(*(void *)(v7 + 424) + 8 * (v9 & 0x7FFFFFFF));
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v78 = v14;
  sub_1CC73C210(v11, v7, (uint64_t)&v73);
  unsigned int v67 = v11;
  if (BYTE8(v74))
  {
    if (v74 > 0x40)
    {
      if (v73) {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
      }
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      unint64_t v17 = ((uint64_t)((void)v73 << -(char)v74) >> -(char)v74) & 0xFFFFFFFFFFFFFF00;
      uint64_t v18 = ((uint64_t)((void)v73 << -(char)v74) >> -(char)v74);
      uint64_t v15 = 1;
    }
    unint64_t v16 = v18 | v17;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
  }
  sub_1CC73C210(v13, v7, (uint64_t)&v73);
  unsigned int v68 = v13;
  if (BYTE8(v74))
  {
    if (v74 > 0x40)
    {
      if (v73) {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
      }
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v21 = ((uint64_t)((void)v73 << -(char)v74) >> -(char)v74) & 0xFFFFFFFFFFFFFF00;
      uint64_t v22 = ((uint64_t)((void)v73 << -(char)v74) >> -(char)v74);
      uint64_t v19 = 1;
    }
    unint64_t v20 = v22 | v21;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
  }
  unint64_t v71 = v20;
  if (v15) {
    BOOL v23 = v16 >= 0x100;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = !v23;
  if (v19) {
    BOOL v25 = v20 >= 0x100;
  }
  else {
    BOOL v25 = 1;
  }
  int v26 = !v25;
  uint64_t v27 = *(void *)(a2 + 24);
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  uint64_t v28 = *(void *)(v27 + 32);
  uint64_t v29 = *(void *)(v28 + 40);
  int v73 = &unk_1F261CD58;
  *(void *)&long long v74 = v28;
  *(void *)&long long v75 = v29;
  *((void *)&v74 + 1) = (*(uint64_t (**)(void))(**(void **)(v28 + 16) + 104))(*(void *)(v28 + 16));
  unint64_t v85 = 0;
  if (!*((void *)&v75 + 1)) {
    goto LABEL_32;
  }
  int v52 = **((unsigned char **)&v75 + 1);
  if ((v52 - 4) > 0x1E)
  {
    if ((v52 - 3) >= 0xFFFFFFFE) {
      uint64_t v61 = *((void *)&v75 + 1);
    }
    else {
      uint64_t v61 = 0;
    }
    if ((v52 - 3) > 0xFFFFFFFD)
    {
      unint64_t v54 = v61 + 8;
      goto LABEL_148;
    }
    if (v52 == 3) {
      *(void *)(*((void *)&v75 + 1) + 8) = 0;
    }
LABEL_32:
    *((void *)&v75 + 1) = 0;
    goto LABEL_33;
  }
  if ((*(unsigned char *)(*((void *)&v75 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v75 + 1) + 12)) {
    goto LABEL_32;
  }
  uint64_t v53 = *(void *)(*((void *)&v75 + 1) + 16);
  if ((v53 & 4) == 0) {
    goto LABEL_32;
  }
  unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
  if (!v54) {
    goto LABEL_32;
  }
LABEL_148:
  int v79 = (char *)&v75 + 8;
  sub_1CC5FA668(v54 + 16, &v79);
  *((void *)&v75 + 1) = v85;
  if (v85) {
    llvm::MetadataTracking::retrack((uint64_t)&v85, v85, (uint64_t)&v75 + 8);
  }
LABEL_33:
  *((void *)&v76 + 1) = a2;
  *(void *)&long long v77 = 0;
  *(void *)&long long v76 = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) == (long long *)((char *)&v75 + 8)) {
    goto LABEL_37;
  }
  if (*((void *)&v75 + 1))
  {
    int v55 = **((unsigned char **)&v75 + 1);
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = *((void *)&v75 + 1);
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v55 - 3) < 0xFFFFFFFE)
      {
        if (v55 == 3) {
          *(void *)(*((void *)&v75 + 1) + 8) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v57 = v62 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v75 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v75 + 1) + 12)) {
        goto LABEL_35;
      }
      uint64_t v56 = *(void *)(*((void *)&v75 + 1) + 16);
      if ((v56 & 4) == 0) {
        goto LABEL_35;
      }
      unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if (!v57) {
        goto LABEL_35;
      }
    }
    int v79 = (char *)&v75 + 8;
    sub_1CC5FA668(v57 + 16, &v79);
  }
LABEL_35:
  long long v30 = *(unsigned __int8 **)(a2 + 56);
  *((void *)&v75 + 1) = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v75 + 8, v30, 2);
  }
LABEL_37:
  if (a3 != 81 && a3 != 76
    || (!v16 ? (char v31 = v24) : (char v31 = 0), !v71 ? (v32 = v26) : (v32 = 0), (v31 & 1) == 0 && !v32))
  {
    unint64_t v85 = (unsigned __int8 *)v87;
    if (v24) {
      int v33 = 1;
    }
    else {
      int v33 = 2 * (v14 == 129);
    }
    v87[0] = 2 * (v14 == 129);
    v87[1] = v33;
    if (v26) {
      int v34 = 1;
    }
    else {
      int v34 = 2 * (v14 == 129);
    }
    v87[2] = v34;
    uint64_t v86 = 0x400000003;
    if (a3 == 81 || a3 == 76)
    {
      if (a5)
      {
        unsigned int v65 = *(_DWORD *)(*(void *)(a2 + 32) + 132);
        sub_1CC73C210(v65, v7, (uint64_t)&v79);
        if ((_BYTE)v81)
        {
          if (v80 > 0x40)
          {
            if (v79) {
              MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
            }
            unint64_t v44 = 0;
            uint64_t v45 = 0;
            uint64_t v35 = 0;
          }
          else
          {
            unint64_t v44 = ((uint64_t)((void)v79 << -(char)v80) >> -(char)v80) & 0xFFFFFFFFFFFFFF00;
            uint64_t v45 = ((uint64_t)((void)v79 << -(char)v80) >> -(char)v80);
            uint64_t v35 = 1;
          }
          int v37 = a4;
          unint64_t v36 = v45 | v44;
        }
        else
        {
          uint64_t v35 = 0;
          unint64_t v36 = 0;
          int v37 = a4;
        }
        unint64_t v64 = v36;
        BOOL v66 = v35 != 0 && v36 < 0x100;
        if (v66) {
          int v46 = 1;
        }
        else {
          int v46 = 2 * (v14 == 129);
        }
        if (v86 >= HIDWORD(v86)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)&v85[4 * v86] = v46;
        uint64_t v42 = (v86 + 1);
        LODWORD(v86) = v86 + 1;
        uint64_t v43 = v85;
        goto LABEL_80;
      }
      unint64_t v64 = 0;
      unsigned int v65 = 0;
      BOOL v66 = 0;
      uint64_t v42 = 4;
      v87[3] = 1;
      LODWORD(v86) = 4;
    }
    else
    {
      unint64_t v64 = 0;
      unsigned int v65 = 0;
      BOOL v66 = 0;
      uint64_t v42 = 3;
    }
    uint64_t v43 = (unsigned __int8 *)v87;
    int v37 = a4;
LABEL_80:
    unsigned int v47 = sub_1CBE0418C(a3, v42, v43);
    if (v37) {
      uint64_t v48 = 8;
    }
    else {
      uint64_t v48 = 0;
    }
    LODWORD(v83) = v9;
    int v84 = 1;
    uint64_t v49 = (llvm::MachineFunction *)sub_1CC739C54(&v73, v47, &v83, 1, 0, 0, 0);
    int v51 = v50;
    LODWORD(v79) = 1;
    uint64_t v80 = 0;
    unint64_t v81 = 0;
    llvm::MachineInstr::addOperand(v50, v49, (const llvm::MachineOperand *)&v79);
    if (v24)
    {
      LODWORD(v79) = 1;
      uint64_t v80 = 0;
      unint64_t v81 = v16;
    }
    else
    {
      uint64_t v80 = 0;
      unint64_t v81 = 0;
      LODWORD(v79) = 0;
      HIDWORD(v79) = v67;
      uint64_t v82 = 0;
      llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
      LODWORD(v79) = 1;
      uint64_t v80 = 0;
      unint64_t v81 = v48;
    }
    llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
    if (v26)
    {
      LODWORD(v79) = 1;
      uint64_t v80 = 0;
      unint64_t v81 = v71;
    }
    else
    {
      uint64_t v80 = 0;
      unint64_t v81 = 0;
      LODWORD(v79) = 0;
      HIDWORD(v79) = v68;
      uint64_t v82 = 0;
      llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
      LODWORD(v79) = 1;
      uint64_t v80 = 0;
      unint64_t v81 = v48;
    }
    llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
    if (a3 == 81 || a3 == 76)
    {
      if (a5)
      {
        if (v66)
        {
          LODWORD(v79) = 1;
          uint64_t v80 = 0;
          unint64_t v81 = v64;
        }
        else
        {
          uint64_t v80 = 0;
          unint64_t v81 = 0;
          LODWORD(v79) = 0;
          HIDWORD(v79) = v65;
          uint64_t v82 = 0;
          llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
          LODWORD(v79) = 1;
          uint64_t v80 = 0;
          unint64_t v81 = v48;
        }
      }
      else
      {
        LODWORD(v79) = 1;
        uint64_t v80 = 0;
        unint64_t v81 = 0;
      }
      llvm::MachineInstr::addOperand(v51, v49, (const llvm::MachineOperand *)&v79);
    }
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
    sub_1CC73B5D0(v51, *(void *)(a1 + 72), *(void **)(a1 + 80));
    if (v85 != (unsigned __int8 *)v87) {
      free(v85);
    }
    goto LABEL_130;
  }
  int v38 = *(_DWORD *)(*((void *)sub_1CBB6646C(a1, a2, v14, 0, 0) + 4) + 4);
  LODWORD(v85) = v9;
  LODWORD(v86) = 1;
  LODWORD(v79) = v38;
  LODWORD(v81) = 0;
  (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, char **, uint64_t, void))v73 + 4))(&v73, 19, &v85, 1, &v79, 1, 0);
  int v40 = sub_1CB8F1DC4(&v78);
  if (v39 == 1) {
  if (v40 <= 111)
  }
  {
    if (v40 <= 47)
    {
      uint64_t v41 = (__int16 ***)&off_1E66AF970;
      if (v40 != 1 && v40 != 16) {
        uint64_t v41 = &off_1E66AF580;
      }
    }
    else if (v40 > 79)
    {
      if (v40 == 80) {
        uint64_t v41 = (__int16 ***)&off_1E66AF698;
      }
      else {
        uint64_t v41 = (__int16 ***)&off_1E66AF6D0;
      }
    }
    else if (v40 == 48)
    {
      uint64_t v41 = (__int16 ***)&off_1E66AF628;
    }
    else
    {
      uint64_t v41 = (__int16 ***)&off_1E66AF9A8;
    }
  }
  else if (v40 > 223)
  {
    if (v40 > 287)
    {
      if (v40 == 288) {
        uint64_t v41 = (__int16 ***)&off_1E66AF890;
      }
      else {
        uint64_t v41 = (__int16 ***)&off_1E66AF8C8;
      }
    }
    else if (v40 == 224)
    {
      uint64_t v41 = (__int16 ***)&off_1E66AF820;
    }
    else
    {
      uint64_t v41 = (__int16 ***)&off_1E66AF858;
    }
  }
  else if (v40 > 159)
  {
    if (v40 == 160) {
      uint64_t v41 = (__int16 ***)&off_1E66AF7B0;
    }
    else {
      uint64_t v41 = (__int16 ***)&off_1E66AF7E8;
    }
  }
  else if (v40 == 112)
  {
    uint64_t v41 = (__int16 ***)&off_1E66AF740;
  }
  else
  {
    uint64_t v41 = (__int16 ***)&off_1E66AF778;
  }
  *(void *)(*(void *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF)) = v41;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_130:
  int v73 = &unk_1F261CD58;
  if (*((void *)&v75 + 1))
  {
    int v58 = **((unsigned char **)&v75 + 1);
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = *((void *)&v75 + 1);
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v58 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v60 = v59 + 8;
LABEL_140:
        int v79 = (char *)&v75 + 8;
        sub_1CC5FA668(v60 + 16, &v79);
        return;
      }
      if (v58 == 3) {
        *(void *)(*((void *)&v75 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v75 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v75 + 1) + 12))
    {
      uint64_t v63 = *(void *)(*((void *)&v75 + 1) + 16);
      if ((v63 & 4) != 0)
      {
        unint64_t v60 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (v60) {
          goto LABEL_140;
        }
      }
    }
  }
}

uint64_t sub_1CBB6A63C(char a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a1) {
    goto LABEL_27;
  }
  uint64_t v5 = *(unsigned int *)(a3 + 32 * a4 + 4);
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (v7)
  {
    if (*(unsigned char *)(v7 + 3))
    {
LABEL_6:
      uint64_t v7 = *(void *)(v7 + 8);
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(v7 + 24);
    if (v7)
    {
      if (*(unsigned char *)(v7 + 3)) {
        goto LABEL_6;
      }
      uint64_t v7 = 0;
    }
  }
LABEL_7:
  if ((v5 & 0x80000000) != 0) {
    uint64_t v8 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v5);
  }
  uint64_t v9 = *v8;
  if (v9)
  {
    if (*(unsigned char *)(v9 + 3) & 1) != 0 || (uint64_t v9 = *(void *)(v9 + 24)) != 0 && (*(unsigned char *)(v9 + 3))
    {
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10)
      {
        if (**(_WORD **)(v10 + 16) == 178 && *(_DWORD *)(v10 + 40) == 2)
        {
          uint64_t v11 = *(unsigned int *)(*(void *)(v10 + 32) + 36);
          if ((v11 & 0x80000000) != 0) {
            uint64_t v12 = (uint64_t *)(*(void *)(a5 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v12 = (uint64_t *)(*(void *)(a5 + 272) + 8 * v11);
          }
          uint64_t v7 = *v12;
          if (!v7) {
            goto LABEL_19;
          }
          if ((*(unsigned char *)(v7 + 3) & 1) == 0)
          {
            uint64_t v7 = *(void *)(v7 + 24);
            if (!v7) {
              goto LABEL_19;
            }
            if ((*(unsigned char *)(v7 + 3) & 1) == 0)
            {
              uint64_t v7 = 0;
              goto LABEL_19;
            }
          }
          uint64_t v7 = *(void *)(v7 + 8);
LABEL_19:
          int v13 = v7 != 0;
          goto LABEL_26;
        }
      }
    }
  }
  int v13 = 0;
LABEL_26:
  if (*(void *)(v7 + 24) == a2)
  {
    if (**(unsigned __int16 **)(v7 + 16) - 337 <= 1)
    {
      sub_1CC73C210(*(_DWORD *)(*(void *)(v7 + 32) + 68), a5, (uint64_t)&v16);
      int v14 = v18;
      if (!v18) {
        return v14 | (v13 << 8);
      }
      if (v17 < 0x41)
      {
        int v14 = 1;
        return v14 | (v13 << 8);
      }
      if (v16) {
        MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
      }
    }
    int v14 = 0;
    return v14 | (v13 << 8);
  }
LABEL_27:
  int v14 = 0;
  int v13 = 0;
  return v14 | (v13 << 8);
}

void sub_1CBB6A808(uint64_t *a1, llvm::MachineInstr *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, int a8)
{
  unsigned int v10 = *(_DWORD *)(*(void *)(a3 + 32) + 32 * a4 + 4);
  unsigned int v42 = v10;
  if ((v10 & 0x80000000) != 0 && (v10 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432)) {
    unint64_t v11 = *(void *)(*(void *)(a6 + 424) + 8 * (v10 & 0x7FFFFFFF));
  }
  else {
    unint64_t v11 = 0;
  }
  v56[0] = v11;
  uint64_t v12 = *(void *)(a3 + 24);
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v13 = *(void *)(v12 + 32);
  unint64_t v14 = *(void *)(v13 + 40);
  int v51 = &unk_1F261CD58;
  *(void *)&long long v52 = v13;
  long long v53 = v14;
  *((void *)&v52 + 1) = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 104))(*(void *)(v13 + 16));
  v56[1] = 0;
  *((void *)&v54 + 1) = a3;
  *(void *)&long long v55 = 0;
  *(void *)&long long v54 = *(void *)(a3 + 24);
  if ((long long *)(a3 + 56) != (long long *)((char *)&v53 + 8))
  {
    uint64_t v15 = *(unsigned __int8 **)(a3 + 56);
    *((void *)&v53 + 1) = v15;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v53 + 8, v15, 2);
    }
  }
  int v16 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a6, "", 0);
  uint64_t v18 = 0;
  uint64_t v19 = v16 & 0x7FFFFFFF;
  unsigned int v20 = IncompleteVirtualRegister;
  unint64_t v21 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a6 + 24) + 16 * v21) = *(void *)(*(void *)(a6 + 24) + 16 * v19);
  unint64_t v22 = *(unsigned int *)(a6 + 432);
  if (v16 < 0 && v19 < v22) {
    uint64_t v18 = *(void *)(*(void *)(a6 + 424) + 8 * v19);
  }
  if (v21 >= v22)
  {
    uint64_t v23 = *(void *)(a6 + 440);
    uint64_t v24 = v21 + 1 - v22;
    if (v21 >= *(unsigned int *)(a6 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v25 = *(_DWORD *)(a6 + 432);
    if (v24)
    {
      int v26 = (void *)(*(void *)(a6 + 424) + 8 * *(unsigned int *)(a6 + 432));
      uint64_t v27 = ~v21 + v22;
      do
        *v26++ = v23;
      while (!__CFADD__(v27++, 1));
      int v25 = *(_DWORD *)(a6 + 432);
    }
    *(_DWORD *)(a6 + 432) = v25 + v24;
  }
  *(void *)(*(void *)(a6 + 424) + 8 * v21) = v18;
  uint64_t v29 = *(void *)(a6 + 8);
  if (v29) {
    (*(void (**)(uint64_t, void))(*(void *)v29 + 24))(v29, IncompleteVirtualRegister);
  }
  LODWORD(v49) = IncompleteVirtualRegister;
  int v50 = 1;
  sub_1CC7374CC((uint64_t)&v51, &v49, 1.0);
  char v31 = v30;
  if (*(void *)(*(void *)(a6 + 24) + 16 * v21) < 8uLL || (*(void *)(*(void *)(a6 + 24) + 16 * v21) & 4) != 0)
  {
    int v34 = sub_1CB8F1DC4(v56);
    if (v33 == 1) {
    if (v34 <= 111)
    }
    {
      if (v34 <= 47)
      {
        uint64_t v35 = (__int16 ***)&off_1E66AF970;
        if (v34 != 1 && v34 != 16) {
          uint64_t v35 = &off_1E66AF580;
        }
      }
      else if (v34 > 79)
      {
        if (v34 == 80) {
          uint64_t v35 = (__int16 ***)&off_1E66AF698;
        }
        else {
          uint64_t v35 = (__int16 ***)&off_1E66AF6D0;
        }
      }
      else if (v34 == 48)
      {
        uint64_t v35 = (__int16 ***)&off_1E66AF628;
      }
      else
      {
        uint64_t v35 = (__int16 ***)&off_1E66AF9A8;
      }
    }
    else if (v34 > 223)
    {
      if (v34 > 287)
      {
        if (v34 == 288) {
          uint64_t v35 = (__int16 ***)&off_1E66AF890;
        }
        else {
          uint64_t v35 = (__int16 ***)&off_1E66AF8C8;
        }
      }
      else if (v34 == 224)
      {
        uint64_t v35 = (__int16 ***)&off_1E66AF820;
      }
      else
      {
        uint64_t v35 = (__int16 ***)&off_1E66AF858;
      }
    }
    else if (v34 > 159)
    {
      if (v34 == 160) {
        uint64_t v35 = (__int16 ***)&off_1E66AF7B0;
      }
      else {
        uint64_t v35 = (__int16 ***)&off_1E66AF7E8;
      }
    }
    else if (v34 == 112)
    {
      uint64_t v35 = (__int16 ***)&off_1E66AF740;
    }
    else
    {
      uint64_t v35 = (__int16 ***)&off_1E66AF778;
    }
    unint64_t v36 = (void *)(*(void *)(a6 + 24) + 16 * v21);
    unint64_t v37 = *v36 & 0xFFFFFFFFFFFFFFF8;
    if ((*v36 & 4) != 0)
    {
      if (!v37
        || ((*(void *)(*(void *)(v37 + 24) + (((unint64_t)*((unsigned __int16 *)*v35 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v35 + 12)) & 1) != 0)
      {
        *unint64_t v36 = v35;
      }
    }
    else
    {
      sub_1CC38D61C((void *)a6, v20, v37, (uint64_t)v35, 0);
    }
  }
  *(void *)(a3 + 16) = *(void *)(a1[9] + 8) + 7968;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)a3, *(llvm::MachineFunction **)(*(void *)(a3 + 24) + 32), (const llvm::MachineOperand *)(*(void *)(a3 + 32) + 32 * a5));
  if (a4 == 2)
  {
    llvm::MachineOperand::setReg(*(void *)(a3 + 32) + 32, v42);
    *(_DWORD *)(*(void *)(a3 + 32) + 32) = *(_DWORD *)(*(void *)(a3 + 32) + 32) & 0xFBFFFFFF | (((*(_DWORD *)(*(void *)(a3 + 32) + 64) >> 26) & ~HIBYTE(*(_DWORD *)(*(void *)(a3 + 32) + 64)) & 1) << 26);
  }
  llvm::MachineOperand::setReg(*(void *)(a3 + 32) + 64, v20);
  *(_DWORD *)(*(void *)(a3 + 32) + 64) &= ~0x4000000u;
  sub_1CBB6AE7C(a1, a2, a3, 1u, 2u, a6, a7, a8);
  llvm::MachineInstr::eraseFromParent(v31);
  int v51 = &unk_1F261CD58;
  if (*((void *)&v53 + 1))
  {
    int v38 = **((unsigned char **)&v53 + 1);
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        uint64_t v39 = *((void *)&v53 + 1);
      }
      else {
        uint64_t v39 = 0;
      }
      if ((v38 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = v39 + 8;
LABEL_71:
        unint64_t v49 = (unint64_t)&v53 + 8;
        sub_1CC5FA668(v40 + 16, &v49);
        return;
      }
      if (v38 == 3) {
        *(void *)(*((void *)&v53 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v53 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v53 + 1) + 12))
    {
      uint64_t v41 = *(void *)(*((void *)&v53 + 1) + 16);
      if ((v41 & 4) != 0)
      {
        unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_71;
        }
      }
    }
  }
}

void sub_1CBB6AE7C(uint64_t *a1, llvm::MachineInstr *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, int a8)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a3 + 32);
  uint64_t v13 = *(unsigned int *)(v12 + 32 * a4 + 4);
  if ((v13 & 0x80000000) != 0) {
    unint64_t v14 = (uint64_t *)(*(void *)(a6 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v14 = (uint64_t *)(*(void *)(a6 + 272) + 8 * v13);
  }
  uint64_t v15 = *v14;
  if (v15 && ((*(unsigned char *)(v15 + 3) & 1) != 0 || (uint64_t v15 = *(void *)(v15 + 24)) != 0 && (*(unsigned char *)(v15 + 3) & 1) != 0)) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  if (a8)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(v16 + 32) + 36);
    if ((v17 & 0x80000000) != 0) {
      uint64_t v18 = (uint64_t *)(*(void *)(a6 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v18 = (uint64_t *)(*(void *)(a6 + 272) + 8 * v17);
    }
    uint64_t v19 = *v18;
    if (!v19)
    {
LABEL_234:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (*(unsigned char *)(v19 + 3))
    {
LABEL_11:
      uint64_t v16 = *(void *)(v19 + 8);
      goto LABEL_12;
    }
    uint64_t v19 = *(void *)(v19 + 24);
    if (v19)
    {
      if (*(unsigned char *)(v19 + 3)) {
        goto LABEL_11;
      }
      goto LABEL_234;
    }
    uint64_t v16 = 0;
  }
LABEL_12:
  int v20 = **(unsigned __int16 **)(v16 + 16);
  unint64_t v21 = (long long *)(v12 + 32 * a5);
  long long v22 = v21[1];
  long long v150 = *v21;
  long long v151 = v22;
  if ((DWORD1(v150) & 0x80000000) != 0)
  {
    uint64_t v23 = DWORD1(v150) & 0x7FFFFFFF;
    if (v23 < *(_DWORD *)(a6 + 432) && *(void *)(*(void *)(a6 + 424) + 8 * v23) == 257)
    {
      uint64_t v24 = *(void *)(*(void *)(a6 + 24) + 16 * v23 + 8);
      if (v24)
      {
        uint64_t v25 = v24;
        if (*(_DWORD *)v24 & 0x1000000) != 0 || (uint64_t v25 = *(void *)(v24 + 24)) != 0 && (*(unsigned char *)(v25 + 3))
        {
          uint64_t v26 = *(void *)(v25 + 8);
          if (v26)
          {
            if (**(_WORD **)(v26 + 16) == 178
              && *(_DWORD *)(v26 + 40) == 2
              && ((*(_DWORD *)v24 & 0x1000000) != 0
               || (uint64_t v24 = *(void *)(v24 + 24)) != 0 && (*(unsigned char *)(v24 + 3) & 1) != 0))
            {
              uint64_t v27 = *(void *)(v24 + 8);
              if (v27)
              {
                uint64_t v28 = *(void *)(v27 + 32);
                long long v29 = *(_OWORD *)(v28 + 48);
                long long v150 = *(_OWORD *)(v28 + 32);
                long long v151 = v29;
              }
            }
          }
        }
      }
    }
  }
  long long v30 = *(_OWORD *)(v12 + 112);
  long long v148 = *(_OWORD *)(v12 + 96);
  long long v149 = v30;
  if ((DWORD1(v148) & 0x80000000) != 0)
  {
    uint64_t v31 = DWORD1(v148) & 0x7FFFFFFF;
    if (v31 < *(_DWORD *)(a6 + 432) && *(void *)(*(void *)(a6 + 424) + 8 * v31) == 257)
    {
      uint64_t v32 = *(void *)(*(void *)(a6 + 24) + 16 * v31 + 8);
      if (v32)
      {
        uint64_t v33 = v32;
        if (*(_DWORD *)v32 & 0x1000000) != 0 || (uint64_t v33 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v33 + 3))
        {
          uint64_t v34 = *(void *)(v33 + 8);
          if (v34)
          {
            if (**(_WORD **)(v34 + 16) == 178
              && *(_DWORD *)(v34 + 40) == 2
              && ((*(_DWORD *)v32 & 0x1000000) != 0
               || (uint64_t v32 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v32 + 3) & 1) != 0))
            {
              uint64_t v35 = *(void *)(v32 + 8);
              if (v35)
              {
                uint64_t v36 = *(void *)(v35 + 32);
                long long v37 = *(_OWORD *)(v36 + 48);
                long long v148 = *(_OWORD *)(v36 + 32);
                long long v149 = v37;
              }
            }
          }
        }
      }
    }
  }
  int v38 = *(_OWORD **)(v16 + 32);
  long long v39 = v38[3];
  long long v146 = v38[2];
  long long v147 = v39;
  long long v40 = v38[5];
  long long v144 = v38[4];
  long long v145 = v40;
  sub_1CC73C210(DWORD1(v144), a6, (uint64_t)&v135);
  if (BYTE8(v136))
  {
    if (v136 > 0x40)
    {
      if (v135) {
        MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
      }
      unint64_t v42 = 0;
      uint64_t v43 = 0;
    }
    else
    {
      unint64_t v42 = ((uint64_t)((void)v135 << -(char)v136) >> -(char)v136) & 0xFFFFFFFFFFFFFF00;
      uint64_t v43 = ((uint64_t)((void)v135 << -(char)v136) >> -(char)v136);
    }
    uint64_t v41 = v43 | v42;
  }
  else
  {
    uint64_t v41 = 0;
  }
  uint64_t v44 = *(void *)(v16 + 32);
  long long v45 = *(_OWORD *)(v44 + 112);
  long long v142 = *(_OWORD *)(v44 + 96);
  long long v143 = v45;
  sub_1CC73C210(*(_DWORD *)(v44 + 132), a6, (uint64_t)&v135);
  if (!BYTE8(v136))
  {
    LOBYTE(v46) = 0;
    uint64_t v47 = *((void *)a2 + 4);
LABEL_41:
    int v115 = *(_DWORD *)(v47 + 4);
    goto LABEL_105;
  }
  if (v136 >= 0x41)
  {
    if (v135) {
      MEMORY[0x1D25D9CB0](v135, 0x1000C8000313F17);
    }
    LOBYTE(v46) = 0;
    uint64_t v47 = *((void *)a2 + 4);
    goto LABEL_41;
  }
  uint64_t v46 = (uint64_t)((void)v135 << -(uint64_t)v136) >> -(uint64_t)v136;
  int v115 = *(_DWORD *)(*((void *)a2 + 4) + 4);
  if (v46 == 5)
  {
    uint64_t v48 = *(void *)(v16 + 24);
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    long long v136 = 0u;
    uint64_t v49 = *(void *)(v48 + 32);
    uint64_t v135 = &unk_1F261CD58;
    *(void *)&long long v136 = v49;
    *(void *)&long long v137 = *(void *)(v49 + 40);
    *((void *)&v136 + 1) = (*(uint64_t (**)(void))(**(void **)(v49 + 16) + 104))(*(void *)(v49 + 16));
    *(void *)&v161[0] = 0;
    if (!*((void *)&v137 + 1))
    {
LABEL_45:
      *((void *)&v137 + 1) = 0;
      goto LABEL_46;
    }
    int v60 = **((unsigned char **)&v137 + 1);
    if ((v60 - 4) > 0x1E)
    {
      if ((v60 - 3) >= 0xFFFFFFFE) {
        uint64_t v111 = *((void *)&v137 + 1);
      }
      else {
        uint64_t v111 = 0;
      }
      if ((v60 - 3) <= 0xFFFFFFFD)
      {
        if (v60 == 3) {
          *(void *)(*((void *)&v137 + 1) + 8) = 0;
        }
        goto LABEL_45;
      }
      unint64_t v62 = v111 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v137 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v137 + 1) + 12)) {
        goto LABEL_45;
      }
      uint64_t v61 = *(void *)(*((void *)&v137 + 1) + 16);
      if ((v61 & 4) == 0) {
        goto LABEL_45;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFF8;
      if (!v62) {
        goto LABEL_45;
      }
    }
    unint64_t v130 = (unint64_t)&v137 + 8;
    sub_1CC5FA668(v62 + 16, &v130);
    *((void *)&v137 + 1) = *(void *)&v161[0];
    if (*(void *)&v161[0]) {
      llvm::MetadataTracking::retrack((uint64_t)v161, *(unsigned __int8 **)&v161[0], (uint64_t)&v137 + 8);
    }
LABEL_46:
    *(void *)&long long v139 = 0;
    *((void *)&v138 + 1) = v16;
    *(void *)&long long v138 = *(void *)(v16 + 24);
    *((void *)&v138 + 1) = v16;
    if ((long long *)(v16 + 56) == (long long *)((char *)&v137 + 8)) {
      goto LABEL_50;
    }
    if (!*((void *)&v137 + 1))
    {
LABEL_48:
      int v50 = *(unsigned __int8 **)(v16 + 56);
      *((void *)&v137 + 1) = v50;
      if (v50) {
        llvm::MetadataTracking::track((uint64_t)&v137 + 8, v50, 2);
      }
LABEL_50:
      int v51 = DWORD1(v146);
      if ((DWORD1(v146) & 0x80000000) != 0 && (DWORD1(v146) & 0x7FFFFFFFu) < *(_DWORD *)(a6 + 432)) {
        unint64_t v52 = *(void *)(*(void *)(a6 + 424) + 8 * (DWORD1(v146) & 0x7FFFFFFF));
      }
      else {
        unint64_t v52 = 0;
      }
      unint64_t v130 = v52;
      int v54 = sub_1CB8F1DC4(&v130);
      if (v53 == 1) {
      switch(v20)
      }
      {
        case 338:
          BOOL v55 = v54 == 16;
          int v56 = 6949;
          int v57 = 6955;
          break;
        case 339:
          BOOL v55 = v54 == 16;
          int v56 = 6937;
          int v57 = 6943;
          break;
        case 340:
          BOOL v55 = v54 == 16;
          int v56 = 6961;
          int v57 = 6967;
          break;
        default:
          BOOL v55 = v54 == 16;
          int v56 = 6925;
          int v57 = 6931;
          break;
      }
      if (v55) {
        unsigned int v58 = v57;
      }
      else {
        unsigned int v58 = v56;
      }
      if (v54 <= 111)
      {
        if (v54 <= 47)
        {
          uint64_t v59 = (__int16 ***)&off_1E66AF970;
          if (v54 != 1 && v54 != 16) {
            uint64_t v59 = &off_1E66AF580;
          }
        }
        else if (v54 > 79)
        {
          if (v54 == 80) {
            uint64_t v59 = (__int16 ***)&off_1E66AF698;
          }
          else {
            uint64_t v59 = (__int16 ***)&off_1E66AF6D0;
          }
        }
        else if (v54 == 48)
        {
          uint64_t v59 = (__int16 ***)&off_1E66AF628;
        }
        else
        {
          uint64_t v59 = (__int16 ***)&off_1E66AF9A8;
        }
      }
      else if (v54 > 223)
      {
        if (v54 > 287)
        {
          if (v54 == 288) {
            uint64_t v59 = (__int16 ***)&off_1E66AF890;
          }
          else {
            uint64_t v59 = (__int16 ***)&off_1E66AF8C8;
          }
        }
        else if (v54 == 224)
        {
          uint64_t v59 = (__int16 ***)&off_1E66AF820;
        }
        else
        {
          uint64_t v59 = (__int16 ***)&off_1E66AF858;
        }
      }
      else if (v54 > 159)
      {
        if (v54 == 160) {
          uint64_t v59 = (__int16 ***)&off_1E66AF7B0;
        }
        else {
          uint64_t v59 = (__int16 ***)&off_1E66AF7E8;
        }
      }
      else if (v54 == 112)
      {
        uint64_t v59 = (__int16 ***)&off_1E66AF740;
      }
      else
      {
        uint64_t v59 = (__int16 ***)&off_1E66AF778;
      }
      *(void *)&v161[0] = v59;
      DWORD2(v161[0]) = 2;
      uint64_t v63 = (llvm::MachineFunction *)sub_1CC739C54(&v135, v58, (unint64_t *)v161, 1, 0, 0, 0);
      unsigned int v65 = v64;
      LODWORD(v130) = 1;
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      llvm::MachineInstr::addOperand(v64, v63, (const llvm::MachineOperand *)&v130);
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      HIDWORD(v130) = v51;
      LODWORD(v130) = 0;
      uint64_t v133 = 0;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      LODWORD(v130) = 1;
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      HIDWORD(v130) = DWORD1(v142);
      LODWORD(v130) = 0;
      uint64_t v133 = 0;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      LODWORD(v130) = 1;
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      LODWORD(v130) = 1;
      uint64_t v131 = 0;
      uint64_t v132 = 16;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      LODWORD(v130) = 1;
      uint64_t v131 = 0;
      uint64_t v132 = 5;
      llvm::MachineInstr::addOperand(v65, v63, (const llvm::MachineOperand *)&v130);
      sub_1CC73B5D0(v65, a1[9], (void *)a1[10]);
      BOOL v66 = (long long *)*((void *)v65 + 4);
      long long v67 = *v66;
      if (v41 < 16)
      {
        long long v143 = v66[1];
        long long v142 = v67;
      }
      else
      {
        long long v147 = v66[1];
        long long v146 = v67;
        unint64_t v130 = 129;
        LODWORD(v131) = 0;
        unsigned int v68 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v136, (llvm::LLVMContext *)0x10);
        char v69 = llvm::ConstantInt::get(v68, v41 - 16, (const llvm::APInt *)1);
        (*((void (**)(void **, unint64_t *, void *))v135 + 2))(&v135, &v130, v69);
        unint64_t v71 = *(long long **)(v70 + 32);
        long long v72 = v71[1];
        long long v144 = *v71;
        long long v145 = v72;
      }
      uint64_t v135 = &unk_1F261CD58;
      if (!*((void *)&v137 + 1)) {
        goto LABEL_104;
      }
      int v73 = **((unsigned char **)&v137 + 1);
      if ((v73 - 4) > 0x1E)
      {
        if ((v73 - 3) >= 0xFFFFFFFE) {
          uint64_t v104 = *((void *)&v137 + 1);
        }
        else {
          uint64_t v104 = 0;
        }
        if ((v73 - 3) < 0xFFFFFFFE)
        {
          if (v73 == 3) {
            *(void *)(*((void *)&v137 + 1) + 8) = 0;
          }
          goto LABEL_104;
        }
        unint64_t v105 = v104 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v137 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v137 + 1) + 12)) {
          goto LABEL_104;
        }
        uint64_t v114 = *(void *)(*((void *)&v137 + 1) + 16);
        if ((v114 & 4) == 0) {
          goto LABEL_104;
        }
        unint64_t v105 = v114 & 0xFFFFFFFFFFFFFFF8;
        if (!v105) {
          goto LABEL_104;
        }
      }
      unint64_t v130 = (unint64_t)&v137 + 8;
      sub_1CC5FA668(v105 + 16, &v130);
LABEL_104:
      LOBYTE(v46) = 4;
      goto LABEL_105;
    }
    int v108 = **((unsigned char **)&v137 + 1);
    if ((v108 - 4) > 0x1E)
    {
      if ((v108 - 3) >= 0xFFFFFFFE) {
        uint64_t v112 = *((void *)&v137 + 1);
      }
      else {
        uint64_t v112 = 0;
      }
      if ((v108 - 3) < 0xFFFFFFFE)
      {
        if (v108 == 3) {
          *(void *)(*((void *)&v137 + 1) + 8) = 0;
        }
        goto LABEL_48;
      }
      unint64_t v110 = v112 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v137 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v137 + 1) + 12)) {
        goto LABEL_48;
      }
      uint64_t v109 = *(void *)(*((void *)&v137 + 1) + 16);
      if ((v109 & 4) == 0) {
        goto LABEL_48;
      }
      unint64_t v110 = v109 & 0xFFFFFFFFFFFFFFF8;
      if (!v110) {
        goto LABEL_48;
      }
    }
    unint64_t v130 = (unint64_t)&v137 + 8;
    sub_1CC5FA668(v110 + 16, &v130);
    goto LABEL_48;
  }
LABEL_105:
  sub_1CBB633EC((uint64_t)&v135, a6, a1[10], a1[11], (unsigned __int8 *)&v146, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)&v130, a6, a1[10], a1[11], (unsigned __int8 *)&v142, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v161, a6, a1[10], a1[11], (unsigned __int8 *)&v144, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v127, a6, a1[10], a1[11], (unsigned __int8 *)&v150, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v124, a6, a1[10], a1[11], (unsigned __int8 *)&v148, 0, 0, 0, 1u);
  long long v74 = 0;
  int v75 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
  if (v75 < 0)
  {
    if ((v75 & 0x7FFFFFFFu) >= *(_DWORD *)(a6 + 432)) {
      long long v74 = 0;
    }
    else {
      long long v74 = *(void **)(*(void *)(a6 + 424) + 8 * (v75 & 0x7FFFFFFF));
    }
  }
  unsigned int v119 = v74;
  int v77 = sub_1CB8F1DC4((unint64_t *)&v119);
  if (v76 == 1) {
  if (v20 == 338)
  }
    unsigned int v78 = 37;
  else {
    unsigned int v78 = 36;
  }
  if (v20 == 338) {
    unsigned int v79 = 27;
  }
  else {
    unsigned int v79 = 26;
  }
  if (v162 > 3) {
    int v80 = 1;
  }
  else {
    int v80 = 2;
  }
  int v81 = 2 * (v129 == 16);
  if (v128 == 5) {
    int v81 = 9;
  }
  if (v125 == 5) {
    int v82 = 9;
  }
  else {
    int v82 = 2 * (v126 == 16);
  }
  uint64_t v157 = v160;
  if (v77 == 16) {
    uint64_t v83 = v79;
  }
  else {
    uint64_t v83 = v78;
  }
  v160[0] = 2 * (v77 == 16);
  v160[1] = v80;
  v160[2] = v81;
  v160[3] = v82;
  v160[4] = 2 * (v141 == 16);
  if (v77 == 16) {
    uint64_t v84 = 4;
  }
  else {
    uint64_t v84 = 5;
  }
  int v159 = 5;
  int v158 = v84;
  unsigned int v85 = sub_1CBE0418C(v83, v84, v160);
  uint64_t v86 = *(void *)(a3 + 24);
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  uint64_t v87 = *(void *)(v86 + 32);
  uint64_t v88 = *(void *)(v87 + 40);
  unsigned int v119 = &unk_1F261CD58;
  *(void *)&long long v120 = v87;
  *(void *)&long long v121 = v88;
  *((void *)&v120 + 1) = (*(uint64_t (**)(void))(**(void **)(v87 + 16) + 104))(*(void *)(v87 + 16));
  unsigned int v154 = 0;
  if (!*((void *)&v121 + 1)) {
    goto LABEL_132;
  }
  int v98 = **((unsigned char **)&v121 + 1);
  if ((v98 - 4) > 0x1E)
  {
    if ((v98 - 3) >= 0xFFFFFFFE) {
      uint64_t v106 = *((void *)&v121 + 1);
    }
    else {
      uint64_t v106 = 0;
    }
    if ((v98 - 3) > 0xFFFFFFFD)
    {
      unint64_t v100 = v106 + 8;
      goto LABEL_183;
    }
    if (v98 == 3) {
      *(void *)(*((void *)&v121 + 1) + 8) = 0;
    }
LABEL_132:
    *((void *)&v121 + 1) = 0;
    goto LABEL_133;
  }
  if ((*(unsigned char *)(*((void *)&v121 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v121 + 1) + 12)) {
    goto LABEL_132;
  }
  uint64_t v99 = *(void *)(*((void *)&v121 + 1) + 16);
  if ((v99 & 4) == 0) {
    goto LABEL_132;
  }
  unint64_t v100 = v99 & 0xFFFFFFFFFFFFFFF8;
  if (!v100) {
    goto LABEL_132;
  }
LABEL_183:
  *(void *)&long long v152 = (char *)&v121 + 8;
  sub_1CC5FA668(v100 + 16, &v152);
  *((void *)&v121 + 1) = v154;
  if (v154) {
    llvm::MetadataTracking::retrack((uint64_t)&v154, (unsigned __int8 *)v154, (uint64_t)&v121 + 8);
  }
LABEL_133:
  *((void *)&v122 + 1) = a3;
  *(void *)&long long v123 = 0;
  *(void *)&long long v122 = *(void *)(a3 + 24);
  if ((long long *)(a3 + 56) == (long long *)((char *)&v121 + 8)) {
    goto LABEL_137;
  }
  if (*((void *)&v121 + 1))
  {
    int v101 = **((unsigned char **)&v121 + 1);
    if ((v101 - 4) > 0x1E)
    {
      if ((v101 - 3) >= 0xFFFFFFFE) {
        uint64_t v107 = *((void *)&v121 + 1);
      }
      else {
        uint64_t v107 = 0;
      }
      if ((v101 - 3) < 0xFFFFFFFE)
      {
        if (v101 == 3) {
          *(void *)(*((void *)&v121 + 1) + 8) = 0;
        }
        goto LABEL_135;
      }
      unint64_t v103 = v107 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v121 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v121 + 1) + 12)) {
        goto LABEL_135;
      }
      uint64_t v102 = *(void *)(*((void *)&v121 + 1) + 16);
      if ((v102 & 4) == 0) {
        goto LABEL_135;
      }
      unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8;
      if (!v103) {
        goto LABEL_135;
      }
    }
    *(void *)&long long v152 = (char *)&v121 + 8;
    sub_1CC5FA668(v103 + 16, &v152);
  }
LABEL_135:
  int v89 = *(unsigned __int8 **)(a3 + 56);
  *((void *)&v121 + 1) = v89;
  if (v89) {
    llvm::MetadataTracking::track((uint64_t)&v121 + 8, v89, 2);
  }
LABEL_137:
  LODWORD(v154) = v115;
  LODWORD(v155) = 1;
  uint64_t v90 = (llvm::MachineFunction *)sub_1CC739C54(&v119, v85, (unint64_t *)&v154, 1, 0, 0, 0);
  uint64_t v92 = v91;
  LODWORD(v152) = 1;
  *(void *)&long long v153 = 0;
  *((void *)&v152 + 1) = 0;
  llvm::MachineInstr::addOperand(v91, v90, (const llvm::MachineOperand *)&v152);
  uint64_t v117 = v90;
  int v118 = v92;
  unsigned int v154 = &v117;
  uint64_t v155 = a6;
  unsigned int v156 = a1;
  if (v140 == 5) {
    int v93 = DWORD1(v146);
  }
  else {
    int v93 = HIDWORD(v135);
  }
  long long v153 = 0uLL;
  *((void *)&v152 + 1) = 0;
  DWORD1(v152) = v93;
  LODWORD(v152) = 0;
  llvm::MachineInstr::addOperand(v92, v90, (const llvm::MachineOperand *)&v152);
  LODWORD(v152) = 1;
  *(void *)&long long v153 = 0;
  *((void *)&v152 + 1) = 0;
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  if (v134 == 5) {
    int v94 = DWORD1(v142);
  }
  else {
    int v94 = HIDWORD(v130);
  }
  long long v153 = 0uLL;
  *((void *)&v152 + 1) = 0;
  DWORD1(v152) = v94;
  LODWORD(v152) = 0;
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  LODWORD(v152) = 1;
  *(void *)&long long v153 = 0;
  *((void *)&v152 + 1) = 0;
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  LODWORD(v152) = 1;
  *((void *)&v152 + 1) = 0;
  *(void *)&long long v153 = a7;
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  long long v152 = v161[0];
  long long v153 = v161[1];
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  if (v77 == 32)
  {
    LODWORD(v152) = 1;
    *(void *)&long long v153 = 0;
    *((void *)&v152 + 1) = 0;
    llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  }
  sub_1CBB75D80(&v154, (uint64_t)v127);
  sub_1CBB75D80(&v154, (uint64_t)v124);
  LODWORD(v152) = 1;
  *((void *)&v152 + 1) = 0;
  *(void *)&long long v153 = v46 & 7;
  llvm::MachineInstr::addOperand(v118, v117, (const llvm::MachineOperand *)&v152);
  llvm::MachineInstr::eraseFromParent(a2);
  sub_1CC73B5D0(v118, a1[9], (void *)a1[10]);
  unsigned int v119 = &unk_1F261CD58;
  if (*((void *)&v121 + 1))
  {
    int v95 = **((unsigned char **)&v121 + 1);
    if ((v95 - 4) > 0x1E)
    {
      if ((v95 - 3) >= 0xFFFFFFFE) {
        uint64_t v96 = *((void *)&v121 + 1);
      }
      else {
        uint64_t v96 = 0;
      }
      if ((v95 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v97 = v96 + 8;
LABEL_157:
        *(void *)&long long v152 = (char *)&v121 + 8;
        sub_1CC5FA668(v97 + 16, &v152);
        goto LABEL_149;
      }
      if (v95 == 3) {
        *(void *)(*((void *)&v121 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v121 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v121 + 1) + 12))
    {
      uint64_t v113 = *(void *)(*((void *)&v121 + 1) + 16);
      if ((v113 & 4) != 0)
      {
        unint64_t v97 = v113 & 0xFFFFFFFFFFFFFFF8;
        if (v97) {
          goto LABEL_157;
        }
      }
    }
  }
LABEL_149:
  if (v157 != v160) {
    free(v157);
  }
}

uint64_t sub_1CBB6BE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(v6 + 4);
  if (v7 < 0
    && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432)
    && *(void *)(*(void *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) == 513)
  {
    return 0;
  }
  unsigned int v125 = *(_DWORD *)(v6 + 36);
  unsigned int v8 = v125;
  int v9 = **(unsigned __int16 **)(a2 + 16);
  sub_1CC73C210(v125, a3, (uint64_t)&v126);
  if (BYTE8(v127))
  {
    if (v127 < 0x41)
    {
      uint64_t v13 = 0;
      BOOL v14 = 0;
      goto LABEL_14;
    }
    if (v126) {
      MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
    }
  }
  if ((v125 & 0x80000000) != 0) {
    unsigned int v10 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v10 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v125);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) == 121) {
    uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 48);
  }
  else {
    uint64_t v13 = 0;
  }
  BOOL v14 = v13 != 0;
LABEL_14:
  sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 68), a3, (uint64_t)&v126);
  if (BYTE8(v127))
  {
    if (v127 < 0x41)
    {
      if (v9 != 45 && v14) {
        goto LABEL_41;
      }
      uint64_t v15 = *(unsigned int *)(*(void *)(a2 + 32) + 68);
      goto LABEL_55;
    }
    if (v126) {
      MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
    }
  }
  uint64_t v15 = *(unsigned int *)(*(void *)(a2 + 32) + 68);
  if ((v15 & 0x80000000) != 0) {
    uint64_t v16 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v16 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v15);
  }
  uint64_t v17 = *v16;
  if ((*(unsigned char *)(v17 + 3) & 1) == 0) {
    uint64_t v17 = *(void *)(v17 + 24);
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (**(_WORD **)(v18 + 16) == 121) {
    uint64_t v19 = *(void *)(*(void *)(v18 + 32) + 48);
  }
  else {
    uint64_t v19 = 0;
  }
  BOOL v20 = v9 != 45 && v14;
  if (v20 || v19)
  {
    if (v19)
    {
      long long v22 = *(void **)(v19 + 32);
      unint64_t v21 = (llvm::detail::DoubleAPFloat *)(v19 + 32);
      if (v22 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v21, (llvm::APInt *)&v126);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v21, (uint64_t)&v126);
      }
      if (v127 >= 0x41) {
        uint64_t v23 = (uint64_t *)v126;
      }
      else {
        uint64_t v23 = &v126;
      }
      uint64_t v24 = *v23;
      if (v127 >= 0x41 && v126) {
        MEMORY[0x1D25D9CB0]();
      }
      int v25 = 1;
      goto LABEL_50;
    }
LABEL_41:
    uint64_t v28 = *(void **)(v13 + 32);
    uint64_t v27 = (llvm::detail::DoubleAPFloat *)(v13 + 32);
    if (v28 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v27, (llvm::APInt *)&v126);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v27, (uint64_t)&v126);
    }
    if (v127 >= 0x41) {
      long long v29 = (uint64_t *)v126;
    }
    else {
      long long v29 = &v126;
    }
    uint64_t v24 = *v29;
    if (v127 >= 0x41 && v126) {
      MEMORY[0x1D25D9CB0]();
    }
    int v25 = 0;
LABEL_50:
    if (v24 <= 255)
    {
      if (v7 < 0 && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432)) {
        unsigned int v30 = 2 * (*(void *)(*(void *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) != 257);
      }
      else {
        unsigned int v30 = 2;
      }
      if (v9 == 45) {
        uint64_t v51 = 67;
      }
      else {
        uint64_t v51 = 90;
      }
      if (v9 == 45) {
        int v52 = 0;
      }
      else {
        int v52 = v25;
      }
      if (v52 == 1)
      {
        LODWORD(v126) = v30;
        HIDWORD(v126) = v30;
        LODWORD(v127) = 1;
      }
      else
      {
        uint64_t v126 = v30 | 0x100000000;
        LODWORD(v127) = v30;
      }
      unsigned int v53 = sub_1CBE0418C(v51, 3, &v126);
      uint64_t v54 = *(void *)(a2 + 24);
      long long v130 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      uint64_t v55 = *(void *)(v54 + 32);
      uint64_t v56 = *(void *)(v55 + 40);
      uint64_t v126 = (uint64_t)&unk_1F261CD58;
      *(void *)&long long v127 = v55;
      *(void *)&long long v128 = v56;
      *((void *)&v127 + 1) = (*(uint64_t (**)(void))(**(void **)(v55 + 16) + 104))(*(void *)(v55 + 16));
      uint64_t v131 = 0;
      if (!*((void *)&v128 + 1)) {
        goto LABEL_112;
      }
      int v68 = **((unsigned char **)&v128 + 1);
      if ((v68 - 4) > 0x1E)
      {
        if ((v68 - 3) >= 0xFFFFFFFE) {
          uint64_t v74 = *((void *)&v128 + 1);
        }
        else {
          uint64_t v74 = 0;
        }
        if ((v68 - 3) <= 0xFFFFFFFD)
        {
          if (v68 == 3) {
            *(void *)(*((void *)&v128 + 1) + 8) = 0;
          }
          goto LABEL_112;
        }
        unint64_t v70 = v74 + 8;
      }
      else if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v128 + 1) + 12) {
             || (uint64_t v69 = *(void *)(*((void *)&v128 + 1) + 16), (v69 & 4) == 0)
      }
             || (unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
LABEL_112:
        *((void *)&v128 + 1) = 0;
        goto LABEL_113;
      }
      int v116 = (char *)&v128 + 8;
      sub_1CC5FA668(v70 + 16, &v116);
      *((void *)&v128 + 1) = v131;
      if (v131) {
        llvm::MetadataTracking::retrack((uint64_t)&v131, v131, (uint64_t)&v128 + 8);
      }
LABEL_113:
      *((void *)&v129 + 1) = a2;
      *(void *)&long long v130 = 0;
      *(void *)&long long v129 = *(void *)(a2 + 24);
      if ((long long *)(a2 + 56) == (long long *)((char *)&v128 + 8)) {
        goto LABEL_117;
      }
      if (!*((void *)&v128 + 1))
      {
LABEL_115:
        int v57 = *(unsigned __int8 **)(a2 + 56);
        *((void *)&v128 + 1) = v57;
        if (v57) {
          llvm::MetadataTracking::track((uint64_t)&v128 + 8, v57, 2);
        }
LABEL_117:
        LODWORD(v131) = v7;
        LODWORD(v132) = 1;
        unsigned int v58 = (llvm::MachineFunction *)sub_1CC739C54(&v126, v53, (unint64_t *)&v131, 1, 0, 0, 0);
        int v60 = v59;
        LODWORD(v116) = 1;
        uint64_t v117 = 0;
        unint64_t v118 = 0;
        llvm::MachineInstr::addOperand(v59, v58, (const llvm::MachineOperand *)&v116);
        if (v52)
        {
          uint64_t v117 = 0;
          unint64_t v118 = 0;
          LODWORD(v116) = 0;
          HIDWORD(v116) = v125;
          uint64_t v119 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
          LODWORD(v116) = 1;
          uint64_t v117 = 0;
          unint64_t v118 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
          LODWORD(v116) = 1;
          uint64_t v117 = 0;
          unint64_t v118 = v24;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
        }
        else
        {
          LODWORD(v116) = 1;
          uint64_t v117 = 0;
          unint64_t v118 = v24;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
          if (v9 == 45) {
            unsigned int v61 = v125;
          }
          else {
            unsigned int v61 = *(_DWORD *)(*(void *)(a2 + 32) + 68);
          }
          uint64_t v117 = 0;
          unint64_t v118 = 0;
          LODWORD(v116) = 0;
          HIDWORD(v116) = v61;
          uint64_t v119 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
          LODWORD(v116) = 1;
          uint64_t v117 = 0;
          unint64_t v118 = 0;
          llvm::MachineInstr::addOperand(v60, v58, (const llvm::MachineOperand *)&v116);
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        sub_1CC73B5D0(v60, *(void *)(a1 + 72), *(void **)(a1 + 80));
        uint64_t v126 = (uint64_t)&unk_1F261CD58;
        if (!*((void *)&v128 + 1)) {
          return 1;
        }
        int v62 = **((unsigned char **)&v128 + 1);
        if ((v62 - 4) > 0x1E)
        {
          if ((v62 - 3) >= 0xFFFFFFFE) {
            uint64_t v63 = *((void *)&v128 + 1);
          }
          else {
            uint64_t v63 = 0;
          }
          if ((v62 - 3) < 0xFFFFFFFE)
          {
            if (v62 == 3) {
              *(void *)(*((void *)&v128 + 1) + 8) = 0;
            }
            return 1;
          }
          unint64_t v64 = v63 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v128 + 1) + 12)) {
            return 1;
          }
          uint64_t v76 = *(void *)(*((void *)&v128 + 1) + 16);
          if ((v76 & 4) == 0) {
            return 1;
          }
          unint64_t v64 = v76 & 0xFFFFFFFFFFFFFFF8;
          if (!v64) {
            return 1;
          }
        }
        int v116 = (char *)&v128 + 8;
        sub_1CC5FA668(v64 + 16, &v116);
        return 1;
      }
      int v71 = **((unsigned char **)&v128 + 1);
      if ((v71 - 4) > 0x1E)
      {
        if ((v71 - 3) >= 0xFFFFFFFE) {
          uint64_t v75 = *((void *)&v128 + 1);
        }
        else {
          uint64_t v75 = 0;
        }
        if ((v71 - 3) < 0xFFFFFFFE)
        {
          if (v71 == 3) {
            *(void *)(*((void *)&v128 + 1) + 8) = 0;
          }
          goto LABEL_115;
        }
        unint64_t v73 = v75 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v128 + 1) + 12)) {
          goto LABEL_115;
        }
        uint64_t v72 = *(void *)(*((void *)&v128 + 1) + 16);
        if ((v72 & 4) == 0) {
          goto LABEL_115;
        }
        unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFF8;
        if (!v73) {
          goto LABEL_115;
        }
      }
      int v116 = (char *)&v128 + 8;
      sub_1CC5FA668(v73 + 16, &v116);
      goto LABEL_115;
    }
    return 0;
  }
LABEL_55:
  unsigned int v124 = 0;
  if ((v15 & 0x80000000) != 0) {
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v15);
  }
  uint64_t v32 = *v31;
  if (v32)
  {
    while ((*(unsigned char *)(v32 + 3) & 1) != 0)
    {
      uint64_t v32 = *(void *)(v32 + 24);
      if (!v32) {
        goto LABEL_60;
      }
    }
    uint64_t v40 = *(void *)(v32 + 8);
    if (**(unsigned __int16 **)(v40 + 16) - 45 > 1) {
      goto LABEL_78;
    }
    while (1)
    {
      uint64_t v32 = *(void *)(v32 + 24);
      if (!v32) {
        break;
      }
      if ((*(unsigned char *)(v32 + 3) & 1) == 0)
      {
        uint64_t v41 = *(void *)(v32 + 8);
        if (v41 != v40)
        {
          uint64_t v40 = *(void *)(v32 + 8);
          if (**(unsigned __int16 **)(v41 + 16) - 45 >= 2) {
            goto LABEL_78;
          }
        }
      }
    }
  }
LABEL_60:
  if ((v15 & 0x80000000) != 0) {
    uint64_t v33 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v33 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v15);
  }
  uint64_t v34 = *v33;
  if (v34)
  {
    if (*(unsigned char *)(v34 + 3) & 1) != 0 || (uint64_t v34 = *(void *)(v34 + 24)) != 0 && (*(unsigned char *)(v34 + 3))
    {
      uint64_t v35 = *(void *)(v34 + 8);
      if (v35)
      {
        if (**(_WORD **)(v35 + 16) == 127 && *(_DWORD *)(v35 + 40) == 3)
        {
          uint64_t v36 = *(void *)(v35 + 32);
          unsigned int v37 = *(_DWORD *)(v36 + 36);
          unsigned int v124 = v37;
          sub_1CC73C210(*(_DWORD *)(v36 + 68), a3, (uint64_t)&v126);
          if (BYTE8(v127))
          {
            if (v127 >= 0x41)
            {
              if (v126) {
                MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
              }
            }
            else
            {
              uint64_t v38 = v126 << -(uint64_t)v127 >> -(uint64_t)v127;
              if (v38 < 5)
              {
LABEL_70:
                char v115 = v38;
                if (v7 < 0 && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432)) {
                  int v39 = 2 * (*(void *)(*(void *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) != 257);
                }
                else {
                  int v39 = 2;
                }
                if ((v8 & 0x80000000) != 0) {
                  unsigned int v65 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v65 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v8);
                }
                uint64_t v66 = *v65;
                BOOL v113 = v66
                    && ((*(unsigned char *)(v66 + 3) & 1) != 0
                     || (uint64_t v66 = *(void *)(v66 + 24)) != 0 && (*(unsigned char *)(v66 + 3) & 1) != 0)
                    && (uint64_t v67 = *(void *)(v66 + 8)) != 0
                    && **(_WORD **)(v67 + 16) == 124
                    && *(_DWORD *)(v67 + 40) == 2;
                if ((v37 & 0x80000000) != 0) {
                  int v77 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v77 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v37);
                }
                uint64_t v78 = *v77;
                BOOL v114 = v78
                    && ((*(unsigned char *)(v78 + 3) & 1) != 0
                     || (uint64_t v78 = *(void *)(v78 + 24)) != 0 && (*(unsigned char *)(v78 + 3) & 1) != 0)
                    && (uint64_t v79 = *(void *)(v78 + 8)) != 0
                    && **(_WORD **)(v79 + 16) == 124
                    && *(_DWORD *)(v79 + 40) == 2;
                uint64_t v126 = (uint64_t)&v125;
                *(void *)&long long v127 = &v125;
                *((void *)&v127 + 1) = &v125;
                int v80 = v39;
                if (sub_1CBB76390((_DWORD **)&v126, *(void *)(a3 + 24), *(void *)(a3 + 272), v8))
                {
                  if ((v125 & 0x80000000) != 0 && (uint64_t v81 = v125 & 0x7FFFFFFF, v81 < *(_DWORD *)(a3 + 432))) {
                    int v80 = 2 * (*(void *)(*(void *)(a3 + 424) + 8 * v81) != 257);
                  }
                  else {
                    int v80 = 2;
                  }
                }
                uint64_t v126 = (uint64_t)&v124;
                *(void *)&long long v127 = &v124;
                *((void *)&v127 + 1) = &v124;
                int v82 = v39;
                if (sub_1CBB76390((_DWORD **)&v126, *(void *)(a3 + 24), *(void *)(a3 + 272), v124))
                {
                  if ((v124 & 0x80000000) != 0 && (uint64_t v83 = v124 & 0x7FFFFFFF, v83 < *(_DWORD *)(a3 + 432))) {
                    int v82 = 2 * (*(void *)(*(void *)(a3 + 424) + 8 * v83) != 257);
                  }
                  else {
                    int v82 = 2;
                  }
                }
                sub_1CC73C210(v125, a3, (uint64_t)&v121);
                if (v123)
                {
                  if (v122 > 0x40)
                  {
                    unint64_t v85 = *v121;
                    if ((*v121 & 0x8000000000000000) != 0) {
                      goto LABEL_222;
                    }
                  }
                  else
                  {
                    unint64_t v84 = (void)v121 << -(char)v122;
                    if ((v84 & 0x8000000000000000) != 0) {
                      goto LABEL_222;
                    }
                    unint64_t v85 = v84 >> (64 - v122);
                  }
                  if (v85 < 0x100) {
                    int v80 = 1;
                  }
                }
LABEL_222:
                if (v9 == 45) {
                  uint64_t v86 = 67;
                }
                else {
                  uint64_t v86 = 90;
                }
                uint64_t v126 = __PAIR64__(v80, v39);
                LODWORD(v127) = v82;
                unsigned int v87 = sub_1CBE0418C(v86, 3, &v126);
                uint64_t v88 = *(void *)(a2 + 24);
                long long v130 = 0u;
                long long v128 = 0u;
                long long v129 = 0u;
                long long v127 = 0u;
                uint64_t v89 = *(void *)(v88 + 32);
                uint64_t v90 = *(void *)(v89 + 40);
                uint64_t v126 = (uint64_t)&unk_1F261CD58;
                *(void *)&long long v127 = v89;
                *(void *)&long long v128 = v90;
                *((void *)&v127 + 1) = (*(uint64_t (**)(void))(**(void **)(v89 + 16) + 104))(*(void *)(v89 + 16));
                uint64_t v131 = 0;
                if (!*((void *)&v128 + 1)) {
                  goto LABEL_226;
                }
                int v104 = **((unsigned char **)&v128 + 1);
                if ((v104 - 4) > 0x1E)
                {
                  if ((v104 - 3) >= 0xFFFFFFFE) {
                    uint64_t v110 = *((void *)&v128 + 1);
                  }
                  else {
                    uint64_t v110 = 0;
                  }
                  if ((v104 - 3) <= 0xFFFFFFFD)
                  {
                    if (v104 == 3) {
                      *(void *)(*((void *)&v128 + 1) + 8) = 0;
                    }
                    goto LABEL_226;
                  }
                  unint64_t v106 = v110 + 8;
                }
                else if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2 {
                       && !*(_DWORD *)(*((void *)&v128 + 1) + 12)
                }
                       || (uint64_t v105 = *(void *)(*((void *)&v128 + 1) + 16), (v105 & 4) == 0)
                       || (unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8) == 0)
                {
LABEL_226:
                  *((void *)&v128 + 1) = 0;
                  goto LABEL_227;
                }
                int v116 = (char *)&v128 + 8;
                sub_1CC5FA668(v106 + 16, &v116);
                *((void *)&v128 + 1) = v131;
                if (v131) {
                  llvm::MetadataTracking::retrack((uint64_t)&v131, v131, (uint64_t)&v128 + 8);
                }
LABEL_227:
                *((void *)&v129 + 1) = a2;
                *(void *)&long long v130 = 0;
                *(void *)&long long v129 = *(void *)(a2 + 24);
                if ((long long *)(a2 + 56) == (long long *)((char *)&v128 + 8)) {
                  goto LABEL_231;
                }
                if (!*((void *)&v128 + 1))
                {
LABEL_229:
                  uint64_t v91 = *(unsigned __int8 **)(a2 + 56);
                  *((void *)&v128 + 1) = v91;
                  if (v91) {
                    llvm::MetadataTracking::track((uint64_t)&v128 + 8, v91, 2);
                  }
LABEL_231:
                  LODWORD(v131) = v7;
                  LODWORD(v132) = 1;
                  uint64_t v92 = (llvm::MachineFunction *)sub_1CC739C54(&v126, v87, (unint64_t *)&v131, 1, 0, 0, 0);
                  int v94 = v93;
                  LODWORD(v116) = 1;
                  uint64_t v117 = 0;
                  unint64_t v118 = 0;
                  llvm::MachineInstr::addOperand(v93, v92, (const llvm::MachineOperand *)&v116);
                  if (v80 == 1)
                  {
                    uint64_t v95 = a1;
                    BOOL v96 = v114;
                    if (v122 > 0x40) {
                      uint64_t v97 = *v121;
                    }
                    else {
                      uint64_t v97 = (uint64_t)((void)v121 << -(uint64_t)v122) >> -(uint64_t)v122;
                    }
                    LODWORD(v116) = 1;
                  }
                  else
                  {
                    sub_1CBB63F08((uint64_t)&v116, v125, a3);
                    uint64_t v95 = a1;
                    BOOL v96 = v114;
                    if (v120)
                    {
                      int v98 = (const llvm::MachineOperand *)&v116;
                    }
                    else
                    {
                      uint64_t v132 = 0;
                      uint64_t v133 = 0;
                      LODWORD(v131) = 0;
                      HIDWORD(v131) = v125;
                      uint64_t v134 = 0;
                      int v98 = (const llvm::MachineOperand *)&v131;
                    }
                    llvm::MachineInstr::addOperand(v94, v92, v98);
                    uint64_t v97 = 8;
                    LODWORD(v116) = 1;
                    if (!v113) {
                      uint64_t v97 = 0;
                    }
                  }
                  uint64_t v117 = 0;
                  unint64_t v118 = v97;
                  llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v116);
                  sub_1CBB63F08((uint64_t)&v116, v124, a3);
                  if (v120)
                  {
                    uint64_t v99 = (const llvm::MachineOperand *)&v116;
                  }
                  else
                  {
                    uint64_t v132 = 0;
                    uint64_t v133 = 0;
                    LODWORD(v131) = 0;
                    HIDWORD(v131) = v124;
                    uint64_t v134 = 0;
                    uint64_t v99 = (const llvm::MachineOperand *)&v131;
                  }
                  llvm::MachineInstr::addOperand(v94, v92, v99);
                  uint64_t v100 = 8;
                  if (!v96) {
                    uint64_t v100 = 0;
                  }
                  LODWORD(v116) = 1;
                  uint64_t v117 = 0;
                  unint64_t v118 = v100 & 0xFFFFFFFFFFFFF8FFLL | ((unint64_t)(v115 & 7) << 8);
                  llvm::MachineInstr::addOperand(v94, v92, (const llvm::MachineOperand *)&v116);
                  sub_1CC73B5D0(v94, *(void *)(v95 + 72), *(void **)(v95 + 80));
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                  uint64_t v126 = (uint64_t)&unk_1F261CD58;
                  if (!*((void *)&v128 + 1)) {
                    goto LABEL_250;
                  }
                  int v101 = **((unsigned char **)&v128 + 1);
                  if ((v101 - 4) > 0x1E)
                  {
                    if ((v101 - 3) >= 0xFFFFFFFE) {
                      uint64_t v102 = *((void *)&v128 + 1);
                    }
                    else {
                      uint64_t v102 = 0;
                    }
                    if ((v101 - 3) < 0xFFFFFFFE)
                    {
                      if (v101 == 3) {
                        *(void *)(*((void *)&v128 + 1) + 8) = 0;
                      }
                      goto LABEL_250;
                    }
                    unint64_t v103 = v102 + 8;
                  }
                  else if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2 {
                         && !*(_DWORD *)(*((void *)&v128 + 1) + 12)
                  }
                         || (uint64_t v112 = *(void *)(*((void *)&v128 + 1) + 16), (v112 & 4) == 0)
                         || (unint64_t v103 = v112 & 0xFFFFFFFFFFFFFFF8) == 0)
                  {
LABEL_250:
                    if (v123 && v122 >= 0x41 && v121) {
                      MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
                    }
                    return 1;
                  }
                  int v116 = (char *)&v128 + 8;
                  sub_1CC5FA668(v103 + 16, &v116);
                  goto LABEL_250;
                }
                int v107 = **((unsigned char **)&v128 + 1);
                if ((v107 - 4) > 0x1E)
                {
                  if ((v107 - 3) >= 0xFFFFFFFE) {
                    uint64_t v111 = *((void *)&v128 + 1);
                  }
                  else {
                    uint64_t v111 = 0;
                  }
                  if ((v107 - 3) < 0xFFFFFFFE)
                  {
                    if (v107 == 3) {
                      *(void *)(*((void *)&v128 + 1) + 8) = 0;
                    }
                    goto LABEL_229;
                  }
                  unint64_t v109 = v111 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(*((void *)&v128 + 1) + 1) & 0x7F) != 2
                    && !*(_DWORD *)(*((void *)&v128 + 1) + 12))
                  {
                    goto LABEL_229;
                  }
                  uint64_t v108 = *(void *)(*((void *)&v128 + 1) + 16);
                  if ((v108 & 4) == 0) {
                    goto LABEL_229;
                  }
                  unint64_t v109 = v108 & 0xFFFFFFFFFFFFFFF8;
                  if (!v109) {
                    goto LABEL_229;
                  }
                }
                int v116 = (char *)&v128 + 8;
                sub_1CC5FA668(v109 + 16, &v116);
                goto LABEL_229;
              }
            }
          }
        }
      }
    }
  }
LABEL_78:
  if (v9 == 45)
  {
    if ((v125 & 0x80000000) != 0) {
      unint64_t v42 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v42 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v125);
    }
    uint64_t v43 = *v42;
    if (v43)
    {
      while ((*(unsigned char *)(v43 + 3) & 1) != 0)
      {
        uint64_t v43 = *(void *)(v43 + 24);
        if (!v43) {
          goto LABEL_84;
        }
      }
      uint64_t v48 = *(void *)(v43 + 8);
      if (**(unsigned __int16 **)(v48 + 16) - 45 > 1) {
        return 0;
      }
      while (1)
      {
        uint64_t v43 = *(void *)(v43 + 24);
        if (!v43) {
          break;
        }
        if ((*(unsigned char *)(v43 + 3) & 1) == 0)
        {
          uint64_t v49 = *(void *)(v43 + 8);
          if (v49 != v48)
          {
            uint64_t result = 0;
            uint64_t v48 = *(void *)(v43 + 8);
            if (**(unsigned __int16 **)(v49 + 16) - 45 >= 2) {
              return result;
            }
          }
        }
      }
    }
LABEL_84:
    uint64_t v44 = (uint64_t *)((v125 & 0x80000000) != 0
                    ? *(void *)(a3 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8
                    : *(void *)(a3 + 272) + 8 * v125);
    uint64_t v45 = *v44;
    if (v45)
    {
      if (*(unsigned char *)(v45 + 3) & 1) != 0 || (uint64_t v45 = *(void *)(v45 + 24)) != 0 && (*(unsigned char *)(v45 + 3))
      {
        uint64_t v46 = *(void *)(v45 + 8);
        if (v46)
        {
          if (**(_WORD **)(v46 + 16) == 127 && *(_DWORD *)(v46 + 40) == 3)
          {
            uint64_t v47 = *(void *)(v46 + 32);
            unsigned int v37 = *(_DWORD *)(v47 + 36);
            unsigned int v124 = v37;
            sub_1CC73C210(*(_DWORD *)(v47 + 68), a3, (uint64_t)&v126);
            if (BYTE8(v127))
            {
              if (v127 >= 0x41)
              {
                if (v126) {
                  MEMORY[0x1D25D9CB0](v126, 0x1000C8000313F17);
                }
                return 0;
              }
              uint64_t v38 = v126 << -(uint64_t)v127 >> -(uint64_t)v127;
              if (v38 <= 4)
              {
                unsigned int v125 = v15;
                unsigned int v8 = v15;
                goto LABEL_70;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBB6CE54(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) + 32);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned int *)(v6 + 36);
  if ((v9 & 0x80000000) != 0) {
    unsigned int v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
  }
  uint64_t v11 = *v10;
  if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
    uint64_t v11 = *(void *)(v11 + 24);
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 282) {
    goto LABEL_9;
  }
  unsigned int v13 = *(_DWORD *)(v6 + 68);
  uint64_t v14 = *(void *)(v7 + 48);
  if (!v14)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 8) + 216))(*(void *)(v7 + 8), v7 + 128, v7);
    *(void *)(v7 + 48) = v14;
  }
  if (*(unsigned char *)(v14 + 560))
  {
LABEL_9:
    uint64_t v15 = 0;
    LOBYTE(v16) = 0;
    unsigned int v17 = 0;
    return v15 & 0x100000000 | v17 | v16;
  }
  sub_1CC73C210(v13, v8, (uint64_t)&v53);
  if (!(_BYTE)v55) {
    goto LABEL_12;
  }
  if (v54 >= 0x41)
  {
    if (v53) {
      MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
    }
LABEL_12:
    unint64_t v45 = 0;
LABEL_16:
    unsigned int v53 = 0;
    LODWORD(v54) = 0;
    unsigned int v20 = sub_1CBE0418C(67, 3, &v53);
    int v19 = 0;
    goto LABEL_17;
  }
  unint64_t v45 = (uint64_t)((void)v53 << -(uint64_t)v54) >> -(uint64_t)v54;
  if (v45 > 0xFF) {
    goto LABEL_16;
  }
  unsigned int v53 = 0;
  int v19 = 1;
  LODWORD(v54) = 1;
  unsigned int v20 = sub_1CBE0418C(67, 3, &v53);
LABEL_17:
  uint64_t v21 = *(void *)(a2 + 24);
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  uint64_t v22 = *(void *)(v21 + 32);
  unint64_t v23 = *(void *)(v22 + 40);
  uint64_t v48 = &unk_1F261CD58;
  *(void *)&long long v49 = v22;
  long long v50 = v23;
  *((void *)&v49 + 1) = (*(uint64_t (**)(void))(**(void **)(v22 + 16) + 104))(*(void *)(v22 + 16));
  uint64_t v57 = 0;
  *((void *)&v51 + 1) = a2;
  *(void *)&long long v52 = 0;
  *(void *)&long long v51 = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) != (long long *)((char *)&v50 + 8))
  {
    uint64_t v24 = *(unsigned __int8 **)(a2 + 56);
    *((void *)&v50 + 1) = v24;
    if (v24) {
      llvm::MetadataTracking::track((uint64_t)&v50 + 8, v24, 2);
    }
  }
  unsigned int v53 = &off_1E66AF580;
  LODWORD(v54) = 2;
  int v25 = (llvm::MachineFunction *)sub_1CC739C54(&v48, v20, (unint64_t *)&v53, 1, 0, 0, 0);
  uint64_t v27 = v26;
  uint64_t v46 = v25;
  uint64_t v47 = v26;
  LODWORD(v53) = 1;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v53);
  int v28 = *(_DWORD *)(*(void *)(v12 + 32) + 48);
  LODWORD(v53) = 5;
  uint64_t v54 = 0;
  LODWORD(v55) = v28;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v53);
  LODWORD(v53) = 1;
  uint64_t v54 = 0;
  uint64_t v55 = a3 << 8;
  llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v53);
  sub_1CBB6DC78((uint64_t)&v53, a1, *(void *)(a2 + 32) + 64);
  if (v56)
  {
    if (v54)
    {
      long long v29 = (char *)v53;
      uint64_t v30 = 32 * v54;
      do
      {
        sub_1CB986C7C((uint64_t)&v57, (uint64_t)v29);
        if (!v60) {
          sub_1CB920400();
        }
        (*(void (**)(uint64_t *, llvm::MachineFunction **))(*v60 + 48))(v60, &v46);
        if (v60 == &v57)
        {
          (*(void (**)(uint64_t *))(v57 + 32))(&v57);
        }
        else if (v60)
        {
          (*(void (**)(void))(*v60 + 40))();
        }
        v29 += 32;
        v30 -= 32;
      }
      while (v30);
    }
  }
  else
  {
    if (v19)
    {
      LODWORD(v57) = 1;
      uint64_t v58 = 0;
      unint64_t v59 = v45;
    }
    else
    {
      uint64_t v58 = 0;
      unint64_t v59 = 0;
      LODWORD(v57) = 0;
      HIDWORD(v57) = v13;
      int v60 = 0;
      llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v57);
      LODWORD(v57) = 1;
      uint64_t v58 = 0;
      unint64_t v59 = 0;
    }
    llvm::MachineInstr::addOperand(v27, v25, (const llvm::MachineOperand *)&v57);
  }
  if (v56)
  {
    uint64_t v31 = (uint64_t *)v53;
    if (v54)
    {
      uint64_t v32 = 32 * v54;
      uint64_t v33 = (char *)v53 - 32;
      do
      {
        uint64_t v34 = *(char **)&v33[v32 + 24];
        if (&v33[v32] == v34)
        {
          (*(void (**)(char *))(*(void *)&v33[v32] + 32))(&v33[v32]);
        }
        else if (v34)
        {
          (*(void (**)(char *))(*(void *)v34 + 40))(v34);
        }
        v32 -= 32;
      }
      while (v32);
      uint64_t v31 = (uint64_t *)v53;
    }
    if (v31 != &v55) {
      free(v31);
    }
  }
  uint64_t v35 = v47;
  if (a3)
  {
    uint64_t v36 = *((void *)v47 + 4);
    unsigned int v37 = *(_DWORD *)(v36 + 176);
    unsigned int v38 = (v37 >> 8) & 7;
    BOOL v39 = v38 >= a3;
    unsigned int v40 = v38 - a3;
    if (!v39)
    {
      uint64_t v15 = 0;
      LOBYTE(v16) = 0;
      unsigned int v17 = 0;
      goto LABEL_51;
    }
    *(void *)(v36 + 176) = v37 & 0xFFFFF8FF | (v40 << 8);
  }
  sub_1CC73B5D0(v35, *(void *)(a1 + 72), *(void **)(a1 + 80));
  int v16 = *(_DWORD *)(*((void *)v47 + 4) + 4);
  unsigned int v17 = v16 & 0xFFFFFF00;
  uint64_t v15 = 0x100000000;
LABEL_51:
  uint64_t v48 = &unk_1F261CD58;
  if (!*((void *)&v50 + 1)) {
    return v15 & 0x100000000 | v17 | v16;
  }
  int v41 = **((unsigned char **)&v50 + 1);
  if ((v41 - 4) > 0x1E)
  {
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v44 = *((void *)&v50 + 1);
    }
    else {
      uint64_t v44 = 0;
    }
    if ((v41 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = v44 + 8;
LABEL_63:
      unsigned int v53 = (char *)&v50 + 8;
      sub_1CC5FA668(v43 + 16, &v53);
      return v15 & 0x100000000 | v17 | v16;
    }
    if (v41 == 3) {
      *(void *)(*((void *)&v50 + 1) + 8) = 0;
    }
  }
  else if ((*(unsigned char *)(*((void *)&v50 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v50 + 1) + 12))
  {
    uint64_t v42 = *(void *)(*((void *)&v50 + 1) + 16);
    if ((v42 & 4) != 0)
    {
      unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
      if (v43) {
        goto LABEL_63;
      }
    }
  }
  return v15 & 0x100000000 | v17 | v16;
}

uint64_t sub_1CBB6D55C(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void **)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  unsigned int v10 = (unsigned __int8 *)(v8 + 32);
  uint64_t v11 = (unsigned __int8 *)(v8 + 64);
  uint64_t v12 = *(unsigned int *)(v8 + 36);
  if ((v12 & 0x80000000) != 0) {
    unsigned int v13 = (uint64_t *)(v9[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v13 = (uint64_t *)(v9[34] + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (v14)
  {
    if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (**(_WORD **)(v15 + 16) == 178) {
          llvm::MachineOperand::setReg((uint64_t)v10, *(_DWORD *)(*(void *)(v15 + 32) + 36));
        }
      }
    }
  }
  sub_1CBB633EC((uint64_t)v51, (uint64_t)v9, a1[10], a1[11], v10, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v50, (uint64_t)v9, a1[10], a1[11], v11, 0, 0, 0, 1u);
  int v16 = 2 * (v51[22] == 16);
  if (v51[20] > 3) {
    int v16 = 9;
  }
  unint64_t v17 = 257;
  if (a3) {
    unint64_t v17 = 129;
  }
  unint64_t v49 = v17;
  if (a3) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  if (v50[20] <= 3) {
    int v19 = 0;
  }
  else {
    int v19 = 9;
  }
  if (a4) {
    int v20 = 19;
  }
  else {
    int v20 = 12;
  }
  LODWORD(v57) = 12;
  HIDWORD(v57) = v20;
  *(void *)&long long v58 = __PAIR64__(v16, v18);
  DWORD2(v58) = v19;
  unsigned int v21 = sub_1CBE0418C(42, 5, &v57);
  int v23 = sub_1CB8F1DC4(&v49);
  if (v22 == 1) {
  if (v23 <= 111)
  }
  {
    if (v23 <= 47)
    {
      uint64_t v24 = (__int16 ***)&off_1E66AF970;
      if (v23 != 1 && v23 != 16) {
        uint64_t v24 = &off_1E66AF580;
      }
    }
    else if (v23 > 79)
    {
      if (v23 == 80) {
        uint64_t v24 = (__int16 ***)&off_1E66AF698;
      }
      else {
        uint64_t v24 = (__int16 ***)&off_1E66AF6D0;
      }
    }
    else if (v23 == 48)
    {
      uint64_t v24 = (__int16 ***)&off_1E66AF628;
    }
    else
    {
      uint64_t v24 = (__int16 ***)&off_1E66AF9A8;
    }
  }
  else if (v23 > 223)
  {
    if (v23 > 287)
    {
      if (v23 == 288) {
        uint64_t v24 = (__int16 ***)&off_1E66AF890;
      }
      else {
        uint64_t v24 = (__int16 ***)&off_1E66AF8C8;
      }
    }
    else if (v23 == 224)
    {
      uint64_t v24 = (__int16 ***)&off_1E66AF820;
    }
    else
    {
      uint64_t v24 = (__int16 ***)&off_1E66AF858;
    }
  }
  else if (v23 > 159)
  {
    if (v23 == 160) {
      uint64_t v24 = (__int16 ***)&off_1E66AF7B0;
    }
    else {
      uint64_t v24 = (__int16 ***)&off_1E66AF7E8;
    }
  }
  else if (v23 == 112)
  {
    uint64_t v24 = (__int16 ***)&off_1E66AF740;
  }
  else
  {
    uint64_t v24 = (__int16 ***)&off_1E66AF778;
  }
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v9, "", 0);
  *(void *)(v9[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v24;
  uint64_t v26 = v9[1];
  if (v26) {
    (*(void (**)(uint64_t, void))(*(void *)v26 + 24))(v26, IncompleteVirtualRegister);
  }
  uint64_t v27 = *(void *)(a2 + 24);
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  uint64_t v28 = *(void *)(v27 + 32);
  uint64_t v57 = &unk_1F261CD58;
  *(void *)&long long v58 = v28;
  *(void *)&long long v59 = *(void *)(v28 + 40);
  *((void *)&v58 + 1) = (*(uint64_t (**)(void))(**(void **)(v28 + 16) + 104))(*(void *)(v28 + 16));
  uint64_t v55 = 0;
  if (!*((void *)&v59 + 1)) {
    goto LABEL_53;
  }
  int v40 = **((unsigned char **)&v59 + 1);
  if ((v40 - 4) > 0x1E)
  {
    if ((v40 - 3) >= 0xFFFFFFFE) {
      uint64_t v46 = *((void *)&v59 + 1);
    }
    else {
      uint64_t v46 = 0;
    }
    if ((v40 - 3) > 0xFFFFFFFD)
    {
      unint64_t v42 = v46 + 8;
      goto LABEL_90;
    }
    if (v40 == 3) {
      *(void *)(*((void *)&v59 + 1) + 8) = 0;
    }
LABEL_53:
    *((void *)&v59 + 1) = 0;
    goto LABEL_54;
  }
  if ((*(unsigned char *)(*((void *)&v59 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v59 + 1) + 12)) {
    goto LABEL_53;
  }
  uint64_t v41 = *(void *)(*((void *)&v59 + 1) + 16);
  if ((v41 & 4) == 0) {
    goto LABEL_53;
  }
  unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
  if (!v42) {
    goto LABEL_53;
  }
LABEL_90:
  long long v52 = (llvm::MachineFunction *)((char *)&v59 + 8);
  sub_1CC5FA668(v42 + 16, &v52);
  *((void *)&v59 + 1) = v55;
  if (v55) {
    llvm::MetadataTracking::retrack((uint64_t)&v55, v55, (uint64_t)&v59 + 8);
  }
LABEL_54:
  *((void *)&v60 + 1) = a2;
  *(void *)&long long v61 = 0;
  *(void *)&long long v60 = *(void *)(a2 + 24);
  long long v29 = (_OWORD *)(a2 + 56);
  if (v29 == (long long *)((char *)&v59 + 8)) {
    goto LABEL_58;
  }
  if (*((void *)&v59 + 1))
  {
    int v43 = **((unsigned char **)&v59 + 1);
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        uint64_t v47 = *((void *)&v59 + 1);
      }
      else {
        uint64_t v47 = 0;
      }
      if ((v43 - 3) < 0xFFFFFFFE)
      {
        if (v43 == 3) {
          *(void *)(*((void *)&v59 + 1) + 8) = 0;
        }
        goto LABEL_56;
      }
      unint64_t v45 = v47 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v59 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v59 + 1) + 12)) {
        goto LABEL_56;
      }
      uint64_t v44 = *(void *)(*((void *)&v59 + 1) + 16);
      if ((v44 & 4) == 0) {
        goto LABEL_56;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v45) {
        goto LABEL_56;
      }
    }
    long long v52 = (llvm::MachineFunction *)((char *)&v59 + 8);
    sub_1CC5FA668(v45 + 16, &v52);
  }
LABEL_56:
  *((void *)&v59 + 1) = *(void *)v29;
  if (*((void *)&v59 + 1)) {
    llvm::MetadataTracking::track((uint64_t)&v59 + 8, *((unsigned __int8 **)&v59 + 1), 2);
  }
LABEL_58:
  LODWORD(v55) = IncompleteVirtualRegister;
  int v56 = 1;
  uint64_t v31 = (llvm::MachineFunction *)sub_1CC739C54(&v57, v21, (unint64_t *)&v55, 1, 0, 0, 0);
  uint64_t v32 = v30;
  uint64_t v33 = 128;
  LODWORD(v52) = 1;
  if (!a3) {
    uint64_t v33 = 0;
  }
  unsigned int v53 = 0;
  uint64_t v54 = v33;
  llvm::MachineInstr::addOperand(v30, v31, (const llvm::MachineOperand *)&v52);
  long long v52 = v31;
  unsigned int v53 = v32;
  uint64_t v34 = operator new(0x30uLL);
  *uint64_t v34 = &unk_1F25F8A98;
  v34[1] = sub_1CBB644E4;
  v34[2] = 0;
  v34[3] = a1;
  v34[4] = v9;
  *((_DWORD *)v34 + 10) = 0;
  *((_WORD *)v34 + 22) = 1;
  sub_1CBB6F084(v51, (uint64_t)v34);
  (*(void (**)(void *))(*v34 + 40))(v34);
  uint64_t v35 = operator new(0x30uLL);
  *uint64_t v35 = &unk_1F25F8A98;
  v35[1] = sub_1CBB644E4;
  void v35[2] = 0;
  v35[3] = a1;
  v35[4] = v9;
  *((_DWORD *)v35 + 10) = 0;
  *((_WORD *)v35 + 22) = 1;
  sub_1CBB6F084(v50, (uint64_t)v35);
  (*(void (**)(void *))(*v35 + 40))(v35);
  sub_1CB9983A0(&v52, (uint64_t)v51);
  sub_1CB9983A0(&v52, (uint64_t)v50);
  sub_1CC73B5D0(v32, a1[9], (void *)a1[10]);
  uint64_t v57 = &unk_1F261CD58;
  if (*((void *)&v59 + 1))
  {
    int v36 = **((unsigned char **)&v59 + 1);
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = *((void *)&v59 + 1);
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v36 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = v38 + 8;
LABEL_70:
        long long v52 = (llvm::MachineFunction *)((char *)&v59 + 8);
        sub_1CC5FA668(v39 + 16, &v52);
        return IncompleteVirtualRegister | 0x100000000;
      }
      if (v36 == 3) {
        *(void *)(*((void *)&v59 + 1) + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*((void *)&v59 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v59 + 1) + 12))
    {
      uint64_t v48 = *(void *)(*((void *)&v59 + 1) + 16);
      if ((v48 & 4) != 0)
      {
        unint64_t v39 = v48 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_70;
        }
      }
    }
  }
  return IncompleteVirtualRegister | 0x100000000;
}

void sub_1CBB6DC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v39[8] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 8) + 24) + 32) + 40);
  sub_1CBB633EC((uint64_t)v22, v5, *(void *)(a2 + 80), *(void *)(a2 + 88), (unsigned __int8 *)a3, 1, 0, 0, 1u);
  unsigned int v37 = v39;
  uint64_t v38 = 0x200000000;
  v21[0] = v22[0];
  v21[1] = v22[1];
  if ((sub_1CBB644E4(a2, v5, (unsigned __int8 *)v21, (uint64_t)&v37, v23 << 8, 0, 0) & 1) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 144) = 0;
    goto LABEL_42;
  }
  uint64_t v27 = v29;
  uint64_t v28 = 0x200000000;
  uint64_t v6 = v38;
  if (v38)
  {
    if (v38 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v29, v37, 32 * v38);
    LODWORD(v28) = v6;
  }
  uint64_t v7 = operator new(0x58uLL);
  uint64_t v8 = v7;
  void *v7 = &unk_1F25F89C0;
  v7[1] = v7 + 3;
  void v7[2] = 0x200000000;
  if (v6)
  {
    if (v27 == v29)
    {
      if (v6 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v7 + 3, v29, 32 * v6);
      *((_DWORD *)v8 + 4) = v6;
    }
    else
    {
      v7[1] = v27;
      int v19 = HIDWORD(v28);
      *((_DWORD *)v7 + 4) = v6;
      *((_DWORD *)v7 + 5) = v19;
      uint64_t v27 = v29;
      HIDWORD(v28) = 0;
    }
    LODWORD(v28) = 0;
  }
  uint64_t v31 = v8;
  uint64_t v24 = v26;
  uint64_t v25 = 0x200000000;
  uint64_t v9 = v38;
  if (v38)
  {
    if (v38 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v26, v37, 32 * v38);
    LODWORD(v25) = v9;
  }
  unsigned int v10 = operator new(0x58uLL);
  uint64_t v11 = v10;
  void *v10 = &unk_1F25F8A08;
  v10[1] = v10 + 3;
  v10[2] = 0x200000000;
  if (v9)
  {
    if (v24 == v26)
    {
      if (v9 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v10 + 3, v26, 32 * v9);
      *((_DWORD *)v11 + 4) = v9;
    }
    else
    {
      v10[1] = v24;
      int v20 = HIDWORD(v25);
      *((_DWORD *)v10 + 4) = v9;
      *((_DWORD *)v10 + 5) = v20;
      uint64_t v24 = v26;
      HIDWORD(v25) = 0;
    }
    LODWORD(v25) = 0;
  }
  uint64_t v33 = v11;
  uint64_t v34 = v36;
  uint64_t v35 = 0x400000000;
  sub_1CB986BF0((uint64_t)&v34, (uint64_t)v30, (uint64_t)&v34);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (!v35)
  {
    *(unsigned char *)(a1 + 144) = 1;
LABEL_29:
    unsigned int v13 = v34;
    goto LABEL_30;
  }
  sub_1CB986D14((unsigned int *)a1, (unsigned int *)&v34);
  uint64_t v12 = v35;
  *(unsigned char *)(a1 + 144) = 1;
  unsigned int v13 = v34;
  if (v12)
  {
    uint64_t v14 = 32 * v12;
    uint64_t v15 = (char *)v34 - 32;
    do
    {
      int v16 = *(char **)&v15[v14 + 24];
      if (&v15[v14] == v16)
      {
        (*(void (**)(char *))(*(void *)&v15[v14] + 32))(&v15[v14]);
      }
      else if (v16)
      {
        (*(void (**)(char *))(*(void *)v16 + 40))(v16);
      }
      v14 -= 32;
    }
    while (v14);
    goto LABEL_29;
  }
LABEL_30:
  if (v13 != v36) {
    free(v13);
  }
  for (uint64_t i = 0; i != -8; i -= 4)
  {
    int v18 = (&v33)[i];
    if (&v32[i * 8] == v18)
    {
      (*(void (**)(unsigned char *))(*(void *)&v32[i * 8] + 32))(&v32[i * 8]);
    }
    else if (v18)
    {
      (*(void (**)(unsigned char *))(*(void *)v18 + 40))(v18);
    }
  }
  if (v24 != v26) {
    free(v24);
  }
  if (v27 != v29) {
    free(v27);
  }
LABEL_42:
  if (v37 != v39) {
    free(v37);
  }
}

uint64_t sub_1CBB6E140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 64);
  if (!*(unsigned char *)(v8 + 303) && !*(unsigned char *)(v8 + 305)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v10 = *(unsigned int *)(v9 + 68);
  if ((v10 & 0x80000000) != 0) {
    uint64_t v11 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v11 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v10);
  }
  uint64_t v12 = *v11;
  if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
    uint64_t v12 = *(void *)(v12 + 24);
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (**(_WORD **)(v13 + 16) != 121) {
    return 0;
  }
  uint64_t v14 = *(unsigned int *)(a2 + 40);
  if (v14)
  {
    uint64_t v15 = 0;
    int v16 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      int v17 = *v16;
      v16 += 32;
      if (v17 == 17) {
        break;
      }
      if (v14 == ++v15) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    LODWORD(v15) = -1;
  }
  uint64_t v18 = v9 + 32 * v15;
  if (a4)
  {
    uint64_t v9 = *(void *)(a4 + 32);
    int v19 = 19;
    uint64_t v20 = a4;
  }
  else
  {
    int v19 = 12;
    uint64_t v20 = a2;
  }
  int v22 = *(_DWORD *)(v18 + 16);
  int v23 = *(_DWORD *)(v9 + 4);
  if ((v23 & 0x80000000) == 0 || (uint64_t v24 = v23 & 0x7FFFFFFF, v24 >= *(_DWORD *)(a3 + 432)))
  {
    unint64_t v25 = 0;
    if (v22 == 2449) {
      uint64_t v26 = 32;
    }
    else {
      uint64_t v26 = 33;
    }
    LODWORD(v67) = v19;
LABEL_32:
    int v29 = 86;
    goto LABEL_33;
  }
  unint64_t v25 = *(void *)(*(void *)(a3 + 424) + 8 * v24);
  if (v22 == 2449) {
    uint64_t v26 = 32;
  }
  else {
    uint64_t v26 = 33;
  }
  LODWORD(v67) = v19;
  unint64_t v61 = v25;
  if ((v25 & 0x8000000000000000) != 0)
  {
    int v29 = 21;
    goto LABEL_33;
  }
  if ((v25 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v28 = sub_1CB8F1DC4(&v61);
  if (v27 == 1) {
  if (v28 != 16)
  }
  {
    if (v61)
    {
      uint64_t v55 = sub_1CB8F1DC4(&v61);
      if (v54 == 1) {
      if (v55 == 32)
      }
      {
        int v29 = 0;
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
  int v29 = 2;
LABEL_33:
  HIDWORD(v67) = v29;
  int v30 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
  if ((v30 & 0x80000000) == 0) {
    goto LABEL_37;
  }
  uint64_t v31 = v30 & 0x7FFFFFFF;
  if (v31 >= *(_DWORD *)(a3 + 432)) {
    goto LABEL_37;
  }
  unint64_t v32 = *(void *)(*(void *)(a3 + 424) + 8 * v31);
  unint64_t v61 = v32;
  if ((v32 & 0x8000000000000000) != 0)
  {
    int v33 = 21;
  }
  else
  {
    if ((v32 & 1) == 0)
    {
LABEL_37:
      int v33 = 86;
      goto LABEL_38;
    }
    uint64_t v50 = sub_1CB8F1DC4(&v61);
    if (v49 == 1) {
    if (v50 == 16)
    }
    {
      int v33 = 2;
    }
    else
    {
      if ((v61 & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v57 = sub_1CB8F1DC4(&v61);
      if (v56 == 1) {
      if (v57 != 32)
      }
        goto LABEL_37;
      int v33 = 0;
    }
  }
LABEL_38:
  LODWORD(v68) = v33;
  unsigned int v34 = sub_1CBE0418C(v26, 3, &v67);
  uint64_t v35 = *(void *)(v20 + 24);
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  uint64_t v36 = *(void *)(v35 + 32);
  uint64_t v37 = *(void *)(v36 + 40);
  uint64_t v67 = &unk_1F261CD58;
  *(void *)&long long v68 = v36;
  *(void *)&long long v69 = v37;
  *((void *)&v68 + 1) = (*(uint64_t (**)(void))(**(void **)(v36 + 16) + 104))(*(void *)(v36 + 16));
  unsigned int v65 = 0;
  if (!*((void *)&v69 + 1))
  {
LABEL_39:
    *((void *)&v69 + 1) = 0;
    goto LABEL_40;
  }
  int v46 = **((unsigned char **)&v69 + 1);
  if ((v46 - 4) > 0x1E)
  {
    if ((v46 - 3) >= 0xFFFFFFFE) {
      uint64_t v58 = *((void *)&v69 + 1);
    }
    else {
      uint64_t v58 = 0;
    }
    if ((v46 - 3) <= 0xFFFFFFFD)
    {
      if (v46 == 3) {
        *(void *)(*((void *)&v69 + 1) + 8) = 0;
      }
      goto LABEL_39;
    }
    unint64_t v48 = v58 + 8;
  }
  else
  {
    if ((*(unsigned char *)(*((void *)&v69 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v69 + 1) + 12)) {
      goto LABEL_39;
    }
    uint64_t v47 = *(void *)(*((void *)&v69 + 1) + 16);
    if ((v47 & 4) == 0) {
      goto LABEL_39;
    }
    unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
    if (!v48) {
      goto LABEL_39;
    }
  }
  unint64_t v61 = (unint64_t)&v69 + 8;
  sub_1CC5FA668(v48 + 16, &v61);
  *((void *)&v69 + 1) = v65;
  if (v65) {
    llvm::MetadataTracking::retrack((uint64_t)&v65, v65, (uint64_t)&v69 + 8);
  }
LABEL_40:
  *((void *)&v70 + 1) = v20;
  *(void *)&long long v71 = 0;
  *(void *)&long long v70 = *(void *)(v20 + 24);
  if ((long long *)(v20 + 56) == (long long *)((char *)&v69 + 8)) {
    goto LABEL_44;
  }
  if (*((void *)&v69 + 1))
  {
    int v51 = **((unsigned char **)&v69 + 1);
    if ((v51 - 4) > 0x1E)
    {
      if ((v51 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = *((void *)&v69 + 1);
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v51 - 3) < 0xFFFFFFFE)
      {
        if (v51 == 3) {
          *(void *)(*((void *)&v69 + 1) + 8) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v53 = v59 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v69 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v69 + 1) + 12)) {
        goto LABEL_42;
      }
      uint64_t v52 = *(void *)(*((void *)&v69 + 1) + 16);
      if ((v52 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFF8;
      if (!v53) {
        goto LABEL_42;
      }
    }
    unint64_t v61 = (unint64_t)&v69 + 8;
    sub_1CC5FA668(v53 + 16, &v61);
  }
LABEL_42:
  uint64_t v38 = *(unsigned __int8 **)(v20 + 56);
  *((void *)&v69 + 1) = v38;
  if (v38) {
    llvm::MetadataTracking::track((uint64_t)&v69 + 8, v38, 2);
  }
LABEL_44:
  unsigned int v65 = (unsigned __int8 *)v25;
  int v66 = 0;
  unint64_t v39 = (llvm::MachineFunction *)sub_1CC739C54(&v67, v34, (unint64_t *)&v65, 1, 0, 0, 0);
  uint64_t v41 = v40;
  LODWORD(v61) = 1;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)&v61);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  LODWORD(v61) = 0;
  HIDWORD(v61) = v10;
  uint64_t v64 = 0;
  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v61);
  LODWORD(v61) = 1;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  llvm::MachineInstr::addOperand(v41, v39, (const llvm::MachineOperand *)&v61);
  __int16 v42 = *((_WORD *)v41 + 22) & 0xC;
  *((_WORD *)v41 + 22) = v42 | *(_WORD *)(a2 + 44) & 0xFFF3;
  if (a4) {
    *((_WORD *)v41 + 22) = *(_WORD *)(a4 + 44) & 0xFFF3 | v42;
  }
  sub_1CC73B5D0(v41, *(void *)(a1 + 72), *(void **)(a1 + 80));
  sub_1CB98E138((void *)a3, (llvm::MachineInstr *)v20, *(_DWORD *)(*((void *)v41 + 4) + 4));
  uint64_t v67 = &unk_1F261CD58;
  if (!*((void *)&v69 + 1)) {
    return 1;
  }
  int v43 = **((unsigned char **)&v69 + 1);
  if ((v43 - 4) > 0x1E)
  {
    if ((v43 - 3) >= 0xFFFFFFFE) {
      uint64_t v44 = *((void *)&v69 + 1);
    }
    else {
      uint64_t v44 = 0;
    }
    if ((v43 - 3) < 0xFFFFFFFE)
    {
      if (v43 == 3) {
        *(void *)(*((void *)&v69 + 1) + 8) = 0;
      }
      return 1;
    }
    unint64_t v45 = v44 + 8;
  }
  else
  {
    if ((*(unsigned char *)(*((void *)&v69 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v69 + 1) + 12)) {
      return 1;
    }
    uint64_t v60 = *(void *)(*((void *)&v69 + 1) + 16);
    if ((v60 & 4) == 0) {
      return 1;
    }
    unint64_t v45 = v60 & 0xFFFFFFFFFFFFFFF8;
    if (!v45) {
      return 1;
    }
  }
  unint64_t v61 = (unint64_t)&v69 + 8;
  sub_1CC5FA668(v45 + 16, &v61);
  return 1;
}

void sub_1CBB6E73C(unsigned char *a1, char a2, uint64_t a3, unsigned int a4)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a2
    && ((a4 & 0x80000000) == 0
      ? (uint64_t v6 = (uint64_t *)(*(void *)(a3 + 272) + 8 * a4))
      : (uint64_t v6 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8)),
        (uint64_t v7 = *v6) != 0
     && ((*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3) & 1) != 0)
     && (uint64_t v8 = *(void *)(v7 + 8)) != 0
     && **(_WORD **)(v8 + 16) == 77))
  {
    uint64_t v74 = v76;
    uint64_t v75 = 0x400000000;
    unsigned int v9 = *(_DWORD *)(v8 + 40) - 1;
    if (v9 >= 2)
    {
      uint64_t v10 = 0;
      unsigned int v11 = 1;
      while (1)
      {
        uint64_t v12 = *(void *)(v8 + 32);
        uint64_t v13 = *(unsigned int *)(v12 + 32 * v11 + 4);
        if ((v13 & 0x80000000) != 0) {
          uint64_t v14 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v14 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v13);
        }
        uint64_t v15 = *v14;
        if (v15)
        {
          if (*(unsigned char *)(v15 + 3)) {
            goto LABEL_14;
          }
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15) {
            goto LABEL_15;
          }
          if (*(unsigned char *)(v15 + 3)) {
LABEL_14:
          }
            uint64_t v15 = *(void *)(v15 + 8);
          else {
            uint64_t v15 = 0;
          }
        }
LABEL_15:
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_142;
        }
        unint64_t v16 = v13 & 0x7FFFFFFF;
        unint64_t v17 = *(unsigned int *)(a3 + 432);
        if (v16 >= v17) {
          goto LABEL_142;
        }
        uint64_t v18 = *(void *)(a3 + 424);
        if (*(void *)(v18 + 8 * v16) != 0x8000000000000081) {
          goto LABEL_142;
        }
        int v19 = *(_DWORD *)(v12 + 32 * (v11 + 1) + 4);
        if ((v19 & 0x80000000) == 0) {
          goto LABEL_142;
        }
        uint64_t v20 = v19 & 0x7FFFFFFF;
        if ((v19 & 0x7FFFFFFFu) >= v17 || *(void *)(v18 + 8 * v20) != 0x8000000000000081) {
          goto LABEL_142;
        }
        if (**(_WORD **)(v15 + 16) == 74)
        {
          if (*(_DWORD *)(v15 + 40) != 3) {
            goto LABEL_142;
          }
          unsigned int v21 = *(_DWORD **)(v15 + 32);
          if (v21[1] != v13 || v21[9] != v19) {
            goto LABEL_142;
          }
          uint64_t v22 = v21[17];
        }
        else
        {
          uint64_t v29 = *(void *)(*(void *)(a3 + 24) + 16 * v16 + 8);
          if (!v29) {
            goto LABEL_142;
          }
          if ((*(unsigned char *)(v29 + 3) & 1) == 0)
          {
            uint64_t v29 = *(void *)(v29 + 24);
            if (!v29 || (*(unsigned char *)(v29 + 3) & 1) == 0) {
              goto LABEL_142;
            }
          }
          uint64_t v30 = *(void *)(v29 + 8);
          if (!v30) {
            goto LABEL_142;
          }
          if (**(_WORD **)(v30 + 16) != 205) {
            goto LABEL_142;
          }
          if (*(_DWORD *)(v30 + 40) != 3) {
            goto LABEL_142;
          }
          uint64_t v31 = *(void *)(v30 + 32);
          uint64_t v22 = *(unsigned int *)(v31 + 36);
          sub_1CC73C210(*(_DWORD *)(v31 + 68), a3, (uint64_t)&v77);
          if (!v79[0]) {
            goto LABEL_142;
          }
          if (v78 >= 0x41) {
            goto LABEL_140;
          }
          uint64_t v32 = *(void *)(*(void *)(a3 + 24) + 16 * v20 + 8);
          if (!v32) {
            goto LABEL_142;
          }
          int v33 = v77;
          if ((*(unsigned char *)(v32 + 3) & 1) == 0)
          {
            uint64_t v32 = *(void *)(v32 + 24);
            if (!v32 || (*(unsigned char *)(v32 + 3) & 1) == 0) {
              goto LABEL_142;
            }
          }
          uint64_t v34 = *(void *)(v32 + 8);
          if (!v34) {
            goto LABEL_142;
          }
          if (**(_WORD **)(v34 + 16) != 205) {
            goto LABEL_142;
          }
          if (*(_DWORD *)(v34 + 40) != 3) {
            goto LABEL_142;
          }
          uint64_t v35 = *(void *)(v34 + 32);
          uint64_t v64 = *(unsigned int *)(v35 + 36);
          char v65 = v78;
          sub_1CC73C210(*(_DWORD *)(v35 + 68), a3, (uint64_t)&v77);
          if (!v79[0]) {
            goto LABEL_142;
          }
          if (v78 >= 0x41)
          {
LABEL_140:
            if (v77) {
              MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
            }
LABEL_142:
            *a1 = 0;
            a1[8] = 0;
            goto LABEL_143;
          }
          BOOL v36 = v22 == v64 && (uint64_t)((void)v33 << -v65) >> -v65 == 0;
          if (!v36 || (uint64_t)((void)v77 << -(char)v78) >> -(char)v78 != 1) {
            goto LABEL_142;
          }
        }
        if ((v22 & 0x80000000) != 0) {
          int v23 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
        }
        else {
          int v23 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v22);
        }
        uint64_t v24 = *v23;
        if ((*(unsigned char *)(v24 + 3) & 1) == 0) {
          uint64_t v24 = *(void *)(v24 + 24);
        }
        uint64_t v25 = *(void *)(v24 + 8);
        if ((**(_WORD **)(v25 + 16) & 0xFFFE) != 0x74) {
          goto LABEL_142;
        }
        uint64_t v26 = *(unsigned int *)(v25 + 40);
        if (!v26) {
          goto LABEL_142;
        }
        uint64_t v27 = *(_DWORD **)(v25 + 32);
        uint64_t v28 = v27 + 4;
        while (*((unsigned char *)v28 - 16) != 17)
        {
          v28 += 8;
          if (!--v26) {
            goto LABEL_142;
          }
        }
        if (*v28 != 2844) {
          goto LABEL_142;
        }
        int v38 = v27[20];
        if ((~v38 & 0x60) != 0) {
          goto LABEL_142;
        }
        uint64_t v39 = v38 & 3;
        if (v11 != 1)
        {
          BOOL v36 = v10 == v39;
          uint64_t v39 = v10;
          if (!v36) {
            goto LABEL_142;
          }
        }
        if (v75 >= (unint64_t)HIDWORD(v75)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v74 + v75) = v27[25];
        unsigned __int16 v40 = v75 + 1;
        LODWORD(v75) = v75 + 1;
        v11 += 2;
        uint64_t v10 = v39;
        if (v11 >= v9)
        {
          unint64_t v62 = (8 * v40) | 0x800004u;
          goto LABEL_80;
        }
      }
    }
    LODWORD(v39) = 0;
    unint64_t v62 = 8388612;
LABEL_80:
    unint64_t v73 = v62;
    uint64_t v41 = *(void *)(v8 + 24);
    long long v72 = 0u;
    long long v71 = 0u;
    long long v70 = 0u;
    long long v69 = 0u;
    uint64_t v42 = *(void *)(v41 + 32);
    unint64_t v43 = *(void *)(v42 + 40);
    long long v68 = (void (**)(void **, uint64_t, unint64_t *, uint64_t, unsigned char *))&unk_1F261CD58;
    *(void *)&long long v69 = v42;
    long long v70 = v43;
    *((void *)&v69 + 1) = (*(uint64_t (**)(void))(**(void **)(v42 + 16) + 104))(*(void *)(v42 + 16));
    unint64_t v66 = 0;
    *((void *)&v71 + 1) = 0;
    *(void *)&long long v72 = 0;
    *(void *)&long long v71 = *(void *)(v8 + 24);
    *((void *)&v71 + 1) = v8;
    uint64_t v44 = (_OWORD *)(v8 + 56);
    if (v44 != (long long *)((char *)&v70 + 8))
    {
      unint64_t v45 = *(unsigned __int8 **)v44;
      *((void *)&v70 + 1) = v45;
      if (v45) {
        llvm::MetadataTracking::track((uint64_t)&v70 + 8, v45, 2);
      }
    }
    unint64_t v66 = v62;
    int v67 = 0;
    int v46 = (int *)v74;
    int v47 = v75;
    int v77 = v79;
    uint64_t v78 = 0x800000000;
    if (v75 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v75)
    {
      uint64_t v48 = 0;
      uint64_t v49 = 4 * v75;
      do
      {
        int v50 = *v46++;
        int v51 = &v79[v48];
        _DWORD *v51 = v50;
        _DWORD v51[4] = 0;
        v48 += 24;
        v49 -= 4;
      }
      while (v49);
      int v52 = v78;
    }
    else
    {
      int v52 = 0;
    }
    LODWORD(v78) = v52 + v47;
    v68[4]((void **)&v68, 77, &v66, 1, v79);
    if (v77 != v79)
    {
      uint64_t v63 = v53;
      free(v77);
      uint64_t v53 = v63;
    }
    uint64_t v54 = *(unsigned int *)(*(void *)(v53 + 32) + 4);
    int v56 = sub_1CB8F1DC4(&v73);
    if (v55 == 1) {
    if (v56 <= 111)
    }
    {
      if (v56 <= 47)
      {
        uint64_t v57 = (__int16 ***)&off_1E66AF970;
        if (v56 != 1 && v56 != 16) {
          uint64_t v57 = &off_1E66AF580;
        }
      }
      else if (v56 > 79)
      {
        if (v56 == 80) {
          uint64_t v57 = (__int16 ***)&off_1E66AF698;
        }
        else {
          uint64_t v57 = (__int16 ***)&off_1E66AF6D0;
        }
      }
      else if (v56 == 48)
      {
        uint64_t v57 = (__int16 ***)&off_1E66AF628;
      }
      else
      {
        uint64_t v57 = (__int16 ***)&off_1E66AF9A8;
      }
    }
    else if (v56 > 223)
    {
      if (v56 > 287)
      {
        if (v56 == 288) {
          uint64_t v57 = (__int16 ***)&off_1E66AF890;
        }
        else {
          uint64_t v57 = (__int16 ***)&off_1E66AF8C8;
        }
      }
      else if (v56 == 224)
      {
        uint64_t v57 = (__int16 ***)&off_1E66AF820;
      }
      else
      {
        uint64_t v57 = (__int16 ***)&off_1E66AF858;
      }
    }
    else if (v56 > 159)
    {
      if (v56 == 160) {
        uint64_t v57 = (__int16 ***)&off_1E66AF7B0;
      }
      else {
        uint64_t v57 = (__int16 ***)&off_1E66AF7E8;
      }
    }
    else if (v56 == 112)
    {
      uint64_t v57 = (__int16 ***)&off_1E66AF740;
    }
    else
    {
      uint64_t v57 = (__int16 ***)&off_1E66AF778;
    }
    *(void *)(*(void *)(a3 + 24) + 16 * (v54 & 0x7FFFFFFF)) = v57;
    *(void *)a1 = v54 | ((unint64_t)(v39 + 1) << 32);
    a1[8] = 1;
    long long v68 = (void (**)(void **, uint64_t, unint64_t *, uint64_t, unsigned char *))&unk_1F261CD58;
    if (*((void *)&v70 + 1))
    {
      int v58 = **((unsigned char **)&v70 + 1);
      if ((v58 - 4) > 0x1E)
      {
        if ((v58 - 3) >= 0xFFFFFFFE) {
          uint64_t v61 = *((void *)&v70 + 1);
        }
        else {
          uint64_t v61 = 0;
        }
        if ((v58 - 3) < 0xFFFFFFFE)
        {
          if (v58 == 3) {
            *(void *)(*((void *)&v70 + 1) + 8) = 0;
          }
          goto LABEL_143;
        }
        unint64_t v60 = v61 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v70 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v70 + 1) + 12)) {
          goto LABEL_143;
        }
        uint64_t v59 = *(void *)(*((void *)&v70 + 1) + 16);
        if ((v59 & 4) == 0) {
          goto LABEL_143;
        }
        unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (!v60) {
          goto LABEL_143;
        }
      }
      int v77 = (char *)&v70 + 8;
      sub_1CC5FA668(v60 + 16, &v77);
    }
LABEL_143:
    if (v74 != v76) {
      free(v74);
    }
  }
  else
  {
    *a1 = 0;
    a1[8] = 0;
  }
}

void sub_1CBB6F084(int *a1, uint64_t a2)
{
  v16[8] = *MEMORY[0x1E4F143B8];
  int v3 = a1[20];
  if (v3) {
    BOOL v4 = v3 == 2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    v15[0] = v16;
    v15[1] = (void *)0x200000000;
    if (a2)
    {
      unsigned int v2 = a1;
      if (!(*(unsigned int (**)(uint64_t, int *, void **))(*(void *)a2 + 48))(a2, a1, v15)) {
        goto LABEL_11;
      }
      uint64_t v5 = v15[0];
      int v6 = *((unsigned __int8 *)v2 + 32);
      long long v7 = *((_OWORD *)v15[0] + 1);
      *(_OWORD *)unsigned int v2 = *(_OWORD *)v15[0];
      *((_OWORD *)v2 + 1) = v7;
      if (v6)
      {
LABEL_9:
        int v8 = *((unsigned __int8 *)v2 + 72);
        long long v9 = v5[3];
        *(_OWORD *)(v2 + 10) = v5[2];
        *(_OWORD *)(v2 + 14) = v9;
        if (!v8) {
          *((unsigned char *)v2 + 72) = 1;
        }
LABEL_11:
        v2[20] = 1;
        unsigned int v10 = *v2;
        if (*v2 != 7)
        {
          unsigned int v11 = v2[1];
          if (v11 - 1 <= 0x3FFFFFFE)
          {
            uint64_t v12 = *((void *)v2 + 13);
            int RegSizeInBits = *(_DWORD *)(*(void *)(v12 + 264)
                                      + 24
                                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*((void *)v2 + 14), v11, v12)+ 24)+ *(_DWORD *)(v12 + 272)* ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
          }
          else
          {
            int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*((void *)v2 + 13), v11, *((void *)v2 + 12));
          }
          goto LABEL_14;
        }
        if (v2[4] == 64) {
          v2[20] = 2;
        }
        int v14 = (v10 >> 8) & 0xFFF;
        if (v14 == 2) {
          goto LABEL_20;
        }
        int RegSizeInBits = 0;
        if (v14 <= 2)
        {
          if (v14 != 1) {
            goto LABEL_14;
          }
          goto LABEL_23;
        }
        switch(v14)
        {
          case 3:
            int RegSizeInBits = 64;
            break;
          case 15:
LABEL_20:
            int RegSizeInBits = 32;
            break;
          case 14:
LABEL_23:
            int RegSizeInBits = 16;
            break;
        }
LABEL_14:
        v2[22] = RegSizeInBits;
        if (v15[0] != v16) {
          free(v15[0]);
        }
        return;
      }
    }
    else
    {
      sub_1CB920400();
    }
    *((unsigned char *)v2 + 32) = 1;
    goto LABEL_9;
  }
}

uint64_t sub_1CBB6F278(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  long long v7 = (unsigned __int8 *)*((unsigned int *)a3 + 2);
  int v8 = (_UNKNOWN **)&off_1E66AF9A8;
  switch((int)v7)
  {
    case 2:
      goto LABEL_9;
    case 3:
      int v8 = (_UNKNOWN **)&off_1E66AF6D0;
      goto LABEL_9;
    case 4:
      int v8 = (_UNKNOWN **)&off_1E66AF778;
      goto LABEL_9;
    case 5:
    case 7:
    case 10:
    case 11:
      __break(1u);
      goto LABEL_47;
    case 6:
      int v8 = &off_1E66AF7E8;
      goto LABEL_9;
    case 8:
      int v8 = &off_1E66AF858;
      goto LABEL_9;
    case 9:
      int v8 = &off_1E66AF890;
      goto LABEL_9;
    case 12:
      int v8 = &off_1E66AF8C8;
LABEL_9:
      uint64_t v6 = *(void *)(a2 + 24);
      uint64_t v13 = a4 + 864;
      if ((*(_WORD *)(a2 + 44) & 4) == 0)
      {
        BOOL v4 = *(llvm::MachineFunction **)(v6 + 32);
        int v14 = *(unsigned __int8 **)(a2 + 56);
        int v51 = v14;
        if (v14) {
          llvm::MetadataTracking::track((uint64_t)&v51, v14, 2);
        }
        uint64_t v5 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v4, v13, &v51, 0);
        long long v7 = v51;
        if (!v51) {
          goto LABEL_13;
        }
LABEL_47:
        int v39 = *v7;
        if ((v39 - 4) > 0x1E)
        {
          if ((v39 - 3) >= 0xFFFFFFFE) {
            unint64_t v45 = v7;
          }
          else {
            unint64_t v45 = 0;
          }
          if ((v39 - 3) < 0xFFFFFFFE)
          {
            if (v39 == 3) {
              *((void *)v7 + 1) = 0;
            }
            goto LABEL_13;
          }
          unint64_t v41 = (unint64_t)(v45 + 8);
        }
        else
        {
          if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
            goto LABEL_13;
          }
          uint64_t v40 = *((void *)v7 + 2);
          if ((v40 & 4) == 0) {
            goto LABEL_13;
          }
          unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          if (!v41) {
            goto LABEL_13;
          }
        }
        int v47 = &v51;
        sub_1CC5FA668(v41 + 16, &v47);
LABEL_13:
        uint64_t v15 = *(void *)(v6 + 40);
        *(void *)(v5 + 24) = v15;
        uint64_t v16 = *(void *)(v15 + 32);
        uint64_t v17 = *(unsigned int *)(v5 + 40);
        if (v17)
        {
          uint64_t v32 = *(void *)(v5 + 32);
          uint64_t v33 = *(void *)(v16 + 40);
          uint64_t v34 = 32 * v17;
          do
          {
            if (!*(unsigned char *)v32)
            {
              uint64_t v35 = *(unsigned int *)(v32 + 4);
              if ((int)v35 >= 0) {
                BOOL v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
              }
              else {
                BOOL v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
              }
              uint64_t v37 = *v36;
              if (*v36)
              {
                uint64_t v38 = *(void *)(v37 + 16);
                *(void *)(v37 + 16) = v32;
                *(void *)(v32 + 16) = v38;
                if (*(unsigned char *)(v32 + 3))
                {
                  *(void *)(v32 + 24) = v37;
                }
                else
                {
                  *(void *)(v32 + 24) = 0;
                  BOOL v36 = (uint64_t *)(v38 + 24);
                }
              }
              else
              {
                *(void *)(v32 + 16) = v32;
                *(void *)(v32 + 24) = 0;
              }
              *BOOL v36 = v32;
            }
            v32 += 32;
            v34 -= 32;
          }
          while (v34);
        }
        uint64_t v18 = *(void *)(v16 + 728);
        if (v18) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 24))(v18, v5);
        }
        unint64_t v19 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v5 = v19 | *(void *)v5 & 7;
        *(void *)(v5 + 8) = a2;
        *(void *)(v19 + 8) = v5;
        *(void *)a2 = *(void *)a2 & 7 | v5;
        goto LABEL_24;
      }
      BOOL v4 = *(llvm::MachineFunction **)(v6 + 32);
      uint64_t v20 = *(unsigned __int8 **)(a2 + 56);
      int v51 = v20;
      if (v20) {
        llvm::MetadataTracking::track((uint64_t)&v51, v20, 2);
      }
      uint64_t v5 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v4, v13, &v51, 0);
      if (!v51) {
        goto LABEL_20;
      }
      int v42 = *v51;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          int v46 = v51;
        }
        else {
          int v46 = 0;
        }
        if ((v42 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v44 = (unint64_t)(v46 + 8);
LABEL_70:
          int v47 = &v51;
          sub_1CC5FA668(v44 + 16, &v47);
          goto LABEL_20;
        }
        if (v42 == 3) {
          *((void *)v51 + 1) = 0;
        }
      }
      else if ((v51[1] & 0x7F) == 2 || *((_DWORD *)v51 + 3))
      {
        uint64_t v43 = *((void *)v51 + 2);
        if ((v43 & 4) != 0)
        {
          unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
          if (v44) {
            goto LABEL_70;
          }
        }
      }
LABEL_20:
      if (v6 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0) {
        *(_WORD *)(v5 + 44) |= 0xCu;
      }
      sub_1CC31973C((uint64_t *)(v6 + 40), (uint64_t *)a2, v5);
LABEL_24:
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, "", 0);
      *(void *)(*(void *)(a1 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v8;
      uint64_t v22 = *(void *)(a1 + 8);
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
      }
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      LODWORD(v47) = 0x1000000;
      HIDWORD(v47) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
      uint64_t v23 = *((unsigned int *)a3 + 2);
      if (v23)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 2 * v23;
        int v26 = 25;
        do
        {
          uint64_t v27 = &(*a3)[v24];
          unsigned int v28 = *v27;
          unsigned int v29 = v27[1];
          uint64_t v48 = 0;
          LODWORD(v47) = 0;
          HIDWORD(v47) = v28;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
          unsigned int v30 = v24 + 1;
          if (v29 != 16) {
            unsigned int v30 = v26;
          }
          LODWORD(v47) = 1;
          uint64_t v48 = 0;
          uint64_t v49 = v30;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v5, v4, (const llvm::MachineOperand *)&v47);
          v24 += 2;
          ++v26;
        }
        while (v25 != v24);
      }
      uint64_t v12 = (unsigned int *)(*(void *)(v5 + 32) + 4);
      return *v12;
    default:
      uint64_t v12 = *a3;
      return *v12;
  }
}

uint64_t sub_1CBB6F724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v137)(void **__return_ptr, void *, uint64_t);
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _DWORD *v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unsigned int *v179;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  llvm::MachineFunction *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  int v205;
  BOOL v207;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  llvm::MachineMemOperand **v222;
  int *v223;
  uint64_t v225;
  uint64_t v226;
  llvm::MachineMemOperand **v227;
  llvm::MachineMemOperand *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int IncompleteVirtualRegister;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  void *v238;
  uint64_t v239;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(void *, char *, uint64_t, uint64_t);
  uint64_t v272;
  void *v273;
  char *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void (*v280)(void *, char *, uint64_t, uint64_t);
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  char v297;
  uint64_t *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  unsigned __int8 *v302;
  llvm::MachineFunction **v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  int v309;
  int64_t v310;
  unint64_t v311;
  int v312;
  uint64_t v313;
  const char *v314;
  char v315;
  int v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  int v323;
  int v324;
  BOOL v325;
  uint64_t v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v332;
  char *v333;
  int *v334;
  unint64_t v335;
  uint64_t v337;
  int *v338;
  uint64_t v339;
  int *v340;
  int *v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  BOOL v346;
  BOOL v347;
  uint64_t v348;
  int *v349;
  unint64_t v350;
  uint64_t v352;
  int *v353;
  uint64_t v354;
  int *v355;
  int *v356;
  unsigned int v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  BOOL v361;
  BOOL v362;
  int *v363;
  unint64_t v364;
  uint64_t v366;
  int *v367;
  uint64_t v368;
  int *v369;
  int *v370;
  unsigned int v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  BOOL v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  uint64_t v384;
  void *v385;
  const char *v386;
  unsigned int v387;
  unint64_t *v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int *v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  const char *v414;
  unint64_t v415;
  unint64_t *v416;
  uint64_t v417;
  const char *v418;
  unint64_t v419;
  unint64_t *v420;
  uint64_t v421;
  const char *v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  unint64_t v434;
  int v435;
  uint64_t v436;
  unint64_t v437;
  unsigned __int8 *v438;
  unsigned __int8 *v439;
  char *v441;
  char *v442;
  uint64_t v443;
  __int16 v444;
  __int16 v445;
  uint64_t v446;
  uint64_t v448;
  uint64_t v450;
  uint64_t v451;
  unsigned char *v452;
  __int16 v453;
  uint64_t v454;
  void *v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t **v465;
  unsigned __int8 *v466;
  void *v467;
  uint64_t v468;
  unsigned char v469[64];
  void *__dst;
  uint64_t v471;
  uint64_t *v472;
  int v473;
  char v474;
  char v475;
  void *v476;
  uint64_t v477;
  void v478[6];

  uint64_t v3 = a1;
  v478[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  uint64_t v5 = *(void *)(a1 + 104) | *(void *)(a1 + 96);
  uint64_t v6 = v469;
  long long v467 = v469;
  char v468 = 0x400000000;
  uint64_t v465 = (uint64_t **)(a1 + 136);
  *(_DWORD *)(a1 + 144) = 0;
  if (!*(_DWORD *)(a1 + 148)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  **(void **)(a1 + 136) = a2;
  ++*(_DWORD *)(a1 + 144);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v3 + 72);
  unsigned __int8 v458 = *(void *)(v3 + 88);
  unint64_t v459 = *(void **)(v3 + 80);
  long long v476 = v478;
  char v477 = 0x400000000;
  uint64_t v10 = **(void **)(v3 + 136);
  uint64_t v450 = *(void *)(*(void *)(v10 + 16) + 8);
  uint64_t v461 = v3 + 184;
  char v463 = v9;
  unsigned int v464 = (uint64_t *)&v472;
  char v455 = (void *)(v4 + 424);
  long long v453 = *(_WORD *)(v10 + 44);
  long long v457 = v3 + 208;
  uint64_t v451 = v3 + 272;
  long long v454 = ~(_BYTE)v5 & 7;
  int v460 = v3;
  unint64_t v462 = v4;
LABEL_3:
  while (2)
  {
    uint64_t v11 = v8 + 1;
    uint64_t v12 = *(void *)(v7 + 8 * v8);
    uint64_t v13 = v8;
    switch(v12)
    {
      case 1:
        int v167 = *(void *)(v7 + 8 * v11);
        uint64_t v168 = (void *)(v7 + 8 * v8);
        uint64_t v169 = v168[2];
        uint64_t v8 = v168[4];
        int v170 = **(unsigned __int16 **)((*v465)[v167] + 16);
        int v171 = v169 > v170 || v168[3] <= v170;
        if (!v171)
        {
          int v172 = *(void *)(v7 + 8 * (v13 - v169 + v170) + 40);
          if (v172) {
            goto LABEL_143;
          }
        }
        continue;
      case 2:
        long long v146 = *(void *)(v7 + 8 * v11);
        long long v147 = v7 + 8 * v8;
        long long v148 = *(unsigned int *)(v147 + 16);
        uint64_t v8 = *(void *)(v147 + 40);
        long long v149 = *(void *)((*v465)[v146] + 32);
        if (*(unsigned char *)(v149 + 32 * v148)) {
          continue;
        }
        long long v150 = *(_DWORD *)(v149 + 32 * v148 + 4);
        if (v150 < 0 && (long long v151 = v150 & 0x7FFFFFFF, v151 < *(_DWORD *)(v4 + 432))) {
          long long v152 = *(void *)(*v455 + 8 * v151);
        }
        else {
          long long v152 = 0;
        }
        uint64_t v316 = *(_DWORD *)(v3 + 264);
        if (v316)
        {
          BOOL v317 = 64;
          uint64_t v318 = v451;
        }
        else
        {
          uint64_t v318 = *(void *)(v3 + 272);
          BOOL v317 = *(_DWORD *)(v3 + 280);
          if (!v317)
          {
            uint64_t v431 = 0;
            goto LABEL_544;
          }
          uint64_t v3 = v460;
          uint64_t v4 = v462;
        }
        unint64_t v319 = v317 - 1;
        LODWORD(v320) = (v317 - 1) & (37 * (v152 & 0xFFFFFFFA | (4 * (v152 & 1)) | (v152 >> 2) & 1));
        uint64_t v321 = (uint64_t *)(v318 + 16 * v320);
        v322 = *v321;
        if (v152 == *v321) {
          goto LABEL_348;
        }
        uint64_t v323 = 1;
        while (v322 != 2)
        {
          uint64_t v324 = v320 + v323++;
          uint64_t v320 = v324 & v319;
          v322 = *(void *)(v318 + 16 * v320);
          if (v152 == v322)
          {
            uint64_t v321 = (uint64_t *)(v318 + 16 * v320);
            goto LABEL_348;
          }
        }
        if (v316)
        {
          uint64_t v431 = 64;
          uint64_t v318 = v451;
        }
        else
        {
          uint64_t v318 = *(void *)(v460 + 272);
          uint64_t v431 = *(unsigned int *)(v460 + 280);
        }
LABEL_544:
        uint64_t v321 = (uint64_t *)(v318 + 16 * v431);
        uint64_t v3 = v460;
        uint64_t v4 = v462;
LABEL_348:
        unsigned int v325 = (v316 & 1) == 0;
        uint64_t v326 = v451;
        if (v325) {
          uint64_t v326 = *(void *)(v3 + 272);
        }
        int v327 = *(_DWORD *)(v3 + 280);
        if (!v325) {
          int v327 = 64;
        }
        if ((uint64_t *)(v326 + 16 * v327) != v321)
        {
          long long v328 = *(void *)(v147 + 24);
          uint64_t v329 = *(void *)(v147 + 32);
          unint64_t v330 = *((unsigned int *)v321 + 2);
          if (v328 <= v330 && v329 > v330)
          {
            int v172 = *(void *)(v7 + 8 * (v13 - v328 + v330) + 48);
            if (v172)
            {
LABEL_143:
              if (v477 >= (unint64_t)HIDWORD(v477)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v476[v477] = v8;
              LODWORD(v477) = v477 + 1;
              uint64_t v8 = v172;
            }
          }
        }
        continue;
      case 3:
        uint64_t v116 = v7 + 8 * v8;
        uint64_t v117 = *(void *)(v116 + 16);
        uint64_t v118 = *(unsigned int *)(v116 + 24);
        uint64_t v119 = *v465;
        uint64_t v120 = *(void *)((*v465)[v117] + 32);
        if (*(unsigned char *)(v120 + 32 * v118)) {
          goto LABEL_498;
        }
        uint64_t v121 = *(unsigned int *)(v120 + 32 * v118 + 4);
        if ((v121 - 1) <= 0x3FFFFFFE) {
          goto LABEL_498;
        }
        if ((v121 & 0x80000000) != 0) {
          unsigned int v122 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v121 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v122 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v121);
        }
        uint64_t v123 = *v122;
        if (!v123) {
          goto LABEL_539;
        }
        if (*(unsigned char *)(v123 + 3)) {
          goto LABEL_108;
        }
        uint64_t v123 = *(void *)(v123 + 24);
        if (v123)
        {
          uint64_t v3 = v460;
          uint64_t v4 = v462;
          if (*(unsigned char *)(v123 + 3)) {
LABEL_108:
          }
            uint64_t v124 = *(void *)(v123 + 8);
          else {
LABEL_539:
          }
            uint64_t v124 = 0;
        }
        else
        {
          uint64_t v124 = 0;
          uint64_t v3 = v460;
          uint64_t v4 = v462;
        }
        unint64_t v125 = *(void *)(v7 + 8 * v11);
        v8 += 4;
        unint64_t v126 = *(unsigned int *)(v3 + 144);
        if (v125 >= v126)
        {
          if (v126 >= *(_DWORD *)(v3 + 148)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v119[v126] = v124;
          ++*(_DWORD *)(v3 + 144);
        }
        else
        {
          v119[v125] = v124;
        }
        continue;
      case 4:
        if ((v454 & *(void *)(*(void *)(v3 + 240) + 8 * *(void *)(v7 + 8 * v11))) != 0) {
          goto LABEL_498;
        }
        v8 += 2;
        continue;
      case 5:
      case 6:
        v8 += 3;
        if (v12 == 6)
        {
          uint64_t v23 = *(void *)(v7 + 8 * v8);
          uint64_t v8 = v13 + 4;
        }
        else
        {
          uint64_t v23 = -1;
        }
        uint64_t v28 = **(unsigned __int16 **)((*v465)[*(void *)(v7 + 8 * v11)] + 16);
        if (*(void *)(v7 + 8 * v13 + 16) != v28 && v23 != v28) {
          goto LABEL_498;
        }
        continue;
      case 7:
        v8 += 3;
        uint64_t v53 = *(void **)(v7 + 8 * v13 + 16);
        int v82 = (void *)*(unsigned int *)((*v465)[*(void *)(v7 + 8 * v11)] + 40);
        goto LABEL_333;
      case 8:
      case 11:
        uint64_t v24 = v8 + 2;
        if (v12 == 11)
        {
          uint64_t v25 = *(unsigned int *)(v7 + 8 * v24);
          uint64_t v24 = v8 + 3;
        }
        else
        {
          uint64_t v25 = 1;
        }
        uint64_t v30 = *(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32);
        int v31 = *(unsigned __int8 *)(v30 + 32 * v25);
        uint64_t v32 = v30 + 32 * v25;
        if (v31 == 2)
        {
          uint64_t v33 = *(void *)(v32 + 16);
          unsigned int v34 = *(_DWORD *)(v33 + 32);
          if (v34 > 0x40) {
            uint64_t v35 = **(void **)(v33 + 24);
          }
          else {
            uint64_t v35 = (uint64_t)(*(void *)(v33 + 24) << -(char)v34) >> -(char)v34;
          }
        }
        else
        {
          uint64_t v35 = *(void *)(v32 + 16);
        }
        uint64_t v8 = v24 + 1;
        if (((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 48))(v3, *(void *)(v7 + 8 * v24), v35) & 1) == 0)goto LABEL_498; {
        continue;
        }
      case 9:
        uint64_t v127 = *(void *)(v7 + 8 * v11);
        uint64_t v128 = *(void *)(v7 + 8 * v8 + 16);
        LODWORD(v471) = 1;
        __dst = 0;
        uint64_t v129 = *(void *)(*(void *)((*v465)[v127] + 32) + 48);
        long long v130 = (void **)(v129 + 24);
        unsigned int v131 = *(_DWORD *)(v129 + 32);
        if (v131 > 0x40)
        {
          if (&__dst != v130)
          {
            llvm::APInt::reallocate((uint64_t)&__dst, v131);
            if (v471 <= 0x40) {
              __dst = *v130;
            }
            else {
              memcpy(__dst, *v130, (((unint64_t)v471 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
        else
        {
          __dst = *v130;
          LODWORD(v471) = v131;
        }
        v8 += 3;
        if ((*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 56))(v3, v128, &__dst)) {
          goto LABEL_286;
        }
        if (v477)
        {
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
LABEL_286:
          uint64_t v297 = 1;
        }
        else
        {
          uint64_t v297 = 0;
          long long v456 = 0;
        }
        if (v471 >= 0x41 && __dst) {
          MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
        }
        if ((v297 & 1) == 0) {
          goto LABEL_585;
        }
        continue;
      case 10:
        uint64_t v201 = *(void *)(v7 + 8 * v8 + 16);
        uint64_t v202 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32) + 48);
        uint64_t v203 = *(void *)(v202 + 32);
        if ((_UNKNOWN *)v203 == &unk_1CFB2E344)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v471, (const llvm::detail::DoubleAPFloat *)(v202 + 32));
        }
        else
        {
          v471 = *(void *)(v202 + 32);
          if ((*(_DWORD *)(v203 + 8) + 64) >= 0x80) {
            operator new[]();
          }
          uint64_t v204 = *(unsigned char *)(v202 + 52);
          uint64_t v205 = v204 & 7;
          v474 = v474 & 0xF0 | v204 & 0xF;
          uint64_t v473 = *(_DWORD *)(v202 + 48);
          long long v207 = (v204 & 6) != 0 && v205 != 3;
          if (v205 == 1 || v207)
          {
            uint64_t v209 = *(unsigned int *)(v471 + 8);
            int v210 = v464;
            if ((v209 - 64) <= 0xFFFFFF7F) {
              int v210 = v472;
            }
            char v213 = *(uint64_t **)(v202 + 40);
            int v212 = (uint64_t *)(v202 + 40);
            uint64_t v211 = v213;
            if ((*(_DWORD *)(*(v212 - 1) + 8) - 64) >= 0xFFFFFF80) {
              uint64_t v211 = v212;
            }
            if (v209 <= 0xFFFFFFBF)
            {
              uint64_t v214 = (unint64_t)(v209 + 64) >> 6;
              do
              {
                uint64_t v215 = *v211++;
                *v210++ = v215;
                --v214;
              }
              while (v214);
            }
          }
        }
        v8 += 3;
        if ((*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v3 + 64))(v3, v201, &__dst)) {
          goto LABEL_193;
        }
        if (v477)
        {
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
LABEL_193:
          uint64_t v216 = 1;
        }
        else
        {
          uint64_t v216 = 0;
          long long v456 = 0;
        }
        if ((_UNKNOWN *)v471 == &unk_1CFB2E344)
        {
          sub_1CB845718(v464);
        }
        else if ((*(_DWORD *)(v471 + 8) - 64) <= 0xFFFFFF7F && v472)
        {
          MEMORY[0x1D25D9CB0](v472, 0x1000C8000313F17);
        }
        if ((v216 & 1) == 0) {
          goto LABEL_585;
        }
        continue;
      case 12:
        uint64_t v87 = *(void *)(v7 + 8 * v11);
        int v88 = *(_DWORD *)(v7 + 8 * v8 + 16);
        uint64_t v89 = (*v465)[v87];
        unint64_t v90 = *(void *)(v89 + 48);
        if (v90 < 8) {
          goto LABEL_82;
        }
        v8 += 3;
        if ((v90 & 7) != 0)
        {
          uint64_t v91 = (_DWORD *)(v90 & 0xFFFFFFFFFFFFFFF8);
          BOOL v92 = (*(void *)(v89 + 48) & 7) != 3 || v91 == 0;
          if (!v92 && *v91 == 1) {
            goto LABEL_398;
          }
LABEL_82:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v89 + 48) = v90 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v89 = (*v465)[v87];
          unint64_t v90 = *(void *)(v89 + 48);
        }
        if (v90 < 8) {
          continue;
        }
LABEL_398:
        int v349 = (int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        int v350 = v90 & 7;
        if (v350)
        {
          if (v350 != 3 || v349 == 0) {
            continue;
          }
          uint64_t v354 = *v349;
          uint64_t v353 = v349 + 2;
          uint64_t v352 = v354;
          if (!v354) {
            continue;
          }
          int v355 = &v353[2 * v352];
          uint64_t v356 = v353;
        }
        else
        {
          *(void *)(v89 + 48) = v349;
          uint64_t v356 = (int *)(v89 + 48);
          int v355 = v356 + 2;
        }
        unsigned int v357 = v477;
        do
        {
          unsigned int v358 = *(unsigned __int16 *)(*(void *)v356 + 36);
          uint64_t v359 = (v358 >> 8) & 0xF;
          uint64_t v360 = v358 >> 12;
          unint64_t v361 = v360 == 5 && v359 == 4;
          if (v361 || (v360 == 4 ? (uint64_t v362 = v359 == 5) : (uint64_t v362 = 0), v362))
          {
            LODWORD(v359) = 6;
          }
          else if (!byte_1CDAF3AB8[8 * v359 + v360])
          {
            LODWORD(v359) = v360;
          }
          if (v359 != v88)
          {
            if (!v357) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v357];
            LODWORD(v477) = v357;
          }
          v356 += 2;
        }
        while (v356 != v355);
        continue;
      case 13:
        long long v153 = *(void *)(v7 + 8 * v11);
        unsigned int v154 = *(unsigned int *)(v7 + 8 * v8 + 16);
        uint64_t v155 = (*v465)[v153];
        unsigned int v156 = *(void *)(v155 + 48);
        if (v156 < 8) {
          goto LABEL_130;
        }
        v8 += 3;
        if ((v156 & 7) != 0)
        {
          uint64_t v157 = (_DWORD *)(v156 & 0xFFFFFFFFFFFFFFF8);
          int v158 = (*(void *)(v155 + 48) & 7) != 3 || v157 == 0;
          if (!v158 && *v157 == 1) {
            goto LABEL_429;
          }
LABEL_130:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v155 + 48) = v156 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v155 = (*v465)[v153];
          unsigned int v156 = *(void *)(v155 + 48);
        }
        if (v156 < 8) {
          continue;
        }
LABEL_429:
        v363 = (int *)(v156 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v364 = v156 & 7;
        if (v364)
        {
          if (v364 != 3 || v363 == 0) {
            continue;
          }
          unint64_t v368 = *v363;
          v367 = v363 + 2;
          uint64_t v366 = v368;
          if (!v368) {
            continue;
          }
          uint64_t v369 = &v367[2 * v366];
          uint64_t v370 = v367;
        }
        else
        {
          *(void *)(v155 + 48) = v363;
          uint64_t v370 = (int *)(v155 + 48);
          uint64_t v369 = v370 + 2;
        }
        uint64_t v371 = v477;
        do
        {
          uint64_t v372 = *(unsigned __int16 *)(*(void *)v370 + 36);
          unint64_t v373 = (v372 >> 8) & 0xF;
          uint64_t v374 = v372 >> 12;
          uint64_t v375 = v374 == 5 && v373 == 4;
          if (v375 || (v374 == 4 ? (uint64_t v376 = v373 == 5) : (uint64_t v376 = 0), v376))
          {
            unint64_t v373 = 6;
          }
          else if (byte_1CDAF3AB8[8 * v373 + v374])
          {
            unint64_t v373 = v373;
          }
          else
          {
            unint64_t v373 = v374;
          }
          if (!byte_1CD973E80[8 * v373 + v154])
          {
            if (!v371) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v371];
            LODWORD(v477) = v371;
          }
          v370 += 2;
        }
        while (v370 != v369);
        continue;
      case 14:
        uint64_t v73 = *(void *)(v7 + 8 * v11);
        uint64_t v74 = *(unsigned int *)(v7 + 8 * v8 + 16);
        uint64_t v75 = (*v465)[v73];
        unint64_t v76 = *(void *)(v75 + 48);
        if (v76 < 8) {
          goto LABEL_67;
        }
        v8 += 3;
        if ((v76 & 7) != 0)
        {
          int v77 = (_DWORD *)(v76 & 0xFFFFFFFFFFFFFFF8);
          BOOL v78 = (*(void *)(v75 + 48) & 7) != 3 || v77 == 0;
          if (!v78 && *v77 == 1) {
            goto LABEL_370;
          }
LABEL_67:
          if (!v477) {
            goto LABEL_584;
          }
          uint64_t v8 = v476[v477 - 1];
          LODWORD(v477) = v477 - 1;
        }
        else
        {
          *(void *)(v75 + 48) = v76 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v75 = (*v465)[v73];
          unint64_t v76 = *(void *)(v75 + 48);
        }
        if (v76 < 8) {
          continue;
        }
LABEL_370:
        long long v334 = (int *)(v76 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v335 = v76 & 7;
        if (v335)
        {
          if (v335 != 3 || v334 == 0) {
            continue;
          }
          long long v339 = *v334;
          long long v338 = v334 + 2;
          uint64_t v337 = v339;
          if (!v339) {
            continue;
          }
          long long v340 = &v338[2 * v337];
          unint64_t v341 = v338;
        }
        else
        {
          *(void *)(v75 + 48) = v334;
          unint64_t v341 = (int *)(v75 + 48);
          long long v340 = v341 + 2;
        }
        uint64_t v342 = v477;
        do
        {
          uint64_t v343 = *(unsigned __int16 *)(*(void *)v341 + 36);
          long long v344 = (v343 >> 8) & 0xF;
          uint64_t v345 = v343 >> 12;
          uint64_t v346 = (v343 >> 12) == 5 && v344 == 4;
          if (v346 || (v345 == 4 ? (int v347 = v344 == 5) : (int v347 = 0), v347))
          {
            unint64_t v348 = 6;
          }
          else if (byte_1CDAF3AB8[8 * v344 + v345])
          {
            unint64_t v348 = (v343 >> 8) & 0xF;
          }
          else
          {
            unint64_t v348 = v345;
          }
          if (!byte_1CDAF3AB8[8 * v74 + v348])
          {
            if (!v342) {
              goto LABEL_584;
            }
            uint64_t v8 = v476[--v342];
            LODWORD(v477) = v342;
          }
          v341 += 2;
        }
        while (v341 != v340);
        continue;
      case 15:
        uint64_t v173 = *(void *)(v7 + 8 * v11);
        uint64_t v174 = v7 + 8 * v8;
        int v175 = *(void *)(v174 + 16);
        uint64_t v176 = *(void *)(v174 + 24);
        uint64_t v177 = (*v465)[v173];
        int v178 = *(void *)(v177 + 48);
        if (v178 < 8) {
          goto LABEL_152;
        }
        if ((v178 & 7) != 0)
        {
          int v179 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
          if ((v178 & 7) != 3 || v179 == 0) {
LABEL_152:
          }
            unsigned int v406 = 0;
          else {
            unsigned int v406 = *v179;
          }
        }
        else
        {
          *(void *)(v177 + 48) = v178 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v406 = 1;
        }
        if (v175 >= v406) {
          goto LABEL_498;
        }
        uint64_t v407 = (*v465)[v173];
        uint64_t v410 = *(void *)(v407 + 48);
        uint64_t v408 = (unint64_t *)(v407 + 48);
        unsigned int v409 = v410;
        if ((v410 & 7) != 0) {
          uint64_t v408 = (unint64_t *)((v409 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          *uint64_t v408 = v409 & 0xFFFFFFFFFFFFFFF8;
        }
        int v411 = v408[v175];
        int v413 = *(void *)(v411 + 24);
        v412 = (unint64_t *)(v411 + 24);
        if ((v413 & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          v415 = (unint64_t)(sub_1CB8F1DC4(v412) + 7) >> 3;
          if (v414 == 1) {
        }
          }
        else
        {
          v415 = -1;
        }
        v8 += 4;
        if (v415 != v176) {
          goto LABEL_498;
        }
        continue;
      case 16:
        uint64_t v93 = *(void *)(v7 + 8 * v11);
        uint64_t v94 = v7 + 8 * v8;
        uint64_t v96 = *(void *)(v94 + 16);
        uint64_t v95 = *(void *)(v94 + 24);
        uint64_t v97 = (*v465)[v93];
        unint64_t v98 = *(void *)(v97 + 48);
        if (v98 < 8) {
          goto LABEL_91;
        }
        if ((v98 & 7) != 0)
        {
          uint64_t v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
          if ((v98 & 7) != 3 || v99 == 0) {
LABEL_91:
          }
            int v392 = 0;
          else {
            int v392 = *v99;
          }
        }
        else
        {
          *(void *)(v97 + 48) = v98 & 0xFFFFFFFFFFFFFFF8;
          int v392 = 1;
        }
        if (v96 >= v392) {
          goto LABEL_498;
        }
        unsigned int v393 = (*v465)[v93];
        uint64_t v396 = *(void *)(v393 + 48);
        uint64_t v394 = (unint64_t *)(v393 + 48);
        uint64_t v395 = v396;
        if ((v396 & 7) != 0)
        {
          uint64_t v394 = (unint64_t *)((v395 & 0xFFFFFFFFFFFFFFF8) + 8);
          if (!v95) {
            goto LABEL_498;
          }
        }
        else
        {
          *uint64_t v394 = v395 & 0xFFFFFFFFFFFFFFF8;
          if (!v95) {
            goto LABEL_498;
          }
        }
        v8 += 4 + (int)v95;
        uint64_t v397 = *(_DWORD *)(v394[v96] + 16);
        unsigned int v398 = (int *)(v7 + 32 + 8 * v13);
        while (1)
        {
          uint64_t v399 = *v398;
          v398 += 2;
          if (v397 == v399) {
            goto LABEL_3;
          }
          LODWORD(v95) = v95 - 1;
          if (!v95) {
            goto LABEL_498;
          }
        }
      case 17:
        uint64_t v108 = *(void *)(v7 + 8 * v11);
        uint64_t v109 = v7 + 8 * v8;
        uint64_t v110 = *(void *)(v109 + 16);
        unint64_t v111 = *(unsigned int *)(v109 + 24);
        uint64_t v112 = (*v465)[v108];
        unint64_t v113 = *(void *)(v112 + 48);
        if (v113 < 8) {
          goto LABEL_101;
        }
        if ((v113 & 7) != 0)
        {
          BOOL v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
          if ((v113 & 7) != 3 || v114 == 0) {
LABEL_101:
          }
            uint64_t v400 = 0;
          else {
            uint64_t v400 = *v114;
          }
        }
        else
        {
          *(void *)(v112 + 48) = v113 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v400 = 1;
        }
        if (v110 >= v400) {
          goto LABEL_498;
        }
        v401 = (*v465)[v108];
        uint64_t v404 = *(void *)(v401 + 48);
        uint64_t v402 = (unint64_t *)(v401 + 48);
        uint64_t v403 = v404;
        if ((v404 & 7) != 0) {
          uint64_t v402 = (unint64_t *)((v403 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          *uint64_t v402 = v403 & 0xFFFFFFFFFFFFFFF8;
        }
        v8 += 4;
        uint64_t v405 = (1 << *(unsigned char *)(v402[v110] + 34)) | *(void *)(v402[v110] + 8);
        if (1 << (63 - __clz(v405 & -v405)) < v111) {
          goto LABEL_498;
        }
        continue;
      case 18:
      case 19:
      case 20:
        uint64_t v14 = *(void *)(v7 + 8 * v11);
        uint64_t v15 = v7 + 8 * v8;
        uint64_t v16 = *(unsigned int *)(v15 + 24);
        uint64_t v17 = (*v465)[v14];
        uint64_t v18 = *(void *)(v17 + 32);
        if (*(unsigned char *)(v18 + 32 * v16)) {
          goto LABEL_498;
        }
        uint64_t v19 = *(void *)(v15 + 16);
        unint64_t v20 = *(void *)(v17 + 48);
        if (v20 < 8) {
          goto LABEL_12;
        }
        if ((v20 & 7) != 0)
        {
          unsigned int v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 7) != 3 || v21 == 0) {
LABEL_12:
          }
            uint64_t v377 = 0;
          else {
            uint64_t v377 = *v21;
          }
        }
        else
        {
          *(void *)(v17 + 48) = v20 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v377 = 1;
        }
        if (v19 >= v377) {
          goto LABEL_498;
        }
        v378 = (*v465)[v14];
        unint64_t v381 = *(void *)(v378 + 48);
        uint64_t v379 = (unint64_t *)(v378 + 48);
        long long v380 = v381;
        if ((v381 & 7) != 0) {
          uint64_t v379 = (unint64_t *)((v380 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else {
          void *v379 = v380 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v382 = v379[v19];
        uint64_t v383 = *(_DWORD *)(v18 + 32 * v16 + 4);
        if (v383 < 0 && (long long v384 = v383 & 0x7FFFFFFF, v384 < *(_DWORD *)(v4 + 432))) {
          uint64_t v385 = *(void **)(*v455 + 8 * v384);
        }
        else {
          uint64_t v385 = 0;
        }
        __dst = v385;
        uint64_t v387 = sub_1CB8F1DC4((unint64_t *)&__dst);
        if (v386 == 1) {
        v8 += 4;
        }
        switch(v12)
        {
          case 20:
            uint64_t v421 = *(void *)(v382 + 24);
            v420 = (unint64_t *)(v382 + 24);
            if ((v421 & 0xFFFFFFFFFFFFFFF9) == 0) {
              continue;
            }
            uint64_t v423 = sub_1CB8F1DC4(v420);
            if (v422 == 1) {
            if (v423 > v387)
            }
              continue;
            break;
          case 19:
            uint64_t v417 = *(void *)(v382 + 24);
            int v416 = (unint64_t *)(v382 + 24);
            if ((v417 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              uint64_t v419 = sub_1CB8F1DC4(v416);
              if (v418 == 1) {
              if (v419 < v387)
              }
                continue;
            }
            break;
          case 18:
            BOOL v389 = *(void *)(v382 + 24);
            uint64_t v388 = (unint64_t *)(v382 + 24);
            if ((v389 & 0xFFFFFFFFFFFFFFF9) != 0)
            {
              uint64_t v391 = sub_1CB8F1DC4(v388);
              if (v390 == 1) {
              if (v391 == v387)
              }
                continue;
            }
            break;
          default:
            continue;
        }
        goto LABEL_498;
      case 21:
      case 22:
        v8 += 2;
        if (v12 == 21) {
          uint64_t v26 = -1;
        }
        else {
          uint64_t v26 = 0;
        }
        if ((sub_1CC73F70C(*(_DWORD *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32) + 4), v4, v26, 0) & 1) == 0) {
          goto LABEL_498;
        }
        continue;
      case 23:
        v8 += 3;
        if (((*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v3 + 72))(v3, *(unsigned int *)(v7 + 8 * v13 + 16), *(void *)(*(void *)(v3 + 136) + 8 * *(void *)(v7 + 8 * v11)), v457) & 1) == 0)goto LABEL_498; {
        continue;
        }
      case 24:
        uint64_t v47 = *(void *)(v7 + 8 * v11);
        uint64_t v48 = v7 + 8 * v8;
        uint64_t v49 = *(unsigned int *)(v48 + 16);
        uint64_t v50 = *(void *)((*v465)[v47] + 32);
        if (*(unsigned char *)(v50 + 32 * v49)) {
          goto LABEL_498;
        }
        int v51 = *(_DWORD *)(v50 + 32 * v49 + 4);
        if (v51 < 0 && (uint64_t v52 = v51 & 0x7FFFFFFF, v52 < *(_DWORD *)(v4 + 432))) {
          uint64_t v53 = *(void **)(*v455 + 8 * v52);
        }
        else {
          uint64_t v53 = 0;
        }
        v8 += 4;
        int v82 = *(void **)(*(void *)(v3 + 232) + 8 * *(void *)(v48 + 24));
        goto LABEL_333;
      case 25:
        unsigned int v160 = *(void *)(v7 + 8 * v11);
        int v161 = v7 + 8 * v8;
        int v162 = *v465;
        uint64_t v163 = *(void *)((*v465)[v160] + 32) + 32 * *(unsigned int *)(v161 + 16);
        int v164 = *(_DWORD *)(v163 + 4);
        if (v164 < 0 && (uint64_t v165 = v164 & 0x7FFFFFFF, v165 < *(_DWORD *)(v4 + 432))) {
          int v166 = *(void *)(*v455 + 8 * v165);
        }
        else {
          int v166 = 0;
        }
        unint64_t v284 = *(void *)(v161 + 24);
        __dst = (void *)v166;
        if (!v284)
        {
          uint64_t v285 = *(void *)(*(void *)(v162[v160] + 24) + 32);
          uint64_t v286 = 35;
          if ((v166 & 4) == 0) {
            uint64_t v286 = 19;
          }
          long long v287 = *(void *)(*(void *)v285 + 40);
          long long v288 = *(void *)(v287 + 504);
          uint64_t v289 = (v166 >> v286) & 0xFFFFFF;
          if (!v289) {
            goto LABEL_271;
          }
          uint64_t v290 = *(unsigned int *)(v287 + 512);
          uint64_t v291 = *(void *)(v287 + 504);
          if (v290)
          {
            uint64_t v291 = v288;
            uint64_t v292 = v290;
            do
            {
              BOOL v293 = v292 >> 1;
              unsigned int v294 = v291 + 16 * (v292 >> 1);
              uint64_t v295 = *(_DWORD *)(v294 + 8);
              uint64_t v296 = v294 + 16;
              v292 += ~(v292 >> 1);
              if (v295 < v289) {
                uint64_t v291 = v296;
              }
              else {
                uint64_t v292 = v293;
              }
            }
            while (v292);
          }
          if (v291 == v288 + 16 * v290 || *(_DWORD *)(v291 + 8) != v289) {
LABEL_271:
          }
            uint64_t v291 = v288;
          unint64_t v284 = *(unsigned int *)(v291 + 4);
        }
        if (!*(unsigned char *)v163 && (v166 & 0xFFFFFFFFFFFFFFF9) != 0 && (v166 & 2) != 0 && (v166 & 4) == 0)
        {
          uint64_t v305 = sub_1CB8F1DC4((unint64_t *)&__dst);
          if (v304 == 1) {
          if (v305 == v284)
          }
            goto LABEL_339;
        }
        if (!v477) {
          goto LABEL_584;
        }
        uint64_t v8 = v476[v477 - 1];
        LODWORD(v477) = v477 - 1;
        continue;
      case 26:
        BOOL v250 = *(void *)(v7 + 8 * v11);
        unsigned int v251 = v7 + 8 * v8;
        BOOL v252 = *(unsigned int *)(v251 + 16);
        uint64_t v253 = *(void *)((*v465)[v250] + 32);
        if (!*(unsigned char *)(v253 + 32 * v252))
        {
          uint64_t v254 = v253 + 32 * v252;
          int v257 = *(_DWORD *)(v254 + 4);
          int v256 = (unsigned int *)(v254 + 4);
          int v255 = v257;
          if (v257 < 0 && (int v258 = v255 & 0x7FFFFFFF, v258 < *(_DWORD *)(v4 + 432))) {
            uint64_t v259 = *(void *)(*v455 + 8 * v258);
          }
          else {
            uint64_t v259 = 0;
          }
          v8 += 4;
          uint64_t v332 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v458 + 24))(v458, *(void *)(v459[30] + 8 * *(unsigned int *)(v251 + 24)), v259);
          if (v332 == llvm::RegisterBankInfo::getRegBank(v458, *v256, v4, (uint64_t)v459)) {
            continue;
          }
        }
        goto LABEL_498;
      case 27:
        uint64_t v132 = *(void *)(v7 + 8 * v11);
        uint64_t v133 = v7 + 8 * v8;
        uint64_t v134 = *(unsigned int *)(v133 + 16);
        uint64_t v135 = *(void *)(v133 + 24);
        uint64_t v136 = *(void *)(v3 + 248) + 16 * *(void *)(v133 + 32);
        long long v137 = *(void (**)(void **__return_ptr, void *, uint64_t))v136;
        long long v138 = *(void *)(v136 + 8);
        long long v139 = (void *)(v3 + (v138 >> 1));
        if (v138) {
          long long v137 = *(void (**)(void **__return_ptr, void *, uint64_t))(*v139 + v137);
        }
        v137(&__dst, v139, *(void *)((*v465)[v132] + 32) + 32 * v134);
        if (!v475) {
          goto LABEL_498;
        }
        v8 += 5;
        sub_1CB9A6FAC((unsigned int *)(*(void *)(v3 + 112) + 144 * v135), (uint64_t)&__dst);
        if (v475)
        {
          uint64_t v298 = (uint64_t *)__dst;
          if (v471)
          {
            int v299 = 32 * v471;
            long long v300 = (char *)__dst - 32;
            do
            {
              int v301 = *(char **)&v300[v299 + 24];
              if (&v300[v299] == v301)
              {
                (*(void (**)(char *))(*(void *)&v300[v299] + 32))(&v300[v299]);
              }
              else if (v301)
              {
                (*(void (**)(char *))(*(void *)v301 + 40))(v301);
              }
              v299 -= 32;
            }
            while (v299);
            uint64_t v298 = (uint64_t *)__dst;
          }
          if (v298 != v464) {
            free(v298);
          }
        }
        continue;
      case 28:
        int v140 = *(void *)(v7 + 8 * v11);
        int v141 = v7 + 8 * v8;
        long long v142 = *(void *)((*v465)[v140] + 32) + 32 * *(unsigned int *)(v141 + 16);
        if (*(unsigned char *)v142) {
          goto LABEL_498;
        }
        long long v143 = *(_DWORD *)(v142 + 4);
        if (v143 < 0 && (long long v144 = v143 & 0x7FFFFFFF, v144 < *(_DWORD *)(v4 + 432))) {
          long long v145 = *(void **)(*v455 + 8 * v144);
        }
        else {
          long long v145 = 0;
        }
        uint64_t v313 = *(void *)(v141 + 24);
        __dst = v145;
        uint64_t v315 = sub_1CB8F1DC4((unint64_t *)&__dst);
        if (v314 == 1) {
        if ((sub_1CC70A570(v3, v142, v313 << -v315 >> -v315, v4) & 1) == 0)
        }
          goto LABEL_498;
LABEL_339:
        v8 += 4;
        continue;
      case 29:
        uint64_t v79 = v7 + 8 * v8;
        uint64_t v80 = *(unsigned int *)(v79 + 16);
        v8 += 4;
        uint64_t v81 = (*v465)[*(void *)(v7 + 8 * v11)];
        int v82 = *(void **)(v79 + 24);
        uint64_t v83 = *(void *)(v81 + 32);
        int v84 = *(unsigned __int8 *)(v83 + 32 * v80);
        if (v84 == 2)
        {
          uint64_t v306 = *(void *)(v83 + 32 * v80 + 16);
          uint64_t v307 = (void *)(v306 + 24);
          uint64_t v308 = *(unsigned int *)(v306 + 32);
          if (v308 >= 0x41)
          {
            uint64_t v309 = 0;
            uint64_t v310 = (unint64_t)(v308 + 63) >> 6;
            do
            {
              int v171 = v310-- < 1;
              if (v171) {
                break;
              }
              uint64_t v311 = *(void *)(*v307 + 8 * v310);
              v309 += __clz(v311);
            }
            while (!v311);
            BOOL v312 = v308 | 0xFFFFFFC0;
            if ((v308 & 0x3F) == 0) {
              BOOL v312 = 0;
            }
            if ((v308 - v309 - v312) > 0x40) {
              goto LABEL_498;
            }
            uint64_t v307 = (void *)*v307;
          }
          uint64_t v53 = (void *)*v307;
        }
        else
        {
          if (v84 != 1) {
            goto LABEL_498;
          }
          uint64_t v53 = *(void **)(v83 + 32 * v80 + 16);
        }
LABEL_333:
        if (v53 == v82) {
          continue;
        }
LABEL_498:
        if (!v477)
        {
LABEL_584:
          long long v456 = 0;
          goto LABEL_585;
        }
        uint64_t v8 = v476[v477 - 1];
        LODWORD(v477) = v477 - 1;
        continue;
      case 30:
        uint64_t v61 = *(void *)(v7 + 8 * v11);
        uint64_t v62 = v7 + 8 * v8;
        uint64_t v63 = (*v465)[v61];
        uint64_t v64 = *(unsigned int *)(v62 + 16);
        uint64_t v65 = *(void *)(v63 + 32);
        if (*(unsigned char *)(v65 + 32 * v64) != 17) {
          goto LABEL_498;
        }
        goto LABEL_73;
      case 31:
        uint64_t v85 = *(void *)(v7 + 8 * v11);
        uint64_t v62 = v7 + 8 * v8;
        uint64_t v86 = (*v465)[v85];
        uint64_t v64 = *(unsigned int *)(v62 + 16);
        uint64_t v65 = *(void *)(v86 + 32);
        if (*(unsigned char *)(v65 + 32 * v64) != 18) {
          goto LABEL_498;
        }
LABEL_73:
        v8 += 4;
        if (*(void *)(v62 + 24) != *(_DWORD *)(v65 + 32 * v64 + 16)) {
          goto LABEL_498;
        }
        continue;
      case 32:
        v8 += 3;
        if (*(unsigned char *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                      + 32 * *(unsigned int *)(v7 + 8 * v13 + 16)) != 4)
          goto LABEL_498;
        continue;
      case 33:
        v8 += 3;
        if (*(unsigned char *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                      + 32 * *(unsigned int *)(v7 + 8 * v13 + 16)) != 1)
          goto LABEL_498;
        continue;
      case 34:
        v8 += 2;
        if (!sub_1CC70A610(v3, *(llvm::MachineInstr **)(*(void *)(v3 + 136) + 8 * *(void *)(v7 + 8 * v11)), **(void **)(v3 + 136)))goto LABEL_498; {
        continue;
        }
      case 35:
        uint64_t v264 = v7 + 8 * v8;
        v8 += 5;
        if (!llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)+ 32 * *(unsigned int *)(v264 + 16)), (const llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v264 + 24)] + 32)+ 32 * *(unsigned int *)(v264 + 32))))goto LABEL_498; {
        continue;
        }
      case 36:
        unsigned int v265 = v7 + 8 * v8;
        v8 += 4;
        *(void *)(v457 + 8 * *(void *)(v265 + 24)) = *(void *)((*v465)[*(void *)(v7 + 8 * v11)] + 32)
                                                         + 32 * *(unsigned int *)(v265 + 16);
        continue;
      case 37:
        goto LABEL_498;
      case 38:
        BOOL v242 = *(void *)(v7 + 8 * v11);
        uint64_t v243 = v7 + 8 * v8;
        uint64_t v244 = *(void *)(v243 + 16);
        int v245 = *(_DWORD *)(v243 + 24);
        BOOL v246 = v244 + 1;
        if (v244 >= v468 && v246 != v468)
        {
          if (v246 >= v468)
          {
            if (v246 > HIDWORD(v468)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v468 != v246) {
              bzero((char *)v467 + 16 * v468, 16 * (v244 - v468) + 16);
            }
          }
          LODWORD(v468) = v244 + 1;
        }
        v8 += 4;
        uint64_t v248 = (*v465)[v242];
        unsigned int v249 = (char *)v467 + 16 * v244;
        *unsigned int v249 = *(void *)(*(void *)(v248 + 24) + 32);
        v249[1] = v248;
        uint64_t v4 = v462;
        *(void *)(*((void *)v467 + 2 * v244 + 1) + 16) = *(void *)(v463 + 8) + 48 * v245;
        continue;
      case 39:
        int v181 = *(void *)(v7 + 8 * v11);
        int v182 = *(_DWORD *)(v7 + 8 * v8 + 16);
        int v183 = v181 + 1;
        if (v181 >= v468 && v183 != v468)
        {
          if (v183 >= v468)
          {
            if (v183 > HIDWORD(v468)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v468 != v183) {
              bzero((char *)v467 + 16 * v468, 16 * (v181 - v468) + 16);
            }
          }
          LODWORD(v468) = v181 + 1;
        }
        unsigned int v185 = **v465;
        uint64_t v186 = *(void *)(v185 + 24);
        unint64_t v187 = *(void *)(v463 + 8) + 48 * v182;
        if ((*(_WORD *)(v185 + 44) & 4) == 0)
        {
          uint64_t v188 = *(llvm::MachineFunction **)(v186 + 32);
          uint64_t v189 = *(unsigned __int8 **)(v185 + 56);
          uint64_t v466 = v189;
          uint64_t v4 = v462;
          if (v189) {
            llvm::MetadataTracking::track((uint64_t)&v466, v189, 2);
          }
          uint64_t v190 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v188, v187, &v466, 0);
          if (!v466) {
            goto LABEL_166;
          }
          uint64_t v432 = *v466;
          if ((v432 - 4) > 0x1E)
          {
            if ((v432 - 3) >= 0xFFFFFFFE) {
              int v438 = v466;
            }
            else {
              int v438 = 0;
            }
            if ((v432 - 3) >= 0xFFFFFFFE)
            {
              unsigned int v434 = (unint64_t)(v438 + 8);
              goto LABEL_572;
            }
            uint64_t v4 = v462;
            if (v432 == 3) {
              *((void *)v466 + 1) = 0;
            }
          }
          else
          {
            uint64_t v4 = v462;
            if ((v466[1] & 0x7F) == 2 || *((_DWORD *)v466 + 3))
            {
              uint64_t v433 = *((void *)v466 + 2);
              if ((v433 & 4) != 0)
              {
                unsigned int v434 = v433 & 0xFFFFFFFFFFFFFFF8;
                if (v434)
                {
LABEL_572:
                  __dst = &v466;
                  sub_1CC5FA668(v434 + 16, &__dst);
                  uint64_t v4 = v462;
                }
              }
            }
          }
LABEL_166:
          char v191 = *(void *)(v186 + 40);
          *(void *)(v190 + 24) = v191;
          uint64_t v192 = *(void *)(v191 + 32);
          unint64_t v193 = *(unsigned int *)(v190 + 40);
          uint64_t v3 = v460;
          if (v193)
          {
            BOOL v424 = *(void *)(v190 + 32);
            uint64_t v425 = *(void *)(v192 + 40);
            uint64_t v426 = 32 * v193;
            do
            {
              if (!*(unsigned char *)v424)
              {
                unsigned int v427 = *(unsigned int *)(v424 + 4);
                if ((int)v427 >= 0) {
                  uint64_t v428 = (uint64_t *)(*(void *)(v425 + 272) + 8 * v427);
                }
                else {
                  uint64_t v428 = (uint64_t *)(*(void *)(v425 + 24) + 16 * (v427 & 0x7FFFFFFF) + 8);
                }
                uint64_t v429 = *v428;
                if (*v428)
                {
                  int v430 = *(void *)(v429 + 16);
                  *(void *)(v429 + 16) = v424;
                  *(void *)(v424 + 16) = v430;
                  if (*(unsigned char *)(v424 + 3))
                  {
                    *(void *)(v424 + 24) = v429;
                  }
                  else
                  {
                    *(void *)(v424 + 24) = 0;
                    uint64_t v428 = (uint64_t *)(v430 + 24);
                  }
                }
                else
                {
                  *(void *)(v424 + 16) = v424;
                  *(void *)(v424 + 24) = 0;
                }
                *uint64_t v428 = v424;
              }
              v424 += 32;
              v426 -= 32;
            }
            while (v426);
          }
          uint64_t v194 = *(void *)(v192 + 728);
          if (v194) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v194 + 24))(v194, v190);
          }
          int v195 = *(void *)v185 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v190 = v195 | *(void *)v190 & 7;
          *(void *)(v190 + 8) = v185;
          *(void *)(v195 + 8) = v190;
          *(void *)unsigned int v185 = *(void *)v185 & 7 | v190;
          goto LABEL_310;
        }
        uint64_t v188 = *(llvm::MachineFunction **)(v186 + 32);
        BOOL v302 = *(unsigned __int8 **)(v185 + 56);
        uint64_t v466 = v302;
        uint64_t v4 = v462;
        if (v302) {
          llvm::MetadataTracking::track((uint64_t)&v466, v302, 2);
        }
        uint64_t v190 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v188, v187, &v466, 0);
        if (!v466) {
          goto LABEL_306;
        }
        uint64_t v435 = *v466;
        if ((v435 - 4) > 0x1E)
        {
          if ((v435 - 3) >= 0xFFFFFFFE) {
            BOOL v439 = v466;
          }
          else {
            BOOL v439 = 0;
          }
          if ((v435 - 3) >= 0xFFFFFFFE)
          {
            uint64_t v437 = (unint64_t)(v439 + 8);
LABEL_578:
            __dst = &v466;
            sub_1CC5FA668(v437 + 16, &__dst);
            uint64_t v4 = v462;
            goto LABEL_306;
          }
          uint64_t v4 = v462;
          if (v435 == 3) {
            *((void *)v466 + 1) = 0;
          }
        }
        else
        {
          uint64_t v4 = v462;
          if ((v466[1] & 0x7F) == 2 || *((_DWORD *)v466 + 3))
          {
            unsigned int v436 = *((void *)v466 + 2);
            if ((v436 & 4) != 0)
            {
              uint64_t v437 = v436 & 0xFFFFFFFFFFFFFFF8;
              if (v437) {
                goto LABEL_578;
              }
            }
          }
        }
LABEL_306:
        if (v186 + 48 != v185 && (*(_WORD *)(v185 + 44) & 4) != 0) {
          *(_WORD *)(v190 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v186 + 40), (uint64_t *)v185, v190);
        uint64_t v3 = v460;
LABEL_310:
        uint64_t v8 = v13 + 3;
        BOOL v303 = (llvm::MachineFunction **)((char *)v467 + 16 * v181);
        *BOOL v303 = v188;
        v303[1] = (llvm::MachineFunction *)v190;
        continue;
      case 40:
        uint64_t v71 = v7 + 8 * v8;
        v8 += 4;
        long long v72 = (llvm::MachineFunction **)((char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        int v42 = (const llvm::MachineOperand *)(*(void *)((*v465)[*(void *)(v71 + 16)] + 32)
                                           + 32 * *(unsigned int *)(v71 + 24));
        goto LABEL_280;
      case 41:
        uint64_t v101 = *(void *)(v7 + 8 * v11);
        uint64_t v102 = v7 + 8 * v8;
        v8 += 5;
        uint64_t v103 = *(void *)(v102 + 32);
        int v104 = (const llvm::MachineOperand *)(*(void *)(*(void *)(*(void *)(v3 + 136)
                                                                    + 8 * *(void *)(v102 + 16))
                                                        + 32)
                                            + 32 * *(unsigned int *)(v102 + 24));
        int v105 = sub_1CC70A570(v3, (uint64_t)v104, 0, v4);
        unint64_t v106 = (llvm::MachineFunction **)((char *)v467 + 16 * v101);
        if (v105)
        {
          uint64_t v57 = *v106;
          int v56 = v106[1];
          v471 = 0;
          HIDWORD(__dst) = v103;
          LODWORD(__dst) = 0;
          int v107 = v464;
          uint64_t *v464 = 0;
          v107[1] = 0;
          goto LABEL_366;
        }
        llvm::MachineInstr::addOperand(v106[1], *v106, v104);
        continue;
      case 42:
        uint64_t v196 = v7 + 8 * v8;
        int v197 = *(void *)(v196 + 16);
        uint64_t v198 = *(unsigned int *)(v196 + 24);
        v8 += 5;
        LOWORD(v196) = *(_DWORD *)(v196 + 32);
        uint64_t v199 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        LODWORD(v197) = *(_DWORD *)(*(void *)((*v465)[v197] + 32) + 32 * v198 + 4);
        uint64_t v57 = *(llvm::MachineFunction **)v199;
        int v56 = (llvm::MachineInstr *)*((void *)v199 + 1);
        v471 = 0;
        int v59 = (v196 & 0xFFF) << 8;
        uint64_t v200 = v464;
        uint64_t *v464 = 0;
        v200[1] = 0;
        HIDWORD(__dst) = v197;
        goto LABEL_253;
      case 43:
        uint64_t v54 = *(void *)(v7 + 8 * v8 + 16);
        int v274 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v274;
        int v56 = (llvm::MachineInstr *)*((void *)v274 + 1);
        v8 += 3;
        v471 = 0;
        uint64_t v275 = v464;
        uint64_t *v464 = 0;
        v275[1] = 0;
        int v59 = 50331648;
        goto LABEL_252;
      case 44:
        uint64_t v54 = *(void *)(v7 + 8 * v8 + 16);
        uint64_t v55 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v55;
        int v56 = (llvm::MachineInstr *)*((void *)v55 + 1);
        v8 += 3;
        v471 = 0;
        int v58 = v464;
        uint64_t *v464 = 0;
        v58[1] = 0;
        int v59 = 0x2000000;
LABEL_252:
        HIDWORD(__dst) = v54;
LABEL_253:
        LODWORD(__dst) = v59;
        goto LABEL_366;
      case 45:
        int v159 = v7 + 8 * v8;
        v8 += 4;
        sub_1CB89517C((llvm::MachineFunction **)v467 + 2 * *(void *)(v7 + 8 * v11), *(_DWORD *)(v159 + 16), *(_DWORD *)(v159 + 24), 0);
        continue;
      case 46:
      case 47:
        v8 += 4;
        if (v12 == 47)
        {
          uint64_t v27 = *(void *)(v7 + 8 * v8);
          uint64_t v8 = v13 + 5;
        }
        else
        {
          LOWORD(v27) = 0;
        }
        uint64_t v36 = v7 + 8 * v13;
        uint64_t v37 = *(void *)(v36 + 24);
        uint64_t v38 = (llvm::MachineFunction **)((char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        LODWORD(__dst) = *(void *)(v36 + 16);
        int v39 = sub_1CB9A74A0(v461, &__dst);
        sub_1CB89517C(v38, v39[1], v37, v27);
        continue;
      case 48:
        v8 += 3;
        uint64_t v46 = *(void *)(v7 + 8 * v13 + 16);
        unint64_t v60 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v57 = *(llvm::MachineFunction **)v60;
        int v56 = (llvm::MachineInstr *)*((void *)v60 + 1);
        goto LABEL_364;
      case 49:
        v8 += 3;
        uint64_t v66 = *(void *)(v3 + 112) + 144 * *(void *)(v7 + 8 * v13 + 16);
        uint64_t v67 = *(unsigned int *)(v66 + 8);
        if (!v67) {
          continue;
        }
        uint64_t v68 = *(void *)(v7 + 8 * v11);
        uint64_t v69 = 32 * v67;
        long long v70 = (void *)(*(void *)v66 + 24);
        do
        {
          if (!*v70) {
LABEL_607:
          }
            sub_1CB920400();
          (*(void (**)(void, char *))(*(void *)*v70 + 48))(*v70, (char *)v467 + 16 * v68);
          v70 += 4;
          v69 -= 32;
        }
        while (v69);
        continue;
      case 50:
        long long v283 = *(void *)(*(void *)(*(void *)(v3 + 112) + 144 * *(void *)(v7 + 8 * v8 + 16))
                         + 32 * *(void *)(v7 + 8 * v8 + 24)
                         + 24);
        if (!v283) {
          goto LABEL_607;
        }
        v8 += 4;
        (*(void (**)(uint64_t, char *))(*(void *)v283 + 48))(v283, (char *)v467 + 16 * *(void *)(v7 + 8 * v11));
        continue;
      case 51:
        uint64_t v276 = *(void *)(v7 + 8 * v11);
        unsigned int v277 = v7 + 8 * v8;
        int v278 = *(void *)(v277 + 16);
        uint64_t v279 = *(void *)(v3 + 256) + 16 * *(void *)(v277 + 24);
        uint64_t v280 = *(void (**)(void *, char *, uint64_t, uint64_t))v279;
        char v281 = *(void *)(v279 + 8);
        long long v282 = (void *)(v3 + (v281 >> 1));
        if (v281) {
          uint64_t v280 = *(void (**)(void *, char *, uint64_t, uint64_t))(*v282 + v280);
        }
        v8 += 4;
        v280(v282, (char *)v467 + 16 * v276, (*v465)[v278], 0xFFFFFFFFLL);
        continue;
      case 52:
        uint64_t v266 = *(void *)(v7 + 8 * v11);
        uint64_t v267 = (void *)(v7 + 8 * v8);
        unsigned int v269 = v267[2];
        uint64_t v268 = v267[3];
        unsigned int v270 = *(void *)(v3 + 256) + 16 * v267[4];
        long long v271 = *(void (**)(void *, char *, uint64_t, uint64_t))v270;
        uint64_t v272 = *(void *)(v270 + 8);
        uint64_t v273 = (void *)(v3 + (v272 >> 1));
        if (v272) {
          long long v271 = *(void (**)(void *, char *, uint64_t, uint64_t))(*v273 + v271);
        }
        v8 += 5;
        v271(v273, (char *)v467 + 16 * v266, (*v465)[v269], v268);
        continue;
      case 53:
        uint64_t v40 = *(void *)(v7 + 8 * v11);
        v8 += 3;
        uint64_t v41 = *(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32);
        int v43 = *(unsigned __int8 *)(v41 + 32);
        int v42 = (const llvm::MachineOperand *)(v41 + 32);
        if (v43 == 2)
        {
          uint64_t v44 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32) + 48);
          unsigned int v45 = *(_DWORD *)(v44 + 32);
          if (v45 > 0x40) {
            uint64_t v46 = **(void **)(v44 + 24);
          }
          else {
            uint64_t v46 = (uint64_t)(*(void *)(v44 + 24) << -(char)v45) >> -(char)v45;
          }
          long long v333 = (char *)v467 + 16 * v40;
          int v56 = (llvm::MachineInstr *)*((void *)v333 + 1);
          uint64_t v57 = *(llvm::MachineFunction **)v333;
LABEL_364:
          uint64_t v261 = 1;
LABEL_365:
          LODWORD(__dst) = v261;
          v471 = 0;
          uint64_t v472 = (uint64_t *)v46;
LABEL_366:
          llvm::MachineInstr::addOperand(v56, v57, (const llvm::MachineOperand *)&__dst);
        }
        else
        {
          long long v72 = (llvm::MachineFunction **)((char *)v467 + 16 * v40);
LABEL_280:
          llvm::MachineInstr::addOperand(v72[1], *v72, v42);
        }
        continue;
      case 54:
        v8 += 3;
        uint64_t v260 = (char *)v467 + 16 * *(void *)(v7 + 8 * v11);
        uint64_t v46 = *(void *)(*(void *)((*v465)[*(void *)(v7 + 8 * v13 + 16)] + 32) + 48);
        uint64_t v57 = *(llvm::MachineFunction **)v260;
        int v56 = (llvm::MachineInstr *)*((void *)v260 + 1);
        uint64_t v261 = 3;
        goto LABEL_365;
      case 55:
        uint64_t v262 = v7 + 8 * v8;
        v8 += 4;
        uint64_t v263 = *((void *)v467 + 2 * *(void *)(v7 + 8 * v11) + 1);
        sub_1CC73AFF8(*(void *)(*(void *)(v263 + 24) + 32), (uint64_t)v459, *(void **)(*(void *)(*(void *)(v263 + 24) + 32) + 40), v463, v458, v263, *(void *)(v459[30] + 8 * *(unsigned int *)(v262 + 24)), *(void *)(v263 + 32) + 32 * *(unsigned int *)(v262 + 16));
        continue;
      case 56:
        v8 += 2;
        sub_1CC73B5D0(*((void **)v467 + 2 * *(void *)(v7 + 8 * v11) + 1), v463, v459);
        continue;
      case 57:
        v8 += 3;
        char v217 = *(void *)(v7 + 8 * v13 + 16);
        if (v217 == -1) {
          continue;
        }
        uint64_t v218 = *(void *)(v7 + 8 * v11);
        while (1)
        {
          uint64_t v219 = v8;
          v220 = (*v465)[v217];
          long long v222 = (llvm::MachineMemOperand **)(v220 + 48);
          uint64_t v221 = *(void *)(v220 + 48);
          if (v221 >= 8)
          {
            if ((v221 & 7) != 0)
            {
              long long v223 = (int *)(v221 & 0xFFFFFFFFFFFFFFF8);
              if ((*(void *)(v220 + 48) & 7) != 3 || v223 == 0) {
                goto LABEL_212;
              }
              uint64_t v226 = *v223;
              long long v222 = (llvm::MachineMemOperand **)(v223 + 2);
              uint64_t v225 = v226;
              if (!v226) {
                goto LABEL_212;
              }
              long long v227 = &v222[v225];
            }
            else
            {
              *(void *)(v220 + 48) = v221 & 0xFFFFFFFFFFFFFFF8;
              long long v227 = (llvm::MachineMemOperand **)(v220 + 56);
            }
            do
            {
              int v228 = *v222++;
              llvm::MachineInstr::addMemOperand(*((llvm::MachineInstr **)v467 + 2 * v218 + 1), *((llvm::MachineFunction **)v467 + 2 * v218), v228);
            }
            while (v222 != v227);
          }
LABEL_212:
          ++v8;
          char v217 = *(void *)(v7 + 8 * v219);
          if (v217 == -1)
          {
            uint64_t v3 = v460;
            goto LABEL_3;
          }
        }
      case 58:
        v8 += 2;
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)(*v465)[*(void *)(v7 + 8 * v11)]);
        continue;
      case 59:
        unint64_t v452 = v6;
        int v229 = *(void *)(v7 + 8 * v11);
        uint64_t v230 = *(void *)(*(void *)(v3 + 232) + 8 * *(void *)(v7 + 8 * v8 + 16));
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
        unsigned int v232 = v4;
        unsigned int v233 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(v232 + 24) + 16 * v233) = 4;
        BOOL v234 = *(unsigned int *)(v232 + 432);
        if (v233 >= v234)
        {
          int v235 = v233 + 1;
          int v236 = *(void *)(v232 + 440);
          if (v233 >= *(unsigned int *)(v232 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          long long v237 = *(_DWORD *)(v232 + 432);
          if (v235 != v234)
          {
            uint64_t v238 = (void *)(*v455 + 8 * *(unsigned int *)(v232 + 432));
            uint64_t v239 = ~v233 + v234;
            do
              *v238++ = v236;
            while (!__CFADD__(v239++, 1));
            long long v237 = *(_DWORD *)(v462 + 432);
          }
          unsigned int v232 = v462;
          *(_DWORD *)(v462 + 432) = v237 + v235 - v234;
        }
        *(void *)(*(void *)(v232 + 424) + 8 * v233) = v230;
        uint64_t v241 = *(void *)(v232 + 8);
        uint64_t v6 = v452;
        uint64_t v3 = v460;
        uint64_t v4 = v232;
        if (v241) {
          (*(void (**)(uint64_t, void))(*(void *)v241 + 24))(v241, IncompleteVirtualRegister);
        }
        uint64_t v8 = v13 + 3;
        LODWORD(__dst) = v229;
        sub_1CB9A74A0(v461, &__dst)[1] = IncompleteVirtualRegister;
        continue;
      case 60:
        if (v468)
        {
          uint64_t v441 = (char *)v467;
          unsigned int v442 = (char *)v467 + 16 * v468;
          while (1)
          {
            uint64_t v443 = *((void *)v441 + 1);
            uint64_t v444 = *(_WORD *)(v443 + 44);
            int v445 = v453;
            if ((v450 & 0x200000) == 0)
            {
              int v446 = *(void *)(*(void *)(v443 + 16) + 8);
              if ((v444 & 0xC) != 0 && (v444 & 4) == 0)
              {
                uint64_t v448 = *((void *)v441 + 1);
                if ((v446 & 0x200000) != 0)
                {
LABEL_603:
                  int v445 = ~v444 & 0x4000 | v453;
                  goto LABEL_598;
                }
                while ((*(_WORD *)(v448 + 44) & 8) != 0)
                {
                  uint64_t v448 = *(void *)(v448 + 8);
                  if ((*(unsigned char *)(*(void *)(v448 + 16) + 10) & 0x20) != 0) {
                    goto LABEL_603;
                  }
                }
                int v445 = v453;
              }
              else
              {
                int v445 = v453;
                if ((v446 & 0x200000) != 0) {
                  goto LABEL_603;
                }
              }
            }
LABEL_598:
            *(_WORD *)(v443 + 44) = *(_WORD *)(v443 + 44) & 0xC | v445 & 0xFFF3;
            v441 += 16;
            long long v456 = 1;
            if (v441 == v442) {
              goto LABEL_585;
            }
          }
        }
        long long v456 = 1;
LABEL_585:
        if (v476 != v478) {
          free(v476);
        }
        if (v467 != v6) {
          free(v467);
        }
        return v456 & 1;
      case 61:
        v8 += 2;
        llvm::CodeGenCoverage::setCovered(a3, *(void *)(v7 + 8 * v11));
        continue;
      default:
        if (v477 >= (unint64_t)HIDWORD(v477)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v8 += 2;
        v476[v477] = *(void *)(v7 + 8 * v11);
        LODWORD(v477) = v477 + 1;
        continue;
    }
  }
}

__int16 ***sub_1CBB71CEC(unint64_t *a1, const char *a2)
{
  unint64_t v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0) {
    goto LABEL_6;
  }
  char v10 = 3;
  if ((v3 & 1) == 0) {
    char v10 = 19;
  }
  unint64_t v11 = v3 >> v10;
  unint64_t v12 = v3 & 0x8000000000000000 | (8 * v11) | 1;
  uint64_t v13 = 0x8000000000000;
  uint64_t v14 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v11) | 2;
  if ((v3 & 2) != 0) {
    uint64_t v13 = 0x800000000000000;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t v29 = v14;
  if ((v13 & v3) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    unint64_t v3 = *a1;
  }
  unsigned int v15 = (unsigned __int16)(v3 >> 3);
  uint64_t v16 = sub_1CB8F1DC4((unint64_t *)&v29);
  if (v17 == 1)
  {
    uint64_t v27 = v16;
    uint64_t v16 = v27;
  }
  if (v16 == 8)
  {
    uint64_t v29 = 129;
    v15 >>= 1;
  }
  uint64_t v18 = sub_1CB8F1DC4((unint64_t *)&v29);
  if (v19 == 1)
  {
    uint64_t v28 = v18;
    uint64_t v18 = v28;
  }
  switch(v15)
  {
    case 4u:
      unint64_t v20 = &off_1E66AF778;
      unsigned int v21 = &off_1E66AF660;
LABEL_55:
      if (v18 == 16) {
        return (__int16 ***)v21;
      }
      else {
        return (__int16 ***)v20;
      }
    case 3u:
      unint64_t v20 = &off_1E66AF6D0;
      unsigned int v21 = &off_1E66AF628;
      goto LABEL_55;
    case 2u:
      unint64_t v20 = &off_1E66AF9A8;
      unsigned int v21 = &off_1E66AF5F0;
      goto LABEL_55;
  }
LABEL_6:
  int v6 = sub_1CB8F1DC4(a1);
  if (v5 == 1) {
  if (v6 <= 111)
  }
  {
    uint64_t v22 = (__int16 ***)&off_1E66AF970;
    uint64_t v23 = &off_1E66AF698;
    if (v6 != 80) {
      uint64_t v23 = (_UNKNOWN **)&off_1E66AF6D0;
    }
    uint64_t v24 = &off_1E66AF628;
    if (v6 != 48) {
      uint64_t v24 = &off_1E66AF9A8;
    }
    if (v6 <= 79) {
      uint64_t v23 = (_UNKNOWN **)v24;
    }
    uint64_t v25 = &off_1E66AF580;
    if (v6 == 16) {
      uint64_t v25 = (__int16 ***)&off_1E66AF970;
    }
    if (v6 != 1) {
      uint64_t v22 = v25;
    }
    if (v6 <= 47) {
      return v22;
    }
    else {
      return (__int16 ***)v23;
    }
  }
  else
  {
    if (v6 > 223)
    {
      uint64_t v7 = &off_1E66AF890;
      if (v6 != 288) {
        uint64_t v7 = &off_1E66AF8C8;
      }
      uint64_t v8 = &off_1E66AF820;
      if (v6 != 224) {
        uint64_t v8 = &off_1E66AF858;
      }
      BOOL v9 = v6 <= 287;
    }
    else
    {
      uint64_t v7 = &off_1E66AF7B0;
      if (v6 != 160) {
        uint64_t v7 = &off_1E66AF7E8;
      }
      uint64_t v8 = &off_1E66AF740;
      if (v6 != 112) {
        uint64_t v8 = (_UNKNOWN **)&off_1E66AF778;
      }
      BOOL v9 = v6 <= 159;
    }
    if (v9) {
      return (__int16 ***)v8;
    }
    else {
      return (__int16 ***)v7;
    }
  }
}

uint64_t sub_1CBB71F60(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, char a9, int a10, int a11, int a12, char a13)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *(void *)(a3 + 24);
  sub_1CBB633EC((uint64_t)v84, a2, a1[10], a1[11], a5, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v81, a2, a1[10], a1[11], a6, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)&v73, a2, a1[10], a1[11], a7, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)&v65, a2, a1[10], a1[11], a8, 0, 0, 0, 1u);
  uint64_t v64 = 0;
  if (*a7 && (int)v78 <= 3)
  {
    uint64_t v64 = sub_1CBB6646C((uint64_t)a1, a3, 0x81uLL, *((void *)a7 + 2), *a7 == 3);
    sub_1CBB633EC((uint64_t)&v104, a2, a1[10], a1[11], *((unsigned __int8 **)v64 + 4), 0, 0, 0, 1u);
    long long v77 = v108;
    long long v78 = v109;
    long long v79 = v110;
    uint64_t v80 = v111;
    long long v73 = v104;
    long long v74 = v105;
    long long v75 = v106;
    long long v76 = v107;
  }
  unint64_t v20 = 0;
  if (*a8 && (int)v70 <= 3)
  {
    unint64_t v20 = sub_1CBB6646C((uint64_t)a1, a3, 0x81uLL, *((void *)a8 + 2), *a8 == 3);
    sub_1CBB633EC((uint64_t)&v104, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 0, 0, 0, 1u);
    long long v69 = v108;
    long long v70 = v109;
    long long v71 = v110;
    uint64_t v72 = v111;
    long long v65 = v104;
    long long v66 = v105;
    long long v67 = v106;
    long long v68 = v107;
  }
  unsigned int v21 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v21 = &unk_1F25F8A98;
  *((void *)v21 + 1) = sub_1CBB644E4;
  *((void *)v21 + 2) = 0;
  *((void *)v21 + 3) = a1;
  *((void *)v21 + 4) = a2;
  *((_DWORD *)v21 + 10) = 0;
  *((_WORD *)v21 + 22) = 1;
  uint64_t v103 = v21;
  uint64_t v22 = operator new(0x28uLL);
  *uint64_t v22 = &unk_1F25F8A50;
  v22[1] = sub_1CBB67B10;
  v22[2] = 0;
  void v22[3] = a1;
  v22[4] = a2;
  uint64_t v101 = v22;
  uint64_t v23 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v23 = &unk_1F25F8A98;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(v21 + 8);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(v21 + 24);
  *((void *)v23 + 5) = *((void *)v21 + 5);
  uint64_t v99 = v23;
  sub_1CBB6F084(v84, (uint64_t)v23);
  if (v99 == v98)
  {
    (*(void (**)(void *))(v98[0] + 32))(v98);
  }
  else if (v99)
  {
    (*(void (**)(void))(*v99 + 40))();
  }
  if (v103)
  {
    if (v103 == v102)
    {
      uint64_t v97 = v96;
      (*(void (**)(void *, void *))(v102[0] + 24))(v102, v96);
      uint64_t v24 = (uint64_t)v97;
    }
    else
    {
      uint64_t v24 = (*(uint64_t (**)(void *))(*v103 + 16))(v103);
      uint64_t v97 = (void *)v24;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v97 = 0;
  }
  sub_1CBB6F084(v81, v24);
  if (v97 == v96)
  {
    (*(void (**)(void *))(v96[0] + 32))(v96);
  }
  else if (v97)
  {
    (*(void (**)(void))(*v97 + 40))();
  }
  if (a13) {
    uint64_t v25 = v100;
  }
  else {
    uint64_t v25 = v102;
  }
  sub_1CBB783D4((uint64_t)v94, (uint64_t)v25);
  sub_1CBB6F084((int *)&v73, (uint64_t)v95);
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
  }
  else if (v95)
  {
    (*(void (**)(void))(*v95 + 40))();
  }
  sub_1CBB783D4((uint64_t)v92, (uint64_t)v25);
  sub_1CBB6F084((int *)&v65, (uint64_t)v93);
  if (v93 == v92)
  {
    (*(void (**)(void *))(v92[0] + 32))(v92);
  }
  else if (v93)
  {
    (*(void (**)(void))(*v93 + 40))();
  }
  uint64_t v26 = operator new(0x30uLL);
  *uint64_t v26 = &unk_1F25F8A98;
  v26[1] = sub_1CBB644E4;
  v26[2] = 0;
  v26[3] = a1;
  v26[4] = a2;
  *((_DWORD *)v26 + 10) = 0;
  *((_WORD *)v26 + 22) = 256;
  if ((BYTE8(v77) && (BYTE8(v76) & 7) != 0 || v78 == 5) && (int)v70 >= 4 && v70 != 5)
  {
    sub_1CBB633EC((uint64_t)&v104, a2, a1[10], a1[11], a8, 0, 0, 0, 0);
    long long v69 = v108;
    long long v70 = v109;
    long long v71 = v110;
    uint64_t v72 = v111;
    long long v65 = v104;
    long long v66 = v105;
    long long v67 = v106;
    long long v68 = v107;
    uint64_t v91 = (void *)(*(uint64_t (**)(void *))(*v26 + 16))(v26);
    sub_1CBB6F084((int *)&v65, (uint64_t)v91);
    if (v91 == v90)
    {
      (*(void (**)(void *))(v90[0] + 32))(v90);
    }
    else if (v91)
    {
      (*(void (**)(void))(*v91 + 40))();
    }
  }
  if ((BYTE8(v69) && (BYTE8(v68) & 7) != 0 || v70 == 5) && (int)v78 >= 4 && v78 != 5)
  {
    sub_1CBB633EC((uint64_t)&v104, a2, a1[10], a1[11], a7, 0, 0, 0, 0);
    long long v77 = v108;
    long long v78 = v109;
    long long v79 = v110;
    uint64_t v80 = v111;
    long long v73 = v104;
    long long v74 = v105;
    long long v75 = v106;
    long long v76 = v107;
    uint64_t v89 = (void *)(*(uint64_t (**)(void *))(*v26 + 16))(v26);
    sub_1CBB6F084((int *)&v73, (uint64_t)v89);
    if (v89 == v88)
    {
      (*(void (**)(void *))(v88[0] + 32))(v88);
    }
    else if (v89)
    {
      (*(void (**)(void))(*v89 + 40))();
    }
  }
  if (BYTE8(v77))
  {
    int v27 = v78;
    BOOL v28 = 1;
    if ((BYTE8(v76) & 7) != 0 || v78 == 5) {
      goto LABEL_43;
    }
  }
  else
  {
    int v27 = v78;
    if (v78 == 5) {
      goto LABEL_106;
    }
  }
  if (!BYTE8(v69) || (BYTE8(v68) & 7) == 0)
  {
    BOOL v28 = v70 == 5;
    goto LABEL_43;
  }
LABEL_106:
  BOOL v28 = 1;
LABEL_43:
  if (a9) {
    int v29 = 38;
  }
  else {
    int v29 = 39;
  }
  if (a9) {
    int v30 = 0;
  }
  else {
    int v30 = 2;
  }
  if (!a13) {
    int v29 = v30;
  }
  if (v85 >= 4)
  {
    if (v85 == 5) {
      int v31 = 9;
    }
    else {
      int v31 = 1;
    }
  }
  else
  {
    int v31 = 2 * (v86 == 16);
  }
  if (v82 >= 4)
  {
    if (v82 == 5) {
      int v32 = 9;
    }
    else {
      int v32 = 1;
    }
  }
  else
  {
    int v32 = 2 * (v83 == 16);
  }
  if (v27 >= 4)
  {
    if (v27 == 5 || v28) {
      int v33 = 9;
    }
    else {
      int v33 = 1;
    }
  }
  else
  {
    int v33 = 2 * (DWORD2(v78) == 16);
  }
  if ((int)v70 >= 4)
  {
    if (v70 == 5) {
      BOOL v28 = 1;
    }
    if (v28) {
      int v34 = 9;
    }
    else {
      int v34 = 1;
    }
  }
  else
  {
    int v34 = 2 * (DWORD2(v70) == 16);
  }
  *(void *)&long long v104 = &v105;
  *(void *)&long long v105 = __PAIR64__(v31, v29);
  *((void *)&v105 + 1) = __PAIR64__(v33, v32);
  LODWORD(v106) = v34;
  *((void *)&v104 + 1) = 0x500000005;
  uint64_t v35 = *(void *)(a1[9] + 8) + 48 * sub_1CBE0418C(59, 5, &v105);
  if ((*(_WORD *)(a3 + 44) & 4) == 0)
  {
    uint64_t v36 = *(llvm::MachineFunction **)(v19 + 32);
    uint64_t v37 = *(unsigned __int8 **)(a3 + 56);
    uint64_t v87 = v37;
    if (v37) {
      llvm::MetadataTracking::track((uint64_t)&v87, v37, 2);
    }
    uint64_t v38 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v36, v35, &v87, 0);
    if (!v87) {
      goto LABEL_81;
    }
    int v55 = *v87;
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        uint64_t v61 = v87;
      }
      else {
        uint64_t v61 = 0;
      }
      if ((v55 - 3) < 0xFFFFFFFE)
      {
        if (v55 == 3) {
          *((void *)v87 + 1) = 0;
        }
        goto LABEL_81;
      }
      unint64_t v57 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
        goto LABEL_81;
      }
      uint64_t v56 = *((void *)v87 + 2);
      if ((v56 & 4) == 0) {
        goto LABEL_81;
      }
      unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if (!v57) {
        goto LABEL_81;
      }
    }
    *(void *)&long long v104 = &v87;
    sub_1CC5FA668(v57 + 16, &v104);
LABEL_81:
    uint64_t v39 = *(void *)(v19 + 40);
    *(void *)(v38 + 24) = v39;
    uint64_t v40 = *(void *)(v39 + 32);
    uint64_t v41 = *(unsigned int *)(v38 + 40);
    if (v41)
    {
      uint64_t v48 = *(void *)(v38 + 32);
      uint64_t v49 = *(void *)(v40 + 40);
      uint64_t v50 = 32 * v41;
      do
      {
        if (!*(unsigned char *)v48)
        {
          uint64_t v51 = *(unsigned int *)(v48 + 4);
          if ((int)v51 >= 0) {
            uint64_t v52 = (uint64_t *)(*(void *)(v49 + 272) + 8 * v51);
          }
          else {
            uint64_t v52 = (uint64_t *)(*(void *)(v49 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
          }
          uint64_t v53 = *v52;
          if (*v52)
          {
            uint64_t v54 = *(void *)(v53 + 16);
            *(void *)(v53 + 16) = v48;
            *(void *)(v48 + 16) = v54;
            if (*(unsigned char *)(v48 + 3))
            {
              *(void *)(v48 + 24) = v53;
            }
            else
            {
              *(void *)(v48 + 24) = 0;
              uint64_t v52 = (uint64_t *)(v54 + 24);
            }
          }
          else
          {
            *(void *)(v48 + 16) = v48;
            *(void *)(v48 + 24) = 0;
          }
          *uint64_t v52 = v48;
        }
        v48 += 32;
        v50 -= 32;
      }
      while (v50);
    }
    uint64_t v42 = *(void *)(v40 + 728);
    if (v42) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 24))(v42, v38);
    }
    unint64_t v43 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v38 = v43 | *(void *)v38 & 7;
    *(void *)(v38 + 8) = a3;
    *(void *)(v43 + 8) = v38;
    *(void *)a3 = *(void *)a3 & 7 | v38;
    goto LABEL_92;
  }
  uint64_t v36 = *(llvm::MachineFunction **)(v19 + 32);
  uint64_t v44 = *(unsigned __int8 **)(a3 + 56);
  uint64_t v87 = v44;
  if (v44) {
    llvm::MetadataTracking::track((uint64_t)&v87, v44, 2);
  }
  uint64_t v38 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v36, v35, &v87, 0);
  if (v87)
  {
    int v58 = *v87;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = v87;
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v58 - 3) < 0xFFFFFFFE)
      {
        if (v58 == 3) {
          *((void *)v87 + 1) = 0;
        }
        goto LABEL_88;
      }
      unint64_t v60 = (unint64_t)(v62 + 8);
    }
    else
    {
      if ((v87[1] & 0x7F) != 2 && !*((_DWORD *)v87 + 3)) {
        goto LABEL_88;
      }
      uint64_t v59 = *((void *)v87 + 2);
      if ((v59 & 4) == 0) {
        goto LABEL_88;
      }
      unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
      if (!v60) {
        goto LABEL_88;
      }
    }
    *(void *)&long long v104 = &v87;
    sub_1CC5FA668(v60 + 16, &v104);
  }
LABEL_88:
  if (v19 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0) {
    *(_WORD *)(v38 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v19 + 40), (uint64_t *)a3, v38);
LABEL_92:
  *((void *)&v104 + 1) = 0;
  long long v105 = 0uLL;
  LODWORD(v104) = 0x1000000;
  DWORD1(v104) = a11;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v104);
  uint64_t v45 = 1;
  LODWORD(v104) = 1;
  *((void *)&v104 + 1) = 0;
  *(void *)&long long v105 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v104);
  LODWORD(v104) = 1;
  *((void *)&v104 + 1) = 0;
  *(void *)&long long v105 = v63;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v38, v36, (const llvm::MachineOperand *)&v104);
  *(void *)&long long v104 = v36;
  *((void *)&v104 + 1) = v38;
  sub_1CB9983A0((llvm::MachineFunction **)&v104, (uint64_t)v84);
  sub_1CB9983A0((llvm::MachineFunction **)&v104, (uint64_t)v81);
  sub_1CB9983A0((llvm::MachineFunction **)&v104, (uint64_t)&v73);
  sub_1CB9983A0((llvm::MachineFunction **)&v104, (uint64_t)&v65);
  sub_1CC73B5D0((void *)v38, a1[9], (void *)a1[10]);
  if (v64) {
    uint64_t v45 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  }
  if (v20) {
    uint64_t v45 = v45 & (*(unsigned int (**)(uint64_t *, llvm::MachineInstr *))(*a1 + 16))(a1, v20);
  }
  (*(void (**)(void *))(*v26 + 40))(v26);
  if (v101 == v100)
  {
    (*(void (**)(void *))(v100[0] + 32))(v100);
  }
  else if (v101)
  {
    (*(void (**)(void))(*v101 + 40))();
  }
  if (v103 == v102)
  {
    (*(void (**)(void *))(v102[0] + 32))(v102);
  }
  else if (v103)
  {
    (*(void (**)(void))(*v103 + 40))();
  }
  return v45;
}

uint64_t sub_1CBB72D94(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[8];
  if (!*(unsigned char *)(v4 + 304) || !*(unsigned char *)(v4 + 399))
  {
LABEL_98:
    uint64_t v76 = 0;
    LOBYTE(v75) = 0;
    unsigned int v74 = 0;
    return v76 & 0x100000000 | v74 | v75;
  }
  BOOL v170 = 0;
  unsigned int v169 = 0;
  unsigned int v168 = 0;
  int v167 = 0;
  int v166 = 0;
  *(_DWORD *)((char *)v165 + 3) = 0;
  v165[0] = 0;
  if (**(_WORD **)(a3 + 16) == 51)
  {
    uint64_t v9 = *(void *)(a3 + 32);
    uint64_t v10 = v9 + 64;
    uint64_t v11 = v9 + 96;
    v179[0] = 0;
    v161[0] = 0;
    v157[0] = 0;
    int v12 = sub_1CBB78C80(a2, v9 + 64, (BOOL *)v179, &v169, &v167, &v166, v161, v157);
    if (v12)
    {
      uint64_t v13 = (const llvm::MachineOperand *)v11;
      uint64_t v11 = v10;
      goto LABEL_7;
    }
    uint64_t v13 = (const llvm::MachineOperand *)v10;
    if (sub_1CBB78C80(a2, v11, (BOOL *)v179, &v169, &v167, &v166, v161, v157))
    {
LABEL_7:
      LOBYTE(v147[0]) = 0;
      uint64_t v14 = *(void *)(a3 + 32);
      if (sub_1CBB78E80(*(_DWORD *)(v14 + 48), v12 ^ 1, &v170, (char *)v147, &v168))
      {
        int v15 = v179[0];
        if (v179[0] == v170)
        {
          uint64_t v16 = v14 + 128;
          uint64_t v17 = v13;
          uint64_t v18 = v14 + 160;
          v153[0] = 0;
          LODWORD(v148) = 0;
          int v19 = LOBYTE(v147[0]);
          unint64_t v20 = (unsigned int *)(LOBYTE(v147[0]) ? v14 + 160 : v14 + 128);
          unsigned int v21 = v167;
          int v141 = v166;
          long long v145 = v17;
          if (sub_1CBB79004(a2, v20, v167, v166, v17, v11, v153))
          {
            uint64_t v22 = (unsigned int *)(v19 ? v16 : v18);
            if (sub_1CBB79004(a2, v22, v21, v141, v145, v11, (int *)&v148))
            {
              BOOL v23 = v161[0] == 1 && v157[0] == 2;
              BOOL v24 = !v23;
              if (v23 || v161[0] == 2 && v157[0] == 1)
              {
                char v25 = 0;
                uint64_t v26 = 0;
                LOWORD(v171[0]) = 256;
                int v27 = (int)v148;
                int v28 = v153[0];
                do
                {
                  char v29 = 0;
                  uint64_t v30 = 0;
                  char v31 = v25;
                  char v32 = *((unsigned char *)v171 + v26);
                  LOWORD(v184) = 256;
                  int v33 = v24 ^ (v32 != 0);
                  if (v33) {
                    int v34 = 1;
                  }
                  else {
                    int v34 = 2;
                  }
                  char v35 = 4 * v32;
                  do
                  {
                    uint64_t v36 = 0;
                    char v37 = v29;
                    char v38 = *((unsigned char *)&v184 + v30);
                    LOWORD(v181[0]) = 256;
                    do
                    {
                      if (v33) {
                        char v39 = v38;
                      }
                      else {
                        char v39 = *((unsigned char *)v181 + v36);
                      }
                      if (v39) {
                        int v40 = v28;
                      }
                      else {
                        int v40 = v27;
                      }
                      if (!v40) {
                        int v40 = v34;
                      }
                      v183[(v35 | (2 * v38) | *((unsigned char *)v181 + v36++))] = v40;
                    }
                    while (v36 != 2);
                    char v29 = 1;
                    uint64_t v30 = 1;
                  }
                  while ((v37 & 1) == 0);
                  char v25 = 1;
                  uint64_t v26 = 1;
                }
                while ((v31 & 1) == 0);
                goto LABEL_80;
              }
            }
          }
        }
      }
    }
  }
  if (**(_WORD **)(a3 + 16) != 51) {
    goto LABEL_102;
  }
  int v143 = a4;
  uint64_t v41 = *(void *)(a3 + 32);
  uint64_t v42 = v41 + 128;
  uint64_t v43 = v41 + 160;
  v179[0] = 0;
  v161[0] = 0;
  v157[0] = 0;
  uint64_t v44 = v41 + 128;
  if ((sub_1CBB78C80(a2, v41 + 128, (BOOL *)v179, &v169, &v167, &v166, v161, v157) & 1) == 0)
  {
    uint64_t v44 = v43;
    if (!sub_1CBB78C80(a2, v43, (BOOL *)v179, &v169, &v167, &v166, v161, v157)) {
      goto LABEL_102;
    }
  }
  uint64_t v45 = *(void *)(a3 + 32);
  uint64_t v46 = (llvm::MachineOperand *)(v45 + 64);
  uint64_t v47 = (llvm::MachineOperand *)(v45 + 96);
  unsigned int v21 = v167;
  if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v45 + 64), v167)
    || (uint64_t v48 = v166, llvm::MachineOperand::isIdenticalTo(v46, v166)))
  {
    int v49 = 0;
    long long v145 = v47;
    goto LABEL_50;
  }
  if (!llvm::MachineOperand::isIdenticalTo(v47, v21) && !llvm::MachineOperand::isIdenticalTo(v47, v48))
  {
LABEL_102:
    unsigned int v74 = 0;
    LOBYTE(v75) = 0;
    uint64_t v76 = 0;
    return v76 & 0x100000000 | v74 | v75;
  }
  int v49 = 1;
  long long v145 = v46;
  uint64_t v46 = v47;
LABEL_50:
  BOOL isIdenticalTo = llvm::MachineOperand::isIdenticalTo(v46, v21);
  LOBYTE(v147[0]) = 0;
  if (!sub_1CBB78E80(*(_DWORD *)(*(void *)(a3 + 32) + 48), v49, &v170, (char *)v147, &v168)) {
    goto LABEL_102;
  }
  int v15 = v179[0];
  if (v179[0] != v170) {
    goto LABEL_102;
  }
  v153[0] = 0;
  LODWORD(v148) = 0;
  int v51 = LOBYTE(v147[0]);
  uint64_t v52 = (unsigned int *)(LOBYTE(v147[0]) ? v43 : v42);
  int v141 = v166;
  if (!sub_1CBB79004(a2, v52, v21, v166, v145, v44, v153)) {
    goto LABEL_102;
  }
  uint64_t v53 = (unsigned int *)(v51 ? v42 : v43);
  if (!sub_1CBB79004(a2, v53, v21, v141, v145, v44, (int *)&v148)) {
    goto LABEL_102;
  }
  int v54 = v153[0];
  int v55 = (int)v148;
  if (v153[0])
  {
    if (v148) {
      goto LABEL_102;
    }
  }
  char v56 = 0;
  uint64_t v57 = 0;
  LOWORD(v171[0]) = 256;
  int v58 = v157[0];
  int v59 = v161[0];
  do
  {
    char v60 = 0;
    uint64_t v61 = 0;
    char v62 = v56;
    int v63 = *((unsigned __int8 *)v171 + v57);
    LOWORD(v184) = 256;
    if (v63) {
      int v64 = v59;
    }
    else {
      int v64 = v58;
    }
    char v65 = 4 * v63;
    do
    {
      uint64_t v66 = 0;
      char v67 = v60;
      char v68 = *((unsigned char *)&v184 + v61);
      LOWORD(v181[0]) = 256;
      do
      {
        if (isIdenticalTo) {
          char v69 = v68;
        }
        else {
          char v69 = *((unsigned char *)v181 + v66);
        }
        if (v69) {
          int v70 = v54;
        }
        else {
          int v70 = v55;
        }
        if (!v70) {
          int v70 = v64;
        }
        v183[(v65 | (2 * v68) | *((unsigned char *)v181 + v66++))] = v70;
      }
      while (v66 != 2);
      char v60 = 1;
      uint64_t v61 = 1;
    }
    while ((v67 & 1) == 0);
    char v56 = 1;
    uint64_t v57 = 1;
  }
  while ((v62 & 1) == 0);
  a4 = v143;
LABEL_80:
  uint64_t v71 = 0;
  int v72 = 1;
  int v73 = 1;
  while (2)
  {
    unsigned int v74 = v183[v71];
    if (a4 && v74 - 9 < 0xFFFFFFFE) {
      goto LABEL_102;
    }
    unsigned int v75 = v183[v71];
    uint64_t v76 = v75;
    switch(v74)
    {
      case 0u:
        return v76 & 0x100000000 | v74 | v75;
      case 1u:
      case 2u:
      case 3u:
        int v73 = 0;
        goto LABEL_87;
      case 4u:
      case 5u:
      case 6u:
        int v73 = 0;
        if (!v15) {
          goto LABEL_102;
        }
        goto LABEL_87;
      case 7u:
      case 8u:
      case 9u:
        int v72 = 0;
        goto LABEL_87;
      default:
LABEL_87:
        if (++v71 != 8) {
          continue;
        }
        if (!((v15 == 0) | (v72 | v73) & 1)) {
          goto LABEL_102;
        }
        if (v15) {
          int v77 = a4 ^ 1;
        }
        else {
          int v77 = 0;
        }
        sub_1CBB633EC((uint64_t)v161, a2, a1[10], a1[11], (unsigned __int8 *)v21, 0, 0, 0, 1u);
        sub_1CBB633EC((uint64_t)v157, a2, a1[10], a1[11], (unsigned __int8 *)v141, 0, 0, 0, 1u);
        sub_1CBB633EC((uint64_t)v153, a2, a1[10], a1[11], (unsigned __int8 *)v145, 0, 0, 0, 1u);
        if (*(unsigned char *)v167 && v162 < 4 || *(unsigned char *)v166 && v158 < 4 || *(unsigned char *)v145 && v158 < 4) {
          goto LABEL_98;
        }
        int v79 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
        if (v79 < 0 && (uint64_t v80 = v79 & 0x7FFFFFFF, v80 < *(_DWORD *)(a2 + 432))) {
          uint64_t v81 = *(void **)(*(void *)(a2 + 424) + 8 * v80);
        }
        else {
          uint64_t v81 = 0;
        }
        long long v148 = v81;
        int v83 = sub_1CB8F1DC4((unint64_t *)&v148);
        if (v82 == 1)
        {
          if (a4) {
            goto LABEL_110;
          }
        }
        else if (a4)
        {
LABEL_110:
          int v84 = &off_1E66AF900;
          goto LABEL_140;
        }
        if (v83 > 111)
        {
          int v85 = v83;
          if (v83 > 223)
          {
            if (v83 > 287)
            {
              if (v83 == 288) {
                int v84 = (__int16 ***)&off_1E66AF890;
              }
              else {
                int v84 = (__int16 ***)&off_1E66AF8C8;
              }
            }
            else if (v83 == 224)
            {
              int v84 = (__int16 ***)&off_1E66AF820;
            }
            else
            {
              int v84 = (__int16 ***)&off_1E66AF858;
            }
          }
          else if (v83 > 159)
          {
            if (v83 == 160) {
              int v84 = (__int16 ***)&off_1E66AF7B0;
            }
            else {
              int v84 = (__int16 ***)&off_1E66AF7E8;
            }
          }
          else if (v83 == 112)
          {
            int v84 = (__int16 ***)&off_1E66AF740;
          }
          else
          {
            int v84 = (__int16 ***)&off_1E66AF778;
          }
          goto LABEL_139;
        }
        if (v83 > 47)
        {
          int v85 = v83;
          if (v83 > 79)
          {
            if (v83 == 80) {
              int v84 = (__int16 ***)&off_1E66AF698;
            }
            else {
              int v84 = (__int16 ***)&off_1E66AF6D0;
            }
          }
          else if (v83 == 48)
          {
            int v84 = (__int16 ***)&off_1E66AF628;
          }
          else
          {
            int v84 = (__int16 ***)&off_1E66AF9A8;
          }
          goto LABEL_139;
        }
        int v84 = (__int16 ***)&off_1E66AF970;
        int v85 = v83;
        if (v83 == 1)
        {
LABEL_139:
          int v83 = v85;
          goto LABEL_140;
        }
        if (v83 != 16) {
          int v84 = &off_1E66ABDD8;
        }
LABEL_140:
        int v144 = a4;
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
        *(void *)(*(void *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v84;
        uint64_t v87 = *(void *)(a2 + 8);
        if (v87) {
          (*(void (**)(uint64_t))(*(void *)v87 + 24))(v87);
        }
        int v88 = operator new(0x28uLL);
        *int v88 = &unk_1F25F8A50;
        v88[1] = sub_1CBB67B10;
        v88[2] = 0;
        void v88[3] = a1;
        v88[4] = a2;
        int v182 = v88;
        uint64_t v89 = operator new(0x30uLL);
        *uint64_t v89 = &unk_1F25F8A98;
        v89[1] = sub_1CBB644E4;
        v89[2] = 0;
        v89[3] = a1;
        v89[4] = a2;
        *((_DWORD *)v89 + 10) = 0;
        *((_WORD *)v89 + 22) = 1;
        uint64_t v180 = (unsigned __int8 *)v89;
        BOOL v90 = v170;
        if (v170) {
          uint64_t v91 = v179;
        }
        else {
          uint64_t v91 = (unsigned __int8 *)v181;
        }
        sub_1CBB783D4((uint64_t)v177, (uint64_t)v91);
        sub_1CBB6F084(v161, (uint64_t)v178);
        if (v178 == v177)
        {
          (*(void (**)(void *))(v177[0] + 32))(v177);
        }
        else if (v178)
        {
          (*(void (**)(void))(*v178 + 40))();
        }
        sub_1CBB783D4((uint64_t)v175, (uint64_t)v91);
        sub_1CBB6F084(v157, (uint64_t)v176);
        if (v176 == v175)
        {
          (*(void (**)(void *))(v175[0] + 32))(v175);
        }
        else if (v176)
        {
          (*(void (**)(void))(*v176 + 40))();
        }
        int v92 = v77 & v73;
        sub_1CBB783D4((uint64_t)v173, (uint64_t)v91);
        sub_1CBB6F084(v153, (uint64_t)v174);
        if (v174 == v173)
        {
          (*(void (**)(void *))(v173[0] + 32))(v173);
        }
        else if (v174)
        {
          (*(void (**)(void))(*v174 + 40))();
        }
        if (v83 == 32) {
          char v93 = v92;
        }
        else {
          char v93 = 0;
        }
        if ((v93 & 1) != 0
          || (int v146 = v83, v83 == 16)
          && (v169 != 14 ? (BOOL v94 = (v169 & 0xFFFFFFFE) == 12) : (BOOL v94 = 1),
              !v94 ? (int v95 = 0) : (int v95 = 1),
              v168 != 14 ? (BOOL v96 = (v168 & 0xFFFFFFFE) == 12) : (BOOL v96 = 1),
              !v96 ? (int v97 = 0) : (int v97 = 1),
              v95 != v97))
        {
          uint64_t v76 = 0;
          LOBYTE(v75) = 0;
          unsigned int v74 = 0;
          goto LABEL_276;
        }
        if (v90) {
          int v98 = 9;
        }
        else {
          int v98 = 1;
        }
        int v99 = v98;
        int v100 = 2 * (v83 != 32);
        if (v144) {
          int v100 = 12;
        }
        int v101 = v98;
        if ((v162 & 0xFFFFFFFE) != 4)
        {
          if (v163 == 32)
          {
            int v101 = 0;
          }
          else if (v164)
          {
            int v101 = 21;
          }
          else
          {
            int v101 = 2;
          }
        }
        int v102 = v98;
        if ((v158 & 0xFFFFFFFE) != 4)
        {
          if (v159 == 32)
          {
            int v102 = 0;
          }
          else if (v160)
          {
            int v102 = 21;
          }
          else
          {
            int v102 = 2;
          }
        }
        if ((v154 & 0xFFFFFFFE) != 4)
        {
          if (v155 == 32)
          {
            int v99 = 0;
          }
          else if (v156)
          {
            int v99 = 21;
          }
          else
          {
            int v99 = 2;
          }
        }
        v171[0] = v172;
        v172[0] = v100;
        v172[1] = v101;
        v172[2] = v102;
        v172[3] = v99;
        v171[1] = (void *)0x500000004;
        if (((v144 | v92) & 1) == 0
          && (v101 != v98 && v100 != v101 || v102 != v98 && v100 != v102 || v99 != v98 && v100 != v99))
        {
          unsigned int v74 = 0;
          LOBYTE(v75) = 0;
          uint64_t v76 = 0;
          goto LABEL_276;
        }
        if (v92) {
          unsigned int v103 = 58;
        }
        else {
          unsigned int v103 = 57;
        }
        if (v90) {
          unsigned int v104 = 49;
        }
        else {
          unsigned int v104 = 68;
        }
        if (!v90) {
          unsigned int v103 = 87;
        }
        if (v144) {
          uint64_t v105 = v104;
        }
        else {
          uint64_t v105 = v103;
        }
        unsigned int v140 = sub_1CBE0418C(v105, 4, v172);
        uint64_t v106 = *(void *)(a3 + 24);
        long long v152 = 0u;
        long long v151 = 0u;
        long long v150 = 0u;
        long long v149 = 0u;
        uint64_t v107 = *(void *)(v106 + 32);
        uint64_t v108 = *(void *)(v107 + 40);
        long long v148 = &unk_1F261CD58;
        *(void *)&long long v149 = v107;
        *(void *)&long long v150 = v108;
        *((void *)&v149 + 1) = (*(uint64_t (**)(void))(**(void **)(v107 + 16) + 104))(*(void *)(v107 + 16));
        v147[0] = 0;
        if (!*((void *)&v150 + 1)) {
          goto LABEL_212;
        }
        int v130 = **((unsigned char **)&v150 + 1);
        if ((v130 - 4) > 0x1E)
        {
          if ((v130 - 3) >= 0xFFFFFFFE) {
            uint64_t v136 = *((void *)&v150 + 1);
          }
          else {
            uint64_t v136 = 0;
          }
          if ((v130 - 3) > 0xFFFFFFFD)
          {
            unint64_t v132 = v136 + 8;
            goto LABEL_309;
          }
          if (v130 == 3) {
            *(void *)(*((void *)&v150 + 1) + 8) = 0;
          }
LABEL_212:
          *((void *)&v150 + 1) = 0;
          goto LABEL_213;
        }
        if ((*(unsigned char *)(*((void *)&v150 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v150 + 1) + 12)) {
          goto LABEL_212;
        }
        uint64_t v131 = *(void *)(*((void *)&v150 + 1) + 16);
        if ((v131 & 4) == 0) {
          goto LABEL_212;
        }
        unint64_t v132 = v131 & 0xFFFFFFFFFFFFFFF8;
        if (!v132) {
          goto LABEL_212;
        }
LABEL_309:
        unint64_t v184 = (unint64_t)&v150 + 8;
        sub_1CC5FA668(v132 + 16, &v184);
        *((llvm::MachineFunction **)&v150 + 1) = v147[0];
        if (v147[0]) {
          llvm::MetadataTracking::retrack((uint64_t)v147, (unsigned __int8 *)v147[0], (uint64_t)&v150 + 8);
        }
LABEL_213:
        *((void *)&v151 + 1) = a3;
        *(void *)&long long v152 = 0;
        *(void *)&long long v151 = *(void *)(a3 + 24);
        if ((long long *)(a3 + 56) != (long long *)((char *)&v150 + 8))
        {
          if (!*((void *)&v150 + 1)) {
            goto LABEL_215;
          }
          int v133 = **((unsigned char **)&v150 + 1);
          if ((v133 - 4) > 0x1E)
          {
            if ((v133 - 3) >= 0xFFFFFFFE) {
              uint64_t v137 = *((void *)&v150 + 1);
            }
            else {
              uint64_t v137 = 0;
            }
            if ((v133 - 3) < 0xFFFFFFFE)
            {
              if (v133 == 3) {
                *(void *)(*((void *)&v150 + 1) + 8) = 0;
              }
              goto LABEL_215;
            }
            unint64_t v135 = v137 + 8;
          }
          else if ((*(unsigned char *)(*((void *)&v150 + 1) + 1) & 0x7F) != 2 {
                 && !*(_DWORD *)(*((void *)&v150 + 1) + 12)
          }
                 || (uint64_t v134 = *(void *)(*((void *)&v150 + 1) + 16), (v134 & 4) == 0)
                 || (unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_215:
            long long v109 = *(unsigned __int8 **)(a3 + 56);
            *((void *)&v150 + 1) = v109;
            if (v109) {
              llvm::MetadataTracking::track((uint64_t)&v150 + 8, v109, 2);
            }
            goto LABEL_217;
          }
          unint64_t v184 = (unint64_t)&v150 + 8;
          sub_1CC5FA668(v135 + 16, &v184);
          goto LABEL_215;
        }
LABEL_217:
        LODWORD(v184) = IncompleteVirtualRegister;
        LODWORD(v185) = 1;
        long long v110 = (llvm::MachineFunction *)sub_1CC739C54(&v148, v140, &v184, 1, 0, 0, 0);
        uint64_t v112 = v111;
        v147[0] = v110;
        v147[1] = v111;
        LODWORD(v184) = 1;
        uint64_t v185 = 0;
        uint64_t v186 = 0;
        llvm::MachineInstr::addOperand(v111, v110, (const llvm::MachineOperand *)&v184);
        LODWORD(v184) = 1;
        uint64_t v185 = 0;
        uint64_t v186 = v169;
        unsigned int v139 = v169;
        llvm::MachineInstr::addOperand(v112, v110, (const llvm::MachineOperand *)&v184);
        uint64_t v113 = v168;
        LODWORD(v184) = 1;
        uint64_t v185 = 0;
        uint64_t v186 = v168;
        llvm::MachineInstr::addOperand(v112, v110, (const llvm::MachineOperand *)&v184);
        LODWORD(v184) = 1;
        uint64_t v185 = 0;
        uint64_t v186 = v113;
        llvm::MachineInstr::addOperand(v112, v110, (const llvm::MachineOperand *)&v184);
        sub_1CB9983A0(v147, (uint64_t)v161);
        sub_1CB9983A0(v147, (uint64_t)v157);
        sub_1CB9983A0(v147, (uint64_t)v153);
        uint64_t v114 = 0;
        uint64_t v115 = 4;
        if (v144) {
          uint64_t v115 = 1;
        }
        uint64_t v142 = v115;
        if (v144) {
          uint64_t v116 = 0;
        }
        else {
          uint64_t v116 = 3;
        }
        do
        {
          switch(v183[v114])
          {
            case 1:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v186 = 0;
              goto LABEL_232;
            case 2:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v186 = 1;
              goto LABEL_232;
            case 3:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v117 = 2;
              goto LABEL_231;
            case 4:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v117 = 3;
              goto LABEL_231;
            case 5:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v117 = 4;
              goto LABEL_231;
            case 6:
            case 9:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v117 = 5;
              goto LABEL_231;
            case 7:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v186 = v116;
              goto LABEL_232;
            case 8:
              LODWORD(v184) = 1;
              uint64_t v185 = 0;
              uint64_t v117 = v142;
LABEL_231:
              uint64_t v186 = v117;
LABEL_232:
              llvm::MachineInstr::addOperand(v112, v110, (const llvm::MachineOperand *)&v184);
              break;
            default:
              break;
          }
          ++v114;
        }
        while (v114 != 8);
        if (v146 == 16 && v139 - 12 <= 2 && (v113 - 12) < 3)
        {
          if ((v162 & 0xFFFFFFFE) != 4 && v163 != 32 && !v164)
          {
            uint64_t v118 = *((void *)v112 + 4) + 32 * (sub_1CBDA6464((unsigned __int16)v140, 0x11u) + 1);
            *(void *)(v118 + 16) |= 8uLL;
          }
          if ((v158 & 0xFFFFFFFE) != 4 && v159 != 32 && !v160)
          {
            uint64_t v119 = *((void *)v112 + 4) + 32 * (sub_1CBDA6464((unsigned __int16)v140, 4u) + 1);
            *(void *)(v119 + 16) |= 8uLL;
          }
          if ((v154 & 0xFFFFFFFE) != 4 && v155 != 32 && !v156)
          {
            uint64_t v120 = *((void *)v112 + 4) + 32 * (sub_1CBDA6464((unsigned __int16)v140, 0x14u) + 1);
            *(void *)(v120 + 16) |= 8uLL;
          }
        }
        sub_1CC73B5D0(v112, a1[9], (void *)a1[10]);
        if ((v144 & 1) == 0) {
          sub_1CB98E138((void *)a2, (llvm::MachineInstr *)a3, *(_DWORD *)(*((void *)v112 + 4) + 4));
        }
        uint64_t v121 = a1[3];
        uint64_t v122 = *(void *)(v121 + 48);
        if (!v122)
        {
          uint64_t v122 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v121 + 8) + 216))(*(void *)(v121 + 8), v121 + 128, v121);
          *(void *)(v121 + 48) = v122;
        }
        uint64_t v123 = *(void *)(v122 + 232);
        unint64_t v184 = 0;
        if ((sub_1CBB79318(v123, *(_DWORD *)(v122 + 248), (uint64_t)v112, &v184) & 1) == 0)
        {
          int v124 = *(_DWORD *)(v122 + 240);
          unsigned int v125 = *(_DWORD *)(v122 + 248);
          if (4 * v124 + 4 >= 3 * v125)
          {
            v125 *= 2;
          }
          else if (v125 + ~v124 - *(_DWORD *)(v122 + 244) > v125 >> 3)
          {
LABEL_266:
            unint64_t v126 = v184;
            ++*(_DWORD *)(v122 + 240);
            if (*(void *)v126 != -4096) {
              --*(_DWORD *)(v122 + 244);
            }
            *(void *)(v126 + 8) = 0;
            *(void *)(v126 + 16) = 0;
            *(void *)unint64_t v126 = v112;
            *(_DWORD *)(v126 + 24) = v165[0];
            *(_DWORD *)(v126 + 27) = *(_DWORD *)((char *)v165 + 3);
            *(unsigned char *)(v126 + 31) = 0;
            goto LABEL_269;
          }
          sub_1CBB793AC(v122 + 232, v125);
          unint64_t v184 = 0;
          sub_1CBB79318(*(void *)(v122 + 232), *(_DWORD *)(v122 + 248), (uint64_t)v112, &v184);
          goto LABEL_266;
        }
LABEL_269:
        unsigned int v75 = *(_DWORD *)(*((void *)v112 + 4) + 4);
        unsigned int v74 = v75 & 0xFFFFFF00;
        long long v148 = &unk_1F261CD58;
        if (!*((void *)&v150 + 1)) {
          goto LABEL_273;
        }
        int v127 = **((unsigned char **)&v150 + 1);
        if ((v127 - 4) > 0x1E)
        {
          if ((v127 - 3) >= 0xFFFFFFFE) {
            uint64_t v128 = *((void *)&v150 + 1);
          }
          else {
            uint64_t v128 = 0;
          }
          if ((v127 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v129 = v128 + 8;
LABEL_289:
            unint64_t v184 = (unint64_t)&v150 + 8;
            sub_1CC5FA668(v129 + 16, &v184);
            goto LABEL_273;
          }
          if (v127 == 3) {
            *(void *)(*((void *)&v150 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v150 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v150 + 1) + 12))
        {
          uint64_t v138 = *(void *)(*((void *)&v150 + 1) + 16);
          if ((v138 & 4) != 0)
          {
            unint64_t v129 = v138 & 0xFFFFFFFFFFFFFFF8;
            if (v129) {
              goto LABEL_289;
            }
          }
        }
LABEL_273:
        if (v171[0] != v172) {
          free(v171[0]);
        }
        uint64_t v76 = 0x100000000;
LABEL_276:
        if (v180 == v179)
        {
          (*(void (**)(unsigned __int8 *))(*(void *)v179 + 32))(v179);
        }
        else if (v180)
        {
          (*(void (**)(void))(*(void *)v180 + 40))();
        }
        if (v182 == v181)
        {
          (*(void (**)(void *))(v181[0] + 32))(v181);
        }
        else if (v182)
        {
          (*(void (**)(void))(*v182 + 40))();
        }
        return v76 & 0x100000000 | v74 | v75;
    }
  }
}

uint64_t sub_1CBB741B0(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9)
{
  uint64_t v12 = a5;
  uint64_t v13 = (unsigned __int8 *)a4;
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  BOOL v90 = (~*(unsigned __int16 *)(a2 + 44) & 0x7C0) == 0;
  __int16 v91 = *(_WORD *)(a1[7] + 1020);
  BOOL v94 = (unsigned __int8 *)a3;
  uint64_t v17 = *(unsigned int *)(a3 + 4);
  int v18 = *(_DWORD *)(a5 + 4);
  if (v17 != v18 && v17 != *(_DWORD *)(a6 + 4))
  {
    int v19 = (uint64_t *)((v17 & 0x80000000) != 0
                    ? *(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8
                    : *(void *)(v16 + 272) + 8 * v17);
    uint64_t v20 = *v19;
    if (v20)
    {
      if (*(unsigned char *)(v20 + 3) & 1) != 0 || (uint64_t v20 = *(void *)(v20 + 24)) != 0 && (*(unsigned char *)(v20 + 3))
      {
        uint64_t v21 = *(void *)(v20 + 8);
        if (v21)
        {
          if (**(_WORD **)(v21 + 16) == 178)
          {
            if ((v17 & 0x80000000) != 0) {
              uint64_t v22 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v22 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v17);
            }
            uint64_t v23 = *v22;
            if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
              uint64_t v23 = *(void *)(v23 + 24);
            }
            BOOL v94 = (unsigned __int8 *)(*(void *)(*(void *)(v23 + 8) + 32) + 32);
          }
        }
      }
    }
  }
  uint64_t v24 = *(unsigned int *)(a4 + 4);
  if (v24 != v18 && v24 != *(_DWORD *)(a6 + 4))
  {
    char v25 = (uint64_t *)((v24 & 0x80000000) != 0
                    ? *(void *)(v16 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8
                    : *(void *)(v16 + 272) + 8 * v24);
    uint64_t v26 = *v25;
    if (v26)
    {
      if (*(unsigned char *)(v26 + 3) & 1) != 0 || (uint64_t v26 = *(void *)(v26 + 24)) != 0 && (*(unsigned char *)(v26 + 3))
      {
        uint64_t v27 = *(void *)(v26 + 8);
        if (v27)
        {
          if (**(_WORD **)(v27 + 16) == 178)
          {
            if ((v24 & 0x80000000) != 0) {
              int v28 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
            }
            else {
              int v28 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v24);
            }
            uint64_t v29 = *v28;
            if ((*(unsigned char *)(v29 + 3) & 1) == 0) {
              uint64_t v29 = *(void *)(v29 + 24);
            }
            uint64_t v13 = (unsigned __int8 *)(*(void *)(*(void *)(v29 + 8) + 32) + 32);
          }
        }
      }
    }
  }
  int v30 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if (v30 < 0 && (uint64_t v31 = v30 & 0x7FFFFFFF, v31 < *(_DWORD *)(v16 + 432))) {
    char v32 = *(void **)(*(void *)(v16 + 424) + 8 * v31);
  }
  else {
    char v32 = 0;
  }
  int v99 = v32;
  int v34 = sub_1CB8F1DC4((unint64_t *)&v99);
  if (v33 == 1) {
  if (v34 <= 111)
  }
  {
    if (v34 <= 47)
    {
      char v35 = (__int16 ***)&off_1E66AF970;
      if (v34 != 1 && v34 != 16) {
        char v35 = &off_1E66ABDD8;
      }
    }
    else if (v34 > 79)
    {
      if (v34 == 80) {
        char v35 = (__int16 ***)&off_1E66AF698;
      }
      else {
        char v35 = (__int16 ***)&off_1E66AF6D0;
      }
    }
    else if (v34 == 48)
    {
      char v35 = (__int16 ***)&off_1E66AF628;
    }
    else
    {
      char v35 = (__int16 ***)&off_1E66AF9A8;
    }
  }
  else if (v34 > 223)
  {
    if (v34 > 287)
    {
      if (v34 == 288) {
        char v35 = (__int16 ***)&off_1E66AF890;
      }
      else {
        char v35 = (__int16 ***)&off_1E66AF8C8;
      }
    }
    else if (v34 == 224)
    {
      char v35 = (__int16 ***)&off_1E66AF820;
    }
    else
    {
      char v35 = (__int16 ***)&off_1E66AF858;
    }
  }
  else if (v34 > 159)
  {
    if (v34 == 160) {
      char v35 = (__int16 ***)&off_1E66AF7B0;
    }
    else {
      char v35 = (__int16 ***)&off_1E66AF7E8;
    }
  }
  else if (v34 == 112)
  {
    char v35 = (__int16 ***)&off_1E66AF740;
  }
  else
  {
    char v35 = (__int16 ***)&off_1E66AF778;
  }
  if (a9) {
    uint64_t v36 = &off_1E66AF900;
  }
  else {
    uint64_t v36 = v35;
  }
  if ((a7 - 6) > 3)
  {
    unint64_t v93 = a2;
    uint64_t v53 = a1;
    char v37 = a8;
    int v54 = v36;
    char v55 = a9;
LABEL_88:
    if ((a7 - 9) <= 5)
    {
      a7 ^= 0xFu;
      int v56 = 1;
    }
    else
    {
      int v56 = 0;
    }
    uint64_t v70 = 0;
    switch(a7)
    {
      case 2:
        uint64_t v70 = 2;
        break;
      case 3:
        uint64_t v70 = 5;
        break;
      case 4:
        uint64_t v70 = 1;
        break;
      case 5:
        uint64_t v70 = 6;
        break;
      case 6:
        uint64_t v70 = 0;
        v56 ^= 1u;
        break;
      default:
        goto LABEL_166;
    }
    goto LABEL_166;
  }
  uint64_t v89 = a1;
  char v37 = a8;
  char v38 = v91 | v90;
  unsigned int v39 = a7 - 7;
  if (((a7 - 6) < 2) | (v91 | v90) & 1) {
    int v40 = (unsigned __int8 *)v12;
  }
  else {
    int v40 = (unsigned __int8 *)a6;
  }
  if (((a7 - 6) < 2) | (v91 | v90) & 1) {
    uint64_t v41 = (unsigned __int8 *)a6;
  }
  else {
    uint64_t v41 = (unsigned __int8 *)v12;
  }
  int v92 = v41;
  if ((v38 & 1) == 0)
  {
    int v88 = v36;
    uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
    *(void *)(*(void *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v35;
    uint64_t v58 = *(void *)(v16 + 8);
    if (v58) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 24))(v58, IncompleteVirtualRegister);
    }
    if (!sub_1CBB71F60(v89, v16, a2, 1, v94, v13, v40, v92, v37, v84, IncompleteVirtualRegister, SHIDWORD(IncompleteVirtualRegister), 0))goto LABEL_114; {
    if ((IncompleteVirtualRegister & 0x80000000) != 0)
    }
      int v59 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF) + 8);
    else {
      int v59 = (uint64_t *)(*(void *)(v16 + 272) + 8 * IncompleteVirtualRegister);
    }
    uint64_t v60 = *v59;
    if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
      uint64_t v60 = *(void *)(v60 + 24);
    }
    uint64_t v61 = *(void *)(v60 + 8);
    sub_1CC73B5D0((void *)v61, v89[9], (void *)v89[10]);
    if (v39 < 2) {
      char v35 = v88;
    }
    LODWORD(v47) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
    uint64_t v62 = v47;
    uint64_t v87 = v47 & 0x7FFFFFFF;
    *(void *)(*(void *)(v16 + 24) + 16 * v87) = v35;
    uint64_t v63 = *(void *)(v16 + 8);
    if (v63)
    {
      (*(void (**)(uint64_t, void))(*(void *)v63 + 24))(v63, v47);
      uint64_t v62 = v47;
    }
    char v64 = a9;
    if (v39 >= 2) {
      char v64 = 0;
    }
    if (!sub_1CBB71F60(v89, v16, a2, 5, v94, v13, v40, *(unsigned __int8 **)(v61 + 32), v37, v85, v62, SHIDWORD(v62), v64))goto LABEL_114; {
    if (v39 > 1)
    }
    {
      if ((v47 & 0x80000000) != 0) {
        char v65 = (uint64_t *)(*(void *)(v16 + 24) + 16 * v87 + 8);
      }
      else {
        char v65 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v47);
      }
      uint64_t v66 = *v65;
      if ((*(unsigned char *)(v66 + 3) & 1) == 0) {
        uint64_t v66 = *(void *)(v66 + 24);
      }
      uint64_t v67 = *(void *)(v66 + 8);
      sub_1CC73B5D0((void *)v67, v89[9], (void *)v89[10]);
      LODWORD(v47) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
      *(void *)(*(void *)(v16 + 24) + 16 * (v47 & 0x7FFFFFFF)) = v88;
      uint64_t v68 = *(void *)(v16 + 8);
      if (v68) {
        (*(void (**)(uint64_t, void))(*(void *)v68 + 24))(v68, v47);
      }
      if (!sub_1CBB71F60(v89, v16, a2, 0, v94, v13, v92, *(unsigned __int8 **)(v67 + 32), v37, v86, v47, 0, a9))
      {
LABEL_114:
        uint64_t v69 = 0;
        LOBYTE(v47) = 0;
        int v49 = 0;
        return v69 | v49 | v47;
      }
    }
    int v49 = v47 & 0xFFFFFF00;
    goto LABEL_113;
  }
  if (v39 <= 1)
  {
    uint64_t v42 = *(void *)(a2 + 24);
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    uint64_t v43 = *(void *)(v42 + 32);
    uint64_t v44 = *(void *)(v43 + 40);
    int v99 = &unk_1F261CD58;
    *(void *)&long long v100 = v43;
    *(void *)&long long v101 = v44;
    *((void *)&v100 + 1) = (*(uint64_t (**)(void))(**(void **)(v43 + 16) + 104))(*(void *)(v43 + 16));
    int v97 = 0;
    if (!*((void *)&v101 + 1))
    {
LABEL_73:
      *((void *)&v101 + 1) = 0;
      goto LABEL_74;
    }
    int v72 = **((unsigned char **)&v101 + 1);
    if ((v72 - 4) > 0x1E)
    {
      if ((v72 - 3) >= 0xFFFFFFFE) {
        uint64_t v78 = *((void *)&v101 + 1);
      }
      else {
        uint64_t v78 = 0;
      }
      if ((v72 - 3) <= 0xFFFFFFFD)
      {
        if (v72 == 3) {
          *(void *)(*((void *)&v101 + 1) + 8) = 0;
        }
        goto LABEL_73;
      }
      unint64_t v74 = v78 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v101 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v101 + 1) + 12)) {
        goto LABEL_73;
      }
      uint64_t v73 = *(void *)(*((void *)&v101 + 1) + 16);
      if ((v73 & 4) == 0) {
        goto LABEL_73;
      }
      unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
      if (!v74) {
        goto LABEL_73;
      }
    }
    v95[0] = (char *)&v101 + 8;
    sub_1CC5FA668(v74 + 16, v95);
    *((void *)&v101 + 1) = v97;
    if (v97) {
      llvm::MetadataTracking::retrack((uint64_t)&v97, v97, (uint64_t)&v101 + 8);
    }
LABEL_74:
    *((void *)&v102 + 1) = a2;
    *(void *)&long long v103 = 0;
    *(void *)&long long v102 = *(void *)(a2 + 24);
    uint64_t v45 = (_OWORD *)(a2 + 56);
    if (v45 == (long long *)((char *)&v101 + 8)) {
      goto LABEL_78;
    }
    if (!*((void *)&v101 + 1))
    {
LABEL_76:
      uint64_t v46 = *(unsigned __int8 **)v45;
      *((void *)&v101 + 1) = v46;
      if (v46) {
        llvm::MetadataTracking::track((uint64_t)&v101 + 8, v46, 2);
      }
LABEL_78:
      LODWORD(v47) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
      *(void *)(*(void *)(v16 + 24) + 16 * (v47 & 0x7FFFFFFF)) = v35;
      uint64_t v48 = *(void *)(v16 + 8);
      if (v48) {
        (*(void (**)(uint64_t))(*(void *)v48 + 24))(v48);
      }
      LODWORD(v97) = v47;
      int v98 = 1;
      LODWORD(v95[0]) = *(_DWORD *)(v12 + 4);
      int v96 = 0;
      (*((void (**)(void **, uint64_t, unsigned __int8 **, uint64_t, void *, uint64_t, void))v99 + 4))(&v99, 19, &v97, 1, v95, 1, 0);
      int v49 = v47 & 0xFFFFFF00;
      int v99 = &unk_1F261CD58;
      if (!*((void *)&v101 + 1)) {
        goto LABEL_113;
      }
      int v50 = **((unsigned char **)&v101 + 1);
      if ((v50 - 4) > 0x1E)
      {
        if ((v50 - 3) >= 0xFFFFFFFE) {
          uint64_t v71 = *((void *)&v101 + 1);
        }
        else {
          uint64_t v71 = 0;
        }
        if ((v50 - 3) < 0xFFFFFFFE)
        {
          if (v50 == 3) {
            *(void *)(*((void *)&v101 + 1) + 8) = 0;
          }
          goto LABEL_113;
        }
        unint64_t v52 = v71 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v101 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v101 + 1) + 12)) {
          goto LABEL_113;
        }
        uint64_t v51 = *(void *)(*((void *)&v101 + 1) + 16);
        if ((v51 & 4) == 0) {
          goto LABEL_113;
        }
        unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (!v52) {
          goto LABEL_113;
        }
      }
      v95[0] = (char *)&v101 + 8;
      sub_1CC5FA668(v52 + 16, v95);
LABEL_113:
      uint64_t v69 = 0x100000000;
      return v69 | v49 | v47;
    }
    int v75 = **((unsigned char **)&v101 + 1);
    if ((v75 - 4) > 0x1E)
    {
      if ((v75 - 3) >= 0xFFFFFFFE) {
        uint64_t v79 = *((void *)&v101 + 1);
      }
      else {
        uint64_t v79 = 0;
      }
      if ((v75 - 3) < 0xFFFFFFFE)
      {
        if (v75 == 3) {
          *(void *)(*((void *)&v101 + 1) + 8) = 0;
        }
        goto LABEL_76;
      }
      unint64_t v77 = v79 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v101 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v101 + 1) + 12)) {
        goto LABEL_76;
      }
      uint64_t v76 = *(void *)(*((void *)&v101 + 1) + 16);
      if ((v76 & 4) == 0) {
        goto LABEL_76;
      }
      unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
      if (!v77) {
        goto LABEL_76;
      }
    }
    v95[0] = (char *)&v101 + 8;
    sub_1CC5FA668(v77 + 16, v95);
    goto LABEL_76;
  }
  unint64_t v93 = a2;
  int v54 = v36;
  char v55 = a9;
  uint64_t v53 = v89;
  if (a7 != 9) {
    goto LABEL_88;
  }
  int v56 = 0;
  uint64_t v70 = 0;
LABEL_166:
  if (v56) {
    uint64_t v80 = (unsigned __int8 *)v12;
  }
  else {
    uint64_t v80 = (unsigned __int8 *)a6;
  }
  if (v56) {
    uint64_t v12 = a6;
  }
  uint64_t v47 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
  *(void *)(*(void *)(v16 + 24) + 16 * (v47 & 0x7FFFFFFF)) = v54;
  uint64_t v81 = *(void *)(v16 + 8);
  if (v81) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 24))(v81, v47);
  }
  int v82 = sub_1CBB71F60(v53, v16, v93, v70, v94, v13, (unsigned __int8 *)v12, v80, v37, v84, v47, SHIDWORD(v47), v55);
  if (v82)
  {
    int v49 = v47 & 0xFFFFFF00;
  }
  else
  {
    LOBYTE(v47) = 0;
    int v49 = 0;
  }
  uint64_t v69 = 0x100000000;
  if (!v82) {
    uint64_t v69 = 0;
  }
  return v69 | v49 | v47;
}

uint64_t sub_1CBB74CD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9)
{
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40);
  int v10 = 20;
  unsigned int v11 = 18;
  int v12 = 1;
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  int v20 = 0;
  switch(a7)
  {
    case '!':
      int v20 = 1;
      goto LABEL_6;
    case '""':
      int v10 = 10;
      goto LABEL_4;
    case '#':
      LOBYTE(v20) = 0;
      unsigned int v11 = 12;
      goto LABEL_17;
    case '$':
      int v10 = 12;
      goto LABEL_4;
    case '%':
      LOBYTE(v20) = 0;
      unsigned int v11 = 10;
      goto LABEL_17;
    case '&':
      int v10 = 18;
      goto LABEL_4;
    case '\'':
      LOBYTE(v20) = 0;
      unsigned int v11 = 20;
      goto LABEL_17;
    case '(':
LABEL_4:
      int v12 = 0;
      LOBYTE(v20) = 0;
      unsigned int v11 = v10;
      goto LABEL_17;
    case ')':
      goto LABEL_17;
    default:
LABEL_6:
      uint64_t v21 = *(unsigned int *)(a3 + 4);
      if ((v21 & 0x80000000) != 0) {
        uint64_t v22 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v22 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v21);
      }
      uint64_t v23 = *v22;
      if (!v23) {
        goto LABEL_16;
      }
      if ((*(unsigned char *)(v23 + 3) & 1) == 0)
      {
        uint64_t v23 = *(void *)(v23 + 24);
        if (!v23 || (*(unsigned char *)(v23 + 3) & 1) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24) {
        goto LABEL_16;
      }
      if (**(_WORD **)(v24 + 16) != 65) {
        goto LABEL_16;
      }
      if (*(_DWORD *)(v24 + 40) != 3) {
        goto LABEL_16;
      }
      sub_1CC73C210(*(_DWORD *)(a4 + 4), *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 40), (uint64_t)&v93);
      if (!BYTE8(v94)) {
        goto LABEL_16;
      }
      if (v94 >= 0x41)
      {
        if (v93) {
          MEMORY[0x1D25D9CB0](v93, 0x1000C8000313F17);
        }
        goto LABEL_16;
      }
      if ((uint64_t)((void)v93 << -(uint64_t)v94) >> -(uint64_t)v94)
      {
LABEL_16:
        unsigned int v11 = 17;
        int v12 = v20;
        LOBYTE(v20) = 0;
        goto LABEL_17;
      }
      uint64_t v29 = *(unsigned int *)(v17 + 4);
      if ((v29 & 0x80000000) != 0) {
        int v30 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
      }
      else {
        int v30 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v29);
      }
      uint64_t v31 = *v30;
      if ((*(unsigned char *)(v31 + 3) & 1) == 0) {
        uint64_t v31 = *(void *)(v31 + 24);
      }
      uint64_t v32 = *(void *)(*(void *)(v31 + 8) + 32);
      uint64_t v17 = v32 + 32;
      uint64_t v16 = v32 + 64;
      int v12 = v20 ^ 1;
      unsigned int v11 = 9;
      LOBYTE(v20) = 1;
LABEL_17:
      uint64_t v25 = *(unsigned int *)(v17 + 4);
      if ((v25 & 0x80000000) != 0) {
        uint64_t v26 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v26 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v25);
      }
      uint64_t v27 = *v26;
      char v92 = v20;
      if (v27)
      {
        if (*(unsigned char *)(v27 + 3) & 1) != 0 || (uint64_t v27 = *(void *)(v27 + 24)) != 0 && (*(unsigned char *)(v27 + 3))
        {
          uint64_t v28 = *(void *)(v27 + 8);
          if (v28)
          {
            if (**(_WORD **)(v28 + 16) == 126)
            {
              if (v11 != 17) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
          }
        }
      }
      uint64_t v33 = *(unsigned int *)(v16 + 4);
      if ((v33 & 0x80000000) != 0) {
        int v34 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
      }
      else {
        int v34 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v33);
      }
      uint64_t v35 = *v34;
      if (v35)
      {
        if (*(unsigned char *)(v35 + 3) & 1) != 0 || (uint64_t v35 = *(void *)(v35 + 24)) != 0 && (*(unsigned char *)(v35 + 3))
        {
          uint64_t v36 = *(void *)(v35 + 8);
          if (v36)
          {
            if (v11 == 17 && **(_WORD **)(v36 + 16) == 126) {
LABEL_43:
            }
              unsigned int v11 = 9;
          }
        }
      }
LABEL_44:
      if ((v25 & 0x80000000) != 0) {
        uint64_t v37 = *(void *)(v9 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8;
      }
      else {
        uint64_t v37 = *(void *)(v9 + 272) + 8 * v25;
      }
      uint64_t v38 = *(void *)v37;
      if ((*(unsigned char *)(*(void *)v37 + 3) & 1) == 0) {
        uint64_t v38 = *(void *)(v38 + 24);
      }
      int v39 = *(_DWORD *)(a5 + 4);
      if (v25 == v39 || v25 == *(_DWORD *)(a6 + 4)) {
        goto LABEL_63;
      }
      uint64_t v40 = *(void *)(v38 + 8);
      int v41 = **(unsigned __int16 **)(v40 + 16);
      if (v41 == 118) {
        goto LABEL_59;
      }
      if (v41 == 126)
      {
        if (v11 > 0x10) {
          goto LABEL_63;
        }
      }
      else if (v41 != 124 || v11 < 0x11)
      {
        goto LABEL_63;
      }
LABEL_59:
      uint64_t v43 = *(void *)(v40 + 32);
      int v44 = *(_DWORD *)(v43 + 36);
      if (v44 < 0)
      {
        uint64_t v45 = v44 & 0x7FFFFFFF;
        if (v45 < *(_DWORD *)(v9 + 432) && *(void *)(*(void *)(v9 + 424) + 8 * v45) == 129) {
          uint64_t v17 = v43 + 32;
        }
      }
LABEL_63:
      uint64_t v46 = *(unsigned int *)(v16 + 4);
      if ((v46 & 0x80000000) != 0) {
        uint64_t v47 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v47 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v46);
      }
      uint64_t v48 = *v47;
      if ((*(unsigned char *)(v48 + 3) & 1) == 0) {
        uint64_t v48 = *(void *)(v48 + 24);
      }
      if (v46 == v39 || v46 == *(_DWORD *)(a6 + 4)) {
        goto LABEL_82;
      }
      uint64_t v49 = *(void *)(v48 + 8);
      int v50 = **(unsigned __int16 **)(v49 + 16);
      if (v50 == 118) {
        goto LABEL_78;
      }
      if (v50 == 126)
      {
        if (v11 > 0x10) {
          goto LABEL_82;
        }
      }
      else if (v50 != 124 || v11 < 0x11)
      {
        goto LABEL_82;
      }
LABEL_78:
      uint64_t v52 = *(void *)(v49 + 32);
      int v53 = *(_DWORD *)(v52 + 36);
      if (v53 < 0)
      {
        uint64_t v54 = v53 & 0x7FFFFFFF;
        if (v54 < *(_DWORD *)(v9 + 432) && *(void *)(*(void *)(v9 + 424) + 8 * v54) == 129) {
          uint64_t v16 = v52 + 32;
        }
      }
LABEL_82:
      if (v12) {
        char v55 = (unsigned __int8 *)a5;
      }
      else {
        char v55 = (unsigned __int8 *)a6;
      }
      if (!v12) {
        a6 = a5;
      }
      int v56 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if (v56 < 0 && (uint64_t v57 = v56 & 0x7FFFFFFF, v57 < *(_DWORD *)(v9 + 432)))
      {
        uint64_t v58 = (unsigned __int8 *)v16;
        int v59 = *(void **)(*(void *)(v9 + 424) + 8 * v57);
      }
      else
      {
        uint64_t v58 = (unsigned __int8 *)v16;
        int v59 = 0;
      }
      unint64_t v93 = v59;
      int v61 = sub_1CB8F1DC4((unint64_t *)&v93);
      if (v60 == 1) {
      if (v61 == 32 || v61 == 16)
      }
      {
        uint64_t v62 = *(void *)(a2 + 24);
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        uint64_t v63 = *(void *)(v62 + 32);
        uint64_t v64 = *(void *)(v63 + 40);
        unint64_t v93 = &unk_1F261CD58;
        *(void *)&long long v94 = v63;
        *(void *)&long long v95 = v64;
        *((void *)&v94 + 1) = (*(uint64_t (**)(void))(**(void **)(v63 + 16) + 104))(*(void *)(v63 + 16));
        int v98 = 0;
        if (!*((void *)&v95 + 1))
        {
LABEL_96:
          *((void *)&v95 + 1) = 0;
          goto LABEL_97;
        }
        int v78 = **((unsigned char **)&v95 + 1);
        if ((v78 - 4) > 0x1E)
        {
          if ((v78 - 3) >= 0xFFFFFFFE) {
            uint64_t v86 = *((void *)&v95 + 1);
          }
          else {
            uint64_t v86 = 0;
          }
          if ((v78 - 3) <= 0xFFFFFFFD)
          {
            if (v78 == 3) {
              *(void *)(*((void *)&v95 + 1) + 8) = 0;
            }
            goto LABEL_96;
          }
          unint64_t v80 = v86 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v95 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v95 + 1) + 12)) {
            goto LABEL_96;
          }
          uint64_t v79 = *(void *)(*((void *)&v95 + 1) + 16);
          if ((v79 & 4) == 0) {
            goto LABEL_96;
          }
          unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFF8;
          if (!v80) {
            goto LABEL_96;
          }
        }
        int v99 = (char *)&v95 + 8;
        sub_1CC5FA668(v80 + 16, &v99);
        *((void *)&v95 + 1) = v98;
        if (v98) {
          llvm::MetadataTracking::retrack((uint64_t)&v98, v98, (uint64_t)&v95 + 8);
        }
LABEL_97:
        *((void *)&v96 + 1) = a2;
        *(void *)&long long v97 = 0;
        *(void *)&long long v96 = *(void *)(a2 + 24);
        char v65 = (_OWORD *)(a2 + 56);
        if (v65 == (long long *)((char *)&v95 + 8)) {
          goto LABEL_101;
        }
        if (!*((void *)&v95 + 1))
        {
LABEL_99:
          uint64_t v66 = *(unsigned __int8 **)v65;
          *((void *)&v95 + 1) = v66;
          if (!v66)
          {
            *((void *)&v95 + 1) = 0;
            goto LABEL_101;
          }
          llvm::MetadataTracking::track((uint64_t)&v95 + 8, v66, 2);
          if (*((void *)&v95 + 1))
          {
            int v81 = **((unsigned char **)&v95 + 1);
            if ((v81 - 4) > 0x1E)
            {
              if ((v81 - 3) >= 0xFFFFFFFE) {
                uint64_t v87 = *((void *)&v95 + 1);
              }
              else {
                uint64_t v87 = 0;
              }
              if ((v81 - 3) < 0xFFFFFFFE)
              {
                if (v81 == 3) {
                  *(void *)(*((void *)&v95 + 1) + 8) = 0;
                }
                goto LABEL_135;
              }
              unint64_t v88 = v87 + 8;
              goto LABEL_155;
            }
            if ((*(unsigned char *)(*((void *)&v95 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v95 + 1) + 12))
            {
              uint64_t v91 = *(void *)(*((void *)&v95 + 1) + 16);
              if ((v91 & 4) != 0)
              {
                unint64_t v88 = v91 & 0xFFFFFFFFFFFFFFF8;
                if (v88)
                {
LABEL_155:
                  int v99 = (char *)&v95 + 8;
                  sub_1CC5FA668(v88 + 16, &v99);
                }
              }
            }
          }
LABEL_135:
          int v82 = *(unsigned __int8 **)v65;
          *((void *)&v95 + 1) = v82;
          if (v82) {
            llvm::MetadataTracking::track((uint64_t)&v95 + 8, v82, 2);
          }
LABEL_101:
          if (v61 == 32) {
            uint64_t v67 = &off_1E66ABDD8;
          }
          else {
            uint64_t v67 = (__int16 ***)&off_1E66AF970;
          }
          unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v9, "", 0);
          uint64_t v69 = IncompleteVirtualRegister;
          uint64_t v70 = &off_1E66AF900;
          char v71 = a9;
          if (!a9) {
            uint64_t v70 = v67;
          }
          *(void *)(*(void *)(v9 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v70;
          uint64_t v72 = *(void *)(v9 + 8);
          if (v72)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 24))(v72, v69);
            char v71 = a9;
          }
          if (v92) {
            unsigned int v73 = 15;
          }
          else {
            unsigned int v73 = dword_1CDC6CBA4[v11 - 9];
          }
          sub_1CBB77108(a1, &v93, v73, (unsigned __int8 *)v17, v58, (unsigned __int8 *)a6, v55, a8, v69, SHIDWORD(v69), v71);
          unint64_t v93 = &unk_1F261CD58;
          if (!*((void *)&v95 + 1)) {
            return v69 | 0x100000000;
          }
          int v74 = **((unsigned char **)&v95 + 1);
          if ((v74 - 4) > 0x1E)
          {
            if ((v74 - 3) >= 0xFFFFFFFE) {
              uint64_t v76 = *((void *)&v95 + 1);
            }
            else {
              uint64_t v76 = 0;
            }
            if ((v74 - 3) < 0xFFFFFFFE)
            {
              if (v74 == 3) {
                *(void *)(*((void *)&v95 + 1) + 8) = 0;
              }
              return v69 | 0x100000000;
            }
            unint64_t v77 = v76 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v95 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v95 + 1) + 12)) {
              return v69 | 0x100000000;
            }
            uint64_t v90 = *(void *)(*((void *)&v95 + 1) + 16);
            if ((v90 & 4) == 0) {
              return v69 | 0x100000000;
            }
            unint64_t v77 = v90 & 0xFFFFFFFFFFFFFFF8;
            if (!v77) {
              return v69 | 0x100000000;
            }
          }
          int v99 = (char *)&v95 + 8;
          sub_1CC5FA668(v77 + 16, &v99);
          return v69 | 0x100000000;
        }
        int v83 = **((unsigned char **)&v95 + 1);
        if ((v83 - 4) > 0x1E)
        {
          if ((v83 - 3) >= 0xFFFFFFFE) {
            uint64_t v89 = *((void *)&v95 + 1);
          }
          else {
            uint64_t v89 = 0;
          }
          if ((v83 - 3) < 0xFFFFFFFE)
          {
            if (v83 == 3) {
              *(void *)(*((void *)&v95 + 1) + 8) = 0;
            }
            goto LABEL_99;
          }
          unint64_t v85 = v89 + 8;
        }
        else
        {
          if ((*(unsigned char *)(*((void *)&v95 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v95 + 1) + 12)) {
            goto LABEL_99;
          }
          uint64_t v84 = *(void *)(*((void *)&v95 + 1) + 16);
          if ((v84 & 4) == 0) {
            goto LABEL_99;
          }
          unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFF8;
          if (!v85) {
            goto LABEL_99;
          }
        }
        int v99 = (char *)&v95 + 8;
        sub_1CC5FA668(v85 + 16, &v99);
        goto LABEL_99;
      }
      return 0;
  }
}

uint64_t sub_1CBB75598(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (**(unsigned __int16 **)(a1 + 16) - 65 > 1) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 40);
  sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 68), v6, (uint64_t)&v61);
  if (BYTE8(v62))
  {
    if (v62 < 0x41)
    {
      uint64_t v12 = (uint64_t)((void)v61 << -(uint64_t)v62) >> -(uint64_t)v62;
      char v13 = 1;
      goto LABEL_12;
    }
    if (v61) {
      MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
    }
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 32) + 68);
  if ((v7 & 0x80000000) != 0) {
    uint64_t v8 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(v6 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
    uint64_t v9 = *(void *)(v9 + 24);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (**(_WORD **)(v10 + 16) != 121) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v10 + 32) + 48);
  if (result)
  {
    uint64_t v42 = *(void **)(result + 32);
    int v41 = (llvm::detail::DoubleAPFloat *)(result + 32);
    if (v42 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v41, (llvm::APInt *)&v61);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v41, (uint64_t)&v61);
    }
    if (v62 >= 0x41) {
      uint64_t v43 = (uint64_t *)v61;
    }
    else {
      uint64_t v43 = (uint64_t *)&v61;
    }
    uint64_t v12 = *v43;
    if (v62 >= 0x41 && v61) {
      MEMORY[0x1D25D9CB0]();
    }
    char v13 = 0;
LABEL_12:
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = *(_DWORD *)(v14 + 4);
    if (v15 < 0 && (v15 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
    {
      BOOL v16 = *(void *)(*(void *)(v6 + 424) + 8 * (v15 & 0x7FFFFFFF)) == 257;
      uint64_t v17 = 0xFFFFLL;
      if (*(void *)(*(void *)(v6 + 424) + 8 * (v15 & 0x7FFFFFFF)) == 257) {
        uint64_t v17 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      BOOL v16 = 0;
      uint64_t v17 = 0xFFFFLL;
    }
    int v18 = *(_DWORD *)(v14 + 36);
    unint64_t v19 = v17 & ~v12;
    if (v19 <= 0xFF)
    {
      uint64_t v20 = *(void *)(a1 + 24);
      int v61 = &unk_1F261CD58;
      long long v65 = 0u;
      long long v64 = 0u;
      long long v63 = 0u;
      long long v62 = 0u;
      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = *(void *)(v21 + 40);
      *(void *)&long long v62 = v21;
      *(void *)&long long v63 = v22;
      *((void *)&v62 + 1) = (*(uint64_t (**)(void))(**(void **)(v21 + 16) + 104))(*(void *)(v21 + 16));
      uint64_t v70 = 0;
      if (!*((void *)&v63 + 1))
      {
LABEL_20:
        *((void *)&v63 + 1) = 0;
        goto LABEL_21;
      }
      int v44 = **((unsigned char **)&v63 + 1);
      if ((v44 - 4) > 0x1E)
      {
        if ((v44 - 3) >= 0xFFFFFFFE) {
          uint64_t v56 = *((void *)&v63 + 1);
        }
        else {
          uint64_t v56 = 0;
        }
        if ((v44 - 3) <= 0xFFFFFFFD)
        {
          if (v44 == 3) {
            *(void *)(*((void *)&v63 + 1) + 8) = 0;
          }
          goto LABEL_20;
        }
        unint64_t v46 = v56 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
          goto LABEL_20;
        }
        uint64_t v45 = *(void *)(*((void *)&v63 + 1) + 16);
        if ((v45 & 4) == 0) {
          goto LABEL_20;
        }
        unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (!v46) {
          goto LABEL_20;
        }
      }
      uint64_t v66 = (char *)&v63 + 8;
      sub_1CC5FA668(v46 + 16, &v66);
      *((void *)&v63 + 1) = v70;
      if (v70) {
        llvm::MetadataTracking::retrack((uint64_t)&v70, v70, (uint64_t)&v63 + 8);
      }
LABEL_21:
      *((void *)&v64 + 1) = a1;
      *(void *)&long long v65 = 0;
      *(void *)&long long v64 = *(void *)(a1 + 24);
      if ((long long *)(a1 + 56) == (long long *)((char *)&v63 + 8))
      {
LABEL_25:
        if (v16) {
          int v24 = 363;
        }
        else {
          int v24 = 375;
        }
        if (v16) {
          int v25 = 6286;
        }
        else {
          int v25 = 6298;
        }
        if (**(_WORD **)(a1 + 16) == 65) {
          unsigned int v26 = v24;
        }
        else {
          unsigned int v26 = v25;
        }
        LODWORD(v70) = v15;
        int v71 = 1;
        uint64_t v27 = (llvm::MachineFunction *)sub_1CC739C54(&v61, v26, (unint64_t *)&v70, 1, 0, 0, 0);
        uint64_t v29 = v28;
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        llvm::MachineInstr::addOperand(v28, v27, (const llvm::MachineOperand *)&v66);
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        LODWORD(v66) = 0;
        HIDWORD(v66) = v18;
        uint64_t v69 = 0;
        llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = v19;
        goto LABEL_54;
      }
      if (!*((void *)&v63 + 1))
      {
LABEL_23:
        uint64_t v23 = *(unsigned __int8 **)(a1 + 56);
        *((void *)&v63 + 1) = v23;
        if (v23) {
          llvm::MetadataTracking::track((uint64_t)&v63 + 8, v23, 2);
        }
        goto LABEL_25;
      }
      int v47 = **((unsigned char **)&v63 + 1);
      if ((v47 - 4) > 0x1E)
      {
        if ((v47 - 3) >= 0xFFFFFFFE) {
          uint64_t v57 = *((void *)&v63 + 1);
        }
        else {
          uint64_t v57 = 0;
        }
        if ((v47 - 3) < 0xFFFFFFFE)
        {
          if (v47 == 3) {
            *(void *)(*((void *)&v63 + 1) + 8) = 0;
          }
          goto LABEL_23;
        }
        unint64_t v49 = v57 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
          goto LABEL_23;
        }
        uint64_t v48 = *(void *)(*((void *)&v63 + 1) + 16);
        if ((v48 & 4) == 0) {
          goto LABEL_23;
        }
        unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
        if (!v49) {
          goto LABEL_23;
        }
      }
      uint64_t v66 = (char *)&v63 + 8;
      sub_1CC5FA668(v49 + 16, &v66);
      goto LABEL_23;
    }
    if (v12 > 255) {
      char v13 = 1;
    }
    if ((v13 & 1) == 0)
    {
      uint64_t v30 = *(void *)(a1 + 24);
      int v61 = &unk_1F261CD58;
      long long v65 = 0u;
      long long v64 = 0u;
      long long v63 = 0u;
      long long v62 = 0u;
      uint64_t v31 = *(void *)(v30 + 32);
      uint64_t v32 = *(void *)(v31 + 40);
      *(void *)&long long v62 = v31;
      *(void *)&long long v63 = v32;
      *((void *)&v62 + 1) = (*(uint64_t (**)(void))(**(void **)(v31 + 16) + 104))(*(void *)(v31 + 16));
      uint64_t v70 = 0;
      if (!*((void *)&v63 + 1))
      {
LABEL_39:
        *((void *)&v63 + 1) = 0;
        goto LABEL_40;
      }
      int v50 = **((unsigned char **)&v63 + 1);
      if ((v50 - 4) > 0x1E)
      {
        if ((v50 - 3) >= 0xFFFFFFFE) {
          uint64_t v58 = *((void *)&v63 + 1);
        }
        else {
          uint64_t v58 = 0;
        }
        if ((v50 - 3) <= 0xFFFFFFFD)
        {
          if (v50 == 3) {
            *(void *)(*((void *)&v63 + 1) + 8) = 0;
          }
          goto LABEL_39;
        }
        unint64_t v52 = v58 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
          goto LABEL_39;
        }
        uint64_t v51 = *(void *)(*((void *)&v63 + 1) + 16);
        if ((v51 & 4) == 0) {
          goto LABEL_39;
        }
        unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (!v52) {
          goto LABEL_39;
        }
      }
      uint64_t v66 = (char *)&v63 + 8;
      sub_1CC5FA668(v52 + 16, &v66);
      *((void *)&v63 + 1) = v70;
      if (v70) {
        llvm::MetadataTracking::retrack((uint64_t)&v70, v70, (uint64_t)&v63 + 8);
      }
LABEL_40:
      *((void *)&v64 + 1) = a1;
      *(void *)&long long v65 = 0;
      *(void *)&long long v64 = *(void *)(a1 + 24);
      if ((long long *)(a1 + 56) == (long long *)((char *)&v63 + 8))
      {
LABEL_44:
        if (v16) {
          int v34 = 390;
        }
        else {
          int v34 = 402;
        }
        if (v16) {
          int v35 = 6313;
        }
        else {
          int v35 = 6325;
        }
        if (**(_WORD **)(a1 + 16) == 65) {
          unsigned int v36 = v34;
        }
        else {
          unsigned int v36 = v35;
        }
        LODWORD(v70) = v15;
        int v71 = 1;
        uint64_t v27 = (llvm::MachineFunction *)sub_1CC739C54(&v61, v36, (unint64_t *)&v70, 1, 0, 0, 0);
        uint64_t v29 = v37;
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        llvm::MachineInstr::addOperand(v37, v27, (const llvm::MachineOperand *)&v66);
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        LODWORD(v66) = 0;
        HIDWORD(v66) = v18;
        uint64_t v69 = 0;
        llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v66);
        LODWORD(v66) = 1;
        uint64_t v67 = 0;
        unint64_t v68 = v12;
LABEL_54:
        llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v66);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
        sub_1CC73B5D0(v29, a2, a3);
        int v61 = &unk_1F261CD58;
        if (*((void *)&v63 + 1))
        {
          int v38 = **((unsigned char **)&v63 + 1);
          if ((v38 - 4) > 0x1E)
          {
            if ((v38 - 3) >= 0xFFFFFFFE) {
              uint64_t v39 = *((void *)&v63 + 1);
            }
            else {
              uint64_t v39 = 0;
            }
            if ((v38 - 3) < 0xFFFFFFFE)
            {
              if (v38 == 3) {
                *(void *)(*((void *)&v63 + 1) + 8) = 0;
              }
              return 1;
            }
            unint64_t v40 = v39 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
              return 1;
            }
            uint64_t v60 = *(void *)(*((void *)&v63 + 1) + 16);
            if ((v60 & 4) == 0) {
              return 1;
            }
            unint64_t v40 = v60 & 0xFFFFFFFFFFFFFFF8;
            if (!v40) {
              return 1;
            }
          }
          uint64_t v66 = (char *)&v63 + 8;
          sub_1CC5FA668(v40 + 16, &v66);
        }
        return 1;
      }
      if (!*((void *)&v63 + 1))
      {
LABEL_42:
        uint64_t v33 = *(unsigned __int8 **)(a1 + 56);
        *((void *)&v63 + 1) = v33;
        if (v33) {
          llvm::MetadataTracking::track((uint64_t)&v63 + 8, v33, 2);
        }
        goto LABEL_44;
      }
      int v53 = **((unsigned char **)&v63 + 1);
      if ((v53 - 4) > 0x1E)
      {
        if ((v53 - 3) >= 0xFFFFFFFE) {
          uint64_t v59 = *((void *)&v63 + 1);
        }
        else {
          uint64_t v59 = 0;
        }
        if ((v53 - 3) < 0xFFFFFFFE)
        {
          if (v53 == 3) {
            *(void *)(*((void *)&v63 + 1) + 8) = 0;
          }
          goto LABEL_42;
        }
        unint64_t v55 = v59 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*((void *)&v63 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v63 + 1) + 12)) {
          goto LABEL_42;
        }
        uint64_t v54 = *(void *)(*((void *)&v63 + 1) + 16);
        if ((v54 & 4) == 0) {
          goto LABEL_42;
        }
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        if (!v55) {
          goto LABEL_42;
        }
      }
      uint64_t v66 = (char *)&v63 + 8;
      sub_1CC5FA668(v55 + 16, &v66);
      goto LABEL_42;
    }
    return 0;
  }
  return result;
}

void sub_1CBB75D80(llvm::MachineFunction ***a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 80) == 5)
  {
    unint64_t v3 = *a1;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
    long long v22 = v4;
    llvm::MachineInstr::addOperand(v3[1], *v3, (const llvm::MachineOperand *)v21);
    return;
  }
  uint64_t v5 = (uint64_t)a1[2];
  long long v6 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v6;
  if ((DWORD1(v20[0]) & 0x80000000) != 0
    && (v7 = a1[1], uint64_t v8 = DWORD1(v20[0]) & 0x7FFFFFFF, v8 < *((_DWORD *)v7 + 108))
    && *((void *)v7[53] + v8) == 257)
  {
    sub_1CBB5FB88(v5, (uint64_t)v20, v21);
    if (LODWORD(v21[1]))
    {
      uint64_t v9 = 32 * LODWORD(v21[1]);
      uint64_t v10 = (char *)v21[0] + 24;
      while (*v10)
      {
        (*(void (**)(void, llvm::MachineFunction **))(*(void *)*v10 + 48))(*v10, *a1);
        v10 += 4;
        v9 -= 32;
        if (!v9) {
          goto LABEL_10;
        }
      }
      goto LABEL_36;
    }
LABEL_10:
    if (v23)
    {
      unsigned int v11 = (long long *)v21[0];
      if (!LODWORD(v21[1])) {
        goto LABEL_33;
      }
      uint64_t v12 = 32 * LODWORD(v21[1]);
      char v13 = (char *)v21[0] - 32;
      do
      {
        uint64_t v14 = *(char **)&v13[v12 + 24];
        if (&v13[v12] == v14)
        {
          (*(void (**)(char *))(*(void *)&v13[v12] + 32))(&v13[v12]);
        }
        else if (v14)
        {
          (*(void (**)(char *))(*(void *)v14 + 40))(v14);
        }
        v12 -= 32;
      }
      while (v12);
      goto LABEL_32;
    }
  }
  else
  {
    sub_1CBB606F0(v5, (uint64_t)v20, (uint64_t)v21);
    if (LODWORD(v21[1]))
    {
      uint64_t v15 = 32 * LODWORD(v21[1]);
      BOOL v16 = (char *)v21[0] + 24;
      while (*v16)
      {
        (*(void (**)(void, llvm::MachineFunction **))(*(void *)*v16 + 48))(*v16, *a1);
        v16 += 4;
        v15 -= 32;
        if (!v15) {
          goto LABEL_23;
        }
      }
LABEL_36:
      sub_1CB920400();
    }
LABEL_23:
    if (v23)
    {
      unsigned int v11 = (long long *)v21[0];
      if (!LODWORD(v21[1])) {
        goto LABEL_33;
      }
      uint64_t v17 = 32 * LODWORD(v21[1]);
      int v18 = (char *)v21[0] - 32;
      do
      {
        unint64_t v19 = *(char **)&v18[v17 + 24];
        if (&v18[v17] == v19)
        {
          (*(void (**)(char *))(*(void *)&v18[v17] + 32))(&v18[v17]);
        }
        else if (v19)
        {
          (*(void (**)(char *))(*(void *)v19 + 40))(v19);
        }
        v17 -= 32;
      }
      while (v17);
LABEL_32:
      unsigned int v11 = (long long *)v21[0];
LABEL_33:
      if (v11 != &v22) {
        free(v11);
      }
    }
  }
}

llvm::MachineFunction *sub_1CBB7602C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v19 = &off_1E66AF580;
  int v20 = 2;
  long long v4 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 5625, &v19, 1, 0, 0, 0);
  long long v6 = v5;
  LODWORD(v15) = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)&v15);
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  LODWORD(v18) = 0;
  uint64_t v15 = 2058;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)&v15);
  int v7 = *(_DWORD *)(*((void *)v6 + 4) + 4);
  unint64_t v19 = &off_1E66AF580;
  int v20 = 2;
  uint64_t v8 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 5625, &v19, 1, 0, 0, 0);
  uint64_t v10 = v9;
  LODWORD(v15) = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v15);
  uint64_t v16 = 0;
  uint64_t v17 = a2;
  LODWORD(v18) = 0;
  uint64_t v15 = 2314;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
  LODWORD(v8) = *(_DWORD *)(*((void *)v10 + 4) + 4);
  unint64_t v19 = (__int16 ***)&off_1E66AF9A8;
  int v20 = 2;
  unsigned int v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, void))(*(void *)a1 + 32))(a1, 18, &v19, 1, 0, 0, 0);
  char v13 = v12;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = v7;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v15);
  LODWORD(v15) = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 25;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = v8;
  uint64_t v18 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  LODWORD(v15) = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 26;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  return v11;
}

uint64_t sub_1CBB762A0(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) != 3 || (uint64_t Metadata = llvm::Value::getMetadata(a1, "agx.bind", 8uLL)) == 0)
  {
LABEL_19:
    if ((*(unsigned char *)(a1 + 33) & 0x1C) != 0) {
      return 12;
    }
    else {
      return 10;
    }
  }
  unint64_t v3 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*(unsigned char *)(*(void *)(*(void *)(v5 + 128) + 24) + 8) != 17) {
    goto LABEL_8;
  }
  if (*(unsigned char *)v4 != 1 || (uint64_t v6 = *(void *)(v4 + 128), *(unsigned char *)(v6 + 16) != 16))
  {
    uint64_t v4 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8));
LABEL_8:
    uint64_t v6 = *(void *)(v4 + 128);
  }
  int v7 = (void *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    int v7 = (void *)*v7;
  }
  int v8 = *(_DWORD *)v7;
  uint64_t result = 11;
  BOOL v11 = (v8 - 93) <= 0x15 && ((1 << (v8 - 93)) & 0x300001) != 0 || v8 == 18;
  if (!v11 && v8 != 43) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1CBB76390(_DWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2 + 16 * (a4 & 0x7FFFFFFF);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (a4 < 0) {
    uint64_t v6 = (uint64_t *)(v4 + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(a3 + 8 * a4);
  }
  uint64_t v7 = *v6;
  if (v7
    && ((*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3) & 1) != 0)
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && **(_WORD **)(v8 + 16) == 126
    && *(_DWORD *)(v8 + 40) == 2)
  {
    a1 += 2;
  }
  else
  {
    if (a4 < 0) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(a3 + 8 * a4);
    }
    uint64_t v10 = *v9;
    if (v10
      && ((*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v10 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v10 + 3) & 1) != 0)
      && (uint64_t v8 = *(void *)(v10 + 8)) != 0
      && **(_WORD **)(v8 + 16) == 124
      && *(_DWORD *)(v8 + 40) == 2)
    {
      ++a1;
    }
    else
    {
      BOOL v11 = (uint64_t *)(a2 + 16 * (a4 & 0x7FFFFFFF) + 8);
      if (a4 >= 0) {
        BOOL v11 = (uint64_t *)(a3 + 8 * a4);
      }
      uint64_t v12 = *v11;
      if (!v12) {
        return 0;
      }
      if ((*(unsigned char *)(v12 + 3) & 1) == 0)
      {
        uint64_t v12 = *(void *)(v12 + 24);
        if (!v12 || (*(unsigned char *)(v12 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v8 = *(void *)(v12 + 8);
      if (!v8 || **(_WORD **)(v8 + 16) != 118 || *(_DWORD *)(v8 + 40) != 2) {
        return 0;
      }
    }
  }
  **a1 = *(_DWORD *)(*(void *)(v8 + 32) + 36);
  return 1;
}

void *sub_1CBB764D4(void *a1)
{
  *a1 = &unk_1F25F89C0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB76528(void *a1)
{
  *a1 = &unk_1F25F89C0;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB7659C(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  unint64_t v3 = v2;
  *unsigned int v2 = &unk_1F25F89C0;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB7666C(const void **result, const void **a2)
{
  *a2 = &unk_1F25F89C0;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB76734(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB76750(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB76798(uint64_t a1, llvm::MachineFunction **a2)
{
}

void *sub_1CBB767A4(void *a1)
{
  *a1 = &unk_1F25F8A08;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }
  return a1;
}

void sub_1CBB767F8(void *a1)
{
  *a1 = &unk_1F25F8A08;
  unsigned int v2 = (void *)a1[1];
  if (v2 != a1 + 3) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBB7686C(uint64_t a1)
{
  unsigned int v2 = operator new(0x58uLL);
  BOOL v3 = v2;
  *unsigned int v2 = &unk_1F25F8A08;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v5 = v2 == (void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (v4 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v2 + 3, *(const void **)(a1 + 8), 32 * *(unsigned int *)(a1 + 16));
    *((_DWORD *)v3 + 4) = v4;
  }
  return v3;
}

const void **sub_1CBB7693C(const void **result, const void **a2)
{
  *a2 = &unk_1F25F8A08;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  unsigned int v2 = *((_DWORD *)result + 4);
  if (v2) {
    BOOL v3 = a2 == result;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t result = (const void **)memcpy(a2 + 3, result[1], 32 * *((unsigned int *)result + 4));
    *((_DWORD *)a2 + 4) = v2;
  }
  return result;
}

void sub_1CBB76A04(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24)) {
    free(v2);
  }
}

void sub_1CBB76A20(void *__p)
{
  unsigned int v2 = (void *)__p[1];
  if (v2 != __p + 3) {
    free(v2);
  }

  operator delete(__p);
}

void sub_1CBB76A68(uint64_t a1, llvm::MachineFunction **a2)
{
}

uint64_t sub_1CBB76A78(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  char v13 = *a1;
  if (!*(unsigned char *)(a5 + 32))
  {
    *(_DWORD *)a5 = 1;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(unsigned char *)(a5 + 32) = 1;
  }
  int v14 = 1;
  sub_1CBB633EC((uint64_t)v33, (uint64_t)a1[1], v13[10], v13[11], a6, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v31, (uint64_t)a1[1], v13[10], v13[11], a7, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v29, (uint64_t)a1[1], v13[10], v13[11], (unsigned __int8 *)a5, 0, 0, 0, 1u);
  uint64_t v15 = a1[1];
  uint64_t v16 = operator new(0x28uLL);
  *uint64_t v16 = &unk_1F25F8A50;
  v16[1] = sub_1CBB67B10;
  void v16[2] = 0;
  v16[3] = v13;
  v16[4] = v15;
  sub_1CBB6F084(v33, (uint64_t)v16);
  (*(void (**)(void *))(*v16 + 40))(v16);
  uint64_t v17 = a1[1];
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = &unk_1F25F8A50;
  v18[1] = sub_1CBB67B10;
  v18[2] = 0;
  v18[3] = v13;
  v18[4] = v17;
  sub_1CBB6F084(v31, (uint64_t)v18);
  (*(void (**)(void *))(*v18 + 40))(v18);
  unint64_t v19 = a1[1];
  int v20 = operator new(0x28uLL);
  *int v20 = &unk_1F25F8A50;
  v20[1] = sub_1CBB67B10;
  _OWORD v20[2] = 0;
  void v20[3] = v13;
  v20[4] = v19;
  sub_1CBB6F084(v29, (uint64_t)v20);
  (*(void (**)(void *))(*v20 + 40))(v20);
  v40[0] = 0;
  if ((v29[20] & 0xFFFFFFFE) != 4)
  {
    if (v29[22] == 32)
    {
      int v14 = 0;
    }
    else if (v30)
    {
      int v14 = 21;
    }
    else
    {
      int v14 = 2;
    }
  }
  v40[1] = v14;
  if ((v33[20] & 0xFFFFFFFE) == 4)
  {
    int v21 = 1;
  }
  else if (v33[22] == 32)
  {
    int v21 = 0;
  }
  else if (v34)
  {
    int v21 = 21;
  }
  else
  {
    int v21 = 2;
  }
  v40[2] = v21;
  int v22 = 1;
  if ((v31[20] & 0xFFFFFFFE) != 4)
  {
    if (v31[22] == 32)
    {
      int v22 = 0;
    }
    else if (v32)
    {
      int v22 = 21;
    }
    else
    {
      int v22 = 2;
    }
  }
  v40[3] = v22;
  uint64_t v23 = sub_1CBE0418C(a3, 4, v40);
  int v38 = &off_1E66AF580;
  int v39 = 2;
  uint64_t v24 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, uint64_t))(*(void *)a2 + 32))(a2, v23, &v38, 1, 0, 0, a4 | 0x100000000);
  unsigned int v26 = v25;
  int v35 = 1;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v35);
  v28[0] = v24;
  v28[1] = v26;
  sub_1CB9983A0(v28, (uint64_t)v29);
  sub_1CB9983A0(v28, (uint64_t)v33);
  sub_1CB9983A0(v28, (uint64_t)v31);
  int v35 = 1;
  uint64_t v36 = 0;
  uint64_t v37 = 32;
  llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v35);
  sub_1CC73B5D0(v26, v13[9], (void *)v13[10]);
  return *((void *)v26 + 4);
}

uint64_t sub_1CBB76E80(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t *)a1[1];
  sub_1CBB633EC((uint64_t)v20, *a1, v9[10], v9[11], a4, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v19, *a1, v9[10], v9[11], a5, 0, 0, 0, 1u);
  uint64_t v10 = *a1;
  BOOL v11 = operator new(0x28uLL);
  *BOOL v11 = &unk_1F25F8A50;
  v11[1] = sub_1CBB67B10;
  v11[2] = 0;
  v11[3] = v9;
  v11[4] = v10;
  sub_1CBB6F084(v20, (uint64_t)v11);
  (*(void (**)(void *))(*v11 + 40))(v11);
  uint64_t v12 = *a1;
  char v13 = operator new(0x28uLL);
  void *v13 = &unk_1F25F8A50;
  v13[1] = sub_1CBB67B10;
  v13[2] = 0;
  v13[3] = v9;
  v13[4] = v12;
  sub_1CBB6F084(v19, (uint64_t)v13);
  (*(void (**)(void *))(*v13 + 40))(v13);
  v26[0] = 0;
  v26[1] = v20[20] > 3;
  v26[2] = v19[20] > 3;
  uint64_t v14 = sub_1CBE0418C(90, 3, v26);
  uint64_t v24 = &off_1E66AF580;
  int v25 = 2;
  uint64_t v15 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, void, void, uint64_t))(*(void *)a2 + 32))(a2, v14, &v24, 1, 0, 0, a3 | 0x100000000);
  uint64_t v17 = v16;
  LODWORD(v21) = 1;
  int v22 = 0;
  uint64_t v23 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v21);
  int v21 = v15;
  int v22 = v17;
  sub_1CB9983A0(&v21, (uint64_t)v20);
  sub_1CB9983A0(&v21, (uint64_t)v19);
  sub_1CC73B5D0(v17, v9[9], (void *)v9[10]);
  return *((void *)v17 + 4);
}

uint64_t sub_1CBB77108(uint64_t *a1, void *a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, int a8, int a9, int a10, char a11)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(a2[1] + 40);
  sub_1CBB633EC((uint64_t)v73, v18, a1[10], a1[11], a4, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v70, v18, a1[10], a1[11], a5, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v64, v18, a1[10], a1[11], a6, 0, 0, 0, 1u);
  sub_1CBB633EC((uint64_t)v58, v18, a1[10], a1[11], a7, 0, 0, 0, 1u);
  unint64_t v19 = operator new(0x28uLL);
  *unint64_t v19 = &unk_1F25F8A50;
  v19[1] = sub_1CBB67B10;
  v19[2] = 0;
  v19[3] = a1;
  v19[4] = v18;
  int v98 = v19;
  int v20 = operator new(0x30uLL);
  *int v20 = &unk_1F25F8A98;
  v20[1] = sub_1CBB644E4;
  _OWORD v20[2] = 0;
  void v20[3] = a1;
  v20[4] = v18;
  *((_DWORD *)v20 + 10) = 0;
  *((_WORD *)v20 + 22) = 1;
  long long v96 = v20;
  int v21 = (char *)operator new(0x28uLL);
  *(void *)int v21 = &unk_1F25F8A50;
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v19 + 1);
  *(_OWORD *)(v21 + 24) = *(_OWORD *)(v19 + 3);
  sub_1CBB6F084(v73, (uint64_t)v21);
  (*(void (**)(char *))(*(void *)v21 + 40))(v21);
  if (v98)
  {
    if (v98 == v97)
    {
      long long v94 = v93;
      (*(void (**)(void *, void *))(v97[0] + 24))(v97, v93);
      uint64_t v22 = (uint64_t)v94;
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void *))(*v98 + 16))(v98);
      long long v94 = (void *)v22;
    }
  }
  else
  {
    uint64_t v22 = 0;
    long long v94 = 0;
  }
  sub_1CBB6F084(v70, v22);
  if (v94 == v93)
  {
    (*(void (**)(void *))(v93[0] + 32))(v93);
  }
  else if (v94)
  {
    (*(void (**)(void *))(*v94 + 40))(v94);
  }
  if (a11) {
    uint64_t v23 = v97;
  }
  else {
    uint64_t v23 = v95;
  }
  sub_1CBB783D4((uint64_t)v91, (uint64_t)v23);
  sub_1CBB6F084((int *)v64, (uint64_t)v92);
  if (v92 == v91)
  {
    (*(void (**)(void *))(v91[0] + 32))(v91);
  }
  else if (v92)
  {
    (*(void (**)(void))(*v92 + 40))();
  }
  sub_1CBB783D4((uint64_t)v89, (uint64_t)v23);
  sub_1CBB6F084((int *)v58, (uint64_t)v90);
  if (v90 == v89)
  {
    (*(void (**)(void *))(v89[0] + 32))(v89);
  }
  else if (v90)
  {
    (*(void (**)(void))(*v90 + 40))();
  }
  uint64_t v24 = operator new(0x30uLL);
  *uint64_t v24 = &unk_1F25F8A98;
  v24[1] = sub_1CBB644E4;
  v24[2] = 0;
  v24[3] = a1;
  v24[4] = v18;
  *((_DWORD *)v24 + 10) = 0;
  *((_WORD *)v24 + 22) = 256;
  if ((BYTE8(v66) && (BYTE8(v65) & 7) != 0 || v67 == 5) && (int)v61 >= 4 && v61 != 5)
  {
    sub_1CBB633EC((uint64_t)&v81, v18, a1[10], a1[11], a7, 0, 0, 0, 0);
    long long v60 = v85;
    long long v61 = v86;
    long long v62 = v87;
    uint64_t v63 = v88;
    v58[0] = v81;
    v58[1] = v82;
    v58[2] = v83;
    long long v59 = v84;
    unint64_t v80 = (void *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    sub_1CBB6F084((int *)v58, (uint64_t)v80);
    if (v80 == v79)
    {
      (*(void (**)(void *))(v79[0] + 32))(v79);
    }
    else if (v80)
    {
      (*(void (**)(void))(*v80 + 40))();
    }
  }
  if ((BYTE8(v60) && (BYTE8(v59) & 7) != 0 || v61 == 5) && (int)v67 >= 4 && v67 != 5)
  {
    sub_1CBB633EC((uint64_t)&v81, v18, a1[10], a1[11], a6, 0, 0, 0, 0);
    long long v66 = v85;
    long long v67 = v86;
    long long v68 = v87;
    uint64_t v69 = v88;
    v64[0] = v81;
    v64[1] = v82;
    v64[2] = v83;
    long long v65 = v84;
    int v78 = (void *)(*(uint64_t (**)(void *))(*v24 + 16))(v24);
    sub_1CBB6F084((int *)v64, (uint64_t)v78);
    if (v78 == v77)
    {
      (*(void (**)(void *))(v77[0] + 32))(v77);
    }
    else if (v78)
    {
      (*(void (**)(void))(*v78 + 40))();
    }
  }
  if (BYTE8(v66))
  {
    int v25 = v67;
    BOOL v26 = 1;
    if ((BYTE8(v65) & 7) != 0 || v67 == 5) {
      goto LABEL_33;
    }
  }
  else
  {
    int v25 = v67;
    if (v67 == 5) {
      goto LABEL_85;
    }
  }
  if (!BYTE8(v60) || (BYTE8(v59) & 7) == 0)
  {
    BOOL v26 = v61 == 5;
    goto LABEL_33;
  }
LABEL_85:
  BOOL v26 = 1;
LABEL_33:
  if (a8) {
    int v27 = 38;
  }
  else {
    int v27 = 39;
  }
  if (a8) {
    int v28 = 0;
  }
  else {
    int v28 = 2;
  }
  if (!a11) {
    int v27 = v28;
  }
  if (v74 >= 4)
  {
    if (v74 == 5) {
      int v29 = 9;
    }
    else {
      int v29 = 1;
    }
  }
  else
  {
    int v29 = 2 * (v75 == 16);
  }
  if (v71 >= 4)
  {
    if (v71 == 5) {
      int v30 = 9;
    }
    else {
      int v30 = 1;
    }
  }
  else
  {
    int v30 = 2 * (v72 == 16);
  }
  if (v25 >= 4)
  {
    if (v25 == 5 || v26) {
      int v31 = 9;
    }
    else {
      int v31 = 1;
    }
  }
  else
  {
    int v31 = 2 * (DWORD2(v67) == 16);
  }
  if ((int)v61 >= 4)
  {
    if (v61 == 5) {
      BOOL v26 = 1;
    }
    if (v26) {
      int v32 = 9;
    }
    else {
      int v32 = 1;
    }
  }
  else
  {
    int v32 = 2 * (DWORD2(v61) == 16);
  }
  *(void *)&long long v81 = &v82;
  *(void *)&long long v82 = __PAIR64__(v29, v27);
  *((void *)&v82 + 1) = __PAIR64__(v31, v30);
  LODWORD(v83) = v32;
  *((void *)&v81 + 1) = 0x500000005;
  unsigned int v33 = sub_1CBE0418C(88, 5, &v82);
  char v34 = (llvm::MachineFunction *)a2[1];
  uint64_t v35 = *(void *)(a2[2] + 8) + 48 * v33;
  uint64_t v36 = (unsigned __int8 *)a2[4];
  uint64_t v76 = v36;
  if (v36) {
    llvm::MetadataTracking::track((uint64_t)&v76, v36, 2);
  }
  uint64_t v37 = llvm::MachineFunction::CreateMachineInstr(v34, v35, &v76, 0);
  if (v76)
  {
    int v54 = *v76;
    if ((v54 - 4) > 0x1E)
    {
      if ((v54 - 3) >= 0xFFFFFFFE) {
        uint64_t v57 = v76;
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v54 - 3) < 0xFFFFFFFE)
      {
        if (v54 == 3) {
          *((void *)v76 + 1) = 0;
        }
        goto LABEL_70;
      }
      unint64_t v56 = (unint64_t)(v57 + 8);
    }
    else
    {
      if ((v76[1] & 0x7F) != 2 && !*((_DWORD *)v76 + 3)) {
        goto LABEL_70;
      }
      uint64_t v55 = *((void *)v76 + 2);
      if ((v55 & 4) == 0) {
        goto LABEL_70;
      }
      unint64_t v56 = v55 & 0xFFFFFFFFFFFFFFF8;
      if (!v56) {
        goto LABEL_70;
      }
    }
    *(void *)&long long v81 = &v76;
    sub_1CC5FA668(v56 + 16, &v81);
  }
LABEL_70:
  int v38 = (unint64_t *)a2[6];
  uint64_t v39 = *(void *)(a2[5] + 40);
  *((void *)v37 + 3) = v39;
  uint64_t v40 = *(void *)(v39 + 32);
  uint64_t v41 = *((unsigned int *)v37 + 10);
  if (v41)
  {
    uint64_t v47 = *((void *)v37 + 4);
    uint64_t v48 = *(void *)(v40 + 40);
    uint64_t v49 = 32 * v41;
    do
    {
      if (!*(unsigned char *)v47)
      {
        uint64_t v50 = *(unsigned int *)(v47 + 4);
        if ((int)v50 >= 0) {
          uint64_t v51 = (uint64_t *)(*(void *)(v48 + 272) + 8 * v50);
        }
        else {
          uint64_t v51 = (uint64_t *)(*(void *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        }
        uint64_t v52 = *v51;
        if (*v51)
        {
          uint64_t v53 = *(void *)(v52 + 16);
          *(void *)(v52 + 16) = v47;
          *(void *)(v47 + 16) = v53;
          if (*(unsigned char *)(v47 + 3))
          {
            *(void *)(v47 + 24) = v52;
          }
          else
          {
            *(void *)(v47 + 24) = 0;
            uint64_t v51 = (uint64_t *)(v53 + 24);
          }
        }
        else
        {
          *(void *)(v47 + 16) = v47;
          *(void *)(v47 + 24) = 0;
        }
        uint64_t *v51 = v47;
      }
      v47 += 32;
      v49 -= 32;
    }
    while (v49);
  }
  uint64_t v42 = *(void *)(v40 + 728);
  if (v42) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v42 + 24))(v42, v37);
  }
  unint64_t v43 = *v38 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v37 = v43 | *(void *)v37 & 7;
  *((void *)v37 + 1) = v38;
  *(void *)(v43 + 8) = v37;
  *int v38 = *v38 & 7 | (unint64_t)v37;
  uint64_t v44 = a2[7];
  if (v44) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v44 + 24))(v44, v37);
  }
  long long v82 = 0uLL;
  *((void *)&v81 + 1) = 0;
  DWORD1(v81) = a9;
  LODWORD(v81) = 0x1000000;
  llvm::MachineInstr::addOperand(v37, v34, (const llvm::MachineOperand *)&v81);
  LODWORD(v81) = 1;
  *(void *)&long long v82 = 0;
  *((void *)&v81 + 1) = 0;
  llvm::MachineInstr::addOperand(v37, v34, (const llvm::MachineOperand *)&v81);
  LODWORD(v81) = 1;
  *((void *)&v81 + 1) = 0;
  *(void *)&long long v82 = a3;
  llvm::MachineInstr::addOperand(v37, v34, (const llvm::MachineOperand *)&v81);
  *(void *)&long long v81 = v34;
  *((void *)&v81 + 1) = v37;
  sub_1CB9983A0((llvm::MachineFunction **)&v81, (uint64_t)v73);
  sub_1CB9983A0((llvm::MachineFunction **)&v81, (uint64_t)v70);
  sub_1CB9983A0((llvm::MachineFunction **)&v81, (uint64_t)v64);
  sub_1CB9983A0((llvm::MachineFunction **)&v81, (uint64_t)v58);
  sub_1CC73B5D0(v37, a1[9], (void *)a1[10]);
  (*(void (**)(void *))(*v24 + 40))(v24);
  if (v96 == v95)
  {
    (*(void (**)(void *))(v95[0] + 32))(v95);
  }
  else if (v96)
  {
    (*(void (**)(void))(*v96 + 40))();
  }
  uint64_t result = (uint64_t)v98;
  if (v98 == v97) {
    return (*(uint64_t (**)(void *))(v97[0] + 32))(v97);
  }
  if (v98) {
    return (*(uint64_t (**)(void))(*v98 + 40))();
  }
  return result;
}

void sub_1CBB77CF8()
{
}

__n128 sub_1CBB77D0C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_1F25F8A50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBB77D60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8A50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBB77D98(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  unsigned int v4 = (uint64_t (*)(void *, void, uint64_t, uint64_t))a1[1];
  BOOL v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*v5 + v4);
  }
  return v4(v5, a1[4], a2, a3);
}

void sub_1CBB77DF0(uint64_t a1, unint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  if (a3 >= 2 && a4)
  {
    uint64_t v57 = v9;
    uint64_t v58 = v10;
    BOOL v13 = a7 == 3 || a8 == 0;
    if ((a2 & 4) == 0) {
      BOOL v13 = 0;
    }
    BOOL v15 = (a4 - 4) < 0xFFFFFFFE || a6 == 0;
    int v16 = a3 - 3 <= 2 && v15;
    if ((a2 & 1) == 0) {
      int v16 = 0;
    }
    BOOL v17 = a5 && a7 == 0;
    unsigned int v18 = a4 & 0xFFFFFFFE;
    uint64_t v19 = a2 & 4;
    BOOL v20 = !v17 || v19 == 0;
    BOOL v21 = !v20;
    if ((a2 & 4) != 0 || v18 == 2 || a9)
    {
      unsigned int v22 = a9 ? 414 : 9187;
      if ((a2 & 5) != 0)
      {
        if (a3 == 2)
        {
          LODWORD(v23) = 0;
          uint64_t v24 = 6;
        }
        else if (a3 == 3)
        {
          LODWORD(v23) = 0;
          uint64_t v24 = 8;
        }
        else
        {
          uint64_t v23 = (a2 >> 2) & 1;
          uint64_t v24 = 10;
          if ((a2 & 4) != 0) {
            uint64_t v24 = 0;
          }
        }
      }
      else if (a3 == 2)
      {
        uint64_t v24 = 0;
        LODWORD(v23) = 0;
      }
      else
      {
        LODWORD(v23) = 0;
        uint64_t v24 = a3 == 3 ? 2 : 4;
      }
      if (a4 == 1) {
        int v16 = 1;
      }
      if (v21 | v16) {
        uint64_t v25 = v24 | 0x10;
      }
      else {
        uint64_t v25 = v24;
      }
      if (v18 == 2 || v19 != 0) {
        v25 |= 0x20uLL;
      }
      if (a4 == 3) {
        BOOL v13 = 1;
      }
      if (v13) {
        uint64_t v27 = v25 | 0x40;
      }
      else {
        uint64_t v27 = v25;
      }
      uint64_t v28 = (a2 << 6) & 0x200 | ((a2 & 3) << 7);
      uint64_t v29 = *(void *)(a1 + 24);
      long long v52 = 0u;
      long long v51 = 0u;
      long long v50 = 0u;
      long long v49 = 0u;
      uint64_t v30 = *(void *)(v29 + 32);
      unint64_t v31 = *(void *)(v30 + 40);
      uint64_t v48 = &unk_1F261CD58;
      *(void *)&long long v49 = v30;
      long long v50 = v31;
      *((void *)&v49 + 1) = (*(uint64_t (**)(void))(**(void **)(v30 + 16) + 104))(*(void *)(v30 + 16));
      uint64_t v56 = 0;
      uint64_t v32 = v28 | (v19 << 8);
      *((void *)&v51 + 1) = a1;
      *(void *)&long long v52 = 0;
      *(void *)&long long v51 = *(void *)(a1 + 24);
      unsigned int v33 = (_OWORD *)(a1 + 56);
      if (v33 != (long long *)((char *)&v50 + 8))
      {
        char v34 = *(unsigned __int8 **)v33;
        *((void *)&v50 + 1) = v34;
        if (v34) {
          llvm::MetadataTracking::track((uint64_t)&v50 + 8, v34, 2);
        }
      }
      uint64_t v35 = v27 | v32;
      uint64_t v37 = (llvm::MachineFunction *)sub_1CC739C54(&v48, v22, 0, 0, 0, 0, 0);
      int v38 = v36;
      if (v23)
      {
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v53);
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = v35 | 8;
        llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v53);
        uint64_t v39 = (llvm::MachineFunction *)sub_1CC739C54(&v48, v22, 0, 0, 0, 0, 0);
        uint64_t v41 = v40;
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        llvm::MachineInstr::addOperand(v40, v39, (const llvm::MachineOperand *)&v53);
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = v35 | 6;
        uint64_t v42 = v41;
        unint64_t v43 = v39;
      }
      else
      {
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v53);
        LODWORD(v53) = 1;
        uint64_t v54 = 0;
        uint64_t v55 = v35;
        uint64_t v42 = v38;
        unint64_t v43 = v37;
      }
      llvm::MachineInstr::addOperand(v42, v43, (const llvm::MachineOperand *)&v53);
      uint64_t v48 = &unk_1F261CD58;
      if (*((void *)&v50 + 1))
      {
        int v44 = **((unsigned char **)&v50 + 1);
        if ((v44 - 4) > 0x1E)
        {
          if ((v44 - 3) >= 0xFFFFFFFE) {
            uint64_t v45 = *((void *)&v50 + 1);
          }
          else {
            uint64_t v45 = 0;
          }
          if ((v44 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v46 = v45 + 8;
LABEL_81:
            uint64_t v53 = (char *)&v50 + 8;
            sub_1CC5FA668(v46 + 16, &v53);
            return;
          }
          if (v44 == 3) {
            *(void *)(*((void *)&v50 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v50 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v50 + 1) + 12))
        {
          uint64_t v47 = *(void *)(*((void *)&v50 + 1) + 16);
          if ((v47 & 4) != 0)
          {
            unint64_t v46 = v47 & 0xFFFFFFFFFFFFFFF8;
            if (v46) {
              goto LABEL_81;
            }
          }
        }
      }
    }
  }
}

void sub_1CBB782C0()
{
}

__n128 sub_1CBB782D4(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v2 = &unk_1F25F8A98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBB78330(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F8A98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBB78370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t, void, void, void))(a1 + 8);
  BOOL v5 = (void *)(*(void *)(a1 + 24) + (v3 >> 1));
  if (v3) {
    unsigned int v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t, void, void, void))(*v5 + v4);
  }
  return v4(v5, *(void *)(a1 + 32), a2, a3, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), *(unsigned __int8 *)(a1 + 45));
}

uint64_t sub_1CBB783D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CBB7846C(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[1];
  sub_1CC73C210(a2, *a1, (uint64_t)&v60);
  if (!(_BYTE)v62)
  {
LABEL_2:
    uint64_t v9 = 0;
    char v10 = 1;
    goto LABEL_5;
  }
  if (v61 > 0x40)
  {
    if (v60) {
      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
    }
    goto LABEL_2;
  }
  char v10 = 0;
  uint64_t v9 = ((uint64_t)(v60 << -(uint64_t)v61) >> -(uint64_t)v61);
LABEL_5:
  sub_1CC73C210(a3, *a1, (uint64_t)&v60);
  if ((_BYTE)v62)
  {
    if (v61 >= 0x41)
    {
      if (v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
    }
    else if ((v10 & 1) == 0)
    {
      uint64_t v25 = *((void *)sub_1CBB6646C(v8, a1[2], 0x81uLL, v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)((uint64_t)(v60 << -(uint64_t)v61) >> -(uint64_t)v61) << 8), 0)+ 4);
      goto LABEL_31;
    }
  }
  uint64_t v11 = *a1;
  if ((a3 & 0x80000000) != 0) {
    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a3);
  }
  uint64_t v13 = *v12;
  if (v13 && ((*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v13 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v13 + 3) & 1) != 0))
  {
    uint64_t v14 = *(void *)(v13 + 8);
    if ((a2 & 0x80000000) == 0)
    {
LABEL_79:
      BOOL v15 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_79;
    }
  }
  BOOL v15 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
LABEL_14:
  uint64_t v16 = *v15;
  if (v16 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = **(unsigned __int16 **)(v14 + 16);
  if (v18 == 68)
  {
    if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)) {
      unint64_t v19 = *(void *)(*(void *)(v11 + 424) + 8 * (a2 & 0x7FFFFFFF));
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v60 = v19;
    uint64_t v27 = sub_1CB8F1DC4(&v60);
    if (v26 == 1) {
    if (v27 == 16)
    }
    {
      uint64_t v28 = a1[3];
      unint64_t v64 = 4194324;
      int v65 = 0;
      LODWORD(v60) = a2;
      LODWORD(v62) = 0;
      sub_1CC7382B0(v28);
      uint64_t v30 = v29;
      unsigned int v31 = *(_DWORD *)(a4 + 8);
      if (v31 >= *(_DWORD *)(a4 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a4 + 8 * v31) = v29;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_29;
    }
    goto LABEL_71;
  }
  int v20 = **(unsigned __int16 **)(v17 + 16);
  if (v20 == 68)
  {
    BOOL v21 = (void *)a1[3];
    unint64_t v64 = (unint64_t)&off_1E66AF970;
    int v65 = 2;
    unsigned int v22 = (llvm::MachineFunction *)sub_1CC739C54(v21, 0x1BC7u, &v64, 1, 0, 0, 0);
    uint64_t v24 = v23;
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v60);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    LODWORD(v60) = 0;
    HIDWORD(v60) = a3;
    uint64_t v63 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 8;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 8;
    llvm::MachineInstr::addOperand(v24, v22, (const llvm::MachineOperand *)&v60);
    sub_1CC73B5D0(v24, *(void *)(v8 + 72), *(void **)(v8 + 80));
    uint64_t v25 = *((void *)v24 + 4);
LABEL_31:
    unsigned int IncompleteVirtualRegister = *(_DWORD *)(v25 + 4);
    return IncompleteVirtualRegister | 0x100000000;
  }
  if (v18 != 128)
  {
    if (v18 == 271 && v20 == 271)
    {
      unsigned int IncompleteVirtualRegister = *(_DWORD *)(*(void *)(v17 + 32) + 36);
      if ((IncompleteVirtualRegister & 0x80000000) != 0
        && (IncompleteVirtualRegister & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432))
      {
        unint64_t v43 = *(void *)(*(void *)(v11 + 424) + 8 * (IncompleteVirtualRegister & 0x7FFFFFFF));
      }
      else
      {
        unint64_t v43 = 0;
      }
      unint64_t v60 = v43;
      int v45 = sub_1CB8F1DC4(&v60);
      if (v44 == 1) {
      unint64_t v46 = *(_DWORD **)(v14 + 32);
      }
      if (v46[9] == IncompleteVirtualRegister)
      {
        uint64_t v47 = *(void *)(v17 + 32);
        if (*(_DWORD *)(v47 + 112) == 8 && v46[28] == 8)
        {
          int v48 = *(_DWORD *)(v47 + 80);
          if ((v48 & 1) == 0 && v48 + 1 == v46[20])
          {
            if (v45 == 16) {
              return IncompleteVirtualRegister | 0x100000000;
            }
            if (v45 == 32)
            {
              long long v49 = (void *)a1[3];
              unint64_t v64 = (unint64_t)&off_1E66AF970;
              int v65 = 2;
              long long v50 = (llvm::MachineFunction *)sub_1CC739C54(v49, 0x13u, &v64, 1, 0, 0, 0);
              uint64_t v30 = v51;
              uint64_t v61 = 0;
              uint64_t v62 = 0;
              uint64_t v63 = 0;
              LODWORD(v60) = ((v48 << 7) + 256) & 0xFFF00;
              HIDWORD(v60) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v51, v50, (const llvm::MachineOperand *)&v60);
LABEL_29:
              uint64_t v25 = *((void *)v30 + 4);
              goto LABEL_31;
            }
          }
        }
      }
    }
    goto LABEL_71;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v14 + 32) + 68), v11, (uint64_t)&v60);
  if (*(_DWORD *)(*(void *)(v14 + 32) + 36) != a2)
  {
    if ((_BYTE)v62)
    {
      unsigned int v33 = v61;
      goto LABEL_57;
    }
LABEL_71:
    uint64_t v52 = *a1;
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
    *(void *)(*(void *)(v52 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF970;
    uint64_t v53 = *(void *)(v52 + 8);
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 24))(v53);
    }
    uint64_t v54 = (void *)a1[3];
    LODWORD(v64) = IncompleteVirtualRegister;
    int v65 = 1;
    uint64_t v55 = (llvm::MachineFunction *)sub_1CC739C54(v54, 0x1BD9u, &v64, 1, 0, 0, 0);
    uint64_t v57 = v56;
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v56, v55, (const llvm::MachineOperand *)&v60);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    LODWORD(v60) = 0;
    HIDWORD(v60) = a2;
    uint64_t v63 = 0;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    LODWORD(v60) = 0;
    HIDWORD(v60) = a3;
    uint64_t v63 = 0;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 8;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 8;
    llvm::MachineInstr::addOperand(v57, v55, (const llvm::MachineOperand *)&v60);
    sub_1CC73B5D0(v57, *(void *)(v8 + 72), *(void **)(v8 + 80));
    return IncompleteVirtualRegister | 0x100000000;
  }
  if (!(_BYTE)v62) {
    goto LABEL_71;
  }
  unsigned int v33 = v61;
  unint64_t v34 = v60;
  if (v61 >= 0x41)
  {
    int v35 = 0;
    int64_t v36 = ((unint64_t)v61 + 63) >> 6;
    do
    {
      if (v36-- < 1) {
        break;
      }
      unint64_t v38 = *(void *)(v60 + 8 * v36);
      v35 += __clz(v38);
    }
    while (!v38);
    int v39 = v61 | 0xFFFFFFC0;
    if ((v61 & 0x3F) == 0) {
      int v39 = 0;
    }
    if ((v61 - v35 - v39) > 0x40) {
      goto LABEL_57;
    }
    unint64_t v34 = *(void *)v60;
  }
  if (v34 != 8)
  {
LABEL_57:
    if (v33 >= 0x41 && v60) {
      MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
    }
    goto LABEL_71;
  }
  uint64_t v40 = *a1;
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
  *(void *)(*(void *)(v40 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF970;
  uint64_t v41 = *(void *)(v40 + 8);
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 24))(v41);
  }
  uint64_t v42 = a1[3];
  v59[0] = IncompleteVirtualRegister;
  v59[2] = 1;
  LODWORD(v64) = a2;
  int v66 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v42 + 32))(v42, 19, v59, 1, &v64, 1, 0);
  if ((_BYTE)v62 && v61 >= 0x41 && v60) {
    MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
  }
  return IncompleteVirtualRegister | 0x100000000;
}

uint64_t sub_1CBB78C80(uint64_t a1, uint64_t a2, BOOL *a3, _DWORD *a4, const llvm::MachineOperand **a5, const llvm::MachineOperand **a6, int *a7, int *a8)
{
  if (*(unsigned char *)a2) {
    return 0;
  }
  uint64_t v15 = *(unsigned int *)(a2 + 4);
  uint64_t v16 = (uint64_t *)((v15 & 0x80000000) != 0
                  ? *(void *)(a1 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8
                  : *(void *)(a1 + 272) + 8 * v15);
  uint64_t v17 = *v16;
  if (!v17) {
    return 0;
  }
  if ((*(unsigned char *)(v17 + 3) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v17 + 24);
    if (!v17 || (*(unsigned char *)(v17 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (!v18 || **(_WORD **)(v18 + 16) != 51) {
    return 0;
  }
  char v27 = 0;
  BOOL v19 = sub_1CBB78E80(*(_DWORD *)(*(void *)(v18 + 32) + 48), 0, a3, &v27, a4);
  uint64_t result = 0;
  if (v19)
  {
    *a5 = (const llvm::MachineOperand *)(*(void *)(v18 + 32) + 64);
    int v20 = (const llvm::MachineOperand *)(*(void *)(v18 + 32) + 96);
    *a6 = v20;
    uint64_t result = sub_1CBB79004(a1, (unsigned int *)(*(void *)(v18 + 32) + 128), *a5, v20, 0, 0, a7);
    if (result)
    {
      uint64_t result = sub_1CBB79004(a1, (unsigned int *)(*(void *)(v18 + 32) + 160), *a5, *a6, 0, 0, a8);
      if (result)
      {
        if (v27)
        {
          int v21 = *a7;
          *a7 = *a8;
          *a8 = v21;
        }
        uint64_t v22 = *(unsigned int *)(a2 + 4);
        if ((v22 & 0x80000000) != 0) {
          uint64_t v23 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v23 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v22);
        }
        uint64_t v24 = *v23;
        if (!v24) {
          return 1;
        }
        if ((*(unsigned char *)(v24 + 3) & 0x81) != 0)
        {
          do
          {
            uint64_t v24 = *(void *)(v24 + 24);
            if (!v24) {
              return 1;
            }
          }
          while ((*(_DWORD *)v24 & 0x81000000) != 0);
        }
        uint64_t v25 = *(void *)(v24 + 8);
LABEL_22:
        int v26 = **(unsigned __int16 **)(v25 + 16);
        if (v26 == 335 || v26 == 51)
        {
          while (1)
          {
            uint64_t v24 = *(void *)(v24 + 24);
            if (!v24) {
              return 1;
            }
            if ((*(_DWORD *)v24 & 0x81000000) == 0 && *(void *)(v24 + 8) != v25)
            {
              uint64_t v25 = *(void *)(v24 + 8);
              goto LABEL_22;
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1CBB78E80(unsigned int a1, int a2, BOOL *a3, char *a4, _DWORD *a5)
{
  unsigned int v5 = a1;
  *a3 = a1 < 0x10;
  if (a1 >= 0x10) {
    unsigned int v5 = dword_1CDC6CB34[a1 - 32];
  }
  if (a2) {
    unsigned int v5 = (v5 >> 1) & 2 | v5 & 0x19 | (4 * ((v5 >> 1) & 1));
  }
  if (a1 <= 0xF)
  {
    *a4 = 0;
    int v12 = 1;
    switch(v5)
    {
      case 0x11u:
        goto LABEL_16;
      case 0x12u:
        int v12 = 2;
        goto LABEL_16;
      case 0x13u:
        int v12 = 3;
        goto LABEL_16;
      case 0x14u:
        int v12 = 4;
        goto LABEL_16;
      case 0x15u:
        int v12 = 5;
        goto LABEL_16;
      case 0x16u:
        unsigned int v5 = 1;
        char v6 = 1;
        goto LABEL_11;
      default:
        JUMPOUT(0);
    }
  }
  *a4 = 1;
  signed int v7 = v5 - 11;
  if (v5 - 11 < 0xC && ((0xD0Du >> v7) & 1) != 0)
  {
    int v12 = dword_1CDC6CB5C[v7];
  }
  else
  {
    char v6 = 0;
LABEL_11:
    *a4 = v6;
    if (v5 > 0xF)
    {
      int v12 = v5;
    }
    else
    {
      int v12 = v5;
      if (((1 << v5) & 0x8181) != 0) {
        goto LABEL_19;
      }
    }
  }
LABEL_16:
  uint64_t v8 = (char *)&unk_1CDC6CBA4 + 4 * v12 - 36;
  if (*a3) {
    uint64_t v8 = (char *)&unk_1CDC6CB8C + 4 * v12 - 4;
  }
  *a5 = *(_DWORD *)v8;
  unsigned int v5 = v12;
LABEL_19:
  if (v5) {
    BOOL v9 = v5 - 7 > 1;
  }
  else {
    BOOL v9 = 0;
  }
  return v9 && v5 != 15;
}

uint64_t sub_1CBB79004(uint64_t a1, unsigned int *a2, const llvm::MachineOperand *a3, const llvm::MachineOperand *a4, const llvm::MachineOperand *a5, uint64_t a6, int *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  sub_1CC73C44C(a2[1], a1, 1, (uint64_t)&v29);
  sub_1CC73D1C8(a2[1], a1, 1, (uint64_t)v32);
  if (!v31) {
    goto LABEL_26;
  }
  if (v30 < 0x41)
  {
    uint64_t v14 = v29;
    if (v29)
    {
      if (v29 != (void *)1) {
        goto LABEL_24;
      }
LABEL_18:
      int v24 = 8;
LABEL_45:
      *a7 = v24;
      a6 = 1;
      goto LABEL_46;
    }
LABEL_32:
    int v24 = 7;
    goto LABEL_45;
  }
  int v15 = 0;
  int64_t v16 = ((unint64_t)v30 + 63) >> 6;
  uint64_t v17 = v16;
  do
  {
    BOOL v18 = v17-- < 1;
    if (v18) {
      break;
    }
    unint64_t v19 = v29[v17];
    v15 += __clz(v19);
  }
  while (!v19);
  unsigned int v20 = v30 | 0xFFFFFFC0;
  if ((v30 & 0x3F) == 0) {
    unsigned int v20 = 0;
  }
  if (v30 - v15 - v20 < 0x41 && !*v29) {
    goto LABEL_32;
  }
  int v21 = 0;
  int64_t v22 = ((unint64_t)v30 + 63) >> 6;
  do
  {
    BOOL v18 = v22-- < 1;
    if (v18) {
      break;
    }
    unint64_t v23 = v29[v22];
    v21 += __clz(v23);
  }
  while (!v23);
  if (v30 - (v20 + v21) <= 0x40 && *v29 == 1) {
    goto LABEL_18;
  }
  int v25 = 0;
  do
  {
    BOOL v18 = v16-- < 1;
    if (v18) {
      break;
    }
    unint64_t v26 = v29[v16];
    v25 += __clz(v26);
  }
  while (!v26);
  if (v30 - (v20 + v25) > 0x40) {
    goto LABEL_26;
  }
  uint64_t v14 = (void *)*v29;
LABEL_24:
  if (v14 == (void *)2)
  {
    int v24 = 9;
    goto LABEL_45;
  }
LABEL_26:
  if (v35)
  {
    if (sub_1CB8BE1E4((uint64_t)v32, 0.0))
    {
      int v24 = 4;
      goto LABEL_45;
    }
    if (v35)
    {
      if (sub_1CB8BE1E4((uint64_t)v32, 1.0))
      {
        int v24 = 5;
        goto LABEL_45;
      }
      if (v35 && (sub_1CB8BE1E4((uint64_t)v32, -1.0) & 1) != 0)
      {
        int v24 = 6;
        goto LABEL_45;
      }
    }
  }
  if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a3))
  {
    int v24 = 1;
    goto LABEL_45;
  }
  if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a4))
  {
    int v24 = 2;
    goto LABEL_45;
  }
  if (a5 && llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a5))
  {
    int v24 = 3;
    goto LABEL_45;
  }
  if (a6)
  {
    BOOL isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, (const llvm::MachineOperand *)a6);
    int v24 = 0;
    a6 = 0;
    if (isIdenticalTo) {
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v35)
  {
    if ((_UNKNOWN *)v33 == &unk_1CFB2E344)
    {
      sub_1CB845718(v34);
    }
    else if ((*(_DWORD *)(v33 + 8) - 64) <= 0xFFFFFF7F && v34[0])
    {
      MEMORY[0x1D25D9CB0](v34[0], 0x1000C8000313F17);
    }
  }
  if (v31 && v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  return a6;
}

uint64_t sub_1CBB79318(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v11 = 1;
    }
    else
    {
      signed int v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v9 = 0;
        }
        else {
          BOOL v9 = v6 == -8192;
        }
        if (v9) {
          signed int v7 = v5;
        }
        int v10 = v4 + v8++;
        uint64_t v4 = v10 & (a2 - 1);
        unsigned int v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v11 = 1;
        if (*v5 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t v11 = 0;
      if (v7) {
        unsigned int v5 = v7;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
    uint64_t v11 = 0;
  }
LABEL_14:
  *a4 = v5;
  return v11;
}

void *sub_1CBB793AC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBB79478(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1CBB79478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 32 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v12 = 0;
      sub_1CBB79318(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      uint64_t v10 = v12;
      *int v12 = *(void *)a2;
      long long v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(void *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*(void **)(a2 + 8));
      }
    }
    a2 += 32;
  }
}

uint64_t sub_1CBB79550(uint64_t a1, uint64_t a2, llvm::LLVMContext ***a3, uint64_t a4, int a5)
{
  uint64_t v8 = 0;
  switch(a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      uint64_t v9 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v10 = (llvm::Type *)*a3;
      unint64_t v11 = (unint64_t)(sub_1CB83544C((uint64_t)v9, (uint64_t)*a3) + 7) >> 3;
      BOOL v13 = v12 == 1;
      char Alignment = llvm::DataLayout::getAlignment(v9, v10, 1);
      unint64_t v16 = ((1 << Alignment) + 0x3FFFFFFFFLL + v11) & -(1 << Alignment);
      if (v13) {
      *(void *)(a2 + 8) = sub_1CB8E5DAC(**a3, 10, 0, v16 >> 2, 0);
      }
      *(void *)(a2 + 16) = v17;
      llvm::SampleInfo::SampleInfo((uint64_t)v118, a5, 1);
      BOOL v18 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v19 = v18[4 * v120];
      unsigned int v20 = *((unsigned __int8 *)v19 + 16);
      if (v19) {
        BOOL v21 = v20 > 0x14;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21) {
        goto LABEL_47;
      }
      int64_t v22 = v18[4 * v120];
      if (v20 != 5) {
        goto LABEL_12;
      }
      int64_t v22 = v18[4 * v120];
      if (*((_WORD *)v19 + 9) == 48)
      {
        int64_t v22 = (llvm::LLVMContext **)v19[-4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
        if (!v22) {
          goto LABEL_47;
        }
        unsigned int v20 = *((unsigned __int8 *)v22 + 16);
LABEL_12:
        if (v20 == 19) {
          goto LABEL_47;
        }
      }
      goto LABEL_26;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      unint64_t v23 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      int v24 = (llvm::Type *)*a3;
      unint64_t v25 = (unint64_t)(sub_1CB83544C((uint64_t)v23, (uint64_t)*a3) + 7) >> 3;
      BOOL v27 = v26 == 1;
      char v28 = llvm::DataLayout::getAlignment(v23, v24, 1);
      unint64_t v30 = ((1 << v28) + 0x1FFFFFFFFLL + v25) & -(1 << v28);
      if (v27) {
      *(void *)(a2 + 8) = sub_1CB8E5DAC(**a3, 9, 0, v30 >> 1, 0);
      }
      *(void *)(a2 + 16) = v31;
      llvm::SampleInfo::SampleInfo((uint64_t)v118, a5, 1);
      BOOL v18 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v19 = v18[4 * v120];
      unsigned int v32 = *((unsigned __int8 *)v19 + 16);
      if (v19) {
        BOOL v33 = v32 > 0x14;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33) {
        goto LABEL_47;
      }
      int64_t v22 = v18[4 * v120];
      if (v32 != 5) {
        goto LABEL_24;
      }
      if (*((_WORD *)v19 + 9) != 48) {
        goto LABEL_46;
      }
      int64_t v22 = (llvm::LLVMContext **)v19[-4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
      if (!v22) {
        goto LABEL_47;
      }
      unsigned int v32 = *((unsigned __int8 *)v22 + 16);
LABEL_24:
      if (v32 == 19) {
        goto LABEL_47;
      }
      if (v32 != 16) {
        goto LABEL_46;
      }
LABEL_26:
      unsigned int v34 = *((_DWORD *)v22 + 8);
      if (v34 > 0x40)
      {
        if ((*(void *)v22[3] & 0x8000000000000000) == 0) {
          goto LABEL_47;
        }
      }
      else if ((((uint64_t)((void)v22[3] << -(char)v34) >> -(char)v34) & 0x8000000000000000) == 0)
      {
        goto LABEL_47;
      }
LABEL_46:
      unint64_t v19 = v18[4 * v119];
LABEL_47:
      *(void *)(a2 + 24) = (unint64_t)v19 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      __int16 v60 = sub_1CBB7B794((uint64_t)a3) | 1;
      goto LABEL_78;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      unint64_t v46 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v47 = *(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v46, (uint64_t)v47) + 7) >> 3;
      BOOL v50 = v49 == 1;
      char v51 = llvm::DataLayout::getAlignment(v46, v47, 1);
      unint64_t v53 = ((1 << v51) + 0x3FFFFFFFFLL + v48) & -(1 << v51);
      if (v50) {
      unint64_t v43 = v53 >> 2;
      }
      int v44 = **a3;
      uint64_t v45 = 10;
      goto LABEL_35;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      char v35 = (llvm::DataLayout *)(*((void *)a3[5][7] + 5) + 272);
      *(_DWORD *)a2 = 47;
      uint64_t v36 = *(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      unint64_t v37 = (unint64_t)(sub_1CB83544C((uint64_t)v35, (uint64_t)v36) + 7) >> 3;
      BOOL v39 = v38 == 1;
      char v40 = llvm::DataLayout::getAlignment(v35, v36, 1);
      unint64_t v42 = ((1 << v40) + 0x1FFFFFFFFLL + v37) & -(1 << v40);
      if (v39) {
      unint64_t v43 = v42 >> 1;
      }
      int v44 = **a3;
      uint64_t v45 = 9;
LABEL_35:
      *(void *)(a2 + 8) = sub_1CB8E5DAC(v44, v45, 0, v43, 0);
      *(void *)(a2 + 16) = v54;
      llvm::SampleInfo::SampleInfo((uint64_t)v118, a5, 1);
      uint64_t v55 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v56 = v55[4 * v120];
      if (!v56) {
        goto LABEL_77;
      }
      unsigned int v57 = *((unsigned __int8 *)v56 + 16);
      if (v57 > 0x14) {
        goto LABEL_77;
      }
      uint64_t v58 = v55[4 * v120];
      if (v57 != 5) {
        goto LABEL_41;
      }
      uint64_t v58 = v55[4 * v120];
      if (*((_WORD *)v56 + 9) == 48)
      {
        uint64_t v58 = (llvm::LLVMContext **)v56[-4 * (*((_DWORD *)v56 + 5) & 0x7FFFFFF)];
        if (!v58) {
          goto LABEL_77;
        }
        unsigned int v57 = *((unsigned __int8 *)v58 + 16);
LABEL_41:
        if (v57 == 19) {
          goto LABEL_77;
        }
      }
      unsigned int v59 = *((_DWORD *)v58 + 8);
      if (v59 > 0x40)
      {
        if ((*(void *)v58[3] & 0x8000000000000000) == 0) {
          goto LABEL_77;
        }
      }
      else if ((((uint64_t)((void)v58[3] << -(char)v59) >> -(char)v59) & 0x8000000000000000) == 0)
      {
        goto LABEL_77;
      }
      uint64_t v56 = v55[4 * v119];
LABEL_77:
      *(void *)(a2 + 24) = (unint64_t)v56 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      __int16 v60 = sub_1CBB7B794((uint64_t)a3) | 2;
LABEL_78:
      *(_WORD *)(a2 + 50) = v60;
      return 1;
    case 1822:
    case 1823:
    case 1824:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1829:
    case 1830:
    case 1831:
    case 1832:
    case 1833:
    case 1834:
    case 1835:
    case 1836:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1889:
    case 1890:
    case 1891:
    case 1892:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1897:
    case 1898:
    case 1899:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 1942:
    case 1943:
    case 1944:
    case 1945:
    case 1946:
    case 1947:
    case 1948:
    case 1949:
    case 1950:
    case 1951:
    case 1952:
    case 1953:
    case 1954:
    case 1955:
    case 1956:
    case 1957:
    case 1958:
    case 1959:
    case 1960:
    case 1961:
    case 1962:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1967:
    case 1968:
    case 1969:
    case 1970:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1975:
    case 1976:
    case 1977:
    case 1978:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1991:
    case 1992:
    case 1993:
    case 1994:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 1999:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2091:
    case 2092:
    case 2093:
    case 2094:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2132:
    case 2133:
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2139:
    case 2140:
    case 2141:
    case 2143:
    case 2145:
    case 2146:
    case 2147:
    case 2148:
    case 2149:
    case 2150:
    case 2151:
    case 2152:
    case 2153:
    case 2154:
    case 2155:
    case 2156:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2161:
    case 2162:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2169:
    case 2170:
    case 2171:
    case 2172:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2185:
    case 2186:
    case 2187:
    case 2188:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2193:
    case 2194:
    case 2195:
    case 2196:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2212:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2217:
    case 2218:
    case 2219:
    case 2220:
    case 2221:
    case 2222:
    case 2223:
    case 2224:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2229:
    case 2230:
    case 2231:
    case 2232:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2237:
    case 2238:
    case 2239:
    case 2240:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2253:
    case 2254:
    case 2255:
    case 2256:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2261:
    case 2262:
    case 2263:
    case 2264:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2269:
    case 2270:
    case 2271:
    case 2272:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2277:
    case 2278:
    case 2279:
    case 2280:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2285:
    case 2286:
    case 2287:
    case 2288:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2293:
    case 2294:
    case 2295:
    case 2296:
    case 2297:
    case 2298:
    case 2299:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2316:
    case 2317:
    case 2318:
    case 2319:
    case 2320:
    case 2321:
    case 2322:
    case 2323:
    case 2324:
    case 2325:
    case 2326:
    case 2327:
    case 2328:
    case 2329:
    case 2330:
    case 2331:
    case 2332:
    case 2333:
    case 2334:
    case 2335:
    case 2336:
    case 2337:
    case 2338:
    case 2339:
    case 2340:
    case 2341:
    case 2342:
    case 2343:
    case 2344:
    case 2345:
    case 2346:
    case 2347:
    case 2348:
    case 2349:
    case 2350:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2355:
    case 2356:
    case 2357:
    case 2358:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2363:
    case 2364:
    case 2365:
    case 2366:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2371:
    case 2372:
    case 2373:
    case 2374:
    case 2375:
    case 2408:
    case 2409:
    case 2410:
    case 2411:
    case 2412:
    case 2413:
    case 2414:
    case 2415:
    case 2416:
    case 2417:
    case 2418:
    case 2419:
    case 2420:
    case 2421:
    case 2422:
    case 2423:
    case 2424:
    case 2425:
    case 2426:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2431:
    case 2432:
    case 2433:
    case 2434:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2439:
    case 2440:
    case 2441:
    case 2442:
    case 2443:
    case 2444:
    case 2445:
    case 2446:
    case 2447:
    case 2448:
    case 2449:
    case 2450:
    case 2451:
    case 2452:
    case 2453:
    case 2454:
    case 2455:
    case 2456:
    case 2457:
    case 2458:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2463:
    case 2464:
    case 2465:
    case 2466:
    case 2467:
    case 2468:
    case 2469:
    case 2470:
    case 2471:
    case 2472:
    case 2473:
    case 2474:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
    case 2479:
    case 2480:
    case 2481:
    case 2482:
    case 2483:
    case 2484:
    case 2485:
    case 2486:
    case 2487:
    case 2488:
    case 2489:
    case 2490:
    case 2491:
    case 2492:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2616:
    case 2617:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2623:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2628:
    case 2629:
    case 2662:
    case 2663:
    case 2664:
    case 2665:
    case 2666:
    case 2667:
    case 2668:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2685:
    case 2686:
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
    case 2711:
    case 2712:
    case 2713:
    case 2714:
    case 2715:
    case 2716:
    case 2717:
    case 2718:
    case 2719:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2727:
    case 2728:
    case 2729:
    case 2730:
    case 2731:
    case 2732:
    case 2733:
    case 2734:
    case 2735:
    case 2736:
    case 2737:
    case 2738:
    case 2740:
    case 2744:
    case 2745:
    case 2746:
    case 2747:
    case 2748:
    case 2749:
    case 2750:
    case 2751:
    case 2752:
    case 2753:
    case 2754:
    case 2755:
    case 2756:
    case 2757:
    case 2758:
    case 2759:
    case 2760:
    case 2761:
    case 2762:
    case 2763:
    case 2764:
    case 2765:
    case 2766:
    case 2767:
    case 2768:
    case 2769:
    case 2770:
    case 2771:
    case 2772:
    case 2773:
    case 2776:
    case 2780:
    case 2781:
    case 2782:
    case 2783:
    case 2787:
    case 2788:
    case 2789:
    case 2790:
    case 2791:
      return v8;
    case 2142:
    case 2144:
      if (a5 == 2142)
      {
        __int16 v100 = 1;
        uint64_t v101 = 2;
        long long v102 = (llvm::EVT **)a3;
      }
      else
      {
        long long v102 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        __int16 v100 = 2;
        uint64_t v101 = 3;
      }
      uint64_t v108 = *v102;
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v108, 0, (BOOL)a3);
      *(void *)(a2 + 16) = v109;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = v100;
      long long v110 = (&a3[4 * v101])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (v110) {
        BOOL v111 = *((unsigned __int8 *)v110 + 16) > 0x14u;
      }
      else {
        BOOL v111 = 1;
      }
      if (!v111)
      {
        unsigned int v112 = *((_DWORD *)v110 + 8);
        if (!(v112 > 0x40 ? *(void *)v110[3] : (uint64_t)((void)v110[3] << -(char)v112) >> -(char)v112)) {
          return 1;
        }
      }
      __int16 v60 = v100 | 4;
      goto LABEL_78;
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
      unsigned int v73 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      int v74 = *v73 + 3;
      if (*((_DWORD *)*v73 + 8) >= 0x41u) {
        int v74 = (void *)*v74;
      }
      int v75 = (llvm::LLVMContext *)dword_1CDC6CBE8[*v74 & 0xFLL];
      uint64_t v76 = v73[4];
      unint64_t v77 = v76 + 3;
      if (*((_DWORD *)v76 + 8) >= 0x41u) {
        unint64_t v77 = (void *)*v77;
      }
      int v78 = *(_DWORD *)v77;
      if ((v78 & 2) != 0) {
        unsigned int v79 = 2;
      }
      else {
        unsigned int v79 = 1;
      }
      if ((v78 & 0xC) != 0) {
        uint64_t v80 = 4;
      }
      else {
        uint64_t v80 = v79;
      }
      long long v81 = (llvm::FixedVectorType *)llvm::IntegerType::get(**a3, v75);
      if (v80 >= 2) {
        llvm::FixedVectorType::get(v81, (llvm::Type *)v80);
      }
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 8] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v81, 0, v82);
      *(void *)(a2 + 16) = v83;
      *(_DWORD *)(a2 + 32) = 0;
      int v72 = 65794;
      goto LABEL_74;
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
      uint64_t v61 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      uint64_t v62 = *v61 + 3;
      if (*((_DWORD *)*v61 + 8) >= 0x41u) {
        uint64_t v62 = (void *)*v62;
      }
      uint64_t v63 = (llvm::LLVMContext *)dword_1CDC6CBE8[*v62 & 0xFLL];
      unint64_t v64 = v61[4];
      int v65 = v64 + 3;
      if (*((_DWORD *)v64 + 8) >= 0x41u) {
        int v65 = (void *)*v65;
      }
      int v66 = *(_DWORD *)v65;
      if ((v66 & 2) != 0) {
        unsigned int v67 = 2;
      }
      else {
        unsigned int v67 = 1;
      }
      if ((v66 & 0xC) != 0) {
        uint64_t v68 = 4;
      }
      else {
        uint64_t v68 = v67;
      }
      uint64_t v69 = (llvm::FixedVectorType *)llvm::IntegerType::get(**a3, v63);
      if (v68 >= 2) {
        llvm::FixedVectorType::get(v69, (llvm::Type *)v68);
      }
      *(_DWORD *)a2 = 47;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 12] & 0xFFFFFFFFFFFFFFFBLL;
      *(void *)(a2 + 8) = llvm::EVT::getEVT(v69, 0, v70);
      *(void *)(a2 + 16) = v71;
      *(_DWORD *)(a2 + 32) = 0;
      int v72 = 131330;
LABEL_74:
      *(_DWORD *)(a2 + 48) = v72;
      return 1;
    case 2739:
    case 2741:
    case 2742:
    case 2743:
    case 2774:
    case 2775:
    case 2777:
    case 2778:
    case 2779:
      uint64_t v85 = (a5 - 2739);
      if (v85 > 0x28) {
        goto LABEL_136;
      }
      if (((1 << (a5 + 77)) & 0x1D) != 0)
      {
        unsigned int v86 = 2;
      }
      else if (((1 << (a5 + 77)) & 0x1C800000000) != 0)
      {
        unsigned int v86 = 7;
      }
      else
      {
        if (v85 != 36) {
LABEL_136:
        }
          llvm::report_fatal_error((llvm *)"Unexpected Intrinsic ID: should never gotten here", (const llvm::Twine *)1);
        unsigned int v86 = 10;
      }
      long long v87 = (&a3[4 * v86 + 8])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (*((unsigned char *)v87 + 16) == 16)
      {
        unsigned int v88 = *((_DWORD *)v87 + 8);
        if (v88 > 0x40) {
          uint64_t v89 = *(void *)v87[3];
        }
        else {
          uint64_t v89 = (uint64_t)((void)v87[3] << -(char)v88) >> -(char)v88;
        }
      }
      else
      {
        uint64_t v89 = 4;
      }
      if (v89 <= 4) {
        uint64_t v89 = 4;
      }
      if (v89 >= 0x100000) {
        LODWORD(v89) = 0x100000;
      }
      long long v94 = (llvm::LLVMContext *)(8 * v89);
      switch(v94)
      {
        case 0x20:
          uint64_t v95 = 0;
          uint64_t v96 = 5;
          break;
        case 0x40:
          uint64_t v95 = 0;
          uint64_t v96 = 6;
          break;
        case 0x80:
          uint64_t v95 = 0;
          uint64_t v96 = 7;
          break;
        default:
          uint64_t v95 = llvm::IntegerType::get(**a3, v94);
          uint64_t v96 = 0;
          break;
      }
      *(void *)(a2 + 8) = v96;
      *(void *)(a2 + 16) = v95;
      *(void *)(a2 + 24) = (unint64_t)(&a3[4 * v86])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_WORD *)(a2 + 48) = 260;
      if (a5 == 2774 || a5 == 2739)
      {
        long long v97 = (&a3[4 * v86 + 12])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
        unsigned int v98 = *((_DWORD *)v97 + 8);
        if (v98 > 0x40) {
          unint64_t v99 = *(void *)v97[3];
        }
        else {
          unint64_t v99 = (uint64_t)((void)v97[3] << -(char)v98) >> -(char)v98;
        }
        *(_WORD *)(a2 + 48) = (63 - __clz(v99)) | 0x100;
      }
      __int16 v60 = 3;
      goto LABEL_78;
    case 2784:
      goto LABEL_116;
    case 2785:
    case 2786:
      long long v103 = (llvm::Type *)*((unsigned int *)*a3 + 8);
      PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits((*a3)[3]);
      if (v104 == 1)
      {
        uint64_t v117 = PrimitiveSizeInBits;
        PrimitiveSizeInBits = v117;
      }
      uint64_t v8 = 1;
      sub_1CBB7B9A8(a2, (uint64_t)a3, PrimitiveSizeInBits, v103, 1);
      return v8;
    case 2792:
      *(void *)(a2 + 8) = llvm::EVT::getEVT(*a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)], 0, (BOOL)a3);
      *(void *)(a2 + 16) = v114;
      *(_DWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 131330;
      *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4] & 0xFFFFFFFFFFFFFFFBLL;
      return 1;
    default:
      if ((a5 - 2839) >= 2)
      {
        if (a5 == 2838)
        {
LABEL_116:
          if (a5 == 2784)
          {
            __int16 v106 = 1;
            uint64_t v107 = (llvm::EVT **)a3;
          }
          else
          {
            uint64_t v107 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
            __int16 v106 = 2;
          }
          uint64_t v115 = *v107;
          *(_DWORD *)a2 = 47;
          *(void *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
          *(void *)(a2 + 8) = llvm::EVT::getEVT(v115, 0, (BOOL)a3);
          *(void *)(a2 + 16) = v116;
          *(_DWORD *)(a2 + 32) = 0;
          *(_WORD *)(a2 + 48) = 258;
          uint64_t v8 = 1;
          *(_WORD *)(a2 + 50) = v106;
        }
      }
      else
      {
        uint64_t v90 = (uint64_t)*a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        uint64_t v91 = (llvm::Type *)*(unsigned int *)(v90 + 32);
        unint64_t v93 = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(v90 + 24));
        if (v92 == 1) {
        sub_1CBB7B9A8(a2, (uint64_t)a3, v93, v91, 0);
        }
        return 1;
      }
      return v8;
  }
}

uint64_t sub_1CBB7B794(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1 || !*(_DWORD *)(v1 + 8) || (uint64_t v2 = *(void *)(v1 + 40)) == 0 || (v3 = *(_DWORD *)(v2 + 40)) == 0) {
LABEL_24:
  }
    llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>();
  uint64_t v4 = *(void *)(v2 + 24);
  unint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = v4;
    int v21 = v3;
    int v19 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v5 = &unk_1EBCBE000;
    int v3 = v21;
    uint64_t v4 = v22;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v20;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v5 = (void *)&unk_1EBCBE000;
      int v3 = v21;
      uint64_t v4 = v22;
    }
  }
  uint64_t v6 = v5[176];
  uint64_t v7 = __ROR8__(v6 ^ 0xA998C8AA3BC31F8DLL, 30);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((v6 + 0x35F7FFDAEA461458) ^ ((0x9DDFEA08EB382D69
                                      * ((v7 - 0x7CB6A14CA0FD4217) ^ (v6 + 0x35F7FFDAEA461458))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v7 - 0x7CB6A14CA0FD4217) ^ (v6 + 0x35F7FFDAEA461458))));
  unsigned int v9 = -348639895 * ((v8 >> 47) ^ v8);
  int v10 = v3 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v12 = v9 & v10;
    BOOL v13 = (uint64_t *)(v4 + 24 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -1)
    {
      if ("globally-coherent" == (char *)-1) {
        goto LABEL_23;
      }
      goto LABEL_9;
    }
    if (v14 != -2) {
      break;
    }
    if ("globally-coherent" == (char *)-2) {
      goto LABEL_23;
    }
LABEL_9:
    if (v14 == -1) {
      goto LABEL_24;
    }
    unsigned int v9 = i + v12;
  }
  if (v13[1] != 17) {
    goto LABEL_9;
  }
  BOOL v15 = *(void *)v14 == 0x796C6C61626F6C67 && *(void *)(v14 + 8) == 0x6E657265686F632DLL;
  if (!v15 || *(unsigned char *)(v14 + 16) != 116) {
    goto LABEL_9;
  }
LABEL_23:
  uint64_t v17 = v13[2];
  if (!v17) {
    goto LABEL_24;
  }
  return (v17 != 0) << 6;
}

unint64_t sub_1CBB7B9A8(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, llvm::Type *a4, int a5)
{
  unsigned int v9 = (llvm::FixedVectorType *)llvm::IntegerType::get(**(llvm::IntegerType ***)a2, a3);
  llvm::FixedVectorType::get(v9, a4);
  *(_DWORD *)a1 = 47;
  *(void *)(a1 + 24) = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) & 0xFFFFFFFFFFFFFFFBLL;
  unint64_t result = llvm::EVT::getEVT(v10, 0, v11);
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v14 = 128;
  if (a5) {
    uint64_t v14 = 96;
  }
  uint64_t v15 = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + v14);
  unint64_t v16 = (void *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    unint64_t v16 = (void *)*v16;
  }
  *(_WORD *)(a1 + 48) = (63 - __clz(*v16 & 0xFLL)) | 0x100;
  if (a5) {
    __int16 v17 = 1;
  }
  else {
    __int16 v17 = 2;
  }
  *(_WORD *)(a1 + 50) = v17;
  return result;
}

uint64_t sub_1CBB7BA88(uint64_t a1, llvm::MachineInstr *a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 184296) + 176))(*(void *)(a1 + 184296));
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0x6903000000;
  llvm::MachineInstr::addOperand(a2, *(llvm::MachineFunction **)(*((void *)a2 + 3) + 32), (const llvm::MachineOperand *)&v6);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0x6902000000;
  llvm::MachineInstr::addOperand(a2, *(llvm::MachineFunction **)(*((void *)a2 + 3) + 32), (const llvm::MachineOperand *)&v6);
  return a3;
}

uint64_t sub_1CBB7BB38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5, uint64_t a6, unsigned char *a7)
{
  v16[0] = a2;
  v16[1] = a3;
  if (a4 >= 4 && (a4 == 75 || a4 - 5 <= 0x3F && ((1 << (a4 - 5)) & 0xE800000000000001) != 0)) {
    goto LABEL_13;
  }
  if ((_BYTE)a2) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v16);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  }
  if (v10 == 1)
  {
    unint64_t v14 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v14;
  }
  if (ExtendedSizeInBits > 0x40 || !a5)
  {
    BOOL v11 = LOBYTE(v16[0])
        ? (llvm::Type *)sub_1CB87E200((unsigned __int8 *)v16)
        : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
    if (v12 == 1)
    {
      uint64_t v15 = v11;
      BOOL v11 = v15;
    }
    if ((unint64_t)v11 > 0x20)
    {
LABEL_13:
      if ((a5 & 0xFE) == 0) {
        return 0;
      }
    }
  }
  uint64_t result = 1;
  if (a7) {
    *a7 = 1;
  }
  return result;
}

uint64_t sub_1CBB7BC58(int a1, int a2, unsigned int a3, llvm::APInt *this, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0) {
    BOOL v11 = (uint64_t *)(*(void *)(a6 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v11 = (uint64_t *)(*(void *)(a6 + 272) + 8 * a3);
  }
  uint64_t v12 = *v11;
  if (v12 && ((*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3) & 1) != 0)) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  unsigned int v14 = *((_DWORD *)this + 2);
  int v15 = **(unsigned __int16 **)(v13 + 16);
  if (v14 >= 0x41) {
    operator new[]();
  }
  unint64_t v16 = (void *)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
    MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = v14;
  if (*((_DWORD *)this + 2) > 0x40u)
  {
    llvm::APInt::reallocate((uint64_t)this, v14);
    uint64_t v17 = *((unsigned int *)this + 2);
    if (v17 <= 0x40) {
      *(void *)this = *((void *)this + 2);
    }
    else {
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = v14;
  }
  BOOL v18 = *(void **)(*(void *)(v13 + 24) + 32);
  v210[1] = v212;
  v210[2] = v212;
  v210[3] = 4;
  int v211 = 0;
  v210[0] = &unk_1F261BC50;
  v212[4] = v18;
  v212[5] = v18[5];
  v212[6] = (*(uint64_t (**)(void))(*(void *)v18[2] + 120))(v18[2]);
  v212[7] = *(void *)(*v18 + 40) + 272;
  int v213 = 6;
  uint64_t v214 = 1;
  for (uint64_t i = 15; i != 95; i += 5)
    LODWORD(v210[i]) = -1;
  unint64_t v20 = (llvm *)(*(uint64_t (**)(void, void))(*(void *)v18[1] + 16))(v18[1], *v18);
  if (v15 > 258)
  {
    if (v15 <= 307)
    {
      if (v15 == 259)
      {
        uint64_t v42 = *(void *)(*(void *)(v13 + 32) + 80);
        unsigned int v205 = v14;
        unint64_t v32 = 0;
        __src = 0;
        if (v42 != v14)
        {
          if (v42 > 0x3F) {
            llvm::APInt::setBitsSlowCase(&__src, v42, v14);
          }
          else {
            unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> (v42 - v14) << v42;
          }
        }
LABEL_131:
        if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
          MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
        }
        *(void *)this = v32;
        *((_DWORD *)this + 2) = v14;
        return sub_1CB9FB5B0((uint64_t)v210);
      }
      if (v15 == 282)
      {
        uint64_t v27 = *(void *)(v18[7] + 8)
            + 40 * (*(_DWORD *)(v18[7] + 32) + *(_DWORD *)(*(void *)(v13 + 32) + 48));
        unsigned int v28 = *(unsigned __int8 *)(v27 + 16);
        if (*(unsigned char *)(v27 + 16))
        {
          if (v28 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(this, 0, v28);
          }
          else
          {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            if (*((_DWORD *)this + 2) > 0x40u) {
              **(void **)this |= v29;
            }
            else {
              *(void *)this |= v29;
            }
          }
        }
      }
      return sub_1CB9FB5B0((uint64_t)v210);
    }
    if (v15 != 308)
    {
      if (v15 != 315) {
        return sub_1CB9FB5B0((uint64_t)v210);
      }
      uint64_t v26 = *(unsigned int *)(*(void *)(v13 + 32) + 48);
      goto LABEL_39;
    }
    uint64_t v43 = *(void *)(v13 + 32);
    int v44 = *(_DWORD *)(v43 + 4);
    if (v44 < 0 && (uint64_t v45 = v44 & 0x7FFFFFFF, v45 < *(_DWORD *)(a6 + 432))) {
      unint64_t v46 = *(void *)(*(void *)(a6 + 424) + 8 * v45);
    }
    else {
      unint64_t v46 = 0;
    }
    unsigned int v49 = *(_DWORD *)(v43 + 36);
    unsigned int v50 = *(_DWORD *)(v43 + 100);
    if ((v49 & 0x80000000) != 0 && (v49 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    {
      unint64_t v51 = *(void *)(*(void *)(a6 + 424) + 8 * (v49 & 0x7FFFFFFF));
      if (v51)
      {
        unsigned int v52 = v51 >> 3;
        goto LABEL_68;
      }
      if ((v51 & 4) != 0)
      {
        if ((v51 & 2) != 0) {
          unsigned int v52 = (unsigned __int16)(v51 >> 19);
        }
        else {
          unsigned int v52 = v51 >> 19;
        }
LABEL_68:
        char v53 = *(unsigned char *)(v43 + 80);
        char v54 = *(unsigned char *)(v43 + 144);
        unsigned int v205 = v52;
        if (v52 > 0x40) {
          operator new[]();
        }
        unsigned int v207 = v52;
        __src = 0;
        int v206 = 0;
        if ((v50 & 0x80000000) != 0 && (v50 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
        {
          unint64_t v55 = *(void *)(*(void *)(a6 + 424) + 8 * (v50 & 0x7FFFFFFF));
          if (v55)
          {
            unsigned int v56 = v55 >> 3;
            goto LABEL_308;
          }
          if ((v55 & 4) != 0)
          {
            if ((v55 & 2) != 0) {
              unsigned int v56 = (unsigned __int16)(v55 >> 19);
            }
            else {
              unsigned int v56 = v55 >> 19;
            }
LABEL_308:
            unsigned int v196 = v56;
            if (v56 > 0x40) {
              operator new[]();
            }
            unsigned int v198 = v56;
            int v195 = 0;
            int v197 = 0;
            sub_1CC6DF17C((char *)v210, v49, (llvm::MDNode *)&__src, a5, (a7 + 1));
            if (v205 > 0x40)
            {
              __int32 v150 = 0;
              unint64_t v168 = ((unint64_t)v205 + 63) >> 6;
              unsigned int v169 = (int8x8_t *)__src;
              do
              {
                int8x8_t v170 = *v169++;
                uint8x8_t v171 = (uint8x8_t)vcnt_s8(v170);
                v171.i16[0] = vaddlv_u8(v171);
                v150 += v171.i32[0];
                --v168;
              }
              while (v168);
            }
            else
            {
              uint8x8_t v149 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
              v149.i16[0] = vaddlv_u8(v149);
              __int32 v150 = v149.i32[0];
            }
            if (v207 > 0x40)
            {
              __int32 v152 = 0;
              unint64_t v172 = ((unint64_t)v207 + 63) >> 6;
              uint64_t v173 = (int8x8_t *)v206;
              do
              {
                int8x8_t v174 = *v173++;
                uint8x8_t v175 = (uint8x8_t)vcnt_s8(v174);
                v175.i16[0] = vaddlv_u8(v175);
                v152 += v175.i32[0];
                --v172;
              }
              while (v172);
            }
            else
            {
              uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)v206);
              v151.i16[0] = vaddlv_u8(v151);
              __int32 v152 = v151.i32[0];
            }
            if (v152 + v150 == v205)
            {
              sub_1CC6DF17C((char *)v210, v50, (llvm::MDNode *)&v195, a5, (a7 + 1));
              if (v196 > 0x40)
              {
                __int32 v154 = 0;
                unint64_t v176 = ((unint64_t)v196 + 63) >> 6;
                uint64_t v177 = (int8x8_t *)v195;
                do
                {
                  int8x8_t v178 = *v177++;
                  uint8x8_t v179 = (uint8x8_t)vcnt_s8(v178);
                  v179.i16[0] = vaddlv_u8(v179);
                  v154 += v179.i32[0];
                  --v176;
                }
                while (v176);
              }
              else
              {
                uint8x8_t v153 = (uint8x8_t)vcnt_s8((int8x8_t)v195);
                v153.i16[0] = vaddlv_u8(v153);
                __int32 v154 = v153.i32[0];
              }
              if (v198 > 0x40)
              {
                __int32 v156 = 0;
                unint64_t v180 = ((unint64_t)v198 + 63) >> 6;
                int v181 = (int8x8_t *)v197;
                do
                {
                  int8x8_t v182 = *v181++;
                  uint8x8_t v183 = (uint8x8_t)vcnt_s8(v182);
                  v183.i16[0] = vaddlv_u8(v183);
                  v156 += v183.i32[0];
                  --v180;
                }
                while (v180);
              }
              else
              {
                uint8x8_t v155 = (uint8x8_t)vcnt_s8((int8x8_t)v197);
                v155.i16[0] = vaddlv_u8(v155);
                __int32 v156 = v155.i32[0];
              }
              if (v156 + v154 == v196)
              {
                unsigned int v192 = v205;
                if (v205 > 0x40) {
                  operator new[]();
                }
                char v191 = __src;
                unsigned int v194 = v207;
                if (v207 > 0x40) {
                  operator new[]();
                }
                unint64_t v193 = v206;
                uint64_t v157 = sub_1CB9F8A88((llvm::APInt *)&v191, v53, v46);
                unsigned int v188 = v196;
                if (v196 > 0x40) {
                  operator new[]();
                }
                uint64_t v187 = v195;
                unsigned int v190 = v198;
                if (v198 > 0x40) {
                  operator new[]();
                }
                uint64_t v189 = v197;
                uint64_t v158 = (void)sub_1CB9F8A88((llvm::APInt *)&v187, v54, v46) * (void)v157;
                if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
                  MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
                }
                *(void *)this = ~v158;
                *((_DWORD *)this + 2) = 64;
                if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
                  MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
                }
                *((void *)this + 2) = v158;
                *((_DWORD *)this + 6) = 64;
                if (v190 >= 0x41 && v189) {
                  MEMORY[0x1D25D9CB0](v189, 0x1000C8000313F17);
                }
                if (v188 >= 0x41 && v187) {
                  MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
                }
                if (v194 >= 0x41 && v193) {
                  MEMORY[0x1D25D9CB0](v193, 0x1000C8000313F17);
                }
                if (v192 >= 0x41 && v191) {
                  MEMORY[0x1D25D9CB0](v191, 0x1000C8000313F17);
                }
              }
            }
            if (v198 >= 0x41 && v197) {
              MEMORY[0x1D25D9CB0](v197, 0x1000C8000313F17);
            }
            if (v196 >= 0x41 && v195) {
              MEMORY[0x1D25D9CB0](v195, 0x1000C8000313F17);
            }
            if (v207 < 0x41)
            {
LABEL_332:
              if (v205 < 0x41) {
                return sub_1CB9FB5B0((uint64_t)v210);
              }
              long long v147 = __src;
              if (!__src) {
                return sub_1CB9FB5B0((uint64_t)v210);
              }
LABEL_221:
              MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              return sub_1CB9FB5B0((uint64_t)v210);
            }
LABEL_367:
            if (v206) {
              MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
            }
            goto LABEL_332;
          }
        }
        else
        {
          unint64_t v55 = 0;
        }
        unsigned int v56 = (unsigned __int16)(v55 >> 3);
        goto LABEL_308;
      }
    }
    else
    {
      unint64_t v51 = 0;
    }
    unsigned int v52 = (unsigned __int16)(v51 >> 3);
    goto LABEL_68;
  }
  if ((v15 - 52) < 2)
  {
    uint64_t v33 = *(void *)(v13 + 32);
    unsigned int v34 = *(_DWORD *)(v33 + 36);
    unsigned int v205 = 1;
    __src = 0;
    unsigned int v207 = 1;
    int v206 = 0;
    uint64_t v35 = (a7 + 1);
    sub_1CC6DF17C((char *)v210, *(_DWORD *)(v33 + 68), (llvm::MDNode *)&__src, a5, v35);
    if (v205 > 0x40)
    {
      __int32 v37 = 0;
      unint64_t v160 = ((unint64_t)v205 + 63) >> 6;
      int v161 = (int8x8_t *)__src;
      do
      {
        int8x8_t v162 = *v161++;
        uint8x8_t v163 = (uint8x8_t)vcnt_s8(v162);
        v163.i16[0] = vaddlv_u8(v163);
        v37 += v163.i32[0];
        --v160;
      }
      while (v160);
    }
    else
    {
      uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
      v36.i16[0] = vaddlv_u8(v36);
      __int32 v37 = v36.i32[0];
    }
    unsigned int v38 = v207;
    if (v207 > 0x40)
    {
      __int32 v40 = 0;
      unint64_t v164 = ((unint64_t)v207 + 63) >> 6;
      uint64_t v165 = (int8x8_t *)v206;
      do
      {
        int8x8_t v166 = *v165++;
        uint8x8_t v167 = (uint8x8_t)vcnt_s8(v166);
        v167.i16[0] = vaddlv_u8(v167);
        v40 += v167.i32[0];
        --v164;
      }
      while (v164);
    }
    else
    {
      uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v206);
      v39.i16[0] = vaddlv_u8(v39);
      __int32 v40 = v39.i32[0];
    }
    if (v40 + v37 != v205) {
      goto LABEL_197;
    }
    if ((v34 & 0x80000000) != 0 && (v34 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432)) {
      unint64_t v41 = *(void *)(*(void *)(a6 + 424) + 8 * (v34 & 0x7FFFFFFF));
    }
    else {
      unint64_t v41 = 0;
    }
    unint64_t v203 = v41;
    sub_1CC6DF17C((char *)v210, v34, this, a5, v35);
    unint64_t v58 = sub_1CB8F1DC4(&v203);
    if (v57 == 1) {
    if (v58 > 0x3F)
    }
    {
LABEL_91:
      if (v207 >= 0x41) {
        int v65 = (uint64_t *)v206;
      }
      else {
        int v65 = (uint64_t *)&v206;
      }
      uint64_t v66 = *v65;
      if (v15 == 52)
      {
        unsigned int v67 = *((_DWORD *)this + 2);
        unsigned int v196 = v67;
        if (v67 > 0x40) {
          operator new[]();
        }
        if (v67 == v66)
        {
          uint64_t v68 = 0;
          if (v66 >= 0x41 && *(void *)this) {
            MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v68 = *(void *)this >> v66;
        }
        *(void *)this = v68;
        *((_DWORD *)this + 2) = v67;
        unsigned int v69 = *((_DWORD *)this + 6);
        unsigned int v196 = v69;
        if (v69 > 0x40) {
          operator new[]();
        }
        if (v69 == v66)
        {
          uint64_t v70 = 0;
          if (v66 >= 0x41 && *v16) {
            MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
          }
        }
        else
        {
          uint64_t v70 = *v16 >> v66;
        }
        *((void *)this + 2) = v70;
        *((_DWORD *)this + 6) = v69;
        unsigned int v71 = *((_DWORD *)this + 2);
        unsigned int v196 = v71;
        if (v71 >= 0x41) {
          operator new[]();
        }
        unint64_t v72 = 0;
        int v195 = 0;
        unsigned int v73 = v71 - v66;
        if (v71 - v66 != v71)
        {
          if (v73 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v195, v73, v71);
          }
          else
          {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66 << v73;
            int v195 = (void *)v72;
          }
        }
        uint64_t v74 = *(void *)(*(void *)(v13 + 32) + 112);
        if (v74 != v71)
        {
          if (v74 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v195, v74, v71);
          }
          else
          {
            v72 |= 0xFFFFFFFFFFFFFFFFLL >> (v74 - v71) << v74;
            int v195 = (void *)v72;
          }
        }
        uint64_t v75 = *((unsigned int *)this + 2);
        if (v75 > 0x40)
        {
          uint64_t v85 = *(void **)this;
          unint64_t v86 = (unint64_t)(v75 + 63) >> 6;
          long long v87 = (uint64_t *)v72;
          do
          {
            uint64_t v88 = *v87++;
            *v85++ |= v88;
            --v86;
          }
          while (v86);
        }
        else
        {
          *(void *)this |= v72;
        }
        unsigned int v202 = v71;
        unint64_t v89 = ~v72;
        unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
        if (!v71) {
          unint64_t v90 = 0;
        }
        unint64_t v91 = v90 & v89;
        unint64_t v201 = v90 & v89;
        unsigned int v202 = 0;
        uint64_t v95 = *((unsigned int *)this + 6);
        if (v95 > 0x40)
        {
          uint64_t v96 = (void *)*v16;
          unint64_t v97 = (unint64_t)(v95 + 63) >> 6;
          unsigned int v98 = (uint64_t *)v91;
          do
          {
            uint64_t v99 = *v98++;
            *v96++ &= v99;
            --v97;
          }
          while (v97);
          goto LABEL_174;
        }
      }
      else
      {
        unsigned int v76 = *((_DWORD *)this + 2);
        unsigned int v196 = v76;
        if (v76 > 0x40) {
          operator new[]();
        }
        uint64_t v77 = *(void *)this << v66;
        if (v76 == v66) {
          uint64_t v77 = 0;
        }
        if (v76) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
        }
        else {
          unint64_t v78 = 0;
        }
        int v195 = (void *)(v78 & v77);
        *(void *)this = v195;
        *((_DWORD *)this + 2) = v196;
        unsigned int v92 = *((_DWORD *)this + 6);
        unsigned int v196 = v92;
        if (v92 > 0x40) {
          operator new[]();
        }
        uint64_t v93 = *v16 << v66;
        if (v92 == v66) {
          uint64_t v93 = 0;
        }
        if (v92) {
          unint64_t v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
        }
        else {
          unint64_t v94 = 0;
        }
        int v195 = (void *)(v94 & v93);
        *((void *)this + 2) = v195;
        *((_DWORD *)this + 6) = v196;
        unsigned int v100 = *((_DWORD *)this + 2);
        unsigned int v196 = v100;
        if (v100 >= 0x41) {
          operator new[]();
        }
        unint64_t v101 = 0;
        int v195 = 0;
        if (v66)
        {
          if (v66 > 0x40)
          {
            llvm::APInt::setBitsSlowCase(&v195, 0, v66);
          }
          else
          {
            unint64_t v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
            int v195 = (void *)v101;
          }
        }
        uint64_t v102 = *(void *)(*(void *)(v13 + 32) + 112) + v66;
        if (v102 != v100)
        {
          if (v102 > 0x3F)
          {
            llvm::APInt::setBitsSlowCase(&v195, v102, v100);
          }
          else
          {
            v101 |= 0xFFFFFFFFFFFFFFFFLL >> (v102 - v100) << v102;
            int v195 = (void *)v101;
          }
        }
        uint64_t v103 = *((unsigned int *)this + 2);
        if (v103 > 0x40)
        {
          unsigned int v104 = *(void **)this;
          unint64_t v105 = (unint64_t)(v103 + 63) >> 6;
          __int16 v106 = (uint64_t *)v101;
          do
          {
            uint64_t v107 = *v106++;
            *v104++ |= v107;
            --v105;
          }
          while (v105);
        }
        else
        {
          *(void *)this |= v101;
        }
        unsigned int v200 = v100;
        unint64_t v108 = ~v101;
        unint64_t v109 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
        if (!v100) {
          unint64_t v109 = 0;
        }
        unint64_t v91 = v109 & v108;
        v199[1] = v109 & v108;
        unsigned int v200 = 0;
        uint64_t v110 = *((unsigned int *)this + 6);
        if (v110 > 0x40)
        {
          BOOL v111 = (void *)*v16;
          unint64_t v112 = (unint64_t)(v110 + 63) >> 6;
          uint64_t v113 = (uint64_t *)v91;
          do
          {
            uint64_t v114 = *v113++;
            *v111++ &= v114;
            --v112;
          }
          while (v112);
          goto LABEL_174;
        }
      }
      *v16 &= v91;
LABEL_174:
      int v115 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
      if (v115 < 0 && (uint64_t v116 = v115 & 0x7FFFFFFF, v116 < *(_DWORD *)(a6 + 432))) {
        unint64_t v117 = *(void *)(*(void *)(a6 + 424) + 8 * v116);
      }
      else {
        unint64_t v117 = 0;
      }
      v199[0] = v117;
      unint64_t v119 = sub_1CB8F1DC4(v199);
      if (v118 == 1) {
      if (v119 <= 0x3F)
      }
      {
        unsigned int v121 = sub_1CB8F1DC4(v199);
        if (v120 == 1) {
        unsigned int v122 = *((_DWORD *)this + 2);
        }
        if (v121 > 0x40)
        {
          if (v122 != v121) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v195, (uint64_t)this);
          if (*((_DWORD *)this + 6) != v121) {
            operator new[]();
          }
          sub_1CD0463BC((uint64_t)&v208, (uint64_t)this + 16);
          unsigned int v121 = v209;
          unint64_t v129 = v208;
        }
        else
        {
          uint64_t v123 = this;
          if (v122 >= 0x41) {
            uint64_t v123 = *(llvm::APInt **)this;
          }
          uint64_t v124 = *(void *)v123;
          unsigned int v196 = v121;
          unint64_t v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
          unint64_t v126 = v125;
          if (!v121) {
            unint64_t v126 = 0;
          }
          int v195 = (void *)(v126 & v124);
          int v127 = (uint64_t *)((char *)this + 16);
          if (*((_DWORD *)this + 6) >= 0x41u) {
            int v127 = (uint64_t *)*v16;
          }
          uint64_t v128 = *v127;
          if (!v121) {
            unint64_t v125 = 0;
          }
          unint64_t v129 = v125 & v128;
        }
        unsigned int v130 = v196;
        uint64_t v131 = v195;
        if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
          MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
        }
        *(void *)this = v131;
        *((_DWORD *)this + 2) = v130;
        if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
          MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
        }
        *((void *)this + 2) = v129;
        *((_DWORD *)this + 6) = v121;
      }
      unsigned int v38 = v207;
LABEL_197:
      if (v38 < 0x41) {
        goto LABEL_332;
      }
      goto LABEL_367;
    }
    unint64_t v59 = *((unsigned int *)this + 2);
    uint64_t v60 = *(void *)this;
    if (v59 != 64)
    {
      if (v59 > 0x3F)
      {
        *(void *)(v60 + ((v59 >> 3) & 0x1FFFFFF8)) |= -1 << *((_DWORD *)this + 2);
        uint64_t v61 = (uint64_t *)*((void *)this + 2);
        if (*(void *)this) {
          MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
        }
        goto LABEL_84;
      }
      v60 |= -1 << v59;
    }
    uint64_t v61 = (uint64_t *)*v16;
LABEL_84:
    *(void *)this = v60;
    *((_DWORD *)this + 2) = 64;
    if (*((_DWORD *)this + 6) >= 0x41u && *v16) {
      MEMORY[0x1D25D9CB0](*v16, 0x1000C8000313F17);
    }
    *((void *)this + 2) = v61;
    *((_DWORD *)this + 6) = 64;
    unsigned int v63 = sub_1CB8F1DC4(&v203);
    if (v62 == 1) {
    unsigned int v64 = *((_DWORD *)this + 2);
    }
    if (v64 != v63)
    {
      if (v63 > 0x3F || v64 > 0x40) {
        llvm::APInt::setBitsSlowCase(this, v63, v64);
      }
      else {
        *(void *)this |= 0xFFFFFFFFFFFFFFFFLL >> (v63 - v64) << v63;
      }
    }
    goto LABEL_91;
  }
  if (v15 == 51)
  {
    unsigned int v47 = *(_DWORD *)(*(void *)(v13 + 32) + 164);
    unsigned int v196 = 1;
    int v195 = (void *)1;
    sub_1CC6DF17C((char *)v210, v47, this, (uint64_t)&v195, (a7 + 1));
    uint64_t v48 = *((unsigned int *)this + 6);
    if (v48 > 0x40)
    {
      int v79 = 0;
      int64_t v80 = (unint64_t)(v48 + 63) >> 6;
      do
      {
        BOOL v81 = v80-- < 1;
        if (v81) {
          break;
        }
        unint64_t v82 = *(void *)(*v16 + 8 * v80);
        v79 += __clz(v82);
      }
      while (!v82);
      int v83 = v48 | 0xFFFFFFC0;
      if ((v48 & 0x3F) == 0) {
        int v83 = 0;
      }
      if (v79 + v83 != v48) {
        goto LABEL_209;
      }
    }
    else if (*v16)
    {
      goto LABEL_209;
    }
    uint64_t v84 = *((unsigned int *)this + 2);
    if (v84 > 0x40)
    {
      int v132 = 0;
      int64_t v133 = (unint64_t)(v84 + 63) >> 6;
      do
      {
        BOOL v81 = v133-- < 1;
        if (v81) {
          break;
        }
        unint64_t v134 = *(void *)(*(void *)this + 8 * v133);
        v132 += __clz(v134);
      }
      while (!v134);
      int v135 = v84 | 0xFFFFFFC0;
      if ((v84 & 0x3F) == 0) {
        int v135 = 0;
      }
      if (v132 + v135 == v84)
      {
LABEL_219:
        if (v196 < 0x41) {
          return sub_1CB9FB5B0((uint64_t)v210);
        }
        long long v147 = v195;
        if (!v195) {
          return sub_1CB9FB5B0((uint64_t)v210);
        }
        goto LABEL_221;
      }
    }
    else if (!*(void *)this)
    {
      goto LABEL_219;
    }
LABEL_209:
    unsigned int v136 = *(_DWORD *)(*(void *)(v13 + 32) + 132);
    unsigned int v205 = 1;
    __src = 0;
    unsigned int v207 = 1;
    int v206 = 0;
    sub_1CC6DF17C((char *)v210, v136, (llvm::MDNode *)&__src, (uint64_t)&v195, (a7 + 1));
    uint64_t v137 = *((unsigned int *)this + 6);
    if (v137 > 0x40)
    {
      uint64_t v138 = (uint64_t *)*v16;
      unsigned int v139 = (uint64_t *)v206;
      unint64_t v140 = (unint64_t)(v137 + 63) >> 6;
      do
      {
        uint64_t v141 = *v139++;
        *v138++ &= v141;
        --v140;
      }
      while (v140);
    }
    else
    {
      *v16 &= (unint64_t)v206;
    }
    uint64_t v142 = *((unsigned int *)this + 2);
    if (v142 > 0x40)
    {
      int v143 = *(void **)this;
      int v144 = (uint64_t *)__src;
      unint64_t v145 = (unint64_t)(v142 + 63) >> 6;
      do
      {
        uint64_t v146 = *v144++;
        *v143++ &= v146;
        --v145;
      }
      while (v145);
    }
    else
    {
      *(void *)this &= (unint64_t)__src;
    }
    if (v207 >= 0x41 && v206) {
      MEMORY[0x1D25D9CB0](v206, 0x1000C8000313F17);
    }
    if (v205 >= 0x41 && __src) {
      MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
    }
    goto LABEL_219;
  }
  if (v15 != 116) {
    return sub_1CB9FB5B0((uint64_t)v210);
  }
  uint64_t v21 = *(unsigned int *)(v13 + 40);
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = *(unsigned __int8 **)(v13 + 32);
    while (1)
    {
      int v24 = *v23;
      v23 += 32;
      if (v24 == 17) {
        break;
      }
      if (v21 == ++v22) {
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    LODWORD(v22) = -1;
  }
  int v25 = *(_DWORD *)(*(void *)(v13 + 32) + 32 * v22 + 16);
  if (v25 > 2664)
  {
    if (v25 <= 2707)
    {
      uint64_t v26 = 59;
      switch(v25)
      {
        case 2665:
          goto LABEL_39;
        case 2666:
          uint64_t v26 = 60;
          goto LABEL_39;
        case 2667:
          uint64_t v26 = 61;
          goto LABEL_39;
        case 2668:
          return sub_1CB9FB5B0((uint64_t)v210);
        case 2669:
          int v148 = 39;
          goto LABEL_408;
        case 2670:
          uint64_t v26 = 52;
          goto LABEL_39;
        case 2671:
          uint64_t v26 = 53;
          goto LABEL_39;
        case 2672:
          uint64_t v26 = 54;
          goto LABEL_39;
        case 2673:
          uint64_t v26 = 55;
          goto LABEL_39;
        case 2674:
          uint64_t v26 = 56;
          goto LABEL_39;
        case 2675:
          uint64_t v26 = 57;
          goto LABEL_39;
        case 2676:
          uint64_t v26 = 12;
          goto LABEL_39;
        case 2677:
          uint64_t v26 = 64;
          goto LABEL_39;
        case 2678:
          uint64_t v26 = 63;
          goto LABEL_39;
        case 2679:
          goto LABEL_229;
        default:
          if (v25 == 2706)
          {
            uint64_t v26 = 65;
          }
          else
          {
            if (v25 != 2707) {
              return sub_1CB9FB5B0((uint64_t)v210);
            }
            uint64_t v26 = 66;
          }
          break;
      }
      goto LABEL_39;
    }
    if (v25 > 2819)
    {
      if (v25 > 2840)
      {
        if (v25 == 2841)
        {
          uint64_t v26 = 48;
        }
        else
        {
          if (v25 != 2848) {
            return sub_1CB9FB5B0((uint64_t)v210);
          }
          uint64_t v26 = 68;
        }
      }
      else if (v25 == 2820)
      {
        uint64_t v26 = 58;
      }
      else
      {
        if (v25 != 2822) {
          return sub_1CB9FB5B0((uint64_t)v210);
        }
        uint64_t v26 = 41;
      }
      goto LABEL_39;
    }
    if (v25 > 2794)
    {
      switch(v25)
      {
        case 2795:
          uint64_t v26 = 13;
          goto LABEL_39;
        case 2796:
          uint64_t v26 = 15;
          goto LABEL_39;
        case 2807:
          uint64_t v26 = 32;
          goto LABEL_39;
        case 2808:
          uint64_t v26 = 39;
          goto LABEL_39;
        case 2809:
          uint64_t v26 = 46;
          goto LABEL_39;
        case 2810:
          uint64_t v26 = 47;
          goto LABEL_39;
        case 2814:
          uint64_t v26 = 69;
          goto LABEL_39;
        case 2815:
        case 2816:
          uint64_t v26 = 38;
          goto LABEL_39;
        default:
          return sub_1CB9FB5B0((uint64_t)v210);
      }
      return sub_1CB9FB5B0((uint64_t)v210);
    }
    if (v25 == 2708)
    {
      uint64_t v26 = 67;
      goto LABEL_39;
    }
    if (v25 == 2769)
    {
      uint64_t v26 = 16;
      goto LABEL_39;
    }
    if (v25 != 2732) {
      return sub_1CB9FB5B0((uint64_t)v210);
    }
    int v148 = 40;
    goto LABEL_408;
  }
  if (v25 <= 2407)
  {
    if (v25 > 2131)
    {
      switch(v25)
      {
        case 2132:
          uint64_t v26 = 6;
          goto LABEL_39;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          return sub_1CB9FB5B0((uint64_t)v210);
        case 2139:
          int v148 = 43;
          goto LABEL_408;
        case 2140:
          goto LABEL_256;
        case 2145:
          uint64_t v26 = 49;
          goto LABEL_39;
        case 2146:
          uint64_t v26 = 50;
          goto LABEL_39;
        case 2147:
          uint64_t v26 = 51;
          goto LABEL_39;
        case 2150:
          int v148 = 34;
          goto LABEL_408;
        case 2151:
          int v148 = 33;
          goto LABEL_408;
        case 2152:
          int v148 = 57;
          goto LABEL_408;
        case 2154:
          int v148 = 55;
          goto LABEL_408;
        case 2155:
          int v148 = 56;
          goto LABEL_408;
        case 2156:
          int v148 = 41;
          goto LABEL_408;
        case 2169:
          uint64_t v26 = 18;
          goto LABEL_39;
        case 2170:
          goto LABEL_407;
        case 2173:
          uint64_t v26 = 19;
          goto LABEL_39;
        case 2174:
          uint64_t v26 = 20;
          goto LABEL_39;
        case 2175:
          uint64_t v26 = 21;
          goto LABEL_39;
        case 2176:
          uint64_t v26 = 22;
          goto LABEL_39;
        default:
          if (v25 != 2365) {
            return sub_1CB9FB5B0((uint64_t)v210);
          }
          uint64_t v26 = 23;
          break;
      }
      goto LABEL_39;
    }
    switch(v25)
    {
      case 2107:
        uint64_t v26 = 5;
LABEL_39:
        uint64_t v30 = sub_1CBB35BE4((uint64_t)v20);
        unsigned int v31 = ((uint64_t (*)(uint64_t, uint64_t))loc_1CBB7DD40)(v26, v30);
        if (v31 > 0x1F) {
          return sub_1CB9FB5B0((uint64_t)v210);
        }
        unsigned int v205 = v14;
        if (v31 == v14) {
          unint64_t v32 = 0;
        }
        else {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFFLL >> (v31 - v14) << v31;
        }
        goto LABEL_131;
      case 1269:
LABEL_407:
        int v148 = 16;
        break;
      case 2108:
        int v148 = 52;
        break;
      default:
        return sub_1CB9FB5B0((uint64_t)v210);
    }
LABEL_408:
    unint64_t v184 = llvm::dbgs(v20);
    uint64_t v185 = sub_1CB8E509C(v184, "SR type GPUBaseInfo::SRegType::<");
    uint64_t v186 = sub_1CD41CBBC(v185, v148);
    sub_1CB8E509C(v186, ">\n");
    llvm::report_fatal_error((llvm *)"Special register type not implemented yet for G15", (const llvm::Twine *)1);
  }
  if (v25 <= 2483)
  {
    if (v25 <= 2409)
    {
      if (v25 == 2408) {
        uint64_t v26 = 24;
      }
      else {
        uint64_t v26 = 25;
      }
    }
    else
    {
      switch(v25)
      {
        case 2410:
          uint64_t v26 = 26;
          break;
        case 2423:
          uint64_t v26 = 11;
          break;
        case 2444:
LABEL_229:
          uint64_t v26 = 31;
          break;
        default:
          return sub_1CB9FB5B0((uint64_t)v210);
      }
    }
    goto LABEL_39;
  }
  if (v25 > 2543)
  {
    switch(v25)
    {
      case 2544:
LABEL_256:
        uint64_t v26 = 7;
        break;
      case 2586:
LABEL_251:
        uint64_t v26 = 43;
        break;
      case 2587:
LABEL_237:
        uint64_t v26 = 44;
        break;
      default:
        return sub_1CB9FB5B0((uint64_t)v210);
    }
    goto LABEL_39;
  }
  switch(v25)
  {
    case 2484:
      uint64_t v26 = 36;
      goto LABEL_39;
    case 2485:
      uint64_t v26 = 35;
      goto LABEL_39;
    case 2486:
      uint64_t v26 = 34;
      goto LABEL_39;
    case 2491:
      goto LABEL_251;
    case 2492:
      goto LABEL_237;
    default:
      return sub_1CB9FB5B0((uint64_t)v210);
  }
  return sub_1CB9FB5B0((uint64_t)v210);
}

BOOL sub_1CBB7E008(int a1, llvm::Type *this, llvm::Type *a3)
{
  if (*((unsigned char *)this + 8) != 13 || *((unsigned char *)a3 + 8) != 13) {
    return 0;
  }
  unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if (v4 == 1) {
  unsigned int v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  }
  if (v6 == 1) {
  return v7 > 0xF && PrimitiveSizeInBits > v7;
  }
}

BOOL sub_1CBB7E09C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (!*a3) {
    goto LABEL_2;
  }
  unsigned int v7 = *(_DWORD *)(*(void *)v3 + 8);
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(**(void **)(*(void *)v3 + 16) + 8);
  }
  unsigned int v8 = v7 >> 8;
  BOOL result = 1;
  if (v8 != 3 && v8 != 64)
  {
LABEL_2:
    if (v3) {
      BOOL v4 = *((unsigned char *)a3 + 16) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    return v4 || a3[3] == 0;
  }
  return result;
}

BOOL sub_1CBB7E100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v20 = &v21;
  uint64_t v21 = 0;
  if (sub_1CC04C34C(&v20, a2) && v21) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 != 62)
  {
    if (v4 != 84) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(v2 - 32);
    if (!v5) {
      goto LABEL_17;
    }
    if (*(unsigned char *)(v5 + 16)) {
      goto LABEL_17;
    }
    if (*(void *)(v5 + 24) != *(void *)(v2 + 72)) {
      goto LABEL_17;
    }
    if ((*(unsigned char *)(v5 + 33) & 0x20) == 0) {
      goto LABEL_17;
    }
    BOOL result = 0;
    int v6 = *(_DWORD *)(v5 + 36);
    if (v6 != 139 && v6 != 2484 && v6 != 2677) {
      goto LABEL_17;
    }
    return result;
  }
  uint64_t v7 = **(void **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  int v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12) {
    int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
  }
  if ((v8 & 0xFFFFFF00) == 0x4000) {
    return 0;
  }
  while (1)
  {
LABEL_17:
    uint64_t v9 = v4 - 54;
    if (v9 > 0x23) {
      return 1;
    }
    if (((1 << v9) & 0x800987000) == 0) {
      break;
    }
LABEL_19:
    int v10 = *(_DWORD *)(v2 + 20);
    if ((v10 & 0x40000000) != 0) {
      BOOL v11 = *(uint64_t **)(v2 - 8);
    }
    else {
      BOOL v11 = (uint64_t *)(v2 - 32 * (v10 & 0x7FFFFFF));
    }
    uint64_t v2 = *v11;
    unsigned int v4 = *(unsigned __int8 *)(*v11 + 16);
    if (v2) {
      BOOL v12 = v4 >= 0x1C;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 1;
    }
  }
  if (!v9)
  {
    int v13 = *(_DWORD *)(v2 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v14 = v2 - 32 * (v13 & 0x7FFFFFF);
    }
    uint64_t v15 = *(void *)(v14 + 32);
    if (v15) {
      BOOL v16 = *(unsigned char *)(v15 + 16) == 16;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16) {
      return 1;
    }
    uint64_t v17 = (void *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u) {
      uint64_t v17 = (void *)*v17;
    }
    if (*v17 != 16) {
      return 1;
    }
    goto LABEL_19;
  }
  if (v9 != 6) {
    return 1;
  }
  uint64_t v18 = **(void **)(v2 - 32);
  int v19 = *(_DWORD *)(v18 + 8);
  if ((v19 & 0xFE) == 0x12) {
    int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
  }
  return (v19 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1CBB7E2D0(int a1, llvm::Type ***this, uint64_t a3)
{
  unsigned int v4 = (llvm::Type *)this;
  if ((this[1] & 0xFE) == 0x12) {
    unsigned int v4 = *this[2];
  }
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  if (PrimitiveSizeInBits != 32 && PrimitiveSizeInBits != 16) {
    return 0;
  }
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  int v6 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
  return v6 == 32 || v6 == 64;
}

uint64_t sub_1CBB7E360(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = **(unsigned __int16 **)(a2 + 16) - 70;
  BOOL v3 = v2 > 0x33;
  uint64_t v4 = (1 << v2) & 0xC000000000001;
  if (!v3 && v4 != 0)
  {
    uint64_t v7 = *(void **)(*(void *)(a2 + 24) + 32);
    int v8 = *(llvm::Module **)(*v7 + 40);
    uint64_t v21 = "agx.reduce.reg.pressure";
    __int16 v22 = 259;
    Nameduint64_t Metadata = llvm::Module::getNamedMetadata(v8, &v21);
    if (NamedMetadata)
    {
      uint64_t v10 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                  - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                      + 128);
      BOOL v11 = (void *)(v10 + 24);
      if (*(_DWORD *)(v10 + 32) >= 0x41u) {
        BOOL v11 = (void *)*v11;
      }
      if (*v11) {
        return 1;
      }
    }
    if (*(void *)(a2 + 24) == v7[41])
    {
      uint64_t v13 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
      uint64_t v14 = v7[5];
      if ((v13 & 0x80000000) != 0) {
        uint64_t v15 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v15 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v13);
      }
      uint64_t v16 = *v15;
      if (v16)
      {
        while ((*(unsigned char *)(v16 + 3) & 1) != 0)
        {
          uint64_t v16 = *(void *)(v16 + 24);
          if (!v16) {
            goto LABEL_16;
          }
        }
        while (1)
        {
          uint64_t v16 = *(void *)(v16 + 24);
          if (!v16) {
            break;
          }
          if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        if ((v13 & 0x80000000) != 0) {
          uint64_t v17 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v17 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v13);
        }
        uint64_t v18 = *v17;
        if (v18)
        {
          while ((*(unsigned char *)(v18 + 3) & 1) != 0)
          {
            uint64_t v18 = *(void *)(v18 + 24);
            if (!v18) {
              return 0;
            }
          }
          uint64_t v19 = *(void *)(v18 + 8);
          if (**(_WORD **)(v19 + 16) == 69) {
            return 1;
          }
          uint64_t result = 1;
          while (1)
          {
            uint64_t v18 = *(void *)(v18 + 24);
            if (!v18) {
              break;
            }
            if ((*(unsigned char *)(v18 + 3) & 1) == 0)
            {
              uint64_t v20 = *(void *)(v18 + 8);
              if (v20 != v19)
              {
                uint64_t v19 = *(void *)(v18 + 8);
                if (**(_WORD **)(v20 + 16) == 69) {
                  return result;
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBB7E510()
{
  return 5;
}

uint64_t sub_1CBB7E518()
{
  return 0;
}

uint64_t sub_1CBB7E520()
{
  return 0;
}

uint64_t sub_1CBB7E528()
{
  return 0;
}

uint64_t sub_1CBB7E530()
{
  return 1;
}

void sub_1CBB7E538(uint64_t a1)
{
}

uint64_t sub_1CBB7E5F8(void *a1, _DWORD *a2, unsigned int *a3, uint64_t a4, int *a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  sub_1CC73C210(*a3, a1[34], (uint64_t)&v73);
  if (!(_BYTE)v75) {
    return 0;
  }
  if (v74 >= 0x41)
  {
    if (v73) {
      MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
    }
    return 0;
  }
  uint64_t v10 = a1[34];
  uint64_t v11 = *a2;
  if ((v11 & 0x80000000) != 0) {
    BOOL v12 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v12 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v11);
  }
  uint64_t v13 = *v12;
  if (*(unsigned char *)(v13 + 3))
  {
    if ((v11 & 0x80000000) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v13 + 24);
    if ((v11 & 0x80000000) == 0) {
      return 0;
    }
  }
  uint64_t v14 = v11 & 0x7FFFFFFF;
  if (v14 >= *(_DWORD *)(v10 + 432)) {
    return 0;
  }
  uint64_t v15 = 0;
  if (*(void *)(*(void *)(v10 + 424) + 8 * v14) != 129) {
    return v15;
  }
  uint64_t v16 = *(void *)(v13 + 8);
  int v17 = **(unsigned __int16 **)(v16 + 16);
  if ((v17 - 67) < 0xFFFFFFFE) {
    return v15;
  }
  uint64_t v15 = 0;
  if ((*a5 & 0xFFFFFFFE) != 0x20 || (unint64_t)(v73 << -(uint64_t)v74 >> -(uint64_t)v74) > 1) {
    return v15;
  }
  uint64_t v18 = *(void *)(v10 + 24);
  uint64_t v19 = *(void *)(v18 + 16 * v14 + 8);
  if (v19)
  {
    while ((*(unsigned char *)(v19 + 3) & 1) != 0)
    {
      uint64_t v19 = *(void *)(v19 + 24);
      if (!v19) {
        goto LABEL_15;
      }
    }
    uint64_t v38 = *(void *)(v19 + 8);
    if (**(_WORD **)(v38 + 16) != 51) {
      return 0;
    }
    int v39 = 1;
    while (1)
    {
      uint64_t v19 = *(void *)(v19 + 24);
      if (!v19) {
        break;
      }
      if ((*(unsigned char *)(v19 + 3) & 1) == 0)
      {
        uint64_t v40 = *(void *)(v19 + 8);
        if (v40 != v38)
        {
          uint64_t v15 = 0;
          unsigned int v41 = v39 + 1;
          if (**(_WORD **)(v40 + 16) == 51)
          {
            ++v39;
            BOOL v42 = v41 >= 4;
          }
          else
          {
            BOOL v42 = 1;
          }
          uint64_t v38 = *(void *)(v19 + 8);
          if (v42) {
            return v15;
          }
        }
      }
    }
  }
LABEL_15:
  uint64_t v20 = *(void *)(v16 + 32);
  uint64_t v21 = *(unsigned int *)(v20 + 36);
  __int16 v22 = (uint64_t *)((v21 & 0x80000000) != 0 ? v18 + 16 * (v21 & 0x7FFFFFFF) + 8 : *(void *)(v10 + 272) + 8 * v21);
  uint64_t v23 = *v22;
  unsigned int v63 = (const char *)*(unsigned int *)(v20 + 36);
  uint64_t v65 = v73 << -(uint64_t)v74 >> -(uint64_t)v74;
  if (v23 && ((*(unsigned char *)(v23 + 3) & 1) != 0 || (uint64_t v23 = *(void *)(v23 + 24)) != 0 && (*(unsigned char *)(v23 + 3) & 1) != 0)) {
    uint64_t v24 = *(void *)(v23 + 8);
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void *)(v10 + 272);
  if (sub_1CBA02C0C(v24, v18, v25)) {
    return 0;
  }
  uint64_t v26 = *(unsigned int *)(v20 + 68);
  uint64_t v27 = (uint64_t *)((int)v26 < 0 ? v18 + 16 * (v26 & 0x7FFFFFFF) + 8 : v25 + 8 * v26);
  uint64_t v28 = *v27;
  if (v28 && ((*(unsigned char *)(v28 + 3) & 1) != 0 || (uint64_t v28 = *(void *)(v28 + 24)) != 0 && (*(unsigned char *)(v28 + 3) & 1) != 0)) {
    uint64_t v29 = *(void *)(v28 + 8);
  }
  else {
    uint64_t v29 = 0;
  }
  if (sub_1CBA02C0C(v29, v18, v25)) {
    return 0;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    unsigned int v31 = (char *)&v73 + i;
    *((_DWORD *)v31 + 2) = 1;
    *(void *)unsigned int v31 = 0;
    *((_DWORD *)v31 + 6) = 1;
    *((void *)v31 + 2) = 0;
  }
  sub_1CC6DEE8C(a1[33], v63, (uint64_t)&v68);
  if (v74 >= 0x41 && v73) {
    MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
  }
  unsigned int v64 = (uint64_t *)v68;
  uint64_t v73 = v68;
  unsigned int v32 = v69;
  unsigned int v74 = v69;
  unsigned int v69 = 0;
  if (v76 >= 0x41 && v75)
  {
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    uint64_t v75 = v70;
    unsigned int v76 = v71;
    unsigned int v71 = 0;
    if (v69 >= 0x41 && v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v75 = v70;
    unsigned int v76 = v71;
  }
  sub_1CC6DEE8C(a1[33], (const char *)*(unsigned int *)(*(void *)(v16 + 32) + 68), (uint64_t)&v68);
  if (v78 >= 0x41 && v77) {
    MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
  }
  uint64_t v33 = (uint64_t *)v68;
  uint64_t v77 = v68;
  unsigned int v34 = v69;
  unsigned int v78 = v69;
  unsigned int v69 = 0;
  if (v80[0] >= 0x41u && v79)
  {
    MEMORY[0x1D25D9CB0](v79, 0x1000C8000313F17);
    uint64_t v79 = v70;
    v80[0] = v71;
    unsigned int v71 = 0;
    if (v69 >= 0x41 && v68) {
      MEMORY[0x1D25D9CB0](v68, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v79 = v70;
    v80[0] = v71;
  }
  uint64_t v35 = &v73;
  if (v32 >= 0x41) {
    uint64_t v35 = v64;
  }
  if (*v35 == 65534)
  {
    uint8x8_t v36 = &v77;
    if (v34 >= 0x41) {
      uint8x8_t v36 = v33;
    }
    if (*v36 == 65534)
    {
      uint64_t v37 = v65;
      if (v17 == 66 && v65 == 1 || v17 == 65 && !v65)
      {
        *a5 = dword_1CDC6CD54[*a5];
        uint64_t v37 = v65 ^ 1;
      }
      goto LABEL_61;
    }
  }
  uint64_t v15 = 0;
  if (v17 == 66 && !v65)
  {
    uint64_t v37 = 0;
LABEL_61:
    uint64_t v66 = v37;
    uint64_t v43 = a1[31];
    *(void *)(v43 + 40) = *(void *)(a4 + 24);
    *(void *)(v43 + 48) = a4;
    uint64_t v44 = a1[34];
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v44, "", 0);
    unint64_t v46 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v44 + 24) + 16 * v46) = 4;
    unint64_t v47 = *(unsigned int *)(v44 + 432);
    if (v46 >= v47)
    {
      uint64_t v48 = *(void *)(v44 + 440);
      uint64_t v49 = v46 + 1 - v47;
      if (v46 >= *(unsigned int *)(v44 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v50 = *(_DWORD *)(v44 + 432);
      if (v49)
      {
        unint64_t v51 = (void *)(*(void *)(v44 + 424) + 8 * *(unsigned int *)(v44 + 432));
        uint64_t v52 = ~v46 + v47;
        do
        {
          *v51++ = v48;
          BOOL v42 = __CFADD__(v52++, 1);
        }
        while (!v42);
        int v50 = *(_DWORD *)(v44 + 432);
      }
      *(_DWORD *)(v44 + 432) = v50 + v49;
    }
    *(void *)(*(void *)(v44 + 424) + 8 * v46) = 257;
    uint64_t v53 = *(void *)(v44 + 8);
    if (v53) {
      (*(void (**)(uint64_t))(*(void *)v53 + 24))(v53);
    }
    *a2 = IncompleteVirtualRegister;
    uint64_t v15 = 1;
    v67[0] = IncompleteVirtualRegister;
    void v67[2] = 1;
    uint64_t v54 = *(void *)(v16 + 32);
    LODWORD(v68) = *(_DWORD *)(v54 + 36);
    LODWORD(v70) = 0;
    unsigned int v71 = *(_DWORD *)(v54 + 68);
    int v72 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, void))(*(void *)v43 + 32))(v43, 76, v67, 1, &v68, 2, 0);
    uint64_t v68 = 257;
    unsigned int v69 = 0;
    unint64_t v55 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v43 + 8), (llvm::LLVMContext *)0x20);
    unsigned int v56 = llvm::ConstantInt::get(v55, 65537 * v66, (const llvm::APInt *)1);
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v43 + 16))(v43, &v68, v56);
    *a3 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
  }
  for (uint64_t j = 0; j != -16; j -= 8)
  {
    unint64_t v59 = (char *)&v73 + j * 4;
    if (v80[j] >= 0x41u)
    {
      uint64_t v60 = *((void *)v59 + 6);
      if (v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v59 + 10) >= 0x41u)
    {
      uint64_t v61 = *((void *)v59 + 4);
      if (v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
    }
  }
  return v15;
}

uint64_t sub_1CBB7ED5C(unsigned int a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1188, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a2;
    unsigned int v13 = a1;
    int v11 = __cxa_guard_acquire(&qword_1EBCC1188);
    a2 = v12;
    a1 = v13;
    if (v11)
    {
      dword_1EBCC117C = 2;
      __cxa_guard_release(&qword_1EBCC1188);
      a2 = v12;
      a1 = v13;
    }
  }
  if ((a1 & 0x80000000) != 0) {
    unsigned int v2 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v2 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v3 = *v2;
  if (!v3)
  {
LABEL_19:
    uint64_t v4 = 0;
    unsigned int v6 = 1;
    goto LABEL_20;
  }
  if ((*(unsigned char *)(v3 + 3) & 0x81) != 0)
  {
    do
    {
      uint64_t v3 = *(void *)(v3 + 24);
      if (!v3) {
        goto LABEL_19;
      }
    }
    while ((*(_DWORD *)v3 & 0x81000000) != 0);
  }
  LODWORD(v4) = 0;
  uint64_t v5 = *(void *)(v3 + 8);
  unsigned int v6 = 1;
LABEL_9:
  BOOL v7 = **(unsigned __int16 **)(v5 + 16) == 45;
  unsigned int v8 = v4 + 1;
  if (**(_WORD **)(v5 + 16) == 45) {
    uint64_t v4 = (v4 + 1);
  }
  else {
    uint64_t v4 = v4;
  }
  if (v8 > dword_1EBCC117C) {
    BOOL v7 = 0;
  }
  v6 &= v7;
  while (1)
  {
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3) {
      break;
    }
    if ((*(_DWORD *)v3 & 0x81000000) == 0 && *(void *)(v3 + 8) != v5)
    {
      uint64_t v5 = *(void *)(v3 + 8);
      goto LABEL_9;
    }
  }
LABEL_20:
  if (v4) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  return v9 | (v4 << 32);
}

uint64_t sub_1CBB7EE84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1190))
  {
    byte_1EBCC1179 = 1;
    __cxa_guard_release(&qword_1EBCC1190);
  }
  return byte_1EBCC1179;
}

uint64_t sub_1CBB7EED8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (**(_WORD **)(a1 + 16) != 76 || *(_DWORD *)(a1 + 40) != 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(v5 + 36);
  if ((int)v6 < 0) {
    BOOL v7 = (uint64_t *)(a2 + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    BOOL v7 = (uint64_t *)(a3 + 8 * v6);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 3))
    {
LABEL_11:
      uint64_t v8 = *(void *)(v8 + 8);
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)(v8 + 24);
    if (v8)
    {
      if (*(unsigned char *)(v8 + 3)) {
        goto LABEL_11;
      }
      uint64_t v8 = 0;
    }
  }
LABEL_12:
  uint64_t v9 = *(unsigned int *)(v5 + 68);
  if ((int)v9 < 0) {
    uint64_t v10 = (uint64_t *)(a2 + 16 * (v9 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(a3 + 8 * v9);
  }
  uint64_t v11 = *v10;
  if (v11)
  {
    if ((*(unsigned char *)(v11 + 3) & 1) == 0)
    {
      uint64_t v11 = *(void *)(v11 + 24);
      if (!v11) {
        goto LABEL_18;
      }
      if ((*(unsigned char *)(v11 + 3) & 1) == 0)
      {
        uint64_t v11 = 0;
        goto LABEL_18;
      }
    }
    uint64_t v11 = *(void *)(v11 + 8);
  }
LABEL_18:
  if (**(_WORD **)(v8 + 16) == 313 && **(_WORD **)(v11 + 16) == 313)
  {
    *a4 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
    a4[1] = *(_DWORD *)(*(void *)(v11 + 32) + 4);
    return 1;
  }
  return 0;
}

uint64_t sub_1CBB7EFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v492 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 248);
  *(void *)(v3 + 40) = *(void *)(a2 + 24);
  *(void *)(v3 + 48) = a2;
  unsigned int v4 = **(unsigned __int16 **)(a2 + 16);
  if (v4 > 0x4C)
  {
    if (**(unsigned __int16 **)(a2 + 16) <= 0x7Eu)
    {
      if (v4 != 77)
      {
        if (v4 != 114) {
          return v2;
        }
        uint64_t v16 = *(void *)(a1 + 272);
        uint64_t v17 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
        if ((v17 & 0x80000000) != 0) {
          uint64_t v18 = (uint64_t *)(*(void *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v18 = (uint64_t *)(*(void *)(v16 + 272) + 8 * v17);
        }
        uint64_t v19 = *v18;
        if ((*(unsigned char *)(v19 + 3) & 1) == 0) {
          uint64_t v19 = *(void *)(v19 + 24);
        }
        uint64_t v20 = *(void *)(v19 + 8);
        if (**(_WORD **)(v20 + 16) != 51) {
          return 0;
        }
        uint64_t v21 = *(void *)(v20 + 32);
        unsigned int v22 = *(_DWORD *)(v21 + 132);
        unsigned int v23 = *(_DWORD *)(v21 + 164);
        sub_1CC73C210(v22, v16, (uint64_t)&v483);
        if (BYTE8(v484))
        {
          if (v484 > 0x40)
          {
            if (v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            unint64_t v242 = 0;
            uint64_t v243 = 0;
            uint64_t v24 = 0;
          }
          else
          {
            unint64_t v242 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484) & 0xFFFFFFFFFFFFFF00;
            uint64_t v243 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484);
            uint64_t v24 = 1;
          }
          unint64_t v25 = v243 | v242;
        }
        else
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
        }
        sub_1CC73C210(v23, *(void *)(a1 + 272), (uint64_t)&v483);
        if (BYTE8(v484))
        {
          if (v484 > 0x40)
          {
            if (v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            unint64_t v246 = 0;
            uint64_t v247 = 0;
            uint64_t v244 = 0;
          }
          else
          {
            unint64_t v246 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484) & 0xFFFFFFFFFFFFFF00;
            uint64_t v247 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484);
            uint64_t v244 = 1;
          }
          unint64_t v245 = v247 | v246;
        }
        else
        {
          uint64_t v244 = 0;
          unint64_t v245 = 0;
        }
        uint64_t v2 = 0;
        if (!v24 || !v244 || v25 != 1 || v245) {
          return v2;
        }
        uint64_t v248 = *(_DWORD **)(v20 + 32);
        LODWORD(v478) = v248[17];
        LODWORD(v481) = v248[25];
        unsigned int v470 = v248[12];
        uint64_t v249 = a2;
        if (sub_1CBB7E5F8((void *)a1, &v478, (unsigned int *)&v481, a2, (int *)&v470))
        {
          *(void *)(v3 + 40) = *(void *)(a2 + 24);
          *(void *)(v3 + 48) = a2;
          unint64_t v471 = 129;
          LODWORD(v472) = 0;
          LODWORD(v483) = v470;
          DWORD2(v484) = 2;
          LODWORD(v485) = v478;
          LODWORD(v486) = 0;
          DWORD2(v486) = v481;
          DWORD2(v487) = 0;
          LODWORD(v488) = v22;
          int v489 = 0;
          unsigned int v490 = v23;
          int v491 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 51, &v471, 1, &v483, 5, 0);
          uint64_t v251 = v250;
        }
        else
        {
          sub_1CC73C210(v481, *(void *)(a1 + 272), (uint64_t)&v483);
          if (!BYTE8(v484)) {
            return 0;
          }
          if (v484 >= 0x41)
          {
LABEL_861:
            unint64_t v444 = v483;
            if (!v483) {
              return 0;
            }
LABEL_862:
            MEMORY[0x1D25D9CB0](v444, 0x1000C8000313F17);
            return 0;
          }
          uint64_t v259 = (uint64_t)(v483 << -(char)v484) >> -(char)v484;
          BOOL v260 = v470 == 40 || v470 == 36;
          if (v260 && v259 == 256)
          {
            if (v470 == 36) {
              int v261 = 37;
            }
            else {
              int v261 = 41;
            }
            int v262 = (int)v478;
            if ((v478 & 0x80000000) != 0
              && (uint64_t v263 = *(void *)(a1 + 272), (v478 & 0x7FFFFFFF) < *(_DWORD *)(v263 + 432)))
            {
              unint64_t v264 = *(void *)(*(void *)(v263 + 424) + 8 * (v478 & 0x7FFFFFFF));
            }
            else
            {
              unint64_t v264 = 0;
            }
            unint64_t v471 = v264;
            LODWORD(v472) = 0;
            if (v264)
            {
              unint64_t v405 = (v264 >> 3);
            }
            else if ((v264 & 4) != 0)
            {
              if ((v264 & 2) != 0) {
                unint64_t v405 = (unsigned __int16)(v264 >> 19);
              }
              else {
                unint64_t v405 = (v264 >> 19);
              }
            }
            else
            {
              unint64_t v405 = (unsigned __int16)(v264 >> 3);
            }
            uint64_t v406 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)v405);
            uint64_t v408 = *(llvm::ConstantInt **)v406;
            unsigned int v409 = *(_DWORD *)(v406 + 8);
            LODWORD(v484) = v409 >> 8;
            if (v409 >> 8 > 0x40) {
              operator new[]();
            }
            if (v409 <= 0xFF) {
              LOBYTE(v410) = 0;
            }
            else {
              unint64_t v410 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v409) + 63);
            }
            unint64_t v483 = v410;
            int v411 = llvm::ConstantInt::get(v408, (llvm::LLVMContext *)&v483, v407);
            if (v484 >= 0x41 && v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            uint64_t v412 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v471, v411);
            if ((v22 & 0x80000000) != 0
              && (uint64_t v414 = *(void *)(a1 + 272), (v22 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v414 + 432)))
            {
              v415 = *(unsigned __int8 **)(*(void *)(v414 + 424) + 8 * (v22 & 0x7FFFFFFF));
            }
            else
            {
              v415 = 0;
            }
            unint64_t v471 = (unint64_t)v415;
            LODWORD(v472) = 0;
            LODWORD(v483) = v261;
          }
          else
          {
            uint64_t v2 = 0;
            if (v470 != 38 || v259 != -1) {
              return v2;
            }
            int v262 = (int)v478;
            if ((v478 & 0x80000000) != 0
              && (uint64_t v393 = *(void *)(a1 + 272), (v478 & 0x7FFFFFFF) < *(_DWORD *)(v393 + 432)))
            {
              unint64_t v394 = *(void *)(*(void *)(v393 + 424) + 8 * (v478 & 0x7FFFFFFF));
            }
            else
            {
              unint64_t v394 = 0;
            }
            unint64_t v471 = v394;
            LODWORD(v472) = 0;
            if (v394)
            {
              unint64_t v416 = (v394 >> 3);
            }
            else if ((v394 & 4) != 0)
            {
              if ((v394 & 2) != 0) {
                unint64_t v416 = (unsigned __int16)(v394 >> 19);
              }
              else {
                unint64_t v416 = (v394 >> 19);
              }
            }
            else
            {
              unint64_t v416 = (unsigned __int16)(v394 >> 3);
            }
            uint64_t v417 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)v416);
            uint64_t v419 = *(llvm::ConstantInt **)v417;
            unsigned int v420 = *(_DWORD *)(v417 + 8);
            LODWORD(v484) = v420 >> 8;
            if (v420 >> 8 >= 0x41) {
              operator new[]();
            }
            unint64_t v483 = 0;
            uint64_t v421 = llvm::ConstantInt::get(v419, (llvm::LLVMContext *)&v483, v418);
            if (v484 >= 0x41 && v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            uint64_t v412 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v471, v421);
            if ((v22 & 0x80000000) != 0
              && (uint64_t v422 = *(void *)(a1 + 272), (v22 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v422 + 432)))
            {
              uint64_t v423 = *(unsigned __int8 **)(*(void *)(v422 + 424) + 8 * (v22 & 0x7FFFFFFF));
            }
            else
            {
              uint64_t v423 = 0;
            }
            unint64_t v471 = (unint64_t)v423;
            LODWORD(v472) = 0;
            LODWORD(v483) = 39;
          }
          DWORD2(v484) = 2;
          LODWORD(v485) = v262;
          LODWORD(v486) = 0;
          *((void *)&v486 + 1) = v412;
          *(void *)&long long v487 = v413;
          DWORD2(v487) = 1;
          LODWORD(v488) = v22;
          int v489 = 0;
          unsigned int v490 = v23;
          int v491 = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 51, &v471, 1, &v483, 5, 0);
          uint64_t v251 = v424;
          uint64_t v249 = a2;
        }
        uint64_t v190 = a1;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 280) + 32))(*(void *)(a1 + 280), v249);
        uint64_t v191 = *(void *)(v249 + 32);
        unsigned int v192 = *(_DWORD *)(*(void *)(v251 + 32) + 4);
        goto LABEL_787;
      }
      int v134 = *(_DWORD *)(a2 + 40);
      if ((v134 - 6) < 0xFFFFFFFD) {
        return 0;
      }
      int v135 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
      if (v135 < 0
        && (uint64_t v136 = *(void *)(a1 + 272), v137 = v135 & 0x7FFFFFFF, v137 < *(_DWORD *)(v136 + 432)))
      {
        uint64_t v138 = *(unint64_t **)(*(void *)(v136 + 424) + 8 * v137);
      }
      else
      {
        uint64_t v138 = 0;
      }
      unint64_t v483 = (unint64_t)v138;
      int v200 = sub_1CB8F1DC4(&v483);
      if (v199 == 1) {
      if (v200 != 16)
      }
        return 0;
      char v201 = 0;
      size_t v466 = (v134 - 1);
      unint64_t v202 = 1;
LABEL_427:
      char v464 = v201;
      uint64_t v203 = *(void *)(a1 + 272);
      uint64_t v204 = 32 * v202;
      while (1)
      {
        uint64_t v205 = *(void *)(a2 + 32);
        uint64_t v206 = v205 + v204;
        sub_1CC73C210(*(_DWORD *)(v205 + v204 + 4), v203, (uint64_t)&v483);
        if (BYTE8(v484))
        {
          if (v484 > 0x40)
          {
            if (v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            __int16 v209 = 0;
            __int16 v210 = 0;
            uint64_t v207 = 0;
          }
          else
          {
            __int16 v209 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484) & 0xFF00;
            __int16 v210 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484);
            uint64_t v207 = 1;
          }
          unsigned __int16 v208 = v210 | v209;
        }
        else
        {
          uint64_t v207 = 0;
          unsigned __int16 v208 = 0;
        }
        sub_1CC73C210(*(_DWORD *)(v206 + 36), *(void *)(a1 + 272), (uint64_t)&v483);
        if (BYTE8(v484))
        {
          if (v484 > 0x40)
          {
            if (v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            __int16 v213 = 0;
            __int16 v214 = 0;
            uint64_t v211 = 0;
          }
          else
          {
            __int16 v213 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484) & 0xFF00;
            __int16 v214 = ((uint64_t)(v483 << -(char)v484) >> -(char)v484);
            uint64_t v211 = 1;
          }
          LOWORD(v212) = v214 | v213;
        }
        else
        {
          uint64_t v211 = 0;
          LOWORD(v212) = 0;
        }
        uint64_t v215 = *(unsigned int *)(v206 + 4);
        uint64_t v203 = *(void *)(a1 + 272);
        if ((v215 & 0x80000000) != 0) {
          uint64_t v216 = (uint64_t *)(*(void *)(v203 + 24) + 16 * (v215 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v216 = (uint64_t *)(*(void *)(v203 + 272) + 8 * v215);
        }
        uint64_t v217 = *v216;
        if ((*(unsigned char *)(v217 + 3) & 1) == 0) {
          uint64_t v217 = *(void *)(v217 + 24);
        }
        uint64_t v218 = *(void *)(v217 + 8);
        if (**(_WORD **)(v218 + 16) == 121) {
          uint64_t v219 = *(void *)(*(void *)(v218 + 32) + 48);
        }
        else {
          uint64_t v219 = 0;
        }
        uint64_t v220 = *(unsigned int *)(v206 + 36);
        if ((v220 & 0x80000000) != 0) {
          uint64_t v221 = (uint64_t *)(*(void *)(v203 + 24) + 16 * (v220 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v221 = (uint64_t *)(*(void *)(v203 + 272) + 8 * v220);
        }
        uint64_t v222 = *v221;
        if ((*(unsigned char *)(v222 + 3) & 1) == 0) {
          uint64_t v222 = *(void *)(v222 + 24);
        }
        uint64_t v223 = *(void *)(v222 + 8);
        if (**(_WORD **)(v223 + 16) == 121)
        {
          uint64_t v224 = *(void *)(*(void *)(v223 + 32) + 48);
          if (!v207)
          {
LABEL_450:
            if (!v219) {
              goto LABEL_453;
            }
          }
        }
        else
        {
          uint64_t v224 = 0;
          if (!v207) {
            goto LABEL_450;
          }
        }
        if (v211 || v224)
        {
          if (v207)
          {
            LODWORD(v225) = v208;
          }
          else
          {
            long long v227 = *(void **)(v219 + 32);
            uint64_t v226 = (llvm::detail::DoubleAPFloat *)(v219 + 32);
            if (v227 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v226, (llvm::APInt *)&v483);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v226, (uint64_t)&v483);
            }
            int v228 = &v483;
            if (v484 >= 0x41) {
              int v228 = (unint64_t *)v483;
            }
            unint64_t v225 = *v228;
            if (v484 >= 0x41 && v483) {
              MEMORY[0x1D25D9CB0]();
            }
          }
          if (v211)
          {
            LODWORD(v212) = (unsigned __int16)v212;
          }
          else
          {
            uint64_t v230 = *(void **)(v224 + 32);
            int v229 = (llvm::detail::DoubleAPFloat *)(v224 + 32);
            if (v230 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v229, (llvm::APInt *)&v483);
            }
            else {
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v229, (uint64_t)&v483);
            }
            uint64_t v231 = &v483;
            if (v484 >= 0x41) {
              uint64_t v231 = (unint64_t *)v483;
            }
            unint64_t v212 = *v231;
            if (v484 >= 0x41 && v483) {
              MEMORY[0x1D25D9CB0]();
            }
          }
          unint64_t v483 = 257;
          LODWORD(v484) = 0;
          unsigned int v232 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)0x20);
          unsigned int v233 = llvm::ConstantInt::get(v232, v225 | (v212 << 16), (const llvm::APInt *)1);
          unint64_t v471 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v483, v233);
          uint64_t v472 = v234;
          LODWORD(v473) = 1;
          unint64_t v483 = (unint64_t)&v484 + 8;
          *((void *)&v484 + 1) = 129;
          LODWORD(v485) = 0;
          *((void *)&v485 + 1) = 129;
          LODWORD(v486) = 0;
          *(void *)&long long v484 = 0x800000002;
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 74, (char *)&v484 + 8, 2, &v471, 1, 0);
          uint64_t v236 = v235;
          if ((long long *)v483 != (long long *)((char *)&v484 + 8)) {
            free((void *)v483);
          }
          llvm::MachineOperand::setReg(v205 + v204, *(_DWORD *)(*(void *)(v236 + 32) + 4));
          llvm::MachineOperand::setReg(v205 + v204 + 32, *(_DWORD *)(*(void *)(v236 + 32) + 36));
          v202 += 2;
          char v201 = 1;
          if (v202 >= v466) {
            goto LABEL_497;
          }
          goto LABEL_427;
        }
LABEL_453:
        v202 += 2;
        v204 += 64;
        if (v202 >= v466)
        {
          if (v464) {
            goto LABEL_497;
          }
          int v265 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          if (v265 < 0 && (uint64_t v266 = v265 & 0x7FFFFFFF, v266 < *(_DWORD *)(v203 + 432))) {
            uint64_t v267 = *(void **)(*(void *)(v203 + 424) + 8 * v266);
          }
          else {
            uint64_t v267 = 0;
          }
          unint64_t v478 = v267;
          uint64_t v276 = sub_1CB8F1DC4((unint64_t *)&v478);
          if (v275 == 1) {
          if (v276 != 16)
          }
            return 0;
          char v277 = 0;
          int v278 = (unint64_t *)&v484 + 1;
          unint64_t v279 = 1;
          while (2)
          {
            uint64_t v280 = *(void *)(a2 + 32);
            uint64_t v281 = *(void *)(a1 + 272);
LABEL_574:
            uint64_t v282 = v280 + 32 * v279;
            unsigned int v285 = *(_DWORD *)(v282 + 4);
            unint64_t v284 = (unsigned int *)(v282 + 4);
            uint64_t v283 = v285;
            if ((v285 & 0x80000000) != 0) {
              uint64_t v286 = (uint64_t *)(*(void *)(v281 + 24) + 16 * (v283 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v286 = (uint64_t *)(*(void *)(v281 + 272) + 8 * v283);
            }
            uint64_t v287 = *v286;
            if (v287)
            {
              if (*(unsigned char *)(v287 + 3)) {
                goto LABEL_578;
              }
              uint64_t v287 = *(void *)(v287 + 24);
              if (v287)
              {
                if ((*(unsigned char *)(v287 + 3) & 1) == 0) {
                  goto LABEL_612;
                }
LABEL_578:
                uint64_t v288 = *(void *)(v287 + 8);
              }
              else
              {
                uint64_t v288 = 0;
              }
            }
            else
            {
LABEL_612:
              uint64_t v288 = 0;
            }
            uint64_t v289 = v280 + 32 * (v279 + 1);
            unsigned int v292 = *(_DWORD *)(v289 + 4);
            uint64_t v291 = (unsigned int *)(v289 + 4);
            uint64_t v290 = v292;
            if ((v292 & 0x80000000) != 0) {
              BOOL v293 = (uint64_t *)(*(void *)(v281 + 24) + 16 * (v290 & 0x7FFFFFFF) + 8);
            }
            else {
              BOOL v293 = (uint64_t *)(*(void *)(v281 + 272) + 8 * v290);
            }
            uint64_t v294 = *v293;
            if (v294)
            {
              if (*(unsigned char *)(v294 + 3)) {
                goto LABEL_583;
              }
              uint64_t v294 = *(void *)(v294 + 24);
              if (v294)
              {
                if ((*(unsigned char *)(v294 + 3) & 1) == 0) {
                  goto LABEL_615;
                }
LABEL_583:
                uint64_t v295 = *(void *)(v294 + 8);
              }
              else
              {
                uint64_t v295 = 0;
              }
            }
            else
            {
LABEL_615:
              uint64_t v295 = 0;
            }
            if (**(_WORD **)(v288 + 16) == 313 && **(_WORD **)(v295 + 16) == 313)
            {
              uint64_t v296 = (uint64_t *)((v283 & 0x80000000) != 0
                               ? *(void *)(v281 + 24) + 16 * (v283 & 0x7FFFFFFF) + 8
                               : *(void *)(v281 + 272) + 8 * v283);
              uint64_t v297 = *v296;
              if (v297)
              {
                while ((*(unsigned char *)(v297 + 3) & 1) != 0)
                {
                  uint64_t v297 = *(void *)(v297 + 24);
                  if (!v297) {
                    goto LABEL_608;
                  }
                }
                while (1)
                {
                  uint64_t v297 = *(void *)(v297 + 24);
                  if (!v297) {
                    break;
                  }
                  if ((*(unsigned char *)(v297 + 3) & 1) == 0) {
                    goto LABEL_608;
                  }
                }
                uint64_t v298 = (uint64_t *)((v290 & 0x80000000) != 0
                                 ? *(void *)(v281 + 24) + 16 * (v290 & 0x7FFFFFFF) + 8
                                 : *(void *)(v281 + 272) + 8 * v290);
                uint64_t v299 = *v298;
                if (v299)
                {
                  while ((*(unsigned char *)(v299 + 3) & 1) != 0)
                  {
                    uint64_t v299 = *(void *)(v299 + 24);
                    if (!v299) {
                      goto LABEL_608;
                    }
                  }
                  while (1)
                  {
                    uint64_t v299 = *(void *)(v299 + 24);
                    if (!v299) {
                      break;
                    }
                    if ((*(unsigned char *)(v299 + 3) & 1) == 0) {
                      goto LABEL_608;
                    }
                  }
                  uint64_t v300 = *(void *)(*(void *)(v288 + 32) + 48);
                  if (*(_DWORD *)(*(void *)(v295 + 32) + 48)
                     - *(void *)(*(void *)(v288 + 32) + 48) == 2
                    && ((v300 + 3) & 0x1FFFFFFFCLL) == v300)
                  {
                    uint64_t v465 = v278;
                    BOOL v302 = *(llvm::MachineFunction **)(v3 + 8);
                    uint64_t v303 = *(void *)(*(void *)(v3 + 16) + 8);
                    int v304 = *(unsigned __int8 **)(v3 + 32);
                    unint64_t v471 = (unint64_t)v304;
                    uint64_t v459 = v300;
                    uint64_t v461 = v302;
                    if (v304)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v471, v304, 2);
                      BOOL v302 = v461;
                    }
                    unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v302, v303 + 15024, (unsigned __int8 **)&v471, 0);
                    if (!v471) {
                      goto LABEL_625;
                    }
                    uint64_t v353 = MachineInstr;
                    int v354 = *(unsigned __int8 *)v471;
                    if ((v354 - 4) > 0x1E)
                    {
                      if ((v354 - 3) >= 0xFFFFFFFE) {
                        unint64_t v358 = v471;
                      }
                      else {
                        unint64_t v358 = 0;
                      }
                      if ((v354 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v356 = v358 + 8;
                        goto LABEL_693;
                      }
                      if (v354 == 3) {
                        *(void *)(v471 + 8) = 0;
                      }
                    }
                    else if ((*(unsigned char *)(v471 + 1) & 0x7F) == 2 || *(_DWORD *)(v471 + 12))
                    {
                      uint64_t v355 = *(void *)(v471 + 16);
                      if ((v355 & 4) != 0)
                      {
                        unint64_t v356 = v355 & 0xFFFFFFFFFFFFFFF8;
                        if (v356)
                        {
LABEL_693:
                          unint64_t v483 = (unint64_t)&v471;
                          sub_1CC5FA668(v356 + 16, &v483);
                          unint64_t MachineInstr = v353;
                        }
                      }
                    }
LABEL_625:
                    uint64_t v306 = *(unint64_t **)(v3 + 48);
                    uint64_t v307 = *(void *)(*(void *)(v3 + 40) + 40);
                    *((void *)MachineInstr + 3) = v307;
                    uint64_t v308 = *(void *)(v307 + 32);
                    uint64_t v309 = *((unsigned int *)MachineInstr + 10);
                    uint64_t v310 = MachineInstr;
                    if (v309)
                    {
                      uint64_t v346 = *((void *)MachineInstr + 4);
                      uint64_t v347 = *(void *)(v308 + 40);
                      uint64_t v348 = 32 * v309;
                      do
                      {
                        if (!*(unsigned char *)v346)
                        {
                          uint64_t v349 = *(unsigned int *)(v346 + 4);
                          if ((int)v349 >= 0) {
                            int v350 = (uint64_t *)(*(void *)(v347 + 272) + 8 * v349);
                          }
                          else {
                            int v350 = (uint64_t *)(*(void *)(v347 + 24) + 16 * (v349 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v351 = *v350;
                          if (*v350)
                          {
                            uint64_t v352 = *(void *)(v351 + 16);
                            *(void *)(v351 + 16) = v346;
                            *(void *)(v346 + 16) = v352;
                            if (*(unsigned char *)(v346 + 3))
                            {
                              *(void *)(v346 + 24) = v351;
                            }
                            else
                            {
                              *(void *)(v346 + 24) = 0;
                              int v350 = (uint64_t *)(v352 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v346 + 16) = v346;
                            *(void *)(v346 + 24) = 0;
                          }
                          uint64_t *v350 = v346;
                        }
                        v346 += 32;
                        v348 -= 32;
                      }
                      while (v348);
                    }
                    uint64_t v311 = *(void *)(v308 + 728);
                    if (v311) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v311 + 24))(v311, v310);
                    }
                    unint64_t v312 = *v306 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)uint64_t v310 = v312 | *(void *)v310 & 7;
                    *((void *)v310 + 1) = v306;
                    *(void *)(v312 + 8) = v310;
                    *uint64_t v306 = *v306 & 7 | (unint64_t)v310;
                    uint64_t v313 = *(void *)(v3 + 56);
                    if (v313) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v313 + 24))(v313, v310);
                    }
                    uint64_t v314 = *(void *)(a1 + 272);
                    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v314, "", 0);
                    uint64_t v316 = v314;
                    unint64_t v317 = IncompleteVirtualRegister & 0x7FFFFFFF;
                    *(void *)(*(void *)(v316 + 24) + 16 * v317) = 4;
                    unint64_t v318 = *(unsigned int *)(v316 + 432);
                    if (v317 >= v318)
                    {
                      unint64_t v319 = v317 + 1;
                      uint64_t v320 = *(void *)(v316 + 440);
                      if (v317 >= *(unsigned int *)(v316 + 436)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      int v321 = *(_DWORD *)(v316 + 432);
                      if (v319 != v318)
                      {
                        v322 = (void *)(*(void *)(v316 + 424) + 8 * *(unsigned int *)(v316 + 432));
                        uint64_t v323 = ~v317 + v318;
                        do
                          *v322++ = v320;
                        while (!__CFADD__(v323++, 1));
                        int v321 = *(_DWORD *)(v316 + 432);
                      }
                      *(_DWORD *)(v316 + 432) = v321 + v319 - v318;
                    }
                    *(void *)(*(void *)(v316 + 424) + 8 * v317) = 257;
                    uint64_t v325 = *(void *)(v316 + 8);
                    if (v325)
                    {
                      int v357 = IncompleteVirtualRegister;
                      (*(void (**)(uint64_t))(*(void *)v325 + 24))(v325);
                      int IncompleteVirtualRegister = v357;
                    }
                    *(void *)&long long v484 = 0;
                    *uint64_t v465 = 0;
                    v465[1] = 0;
                    LODWORD(v483) = 0x1000000;
                    HIDWORD(v483) = IncompleteVirtualRegister;
                    llvm::MachineInstr::addOperand(v310, v461, (const llvm::MachineOperand *)&v483);
                    LODWORD(v483) = 1;
                    *(void *)&long long v484 = 0;
                    *((void *)&v484 + 1) = v459;
                    llvm::MachineInstr::addOperand(v310, v461, (const llvm::MachineOperand *)&v483);
                    unint64_t v471 = (unint64_t)v461;
                    uint64_t v472 = v310;
                    LODWORD(v473) = 1;
                    unint64_t v483 = (unint64_t)v465;
                    *((void *)&v484 + 1) = 129;
                    LODWORD(v485) = 0;
                    *((void *)&v485 + 1) = 129;
                    LODWORD(v486) = 0;
                    *(void *)&long long v484 = 0x800000002;
                    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 74, v465, 2, &v471, 1, 0);
                    uint64_t v327 = v326;
                    if ((unint64_t *)v483 != v465) {
                      free((void *)v483);
                    }
                    uint64_t v328 = *v284;
                    unsigned int v329 = *(_DWORD *)(*(void *)(v327 + 32) + 4);
                    unint64_t v330 = *(void **)(a1 + 272);
                    uint64_t v460 = (*(uint64_t (**)(void))(**(void **)(*v330 + 16) + 176))(*(void *)(*v330 + 16));
                    uint64_t v462 = v327;
                    if ((v328 & 0x80000000) != 0) {
                      uint64_t v331 = (uint64_t *)(v330[3] + 16 * (v328 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v331 = (uint64_t *)(v330[34] + 8 * v328);
                    }
                    uint64_t v332 = *v331;
                    if (*v331)
                    {
                      do
                      {
                        uint64_t v333 = *(void *)(v332 + 24);
                        if (v329 - 1 <= 0x3FFFFFFE) {
                          llvm::MachineOperand::substPhysReg((unsigned int *)v332, v329, v460);
                        }
                        else {
                          llvm::MachineOperand::setReg(v332, v329);
                        }
                        uint64_t v332 = v333;
                      }
                      while (v333);
                    }
                    long long v334 = *(void **)(a1 + 272);
                    uint64_t v335 = v334[3];
                    uint64_t v336 = *(void *)(v335 + 16 * (v328 & 0x7FFFFFFF));
                    if ((v336 & 4) == 0)
                    {
                      unint64_t v337 = v336 & 0xFFFFFFFFFFFFFFF8;
                      if (v337) {
                        *(void *)(v335 + 16 * (v329 & 0x7FFFFFFF)) = v337;
                      }
                    }
                    uint64_t v338 = *v291;
                    unsigned int v339 = *(_DWORD *)(*(void *)(v462 + 32) + 36);
                    uint64_t v463 = (*(uint64_t (**)(void))(**(void **)(*v334 + 16) + 176))(*(void *)(*v334 + 16));
                    if ((v338 & 0x80000000) != 0) {
                      long long v340 = (uint64_t *)(v334[3] + 16 * (v338 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      long long v340 = (uint64_t *)(v334[34] + 8 * v338);
                    }
                    uint64_t v341 = *v340;
                    if (*v340)
                    {
                      do
                      {
                        uint64_t v342 = *(void *)(v341 + 24);
                        if (v339 - 1 <= 0x3FFFFFFE) {
                          llvm::MachineOperand::substPhysReg((unsigned int *)v341, v339, v463);
                        }
                        else {
                          llvm::MachineOperand::setReg(v341, v339);
                        }
                        uint64_t v341 = v342;
                      }
                      while (v342);
                    }
                    uint64_t v343 = *(void *)(*(void *)(a1 + 272) + 24);
                    uint64_t v344 = *(void *)(v343 + 16 * (v338 & 0x7FFFFFFF));
                    if ((v344 & 4) == 0)
                    {
                      unint64_t v345 = v344 & 0xFFFFFFFFFFFFFFF8;
                      if (v345) {
                        *(void *)(v343 + 16 * (v339 & 0x7FFFFFFF)) = v345;
                      }
                    }
                    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v288);
                    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v295);
                    v279 += 2;
                    char v277 = 1;
                    int v278 = v465;
                    if (v279 < v466) {
                      continue;
                    }
LABEL_497:
                    uint64_t v241 = *(void (**)(void))(**(void **)(a1 + 280) + 40);
LABEL_788:
                    v241();
                    return 1;
                  }
                }
              }
            }
            break;
          }
LABEL_608:
          v279 += 2;
          if (v279 >= v466)
          {
            if (v277) {
              goto LABEL_497;
            }
            return 0;
          }
          goto LABEL_574;
        }
      }
    }
    if (v4 == 127)
    {
      unsigned int v143 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
      if ((v143 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v144 = *(void *)(a1 + 272);
      uint64_t v145 = v143 & 0x7FFFFFFF;
      unint64_t v146 = *(unsigned int *)(v144 + 432);
      if ((v143 & 0x7FFFFFFF) >= v146) {
        return 0;
      }
      uint64_t v147 = *(void *)(v144 + 424);
      unint64_t v148 = *(void *)(v147 + 8 * v145);
      if (v148 == 129 || v148 == 257)
      {
        uint64_t v359 = *(void *)(*(void *)(v144 + 24) + 16 * v145 + 8);
        if (!v359) {
          return 0;
        }
        if ((*(unsigned char *)(v359 + 3) & 1) == 0)
        {
          uint64_t v359 = *(void *)(v359 + 24);
          if (!v359 || (*(unsigned char *)(v359 + 3) & 1) == 0) {
            return 0;
          }
        }
        uint64_t v360 = *(void *)(v359 + 8);
        if (!v360) {
          return 0;
        }
        if (**(_WORD **)(v360 + 16) != 127) {
          return 0;
        }
        if (*(_DWORD *)(v360 + 40) != 3) {
          return 0;
        }
        uint64_t v361 = *(void *)(v360 + 32);
        int v362 = *(_DWORD *)(v361 + 36);
        sub_1CC73C210(*(_DWORD *)(v361 + 68), v144, (uint64_t)&v483);
        if (!BYTE8(v484)) {
          return 0;
        }
        if (v484 >= 0x41)
        {
          unint64_t v444 = v483;
          if (!v483) {
            return 0;
          }
          goto LABEL_862;
        }
        uint64_t v363 = (uint64_t)(v483 << -(char)v484) >> -(char)v484;
        if ((unint64_t)(v363 - 5) > 3)
        {
          if (v148 == 257 && v363 == 16)
          {
            unint64_t v471 = 129;
            LODWORD(v472) = 0;
            uint64_t v434 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)0x10);
            unsigned int v436 = *(llvm::ConstantInt **)v434;
            unsigned int v437 = *(_DWORD *)(v434 + 8);
            LODWORD(v484) = v437 >> 8;
            if (v437 >> 8 >= 0x41) {
              operator new[]();
            }
            unint64_t v483 = 0;
            int v438 = llvm::ConstantInt::get(v436, (llvm::LLVMContext *)&v483, v435);
            if (v484 >= 0x41 && v483) {
              MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
            }
            BOOL v439 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v471, v438);
            uint64_t v441 = v440;
            unint64_t v471 = 129;
            LODWORD(v472) = 0;
            LODWORD(v483) = v362;
            DWORD2(v484) = 0;
            uint64_t v2 = 1;
            uint64_t v442 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 119, &v471, 1, &v483, 1, 0);
            LODWORD(v471) = v143;
            LODWORD(v472) = 1;
            unint64_t v483 = (unint64_t)v439;
            *(void *)&long long v484 = v441;
            DWORD2(v484) = 1;
            *(void *)&long long v485 = v442;
            *((void *)&v485 + 1) = v443;
            LODWORD(v486) = 1;
            (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 76, &v471, 1, &v483, 2, 0);
            goto LABEL_752;
          }
          return 0;
        }
        unint64_t v471 = v148;
        LODWORD(v472) = 0;
        LODWORD(v483) = *(_DWORD *)(*(void *)(a2 + 32) + 36);
        DWORD2(v484) = 0;
        unint64_t v478 = (void *)v148;
        LODWORD(v479) = 0;
        unint64_t v364 = v363 - 4;
        uint64_t v365 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)(v148 >> 3));
        uint64_t v366 = llvm::ConstantInt::get(v365, v364, (const llvm::APInt *)1);
        *(void *)&long long v485 = (*(uint64_t (**)(uint64_t, void **, void *))(*(void *)v3 + 16))(v3, &v478, v366);
        *((void *)&v485 + 1) = v367;
        LODWORD(v486) = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, 127, &v471, 1, &v483, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
        LODWORD(v478) = v143;
        LODWORD(v479) = 1;
        LODWORD(v483) = *(_DWORD *)(*(void *)(v368 + 32) + 4);
        DWORD2(v484) = 0;
        uint64_t v481 = v148;
        int v482 = 0;
        uint64_t v369 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)(v148 >> 3));
        uint64_t v371 = *(llvm::ConstantInt **)v369;
        unsigned int v372 = *(_DWORD *)(v369 + 8);
        LODWORD(v472) = v372 >> 8;
        if (v372 >> 8 > 0x40) {
          operator new[]();
        }
        if (v372 <= 0xFF) {
          LOBYTE(v373) = 0;
        }
        else {
          unint64_t v373 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v372) + 63);
        }
        unint64_t v471 = v373 & 4;
        uint64_t v374 = llvm::ConstantInt::get(v371, (llvm::LLVMContext *)&v471, v370);
        if (v472 >= 0x41 && v471) {
          MEMORY[0x1D25D9CB0](v471, 0x1000C8000313F17);
        }
        *(void *)&long long v485 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v3 + 16))(v3, &v481, v374);
        *((void *)&v485 + 1) = v375;
        uint64_t v2 = 1;
        LODWORD(v486) = 1;
        uint8x8_t v163 = (llvm::MachineInstr *)a2;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, 127, &v478, 1, &v483, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
      }
      else
      {
        if (v148 != 513) {
          return 0;
        }
        unint64_t v149 = v143 & 0x7FFFFFFF;
        if (v149 >= v146) {
          return 0;
        }
        if (*(void *)(v147 + 8 * v149) != 513) {
          return 0;
        }
        uint64_t v150 = *(void *)(*(void *)(v144 + 24) + 16 * v149 + 8);
        if (!v150) {
          return 0;
        }
        uint8x8_t v151 = *(void ******)(a1 + 248);
        if ((*(unsigned char *)(v150 + 3) & 1) == 0)
        {
          uint64_t v150 = *(void *)(v150 + 24);
          if (!v150 || (*(unsigned char *)(v150 + 3) & 1) == 0) {
            return 0;
          }
        }
        uint64_t v152 = *(void *)(v150 + 8);
        if (!v152) {
          return 0;
        }
        if (**(_WORD **)(v152 + 16) != 127) {
          return 0;
        }
        if (*(_DWORD *)(v152 + 40) != 3) {
          return 0;
        }
        uint64_t v153 = *(void *)(v152 + 32);
        int v154 = *(_DWORD *)(v153 + 36);
        sub_1CC73C210(*(_DWORD *)(v153 + 68), v144, (uint64_t)&v483);
        if (!BYTE8(v484)) {
          return 0;
        }
        char v155 = v484;
        if (v484 >= 0x41)
        {
          unint64_t v444 = v483;
          if (!v483) {
            return 0;
          }
          goto LABEL_862;
        }
        unint64_t v156 = v483;
        uint64_t v157 = *(void *)(a1 + 272);
        LOWORD(v471) = 0;
        LODWORD(v483) = v154;
        uint64_t v2 = 0;
        if (!sub_1CBA0DC10((uint64_t)&v471, v157, (unsigned int *)&v483)) {
          return v2;
        }
        uint64_t v158 = (uint64_t)(v156 << -v155) >> -v155;
        if (v158 > 63) {
          return v2;
        }
        unint64_t v159 = 1 << v158;
        if (1 << v158 != 0x100000000 << v158 >> 32) {
          return 0;
        }
        unint64_t v160 = sub_1CBB7ED5C(v143, *(void *)(a1 + 272));
        if (!(_BYTE)v160) {
          return 0;
        }
        if (HIDWORD(v160) == 1 && (sub_1CBB7EE84() & 1) == 0)
        {
          uint64_t v447 = *(void *)(a1 + 272);
          uint64_t v448 = *(void *)(v447 + 24);
          uint64_t v449 = *(void *)(v448 + 16 * v149 + 8);
          if ((*(unsigned char *)(v449 + 3) & 0x81) != 0)
          {
            do
              uint64_t v449 = *(void *)(v449 + 24);
            while ((*(_DWORD *)v449 & 0x81000000) != 0);
          }
          uint64_t v450 = *(void *)(*(void *)(v449 + 8) + 32);
          unsigned int v451 = *(_DWORD *)(v450 + 36);
          if (v451 == v143) {
            unsigned int v451 = *(_DWORD *)(v450 + 68);
          }
          uint64_t v452 = v451;
          if ((v451 & 0x80000000) != 0) {
            long long v453 = (uint64_t *)(v448 + 16 * (v451 & 0x7FFFFFFF) + 8);
          }
          else {
            long long v453 = (uint64_t *)(*(void *)(v447 + 272) + 8 * v451);
          }
          uint64_t v454 = *v453;
          if (v454
            && ((*(unsigned char *)(v454 + 3) & 1) != 0
             || (uint64_t v454 = *(void *)(v454 + 24)) != 0 && (*(unsigned char *)(v454 + 3) & 1) != 0))
          {
            uint64_t v455 = *(void *)(v454 + 8);
          }
          else
          {
            uint64_t v455 = 0;
          }
          unint64_t v483 = (unint64_t)&v484 + 8;
          *(void *)&long long v484 = 0x200000000;
          sub_1CBA0E058((uint64_t)&v483, 2uLL, 0);
          if (sub_1CBB7EED8(v455, *(void *)(*(void *)(a1 + 272) + 24), *(void *)(*(void *)(a1 + 272) + 272), (_DWORD *)v483))
          {
            uint64_t v456 = *(void *)(a1 + 272);
            long long v457 = (uint64_t *)((v452 & 0x80000000) != 0
                             ? *(void *)(v456 + 24) + 16 * (v452 & 0x7FFFFFFF) + 8
                             : *(void *)(v456 + 272) + 8 * v452);
            uint64_t v458 = *v457;
            if (v458)
            {
              while ((*(unsigned char *)(v458 + 3) & 1) != 0)
              {
                uint64_t v458 = *(void *)(v458 + 24);
                if (!v458) {
                  goto LABEL_935;
                }
              }
              while (1)
              {
                uint64_t v458 = *(void *)(v458 + 24);
                if (!v458) {
                  break;
                }
                if ((*(unsigned char *)(v458 + 3) & 1) == 0) {
                  goto LABEL_935;
                }
              }
              if ((long long *)v483 != (long long *)((char *)&v484 + 8)) {
                free((void *)v483);
              }
              return 0;
            }
          }
LABEL_935:
          if ((long long *)v483 != (long long *)((char *)&v484 + 8)) {
            free((void *)v483);
          }
        }
        uint64_t v2 = 1;
        LODWORD(v471) = v143;
        LODWORD(v472) = 1;
        LODWORD(v483) = v154;
        DWORD2(v484) = 0;
        *(void *)&long long v485 = 0;
        LODWORD(v486) = 3;
        unint64_t v478 = (void *)513;
        LODWORD(v479) = 0;
        int v161 = llvm::ConstantInt::get((llvm::ConstantInt *)(****v151[1] + 1984), v159, (const llvm::APInt *)1);
        *((void *)&v486 + 1) = ((uint64_t (*)(void *****, void **, void *))(*v151)[2])(v151, &v478, v161);
        *(void *)&long long v487 = v162;
        DWORD2(v487) = 1;
        uint64_t v488 = 0;
        int v489 = 3;
        uint8x8_t v163 = (llvm::MachineInstr *)a2;
        ((void (*)(void *****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v151)[4])(v151, 308, &v471, 1, &v483, 4, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
      }
      uint64_t v376 = v163;
LABEL_753:
      llvm::MachineInstr::eraseFromParent(v376);
      return v2;
    }
    if (v4 != 166) {
      return v2;
    }
    if ((~*(unsigned __int16 *)(a2 + 44) & 0x570) != 0) {
      return 0;
    }
    unsigned int v31 = 0;
    char v32 = 0;
    uint64_t v33 = *(unsigned __int16 *)(a2 + 44);
    unsigned int v34 = *(_DWORD **)(a2 + 32);
    int v35 = v34[1];
    unsigned int v36 = v34[9];
    unsigned int v37 = v34[17];
    int v38 = v34[25];
    unint64_t v478 = v480;
    uint64_t v479 = 0x800000000;
    while (1)
    {
      uint64_t v39 = *(void *)(a1 + 272);
      if ((v36 & 0x80000000) != 0) {
        uint64_t v40 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v40 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v36);
      }
      uint64_t v41 = *v40;
      if (!v41) {
        goto LABEL_490;
      }
      if ((*(unsigned char *)(v41 + 3) & 1) == 0)
      {
        uint64_t v41 = *(void *)(v41 + 24);
        if (!v41 || (*(unsigned char *)(v41 + 3) & 1) == 0) {
          goto LABEL_490;
        }
      }
      uint64_t v42 = *(void *)(v41 + 8);
      if (!v42 || **(_WORD **)(v42 + 16) != 163 || *(_DWORD *)(v42 + 40) != 3) {
        goto LABEL_490;
      }
      uint64_t v43 = (uint64_t *)((v36 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v36);
      if ((uint64_t v44 = *v43) == 0
        || (uint64_t v45 = *(void *)(v42 + 32),
            uint64_t v46 = *(unsigned int *)(v45 + 36),
            uint64_t v47 = *(unsigned int *)(v45 + 68),
            (*(unsigned char *)(v44 + 3) & 1) == 0)
        && ((uint64_t v44 = *(void *)(v44 + 24)) == 0 || (*(unsigned char *)(v44 + 3) & 1) == 0)
        || (uint64_t v48 = *(void *)(v44 + 8)) == 0)
      {
LABEL_490:
        if ((v32 & 1) == 0) {
          goto LABEL_804;
        }
LABEL_491:
        if (v31 >= HIDWORD(v479)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v478 + v31) = v36;
        LODWORD(v479) = v479 + 1;
        goto LABEL_493;
      }
      if ((~*(unsigned __int16 *)(v48 + 44) & 0x570) != 0) {
        goto LABEL_804;
      }
      uint64_t v49 = (uint64_t *)((v36 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v36);
      uint64_t v50 = *v49;
      if (!v50) {
        goto LABEL_804;
      }
      while ((*(unsigned char *)(v50 + 3) & 1) != 0)
      {
        uint64_t v50 = *(void *)(v50 + 24);
        if (!v50) {
          goto LABEL_804;
        }
      }
      while (1)
      {
        uint64_t v50 = *(void *)(v50 + 24);
        if (!v50) {
          break;
        }
        if ((*(unsigned char *)(v50 + 3) & 1) == 0) {
          goto LABEL_804;
        }
      }
      if ((v46 & 0x80000000) != 0) {
        unint64_t v51 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v51 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v46);
      }
      uint64_t v52 = *v51;
      if (v52
        && ((*(unsigned char *)(v52 + 3) & 1) != 0 || (uint64_t v52 = *(void *)(v52 + 24)) != 0 && (*(unsigned char *)(v52 + 3) & 1) != 0)
        && (uint64_t v53 = *(void *)(v52 + 8)) != 0
        && **(unsigned __int16 **)(v53 + 16) - 337 < 2)
      {
        LOBYTE(v54) = 1;
      }
      else
      {
        if ((v46 & 0x80000000) != 0) {
          unint64_t v55 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v55 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v46);
        }
        uint64_t v54 = *v55;
        if (!v54) {
          goto LABEL_91;
        }
        if ((*(unsigned char *)(v54 + 3) & 1) == 0)
        {
          uint64_t v54 = *(void *)(v54 + 24);
          if (!v54) {
            goto LABEL_91;
          }
          if ((*(unsigned char *)(v54 + 3) & 1) == 0) {
            goto LABEL_90;
          }
        }
        uint64_t v54 = *(void *)(v54 + 8);
        if (v54)
        {
          if (**(_WORD **)(v54 + 16) != 178) {
            goto LABEL_90;
          }
          uint64_t v54 = *(unsigned int *)(*(void *)(v54 + 32) + 36);
          if (v54)
          {
            unsigned int v56 = (uint64_t *)((v54 & 0x80000000) != 0
                            ? *(void *)(v39 + 24) + 16 * (v54 & 0x7FFFFFFF) + 8
                            : *(void *)(v39 + 272) + 8 * v54);
            uint64_t v54 = *v56;
            if (v54)
            {
              if (*(unsigned char *)(v54 + 3)) {
                goto LABEL_86;
              }
              uint64_t v54 = *(void *)(v54 + 24);
              if (v54)
              {
                if (*(unsigned char *)(v54 + 3))
                {
LABEL_86:
                  uint64_t v54 = *(void *)(v54 + 8);
                  if (v54) {
                    LOBYTE(v54) = **(unsigned __int16 **)(v54 + 16) - 337 < 2;
                  }
                  goto LABEL_91;
                }
LABEL_90:
                LOBYTE(v54) = 0;
              }
            }
          }
        }
      }
LABEL_91:
      if ((v47 & 0x80000000) != 0) {
        uint64_t v57 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v57 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v47);
      }
      uint64_t v58 = *v57;
      if (v58)
      {
        if (*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3))
        {
          uint64_t v59 = *(void *)(v58 + 8);
          if (v59)
          {
            if (**(unsigned __int16 **)(v59 + 16) - 337 < 2)
            {
              LOBYTE(v60) = 1;
              goto LABEL_116;
            }
          }
        }
      }
      if ((v47 & 0x80000000) != 0) {
        uint64_t v61 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v61 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v47);
      }
      uint64_t v60 = *v61;
      if (v60)
      {
        if ((*(unsigned char *)(v60 + 3) & 1) == 0)
        {
          uint64_t v60 = *(void *)(v60 + 24);
          if (!v60) {
            goto LABEL_116;
          }
          if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
            goto LABEL_115;
          }
        }
        uint64_t v60 = *(void *)(v60 + 8);
        if (!v60) {
          goto LABEL_116;
        }
        if (**(_WORD **)(v60 + 16) != 178) {
          goto LABEL_115;
        }
        uint64_t v60 = *(unsigned int *)(*(void *)(v60 + 32) + 36);
        if (v60)
        {
          uint64_t v62 = (uint64_t *)((v60 & 0x80000000) != 0
                          ? *(void *)(v39 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8
                          : *(void *)(v39 + 272) + 8 * v60);
          uint64_t v60 = *v62;
          if (v60)
          {
            if (*(unsigned char *)(v60 + 3)) {
              goto LABEL_111;
            }
            uint64_t v60 = *(void *)(v60 + 24);
            if (v60)
            {
              if (*(unsigned char *)(v60 + 3))
              {
LABEL_111:
                uint64_t v60 = *(void *)(v60 + 8);
                if (v60) {
                  LOBYTE(v60) = **(unsigned __int16 **)(v60 + 16) - 337 < 2;
                }
                goto LABEL_116;
              }
LABEL_115:
              LOBYTE(v60) = 0;
            }
          }
        }
      }
LABEL_116:
      if (v54) {
        goto LABEL_117;
      }
      unsigned int v64 = (uint64_t *)((v46 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v46);
      uint64_t v65 = *v64;
      if (v65)
      {
        if (*(unsigned char *)(v65 + 3) & 1) != 0 || (uint64_t v65 = *(void *)(v65 + 24)) != 0 && (*(unsigned char *)(v65 + 3))
        {
          uint64_t v66 = *(void *)(v65 + 8);
          if (v66)
          {
            if (**(_WORD **)(v66 + 16) == 177 && *(_DWORD *)(v66 + 40) == 2)
            {
              uint64_t v67 = *(unsigned int *)(*(void *)(v66 + 32) + 36);
              uint64_t v68 = (uint64_t *)((v67 & 0x80000000) != 0
                              ? *(void *)(v39 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8
                              : *(void *)(v39 + 272) + 8 * v67);
              uint64_t v69 = *v68;
              if (v69)
              {
                if ((*(unsigned char *)(v69 + 3) & 1) != 0
                  || (uint64_t v69 = *(void *)(v69 + 24)) != 0 && (*(unsigned char *)(v69 + 3) & 1) != 0)
                {
                  uint64_t v70 = *(void *)(v69 + 8);
                  if (v70)
                  {
                    if (**(unsigned __int16 **)(v70 + 16) - 337 < 2) {
                      goto LABEL_117;
                    }
                  }
                }
              }
              unsigned int v71 = (uint64_t *)((v67 & 0x80000000) != 0
                              ? *(void *)(v39 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8
                              : *(void *)(v39 + 272) + 8 * v67);
              uint64_t v72 = *v71;
              if (v72)
              {
                if ((*(unsigned char *)(v72 + 3) & 1) != 0
                  || (uint64_t v72 = *(void *)(v72 + 24)) != 0 && (*(unsigned char *)(v72 + 3) & 1) != 0)
                {
                  uint64_t v73 = *(void *)(v72 + 8);
                  if (v73)
                  {
                    if (**(_WORD **)(v73 + 16) == 178)
                    {
                      uint64_t v74 = *(unsigned int *)(*(void *)(v73 + 32) + 36);
                      if (v74)
                      {
                        uint64_t v75 = (uint64_t *)((v74 & 0x80000000) != 0
                                        ? *(void *)(v39 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8
                                        : *(void *)(v39 + 272) + 8 * v74);
                        uint64_t v76 = *v75;
                        if (v76)
                        {
                          if ((*(unsigned char *)(v76 + 3) & 1) != 0
                            || (uint64_t v76 = *(void *)(v76 + 24)) != 0 && (*(unsigned char *)(v76 + 3) & 1) != 0)
                          {
                            uint64_t v77 = *(void *)(v76 + 8);
                            if (v77)
                            {
                              if (**(unsigned __int16 **)(v77 + 16) - 337 < 2) {
                                goto LABEL_117;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v46 & 0x80000000) != 0) {
        unsigned int v78 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v46 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v78 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v46);
      }
      uint64_t v79 = *v78;
      if (!v79
        || (*(unsigned char *)(v79 + 3) & 1) == 0 && ((uint64_t v79 = *(void *)(v79 + 24)) == 0 || (*(unsigned char *)(v79 + 3) & 1) == 0)
        || (uint64_t v80 = *(void *)(v79 + 8)) == 0
        || **(_WORD **)(v80 + 16) != 178
        || (uint64_t v81 = *(unsigned int *)(*(void *)(v80 + 32) + 36), !v81)
        || ((v81 & 0x80000000) == 0
          ? (unint64_t v82 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v81))
          : (unint64_t v82 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8)),
            (uint64_t v83 = *v82) == 0
         || (*(unsigned char *)(v83 + 3) & 1) == 0 && ((uint64_t v83 = *(void *)(v83 + 24)) == 0 || (*(unsigned char *)(v83 + 3) & 1) == 0)
         || (uint64_t v84 = *(void *)(v83 + 8)) == 0
         || **(_WORD **)(v84 + 16) != 177
         || *(_DWORD *)(v84 + 40) != 2))
      {
LABEL_182:
        BOOL v63 = 0;
        goto LABEL_183;
      }
      uint64_t v85 = *(unsigned int *)(*(void *)(v84 + 32) + 36);
      unint64_t v86 = (uint64_t *)((v85 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v85);
      if ((uint64_t v87 = *v86) != 0
        && ((*(unsigned char *)(v87 + 3) & 1) != 0 || (uint64_t v87 = *(void *)(v87 + 24)) != 0 && (*(unsigned char *)(v87 + 3) & 1) != 0)
        && (uint64_t v88 = *(void *)(v87 + 8)) != 0
        && **(unsigned __int16 **)(v88 + 16) - 337 < 2)
      {
LABEL_117:
        BOOL v63 = 1;
      }
      else
      {
        if ((v85 & 0x80000000) != 0) {
          unint64_t v89 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v89 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v85);
        }
        uint64_t v90 = *v89;
        if (!v90) {
          goto LABEL_182;
        }
        if ((*(unsigned char *)(v90 + 3) & 1) == 0)
        {
          uint64_t v90 = *(void *)(v90 + 24);
          if (!v90 || (*(unsigned char *)(v90 + 3) & 1) == 0) {
            goto LABEL_182;
          }
        }
        uint64_t v91 = *(void *)(v90 + 8);
        if (!v91) {
          goto LABEL_182;
        }
        if (**(_WORD **)(v91 + 16) != 178) {
          goto LABEL_182;
        }
        uint64_t v92 = *(unsigned int *)(*(void *)(v91 + 32) + 36);
        if (!v92) {
          goto LABEL_182;
        }
        uint64_t v93 = (uint64_t *)((v92 & 0x80000000) != 0
                        ? *(void *)(v39 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8
                        : *(void *)(v39 + 272) + 8 * v92);
        uint64_t v94 = *v93;
        if (!v94) {
          goto LABEL_182;
        }
        if ((*(unsigned char *)(v94 + 3) & 1) == 0)
        {
          uint64_t v94 = *(void *)(v94 + 24);
          if (!v94 || (*(unsigned char *)(v94 + 3) & 1) == 0) {
            goto LABEL_182;
          }
        }
        uint64_t v95 = *(void *)(v94 + 8);
        if (!v95) {
          goto LABEL_182;
        }
        BOOL v63 = **(unsigned __int16 **)(v95 + 16) - 337 < 2;
      }
LABEL_183:
      if (v60) {
        goto LABEL_184;
      }
      unint64_t v97 = (uint64_t *)((v47 & 0x80000000) != 0
                      ? *(void *)(v39 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8
                      : *(void *)(v39 + 272) + 8 * v47);
      uint64_t v98 = *v97;
      if (v98)
      {
        if (*(unsigned char *)(v98 + 3) & 1) != 0 || (uint64_t v98 = *(void *)(v98 + 24)) != 0 && (*(unsigned char *)(v98 + 3))
        {
          uint64_t v99 = *(void *)(v98 + 8);
          if (v99)
          {
            if (**(_WORD **)(v99 + 16) == 177 && *(_DWORD *)(v99 + 40) == 2)
            {
              uint64_t v100 = *(unsigned int *)(*(void *)(v99 + 32) + 36);
              unint64_t v101 = (uint64_t *)((v100 & 0x80000000) != 0
                               ? *(void *)(v39 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8
                               : *(void *)(v39 + 272) + 8 * v100);
              uint64_t v102 = *v101;
              if (v102)
              {
                if ((*(unsigned char *)(v102 + 3) & 1) != 0
                  || (uint64_t v102 = *(void *)(v102 + 24)) != 0 && (*(unsigned char *)(v102 + 3) & 1) != 0)
                {
                  uint64_t v103 = *(void *)(v102 + 8);
                  if (v103)
                  {
                    if (**(unsigned __int16 **)(v103 + 16) - 337 < 2) {
                      goto LABEL_184;
                    }
                  }
                }
              }
              unsigned int v104 = (uint64_t *)((v100 & 0x80000000) != 0
                               ? *(void *)(v39 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8
                               : *(void *)(v39 + 272) + 8 * v100);
              uint64_t v105 = *v104;
              if (v105)
              {
                if ((*(unsigned char *)(v105 + 3) & 1) != 0
                  || (uint64_t v105 = *(void *)(v105 + 24)) != 0 && (*(unsigned char *)(v105 + 3) & 1) != 0)
                {
                  uint64_t v106 = *(void *)(v105 + 8);
                  if (v106)
                  {
                    if (**(_WORD **)(v106 + 16) == 178)
                    {
                      uint64_t v107 = *(unsigned int *)(*(void *)(v106 + 32) + 36);
                      if (v107)
                      {
                        unint64_t v108 = (uint64_t *)((v107 & 0x80000000) != 0
                                         ? *(void *)(v39 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8
                                         : *(void *)(v39 + 272) + 8 * v107);
                        uint64_t v109 = *v108;
                        if (v109)
                        {
                          if ((*(unsigned char *)(v109 + 3) & 1) != 0
                            || (uint64_t v109 = *(void *)(v109 + 24)) != 0 && (*(unsigned char *)(v109 + 3) & 1) != 0)
                          {
                            uint64_t v110 = *(void *)(v109 + 8);
                            if (v110)
                            {
                              if (**(unsigned __int16 **)(v110 + 16) - 337 < 2)
                              {
LABEL_184:
                                BOOL v96 = 1;
                                goto LABEL_250;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v47 & 0x80000000) != 0) {
        BOOL v111 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
      }
      else {
        BOOL v111 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v47);
      }
      uint64_t v112 = *v111;
      if (!v112) {
        goto LABEL_249;
      }
      if ((*(unsigned char *)(v112 + 3) & 1) == 0)
      {
        uint64_t v112 = *(void *)(v112 + 24);
        if (!v112 || (*(unsigned char *)(v112 + 3) & 1) == 0) {
          goto LABEL_249;
        }
      }
      uint64_t v113 = *(void *)(v112 + 8);
      if (!v113) {
        goto LABEL_249;
      }
      if (**(_WORD **)(v113 + 16) != 178) {
        goto LABEL_249;
      }
      uint64_t v114 = *(unsigned int *)(*(void *)(v113 + 32) + 36);
      if (!v114) {
        goto LABEL_249;
      }
      int v115 = (uint64_t *)((v114 & 0x80000000) != 0
                       ? *(void *)(v39 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8
                       : *(void *)(v39 + 272) + 8 * v114);
      uint64_t v116 = *v115;
      if (!v116) {
        goto LABEL_249;
      }
      if ((*(unsigned char *)(v116 + 3) & 1) == 0)
      {
        uint64_t v116 = *(void *)(v116 + 24);
        if (!v116 || (*(unsigned char *)(v116 + 3) & 1) == 0) {
          goto LABEL_249;
        }
      }
      uint64_t v117 = *(void *)(v116 + 8);
      if (!v117 || **(_WORD **)(v117 + 16) != 177 || *(_DWORD *)(v117 + 40) != 2) {
        goto LABEL_249;
      }
      uint64_t v118 = *(unsigned int *)(*(void *)(v117 + 32) + 36);
      if ((v118 & 0x80000000) != 0) {
        unint64_t v119 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
      }
      else {
        unint64_t v119 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v118);
      }
      uint64_t v120 = *v119;
      if (v120)
      {
        if (*(unsigned char *)(v120 + 3) & 1) != 0 || (uint64_t v120 = *(void *)(v120 + 24)) != 0 && (*(unsigned char *)(v120 + 3))
        {
          uint64_t v121 = *(void *)(v120 + 8);
          if (v121)
          {
            if (**(unsigned __int16 **)(v121 + 16) - 337 < 2) {
              goto LABEL_184;
            }
          }
        }
      }
      unsigned int v122 = (uint64_t *)((v118 & 0x80000000) != 0
                       ? *(void *)(v39 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8
                       : *(void *)(v39 + 272) + 8 * v118);
      uint64_t v123 = *v122;
      if (!v123) {
        goto LABEL_249;
      }
      if ((*(unsigned char *)(v123 + 3) & 1) == 0)
      {
        uint64_t v123 = *(void *)(v123 + 24);
        if (!v123 || (*(unsigned char *)(v123 + 3) & 1) == 0) {
          goto LABEL_249;
        }
      }
      if ((uint64_t v124 = *(void *)(v123 + 8)) != 0
        && **(_WORD **)(v124 + 16) == 178
        && (uint64_t v125 = *(unsigned int *)(*(void *)(v124 + 32) + 36), v125)
        && ((v125 & 0x80000000) == 0
          ? (unint64_t v126 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v125))
          : (unint64_t v126 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v125 & 0x7FFFFFFF) + 8)),
            (uint64_t v127 = *v126) != 0
         && ((*(unsigned char *)(v127 + 3) & 1) != 0 || (uint64_t v127 = *(void *)(v127 + 24)) != 0 && (*(unsigned char *)(v127 + 3) & 1) != 0)
         && (uint64_t v128 = *(void *)(v127 + 8)) != 0))
      {
        BOOL v96 = **(unsigned __int16 **)(v128 + 16) - 337 < 2;
      }
      else
      {
LABEL_249:
        BOOL v96 = 0;
      }
LABEL_250:
      v32 |= v60 | v54;
      if (v63)
      {
        if (v479 >= (unint64_t)HIDWORD(v479)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v478 + v479) = v46;
        unsigned int v31 = v479 + 1;
        LODWORD(v479) = v479 + 1;
        if (!v96) {
          goto LABEL_258;
        }
      }
      else
      {
        if (!v96)
        {
          if ((v32 & 1) == 0) {
            goto LABEL_804;
          }
          unsigned int v31 = v479;
          goto LABEL_491;
        }
        unsigned int v31 = v479;
      }
      if (v31 >= HIDWORD(v479)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v478 + v31) = v47;
      unsigned int v31 = v479 + 1;
      LODWORD(v479) = v479 + 1;
      if (v63)
      {
        if ((v32 & 1) == 0)
        {
LABEL_804:
          uint64_t v2 = 0;
LABEL_805:
          if (v478 != v480) {
            free(v478);
          }
          return v2;
        }
LABEL_493:
        if (v35 < 0 && (uint64_t v237 = *(void *)(a1 + 272), (v35 & 0x7FFFFFFFu) < *(_DWORD *)(v237 + 432)))
        {
          uint64_t v238 = v33;
          int v239 = v35;
          uint64_t v240 = *(unsigned __int8 **)(*(void *)(v237 + 424) + 8 * (v35 & 0x7FFFFFFF));
        }
        else
        {
          uint64_t v238 = v33;
          int v239 = v35;
          uint64_t v240 = 0;
        }
        uint64_t v268 = *(void *)(a2 + 24);
        long long v487 = 0u;
        long long v486 = 0u;
        long long v485 = 0u;
        long long v484 = 0u;
        uint64_t v269 = *(void *)(v268 + 32);
        unint64_t v483 = (unint64_t)&unk_1F261CD58;
        *(void *)&long long v484 = v269;
        *(void *)&long long v485 = *(void *)(v269 + 40);
        *((void *)&v484 + 1) = (*(uint64_t (**)(void))(**(void **)(v269 + 16) + 104))(*(void *)(v269 + 16));
        uint64_t v481 = 0;
        if (*((void *)&v485 + 1))
        {
          int v425 = **((unsigned char **)&v485 + 1);
          if ((v425 - 4) > 0x1E)
          {
            if ((v425 - 3) >= 0xFFFFFFFE) {
              uint64_t v431 = *((void *)&v485 + 1);
            }
            else {
              uint64_t v431 = 0;
            }
            if ((v425 - 3) <= 0xFFFFFFFD)
            {
              if (v425 == 3) {
                *(void *)(*((void *)&v485 + 1) + 8) = 0;
              }
              goto LABEL_555;
            }
            unint64_t v432 = v431 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v485 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v485 + 1) + 12)) {
              goto LABEL_555;
            }
            uint64_t v446 = *(void *)(*((void *)&v485 + 1) + 16);
            if ((v446 & 4) == 0) {
              goto LABEL_555;
            }
            unint64_t v432 = v446 & 0xFFFFFFFFFFFFFFF8;
            if (!v432) {
              goto LABEL_555;
            }
          }
          unint64_t v471 = (unint64_t)&v485 + 8;
          sub_1CC5FA668(v432 + 16, &v471);
          *((void *)&v485 + 1) = v481;
          if (v481) {
            llvm::MetadataTracking::retrack((uint64_t)&v481, (unsigned __int8 *)v481, (uint64_t)&v485 + 8);
          }
        }
        else
        {
LABEL_555:
          *((void *)&v485 + 1) = 0;
        }
        *(void *)&long long v486 = *(void *)(a2 + 24);
        *((void *)&v486 + 1) = a2;
        *(void *)&long long v487 = 0;
        if ((long long *)(a2 + 56) != (long long *)((char *)&v485 + 8))
        {
          if (!*((void *)&v485 + 1)) {
            goto LABEL_558;
          }
          int v426 = **((unsigned char **)&v485 + 1);
          if ((v426 - 4) <= 0x1E)
          {
            if ((*(unsigned char *)(*((void *)&v485 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v485 + 1) + 12)) {
              goto LABEL_558;
            }
            uint64_t v427 = *(void *)(*((void *)&v485 + 1) + 16);
            if ((v427 & 4) == 0) {
              goto LABEL_558;
            }
            unint64_t v428 = v427 & 0xFFFFFFFFFFFFFFF8;
            if (!v428) {
              goto LABEL_558;
            }
            goto LABEL_825;
          }
          if ((v426 - 3) >= 0xFFFFFFFE) {
            uint64_t v433 = *((void *)&v485 + 1);
          }
          else {
            uint64_t v433 = 0;
          }
          if ((v426 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v428 = v433 + 8;
LABEL_825:
            unint64_t v471 = (unint64_t)&v485 + 8;
            sub_1CC5FA668(v428 + 16, &v471);
            goto LABEL_558;
          }
          if (v426 == 3) {
            *(void *)(*((void *)&v485 + 1) + 8) = 0;
          }
LABEL_558:
          *((void *)&v485 + 1) = *(void *)(a2 + 56);
          if (*((void *)&v485 + 1)) {
            llvm::MetadataTracking::track((uint64_t)&v485 + 8, *((unsigned __int8 **)&v485 + 1), 2);
          }
        }
        for (unsigned int i = v479; v479; unsigned int i = v479)
        {
          int v271 = *((_DWORD *)v478 + i - 1);
          LODWORD(v479) = i - 1;
          uint64_t v481 = (uint64_t)v240;
          int v482 = 0;
          LODWORD(v471) = v271;
          LODWORD(v473) = 0;
          unsigned int v474 = v37;
          int v475 = 0;
          int v476 = v38;
          int v477 = 0;
          sub_1CC739C54(&v483, 0xA6u, (unint64_t *)&v481, 1, (int *)&v471, 3, v238 | 0x100000000);
          int v38 = *(_DWORD *)(*(void *)(v272 + 32) + 4);
        }
        LODWORD(v481) = v239;
        int v482 = 1;
        LODWORD(v471) = v38;
        LODWORD(v473) = 0;
        (*(void (**)(unint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(v483 + 32))(&v483, 19, &v481, 1, &v471, 1, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        unint64_t v483 = (unint64_t)&unk_1F261CD58;
        if (*((void *)&v485 + 1))
        {
          int v386 = **((unsigned char **)&v485 + 1);
          if ((v386 - 4) > 0x1E)
          {
            if ((v386 - 3) >= 0xFFFFFFFE) {
              uint64_t v403 = *((void *)&v485 + 1);
            }
            else {
              uint64_t v403 = 0;
            }
            if ((v386 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v404 = v403 + 8;
              goto LABEL_759;
            }
            if (v386 == 3) {
              *(void *)(*((void *)&v485 + 1) + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(*((void *)&v485 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v485 + 1) + 12))
          {
            uint64_t v445 = *(void *)(*((void *)&v485 + 1) + 16);
            if ((v445 & 4) != 0)
            {
              unint64_t v404 = v445 & 0xFFFFFFFFFFFFFFF8;
              if (v404)
              {
LABEL_759:
                unint64_t v471 = (unint64_t)&v485 + 8;
                sub_1CC5FA668(v404 + 16, &v471);
              }
            }
          }
        }
        uint64_t v2 = 1;
        goto LABEL_805;
      }
LABEL_258:
      if (v63) {
        unsigned int v36 = v47;
      }
      else {
        unsigned int v36 = v46;
      }
    }
  }
  if (**(unsigned __int16 **)(a2 + 16) > 0x32u)
  {
    if (v4 != 51)
    {
      if (v4 != 66) {
        return v2;
      }
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = (const char *)*(unsigned int *)(v26 + 36);
      uint64_t v28 = (const char *)*(unsigned int *)(v26 + 68);
      uint64_t v29 = *(void *)(a1 + 264);
      sub_1CC6DEE8C(v29, v27, (uint64_t)&v483);
      sub_1CC6DEE8C(v29, v28, (uint64_t)&v471);
      if (v484 >= 0x41) {
        operator new[]();
      }
      if (v484) {
        BOOL v30 = (v471 | v483) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v484;
      }
      else {
        BOOL v30 = 1;
      }
      if (v474 >= 0x41 && v473) {
        MEMORY[0x1D25D9CB0](v473, 0x1000C8000313F17);
      }
      if (v472 >= 0x41 && v471) {
        MEMORY[0x1D25D9CB0](v471, 0x1000C8000313F17);
      }
      if (v485 >= 0x41 && *((void *)&v484 + 1)) {
        MEMORY[0x1D25D9CB0](*((void *)&v484 + 1), 0x1000C8000313F17);
      }
      if (v484 >= 0x41 && v483) {
        MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
      }
      if (!v30) {
        return 0;
      }
      sub_1CC73C210(v28, *(void *)(a1 + 272), (uint64_t)&v483);
      if (BYTE8(v484))
      {
        if (v484 < 0x41)
        {
LABEL_535:
          uint64_t v2 = 1;
          LODWORD(v471) = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          LODWORD(v472) = 1;
          LODWORD(v483) = v27;
          DWORD2(v484) = 0;
          LODWORD(v485) = v28;
          LODWORD(v486) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 45, &v471, 1, &v483, 2, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          return v2;
        }
        if (v483) {
          MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
        }
      }
      uint64_t v252 = *(void *)(a1 + 272);
      if ((v27 & 0x80000000) != 0) {
        uint64_t v253 = (uint64_t *)(*(void *)(v252 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v253 = (uint64_t *)(*(void *)(v252 + 272) + 8 * (void)v27);
      }
      uint64_t v254 = *v253;
      if (v254)
      {
        if (*(unsigned char *)(v254 + 3) & 1) != 0 || (uint64_t v254 = *(void *)(v254 + 24)) != 0 && (*(unsigned char *)(v254 + 3))
        {
          uint64_t v255 = *(void *)(v254 + 8);
          if (v255)
          {
            if (**(_WORD **)(v255 + 16) == 127 && *(_DWORD *)(v255 + 40) == 3)
            {
              sub_1CC73C210(*(_DWORD *)(*(void *)(v255 + 32) + 68), v252, (uint64_t)&v483);
              if (BYTE8(v484))
              {
                if (v484 >= 0x41)
                {
                  if (v483) {
                    MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
                  }
                }
                else
                {
                  uint64_t v256 = (uint64_t)(v483 << -(char)v484) >> -(char)v484;
                  BOOL v257 = v256 < 5;
                  if (v256 >= 5) {
                    int v258 = (int)v28;
                  }
                  else {
                    int v258 = (int)v27;
                  }
                  if (v257) {
                    LODWORD(v27) = v28;
                  }
                  LODWORD(v28) = v258;
                }
              }
            }
          }
        }
      }
      goto LABEL_535;
    }
    *(void *)(v3 + 40) = *(void *)(a2 + 24);
    *(void *)(v3 + 48) = a2;
    unsigned int v139 = *(_DWORD **)(a2 + 32);
    LODWORD(v478) = v139[12];
    int v140 = v139[1];
    LODWORD(v481) = v139[17];
    unsigned int v470 = v139[25];
    int v141 = v139[33];
    unsigned int v142 = v139[41];
    if (sub_1CBB7E5F8((void *)a1, &v481, &v470, a2, (int *)&v478))
    {
      LODWORD(v471) = v140;
      LODWORD(v472) = 1;
      LODWORD(v483) = v478;
      DWORD2(v484) = 2;
      LODWORD(v485) = v481;
      LODWORD(v486) = 0;
      DWORD2(v486) = v470;
      DWORD2(v487) = 0;
      LODWORD(v488) = v141;
      int v489 = 0;
      unsigned int v490 = v142;
      int v491 = 0;
      goto LABEL_734;
    }
    sub_1CC73C210(v470, *(void *)(a1 + 272), (uint64_t)&v483);
    if (!BYTE8(v484)) {
      return 0;
    }
    if (v484 < 0x41)
    {
      uint64_t v193 = (uint64_t)(v483 << -(char)v484) >> -(char)v484;
      BOOL v194 = v478 == 40 || v478 == 36;
      if (v194 && v193 == 256)
      {
        if (v478 == 36) {
          int v195 = 37;
        }
        else {
          int v195 = 41;
        }
        int v196 = v481;
        if ((v481 & 0x80000000) != 0
          && (uint64_t v197 = *(void *)(a1 + 272), (v481 & 0x7FFFFFFF) < *(_DWORD *)(v197 + 432)))
        {
          unint64_t v198 = *(void *)(*(void *)(v197 + 424) + 8 * (v481 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v198 = 0;
        }
        unint64_t v471 = v198;
        LODWORD(v472) = 0;
        if (v198)
        {
          unint64_t v377 = (v198 >> 3);
        }
        else if ((v198 & 4) != 0)
        {
          if ((v198 & 2) != 0) {
            unint64_t v377 = (unsigned __int16)(v198 >> 19);
          }
          else {
            unint64_t v377 = (v198 >> 19);
          }
        }
        else
        {
          unint64_t v377 = (unsigned __int16)(v198 >> 3);
        }
        uint64_t v378 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)v377);
        long long v380 = *(llvm::ConstantInt **)v378;
        unsigned int v381 = *(_DWORD *)(v378 + 8);
        LODWORD(v484) = v381 >> 8;
        if (v381 >> 8 > 0x40) {
          operator new[]();
        }
        if (v381 <= 0xFF) {
          LOBYTE(v382) = 0;
        }
        else {
          unint64_t v382 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v381) + 63);
        }
        unint64_t v483 = v382;
        uint64_t v383 = llvm::ConstantInt::get(v380, (llvm::LLVMContext *)&v483, v379);
        if (v484 >= 0x41 && v483) {
          MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
        }
        uint64_t v384 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v471, v383);
        LODWORD(v471) = v140;
        LODWORD(v472) = 1;
        LODWORD(v483) = v195;
      }
      else
      {
        uint64_t v2 = 0;
        if (v478 != 38 || v193 != -1) {
          return v2;
        }
        int v196 = v481;
        if ((v481 & 0x80000000) != 0
          && (uint64_t v273 = *(void *)(a1 + 272), (v481 & 0x7FFFFFFF) < *(_DWORD *)(v273 + 432)))
        {
          unint64_t v274 = *(void *)(*(void *)(v273 + 424) + 8 * (v481 & 0x7FFFFFFF));
        }
        else
        {
          unint64_t v274 = 0;
        }
        unint64_t v471 = v274;
        LODWORD(v472) = 0;
        if (v274)
        {
          unint64_t v387 = (v274 >> 3);
        }
        else if ((v274 & 4) != 0)
        {
          if ((v274 & 2) != 0) {
            unint64_t v387 = (unsigned __int16)(v274 >> 19);
          }
          else {
            unint64_t v387 = (v274 >> 19);
          }
        }
        else
        {
          unint64_t v387 = (unsigned __int16)(v274 >> 3);
        }
        uint64_t v388 = llvm::IntegerType::get(****(llvm::IntegerType *****)(v3 + 8), (llvm::LLVMContext *)v387);
        uint64_t v390 = *(llvm::ConstantInt **)v388;
        unsigned int v391 = *(_DWORD *)(v388 + 8);
        LODWORD(v484) = v391 >> 8;
        if (v391 >> 8 >= 0x41) {
          operator new[]();
        }
        unint64_t v483 = 0;
        int v392 = llvm::ConstantInt::get(v390, (llvm::LLVMContext *)&v483, v389);
        if (v484 >= 0x41 && v483) {
          MEMORY[0x1D25D9CB0](v483, 0x1000C8000313F17);
        }
        uint64_t v384 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v3 + 16))(v3, &v471, v392);
        LODWORD(v471) = v140;
        LODWORD(v472) = 1;
        LODWORD(v483) = 39;
      }
      DWORD2(v484) = 2;
      LODWORD(v485) = v196;
      LODWORD(v486) = 0;
      *((void *)&v486 + 1) = v384;
      *(void *)&long long v487 = v385;
      DWORD2(v487) = 1;
      LODWORD(v488) = v141;
      int v489 = 0;
      unsigned int v490 = v142;
      int v491 = 0;
LABEL_734:
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v3 + 32))(v3, 51, &v471, 1, &v483, 5, 0);
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
      return 1;
    }
    goto LABEL_861;
  }
  if (v4 != 45)
  {
    if (v4 != 46) {
      return v2;
    }
    uint64_t v5 = *(_DWORD **)(a2 + 32);
    int v6 = v5[1];
    if ((v6 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v7 = *(void *)(a1 + 272);
    if ((v6 & 0x7FFFFFFFu) >= *(_DWORD *)(v7 + 432)) {
      return 0;
    }
    uint64_t v8 = *(unsigned __int16 *)(a2 + 44);
    uint64_t v9 = *(void *)(*(void *)(v7 + 424) + 8 * (v6 & 0x7FFFFFFF));
    if (v9 != 257 && v9 != 129) {
      return 0;
    }
    uint64_t v10 = v5[9];
    if ((v10 & 0x80000000) != 0) {
      uint64_t v11 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v11 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v10);
    }
    uint64_t v12 = *v11;
    if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
      uint64_t v12 = *(void *)(v12 + 24);
    }
    uint64_t v13 = *(void *)(v12 + 8);
    if (**(_WORD **)(v13 + 16) != 47) {
      return 0;
    }
    uint64_t v14 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(void *)(v7 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(void *)(v7 + 272) + 8 * v10);
    uint64_t v15 = *v14;
    if (!v15) {
      return 0;
    }
    while ((*(unsigned char *)(v15 + 3) & 1) != 0)
    {
      uint64_t v15 = *(void *)(v15 + 24);
      if (!v15) {
        return 0;
      }
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v15 + 24);
      if (!v15) {
        break;
      }
      uint64_t v2 = 0;
      if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
        return v2;
      }
    }
    uint64_t v164 = *(void *)(a1 + 288);
    int v165 = *(_DWORD *)(v164 + 264);
    if (!v165) {
      goto LABEL_751;
    }
    uint64_t v166 = *(void *)(v13 + 24);
    uint64_t v167 = *(void *)(v164 + 248);
    unsigned int v168 = v165 - 1;
    uint64_t v169 = ((v166 >> 4) ^ (v166 >> 9)) & v168;
    uint64_t v170 = *(void *)(v167 + 16 * v169);
    if (v166 == v170)
    {
LABEL_377:
      uint64_t v173 = *(void **)(v167 + 16 * v169 + 8);
      if (v173)
      {
        int v174 = 0;
        do
        {
          uint64_t v173 = (void *)*v173;
          ++v174;
        }
        while (v173);
LABEL_741:
        uint64_t v395 = *(void *)(a2 + 24);
        uint64_t v396 = ((v395 >> 4) ^ (v395 >> 9)) & v168;
        uint64_t v397 = *(void *)(v167 + 16 * v396);
        if (v395 == v397)
        {
LABEL_745:
          uint64_t v400 = *(void **)(v167 + 16 * v396 + 8);
          if (v400)
          {
            int v401 = 0;
            do
            {
              uint64_t v400 = (void *)*v400;
              ++v401;
            }
            while (v400);
LABEL_750:
            if (v174 == v401)
            {
LABEL_751:
              uint64_t v2 = 1;
              LODWORD(v471) = v5[1];
              LODWORD(v472) = 1;
              uint64_t v402 = *(void *)(v13 + 32);
              LODWORD(v483) = *(_DWORD *)(v402 + 36);
              DWORD2(v484) = 0;
              LODWORD(v485) = *(_DWORD *)(v402 + 68);
              LODWORD(v486) = 0;
              DWORD2(v486) = v5[17];
              DWORD2(v487) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, 57, &v471, 1, &v483, 3, v8 | 0x100000000);
LABEL_752:
              uint64_t v376 = (llvm::MachineInstr *)a2;
              goto LABEL_753;
            }
            return 0;
          }
        }
        else
        {
          int v398 = 1;
          while (v397 != -4096)
          {
            int v399 = v396 + v398++;
            uint64_t v396 = v399 & v168;
            uint64_t v397 = *(void *)(v167 + 16 * v396);
            if (v395 == v397) {
              goto LABEL_745;
            }
          }
        }
        int v401 = 0;
        goto LABEL_750;
      }
    }
    else
    {
      int v171 = 1;
      while (v170 != -4096)
      {
        int v172 = v169 + v171++;
        uint64_t v169 = v172 & v168;
        uint64_t v170 = *(void *)(v167 + 16 * v169);
        if (v166 == v170) {
          goto LABEL_377;
        }
      }
    }
    int v174 = 0;
    goto LABEL_741;
  }
  unint64_t v129 = *(_DWORD **)(a2 + 32);
  int v130 = v129[1];
  if (v130 < 0
    && (uint64_t v131 = *(void *)(a1 + 272), v132 = v130 & 0x7FFFFFFF, v132 < *(_DWORD *)(v131 + 432)))
  {
    unint64_t v478 = *(void **)(*(void *)(v131 + 424) + 8 * v132);
    uint64_t v481 = 513;
    if (v478 == (void *)513) {
      unsigned int v133 = 4;
    }
    else {
      unsigned int v133 = 8;
    }
  }
  else
  {
    unint64_t v478 = 0;
    uint64_t v481 = 513;
    unsigned int v133 = 8;
  }
  unsigned int v470 = v133;
  uint64_t v175 = (uint64_t)(v129 + 8);
  unint64_t v176 = v129 + 16;
  unsigned int v177 = v129[9];
  unsigned int v178 = v129[17];
  unint64_t v483 = (unint64_t)&v478;
  *(void *)&long long v484 = &v481;
  *((void *)&v484 + 1) = a1;
  *(void *)&long long v485 = &v470;
  *((void *)&v485 + 1) = a2;
  *(void *)&long long v486 = v3;
  unsigned __int8 v469 = 0;
  uint64_t v2 = sub_1CBB82B14((unint64_t **)&v483, (uint64_t)(v129 + 8), &v469, 0);
  if (v2) {
    unsigned int v177 = v129[9];
  }
  if (sub_1CBB82B14((unint64_t **)&v483, (uint64_t)(v129 + 16), &v469, v469))
  {
    unsigned int v178 = v129[17];
    uint64_t v2 = 1;
  }
  sub_1CC73C210(v178, *(void *)(a1 + 272), (uint64_t)&v471);
  if ((_BYTE)v473)
  {
    if (v472 < 0x41) {
      return v2;
    }
    if (v471) {
      MEMORY[0x1D25D9CB0](v471, 0x1000C8000313F17);
    }
  }
  uint64_t v179 = *(void *)(a1 + 272);
  unsigned int v180 = v177;
  if ((v177 & 0x80000000) != 0) {
    int v181 = (uint64_t *)(*(void *)(v179 + 24) + 16 * (v177 & 0x7FFFFFFF) + 8);
  }
  else {
    int v181 = (uint64_t *)(*(void *)(v179 + 272) + 8 * v177);
  }
  uint64_t v182 = *v181;
  if (v182)
  {
    uint64_t v183 = v470;
    if (*(unsigned char *)(v182 + 3) & 1) != 0 || (uint64_t v182 = *(void *)(v182 + 24)) != 0 && (*(unsigned char *)(v182 + 3))
    {
      uint64_t v184 = *(void *)(v182 + 8);
      if (v184)
      {
        if (**(_WORD **)(v184 + 16) == 127 && *(_DWORD *)(v184 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(*(void *)(v184 + 32) + 68), v179, (uint64_t)&v471);
          if ((_BYTE)v473)
          {
            if (v472 >= 0x41)
            {
              if (v471) {
                MEMORY[0x1D25D9CB0](v471, 0x1000C8000313F17);
              }
              return v2;
            }
            if ((uint64_t)(v471 << -(uint64_t)v472) >> -(uint64_t)v472 > v183) {
              return v2;
            }
            uint64_t v185 = *(void *)(a1 + 272);
            if ((v178 & 0x80000000) != 0) {
              uint64_t v186 = (uint64_t *)(*(void *)(v185 + 24) + 16 * (v178 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v186 = (uint64_t *)(*(void *)(v185 + 272) + 8 * v178);
            }
            uint64_t v187 = *v186;
            if (v187)
            {
              uint64_t v188 = v470;
              if ((*(unsigned char *)(v187 + 3) & 1) != 0
                || (uint64_t v187 = *(void *)(v187 + 24)) != 0 && (*(unsigned char *)(v187 + 3) & 1) != 0)
              {
                uint64_t v189 = *(void *)(v187 + 8);
                if (v189)
                {
                  if (**(_WORD **)(v189 + 16) == 127 && *(_DWORD *)(v189 + 40) == 3)
                  {
                    sub_1CC73C210(*(_DWORD *)(*(void *)(v189 + 32) + 68), v185, (uint64_t)&v471);
                    if ((_BYTE)v473)
                    {
                      if (v472 >= 0x41)
                      {
                        if (v471) {
                          MEMORY[0x1D25D9CB0](v471, 0x1000C8000313F17);
                        }
                      }
                      else if ((uint64_t)(v471 << -(uint64_t)v472) >> -(uint64_t)v472 <= v188)
                      {
                        return v2;
                      }
                    }
                  }
                }
              }
            }
            uint64_t v190 = a1;
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 280) + 32))(*(void *)(a1 + 280), a2);
            llvm::MachineOperand::setReg(v175, v178);
            uint64_t v191 = (uint64_t)v176;
            unsigned int v192 = v180;
LABEL_787:
            llvm::MachineOperand::setReg(v191, v192);
            uint64_t v241 = *(void (**)(void))(**(void **)(v190 + 280) + 40);
            goto LABEL_788;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t sub_1CBB82B14(unint64_t **a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (**a1 == *a1[1]) {
    return 0;
  }
  uint64_t v8 = (uint64_t *)a1[2];
  uint64_t v9 = v8[34];
  uint64_t v10 = *(unsigned int *)(a2 + 4);
  uint64_t v11 = (uint64_t *)((v10 & 0x80000000) != 0
                  ? *(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                  : *(void *)(v9 + 272) + 8 * v10);
  uint64_t v12 = *v11;
  if (!v12) {
    return 0;
  }
  while ((*(unsigned char *)(v12 + 3) & 1) != 0)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (!v12) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (!v12) {
      break;
    }
    if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v13 = (uint64_t *)((v10 & 0x80000000) != 0
                  ? *(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                  : *(void *)(v9 + 272) + 8 * v10);
  uint64_t v14 = *v13;
  if (!v14) {
    return 0;
  }
  if ((*(unsigned char *)(v14 + 3) & 1) == 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v15 = *(void *)(v14 + 8);
  if (!v15) {
    return 0;
  }
  if (**(_WORD **)(v15 + 16) != 127) {
    return 0;
  }
  if (*(_DWORD *)(v15 + 40) != 3) {
    return 0;
  }
  uint64_t v17 = *(void *)(v15 + 32);
  int v18 = *(_DWORD *)(v17 + 36);
  sub_1CC73C210(*(_DWORD *)(v17 + 68), v9, (uint64_t)&v34);
  if (!(_BYTE)v36) {
    return 0;
  }
  if (v35 >= 0x41)
  {
    if (v34) {
      MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
    }
    return 0;
  }
  uint64_t v19 = v34 << -(char)v35 >> -(char)v35;
  *a3 = 1;
  if (v19 > *(unsigned int *)a1[3] || a4)
  {
    a4 = 1;
    unint64_t v20 = 1 << v19;
    uint64_t v21 = (llvm::IntegerType *****)a1[5];
    uint64_t v22 = *((unsigned __int16 *)a1[4] + 22);
    unint64_t v23 = **a1;
    unint64_t v40 = v23;
    int v41 = 0;
    LODWORD(v34) = v18;
    int v36 = 0;
    unint64_t v32 = v23;
    int v33 = 0;
    uint64_t v24 = (llvm::LLVMContext *)(unsigned __int16)(v23 >> 3);
    unint64_t v25 = (llvm::LLVMContext *)(unsigned __int16)(v23 >> 19);
    if ((v23 & 2) == 0) {
      unint64_t v25 = (llvm::LLVMContext *)(v23 >> 19);
    }
    if ((v23 & 4) != 0) {
      uint64_t v24 = v25;
    }
    if (v23) {
      uint64_t v26 = (llvm::LLVMContext *)(v23 >> 3);
    }
    else {
      uint64_t v26 = v24;
    }
    uint64_t v27 = (llvm::ConstantInt *)llvm::IntegerType::get(***v21[1], v26);
    uint64_t v28 = llvm::ConstantInt::get(v27, v20, (const llvm::APInt *)1);
    uint64_t v37 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*v21)[2])(v21, &v32, v28);
    uint64_t v38 = v29;
    int v39 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(*v21)[4])(v21, 47, &v40, 1, &v34, 2, v22 | 0x100000000);
    uint64_t v31 = v30;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v8[35] + 32))(v8[35], a1[4]);
    llvm::MachineOperand::setReg(a2, *(_DWORD *)(*(void *)(v31 + 32) + 4));
    (*(void (**)(uint64_t, unint64_t *))(*(void *)v8[35] + 40))(v8[35], a1[4]);
  }
  return a4;
}

uint64_t sub_1CBB82E3C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v621 = *MEMORY[0x1E4F143B8];
  a4[5] = *(void *)(a2 + 24);
  a4[6] = a2;
  int v603 = v605;
  uint64_t v604 = 0x400000000;
  unsigned int v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 > 0xA2)
  {
    if (**(unsigned __int16 **)(a2 + 16) <= 0xB1u)
    {
      if (v8 == 163 || v8 == 165)
      {
        if (sub_1CBB8806C(a1[4], a2, a3)) {
          goto LABEL_996;
        }
        goto LABEL_923;
      }
      if (v8 != 166) {
        goto LABEL_923;
      }
      if (sub_1CBB8806C(a1[4], a2, a3))
      {
LABEL_996:
        uint64_t v57 = 1;
        goto LABEL_924;
      }
      uint64_t v23 = a1[4];
      uint64_t v24 = *(unsigned int **)(a2 + 32);
      uint64_t v25 = v24[9];
      if ((v25 & 0x80000000) != 0) {
        uint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
      }
      uint64_t v27 = v24[17];
      uint64_t v28 = v24[25];
      uint64_t v29 = *v26;
      if (!v29
        || (*(unsigned char *)(v29 + 3) & 1) == 0 && ((uint64_t v29 = *(void *)(v29 + 24)) == 0 || (*(unsigned char *)(v29 + 3) & 1) == 0)
        || (uint64_t v30 = *(void *)(v29 + 8)) == 0
        || **(_WORD **)(v30 + 16) != 313
        || *(_DWORD *)(v30 + 40) != 2
        || *(unsigned char *)(*(void *)(v30 + 32) + 32) != 1)
      {
        sub_1CC73C210(v24[9], v23, (uint64_t)v609);
        if (v609[16] && *(_DWORD *)&v609[8] >= 0x41u)
        {
          if (*(void *)v609) {
            MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
          }
        }
        else if (!v609[16])
        {
          goto LABEL_923;
        }
      }
      if ((v27 & 0x80000000) != 0) {
        int v228 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
      }
      else {
        int v228 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v27);
      }
      uint64_t v229 = *v228;
      if (v229)
      {
        if (*(unsigned char *)(v229 + 3) & 1) != 0 || (uint64_t v229 = *(void *)(v229 + 24)) != 0 && (*(unsigned char *)(v229 + 3))
        {
          uint64_t v230 = *(void *)(v229 + 8);
          if (v230)
          {
            if (**(_WORD **)(v230 + 16) == 313
              && *(_DWORD *)(v230 + 40) == 2
              && *(unsigned char *)(*(void *)(v230 + 32) + 32) == 1)
            {
              goto LABEL_923;
            }
          }
        }
      }
      sub_1CC73C210(v27, v23, (uint64_t)v609);
      if (!v609[16] || *(_DWORD *)&v609[8] < 0x41u)
      {
        if (v609[16]) {
          goto LABEL_923;
        }
        uint64_t v231 = (uint64_t *)((v28 & 0x80000000) != 0
                         ? *(void *)(v23 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8
                         : *(void *)(v23 + 272) + 8 * v28);
        uint64_t v232 = *v231;
        if (v232)
        {
          if ((*(unsigned char *)(v232 + 3) & 1) != 0
            || (uint64_t v232 = *(void *)(v232 + 24)) != 0 && (*(unsigned char *)(v232 + 3) & 1) != 0)
          {
            uint64_t v233 = *(void *)(v232 + 8);
            if (v233)
            {
              if (**(_WORD **)(v233 + 16) == 313
                && *(_DWORD *)(v233 + 40) == 2
                && *(unsigned char *)(*(void *)(v233 + 32) + 32) == 1)
              {
                goto LABEL_923;
              }
            }
          }
        }
        sub_1CC73C210(v28, v23, (uint64_t)v609);
        if (!v609[16] || *(_DWORD *)&v609[8] < 0x41u)
        {
          if (v609[16]) {
            goto LABEL_923;
          }
          BOOL v234 = (uint64_t *)((v27 & 0x80000000) != 0
                           ? *(void *)(v23 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                           : *(void *)(v23 + 272) + 8 * v27);
          uint64_t v235 = *v234;
          if (v235)
          {
            if ((*(unsigned char *)(v235 + 3) & 1) != 0
              || (uint64_t v235 = *(void *)(v235 + 24)) != 0 && (*(unsigned char *)(v235 + 3) & 1) != 0)
            {
              uint64_t v236 = *(void *)(v235 + 8);
              if (v236)
              {
                if (**(_WORD **)(v236 + 16) == 177 && *(_DWORD *)(v236 + 40) == 2) {
                  goto LABEL_923;
                }
              }
            }
          }
          uint64_t v237 = (uint64_t)(v24 + 8);
          uint64_t v238 = v24 + 16;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
          goto LABEL_994;
        }
      }
      goto LABEL_337;
    }
    if (v8 != 178)
    {
      if (v8 == 308)
      {
        a4[5] = *(void *)(a2 + 24);
        a4[6] = a2;
        uint64_t v147 = *(void *)(a2 + 32);
        int v148 = *(_DWORD *)(v147 + 4);
        if (v148 < 0 && (uint64_t v149 = a4[3], v150 = v148 & 0x7FFFFFFF, v150 < *(_DWORD *)(v149 + 432))) {
          uint8x8_t v151 = *(void **)(*(void *)(v149 + 424) + 8 * v150);
        }
        else {
          uint8x8_t v151 = 0;
        }
        int v178 = *(unsigned __int8 *)(v147 + 80);
        if (*(unsigned char *)(v147 + 80))
        {
          int v179 = *(_DWORD *)(v147 + 36);
          if (v178 == 2) {
            uint64_t v180 = 124;
          }
          else {
            uint64_t v180 = 126;
          }
          uint64_t v597 = v151;
          LODWORD(v598) = 0;
          *(_DWORD *)unint64_t v609 = v179;
          *(_DWORD *)&v609[16] = 0;
          (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, v180, &v597, 1, v609, 1, 0);
          uint64_t v182 = v181;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
          llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 32, *(_DWORD *)(*(void *)(v182 + 32) + 4));
          *(void *)(*(void *)(a2 + 32) + 80) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
          uint64_t v147 = *(void *)(a2 + 32);
          int v183 = *(unsigned __int8 *)(v147 + 144);
          if (!*(unsigned char *)(v147 + 144))
          {
            uint64_t v57 = 1;
            goto LABEL_924;
          }
        }
        else
        {
          int v183 = *(unsigned __int8 *)(v147 + 144);
          if (!*(unsigned char *)(v147 + 144)) {
            goto LABEL_923;
          }
        }
        int v197 = *(_DWORD *)(v147 + 100);
        if (v183 == 2) {
          uint64_t v198 = 124;
        }
        else {
          uint64_t v198 = 126;
        }
        uint64_t v597 = v151;
        LODWORD(v598) = 0;
        *(_DWORD *)unint64_t v609 = v197;
        *(_DWORD *)&v609[16] = 0;
        uint64_t v57 = 1;
        (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, v198, &v597, 1, v609, 1, 0);
        uint64_t v200 = v199;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
        llvm::MachineOperand::setReg(*(void *)(a2 + 32) + 96, *(_DWORD *)(*(void *)(v200 + 32) + 4));
        *(void *)(*(void *)(a2 + 32) + 144) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
        goto LABEL_924;
      }
      if (v8 != 335) {
        goto LABEL_923;
      }
      goto LABEL_80;
    }
    uint64_t v135 = *(void *)(a2 + 24);
    uint64_t v134 = *(void *)(a2 + 32);
    uint64_t v136 = *(void *)(v135 + 32);
    uint64_t v137 = *(unsigned int *)(v134 + 4);
    uint64_t v138 = a1[4];
    uint64_t v139 = *(unsigned int *)(v134 + 36);
    if ((v139 & 0x80000000) != 0) {
      int v140 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v139 & 0x7FFFFFFF) + 8);
    }
    else {
      int v140 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v139);
    }
    uint64_t v141 = v134 + 32;
    uint64_t v142 = *v140;
    if (v142)
    {
      if (*(unsigned char *)(v142 + 3))
      {
LABEL_168:
        uint64_t v143 = *(void *)(v142 + 8);
        goto LABEL_169;
      }
      uint64_t v142 = *(void *)(v142 + 24);
      if (!v142)
      {
        uint64_t v143 = 0;
LABEL_169:
        if ((**(_WORD **)(v143 + 16) & 0xFFFE) == 0x74)
        {
          uint64_t v144 = *(unsigned int *)(v143 + 40);
          if (v144)
          {
            uint64_t v145 = *(void *)(v143 + 32);
            unint64_t v146 = (_DWORD *)(v145 + 16);
            while (*((unsigned char *)v146 - 16) != 17)
            {
              v146 += 8;
              if (!--v144) {
                goto LABEL_298;
              }
            }
            if (*v146 == 2131)
            {
              uint64_t v211 = *(unsigned int *)(v145 + 68);
              if ((v211 & 0x80000000) != 0) {
                unint64_t v212 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v212 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v211);
              }
              uint64_t v144 = *v212;
              if (!*v212) {
                goto LABEL_923;
              }
              if ((*(unsigned char *)(v144 + 3) & 1) == 0)
              {
                uint64_t v144 = *(void *)(v144 + 24);
                if (!v144 || (*(unsigned char *)(v144 + 3) & 1) == 0) {
                  goto LABEL_923;
                }
              }
              uint64_t v141 = v145 + 64;
              uint64_t v143 = *(void *)(v144 + 8);
              LODWORD(v144) = 1;
            }
            else
            {
              LODWORD(v144) = 0;
            }
LABEL_298:
            if (!v143)
            {
LABEL_923:
              uint64_t v57 = 0;
              goto LABEL_924;
            }
          }
        }
        else
        {
          LODWORD(v144) = 0;
        }
        uint64_t v219 = *(unsigned int *)(v141 + 4);
        if ((v219 & 0x80000000) != 0) {
          uint64_t v220 = (uint64_t *)(*(void *)(v138 + 24) + 16 * (v219 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v220 = (uint64_t *)(*(void *)(v138 + 272) + 8 * v219);
        }
        uint64_t v221 = *v220;
        if (!v221) {
          goto LABEL_923;
        }
        while ((*(unsigned char *)(v221 + 3) & 1) != 0)
        {
          uint64_t v221 = *(void *)(v221 + 24);
          if (!v221) {
            goto LABEL_923;
          }
        }
        while (1)
        {
          uint64_t v221 = *(void *)(v221 + 24);
          if (!v221) {
            break;
          }
          uint64_t v57 = 0;
          if ((*(unsigned char *)(v221 + 3) & 1) == 0) {
            goto LABEL_924;
          }
        }
        uint64_t v222 = (uint64_t *)((v137 & 0x80000000) != 0
                         ? *(void *)(v138 + 24) + 16 * (v137 & 0x7FFFFFFF) + 8
                         : *(void *)(v138 + 272) + 8 * v137);
        uint64_t v223 = *v222;
        if (!v223) {
          goto LABEL_923;
        }
        while ((*(unsigned char *)(v223 + 3) & 1) != 0)
        {
          uint64_t v223 = *(void *)(v223 + 24);
          if (!v223) {
            goto LABEL_923;
          }
        }
        while (1)
        {
          uint64_t v223 = *(void *)(v223 + 24);
          if (!v223) {
            break;
          }
          uint64_t v57 = 0;
          if ((*(unsigned char *)(v223 + 3) & 1) == 0) {
            goto LABEL_924;
          }
        }
        int v584 = v144;
        if (sub_1CBB87C40(v137, *(void *)(v138 + 24), *(void *)(v138 + 272))) {
          goto LABEL_923;
        }
        int v224 = *(unsigned __int16 *)(*(void *)(v136 + 8) + 1020);
        unsigned int v225 = *(unsigned __int16 *)(v143 + 44);
        if (**(_WORD **)(v143 + 16) == 335)
        {
          if (((v224 | (v225 >> 4)) & 1) == 0) {
            goto LABEL_923;
          }
        }
        else if ((v224 & 1) == 0 && (v225 & 0x7C0) != 0x7C0)
        {
          goto LABEL_923;
        }
        a4[5] = v135;
        a4[6] = a2;
        uint64_t v226 = **(unsigned __int16 **)(v143 + 16);
        if (v226 > 0x10F)
        {
          BOOL v261 = (v226 - 272) > 0x3D
              || ((1 << (v226 - 16)) & 0x20000040000000C1) == 0;
          if (v261 && v226 != 357)
          {
LABEL_685:
            char v419 = v584;
            if (v226 != 182) {
              char v419 = 1;
            }
            if ((v419 & 1) == 0) {
              goto LABEL_722;
            }
            if (v226 == 335)
            {
              if (v584)
              {
LABEL_855:
                uint64_t v57 = 0;
                goto LABEL_924;
              }
            }
            else
            {
              char v496 = v584;
              if (v226 != 51) {
                char v496 = 1;
              }
              if (v496) {
                goto LABEL_855;
              }
            }
            uint64_t v497 = a1[4];
            v498 = *(_DWORD **)(v143 + 32);
            int v575 = v498[12];
            unsigned int v590 = v498[17];
            unsigned int v581 = v498[25];
            unsigned int v499 = v498[33];
            unsigned int v500 = v498[41];
            if (sub_1CBB8BB44(v497, v499, 0) && sub_1CBB8BB44(v497, v500, 0))
            {
              unint64_t v501 = sub_1CBB88854(v499, 1, a4, v497, 0);
              unint64_t v502 = sub_1CBB88854(v500, 1, a4, v497, 0);
              uint64_t v57 = 0;
              if (!HIDWORD(v501) || !HIDWORD(v502)) {
                goto LABEL_924;
              }
              uint64_t v503 = **(unsigned __int16 **)(v143 + 16);
              uint64_t v597 = (void *)257;
              LODWORD(v598) = 0;
              *(_DWORD *)unint64_t v609 = v575;
              *(_DWORD *)&v609[16] = 2;
              *(_DWORD *)&v609[24] = v590;
              LODWORD(v611) = 0;
              int v504 = v581;
            }
            else
            {
              if (v499 != v590 && v499 != v581
                || v500 != v590 && v500 != v581
                || !sub_1CBB8BB44(v497, v499, 1)
                || !sub_1CBB8BB44(v497, v500, 1))
              {
                goto LABEL_855;
              }
              unint64_t v506 = sub_1CBB88854(v590, 1, a4, v497, 1);
              unint64_t v591 = sub_1CBB88854(v581, 1, a4, v497, 1);
              unint64_t v501 = sub_1CBB88854(v499, 1, a4, v497, 0);
              unint64_t v502 = sub_1CBB88854(v500, 1, a4, v497, 0);
              uint64_t v57 = 0;
              if (!HIDWORD(v506) || !HIDWORD(v591) || !HIDWORD(v501) || !HIDWORD(v502)) {
                goto LABEL_924;
              }
              uint64_t v503 = **(unsigned __int16 **)(v143 + 16);
              uint64_t v597 = (void *)257;
              LODWORD(v598) = 0;
              *(_DWORD *)unint64_t v609 = v575;
              *(_DWORD *)&v609[16] = 2;
              *(_DWORD *)&v609[24] = v506;
              LODWORD(v611) = 0;
              int v504 = v591;
            }
            LODWORD(v612) = v504;
            LODWORD(v614) = 0;
            DWORD2(v614) = v501;
            LODWORD(v616) = 0;
            DWORD2(v616) = v502;
            DWORD2(v617) = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, uint64_t))(*a4 + 32))(a4, v503, &v597, 1, v609, 5, *(unsigned __int16 *)(v143 + 44) | 0x100000000);
            sub_1CBA0A7C8((void *)a1[4], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v505 + 32) + 4), a3);
            uint64_t v57 = 1;
            goto LABEL_924;
          }
          goto LABEL_392;
        }
        uint64_t v227 = (v226 - 163);
        if (v227 <= 0x38)
        {
          if (((1 << (v226 + 93)) & 0x18800000000140DLL) != 0)
          {
LABEL_392:
            uint64_t v262 = *(unsigned int *)(v143 + 40);
            if (v262 <= 1)
            {
              uint64_t v281 = 0;
              *(void *)unint64_t v609 = &v609[16];
              *(void *)&v609[8] = 0x400000000;
              uint64_t v282 = &v609[16];
LABEL_577:
              uint64_t v597 = (void *)257;
              LODWORD(v598) = 0;
              (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, v226, &v597, 1, v282, v281, 0);
              uint64_t v341 = v340;
              if (v584)
              {
                int v579 = *(_DWORD *)(*((void *)v340 + 4) + 4);
                uint64_t v342 = a1[4];
                int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v342, "", 0);
                unint64_t v344 = IncompleteVirtualRegister & 0x7FFFFFFF;
                *(void *)(*(void *)(v342 + 24) + 16 * v344) = 4;
                unint64_t v345 = *(unsigned int *)(v342 + 432);
                if (v344 >= v345)
                {
                  uint64_t v346 = *(void *)(v342 + 440);
                  uint64_t v347 = v344 + 1 - v345;
                  if (v344 >= *(unsigned int *)(v342 + 436)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  int v348 = *(_DWORD *)(v342 + 432);
                  if (v347)
                  {
                    uint64_t v349 = (void *)(*(void *)(v342 + 424) + 8 * *(unsigned int *)(v342 + 432));
                    uint64_t v350 = ~v344 + v345;
                    do
                    {
                      *v349++ = v346;
                      BOOL v351 = __CFADD__(v350++, 1);
                    }
                    while (!v351);
                    int v348 = *(_DWORD *)(v342 + 432);
                  }
                  *(_DWORD *)(v342 + 432) = v348 + v347;
                }
                *(void *)(*(void *)(v342 + 424) + 8 * v344) = 257;
                uint64_t v352 = *(void *)(v342 + 8);
                if (v352)
                {
                  int v544 = IncompleteVirtualRegister;
                  (*(void (**)(uint64_t))(*(void *)v352 + 24))(v352);
                  int IncompleteVirtualRegister = v544;
                }
                LODWORD(v593) = IncompleteVirtualRegister;
                uint64_t v353 = sub_1CC7390C0(a4, 2131, (int *)&v593, 1, 0);
                uint64_t v341 = v354;
                uint64_t v598 = 0;
                uint64_t v599 = 0;
                LODWORD(v597) = 0;
                HIDWORD(v597) = v579;
                uint64_t v600 = 0;
                llvm::MachineInstr::addOperand(v354, v353, (const llvm::MachineOperand *)&v597);
              }
              *((_WORD *)v341 + 22) = *((_WORD *)v341 + 22) & 0xC | *(_WORD *)(v143 + 44) & 0xFFF3;
              sub_1CBA0A7C8((void *)a1[4], (llvm::MachineInstr *)a2, *(_DWORD *)(*((void *)v341 + 4) + 4), a3);
              uint64_t v57 = 1;
LABEL_591:
              if (*(unsigned char **)v609 != &v609[16]) {
                free(*(void **)v609);
              }
              goto LABEL_924;
            }
            uint64_t v263 = *(void *)(v143 + 32);
            uint64_t v264 = 1;
            while (1)
            {
              if (*(unsigned char *)(v263 + 32 * v264)) {
                goto LABEL_395;
              }
              uint64_t v265 = a1[4];
              uint64_t v266 = *(unsigned int *)(v263 + 32 * v264 + 4);
              uint64_t v267 = (uint64_t *)((v266 & 0x80000000) != 0
                               ? *(void *)(v265 + 24) + 16 * (v266 & 0x7FFFFFFF) + 8
                               : *(void *)(v265 + 272) + 8 * v266);
              uint64_t v268 = *v267;
              if (!v268) {
                goto LABEL_395;
              }
              if ((*(unsigned char *)(v268 + 3) & 1) == 0)
              {
                uint64_t v268 = *(void *)(v268 + 24);
                if (!v268 || (*(unsigned char *)(v268 + 3) & 1) == 0) {
                  goto LABEL_395;
                }
              }
              uint64_t v269 = *(void *)(v268 + 8);
              if (!v269) {
                goto LABEL_395;
              }
              if ((**(_WORD **)(v269 + 16) & 0xFFFE) != 0x74) {
                goto LABEL_395;
              }
              uint64_t v270 = *(unsigned int *)(v269 + 40);
              if (!v270) {
                goto LABEL_395;
              }
              uint64_t v271 = *(void *)(v269 + 32);
              uint64_t v272 = (_DWORD *)(v271 + 16);
              while (*((unsigned char *)v272 - 16) != 17)
              {
                v272 += 8;
                if (!--v270) {
                  goto LABEL_395;
                }
              }
              if (*v272 != 2131) {
                goto LABEL_395;
              }
              uint64_t v273 = *(unsigned int *)(v271 + 68);
              if ((v273 & 0x80000000) != 0) {
                unint64_t v274 = (uint64_t *)(*(void *)(v265 + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
              }
              else {
                unint64_t v274 = (uint64_t *)(*(void *)(v265 + 272) + 8 * v273);
              }
              uint64_t v275 = *v274;
              if (v275)
              {
                if (*(unsigned char *)(v275 + 3)) {
                  goto LABEL_413;
                }
                uint64_t v275 = *(void *)(v275 + 24);
                if (!v275) {
                  goto LABEL_414;
                }
                if (*(unsigned char *)(v275 + 3)) {
LABEL_413:
                }
                  uint64_t v275 = *(void *)(v275 + 8);
                else {
                  uint64_t v275 = 0;
                }
              }
LABEL_414:
              if ((v273 & 0x80000000) != 0) {
                uint64_t v276 = (uint64_t *)(*(void *)(v265 + 24) + 16 * (v273 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v276 = (uint64_t *)(*(void *)(v265 + 272) + 8 * v273);
              }
              uint64_t v277 = *v276;
              if (!v277) {
                goto LABEL_923;
              }
              while ((*(unsigned char *)(v277 + 3) & 1) != 0)
              {
                uint64_t v277 = *(void *)(v277 + 24);
                if (!v277) {
                  goto LABEL_923;
                }
              }
              while (1)
              {
                uint64_t v277 = *(void *)(v277 + 24);
                if (!v277) {
                  break;
                }
                uint64_t v57 = 0;
                if ((*(unsigned char *)(v277 + 3) & 1) == 0) {
                  goto LABEL_924;
                }
              }
              uint64_t v57 = 0;
              unsigned int v278 = **(unsigned __int16 **)(v275 + 16);
              if (v278 > 0x10F)
              {
                BOOL v280 = v278 - 272 > 0x3D || ((1 << (v278 - 16)) & 0x20000040000000C1) == 0;
                if (v280 && v278 != 357) {
                  goto LABEL_924;
                }
              }
              else
              {
                BOOL v279 = v278 - 163 > 0x38 || ((1 << (v278 + 93)) & 0x18800000000140DLL) == 0;
                if (v279 && v278 != 85) {
                  goto LABEL_924;
                }
              }
LABEL_395:
              if (++v264 == v262)
              {
                uint64_t v292 = 0;
                *(void *)unint64_t v609 = &v609[16];
                *(void *)&v609[8] = 0x400000000;
                unint64_t v293 = 1;
                while (1)
                {
                  uint64_t v294 = *(void *)(v143 + 32) + v292;
                  int v296 = *(unsigned __int8 *)(v294 + 32);
                  uint64_t v295 = v294 + 32;
                  if (v296)
                  {
                    sub_1CD40DC78((uint64_t)v609, v295);
                  }
                  else
                  {
                    uint64_t v597 = (void *)sub_1CBB88854(*(_DWORD *)(*(void *)(v143 + 32) + v292 + 36), 0, a4, a1[4], 1);
                    if (!((unint64_t)v597 >> 32))
                    {
                      uint64_t v57 = 0;
                      goto LABEL_591;
                    }
                    sub_1CBA0B7F4((uint64_t)v609, &v597);
                  }
                  ++v293;
                  v292 += 32;
                  if (v293 >= *(unsigned int *)(v143 + 40))
                  {
                    uint64_t v282 = *(unsigned char **)v609;
                    uint64_t v281 = *(unsigned int *)&v609[8];
                    uint64_t v226 = **(unsigned __int16 **)(v143 + 16);
                    goto LABEL_577;
                  }
                }
              }
            }
          }
          if (v227 == 20)
          {
            if (v584) {
              goto LABEL_923;
            }
LABEL_722:
            uint64_t v597 = (void *)257;
            LODWORD(v598) = 0;
            *(_DWORD *)unint64_t v609 = *(_DWORD *)(*(void *)(v143 + 32) + 36);
            *(_DWORD *)&v609[16] = 0;
            uint64_t v57 = 1;
            (*(void (**)(void *))(*a4 + 32))(a4);
            sub_1CBA0A7C8((void *)a1[4], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v441 + 32) + 4), a3);
            goto LABEL_924;
          }
        }
        if (v226 != 85) {
          goto LABEL_685;
        }
        goto LABEL_392;
      }
      if (*(unsigned char *)(v142 + 3)) {
        goto LABEL_168;
      }
    }
    uint64_t v143 = 0;
    goto LABEL_169;
  }
  if (**(unsigned __int16 **)(a2 + 16) <= 0x7Fu)
  {
    switch(**(_WORD **)(a2 + 16))
    {
      case 'r':
        uint64_t v9 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
        uint64_t v10 = a1[4];
        if ((v9 & 0x80000000) != 0) {
          uint64_t v11 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v11 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v9);
        }
        uint64_t v12 = *v11;
        if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
          uint64_t v12 = *(void *)(v12 + 24);
        }
        uint64_t v13 = *(void *)(v12 + 8);
        if (**(_WORD **)(v13 + 16) != 51) {
          goto LABEL_923;
        }
        uint64_t v14 = (uint64_t *)((v9 & 0x80000000) != 0
                        ? *(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                        : *(void *)(v10 + 272) + 8 * v9);
        uint64_t v15 = *v14;
        if (!v15) {
          goto LABEL_923;
        }
        uint64_t v16 = *(_DWORD **)(v13 + 32);
        uint64_t v17 = v16[17];
        unsigned int v18 = v16[33];
        unsigned int v19 = v16[41];
        int v20 = v16[12];
        while ((*(unsigned char *)(v15 + 3) & 1) != 0)
        {
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15) {
            goto LABEL_923;
          }
        }
        while (1)
        {
          uint64_t v15 = *(void *)(v15 + 24);
          if (!v15) {
            break;
          }
          if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
            goto LABEL_923;
          }
        }
        if ((v17 & 0x80000000) != 0) {
          uint64_t v21 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v21 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v17);
        }
        uint64_t v22 = *v21;
        if (!v22) {
          goto LABEL_923;
        }
        while ((*(unsigned char *)(v22 + 3) & 1) != 0)
        {
          uint64_t v22 = *(void *)(v22 + 24);
          if (!v22) {
            goto LABEL_923;
          }
        }
        while (1)
        {
          uint64_t v22 = *(void *)(v22 + 24);
          if (!v22) {
            break;
          }
          if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
            goto LABEL_923;
          }
        }
        if ((v17 & 0x80000000) == 0
          || (v17 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v10 + 432)
          || *(void *)(*(void *)(v10 + 424) + 8 * (v17 & 0x7FFFFFFF)) != 129)
        {
          goto LABEL_923;
        }
        sub_1CC73C824(v16[25], v10, 0, 0, (uint64_t)v609);
        int v31 = v609[24];
        int v32 = 2;
        if (v20 != 33 || !v609[24]) {
          goto LABEL_917;
        }
        unsigned int v33 = *(_DWORD *)&v609[8];
        if (*(_DWORD *)&v609[8] > 0x40u)
        {
          int v442 = 0;
          int64_t v443 = ((unint64_t)*(unsigned int *)&v609[8] + 63) >> 6;
          do
          {
            BOOL v444 = v443-- < 1;
            if (v444) {
              break;
            }
            unint64_t v445 = *(void *)(*(void *)v609 + 8 * v443);
            v442 += __clz(v445);
          }
          while (!v445);
          unsigned int v446 = *(_DWORD *)&v609[8] | 0xFFFFFFC0;
          if ((v609[8] & 0x3F) == 0) {
            unsigned int v446 = 0;
          }
          if (v442 + v446 != *(_DWORD *)&v609[8])
          {
            int v32 = 2;
LABEL_919:
            if (v33 >= 0x41 && *(void *)v609)
            {
              int v530 = v32;
              MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
              int v32 = v530;
            }
            goto LABEL_922;
          }
        }
        else if (*(void *)v609)
        {
          goto LABEL_923;
        }
        sub_1CC73C824(v19, a1[4], 0, 0, (uint64_t)&v597);
        if (!(_BYTE)v600)
        {
          int v32 = 2;
          goto LABEL_916;
        }
        if (v598 > 0x40)
        {
          int v490 = 0;
          int64_t v491 = ((unint64_t)v598 + 63) >> 6;
          uint64_t v492 = v597;
          do
          {
            BOOL v444 = v491-- < 1;
            if (v444) {
              break;
            }
            unint64_t v493 = *((void *)v597 + v491);
            v490 += __clz(v493);
          }
          while (!v493);
          int v494 = v598 | 0xFFFFFFC0;
          if ((v598 & 0x3F) == 0) {
            int v494 = 0;
          }
          if (v490 + v494 != v598)
          {
            int v495 = 2;
            goto LABEL_913;
          }
        }
        else if (v597)
        {
          int v32 = 2;
          goto LABEL_916;
        }
        sub_1CC73C824(v18, a1[4], 0, 0, (uint64_t)&v593);
        if (!v596) {
          goto LABEL_834;
        }
        if (v594 > 0x40)
        {
          int v525 = 0;
          int64_t v526 = ((unint64_t)v594 + 63) >> 6;
          int v527 = v593;
          do
          {
            BOOL v444 = v526-- < 1;
            if (v444) {
              break;
            }
            unint64_t v528 = *((void *)v593 + v526);
            v525 += __clz(v528);
          }
          while (!v528);
          int v529 = v594 | 0xFFFFFFC0;
          if ((v594 & 0x3F) == 0) {
            int v529 = 0;
          }
          if (v525 + v529 == v594)
          {
            int v495 = 2;
            goto LABEL_908;
          }
        }
        else if (!v593)
        {
LABEL_834:
          int v495 = 2;
          goto LABEL_910;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
        llvm::MachineOperand::setReg(*(void *)(a2 + 32), v17);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v13);
        int v495 = 1;
        if (!v596 || v594 < 0x41) {
          goto LABEL_910;
        }
        int v527 = v593;
LABEL_908:
        if (v527) {
          MEMORY[0x1D25D9CB0](v527, 0x1000C8000313F17);
        }
LABEL_910:
        if (!(_BYTE)v600 || v598 < 0x41) {
          goto LABEL_915;
        }
        uint64_t v492 = v597;
LABEL_913:
        if (v492) {
          MEMORY[0x1D25D9CB0](v492, 0x1000C8000313F17);
        }
LABEL_915:
        int v32 = v495;
LABEL_916:
        int v31 = v609[24];
LABEL_917:
        if (v31)
        {
          unsigned int v33 = *(_DWORD *)&v609[8];
          goto LABEL_919;
        }
LABEL_922:
        if (v32 == 2) {
          goto LABEL_923;
        }
        goto LABEL_996;
      case 's':
      case 'u':
      case 'v':
      case 'w':
        goto LABEL_923;
      case 't':
        uint64_t v70 = *(unsigned int *)(a2 + 40);
        uint64_t v71 = *(void *)(a2 + 32);
        if (!v70) {
          goto LABEL_103;
        }
        uint64_t v72 = 0;
        uint64_t v73 = *(unsigned __int8 **)(a2 + 32);
        while (1)
        {
          int v74 = *v73;
          v73 += 32;
          if (v74 == 17) {
            break;
          }
          if (v70 == ++v72)
          {
LABEL_103:
            LODWORD(v72) = -1;
            break;
          }
        }
        int v75 = *(_DWORD *)(v71 + 32 * v72 + 16);
        if (v75 != 2131)
        {
          if (v75 == 2579 || v75 == 2488)
          {
            uint64_t v76 = *(unsigned int *)(v71 + 68);
            uint64_t v77 = a1[4];
            if ((v76 & 0x80000000) != 0) {
              unsigned int v78 = (uint64_t *)(*(void *)(v77 + 24) + 16 * (v76 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v78 = (uint64_t *)(*(void *)(v77 + 272) + 8 * v76);
            }
            uint64_t v79 = *v78;
            if ((*(unsigned char *)(v79 + 3) & 1) == 0) {
              uint64_t v79 = *(void *)(v79 + 24);
            }
            uint64_t v80 = *(void *)(v79 + 8);
            if (**(_WORD **)(v80 + 16) == 51
              && !(*(_WORD *)(*(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v80 + 44) & 0x7C0) == 0)))
            {
              int v81 = *(_DWORD *)(*(void *)(v80 + 32) + 48);
              if ((v81 - 32) >= 0xA && (v81 - 10) >= 0xFFFFFFFD)
              {
                uint64_t v597 = (void *)129;
                LODWORD(v598) = 0;
                uint64_t v82 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
                uint64_t v84 = *(llvm::ConstantInt **)v82;
                unsigned int v85 = *(_DWORD *)(v82 + 8);
                *(_DWORD *)&v609[8] = v85 >> 8;
                if (v85 >> 8 >= 0x41) {
                  operator new[]();
                }
                *(void *)unint64_t v609 = 0;
                unint64_t v86 = llvm::ConstantInt::get(v84, (llvm::LLVMContext *)v609, v83);
                if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
                  MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                }
                uint64_t v87 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v86);
                size_t v576 = v88;
                unsigned int v582 = (llvm::IntegerType *)v87;
                uint64_t v597 = (void *)129;
                LODWORD(v598) = 0;
                uint64_t v89 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
                uint64_t v91 = *(llvm::ConstantInt **)v89;
                unsigned int v92 = *(_DWORD *)(v89 + 8);
                *(_DWORD *)&v609[8] = v92 >> 8;
                if (v92 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v92 <= 0xFF) {
                  LOBYTE(v93) = 0;
                }
                else {
                  unint64_t v93 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v92) + 63);
                }
                *(void *)unint64_t v609 = v93 & 1;
                uint64_t v94 = llvm::ConstantInt::get(v91, (llvm::LLVMContext *)v609, v90);
                if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
                  MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                }
                uint64_t v95 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v94);
                uint64_t v97 = *(void *)(v80 + 32);
                int v98 = *(_DWORD *)(v97 + 68);
                size_t v563 = v96;
                uint64_t v567 = v95;
                int v571 = *(_DWORD *)(v97 + 100);
                if (v81 == 7)
                {
                  size_t v99 = v576;
                  uint64_t v100 = (uint64_t)v582;
                  uint64_t v101 = v95;
                  size_t v102 = v96;
                }
                else
                {
                  size_t v102 = v576;
                  uint64_t v101 = (uint64_t)v582;
                  uint64_t v100 = v95;
                  size_t v99 = v96;
                }
                uint64_t v597 = (void *)129;
                LODWORD(v598) = 0;
                *(_DWORD *)unint64_t v609 = 1;
                *(_DWORD *)&v609[16] = 2;
                *(_DWORD *)&v609[24] = v98;
                LODWORD(v611) = 0;
                LODWORD(v612) = v98;
                LODWORD(v614) = 0;
                *((void *)&v614 + 1) = v101;
                size_t v615 = v102;
                LODWORD(v616) = 1;
                *((void *)&v616 + 1) = v100;
                *(void *)&long long v617 = v99;
                DWORD2(v617) = 1;
                int v586 = v98;
                uint64_t v297 = (*(uint64_t (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 51, &v597, 1, v609, 5, 0);
                uint64_t v597 = (void *)129;
                LODWORD(v598) = 0;
                *(_DWORD *)unint64_t v609 = 1;
                *(_DWORD *)&v609[16] = 2;
                *(_DWORD *)&v609[24] = v571;
                LODWORD(v611) = 0;
                LODWORD(v612) = v571;
                LODWORD(v614) = 0;
                *((void *)&v614 + 1) = v297;
                size_t v615 = v298;
                LODWORD(v616) = 1;
                *((void *)&v616 + 1) = v100;
                *(void *)&long long v617 = v99;
                DWORD2(v617) = 1;
                uint64_t v299 = (*(uint64_t (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 51, &v597, 1, v609, 5, 0);
                if (v81 == 9)
                {
                  uint64_t v597 = (void *)129;
                  LODWORD(v598) = 0;
                  *(_DWORD *)unint64_t v609 = 1;
                  *(_DWORD *)&v609[16] = 2;
                  *(_DWORD *)&v609[24] = v586;
                  LODWORD(v611) = 0;
                  LODWORD(v612) = v571;
                  LODWORD(v614) = 0;
                  *((void *)&v614 + 1) = v567;
                  size_t v615 = v563;
                  LODWORD(v616) = 1;
                  *((void *)&v616 + 1) = v299;
                  *(void *)&long long v617 = v300;
                  DWORD2(v617) = 1;
                  (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 51, &v597, 1, v609, 5, 0);
                }
                uint64_t v301 = *(void *)(a2 + 32) + 64;
                unsigned int v302 = *(_DWORD *)(*(void *)(v300 + 32) + 4);
                goto LABEL_995;
              }
            }
          }
          goto LABEL_923;
        }
        int v201 = *(_DWORD *)(v71 + 4);
        if ((v201 & 0x80000000) == 0) {
          goto LABEL_923;
        }
        uint64_t v202 = a1[4];
        uint64_t v203 = v201 & 0x7FFFFFFF;
        if ((v201 & 0x7FFFFFFFu) >= *(_DWORD *)(v202 + 432)) {
          goto LABEL_923;
        }
        uint64_t v204 = *(unsigned int *)(v71 + 68);
        uint64_t v205 = *(void *)(*(void *)(v202 + 424) + 8 * v203);
        if (v205 != 129 && (v205 & 0x8000000000000000) == 0) {
          goto LABEL_923;
        }
        if ((v204 & 0x80000000) != 0) {
          uint64_t v206 = (uint64_t *)(*(void *)(v202 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v206 = (uint64_t *)(*(void *)(v202 + 272) + 8 * v204);
        }
        uint64_t v207 = *v206;
        if ((*(unsigned char *)(v207 + 3) & 1) == 0) {
          uint64_t v207 = *(void *)(v207 + 24);
        }
        unsigned __int16 v208 = *(unsigned __int16 ***)(v207 + 8);
        unsigned int v209 = *v208[2];
        if (v209 > 0x10F)
        {
          BOOL v337 = v209 - 272 > 0x3D || ((1 << (v209 - 16)) & 0x20000040000000C1) == 0;
          if (v337 && v209 != 357) {
            goto LABEL_764;
          }
        }
        else
        {
          BOOL v210 = v209 - 163 > 0x38 || ((1 << (v209 + 93)) & 0x18800000000140DLL) == 0;
          if (v210 && v209 != 85) {
            goto LABEL_764;
          }
        }
        if ((v204 & 0x80000000) != 0) {
          uint64_t v338 = (uint64_t *)(*(void *)(v202 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v338 = (uint64_t *)(*(void *)(v202 + 272) + 8 * v204);
        }
        uint64_t v339 = *v338;
        if (v339)
        {
          while ((*(unsigned char *)(v339 + 3) & 1) != 0)
          {
            uint64_t v339 = *(void *)(v339 + 24);
            if (!v339) {
              goto LABEL_764;
            }
          }
          do
          {
            uint64_t v339 = *(void *)(v339 + 24);
            if (!v339) {
              goto LABEL_923;
            }
          }
          while ((*(unsigned char *)(v339 + 3) & 1) != 0);
        }
LABEL_764:
        uint64_t v463 = *(void *)(v202 + 24);
        uint64_t v464 = *(void *)(v463 + 16 * v203 + 8);
        if (!v464)
        {
LABEL_767:
          uint64_t v57 = 1;
          LODWORD(v597) = v201;
          LODWORD(v598) = 1;
          *(_DWORD *)unint64_t v609 = v204;
          *(_DWORD *)&v609[16] = 0;
          (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 262, &v597, 1, v609, 1, 0);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          goto LABEL_924;
        }
        while ((*(unsigned char *)(v464 + 3) & 1) != 0)
        {
          uint64_t v464 = *(void *)(v464 + 24);
          if (!v464) {
            goto LABEL_767;
          }
        }
        uint64_t v465 = *(void *)(v202 + 272);
        uint64_t v466 = *(void *)(v464 + 8);
LABEL_769:
        int v467 = **(unsigned __int16 **)(v466 + 16);
        if ((v467 - 165) < 2 || v467 == 163) {
          goto LABEL_787;
        }
        if (v467 == 177)
        {
          uint64_t v468 = *(unsigned int *)(*(void *)(v466 + 32) + 4);
          unsigned __int8 v469 = (uint64_t *)(v465 + 8 * v468);
          if ((int)v468 < 0) {
            unsigned __int8 v469 = (uint64_t *)(v463 + 16 * (v468 & 0x7FFFFFFF) + 8);
          }
          uint64_t v470 = *v469;
          if (v470)
          {
            while ((*(unsigned char *)(v470 + 3) & 1) != 0)
            {
              uint64_t v470 = *(void *)(v470 + 24);
              if (!v470) {
                goto LABEL_791;
              }
            }
            while (1)
            {
              uint64_t v470 = *(void *)(v470 + 24);
              if (!v470) {
                break;
              }
              if ((*(unsigned char *)(v470 + 3) & 1) == 0) {
                goto LABEL_791;
              }
            }
            unint64_t v471 = (uint64_t *)((int)v468 >= 0 ? v465 + 8 * v468 : v463 + 16 * (v468 & 0x7FFFFFFF) + 8);
            for (uint64_t i = *v471; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
              ;
            if (**(_WORD **)(*(void *)(i + 8) + 16) == 163)
            {
LABEL_787:
              while (1)
              {
                uint64_t v464 = *(void *)(v464 + 24);
                if (!v464) {
                  goto LABEL_767;
                }
                if ((*(unsigned char *)(v464 + 3) & 1) == 0 && *(void *)(v464 + 8) != v466)
                {
                  uint64_t v466 = *(void *)(v464 + 8);
                  goto LABEL_769;
                }
              }
            }
          }
        }
LABEL_791:
        uint64_t v473 = (uint64_t *)(v463 + 16 * (v204 & 0x7FFFFFFF) + 8);
        if ((int)v204 >= 0) {
          uint64_t v473 = (uint64_t *)(v465 + 8 * v204);
        }
        uint64_t v474 = *v473;
        if (!v474) {
          goto LABEL_923;
        }
        if ((*(unsigned char *)(v474 + 3) & 1) == 0)
        {
          uint64_t v474 = *(void *)(v474 + 24);
          if (!v474 || (*(unsigned char *)(v474 + 3) & 1) == 0) {
            goto LABEL_923;
          }
        }
        uint64_t v475 = *(void *)(v474 + 8);
        if (!v475 || **(_WORD **)(v475 + 16) != 179) {
          goto LABEL_923;
        }
        if (*(_DWORD *)(v475 + 40) != 2)
        {
          uint64_t v57 = 0;
          goto LABEL_924;
        }
        int v570 = *(_DWORD *)(*(void *)(v475 + 32) + 36);
        unsigned int v566 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v202, "", 0);
        unint64_t v476 = v566 & 0x7FFFFFFF;
        *(void *)(*(void *)(v202 + 24) + 16 * v476) = 4;
        unint64_t v477 = *(unsigned int *)(v202 + 432);
        if (v476 >= v477)
        {
          uint64_t v574 = *(llvm::MachineInstr **)(v202 + 440);
          uint64_t v580 = v476 + 1 - v477;
          if (v476 >= *(unsigned int *)(v202 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v478 = *(_DWORD *)(v202 + 432);
          if (v580)
          {
            uint64_t v479 = (llvm::MachineInstr **)(*(void *)(v202 + 424) + 8 * v477);
            uint64_t v480 = ~v476 + v477;
            do
            {
              *v479++ = v574;
              BOOL v351 = __CFADD__(v480++, 1);
            }
            while (!v351);
            int v478 = *(_DWORD *)(v202 + 432);
          }
          *(_DWORD *)(v202 + 432) = v478 + v580;
        }
        *(void *)(*(void *)(v202 + 424) + 8 * v476) = 257;
        uint64_t v481 = *(void *)(v202 + 8);
        if (v481) {
          (*(void (**)(uint64_t, void))(*(void *)v481 + 24))(v481, v566);
        }
        *(_DWORD *)unint64_t v609 = v566;
        int v482 = sub_1CC7390C0(a4, 2131, (int *)v609, 1, 0);
        long long v484 = v483;
        memset(&v609[8], 0, 24);
        *(_DWORD *)unint64_t v609 = 0;
        *(_DWORD *)&v609[4] = v570;
        llvm::MachineInstr::addOperand(v483, v482, (const llvm::MachineOperand *)v609);
        LODWORD(v597) = v201;
        LODWORD(v598) = 1;
        *(void *)unint64_t v609 = v482;
        *(void *)&v609[8] = v484;
        *(_DWORD *)&v609[16] = 1;
        (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 179, &v597, 1, v609, 1, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
        uint64_t v485 = a1[4];
        if ((v204 & 0x80000000) != 0) {
          long long v486 = (uint64_t *)(*(void *)(v485 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8);
        }
        else {
          long long v486 = (uint64_t *)(*(void *)(v485 + 272) + 8 * v204);
        }
        uint64_t v487 = *v486;
        if (v487)
        {
          if ((*(unsigned char *)(v487 + 3) & 1) == 0)
          {
LABEL_932:
            uint64_t v57 = 1;
            goto LABEL_924;
          }
          while (1)
          {
            uint64_t v487 = *(void *)(v487 + 24);
            if (!v487) {
              break;
            }
            uint64_t v57 = 1;
            if ((*(unsigned char *)(v487 + 3) & 1) == 0) {
              goto LABEL_924;
            }
          }
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v208);
        goto LABEL_932;
      case 'x':
        uint64_t v103 = *(void *)(a2 + 32);
        unsigned int v104 = *(_DWORD *)(v103 + 4);
        if ((v104 & 0x80000000) == 0) {
          goto LABEL_923;
        }
        uint64_t v105 = a1[4];
        unint64_t v106 = v104 & 0x7FFFFFFF;
        if (v106 >= *(unsigned int *)(v105 + 432)) {
          goto LABEL_923;
        }
        unint64_t v107 = *(void *)(*(void *)(v105 + 424) + 8 * v106);
        if (v107 != 513 && v107 != 257) {
          goto LABEL_923;
        }
        sub_1CBB633EC((uint64_t)v609, v105, a1[6], a1[7], (unsigned __int8 *)v103, 1, 0, 0, 1u);
        if (int)v615 >= 4 && (!HIDWORD(v615) || (sub_1CBB87D58(v104, a1[4]))) {
          goto LABEL_362;
        }
        uint64_t v109 = *(void *)(*(void *)(a2 + 32) + 48);
        unsigned int v110 = *(_DWORD *)(v109 + 32);
        if (v110 > 0x40) {
          unint64_t v111 = **(void **)(v109 + 24);
        }
        else {
          unint64_t v111 = (uint64_t)(*(void *)(v109 + 24) << -(char)v110) >> -(char)v110;
        }
        uint64_t v239 = a1[4];
        uint64_t v240 = *(void *)(*(void *)(v239 + 24) + 16 * v106 + 8);
        if (!v240) {
          goto LABEL_361;
        }
        while ((*(unsigned char *)(v240 + 3) & 1) != 0)
        {
          uint64_t v240 = *(void *)(v240 + 24);
          if (!v240) {
            goto LABEL_361;
          }
        }
        uint64_t v243 = *(void *)(v240 + 8);
        if (**(_WORD **)(v243 + 16) == 65)
        {
          while (1)
          {
            uint64_t v240 = *(void *)(v240 + 24);
            if (!v240) {
              break;
            }
            if ((*(unsigned char *)(v240 + 3) & 1) == 0)
            {
              uint64_t v244 = *(void *)(v240 + 8);
              if (v244 != v243)
              {
                uint64_t v243 = *(void *)(v240 + 8);
                if (**(_WORD **)(v244 + 16) != 65) {
                  goto LABEL_368;
                }
              }
            }
          }
LABEL_361:
          v108.i32[0] = v111 + 1;
          uint8x8_t v241 = (uint8x8_t)vcnt_s8(v108);
          v241.i16[0] = vaddlv_u8(v241);
          if (v241.i32[0] == 1) {
            goto LABEL_362;
          }
        }
LABEL_368:
        BOOL v585 = (llvm::IntegerType *)v111;
        if (sub_1CBB87D58(v104, v239))
        {
          uint64_t v245 = v111;
          unsigned int v246 = __clz(__rbit64(v111));
          if (v246 >= 4) {
            int v247 = 4;
          }
          else {
            int v247 = v246;
          }
          if (v247)
          {
            uint64_t v248 = (llvm::LLVMContext *)(v107 >> 3);
            uint64_t v562 = (v247 + 1);
            uint64_t v249 = 1;
            int v565 = v247;
            while (1)
            {
              uint64_t v597 = (void *)v107;
              LODWORD(v598) = 0;
              uint64_t v578 = v249;
              unint64_t v250 = v245 >> v249;
              uint64_t v251 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], v248);
              unint64_t v569 = v250;
              uint64_t v252 = llvm::ConstantInt::get(v251, v250, (const llvm::APInt *)1);
              (*(void (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v252);
              uint64_t v254 = v253;
              uint64_t v255 = a1[4];
              uint64_t v256 = *(unsigned int *)(*(void *)(v253 + 32) + 4);
              BOOL v257 = (uint64_t *)((v256 & 0x80000000) != 0
                               ? *(void *)(v255 + 24) + 16 * (v256 & 0x7FFFFFFF) + 8
                               : *(void *)(v255 + 272) + 8 * v256);
              uint64_t v248 = (llvm::LLVMContext *)(v107 >> 3);
              uint64_t v258 = *v257;
              uint64_t v245 = (uint64_t)v585;
              if (v258) {
                break;
              }
LABEL_379:
              if (v604 >= (unint64_t)HIDWORD(v604)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v603 + v604) = v254;
              LODWORD(v604) = v604 + 1;
              uint64_t v249 = v578 + 1;
              int v247 = v565;
              if (v578 + 1 == v562) {
                goto LABEL_474;
              }
            }
            while ((*(unsigned char *)(v258 + 3) & 1) != 0)
            {
              uint64_t v258 = *(void *)(v258 + 24);
              if (!v258) {
                goto LABEL_379;
              }
            }
            char v291 = sub_1CBB87FEC(v104, *(void *)(v255 + 24), *(void *)(v255 + 272));
            if (v107 != 513 || (v291 & 1) == 0)
            {
              uint64_t v260 = v569;
              unint64_t v303 = v107;
              goto LABEL_483;
            }
            int v259 = 1;
            uint64_t v260 = v569;
          }
          else
          {
LABEL_474:
            int v259 = 0;
            uint64_t v260 = v245 >> v247;
            LODWORD(v578) = v247;
          }
        }
        else
        {
          LODWORD(v578) = 0;
          int v259 = 0;
          uint64_t v260 = v111;
        }
        if ((unint64_t)(v260 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
        {
          unint64_t v303 = 129;
        }
        else
        {
          if (v107 != 257) {
            int v259 = 1;
          }
          char v242 = 1;
          if ((unint64_t)(v260 + 0x80000000) >> 31 > 2 || !v259)
          {
LABEL_551:
            if (v604)
            {
              uint64_t v331 = (llvm::MachineInstr **)v603;
              uint64_t v332 = (llvm::MachineInstr **)((char *)v603 + 8 * v604);
              do
              {
                uint64_t v333 = a1[4];
                uint64_t v334 = *(unsigned int *)(*((void *)*v331 + 4) + 4);
                if ((v334 & 0x80000000) != 0) {
                  uint64_t v335 = (uint64_t *)(*(void *)(v333 + 24) + 16 * (v334 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v335 = (uint64_t *)(*(void *)(v333 + 272) + 8 * v334);
                }
                uint64_t v336 = *v335;
                if (v336)
                {
                  while ((*(unsigned char *)(v336 + 3) & 1) != 0)
                  {
                    uint64_t v336 = *(void *)(v336 + 24);
                    if (!v336) {
                      goto LABEL_558;
                    }
                  }
                }
                else
                {
LABEL_558:
                  llvm::MachineInstr::eraseFromParent(*v331);
                }
                ++v331;
              }
              while (v331 != v332);
            }
            if ((v242 & 1) == 0) {
              goto LABEL_996;
            }
            goto LABEL_923;
          }
          unint64_t v303 = 257;
        }
LABEL_483:
        uint64_t v304 = a1[4];
        uint64_t v305 = *(void *)(v304 + 24);
        uint64_t v306 = *(void *)(v305 + 16 * v106 + 8);
        int v587 = (llvm::IntegerType *)v260;
        if (v260 < 0)
        {
          while (1)
          {
            if (!v306) {
              goto LABEL_547;
            }
            if ((*(unsigned char *)(v306 + 3) & 1) == 0) {
              break;
            }
            uint64_t v306 = *(void *)(v306 + 24);
          }
          uint64_t v316 = *(void *)(v306 + 8);
LABEL_528:
          int v317 = **(unsigned __int16 **)(v316 + 16);
          if ((v317 & 0xFFFE) == 0x32)
          {
            uint64_t v318 = *(void *)(v316 + 32);
            if ((v317 != 51 || *(_DWORD *)(v318 + 132) != v104 && *(_DWORD *)(v318 + 164) != v104)
              && (*(_DWORD *)(v318 + 32 * (v317 != 50) + 16) - 34) >= 4)
            {
              goto LABEL_542;
            }
          }
          else
          {
            if ((v317 - 46) < 2 || v317 == 308) {
              goto LABEL_542;
            }
            if (v317 == 45)
            {
              uint64_t v319 = *(unsigned int *)(*(void *)(v316 + 32) + 36);
              if ((v319 & 0x80000000) != 0) {
                uint64_t v320 = (uint64_t *)(v305 + 16 * (v319 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v320 = (uint64_t *)(*(void *)(v304 + 272) + 8 * v319);
              }
              uint64_t v321 = *v320;
              if ((*(unsigned char *)(v321 + 3) & 1) == 0) {
                uint64_t v321 = *(void *)(v321 + 24);
              }
              if (**(_WORD **)(*(void *)(v321 + 8) + 16) != 282)
              {
LABEL_542:
                while (1)
                {
                  uint64_t v306 = *(void *)(v306 + 24);
                  if (!v306) {
                    break;
                  }
                  if ((*(unsigned char *)(v306 + 3) & 1) == 0 && *(void *)(v306 + 8) != v316)
                  {
                    uint64_t v316 = *(void *)(v306 + 8);
                    goto LABEL_528;
                  }
                }
LABEL_547:
                uint64_t v307 = 124;
                goto LABEL_548;
              }
            }
          }
          if (v107 != 513 || !sub_1CBB87FEC(v104, v305, *(void *)(v304 + 272))) {
            goto LABEL_362;
          }
          uint64_t v307 = 124;
LABEL_548:
          uint64_t v597 = (void *)v303;
          LODWORD(v598) = 0;
          v322 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)(v303 >> 3));
          uint64_t v323 = llvm::ConstantInt::get(v322, (unint64_t)v587, (const llvm::APInt *)1);
          uint64_t v324 = (void *)(*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v323);
          uint64_t v593 = (void *)v107;
          LODWORD(v594) = 0;
          uint64_t v597 = v324;
          uint64_t v598 = v325;
          LODWORD(v599) = 1;
          uint64_t v326 = (void *)sub_1CC738034(a4, v307, (unint64_t *)&v593, (int *)&v597);
          if (v578)
          {
            uint64_t v593 = (void *)v107;
            LODWORD(v594) = 0;
            uint64_t v597 = v326;
            uint64_t v598 = v327;
            LODWORD(v599) = 1;
            uint64_t v606 = v107;
            int v607 = 0;
            uint64_t v328 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)(v107 >> 3));
            unsigned int v329 = llvm::ConstantInt::get(v328, v578, (const llvm::APInt *)1);
            uint64_t v600 = (*(uint64_t (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v606, v329);
            uint64_t v601 = v330;
            int v602 = 1;
            (*(void (**)(void *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*a4 + 32))(a4, 127, &v593, 1, &v597, 2, 0);
          }
          sub_1CBA0A7C8((void *)a1[4], (llvm::MachineInstr *)a2, *(_DWORD *)(*(void *)(v327 + 32) + 4), a3);
          char v242 = 0;
          goto LABEL_551;
        }
        if (!v306)
        {
LABEL_487:
          uint64_t v307 = 126;
          goto LABEL_548;
        }
        while ((*(unsigned char *)(v306 + 3) & 1) != 0)
        {
          uint64_t v306 = *(void *)(v306 + 24);
          if (!v306) {
            goto LABEL_487;
          }
        }
        uint64_t v308 = *(void *)(v306 + 8);
LABEL_489:
        int v309 = **(unsigned __int16 **)(v308 + 16);
        if ((v309 & 0xFFFE) == 0x32)
        {
          uint64_t v310 = *(void *)(v308 + 32);
          if (v309 == 51 && (*(_DWORD *)(v310 + 132) == v104 || *(_DWORD *)(v310 + 164) == v104)
            || (*(_DWORD *)(v310 + 32 * (v309 != 50) + 16) - 38) < 4)
          {
            goto LABEL_862;
          }
          goto LABEL_515;
        }
        if (v309 == 65)
        {
          int v573 = (llvm::MachineInstr *)v304;
          sub_1CC73C210(v104, v304, (uint64_t)&v597);
          if ((_BYTE)v599)
          {
            if (v598 < 0x41)
            {
              uint64_t v304 = (uint64_t)v573;
              if ((uint64_t)((void)v597 << -(uint64_t)v598) >> -(uint64_t)v598 == 0xFFFF) {
                goto LABEL_862;
              }
              goto LABEL_515;
            }
            if (v597) {
              MEMORY[0x1D25D9CB0](v597, 0x1000C8000313F17);
            }
          }
          uint64_t v304 = (uint64_t)v573;
        }
        else
        {
          if (v309 != 45)
          {
            if ((v309 - 127) <= 2)
            {
              int v507 = *(_DWORD *)(*(void *)(v308 + 32) + 4);
              if ((v507 & 0x80000000) == 0) {
                goto LABEL_864;
              }
              uint64_t v508 = v507 & 0x7FFFFFFF;
              if (v508 >= *(_DWORD *)(v304 + 432)) {
                goto LABEL_864;
              }
              if (*(void *)(*(void *)(v304 + 424) + 8 * v508) == 513) {
                goto LABEL_862;
              }
              goto LABEL_487;
            }
            BOOL v314 = (v309 - 46) > 0x15 || ((1 << (v309 - 46)) & 0x300003) == 0;
            if (!v314 || v309 == 308) {
              goto LABEL_515;
            }
LABEL_862:
            if (v107 == 513 && (sub_1CBB87FEC(v104, *(void *)(a1[4] + 24), *(void *)(a1[4] + 272)) & 1) != 0)
            {
LABEL_864:
              uint64_t v307 = 126;
              goto LABEL_548;
            }
LABEL_362:
            char v242 = 1;
            goto LABEL_551;
          }
          uint64_t v311 = *(unsigned int *)(*(void *)(v308 + 32) + 36);
          if ((v311 & 0x80000000) != 0) {
            unint64_t v312 = (uint64_t *)(*(void *)(v304 + 24) + 16 * (v311 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v312 = (uint64_t *)(*(void *)(v304 + 272) + 8 * v311);
          }
          uint64_t v313 = *v312;
          if ((*(unsigned char *)(v313 + 3) & 1) == 0) {
            uint64_t v313 = *(void *)(v313 + 24);
          }
          if (**(_WORD **)(*(void *)(v313 + 8) + 16) == 282) {
            goto LABEL_862;
          }
        }
LABEL_515:
        uint64_t v315 = *(void *)(v306 + 8);
        while (1)
        {
          uint64_t v306 = *(void *)(v306 + 24);
          if (!v306) {
            goto LABEL_487;
          }
          if ((*(unsigned char *)(v306 + 3) & 1) == 0)
          {
            uint64_t v308 = *(void *)(v306 + 8);
            if (v308 != v315) {
              goto LABEL_489;
            }
          }
        }
      case 'y':
        uint64_t v112 = *(void *)(a2 + 32);
        int v113 = *(_DWORD *)(v112 + 4);
        if (v113 < 0)
        {
          uint64_t v114 = a1[4];
          if ((v113 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v114 + 432)
            && *(void *)(*(void *)(v114 + 424) + 8 * (v113 & 0x7FFFFFFF)) == 257)
          {
            if (sub_1CBB87C40(*(_DWORD *)(v112 + 4), *(void *)(v114 + 24), *(void *)(v114 + 272)))
            {
              uint64_t v115 = sub_1CBB633EC((uint64_t)v609, v114, a1[6], a1[7], (unsigned __int8 *)v112, 0, 0, 0, 1u);
              if ((int)v615 < 4)
              {
                uint64_t v116 = *(void *)(*(void *)(a2 + 32) + 48);
                uint64_t v117 = *(void *)(v116 + 32);
                if ((_UNKNOWN *)v117 == &unk_1CFB2E344)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v598, (const llvm::detail::DoubleAPFloat *)(v116 + 32));
                }
                else
                {
                  uint64_t v598 = *(void *)(v116 + 32);
                  if ((*(_DWORD *)(v117 + 8) + 64) >= 0x80) {
                    operator new[]();
                  }
                  char v118 = *(unsigned char *)(v116 + 52);
                  int v119 = v118 & 7;
                  BYTE4(v600) = v118 & 0xF;
                  LODWORD(v600) = *(_DWORD *)(v116 + 48);
                  BOOL v121 = (v118 & 6) != 0 && v119 != 3;
                  if (v119 == 1 || v121)
                  {
                    uint64_t v122 = *(unsigned int *)(v598 + 8);
                    if ((v122 - 64) <= 0xFFFFFF7F) {
                      uint64_t v123 = (uint64_t *)v115;
                    }
                    else {
                      uint64_t v123 = &v599;
                    }
                    unint64_t v126 = *(uint64_t **)(v116 + 40);
                    uint64_t v125 = (uint64_t *)(v116 + 40);
                    uint64_t v124 = v126;
                    if ((*(_DWORD *)(*(v125 - 1) + 8) - 64) >= 0xFFFFFF80) {
                      uint64_t v124 = v125;
                    }
                    if (v122 <= 0xFFFFFFBF)
                    {
                      unint64_t v127 = (unint64_t)(v122 + 64) >> 6;
                      do
                      {
                        uint64_t v128 = *v124++;
                        *v123++ = v128;
                        --v127;
                      }
                      while (v127);
                    }
                  }
                }
                char v592 = 0;
                char v129 = 1;
                if (!llvm::APFloat::convert((uint64_t)&v597, &unk_1CFB2E2E0, 1, &v592) && !v592)
                {
                  char v129 = 1;
                  if (!sub_1CB8456FC((uint64_t)&v597))
                  {
                    uint64_t v131 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(*(void *)(a2 + 24) + 32), (llvm::LLVMContext *)&v597, v130);
                    uint64_t v593 = (void *)129;
                    LODWORD(v594) = 0;
                    uint64_t v132 = (void *)(*(uint64_t (**)(void *, void **, const llvm::detail::DoubleAPFloat *))(*a4 + 24))(a4, &v593, v131);
                    LODWORD(v606) = v113;
                    int v607 = 1;
                    uint64_t v593 = v132;
                    uint64_t v594 = v133;
                    int v595 = 1;
                    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a4 + 32))(a4, 178, &v606, 1, &v593, 1, 0);
                    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                    char v129 = 0;
                  }
                }
                if ((_UNKNOWN *)v598 == &unk_1CFB2E344)
                {
                  sub_1CB845718(&v599);
                }
                else if ((*(_DWORD *)(v598 + 8) - 64) <= 0xFFFFFF7F && v599)
                {
                  MEMORY[0x1D25D9CB0](v599, 0x1000C8000313F17);
                }
                if ((v129 & 1) == 0) {
                  goto LABEL_996;
                }
              }
            }
          }
        }
        goto LABEL_923;
      default:
        if (v8 != 45)
        {
          if (v8 != 51) {
            goto LABEL_923;
          }
LABEL_80:
          if (v8 == 335) {
            goto LABEL_923;
          }
          uint64_t v61 = a1[4];
          uint64_t v62 = *(void *)(a2 + 32);
          uint64_t v63 = *(int *)(v62 + 48);
          uint64_t v25 = *(unsigned int *)(v62 + 68);
          uint64_t v27 = *(unsigned int *)(v62 + 100);
          if ((v63 - 32) > 9)
          {
            if (v63 < 0x10)
            {
              unsigned int v184 = *(unsigned __int16 *)(a2 + 44);
              uint64_t v185 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8);
              long long v186 = *(_OWORD *)(v185 + 1024);
              *(_OWORD *)unint64_t v609 = *(_OWORD *)(v185 + 1008);
              *(_OWORD *)&v609[16] = v186;
              uint64_t v187 = *(void ***)(v185 + 1048);
              uint64_t v610 = *(void *)(v185 + 1040);
              v611 = v187;
              uint64_t v188 = *(void *)(v185 + 1056);
              uint64_t v612 = v188;
              if (v188) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v188 + 8), 1uLL, memory_order_relaxed);
              }
              LOWORD(v613) = *(_WORD *)(v185 + 1064);
              if (*(char *)(v185 + 1095) < 0)
              {
                sub_1CB8BDF7C((uint64_t)&v614, *(const void **)(v185 + 1072), *(void *)(v185 + 1080));
              }
              else
              {
                long long v614 = *(_OWORD *)(v185 + 1072);
                size_t v615 = *(void *)(v185 + 1088);
              }
              long long v189 = *(_OWORD *)(v185 + 1112);
              long long v616 = *(_OWORD *)(v185 + 1096);
              long long v617 = v189;
              sub_1CB906B78((uint64_t)&v618, (uint64_t *)(v185 + 1128));
              if (*(char *)(v185 + 1311) < 0)
              {
                sub_1CB8BDF7C((uint64_t)&v619, *(const void **)(v185 + 1288), *(void *)(v185 + 1296));
              }
              else
              {
                long long v619 = *(_OWORD *)(v185 + 1288);
                uint64_t v620 = *(void *)(v185 + 1304);
              }
              int v190 = (v184 >> 6) & 1;
              if ((~v184 & 0x30) != 0) {
                int v190 = 0;
              }
              if (!(v190 | v609[12] & 1)) {
                goto LABEL_251;
              }
              uint64_t v191 = (uint64_t *)((v25 & 0x80000000) != 0
                               ? *(void *)(v61 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8
                               : *(void *)(v61 + 272) + 8 * v25);
              if ((uint64_t v192 = *v191) == 0
                || (*(unsigned char *)(v192 + 3) & 1) == 0
                && ((uint64_t v192 = *(void *)(v192 + 24)) == 0 || (*(unsigned char *)(v192 + 3) & 1) == 0)
                || (uint64_t v193 = *(void *)(v192 + 8)) == 0
                || **(_WORD **)(v193 + 16) != 177
                || *(_DWORD *)(v193 + 40) != 2
                || ((v27 & 0x80000000) == 0
                  ? (BOOL v194 = (uint64_t *)(*(void *)(v61 + 272) + 8 * v27))
                  : (BOOL v194 = (uint64_t *)(*(void *)(v61 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8)),
                    (uint64_t v195 = *v194) != 0
                 && ((*(unsigned char *)(v195 + 3) & 1) != 0
                  || (uint64_t v195 = *(void *)(v195 + 24)) != 0 && (*(unsigned char *)(v195 + 3) & 1) != 0)
                 && (uint64_t v196 = *(void *)(v195 + 8)) != 0
                 && **(_WORD **)(v196 + 16) == 177
                 && *(_DWORD *)(v196 + 40) == 2))
              {
LABEL_251:
                sub_1CB906D7C((uint64_t)v609);
                goto LABEL_923;
              }
              sub_1CB906D7C((uint64_t)v609);
            }
          }
          else
          {
            if ((v25 & 0x80000000) != 0) {
              unsigned int v64 = (uint64_t *)(*(void *)(v61 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v64 = (uint64_t *)(*(void *)(v61 + 272) + 8 * v25);
            }
            uint64_t v65 = *v64;
            if (!v65) {
              goto LABEL_923;
            }
            if ((*(unsigned char *)(v65 + 3) & 1) == 0)
            {
              uint64_t v65 = *(void *)(v65 + 24);
              if (!v65 || (*(unsigned char *)(v65 + 3) & 1) == 0) {
                goto LABEL_923;
              }
            }
            uint64_t v66 = *(void *)(v65 + 8);
            if (!v66 || **(_WORD **)(v66 + 16) != 124 || *(_DWORD *)(v66 + 40) != 2) {
              goto LABEL_923;
            }
            uint64_t v67 = (uint64_t *)((v27 & 0x80000000) != 0
                            ? *(void *)(v61 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8
                            : *(void *)(v61 + 272) + 8 * v27);
            uint64_t v68 = *v67;
            if (v68)
            {
              if ((*(unsigned char *)(v68 + 3) & 1) != 0
                || (uint64_t v68 = *(void *)(v68 + 24)) != 0 && (*(unsigned char *)(v68 + 3) & 1) != 0)
              {
                uint64_t v69 = *(void *)(v68 + 8);
                if (v69)
                {
                  if (**(_WORD **)(v69 + 16) == 124 && *(_DWORD *)(v69 + 40) == 2) {
                    goto LABEL_923;
                  }
                }
              }
            }
          }
          uint64_t v237 = v62 + 64;
          uint64_t v238 = (unsigned int *)(v62 + 96);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
          *(_DWORD *)(v62 + 48) = dword_1CDC6CDFC[v63];
LABEL_994:
          llvm::MachineOperand::setReg(v237, v27);
          uint64_t v301 = (uint64_t)v238;
          unsigned int v302 = v25;
LABEL_995:
          llvm::MachineOperand::setReg(v301, v302);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
          goto LABEL_996;
        }
        uint64_t v152 = *(_DWORD **)(a2 + 32);
        int v153 = v152[1];
        if ((v153 & 0x80000000) == 0) {
          goto LABEL_886;
        }
        uint64_t v154 = a1[4];
        if ((v153 & 0x7FFFFFFFu) >= *(_DWORD *)(v154 + 432)
          || *(void *)(*(void *)(v154 + 424) + 8 * (v153 & 0x7FFFFFFF)) != 513)
        {
          goto LABEL_886;
        }
        uint64_t v568 = *(unsigned __int16 *)(a2 + 44);
        uint64_t v155 = v152[9];
        uint64_t v156 = v152[17];
        if ((v155 & 0x80000000) != 0) {
          uint64_t v157 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v155 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v157 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v155);
        }
        uint64_t v158 = *v157;
        unsigned int v561 = v155;
        unsigned int v564 = v156;
        if (!v158) {
          goto LABEL_964;
        }
        if (*(unsigned char *)(v158 + 3)) {
          goto LABEL_185;
        }
        uint64_t v158 = *(void *)(v158 + 24);
        if (v158)
        {
          if (*(unsigned char *)(v158 + 3)) {
LABEL_185:
          }
            unint64_t v159 = *(unsigned __int16 ***)(v158 + 8);
          else {
LABEL_964:
          }
            unint64_t v159 = 0;
        }
        else
        {
          unint64_t v159 = 0;
        }
        if ((v156 & 0x80000000) != 0) {
          unint64_t v160 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v160 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v156);
        }
        uint64_t v161 = *v160;
        if ((*(unsigned char *)(v161 + 3) & 1) == 0) {
          uint64_t v161 = *(void *)(v161 + 24);
        }
        v572 = (llvm::MachineInstr *)v159;
        int v583 = *v159[2];
        uint64_t v559 = *(void *)(v161 + 8);
        v560 = (void *)(v154 + 424);
        int v577 = **(unsigned __int16 **)(v559 + 16);
        if (sub_1CBB7EE84()) {
          goto LABEL_621;
        }
        uint64_t v162 = *(_DWORD **)(a2 + 32);
        uint64_t v163 = v162[9];
        uint64_t v164 = v162[17];
        if ((v163 & 0x80000000) != 0) {
          int v165 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v163 & 0x7FFFFFFF) + 8);
        }
        else {
          int v165 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v163);
        }
        uint64_t v166 = *v165;
        if (!v166) {
          goto LABEL_988;
        }
        if (*(unsigned char *)(v166 + 3)) {
          goto LABEL_195;
        }
        uint64_t v166 = *(void *)(v166 + 24);
        if (v166)
        {
          if (*(unsigned char *)(v166 + 3)) {
LABEL_195:
          }
            uint64_t v167 = *(void *)(v166 + 8);
          else {
LABEL_988:
          }
            uint64_t v167 = 0;
        }
        else
        {
          uint64_t v167 = 0;
        }
        if ((v164 & 0x80000000) != 0) {
          unsigned int v168 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v168 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v164);
        }
        uint64_t v169 = *v168;
        if ((*(unsigned char *)(v169 + 3) & 1) == 0) {
          uint64_t v169 = *(void *)(v169 + 24);
        }
        int v170 = v162[1];
        uint64_t v171 = *(void *)(v169 + 8);
        int v172 = **(unsigned __int16 **)(v167 + 16);
        if (v172 == 127) {
          goto LABEL_286;
        }
        int v173 = **(unsigned __int16 **)(v171 + 16);
        if (v173 == 127) {
          goto LABEL_286;
        }
        if ((v172 == 308 || v172 == 47)
          && ((v163 & 0x80000000) == 0
            ? (int v174 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v163))
            : (int v174 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v163 & 0x7FFFFFFF) + 8)),
              (uint64_t v175 = *v174) != 0))
        {
          while ((*(unsigned char *)(v175 + 3) & 1) != 0)
          {
            uint64_t v175 = *(void *)(v175 + 24);
            if (!v175) {
              goto LABEL_209;
            }
          }
          while (1)
          {
            uint64_t v175 = *(void *)(v175 + 24);
            if (!v175) {
              break;
            }
            if ((*(unsigned char *)(v175 + 3) & 1) == 0) {
              goto LABEL_209;
            }
          }
        }
        else
        {
LABEL_209:
          if ((v173 == 308 || v173 == 47)
            && ((v164 & 0x80000000) == 0
              ? (unint64_t v176 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v164))
              : (unint64_t v176 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8)),
                (uint64_t v177 = *v176) != 0))
          {
            while ((*(unsigned char *)(v177 + 3) & 1) != 0)
            {
              uint64_t v177 = *(void *)(v177 + 24);
              if (!v177) {
                goto LABEL_216;
              }
            }
            while (1)
            {
              uint64_t v177 = *(void *)(v177 + 24);
              if (!v177) {
                break;
              }
              if ((*(unsigned char *)(v177 + 3) & 1) == 0) {
                goto LABEL_216;
              }
            }
          }
          else
          {
LABEL_216:
            if (v172 != 124 && v173 != 124) {
              goto LABEL_621;
            }
          }
        }
LABEL_286:
        uint64_t v554 = v163;
        unsigned int v557 = v164;
        uint64_t v549 = *(unsigned __int16 *)(a2 + 44);
        uint64_t v597 = &v599;
        uint64_t v598 = 0x200000000;
        uint64_t v213 = v167;
        sub_1CBA0E058((uint64_t)&v597, 2uLL, 0);
        int v552 = v170;
        if (sub_1CBB7EED8(v213, *(void *)(v154 + 24), *(void *)(v154 + 272), v597))
        {
          if ((v554 & 0x80000000) != 0) {
            __int16 v214 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v554 & 0x7FFFFFFF) + 8);
          }
          else {
            __int16 v214 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v554);
          }
          uint64_t v215 = v171;
          uint64_t v216 = *v214;
          if (v216)
          {
            while ((*(unsigned char *)(v216 + 3) & 1) != 0)
            {
              uint64_t v216 = *(void *)(v216 + 24);
              if (!v216) {
                goto LABEL_292;
              }
            }
            while (1)
            {
              uint64_t v216 = *(void *)(v216 + 24);
              BOOL v217 = v216 == 0;
              if (!v216) {
                break;
              }
              if ((*(unsigned char *)(v216 + 3) & 1) == 0) {
                goto LABEL_293;
              }
            }
            uint64_t v215 = v213;
            unsigned int v218 = v554;
            LODWORD(v554) = v557;
          }
          else
          {
LABEL_292:
            BOOL v217 = 0;
LABEL_293:
            unsigned int v218 = v557;
          }
        }
        else
        {
          BOOL v217 = 0;
          unsigned int v218 = v557;
          uint64_t v215 = v171;
        }
        if (sub_1CBB7EED8(v215, *(void *)(v154 + 24), *(void *)(v154 + 272), v597))
        {
          if ((v218 & 0x80000000) != 0) {
            uint64_t v283 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v283 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v218);
          }
          uint64_t v284 = *v283;
          if (v284)
          {
            while ((*(unsigned char *)(v284 + 3) & 1) != 0)
            {
              uint64_t v284 = *(void *)(v284 + 24);
              if (!v284) {
                goto LABEL_455;
              }
            }
            while (1)
            {
              uint64_t v284 = *(void *)(v284 + 24);
              if (!v284) {
                break;
              }
              if ((*(unsigned char *)(v284 + 3) & 1) == 0) {
                goto LABEL_455;
              }
            }
            int v286 = *(_DWORD *)v597;
            int v558 = *((_DWORD *)v597 + 1);
            uint64_t v593 = (void *)513;
            LODWORD(v594) = 0;
            *(_DWORD *)unint64_t v609 = v286;
            *(_DWORD *)&v609[16] = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 126, &v593, 1, v609, 1, 0);
            uint64_t v593 = (void *)513;
            LODWORD(v594) = 0;
            if (v217)
            {
              int v288 = *(_DWORD *)(*(void *)(v287 + 32) + 4);
              *(_DWORD *)&v609[16] = 0;
              uint64_t v289 = v549;
              int v290 = v554;
            }
            else
            {
              *(_DWORD *)&v609[16] = 0;
              int v288 = v554;
              int v290 = *(_DWORD *)(*(void *)(v287 + 32) + 4);
              uint64_t v289 = v549;
            }
            *(_DWORD *)unint64_t v609 = v288;
            *(_DWORD *)&v609[24] = v290;
            LODWORD(v611) = 0;
            uint64_t v555 = v289 | 0x100000000;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t))(*a4 + 32))(a4, 45, &v593, 1, v609, 2);
            uint64_t v547 = v355;
            unsigned int v550 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v154, "", 0);
            unint64_t v356 = v550 & 0x7FFFFFFF;
            *(void *)(*(void *)(v154 + 24) + 16 * v356) = 4;
            unint64_t v357 = *(unsigned int *)(v154 + 432);
            if (v356 >= v357)
            {
              uint64_t v358 = *(void *)(v154 + 440);
              uint64_t v359 = v356 + 1 - v357;
              if (v356 >= *(unsigned int *)(v154 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v360 = *(_DWORD *)(v154 + 432);
              if (v359)
              {
                uint64_t v361 = (void *)(*v560 + 8 * *(unsigned int *)(v154 + 432));
                uint64_t v362 = ~v356 + v357;
                do
                {
                  *v361++ = v358;
                  BOOL v351 = __CFADD__(v362++, 1);
                }
                while (!v351);
                int v360 = *(_DWORD *)(v154 + 432);
              }
              *(_DWORD *)(v154 + 432) = v360 + v359;
            }
            *(void *)(*(void *)(v154 + 424) + 8 * v356) = 257;
            uint64_t v363 = *(void *)(v154 + 8);
            if (v363) {
              (*(void (**)(uint64_t))(*(void *)v363 + 24))(v363);
            }
            unsigned int v364 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v154, "", 0);
            unint64_t v365 = v364 & 0x7FFFFFFF;
            *(void *)(*(void *)(v154 + 24) + 16 * v365) = 4;
            unint64_t v366 = *(unsigned int *)(v154 + 432);
            if (v365 >= v366)
            {
              uint64_t v367 = *(void *)(v154 + 440);
              uint64_t v368 = v365 + 1 - v366;
              if (v365 >= *(unsigned int *)(v154 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v369 = *(_DWORD *)(v154 + 432);
              if (v368)
              {
                uint64_t v370 = (void *)(*v560 + 8 * *(unsigned int *)(v154 + 432));
                uint64_t v371 = ~v365 + v366;
                do
                {
                  *v370++ = v367;
                  BOOL v351 = __CFADD__(v371++, 1);
                }
                while (!v351);
                int v369 = *(_DWORD *)(v154 + 432);
              }
              *(_DWORD *)(v154 + 432) = v369 + v368;
            }
            *(void *)(*(void *)(v154 + 424) + 8 * v365) = 257;
            uint64_t v372 = *(void *)(v154 + 8);
            if (v372) {
              (*(void (**)(uint64_t))(*(void *)v372 + 24))(v372);
            }
            uint64_t v593 = (void *)__PAIR64__(v364, v550);
            *(_DWORD *)unint64_t v609 = *(_DWORD *)(*(void *)(v547 + 32) + 4);
            *(_DWORD *)&v609[16] = 0;
            sub_1CC738BB8((uint64_t)a4, (char *)&v593, 2, (uint64_t)v609);
            uint64_t v593 = (void *)257;
            LODWORD(v594) = 0;
            *(_DWORD *)unint64_t v609 = v364;
            *(_DWORD *)&v609[16] = 0;
            *(_DWORD *)&v609[24] = v558;
            LODWORD(v611) = 0;
            char v285 = 1;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v593, 1, v609, 2, v555);
            LODWORD(v593) = v552;
            LODWORD(v594) = 1;
            *(_DWORD *)unint64_t v609 = v550;
            *(_DWORD *)&v609[16] = 0;
            *(_DWORD *)&v609[24] = *(_DWORD *)(*(void *)(v373 + 32) + 4);
            LODWORD(v611) = 0;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 76, &v593, 1, v609, 2, 0);
            llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
          }
          else
          {
LABEL_455:
            char v285 = 0;
          }
        }
        else
        {
          char v285 = 0;
        }
        if (v597 != &v599) {
          free(v597);
        }
        if (v285) {
          goto LABEL_996;
        }
LABEL_621:
        int v374 = v583;
        BOOL v375 = v583 == 47 || v583 == 308;
        int v376 = v375;
        int v377 = v577;
        if (!v375 && v577 != 47 && v577 != 308) {
          goto LABEL_652;
        }
        if (v376) {
          unsigned int v378 = v561;
        }
        else {
          unsigned int v378 = v564;
        }
        unint64_t v379 = sub_1CBB7ED5C(v378, v154);
        int v380 = v379;
        unint64_t v381 = HIDWORD(v379);
        if ((_BYTE)v379) {
          BOOL v382 = HIDWORD(v379) == 1;
        }
        else {
          BOOL v382 = 0;
        }
        if (!v382 || v561 != v564) {
          goto LABEL_647;
        }
        int v384 = **((unsigned __int16 **)v572 + 2);
        uint64_t v385 = 96;
        if (v384 == 47) {
          uint64_t v385 = 64;
        }
        uint64_t v386 = *(unsigned int *)(*((void *)v572 + 4) + v385 + 4);
        sub_1CC73C210(*(_DWORD *)(*((void *)v572 + 4) + v385 + 4), v154, (uint64_t)&v597);
        if ((_BYTE)v599)
        {
          if (v598 > 0x40) {
            uint64_t v387 = *(void *)v597;
          }
          else {
            uint64_t v387 = (uint64_t)((void)v597 << -(uint64_t)v598) >> -(uint64_t)v598;
          }
          if (v384 == 47)
          {
            unint64_t v416 = 2 * v387;
            int v588 = *(_DWORD *)(*((void *)v572 + 4) + 36);
            if ((v386 & 0x80000000) != 0
              && (v386 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
            {
              unint64_t v417 = *(void *)(*v560 + 8 * (v386 & 0x7FFFFFFF));
            }
            else
            {
              unint64_t v417 = 0;
            }
            uint64_t v606 = v417;
            int v607 = 0;
            unsigned int v420 = (llvm::LLVMContext *)(unsigned __int16)(v417 >> 3);
            uint64_t v421 = (llvm::LLVMContext *)(unsigned __int16)(v417 >> 19);
            if ((v417 & 2) == 0) {
              uint64_t v421 = (llvm::LLVMContext *)(v417 >> 19);
            }
            if ((v417 & 4) != 0) {
              unsigned int v420 = v421;
            }
            if (v417) {
              uint64_t v422 = (llvm::LLVMContext *)(v417 >> 3);
            }
            else {
              uint64_t v422 = v420;
            }
            uint64_t v423 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], v422);
            uint64_t v424 = llvm::ConstantInt::get(v423, v416, (const llvm::APInt *)1);
            uint64_t v425 = (*(uint64_t (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v606, v424);
            LODWORD(v593) = v153;
            LODWORD(v594) = 1;
            *(_DWORD *)unint64_t v609 = v588;
            *(_DWORD *)&v609[16] = 0;
            *(void *)&v609[24] = v425;
            uint64_t v610 = v426;
            LODWORD(v611) = 1;
            (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 47, &v593, 1, v609, 2, 0);
            goto LABEL_874;
          }
          if ((v386 & 0x80000000) != 0
            && (v386 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
          {
            uint64_t v418 = *(void *)(*v560 + 8 * (v386 & 0x7FFFFFFF));
          }
          else
          {
            uint64_t v418 = 0;
          }
          *(void *)unint64_t v609 = v418;
          unsigned int v428 = sub_1CB8F1DC4((unint64_t *)v609);
          int v429 = *(unsigned __int8 *)(*((void *)v572 + 4) + 144);
          uint64_t v430 = v427;
          if (v427 == 1)
          {
            uint64_t v430 = 1;
          }
          if (v598 > 0x40) {
            uint64_t v431 = *(void *)v597;
          }
          else {
            uint64_t v431 = (uint64_t)((void)v597 << -(uint64_t)v598) >> -(uint64_t)v598;
          }
          if (v428 > 0x40) {
            operator new[]();
          }
          if (v428) {
            unint64_t v447 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v428;
          }
          else {
            unint64_t v447 = 0;
          }
          if (v429 == 2)
          {
            uint64_t v448 = 2 * ((uint64_t)((v447 & v431) << -(char)v428) >> -(char)v428);
          }
          else
          {
            unint64_t v449 = v447 & v431;
            uint64_t v448 = 2 * v449;
            if (v429 == 1)
            {
              unint64_t v488 = 2 * v449;
              if (v430 == 1) {
              if ((v428 & 0xFFFFFFC0) != 0)
              }
              {
                uint64_t v448 = v488;
              }
              else
              {
                uint64_t v448 = v488;
                if (0xFFFFFFFFFFFFFFFFLL >> -(char)v428 < v488)
                {
LABEL_824:
                  char v489 = 0;
                  goto LABEL_881;
                }
              }
LABEL_867:
              LODWORD(v593) = v153;
              LODWORD(v594) = 1;
              uint64_t v509 = *((void *)v572 + 4);
              *(_DWORD *)unint64_t v609 = *(_DWORD *)(v509 + 36);
              *(_DWORD *)&v609[16] = 0;
              *(void *)&v609[24] = *(void *)(v509 + 80);
              LODWORD(v611) = 3;
              if ((v386 & 0x80000000) != 0
                && (v386 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
              {
                unint64_t v510 = *(void *)(*v560 + 8 * (v386 & 0x7FFFFFFF));
              }
              else
              {
                unint64_t v510 = 0;
              }
              uint64_t v606 = v510;
              int v607 = 0;
              unint64_t v511 = v448;
              if (v510)
              {
                unint64_t v512 = (v510 >> 3);
              }
              else if ((v510 & 4) != 0)
              {
                if ((v510 & 2) != 0) {
                  unint64_t v512 = (unsigned __int16)(v510 >> 19);
                }
                else {
                  unint64_t v512 = (v510 >> 19);
                }
              }
              else
              {
                unint64_t v512 = (unsigned __int16)(v510 >> 3);
              }
              uint64_t v513 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)v512);
              unsigned int v514 = llvm::ConstantInt::get(v513, v511, (const llvm::APInt *)1);
              uint64_t v612 = (*(uint64_t (**)(void *, uint64_t *, void *))(*a4 + 16))(a4, &v606, v514);
              uint64_t v613 = v515;
              LODWORD(v614) = 1;
              *((void *)&v614 + 1) = *(void *)(*((void *)v572 + 4) + 144);
              LODWORD(v616) = 3;
              (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 308, &v593, 1, v609, 4, 0);
LABEL_874:
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
              llvm::MachineInstr::eraseFromParent(v572);
              if ((v386 & 0x80000000) != 0) {
                BOOL v516 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v386 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v516 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v386);
              }
              uint64_t v517 = *v516;
              if (v517)
              {
                if ((*(unsigned char *)(v517 + 3) & 1) == 0)
                {
                  char v489 = 1;
                  goto LABEL_881;
                }
                char v489 = 1;
                while (1)
                {
                  uint64_t v517 = *(void *)(v517 + 24);
                  if (!v517) {
                    break;
                  }
                  if ((*(unsigned char *)(v517 + 3) & 1) == 0) {
                    goto LABEL_881;
                  }
                }
              }
              if ((v386 & 0x80000000) != 0) {
                uint64_t v522 = (uint64_t *)(*(void *)(v154 + 24) + 16 * (v386 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v522 = (uint64_t *)(*(void *)(v154 + 272) + 8 * v386);
              }
              uint64_t v523 = *v522;
              if (v523
                && ((*(unsigned char *)(v523 + 3) & 1) != 0
                 || (uint64_t v523 = *(void *)(v523 + 24)) != 0 && (*(unsigned char *)(v523 + 3) & 1) != 0))
              {
                unsigned int v524 = *(llvm::MachineInstr **)(v523 + 8);
              }
              else
              {
                unsigned int v524 = 0;
              }
              llvm::MachineInstr::eraseFromParent(v524);
              char v489 = 1;
LABEL_881:
              if ((_BYTE)v599 && v598 >= 0x41 && v597) {
                MEMORY[0x1D25D9CB0](v597, 0x1000C8000313F17);
              }
              if (v489) {
                goto LABEL_996;
              }
              goto LABEL_886;
            }
            if (v429) {
              goto LABEL_867;
            }
          }
          if (v430 == 1)
          {
            uint64_t v545 = v448;
            uint64_t v448 = v545;
          }
          if ((v428 & 0xFFFFFFC0) == 0)
          {
            uint64_t v450 = -1 << (v428 - 1);
            if (v450 > v448 || v448 > ~v450) {
              goto LABEL_824;
            }
          }
          goto LABEL_867;
        }
        int v377 = v577;
LABEL_647:
        if (v380) {
          BOOL v388 = v381 == 0;
        }
        else {
          BOOL v388 = 1;
        }
        int v374 = v583;
        if (!v388) {
          goto LABEL_886;
        }
LABEL_652:
        if (v374 == 124 || v374 == 127 || v377 == 127 || v377 == 124)
        {
LABEL_886:
          long long v518 = *((_OWORD *)a1 + 2);
          LOWORD(v593) = *(_WORD *)(a2 + 44);
          int v519 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          LODWORD(v597) = v519;
          if ((v519 & 0x80000000) == 0) {
            goto LABEL_923;
          }
          uint64_t v520 = v519 & 0x7FFFFFFF;
          if (v520 >= *(_DWORD *)(v518 + 432)) {
            goto LABEL_923;
          }
          uint64_t v521 = *(void *)(*(void *)(v518 + 424) + 8 * v520);
          if (v521 != 257 && v521 != 129) {
            goto LABEL_923;
          }
          *(void *)unint64_t v609 = a2;
          *(_OWORD *)&v609[8] = v518;
          *(void *)&v609[24] = a4;
          uint64_t v610 = (uint64_t)&v597;
          v611 = &v593;
          uint64_t v57 = 1;
          if ((sub_1CBB8B78C((llvm::MachineInstr **)v609, 1u) & 1) == 0) {
            uint64_t v57 = sub_1CBB8B78C((llvm::MachineInstr **)v609, 2u);
          }
          goto LABEL_924;
        }
        uint64_t v597 = (void *)257;
        LODWORD(v598) = 0;
        uint64_t v389 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
        unsigned int v391 = *(llvm::ConstantInt **)v389;
        unsigned int v392 = *(_DWORD *)(v389 + 8);
        *(_DWORD *)&v609[8] = v392 >> 8;
        if (v392 >> 8 >= 0x41) {
          operator new[]();
        }
        *(void *)unint64_t v609 = 0;
        uint64_t v393 = llvm::ConstantInt::get(v391, (llvm::LLVMContext *)v609, v390);
        if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
          MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
        }
        (*(void (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v393);
        uint64_t v546 = v394;
        uint64_t v597 = (void *)129;
        LODWORD(v598) = 0;
        uint64_t v395 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
        uint64_t v397 = *(llvm::ConstantInt **)v395;
        unsigned int v398 = *(_DWORD *)(v395 + 8);
        *(_DWORD *)&v609[8] = v398 >> 8;
        if (v398 >> 8 >= 0x41) {
          operator new[]();
        }
        *(void *)unint64_t v609 = 0;
        int v399 = llvm::ConstantInt::get(v397, (llvm::LLVMContext *)v609, v396);
        if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
          MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
        }
        uint64_t v400 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v399);
        uint64_t v553 = v401;
        uint64_t v556 = v400;
        uint64_t v597 = (void *)129;
        LODWORD(v598) = 0;
        uint64_t v402 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x10);
        unint64_t v404 = *(llvm::ConstantInt **)v402;
        unsigned int v405 = *(_DWORD *)(v402 + 8);
        *(_DWORD *)&v609[8] = v405 >> 8;
        if (v405 >> 8 > 0x40) {
          operator new[]();
        }
        if (v405 <= 0xFF) {
          LOBYTE(v406) = 0;
        }
        else {
          unint64_t v406 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v405) + 63);
        }
        *(void *)unint64_t v609 = v406 & 1;
        uint64_t v407 = llvm::ConstantInt::get(v404, (llvm::LLVMContext *)v609, v403);
        uint64_t v408 = v559;
        if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
          MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
        }
        uint64_t v409 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v407);
        size_t v548 = v410;
        uint64_t v551 = v409;
        uint64_t v597 = &v599;
        uint64_t v598 = 0x200000000;
        sub_1CBA0E058((uint64_t)&v597, 2uLL, 0);
        uint64_t v593 = &v595;
        uint64_t v594 = 0x200000000;
        sub_1CBA0E058((uint64_t)&v593, 2uLL, 0);
        int v411 = sub_1CBB7EED8((uint64_t)v572, *(void *)(v154 + 24), *(void *)(v154 + 272), v597);
        int v412 = sub_1CBB7EED8(v559, *(void *)(v154 + 24), *(void *)(v154 + 272), v593);
        if (v411)
        {
          uint64_t v413 = (unsigned int *)((char *)v597 + 4);
          unsigned int v414 = *(_DWORD *)v597;
          goto LABEL_710;
        }
        if (v583 == 76)
        {
          if (*((_DWORD *)v572 + 10) == 3)
          {
            uint64_t v432 = *((void *)v572 + 4);
            unsigned int v414 = *(_DWORD *)(v432 + 36);
            uint64_t v413 = (unsigned int *)(v432 + 68);
            goto LABEL_710;
          }
        }
        else if (v583 == 126)
        {
          unsigned int v414 = *(_DWORD *)(*((void *)v572 + 4) + 36);
          if ((v414 & 0x80000000) == 0
            || (v414 & 0x7FFFFFFF) >= *(_DWORD *)(v154 + 432)
            || *(void *)(*v560 + 8 * (v414 & 0x7FFFFFFF)) != 257)
          {
            uint64_t v606 = 257;
            int v607 = 0;
            *(_DWORD *)unint64_t v609 = v414;
            *(_DWORD *)&v609[16] = 0;
            (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 126, &v606, 1, v609, 1, 0);
            unsigned int v414 = *(_DWORD *)(*(void *)(v415 + 32) + 4);
          }
          uint64_t v413 = (unsigned int *)(*(void *)(v546 + 32) + 4);
          goto LABEL_710;
        }
        LODWORD(v606) = v561;
        int v608 = 0;
        *(void *)unint64_t v609 = &v609[16];
        *(void *)&v609[16] = 257;
        *(_DWORD *)&v609[24] = 0;
        uint64_t v610 = 257;
        LODWORD(v611) = 0;
        *(void *)&v609[8] = 0x800000002;
        (*(void (**)(void *, uint64_t, unsigned char *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 74, &v609[16], 2, &v606, 1, 0);
        uint64_t v434 = v433;
        if (*(unsigned char **)v609 != &v609[16]) {
          free(*(void **)v609);
        }
        uint64_t v435 = *(void *)(v434 + 32);
        unsigned int v414 = *(_DWORD *)(v435 + 4);
        uint64_t v413 = (unsigned int *)(v435 + 36);
LABEL_710:
        unsigned int v589 = *v413;
        if (v412)
        {
          unsigned int v436 = *(_DWORD *)v593;
          unsigned int v437 = *((_DWORD *)v593 + 1);
          goto LABEL_753;
        }
        if (v577 == 126)
        {
          unsigned int v436 = *(_DWORD *)(*(void *)(v559 + 32) + 36);
          if ((v436 & 0x80000000) == 0
            || (v436 & 0x7FFFFFFF) >= *(_DWORD *)(v154 + 432)
            || *(void *)(*v560 + 8 * (v436 & 0x7FFFFFFF)) != 257)
          {
            uint64_t v606 = 257;
            int v607 = 0;
            *(_DWORD *)unint64_t v609 = v436;
            *(_DWORD *)&v609[16] = 0;
            (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 126, &v606, 1, v609, 1, 0);
            unsigned int v436 = *(_DWORD *)(*(void *)(v438 + 32) + 4);
          }
          uint64_t v439 = *(void *)(v546 + 32);
          goto LABEL_752;
        }
        sub_1CC73C210(v564, v154, (uint64_t)v609);
        if (v609[16])
        {
          if (*(_DWORD *)&v609[8] < 0x41u)
          {
            unint64_t v454 = (uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8];
            *(void *)unint64_t v609 = 257;
            *(_DWORD *)&v609[8] = 0;
            uint64_t v455 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
            uint64_t v456 = llvm::ConstantInt::get(v455, v454, (const llvm::APInt *)1);
            (*(void (**)(void *, unsigned char *, void *))(*a4 + 16))(a4, v609, v456);
            unsigned int v436 = *(_DWORD *)(*(void *)(v457 + 32) + 4);
            *(void *)unint64_t v609 = 257;
            *(_DWORD *)&v609[8] = 0;
            uint64_t v458 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)0x20);
            uint64_t v459 = llvm::ConstantInt::get(v458, HIDWORD(v454), (const llvm::APInt *)1);
            (*(void (**)(void *, unsigned char *, void *))(*a4 + 16))(a4, v609, v459);
            uint64_t v439 = *(void *)(v460 + 32);
LABEL_752:
            unsigned int v437 = *(_DWORD *)(v439 + 4);
            goto LABEL_753;
          }
          if (*(void *)v609) {
            MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
          }
          uint64_t v408 = v559;
        }
        if (v577 == 76 && *(_DWORD *)(v408 + 40) == 3)
        {
          uint64_t v440 = *(void *)(v408 + 32);
          unsigned int v436 = *(_DWORD *)(v440 + 36);
          unsigned int v437 = *(_DWORD *)(v440 + 68);
        }
        else
        {
          LODWORD(v606) = v564;
          int v608 = 0;
          *(void *)unint64_t v609 = &v609[16];
          *(void *)&v609[16] = 257;
          *(_DWORD *)&v609[24] = 0;
          uint64_t v610 = 257;
          LODWORD(v611) = 0;
          *(void *)&v609[8] = 0x800000002;
          (*(void (**)(void *, uint64_t, unsigned char *, uint64_t, uint64_t *, uint64_t, void))(*a4 + 32))(a4, 74, &v609[16], 2, &v606, 1, 0);
          uint64_t v452 = v451;
          if (*(unsigned char **)v609 != &v609[16]) {
            free(*(void **)v609);
          }
          uint64_t v453 = *(void *)(v452 + 32);
          unsigned int v436 = *(_DWORD *)(v453 + 4);
          unsigned int v437 = *(_DWORD *)(v453 + 36);
        }
LABEL_753:
        sub_1CC73C210(v414, v154, (uint64_t)v609);
        if (v609[16])
        {
          if (*(_DWORD *)&v609[8] >= 0x41u)
          {
            if (*(void *)v609) {
              MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
            }
          }
          else if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8]))
          {
            unsigned int v461 = v436;
            goto LABEL_1008;
          }
        }
        sub_1CC73C210(v436, v154, (uint64_t)v609);
        if (v609[16])
        {
          if (*(_DWORD *)&v609[8] >= 0x41u)
          {
            if (*(void *)v609) {
              MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
            }
            if ((v414 & 0x80000000) == 0) {
              goto LABEL_1006;
            }
LABEL_760:
            if ((v414 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
            {
              uint64_t v462 = *(void *)(*v560 + 8 * (v414 & 0x7FFFFFFF));
LABEL_1007:
              uint64_t v606 = v462;
              int v607 = 0;
              *(_DWORD *)unint64_t v609 = v414;
              *(_DWORD *)&v609[16] = 0;
              *(_DWORD *)&v609[24] = v436;
              LODWORD(v611) = 0;
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v606, 1, v609, 2, v568 | 0x100000000);
              unsigned int v461 = *(_DWORD *)(*(void *)(v532 + 32) + 4);
LABEL_1008:
              uint64_t v606 = 129;
              int v607 = 0;
              *(_DWORD *)unint64_t v609 = 36;
              *(_DWORD *)&v609[16] = 2;
              unsigned int v533 = v461;
              *(_DWORD *)&v609[24] = v461;
              LODWORD(v611) = 0;
              LODWORD(v612) = v414;
              LODWORD(v614) = 0;
              *((void *)&v614 + 1) = v551;
              size_t v615 = v548;
              LODWORD(v616) = 1;
              *((void *)&v616 + 1) = v556;
              *(void *)&long long v617 = v553;
              DWORD2(v617) = 1;
              uint64_t v534 = (*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 51, &v606, 1, v609, 5, 0);
              uint64_t v606 = 257;
              int v607 = 0;
              *(void *)unint64_t v609 = v534;
              *(void *)&v609[8] = v535;
              *(_DWORD *)&v609[16] = 1;
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 126, &v606, 1, v609, 1, 0);
              uint64_t v537 = v536;
              unsigned int v538 = v589;
              sub_1CC73C210(v589, v154, (uint64_t)v609);
              if (v609[16])
              {
                if (*(_DWORD *)&v609[8] >= 0x41u)
                {
                  if (*(void *)v609) {
                    MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                  }
                  unsigned int v538 = v589;
                }
                else if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8]))
                {
                  goto LABEL_1026;
                }
              }
              sub_1CC73C210(v437, v154, (uint64_t)v609);
              if (v609[16])
              {
                if (*(_DWORD *)&v609[8] >= 0x41u)
                {
                  if (*(void *)v609) {
                    MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                  }
                  unsigned int v538 = v589;
                  if ((v589 & 0x80000000) == 0) {
                    goto LABEL_1024;
                  }
LABEL_1015:
                  if ((v538 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
                  {
                    uint64_t v539 = *(void *)(*v560 + 8 * (v538 & 0x7FFFFFFF));
LABEL_1025:
                    uint64_t v606 = v539;
                    int v607 = 0;
                    *(_DWORD *)unint64_t v609 = v538;
                    *(_DWORD *)&v609[16] = 0;
                    *(_DWORD *)&v609[24] = v437;
                    LODWORD(v611) = 0;
                    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v606, 1, v609, 2, v568 | 0x100000000);
                    unsigned int v437 = *(_DWORD *)(*(void *)(v540 + 32) + 4);
LABEL_1026:
                    unsigned int v541 = *(_DWORD *)(*(void *)(v537 + 32) + 4);
                    sub_1CC73C210(v541, v154, (uint64_t)v609);
                    if (v609[16])
                    {
                      if (*(_DWORD *)&v609[8] >= 0x41u)
                      {
                        if (*(void *)v609) {
                          MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                        }
                      }
                      else if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8]))
                      {
                        goto LABEL_1045;
                      }
                    }
                    sub_1CC73C210(v437, v154, (uint64_t)v609);
                    if (v609[16])
                    {
                      if (*(_DWORD *)&v609[8] >= 0x41u)
                      {
                        if (*(void *)v609) {
                          MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
                        }
                        if ((v541 & 0x80000000) == 0) {
                          goto LABEL_1043;
                        }
LABEL_1033:
                        if ((v541 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v154 + 432))
                        {
                          uint64_t v542 = *(void *)(*v560 + 8 * (v541 & 0x7FFFFFFF));
LABEL_1044:
                          uint64_t v606 = v542;
                          int v607 = 0;
                          *(_DWORD *)unint64_t v609 = v541;
                          *(_DWORD *)&v609[16] = 0;
                          *(_DWORD *)&v609[24] = v437;
                          LODWORD(v611) = 0;
                          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v606, 1, v609, 2, v568 | 0x100000000);
                          unsigned int v437 = *(_DWORD *)(*(void *)(v543 + 32) + 4);
LABEL_1045:
                          LODWORD(v606) = v153;
                          int v607 = 1;
                          *(_DWORD *)unint64_t v609 = v533;
                          *(_DWORD *)&v609[16] = 0;
                          *(_DWORD *)&v609[24] = v437;
                          LODWORD(v611) = 0;
                          (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 76, &v606, 1, v609, 2, 0);
                          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
                          if (v593 != &v595) {
                            free(v593);
                          }
                          if (v597 != &v599) {
                            free(v597);
                          }
                          goto LABEL_996;
                        }
LABEL_1043:
                        uint64_t v542 = 0;
                        goto LABEL_1044;
                      }
                      if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8]))
                      {
                        unsigned int v437 = v541;
                        goto LABEL_1045;
                      }
                    }
                    if ((v541 & 0x80000000) == 0) {
                      goto LABEL_1043;
                    }
                    goto LABEL_1033;
                  }
LABEL_1024:
                  uint64_t v539 = 0;
                  goto LABEL_1025;
                }
                if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8]))
                {
                  unsigned int v437 = v538;
                  goto LABEL_1026;
                }
              }
              if ((v538 & 0x80000000) == 0) {
                goto LABEL_1024;
              }
              goto LABEL_1015;
            }
LABEL_1006:
            uint64_t v462 = 0;
            goto LABEL_1007;
          }
          unsigned int v461 = v414;
          if (!((uint64_t)(*(void *)v609 << -v609[8]) >> -v609[8])) {
            goto LABEL_1008;
          }
        }
        if ((v414 & 0x80000000) == 0) {
          goto LABEL_1006;
        }
        goto LABEL_760;
    }
  }
  if (v8 - 128 >= 2) {
    goto LABEL_923;
  }
  uint64_t v34 = *(_DWORD **)(a2 + 32);
  int v35 = v34[1];
  if ((v35 & 0x80000000) == 0) {
    goto LABEL_923;
  }
  uint64_t v36 = a1[4];
  if ((v35 & 0x7FFFFFFFu) >= *(_DWORD *)(v36 + 432)) {
    goto LABEL_923;
  }
  int v37 = v34[9];
  unsigned int v38 = v34[17];
  int v39 = *(void **)(*(void *)(v36 + 424) + 8 * (v35 & 0x7FFFFFFF));
  uint64_t v593 = v39;
  if (v39 != (void *)257 && v39 != (void *)129) {
    goto LABEL_923;
  }
  sub_1CC73C210(v38, v36, (uint64_t)v609);
  if (!v609[16]) {
    goto LABEL_923;
  }
  if (*(_DWORD *)&v609[8] >= 0x41u)
  {
LABEL_337:
    if (*(void *)v609) {
      MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
    }
    goto LABEL_923;
  }
  uint64_t v40 = (uint64_t)(*(void *)v609 << -(uint64_t)*(unsigned int *)&v609[8]) >> -(uint64_t)*(unsigned int *)&v609[8];
  uint64_t v42 = sub_1CB8F1DC4((unint64_t *)&v593);
  if (v41 == 1) {
  if (v40 != v42 - 1)
  }
    goto LABEL_923;
  uint64_t v597 = v593;
  LODWORD(v598) = 0;
  uint64_t v43 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v593 >> 3);
  uint64_t v44 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v593 >> 19);
  if ((v593 & 2) == 0) {
    uint64_t v44 = (llvm::LLVMContext *)((unint64_t)v593 >> 19);
  }
  if ((v593 & 4) != 0) {
    uint64_t v43 = v44;
  }
  if (v593) {
    uint64_t v45 = (llvm::LLVMContext *)((unint64_t)v593 >> 3);
  }
  else {
    uint64_t v45 = v43;
  }
  uint64_t v46 = llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], v45);
  uint64_t v48 = *(llvm::ConstantInt **)v46;
  unsigned int v49 = *(_DWORD *)(v46 + 8);
  *(_DWORD *)&v609[8] = v49 >> 8;
  if (v49 >> 8 >= 0x41) {
    operator new[]();
  }
  *(void *)unint64_t v609 = 0;
  uint64_t v50 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)v609, v47);
  if (*(_DWORD *)&v609[8] >= 0x41u && *(void *)v609) {
    MEMORY[0x1D25D9CB0](*(void *)v609, 0x1000C8000313F17);
  }
  uint64_t v51 = (*(uint64_t (**)(void *, void **, void *))(*a4 + 16))(a4, &v597, v50);
  uint64_t v53 = v52;
  if (**(_WORD **)(a2 + 16) == 129) {
    unint64_t v54 = -1;
  }
  else {
    unint64_t v54 = 1;
  }
  *(void *)unint64_t v609 = v593;
  *(_DWORD *)&v609[8] = 0;
  if (v593)
  {
    unint64_t v55 = ((unint64_t)v593 >> 3);
  }
  else if ((v593 & 4) != 0)
  {
    if ((v593 & 2) != 0) {
      unint64_t v55 = (unsigned __int16)((unint64_t)v593 >> 19);
    }
    else {
      unint64_t v55 = ((unint64_t)v593 >> 19);
    }
  }
  else
  {
    unint64_t v55 = (unsigned __int16)((unint64_t)v593 >> 3);
  }
  unsigned int v56 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a4[1], (llvm::LLVMContext *)v55);
  uint64_t v57 = 1;
  uint64_t v58 = llvm::ConstantInt::get(v56, v54, (const llvm::APInt *)1);
  uint64_t v59 = (*(uint64_t (**)(void *, unsigned char *, void *))(*a4 + 16))(a4, v609, v58);
  LODWORD(v597) = v35;
  LODWORD(v598) = 1;
  *(_DWORD *)unint64_t v609 = 40;
  *(_DWORD *)&v609[16] = 2;
  *(_DWORD *)&v609[24] = v37;
  LODWORD(v611) = 0;
  uint64_t v612 = v51;
  uint64_t v613 = v53;
  LODWORD(v614) = 1;
  *((void *)&v614 + 1) = v59;
  size_t v615 = v60;
  LODWORD(v616) = 1;
  *((void *)&v616 + 1) = v51;
  *(void *)&long long v617 = v53;
  DWORD2(v617) = 1;
  (*(void (**)(void *, uint64_t, void **, uint64_t, unsigned char *, uint64_t, void))(*a4 + 32))(a4, 51, &v597, 1, v609, 5, 0);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
LABEL_924:
  if (v603 != v605) {
    free(v603);
  }
  return v57;
}

uint64_t sub_1CBB87C40(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a3 + 8 * a1);
  if (a1 < 0) {
    uint64_t v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  uint64_t v4 = *v3;
  if (!*v3) {
    return 1;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(v4 + 8);
LABEL_9:
  uint64_t v5 = 0;
  unsigned int v8 = **(unsigned __int16 **)(v7 + 16);
  if (v8 > 0xA2)
  {
    if (v8 - 163 > 0x38 || ((1 << (v8 + 93)) & 0x18800000038540DLL) == 0)
    {
      uint64_t v10 = v8 - 272;
      if (v10 > 0x3F) {
        goto LABEL_28;
      }
      if (((1 << (v8 - 16)) & 0x20000040000000C1) != 0) {
        goto LABEL_24;
      }
      if (v10 != 63)
      {
LABEL_28:
        if (v8 == 357) {
          goto LABEL_24;
        }
        return v5;
      }
      goto LABEL_22;
    }
LABEL_24:
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return 1;
      }
      if ((*(unsigned char *)(v4 + 3) & 1) == 0 && *(void *)(v4 + 8) != v7)
      {
        uint64_t v7 = *(void *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  if (v8 != 51)
  {
    if (v8 == 54 || v8 == 85) {
      goto LABEL_24;
    }
    return v5;
  }
LABEL_22:
  uint64_t v11 = *(void *)(v7 + 32);
  if (*(_DWORD *)(v11 + 132) != a1 && *(_DWORD *)(v11 + 164) != a1) {
    goto LABEL_24;
  }
  return 0;
}

uint64_t sub_1CBB87D58(unsigned int a1, uint64_t a2)
{
  if ((a1 & 0x80000000) != 0) {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 1;
  }
  while ((*(unsigned char *)(v5 + 3) & 1) != 0)
  {
    uint64_t v5 = *(void *)(v5 + 24);
    if (!v5) {
      return 1;
    }
  }
  uint64_t v7 = (void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 8);
  int v9 = **(unsigned __int16 **)(v8 + 16);
  if ((v9 - 47) < 0xFFFFFFFE) {
    return 0;
  }
LABEL_9:
  uint64_t v10 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
  if (v10 != a1)
  {
    if ((v10 & 0x80000000) != 0) {
      uint64_t v11 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v11 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
    }
    uint64_t v12 = *v11;
    if (v12)
    {
      if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3))
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13)
        {
          if (**(_WORD **)(v13 + 16) == 127 && *(_DWORD *)(v13 + 40) == 3)
          {
            sub_1CC73C210(*(_DWORD *)(*(void *)(v13 + 32) + 68), a2, (uint64_t)&v18);
            if (v20)
            {
              if (v19 >= 0x41)
              {
                if (v18) {
                  MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
                }
              }
              else if (v9 == 45 && v18 << -(uint64_t)v19 >> -(uint64_t)v19 < 5)
              {
                return 0;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = *(unsigned int *)(*(void *)(v8 + 32) + 68);
    if ((v14 & 0x80000000) != 0) {
      uint64_t v15 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v15 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v14);
    }
    uint64_t v16 = *v15;
    if (v16)
    {
      if (*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3))
      {
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17)
        {
          if (**(_WORD **)(v17 + 16) == 127 && *(_DWORD *)(v17 + 40) == 3)
          {
            sub_1CC73C210(*(_DWORD *)(*(void *)(v17 + 32) + 68), a2, (uint64_t)&v18);
            if (v20)
            {
              if (v19 >= 0x41)
              {
                if (v18) {
                  MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
                }
                goto LABEL_22;
              }
              if (v18 << -(uint64_t)v19 >> -(uint64_t)v19 >= 5) {
                goto LABEL_22;
              }
              return 0;
            }
          }
        }
      }
    }
LABEL_22:
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 24);
      if (!v5) {
        return 1;
      }
      if ((*(unsigned char *)(v5 + 3) & 1) == 0)
      {
        uint64_t v8 = *(void *)(v5 + 8);
        if (v8 != *v7)
        {
          uint64_t result = 0;
          uint64_t v7 = (void *)(v5 + 8);
          int v9 = **(unsigned __int16 **)(v8 + 16);
          if ((v9 - 47) > 0xFFFFFFFD) {
            goto LABEL_9;
          }
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBB87FEC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a3 + 8 * a1);
  if (a1 < 0) {
    uint64_t v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  while ((*(unsigned char *)(v4 + 3) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4) {
      return 0;
    }
  }
  uint64_t v6 = *(void *)(v4 + 8);
LABEL_8:
  int v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 != 47 && v7 != 308)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return 0;
      }
      if ((*(unsigned char *)(v4 + 3) & 1) == 0 && *(void *)(v4 + 8) != v6)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        goto LABEL_8;
      }
    }
  }
  return 1;
}

uint64_t sub_1CBB8806C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(unsigned int *)(v6 + 36);
  if ((v7 & 0x80000000) != 0) {
    uint64_t v8 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v7);
  }
  uint64_t v9 = *v8;
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v6 + 68);
    if (*(unsigned char *)(v9 + 3) & 1) != 0 || (uint64_t v9 = *(void *)(v9 + 24)) != 0 && (*(unsigned char *)(v9 + 3))
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11 && **(_WORD **)(v11 + 16) == 177 && *(_DWORD *)(v11 + 40) == 2)
      {
        uint64_t v12 = (uint64_t *)((v10 & 0x80000000) != 0
                        ? *(void *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                        : *(void *)(a1 + 272) + 8 * v10);
        if ((uint64_t v13 = *v12) == 0
          || (*(unsigned char *)(v13 + 3) & 1) == 0 && ((uint64_t v13 = *(void *)(v13 + 24)) == 0 || (*(unsigned char *)(v13 + 3) & 1) == 0)
          || (uint64_t v14 = *(void *)(v13 + 8)) == 0
          || **(_WORD **)(v14 + 16) != 177
          || *(_DWORD *)(v14 + 40) != 2)
        {
          if (**(_WORD **)(a2 + 16) == 163) {
            goto LABEL_24;
          }
          uint64_t v16 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 344);
          if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 176))(v16, 18)) {
            goto LABEL_24;
          }
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v16 + 128))(&v36, v16, 18);
          uint64_t v17 = *(void *)(*(uint64_t (**)(void *))(*v36 + 32))(v36);
          uint64_t v18 = v36;
          uint64_t v36 = 0;
          if (v18) {
            (*(void (**)(void *))(*v18 + 8))(v18);
          }
          if (!v17) {
            goto LABEL_24;
          }
          if ((v10 & 0x80000000) != 0) {
            unsigned int v19 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v19 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v10);
          }
          uint64_t v20 = *v19;
          if ((*(unsigned char *)(v20 + 3) & 1) == 0) {
            uint64_t v20 = *(void *)(v20 + 24);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          if (**(_WORD **)(v21 + 16) != 310) {
            goto LABEL_24;
          }
          uint64_t v22 = *(unsigned int *)(*(void *)(v21 + 32) + 36);
          if ((v22 & 0x80000000) != 0) {
            uint64_t v23 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v23 = (uint64_t *)(*(void *)(a1 + 272) + 8 * v22);
          }
          uint64_t v24 = *v23;
          if ((*(unsigned char *)(v24 + 3) & 1) == 0) {
            uint64_t v24 = *(void *)(v24 + 24);
          }
          uint64_t v25 = *(void *)(v24 + 8);
          if (**(_WORD **)(v25 + 16) != 285) {
            goto LABEL_24;
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v25 + 32) + 36), a1, (uint64_t)&v36);
          if (!v38) {
            goto LABEL_24;
          }
          unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 400))(v16, v17);
          if (v37 >= 0x41)
          {
            int v28 = 0;
            int64_t v29 = ((unint64_t)v37 + 63) >> 6;
            do
            {
              if (v29-- < 1) {
                break;
              }
              unint64_t v31 = v36[v29];
              v28 += __clz(v31);
            }
            while (!v31);
            unsigned int v32 = v37 | 0xFFFFFFC0;
            if ((v37 & 0x3F) == 0) {
              unsigned int v32 = 0;
            }
            unsigned int v33 = v37 - v28 - v32;
            uint64_t v27 = v36;
            if (v33 > 0x40)
            {
              if (v38 && v36) {
                MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
              }
              goto LABEL_24;
            }
          }
          else
          {
            uint64_t v27 = (uint64_t *)&v36;
          }
          uint64_t v34 = v26;
          uint64_t v35 = *v27;
          if (v38 && v37 >= 0x41)
          {
            if (v36) {
              MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
            }
          }
          if (v35 == v34) {
            return 0;
          }
LABEL_24:
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a2);
          llvm::MachineOperand::setReg(v6 + 32, v10);
          llvm::MachineOperand::setReg(v6 + 64, v7);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a2);
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBB88498(void *a1, uint64_t a2, unsigned int a3)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 32) + 32 * a3;
  uint64_t v7 = *(void *)(*a1 + 272);
  uint64_t v9 = (_DWORD *)(v6 + 4);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  if ((*(_DWORD *)(v6 + 4) & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v8);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    return 0;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11 || (*(unsigned char *)(v11 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12 || **(_WORD **)(v12 + 16) != 120) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 48);
  if ((v8 & 0x80000000) != 0
    && (unsigned int v14 = v8 & 0x7FFFFFFF, v14 < *(_DWORD *)(v7 + 432))
    && (*(void *)(*(void *)(v7 + 424) + 8 * v14) & 0x8000000000000000) != 0)
  {
    uint64_t v16 = **(llvm::ConstantFP ***)v13;
    llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
  }
  else
  {
    int v15 = *(_DWORD *)(v13 + 32);
    if (v15 == 32)
    {
      uint64_t v16 = **(llvm::ConstantFP ***)v13;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
    }
    else
    {
      uint64_t v16 = **(llvm::ConstantFP ***)v13;
      if (v15 == 16) {
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
      }
      else {
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v40, (const llvm::APInt **)(v13 + 24));
      }
    }
  }
  llvm::ConstantFP::get(v16, (llvm::LLVMContext *)v39, v17);
  if ((_UNKNOWN *)v40 == &unk_1CFB2E344)
  {
    sub_1CB845718(v41);
  }
  else if ((*(_DWORD *)(v40 + 8) - 64) <= 0xFFFFFF7F && v41[0])
  {
    MEMORY[0x1D25D9CB0](v41[0], 0x1000C8000313F17);
  }
  uint64_t v18 = a1[1];
  *(void *)(v18 + 40) = *(void *)(v12 + 24);
  *(void *)(v18 + 48) = v12;
  uint64_t v19 = a1[1];
  if ((*v9 & 0x80000000) != 0
    && (uint64_t v20 = *(void *)(v5 + 272), v21 = *v9 & 0x7FFFFFFF, v21 < *(_DWORD *)(v20 + 432)))
  {
    uint64_t v22 = *(void *)(*(void *)(v20 + 424) + 8 * v21);
  }
  else
  {
    uint64_t v22 = 0;
  }
  *(void *)int v39 = v22;
  LODWORD(v40) = 0;
  (*(void (**)(uint64_t, BOOL *))(*(void *)v19 + 24))(v19, v39);
  uint64_t v24 = v23;
  (*(void (**)(void, uint64_t))(**(void **)(v5 + 280) + 32))(*(void *)(v5 + 280), a2);
  llvm::MachineOperand::setReg(v6, *(_DWORD *)(*(void *)(v24 + 32) + 4));
  (*(void (**)(void, uint64_t))(**(void **)(v5 + 280) + 40))(*(void *)(v5 + 280), a2);
  unsigned int v25 = **(unsigned __int16 **)(v12 + 16);
  BOOL v26 = v25 > 0x20;
  uint64_t v27 = (1 << v25) & 0x100600000;
  if (v26 || v27 == 0)
  {
    uint64_t v29 = *(void *)(v5 + 272);
    v39[0] = 0;
    if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v12, 0, v39)
      || ((int v36 = **(unsigned __int16 **)(v12 + 16), v36 != 69) ? (v37 = v36 == 0) : (v37 = 1), v37))
    {
      uint64_t v30 = *(unsigned int *)(v12 + 40);
      if (v30)
      {
        unint64_t v31 = *(_DWORD **)(v12 + 32);
        unsigned int v32 = &v31[8 * v30];
        while (1)
        {
          if ((*v31 & 0x10000FF) == 0x1000000)
          {
            uint64_t v33 = v31[1];
            if ((v33 - 1) < 0x3FFFFFFF) {
              return 1;
            }
            uint64_t v34 = (uint64_t *)((int)v33 < 0
                            ? *(void *)(v29 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8
                            : *(void *)(v29 + 272) + 8 * v33);
            uint64_t v35 = *v34;
            if (v35) {
              break;
            }
          }
LABEL_37:
          v31 += 8;
          if (v31 == v32) {
            goto LABEL_38;
          }
        }
        while ((*(_DWORD *)v35 & 0x81000000) != 0)
        {
          uint64_t v35 = *(void *)(v35 + 24);
          if (!v35) {
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_38:
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v12);
      }
    }
  }
  return 1;
}

uint64_t sub_1CBB88854(unsigned int a1, char a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  LODWORD(v9) = a1;
  if ((a1 & 0x80000000) != 0) {
    uint64_t v10 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a1);
  }
  uint64_t v11 = *v10;
  if (!v11) {
    goto LABEL_97;
  }
  if ((*(unsigned char *)(v11 + 3) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v11 + 24);
    if (!v11)
    {
LABEL_97:
      LOBYTE(v46) = 0;
      unsigned int v47 = 0;
      return v11 | v47 | v46;
    }
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      goto LABEL_96;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12)
  {
LABEL_96:
    uint64_t v11 = 0;
    goto LABEL_97;
  }
  uint64_t v13 = (*(uint64_t (**)(void, void))(**(void **)(a3[1] + 8) + 16))(*(void *)(a3[1] + 8), *(void *)a3[1]);
  unsigned int v14 = *(unsigned __int16 **)(v12 + 16);
  unsigned int v15 = *((unsigned __int8 *)v14 + 4);
  if ((v14[4] & 2) == 0 || (int v33 = *(_DWORD *)(v12 + 40), v33 == v15))
  {
    int v16 = *((unsigned __int8 *)v14 + 4);
  }
  else
  {
    int v34 = v33 - 1;
    int v16 = *((unsigned __int8 *)v14 + 4);
    do
    {
      int v35 = *(_DWORD *)(*(void *)(v12 + 32) + 32 * v15);
      if ((v35 & 0x10000FF) != 0x1000000) {
        break;
      }
      v16 += (v35 & 0x2000000) == 0;
      if (v34 == v15) {
        break;
      }
      ++v15;
    }
    while ((v35 & 0x2000000) == 0);
  }
  uint64_t v17 = *((void *)v14 + 4);
  if (v17)
  {
    unsigned int v18 = -1;
    do
      ++v18;
    while (*(_WORD *)(v17 + 2 * v18));
  }
  else
  {
    unsigned int v18 = 0;
  }
  if (v18 + v16 != 1)
  {
LABEL_58:
    uint64_t v67 = 257;
    int v68 = 0;
    int v72 = v9;
    LODWORD(v74) = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, void))(*a3 + 32))(a3, 178, &v67, 1, &v72, 1, 0);
    goto LABEL_59;
  }
  uint64_t v19 = *(void *)(v12 + 32);
  int v20 = *v14;
  int v21 = v20;
  uint64_t v22 = v12;
  if (v20 == 177)
  {
    uint64_t v23 = *(unsigned int *)(v19 + 36);
    if ((v23 & 0x80000000) != 0) {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v24 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v23);
    }
    uint64_t v25 = *v24;
    if (!v25) {
      goto LABEL_53;
    }
    if ((*(unsigned char *)(v25 + 3) & 1) == 0)
    {
      uint64_t v25 = *(void *)(v25 + 24);
      if (!v25 || (*(unsigned char *)(v25 + 3) & 1) == 0) {
        goto LABEL_53;
      }
    }
    uint64_t v22 = *(void *)(v25 + 8);
    if (!v22) {
      goto LABEL_53;
    }
    int v21 = **(unsigned __int16 **)(v22 + 16);
  }
  if (v21 == 184)
  {
    uint64_t v26 = *(unsigned int *)(*(void *)(v22 + 32) + 36);
    if ((v26 & 0x80000000) != 0) {
      uint64_t v27 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v27 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v26);
    }
    uint64_t v28 = *v27;
    if (!v28) {
      goto LABEL_53;
    }
    if ((*(unsigned char *)(v28 + 3) & 1) == 0)
    {
      uint64_t v28 = *(void *)(v28 + 24);
      if (!v28 || (*(unsigned char *)(v28 + 3) & 1) == 0) {
        goto LABEL_53;
      }
    }
    uint64_t v22 = *(void *)(v28 + 8);
    if (!v22) {
      goto LABEL_53;
    }
    int v29 = **(unsigned __int16 **)(v22 + 16);
  }
  else
  {
    int v29 = v21;
  }
  if (v29 != 179) {
    goto LABEL_53;
  }
  uint64_t v30 = *(void *)(v22 + 32);
  if ((a2 & 1) == 0)
  {
    uint64_t v36 = *(unsigned int *)(v30 + 36);
    BOOL v37 = (uint64_t *)((v36 & 0x80000000) != 0
                    ? *(void *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                    : *(void *)(a4 + 272) + 8 * v36);
    uint64_t v38 = *v37;
    if (v38)
    {
      while ((*(unsigned char *)(v38 + 3) & 1) != 0)
      {
        uint64_t v38 = *(void *)(v38 + 24);
        if (!v38) {
          goto LABEL_31;
        }
      }
      while (1)
      {
        uint64_t v38 = *(void *)(v38 + 24);
        if (!v38) {
          break;
        }
        if ((*(unsigned char *)(v38 + 3) & 1) == 0) {
          goto LABEL_31;
        }
      }
      int v39 = (uint64_t *)((v36 & 0x80000000) != 0
                      ? *(void *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                      : *(void *)(a4 + 272) + 8 * v36);
      if ((uint64_t v40 = *v39) == 0
        || (*(unsigned char *)(v40 + 3) & 1) == 0 && ((uint64_t v40 = *(void *)(v40 + 24)) == 0 || (*(unsigned char *)(v40 + 3) & 1) == 0)
        || (uint64_t v41 = *(void *)(v40 + 8)) == 0
        || **(_WORD **)(v41 + 16) != 313)
      {
LABEL_53:
        uint64_t v9 = *(unsigned int *)(v19 + 4);
        if ((v9 & 0x80000000) != 0) {
          uint64_t v42 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v42 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v9);
        }
        uint64_t v43 = *v42;
        if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
          uint64_t v43 = *(void *)(v43 + 24);
        }
        uint64_t v44 = *(void *)(v43 + 8);
        if (**(_WORD **)(v44 + 16) == 121)
        {
          uint64_t v48 = *(void *)(*(void *)(v44 + 32) + 48);
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 32);
            if ((_UNKNOWN *)v49 == &unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v73, (const llvm::detail::DoubleAPFloat *)(v48 + 32));
              if (!a5) {
                goto LABEL_88;
              }
            }
            else
            {
              uint64_t v73 = *(void *)(v48 + 32);
              if ((*(_DWORD *)(v49 + 8) + 64) >= 0x80) {
                operator new[]();
              }
              char v50 = *(unsigned char *)(v48 + 52);
              int v51 = v50 & 7;
              char v76 = v50 & 0xF;
              int v75 = *(_DWORD *)(v48 + 48);
              BOOL v53 = (v50 & 6) != 0 && v51 != 3;
              if (v51 == 1 || v53)
              {
                uint64_t v55 = *(unsigned int *)(v49 + 8);
                if ((v55 - 64) <= 0xFFFFFF7F) {
                  unsigned int v56 = (uint64_t *)v13;
                }
                else {
                  unsigned int v56 = &v74;
                }
                uint64_t v59 = *(uint64_t **)(v48 + 40);
                uint64_t v58 = (uint64_t *)(v48 + 40);
                uint64_t v57 = v59;
                if ((*(_DWORD *)(*(v58 - 1) + 8) - 64) >= 0xFFFFFF80) {
                  uint64_t v57 = v58;
                }
                if (v55 <= 0xFFFFFFBF)
                {
                  unint64_t v60 = (unint64_t)(v55 + 64) >> 6;
                  do
                  {
                    uint64_t v61 = *v57++;
                    *v56++ = v61;
                    --v60;
                  }
                  while (v60);
                }
              }
              if (!a5) {
                goto LABEL_88;
              }
            }
            if ((sub_1CB9867B8((uint64_t)&v72) & 1) == 0)
            {
              uint64_t v70 = 257;
              int v71 = 0;
              LODWORD(v67) = *(_DWORD *)(v19 + 4);
              int v69 = 0;
              (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a3 + 32))(a3, 178, &v70, 1, &v67, 1, 0);
LABEL_90:
              int v46 = *(_DWORD *)(*(void *)(v65 + 32) + 4);
              unsigned int v47 = v46 & 0xFFFFFF00;
              if ((_UNKNOWN *)v73 == &unk_1CFB2E344)
              {
                sub_1CB845718(&v74);
              }
              else if ((*(_DWORD *)(v73 + 8) - 64) <= 0xFFFFFF7F && v74)
              {
                MEMORY[0x1D25D9CB0](v74, 0x1000C8000313F17);
              }
              goto LABEL_61;
            }
LABEL_88:
            uint64_t v62 = ***(llvm::ConstantFP ****)a3[1];
            llvm::APFloat::convert((uint64_t)&v72, &unk_1CFB2E308, 1, &v70);
            unsigned int v64 = llvm::ConstantFP::get(v62, (llvm::LLVMContext *)&v72, v63);
            uint64_t v67 = 257;
            int v68 = 0;
            (*(void (**)(void *, uint64_t *, const llvm::detail::DoubleAPFloat *))(*a3 + 24))(a3, &v67, v64);
            goto LABEL_90;
          }
        }
        goto LABEL_58;
      }
    }
  }
LABEL_31:
  if (v21 == 184)
  {
    uint64_t v67 = 257;
    int v68 = 0;
    int v72 = *(_DWORD *)(v30 + 36);
    LODWORD(v74) = 0;
    (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, void))(*a3 + 32))(a3, 184, &v67, 1, &v72, 1, 0);
    uint64_t v32 = *(void *)(v31 + 32);
  }
  else
  {
    uint64_t v32 = v30 + 32;
  }
  if (v20 != 177) {
    goto LABEL_60;
  }
  uint64_t v67 = 257;
  int v68 = 0;
  int v72 = *(_DWORD *)(v32 + 4);
  LODWORD(v74) = 0;
  (*(void (**)(void *, uint64_t, uint64_t *, uint64_t, int *, uint64_t, uint64_t))(*a3 + 32))(a3, 177, &v67, 1, &v72, 1, *(unsigned __int16 *)(v12 + 44) | 0x100000000);
LABEL_59:
  uint64_t v32 = *(void *)(v45 + 32);
LABEL_60:
  int v46 = *(_DWORD *)(v32 + 4);
  unsigned int v47 = v46 & 0xFFFFFF00;
LABEL_61:
  uint64_t v11 = 0x100000000;
  return v11 | v47 | v46;
}

uint64_t sub_1CBB88F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 32) + 4);
  if ((v5 & 0x80000000) != 0) {
    uint64_t v6 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v6 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v5);
  }
  uint64_t v7 = *v6;
  if (!*v6) {
    return 1;
  }
  while ((*(unsigned char *)(v7 + 3) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7) {
      return 1;
    }
  }
  uint64_t v9 = *(void *)(v7 + 8);
LABEL_8:
  uint64_t result = 0;
  unsigned int v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 <= 0x10F)
  {
    char v11 = v10 + 93;
    if (v10 - 163 <= 0x38)
    {
      if (((1 << v11) & 0x18800000018140DLL) != 0) {
        goto LABEL_18;
      }
      if (((1 << v11) & 0x204000) != 0)
      {
        if ((sub_1CBB88F2C(v9, a2, a3) & 1) == 0) {
          return 0;
        }
LABEL_51:
        uint64_t v28 = *(void *)(v7 + 8);
        while (1)
        {
          uint64_t v7 = *(void *)(v7 + 24);
          if (!v7) {
            return 1;
          }
          if ((*(unsigned char *)(v7 + 3) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v7 + 8);
            if (v9 != v28) {
              goto LABEL_8;
            }
          }
        }
      }
    }
    if (v10 != 54 && v10 != 85) {
      return result;
    }
LABEL_18:
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v13 == *(void *)a2)
    {
      if (v14)
      {
        unsigned int v15 = 0;
        uint64_t v16 = 8 * v14;
        uint64_t v17 = *(void **)(a2 + 8);
        while (*v17 != v9)
        {
          if (*v17 == -2) {
            unsigned int v15 = v17;
          }
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            if (!v15) {
              goto LABEL_26;
            }
            void *v15 = v9;
            --*(_DWORD *)(a2 + 24);
            break;
          }
        }
LABEL_50:
        if ((*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24)) > 2) {
          return 0;
        }
        goto LABEL_51;
      }
LABEL_26:
      unsigned int v18 = *(_DWORD *)(a2 + 16);
      if (v14 < v18)
      {
        *(_DWORD *)(a2 + 20) = v14 + 1;
        *(void *)(v13 + 8 * v14) = v9;
        goto LABEL_50;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a2 + 16);
    }
    if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a2 + 24)))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
    }
    else if (v18 - v14 >= v18 >> 3)
    {
      goto LABEL_31;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v18);
    unsigned int v18 = *(_DWORD *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 8);
LABEL_31:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    int v21 = (void *)(v13 + 8 * v20);
    uint64_t v22 = *v21;
    if (*v21 == -1)
    {
      uint64_t v23 = 0;
LABEL_43:
      if (v23) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v21;
      }
      if (*v27 != v9)
      {
        if (*v27 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        void *v27 = v9;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != v9)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        int v21 = (void *)(v13 + 8 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == -1) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_50;
  }
  BOOL v12 = v10 - 272 > 0x3D || ((1 << (v10 - 16)) & 0x20000040000000C1) == 0;
  if (!v12 || v10 == 357) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1CBB891FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a2 + 24) != a3)
  {
    llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a1 + 312));
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
  return 1;
}

uint64_t sub_1CBB89608(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 24) != a3)
  {
    llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(result + 312));
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
  return result;
}

_DWORD *sub_1CBB8977C(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1CD3C8060(result);
    }
    else
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *uint64_t v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1CBB897CC(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1CBB82E3C(a1, a3, a2, a4);
}

uint64_t sub_1CBB897DC(uint64_t a1, uint64_t a2)
{
  if ((**(unsigned char **)(a2 + 360) & 0x10) == 0)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 40);
    if (!byte_1EBCC1218) {
      operator new();
    }
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (v4 == v5)
    {
LABEL_7:
      uint64_t v6 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v4 != &unk_1EA61EFE3)
      {
        v4 += 16;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      uint64_t v6 = *(void *)(v4 + 8);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &unk_1EA61EFE3);
    operator new();
  }
  return 0;
}

const char *sub_1CBB8B754()
{
  return "AGX3ISelPrepare";
}

double sub_1CBB8B764@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 33;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

uint64_t sub_1CBB8B78C(llvm::MachineInstr **a1, unsigned int a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 32;
  if (a2 == 1) {
    uint64_t v4 = 64;
  }
  uint64_t v5 = (uint64_t)a1[1];
  uint64_t v6 = *(unsigned int *)(*((void *)*a1 + 4) + v4 + 4);
  if ((v6 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
    uint64_t v8 = *(void *)(v8 + 24);
  }
  if (**(_WORD **)(*(void *)(v8 + 8) + 16) == 282) {
    return 0;
  }
  if ((v6 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(*(void *)(v5 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(*(void *)(v5 + 272) + 8 * v6);
  }
  uint64_t v10 = *v9;
  if (v10)
  {
    if (*(unsigned char *)(v10 + 3) & 1) != 0 || (uint64_t v10 = *(void *)(v10 + 24)) != 0 && (*(unsigned char *)(v10 + 3))
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        if (**(_WORD **)(v11 + 16) == 127 && *(_DWORD *)(v11 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(*(void *)(v11 + 32) + 68), v5, (uint64_t)&v41);
          if ((_BYTE)v43)
          {
            if (v42 >= 0x41)
            {
              if (v41) {
                MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
              }
            }
            else if (v41 << -(uint64_t)v42 >> -(uint64_t)v42 < 5)
            {
              return 0;
            }
          }
        }
      }
    }
  }
  BOOL v12 = a1[1];
  uint64_t v13 = *(unsigned int *)(*((void *)*a1 + 4) + 32 * a2 + 4);
  if ((v13 & 0x80000000) != 0) {
    uint64_t v14 = (uint64_t *)(*((void *)v12 + 3) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)(*((void *)v12 + 34) + 8 * v13);
  }
  uint64_t v15 = *v14;
  if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
    uint64_t v15 = *(void *)(v15 + 24);
  }
  uint64_t v16 = *(void *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) != 47) {
    return 0;
  }
  uint64_t v17 = (uint64_t *)((v13 & 0x80000000) != 0
                  ? *((void *)v12 + 3) + 16 * (v13 & 0x7FFFFFFF) + 8
                  : *((void *)v12 + 34) + 8 * v13);
  uint64_t v18 = *v17;
  if (!v18) {
    return 0;
  }
  while ((*(unsigned char *)(v18 + 3) & 1) != 0)
  {
    uint64_t v18 = *(void *)(v18 + 24);
    if (!v18) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v18 = *(void *)(v18 + 24);
    if (!v18) {
      break;
    }
    if ((*(unsigned char *)(v18 + 3) & 1) == 0) {
      return 0;
    }
  }
  unsigned int v19 = a1[2];
  int v20 = *((_DWORD *)v19 + 66);
  if (v20)
  {
    uint64_t v21 = *(void *)(v16 + 24);
    uint64_t v22 = *((void *)v19 + 31);
    unsigned int v23 = v20 - 1;
    uint64_t v24 = ((v21 >> 4) ^ (v21 >> 9)) & v23;
    uint64_t v25 = *(void *)(v22 + 16 * v24);
    if (v21 == v25)
    {
LABEL_32:
      uint64_t v28 = *(void **)(v22 + 16 * v24 + 8);
      if (v28)
      {
        int v29 = 0;
        do
        {
          uint64_t v28 = (void *)*v28;
          ++v29;
        }
        while (v28);
LABEL_37:
        uint64_t v30 = *((void *)*a1 + 3);
        uint64_t v31 = ((v30 >> 4) ^ (v30 >> 9)) & v23;
        uint64_t v32 = *(void *)(v22 + 16 * v31);
        if (v30 == v32)
        {
LABEL_41:
          int v35 = *(void **)(v22 + 16 * v31 + 8);
          if (v35)
          {
            int v36 = 0;
            do
            {
              int v35 = (void *)*v35;
              ++v36;
            }
            while (v35);
LABEL_46:
            if (v29 != v36) {
              return 0;
            }
            goto LABEL_47;
          }
        }
        else
        {
          int v33 = 1;
          while (v32 != -4096)
          {
            int v34 = v31 + v33++;
            uint64_t v31 = v34 & v23;
            uint64_t v32 = *(void *)(v22 + 16 * v31);
            if (v30 == v32) {
              goto LABEL_41;
            }
          }
        }
        int v36 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      int v26 = 1;
      while (v25 != -4096)
      {
        int v27 = v24 + v26++;
        uint64_t v24 = v27 & v23;
        uint64_t v25 = *(void *)(v22 + 16 * v24);
        if (v21 == v25) {
          goto LABEL_32;
        }
      }
    }
    int v29 = 0;
    goto LABEL_37;
  }
LABEL_47:
  BOOL v37 = a1[3];
  uint64_t v38 = 1;
  v48[0] = *(_DWORD *)a1[4];
  v48[2] = 1;
  uint64_t v39 = *(void *)(v16 + 32);
  LODWORD(v41) = *(_DWORD *)(v39 + 36);
  int v43 = 0;
  int v44 = *(_DWORD *)(v39 + 68);
  int v45 = 0;
  int v46 = v6;
  int v47 = 0;
  (*(void (**)(llvm::MachineInstr *, uint64_t, _DWORD *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 56, v48, 1, &v41, 3, *(unsigned __int16 *)a1[5] | 0x100000000);
  llvm::MachineInstr::eraseFromParent(*a1);
  return v38;
}

uint64_t sub_1CBB8BB44(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 3) & 1) == 0)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return v4;
      }
      if ((*(unsigned char *)(v4 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v5 = *(void *)(v4 + 8);
    if (!v5) {
      return 0;
    }
    if ((a2 & 0x80000000) != 0) {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
    }
    uint64_t v7 = *v6;
    if ((*(unsigned char *)(v7 + 3) & 1) == 0) {
      uint64_t v7 = *(void *)(v7 + 24);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    BOOL v9 = **(_WORD **)(v8 + 16) == 121 && *(void *)(*(void *)(v8 + 32) + 48) != 0;
    uint64_t v4 = 1;
    if (!v9)
    {
      int v10 = **(unsigned __int16 **)(v5 + 16);
      if (v10 != 179)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v11 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v11 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
        }
        uint64_t v12 = *v11;
        if (v12)
        {
          while ((*(unsigned char *)(v12 + 3) & 1) != 0)
          {
            uint64_t v12 = *(void *)(v12 + 24);
            if (!v12) {
              goto LABEL_19;
            }
          }
          while (1)
          {
            uint64_t v12 = *(void *)(v12 + 24);
            if (!v12) {
              break;
            }
            if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
              goto LABEL_19;
            }
          }
          if (!a3) {
            goto LABEL_39;
          }
        }
        else
        {
LABEL_19:
          if ((a3 & 1) == 0) {
            return 0;
          }
        }
        if ((a2 & 0x80000000) != 0) {
          uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v13 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
        }
        uint64_t v14 = *v13;
        if (v14)
        {
          while ((*(unsigned char *)(v14 + 3) & 1) != 0)
          {
            uint64_t v14 = *(void *)(v14 + 24);
            if (!v14) {
              goto LABEL_39;
            }
          }
          int v15 = 0;
          uint64_t v16 = *(void *)(v14 + 8);
LABEL_32:
          ++v15;
          while (1)
          {
            uint64_t v14 = *(void *)(v14 + 24);
            if (!v14) {
              break;
            }
            if ((*(unsigned char *)(v14 + 3) & 1) == 0 && *(void *)(v14 + 8) != v16)
            {
              uint64_t v16 = *(void *)(v14 + 8);
              goto LABEL_32;
            }
          }
          if ((v15 & 0xFFFFFFFE) != 0) {
            return 0;
          }
        }
LABEL_39:
        LODWORD(v4) = 1;
        if (v10 > 271)
        {
          if (((v10 - 272) > 0x3D || ((1 << (v10 - 16)) & 0x20000040000000C1) == 0)
            && v10 != 357)
          {
            goto LABEL_54;
          }
        }
        else if (((v10 - 163) > 0x38 || ((1 << (v10 + 93)) & 0x18800000000140DLL) == 0) {
               && v10 != 85)
        }
        {
LABEL_54:
          LODWORD(v4) = 0;
        }
        if (v10 == 182) {
          LODWORD(v4) = 1;
        }
        if (v10 == 183) {
          return 1;
        }
        else {
          return v4;
        }
      }
    }
  }
  return v4;
}

void *sub_1CBB8BD68(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBB8BDD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CBB8BE68(a1, a2, v7);
    *uint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1CBB8BDD4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        uint64_t v12 = 1;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t v12 = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

void *sub_1CBB8BE68(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CD4240C8(a1, v6);
  uint64_t v8 = 0;
  sub_1CBB8BDD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t sub_1CBB8BF20()
{
  *(void *)&long long v4 = "Should enable CSE in AGX3 ISel Prepare";
  *((void *)&v4 + 1) = 38;
  int v3 = 0;
  LOBYTE(v1) = 1;
  uint64_t v2 = &v1;
  sub_1CD40E838((uint64_t)&unk_1EBCC1198, "enable-cse-in-agx3-iselprepare", &v4, &v3, (unsigned char **)&v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1198, &dword_1CB82C000);
  *(void *)&long long v4 = "Should hoist instructions to allow forming fma.shff up to this hoist depth.";
  *((void *)&v4 + 1) = 75;
  int v3 = 0;
  int v1 = 4;
  uint64_t v2 = &v1;
  sub_1CD40E960((uint64_t)&unk_1EBCC1258, "fma-shff-hoist-depth-agx3", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC1258, &dword_1CB82C000);
}

unint64_t sub_1CBB8C014@<X0>(llvm::LLVMContext *a1@<X5>, uint64_t a2@<X0>, uint64_t a3@<X1>, llvm::IntegerType *****a4@<X2>, int a5@<W3>, uint64_t *a6@<X4>, unsigned int *a7@<X8>)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  unint64_t v237 = a1;
  uint64_t v235 = (uint64_t *)((8 * a1) | 1);
  uint64_t v271 = (uint64_t)v235;
  LODWORD(v272) = 0;
  uint64_t v11 = llvm::IntegerType::get(***a4[1], a1);
  uint64_t v13 = *(llvm::ConstantInt **)v11;
  unsigned int v14 = *(_DWORD *)(v11 + 8);
  LODWORD(v260) = v14 >> 8;
  if (v14 >> 8 >= 0x41) {
    operator new[]();
  }
  unint64_t v259 = 0;
  int v15 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v259, v12);
  if (v260 >= 0x41 && v259) {
    MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
  }
  ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a4)[2])(a4, &v271, v15);
  unsigned int v17 = *(_DWORD *)(*(void *)(v16 + 32) + 4);
  *a7 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  a7[1] = v17;
  *(_OWORD *)(a7 + 2) = xmmword_1CD91D2E0;
  a7[6] = 0;
  *((void *)a7 + 4) = a3;
  do
  {
    uint64_t v18 = *a7;
    if ((v18 & 0x80000000) != 0) {
      unsigned int v19 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v19 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v18);
    }
    uint64_t v20 = *v19;
    if ((*(unsigned char *)(v20 + 3) & 1) == 0) {
      uint64_t v20 = *(void *)(v20 + 24);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    int v22 = **(unsigned __int16 **)(v21 + 16);
    if ((v22 - 80) < 2
      || v22 == 221
      || v22 == 19 && (*(_DWORD *)(*(void *)(v21 + 32) + 36) & 0x80000000) != 0)
    {
      *a7 = *(_DWORD *)(*(void *)(v21 + 32) + 36);
      int v23 = 1;
    }
    else
    {
      int v23 = 0;
    }
    sub_1CBB90228(&v259, a7[1], a7[6], a3, (uint64_t)a4, 0);
    uint64_t v24 = v260;
    if ((_BYTE)v260)
    {
      unsigned int v25 = HIDWORD(v259);
      a7[1] = v259;
      a7[6] = v25;
    }
    v251[0] = &unk_1F25F9468;
    v251[1] = sub_1CBB8E340;
    uint64_t v252 = v251;
    sub_1CC73C210(*a7, a3, (uint64_t)&v259);
    int v241 = v23;
    if ((_BYTE)v261)
    {
      if (v260 >= 0x41)
      {
        if (v259) {
          MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
        }
      }
      else
      {
        int64_t v26 = (uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260;
        if (v26)
        {
          uint64_t v271 = 129;
          LODWORD(v272) = 0;
          uint64_t v27 = llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
          int v29 = *(llvm::ConstantInt **)v27;
          unsigned int v30 = *(_DWORD *)(v27 + 8);
          LODWORD(v260) = v30 >> 8;
          if (v30 >> 8 >= 0x41) {
            operator new[]();
          }
          unint64_t v259 = 0;
          uint64_t v31 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v259, v28);
          if (v260 >= 0x41 && v259) {
            MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
          }
          ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a4)[2])(a4, &v271, v31);
          uint64_t v33 = *(unsigned int *)(*(void *)(v32 + 32) + 4);
          goto LABEL_68;
        }
      }
    }
    uint64_t v34 = *a7;
    if ((v34 & 0x80000000) != 0) {
      int v35 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
    }
    else {
      int v35 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v34);
    }
    uint64_t v36 = *v35;
    if (v36)
    {
      if (*(unsigned char *)(v36 + 3) & 1) != 0 || (uint64_t v36 = *(void *)(v36 + 24)) != 0 && (*(unsigned char *)(v36 + 3))
      {
        uint64_t v37 = *(void *)(v36 + 8);
        if (v37)
        {
          if (**(_WORD **)(v37 + 16) == 46 && *(_DWORD *)(v37 + 40) == 3)
          {
            int v42 = 1;
LABEL_47:
            uint64_t v43 = *(void *)(v37 + 32);
            uint64_t v33 = *(unsigned int *)(v43 + 36);
            if ((v33 & 0x80000000) != 0) {
              int v44 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
            }
            else {
              int v44 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v33);
            }
            uint64_t v45 = *v44;
            if (v45)
            {
              if ((*(unsigned char *)(v45 + 3) & 1) != 0
                || (uint64_t v45 = *(void *)(v45 + 24)) != 0 && (*(unsigned char *)(v45 + 3) & 1) != 0)
              {
                uint64_t v46 = *(void *)(v45 + 8);
                if (v46)
                {
                  if (**(_WORD **)(v46 + 16) == 80 && *(_DWORD *)(v46 + 40) == 2) {
                    uint64_t v33 = *(unsigned int *)(*(void *)(v46 + 32) + 36);
                  }
                }
              }
            }
            uint64_t v47 = *(unsigned int *)(v43 + 68);
            if ((v47 & 0x80000000) != 0) {
              uint64_t v48 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v48 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v47);
            }
            uint64_t v49 = *v48;
            if (v49)
            {
              if ((*(unsigned char *)(v49 + 3) & 1) != 0
                || (uint64_t v49 = *(void *)(v49 + 24)) != 0 && (*(unsigned char *)(v49 + 3) & 1) != 0)
              {
                uint64_t v50 = *(void *)(v49 + 8);
                if (v50)
                {
                  if (**(_WORD **)(v50 + 16) == 80 && *(_DWORD *)(v50 + 40) == 2) {
                    LODWORD(v47) = *(_DWORD *)(*(void *)(v50 + 32) + 36);
                  }
                }
              }
            }
            sub_1CC73C210(v47, a3, (uint64_t)&v259);
            if ((_BYTE)v261)
            {
              if (v260 < 0x41)
              {
                if (v42) {
                  int64_t v26 = -((uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260);
                }
                else {
                  int64_t v26 = (uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260;
                }
LABEL_68:
                uint64_t v51 = *((void *)a7 + 2) + v26;
                BOOL v52 = v51 > -32769;
                if (v51 >= 0) {
                  BOOL v52 = v51 < 0x8000;
                }
                if (v52)
                {
                  *((void *)a7 + 2) = v51;
                  *a7 = v33;
                  int v242 = 1;
                  goto LABEL_76;
                }
                sub_1CC73C44C(a7[1], *((void *)a7 + 4), 1, (uint64_t)&v259);
                if ((_BYTE)v262)
                {
                  if (v260 > 0x40)
                  {
                    int v148 = *(_DWORD *)v259;
                    MEMORY[0x1D25D9CB0]();
                    if (!v148)
                    {
LABEL_332:
                      uint64_t v149 = 0;
                      while (1)
                      {
                        uint64_t v150 = qword_1CDC6CEA8[v149];
                        unint64_t v259 = v150;
                        if (!v252) {
                          break;
                        }
                        if ((*(unsigned int (**)(void *, unint64_t *))(*v252 + 48))(v252, &v259))
                        {
                          uint64_t v151 = v26 / v150;
                          if (!(v26 % v150))
                          {
                            BOOL v152 = v26 <= 0 || (unint64_t)(v151 - 1) >= 0xFFFF;
                            BOOL v153 = !v152;
                            BOOL v154 = v151 > -32769 && v26 < 0;
                            if (v154 || v153)
                            {
                              unint64_t v259 = 257;
                              LODWORD(v260) = 0;
                              uint64_t v162 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x20);
                              uint64_t v163 = llvm::ConstantInt::get(v162, v26 / (int)v150, (const llvm::APInt *)1);
                              ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v259, v163);
                              unsigned int v158 = *(_DWORD *)(*(void *)(v164 + 32) + 4);
                              *((void *)a7 + 1) = (int)v150;
                              int v242 = 1;
                              if (v26 < 0) {
                                int v165 = 1;
                              }
                              else {
                                int v165 = 2;
                              }
                              a7[6] = v165;
LABEL_356:
                              *a7 = v33;
                              a7[1] = v158;
                              goto LABEL_76;
                            }
                          }
                        }
                        if (++v149 == 4)
                        {
                          if ((unint64_t)v26 < 0xFFFFFFFF80000001)
                          {
                            if ((unint64_t)(v26 - 1) > 0xFFFFFFFE) {
                              goto LABEL_75;
                            }
                            unint64_t v259 = 257;
                            LODWORD(v260) = 0;
                            unint64_t v159 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x20);
                            int v242 = 1;
                            unint64_t v160 = llvm::ConstantInt::get(v159, v26, (const llvm::APInt *)1);
                            ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v259, v160);
                            unsigned int v158 = *(_DWORD *)(*(void *)(v161 + 32) + 4);
                            a7[6] = 2;
                          }
                          else
                          {
                            unint64_t v259 = 257;
                            LODWORD(v260) = 0;
                            uint64_t v155 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x20);
                            uint64_t v156 = llvm::ConstantInt::get(v155, v26, (const llvm::APInt *)1);
                            ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v259, v156);
                            unsigned int v158 = *(_DWORD *)(*(void *)(v157 + 32) + 4);
                            int v242 = 1;
                            a7[6] = 1;
                          }
                          goto LABEL_356;
                        }
                      }
                      sub_1CB920400();
                      goto LABEL_458;
                    }
                  }
                  else if (!((uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260))
                  {
                    goto LABEL_332;
                  }
                }
                goto LABEL_75;
              }
              if (v259) {
                MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
              }
            }
LABEL_75:
            int v242 = 0;
            goto LABEL_76;
          }
        }
      }
    }
    if ((v34 & 0x80000000) != 0) {
      uint64_t v38 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v38 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v34);
    }
    uint64_t v39 = *v38;
    if (v39)
    {
      if (*(unsigned char *)(v39 + 3) & 1) != 0 || (uint64_t v39 = *(void *)(v39 + 24)) != 0 && (*(unsigned char *)(v39 + 3))
      {
        uint64_t v37 = *(void *)(v39 + 8);
        if (v37)
        {
          if (**(_WORD **)(v37 + 16) == 45 && *(_DWORD *)(v37 + 40) == 3)
          {
            int v42 = 0;
            goto LABEL_47;
          }
        }
      }
    }
    if ((v34 & 0x80000000) != 0) {
      uint64_t v40 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v40 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v34);
    }
    uint64_t v41 = *v40;
    if (!v41) {
      goto LABEL_75;
    }
    if ((*(unsigned char *)(v41 + 3) & 1) == 0)
    {
      uint64_t v41 = *(void *)(v41 + 24);
      if (!v41 || (*(unsigned char *)(v41 + 3) & 1) == 0) {
        goto LABEL_75;
      }
    }
    uint64_t v37 = *(void *)(v41 + 8);
    if (!v37 || **(_WORD **)(v37 + 16) != 193) {
      goto LABEL_75;
    }
    int v42 = 0;
    int v242 = 0;
    if (*(_DWORD *)(v37 + 40) == 3) {
      goto LABEL_47;
    }
LABEL_76:
    if (v252 == v251)
    {
      (*(void (**)(void *))(v251[0] + 32))(v251);
    }
    else if (v252)
    {
      (*(void (**)(void))(*v252 + 40))();
    }
    uint64_t v53 = *a7;
    if ((v53 & 0x80000000) != 0) {
      unint64_t v54 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v54 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v53);
    }
    uint64_t v55 = *v54;
    if (v55
      && ((*(unsigned char *)(v55 + 3) & 1) != 0 || (uint64_t v55 = *(void *)(v55 + 24)) != 0 && (*(unsigned char *)(v55 + 3) & 1) != 0)
      && (uint64_t v56 = *(void *)(v55 + 8)) != 0
      && **(_WORD **)(v56 + 16) == 46
      && *(_DWORD *)(v56 + 40) == 3)
    {
      int v73 = 1;
    }
    else
    {
      if ((v53 & 0x80000000) != 0) {
        uint64_t v57 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v57 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v53);
      }
      uint64_t v58 = *v57;
      if (v58
        && ((*(unsigned char *)(v58 + 3) & 1) != 0 || (uint64_t v58 = *(void *)(v58 + 24)) != 0 && (*(unsigned char *)(v58 + 3) & 1) != 0)
        && (uint64_t v56 = *(void *)(v58 + 8)) != 0
        && **(_WORD **)(v56 + 16) == 45
        && *(_DWORD *)(v56 + 40) == 3)
      {
        int v73 = 0;
      }
      else
      {
        if ((v53 & 0x80000000) != 0) {
          uint64_t v59 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v59 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v53);
        }
        uint64_t v60 = *v59;
        if (!v60) {
          goto LABEL_98;
        }
        if ((*(unsigned char *)(v60 + 3) & 1) == 0)
        {
          uint64_t v60 = *(void *)(v60 + 24);
          if (!v60 || (*(unsigned char *)(v60 + 3) & 1) == 0) {
            goto LABEL_98;
          }
        }
        uint64_t v56 = *(void *)(v60 + 8);
        if (!v56 || **(_WORD **)(v56 + 16) != 193) {
          goto LABEL_98;
        }
        int v73 = 0;
        BOOL v61 = 0;
        if (*(_DWORD *)(v56 + 40) != 3) {
          goto LABEL_99;
        }
      }
    }
    uint64_t v74 = *(void *)(v56 + 32);
    uint64_t v75 = *(unsigned int *)(v74 + 36);
    if ((v75 & 0x80000000) != 0) {
      char v76 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
    }
    else {
      char v76 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v75);
    }
    uint64_t v77 = *v76;
    if (v77)
    {
      if (*(unsigned char *)(v77 + 3) & 1) != 0 || (uint64_t v77 = *(void *)(v77 + 24)) != 0 && (*(unsigned char *)(v77 + 3))
      {
        uint64_t v78 = *(void *)(v77 + 8);
        if (v78)
        {
          if (**(_WORD **)(v78 + 16) == 80 && *(_DWORD *)(v78 + 40) == 2) {
            LODWORD(v75) = *(_DWORD *)(*(void *)(v78 + 32) + 36);
          }
        }
      }
    }
    uint64_t v79 = *(unsigned int *)(v74 + 68);
    if ((v79 & 0x80000000) != 0) {
      uint64_t v80 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v80 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v79);
    }
    uint64_t v81 = *v80;
    if (v81)
    {
      if (*(unsigned char *)(v81 + 3) & 1) != 0 || (uint64_t v81 = *(void *)(v81 + 24)) != 0 && (*(unsigned char *)(v81 + 3))
      {
        uint64_t v82 = *(void *)(v81 + 8);
        if (v82)
        {
          if (**(_WORD **)(v82 + 16) == 80 && *(_DWORD *)(v82 + 40) == 2) {
            LODWORD(v79) = *(_DWORD *)(*(void *)(v82 + 32) + 36);
          }
        }
      }
    }
    sub_1CC73C44C(a7[1], *((void *)a7 + 4), 1, (uint64_t)&v259);
    if (!(_BYTE)v262) {
      goto LABEL_98;
    }
    if (v260 > 0x40)
    {
      int v147 = *(_DWORD *)v259;
      MEMORY[0x1D25D9CB0]();
      if (v147) {
        goto LABEL_98;
      }
LABEL_139:
      if (v73)
      {
        sub_1CBB90228(&v245, v79, a7[6], a3, (uint64_t)a4, 0);
        if (v246)
        {
          uint64_t v83 = v245;
          if ((v245 & 0x80000000) != 0) {
            uint64_t v84 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v245 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v84 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v245);
          }
          uint64_t v85 = *v84;
          if ((*(unsigned char *)(v85 + 3) & 1) == 0) {
            uint64_t v85 = *(void *)(v85 + 24);
          }
          uint64_t v86 = *(void *)(*(void *)(*(void *)(v85 + 8) + 24) + 32);
          uint64_t v260 = (unint64_t *)v264;
          BOOL v261 = v264;
          uint64_t v262 = 4;
          int v263 = 0;
          unint64_t v259 = (unint64_t)&unk_1F261BC50;
          uint64_t v265 = v86;
          uint64_t v266 = *(void *)(v86 + 40);
          uint64_t v267 = (*(uint64_t (**)(void))(**(void **)(v86 + 16) + 120))(*(void *)(v86 + 16));
          uint64_t v268 = *(void *)(*(void *)v86 + 40) + 272;
          int v269 = 6;
          uint64_t v270 = 1;
          for (uint64_t i = 120; i != 760; i += 40)
            *(_DWORD *)((char *)&v259 + i) = -1;
          if ((v83 & 0x80000000) != 0) {
            size_t v88 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
          }
          else {
            size_t v88 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v83);
          }
          uint64_t v89 = *v88;
          if ((*(unsigned char *)(v89 + 3) & 1) == 0) {
            uint64_t v89 = *(void *)(v89 + 24);
          }
          sub_1CC6DEE8C((uint64_t)&v259, (const char *)*(unsigned int *)(*(void *)(*(void *)(v89 + 8) + 32) + 4), (uint64_t)&v253);
          unsigned int v90 = v254 - 1;
          uint64_t v91 = &v253;
          if (v254 >= 0x41) {
            uint64_t v91 = (unint64_t *)(v253 + 8 * (v90 >> 6));
          }
          uint64_t v92 = (1 << v90) & *v91;
          BOOL v61 = v92 != 0;
          if (v92)
          {
            if ((v83 & 0x80000000) != 0 && (v83 & 0x7FFFFFFF) < *(_DWORD *)(a3 + 432)) {
              unint64_t v93 = *(void *)(*(void *)(a3 + 424) + 8 * (v83 & 0x7FFFFFFF));
            }
            else {
              unint64_t v93 = 0;
            }
            unint64_t v243 = v93;
            int v244 = 0;
            int v113 = (llvm::LLVMContext *)(unsigned __int16)(v93 >> 3);
            uint64_t v114 = (llvm::LLVMContext *)(unsigned __int16)(v93 >> 19);
            if ((v93 & 2) == 0) {
              uint64_t v114 = (llvm::LLVMContext *)(v93 >> 19);
            }
            if ((v93 & 4) != 0) {
              int v113 = v114;
            }
            if (v93) {
              uint64_t v115 = (llvm::LLVMContext *)(v93 >> 3);
            }
            else {
              uint64_t v115 = v113;
            }
            uint64_t v116 = llvm::IntegerType::get(***a4[1], v115);
            char v118 = *(llvm::ConstantInt **)v116;
            unsigned int v119 = *(_DWORD *)(v116 + 8);
            LODWORD(v272) = v119 >> 8;
            if (v119 >> 8 >= 0x41) {
              operator new[]();
            }
            uint64_t v271 = 0;
            uint64_t v120 = llvm::ConstantInt::get(v118, (llvm::LLVMContext *)&v271, v117);
            if (v272 >= 0x41 && v271) {
              MEMORY[0x1D25D9CB0](v271, 0x1000C8000313F17);
            }
            BOOL v121 = (uint64_t *)((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v243, v120);
            unint64_t v257 = v93;
            int v258 = 0;
            uint64_t v271 = (uint64_t)v121;
            uint64_t v272 = v122;
            LODWORD(v273) = 1;
            unsigned int v274 = v83;
            int v275 = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4)[4])(a4, 46, &v257, 1, &v271, 2, 0);
            unsigned int v124 = *(_DWORD *)(*(void *)(v123 + 32) + 4);
            *a7 = v75;
            a7[1] = v124;
            a7[6] = 1;
          }
          if (v256 >= 0x41 && v255) {
            MEMORY[0x1D25D9CB0](v255, 0x1000C8000313F17);
          }
          if (v254 >= 0x41 && v253) {
            MEMORY[0x1D25D9CB0](v253, 0x1000C8000313F17);
          }
          sub_1CB9FB5B0((uint64_t)&v259);
          goto LABEL_99;
        }
        goto LABEL_98;
      }
      sub_1CBB90228(&v253, v79, a7[6], a3, (uint64_t)a4, 0);
      if ((_BYTE)v254)
      {
        unsigned int v103 = v253;
        a7[6] = HIDWORD(v253);
      }
      else
      {
        sub_1CBB90228(&v257, v75, a7[6], a3, (uint64_t)a4, 0);
        if ((_BYTE)v258)
        {
          unsigned int v103 = v257;
          a7[6] = HIDWORD(v257);
          LOBYTE(v258) = 0;
        }
        else
        {
          unint64_t v243 = 0;
          if ((v79 & 0x80000000) != 0) {
            char v129 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
          }
          else {
            char v129 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v79);
          }
          uint64_t v130 = *v129;
          if ((*(unsigned char *)(v130 + 3) & 1) == 0) {
            uint64_t v130 = *(void *)(v130 + 24);
          }
          if (**(_WORD **)(*(void *)(v130 + 8) + 16) == 127
            || (unint64_t v259 = 0, v260 = &v243, sub_1CBB908BC((uint64_t)&v259, a3, v79))
            || (uint64_t v271 = (uint64_t)&v243, v272 = 0, (sub_1CBB90AC8((uint64_t **)&v271, a3, v79) & 1) != 0))
          {
            unsigned int v103 = v79;
            goto LABEL_224;
          }
          unint64_t v243 = 0;
          if ((v75 & 0x80000000) != 0) {
            uint64_t v144 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v144 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v75);
          }
          uint64_t v145 = *v144;
          if ((*(unsigned char *)(v145 + 3) & 1) == 0) {
            uint64_t v145 = *(void *)(v145 + 24);
          }
          if (**(_WORD **)(*(void *)(v145 + 8) + 16) != 127)
          {
            unint64_t v259 = 0;
            uint64_t v260 = &v243;
            if (!sub_1CBB908BC((uint64_t)&v259, a3, v75))
            {
              uint64_t v271 = (uint64_t)&v243;
              uint64_t v272 = 0;
              int v146 = sub_1CBB90AC8((uint64_t **)&v271, a3, v75);
              if (v146) {
                unsigned int v103 = v75;
              }
              else {
                unsigned int v103 = v79;
              }
              if (v146) {
                LODWORD(v75) = v79;
              }
              goto LABEL_224;
            }
          }
          unsigned int v103 = v75;
        }
        LODWORD(v75) = v79;
      }
LABEL_224:
      *a7 = v75;
      a7[1] = v103;
      BOOL v61 = 1;
      goto LABEL_99;
    }
    if (!((uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260)) {
      goto LABEL_139;
    }
LABEL_98:
    BOOL v61 = 0;
LABEL_99:
    v249[0] = &unk_1F25F9468;
    v249[1] = sub_1CBB8E340;
    unint64_t v250 = v249;
    int v62 = sub_1CBB8E35C((uint64_t)a7, a3, a4, v249);
    if (v250 == v249)
    {
      (*(void (**)(void *))(v249[0] + 32))(v249);
    }
    else if (v250)
    {
      (*(void (**)(void))(*v250 + 40))();
    }
    v247[0] = &unk_1F25F9468;
    v247[1] = sub_1CBB8E340;
    uint64_t v248 = v247;
    int v63 = sub_1CBB8ED0C((uint64_t)a7, a3, (uint64_t)v247);
    if (v248 == v247)
    {
      (*(void (**)(void *))(v247[0] + 32))(v247);
    }
    else if (v248)
    {
      (*(void (**)(void))(*v248 + 40))();
    }
    int v64 = sub_1CBB8F084((uint64_t)a7, a3);
    unsigned int v65 = a7[1];
    if ((v65 & 0x80000000) != 0 && (uint64_t v66 = v65 & 0x7FFFFFFF, v66 < *(_DWORD *)(a3 + 432))) {
      uint64_t v67 = *(uint64_t **)(*(void *)(a3 + 424) + 8 * v66);
    }
    else {
      uint64_t v67 = 0;
    }
    uint64_t v271 = (uint64_t)v67;
    unint64_t result = sub_1CB8F1DC4((unint64_t *)&v271);
    unint64_t v70 = result;
    if (v69 == 1) {
    if (v70 <= 0x3F)
    }
      goto LABEL_173;
    unint64_t result = (unint64_t)sub_1CBB90228(&v259, a7[1], a7[6], a3, (uint64_t)a4, 1);
    if ((_BYTE)v260) {
      goto LABEL_173;
    }
    if ((*a7 & 0x80000000) != 0 && (uint64_t v71 = *a7 & 0x7FFFFFFF, v71 < *(_DWORD *)(a3 + 432))) {
      unint64_t v72 = *(void *)(*(void *)(a3 + 424) + 8 * v71);
    }
    else {
      unint64_t v72 = 0;
    }
    unint64_t v259 = v72;
    unint64_t result = sub_1CB8F1DC4(&v259);
    unint64_t v95 = result;
    if (v94 == 1) {
    if (v95 < 0x40)
    }
      goto LABEL_173;
    uint64_t v96 = a7[1];
    if ((v96 & 0x80000000) != 0) {
      uint64_t v97 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v97 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v96);
    }
    uint64_t v98 = *v97;
    if (v98)
    {
      if (*(unsigned char *)(v98 + 3) & 1) != 0 || (uint64_t v98 = *(void *)(v98 + 24)) != 0 && (*(unsigned char *)(v98 + 3))
      {
        uint64_t v99 = *(void *)(v98 + 8);
        if (v99)
        {
          if (**(_WORD **)(v99 + 16) == 45 && *(_DWORD *)(v99 + 40) == 3)
          {
            LOBYTE(v102) = 1;
LABEL_181:
            int v240 = v24;
            uint64_t v104 = *(void *)(v99 + 32);
            unsigned int v105 = *(_DWORD *)(v104 + 68);
            unsigned int v106 = *(_DWORD *)(v104 + 36);
            sub_1CBB90228(&v257, v106, a7[6], a3, (uint64_t)a4, 1);
            unint64_t result = (unint64_t)sub_1CBB90228(&v243, v105, a7[6], a3, (uint64_t)a4, 1);
            int v107 = v258 | v244;
            BOOL v108 = v107 != 0;
            if (v107)
            {
              if ((_BYTE)v258)
              {
                unsigned int v106 = v105;
                uint64_t v109 = (uint64_t **)&v257;
              }
              else
              {
                uint64_t v109 = (uint64_t **)&v243;
              }
              unsigned int v236 = *(_DWORD *)v109;
              unsigned int v110 = (char *)&v243 + 4;
              if ((_BYTE)v258) {
                unsigned int v110 = (char *)&v257 + 4;
              }
              a7[6] = *(_DWORD *)v110;
              *a7 = sub_1CBB90CD4(*a7, a3, (uint64_t)a4);
              a7[1] = sub_1CBB90CD4(a7[1], a3, (uint64_t)a4);
              if (v102)
              {
                unsigned int v111 = sub_1CBB90CD4(*a7, a3, (uint64_t)a4);
                *a7 = v111;
                if ((v111 & 0x80000000) != 0 && (v111 & 0x7FFFFFFF) < *(_DWORD *)(a3 + 432)) {
                  uint64_t v112 = *(uint64_t **)(*(void *)(a3 + 424) + 8 * (v111 & 0x7FFFFFFF));
                }
                else {
                  uint64_t v112 = 0;
                }
                uint64_t v127 = *((void *)a7 + 1);
                if (v127 != 1)
                {
                  unsigned int v106 = sub_1CBB90E88(a4, v106, (unint64_t)v112, v127);
                  unsigned int v111 = *a7;
                }
                uint64_t v271 = (uint64_t)v112;
                LODWORD(v272) = 0;
                LODWORD(v259) = v111;
                LODWORD(v261) = 0;
                LODWORD(v262) = v106;
                v264[0] = 0;
                unint64_t result = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 45, &v271, 1, &v259, 2, 0);
LABEL_230:
                *a7 = *(_DWORD *)(*(void *)(v128 + 32) + 4);
                unsigned int v132 = v236;
              }
              else
              {
                unsigned int v125 = *a7;
                if (v106 == v105)
                {
                  if ((v125 & 0x80000000) != 0 && (v125 & 0x7FFFFFFF) < *(_DWORD *)(a3 + 432)) {
                    unint64_t v126 = *(uint64_t **)(*(void *)(a3 + 424) + 8 * (v125 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v126 = 0;
                  }
                  uint64_t v271 = (uint64_t)v126;
                  LODWORD(v272) = 0;
                  LODWORD(v259) = v125;
                  LODWORD(v261) = 0;
                  LODWORD(v262) = v105;
                  v264[0] = 0;
                  unint64_t result = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 46, &v271, 1, &v259, 2, 0);
                  goto LABEL_230;
                }
                if ((v125 & 0x80000000) != 0 && (v125 & 0x7FFFFFFF) < *(_DWORD *)(a3 + 432)) {
                  uint64_t v131 = *(uint64_t **)(*(void *)(a3 + 424) + 8 * (v125 & 0x7FFFFFFF));
                }
                else {
                  uint64_t v131 = 0;
                }
                uint64_t v271 = (uint64_t)v131;
                LODWORD(v272) = 0;
                LODWORD(v259) = v125;
                LODWORD(v261) = 0;
                LODWORD(v262) = v106;
                v264[0] = 0;
                ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 45, &v271, 1, &v259, 2, 0);
                unint64_t v133 = 0;
                *a7 = *(_DWORD *)(*(void *)(v134 + 32) + 4);
                if ((v236 & 0x80000000) != 0)
                {
                  if ((v236 & 0x7FFFFFFF) >= *(_DWORD *)(a3 + 432)) {
                    unint64_t v133 = 0;
                  }
                  else {
                    unint64_t v133 = *(void *)(*(void *)(a3 + 424) + 8 * (v236 & 0x7FFFFFFF));
                  }
                }
                unint64_t v253 = v133;
                unsigned int v254 = 0;
                BOOL v234 = (uint64_t *)v133;
                if (v133)
                {
                  unint64_t v135 = (v133 >> 3);
                }
                else if ((v133 & 4) != 0)
                {
                  if ((v133 & 2) != 0) {
                    unint64_t v135 = (unsigned __int16)(v133 >> 19);
                  }
                  else {
                    unint64_t v135 = (v133 >> 19);
                  }
                }
                else
                {
                  unint64_t v135 = (unsigned __int16)(v133 >> 3);
                }
                uint64_t v136 = llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)v135);
                uint64_t v138 = *(llvm::ConstantInt **)v136;
                unsigned int v139 = *(_DWORD *)(v136 + 8);
                LODWORD(v260) = v139 >> 8;
                if (v139 >> 8 >= 0x41) {
                  operator new[]();
                }
                unint64_t v259 = 0;
                int v140 = llvm::ConstantInt::get(v138, (llvm::LLVMContext *)&v259, v137);
                if (v260 >= 0x41 && v259) {
                  MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
                }
                uint64_t v141 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v253, v140);
                uint64_t v271 = (uint64_t)v234;
                LODWORD(v272) = 0;
                unint64_t v259 = v141;
                uint64_t v260 = v142;
                LODWORD(v261) = 1;
                LODWORD(v262) = v236;
                v264[0] = 0;
                unint64_t result = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 46, &v271, 1, &v259, 2, 0);
                unsigned int v132 = *(_DWORD *)(*(void *)(v143 + 32) + 4);
              }
              a7[1] = v132;
              BOOL v108 = 1;
            }
            BOOL v102 = v108;
            LODWORD(v24) = v240;
            continue;
          }
        }
      }
    }
    uint64_t v100 = (uint64_t *)((v96 & 0x80000000) != 0
                     ? *(void *)(a3 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8
                     : *(void *)(a3 + 272) + 8 * v96);
    uint64_t v101 = *v100;
    if (!v101) {
      goto LABEL_173;
    }
    if ((*(unsigned char *)(v101 + 3) & 1) == 0)
    {
      uint64_t v101 = *(void *)(v101 + 24);
      if (!v101)
      {
        BOOL v102 = 0;
        continue;
      }
      if ((*(unsigned char *)(v101 + 3) & 1) == 0) {
        goto LABEL_173;
      }
    }
    uint64_t v99 = *(void *)(v101 + 8);
    if (v99 && **(_WORD **)(v99 + 16) == 46)
    {
      BOOL v102 = 0;
      if (*(_DWORD *)(v99 + 40) == 3 && *((void *)a7 + 1) == 1) {
        goto LABEL_181;
      }
    }
    else
    {
LABEL_173:
      BOOL v102 = 0;
    }
  }
  while (v24 || ((v241 | v242 | v61 | v62 | v63 | v64 | v102) & 1) != 0);
  unint64_t v257 = (unint64_t)a6;
  if (a5 == 1)
  {
    a7[6] = 0;
    if ((*a7 & 0x80000000) != 0)
    {
      uint64_t v171 = *a7 & 0x7FFFFFFF;
      unint64_t v169 = v237;
      if (v171 >= *(_DWORD *)(a3 + 432)) {
        unsigned int v168 = 0;
      }
      else {
        unsigned int v168 = *(uint64_t **)(*(void *)(a3 + 424) + 8 * v171);
      }
    }
    else
    {
      unsigned int v168 = 0;
      unint64_t v169 = v237;
    }
    unint64_t v253 = (unint64_t)v168;
    unsigned int v207 = a7[1];
    if ((v207 & 0x80000000) != 0 && (uint64_t v208 = v207 & 0x7FFFFFFF, v208 < *(_DWORD *)(a3 + 432))) {
      unint64_t v209 = *(void *)(*(void *)(a3 + 424) + 8 * v208);
    }
    else {
      unint64_t v209 = 0;
    }
    unint64_t v243 = v209;
    uint64_t v210 = sub_1CB8F1DC4(&v253);
    int v212 = v211;
    if (v210 == sub_1CB8F1DC4(&v257) && v212 == v213)
    {
      unint64_t result = sub_1CB8F1DC4(&v243);
      unint64_t v215 = result;
      if (v214 == 1) {
      if (v215 <= v169)
      }
        return result;
    }
    unint64_t v217 = sub_1CB8F1DC4(&v253);
    if (v216 == 1) {
    if (v217 >= 0x20)
    }
    {
      if ((v253 & 0xFFFFFFFFFFFFFFF9) != 0 && (v253 & 6) == 2)
      {
        unsigned int v219 = sub_1CB8F1DC4(&v253);
        if (v218 == 1) {
        uint64_t v271 = (8 * v219) | 1;
        }
        LODWORD(v272) = 0;
        LODWORD(v259) = *a7;
        LODWORD(v261) = 0;
        sub_1CC7382B0((uint64_t)a4);
        unsigned int v221 = *(_DWORD *)(*(void *)(v220 + 32) + 4);
        *a7 = v221;
      }
      else
      {
        unsigned int v221 = *a7;
      }
      uint64_t v271 = v257;
      LODWORD(v272) = 0;
      LODWORD(v259) = v221;
      LODWORD(v261) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 119, &v271, 1, &v259, 1, 0);
      *a7 = *(_DWORD *)(*(void *)(v222 + 32) + 4);
    }
    unint64_t result = sub_1CB8F1DC4(&v243);
    unint64_t v224 = result;
    if (v223 == 1) {
    if (v224 <= v169)
    }
      return result;
    if ((v243 & 0xFFFFFFFFFFFFFFF9) != 0 && (v243 & 6) == 2)
    {
      unsigned int v226 = sub_1CB8F1DC4(&v243);
      if (v225 == 1) {
      uint64_t v271 = (8 * v226) | 1;
      }
      LODWORD(v272) = 0;
      LODWORD(v259) = a7[1];
      LODWORD(v261) = 0;
      sub_1CC7382B0((uint64_t)a4);
      unsigned int v228 = *(_DWORD *)(*(void *)(v227 + 32) + 4);
      a7[1] = v228;
    }
    else
    {
      unsigned int v228 = a7[1];
    }
    sub_1CC73C210(v228, a3, (uint64_t)&v259);
    if ((_BYTE)v261)
    {
      if (v260 >= 0x41)
      {
        if (v259) {
          MEMORY[0x1D25D9CB0](v259, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v229 = (uint64_t)(v259 << -(uint64_t)v260) >> -(uint64_t)v260;
        if ((v229 & 0x8000000000000000) == 0)
        {
          unint64_t v259 = 129;
          LODWORD(v260) = 0;
          unint64_t v230 = (__int16)v229;
          uint64_t v231 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], (llvm::LLVMContext *)0x10);
          uint64_t v232 = llvm::ConstantInt::get(v231, v230, (const llvm::APInt *)1);
          unint64_t result = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v259, v232);
LABEL_467:
          a7[1] = *(_DWORD *)(*(void *)(v233 + 32) + 4);
          return result;
        }
      }
    }
    uint64_t v271 = 129;
    LODWORD(v272) = 0;
    LODWORD(v259) = a7[1];
    LODWORD(v261) = 0;
    unint64_t result = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 119, &v271, 1, &v259, 1, 0);
    goto LABEL_467;
  }
  if (!a5)
  {
    if ((*a7 & 0x80000000) != 0)
    {
      uint64_t v170 = *a7 & 0x7FFFFFFF;
      unint64_t v167 = v237;
      if (v170 >= *(_DWORD *)(a3 + 432)) {
        unint64_t v166 = 0;
      }
      else {
        unint64_t v166 = *(void *)(*(void *)(a3 + 424) + 8 * v170);
      }
    }
    else
    {
      unint64_t v166 = 0;
      unint64_t v167 = v237;
    }
    unint64_t v259 = v166;
    unint64_t v173 = sub_1CB8F1DC4(&v259);
    if (v172 == 1) {
    unint64_t v175 = sub_1CB8F1DC4(&v257);
    }
    if (v174 == 1) {
    if (v173 < v175)
    }
    {
      unsigned int v176 = sub_1CBB90CD4(*a7, a3, (uint64_t)a4);
      *a7 = v176;
      uint64_t v271 = v257;
      LODWORD(v272) = 0;
      LODWORD(v259) = v176;
      LODWORD(v261) = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a4)[4])(a4, 126, &v271, 1, &v259, 1, 0);
      *a7 = *(_DWORD *)(*(void *)(v177 + 32) + 4);
    }
    unsigned int v178 = a7[1];
    if ((v178 & 0x80000000) != 0 && (uint64_t v179 = v178 & 0x7FFFFFFF, v179 < *(_DWORD *)(a3 + 432))) {
      unint64_t v180 = *(void *)(*(void *)(a3 + 424) + 8 * v179);
    }
    else {
      unint64_t v180 = 0;
    }
    unint64_t v243 = v180;
    unint64_t result = sub_1CB8F1DC4(&v243);
    unint64_t v182 = result;
    if (v181 == 1) {
    if (v182 > v167)
    }
    {
      uint64_t v183 = a7[1];
      if ((v183 & 0x80000000) != 0) {
        unsigned int v184 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v183 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v184 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v183);
      }
      uint64_t v185 = *v184;
      if ((*(unsigned char *)(v185 + 3) & 1) == 0) {
        uint64_t v185 = *(void *)(v185 + 24);
      }
      uint64_t v186 = *(void *)(*(void *)(*(void *)(v185 + 8) + 24) + 32);
      uint64_t v260 = (unint64_t *)v264;
      BOOL v261 = v264;
      uint64_t v262 = 4;
      int v263 = 0;
      unint64_t v259 = (unint64_t)&unk_1F261BC50;
      uint64_t v265 = v186;
      uint64_t v266 = *(void *)(v186 + 40);
      uint64_t v267 = (*(uint64_t (**)(void))(**(void **)(v186 + 16) + 120))(*(void *)(v186 + 16));
      uint64_t v268 = *(void *)(*(void *)v186 + 40) + 272;
      int v269 = 6;
      uint64_t v270 = 1;
      for (uint64_t j = 120; j != 760; j += 40)
        *(_DWORD *)((char *)&v259 + j) = -1;
      uint64_t v188 = a7[1];
      if ((v188 & 0x80000000) != 0) {
        long long v189 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v188 & 0x7FFFFFFF) + 8);
      }
      else {
        long long v189 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v188);
      }
      uint64_t v190 = *v189;
      if ((*(unsigned char *)(v190 + 3) & 1) == 0) {
        uint64_t v190 = *(void *)(v190 + 24);
      }
      sub_1CC6DEE8C((uint64_t)&v259, (const char *)*(unsigned int *)(*(void *)(*(void *)(v190 + 8) + 32) + 4), (uint64_t)&v271);
      uint64_t v33 = v271;
      LODWORD(v150) = v272;
      uint64_t v191 = v271;
      if (v272 >= 0x41) {
        uint64_t v191 = *(void *)v271;
      }
      uint64_t v24 = v273;
      unsigned int v192 = v274;
      if (((-1 << v167) & ~v191) != 0 || a7[6] == 1)
      {
        uint64_t v194 = *((void *)a7 + 1);
        if (v194 != 1)
        {
          a7[1] = sub_1CBB90E88(a4, a7[1], v243, v194);
          *((void *)a7 + 1) = 1;
        }
        *a7 = sub_1CBB90CD4(*a7, a3, (uint64_t)a4);
        unsigned int v195 = sub_1CBB90CD4(a7[1], a3, (uint64_t)a4);
        a7[1] = v195;
        unsigned int v196 = *a7;
        unint64_t v253 = v257;
        unsigned int v254 = 0;
        LODWORD(v271) = v196;
        LODWORD(v273) = 0;
        unsigned int v274 = v195;
        int v275 = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4)[4])(a4, 45, &v253, 1, &v271, 2, 0);
        *a7 = *(_DWORD *)(*(void *)(v197 + 32) + 4);
        unint64_t v253 = v257;
        unsigned int v254 = 0;
        uint64_t v198 = (llvm::LLVMContext *)(unsigned __int16)(v257 >> 3);
        uint64_t v199 = (llvm::LLVMContext *)(unsigned __int16)(v257 >> 19);
        if ((v257 & 2) == 0) {
          uint64_t v199 = (llvm::LLVMContext *)(v257 >> 19);
        }
        if ((v257 & 4) != 0) {
          uint64_t v198 = v199;
        }
        if (v257) {
          uint64_t v200 = (llvm::LLVMContext *)(v257 >> 3);
        }
        else {
          uint64_t v200 = v198;
        }
        uint64_t v201 = llvm::IntegerType::get(***a4[1], v200);
        uint64_t v203 = *(llvm::ConstantInt **)v201;
        unsigned int v204 = *(_DWORD *)(v201 + 8);
        LODWORD(v272) = v204 >> 8;
        if (v204 >> 8 >= 0x41) {
          operator new[]();
        }
        uint64_t v271 = 0;
        uint64_t v205 = llvm::ConstantInt::get(v203, (llvm::LLVMContext *)&v271, v202);
        if (v272 >= 0x41 && v271) {
          MEMORY[0x1D25D9CB0](v271, 0x1000C8000313F17);
        }
        ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*a4)[2])(a4, &v253, v205);
        a7[1] = *(_DWORD *)(*(void *)(v206 + 32) + 4);
      }
      else
      {
        unint64_t v253 = (unint64_t)v235;
        unsigned int v254 = 0;
        LODWORD(v271) = a7[1];
        LODWORD(v273) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a4)[4])(a4, 119, &v253, 1, &v271, 1, 0);
        a7[1] = *(_DWORD *)(*(void *)(v193 + 32) + 4);
        a7[6] = 2;
      }
      if (v192 < 0x41)
      {
LABEL_418:
        if (v150 >= 0x41)
        {
          if (v33) {
            MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
          }
        }
        return sub_1CB9FB5B0((uint64_t)&v259);
      }
LABEL_458:
      if (v24) {
        MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
      }
      goto LABEL_418;
    }
  }
  return result;
}

uint64_t sub_1CBB8E340(unint64_t a1)
{
  return (a1 < 0x11) & (0x10116u >> a1);
}

uint64_t sub_1CBB8E35C(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3, void *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_145;
  }
  for (uint64_t i = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
        ;
        uint64_t i = (uint64_t *)(*(void *)(a2 + 272) + 8 * v8))
  {
    uint64_t v10 = *i;
    if (!v10) {
      break;
    }
    if ((*(unsigned char *)(v10 + 3) & 1) == 0)
    {
      uint64_t v10 = *(void *)(v10 + 24);
      if (!v10 || (*(unsigned char *)(v10 + 3) & 1) == 0) {
        break;
      }
    }
    uint64_t v11 = *(void *)(v10 + 8);
    if (!v11) {
      break;
    }
    if (**(_WORD **)(v11 + 16) != 127) {
      break;
    }
    if (*(_DWORD *)(v11 + 40) != 3) {
      break;
    }
    uint64_t v26 = *(void *)(v11 + 32);
    unsigned int v27 = *(_DWORD *)(v26 + 36);
    sub_1CC73C210(*(_DWORD *)(v26 + 68), a2, (uint64_t)&v70);
    if (!(_BYTE)v72) {
      break;
    }
    if (v71 >= 0x41)
    {
      if (v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      break;
    }
    uint64_t v28 = v70 << -(uint64_t)v71 >> -(uint64_t)v71;
    if (v28 < 1) {
      break;
    }
    uint64_t v29 = 1 << v28;
    uint64_t v70 = 1 << v28;
    uint64_t v30 = a4[3];
    if (v30)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, &v70)
        && *(void *)(a1 + 8) == 1)
      {
        sub_1CBB90228((unint64_t *)&v70, v27, *(_DWORD *)(a1 + 24), a2, (uint64_t)a3, 0);
        if ((_BYTE)v71)
        {
          unsigned int v27 = v70;
          *(_DWORD *)(a1 + 24) = HIDWORD(v70);
        }
        *(_DWORD *)(a1 + 4) = v27;
        *(void *)(a1 + 8) = v29;
        return 1;
      }
      break;
    }
LABEL_144:
    sub_1CB920400();
LABEL_145:
    ;
  }
  uint64_t v12 = *(unsigned int *)(a1 + 4);
  if ((v12 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
  }
  uint64_t v14 = *v13;
  if (v14)
  {
    if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
    {
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15)
      {
        if (**(_WORD **)(v15 + 16) == 47 && *(_DWORD *)(v15 + 40) == 3)
        {
          uint64_t v17 = *(void *)(v15 + 32);
          uint64_t v16 = v15 + 32;
          unsigned int v18 = *(_DWORD *)(v17 + 36);
          sub_1CC73C210(*(_DWORD *)(v17 + 68), a2, (uint64_t)&v70);
          if ((_BYTE)v72)
          {
            char v24 = v71;
            if (v71 < 0x41)
            {
LABEL_29:
              uint64_t v25 = v70 << -v24 >> -v24;
              goto LABEL_42;
            }
            if (v70) {
              MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)v16 + 36), a2, (uint64_t)&v70);
          if ((_BYTE)v72)
          {
            char v31 = v71;
            if (v71 < 0x41) {
              goto LABEL_41;
            }
            if (v70) {
              MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  uint64_t v19 = *(unsigned int *)(a1 + 4);
  if ((v19 & 0x80000000) != 0) {
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v19);
  }
  uint64_t v21 = *v20;
  if (!v21) {
    goto LABEL_60;
  }
  if ((*(unsigned char *)(v21 + 3) & 1) == 0)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21 || (*(unsigned char *)(v21 + 3) & 1) == 0) {
      goto LABEL_60;
    }
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (!v22 || **(_WORD **)(v22 + 16) != 47 || *(_DWORD *)(v22 + 40) != 3) {
    goto LABEL_60;
  }
  uint64_t v23 = *(void *)(v22 + 32);
  uint64_t v16 = v22 + 32;
  sub_1CC73C210(*(_DWORD *)(v23 + 36), a2, (uint64_t)&v70);
  if (!(_BYTE)v72)
  {
LABEL_24:
    unsigned int v18 = *(_DWORD *)(*(void *)v16 + 36);
    sub_1CC73C210(*(_DWORD *)(*(void *)v16 + 68), a2, (uint64_t)&v70);
    if (!(_BYTE)v72) {
      goto LABEL_60;
    }
    char v24 = v71;
    if (v71 >= 0x41)
    {
      if (v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      goto LABEL_60;
    }
    goto LABEL_29;
  }
  char v31 = v71;
  if (v71 >= 0x41)
  {
    if (v70) {
      MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
    }
    goto LABEL_24;
  }
LABEL_41:
  uint64_t v25 = v70 << -v31 >> -v31;
  unsigned int v18 = *(_DWORD *)(*(void *)v16 + 68);
LABEL_42:
  uint64_t v70 = v25;
  uint64_t v32 = a4[3];
  if (!v32) {
    goto LABEL_144;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v32 + 48))(v32, &v70)
    && *(void *)(a1 + 8) == 1)
  {
    sub_1CBB90228((unint64_t *)&v70, v18, *(_DWORD *)(a1 + 24), a2, (uint64_t)a3, 0);
    if ((_BYTE)v71)
    {
      unsigned int v18 = v70;
      *(_DWORD *)(a1 + 24) = HIDWORD(v70);
    }
    *(_DWORD *)(a1 + 4) = v18;
    *(void *)(a1 + 8) = v25;
    return 1;
  }
LABEL_60:
  uint64_t v34 = *(unsigned int *)(a1 + 4);
  if ((v34 & 0x80000000) != 0) {
    int v35 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
  }
  else {
    int v35 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v34);
  }
  uint64_t v36 = *v35;
  if (!v36) {
    goto LABEL_69;
  }
  if ((*(unsigned char *)(v36 + 3) & 1) == 0)
  {
    uint64_t v36 = *(void *)(v36 + 24);
    if (!v36 || (*(unsigned char *)(v36 + 3) & 1) == 0) {
      goto LABEL_69;
    }
  }
  uint64_t v33 = *(void *)(v36 + 8);
  if (!v33 || **(_WORD **)(v33 + 16) != 47 || *(_DWORD *)(v33 + 40) != 3) {
    goto LABEL_69;
  }
  uint64_t v37 = *(void *)(v33 + 32);
  unsigned int v38 = *(_DWORD *)(v37 + 36);
  sub_1CC73C210(*(_DWORD *)(v37 + 68), a2, (uint64_t)&v70);
  if (!(_BYTE)v72) {
    goto LABEL_68;
  }
  char v43 = v71;
  if (v71 < 0x41)
  {
LABEL_82:
    uint64_t v44 = v70 << -v43 >> -v43;
    goto LABEL_85;
  }
  if (v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
LABEL_68:
  sub_1CC73C210(*(_DWORD *)(*(void *)(v33 + 32) + 36), a2, (uint64_t)&v70);
  if ((_BYTE)v72)
  {
    char v45 = v71;
    if (v71 >= 0x41)
    {
      if (v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      goto LABEL_69;
    }
  }
  else
  {
LABEL_69:
    uint64_t v39 = *(unsigned int *)(a1 + 4);
    if ((v39 & 0x80000000) != 0) {
      uint64_t v40 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v40 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v39);
    }
    uint64_t v41 = *v40;
    if (!v41) {
      return 0;
    }
    if ((*(unsigned char *)(v41 + 3) & 1) == 0)
    {
      uint64_t v41 = *(void *)(v41 + 24);
      if (!v41 || (*(unsigned char *)(v41 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v33 = *(void *)(v41 + 8);
    if (!v33) {
      return v33;
    }
    if (**(_WORD **)(v33 + 16) != 47 || *(_DWORD *)(v33 + 40) != 3) {
      return 0;
    }
    sub_1CC73C210(*(_DWORD *)(*(void *)(v33 + 32) + 36), a2, (uint64_t)&v70);
    if (!(_BYTE)v72)
    {
LABEL_77:
      uint64_t v42 = *(void *)(v33 + 32);
      unsigned int v38 = *(_DWORD *)(v42 + 36);
      sub_1CC73C210(*(_DWORD *)(v42 + 68), a2, (uint64_t)&v70);
      if (!(_BYTE)v72) {
        return 0;
      }
      char v43 = v71;
      if (v71 >= 0x41)
      {
        if (v70) {
          MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
        }
        return 0;
      }
      goto LABEL_82;
    }
    char v45 = v71;
    if (v71 >= 0x41)
    {
      if (v70) {
        MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
      }
      goto LABEL_77;
    }
  }
  uint64_t v44 = v70 << -v45 >> -v45;
  unsigned int v38 = *(_DWORD *)(*(void *)(v33 + 32) + 68);
LABEL_85:
  if (*(void *)(a1 + 8) != 1) {
    return 0;
  }
  sub_1CBB90228((unint64_t *)&v70, v38, 0, a2, (uint64_t)a3, 0);
  uint64_t v33 = 0;
  if ((_BYTE)v71) {
    return v33;
  }
  uint64_t v46 = (void *)a4[3];
  if (!v46)
  {
    int v69 = 0;
    goto LABEL_144;
  }
  if (v46 == a4)
  {
    int v69 = v68;
    (*(void (**)(void *, void *))(*a4 + 24))(a4, v68);
    uint64_t v47 = (uint64_t)v69;
  }
  else
  {
    uint64_t v47 = (*(uint64_t (**)(void *))(*v46 + 16))(v46);
    int v69 = (void *)v47;
  }
  uint64_t v70 = v44;
  if (!v47) {
    goto LABEL_144;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v47 + 48))(v47, &v70))
  {
    char v48 = 0;
    unint64_t v49 = 0;
    uint64_t v50 = 1;
  }
  else
  {
    a4 = 0;
    while (1)
    {
      uint64_t v51 = *(uint64_t *)((char *)qword_1CDC6CEC8 + (void)a4);
      if (v51 < v44 && !(v44 % v51))
      {
        uint64_t v70 = v44 / v51;
        if (!v69) {
          goto LABEL_144;
        }
        if ((*(unsigned int (**)(void *, uint64_t *))(*v69 + 48))(v69, &v70)) {
          break;
        }
      }
      if (++a4 == (void *)232)
      {
        uint64_t v50 = 0;
        unint64_t v49 = 0;
        char v48 = 1;
        goto LABEL_101;
      }
    }
    char v48 = 0;
    unint64_t v49 = v51 & 0xFFFFFFFFFFFFFF00;
    uint64_t v50 = v51;
  }
LABEL_101:
  int64_t v52 = v49 | v50;
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void))(*v69 + 40))();
  }
  if (v52 == 1) {
    char v53 = 1;
  }
  else {
    char v53 = v48;
  }
  if (v53) {
    return 0;
  }
  int v55 = *(_DWORD *)(a1 + 4);
  if (v55 < 0 && (uint64_t v56 = v55 & 0x7FFFFFFF, v56 < *(_DWORD *)(a2 + 432))) {
    unint64_t v57 = *(void *)(*(void *)(a2 + 424) + 8 * v56);
  }
  else {
    unint64_t v57 = 0;
  }
  unint64_t v66 = v57;
  int v67 = 0;
  uint64_t v58 = (llvm::LLVMContext *)(unsigned __int16)(v57 >> 3);
  uint64_t v59 = (llvm::LLVMContext *)(unsigned __int16)(v57 >> 19);
  if ((v57 & 2) == 0) {
    uint64_t v59 = (llvm::LLVMContext *)(v57 >> 19);
  }
  if ((v57 & 4) != 0) {
    uint64_t v58 = v59;
  }
  if (v57) {
    uint64_t v60 = (llvm::LLVMContext *)(v57 >> 3);
  }
  else {
    uint64_t v60 = v58;
  }
  BOOL v61 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], v60);
  uint64_t v33 = 1;
  int v62 = llvm::ConstantInt::get(v61, v52, (const llvm::APInt *)1);
  uint64_t v63 = ((uint64_t (*)(llvm::IntegerType *****, unint64_t *, void *))(*a3)[2])(a3, &v66, v62);
  unint64_t v76 = v57;
  int v77 = 0;
  LODWORD(v70) = v38;
  int v72 = 0;
  uint64_t v73 = v63;
  uint64_t v74 = v64;
  int v75 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a3)[4])(a3, 47, &v76, 1, &v70, 2, 0);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(*(void *)(v65 + 32) + 4);
  *(void *)(a1 + 8) = v44 / v52;
  return v33;
}

uint64_t sub_1CBB8ED0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) || *(void *)(a1 + 8) != 1) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  if ((v3 & 0x80000000) != 0) {
    long long v4 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  }
  else {
    long long v4 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    if (*(unsigned char *)(v5 + 3) & 1) != 0 || (uint64_t v5 = *(void *)(v5 + 24)) != 0 && (*(unsigned char *)(v5 + 3))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        if (**(_WORD **)(v6 + 16) == 48 && *(_DWORD *)(v6 + 40) == 3)
        {
          uint64_t v21 = a1;
          uint64_t v22 = a3;
          uint64_t v13 = *(void *)(v6 + 32);
          uint64_t v12 = v6 + 32;
          int v14 = *(_DWORD *)(v13 + 36);
          uint64_t v23 = a2;
          sub_1CC73C210(*(_DWORD *)(v13 + 68), a2, (uint64_t)&v24);
          if (v26)
          {
            if (v25 < 0x41)
            {
              uint64_t v16 = (uint64_t)(v24 << -(uint64_t)v25) >> -(uint64_t)v25;
              int v17 = 1;
              goto LABEL_41;
            }
            if (v24) {
              MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
            }
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)v12 + 36), v23, (uint64_t)&v24);
          if (v26)
          {
            if (v25 < 0x41)
            {
              uint64_t v16 = (uint64_t)(v24 << -(uint64_t)v25) >> -(uint64_t)v25;
              int v17 = 1;
              goto LABEL_40;
            }
            if (v24) {
              MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
            }
          }
          a1 = v21;
          a3 = v22;
          a2 = v23;
        }
      }
    }
  }
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  uint64_t v8 = (uint64_t *)((v7 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v7);
  uint64_t v9 = *v8;
  if (!v9) {
    return 0;
  }
  if ((*(unsigned char *)(v9 + 3) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v9 + 24);
    if (!v9 || (*(unsigned char *)(v9 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    return 0;
  }
  if (**(_WORD **)(v10 + 16) != 49) {
    return 0;
  }
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v21 = a1;
  if (*(_DWORD *)(v10 + 40) != 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v12 = v10 + 32;
  int v14 = *(_DWORD *)(v15 + 36);
  sub_1CC73C210(*(_DWORD *)(v15 + 68), a2, (uint64_t)&v24);
  if (v26)
  {
    if (v25 < 0x41)
    {
      uint64_t v16 = (uint64_t)(v24 << -(uint64_t)v25) >> -(uint64_t)v25;
      int v17 = 2;
      goto LABEL_41;
    }
    if (v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)v12 + 36), v23, (uint64_t)&v24);
  if (!v26) {
    return 0;
  }
  if (v25 >= 0x41)
  {
    if (v24) {
      MEMORY[0x1D25D9CB0](v24, 0x1000C8000313F17);
    }
    return 0;
  }
  uint64_t v16 = (uint64_t)(v24 << -(uint64_t)v25) >> -(uint64_t)v25;
  int v17 = 2;
LABEL_40:
  int v14 = *(_DWORD *)(*(void *)v12 + 68);
LABEL_41:
  unint64_t v24 = v16;
  uint64_t v18 = *(void *)(v22 + 24);
  if (!v18)
  {
    sub_1CB920400();
    goto LABEL_59;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)v18 + 48))(v18, &v24);
  if (result)
  {
    if (v14 < 0 && (v14 & 0x7FFFFFFFu) < *(_DWORD *)(v23 + 432)) {
      unint64_t v19 = *(void *)(*(void *)(v23 + 424) + 8 * (v14 & 0x7FFFFFFF));
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v24 = v19;
    uint64_t v12 = sub_1CB8F1DC4(&v24);
    if (v20 != 1)
    {
LABEL_48:
      if (v12 == 32)
      {
        *(_DWORD *)(v21 + 4) = v14;
        *(void *)(v21 + 8) = v16;
        uint64_t result = 1;
        *(_DWORD *)(v21 + 24) = v17;
        return result;
      }
      return 0;
    }
LABEL_59:
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1CBB8F084(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if ((v4 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v4);
  }
  uint64_t v6 = *v5;
  if (v6 && ((*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3) & 1) != 0)) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 45) <= 0x15 && ((1 << (v8 - 45)) & 0x200003) != 0)
  {
    int v50 = 0;
    uint64_t v49 = 0;
    uint64_t v10 = *(void *)(*(void *)(v7 + 24) + 32);
    v59[1] = v61;
    v59[2] = v61;
    v59[3] = 4;
    int v60 = 0;
    v59[0] = &unk_1F261BC50;
    v61[4] = v10;
    v61[5] = *(void *)(v10 + 40);
    v61[6] = (*(uint64_t (**)(void))(**(void **)(v10 + 16) + 120))(*(void *)(v10 + 16));
    v61[7] = *(void *)(*(void *)v10 + 40) + 272;
    int v62 = 6;
    uint64_t v63 = 1;
    for (uint64_t i = 15; i != 95; i += 5)
      LODWORD(v59[i]) = -1;
    uint64_t v12 = *(unsigned int *)(a1 + 4);
    if ((v12 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
    }
    uint64_t v14 = *v13;
    if (v14)
    {
      if (*(unsigned char *)(v14 + 3) & 1) != 0 || (uint64_t v14 = *(void *)(v14 + 24)) != 0 && (*(unsigned char *)(v14 + 3))
      {
        uint64_t v15 = *(void *)(v14 + 8);
        if (v15)
        {
          if (**(_WORD **)(v15 + 16) == 46 && *(_DWORD *)(v15 + 40) == 3)
          {
            uint64_t v48 = *(void *)(v15 + 32);
            int v50 = *(_DWORD *)(v48 + 36);
            sub_1CC73C210(*(_DWORD *)(v48 + 68), a2, (uint64_t)&__src);
            if ((_BYTE)v57)
            {
              if (v56 < 0x41)
              {
                uint64_t v30 = -((uint64_t)((void)__src << -(uint64_t)v56) >> -(uint64_t)v56);
                goto LABEL_49;
              }
              if (__src) {
                MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
    uint64_t v16 = *(unsigned int *)(a1 + 4);
    if ((v16 & 0x80000000) != 0) {
      int v17 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
    }
    else {
      int v17 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v16);
    }
    uint64_t v18 = *v17;
    if (v18 && ((*(unsigned char *)(v18 + 3) & 1) != 0 || (uint64_t v18 = *(void *)(v18 + 24)) != 0 && (*(unsigned char *)(v18 + 3) & 1) != 0)) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    if (v8 != 66)
    {
      if (v19 && **(_WORD **)(v19 + 16) == 45 && *(_DWORD *)(v19 + 40) == 3)
      {
        uint64_t v27 = *(void *)(v19 + 32);
        int v50 = *(_DWORD *)(v27 + 36);
        sub_1CC73C210(*(_DWORD *)(v27 + 68), a2, (uint64_t)&__src);
        if ((_BYTE)v57)
        {
          if (v56 < 0x41)
          {
            uint64_t v30 = (uint64_t)((void)__src << -(uint64_t)v56) >> -(uint64_t)v56;
LABEL_49:
            uint64_t v49 = v30;
LABEL_72:
            int v36 = *(_DWORD *)(a1 + 24);
            if (v36 == 2)
            {
              uint64_t v40 = *(unsigned int *)(a1 + 4);
              if ((v40 & 0x80000000) != 0) {
                uint64_t v41 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v41 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v40);
              }
              uint64_t v42 = *v41;
              if ((*(unsigned char *)(v42 + 3) & 1) == 0) {
                uint64_t v42 = *(void *)(v42 + 24);
              }
              if ((*(_WORD *)(*(void *)(v42 + 8) + 44) & 0x800) == 0) {
                goto LABEL_89;
              }
            }
            else if (v36 == 1)
            {
              uint64_t v37 = *(unsigned int *)(a1 + 4);
              if ((v37 & 0x80000000) != 0) {
                unsigned int v38 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v38 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v37);
              }
              uint64_t v39 = *v38;
              if ((*(unsigned char *)(v39 + 3) & 1) == 0) {
                uint64_t v39 = *(void *)(v39 + 24);
              }
              if ((*(_WORD *)(*(void *)(v39 + 8) + 44) & 0x1000) == 0) {
                goto LABEL_89;
              }
            }
            uint64_t v43 = *(void *)(a1 + 16);
            v49 *= *(void *)(a1 + 8);
            uint64_t v44 = v43 + v49;
            BOOL v45 = v43 + v49 > -32769;
            BOOL v46 = v43 + v49 < 0x8000;
            if (v44 >= 0) {
              BOOL v45 = v46;
            }
            if (v45)
            {
              *(void *)(a1 + 16) = v44;
              *(_DWORD *)(a1 + 4) = v50;
              uint64_t v29 = 1;
LABEL_90:
              sub_1CB9FB5B0((uint64_t)v59);
              return v29;
            }
LABEL_89:
            uint64_t v29 = 0;
            goto LABEL_90;
          }
          if (__src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
        sub_1CC73C210(*(_DWORD *)(*(void *)(v19 + 32) + 36), a2, (uint64_t)&__src);
        if ((_BYTE)v57)
        {
          if (v56 < 0x41)
          {
            uint64_t v49 = (uint64_t)((void)__src << -(uint64_t)v56) >> -(uint64_t)v56;
            int v50 = *(_DWORD *)(*(void *)(v19 + 32) + 68);
            goto LABEL_72;
          }
          if (__src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
        }
      }
      int v28 = *(_DWORD *)(a1 + 4);
      __src = &v49;
      uint64_t v56 = &v50;
      LODWORD(v51) = v28;
      if (!sub_1CBACA950((uint64_t)&__src, a2, (unsigned int *)&v51)) {
        goto LABEL_89;
      }
      goto LABEL_72;
    }
    if (v19 && **(_WORD **)(v19 + 16) == 66 && *(_DWORD *)(v19 + 40) == 3)
    {
      uint64_t v20 = *(void *)(v19 + 32);
      int v50 = *(_DWORD *)(v20 + 36);
      sub_1CC73C210(*(_DWORD *)(v20 + 68), a2, (uint64_t)&__src);
      if ((_BYTE)v57)
      {
        char v31 = (char)v56;
        if (v56 < 0x41)
        {
LABEL_61:
          int v26 = 0;
          uint64_t v49 = (uint64_t)((void)__src << -v31) >> -v31;
LABEL_62:
          uint64_t v33 = *(void *)(v7 + 32);
          uint64_t v34 = (const char *)*(unsigned int *)(v33 + 68);
          sub_1CC6DEE8C((uint64_t)v59, (const char *)*(unsigned int *)(v33 + 36), (uint64_t)&__src);
          sub_1CC6DEE8C((uint64_t)v59, v34, (uint64_t)&v51);
          if (v56 >= 0x41) {
            operator new[]();
          }
          if (v56) {
            BOOL v35 = (v51 | (unint64_t)__src) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
          }
          else {
            BOOL v35 = 1;
          }
          if (v54 >= 0x41 && v53) {
            MEMORY[0x1D25D9CB0](v53, 0x1000C8000313F17);
          }
          if (v52 >= 0x41 && v51) {
            MEMORY[0x1D25D9CB0](v51, 0x1000C8000313F17);
          }
          if (v58 >= 0x41 && v57) {
            MEMORY[0x1D25D9CB0](v57, 0x1000C8000313F17);
          }
          if (v56 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          if ((v26 | !v35)) {
            goto LABEL_89;
          }
          goto LABEL_72;
        }
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
      sub_1CC73C210(*(_DWORD *)(*(void *)(v19 + 32) + 36), a2, (uint64_t)&__src);
      if ((_BYTE)v57)
      {
        if (v56 < 0x41)
        {
          int v26 = 0;
          uint64_t v49 = (uint64_t)((void)__src << -(uint64_t)v56) >> -(uint64_t)v56;
          uint64_t v32 = *(void *)(v19 + 32);
          goto LABEL_59;
        }
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
    }
    uint64_t v21 = *(unsigned int *)(a1 + 4);
    if ((v21 & 0x80000000) != 0) {
      uint64_t v22 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v22 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v21);
    }
    uint64_t v23 = *v22;
    if (!v23) {
      goto LABEL_38;
    }
    if ((*(unsigned char *)(v23 + 3) & 1) == 0)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23 || (*(unsigned char *)(v23 + 3) & 1) == 0) {
        goto LABEL_38;
      }
    }
    uint64_t v24 = *(void *)(v23 + 8);
    if (!v24 || **(_WORD **)(v24 + 16) != 66 || *(_DWORD *)(v24 + 40) != 3) {
      goto LABEL_38;
    }
    sub_1CC73C210(*(_DWORD *)(*(void *)(v24 + 32) + 36), a2, (uint64_t)&__src);
    if (!(_BYTE)v57)
    {
LABEL_37:
      uint64_t v25 = *(void *)(v24 + 32);
      int v50 = *(_DWORD *)(v25 + 36);
      sub_1CC73C210(*(_DWORD *)(v25 + 68), a2, (uint64_t)&__src);
      if (!(_BYTE)v57)
      {
LABEL_38:
        int v26 = 1;
        goto LABEL_62;
      }
      char v31 = (char)v56;
      if (v56 >= 0x41)
      {
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
        goto LABEL_38;
      }
      goto LABEL_61;
    }
    if (v56 >= 0x41)
    {
      if (__src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      goto LABEL_37;
    }
    int v26 = 0;
    uint64_t v49 = (uint64_t)((void)__src << -(uint64_t)v56) >> -(uint64_t)v56;
    uint64_t v32 = *(void *)(v24 + 32);
LABEL_59:
    int v50 = *(_DWORD *)(v32 + 68);
    goto LABEL_62;
  }
  return 0;
}

double sub_1CBB8F944@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::IntegerType *****a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a3;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 32) + 4);
  *(_DWORD *)uint64_t v70 = 0;
  *(_DWORD *)&v70[4] = v7;
  *(_OWORD *)&v70[8] = xmmword_1CD91D2E0;
  *(_DWORD *)&v70[24] = 0;
  uint64_t v71 = a2;
  if ((v7 & 0x80000000) != 0) {
    uint64_t v8 = *(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 272) + 8 * v7;
  }
  uint64_t v9 = *(void *)v8;
  if ((*(unsigned char *)(*(void *)v8 + 3) & 1) == 0) {
    uint64_t v9 = *(void *)(v9 + 24);
  }
  uint64_t v10 = *(void *)(v9 + 8);
  unsigned int v11 = **(unsigned __int16 **)(v10 + 16);
  if (v11 != 81) {
    goto LABEL_25;
  }
  int v12 = *(_DWORD *)(*(void *)(v10 + 32) + 4);
  if (v12 < 0 && (uint64_t v13 = v12 & 0x7FFFFFFF, v13 < *(_DWORD *)(a2 + 432))) {
    uint64_t v14 = *(unint64_t **)(*(void *)(a2 + 424) + 8 * v13);
  }
  else {
    uint64_t v14 = 0;
  }
  unint64_t v76 = v14;
  uint64_t v16 = sub_1CB8F1DC4((unint64_t *)&v76);
  if (v15 == 1) {
  if (v16 != 64)
  }
  {
    uint64_t v5 = a3;
LABEL_23:
    unsigned int v11 = *(_DWORD *)(*(void *)(v10 + 32) + 36);
    goto LABEL_24;
  }
  int v17 = *(_DWORD *)(*(void *)(v10 + 32) + 36);
  if (v17 < 0 && (uint64_t v18 = v17 & 0x7FFFFFFF, v18 < *(_DWORD *)(a2 + 432))) {
    unint64_t v19 = *(void *)(*(void *)(a2 + 424) + 8 * v18);
  }
  else {
    unint64_t v19 = 0;
  }
  unint64_t v79 = v19;
  uint64_t v21 = sub_1CB8F1DC4(&v79);
  if (v20 == 1) {
  BOOL v47 = v21 == 32;
  }
  uint64_t v5 = a3;
  if (!v47) {
    goto LABEL_23;
  }
  unint64_t v79 = 513;
  int v80 = 0;
  LODWORD(v76) = *(_DWORD *)(*(void *)(v10 + 32) + 36);
  int v78 = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, unint64_t **, uint64_t, void))(*a3)[4])(a3, 126, &v79, 1, &v76, 1, 0);
  unsigned int v11 = *(_DWORD *)(*(void *)(v22 + 32) + 4);
LABEL_24:
  *(_DWORD *)&v70[4] = v11;
LABEL_25:
  LODWORD(v23) = 0;
  unsigned int v65 = v11;
  LOBYTE(v66) = 0;
  do
  {
    do
    {
      while (1)
      {
        while (1)
        {
          sub_1CBB90228((unint64_t *)&v76, *(unsigned int *)&v70[4], *(int *)&v70[24], a2, (uint64_t)v5, 0);
          int v24 = v77;
          if ((_BYTE)v77)
          {
            *(_DWORD *)&v70[24] = HIDWORD(v76);
            *(_DWORD *)&v70[4] = v76;
          }
          v74[0] = &unk_1F25F94B0;
          int v75 = v74;
          int v25 = sub_1CBB8E35C((uint64_t)v70, a2, v5, v74);
          if (v75 == v74)
          {
            (*(void (**)(void *))(v74[0] + 32))(v74);
          }
          else if (v75)
          {
            (*(void (**)(void))(*v75 + 40))();
          }
          v72[0] = &unk_1F25F94B0;
          uint64_t v73 = v72;
          int v26 = sub_1CBB8ED0C((uint64_t)v70, a2, (uint64_t)v72);
          if (v73 == v72)
          {
            (*(void (**)(void *))(v72[0] + 32))(v72);
          }
          else if (v73)
          {
            (*(void (**)(void))(*v73 + 40))();
          }
          int v27 = sub_1CBB8F084((uint64_t)v70, a2);
          if (!v23) {
            break;
          }
          int v28 = 0;
          uint64_t v23 = 1;
          if (!v24) {
            goto LABEL_79;
          }
        }
        uint64_t v29 = *(unsigned int *)&v70[4];
        if ((*(_DWORD *)&v70[4] & 0x80000000) != 0) {
          uint64_t v30 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (*(_DWORD *)&v70[4] & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v30 = (uint64_t *)(*(void *)(a2 + 272) + 8 * *(unsigned int *)&v70[4]);
        }
        uint64_t v31 = *v30;
        int v68 = v25;
        if ((*(unsigned char *)(v31 + 3) & 1) == 0) {
          uint64_t v31 = *(void *)(v31 + 24);
        }
        uint64_t v32 = *(void *)(v31 + 8);
        uint64_t v33 = *(void *)(*(void *)(v32 + 24) + 32);
        uint64_t v34 = *(void *)(v33 + 48);
        if (!v34)
        {
          uint64_t v34 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v33 + 8) + 216))(*(void *)(v33 + 8), v33 + 128, v33);
          *(void *)(v33 + 48) = v34;
        }
        LODWORD(v69) = 0;
        if ((v29 & 0x80000000) != 0) {
          BOOL v35 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
        }
        else {
          BOOL v35 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v29);
        }
        uint64_t v36 = *v35;
        if (v36)
        {
          if (*(unsigned char *)(v36 + 3) & 1) != 0 || (uint64_t v36 = *(void *)(v36 + 24)) != 0 && (*(unsigned char *)(v36 + 3))
          {
            uint64_t v37 = *(void *)(v36 + 8);
            if (v37)
            {
              if (**(_WORD **)(v37 + 16) == 45 && *(_DWORD *)(v37 + 40) == 3)
              {
                uint64_t v38 = *(void *)(v37 + 32);
                uint64_t v39 = *(unsigned int *)(v38 + 36);
                LODWORD(v69) = v39;
                if ((v39 & 0x80000000) != 0) {
                  uint64_t v40 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v40 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v39);
                }
                uint64_t v41 = *v40;
                if (v41)
                {
                  if ((*(unsigned char *)(v41 + 3) & 1) != 0
                    || (uint64_t v41 = *(void *)(v41 + 24)) != 0 && (*(unsigned char *)(v41 + 3) & 1) != 0)
                  {
                    uint64_t v42 = *(void *)(v41 + 8);
                    if (v42)
                    {
                      if (**(_WORD **)(v42 + 16) == 80 && *(_DWORD *)(v42 + 40) == 2)
                      {
                        LODWORD(v39) = *(_DWORD *)(*(void *)(v42 + 32) + 36);
                        LODWORD(v69) = v39;
                      }
                    }
                  }
                }
                int v43 = *(_DWORD *)(v38 + 68);
                unint64_t v76 = &v69;
                LODWORD(v79) = v39;
                sub_1CBA60644((_DWORD **)&v76, a2, (unsigned int *)&v79);
                if ((v69 & 0x80000000) != 0) {
                  uint64_t v44 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v44 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v69);
                }
                uint64_t v45 = *v44;
                if ((*(unsigned char *)(v45 + 3) & 1) == 0) {
                  uint64_t v45 = *(void *)(v45 + 24);
                }
                uint64_t v46 = *(void *)(v45 + 8);
                if (**(_WORD **)(v46 + 16) == 70 && !*(unsigned char *)(v34 + 560))
                {
                  unsigned int v66 = *(_DWORD *)(*(void *)(v46 + 32) + 48);
                  unsigned int v65 = v66 >> 8;
                  *(_DWORD *)&v70[4] = v43;
                  uint64_t v23 = 1;
                  int v28 = 1;
                  goto LABEL_73;
                }
              }
            }
          }
        }
        if (**(_WORD **)(v32 + 16) != 70)
        {
          uint64_t v23 = 0;
          int v28 = 0;
LABEL_73:
          uint64_t v5 = a3;
          goto LABEL_74;
        }
        BOOL v47 = !*(unsigned char *)(v34 + 560) && *(void *)&v70[8] == 1;
        uint64_t v5 = a3;
        if (v47) {
          break;
        }
        uint64_t v23 = 0;
        int v28 = 0;
LABEL_74:
        int v25 = v68;
        if (!v24) {
          goto LABEL_79;
        }
      }
      unsigned int v66 = *(_DWORD *)(*(void *)(v32 + 32) + 48);
      unint64_t v79 = 129;
      int v80 = 0;
      uint64_t v48 = llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
      int v50 = *(llvm::ConstantInt **)v48;
      unsigned int v51 = *(_DWORD *)(v48 + 8);
      unsigned int v77 = v51 >> 8;
      if (v51 >> 8 >= 0x41) {
        operator new[]();
      }
      unint64_t v76 = 0;
      unsigned int v52 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v76, v49);
      int v25 = v68;
      if (v77 >= 0x41 && v76) {
        MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
      }
      unsigned int v65 = v66 >> 8;
      ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*a3)[2])(a3, &v79, v52);
      *(_DWORD *)&v70[4] = *(_DWORD *)(*(void *)(v53 + 32) + 4);
      uint64_t v23 = 1;
      int v28 = 1;
    }
    while (v24);
LABEL_79:
    ;
  }
  while (((v25 | v26 | v27 | v28) & 1) != 0);
  int v54 = *(_DWORD *)&v70[4];
  if ((*(_DWORD *)&v70[4] & 0x80000000) != 0)
  {
    unsigned int v56 = v65;
    if ((*(_DWORD *)&v70[4] & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
      unint64_t v55 = 0;
    }
    else {
      unint64_t v55 = *(void *)(*(void *)(a2 + 424) + 8 * (*(_DWORD *)&v70[4] & 0x7FFFFFFF));
    }
  }
  else
  {
    unint64_t v55 = 0;
    unsigned int v56 = v65;
  }
  unint64_t v69 = v55;
  unint64_t v58 = sub_1CB8F1DC4(&v69);
  if (v57 == 1) {
  if (v58 > a4)
  }
  {
    if ((v69 & 0xFFFFFFFFFFFFFFF9) != 0 && (v69 & 6) == 2)
    {
      unint64_t v79 = 513;
      int v80 = 0;
      LODWORD(v76) = v54;
      int v78 = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, unint64_t **, uint64_t, void))(*v5)[4])(v5, 80, &v79, 1, &v76, 1, 0);
      int v54 = *(_DWORD *)(*(void *)(v59 + 32) + 4);
    }
    unint64_t v79 = 257;
    int v80 = 0;
    LODWORD(v76) = v54;
    int v78 = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, unint64_t **, uint64_t, void))(*v5)[4])(v5, 119, &v79, 1, &v76, 1, 0);
    *(_DWORD *)&v70[4] = *(_DWORD *)(*(void *)(v60 + 32) + 4);
  }
  *(void *)a5 = v66 | ((*(void *)&v56 & 0xFFFFFFLL) << 8) | (v23 << 32);
  double result = *(double *)v70;
  long long v62 = *(_OWORD *)&v70[16];
  *(_OWORD *)(a5 + 8) = *(_OWORD *)v70;
  *(_OWORD *)(a5 + 24) = v62;
  *(void *)(a5 + 40) = v71;
  return result;
}

unint64_t *sub_1CBB90228(unint64_t *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = result;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  if ((a2 & 0x80000000) != 0) {
    int v12 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    int v12 = (uint64_t *)(*(void *)(a4 + 272) + 8 * a2);
  }
  uint64_t v13 = *v12;
  if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
    uint64_t v13 = *(void *)(v13 + 24);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  unsigned int v15 = **(unsigned __int16 **)(v14 + 16);
  if (v15 > 0x7B)
  {
    if (v15 != 124)
    {
      if (v15 != 126) {
        goto LABEL_8;
      }
LABEL_14:
      BOOL v17 = v15 == 92;
      if (a3 == 1) {
        goto LABEL_85;
      }
      uint64_t v18 = 2;
      if (v17) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
LABEL_24:
    BOOL v22 = v15 == 91;
    if (a3 == 2) {
      goto LABEL_85;
    }
    uint64_t v18 = 1;
    if (v22)
    {
LABEL_16:
      unint64_t v19 = *(void *)(v14 + 48);
      if (v19 < 8) {
        goto LABEL_85;
      }
      if ((v19 & 7) != 0)
      {
        uint64_t v20 = (_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
        BOOL v21 = (*(void *)(v14 + 48) & 7) != 3 || v20 == 0;
        if (v21 || *v20 != 1) {
          goto LABEL_85;
        }
      }
      else
      {
        v19 &= 0xFFFFFFFFFFFFFFF8;
        *(void *)(v14 + 48) = v19;
      }
      if ((v19 & 7) != 0)
      {
        unint64_t v42 = *(void *)((v19 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v42 = v19 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(v14 + 48) = v19 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v43 = *(void *)(v42 + 24);
      double result = (unint64_t *)(v42 + 24);
      if ((v43 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_85;
      }
      double result = (unint64_t *)sub_1CB8F1DC4(result);
      int v45 = (int)result;
      if (v44 == 1) {
      unsigned int v46 = (v45 + 7) & 0xFFFFFFF8;
      }
      if (v46 > 0x20) {
        goto LABEL_85;
      }
      BOOL v47 = v46 > 0x10;
      uint64_t v48 = 129;
      if (v47) {
        uint64_t v48 = 257;
      }
      unint64_t v58 = (unint64_t *)v48;
      unsigned int v59 = 0;
      LODWORD(v63) = a2;
      LODWORD(v65) = 0;
      double result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 119, &v58, 1, &v63, 1, 0);
      goto LABEL_92;
    }
LABEL_26:
    unsigned int v23 = *(_DWORD *)(*(void *)(v14 + 32) + 36);
    if ((v23 & 0x80000000) != 0 && (v23 & 0x7FFFFFFF) < *(_DWORD *)(a4 + 432)) {
      unint64_t v24 = *(void *)(*(void *)(a4 + 424) + 8 * (v23 & 0x7FFFFFFF));
    }
    else {
      unint64_t v24 = 0;
    }
    unint64_t v56 = v24;
    unint64_t v26 = sub_1CB8F1DC4(&v56);
    if (v25 == 1)
    {
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_78;
      }
    }
    else if ((a2 & 0x80000000) == 0)
    {
      goto LABEL_78;
    }
    if ((a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a4 + 432))
    {
      int v27 = *(void **)(*(void *)(a4 + 424) + 8 * (a2 & 0x7FFFFFFF));
LABEL_79:
      uint64_t v63 = v27;
      double result = (unint64_t *)sub_1CB8F1DC4((unint64_t *)&v63);
      unsigned int v51 = result;
      if (v50 == 1) {
      if (v26 <= 0x10)
      }
        uint64_t v52 = 16;
      else {
        uint64_t v52 = 32;
      }
      if (v51 == (unint64_t *)v52) {
        goto LABEL_85;
      }
      double result = (unint64_t *)sub_1CB8F1DC4(&v56);
      int v54 = result;
      if (v53 == 1) {
      if (v54 == (unint64_t *)v52)
      }
      {
LABEL_93:
        unint64_t *v10 = v23 | (unint64_t)(v18 << 32);
        *((unsigned char *)v10 + 8) = 1;
        return result;
      }
      unint64_t v58 = (unint64_t *)((8 * v52) | 1);
      unsigned int v59 = 0;
      LODWORD(v63) = v23;
      LODWORD(v65) = 0;
      if (v18 == 2) {
        double result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 126, &v58, 1, &v63, 1, 0);
      }
      else {
        double result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 124, &v58, 1, &v63, 1, 0);
      }
LABEL_92:
      unsigned int v23 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
      goto LABEL_93;
    }
LABEL_78:
    int v27 = 0;
    goto LABEL_79;
  }
  if (v15 == 91) {
    goto LABEL_24;
  }
  if (v15 == 92) {
    goto LABEL_14;
  }
LABEL_8:
  if ((a6 & 1) == 0) {
    goto LABEL_85;
  }
  if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a4 + 432)) {
    unint64_t v16 = *(void *)(*(void *)(a4 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
  else {
    unint64_t v16 = 0;
  }
  unint64_t v62 = v16;
  double result = (unint64_t *)sub_1CB8F1DC4(&v62);
  if (v28 == 1)
  {
    unint64_t v55 = result;
    double result = v55;
  }
  if (a3 == 1 || result != (unint64_t *)64) {
    goto LABEL_85;
  }
  double result = (unint64_t *)sub_1CC73C210(v11, a4, (uint64_t)&v63);
  if ((_BYTE)v65)
  {
    if (v64 >= 0x41)
    {
      if (v63) {
        MEMORY[0x1D25D9CB0](v63, 0x1000C8000313F17);
      }
      goto LABEL_40;
    }
LABEL_85:
    *(unsigned char *)uint64_t v10 = 0;
    *((unsigned char *)v10 + 8) = 0;
    return result;
  }
LABEL_40:
  if ((a2 & 0x80000000) != 0) {
    uint64_t v29 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v29 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v11);
  }
  uint64_t v30 = *v29;
  if ((*(unsigned char *)(v30 + 3) & 1) == 0) {
    uint64_t v30 = *(void *)(v30 + 24);
  }
  uint64_t v31 = *(void *)(*(void *)(*(void *)(v30 + 8) + 24) + 32);
  uint64_t v64 = v68;
  unsigned int v65 = v68;
  uint64_t v66 = 4;
  int v67 = 0;
  uint64_t v63 = &unk_1F261BC50;
  v68[4] = v31;
  v68[5] = *(void *)(v31 + 40);
  v68[6] = (*(uint64_t (**)(void))(**(void **)(v31 + 16) + 120))(*(void *)(v31 + 16));
  v68[7] = *(void *)(*(void *)v31 + 40) + 272;
  int v69 = 6;
  uint64_t v70 = 1;
  for (uint64_t i = 120; i != 760; i += 40)
    *(_DWORD *)((char *)&v63 + i) = -1;
  if ((a2 & 0x80000000) != 0) {
    uint64_t v33 = (uint64_t *)(*(void *)(a4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v33 = (uint64_t *)(*(void *)(a4 + 272) + 8 * v11);
  }
  uint64_t v34 = *v33;
  if ((*(unsigned char *)(v34 + 3) & 1) == 0) {
    uint64_t v34 = *(void *)(v34 + 24);
  }
  sub_1CC6DEE8C((uint64_t)&v63, (const char *)*(unsigned int *)(*(void *)(*(void *)(v34 + 8) + 32) + 4), (uint64_t)&v58);
  BOOL v35 = v58;
  unsigned int v36 = v59;
  unint64_t v37 = (unint64_t)v58;
  if (v59 >= 0x41) {
    unint64_t v37 = *v58;
  }
  uint64_t v38 = v60;
  unsigned int v39 = v61;
  if (v37 < 0xFFFFFFFF00000000)
  {
    char v40 = 0;
    *(unsigned char *)uint64_t v10 = 0;
  }
  else
  {
    unint64_t v56 = 257;
    int v57 = 0;
    LODWORD(v58) = a2;
    LODWORD(v60) = 0;
    char v40 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t **, uint64_t, void))(*(void *)a5 + 32))(a5, 119, &v56, 1, &v58, 1, 0);
    unint64_t *v10 = *(unsigned int *)(*(void *)(v41 + 32) + 4) | 0x200000000;
  }
  *((unsigned char *)v10 + 8) = v40;
  if (v39 >= 0x41 && v38) {
    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  if (v36 >= 0x41)
  {
    if (v35) {
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
    }
  }
  return (unint64_t *)sub_1CB9FB5B0((uint64_t)&v63);
}

uint64_t sub_1CBB908BC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a3);
  }
  uint64_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if ((*(unsigned char *)(v6 + 3) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(v6 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 45 || *(_DWORD *)(v7 + 40) != 3) {
    return 0;
  }
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v10 = *(unsigned int *)(v9 + 36);
  if ((v10 & 0x80000000) != 0) {
    uint64_t v11 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v11 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
  }
  uint64_t v12 = *v11;
  if (v12)
  {
    if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3))
    {
      uint64_t v13 = *(void *)(v12 + 8);
      if (v13)
      {
        if (**(_WORD **)(v13 + 16) == 127 && *(_DWORD *)(v13 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(v9 + 68), a2, (uint64_t)&v14);
          if (v16)
          {
            if (v15 < 0x41)
            {
              **(void **)(a1 + 8) = v14 << -(char)v15 >> -(char)v15;
              return 1;
            }
            if (v14) {
              MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(v7 + 32) + 36), a2, (uint64_t)&v14);
  if (!v16) {
    return 0;
  }
  if (v15 >= 0x41)
  {
    if (v14) {
      MEMORY[0x1D25D9CB0](v14, 0x1000C8000313F17);
    }
    return 0;
  }
  **(void **)(a1 + 8) = v14 << -(char)v15 >> -(char)v15;
  uint64_t result = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(*(void *)(v7 + 32) + 68));
  if (result)
  {
    if (**(_WORD **)(result + 16) == 127) {
      return *(_DWORD *)(result + 40) == 3;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CBB90AC8(uint64_t **a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a3);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    if (*(unsigned char *)(v6 + 3) & 1) != 0 || (uint64_t v6 = *(void *)(v6 + 24)) != 0 && (*(unsigned char *)(v6 + 3))
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7)
      {
        if (**(_WORD **)(v7 + 16) == 45 && *(_DWORD *)(v7 + 40) == 3)
        {
          sub_1CC73C210(*(_DWORD *)(*(void *)(v7 + 32) + 36), a2, (uint64_t)&v15);
          if (v17)
          {
            if (v16 >= 0x41)
            {
              if (v15) {
                MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
              }
            }
            else
            {
              **a1 = v15 << -(char)v16 >> -(char)v16;
              uint64_t VRegDef = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(*(void *)(v7 + 32) + 68));
              if (VRegDef && **(_WORD **)(VRegDef + 16) == 127 && *(_DWORD *)(VRegDef + 40) == 3) {
                return 1;
              }
            }
          }
          uint64_t v9 = *(void *)(v7 + 32);
          uint64_t v10 = *(unsigned int *)(v9 + 36);
          if ((v10 & 0x80000000) != 0) {
            uint64_t v11 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v11 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v10);
          }
          uint64_t v12 = *v11;
          if (v12)
          {
            if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v12 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v12 + 3))
            {
              uint64_t v13 = *(void *)(v12 + 8);
              if (v13)
              {
                if (**(_WORD **)(v13 + 16) == 127 && *(_DWORD *)(v13 + 40) == 3)
                {
                  sub_1CC73C210(*(_DWORD *)(v9 + 68), a2, (uint64_t)&v15);
                  if (v17)
                  {
                    if (v16 < 0x41)
                    {
                      **a1 = v15 << -(char)v16 >> -(char)v16;
                      return 1;
                    }
                    if (v15) {
                      MEMORY[0x1D25D9CB0](v15, 0x1000C8000313F17);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1CBB90CD4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if ((result & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (result & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a2 + 272) + 8 * result);
  }
  uint64_t v4 = *v3;
  if (*(unsigned char *)(v4 + 3))
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  if ((result & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
  {
    unint64_t v5 = *(void *)(*(void *)(a2 + 424) + 8 * (result & 0x7FFFFFFF));
    if ((v5 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(void *)(*(void *)(a2 + 424) + 8 * (result & 0x7FFFFFFF)) & 6) == 2)
    {
      uint64_t v7 = *(void *)(**(void **)(*(void *)(*(void *)(v4 + 8) + 24) + 32) + 40);
      char v8 = 35;
      if ((v5 & 4) == 0) {
        char v8 = 19;
      }
      unint64_t v9 = v5 >> v8;
      uint64_t v10 = *(void *)(v7 + 504);
      unsigned int v11 = v9 & 0xFFFFFF;
      if (!v11) {
        goto LABEL_22;
      }
      unint64_t v12 = *(unsigned int *)(v7 + 512);
      uint64_t v13 = *(void *)(v7 + 504);
      if (v12)
      {
        uint64_t v13 = v10;
        unint64_t v14 = v12;
        do
        {
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = v13 + 16 * (v14 >> 1);
          unsigned int v17 = *(_DWORD *)(v16 + 8);
          uint64_t v18 = v16 + 16;
          v14 += ~(v14 >> 1);
          if (v17 < v11) {
            uint64_t v13 = v18;
          }
          else {
            unint64_t v14 = v15;
          }
        }
        while (v14);
      }
      if (v13 == v10 + 16 * v12 || *(_DWORD *)(v13 + 8) != v11) {
LABEL_22:
      }
        uint64_t v13 = v10;
      unint64_t v21 = ((((unint64_t)((*(_DWORD *)(v13 + 4) + 7) & 0xFFFFFFF8) >> 3) & 0x1FFFFFFF) << 6) | 1;
      int v22 = 0;
      v20[0] = result;
      v20[4] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 80, &v21, 1, v20, 1, 0);
      return *(unsigned int *)(*(void *)(v19 + 32) + 4);
    }
  }
  return result;
}

uint64_t sub_1CBB90E88(void ****a1, int a2, unint64_t a3, unsigned int a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v18 = a3;
  int v19 = 0;
  uint64_t v7 = (llvm::IntegerType *)***a1[1];
  char v8 = (llvm::LLVMContext *)(unsigned __int16)(a3 >> 3);
  unint64_t v9 = (llvm::LLVMContext *)(unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0) {
    unint64_t v9 = (llvm::LLVMContext *)(a3 >> 19);
  }
  if ((a3 & 4) != 0) {
    char v8 = v9;
  }
  if (a3) {
    uint64_t v10 = (llvm::LLVMContext *)(a3 >> 3);
  }
  else {
    uint64_t v10 = v8;
  }
  unint64_t v11 = (int)(31 - __clz(a4));
  unint64_t v12 = (llvm::ConstantInt *)llvm::IntegerType::get(v7, v10);
  uint64_t v13 = llvm::ConstantInt::get(v12, v11, (const llvm::APInt *)1);
  ((void (*)(void ****, unint64_t *, void *))(*a1)[2])(a1, &v18, v13);
  int v15 = *(_DWORD *)(*(void *)(v14 + 32) + 4);
  unint64_t v23 = a3;
  int v24 = 0;
  LODWORD(v18) = a2;
  int v20 = 0;
  int v21 = v15;
  int v22 = 0;
  ((void (*)(void ****, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*a1)[4])(a1, 127, &v23, 1, &v18, 2, 0);
  return *(unsigned int *)(*(void *)(v16 + 32) + 4);
}

uint64_t sub_1CBB90FE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9468;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBB9100C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void sub_1CBB9101C()
{
}

void *sub_1CBB91030()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25F94B0;
  return result;
}

void sub_1CBB91068(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F94B0;
}

uint64_t sub_1CBB91090(uint64_t a1, void *a2)
{
  return (*a2 < 9uLL) & (0x116u >> *a2);
}

uint64_t sub_1CBB910AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v6 = (unsigned int *)(a1 + 12);
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  if ((v7 & 7) != 0)
  {
    unint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v7 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v9 = (_DWORD *)(a1 + 20);
  *(void *)(a1 + 48) = v8;
  int v10 = **(unsigned __int16 **)(a2 + 16);
  if (v10 == 90)
  {
    *(_DWORD *)(a1 + 8) = 1;
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_20;
    }
    unint64_t v11 = *(_DWORD **)(a2 + 32);
LABEL_25:
    unsigned int v17 = v11[1];
    *uint64_t v6 = v17;
    int v23 = v11[17];
LABEL_54:
    *unint64_t v9 = v23;
    goto LABEL_55;
  }
  if (v10 == 96)
  {
    *(_DWORD *)(a1 + 8) = 4;
    if (*(unsigned char *)(a1 + 88))
    {
      unint64_t v11 = *(_DWORD **)(a2 + 32);
LABEL_52:
      unsigned int v17 = v11[17];
      goto LABEL_53;
    }
LABEL_20:
    unint64_t v11 = *(_DWORD **)(a2 + 32);
    unsigned int v17 = v11[1];
LABEL_53:
    *uint64_t v6 = v17;
    int v23 = v11[9];
    goto LABEL_54;
  }
  uint64_t v12 = *(unsigned int *)(a2 + 40);
  unint64_t v11 = *(_DWORD **)(a2 + 32);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      int v15 = *v14;
      v14 += 32;
      if (v15 == 17) {
        break;
      }
      if (v12 == ++v13) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    LODWORD(v13) = -1;
  }
  int v16 = v11[8 * v13 + 4];
  if (v16 <= 2784)
  {
    switch(v16)
    {
      case 2142:
        *(_DWORD *)(a1 + 8) = 1;
        *(_WORD *)(a1 + 88) = 257;
        goto LABEL_25;
      case 2144:
        *(_DWORD *)(a1 + 8) = 4;
        *(_WORD *)(a1 + 88) = 257;
        goto LABEL_52;
      case 2784:
        *(_DWORD *)(a1 + 8) = 1;
        *(unsigned char *)(a1 + 88) = 1;
        goto LABEL_25;
    }
LABEL_141:
    __int16 v69 = *(_WORD *)(v8 + 32);
    if (v69) {
      int v70 = 2;
    }
    else {
      int v70 = 6;
    }
    *(_DWORD *)(a1 + 8) = v70;
    if (v69) {
      unsigned int v17 = v11[1];
    }
    else {
      unsigned int v17 = v11[25];
    }
    *uint64_t v6 = v17;
    int v23 = v11[33];
    goto LABEL_54;
  }
  if ((v16 - 2785) < 2)
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    int v18 = 3;
    int v21 = (_DWORD *)(a1 + 12);
    int v22 = (_DWORD *)(a1 + 20);
  }
  else
  {
    if ((v16 - 2839) >= 2)
    {
      if (v16 == 2838)
      {
        *(_DWORD *)(a1 + 8) = 4;
        *(unsigned char *)(a1 + 88) = 1;
        goto LABEL_52;
      }
      goto LABEL_141;
    }
    int v18 = 7;
    uint64_t v19 = 2;
    uint64_t v20 = 1;
    int v21 = (_DWORD *)(a1 + 20);
    int v22 = (_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 8) = v18;
  *int v21 = v11[8 * v20 + 1];
  *int v22 = v11[17];
  *(_DWORD *)(a1 + 60) = v11[25];
  sub_1CC73C210(v11[33], a3, (uint64_t)&v93);
  if (v95)
  {
    if (v94 > 0x40)
    {
      if (v93) {
        MEMORY[0x1D25D9CB0](*(void *)&v93, 0x1000C8000313F17);
      }
      unint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v25 = ((uint64_t)(*(void *)&v93 << -(char)v94) >> -(char)v94) & 0xFFFFFFFFFFFFFF00;
      uint64_t v26 = ((uint64_t)(*(void *)&v93 << -(char)v94) >> -(char)v94);
    }
    unint64_t v24 = v26 | v25;
  }
  else
  {
    unint64_t v24 = 0;
  }
  *(void *)(a1 + 72) = v24;
  uint64_t v27 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v27 + 164);
  *(unsigned char *)(a1 + 80) = 1;
  sub_1CC73C44C(*(_DWORD *)(v27 + 164), a3, 1, (uint64_t)&v93);
  if (v94 > 0x40)
  {
    uint64_t v28 = **(void **)&v93;
    if (v96) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  else
  {
    uint64_t v28 = (uint64_t)(*(void *)&v93 << -(uint64_t)v94) >> -(uint64_t)v94;
  }
  *(_DWORD *)(a1 + 84) = v28;
  uint64_t v29 = *(void *)(a2 + 32);
  int v30 = *(_DWORD *)(v29 + 32 * v19 + 4);
  sub_1CC73C210(*(_DWORD *)(v29 + 132), a3, (uint64_t)&v93);
  if ((v30 & 0x80000000) == 0
    || (v30 & 0x7FFFFFFFu) >= *(_DWORD *)(a3 + 432)
    || ((uint64_t v31 = *(void *)(*(void *)(a3 + 424) + 8 * (v30 & 0x7FFFFFFF)), (v31 & 0xFFFFFFFFFFFFFFF9) != 0)
      ? (BOOL v32 = (v31 & 4) == 0)
      : (BOOL v32 = 1),
        v32))
  {
    int v33 = 1;
  }
  else
  {
    uint64_t v91 = 0x800000000000000;
    if ((v31 & 2) == 0) {
      uint64_t v91 = 0x8000000000000;
    }
    if ((v91 & v31) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    }
    int v33 = (unsigned __int16)(v31 >> 3);
  }
  uint64_t v34 = (int8x8_t *)(*(void *)&v93 + 8 * ((v94 - 1) >> 6));
  if (v94 < 0x41) {
    uint64_t v34 = &v93;
  }
  if (((*(unint64_t *)v34 >> (v94 - 1)) & 1) == 0)
  {
    if (v94 > 0x40)
    {
      __int32 v36 = 0;
      unint64_t v85 = ((unint64_t)v94 + 63) >> 6;
      uint64_t v86 = (int8x8_t *)v93;
      do
      {
        int8x8_t v87 = *v86++;
        uint8x8_t v88 = (uint8x8_t)vcnt_s8(v87);
        v88.i16[0] = vaddlv_u8(v88);
        v36 += v88.i32[0];
        --v85;
      }
      while (v85);
    }
    else
    {
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v93);
      v35.i16[0] = vaddlv_u8(v35);
      __int32 v36 = v35.i32[0];
    }
    if (v36 != v33) {
      llvm::report_fatal_error((llvm *)"Channel mask must have same number of elements as the intrinsic handles.", (const llvm::Twine *)1);
    }
  }
  if (v94 >= 0x41 && v95 && *(void *)&v93) {
    MEMORY[0x1D25D9CB0]();
  }
  unsigned int v17 = *v6;
LABEL_55:
  unint64_t v37 = (unint64_t *)(a1 + 24);
  if ((v17 & 0x80000000) != 0 && (v17 & 0x7FFFFFFF) < *(_DWORD *)(a3 + 432)) {
    unint64_t v38 = *(void *)(*(void *)(a3 + 424) + 8 * (v17 & 0x7FFFFFFF));
  }
  else {
    unint64_t v38 = 0;
  }
  *unint64_t v37 = v38;
  if ((*v9 & 0x80000000) != 0 && (uint64_t v39 = *v9 & 0x7FFFFFFF, v39 < *(_DWORD *)(a3 + 432))) {
    uint64_t v40 = *(void *)(*(void *)(a3 + 424) + 8 * v39);
  }
  else {
    uint64_t v40 = 0;
  }
  *(void *)(a1 + 32) = v38;
  *(void *)(a1 + 40) = v40;
  unsigned int v41 = *(_DWORD *)(a1 + 8);
  if (v41 <= 7)
  {
    if (((1 << v41) & 0x12) == 0)
    {
      if (((1 << v41) & 0x44) == 0)
      {
        if (((1 << v41) & 0x88) == 0) {
          goto LABEL_155;
        }
        uint64_t v42 = *(unsigned int *)(a2 + 40);
        if (v42)
        {
          uint64_t v43 = 0;
          uint64_t v44 = *(unsigned __int8 **)(a2 + 32);
          while (1)
          {
            int v45 = *v44;
            v44 += 32;
            if (v45 == 17) {
              break;
            }
            if (v42 == ++v43) {
              goto LABEL_71;
            }
          }
        }
        else
        {
LABEL_71:
          LODWORD(v43) = -1;
        }
        int v46 = *(_DWORD *)(*(void *)(a2 + 32)
                        + ((unint64_t)((*(_DWORD *)(*(void *)(a2 + 32)
                                                                       + 32 * v43
                                                                       + 16)
                                                           - 2785) > 1) << 6)
                        + 4);
        if ((v46 & 0x80000000) == 0 || (uint64_t v47 = v46 & 0x7FFFFFFF, v47 >= *(_DWORD *)(a3 + 432)))
        {
          unint64_t v48 = 0;
          unsigned int v51 = 1;
LABEL_208:
          uint64_t v52 = (unsigned __int16)(v48 >> 3);
LABEL_86:
          if (v52 == 8) {
            uint64_t v53 = (v51 + 1) >> 1;
          }
          else {
            uint64_t v53 = v51;
          }
          if (v52 == 8) {
            unint64_t v38 = 129;
          }
          else {
            unint64_t v38 = (8 * v52) | 1;
          }
          if (v53 != 1) {
            unint64_t v38 = sub_1CBA5A95C(v53, v38);
          }
          goto LABEL_154;
        }
        unint64_t v48 = *(void *)(*(void *)(a3 + 424) + 8 * v47);
        if ((v48 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(a3 + 424) + 8 * v47) & 4) == 0)
        {
          unsigned int v51 = 1;
          if ((v48 & 1) == 0) {
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v50 = 0x800000000000000;
          if ((v48 & 2) == 0) {
            uint64_t v50 = 0x8000000000000;
          }
          if ((v50 & v48) != 0) {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          }
          unsigned int v51 = (unsigned __int16)(v48 >> 3);
          if ((v48 & 1) == 0)
          {
LABEL_83:
            if ((v48 & 4) != 0)
            {
              if ((v48 & 2) != 0) {
                uint64_t v52 = (unsigned __int16)(v48 >> 19);
              }
              else {
                uint64_t v52 = (v48 >> 19);
              }
              goto LABEL_86;
            }
            goto LABEL_208;
          }
        }
        uint64_t v52 = (v48 >> 3);
        goto LABEL_86;
      }
      uint64_t v54 = *(unsigned int *)(a2 + 40);
      if (v54)
      {
        uint64_t v55 = 0;
        unint64_t v56 = *(unsigned __int8 **)(a2 + 32);
        while (1)
        {
          int v57 = *v56;
          v56 += 32;
          if (v57 == 17) {
            break;
          }
          if (v54 == ++v55) {
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_98:
        LODWORD(v55) = -1;
      }
      int v58 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v55 + 16);
      if (v58 > 2645)
      {
        if ((v58 - 2646) >= 4)
        {
          if ((v58 - 2650) > 3) {
            goto LABEL_155;
          }
LABEL_119:
          unint64_t v38 = 16777244;
LABEL_154:
          *(void *)(a1 + 32) = v38;
          goto LABEL_155;
        }
      }
      else if ((v58 - 2392) >= 4)
      {
        if ((v58 - 2396) >= 4) {
          goto LABEL_155;
        }
        goto LABEL_119;
      }
      unint64_t v38 = 8388636;
      goto LABEL_154;
    }
    if ((v38 & 0xFFFFFFFFFFFFFFF9) != 0 && (v38 & 6) == 4)
    {
      char v59 = 3;
      if ((v38 & 1) == 0) {
        char v59 = 19;
      }
      if ((v38 & 0x8000000000000000 | (8 * (v38 >> v59))) == 0x40)
      {
        if ((v38 & 0x8000000000000) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          unint64_t v38 = *v37;
        }
        if ((unsigned __int16)(v38 >> 3) <= 4u)
        {
          uint64_t v92 = (1 << *(unsigned char *)(*(void *)(a1 + 48) + 34)) | *(void *)(*(void *)(a1 + 48) + 8);
          if ((v92 & -v92) == 1) {
            goto LABEL_109;
          }
        }
      }
    }
    uint64_t v60 = v38;
    unint64_t v38 = 4194332;
    if (v60 == 4194332)
    {
LABEL_109:
      unint64_t v61 = *(void *)(a1 + 40);
      char v62 = 35;
      if ((v61 & 4) == 0) {
        char v62 = 19;
      }
      if (((v61 >> v62) & 0xFFFFFF) != 0x40)
      {
        uint64_t v66 = 0x800000000000000;
        if ((v38 & 2) == 0) {
          uint64_t v66 = 0x8000000000000;
        }
        if ((v66 & v38) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
          unint64_t v38 = *v37;
        }
        if ((v38 & 0x7FFF8) != 0x10)
        {
          uint64_t v71 = 0x800000000000000;
          if ((v38 & 2) == 0) {
            uint64_t v71 = 0x8000000000000;
          }
          if ((v71 & v38) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
            unint64_t v38 = *v37;
          }
          uint64_t v68 = ((v38 >> 1) & 0x3FFFC) + 4;
          goto LABEL_153;
        }
        goto LABEL_132;
      }
      uint64_t v60 = v38;
    }
    if (v60 <= 4194323)
    {
      if (v60 != 9 && v60 != 65)
      {
        if (v60 == 513) {
          goto LABEL_124;
        }
        goto LABEL_168;
      }
    }
    else
    {
      if (v60 > 4194355)
      {
        if (v60 == 4194356)
        {
LABEL_136:
          uint64_t v67 = 0x800000000000000;
          if ((v60 & 2) == 0) {
            uint64_t v67 = 0x8000000000000;
          }
          if ((v67 & v60) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
            uint64_t v60 = *v37;
          }
          uint64_t v68 = ((unint64_t)v60 >> 1) & 0x3FFF8;
LABEL_153:
          unint64_t v38 = v68 | 0x800004;
          goto LABEL_154;
        }
        unsigned __int16 v63 = 68;
        goto LABEL_135;
      }
      if (v60 != 4194324)
      {
        unsigned __int16 v63 = 36;
LABEL_135:
        if (v60 == (v63 | 0x400000)) {
          goto LABEL_136;
        }
LABEL_168:
        uint64_t v83 = v60 & 6;
        if ((v60 & 0xFFFFFFFFFFFFFFF9) == 0 || v83 != 4)
        {
          if ((v60 & 0xFFFFFFFFFFFFFFF9) != 0 && v83 == 2)
          {
            uint64_t v90 = sub_1CB8F1DC4((unint64_t *)(a1 + 24));
            if (v89 == 1) {
            if (v90 == 32)
            }
              unint64_t v38 = 257;
            else {
              unint64_t v38 = 16777236;
            }
            goto LABEL_154;
          }
          goto LABEL_191;
        }
        char v84 = 3;
        if ((v60 & 1) == 0) {
          char v84 = 19;
        }
        if ((v60 & 0x8000000000000000 | (8 * ((unint64_t)v60 >> v84))) != 0x200)
        {
LABEL_191:
          unint64_t v38 = *(void *)(a1 + 32);
          goto LABEL_155;
        }
LABEL_124:
        unint64_t v65 = sub_1CB8F1DC4((unint64_t *)(a1 + 24));
        if (v64 == 1) {
        unint64_t v38 = ((v65 >> 2) & 0x7FFF8 | 0x800004) + 0x800000;
        }
        goto LABEL_154;
      }
    }
LABEL_132:
    unint64_t v38 = 129;
    goto LABEL_154;
  }
LABEL_155:
  if (*v37 == v38)
  {
    unsigned int IncompleteVirtualRegister = *v6;
  }
  else
  {
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
    unint64_t v73 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(a3 + 24) + 16 * v73) = 4;
    unint64_t v74 = *(unsigned int *)(a3 + 432);
    if (v73 >= v74)
    {
      uint64_t v75 = *(void *)(a3 + 440);
      uint64_t v76 = v73 + 1 - v74;
      if (v73 >= *(unsigned int *)(a3 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v77 = *(_DWORD *)(a3 + 432);
      if (v76)
      {
        int v78 = (void *)(*(void *)(a3 + 424) + 8 * *(unsigned int *)(a3 + 432));
        uint64_t v79 = ~v73 + v74;
        do
          *v78++ = v75;
        while (!__CFADD__(v79++, 1));
        int v77 = *(_DWORD *)(a3 + 432);
      }
      *(_DWORD *)(a3 + 432) = v77 + v76;
    }
    *(void *)(*(void *)(a3 + 424) + 8 * v73) = v38;
    uint64_t v81 = *(void *)(a3 + 8);
    if (v81) {
      (*(void (**)(uint64_t, void))(*(void *)v81 + 24))(v81, IncompleteVirtualRegister);
    }
  }
  *(_DWORD *)(a1 + 16) = IncompleteVirtualRegister;
  return a1;
}

uint64_t sub_1CBB91B20(_DWORD *a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 24);
  unint64_t v3 = *(void *)(*(void *)a1 + 32);
  unint64_t v146 = v3;
  unint64_t v5 = *(void *)(v2 + 40);
  char v6 = 35;
  if ((v5 & 4) == 0) {
    char v6 = 19;
  }
  uint64_t v7 = (v5 >> v6) & 0xFFFFFF;
  a1[14] = v7;
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v8 + 24);
  unint64_t v9 = (unint64_t *)(v8 + 24);
  if ((v10 & 0xFFFFFFFFFFFFFFF9) == 0) {
    goto LABEL_8;
  }
  uint64_t v12 = sub_1CB8F1DC4(v9) + 7;
  if (v11 == 1) {
  if ((v12 & 0xFFFFFFFFFFFFFFF8) == 8)
  }
  {
    BOOL v13 = 1;
  }
  else
  {
LABEL_8:
    BOOL v14 = (v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (v4 & 4) == 0;
    if (v14)
    {
      BOOL v13 = 0;
    }
    else
    {
      char v15 = 3;
      if ((v4 & 1) == 0) {
        char v15 = 19;
      }
      unint64_t v16 = v4 >> v15;
      if ((v4 & 2) != 0) {
        unint64_t v17 = (v4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v16) | 2;
      }
      else {
        unint64_t v17 = v4 & 0x8000000000000000 | (8 * v16) | 1;
      }
      BOOL v13 = v17 == 65;
    }
  }
  int v18 = *(uint64_t **)(*(void *)(**(void **)a1 + 24) + 32);
  uint64_t v19 = *v18;
  int v21 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18[1] + 16))(v18[1], *v18);
  *((void *)a1 + 2) = v21;
  uint64_t v23 = *(void *)a1;
  int v24 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v24 & 0xFFFFFFFB) != 2)
  {
    if (*(unsigned char *)(v23 + 80))
    {
      a1[7] = v24 != 3;
      uint64_t v28 = *((void *)a1 + 1);
      uint64_t v29 = *(unsigned int *)(*(void *)(*(void *)v23 + 32) + 132);
      if ((v29 & 0x80000000) != 0) {
        int v30 = (uint64_t *)(*(void *)(v28 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
      }
      else {
        int v30 = (uint64_t *)(*(void *)(v28 + 272) + 8 * v29);
      }
      uint64_t v31 = *v30;
      if ((*(unsigned char *)(v31 + 3) & 1) == 0) {
        uint64_t v31 = *(void *)(v31 + 24);
      }
      uint64_t v32 = *(void *)(*(void *)(*(void *)(v31 + 8) + 32) + 48);
      int v33 = (void *)(v32 + 24);
      if (*(_DWORD *)(v32 + 32) >= 0x41u) {
        int v33 = (void *)*v33;
      }
      int v34 = *(_DWORD *)v33 & 0xF;
      v22.i32[0] = v34;
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v22);
      v35.i16[0] = vaddlv_u8(v35);
      LOWORD(v33) = v35.i16[0];
      if (v13)
      {
        uint64_t v36 = 0;
        LOWORD(v37) = 1;
      }
      else
      {
        if (v3)
        {
          unsigned int v76 = v3 >> 3;
        }
        else if ((v3 & 4) != 0)
        {
          if ((v3 & 2) != 0) {
            unsigned int v76 = (unsigned __int16)(v3 >> 19);
          }
          else {
            unsigned int v76 = v3 >> 19;
          }
        }
        else
        {
          unsigned int v76 = (unsigned __int16)(v3 >> 3);
        }
        LODWORD(v37) = v76 >> 3;
        if (v37 == 1)
        {
          uint64_t v36 = 0;
        }
        else if (v37 == 2)
        {
          uint64_t v36 = 1;
        }
        else
        {
          uint64_t v36 = 2;
        }
      }
      uint64_t v77 = v36 | (16 * v34) | qword_1CDC6D2D8[v35.i32[0] - 1];
LABEL_138:
      *((void *)a1 + 4) = v77;
      goto LABEL_139;
    }
    uint64_t v71 = *(void *)(v23 + 48);
    char v72 = *(unsigned char *)(v71 + 34);
    uint64_t v73 = *(void *)(v71 + 8);
    a1[7] = v24 != 1;
    if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (v4 & 4) != 0)
    {
      uint64_t v74 = 0x800000000000000;
      if ((v4 & 2) == 0) {
        uint64_t v74 = 0x8000000000000;
      }
      if ((v74 & v4) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
        if ((v4 & 0x7FFF8) == 0x18 && v13)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
LABEL_104:
          int v33 = (void *)(v4 >> 3);
          goto LABEL_105;
        }
      }
      else if ((v4 & 0x7FFF8) == 0x18 && v13)
      {
        goto LABEL_104;
      }
    }
    else if (v13)
    {
      LOWORD(v33) = 1;
LABEL_105:
      LODWORD(v33) = (unsigned __int16)v33;
      LODWORD(v37) = 1;
      goto LABEL_119;
    }
    char v79 = 63 - __clz(((1 << v72) | v73) & -((1 << v72) | v73));
    LOWORD(v33) = 1;
    if ((v3 & 0xFFFFFFFFFFFFFFF9) != 0 && (v3 & 4) != 0)
    {
      uint64_t v80 = 0x800000000000000;
      if ((v3 & 2) == 0) {
        uint64_t v80 = 0x8000000000000;
      }
      if ((v80 & v3) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
      }
      int v33 = (void *)(v3 >> 3);
    }
    unint64_t v81 = 1 << v79;
    LODWORD(v33) = (unsigned __int16)v33;
    if (v3)
    {
      unsigned int v82 = v3 >> 3;
    }
    else if ((v3 & 4) != 0)
    {
      if ((v3 & 2) != 0) {
        unsigned int v82 = (unsigned __int16)(v3 >> 19);
      }
      else {
        unsigned int v82 = v3 >> 19;
      }
    }
    else
    {
      unsigned int v82 = (unsigned __int16)(v3 >> 3);
    }
    LODWORD(v37) = v82 >> 3;
    if (v81 < v37)
    {
      unsigned int v83 = v37 * (unsigned __int16)v33;
      uint64_t v37 = 1 << v79;
      LODWORD(v33) = v83 / v81;
    }
LABEL_119:
    if (a1[14]) {
      goto LABEL_120;
    }
    if (v37 == 4 && v33 == 1)
    {
      LODWORD(v33) = 2;
    }
    else
    {
      if (v37 != 8 || v33 != 1)
      {
LABEL_120:
        int v84 = ~(-1 << (char)v33);
        BOOL v85 = v37 == 1;
        if (v37 != 2)
        {
          uint64_t v86 = 2;
LABEL_130:
          if (v85) {
            uint64_t v87 = 0;
          }
          else {
            uint64_t v87 = v86;
          }
          uint64_t v88 = 1024;
          if (v33 == 2) {
            uint64_t v88 = 512;
          }
          if (v33 == 1) {
            uint64_t v88 = 0;
          }
          uint64_t v77 = v87 | v88 | (16 * (v84 & 0xFu));
          goto LABEL_138;
        }
LABEL_129:
        LOWORD(v37) = 2;
        uint64_t v86 = 1;
        goto LABEL_130;
      }
      LODWORD(v33) = 4;
    }
    BOOL v85 = 0;
    int v84 = ~(-1 << (char)v33);
    goto LABEL_129;
  }
  a1[7] = v24 != 2;
  if ((v3 & 0xFFFFFFFFFFFFFFF9) != 0) {
    int v25 = (v3 >> 2) & 1;
  }
  else {
    int v25 = 0;
  }
  if (v25 == 1)
  {
    uint64_t v26 = 0x800000000000000;
    if ((v3 & 2) == 0) {
      uint64_t v26 = 0x8000000000000;
    }
    if ((v26 & v3) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
    }
    uint64_t v27 = qword_1CDC6D2D8[(uint64_t)((v3 << 45) - 0x1000000000000) >> 48];
  }
  else
  {
    uint64_t v27 = 0;
  }
  *((void *)a1 + 4) = v27;
  uint64_t v38 = *((void *)a1 + 1);
  int v39 = *(_DWORD *)(*(void *)a1 + 8);
  uint64_t v40 = 96;
  if (v39 != 2) {
    uint64_t v40 = 64;
  }
  uint64_t v41 = *(void *)(**(void **)a1 + 32);
  uint64_t v42 = *(unsigned int *)(v41 + v40 + 4);
  if ((v42 & 0x80000000) != 0) {
    uint64_t v43 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v43 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v42);
  }
  uint64_t v44 = *v43;
  if ((*(unsigned char *)(v44 + 3) & 1) == 0) {
    uint64_t v44 = *(void *)(v44 + 24);
  }
  uint64_t v45 = *(void *)(*(void *)(*(void *)(v44 + 8) + 32) + 48);
  int v46 = (void *)(v45 + 24);
  if (*(_DWORD *)(v45 + 32) >= 0x41u) {
    int v46 = (void *)*v46;
  }
  BOOL v14 = v39 == 2;
  uint64_t v47 = 32;
  if (v14) {
    uint64_t v47 = 64;
  }
  uint64_t v48 = *(unsigned int *)(v41 + v47 + 4);
  if ((v48 & 0x80000000) != 0) {
    uint64_t v49 = (uint64_t *)(*(void *)(v38 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v49 = (uint64_t *)(*(void *)(v38 + 272) + 8 * v48);
  }
  uint64_t v50 = *v49;
  if ((*(unsigned char *)(v50 + 3) & 1) == 0) {
    uint64_t v50 = *(void *)(v50 + 24);
  }
  uint64_t v51 = *(void *)(*(void *)(*(void *)(v50 + 8) + 32) + 48);
  uint64_t v52 = (void *)(v51 + 24);
  if (*(_DWORD *)(v51 + 32) >= 0x41u) {
    uint64_t v52 = (void *)*v52;
  }
  int v53 = *(_DWORD *)v46;
  uint64_t v54 = (void *)*v52;
  if (v25)
  {
    char v55 = 3;
    if ((v3 & 1) == 0) {
      char v55 = 19;
    }
    unint64_t v56 = v3 >> v55;
    if ((v3 & 2) != 0) {
      unint64_t v57 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v56) | 2;
    }
    else {
      unint64_t v57 = v3 & 0x8000000000000000 | (8 * v56) | 1;
    }
    int v147 = (uint64_t *)v57;
    int v58 = (unint64_t *)&v147;
  }
  else
  {
    int v58 = &v146;
  }
  uint64_t v59 = v54 & 0xF;
  unsigned int v60 = sub_1CB8F1DC4(v58);
  if (v61 == 1)
  {
    unsigned int v144 = v60;
    unsigned int v60 = v144;
  }
  if (v59 == 2 && *((_WORD *)a1 + 12) == 2) {
    llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const llvm::Twine *)1);
  }
  v62.i32[0] = v53 & 0xF;
  v62.i16[0] = vaddlv_u8((uint8x8_t)vcnt_s8(v62));
  uint64_t v63 = **(void **)a1;
  if (*(_DWORD *)(v63 + 40) == 6)
  {
    uint64_t v64 = *((void *)a1 + 1);
    uint64_t v65 = *(unsigned int *)(*(void *)(v63 + 32) + 164);
    if ((v65 & 0x80000000) != 0) {
      uint64_t v66 = (uint64_t *)(*(void *)(v64 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v66 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v65);
    }
    uint64_t v67 = *v66;
    if ((*(unsigned char *)(v67 + 3) & 1) == 0) {
      uint64_t v67 = *(void *)(v67 + 24);
    }
    uint64_t v68 = *(void *)(*(void *)(*(void *)(v67 + 8) + 32) + 48);
    __int16 v69 = (void *)(v68 + 24);
    if (*(_DWORD *)(v68 + 32) >= 0x41u) {
      __int16 v69 = (void *)*v69;
    }
    int v70 = *((unsigned __int8 *)a1 + 72);
    *((void *)a1 + 8) = *v69;
    if (!v70) {
      *((unsigned char *)a1 + 72) = 1;
    }
  }
  LOWORD(v33) = v62.i16[0];
  *((void *)a1 + 4) |= ((void)v54 << 50) & 0x3FC0000000000000 | (16 * (v53 & 0xFu)) | v59;
  LODWORD(v37) = v60 >> 3;
LABEL_139:
  *((_WORD *)a1 + 13) = (_WORD)v33;
  *((_WORD *)a1 + 12) = v37;
  if ((unsigned __int16)v37 == 1)
  {
    *((_WORD *)a1 + 12) = 2;
    *((_WORD *)a1 + 13) = ((unsigned __int16)v33 + 1) >> 1;
  }
  if (*((unsigned char *)a1 + 72))
  {
    uint64_t v89 = *((void *)a1 + 8);
LABEL_171:
    *((void *)a1 + 5) = v89;
    goto LABEL_172;
  }
  unsigned int v90 = a1[14];
  if (v90 - 10 <= 0x3D && ((1 << (v90 - 10)) & 0x30C0000000000001) != 0 || v90 < 3)
  {
    int v91 = sub_1CBB35BE4((uint64_t)v21);
    if (v21[322])
    {
      int v145 = v91;
      int v92 = (*(uint64_t (**)(uint64_t))(*(void *)v18[43] + 648))(v18[43]);
      int v91 = v145;
    }
    else
    {
      int v92 = 1;
    }
    if (v7 == 1)
    {
      if (v91 != 5) {
        int v92 = 0;
      }
      if (v21[330]) {
        unsigned int v93 = 3;
      }
      else {
        unsigned int v93 = v92;
      }
    }
    else
    {
      unsigned int v93 = 0;
    }
    if ((*(_DWORD *)(*(void *)a1 + 8) - 1) > 2)
    {
      if (v21[329])
      {
        unsigned int v93 = 0;
      }
      else
      {
        LODWORD(v147) = 0;
        if (sub_1CBC1C7DC((int)v21, v19, "MemoryWriteCacheCtl", (int *)&v147)) {
          unsigned int v93 = v147;
        }
      }
      LODWORD(v147) = 0;
      unsigned int v94 = "MemoryWriteL2Pers";
    }
    else
    {
      if (v21[329])
      {
        unsigned int v93 = 0;
      }
      else
      {
        LODWORD(v147) = 0;
        if (sub_1CBC1C7DC((int)v21, v19, "MemoryReadCacheCtl", (int *)&v147)) {
          unsigned int v93 = v147;
        }
      }
      LODWORD(v147) = 0;
      unsigned int v94 = "MemoryReadL2Pers";
    }
    int v95 = sub_1CBC1C7DC((int)v21, v19, v94, (int *)&v147);
    unsigned int v96 = v147;
    if (!v95) {
      unsigned int v96 = 1;
    }
    uint64_t v97 = 4 * v96;
    if (v93 == 3) {
      uint64_t v97 = 4;
    }
    uint64_t v89 = v97 | v93;
    goto LABEL_171;
  }
LABEL_172:
  int v98 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v98 - 1) <= 2)
  {
    char v100 = 1;
    if (!*(unsigned char *)(*(void *)a1 + 56) || a1[14] == 3)
    {
      if (v21[382] || ((unsigned int v99 = a1[14], v99 > 0xA) || ((1 << v99) & 0x446) == 0) && v99 != 71 && v99 != 65 || v98 != 3) {
        char v100 = 0;
      }
    }
    LODWORD(v147) = 0;
    uint64_t result = sub_1CBC1C7DC((int)v21, v19, "MemoryReadCacheCtl", (int *)&v147);
    if (result)
    {
      switch(v147)
      {
        case 3:
          char v100 = 4;
          break;
        case 1:
          char v100 = 1;
          break;
        case 0:
          char v100 = 0;
          break;
      }
    }
    uint64_t v117 = *(unsigned __int8 **)a1;
    if (*(unsigned char *)(*(void *)a1 + 88))
    {
      uint64_t v118 = *((void *)a1 + 1);
      uint64_t v119 = *(unsigned int *)(*(void *)(*(void *)v117 + 32) + 100);
      if ((v119 & 0x80000000) != 0) {
        uint64_t v120 = *(void *)(v118 + 24) + 16 * (v119 & 0x7FFFFFFF) + 8;
      }
      else {
        uint64_t v120 = *(void *)(v118 + 272) + 8 * v119;
      }
      int v121 = v117[89];
      uint64_t v122 = *(void *)v120;
      if ((*(unsigned char *)(*(void *)v120 + 3) & 1) == 0) {
        uint64_t v122 = *(void *)(v122 + 24);
      }
      uint64_t v123 = *(void *)(*(void *)(*(void *)(v122 + 8) + 32) + 48);
      unsigned int v124 = (void *)(v123 + 24);
      unsigned int v125 = *(_DWORD *)(v123 + 32);
      if (v121)
      {
        if (v125 >= 0x41) {
          unsigned int v124 = (void *)*v124;
        }
        unint64_t v126 = *v124 - 9;
        if (v126 < 6) {
          char v100 = v126;
        }
      }
      else
      {
        if (v125 >= 0x41) {
          unsigned int v124 = (void *)*v124;
        }
        int v127 = *(_DWORD *)v124;
        switch(v127)
        {
          case 3:
            char v100 = 4;
            break;
          case 1:
            char v100 = 1;
            break;
          case 0:
            char v100 = 0;
            break;
        }
      }
      *((void *)a1 + 4) |= 0x200000uLL;
    }
    *((void *)a1 + 5) |= (unint64_t)(v100 & 7) << 42;
    return result;
  }
  char v102 = 0;
  if (v98 == 7)
  {
    if ((unsigned int v101 = a1[14], v101 <= 0xA) && ((1 << v101) & 0x446) != 0 || v101 == 71 || v101 == 65) {
      char v102 = 1;
    }
  }
  LODWORD(v147) = 0;
  uint64_t result = sub_1CBC1C7DC((int)v21, v19, "MemoryWriteCacheCtl", (int *)&v147);
  if (result)
  {
    switch(v147)
    {
      case 3:
        char v102 = 4;
        break;
      case 1:
        char v102 = 1;
        break;
      case 0:
        char v102 = 0;
        break;
    }
  }
  uint64_t v104 = *(unsigned __int8 **)a1;
  if (*(unsigned char *)(*(void *)a1 + 88))
  {
    uint64_t v105 = *((void *)a1 + 1);
    uint64_t v106 = *(unsigned int *)(*(void *)(*(void *)v104 + 32) + 100);
    if ((v106 & 0x80000000) != 0) {
      uint64_t v107 = *(void *)(v105 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8;
    }
    else {
      uint64_t v107 = *(void *)(v105 + 272) + 8 * v106;
    }
    int v108 = v104[89];
    uint64_t v109 = *(void *)v107;
    if ((*(unsigned char *)(*(void *)v107 + 3) & 1) == 0) {
      uint64_t v109 = *(void *)(v109 + 24);
    }
    uint64_t v110 = *(void *)(*(void *)(*(void *)(v109 + 8) + 32) + 48);
    unsigned int v111 = (void *)(v110 + 24);
    unsigned int v112 = *(_DWORD *)(v110 + 32);
    if (v108)
    {
      if (v112 >= 0x41) {
        unsigned int v111 = (void *)*v111;
      }
      unint64_t v113 = *v111 - 3;
      if (v113 < 6) {
        char v102 = v113;
      }
    }
    else
    {
      if (v112 >= 0x41) {
        unsigned int v111 = (void *)*v111;
      }
      int v116 = *(_DWORD *)v111;
      switch(v116)
      {
        case 3:
          char v102 = 4;
          break;
        case 1:
          char v102 = 1;
          break;
        case 0:
          char v102 = 0;
          break;
      }
    }
    *((void *)a1 + 4) |= 0x200000uLL;
  }
  *((void *)a1 + 5) |= (unint64_t)(v102 & 7) << 42;
  if (!a1[14])
  {
    if (v21[392])
    {
      uint64_t v114 = *v18;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v18[43] + 560))(v18[43]);
      if (v114 == result)
      {
        uint64_t v115 = *(unsigned int *)(*(void *)a1 + 16);
        uint64_t result = sub_1CC73C44C(*(_DWORD *)(*(void *)a1 + 16), *((void *)a1 + 1), 1, (uint64_t)&v147);
        if (v149)
        {
          if (v148 >= 0x41)
          {
            int v128 = 0;
            int64_t v129 = ((unint64_t)v148 + 63) >> 6;
            uint64_t result = (uint64_t)v147;
            do
            {
              BOOL v130 = v129-- < 1;
              if (v130) {
                break;
              }
              unint64_t v131 = v147[v129];
              v128 += __clz(v131);
            }
            while (!v131);
            unsigned int v132 = v148 | 0xFFFFFFC0;
            if ((v148 & 0x3F) == 0) {
              unsigned int v132 = 0;
            }
            if (v148 - v128 - v132 >= 0x41)
            {
              if (v147) {
                uint64_t result = MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              }
            }
            else
            {
              uint64_t v133 = *v147;
              uint64_t result = MEMORY[0x1D25D9CB0]();
              if (!v133) {
                goto LABEL_285;
              }
            }
          }
          else if (!v147)
          {
            goto LABEL_285;
          }
        }
        uint64_t v134 = *((void *)a1 + 1);
        if ((v115 & 0x80000000) != 0) {
          unint64_t v135 = (uint64_t *)(*(void *)(v134 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v135 = (uint64_t *)(*(void *)(v134 + 272) + 8 * v115);
        }
        uint64_t v136 = *v135;
        if (!v136) {
          return result;
        }
        if ((*(unsigned char *)(v136 + 3) & 1) == 0)
        {
          uint64_t v136 = *(void *)(v136 + 24);
          if (!v136 || (*(unsigned char *)(v136 + 3) & 1) == 0) {
            return result;
          }
        }
        uint64_t v137 = *(void *)(v136 + 8);
        if (!v137 || **(unsigned __int16 **)(v137 + 16) - 77 > 1) {
          return result;
        }
        if (*(_DWORD *)(v137 + 40) < 2u)
        {
LABEL_285:
          *((void *)a1 + 6) = 0x20000;
          return result;
        }
        uint64_t v138 = 1;
        while (1)
        {
          uint64_t result = sub_1CC73C44C(*(_DWORD *)(*(void *)(v137 + 32) + 32 * v138 + 4), *((void *)a1 + 1), 1, (uint64_t)&v147);
          if (!v149) {
            break;
          }
          if (v148 >= 0x41)
          {
            int v139 = 0;
            int64_t v140 = ((unint64_t)v148 + 63) >> 6;
            uint64_t result = (uint64_t)v147;
            do
            {
              BOOL v130 = v140-- < 1;
              if (v130) {
                break;
              }
              unint64_t v141 = v147[v140];
              v139 += __clz(v141);
            }
            while (!v141);
            unsigned int v142 = v148 | 0xFFFFFFC0;
            if ((v148 & 0x3F) == 0) {
              unsigned int v142 = 0;
            }
            if (v148 - v139 - v142 >= 0x41)
            {
              if (v147) {
                return MEMORY[0x1D25D9CB0](v147, 0x1000C8000313F17);
              }
              return result;
            }
            uint64_t v143 = *v147;
            uint64_t result = MEMORY[0x1D25D9CB0]();
            if (v143) {
              return result;
            }
          }
          else if (v147)
          {
            return result;
          }
          if (++v138 >= (unint64_t)*(unsigned int *)(v137 + 40)) {
            goto LABEL_285;
          }
        }
      }
    }
  }
  return result;
}

void *sub_1CBB92944(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v503 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1F261CA88;
  uint64_t v5 = (uint64_t)(a1 + 4432);
  uint64_t v6 = 1;
  a3.n128_u64[0] = 0x200000000;
  do
  {
    uint64_t v7 = &a1[v6];
    *(_DWORD *)uint64_t v7 = 0;
    *((unsigned char *)v7 + 4) = 0;
    v7[1] = &a1[v6 + 3];
    void v7[2] = 0x200000000;
    v6 += 21;
  }
  while (v7 + 21 != (void *)v5);
  sub_1CD62A5BC(a1 + 4432, a3);
  *a1 = &unk_1F25F94F8;
  unint64_t v320 = 897;
  unsigned int v9 = sub_1CB8F1DC4(&v320);
  if (v8 == 1) {
  unint64_t v319 = 3073;
  }
  unsigned int v11 = sub_1CB8F1DC4(&v319);
  if (v10 == 1) {
  uint64_t v12 = sub_1CC72D384((uint64_t)a1, 68);
  }
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DC70;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DC80;
  long long v384 = xmmword_1CDB0DC90;
  *(void *)&long long v385 = 4194372;
  uint64_t v13 = sub_1CBA59D24(v12, 0, &v382, 7);
  unsigned int v317 = v9;
  unsigned int v318 = v11;
  unint64_t v14 = v9 | ((unint64_t)v11 << 32);
  v501[0] = &unk_1F25F9578;
  v501[1] = v14;
  unint64_t v502 = v501;
  uint64_t v15 = sub_1CBA1A5F0(v13, (uint64_t)v501);
  uint64_t v16 = sub_1CBA1ADF0(v15, 0, 0x81uLL);
  uint64_t v17 = sub_1CBA1B484(v16, 0, 0x101uLL);
  uint64_t v18 = sub_1CBA1A6C8(v17, 0, 16);
  uint64_t v19 = sub_1CD410214(v18, 0, 0x80024uLL, 524324);
  uint64_t v20 = sub_1CD410214(v19, 0, 0x400014uLL, 4194372);
  uint64_t v21 = sub_1CD410214(v20, 0, 0x800014uLL, 8388676);
  uint64_t v22 = sub_1CD410214(v21, 0, 0x8000000000800014, 0x8000000000800044);
  uint64_t v23 = sub_1CD410214(v22, 0, 0x1000014uLL, 16777252);
  *(void *)&long long v410 = 129;
  sub_1CD6172BC(0, &v410, 1, (uint64_t)v497);
  sub_1CD6175B0(0, 2, v495);
  sub_1CBA1A9A0((uint64_t)v497, (uint64_t)v495, (uint64_t)v499);
  sub_1CD617848(0, 0, v493);
  uint64_t v24 = sub_1CBA1A848(v23, (uint64_t)v499, (uint64_t)v493);
  sub_1CD4102E0(v24, 0);
  if (v494 == v493)
  {
    (*(void (**)(void *))(v493[0] + 32))(v493);
  }
  else if (v494)
  {
    (*(void (**)(void))(*v494 + 40))();
  }
  if (v500 == v499)
  {
    (*(void (**)(void *))(v499[0] + 32))(v499);
  }
  else if (v500)
  {
    (*(void (**)(void))(*v500 + 40))();
  }
  if (v496 == v495)
  {
    (*(void (**)(void *))(v495[0] + 32))(v495);
  }
  else if (v496)
  {
    (*(void (**)(void))(*v496 + 40))();
  }
  if (v498 == v497)
  {
    (*(void (**)(void *))(v497[0] + 32))(v497);
  }
  else if (v498)
  {
    (*(void (**)(void))(*v498 + 40))();
  }
  if (v502 == v501)
  {
    (*(void (**)(void *))(v501[0] + 32))(v501);
  }
  else if (v502)
  {
    (*(void (**)(void))(*v502 + 40))();
  }
  uint64_t v25 = sub_1CC72D384((uint64_t)a1, 83);
  v491[0] = &unk_1F25F9578;
  v491[1] = v14;
  uint64_t v492 = v491;
  uint64_t v26 = sub_1CBA1A5F0(v25, (uint64_t)v491);
  uint64_t v27 = sub_1CBA1ADF0(v26, 0, 0x81uLL);
  uint64_t v28 = sub_1CBA1B484(v27, 0, 0x101uLL);
  uint64_t v29 = sub_1CBA1A6C8(v28, 0, 16);
  uint64_t v30 = sub_1CD410214(v29, 0, 0x400014uLL, 4194372);
  uint64_t v31 = sub_1CD410214(v30, 0, 0x800014uLL, 8388676);
  uint64_t v32 = sub_1CD410214(v31, 0, 0x1000014uLL, 16777252);
  uint64_t v33 = sub_1CD410214(v32, 0, 0x8000000000800014, 0x8000000000800044);
  v382.i64[0] = 129;
  sub_1CD6172BC(0, &v382, 1, (uint64_t)v487);
  sub_1CD6175B0(0, 2, v485);
  sub_1CBA1A9A0((uint64_t)v487, (uint64_t)v485, (uint64_t)v489);
  sub_1CD617848(0, 0, v483);
  uint64_t v34 = sub_1CBA1A848(v33, (uint64_t)v489, (uint64_t)v483);
  sub_1CD4102E0(v34, 0);
  if (v484 == v483)
  {
    (*(void (**)(void *))(v483[0] + 32))(v483);
  }
  else if (v484)
  {
    (*(void (**)(void))(*v484 + 40))();
  }
  if (v490 == v489)
  {
    (*(void (**)(void *))(v489[0] + 32))(v489);
  }
  else if (v490)
  {
    (*(void (**)(void))(*v490 + 40))();
  }
  if (v486 == v485)
  {
    (*(void (**)(void *))(v485[0] + 32))(v485);
  }
  else if (v486)
  {
    (*(void (**)(void))(*v486 + 40))();
  }
  if (v488 == v487)
  {
    (*(void (**)(void *))(v487[0] + 32))(v487);
  }
  else if (v488)
  {
    (*(void (**)(void))(*v488 + 40))();
  }
  if (v492 == v491)
  {
    (*(void (**)(void *))(v491[0] + 32))(v491);
  }
  else if (v492)
  {
    (*(void (**)(void))(*v492 + 40))();
  }
  uint64_t v35 = sub_1CC72D384((uint64_t)a1, 221);
  v481[0] = &unk_1F25F95C0;
  int v482 = v481;
  sub_1CBA1A5F0(v35, (uint64_t)v481);
  if (v482 == v481)
  {
    (*(void (**)(void *))(v481[0] + 32))(v481);
  }
  else if (v482)
  {
    (*(void (**)(void))(*v482 + 40))();
  }
  uint64_t v36 = sub_1CC72D384((uint64_t)a1, 69);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DCA0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DCB0;
  long long v384 = xmmword_1CDB0DCC0;
  long long v385 = xmmword_1CDB0DCD0;
  long long v386 = xmmword_1CDB0DCE0;
  long long v387 = xmmword_1CDB0DCF0;
  long long v388 = xmmword_1CDC6CFC0;
  long long v389 = xmmword_1CDC6CFD0;
  long long v390 = xmmword_1CDC6CFE0;
  long long v391 = xmmword_1CDB0DD10;
  long long v392 = xmmword_1CDB0DD20;
  long long v393 = xmmword_1CDC6CFF0;
  long long v394 = xmmword_1CDC6D000;
  long long v395 = xmmword_1CDC6D010;
  uint64_t v37 = sub_1CBA59D24(v36, 0, &v382, 28);
  v479[0] = &unk_1F25F9608;
  uint64_t v480 = v479;
  uint64_t v38 = sub_1CBA1AD18(v37, (uint64_t)v479);
  uint64_t v39 = sub_1CBA1A6C8(v38, 0, 0);
  uint64_t v40 = sub_1CBA1ADF0(v39, 0, 0x81uLL);
  uint64_t v41 = sub_1CBA1B484(v40, 0, 0x201uLL);
  uint64_t v42 = sub_1CD410214(v41, 0, 0x800014uLL, 8388644);
  uint64_t v43 = sub_1CD410214(v42, 0, 0x8000000000800014, 0x8000000000800024);
  uint64_t v44 = sub_1CD410214(v43, 0, 0x1000014uLL, 16777252);
  v477[0] = &unk_1F25F9650;
  int v478 = v477;
  v475[0] = &unk_1F261C798;
  v475[1] = 0x1000000000;
  unint64_t v476 = v475;
  uint64_t v45 = sub_1CBA1ABC0(v44, (uint64_t)v477, (uint64_t)v475);
  sub_1CD410214(v45, 0, 0x2000014uLL, 33554452);
  if (v476 == v475)
  {
    (*(void (**)(void *))(v475[0] + 32))(v475);
  }
  else if (v476)
  {
    (*(void (**)(void))(*v476 + 40))();
  }
  if (v478 == v477)
  {
    (*(void (**)(void *))(v477[0] + 32))(v477);
  }
  else if (v478)
  {
    (*(void (**)(void))(*v478 + 40))();
  }
  if (v480 == v479)
  {
    (*(void (**)(void *))(v479[0] + 32))(v479);
  }
  else if (v480)
  {
    (*(void (**)(void))(*v480 + 40))();
  }
  uint64_t v46 = sub_1CC72D384((uint64_t)a1, 120);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v47 = sub_1CBA59D24(v46, 0, &v382, 3);
  uint64_t v48 = sub_1CBA1ADF0(v47, 0, 0x81uLL);
  uint64_t v49 = sub_1CBA1B484(v48, 0, 0x201uLL);
  sub_1CBA1A6C8(v49, 0, 0);
  uint64_t v50 = sub_1CC72D384((uint64_t)a1, 121);
  int64x2_t v382 = (int64x2_t)xmmword_1CDC6D020;
  v383.i64[0] = 257;
  uint64_t v51 = sub_1CBA59D24(v50, 0, &v382, 3);
  uint64_t v52 = sub_1CBA1ADF0(v51, 0, 0x81uLL);
  uint64_t v53 = sub_1CBA1B484(v52, 0, 0x101uLL);
  sub_1CBA1A6C8(v53, 0, 0);
  *(void *)&long long v410 = 0x2E0000002DLL;
  uint64_t v54 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v55 = sub_1CBA59D24(v54, 0, &v382, 3);
  uint64_t v56 = sub_1CBA1ADF0(v55, 0, 0x81uLL);
  uint64_t v57 = sub_1CBA1B484(v56, 0, 0x201uLL);
  uint64_t v58 = sub_1CBA1A6C8(v57, 0, 0);
  v473[0] = &unk_1F25F9698;
  uint64_t v474 = v473;
  sub_1CBA1AD18(v58, (uint64_t)v473);
  if (v474 == v473)
  {
    (*(void (**)(void *))(v473[0] + 32))(v473);
  }
  else if (v474)
  {
    (*(void (**)(void))(*v474 + 40))();
  }
  *(void *)&long long v410 = 0x4200000041;
  DWORD2(v410) = 67;
  uint64_t v59 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 3);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v60 = sub_1CBA59D24(v59, 0, &v382, 2);
  v471[0] = &unk_1F25F96E0;
  v471[1] = 513;
  uint64_t v472 = v471;
  uint64_t v61 = sub_1CBA1AD18(v60, (uint64_t)v471);
  uint64_t v62 = sub_1CBA1ADF0(v61, 0, 0x81uLL);
  uint64_t v63 = sub_1CBA1B484(v62, 0, 0x101uLL);
  sub_1CBA1A6C8(v63, 0, 0);
  if (v472 == v471)
  {
    (*(void (**)(void *))(v471[0] + 32))(v471);
  }
  else if (v472)
  {
    (*(void (**)(void))(*v472 + 40))();
  }
  uint64_t v64 = sub_1CC72D384((uint64_t)a1, 47);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v65 = sub_1CBA59D24(v64, 0, &v382, 2);
  v469[0] = &unk_1F25F9728;
  v469[1] = 513;
  uint64_t v470 = v469;
  uint64_t v66 = sub_1CBA1AD18(v65, (uint64_t)v469);
  uint64_t v67 = sub_1CBA1ADF0(v66, 0, 0x81uLL);
  uint64_t v68 = sub_1CBA1B484(v67, 0, 0x201uLL);
  sub_1CBA1A6C8(v68, 0, 0);
  if (v470 == v469)
  {
    (*(void (**)(void *))(v469[0] + 32))(v469);
  }
  else if (v470)
  {
    (*(void (**)(void))(*v470 + 40))();
  }
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD70;
  uint64_t v69 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 4);
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v70 = sub_1CBA59D24(v69, 0, &v410, 2);
  uint64_t v71 = sub_1CD410440(v70, 0);
  uint64_t v72 = sub_1CBA1ADF0(v71, 0, 0x101uLL);
  uint64_t v73 = sub_1CBA1A6C8(v72, 0, 0);
  sub_1CD41059C(v73);
  v382.i64[0] = 0x8300000082;
  uint64_t v74 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  sub_1CD410694(v74);
  *(void *)&long long v332 = 0x810000007FLL;
  DWORD2(v332) = 128;
  uint64_t v75 = sub_1CC72D3AC((uint64_t)a1, (int *)&v332, 3);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  long long v410 = xmmword_1CDB0DD60;
  *(void *)&long long v411 = 513;
  uint64_t v76 = sub_1CD411620(v75, 0, &v382, 3, &v410, 3);
  uint64_t v77 = sub_1CBA1A6C8(v76, 0, 0);
  uint64_t v78 = sub_1CBA1A6C8(v77, 1u, 0);
  uint64_t v79 = sub_1CBA1ADF0(v78, 0, 0x81uLL);
  uint64_t v80 = sub_1CBA1B484(v79, 0, 0x201uLL);
  uint64_t v81 = sub_1CBA1ADF0(v80, 1u, 0x81uLL);
  uint64_t v82 = sub_1CBA1B484(v81, 1u, 0x201uLL);
  v467[0] = &unk_1F25F9698;
  uint64_t v468 = v467;
  sub_1CBA1AD18(v82, (uint64_t)v467);
  if (v468 == v467)
  {
    (*(void (**)(void *))(v467[0] + 32))(v467);
  }
  else if (v468)
  {
    (*(void (**)(void))(*v468 + 40))();
  }
  v382.i64[0] = 0x3C0000003BLL;
  uint64_t v83 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  long long v465 = xmmword_1CDB0DD60;
  uint64_t v464 = (void (**)(void **))&unk_1F25F9770;
  uint64_t v466 = (void **)&v464;
  uint64_t v84 = sub_1CBA1AD18(v83, (uint64_t)&v464);
  uint64_t v85 = sub_1CBA1ADF0(v84, 0, 0x81uLL);
  uint64_t v86 = sub_1CBA1B484(v85, 0, 0x101uLL);
  sub_1CBA1A6C8(v86, 0, 0);
  if (v466 == (void **)&v464)
  {
    v464[4]((void **)&v464);
  }
  else if (v466)
  {
    (*((void (**)(void))*v466 + 5))();
  }
  v382.i64[0] = 0x9300000094;
  uint64_t v87 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  long long v462 = xmmword_1CDB0DD60;
  unsigned int v461 = (void (**)(void **))&unk_1F25F97B8;
  uint64_t v463 = (void **)&v461;
  sub_1CBA1AD18(v87, (uint64_t)&v461);
  if (v463 == (void **)&v461)
  {
    v461[4]((void **)&v461);
  }
  else if (v463)
  {
    (*((void (**)(void))*v463 + 5))();
  }
  *(void *)&long long v410 = 0x3E0000003DLL;
  uint64_t v88 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v89 = sub_1CBA59D24(v88, 6, &v382, 2);
  uint64_t v90 = sub_1CBA1ADF0(v89, 0, 0x81uLL);
  uint64_t v91 = sub_1CBA1B484(v90, 0, 0x101uLL);
  sub_1CBA1A6C8(v91, 0, 0);
  *(void *)&long long v410 = 0x3100000030;
  uint64_t v92 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD80;
  sub_1CD411804(v92, 0, &v382, 1);
  uint64_t v93 = sub_1CC72D384((uint64_t)a1, 140);
  sub_1CD41059C(v93);
  int64x2_t v382 = (int64x2_t)xmmword_1CDC6D260;
  v383.i64[0] = 0x8E0000008FLL;
  uint64_t v94 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 6);
  long long v410 = xmmword_1CDB0DD60;
  *(void *)&long long v411 = 513;
  *(void *)&long long v332 = 9;
  uint64_t v95 = sub_1CD411620(v94, 8, &v410, 3, &v332, 1);
  uint64_t v96 = sub_1CBA1ADF0(v95, 0, 0x81uLL);
  uint64_t v97 = sub_1CBA1B484(v96, 0, 0x201uLL);
  sub_1CBA1A6C8(v97, 0, 0);
  long long v410 = xmmword_1CDB0DD90;
  uint64_t v98 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 4);
  v459[0] = &unk_1F25F9698;
  uint64_t v460 = v459;
  uint64_t v99 = sub_1CBA1AD18(v98, (uint64_t)v459);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v100 = sub_1CBA59D24(v99, 6, &v382, 3);
  uint64_t v101 = sub_1CBA1ADF0(v100, 0, 0x81uLL);
  uint64_t v102 = sub_1CBA1B484(v101, 0, 0x101uLL);
  sub_1CBA1A6C8(v102, 0, 0);
  if (v460 == v459)
  {
    (*(void (**)(void *))(v459[0] + 32))(v459);
  }
  else if (v460)
  {
    (*(void (**)(void))(*v460 + 40))();
  }
  uint64_t v103 = sub_1CC72D384((uint64_t)a1, 199);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v104 = sub_1CBA59D24(v103, 8, &v382, 3);
  uint64_t v105 = sub_1CBA1ADF0(v104, 0, 0x81uLL);
  uint64_t v106 = sub_1CBA1B484(v105, 0, 0x201uLL);
  uint64_t v107 = sub_1CBA1A6C8(v106, 0, 0);
  v457[0] = &unk_1F25F9698;
  uint64_t v458 = v457;
  sub_1CBA1AD18(v107, (uint64_t)v457);
  if (v458 == v457)
  {
    (*(void (**)(void *))(v457[0] + 32))(v457);
  }
  else if (v458)
  {
    (*(void (**)(void))(*v458 + 40))();
  }
  int64x2_t v382 = (int64x2_t)xmmword_1CDC6D278;
  int64x2_t v383 = (int64x2_t)unk_1CDC6D288;
  LODWORD(v384) = 219;
  uint64_t v108 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 9);
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v109 = sub_1CBA59D24(v108, 0, &v410, 2);
  v455[0] = &unk_1F25F9800;
  uint64_t v456 = v455;
  sub_1CBA1AD18(v109, (uint64_t)v455);
  if (v456 == v455)
  {
    (*(void (**)(void *))(v455[0] + 32))(v455);
  }
  else if (v456)
  {
    (*(void (**)(void))(*v456 + 40))();
  }
  v382.i64[0] = 0xBC000000BBLL;
  uint64_t v110 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  long long v453 = xmmword_1CDB0DD60;
  uint64_t v452 = (void (**)(void **))&unk_1F25F9848;
  unint64_t v454 = (void **)&v452;
  sub_1CBA1AD18(v110, (uint64_t)&v452);
  if (v454 == (void **)&v452)
  {
    v452[4]((void **)&v452);
  }
  else if (v454)
  {
    (*((void (**)(void))*v454 + 5))();
  }
  uint64_t v111 = sub_1CC72D384((uint64_t)a1, 168);
  long long v450 = xmmword_1CDB0DD60;
  unint64_t v449 = (void (**)(void **))&unk_1F25F9890;
  uint64_t v451 = (void **)&v449;
  sub_1CBA1AD18(v111, (uint64_t)&v449);
  if (v451 == (void **)&v449)
  {
    v449[4]((void **)&v449);
  }
  else if (v451)
  {
    (*((void (**)(void))*v451 + 5))();
  }
  uint64_t v112 = sub_1CC72D384((uint64_t)a1, 164);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v113 = sub_1CBA59D24(v112, 6, &v382, 2);
  v447[0] = &unk_1F25F98D8;
  uint64_t v448 = v447;
  sub_1CBA1AD18(v113, (uint64_t)v447);
  if (v448 == v447)
  {
    (*(void (**)(void *))(v447[0] + 32))(v447);
  }
  else if (v448)
  {
    (*(void (**)(void))(*v448 + 40))();
  }
  uint64_t v114 = sub_1CC72D384((uint64_t)a1, 178);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DDA0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDC6D030;
  uint64_t v115 = sub_1CD411804(v114, 0, &v382, 2);
  v445[0] = &unk_1F25F9698;
  unsigned int v446 = v445;
  sub_1CBA1AD18(v115, (uint64_t)v445);
  if (v446 == v445)
  {
    (*(void (**)(void *))(v445[0] + 32))(v445);
  }
  else if (v446)
  {
    (*(void (**)(void))(*v446 + 40))();
  }
  uint64_t v116 = sub_1CC72D384((uint64_t)a1, 179);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v383 = (int64x2_t)xmmword_1CDC6D040;
  uint64_t v117 = sub_1CD411804(v116, 0, &v382, 2);
  v443[0] = &unk_1F25F9698;
  BOOL v444 = v443;
  sub_1CBA1AD18(v117, (uint64_t)v443);
  if (v444 == v443)
  {
    (*(void (**)(void *))(v443[0] + 32))(v443);
  }
  else if (v444)
  {
    (*(void (**)(void))(*v444 + 40))();
  }
  uint64_t v118 = sub_1CC72D384((uint64_t)a1, 218);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v119 = sub_1CBA59D24(v118, 0, &v382, 2);
  v441[0] = &unk_1F25F9920;
  v441[1] = 0x8000000000000081;
  int v442 = v441;
  uint64_t v120 = sub_1CBA1AD18(v119, (uint64_t)v441);
  v439[0] = &unk_1F25F9698;
  uint64_t v440 = v439;
  sub_1CBA1AD18(v120, (uint64_t)v439);
  if (v440 == v439)
  {
    (*(void (**)(void *))(v439[0] + 32))(v439);
  }
  else if (v440)
  {
    (*(void (**)(void))(*v440 + 40))();
  }
  if (v442 == v441)
  {
    (*(void (**)(void *))(v441[0] + 32))(v441);
  }
  else if (v442)
  {
    (*(void (**)(void))(*v442 + 40))();
  }
  uint64_t v121 = sub_1CC72D384((uint64_t)a1, 185);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v122 = sub_1CD411620(v121, 0, &v382, 2, &v410, 2);
  v437[0] = &unk_1F25F9968;
  v437[1] = 0x8000000000000081;
  uint64_t v438 = v437;
  uint64_t v123 = sub_1CBA1AD18(v122, (uint64_t)v437);
  sub_1CD410440(v123, 0);
  if (v438 == v437)
  {
    (*(void (**)(void *))(v437[0] + 32))(v437);
  }
  else if (v438)
  {
    (*(void (**)(void))(*v438 + 40))();
  }
  uint64_t v124 = sub_1CC72D384((uint64_t)a1, 212);
  v382.i64[0] = 257;
  uint64_t v125 = sub_1CBA59D24(v124, 0, &v382, 1);
  uint64_t v126 = sub_1CBA1ADF0(v125, 0, 0x101uLL);
  uint64_t v127 = sub_1CBA1B484(v126, 0, 0x101uLL);
  sub_1CD410440(v127, 0);
  uint64_t v128 = sub_1CC72D384((uint64_t)a1, 213);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DDB0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DCC0;
  uint64_t v129 = sub_1CBA59D24(v128, 8, &v382, 4);
  uint64_t v130 = sub_1CBA1A6C8(v129, 0, 0);
  uint64_t v131 = sub_1CBA1ADF0(v130, 0, 0x81uLL);
  uint64_t v132 = sub_1CBA1B484(v131, 0, 0x201uLL);
  sub_1CD410440(v132, 0);
  v382.i64[0] = 0xAE000000ACLL;
  v382.i32[2] = 217;
  uint64_t v133 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 3);
  long long v435 = xmmword_1CDB0DD60;
  uint64_t v434 = (void (**)(void **))&unk_1F25F99B0;
  unsigned int v436 = (void **)&v434;
  sub_1CBA1AD18(v133, (uint64_t)&v434);
  if (v436 == (void **)&v434)
  {
    v434[4]((void **)&v434);
  }
  else if (v436)
  {
    (*((void (**)(void))*v436 + 5))();
  }
  uint64_t v134 = sub_1CC72D384((uint64_t)a1, 85);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  uint64_t v135 = sub_1CBA59D24(v134, 0, &v382, 2);
  v432[0] = &unk_1F25F99F8;
  uint64_t v433 = v432;
  sub_1CBA1AD18(v135, (uint64_t)v432);
  if (v433 == v432)
  {
    (*(void (**)(void *))(v432[0] + 32))(v432);
  }
  else if (v433)
  {
    (*(void (**)(void))(*v433 + 40))();
  }
  uint64_t v136 = sub_1CC72D384((uint64_t)a1, 211);
  int64x2_t v382 = vdupq_n_s64(0x81uLL);
  int64x2_t v383 = vdupq_n_s64(0x101uLL);
  uint64_t v137 = sub_1CD411804(v136, 0, &v382, 2);
  uint64_t v138 = sub_1CBA1ADF0(v137, 1u, 0x81uLL);
  uint64_t v139 = sub_1CBA1B484(v138, 1u, 0x101uLL);
  uint64_t v140 = sub_1CBA1A6C8(v139, 1u, 0);
  uint64_t v141 = sub_1CD410788(v140, 0, 1);
  v430[0] = &unk_1F25F9A40;
  uint64_t v431 = v430;
  v428[0] = &unk_1F25F9A88;
  int v429 = v428;
  sub_1CBA1AFAC(v141, (uint64_t)v430, (uint64_t)v428);
  if (v429 == v428)
  {
    (*(void (**)(void *))(v428[0] + 32))(v428);
  }
  else if (v429)
  {
    (*(void (**)(void))(*v429 + 40))();
  }
  if (v431 == v430)
  {
    (*(void (**)(void *))(v430[0] + 32))(v430);
  }
  else if (v431)
  {
    (*(void (**)(void))(*v431 + 40))();
  }
  *(void *)&long long v410 = 0xD0000000CFLL;
  uint64_t v142 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 2);
  int64x2_t v382 = vdupq_n_s64(0x81uLL);
  int64x2_t v383 = vdupq_n_s64(0x101uLL);
  uint64_t v143 = sub_1CD411804(v142, 6, &v382, 2);
  uint64_t v144 = sub_1CBA1ADF0(v143, 1u, 0x81uLL);
  uint64_t v145 = sub_1CBA1B484(v144, 1u, 0x101uLL);
  uint64_t v146 = sub_1CBA1A6C8(v145, 1u, 0);
  uint64_t v147 = sub_1CD410788(v146, 0, 1);
  v426[0] = &unk_1F25F9AD0;
  uint64_t v427 = v426;
  v424[0] = &unk_1F25F9B18;
  uint64_t v425 = v424;
  sub_1CBA1AFAC(v147, (uint64_t)v426, (uint64_t)v424);
  if (v425 == v424)
  {
    (*(void (**)(void *))(v424[0] + 32))(v424);
  }
  else if (v425)
  {
    (*(void (**)(void))(*v425 + 40))();
  }
  if (v427 == v426)
  {
    (*(void (**)(void *))(v426[0] + 32))(v426);
  }
  else if (v427)
  {
    (*(void (**)(void))(*v427 + 40))();
  }
  *(void *)&long long v410 = 0xD2000000D1;
  uint64_t v148 = sub_1CC72D3AC((uint64_t)a1, (int *)&v410, 2);
  uint64_t v149 = sub_1CBA1A6C8(v148, 0, 0);
  uint64_t v150 = sub_1CBA1ADF0(v149, 0, 0x81uLL);
  uint64_t v151 = sub_1CBA1B484(v150, 0, 0x201uLL);
  uint64_t v152 = sub_1CD410788(v151, 1, 0);
  uint64_t v153 = sub_1CD424324(v152);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  sub_1CBA59D24(v153, 8, &v382, 3);
  *(void *)&long long v330 = 0xB5000000B4;
  uint64_t v154 = sub_1CC72D3AC((uint64_t)a1, (int *)&v330, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v155 = sub_1CD411620(v154, 0, &v382, 2, &v410, 2);
  long long v332 = xmmword_1CDB0DD80;
  uint64_t v156 = sub_1CBA59D24(v155, 8, &v332, 2);
  uint64_t v157 = sub_1CBA1ADF0(v156, 1u, 0x81uLL);
  uint64_t v158 = sub_1CBA1B484(v157, 1u, 0x101uLL);
  uint64_t v159 = sub_1CBA1ADF0(v158, 0, 0x41uLL);
  uint64_t v160 = sub_1CBA1B484(v159, 0, 0x101uLL);
  v422[0] = &unk_1F25F9B60;
  v422[1] = 65;
  uint64_t v423 = v422;
  uint64_t v161 = sub_1CBA1AD18(v160, (uint64_t)v422);
  sub_1CBA1A6C8(v161, 0, 0);
  if (v423 == v422)
  {
    (*(void (**)(void *))(v422[0] + 32))(v422);
  }
  else if (v423)
  {
    (*(void (**)(void))(*v423 + 40))();
  }
  *(void *)&long long v332 = 0xB7000000B6;
  uint64_t v162 = sub_1CC72D3AC((uint64_t)a1, (int *)&v332, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v163 = sub_1CD411620(v162, 0, &v382, 2, &v410, 2);
  uint64_t v164 = sub_1CBA1ADF0(v163, 1u, 0x81uLL);
  uint64_t v165 = sub_1CBA1B484(v164, 1u, 0x201uLL);
  uint64_t v166 = sub_1CBA1A6C8(v165, 1u, 0);
  unint64_t v167 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v167 = &unk_1F25F9BA8;
  *(_OWORD *)(v167 + 8) = xmmword_1CDB0DD60;
  *((void *)v167 + 3) = 513;
  uint64_t v421 = v167;
  sub_1CBA1AD18(v166, (uint64_t)v420);
  if (v421 == v420)
  {
    (*(void (**)(void *))(v420[0] + 32))(v420);
  }
  else if (v421)
  {
    (*(void (**)(void))(*v421 + 40))();
  }
  uint64_t v168 = sub_1CC72D384((uint64_t)a1, 81);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DDC0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DDD0;
  long long v384 = xmmword_1CDB0DD30;
  long long v385 = xmmword_1CDC6D050;
  long long v386 = xmmword_1CDC6D060;
  long long v387 = xmmword_1CDC6D070;
  *(void *)&long long v332 = 513;
  uint64_t v169 = sub_1CD411620(v168, 0, &v382, 12, &v332, 1);
  long long v410 = xmmword_1CDC6D080;
  *(void *)&long long v411 = 39321858;
  *(void *)&long long v330 = 257;
  uint64_t v170 = sub_1CD411620(v169, 0, &v410, 3, &v330, 1);
  v418[0] = &unk_1F25F9BF0;
  char v419 = v418;
  sub_1CBA1AD18(v170, (uint64_t)v418);
  if (v419 == v418)
  {
    (*(void (**)(void *))(v418[0] + 32))(v418);
  }
  else if (v419)
  {
    (*(void (**)(void))(*v419 + 40))();
  }
  uint64_t v171 = sub_1CC72D384((uint64_t)a1, 80);
  *(void *)&long long v332 = 513;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DDC0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DDD0;
  long long v384 = xmmword_1CDB0DD30;
  long long v385 = xmmword_1CDC6D050;
  long long v386 = xmmword_1CDC6D060;
  long long v387 = xmmword_1CDC6D070;
  uint64_t v172 = sub_1CD411620(v171, 0, &v332, 1, &v382, 12);
  *(void *)&long long v330 = 257;
  long long v410 = xmmword_1CDC6D080;
  *(void *)&long long v411 = 39321858;
  uint64_t v173 = sub_1CD411620(v172, 0, &v330, 1, &v410, 3);
  v416[0] = &unk_1F25F9C38;
  unint64_t v417 = v416;
  sub_1CBA1AD18(v173, (uint64_t)v416);
  if (v417 == v416)
  {
    (*(void (**)(void *))(v416[0] + 32))(v416);
  }
  else if (v417)
  {
    (*(void (**)(void))(*v417 + 40))();
  }
  uint64_t v174 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  BOOL v175 = sub_1CD80D0EC(v174);
  uint64_t v176 = 0;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DDE0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DD20;
  long long v384 = xmmword_1CDB0DDC0;
  long long v385 = xmmword_1CDB0DDF0;
  long long v386 = xmmword_1CDC6D090;
  long long v387 = xmmword_1CDC6D0A0;
  long long v388 = xmmword_1CDC6D070;
  *(void *)&long long v389 = 3146242;
  do
  {
    uint64_t v177 = v382.i64[v176];
    *(void *)&long long v410 = 193;
    *((void *)&v410 + 1) = v177;
    sub_1CBA1B104(v5, (uint64_t)&v410, 8);
    ++v176;
  }
  while (v176 != 15);
  v382.i64[0] = 70;
  v382.i64[1] = 514;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 33554946;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 1573122;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 1573378;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 1049090;
  if (v175) {
    char v178 = 0;
  }
  else {
    char v178 = 8;
  }
  sub_1CBA1B104(v5, (uint64_t)&v382, v178);
  v382.i64[0] = 71;
  v382.i64[1] = 2621698;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 39321858;
  sub_1CBA1B104(v5, (uint64_t)&v382, 8);
  v382.i64[0] = 71;
  v382.i64[1] = 514;
  sub_1CBA1B104(v5, (uint64_t)&v382, 0);
  *(void *)&long long v330 = 0x600000005ALL;
  uint64_t v179 = sub_1CC72D3AC((uint64_t)a1, (int *)&v330, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DC70;
  int64x2_t v383 = (int64x2_t)xmmword_1CDC6D0B0;
  long long v384 = xmmword_1CDB0DCC0;
  long long v385 = xmmword_1CDC6D0C0;
  long long v386 = xmmword_1CDB0DC90;
  long long v387 = xmmword_1CDB0DF40;
  long long v388 = xmmword_1CDB0DCD0;
  long long v389 = xmmword_1CDB0DEF0;
  long long v390 = xmmword_1CDB0DF00;
  long long v391 = xmmword_1CDB0DCF0;
  long long v392 = xmmword_1CDB0DFA0;
  long long v393 = xmmword_1CDC6CFD0;
  *(void *)&long long v394 = 0x8000000000800024;
  long long v410 = xmmword_1CDB0DDC0;
  long long v411 = xmmword_1CDB0DE80;
  long long v412 = xmmword_1CDB0DE90;
  long long v413 = xmmword_1CDC6CFF0;
  long long v414 = xmmword_1CDC6D000;
  uint64_t v415 = 41943554;
  uint64_t v180 = sub_1CD411620(v179, 8, &v382, 25, &v410, 11);
  uint64_t v409 = 257;
  long long v332 = xmmword_1CDB0DD40;
  uint64_t v181 = sub_1CD411620(v180, 8, &v409, 1, &v332, 2);
  unint64_t v182 = (char *)operator new(0x60uLL);
  *(void *)unint64_t v182 = &unk_1F25F9C80;
  *(_OWORD *)(v182 + 8) = xmmword_1CDB0DDC0;
  *(_OWORD *)(v182 + 24) = xmmword_1CDB0DE80;
  *(_OWORD *)(v182 + 40) = xmmword_1CDB0DE90;
  *(_OWORD *)(v182 + 56) = xmmword_1CDC6CFF0;
  *(_OWORD *)(v182 + 72) = xmmword_1CDC6D0D0;
  *((void *)v182 + 11) = 3146242;
  uint64_t v408 = v182;
  uint64_t v183 = sub_1CBA1AD18(v181, (uint64_t)v407);
  uint64_t v184 = sub_1CBA1ADF0(v183, 0, 0x41uLL);
  uint64_t v185 = sub_1CBA1B484(v184, 0, 0x201uLL);
  uint64_t v186 = sub_1CBA1A6C8(v185, 0, 0);
  uint64_t v187 = sub_1CD410214(v186, 0, 0x400014uLL, 4194436);
  uint64_t v188 = sub_1CD410214(v187, 0, 0x800014uLL, 8388676);
  uint64_t v189 = sub_1CD410214(v188, 0, 0x1000014uLL, 16777252);
  uint64_t v190 = sub_1CD410214(v189, 0, 0x2000014uLL, 33554452);
  uint64_t v191 = sub_1CD410214(v190, 0, 0x8000000000800014, 0x8000000000800024);
  sub_1CD4108F8(v191);
  if (v408 == v407)
  {
    (*(void (**)(void *))(v407[0] + 32))(v407);
    unsigned int v192 = v317;
  }
  else
  {
    unsigned int v192 = v317;
    if (v408) {
      (*(void (**)(void))(*v408 + 40))();
    }
  }
  v382.i64[0] = 0x5C0000005BLL;
  uint64_t v193 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  uint64_t v194 = sub_1CD4109D4(v193);
  sub_1CD410AB0(v194);
  uint64_t v195 = sub_1CC72D384((uint64_t)a1, 125);
  sub_1CD41059C(v195);
  int64x2_t v382 = (int64x2_t)xmmword_1CDC6D29C;
  int64x2_t v383 = (int64x2_t)unk_1CDC6D2AC;
  long long v384 = xmmword_1CDC6D2BC;
  uint64_t v196 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 12);
  *(void *)&long long v332 = 257;
  long long v410 = xmmword_1CDB0DD40;
  long long v411 = xmmword_1CDB0DD50;
  long long v412 = xmmword_1CDC6D0E0;
  uint64_t v197 = sub_1CD411620(v196, 8, &v332, 1, &v410, 6);
  v405[0] = &unk_1F25F9CC8;
  v405[1] = 513;
  unint64_t v406 = v405;
  sub_1CBA1AD18(v197, (uint64_t)v405);
  if (v406 == v405)
  {
    (*(void (**)(void *))(v405[0] + 32))(v405);
  }
  else if (v406)
  {
    (*(void (**)(void))(*v406 + 40))();
  }
  uint64_t v198 = sub_1CC72D384((uint64_t)a1, 98);
  v403[0] = &unk_1F25F9D10;
  v403[1] = 257;
  unint64_t v404 = v403;
  sub_1CBA1AD18(v198, (uint64_t)v403);
  if (v404 == v403)
  {
    (*(void (**)(void *))(v403[0] + 32))(v403);
  }
  else if (v404)
  {
    (*(void (**)(void))(*v404 + 40))();
  }
  uint64_t v199 = sub_1CC72D384((uint64_t)a1, 82);
  sub_1CD617534(0, 1, v399);
  sub_1CBA1B258((uint64_t)v399, (uint64_t)v401);
  uint64_t v200 = sub_1CBA1B180(v199, (uint64_t)v401);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DEA0;
  long long v384 = xmmword_1CDB0DEB0;
  long long v385 = xmmword_1CDC6D0F0;
  long long v386 = xmmword_1CDC6D100;
  long long v387 = xmmword_1CDC6D110;
  long long v388 = xmmword_1CDB0DC90;
  long long v389 = xmmword_1CDB0DFD0;
  long long v390 = xmmword_1CDB0DE40;
  long long v391 = xmmword_1CDB0DE50;
  long long v392 = xmmword_1CDB0DE60;
  long long v393 = xmmword_1CDC6CFD0;
  long long v394 = xmmword_1CDC6D120;
  long long v395 = xmmword_1CDC6D130;
  long long v396 = xmmword_1CDB0DCF0;
  long long v397 = xmmword_1CDB0DF10;
  uint64_t v398 = 33554460;
  uint64_t v201 = sub_1CD411C6C(v200, 0, &v382, 33);
  uint64_t v202 = sub_1CBA1ADF0(v201, 0, 0x81uLL);
  uint64_t v203 = sub_1CBA1B484(v202, 0, 0x401uLL);
  uint64_t v204 = sub_1CBA1ADF0(v203, 1u, 0x81uLL);
  uint64_t v205 = sub_1CBA1B484(v204, 1u, 0x401uLL);
  uint64_t v206 = sub_1CD410C04(v205, 0, 0);
  uint64_t v207 = sub_1CD410C04(v206, 1, 0);
  uint64_t v208 = sub_1CD411E50(v207, 0, 0x41uLL);
  uint64_t v209 = sub_1CD411FDC(v208, 0, 0x401uLL);
  uint64_t v210 = sub_1CD411E50(v209, 1, 0x41uLL);
  uint64_t v211 = sub_1CD411FDC(v210, 1, 0x401uLL);
  sub_1CD61745C(0, 16, v380);
  sub_1CD617874(0, 16, v378);
  uint64_t v212 = sub_1CBA1A848(v211, (uint64_t)v380, (uint64_t)v378);
  sub_1CD61745C(1, 16, v376);
  sub_1CD617874(1, 16, v374);
  uint64_t v213 = sub_1CBA1A848(v212, (uint64_t)v376, (uint64_t)v374);
  sub_1CD617488(0, 128, v372);
  sub_1CD6178A0(0, 128, v370);
  uint64_t v214 = sub_1CBA1B32C(v213, (uint64_t)v372, (uint64_t)v370);
  sub_1CD617488(1, 128, v368);
  sub_1CD6178A0(1, 128, v366);
  uint64_t v215 = sub_1CBA1B32C(v214, (uint64_t)v368, (uint64_t)v366);
  uint64_t v216 = sub_1CD4102E0(v215, 0);
  uint64_t v217 = sub_1CD4102E0(v216, 1);
  uint64_t v218 = sub_1CD410214(v217, 0, 0x2000014uLL, 33554468);
  sub_1CD410214(v218, 1u, 0x2000014uLL, 33554468);
  if (v367 == v366)
  {
    (*(void (**)(void *))(v366[0] + 32))(v366);
  }
  else if (v367)
  {
    (*(void (**)(void))(*v367 + 40))();
  }
  if (v369 == v368)
  {
    (*(void (**)(void *))(v368[0] + 32))(v368);
  }
  else if (v369)
  {
    (*(void (**)(void))(*v369 + 40))();
  }
  if (v371 == v370)
  {
    (*(void (**)(void *))(v370[0] + 32))(v370);
  }
  else if (v371)
  {
    (*(void (**)(void))(*v371 + 40))();
  }
  if (v373 == v372)
  {
    (*(void (**)(void *))(v372[0] + 32))(v372);
  }
  else if (v373)
  {
    (*(void (**)(void))(*v373 + 40))();
  }
  if (v375 == v374)
  {
    (*(void (**)(void *))(v374[0] + 32))(v374);
  }
  else if (v375)
  {
    (*(void (**)(void))(*v375 + 40))();
  }
  if (v377 == v376)
  {
    (*(void (**)(void *))(v376[0] + 32))(v376);
  }
  else if (v377)
  {
    (*(void (**)(void))(*v377 + 40))();
  }
  if (v379 == v378)
  {
    (*(void (**)(void *))(v378[0] + 32))(v378);
  }
  else if (v379)
  {
    (*(void (**)(void))(*v379 + 40))();
  }
  if (v381 == v380)
  {
    (*(void (**)(void *))(v380[0] + 32))(v380);
  }
  else if (v381)
  {
    (*(void (**)(void))(*v381 + 40))();
  }
  if (v402 == v401)
  {
    (*(void (**)(void *))(v401[0] + 32))(v401);
  }
  else if (v402)
  {
    (*(void (**)(void))(*v402 + 40))();
  }
  if (v400 == v399)
  {
    (*(void (**)(void *))(v399[0] + 32))(v399);
  }
  else if (v400)
  {
    (*(void (**)(void))(*v400 + 40))();
  }
  *(void *)&long long v332 = 0x7C00000076;
  DWORD2(v332) = 126;
  uint64_t v219 = sub_1CC72D3AC((uint64_t)a1, (int *)&v332, 3);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DCC0;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v220 = sub_1CD411620(v219, 0, &v382, 2, &v410, 2);
  uint64_t v221 = sub_1CBA1ADF0(v220, 0, 0x101uLL);
  uint64_t v222 = sub_1CBA1B484(v221, 0, 0x201uLL);
  uint64_t v223 = sub_1CBA1A6C8(v222, 0, 0);
  uint64_t v224 = sub_1CBA1ADF0(v223, 1u, 0x81uLL);
  uint64_t v225 = sub_1CBA1B484(v224, 1u, 0x101uLL);
  uint64_t v226 = sub_1CBA1A6C8(v225, 1u, 0);
  v364[0] = &unk_1F25F9698;
  unint64_t v365 = v364;
  sub_1CBA1AD18(v226, (uint64_t)v364);
  if (v365 == v364)
  {
    (*(void (**)(void *))(v364[0] + 32))(v364);
  }
  else if (v365)
  {
    (*(void (**)(void))(*v365 + 40))();
  }
  uint64_t v227 = sub_1CC72D384((uint64_t)a1, 119);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DCC0;
  uint64_t v228 = sub_1CD411620(v227, 0, &v382, 2, &v410, 2);
  uint64_t v229 = sub_1CBA1B484(v228, 0, 0x101uLL);
  uint64_t v230 = sub_1CBA1B484(v229, 1u, 0x201uLL);
  v362[0] = &unk_1F25F9698;
  uint64_t v363 = v362;
  uint64_t v231 = sub_1CBA1AD18(v230, (uint64_t)v362);
  sub_1CD410D80(v231);
  if (v363 == v362)
  {
    (*(void (**)(void *))(v362[0] + 32))(v362);
  }
  else if (v363)
  {
    (*(void (**)(void))(*v363 + 40))();
  }
  uint64_t v232 = sub_1CC72D384((uint64_t)a1, 204);
  uint64_t v233 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v233 = &unk_1F25F9D58;
  *(_OWORD *)(v233 + 8) = xmmword_1CDB0DC70;
  *(_OWORD *)(v233 + 24) = xmmword_1CDC6D0B0;
  *(_OWORD *)(v233 + 40) = xmmword_1CDB0DCC0;
  uint64_t v361 = v233;
  sub_1CBA1AD18(v232, (uint64_t)v360);
  if (v361 == v360)
  {
    (*(void (**)(void *))(v360[0] + 32))(v360);
  }
  else if (v361)
  {
    (*(void (**)(void))(*v361 + 40))();
  }
  uint64_t v234 = sub_1CC72D384((uint64_t)a1, 205);
  long long v410 = xmmword_1CDB0DD60;
  *(void *)&long long v411 = 0x8000000000000081;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DCD0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DEF0;
  long long v384 = xmmword_1CDB0DF00;
  long long v385 = xmmword_1CDB0DCF0;
  long long v386 = xmmword_1CDC6CFD0;
  long long v387 = xmmword_1CDC6D120;
  *(void *)&long long v388 = 0x8000000000800044;
  *(void *)&long long v332 = 257;
  uint64_t v235 = sub_1CD412168(v234, 0, &v410, 3, &v382, 13, &v332, 1);
  unsigned int v236 = (char *)operator new(0x48uLL);
  *(void *)unsigned int v236 = &unk_1F25F9DA0;
  *(_OWORD *)(v236 + 8) = xmmword_1CDB0DF20;
  *(_OWORD *)(v236 + 24) = xmmword_1CDB0DF30;
  *(_OWORD *)(v236 + 40) = xmmword_1CDB0DD60;
  *(_OWORD *)(v236 + 56) = xmmword_1CDC6D140;
  uint64_t v359 = v236;
  sub_1CBA1AD18(v235, (uint64_t)v358);
  if (v359 == v358)
  {
    (*(void (**)(void *))(v358[0] + 32))(v358);
  }
  else if (v359)
  {
    (*(void (**)(void))(*v359 + 40))();
  }
  uint64_t v237 = sub_1CC72D384((uint64_t)a1, 206);
  uint64_t v238 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v238 = &unk_1F25F9DE8;
  *(_OWORD *)(v238 + 8) = xmmword_1CDB0DC70;
  *(_OWORD *)(v238 + 24) = xmmword_1CDC6D0B0;
  *(_OWORD *)(v238 + 40) = xmmword_1CDB0DCC0;
  unint64_t v357 = v238;
  sub_1CBA1B640(v237, (uint64_t)v356);
  if (v357 == v356)
  {
    (*(void (**)(void *))(v356[0] + 32))(v356);
  }
  else if (v357)
  {
    (*(void (**)(void))(*v357 + 40))();
  }
  uint64_t v239 = sub_1CC72D384((uint64_t)a1, 79);
  int v240 = (char *)operator new(0xB0uLL);
  *(void *)int v240 = &unk_1F25F9E30;
  *(_OWORD *)(v240 + 8) = xmmword_1CDB0DC80;
  *(_OWORD *)(v240 + 24) = xmmword_1CDB0DE20;
  *(_OWORD *)(v240 + 40) = xmmword_1CDB0DF40;
  *(_OWORD *)(v240 + 56) = xmmword_1CDB0DCD0;
  *(_OWORD *)(v240 + 72) = xmmword_1CDB0DEF0;
  *(_OWORD *)(v240 + 88) = xmmword_1CDC6D150;
  *(_OWORD *)(v240 + 104) = xmmword_1CDC6D160;
  *(_OWORD *)(v240 + 120) = xmmword_1CDC6D170;
  *(_OWORD *)(v240 + 136) = xmmword_1CDB0DE70;
  *(_OWORD *)(v240 + 152) = xmmword_1CDB0DFA0;
  *((void *)v240 + 21) = 33554468;
  uint64_t v355 = v240;
  sub_1CBA1AD18(v239, (uint64_t)v354);
  if (v355 == v354)
  {
    (*(void (**)(void *))(v354[0] + 32))(v354);
  }
  else if (v355)
  {
    (*(void (**)(void))(*v355 + 40))();
  }
  uint64_t v241 = sub_1CC72D384((uint64_t)a1, 73);
  v352[0] = &unk_1F25F9E78;
  uint64_t v353 = v352;
  uint64_t v242 = sub_1CBA1B180(v241, (uint64_t)v352);
  v350[0] = &unk_1F25F9EC0;
  v350[1] = 65;
  BOOL v351 = v350;
  uint64_t v243 = sub_1CBA1AD18(v242, (uint64_t)v350);
  int v244 = (char *)operator new(0x20uLL);
  *(void *)int v244 = &unk_1F25F9F08;
  *(_OWORD *)(v244 + 8) = xmmword_1CDB0DCA0;
  *((void *)v244 + 3) = 4194372;
  uint64_t v349 = v244;
  uint64_t v245 = sub_1CBA1AD18(v243, (uint64_t)v348);
  char v246 = (char *)operator new(0x58uLL);
  *(void *)char v246 = &unk_1F25F9F50;
  *(_OWORD *)(v246 + 8) = xmmword_1CDB0DD60;
  *(_OWORD *)(v246 + 24) = xmmword_1CDB0DF60;
  *(_OWORD *)(v246 + 40) = xmmword_1CDB0DCD0;
  *(_OWORD *)(v246 + 56) = xmmword_1CDB0DCE0;
  *(_OWORD *)(v246 + 72) = xmmword_1CDB0DCF0;
  uint64_t v347 = v246;
  uint64_t v247 = sub_1CBA1A5F0(v245, (uint64_t)v346);
  v344[0] = &unk_1F25F9698;
  unint64_t v345 = v344;
  uint64_t v248 = sub_1CBA1AD18(v247, (uint64_t)v344);
  uint64_t v249 = sub_1CBA1ADF0(v248, 1u, 0x81uLL);
  uint64_t v250 = sub_1CBA1B484(v249, 1u, 0x101uLL);
  sub_1CBA1A6C8(v250, 1u, 0);
  if (v345 == v344)
  {
    (*(void (**)(void *))(v344[0] + 32))(v344);
  }
  else if (v345)
  {
    (*(void (**)(void))(*v345 + 40))();
  }
  if (v347 == v346)
  {
    (*(void (**)(void *))(v346[0] + 32))(v346);
  }
  else if (v347)
  {
    (*(void (**)(void))(*v347 + 40))();
  }
  if (v349 == v348)
  {
    (*(void (**)(void *))(v348[0] + 32))(v348);
  }
  else if (v349)
  {
    (*(void (**)(void))(*v349 + 40))();
  }
  if (v351 == v350)
  {
    (*(void (**)(void *))(v350[0] + 32))(v350);
  }
  else if (v351)
  {
    (*(void (**)(void))(*v351 + 40))();
  }
  if (v353 == v352)
  {
    (*(void (**)(void *))(v352[0] + 32))(v352);
  }
  else if (v353)
  {
    (*(void (**)(void))(*v353 + 40))();
  }
  uint64_t v251 = 0;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DCD0;
  long long v384 = xmmword_1CDB0DCE0;
  long long v385 = xmmword_1CDB0DCF0;
  do
  {
    uint64_t v252 = v382.i64[v251];
    *(void *)&long long v410 = 75;
    *((void *)&v410 + 1) = v252;
    sub_1CBA1B104(v5, (uint64_t)&v410, 0);
    ++v251;
  }
  while (v251 != 8);
  uint64_t v253 = 0;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DF60;
  *(void *)&long long v384 = 2049;
  do
  {
    uint64_t v254 = v382.i64[v253];
    *(void *)&long long v410 = 0x10000004BLL;
    *((void *)&v410 + 1) = v254;
    sub_1CBA1B104(v5, (uint64_t)&v410, 0);
    ++v253;
  }
  while (v253 != 5);
  uint64_t v255 = 0;
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DF70;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DF80;
  do
  {
    uint64_t v256 = v382.i64[v255];
    *(void *)&long long v410 = 0x10000004BLL;
    *((void *)&v410 + 1) = v256;
    sub_1CBA1B104(v5, (uint64_t)&v410, 8);
    ++v255;
  }
  while (v255 != 4);
  uint64_t v257 = sub_1CC72D384((uint64_t)a1, 114);
  v342[0] = &unk_1F25F9F98;
  v342[1] = 9;
  uint64_t v343 = v342;
  uint64_t v258 = sub_1CBA1AD18(v257, (uint64_t)v342);
  v382.i64[0] = 129;
  sub_1CBA59D24(v258, 0, &v382, 1);
  if (v343 == v342)
  {
    (*(void (**)(void *))(v342[0] + 32))(v342);
  }
  else if (v343)
  {
    (*(void (**)(void))(*v343 + 40))();
  }
  v382.i64[0] = 0x8700000086;
  uint64_t v259 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 2);
  sub_1CD410694(v259);
  uint64_t v260 = sub_1CC72D384((uint64_t)a1, 51);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v261 = sub_1CD411620(v260, 0, &v382, 2, &v410, 2);
  *(void *)&long long v330 = 513;
  long long v332 = xmmword_1CDB0DD60;
  uint64_t v262 = sub_1CD411620(v261, 8, &v330, 1, &v332, 2);
  int v263 = (char *)operator new(0x28uLL);
  *(void *)int v263 = &unk_1F25F9FE0;
  *(_OWORD *)(v263 + 8) = xmmword_1CDB0DF60;
  *(_OWORD *)(v263 + 24) = xmmword_1CDC6D180;
  uint64_t v341 = v263;
  uint64_t v264 = sub_1CBA1AD18(v262, (uint64_t)v340);
  uint64_t v265 = sub_1CBA1ADF0(v264, 0, 0x81uLL);
  uint64_t v266 = sub_1CBA1B484(v265, 0, 0x101uLL);
  uint64_t v267 = sub_1CBA1ADF0(v266, 1u, 0x81uLL);
  uint64_t v268 = sub_1CBA1A6C8(v267, 0, 0);
  sub_1CBA1A6C8(v268, 1u, 0);
  if (v341 == v340)
  {
    (*(void (**)(void *))(v340[0] + 32))(v340);
  }
  else if (v341)
  {
    (*(void (**)(void))(*v341 + 40))();
  }
  uint64_t v269 = sub_1CC72D384((uint64_t)a1, 56);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v270 = sub_1CBA59D24(v269, 0, &v382, 3);
  sub_1CD410D80(v270);
  uint64_t v271 = sub_1CC72D384((uint64_t)a1, 57);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  v383.i64[0] = 513;
  uint64_t v272 = sub_1CBA59D24(v271, 0, &v382, 3);
  sub_1CD410D80(v272);
  *(void *)&long long v330 = 0x3500000034;
  uint64_t v273 = sub_1CC72D3AC((uint64_t)a1, (int *)&v330, 2);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  long long v410 = xmmword_1CDB0DD60;
  long long v332 = xmmword_1CDB0DD60;
  uint64_t v274 = sub_1CD412168(v273, 0, &v382, 2, &v410, 2, &v332, 2);
  sub_1CD410D80(v274);
  uint64_t v275 = sub_1CC72D384((uint64_t)a1, 54);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0E030;
  v383.i64[0] = 257;
  long long v410 = xmmword_1CDB0DD60;
  uint64_t v276 = sub_1CD411620(v275, 0, &v382, 3, &v410, 2);
  sub_1CD410D80(v276);
  uint64_t v277 = sub_1CC72D384((uint64_t)a1, 55);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DD60;
  int64x2_t v383 = (int64x2_t)xmmword_1CDC6D190;
  long long v384 = xmmword_1CDC6D1A0;
  long long v385 = xmmword_1CDC6D1B0;
  long long v410 = xmmword_1CDB0E030;
  *(void *)&long long v411 = 257;
  uint64_t v278 = sub_1CD411620(v277, 0, &v382, 8, &v410, 3);
  sub_1CD410D80(v278);
  uint64_t v279 = sub_1CC72D384((uint64_t)a1, 136);
  BOOL v280 = (char *)operator new(0x88uLL);
  *(void *)BOOL v280 = &unk_1F25FA028;
  *(_OWORD *)(v280 + 8) = xmmword_1CDC6D020;
  *(_OWORD *)(v280 + 24) = xmmword_1CDB0DCC0;
  *(_OWORD *)(v280 + 40) = xmmword_1CDB0DCA0;
  *(_OWORD *)(v280 + 56) = xmmword_1CDC6CFD0;
  *(_OWORD *)(v280 + 72) = xmmword_1CDC6D1C0;
  *(_OWORD *)(v280 + 88) = xmmword_1CDB0DE50;
  *(_OWORD *)(v280 + 104) = xmmword_1CDB0DE70;
  *(_OWORD *)(v280 + 120) = xmmword_1CDB0DFA0;
  uint64_t v339 = v280;
  uint64_t v281 = sub_1CBA1AD18(v279, (uint64_t)v338);
  uint64_t v282 = sub_1CBA1ADF0(v281, 0, 0x81uLL);
  uint64_t v283 = sub_1CBA1B484(v282, 0, 0x201uLL);
  uint64_t v284 = sub_1CBA1A6C8(v283, 0, 0);
  uint64_t v285 = sub_1CD410214(v284, 0, 0x400014uLL, 4194340);
  v336[0] = &unk_1F25FA070;
  v336[1] = 4194332;
  BOOL v337 = v336;
  sub_1CD617848(0, 0, v334);
  uint64_t v286 = sub_1CBA1A848(v285, (uint64_t)v336, (uint64_t)v334);
  uint64_t v287 = sub_1CD410214(v286, 0, 0x800014uLL, 8388644);
  uint64_t v288 = sub_1CD410214(v287, 0, 0x1000014uLL, 16777252);
  sub_1CD410214(v288, 0, 0x2000014uLL, 33554452);
  if (v335 == v334)
  {
    (*(void (**)(void *))(v334[0] + 32))(v334);
  }
  else if (v335)
  {
    (*(void (**)(void))(*v335 + 40))();
  }
  if (v337 == v336)
  {
    (*(void (**)(void *))(v336[0] + 32))(v336);
  }
  else if (v337)
  {
    (*(void (**)(void))(*v337 + 40))();
  }
  if (v339 == v338)
  {
    (*(void (**)(void *))(v338[0] + 32))(v338);
  }
  else if (v339)
  {
    (*(void (**)(void))(*v339 + 40))();
  }
  uint64_t v289 = sub_1CC72D384((uint64_t)a1, 77);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DCD0;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DFB0;
  long long v384 = xmmword_1CDB0DFC0;
  long long v385 = xmmword_1CDB0DF00;
  long long v386 = xmmword_1CDB0DCF0;
  long long v387 = xmmword_1CDC6D1D0;
  long long v388 = xmmword_1CDC6D1E0;
  long long v389 = xmmword_1CDC6D1F0;
  long long v390 = xmmword_1CDC6D160;
  long long v391 = xmmword_1CDC6D200;
  long long v392 = xmmword_1CDC6D210;
  long long v332 = xmmword_1CDB0DD60;
  unint64_t v333 = 0x8000000000000081;
  uint64_t v290 = sub_1CD411620(v289, 0, &v382, 22, &v332, 3);
  long long v410 = xmmword_1CDB0DC80;
  long long v411 = xmmword_1CDB0DC90;
  long long v412 = xmmword_1CDB0DFD0;
  long long v413 = xmmword_1CDB0DFE0;
  long long v330 = xmmword_1CDB0DC70;
  uint64_t v331 = 513;
  sub_1CD411620(v290, 8, &v410, 8, &v330, 3);
  uint64_t v291 = sub_1CC72D384((uint64_t)a1, 78);
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0DC80;
  int64x2_t v383 = (int64x2_t)xmmword_1CDB0DC90;
  long long v384 = xmmword_1CDB0DFD0;
  *(void *)&long long v385 = 4194436;
  *(void *)&long long v410 = 129;
  sub_1CD411620(v291, 0, &v382, 7, &v410, 1);
  uint64_t v292 = sub_1CC72D384((uint64_t)a1, 76);
  uint64_t v327 = (void (**)(void **))&unk_1F25FA0B8;
  long long v328 = xmmword_1CDB0DFF0;
  unsigned int v329 = (void **)&v327;
  uint64_t v293 = sub_1CBA1AD18(v292, (uint64_t)&v327);
  uint64_t v294 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v294 = &unk_1F25FA100;
  *(_OWORD *)(v294 + 8) = xmmword_1CDC6D0B0;
  *((_DWORD *)v294 + 6) = v192;
  *((void *)v294 + 4) = 257;
  *((_DWORD *)v294 + 10) = v318;
  uint64_t v326 = v294;
  uint64_t v295 = sub_1CBA1A5F0(v293, (uint64_t)v325);
  unint64_t v296 = v319;
  uint64_t v297 = sub_1CBA1ADF0(v295, 0, 0x101uLL);
  sub_1CBA1B484(v297, 0, v296);
  if (v326 == v325)
  {
    (*(void (**)(void *))(v325[0] + 32))(v325);
  }
  else if (v326)
  {
    (*(void (**)(void))(*v326 + 40))();
  }
  if (v329 == (void **)&v327)
  {
    v327[4]((void **)&v327);
  }
  else if (v329)
  {
    (*((void (**)(void))*v329 + 5))();
  }
  uint64_t v298 = sub_1CC72D384((uint64_t)a1, 74);
  uint64_t v299 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v299 = &unk_1F25FA148;
  *(_OWORD *)(v299 + 8) = xmmword_1CDB0DFF0;
  *(_OWORD *)(v299 + 24) = xmmword_1CDB0E000;
  *((void *)v299 + 5) = 0x8000000000800024;
  uint64_t v324 = v299;
  uint64_t v300 = sub_1CBA1AD18(v298, (uint64_t)v323);
  uint64_t v301 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v301 = &unk_1F25FA190;
  *(_OWORD *)(v301 + 8) = xmmword_1CDB0DD60;
  *(_OWORD *)(v301 + 24) = xmmword_1CDC6D220;
  *((void *)v301 + 5) = 0x8000000000800014;
  *((_DWORD *)v301 + 12) = v318;
  v322 = v301;
  uint64_t v302 = sub_1CBA1A5F0(v300, (uint64_t)v321);
  unint64_t v303 = v319;
  uint64_t v304 = sub_1CBA1ADF0(v302, 1u, 0x81uLL);
  sub_1CBA1B484(v304, 1u, v303);
  if (v322 == v321)
  {
    (*(void (**)(void *))(v321[0] + 32))(v321);
  }
  else if (v322)
  {
    (*(void (**)(void))(*v322 + 40))();
  }
  if (v324 == v323)
  {
    (*(void (**)(void *))(v323[0] + 32))(v323);
  }
  else if (v324)
  {
    (*(void (**)(void))(*v324 + 40))();
  }
  int64x2_t v382 = (int64x2_t)xmmword_1CDB0E010;
  uint64_t v305 = sub_1CC72D3AC((uint64_t)a1, v382.i32, 4);
  sub_1CD41059C(v305);
  uint64_t v306 = sub_1CC72D384((uint64_t)a1, 58);
  int64x2_t v382 = vdupq_n_s64(0x101uLL);
  uint64_t v307 = sub_1CBA59D24(v306, 0, &v382, 2);
  uint64_t v308 = sub_1CBA1ADF0(v307, 0, 0x101uLL);
  uint64_t v309 = sub_1CBA1B484(v308, 0, 0x101uLL);
  uint64_t v310 = sub_1CBA1ADF0(v309, 1u, 0x101uLL);
  uint64_t v311 = sub_1CBA1B484(v310, 1u, 0x101uLL);
  sub_1CD410440(v311, 0);
  uint64_t v312 = sub_1CC72D384((uint64_t)a1, 84);
  int64x2_t v382 = (int64x2_t)xmmword_1CDC6D0B0;
  *(void *)&long long v410 = 257;
  uint64_t v313 = sub_1CD411620(v312, 8, &v382, 2, &v410, 1);
  sub_1CD410D80(v313);
  uint64_t v314 = sub_1CC72D384((uint64_t)a1, 86);
  sub_1CD410694(v314);
  sub_1CC72E55C(v5);
  uint64_t v315 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  nullsub_1953(a1, v315 + 8);
  return a1;
}

uint64_t sub_1CBB97188(uint64_t a1, unint64_t *a2, uint64_t a3, llvm::IntegerType *****a4)
{
  uint64_t v5 = (llvm::MachineInstr *)a2;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v89 = (uint64_t)a4[1];
  uint64_t v6 = a2 + 6;
  unint64_t v7 = a2[6];
  if (v7 < 8)
  {
    uint64_t v10 = 0;
  }
  else
  {
    if ((v7 & 7) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      a2[6] = v7;
      unsigned int v11 = (int *)(a2 + 7);
      uint64_t v10 = (int *)(a2 + 6);
      goto LABEL_13;
    }
    uint64_t v8 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((a2[6] & 7) != 3 || v8 == 0)
    {
      uint64_t v10 = 0;
LABEL_17:
      if ((v7 & 7) != 0)
      {
        unint64_t v14 = 0;
        if ((v7 & 7) == 3 && (uint64_t v15 = (int *)(v7 & 0xFFFFFFFFFFFFFFF8), (v7 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v16 = *v15;
          unint64_t v14 = v15 + 2;
        }
        else
        {
          uint64_t v16 = 0;
        }
      }
      else
      {
        v7 &= 0xFFFFFFFFFFFFFFF8;
        *uint64_t v6 = v7;
        uint64_t v16 = 1;
        unint64_t v14 = (int *)(a2 + 6);
      }
      goto LABEL_22;
    }
    uint64_t v13 = *v8;
    uint64_t v10 = v8 + 2;
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_17;
    }
    unsigned int v11 = &v10[2 * v12];
LABEL_13:
    while ((*(_WORD *)(*(void *)v10 + 36) & 0xF00) == 0)
    {
      v10 += 2;
      if (v10 == v11)
      {
        uint64_t v10 = v11;
        break;
      }
    }
    if (v7 >= 8) {
      goto LABEL_17;
    }
  }
  unint64_t v14 = 0;
  uint64_t v16 = 0;
LABEL_22:
  if (v10 != &v14[2 * v16] && *(void *)v10) {
    return 0;
  }
  if ((v7 & 7) != 0)
  {
    unint64_t v17 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v17 = v7 & 0xFFFFFFFFFFFFFFF8;
    *uint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
  }
  char v18 = *(unsigned char *)(v17 + 34);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((*(void *)(v17 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v21 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v17 + 24)) + 7) >> 3;
    if (v20 == 1) {
  }
    }
  else
  {
    unint64_t v21 = -1;
  }
  sub_1CBB910AC((uint64_t)v98, (uint64_t)v5, a3);
  unint64_t v23 = v101;
  if ((v101 & 0xFFFFFFFFFFFFFFF9) != 0 && (v101 & 6) == 4)
  {
    char v24 = 3;
    if ((v101 & 1) == 0) {
      char v24 = 19;
    }
    if ((v101 & 0x8000000000000000 | (8 * (v101 >> v24))) == 0x40)
    {
      if ((v101 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v22);
        unint64_t v23 = v101;
      }
      if ((unsigned __int16)(v23 >> 3) <= 4u)
      {
        uint64_t v77 = (1 << *(unsigned char *)(v103 + 34)) | *(void *)(v103 + 8);
        if ((v77 & -v77) == 1) {
          return 0;
        }
      }
    }
  }
  uint64_t result = 0;
  int v26 = __clz(((1 << v18) | v19) & -((1 << v18) | v19));
  if ((63 - v26) <= 1u && (1 << (63 - v26)) % v21)
  {
    BOOL v27 = v26 == 63 || v21 >= 9;
    if (!v27) {
      return 0;
    }
    int v28 = v99;
    uint64_t v29 = v100;
    unint64_t v96 = v102;
    unint64_t v97 = v23;
    uint64_t v84 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v96);
    if (v30 == 1)
    {
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_44;
      }
    }
    else if ((v29 & 0x80000000) != 0)
    {
LABEL_44:
      uint64_t v31 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
LABEL_45:
      uint64_t v32 = *v31;
      int v90 = v29;
      if (v32)
      {
        if (*(unsigned char *)(v32 + 3)) {
          goto LABEL_47;
        }
        uint64_t v32 = *(void *)(v32 + 24);
        if (!v32) {
          goto LABEL_123;
        }
        if (*(unsigned char *)(v32 + 3))
        {
LABEL_47:
          uint64_t v33 = *(void *)(v32 + 8);
          if (!v33) {
            goto LABEL_51;
          }
          int v34 = **(unsigned __int16 **)(v33 + 16);
          if (v34 != 193 && v34 != 45) {
            goto LABEL_51;
          }
          sub_1CC73C210(*(_DWORD *)(*(void *)(v33 + 32) + 68), a3, (uint64_t)v109);
          if (!(_BYTE)v110) {
            goto LABEL_51;
          }
          if (LODWORD(v109[1]) < 0x41)
          {
            char v83 = 0;
            uint64_t v82 = (uint64_t)v109[0] << -(uint64_t)LODWORD(v109[1]) >> -(uint64_t)LODWORD(v109[1]);
            int v81 = *(_DWORD *)(*(void *)(v33 + 32) + 36);
            goto LABEL_52;
          }
          if (v109[0]) {
            MEMORY[0x1D25D9CB0](v109[0], 0x1000C8000313F17);
          }
LABEL_123:
          uint64_t v82 = 0;
          int v81 = 0;
          char v83 = 1;
          goto LABEL_52;
        }
      }
LABEL_51:
      uint64_t v82 = 0;
      int v81 = 0;
      char v83 = 1;
LABEL_52:
      uint64_t v106 = v108;
      uint64_t v107 = 0x400000000;
      if (v21)
      {
        uint64_t v80 = v5;
        unint64_t v86 = v17;
        unint64_t v87 = v21;
        int v78 = v28;
        unint64_t v79 = v23;
        unint64_t v35 = 0;
        unsigned int v36 = 0;
        unint64_t v85 = v29 & 0x7FFFFFFF;
        uint64_t v88 = (void *)(a3 + 424);
        do
        {
          unsigned int IncompleteVirtualRegister = v29;
          if (v36)
          {
            uint64_t v38 = 0;
            if ((v29 & 0x80000000) != 0 && v85 < *(unsigned int *)(a3 + 432)) {
              uint64_t v38 = *(void *)(*v88 + 8 * v85);
            }
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
            unint64_t v39 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(a3 + 24) + 16 * v39) = 4;
            unint64_t v40 = *(unsigned int *)(a3 + 432);
            if (v39 >= v40)
            {
              unint64_t v41 = v39 + 1;
              uint64_t v42 = *(void *)(a3 + 440);
              if (v39 >= *(unsigned int *)(a3 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v43 = *(_DWORD *)(a3 + 432);
              if (v41 != v40)
              {
                uint64_t v44 = (void *)(*v88 + 8 * *(unsigned int *)(a3 + 432));
                uint64_t v45 = ~v39 + v40;
                do
                {
                  *v44++ = v42;
                  BOOL v27 = __CFADD__(v45++, 1);
                }
                while (!v27);
                int v43 = *(_DWORD *)(a3 + 432);
              }
              *(_DWORD *)(a3 + 432) = v43 + v41 - v40;
            }
            *(void *)(*(void *)(a3 + 424) + 8 * v39) = v38;
            uint64_t v46 = *(void *)(a3 + 8);
            if (v46) {
              (*(void (**)(uint64_t, void))(*(void *)v46 + 24))(v46, IncompleteVirtualRegister);
            }
            v109[0] = (void *)((8 * v84) | 1);
            LODWORD(v109[1]) = 0;
            uint64_t v47 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], v84);
            if (v83)
            {
              uint64_t v48 = llvm::ConstantInt::get(v47, v35, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, void **, void *))(*a4)[2])(a4, v109, v48);
              int v50 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
              LODWORD(v104) = IncompleteVirtualRegister;
              DWORD2(v104) = 1;
              LODWORD(v109[0]) = v90;
            }
            else
            {
              uint64_t v51 = llvm::ConstantInt::get(v47, v35 + v82, (const llvm::APInt *)1);
              ((void (*)(llvm::IntegerType *****, void **, void *))(*a4)[2])(a4, v109, v51);
              int v50 = *(_DWORD *)(*(void *)(v52 + 32) + 4);
              LODWORD(v104) = IncompleteVirtualRegister;
              DWORD2(v104) = 1;
              LODWORD(v109[0]) = v81;
            }
            LODWORD(v110) = 0;
            DWORD2(v110) = v50;
            int v111 = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a4)[4])(a4, 193, &v104, 1, v109, 2, 0);
          }
          unsigned int v53 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
          unint64_t v54 = v53 & 0x7FFFFFFF;
          *(void *)(*(void *)(a3 + 24) + 16 * v54) = 4;
          unint64_t v55 = *(unsigned int *)(a3 + 432);
          if (v54 >= v55)
          {
            unint64_t v56 = v54 + 1;
            uint64_t v57 = *(void *)(a3 + 440);
            if (v54 >= *(unsigned int *)(a3 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v58 = *(_DWORD *)(a3 + 432);
            if (v56 != v55)
            {
              uint64_t v59 = (void *)(*v88 + 8 * *(unsigned int *)(a3 + 432));
              uint64_t v60 = ~v54 + v55;
              do
              {
                *v59++ = v57;
                BOOL v27 = __CFADD__(v60++, 1);
              }
              while (!v27);
              int v58 = *(_DWORD *)(a3 + 432);
            }
            *(_DWORD *)(a3 + 432) = v58 + v56 - v55;
          }
          *(void *)(*(void *)(a3 + 424) + 8 * v54) = 65;
          uint64_t v61 = *(void *)(a3 + 8);
          LODWORD(v29) = v90;
          if (v61) {
            (*(void (**)(uint64_t, void))(*(void *)v61 + 24))(v61, v53);
          }
          sub_1CB8F0264((uint64_t *)v86, v35, (uint64_t)&v104);
          long long v94 = v104;
          uint64_t v95 = v105;
          __int16 v62 = *(_WORD *)(v86 + 32);
          *(_OWORD *)uint64_t v109 = 0u;
          long long v110 = 0u;
          MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v89, (uint64_t)&v94, v62, 1, 0, (long long *)v109, 0, 1, 0, 0, 0);
          unsigned int v92 = v53;
          int v93 = 1;
          LODWORD(v109[0]) = IncompleteVirtualRegister;
          LODWORD(v110) = 0;
          sub_1CC737934(a4, 0x5Au, (int *)&v92, (int *)v109, MachineMemOperand);
          if (v107 >= (unint64_t)HIDWORD(v107)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v106 + v107) = v53;
          unint64_t v64 = (v107 + 1);
          LODWORD(v107) = v107 + 1;
          unint64_t v35 = ++v36;
        }
        while (v87 > v36);
        uint64_t v65 = (int *)v106;
        unint64_t v23 = v79;
        uint64_t v5 = v80;
        int v28 = v78;
        LOWORD(v21) = v87;
      }
      else
      {
        unint64_t v64 = 0;
        uint64_t v65 = (int *)v108;
      }
      *(void *)&long long v104 = (8 * (unsigned __int16)v21) | 0x400004;
      DWORD2(v104) = 0;
      v109[0] = &v110;
      v109[1] = (void *)0x800000000;
      if (v64 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v64)
      {
        uint64_t v66 = 0;
        uint64_t v67 = 4 * v64;
        do
        {
          int v68 = *v65++;
          uint64_t v69 = (_DWORD *)((char *)&v110 + v66);
          *uint64_t v69 = v68;
          v69[4] = 0;
          v66 += 24;
          v67 -= 4;
        }
        while (v67);
        int v70 = (int)v109[1];
      }
      else
      {
        int v70 = 0;
      }
      LODWORD(v109[1]) = v70 + v64;
      uint64_t v71 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, long long *))(*a4)[4])(a4, 77, &v104, 1, &v110);
      uint64_t v73 = v72;
      if (v109[0] != &v110) {
        free(v109[0]);
      }
      if ((v23 & 0xFFFFFFFFFFFFFFF9) != 0 && (v23 & 6) == 2)
      {
        unsigned int v92 = v28;
        int v93 = 1;
        sub_1CB8F1DC4(&v97);
        if (v74 == 1) {
        *(void *)&long long v104 = v71;
        }
        *((void *)&v104 + 1) = v73;
        LODWORD(v105) = 1;
        v109[0] = (void *)sub_1CC7382B0((uint64_t)a4);
        v109[1] = v75;
        LODWORD(v110) = 1;
        uint64_t v76 = (uint64_t)a4;
      }
      else
      {
        LODWORD(v104) = v28;
        DWORD2(v104) = 1;
        v109[0] = v71;
        v109[1] = v73;
        LODWORD(v110) = 1;
        uint64_t v76 = (uint64_t)a4;
      }
      sub_1CC7382B0(v76);
      llvm::MachineInstr::eraseFromParent(v5);
      if (v106 != v108) {
        free(v106);
      }
      return 1;
    }
    uint64_t v31 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v29);
    goto LABEL_45;
  }
  return result;
}

uint64_t sub_1CBB97C1C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::IntegerType *****a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = (uint64_t)a4[1];
  unint64_t v7 = (unint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 < 8)
  {
    unsigned int v11 = 0;
  }
  else
  {
    if ((v8 & 7) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(a2 + 48) = v8;
      uint64_t v12 = a2 + 56;
      unsigned int v11 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    unsigned int v9 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((*(void *)(a2 + 48) & 7) != 3 || v9 == 0)
    {
      unsigned int v11 = 0;
LABEL_17:
      if ((v8 & 7) != 0)
      {
        uint64_t v15 = 0;
        if ((v8 & 7) == 3 && (uint64_t v16 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v17 = *v16;
          uint64_t v15 = v16 + 2;
        }
        else
        {
          uint64_t v17 = 0;
        }
      }
      else
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
        unint64_t *v7 = v8;
        uint64_t v17 = 1;
        uint64_t v15 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    uint64_t v14 = *v9;
    unsigned int v11 = v9 + 2;
    uint64_t v13 = v14;
    if (!v14) {
      goto LABEL_17;
    }
    uint64_t v12 = (uint64_t)&v11[2 * v13];
LABEL_13:
    while ((*(_WORD *)(*(void *)v11 + 36) & 0xF00) == 0)
    {
      v11 += 2;
      if (v11 == (int *)v12)
      {
        unsigned int v11 = (int *)v12;
        break;
      }
    }
    if (v8 >= 8) {
      goto LABEL_17;
    }
  }
  uint64_t v15 = 0;
  uint64_t v17 = 0;
LABEL_22:
  if (v11 != &v15[2 * v17] && *(void *)v11) {
    return 0;
  }
  if ((v8 & 7) != 0)
  {
    unint64_t v18 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFF8;
    unint64_t *v7 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  char v19 = *(unsigned char *)(v18 + 34);
  uint64_t v20 = *(void *)(v18 + 8);
  if ((*(void *)(v18 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v22 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v18 + 24)) + 7) >> 3;
    if (v21 == 1) {
  }
    }
  else
  {
    unint64_t v22 = -1;
  }
  sub_1CBB910AC((uint64_t)v82, a2, a3);
  unsigned int v24 = v85;
  if ((v85 & 0xFFFFFFFFFFFFFFF9) != 0 && (v85 & 6) == 4)
  {
    char v25 = 3;
    if ((v85 & 1) == 0) {
      char v25 = 19;
    }
    if ((v85 & 0x8000000000000000 | (8 * (v85 >> v25))) == 0x40)
    {
      if ((v85 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
        unsigned int v24 = v85;
      }
      if ((unsigned __int16)(v24 >> 3) <= 4u)
      {
        uint64_t v50 = (1 << *(unsigned char *)(v87 + 34)) | *(void *)(v87 + 8);
        if ((v50 & -v50) == 1) {
          return 0;
        }
      }
    }
  }
  uint64_t result = 0;
  int v27 = __clz(((1 << v19) | v20) & -((1 << v19) | v20));
  if ((63 - v27) <= 1u && (1 << (63 - v27)) % v22)
  {
    if (v27 != 63 && v22 < 9) {
      return 0;
    }
    int v29 = v83;
    unsigned int v30 = v84;
    unint64_t v81 = v86;
    uint64_t v32 = sub_1CB8F1DC4(&v81);
    if (v31 == 1) {
    uint64_t v33 = (8 * v32) | 1;
    }
    unsigned int v80 = 0;
    *(void *)&long long v98 = v33;
    *((void *)&v98 + 1) = &v80;
    LODWORD(__b) = v30;
    if (sub_1CBA65370((uint64_t)&v98, a3, (unsigned int *)&__b)) {
      uint64_t v34 = v80;
    }
    else {
      uint64_t v34 = v30;
    }
    uint64_t v72 = v34;
    uint64_t v69 = (llvm::MachineInstr *)a2;
    uint64_t v74 = (llvm::LLVMContext *)v32;
    if ((v85 & 0xFFFFFFFFFFFFFFF9) != 0 && (v85 & 6) == 2)
    {
      __b = (void *)(((v22 & 0x1FFFFFFF) << 6) | 1);
      int v92 = 0;
      LODWORD(v98) = v29;
      LODWORD(v99) = 0;
      sub_1CC7382B0((uint64_t)a4);
      int v29 = *(_DWORD *)(*(void *)(v35 + 32) + 4);
    }
    __b = (void *)((8 * (unsigned __int16)v22) | 0x400004);
    int v92 = 0;
    LODWORD(v98) = v29;
    LODWORD(v99) = 0;
    sub_1CC7382B0((uint64_t)a4);
    int v37 = *(_DWORD *)(*(void *)(v36 + 32) + 4);
    uint64_t v95 = v97;
    uint64_t v96 = 0x800000000;
    uint64_t v38 = (uint64_t *)v94;
    __b = v94;
    int v93 = 8;
    if (v22 >= 9)
    {
      int v92 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v22) {
      memset_pattern16(v94, &unk_1CDB0E0B0, 8 * v22);
    }
    int v92 = v22;
    LODWORD(v78) = v37;
    LODWORD(v79) = 0;
    *(void *)&long long v98 = &v99;
    *((void *)&v98 + 1) = 0x800000000;
    if (v22 >= 9uLL) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v22)
    {
      uint64_t v39 = 8 * v22;
      unint64_t v40 = &v99;
      do
      {
        uint64_t v41 = *v38++;
        *(void *)unint64_t v40 = v41;
        *((_DWORD *)v40++ + 2) = 0;
        v39 -= 8;
      }
      while (v39);
      int v42 = DWORD2(v98);
      int v43 = (long long *)v98;
    }
    else
    {
      int v42 = 0;
      int v43 = &v99;
    }
    DWORD2(v98) = v42 + v22;
    ((void (*)(llvm::IntegerType *****, uint64_t, long long *))(*a4)[4])(a4, 74, v43);
    uint64_t v45 = v44;
    if ((long long *)v98 == &v99)
    {
      if (!v22) {
        goto LABEL_77;
      }
    }
    else
    {
      free((void *)v98);
      if (!v22) {
        goto LABEL_77;
      }
    }
    uint64_t v46 = 0;
    unsigned int v47 = 1;
    unsigned int v48 = v96;
    do
    {
      if (v48 >= HIDWORD(v96)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v95 + v48) = *(_DWORD *)(*(void *)(v45 + 32) + 32 * v46 + 4);
      unsigned int v48 = v96 + 1;
      LODWORD(v96) = v96 + 1;
      uint64_t v46 = v47;
      BOOL v49 = v22 > v47++;
    }
    while (v49);
LABEL_77:
    if ((v72 & 0x80000000) != 0) {
      uint64_t v51 = (uint64_t *)(*(void *)(a3 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v51 = (uint64_t *)(*(void *)(a3 + 272) + 8 * v72);
    }
    uint64_t v52 = *v51;
    if (v52)
    {
      if (*(unsigned char *)(v52 + 3) & 1) != 0 || (uint64_t v52 = *(void *)(v52 + 24)) != 0 && (*(unsigned char *)(v52 + 3))
      {
        uint64_t v53 = *(void *)(v52 + 8);
        if (v53)
        {
          int v54 = **(unsigned __int16 **)(v53 + 16);
          if (v54 == 193 || v54 == 45)
          {
            sub_1CC73C210(*(_DWORD *)(*(void *)(v53 + 32) + 68), a3, (uint64_t)&v98);
            if ((_BYTE)v99)
            {
              if (DWORD2(v98) < 0x41)
              {
                char v73 = 0;
                uint64_t v71 = (uint64_t)((void)v98 << -(uint64_t)DWORD2(v98)) >> -(uint64_t)DWORD2(v98);
                int v70 = *(_DWORD *)(*(void *)(v53 + 32) + 36);
                if (v22)
                {
LABEL_86:
                  unint64_t v55 = 0;
                  unsigned int v56 = 1;
                  do
                  {
                    if (v56 != 1)
                    {
                      *(void *)&long long v98 = v33;
                      DWORD2(v98) = 0;
                      uint64_t v57 = (llvm::ConstantInt *)llvm::IntegerType::get(***a4[1], v74);
                      if (v73)
                      {
                        int v58 = llvm::ConstantInt::get(v57, v55, (const llvm::APInt *)1);
                        uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v98, v58);
                        uint64_t v61 = v60;
                        LODWORD(v78) = v72;
                      }
                      else
                      {
                        __int16 v62 = llvm::ConstantInt::get(v57, v55 + v71, (const llvm::APInt *)1);
                        uint64_t v59 = ((uint64_t (*)(llvm::IntegerType *****, long long *, void *))(*a4)[2])(a4, &v98, v62);
                        uint64_t v61 = v63;
                        LODWORD(v78) = v70;
                      }
                      LODWORD(v79) = 0;
                      uint64_t v64 = sub_1CC7382B0((uint64_t)a4);
                      uint64_t v88 = v33;
                      LODWORD(v89) = 0;
                      *(void *)&long long v98 = v64;
                      *((void *)&v98 + 1) = v65;
                      LODWORD(v99) = 1;
                      *((void *)&v99 + 1) = v59;
                      uint64_t v100 = v61;
                      int v101 = 1;
                      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))(*a4)[4])(a4, 45, &v88, 1, &v98, 2, 0);
                    }
                    sub_1CB8F0264((uint64_t *)v18, v55, (uint64_t)&v78);
                    long long v76 = v78;
                    uint64_t v77 = v79;
                    __int16 v66 = *(_WORD *)(v18 + 32);
                    long long v98 = 0u;
                    long long v99 = 0u;
                    MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v75, (uint64_t)&v76, v66, 1, 0, &v98, 0, 1, 0, 0, 0);
                    LODWORD(v98) = *((_DWORD *)v95 + v55);
                    LODWORD(v99) = 0;
                    uint64_t v88 = sub_1CC7382B0((uint64_t)a4);
                    uint64_t v89 = v68;
                    int v90 = 1;
                    sub_1CC737D1C(a4, (int *)&v98, (int *)&v88, MachineMemOperand);
                    unint64_t v55 = v56;
                    BOOL v49 = v22 > v56++;
                  }
                  while (v49);
                }
LABEL_93:
                llvm::MachineInstr::eraseFromParent(v69);
                if (__b != v94) {
                  free(__b);
                }
                if (v95 != v97) {
                  free(v95);
                }
                return 1;
              }
              if ((void)v98) {
                MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
    uint64_t v71 = 0;
    int v70 = 0;
    char v73 = 1;
    if (v22) {
      goto LABEL_86;
    }
    goto LABEL_93;
  }
  return result;
}

uint64_t sub_1CBB98508()
{
  MEMORY[0x1F4188790]();
  uint64_t v1 = v0;
  uint64_t v1895 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *v2;
  size_t v4 = (size_t)v2[1];
  uint64_t v5 = (uint64_t)(*v2)[3];
  uint64_t v6 = *(void **)(*(void *)(*(void *)(v0 + 24) + 32) + 16);
  v1851[0] = &unk_1F25FDCB8;
  v1851[1] = v6;
  *((void *)&v1852[0] + 1) = v1851;
  unsigned int v7 = sub_1CBD854F8((uint64_t)v1851);
  if (*((void ***)&v1852[0] + 1) == v1851)
  {
    (*((void (**)(void **))v1851[0] + 4))(v1851);
  }
  else if (*((void *)&v1852[0] + 1))
  {
    (*(void (**)(void))(**((void **)&v1852[0] + 1) + 40))();
  }
  uint64_t v1766 = v5;
  v1770 = v3;
  uint64_t v8 = *(unsigned int *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 32);
  size_t v1757 = v4;
  unsigned int v1750 = v7;
  if (v8)
  {
    uint64_t v10 = 0;
    unsigned int v11 = *(unsigned __int8 **)(v1 + 32);
    while (1)
    {
      int v12 = *v11;
      v11 += 32;
      if (v12 == 17) {
        break;
      }
      if (v8 == ++v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v10) = -1;
  }
  uint64_t v13 = *(unsigned int *)(v9 + 32 * v10 + 16);
  int v1787 = *(_DWORD *)(v9 + 32 * v10 + 16);
  v1710 = *(llvm::ConstantFP *****)(*(void *)(v1 + 24) + 32);
  uint64_t v14 = v1710[1];
  LODWORD(v15) = v14 + 1328;
  uint64_t v16 = ((uint64_t (*)(llvm::ConstantFP ***))v14[166][22])(v14 + 166);
  uint64_t v1708 = ((uint64_t (*)(llvm::ConstantFP ***))v14[166][13])(v14 + 166);
  ((void (*)(llvm::ConstantFP ***))v14[166][23])(v14 + 166);
  uint64_t v17 = sub_1CBB35BE4((uint64_t)(v14 + 166));
  int v1786 = v17;
  v3[5] = *(unsigned __int8 **)(v1 + 24);
  v3[6] = (unsigned __int8 *)v1;
  unint64_t v18 = (unsigned __int8 **)(v1 + 56);
  char v19 = v1770 + 4;
  if ((unsigned __int8 **)(v1 + 56) != v1770 + 4)
  {
    uint64_t v20 = *v19;
    if (!*v19) {
      goto LABEL_10;
    }
    int v48 = *v20;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v103 = *v19;
      }
      else {
        uint64_t v103 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *((void *)v20 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v50 = (unint64_t)(v103 + 8);
    }
    else if ((v20[1] & 0x7F) != 2 && !*((_DWORD *)v20 + 3) {
           || (uint64_t v49 = *((void *)v20 + 2), (v49 & 4) == 0)
    }
           || (unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_10:
      unint64_t v21 = *v18;
      *char v19 = *v18;
      if (v21) {
        llvm::MetadataTracking::track((uint64_t)v19, v21, 2);
      }
      goto LABEL_12;
    }
    v1851[0] = v1770 + 4;
    sub_1CC5FA668(v50 + 16, v1851);
    goto LABEL_10;
  }
LABEL_12:
  v1720 = (llvm::MachineInstr *)v1;
  if ((int)v13 <= 2516)
  {
    if (((v13 - 253) > 0x1B || ((1 << (v13 + 3)) & 0x8000121) == 0)
      && ((v13 - 140) > 0x3E || ((1 << (v13 + 116)) & 0x4020000000000001) == 0))
    {
      goto LABEL_29;
    }
  }
  else if (v13 != 2517 && v13 != 2628 && v13 != 2526)
  {
    goto LABEL_29;
  }
  int v24 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
  if (v24 < 0
    && (v24 & 0x7FFFFFFFu) < *(_DWORD *)(v1766 + 432)
    && *(void *)(*(void *)(v1766 + 424) + 8 * (v24 & 0x7FFFFFFF)) == 0x8000000000000081)
  {
    v1851[0] = (void *)257;
    LODWORD(v1851[1]) = 0;
    uint64_t v131 = sub_1CD62DFF0(v1770, v13, (long long *)v1851, 1, 0);
    uint64_t v133 = (llvm::MachineInstr *)v132;
    *(_WORD *)(v132 + 44) = *(_WORD *)(v132 + 44) & 0xC | *(_WORD *)(v1 + 44) & 0xFFF3;
    v1770[5] = *(unsigned __int8 **)(v132 + 24);
    v1770[6] = (unsigned __int8 *)v132;
    unint64_t v134 = (v10 + 1);
    if (v134 < *(_DWORD *)(v1 + 40))
    {
      uint64_t v135 = (32 * v134) | 4;
      do
      {
        int v136 = *(_DWORD *)(*(void *)(v1 + 32) + v135);
        v1805[0] = (llvm::MachineInstr *)257;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v136;
        LODWORD(v1852[0]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
         + 4))(v1770, 178, v1805, 1, v1851, 1, *(unsigned __int16 *)(v1 + 44) | 0x100000000);
        int v138 = *(_DWORD *)(*(void *)(v137 + 32) + 4);
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v138;
        LODWORD(v1851[0]) = 0;
        v1852[0] = 0uLL;
        llvm::MachineInstr::addOperand(v133, v131, (const llvm::MachineOperand *)v1851);
        ++v134;
        v135 += 32;
      }
      while (v134 < *(unsigned int *)(v1 + 40));
    }
    v1770[5] = *(unsigned __int8 **)(v1 + 24);
    v1770[6] = (unsigned __int8 *)v1;
    LODWORD(v1805[0]) = v24;
    LODWORD(v1805[1]) = 1;
    v1851[0] = v131;
    v1851[1] = v133;
    LODWORD(v1852[0]) = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
     + 4))(v1770, 179, v1805, 1, v1851, 1, *(unsigned __int16 *)(v1 + 44) | 0x100000000);
    char v419 = (llvm::MachineInstr *)v1;
LABEL_581:
    llvm::MachineInstr::eraseFromParent(v419);
    return 1;
  }
LABEL_29:
  v1705 = (void *)v16;
  uint64_t v25 = 1;
  if ((int)v13 > 279)
  {
    switch((int)v13)
    {
      case 1269:
      case 2107:
      case 2108:
      case 2132:
      case 2139:
      case 2145:
      case 2146:
      case 2147:
      case 2150:
      case 2151:
      case 2152:
      case 2154:
      case 2155:
      case 2156:
      case 2167:
      case 2169:
      case 2170:
      case 2173:
      case 2174:
      case 2175:
      case 2176:
      case 2305:
      case 2306:
      case 2307:
      case 2308:
      case 2365:
      case 2408:
      case 2409:
      case 2410:
      case 2423:
      case 2444:
      case 2445:
      case 2446:
      case 2484:
      case 2485:
      case 2486:
      case 2491:
      case 2586:
      case 2587:
      case 2665:
      case 2666:
      case 2667:
      case 2669:
      case 2670:
      case 2671:
      case 2672:
      case 2673:
      case 2674:
      case 2675:
      case 2676:
      case 2677:
      case 2678:
      case 2679:
      case 2732:
      case 2769:
      case 2789:
      case 2790:
      case 2794:
      case 2795:
      case 2796:
      case 2807:
      case 2808:
      case 2809:
      case 2810:
      case 2814:
      case 2815:
      case 2816:
      case 2820:
      case 2822:
      case 2841:
      case 2848:
        uint64_t v32 = (llvm::MachineInstr *)v1;
        int v33 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        if (v33 < 0)
        {
          uint64_t v36 = (void *)v1766;
          uint64_t v35 = (llvm::MachineInstr *)v1770;
          if ((v33 & 0x7FFFFFFFu) >= *(_DWORD *)(v1766 + 432)) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = *(void **)(*(void *)(v1766 + 424) + 8 * (v33 & 0x7FFFFFFF));
          }
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v36 = (void *)v1766;
          uint64_t v35 = (llvm::MachineInstr *)v1770;
        }
        v1890 = v34;
        v1805[0] = (llvm::MachineInstr *)&v1786;
        v1805[1] = v35;
        uint64_t v81 = 35;
        v1806[0] = (uint64_t)&v1787;
        v1806[1] = (uint64_t)&v1890;
        if ((v13 - 2789) <= 5 && ((1 << (v13 + 27)) & 0x23) != 0)
        {
          if (v13 == 2794) {
            uint64_t v82 = 72;
          }
          else {
            uint64_t v82 = 74;
          }
          if (v13 == 2794) {
            uint64_t v83 = 73;
          }
          else {
            uint64_t v83 = 75;
          }
          sub_1CBBAB2E4((unsigned int **)v1805, v82);
          uint64_t v85 = v84;
          unint64_t v86 = (void *)sub_1CBBAB2E4((unsigned int **)v1805, v83);
          v1877[0] = (void *)257;
          LODWORD(v1877[1]) = 0;
          v1851[0] = v86;
          v1851[1] = v87;
          LODWORD(v1852[0]) = 1;
          (*(void (**)(llvm::MachineInstr *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v35 + 32))(v35, 126, v1877, 1, v1851, 1, 0);
          v1877[0] = (void *)513;
          LODWORD(v1877[1]) = 0;
          LODWORD(v1851[0]) = *(_DWORD *)(*(void *)(v85 + 32) + 4);
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = *(_DWORD *)(*(void *)(v88 + 32) + 4);
          DWORD2(v1852[1]) = 0;
          uint64_t v89 = (void *)(*(uint64_t (**)(llvm::MachineInstr *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v35 + 32))(v35, 76, v1877, 1, v1851, 2, 0);
          LODWORD(v1877[0]) = v33;
          LODWORD(v1877[1]) = 1;
          v1851[0] = v89;
          v1851[1] = v90;
          LODWORD(v1852[0]) = 1;
          sub_1CC7382B0((uint64_t)v35);
LABEL_127:
          uint64_t v91 = v32;
LABEL_1608:
          llvm::MachineInstr::eraseFromParent(v91);
          return 1;
        }
        if (v13 == 2445) {
          goto LABEL_131;
        }
        if (v13 == 2446)
        {
          uint64_t v81 = 36;
LABEL_131:
          int v92 = (void *)sub_1CBBAB2E4((unsigned int **)v1805, v81);
          v1877[0] = v1890;
          LODWORD(v1877[1]) = 0;
          v1851[0] = v92;
          v1851[1] = v93;
          LODWORD(v1852[0]) = 1;
          long long v94 = (void *)(*(uint64_t (**)(llvm::MachineInstr *, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v35 + 32))(v35, 183, v1877, 1, v1851, 1, 0);
          uint64_t v96 = v95;
          unint64_t v97 = ****(llvm::ConstantFP *****)(*((void *)v1720 + 3) + 32);
          LODWORD(v1851[1]) = 32;
          v1851[0] = (void *)1056964608;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1877, (const llvm::APInt **)v1851);
          v1851[1] = v1877[0];
          *(void **)&v1852[0] = v1877[1];
          DWORD2(v1852[0]) = v1878;
          BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | BYTE4(v1878) & 0xF;
          long long v99 = llvm::ConstantFP::get(v97, (llvm::LLVMContext *)v1851, v98);
          if (v1851[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v1852);
          }
          else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
          {
            MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
          }
          v1851[0] = v1890;
          LODWORD(v1851[1]) = 0;
          uint64_t v100 = (*(uint64_t (**)(llvm::MachineInstr *, void **, const llvm::detail::DoubleAPFloat *))(*(void *)v35 + 24))(v35, v1851, v99);
          v1877[0] = v1890;
          LODWORD(v1877[1]) = 0;
          v1851[0] = v94;
          v1851[1] = v96;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v100;
          *(void *)&v1852[1] = v101;
          DWORD2(v1852[1]) = 1;
          uint64_t v32 = v1720;
          (*(void (**)(llvm::MachineInstr *, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 163, v1877, 1, v1851, 2, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
        }
        else
        {
          uint64_t v107 = sub_1CBBAAC30(v13);
          sub_1CBBAB2E4((unsigned int **)v1805, v107);
        }
        unsigned int v108 = *(_DWORD *)(*(void *)(v102 + 32) + 4);
        uint64_t v109 = v36;
        long long v110 = v32;
        uint64_t v111 = v1757;
        goto LABEL_150;
      case 1270:
      case 1271:
      case 1272:
      case 1273:
      case 1274:
      case 1275:
      case 1276:
      case 1277:
      case 1278:
      case 1279:
      case 1280:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 1996:
      case 1997:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2028:
      case 2029:
      case 2030:
      case 2031:
      case 2032:
      case 2033:
      case 2034:
      case 2035:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2044:
      case 2045:
      case 2046:
      case 2047:
      case 2048:
      case 2049:
      case 2050:
      case 2051:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2060:
      case 2061:
      case 2062:
      case 2063:
      case 2064:
      case 2065:
      case 2066:
      case 2067:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2076:
      case 2077:
      case 2078:
      case 2079:
      case 2080:
      case 2081:
      case 2082:
      case 2083:
      case 2084:
      case 2085:
      case 2086:
      case 2087:
      case 2088:
      case 2089:
      case 2090:
      case 2091:
      case 2092:
      case 2093:
      case 2094:
      case 2095:
      case 2096:
      case 2097:
      case 2098:
      case 2099:
      case 2100:
      case 2101:
      case 2102:
      case 2103:
      case 2104:
      case 2105:
      case 2106:
      case 2109:
      case 2110:
      case 2111:
      case 2112:
      case 2113:
      case 2114:
      case 2115:
      case 2116:
      case 2117:
      case 2118:
      case 2119:
      case 2120:
      case 2121:
      case 2122:
      case 2123:
      case 2124:
      case 2125:
      case 2126:
      case 2127:
      case 2128:
      case 2129:
      case 2130:
      case 2131:
      case 2133:
      case 2141:
      case 2143:
      case 2148:
      case 2149:
      case 2153:
      case 2157:
      case 2158:
      case 2163:
      case 2164:
      case 2165:
      case 2166:
      case 2168:
      case 2309:
      case 2310:
      case 2311:
      case 2312:
      case 2313:
      case 2314:
      case 2315:
      case 2316:
      case 2317:
      case 2318:
      case 2319:
      case 2320:
      case 2321:
      case 2322:
      case 2323:
      case 2324:
      case 2325:
      case 2326:
      case 2327:
      case 2328:
      case 2329:
      case 2330:
      case 2331:
      case 2332:
      case 2333:
      case 2334:
      case 2335:
      case 2336:
      case 2337:
      case 2338:
      case 2339:
      case 2340:
      case 2341:
      case 2342:
      case 2343:
      case 2344:
      case 2345:
      case 2346:
      case 2347:
      case 2348:
      case 2349:
      case 2350:
      case 2351:
      case 2352:
      case 2353:
      case 2354:
      case 2355:
      case 2356:
      case 2357:
      case 2358:
      case 2359:
      case 2360:
      case 2361:
      case 2362:
      case 2363:
      case 2364:
      case 2366:
      case 2367:
      case 2368:
      case 2369:
      case 2370:
      case 2371:
      case 2372:
      case 2373:
      case 2411:
      case 2412:
      case 2413:
      case 2414:
      case 2415:
      case 2416:
      case 2417:
      case 2418:
      case 2421:
      case 2422:
      case 2425:
      case 2442:
      case 2443:
      case 2447:
      case 2449:
      case 2450:
      case 2454:
      case 2455:
      case 2456:
      case 2457:
      case 2458:
      case 2459:
      case 2460:
      case 2461:
      case 2462:
      case 2463:
      case 2464:
      case 2465:
      case 2466:
      case 2467:
      case 2468:
      case 2469:
      case 2479:
      case 2480:
      case 2481:
      case 2482:
      case 2489:
      case 2490:
      case 2493:
      case 2494:
      case 2495:
      case 2496:
      case 2497:
      case 2498:
      case 2499:
      case 2500:
      case 2501:
      case 2502:
      case 2503:
      case 2504:
      case 2505:
      case 2506:
      case 2507:
      case 2508:
      case 2509:
      case 2510:
      case 2511:
      case 2512:
      case 2513:
      case 2514:
      case 2515:
      case 2516:
      case 2518:
      case 2519:
      case 2520:
      case 2521:
      case 2523:
      case 2524:
      case 2525:
      case 2527:
      case 2528:
      case 2529:
      case 2530:
      case 2531:
      case 2532:
      case 2533:
      case 2534:
      case 2535:
      case 2536:
      case 2537:
      case 2538:
      case 2539:
      case 2540:
      case 2541:
      case 2542:
      case 2543:
      case 2577:
      case 2578:
      case 2580:
      case 2581:
      case 2582:
      case 2583:
      case 2584:
      case 2585:
      case 2588:
      case 2589:
      case 2590:
      case 2591:
      case 2592:
      case 2593:
      case 2594:
      case 2595:
      case 2596:
      case 2597:
      case 2598:
      case 2599:
      case 2600:
      case 2601:
      case 2602:
      case 2603:
      case 2604:
      case 2605:
      case 2610:
      case 2611:
      case 2612:
      case 2613:
      case 2614:
      case 2615:
      case 2618:
      case 2619:
      case 2620:
      case 2621:
      case 2622:
      case 2624:
      case 2625:
      case 2626:
      case 2627:
      case 2629:
      case 2662:
      case 2663:
      case 2664:
      case 2668:
      case 2680:
      case 2681:
      case 2682:
      case 2683:
      case 2684:
      case 2705:
      case 2709:
      case 2710:
      case 2711:
      case 2712:
      case 2713:
      case 2714:
      case 2715:
      case 2716:
      case 2717:
      case 2718:
      case 2719:
      case 2720:
      case 2721:
      case 2722:
      case 2723:
      case 2724:
      case 2725:
      case 2726:
      case 2727:
      case 2728:
      case 2729:
      case 2730:
      case 2731:
      case 2738:
      case 2740:
      case 2746:
      case 2747:
      case 2748:
      case 2750:
      case 2751:
      case 2752:
      case 2753:
      case 2754:
      case 2755:
      case 2756:
      case 2757:
      case 2758:
      case 2759:
      case 2760:
      case 2761:
      case 2762:
      case 2763:
      case 2764:
      case 2765:
      case 2766:
      case 2767:
      case 2768:
      case 2776:
      case 2780:
      case 2781:
      case 2782:
      case 2793:
      case 2797:
      case 2798:
      case 2799:
      case 2800:
      case 2801:
      case 2802:
      case 2803:
      case 2804:
      case 2805:
      case 2806:
      case 2813:
      case 2817:
      case 2818:
      case 2823:
      case 2842:
      case 2843:
      case 2844:
      case 2845:
        return v25;
      case 1281:
      case 1822:
        uint64_t v694 = *(void *)(v1 + 32);
        uint64_t v695 = *(unsigned int *)(v694 + 68);
        uint64_t v696 = v1766;
        unint64_t v697 = sub_1CBBAAB48(*(_DWORD *)(v694 + 68), v1766, 0);
        uint64_t v698 = (llvm::IntegerType *****)v1770;
        if (HIDWORD(v697)) {
          goto LABEL_825;
        }
        if (v13 != 1281) {
          return 0;
        }
        if ((v695 & 0x80000000) != 0) {
          uint64_t v699 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v695 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v699 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v695);
        }
        uint64_t v700 = *v699;
        if (!v700) {
          goto LABEL_822;
        }
        if (*(unsigned char *)(v700 + 3)) {
          goto LABEL_818;
        }
        uint64_t v700 = *(void *)(v700 + 24);
        if (v700)
        {
          uint64_t v696 = v1766;
          uint64_t v698 = (llvm::IntegerType *****)v1770;
          if (*(unsigned char *)(v700 + 3))
          {
LABEL_818:
            uint64_t v701 = *(void *)(v700 + 8);
            if (v701 && **(_WORD **)(v701 + 16) == 81 && *(_DWORD *)(v701 + 40) == 2) {
              LODWORD(v695) = *(_DWORD *)(*(void *)(v701 + 32) + 36);
            }
          }
        }
        else
        {
          uint64_t v696 = v1766;
          uint64_t v698 = (llvm::IntegerType *****)v1770;
        }
LABEL_822:
        sub_1CC73C210(v695, v696, (uint64_t)v1851);
        if (!LOBYTE(v1852[0])) {
          return 0;
        }
        if (LODWORD(v1851[1]) >= 0x41)
        {
          if (v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          return 0;
        }
        unint64_t v697 = (uint64_t)v1851[0] << -(uint64_t)LODWORD(v1851[1]) >> -(uint64_t)LODWORD(v1851[1]);
LABEL_825:
        int v702 = *(_DWORD *)(*(void *)(v1 + 32) + 100);
        v1805[0] = (llvm::MachineInstr *)513;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v702;
        LODWORD(v1852[0]) = 0;
        v1877[0] = (void *)513;
        LODWORD(v1877[1]) = 0;
        unint64_t v703 = v697;
        uint64_t v704 = (llvm::ConstantInt *)llvm::IntegerType::get(***v698[1], (llvm::LLVMContext *)0x40);
        uint64_t v25 = 1;
        uint64_t v705 = llvm::ConstantInt::get(v704, v703, (const llvm::APInt *)1);
        *((void *)&v1852[0] + 1) = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v698)[2])(v698, v1877, v705);
        *(void *)&v1852[1] = v706;
        DWORD2(v1852[1]) = 1;
        uint64_t v707 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v698)[4])(v698, 45, v1805, 1, v1851, 2, 0);
        LODWORD(v1805[0]) = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        LODWORD(v1805[1]) = 1;
        v1851[0] = v707;
        v1851[1] = v708;
        LODWORD(v1852[0]) = 1;
        int v530 = (void (*)(void))(*v698)[4];
        goto LABEL_1091;
      case 1282:
      case 1283:
      case 1284:
      case 1285:
      case 1286:
      case 1287:
      case 1288:
      case 1289:
      case 1290:
      case 1291:
      case 1292:
      case 1293:
      case 1294:
      case 1295:
      case 1296:
      case 1297:
      case 1298:
      case 1299:
      case 1300:
      case 1301:
      case 1302:
      case 1303:
      case 1304:
      case 1305:
      case 1306:
      case 1307:
      case 1308:
      case 1309:
      case 1310:
      case 1311:
      case 1312:
      case 1313:
      case 1314:
      case 1315:
      case 1316:
      case 1317:
      case 1318:
      case 1319:
      case 1320:
      case 1321:
      case 1322:
      case 1323:
      case 1324:
      case 1325:
      case 1326:
      case 1327:
      case 1328:
      case 1329:
      case 1330:
      case 1331:
      case 1332:
      case 1333:
      case 1334:
      case 1335:
      case 1336:
      case 1337:
      case 1338:
      case 1339:
      case 1340:
      case 1341:
      case 1342:
      case 1343:
      case 1344:
      case 1345:
      case 1346:
      case 1347:
      case 1348:
      case 1349:
      case 1350:
      case 1351:
      case 1352:
      case 1353:
      case 1354:
      case 1355:
      case 1356:
      case 1357:
      case 1358:
      case 1359:
      case 1360:
      case 1361:
      case 1362:
      case 1363:
      case 1364:
      case 1365:
      case 1366:
      case 1367:
      case 1368:
      case 1369:
      case 1370:
      case 1371:
      case 1372:
      case 1373:
      case 1374:
      case 1375:
      case 1376:
      case 1377:
      case 1378:
      case 1379:
      case 1380:
      case 1381:
      case 1382:
      case 1383:
      case 1384:
      case 1385:
      case 1386:
      case 1387:
      case 1388:
      case 1389:
      case 1390:
      case 1391:
      case 1392:
      case 1393:
      case 1394:
      case 1395:
      case 1396:
      case 1397:
      case 1398:
      case 1399:
      case 1400:
      case 1401:
      case 1402:
      case 1403:
      case 1404:
      case 1405:
      case 1406:
      case 1407:
      case 1408:
      case 1409:
      case 1410:
      case 1411:
      case 1412:
      case 1413:
      case 1414:
      case 1415:
      case 1416:
      case 1417:
      case 1418:
      case 1419:
      case 1420:
      case 1421:
      case 1422:
      case 1423:
      case 1424:
      case 1425:
      case 1426:
      case 1427:
      case 1428:
      case 1429:
      case 1430:
      case 1431:
      case 1432:
      case 1433:
      case 1434:
      case 1435:
      case 1436:
      case 1437:
      case 1438:
      case 1439:
      case 1440:
      case 1441:
      case 1442:
      case 1443:
      case 1444:
      case 1445:
      case 1446:
      case 1447:
      case 1448:
      case 1449:
      case 1450:
      case 1451:
      case 1452:
      case 1453:
      case 1454:
      case 1455:
      case 1456:
      case 1457:
      case 1458:
      case 1459:
      case 1460:
      case 1461:
      case 1462:
      case 1463:
      case 1464:
      case 1465:
      case 1466:
      case 1467:
      case 1468:
      case 1469:
      case 1470:
      case 1471:
      case 1472:
      case 1473:
      case 1474:
      case 1475:
      case 1476:
      case 1477:
      case 1478:
      case 1479:
      case 1480:
      case 1481:
      case 1482:
      case 1483:
      case 1484:
      case 1485:
      case 1486:
      case 1487:
      case 1488:
      case 1489:
      case 1490:
      case 1491:
      case 1492:
      case 1493:
      case 1494:
      case 1495:
      case 1496:
      case 1497:
      case 1498:
      case 1499:
      case 1500:
      case 1501:
      case 1502:
      case 1503:
      case 1504:
      case 1505:
      case 1506:
      case 1507:
      case 1508:
      case 1509:
      case 1510:
      case 1511:
      case 1512:
      case 1513:
      case 1514:
      case 1515:
      case 1516:
      case 1517:
      case 1518:
      case 1519:
      case 1520:
      case 1521:
      case 1522:
      case 1523:
      case 1524:
      case 1525:
      case 1526:
      case 1527:
      case 1528:
      case 1529:
      case 1530:
      case 1531:
      case 1532:
      case 1533:
      case 1534:
      case 1535:
      case 1536:
      case 1537:
      case 1538:
      case 1539:
      case 1540:
      case 1541:
      case 1542:
      case 1543:
      case 1544:
      case 1545:
      case 1546:
      case 1547:
      case 1548:
      case 1549:
      case 1550:
      case 1551:
      case 1552:
      case 1553:
      case 1554:
      case 1555:
      case 1556:
      case 1557:
      case 1558:
      case 1559:
      case 1560:
      case 1561:
      case 1562:
      case 1563:
      case 1564:
      case 1565:
      case 1566:
      case 1567:
      case 1568:
      case 1569:
      case 1570:
      case 1571:
      case 1572:
      case 1573:
      case 1574:
      case 1575:
      case 1576:
      case 1577:
      case 1578:
      case 1579:
      case 1580:
      case 1581:
      case 1582:
      case 1583:
      case 1584:
      case 1585:
      case 1586:
      case 1587:
      case 1588:
      case 1589:
      case 1590:
      case 1591:
      case 1592:
      case 1593:
      case 1594:
      case 1595:
      case 1596:
      case 1597:
      case 1598:
      case 1599:
      case 1600:
      case 1601:
      case 1602:
      case 1603:
      case 1604:
      case 1605:
      case 1606:
      case 1607:
      case 1608:
      case 1609:
      case 1610:
      case 1611:
      case 1612:
      case 1613:
      case 1614:
      case 1615:
      case 1616:
      case 1617:
      case 1618:
      case 1619:
      case 1620:
      case 1621:
      case 1622:
      case 1623:
      case 1624:
      case 1625:
      case 1626:
      case 1627:
      case 1628:
      case 1629:
      case 1630:
      case 1631:
      case 1632:
      case 1633:
      case 1634:
      case 1635:
      case 1636:
      case 1637:
      case 1638:
      case 1639:
      case 1640:
      case 1641:
      case 1642:
      case 1643:
      case 1644:
      case 1645:
      case 1646:
      case 1647:
      case 1648:
      case 1649:
      case 1650:
      case 1651:
      case 1652:
      case 1653:
      case 1654:
      case 1655:
      case 1656:
      case 1657:
      case 1658:
      case 1659:
      case 1660:
      case 1661:
      case 1662:
      case 1663:
      case 1664:
      case 1665:
      case 1666:
      case 1667:
      case 1668:
      case 1669:
      case 1670:
      case 1671:
      case 1672:
      case 1673:
      case 1674:
      case 1675:
      case 1676:
      case 1677:
      case 1678:
      case 1679:
      case 1680:
      case 1681:
      case 2824:
      case 2825:
      case 2826:
      case 2827:
      case 2828:
      case 2829:
      case 2830:
      case 2831:
      case 2832:
      case 2833:
      case 2834:
      case 2835:
        int v26 = (unsigned __int8 **)v1;
        uint64_t v27 = v1766;
        int v28 = v1770;
        int v29 = v13;
        int v30 = 3;
        goto LABEL_33;
      case 1682:
      case 1683:
      case 1684:
      case 1685:
      case 1686:
      case 1687:
      case 1688:
      case 1689:
      case 1690:
      case 1691:
      case 1692:
      case 1693:
      case 1694:
      case 1695:
      case 1696:
      case 1697:
      case 1698:
      case 1699:
      case 1700:
      case 1701:
      case 1702:
      case 1703:
      case 1704:
      case 1705:
      case 1706:
      case 1707:
      case 1708:
      case 1709:
      case 1710:
      case 1711:
      case 1712:
      case 1713:
      case 1714:
      case 1715:
      case 1716:
      case 1717:
      case 1718:
      case 1719:
      case 1720:
      case 1721:
      case 1722:
      case 1723:
      case 1724:
      case 1725:
      case 1726:
      case 1727:
      case 1728:
      case 1729:
      case 1730:
      case 1731:
      case 1732:
      case 1733:
      case 1734:
      case 1735:
      case 1736:
      case 1737:
      case 1738:
      case 1739:
      case 1740:
      case 1741:
      case 1742:
      case 1743:
      case 1744:
      case 1745:
      case 1746:
      case 1747:
      case 1748:
      case 1749:
      case 1750:
      case 1751:
      case 1752:
      case 1753:
      case 1754:
      case 1755:
      case 1756:
      case 1757:
      case 1758:
      case 1759:
      case 1760:
      case 1761:
      case 1762:
      case 1763:
      case 1764:
      case 1765:
      case 1766:
      case 1767:
      case 1768:
      case 1769:
      case 1770:
      case 1771:
      case 1772:
      case 1773:
      case 1774:
      case 1775:
      case 1776:
      case 1777:
      case 1778:
      case 1779:
      case 1780:
      case 1781:
      case 1782:
      case 1783:
      case 1784:
      case 1785:
      case 1786:
      case 1787:
      case 1788:
      case 1789:
      case 1790:
      case 1791:
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
        int v26 = (unsigned __int8 **)v1;
        uint64_t v27 = v1766;
        int v28 = v1770;
        int v29 = v13;
        int v30 = 4;
LABEL_33:
        return sub_1CBBA9B8C(v26, v27, v28, v29, v30, v1757);
      case 1823:
        uint64_t v949 = (uint64_t)v1710[6];
        if (!v949)
        {
          uint64_t v949 = ((uint64_t (*)(llvm::ConstantFP ***, llvm::ConstantFP ****, llvm::ConstantFP ****))(*v1710[1])[27])(v1710[1], v1710 + 16, v1710);
          v1710[6] = (llvm::ConstantFP ***)v949;
        }
        uint64_t v950 = *(unsigned int *)(*(void *)(v1 + 32) + 36);
        if ((v950 & 0x80000000) != 0) {
          v951 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v950 & 0x7FFFFFFF) + 8);
        }
        else {
          v951 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v950);
        }
        uint64_t v952 = *v951;
        if ((*(unsigned char *)(v952 + 3) & 1) == 0) {
          uint64_t v952 = *(void *)(v952 + 24);
        }
        uint64_t v953 = *(void *)(v952 + 8);
        if (**(_WORD **)(v953 + 16) == 120)
        {
          uint64_t v954 = *(void *)(*(void *)(v953 + 32) + 48);
          v955 = (void *)(v954 + 24);
          if (*(_DWORD *)(v954 + 32) >= 0x41u) {
            v955 = (void *)*v955;
          }
          *(_DWORD *)(v949 + 564) = *v955;
          uint64_t v91 = (llvm::MachineInstr *)v1;
          goto LABEL_1608;
        }
        v969 = "TLS alloc only supports constant size.";
        goto LABEL_1135;
      case 2134:
      case 2135:
      case 2136:
      case 2137:
      case 2138:
      case 2733:
      case 2734:
      case 2735:
      case 2736:
      case 2737:
        v1770[5] = *(unsigned __int8 **)(v1 + 24);
        v1770[6] = (unsigned __int8 *)v1;
        if (v18 == v19) {
          goto LABEL_162;
        }
        uint64_t v117 = *v19;
        if (!*v19) {
          goto LABEL_160;
        }
        int v1166 = *v117;
        if ((v1166 - 4) > 0x1E)
        {
          if ((v1166 - 3) >= 0xFFFFFFFE) {
            v1425 = *v19;
          }
          else {
            v1425 = 0;
          }
          if ((v1166 - 3) < 0xFFFFFFFE)
          {
            if (v1166 == 3) {
              *((void *)v117 + 1) = 0;
            }
LABEL_160:
            uint64_t v118 = *v18;
            *char v19 = *v18;
            if (v118) {
              llvm::MetadataTracking::track((uint64_t)v19, v118, 2);
            }
LABEL_162:
            uint64_t v119 = *(void *)(*(void *)(v1 + 24) + 32);
            int v120 = *(unsigned __int8 *)(*(void *)(v119 + 16) + 389);
            uint64_t v121 = *(void *)(v119 + 48);
            if (!v121)
            {
              uint64_t v121 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v119 + 8) + 216))(*(void *)(v119 + 8), v119 + 128, *(void *)(*((void *)v1720 + 3) + 32));
              *(void *)(v119 + 48) = v121;
            }
            uint64_t v122 = *((unsigned int *)v1720 + 10);
            uint64_t v123 = *((void *)v1720 + 4);
            if (v122)
            {
              uint64_t v124 = 0;
              uint64_t v125 = (unsigned __int8 *)*((void *)v1720 + 4);
              while (1)
              {
                int v126 = *v125;
                v125 += 32;
                if (v126 == 17) {
                  break;
                }
                if (v122 == ++v124) {
                  goto LABEL_168;
                }
              }
            }
            else
            {
LABEL_168:
              LODWORD(v124) = -1;
            }
            int v127 = *(_DWORD *)(v123 + 32 * v124 + 16);
            switch(v127)
            {
              case 2134:
                LODWORD(v1742) = 0;
                v1751 = (llvm::ConstantFP *)v121;
                int v1735 = 0;
                LODWORD(v128) = 0;
                if (v120) {
                  uint64_t v129 = 6501;
                }
                else {
                  uint64_t v129 = 6497;
                }
                char v130 = 1;
                int v1758 = v120;
                goto LABEL_1851;
              case 2135:
                if (v120) {
                  uint64_t v129 = 6502;
                }
                else {
                  uint64_t v129 = 6498;
                }
                int v1758 = v120;
LABEL_1138:
                LODWORD(v1742) = 0;
                v1751 = (llvm::ConstantFP *)v121;
                char v130 = 0;
                LODWORD(v128) = 0;
                int v1735 = *(_DWORD *)(v123 + 68);
                goto LABEL_1851;
              case 2136:
                if (v120) {
                  uint64_t v129 = 6502;
                }
                else {
                  uint64_t v129 = 6498;
                }
LABEL_1124:
                int v1004 = *(_DWORD *)(v123 + 68);
                sub_1CC73C210(*(_DWORD *)(v123 + 100), v1766, (uint64_t)v1851);
                if (!LOBYTE(v1852[0])) {
                  goto LABEL_1134;
                }
                int v1758 = v120;
                char v1005 = (char)v1851[1];
                if (LODWORD(v1851[1]) >= 0x41) {
                  goto LABEL_1805;
                }
                v1006 = v1851[0];
                sub_1CC73C210(*(_DWORD *)(*((void *)v1720 + 4) + 132), v1766, (uint64_t)v1851);
                if (!LOBYTE(v1852[0])) {
                  goto LABEL_1134;
                }
                v1751 = (llvm::ConstantFP *)v121;
                if (LODWORD(v1851[1]) >= 0x41) {
                  goto LABEL_1805;
                }
                int v1735 = v1004;
                char v130 = 0;
                uint64_t v1742 = (uint64_t)((void)v1006 << -v1005) >> -v1005;
                uint64_t v128 = (uint64_t)v1851[0] << -(uint64_t)LODWORD(v1851[1]) >> -(uint64_t)LODWORD(v1851[1]);
                goto LABEL_1851;
              case 2137:
                if (v120) {
                  uint64_t v129 = 6501;
                }
                else {
                  uint64_t v129 = 6497;
                }
LABEL_1131:
                sub_1CC73C210(*(_DWORD *)(v123 + 68), v1766, (uint64_t)v1851);
                if (!LOBYTE(v1852[0])) {
                  goto LABEL_1134;
                }
                int v1758 = v120;
                char v1007 = (char)v1851[1];
                if (LODWORD(v1851[1]) >= 0x41) {
                  goto LABEL_1805;
                }
                v1008 = v1851[0];
                sub_1CC73C210(*(_DWORD *)(*((void *)v1720 + 4) + 100), v1766, (uint64_t)v1851);
                if (!LOBYTE(v1852[0])) {
                  goto LABEL_1134;
                }
                if (LODWORD(v1851[1]) < 0x41)
                {
                  int v1735 = 0;
                  uint64_t v1742 = (uint64_t)((void)v1008 << -v1007) >> -v1007;
                  v1751 = (llvm::ConstantFP *)v121;
                  uint64_t v128 = (uint64_t)v1851[0] << -(uint64_t)LODWORD(v1851[1]) >> -(uint64_t)LODWORD(v1851[1]);
                  goto LABEL_1850;
                }
LABEL_1805:
                if (v1851[0]) {
                  MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
                }
LABEL_1134:
                v969 = "Invalid offset type";
                break;
              case 2138:
LABEL_847:
                uint64_t v737 = *(unsigned int *)(v123 + 68);
                if ((v737 & 0x80000000) != 0) {
                  uint64_t v738 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v737 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v738 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v737);
                }
                uint64_t v739 = *v738;
                if (!v739) {
                  return 0;
                }
                if ((*(unsigned char *)(v739 + 3) & 1) == 0)
                {
                  uint64_t v739 = *(void *)(v739 + 24);
                  if (!v739 || (*(unsigned char *)(v739 + 3) & 1) == 0) {
                    return 0;
                  }
                }
                uint64_t v25 = *(void *)(v739 + 8);
                if (!v25) {
                  return v25;
                }
                if (**(_WORD **)(v25 + 16) != 77) {
                  return 0;
                }
                int v1758 = v120;
                uint64_t v740 = 0;
                unint64_t v741 = 0;
                BOOL v742 = 0;
                v1851[0] = v1852;
                memset(v1852, 0, sizeof(v1852));
                v1851[1] = (void *)0x10000000008;
                while (2)
                {
                  sub_1CC73C210(*(_DWORD *)(*(void *)(v25 + 32) + 4 * v740 + 36), v1766, (uint64_t)v1805);
                  if (LOBYTE(v1806[0]))
                  {
                    if (LODWORD(v1805[1]) < 0x41)
                    {
                      uint64_t v743 = (uint64_t)v1805[0] << -LOBYTE(v1805[1]) >> -LOBYTE(v1805[1]);
                      v744 = (unsigned int *)v1851[0];
                      int v745 = (char *)v1851[0] + v740;
                      int v746 = *(_DWORD *)((char *)v1851[0] + v740) | v743;
                      LODWORD(v743) = *(_DWORD *)((char *)v1851[0] + v740 + 4) | HIDWORD(v743);
                      *int v745 = v746;
                      v745[1] = v743;
                      BOOL v742 = v741 > 2;
                      v740 += 8;
                      if (++v741 == 4)
                      {
                        uint64_t v747 = (32 * LODWORD(v1851[1]));
                        if (v747 <= 0x39)
                        {
                          v1805[0] = (llvm::MachineInstr *)((v747 << 58) | 1);
                          sub_1CB9F99B4((uint64_t *)v1805, v744, v1851[1]);
                          (*(void (**)(void))(**(void **)(v119 + 16) + 104))(*(void *)(v119 + 16));
                          operator new();
                        }
                        operator new();
                      }
                      continue;
                    }
                    if (v1805[0]) {
                      MEMORY[0x1D25D9CB0](v1805[0], 0x1000C8000313F17);
                    }
                  }
                  break;
                }
                uint64_t v129 = 0;
                if (v1851[0] != v1852) {
                  free(v1851[0]);
                }
                uint64_t v25 = 0;
                if (!v742) {
                  return v25;
                }
                LODWORD(v1742) = 0;
                v1751 = (llvm::ConstantFP *)v121;
                int v1735 = 0;
                LODWORD(v128) = 0;
                goto LABEL_1850;
              default:
                switch(v127)
                {
                  case 2734:
                    if (!v120) {
                      goto LABEL_1876;
                    }
                    int v1758 = v120;
                    uint64_t v129 = 6502;
                    goto LABEL_1138;
                  case 2735:
                    if (!v120) {
                      goto LABEL_1876;
                    }
                    uint64_t v129 = 6502;
                    goto LABEL_1124;
                  case 2736:
                    if (!v120) {
                      goto LABEL_1876;
                    }
                    uint64_t v129 = 6501;
                    goto LABEL_1131;
                  case 2737:
                    goto LABEL_847;
                  default:
                    int v1758 = v120;
                    if (v120)
                    {
                      LODWORD(v1742) = 0;
                      v1751 = (llvm::ConstantFP *)v121;
                      int v1735 = 0;
                      LODWORD(v128) = 0;
                      uint64_t v129 = 6501;
LABEL_1850:
                      char v130 = 1;
LABEL_1851:
                      v1805[0] = (llvm::MachineInstr *)129;
                      LODWORD(v1805[1]) = 0;
                      v1851[0] = (void *)7;
                      LODWORD(v1852[0]) = 3;
                      v1515 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                                       + 4))(v1770, 315, v1805, 1, v1851, 1, 0);
                      v1517 = v1516;
                      int v1518 = sub_1CBC2FC68(v1770);
                      v1805[0] = (llvm::MachineInstr *)129;
                      LODWORD(v1805[1]) = 0;
                      v1851[0] = v1515;
                      v1851[1] = v1517;
                      LODWORD(v1852[0]) = 1;
                      DWORD2(v1852[0]) = v1518;
                      DWORD2(v1852[1]) = 0;
                      (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                       + 4))(v1770, 65, v1805, 1, v1851, 2, 0);
                      int v1520 = *(_DWORD *)(*(void *)(v1519 + 32) + 4);
                      uint64_t v1521 = 513;
                      if (!v1758) {
                        uint64_t v1521 = 129;
                      }
                      v1877[0] = (void *)v1521;
                      LODWORD(v1877[1]) = 0;
                      v1522 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
                                                        + 4))(v1770, v129, v1877, 1, 0, 0, 0);
                      v1524 = v1523;
                      LODWORD(v1851[0]) = 1;
                      *(void *)&v1852[0] = 0;
                      v1851[1] = 0;
                      llvm::MachineInstr::addOperand(v1523, v1522, (const llvm::MachineOperand *)v1851);
                      v1852[0] = 0uLL;
                      v1851[1] = 0;
                      HIDWORD(v1851[0]) = v1520;
                      LODWORD(v1851[0]) = 0;
                      llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      LODWORD(v1851[0]) = 1;
                      *(void *)&v1852[0] = 0;
                      v1851[1] = 0;
                      llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      v1805[0] = v1522;
                      v1805[1] = v1524;
                      if ((v130 & 1) == 0)
                      {
                        v1852[0] = 0uLL;
                        v1851[1] = 0;
                        HIDWORD(v1851[0]) = v1735;
                        LODWORD(v1851[0]) = 0;
                        llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      }
                      LODWORD(v1851[0]) = 1;
                      *(void *)&v1852[0] = 0;
                      v1851[1] = 0;
                      llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      LODWORD(v1851[0]) = 1;
                      v1851[1] = 0;
                      *(void *)&v1852[0] = v1742;
                      llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      LODWORD(v1851[0]) = 1;
                      v1851[1] = 0;
                      *(void *)&v1852[0] = v128;
                      llvm::MachineInstr::addOperand(v1524, v1522, (const llvm::MachineOperand *)v1851);
                      LODWORD(v1877[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
                      LODWORD(v1877[1]) = 1;
                      *(_OWORD *)v1851 = *(_OWORD *)v1805;
                      LODWORD(v1852[0]) = 1;
                      (*((void (**)(void))*v1770 + 4))();
                      sub_1CBA318C8((uint64_t)v1805);
                      sub_1CBBDF994((uint64_t)v1751, 0, 256, v119);
                    }
LABEL_1876:
                    v969 = "8xMSAA is supported, but non-8xMSAA intrinsic is present";
                    break;
                }
                break;
            }
LABEL_1135:
            llvm::report_fatal_error((llvm *)v969, (const llvm::Twine *)1);
          }
          unint64_t v1168 = (unint64_t)(v1425 + 8);
        }
        else
        {
          if ((v117[1] & 0x7F) != 2 && !*((_DWORD *)v117 + 3)) {
            goto LABEL_160;
          }
          uint64_t v1167 = *((void *)v117 + 2);
          if ((v1167 & 4) == 0) {
            goto LABEL_160;
          }
          unint64_t v1168 = v1167 & 0xFFFFFFFFFFFFFFF8;
          if (!v1168) {
            goto LABEL_160;
          }
        }
        v1851[0] = v1770 + 4;
        sub_1CC5FA668(v1168 + 16, v1851);
        goto LABEL_160;
      case 2140:
      case 2544:
        uint64_t v714 = sub_1CBBAAC30(v13);
        unsigned int v715 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(v714);
        int v716 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        uint64_t v717 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
                                         + 4))(v1770, 314, v1805, 1, 0, 0, 0);
        v719 = v718;
        LODWORD(v1851[0]) = 1;
        v1851[1] = 0;
        *(void *)&v1852[0] = v715;
        llvm::MachineInstr::addOperand(v718, v717, (const llvm::MachineOperand *)v1851);
        if (v13 == 2140)
        {
          int v720 = sub_1CBC2FC68(v1770);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v717;
          v1851[1] = v719;
          LODWORD(v1852[0]) = 1;
          DWORD2(v1852[0]) = v720;
          DWORD2(v1852[1]) = 0;
          int v721 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                          + 4))(v1770, 65, v1805, 1, v1851, 2, 0);
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v717;
          v1851[1] = v719;
          LODWORD(v1852[0]) = 1;
          DWORD2(v1852[0]) = sub_1CBC2FD10(v1770);
          DWORD2(v1852[1]) = 0;
          int v721 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                          + 4))(v1770, 128, v1805, 1, v1851, 2, 0);
        }
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = v716;
        LODWORD(v1805[1]) = 1;
        v1851[0] = v721;
        v1851[1] = v722;
        LODWORD(v1852[0]) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
         + 4))(v1770, 126, v1805, 1, v1851, 1, 0);
        goto LABEL_1856;
      case 2142:
      case 2376:
      case 2377:
      case 2378:
      case 2379:
      case 2380:
      case 2381:
      case 2382:
      case 2383:
      case 2384:
      case 2385:
      case 2386:
      case 2387:
      case 2388:
      case 2389:
      case 2390:
      case 2391:
      case 2392:
      case 2393:
      case 2394:
      case 2395:
      case 2396:
      case 2397:
      case 2398:
      case 2399:
      case 2400:
      case 2401:
      case 2402:
      case 2403:
      case 2404:
      case 2405:
      case 2406:
      case 2407:
      case 2784:
      case 2785:
      case 2786:
        return sub_1CBBB1968(v1, v1766, (unint64_t *)v1770, 0);
      case 2144:
      case 2630:
      case 2631:
      case 2632:
      case 2633:
      case 2634:
      case 2635:
      case 2636:
      case 2637:
      case 2638:
      case 2639:
      case 2640:
      case 2641:
      case 2642:
      case 2643:
      case 2644:
      case 2645:
      case 2646:
      case 2647:
      case 2648:
      case 2649:
      case 2650:
      case 2651:
      case 2652:
      case 2653:
      case 2654:
      case 2655:
      case 2656:
      case 2657:
      case 2658:
      case 2659:
      case 2660:
      case 2661:
      case 2838:
      case 2839:
      case 2840:
        return sub_1CBBB4A84((unint64_t *)v1, v1766, (uint64_t)v1770);
      case 2159:
      case 2160:
      case 2161:
      case 2162:
        uint64_t v421 = v1770;
        v1770[5] = *(unsigned __int8 **)(v1 + 24);
        v1770[6] = (unsigned __int8 *)v1;
        if (v18 == v19) {
          goto LABEL_589;
        }
        uint64_t v422 = *v19;
        if (!*v19) {
          goto LABEL_587;
        }
        int v1302 = *v422;
        if ((v1302 - 4) > 0x1E)
        {
          if ((v1302 - 3) >= 0xFFFFFFFE) {
            v1470 = *v19;
          }
          else {
            v1470 = 0;
          }
          if ((v1302 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1304 = (unint64_t)(v1470 + 8);
LABEL_1632:
            v1851[0] = v1770 + 4;
            sub_1CC5FA668(v1304 + 16, v1851);
            uint64_t v421 = v1770;
            goto LABEL_587;
          }
          uint64_t v421 = v1770;
          if (v1302 == 3) {
            *((void *)v422 + 1) = 0;
          }
        }
        else if ((v422[1] & 0x7F) == 2 || *((_DWORD *)v422 + 3))
        {
          uint64_t v1303 = *((void *)v422 + 2);
          if ((v1303 & 4) != 0)
          {
            unint64_t v1304 = v1303 & 0xFFFFFFFFFFFFFFF8;
            if (v1304) {
              goto LABEL_1632;
            }
          }
        }
LABEL_587:
        uint64_t v423 = *v18;
        *char v19 = *v18;
        if (v423) {
          llvm::MetadataTracking::track((uint64_t)v19, v423, 2);
        }
LABEL_589:
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        LODWORD(v1805[1]) = 1;
        uint64_t v424 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, void, llvm::MachineInstr **, uint64_t, void, void, void))*v421
                                         + 4))(v421, (v13 - 1885), v1805, 1, 0, 0, 0);
        uint64_t v426 = v425;
        llvm::MachineInstr::addOperand(v425, v424, (const llvm::MachineOperand *)(*(void *)(v1 + 32) + 64));
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v426, v424, (const llvm::MachineOperand *)v1851);
        llvm::MachineInstr::addOperand(v426, v424, (const llvm::MachineOperand *)(*(void *)(v1 + 32) + 96));
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v426, v424, (const llvm::MachineOperand *)v1851);
        llvm::MachineInstr::addOperand(v426, v424, (const llvm::MachineOperand *)(*(void *)(v1 + 32) + 128));
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v426, v424, (const llvm::MachineOperand *)v1851);
        goto LABEL_1214;
      case 2171:
      case 2172:
        v1805[0] = (llvm::MachineInstr *)v1806;
        v1805[1] = (llvm::MachineInstr *)0x400000000;
        if (v13 == 2172) {
          uint64_t v639 = 4;
        }
        else {
          uint64_t v639 = 3;
        }
        uint64_t v640 = *(void *)(v1 + 32);
        int v641 = *(_DWORD *)(v640 + 32 * v639 + 4);
        int v642 = *(_DWORD *)(v640 + 32 * (v639 + 1) + 4);
        int v643 = *(_DWORD *)(v640 + 32 * (v639 + 2) + 4);
        v1877[0] = (void *)513;
        LODWORD(v1877[1]) = 0;
        LODWORD(v1851[0]) = v641;
        LODWORD(v1852[0]) = 0;
        int v644 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                        + 4))(v1770, 80, v1877, 1, v1851, 1, 0);
        v646 = v645;
        v1877[0] = v644;
        v1877[1] = v645;
        LODWORD(v1878) = 1;
        v1851[0] = v1852;
        *(void *)&v1852[0] = 257;
        DWORD2(v1852[0]) = 0;
        *(void *)&v1852[1] = 257;
        DWORD2(v1852[1]) = 0;
        v1851[1] = (void *)0x800000002;
        (*((void (**)(unsigned __int8 **, uint64_t, _OWORD *, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 74, v1852, 2, v1877, 1, 0);
        uint64_t v648 = v647;
        if (v1851[0] != v1852) {
          free(v1851[0]);
        }
        int v649 = *(_DWORD *)(*(void *)(v648 + 32) + 4);
        v1890 = (void *)513;
        LODWORD(v1891) = 0;
        uint64_t v650 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x40);
        uint64_t v652 = *(llvm::ConstantInt **)v650;
        unsigned int v653 = *(_DWORD *)(v650 + 8);
        LODWORD(v1851[1]) = v653 >> 8;
        if (v653 >> 8 > 0x40) {
          operator new[]();
        }
        if (v653 <= 0xFF) {
          unint64_t v654 = 0;
        }
        else {
          unint64_t v654 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v653) + 63);
        }
        v1851[0] = (void *)(v654 & 0xFF00000000);
        unint64_t v655 = llvm::ConstantInt::get(v652, (llvm::LLVMContext *)v1851, v651);
        if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
          MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
        }
        uint64_t v656 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v655);
        v1877[0] = (void *)513;
        LODWORD(v1877[1]) = 0;
        v1851[0] = v644;
        v1851[1] = v646;
        LODWORD(v1852[0]) = 1;
        *((void *)&v1852[0] + 1) = v656;
        *(void *)&v1852[1] = v657;
        DWORD2(v1852[1]) = 1;
        int v658 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                        + 4))(v1770, 65, v1877, 1, v1851, 2, 0);
        v1890 = (void *)513;
        LODWORD(v1891) = 0;
        v1851[0] = v658;
        v1851[1] = v659;
        LODWORD(v1852[0]) = 1;
        unint64_t v1862 = 513;
        LODWORD(v1863) = 0;
        uint64_t v660 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x40);
        uint64_t v662 = *(llvm::ConstantInt **)v660;
        unsigned int v663 = *(_DWORD *)(v660 + 8);
        LODWORD(v1877[1]) = v663 >> 8;
        if (v663 >> 8 > 0x40) {
          operator new[]();
        }
        if (v663 <= 0xFF) {
          LOBYTE(v664) = 0;
        }
        else {
          unint64_t v664 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v663) + 63);
        }
        v1877[0] = (void *)(v664 & 0x20);
        v665 = llvm::ConstantInt::get(v662, (llvm::LLVMContext *)v1877, v661);
        if (LODWORD(v1877[1]) >= 0x41 && v1877[0]) {
          MEMORY[0x1D25D9CB0](v1877[0], 0x1000C8000313F17);
        }
        *((void *)&v1852[0] + 1) = (*((uint64_t (**)(unsigned __int8 **, unint64_t *, void *))*v1770
                                      + 2))(v1770, &v1862, v665);
        *(void *)&v1852[1] = v666;
        DWORD2(v1852[1]) = 1;
        uint64_t v667 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                        + 4))(v1770, 128, &v1890, 1, v1851, 2, 0);
        v1877[0] = (void *)129;
        LODWORD(v1877[1]) = 0;
        v1851[0] = v667;
        v1851[1] = v668;
        LODWORD(v1852[0]) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 119, v1877, 1, v1851, 1, 0);
        v1877[0] = (void *)257;
        LODWORD(v1877[1]) = 0;
        LODWORD(v1851[0]) = *(_DWORD *)(*(void *)(v669 + 32) + 4);
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v642;
        DWORD2(v1852[1]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 76, v1877, 1, v1851, 2, 0);
        v1877[0] = (void *)513;
        LODWORD(v1877[1]) = 0;
        LODWORD(v1851[0]) = v649;
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = *(_DWORD *)(*(void *)(v670 + 32) + 4);
        DWORD2(v1852[1]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 76, v1877, 1, v1851, 2, 0);
        *((_DWORD *)v1805[0] + LODWORD(v1805[1])) = *(_DWORD *)(*(void *)(v671 + 32) + 4);
        unsigned int v672 = ++LODWORD(v1805[1]);
        if (v13 == 2172)
        {
          uint64_t v673 = *((void *)v1720 + 4);
          int v674 = *(_DWORD *)(v673 + 228);
          int v675 = *(_DWORD *)(v673 + 260);
          v1877[0] = (void *)513;
          LODWORD(v1877[1]) = 0;
          LODWORD(v1851[0]) = v643;
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v674;
          DWORD2(v1852[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 76, v1877, 1, v1851, 2, 0);
          if (LODWORD(v1805[1]) >= HIDWORD(v1805[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v1805[0] + LODWORD(v1805[1])) = *(_DWORD *)(*(void *)(v676 + 32) + 4);
          unsigned int v677 = HIDWORD(v1805[1]);
          unsigned int v672 = ++LODWORD(v1805[1]);
          int v643 = v675;
        }
        else
        {
          unsigned int v677 = HIDWORD(v1805[1]);
        }
        if (v672 >= v677) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v1805[0] + v672) = v643;
        BOOL v794 = __CFADD__(LODWORD(v1805[1])++, 1);
        if (!v794)
        {
          unint64_t v946 = 0;
          uint64_t v947 = 4;
          do
          {
            LODWORD(v1877[0]) = *(_DWORD *)(*((void *)v1720 + 4) + v947);
            LODWORD(v1877[1]) = 1;
            LODWORD(v1851[0]) = *((_DWORD *)v1805[0] + v946);
            LODWORD(v1852[0]) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 19, v1877, 1, v1851, 1, 0);
            ++v946;
            v947 += 32;
          }
          while (v946 < LODWORD(v1805[1]));
        }
        llvm::MachineInstr::eraseFromParent(v1720);
        v948 = v1805[0];
        if ((uint64_t *)v1805[0] == v1806) {
          return 1;
        }
        goto LABEL_1167;
      case 2177:
      case 2178:
      case 2179:
      case 2180:
      case 2181:
      case 2182:
      case 2183:
      case 2184:
      case 2185:
      case 2186:
      case 2187:
      case 2188:
      case 2189:
      case 2190:
      case 2191:
      case 2192:
      case 2193:
      case 2194:
      case 2195:
      case 2196:
      case 2197:
      case 2198:
      case 2199:
      case 2200:
      case 2233:
      case 2234:
      case 2235:
      case 2236:
      case 2237:
      case 2238:
      case 2239:
      case 2240:
      case 2241:
      case 2242:
      case 2243:
      case 2244:
      case 2245:
      case 2246:
      case 2247:
      case 2248:
      case 2249:
      case 2250:
      case 2251:
      case 2252:
      case 2253:
      case 2254:
      case 2255:
      case 2256:
      case 2257:
      case 2258:
      case 2259:
      case 2260:
      case 2261:
      case 2262:
      case 2263:
      case 2264:
      case 2297:
      case 2298:
      case 2299:
      case 2300:
      case 2301:
      case 2302:
      case 2303:
      case 2304:
        v969 = "AGX3 does not support imgwblk intrinsics with implicit coords.";
        goto LABEL_1135;
      case 2201:
      case 2202:
      case 2203:
      case 2204:
      case 2205:
      case 2206:
      case 2207:
      case 2208:
      case 2209:
      case 2210:
      case 2211:
      case 2212:
      case 2213:
      case 2214:
      case 2215:
      case 2216:
      case 2217:
      case 2218:
      case 2219:
      case 2220:
      case 2221:
      case 2222:
      case 2223:
      case 2224:
      case 2225:
      case 2226:
      case 2227:
      case 2228:
      case 2229:
      case 2230:
      case 2231:
      case 2232:
      case 2265:
      case 2266:
      case 2267:
      case 2268:
      case 2269:
      case 2270:
      case 2271:
      case 2272:
      case 2273:
      case 2274:
      case 2275:
      case 2276:
      case 2277:
      case 2278:
      case 2279:
      case 2280:
      case 2281:
      case 2282:
      case 2283:
      case 2284:
      case 2285:
      case 2286:
      case 2287:
      case 2288:
      case 2289:
      case 2290:
      case 2291:
      case 2292:
      case 2293:
      case 2294:
      case 2295:
      case 2296:
        char v1865 = 0;
        char v1866 = 0;
        char v1867 = 0;
        LOBYTE(v1868) = 0;
        char v1869 = 0;
        LOBYTE(v1870) = 0;
        char v1871 = 0;
        LOBYTE(v1872) = 0;
        unsigned __int8 v1873 = 0;
        uint64_t v1863 = 0;
        unint64_t v1862 = 0;
        LOBYTE(v1864) = 0;
        sub_1CBDB0D0C(v13, (uint64_t)&v1862, 0xFFFFFFFF);
        uint64_t v37 = *(void *)(v1 + 32);
        uint64_t v38 = *(unsigned int *)(v37 + 32 * v1863 + 4);
        uint64_t v39 = v1766;
        uint64_t v40 = *(void *)(v1766 + 24);
        uint64_t v41 = *(void *)(v1766 + 272);
        if ((v38 & 0x80000000) != 0) {
          int v42 = (uint64_t *)(v40 + 16 * (v38 & 0x7FFFFFFF) + 8);
        }
        else {
          int v42 = (uint64_t *)(v41 + 8 * v38);
        }
        uint64_t v43 = *v42;
        if (!v43) {
          goto LABEL_44;
        }
        if ((*(unsigned char *)(v43 + 3) & 1) == 0)
        {
          uint64_t v43 = *(void *)(v43 + 24);
          if (!v43 || (*(unsigned char *)(v43 + 3) & 1) == 0) {
            goto LABEL_44;
          }
        }
        uint64_t v44 = *(void *)(v43 + 8);
        if (!v44 || **(_WORD **)(v44 + 16) != 82) {
          goto LABEL_44;
        }
        while (2)
        {
          if (*(_DWORD *)(v44 + 40) == 2) {
            goto LABEL_1954;
          }
LABEL_44:
          if ((v38 & 0x80000000) != 0) {
            uint64_t v45 = (uint64_t *)(v40 + 16 * (v38 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v45 = (uint64_t *)(v41 + 8 * v38);
          }
          uint64_t v46 = *v45;
          if (!v46) {
            goto LABEL_50;
          }
          if (*(unsigned char *)(v46 + 3)) {
            goto LABEL_48;
          }
          uint64_t v46 = *(void *)(v46 + 24);
          if (v46)
          {
            uint64_t v39 = v1766;
            if (*(unsigned char *)(v46 + 3))
            {
LABEL_48:
              uint64_t v44 = *(void *)(v46 + 8);
              if (v44 && **(_WORD **)(v44 + 16) == 81 && *(_DWORD *)(v44 + 40) == 2) {
LABEL_1954:
              }
                LODWORD(v38) = *(_DWORD *)(*(void *)(v44 + 32) + 36);
            }
          }
          else
          {
            uint64_t v39 = v1766;
          }
LABEL_50:
          sub_1CC73C210(*(_DWORD *)(v37 + 32 * v1862 + 4), v39, (uint64_t)v1851);
          if (LOBYTE(v1852[0]))
          {
            if (LODWORD(v1851[1]) > 0x40)
            {
              if (v1851[0]) {
                MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
              }
              unint64_t v53 = 0;
              uint64_t v54 = 0;
              uint64_t v39 = v1766;
            }
            else
            {
              unint64_t v53 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFFFFFFFFFF00;
              uint64_t v54 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
            }
            unint64_t v47 = v54 | v53;
          }
          else
          {
            unint64_t v47 = 0;
          }
          unint64_t v55 = *(unsigned int *)(*((void *)v1720 + 4) + 32 * HIDWORD(v1863) + 4);
          if ((v55 & 0x80000000) != 0) {
            unsigned int v56 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v56 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v55);
          }
          uint64_t v57 = *v56;
          if (!v57) {
            goto LABEL_79;
          }
          if (*(unsigned char *)(v57 + 3)) {
            goto LABEL_75;
          }
          uint64_t v57 = *(void *)(v57 + 24);
          if (v57)
          {
            uint64_t v39 = v1766;
            if (*(unsigned char *)(v57 + 3))
            {
LABEL_75:
              uint64_t v58 = *(void *)(v57 + 8);
              if (v58 && **(_WORD **)(v58 + 16) == 126 && *(_DWORD *)(v58 + 40) == 2) {
                unint64_t v55 = *(unsigned int *)(*(void *)(v58 + 32) + 36);
              }
            }
          }
          else
          {
            uint64_t v39 = v1766;
          }
LABEL_79:
          if (v55 >> 31) {
            uint64_t v59 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v59 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v55);
          }
          uint64_t v60 = *v59;
          if (!v60) {
            goto LABEL_87;
          }
          if (*(unsigned char *)(v60 + 3)) {
            goto LABEL_83;
          }
          uint64_t v60 = *(void *)(v60 + 24);
          if (v60)
          {
            uint64_t v39 = v1766;
            if (*(unsigned char *)(v60 + 3))
            {
LABEL_83:
              uint64_t v61 = *(void *)(v60 + 8);
              if (v61 && **(_WORD **)(v61 + 16) == 81 && *(_DWORD *)(v61 + 40) == 2) {
                LODWORD(v55) = *(_DWORD *)(*(void *)(v61 + 32) + 36);
              }
            }
          }
          else
          {
            uint64_t v39 = v1766;
          }
LABEL_87:
          sub_1CC73C210(v55, v39, (uint64_t)v1851);
          if (LOBYTE(v1852[0]) && LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          sub_1CC73C210(v55, v39, (uint64_t)&v1783);
          if (v1785)
          {
            __int16 v62 = v1784 >= 0x41 ? v1783 : (uint64_t *)&v1783;
            if ((unint64_t)*v62 >= 0x10000)
            {
              LOBYTE(v1851[0]) = 0;
              LOBYTE(v1852[0]) = 0;
              sub_1CD424520((uint64_t)&v1783, (uint64_t)v1851);
              if (LOBYTE(v1852[0]))
              {
                if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
                  MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
                }
              }
            }
          }
          if ((v55 & 0x80000000) != 0)
          {
            uint64_t v64 = (uint64_t *)v1710;
            if ((v55 & 0x7FFFFFFF) >= *(_DWORD *)(v39 + 432)) {
              unint64_t v63 = 0;
            }
            else {
              unint64_t v63 = *(void *)(*(void *)(v39 + 424) + 8 * (v55 & 0x7FFFFFFF));
            }
          }
          else
          {
            unint64_t v63 = 0;
            uint64_t v64 = (uint64_t *)v1710;
          }
          int v1701 = v55;
          unint64_t v1782 = v63;
          if (!v1785)
          {
            uint64_t v105 = sub_1CB8F1DC4(&v1782);
            if (v104 == 1) {
            if (v105 != 32 || (v1782 & 1) == 0)
            }
            {
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = v1701;
              LODWORD(v1852[0]) = 0;
              if (v1782) {
                sub_1CC738034(v1770, 126, (unint64_t *)v1805, (int *)v1851);
              }
              else {
                sub_1CC7382B0((uint64_t)v1770);
              }
              int v1701 = *(_DWORD *)(*(void *)(v106 + 32) + 4);
            }
          }
          uint64_t v147 = v47 & 0x3FFF;
          sub_1CBA315DC((uint64_t)v1780, v38, v39, 1);
          uint64_t v1777 = 0;
          uint64_t v1778 = 0;
          unsigned int v1776 = v38;
          int v1775 = 0;
          uint64_t v1779 = 0;
          if (v1781)
          {
            v1702 = v1780[0];
            unsigned int v148 = sub_1CD1117B0(v1780[0], (uint64_t)v1780[1], v64[43], 0);
            int v1775 = 775;
            unsigned int v1776 = v148 >> 1;
            uint64_t v1777 = 0;
            LODWORD(v1778) = 64;
            LODWORD(v1779) = 0;
          }
          else
          {
            v1702 = 0;
          }
          uint64_t v38 = v1873;
          uint64_t v149 = *v64;
          BOOL v150 = *((unsigned char *)v14 + 1675) == 0;
          LODWORD(v1851[0]) = 0;
          if (sub_1CBC1C7DC((int)v15, v149, "ImageWriteBlockL2Pers", (int *)v1851)) {
            uint64_t v40 = LODWORD(v1851[0]);
          }
          else {
            uint64_t v40 = v150;
          }
          uint64_t v37 = v1876;
          uint64_t v15 = v1770;
          switch(v47 & 0x3FFF)
          {
            case 1uLL:
              uint64_t v147 = 2048;
              goto LABEL_204;
            case 2uLL:
              uint64_t v147 = 4096;
              goto LABEL_204;
            case 3uLL:
              v969 = "Didn't expect imgwblk with F16x4_RTZ format";
              goto LABEL_1135;
            case 4uLL:
            case 5uLL:
            case 8uLL:
            case 0xAuLL:
            case 0xCuLL:
            case 0xDuLL:
              uint64_t v147 = 6144;
              goto LABEL_204;
            case 6uLL:
            case 7uLL:
              uint64_t v147 = 0x2000;
              goto LABEL_204;
            case 9uLL:
            case 0xBuLL:
              __break(1u);
              continue;
            case 0xEuLL:
              v969 = "Didn't expect imgwblk with RGF11BF10_RTZ format";
              goto LABEL_1135;
            case 0xFuLL:
              v969 = "Didn't expect imgwblk with RGBF9E5_RTZ format";
              goto LABEL_1135;
            default:
LABEL_204:
              unint64_t v1774 = (v47 << 6) & 0x200000 | (((v47 >> 14) & 1) << 26) | ((unint64_t)(v38 != 0) << 22) | ((unint64_t)(v40 == 0) << 25) | v1876 | (unint64_t)v147 | qword_1CDC6D2F8[v1874] | qword_1CDC6D340[v1874] | (32 * (v1875 == 0));
              sub_1CBE54498((uint64_t)v1851, &v1774, v1750);
              v1805[0] = (llvm::MachineInstr *)v1806;
              v1805[1] = (llvm::MachineInstr *)0x400000000;
              LOBYTE(v1807) = 0;
              char v1809 = 0;
              char v1810 = 0;
              char v1811 = 0;
              v1812 = v1814;
              uint64_t v1813 = 0x600000000;
              v1815 = v1817;
              uint64_t v1816 = 0x300000000;
              v1817[120] = 0;
              v1817[152] = 0;
              LOBYTE(v1818) = 0;
              char v1820 = 0;
              char v1821 = 0;
              char v1822 = 0;
              v1823 = v1825;
              uint64_t v1824 = 0x400000000;
              LOBYTE(v1826) = 0;
              char v1828 = 0;
              LOBYTE(v1829) = 0;
              char v1831 = 0;
              LOBYTE(v1832) = 0;
              char v1834 = 0;
              LOBYTE(v1835) = 0;
              char v1837 = 0;
              LOBYTE(v1838) = 0;
              char v1840 = 0;
              char v1841 = 0;
              char v1842 = 0;
              char v1843 = 0;
              char v1844 = 0;
              char v1845 = 0;
              char v1846 = 0;
              char v1847 = 0;
              char v1848 = 0;
              char v1849 = 0;
              char v1850 = 0;
              LODWORD(v147) = *(_DWORD *)(*((void *)v1720 + 4) + 32 * v1864 + 4);
              if ((v147 & 0x80000000) != 0
                && (v147 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v39 + 432))
              {
                uint64_t v152 = *(void *)(*(void *)(v39 + 424) + 8 * (v147 & 0x7FFFFFFF));
                if ((v152 & 0xFFFFFFFFFFFFFFF9) != 0 && (v152 & 4) != 0)
                {
                  uint64_t v153 = 0x800000000000000;
                  if ((v152 & 2) == 0) {
                    uint64_t v153 = 0x8000000000000;
                  }
                  if ((v153 & v152) != 0) {
                    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v151);
                  }
                }
                v1801 = &v1803;
                uint64_t v1802 = 0x400000000;
                if (v152)
                {
                  int v1803 = v147;
                  LODWORD(v1802) = 1;
                  uint64_t v154 = (char *)&v1804;
                  uint64_t v147 = (uint64_t)&v1803;
                  goto LABEL_217;
                }
              }
              else
              {
                v1801 = &v1803;
                uint64_t v1802 = 0x400000000;
              }
              sub_1CBBB1038(v147, v39, (uint64_t)v1770, (uint64_t)&v1801);
              if (!v1802) {
                goto LABEL_219;
              }
              uint64_t v147 = (uint64_t)v1801;
              uint64_t v154 = (char *)v1801 + 4 * v1802;
              do
              {
LABEL_217:
                int v155 = *(_DWORD *)v147;
                v147 += 4;
                LODWORD(v1877[0]) = 0;
                HIDWORD(v1877[0]) = v155;
                long long v1878 = 0uLL;
                v1877[1] = 0;
                char v1879 = 1;
                unint64_t v156 = sub_1CBB40070((uint64_t)v1805, (unint64_t)v1877, 1);
                uint64_t v157 = (char *)v1805[0] + 40 * LODWORD(v1805[1]);
                uint64_t v158 = *(void *)(v156 + 32);
                long long v159 = *(_OWORD *)(v156 + 16);
                *(_OWORD *)uint64_t v157 = *(_OWORD *)v156;
                *((_OWORD *)v157 + 1) = v159;
                *((void *)v157 + 4) = v158;
                ++LODWORD(v1805[1]);
              }
              while ((char *)v147 != v154);
              uint64_t v15 = v1770;
LABEL_219:
              uint64_t v160 = *((void *)v1720 + 4);
              if (v1869)
              {
                uint64_t v161 = (long long *)(v160 + 32 * v1868);
                long long v162 = v161[1];
                long long v1818 = *v161;
                long long v1819 = v162;
                if (!v1820) {
                  char v1820 = 1;
                }
              }
              if (v1871)
              {
                uint64_t v163 = (long long *)(v160 + 32 * v1870);
                long long v164 = v163[1];
                long long v1807 = *v163;
                long long v1808 = v164;
                if (!v1809) {
                  char v1809 = 1;
                }
              }
              uint64_t v165 = (long long *)(v160 + 32 * HIDWORD(v1862));
              long long v166 = v165[1];
              long long v1838 = *v165;
              long long v1839 = v166;
              if (!v1840) {
                char v1840 = 1;
              }
              if (v38)
              {
                unint64_t v167 = (long long *)(v160 + 32 * v1872);
                long long v168 = v167[1];
                long long v1832 = *v167;
                long long v1833 = v168;
                if (!v1834) {
                  char v1834 = 1;
                }
                uint64_t v169 = (long long *)(v160 + 32 * (v1872 + 1));
                long long v170 = v169[1];
                long long v1826 = *v169;
                long long v1827 = v170;
                if (!v1828) {
                  char v1828 = 1;
                }
                uint64_t v171 = (long long *)(v160 + 32 * (v1872 + 2));
                long long v172 = v171[1];
                long long v1835 = *v171;
                long long v1836 = v172;
                if (!v1837) {
                  char v1837 = 1;
                }
                uint64_t v173 = (long long *)(v160 + 32 * (v1872 + 3));
                long long v174 = v173[1];
                long long v1829 = *v173;
                long long v1830 = v174;
                if (!v1831) {
                  char v1831 = 1;
                }
              }
              int v1713 = 0;
              int v1721 = 0;
              unsigned int v175 = 0;
              v1880 = v1882;
              unint64_t v1881 = 0x800000000;
              v1743 = (llvm::ConstantFP *)*((void *)v15[1] + 2);
              break;
          }
          break;
        }
LABEL_237:
        uint64_t v176 = (char *)v1851[1];
        uint64_t v177 = (char *)v1851[1];
        if (LODWORD(v1852[0]) >= 2)
        {
          char v178 = (char *)v1851[1] + 96;
          uint64_t v179 = 96 * LODWORD(v1852[0]) - 96;
          uint64_t v177 = (char *)v1851[1];
          do
          {
            if (*((_DWORD *)v177 + 1) < *((_DWORD *)v178 + 1)) {
              uint64_t v177 = v178;
            }
            v178 += 96;
            v179 -= 96;
          }
          while (v179);
        }
        uint64_t v180 = (char *)v1851[1] + 96 * LODWORD(v1852[0]);
        if (v177 == v180) {
          unsigned int v181 = 0;
        }
        else {
          unsigned int v181 = *((_DWORD *)v177 + 1) + 1;
        }
        if (v175 < v181)
        {
          v1877[0] = &v1878;
          v1877[1] = (void *)0x800000000;
          if (!LODWORD(v1852[0])) {
            goto LABEL_272;
          }
          unsigned int v182 = 0;
          uint64_t v183 = 96 * LODWORD(v1852[0]);
          uint64_t v184 = (char *)v1851[1];
          do
          {
            if (*((_DWORD *)v176 + 1) == v175)
            {
              if (v182 >= HIDWORD(v1877[1]))
              {
                uint64_t v189 = (char *)v1877[0] + 96 * v182;
                if (v1877[0] > v176 || v189 <= v176) {
                  sub_1CD423078();
                }
                sub_1CD423078();
              }
              uint64_t v185 = (char *)v1877[0] + 96 * LODWORD(v1877[1]);
              long long v186 = *(_OWORD *)v176;
              *((void *)v185 + 2) = *((void *)v176 + 2);
              *(_OWORD *)uint64_t v185 = v186;
              uint64_t v187 = v185 + 40;
              *((void *)v185 + 4) = 0x200000000;
              *((void *)v185 + 3) = v185 + 40;
              uint64_t v147 = (uint64_t)(v185 + 24);
              unsigned int v188 = *((_DWORD *)v176 + 8);
              if (v188 && (char *)v147 != v176 + 24)
              {
                if (v188 >= 3)
                {
                  *(_DWORD *)(v147 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v187, *((const void **)v176 + 3), 28 * *((unsigned int *)v176 + 8));
                *(_DWORD *)(v147 + 8) = v188;
              }
              unsigned int v182 = ++LODWORD(v1877[1]);
            }
            v176 += 96;
            v184 += 96;
            v183 -= 96;
          }
          while (v183);
          uint64_t v15 = v1770;
          if (!v182)
          {
LABEL_272:
            if (!v1721)
            {
              v1890 = (void *)257;
              LODWORD(v1891) = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v15 + 4))(v15, 68, &v1890, 1, 0, 0, 0);
              int v1713 = *(_DWORD *)(*(void *)(v197 + 32) + 4);
            }
            unint64_t v198 = v1881;
            unint64_t v199 = HIDWORD(v1881);
            int v1721 = 1;
            LODWORD(v147) = v1713;
            goto LABEL_460;
          }
          size_t v1759 = v182;
          uint64_t v191 = 96 * v182;
          uint64_t v192 = v191;
          uint64_t v193 = v1877[0];
          while ((*v193 - 1) > 1)
          {
            v193 += 24;
            v192 -= 96;
            if (!v192)
            {
              v1886 = v1888;
              uint64_t v1887 = 0x200000000;
              uint64_t v194 = (int *)((char *)v1877[0] + 20);
              do
              {
                int v195 = *v194;
                v194 += 24;
                sub_1CBE53460((uint64_t *)v1805, v195, (uint64_t)&v1890);
                if (v1887 >= (unint64_t)HIDWORD(v1887)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v1886 + v1887) = HIDWORD(v1890);
                int v196 = v1887 + 1;
                LODWORD(v1887) = v1887 + 1;
                v191 -= 96;
              }
              while (v191);
              if (LODWORD(v1877[1]) == 1 && *((_DWORD *)v1877[0] + 4) == 16 && *((_DWORD *)v1877[0] + 3) == 16)
              {
                *(void *)&long long v1883 = 129;
                DWORD2(v1883) = 0;
                uint64_t v311 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
                uint64_t v313 = *(llvm::ConstantInt **)v311;
                unsigned int v314 = *(_DWORD *)(v311 + 8);
                LODWORD(v1891) = v314 >> 8;
                if (v314 >> 8 >= 0x41) {
                  operator new[]();
                }
                v1890 = 0;
                uint64_t v315 = llvm::ConstantInt::get(v313, (llvm::LLVMContext *)&v1890, v312);
                if (v1891 >= 0x41 && v1890) {
                  MEMORY[0x1D25D9CB0](v1890, 0x1000C8000313F17);
                }
                (*((void (**)(unsigned __int8 **, long long *, void *))*v1770 + 2))(v1770, &v1883, v315);
                LODWORD(v1890) = *(_DWORD *)(*(void *)(v316 + 32) + 4);
                sub_1CD4231B4((uint64_t *)&v1886, (uint64_t)v1886, &v1890);
                int v196 = v1887;
              }
              uint64_t v274 = v1886;
              if (v196 == 2)
              {
                char v275 = 0;
                uint64_t v276 = 0;
                do
                {
                  char v277 = v275;
                  int v278 = v274[v276];
                  if ((v278 & 0x80000000) == 0
                    || (uint64_t v279 = v1770[3], v280 = v278 & 0x7FFFFFFF, v280 >= *((_DWORD *)v279 + 108))
                    || (*(void *)(*((void *)v279 + 53) + 8 * v280) & 0xFFFFFFFFFFFFFFF9) == 0)
                  {
                    *(void *)&long long v1883 = 129;
                    DWORD2(v1883) = 0;
                    LODWORD(v1890) = v274[v276];
                    LODWORD(v1892) = 0;
                    (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*v1770
                     + 4))(v1770, 19, &v1883, 1, &v1890, 1, 0);
                    v274[v276] = *(_DWORD *)(*(void *)(v281 + 32) + 4);
                  }
                  char v275 = 1;
                  uint64_t v276 = 1;
                }
                while ((v277 & 1) == 0);
                int v282 = v1887;
                uint64_t v283 = (int *)v1886;
                *(void *)&long long v1883 = 8388628;
                DWORD2(v1883) = 0;
                v1890 = &v1892;
                uint64_t v1891 = 0x800000000;
                if (v1887 >= 9) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v1887)
                {
                  uint64_t v284 = 0;
                  uint64_t v285 = 4 * v1887;
                  do
                  {
                    int v286 = *v283++;
                    uint64_t v287 = (_DWORD *)((char *)&v1892 + v284);
                    *uint64_t v287 = v286;
                    v287[4] = 0;
                    v284 += 24;
                    v285 -= 4;
                  }
                  while (v285);
                  int v288 = v1891;
                }
                else
                {
                  int v288 = 0;
                }
                LODWORD(v1891) = v288 + v282;
                (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, uint64_t *))*v1770 + 4))(v1770, 77, &v1883, 1, &v1892);
                uint64_t v304 = v303;
                if (v1890 != &v1892) {
                  free(v1890);
                }
                int v305 = *(_DWORD *)(*(void *)(v304 + 32) + 4);
                if (v305 < 0)
                {
                  uint64_t v306 = *((void *)v1770[1] + 5);
                  if ((v305 & 0x7FFFFFFFu) < *(_DWORD *)(v306 + 432))
                  {
                    uint64_t v307 = *(void *)(*(void *)(v306 + 424) + 8 * (v305 & 0x7FFFFFFF));
                    if (v307 != 257 && (v307 & 0xFFFFFFFFFFFFFFF9) != 0)
                    {
                      *(void *)&long long v1883 = 257;
                      DWORD2(v1883) = 0;
                      LODWORD(v1890) = v305;
                      LODWORD(v1892) = 0;
                      sub_1CC7382B0((uint64_t)v1770);
                      int v305 = *(_DWORD *)(*(void *)(v309 + 32) + 4);
                    }
                  }
                }
                *(void *)&long long v1883 = 257;
                DWORD2(v1883) = 0;
                LODWORD(v1890) = v305;
              }
              else
              {
                unsigned int v289 = *(_DWORD *)v1886;
                uint64_t v290 = (uint64_t)v1770[3];
                if ((*(_DWORD *)v1886 & 0x80000000) != 0
                  && (v289 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v290 + 432))
                {
                  unint64_t v291 = *(void *)(*(void *)(v290 + 424) + 8 * (v289 & 0x7FFFFFFF));
                }
                else
                {
                  unint64_t v291 = 0;
                }
                unint64_t v1788 = v291;
                uint64_t v292 = v1770[1];
                uint64_t v293 = (*(uint64_t (**)(void))(**((void **)v292 + 2) + 184))(*((void *)v292 + 2));
                uint64_t v294 = (*(uint64_t (**)(void))(**((void **)v292 + 2) + 176))(*((void *)v292 + 2));
                if ((v1788 & 0xFFFFFFFFFFFFFFF9) != 0)
                {
                  if (v1788)
                  {
                    unsigned int RegSizeInBits = v1788 >> 3;
                  }
                  else if ((v1788 & 4) != 0)
                  {
                    if ((v1788 & 2) != 0) {
                      unsigned int RegSizeInBits = (unsigned __int16)(v1788 >> 19);
                    }
                    else {
                      unsigned int RegSizeInBits = v1788 >> 19;
                    }
                  }
                  else
                  {
                    unsigned int RegSizeInBits = (unsigned __int16)(v1788 >> 3);
                  }
                }
                else if (v289 - 1 <= 0x3FFFFFFE)
                {
                  unsigned int RegSizeInBits = *(_DWORD *)(*(void *)(v294 + 264)
                                            + 24
                                            * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v293, v289, v294)+ 24)+ *(_DWORD *)(v294 + 272)* ((*(void *)(v294 + 248) - *(void *)(v294 + 240)) >> 3)));
                }
                else
                {
                  unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v294, v289, v290);
                }
                uint64_t v297 = sub_1CB8F1DC4(&v1788);
                if (v296 == 1) {
                if (v297 == 16)
                }
                {
                  unint64_t v1788 = 257;
                  *(void *)&long long v1883 = 257;
                  DWORD2(v1883) = 0;
                  LODWORD(v1890) = v289;
                  LODWORD(v1892) = 0;
                  uint64_t v15 = v1770;
                  (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*v1770
                   + 4))(v1770, 118, &v1883, 1, &v1890, 1, 0);
                  unsigned int v289 = *(_DWORD *)(*(void *)(v298 + 32) + 4);
                  unsigned int RegSizeInBits = 32;
                }
                else
                {
                  uint64_t v15 = v1770;
                }
                if ((v289 & 0x80000000) != 0)
                {
                  uint64_t v299 = *((void *)v15[1] + 5);
                  if ((v289 & 0x7FFFFFFF) < *(_DWORD *)(v299 + 432))
                  {
                    uint64_t v300 = *(void *)(*(void *)(v299 + 424) + 8 * (v289 & 0x7FFFFFFF));
                    if ((v300 & 0xFFFFFFFFFFFFFFF9) != 0 && v300 != ((8 * RegSizeInBits) | 1))
                    {
                      *(void *)&long long v1883 = (8 * RegSizeInBits) | 1;
                      DWORD2(v1883) = 0;
                      LODWORD(v1890) = v289;
                      LODWORD(v1892) = 0;
                      sub_1CC7382B0((uint64_t)v15);
                      unsigned int v289 = *(_DWORD *)(*(void *)(v302 + 32) + 4);
                    }
                  }
                }
                *(void *)&long long v1883 = (8 * RegSizeInBits) | 1;
                DWORD2(v1883) = 0;
                LODWORD(v1890) = v289;
              }
              LODWORD(v1892) = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*v15
               + 4))(v15, 19, &v1883, 1, &v1890, 1, 0);
              LODWORD(v147) = *(_DWORD *)(*(void *)(v310 + 32) + 4);
              if (v1886 != v1888) {
                free(v1886);
              }
LABEL_459:
              unint64_t v198 = v1881;
              unint64_t v199 = HIDWORD(v1881);
LABEL_460:
              if (v198 >= v199) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1880 + v198) = v147;
              LODWORD(v1881) = v1881 + 1;
              sub_1CBB4038C((char **)v1877);
              ++v175;
              goto LABEL_237;
            }
          }
          uint64_t v200 = 0;
          char v201 = 0;
          while (1)
          {
            uint64_t v202 = (int *)((char *)v1877[0] + 96 * v200);
            if (*v202) {
              break;
            }
            *(void *)&long long v1883 = 257;
            DWORD2(v1883) = 0;
            sub_1CBE53460((uint64_t *)v1805, *((_DWORD *)v1877[0] + 24 * v200 + 5), (uint64_t)&v1890);
            LODWORD(v1886) = HIDWORD(v1890);
            LODWORD(v1888[0]) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*v15 + 4))(v15, 118, &v1883, 1, &v1886, 1, 0);
            LODWORD(v147) = *(_DWORD *)(*(void *)(v221 + 32) + 4);
LABEL_367:
            ++v200;
            char v201 = 1;
            if (v200 == v1759) {
              goto LABEL_459;
            }
          }
          uint64_t v203 = (char *)v1877[0] + 96 * v200;
          LODWORD(v1788) = 0;
          HIDWORD(v1788) = v147;
          uint64_t v1790 = 0;
          uint64_t v1791 = 0;
          uint64_t v1789 = 0;
          char v1792 = v201;
          v1793[0] = *(_DWORD *)v1794;
          *(_DWORD *)((char *)v1793 + 3) = *(_DWORD *)&v1794[3];
          int v204 = *v202;
          int v1798 = 1;
          uint64_t v1799 = 0;
          uint64_t v1800 = 0;
          LOBYTE(v1890) = 0;
          char v1894 = 0;
          LOBYTE(v1886) = 0;
          char v1889 = 0;
          uint64_t v207 = *((void *)v203 + 3);
          uint64_t v206 = v203 + 24;
          uint64_t v205 = v207;
          v1797[0] = &v1890;
          v1797[1] = &v1886;
          uint64_t v208 = *((unsigned int *)v206 + 2);
          if (v208)
          {
            uint64_t v209 = 28 * v208;
            uint64_t v210 = (unsigned char *)(v205 + 24);
            do
            {
              if (*v210)
              {
                sub_1CBE53460((uint64_t *)v1805, *((_DWORD *)v210 - 1), (uint64_t)&v1883);
              }
              else
              {
                LOBYTE(v1883) = 0;
                LOBYTE(v1885) = 0;
              }
              uint64_t v211 = v1797[*((unsigned int *)v210 - 5)];
              uint64_t v212 = v1885;
              long long v213 = v1884;
              *(_OWORD *)uint64_t v211 = v1883;
              *(_OWORD *)(v211 + 16) = v213;
              *(void *)(v211 + 32) = v212;
              v210 += 28;
              v209 -= 28;
            }
            while (v209);
            uint64_t v214 = v15[1];
            uint64_t v215 = *((void *)v214 + 5);
            if (v1894)
            {
              if (!(_BYTE)v1890)
              {
                sub_1CC73C210(HIDWORD(v1890), *((void *)v214 + 5), (uint64_t)&v1883);
                if ((_BYTE)v1884)
                {
                  if (DWORD2(v1883) >= 0x41)
                  {
                    if ((void)v1883) {
                      MEMORY[0x1D25D9CB0](v1883, 0x1000C8000313F17);
                    }
                  }
                  else if ((uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883) <= 255)
                  {
                    LODWORD(v1890) = 1;
                    uint64_t v1891 = 0;
                    uint64_t v1892 = (uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883);
                    if (!v1894) {
                      char v1894 = 1;
                    }
                  }
                }
              }
              if (v1890 == 1)
              {
                unint64_t v216 = v1892;
                if (v1892 >= 256)
                {
                  *(void *)&long long v1883 = 129;
                  DWORD2(v1883) = 0;
                  uint64_t v217 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
                  uint64_t v218 = llvm::ConstantInt::get(v217, v216, (const llvm::APInt *)1);
                  (*((void (**)(unsigned __int8 **, long long *, void *))*v1770 + 2))(v1770, &v1883, v218);
                  int v220 = *(_DWORD *)(*(void *)(v219 + 32) + 4);
                  if (!v1894) {
                    char v1894 = 1;
                  }
                  LODWORD(v1890) = 0;
                  HIDWORD(v1890) = v220;
                  uint64_t v1892 = 0;
                  uint64_t v1893 = 0;
                  uint64_t v1891 = 0;
                }
              }
            }
          }
          else
          {
            uint64_t v215 = *((void *)v15[1] + 5);
          }
          if (v1889)
          {
            if (!(_BYTE)v1886)
            {
              sub_1CC73C210(HIDWORD(v1886), v215, (uint64_t)&v1883);
              if ((_BYTE)v1884)
              {
                if (DWORD2(v1883) >= 0x41)
                {
                  if ((void)v1883) {
                    MEMORY[0x1D25D9CB0](v1883, 0x1000C8000313F17);
                  }
                }
                else if ((uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883) <= 255)
                {
                  LODWORD(v1886) = 1;
                  uint64_t v1887 = 0;
                  v1888[0] = (uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883);
                  if (!v1889) {
                    char v1889 = 1;
                  }
                }
              }
            }
            if (v1886 == 1)
            {
              unint64_t v222 = v1888[0];
              if (v1888[0] >= 256)
              {
                *(void *)&long long v1883 = 129;
                DWORD2(v1883) = 0;
                uint64_t v223 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
                uint64_t v224 = llvm::ConstantInt::get(v223, v222, (const llvm::APInt *)1);
                (*((void (**)(unsigned __int8 **, long long *, void *))*v1770 + 2))(v1770, &v1883, v224);
                int v226 = *(_DWORD *)(*(void *)(v225 + 32) + 4);
                if (!v1889) {
                  char v1889 = 1;
                }
                LODWORD(v1886) = 0;
                HIDWORD(v1886) = v226;
                v1888[0] = 0;
                v1888[1] = 0;
                uint64_t v1887 = 0;
              }
            }
          }
          if (v1792)
          {
            if (!(_BYTE)v1788)
            {
              sub_1CC73C210(HIDWORD(v1788), v215, (uint64_t)&v1883);
              if ((_BYTE)v1884)
              {
                if (DWORD2(v1883) >= 0x41)
                {
                  if ((void)v1883) {
                    MEMORY[0x1D25D9CB0](v1883, 0x1000C8000313F17);
                  }
                }
                else if ((uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883) <= 255)
                {
                  LODWORD(v1788) = 1;
                  uint64_t v1789 = 0;
                  uint64_t v1790 = (uint64_t)((void)v1883 << -(uint64_t)DWORD2(v1883)) >> -(uint64_t)DWORD2(v1883);
                  if (!v1792) {
                    char v1792 = 1;
                  }
                }
              }
            }
            if (v1788 == 1)
            {
              unint64_t v227 = v1790;
              if (v1790 >= 256)
              {
                *(void *)&long long v1883 = 129;
                DWORD2(v1883) = 0;
                uint64_t v228 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
                uint64_t v229 = llvm::ConstantInt::get(v228, v227, (const llvm::APInt *)1);
                (*((void (**)(unsigned __int8 **, long long *, void *))*v1770 + 2))(v1770, &v1883, v229);
                int v231 = *(_DWORD *)(*(void *)(v230 + 32) + 4);
                if (!v1792) {
                  char v1792 = 1;
                }
                LODWORD(v1788) = 0;
                HIDWORD(v1788) = v231;
                uint64_t v1790 = 0;
                uint64_t v1791 = 0;
                uint64_t v1789 = 0;
              }
            }
          }
          switch(v204)
          {
            case 1:
              uint64_t v232 = 120;
              break;
            case 2:
              uint64_t v232 = 119;
              break;
            case 0:
              v969 = "Expected a pack kind";
              goto LABEL_1135;
            default:
              uint64_t v232 = 0;
              break;
          }
          if (v1886 == 1 || v1889 == 0) {
            int v234 = 1;
          }
          else {
            int v234 = 2;
          }
          if (v1890 == 1 || v1894 == 0) {
            int v236 = 1;
          }
          else {
            int v236 = 2;
          }
          LODWORD(v1883) = 0;
          *(void *)((char *)&v1883 + 4) = __PAIR64__(v234, v236);
          HIDWORD(v1883) = v1792 == 0;
          unsigned int v237 = sub_1CBE0418C(v232, 4, &v1883);
          uint64_t v238 = (uint64_t)v1770[3];
          int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v238, "", 0);
          *(void *)(*(void *)(v238 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66ABDD8;
          uint64_t v240 = *(void *)(v238 + 8);
          if (v240) {
            (*(void (**)(uint64_t))(*(void *)v240 + 24))(v240);
          }
          *(void *)&long long v1883 = &unk_1F25FDD00;
          *((void *)&v1883 + 1) = v1743;
          *((void *)&v1884 + 1) = &v1883;
          int v241 = sub_1CBD854F8((uint64_t)&v1883);
          if (*((long long **)&v1884 + 1) == &v1883)
          {
            (*(void (**)(long long *))(v1883 + 32))(&v1883);
          }
          else if (*((void *)&v1884 + 1))
          {
            (*(void (**)(void))(**((void **)&v1884 + 1) + 40))();
          }
          unint64_t v242 = sub_1CBE59368((uint64_t *)v206, v241);
          unint64_t v244 = v243;
          uint64_t v245 = (llvm::MachineFunction *)v1770[1];
          uint64_t v246 = *((void *)v1770[2] + 1);
          uint64_t v247 = v1770[4];
          uint64_t v1795 = (uint64_t)v247;
          if (v247) {
            llvm::MetadataTracking::track((uint64_t)&v1795, v247, 2);
          }
          unint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v245, v246 + 48 * v237, (unsigned __int8 **)&v1795, 0);
          if (!v1795)
          {
LABEL_346:
            uint64_t v249 = (unint64_t *)v1770[6];
            uint64_t v250 = *((void *)v1770[5] + 5);
            *((void *)MachineInstr + 3) = v250;
            uint64_t v251 = *(void *)(v250 + 32);
            uint64_t v252 = *((unsigned int *)MachineInstr + 10);
            if (v252)
            {
              uint64_t v263 = *((void *)MachineInstr + 4);
              uint64_t v264 = *(void *)(v251 + 40);
              uint64_t v265 = 32 * v252;
              do
              {
                if (!*(unsigned char *)v263)
                {
                  uint64_t v266 = *(unsigned int *)(v263 + 4);
                  if ((int)v266 >= 0) {
                    uint64_t v267 = (uint64_t *)(*(void *)(v264 + 272) + 8 * v266);
                  }
                  else {
                    uint64_t v267 = (uint64_t *)(*(void *)(v264 + 24) + 16 * (v266 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v268 = *v267;
                  if (*v267)
                  {
                    uint64_t v269 = *(void *)(v268 + 16);
                    *(void *)(v268 + 16) = v263;
                    *(void *)(v263 + 16) = v269;
                    if (*(unsigned char *)(v263 + 3))
                    {
                      *(void *)(v263 + 24) = v268;
                    }
                    else
                    {
                      *(void *)(v263 + 24) = 0;
                      uint64_t v267 = (uint64_t *)(v269 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v263 + 16) = v263;
                    *(void *)(v263 + 24) = 0;
                  }
                  *uint64_t v267 = v263;
                }
                v263 += 32;
                v265 -= 32;
              }
              while (v265);
            }
            uint64_t v253 = *(void *)(v251 + 728);
            if (v253) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v253 + 24))(v253, MachineInstr);
            }
            unint64_t v254 = *v249 & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t MachineInstr = v254 | *(void *)MachineInstr & 7;
            *((void *)MachineInstr + 1) = v249;
            *(void *)(v254 + 8) = MachineInstr;
            *uint64_t v249 = *v249 & 7 | (unint64_t)MachineInstr;
            uint64_t v255 = v1770[7];
            if (v255) {
              (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v255 + 24))(v255, MachineInstr);
            }
            *((void *)&v1883 + 1) = 0;
            long long v1884 = 0uLL;
            DWORD1(v1883) = IncompleteVirtualRegister;
            LODWORD(v1883) = 0x1000000;
            llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1883);
            LODWORD(v1883) = 1;
            *((void *)&v1883 + 1) = 0;
            *(void *)&long long v1884 = 0;
            llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1883);
            LODWORD(v1883) = 1;
            *((void *)&v1883 + 1) = 0;
            *(void *)&long long v1884 = (v242 >> 28) & 0xFF0 | v242 | ((unint64_t)v244 << 9) | (v244 >> 19) & 0x1FE000;
            llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1883);
            if (v1894)
            {
              llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1890);
              if (v1890 == 1) {
                goto LABEL_356;
              }
              LODWORD(v1883) = 1;
              *((void *)&v1883 + 1) = 0;
              *(void *)&long long v1884 = 0;
              uint64_t v256 = (const llvm::MachineOperand *)&v1883;
            }
            else
            {
              uint64_t v256 = (const llvm::MachineOperand *)&v1798;
            }
            llvm::MachineInstr::addOperand(MachineInstr, v245, v256);
LABEL_356:
            if (v1889)
            {
              llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1886);
              if (v1886 == 1) {
                goto LABEL_361;
              }
              LODWORD(v1883) = 1;
              *((void *)&v1883 + 1) = 0;
              *(void *)&long long v1884 = 0;
              uint64_t v257 = (const llvm::MachineOperand *)&v1883;
            }
            else
            {
              uint64_t v257 = (const llvm::MachineOperand *)&v1798;
            }
            llvm::MachineInstr::addOperand(MachineInstr, v245, v257);
LABEL_361:
            if (v1792)
            {
              llvm::MachineInstr::addOperand(MachineInstr, v245, (const llvm::MachineOperand *)&v1788);
              if (v1788 == 1)
              {
LABEL_366:
                uint64_t v259 = v1770[1];
                (*(void (**)(void))(**((void **)v259 + 2) + 184))(*((void *)v259 + 2));
                uint64_t v260 = (*(uint64_t (**)(void))(**((void **)v259 + 2) + 104))(*((void *)v259 + 2));
                uint64_t v261 = (void *)(*(uint64_t (**)(void))(**((void **)v259 + 2) + 176))(*((void *)v259 + 2));
                sub_1CC73B5D0(MachineInstr, v260, v261);
                uint64_t v1795 = 257;
                int v1796 = 0;
                *(void *)&long long v1883 = v245;
                *((void *)&v1883 + 1) = MachineInstr;
                uint64_t v15 = v1770;
                LODWORD(v1884) = 1;
                (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, long long *, uint64_t, void))*v15
                 + 4))(v15, 19, &v1795, 1, &v1883, 1, 0);
                LODWORD(v147) = *(_DWORD *)(*(void *)(v262 + 32) + 4);
                goto LABEL_367;
              }
              LODWORD(v1883) = 1;
              *((void *)&v1883 + 1) = 0;
              *(void *)&long long v1884 = 0;
              uint64_t v258 = (const llvm::MachineOperand *)&v1883;
            }
            else
            {
              uint64_t v258 = (const llvm::MachineOperand *)&v1798;
            }
            llvm::MachineInstr::addOperand(MachineInstr, v245, v258);
            goto LABEL_366;
          }
          int v270 = *(unsigned __int8 *)v1795;
          if ((v270 - 4) > 0x1E)
          {
            if ((v270 - 3) >= 0xFFFFFFFE) {
              uint64_t v273 = v1795;
            }
            else {
              uint64_t v273 = 0;
            }
            if ((v270 - 3) < 0xFFFFFFFE)
            {
              if (v270 == 3) {
                *(void *)(v1795 + 8) = 0;
              }
              goto LABEL_346;
            }
            unint64_t v272 = v273 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v1795 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1795 + 12)) {
              goto LABEL_346;
            }
            uint64_t v271 = *(void *)(v1795 + 16);
            if ((v271 & 4) == 0) {
              goto LABEL_346;
            }
            unint64_t v272 = v271 & 0xFFFFFFFFFFFFFFF8;
            if (!v272) {
              goto LABEL_346;
            }
          }
          *(void *)&long long v1883 = &v1795;
          sub_1CC5FA668(v272 + 16, &v1883);
          goto LABEL_346;
        }
        if (LODWORD(v1852[0]) >= 2)
        {
          unsigned int v317 = (char *)v1851[1] + 96;
          uint64_t v318 = 96 * LODWORD(v1852[0]) - 96;
          do
          {
            if (*((_DWORD *)v176 + 1) < *((_DWORD *)v317 + 1)) {
              uint64_t v176 = v317;
            }
            v317 += 96;
            v318 -= 96;
          }
          while (v318);
        }
        if (v176 == v180 || 32 * *((_DWORD *)v176 + 1) == -32)
        {
          unsigned int v322 = 0;
        }
        else
        {
          unint64_t v319 = (32 * *((_DWORD *)v176 + 1) + 32 - 1) | ((unint64_t)(32 * *((_DWORD *)v176 + 1) + 32 - 1) >> 1);
          unint64_t v320 = v319 | (v319 >> 2) | ((v319 | (v319 >> 2)) >> 4);
          unint64_t v321 = v320 | (v320 >> 8) | ((v320 | (v320 >> 8)) >> 16);
          unsigned int v322 = (HIDWORD(v321) | v321) + 1;
        }
        uint64_t v323 = (*(uint64_t (**)(llvm::ConstantFP *))(*(void *)v1743 + 176))(v1743);
        v1877[0] = &unk_1F25FDD00;
        v1877[1] = v1743;
        *((void *)&v1878 + 1) = v1877;
        unsigned int v324 = sub_1CBD854F8((uint64_t)v1877);
        if (*((void ***)&v1878 + 1) == v1877)
        {
          (*((void (**)(void **))v1877[0] + 4))(v1877);
        }
        else if (*((void *)&v1878 + 1))
        {
          (*(void (**)(void))(**((void **)&v1878 + 1) + 40))();
        }
        if (v324 >= 5) {
          uint64_t v325 = 269;
        }
        else {
          uint64_t v325 = 19;
        }
        if (v322)
        {
          uint64_t v326 = *(void **)(*(void *)(v323 + 240) + 8 * sub_1CBE52FF4(v322));
          unsigned int v327 = v1881;
          unsigned int v328 = 32 * v1881;
          if (32 * (int)v1881 < v322)
          {
            int v329 = v1713;
            int v330 = v1721;
            do
            {
              if (!v330)
              {
                v1877[0] = (void *)257;
                LODWORD(v1877[1]) = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
                 + 4))(v1770, 68, v1877, 1, 0, 0, 0);
                int v329 = *(_DWORD *)(*(void *)(v331 + 32) + 4);
                unsigned int v327 = v1881;
              }
              if (v327 >= HIDWORD(v1881)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1880 + v327) = v329;
              unsigned int v327 = v1881 + 1;
              LODWORD(v1881) = v1881 + 1;
              v328 += 32;
              int v330 = 1;
            }
            while (v328 < v322);
          }
          if (v327 == 1)
          {
            int v332 = *(_DWORD *)v1880;
            v1890 = v326;
            LODWORD(v1891) = 2;
            LODWORD(v1877[0]) = v332;
            LODWORD(v1878) = 0;
            unint64_t v333 = v1770;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, v325, &v1890, 1, v1877, 1, 0);
          }
          else
          {
            v1890 = (void *)((8 * (unsigned __int16)v327) | 0x1000004u);
            LODWORD(v1891) = 0;
            uint64_t v336 = (int *)v1880;
            v1877[0] = &v1878;
            v1877[1] = (void *)0x800000000;
            unint64_t v333 = v1770;
            if (v327 >= 9) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v327)
            {
              uint64_t v337 = 0;
              uint64_t v338 = 4 * v327;
              do
              {
                int v339 = *v336++;
                long long v340 = (_DWORD *)((char *)&v1878 + v337);
                _DWORD *v340 = v339;
                v340[4] = 0;
                v337 += 24;
                v338 -= 4;
              }
              while (v338);
              int v341 = (int)v1877[1];
            }
            else
            {
              int v341 = 0;
            }
            LODWORD(v1877[1]) = v341 + v327;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, long long *))*v1770 + 4))(v1770, 77, &v1890, 1, &v1878);
            uint64_t v396 = v395;
            if (v1877[0] != &v1878) {
              free(v1877[0]);
            }
            int v397 = *(_DWORD *)(*(void *)(v396 + 32) + 4);
            v1890 = v326;
            LODWORD(v1891) = 2;
            LODWORD(v1877[0]) = v397;
            LODWORD(v1878) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 19, &v1890, 1, v1877, 1, 0);
          }
          HIDWORD(v1890) = *(_DWORD *)(*(void *)(v334 + 32) + 4);
          LODWORD(v1890) = 0;
          uint64_t v1893 = 0;
          uint64_t v1891 = 0;
          uint64_t v1892 = 0;
        }
        else
        {
          v1886 = *(void **)(*(void *)(v323 + 240) + 112);
          LODWORD(v1887) = 2;
          int v335 = v1713;
          if (v1721)
          {
            unint64_t v333 = v1770;
          }
          else
          {
            v1877[0] = (void *)257;
            LODWORD(v1877[1]) = 0;
            unint64_t v333 = v1770;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770 + 4))(v1770, 68, v1877, 1, 0, 0, 0);
            int v335 = *(_DWORD *)(*(void *)(v342 + 32) + 4);
          }
          LODWORD(v1877[0]) = v335;
          LODWORD(v1878) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v333 + 4))(v333, v325, &v1886, 1, v1877, 1, 0);
          int v344 = *(_DWORD *)(*(void *)(v343 + 32) + 4);
          uint64_t v1891 = 0;
          uint64_t v1892 = 0;
          uint64_t v1893 = 0;
          HIDWORD(v1890) = v344;
          LODWORD(v1890) = 0x2000000;
        }
        if (v1880 != v1882) {
          free(v1880);
        }
        uint64_t v398 = (llvm::MachineFunction *)v333[1];
        uint64_t v399 = 227568;
        if (!v1785) {
          uint64_t v399 = 227616;
        }
        uint64_t v400 = *((void *)v333[2] + 1) + v399;
        uint64_t v401 = v333[4];
        v1880 = v401;
        if (v401) {
          llvm::MetadataTracking::track((uint64_t)&v1880, v401, 2);
        }
        uint64_t v402 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v398, v400, (unsigned __int8 **)&v1880, 0);
        if (!v1880) {
          goto LABEL_540;
        }
        int v1654 = *(unsigned __int8 *)v1880;
        if ((v1654 - 4) > 0x1E)
        {
          if ((v1654 - 3) >= 0xFFFFFFFE) {
            v1657 = v1880;
          }
          else {
            v1657 = 0;
          }
          if ((v1654 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1656 = (unint64_t)v1657 + 8;
LABEL_1971:
            v1877[0] = &v1880;
            sub_1CC5FA668(v1656 + 16, v1877);
            unint64_t v333 = v1770;
            goto LABEL_540;
          }
          unint64_t v333 = v1770;
          if (v1654 == 3) {
            *((void *)v1880 + 1) = 0;
          }
        }
        else
        {
          unint64_t v333 = v1770;
          if ((*((unsigned char *)v1880 + 1) & 0x7F) == 2 || *((_DWORD *)v1880 + 3))
          {
            uint64_t v1655 = *((void *)v1880 + 2);
            if ((v1655 & 4) != 0)
            {
              unint64_t v1656 = v1655 & 0xFFFFFFFFFFFFFFF8;
              if (v1656) {
                goto LABEL_1971;
              }
            }
          }
        }
LABEL_540:
        uint64_t v403 = (uint64_t *)v333[6];
        uint64_t v404 = *((void *)v333[5] + 5);
        *(void *)(v402 + 24) = v404;
        uint64_t v405 = *(void *)(v404 + 32);
        uint64_t v406 = *(unsigned int *)(v402 + 40);
        if (v406)
        {
          uint64_t v464 = *(void *)(v402 + 32);
          uint64_t v465 = *(void *)(v405 + 40);
          uint64_t v466 = 32 * v406;
          do
          {
            if (!*(unsigned char *)v464)
            {
              uint64_t v467 = *(unsigned int *)(v464 + 4);
              if ((int)v467 >= 0) {
                uint64_t v468 = (uint64_t *)(*(void *)(v465 + 272) + 8 * v467);
              }
              else {
                uint64_t v468 = (uint64_t *)(*(void *)(v465 + 24) + 16 * (v467 & 0x7FFFFFFF) + 8);
              }
              uint64_t v469 = *v468;
              if (*v468)
              {
                uint64_t v470 = *(void *)(v469 + 16);
                *(void *)(v469 + 16) = v464;
                *(void *)(v464 + 16) = v470;
                if (*(unsigned char *)(v464 + 3))
                {
                  *(void *)(v464 + 24) = v469;
                }
                else
                {
                  *(void *)(v464 + 24) = 0;
                  uint64_t v468 = (uint64_t *)(v470 + 24);
                }
              }
              else
              {
                *(void *)(v464 + 16) = v464;
                *(void *)(v464 + 24) = 0;
              }
              *uint64_t v468 = v464;
            }
            v464 += 32;
            v466 -= 32;
          }
          while (v466);
        }
        uint64_t v407 = *(void *)(v405 + 728);
        if (v407) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v407 + 24))(v407, v402);
        }
        unint64_t v408 = *v403 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v402 = v408 | *(void *)v402 & 7;
        *(void *)(v402 + 8) = v403;
        *(void *)(v408 + 8) = v402;
        *uint64_t v403 = *v403 & 7 | v402;
        uint64_t v409 = v333[7];
        if (v409) {
          (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)v409 + 24))(v409, v402);
        }
        LODWORD(v1877[0]) = 1;
        *(void *)&long long v1878 = 0;
        v1877[1] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
        LODWORD(v1877[0]) = 1;
        v1877[1] = 0;
        *(void *)&long long v1878 = v1774;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)&v1775);
        LODWORD(v1877[0]) = 1;
        *(void *)&long long v1878 = 0;
        v1877[1] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
        if (v1785)
        {
          if (v1784 > 0x40) {
            uint64_t v410 = *v1783;
          }
          else {
            uint64_t v410 = (uint64_t)((void)v1783 << -(uint64_t)v1784) >> -(uint64_t)v1784;
          }
          uint64_t v411 = (uint64_t)v1710;
          LODWORD(v1877[0]) = 1;
          v1877[1] = 0;
          *(void *)&long long v1878 = v410;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
        }
        else
        {
          long long v1878 = 0uLL;
          v1877[1] = 0;
          HIDWORD(v1877[0]) = v1701;
          LODWORD(v1877[0]) = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
          LODWORD(v1877[0]) = 1;
          *(void *)&long long v1878 = 0;
          v1877[1] = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
          uint64_t v411 = (uint64_t)v1710;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)&v1890);
        LODWORD(v1877[0]) = 1;
        *(void *)&long long v1878 = 0;
        v1877[1] = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)v1877);
        sub_1CC73B5D0((void *)v402, v1708, v1705);
        uint64_t v412 = *(void *)(v411 + 48);
        if (!v412)
        {
          uint64_t v412 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v411 + 8) + 216))(*(void *)(v411 + 8), v411 + 128, v411);
          *(void *)(v411 + 48) = v412;
        }
        if (v1702)
        {
          uint64_t v413 = sub_1CBB389E0(v412, (uint64_t)v1702, v411);
          *(void *)&long long v1771 = v413 | 4;
          *((void *)&v1771 + 1) = 0;
          char v1773 = 0;
          if (v413) {
            int v414 = *(_DWORD *)(v413 + 12);
          }
          else {
            int v414 = 0;
          }
        }
        else
        {
          int v414 = 0;
          long long v1771 = xmmword_1CD91CB40;
          char v1773 = 0;
        }
        int v1772 = v414;
        long long v1878 = 0u;
        *(_OWORD *)v1877 = 0u;
        v1877[0] = (void *)llvm::MachineFunction::getMachineMemOperand(v411, (uint64_t)&v1771, 2, -1, 2, (long long *)v1877, 0, 1, 0, 0, 0);
        llvm::MachineInstr::setMemRefs(v402, (uint64_t *)v398, v1877, 1);
        llvm::MachineInstr::eraseFromParent(v1720);
        if (v1801 != &v1803) {
          free(v1801);
        }
        if (v1823 != v1825) {
          free(v1823);
        }
        if (v1815 != v1817) {
          free(v1815);
        }
        if (v1812 != v1814) {
          free(v1812);
        }
        if ((uint64_t *)v1805[0] != v1806) {
          free(v1805[0]);
        }
        uint64_t v415 = (char *)v1851[1];
        if (LODWORD(v1852[0]))
        {
          uint64_t v416 = 96 * LODWORD(v1852[0]);
          do
          {
            unint64_t v417 = *(char **)&v415[v416 - 72];
            if (&v415[v416 - 56] != v417) {
              free(v417);
            }
            v416 -= 96;
          }
          while (v416);
          uint64_t v415 = (char *)v1851[1];
        }
        if (v415 != (char *)v1852 + 8) {
          free(v415);
        }
        if (!v1785) {
          return 1;
        }
        if (v1784 < 0x41) {
          return 1;
        }
        uint64_t v418 = v1783;
        if (!v1783) {
          return 1;
        }
LABEL_579:
        MEMORY[0x1D25D9CB0](v418, 0x1000C8000313F17);
        return 1;
      case 2374:
      case 2375:
        uint64_t v542 = *(_DWORD **)(v1 + 32);
        int v543 = v542[1];
        int v544 = v542[17];
        int v545 = v542[25];
        int v546 = v542[33];
        v1805[0] = (llvm::MachineInstr *)513;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v544;
        LODWORD(v1852[0]) = 0;
        uint64_t v547 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                        + 4))(v1770, 80, v1805, 1, v1851, 1, 0);
        uint64_t v548 = 0;
        *(int64x2_t *)v1805 = vdupq_n_s64(0x81uLL);
        *(_OWORD *)v1806 = *(_OWORD *)v1805;
        v1877[0] = v547;
        v1877[1] = v549;
        LODWORD(v1878) = 1;
        v1851[0] = v1852;
        v1851[1] = (void *)0x800000000;
        uint64_t v550 = 2;
        do
        {
          uint64_t v551 = &v1851[v550];
          *uint64_t v551 = v1805[v548];
          *((_DWORD *)v551 + 2) = 0;
          v550 += 2;
          ++v548;
        }
        while (v548 != 4);
        LODWORD(v1851[1]) += 4;
        (*((void (**)(unsigned __int8 **, uint64_t, void *))*v1770 + 4))(v1770, 74, v1851[0]);
        uint64_t v553 = v552;
        if (v1851[0] != v1852) {
          free(v1851[0]);
        }
        int v554 = *(_DWORD *)(*(void *)(v553 + 32) + 4);
        v1805[0] = (llvm::MachineInstr *)257;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v554;
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v546;
        DWORD2(v1852[1]) = 0;
        uint64_t v555 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                        + 4))(v1770, 76, v1805, 1, v1851, 2, 0);
        unsigned int v557 = v556;
        if (v13 == 2375)
        {
          int v1761 = v545;
          uint64_t v558 = *(void *)(v1 + 32);
          int v559 = *(_DWORD *)(v558 + 164);
          int v560 = *(_DWORD *)(v558 + 196);
          v1877[0] = (void *)129;
          LODWORD(v1877[1]) = 0;
          uint64_t v561 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          size_t v563 = *(llvm::ConstantInt **)v561;
          unsigned int v564 = *(_DWORD *)(v561 + 8);
          LODWORD(v1851[1]) = v564 >> 8;
          if (v564 >> 8 > 0x40) {
            operator new[]();
          }
          if (v564 <= 0xFF) {
            LOBYTE(v565) = 0;
          }
          else {
            unint64_t v565 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v564) + 63);
          }
          v1851[0] = (void *)(v565 & 1);
          int v1767 = v543;
          unsigned int v566 = llvm::ConstantInt::get(v563, (llvm::LLVMContext *)v1851, v562);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          uint64_t v567 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, v1877, v566);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v560;
          LODWORD(v1852[0]) = 0;
          *((void *)&v1852[0] + 1) = v567;
          *(void *)&v1852[1] = v568;
          DWORD2(v1852[1]) = 1;
          unint64_t v569 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                          + 4))(v1770, 46, v1805, 1, v1851, 2, 0);
          int v571 = v570;
          v1851[0] = (void *)129;
          LODWORD(v1851[1]) = 0;
          v572 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
                          + 4))(v1770, 4335, v1851, 1, 0, 0, 0);
          uint64_t v574 = v573;
          v1877[0] = v572;
          v1877[1] = v573;
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v573, (llvm::MachineFunction *)v572, (const llvm::MachineOperand *)v1851);
          int v575 = *(_DWORD *)(v571[4] + 4);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v575;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v574, (llvm::MachineFunction *)v572, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v574, (llvm::MachineFunction *)v572, (const llvm::MachineOperand *)v1851);
          sub_1CBA318C8((uint64_t)v1877);
          v1890 = (void *)129;
          LODWORD(v1891) = 0;
          uint64_t v576 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          uint64_t v578 = *(llvm::ConstantInt **)v576;
          unsigned int v579 = *(_DWORD *)(v576 + 8);
          LODWORD(v1851[1]) = v579 >> 8;
          if (v579 >> 8 > 0x40) {
            operator new[]();
          }
          if (v579 <= 0xFF) {
            LOBYTE(v580) = 0;
          }
          else {
            unint64_t v580 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v579) + 63);
          }
          v1851[0] = (void *)(v580 & 1);
          unsigned int v581 = llvm::ConstantInt::get(v578, (llvm::LLVMContext *)v1851, v577);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          uint64_t v582 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v581);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          *(_OWORD *)v1851 = *(_OWORD *)v1877;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v582;
          *(void *)&v1852[1] = v583;
          DWORD2(v1852[1]) = 1;
          v1877[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                              + 4))(v1770, 45, v1805, 1, v1851, 2, 0);
          v1877[1] = v584;
          v1890 = (void *)129;
          LODWORD(v1891) = 0;
          uint64_t v585 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          int v587 = *(llvm::ConstantInt **)v585;
          unsigned int v588 = *(_DWORD *)(v585 + 8);
          LODWORD(v1851[1]) = v588 >> 8;
          if (v588 >> 8 > 0x40) {
            operator new[]();
          }
          if (v588 <= 0xFF) {
            LOBYTE(v589) = 0;
          }
          else {
            unint64_t v589 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v588) + 63);
          }
          v1851[0] = (void *)(v589 & 1);
          unsigned int v590 = llvm::ConstantInt::get(v587, (llvm::LLVMContext *)v1851, v586);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          unint64_t v591 = v1770;
          uint64_t v592 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v590);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v559;
          LODWORD(v1852[0]) = 0;
          *((void *)&v1852[0] + 1) = v592;
          *(void *)&v1852[1] = v593;
          DWORD2(v1852[1]) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v591
           + 4))(v591, 46, v1805, 1, v1851, 2, 0);
          int v595 = *(_DWORD *)(*(void *)(v594 + 32) + 4);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v595;
          LODWORD(v1852[0]) = 0;
          *(_OWORD *)((char *)v1852 + 8) = *(_OWORD *)v1877;
          DWORD2(v1852[1]) = 1;
          char v596 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v591
                          + 4))(v591, 127, v1805, 1, v1851, 2, 0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v596;
          v1851[1] = v597;
          LODWORD(v1852[0]) = 1;
          uint64_t v598 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v591
                          + 4))(v591, 126, v1805, 1, v1851, 1, 0);
          uint64_t v600 = v599;
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v569;
          v1851[1] = v571;
          LODWORD(v1852[0]) = 1;
          uint64_t v601 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v591
                  + 4))(v591, 126, v1805, 1, v1851, 1, 0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v598;
          v1851[1] = v600;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v601;
          *(void *)&v1852[1] = v602;
          DWORD2(v1852[1]) = 1;
          int v603 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v591
                          + 4))(v591, 66, v1805, 1, v1851, 2, 0);
          v1890 = (void *)257;
          LODWORD(v1891) = 0;
          v1851[0] = v603;
          v1851[1] = v604;
          LODWORD(v1852[0]) = 1;
          unint64_t v1862 = 257;
          LODWORD(v1863) = 0;
          uint64_t v605 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x20);
          int v607 = *(llvm::ConstantInt **)v605;
          unsigned int v608 = *(_DWORD *)(v605 + 8);
          LODWORD(v1805[1]) = v608 >> 8;
          if (v608 >> 8 > 0x40) {
            operator new[]();
          }
          if (v608 <= 0xFF) {
            LOBYTE(v609) = 0;
          }
          else {
            unint64_t v609 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v608) + 63);
          }
          v1805[0] = (llvm::MachineInstr *)(v609 & 0xF);
          uint64_t v610 = llvm::ConstantInt::get(v607, (llvm::LLVMContext *)v1805, v606);
          if (LODWORD(v1805[1]) >= 0x41 && v1805[0]) {
            MEMORY[0x1D25D9CB0](v1805[0], 0x1000C8000313F17);
          }
          *((void *)&v1852[0] + 1) = (*((uint64_t (**)(unsigned __int8 **, unint64_t *, void *))*v1770
                                        + 2))(v1770, &v1862, v610);
          *(void *)&v1852[1] = v611;
          DWORD2(v1852[1]) = 1;
          uint64_t v612 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                          + 4))(v1770, 127, &v1890, 1, v1851, 2, 0);
          long long v614 = v613;
          v1890 = (void *)129;
          LODWORD(v1891) = 0;
          *(_OWORD *)v1851 = *(_OWORD *)v1877;
          LODWORD(v1852[0]) = 1;
          unint64_t v1862 = 129;
          LODWORD(v1863) = 0;
          uint64_t v615 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          long long v617 = *(llvm::ConstantInt **)v615;
          unsigned int v618 = *(_DWORD *)(v615 + 8);
          LODWORD(v1805[1]) = v618 >> 8;
          if (v618 >> 8 > 0x40) {
            operator new[]();
          }
          if (v618 <= 0xFF) {
            LOBYTE(v619) = 0;
          }
          else {
            unint64_t v619 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v618) + 63);
          }
          v1805[0] = (llvm::MachineInstr *)(v619 & 4);
          uint64_t v620 = llvm::ConstantInt::get(v617, (llvm::LLVMContext *)v1805, v616);
          if (LODWORD(v1805[1]) >= 0x41 && v1805[0]) {
            MEMORY[0x1D25D9CB0](v1805[0], 0x1000C8000313F17);
          }
          uint64_t v621 = v1770;
          *((void *)&v1852[0] + 1) = (*((uint64_t (**)(unsigned __int8 **, unint64_t *, void *))*v1770
                                        + 2))(v1770, &v1862, v620);
          *(void *)&v1852[1] = v622;
          DWORD2(v1852[1]) = 1;
          uint64_t v623 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v621
                          + 4))(v621, 127, &v1890, 1, v1851, 2, 0);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v623;
          v1851[1] = v624;
          LODWORD(v1852[0]) = 1;
          DWORD2(v1852[0]) = v1761;
          DWORD2(v1852[1]) = 0;
          uint64_t v625 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v621
                          + 4))(v621, 66, v1805, 1, v1851, 2, 0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v625;
          v1851[1] = v626;
          LODWORD(v1852[0]) = 1;
          uint64_t v627 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v621
                  + 4))(v621, 126, v1805, 1, v1851, 1, 0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v612;
          v1851[1] = v614;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v627;
          *(void *)&v1852[1] = v628;
          DWORD2(v1852[1]) = 1;
          uint64_t v629 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v621
                  + 4))(v621, 66, v1805, 1, v1851, 2, 0);
          LODWORD(v1805[0]) = v1767;
          LODWORD(v1805[1]) = 1;
          v1851[0] = v555;
          v1851[1] = v557;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v629;
          *(void *)&v1852[1] = v630;
          DWORD2(v1852[1]) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 76, v1805, 1, v1851, 2, 0);
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v545;
          LODWORD(v1852[0]) = 0;
          uint64_t v944 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                  + 4))(v1770, 126, v1805, 1, v1851, 1, 0);
          LODWORD(v1805[0]) = v543;
          LODWORD(v1805[1]) = 1;
          v1851[0] = v555;
          v1851[1] = v557;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v944;
          *(void *)&v1852[1] = v945;
          DWORD2(v1852[1]) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 76, v1805, 1, v1851, 2, 0);
        }
        goto LABEL_1056;
      case 2419:
      case 2420:
        v969 = "AGX3 does not support agx2.map.* intrinsics";
        goto LABEL_1135;
      case 2424:
        sub_1CC73C210(*(_DWORD *)(*(void *)(v1 + 32) + 36), v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          v1052 = v1770;
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            unint64_t v1187 = 0;
            uint64_t v1188 = 0;
            v1052 = v1770;
          }
          else
          {
            unint64_t v1187 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v1188 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
          }
          unint64_t v1051 = v1188 | v1187;
        }
        else
        {
          unint64_t v1051 = 0;
          v1052 = v1770;
        }
        v1189 = (llvm::MachineFunction *)v1052[1];
        uint64_t v1190 = *((void *)v1052[2] + 1) + 296016;
        v1191 = (llvm::MachineInstr *)v1052[4];
        v1805[0] = v1191;
        if (v1191) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v1191, 2);
        }
        v1192 = llvm::MachineFunction::CreateMachineInstr(v1189, v1190, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_1338;
        }
        int v1688 = *(unsigned __int8 *)v1805[0];
        if ((v1688 - 4) > 0x1E)
        {
          if ((v1688 - 3) >= 0xFFFFFFFE) {
            v1700 = v1805[0];
          }
          else {
            v1700 = 0;
          }
          if ((v1688 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1690 = (unint64_t)v1700 + 8;
LABEL_2128:
            v1851[0] = v1805;
            sub_1CC5FA668(v1690 + 16, v1851);
            v1052 = v1770;
            goto LABEL_1338;
          }
          v1052 = v1770;
          if (v1688 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else
        {
          v1052 = v1770;
          if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
          {
            uint64_t v1689 = *((void *)v1805[0] + 2);
            if ((v1689 & 4) != 0)
            {
              unint64_t v1690 = v1689 & 0xFFFFFFFFFFFFFFF8;
              if (v1690) {
                goto LABEL_2128;
              }
            }
          }
        }
LABEL_1338:
        v1193 = (unint64_t *)v1052[6];
        uint64_t v1194 = *((void *)v1052[5] + 5);
        *((void *)v1192 + 3) = v1194;
        uint64_t v1195 = *(void *)(v1194 + 32);
        uint64_t v1196 = *((unsigned int *)v1192 + 10);
        if (v1196)
        {
          uint64_t v1506 = *((void *)v1192 + 4);
          uint64_t v1507 = *(void *)(v1195 + 40);
          uint64_t v1508 = 32 * v1196;
          v1052 = v1770;
          do
          {
            if (!*(unsigned char *)v1506)
            {
              uint64_t v1509 = *(unsigned int *)(v1506 + 4);
              if ((int)v1509 >= 0) {
                v1510 = (uint64_t *)(*(void *)(v1507 + 272) + 8 * v1509);
              }
              else {
                v1510 = (uint64_t *)(*(void *)(v1507 + 24) + 16 * (v1509 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1511 = *v1510;
              if (*v1510)
              {
                uint64_t v1512 = *(void *)(v1511 + 16);
                *(void *)(v1511 + 16) = v1506;
                *(void *)(v1506 + 16) = v1512;
                if (*(unsigned char *)(v1506 + 3))
                {
                  *(void *)(v1506 + 24) = v1511;
                }
                else
                {
                  *(void *)(v1506 + 24) = 0;
                  v1510 = (uint64_t *)(v1512 + 24);
                }
              }
              else
              {
                *(void *)(v1506 + 16) = v1506;
                *(void *)(v1506 + 24) = 0;
              }
              uint64_t *v1510 = v1506;
            }
            v1506 += 32;
            v1508 -= 32;
          }
          while (v1508);
        }
        uint64_t v1197 = *(void *)(v1195 + 728);
        if (v1197) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1197 + 24))(v1197, v1192);
        }
        unint64_t v1198 = *v1193 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v1192 = v1198 | *(void *)v1192 & 7;
        *((void *)v1192 + 1) = v1193;
        *(void *)(v1198 + 8) = v1192;
        unint64_t *v1193 = *v1193 & 7 | (unint64_t)v1192;
        v1199 = v1052[7];
        if (v1199) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v1199 + 24))(v1199, v1192);
        }
        uint64_t v25 = 1;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v1192, v1189, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        v1851[1] = 0;
        *(void *)&v1852[0] = v1051;
        v991 = v1192;
        v992 = v1189;
LABEL_1344:
        llvm::MachineInstr::addOperand(v991, v992, (const llvm::MachineOperand *)v1851);
        goto LABEL_1345;
      case 2426:
      case 2427:
      case 2428:
      case 2429:
      case 2430:
      case 2431:
      case 2432:
      case 2433:
      case 2434:
      case 2435:
      case 2436:
      case 2437:
      case 2438:
      case 2439:
      case 2440:
      case 2441:
        uint64_t v74 = *(void *)(v1 + 32);
        int v75 = *(_DWORD *)(v74 + 4);
        unsigned int v76 = *(_DWORD *)(v74 + 68);
        unsigned int v77 = *(_DWORD *)(v74 + 32 * (*(_DWORD *)(v1 + 40) - 1) + 4);
        v1805[0] = (llvm::MachineInstr *)v1806;
        v1805[1] = (llvm::MachineInstr *)0x400000000;
        uint64_t v78 = v1766;
        if ((v77 & 0x80000000) == 0
          || (v77 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v1766 + 432)
          || ((*(void *)(*(void *)(v1766 + 424) + 8 * (v77 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
            ? (BOOL v79 = (*(void *)(*(void *)(v1766 + 424) + 8 * (v77 & 0x7FFFFFFF)) & 4) == 0)
            : (BOOL v79 = 1),
              v79))
        {
          LODWORD(v1806[0]) = v77;
          LODWORD(v1805[1]) = 1;
        }
        else
        {
          sub_1CBBB1038(v77, v1766, (uint64_t)v1770, (uint64_t)v1805);
        }
        sub_1CC73C210(v76, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            int v139 = 0;
            int v140 = 0;
            uint64_t v78 = v1766;
          }
          else
          {
            int v139 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFF00;
            int v140 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
          }
          int v80 = v140 | v139;
        }
        else
        {
          int v80 = 0;
        }
        uint64_t v141 = *(unsigned int *)(v1 + 40);
        uint64_t v142 = *(void *)(v1 + 32);
        if (!v141) {
          goto LABEL_186;
        }
        uint64_t v143 = 0;
        uint64_t v144 = *(unsigned __int8 **)(v1 + 32);
        while (1)
        {
          int v145 = *v144;
          v144 += 32;
          if (v145 == 17) {
            break;
          }
          if (v141 == ++v143)
          {
LABEL_186:
            LODWORD(v143) = -1;
            break;
          }
        }
        unint64_t v146 = 1;
        switch(*(_DWORD *)(v142 + 32 * v143 + 16))
        {
          case 0x97E:
          case 0x97F:
          case 0x980:
          case 0x981:
            unint64_t v146 = 2;
            break;
          case 0x982:
          case 0x983:
          case 0x984:
          case 0x985:
            unint64_t v146 = 3;
            break;
          case 0x986:
          case 0x987:
          case 0x988:
          case 0x989:
            int v449 = v80 - 8;
            if (v80 - 8) <= 8 && ((0x1B1u >> v449))
            {
              uint8x8_t v1009 = (uint8x8_t)vcnt_s8((int8x8_t)dword_1CDC6D388[v449]);
              v1009.i16[0] = vaddlv_u8(v1009);
              unint64_t v146 = v1009.u32[0];
            }
            else
            {
              unint64_t v146 = 4;
            }
            break;
          default:
            break;
        }
        sub_1CC73C210(*(_DWORD *)(v142 + 100), v78, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            uint64_t v1012 = 0;
            uint64_t v1011 = 0;
            uint64_t v78 = v1766;
          }
          else
          {
            uint64_t v1011 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
            uint64_t v1012 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFF00;
          }
          uint64_t v1010 = v1011 | v1012;
        }
        else
        {
          uint64_t v1010 = 0;
        }
        sub_1CBBDF5D8((uint64_t)v1805, v146);
        if (((1 << v80) & 0x4F0) != 0)
        {
          v1851[0] = v1852;
          v1851[1] = (void *)0x400000000;
          if (LODWORD(v1805[1])) {
            sub_1CB927A18((uint64_t)v1851, (uint64_t)v1805);
          }
          sub_1CBBD8F50((uint64_t)v1877, (uint64_t)v1851, v76, v80, v1010, (llvm::IntegerType *****)v1770);
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
          if (LODWORD(v1877[1]) == 1)
          {
            LODWORD(v1862) = v75;
            LODWORD(v1863) = 1;
            LODWORD(v1890) = *(_DWORD *)v1877[0];
            LODWORD(v1892) = 0;
            sub_1CC738034(v1770, 118, &v1862, (int *)&v1890);
          }
          else if (v75 < 0 {
                 && (v75 & 0x7FFFFFFFu) < *(_DWORD *)(v78 + 432)
          }
                 && (unint64_t v1020 = *(void *)(*(void *)(v78 + 424) + 8 * (v75 & 0x7FFFFFFF)),
                     v1880 = (void *)v1020,
                     (v1020 & 0xFFFFFFFFFFFFFFF9) != 0)
                 && (v1020 & 4) != 0)
          {
            unsigned int v1022 = sub_1CB8F1DC4((unint64_t *)&v1880);
            if (v1021 == 1) {
            v1890 = (void *)((8 * v1022) | 1);
            }
            LODWORD(v1891) = 0;
            v1023 = (void *)sub_1CC73661C((uint64_t)v1770, (uint64_t)&v1890, (int *)v1877[0], LODWORD(v1877[1]));
            LODWORD(v1862) = v75;
            LODWORD(v1863) = 1;
            v1890 = v1023;
            uint64_t v1891 = v1024;
            LODWORD(v1892) = 1;
            sub_1CC7382B0((uint64_t)v1770);
          }
          else
          {
            LODWORD(v1890) = v75;
            LODWORD(v1891) = 1;
            sub_1CC73661C((uint64_t)v1770, (uint64_t)&v1890, (int *)v1877[0], LODWORD(v1877[1]));
          }
          if (v1877[0] != &v1878) {
            free(v1877[0]);
          }
        }
        else
        {
          LODWORD(v1877[0]) = v75;
          LODWORD(v1877[1]) = 1;
          LODWORD(v1851[0]) = v76;
          LODWORD(v1852[0]) = 0;
          uint64_t v1013 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                   + 4))(v1770, 54, v1877, 1, v1851, 1, 0);
          if (LODWORD(v1805[1]))
          {
            v1015 = (llvm::MachineFunction *)v1013;
            v1016 = v1014;
            v1017 = v1805[0];
            uint64_t v1018 = 4 * LODWORD(v1805[1]);
            do
            {
              int v1019 = *(_DWORD *)v1017;
              v1017 = (llvm::MachineInstr *)((char *)v1017 + 4);
              v1851[1] = 0;
              HIDWORD(v1851[0]) = v1019;
              LODWORD(v1851[0]) = 0;
              v1852[0] = 0uLL;
              llvm::MachineInstr::addOperand(v1016, v1015, (const llvm::MachineOperand *)v1851);
              v1018 -= 4;
            }
            while (v1018);
          }
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v1);
        v948 = v1805[0];
        if ((uint64_t *)v1805[0] != v1806) {
LABEL_1167:
        }
          free(v948);
        return 1;
      case 2448:
      case 2451:
        int v678 = sub_1CBBAC8C0(*(_DWORD *)(*(void *)(v1 + 32) + 68), 0, *(unsigned int *)(*(void *)(v1 + 32) + 36) | 0x100000000, 0, (llvm::IntegerType *****)v1770);
        uint64_t v679 = (llvm::MachineFunction *)v1770[1];
        uint64_t v680 = *((void *)v1770[2] + 1) + 27168;
        uint64_t v681 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v681;
        if (v681) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v681, 2);
        }
        v682 = llvm::MachineFunction::CreateMachineInstr(v679, v680, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_798;
        }
        int v1664 = *(unsigned __int8 *)v1805[0];
        if ((v1664 - 4) > 0x1E)
        {
          if ((v1664 - 3) >= 0xFFFFFFFE) {
            v1692 = v1805[0];
          }
          else {
            v1692 = 0;
          }
          if ((v1664 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1666 = (unint64_t)v1692 + 8;
LABEL_2065:
            v1851[0] = v1805;
            sub_1CC5FA668(v1666 + 16, v1851);
            goto LABEL_798;
          }
          if (v1664 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
        {
          uint64_t v1665 = *((void *)v1805[0] + 2);
          if ((v1665 & 4) != 0)
          {
            unint64_t v1666 = v1665 & 0xFFFFFFFFFFFFFFF8;
            if (v1666) {
              goto LABEL_2065;
            }
          }
        }
LABEL_798:
        int32x2_t v683 = (unint64_t *)v1770[6];
        uint64_t v684 = *((void *)v1770[5] + 5);
        *((void *)v682 + 3) = v684;
        uint64_t v685 = *(void *)(v684 + 32);
        uint64_t v686 = *((unsigned int *)v682 + 10);
        if (v686)
        {
          uint64_t v687 = *((void *)v682 + 4);
          uint64_t v688 = *(void *)(v685 + 40);
          uint64_t v689 = 32 * v686;
          do
          {
            if (!*(unsigned char *)v687)
            {
              uint64_t v690 = *(unsigned int *)(v687 + 4);
              if ((int)v690 >= 0) {
                uint64_t v691 = (uint64_t *)(*(void *)(v688 + 272) + 8 * v690);
              }
              else {
                uint64_t v691 = (uint64_t *)(*(void *)(v688 + 24) + 16 * (v690 & 0x7FFFFFFF) + 8);
              }
              uint64_t v692 = *v691;
              if (*v691)
              {
                uint64_t v693 = *(void *)(v692 + 16);
                *(void *)(v692 + 16) = v687;
                *(void *)(v687 + 16) = v693;
                if (*(unsigned char *)(v687 + 3))
                {
                  *(void *)(v687 + 24) = v692;
                }
                else
                {
                  *(void *)(v687 + 24) = 0;
                  uint64_t v691 = (uint64_t *)(v693 + 24);
                }
              }
              else
              {
                *(void *)(v687 + 16) = v687;
                *(void *)(v687 + 24) = 0;
              }
              *uint64_t v691 = v687;
            }
            v687 += 32;
            v689 -= 32;
          }
          while (v689);
        }
        goto LABEL_1327;
      case 2452:
        int v678 = sub_1CBBAC8C0(*(_DWORD *)(*(void *)(v1 + 32) + 100), 0, *(unsigned int *)(*(void *)(v1 + 32) + 36) | 0x100000000, *(unsigned int *)(*(void *)(v1 + 32) + 68) | 0x100000000, (llvm::IntegerType *****)v1770);
        uint64_t v679 = (llvm::MachineFunction *)v1770[1];
        uint64_t v993 = *((void *)v1770[2] + 1) + 27216;
        v994 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v994;
        if (v994) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v994, 2);
        }
        v682 = llvm::MachineFunction::CreateMachineInstr(v679, v993, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_1101;
        }
        int v1679 = *(unsigned __int8 *)v1805[0];
        if ((v1679 - 4) > 0x1E)
        {
          if ((v1679 - 3) >= 0xFFFFFFFE) {
            v1697 = v1805[0];
          }
          else {
            v1697 = 0;
          }
          if ((v1679 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1681 = (unint64_t)v1697 + 8;
LABEL_2110:
            v1851[0] = v1805;
            sub_1CC5FA668(v1681 + 16, v1851);
            goto LABEL_1101;
          }
          if (v1679 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
        {
          uint64_t v1680 = *((void *)v1805[0] + 2);
          if ((v1680 & 4) != 0)
          {
            unint64_t v1681 = v1680 & 0xFFFFFFFFFFFFFFF8;
            if (v1681) {
              goto LABEL_2110;
            }
          }
        }
LABEL_1101:
        int32x2_t v683 = (unint64_t *)v1770[6];
        uint64_t v995 = *((void *)v1770[5] + 5);
        *((void *)v682 + 3) = v995;
        uint64_t v685 = *(void *)(v995 + 32);
        uint64_t v996 = *((unsigned int *)v682 + 10);
        if (v996)
        {
          uint64_t v997 = *((void *)v682 + 4);
          uint64_t v998 = *(void *)(v685 + 40);
          uint64_t v999 = 32 * v996;
          do
          {
            if (!*(unsigned char *)v997)
            {
              uint64_t v1000 = *(unsigned int *)(v997 + 4);
              if ((int)v1000 >= 0) {
                v1001 = (uint64_t *)(*(void *)(v998 + 272) + 8 * v1000);
              }
              else {
                v1001 = (uint64_t *)(*(void *)(v998 + 24) + 16 * (v1000 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1002 = *v1001;
              if (*v1001)
              {
                uint64_t v1003 = *(void *)(v1002 + 16);
                *(void *)(v1002 + 16) = v997;
                *(void *)(v997 + 16) = v1003;
                if (*(unsigned char *)(v997 + 3))
                {
                  *(void *)(v997 + 24) = v1002;
                }
                else
                {
                  *(void *)(v997 + 24) = 0;
                  v1001 = (uint64_t *)(v1003 + 24);
                }
              }
              else
              {
                *(void *)(v997 + 16) = v997;
                *(void *)(v997 + 24) = 0;
              }
              uint64_t *v1001 = v997;
            }
            v997 += 32;
            v999 -= 32;
          }
          while (v999);
        }
        goto LABEL_1327;
      case 2453:
        int v678 = sub_1CBBAC8C0(*(_DWORD *)(*(void *)(v1 + 32) + 68), 0, 0, *(unsigned int *)(*(void *)(v1 + 32) + 36) | 0x100000000, (llvm::IntegerType *****)v1770);
        uint64_t v679 = (llvm::MachineFunction *)v1770[1];
        uint64_t v841 = *((void *)v1770[2] + 1) + 27264;
        uint64_t v842 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v842;
        if (v842) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v842, 2);
        }
        v682 = llvm::MachineFunction::CreateMachineInstr(v679, v841, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_927;
        }
        int v1667 = *(unsigned __int8 *)v1805[0];
        if ((v1667 - 4) > 0x1E)
        {
          if ((v1667 - 3) >= 0xFFFFFFFE) {
            v1693 = v1805[0];
          }
          else {
            v1693 = 0;
          }
          if ((v1667 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1669 = (unint64_t)v1693 + 8;
LABEL_2086:
            v1851[0] = v1805;
            sub_1CC5FA668(v1669 + 16, v1851);
            goto LABEL_927;
          }
          if (v1667 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
        {
          uint64_t v1668 = *((void *)v1805[0] + 2);
          if ((v1668 & 4) != 0)
          {
            unint64_t v1669 = v1668 & 0xFFFFFFFFFFFFFFF8;
            if (v1669) {
              goto LABEL_2086;
            }
          }
        }
LABEL_927:
        int32x2_t v683 = (unint64_t *)v1770[6];
        uint64_t v843 = *((void *)v1770[5] + 5);
        *((void *)v682 + 3) = v843;
        uint64_t v685 = *(void *)(v843 + 32);
        uint64_t v844 = *((unsigned int *)v682 + 10);
        if (v844)
        {
          uint64_t v845 = *((void *)v682 + 4);
          uint64_t v846 = *(void *)(v685 + 40);
          uint64_t v847 = 32 * v844;
          do
          {
            if (!*(unsigned char *)v845)
            {
              uint64_t v848 = *(unsigned int *)(v845 + 4);
              if ((int)v848 >= 0) {
                uint64_t v849 = (uint64_t *)(*(void *)(v846 + 272) + 8 * v848);
              }
              else {
                uint64_t v849 = (uint64_t *)(*(void *)(v846 + 24) + 16 * (v848 & 0x7FFFFFFF) + 8);
              }
              uint64_t v850 = *v849;
              if (*v849)
              {
                uint64_t v851 = *(void *)(v850 + 16);
                *(void *)(v850 + 16) = v845;
                *(void *)(v845 + 16) = v851;
                if (*(unsigned char *)(v845 + 3))
                {
                  *(void *)(v845 + 24) = v850;
                }
                else
                {
                  *(void *)(v845 + 24) = 0;
                  uint64_t v849 = (uint64_t *)(v851 + 24);
                }
              }
              else
              {
                *(void *)(v845 + 16) = v845;
                *(void *)(v845 + 24) = 0;
              }
              *uint64_t v849 = v845;
            }
            v845 += 32;
            v847 -= 32;
          }
          while (v847);
        }
        goto LABEL_1327;
      case 2470:
        uint64_t v956 = *(void *)(v1 + 32);
        uint64_t v957 = *(unsigned int *)(v956 + 36);
        v958 = v1770;
        int v678 = sub_1CBBAC8C0(*(_DWORD *)(v956 + 68), v957 | 0x100000000, 0, 0, (llvm::IntegerType *****)v1770);
        sub_1CC73C210(v957, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          BOOL v959 = LODWORD(v1851[1]) > 0x40uLL;
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            unint64_t v1177 = 0;
            uint64_t v1178 = 0;
            v958 = v1770;
          }
          else
          {
            unint64_t v1177 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v1178 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
          }
          if (v1178 | v1177)
          {
            unsigned int v1179 = 6165;
            goto LABEL_1321;
          }
        }
        else
        {
          BOOL v959 = 1;
        }
        unsigned int v1179 = 6166;
LABEL_1321:
        uint64_t v679 = (llvm::MachineFunction *)v958[1];
        if (v959) {
          unsigned int v1179 = 6165;
        }
        uint64_t v1180 = *((void *)v958[2] + 1) + 48 * v1179;
        v1181 = (llvm::MachineInstr *)v958[4];
        v1805[0] = v1181;
        if (v1181) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v1181, 2);
        }
        v682 = llvm::MachineFunction::CreateMachineInstr(v679, v1180, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_1326;
        }
        int v1685 = *(unsigned __int8 *)v1805[0];
        if ((v1685 - 4) > 0x1E)
        {
          if ((v1685 - 3) >= 0xFFFFFFFE) {
            v1699 = v1805[0];
          }
          else {
            v1699 = 0;
          }
          if ((v1685 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1687 = (unint64_t)v1699 + 8;
LABEL_2122:
            v1851[0] = v1805;
            sub_1CC5FA668(v1687 + 16, v1851);
            goto LABEL_1326;
          }
          if (v1685 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
        {
          uint64_t v1686 = *((void *)v1805[0] + 2);
          if ((v1686 & 4) != 0)
          {
            unint64_t v1687 = v1686 & 0xFFFFFFFFFFFFFFF8;
            if (v1687) {
              goto LABEL_2122;
            }
          }
        }
LABEL_1326:
        int32x2_t v683 = (unint64_t *)v1770[6];
        uint64_t v1182 = *((void *)v1770[5] + 5);
        *((void *)v682 + 3) = v1182;
        uint64_t v685 = *(void *)(v1182 + 32);
        uint64_t v1183 = *((unsigned int *)v682 + 10);
        if (v1183)
        {
          uint64_t v1492 = *((void *)v682 + 4);
          uint64_t v1493 = *(void *)(v685 + 40);
          uint64_t v1494 = 32 * v1183;
          do
          {
            if (!*(unsigned char *)v1492)
            {
              uint64_t v1495 = *(unsigned int *)(v1492 + 4);
              if ((int)v1495 >= 0) {
                v1496 = (uint64_t *)(*(void *)(v1493 + 272) + 8 * v1495);
              }
              else {
                v1496 = (uint64_t *)(*(void *)(v1493 + 24) + 16 * (v1495 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1497 = *v1496;
              if (*v1496)
              {
                uint64_t v1498 = *(void *)(v1497 + 16);
                *(void *)(v1497 + 16) = v1492;
                *(void *)(v1492 + 16) = v1498;
                if (*(unsigned char *)(v1492 + 3))
                {
                  *(void *)(v1492 + 24) = v1497;
                }
                else
                {
                  *(void *)(v1492 + 24) = 0;
                  v1496 = (uint64_t *)(v1498 + 24);
                }
              }
              else
              {
                *(void *)(v1492 + 16) = v1492;
                *(void *)(v1492 + 24) = 0;
              }
              uint64_t *v1496 = v1492;
            }
            v1492 += 32;
            v1494 -= 32;
          }
          while (v1494);
        }
LABEL_1327:
        uint64_t v1184 = *(void *)(v685 + 728);
        if (v1184) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1184 + 24))(v1184, v682);
        }
        unint64_t v1185 = *v683 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v682 = v1185 | *(void *)v682 & 7;
        *((void *)v682 + 1) = v683;
        *(void *)(v1185 + 8) = v682;
        *int32x2_t v683 = *v683 & 7 | (unint64_t)v682;
        v1186 = v1770[7];
        if (v1186) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v1186 + 24))(v1186, v682);
        }
        uint64_t v25 = 1;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v682, v679, (const llvm::MachineOperand *)v1851);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v678;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v682, v679, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v682, v679, (const llvm::MachineOperand *)v1851);
        v1851[0] = v679;
        v1851[1] = v682;
        sub_1CBA318C8((uint64_t)v1851);
        goto LABEL_1345;
      case 2471:
      case 2472:
      case 2473:
      case 2474:
      case 2475:
      case 2476:
      case 2477:
      case 2478:
        uint64_t v51 = v1;
        int v52 = 1;
        goto LABEL_65;
      case 2483:
        v967 = *(_DWORD **)(v1 + 32);
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = v967[1];
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = v967[17];
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v967[25];
        DWORD2(v1852[1]) = 0;
        LODWORD(v1853) = v967[33];
        int v1855 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
         + 4))(v1770, 58, v1805, 1, v1851, 3, 0);
        *(_WORD *)(v968 + 44) = *(_WORD *)(v968 + 44) & 0xC | *(_WORD *)(v1 + 44) & 0xFFF3;
        goto LABEL_1092;
      case 2487:
        v969 = "Unsupported qrefl intrinsic (G15 does not have a qrefl instruction)";
        goto LABEL_1135;
      case 2488:
      case 2579:
        uint64_t v726 = v1766;
        v727 = v1770;
        v1770[5] = *(unsigned __int8 **)(v1 + 24);
        v1770[6] = (unsigned __int8 *)v1;
        if (v18 == v19) {
          goto LABEL_839;
        }
        v728 = *v19;
        if (!*v19) {
          goto LABEL_837;
        }
        int v1467 = *v728;
        if ((v1467 - 4) > 0x1E)
        {
          if ((v1467 - 3) >= 0xFFFFFFFE) {
            v1513 = *v19;
          }
          else {
            v1513 = 0;
          }
          if ((v1467 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1469 = (unint64_t)(v1513 + 8);
LABEL_1716:
            v1851[0] = v1770 + 4;
            sub_1CC5FA668(v1469 + 16, v1851);
            uint64_t v726 = v1766;
            v727 = v1770;
            goto LABEL_837;
          }
          uint64_t v726 = v1766;
          v727 = v1770;
          if (v1467 == 3) {
            *((void *)v728 + 1) = 0;
          }
        }
        else if ((v728[1] & 0x7F) == 2 || *((_DWORD *)v728 + 3))
        {
          uint64_t v1468 = *((void *)v728 + 2);
          if ((v1468 & 4) != 0)
          {
            unint64_t v1469 = v1468 & 0xFFFFFFFFFFFFFFF8;
            if (v1469) {
              goto LABEL_1716;
            }
          }
        }
LABEL_837:
        v729 = *v18;
        *char v19 = *v18;
        if (v729) {
          llvm::MetadataTracking::track((uint64_t)v19, v729, 2);
        }
LABEL_839:
        uint64_t v730 = *(void *)(v1 + 32);
        int v731 = *(_DWORD *)(v730 + 68);
        if (v731 < 0
          && (v731 & 0x7FFFFFFFu) < *(_DWORD *)(v726 + 432)
          && *(void *)(*(void *)(v726 + 424) + 8 * (v731 & 0x7FFFFFFF)) == 9)
        {
          v1805[0] = (llvm::MachineInstr *)129;
          uint64_t v732 = v730 + 64;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v731;
          LODWORD(v1852[0]) = 0;
          sub_1CC738034(v727, 118, (unint64_t *)v1805, (int *)v1851);
          uint64_t v734 = v733;
          (*(void (**)(size_t, uint64_t))(*(void *)v1757 + 32))(v1757, v1);
          llvm::MachineOperand::setReg(v732, *(_DWORD *)(*(void *)(v734 + 32) + 4));
          (*(void (**)(size_t, uint64_t))(*(void *)v1757 + 40))(v1757, v1);
        }
        return 1;
      case 2492:
        int v878 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        if (v878 < 0 && (uint64_t v879 = v878 & 0x7FFFFFFF, v879 < *(_DWORD *)(v1766 + 432))) {
          unint64_t v880 = *(void *)(*(void *)(v1766 + 424) + 8 * v879);
        }
        else {
          unint64_t v880 = 0;
        }
        uint64_t v1066 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(22);
        unsigned int v1067 = v1066;
        if (((uint64_t (*)(uint64_t, uint64_t))loc_1CBBB59BC)(v1066, v17) >= 0x11) {
          uint64_t v1068 = v880;
        }
        else {
          uint64_t v1068 = 129;
        }
        v1805[0] = (llvm::MachineInstr *)v1068;
        LODWORD(v1805[1]) = 0;
        v1069 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
                                          + 4))(v1770, 315, v1805, 1, 0, 0, 0);
        v1071 = v1070;
        LODWORD(v1851[0]) = 1;
        v1851[1] = 0;
        *(void *)&v1852[0] = v1067;
        llvm::MachineInstr::addOperand(v1070, v1069, (const llvm::MachineOperand *)v1851);
        if (v1068 != v880)
        {
          v1805[0] = (llvm::MachineInstr *)v880;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v1069;
          v1851[1] = v1071;
          LODWORD(v1852[0]) = 1;
          v1069 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                                            + 4))(v1770, 126, v1805, 1, v1851, 1, 0);
          v1071 = v1072;
        }
        v1073 = v1770;
        v1877[0] = (void *)v880;
        LODWORD(v1877[1]) = 0;
        if (v880)
        {
          unint64_t v1074 = (v880 >> 3);
        }
        else
        {
          if ((v880 & 4) != 0)
          {
            if ((v880 & 2) != 0) {
              unint64_t v1074 = (unsigned __int16)(v880 >> 19);
            }
            else {
              unint64_t v1074 = (v880 >> 19);
            }
          }
          else
          {
            unint64_t v1074 = (unsigned __int16)(v880 >> 3);
          }
          v1073 = v1770;
        }
        uint64_t v1075 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)v1074);
        v1077 = *(llvm::ConstantInt **)v1075;
        unsigned int v1078 = *(_DWORD *)(v1075 + 8);
        LODWORD(v1851[1]) = v1078 >> 8;
        if (v1078 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1078 <= 0xFF) {
          LOBYTE(v1079) = 0;
        }
        else {
          unint64_t v1079 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1078) + 63);
        }
        v1851[0] = (void *)(v1079 & 8);
        v1080 = llvm::ConstantInt::get(v1077, (llvm::LLVMContext *)v1851, v1076);
        if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
          MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
        }
        uint64_t v1081 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1073 + 2))(v1073, v1877, v1080);
        v1805[0] = (llvm::MachineInstr *)v880;
        LODWORD(v1805[1]) = 0;
        v1851[0] = v1069;
        v1851[1] = v1071;
        LODWORD(v1852[0]) = 1;
        *((void *)&v1852[0] + 1) = v1081;
        *(void *)&v1852[1] = v1082;
        DWORD2(v1852[1]) = 1;
        v1730 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1073
                         + 4))(v1073, 47, v1805, 1, v1851, 2, 0);
        v1084 = v1083;
        unsigned int v1085 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1766, "", 0);
        v1086 = (void *)v1766;
        unint64_t v1087 = v1085 & 0x7FFFFFFF;
        *(void *)(*(void *)(v1766 + 24) + 16 * v1087) = 4;
        unint64_t v1088 = *(unsigned int *)(v1766 + 432);
        if (v1087 >= v1088)
        {
          uint64_t v1089 = *(void *)(v1766 + 440);
          uint64_t v1090 = v1087 + 1 - v1088;
          if (v1087 >= *(unsigned int *)(v1766 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1091 = *(_DWORD *)(v1766 + 432);
          if (v1090)
          {
            v1092 = (void *)(*(void *)(v1766 + 424) + 8 * v1088);
            uint64_t v1093 = ~v1087 + v1088;
            do
            {
              *v1092++ = v1089;
              BOOL v794 = __CFADD__(v1093++, 1);
            }
            while (!v794);
            int v1091 = *(_DWORD *)(v1766 + 432);
          }
          v1086 = (void *)v1766;
          *(_DWORD *)(v1766 + 432) = v1091 + v1090;
        }
        *(void *)(v1086[53] + 8 * v1087) = v880;
        uint64_t v1094 = v1086[1];
        v1095 = v1086;
        if (v1094) {
          (*(void (**)(uint64_t, void))(*(void *)v1094 + 24))(v1094, v1085);
        }
        LODWORD(v1851[0]) = v1085;
        v1096 = sub_1CC7390C0(v1770, 2586, (int *)v1851, 1, 0);
        v1877[0] = (void *)v880;
        LODWORD(v1877[1]) = 0;
        v1851[0] = v1096;
        v1851[1] = v1097;
        LODWORD(v1852[0]) = 1;
        v1890 = (void *)v880;
        LODWORD(v1891) = 0;
        unint64_t v1098 = (unsigned __int16)(v880 >> 19);
        if ((v880 & 2) == 0) {
          unint64_t v1098 = (v880 >> 19);
        }
        if ((v880 & 4) == 0) {
          unint64_t v1098 = (unsigned __int16)(v880 >> 3);
        }
        if (v880) {
          unint64_t v1099 = (v880 >> 3);
        }
        else {
          unint64_t v1099 = v1098;
        }
        uint64_t v1100 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)v1099);
        v1102 = *(llvm::ConstantInt **)v1100;
        unsigned int v1103 = *(_DWORD *)(v1100 + 8);
        LODWORD(v1805[1]) = v1103 >> 8;
        if (v1103 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1103 <= 0xFF) {
          LOBYTE(v1104) = 0;
        }
        else {
          unint64_t v1104 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1103) + 63);
        }
        v1805[0] = (llvm::MachineInstr *)(v1104 & 2);
        v1105 = llvm::ConstantInt::get(v1102, (llvm::LLVMContext *)v1805, v1101);
        if (LODWORD(v1805[1]) >= 0x41 && v1805[0]) {
          MEMORY[0x1D25D9CB0](v1805[0], 0x1000C8000313F17);
        }
        *((void *)&v1852[0] + 1) = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v1105);
        *(void *)&v1852[1] = v1106;
        DWORD2(v1852[1]) = 1;
        uint64_t v1107 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                 + 4))(v1770, 128, v1877, 1, v1851, 2, 0);
        v1805[0] = (llvm::MachineInstr *)v880;
        LODWORD(v1805[1]) = 0;
        v1851[0] = v1730;
        v1851[1] = v1084;
        LODWORD(v1852[0]) = 1;
        *((void *)&v1852[0] + 1) = v1107;
        *(void *)&v1852[1] = v1108;
        DWORD2(v1852[1]) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
         + 4))(v1770, 45, v1805, 1, v1851, 2, 0);
        sub_1CBA0A7C8(v1095, v1720, *(_DWORD *)(*(void *)(v1109 + 32) + 4), v1757);
        return 1;
      case 2517:
        goto LABEL_740;
      case 2522:
        int v788 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        uint64_t v789 = *(void *)(*((void *)v1720 + 3) + 16);
        uint64_t v791 = v1766;
        unsigned int v790 = v1770;
        if (!v789) {
          goto LABEL_898;
        }
        while (1)
        {
          uint64_t v789 = *(void *)(v789 + 8);
          if (!v789) {
            break;
          }
          uint64_t v792 = *(void *)(v789 + 24);
          unsigned int v793 = *(unsigned __int8 *)(v792 + 16);
          if (v792) {
            BOOL v794 = v793 >= 0x1C;
          }
          else {
            BOOL v794 = 0;
          }
          if (v794 && v793 - 29 < 0xB)
          {
LABEL_898:
            v1851[0] = (void *)0x100000000;
            LODWORD(v1851[1]) = 1;
            uint64_t v796 = sub_1CBE0418C(155, 3, v1851);
            v1805[0] = (llvm::MachineInstr *)257;
            LODWORD(v1805[1]) = 0;
            unint64_t v797 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
                                             + 4))(v1770, v796, v1805, 1, 0, 0, 0);
            unint64_t v799 = v798;
            LODWORD(v1851[0]) = 1;
            *(void *)&v1852[0] = 0;
            v1851[1] = 0;
            llvm::MachineInstr::addOperand(v798, v797, (const llvm::MachineOperand *)v1851);
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = 8;
            llvm::MachineInstr::addOperand(v799, v797, (const llvm::MachineOperand *)v1851);
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = 1;
            llvm::MachineInstr::addOperand(v799, v797, (const llvm::MachineOperand *)v1851);
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = 1;
            llvm::MachineInstr::addOperand(v799, v797, (const llvm::MachineOperand *)v1851);
            sub_1CC73B5D0(v799, v1708, v1705);
            unsigned int v800 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1766, "", 0);
            unint64_t v801 = v800 & 0x7FFFFFFF;
            *(void *)(*(void *)(v1766 + 24) + 16 * v801) = 4;
            int v802 = (void *)(v1766 + 424);
            unint64_t v803 = *(unsigned int *)(v1766 + 432);
            if (v801 >= v803)
            {
              uint64_t v804 = *(void *)(v1766 + 440);
              uint64_t v805 = v801 + 1 - v803;
              if (v801 >= *(unsigned int *)(v1766 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v806 = *(_DWORD *)(v1766 + 432);
              if (v805)
              {
                uint64_t v807 = (void *)(*v802 + 8 * v803);
                uint64_t v808 = ~v801 + v803;
                do
                {
                  *v807++ = v804;
                  BOOL v794 = __CFADD__(v808++, 1);
                }
                while (!v794);
                int v806 = *(_DWORD *)(v1766 + 432);
              }
              int v809 = v806 + v805;
              uint64_t v791 = v1766;
              *(_DWORD *)(v1766 + 432) = v809;
            }
            *(void *)(*(void *)(v791 + 424) + 8 * v801) = 257;
            uint64_t v810 = *(void *)(v791 + 8);
            if (v810) {
              (*(void (**)(uint64_t, void))(*(void *)v810 + 24))(v810, v800);
            }
            LODWORD(v1851[0]) = v800;
            int v811 = sub_1CC7390C0(v1770, 2524, (int *)v1851, 1, 0);
            unint64_t v813 = v812;
            int v814 = *(_DWORD *)(*((void *)v799 + 4) + 4);
            v1852[0] = 0uLL;
            v1851[1] = 0;
            HIDWORD(v1851[0]) = v814;
            LODWORD(v1851[0]) = 0;
            llvm::MachineInstr::addOperand(v812, v811, (const llvm::MachineOperand *)v1851);
            unsigned int v815 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v791, "", 0);
            unint64_t v816 = v815 & 0x7FFFFFFF;
            *(void *)(*(void *)(v791 + 24) + 16 * v816) = 4;
            unint64_t v817 = *(unsigned int *)(v791 + 432);
            if (v816 >= v817)
            {
              uint64_t v818 = v791;
              uint64_t v819 = *(void *)(v791 + 440);
              uint64_t v820 = v816 + 1 - v817;
              if (v816 >= *(unsigned int *)(v818 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v821 = v817;
              if (v820)
              {
                BOOL v822 = (void *)(*v802 + 8 * v817);
                uint64_t v823 = ~v816 + v817;
                do
                {
                  *v822++ = v819;
                  BOOL v794 = __CFADD__(v823++, 1);
                }
                while (!v794);
                int v821 = *(_DWORD *)(v1766 + 432);
              }
              int v824 = v821 + v820;
              uint64_t v791 = v1766;
              *(_DWORD *)(v1766 + 432) = v824;
            }
            *(void *)(*(void *)(v791 + 424) + 8 * v816) = 257;
            uint64_t v825 = *(void *)(v791 + 8);
            if (v825) {
              (*(void (**)(uint64_t, void))(*(void *)v825 + 24))(v825, v815);
            }
            LODWORD(v1851[0]) = v815;
            int v826 = sub_1CC7390C0(v1770, 2168, (int *)v1851, 1, 0);
            uint64_t v828 = v827;
            int v829 = *(_DWORD *)(*((void *)v813 + 4) + 4);
            v1852[0] = 0uLL;
            v1851[1] = 0;
            HIDWORD(v1851[0]) = v829;
            LODWORD(v1851[0]) = 0;
            llvm::MachineInstr::addOperand(v827, v826, (const llvm::MachineOperand *)v1851);
            v1805[0] = (llvm::MachineInstr *)129;
            LODWORD(v1805[1]) = 0;
            v1851[0] = v826;
            v1851[1] = v828;
            LODWORD(v1852[0]) = 1;
            uint64_t v830 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                    + 4))(v1770, 119, v1805, 1, v1851, 1, 0);
            uint64_t v832 = v831;
            v1877[0] = (void *)129;
            LODWORD(v1877[1]) = 0;
            uint64_t v833 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
            v835 = *(llvm::ConstantInt **)v833;
            unsigned int v836 = *(_DWORD *)(v833 + 8);
            LODWORD(v1851[1]) = v836 >> 8;
            if (v836 >> 8 > 0x40) {
              operator new[]();
            }
            if (v836 <= 0xFF) {
              LOBYTE(v837) = 0;
            }
            else {
              unint64_t v837 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v836) + 63);
            }
            v1851[0] = (void *)(v837 & 0x1F);
            uint64_t v838 = llvm::ConstantInt::get(v835, (llvm::LLVMContext *)v1851, v834);
            if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            uint64_t v839 = (void *)(*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, v1877, v838);
            LODWORD(v1805[0]) = v788;
            LODWORD(v1805[1]) = 1;
            v1851[0] = v839;
            v1851[1] = v840;
            LODWORD(v1852[0]) = 1;
            *((void *)&v1852[0] + 1) = v830;
            *(void *)&v1852[1] = v832;
            DWORD2(v1852[1]) = 1;
            (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
             + 4))(v1770, 46, v1805, 1, v1851, 2, 0);
            char v419 = v1720;
            goto LABEL_581;
          }
        }
        LODWORD(v1805[0]) = v788;
        LODWORD(v1805[1]) = 1;
        if ((v788 & 0x80000000) == 0 || (v1169 = v1770[3], (v788 & 0x7FFFFFFFu) >= *((_DWORD *)v1169 + 108)))
        {
          unint64_t v1170 = 0;
LABEL_1746:
          unint64_t v1171 = (unsigned __int16)(v1170 >> 3);
          goto LABEL_1747;
        }
        unint64_t v1170 = *(void *)(*((void *)v1169 + 53) + 8 * (v788 & 0x7FFFFFFF));
        if (v1170)
        {
          unint64_t v1171 = (v1170 >> 3);
          goto LABEL_1313;
        }
        if ((v1170 & 4) == 0) {
          goto LABEL_1746;
        }
        if ((v1170 & 2) != 0) {
          unint64_t v1171 = (unsigned __int16)(v1170 >> 19);
        }
        else {
          unint64_t v1171 = (v1170 >> 19);
        }
LABEL_1747:
        unsigned int v790 = v1770;
LABEL_1313:
        uint64_t v1172 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)v1171);
        v1174 = *(llvm::ConstantInt **)v1172;
        unsigned int v1175 = *(_DWORD *)(v1172 + 8);
        LODWORD(v1851[1]) = v1175 >> 8;
        if (v1175 >> 8 >= 0x41) {
          operator new[]();
        }
        v1851[0] = 0;
        v1176 = llvm::ConstantInt::get(v1174, (llvm::LLVMContext *)v1851, v1173);
        if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
          MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
        }
        (*((void (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v790 + 2))(v790, v1805, v1176);
        goto LABEL_1056;
      case 2526:
        goto LABEL_156;
      case 2545:
      case 2546:
      case 2547:
      case 2548:
      case 2549:
      case 2550:
      case 2551:
      case 2552:
      case 2553:
      case 2554:
      case 2555:
      case 2556:
      case 2557:
      case 2558:
      case 2559:
      case 2560:
      case 2561:
      case 2562:
      case 2563:
      case 2564:
      case 2565:
      case 2566:
      case 2567:
      case 2568:
      case 2569:
      case 2570:
      case 2571:
      case 2572:
      case 2573:
      case 2574:
      case 2575:
      case 2576:
        uint64_t v51 = v1;
        int v52 = 0;
LABEL_65:
        return sub_1CBBADC8C(v51, v52, v13, v1766, (uint64_t)v1770);
      case 2606:
      case 2607:
      case 2608:
      case 2609:
        sub_1CC73C210(*(_DWORD *)(*(void *)(v1 + 32) + 100), v1766, (uint64_t)v1851);
        if (!LOBYTE(v1852[0])) {
          goto LABEL_584;
        }
        unsigned int v420 = v1770;
        uint64_t v111 = v1757;
        if (LODWORD(v1851[1]) >= 0x41)
        {
          if (v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
LABEL_584:
          unsigned int v420 = v1770;
        }
        else if (!((uint64_t)v1851[0] << -(uint64_t)LODWORD(v1851[1]) >> -(uint64_t)LODWORD(v1851[1])))
        {
          unsigned int v108 = *(_DWORD *)(*(void *)(v1 + 32) + 68);
          uint64_t v109 = (void *)v1766;
          long long v110 = (llvm::MachineInstr *)v1;
LABEL_150:
          sub_1CBA0A7C8(v109, v110, v108, v111);
          return 1;
        }
        uint64_t v748 = *(_DWORD **)(v1 + 32);
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = v748[1];
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = v748[17];
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v748[25];
        DWORD2(v1852[1]) = 0;
        LODWORD(v1853) = v748[33];
        int v1855 = 0;
        LODWORD(v1856) = v748[41];
        int v1858 = 0;
        int v530 = (void (*)(void))*((void *)*v420 + 4);
        goto LABEL_1091;
      case 2616:
      case 2617:
        uint64_t v709 = *(_DWORD **)(v1 + 32);
        int v710 = v709[1];
        int v1718 = v710;
        if (v710 < 0)
        {
          uint64_t v1149 = v710 & 0x7FFFFFFF;
          uint64_t v713 = v1766;
          uint64_t v712 = (llvm::IntegerType *****)v1770;
          if (v1149 >= *(_DWORD *)(v1766 + 432))
          {
            uint64_t v711 = 0;
            int v1150 = 2581;
          }
          else
          {
            uint64_t v711 = *(llvm::MachineInstr **)(*(void *)(v1766 + 424) + 8 * v1149);
            if (v711 == (llvm::MachineInstr *)129) {
              int v1150 = 2580;
            }
            else {
              int v1150 = 2581;
            }
          }
          int v1753 = v1150;
        }
        else
        {
          uint64_t v711 = 0;
          int v1753 = 2581;
          uint64_t v713 = v1766;
          uint64_t v712 = (llvm::IntegerType *****)v1770;
        }
        int v1746 = v709[17];
        int v1763 = v709[25];
        v1877[0] = (void *)129;
        LODWORD(v1877[1]) = 0;
        uint64_t v1217 = llvm::IntegerType::get(***v712[1], (llvm::LLVMContext *)0x10);
        v1219 = *(llvm::ConstantInt **)v1217;
        unsigned int v1220 = *(_DWORD *)(v1217 + 8);
        LODWORD(v1851[1]) = v1220 >> 8;
        if (v1220 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1220 <= 0xFF) {
          LOBYTE(v1221) = 0;
        }
        else {
          unint64_t v1221 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1220) + 63);
        }
        v1851[0] = (void *)(v1221 & 0x1C);
        v1738 = v711;
        v1222 = llvm::ConstantInt::get(v1219, (llvm::LLVMContext *)v1851, v1218);
        if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
          MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
        }
        uint64_t v1223 = ((uint64_t (*)(llvm::IntegerType *****, void **, void *))(*v712)[2])(v712, v1877, v1222);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v1763;
        LODWORD(v1852[0]) = 0;
        *((void *)&v1852[0] + 1) = v1223;
        *(void *)&v1852[1] = v1224;
        DWORD2(v1852[1]) = 1;
        v1225 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*v712)[4])(v712, 65, v1805, 1, v1851, 2, 0);
        v1227 = v1226;
        unsigned int v1228 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v713, "", 0);
        unint64_t v1229 = v1228 & 0x7FFFFFFF;
        *(void *)(*(void *)(v713 + 24) + 16 * v1229) = 4;
        v1731 = (void *)(v713 + 424);
        unint64_t v1230 = *(unsigned int *)(v713 + 432);
        if (v1229 >= v1230)
        {
          uint64_t v1231 = *(void *)(v713 + 440);
          uint64_t v1232 = v1229 + 1 - v1230;
          if (v1229 >= *(unsigned int *)(v713 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1233 = *(_DWORD *)(v713 + 432);
          if (v1232)
          {
            v1234 = (void *)(*v1731 + 8 * *(unsigned int *)(v713 + 432));
            uint64_t v1235 = ~v1229 + v1230;
            do
            {
              *v1234++ = v1231;
              BOOL v794 = __CFADD__(v1235++, 1);
            }
            while (!v794);
            int v1233 = *(_DWORD *)(v713 + 432);
          }
          *(_DWORD *)(v713 + 432) = v1233 + v1232;
        }
        *(void *)(*(void *)(v713 + 424) + 8 * v1229) = v1738;
        uint64_t v1236 = *(void *)(v713 + 8);
        if (v1236) {
          (*(void (**)(uint64_t, void))(*(void *)v1236 + 24))(v1236, v1228);
        }
        LODWORD(v1851[0]) = v1228;
        v1237 = sub_1CC7390C0(v1770, v1753, (int *)v1851, 1, 0);
        v1239 = v1238;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1746;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1238, v1237, (const llvm::MachineOperand *)v1851);
        int v1240 = *(_DWORD *)(v1227[4] + 4);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1240;
        LODWORD(v1851[0]) = 0;
        v1714 = v1237;
        llvm::MachineInstr::addOperand(v1239, v1237, (const llvm::MachineOperand *)v1851);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        uint64_t v1241 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
        v1243 = *(llvm::ConstantInt **)v1241;
        unsigned int v1244 = *(_DWORD *)(v1241 + 8);
        LODWORD(v1851[1]) = v1244 >> 8;
        if (v1244 >> 8 > 0x40) {
          operator new[]();
        }
        if (v1244 <= 0xFF) {
          LOBYTE(v1245) = 0;
        }
        else {
          unint64_t v1245 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1244) + 63);
        }
        v1851[0] = (void *)(v1245 & 1);
        v1246 = llvm::ConstantInt::get(v1243, (llvm::LLVMContext *)v1851, v1242);
        if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
          MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
        }
        uint64_t v1247 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v1246);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        v1851[0] = v1225;
        v1851[1] = v1227;
        LODWORD(v1852[0]) = 1;
        uint64_t v1723 = v1248;
        uint64_t v1726 = v1247;
        *((void *)&v1852[0] + 1) = v1247;
        *(void *)&v1852[1] = v1248;
        DWORD2(v1852[1]) = 1;
        v1249 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                         + 4))(v1770, 45, v1805, 1, v1851, 2, 0);
        v1251 = v1250;
        uint64_t v1252 = v1766;
        unsigned int v1253 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1766, "", 0);
        unint64_t v1254 = v1253 & 0x7FFFFFFF;
        *(void *)(*(void *)(v1766 + 24) + 16 * v1254) = 4;
        unint64_t v1255 = *(unsigned int *)(v1766 + 432);
        if (v1254 >= v1255)
        {
          uint64_t v1256 = *(void *)(v1766 + 440);
          uint64_t v1257 = v1254 + 1 - v1255;
          if (v1254 >= *(unsigned int *)(v1766 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1258 = *(_DWORD *)(v1766 + 432);
          if (v1257)
          {
            v1259 = (void *)(*v1731 + 8 * *(unsigned int *)(v1766 + 432));
            uint64_t v1260 = ~v1254 + v1255;
            do
            {
              *v1259++ = v1256;
              BOOL v794 = __CFADD__(v1260++, 1);
            }
            while (!v794);
            int v1258 = *(_DWORD *)(v1766 + 432);
          }
          uint64_t v1252 = v1766;
          *(_DWORD *)(v1766 + 432) = v1258 + v1257;
        }
        *(void *)(*(void *)(v1252 + 424) + 8 * v1254) = v1738;
        uint64_t v1261 = *(void *)(v1252 + 8);
        if (v1261) {
          (*(void (**)(uint64_t, void))(*(void *)v1261 + 24))(v1261, v1253);
        }
        LODWORD(v1851[0]) = v1253;
        v1262 = sub_1CC7390C0(v1770, v1753, (int *)v1851, 1, 0);
        v1264 = v1263;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1746;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1263, v1262, (const llvm::MachineOperand *)v1851);
        int v1265 = *(_DWORD *)(v1251[4] + 4);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1265;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1264, v1262, (const llvm::MachineOperand *)v1851);
        v1805[0] = v1738;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = 32;
        LODWORD(v1852[0]) = 2;
        *((void *)&v1852[0] + 1) = v1249;
        *(void *)&v1852[1] = v1251;
        DWORD2(v1852[1]) = 1;
        LODWORD(v1853) = v1763;
        int v1855 = 0;
        uint64_t v1856 = (uint64_t)v1262;
        v1857 = v1264;
        int v1858 = 1;
        uint64_t v1859 = (uint64_t)v1714;
        v1860 = v1239;
        int v1861 = 1;
        uint64_t v1715 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                 + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
        v1267 = v1266;
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        v1851[0] = v1249;
        v1851[1] = v1251;
        LODWORD(v1852[0]) = 1;
        *((void *)&v1852[0] + 1) = v1726;
        *(void *)&v1852[1] = v1723;
        DWORD2(v1852[1]) = 1;
        v1268 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                         + 4))(v1770, 45, v1805, 1, v1851, 2, 0);
        v1270 = v1269;
        unsigned int v1271 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1252, "", 0);
        unint64_t v1272 = v1271 & 0x7FFFFFFF;
        *(void *)(*(void *)(v1252 + 24) + 16 * v1272) = 4;
        unint64_t v1273 = *(unsigned int *)(v1252 + 432);
        if (v1272 >= v1273)
        {
          uint64_t v1274 = *(void *)(v1252 + 440);
          uint64_t v1275 = v1272 + 1 - v1273;
          if (v1272 >= *(unsigned int *)(v1252 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1276 = *(_DWORD *)(v1252 + 432);
          if (v1275)
          {
            v1277 = (void *)(*v1731 + 8 * *(unsigned int *)(v1252 + 432));
            uint64_t v1278 = ~v1272 + v1273;
            do
            {
              *v1277++ = v1274;
              BOOL v794 = __CFADD__(v1278++, 1);
            }
            while (!v794);
            int v1276 = *(_DWORD *)(v1766 + 432);
          }
          uint64_t v1252 = v1766;
          *(_DWORD *)(v1766 + 432) = v1276 + v1275;
        }
        *(void *)(*(void *)(v1252 + 424) + 8 * v1272) = v1738;
        uint64_t v1279 = *(void *)(v1252 + 8);
        if (v1279) {
          (*(void (**)(uint64_t, void))(*(void *)v1279 + 24))(v1279, v1271);
        }
        LODWORD(v1851[0]) = v1271;
        v1280 = sub_1CC7390C0(v1770, v1753, (int *)v1851, 1, 0);
        v1282 = v1281;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1746;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1281, v1280, (const llvm::MachineOperand *)v1851);
        int v1283 = *(_DWORD *)(v1270[4] + 4);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1283;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1282, v1280, (const llvm::MachineOperand *)v1851);
        v1805[0] = v1738;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = 32;
        LODWORD(v1852[0]) = 2;
        *((void *)&v1852[0] + 1) = v1268;
        *(void *)&v1852[1] = v1270;
        DWORD2(v1852[1]) = 1;
        LODWORD(v1853) = v1763;
        int v1855 = 0;
        uint64_t v1856 = (uint64_t)v1280;
        v1857 = v1282;
        int v1858 = 1;
        uint64_t v1859 = v1715;
        v1860 = v1267;
        int v1861 = 1;
        uint64_t v1716 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                 + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
        v1285 = v1284;
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        v1851[0] = v1268;
        v1851[1] = v1270;
        LODWORD(v1852[0]) = 1;
        *((void *)&v1852[0] + 1) = v1726;
        *(void *)&v1852[1] = v1723;
        DWORD2(v1852[1]) = 1;
        uint64_t v1286 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                 + 4))(v1770, 45, v1805, 1, v1851, 2, 0);
        uint64_t v1288 = v1287;
        unsigned int v1289 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v1252, "", 0);
        unint64_t v1290 = v1289 & 0x7FFFFFFF;
        *(void *)(*(void *)(v1252 + 24) + 16 * v1290) = 4;
        unint64_t v1291 = *(unsigned int *)(v1252 + 432);
        if (v1290 >= v1291)
        {
          uint64_t v1292 = *(void *)(v1252 + 440);
          uint64_t v1293 = v1290 + 1 - v1291;
          if (v1290 >= *(unsigned int *)(v1252 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v1294 = *(_DWORD *)(v1252 + 432);
          if (v1293)
          {
            v1295 = (void *)(*v1731 + 8 * *(unsigned int *)(v1252 + 432));
            uint64_t v1296 = ~v1290 + v1291;
            do
            {
              *v1295++ = v1292;
              BOOL v794 = __CFADD__(v1296++, 1);
            }
            while (!v794);
            int v1294 = *(_DWORD *)(v1766 + 432);
          }
          uint64_t v1252 = v1766;
          *(_DWORD *)(v1766 + 432) = v1294 + v1293;
        }
        *(void *)(*(void *)(v1252 + 424) + 8 * v1290) = v1738;
        uint64_t v1297 = *(void *)(v1252 + 8);
        if (v1297) {
          (*(void (**)(uint64_t, void))(*(void *)v1297 + 24))(v1297, v1289);
        }
        LODWORD(v1851[0]) = v1289;
        v1298 = sub_1CC7390C0(v1770, v1753, (int *)v1851, 1, 0);
        v1300 = v1299;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1746;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1299, v1298, (const llvm::MachineOperand *)v1851);
        int v1301 = *(_DWORD *)(*(void *)(v1288 + 32) + 4);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1301;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1300, v1298, (const llvm::MachineOperand *)v1851);
        LODWORD(v1805[0]) = v1718;
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = 32;
        LODWORD(v1852[0]) = 2;
        *((void *)&v1852[0] + 1) = v1286;
        *(void *)&v1852[1] = v1288;
        DWORD2(v1852[1]) = 1;
        LODWORD(v1853) = v1763;
        int v1855 = 0;
        uint64_t v1856 = (uint64_t)v1298;
        v1857 = v1300;
        int v1858 = 1;
        uint64_t v1859 = v1716;
        v1860 = v1285;
        int v1861 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
         + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
        llvm::MachineInstr::eraseFromParent(v1720);
        return 1;
      case 2623:
        v969 = "Unsupported sin intrinsic; expected sin to be expanded in the driver";
        goto LABEL_1135;
      case 2628:
        if (!*((unsigned char *)v14 + 1646))
        {
          v969 = "Unsupported sqrt intrinsic.";
          goto LABEL_1135;
        }
        uint64_t v988 = *(void *)(v1 + 32);
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = *(_DWORD *)(v988 + 4);
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = *(_DWORD *)(v988 + 32 * (v10 + 1) + 4);
        LODWORD(v1852[0]) = 0;
        int v530 = (void (*)(void))*((void *)*v1770 + 4);
        goto LABEL_1091;
      case 2685:
      case 2686:
        v969 = "AGX3 does not support agx2.unmap.* intrinsics";
        goto LABEL_1135;
      case 2687:
      case 2688:
      case 2689:
      case 2690:
      case 2691:
      case 2692:
      case 2693:
      case 2694:
      case 2695:
      case 2696:
      case 2697:
      case 2698:
      case 2699:
      case 2700:
      case 2701:
      case 2702:
        uint64_t v65 = *(unsigned int *)(v1 + 40);
        uint64_t v66 = *(void *)(v1 + 32);
        if (!v65) {
          goto LABEL_104;
        }
        uint64_t v67 = 0;
        uint64_t v68 = *(unsigned __int8 **)(v1 + 32);
        while (1)
        {
          int v69 = *v68;
          v68 += 32;
          if (v69 == 17) {
            break;
          }
          if (v65 == ++v67)
          {
LABEL_104:
            LODWORD(v67) = -1;
            break;
          }
        }
        int v70 = *(_DWORD *)(v66 + 32 * (v65 - 1) + 4);
        int v71 = 1;
        int v72 = 0;
        unsigned int v73 = 1;
        switch(*(_DWORD *)(v66 + 32 * v67 + 16))
        {
          case 0xA83:
          case 0xA84:
          case 0xA85:
          case 0xA86:
            int v71 = 0;
            unsigned int v73 = 2;
            int v72 = 1;
            break;
          case 0xA87:
          case 0xA88:
          case 0xA89:
          case 0xA8A:
            int v71 = 0;
            int v72 = 0;
            unsigned int v73 = 3;
            break;
          case 0xA8B:
          case 0xA8C:
          case 0xA8D:
          case 0xA8E:
            int v71 = 0;
            int v72 = 0;
            unsigned int v73 = 4;
            break;
          default:
            break;
        }
        int v427 = *(_DWORD *)(v66 + 4);
        if (v427 < 0 && (v427 & 0x7FFFFFFFu) < *(_DWORD *)(v1766 + 432)) {
          unsigned int v428 = *(llvm::MachineInstr **)(*(void *)(v1766 + 424) + 8 * (v427 & 0x7FFFFFFF));
        }
        else {
          unsigned int v428 = 0;
        }
        int v429 = v428;
        if ((v71 & 1) == 0)
        {
          if ((v428 & 2) != 0)
          {
            char v1658 = 35;
            char v1659 = 19;
            if ((v428 & 4) == 0) {
              char v1658 = 19;
            }
            unint64_t v1660 = (unint64_t)v428 >> v1658;
            if ((v428 & 4) == 0) {
              char v1659 = 3;
            }
            if (v428) {
              char v1659 = 3;
            }
            int v429 = (llvm::MachineInstr *)((8 * (unsigned __int16)((unint64_t)v428 >> v1659)) & 0xFFFFF8000007FFFFLL | ((v1660 & 0xFFFFFF) << 19) | 2);
          }
          else
          {
            char v430 = 3;
            if ((v428 & 1) == 0) {
              char v430 = 19;
            }
            int v429 = (llvm::MachineInstr *)((unint64_t)v428 & 0x8000000000000000 | (8
                                                                                         * ((unint64_t)v428 >> v430)) | 1);
          }
        }
        unsigned int v431 = *(_DWORD *)(v66 + 68);
        sub_1CC73C210(v431, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            unint64_t v433 = 0;
            uint64_t v434 = 0;
          }
          else
          {
            unint64_t v433 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFFFFFFFFFF00;
            uint64_t v434 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
          }
          unint64_t v432 = v434 | v433;
        }
        else
        {
          unint64_t v432 = 0;
        }
        sub_1CC73C210(*(_DWORD *)(*((void *)v1720 + 4) + 100), v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) > 0x40)
          {
            if (v1851[0]) {
              MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
            }
            int v437 = 0;
            int v438 = 0;
          }
          else
          {
            int v437 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1])) & 0xFFFFFF00;
            int v438 = ((uint64_t)v1851[0] << -LOBYTE(v1851[1]) >> -LOBYTE(v1851[1]));
          }
          unsigned int v436 = v438 | v437;
        }
        else
        {
          unsigned int v436 = 0;
        }
        if (((1 << v432) & 0x4F0) != 0)
        {
          v1805[0] = (llvm::MachineInstr *)v1806;
          v1805[1] = (llvm::MachineInstr *)0x200000000;
          v1877[0] = &v1878;
          v1877[1] = (void *)0x200000000;
          if (v71)
          {
            v1890 = (void *)129;
            LODWORD(v1891) = 0;
            LODWORD(v1851[0]) = v70;
            LODWORD(v1852[0]) = 0;
            sub_1CC738034(v1770, 118, (unint64_t *)&v1890, (int *)v1851);
            *((_DWORD *)v1805[0] + LODWORD(v1805[1])) = *(_DWORD *)(*(void *)(v439 + 32) + 4);
            ++LODWORD(v1805[1]);
            if (v432 == 10)
            {
              v1890 = (void *)129;
              LODWORD(v1891) = 0;
              uint64_t v440 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
              int v442 = *(llvm::ConstantInt **)v440;
              unsigned int v443 = *(_DWORD *)(v440 + 8);
              LODWORD(v1851[1]) = v443 >> 8;
              if (v443 >> 8 > 0x40) {
                operator new[]();
              }
              if (v443 <= 0xFF) {
                LOBYTE(v444) = 0;
              }
              else {
                unint64_t v444 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v443) + 63);
              }
              v1851[0] = (void *)(v444 & 0x10);
              unint64_t v445 = llvm::ConstantInt::get(v442, (llvm::LLVMContext *)v1851, v441);
              if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
                MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
              }
              (*((void (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v445);
              if (LODWORD(v1877[1]) >= HIDWORD(v1877[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1877[0] + LODWORD(v1877[1])) = *(_DWORD *)(*(void *)(v446 + 32) + 4);
            }
            else
            {
              if (LODWORD(v1877[1]) >= HIDWORD(v1877[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1877[0] + LODWORD(v1877[1])) = v431;
            }
            ++LODWORD(v1877[1]);
            uint64_t v519 = (uint64_t)v1770;
          }
          else
          {
            if (v72)
            {
              unsigned int v448 = 1;
              LODWORD(v1806[0]) = v70;
              LODWORD(v1805[1]) = 1;
              LODWORD(v1878) = v431;
              LODWORD(v1877[1]) = 1;
              goto LABEL_717;
            }
            if ((v432 & 0xFFFFFFFE) == 6) {
              unint64_t v520 = 257;
            }
            else {
              unint64_t v520 = 129;
            }
            LODWORD(v1851[0]) = v70;
            LODWORD(v1852[0]) = 0;
            sub_1CC7363F0(v1770, v520, (int *)v1851);
            if ((unint64_t)LODWORD(v1805[1]) + 2 > HIDWORD(v1805[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)((char *)v1805[0] + 4 * LODWORD(v1805[1])) = *(unsigned int *)(*(void *)(v521 + 32) + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v521 + 32) + 36) << 32);
            LODWORD(v1805[1]) += 2;
            unsigned int v522 = v431;
            uint64_t v519 = (uint64_t)v1770;
            sub_1CBBD9218(v1851, v432, v522, v436, (llvm::IntegerType *****)v1770);
            sub_1CB927804((uint64_t)v1877, (uint64_t)v1851);
            if (v1851[0] != v1852) {
              free(v1851[0]);
            }
          }
          unsigned int v448 = v1805[1];
          if (!LODWORD(v1805[1]))
          {
            int v527 = (int *)v1805[0];
            int v490 = v1720;
            goto LABEL_725;
          }
LABEL_717:
          uint64_t v523 = 0;
          uint64_t v524 = v448;
          do
          {
            int v525 = v429;
            if ((v71 & 1) == 0) {
              int v525 = (void *)sub_1CBA5A95C(2, (unint64_t)v429);
            }
            v1890 = v525;
            LODWORD(v1891) = 0;
            LODWORD(v1851[0]) = *((_DWORD *)v1877[0] + v523);
            LODWORD(v1852[0]) = 0;
            DWORD2(v1852[0]) = *((_DWORD *)v1805[0] + v523);
            DWORD2(v1852[1]) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 55, &v1890, 1, v1851, 2, 0);
            int v527 = (int *)v1805[0];
            *((_DWORD *)v1805[0] + v523++) = *(_DWORD *)(*(void *)(v526 + 32) + 4);
          }
          while (v524 != v523);
          unsigned int v448 = v1805[1];
          if (LODWORD(v1805[1]) == 1)
          {
            LODWORD(v1890) = v427;
            LODWORD(v1891) = 1;
            LODWORD(v1851[0]) = *v527;
            LODWORD(v1852[0]) = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770 + 4))(v1770, 19, &v1890, 1, v1851, 1, 0);
            int v490 = v1720;
LABEL_726:
            if (v1877[0] != &v1878) {
              free(v1877[0]);
            }
            if ((uint64_t *)v1805[0] != v1806) {
              free(v1805[0]);
            }
            goto LABEL_730;
          }
          int v490 = v1720;
          uint64_t v519 = (uint64_t)v1770;
LABEL_725:
          LODWORD(v1851[0]) = v427;
          LODWORD(v1851[1]) = 1;
          sub_1CC73661C(v519, (uint64_t)v1851, v527, v448);
          goto LABEL_726;
        }
        uint64_t v447 = 0x800000000000000;
        if ((v428 & 2) == 0) {
          uint64_t v447 = 0x8000000000000;
        }
        if ((v447 & (unint64_t)v428) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v435);
        }
        if (v73 == (unsigned __int16)(v428 >> 3))
        {
          LODWORD(v1805[0]) = v427;
          LODWORD(v1805[1]) = 1;
          LODWORD(v1851[0]) = v431;
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v70;
          DWORD2(v1852[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 55, v1805, 1, v1851, 2, 0);
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)sub_1CBA5A95C(v73, (unint64_t)v429);
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v431;
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v70;
          DWORD2(v1852[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 55, v1805, 1, v1851, 2, 0);
          v1851[0] = v1852;
          v1851[1] = (void *)0x400000000;
          sub_1CBBB1038(*(_DWORD *)(*(void *)(v488 + 32) + 4), v1766, (uint64_t)v1770, (uint64_t)v1851);
          v1805[0] = v429;
          LODWORD(v1805[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
           + 4))(v1770, 68, v1805, 1, 0, 0, 0);
          if (LODWORD(v1851[1]) >= HIDWORD(v1851[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v1851[0] + LODWORD(v1851[1])) = *(_DWORD *)(*(void *)(v489 + 32) + 4);
          ++LODWORD(v1851[1]);
          LODWORD(v1805[0]) = v427;
          LODWORD(v1805[1]) = 1;
          sub_1CC73661C((uint64_t)v1770, (uint64_t)v1805, (int *)v1851[0], LODWORD(v1851[1]));
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
        }
        int v490 = v1720;
        goto LABEL_730;
      case 2703:
      case 2704:
        v969 = "AGX3 does not support agx2.update.hw.coverage.mask.* intrinsics";
        goto LABEL_1135;
      case 2706:
      case 2707:
      case 2708:
        uint64_t v484 = sub_1CBBAAC30(v13);
        unsigned int v485 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(v484);
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        LODWORD(v1805[1]) = 1;
        long long v486 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
                                         + 4))(v1770, 314, v1805, 1, 0, 0, 0);
        LODWORD(v1851[0]) = 1;
        v1851[1] = 0;
        *(void *)&v1852[0] = v485;
        llvm::MachineInstr::addOperand(v487, v486, (const llvm::MachineOperand *)v1851);
        goto LABEL_1092;
      case 2739:
      case 2741:
      case 2742:
      case 2743:
        uint64_t v450 = *(void *)(v1 + 32);
        int v451 = *(_DWORD *)(v450 + 36);
        int v452 = *(_DWORD *)(v450 + 68);
        uint64_t v453 = (uint64_t)v1710[6];
        if (!v453)
        {
          uint64_t v453 = ((uint64_t (*)(llvm::ConstantFP ***, llvm::ConstantFP ****, llvm::ConstantFP ****))(*v1710[1])[27])(v1710[1], v1710 + 16, v1710);
          v1710[6] = (llvm::ConstantFP ***)v453;
        }
        *(unsigned char *)(v453 + 561) = 1;
        v1805[0] = (llvm::MachineInstr *)257;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v452;
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v451;
        DWORD2(v1852[1]) = 0;
        unint64_t v454 = v1770;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
         + 4))(v1770, 76, v1805, 1, v1851, 2, 0);
        int v456 = *(_DWORD *)(*(void *)(v455 + 32) + 4);
        v1805[0] = (llvm::MachineInstr *)257;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v456;
        LODWORD(v1852[0]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v454
         + 4))(v454, 19, v1805, 1, v1851, 1, 0);
        int v458 = *(_DWORD *)(*(void *)(v457 + 32) + 4);
        sub_1CBC2E7FC((uint64_t)v1770, 2u);
        uint64_t v459 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void, void, void, void, void))*v454
                                         + 4))(v454, 550, 0, 0, 0, 0, 0);
        unsigned int v461 = v460;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v460, v459, (const llvm::MachineOperand *)v1851);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v458;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v461, v459, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v461, v459, (const llvm::MachineOperand *)v1851);
        v1851[0] = v459;
        v1851[1] = v461;
        sub_1CBA318C8((uint64_t)v1851);
        uint64_t v462 = *(void *)(v1 + 48);
        if ((v462 & 7) != 0)
        {
          uint64_t v463 = *(llvm::MachineMemOperand **)((v462 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          uint64_t v463 = (llvm::MachineMemOperand *)(v462 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v1 + 48) = v462 & 0xFFFFFFFFFFFFFFF8;
        }
        llvm::MachineInstr::addMemOperand(v461, v459, v463);
        sub_1CBBABA58((uint64_t)v1770, v1, v452, 3u, v13 == 2741);
        uint64_t v91 = (llvm::MachineInstr *)v1;
        goto LABEL_1608;
      case 2744:
        uint64_t v979 = *(void *)(v1 + 32);
        int v980 = *(_DWORD *)(v979 + 32 * (v10 + 1) + 4);
        int v981 = *(_DWORD *)(v979 + 32 * (v10 + 2) + 4);
        v982 = v1770;
        int v983 = sub_1CBC2FD10(v1770);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v981;
        LODWORD(v1852[0]) = 0;
        DWORD2(v1852[0]) = v983;
        DWORD2(v1852[1]) = 0;
        uint64_t v25 = 1;
        uint64_t v984 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v982
                + 4))(v982, 127, v1805, 1, v1851, 2, 0);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v980;
        LODWORD(v1852[0]) = 0;
        *((void *)&v1852[0] + 1) = v984;
        *(void *)&v1852[1] = v985;
        DWORD2(v1852[1]) = 1;
        v986 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v982
                        + 4))(v982, 66, v1805, 1, v1851, 2, 0);
        LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
        LODWORD(v1805[1]) = 1;
        v1851[0] = v986;
        v1851[1] = v987;
        LODWORD(v1852[0]) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v982
         + 4))(v982, 267, v1805, 1, v1851, 1, 0);
        v966 = v1720;
        goto LABEL_1346;
      case 2745:
        uint64_t v970 = *(void *)(v1 + 32);
        uint64_t v25 = 1;
        LODWORD(v1805[0]) = *(_DWORD *)(v970 + 4);
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = *(_DWORD *)(v970 + 32 * (v10 + 1) + 4);
        LODWORD(v1852[0]) = 0;
        int v530 = (void (*)(void))*((void *)*v1770 + 4);
        goto LABEL_1091;
      case 2749:
        if (!*((unsigned char *)v14 + 1626)) {
          return 1;
        }
        v969 = "Intrinsic not supported by subtarget";
        goto LABEL_1135;
      case 2770:
      case 2771:
        uint64_t v723 = *(void *)(v1 + 32);
        int v724 = *(_DWORD *)(v723 + 4);
        unsigned int v725 = sub_1CBBB16A8(*(_DWORD *)(v723 + 32 * (v10 + 1) + 4), v1766, (llvm::IntegerType *****)v1770);
        sub_1CC73C210(v725, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)16777244;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v725;
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 312, v1805, 1, v1851, 1, 0);
          unsigned int v725 = *(_DWORD *)(*(void *)(v1151 + 32) + 4);
        }
        LODWORD(v1851[0]) = v724;
        LODWORD(v1851[1]) = 1;
        if (v13 == 2771) {
          v1152 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
        }
                                            + 4))(v1770, 285, v1851, 1, 0, 0, 0);
        else {
          v1152 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
        }
                                            + 4))(v1770, 284, v1851, 1, 0, 0, 0);
        v1154 = v1152;
        v1155 = v1153;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v725;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1153, v1152, (const llvm::MachineOperand *)v1851);
        if (v13 == 2770)
        {
          int v1156 = *(_DWORD *)(*((void *)v1720 + 4) + 32 * (v10 + 2) + 4);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v1156;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v1155, v1154, (const llvm::MachineOperand *)v1851);
        }
        uint64_t v91 = v1720;
        *((_WORD *)v1155 + 22) = *((_WORD *)v1155 + 22) & 0xC | *((_WORD *)v1720 + 22) & 0xFFF3;
        goto LABEL_1608;
      case 2772:
      case 2773:
        uint64_t v631 = *(void *)(v1 + 32);
        int v632 = *(_DWORD *)(v631 + 4);
        uint64_t v633 = v1770;
        unsigned int v634 = sub_1CBBB16A8(*(_DWORD *)(v631 + 32 * (v10 + 1) + 4), v1766, (llvm::IntegerType *****)v1770);
        unsigned int v635 = v634;
        if (v13 == 2773) {
          int v636 = 2;
        }
        else {
          int v636 = 3;
        }
        uint64_t v637 = (v636 + v10);
        int v638 = *(_DWORD *)(*((void *)v1720 + 4) + 32 * v637 + 4);
        sub_1CC73C210(v634, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)16777244;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v635;
          LODWORD(v1852[0]) = 0;
          v1110 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                           + 4))(v1770, 312, v1805, 1, v1851, 1, 0);
          v1112 = v1111;
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v1877[0] = (void *)257;
          LODWORD(v1877[1]) = 0;
          uint64_t v1113 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x20);
          v1115 = *(llvm::ConstantInt **)v1113;
          unsigned int v1116 = *(_DWORD *)(v1113 + 8);
          LODWORD(v1851[1]) = v1116 >> 8;
          int v1762 = v632;
          if (v1116 >> 8 >= 0x41) {
            operator new[]();
          }
          v1851[0] = 0;
          v1117 = llvm::ConstantInt::get(v1115, (llvm::LLVMContext *)v1851, v1114);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          uint64_t v1118 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, v1877, v1117);
          v1851[0] = v1110;
          v1851[1] = v1112;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v1118;
          *(void *)&v1852[1] = v1119;
          DWORD2(v1852[1]) = 1;
          uint64_t v1120 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                   + 4))(v1770, 205, v1805, 1, v1851, 2, 0);
          uint64_t v1122 = v1121;
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          uint64_t v1123 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x20);
          v1125 = *(llvm::ConstantInt **)v1123;
          unsigned int v1126 = *(_DWORD *)(v1123 + 8);
          LODWORD(v1851[1]) = v1126 >> 8;
          if (v1126 >> 8 > 0x40) {
            operator new[]();
          }
          if (v1126 <= 0xFF) {
            LOBYTE(v1127) = 0;
          }
          else {
            unint64_t v1127 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1126) + 63);
          }
          v1851[0] = (void *)(v1127 & 1);
          v1128 = llvm::ConstantInt::get(v1125, (llvm::LLVMContext *)v1851, v1124);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          uint64_t v1129 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v1128);
          size_t v1131 = v1130;
          v1851[0] = (void *)257;
          LODWORD(v1851[1]) = 0;
          uint64_t v1132 = sub_1CC7374CC((uint64_t)v1770, (unint64_t *)v1851, 1.0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = 32;
          LODWORD(v1852[0]) = 2;
          *((void *)&v1852[0] + 1) = v1120;
          *(void *)&v1852[1] = v1122;
          DWORD2(v1852[1]) = 1;
          uint64_t v1853 = v1129;
          size_t v1854 = v1131;
          int v1855 = 1;
          uint64_t v1856 = v1132;
          v1857 = v1133;
          int v1858 = 1;
          LODWORD(v1859) = v638;
          int v1861 = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
          *(_WORD *)(v1134 + 44) = *(_WORD *)(v1134 + 44) & 0xC | *((_WORD *)v1720 + 22) & 0xFFF3;
          unsigned int v635 = *(_DWORD *)(v1112[4] + 4);
          LODWORD(v13) = v1787;
          uint64_t v633 = v1770;
          int v638 = *(_DWORD *)(*(void *)(v1134 + 32) + 4);
          int v632 = v1762;
        }
        v1851[0] = (void *)257;
        LODWORD(v1851[1]) = 0;
        if (v13 == 2773) {
          v1135 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v633
        }
                                            + 4))(v633, 285, v1851, 1, 0, 0, 0);
        else {
          v1135 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v633
        }
                                            + 4))(v633, 284, v1851, 1, 0, 0, 0);
        v1137 = v1135;
        v1138 = v1136;
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v635;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v1136, v1135, (const llvm::MachineOperand *)v1851);
        if (v13 == 2772)
        {
          int v1139 = *(_DWORD *)(*((void *)v1720 + 4) + 32 * (v10 + 2) + 4);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v1139;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v1138, v1137, (const llvm::MachineOperand *)v1851);
        }
        *((_WORD *)v1138 + 22) = *((_WORD *)v1138 + 22) & 0xC | *((_WORD *)v1720 + 22) & 0xFFF3;
        v1140 = v1770;
        unint64_t v1141 = sub_1CBBAAB48(*(_DWORD *)(*((void *)v1720 + 4) + 32 * (v637 + 1) + 4), (uint64_t)v1770[3], 0x100u);
        if (HIDWORD(v1141))
        {
          v1851[0] = (void *)129;
          LODWORD(v1851[1]) = 0;
          unint64_t v1143 = v1141;
          v1144 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          unint64_t v1145 = v1143;
          v1140 = v1770;
          v1146 = llvm::ConstantInt::get(v1144, v1145, (const llvm::APInt *)1);
          (*((void (**)(unsigned __int8 **, void **, void *))*v1140 + 2))(v1140, v1851, v1146);
          int v1142 = *(_DWORD *)(*(void *)(v1147 + 32) + 4);
        }
        else
        {
          int v1142 = 0;
        }
        sub_1CC73C210(v635, v1766, (uint64_t)v1851);
        if (LOBYTE(v1852[0]))
        {
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          LODWORD(v1805[0]) = v632;
          LODWORD(v1805[1]) = 1;
          LODWORD(v1851[0]) = *(_DWORD *)(*((void *)v1138 + 4) + 4);
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v638;
          DWORD2(v1852[1]) = 0;
          LODWORD(v1853) = v635;
          int v1855 = 0;
          LODWORD(v1856) = v1142;
          int v1858 = 0;
          v1148 = v1720;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1140
           + 4))(v1140, 279, v1805, 1, v1851, 4, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
        }
        else
        {
          LODWORD(v1805[0]) = v632;
          LODWORD(v1805[1]) = 1;
          LODWORD(v1851[0]) = *(_DWORD *)(*((void *)v1138 + 4) + 4);
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v638;
          DWORD2(v1852[1]) = 0;
          v1148 = v1720;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1140
           + 4))(v1140, 165, v1805, 1, v1851, 2, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
        }
        uint64_t v91 = v1148;
        goto LABEL_1608;
      case 2774:
      case 2775:
      case 2777:
      case 2778:
      case 2779:
        uint64_t v112 = v1;
        uint64_t v358 = *(void *)(v1 + 32);
        unsigned int v359 = *(_DWORD *)(v358 + 36);
        if (*(unsigned char *)(v358 + 32) != 7)
        {
          unsigned int v360 = sub_1CBBAAB48(v359, v1766, 0);
          uint64_t v358 = *(void *)(v1 + 32);
          unsigned int v359 = v360 >> 1;
        }
        unsigned int v1736 = v359;
        int v1744 = *(_DWORD *)(v358 + 68);
        int v1752 = *(_DWORD *)(v358 + 100);
        int v361 = *(_DWORD *)(v358 + 132);
        int v362 = *(_DWORD *)(v358 + 164);
        int v363 = *(_DWORD *)(v358 + 196);
        int v364 = *(_DWORD *)(v358 + 228);
        int v1760 = v363;
        if (v13 == 2775)
        {
          int v365 = *(_DWORD *)(v358 + 228);
          int v1722 = *(_DWORD *)(v358 + 260);
          int v366 = *(_DWORD *)(v358 + 292);
          unsigned int v1725 = *(_DWORD *)(v358 + 324);
          v1877[0] = (void *)129;
          LODWORD(v1877[1]) = 0;
          uint64_t v367 = v1770;
          uint64_t v368 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770
                                           + 4))(v1770, 7129, v1877, 1, 0, 0, 0);
          uint64_t v370 = v369;
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v369, v368, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v361;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          int v1729 = v365;
          HIDWORD(v1851[0]) = v365;
          int v371 = v366;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 12;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 4;
          llvm::MachineInstr::addOperand(v370, v368, (const llvm::MachineOperand *)v1851);
          v1805[0] = v368;
          v1805[1] = v370;
          sub_1CBA318C8((uint64_t)v1805);
          v1890 = (void *)129;
          LODWORD(v1891) = 0;
          uint64_t v372 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v367
                                           + 4))(v367, 7129, &v1890, 1, 0, 0, 0);
          int v374 = v373;
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v373, v372, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v1722;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v362;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 8;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 4;
          llvm::MachineInstr::addOperand(v374, v372, (const llvm::MachineOperand *)v1851);
          v1877[0] = v372;
          v1877[1] = v374;
          sub_1CBA318C8((uint64_t)v1877);
          v1890 = (void *)257;
          LODWORD(v1891) = 0;
          *(_OWORD *)v1851 = *(_OWORD *)v1805;
          *(_OWORD *)((char *)v1852 + 8) = *(_OWORD *)v1877;
          LODWORD(v1852[0]) = 1;
          DWORD2(v1852[1]) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v367 + 4))(v367, 76, &v1890, 1, v1851, 2, 0);
          int v376 = *(_DWORD *)(*(void *)(v375 + 32) + 4);
          unint64_t v1862 = 257;
          LODWORD(v1863) = 0;
          int v377 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void, void, void))*v367
                                           + 4))(v367, 7093, &v1862, 1, 0, 0, 0);
          unint64_t v379 = v378;
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v378, v377, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v376;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v1760;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 28;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = 4;
          llvm::MachineInstr::addOperand(v379, v377, (const llvm::MachineOperand *)v1851);
          v1890 = v377;
          uint64_t v1891 = (uint64_t)v379;
          sub_1CBA318C8((uint64_t)&v1890);
          unsigned int v380 = *(_DWORD *)(*((void *)v379 + 4) + 4);
          unint64_t v1862 = 257;
          LODWORD(v1863) = 0;
          LODWORD(v1851[0]) = v366;
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))*v367
           + 4))(v367, 118, &v1862, 1, v1851, 1, 0);
          unsigned int v382 = *(_DWORD *)(*(void *)(v381 + 32) + 4);
          v1851[0] = (void *)257;
          LODWORD(v1851[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v367 + 4))(v367, 68, v1851, 1, 0, 0, 0);
          uint64_t v383 = 0;
          unsigned int v385 = *(_DWORD *)(*(void *)(v384 + 32) + 4);
          unint64_t v1862 = 16777252;
          LODWORD(v1863) = 0;
          v1880 = (void *)__PAIR64__(v1725, v380);
          unint64_t v1881 = __PAIR64__(v385, v382);
          v1851[0] = v1852;
          v1851[1] = (void *)0x800000000;
          uint64_t v386 = 2;
          do
          {
            long long v387 = &v1851[v386];
            *(_DWORD *)long long v387 = *(_DWORD *)((char *)&v1880 + v383);
            *((_DWORD *)v387 + 4) = 0;
            v386 += 3;
            v383 += 4;
          }
          while (v383 != 16);
          LODWORD(v1851[1]) += 4;
          (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _OWORD *))*v1770 + 4))(v1770, 77, &v1862, 1, v1852);
          uint64_t v389 = v388;
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
          uint64_t v390 = *(void *)(v389 + 32);
          unsigned int v391 = 11;
          int v392 = *(_DWORD *)(v390 + 4);
          int v1760 = v371;
          int v393 = v1752;
          int v361 = v1729;
          int v1752 = 0;
          uint64_t v112 = (uint64_t)v1720;
          uint64_t v394 = (uint64_t)v1770;
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v363;
          LODWORD(v1852[0]) = 0;
          DWORD2(v1852[0]) = v362;
          DWORD2(v1852[1]) = 0;
          uint64_t v394 = (uint64_t)v1770;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 76, v1805, 1, v1851, 2, 0);
          int v498 = *(_DWORD *)(*(void *)(v497 + 32) + 4);
          v1805[0] = (llvm::MachineInstr *)16777236;
          LODWORD(v1805[1]) = 0;
          v1851[0] = v1852;
          LODWORD(v1852[0]) = v498;
          LODWORD(v1852[1]) = 0;
          DWORD2(v1852[1]) = v364;
          LODWORD(v1854) = 0;
          v1851[1] = (void *)0x800000002;
          (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, _OWORD *, uint64_t, void))(*(void *)v394 + 32))(v394, 77, v1805, 1, v1852, 2, 0);
          uint64_t v500 = v499;
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
          int v393 = 0;
          int v392 = *(_DWORD *)(*(void *)(v500 + 32) + 4);
          unsigned int v391 = 8;
        }
        if (v392 < 0 && (v392 & 0x7FFFFFFFu) < *(_DWORD *)(v1766 + 432)) {
          unint64_t v501 = *(void **)(*(void *)(v1766 + 424) + 8 * (v392 & 0x7FFFFFFF));
        }
        else {
          unint64_t v501 = 0;
        }
        v1851[0] = v501;
        int v503 = sub_1CB8F1DC4((unint64_t *)v1851);
        if (v502 == 1) {
        v1805[0] = *(llvm::MachineInstr **)(v1705[30] + 8 * sub_1CBE52FF4(v503));
        }
        LODWORD(v1805[1]) = 2;
        LODWORD(v1851[0]) = v392;
        LODWORD(v1852[0]) = 0;
        (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v394 + 32))(v394, 19, v1805, 1, v1851, 1, 0);
        int v505 = *(_DWORD *)(*(void *)(v504 + 32) + 4);
        sub_1CBC2E7FC(v394, 2u);
        unint64_t v506 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(*(void *)v394 + 32))(v394, 4998, 0, 0, 0, 0, 0);
        uint64_t v508 = v507;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v507, v506, (const llvm::MachineOperand *)v1851);
        v1851[1] = 0;
        LODWORD(v1852[0]) = 64;
        DWORD2(v1852[0]) = 0;
        HIDWORD(v1851[0]) = v1736;
        LODWORD(v1851[0]) = 775;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v1744;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        v1805[0] = v506;
        v1805[1] = v508;
        if (*((unsigned char *)v14 + 1631) || *((unsigned char *)v14 + 1633))
        {
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v393;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
        }
        else
        {
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v1752;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          v1852[0] = 0uLL;
          v1851[1] = 0;
          HIDWORD(v1851[0]) = v361;
          LODWORD(v1851[0]) = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
          LODWORD(v1851[0]) = 1;
        }
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v505;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v508, v506, (const llvm::MachineOperand *)v1851);
        sub_1CBA318C8((uint64_t)v1805);
        uint64_t v509 = *(void *)(v112 + 48);
        if ((v509 & 7) != 0)
        {
          unint64_t v510 = *(llvm::MachineMemOperand **)((v509 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          unint64_t v510 = (llvm::MachineMemOperand *)(v509 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v112 + 48) = v509 & 0xFFFFFFFFFFFFFFF8;
        }
        llvm::MachineInstr::addMemOperand(v508, v506, v510);
        if ((v1787 - 2775) <= 4 && ((1 << (v1787 + 41)) & 0x19) != 0)
        {
          uint64_t v511 = *(unsigned int *)(*(void *)(v112 + 32) + 32 * (v391 + 7) + 4);
          if ((v511 & 0x80000000) != 0) {
            unint64_t v512 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v511 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v512 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v511);
          }
          uint64_t v513 = *v512;
          if ((*(unsigned char *)(v513 + 3) & 1) == 0) {
            uint64_t v513 = *(void *)(v513 + 24);
          }
          unsigned int v514 = (llvm::MachineMemOperand *)sub_1CBBAB8C8(v112, v391 + 2, *(void *)(*(void *)(*(void *)(v513 + 8) + 32) + 48), v1766);
          llvm::MachineInstr::addMemOperand(v508, v506, v514);
          uint64_t v515 = *(unsigned int *)(*(void *)(v112 + 32) + 32 * (v391 + 8) + 4);
          if ((v515 & 0x80000000) != 0) {
            BOOL v516 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v515 & 0x7FFFFFFF) + 8);
          }
          else {
            BOOL v516 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v515);
          }
          uint64_t v517 = *v516;
          if ((*(unsigned char *)(v517 + 3) & 1) == 0) {
            uint64_t v517 = *(void *)(v517 + 24);
          }
          long long v518 = (llvm::MachineMemOperand *)sub_1CBBAB8C8(v112, v391 | 4, *(void *)(*(void *)(*(void *)(v517 + 8) + 32) + 48), v1766);
          llvm::MachineInstr::addMemOperand(v508, v506, v518);
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1320, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCC1320))
        {
          byte_1EBCC1318 = 0;
          __cxa_guard_release(&qword_1EBCC1320);
        }
        if (!byte_1EBCC1318) {
          sub_1CBBABA58((uint64_t)v1770, v112, v1760, v391, v1787 == 2777);
        }
        goto LABEL_1607;
      case 2783:
        int v915 = v1770;
        v916 = (llvm::MachineFunction *)v1770[1];
        uint64_t v917 = *((void *)v1770[2] + 1) + 274752;
        v918 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v918;
        if (v918) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v918, 2);
        }
        size_t v919 = llvm::MachineFunction::CreateMachineInstr(v916, v917, (unsigned __int8 **)v1805, 0);
        uint64_t v920 = v1766;
        if (!v1805[0]) {
          goto LABEL_1019;
        }
        int v1676 = *(unsigned __int8 *)v1805[0];
        if ((v1676 - 4) > 0x1E)
        {
          if ((v1676 - 3) >= 0xFFFFFFFE) {
            v1696 = v1805[0];
          }
          else {
            v1696 = 0;
          }
          if ((v1676 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1678 = (unint64_t)v1696 + 8;
LABEL_2104:
            v1851[0] = v1805;
            sub_1CC5FA668(v1678 + 16, v1851);
            uint64_t v920 = v1766;
            int v915 = v1770;
            goto LABEL_1019;
          }
          uint64_t v920 = v1766;
          int v915 = v1770;
          if (v1676 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v920 = v1766;
          int v915 = v1770;
          if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
          {
            uint64_t v1677 = *((void *)v1805[0] + 2);
            if ((v1677 & 4) != 0)
            {
              unint64_t v1678 = v1677 & 0xFFFFFFFFFFFFFFF8;
              if (v1678) {
                goto LABEL_2104;
              }
            }
          }
        }
LABEL_1019:
        v921 = (unint64_t *)v915[6];
        uint64_t v922 = *((void *)v915[5] + 5);
        *((void *)v919 + 3) = v922;
        uint64_t v923 = *(void *)(v922 + 32);
        uint64_t v924 = *((unsigned int *)v919 + 10);
        if (v924)
        {
          uint64_t v1485 = *((void *)v919 + 4);
          uint64_t v1486 = *(void *)(v923 + 40);
          uint64_t v1487 = 32 * v924;
          uint64_t v920 = v1766;
          int v915 = v1770;
          do
          {
            if (!*(unsigned char *)v1485)
            {
              uint64_t v1488 = *(unsigned int *)(v1485 + 4);
              if ((int)v1488 >= 0) {
                v1489 = (uint64_t *)(*(void *)(v1486 + 272) + 8 * v1488);
              }
              else {
                v1489 = (uint64_t *)(*(void *)(v1486 + 24) + 16 * (v1488 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1490 = *v1489;
              if (*v1489)
              {
                uint64_t v1491 = *(void *)(v1490 + 16);
                *(void *)(v1490 + 16) = v1485;
                *(void *)(v1485 + 16) = v1491;
                if (*(unsigned char *)(v1485 + 3))
                {
                  *(void *)(v1485 + 24) = v1490;
                }
                else
                {
                  *(void *)(v1485 + 24) = 0;
                  v1489 = (uint64_t *)(v1491 + 24);
                }
              }
              else
              {
                *(void *)(v1485 + 16) = v1485;
                *(void *)(v1485 + 24) = 0;
              }
              uint64_t *v1489 = v1485;
            }
            v1485 += 32;
            v1487 -= 32;
          }
          while (v1487);
        }
        uint64_t v925 = *(void *)(v923 + 728);
        if (v925) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v925 + 24))(v925, v919);
        }
        unint64_t v926 = *v921 & 0xFFFFFFFFFFFFFFF8;
        *(void *)size_t v919 = v926 | *(void *)v919 & 7;
        *((void *)v919 + 1) = v921;
        *(void *)(v926 + 8) = v919;
        unint64_t *v921 = *v921 & 7 | (unint64_t)v919;
        v927 = v915[7];
        if (v927) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v927 + 24))(v927, v919);
        }
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v919, v916, (const llvm::MachineOperand *)v1851);
        uint64_t v928 = 36;
        while (1)
        {
          uint64_t v929 = *(unsigned int *)(*((void *)v1720 + 4) + v928);
          if ((v929 & 0x80000000) != 0) {
            v930 = (uint64_t *)(*(void *)(v920 + 24) + 16 * (v929 & 0x7FFFFFFF) + 8);
          }
          else {
            v930 = (uint64_t *)(*(void *)(v920 + 272) + 8 * v929);
          }
          uint64_t v931 = *v930;
          if ((*(unsigned char *)(v931 + 3) & 1) == 0) {
            uint64_t v931 = *(void *)(v931 + 24);
          }
          uint64_t v932 = *(void *)(v931 + 8);
          unsigned int v933 = **(unsigned __int16 **)(v932 + 16);
          if (v933 > 0x50) {
            break;
          }
          if (v933 == 71) {
            goto LABEL_1037;
          }
          if (v933 == 80)
          {
            uint64_t v934 = *(unsigned int *)(*(void *)(v932 + 32) + 36);
            if ((v934 & 0x80000000) != 0) {
              v935 = (uint64_t *)(*(void *)(v920 + 24) + 16 * (v934 & 0x7FFFFFFF) + 8);
            }
            else {
              v935 = (uint64_t *)(*(void *)(v920 + 272) + 8 * v934);
            }
            uint64_t v936 = *v935;
            if ((*(unsigned char *)(v936 + 3) & 1) == 0) {
              uint64_t v936 = *(void *)(v936 + 24);
            }
            uint64_t v932 = *(void *)(v936 + 8);
LABEL_1037:
            uint64_t v937 = *(void *)(*(void *)(v932 + 32) + 48);
            v1851[1] = 0;
            *(void *)&v1852[0] = v937;
            DWORD2(v1852[0]) = 0;
            v1851[0] = (void *)10;
LABEL_1049:
            llvm::MachineInstr::addOperand(v919, v916, (const llvm::MachineOperand *)v1851);
          }
LABEL_1050:
          v928 += 32;
          if (v928 == 132) {
            goto LABEL_1056;
          }
        }
        if (v933 == 81)
        {
          uint64_t v938 = *(unsigned int *)(*(void *)(v932 + 32) + 36);
          if ((v938 & 0x80000000) != 0) {
            v939 = (uint64_t *)(*(void *)(v920 + 24) + 16 * (v938 & 0x7FFFFFFF) + 8);
          }
          else {
            v939 = (uint64_t *)(*(void *)(v920 + 272) + 8 * v938);
          }
          uint64_t v940 = *v939;
          if ((*(unsigned char *)(v940 + 3) & 1) == 0) {
            uint64_t v940 = *(void *)(v940 + 24);
          }
          uint64_t v932 = *(void *)(v940 + 8);
        }
        else if (v933 != 120)
        {
          goto LABEL_1050;
        }
        uint64_t v941 = *(void *)(*(void *)(v932 + 32) + 48);
        v942 = (void *)(v941 + 24);
        if (*(_DWORD *)(v941 + 32) >= 0x41u) {
          v942 = (void *)*v942;
        }
        v943 = (void *)*v942;
        LODWORD(v1851[0]) = 1;
        v1851[1] = 0;
        *(void *)&v1852[0] = v943;
        goto LABEL_1049;
      case 2787:
      case 2788:
      case 2791:
        if (!*((unsigned char *)v14 + 1628) && !*((unsigned char *)v14 + 1629) && !*((unsigned char *)v14 + 1631) && !*((unsigned char *)v14 + 1633)) {
          return 0;
        }
        uint64_t v471 = 96;
        if (v13 == 2787) {
          uint64_t v471 = 64;
        }
        int v472 = *(_DWORD *)(*(void *)(v1 + 32) + v471 + 4);
        v1805[0] = (llvm::MachineInstr *)129;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1851[0]) = v472;
        LODWORD(v1852[0]) = 0;
        sub_1CC7382B0((uint64_t)v1770);
        int v474 = *(_DWORD *)(*(void *)(v473 + 32) + 4);
        if (v13 == 2787)
        {
          v1851[0] = (void *)129;
          LODWORD(v1851[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*v1770 + 4))(v1770, 68, v1851, 1, 0, 0, 0);
          uint64_t v475 = 0;
          unsigned int v477 = *(_DWORD *)(*(void *)(v476 + 32) + 4);
          v1805[0] = (llvm::MachineInstr *)8388636;
          unsigned int v478 = *(_DWORD *)(*(void *)(v1 + 32) + 36);
          LODWORD(v1805[1]) = 0;
          v1877[0] = (void *)__PAIR64__(v478, v477);
          LODWORD(v1877[1]) = v474;
          v1851[0] = v1852;
          v1851[1] = (void *)0x800000000;
          uint64_t v479 = 2;
          do
          {
            uint64_t v480 = &v1851[v479];
            *(_DWORD *)uint64_t v480 = *(_DWORD *)((char *)v1877 + v475);
            *((_DWORD *)v480 + 4) = 0;
            v479 += 3;
            v475 += 4;
          }
          while (v475 != 12);
          LODWORD(v1851[1]) += 3;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, _OWORD *))*v1770 + 4))(v1770, 77, v1805, 1, v1852);
          uint64_t v482 = v481;
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
          uint64_t v483 = 9206;
        }
        else
        {
          uint64_t v749 = 0;
          uint64_t v750 = *(void *)(v1 + 32);
          v1805[0] = (llvm::MachineInstr *)8388636;
          unsigned int v751 = *(_DWORD *)(v750 + 68);
          LODWORD(v750) = *(_DWORD *)(v750 + 36);
          LODWORD(v1805[1]) = 0;
          v1877[0] = (void *)__PAIR64__(v750, v751);
          LODWORD(v1877[1]) = v474;
          v1851[0] = v1852;
          v1851[1] = (void *)0x800000000;
          uint64_t v752 = 2;
          do
          {
            __int16 v753 = &v1851[v752];
            *(_DWORD *)__int16 v753 = *(_DWORD *)((char *)v1877 + v749);
            *((_DWORD *)v753 + 4) = 0;
            v752 += 3;
            v749 += 4;
          }
          while (v749 != 12);
          LODWORD(v1851[1]) += 3;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, _OWORD *))*v1770 + 4))(v1770, 77, v1805, 1, v1852);
          uint64_t v482 = v754;
          if (v1851[0] != v1852) {
            free(v1851[0]);
          }
          uint64_t v483 = 9207;
          if (v13 == 2791) {
            uint64_t v483 = 9208;
          }
        }
        unint64_t v755 = (llvm::MachineFunction *)v1770[1];
        uint64_t v756 = *((void *)v1770[2] + 1) + 48 * v483;
        unsigned int v757 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v757;
        if (v757) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v757, 2);
        }
        int v758 = llvm::MachineFunction::CreateMachineInstr(v755, v756, (unsigned __int8 **)v1805, 0);
        if (!v1805[0]) {
          goto LABEL_871;
        }
        int v1661 = *(unsigned __int8 *)v1805[0];
        if ((v1661 - 4) > 0x1E)
        {
          if ((v1661 - 3) >= 0xFFFFFFFE) {
            v1691 = v1805[0];
          }
          else {
            v1691 = 0;
          }
          if ((v1661 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1663 = (unint64_t)v1691 + 8;
LABEL_2059:
            v1851[0] = v1805;
            sub_1CC5FA668(v1663 + 16, v1851);
            goto LABEL_871;
          }
          if (v1661 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
        {
          uint64_t v1662 = *((void *)v1805[0] + 2);
          if ((v1662 & 4) != 0)
          {
            unint64_t v1663 = v1662 & 0xFFFFFFFFFFFFFFF8;
            if (v1663) {
              goto LABEL_2059;
            }
          }
        }
LABEL_871:
        v759 = (unint64_t *)v1770[6];
        uint64_t v760 = *((void *)v1770[5] + 5);
        *((void *)v758 + 3) = v760;
        uint64_t v761 = *(void *)(v760 + 32);
        uint64_t v762 = *((unsigned int *)v758 + 10);
        if (v762)
        {
          uint64_t v1418 = *((void *)v758 + 4);
          uint64_t v1419 = *(void *)(v761 + 40);
          uint64_t v1420 = 32 * v762;
          do
          {
            if (!*(unsigned char *)v1418)
            {
              uint64_t v1421 = *(unsigned int *)(v1418 + 4);
              if ((int)v1421 >= 0) {
                v1422 = (uint64_t *)(*(void *)(v1419 + 272) + 8 * v1421);
              }
              else {
                v1422 = (uint64_t *)(*(void *)(v1419 + 24) + 16 * (v1421 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1423 = *v1422;
              if (*v1422)
              {
                uint64_t v1424 = *(void *)(v1423 + 16);
                *(void *)(v1423 + 16) = v1418;
                *(void *)(v1418 + 16) = v1424;
                if (*(unsigned char *)(v1418 + 3))
                {
                  *(void *)(v1418 + 24) = v1423;
                }
                else
                {
                  *(void *)(v1418 + 24) = 0;
                  v1422 = (uint64_t *)(v1424 + 24);
                }
              }
              else
              {
                *(void *)(v1418 + 16) = v1418;
                *(void *)(v1418 + 24) = 0;
              }
              uint64_t *v1422 = v1418;
            }
            v1418 += 32;
            v1420 -= 32;
          }
          while (v1420);
        }
        uint64_t v763 = *(void *)(v761 + 728);
        if (v763) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v763 + 24))(v763, v758);
        }
        unint64_t v764 = *v759 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v758 = v764 | *(void *)v758 & 7;
        *((void *)v758 + 1) = v759;
        *(void *)(v764 + 8) = v758;
        unint64_t *v759 = *v759 & 7 | (unint64_t)v758;
        v765 = v1770[7];
        if (v765) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v765 + 24))(v765, v758);
        }
        uint64_t v25 = 1;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v758, v755, (const llvm::MachineOperand *)v1851);
        int v766 = *(_DWORD *)(*(void *)(v482 + 32) + 4);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v766;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v758, v755, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v758, v755, (const llvm::MachineOperand *)v1851);
        sub_1CC73B5D0(v758, v1708, v1705);
LABEL_1345:
        v966 = v1720;
        goto LABEL_1346;
      case 2792:
        uint64_t v907 = *(void *)(v1 + 32);
        int v908 = *(_DWORD *)(v907 + 36);
        if ((v908 & 0x80000000) == 0) {
          return 0;
        }
        unsigned int v909 = *(_DWORD *)(v1766 + 432);
        if ((v908 & 0x7FFFFFFFu) >= v909) {
          return 0;
        }
        uint64_t v910 = *(void *)(v1766 + 424);
        if (*(void *)(v910 + 8 * (v908 & 0x7FFFFFFF)) != 16777252) {
          return 0;
        }
        int v911 = *(_DWORD *)(v907 + 68);
        if ((v911 & 0x80000000) == 0 || (v911 & 0x7FFFFFFFu) >= v909) {
          return 0;
        }
        uint64_t v25 = 0;
        unint64_t v912 = *(void *)(v910 + 8 * (v911 & 0x7FFFFFFF));
        if ((v912 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(v910 + 8 * (v911 & 0x7FFFFFFF)) & 6) != 2) {
          return v25;
        }
        char v913 = 35;
        if ((v912 & 4) == 0) {
          char v913 = 19;
        }
        if (((v912 >> v913) & 0xFFFFFF) != 3) {
          return 0;
        }
        unint64_t v914 = *(void *)(v1 + 48);
        if (v914 < 8) {
          return 0;
        }
        if ((v914 & 7) != 0)
        {
          uint64_t v25 = 0;
          if ((*(void *)(v1 + 48) & 7) != 3 || (v914 & 0xFFFFFFFFFFFFFFF8) == 0) {
            return v25;
          }
          if (*(_DWORD *)(v914 & 0xFFFFFFFFFFFFFFF8) != 1) {
            return 0;
          }
        }
        else
        {
          v914 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)(v1 + 48) = v914;
        }
        if ((v914 & 7) != 0)
        {
          v1514 = *(llvm::MachineMemOperand **)((v914 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          v1514 = (llvm::MachineMemOperand *)(v914 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(v1 + 48) = v914 & 0xFFFFFFFFFFFFFFF8;
        }
        LODWORD(v1851[0]) = v908;
        LODWORD(v1852[0]) = 0;
        LODWORD(v1805[0]) = v911;
        LODWORD(v1806[0]) = 0;
        sub_1CC737D1C(v1770, (int *)v1851, (int *)v1805, v1514);
        goto LABEL_1056;
      case 2811:
        int v490 = (llvm::MachineInstr *)v1;
        int v786 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        unint64_t v787 = sub_1CBBAB7CC(v1770);
        if (HIDWORD(v787))
        {
          LODWORD(v1805[0]) = v786;
          LODWORD(v1805[1]) = 1;
          LODWORD(v1851[0]) = v787;
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 19, v1805, 1, v1851, 1, 0);
        }
        goto LABEL_730;
      case 2812:
        v971 = (llvm::MachineInstr *)v1;
        int v972 = *(_DWORD *)(*(void *)(v1 + 32) + 4);
        v973 = (uint64_t *)v1770[1];
        if (sub_1CD112198(*(void *)(*v973 + 40)))
        {
          int v974 = sub_1CD1122DC(v973[43]);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          v975 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void, void, void))*v1770
                                           + 4))(v1770, 313, v1805, 1, 0, 0, 0);
          v977 = v976;
          LODWORD(v1851[0]) = 1;
          v1851[1] = 0;
          *(void *)&v1852[0] = (v974 + 4);
          llvm::MachineInstr::addOperand(v976, v975, (const llvm::MachineOperand *)v1851);
          v971 = v1720;
          int v978 = *(_DWORD *)(*((void *)v977 + 4) + 4);
          LODWORD(v1805[0]) = v972;
          LODWORD(v1805[1]) = 1;
          LODWORD(v1851[0]) = v978;
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
           + 4))(v1770, 19, v1805, 1, v1851, 1, 0);
        }
        uint64_t v91 = v971;
        goto LABEL_1608;
      case 2819:
      case 2847:
        if (v13 != 2819)
        {
          uint64_t v736 = 9205;
          uint64_t v735 = (uint64_t)v1770;
          goto LABEL_1097;
        }
        uint64_t v735 = (uint64_t)v1770;
        if (!*((unsigned char *)v14 + 1629) && !*((unsigned char *)v14 + 1631))
        {
          uint64_t v736 = 6716;
LABEL_1097:
          uint64_t v25 = 1;
          sub_1CBC2E7FC(v735, 1u);
          uint64_t v989 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(*(void *)v735 + 32))(v735, v736, 0, 0, 0, 0, 0);
          v991 = v990;
          LODWORD(v1851[0]) = 1;
          *(void *)&v1852[0] = 0;
          v1851[1] = 0;
          v992 = (llvm::MachineFunction *)v989;
          goto LABEL_1344;
        }
        goto LABEL_1056;
      case 2821:
        v852 = v1770;
        uint64_t v853 = (llvm::MachineFunction *)v1770[1];
        uint64_t v854 = *((void *)v1770[2] + 1) + 327984;
        v855 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v855;
        if (v855) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v855, 2);
        }
        v856 = llvm::MachineFunction::CreateMachineInstr(v853, v854, (unsigned __int8 **)v1805, 0);
        uint64_t v857 = v1766;
        if (!v1805[0]) {
          goto LABEL_944;
        }
        int v1670 = *(unsigned __int8 *)v1805[0];
        if ((v1670 - 4) > 0x1E)
        {
          if ((v1670 - 3) >= 0xFFFFFFFE) {
            v1694 = v1805[0];
          }
          else {
            v1694 = 0;
          }
          if ((v1670 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1672 = (unint64_t)v1694 + 8;
LABEL_2092:
            v1851[0] = v1805;
            sub_1CC5FA668(v1672 + 16, v1851);
            uint64_t v857 = v1766;
            v852 = v1770;
            goto LABEL_944;
          }
          uint64_t v857 = v1766;
          v852 = v1770;
          if (v1670 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v857 = v1766;
          v852 = v1770;
          if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
          {
            uint64_t v1671 = *((void *)v1805[0] + 2);
            if ((v1671 & 4) != 0)
            {
              unint64_t v1672 = v1671 & 0xFFFFFFFFFFFFFFF8;
              if (v1672) {
                goto LABEL_2092;
              }
            }
          }
        }
LABEL_944:
        unint64_t v858 = (unint64_t *)v852[6];
        uint64_t v859 = *((void *)v852[5] + 5);
        *((void *)v856 + 3) = v859;
        uint64_t v860 = *(void *)(v859 + 32);
        uint64_t v861 = *((unsigned int *)v856 + 10);
        if (v861)
        {
          uint64_t v1471 = *((void *)v856 + 4);
          uint64_t v1472 = *(void *)(v860 + 40);
          uint64_t v1473 = 32 * v861;
          uint64_t v857 = v1766;
          v852 = v1770;
          do
          {
            if (!*(unsigned char *)v1471)
            {
              uint64_t v1474 = *(unsigned int *)(v1471 + 4);
              if ((int)v1474 >= 0) {
                v1475 = (uint64_t *)(*(void *)(v1472 + 272) + 8 * v1474);
              }
              else {
                v1475 = (uint64_t *)(*(void *)(v1472 + 24) + 16 * (v1474 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1476 = *v1475;
              if (*v1475)
              {
                uint64_t v1477 = *(void *)(v1476 + 16);
                *(void *)(v1476 + 16) = v1471;
                *(void *)(v1471 + 16) = v1477;
                if (*(unsigned char *)(v1471 + 3))
                {
                  *(void *)(v1471 + 24) = v1476;
                }
                else
                {
                  *(void *)(v1471 + 24) = 0;
                  v1475 = (uint64_t *)(v1477 + 24);
                }
              }
              else
              {
                *(void *)(v1471 + 16) = v1471;
                *(void *)(v1471 + 24) = 0;
              }
              uint64_t *v1475 = v1471;
            }
            v1471 += 32;
            v1473 -= 32;
          }
          while (v1473);
        }
        uint64_t v862 = *(void *)(v860 + 728);
        if (v862) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v862 + 24))(v862, v856);
        }
        unint64_t v863 = *v858 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v856 = v863 | *(void *)v856 & 7;
        *((void *)v856 + 1) = v858;
        *(void *)(v863 + 8) = v856;
        *unint64_t v858 = *v858 & 7 | (unint64_t)v856;
        v864 = v852[7];
        if (v864) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v864 + 24))(v864, v856);
        }
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v856, v853, (const llvm::MachineOperand *)v1851);
        uint64_t v865 = 36;
        while (1)
        {
          uint64_t v866 = *(unsigned int *)(*((void *)v1720 + 4) + v865);
          if ((v866 & 0x80000000) != 0) {
            v867 = (uint64_t *)(*(void *)(v857 + 24) + 16 * (v866 & 0x7FFFFFFF) + 8);
          }
          else {
            v867 = (uint64_t *)(*(void *)(v857 + 272) + 8 * v866);
          }
          uint64_t v868 = *v867;
          if ((*(unsigned char *)(v868 + 3) & 1) == 0) {
            uint64_t v868 = *(void *)(v868 + 24);
          }
          uint64_t v869 = *(void *)(v868 + 8);
          int v870 = **(unsigned __int16 **)(v869 + 16);
          if (v870 == 80) {
            break;
          }
          if (v870 == 120)
          {
            uint64_t v871 = *(void *)(*(void *)(v869 + 32) + 48);
            v872 = (void *)(v871 + 24);
            if (*(_DWORD *)(v871 + 32) >= 0x41u) {
              v872 = (void *)*v872;
            }
            v873 = (void *)*v872;
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = v873;
LABEL_964:
            llvm::MachineInstr::addOperand(v856, v853, (const llvm::MachineOperand *)v1851);
          }
          v865 += 32;
          if (v865 == 132) {
            goto LABEL_1056;
          }
        }
        uint64_t v874 = *(unsigned int *)(*(void *)(v869 + 32) + 36);
        if ((v874 & 0x80000000) != 0) {
          v875 = (uint64_t *)(*(void *)(v857 + 24) + 16 * (v874 & 0x7FFFFFFF) + 8);
        }
        else {
          v875 = (uint64_t *)(*(void *)(v857 + 272) + 8 * v874);
        }
        uint64_t v876 = *v875;
        if ((*(unsigned char *)(v876 + 3) & 1) == 0) {
          uint64_t v876 = *(void *)(v876 + 24);
        }
        uint64_t v877 = *(void *)(*(void *)(*(void *)(v876 + 8) + 32) + 48);
        v1851[1] = 0;
        *(void *)&v1852[0] = v877;
        DWORD2(v1852[0]) = 0;
        v1851[0] = (void *)10;
        goto LABEL_964;
      case 2836:
        uint64_t v881 = v1770;
        unsigned int v882 = (llvm::MachineFunction *)v1770[1];
        uint64_t v883 = *((void *)v1770[2] + 1) + 417360;
        v884 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v884;
        if (v884) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v884, 2);
        }
        v885 = llvm::MachineFunction::CreateMachineInstr(v882, v883, (unsigned __int8 **)v1805, 0);
        uint64_t v886 = v1766;
        if (!v1805[0]) {
          goto LABEL_975;
        }
        int v1673 = *(unsigned __int8 *)v1805[0];
        if ((v1673 - 4) > 0x1E)
        {
          if ((v1673 - 3) >= 0xFFFFFFFE) {
            v1695 = v1805[0];
          }
          else {
            v1695 = 0;
          }
          if ((v1673 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1675 = (unint64_t)v1695 + 8;
LABEL_2098:
            v1851[0] = v1805;
            sub_1CC5FA668(v1675 + 16, v1851);
            uint64_t v886 = v1766;
            uint64_t v881 = v1770;
            goto LABEL_975;
          }
          uint64_t v886 = v1766;
          uint64_t v881 = v1770;
          if (v1673 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v886 = v1766;
          uint64_t v881 = v1770;
          if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
          {
            uint64_t v1674 = *((void *)v1805[0] + 2);
            if ((v1674 & 4) != 0)
            {
              unint64_t v1675 = v1674 & 0xFFFFFFFFFFFFFFF8;
              if (v1675) {
                goto LABEL_2098;
              }
            }
          }
        }
LABEL_975:
        v887 = (unint64_t *)v881[6];
        uint64_t v888 = *((void *)v881[5] + 5);
        *((void *)v885 + 3) = v888;
        uint64_t v889 = *(void *)(v888 + 32);
        uint64_t v890 = *((unsigned int *)v885 + 10);
        if (v890)
        {
          uint64_t v1478 = *((void *)v885 + 4);
          uint64_t v1479 = *(void *)(v889 + 40);
          uint64_t v1480 = 32 * v890;
          uint64_t v886 = v1766;
          uint64_t v881 = v1770;
          do
          {
            if (!*(unsigned char *)v1478)
            {
              uint64_t v1481 = *(unsigned int *)(v1478 + 4);
              if ((int)v1481 >= 0) {
                v1482 = (uint64_t *)(*(void *)(v1479 + 272) + 8 * v1481);
              }
              else {
                v1482 = (uint64_t *)(*(void *)(v1479 + 24) + 16 * (v1481 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1483 = *v1482;
              if (*v1482)
              {
                uint64_t v1484 = *(void *)(v1483 + 16);
                *(void *)(v1483 + 16) = v1478;
                *(void *)(v1478 + 16) = v1484;
                if (*(unsigned char *)(v1478 + 3))
                {
                  *(void *)(v1478 + 24) = v1483;
                }
                else
                {
                  *(void *)(v1478 + 24) = 0;
                  v1482 = (uint64_t *)(v1484 + 24);
                }
              }
              else
              {
                *(void *)(v1478 + 16) = v1478;
                *(void *)(v1478 + 24) = 0;
              }
              uint64_t *v1482 = v1478;
            }
            v1478 += 32;
            v1480 -= 32;
          }
          while (v1480);
        }
        uint64_t v891 = *(void *)(v889 + 728);
        if (v891) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v891 + 24))(v891, v885);
        }
        unint64_t v892 = *v887 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v885 = v892 | *(void *)v885 & 7;
        *((void *)v885 + 1) = v887;
        *(void *)(v892 + 8) = v885;
        unint64_t *v887 = *v887 & 7 | (unint64_t)v885;
        uint64_t v893 = v881[7];
        if (v893) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v893 + 24))(v893, v885);
        }
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v885, v882, (const llvm::MachineOperand *)v1851);
        uint64_t v894 = 36;
        while (1)
        {
          uint64_t v895 = *(unsigned int *)(*((void *)v1720 + 4) + v894);
          if ((v895 & 0x80000000) != 0) {
            long long v896 = (uint64_t *)(*(void *)(v886 + 24) + 16 * (v895 & 0x7FFFFFFF) + 8);
          }
          else {
            long long v896 = (uint64_t *)(*(void *)(v886 + 272) + 8 * v895);
          }
          uint64_t v897 = *v896;
          if ((*(unsigned char *)(v897 + 3) & 1) == 0) {
            uint64_t v897 = *(void *)(v897 + 24);
          }
          uint64_t v898 = *(void *)(v897 + 8);
          int v899 = **(unsigned __int16 **)(v898 + 16);
          if (v899 == 80) {
            break;
          }
          if (v899 == 120)
          {
            uint64_t v900 = *(void *)(*(void *)(v898 + 32) + 48);
            v901 = (void *)(v900 + 24);
            if (*(_DWORD *)(v900 + 32) >= 0x41u) {
              v901 = (void *)*v901;
            }
            v902 = (void *)*v901;
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = v902;
LABEL_995:
            llvm::MachineInstr::addOperand(v885, v882, (const llvm::MachineOperand *)v1851);
          }
          v894 += 32;
          if (v894 == 260) {
            goto LABEL_1056;
          }
        }
        uint64_t v903 = *(unsigned int *)(*(void *)(v898 + 32) + 36);
        if ((v903 & 0x80000000) != 0) {
          v904 = (uint64_t *)(*(void *)(v886 + 24) + 16 * (v903 & 0x7FFFFFFF) + 8);
        }
        else {
          v904 = (uint64_t *)(*(void *)(v886 + 272) + 8 * v903);
        }
        uint64_t v905 = *v904;
        if ((*(unsigned char *)(v905 + 3) & 1) == 0) {
          uint64_t v905 = *(void *)(v905 + 24);
        }
        uint64_t v906 = *(void *)(*(void *)(*(void *)(v905 + 8) + 32) + 48);
        v1851[1] = 0;
        *(void *)&v1852[0] = v906;
        DWORD2(v1852[0]) = 0;
        v1851[0] = (void *)10;
        goto LABEL_995;
      case 2837:
        v1025 = v1770;
        v1026 = (llvm::MachineFunction *)v1770[1];
        uint64_t v1027 = *((void *)v1770[2] + 1) + 417408;
        v1028 = (llvm::MachineInstr *)v1770[4];
        v1805[0] = v1028;
        if (v1028) {
          llvm::MetadataTracking::track((uint64_t)v1805, (unsigned __int8 *)v1028, 2);
        }
        v1029 = llvm::MachineFunction::CreateMachineInstr(v1026, v1027, (unsigned __int8 **)v1805, 0);
        uint64_t v1030 = v1766;
        if (!v1805[0]) {
          goto LABEL_1171;
        }
        int v1682 = *(unsigned __int8 *)v1805[0];
        if ((v1682 - 4) > 0x1E)
        {
          if ((v1682 - 3) >= 0xFFFFFFFE) {
            v1698 = v1805[0];
          }
          else {
            v1698 = 0;
          }
          if ((v1682 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1684 = (unint64_t)v1698 + 8;
LABEL_2116:
            v1851[0] = v1805;
            sub_1CC5FA668(v1684 + 16, v1851);
            uint64_t v1030 = v1766;
            v1025 = v1770;
            goto LABEL_1171;
          }
          uint64_t v1030 = v1766;
          v1025 = v1770;
          if (v1682 == 3) {
            *((void *)v1805[0] + 1) = 0;
          }
        }
        else
        {
          uint64_t v1030 = v1766;
          v1025 = v1770;
          if ((*((unsigned char *)v1805[0] + 1) & 0x7F) == 2 || *((_DWORD *)v1805[0] + 3))
          {
            uint64_t v1683 = *((void *)v1805[0] + 2);
            if ((v1683 & 4) != 0)
            {
              unint64_t v1684 = v1683 & 0xFFFFFFFFFFFFFFF8;
              if (v1684) {
                goto LABEL_2116;
              }
            }
          }
        }
LABEL_1171:
        v1031 = (unint64_t *)v1025[6];
        uint64_t v1032 = *((void *)v1025[5] + 5);
        *((void *)v1029 + 3) = v1032;
        uint64_t v1033 = *(void *)(v1032 + 32);
        uint64_t v1034 = *((unsigned int *)v1029 + 10);
        if (v1034)
        {
          uint64_t v1499 = *((void *)v1029 + 4);
          uint64_t v1500 = *(void *)(v1033 + 40);
          uint64_t v1501 = 32 * v1034;
          uint64_t v1030 = v1766;
          v1025 = v1770;
          do
          {
            if (!*(unsigned char *)v1499)
            {
              uint64_t v1502 = *(unsigned int *)(v1499 + 4);
              if ((int)v1502 >= 0) {
                v1503 = (uint64_t *)(*(void *)(v1500 + 272) + 8 * v1502);
              }
              else {
                v1503 = (uint64_t *)(*(void *)(v1500 + 24) + 16 * (v1502 & 0x7FFFFFFF) + 8);
              }
              uint64_t v1504 = *v1503;
              if (*v1503)
              {
                uint64_t v1505 = *(void *)(v1504 + 16);
                *(void *)(v1504 + 16) = v1499;
                *(void *)(v1499 + 16) = v1505;
                if (*(unsigned char *)(v1499 + 3))
                {
                  *(void *)(v1499 + 24) = v1504;
                }
                else
                {
                  *(void *)(v1499 + 24) = 0;
                  v1503 = (uint64_t *)(v1505 + 24);
                }
              }
              else
              {
                *(void *)(v1499 + 16) = v1499;
                *(void *)(v1499 + 24) = 0;
              }
              uint64_t *v1503 = v1499;
            }
            v1499 += 32;
            v1501 -= 32;
          }
          while (v1501);
        }
        uint64_t v1035 = *(void *)(v1033 + 728);
        if (v1035) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v1035 + 24))(v1035, v1029);
        }
        unint64_t v1036 = *v1031 & 0xFFFFFFFFFFFFFFF8;
        *(void *)v1029 = v1036 | *(void *)v1029 & 7;
        *((void *)v1029 + 1) = v1031;
        *(void *)(v1036 + 8) = v1029;
        unint64_t *v1031 = *v1031 & 7 | (unint64_t)v1029;
        v1037 = v1025[7];
        if (v1037) {
          (*(void (**)(unsigned __int8 *, llvm::MachineInstr *))(*(void *)v1037 + 24))(v1037, v1029);
        }
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v1029, v1026, (const llvm::MachineOperand *)v1851);
        uint64_t v1038 = 36;
        while (1)
        {
          uint64_t v1039 = *(unsigned int *)(*((void *)v1720 + 4) + v1038);
          if ((v1039 & 0x80000000) != 0) {
            v1040 = (uint64_t *)(*(void *)(v1030 + 24) + 16 * (v1039 & 0x7FFFFFFF) + 8);
          }
          else {
            v1040 = (uint64_t *)(*(void *)(v1030 + 272) + 8 * v1039);
          }
          uint64_t v1041 = *v1040;
          if ((*(unsigned char *)(v1041 + 3) & 1) == 0) {
            uint64_t v1041 = *(void *)(v1041 + 24);
          }
          uint64_t v1042 = *(void *)(v1041 + 8);
          int v1043 = **(unsigned __int16 **)(v1042 + 16);
          if (v1043 == 80) {
            break;
          }
          if (v1043 == 120)
          {
            uint64_t v1044 = *(void *)(*(void *)(v1042 + 32) + 48);
            v1045 = (void *)(v1044 + 24);
            if (*(_DWORD *)(v1044 + 32) >= 0x41u) {
              v1045 = (void *)*v1045;
            }
            v1046 = (void *)*v1045;
            LODWORD(v1851[0]) = 1;
            v1851[1] = 0;
            *(void *)&v1852[0] = v1046;
LABEL_1191:
            llvm::MachineInstr::addOperand(v1029, v1026, (const llvm::MachineOperand *)v1851);
          }
          v1038 += 32;
          if (v1038 == 196) {
            goto LABEL_1056;
          }
        }
        uint64_t v1047 = *(unsigned int *)(*(void *)(v1042 + 32) + 36);
        if ((v1047 & 0x80000000) != 0) {
          v1048 = (uint64_t *)(*(void *)(v1030 + 24) + 16 * (v1047 & 0x7FFFFFFF) + 8);
        }
        else {
          v1048 = (uint64_t *)(*(void *)(v1030 + 272) + 8 * v1047);
        }
        uint64_t v1049 = *v1048;
        if ((*(unsigned char *)(v1049 + 3) & 1) == 0) {
          uint64_t v1049 = *(void *)(v1049 + 24);
        }
        uint64_t v1050 = *(void *)(*(void *)(*(void *)(v1049 + 8) + 32) + 48);
        v1851[1] = 0;
        *(void *)&v1852[0] = v1050;
        DWORD2(v1852[0]) = 0;
        v1851[0] = (void *)10;
        goto LABEL_1191;
      case 2846:
        uint64_t v960 = *(void *)(v1 + 32);
        unsigned int v961 = *(_DWORD *)(v960 + 36);
        if (*(unsigned char *)(v960 + 32) != 7)
        {
          unsigned int v961 = sub_1CBBAAB48(*(_DWORD *)(v960 + 36), v1766, 0) >> 1;
          uint64_t v960 = *(void *)(v1 + 32);
        }
        int v962 = *(_DWORD *)(v960 + 68);
        uint64_t v25 = 1;
        sub_1CBC2E7FC((uint64_t)v1770, 1u);
        v963 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void, void, void, void, void))*v1770
                                         + 4))(v1770, 9204, 0, 0, 0, 0, 0);
        v965 = v964;
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v964, v963, (const llvm::MachineOperand *)v1851);
        v1851[1] = 0;
        LODWORD(v1852[0]) = 64;
        DWORD2(v1852[0]) = 0;
        HIDWORD(v1851[0]) = v961;
        LODWORD(v1851[0]) = 775;
        llvm::MachineInstr::addOperand(v965, v963, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v965, v963, (const llvm::MachineOperand *)v1851);
        v1852[0] = 0uLL;
        v1851[1] = 0;
        HIDWORD(v1851[0]) = v962;
        LODWORD(v1851[0]) = 0;
        llvm::MachineInstr::addOperand(v965, v963, (const llvm::MachineOperand *)v1851);
        LODWORD(v1851[0]) = 1;
        *(void *)&v1852[0] = 0;
        v1851[1] = 0;
        llvm::MachineInstr::addOperand(v965, v963, (const llvm::MachineOperand *)v1851);
        v1851[0] = v963;
        v1851[1] = v965;
        sub_1CBA318C8((uint64_t)v1851);
        v966 = v1720;
        goto LABEL_1346;
      default:
        if (v13 != 280)
        {
          if (v13 != 296) {
            return v25;
          }
          uint64_t v531 = *(void *)(v1 + 32);
          int v532 = *(_DWORD *)(v531 + 4);
          int v533 = *(_DWORD *)(v531 + 68);
          if (v532 < 0)
          {
            uint64_t v535 = v1770;
            if ((v532 & 0x7FFFFFFFu) >= *(_DWORD *)(v1766 + 432)) {
              uint64_t v534 = 0;
            }
            else {
              uint64_t v534 = *(void **)(*(void *)(v1766 + 424) + 8 * (v532 & 0x7FFFFFFF));
            }
          }
          else
          {
            uint64_t v534 = 0;
            uint64_t v535 = v1770;
          }
          v1877[0] = v534;
          LODWORD(v1877[1]) = 0;
          v1890 = v534;
          LODWORD(v1891) = 0;
          LODWORD(v1805[0]) = v533;
          LODWORD(v1806[0]) = 0;
          uint64_t v25 = 1;
          v1851[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, llvm::MachineInstr **, uint64_t, void))*v535
                              + 4))(v535, 184, &v1890, 1, v1805, 1, 0);
          v1851[1] = v1415;
          LODWORD(v1852[0]) = 1;
          v1416 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v535
                           + 4))(v535, 218, v1877, 1, v1851, 1, 0);
          LODWORD(v1805[0]) = v532;
          LODWORD(v1805[1]) = 1;
          v1851[0] = v1416;
          v1851[1] = v1417;
          LODWORD(v1852[0]) = 1;
          DWORD2(v1852[0]) = v533;
          DWORD2(v1852[1]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v535
           + 4))(v535, 185, v1805, 1, v1851, 2, 0);
LABEL_1856:
          v966 = v1720;
LABEL_1346:
          llvm::MachineInstr::eraseFromParent(v966);
          return v25;
        }
        v1058 = v1770;
        uint64_t v1059 = v1;
        uint64_t v1060 = *(void *)(v1 + 32);
        uint64_t v1061 = *(unsigned int *)(v1060 + 4);
        if ((v1061 & 0x80000000) != 0
          && (v1061 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v1766 + 432))
        {
          v1062 = *(void **)(*(void *)(v1766 + 424) + 8 * (v1061 & 0x7FFFFFFF));
        }
        else
        {
          v1062 = 0;
        }
        v1157 = ***(llvm::ConstantFP ****)v1770[1];
        unint64_t v1862 = (unint64_t)v1062;
        v1880 = v1062;
        uint64_t v1158 = v1060 + 32 * (v10 + 1);
        uint64_t v1159 = *(unsigned int *)(v1158 + 4);
        v1160 = (void *)v1766;
        if ((v1159 & 0x80000000) != 0) {
          v1161 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * (v1159 & 0x7FFFFFFF) + 8);
        }
        else {
          v1161 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v1159);
        }
        uint64_t v1162 = *v1161;
        uint64_t v1737 = v1061;
        v1745 = v1157;
        if (!v1162) {
          goto LABEL_1445;
        }
        if (*(unsigned char *)(v1162 + 3)) {
          goto LABEL_1297;
        }
        uint64_t v1162 = *(void *)(v1162 + 24);
        if (v1162)
        {
          uint64_t v1059 = v1;
          v1160 = (void *)v1766;
          v1058 = v1770;
          if (*(unsigned char *)(v1162 + 3))
          {
LABEL_1297:
            uint64_t v1163 = *(void *)(v1162 + 8);
            if (!v1163) {
              goto LABEL_1445;
            }
            int v1164 = **(unsigned __int16 **)(v1163 + 16);
            if (v1164 != 179)
            {
              if (v1164 != 178) {
                goto LABEL_1445;
              }
              uint64_t v1158 = *(void *)(v1163 + 32) + 32;
              unint64_t v1165 = 129;
              goto LABEL_1444;
            }
            if ((*((_WORD *)v14 + 510) & 1) != 0 || (*(_WORD *)(v1059 + 44) & 0x200) != 0)
            {
              uint64_t v1158 = *(void *)(v1163 + 32) + 32;
              unint64_t v1165 = 257;
LABEL_1444:
              unint64_t v1862 = v1165;
            }
          }
        }
        else
        {
          uint64_t v1059 = v1;
          v1160 = (void *)v1766;
          v1058 = v1770;
        }
LABEL_1445:
        uint64_t v1306 = sub_1CB8F1DC4(&v1862);
        if (v1305 == 1) {
        v1307 = &unk_1CFB2E308;
        }
        if (v1306 == 16) {
          v1308 = &unk_1CFB2E2E0;
        }
        else {
          v1308 = &unk_1CFB2E308;
        }
        v1709 = v1308;
        uint64_t v1711 = v1306;
        uint64_t v1310 = sub_1CB8F1DC4((unint64_t *)&v1880);
        if (v1309 == 1) {
        if (v1310 == 16)
        }
          v1307 = &unk_1CFB2E2E0;
        uint64_t v1312 = sub_1CB8F1DC4(&v1862);
        if (v1311 == 1) {
        uint64_t v1313 = v1158;
        }
        if (v1312 == 16)
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = *(_DWORD *)(v1158 + 4);
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1058
           + 4))(v1058, 178, v1805, 1, v1851, 1, 0);
          uint64_t v1313 = *(void *)(v1314 + 32);
        }
        v1712 = v1307;
        uint64_t v1717 = v1310;
        if (*((_WORD *)v14 + 510))
        {
          BOOL v1754 = 0;
        }
        else
        {
          BOOL v1754 = 0;
          if ((*(_WORD *)(v1059 + 44) & 0x200) == 0 && v1862 == 257) {
            BOOL v1754 = v1880 == (void *)257;
          }
        }
        v1805[0] = (llvm::MachineInstr *)257;
        LODWORD(v1805[1]) = 0;
        LODWORD(v1877[1]) = 32;
        v1877[0] = (void *)0x20000000;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
        v1316 = llvm::ConstantFP::get(v1157, (llvm::LLVMContext *)v1851, v1315);
        uint64_t v1732 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1058
                 + 3))(v1058, v1805, v1316);
        size_t v1318 = v1317;
        if (v1851[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)v1852);
        }
        else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
        {
          MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
        }
        if (v1754 && (!*((unsigned char *)v14 + 1646) || *((unsigned char *)v14 + 1647)))
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1877[1]) = 32;
          v1877[0] = (void *)1333788672;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
          v1320 = llvm::ConstantFP::get(v1157, (llvm::LLVMContext *)v1851, v1319);
          uint64_t v1321 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1058
                   + 3))(v1058, v1805, v1320);
          uint64_t v1323 = v1322;
          if (v1851[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)v1852);
          }
          else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
          {
            MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
          }
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = *(_DWORD *)(v1313 + 4);
          LODWORD(v1852[0]) = 0;
          *((void *)&v1852[0] + 1) = v1321;
          *(void *)&v1852[1] = v1323;
          DWORD2(v1852[1]) = 1;
          uint64_t v1324 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1058
                   + 4))(v1058, 165, v1805, 1, v1851, 2, 0);
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = 4;
          LODWORD(v1852[0]) = 2;
          DWORD2(v1852[0]) = *(_DWORD *)(v1158 + 4);
          DWORD2(v1852[1]) = 0;
          uint64_t v1853 = v1732;
          size_t v1854 = v1318;
          int v1855 = 1;
          uint64_t v1856 = v1324;
          v1857 = v1325;
          int v1858 = 1;
          LODWORD(v1859) = *(_DWORD *)(v1313 + 4);
          int v1861 = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1058
           + 4))(v1058, 51, v1805, 1, v1851, 5, 0);
          uint64_t v1313 = *(void *)(v1326 + 32);
        }
        uint64_t v1327 = *(unsigned __int16 *)(v1059 + 44) | 0x100000000;
        if (v1754) {
          uint64_t v1328 = 0x100000000;
        }
        else {
          uint64_t v1328 = *(unsigned __int16 *)(v1059 + 44) | 0x100000000;
        }
        uint64_t v1724 = v1328;
        if (*((unsigned char *)v14 + 1646))
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = *(_DWORD *)(v1313 + 4);
          LODWORD(v1852[0]) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))*v1058
           + 4))(v1058, 357, v1805, 1, v1851, 1);
        }
        else
        {
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = *(_DWORD *)(v1313 + 4);
          LODWORD(v1852[0]) = 0;
          uint64_t v1330 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))*v1058
                   + 4))(v1058, 333, v1805, 1, v1851, 1);
          v1332 = v1331;
          if (sub_1CBBB5780(*(_DWORD *)(v1158 + 4), (uint64_t)v1160, 0))
          {
LABEL_1479:
            size_t v1719 = v1318;
            uint64_t v1727 = v1158;
            uint64_t v1335 = *((void *)v1332 + 4);
            uint64_t v1707 = v1335;
            if (v1754)
            {
              v1851[0] = (void *)257;
              LODWORD(v1851[1]) = 0;
              uint64_t v1336 = (uint64_t)v1770;
              v1706 = (void *)sub_1CC7374CC((uint64_t)v1770, (unint64_t *)v1851, 0.5);
              v1338 = v1337;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = *(_DWORD *)(v1313 + 4);
              LODWORD(v1852[0]) = 0;
              DWORD2(v1852[0]) = *(_DWORD *)(v1335 + 4);
              DWORD2(v1852[1]) = 0;
              v1339 = (llvm::MachineInstr *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 165, v1805, 1, v1851, 2, 0);
              v1341 = v1340;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1706;
              v1851[1] = v1338;
              LODWORD(v1852[0]) = 1;
              DWORD2(v1852[0]) = *(_DWORD *)(v1335 + 4);
              DWORD2(v1852[1]) = 0;
              uint64_t v1342 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 165, v1805, 1, v1851, 2, 0);
              v1344 = v1343;
              v1877[0] = (void *)257;
              LODWORD(v1877[1]) = 0;
              v1890 = (void *)257;
              LODWORD(v1891) = 0;
              v1805[0] = v1339;
              v1345 = v1341;
              v1805[1] = v1341;
              LODWORD(v1806[0]) = 1;
              v1851[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, llvm::MachineInstr **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 177, &v1890, 1, v1805, 1, 0);
              v1851[1] = v1346;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1339;
              *(void *)&v1852[1] = v1341;
              DWORD2(v1852[1]) = 1;
              LODWORD(v1853) = *(_DWORD *)(v1313 + 4);
              int v1855 = 0;
              uint64_t v1347 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 166, v1877, 1, v1851, 3, 0);
              v1703 = v1348;
              v1704 = (void *)v1347;
              v1877[0] = (void *)257;
              LODWORD(v1877[1]) = 0;
              v1890 = (void *)257;
              LODWORD(v1891) = 0;
              v1805[0] = v1339;
              v1805[1] = v1341;
              LODWORD(v1806[0]) = 1;
              v1851[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, llvm::MachineInstr **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 177, &v1890, 1, v1805, 1, 0);
              v1851[1] = v1349;
              LODWORD(v1852[0]) = 1;
              v1350 = (void *)v1342;
              *((void *)&v1852[0] + 1) = v1342;
              v1351 = v1344;
              *(void *)&v1852[1] = v1344;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1706;
              size_t v1854 = (size_t)v1338;
              int v1855 = 1;
              uint64_t v1352 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 166, v1877, 1, v1851, 3, 0);
              uint64_t v1353 = v1313;
              uint64_t v1355 = v1354;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1704;
              v1851[1] = v1703;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1350;
              *(void *)&v1852[1] = v1351;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1339;
              size_t v1854 = (size_t)v1345;
              int v1855 = 1;
              v1356 = (llvm::MachineInstr *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 166, v1805, 1, v1851, 3, 0);
              v1358 = v1357;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1350;
              v1851[1] = v1351;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1352;
              *(void *)&v1852[1] = v1355;
              uint64_t v1313 = v1353;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1350;
              size_t v1854 = (size_t)v1351;
              int v1855 = 1;
              uint64_t v1359 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 166, v1805, 1, v1851, 3, 0);
              uint64_t v1361 = v1360;
              v1877[0] = (void *)257;
              LODWORD(v1877[1]) = 0;
              v1890 = (void *)257;
              LODWORD(v1891) = 0;
              v1805[0] = v1356;
              v1805[1] = v1358;
              LODWORD(v1806[0]) = 1;
              v1851[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, llvm::MachineInstr **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 177, &v1890, 1, v1805, 1, 0);
              v1851[1] = v1362;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1356;
              *(void *)&v1852[1] = v1358;
              DWORD2(v1852[1]) = 1;
              LODWORD(v1853) = *(_DWORD *)(v1353 + 4);
              int v1855 = 0;
              v1363 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 166, v1877, 1, v1851, 3, 0);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1363;
              v1851[1] = v1364;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1359;
              *(void *)&v1852[1] = v1361;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1356;
              size_t v1854 = (size_t)v1358;
              int v1855 = 1;
              v1160 = (void *)v1766;
              v1365 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                               + 4))(v1770, 166, v1805, 1, v1851, 3, 0);
            }
            else
            {
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = *(_DWORD *)(v1335 + 4);
              LODWORD(v1852[0]) = 0;
              DWORD2(v1852[0]) = *(_DWORD *)(v1313 + 4);
              DWORD2(v1852[1]) = 0;
              uint64_t v1336 = (uint64_t)v1770;
              v1365 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
                               + 4))(v1770, 165, v1805, 1, v1851, 2, v1327);
            }
            v1367 = v1365;
            v1368 = v1366;
            uint64_t v1369 = v1757;
            if (v1880 == (void *)129)
            {
              v1805[0] = (llvm::MachineInstr *)129;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1365;
              v1851[1] = v1366;
              LODWORD(v1852[0]) = 1;
              v1367 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 179, v1805, 1, v1851, 1, 0);
              v1368 = v1370;
            }
            if (!*((unsigned char *)v14 + 1646))
            {
              v1805[0] = (llvm::MachineInstr *)v1862;
              LODWORD(v1805[1]) = 0;
              BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | 3;
              if (v1711 == 16) {
                int v1371 = -15;
              }
              else {
                int v1371 = -127;
              }
              DWORD2(v1852[0]) = v1371;
              v1851[1] = v1709;
              *(void *)&v1852[0] = 0;
              sub_1CB87E790((uint64_t)v1851, 0);
              v1373 = llvm::ConstantFP::get(v1745, (llvm::LLVMContext *)v1851, v1372);
              uint64_t v1374 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1336 + 24))(v1336, v1805, v1373);
              size_t v1376 = v1375;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)v1880;
              LODWORD(v1805[1]) = 0;
              BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | 3;
              if (v1717 == 16) {
                int v1377 = -15;
              }
              else {
                int v1377 = -127;
              }
              DWORD2(v1852[0]) = v1377;
              v1851[1] = v1712;
              *(void *)&v1852[0] = 0;
              sub_1CB87E790((uint64_t)v1851, 0);
              v1379 = llvm::ConstantFP::get(v1745, (llvm::LLVMContext *)v1851, v1378);
              uint64_t v1380 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1336 + 24))(v1336, v1805, v1379);
              v1382 = v1381;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)v1880;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = 1;
              LODWORD(v1852[0]) = 2;
              DWORD2(v1852[0]) = *(_DWORD *)(v1727 + 4);
              DWORD2(v1852[1]) = 0;
              uint64_t v1853 = v1374;
              size_t v1854 = v1376;
              int v1855 = 1;
              uint64_t v1856 = v1380;
              v1857 = v1382;
              int v1858 = 1;
              uint64_t v1859 = (uint64_t)v1367;
              v1860 = v1368;
              int v1861 = 1;
              uint64_t v1336 = (uint64_t)v1770;
              v1367 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
                               + 4))(v1770, 51, v1805, 1, v1851, 5, v1724);
              v1368 = v1383;
              uint64_t v1369 = v1757;
            }
            if (v1754)
            {
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)931135488;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1385 = llvm::ConstantFP::get(v1745, (llvm::LLVMContext *)v1851, v1384);
              uint64_t v1386 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))(*(void *)v1336 + 24))(v1336, v1805, v1385);
              uint64_t v1388 = v1387;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              if (*((unsigned char *)v14 + 1646))
              {
                v1851[0] = (void *)257;
                LODWORD(v1851[1]) = 0;
                uint64_t v1389 = sub_1CC7374CC(v1336, (unint64_t *)v1851, 1.0);
                v1805[0] = (llvm::MachineInstr *)v1880;
                LODWORD(v1805[1]) = 0;
                LODWORD(v1851[0]) = 1;
                LODWORD(v1852[0]) = 2;
                DWORD2(v1852[0]) = *(_DWORD *)(v1707 + 4);
                DWORD2(v1852[1]) = 0;
                uint64_t v1853 = v1389;
                size_t v1854 = v1390;
                int v1855 = 1;
                LODWORD(v1856) = *(_DWORD *)(v1313 + 4);
                int v1858 = 0;
                uint64_t v1859 = (uint64_t)v1367;
                v1860 = v1368;
                int v1861 = 1;
                v1391 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 51, v1805, 1, v1851, 5, 0);
                v1368 = v1392;
                if (*((unsigned char *)v14 + 1647))
                {
                  uint64_t v1393 = (uint64_t)v1391;
                  v1805[0] = (llvm::MachineInstr *)257;
                  LODWORD(v1805[1]) = 0;
                  v1851[0] = v1391;
                  v1851[1] = v1392;
                  LODWORD(v1852[0]) = 1;
                  *((void *)&v1852[0] + 1) = v1386;
                  *(void *)&v1852[1] = v1388;
                  DWORD2(v1852[1]) = 1;
                  uint64_t v1394 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 165, v1805, 1, v1851, 2, 0);
                  v1805[0] = (llvm::MachineInstr *)v1880;
                  LODWORD(v1805[1]) = 0;
                  LODWORD(v1851[0]) = 4;
                  LODWORD(v1852[0]) = 2;
                  DWORD2(v1852[0]) = *(_DWORD *)(v1727 + 4);
                  DWORD2(v1852[1]) = 0;
                  uint64_t v1853 = v1732;
                  size_t v1854 = v1719;
                  int v1855 = 1;
                  uint64_t v1856 = v1394;
                  v1857 = v1395;
                  int v1858 = 1;
                  uint64_t v1859 = v1393;
                  v1860 = v1368;
                  int v1861 = 1;
                  (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 51, v1805, 1, v1851, 5, 0);
                  v1368 = v1396;
                }
                uint64_t v1369 = v1757;
              }
              else
              {
                v1805[0] = (llvm::MachineInstr *)257;
                LODWORD(v1805[1]) = 0;
                v1851[0] = v1367;
                v1851[1] = v1368;
                LODWORD(v1852[0]) = 1;
                *((void *)&v1852[0] + 1) = v1386;
                *(void *)&v1852[1] = v1388;
                DWORD2(v1852[1]) = 1;
                uint64_t v1397 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 165, v1805, 1, v1851, 2, 0);
                v1805[0] = (llvm::MachineInstr *)v1880;
                LODWORD(v1805[1]) = 0;
                LODWORD(v1851[0]) = 4;
                LODWORD(v1852[0]) = 2;
                DWORD2(v1852[0]) = *(_DWORD *)(v1727 + 4);
                DWORD2(v1852[1]) = 0;
                uint64_t v1853 = v1732;
                size_t v1854 = v1719;
                int v1855 = 1;
                uint64_t v1856 = v1397;
                v1857 = v1398;
                int v1858 = 1;
                uint64_t v1859 = (uint64_t)v1367;
                v1860 = v1368;
                int v1861 = 1;
                (*(void (**)(uint64_t, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))(*(void *)v1336 + 32))(v1336, 51, v1805, 1, v1851, 5, 0);
                v1368 = v1399;
              }
            }
            sub_1CC6EE548(v1369, (uint64_t)v1160, v1737);
            unsigned int v1400 = *(_DWORD *)(*((void *)v1368 + 4) + 4);
            uint64_t v1401 = (*(uint64_t (**)(void))(**(void **)(*v1160 + 16) + 176))(*(void *)(*v1160 + 16));
            if ((v1737 & 0x80000000) != 0) {
              v1402 = (uint64_t *)(v1160[3] + 16 * (v1737 & 0x7FFFFFFF) + 8);
            }
            else {
              v1402 = (uint64_t *)(v1160[34] + 8 * v1737);
            }
            uint64_t v1403 = *v1402;
            if (*v1402)
            {
              do
              {
                uint64_t v1404 = *(void *)(v1403 + 24);
                if (v1400 - 1 <= 0x3FFFFFFE) {
                  llvm::MachineOperand::substPhysReg((unsigned int *)v1403, v1400, v1401);
                }
                else {
                  llvm::MachineOperand::setReg(v1403, v1400);
                }
                uint64_t v1403 = v1404;
              }
              while (v1404);
            }
            v1405 = *(char **)(v1369 + 8);
            v1406 = *(char **)(v1369 + 16);
            uint64_t v1407 = 24;
            if (v1406 == v1405) {
              uint64_t v1407 = 28;
            }
            uint64_t v1408 = *(unsigned int *)(v1369 + v1407);
            v1409 = *(unint64_t **)(v1369 + 16);
            uint64_t v112 = (uint64_t)v1720;
            if (v1408)
            {
              uint64_t v1410 = 0;
              while (*(void *)&v1406[v1410] >= 0xFFFFFFFFFFFFFFFELL)
              {
                v1410 += 8;
                if (8 * v1408 == v1410) {
                  goto LABEL_1527;
                }
              }
              v1409 = (unint64_t *)&v1406[v1410];
            }
            v1411 = (unint64_t *)&v1406[8 * v1408];
            if (v1409 != v1411)
            {
              unint64_t v1412 = *v1409;
LABEL_1522:
              (*(void (**)(uint64_t, unint64_t))(*(void *)v1369 + 40))(v1369, v1412);
              v1413 = v1409 + 1;
              while (v1413 != v1411)
              {
                unint64_t v1414 = *v1413++;
                unint64_t v1412 = v1414;
                if (v1414 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v1409 = v1413 - 1;
                  goto LABEL_1522;
                }
              }
              v1405 = *(char **)(v1369 + 8);
              v1406 = *(char **)(v1369 + 16);
            }
LABEL_1527:
            if (v1406 == v1405)
            {
LABEL_1528:
              *(_DWORD *)(v1369 + 28) = 0;
              *(_DWORD *)(v1369 + 32) = 0;
              goto LABEL_1607;
            }
            uint64_t v1464 = *(unsigned int *)(v1369 + 24);
            if (v1464 < 0x21
              || 4 * (*(_DWORD *)(v1369 + 28) - *(_DWORD *)(v1369 + 32)) >= v1464)
            {
              memset(v1406, 255, 8 * v1464);
              goto LABEL_1528;
            }
            llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v1369 + 8));
LABEL_1607:
            uint64_t v91 = (llvm::MachineInstr *)v112;
            goto LABEL_1608;
          }
          v1805[0] = (llvm::MachineInstr *)257;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = 1;
          LODWORD(v1852[0]) = 2;
          DWORD2(v1852[0]) = *(_DWORD *)(v1158 + 4);
          DWORD2(v1852[1]) = 0;
          v1877[0] = (void *)v1862;
          LODWORD(v1877[1]) = 0;
          uint64_t v1853 = sub_1CC7374CC((uint64_t)v1770, (unint64_t *)v1877, 0.0);
          size_t v1854 = v1333;
          int v1855 = 1;
          v1890 = (void *)257;
          LODWORD(v1891) = 0;
          uint64_t v1856 = sub_1CC7374CC((uint64_t)v1770, (unint64_t *)&v1890, 0.0);
          v1857 = v1334;
          int v1858 = 1;
          uint64_t v1859 = v1330;
          v1860 = v1332;
          int v1861 = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t))*v1770
           + 4))(v1770, 51, v1805, 1, v1851, 5);
        }
        v1332 = v1329;
        goto LABEL_1479;
    }
  }
  if ((int)v13 <= 201)
  {
    if ((int)v13 > 139)
    {
      if (v13 == 140) {
        goto LABEL_731;
      }
      if (v13 != 193) {
        return v25;
      }
LABEL_673:
      uint64_t v491 = *(unsigned int *)(v1 + 40);
      uint64_t v492 = *(void *)(v1 + 32);
      if (v491)
      {
        uint64_t v493 = 0;
        int v494 = (unsigned __int8 *)*((void *)v1720 + 4);
        uint64_t v495 = v1766;
        while (1)
        {
          int v496 = *v494;
          v494 += 32;
          if (v496 == 17) {
            break;
          }
          if (v491 == ++v493)
          {
            LODWORD(v493) = -1;
            break;
          }
        }
      }
      else
      {
        LODWORD(v493) = -1;
        uint64_t v495 = v1766;
      }
      int v1053 = *(_DWORD *)(v492 + 4);
      if (v1053 < 0 && (v1053 & 0x7FFFFFFFu) < *(_DWORD *)(v495 + 432)) {
        v1054 = *(void **)(*(void *)(v495 + 424) + 8 * (v1053 & 0x7FFFFFFF));
      }
      else {
        v1054 = 0;
      }
      v1851[0] = v1054;
      int v1056 = sub_1CB8F1DC4((unint64_t *)v1851);
      if (v1055 == 1) {
      uint64_t v25 = v1056 == 32 || v1056 == 16;
      }
      if (v1056 == 32 || v1056 == 16)
      {
        if (v13 == 193) {
          int v1057 = 2;
        }
        else {
          int v1057 = 4;
        }
        LODWORD(v1805[0]) = v1053;
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = v1057;
        LODWORD(v1852[0]) = 2;
        DWORD2(v1852[0]) = *(_DWORD *)(v492 + 32 * (v493 + 1) + 4);
        DWORD2(v1852[1]) = 0;
        LODWORD(v1853) = *(_DWORD *)(v492 + 32 * (v493 + 2) + 4);
        int v1855 = 0;
        LODWORD(v1856) = DWORD2(v1852[0]);
        int v1858 = 0;
        LODWORD(v1859) = v1853;
        int v1861 = 0;
        uint64_t v1 = (uint64_t)v1720;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
         + 4))(v1770, 335, v1805, 1, v1851, 5, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
LABEL_1214:
        v966 = (llvm::MachineInstr *)v1;
        goto LABEL_1346;
      }
      return v25;
    }
    if (v13 == 9)
    {
      uint64_t v767 = *(void *)(v1 + 32);
      int v768 = *(_DWORD *)(v767 + 4);
      if (v768 < 0 && (v768 & 0x7FFFFFFFu) < *(_DWORD *)(v1766 + 432))
      {
        uint64_t v769 = *(void *)(*(void *)(v1766 + 424) + 8 * (v768 & 0x7FFFFFFF));
        if (v769 == 257) {
          return 1;
        }
        if (v769 == 129)
        {
          int v770 = *(_DWORD *)(v767 + 68);
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          uint64_t v771 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x10);
          int v773 = *(llvm::ConstantInt **)v771;
          unsigned int v774 = *(_DWORD *)(v771 + 8);
          LODWORD(v1851[1]) = v774 >> 8;
          if (v774 >> 8 > 0x40) {
            operator new[]();
          }
          if (v774 <= 0xFF) {
            LOBYTE(v775) = 0;
          }
          else {
            unint64_t v775 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v774) + 63);
          }
          v1851[0] = (void *)(v775 & 8);
          uint64_t v776 = llvm::ConstantInt::get(v773, (llvm::LLVMContext *)v1851, v772);
          if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
            MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
          }
          v777 = v1770;
          uint64_t v778 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v776);
          uint64_t v780 = v779;
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v770;
          LODWORD(v1852[0]) = 0;
          *((void *)&v1852[0] + 1) = v778;
          *(void *)&v1852[1] = v779;
          DWORD2(v1852[1]) = 1;
          unint64_t v781 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v777
                          + 4))(v777, 128, v1805, 1, v1851, 2, 0);
          uint64_t v783 = v782;
          v1805[0] = (llvm::MachineInstr *)129;
          LODWORD(v1805[1]) = 0;
          LODWORD(v1851[0]) = v770;
          LODWORD(v1852[0]) = 0;
          *((void *)&v1852[0] + 1) = v778;
          *(void *)&v1852[1] = v780;
          DWORD2(v1852[1]) = 1;
          uint64_t v784 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v777
                  + 4))(v777, 127, v1805, 1, v1851, 2, 0);
          LODWORD(v1805[0]) = v768;
          LODWORD(v1805[1]) = 1;
          v1851[0] = v781;
          v1851[1] = v783;
          LODWORD(v1852[0]) = 1;
          *((void *)&v1852[0] + 1) = v784;
          *(void *)&v1852[1] = v785;
          DWORD2(v1852[1]) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v777
           + 4))(v777, 66, v1805, 1, v1851, 2, 0);
          llvm::MachineInstr::eraseFromParent(v1720);
          return 1;
        }
      }
    }
    else
    {
      if (v13 != 53) {
        return v25;
      }
      uint64_t v345 = *(void *)(v1 + 32);
      int v346 = *(_DWORD *)(v345 + 4);
      if (v346 < 0)
      {
        uint64_t v347 = v346 & 0x7FFFFFFF;
        if (v347 < *(_DWORD *)(v1766 + 432))
        {
          int v348 = *(_DWORD *)(v345 + 68);
          uint64_t v349 = *(llvm::MachineInstr **)(*(void *)(v1766 + 424) + 8 * v347);
          if (v349 == (llvm::MachineInstr *)257 || v349 == (llvm::MachineInstr *)129)
          {
            v1805[0] = v349;
            LODWORD(v1805[1]) = 0;
            LODWORD(v1851[0]) = v348;
            LODWORD(v1852[0]) = 0;
            uint64_t v25 = 1;
            (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
             + 4))(v1770, 270, v1805, 1, v1851, 1, 0);
            unsigned int v355 = *(_DWORD *)(*(void *)(v1466 + 32) + 4);
            unint64_t v356 = (void *)v1766;
            unint64_t v357 = (llvm::MachineInstr *)v1;
            goto LABEL_1618;
          }
          if (v349 == (llvm::MachineInstr *)65)
          {
            v1877[0] = (void *)129;
            LODWORD(v1877[1]) = 0;
            v1890 = (void *)129;
            LODWORD(v1891) = 0;
            LODWORD(v1805[0]) = v348;
            LODWORD(v1806[0]) = 0;
            uint64_t v350 = v1770;
            uint64_t v25 = 1;
            v1851[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, llvm::MachineInstr **, uint64_t, void))*v1770
                                + 4))(v1770, 126, &v1890, 1, v1805, 1, 0);
            v1851[1] = v351;
            LODWORD(v1852[0]) = 1;
            uint64_t v352 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v350
                            + 4))(v350, 270, v1877, 1, v1851, 1, 0);
            v1805[0] = (llvm::MachineInstr *)65;
            LODWORD(v1805[1]) = 0;
            v1851[0] = v352;
            v1851[1] = v353;
            LODWORD(v1852[0]) = 1;
            (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v350
             + 4))(v350, 119, v1805, 1, v1851, 1, 0);
            unsigned int v355 = *(_DWORD *)(*(void *)(v354 + 32) + 4);
            unint64_t v356 = (void *)v1766;
            unint64_t v357 = v1720;
LABEL_1618:
            sub_1CBA0A7C8(v356, v357, v355, v1757);
            return v25;
          }
        }
      }
    }
    return 0;
  }
  if ((int)v13 <= 252)
  {
    if (v13 != 202)
    {
      if (v13 != 240) {
        return v25;
      }
LABEL_1056:
      uint64_t v91 = v1720;
      goto LABEL_1608;
    }
    goto LABEL_673;
  }
  switch(v13)
  {
    case 0xFD:
LABEL_740:
      uint64_t v112 = v1;
      uint64_t v536 = *(void *)(v1 + 32) + 32 * (v10 + 1);
      unsigned int v539 = *(_DWORD *)(v536 + 4);
      uint64_t v537 = (_DWORD *)(v536 + 4);
      uint64_t v538 = v539;
      if ((v539 & 0x80000000) != 0)
      {
        unint64_t v1063 = v538 & 0x7FFFFFFF;
        uint64_t v540 = v1766;
        if (v1063 >= *(unsigned int *)(v1766 + 432)) {
          v1064 = 0;
        }
        else {
          v1064 = *(void **)(*(void *)(v1766 + 424) + 8 * v1063);
        }
        v1890 = v1064;
        unsigned int v541 = (uint64_t *)(*(void *)(v1766 + 24) + 16 * v1063 + 8);
      }
      else
      {
        v1890 = 0;
        uint64_t v540 = v1766;
        unsigned int v541 = (uint64_t *)(*(void *)(v1766 + 272) + 8 * v538);
      }
      uint64_t v1200 = *v541;
      if ((*(unsigned char *)(v1200 + 3) & 1) == 0) {
        uint64_t v1200 = *(void *)(v1200 + 24);
      }
      uint64_t v1201 = *(void *)(v1200 + 8);
      if (**(_WORD **)(v1201 + 16) != 121 || (uint64_t v1426 = *(void *)(*(void *)(v1201 + 32) + 48)) == 0)
      {
        if (v13 != 2517 && (*((_WORD *)v14 + 510) & 1) == 0 && (*((_WORD *)v1720 + 22) & 0x80) == 0)
        {
          uint64_t v1203 = sub_1CB8F1DC4((unint64_t *)&v1890);
          if (v1202 == 1) {
          if (v1203 != 16)
          }
          {
            uint64_t v1204 = *v537;
            v1205 = (uint64_t *)((v1204 & 0x80000000) != 0
                              ? *(void *)(v540 + 24) + 16 * (v1204 & 0x7FFFFFFF) + 8
                              : *(void *)(v540 + 272) + 8 * v1204);
            if ((uint64_t v1206 = *v1205) == 0
              || (*(unsigned char *)(v1206 + 3) & 1) == 0
              && ((uint64_t v1206 = *(void *)(v1206 + 24)) == 0 || (*(unsigned char *)(v1206 + 3) & 1) == 0)
              || (uint64_t v1207 = *(void *)(v1206 + 8)) == 0
              || **(_WORD **)(v1207 + 16) != 178)
            {
              v1525 = ***v1710;
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)1602224128;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1527 = llvm::ConstantFP::get(v1525, (llvm::LLVMContext *)v1851, v1526);
              (*((void (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770
               + 3))(v1770, v1805, v1527);
              int v1529 = *(_DWORD *)(*(void *)(v1528 + 32) + 4);
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)528482304;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1531 = llvm::ConstantFP::get(v1525, (llvm::LLVMContext *)v1851, v1530);
              (*((void (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770
               + 3))(v1770, v1805, v1531);
              int v1533 = *(_DWORD *)(*(void *)(v1532 + 32) + 4);
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | 2;
              DWORD2(v1852[0]) = 23;
              v1851[1] = &unk_1CFB2E308;
              *(void *)&v1852[0] = 1;
              llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v1851[1], 1, 0);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1535 = llvm::ConstantFP::get(v1525, (llvm::LLVMContext *)v1851, v1534);
              (*((void (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770
               + 3))(v1770, v1805, v1535);
              int v1768 = *(_DWORD *)(*(void *)(v1536 + 32) + 4);
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              if (v1890)
              {
                unint64_t v1537 = ((unint64_t)v1890 >> 3);
              }
              else if ((v1890 & 4) != 0)
              {
                if ((v1890 & 2) != 0) {
                  unint64_t v1537 = (unsigned __int16)((unint64_t)v1890 >> 19);
                }
                else {
                  unint64_t v1537 = ((unint64_t)v1890 >> 19);
                }
              }
              else
              {
                unint64_t v1537 = (unsigned __int16)((unint64_t)v1890 >> 3);
              }
              uint64_t v1538 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)v1537);
              v1540 = *(llvm::ConstantInt **)v1538;
              unsigned int v1541 = *(_DWORD *)(v1538 + 8);
              LODWORD(v1851[1]) = v1541 >> 8;
              if (v1541 >> 8 > 0x40) {
                operator new[]();
              }
              if (v1541 <= 0xFF) {
                LOBYTE(v1542) = 0;
              }
              else {
                unint64_t v1542 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1541) + 63);
              }
              v1851[0] = (void *)(v1542 & 1);
              v1543 = llvm::ConstantInt::get(v1540, (llvm::LLVMContext *)v1851, v1539);
              if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
                MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
              }
              uint64_t v1544 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v1543);
              v1755 = v1545;
              size_t v1764 = v1544;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              if (v1890)
              {
                unint64_t v1546 = ((unint64_t)v1890 >> 3);
              }
              else if ((v1890 & 4) != 0)
              {
                if ((v1890 & 2) != 0) {
                  unint64_t v1546 = (unsigned __int16)((unint64_t)v1890 >> 19);
                }
                else {
                  unint64_t v1546 = ((unint64_t)v1890 >> 19);
                }
              }
              else
              {
                unint64_t v1546 = (unsigned __int16)((unint64_t)v1890 >> 3);
              }
              uint64_t v1547 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)v1546);
              v1549 = *(llvm::ConstantInt **)v1547;
              unsigned int v1550 = *(_DWORD *)(v1547 + 8);
              LODWORD(v1851[1]) = v1550 >> 8;
              if (v1550 >> 8 > 0x40) {
                operator new[]();
              }
              if (v1550 <= 0xFF) {
                LODWORD(v1551) = 0;
              }
              else {
                unint64_t v1551 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1550) + 63);
              }
              v1851[0] = (void *)(v1551 & 0x7F7FFFFF);
              v1552 = llvm::ConstantInt::get(v1549, (llvm::LLVMContext *)v1851, v1548);
              if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
                MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
              }
              v1553 = v1770;
              uint64_t v1554 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v1552);
              size_t v1733 = v1555;
              uint64_t v1739 = v1554;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = v538;
              LODWORD(v1852[0]) = 0;
              int v1747 = v1533;
              DWORD2(v1852[0]) = v1533;
              DWORD2(v1852[1]) = 0;
              uint64_t v1556 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                       + 4))(v1553, 165, v1805, 1, v1851, 2, 0);
              v1558 = v1557;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = v538;
              LODWORD(v1852[0]) = 0;
              uint64_t v1559 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                       + 4))(v1553, 184, v1805, 1, v1851, 1, 0);
              uint64_t v1561 = v1560;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = 2;
              LODWORD(v1852[0]) = 2;
              *((void *)&v1852[0] + 1) = v1559;
              *(void *)&v1852[1] = v1560;
              DWORD2(v1852[1]) = 1;
              int v1562 = v1529;
              LODWORD(v1853) = v1529;
              int v1855 = 0;
              uint64_t v1856 = v1556;
              v1857 = v1558;
              int v1858 = 1;
              LODWORD(v1859) = v538;
              int v1861 = 0;
              v1563 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 51, v1805, 1, v1851, 5, 0);
              v1565 = v1564;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1563;
              v1851[1] = v1564;
              LODWORD(v1852[0]) = 1;
              v1566 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 310, v1805, 1, v1851, 1, 0);
              v1568 = v1567;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1563;
              v1851[1] = v1565;
              LODWORD(v1852[0]) = 1;
              v1569 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 177, v1805, 1, v1851, 1, 0);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1569;
              v1851[1] = v1570;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1566;
              *(void *)&v1852[1] = v1568;
              DWORD2(v1852[1]) = 1;
              LODWORD(v1853) = v1768;
              int v1855 = 0;
              v1571 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 166, v1805, 1, v1851, 3, 0);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1571;
              v1851[1] = v1572;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1566;
              *(void *)&v1852[1] = v1568;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1566;
              size_t v1854 = (size_t)v1568;
              int v1855 = 1;
              uint64_t v1573 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                       + 4))(v1553, 166, v1805, 1, v1851, 3, 0);
              v1575 = v1574;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1566;
              v1851[1] = v1568;
              LODWORD(v1852[0]) = 1;
              v1576 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 184, v1805, 1, v1851, 1, 0);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1576;
              v1851[1] = v1577;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1764;
              *(void *)&v1852[1] = v1755;
              DWORD2(v1852[1]) = 1;
              uint64_t v1578 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                       + 4))(v1553, 46, v1805, 1, v1851, 2, 0);
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = 35;
              LODWORD(v1852[0]) = 2;
              *((void *)&v1852[0] + 1) = v1578;
              *(void *)&v1852[1] = v1579;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = v1739;
              size_t v1854 = v1733;
              int v1855 = 1;
              uint64_t v1856 = (uint64_t)v1566;
              v1857 = (llvm::MachineInstr *)v1568;
              int v1858 = 1;
              uint64_t v1859 = v1573;
              v1860 = v1575;
              int v1861 = 1;
              v1580 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                               + 4))(v1553, 51, v1805, 1, v1851, 5, 0);
              v1582 = v1581;
              v1805[0] = (llvm::MachineInstr *)v1890;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1580;
              v1851[1] = v1581;
              LODWORD(v1852[0]) = 1;
              DWORD2(v1852[0]) = v1747;
              DWORD2(v1852[1]) = 0;
              uint64_t v1583 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1553
                       + 4))(v1553, 165, v1805, 1, v1851, 2, 0);
              int v490 = v1720;
              LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
              LODWORD(v1805[1]) = 1;
              LODWORD(v1851[0]) = 2;
              LODWORD(v1852[0]) = 2;
              *((void *)&v1852[0] + 1) = v1559;
              *(void *)&v1852[1] = v1561;
              DWORD2(v1852[1]) = 1;
              LODWORD(v1853) = v1562;
              int v1855 = 0;
              uint64_t v1856 = v1583;
              v1857 = v1584;
              int v1858 = 1;
              uint64_t v1859 = (uint64_t)v1580;
              v1860 = v1582;
              int v1861 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
               + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
LABEL_730:
              uint64_t v91 = v490;
              goto LABEL_1608;
            }
          }
        }
        LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = *v537;
        LODWORD(v1852[0]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
         + 4))(v1770, 310, v1805, 1, v1851, 1, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
        goto LABEL_1607;
      }
      uint64_t v1427 = *(void *)(v1426 + 32);
      if ((_UNKNOWN *)v1427 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1851[1], (const llvm::detail::DoubleAPFloat *)(v1426 + 32));
      }
      else
      {
        v1851[1] = *(void **)(v1426 + 32);
        if ((*(_DWORD *)(v1427 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v1428 = *(unsigned char *)(v1426 + 52);
        int v1429 = v1428 & 7;
        BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | v1428 & 8 | v1428 & 7;
        DWORD2(v1852[0]) = *(_DWORD *)(v1426 + 48);
        BOOL v1431 = (v1428 & 6) != 0 && v1429 != 3;
        if (v1429 == 1 || v1431)
        {
          uint64_t v1433 = *((unsigned int *)v1851[1] + 2);
          if ((v1433 - 64) <= 0xFFFFFF7F) {
            v1434 = *(void **)&v1852[0];
          }
          else {
            v1434 = v1852;
          }
          v1437 = *(uint64_t **)(v1426 + 40);
          v1436 = (uint64_t *)(v1426 + 40);
          v1435 = v1437;
          if ((*(_DWORD *)(*(v1436 - 1) + 8) - 64) >= 0xFFFFFF80) {
            v1435 = v1436;
          }
          if (v1433 <= 0xFFFFFFBF)
          {
            unint64_t v1438 = (unint64_t)(v1433 + 64) >> 6;
            do
            {
              uint64_t v1439 = *v1435++;
              *v1434++ = v1439;
              --v1438;
            }
            while (v1438);
          }
        }
      }
      llvm::APFloat::convert((uint64_t)v1851, &unk_1CFB2E31C, 1, v1877);
      double v1440 = 1.0 / llvm::APFloat::convertToDouble((llvm::APFloat *)v1851);
      v1441 = ***v1710;
      v1442 = (unint64_t *)&v1890;
LABEL_1592:
      int v1458 = sub_1CB8F1DC4(v1442);
      if (v1457 == 1) {
      sub_1CBA31C84((uint64_t)v1805, v1458, v1440);
      }
      v1460 = llvm::ConstantFP::get(v1441, (llvm::LLVMContext *)v1805, v1459);
      if ((_UNKNOWN *)v1805[1] == &unk_1CFB2E344)
      {
        sub_1CB845718(v1806);
      }
      else if ((*((_DWORD *)v1805[1] + 2) - 64) <= 0xFFFFFF7F && v1806[0])
      {
        MEMORY[0x1D25D9CB0](v1806[0], 0x1000C8000313F17);
      }
      LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
      LODWORD(v1805[1]) = 1;
      (*((void (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770 + 3))(v1770, v1805, v1460);
      llvm::MachineInstr::eraseFromParent(v1720);
      if (v1851[1] == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)v1852);
        return 1;
      }
      if ((*((_DWORD *)v1851[1] + 2) - 64) > 0xFFFFFF7F) {
        return 1;
      }
      uint64_t v418 = *(uint64_t **)&v1852[0];
      if (!*(void *)&v1852[0]) {
        return 1;
      }
      goto LABEL_579;
    case 0x102:
LABEL_731:
      uint64_t v528 = *(void *)(v1 + 32);
      int v529 = *(_DWORD *)(v528 + 4);
      LODWORD(v528) = *(_DWORD *)(v528 + 68);
      uint64_t v25 = 1;
      LODWORD(v1805[0]) = v529;
      LODWORD(v1805[1]) = 1;
      LODWORD(v1851[0]) = v528;
      LODWORD(v1852[0]) = 0;
      int v530 = (void (*)(void))*((void *)*v1770 + 4);
LABEL_1091:
      v530();
LABEL_1092:
      v966 = (llvm::MachineInstr *)v1;
      goto LABEL_1346;
    case 0x105:
LABEL_156:
      uint64_t v112 = v1;
      uint64_t v113 = *(void *)(v1 + 32);
      int v114 = *(_DWORD *)(v113 + 4);
      if (v114 < 0)
      {
        uint64_t v1065 = v114 & 0x7FFFFFFF;
        uint64_t v116 = v1766;
        if (v1065 >= *(_DWORD *)(v1766 + 432)) {
          unint64_t v115 = 0;
        }
        else {
          unint64_t v115 = *(void *)(*(void *)(v1766 + 424) + 8 * v1065);
        }
      }
      else
      {
        unint64_t v115 = 0;
        uint64_t v116 = v1766;
      }
      unint64_t v1862 = v115;
      uint64_t v1208 = v113 + 32 * (v10 + 1);
      unsigned int v1211 = *(_DWORD *)(v1208 + 4);
      v1210 = (_DWORD *)(v1208 + 4);
      uint64_t v1209 = v1211;
      if ((v1211 & 0x80000000) != 0) {
        v1212 = (uint64_t *)(*(void *)(v116 + 24) + 16 * (v1209 & 0x7FFFFFFF) + 8);
      }
      else {
        v1212 = (uint64_t *)(*(void *)(v116 + 272) + 8 * v1209);
      }
      uint64_t v1213 = *v1212;
      if ((*(unsigned char *)(v1213 + 3) & 1) == 0) {
        uint64_t v1213 = *(void *)(v1213 + 24);
      }
      uint64_t v1214 = *(void *)(v1213 + 8);
      if (**(_WORD **)(v1214 + 16) != 121 || (uint64_t v1443 = *(void *)(*(void *)(v1214 + 32) + 48)) == 0)
      {
        if (v13 != 2526 && (*((_WORD *)v14 + 510) & 1) == 0 && (*((_WORD *)v1720 + 22) & 0x200) == 0)
        {
          uint64_t v1216 = sub_1CB8F1DC4(&v1862);
          if (v1215 == 1) {
          uint64_t v1209 = *v1210;
          }
          if (v1216 != 16)
          {
            v1461 = (uint64_t *)((v1209 & 0x80000000) != 0
                              ? *(void *)(v116 + 24) + 16 * (v1209 & 0x7FFFFFFF) + 8
                              : *(void *)(v116 + 272) + 8 * v1209);
            if ((uint64_t v1462 = *v1461) == 0
              || (*(unsigned char *)(v1462 + 3) & 1) == 0
              && ((uint64_t v1462 = *(void *)(v1462 + 24)) == 0 || (*(unsigned char *)(v1462 + 3) & 1) == 0)
              || (uint64_t v1463 = *(void *)(v1462 + 8)) == 0
              || **(_WORD **)(v1463 + 16) != 178)
            {
              v1585 = ***(llvm::ConstantFP ****)v1770[1];
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)1593835520;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1756 = v1585;
              v1587 = llvm::ConstantFP::get(v1585, (llvm::LLVMContext *)v1851, v1586);
              uint64_t v1588 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770
                       + 3))(v1770, v1805, v1587);
              size_t v1765 = v1589;
              uint64_t v1769 = v1588;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)528482304;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1591 = llvm::ConstantFP::get(v1585, (llvm::LLVMContext *)v1851, v1590);
              uint64_t v1592 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1770
                       + 3))(v1770, v1805, v1591);
              uint64_t v1594 = v1593;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = *v1210;
              LODWORD(v1852[0]) = 0;
              *((void *)&v1852[0] + 1) = v1592;
              *(void *)&v1852[1] = v1594;
              DWORD2(v1852[1]) = 1;
              v1595 = v1770;
              uint64_t v1596 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                       + 4))(v1770, 165, v1805, 1, v1851, 2, 0);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = 2;
              LODWORD(v1852[0]) = 2;
              DWORD2(v1852[0]) = *v1210;
              DWORD2(v1852[1]) = 0;
              uint64_t v1853 = v1769;
              size_t v1854 = v1765;
              int v1855 = 1;
              uint64_t v1856 = v1596;
              v1857 = v1597;
              int v1858 = 1;
              LODWORD(v1859) = DWORD2(v1852[0]);
              int v1861 = 0;
              v1598 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                               + 4))(v1595, 51, v1805, 1, v1851, 5, 0);
              v1600 = v1599;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1598;
              v1851[1] = v1599;
              LODWORD(v1852[0]) = 1;
              v1601 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                               + 4))(v1595, 333, v1805, 1, v1851, 1, 0);
              v1603 = v1602;
              v1851[0] = (void *)257;
              LODWORD(v1851[1]) = 0;
              uint64_t v1604 = sub_1CC7374CC((uint64_t)v1770, (unint64_t *)v1851, 0.5);
              size_t v1740 = v1605;
              v1748 = (llvm::ConstantFP *)v1604;
              v1851[0] = (void *)257;
              LODWORD(v1851[1]) = 0;
              v1734 = (void *)sub_1CC7374CC((uint64_t)v1770, (unint64_t *)v1851, -0.5);
              v1607 = v1606;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1598;
              v1851[1] = v1600;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1601;
              *(void *)&v1852[1] = v1603;
              DWORD2(v1852[1]) = 1;
              v1728 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                               + 4))(v1595, 165, v1805, 1, v1851, 2, 0);
              v1609 = v1608;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1728;
              v1851[1] = v1608;
              LODWORD(v1852[0]) = 1;
              uint64_t v1610 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                       + 4))(v1595, 177, v1805, 1, v1851, 1, 0);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1598;
              v1851[1] = v1600;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1601;
              *(void *)&v1852[1] = v1603;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = v1610;
              size_t v1854 = v1611;
              int v1855 = 1;
              uint64_t v1612 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                       + 4))(v1595, 166, v1805, 1, v1851, 3, 0);
              uint64_t v1614 = v1613;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1734;
              v1851[1] = v1607;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1601;
              *(void *)&v1852[1] = v1603;
              DWORD2(v1852[1]) = 1;
              v1615 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                               + 4))(v1595, 165, v1805, 1, v1851, 2, 0);
              v1617 = v1616;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1728;
              v1851[1] = v1609;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1615;
              *(void *)&v1852[1] = v1616;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1748;
              size_t v1854 = v1740;
              int v1855 = 1;
              uint64_t v1618 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                       + 4))(v1595, 166, v1805, 1, v1851, 3, 0);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1615;
              v1851[1] = v1617;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1612;
              *(void *)&v1852[1] = v1614;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = v1618;
              size_t v1854 = v1619;
              int v1855 = 1;
              v1620 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                               + 4))(v1595, 166, v1805, 1, v1851, 3, 0);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1620;
              v1851[1] = v1621;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1601;
              *(void *)&v1852[1] = v1603;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = (uint64_t)v1601;
              size_t v1854 = (size_t)v1603;
              int v1855 = 1;
              uint64_t v1622 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1595
                       + 4))(v1595, 166, v1805, 1, v1851, 3, 0);
              v1741 = v1623;
              v1749 = (llvm::ConstantFP *)v1622;
              v1877[0] = (void *)257;
              LODWORD(v1877[1]) = 0;
              v1851[0] = v1601;
              v1624 = v1603;
              v1851[1] = v1603;
              LODWORD(v1852[0]) = 1;
              v1890 = (void *)257;
              LODWORD(v1891) = 0;
              uint64_t v1625 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x20);
              v1627 = *(llvm::ConstantInt **)v1625;
              unsigned int v1628 = *(_DWORD *)(v1625 + 8);
              LODWORD(v1805[1]) = v1628 >> 8;
              if (v1628 >> 8 > 0x40) {
                operator new[]();
              }
              if (v1628 <= 0xFF) {
                LOBYTE(v1629) = 0;
              }
              else {
                unint64_t v1629 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1628) + 63);
              }
              v1805[0] = (llvm::MachineInstr *)(v1629 & 1);
              v1630 = llvm::ConstantInt::get(v1627, (llvm::LLVMContext *)v1805, v1626);
              if (LODWORD(v1805[1]) >= 0x41 && v1805[0]) {
                MEMORY[0x1D25D9CB0](v1805[0], 0x1000C8000313F17);
              }
              *((void *)&v1852[0] + 1) = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*v1770 + 2))(v1770, &v1890, v1630);
              *(void *)&v1852[1] = v1631;
              DWORD2(v1852[1]) = 1;
              uint64_t v1632 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*v1770
                       + 4))(v1770, 46, v1877, 1, v1851, 2, 0);
              uint64_t v1634 = v1633;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              uint64_t v1635 = llvm::IntegerType::get(***(llvm::IntegerType ****)v1770[1], (llvm::LLVMContext *)0x20);
              v1637 = *(llvm::ConstantInt **)v1635;
              unsigned int v1638 = *(_DWORD *)(v1635 + 8);
              LODWORD(v1851[1]) = v1638 >> 8;
              if (v1638 >> 8 > 0x40) {
                operator new[]();
              }
              if (v1638 <= 0xFF) {
                LODWORD(v1639) = 0;
              }
              else {
                unint64_t v1639 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v1638) + 63);
              }
              v1851[0] = (void *)(v1639 & 0x7F7FFFFF);
              v1640 = llvm::ConstantInt::get(v1637, (llvm::LLVMContext *)v1851, v1636);
              if (LODWORD(v1851[1]) >= 0x41 && v1851[0]) {
                MEMORY[0x1D25D9CB0](v1851[0], 0x1000C8000313F17);
              }
              v1641 = v1770;
              uint64_t v1642 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, void *))*v1770 + 2))(v1770, v1805, v1640);
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1851[0]) = 35;
              LODWORD(v1852[0]) = 2;
              *((void *)&v1852[0] + 1) = v1632;
              *(void *)&v1852[1] = v1634;
              DWORD2(v1852[1]) = 1;
              uint64_t v1853 = v1642;
              size_t v1854 = v1643;
              int v1855 = 1;
              uint64_t v1856 = (uint64_t)v1601;
              v1857 = v1624;
              int v1858 = 1;
              uint64_t v1859 = (uint64_t)v1749;
              v1860 = v1741;
              int v1861 = 1;
              v1644 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1641
                               + 4))(v1641, 51, v1805, 1, v1851, 5, 0);
              v1646 = v1645;
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              LODWORD(v1877[1]) = 32;
              v1877[0] = (void *)796917760;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1851[1], (const llvm::APInt **)v1877);
              v1648 = llvm::ConstantFP::get(v1756, (llvm::LLVMContext *)v1851, v1647);
              uint64_t v1649 = (*((uint64_t (**)(unsigned __int8 **, llvm::MachineInstr **, const llvm::detail::DoubleAPFloat *))*v1641
                       + 3))(v1641, v1805, v1648);
              uint64_t v1651 = v1650;
              if (v1851[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)v1852);
              }
              else if ((*((_DWORD *)v1851[1] + 2) - 64) <= 0xFFFFFF7F && *(void *)&v1852[0])
              {
                MEMORY[0x1D25D9CB0](*(void *)&v1852[0], 0x1000C8000313F17);
              }
              v1805[0] = (llvm::MachineInstr *)257;
              LODWORD(v1805[1]) = 0;
              v1851[0] = v1644;
              v1851[1] = v1646;
              LODWORD(v1852[0]) = 1;
              *((void *)&v1852[0] + 1) = v1649;
              *(void *)&v1852[1] = v1651;
              DWORD2(v1852[1]) = 1;
              uint64_t v1652 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
                       + 4))(v1770, 165, v1805, 1, v1851, 2, 0);
              uint64_t v32 = v1720;
              LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
              LODWORD(v1805[1]) = 1;
              LODWORD(v1851[0]) = 2;
              LODWORD(v1852[0]) = 2;
              DWORD2(v1852[0]) = *v1210;
              DWORD2(v1852[1]) = 0;
              uint64_t v1853 = v1769;
              size_t v1854 = v1765;
              int v1855 = 1;
              uint64_t v1856 = v1652;
              v1857 = v1653;
              int v1858 = 1;
              uint64_t v1859 = (uint64_t)v1644;
              v1860 = (llvm::MachineInstr *)v1646;
              int v1861 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, void))*v1770
               + 4))(v1770, 51, v1805, 1, v1851, 5, 0);
              goto LABEL_127;
            }
          }
        }
        LODWORD(v1805[0]) = *(_DWORD *)(*((void *)v1720 + 4) + 4);
        LODWORD(v1805[1]) = 1;
        LODWORD(v1851[0]) = v1209;
        LODWORD(v1852[0]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, llvm::MachineInstr **, uint64_t, void **, uint64_t, uint64_t))*v1770
         + 4))(v1770, 333, v1805, 1, v1851, 1, *((unsigned __int16 *)v1720 + 22) | 0x100000000);
        goto LABEL_1607;
      }
      uint64_t v1444 = *(void *)(v1443 + 32);
      if ((_UNKNOWN *)v1444 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v1851[1], (const llvm::detail::DoubleAPFloat *)(v1443 + 32));
      }
      else
      {
        v1851[1] = *(void **)(v1443 + 32);
        if ((*(_DWORD *)(v1444 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v1445 = *(unsigned char *)(v1443 + 52);
        int v1446 = v1445 & 7;
        BYTE12(v1852[0]) = BYTE12(v1852[0]) & 0xF0 | v1445 & 8 | v1445 & 7;
        DWORD2(v1852[0]) = *(_DWORD *)(v1443 + 48);
        BOOL v1448 = (v1445 & 6) != 0 && v1446 != 3;
        if (v1446 == 1 || v1448)
        {
          uint64_t v1450 = *((unsigned int *)v1851[1] + 2);
          if ((v1450 - 64) <= 0xFFFFFF7F) {
            v1451 = *(void **)&v1852[0];
          }
          else {
            v1451 = v1852;
          }
          v1454 = *(uint64_t **)(v1443 + 40);
          v1453 = (uint64_t *)(v1443 + 40);
          v1452 = v1454;
          if ((*(_DWORD *)(*(v1453 - 1) + 8) - 64) >= 0xFFFFFF80) {
            v1452 = v1453;
          }
          if (v1450 <= 0xFFFFFFBF)
          {
            unint64_t v1455 = (unint64_t)(v1450 + 64) >> 6;
            do
            {
              uint64_t v1456 = *v1452++;
              *v1451++ = v1456;
              --v1455;
            }
            while (v1455);
          }
        }
      }
      llvm::APFloat::convert((uint64_t)v1851, &unk_1CFB2E31C, 1, v1877);
      double v1440 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v1851));
      v1441 = ***v1710;
      v1442 = &v1862;
      goto LABEL_1592;
  }
  return v25;
}